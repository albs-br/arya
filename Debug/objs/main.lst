                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _GetNextPieceColors
                                     38 	.globl _DrawColumn
                                     39 	.globl _DrawNumber
                                     40 	.globl _DrawString
                                     41 	.globl _DrawChar
                                     42 	.globl _DrawExplosionSprite
                                     43 	.globl _HideExplosionSprite
                                     44 	.globl _HideHitSprite
                                     45 	.globl _DrawHitSprite
                                     46 	.globl _HideArrowSprite
                                     47 	.globl _DrawArrowSprite
                                     48 	.globl _GetRandomInInterval
                                     49 	.globl _GetRandom
                                     50 	.globl _InitRnd
                                     51 	.globl _Power
                                     52 	.globl _Wait
                                     53 	.globl _SNSMAT
                                     54 	.globl _GTTRIG
                                     55 	.globl _GTSTCK
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _rndSeed
                                     67 	.globl _newLevel
                                     68 	.globl _level
                                     69 	.globl _blocksRemoved
                                     70 	.globl _counter
                                     71 	.globl _line
                                     72 	.globl _col
                                     73 	.globl _gameOver
                                     74 	.globl _nextPieceColor_Back
                                     75 	.globl _nextPieceColor_Front
                                     76 	.globl _Rand_x
                                     77 	.globl _Rand_c
                                     78 	.globl _Rand_b
                                     79 	.globl _Rand_a
                                     80 	.globl _speed
                                     81 	.globl _nextBottomPiece
                                     82 	.globl _nextMidPiece
                                     83 	.globl _nextTopPiece
                                     84 	.globl _bottomPiece
                                     85 	.globl _midPiece
                                     86 	.globl _topPiece
                                     87 	.globl _playfieldTemp
                                     88 	.globl _playfield
                                     89 	.globl _GETPNT
                                     90 	.globl _PUTPNT
                                     91 	.globl _REPCNT
                                     92 	.globl _SCNCNT
                                     93 	.globl _ATRBYT
                                     94 	.globl _CMASK
                                     95 	.globl _CLOC
                                     96 	.globl _BDRCLR
                                     97 	.globl _BAKCLR
                                     98 	.globl _FORCLR
                                     99 	.globl _TRGFLG
                                    100 	.globl _STATFL
                                    101 	.globl _MSX_vdp_regs
                                    102 	.globl _CNSDFG
                                    103 	.globl _CSRX
                                    104 	.globl _CSRY
                                    105 	.globl _MSX_modedata_screen3
                                    106 	.globl _MSX_modedata_screen2
                                    107 	.globl _MSX_modedata_screen1
                                    108 	.globl _MSX_modedata_screen0
                                    109 	.globl _CLIKSW
                                    110 	.globl _JIFFY
                                    111 	.globl _CLMLST
                                    112 	.globl _CRTCNT
                                    113 	.globl _LINLEN
                                    114 	.globl _LINL32
                                    115 	.globl _LINL40
                                    116 	.globl _MSX_charset
                                    117 	.globl _FONT
                                    118 	.globl _pieces
                                    119 	.globl _MSX_version
                                    120 	.globl _MSX_vdp_port_write
                                    121 	.globl _MSX_vdp_port_read
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 ;--------------------------------------------------------
                                    126 ; ram data
                                    127 ;--------------------------------------------------------
                                    128 	.area _DATA
                           000004   129 _MSX_charset	=	0x0004
                           00F3AE   130 _LINL40	=	0xf3ae
                           00F3AF   131 _LINL32	=	0xf3af
                           00F3B0   132 _LINLEN	=	0xf3b0
                           00F3B1   133 _CRTCNT	=	0xf3b1
                           00F3B1   134 _CLMLST	=	0xf3b1
                           00FC9E   135 _JIFFY	=	0xfc9e
                           00F3DB   136 _CLIKSW	=	0xf3db
                           00F3B3   137 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   138 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   139 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   140 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   141 _CSRY	=	0xf3dc
                           00F3DD   142 _CSRX	=	0xf3dd
                           00F3DE   143 _CNSDFG	=	0xf3de
                           00F3DF   144 _MSX_vdp_regs	=	0xf3df
                           00F3E7   145 _STATFL	=	0xf3e7
                           00F3E8   146 _TRGFLG	=	0xf3e8
                           00F3E9   147 _FORCLR	=	0xf3e9
                           00F3EA   148 _BAKCLR	=	0xf3ea
                           00F3EB   149 _BDRCLR	=	0xf3eb
                           00F92A   150 _CLOC	=	0xf92a
                           00F92C   151 _CMASK	=	0xf92c
                           00F3F2   152 _ATRBYT	=	0xf3f2
                           00F3F6   153 _SCNCNT	=	0xf3f6
                           00F3F7   154 _REPCNT	=	0xf3f7
                           00F3F8   155 _PUTPNT	=	0xf3f8
                           00F3FA   156 _GETPNT	=	0xf3fa
      000000                        157 _playfield::
      000000                        158 	.ds 72
      000048                        159 _playfieldTemp::
      000048                        160 	.ds 72
      000090                        161 _topPiece::
      000090                        162 	.ds 1
      000091                        163 _midPiece::
      000091                        164 	.ds 1
      000092                        165 _bottomPiece::
      000092                        166 	.ds 1
      000093                        167 _nextTopPiece::
      000093                        168 	.ds 1
      000094                        169 _nextMidPiece::
      000094                        170 	.ds 1
      000095                        171 _nextBottomPiece::
      000095                        172 	.ds 1
      000096                        173 _speed::
      000096                        174 	.ds 1
      000097                        175 _Rand_a::
      000097                        176 	.ds 1
      000098                        177 _Rand_b::
      000098                        178 	.ds 1
      000099                        179 _Rand_c::
      000099                        180 	.ds 1
      00009A                        181 _Rand_x::
      00009A                        182 	.ds 1
      00009B                        183 _nextPieceColor_Front::
      00009B                        184 	.ds 1
      00009C                        185 _nextPieceColor_Back::
      00009C                        186 	.ds 1
                                    187 ;--------------------------------------------------------
                                    188 ; ram data
                                    189 ;--------------------------------------------------------
                                    190 	.area _INITIALIZED
      000000                        191 _gameOver::
      000000                        192 	.ds 1
      000001                        193 _col::
      000001                        194 	.ds 1
      000002                        195 _line::
      000002                        196 	.ds 1
      000003                        197 _counter::
      000003                        198 	.ds 1
      000004                        199 _blocksRemoved::
      000004                        200 	.ds 2
      000006                        201 _level::
      000006                        202 	.ds 1
      000007                        203 _newLevel::
      000007                        204 	.ds 1
      000008                        205 _rndSeed::
      000008                        206 	.ds 1
                                    207 ;--------------------------------------------------------
                                    208 ; absolute external ram data
                                    209 ;--------------------------------------------------------
                                    210 	.area _DABS (ABS)
                                    211 ;--------------------------------------------------------
                                    212 ; global & static initialisations
                                    213 ;--------------------------------------------------------
                                    214 	.area _HOME
                                    215 	.area _GSINIT
                                    216 	.area _GSFINAL
                                    217 	.area _GSINIT
                                    218 ;--------------------------------------------------------
                                    219 ; Home
                                    220 ;--------------------------------------------------------
                                    221 	.area _HOME
                                    222 	.area _HOME
                                    223 ;--------------------------------------------------------
                                    224 ; code
                                    225 ;--------------------------------------------------------
                                    226 	.area _CODE
                                    227 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    228 ;	---------------------------------
                                    229 ; Function Wait
                                    230 ; ---------------------------------
      000000                        231 _Wait::
                                    232 ;src\/Common.h:2: do {
      000000 D1               [10]  233 	pop	de
      000001 C1               [10]  234 	pop	bc
      000002 C5               [11]  235 	push	bc
      000003 D5               [11]  236 	push	de
      000004                        237 00104$:
                                    238 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  239 	ld	de, (_JIFFY)
                                    240 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        241 00101$:
      000008 2A 9E FC         [16]  242 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  243 	cp	a, a
      00000C ED 52            [15]  244 	sbc	hl, de
      00000E 28 F8            [12]  245 	jr	Z, 00101$
                                    246 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  247 	ld	e, c
      000011 50               [ 4]  248 	ld	d, b
      000012 0B               [ 6]  249 	dec	bc
      000013 7A               [ 4]  250 	ld	a, d
      000014 B3               [ 4]  251 	or	a, e
      000015 20 ED            [12]  252 	jr	NZ, 00104$
                                    253 ;src\/Common.h:8: }
      000017 C9               [10]  254 	ret
                           000006   255 _MSX_vdp_port_read	=	0x0006
                           000007   256 _MSX_vdp_port_write	=	0x0007
                           00002D   257 _MSX_version	=	0x002d
      000018                        258 _pieces:
      000018 04                     259 	.db #0x04	; 4
      000019 08                     260 	.db #0x08	; 8
      00001A 0C                     261 	.db #0x0c	; 12
      00001B 10                     262 	.db #0x10	; 16
      00001C 14                     263 	.db #0x14	; 20
                                    264 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    265 ;	---------------------------------
                                    266 ; Function Power
                                    267 ; ---------------------------------
      00001D                        268 _Power::
      00001D DD E5            [15]  269 	push	ix
      00001F DD 21 00 00      [14]  270 	ld	ix,#0
      000023 DD 39            [15]  271 	add	ix,sp
                                    272 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  273 	ld	c, 4 (ix)
      000028 06 00            [ 7]  274 	ld	b, #0x00
      00002A 69               [ 4]  275 	ld	l, c
      00002B 60               [ 4]  276 	ld	h, b
                                    277 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  278 	ld	a, 5 (ix)
      00002F B7               [ 4]  279 	or	a, a
      000030 20 05            [12]  280 	jr	NZ, 00111$
      000032 21 01 00         [10]  281 	ld	hl, #0x0001
      000035 18 16            [12]  282 	jr	00107$
                                    283 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        284 00111$:
      000037 1E 01            [ 7]  285 	ld	e, #0x01
      000039                        286 00105$:
      000039 7B               [ 4]  287 	ld	a, e
      00003A DD 96 05         [19]  288 	sub	a, 5 (ix)
      00003D 30 0E            [12]  289 	jr	NC, 00103$
                                    290 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  291 	push	bc
      000040 D5               [11]  292 	push	de
      000041 C5               [11]  293 	push	bc
      000042 E5               [11]  294 	push	hl
      000043 CDr00r00         [17]  295 	call	__mulint
      000046 F1               [10]  296 	pop	af
      000047 F1               [10]  297 	pop	af
      000048 D1               [10]  298 	pop	de
      000049 C1               [10]  299 	pop	bc
                                    300 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  301 	inc	e
      00004B 18 EC            [12]  302 	jr	00105$
      00004D                        303 00103$:
                                    304 ;src\/Math.h:10: return power;
      00004D                        305 00107$:
                                    306 ;src\/Math.h:11: }
      00004D DD E1            [14]  307 	pop	ix
      00004F C9               [10]  308 	ret
                                    309 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    310 ;	---------------------------------
                                    311 ; Function InitRnd
                                    312 ; ---------------------------------
      000050                        313 _InitRnd::
                                    314 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  315 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  316 	ld	hl, #2
      000056 39               [11]  317 	add	hl, sp
      000057 AE               [ 7]  318 	xor	a, (hl)
      000058 32r97r00         [13]  319 	ld	(_Rand_a+0), a
                                    320 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  321 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  322 	ld	hl, #3
      000061 39               [11]  323 	add	hl, sp
      000062 AE               [ 7]  324 	xor	a, (hl)
      000063 32r98r00         [13]  325 	ld	(_Rand_b+0), a
                                    326 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  327 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  328 	ld	hl, #4
      00006C 39               [11]  329 	add	hl, sp
      00006D AE               [ 7]  330 	xor	a, (hl)
      00006E 32r99r00         [13]  331 	ld	(_Rand_c+0), a
                                    332 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  333 	ld	hl, #_Rand_x
      000074 34               [11]  334 	inc	(hl)
                                    335 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  336 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  337 	ld	hl, #_Rand_c
      00007B AE               [ 7]  338 	xor	a, (hl)
      00007C 21r9Ar00         [10]  339 	ld	hl, #_Rand_x
      00007F AE               [ 7]  340 	xor	a, (hl)
      000080 32r97r00         [13]  341 	ld	(_Rand_a+0), a
                                    342 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  343 	ld	hl, #_Rand_b
      000086 7E               [ 7]  344 	ld	a, (hl)
      000087 FD 21r97r00      [14]  345 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  346 	add	a, 0 (iy)
      00008E 77               [ 7]  347 	ld	(hl), a
                                    348 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  349 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  350 	srl	a
      000094 21r99r00         [10]  351 	ld	hl, #_Rand_c
      000097 86               [ 7]  352 	add	a, (hl)
      000098 FD 21r97r00      [14]  353 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  354 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  355 	ld	(_Rand_c+0), a
                                    356 ;src\/Random.h:38: }
      0000A2 C9               [10]  357 	ret
                                    358 ;src\/Random.h:40: unsigned char GetRandom() {
                                    359 ;	---------------------------------
                                    360 ; Function GetRandom
                                    361 ; ---------------------------------
      0000A3                        362 _GetRandom::
                                    363 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  364 	ld	hl, #_Rand_x
      0000A6 34               [11]  365 	inc	(hl)
                                    366 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  367 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  368 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  369 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  370 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  371 	xor	a, (hl)
      0000B2 32r97r00         [13]  372 	ld	(_Rand_a+0), a
                                    373 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  374 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  375 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  376 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  377 	add	a, 0 (iy)
      0000C0 77               [ 7]  378 	ld	(hl), a
                                    379 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  380 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  381 	srl	a
      0000C6 21r99r00         [10]  382 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  383 	add	a, (hl)
      0000CA FD 21r97r00      [14]  384 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  385 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  386 	ld	(_Rand_c+0), a
                                    387 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  388 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  389 	ld	l, a
                                    390 ;src\/Random.h:47: }
      0000D8 C9               [10]  391 	ret
                                    392 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    393 ;	---------------------------------
                                    394 ; Function GetRandomInInterval
                                    395 ; ---------------------------------
      0000D9                        396 _GetRandomInInterval::
                                    397 ;src\/Random.h:53: do {
      0000D9                        398 00101$:
                                    399 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  400 	call	_GetRandom
      0000DC 7D               [ 4]  401 	ld	a, l
      0000DD 21 03 00         [10]  402 	ld	hl, #3
      0000E0 39               [11]  403 	add	hl, sp
      0000E1 A6               [ 7]  404 	and	a, (hl)
      0000E2 4F               [ 4]  405 	ld	c, a
                                    406 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  407 	ld	hl, #2
      0000E6 39               [11]  408 	add	hl, sp
      0000E7 7E               [ 7]  409 	ld	a, (hl)
      0000E8 91               [ 4]  410 	sub	a, c
      0000E9 38 EE            [12]  411 	jr	C, 00101$
                                    412 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  413 	ld	l, c
                                    414 ;src\/Random.h:59: }
      0000EC C9               [10]  415 	ret
                                    416 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    417 ;	---------------------------------
                                    418 ; Function DrawArrowSprite
                                    419 ; ---------------------------------
      0000ED                        420 _DrawArrowSprite::
      0000ED DD E5            [15]  421 	push	ix
      0000EF DD 21 00 00      [14]  422 	ld	ix,#0
      0000F3 DD 39            [15]  423 	add	ix,sp
      0000F5 21 F8 FF         [10]  424 	ld	hl, #-8
      0000F8 39               [11]  425 	add	hl, sp
      0000F9 F9               [ 6]  426 	ld	sp, hl
                                    427 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  428 	ld	hl, #0
      0000FD 39               [11]  429 	add	hl, sp
      0000FE EB               [ 4]  430 	ex	de, hl
      0000FF 3E 0F            [ 7]  431 	ld	a, #0x0f
      000101 12               [ 7]  432 	ld	(de), a
      000102 6B               [ 4]  433 	ld	l, e
      000103 62               [ 4]  434 	ld	h, d
      000104 23               [ 6]  435 	inc	hl
      000105 36 0E            [10]  436 	ld	(hl), #0x0e
      000107 6B               [ 4]  437 	ld	l, e
      000108 62               [ 4]  438 	ld	h, d
      000109 23               [ 6]  439 	inc	hl
      00010A 23               [ 6]  440 	inc	hl
      00010B 36 05            [10]  441 	ld	(hl), #0x05
      00010D 6B               [ 4]  442 	ld	l, e
      00010E 62               [ 4]  443 	ld	h, d
      00010F 23               [ 6]  444 	inc	hl
      000110 23               [ 6]  445 	inc	hl
      000111 23               [ 6]  446 	inc	hl
      000112 36 04            [10]  447 	ld	(hl), #0x04
      000114 21 04 00         [10]  448 	ld	hl, #0x0004
      000117 19               [11]  449 	add	hl, de
      000118 36 04            [10]  450 	ld	(hl), #0x04
      00011A 21 05 00         [10]  451 	ld	hl, #0x0005
      00011D 19               [11]  452 	add	hl, de
      00011E 36 05            [10]  453 	ld	(hl), #0x05
      000120 21 06 00         [10]  454 	ld	hl, #0x0006
      000123 19               [11]  455 	add	hl, de
      000124 36 0E            [10]  456 	ld	(hl), #0x0e
      000126 21 07 00         [10]  457 	ld	hl, #0x0007
      000129 19               [11]  458 	add	hl, de
      00012A 36 0F            [10]  459 	ld	(hl), #0x0f
                                    460 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  461 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  462 	ld	a, l
      000130 E6 0E            [ 7]  463 	and	a, #0x0e
      000132 6F               [ 4]  464 	ld	l, a
      000133 26 00            [ 7]  465 	ld	h, #0x00
      000135 CB 3C            [ 8]  466 	srl	h
      000137 CB 1D            [ 8]  467 	rr	l
                                    468 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  469 	ld	a, 5 (ix)
      00013C 3D               [ 4]  470 	dec	a
      00013D E5               [11]  471 	push	hl
      00013E D5               [11]  472 	push	de
      00013F F5               [11]  473 	push	af
      000140 33               [ 6]  474 	inc	sp
      000141 01 00 1B         [10]  475 	ld	bc, #0x1b00
      000144 C5               [11]  476 	push	bc
      000145 CDr00r00         [17]  477 	call	_WRTVRM
      000148 F1               [10]  478 	pop	af
      000149 33               [ 6]  479 	inc	sp
      00014A DD 7E 04         [19]  480 	ld	a, 4 (ix)
      00014D F5               [11]  481 	push	af
      00014E 33               [ 6]  482 	inc	sp
      00014F 01 01 1B         [10]  483 	ld	bc, #0x1b01
      000152 C5               [11]  484 	push	bc
      000153 CDr00r00         [17]  485 	call	_WRTVRM
      000156 F1               [10]  486 	pop	af
      000157 33               [ 6]  487 	inc	sp
      000158 AF               [ 4]  488 	xor	a, a
      000159 F5               [11]  489 	push	af
      00015A 33               [ 6]  490 	inc	sp
      00015B 01 02 1B         [10]  491 	ld	bc, #0x1b02
      00015E C5               [11]  492 	push	bc
      00015F CDr00r00         [17]  493 	call	_WRTVRM
      000162 F1               [10]  494 	pop	af
      000163 33               [ 6]  495 	inc	sp
      000164 D1               [10]  496 	pop	de
      000165 E1               [10]  497 	pop	hl
                                    498 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  499 	ld	h, #0x00
      000168 19               [11]  500 	add	hl, de
      000169 7E               [ 7]  501 	ld	a, (hl)
      00016A F5               [11]  502 	push	af
      00016B 33               [ 6]  503 	inc	sp
      00016C 21 03 1B         [10]  504 	ld	hl, #0x1b03
      00016F E5               [11]  505 	push	hl
      000170 CDr00r00         [17]  506 	call	_WRTVRM
                                    507 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  508 	ld	sp,ix
      000175 DD E1            [14]  509 	pop	ix
      000177 C9               [10]  510 	ret
      000178                        511 _FONT:
      000178 00                     512 	.db #0x00	; 0
      000179 00                     513 	.db #0x00	; 0
      00017A 00                     514 	.db #0x00	; 0
      00017B 00                     515 	.db #0x00	; 0
      00017C 00                     516 	.db #0x00	; 0
      00017D 00                     517 	.db #0x00	; 0
      00017E 00                     518 	.db #0x00	; 0
      00017F 00                     519 	.db #0x00	; 0
      000180 30                     520 	.db #0x30	; 48	'0'
      000181 78                     521 	.db #0x78	; 120	'x'
      000182 78                     522 	.db #0x78	; 120	'x'
      000183 30                     523 	.db #0x30	; 48	'0'
      000184 30                     524 	.db #0x30	; 48	'0'
      000185 00                     525 	.db #0x00	; 0
      000186 30                     526 	.db #0x30	; 48	'0'
      000187 00                     527 	.db #0x00	; 0
      000188 6C                     528 	.db #0x6c	; 108	'l'
      000189 6C                     529 	.db #0x6c	; 108	'l'
      00018A 6C                     530 	.db #0x6c	; 108	'l'
      00018B 00                     531 	.db #0x00	; 0
      00018C 00                     532 	.db #0x00	; 0
      00018D 00                     533 	.db #0x00	; 0
      00018E 00                     534 	.db #0x00	; 0
      00018F 00                     535 	.db #0x00	; 0
      000190 6C                     536 	.db #0x6c	; 108	'l'
      000191 6C                     537 	.db #0x6c	; 108	'l'
      000192 FE                     538 	.db #0xfe	; 254
      000193 6C                     539 	.db #0x6c	; 108	'l'
      000194 FE                     540 	.db #0xfe	; 254
      000195 6C                     541 	.db #0x6c	; 108	'l'
      000196 6C                     542 	.db #0x6c	; 108	'l'
      000197 00                     543 	.db #0x00	; 0
      000198 30                     544 	.db #0x30	; 48	'0'
      000199 7C                     545 	.db #0x7c	; 124
      00019A C0                     546 	.db #0xc0	; 192
      00019B 78                     547 	.db #0x78	; 120	'x'
      00019C 0C                     548 	.db #0x0c	; 12
      00019D F8                     549 	.db #0xf8	; 248
      00019E 30                     550 	.db #0x30	; 48	'0'
      00019F 00                     551 	.db #0x00	; 0
      0001A0 00                     552 	.db #0x00	; 0
      0001A1 C6                     553 	.db #0xc6	; 198
      0001A2 CC                     554 	.db #0xcc	; 204
      0001A3 18                     555 	.db #0x18	; 24
      0001A4 30                     556 	.db #0x30	; 48	'0'
      0001A5 66                     557 	.db #0x66	; 102	'f'
      0001A6 C6                     558 	.db #0xc6	; 198
      0001A7 00                     559 	.db #0x00	; 0
      0001A8 38                     560 	.db #0x38	; 56	'8'
      0001A9 6C                     561 	.db #0x6c	; 108	'l'
      0001AA 38                     562 	.db #0x38	; 56	'8'
      0001AB 76                     563 	.db #0x76	; 118	'v'
      0001AC DC                     564 	.db #0xdc	; 220
      0001AD CC                     565 	.db #0xcc	; 204
      0001AE 76                     566 	.db #0x76	; 118	'v'
      0001AF 00                     567 	.db #0x00	; 0
      0001B0 60                     568 	.db #0x60	; 96
      0001B1 60                     569 	.db #0x60	; 96
      0001B2 C0                     570 	.db #0xc0	; 192
      0001B3 00                     571 	.db #0x00	; 0
      0001B4 00                     572 	.db #0x00	; 0
      0001B5 00                     573 	.db #0x00	; 0
      0001B6 00                     574 	.db #0x00	; 0
      0001B7 00                     575 	.db #0x00	; 0
      0001B8 18                     576 	.db #0x18	; 24
      0001B9 30                     577 	.db #0x30	; 48	'0'
      0001BA 60                     578 	.db #0x60	; 96
      0001BB 60                     579 	.db #0x60	; 96
      0001BC 60                     580 	.db #0x60	; 96
      0001BD 30                     581 	.db #0x30	; 48	'0'
      0001BE 18                     582 	.db #0x18	; 24
      0001BF 00                     583 	.db #0x00	; 0
      0001C0 60                     584 	.db #0x60	; 96
      0001C1 30                     585 	.db #0x30	; 48	'0'
      0001C2 18                     586 	.db #0x18	; 24
      0001C3 18                     587 	.db #0x18	; 24
      0001C4 18                     588 	.db #0x18	; 24
      0001C5 30                     589 	.db #0x30	; 48	'0'
      0001C6 60                     590 	.db #0x60	; 96
      0001C7 00                     591 	.db #0x00	; 0
      0001C8 00                     592 	.db #0x00	; 0
      0001C9 66                     593 	.db #0x66	; 102	'f'
      0001CA 3C                     594 	.db #0x3c	; 60
      0001CB FF                     595 	.db #0xff	; 255
      0001CC 3C                     596 	.db #0x3c	; 60
      0001CD 66                     597 	.db #0x66	; 102	'f'
      0001CE 00                     598 	.db #0x00	; 0
      0001CF 00                     599 	.db #0x00	; 0
      0001D0 00                     600 	.db #0x00	; 0
      0001D1 30                     601 	.db #0x30	; 48	'0'
      0001D2 30                     602 	.db #0x30	; 48	'0'
      0001D3 FC                     603 	.db #0xfc	; 252
      0001D4 30                     604 	.db #0x30	; 48	'0'
      0001D5 30                     605 	.db #0x30	; 48	'0'
      0001D6 00                     606 	.db #0x00	; 0
      0001D7 00                     607 	.db #0x00	; 0
      0001D8 00                     608 	.db #0x00	; 0
      0001D9 00                     609 	.db #0x00	; 0
      0001DA 00                     610 	.db #0x00	; 0
      0001DB 00                     611 	.db #0x00	; 0
      0001DC 00                     612 	.db #0x00	; 0
      0001DD 30                     613 	.db #0x30	; 48	'0'
      0001DE 30                     614 	.db #0x30	; 48	'0'
      0001DF 60                     615 	.db #0x60	; 96
      0001E0 00                     616 	.db #0x00	; 0
      0001E1 00                     617 	.db #0x00	; 0
      0001E2 00                     618 	.db #0x00	; 0
      0001E3 FC                     619 	.db #0xfc	; 252
      0001E4 00                     620 	.db #0x00	; 0
      0001E5 00                     621 	.db #0x00	; 0
      0001E6 00                     622 	.db #0x00	; 0
      0001E7 00                     623 	.db #0x00	; 0
      0001E8 00                     624 	.db #0x00	; 0
      0001E9 00                     625 	.db #0x00	; 0
      0001EA 00                     626 	.db #0x00	; 0
      0001EB 00                     627 	.db #0x00	; 0
      0001EC 00                     628 	.db #0x00	; 0
      0001ED 30                     629 	.db #0x30	; 48	'0'
      0001EE 30                     630 	.db #0x30	; 48	'0'
      0001EF 00                     631 	.db #0x00	; 0
      0001F0 06                     632 	.db #0x06	; 6
      0001F1 0C                     633 	.db #0x0c	; 12
      0001F2 18                     634 	.db #0x18	; 24
      0001F3 30                     635 	.db #0x30	; 48	'0'
      0001F4 60                     636 	.db #0x60	; 96
      0001F5 C0                     637 	.db #0xc0	; 192
      0001F6 80                     638 	.db #0x80	; 128
      0001F7 00                     639 	.db #0x00	; 0
      0001F8 7C                     640 	.db #0x7c	; 124
      0001F9 C6                     641 	.db #0xc6	; 198
      0001FA CE                     642 	.db #0xce	; 206
      0001FB DE                     643 	.db #0xde	; 222
      0001FC F6                     644 	.db #0xf6	; 246
      0001FD E6                     645 	.db #0xe6	; 230
      0001FE 7C                     646 	.db #0x7c	; 124
      0001FF 00                     647 	.db #0x00	; 0
      000200 30                     648 	.db #0x30	; 48	'0'
      000201 70                     649 	.db #0x70	; 112	'p'
      000202 30                     650 	.db #0x30	; 48	'0'
      000203 30                     651 	.db #0x30	; 48	'0'
      000204 30                     652 	.db #0x30	; 48	'0'
      000205 30                     653 	.db #0x30	; 48	'0'
      000206 FC                     654 	.db #0xfc	; 252
      000207 00                     655 	.db #0x00	; 0
      000208 78                     656 	.db #0x78	; 120	'x'
      000209 CC                     657 	.db #0xcc	; 204
      00020A 0C                     658 	.db #0x0c	; 12
      00020B 38                     659 	.db #0x38	; 56	'8'
      00020C 60                     660 	.db #0x60	; 96
      00020D C4                     661 	.db #0xc4	; 196
      00020E FC                     662 	.db #0xfc	; 252
      00020F 00                     663 	.db #0x00	; 0
      000210 78                     664 	.db #0x78	; 120	'x'
      000211 CC                     665 	.db #0xcc	; 204
      000212 0C                     666 	.db #0x0c	; 12
      000213 38                     667 	.db #0x38	; 56	'8'
      000214 0C                     668 	.db #0x0c	; 12
      000215 CC                     669 	.db #0xcc	; 204
      000216 78                     670 	.db #0x78	; 120	'x'
      000217 00                     671 	.db #0x00	; 0
      000218 1C                     672 	.db #0x1c	; 28
      000219 3C                     673 	.db #0x3c	; 60
      00021A 6C                     674 	.db #0x6c	; 108	'l'
      00021B CC                     675 	.db #0xcc	; 204
      00021C FE                     676 	.db #0xfe	; 254
      00021D 0C                     677 	.db #0x0c	; 12
      00021E 1E                     678 	.db #0x1e	; 30
      00021F 00                     679 	.db #0x00	; 0
      000220 FC                     680 	.db #0xfc	; 252
      000221 C0                     681 	.db #0xc0	; 192
      000222 F8                     682 	.db #0xf8	; 248
      000223 0C                     683 	.db #0x0c	; 12
      000224 0C                     684 	.db #0x0c	; 12
      000225 CC                     685 	.db #0xcc	; 204
      000226 78                     686 	.db #0x78	; 120	'x'
      000227 00                     687 	.db #0x00	; 0
      000228 38                     688 	.db #0x38	; 56	'8'
      000229 60                     689 	.db #0x60	; 96
      00022A C0                     690 	.db #0xc0	; 192
      00022B F8                     691 	.db #0xf8	; 248
      00022C CC                     692 	.db #0xcc	; 204
      00022D CC                     693 	.db #0xcc	; 204
      00022E 78                     694 	.db #0x78	; 120	'x'
      00022F 00                     695 	.db #0x00	; 0
      000230 FC                     696 	.db #0xfc	; 252
      000231 CC                     697 	.db #0xcc	; 204
      000232 0C                     698 	.db #0x0c	; 12
      000233 18                     699 	.db #0x18	; 24
      000234 30                     700 	.db #0x30	; 48	'0'
      000235 30                     701 	.db #0x30	; 48	'0'
      000236 30                     702 	.db #0x30	; 48	'0'
      000237 00                     703 	.db #0x00	; 0
      000238 78                     704 	.db #0x78	; 120	'x'
      000239 CC                     705 	.db #0xcc	; 204
      00023A CC                     706 	.db #0xcc	; 204
      00023B 78                     707 	.db #0x78	; 120	'x'
      00023C CC                     708 	.db #0xcc	; 204
      00023D CC                     709 	.db #0xcc	; 204
      00023E 78                     710 	.db #0x78	; 120	'x'
      00023F 00                     711 	.db #0x00	; 0
      000240 78                     712 	.db #0x78	; 120	'x'
      000241 CC                     713 	.db #0xcc	; 204
      000242 CC                     714 	.db #0xcc	; 204
      000243 7C                     715 	.db #0x7c	; 124
      000244 0C                     716 	.db #0x0c	; 12
      000245 18                     717 	.db #0x18	; 24
      000246 70                     718 	.db #0x70	; 112	'p'
      000247 00                     719 	.db #0x00	; 0
      000248 00                     720 	.db #0x00	; 0
      000249 30                     721 	.db #0x30	; 48	'0'
      00024A 30                     722 	.db #0x30	; 48	'0'
      00024B 00                     723 	.db #0x00	; 0
      00024C 00                     724 	.db #0x00	; 0
      00024D 30                     725 	.db #0x30	; 48	'0'
      00024E 30                     726 	.db #0x30	; 48	'0'
      00024F 00                     727 	.db #0x00	; 0
      000250 00                     728 	.db #0x00	; 0
      000251 30                     729 	.db #0x30	; 48	'0'
      000252 30                     730 	.db #0x30	; 48	'0'
      000253 00                     731 	.db #0x00	; 0
      000254 30                     732 	.db #0x30	; 48	'0'
      000255 30                     733 	.db #0x30	; 48	'0'
      000256 60                     734 	.db #0x60	; 96
      000257 00                     735 	.db #0x00	; 0
      000258 18                     736 	.db #0x18	; 24
      000259 30                     737 	.db #0x30	; 48	'0'
      00025A 60                     738 	.db #0x60	; 96
      00025B C0                     739 	.db #0xc0	; 192
      00025C 60                     740 	.db #0x60	; 96
      00025D 30                     741 	.db #0x30	; 48	'0'
      00025E 18                     742 	.db #0x18	; 24
      00025F 00                     743 	.db #0x00	; 0
      000260 00                     744 	.db #0x00	; 0
      000261 00                     745 	.db #0x00	; 0
      000262 FC                     746 	.db #0xfc	; 252
      000263 00                     747 	.db #0x00	; 0
      000264 00                     748 	.db #0x00	; 0
      000265 FC                     749 	.db #0xfc	; 252
      000266 00                     750 	.db #0x00	; 0
      000267 00                     751 	.db #0x00	; 0
      000268 60                     752 	.db #0x60	; 96
      000269 30                     753 	.db #0x30	; 48	'0'
      00026A 18                     754 	.db #0x18	; 24
      00026B 0C                     755 	.db #0x0c	; 12
      00026C 18                     756 	.db #0x18	; 24
      00026D 30                     757 	.db #0x30	; 48	'0'
      00026E 60                     758 	.db #0x60	; 96
      00026F 00                     759 	.db #0x00	; 0
      000270 78                     760 	.db #0x78	; 120	'x'
      000271 CC                     761 	.db #0xcc	; 204
      000272 0C                     762 	.db #0x0c	; 12
      000273 18                     763 	.db #0x18	; 24
      000274 30                     764 	.db #0x30	; 48	'0'
      000275 00                     765 	.db #0x00	; 0
      000276 30                     766 	.db #0x30	; 48	'0'
      000277 00                     767 	.db #0x00	; 0
      000278 7C                     768 	.db #0x7c	; 124
      000279 C6                     769 	.db #0xc6	; 198
      00027A DE                     770 	.db #0xde	; 222
      00027B DE                     771 	.db #0xde	; 222
      00027C DE                     772 	.db #0xde	; 222
      00027D C0                     773 	.db #0xc0	; 192
      00027E 78                     774 	.db #0x78	; 120	'x'
      00027F 00                     775 	.db #0x00	; 0
      000280 30                     776 	.db #0x30	; 48	'0'
      000281 78                     777 	.db #0x78	; 120	'x'
      000282 CC                     778 	.db #0xcc	; 204
      000283 CC                     779 	.db #0xcc	; 204
      000284 FC                     780 	.db #0xfc	; 252
      000285 CC                     781 	.db #0xcc	; 204
      000286 CC                     782 	.db #0xcc	; 204
      000287 00                     783 	.db #0x00	; 0
      000288 FC                     784 	.db #0xfc	; 252
      000289 66                     785 	.db #0x66	; 102	'f'
      00028A 66                     786 	.db #0x66	; 102	'f'
      00028B 7C                     787 	.db #0x7c	; 124
      00028C 66                     788 	.db #0x66	; 102	'f'
      00028D 66                     789 	.db #0x66	; 102	'f'
      00028E FC                     790 	.db #0xfc	; 252
      00028F 00                     791 	.db #0x00	; 0
      000290 3C                     792 	.db #0x3c	; 60
      000291 66                     793 	.db #0x66	; 102	'f'
      000292 C0                     794 	.db #0xc0	; 192
      000293 C0                     795 	.db #0xc0	; 192
      000294 C0                     796 	.db #0xc0	; 192
      000295 66                     797 	.db #0x66	; 102	'f'
      000296 3C                     798 	.db #0x3c	; 60
      000297 00                     799 	.db #0x00	; 0
      000298 F8                     800 	.db #0xf8	; 248
      000299 6C                     801 	.db #0x6c	; 108	'l'
      00029A 66                     802 	.db #0x66	; 102	'f'
      00029B 66                     803 	.db #0x66	; 102	'f'
      00029C 66                     804 	.db #0x66	; 102	'f'
      00029D 6C                     805 	.db #0x6c	; 108	'l'
      00029E F8                     806 	.db #0xf8	; 248
      00029F 00                     807 	.db #0x00	; 0
      0002A0 FE                     808 	.db #0xfe	; 254
      0002A1 62                     809 	.db #0x62	; 98	'b'
      0002A2 68                     810 	.db #0x68	; 104	'h'
      0002A3 78                     811 	.db #0x78	; 120	'x'
      0002A4 68                     812 	.db #0x68	; 104	'h'
      0002A5 62                     813 	.db #0x62	; 98	'b'
      0002A6 FE                     814 	.db #0xfe	; 254
      0002A7 00                     815 	.db #0x00	; 0
      0002A8 FE                     816 	.db #0xfe	; 254
      0002A9 62                     817 	.db #0x62	; 98	'b'
      0002AA 68                     818 	.db #0x68	; 104	'h'
      0002AB 78                     819 	.db #0x78	; 120	'x'
      0002AC 68                     820 	.db #0x68	; 104	'h'
      0002AD 60                     821 	.db #0x60	; 96
      0002AE F0                     822 	.db #0xf0	; 240
      0002AF 00                     823 	.db #0x00	; 0
      0002B0 3C                     824 	.db #0x3c	; 60
      0002B1 66                     825 	.db #0x66	; 102	'f'
      0002B2 C0                     826 	.db #0xc0	; 192
      0002B3 C0                     827 	.db #0xc0	; 192
      0002B4 CE                     828 	.db #0xce	; 206
      0002B5 66                     829 	.db #0x66	; 102	'f'
      0002B6 3E                     830 	.db #0x3e	; 62
      0002B7 00                     831 	.db #0x00	; 0
      0002B8 CC                     832 	.db #0xcc	; 204
      0002B9 CC                     833 	.db #0xcc	; 204
      0002BA CC                     834 	.db #0xcc	; 204
      0002BB FC                     835 	.db #0xfc	; 252
      0002BC CC                     836 	.db #0xcc	; 204
      0002BD CC                     837 	.db #0xcc	; 204
      0002BE CC                     838 	.db #0xcc	; 204
      0002BF 00                     839 	.db #0x00	; 0
      0002C0 78                     840 	.db #0x78	; 120	'x'
      0002C1 30                     841 	.db #0x30	; 48	'0'
      0002C2 30                     842 	.db #0x30	; 48	'0'
      0002C3 30                     843 	.db #0x30	; 48	'0'
      0002C4 30                     844 	.db #0x30	; 48	'0'
      0002C5 30                     845 	.db #0x30	; 48	'0'
      0002C6 78                     846 	.db #0x78	; 120	'x'
      0002C7 00                     847 	.db #0x00	; 0
      0002C8 1E                     848 	.db #0x1e	; 30
      0002C9 0C                     849 	.db #0x0c	; 12
      0002CA 0C                     850 	.db #0x0c	; 12
      0002CB 0C                     851 	.db #0x0c	; 12
      0002CC CC                     852 	.db #0xcc	; 204
      0002CD CC                     853 	.db #0xcc	; 204
      0002CE 78                     854 	.db #0x78	; 120	'x'
      0002CF 00                     855 	.db #0x00	; 0
      0002D0 E6                     856 	.db #0xe6	; 230
      0002D1 66                     857 	.db #0x66	; 102	'f'
      0002D2 6C                     858 	.db #0x6c	; 108	'l'
      0002D3 78                     859 	.db #0x78	; 120	'x'
      0002D4 6C                     860 	.db #0x6c	; 108	'l'
      0002D5 66                     861 	.db #0x66	; 102	'f'
      0002D6 E6                     862 	.db #0xe6	; 230
      0002D7 00                     863 	.db #0x00	; 0
      0002D8 F0                     864 	.db #0xf0	; 240
      0002D9 60                     865 	.db #0x60	; 96
      0002DA 60                     866 	.db #0x60	; 96
      0002DB 60                     867 	.db #0x60	; 96
      0002DC 62                     868 	.db #0x62	; 98	'b'
      0002DD 66                     869 	.db #0x66	; 102	'f'
      0002DE FE                     870 	.db #0xfe	; 254
      0002DF 00                     871 	.db #0x00	; 0
      0002E0 C6                     872 	.db #0xc6	; 198
      0002E1 EE                     873 	.db #0xee	; 238
      0002E2 FE                     874 	.db #0xfe	; 254
      0002E3 FE                     875 	.db #0xfe	; 254
      0002E4 D6                     876 	.db #0xd6	; 214
      0002E5 C6                     877 	.db #0xc6	; 198
      0002E6 C6                     878 	.db #0xc6	; 198
      0002E7 00                     879 	.db #0x00	; 0
      0002E8 C6                     880 	.db #0xc6	; 198
      0002E9 E6                     881 	.db #0xe6	; 230
      0002EA F6                     882 	.db #0xf6	; 246
      0002EB DE                     883 	.db #0xde	; 222
      0002EC CE                     884 	.db #0xce	; 206
      0002ED C6                     885 	.db #0xc6	; 198
      0002EE C6                     886 	.db #0xc6	; 198
      0002EF 00                     887 	.db #0x00	; 0
      0002F0 38                     888 	.db #0x38	; 56	'8'
      0002F1 6C                     889 	.db #0x6c	; 108	'l'
      0002F2 C6                     890 	.db #0xc6	; 198
      0002F3 C6                     891 	.db #0xc6	; 198
      0002F4 C6                     892 	.db #0xc6	; 198
      0002F5 6C                     893 	.db #0x6c	; 108	'l'
      0002F6 38                     894 	.db #0x38	; 56	'8'
      0002F7 00                     895 	.db #0x00	; 0
      0002F8 FC                     896 	.db #0xfc	; 252
      0002F9 66                     897 	.db #0x66	; 102	'f'
      0002FA 66                     898 	.db #0x66	; 102	'f'
      0002FB 7C                     899 	.db #0x7c	; 124
      0002FC 60                     900 	.db #0x60	; 96
      0002FD 60                     901 	.db #0x60	; 96
      0002FE F0                     902 	.db #0xf0	; 240
      0002FF 00                     903 	.db #0x00	; 0
      000300 78                     904 	.db #0x78	; 120	'x'
      000301 CC                     905 	.db #0xcc	; 204
      000302 CC                     906 	.db #0xcc	; 204
      000303 CC                     907 	.db #0xcc	; 204
      000304 DC                     908 	.db #0xdc	; 220
      000305 78                     909 	.db #0x78	; 120	'x'
      000306 1C                     910 	.db #0x1c	; 28
      000307 00                     911 	.db #0x00	; 0
      000308 FC                     912 	.db #0xfc	; 252
      000309 66                     913 	.db #0x66	; 102	'f'
      00030A 66                     914 	.db #0x66	; 102	'f'
      00030B 7C                     915 	.db #0x7c	; 124
      00030C 6C                     916 	.db #0x6c	; 108	'l'
      00030D 66                     917 	.db #0x66	; 102	'f'
      00030E E6                     918 	.db #0xe6	; 230
      00030F 00                     919 	.db #0x00	; 0
      000310 78                     920 	.db #0x78	; 120	'x'
      000311 CC                     921 	.db #0xcc	; 204
      000312 E0                     922 	.db #0xe0	; 224
      000313 70                     923 	.db #0x70	; 112	'p'
      000314 1C                     924 	.db #0x1c	; 28
      000315 CC                     925 	.db #0xcc	; 204
      000316 78                     926 	.db #0x78	; 120	'x'
      000317 00                     927 	.db #0x00	; 0
      000318 FC                     928 	.db #0xfc	; 252
      000319 B4                     929 	.db #0xb4	; 180
      00031A 30                     930 	.db #0x30	; 48	'0'
      00031B 30                     931 	.db #0x30	; 48	'0'
      00031C 30                     932 	.db #0x30	; 48	'0'
      00031D 30                     933 	.db #0x30	; 48	'0'
      00031E 78                     934 	.db #0x78	; 120	'x'
      00031F 00                     935 	.db #0x00	; 0
      000320 CC                     936 	.db #0xcc	; 204
      000321 CC                     937 	.db #0xcc	; 204
      000322 CC                     938 	.db #0xcc	; 204
      000323 CC                     939 	.db #0xcc	; 204
      000324 CC                     940 	.db #0xcc	; 204
      000325 CC                     941 	.db #0xcc	; 204
      000326 FC                     942 	.db #0xfc	; 252
      000327 00                     943 	.db #0x00	; 0
      000328 CC                     944 	.db #0xcc	; 204
      000329 CC                     945 	.db #0xcc	; 204
      00032A CC                     946 	.db #0xcc	; 204
      00032B CC                     947 	.db #0xcc	; 204
      00032C CC                     948 	.db #0xcc	; 204
      00032D 78                     949 	.db #0x78	; 120	'x'
      00032E 30                     950 	.db #0x30	; 48	'0'
      00032F 00                     951 	.db #0x00	; 0
      000330 C6                     952 	.db #0xc6	; 198
      000331 C6                     953 	.db #0xc6	; 198
      000332 C6                     954 	.db #0xc6	; 198
      000333 D6                     955 	.db #0xd6	; 214
      000334 FE                     956 	.db #0xfe	; 254
      000335 EE                     957 	.db #0xee	; 238
      000336 C6                     958 	.db #0xc6	; 198
      000337 00                     959 	.db #0x00	; 0
      000338 C6                     960 	.db #0xc6	; 198
      000339 C6                     961 	.db #0xc6	; 198
      00033A 6C                     962 	.db #0x6c	; 108	'l'
      00033B 38                     963 	.db #0x38	; 56	'8'
      00033C 38                     964 	.db #0x38	; 56	'8'
      00033D 6C                     965 	.db #0x6c	; 108	'l'
      00033E C6                     966 	.db #0xc6	; 198
      00033F 00                     967 	.db #0x00	; 0
      000340 CC                     968 	.db #0xcc	; 204
      000341 CC                     969 	.db #0xcc	; 204
      000342 CC                     970 	.db #0xcc	; 204
      000343 78                     971 	.db #0x78	; 120	'x'
      000344 30                     972 	.db #0x30	; 48	'0'
      000345 30                     973 	.db #0x30	; 48	'0'
      000346 78                     974 	.db #0x78	; 120	'x'
      000347 00                     975 	.db #0x00	; 0
      000348 FE                     976 	.db #0xfe	; 254
      000349 C6                     977 	.db #0xc6	; 198
      00034A 8C                     978 	.db #0x8c	; 140
      00034B 18                     979 	.db #0x18	; 24
      00034C 32                     980 	.db #0x32	; 50	'2'
      00034D 66                     981 	.db #0x66	; 102	'f'
      00034E FE                     982 	.db #0xfe	; 254
      00034F 00                     983 	.db #0x00	; 0
      000350 78                     984 	.db #0x78	; 120	'x'
      000351 60                     985 	.db #0x60	; 96
      000352 60                     986 	.db #0x60	; 96
      000353 60                     987 	.db #0x60	; 96
      000354 60                     988 	.db #0x60	; 96
      000355 60                     989 	.db #0x60	; 96
      000356 78                     990 	.db #0x78	; 120	'x'
      000357 00                     991 	.db #0x00	; 0
      000358 C0                     992 	.db #0xc0	; 192
      000359 60                     993 	.db #0x60	; 96
      00035A 30                     994 	.db #0x30	; 48	'0'
      00035B 18                     995 	.db #0x18	; 24
      00035C 0C                     996 	.db #0x0c	; 12
      00035D 06                     997 	.db #0x06	; 6
      00035E 02                     998 	.db #0x02	; 2
      00035F 00                     999 	.db #0x00	; 0
      000360 78                    1000 	.db #0x78	; 120	'x'
      000361 18                    1001 	.db #0x18	; 24
      000362 18                    1002 	.db #0x18	; 24
      000363 18                    1003 	.db #0x18	; 24
      000364 18                    1004 	.db #0x18	; 24
      000365 18                    1005 	.db #0x18	; 24
      000366 78                    1006 	.db #0x78	; 120	'x'
      000367 00                    1007 	.db #0x00	; 0
      000368 10                    1008 	.db #0x10	; 16
      000369 38                    1009 	.db #0x38	; 56	'8'
      00036A 6C                    1010 	.db #0x6c	; 108	'l'
      00036B C6                    1011 	.db #0xc6	; 198
      00036C 00                    1012 	.db #0x00	; 0
      00036D 00                    1013 	.db #0x00	; 0
      00036E 00                    1014 	.db #0x00	; 0
      00036F 00                    1015 	.db #0x00	; 0
      000370 00                    1016 	.db #0x00	; 0
      000371 00                    1017 	.db #0x00	; 0
      000372 00                    1018 	.db #0x00	; 0
      000373 00                    1019 	.db #0x00	; 0
      000374 00                    1020 	.db #0x00	; 0
      000375 00                    1021 	.db #0x00	; 0
      000376 00                    1022 	.db #0x00	; 0
      000377 FF                    1023 	.db #0xff	; 255
      000378 30                    1024 	.db #0x30	; 48	'0'
      000379 30                    1025 	.db #0x30	; 48	'0'
      00037A 18                    1026 	.db #0x18	; 24
      00037B 00                    1027 	.db #0x00	; 0
      00037C 00                    1028 	.db #0x00	; 0
      00037D 00                    1029 	.db #0x00	; 0
      00037E 00                    1030 	.db #0x00	; 0
      00037F 00                    1031 	.db #0x00	; 0
      000380 00                    1032 	.db #0x00	; 0
      000381 00                    1033 	.db #0x00	; 0
      000382 78                    1034 	.db #0x78	; 120	'x'
      000383 0C                    1035 	.db #0x0c	; 12
      000384 7C                    1036 	.db #0x7c	; 124
      000385 CC                    1037 	.db #0xcc	; 204
      000386 76                    1038 	.db #0x76	; 118	'v'
      000387 00                    1039 	.db #0x00	; 0
      000388 E0                    1040 	.db #0xe0	; 224
      000389 60                    1041 	.db #0x60	; 96
      00038A 60                    1042 	.db #0x60	; 96
      00038B 7C                    1043 	.db #0x7c	; 124
      00038C 66                    1044 	.db #0x66	; 102	'f'
      00038D 66                    1045 	.db #0x66	; 102	'f'
      00038E DC                    1046 	.db #0xdc	; 220
      00038F 00                    1047 	.db #0x00	; 0
      000390 00                    1048 	.db #0x00	; 0
      000391 00                    1049 	.db #0x00	; 0
      000392 78                    1050 	.db #0x78	; 120	'x'
      000393 CC                    1051 	.db #0xcc	; 204
      000394 C0                    1052 	.db #0xc0	; 192
      000395 CC                    1053 	.db #0xcc	; 204
      000396 78                    1054 	.db #0x78	; 120	'x'
      000397 00                    1055 	.db #0x00	; 0
      000398 1C                    1056 	.db #0x1c	; 28
      000399 0C                    1057 	.db #0x0c	; 12
      00039A 0C                    1058 	.db #0x0c	; 12
      00039B 7C                    1059 	.db #0x7c	; 124
      00039C CC                    1060 	.db #0xcc	; 204
      00039D CC                    1061 	.db #0xcc	; 204
      00039E 76                    1062 	.db #0x76	; 118	'v'
      00039F 00                    1063 	.db #0x00	; 0
      0003A0 00                    1064 	.db #0x00	; 0
      0003A1 00                    1065 	.db #0x00	; 0
      0003A2 78                    1066 	.db #0x78	; 120	'x'
      0003A3 CC                    1067 	.db #0xcc	; 204
      0003A4 FC                    1068 	.db #0xfc	; 252
      0003A5 C0                    1069 	.db #0xc0	; 192
      0003A6 78                    1070 	.db #0x78	; 120	'x'
      0003A7 00                    1071 	.db #0x00	; 0
      0003A8 38                    1072 	.db #0x38	; 56	'8'
      0003A9 6C                    1073 	.db #0x6c	; 108	'l'
      0003AA 60                    1074 	.db #0x60	; 96
      0003AB F0                    1075 	.db #0xf0	; 240
      0003AC 60                    1076 	.db #0x60	; 96
      0003AD 60                    1077 	.db #0x60	; 96
      0003AE F0                    1078 	.db #0xf0	; 240
      0003AF 00                    1079 	.db #0x00	; 0
      0003B0 00                    1080 	.db #0x00	; 0
      0003B1 00                    1081 	.db #0x00	; 0
      0003B2 76                    1082 	.db #0x76	; 118	'v'
      0003B3 CC                    1083 	.db #0xcc	; 204
      0003B4 CC                    1084 	.db #0xcc	; 204
      0003B5 7C                    1085 	.db #0x7c	; 124
      0003B6 0C                    1086 	.db #0x0c	; 12
      0003B7 F8                    1087 	.db #0xf8	; 248
      0003B8 E0                    1088 	.db #0xe0	; 224
      0003B9 60                    1089 	.db #0x60	; 96
      0003BA 6C                    1090 	.db #0x6c	; 108	'l'
      0003BB 76                    1091 	.db #0x76	; 118	'v'
      0003BC 66                    1092 	.db #0x66	; 102	'f'
      0003BD 66                    1093 	.db #0x66	; 102	'f'
      0003BE E6                    1094 	.db #0xe6	; 230
      0003BF 00                    1095 	.db #0x00	; 0
      0003C0 30                    1096 	.db #0x30	; 48	'0'
      0003C1 00                    1097 	.db #0x00	; 0
      0003C2 70                    1098 	.db #0x70	; 112	'p'
      0003C3 30                    1099 	.db #0x30	; 48	'0'
      0003C4 30                    1100 	.db #0x30	; 48	'0'
      0003C5 30                    1101 	.db #0x30	; 48	'0'
      0003C6 78                    1102 	.db #0x78	; 120	'x'
      0003C7 00                    1103 	.db #0x00	; 0
      0003C8 0C                    1104 	.db #0x0c	; 12
      0003C9 00                    1105 	.db #0x00	; 0
      0003CA 0C                    1106 	.db #0x0c	; 12
      0003CB 0C                    1107 	.db #0x0c	; 12
      0003CC 0C                    1108 	.db #0x0c	; 12
      0003CD CC                    1109 	.db #0xcc	; 204
      0003CE CC                    1110 	.db #0xcc	; 204
      0003CF 78                    1111 	.db #0x78	; 120	'x'
      0003D0 E0                    1112 	.db #0xe0	; 224
      0003D1 60                    1113 	.db #0x60	; 96
      0003D2 66                    1114 	.db #0x66	; 102	'f'
      0003D3 6C                    1115 	.db #0x6c	; 108	'l'
      0003D4 78                    1116 	.db #0x78	; 120	'x'
      0003D5 6C                    1117 	.db #0x6c	; 108	'l'
      0003D6 E6                    1118 	.db #0xe6	; 230
      0003D7 00                    1119 	.db #0x00	; 0
      0003D8 70                    1120 	.db #0x70	; 112	'p'
      0003D9 30                    1121 	.db #0x30	; 48	'0'
      0003DA 30                    1122 	.db #0x30	; 48	'0'
      0003DB 30                    1123 	.db #0x30	; 48	'0'
      0003DC 30                    1124 	.db #0x30	; 48	'0'
      0003DD 30                    1125 	.db #0x30	; 48	'0'
      0003DE 78                    1126 	.db #0x78	; 120	'x'
      0003DF 00                    1127 	.db #0x00	; 0
      0003E0 00                    1128 	.db #0x00	; 0
      0003E1 00                    1129 	.db #0x00	; 0
      0003E2 CC                    1130 	.db #0xcc	; 204
      0003E3 FE                    1131 	.db #0xfe	; 254
      0003E4 FE                    1132 	.db #0xfe	; 254
      0003E5 D6                    1133 	.db #0xd6	; 214
      0003E6 C6                    1134 	.db #0xc6	; 198
      0003E7 00                    1135 	.db #0x00	; 0
      0003E8 00                    1136 	.db #0x00	; 0
      0003E9 00                    1137 	.db #0x00	; 0
      0003EA F8                    1138 	.db #0xf8	; 248
      0003EB CC                    1139 	.db #0xcc	; 204
      0003EC CC                    1140 	.db #0xcc	; 204
      0003ED CC                    1141 	.db #0xcc	; 204
      0003EE CC                    1142 	.db #0xcc	; 204
      0003EF 00                    1143 	.db #0x00	; 0
      0003F0 00                    1144 	.db #0x00	; 0
      0003F1 00                    1145 	.db #0x00	; 0
      0003F2 78                    1146 	.db #0x78	; 120	'x'
      0003F3 CC                    1147 	.db #0xcc	; 204
      0003F4 CC                    1148 	.db #0xcc	; 204
      0003F5 CC                    1149 	.db #0xcc	; 204
      0003F6 78                    1150 	.db #0x78	; 120	'x'
      0003F7 00                    1151 	.db #0x00	; 0
      0003F8 00                    1152 	.db #0x00	; 0
      0003F9 00                    1153 	.db #0x00	; 0
      0003FA DC                    1154 	.db #0xdc	; 220
      0003FB 66                    1155 	.db #0x66	; 102	'f'
      0003FC 66                    1156 	.db #0x66	; 102	'f'
      0003FD 7C                    1157 	.db #0x7c	; 124
      0003FE 60                    1158 	.db #0x60	; 96
      0003FF F0                    1159 	.db #0xf0	; 240
      000400 00                    1160 	.db #0x00	; 0
      000401 00                    1161 	.db #0x00	; 0
      000402 76                    1162 	.db #0x76	; 118	'v'
      000403 CC                    1163 	.db #0xcc	; 204
      000404 CC                    1164 	.db #0xcc	; 204
      000405 7C                    1165 	.db #0x7c	; 124
      000406 0C                    1166 	.db #0x0c	; 12
      000407 1E                    1167 	.db #0x1e	; 30
      000408 00                    1168 	.db #0x00	; 0
      000409 00                    1169 	.db #0x00	; 0
      00040A DC                    1170 	.db #0xdc	; 220
      00040B 76                    1171 	.db #0x76	; 118	'v'
      00040C 66                    1172 	.db #0x66	; 102	'f'
      00040D 60                    1173 	.db #0x60	; 96
      00040E F0                    1174 	.db #0xf0	; 240
      00040F 00                    1175 	.db #0x00	; 0
      000410 00                    1176 	.db #0x00	; 0
      000411 00                    1177 	.db #0x00	; 0
      000412 7C                    1178 	.db #0x7c	; 124
      000413 C0                    1179 	.db #0xc0	; 192
      000414 78                    1180 	.db #0x78	; 120	'x'
      000415 0C                    1181 	.db #0x0c	; 12
      000416 F8                    1182 	.db #0xf8	; 248
      000417 00                    1183 	.db #0x00	; 0
      000418 10                    1184 	.db #0x10	; 16
      000419 30                    1185 	.db #0x30	; 48	'0'
      00041A 7C                    1186 	.db #0x7c	; 124
      00041B 30                    1187 	.db #0x30	; 48	'0'
      00041C 30                    1188 	.db #0x30	; 48	'0'
      00041D 34                    1189 	.db #0x34	; 52	'4'
      00041E 18                    1190 	.db #0x18	; 24
      00041F 00                    1191 	.db #0x00	; 0
      000420 00                    1192 	.db #0x00	; 0
      000421 00                    1193 	.db #0x00	; 0
      000422 CC                    1194 	.db #0xcc	; 204
      000423 CC                    1195 	.db #0xcc	; 204
      000424 CC                    1196 	.db #0xcc	; 204
      000425 CC                    1197 	.db #0xcc	; 204
      000426 76                    1198 	.db #0x76	; 118	'v'
      000427 00                    1199 	.db #0x00	; 0
      000428 00                    1200 	.db #0x00	; 0
      000429 00                    1201 	.db #0x00	; 0
      00042A CC                    1202 	.db #0xcc	; 204
      00042B CC                    1203 	.db #0xcc	; 204
      00042C CC                    1204 	.db #0xcc	; 204
      00042D 78                    1205 	.db #0x78	; 120	'x'
      00042E 30                    1206 	.db #0x30	; 48	'0'
      00042F 00                    1207 	.db #0x00	; 0
      000430 00                    1208 	.db #0x00	; 0
      000431 00                    1209 	.db #0x00	; 0
      000432 C6                    1210 	.db #0xc6	; 198
      000433 D6                    1211 	.db #0xd6	; 214
      000434 FE                    1212 	.db #0xfe	; 254
      000435 FE                    1213 	.db #0xfe	; 254
      000436 6C                    1214 	.db #0x6c	; 108	'l'
      000437 00                    1215 	.db #0x00	; 0
      000438 00                    1216 	.db #0x00	; 0
      000439 00                    1217 	.db #0x00	; 0
      00043A C6                    1218 	.db #0xc6	; 198
      00043B 6C                    1219 	.db #0x6c	; 108	'l'
      00043C 38                    1220 	.db #0x38	; 56	'8'
      00043D 6C                    1221 	.db #0x6c	; 108	'l'
      00043E C6                    1222 	.db #0xc6	; 198
      00043F 00                    1223 	.db #0x00	; 0
      000440 00                    1224 	.db #0x00	; 0
      000441 00                    1225 	.db #0x00	; 0
      000442 CC                    1226 	.db #0xcc	; 204
      000443 CC                    1227 	.db #0xcc	; 204
      000444 CC                    1228 	.db #0xcc	; 204
      000445 7C                    1229 	.db #0x7c	; 124
      000446 0C                    1230 	.db #0x0c	; 12
      000447 F8                    1231 	.db #0xf8	; 248
      000448 00                    1232 	.db #0x00	; 0
      000449 00                    1233 	.db #0x00	; 0
      00044A FC                    1234 	.db #0xfc	; 252
      00044B 98                    1235 	.db #0x98	; 152
      00044C 30                    1236 	.db #0x30	; 48	'0'
      00044D 64                    1237 	.db #0x64	; 100	'd'
      00044E FC                    1238 	.db #0xfc	; 252
      00044F 00                    1239 	.db #0x00	; 0
      000450 1C                    1240 	.db #0x1c	; 28
      000451 30                    1241 	.db #0x30	; 48	'0'
      000452 30                    1242 	.db #0x30	; 48	'0'
      000453 E0                    1243 	.db #0xe0	; 224
      000454 30                    1244 	.db #0x30	; 48	'0'
      000455 30                    1245 	.db #0x30	; 48	'0'
      000456 1C                    1246 	.db #0x1c	; 28
      000457 00                    1247 	.db #0x00	; 0
      000458 18                    1248 	.db #0x18	; 24
      000459 18                    1249 	.db #0x18	; 24
      00045A 18                    1250 	.db #0x18	; 24
      00045B 00                    1251 	.db #0x00	; 0
      00045C 18                    1252 	.db #0x18	; 24
      00045D 18                    1253 	.db #0x18	; 24
      00045E 18                    1254 	.db #0x18	; 24
      00045F 00                    1255 	.db #0x00	; 0
      000460 E0                    1256 	.db #0xe0	; 224
      000461 30                    1257 	.db #0x30	; 48	'0'
      000462 30                    1258 	.db #0x30	; 48	'0'
      000463 1C                    1259 	.db #0x1c	; 28
      000464 30                    1260 	.db #0x30	; 48	'0'
      000465 30                    1261 	.db #0x30	; 48	'0'
      000466 E0                    1262 	.db #0xe0	; 224
      000467 00                    1263 	.db #0x00	; 0
      000468 76                    1264 	.db #0x76	; 118	'v'
      000469 DC                    1265 	.db #0xdc	; 220
      00046A 00                    1266 	.db #0x00	; 0
      00046B 00                    1267 	.db #0x00	; 0
      00046C 00                    1268 	.db #0x00	; 0
      00046D 00                    1269 	.db #0x00	; 0
      00046E 00                    1270 	.db #0x00	; 0
      00046F 00                    1271 	.db #0x00	; 0
      000470 00                    1272 	.db #0x00	; 0
      000471 10                    1273 	.db #0x10	; 16
      000472 38                    1274 	.db #0x38	; 56	'8'
      000473 6C                    1275 	.db #0x6c	; 108	'l'
      000474 C6                    1276 	.db #0xc6	; 198
      000475 C6                    1277 	.db #0xc6	; 198
      000476 FE                    1278 	.db #0xfe	; 254
      000477 00                    1279 	.db #0x00	; 0
      000478                       1280 _pattern_black_0:
      000478 FF                    1281 	.db #0xff	; 255
      000479 FF                    1282 	.db #0xff	; 255
      00047A FF                    1283 	.db #0xff	; 255
      00047B FF                    1284 	.db #0xff	; 255
      00047C FF                    1285 	.db #0xff	; 255
      00047D FF                    1286 	.db #0xff	; 255
      00047E FF                    1287 	.db #0xff	; 255
      00047F FF                    1288 	.db #0xff	; 255
      000480                       1289 _pattern_black_1:
      000480 FE                    1290 	.db #0xfe	; 254
      000481 FF                    1291 	.db #0xff	; 255
      000482 FF                    1292 	.db #0xff	; 255
      000483 FF                    1293 	.db #0xff	; 255
      000484 FE                    1294 	.db #0xfe	; 254
      000485 FF                    1295 	.db #0xff	; 255
      000486 FF                    1296 	.db #0xff	; 255
      000487 FE                    1297 	.db #0xfe	; 254
      000488                       1298 _pattern_black_2:
      000488 FF                    1299 	.db #0xff	; 255
      000489 FF                    1300 	.db #0xff	; 255
      00048A FF                    1301 	.db #0xff	; 255
      00048B FF                    1302 	.db #0xff	; 255
      00048C FF                    1303 	.db #0xff	; 255
      00048D FB                    1304 	.db #0xfb	; 251
      00048E FF                    1305 	.db #0xff	; 255
      00048F BB                    1306 	.db #0xbb	; 187
      000490                       1307 _pattern_black_3:
      000490 FB                    1308 	.db #0xfb	; 251
      000491 FE                    1309 	.db #0xfe	; 254
      000492 FD                    1310 	.db #0xfd	; 253
      000493 FE                    1311 	.db #0xfe	; 254
      000494 F7                    1312 	.db #0xf7	; 247
      000495 FA                    1313 	.db #0xfa	; 250
      000496 AF                    1314 	.db #0xaf	; 175
      000497 55                    1315 	.db #0x55	; 85	'U'
      000498                       1316 _pattern_0:
      000498 9F                    1317 	.db #0x9f	; 159
      000499 90                    1318 	.db #0x90	; 144
      00049A 90                    1319 	.db #0x90	; 144
      00049B 93                    1320 	.db #0x93	; 147
      00049C 92                    1321 	.db #0x92	; 146
      00049D 92                    1322 	.db #0x92	; 146
      00049E 92                    1323 	.db #0x92	; 146
      00049F 92                    1324 	.db #0x92	; 146
      0004A0                       1325 _pattern_1:
      0004A0 FF                    1326 	.db #0xff	; 255
      0004A1 01                    1327 	.db #0x01	; 1
      0004A2 01                    1328 	.db #0x01	; 1
      0004A3 F9                    1329 	.db #0xf9	; 249
      0004A4 09                    1330 	.db #0x09	; 9
      0004A5 09                    1331 	.db #0x09	; 9
      0004A6 49                    1332 	.db #0x49	; 73	'I'
      0004A7 49                    1333 	.db #0x49	; 73	'I'
      0004A8                       1334 _pattern_2:
      0004A8 92                    1335 	.db #0x92	; 146
      0004A9 93                    1336 	.db #0x93	; 147
      0004AA 90                    1337 	.db #0x90	; 144
      0004AB 90                    1338 	.db #0x90	; 144
      0004AC 9F                    1339 	.db #0x9f	; 159
      0004AD 80                    1340 	.db #0x80	; 128
      0004AE 80                    1341 	.db #0x80	; 128
      0004AF FF                    1342 	.db #0xff	; 255
      0004B0                       1343 _pattern_3:
      0004B0 49                    1344 	.db #0x49	; 73	'I'
      0004B1 C9                    1345 	.db #0xc9	; 201
      0004B2 09                    1346 	.db #0x09	; 9
      0004B3 09                    1347 	.db #0x09	; 9
      0004B4 F9                    1348 	.db #0xf9	; 249
      0004B5 01                    1349 	.db #0x01	; 1
      0004B6 01                    1350 	.db #0x01	; 1
      0004B7 FF                    1351 	.db #0xff	; 255
      0004B8                       1352 _pattern_4:
      0004B8 7F                    1353 	.db #0x7f	; 127
      0004B9 81                    1354 	.db #0x81	; 129
      0004BA 83                    1355 	.db #0x83	; 131
      0004BB 87                    1356 	.db #0x87	; 135
      0004BC 8F                    1357 	.db #0x8f	; 143
      0004BD 9F                    1358 	.db #0x9f	; 159
      0004BE BF                    1359 	.db #0xbf	; 191
      0004BF FF                    1360 	.db #0xff	; 255
      0004C0                       1361 _pattern_5:
      0004C0 FE                    1362 	.db #0xfe	; 254
      0004C1 81                    1363 	.db #0x81	; 129
      0004C2 C1                    1364 	.db #0xc1	; 193
      0004C3 E1                    1365 	.db #0xe1	; 225
      0004C4 F1                    1366 	.db #0xf1	; 241
      0004C5 F9                    1367 	.db #0xf9	; 249
      0004C6 FD                    1368 	.db #0xfd	; 253
      0004C7 FF                    1369 	.db #0xff	; 255
      0004C8                       1370 _pattern_6:
      0004C8 FF                    1371 	.db #0xff	; 255
      0004C9 BF                    1372 	.db #0xbf	; 191
      0004CA 9F                    1373 	.db #0x9f	; 159
      0004CB 8F                    1374 	.db #0x8f	; 143
      0004CC 87                    1375 	.db #0x87	; 135
      0004CD 83                    1376 	.db #0x83	; 131
      0004CE 81                    1377 	.db #0x81	; 129
      0004CF 7F                    1378 	.db #0x7f	; 127
      0004D0                       1379 _pattern_7:
      0004D0 FF                    1380 	.db #0xff	; 255
      0004D1 FD                    1381 	.db #0xfd	; 253
      0004D2 F9                    1382 	.db #0xf9	; 249
      0004D3 F1                    1383 	.db #0xf1	; 241
      0004D4 E1                    1384 	.db #0xe1	; 225
      0004D5 C1                    1385 	.db #0xc1	; 193
      0004D6 81                    1386 	.db #0x81	; 129
      0004D7 FE                    1387 	.db #0xfe	; 254
      0004D8                       1388 _pattern_8:
      0004D8 7F                    1389 	.db #0x7f	; 127
      0004D9 AE                    1390 	.db #0xae	; 174
      0004DA FF                    1391 	.db #0xff	; 255
      0004DB 5B                    1392 	.db #0x5b	; 91
      0004DC FF                    1393 	.db #0xff	; 255
      0004DD AE                    1394 	.db #0xae	; 174
      0004DE FF                    1395 	.db #0xff	; 255
      0004DF DF                    1396 	.db #0xdf	; 223
      0004E0                       1397 _pattern_9:
      0004E0 FE                    1398 	.db #0xfe	; 254
      0004E1 BD                    1399 	.db #0xbd	; 189
      0004E2 DF                    1400 	.db #0xdf	; 223
      0004E3 7F                    1401 	.db #0x7f	; 127
      0004E4 FB                    1402 	.db #0xfb	; 251
      0004E5 DF                    1403 	.db #0xdf	; 223
      0004E6 FE                    1404 	.db #0xfe	; 254
      0004E7 EF                    1405 	.db #0xef	; 239
      0004E8                       1406 _pattern_10:
      0004E8 7F                    1407 	.db #0x7f	; 127
      0004E9 FF                    1408 	.db #0xff	; 255
      0004EA ED                    1409 	.db #0xed	; 237
      0004EB FF                    1410 	.db #0xff	; 255
      0004EC B6                    1411 	.db #0xb6	; 182
      0004ED FE                    1412 	.db #0xfe	; 254
      0004EE DB                    1413 	.db #0xdb	; 219
      0004EF 7D                    1414 	.db #0x7d	; 125
      0004F0                       1415 _pattern_11:
      0004F0 FE                    1416 	.db #0xfe	; 254
      0004F1 FF                    1417 	.db #0xff	; 255
      0004F2 FE                    1418 	.db #0xfe	; 254
      0004F3 77                    1419 	.db #0x77	; 119	'w'
      0004F4 FE                    1420 	.db #0xfe	; 254
      0004F5 DD                    1421 	.db #0xdd	; 221
      0004F6 EF                    1422 	.db #0xef	; 239
      0004F7 5A                    1423 	.db #0x5a	; 90	'Z'
      0004F8                       1424 _pattern_12:
      0004F8 7F                    1425 	.db #0x7f	; 127
      0004F9 D5                    1426 	.db #0xd5	; 213
      0004FA BF                    1427 	.db #0xbf	; 191
      0004FB ED                    1428 	.db #0xed	; 237
      0004FC BF                    1429 	.db #0xbf	; 191
      0004FD F5                    1430 	.db #0xf5	; 245
      0004FE BF                    1431 	.db #0xbf	; 191
      0004FF FF                    1432 	.db #0xff	; 255
      000500                       1433 _pattern_13:
      000500 FE                    1434 	.db #0xfe	; 254
      000501 5F                    1435 	.db #0x5f	; 95
      000502 F5                    1436 	.db #0xf5	; 245
      000503 DF                    1437 	.db #0xdf	; 223
      000504 FF                    1438 	.db #0xff	; 255
      000505 FF                    1439 	.db #0xff	; 255
      000506 FF                    1440 	.db #0xff	; 255
      000507 FF                    1441 	.db #0xff	; 255
      000508                       1442 _pattern_14:
      000508 EF                    1443 	.db #0xef	; 239
      000509 BF                    1444 	.db #0xbf	; 191
      00050A 7F                    1445 	.db #0x7f	; 127
      00050B FF                    1446 	.db #0xff	; 255
      00050C FF                    1447 	.db #0xff	; 255
      00050D FF                    1448 	.db #0xff	; 255
      00050E DB                    1449 	.db #0xdb	; 219
      00050F 7F                    1450 	.db #0x7f	; 127
      000510                       1451 _pattern_15:
      000510 FF                    1452 	.db #0xff	; 255
      000511 FD                    1453 	.db #0xfd	; 253
      000512 FF                    1454 	.db #0xff	; 255
      000513 DB                    1455 	.db #0xdb	; 219
      000514 FD                    1456 	.db #0xfd	; 253
      000515 7B                    1457 	.db #0x7b	; 123
      000516 D7                    1458 	.db #0xd7	; 215
      000517 FE                    1459 	.db #0xfe	; 254
      000518                       1460 _pattern_16:
      000518 7F                    1461 	.db #0x7f	; 127
      000519 FF                    1462 	.db #0xff	; 255
      00051A EA                    1463 	.db #0xea	; 234
      00051B DF                    1464 	.db #0xdf	; 223
      00051C FF                    1465 	.db #0xff	; 255
      00051D DF                    1466 	.db #0xdf	; 223
      00051E FF                    1467 	.db #0xff	; 255
      00051F DF                    1468 	.db #0xdf	; 223
      000520                       1469 _pattern_17:
      000520 FE                    1470 	.db #0xfe	; 254
      000521 FF                    1471 	.db #0xff	; 255
      000522 AF                    1472 	.db #0xaf	; 175
      000523 FA                    1473 	.db #0xfa	; 250
      000524 FF                    1474 	.db #0xff	; 255
      000525 FA                    1475 	.db #0xfa	; 250
      000526 FF                    1476 	.db #0xff	; 255
      000527 FA                    1477 	.db #0xfa	; 250
      000528                       1478 _pattern_18:
      000528 FF                    1479 	.db #0xff	; 255
      000529 DF                    1480 	.db #0xdf	; 223
      00052A FF                    1481 	.db #0xff	; 255
      00052B DF                    1482 	.db #0xdf	; 223
      00052C FF                    1483 	.db #0xff	; 255
      00052D EA                    1484 	.db #0xea	; 234
      00052E FF                    1485 	.db #0xff	; 255
      00052F 55                    1486 	.db #0x55	; 85	'U'
      000530                       1487 _pattern_19:
      000530 FF                    1488 	.db #0xff	; 255
      000531 FA                    1489 	.db #0xfa	; 250
      000532 FF                    1490 	.db #0xff	; 255
      000533 FA                    1491 	.db #0xfa	; 250
      000534 F7                    1492 	.db #0xf7	; 247
      000535 AA                    1493 	.db #0xaa	; 170
      000536 FF                    1494 	.db #0xff	; 255
      000537 56                    1495 	.db #0x56	; 86	'V'
      000538                       1496 _pattern_20:
      000538 3F                    1497 	.db #0x3f	; 63
      000539 7F                    1498 	.db #0x7f	; 127
      00053A E0                    1499 	.db #0xe0	; 224
      00053B CE                    1500 	.db #0xce	; 206
      00053C E6                    1501 	.db #0xe6	; 230
      00053D 7C                    1502 	.db #0x7c	; 124
      00053E 39                    1503 	.db #0x39	; 57	'9'
      00053F 03                    1504 	.db #0x03	; 3
      000540                       1505 _pattern_21:
      000540 FF                    1506 	.db #0xff	; 255
      000541 FF                    1507 	.db #0xff	; 255
      000542 00                    1508 	.db #0x00	; 0
      000543 DB                    1509 	.db #0xdb	; 219
      000544 DB                    1510 	.db #0xdb	; 219
      000545 00                    1511 	.db #0x00	; 0
      000546 FF                    1512 	.db #0xff	; 255
      000547 FF                    1513 	.db #0xff	; 255
      000548                       1514 _pattern_22:
      000548 FC                    1515 	.db #0xfc	; 252
      000549 FE                    1516 	.db #0xfe	; 254
      00054A 07                    1517 	.db #0x07	; 7
      00054B 73                    1518 	.db #0x73	; 115	's'
      00054C 67                    1519 	.db #0x67	; 103	'g'
      00054D 3E                    1520 	.db #0x3e	; 62
      00054E 9C                    1521 	.db #0x9c	; 156
      00054F C0                    1522 	.db #0xc0	; 192
      000550                       1523 _pattern_23:
      000550 06                    1524 	.db #0x06	; 6
      000551 00                    1525 	.db #0x00	; 0
      000552 03                    1526 	.db #0x03	; 3
      000553 04                    1527 	.db #0x04	; 4
      000554 05                    1528 	.db #0x05	; 5
      000555 05                    1529 	.db #0x05	; 5
      000556 05                    1530 	.db #0x05	; 5
      000557 05                    1531 	.db #0x05	; 5
      000558                       1532 _pattern_24:
      000558 00                    1533 	.db #0x00	; 0
      000559 00                    1534 	.db #0x00	; 0
      00055A 33                    1535 	.db #0x33	; 51	'3'
      00055B 44                    1536 	.db #0x44	; 68	'D'
      00055C 55                    1537 	.db #0x55	; 85	'U'
      00055D 55                    1538 	.db #0x55	; 85	'U'
      00055E 55                    1539 	.db #0x55	; 85	'U'
      00055F 55                    1540 	.db #0x55	; 85	'U'
      000560                       1541 _pattern_25:
      000560 60                    1542 	.db #0x60	; 96
      000561 00                    1543 	.db #0x00	; 0
      000562 40                    1544 	.db #0x40	; 64
      000563 20                    1545 	.db #0x20	; 32
      000564 20                    1546 	.db #0x20	; 32
      000565 20                    1547 	.db #0x20	; 32
      000566 20                    1548 	.db #0x20	; 32
      000567 20                    1549 	.db #0x20	; 32
      000568                       1550 _pattern_26:
      000568 05                    1551 	.db #0x05	; 5
      000569 05                    1552 	.db #0x05	; 5
      00056A 05                    1553 	.db #0x05	; 5
      00056B 05                    1554 	.db #0x05	; 5
      00056C 05                    1555 	.db #0x05	; 5
      00056D 05                    1556 	.db #0x05	; 5
      00056E 05                    1557 	.db #0x05	; 5
      00056F 05                    1558 	.db #0x05	; 5
      000570                       1559 _pattern_27:
      000570 55                    1560 	.db #0x55	; 85	'U'
      000571 55                    1561 	.db #0x55	; 85	'U'
      000572 55                    1562 	.db #0x55	; 85	'U'
      000573 55                    1563 	.db #0x55	; 85	'U'
      000574 55                    1564 	.db #0x55	; 85	'U'
      000575 55                    1565 	.db #0x55	; 85	'U'
      000576 55                    1566 	.db #0x55	; 85	'U'
      000577 55                    1567 	.db #0x55	; 85	'U'
      000578                       1568 _pattern_28:
      000578 20                    1569 	.db #0x20	; 32
      000579 20                    1570 	.db #0x20	; 32
      00057A 20                    1571 	.db #0x20	; 32
      00057B 20                    1572 	.db #0x20	; 32
      00057C 20                    1573 	.db #0x20	; 32
      00057D 20                    1574 	.db #0x20	; 32
      00057E 20                    1575 	.db #0x20	; 32
      00057F 20                    1576 	.db #0x20	; 32
      000580                       1577 _pattern_29:
      000580 05                    1578 	.db #0x05	; 5
      000581 05                    1579 	.db #0x05	; 5
      000582 07                    1580 	.db #0x07	; 7
      000583 07                    1581 	.db #0x07	; 7
      000584 07                    1582 	.db #0x07	; 7
      000585 05                    1583 	.db #0x05	; 5
      000586 05                    1584 	.db #0x05	; 5
      000587 05                    1585 	.db #0x05	; 5
      000588                       1586 _pattern_30:
      000588 55                    1587 	.db #0x55	; 85	'U'
      000589 55                    1588 	.db #0x55	; 85	'U'
      00058A FF                    1589 	.db #0xff	; 255
      00058B FF                    1590 	.db #0xff	; 255
      00058C FF                    1591 	.db #0xff	; 255
      00058D 55                    1592 	.db #0x55	; 85	'U'
      00058E 55                    1593 	.db #0x55	; 85	'U'
      00058F 55                    1594 	.db #0x55	; 85	'U'
      000590                       1595 _pattern_31:
      000590 20                    1596 	.db #0x20	; 32
      000591 20                    1597 	.db #0x20	; 32
      000592 E0                    1598 	.db #0xe0	; 224
      000593 E0                    1599 	.db #0xe0	; 224
      000594 E0                    1600 	.db #0xe0	; 224
      000595 20                    1601 	.db #0x20	; 32
      000596 20                    1602 	.db #0x20	; 32
      000597 20                    1603 	.db #0x20	; 32
      000598                       1604 _pattern_37:
      000598 05                    1605 	.db #0x05	; 5
      000599 05                    1606 	.db #0x05	; 5
      00059A 05                    1607 	.db #0x05	; 5
      00059B 05                    1608 	.db #0x05	; 5
      00059C 04                    1609 	.db #0x04	; 4
      00059D 03                    1610 	.db #0x03	; 3
      00059E 00                    1611 	.db #0x00	; 0
      00059F 06                    1612 	.db #0x06	; 6
      0005A0                       1613 _pattern_38:
      0005A0 55                    1614 	.db #0x55	; 85	'U'
      0005A1 55                    1615 	.db #0x55	; 85	'U'
      0005A2 55                    1616 	.db #0x55	; 85	'U'
      0005A3 55                    1617 	.db #0x55	; 85	'U'
      0005A4 44                    1618 	.db #0x44	; 68	'D'
      0005A5 33                    1619 	.db #0x33	; 51	'3'
      0005A6 00                    1620 	.db #0x00	; 0
      0005A7 00                    1621 	.db #0x00	; 0
      0005A8                       1622 _pattern_39:
      0005A8 20                    1623 	.db #0x20	; 32
      0005A9 20                    1624 	.db #0x20	; 32
      0005AA 20                    1625 	.db #0x20	; 32
      0005AB 20                    1626 	.db #0x20	; 32
      0005AC 20                    1627 	.db #0x20	; 32
      0005AD 40                    1628 	.db #0x40	; 64
      0005AE 00                    1629 	.db #0x00	; 0
      0005AF 60                    1630 	.db #0x60	; 96
      0005B0                       1631 _pattern_32:
      0005B0 03                    1632 	.db #0x03	; 3
      0005B1 39                    1633 	.db #0x39	; 57	'9'
      0005B2 7C                    1634 	.db #0x7c	; 124
      0005B3 E6                    1635 	.db #0xe6	; 230
      0005B4 CE                    1636 	.db #0xce	; 206
      0005B5 E0                    1637 	.db #0xe0	; 224
      0005B6 7F                    1638 	.db #0x7f	; 127
      0005B7 3F                    1639 	.db #0x3f	; 63
      0005B8                       1640 _pattern_33:
      0005B8 FF                    1641 	.db #0xff	; 255
      0005B9 FF                    1642 	.db #0xff	; 255
      0005BA 00                    1643 	.db #0x00	; 0
      0005BB DB                    1644 	.db #0xdb	; 219
      0005BC DB                    1645 	.db #0xdb	; 219
      0005BD 00                    1646 	.db #0x00	; 0
      0005BE FF                    1647 	.db #0xff	; 255
      0005BF FF                    1648 	.db #0xff	; 255
      0005C0                       1649 _pattern_34:
      0005C0 C0                    1650 	.db #0xc0	; 192
      0005C1 9C                    1651 	.db #0x9c	; 156
      0005C2 3E                    1652 	.db #0x3e	; 62
      0005C3 67                    1653 	.db #0x67	; 103	'g'
      0005C4 73                    1654 	.db #0x73	; 115	's'
      0005C5 07                    1655 	.db #0x07	; 7
      0005C6 FE                    1656 	.db #0xfe	; 254
      0005C7 FC                    1657 	.db #0xfc	; 252
      0005C8                       1658 _sprite_dust_0:
      0005C8 10                    1659 	.db #0x10	; 16
      0005C9 42                    1660 	.db #0x42	; 66	'B'
      0005CA 10                    1661 	.db #0x10	; 16
      0005CB 45                    1662 	.db #0x45	; 69	'E'
      0005CC 20                    1663 	.db #0x20	; 32
      0005CD 89                    1664 	.db #0x89	; 137
      0005CE 20                    1665 	.db #0x20	; 32
      0005CF 88                    1666 	.db #0x88	; 136
      0005D0                       1667 _sprite_dust_1:
      0005D0 10                    1668 	.db #0x10	; 16
      0005D1 42                    1669 	.db #0x42	; 66	'B'
      0005D2 00                    1670 	.db #0x00	; 0
      0005D3 04                    1671 	.db #0x04	; 4
      0005D4 20                    1672 	.db #0x20	; 32
      0005D5 81                    1673 	.db #0x81	; 129
      0005D6 20                    1674 	.db #0x20	; 32
      0005D7 08                    1675 	.db #0x08	; 8
      0005D8                       1676 _sprite_dust_2:
      0005D8 10                    1677 	.db #0x10	; 16
      0005D9 00                    1678 	.db #0x00	; 0
      0005DA 00                    1679 	.db #0x00	; 0
      0005DB 04                    1680 	.db #0x04	; 4
      0005DC 20                    1681 	.db #0x20	; 32
      0005DD 80                    1682 	.db #0x80	; 128
      0005DE 20                    1683 	.db #0x20	; 32
      0005DF 00                    1684 	.db #0x00	; 0
      0005E0                       1685 _sprite_dust_3:
      0005E0 10                    1686 	.db #0x10	; 16
      0005E1 00                    1687 	.db #0x00	; 0
      0005E2 00                    1688 	.db #0x00	; 0
      0005E3 04                    1689 	.db #0x04	; 4
      0005E4 00                    1690 	.db #0x00	; 0
      0005E5 00                    1691 	.db #0x00	; 0
      0005E6 20                    1692 	.db #0x20	; 32
      0005E7 00                    1693 	.db #0x00	; 0
      0005E8                       1694 _pattern_title:
      0005E8 FE                    1695 	.db #0xfe	; 254
      0005E9 FE                    1696 	.db #0xfe	; 254
      0005EA FE                    1697 	.db #0xfe	; 254
      0005EB FE                    1698 	.db #0xfe	; 254
      0005EC FE                    1699 	.db #0xfe	; 254
      0005ED FE                    1700 	.db #0xfe	; 254
      0005EE FE                    1701 	.db #0xfe	; 254
      0005EF 00                    1702 	.db #0x00	; 0
      0005F0                       1703 _color_black_0:
      0005F0 14                    1704 	.db #0x14	; 20
      0005F1 14                    1705 	.db #0x14	; 20
      0005F2 14                    1706 	.db #0x14	; 20
      0005F3 14                    1707 	.db #0x14	; 20
      0005F4 14                    1708 	.db #0x14	; 20
      0005F5 14                    1709 	.db #0x14	; 20
      0005F6 14                    1710 	.db #0x14	; 20
      0005F7 14                    1711 	.db #0x14	; 20
      0005F8                       1712 _color_black_1:
      0005F8 14                    1713 	.db #0x14	; 20
      0005F9 14                    1714 	.db #0x14	; 20
      0005FA 14                    1715 	.db #0x14	; 20
      0005FB 14                    1716 	.db #0x14	; 20
      0005FC 14                    1717 	.db #0x14	; 20
      0005FD 14                    1718 	.db #0x14	; 20
      0005FE 14                    1719 	.db #0x14	; 20
      0005FF 14                    1720 	.db #0x14	; 20
      000600                       1721 _color_black_2:
      000600 14                    1722 	.db #0x14	; 20
      000601 14                    1723 	.db #0x14	; 20
      000602 14                    1724 	.db #0x14	; 20
      000603 14                    1725 	.db #0x14	; 20
      000604 14                    1726 	.db #0x14	; 20
      000605 14                    1727 	.db #0x14	; 20
      000606 14                    1728 	.db #0x14	; 20
      000607 14                    1729 	.db #0x14	; 20
      000608                       1730 _color_black_3:
      000608 14                    1731 	.db #0x14	; 20
      000609 14                    1732 	.db #0x14	; 20
      00060A 14                    1733 	.db #0x14	; 20
      00060B 14                    1734 	.db #0x14	; 20
      00060C 14                    1735 	.db #0x14	; 20
      00060D 14                    1736 	.db #0x14	; 20
      00060E 14                    1737 	.db #0x14	; 20
      00060F 14                    1738 	.db #0x14	; 20
      000610                       1739 _color_0:
      000610 13                    1740 	.db #0x13	; 19
      000611 13                    1741 	.db #0x13	; 19
      000612 13                    1742 	.db #0x13	; 19
      000613 13                    1743 	.db #0x13	; 19
      000614 13                    1744 	.db #0x13	; 19
      000615 13                    1745 	.db #0x13	; 19
      000616 13                    1746 	.db #0x13	; 19
      000617 13                    1747 	.db #0x13	; 19
      000618                       1748 _color_1:
      000618 12                    1749 	.db #0x12	; 18
      000619 12                    1750 	.db #0x12	; 18
      00061A 12                    1751 	.db #0x12	; 18
      00061B 12                    1752 	.db #0x12	; 18
      00061C 12                    1753 	.db #0x12	; 18
      00061D 12                    1754 	.db #0x12	; 18
      00061E 12                    1755 	.db #0x12	; 18
      00061F 12                    1756 	.db #0x12	; 18
      000620                       1757 _color_2:
      000620 12                    1758 	.db #0x12	; 18
      000621 12                    1759 	.db #0x12	; 18
      000622 12                    1760 	.db #0x12	; 18
      000623 12                    1761 	.db #0x12	; 18
      000624 12                    1762 	.db #0x12	; 18
      000625 12                    1763 	.db #0x12	; 18
      000626 12                    1764 	.db #0x12	; 18
      000627 12                    1765 	.db #0x12	; 18
      000628                       1766 _color_3:
      000628 1C                    1767 	.db #0x1c	; 28
      000629 1C                    1768 	.db #0x1c	; 28
      00062A 1C                    1769 	.db #0x1c	; 28
      00062B 1C                    1770 	.db #0x1c	; 28
      00062C 1C                    1771 	.db #0x1c	; 28
      00062D 1C                    1772 	.db #0x1c	; 28
      00062E 1C                    1773 	.db #0x1c	; 28
      00062F 1C                    1774 	.db #0x1c	; 28
      000630                       1775 _color_4:
      000630 96                    1776 	.db #0x96	; 150
      000631 96                    1777 	.db #0x96	; 150
      000632 96                    1778 	.db #0x96	; 150
      000633 96                    1779 	.db #0x96	; 150
      000634 96                    1780 	.db #0x96	; 150
      000635 96                    1781 	.db #0x96	; 150
      000636 96                    1782 	.db #0x96	; 150
      000637 96                    1783 	.db #0x96	; 150
      000638                       1784 _color_5:
      000638 98                    1785 	.db #0x98	; 152
      000639 68                    1786 	.db #0x68	; 104	'h'
      00063A 68                    1787 	.db #0x68	; 104	'h'
      00063B 68                    1788 	.db #0x68	; 104	'h'
      00063C 68                    1789 	.db #0x68	; 104	'h'
      00063D 68                    1790 	.db #0x68	; 104	'h'
      00063E 68                    1791 	.db #0x68	; 104	'h'
      00063F 68                    1792 	.db #0x68	; 104	'h'
      000640                       1793 _color_6:
      000640 68                    1794 	.db #0x68	; 104	'h'
      000641 68                    1795 	.db #0x68	; 104	'h'
      000642 68                    1796 	.db #0x68	; 104	'h'
      000643 68                    1797 	.db #0x68	; 104	'h'
      000644 68                    1798 	.db #0x68	; 104	'h'
      000645 68                    1799 	.db #0x68	; 104	'h'
      000646 68                    1800 	.db #0x68	; 104	'h'
      000647 68                    1801 	.db #0x68	; 104	'h'
      000648                       1802 _color_7:
      000648 89                    1803 	.db #0x89	; 137
      000649 89                    1804 	.db #0x89	; 137
      00064A 89                    1805 	.db #0x89	; 137
      00064B 89                    1806 	.db #0x89	; 137
      00064C 89                    1807 	.db #0x89	; 137
      00064D 89                    1808 	.db #0x89	; 137
      00064E 89                    1809 	.db #0x89	; 137
      00064F 86                    1810 	.db #0x86	; 134
      000650                       1811 _color_8:
      000650 41                    1812 	.db #0x41	; 65	'A'
      000651 47                    1813 	.db #0x47	; 71	'G'
      000652 47                    1814 	.db #0x47	; 71	'G'
      000653 47                    1815 	.db #0x47	; 71	'G'
      000654 47                    1816 	.db #0x47	; 71	'G'
      000655 47                    1817 	.db #0x47	; 71	'G'
      000656 47                    1818 	.db #0x47	; 71	'G'
      000657 47                    1819 	.db #0x47	; 71	'G'
      000658                       1820 _color_9:
      000658 41                    1821 	.db #0x41	; 65	'A'
      000659 45                    1822 	.db #0x45	; 69	'E'
      00065A 47                    1823 	.db #0x47	; 71	'G'
      00065B 47                    1824 	.db #0x47	; 71	'G'
      00065C 45                    1825 	.db #0x45	; 69	'E'
      00065D 45                    1826 	.db #0x45	; 69	'E'
      00065E 41                    1827 	.db #0x41	; 65	'A'
      00065F 45                    1828 	.db #0x45	; 69	'E'
      000660                       1829 _color_10:
      000660 47                    1830 	.db #0x47	; 71	'G'
      000661 45                    1831 	.db #0x45	; 69	'E'
      000662 45                    1832 	.db #0x45	; 69	'E'
      000663 45                    1833 	.db #0x45	; 69	'E'
      000664 45                    1834 	.db #0x45	; 69	'E'
      000665 41                    1835 	.db #0x41	; 65	'A'
      000666 45                    1836 	.db #0x45	; 69	'E'
      000667 41                    1837 	.db #0x41	; 65	'A'
      000668                       1838 _color_11:
      000668 41                    1839 	.db #0x41	; 65	'A'
      000669 41                    1840 	.db #0x41	; 65	'A'
      00066A 41                    1841 	.db #0x41	; 65	'A'
      00066B 41                    1842 	.db #0x41	; 65	'A'
      00066C 41                    1843 	.db #0x41	; 65	'A'
      00066D 41                    1844 	.db #0x41	; 65	'A'
      00066E 41                    1845 	.db #0x41	; 65	'A'
      00066F 41                    1846 	.db #0x41	; 65	'A'
      000670                       1847 _color_12:
      000670 D1                    1848 	.db #0xd1	; 209
      000671 DF                    1849 	.db #0xdf	; 223
      000672 DF                    1850 	.db #0xdf	; 223
      000673 DF                    1851 	.db #0xdf	; 223
      000674 DF                    1852 	.db #0xdf	; 223
      000675 DF                    1853 	.db #0xdf	; 223
      000676 DF                    1854 	.db #0xdf	; 223
      000677 DF                    1855 	.db #0xdf	; 223
      000678                       1856 _color_13:
      000678 D1                    1857 	.db #0xd1	; 209
      000679 DF                    1858 	.db #0xdf	; 223
      00067A DF                    1859 	.db #0xdf	; 223
      00067B DF                    1860 	.db #0xdf	; 223
      00067C DF                    1861 	.db #0xdf	; 223
      00067D DF                    1862 	.db #0xdf	; 223
      00067E DF                    1863 	.db #0xdf	; 223
      00067F DF                    1864 	.db #0xdf	; 223
      000680                       1865 _color_14:
      000680 DF                    1866 	.db #0xdf	; 223
      000681 DF                    1867 	.db #0xdf	; 223
      000682 DF                    1868 	.db #0xdf	; 223
      000683 D1                    1869 	.db #0xd1	; 209
      000684 D1                    1870 	.db #0xd1	; 209
      000685 D1                    1871 	.db #0xd1	; 209
      000686 D1                    1872 	.db #0xd1	; 209
      000687 D1                    1873 	.db #0xd1	; 209
      000688                       1874 _color_15:
      000688 D1                    1875 	.db #0xd1	; 209
      000689 D1                    1876 	.db #0xd1	; 209
      00068A D1                    1877 	.db #0xd1	; 209
      00068B D1                    1878 	.db #0xd1	; 209
      00068C D1                    1879 	.db #0xd1	; 209
      00068D D1                    1880 	.db #0xd1	; 209
      00068E D1                    1881 	.db #0xd1	; 209
      00068F D1                    1882 	.db #0xd1	; 209
      000690                       1883 _color_16:
      000690 A1                    1884 	.db #0xa1	; 161
      000691 BF                    1885 	.db #0xbf	; 191
      000692 BF                    1886 	.db #0xbf	; 191
      000693 BF                    1887 	.db #0xbf	; 191
      000694 BF                    1888 	.db #0xbf	; 191
      000695 BF                    1889 	.db #0xbf	; 191
      000696 BF                    1890 	.db #0xbf	; 191
      000697 BF                    1891 	.db #0xbf	; 191
      000698                       1892 _color_17:
      000698 A1                    1893 	.db #0xa1	; 161
      000699 AF                    1894 	.db #0xaf	; 175
      00069A AF                    1895 	.db #0xaf	; 175
      00069B A1                    1896 	.db #0xa1	; 161
      00069C A1                    1897 	.db #0xa1	; 161
      00069D A1                    1898 	.db #0xa1	; 161
      00069E A1                    1899 	.db #0xa1	; 161
      00069F A1                    1900 	.db #0xa1	; 161
      0006A0                       1901 _color_18:
      0006A0 AF                    1902 	.db #0xaf	; 175
      0006A1 AF                    1903 	.db #0xaf	; 175
      0006A2 AF                    1904 	.db #0xaf	; 175
      0006A3 AF                    1905 	.db #0xaf	; 175
      0006A4 A1                    1906 	.db #0xa1	; 161
      0006A5 A1                    1907 	.db #0xa1	; 161
      0006A6 A1                    1908 	.db #0xa1	; 161
      0006A7 A1                    1909 	.db #0xa1	; 161
      0006A8                       1910 _color_19:
      0006A8 B1                    1911 	.db #0xb1	; 177
      0006A9 B1                    1912 	.db #0xb1	; 177
      0006AA B1                    1913 	.db #0xb1	; 177
      0006AB B1                    1914 	.db #0xb1	; 177
      0006AC B1                    1915 	.db #0xb1	; 177
      0006AD B1                    1916 	.db #0xb1	; 177
      0006AE B1                    1917 	.db #0xb1	; 177
      0006AF B1                    1918 	.db #0xb1	; 177
      0006B0                       1919 _color_column_1:
      0006B0 F1                    1920 	.db #0xf1	; 241
      0006B1 E1                    1921 	.db #0xe1	; 225
      0006B2 E1                    1922 	.db #0xe1	; 225
      0006B3 E1                    1923 	.db #0xe1	; 225
      0006B4 E1                    1924 	.db #0xe1	; 225
      0006B5 E1                    1925 	.db #0xe1	; 225
      0006B6 E1                    1926 	.db #0xe1	; 225
      0006B7 E1                    1927 	.db #0xe1	; 225
      0006B8                       1928 _color_column_2:
      0006B8 F1                    1929 	.db #0xf1	; 241
      0006B9 E1                    1930 	.db #0xe1	; 225
      0006BA E1                    1931 	.db #0xe1	; 225
      0006BB E1                    1932 	.db #0xe1	; 225
      0006BC E1                    1933 	.db #0xe1	; 225
      0006BD E1                    1934 	.db #0xe1	; 225
      0006BE E1                    1935 	.db #0xe1	; 225
      0006BF E1                    1936 	.db #0xe1	; 225
      0006C0                       1937 _color_column_3:
      0006C0 F1                    1938 	.db #0xf1	; 241
      0006C1 E1                    1939 	.db #0xe1	; 225
      0006C2 E1                    1940 	.db #0xe1	; 225
      0006C3 E1                    1941 	.db #0xe1	; 225
      0006C4 E1                    1942 	.db #0xe1	; 225
      0006C5 E1                    1943 	.db #0xe1	; 225
      0006C6 E1                    1944 	.db #0xe1	; 225
      0006C7 E1                    1945 	.db #0xe1	; 225
      0006C8                       1946 _color_column_4:
      0006C8 F1                    1947 	.db #0xf1	; 241
      0006C9 F1                    1948 	.db #0xf1	; 241
      0006CA F1                    1949 	.db #0xf1	; 241
      0006CB F1                    1950 	.db #0xf1	; 241
      0006CC F1                    1951 	.db #0xf1	; 241
      0006CD F1                    1952 	.db #0xf1	; 241
      0006CE F1                    1953 	.db #0xf1	; 241
      0006CF F1                    1954 	.db #0xf1	; 241
      0006D0                       1955 _color_column_5:
      0006D0 E1                    1956 	.db #0xe1	; 225
      0006D1 E1                    1957 	.db #0xe1	; 225
      0006D2 E1                    1958 	.db #0xe1	; 225
      0006D3 E1                    1959 	.db #0xe1	; 225
      0006D4 E1                    1960 	.db #0xe1	; 225
      0006D5 E1                    1961 	.db #0xe1	; 225
      0006D6 E1                    1962 	.db #0xe1	; 225
      0006D7 E1                    1963 	.db #0xe1	; 225
      0006D8                       1964 _color_column_6:
      0006D8 E1                    1965 	.db #0xe1	; 225
      0006D9 E1                    1966 	.db #0xe1	; 225
      0006DA E1                    1967 	.db #0xe1	; 225
      0006DB 41                    1968 	.db #0x41	; 65	'A'
      0006DC 41                    1969 	.db #0x41	; 65	'A'
      0006DD 41                    1970 	.db #0x41	; 65	'A'
      0006DE 41                    1971 	.db #0x41	; 65	'A'
      0006DF 41                    1972 	.db #0x41	; 65	'A'
      0006E0                       1973 _color_column_7:
      0006E0 F1                    1974 	.db #0xf1	; 241
      0006E1 F1                    1975 	.db #0xf1	; 241
      0006E2 F1                    1976 	.db #0xf1	; 241
      0006E3 F1                    1977 	.db #0xf1	; 241
      0006E4 F1                    1978 	.db #0xf1	; 241
      0006E5 F1                    1979 	.db #0xf1	; 241
      0006E6 F1                    1980 	.db #0xf1	; 241
      0006E7 F1                    1981 	.db #0xf1	; 241
      0006E8                       1982 _color_column_8:
      0006E8 E1                    1983 	.db #0xe1	; 225
      0006E9 E1                    1984 	.db #0xe1	; 225
      0006EA E1                    1985 	.db #0xe1	; 225
      0006EB F1                    1986 	.db #0xf1	; 241
      0006EC E1                    1987 	.db #0xe1	; 225
      0006ED E1                    1988 	.db #0xe1	; 225
      0006EE E1                    1989 	.db #0xe1	; 225
      0006EF E1                    1990 	.db #0xe1	; 225
      0006F0                       1991 _color_column_9:
      0006F0 41                    1992 	.db #0x41	; 65	'A'
      0006F1 41                    1993 	.db #0x41	; 65	'A'
      0006F2 41                    1994 	.db #0x41	; 65	'A'
      0006F3 F1                    1995 	.db #0xf1	; 241
      0006F4 41                    1996 	.db #0x41	; 65	'A'
      0006F5 41                    1997 	.db #0x41	; 65	'A'
      0006F6 41                    1998 	.db #0x41	; 65	'A'
      0006F7 41                    1999 	.db #0x41	; 65	'A'
      0006F8                       2000 _color_column_10:
      0006F8 F1                    2001 	.db #0xf1	; 241
      0006F9 F1                    2002 	.db #0xf1	; 241
      0006FA F1                    2003 	.db #0xf1	; 241
      0006FB F1                    2004 	.db #0xf1	; 241
      0006FC F1                    2005 	.db #0xf1	; 241
      0006FD F1                    2006 	.db #0xf1	; 241
      0006FE F1                    2007 	.db #0xf1	; 241
      0006FF F1                    2008 	.db #0xf1	; 241
      000700                       2009 _color_column_11:
      000700 E1                    2010 	.db #0xe1	; 225
      000701 E1                    2011 	.db #0xe1	; 225
      000702 E1                    2012 	.db #0xe1	; 225
      000703 E1                    2013 	.db #0xe1	; 225
      000704 E1                    2014 	.db #0xe1	; 225
      000705 E1                    2015 	.db #0xe1	; 225
      000706 E1                    2016 	.db #0xe1	; 225
      000707 E1                    2017 	.db #0xe1	; 225
      000708                       2018 _color_column_12:
      000708 41                    2019 	.db #0x41	; 65	'A'
      000709 41                    2020 	.db #0x41	; 65	'A'
      00070A 41                    2021 	.db #0x41	; 65	'A'
      00070B 41                    2022 	.db #0x41	; 65	'A'
      00070C 41                    2023 	.db #0x41	; 65	'A'
      00070D 41                    2024 	.db #0x41	; 65	'A'
      00070E 41                    2025 	.db #0x41	; 65	'A'
      00070F 41                    2026 	.db #0x41	; 65	'A'
      000710                       2027 _color_column_16:
      000710 F1                    2028 	.db #0xf1	; 241
      000711 F1                    2029 	.db #0xf1	; 241
      000712 F1                    2030 	.db #0xf1	; 241
      000713 F1                    2031 	.db #0xf1	; 241
      000714 F1                    2032 	.db #0xf1	; 241
      000715 F1                    2033 	.db #0xf1	; 241
      000716 F1                    2034 	.db #0xf1	; 241
      000717 F1                    2035 	.db #0xf1	; 241
      000718                       2036 _color_column_17:
      000718 E1                    2037 	.db #0xe1	; 225
      000719 E1                    2038 	.db #0xe1	; 225
      00071A E1                    2039 	.db #0xe1	; 225
      00071B E1                    2040 	.db #0xe1	; 225
      00071C E1                    2041 	.db #0xe1	; 225
      00071D E1                    2042 	.db #0xe1	; 225
      00071E E1                    2043 	.db #0xe1	; 225
      00071F E1                    2044 	.db #0xe1	; 225
      000720                       2045 _color_column_18:
      000720 41                    2046 	.db #0x41	; 65	'A'
      000721 41                    2047 	.db #0x41	; 65	'A'
      000722 41                    2048 	.db #0x41	; 65	'A'
      000723 41                    2049 	.db #0x41	; 65	'A'
      000724 41                    2050 	.db #0x41	; 65	'A'
      000725 E1                    2051 	.db #0xe1	; 225
      000726 E1                    2052 	.db #0xe1	; 225
      000727 E1                    2053 	.db #0xe1	; 225
      000728                       2054 _color_column_13:
      000728 E1                    2055 	.db #0xe1	; 225
      000729 E1                    2056 	.db #0xe1	; 225
      00072A E1                    2057 	.db #0xe1	; 225
      00072B E1                    2058 	.db #0xe1	; 225
      00072C E1                    2059 	.db #0xe1	; 225
      00072D E1                    2060 	.db #0xe1	; 225
      00072E E1                    2061 	.db #0xe1	; 225
      00072F F1                    2062 	.db #0xf1	; 241
      000730                       2063 _color_column_14:
      000730 E1                    2064 	.db #0xe1	; 225
      000731 E1                    2065 	.db #0xe1	; 225
      000732 E1                    2066 	.db #0xe1	; 225
      000733 E1                    2067 	.db #0xe1	; 225
      000734 E1                    2068 	.db #0xe1	; 225
      000735 E1                    2069 	.db #0xe1	; 225
      000736 E1                    2070 	.db #0xe1	; 225
      000737 F1                    2071 	.db #0xf1	; 241
      000738                       2072 _color_column_15:
      000738 E1                    2073 	.db #0xe1	; 225
      000739 E1                    2074 	.db #0xe1	; 225
      00073A E1                    2075 	.db #0xe1	; 225
      00073B E1                    2076 	.db #0xe1	; 225
      00073C E1                    2077 	.db #0xe1	; 225
      00073D E1                    2078 	.db #0xe1	; 225
      00073E E1                    2079 	.db #0xe1	; 225
      00073F F1                    2080 	.db #0xf1	; 241
      000740                       2081 _color_dust_0:
      000740 F1                    2082 	.db #0xf1	; 241
      000741 F1                    2083 	.db #0xf1	; 241
      000742 F1                    2084 	.db #0xf1	; 241
      000743 F1                    2085 	.db #0xf1	; 241
      000744 F1                    2086 	.db #0xf1	; 241
      000745 F1                    2087 	.db #0xf1	; 241
      000746 F1                    2088 	.db #0xf1	; 241
      000747 F1                    2089 	.db #0xf1	; 241
      000748                       2090 _color_dust_1:
      000748 F1                    2091 	.db #0xf1	; 241
      000749 F1                    2092 	.db #0xf1	; 241
      00074A F1                    2093 	.db #0xf1	; 241
      00074B F1                    2094 	.db #0xf1	; 241
      00074C F1                    2095 	.db #0xf1	; 241
      00074D F1                    2096 	.db #0xf1	; 241
      00074E F1                    2097 	.db #0xf1	; 241
      00074F F1                    2098 	.db #0xf1	; 241
      000750                       2099 _color_dust_2:
      000750 F1                    2100 	.db #0xf1	; 241
      000751 F1                    2101 	.db #0xf1	; 241
      000752 F1                    2102 	.db #0xf1	; 241
      000753 F1                    2103 	.db #0xf1	; 241
      000754 F1                    2104 	.db #0xf1	; 241
      000755 F1                    2105 	.db #0xf1	; 241
      000756 F1                    2106 	.db #0xf1	; 241
      000757 F1                    2107 	.db #0xf1	; 241
      000758                       2108 _color_dust_3:
      000758 F1                    2109 	.db #0xf1	; 241
      000759 F1                    2110 	.db #0xf1	; 241
      00075A F1                    2111 	.db #0xf1	; 241
      00075B F1                    2112 	.db #0xf1	; 241
      00075C F1                    2113 	.db #0xf1	; 241
      00075D F1                    2114 	.db #0xf1	; 241
      00075E F1                    2115 	.db #0xf1	; 241
      00075F F1                    2116 	.db #0xf1	; 241
      000760                       2117 _color_font_1:
      000760 F1                    2118 	.db #0xf1	; 241
      000761 F1                    2119 	.db #0xf1	; 241
      000762 E1                    2120 	.db #0xe1	; 225
      000763 71                    2121 	.db #0x71	; 113	'q'
      000764 71                    2122 	.db #0x71	; 113	'q'
      000765 51                    2123 	.db #0x51	; 81	'Q'
      000766 51                    2124 	.db #0x51	; 81	'Q'
      000767 41                    2125 	.db #0x41	; 65	'A'
      000768                       2126 _color_font_2:
      000768 61                    2127 	.db #0x61	; 97	'a'
      000769 61                    2128 	.db #0x61	; 97	'a'
      00076A 81                    2129 	.db #0x81	; 129
      00076B 81                    2130 	.db #0x81	; 129
      00076C 91                    2131 	.db #0x91	; 145
      00076D 91                    2132 	.db #0x91	; 145
      00076E E1                    2133 	.db #0xe1	; 225
      00076F E1                    2134 	.db #0xe1	; 225
      000770                       2135 _color_title_1:
      000770 A1                    2136 	.db #0xa1	; 161
      000771 A1                    2137 	.db #0xa1	; 161
      000772 A1                    2138 	.db #0xa1	; 161
      000773 A1                    2139 	.db #0xa1	; 161
      000774 A1                    2140 	.db #0xa1	; 161
      000775 A1                    2141 	.db #0xa1	; 161
      000776 A1                    2142 	.db #0xa1	; 161
      000777 A1                    2143 	.db #0xa1	; 161
      000778                       2144 _color_title_2:
      000778 B1                    2145 	.db #0xb1	; 177
      000779 B1                    2146 	.db #0xb1	; 177
      00077A B1                    2147 	.db #0xb1	; 177
      00077B B1                    2148 	.db #0xb1	; 177
      00077C B1                    2149 	.db #0xb1	; 177
      00077D B1                    2150 	.db #0xb1	; 177
      00077E B1                    2151 	.db #0xb1	; 177
      00077F B1                    2152 	.db #0xb1	; 177
      000780                       2153 _color_title_3:
      000780 D1                    2154 	.db #0xd1	; 209
      000781 D1                    2155 	.db #0xd1	; 209
      000782 D1                    2156 	.db #0xd1	; 209
      000783 D1                    2157 	.db #0xd1	; 209
      000784 D1                    2158 	.db #0xd1	; 209
      000785 D1                    2159 	.db #0xd1	; 209
      000786 D1                    2160 	.db #0xd1	; 209
      000787 D1                    2161 	.db #0xd1	; 209
      000788                       2162 _color_title_4:
      000788 F1                    2163 	.db #0xf1	; 241
      000789 F1                    2164 	.db #0xf1	; 241
      00078A F1                    2165 	.db #0xf1	; 241
      00078B F1                    2166 	.db #0xf1	; 241
      00078C F1                    2167 	.db #0xf1	; 241
      00078D F1                    2168 	.db #0xf1	; 241
      00078E F1                    2169 	.db #0xf1	; 241
      00078F F1                    2170 	.db #0xf1	; 241
      000790                       2171 _color_title_5:
      000790 71                    2172 	.db #0x71	; 113	'q'
      000791 71                    2173 	.db #0x71	; 113	'q'
      000792 71                    2174 	.db #0x71	; 113	'q'
      000793 71                    2175 	.db #0x71	; 113	'q'
      000794 71                    2176 	.db #0x71	; 113	'q'
      000795 71                    2177 	.db #0x71	; 113	'q'
      000796 71                    2178 	.db #0x71	; 113	'q'
      000797 71                    2179 	.db #0x71	; 113	'q'
      000798                       2180 _color_title_6:
      000798 51                    2181 	.db #0x51	; 81	'Q'
      000799 51                    2182 	.db #0x51	; 81	'Q'
      00079A 51                    2183 	.db #0x51	; 81	'Q'
      00079B 51                    2184 	.db #0x51	; 81	'Q'
      00079C 51                    2185 	.db #0x51	; 81	'Q'
      00079D 51                    2186 	.db #0x51	; 81	'Q'
      00079E 51                    2187 	.db #0x51	; 81	'Q'
      00079F 51                    2188 	.db #0x51	; 81	'Q'
      0007A0                       2189 _color_title_7:
      0007A0 41                    2190 	.db #0x41	; 65	'A'
      0007A1 41                    2191 	.db #0x41	; 65	'A'
      0007A2 41                    2192 	.db #0x41	; 65	'A'
      0007A3 41                    2193 	.db #0x41	; 65	'A'
      0007A4 41                    2194 	.db #0x41	; 65	'A'
      0007A5 41                    2195 	.db #0x41	; 65	'A'
      0007A6 41                    2196 	.db #0x41	; 65	'A'
      0007A7 41                    2197 	.db #0x41	; 65	'A'
      0007A8                       2198 _sprite_arrow_0:
      0007A8 00                    2199 	.db #0x00	; 0
      0007A9 00                    2200 	.db #0x00	; 0
      0007AA 00                    2201 	.db #0x00	; 0
      0007AB 00                    2202 	.db #0x00	; 0
      0007AC 00                    2203 	.db #0x00	; 0
      0007AD 00                    2204 	.db #0x00	; 0
      0007AE 00                    2205 	.db #0x00	; 0
      0007AF 00                    2206 	.db #0x00	; 0
      0007B0                       2207 _sprite_arrow_1:
      0007B0 FF                    2208 	.db #0xff	; 255
      0007B1 00                    2209 	.db #0x00	; 0
      0007B2 3F                    2210 	.db #0x3f	; 63
      0007B3 00                    2211 	.db #0x00	; 0
      0007B4 0F                    2212 	.db #0x0f	; 15
      0007B5 00                    2213 	.db #0x00	; 0
      0007B6 03                    2214 	.db #0x03	; 3
      0007B7 00                    2215 	.db #0x00	; 0
      0007B8                       2216 _sprite_arrow_2:
      0007B8 00                    2217 	.db #0x00	; 0
      0007B9 00                    2218 	.db #0x00	; 0
      0007BA 00                    2219 	.db #0x00	; 0
      0007BB 00                    2220 	.db #0x00	; 0
      0007BC 00                    2221 	.db #0x00	; 0
      0007BD 00                    2222 	.db #0x00	; 0
      0007BE 00                    2223 	.db #0x00	; 0
      0007BF 00                    2224 	.db #0x00	; 0
      0007C0                       2225 _sprite_arrow_3:
      0007C0 FF                    2226 	.db #0xff	; 255
      0007C1 00                    2227 	.db #0x00	; 0
      0007C2 FC                    2228 	.db #0xfc	; 252
      0007C3 00                    2229 	.db #0x00	; 0
      0007C4 F0                    2230 	.db #0xf0	; 240
      0007C5 00                    2231 	.db #0x00	; 0
      0007C6 C0                    2232 	.db #0xc0	; 192
      0007C7 00                    2233 	.db #0x00	; 0
      0007C8                       2234 _sprite_hit_1:
      0007C8 00                    2235 	.db #0x00	; 0
      0007C9 77                    2236 	.db #0x77	; 119	'w'
      0007CA 22                    2237 	.db #0x22	; 34
      0007CB 22                    2238 	.db #0x22	; 34
      0007CC 22                    2239 	.db #0x22	; 34
      0007CD 3E                    2240 	.db #0x3e	; 62
      0007CE 22                    2241 	.db #0x22	; 34
      0007CF 22                    2242 	.db #0x22	; 34
      0007D0 22                    2243 	.db #0x22	; 34
      0007D1 77                    2244 	.db #0x77	; 119	'w'
      0007D2 00                    2245 	.db #0x00	; 0
      0007D3 00                    2246 	.db #0x00	; 0
      0007D4 00                    2247 	.db #0x00	; 0
      0007D5 00                    2248 	.db #0x00	; 0
      0007D6 00                    2249 	.db #0x00	; 0
      0007D7 00                    2250 	.db #0x00	; 0
      0007D8 00                    2251 	.db #0x00	; 0
      0007D9 77                    2252 	.db #0x77	; 119	'w'
      0007DA 25                    2253 	.db #0x25	; 37
      0007DB 21                    2254 	.db #0x21	; 33
      0007DC 21                    2255 	.db #0x21	; 33
      0007DD 21                    2256 	.db #0x21	; 33
      0007DE 21                    2257 	.db #0x21	; 33
      0007DF 21                    2258 	.db #0x21	; 33
      0007E0 21                    2259 	.db #0x21	; 33
      0007E1 73                    2260 	.db #0x73	; 115	's'
      0007E2 00                    2261 	.db #0x00	; 0
      0007E3 00                    2262 	.db #0x00	; 0
      0007E4 00                    2263 	.db #0x00	; 0
      0007E5 00                    2264 	.db #0x00	; 0
      0007E6 00                    2265 	.db #0x00	; 0
      0007E7 00                    2266 	.db #0x00	; 0
      0007E8                       2267 _sprite_hit_2:
      0007E8 00                    2268 	.db #0x00	; 0
      0007E9 C0                    2269 	.db #0xc0	; 192
      0007EA 40                    2270 	.db #0x40	; 64
      0007EB 00                    2271 	.db #0x00	; 0
      0007EC 00                    2272 	.db #0x00	; 0
      0007ED 00                    2273 	.db #0x00	; 0
      0007EE 00                    2274 	.db #0x00	; 0
      0007EF 00                    2275 	.db #0x00	; 0
      0007F0 00                    2276 	.db #0x00	; 0
      0007F1 80                    2277 	.db #0x80	; 128
      0007F2 00                    2278 	.db #0x00	; 0
      0007F3 00                    2279 	.db #0x00	; 0
      0007F4 00                    2280 	.db #0x00	; 0
      0007F5 00                    2281 	.db #0x00	; 0
      0007F6 00                    2282 	.db #0x00	; 0
      0007F7 00                    2283 	.db #0x00	; 0
      0007F8 00                    2284 	.db #0x00	; 0
      0007F9 00                    2285 	.db #0x00	; 0
      0007FA 00                    2286 	.db #0x00	; 0
      0007FB 00                    2287 	.db #0x00	; 0
      0007FC 00                    2288 	.db #0x00	; 0
      0007FD 00                    2289 	.db #0x00	; 0
      0007FE 00                    2290 	.db #0x00	; 0
      0007FF 00                    2291 	.db #0x00	; 0
      000800 00                    2292 	.db #0x00	; 0
      000801 00                    2293 	.db #0x00	; 0
      000802 00                    2294 	.db #0x00	; 0
      000803 00                    2295 	.db #0x00	; 0
      000804 00                    2296 	.db #0x00	; 0
      000805 00                    2297 	.db #0x00	; 0
      000806 00                    2298 	.db #0x00	; 0
      000807 00                    2299 	.db #0x00	; 0
      000808                       2300 _sprite_combo_1:
      000808 00                    2301 	.db #0x00	; 0
      000809 38                    2302 	.db #0x38	; 56	'8'
      00080A 65                    2303 	.db #0x65	; 101	'e'
      00080B 61                    2304 	.db #0x61	; 97	'a'
      00080C 61                    2305 	.db #0x61	; 97	'a'
      00080D 61                    2306 	.db #0x61	; 97	'a'
      00080E 61                    2307 	.db #0x61	; 97	'a'
      00080F 61                    2308 	.db #0x61	; 97	'a'
      000810 65                    2309 	.db #0x65	; 101	'e'
      000811 38                    2310 	.db #0x38	; 56	'8'
      000812 00                    2311 	.db #0x00	; 0
      000813 00                    2312 	.db #0x00	; 0
      000814 00                    2313 	.db #0x00	; 0
      000815 00                    2314 	.db #0x00	; 0
      000816 00                    2315 	.db #0x00	; 0
      000817 00                    2316 	.db #0x00	; 0
      000818 00                    2317 	.db #0x00	; 0
      000819 E6                    2318 	.db #0xe6	; 230
      00081A 13                    2319 	.db #0x13	; 19
      00081B 12                    2320 	.db #0x12	; 18
      00081C 12                    2321 	.db #0x12	; 18
      00081D 12                    2322 	.db #0x12	; 18
      00081E 12                    2323 	.db #0x12	; 18
      00081F 12                    2324 	.db #0x12	; 18
      000820 12                    2325 	.db #0x12	; 18
      000821 E7                    2326 	.db #0xe7	; 231
      000822 00                    2327 	.db #0x00	; 0
      000823 00                    2328 	.db #0x00	; 0
      000824 00                    2329 	.db #0x00	; 0
      000825 00                    2330 	.db #0x00	; 0
      000826 00                    2331 	.db #0x00	; 0
      000827 00                    2332 	.db #0x00	; 0
      000828                       2333 _sprite_combo_2:
      000828 00                    2334 	.db #0x00	; 0
      000829 37                    2335 	.db #0x37	; 55	'7'
      00082A 62                    2336 	.db #0x62	; 98	'b'
      00082B A2                    2337 	.db #0xa2	; 162
      00082C 22                    2338 	.db #0x22	; 34
      00082D 23                    2339 	.db #0x23	; 35
      00082E 22                    2340 	.db #0x22	; 34
      00082F 22                    2341 	.db #0x22	; 34
      000830 22                    2342 	.db #0x22	; 34
      000831 77                    2343 	.db #0x77	; 119	'w'
      000832 00                    2344 	.db #0x00	; 0
      000833 00                    2345 	.db #0x00	; 0
      000834 00                    2346 	.db #0x00	; 0
      000835 00                    2347 	.db #0x00	; 0
      000836 00                    2348 	.db #0x00	; 0
      000837 00                    2349 	.db #0x00	; 0
      000838 00                    2350 	.db #0x00	; 0
      000839 8E                    2351 	.db #0x8e	; 142
      00083A 51                    2352 	.db #0x51	; 81	'Q'
      00083B 51                    2353 	.db #0x51	; 81	'Q'
      00083C 51                    2354 	.db #0x51	; 81	'Q'
      00083D 91                    2355 	.db #0x91	; 145
      00083E 51                    2356 	.db #0x51	; 81	'Q'
      00083F 51                    2357 	.db #0x51	; 81	'Q'
      000840 51                    2358 	.db #0x51	; 81	'Q'
      000841 8E                    2359 	.db #0x8e	; 142
      000842 00                    2360 	.db #0x00	; 0
      000843 00                    2361 	.db #0x00	; 0
      000844 00                    2362 	.db #0x00	; 0
      000845 00                    2363 	.db #0x00	; 0
      000846 00                    2364 	.db #0x00	; 0
      000847 00                    2365 	.db #0x00	; 0
      000848                       2366 _sprite_2x:
      000848 00                    2367 	.db #0x00	; 0
      000849 3E                    2368 	.db #0x3e	; 62
      00084A 63                    2369 	.db #0x63	; 99	'c'
      00084B 03                    2370 	.db #0x03	; 3
      00084C 03                    2371 	.db #0x03	; 3
      00084D 1E                    2372 	.db #0x1e	; 30
      00084E 30                    2373 	.db #0x30	; 48	'0'
      00084F 60                    2374 	.db #0x60	; 96
      000850 60                    2375 	.db #0x60	; 96
      000851 7F                    2376 	.db #0x7f	; 127
      000852 00                    2377 	.db #0x00	; 0
      000853 00                    2378 	.db #0x00	; 0
      000854 00                    2379 	.db #0x00	; 0
      000855 00                    2380 	.db #0x00	; 0
      000856 00                    2381 	.db #0x00	; 0
      000857 00                    2382 	.db #0x00	; 0
      000858 00                    2383 	.db #0x00	; 0
      000859 00                    2384 	.db #0x00	; 0
      00085A 00                    2385 	.db #0x00	; 0
      00085B 63                    2386 	.db #0x63	; 99	'c'
      00085C 36                    2387 	.db #0x36	; 54	'6'
      00085D 1C                    2388 	.db #0x1c	; 28
      00085E 08                    2389 	.db #0x08	; 8
      00085F 1C                    2390 	.db #0x1c	; 28
      000860 36                    2391 	.db #0x36	; 54	'6'
      000861 63                    2392 	.db #0x63	; 99	'c'
      000862 00                    2393 	.db #0x00	; 0
      000863 00                    2394 	.db #0x00	; 0
      000864 00                    2395 	.db #0x00	; 0
      000865 00                    2396 	.db #0x00	; 0
      000866 00                    2397 	.db #0x00	; 0
      000867 00                    2398 	.db #0x00	; 0
      000868                       2399 _sprite_3x:
      000868 00                    2400 	.db #0x00	; 0
      000869 3E                    2401 	.db #0x3e	; 62
      00086A 63                    2402 	.db #0x63	; 99	'c'
      00086B 03                    2403 	.db #0x03	; 3
      00086C 03                    2404 	.db #0x03	; 3
      00086D 1E                    2405 	.db #0x1e	; 30
      00086E 03                    2406 	.db #0x03	; 3
      00086F 03                    2407 	.db #0x03	; 3
      000870 63                    2408 	.db #0x63	; 99	'c'
      000871 3E                    2409 	.db #0x3e	; 62
      000872 00                    2410 	.db #0x00	; 0
      000873 00                    2411 	.db #0x00	; 0
      000874 00                    2412 	.db #0x00	; 0
      000875 00                    2413 	.db #0x00	; 0
      000876 00                    2414 	.db #0x00	; 0
      000877 00                    2415 	.db #0x00	; 0
      000878 00                    2416 	.db #0x00	; 0
      000879 00                    2417 	.db #0x00	; 0
      00087A 00                    2418 	.db #0x00	; 0
      00087B 63                    2419 	.db #0x63	; 99	'c'
      00087C 36                    2420 	.db #0x36	; 54	'6'
      00087D 1C                    2421 	.db #0x1c	; 28
      00087E 08                    2422 	.db #0x08	; 8
      00087F 1C                    2423 	.db #0x1c	; 28
      000880 36                    2424 	.db #0x36	; 54	'6'
      000881 63                    2425 	.db #0x63	; 99	'c'
      000882 00                    2426 	.db #0x00	; 0
      000883 00                    2427 	.db #0x00	; 0
      000884 00                    2428 	.db #0x00	; 0
      000885 00                    2429 	.db #0x00	; 0
      000886 00                    2430 	.db #0x00	; 0
      000887 00                    2431 	.db #0x00	; 0
      000888                       2432 _sprite_4x:
      000888 00                    2433 	.db #0x00	; 0
      000889 02                    2434 	.db #0x02	; 2
      00088A 06                    2435 	.db #0x06	; 6
      00088B 0E                    2436 	.db #0x0e	; 14
      00088C 16                    2437 	.db #0x16	; 22
      00088D 26                    2438 	.db #0x26	; 38
      00088E 7F                    2439 	.db #0x7f	; 127
      00088F 06                    2440 	.db #0x06	; 6
      000890 06                    2441 	.db #0x06	; 6
      000891 0F                    2442 	.db #0x0f	; 15
      000892 00                    2443 	.db #0x00	; 0
      000893 00                    2444 	.db #0x00	; 0
      000894 00                    2445 	.db #0x00	; 0
      000895 00                    2446 	.db #0x00	; 0
      000896 00                    2447 	.db #0x00	; 0
      000897 00                    2448 	.db #0x00	; 0
      000898 00                    2449 	.db #0x00	; 0
      000899 00                    2450 	.db #0x00	; 0
      00089A 00                    2451 	.db #0x00	; 0
      00089B 63                    2452 	.db #0x63	; 99	'c'
      00089C 36                    2453 	.db #0x36	; 54	'6'
      00089D 1C                    2454 	.db #0x1c	; 28
      00089E 08                    2455 	.db #0x08	; 8
      00089F 1C                    2456 	.db #0x1c	; 28
      0008A0 36                    2457 	.db #0x36	; 54	'6'
      0008A1 63                    2458 	.db #0x63	; 99	'c'
      0008A2 00                    2459 	.db #0x00	; 0
      0008A3 00                    2460 	.db #0x00	; 0
      0008A4 00                    2461 	.db #0x00	; 0
      0008A5 00                    2462 	.db #0x00	; 0
      0008A6 00                    2463 	.db #0x00	; 0
      0008A7 00                    2464 	.db #0x00	; 0
      0008A8                       2465 _sprite_5x:
      0008A8 00                    2466 	.db #0x00	; 0
      0008A9 7E                    2467 	.db #0x7e	; 126
      0008AA 60                    2468 	.db #0x60	; 96
      0008AB 60                    2469 	.db #0x60	; 96
      0008AC 7E                    2470 	.db #0x7e	; 126
      0008AD 03                    2471 	.db #0x03	; 3
      0008AE 03                    2472 	.db #0x03	; 3
      0008AF 03                    2473 	.db #0x03	; 3
      0008B0 63                    2474 	.db #0x63	; 99	'c'
      0008B1 3E                    2475 	.db #0x3e	; 62
      0008B2 00                    2476 	.db #0x00	; 0
      0008B3 00                    2477 	.db #0x00	; 0
      0008B4 00                    2478 	.db #0x00	; 0
      0008B5 00                    2479 	.db #0x00	; 0
      0008B6 00                    2480 	.db #0x00	; 0
      0008B7 00                    2481 	.db #0x00	; 0
      0008B8 00                    2482 	.db #0x00	; 0
      0008B9 00                    2483 	.db #0x00	; 0
      0008BA 00                    2484 	.db #0x00	; 0
      0008BB 63                    2485 	.db #0x63	; 99	'c'
      0008BC 36                    2486 	.db #0x36	; 54	'6'
      0008BD 1C                    2487 	.db #0x1c	; 28
      0008BE 08                    2488 	.db #0x08	; 8
      0008BF 1C                    2489 	.db #0x1c	; 28
      0008C0 36                    2490 	.db #0x36	; 54	'6'
      0008C1 63                    2491 	.db #0x63	; 99	'c'
      0008C2 00                    2492 	.db #0x00	; 0
      0008C3 00                    2493 	.db #0x00	; 0
      0008C4 00                    2494 	.db #0x00	; 0
      0008C5 00                    2495 	.db #0x00	; 0
      0008C6 00                    2496 	.db #0x00	; 0
      0008C7 00                    2497 	.db #0x00	; 0
      0008C8                       2498 _sprite_6x:
      0008C8 00                    2499 	.db #0x00	; 0
      0008C9 3E                    2500 	.db #0x3e	; 62
      0008CA 61                    2501 	.db #0x61	; 97	'a'
      0008CB 60                    2502 	.db #0x60	; 96
      0008CC 7E                    2503 	.db #0x7e	; 126
      0008CD 63                    2504 	.db #0x63	; 99	'c'
      0008CE 63                    2505 	.db #0x63	; 99	'c'
      0008CF 63                    2506 	.db #0x63	; 99	'c'
      0008D0 63                    2507 	.db #0x63	; 99	'c'
      0008D1 3E                    2508 	.db #0x3e	; 62
      0008D2 00                    2509 	.db #0x00	; 0
      0008D3 00                    2510 	.db #0x00	; 0
      0008D4 00                    2511 	.db #0x00	; 0
      0008D5 00                    2512 	.db #0x00	; 0
      0008D6 00                    2513 	.db #0x00	; 0
      0008D7 00                    2514 	.db #0x00	; 0
      0008D8 00                    2515 	.db #0x00	; 0
      0008D9 00                    2516 	.db #0x00	; 0
      0008DA 00                    2517 	.db #0x00	; 0
      0008DB 63                    2518 	.db #0x63	; 99	'c'
      0008DC 36                    2519 	.db #0x36	; 54	'6'
      0008DD 1C                    2520 	.db #0x1c	; 28
      0008DE 08                    2521 	.db #0x08	; 8
      0008DF 1C                    2522 	.db #0x1c	; 28
      0008E0 36                    2523 	.db #0x36	; 54	'6'
      0008E1 63                    2524 	.db #0x63	; 99	'c'
      0008E2 00                    2525 	.db #0x00	; 0
      0008E3 00                    2526 	.db #0x00	; 0
      0008E4 00                    2527 	.db #0x00	; 0
      0008E5 00                    2528 	.db #0x00	; 0
      0008E6 00                    2529 	.db #0x00	; 0
      0008E7 00                    2530 	.db #0x00	; 0
      0008E8                       2531 _sprite_mega_hit:
      0008E8 04                    2532 	.db #0x04	; 4
      0008E9 06                    2533 	.db #0x06	; 6
      0008EA 05                    2534 	.db #0x05	; 5
      0008EB 04                    2535 	.db #0x04	; 4
      0008EC 04                    2536 	.db #0x04	; 4
      0008ED 00                    2537 	.db #0x00	; 0
      0008EE 03                    2538 	.db #0x03	; 3
      0008EF 04                    2539 	.db #0x04	; 4
      0008F0 05                    2540 	.db #0x05	; 5
      0008F1 04                    2541 	.db #0x04	; 4
      0008F2 03                    2542 	.db #0x03	; 3
      0008F3 00                    2543 	.db #0x00	; 0
      0008F4 00                    2544 	.db #0x00	; 0
      0008F5 00                    2545 	.db #0x00	; 0
      0008F6 00                    2546 	.db #0x00	; 0
      0008F7 00                    2547 	.db #0x00	; 0
      0008F8 5C                    2548 	.db #0x5c	; 92
      0008F9 D0                    2549 	.db #0xd0	; 208
      0008FA 5C                    2550 	.db #0x5c	; 92
      0008FB 50                    2551 	.db #0x50	; 80	'P'
      0008FC 5C                    2552 	.db #0x5c	; 92
      0008FD 00                    2553 	.db #0x00	; 0
      0008FE 98                    2554 	.db #0x98	; 152
      0008FF 24                    2555 	.db #0x24	; 36
      000900 A4                    2556 	.db #0xa4	; 164
      000901 BC                    2557 	.db #0xbc	; 188
      000902 A4                    2558 	.db #0xa4	; 164
      000903 00                    2559 	.db #0x00	; 0
      000904 00                    2560 	.db #0x00	; 0
      000905 00                    2561 	.db #0x00	; 0
      000906 00                    2562 	.db #0x00	; 0
      000907 00                    2563 	.db #0x00	; 0
      000908                       2564 _sprite_explosion_0:
      000908 00                    2565 	.db #0x00	; 0
      000909 00                    2566 	.db #0x00	; 0
      00090A 00                    2567 	.db #0x00	; 0
      00090B 00                    2568 	.db #0x00	; 0
      00090C 00                    2569 	.db #0x00	; 0
      00090D 00                    2570 	.db #0x00	; 0
      00090E 01                    2571 	.db #0x01	; 1
      00090F 02                    2572 	.db #0x02	; 2
      000910 01                    2573 	.db #0x01	; 1
      000911 00                    2574 	.db #0x00	; 0
      000912 00                    2575 	.db #0x00	; 0
      000913 00                    2576 	.db #0x00	; 0
      000914 00                    2577 	.db #0x00	; 0
      000915 00                    2578 	.db #0x00	; 0
      000916 00                    2579 	.db #0x00	; 0
      000917 00                    2580 	.db #0x00	; 0
      000918 00                    2581 	.db #0x00	; 0
      000919 00                    2582 	.db #0x00	; 0
      00091A 00                    2583 	.db #0x00	; 0
      00091B 00                    2584 	.db #0x00	; 0
      00091C 00                    2585 	.db #0x00	; 0
      00091D 00                    2586 	.db #0x00	; 0
      00091E 00                    2587 	.db #0x00	; 0
      00091F 80                    2588 	.db #0x80	; 128
      000920 00                    2589 	.db #0x00	; 0
      000921 00                    2590 	.db #0x00	; 0
      000922 00                    2591 	.db #0x00	; 0
      000923 00                    2592 	.db #0x00	; 0
      000924 00                    2593 	.db #0x00	; 0
      000925 00                    2594 	.db #0x00	; 0
      000926 00                    2595 	.db #0x00	; 0
      000927 00                    2596 	.db #0x00	; 0
      000928                       2597 _sprite_explosion_1:
      000928 00                    2598 	.db #0x00	; 0
      000929 00                    2599 	.db #0x00	; 0
      00092A 00                    2600 	.db #0x00	; 0
      00092B 00                    2601 	.db #0x00	; 0
      00092C 00                    2602 	.db #0x00	; 0
      00092D 01                    2603 	.db #0x01	; 1
      00092E 00                    2604 	.db #0x00	; 0
      00092F 04                    2605 	.db #0x04	; 4
      000930 00                    2606 	.db #0x00	; 0
      000931 01                    2607 	.db #0x01	; 1
      000932 00                    2608 	.db #0x00	; 0
      000933 00                    2609 	.db #0x00	; 0
      000934 00                    2610 	.db #0x00	; 0
      000935 00                    2611 	.db #0x00	; 0
      000936 00                    2612 	.db #0x00	; 0
      000937 00                    2613 	.db #0x00	; 0
      000938 00                    2614 	.db #0x00	; 0
      000939 00                    2615 	.db #0x00	; 0
      00093A 00                    2616 	.db #0x00	; 0
      00093B 00                    2617 	.db #0x00	; 0
      00093C 00                    2618 	.db #0x00	; 0
      00093D 00                    2619 	.db #0x00	; 0
      00093E 00                    2620 	.db #0x00	; 0
      00093F 40                    2621 	.db #0x40	; 64
      000940 00                    2622 	.db #0x00	; 0
      000941 00                    2623 	.db #0x00	; 0
      000942 00                    2624 	.db #0x00	; 0
      000943 00                    2625 	.db #0x00	; 0
      000944 00                    2626 	.db #0x00	; 0
      000945 00                    2627 	.db #0x00	; 0
      000946 00                    2628 	.db #0x00	; 0
      000947 00                    2629 	.db #0x00	; 0
      000948                       2630 _sprite_explosion_2:
      000948 00                    2631 	.db #0x00	; 0
      000949 00                    2632 	.db #0x00	; 0
      00094A 00                    2633 	.db #0x00	; 0
      00094B 00                    2634 	.db #0x00	; 0
      00094C 01                    2635 	.db #0x01	; 1
      00094D 04                    2636 	.db #0x04	; 4
      00094E 00                    2637 	.db #0x00	; 0
      00094F 08                    2638 	.db #0x08	; 8
      000950 00                    2639 	.db #0x00	; 0
      000951 04                    2640 	.db #0x04	; 4
      000952 01                    2641 	.db #0x01	; 1
      000953 00                    2642 	.db #0x00	; 0
      000954 00                    2643 	.db #0x00	; 0
      000955 00                    2644 	.db #0x00	; 0
      000956 00                    2645 	.db #0x00	; 0
      000957 00                    2646 	.db #0x00	; 0
      000958 00                    2647 	.db #0x00	; 0
      000959 00                    2648 	.db #0x00	; 0
      00095A 00                    2649 	.db #0x00	; 0
      00095B 00                    2650 	.db #0x00	; 0
      00095C 00                    2651 	.db #0x00	; 0
      00095D 40                    2652 	.db #0x40	; 64
      00095E 00                    2653 	.db #0x00	; 0
      00095F 20                    2654 	.db #0x20	; 32
      000960 00                    2655 	.db #0x00	; 0
      000961 40                    2656 	.db #0x40	; 64
      000962 00                    2657 	.db #0x00	; 0
      000963 00                    2658 	.db #0x00	; 0
      000964 00                    2659 	.db #0x00	; 0
      000965 00                    2660 	.db #0x00	; 0
      000966 00                    2661 	.db #0x00	; 0
      000967 00                    2662 	.db #0x00	; 0
      000968                       2663 _sprite_explosion_3:
      000968 00                    2664 	.db #0x00	; 0
      000969 00                    2665 	.db #0x00	; 0
      00096A 00                    2666 	.db #0x00	; 0
      00096B 01                    2667 	.db #0x01	; 1
      00096C 08                    2668 	.db #0x08	; 8
      00096D 00                    2669 	.db #0x00	; 0
      00096E 00                    2670 	.db #0x00	; 0
      00096F 10                    2671 	.db #0x10	; 16
      000970 00                    2672 	.db #0x00	; 0
      000971 00                    2673 	.db #0x00	; 0
      000972 08                    2674 	.db #0x08	; 8
      000973 01                    2675 	.db #0x01	; 1
      000974 00                    2676 	.db #0x00	; 0
      000975 00                    2677 	.db #0x00	; 0
      000976 00                    2678 	.db #0x00	; 0
      000977 00                    2679 	.db #0x00	; 0
      000978 00                    2680 	.db #0x00	; 0
      000979 00                    2681 	.db #0x00	; 0
      00097A 00                    2682 	.db #0x00	; 0
      00097B 00                    2683 	.db #0x00	; 0
      00097C 20                    2684 	.db #0x20	; 32
      00097D 00                    2685 	.db #0x00	; 0
      00097E 00                    2686 	.db #0x00	; 0
      00097F 10                    2687 	.db #0x10	; 16
      000980 00                    2688 	.db #0x00	; 0
      000981 00                    2689 	.db #0x00	; 0
      000982 20                    2690 	.db #0x20	; 32
      000983 00                    2691 	.db #0x00	; 0
      000984 00                    2692 	.db #0x00	; 0
      000985 00                    2693 	.db #0x00	; 0
      000986 00                    2694 	.db #0x00	; 0
      000987 00                    2695 	.db #0x00	; 0
      000988                       2696 _sprite_explosion_4:
      000988 00                    2697 	.db #0x00	; 0
      000989 00                    2698 	.db #0x00	; 0
      00098A 01                    2699 	.db #0x01	; 1
      00098B 10                    2700 	.db #0x10	; 16
      00098C 00                    2701 	.db #0x00	; 0
      00098D 00                    2702 	.db #0x00	; 0
      00098E 00                    2703 	.db #0x00	; 0
      00098F 20                    2704 	.db #0x20	; 32
      000990 00                    2705 	.db #0x00	; 0
      000991 00                    2706 	.db #0x00	; 0
      000992 00                    2707 	.db #0x00	; 0
      000993 10                    2708 	.db #0x10	; 16
      000994 01                    2709 	.db #0x01	; 1
      000995 00                    2710 	.db #0x00	; 0
      000996 00                    2711 	.db #0x00	; 0
      000997 00                    2712 	.db #0x00	; 0
      000998 00                    2713 	.db #0x00	; 0
      000999 00                    2714 	.db #0x00	; 0
      00099A 00                    2715 	.db #0x00	; 0
      00099B 10                    2716 	.db #0x10	; 16
      00099C 00                    2717 	.db #0x00	; 0
      00099D 00                    2718 	.db #0x00	; 0
      00099E 00                    2719 	.db #0x00	; 0
      00099F 08                    2720 	.db #0x08	; 8
      0009A0 00                    2721 	.db #0x00	; 0
      0009A1 00                    2722 	.db #0x00	; 0
      0009A2 00                    2723 	.db #0x00	; 0
      0009A3 10                    2724 	.db #0x10	; 16
      0009A4 00                    2725 	.db #0x00	; 0
      0009A5 00                    2726 	.db #0x00	; 0
      0009A6 00                    2727 	.db #0x00	; 0
      0009A7 00                    2728 	.db #0x00	; 0
      0009A8                       2729 _sprite_explosion_5:
      0009A8 01                    2730 	.db #0x01	; 1
      0009A9 00                    2731 	.db #0x00	; 0
      0009AA 20                    2732 	.db #0x20	; 32
      0009AB 00                    2733 	.db #0x00	; 0
      0009AC 00                    2734 	.db #0x00	; 0
      0009AD 00                    2735 	.db #0x00	; 0
      0009AE 00                    2736 	.db #0x00	; 0
      0009AF 80                    2737 	.db #0x80	; 128
      0009B0 00                    2738 	.db #0x00	; 0
      0009B1 00                    2739 	.db #0x00	; 0
      0009B2 00                    2740 	.db #0x00	; 0
      0009B3 00                    2741 	.db #0x00	; 0
      0009B4 20                    2742 	.db #0x20	; 32
      0009B5 00                    2743 	.db #0x00	; 0
      0009B6 01                    2744 	.db #0x01	; 1
      0009B7 00                    2745 	.db #0x00	; 0
      0009B8 00                    2746 	.db #0x00	; 0
      0009B9 00                    2747 	.db #0x00	; 0
      0009BA 08                    2748 	.db #0x08	; 8
      0009BB 00                    2749 	.db #0x00	; 0
      0009BC 00                    2750 	.db #0x00	; 0
      0009BD 00                    2751 	.db #0x00	; 0
      0009BE 00                    2752 	.db #0x00	; 0
      0009BF 02                    2753 	.db #0x02	; 2
      0009C0 00                    2754 	.db #0x00	; 0
      0009C1 00                    2755 	.db #0x00	; 0
      0009C2 00                    2756 	.db #0x00	; 0
      0009C3 00                    2757 	.db #0x00	; 0
      0009C4 08                    2758 	.db #0x08	; 8
      0009C5 00                    2759 	.db #0x00	; 0
      0009C6 00                    2760 	.db #0x00	; 0
      0009C7 00                    2761 	.db #0x00	; 0
      0009C8                       2762 _sprite_explosion_6:
      0009C8 00                    2763 	.db #0x00	; 0
      0009C9 01                    2764 	.db #0x01	; 1
      0009CA 00                    2765 	.db #0x00	; 0
      0009CB 20                    2766 	.db #0x20	; 32
      0009CC 00                    2767 	.db #0x00	; 0
      0009CD 00                    2768 	.db #0x00	; 0
      0009CE 00                    2769 	.db #0x00	; 0
      0009CF 00                    2770 	.db #0x00	; 0
      0009D0 80                    2771 	.db #0x80	; 128
      0009D1 00                    2772 	.db #0x00	; 0
      0009D2 00                    2773 	.db #0x00	; 0
      0009D3 00                    2774 	.db #0x00	; 0
      0009D4 00                    2775 	.db #0x00	; 0
      0009D5 20                    2776 	.db #0x20	; 32
      0009D6 00                    2777 	.db #0x00	; 0
      0009D7 01                    2778 	.db #0x01	; 1
      0009D8 00                    2779 	.db #0x00	; 0
      0009D9 00                    2780 	.db #0x00	; 0
      0009DA 00                    2781 	.db #0x00	; 0
      0009DB 08                    2782 	.db #0x08	; 8
      0009DC 00                    2783 	.db #0x00	; 0
      0009DD 00                    2784 	.db #0x00	; 0
      0009DE 00                    2785 	.db #0x00	; 0
      0009DF 00                    2786 	.db #0x00	; 0
      0009E0 02                    2787 	.db #0x02	; 2
      0009E1 00                    2788 	.db #0x00	; 0
      0009E2 00                    2789 	.db #0x00	; 0
      0009E3 00                    2790 	.db #0x00	; 0
      0009E4 00                    2791 	.db #0x00	; 0
      0009E5 08                    2792 	.db #0x08	; 8
      0009E6 00                    2793 	.db #0x00	; 0
      0009E7 00                    2794 	.db #0x00	; 0
      0009E8                       2795 _sprite_explosion_7:
      0009E8 00                    2796 	.db #0x00	; 0
      0009E9 00                    2797 	.db #0x00	; 0
      0009EA 01                    2798 	.db #0x01	; 1
      0009EB 00                    2799 	.db #0x00	; 0
      0009EC 20                    2800 	.db #0x20	; 32
      0009ED 00                    2801 	.db #0x00	; 0
      0009EE 00                    2802 	.db #0x00	; 0
      0009EF 00                    2803 	.db #0x00	; 0
      0009F0 00                    2804 	.db #0x00	; 0
      0009F1 80                    2805 	.db #0x80	; 128
      0009F2 00                    2806 	.db #0x00	; 0
      0009F3 00                    2807 	.db #0x00	; 0
      0009F4 00                    2808 	.db #0x00	; 0
      0009F5 00                    2809 	.db #0x00	; 0
      0009F6 20                    2810 	.db #0x20	; 32
      0009F7 00                    2811 	.db #0x00	; 0
      0009F8 00                    2812 	.db #0x00	; 0
      0009F9 00                    2813 	.db #0x00	; 0
      0009FA 00                    2814 	.db #0x00	; 0
      0009FB 00                    2815 	.db #0x00	; 0
      0009FC 08                    2816 	.db #0x08	; 8
      0009FD 00                    2817 	.db #0x00	; 0
      0009FE 00                    2818 	.db #0x00	; 0
      0009FF 00                    2819 	.db #0x00	; 0
      000A00 00                    2820 	.db #0x00	; 0
      000A01 02                    2821 	.db #0x02	; 2
      000A02 00                    2822 	.db #0x00	; 0
      000A03 00                    2823 	.db #0x00	; 0
      000A04 00                    2824 	.db #0x00	; 0
      000A05 00                    2825 	.db #0x00	; 0
      000A06 08                    2826 	.db #0x08	; 8
      000A07 00                    2827 	.db #0x00	; 0
      000A08                       2828 _sprite_block_small_0:
      000A08 5A                    2829 	.db #0x5a	; 90	'Z'
      000A09 24                    2830 	.db #0x24	; 36
      000A0A 80                    2831 	.db #0x80	; 128
      000A0B 10                    2832 	.db #0x10	; 16
      000A0C 80                    2833 	.db #0x80	; 128
      000A0D 20                    2834 	.db #0x20	; 32
      000A0E 00                    2835 	.db #0x00	; 0
      000A0F 00                    2836 	.db #0x00	; 0
      000A10 00                    2837 	.db #0x00	; 0
      000A11 00                    2838 	.db #0x00	; 0
      000A12 00                    2839 	.db #0x00	; 0
      000A13 00                    2840 	.db #0x00	; 0
      000A14 00                    2841 	.db #0x00	; 0
      000A15 00                    2842 	.db #0x00	; 0
      000A16 00                    2843 	.db #0x00	; 0
      000A17 00                    2844 	.db #0x00	; 0
      000A18 00                    2845 	.db #0x00	; 0
      000A19 00                    2846 	.db #0x00	; 0
      000A1A 00                    2847 	.db #0x00	; 0
      000A1B 00                    2848 	.db #0x00	; 0
      000A1C 00                    2849 	.db #0x00	; 0
      000A1D 00                    2850 	.db #0x00	; 0
      000A1E 00                    2851 	.db #0x00	; 0
      000A1F 00                    2852 	.db #0x00	; 0
      000A20 00                    2853 	.db #0x00	; 0
      000A21 00                    2854 	.db #0x00	; 0
      000A22 00                    2855 	.db #0x00	; 0
      000A23 00                    2856 	.db #0x00	; 0
      000A24 00                    2857 	.db #0x00	; 0
      000A25 00                    2858 	.db #0x00	; 0
      000A26 00                    2859 	.db #0x00	; 0
      000A27 00                    2860 	.db #0x00	; 0
      000A28                       2861 _sprite_block_small_1:
      000A28 FF                    2862 	.db #0xff	; 255
      000A29 FF                    2863 	.db #0xff	; 255
      000A2A FF                    2864 	.db #0xff	; 255
      000A2B FF                    2865 	.db #0xff	; 255
      000A2C FF                    2866 	.db #0xff	; 255
      000A2D FF                    2867 	.db #0xff	; 255
      000A2E FF                    2868 	.db #0xff	; 255
      000A2F 7E                    2869 	.db #0x7e	; 126
      000A30 00                    2870 	.db #0x00	; 0
      000A31 00                    2871 	.db #0x00	; 0
      000A32 00                    2872 	.db #0x00	; 0
      000A33 00                    2873 	.db #0x00	; 0
      000A34 00                    2874 	.db #0x00	; 0
      000A35 00                    2875 	.db #0x00	; 0
      000A36 00                    2876 	.db #0x00	; 0
      000A37 00                    2877 	.db #0x00	; 0
      000A38 00                    2878 	.db #0x00	; 0
      000A39 00                    2879 	.db #0x00	; 0
      000A3A 00                    2880 	.db #0x00	; 0
      000A3B 00                    2881 	.db #0x00	; 0
      000A3C 00                    2882 	.db #0x00	; 0
      000A3D 00                    2883 	.db #0x00	; 0
      000A3E 00                    2884 	.db #0x00	; 0
      000A3F 00                    2885 	.db #0x00	; 0
      000A40 00                    2886 	.db #0x00	; 0
      000A41 00                    2887 	.db #0x00	; 0
      000A42 00                    2888 	.db #0x00	; 0
      000A43 00                    2889 	.db #0x00	; 0
      000A44 00                    2890 	.db #0x00	; 0
      000A45 00                    2891 	.db #0x00	; 0
      000A46 00                    2892 	.db #0x00	; 0
      000A47 00                    2893 	.db #0x00	; 0
      000A48                       2894 _sprite_number_3_32x32:
      000A48 00                    2895 	.db #0x00	; 0
      000A49 01                    2896 	.db #0x01	; 1
      000A4A 02                    2897 	.db #0x02	; 2
      000A4B 04                    2898 	.db #0x04	; 4
      000A4C 08                    2899 	.db #0x08	; 8
      000A4D 08                    2900 	.db #0x08	; 8
      000A4E 08                    2901 	.db #0x08	; 8
      000A4F 08                    2902 	.db #0x08	; 8
      000A50 0F                    2903 	.db #0x0f	; 15
      000A51 00                    2904 	.db #0x00	; 0
      000A52 00                    2905 	.db #0x00	; 0
      000A53 00                    2906 	.db #0x00	; 0
      000A54 00                    2907 	.db #0x00	; 0
      000A55 00                    2908 	.db #0x00	; 0
      000A56 00                    2909 	.db #0x00	; 0
      000A57 00                    2910 	.db #0x00	; 0
      000A58 FF                    2911 	.db #0xff	; 255
      000A59 00                    2912 	.db #0x00	; 0
      000A5A 00                    2913 	.db #0x00	; 0
      000A5B 00                    2914 	.db #0x00	; 0
      000A5C 00                    2915 	.db #0x00	; 0
      000A5D 00                    2916 	.db #0x00	; 0
      000A5E 1F                    2917 	.db #0x1f	; 31
      000A5F 20                    2918 	.db #0x20	; 32
      000A60 C0                    2919 	.db #0xc0	; 192
      000A61 00                    2920 	.db #0x00	; 0
      000A62 00                    2921 	.db #0x00	; 0
      000A63 00                    2922 	.db #0x00	; 0
      000A64 00                    2923 	.db #0x00	; 0
      000A65 3F                    2924 	.db #0x3f	; 63
      000A66 20                    2925 	.db #0x20	; 32
      000A67 20                    2926 	.db #0x20	; 32
      000A68 FF                    2927 	.db #0xff	; 255
      000A69 00                    2928 	.db #0x00	; 0
      000A6A 00                    2929 	.db #0x00	; 0
      000A6B 00                    2930 	.db #0x00	; 0
      000A6C 00                    2931 	.db #0x00	; 0
      000A6D 00                    2932 	.db #0x00	; 0
      000A6E F0                    2933 	.db #0xf0	; 240
      000A6F 08                    2934 	.db #0x08	; 8
      000A70 04                    2935 	.db #0x04	; 4
      000A71 04                    2936 	.db #0x04	; 4
      000A72 04                    2937 	.db #0x04	; 4
      000A73 04                    2938 	.db #0x04	; 4
      000A74 08                    2939 	.db #0x08	; 8
      000A75 F0                    2940 	.db #0xf0	; 240
      000A76 00                    2941 	.db #0x00	; 0
      000A77 00                    2942 	.db #0x00	; 0
      000A78 00                    2943 	.db #0x00	; 0
      000A79 80                    2944 	.db #0x80	; 128
      000A7A 40                    2945 	.db #0x40	; 64
      000A7B 20                    2946 	.db #0x20	; 32
      000A7C 10                    2947 	.db #0x10	; 16
      000A7D 10                    2948 	.db #0x10	; 16
      000A7E 10                    2949 	.db #0x10	; 16
      000A7F 10                    2950 	.db #0x10	; 16
      000A80 10                    2951 	.db #0x10	; 16
      000A81 10                    2952 	.db #0x10	; 16
      000A82 10                    2953 	.db #0x10	; 16
      000A83 10                    2954 	.db #0x10	; 16
      000A84 10                    2955 	.db #0x10	; 16
      000A85 20                    2956 	.db #0x20	; 32
      000A86 40                    2957 	.db #0x40	; 64
      000A87 80                    2958 	.db #0x80	; 128
      000A88 00                    2959 	.db #0x00	; 0
      000A89 00                    2960 	.db #0x00	; 0
      000A8A 00                    2961 	.db #0x00	; 0
      000A8B 00                    2962 	.db #0x00	; 0
      000A8C 00                    2963 	.db #0x00	; 0
      000A8D 00                    2964 	.db #0x00	; 0
      000A8E 00                    2965 	.db #0x00	; 0
      000A8F 0F                    2966 	.db #0x0f	; 15
      000A90 08                    2967 	.db #0x08	; 8
      000A91 08                    2968 	.db #0x08	; 8
      000A92 08                    2969 	.db #0x08	; 8
      000A93 08                    2970 	.db #0x08	; 8
      000A94 04                    2971 	.db #0x04	; 4
      000A95 02                    2972 	.db #0x02	; 2
      000A96 01                    2973 	.db #0x01	; 1
      000A97 00                    2974 	.db #0x00	; 0
      000A98 20                    2975 	.db #0x20	; 32
      000A99 20                    2976 	.db #0x20	; 32
      000A9A 3F                    2977 	.db #0x3f	; 63
      000A9B 00                    2978 	.db #0x00	; 0
      000A9C 00                    2979 	.db #0x00	; 0
      000A9D 00                    2980 	.db #0x00	; 0
      000A9E 00                    2981 	.db #0x00	; 0
      000A9F C0                    2982 	.db #0xc0	; 192
      000AA0 20                    2983 	.db #0x20	; 32
      000AA1 1F                    2984 	.db #0x1f	; 31
      000AA2 00                    2985 	.db #0x00	; 0
      000AA3 00                    2986 	.db #0x00	; 0
      000AA4 00                    2987 	.db #0x00	; 0
      000AA5 00                    2988 	.db #0x00	; 0
      000AA6 00                    2989 	.db #0x00	; 0
      000AA7 FF                    2990 	.db #0xff	; 255
      000AA8 00                    2991 	.db #0x00	; 0
      000AA9 00                    2992 	.db #0x00	; 0
      000AAA F0                    2993 	.db #0xf0	; 240
      000AAB 08                    2994 	.db #0x08	; 8
      000AAC 04                    2995 	.db #0x04	; 4
      000AAD 04                    2996 	.db #0x04	; 4
      000AAE 04                    2997 	.db #0x04	; 4
      000AAF 04                    2998 	.db #0x04	; 4
      000AB0 08                    2999 	.db #0x08	; 8
      000AB1 F0                    3000 	.db #0xf0	; 240
      000AB2 00                    3001 	.db #0x00	; 0
      000AB3 00                    3002 	.db #0x00	; 0
      000AB4 00                    3003 	.db #0x00	; 0
      000AB5 00                    3004 	.db #0x00	; 0
      000AB6 00                    3005 	.db #0x00	; 0
      000AB7 FF                    3006 	.db #0xff	; 255
      000AB8 80                    3007 	.db #0x80	; 128
      000AB9 40                    3008 	.db #0x40	; 64
      000ABA 20                    3009 	.db #0x20	; 32
      000ABB 10                    3010 	.db #0x10	; 16
      000ABC 10                    3011 	.db #0x10	; 16
      000ABD 10                    3012 	.db #0x10	; 16
      000ABE 10                    3013 	.db #0x10	; 16
      000ABF 10                    3014 	.db #0x10	; 16
      000AC0 10                    3015 	.db #0x10	; 16
      000AC1 10                    3016 	.db #0x10	; 16
      000AC2 10                    3017 	.db #0x10	; 16
      000AC3 10                    3018 	.db #0x10	; 16
      000AC4 20                    3019 	.db #0x20	; 32
      000AC5 40                    3020 	.db #0x40	; 64
      000AC6 80                    3021 	.db #0x80	; 128
      000AC7 00                    3022 	.db #0x00	; 0
                                   3023 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3024 ;	---------------------------------
                                   3025 ; Function HideArrowSprite
                                   3026 ; ---------------------------------
      000AC8                       3027 _HideArrowSprite::
                                   3028 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000AC8 3E C0            [ 7] 3029 	ld	a, #0xc0
      000ACA F5               [11] 3030 	push	af
      000ACB 33               [ 6] 3031 	inc	sp
      000ACC 21 00 1B         [10] 3032 	ld	hl, #0x1b00
      000ACF E5               [11] 3033 	push	hl
      000AD0 CDr00r00         [17] 3034 	call	_WRTVRM
      000AD3 F1               [10] 3035 	pop	af
      000AD4 33               [ 6] 3036 	inc	sp
                                   3037 ;src\/Graphics\SpritesLogic.h:36: }
      000AD5 C9               [10] 3038 	ret
                                   3039 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3040 ;	---------------------------------
                                   3041 ; Function DrawHitSprite
                                   3042 ; ---------------------------------
      000AD6                       3043 _DrawHitSprite::
      000AD6 DD E5            [15] 3044 	push	ix
      000AD8 DD 21 00 00      [14] 3045 	ld	ix,#0
      000ADC DD 39            [15] 3046 	add	ix,sp
      000ADE 21 EC FF         [10] 3047 	ld	hl, #-20
      000AE1 39               [11] 3048 	add	hl, sp
      000AE2 F9               [ 6] 3049 	ld	sp, hl
                                   3050 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000AE3 21 00 00         [10] 3051 	ld	hl, #0
      000AE6 39               [11] 3052 	add	hl, sp
      000AE7 EB               [ 4] 3053 	ex	de, hl
      000AE8 3E 0F            [ 7] 3054 	ld	a, #0x0f
      000AEA 12               [ 7] 3055 	ld	(de), a
      000AEB 6B               [ 4] 3056 	ld	l, e
      000AEC 62               [ 4] 3057 	ld	h, d
      000AED 23               [ 6] 3058 	inc	hl
      000AEE 36 0E            [10] 3059 	ld	(hl), #0x0e
      000AF0 6B               [ 4] 3060 	ld	l, e
      000AF1 62               [ 4] 3061 	ld	h, d
      000AF2 23               [ 6] 3062 	inc	hl
      000AF3 23               [ 6] 3063 	inc	hl
      000AF4 36 09            [10] 3064 	ld	(hl), #0x09
      000AF6 6B               [ 4] 3065 	ld	l, e
      000AF7 62               [ 4] 3066 	ld	h, d
      000AF8 23               [ 6] 3067 	inc	hl
      000AF9 23               [ 6] 3068 	inc	hl
      000AFA 23               [ 6] 3069 	inc	hl
      000AFB 36 06            [10] 3070 	ld	(hl), #0x06
      000AFD 21 04 00         [10] 3071 	ld	hl, #0x0004
      000B00 19               [11] 3072 	add	hl, de
      000B01 36 06            [10] 3073 	ld	(hl), #0x06
      000B03 21 05 00         [10] 3074 	ld	hl, #0x0005
      000B06 19               [11] 3075 	add	hl, de
      000B07 36 09            [10] 3076 	ld	(hl), #0x09
      000B09 21 06 00         [10] 3077 	ld	hl, #0x0006
      000B0C 19               [11] 3078 	add	hl, de
      000B0D 36 0E            [10] 3079 	ld	(hl), #0x0e
      000B0F 21 07 00         [10] 3080 	ld	hl, #0x0007
      000B12 19               [11] 3081 	add	hl, de
      000B13 36 0F            [10] 3082 	ld	(hl), #0x0f
                                   3083 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000B15 21 08 00         [10] 3084 	ld	hl, #8
      000B18 39               [11] 3085 	add	hl, sp
      000B19 4D               [ 4] 3086 	ld	c, l
      000B1A 44               [ 4] 3087 	ld	b, h
      000B1B 36 0F            [10] 3088 	ld	(hl), #0x0f
      000B1D 69               [ 4] 3089 	ld	l, c
      000B1E 60               [ 4] 3090 	ld	h, b
      000B1F 23               [ 6] 3091 	inc	hl
      000B20 36 0E            [10] 3092 	ld	(hl), #0x0e
      000B22 69               [ 4] 3093 	ld	l, c
      000B23 60               [ 4] 3094 	ld	h, b
      000B24 23               [ 6] 3095 	inc	hl
      000B25 23               [ 6] 3096 	inc	hl
      000B26 36 03            [10] 3097 	ld	(hl), #0x03
      000B28 69               [ 4] 3098 	ld	l, c
      000B29 60               [ 4] 3099 	ld	h, b
      000B2A 23               [ 6] 3100 	inc	hl
      000B2B 23               [ 6] 3101 	inc	hl
      000B2C 23               [ 6] 3102 	inc	hl
      000B2D 36 0C            [10] 3103 	ld	(hl), #0x0c
      000B2F 21 04 00         [10] 3104 	ld	hl, #0x0004
      000B32 09               [11] 3105 	add	hl, bc
      000B33 36 0C            [10] 3106 	ld	(hl), #0x0c
      000B35 21 05 00         [10] 3107 	ld	hl, #0x0005
      000B38 09               [11] 3108 	add	hl, bc
      000B39 36 03            [10] 3109 	ld	(hl), #0x03
      000B3B 21 06 00         [10] 3110 	ld	hl, #0x0006
      000B3E 09               [11] 3111 	add	hl, bc
      000B3F 36 0E            [10] 3112 	ld	(hl), #0x0e
      000B41 21 07 00         [10] 3113 	ld	hl, #0x0007
      000B44 09               [11] 3114 	add	hl, bc
      000B45 36 0F            [10] 3115 	ld	(hl), #0x0f
                                   3116 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000B47 3A 9E FC         [13] 3117 	ld	a,(#_JIFFY + 0)
      000B4A E6 07            [ 7] 3118 	and	a, #0x07
                                   3119 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000B4C 6F               [ 4] 3120 	ld	l, a
      000B4D 83               [ 4] 3121 	add	a,e
      000B4E 5F               [ 4] 3122 	ld	e, a
      000B4F 30 01            [12] 3123 	jr	NC, 00124$
      000B51 14               [ 4] 3124 	inc	d
      000B52                       3125 00124$:
      000B52 1A               [ 7] 3126 	ld	a, (de)
      000B53 DD 77 FC         [19] 3127 	ld	-4 (ix), a
                                   3128 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000B56 26 00            [ 7] 3129 	ld	h, #0x00
      000B58 09               [11] 3130 	add	hl, bc
      000B59 7E               [ 7] 3131 	ld	a, (hl)
      000B5A DD 77 FD         [19] 3132 	ld	-3 (ix), a
                                   3133 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B5D 3E 01            [ 7] 3134 	ld	a, #0x01
      000B5F DD 96 05         [19] 3135 	sub	a, 5 (ix)
      000B62 3E 00            [ 7] 3136 	ld	a, #0x00
      000B64 17               [ 4] 3137 	rla
      000B65 DD 77 FE         [19] 3138 	ld	-2 (ix), a
                                   3139 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000B68 DD 7E 08         [19] 3140 	ld	a, 8 (ix)
      000B6B B7               [ 4] 3141 	or	a, a
      000B6C CAr37r0C         [10] 3142 	jp	Z, 00104$
                                   3143 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000B6F DD 4E 06         [19] 3144 	ld	c, 6 (ix)
      000B72 79               [ 4] 3145 	ld	a, c
      000B73 C6 F8            [ 7] 3146 	add	a, #0xf8
      000B75 DD 77 FF         [19] 3147 	ld	-1 (ix), a
      000B78 C5               [11] 3148 	push	bc
      000B79 F5               [11] 3149 	push	af
      000B7A 33               [ 6] 3150 	inc	sp
      000B7B 21 05 1B         [10] 3151 	ld	hl, #0x1b05
      000B7E E5               [11] 3152 	push	hl
      000B7F CDr00r00         [17] 3153 	call	_WRTVRM
      000B82 F1               [10] 3154 	pop	af
      000B83 33               [ 6] 3155 	inc	sp
      000B84 C1               [10] 3156 	pop	bc
                                   3157 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000B85 DD 7E 04         [19] 3158 	ld	a, 4 (ix)
      000B88 C6 FD            [ 7] 3159 	add	a, #0xfd
      000B8A 87               [ 4] 3160 	add	a, a
      000B8B 87               [ 4] 3161 	add	a, a
      000B8C C6 18            [ 7] 3162 	add	a, #0x18
      000B8E C5               [11] 3163 	push	bc
      000B8F F5               [11] 3164 	push	af
      000B90 33               [ 6] 3165 	inc	sp
      000B91 21 06 1B         [10] 3166 	ld	hl, #0x1b06
      000B94 E5               [11] 3167 	push	hl
      000B95 CDr00r00         [17] 3168 	call	_WRTVRM
      000B98 F1               [10] 3169 	pop	af
      000B99 33               [ 6] 3170 	inc	sp
      000B9A C1               [10] 3171 	pop	bc
                                   3172 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000B9B 79               [ 4] 3173 	ld	a, c
      000B9C C6 08            [ 7] 3174 	add	a, #0x08
      000B9E 47               [ 4] 3175 	ld	b, a
      000B9F C5               [11] 3176 	push	bc
      000BA0 C5               [11] 3177 	push	bc
      000BA1 33               [ 6] 3178 	inc	sp
      000BA2 21 09 1B         [10] 3179 	ld	hl, #0x1b09
      000BA5 E5               [11] 3180 	push	hl
      000BA6 CDr00r00         [17] 3181 	call	_WRTVRM
      000BA9 F1               [10] 3182 	pop	af
      000BAA 33               [ 6] 3183 	inc	sp
      000BAB 3E 04            [ 7] 3184 	ld	a, #0x04
      000BAD F5               [11] 3185 	push	af
      000BAE 33               [ 6] 3186 	inc	sp
      000BAF 21 0A 1B         [10] 3187 	ld	hl, #0x1b0a
      000BB2 E5               [11] 3188 	push	hl
      000BB3 CDr00r00         [17] 3189 	call	_WRTVRM
      000BB6 F1               [10] 3190 	pop	af
      000BB7 33               [ 6] 3191 	inc	sp
      000BB8 C1               [10] 3192 	pop	bc
                                   3193 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000BB9 79               [ 4] 3194 	ld	a, c
      000BBA C6 18            [ 7] 3195 	add	a, #0x18
      000BBC 4F               [ 4] 3196 	ld	c, a
      000BBD C5               [11] 3197 	push	bc
      000BBE 79               [ 4] 3198 	ld	a, c
      000BBF F5               [11] 3199 	push	af
      000BC0 33               [ 6] 3200 	inc	sp
      000BC1 21 0D 1B         [10] 3201 	ld	hl, #0x1b0d
      000BC4 E5               [11] 3202 	push	hl
      000BC5 CDr00r00         [17] 3203 	call	_WRTVRM
      000BC8 F1               [10] 3204 	pop	af
      000BC9 33               [ 6] 3205 	inc	sp
      000BCA 3E 08            [ 7] 3206 	ld	a, #0x08
      000BCC F5               [11] 3207 	push	af
      000BCD 33               [ 6] 3208 	inc	sp
      000BCE 21 0E 1B         [10] 3209 	ld	hl, #0x1b0e
      000BD1 E5               [11] 3210 	push	hl
      000BD2 CDr00r00         [17] 3211 	call	_WRTVRM
      000BD5 F1               [10] 3212 	pop	af
      000BD6 33               [ 6] 3213 	inc	sp
      000BD7 C1               [10] 3214 	pop	bc
                                   3215 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000BD8 DD 7E FE         [19] 3216 	ld	a, -2 (ix)
      000BDB B7               [ 4] 3217 	or	a, a
      000BDC 28 59            [12] 3218 	jr	Z, 00104$
                                   3219 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000BDE C5               [11] 3220 	push	bc
      000BDF DD 7E FF         [19] 3221 	ld	a, -1 (ix)
      000BE2 F5               [11] 3222 	push	af
      000BE3 33               [ 6] 3223 	inc	sp
      000BE4 21 11 1B         [10] 3224 	ld	hl, #0x1b11
      000BE7 E5               [11] 3225 	push	hl
      000BE8 CDr00r00         [17] 3226 	call	_WRTVRM
      000BEB F1               [10] 3227 	pop	af
      000BEC 33               [ 6] 3228 	inc	sp
      000BED C1               [10] 3229 	pop	bc
                                   3230 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000BEE DD 7E 05         [19] 3231 	ld	a, 5 (ix)
      000BF1 3D               [ 4] 3232 	dec	a
      000BF2 3D               [ 4] 3233 	dec	a
      000BF3 87               [ 4] 3234 	add	a, a
      000BF4 87               [ 4] 3235 	add	a, a
      000BF5 C6 14            [ 7] 3236 	add	a, #0x14
      000BF7 C5               [11] 3237 	push	bc
      000BF8 F5               [11] 3238 	push	af
      000BF9 33               [ 6] 3239 	inc	sp
      000BFA 21 12 1B         [10] 3240 	ld	hl, #0x1b12
      000BFD E5               [11] 3241 	push	hl
      000BFE CDr00r00         [17] 3242 	call	_WRTVRM
      000C01 F1               [10] 3243 	pop	af
      000C02 33               [ 6] 3244 	inc	sp
      000C03 C1               [10] 3245 	pop	bc
                                   3246 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000C04 C5               [11] 3247 	push	bc
      000C05 C5               [11] 3248 	push	bc
      000C06 33               [ 6] 3249 	inc	sp
      000C07 21 15 1B         [10] 3250 	ld	hl, #0x1b15
      000C0A E5               [11] 3251 	push	hl
      000C0B CDr00r00         [17] 3252 	call	_WRTVRM
      000C0E F1               [10] 3253 	pop	af
      000C0F 33               [ 6] 3254 	inc	sp
      000C10 3E 0C            [ 7] 3255 	ld	a, #0x0c
      000C12 F5               [11] 3256 	push	af
      000C13 33               [ 6] 3257 	inc	sp
      000C14 21 16 1B         [10] 3258 	ld	hl, #0x1b16
      000C17 E5               [11] 3259 	push	hl
      000C18 CDr00r00         [17] 3260 	call	_WRTVRM
      000C1B F1               [10] 3261 	pop	af
      000C1C 33               [ 6] 3262 	inc	sp
      000C1D C1               [10] 3263 	pop	bc
                                   3264 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000C1E 79               [ 4] 3265 	ld	a, c
      000C1F F5               [11] 3266 	push	af
      000C20 33               [ 6] 3267 	inc	sp
      000C21 21 19 1B         [10] 3268 	ld	hl, #0x1b19
      000C24 E5               [11] 3269 	push	hl
      000C25 CDr00r00         [17] 3270 	call	_WRTVRM
      000C28 F1               [10] 3271 	pop	af
      000C29 33               [ 6] 3272 	inc	sp
                                   3273 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000C2A 3E 10            [ 7] 3274 	ld	a, #0x10
      000C2C F5               [11] 3275 	push	af
      000C2D 33               [ 6] 3276 	inc	sp
      000C2E 21 1A 1B         [10] 3277 	ld	hl, #0x1b1a
      000C31 E5               [11] 3278 	push	hl
      000C32 CDr00r00         [17] 3279 	call	_WRTVRM
      000C35 F1               [10] 3280 	pop	af
      000C36 33               [ 6] 3281 	inc	sp
      000C37                       3282 00104$:
                                   3283 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000C37 DD 7E 07         [19] 3284 	ld	a, 7 (ix)
      000C3A F5               [11] 3285 	push	af
      000C3B 33               [ 6] 3286 	inc	sp
      000C3C 21 04 1B         [10] 3287 	ld	hl, #0x1b04
      000C3F E5               [11] 3288 	push	hl
      000C40 CDr00r00         [17] 3289 	call	_WRTVRM
      000C43 F1               [10] 3290 	pop	af
      000C44 33               [ 6] 3291 	inc	sp
                                   3292 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000C45 DD 7E FC         [19] 3293 	ld	a, -4 (ix)
      000C48 F5               [11] 3294 	push	af
      000C49 33               [ 6] 3295 	inc	sp
      000C4A 21 07 1B         [10] 3296 	ld	hl, #0x1b07
      000C4D E5               [11] 3297 	push	hl
      000C4E CDr00r00         [17] 3298 	call	_WRTVRM
      000C51 F1               [10] 3299 	pop	af
      000C52 33               [ 6] 3300 	inc	sp
                                   3301 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000C53 DD 7E 07         [19] 3302 	ld	a, 7 (ix)
      000C56 F5               [11] 3303 	push	af
      000C57 33               [ 6] 3304 	inc	sp
      000C58 21 08 1B         [10] 3305 	ld	hl, #0x1b08
      000C5B E5               [11] 3306 	push	hl
      000C5C CDr00r00         [17] 3307 	call	_WRTVRM
      000C5F F1               [10] 3308 	pop	af
      000C60 33               [ 6] 3309 	inc	sp
                                   3310 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000C61 DD 7E FC         [19] 3311 	ld	a, -4 (ix)
      000C64 F5               [11] 3312 	push	af
      000C65 33               [ 6] 3313 	inc	sp
      000C66 21 0B 1B         [10] 3314 	ld	hl, #0x1b0b
      000C69 E5               [11] 3315 	push	hl
      000C6A CDr00r00         [17] 3316 	call	_WRTVRM
      000C6D F1               [10] 3317 	pop	af
      000C6E 33               [ 6] 3318 	inc	sp
                                   3319 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000C6F DD 7E 07         [19] 3320 	ld	a, 7 (ix)
      000C72 F5               [11] 3321 	push	af
      000C73 33               [ 6] 3322 	inc	sp
      000C74 21 0C 1B         [10] 3323 	ld	hl, #0x1b0c
      000C77 E5               [11] 3324 	push	hl
      000C78 CDr00r00         [17] 3325 	call	_WRTVRM
      000C7B F1               [10] 3326 	pop	af
      000C7C 33               [ 6] 3327 	inc	sp
                                   3328 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000C7D DD 7E FC         [19] 3329 	ld	a, -4 (ix)
      000C80 F5               [11] 3330 	push	af
      000C81 33               [ 6] 3331 	inc	sp
      000C82 21 0F 1B         [10] 3332 	ld	hl, #0x1b0f
      000C85 E5               [11] 3333 	push	hl
      000C86 CDr00r00         [17] 3334 	call	_WRTVRM
      000C89 F1               [10] 3335 	pop	af
      000C8A 33               [ 6] 3336 	inc	sp
                                   3337 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000C8B DD 7E FE         [19] 3338 	ld	a, -2 (ix)
      000C8E B7               [ 4] 3339 	or	a, a
      000C8F 28 52            [12] 3340 	jr	Z, 00107$
                                   3341 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000C91 DD 7E 07         [19] 3342 	ld	a, 7 (ix)
      000C94 C6 10            [ 7] 3343 	add	a, #0x10
      000C96 47               [ 4] 3344 	ld	b, a
      000C97 C5               [11] 3345 	push	bc
      000C98 C5               [11] 3346 	push	bc
      000C99 33               [ 6] 3347 	inc	sp
      000C9A 21 10 1B         [10] 3348 	ld	hl, #0x1b10
      000C9D E5               [11] 3349 	push	hl
      000C9E CDr00r00         [17] 3350 	call	_WRTVRM
      000CA1 F1               [10] 3351 	pop	af
      000CA2 33               [ 6] 3352 	inc	sp
      000CA3 DD 7E FD         [19] 3353 	ld	a, -3 (ix)
      000CA6 F5               [11] 3354 	push	af
      000CA7 33               [ 6] 3355 	inc	sp
      000CA8 21 13 1B         [10] 3356 	ld	hl, #0x1b13
      000CAB E5               [11] 3357 	push	hl
      000CAC CDr00r00         [17] 3358 	call	_WRTVRM
      000CAF F1               [10] 3359 	pop	af
      000CB0 33               [ 6] 3360 	inc	sp
      000CB1 C1               [10] 3361 	pop	bc
                                   3362 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000CB2 C5               [11] 3363 	push	bc
      000CB3 C5               [11] 3364 	push	bc
      000CB4 33               [ 6] 3365 	inc	sp
      000CB5 21 14 1B         [10] 3366 	ld	hl, #0x1b14
      000CB8 E5               [11] 3367 	push	hl
      000CB9 CDr00r00         [17] 3368 	call	_WRTVRM
      000CBC F1               [10] 3369 	pop	af
      000CBD 33               [ 6] 3370 	inc	sp
      000CBE DD 7E FD         [19] 3371 	ld	a, -3 (ix)
      000CC1 F5               [11] 3372 	push	af
      000CC2 33               [ 6] 3373 	inc	sp
      000CC3 21 17 1B         [10] 3374 	ld	hl, #0x1b17
      000CC6 E5               [11] 3375 	push	hl
      000CC7 CDr00r00         [17] 3376 	call	_WRTVRM
      000CCA F1               [10] 3377 	pop	af
      000CCB 33               [ 6] 3378 	inc	sp
      000CCC 33               [ 6] 3379 	inc	sp
      000CCD 21 18 1B         [10] 3380 	ld	hl, #0x1b18
      000CD0 E5               [11] 3381 	push	hl
      000CD1 CDr00r00         [17] 3382 	call	_WRTVRM
      000CD4 F1               [10] 3383 	pop	af
      000CD5 33               [ 6] 3384 	inc	sp
                                   3385 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000CD6 DD 7E FD         [19] 3386 	ld	a, -3 (ix)
      000CD9 F5               [11] 3387 	push	af
      000CDA 33               [ 6] 3388 	inc	sp
      000CDB 21 1B 1B         [10] 3389 	ld	hl, #0x1b1b
      000CDE E5               [11] 3390 	push	hl
      000CDF CDr00r00         [17] 3391 	call	_WRTVRM
      000CE2 F1               [10] 3392 	pop	af
      000CE3                       3393 00107$:
                                   3394 ;src\/Graphics\SpritesLogic.h:119: }
      000CE3 DD F9            [10] 3395 	ld	sp, ix
      000CE5 DD E1            [14] 3396 	pop	ix
      000CE7 C9               [10] 3397 	ret
                                   3398 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3399 ;	---------------------------------
                                   3400 ; Function HideHitSprite
                                   3401 ; ---------------------------------
      000CE8                       3402 _HideHitSprite::
                                   3403 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000CE8 3E C0            [ 7] 3404 	ld	a, #0xc0
      000CEA F5               [11] 3405 	push	af
      000CEB 33               [ 6] 3406 	inc	sp
      000CEC 21 04 1B         [10] 3407 	ld	hl, #0x1b04
      000CEF E5               [11] 3408 	push	hl
      000CF0 CDr00r00         [17] 3409 	call	_WRTVRM
      000CF3 F1               [10] 3410 	pop	af
      000CF4 33               [ 6] 3411 	inc	sp
                                   3412 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000CF5 3E C0            [ 7] 3413 	ld	a, #0xc0
      000CF7 F5               [11] 3414 	push	af
      000CF8 33               [ 6] 3415 	inc	sp
      000CF9 21 08 1B         [10] 3416 	ld	hl, #0x1b08
      000CFC E5               [11] 3417 	push	hl
      000CFD CDr00r00         [17] 3418 	call	_WRTVRM
      000D00 F1               [10] 3419 	pop	af
      000D01 33               [ 6] 3420 	inc	sp
                                   3421 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000D02 3E C0            [ 7] 3422 	ld	a, #0xc0
      000D04 F5               [11] 3423 	push	af
      000D05 33               [ 6] 3424 	inc	sp
      000D06 21 0C 1B         [10] 3425 	ld	hl, #0x1b0c
      000D09 E5               [11] 3426 	push	hl
      000D0A CDr00r00         [17] 3427 	call	_WRTVRM
      000D0D F1               [10] 3428 	pop	af
      000D0E 33               [ 6] 3429 	inc	sp
                                   3430 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000D0F 3E C0            [ 7] 3431 	ld	a, #0xc0
      000D11 F5               [11] 3432 	push	af
      000D12 33               [ 6] 3433 	inc	sp
      000D13 21 10 1B         [10] 3434 	ld	hl, #0x1b10
      000D16 E5               [11] 3435 	push	hl
      000D17 CDr00r00         [17] 3436 	call	_WRTVRM
      000D1A F1               [10] 3437 	pop	af
      000D1B 33               [ 6] 3438 	inc	sp
                                   3439 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000D1C 3E C0            [ 7] 3440 	ld	a, #0xc0
      000D1E F5               [11] 3441 	push	af
      000D1F 33               [ 6] 3442 	inc	sp
      000D20 21 14 1B         [10] 3443 	ld	hl, #0x1b14
      000D23 E5               [11] 3444 	push	hl
      000D24 CDr00r00         [17] 3445 	call	_WRTVRM
      000D27 F1               [10] 3446 	pop	af
      000D28 33               [ 6] 3447 	inc	sp
                                   3448 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000D29 3E C0            [ 7] 3449 	ld	a, #0xc0
      000D2B F5               [11] 3450 	push	af
      000D2C 33               [ 6] 3451 	inc	sp
      000D2D 21 18 1B         [10] 3452 	ld	hl, #0x1b18
      000D30 E5               [11] 3453 	push	hl
      000D31 CDr00r00         [17] 3454 	call	_WRTVRM
      000D34 F1               [10] 3455 	pop	af
      000D35 33               [ 6] 3456 	inc	sp
                                   3457 ;src\/Graphics\SpritesLogic.h:131: }
      000D36 C9               [10] 3458 	ret
                                   3459 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3460 ;	---------------------------------
                                   3461 ; Function HideExplosionSprite
                                   3462 ; ---------------------------------
      000D37                       3463 _HideExplosionSprite::
                                   3464 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000D37 3E C0            [ 7] 3465 	ld	a, #0xc0
      000D39 F5               [11] 3466 	push	af
      000D3A 33               [ 6] 3467 	inc	sp
      000D3B 21 1C 1B         [10] 3468 	ld	hl, #0x1b1c
      000D3E E5               [11] 3469 	push	hl
      000D3F CDr00r00         [17] 3470 	call	_WRTVRM
      000D42 F1               [10] 3471 	pop	af
      000D43 33               [ 6] 3472 	inc	sp
                                   3473 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000D44 3E C0            [ 7] 3474 	ld	a, #0xc0
      000D46 F5               [11] 3475 	push	af
      000D47 33               [ 6] 3476 	inc	sp
      000D48 21 20 1B         [10] 3477 	ld	hl, #0x1b20
      000D4B E5               [11] 3478 	push	hl
      000D4C CDr00r00         [17] 3479 	call	_WRTVRM
      000D4F F1               [10] 3480 	pop	af
      000D50 33               [ 6] 3481 	inc	sp
                                   3482 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000D51 3E C0            [ 7] 3483 	ld	a, #0xc0
      000D53 F5               [11] 3484 	push	af
      000D54 33               [ 6] 3485 	inc	sp
      000D55 21 24 1B         [10] 3486 	ld	hl, #0x1b24
      000D58 E5               [11] 3487 	push	hl
      000D59 CDr00r00         [17] 3488 	call	_WRTVRM
      000D5C F1               [10] 3489 	pop	af
      000D5D 33               [ 6] 3490 	inc	sp
                                   3491 ;src\/Graphics\SpritesLogic.h:137: }
      000D5E C9               [10] 3492 	ret
                                   3493 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3494 ;	---------------------------------
                                   3495 ; Function DrawExplosionSprite
                                   3496 ; ---------------------------------
      000D5F                       3497 _DrawExplosionSprite::
      000D5F 3B               [ 6] 3498 	dec	sp
                                   3499 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000D60 FD 21 05 00      [14] 3500 	ld	iy, #5
      000D64 FD 39            [15] 3501 	add	iy, sp
      000D66 FD 6E 00         [19] 3502 	ld	l, 0 (iy)
      000D69 CB 3D            [ 8] 3503 	srl	l
      000D6B CB 3D            [ 8] 3504 	srl	l
                                   3505 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000D6D 3E 07            [ 7] 3506 	ld	a, #0x07
      000D6F 95               [ 4] 3507 	sub	a, l
      000D70 30 07            [12] 3508 	jr	NC, 00102$
                                   3509 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000D72 33               [ 6] 3510 	inc	sp
      000D73 C3r37r0D         [10] 3511 	jp	_HideExplosionSprite
      000D76 C3r45r0E         [10] 3512 	jp	00104$
      000D79                       3513 00102$:
                                   3514 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000D79 29               [11] 3515 	add	hl, hl
      000D7A 29               [11] 3516 	add	hl, hl
                                   3517 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000D7B FD 21 04 00      [14] 3518 	ld	iy, #4
      000D7F FD 39            [15] 3519 	add	iy, sp
      000D81 FD 7E 00         [19] 3520 	ld	a, 0 (iy)
      000D84 C6 F0            [ 7] 3521 	add	a, #0xf0
      000D86 67               [ 4] 3522 	ld	h, a
      000D87 E5               [11] 3523 	push	hl
      000D88 E5               [11] 3524 	push	hl
      000D89 33               [ 6] 3525 	inc	sp
      000D8A 11 1C 1B         [10] 3526 	ld	de, #0x1b1c
      000D8D D5               [11] 3527 	push	de
      000D8E CDr00r00         [17] 3528 	call	_WRTVRM
      000D91 F1               [10] 3529 	pop	af
      000D92 33               [ 6] 3530 	inc	sp
      000D93 21 05 00         [10] 3531 	ld	hl, #5
      000D96 39               [11] 3532 	add	hl, sp
      000D97 7E               [ 7] 3533 	ld	a, (hl)
      000D98 F5               [11] 3534 	push	af
      000D99 33               [ 6] 3535 	inc	sp
      000D9A 11 1D 1B         [10] 3536 	ld	de, #0x1b1d
      000D9D D5               [11] 3537 	push	de
      000D9E CDr00r00         [17] 3538 	call	_WRTVRM
      000DA1 F1               [10] 3539 	pop	af
      000DA2 33               [ 6] 3540 	inc	sp
      000DA3 E1               [10] 3541 	pop	hl
                                   3542 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000DA4 7D               [ 4] 3543 	ld	a, l
      000DA5 C6 2C            [ 7] 3544 	add	a, #0x2c
      000DA7 FD 21 00 00      [14] 3545 	ld	iy, #0
      000DAB FD 39            [15] 3546 	add	iy, sp
      000DAD FD 77 00         [19] 3547 	ld	0 (iy), a
      000DB0 E5               [11] 3548 	push	hl
      000DB1 F5               [11] 3549 	push	af
      000DB2 33               [ 6] 3550 	inc	sp
      000DB3 11 1E 1B         [10] 3551 	ld	de, #0x1b1e
      000DB6 D5               [11] 3552 	push	de
      000DB7 CDr00r00         [17] 3553 	call	_WRTVRM
      000DBA F1               [10] 3554 	pop	af
      000DBB 33               [ 6] 3555 	inc	sp
      000DBC 3E 0F            [ 7] 3556 	ld	a, #0x0f
      000DBE F5               [11] 3557 	push	af
      000DBF 33               [ 6] 3558 	inc	sp
      000DC0 11 1F 1B         [10] 3559 	ld	de, #0x1b1f
      000DC3 D5               [11] 3560 	push	de
      000DC4 CDr00r00         [17] 3561 	call	_WRTVRM
      000DC7 F1               [10] 3562 	pop	af
      000DC8 33               [ 6] 3563 	inc	sp
      000DC9 E1               [10] 3564 	pop	hl
                                   3565 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000DCA E5               [11] 3566 	push	hl
      000DCB E5               [11] 3567 	push	hl
      000DCC 33               [ 6] 3568 	inc	sp
      000DCD 11 20 1B         [10] 3569 	ld	de, #0x1b20
      000DD0 D5               [11] 3570 	push	de
      000DD1 CDr00r00         [17] 3571 	call	_WRTVRM
      000DD4 F1               [10] 3572 	pop	af
      000DD5 33               [ 6] 3573 	inc	sp
      000DD6 E1               [10] 3574 	pop	hl
                                   3575 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000DD7 FD 21 03 00      [14] 3576 	ld	iy, #3
      000DDB FD 39            [15] 3577 	add	iy, sp
      000DDD FD 6E 00         [19] 3578 	ld	l, 0 (iy)
      000DE0 7D               [ 4] 3579 	ld	a, l
      000DE1 C6 10            [ 7] 3580 	add	a, #0x10
      000DE3 E5               [11] 3581 	push	hl
      000DE4 F5               [11] 3582 	push	af
      000DE5 33               [ 6] 3583 	inc	sp
      000DE6 11 21 1B         [10] 3584 	ld	de, #0x1b21
      000DE9 D5               [11] 3585 	push	de
      000DEA CDr00r00         [17] 3586 	call	_WRTVRM
      000DED F1               [10] 3587 	pop	af
      000DEE 33               [ 6] 3588 	inc	sp
      000DEF 21 02 00         [10] 3589 	ld	hl, #2
      000DF2 39               [11] 3590 	add	hl, sp
      000DF3 7E               [ 7] 3591 	ld	a, (hl)
      000DF4 F5               [11] 3592 	push	af
      000DF5 33               [ 6] 3593 	inc	sp
      000DF6 11 22 1B         [10] 3594 	ld	de, #0x1b22
      000DF9 D5               [11] 3595 	push	de
      000DFA CDr00r00         [17] 3596 	call	_WRTVRM
      000DFD F1               [10] 3597 	pop	af
      000DFE 33               [ 6] 3598 	inc	sp
      000DFF 3E 0A            [ 7] 3599 	ld	a, #0x0a
      000E01 F5               [11] 3600 	push	af
      000E02 33               [ 6] 3601 	inc	sp
      000E03 11 23 1B         [10] 3602 	ld	de, #0x1b23
      000E06 D5               [11] 3603 	push	de
      000E07 CDr00r00         [17] 3604 	call	_WRTVRM
      000E0A F1               [10] 3605 	pop	af
      000E0B 33               [ 6] 3606 	inc	sp
      000E0C E1               [10] 3607 	pop	hl
                                   3608 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000E0D E5               [11] 3609 	push	hl
      000E0E E5               [11] 3610 	push	hl
      000E0F 33               [ 6] 3611 	inc	sp
      000E10 11 24 1B         [10] 3612 	ld	de, #0x1b24
      000E13 D5               [11] 3613 	push	de
      000E14 CDr00r00         [17] 3614 	call	_WRTVRM
      000E17 F1               [10] 3615 	pop	af
      000E18 33               [ 6] 3616 	inc	sp
      000E19 E1               [10] 3617 	pop	hl
                                   3618 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000E1A 7D               [ 4] 3619 	ld	a, l
      000E1B C6 20            [ 7] 3620 	add	a, #0x20
      000E1D F5               [11] 3621 	push	af
      000E1E 33               [ 6] 3622 	inc	sp
      000E1F 21 25 1B         [10] 3623 	ld	hl, #0x1b25
      000E22 E5               [11] 3624 	push	hl
      000E23 CDr00r00         [17] 3625 	call	_WRTVRM
      000E26 F1               [10] 3626 	pop	af
      000E27 33               [ 6] 3627 	inc	sp
                                   3628 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000E28 21 00 00         [10] 3629 	ld	hl, #0
      000E2B 39               [11] 3630 	add	hl, sp
      000E2C 7E               [ 7] 3631 	ld	a, (hl)
      000E2D F5               [11] 3632 	push	af
      000E2E 33               [ 6] 3633 	inc	sp
      000E2F 21 26 1B         [10] 3634 	ld	hl, #0x1b26
      000E32 E5               [11] 3635 	push	hl
      000E33 CDr00r00         [17] 3636 	call	_WRTVRM
      000E36 F1               [10] 3637 	pop	af
      000E37 33               [ 6] 3638 	inc	sp
                                   3639 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000E38 3E 03            [ 7] 3640 	ld	a, #0x03
      000E3A F5               [11] 3641 	push	af
      000E3B 33               [ 6] 3642 	inc	sp
      000E3C 21 27 1B         [10] 3643 	ld	hl, #0x1b27
      000E3F E5               [11] 3644 	push	hl
      000E40 CDr00r00         [17] 3645 	call	_WRTVRM
      000E43 F1               [10] 3646 	pop	af
      000E44 33               [ 6] 3647 	inc	sp
      000E45                       3648 00104$:
                                   3649 ;src\/Graphics\SpritesLogic.h:164: }
      000E45 33               [ 6] 3650 	inc	sp
      000E46 C9               [10] 3651 	ret
                                   3652 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3653 ;	---------------------------------
                                   3654 ; Function DrawChar
                                   3655 ; ---------------------------------
      000E47                       3656 _DrawChar::
      000E47 DD E5            [15] 3657 	push	ix
      000E49 DD 21 00 00      [14] 3658 	ld	ix,#0
      000E4D DD 39            [15] 3659 	add	ix,sp
                                   3660 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000E4F DD 6E 06         [19] 3661 	ld	l, 6 (ix)
      000E52 26 00            [ 7] 3662 	ld	h, #0x00
      000E54 29               [11] 3663 	add	hl, hl
      000E55 29               [11] 3664 	add	hl, hl
      000E56 29               [11] 3665 	add	hl, hl
      000E57 29               [11] 3666 	add	hl, hl
      000E58 29               [11] 3667 	add	hl, hl
      000E59 01 00 18         [10] 3668 	ld	bc, #0x1800
      000E5C 09               [11] 3669 	add	hl, bc
      000E5D DD 4E 05         [19] 3670 	ld	c, 5 (ix)
      000E60 06 00            [ 7] 3671 	ld	b, #0x00
      000E62 09               [11] 3672 	add	hl, bc
      000E63 DD 7E 04         [19] 3673 	ld	a, 4 (ix)
      000E66 F5               [11] 3674 	push	af
      000E67 33               [ 6] 3675 	inc	sp
      000E68 E5               [11] 3676 	push	hl
      000E69 CDr00r00         [17] 3677 	call	_WRTVRM
      000E6C F1               [10] 3678 	pop	af
      000E6D 33               [ 6] 3679 	inc	sp
                                   3680 ;src\/Graphics\Graphics.h:3: }
      000E6E DD E1            [14] 3681 	pop	ix
      000E70 C9               [10] 3682 	ret
                                   3683 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3684 ;	---------------------------------
                                   3685 ; Function DrawString
                                   3686 ; ---------------------------------
      000E71                       3687 _DrawString::
      000E71 DD E5            [15] 3688 	push	ix
      000E73 DD 21 00 00      [14] 3689 	ld	ix,#0
      000E77 DD 39            [15] 3690 	add	ix,sp
                                   3691 ;src\/Graphics\Graphics.h:6: while (*str) {
      000E79 DD 6E 06         [19] 3692 	ld	l, 6 (ix)
      000E7C DD 4E 04         [19] 3693 	ld	c, 4 (ix)
      000E7F DD 46 05         [19] 3694 	ld	b, 5 (ix)
      000E82                       3695 00101$:
      000E82 0A               [ 7] 3696 	ld	a, (bc)
      000E83 B7               [ 4] 3697 	or	a, a
      000E84 28 1A            [12] 3698 	jr	Z, 00104$
                                   3699 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000E86 55               [ 4] 3700 	ld	d, l
      000E87 2C               [ 4] 3701 	inc	l
      000E88 DD 75 06         [19] 3702 	ld	6 (ix), l
      000E8B 03               [ 6] 3703 	inc	bc
      000E8C C6 0F            [ 7] 3704 	add	a, #0x0f
      000E8E E5               [11] 3705 	push	hl
      000E8F C5               [11] 3706 	push	bc
      000E90 DD 66 07         [19] 3707 	ld	h, 7 (ix)
      000E93 6A               [ 4] 3708 	ld	l, d
      000E94 E5               [11] 3709 	push	hl
      000E95 F5               [11] 3710 	push	af
      000E96 33               [ 6] 3711 	inc	sp
      000E97 CDr47r0E         [17] 3712 	call	_DrawChar
      000E9A F1               [10] 3713 	pop	af
      000E9B 33               [ 6] 3714 	inc	sp
      000E9C C1               [10] 3715 	pop	bc
      000E9D E1               [10] 3716 	pop	hl
      000E9E 18 E2            [12] 3717 	jr	00101$
      000EA0                       3718 00104$:
                                   3719 ;src\/Graphics\Graphics.h:9: }
      000EA0 DD E1            [14] 3720 	pop	ix
      000EA2 C9               [10] 3721 	ret
                                   3722 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3723 ;	---------------------------------
                                   3724 ; Function DrawNumber
                                   3725 ; ---------------------------------
      000EA3                       3726 _DrawNumber::
      000EA3 DD E5            [15] 3727 	push	ix
      000EA5 DD 21 00 00      [14] 3728 	ld	ix,#0
      000EA9 DD 39            [15] 3729 	add	ix,sp
      000EAB 21 FA FF         [10] 3730 	ld	hl, #-6
      000EAE 39               [11] 3731 	add	hl, sp
      000EAF F9               [ 6] 3732 	ld	sp, hl
                                   3733 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000EB0 DD 36 FA 01      [19] 3734 	ld	-6 (ix), #0x01
                                   3735 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000EB4 DD 66 07         [19] 3736 	ld	h, 7 (ix)
      000EB7 DD 6E 06         [19] 3737 	ld	l, 6 (ix)
      000EBA E5               [11] 3738 	push	hl
      000EBB 21r57r0F         [10] 3739 	ld	hl, #___str_0
      000EBE E5               [11] 3740 	push	hl
      000EBF CDr71r0E         [17] 3741 	call	_DrawString
      000EC2 F1               [10] 3742 	pop	af
      000EC3 F1               [10] 3743 	pop	af
                                   3744 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000EC4 DD 7E 06         [19] 3745 	ld	a, 6 (ix)
      000EC7 DD 77 FF         [19] 3746 	ld	-1 (ix), a
      000ECA 1E 06            [ 7] 3747 	ld	e, #0x06
      000ECC                       3748 00109$:
      000ECC 7B               [ 4] 3749 	ld	a, e
      000ECD B7               [ 4] 3750 	or	a, a
      000ECE CAr52r0F         [10] 3751 	jp	Z, 00111$
                                   3752 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000ED1 7B               [ 4] 3753 	ld	a, e
      000ED2 3D               [ 4] 3754 	dec	a
      000ED3 D5               [11] 3755 	push	de
      000ED4 57               [ 4] 3756 	ld	d,a
      000ED5 1E 0A            [ 7] 3757 	ld	e,#0x0a
      000ED7 D5               [11] 3758 	push	de
      000ED8 CDr1Dr00         [17] 3759 	call	_Power
      000EDB F1               [10] 3760 	pop	af
      000EDC D1               [10] 3761 	pop	de
      000EDD DD 75 FB         [19] 3762 	ld	-5 (ix), l
      000EE0 DD 74 FC         [19] 3763 	ld	-4 (ix), h
                                   3764 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000EE3 D5               [11] 3765 	push	de
      000EE4 DD 6E FB         [19] 3766 	ld	l, -5 (ix)
      000EE7 DD 66 FC         [19] 3767 	ld	h, -4 (ix)
      000EEA E5               [11] 3768 	push	hl
      000EEB DD 6E 04         [19] 3769 	ld	l, 4 (ix)
      000EEE DD 66 05         [19] 3770 	ld	h, 5 (ix)
      000EF1 E5               [11] 3771 	push	hl
      000EF2 CDr00r00         [17] 3772 	call	__divuint
      000EF5 F1               [10] 3773 	pop	af
      000EF6 F1               [10] 3774 	pop	af
      000EF7 DD 75 FD         [19] 3775 	ld	-3 (ix), l
      000EFA DD 74 FE         [19] 3776 	ld	-2 (ix), h
      000EFD D1               [10] 3777 	pop	de
      000EFE DD 7E FA         [19] 3778 	ld	a, -6 (ix)
      000F01 B7               [ 4] 3779 	or	a, a
      000F02 28 0C            [12] 3780 	jr	Z, 00102$
      000F04 DD 7E FE         [19] 3781 	ld	a, -2 (ix)
      000F07 DD B6 FD         [19] 3782 	or	a, -3 (ix)
      000F0A 28 04            [12] 3783 	jr	Z, 00102$
      000F0C DD 36 FA 00      [19] 3784 	ld	-6 (ix), #0
      000F10                       3785 00102$:
                                   3786 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000F10 DD 7E FA         [19] 3787 	ld	a, -6 (ix)
      000F13 B7               [ 4] 3788 	or	a, a
      000F14 28 04            [12] 3789 	jr	Z, 00104$
      000F16 7B               [ 4] 3790 	ld	a, e
      000F17 3D               [ 4] 3791 	dec	a
      000F18 20 31            [12] 3792 	jr	NZ, 00105$
      000F1A                       3793 00104$:
                                   3794 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000F1A DD 7E FD         [19] 3795 	ld	a, -3 (ix)
      000F1D C6 3F            [ 7] 3796 	add	a, #0x3f
      000F1F D5               [11] 3797 	push	de
      000F20 DD 66 07         [19] 3798 	ld	h, 7 (ix)
      000F23 E5               [11] 3799 	push	hl
      000F24 33               [ 6] 3800 	inc	sp
      000F25 DD 66 FF         [19] 3801 	ld	h, -1 (ix)
      000F28 E5               [11] 3802 	push	hl
      000F29 33               [ 6] 3803 	inc	sp
      000F2A F5               [11] 3804 	push	af
      000F2B 33               [ 6] 3805 	inc	sp
      000F2C CDr47r0E         [17] 3806 	call	_DrawChar
      000F2F F1               [10] 3807 	pop	af
      000F30 33               [ 6] 3808 	inc	sp
      000F31 DD 6E FB         [19] 3809 	ld	l, -5 (ix)
      000F34 DD 66 FC         [19] 3810 	ld	h, -4 (ix)
      000F37 E5               [11] 3811 	push	hl
      000F38 DD 6E 04         [19] 3812 	ld	l, 4 (ix)
      000F3B DD 66 05         [19] 3813 	ld	h, 5 (ix)
      000F3E E5               [11] 3814 	push	hl
      000F3F CDr00r00         [17] 3815 	call	__moduint
      000F42 F1               [10] 3816 	pop	af
      000F43 F1               [10] 3817 	pop	af
      000F44 D1               [10] 3818 	pop	de
      000F45 DD 75 04         [19] 3819 	ld	4 (ix), l
      000F48 DD 74 05         [19] 3820 	ld	5 (ix), h
      000F4B                       3821 00105$:
                                   3822 ;src\/Graphics\Graphics.h:29: col++;
      000F4B DD 34 FF         [23] 3823 	inc	-1 (ix)
                                   3824 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000F4E 1D               [ 4] 3825 	dec	e
      000F4F C3rCCr0E         [10] 3826 	jp	00109$
      000F52                       3827 00111$:
                                   3828 ;src\/Graphics\Graphics.h:34: }
      000F52 DD F9            [10] 3829 	ld	sp, ix
      000F54 DD E1            [14] 3830 	pop	ix
      000F56 C9               [10] 3831 	ret
      000F57                       3832 ___str_0:
      000F57 20 20 20 20 20 20     3833 	.ascii "      "
      000F5D 00                    3834 	.db 0x00
                                   3835 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3836 ;	---------------------------------
                                   3837 ; Function DrawColumn
                                   3838 ; ---------------------------------
      000F5E                       3839 _DrawColumn::
      000F5E DD E5            [15] 3840 	push	ix
      000F60 DD 21 00 00      [14] 3841 	ld	ix,#0
      000F64 DD 39            [15] 3842 	add	ix,sp
      000F66 21 F9 FF         [10] 3843 	ld	hl, #-7
      000F69 39               [11] 3844 	add	hl, sp
      000F6A F9               [ 6] 3845 	ld	sp, hl
                                   3846 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000F6B DD 4E 04         [19] 3847 	ld	c, 4 (ix)
      000F6E 06 00            [ 7] 3848 	ld	b, #0x00
      000F70 21 00 18         [10] 3849 	ld	hl, #0x1800
      000F73 09               [11] 3850 	add	hl, bc
      000F74 C5               [11] 3851 	push	bc
      000F75 3E 18            [ 7] 3852 	ld	a, #0x18
      000F77 F5               [11] 3853 	push	af
      000F78 33               [ 6] 3854 	inc	sp
      000F79 E5               [11] 3855 	push	hl
      000F7A CDr00r00         [17] 3856 	call	_WRTVRM
      000F7D F1               [10] 3857 	pop	af
      000F7E 33               [ 6] 3858 	inc	sp
      000F7F C1               [10] 3859 	pop	bc
                                   3860 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000F80 21 01 18         [10] 3861 	ld	hl, #0x1801
      000F83 09               [11] 3862 	add	hl, bc
      000F84 C5               [11] 3863 	push	bc
      000F85 3E 19            [ 7] 3864 	ld	a, #0x19
      000F87 F5               [11] 3865 	push	af
      000F88 33               [ 6] 3866 	inc	sp
      000F89 E5               [11] 3867 	push	hl
      000F8A CDr00r00         [17] 3868 	call	_WRTVRM
      000F8D F1               [10] 3869 	pop	af
      000F8E 33               [ 6] 3870 	inc	sp
      000F8F C1               [10] 3871 	pop	bc
                                   3872 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000F90 21 02 18         [10] 3873 	ld	hl, #0x1802
      000F93 09               [11] 3874 	add	hl, bc
      000F94 C5               [11] 3875 	push	bc
      000F95 3E 1A            [ 7] 3876 	ld	a, #0x1a
      000F97 F5               [11] 3877 	push	af
      000F98 33               [ 6] 3878 	inc	sp
      000F99 E5               [11] 3879 	push	hl
      000F9A CDr00r00         [17] 3880 	call	_WRTVRM
      000F9D F1               [10] 3881 	pop	af
      000F9E 33               [ 6] 3882 	inc	sp
      000F9F C1               [10] 3883 	pop	bc
                                   3884 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000FA0 21 20 18         [10] 3885 	ld	hl, #0x1820
      000FA3 09               [11] 3886 	add	hl, bc
      000FA4 C5               [11] 3887 	push	bc
      000FA5 3E 1B            [ 7] 3888 	ld	a, #0x1b
      000FA7 F5               [11] 3889 	push	af
      000FA8 33               [ 6] 3890 	inc	sp
      000FA9 E5               [11] 3891 	push	hl
      000FAA CDr00r00         [17] 3892 	call	_WRTVRM
      000FAD F1               [10] 3893 	pop	af
      000FAE 33               [ 6] 3894 	inc	sp
      000FAF C1               [10] 3895 	pop	bc
                                   3896 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000FB0 21 21 18         [10] 3897 	ld	hl, #0x1821
      000FB3 09               [11] 3898 	add	hl, bc
      000FB4 C5               [11] 3899 	push	bc
      000FB5 3E 1C            [ 7] 3900 	ld	a, #0x1c
      000FB7 F5               [11] 3901 	push	af
      000FB8 33               [ 6] 3902 	inc	sp
      000FB9 E5               [11] 3903 	push	hl
      000FBA CDr00r00         [17] 3904 	call	_WRTVRM
      000FBD F1               [10] 3905 	pop	af
      000FBE 33               [ 6] 3906 	inc	sp
      000FBF C1               [10] 3907 	pop	bc
                                   3908 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000FC0 21 22 18         [10] 3909 	ld	hl, #0x1822
      000FC3 09               [11] 3910 	add	hl, bc
      000FC4 C5               [11] 3911 	push	bc
      000FC5 3E 1D            [ 7] 3912 	ld	a, #0x1d
      000FC7 F5               [11] 3913 	push	af
      000FC8 33               [ 6] 3914 	inc	sp
      000FC9 E5               [11] 3915 	push	hl
      000FCA CDr00r00         [17] 3916 	call	_WRTVRM
      000FCD F1               [10] 3917 	pop	af
      000FCE 33               [ 6] 3918 	inc	sp
      000FCF C1               [10] 3919 	pop	bc
                                   3920 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000FD0 21 40 18         [10] 3921 	ld	hl, #0x1840
      000FD3 09               [11] 3922 	add	hl, bc
      000FD4 E3               [19] 3923 	ex	(sp), hl
      000FD5 21 41 18         [10] 3924 	ld	hl, #0x1841
      000FD8 09               [11] 3925 	add	hl, bc
      000FD9 DD 75 FB         [19] 3926 	ld	-5 (ix), l
      000FDC DD 74 FC         [19] 3927 	ld	-4 (ix), h
      000FDF 21 42 18         [10] 3928 	ld	hl, #0x1842
      000FE2 09               [11] 3929 	add	hl, bc
      000FE3 DD 75 FD         [19] 3930 	ld	-3 (ix), l
      000FE6 DD 74 FE         [19] 3931 	ld	-2 (ix), h
      000FE9 DD 36 FF 00      [19] 3932 	ld	-1 (ix), #0
      000FED                       3933 00103$:
      000FED DD 7E FF         [19] 3934 	ld	a, -1 (ix)
      000FF0 D6 14            [ 7] 3935 	sub	a, #0x14
      000FF2 30 4A            [12] 3936 	jr	NC, 00101$
                                   3937 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000FF4 DD 5E FF         [19] 3938 	ld	e, -1 (ix)
      000FF7 16 00            [ 7] 3939 	ld	d, #0x00
      000FF9 EB               [ 4] 3940 	ex	de, hl
      000FFA 29               [11] 3941 	add	hl, hl
      000FFB 29               [11] 3942 	add	hl, hl
      000FFC 29               [11] 3943 	add	hl, hl
      000FFD 29               [11] 3944 	add	hl, hl
      000FFE 29               [11] 3945 	add	hl, hl
      000FFF EB               [ 4] 3946 	ex	de, hl
      001000 E1               [10] 3947 	pop	hl
      001001 E5               [11] 3948 	push	hl
      001002 19               [11] 3949 	add	hl, de
      001003 C5               [11] 3950 	push	bc
      001004 D5               [11] 3951 	push	de
      001005 3E 1E            [ 7] 3952 	ld	a, #0x1e
      001007 F5               [11] 3953 	push	af
      001008 33               [ 6] 3954 	inc	sp
      001009 E5               [11] 3955 	push	hl
      00100A CDr00r00         [17] 3956 	call	_WRTVRM
      00100D F1               [10] 3957 	pop	af
      00100E 33               [ 6] 3958 	inc	sp
      00100F D1               [10] 3959 	pop	de
      001010 C1               [10] 3960 	pop	bc
                                   3961 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      001011 DD 6E FB         [19] 3962 	ld	l, -5 (ix)
      001014 DD 66 FC         [19] 3963 	ld	h, -4 (ix)
      001017 19               [11] 3964 	add	hl, de
      001018 C5               [11] 3965 	push	bc
      001019 D5               [11] 3966 	push	de
      00101A 3E 1F            [ 7] 3967 	ld	a, #0x1f
      00101C F5               [11] 3968 	push	af
      00101D 33               [ 6] 3969 	inc	sp
      00101E E5               [11] 3970 	push	hl
      00101F CDr00r00         [17] 3971 	call	_WRTVRM
      001022 F1               [10] 3972 	pop	af
      001023 33               [ 6] 3973 	inc	sp
      001024 D1               [10] 3974 	pop	de
      001025 C1               [10] 3975 	pop	bc
                                   3976 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      001026 DD 6E FD         [19] 3977 	ld	l, -3 (ix)
      001029 DD 66 FE         [19] 3978 	ld	h, -2 (ix)
      00102C 19               [11] 3979 	add	hl, de
      00102D C5               [11] 3980 	push	bc
      00102E 3E 20            [ 7] 3981 	ld	a, #0x20
      001030 F5               [11] 3982 	push	af
      001031 33               [ 6] 3983 	inc	sp
      001032 E5               [11] 3984 	push	hl
      001033 CDr00r00         [17] 3985 	call	_WRTVRM
      001036 F1               [10] 3986 	pop	af
      001037 33               [ 6] 3987 	inc	sp
      001038 C1               [10] 3988 	pop	bc
                                   3989 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001039 DD 34 FF         [23] 3990 	inc	-1 (ix)
      00103C 18 AF            [12] 3991 	jr	00103$
      00103E                       3992 00101$:
                                   3993 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      00103E 21 00 19         [10] 3994 	ld	hl, #0x1900
      001041 09               [11] 3995 	add	hl, bc
      001042 C5               [11] 3996 	push	bc
      001043 3E 21            [ 7] 3997 	ld	a, #0x21
      001045 F5               [11] 3998 	push	af
      001046 33               [ 6] 3999 	inc	sp
      001047 E5               [11] 4000 	push	hl
      001048 CDr00r00         [17] 4001 	call	_WRTVRM
      00104B F1               [10] 4002 	pop	af
      00104C 33               [ 6] 4003 	inc	sp
      00104D C1               [10] 4004 	pop	bc
                                   4005 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      00104E 21 01 19         [10] 4006 	ld	hl, #0x1901
      001051 09               [11] 4007 	add	hl, bc
      001052 C5               [11] 4008 	push	bc
      001053 3E 22            [ 7] 4009 	ld	a, #0x22
      001055 F5               [11] 4010 	push	af
      001056 33               [ 6] 4011 	inc	sp
      001057 E5               [11] 4012 	push	hl
      001058 CDr00r00         [17] 4013 	call	_WRTVRM
      00105B F1               [10] 4014 	pop	af
      00105C 33               [ 6] 4015 	inc	sp
      00105D C1               [10] 4016 	pop	bc
                                   4017 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      00105E 21 02 19         [10] 4018 	ld	hl, #0x1902
      001061 09               [11] 4019 	add	hl, bc
      001062 C5               [11] 4020 	push	bc
      001063 3E 23            [ 7] 4021 	ld	a, #0x23
      001065 F5               [11] 4022 	push	af
      001066 33               [ 6] 4023 	inc	sp
      001067 E5               [11] 4024 	push	hl
      001068 CDr00r00         [17] 4025 	call	_WRTVRM
      00106B F1               [10] 4026 	pop	af
      00106C 33               [ 6] 4027 	inc	sp
      00106D C1               [10] 4028 	pop	bc
                                   4029 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      00106E 21 00 1A         [10] 4030 	ld	hl, #0x1a00
      001071 09               [11] 4031 	add	hl, bc
      001072 C5               [11] 4032 	push	bc
      001073 3E 21            [ 7] 4033 	ld	a, #0x21
      001075 F5               [11] 4034 	push	af
      001076 33               [ 6] 4035 	inc	sp
      001077 E5               [11] 4036 	push	hl
      001078 CDr00r00         [17] 4037 	call	_WRTVRM
      00107B F1               [10] 4038 	pop	af
      00107C 33               [ 6] 4039 	inc	sp
      00107D C1               [10] 4040 	pop	bc
                                   4041 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      00107E 21 01 1A         [10] 4042 	ld	hl, #0x1a01
      001081 09               [11] 4043 	add	hl, bc
      001082 C5               [11] 4044 	push	bc
      001083 3E 22            [ 7] 4045 	ld	a, #0x22
      001085 F5               [11] 4046 	push	af
      001086 33               [ 6] 4047 	inc	sp
      001087 E5               [11] 4048 	push	hl
      001088 CDr00r00         [17] 4049 	call	_WRTVRM
      00108B F1               [10] 4050 	pop	af
      00108C 33               [ 6] 4051 	inc	sp
      00108D C1               [10] 4052 	pop	bc
                                   4053 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      00108E 21 02 1A         [10] 4054 	ld	hl, #0x1a02
      001091 09               [11] 4055 	add	hl, bc
      001092 C5               [11] 4056 	push	bc
      001093 3E 23            [ 7] 4057 	ld	a, #0x23
      001095 F5               [11] 4058 	push	af
      001096 33               [ 6] 4059 	inc	sp
      001097 E5               [11] 4060 	push	hl
      001098 CDr00r00         [17] 4061 	call	_WRTVRM
      00109B F1               [10] 4062 	pop	af
      00109C 33               [ 6] 4063 	inc	sp
      00109D C1               [10] 4064 	pop	bc
                                   4065 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      00109E 21 C0 1A         [10] 4066 	ld	hl, #0x1ac0
      0010A1 09               [11] 4067 	add	hl, bc
      0010A2 C5               [11] 4068 	push	bc
      0010A3 3E 24            [ 7] 4069 	ld	a, #0x24
      0010A5 F5               [11] 4070 	push	af
      0010A6 33               [ 6] 4071 	inc	sp
      0010A7 E5               [11] 4072 	push	hl
      0010A8 CDr00r00         [17] 4073 	call	_WRTVRM
      0010AB F1               [10] 4074 	pop	af
      0010AC 33               [ 6] 4075 	inc	sp
      0010AD C1               [10] 4076 	pop	bc
                                   4077 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      0010AE 21 C1 1A         [10] 4078 	ld	hl, #0x1ac1
      0010B1 09               [11] 4079 	add	hl, bc
      0010B2 C5               [11] 4080 	push	bc
      0010B3 3E 25            [ 7] 4081 	ld	a, #0x25
      0010B5 F5               [11] 4082 	push	af
      0010B6 33               [ 6] 4083 	inc	sp
      0010B7 E5               [11] 4084 	push	hl
      0010B8 CDr00r00         [17] 4085 	call	_WRTVRM
      0010BB F1               [10] 4086 	pop	af
      0010BC 33               [ 6] 4087 	inc	sp
      0010BD C1               [10] 4088 	pop	bc
                                   4089 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      0010BE 21 C2 1A         [10] 4090 	ld	hl, #0x1ac2
      0010C1 09               [11] 4091 	add	hl, bc
      0010C2 C5               [11] 4092 	push	bc
      0010C3 3E 26            [ 7] 4093 	ld	a, #0x26
      0010C5 F5               [11] 4094 	push	af
      0010C6 33               [ 6] 4095 	inc	sp
      0010C7 E5               [11] 4096 	push	hl
      0010C8 CDr00r00         [17] 4097 	call	_WRTVRM
      0010CB F1               [10] 4098 	pop	af
      0010CC 33               [ 6] 4099 	inc	sp
      0010CD C1               [10] 4100 	pop	bc
                                   4101 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      0010CE 21 E0 1A         [10] 4102 	ld	hl, #0x1ae0
      0010D1 09               [11] 4103 	add	hl, bc
      0010D2 C5               [11] 4104 	push	bc
      0010D3 3E 27            [ 7] 4105 	ld	a, #0x27
      0010D5 F5               [11] 4106 	push	af
      0010D6 33               [ 6] 4107 	inc	sp
      0010D7 E5               [11] 4108 	push	hl
      0010D8 CDr00r00         [17] 4109 	call	_WRTVRM
      0010DB F1               [10] 4110 	pop	af
      0010DC 33               [ 6] 4111 	inc	sp
      0010DD C1               [10] 4112 	pop	bc
                                   4113 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      0010DE 21 E1 1A         [10] 4114 	ld	hl, #0x1ae1
      0010E1 09               [11] 4115 	add	hl, bc
      0010E2 C5               [11] 4116 	push	bc
      0010E3 3E 28            [ 7] 4117 	ld	a, #0x28
      0010E5 F5               [11] 4118 	push	af
      0010E6 33               [ 6] 4119 	inc	sp
      0010E7 E5               [11] 4120 	push	hl
      0010E8 CDr00r00         [17] 4121 	call	_WRTVRM
      0010EB F1               [10] 4122 	pop	af
      0010EC 33               [ 6] 4123 	inc	sp
      0010ED C1               [10] 4124 	pop	bc
                                   4125 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      0010EE 21 E2 1A         [10] 4126 	ld	hl, #0x1ae2
      0010F1 09               [11] 4127 	add	hl, bc
      0010F2 3E 29            [ 7] 4128 	ld	a, #0x29
      0010F4 F5               [11] 4129 	push	af
      0010F5 33               [ 6] 4130 	inc	sp
      0010F6 E5               [11] 4131 	push	hl
      0010F7 CDr00r00         [17] 4132 	call	_WRTVRM
                                   4133 ;src\/Graphics\Graphics.h:64: }
      0010FA DD F9            [10] 4134 	ld	sp,ix
      0010FC DD E1            [14] 4135 	pop	ix
      0010FE C9               [10] 4136 	ret
                                   4137 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   4138 ;	---------------------------------
                                   4139 ; Function GetNextPieceColors
                                   4140 ; ---------------------------------
      0010FF                       4141 _GetNextPieceColors::
                                   4142 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      0010FF FD 21 02 00      [14] 4143 	ld	iy, #2
      001103 FD 39            [15] 4144 	add	iy, sp
      001105 FD 7E 00         [19] 4145 	ld	a, 0 (iy)
      001108 D6 04            [ 7] 4146 	sub	a, #0x04
      00110A 28 22            [12] 4147 	jr	Z, 00102$
      00110C FD 7E 00         [19] 4148 	ld	a, 0 (iy)
      00110F D6 08            [ 7] 4149 	sub	a, #0x08
      001111 28 26            [12] 4150 	jr	Z, 00103$
      001113 FD 7E 00         [19] 4151 	ld	a, 0 (iy)
      001116 D6 0C            [ 7] 4152 	sub	a, #0x0c
      001118 28 09            [12] 4153 	jr	Z, 00101$
      00111A FD 7E 00         [19] 4154 	ld	a, 0 (iy)
      00111D D6 14            [ 7] 4155 	sub	a, #0x14
      00111F 28 23            [12] 4156 	jr	Z, 00104$
      001121 18 2C            [12] 4157 	jr	00105$
                                   4158 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      001123                       4159 00101$:
                                   4160 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      001123 3E 07            [ 7] 4161 	ld	a, #0x07
      001125 32r9Br00         [13] 4162 	ld	(#_nextPieceColor_Front), a
                                   4163 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      001128 3E 04            [ 7] 4164 	ld	a, #0x04
      00112A 32r9Cr00         [13] 4165 	ld	(#_nextPieceColor_Back), a
                                   4166 ;src\/Graphics\Graphics.h:73: break;
      00112D C9               [10] 4167 	ret
                                   4168 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      00112E                       4169 00102$:
                                   4170 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      00112E 3E 03            [ 7] 4171 	ld	a, #0x03
      001130 32r9Br00         [13] 4172 	ld	(#_nextPieceColor_Front), a
                                   4173 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      001133 3E 0C            [ 7] 4174 	ld	a, #0x0c
      001135 32r9Cr00         [13] 4175 	ld	(#_nextPieceColor_Back), a
                                   4176 ;src\/Graphics\Graphics.h:77: break;
      001138 C9               [10] 4177 	ret
                                   4178 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      001139                       4179 00103$:
                                   4180 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      001139 3E 09            [ 7] 4181 	ld	a, #0x09
      00113B 32r9Br00         [13] 4182 	ld	(#_nextPieceColor_Front), a
                                   4183 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      00113E 3E 06            [ 7] 4184 	ld	a, #0x06
      001140 32r9Cr00         [13] 4185 	ld	(#_nextPieceColor_Back), a
                                   4186 ;src\/Graphics\Graphics.h:81: break;
      001143 C9               [10] 4187 	ret
                                   4188 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      001144                       4189 00104$:
                                   4190 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      001144 3E 0B            [ 7] 4191 	ld	a, #0x0b
      001146 32r9Br00         [13] 4192 	ld	(#_nextPieceColor_Front), a
                                   4193 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      001149 3E 0A            [ 7] 4194 	ld	a, #0x0a
      00114B 32r9Cr00         [13] 4195 	ld	(#_nextPieceColor_Back), a
                                   4196 ;src\/Graphics\Graphics.h:85: break;
      00114E C9               [10] 4197 	ret
                                   4198 ;src\/Graphics\Graphics.h:86: default:
      00114F                       4199 00105$:
                                   4200 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      00114F 3E 0F            [ 7] 4201 	ld	a, #0x0f
      001151 32r9Br00         [13] 4202 	ld	(#_nextPieceColor_Front), a
                                   4203 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      001154 3E 0D            [ 7] 4204 	ld	a, #0x0d
      001156 32r9Cr00         [13] 4205 	ld	(#_nextPieceColor_Back), a
                                   4206 ;src\/Graphics\Graphics.h:89: }  
                                   4207 ;src\/Graphics\Graphics.h:90: }
      001159 C9               [10] 4208 	ret
                                   4209 ;src\/Graphics\Graphics.h:92: void DrawNextPiece() {
                                   4210 ;	---------------------------------
                                   4211 ; Function DrawNextPiece
                                   4212 ; ---------------------------------
      00115A                       4213 _DrawNextPiece::
                                   4214 ;src\/Graphics\Graphics.h:94: GetNextPieceColors(nextTopPiece);
      00115A 3Ar93r00         [13] 4215 	ld	a,(#_nextTopPiece + 0)
      00115D F5               [11] 4216 	push	af
      00115E 33               [ 6] 4217 	inc	sp
      00115F CDrFFr10         [17] 4218 	call	_GetNextPieceColors
      001162 33               [ 6] 4219 	inc	sp
                                   4220 ;src\/Graphics\Graphics.h:95: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      001163 3E 20            [ 7] 4221 	ld	a, #0x20
      001165 F5               [11] 4222 	push	af
      001166 33               [ 6] 4223 	inc	sp
      001167 21 28 1B         [10] 4224 	ld	hl, #0x1b28
      00116A E5               [11] 4225 	push	hl
      00116B CDr00r00         [17] 4226 	call	_WRTVRM
      00116E F1               [10] 4227 	pop	af
      00116F 33               [ 6] 4228 	inc	sp
                                   4229 ;src\/Graphics\Graphics.h:96: WRTVRM(SPRATT + 41, 	(4 * 8)-4);
      001170 3E 1C            [ 7] 4230 	ld	a, #0x1c
      001172 F5               [11] 4231 	push	af
      001173 33               [ 6] 4232 	inc	sp
      001174 21 29 1B         [10] 4233 	ld	hl, #0x1b29
      001177 E5               [11] 4234 	push	hl
      001178 CDr00r00         [17] 4235 	call	_WRTVRM
      00117B F1               [10] 4236 	pop	af
      00117C 33               [ 6] 4237 	inc	sp
                                   4238 ;src\/Graphics\Graphics.h:97: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      00117D 3E 4C            [ 7] 4239 	ld	a, #0x4c
      00117F F5               [11] 4240 	push	af
      001180 33               [ 6] 4241 	inc	sp
      001181 21 2A 1B         [10] 4242 	ld	hl, #0x1b2a
      001184 E5               [11] 4243 	push	hl
      001185 CDr00r00         [17] 4244 	call	_WRTVRM
      001188 F1               [10] 4245 	pop	af
      001189 33               [ 6] 4246 	inc	sp
                                   4247 ;src\/Graphics\Graphics.h:98: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      00118A 3Ar9Br00         [13] 4248 	ld	a,(#_nextPieceColor_Front + 0)
      00118D F5               [11] 4249 	push	af
      00118E 33               [ 6] 4250 	inc	sp
      00118F 21 2B 1B         [10] 4251 	ld	hl, #0x1b2b
      001192 E5               [11] 4252 	push	hl
      001193 CDr00r00         [17] 4253 	call	_WRTVRM
      001196 F1               [10] 4254 	pop	af
      001197 33               [ 6] 4255 	inc	sp
                                   4256 ;src\/Graphics\Graphics.h:99: WRTVRM(SPRATT + 44, 	(4 * 8));
      001198 3E 20            [ 7] 4257 	ld	a, #0x20
      00119A F5               [11] 4258 	push	af
      00119B 33               [ 6] 4259 	inc	sp
      00119C 21 2C 1B         [10] 4260 	ld	hl, #0x1b2c
      00119F E5               [11] 4261 	push	hl
      0011A0 CDr00r00         [17] 4262 	call	_WRTVRM
      0011A3 F1               [10] 4263 	pop	af
      0011A4 33               [ 6] 4264 	inc	sp
                                   4265 ;src\/Graphics\Graphics.h:100: WRTVRM(SPRATT + 45, 	(4 * 8)-4);
      0011A5 3E 1C            [ 7] 4266 	ld	a, #0x1c
      0011A7 F5               [11] 4267 	push	af
      0011A8 33               [ 6] 4268 	inc	sp
      0011A9 21 2D 1B         [10] 4269 	ld	hl, #0x1b2d
      0011AC E5               [11] 4270 	push	hl
      0011AD CDr00r00         [17] 4271 	call	_WRTVRM
      0011B0 F1               [10] 4272 	pop	af
      0011B1 33               [ 6] 4273 	inc	sp
                                   4274 ;src\/Graphics\Graphics.h:101: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0011B2 3E 50            [ 7] 4275 	ld	a, #0x50
      0011B4 F5               [11] 4276 	push	af
      0011B5 33               [ 6] 4277 	inc	sp
      0011B6 21 2E 1B         [10] 4278 	ld	hl, #0x1b2e
      0011B9 E5               [11] 4279 	push	hl
      0011BA CDr00r00         [17] 4280 	call	_WRTVRM
      0011BD F1               [10] 4281 	pop	af
      0011BE 33               [ 6] 4282 	inc	sp
                                   4283 ;src\/Graphics\Graphics.h:102: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      0011BF 3Ar9Cr00         [13] 4284 	ld	a,(#_nextPieceColor_Back + 0)
      0011C2 F5               [11] 4285 	push	af
      0011C3 33               [ 6] 4286 	inc	sp
      0011C4 21 2F 1B         [10] 4287 	ld	hl, #0x1b2f
      0011C7 E5               [11] 4288 	push	hl
      0011C8 CDr00r00         [17] 4289 	call	_WRTVRM
      0011CB F1               [10] 4290 	pop	af
      0011CC 33               [ 6] 4291 	inc	sp
                                   4292 ;src\/Graphics\Graphics.h:104: GetNextPieceColors(nextMidPiece);
      0011CD 3Ar94r00         [13] 4293 	ld	a,(#_nextMidPiece + 0)
      0011D0 F5               [11] 4294 	push	af
      0011D1 33               [ 6] 4295 	inc	sp
      0011D2 CDrFFr10         [17] 4296 	call	_GetNextPieceColors
      0011D5 33               [ 6] 4297 	inc	sp
                                   4298 ;src\/Graphics\Graphics.h:105: WRTVRM(SPRATT + 48, 	(5 * 8));
      0011D6 3E 28            [ 7] 4299 	ld	a, #0x28
      0011D8 F5               [11] 4300 	push	af
      0011D9 33               [ 6] 4301 	inc	sp
      0011DA 21 30 1B         [10] 4302 	ld	hl, #0x1b30
      0011DD E5               [11] 4303 	push	hl
      0011DE CDr00r00         [17] 4304 	call	_WRTVRM
      0011E1 F1               [10] 4305 	pop	af
      0011E2 33               [ 6] 4306 	inc	sp
                                   4307 ;src\/Graphics\Graphics.h:106: WRTVRM(SPRATT + 49, 	(4 * 8)-4);
      0011E3 3E 1C            [ 7] 4308 	ld	a, #0x1c
      0011E5 F5               [11] 4309 	push	af
      0011E6 33               [ 6] 4310 	inc	sp
      0011E7 21 31 1B         [10] 4311 	ld	hl, #0x1b31
      0011EA E5               [11] 4312 	push	hl
      0011EB CDr00r00         [17] 4313 	call	_WRTVRM
      0011EE F1               [10] 4314 	pop	af
      0011EF 33               [ 6] 4315 	inc	sp
                                   4316 ;src\/Graphics\Graphics.h:107: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      0011F0 3E 4C            [ 7] 4317 	ld	a, #0x4c
      0011F2 F5               [11] 4318 	push	af
      0011F3 33               [ 6] 4319 	inc	sp
      0011F4 21 32 1B         [10] 4320 	ld	hl, #0x1b32
      0011F7 E5               [11] 4321 	push	hl
      0011F8 CDr00r00         [17] 4322 	call	_WRTVRM
      0011FB F1               [10] 4323 	pop	af
      0011FC 33               [ 6] 4324 	inc	sp
                                   4325 ;src\/Graphics\Graphics.h:108: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      0011FD 3Ar9Br00         [13] 4326 	ld	a,(#_nextPieceColor_Front + 0)
      001200 F5               [11] 4327 	push	af
      001201 33               [ 6] 4328 	inc	sp
      001202 21 33 1B         [10] 4329 	ld	hl, #0x1b33
      001205 E5               [11] 4330 	push	hl
      001206 CDr00r00         [17] 4331 	call	_WRTVRM
      001209 F1               [10] 4332 	pop	af
      00120A 33               [ 6] 4333 	inc	sp
                                   4334 ;src\/Graphics\Graphics.h:109: WRTVRM(SPRATT + 52, 	(5 * 8));
      00120B 3E 28            [ 7] 4335 	ld	a, #0x28
      00120D F5               [11] 4336 	push	af
      00120E 33               [ 6] 4337 	inc	sp
      00120F 21 34 1B         [10] 4338 	ld	hl, #0x1b34
      001212 E5               [11] 4339 	push	hl
      001213 CDr00r00         [17] 4340 	call	_WRTVRM
      001216 F1               [10] 4341 	pop	af
      001217 33               [ 6] 4342 	inc	sp
                                   4343 ;src\/Graphics\Graphics.h:110: WRTVRM(SPRATT + 53, 	(4 * 8)-4);
      001218 3E 1C            [ 7] 4344 	ld	a, #0x1c
      00121A F5               [11] 4345 	push	af
      00121B 33               [ 6] 4346 	inc	sp
      00121C 21 35 1B         [10] 4347 	ld	hl, #0x1b35
      00121F E5               [11] 4348 	push	hl
      001220 CDr00r00         [17] 4349 	call	_WRTVRM
      001223 F1               [10] 4350 	pop	af
      001224 33               [ 6] 4351 	inc	sp
                                   4352 ;src\/Graphics\Graphics.h:111: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001225 3E 50            [ 7] 4353 	ld	a, #0x50
      001227 F5               [11] 4354 	push	af
      001228 33               [ 6] 4355 	inc	sp
      001229 21 36 1B         [10] 4356 	ld	hl, #0x1b36
      00122C E5               [11] 4357 	push	hl
      00122D CDr00r00         [17] 4358 	call	_WRTVRM
      001230 F1               [10] 4359 	pop	af
      001231 33               [ 6] 4360 	inc	sp
                                   4361 ;src\/Graphics\Graphics.h:112: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      001232 3Ar9Cr00         [13] 4362 	ld	a,(#_nextPieceColor_Back + 0)
      001235 F5               [11] 4363 	push	af
      001236 33               [ 6] 4364 	inc	sp
      001237 21 37 1B         [10] 4365 	ld	hl, #0x1b37
      00123A E5               [11] 4366 	push	hl
      00123B CDr00r00         [17] 4367 	call	_WRTVRM
      00123E F1               [10] 4368 	pop	af
      00123F 33               [ 6] 4369 	inc	sp
                                   4370 ;src\/Graphics\Graphics.h:114: GetNextPieceColors(nextBottomPiece);
      001240 3Ar95r00         [13] 4371 	ld	a,(#_nextBottomPiece + 0)
      001243 F5               [11] 4372 	push	af
      001244 33               [ 6] 4373 	inc	sp
      001245 CDrFFr10         [17] 4374 	call	_GetNextPieceColors
      001248 33               [ 6] 4375 	inc	sp
                                   4376 ;src\/Graphics\Graphics.h:115: WRTVRM(SPRATT + 56, 	(6 * 8));
      001249 3E 30            [ 7] 4377 	ld	a, #0x30
      00124B F5               [11] 4378 	push	af
      00124C 33               [ 6] 4379 	inc	sp
      00124D 21 38 1B         [10] 4380 	ld	hl, #0x1b38
      001250 E5               [11] 4381 	push	hl
      001251 CDr00r00         [17] 4382 	call	_WRTVRM
      001254 F1               [10] 4383 	pop	af
      001255 33               [ 6] 4384 	inc	sp
                                   4385 ;src\/Graphics\Graphics.h:116: WRTVRM(SPRATT + 57, 	(4 * 8)-4);
      001256 3E 1C            [ 7] 4386 	ld	a, #0x1c
      001258 F5               [11] 4387 	push	af
      001259 33               [ 6] 4388 	inc	sp
      00125A 21 39 1B         [10] 4389 	ld	hl, #0x1b39
      00125D E5               [11] 4390 	push	hl
      00125E CDr00r00         [17] 4391 	call	_WRTVRM
      001261 F1               [10] 4392 	pop	af
      001262 33               [ 6] 4393 	inc	sp
                                   4394 ;src\/Graphics\Graphics.h:117: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      001263 3E 4C            [ 7] 4395 	ld	a, #0x4c
      001265 F5               [11] 4396 	push	af
      001266 33               [ 6] 4397 	inc	sp
      001267 21 3A 1B         [10] 4398 	ld	hl, #0x1b3a
      00126A E5               [11] 4399 	push	hl
      00126B CDr00r00         [17] 4400 	call	_WRTVRM
      00126E F1               [10] 4401 	pop	af
      00126F 33               [ 6] 4402 	inc	sp
                                   4403 ;src\/Graphics\Graphics.h:118: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      001270 3Ar9Br00         [13] 4404 	ld	a,(#_nextPieceColor_Front + 0)
      001273 F5               [11] 4405 	push	af
      001274 33               [ 6] 4406 	inc	sp
      001275 21 3B 1B         [10] 4407 	ld	hl, #0x1b3b
      001278 E5               [11] 4408 	push	hl
      001279 CDr00r00         [17] 4409 	call	_WRTVRM
      00127C F1               [10] 4410 	pop	af
      00127D 33               [ 6] 4411 	inc	sp
                                   4412 ;src\/Graphics\Graphics.h:119: WRTVRM(SPRATT + 60, 	(6 * 8));
      00127E 3E 30            [ 7] 4413 	ld	a, #0x30
      001280 F5               [11] 4414 	push	af
      001281 33               [ 6] 4415 	inc	sp
      001282 21 3C 1B         [10] 4416 	ld	hl, #0x1b3c
      001285 E5               [11] 4417 	push	hl
      001286 CDr00r00         [17] 4418 	call	_WRTVRM
      001289 F1               [10] 4419 	pop	af
      00128A 33               [ 6] 4420 	inc	sp
                                   4421 ;src\/Graphics\Graphics.h:120: WRTVRM(SPRATT + 61, 	(4 * 8)-4);
      00128B 3E 1C            [ 7] 4422 	ld	a, #0x1c
      00128D F5               [11] 4423 	push	af
      00128E 33               [ 6] 4424 	inc	sp
      00128F 21 3D 1B         [10] 4425 	ld	hl, #0x1b3d
      001292 E5               [11] 4426 	push	hl
      001293 CDr00r00         [17] 4427 	call	_WRTVRM
      001296 F1               [10] 4428 	pop	af
      001297 33               [ 6] 4429 	inc	sp
                                   4430 ;src\/Graphics\Graphics.h:121: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001298 3E 50            [ 7] 4431 	ld	a, #0x50
      00129A F5               [11] 4432 	push	af
      00129B 33               [ 6] 4433 	inc	sp
      00129C 21 3E 1B         [10] 4434 	ld	hl, #0x1b3e
      00129F E5               [11] 4435 	push	hl
      0012A0 CDr00r00         [17] 4436 	call	_WRTVRM
      0012A3 F1               [10] 4437 	pop	af
      0012A4 33               [ 6] 4438 	inc	sp
                                   4439 ;src\/Graphics\Graphics.h:122: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      0012A5 3Ar9Cr00         [13] 4440 	ld	a,(#_nextPieceColor_Back + 0)
      0012A8 F5               [11] 4441 	push	af
      0012A9 33               [ 6] 4442 	inc	sp
      0012AA 21 3F 1B         [10] 4443 	ld	hl, #0x1b3f
      0012AD E5               [11] 4444 	push	hl
      0012AE CDr00r00         [17] 4445 	call	_WRTVRM
      0012B1 F1               [10] 4446 	pop	af
      0012B2 33               [ 6] 4447 	inc	sp
                                   4448 ;src\/Graphics\Graphics.h:133: }
      0012B3 C9               [10] 4449 	ret
                                   4450 ;src\/Graphics\Graphics.h:135: void DrawScore() {
                                   4451 ;	---------------------------------
                                   4452 ; Function DrawScore
                                   4453 ; ---------------------------------
      0012B4                       4454 _DrawScore::
      0012B4 DD E5            [15] 4455 	push	ix
      0012B6 DD 21 00 00      [14] 4456 	ld	ix,#0
      0012BA DD 39            [15] 4457 	add	ix,sp
      0012BC F5               [11] 4458 	push	af
                                   4459 ;src\/Graphics\Graphics.h:136: byte bgCounter = 0, bgColor;
      0012BD DD 36 FE 00      [19] 4460 	ld	-2 (ix), #0
                                   4461 ;src\/Graphics\Graphics.h:140: if(newLevel) {
      0012C1 3Ar07r00         [13] 4462 	ld	a,(#_newLevel + 0)
      0012C4 B7               [ 4] 4463 	or	a, a
      0012C5 CArC0r13         [10] 4464 	jp	Z, 00119$
                                   4465 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      0012C8 DD 36 FF 00      [19] 4466 	ld	-1 (ix), #0
      0012CC                       4467 00121$:
      0012CC DD 7E FF         [19] 4468 	ld	a, -1 (ix)
      0012CF D6 3C            [ 7] 4469 	sub	a, #0x3c
      0012D1 D2rC0r13         [10] 4470 	jp	NC, 00119$
                                   4471 ;src\/Graphics\Graphics.h:142: lastJiffy = JIFFY;
      0012D4 ED 4B 9E FC      [20] 4472 	ld	bc, (_JIFFY)
                                   4473 ;src\/Graphics\Graphics.h:143: while(lastJiffy == JIFFY) { }
      0012D8                       4474 00101$:
      0012D8 2A 9E FC         [16] 4475 	ld	hl, (_JIFFY)
      0012DB BF               [ 4] 4476 	cp	a, a
      0012DC ED 42            [15] 4477 	sbc	hl, bc
      0012DE 28 F8            [12] 4478 	jr	Z, 00101$
                                   4479 ;src\/Graphics\Graphics.h:145: DrawExplosionSprite(26 * 8, 10 * 8, i);
      0012E0 DD 56 FF         [19] 4480 	ld	d, -1 (ix)
      0012E3 1E 50            [ 7] 4481 	ld	e,#0x50
      0012E5 D5               [11] 4482 	push	de
      0012E6 3E D0            [ 7] 4483 	ld	a, #0xd0
      0012E8 F5               [11] 4484 	push	af
      0012E9 33               [ 6] 4485 	inc	sp
      0012EA CDr5Fr0D         [17] 4486 	call	_DrawExplosionSprite
      0012ED F1               [10] 4487 	pop	af
      0012EE 33               [ 6] 4488 	inc	sp
                                   4489 ;src\/Graphics\Graphics.h:147: if(JIFFY & 0b00000110) {
      0012EF 2A 9E FC         [16] 4490 	ld	hl, (_JIFFY)
      0012F2 7D               [ 4] 4491 	ld	a, l
      0012F3 E6 06            [ 7] 4492 	and	a, #0x06
      0012F5 CArA0r13         [10] 4493 	jp	Z,00115$
                                   4494 ;src\/Graphics\Graphics.h:149: DrawString(" LEVEL", 26, 10);
      0012F8 11 1A 0A         [10] 4495 	ld	de, #0x0a1a
      0012FB D5               [11] 4496 	push	de
      0012FC 21r42r14         [10] 4497 	ld	hl, #___str_1
      0012FF E5               [11] 4498 	push	hl
      001300 CDr71r0E         [17] 4499 	call	_DrawString
      001303 F1               [10] 4500 	pop	af
      001304 F1               [10] 4501 	pop	af
                                   4502 ;src\/Graphics\Graphics.h:150: DrawNumber(level, 26, 11);
      001305 3Ar06r00         [13] 4503 	ld	a, (#_level + 0)
      001308 4F               [ 4] 4504 	ld	c, a
      001309 06 00            [ 7] 4505 	ld	b, #0x00
      00130B 11 1A 0B         [10] 4506 	ld	de, #0x0b1a
      00130E D5               [11] 4507 	push	de
      00130F C5               [11] 4508 	push	bc
      001310 CDrA3r0E         [17] 4509 	call	_DrawNumber
      001313 F1               [10] 4510 	pop	af
      001314 F1               [10] 4511 	pop	af
                                   4512 ;src\/Graphics\Graphics.h:156: switch(bgCounter++) {
      001315 DD 4E FE         [19] 4513 	ld	c, -2 (ix)
      001318 DD 34 FE         [23] 4514 	inc	-2 (ix)
      00131B 3E 07            [ 7] 4515 	ld	a, #0x07
      00131D 91               [ 4] 4516 	sub	a, c
      00131E 38 45            [12] 4517 	jr	C, 00112$
      001320 06 00            [ 7] 4518 	ld	b, #0x00
      001322 21r29r13         [10] 4519 	ld	hl, #00163$
      001325 09               [11] 4520 	add	hl, bc
      001326 09               [11] 4521 	add	hl, bc
      001327 09               [11] 4522 	add	hl, bc
      001328 E9               [ 4] 4523 	jp	(hl)
      001329                       4524 00163$:
      001329 C3r41r13         [10] 4525 	jp	00104$
      00132C C3r45r13         [10] 4526 	jp	00105$
      00132F C3r49r13         [10] 4527 	jp	00106$
      001332 C3r4Dr13         [10] 4528 	jp	00107$
      001335 C3r51r13         [10] 4529 	jp	00108$
      001338 C3r55r13         [10] 4530 	jp	00109$
      00133B C3r59r13         [10] 4531 	jp	00110$
      00133E C3r5Dr13         [10] 4532 	jp	00111$
                                   4533 ;src\/Graphics\Graphics.h:157: case 0:
      001341                       4534 00104$:
                                   4535 ;src\/Graphics\Graphics.h:158: bgColor = 0x14;
      001341 0E 14            [ 7] 4536 	ld	c, #0x14
                                   4537 ;src\/Graphics\Graphics.h:159: break;
      001343 18 22            [12] 4538 	jr	00113$
                                   4539 ;src\/Graphics\Graphics.h:160: case 1:
      001345                       4540 00105$:
                                   4541 ;src\/Graphics\Graphics.h:161: bgColor = 0x15;
      001345 0E 15            [ 7] 4542 	ld	c, #0x15
                                   4543 ;src\/Graphics\Graphics.h:162: break;
      001347 18 1E            [12] 4544 	jr	00113$
                                   4545 ;src\/Graphics\Graphics.h:163: case 2:
      001349                       4546 00106$:
                                   4547 ;src\/Graphics\Graphics.h:164: bgColor = 0x17;
      001349 0E 17            [ 7] 4548 	ld	c, #0x17
                                   4549 ;src\/Graphics\Graphics.h:165: break;
      00134B 18 1A            [12] 4550 	jr	00113$
                                   4551 ;src\/Graphics\Graphics.h:166: case 3:
      00134D                       4552 00107$:
                                   4553 ;src\/Graphics\Graphics.h:167: bgColor = 0x1e;
      00134D 0E 1E            [ 7] 4554 	ld	c, #0x1e
                                   4555 ;src\/Graphics\Graphics.h:168: break;
      00134F 18 16            [12] 4556 	jr	00113$
                                   4557 ;src\/Graphics\Graphics.h:169: case 4:
      001351                       4558 00108$:
                                   4559 ;src\/Graphics\Graphics.h:170: bgColor = 0x1f;
      001351 0E 1F            [ 7] 4560 	ld	c, #0x1f
                                   4561 ;src\/Graphics\Graphics.h:171: break;
      001353 18 12            [12] 4562 	jr	00113$
                                   4563 ;src\/Graphics\Graphics.h:172: case 5:
      001355                       4564 00109$:
                                   4565 ;src\/Graphics\Graphics.h:173: bgColor = 0x1e;
      001355 0E 1E            [ 7] 4566 	ld	c, #0x1e
                                   4567 ;src\/Graphics\Graphics.h:174: break;
      001357 18 0E            [12] 4568 	jr	00113$
                                   4569 ;src\/Graphics\Graphics.h:175: case 6:
      001359                       4570 00110$:
                                   4571 ;src\/Graphics\Graphics.h:176: bgColor = 0x17;
      001359 0E 17            [ 7] 4572 	ld	c, #0x17
                                   4573 ;src\/Graphics\Graphics.h:177: break;
      00135B 18 0A            [12] 4574 	jr	00113$
                                   4575 ;src\/Graphics\Graphics.h:178: case 7:
      00135D                       4576 00111$:
                                   4577 ;src\/Graphics\Graphics.h:179: bgColor = 0x15;
      00135D 0E 15            [ 7] 4578 	ld	c, #0x15
                                   4579 ;src\/Graphics\Graphics.h:180: bgCounter = 0;
      00135F DD 36 FE 00      [19] 4580 	ld	-2 (ix), #0
                                   4581 ;src\/Graphics\Graphics.h:181: break;
      001363 18 02            [12] 4582 	jr	00113$
                                   4583 ;src\/Graphics\Graphics.h:182: default:
      001365                       4584 00112$:
                                   4585 ;src\/Graphics\Graphics.h:183: bgColor = 0x11;
      001365 0E 11            [ 7] 4586 	ld	c, #0x11
                                   4587 ;src\/Graphics\Graphics.h:185: }
      001367                       4588 00113$:
                                   4589 ;src\/Graphics\Graphics.h:186: FILVRM(CLRTBL, 8 * 4, bgColor);
      001367 C5               [11] 4590 	push	bc
      001368 79               [ 4] 4591 	ld	a, c
      001369 F5               [11] 4592 	push	af
      00136A 33               [ 6] 4593 	inc	sp
      00136B 21 20 00         [10] 4594 	ld	hl, #0x0020
      00136E E5               [11] 4595 	push	hl
      00136F 21 00 20         [10] 4596 	ld	hl, #0x2000
      001372 E5               [11] 4597 	push	hl
      001373 CDr00r00         [17] 4598 	call	_FILVRM
      001376 F1               [10] 4599 	pop	af
      001377 F1               [10] 4600 	pop	af
      001378 33               [ 6] 4601 	inc	sp
      001379 C1               [10] 4602 	pop	bc
                                   4603 ;src\/Graphics\Graphics.h:187: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      00137A C5               [11] 4604 	push	bc
      00137B 79               [ 4] 4605 	ld	a, c
      00137C F5               [11] 4606 	push	af
      00137D 33               [ 6] 4607 	inc	sp
      00137E 21 20 00         [10] 4608 	ld	hl, #0x0020
      001381 E5               [11] 4609 	push	hl
      001382 21 00 28         [10] 4610 	ld	hl, #0x2800
      001385 E5               [11] 4611 	push	hl
      001386 CDr00r00         [17] 4612 	call	_FILVRM
      001389 F1               [10] 4613 	pop	af
      00138A F1               [10] 4614 	pop	af
      00138B 33               [ 6] 4615 	inc	sp
      00138C C1               [10] 4616 	pop	bc
                                   4617 ;src\/Graphics\Graphics.h:188: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      00138D 79               [ 4] 4618 	ld	a, c
      00138E F5               [11] 4619 	push	af
      00138F 33               [ 6] 4620 	inc	sp
      001390 21 20 00         [10] 4621 	ld	hl, #0x0020
      001393 E5               [11] 4622 	push	hl
      001394 21 00 30         [10] 4623 	ld	hl, #0x3000
      001397 E5               [11] 4624 	push	hl
      001398 CDr00r00         [17] 4625 	call	_FILVRM
      00139B F1               [10] 4626 	pop	af
      00139C F1               [10] 4627 	pop	af
      00139D 33               [ 6] 4628 	inc	sp
      00139E 18 1A            [12] 4629 	jr	00122$
      0013A0                       4630 00115$:
                                   4631 ;src\/Graphics\Graphics.h:193: DrawString("      ", 26, 10);
      0013A0 11 1A 0A         [10] 4632 	ld	de, #0x0a1a
      0013A3 D5               [11] 4633 	push	de
      0013A4 21r49r14         [10] 4634 	ld	hl, #___str_2
      0013A7 E5               [11] 4635 	push	hl
      0013A8 CDr71r0E         [17] 4636 	call	_DrawString
      0013AB F1               [10] 4637 	pop	af
      0013AC F1               [10] 4638 	pop	af
                                   4639 ;src\/Graphics\Graphics.h:194: DrawString("      ", 26, 11);
      0013AD 11 1A 0B         [10] 4640 	ld	de, #0x0b1a
      0013B0 D5               [11] 4641 	push	de
      0013B1 21r49r14         [10] 4642 	ld	hl, #___str_2
      0013B4 E5               [11] 4643 	push	hl
      0013B5 CDr71r0E         [17] 4644 	call	_DrawString
      0013B8 F1               [10] 4645 	pop	af
      0013B9 F1               [10] 4646 	pop	af
      0013BA                       4647 00122$:
                                   4648 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      0013BA DD 34 FF         [23] 4649 	inc	-1 (ix)
      0013BD C3rCCr12         [10] 4650 	jp	00121$
      0013C0                       4651 00119$:
                                   4652 ;src\/Graphics\Graphics.h:200: newLevel = FALSE;
      0013C0 21r07r00         [10] 4653 	ld	hl, #_newLevel
      0013C3 36 00            [10] 4654 	ld	(hl), #0x00
                                   4655 ;src\/Graphics\Graphics.h:203: FILVRM(CLRTBL, 8 * 4, 0x14);
      0013C5 3E 14            [ 7] 4656 	ld	a, #0x14
      0013C7 F5               [11] 4657 	push	af
      0013C8 33               [ 6] 4658 	inc	sp
      0013C9 21 20 00         [10] 4659 	ld	hl, #0x0020
      0013CC E5               [11] 4660 	push	hl
      0013CD 21 00 20         [10] 4661 	ld	hl, #0x2000
      0013D0 E5               [11] 4662 	push	hl
      0013D1 CDr00r00         [17] 4663 	call	_FILVRM
      0013D4 F1               [10] 4664 	pop	af
      0013D5 F1               [10] 4665 	pop	af
      0013D6 33               [ 6] 4666 	inc	sp
                                   4667 ;src\/Graphics\Graphics.h:204: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      0013D7 3E 14            [ 7] 4668 	ld	a, #0x14
      0013D9 F5               [11] 4669 	push	af
      0013DA 33               [ 6] 4670 	inc	sp
      0013DB 21 20 00         [10] 4671 	ld	hl, #0x0020
      0013DE E5               [11] 4672 	push	hl
      0013DF 21 00 28         [10] 4673 	ld	hl, #0x2800
      0013E2 E5               [11] 4674 	push	hl
      0013E3 CDr00r00         [17] 4675 	call	_FILVRM
      0013E6 F1               [10] 4676 	pop	af
      0013E7 F1               [10] 4677 	pop	af
      0013E8 33               [ 6] 4678 	inc	sp
                                   4679 ;src\/Graphics\Graphics.h:205: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      0013E9 3E 14            [ 7] 4680 	ld	a, #0x14
      0013EB F5               [11] 4681 	push	af
      0013EC 33               [ 6] 4682 	inc	sp
      0013ED 21 20 00         [10] 4683 	ld	hl, #0x0020
      0013F0 E5               [11] 4684 	push	hl
      0013F1 21 00 30         [10] 4685 	ld	hl, #0x3000
      0013F4 E5               [11] 4686 	push	hl
      0013F5 CDr00r00         [17] 4687 	call	_FILVRM
      0013F8 F1               [10] 4688 	pop	af
      0013F9 F1               [10] 4689 	pop	af
      0013FA 33               [ 6] 4690 	inc	sp
                                   4691 ;src\/Graphics\Graphics.h:207: DrawString("NEXT", 2, 2);
      0013FB 11 02 02         [10] 4692 	ld	de, #0x0202
      0013FE D5               [11] 4693 	push	de
      0013FF 21r50r14         [10] 4694 	ld	hl, #___str_3
      001402 E5               [11] 4695 	push	hl
      001403 CDr71r0E         [17] 4696 	call	_DrawString
      001406 F1               [10] 4697 	pop	af
      001407 F1               [10] 4698 	pop	af
                                   4699 ;src\/Graphics\Graphics.h:209: DrawString(" LEVEL", 26, 10);
      001408 11 1A 0A         [10] 4700 	ld	de, #0x0a1a
      00140B D5               [11] 4701 	push	de
      00140C 21r42r14         [10] 4702 	ld	hl, #___str_1
      00140F E5               [11] 4703 	push	hl
      001410 CDr71r0E         [17] 4704 	call	_DrawString
      001413 F1               [10] 4705 	pop	af
      001414 F1               [10] 4706 	pop	af
                                   4707 ;src\/Graphics\Graphics.h:210: DrawString("BLOCKS", 26, 18);
      001415 11 1A 12         [10] 4708 	ld	de, #0x121a
      001418 D5               [11] 4709 	push	de
      001419 21r55r14         [10] 4710 	ld	hl, #___str_4
      00141C E5               [11] 4711 	push	hl
      00141D CDr71r0E         [17] 4712 	call	_DrawString
      001420 F1               [10] 4713 	pop	af
      001421 F1               [10] 4714 	pop	af
                                   4715 ;src\/Graphics\Graphics.h:213: DrawNumber(level, 26, 11);
      001422 3Ar06r00         [13] 4716 	ld	a, (#_level + 0)
      001425 4F               [ 4] 4717 	ld	c, a
      001426 06 00            [ 7] 4718 	ld	b, #0x00
      001428 11 1A 0B         [10] 4719 	ld	de, #0x0b1a
      00142B D5               [11] 4720 	push	de
      00142C C5               [11] 4721 	push	bc
      00142D CDrA3r0E         [17] 4722 	call	_DrawNumber
      001430 F1               [10] 4723 	pop	af
      001431 F1               [10] 4724 	pop	af
                                   4725 ;src\/Graphics\Graphics.h:214: DrawNumber(blocksRemoved, 26, 19);
      001432 11 1A 13         [10] 4726 	ld	de, #0x131a
      001435 D5               [11] 4727 	push	de
      001436 2Ar04r00         [16] 4728 	ld	hl, (_blocksRemoved)
      001439 E5               [11] 4729 	push	hl
      00143A CDrA3r0E         [17] 4730 	call	_DrawNumber
                                   4731 ;src\/Graphics\Graphics.h:217: }
      00143D DD F9            [10] 4732 	ld	sp,ix
      00143F DD E1            [14] 4733 	pop	ix
      001441 C9               [10] 4734 	ret
      001442                       4735 ___str_1:
      001442 20 4C 45 56 45 4C     4736 	.ascii " LEVEL"
      001448 00                    4737 	.db 0x00
      001449                       4738 ___str_2:
      001449 20 20 20 20 20 20     4739 	.ascii "      "
      00144F 00                    4740 	.db 0x00
      001450                       4741 ___str_3:
      001450 4E 45 58 54           4742 	.ascii "NEXT"
      001454 00                    4743 	.db 0x00
      001455                       4744 ___str_4:
      001455 42 4C 4F 43 4B 53     4745 	.ascii "BLOCKS"
      00145B 00                    4746 	.db 0x00
                                   4747 ;src\/Graphics\Graphics.h:219: void DrawBackground() {
                                   4748 ;	---------------------------------
                                   4749 ; Function DrawBackground
                                   4750 ; ---------------------------------
      00145C                       4751 _DrawBackground::
                                   4752 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      00145C 01 00 00         [10] 4753 	ld	bc, #0x0000
      00145F                       4754 00103$:
      00145F 78               [ 4] 4755 	ld	a, b
      001460 EE 80            [ 7] 4756 	xor	a, #0x80
      001462 D6 83            [ 7] 4757 	sub	a, #0x83
      001464 30 12            [12] 4758 	jr	NC, 00101$
                                   4759 ;src\/Graphics\Graphics.h:222: WRTVRM(NAMTBL + i, EMPTY); // test
      001466 21 00 18         [10] 4760 	ld	hl, #0x1800
      001469 09               [11] 4761 	add	hl, bc
      00146A C5               [11] 4762 	push	bc
      00146B AF               [ 4] 4763 	xor	a, a
      00146C F5               [11] 4764 	push	af
      00146D 33               [ 6] 4765 	inc	sp
      00146E E5               [11] 4766 	push	hl
      00146F CDr00r00         [17] 4767 	call	_WRTVRM
      001472 F1               [10] 4768 	pop	af
      001473 33               [ 6] 4769 	inc	sp
      001474 C1               [10] 4770 	pop	bc
                                   4771 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      001475 03               [ 6] 4772 	inc	bc
      001476 18 E7            [12] 4773 	jr	00103$
      001478                       4774 00101$:
                                   4775 ;src\/Graphics\Graphics.h:225: DrawColumn(7);
      001478 3E 07            [ 7] 4776 	ld	a, #0x07
      00147A F5               [11] 4777 	push	af
      00147B 33               [ 6] 4778 	inc	sp
      00147C CDr5Er0F         [17] 4779 	call	_DrawColumn
      00147F 33               [ 6] 4780 	inc	sp
                                   4781 ;src\/Graphics\Graphics.h:226: DrawColumn(22);
      001480 3E 16            [ 7] 4782 	ld	a, #0x16
      001482 F5               [11] 4783 	push	af
      001483 33               [ 6] 4784 	inc	sp
      001484 CDr5Er0F         [17] 4785 	call	_DrawColumn
      001487 33               [ 6] 4786 	inc	sp
                                   4787 ;src\/Graphics\Graphics.h:228: DrawScore();
                                   4788 ;src\/Graphics\Graphics.h:264: }
      001488 C3rB4r12         [10] 4789 	jp	_DrawScore
                                   4790 ;src\/Graphics\Graphics.h:266: void InitVRAM() {
                                   4791 ;	---------------------------------
                                   4792 ; Function InitVRAM
                                   4793 ; ---------------------------------
      00148B                       4794 _InitVRAM::
      00148B DD E5            [15] 4795 	push	ix
      00148D DD 21 00 00      [14] 4796 	ld	ix,#0
      001491 DD 39            [15] 4797 	add	ix,sp
      001493 3B               [ 6] 4798 	dec	sp
                                   4799 ;src\/Graphics\Graphics.h:271: CLIKSW = 0;	// disable keyboard sound
      001494 21 00 00         [10] 4800 	ld	hl, #0x0000
      001497 22 DB F3         [16] 4801 	ld	(_CLIKSW), hl
                                   4802 ;src\/Graphics\Graphics.h:272: SCNCNT = 1; 	// set keyboard scan counter
      00149A 21 F6 F3         [10] 4803 	ld	hl, #_SCNCNT
      00149D 36 01            [10] 4804 	ld	(hl), #0x01
                                   4805 ;src\/Graphics\Graphics.h:274: FORCLR = COLOR_WHITE;
      00149F 21 E9 F3         [10] 4806 	ld	hl, #_FORCLR
      0014A2 36 0F            [10] 4807 	ld	(hl), #0x0f
                                   4808 ;src\/Graphics\Graphics.h:275: BAKCLR = COLOR_BLACK;
      0014A4 21 EA F3         [10] 4809 	ld	hl, #_BAKCLR
      0014A7 36 01            [10] 4810 	ld	(hl), #0x01
                                   4811 ;src\/Graphics\Graphics.h:276: BDRCLR = COLOR_BLACK;
      0014A9 21 EB F3         [10] 4812 	ld	hl, #_BDRCLR
      0014AC 36 01            [10] 4813 	ld	(hl), #0x01
                                   4814 ;src\/Graphics\Graphics.h:304: WRTVDP(0b0000000111100010);
      0014AE 21 E2 01         [10] 4815 	ld	hl, #0x01e2
      0014B1 CDr00r00         [17] 4816 	call	_WRTVDP
                                   4817 ;src\/Graphics\Graphics.h:306: INIGRP();	// Set screen 2
      0014B4 CDr00r00         [17] 4818 	call	_INIGRP
                                   4819 ;src\/Graphics\Graphics.h:308: DISSCR();	// Disable screen (faster to write)
      0014B7 CDr00r00         [17] 4820 	call	_DISSCR
                                   4821 ;src\/Graphics\Graphics.h:312: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      0014BA AF               [ 4] 4822 	xor	a, a
      0014BB F5               [11] 4823 	push	af
      0014BC 33               [ 6] 4824 	inc	sp
      0014BD 21 00 40         [10] 4825 	ld	hl, #0x4000
      0014C0 E5               [11] 4826 	push	hl
      0014C1 65               [ 4] 4827 	ld	h, l
      0014C2 E5               [11] 4828 	push	hl
      0014C3 CDr00r00         [17] 4829 	call	_FILVRM
      0014C6 F1               [10] 4830 	pop	af
                                   4831 ;src\/Graphics\Graphics.h:321: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      0014C7 33               [ 6] 4832 	inc	sp
      0014C8 21 20 03         [10] 4833 	ld	hl,#0x0320
      0014CB E3               [19] 4834 	ex	(sp),hl
      0014CC 21rA8r07         [10] 4835 	ld	hl, #_sprite_arrow_0
      0014CF E5               [11] 4836 	push	hl
      0014D0 21 00 38         [10] 4837 	ld	hl, #0x3800
      0014D3 E5               [11] 4838 	push	hl
      0014D4 CDr00r00         [17] 4839 	call	_LDIRVM
      0014D7 21 06 00         [10] 4840 	ld	hl, #6
      0014DA 39               [11] 4841 	add	hl, sp
      0014DB F9               [ 6] 4842 	ld	sp, hl
                                   4843 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      0014DC 0E 00            [ 7] 4844 	ld	c, #0x00
      0014DE                       4845 00110$:
                                   4846 ;src\/Graphics\Graphics.h:328: WRTVRM(SPRATT + (i * 4), 	192);
      0014DE 79               [ 4] 4847 	ld	a,c
      0014DF FE 20            [ 7] 4848 	cp	a,#0x20
      0014E1 30 18            [12] 4849 	jr	NC, 00101$
      0014E3 26 00            [ 7] 4850 	ld	h, #0x00
      0014E5 6F               [ 4] 4851 	ld	l, a
      0014E6 29               [11] 4852 	add	hl, hl
      0014E7 29               [11] 4853 	add	hl, hl
      0014E8 7C               [ 4] 4854 	ld	a, h
      0014E9 C6 1B            [ 7] 4855 	add	a, #0x1b
      0014EB 67               [ 4] 4856 	ld	h, a
      0014EC C5               [11] 4857 	push	bc
      0014ED 3E C0            [ 7] 4858 	ld	a, #0xc0
      0014EF F5               [11] 4859 	push	af
      0014F0 33               [ 6] 4860 	inc	sp
      0014F1 E5               [11] 4861 	push	hl
      0014F2 CDr00r00         [17] 4862 	call	_WRTVRM
      0014F5 F1               [10] 4863 	pop	af
      0014F6 33               [ 6] 4864 	inc	sp
      0014F7 C1               [10] 4865 	pop	bc
                                   4866 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      0014F8 0C               [ 4] 4867 	inc	c
      0014F9 18 E3            [12] 4868 	jr	00110$
      0014FB                       4869 00101$:
                                   4870 ;src\/Graphics\Graphics.h:337: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014FB 21 78 01         [10] 4871 	ld	hl, #0x0178
      0014FE E5               [11] 4872 	push	hl
      0014FF 21r78r04         [10] 4873 	ld	hl, #_pattern_black_0
      001502 E5               [11] 4874 	push	hl
      001503 21 00 00         [10] 4875 	ld	hl, #0x0000
      001506 E5               [11] 4876 	push	hl
      001507 CDr00r00         [17] 4877 	call	_LDIRVM
      00150A 21 06 00         [10] 4878 	ld	hl, #6
      00150D 39               [11] 4879 	add	hl, sp
      00150E F9               [ 6] 4880 	ld	sp, hl
                                   4881 ;src\/Graphics\Graphics.h:340: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00150F 21 78 01         [10] 4882 	ld	hl, #0x0178
      001512 E5               [11] 4883 	push	hl
      001513 21r78r04         [10] 4884 	ld	hl, #_pattern_black_0
      001516 E5               [11] 4885 	push	hl
      001517 21 00 08         [10] 4886 	ld	hl, #0x0800
      00151A E5               [11] 4887 	push	hl
      00151B CDr00r00         [17] 4888 	call	_LDIRVM
      00151E 21 06 00         [10] 4889 	ld	hl, #6
      001521 39               [11] 4890 	add	hl, sp
      001522 F9               [ 6] 4891 	ld	sp, hl
                                   4892 ;src\/Graphics\Graphics.h:343: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001523 21 78 01         [10] 4893 	ld	hl, #0x0178
      001526 E5               [11] 4894 	push	hl
      001527 21r78r04         [10] 4895 	ld	hl, #_pattern_black_0
      00152A E5               [11] 4896 	push	hl
      00152B 21 00 10         [10] 4897 	ld	hl, #0x1000
      00152E E5               [11] 4898 	push	hl
      00152F CDr00r00         [17] 4899 	call	_LDIRVM
      001532 21 06 00         [10] 4900 	ld	hl, #6
      001535 39               [11] 4901 	add	hl, sp
      001536 F9               [ 6] 4902 	ld	sp, hl
                                   4903 ;src\/Graphics\Graphics.h:346: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001537 21 00 03         [10] 4904 	ld	hl, #0x0300
      00153A E5               [11] 4905 	push	hl
      00153B 21r78r01         [10] 4906 	ld	hl, #_FONT
      00153E E5               [11] 4907 	push	hl
      00153F 21 78 01         [10] 4908 	ld	hl, #0x0178
      001542 E5               [11] 4909 	push	hl
      001543 CDr00r00         [17] 4910 	call	_LDIRVM
      001546 21 06 00         [10] 4911 	ld	hl, #6
      001549 39               [11] 4912 	add	hl, sp
      00154A F9               [ 6] 4913 	ld	sp, hl
                                   4914 ;src\/Graphics\Graphics.h:349: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00154B 21 00 03         [10] 4915 	ld	hl, #0x0300
      00154E E5               [11] 4916 	push	hl
      00154F 21r78r01         [10] 4917 	ld	hl, #_FONT
      001552 E5               [11] 4918 	push	hl
      001553 21 78 09         [10] 4919 	ld	hl, #0x0978
      001556 E5               [11] 4920 	push	hl
      001557 CDr00r00         [17] 4921 	call	_LDIRVM
      00155A 21 06 00         [10] 4922 	ld	hl, #6
      00155D 39               [11] 4923 	add	hl, sp
      00155E F9               [ 6] 4924 	ld	sp, hl
                                   4925 ;src\/Graphics\Graphics.h:352: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00155F 21 00 03         [10] 4926 	ld	hl, #0x0300
      001562 E5               [11] 4927 	push	hl
      001563 21r78r01         [10] 4928 	ld	hl, #_FONT
      001566 E5               [11] 4929 	push	hl
      001567 21 78 11         [10] 4930 	ld	hl, #0x1178
      00156A E5               [11] 4931 	push	hl
      00156B CDr00r00         [17] 4932 	call	_LDIRVM
      00156E 21 06 00         [10] 4933 	ld	hl, #6
      001571 39               [11] 4934 	add	hl, sp
      001572 F9               [ 6] 4935 	ld	sp, hl
                                   4936 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001573 0E 00            [ 7] 4937 	ld	c, #0x00
      001575                       4938 00113$:
                                   4939 ;src\/Graphics\Graphics.h:357: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      001575 79               [ 4] 4940 	ld	a,c
      001576 FE 07            [ 7] 4941 	cp	a,#0x07
      001578 30 20            [12] 4942 	jr	NC, 00102$
      00157A 26 00            [ 7] 4943 	ld	h, #0x00
      00157C 6F               [ 4] 4944 	ld	l, a
      00157D 29               [11] 4945 	add	hl, hl
      00157E 29               [11] 4946 	add	hl, hl
      00157F 29               [11] 4947 	add	hl, hl
      001580 11 70 04         [10] 4948 	ld	de, #0x0470
      001583 19               [11] 4949 	add	hl, de
      001584 C5               [11] 4950 	push	bc
      001585 11 38 00         [10] 4951 	ld	de, #0x0038
      001588 D5               [11] 4952 	push	de
      001589 11rE8r05         [10] 4953 	ld	de, #_pattern_title
      00158C D5               [11] 4954 	push	de
      00158D E5               [11] 4955 	push	hl
      00158E CDr00r00         [17] 4956 	call	_LDIRVM
      001591 21 06 00         [10] 4957 	ld	hl, #6
      001594 39               [11] 4958 	add	hl, sp
      001595 F9               [ 6] 4959 	ld	sp, hl
      001596 C1               [10] 4960 	pop	bc
                                   4961 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001597 0C               [ 4] 4962 	inc	c
      001598 18 DB            [12] 4963 	jr	00113$
      00159A                       4964 00102$:
                                   4965 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      00159A 21 78 01         [10] 4966 	ld	hl, #0x0178
      00159D E5               [11] 4967 	push	hl
      00159E 21rF0r05         [10] 4968 	ld	hl, #_color_black_0
      0015A1 E5               [11] 4969 	push	hl
      0015A2 21 00 20         [10] 4970 	ld	hl, #0x2000
      0015A5 E5               [11] 4971 	push	hl
      0015A6 CDr00r00         [17] 4972 	call	_LDIRVM
      0015A9 21 06 00         [10] 4973 	ld	hl, #6
      0015AC 39               [11] 4974 	add	hl, sp
      0015AD F9               [ 6] 4975 	ld	sp, hl
                                   4976 ;src\/Graphics\Graphics.h:365: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      0015AE 21 78 01         [10] 4977 	ld	hl, #0x0178
      0015B1 E5               [11] 4978 	push	hl
      0015B2 21rF0r05         [10] 4979 	ld	hl, #_color_black_0
      0015B5 E5               [11] 4980 	push	hl
      0015B6 21 00 28         [10] 4981 	ld	hl, #0x2800
      0015B9 E5               [11] 4982 	push	hl
      0015BA CDr00r00         [17] 4983 	call	_LDIRVM
      0015BD 21 06 00         [10] 4984 	ld	hl, #6
      0015C0 39               [11] 4985 	add	hl, sp
      0015C1 F9               [ 6] 4986 	ld	sp, hl
                                   4987 ;src\/Graphics\Graphics.h:367: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      0015C2 21 78 01         [10] 4988 	ld	hl, #0x0178
      0015C5 E5               [11] 4989 	push	hl
      0015C6 21rF0r05         [10] 4990 	ld	hl, #_color_black_0
      0015C9 E5               [11] 4991 	push	hl
      0015CA 21 00 30         [10] 4992 	ld	hl, #0x3000
      0015CD E5               [11] 4993 	push	hl
      0015CE CDr00r00         [17] 4994 	call	_LDIRVM
      0015D1 21 06 00         [10] 4995 	ld	hl, #6
      0015D4 39               [11] 4996 	add	hl, sp
      0015D5 F9               [ 6] 4997 	ld	sp, hl
                                   4998 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015D6 0E 00            [ 7] 4999 	ld	c, #0x00
      0015D8                       5000 00116$:
                                   5001 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0015D8 79               [ 4] 5002 	ld	a,c
      0015D9 FE 60            [ 7] 5003 	cp	a,#0x60
      0015DB 30 20            [12] 5004 	jr	NC, 00103$
      0015DD 26 00            [ 7] 5005 	ld	h, #0x00
      0015DF 6F               [ 4] 5006 	ld	l, a
      0015E0 29               [11] 5007 	add	hl, hl
      0015E1 29               [11] 5008 	add	hl, hl
      0015E2 29               [11] 5009 	add	hl, hl
      0015E3 11 78 21         [10] 5010 	ld	de, #0x2178
      0015E6 19               [11] 5011 	add	hl, de
      0015E7 C5               [11] 5012 	push	bc
      0015E8 11 08 00         [10] 5013 	ld	de, #0x0008
      0015EB D5               [11] 5014 	push	de
      0015EC 11r68r07         [10] 5015 	ld	de, #_color_font_2
      0015EF D5               [11] 5016 	push	de
      0015F0 E5               [11] 5017 	push	hl
      0015F1 CDr00r00         [17] 5018 	call	_LDIRVM
      0015F4 21 06 00         [10] 5019 	ld	hl, #6
      0015F7 39               [11] 5020 	add	hl, sp
      0015F8 F9               [ 6] 5021 	ld	sp, hl
      0015F9 C1               [10] 5022 	pop	bc
                                   5023 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015FA 0C               [ 4] 5024 	inc	c
      0015FB 18 DB            [12] 5025 	jr	00116$
      0015FD                       5026 00103$:
                                   5027 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015FD 0E 00            [ 7] 5028 	ld	c, #0x00
      0015FF                       5029 00119$:
                                   5030 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0015FF 79               [ 4] 5031 	ld	a,c
      001600 FE 60            [ 7] 5032 	cp	a,#0x60
      001602 30 20            [12] 5033 	jr	NC, 00104$
      001604 26 00            [ 7] 5034 	ld	h, #0x00
      001606 6F               [ 4] 5035 	ld	l, a
      001607 29               [11] 5036 	add	hl, hl
      001608 29               [11] 5037 	add	hl, hl
      001609 29               [11] 5038 	add	hl, hl
      00160A 11 78 29         [10] 5039 	ld	de, #0x2978
      00160D 19               [11] 5040 	add	hl, de
      00160E C5               [11] 5041 	push	bc
      00160F 11 08 00         [10] 5042 	ld	de, #0x0008
      001612 D5               [11] 5043 	push	de
      001613 11r68r07         [10] 5044 	ld	de, #_color_font_2
      001616 D5               [11] 5045 	push	de
      001617 E5               [11] 5046 	push	hl
      001618 CDr00r00         [17] 5047 	call	_LDIRVM
      00161B 21 06 00         [10] 5048 	ld	hl, #6
      00161E 39               [11] 5049 	add	hl, sp
      00161F F9               [ 6] 5050 	ld	sp, hl
      001620 C1               [10] 5051 	pop	bc
                                   5052 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001621 0C               [ 4] 5053 	inc	c
      001622 18 DB            [12] 5054 	jr	00119$
      001624                       5055 00104$:
                                   5056 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001624 0E 00            [ 7] 5057 	ld	c, #0x00
      001626                       5058 00122$:
                                   5059 ;src\/Graphics\Graphics.h:383: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001626 79               [ 4] 5060 	ld	a,c
      001627 FE 60            [ 7] 5061 	cp	a,#0x60
      001629 30 20            [12] 5062 	jr	NC, 00105$
      00162B 26 00            [ 7] 5063 	ld	h, #0x00
      00162D 6F               [ 4] 5064 	ld	l, a
      00162E 29               [11] 5065 	add	hl, hl
      00162F 29               [11] 5066 	add	hl, hl
      001630 29               [11] 5067 	add	hl, hl
      001631 11 78 31         [10] 5068 	ld	de, #0x3178
      001634 19               [11] 5069 	add	hl, de
      001635 C5               [11] 5070 	push	bc
      001636 11 08 00         [10] 5071 	ld	de, #0x0008
      001639 D5               [11] 5072 	push	de
      00163A 11r68r07         [10] 5073 	ld	de, #_color_font_2
      00163D D5               [11] 5074 	push	de
      00163E E5               [11] 5075 	push	hl
      00163F CDr00r00         [17] 5076 	call	_LDIRVM
      001642 21 06 00         [10] 5077 	ld	hl, #6
      001645 39               [11] 5078 	add	hl, sp
      001646 F9               [ 6] 5079 	ld	sp, hl
      001647 C1               [10] 5080 	pop	bc
                                   5081 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001648 0C               [ 4] 5082 	inc	c
      001649 18 DB            [12] 5083 	jr	00122$
      00164B                       5084 00105$:
                                   5085 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      00164B 0E 00            [ 7] 5086 	ld	c, #0x00
      00164D                       5087 00125$:
                                   5088 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00164D 79               [ 4] 5089 	ld	a,c
      00164E FE 0A            [ 7] 5090 	cp	a,#0x0a
      001650 30 20            [12] 5091 	jr	NC, 00106$
      001652 26 00            [ 7] 5092 	ld	h, #0x00
      001654 6F               [ 4] 5093 	ld	l, a
      001655 29               [11] 5094 	add	hl, hl
      001656 29               [11] 5095 	add	hl, hl
      001657 29               [11] 5096 	add	hl, hl
      001658 11 F8 21         [10] 5097 	ld	de, #0x21f8
      00165B 19               [11] 5098 	add	hl, de
      00165C C5               [11] 5099 	push	bc
      00165D 11 08 00         [10] 5100 	ld	de, #0x0008
      001660 D5               [11] 5101 	push	de
      001661 11r60r07         [10] 5102 	ld	de, #_color_font_1
      001664 D5               [11] 5103 	push	de
      001665 E5               [11] 5104 	push	hl
      001666 CDr00r00         [17] 5105 	call	_LDIRVM
      001669 21 06 00         [10] 5106 	ld	hl, #6
      00166C 39               [11] 5107 	add	hl, sp
      00166D F9               [ 6] 5108 	ld	sp, hl
      00166E C1               [10] 5109 	pop	bc
                                   5110 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      00166F 0C               [ 4] 5111 	inc	c
      001670 18 DB            [12] 5112 	jr	00125$
      001672                       5113 00106$:
                                   5114 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001672 0E 00            [ 7] 5115 	ld	c, #0x00
      001674                       5116 00128$:
                                   5117 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001674 79               [ 4] 5118 	ld	a,c
      001675 FE 0A            [ 7] 5119 	cp	a,#0x0a
      001677 30 20            [12] 5120 	jr	NC, 00107$
      001679 26 00            [ 7] 5121 	ld	h, #0x00
      00167B 6F               [ 4] 5122 	ld	l, a
      00167C 29               [11] 5123 	add	hl, hl
      00167D 29               [11] 5124 	add	hl, hl
      00167E 29               [11] 5125 	add	hl, hl
      00167F 11 F8 29         [10] 5126 	ld	de, #0x29f8
      001682 19               [11] 5127 	add	hl, de
      001683 C5               [11] 5128 	push	bc
      001684 11 08 00         [10] 5129 	ld	de, #0x0008
      001687 D5               [11] 5130 	push	de
      001688 11r60r07         [10] 5131 	ld	de, #_color_font_1
      00168B D5               [11] 5132 	push	de
      00168C E5               [11] 5133 	push	hl
      00168D CDr00r00         [17] 5134 	call	_LDIRVM
      001690 21 06 00         [10] 5135 	ld	hl, #6
      001693 39               [11] 5136 	add	hl, sp
      001694 F9               [ 6] 5137 	ld	sp, hl
      001695 C1               [10] 5138 	pop	bc
                                   5139 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001696 0C               [ 4] 5140 	inc	c
      001697 18 DB            [12] 5141 	jr	00128$
      001699                       5142 00107$:
                                   5143 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001699 DD 36 FF 00      [19] 5144 	ld	-1 (ix), #0
      00169D                       5145 00131$:
      00169D DD 7E FF         [19] 5146 	ld	a, -1 (ix)
      0016A0 D6 0A            [ 7] 5147 	sub	a, #0x0a
      0016A2 30 22            [12] 5148 	jr	NC, 00108$
                                   5149 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0016A4 01r60r07         [10] 5150 	ld	bc, #_color_font_1
      0016A7 DD 6E FF         [19] 5151 	ld	l, -1 (ix)
      0016AA 26 00            [ 7] 5152 	ld	h, #0x00
      0016AC 29               [11] 5153 	add	hl, hl
      0016AD 29               [11] 5154 	add	hl, hl
      0016AE 29               [11] 5155 	add	hl, hl
      0016AF 11 F8 31         [10] 5156 	ld	de, #0x31f8
      0016B2 19               [11] 5157 	add	hl, de
      0016B3 11 08 00         [10] 5158 	ld	de, #0x0008
      0016B6 D5               [11] 5159 	push	de
      0016B7 C5               [11] 5160 	push	bc
      0016B8 E5               [11] 5161 	push	hl
      0016B9 CDr00r00         [17] 5162 	call	_LDIRVM
      0016BC 21 06 00         [10] 5163 	ld	hl, #6
      0016BF 39               [11] 5164 	add	hl, sp
      0016C0 F9               [ 6] 5165 	ld	sp, hl
                                   5166 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      0016C1 DD 34 FF         [23] 5167 	inc	-1 (ix)
      0016C4 18 D7            [12] 5168 	jr	00131$
      0016C6                       5169 00108$:
                                   5170 ;src\/Graphics\Graphics.h:404: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      0016C6 21 38 00         [10] 5171 	ld	hl, #0x0038
      0016C9 E5               [11] 5172 	push	hl
      0016CA 21r70r07         [10] 5173 	ld	hl, #_color_title_1
      0016CD E5               [11] 5174 	push	hl
      0016CE 21 70 24         [10] 5175 	ld	hl, #0x2470
      0016D1 E5               [11] 5176 	push	hl
      0016D2 CDr00r00         [17] 5177 	call	_LDIRVM
      0016D5 21 06 00         [10] 5178 	ld	hl, #6
      0016D8 39               [11] 5179 	add	hl, sp
      0016D9 F9               [ 6] 5180 	ld	sp, hl
                                   5181 ;src\/Graphics\Graphics.h:412: ENASCR();	// Enable screen
      0016DA CDr00r00         [17] 5182 	call	_ENASCR
                                   5183 ;src\/Graphics\Graphics.h:413: }
      0016DD 33               [ 6] 5184 	inc	sp
      0016DE DD E1            [14] 5185 	pop	ix
      0016E0 C9               [10] 5186 	ret
                                   5187 ;src\/Graphics\Graphics.h:415: void DrawBlock(byte col, byte line, byte tile) {
                                   5188 ;	---------------------------------
                                   5189 ; Function DrawBlock
                                   5190 ; ---------------------------------
      0016E1                       5191 _DrawBlock::
      0016E1 DD E5            [15] 5192 	push	ix
      0016E3 DD 21 00 00      [14] 5193 	ld	ix,#0
      0016E7 DD 39            [15] 5194 	add	ix,sp
                                   5195 ;src\/Graphics\Graphics.h:417: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0016E9 DD 6E 04         [19] 5196 	ld	l, 4 (ix)
      0016EC 26 00            [ 7] 5197 	ld	h, #0x00
      0016EE 29               [11] 5198 	add	hl, hl
      0016EF 4D               [ 4] 5199 	ld	c, l
      0016F0 44               [ 4] 5200 	ld	b, h
      0016F1 DD 6E 05         [19] 5201 	ld	l, 5 (ix)
      0016F4 26 00            [ 7] 5202 	ld	h, #0x00
      0016F6 29               [11] 5203 	add	hl, hl
      0016F7 29               [11] 5204 	add	hl, hl
      0016F8 29               [11] 5205 	add	hl, hl
      0016F9 29               [11] 5206 	add	hl, hl
      0016FA 29               [11] 5207 	add	hl, hl
      0016FB 29               [11] 5208 	add	hl, hl
      0016FC 11 0A 18         [10] 5209 	ld	de, #0x180a
      0016FF 19               [11] 5210 	add	hl, de
      001700 09               [11] 5211 	add	hl, bc
      001701 EB               [ 4] 5212 	ex	de, hl
                                   5213 ;src\/Graphics\Graphics.h:419: WRTVRM(baseAddr, tile);
      001702 D5               [11] 5214 	push	de
      001703 DD 7E 06         [19] 5215 	ld	a, 6 (ix)
      001706 F5               [11] 5216 	push	af
      001707 33               [ 6] 5217 	inc	sp
      001708 D5               [11] 5218 	push	de
      001709 CDr00r00         [17] 5219 	call	_WRTVRM
      00170C F1               [10] 5220 	pop	af
      00170D 33               [ 6] 5221 	inc	sp
      00170E D1               [10] 5222 	pop	de
                                   5223 ;src\/Graphics\Graphics.h:420: WRTVRM(baseAddr + 1, tile + 1);
      00170F DD 4E 06         [19] 5224 	ld	c, 6 (ix)
      001712 79               [ 4] 5225 	ld	a, c
      001713 3C               [ 4] 5226 	inc	a
      001714 6B               [ 4] 5227 	ld	l, e
      001715 62               [ 4] 5228 	ld	h, d
      001716 23               [ 6] 5229 	inc	hl
      001717 C5               [11] 5230 	push	bc
      001718 D5               [11] 5231 	push	de
      001719 F5               [11] 5232 	push	af
      00171A 33               [ 6] 5233 	inc	sp
      00171B E5               [11] 5234 	push	hl
      00171C CDr00r00         [17] 5235 	call	_WRTVRM
      00171F F1               [10] 5236 	pop	af
      001720 33               [ 6] 5237 	inc	sp
      001721 D1               [10] 5238 	pop	de
      001722 C1               [10] 5239 	pop	bc
                                   5240 ;src\/Graphics\Graphics.h:421: WRTVRM(baseAddr + 32, tile + 2);
      001723 41               [ 4] 5241 	ld	b, c
      001724 04               [ 4] 5242 	inc	b
      001725 04               [ 4] 5243 	inc	b
      001726 21 20 00         [10] 5244 	ld	hl, #0x0020
      001729 19               [11] 5245 	add	hl, de
      00172A C5               [11] 5246 	push	bc
      00172B D5               [11] 5247 	push	de
      00172C C5               [11] 5248 	push	bc
      00172D 33               [ 6] 5249 	inc	sp
      00172E E5               [11] 5250 	push	hl
      00172F CDr00r00         [17] 5251 	call	_WRTVRM
      001732 F1               [10] 5252 	pop	af
      001733 33               [ 6] 5253 	inc	sp
      001734 D1               [10] 5254 	pop	de
      001735 C1               [10] 5255 	pop	bc
                                   5256 ;src\/Graphics\Graphics.h:422: WRTVRM(baseAddr + 33, tile + 3);
      001736 0C               [ 4] 5257 	inc	c
      001737 0C               [ 4] 5258 	inc	c
      001738 0C               [ 4] 5259 	inc	c
      001739 21 21 00         [10] 5260 	ld	hl, #0x0021
      00173C 19               [11] 5261 	add	hl, de
      00173D 79               [ 4] 5262 	ld	a, c
      00173E F5               [11] 5263 	push	af
      00173F 33               [ 6] 5264 	inc	sp
      001740 E5               [11] 5265 	push	hl
      001741 CDr00r00         [17] 5266 	call	_WRTVRM
      001744 F1               [10] 5267 	pop	af
      001745 33               [ 6] 5268 	inc	sp
                                   5269 ;src\/Graphics\Graphics.h:423: }
      001746 DD E1            [14] 5270 	pop	ix
      001748 C9               [10] 5271 	ret
                                   5272 ;src\/Graphics\Graphics.h:425: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   5273 ;	---------------------------------
                                   5274 ; Function DrawBlock_SameTile
                                   5275 ; ---------------------------------
      001749                       5276 _DrawBlock_SameTile::
      001749 DD E5            [15] 5277 	push	ix
      00174B DD 21 00 00      [14] 5278 	ld	ix,#0
      00174F DD 39            [15] 5279 	add	ix,sp
                                   5280 ;src\/Graphics\Graphics.h:427: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001751 DD 6E 04         [19] 5281 	ld	l, 4 (ix)
      001754 26 00            [ 7] 5282 	ld	h, #0x00
      001756 29               [11] 5283 	add	hl, hl
      001757 4D               [ 4] 5284 	ld	c, l
      001758 44               [ 4] 5285 	ld	b, h
      001759 DD 6E 05         [19] 5286 	ld	l, 5 (ix)
      00175C 26 00            [ 7] 5287 	ld	h, #0x00
      00175E 29               [11] 5288 	add	hl, hl
      00175F 29               [11] 5289 	add	hl, hl
      001760 29               [11] 5290 	add	hl, hl
      001761 29               [11] 5291 	add	hl, hl
      001762 29               [11] 5292 	add	hl, hl
      001763 29               [11] 5293 	add	hl, hl
      001764 11 0A 18         [10] 5294 	ld	de, #0x180a
      001767 19               [11] 5295 	add	hl, de
      001768 09               [11] 5296 	add	hl, bc
      001769 EB               [ 4] 5297 	ex	de, hl
                                   5298 ;src\/Graphics\Graphics.h:429: WRTVRM(baseAddr, tile);
      00176A D5               [11] 5299 	push	de
      00176B DD 7E 06         [19] 5300 	ld	a, 6 (ix)
      00176E F5               [11] 5301 	push	af
      00176F 33               [ 6] 5302 	inc	sp
      001770 D5               [11] 5303 	push	de
      001771 CDr00r00         [17] 5304 	call	_WRTVRM
      001774 F1               [10] 5305 	pop	af
      001775 33               [ 6] 5306 	inc	sp
      001776 D1               [10] 5307 	pop	de
                                   5308 ;src\/Graphics\Graphics.h:430: WRTVRM(baseAddr + 1, tile);
      001777 4B               [ 4] 5309 	ld	c, e
      001778 42               [ 4] 5310 	ld	b, d
      001779 03               [ 6] 5311 	inc	bc
      00177A D5               [11] 5312 	push	de
      00177B DD 7E 06         [19] 5313 	ld	a, 6 (ix)
      00177E F5               [11] 5314 	push	af
      00177F 33               [ 6] 5315 	inc	sp
      001780 C5               [11] 5316 	push	bc
      001781 CDr00r00         [17] 5317 	call	_WRTVRM
      001784 F1               [10] 5318 	pop	af
      001785 33               [ 6] 5319 	inc	sp
      001786 D1               [10] 5320 	pop	de
                                   5321 ;src\/Graphics\Graphics.h:431: WRTVRM(baseAddr + 32, tile);
      001787 21 20 00         [10] 5322 	ld	hl, #0x0020
      00178A 19               [11] 5323 	add	hl, de
      00178B D5               [11] 5324 	push	de
      00178C DD 7E 06         [19] 5325 	ld	a, 6 (ix)
      00178F F5               [11] 5326 	push	af
      001790 33               [ 6] 5327 	inc	sp
      001791 E5               [11] 5328 	push	hl
      001792 CDr00r00         [17] 5329 	call	_WRTVRM
      001795 F1               [10] 5330 	pop	af
      001796 33               [ 6] 5331 	inc	sp
      001797 D1               [10] 5332 	pop	de
                                   5333 ;src\/Graphics\Graphics.h:432: WRTVRM(baseAddr + 33, tile);
      001798 21 21 00         [10] 5334 	ld	hl, #0x0021
      00179B 19               [11] 5335 	add	hl, de
      00179C DD 7E 06         [19] 5336 	ld	a, 6 (ix)
      00179F F5               [11] 5337 	push	af
      0017A0 33               [ 6] 5338 	inc	sp
      0017A1 E5               [11] 5339 	push	hl
      0017A2 CDr00r00         [17] 5340 	call	_WRTVRM
      0017A5 F1               [10] 5341 	pop	af
      0017A6 33               [ 6] 5342 	inc	sp
                                   5343 ;src\/Graphics\Graphics.h:433: }
      0017A7 DD E1            [14] 5344 	pop	ix
      0017A9 C9               [10] 5345 	ret
                                   5346 ;src\/Graphics\Graphics.h:435: void DrawLine(byte line) {
                                   5347 ;	---------------------------------
                                   5348 ; Function DrawLine
                                   5349 ; ---------------------------------
      0017AA                       5350 _DrawLine::
      0017AA DD E5            [15] 5351 	push	ix
      0017AC DD 21 00 00      [14] 5352 	ld	ix,#0
      0017B0 DD 39            [15] 5353 	add	ix,sp
                                   5354 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0017B2 DD 4E 04         [19] 5355 	ld	c, 4 (ix)
      0017B5 06 00            [ 7] 5356 	ld	b, #0x00
      0017B7                       5357 00103$:
      0017B7 78               [ 4] 5358 	ld	a, b
      0017B8 D6 06            [ 7] 5359 	sub	a, #0x06
      0017BA 30 23            [12] 5360 	jr	NC, 00105$
                                   5361 ;src\/Graphics\Graphics.h:437: DrawBlock(col, line, playfield[col][line]);
      0017BC 58               [ 4] 5362 	ld	e, b
      0017BD 16 00            [ 7] 5363 	ld	d, #0x00
      0017BF 6B               [ 4] 5364 	ld	l, e
      0017C0 62               [ 4] 5365 	ld	h, d
      0017C1 29               [11] 5366 	add	hl, hl
      0017C2 19               [11] 5367 	add	hl, de
      0017C3 29               [11] 5368 	add	hl, hl
      0017C4 29               [11] 5369 	add	hl, hl
      0017C5 11r00r00         [10] 5370 	ld	de, #_playfield
      0017C8 19               [11] 5371 	add	hl, de
      0017C9 59               [ 4] 5372 	ld	e, c
      0017CA 16 00            [ 7] 5373 	ld	d, #0x00
      0017CC 19               [11] 5374 	add	hl, de
      0017CD 7E               [ 7] 5375 	ld	a, (hl)
      0017CE C5               [11] 5376 	push	bc
      0017CF F5               [11] 5377 	push	af
      0017D0 33               [ 6] 5378 	inc	sp
      0017D1 79               [ 4] 5379 	ld	a, c
      0017D2 F5               [11] 5380 	push	af
      0017D3 33               [ 6] 5381 	inc	sp
      0017D4 C5               [11] 5382 	push	bc
      0017D5 33               [ 6] 5383 	inc	sp
      0017D6 CDrE1r16         [17] 5384 	call	_DrawBlock
      0017D9 F1               [10] 5385 	pop	af
      0017DA 33               [ 6] 5386 	inc	sp
      0017DB C1               [10] 5387 	pop	bc
                                   5388 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0017DC 04               [ 4] 5389 	inc	b
      0017DD 18 D8            [12] 5390 	jr	00103$
      0017DF                       5391 00105$:
                                   5392 ;src\/Graphics\Graphics.h:439: }
      0017DF DD E1            [14] 5393 	pop	ix
      0017E1 C9               [10] 5394 	ret
                                   5395 ;src\/Graphics\Graphics.h:441: void DrawPiece(byte line) {
                                   5396 ;	---------------------------------
                                   5397 ; Function DrawPiece
                                   5398 ; ---------------------------------
      0017E2                       5399 _DrawPiece::
                                   5400 ;src\/Graphics\Graphics.h:442: DrawLine(line);
      0017E2 21 02 00         [10] 5401 	ld	hl, #2
      0017E5 39               [11] 5402 	add	hl, sp
      0017E6 7E               [ 7] 5403 	ld	a, (hl)
      0017E7 F5               [11] 5404 	push	af
      0017E8 33               [ 6] 5405 	inc	sp
      0017E9 CDrAAr17         [17] 5406 	call	_DrawLine
      0017EC 33               [ 6] 5407 	inc	sp
                                   5408 ;src\/Graphics\Graphics.h:443: DrawLine(line + 1);
      0017ED 21 02 00         [10] 5409 	ld	hl, #2
      0017F0 39               [11] 5410 	add	hl, sp
      0017F1 46               [ 7] 5411 	ld	b, (hl)
      0017F2 78               [ 4] 5412 	ld	a, b
      0017F3 3C               [ 4] 5413 	inc	a
      0017F4 C5               [11] 5414 	push	bc
      0017F5 F5               [11] 5415 	push	af
      0017F6 33               [ 6] 5416 	inc	sp
      0017F7 CDrAAr17         [17] 5417 	call	_DrawLine
      0017FA 33               [ 6] 5418 	inc	sp
      0017FB C1               [10] 5419 	pop	bc
                                   5420 ;src\/Graphics\Graphics.h:444: DrawLine(line + 2);
      0017FC 04               [ 4] 5421 	inc	b
      0017FD 04               [ 4] 5422 	inc	b
      0017FE C5               [11] 5423 	push	bc
      0017FF 33               [ 6] 5424 	inc	sp
      001800 CDrAAr17         [17] 5425 	call	_DrawLine
      001803 33               [ 6] 5426 	inc	sp
                                   5427 ;src\/Graphics\Graphics.h:445: }
      001804 C9               [10] 5428 	ret
                                   5429 ;src\/Graphics\Graphics.h:447: void DrawPlayfield() {
                                   5430 ;	---------------------------------
                                   5431 ; Function DrawPlayfield
                                   5432 ; ---------------------------------
      001805                       5433 _DrawPlayfield::
                                   5434 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001805 06 00            [ 7] 5435 	ld	b, #0x00
      001807                       5436 00103$:
      001807 78               [ 4] 5437 	ld	a, b
      001808 D6 0C            [ 7] 5438 	sub	a, #0x0c
      00180A D0               [11] 5439 	ret	NC
                                   5440 ;src\/Graphics\Graphics.h:449: DrawLine(line);
      00180B C5               [11] 5441 	push	bc
      00180C C5               [11] 5442 	push	bc
      00180D 33               [ 6] 5443 	inc	sp
      00180E CDrAAr17         [17] 5444 	call	_DrawLine
      001811 33               [ 6] 5445 	inc	sp
      001812 C1               [10] 5446 	pop	bc
                                   5447 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001813 04               [ 4] 5448 	inc	b
                                   5449 ;src\/Graphics\Graphics.h:451: }
      001814 18 F1            [12] 5450 	jr	00103$
                                   5451 ;src\/Sound.h:1: void SoundFx_2() {
                                   5452 ;	---------------------------------
                                   5453 ; Function SoundFx_2
                                   5454 ; ---------------------------------
      001816                       5455 _SoundFx_2::
                                   5456 ;src\/Sound.h:2: GICINI();
      001816 CDr00r00         [17] 5457 	call	_GICINI
                                   5458 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001819 21 08 0F         [10] 5459 	ld	hl, #0x0f08
      00181C CDr00r00         [17] 5460 	call	_WRTPSG
                                   5461 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00181F 0E 00            [ 7] 5462 	ld	c, #0x00
      001821                       5463 00104$:
      001821 79               [ 4] 5464 	ld	a, c
      001822 D6 FF            [ 7] 5465 	sub	a, #0xff
      001824 30 11            [12] 5466 	jr	NC, 00101$
                                   5467 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001826 C5               [11] 5468 	push	bc
      001827 21 00 5D         [10] 5469 	ld	hl, #0x5d00
      00182A CDr00r00         [17] 5470 	call	_WRTPSG
      00182D 21 01 00         [10] 5471 	ld	hl, #0x0001
      001830 CDr00r00         [17] 5472 	call	_WRTPSG
      001833 C1               [10] 5473 	pop	bc
                                   5474 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001834 0C               [ 4] 5475 	inc	c
      001835 18 EA            [12] 5476 	jr	00104$
      001837                       5477 00101$:
                                   5478 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001837 0E 00            [ 7] 5479 	ld	c, #0x00
      001839                       5480 00107$:
      001839 79               [ 4] 5481 	ld	a, c
      00183A D6 FF            [ 7] 5482 	sub	a, #0xff
      00183C 30 11            [12] 5483 	jr	NC, 00102$
                                   5484 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      00183E C5               [11] 5485 	push	bc
      00183F 21 00 2D         [10] 5486 	ld	hl, #0x2d00
      001842 CDr00r00         [17] 5487 	call	_WRTPSG
      001845 21 01 00         [10] 5488 	ld	hl, #0x0001
      001848 CDr00r00         [17] 5489 	call	_WRTPSG
      00184B C1               [10] 5490 	pop	bc
                                   5491 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      00184C 0C               [ 4] 5492 	inc	c
      00184D 18 EA            [12] 5493 	jr	00107$
      00184F                       5494 00102$:
                                   5495 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      00184F 21 08 00         [10] 5496 	ld	hl, #0x0008
                                   5497 ;src\/Sound.h:30: }
      001852 C3r00r00         [10] 5498 	jp	_WRTPSG
                                   5499 ;src\/Sound.h:32: void SoundFx_1() {
                                   5500 ;	---------------------------------
                                   5501 ; Function SoundFx_1
                                   5502 ; ---------------------------------
      001855                       5503 _SoundFx_1::
                                   5504 ;src\/Sound.h:34: GICINI();
      001855 CDr00r00         [17] 5505 	call	_GICINI
                                   5506 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001858 21 06 97         [10] 5507 	ld	hl, #0x9706
      00185B CDr00r00         [17] 5508 	call	_WRTPSG
                                   5509 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      00185E 21 07 81         [10] 5510 	ld	hl, #0x8107
      001861 CDr00r00         [17] 5511 	call	_WRTPSG
                                   5512 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001864 21 08 10         [10] 5513 	ld	hl, #0x1008
      001867 CDr00r00         [17] 5514 	call	_WRTPSG
                                   5515 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      00186A 21 0C 13         [10] 5516 	ld	hl, #0x130c
      00186D CDr00r00         [17] 5517 	call	_WRTPSG
                                   5518 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001870 21 0D 01         [10] 5519 	ld	hl, #0x010d
                                   5520 ;src\/Sound.h:49: }
      001873 C3r00r00         [10] 5521 	jp	_WRTPSG
                                   5522 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5523 ;	---------------------------------
                                   5524 ; Function CheckPlayfield
                                   5525 ; ---------------------------------
      001876                       5526 _CheckPlayfield::
      001876 DD E5            [15] 5527 	push	ix
      001878 DD 21 00 00      [14] 5528 	ld	ix,#0
      00187C DD 39            [15] 5529 	add	ix,sp
      00187E 21 EF FF         [10] 5530 	ld	hl, #-17
      001881 39               [11] 5531 	add	hl, sp
      001882 F9               [ 6] 5532 	ld	sp, hl
                                   5533 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001883 DD 36 EF 00      [19] 5534 	ld	-17 (ix), #0
                                   5535 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001887 0E 00            [ 7] 5536 	ld	c, #0x00
      001889                       5537 00196$:
      001889 79               [ 4] 5538 	ld	a, c
      00188A D6 0C            [ 7] 5539 	sub	a, #0x0c
      00188C 30 36            [12] 5540 	jr	NC, 00102$
                                   5541 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00188E DD 36 FF 00      [19] 5542 	ld	-1 (ix), #0
      001892                       5543 00193$:
      001892 DD 7E FF         [19] 5544 	ld	a, -1 (ix)
      001895 D6 06            [ 7] 5545 	sub	a, #0x06
      001897 30 28            [12] 5546 	jr	NC, 00197$
                                   5547 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001899 DD 5E FF         [19] 5548 	ld	e, -1 (ix)
      00189C 16 00            [ 7] 5549 	ld	d, #0x00
      00189E 6B               [ 4] 5550 	ld	l, e
      00189F 62               [ 4] 5551 	ld	h, d
      0018A0 29               [11] 5552 	add	hl, hl
      0018A1 19               [11] 5553 	add	hl, de
      0018A2 29               [11] 5554 	add	hl, hl
      0018A3 29               [11] 5555 	add	hl, hl
      0018A4 EB               [ 4] 5556 	ex	de, hl
      0018A5 21r48r00         [10] 5557 	ld	hl, #_playfieldTemp
      0018A8 19               [11] 5558 	add	hl, de
      0018A9 06 00            [ 7] 5559 	ld	b, #0x00
      0018AB 09               [11] 5560 	add	hl, bc
      0018AC 3Er00            [ 7] 5561 	ld	a, #<(_playfield)
      0018AE 83               [ 4] 5562 	add	a, e
      0018AF 5F               [ 4] 5563 	ld	e, a
      0018B0 3Es00            [ 7] 5564 	ld	a, #>(_playfield)
      0018B2 8A               [ 4] 5565 	adc	a, d
      0018B3 57               [ 4] 5566 	ld	d, a
      0018B4 7B               [ 4] 5567 	ld	a, e
      0018B5 81               [ 4] 5568 	add	a, c
      0018B6 5F               [ 4] 5569 	ld	e, a
      0018B7 30 01            [12] 5570 	jr	NC, 00615$
      0018B9 14               [ 4] 5571 	inc	d
      0018BA                       5572 00615$:
      0018BA 1A               [ 7] 5573 	ld	a, (de)
      0018BB 77               [ 7] 5574 	ld	(hl), a
                                   5575 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018BC DD 34 FF         [23] 5576 	inc	-1 (ix)
      0018BF 18 D1            [12] 5577 	jr	00193$
      0018C1                       5578 00197$:
                                   5579 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018C1 0C               [ 4] 5580 	inc	c
      0018C2 18 C5            [12] 5581 	jr	00196$
      0018C4                       5582 00102$:
                                   5583 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018C4 DD 36 FE 00      [19] 5584 	ld	-2 (ix), #0
      0018C8                       5585 00202$:
      0018C8 DD 7E FE         [19] 5586 	ld	a, -2 (ix)
      0018CB D6 0C            [ 7] 5587 	sub	a, #0x0c
      0018CD D2rCCr19         [10] 5588 	jp	NC, 00108$
                                   5589 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0018D0 DD 36 FF 02      [19] 5590 	ld	-1 (ix), #0x02
      0018D4                       5591 00199$:
      0018D4 DD 7E FF         [19] 5592 	ld	a, -1 (ix)
      0018D7 D6 06            [ 7] 5593 	sub	a, #0x06
      0018D9 D2rC6r19         [10] 5594 	jp	NC, 00203$
                                   5595 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      0018DC DD 4E FF         [19] 5596 	ld	c, -1 (ix)
      0018DF 06 00            [ 7] 5597 	ld	b, #0x00
      0018E1 69               [ 4] 5598 	ld	l, c
      0018E2 60               [ 4] 5599 	ld	h, b
      0018E3 29               [11] 5600 	add	hl, hl
      0018E4 09               [11] 5601 	add	hl, bc
      0018E5 29               [11] 5602 	add	hl, hl
      0018E6 29               [11] 5603 	add	hl, hl
      0018E7 DD 75 F5         [19] 5604 	ld	-11 (ix), l
      0018EA DD 74 F6         [19] 5605 	ld	-10 (ix), h
      0018ED 3Er48            [ 7] 5606 	ld	a, #<(_playfieldTemp)
      0018EF DD 86 F5         [19] 5607 	add	a, -11 (ix)
      0018F2 4F               [ 4] 5608 	ld	c, a
      0018F3 3Es00            [ 7] 5609 	ld	a, #>(_playfieldTemp)
      0018F5 DD 8E F6         [19] 5610 	adc	a, -10 (ix)
      0018F8 47               [ 4] 5611 	ld	b, a
      0018F9 79               [ 4] 5612 	ld	a, c
      0018FA DD 86 FE         [19] 5613 	add	a, -2 (ix)
      0018FD DD 77 F7         [19] 5614 	ld	-9 (ix), a
      001900 78               [ 4] 5615 	ld	a, b
      001901 CE 00            [ 7] 5616 	adc	a, #0x00
      001903 DD 77 F8         [19] 5617 	ld	-8 (ix), a
      001906 DD 6E F7         [19] 5618 	ld	l, -9 (ix)
      001909 DD 66 F8         [19] 5619 	ld	h, -8 (ix)
      00190C 7E               [ 7] 5620 	ld	a, (hl)
      00190D DD 77 F9         [19] 5621 	ld	-7 (ix), a
      001910 B7               [ 4] 5622 	or	a, a
      001911 CArC0r19         [10] 5623 	jp	Z, 00200$
                                   5624 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001914 DD 7E FF         [19] 5625 	ld	a, -1 (ix)
      001917 DD 77 FD         [19] 5626 	ld	-3 (ix), a
      00191A 4F               [ 4] 5627 	ld	c, a
      00191B 0D               [ 4] 5628 	dec	c
      00191C 0D               [ 4] 5629 	dec	c
      00191D 79               [ 4] 5630 	ld	a, c
      00191E 07               [ 4] 5631 	rlca
      00191F 9F               [ 4] 5632 	sbc	a, a
      001920 47               [ 4] 5633 	ld	b, a
      001921 69               [ 4] 5634 	ld	l, c
      001922 60               [ 4] 5635 	ld	h, b
      001923 29               [11] 5636 	add	hl, hl
      001924 09               [11] 5637 	add	hl, bc
      001925 29               [11] 5638 	add	hl, hl
      001926 29               [11] 5639 	add	hl, hl
      001927 EB               [ 4] 5640 	ex	de, hl
      001928 21r48r00         [10] 5641 	ld	hl, #_playfieldTemp
      00192B 19               [11] 5642 	add	hl, de
      00192C 7D               [ 4] 5643 	ld	a, l
      00192D DD 86 FE         [19] 5644 	add	a, -2 (ix)
      001930 DD 77 FA         [19] 5645 	ld	-6 (ix), a
      001933 7C               [ 4] 5646 	ld	a, h
      001934 CE 00            [ 7] 5647 	adc	a, #0x00
      001936 DD 77 FB         [19] 5648 	ld	-5 (ix), a
      001939 DD 4E FD         [19] 5649 	ld	c, -3 (ix)
      00193C 0D               [ 4] 5650 	dec	c
      00193D 79               [ 4] 5651 	ld	a, c
      00193E 07               [ 4] 5652 	rlca
      00193F 9F               [ 4] 5653 	sbc	a, a
      001940 47               [ 4] 5654 	ld	b, a
      001941 69               [ 4] 5655 	ld	l, c
      001942 60               [ 4] 5656 	ld	h, b
      001943 29               [11] 5657 	add	hl, hl
      001944 09               [11] 5658 	add	hl, bc
      001945 29               [11] 5659 	add	hl, hl
      001946 29               [11] 5660 	add	hl, hl
      001947 DD 75 FC         [19] 5661 	ld	-4 (ix), l
      00194A DD 74 FD         [19] 5662 	ld	-3 (ix), h
      00194D 3Er48            [ 7] 5663 	ld	a, #<(_playfieldTemp)
      00194F DD 86 FC         [19] 5664 	add	a, -4 (ix)
      001952 4F               [ 4] 5665 	ld	c, a
      001953 3Es00            [ 7] 5666 	ld	a, #>(_playfieldTemp)
      001955 DD 8E FD         [19] 5667 	adc	a, -3 (ix)
      001958 47               [ 4] 5668 	ld	b, a
      001959 79               [ 4] 5669 	ld	a, c
      00195A DD 86 FE         [19] 5670 	add	a, -2 (ix)
      00195D 4F               [ 4] 5671 	ld	c, a
      00195E 30 01            [12] 5672 	jr	NC, 00616$
      001960 04               [ 4] 5673 	inc	b
      001961                       5674 00616$:
      001961 DD 6E FA         [19] 5675 	ld	l, -6 (ix)
      001964 DD 66 FB         [19] 5676 	ld	h, -5 (ix)
      001967 6E               [ 7] 5677 	ld	l, (hl)
      001968 0A               [ 7] 5678 	ld	a, (bc)
      001969 67               [ 4] 5679 	ld	h, a
      00196A 7D               [ 4] 5680 	ld	a, l
      00196B 94               [ 4] 5681 	sub	a, h
      00196C 20 52            [12] 5682 	jr	NZ, 00200$
                                   5683 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00196E DD 7E F9         [19] 5684 	ld	a, -7 (ix)
      001971 94               [ 4] 5685 	sub	a, h
      001972 20 4C            [12] 5686 	jr	NZ, 00200$
                                   5687 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      001974 DD 36 EF 01      [19] 5688 	ld	-17 (ix), #0x01
                                   5689 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001978 3Er00            [ 7] 5690 	ld	a, #<(_playfield)
      00197A 83               [ 4] 5691 	add	a, e
      00197B 5F               [ 4] 5692 	ld	e, a
      00197C 3Es00            [ 7] 5693 	ld	a, #>(_playfield)
      00197E 8A               [ 4] 5694 	adc	a, d
      00197F 57               [ 4] 5695 	ld	d, a
      001980 7B               [ 4] 5696 	ld	a, e
      001981 DD 86 FE         [19] 5697 	add	a, -2 (ix)
      001984 5F               [ 4] 5698 	ld	e, a
      001985 30 01            [12] 5699 	jr	NC, 00621$
      001987 14               [ 4] 5700 	inc	d
      001988                       5701 00621$:
      001988 7D               [ 4] 5702 	ld	a, l
      001989 CB FF            [ 8] 5703 	set	7, a
      00198B 12               [ 7] 5704 	ld	(de), a
                                   5705 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00198C 3Er00            [ 7] 5706 	ld	a, #<(_playfield)
      00198E DD 86 FC         [19] 5707 	add	a, -4 (ix)
      001991 5F               [ 4] 5708 	ld	e, a
      001992 3Es00            [ 7] 5709 	ld	a, #>(_playfield)
      001994 DD 8E FD         [19] 5710 	adc	a, -3 (ix)
      001997 57               [ 4] 5711 	ld	d, a
      001998 DD 6E FE         [19] 5712 	ld	l, -2 (ix)
      00199B 26 00            [ 7] 5713 	ld	h, #0x00
      00199D 19               [11] 5714 	add	hl, de
      00199E 0A               [ 7] 5715 	ld	a, (bc)
      00199F CB FF            [ 8] 5716 	set	7, a
      0019A1 77               [ 7] 5717 	ld	(hl), a
                                   5718 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0019A2 3Er00            [ 7] 5719 	ld	a, #<(_playfield)
      0019A4 DD 86 F5         [19] 5720 	add	a, -11 (ix)
      0019A7 4F               [ 4] 5721 	ld	c, a
      0019A8 3Es00            [ 7] 5722 	ld	a, #>(_playfield)
      0019AA DD 8E F6         [19] 5723 	adc	a, -10 (ix)
      0019AD 47               [ 4] 5724 	ld	b, a
      0019AE 79               [ 4] 5725 	ld	a, c
      0019AF DD 86 FE         [19] 5726 	add	a, -2 (ix)
      0019B2 4F               [ 4] 5727 	ld	c, a
      0019B3 30 01            [12] 5728 	jr	NC, 00622$
      0019B5 04               [ 4] 5729 	inc	b
      0019B6                       5730 00622$:
      0019B6 DD 6E F7         [19] 5731 	ld	l, -9 (ix)
      0019B9 DD 66 F8         [19] 5732 	ld	h, -8 (ix)
      0019BC 7E               [ 7] 5733 	ld	a, (hl)
      0019BD CB FF            [ 8] 5734 	set	7, a
      0019BF 02               [ 7] 5735 	ld	(bc), a
      0019C0                       5736 00200$:
                                   5737 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0019C0 DD 34 FF         [23] 5738 	inc	-1 (ix)
      0019C3 C3rD4r18         [10] 5739 	jp	00199$
      0019C6                       5740 00203$:
                                   5741 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0019C6 DD 34 FE         [23] 5742 	inc	-2 (ix)
      0019C9 C3rC8r18         [10] 5743 	jp	00202$
      0019CC                       5744 00108$:
                                   5745 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0019CC 0E 02            [ 7] 5746 	ld	c, #0x02
      0019CE                       5747 00208$:
      0019CE 79               [ 4] 5748 	ld	a, c
      0019CF D6 0C            [ 7] 5749 	sub	a, #0x0c
      0019D1 D2r93r1A         [10] 5750 	jp	NC, 00114$
                                   5751 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0019D4 DD 36 FF 00      [19] 5752 	ld	-1 (ix), #0
      0019D8                       5753 00205$:
      0019D8 DD 7E FF         [19] 5754 	ld	a, -1 (ix)
      0019DB D6 06            [ 7] 5755 	sub	a, #0x06
      0019DD D2r8Fr1A         [10] 5756 	jp	NC, 00209$
                                   5757 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      0019E0 DD 5E FF         [19] 5758 	ld	e, -1 (ix)
      0019E3 16 00            [ 7] 5759 	ld	d, #0x00
      0019E5 6B               [ 4] 5760 	ld	l, e
      0019E6 62               [ 4] 5761 	ld	h, d
      0019E7 29               [11] 5762 	add	hl, hl
      0019E8 19               [11] 5763 	add	hl, de
      0019E9 29               [11] 5764 	add	hl, hl
      0019EA 29               [11] 5765 	add	hl, hl
      0019EB DD 75 F7         [19] 5766 	ld	-9 (ix), l
      0019EE DD 74 F8         [19] 5767 	ld	-8 (ix), h
      0019F1 3Er48            [ 7] 5768 	ld	a, #<(_playfieldTemp)
      0019F3 DD 86 F7         [19] 5769 	add	a, -9 (ix)
      0019F6 5F               [ 4] 5770 	ld	e, a
      0019F7 3Es00            [ 7] 5771 	ld	a, #>(_playfieldTemp)
      0019F9 DD 8E F8         [19] 5772 	adc	a, -8 (ix)
      0019FC 57               [ 4] 5773 	ld	d, a
      0019FD 7B               [ 4] 5774 	ld	a, e
      0019FE 81               [ 4] 5775 	add	a, c
      0019FF DD 77 F9         [19] 5776 	ld	-7 (ix), a
      001A02 7A               [ 4] 5777 	ld	a, d
      001A03 CE 00            [ 7] 5778 	adc	a, #0x00
      001A05 DD 77 FA         [19] 5779 	ld	-6 (ix), a
      001A08 DD 6E F9         [19] 5780 	ld	l, -7 (ix)
      001A0B DD 66 FA         [19] 5781 	ld	h, -6 (ix)
      001A0E 7E               [ 7] 5782 	ld	a, (hl)
      001A0F DD 77 FE         [19] 5783 	ld	-2 (ix), a
      001A12 B7               [ 4] 5784 	or	a, a
      001A13 28 74            [12] 5785 	jr	Z, 00206$
                                   5786 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001A15 DD 71 FD         [19] 5787 	ld	-3 (ix), c
      001A18 79               [ 4] 5788 	ld	a, c
      001A19 C6 FE            [ 7] 5789 	add	a, #0xfe
      001A1B DD 77 FB         [19] 5790 	ld	-5 (ix), a
      001A1E 6F               [ 4] 5791 	ld	l, a
      001A1F 26 00            [ 7] 5792 	ld	h, #0x00
      001A21 19               [11] 5793 	add	hl, de
      001A22 DD 46 FD         [19] 5794 	ld	b, -3 (ix)
      001A25 05               [ 4] 5795 	dec	b
      001A26 7B               [ 4] 5796 	ld	a, e
      001A27 80               [ 4] 5797 	add	a, b
      001A28 5F               [ 4] 5798 	ld	e, a
      001A29 30 01            [12] 5799 	jr	NC, 00623$
      001A2B 14               [ 4] 5800 	inc	d
      001A2C                       5801 00623$:
      001A2C 7E               [ 7] 5802 	ld	a, (hl)
      001A2D DD 77 FC         [19] 5803 	ld	-4 (ix), a
      001A30 1A               [ 7] 5804 	ld	a, (de)
      001A31 6F               [ 4] 5805 	ld	l, a
      001A32 DD 7E FC         [19] 5806 	ld	a, -4 (ix)
      001A35 95               [ 4] 5807 	sub	a, l
      001A36 20 51            [12] 5808 	jr	NZ, 00206$
                                   5809 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001A38 DD 7E FE         [19] 5810 	ld	a, -2 (ix)
      001A3B 95               [ 4] 5811 	sub	a, l
      001A3C 20 4B            [12] 5812 	jr	NZ, 00206$
                                   5813 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      001A3E DD 36 EF 01      [19] 5814 	ld	-17 (ix), #0x01
                                   5815 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001A42 3Er00            [ 7] 5816 	ld	a, #<(_playfield)
      001A44 DD 86 F7         [19] 5817 	add	a, -9 (ix)
      001A47 DD 77 FD         [19] 5818 	ld	-3 (ix), a
      001A4A 3Es00            [ 7] 5819 	ld	a, #>(_playfield)
      001A4C DD 8E F8         [19] 5820 	adc	a, -8 (ix)
      001A4F DD 77 FE         [19] 5821 	ld	-2 (ix), a
      001A52 DD 7E FD         [19] 5822 	ld	a, -3 (ix)
      001A55 DD 86 FB         [19] 5823 	add	a, -5 (ix)
      001A58 6F               [ 4] 5824 	ld	l, a
      001A59 DD 7E FE         [19] 5825 	ld	a, -2 (ix)
      001A5C CE 00            [ 7] 5826 	adc	a, #0x00
      001A5E 67               [ 4] 5827 	ld	h, a
      001A5F DD 7E FC         [19] 5828 	ld	a, -4 (ix)
      001A62 CB FF            [ 8] 5829 	set	7, a
      001A64 77               [ 7] 5830 	ld	(hl), a
                                   5831 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001A65 DD 7E FD         [19] 5832 	ld	a, -3 (ix)
      001A68 80               [ 4] 5833 	add	a, b
      001A69 6F               [ 4] 5834 	ld	l, a
      001A6A DD 7E FE         [19] 5835 	ld	a, -2 (ix)
      001A6D CE 00            [ 7] 5836 	adc	a, #0x00
      001A6F 67               [ 4] 5837 	ld	h, a
      001A70 1A               [ 7] 5838 	ld	a, (de)
      001A71 CB FF            [ 8] 5839 	set	7, a
      001A73 77               [ 7] 5840 	ld	(hl), a
                                   5841 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001A74 DD 7E FD         [19] 5842 	ld	a, -3 (ix)
      001A77 81               [ 4] 5843 	add	a, c
      001A78 5F               [ 4] 5844 	ld	e, a
      001A79 DD 7E FE         [19] 5845 	ld	a, -2 (ix)
      001A7C CE 00            [ 7] 5846 	adc	a, #0x00
      001A7E 57               [ 4] 5847 	ld	d, a
      001A7F DD 6E F9         [19] 5848 	ld	l, -7 (ix)
      001A82 DD 66 FA         [19] 5849 	ld	h, -6 (ix)
      001A85 7E               [ 7] 5850 	ld	a, (hl)
      001A86 CB FF            [ 8] 5851 	set	7, a
      001A88 12               [ 7] 5852 	ld	(de), a
      001A89                       5853 00206$:
                                   5854 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A89 DD 34 FF         [23] 5855 	inc	-1 (ix)
      001A8C C3rD8r19         [10] 5856 	jp	00205$
      001A8F                       5857 00209$:
                                   5858 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A8F 0C               [ 4] 5859 	inc	c
      001A90 C3rCEr19         [10] 5860 	jp	00208$
      001A93                       5861 00114$:
                                   5862 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A93 DD 36 FE 02      [19] 5863 	ld	-2 (ix), #0x02
      001A97                       5864 00214$:
      001A97 DD 7E FE         [19] 5865 	ld	a, -2 (ix)
      001A9A D6 0C            [ 7] 5866 	sub	a, #0x0c
      001A9C D2r3Ar1C         [10] 5867 	jp	NC, 00124$
                                   5868 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A9F DD 36 FF 02      [19] 5869 	ld	-1 (ix), #0x02
      001AA3                       5870 00211$:
      001AA3 DD 7E FF         [19] 5871 	ld	a, -1 (ix)
      001AA6 D6 06            [ 7] 5872 	sub	a, #0x06
      001AA8 D2r34r1C         [10] 5873 	jp	NC, 00215$
                                   5874 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001AAB DD 4E FF         [19] 5875 	ld	c, -1 (ix)
      001AAE 06 00            [ 7] 5876 	ld	b, #0x00
      001AB0 69               [ 4] 5877 	ld	l, c
      001AB1 60               [ 4] 5878 	ld	h, b
      001AB2 29               [11] 5879 	add	hl, hl
      001AB3 09               [11] 5880 	add	hl, bc
      001AB4 29               [11] 5881 	add	hl, hl
      001AB5 29               [11] 5882 	add	hl, hl
      001AB6 DD 75 F0         [19] 5883 	ld	-16 (ix), l
      001AB9 DD 74 F1         [19] 5884 	ld	-15 (ix), h
      001ABC 3Er48            [ 7] 5885 	ld	a, #<(_playfieldTemp)
      001ABE DD 86 F0         [19] 5886 	add	a, -16 (ix)
      001AC1 4F               [ 4] 5887 	ld	c, a
      001AC2 3Es00            [ 7] 5888 	ld	a, #>(_playfieldTemp)
      001AC4 DD 8E F1         [19] 5889 	adc	a, -15 (ix)
      001AC7 47               [ 4] 5890 	ld	b, a
      001AC8 79               [ 4] 5891 	ld	a, c
      001AC9 DD 86 FE         [19] 5892 	add	a, -2 (ix)
      001ACC DD 77 F2         [19] 5893 	ld	-14 (ix), a
      001ACF 78               [ 4] 5894 	ld	a, b
      001AD0 CE 00            [ 7] 5895 	adc	a, #0x00
      001AD2 DD 77 F3         [19] 5896 	ld	-13 (ix), a
      001AD5 DD 6E F2         [19] 5897 	ld	l, -14 (ix)
      001AD8 DD 66 F3         [19] 5898 	ld	h, -13 (ix)
      001ADB 5E               [ 7] 5899 	ld	e, (hl)
                                   5900 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001ADC DD 56 FF         [19] 5901 	ld	d, -1 (ix)
      001ADF DD 66 FE         [19] 5902 	ld	h, -2 (ix)
      001AE2 6A               [ 4] 5903 	ld	l, d
      001AE3 2D               [ 4] 5904 	dec	l
      001AE4 2D               [ 4] 5905 	dec	l
      001AE5 7C               [ 4] 5906 	ld	a, h
      001AE6 C6 FE            [ 7] 5907 	add	a, #0xfe
      001AE8 DD 77 F4         [19] 5908 	ld	-12 (ix), a
      001AEB 15               [ 4] 5909 	dec	d
      001AEC 7C               [ 4] 5910 	ld	a, h
      001AED C6 FF            [ 7] 5911 	add	a, #0xff
      001AEF DD 77 F5         [19] 5912 	ld	-11 (ix), a
      001AF2 D5               [11] 5913 	push	de
      001AF3 5D               [ 4] 5914 	ld	e, l
      001AF4 7B               [ 4] 5915 	ld	a, e
      001AF5 07               [ 4] 5916 	rlca
      001AF6 9F               [ 4] 5917 	sbc	a, a
      001AF7 57               [ 4] 5918 	ld	d, a
      001AF8 6B               [ 4] 5919 	ld	l, e
      001AF9 62               [ 4] 5920 	ld	h, d
      001AFA 29               [11] 5921 	add	hl, hl
      001AFB 19               [11] 5922 	add	hl, de
      001AFC 29               [11] 5923 	add	hl, hl
      001AFD 29               [11] 5924 	add	hl, hl
      001AFE D1               [10] 5925 	pop	de
      001AFF DD 75 F6         [19] 5926 	ld	-10 (ix), l
      001B02 DD 74 F7         [19] 5927 	ld	-9 (ix), h
      001B05 D5               [11] 5928 	push	de
      001B06 5A               [ 4] 5929 	ld	e, d
      001B07 7B               [ 4] 5930 	ld	a, e
      001B08 07               [ 4] 5931 	rlca
      001B09 9F               [ 4] 5932 	sbc	a, a
      001B0A 57               [ 4] 5933 	ld	d, a
      001B0B 6B               [ 4] 5934 	ld	l, e
      001B0C 62               [ 4] 5935 	ld	h, d
      001B0D 29               [11] 5936 	add	hl, hl
      001B0E 19               [11] 5937 	add	hl, de
      001B0F 29               [11] 5938 	add	hl, hl
      001B10 29               [11] 5939 	add	hl, hl
      001B11 D1               [10] 5940 	pop	de
      001B12 DD 75 F8         [19] 5941 	ld	-8 (ix), l
      001B15 DD 74 F9         [19] 5942 	ld	-7 (ix), h
      001B18 3Er48            [ 7] 5943 	ld	a, #<(_playfieldTemp)
      001B1A DD 86 F6         [19] 5944 	add	a, -10 (ix)
      001B1D DD 77 FA         [19] 5945 	ld	-6 (ix), a
      001B20 3Es00            [ 7] 5946 	ld	a, #>(_playfieldTemp)
      001B22 DD 8E F7         [19] 5947 	adc	a, -9 (ix)
      001B25 DD 77 FB         [19] 5948 	ld	-5 (ix), a
      001B28 3Er48            [ 7] 5949 	ld	a, #<(_playfieldTemp)
      001B2A DD 86 F8         [19] 5950 	add	a, -8 (ix)
      001B2D 57               [ 4] 5951 	ld	d, a
      001B2E 3Es00            [ 7] 5952 	ld	a, #>(_playfieldTemp)
      001B30 DD 8E F9         [19] 5953 	adc	a, -7 (ix)
      001B33 6F               [ 4] 5954 	ld	l, a
      001B34 7A               [ 4] 5955 	ld	a, d
      001B35 DD 86 F5         [19] 5956 	add	a, -11 (ix)
      001B38 DD 77 FC         [19] 5957 	ld	-4 (ix), a
      001B3B 7D               [ 4] 5958 	ld	a, l
      001B3C CE 00            [ 7] 5959 	adc	a, #0x00
      001B3E DD 77 FD         [19] 5960 	ld	-3 (ix), a
                                   5961 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001B41 7B               [ 4] 5962 	ld	a, e
      001B42 B7               [ 4] 5963 	or	a, a
      001B43 28 74            [12] 5964 	jr	Z, 00116$
                                   5965 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001B45 DD 7E FA         [19] 5966 	ld	a, -6 (ix)
      001B48 DD 86 F4         [19] 5967 	add	a, -12 (ix)
      001B4B 6F               [ 4] 5968 	ld	l, a
      001B4C DD 7E FB         [19] 5969 	ld	a, -5 (ix)
      001B4F CE 00            [ 7] 5970 	adc	a, #0x00
      001B51 67               [ 4] 5971 	ld	h, a
      001B52 56               [ 7] 5972 	ld	d, (hl)
      001B53 DD 6E FC         [19] 5973 	ld	l, -4 (ix)
      001B56 DD 66 FD         [19] 5974 	ld	h, -3 (ix)
      001B59 6E               [ 7] 5975 	ld	l, (hl)
      001B5A 7A               [ 4] 5976 	ld	a, d
      001B5B 95               [ 4] 5977 	sub	a, l
      001B5C 20 5B            [12] 5978 	jr	NZ, 00116$
                                   5979 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001B5E 7B               [ 4] 5980 	ld	a, e
      001B5F 95               [ 4] 5981 	sub	a, l
      001B60 20 57            [12] 5982 	jr	NZ, 00116$
                                   5983 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001B62 DD 36 EF 01      [19] 5984 	ld	-17 (ix), #0x01
                                   5985 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001B66 3Er00            [ 7] 5986 	ld	a, #<(_playfield)
      001B68 DD 86 F6         [19] 5987 	add	a, -10 (ix)
      001B6B 5F               [ 4] 5988 	ld	e, a
      001B6C 3Es00            [ 7] 5989 	ld	a, #>(_playfield)
      001B6E DD 8E F7         [19] 5990 	adc	a, -9 (ix)
      001B71 67               [ 4] 5991 	ld	h, a
      001B72 7B               [ 4] 5992 	ld	a, e
      001B73 DD 86 F4         [19] 5993 	add	a, -12 (ix)
      001B76 6F               [ 4] 5994 	ld	l, a
      001B77 30 01            [12] 5995 	jr	NC, 00632$
      001B79 24               [ 4] 5996 	inc	h
      001B7A                       5997 00632$:
      001B7A CB FA            [ 8] 5998 	set	7, d
      001B7C 72               [ 7] 5999 	ld	(hl), d
                                   6000 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001B7D 3Er00            [ 7] 6001 	ld	a, #<(_playfield)
      001B7F DD 86 F8         [19] 6002 	add	a, -8 (ix)
      001B82 5F               [ 4] 6003 	ld	e, a
      001B83 3Es00            [ 7] 6004 	ld	a, #>(_playfield)
      001B85 DD 8E F9         [19] 6005 	adc	a, -7 (ix)
      001B88 57               [ 4] 6006 	ld	d, a
      001B89 7B               [ 4] 6007 	ld	a, e
      001B8A DD 86 F5         [19] 6008 	add	a, -11 (ix)
      001B8D 5F               [ 4] 6009 	ld	e, a
      001B8E 30 01            [12] 6010 	jr	NC, 00633$
      001B90 14               [ 4] 6011 	inc	d
      001B91                       6012 00633$:
      001B91 DD 6E FC         [19] 6013 	ld	l, -4 (ix)
      001B94 DD 66 FD         [19] 6014 	ld	h, -3 (ix)
      001B97 7E               [ 7] 6015 	ld	a, (hl)
      001B98 CB FF            [ 8] 6016 	set	7, a
      001B9A 12               [ 7] 6017 	ld	(de), a
                                   6018 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001B9B 3Er00            [ 7] 6019 	ld	a, #<(_playfield)
      001B9D DD 86 F0         [19] 6020 	add	a, -16 (ix)
      001BA0 5F               [ 4] 6021 	ld	e, a
      001BA1 3Es00            [ 7] 6022 	ld	a, #>(_playfield)
      001BA3 DD 8E F1         [19] 6023 	adc	a, -15 (ix)
      001BA6 57               [ 4] 6024 	ld	d, a
      001BA7 7B               [ 4] 6025 	ld	a, e
      001BA8 DD 86 FE         [19] 6026 	add	a, -2 (ix)
      001BAB 5F               [ 4] 6027 	ld	e, a
      001BAC 30 01            [12] 6028 	jr	NC, 00634$
      001BAE 14               [ 4] 6029 	inc	d
      001BAF                       6030 00634$:
      001BAF DD 6E F2         [19] 6031 	ld	l, -14 (ix)
      001BB2 DD 66 F3         [19] 6032 	ld	h, -13 (ix)
      001BB5 7E               [ 7] 6033 	ld	a, (hl)
      001BB6 CB FF            [ 8] 6034 	set	7, a
      001BB8 12               [ 7] 6035 	ld	(de), a
      001BB9                       6036 00116$:
                                   6037 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001BB9 DD 6E F4         [19] 6038 	ld	l, -12 (ix)
      001BBC 26 00            [ 7] 6039 	ld	h, #0x00
      001BBE 09               [11] 6040 	add	hl, bc
      001BBF 4E               [ 7] 6041 	ld	c, (hl)
      001BC0 79               [ 4] 6042 	ld	a, c
      001BC1 B7               [ 4] 6043 	or	a, a
      001BC2 28 6A            [12] 6044 	jr	Z, 00212$
                                   6045 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001BC4 DD 7E FA         [19] 6046 	ld	a, -6 (ix)
      001BC7 DD 86 FE         [19] 6047 	add	a, -2 (ix)
      001BCA 5F               [ 4] 6048 	ld	e, a
      001BCB DD 7E FB         [19] 6049 	ld	a, -5 (ix)
      001BCE CE 00            [ 7] 6050 	adc	a, #0x00
      001BD0 57               [ 4] 6051 	ld	d, a
      001BD1 DD 6E FC         [19] 6052 	ld	l, -4 (ix)
      001BD4 DD 66 FD         [19] 6053 	ld	h, -3 (ix)
      001BD7 46               [ 7] 6054 	ld	b, (hl)
      001BD8 1A               [ 7] 6055 	ld	a, (de)
      001BD9 B8               [ 4] 6056 	cp	a, b
      001BDA 20 52            [12] 6057 	jr	NZ, 00212$
                                   6058 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001BDC 91               [ 4] 6059 	sub	a, c
      001BDD 20 4F            [12] 6060 	jr	NZ, 00212$
                                   6061 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001BDF DD 36 EF 01      [19] 6062 	ld	-17 (ix), #0x01
                                   6063 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001BE3 3Er00            [ 7] 6064 	ld	a, #<(_playfield)
      001BE5 DD 86 F0         [19] 6065 	add	a, -16 (ix)
      001BE8 47               [ 4] 6066 	ld	b, a
      001BE9 3Es00            [ 7] 6067 	ld	a, #>(_playfield)
      001BEB DD 8E F1         [19] 6068 	adc	a, -15 (ix)
      001BEE 67               [ 4] 6069 	ld	h, a
      001BEF 78               [ 4] 6070 	ld	a, b
      001BF0 DD 86 F4         [19] 6071 	add	a, -12 (ix)
      001BF3 6F               [ 4] 6072 	ld	l, a
      001BF4 30 01            [12] 6073 	jr	NC, 00639$
      001BF6 24               [ 4] 6074 	inc	h
      001BF7                       6075 00639$:
      001BF7 CB F9            [ 8] 6076 	set	7, c
      001BF9 71               [ 7] 6077 	ld	(hl), c
                                   6078 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001BFA 3Er00            [ 7] 6079 	ld	a, #<(_playfield)
      001BFC DD 86 F8         [19] 6080 	add	a, -8 (ix)
      001BFF 4F               [ 4] 6081 	ld	c, a
      001C00 3Es00            [ 7] 6082 	ld	a, #>(_playfield)
      001C02 DD 8E F9         [19] 6083 	adc	a, -7 (ix)
      001C05 47               [ 4] 6084 	ld	b, a
      001C06 79               [ 4] 6085 	ld	a, c
      001C07 DD 86 F5         [19] 6086 	add	a, -11 (ix)
      001C0A 4F               [ 4] 6087 	ld	c, a
      001C0B 30 01            [12] 6088 	jr	NC, 00640$
      001C0D 04               [ 4] 6089 	inc	b
      001C0E                       6090 00640$:
      001C0E DD 6E FC         [19] 6091 	ld	l, -4 (ix)
      001C11 DD 66 FD         [19] 6092 	ld	h, -3 (ix)
      001C14 7E               [ 7] 6093 	ld	a, (hl)
      001C15 CB FF            [ 8] 6094 	set	7, a
      001C17 02               [ 7] 6095 	ld	(bc), a
                                   6096 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001C18 3Er00            [ 7] 6097 	ld	a, #<(_playfield)
      001C1A DD 86 F6         [19] 6098 	add	a, -10 (ix)
      001C1D 4F               [ 4] 6099 	ld	c, a
      001C1E 3Es00            [ 7] 6100 	ld	a, #>(_playfield)
      001C20 DD 8E F7         [19] 6101 	adc	a, -9 (ix)
      001C23 47               [ 4] 6102 	ld	b, a
      001C24 DD 6E FE         [19] 6103 	ld	l, -2 (ix)
      001C27 26 00            [ 7] 6104 	ld	h, #0x00
      001C29 09               [11] 6105 	add	hl, bc
      001C2A 1A               [ 7] 6106 	ld	a, (de)
      001C2B CB FF            [ 8] 6107 	set	7, a
      001C2D 77               [ 7] 6108 	ld	(hl), a
      001C2E                       6109 00212$:
                                   6110 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001C2E DD 34 FF         [23] 6111 	inc	-1 (ix)
      001C31 C3rA3r1A         [10] 6112 	jp	00211$
      001C34                       6113 00215$:
                                   6114 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001C34 DD 34 FE         [23] 6115 	inc	-2 (ix)
      001C37 C3r97r1A         [10] 6116 	jp	00214$
      001C3A                       6117 00124$:
                                   6118 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001C3A DD 7E EF         [19] 6119 	ld	a, -17 (ix)
      001C3D B7               [ 4] 6120 	or	a, a
      001C3E CArE6r1F         [10] 6121 	jp	Z, 00190$
                                   6122 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001C41 DD 36 F5 FF      [19] 6123 	ld	-11 (ix), #0xff
      001C45 DD 36 F6 00      [19] 6124 	ld	-10 (ix), #0
                                   6125 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001C49 DD 36 F7 05      [19] 6126 	ld	-9 (ix), #0x05
      001C4D DD 36 F8 00      [19] 6127 	ld	-8 (ix), #0
                                   6128 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001C51 DD 36 F9 0B      [19] 6129 	ld	-7 (ix), #0x0b
      001C55 DD 36 FA 00      [19] 6130 	ld	-6 (ix), #0
                                   6131 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001C59 CDrC8r0A         [17] 6132 	call	_HideArrowSprite
                                   6133 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001C5C CDr16r18         [17] 6134 	call	_SoundFx_2
                                   6135 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001C5F DD 36 FB 00      [19] 6136 	ld	-5 (ix), #0
                                   6137 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C63 DD 36 FF 00      [19] 6138 	ld	-1 (ix), #0
      001C67                       6139 00220$:
      001C67 DD 7E FF         [19] 6140 	ld	a, -1 (ix)
      001C6A D6 0C            [ 7] 6141 	sub	a, #0x0c
      001C6C 30 5F            [12] 6142 	jr	NC, 00291$
                                   6143 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C6E DD 5E FB         [19] 6144 	ld	e, -5 (ix)
      001C71 06 00            [ 7] 6145 	ld	b, #0x00
      001C73                       6146 00217$:
      001C73 78               [ 4] 6147 	ld	a, b
      001C74 D6 06            [ 7] 6148 	sub	a, #0x06
      001C76 30 4D            [12] 6149 	jr	NC, 00320$
                                   6150 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001C78 D5               [11] 6151 	push	de
      001C79 58               [ 4] 6152 	ld	e, b
      001C7A 16 00            [ 7] 6153 	ld	d, #0x00
      001C7C 6B               [ 4] 6154 	ld	l, e
      001C7D 62               [ 4] 6155 	ld	h, d
      001C7E 29               [11] 6156 	add	hl, hl
      001C7F 19               [11] 6157 	add	hl, de
      001C80 29               [11] 6158 	add	hl, hl
      001C81 29               [11] 6159 	add	hl, hl
      001C82 11r00r00         [10] 6160 	ld	de, #_playfield
      001C85 19               [11] 6161 	add	hl, de
      001C86 D1               [10] 6162 	pop	de
      001C87 7D               [ 4] 6163 	ld	a, l
      001C88 DD 86 FF         [19] 6164 	add	a, -1 (ix)
      001C8B 6F               [ 4] 6165 	ld	l, a
      001C8C 30 01            [12] 6166 	jr	NC, 00641$
      001C8E 24               [ 4] 6167 	inc	h
      001C8F                       6168 00641$:
      001C8F 7E               [ 7] 6169 	ld	a, (hl)
      001C90 07               [ 4] 6170 	rlca
      001C91 30 2F            [12] 6171 	jr	NC, 00218$
                                   6172 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001C93 1C               [ 4] 6173 	inc	e
                                   6174 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001C94 78               [ 4] 6175 	ld	a, b
      001C95 DD 96 F7         [19] 6176 	sub	a, -9 (ix)
      001C98 30 03            [12] 6177 	jr	NC, 00126$
      001C9A DD 70 F7         [19] 6178 	ld	-9 (ix), b
      001C9D                       6179 00126$:
                                   6180 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001C9D DD 7E F8         [19] 6181 	ld	a, -8 (ix)
      001CA0 90               [ 4] 6182 	sub	a, b
      001CA1 30 03            [12] 6183 	jr	NC, 00128$
      001CA3 DD 70 F8         [19] 6184 	ld	-8 (ix), b
      001CA6                       6185 00128$:
                                   6186 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001CA6 DD 7E FF         [19] 6187 	ld	a, -1 (ix)
      001CA9 DD 96 F9         [19] 6188 	sub	a, -7 (ix)
      001CAC 30 06            [12] 6189 	jr	NC, 00130$
      001CAE DD 7E FF         [19] 6190 	ld	a, -1 (ix)
      001CB1 DD 77 F9         [19] 6191 	ld	-7 (ix), a
      001CB4                       6192 00130$:
                                   6193 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001CB4 DD 7E FA         [19] 6194 	ld	a, -6 (ix)
      001CB7 DD 96 FF         [19] 6195 	sub	a, -1 (ix)
      001CBA 30 06            [12] 6196 	jr	NC, 00218$
      001CBC DD 7E FF         [19] 6197 	ld	a, -1 (ix)
      001CBF DD 77 FA         [19] 6198 	ld	-6 (ix), a
      001CC2                       6199 00218$:
                                   6200 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001CC2 04               [ 4] 6201 	inc	b
      001CC3 18 AE            [12] 6202 	jr	00217$
      001CC5                       6203 00320$:
      001CC5 DD 73 FB         [19] 6204 	ld	-5 (ix), e
                                   6205 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001CC8 DD 34 FF         [23] 6206 	inc	-1 (ix)
      001CCB 18 9A            [12] 6207 	jr	00220$
                                   6208 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001CCD                       6209 00291$:
      001CCD DD 36 FF 48      [19] 6210 	ld	-1 (ix), #0x48
      001CD1                       6211 00166$:
      001CD1 DD 4E FF         [19] 6212 	ld	c, -1 (ix)
      001CD4 DD 35 FF         [23] 6213 	dec	-1 (ix)
      001CD7 79               [ 4] 6214 	ld	a, c
      001CD8 B7               [ 4] 6215 	or	a, a
      001CD9 CAr81r1E         [10] 6216 	jp	Z, 00168$
                                   6217 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001CDC ED 5B 9E FC      [20] 6218 	ld	de, (_JIFFY)
                                   6219 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001CE0                       6220 00137$:
      001CE0 2A 9E FC         [16] 6221 	ld	hl, (_JIFFY)
      001CE3 BF               [ 4] 6222 	cp	a, a
      001CE4 ED 52            [15] 6223 	sbc	hl, de
      001CE6 28 F8            [12] 6224 	jr	Z, 00137$
                                   6225 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001CE8 DD 7E FB         [19] 6226 	ld	a, -5 (ix)
      001CEB D6 03            [ 7] 6227 	sub	a, #0x03
      001CED DAr9Fr1D         [10] 6228 	jp	C, 00301$
                                   6229 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001CF0 DD 7E FB         [19] 6230 	ld	a, -5 (ix)
      001CF3 D6 07            [ 7] 6231 	sub	a, #0x07
      001CF5 38 04            [12] 6232 	jr	C, 00141$
      001CF7 DD 36 FB 07      [19] 6233 	ld	-5 (ix), #0x07
      001CFB                       6234 00141$:
                                   6235 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001CFB DD 7E F5         [19] 6236 	ld	a, -11 (ix)
      001CFE 3C               [ 4] 6237 	inc	a
      001CFF 20 7B            [12] 6238 	jr	NZ, 00143$
                                   6239 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001D01 DD 6E F8         [19] 6240 	ld	l, -8 (ix)
      001D04 26 00            [ 7] 6241 	ld	h, #0x00
      001D06 29               [11] 6242 	add	hl, hl
      001D07 29               [11] 6243 	add	hl, hl
      001D08 29               [11] 6244 	add	hl, hl
      001D09 29               [11] 6245 	add	hl, hl
      001D0A DD 5E F7         [19] 6246 	ld	e, -9 (ix)
      001D0D 16 00            [ 7] 6247 	ld	d, #0x00
      001D0F EB               [ 4] 6248 	ex	de, hl
      001D10 29               [11] 6249 	add	hl, hl
      001D11 29               [11] 6250 	add	hl, hl
      001D12 29               [11] 6251 	add	hl, hl
      001D13 29               [11] 6252 	add	hl, hl
      001D14 EB               [ 4] 6253 	ex	de, hl
      001D15 BF               [ 4] 6254 	cp	a, a
      001D16 ED 52            [15] 6255 	sbc	hl, de
      001D18 4D               [ 4] 6256 	ld	c, l
      001D19 44               [ 4] 6257 	ld	b, h
      001D1A CB 7C            [ 8] 6258 	bit	7, h
      001D1C 28 03            [12] 6259 	jr	Z, 00239$
      001D1E 4D               [ 4] 6260 	ld	c, l
      001D1F 44               [ 4] 6261 	ld	b, h
      001D20 03               [ 6] 6262 	inc	bc
      001D21                       6263 00239$:
      001D21 CB 28            [ 8] 6264 	sra	b
      001D23 CB 19            [ 8] 6265 	rr	c
      001D25 79               [ 4] 6266 	ld	a, c
      001D26 C6 50            [ 7] 6267 	add	a, #0x50
      001D28 DD 6E F7         [19] 6268 	ld	l, -9 (ix)
      001D2B 29               [11] 6269 	add	hl, hl
      001D2C 29               [11] 6270 	add	hl, hl
      001D2D 29               [11] 6271 	add	hl, hl
      001D2E 29               [11] 6272 	add	hl, hl
      001D2F 85               [ 4] 6273 	add	a, l
      001D30 DD 77 F5         [19] 6274 	ld	-11 (ix), a
                                   6275 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001D33 DD 6E F9         [19] 6276 	ld	l, -7 (ix)
      001D36 26 00            [ 7] 6277 	ld	h, #0x00
      001D38 29               [11] 6278 	add	hl, hl
      001D39 29               [11] 6279 	add	hl, hl
      001D3A 29               [11] 6280 	add	hl, hl
      001D3B 29               [11] 6281 	add	hl, hl
      001D3C DD 5E FA         [19] 6282 	ld	e, -6 (ix)
      001D3F 16 00            [ 7] 6283 	ld	d, #0x00
      001D41 EB               [ 4] 6284 	ex	de, hl
      001D42 29               [11] 6285 	add	hl, hl
      001D43 29               [11] 6286 	add	hl, hl
      001D44 29               [11] 6287 	add	hl, hl
      001D45 29               [11] 6288 	add	hl, hl
      001D46 EB               [ 4] 6289 	ex	de, hl
      001D47 BF               [ 4] 6290 	cp	a, a
      001D48 ED 52            [15] 6291 	sbc	hl, de
      001D4A 4D               [ 4] 6292 	ld	c, l
      001D4B 44               [ 4] 6293 	ld	b, h
      001D4C CB 7C            [ 8] 6294 	bit	7, h
      001D4E 28 03            [12] 6295 	jr	Z, 00240$
      001D50 23               [ 6] 6296 	inc	hl
      001D51 4D               [ 4] 6297 	ld	c, l
      001D52 44               [ 4] 6298 	ld	b, h
      001D53                       6299 00240$:
      001D53 CB 28            [ 8] 6300 	sra	b
      001D55 CB 19            [ 8] 6301 	rr	c
      001D57 DD 7E FA         [19] 6302 	ld	a, -6 (ix)
      001D5A 87               [ 4] 6303 	add	a, a
      001D5B 87               [ 4] 6304 	add	a, a
      001D5C 87               [ 4] 6305 	add	a, a
      001D5D 87               [ 4] 6306 	add	a, a
      001D5E 81               [ 4] 6307 	add	a, c
      001D5F DD 77 F6         [19] 6308 	ld	-10 (ix), a
                                   6309 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001D62 26 01            [ 7] 6310 	ld	h, #0x01
      001D64 DD 6E F6         [19] 6311 	ld	l, -10 (ix)
      001D67 E5               [11] 6312 	push	hl
      001D68 DD 66 F5         [19] 6313 	ld	h, -11 (ix)
      001D6B DD 6E 04         [19] 6314 	ld	l, 4 (ix)
      001D6E E5               [11] 6315 	push	hl
      001D6F DD 7E FB         [19] 6316 	ld	a, -5 (ix)
      001D72 F5               [11] 6317 	push	af
      001D73 33               [ 6] 6318 	inc	sp
      001D74 CDrD6r0A         [17] 6319 	call	_DrawHitSprite
      001D77 F1               [10] 6320 	pop	af
      001D78 F1               [10] 6321 	pop	af
      001D79 33               [ 6] 6322 	inc	sp
      001D7A 18 23            [12] 6323 	jr	00301$
      001D7C                       6324 00143$:
                                   6325 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001D7C DD 4E FF         [19] 6326 	ld	c, -1 (ix)
      001D7F 3E 48            [ 7] 6327 	ld	a, #0x48
      001D81 91               [ 4] 6328 	sub	a, c
      001D82 4F               [ 4] 6329 	ld	c, a
      001D83 DD 7E F6         [19] 6330 	ld	a, -10 (ix)
      001D86 91               [ 4] 6331 	sub	a, c
      001D87 26 00            [ 7] 6332 	ld	h, #0x00
      001D89 E5               [11] 6333 	push	hl
      001D8A 33               [ 6] 6334 	inc	sp
      001D8B F5               [11] 6335 	push	af
      001D8C 33               [ 6] 6336 	inc	sp
      001D8D DD 66 F5         [19] 6337 	ld	h, -11 (ix)
      001D90 DD 6E 04         [19] 6338 	ld	l, 4 (ix)
      001D93 E5               [11] 6339 	push	hl
      001D94 DD 7E FB         [19] 6340 	ld	a, -5 (ix)
      001D97 F5               [11] 6341 	push	af
      001D98 33               [ 6] 6342 	inc	sp
      001D99 CDrD6r0A         [17] 6343 	call	_DrawHitSprite
      001D9C F1               [10] 6344 	pop	af
      001D9D F1               [10] 6345 	pop	af
      001D9E 33               [ 6] 6346 	inc	sp
                                   6347 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D9F                       6348 00301$:
      001D9F 3E 0C            [ 7] 6349 	ld	a, #0x0c
      001DA1 DD 96 FF         [19] 6350 	sub	a, -1 (ix)
      001DA4 3E 00            [ 7] 6351 	ld	a, #0x00
      001DA6 17               [ 4] 6352 	rla
      001DA7 5F               [ 4] 6353 	ld	e, a
      001DA8 3E 09            [ 7] 6354 	ld	a, #0x09
      001DAA DD 96 FF         [19] 6355 	sub	a, -1 (ix)
      001DAD 3E 00            [ 7] 6356 	ld	a, #0x00
      001DAF 17               [ 4] 6357 	rla
      001DB0 4F               [ 4] 6358 	ld	c, a
      001DB1 3E 06            [ 7] 6359 	ld	a, #0x06
      001DB3 DD 96 FF         [19] 6360 	sub	a, -1 (ix)
      001DB6 3E 00            [ 7] 6361 	ld	a, #0x00
      001DB8 17               [ 4] 6362 	rla
      001DB9 DD 77 FC         [19] 6363 	ld	-4 (ix), a
      001DBC 3E 03            [ 7] 6364 	ld	a, #0x03
      001DBE DD 96 FF         [19] 6365 	sub	a, -1 (ix)
      001DC1 3E 00            [ 7] 6366 	ld	a, #0x00
      001DC3 17               [ 4] 6367 	rla
      001DC4 DD 77 FD         [19] 6368 	ld	-3 (ix), a
      001DC7 06 00            [ 7] 6369 	ld	b, #0x00
      001DC9                       6370 00226$:
      001DC9 78               [ 4] 6371 	ld	a, b
      001DCA D6 0C            [ 7] 6372 	sub	a, #0x0c
      001DCC D2rD1r1C         [10] 6373 	jp	NC, 00166$
                                   6374 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DCF 16 00            [ 7] 6375 	ld	d, #0x00
      001DD1                       6376 00223$:
      001DD1 7A               [ 4] 6377 	ld	a, d
      001DD2 D6 06            [ 7] 6378 	sub	a, #0x06
      001DD4 D2r7Dr1E         [10] 6379 	jp	NC, 00227$
                                   6380 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001DD7 D5               [11] 6381 	push	de
      001DD8 5A               [ 4] 6382 	ld	e, d
      001DD9 16 00            [ 7] 6383 	ld	d, #0x00
      001DDB 6B               [ 4] 6384 	ld	l, e
      001DDC 62               [ 4] 6385 	ld	h, d
      001DDD 29               [11] 6386 	add	hl, hl
      001DDE 19               [11] 6387 	add	hl, de
      001DDF 29               [11] 6388 	add	hl, hl
      001DE0 29               [11] 6389 	add	hl, hl
      001DE1 11r00r00         [10] 6390 	ld	de, #_playfield
      001DE4 19               [11] 6391 	add	hl, de
      001DE5 D1               [10] 6392 	pop	de
      001DE6 7D               [ 4] 6393 	ld	a, l
      001DE7 80               [ 4] 6394 	add	a, b
      001DE8 6F               [ 4] 6395 	ld	l, a
      001DE9 30 01            [12] 6396 	jr	NC, 00646$
      001DEB 24               [ 4] 6397 	inc	h
      001DEC                       6398 00646$:
      001DEC 7E               [ 7] 6399 	ld	a, (hl)
      001DED DD 77 FE         [19] 6400 	ld	-2 (ix), a
      001DF0 DD CB FE 7E      [20] 6401 	bit	7, -2 (ix)
      001DF4 CAr79r1E         [10] 6402 	jp	Z,00224$
                                   6403 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001DF7 7B               [ 4] 6404 	ld	a, e
      001DF8 B7               [ 4] 6405 	or	a, a
      001DF9 28 2C            [12] 6406 	jr	Z, 00160$
                                   6407 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001DFB 2A 9E FC         [16] 6408 	ld	hl, (_JIFFY)
      001DFE 7D               [ 4] 6409 	ld	a, l
      001DFF E6 03            [ 7] 6410 	and	a, #0x03
      001E01 28 14            [12] 6411 	jr	Z, 00148$
                                   6412 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001E03 DD 7E FE         [19] 6413 	ld	a, -2 (ix)
      001E06 CB BF            [ 8] 6414 	res	7, a
      001E08 C5               [11] 6415 	push	bc
      001E09 D5               [11] 6416 	push	de
      001E0A F5               [11] 6417 	push	af
      001E0B 33               [ 6] 6418 	inc	sp
      001E0C 4A               [ 4] 6419 	ld	c, d
      001E0D C5               [11] 6420 	push	bc
      001E0E CDrE1r16         [17] 6421 	call	_DrawBlock
      001E11 F1               [10] 6422 	pop	af
      001E12 33               [ 6] 6423 	inc	sp
      001E13 D1               [10] 6424 	pop	de
      001E14 C1               [10] 6425 	pop	bc
      001E15 18 62            [12] 6426 	jr	00224$
      001E17                       6427 00148$:
                                   6428 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001E17 C5               [11] 6429 	push	bc
      001E18 D5               [11] 6430 	push	de
      001E19 AF               [ 4] 6431 	xor	a, a
      001E1A F5               [11] 6432 	push	af
      001E1B 33               [ 6] 6433 	inc	sp
      001E1C 4A               [ 4] 6434 	ld	c, d
      001E1D C5               [11] 6435 	push	bc
      001E1E CDrE1r16         [17] 6436 	call	_DrawBlock
      001E21 F1               [10] 6437 	pop	af
      001E22 33               [ 6] 6438 	inc	sp
      001E23 D1               [10] 6439 	pop	de
      001E24 C1               [10] 6440 	pop	bc
      001E25 18 52            [12] 6441 	jr	00224$
      001E27                       6442 00160$:
                                   6443 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001E27 79               [ 4] 6444 	ld	a, c
      001E28 B7               [ 4] 6445 	or	a, a
      001E29 28 11            [12] 6446 	jr	Z, 00157$
      001E2B C5               [11] 6447 	push	bc
      001E2C D5               [11] 6448 	push	de
      001E2D 3E 2A            [ 7] 6449 	ld	a, #0x2a
      001E2F F5               [11] 6450 	push	af
      001E30 33               [ 6] 6451 	inc	sp
      001E31 4A               [ 4] 6452 	ld	c, d
      001E32 C5               [11] 6453 	push	bc
      001E33 CDr49r17         [17] 6454 	call	_DrawBlock_SameTile
      001E36 F1               [10] 6455 	pop	af
      001E37 33               [ 6] 6456 	inc	sp
      001E38 D1               [10] 6457 	pop	de
      001E39 C1               [10] 6458 	pop	bc
      001E3A 18 3D            [12] 6459 	jr	00224$
      001E3C                       6460 00157$:
                                   6461 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001E3C DD 7E FC         [19] 6462 	ld	a, -4 (ix)
      001E3F B7               [ 4] 6463 	or	a, a
      001E40 28 11            [12] 6464 	jr	Z, 00154$
      001E42 C5               [11] 6465 	push	bc
      001E43 D5               [11] 6466 	push	de
      001E44 3E 2B            [ 7] 6467 	ld	a, #0x2b
      001E46 F5               [11] 6468 	push	af
      001E47 33               [ 6] 6469 	inc	sp
      001E48 4A               [ 4] 6470 	ld	c, d
      001E49 C5               [11] 6471 	push	bc
      001E4A CDr49r17         [17] 6472 	call	_DrawBlock_SameTile
      001E4D F1               [10] 6473 	pop	af
      001E4E 33               [ 6] 6474 	inc	sp
      001E4F D1               [10] 6475 	pop	de
      001E50 C1               [10] 6476 	pop	bc
      001E51 18 26            [12] 6477 	jr	00224$
      001E53                       6478 00154$:
                                   6479 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001E53 DD 7E FD         [19] 6480 	ld	a, -3 (ix)
      001E56 B7               [ 4] 6481 	or	a, a
      001E57 28 11            [12] 6482 	jr	Z, 00151$
      001E59 C5               [11] 6483 	push	bc
      001E5A D5               [11] 6484 	push	de
      001E5B 3E 2C            [ 7] 6485 	ld	a, #0x2c
      001E5D F5               [11] 6486 	push	af
      001E5E 33               [ 6] 6487 	inc	sp
      001E5F 4A               [ 4] 6488 	ld	c, d
      001E60 C5               [11] 6489 	push	bc
      001E61 CDr49r17         [17] 6490 	call	_DrawBlock_SameTile
      001E64 F1               [10] 6491 	pop	af
      001E65 33               [ 6] 6492 	inc	sp
      001E66 D1               [10] 6493 	pop	de
      001E67 C1               [10] 6494 	pop	bc
      001E68 18 0F            [12] 6495 	jr	00224$
      001E6A                       6496 00151$:
                                   6497 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001E6A C5               [11] 6498 	push	bc
      001E6B D5               [11] 6499 	push	de
      001E6C 3E 2D            [ 7] 6500 	ld	a, #0x2d
      001E6E F5               [11] 6501 	push	af
      001E6F 33               [ 6] 6502 	inc	sp
      001E70 4A               [ 4] 6503 	ld	c, d
      001E71 C5               [11] 6504 	push	bc
      001E72 CDr49r17         [17] 6505 	call	_DrawBlock_SameTile
      001E75 F1               [10] 6506 	pop	af
      001E76 33               [ 6] 6507 	inc	sp
      001E77 D1               [10] 6508 	pop	de
      001E78 C1               [10] 6509 	pop	bc
      001E79                       6510 00224$:
                                   6511 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E79 14               [ 4] 6512 	inc	d
      001E7A C3rD1r1D         [10] 6513 	jp	00223$
      001E7D                       6514 00227$:
                                   6515 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E7D 04               [ 4] 6516 	inc	b
      001E7E C3rC9r1D         [10] 6517 	jp	00226$
      001E81                       6518 00168$:
                                   6519 ;src\/CheckPlayfield.h:196: HideHitSprite();
      001E81 CDrE8r0C         [17] 6520 	call	_HideHitSprite
                                   6521 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E84 DD 36 FD 00      [19] 6522 	ld	-3 (ix), #0
      001E88                       6523 00235$:
      001E88 DD 7E FD         [19] 6524 	ld	a, -3 (ix)
      001E8B D6 0C            [ 7] 6525 	sub	a, #0x0c
      001E8D D2r6Br1F         [10] 6526 	jp	NC, 00177$
                                   6527 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E90 DD 36 FE 00      [19] 6528 	ld	-2 (ix), #0
      001E94                       6529 00232$:
      001E94 DD 7E FE         [19] 6530 	ld	a, -2 (ix)
      001E97 D6 06            [ 7] 6531 	sub	a, #0x06
      001E99 D2r65r1F         [10] 6532 	jp	NC, 00236$
                                   6533 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001E9C DD 4E FE         [19] 6534 	ld	c, -2 (ix)
      001E9F 06 00            [ 7] 6535 	ld	b, #0x00
      001EA1 69               [ 4] 6536 	ld	l, c
      001EA2 60               [ 4] 6537 	ld	h, b
      001EA3 29               [11] 6538 	add	hl, hl
      001EA4 09               [11] 6539 	add	hl, bc
      001EA5 29               [11] 6540 	add	hl, hl
      001EA6 29               [11] 6541 	add	hl, hl
      001EA7 EB               [ 4] 6542 	ex	de, hl
      001EA8 21r00r00         [10] 6543 	ld	hl, #_playfield
      001EAB 19               [11] 6544 	add	hl, de
      001EAC DD 75 FB         [19] 6545 	ld	-5 (ix), l
      001EAF DD 74 FC         [19] 6546 	ld	-4 (ix), h
      001EB2 DD 7E FB         [19] 6547 	ld	a, -5 (ix)
      001EB5 DD 86 FD         [19] 6548 	add	a, -3 (ix)
      001EB8 4F               [ 4] 6549 	ld	c, a
      001EB9 DD 7E FC         [19] 6550 	ld	a, -4 (ix)
      001EBC CE 00            [ 7] 6551 	adc	a, #0x00
      001EBE 47               [ 4] 6552 	ld	b, a
      001EBF 0A               [ 7] 6553 	ld	a, (bc)
      001EC0 07               [ 4] 6554 	rlca
      001EC1 D2r5Fr1F         [10] 6555 	jp	NC,00233$
                                   6556 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      001EC4 2Ar04r00         [16] 6557 	ld	hl, (_blocksRemoved)
      001EC7 23               [ 6] 6558 	inc	hl
      001EC8 22r04r00         [16] 6559 	ld	(_blocksRemoved), hl
                                   6560 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001ECB DD 7E FB         [19] 6561 	ld	a, -5 (ix)
      001ECE DD 77 F7         [19] 6562 	ld	-9 (ix), a
      001ED1 DD 7E FC         [19] 6563 	ld	a, -4 (ix)
      001ED4 DD 77 F8         [19] 6564 	ld	-8 (ix), a
      001ED7 DD 7E FD         [19] 6565 	ld	a, -3 (ix)
      001EDA DD 77 FF         [19] 6566 	ld	-1 (ix), a
      001EDD                       6567 00229$:
      001EDD DD 7E FF         [19] 6568 	ld	a, -1 (ix)
      001EE0 B7               [ 4] 6569 	or	a, a
      001EE1 28 7C            [12] 6570 	jr	Z, 00233$
                                   6571 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      001EE3 0E 01            [ 7] 6572 	ld	c, #0x01
                                   6573 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001EE5 DD 7E FF         [19] 6574 	ld	a, -1 (ix)
      001EE8 DD 77 FC         [19] 6575 	ld	-4 (ix), a
      001EEB 3D               [ 4] 6576 	dec	a
      001EEC DD 86 F7         [19] 6577 	add	a, -9 (ix)
      001EEF 5F               [ 4] 6578 	ld	e, a
      001EF0 3E 00            [ 7] 6579 	ld	a, #0x00
      001EF2 DD 8E F8         [19] 6580 	adc	a, -8 (ix)
      001EF5 57               [ 4] 6581 	ld	d, a
      001EF6 1A               [ 7] 6582 	ld	a, (de)
      001EF7 07               [ 4] 6583 	rlca
      001EF8 30 02            [12] 6584 	jr	NC, 00170$
      001EFA 0E 02            [ 7] 6585 	ld	c, #0x02
      001EFC                       6586 00170$:
                                   6587 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001EFC DD 7E FC         [19] 6588 	ld	a, -4 (ix)
      001EFF 3D               [ 4] 6589 	dec	a
      001F00 3D               [ 4] 6590 	dec	a
      001F01 DD 86 F7         [19] 6591 	add	a, -9 (ix)
      001F04 5F               [ 4] 6592 	ld	e, a
      001F05 3E 00            [ 7] 6593 	ld	a, #0x00
      001F07 DD 8E F8         [19] 6594 	adc	a, -8 (ix)
      001F0A 57               [ 4] 6595 	ld	d, a
      001F0B 1A               [ 7] 6596 	ld	a, (de)
      001F0C 07               [ 4] 6597 	rlca
      001F0D 30 01            [12] 6598 	jr	NC, 00172$
      001F0F 0C               [ 4] 6599 	inc	c
      001F10                       6600 00172$:
                                   6601 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001F10 DD 7E F7         [19] 6602 	ld	a, -9 (ix)
      001F13 DD 86 FF         [19] 6603 	add	a, -1 (ix)
      001F16 DD 77 F9         [19] 6604 	ld	-7 (ix), a
      001F19 DD 7E F8         [19] 6605 	ld	a, -8 (ix)
      001F1C CE 00            [ 7] 6606 	adc	a, #0x00
      001F1E DD 77 FA         [19] 6607 	ld	-6 (ix), a
      001F21 DD 6E FF         [19] 6608 	ld	l, -1 (ix)
      001F24 26 00            [ 7] 6609 	ld	h, #0x00
      001F26 59               [ 4] 6610 	ld	e, c
      001F27 16 00            [ 7] 6611 	ld	d, #0x00
      001F29 BF               [ 4] 6612 	cp	a, a
      001F2A ED 52            [15] 6613 	sbc	hl, de
      001F2C CB 7C            [ 8] 6614 	bit	7, h
      001F2E 20 18            [12] 6615 	jr	NZ, 00243$
      001F30 DD 7E FF         [19] 6616 	ld	a, -1 (ix)
      001F33 91               [ 4] 6617 	sub	a, c
      001F34 DD 86 F7         [19] 6618 	add	a, -9 (ix)
      001F37 4F               [ 4] 6619 	ld	c, a
      001F38 3E 00            [ 7] 6620 	ld	a, #0x00
      001F3A DD 8E F8         [19] 6621 	adc	a, -8 (ix)
      001F3D 47               [ 4] 6622 	ld	b, a
      001F3E 0A               [ 7] 6623 	ld	a, (bc)
      001F3F DD 77 FB         [19] 6624 	ld	-5 (ix), a
      001F42 DD 36 FC 00      [19] 6625 	ld	-4 (ix), #0
      001F46 18 07            [12] 6626 	jr	00244$
      001F48                       6627 00243$:
      001F48 AF               [ 4] 6628 	xor	a, a
      001F49 DD 77 FB         [19] 6629 	ld	-5 (ix), a
      001F4C DD 77 FC         [19] 6630 	ld	-4 (ix), a
      001F4F                       6631 00244$:
      001F4F DD 7E FB         [19] 6632 	ld	a, -5 (ix)
      001F52 DD 6E F9         [19] 6633 	ld	l, -7 (ix)
      001F55 DD 66 FA         [19] 6634 	ld	h, -6 (ix)
      001F58 77               [ 7] 6635 	ld	(hl), a
                                   6636 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001F59 DD 35 FF         [23] 6637 	dec	-1 (ix)
      001F5C C3rDDr1E         [10] 6638 	jp	00229$
      001F5F                       6639 00233$:
                                   6640 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F5F DD 34 FE         [23] 6641 	inc	-2 (ix)
      001F62 C3r94r1E         [10] 6642 	jp	00232$
      001F65                       6643 00236$:
                                   6644 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F65 DD 34 FD         [23] 6645 	inc	-3 (ix)
      001F68 C3r88r1E         [10] 6646 	jp	00235$
      001F6B                       6647 00177$:
                                   6648 ;src\/CheckPlayfield.h:227: oldLevel = level;
      001F6B 3Ar06r00         [13] 6649 	ld	a, (#_level + 0)
      001F6E 4F               [ 4] 6650 	ld	c, a
                                   6651 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      001F6F 21r04r00         [10] 6652 	ld	hl, #_blocksRemoved
      001F72 46               [ 7] 6653 	ld	b, (hl)
      001F73 23               [ 6] 6654 	inc	hl
      001F74 56               [ 7] 6655 	ld	d, (hl)
      001F75 78               [ 4] 6656 	ld	a, b
      001F76 D6 5A            [ 7] 6657 	sub	a, #0x5a
      001F78 7A               [ 4] 6658 	ld	a, d
      001F79 DE 00            [ 7] 6659 	sbc	a, #0x00
      001F7B 38 19            [12] 6660 	jr	C, 00185$
                                   6661 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      001F7D C5               [11] 6662 	push	bc
      001F7E 21 1E 00         [10] 6663 	ld	hl, #0x001e
      001F81 E5               [11] 6664 	push	hl
      001F82 58               [ 4] 6665 	ld	e, b
      001F83 D5               [11] 6666 	push	de
      001F84 CDr00r00         [17] 6667 	call	__divuint
      001F87 F1               [10] 6668 	pop	af
      001F88 F1               [10] 6669 	pop	af
      001F89 C1               [10] 6670 	pop	bc
      001F8A 7D               [ 4] 6671 	ld	a, l
      001F8B 3C               [ 4] 6672 	inc	a
      001F8C 32r06r00         [13] 6673 	ld	(_level+0), a
                                   6674 ;src\/CheckPlayfield.h:230: speed = 15;
      001F8F 21r96r00         [10] 6675 	ld	hl, #_speed
      001F92 36 0F            [10] 6676 	ld	(hl), #0x0f
      001F94 18 32            [12] 6677 	jr	00186$
      001F96                       6678 00185$:
                                   6679 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      001F96 78               [ 4] 6680 	ld	a, b
      001F97 D6 3C            [ 7] 6681 	sub	a, #0x3c
      001F99 7A               [ 4] 6682 	ld	a, d
      001F9A DE 00            [ 7] 6683 	sbc	a, #0x00
      001F9C 38 0C            [12] 6684 	jr	C, 00182$
                                   6685 ;src\/CheckPlayfield.h:234: level = 3;
      001F9E 21r06r00         [10] 6686 	ld	hl, #_level
      001FA1 36 03            [10] 6687 	ld	(hl), #0x03
                                   6688 ;src\/CheckPlayfield.h:235: speed = 30;
      001FA3 21r96r00         [10] 6689 	ld	hl, #_speed
      001FA6 36 1E            [10] 6690 	ld	(hl), #0x1e
      001FA8 18 1E            [12] 6691 	jr	00186$
      001FAA                       6692 00182$:
                                   6693 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      001FAA 78               [ 4] 6694 	ld	a, b
      001FAB D6 1E            [ 7] 6695 	sub	a, #0x1e
      001FAD 7A               [ 4] 6696 	ld	a, d
      001FAE DE 00            [ 7] 6697 	sbc	a, #0x00
      001FB0 38 0C            [12] 6698 	jr	C, 00179$
                                   6699 ;src\/CheckPlayfield.h:238: level = 2;
      001FB2 21r06r00         [10] 6700 	ld	hl, #_level
      001FB5 36 02            [10] 6701 	ld	(hl), #0x02
                                   6702 ;src\/CheckPlayfield.h:239: speed = 45;
      001FB7 21r96r00         [10] 6703 	ld	hl, #_speed
      001FBA 36 2D            [10] 6704 	ld	(hl), #0x2d
      001FBC 18 0A            [12] 6705 	jr	00186$
      001FBE                       6706 00179$:
                                   6707 ;src\/CheckPlayfield.h:242: level = 1;
      001FBE 21r06r00         [10] 6708 	ld	hl, #_level
      001FC1 36 01            [10] 6709 	ld	(hl), #0x01
                                   6710 ;src\/CheckPlayfield.h:243: speed = 60;
      001FC3 21r96r00         [10] 6711 	ld	hl, #_speed
      001FC6 36 3C            [10] 6712 	ld	(hl), #0x3c
      001FC8                       6713 00186$:
                                   6714 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      001FC8 3Ar06r00         [13] 6715 	ld	a,(#_level + 0)
      001FCB 91               [ 4] 6716 	sub	a, c
      001FCC 28 05            [12] 6717 	jr	Z, 00188$
                                   6718 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      001FCE 21r07r00         [10] 6719 	ld	hl, #_newLevel
      001FD1 36 01            [10] 6720 	ld	(hl), #0x01
      001FD3                       6721 00188$:
                                   6722 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      001FD3 CDr05r18         [17] 6723 	call	_DrawPlayfield
                                   6724 ;src\/CheckPlayfield.h:257: DrawScore();
      001FD6 CDrB4r12         [17] 6725 	call	_DrawScore
                                   6726 ;src\/CheckPlayfield.h:259: iteration++;
      001FD9 DD 34 04         [23] 6727 	inc	4 (ix)
                                   6728 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      001FDC DD 7E 04         [19] 6729 	ld	a, 4 (ix)
      001FDF F5               [11] 6730 	push	af
      001FE0 33               [ 6] 6731 	inc	sp
      001FE1 CDr76r18         [17] 6732 	call	_CheckPlayfield
      001FE4 18 03            [12] 6733 	jr	00237$
      001FE6                       6734 00190$:
                                   6735 ;src\/CheckPlayfield.h:264: DrawScore();
      001FE6 CDrB4r12         [17] 6736 	call	_DrawScore
      001FE9                       6737 00237$:
                                   6738 ;src\/CheckPlayfield.h:266: }
      001FE9 DD F9            [10] 6739 	ld	sp, ix
      001FEB DD E1            [14] 6740 	pop	ix
      001FED C9               [10] 6741 	ret
                                   6742 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6743 ;	---------------------------------
                                   6744 ; Function RandomIndex
                                   6745 ; ---------------------------------
      001FEE                       6746 _RandomIndex::
                                   6747 ;src\/GameLogic.h:5: do {
      001FEE                       6748 00101$:
                                   6749 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001FEE CDrA3r00         [17] 6750 	call	_GetRandom
      001FF1 7D               [ 4] 6751 	ld	a, l
      001FF2 E6 07            [ 7] 6752 	and	a, #0x07
      001FF4 6F               [ 4] 6753 	ld	l, a
                                   6754 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001FF5 3E 04            [ 7] 6755 	ld	a, #0x04
      001FF7 95               [ 4] 6756 	sub	a, l
      001FF8 38 F4            [12] 6757 	jr	C, 00101$
                                   6758 ;src\/GameLogic.h:10: return random;
                                   6759 ;src\/GameLogic.h:11: }
      001FFA C9               [10] 6760 	ret
                                   6761 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6762 ;	---------------------------------
                                   6763 ; Function RandomPiece
                                   6764 ; ---------------------------------
      001FFB                       6765 _RandomPiece::
                                   6766 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      001FFB 3Ar93r00         [13] 6767 	ld	a,(#_nextTopPiece + 0)
      001FFE 32r90r00         [13] 6768 	ld	(#_topPiece),a
                                   6769 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      002001 3Ar94r00         [13] 6770 	ld	a,(#_nextMidPiece + 0)
      002004 32r91r00         [13] 6771 	ld	(#_midPiece),a
                                   6772 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      002007 3Ar95r00         [13] 6773 	ld	a,(#_nextBottomPiece + 0)
      00200A 32r92r00         [13] 6774 	ld	(#_bottomPiece),a
                                   6775 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      00200D 01r18r00         [10] 6776 	ld	bc, #_pieces+0
      002010 C5               [11] 6777 	push	bc
      002011 CDrEEr1F         [17] 6778 	call	_RandomIndex
      002014 C1               [10] 6779 	pop	bc
      002015 26 00            [ 7] 6780 	ld	h, #0x00
      002017 09               [11] 6781 	add	hl, bc
      002018 7E               [ 7] 6782 	ld	a, (hl)
      002019 32r93r00         [13] 6783 	ld	(_nextTopPiece+0), a
                                   6784 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      00201C C5               [11] 6785 	push	bc
      00201D CDrEEr1F         [17] 6786 	call	_RandomIndex
      002020 C1               [10] 6787 	pop	bc
      002021 26 00            [ 7] 6788 	ld	h, #0x00
      002023 09               [11] 6789 	add	hl, bc
      002024 7E               [ 7] 6790 	ld	a, (hl)
      002025 32r94r00         [13] 6791 	ld	(_nextMidPiece+0), a
                                   6792 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      002028 C5               [11] 6793 	push	bc
      002029 CDrEEr1F         [17] 6794 	call	_RandomIndex
      00202C C1               [10] 6795 	pop	bc
      00202D 26 00            [ 7] 6796 	ld	h, #0x00
      00202F 09               [11] 6797 	add	hl, bc
      002030 7E               [ 7] 6798 	ld	a, (hl)
      002031 32r95r00         [13] 6799 	ld	(_nextBottomPiece+0), a
                                   6800 ;src\/GameLogic.h:21: }
      002034 C9               [10] 6801 	ret
                                   6802 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   6803 ;	---------------------------------
                                   6804 ; Function UpdateAndDrawPieceStatic
                                   6805 ; ---------------------------------
      002035                       6806 _UpdateAndDrawPieceStatic::
                                   6807 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      002035 01r00r00         [10] 6808 	ld	bc, #_playfield+0
      002038 ED 5Br01r00      [20] 6809 	ld	de, (_col)
      00203C 16 00            [ 7] 6810 	ld	d, #0x00
      00203E 6B               [ 4] 6811 	ld	l, e
      00203F 62               [ 4] 6812 	ld	h, d
      002040 29               [11] 6813 	add	hl, hl
      002041 19               [11] 6814 	add	hl, de
      002042 29               [11] 6815 	add	hl, hl
      002043 29               [11] 6816 	add	hl, hl
      002044 09               [11] 6817 	add	hl, bc
      002045 EB               [ 4] 6818 	ex	de, hl
      002046 3Ar02r00         [13] 6819 	ld	a, (#_line + 0)
      002049 6F               [ 4] 6820 	ld	l, a
      00204A 26 00            [ 7] 6821 	ld	h, #0x00
      00204C 19               [11] 6822 	add	hl, de
      00204D 3Ar90r00         [13] 6823 	ld	a,(#_topPiece + 0)
      002050 77               [ 7] 6824 	ld	(hl), a
                                   6825 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      002051 ED 5Br01r00      [20] 6826 	ld	de, (_col)
      002055 16 00            [ 7] 6827 	ld	d, #0x00
      002057 6B               [ 4] 6828 	ld	l, e
      002058 62               [ 4] 6829 	ld	h, d
      002059 29               [11] 6830 	add	hl, hl
      00205A 19               [11] 6831 	add	hl, de
      00205B 29               [11] 6832 	add	hl, hl
      00205C 29               [11] 6833 	add	hl, hl
      00205D 09               [11] 6834 	add	hl, bc
      00205E EB               [ 4] 6835 	ex	de, hl
      00205F 3Ar02r00         [13] 6836 	ld	a, (#_line + 0)
      002062 6F               [ 4] 6837 	ld	l, a
      002063 2C               [ 4] 6838 	inc	l
      002064 26 00            [ 7] 6839 	ld	h, #0x00
      002066 19               [11] 6840 	add	hl, de
      002067 3Ar91r00         [13] 6841 	ld	a,(#_midPiece + 0)
      00206A 77               [ 7] 6842 	ld	(hl), a
                                   6843 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      00206B ED 5Br01r00      [20] 6844 	ld	de, (_col)
      00206F 16 00            [ 7] 6845 	ld	d, #0x00
      002071 6B               [ 4] 6846 	ld	l, e
      002072 62               [ 4] 6847 	ld	h, d
      002073 29               [11] 6848 	add	hl, hl
      002074 19               [11] 6849 	add	hl, de
      002075 29               [11] 6850 	add	hl, hl
      002076 29               [11] 6851 	add	hl, hl
      002077 09               [11] 6852 	add	hl, bc
      002078 EB               [ 4] 6853 	ex	de, hl
      002079 3Ar02r00         [13] 6854 	ld	a, (#_line + 0)
      00207C 6F               [ 4] 6855 	ld	l, a
      00207D 2C               [ 4] 6856 	inc	l
      00207E 2C               [ 4] 6857 	inc	l
      00207F 26 00            [ 7] 6858 	ld	h, #0x00
      002081 19               [11] 6859 	add	hl, de
      002082 3Ar92r00         [13] 6860 	ld	a,(#_bottomPiece + 0)
      002085 77               [ 7] 6861 	ld	(hl), a
                                   6862 ;src\/GameLogic.h:29: DrawPiece(line);
      002086 C5               [11] 6863 	push	bc
      002087 3Ar02r00         [13] 6864 	ld	a,(#_line + 0)
      00208A F5               [11] 6865 	push	af
      00208B 33               [ 6] 6866 	inc	sp
      00208C CDrE2r17         [17] 6867 	call	_DrawPiece
      00208F 33               [ 6] 6868 	inc	sp
      002090 C1               [10] 6869 	pop	bc
                                   6870 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002091 3E 02            [ 7] 6871 	ld	a, #0x02
      002093 32r01r00         [13] 6872 	ld	(#_col), a
                                   6873 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   6874 ;src\/GameLogic.h:35: counter = 0;
      002096 3E 00            [ 7] 6875 	ld	a,#0x00
      002098 32r02r00         [13] 6876 	ld	(#_line),a
      00209B 32r03r00         [13] 6877 	ld	(#_counter), a
                                   6878 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      00209E 3Ar18r00         [13] 6879 	ld	a, (#_playfield + 24)
      0020A1 B7               [ 4] 6880 	or	a, a
      0020A2 20 0C            [12] 6881 	jr	NZ, 00101$
                                   6882 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      0020A4 3Ar19r00         [13] 6883 	ld	a, (#_playfield + 25)
      0020A7 B7               [ 4] 6884 	or	a, a
      0020A8 20 06            [12] 6885 	jr	NZ, 00101$
                                   6886 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      0020AA 3Ar1Ar00         [13] 6887 	ld	a, (#_playfield + 26)
      0020AD B7               [ 4] 6888 	or	a, a
      0020AE 28 0B            [12] 6889 	jr	Z, 00102$
      0020B0                       6890 00101$:
                                   6891 ;src\/GameLogic.h:41: gameOver = TRUE;
      0020B0 FD 21r00r00      [14] 6892 	ld	iy, #_gameOver
      0020B4 FD 36 00 01      [19] 6893 	ld	0 (iy), #0x01
      0020B8 C3r05r18         [10] 6894 	jp	_DrawPlayfield
      0020BB                       6895 00102$:
                                   6896 ;src\/GameLogic.h:44: RandomPiece();
      0020BB CDrFBr1F         [17] 6897 	call	_RandomPiece
                                   6898 ;src\/GameLogic.h:46: CheckPlayfield(1);
      0020BE 3E 01            [ 7] 6899 	ld	a, #0x01
      0020C0 F5               [11] 6900 	push	af
      0020C1 33               [ 6] 6901 	inc	sp
      0020C2 CDr76r18         [17] 6902 	call	_CheckPlayfield
      0020C5 33               [ 6] 6903 	inc	sp
                                   6904 ;src\/GameLogic.h:48: DrawNextPiece();
      0020C6 CDr5Ar11         [17] 6905 	call	_DrawNextPiece
                                   6906 ;src\/GameLogic.h:51: DrawPlayfield();
                                   6907 ;src\/GameLogic.h:52: }
      0020C9 C3r05r18         [10] 6908 	jp	_DrawPlayfield
                                   6909 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   6910 ;	---------------------------------
                                   6911 ; Function BlinkPauseText
                                   6912 ; ---------------------------------
      0020CC                       6913 _BlinkPauseText::
                                   6914 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      0020CC 2A 9E FC         [16] 6915 	ld	hl, (_JIFFY)
      0020CF CB 5D            [ 8] 6916 	bit	3, l
      0020D1 28 0E            [12] 6917 	jr	Z, 00102$
                                   6918 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      0020D3 11 0D 0C         [10] 6919 	ld	de, #0x0c0d
      0020D6 D5               [11] 6920 	push	de
      0020D7 21rEAr20         [10] 6921 	ld	hl, #___str_5
      0020DA E5               [11] 6922 	push	hl
      0020DB CDr71r0E         [17] 6923 	call	_DrawString
      0020DE F1               [10] 6924 	pop	af
      0020DF F1               [10] 6925 	pop	af
      0020E0 C9               [10] 6926 	ret
      0020E1                       6927 00102$:
                                   6928 ;src\/GameLogic.h:61: DrawLine(6);
      0020E1 3E 06            [ 7] 6929 	ld	a, #0x06
      0020E3 F5               [11] 6930 	push	af
      0020E4 33               [ 6] 6931 	inc	sp
      0020E5 CDrAAr17         [17] 6932 	call	_DrawLine
      0020E8 33               [ 6] 6933 	inc	sp
                                   6934 ;src\/GameLogic.h:64: }
      0020E9 C9               [10] 6935 	ret
      0020EA                       6936 ___str_5:
      0020EA 50 41 55 53 45        6937 	.ascii "PAUSE"
      0020EF 00                    6938 	.db 0x00
                                   6939 ;src\/GameLogic.h:66: void Pause() {
                                   6940 ;	---------------------------------
                                   6941 ; Function Pause
                                   6942 ; ---------------------------------
      0020F0                       6943 _Pause::
                                   6944 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      0020F0 11 0D 0C         [10] 6945 	ld	de, #0x0c0d
      0020F3 D5               [11] 6946 	push	de
      0020F4 21r2Ar21         [10] 6947 	ld	hl, #___str_6
      0020F7 E5               [11] 6948 	push	hl
      0020F8 CDr71r0E         [17] 6949 	call	_DrawString
      0020FB F1               [10] 6950 	pop	af
      0020FC F1               [10] 6951 	pop	af
                                   6952 ;src\/GameLogic.h:71: while(TRUE) {
      0020FD                       6953 00114$:
                                   6954 ;src\/GameLogic.h:73: BlinkPauseText();
      0020FD CDrCCr20         [17] 6955 	call	_BlinkPauseText
                                   6956 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      002100 2E 07            [ 7] 6957 	ld	l, #0x07
      002102 CDr00r00         [17] 6958 	call	_SNSMAT
                                   6959 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      002105 CB 55            [ 8] 6960 	bit	2, l
      002107 28 F4            [12] 6961 	jr	Z, 00114$
                                   6962 ;src\/GameLogic.h:79: while(TRUE) {
      002109                       6963 00109$:
                                   6964 ;src\/GameLogic.h:81: BlinkPauseText();
      002109 CDrCCr20         [17] 6965 	call	_BlinkPauseText
                                   6966 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      00210C 2E 07            [ 7] 6967 	ld	l, #0x07
      00210E CDr00r00         [17] 6968 	call	_SNSMAT
                                   6969 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      002111 CB 55            [ 8] 6970 	bit	2, l
      002113 20 F4            [12] 6971 	jr	NZ, 00109$
                                   6972 ;src\/GameLogic.h:87: while(TRUE) {
      002115                       6973 00104$:
                                   6974 ;src\/GameLogic.h:89: BlinkPauseText();
      002115 CDrCCr20         [17] 6975 	call	_BlinkPauseText
                                   6976 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      002118 2E 07            [ 7] 6977 	ld	l, #0x07
      00211A CDr00r00         [17] 6978 	call	_SNSMAT
                                   6979 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      00211D CB 55            [ 8] 6980 	bit	2, l
      00211F 28 F4            [12] 6981 	jr	Z, 00104$
                                   6982 ;src\/GameLogic.h:95: DrawLine(6);
      002121 3E 06            [ 7] 6983 	ld	a, #0x06
      002123 F5               [11] 6984 	push	af
      002124 33               [ 6] 6985 	inc	sp
      002125 CDrAAr17         [17] 6986 	call	_DrawLine
      002128 33               [ 6] 6987 	inc	sp
                                   6988 ;src\/GameLogic.h:96: return;
                                   6989 ;src\/GameLogic.h:106: }
      002129 C9               [10] 6990 	ret
      00212A                       6991 ___str_6:
      00212A 50 41 55 53 45        6992 	.ascii "PAUSE"
      00212F 00                    6993 	.db 0x00
                                   6994 ;src\/GameLogic.h:108: void GameLoop() {
                                   6995 ;	---------------------------------
                                   6996 ; Function GameLoop
                                   6997 ; ---------------------------------
      002130                       6998 _GameLoop::
      002130 DD E5            [15] 6999 	push	ix
      002132 DD 21 00 00      [14] 7000 	ld	ix,#0
      002136 DD 39            [15] 7001 	add	ix,sp
      002138 21 F3 FF         [10] 7002 	ld	hl, #-13
      00213B 39               [11] 7003 	add	hl, sp
      00213C F9               [ 6] 7004 	ld	sp, hl
                                   7005 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      00213D DD 36 FF 00      [19] 7006 	ld	-1 (ix), #0
      002141 DD 36 F3 00      [19] 7007 	ld	-13 (ix), #0
                                   7008 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      002145 DD 36 F4 00      [19] 7009 	ld	-12 (ix), #0
      002149 DD 36 F5 00      [19] 7010 	ld	-11 (ix), #0
                                   7011 ;src\/GameLogic.h:115: while(!gameOver) {
      00214D                       7012 00150$:
      00214D 3Ar00r00         [13] 7013 	ld	a,(#_gameOver + 0)
      002150 B7               [ 4] 7014 	or	a, a
      002151 C2rE8r24         [10] 7015 	jp	NZ, 00152$
                                   7016 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      002154 ED 4B 9E FC      [20] 7017 	ld	bc, (_JIFFY)
                                   7018 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      002158                       7019 00101$:
      002158 2A 9E FC         [16] 7020 	ld	hl, (_JIFFY)
      00215B BF               [ 4] 7021 	cp	a, a
      00215C ED 42            [15] 7022 	sbc	hl, bc
      00215E 28 F8            [12] 7023 	jr	Z, 00101$
                                   7024 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002160 ED 4Br01r00      [20] 7025 	ld	bc, (_col)
      002164 06 00            [ 7] 7026 	ld	b, #0x00
      002166 69               [ 4] 7027 	ld	l, c
      002167 60               [ 4] 7028 	ld	h, b
      002168 29               [11] 7029 	add	hl, hl
      002169 09               [11] 7030 	add	hl, bc
      00216A 29               [11] 7031 	add	hl, hl
      00216B 29               [11] 7032 	add	hl, hl
      00216C EB               [ 4] 7033 	ex	de, hl
      00216D 21r00r00         [10] 7034 	ld	hl, #_playfield
      002170 19               [11] 7035 	add	hl, de
      002171 EB               [ 4] 7036 	ex	de, hl
      002172 FD 21r02r00      [14] 7037 	ld	iy, #_line
      002176 FD 6E 00         [19] 7038 	ld	l, 0 (iy)
      002179 26 00            [ 7] 7039 	ld	h, #0x00
      00217B 19               [11] 7040 	add	hl, de
      00217C 36 00            [10] 7041 	ld	(hl), #0x00
                                   7042 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      00217E ED 4Br01r00      [20] 7043 	ld	bc, (_col)
      002182 06 00            [ 7] 7044 	ld	b, #0x00
      002184 69               [ 4] 7045 	ld	l, c
      002185 60               [ 4] 7046 	ld	h, b
      002186 29               [11] 7047 	add	hl, hl
      002187 09               [11] 7048 	add	hl, bc
      002188 29               [11] 7049 	add	hl, hl
      002189 29               [11] 7050 	add	hl, hl
      00218A EB               [ 4] 7051 	ex	de, hl
      00218B 21r00r00         [10] 7052 	ld	hl, #_playfield
      00218E 19               [11] 7053 	add	hl, de
      00218F EB               [ 4] 7054 	ex	de, hl
      002190 FD 6E 00         [19] 7055 	ld	l, 0 (iy)
      002193 2C               [ 4] 7056 	inc	l
      002194 26 00            [ 7] 7057 	ld	h, #0x00
      002196 19               [11] 7058 	add	hl, de
      002197 36 00            [10] 7059 	ld	(hl), #0x00
                                   7060 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002199 ED 4Br01r00      [20] 7061 	ld	bc, (_col)
      00219D 06 00            [ 7] 7062 	ld	b, #0x00
      00219F 69               [ 4] 7063 	ld	l, c
      0021A0 60               [ 4] 7064 	ld	h, b
      0021A1 29               [11] 7065 	add	hl, hl
      0021A2 09               [11] 7066 	add	hl, bc
      0021A3 29               [11] 7067 	add	hl, hl
      0021A4 29               [11] 7068 	add	hl, hl
      0021A5 EB               [ 4] 7069 	ex	de, hl
      0021A6 21r00r00         [10] 7070 	ld	hl, #_playfield
      0021A9 19               [11] 7071 	add	hl, de
      0021AA EB               [ 4] 7072 	ex	de, hl
      0021AB FD 6E 00         [19] 7073 	ld	l, 0 (iy)
      0021AE 2C               [ 4] 7074 	inc	l
      0021AF 2C               [ 4] 7075 	inc	l
      0021B0 26 00            [ 7] 7076 	ld	h, #0x00
      0021B2 19               [11] 7077 	add	hl, de
      0021B3 36 00            [10] 7078 	ld	(hl), #0x00
                                   7079 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      0021B5 2E 01            [ 7] 7080 	ld	l, #0x01
      0021B7 CDr00r00         [17] 7081 	call	_GTSTCK
      0021BA DD 75 F6         [19] 7082 	ld	-10 (ix), l
                                   7083 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      0021BD 2E 01            [ 7] 7084 	ld	l, #0x01
      0021BF CDr00r00         [17] 7085 	call	_GTTRIG
      0021C2 DD 75 F7         [19] 7086 	ld	-9 (ix), l
                                   7087 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      0021C5 2E 03            [ 7] 7088 	ld	l, #0x03
      0021C7 CDr00r00         [17] 7089 	call	_GTTRIG
      0021CA DD 75 F8         [19] 7090 	ld	-8 (ix), l
                                   7091 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      0021CD DD 7E F6         [19] 7092 	ld	a, -10 (ix)
                                   7093 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      0021D0 B7               [ 4] 7094 	or	a,a
      0021D1 20 07            [12] 7095 	jr	NZ, 00105$
      0021D3 6F               [ 4] 7096 	ld	l,a
      0021D4 CDr00r00         [17] 7097 	call	_GTSTCK
      0021D7 DD 75 F6         [19] 7098 	ld	-10 (ix), l
      0021DA                       7099 00105$:
                                   7100 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0021DA FD 21r02r00      [14] 7101 	ld	iy, #_line
      0021DE FD 7E 00         [19] 7102 	ld	a, 0 (iy)
      0021E1 DD 77 F9         [19] 7103 	ld	-7 (ix), a
                                   7104 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      0021E4 DD 7E FF         [19] 7105 	ld	a, -1 (ix)
      0021E7 B7               [ 4] 7106 	or	a, a
      0021E8 C2rD1r22         [10] 7107 	jp	NZ, 00118$
                                   7108 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0021EB FD 7E 00         [19] 7109 	ld	a, 0 (iy)
      0021EE DD 77 FF         [19] 7110 	ld	-1 (ix), a
                                   7111 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0021F1 FD 21r01r00      [14] 7112 	ld	iy, #_col
      0021F5 FD 7E 00         [19] 7113 	ld	a, 0 (iy)
      0021F8 DD 77 FA         [19] 7114 	ld	-6 (ix), a
                                   7115 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0021FB DD 7E FF         [19] 7116 	ld	a, -1 (ix)
      0021FE C6 02            [ 7] 7117 	add	a, #0x02
      002200 DD 77 FB         [19] 7118 	ld	-5 (ix), a
                                   7119 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      002203 DD 7E F6         [19] 7120 	ld	a, -10 (ix)
      002206 D6 07            [ 7] 7121 	sub	a, #0x07
      002208 20 5F            [12] 7122 	jr	NZ, 00112$
                                   7123 ;src\/GameLogic.h:145: col > 0 && 
      00220A FD 7E 00         [19] 7124 	ld	a, 0 (iy)
      00220D B7               [ 4] 7125 	or	a, a
      00220E 28 59            [12] 7126 	jr	Z, 00112$
                                   7127 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002210 DD 7E FA         [19] 7128 	ld	a, -6 (ix)
      002213 C6 FF            [ 7] 7129 	add	a, #0xff
      002215 DD 77 FF         [19] 7130 	ld	-1 (ix), a
      002218 4F               [ 4] 7131 	ld	c, a
      002219 07               [ 4] 7132 	rlca
      00221A 9F               [ 4] 7133 	sbc	a, a
      00221B 47               [ 4] 7134 	ld	b, a
      00221C 69               [ 4] 7135 	ld	l, c
      00221D 60               [ 4] 7136 	ld	h, b
      00221E 29               [11] 7137 	add	hl, hl
      00221F 09               [11] 7138 	add	hl, bc
      002220 29               [11] 7139 	add	hl, hl
      002221 29               [11] 7140 	add	hl, hl
      002222 DD 75 FE         [19] 7141 	ld	-2 (ix), l
      002225 DD 74 FF         [19] 7142 	ld	-1 (ix), h
      002228 3Er00            [ 7] 7143 	ld	a, #<(_playfield)
      00222A DD 86 FE         [19] 7144 	add	a, -2 (ix)
      00222D DD 77 FC         [19] 7145 	ld	-4 (ix), a
      002230 3Es00            [ 7] 7146 	ld	a, #>(_playfield)
      002232 DD 8E FF         [19] 7147 	adc	a, -1 (ix)
      002235 DD 77 FD         [19] 7148 	ld	-3 (ix), a
      002238 DD 7E FC         [19] 7149 	ld	a, -4 (ix)
      00223B DD 86 F9         [19] 7150 	add	a, -7 (ix)
      00223E DD 77 FE         [19] 7151 	ld	-2 (ix), a
      002241 DD 7E FD         [19] 7152 	ld	a, -3 (ix)
      002244 CE 00            [ 7] 7153 	adc	a, #0x00
      002246 DD 77 FF         [19] 7154 	ld	-1 (ix), a
      002249 DD 6E FE         [19] 7155 	ld	l, -2 (ix)
      00224C DD 66 FF         [19] 7156 	ld	h, -1 (ix)
      00224F 7E               [ 7] 7157 	ld	a, (hl)
      002250 B7               [ 4] 7158 	or	a, a
      002251 20 16            [12] 7159 	jr	NZ, 00112$
                                   7160 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      002253 DD 7E FC         [19] 7161 	ld	a, -4 (ix)
      002256 DD 86 FB         [19] 7162 	add	a, -5 (ix)
      002259 4F               [ 4] 7163 	ld	c, a
      00225A DD 7E FD         [19] 7164 	ld	a, -3 (ix)
      00225D CE 00            [ 7] 7165 	adc	a, #0x00
      00225F 47               [ 4] 7166 	ld	b, a
      002260 0A               [ 7] 7167 	ld	a, (bc)
      002261 B7               [ 4] 7168 	or	a, a
      002262 20 05            [12] 7169 	jr	NZ, 00112$
                                   7170 ;src\/GameLogic.h:148: col--;
      002264 FD 35 00         [23] 7171 	dec	0 (iy)
      002267 18 68            [12] 7172 	jr	00118$
      002269                       7173 00112$:
                                   7174 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      002269 DD 7E F6         [19] 7175 	ld	a, -10 (ix)
      00226C D6 03            [ 7] 7176 	sub	a, #0x03
      00226E 20 61            [12] 7177 	jr	NZ, 00118$
                                   7178 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      002270 FD 21r01r00      [14] 7179 	ld	iy, #_col
      002274 FD 7E 00         [19] 7180 	ld	a, 0 (iy)
      002277 D6 05            [ 7] 7181 	sub	a, #0x05
      002279 30 56            [12] 7182 	jr	NC, 00118$
                                   7183 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      00227B DD 7E FA         [19] 7184 	ld	a, -6 (ix)
      00227E 3C               [ 4] 7185 	inc	a
      00227F DD 77 FF         [19] 7186 	ld	-1 (ix), a
      002282 4F               [ 4] 7187 	ld	c, a
      002283 07               [ 4] 7188 	rlca
      002284 9F               [ 4] 7189 	sbc	a, a
      002285 47               [ 4] 7190 	ld	b, a
      002286 69               [ 4] 7191 	ld	l, c
      002287 60               [ 4] 7192 	ld	h, b
      002288 29               [11] 7193 	add	hl, hl
      002289 09               [11] 7194 	add	hl, bc
      00228A 29               [11] 7195 	add	hl, hl
      00228B 29               [11] 7196 	add	hl, hl
      00228C DD 75 FE         [19] 7197 	ld	-2 (ix), l
      00228F DD 74 FF         [19] 7198 	ld	-1 (ix), h
      002292 3Er00            [ 7] 7199 	ld	a, #<(_playfield)
      002294 DD 86 FE         [19] 7200 	add	a, -2 (ix)
      002297 DD 77 FC         [19] 7201 	ld	-4 (ix), a
      00229A 3Es00            [ 7] 7202 	ld	a, #>(_playfield)
      00229C DD 8E FF         [19] 7203 	adc	a, -1 (ix)
      00229F DD 77 FD         [19] 7204 	ld	-3 (ix), a
      0022A2 DD 7E FC         [19] 7205 	ld	a, -4 (ix)
      0022A5 DD 86 F9         [19] 7206 	add	a, -7 (ix)
      0022A8 DD 77 FE         [19] 7207 	ld	-2 (ix), a
      0022AB DD 7E FD         [19] 7208 	ld	a, -3 (ix)
      0022AE CE 00            [ 7] 7209 	adc	a, #0x00
      0022B0 DD 77 FF         [19] 7210 	ld	-1 (ix), a
      0022B3 DD 6E FE         [19] 7211 	ld	l, -2 (ix)
      0022B6 DD 66 FF         [19] 7212 	ld	h, -1 (ix)
      0022B9 7E               [ 7] 7213 	ld	a, (hl)
      0022BA B7               [ 4] 7214 	or	a, a
      0022BB 20 14            [12] 7215 	jr	NZ, 00118$
                                   7216 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      0022BD DD 7E FC         [19] 7217 	ld	a, -4 (ix)
      0022C0 DD 86 FB         [19] 7218 	add	a, -5 (ix)
      0022C3 4F               [ 4] 7219 	ld	c, a
      0022C4 DD 7E FD         [19] 7220 	ld	a, -3 (ix)
      0022C7 CE 00            [ 7] 7221 	adc	a, #0x00
      0022C9 47               [ 4] 7222 	ld	b, a
      0022CA 0A               [ 7] 7223 	ld	a, (bc)
      0022CB B7               [ 4] 7224 	or	a, a
      0022CC 20 03            [12] 7225 	jr	NZ, 00118$
                                   7226 ;src\/GameLogic.h:154: col++;
      0022CE FD 34 00         [23] 7227 	inc	0 (iy)
      0022D1                       7228 00118$:
                                   7229 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      0022D1 DD 7E F3         [19] 7230 	ld	a, -13 (ix)
      0022D4 B7               [ 4] 7231 	or	a, a
      0022D5 C2r97r23         [10] 7232 	jp	NZ, 00132$
                                   7233 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      0022D8 DD 7E F6         [19] 7234 	ld	a, -10 (ix)
      0022DB 3D               [ 4] 7235 	dec	a
      0022DC 28 18            [12] 7236 	jr	Z, 00119$
      0022DE DD 7E F4         [19] 7237 	ld	a, -12 (ix)
      0022E1 B7               [ 4] 7238 	or	a, a
      0022E2 20 06            [12] 7239 	jr	NZ, 00124$
      0022E4 DD 7E F7         [19] 7240 	ld	a, -9 (ix)
      0022E7 3C               [ 4] 7241 	inc	a
      0022E8 28 0C            [12] 7242 	jr	Z, 00119$
      0022EA                       7243 00124$:
      0022EA DD 7E F5         [19] 7244 	ld	a, -11 (ix)
      0022ED B7               [ 4] 7245 	or	a, a
      0022EE 20 1A            [12] 7246 	jr	NZ, 00120$
      0022F0 DD 7E F8         [19] 7247 	ld	a, -8 (ix)
      0022F3 3C               [ 4] 7248 	inc	a
      0022F4 20 14            [12] 7249 	jr	NZ, 00120$
      0022F6                       7250 00119$:
                                   7251 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      0022F6 3Ar92r00         [13] 7252 	ld	a, (#_bottomPiece + 0)
      0022F9 4F               [ 4] 7253 	ld	c, a
                                   7254 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      0022FA 3Ar91r00         [13] 7255 	ld	a,(#_midPiece + 0)
      0022FD 32r92r00         [13] 7256 	ld	(#_bottomPiece),a
                                   7257 ;src\/GameLogic.h:166: midPiece = topPiece;
      002300 3Ar90r00         [13] 7258 	ld	a,(#_topPiece + 0)
      002303 32r91r00         [13] 7259 	ld	(#_midPiece),a
                                   7260 ;src\/GameLogic.h:167: topPiece = temp;
      002306 21r90r00         [10] 7261 	ld	hl, #_topPiece
      002309 71               [ 7] 7262 	ld	(hl), c
      00230A                       7263 00120$:
                                   7264 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      00230A DD 7E F6         [19] 7265 	ld	a, -10 (ix)
      00230D D6 05            [ 7] 7266 	sub	a, #0x05
      00230F C2r97r23         [10] 7267 	jp	NZ,00132$
                                   7268 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002312 DD 7E F9         [19] 7269 	ld	a, -7 (ix)
      002315 DD 77 FE         [19] 7270 	ld	-2 (ix), a
      002318 DD 7E F9         [19] 7271 	ld	a, -7 (ix)
      00231B DD 77 FF         [19] 7272 	ld	-1 (ix), a
      00231E                       7273 00154$:
      00231E DD 7E FF         [19] 7274 	ld	a, -1 (ix)
      002321 D6 0C            [ 7] 7275 	sub	a, #0x0c
      002323 30 72            [12] 7276 	jr	NC, 00132$
                                   7277 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      002325 DD 7E FF         [19] 7278 	ld	a, -1 (ix)
      002328 D6 09            [ 7] 7279 	sub	a, #0x09
      00232A 28 4C            [12] 7280 	jr	Z, 00125$
      00232C ED 4Br01r00      [20] 7281 	ld	bc, (_col)
      002330 06 00            [ 7] 7282 	ld	b, #0x00
      002332 69               [ 4] 7283 	ld	l, c
      002333 60               [ 4] 7284 	ld	h, b
      002334 29               [11] 7285 	add	hl, hl
      002335 09               [11] 7286 	add	hl, bc
      002336 29               [11] 7287 	add	hl, hl
      002337 29               [11] 7288 	add	hl, hl
      002338 DD 75 FC         [19] 7289 	ld	-4 (ix), l
      00233B DD 74 FD         [19] 7290 	ld	-3 (ix), h
      00233E 3Er00            [ 7] 7291 	ld	a, #<(_playfield)
      002340 DD 86 FC         [19] 7292 	add	a, -4 (ix)
      002343 DD 77 FA         [19] 7293 	ld	-6 (ix), a
      002346 3Es00            [ 7] 7294 	ld	a, #>(_playfield)
      002348 DD 8E FD         [19] 7295 	adc	a, -3 (ix)
      00234B DD 77 FB         [19] 7296 	ld	-5 (ix), a
      00234E DD 7E FF         [19] 7297 	ld	a, -1 (ix)
      002351 DD 77 FD         [19] 7298 	ld	-3 (ix), a
      002354 DD 34 FD         [23] 7299 	inc	-3 (ix)
      002357 DD 34 FD         [23] 7300 	inc	-3 (ix)
      00235A DD 34 FD         [23] 7301 	inc	-3 (ix)
      00235D DD 7E FD         [19] 7302 	ld	a, -3 (ix)
      002360 DD 86 FA         [19] 7303 	add	a, -6 (ix)
      002363 DD 77 FC         [19] 7304 	ld	-4 (ix), a
      002366 3E 00            [ 7] 7305 	ld	a, #0x00
      002368 DD 8E FB         [19] 7306 	adc	a, -5 (ix)
      00236B DD 77 FD         [19] 7307 	ld	-3 (ix), a
      00236E DD 6E FC         [19] 7308 	ld	l, -4 (ix)
      002371 DD 66 FD         [19] 7309 	ld	h, -3 (ix)
      002374 7E               [ 7] 7310 	ld	a, (hl)
      002375 B7               [ 4] 7311 	or	a, a
      002376 28 14            [12] 7312 	jr	Z, 00155$
      002378                       7313 00125$:
                                   7314 ;src\/GameLogic.h:176: DrawPiece(line);
      002378 3Ar02r00         [13] 7315 	ld	a,(#_line + 0)
      00237B F5               [11] 7316 	push	af
      00237C 33               [ 6] 7317 	inc	sp
      00237D CDrE2r17         [17] 7318 	call	_DrawPiece
      002380 33               [ 6] 7319 	inc	sp
                                   7320 ;src\/GameLogic.h:178: line = i;
      002381 DD 7E FE         [19] 7321 	ld	a, -2 (ix)
      002384 32r02r00         [13] 7322 	ld	(#_line),a
                                   7323 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002387 CDr35r20         [17] 7324 	call	_UpdateAndDrawPieceStatic
                                   7325 ;src\/GameLogic.h:181: break;
      00238A 18 0B            [12] 7326 	jr	00132$
      00238C                       7327 00155$:
                                   7328 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00238C DD 34 FF         [23] 7329 	inc	-1 (ix)
      00238F DD 7E FF         [19] 7330 	ld	a, -1 (ix)
      002392 DD 77 FE         [19] 7331 	ld	-2 (ix), a
      002395 18 87            [12] 7332 	jr	00154$
      002397                       7333 00132$:
                                   7334 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002397 DD 7E F6         [19] 7335 	ld	a, -10 (ix)
      00239A DD 77 FF         [19] 7336 	ld	-1 (ix), a
                                   7337 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      00239D DD 7E F6         [19] 7338 	ld	a, -10 (ix)
      0023A0 DD 77 F3         [19] 7339 	ld	-13 (ix), a
                                   7340 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      0023A3 DD 7E F7         [19] 7341 	ld	a, -9 (ix)
      0023A6 DD 77 F4         [19] 7342 	ld	-12 (ix), a
                                   7343 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      0023A9 DD 7E F8         [19] 7344 	ld	a, -8 (ix)
      0023AC DD 77 F5         [19] 7345 	ld	-11 (ix), a
                                   7346 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      0023AF 2E 07            [ 7] 7347 	ld	l, #0x07
      0023B1 CDr00r00         [17] 7348 	call	_SNSMAT
                                   7349 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      0023B4 CB 55            [ 8] 7350 	bit	2, l
      0023B6 20 03            [12] 7351 	jr	NZ, 00134$
                                   7352 ;src\/GameLogic.h:220: Pause();
      0023B8 CDrF0r20         [17] 7353 	call	_Pause
      0023BB                       7354 00134$:
                                   7355 ;src\/GameLogic.h:225: counter++;
      0023BB FD 21r03r00      [14] 7356 	ld	iy, #_counter
      0023BF FD 34 00         [23] 7357 	inc	0 (iy)
                                   7358 ;src\/GameLogic.h:226: if(counter == speed) {
      0023C2 FD 7E 00         [19] 7359 	ld	a, 0 (iy)
      0023C5 21r96r00         [10] 7360 	ld	hl, #_speed
      0023C8 96               [ 7] 7361 	sub	a, (hl)
      0023C9 20 3F            [12] 7362 	jr	NZ, 00139$
                                   7363 ;src\/GameLogic.h:228: counter = 0;
      0023CB 21r03r00         [10] 7364 	ld	hl, #_counter
      0023CE 36 00            [10] 7365 	ld	(hl), #0x00
                                   7366 ;src\/GameLogic.h:231: DrawPiece(line);
      0023D0 3Ar02r00         [13] 7367 	ld	a,(#_line + 0)
      0023D3 F5               [11] 7368 	push	af
      0023D4 33               [ 6] 7369 	inc	sp
      0023D5 CDrE2r17         [17] 7370 	call	_DrawPiece
      0023D8 33               [ 6] 7371 	inc	sp
                                   7372 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      0023D9 FD 21r02r00      [14] 7373 	ld	iy, #_line
      0023DD FD 7E 00         [19] 7374 	ld	a, 0 (iy)
      0023E0 D6 09            [ 7] 7375 	sub	a, #0x09
      0023E2 28 1F            [12] 7376 	jr	Z, 00135$
      0023E4 ED 4Br01r00      [20] 7377 	ld	bc, (_col)
      0023E8 06 00            [ 7] 7378 	ld	b, #0x00
      0023EA 69               [ 4] 7379 	ld	l, c
      0023EB 60               [ 4] 7380 	ld	h, b
      0023EC 29               [11] 7381 	add	hl, hl
      0023ED 09               [11] 7382 	add	hl, bc
      0023EE 29               [11] 7383 	add	hl, hl
      0023EF 29               [11] 7384 	add	hl, hl
      0023F0 EB               [ 4] 7385 	ex	de, hl
      0023F1 21r00r00         [10] 7386 	ld	hl, #_playfield
      0023F4 19               [11] 7387 	add	hl, de
      0023F5 EB               [ 4] 7388 	ex	de, hl
      0023F6 FD 7E 00         [19] 7389 	ld	a, 0 (iy)
      0023F9 C6 03            [ 7] 7390 	add	a, #0x03
      0023FB 6F               [ 4] 7391 	ld	l, a
      0023FC 26 00            [ 7] 7392 	ld	h, #0x00
      0023FE 19               [11] 7393 	add	hl, de
      0023FF 7E               [ 7] 7394 	ld	a, (hl)
      002400 B7               [ 4] 7395 	or	a, a
      002401 28 03            [12] 7396 	jr	Z, 00136$
      002403                       7397 00135$:
                                   7398 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002403 CDr35r20         [17] 7399 	call	_UpdateAndDrawPieceStatic
      002406                       7400 00136$:
                                   7401 ;src\/GameLogic.h:240: line++;
      002406 21r02r00         [10] 7402 	ld	hl, #_line
      002409 34               [11] 7403 	inc	(hl)
      00240A                       7404 00139$:
                                   7405 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      00240A ED 4Br01r00      [20] 7406 	ld	bc, (_col)
      00240E 06 00            [ 7] 7407 	ld	b, #0x00
      002410 69               [ 4] 7408 	ld	l, c
      002411 60               [ 4] 7409 	ld	h, b
      002412 29               [11] 7410 	add	hl, hl
      002413 09               [11] 7411 	add	hl, bc
      002414 29               [11] 7412 	add	hl, hl
      002415 29               [11] 7413 	add	hl, hl
      002416 EB               [ 4] 7414 	ex	de, hl
      002417 21r00r00         [10] 7415 	ld	hl, #_playfield
      00241A 19               [11] 7416 	add	hl, de
      00241B EB               [ 4] 7417 	ex	de, hl
      00241C 3Ar02r00         [13] 7418 	ld	a, (#_line + 0)
      00241F 6F               [ 4] 7419 	ld	l, a
      002420 26 00            [ 7] 7420 	ld	h, #0x00
      002422 19               [11] 7421 	add	hl, de
      002423 3Ar90r00         [13] 7422 	ld	a,(#_topPiece + 0)
      002426 77               [ 7] 7423 	ld	(hl), a
                                   7424 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      002427 ED 4Br01r00      [20] 7425 	ld	bc, (_col)
      00242B 06 00            [ 7] 7426 	ld	b, #0x00
      00242D 69               [ 4] 7427 	ld	l, c
      00242E 60               [ 4] 7428 	ld	h, b
      00242F 29               [11] 7429 	add	hl, hl
      002430 09               [11] 7430 	add	hl, bc
      002431 29               [11] 7431 	add	hl, hl
      002432 29               [11] 7432 	add	hl, hl
      002433 EB               [ 4] 7433 	ex	de, hl
      002434 21r00r00         [10] 7434 	ld	hl, #_playfield
      002437 19               [11] 7435 	add	hl, de
      002438 EB               [ 4] 7436 	ex	de, hl
      002439 3Ar02r00         [13] 7437 	ld	a, (#_line + 0)
      00243C 6F               [ 4] 7438 	ld	l, a
      00243D 2C               [ 4] 7439 	inc	l
      00243E 26 00            [ 7] 7440 	ld	h, #0x00
      002440 19               [11] 7441 	add	hl, de
      002441 3Ar91r00         [13] 7442 	ld	a,(#_midPiece + 0)
      002444 77               [ 7] 7443 	ld	(hl), a
                                   7444 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      002445 ED 4Br01r00      [20] 7445 	ld	bc, (_col)
      002449 06 00            [ 7] 7446 	ld	b, #0x00
      00244B 69               [ 4] 7447 	ld	l, c
      00244C 60               [ 4] 7448 	ld	h, b
      00244D 29               [11] 7449 	add	hl, hl
      00244E 09               [11] 7450 	add	hl, bc
      00244F 29               [11] 7451 	add	hl, hl
      002450 29               [11] 7452 	add	hl, hl
      002451 EB               [ 4] 7453 	ex	de, hl
      002452 21r00r00         [10] 7454 	ld	hl, #_playfield
      002455 19               [11] 7455 	add	hl, de
      002456 EB               [ 4] 7456 	ex	de, hl
      002457 3Ar02r00         [13] 7457 	ld	a, (#_line + 0)
      00245A 6F               [ 4] 7458 	ld	l, a
      00245B 2C               [ 4] 7459 	inc	l
      00245C 2C               [ 4] 7460 	inc	l
      00245D 26 00            [ 7] 7461 	ld	h, #0x00
      00245F 19               [11] 7462 	add	hl, de
      002460 3Ar92r00         [13] 7463 	ld	a,(#_bottomPiece + 0)
      002463 77               [ 7] 7464 	ld	(hl), a
                                   7465 ;src\/GameLogic.h:254: DrawPiece(line);
      002464 3Ar02r00         [13] 7466 	ld	a,(#_line + 0)
      002467 F5               [11] 7467 	push	af
      002468 33               [ 6] 7468 	inc	sp
      002469 CDrE2r17         [17] 7469 	call	_DrawPiece
      00246C 33               [ 6] 7470 	inc	sp
                                   7471 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      00246D ED 4Br01r00      [20] 7472 	ld	bc, (_col)
      002471 06 00            [ 7] 7473 	ld	b, #0x00
      002473 69               [ 4] 7474 	ld	l, c
      002474 60               [ 4] 7475 	ld	h, b
      002475 29               [11] 7476 	add	hl, hl
      002476 09               [11] 7477 	add	hl, bc
      002477 29               [11] 7478 	add	hl, hl
      002478 29               [11] 7479 	add	hl, hl
      002479 EB               [ 4] 7480 	ex	de, hl
                                   7481 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      00247A 21r00r00         [10] 7482 	ld	hl, #_playfield
      00247D 19               [11] 7483 	add	hl, de
      00247E EB               [ 4] 7484 	ex	de, hl
      00247F 3Ar02r00         [13] 7485 	ld	a,(#_line + 0)
      002482 C6 03            [ 7] 7486 	add	a, #0x03
      002484 4F               [ 4] 7487 	ld	c, a
      002485 69               [ 4] 7488 	ld	l, c
      002486 26 00            [ 7] 7489 	ld	h, #0x00
      002488 19               [11] 7490 	add	hl, de
      002489 7E               [ 7] 7491 	ld	a, (hl)
      00248A B7               [ 4] 7492 	or	a, a
      00248B 28 06            [12] 7493 	jr	Z, 00148$
                                   7494 ;src\/GameLogic.h:260: HideArrowSprite();
      00248D CDrC8r0A         [17] 7495 	call	_HideArrowSprite
      002490 C3r4Dr21         [10] 7496 	jp	00150$
      002493                       7497 00148$:
                                   7498 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002493 41               [ 4] 7499 	ld	b, c
      002494                       7500 00157$:
      002494 78               [ 4] 7501 	ld	a, b
      002495 D6 0C            [ 7] 7502 	sub	a, #0x0c
      002497 D2r4Dr21         [10] 7503 	jp	NC, 00150$
                                   7504 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00249A 3Ar01r00         [13] 7505 	ld	a,(#_col + 0)
      00249D 87               [ 4] 7506 	add	a, a
      00249E 87               [ 4] 7507 	add	a, a
      00249F 87               [ 4] 7508 	add	a, a
      0024A0 87               [ 4] 7509 	add	a, a
      0024A1 DD 77 FE         [19] 7510 	ld	-2 (ix), a
                                   7511 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0024A4 68               [ 4] 7512 	ld	l, b
      0024A5 26 00            [ 7] 7513 	ld	h, #0x00
      0024A7 19               [11] 7514 	add	hl, de
                                   7515 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0024A8 DD 7E FE         [19] 7516 	ld	a, -2 (ix)
      0024AB C6 50            [ 7] 7517 	add	a, #0x50
      0024AD DD 77 FE         [19] 7518 	ld	-2 (ix), a
                                   7519 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0024B0 6E               [ 7] 7520 	ld	l, (hl)
      0024B1 78               [ 4] 7521 	ld	a, b
      0024B2 D6 0B            [ 7] 7522 	sub	a,#0x0b
      0024B4 20 16            [12] 7523 	jr	NZ, 00143$
      0024B6 B5               [ 4] 7524 	or	a,l
      0024B7 20 13            [12] 7525 	jr	NZ, 00143$
                                   7526 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0024B9 79               [ 4] 7527 	ld	a, c
      0024BA 87               [ 4] 7528 	add	a, a
      0024BB 87               [ 4] 7529 	add	a, a
      0024BC 87               [ 4] 7530 	add	a, a
      0024BD 87               [ 4] 7531 	add	a, a
      0024BE F5               [11] 7532 	push	af
      0024BF 33               [ 6] 7533 	inc	sp
      0024C0 DD 7E FE         [19] 7534 	ld	a, -2 (ix)
      0024C3 F5               [11] 7535 	push	af
      0024C4 33               [ 6] 7536 	inc	sp
      0024C5 CDrEDr00         [17] 7537 	call	_DrawArrowSprite
      0024C8 F1               [10] 7538 	pop	af
                                   7539 ;src\/GameLogic.h:266: break;
      0024C9 C3r4Dr21         [10] 7540 	jp	00150$
      0024CC                       7541 00143$:
                                   7542 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      0024CC 7D               [ 4] 7543 	ld	a, l
      0024CD B7               [ 4] 7544 	or	a, a
      0024CE 28 14            [12] 7545 	jr	Z, 00158$
                                   7546 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      0024D0 79               [ 4] 7547 	ld	a, c
      0024D1 3D               [ 4] 7548 	dec	a
      0024D2 87               [ 4] 7549 	add	a, a
      0024D3 87               [ 4] 7550 	add	a, a
      0024D4 87               [ 4] 7551 	add	a, a
      0024D5 87               [ 4] 7552 	add	a, a
      0024D6 F5               [11] 7553 	push	af
      0024D7 33               [ 6] 7554 	inc	sp
      0024D8 DD 7E FE         [19] 7555 	ld	a, -2 (ix)
      0024DB F5               [11] 7556 	push	af
      0024DC 33               [ 6] 7557 	inc	sp
      0024DD CDrEDr00         [17] 7558 	call	_DrawArrowSprite
      0024E0 F1               [10] 7559 	pop	af
                                   7560 ;src\/GameLogic.h:270: break;
      0024E1 C3r4Dr21         [10] 7561 	jp	00150$
      0024E4                       7562 00158$:
                                   7563 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0024E4 04               [ 4] 7564 	inc	b
      0024E5 48               [ 4] 7565 	ld	c, b
      0024E6 18 AC            [12] 7566 	jr	00157$
      0024E8                       7567 00152$:
                                   7568 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      0024E8 11 0C 0C         [10] 7569 	ld	de, #0x0c0c
      0024EB D5               [11] 7570 	push	de
      0024EC 21r00r25         [10] 7571 	ld	hl, #___str_7
      0024EF E5               [11] 7572 	push	hl
      0024F0 CDr71r0E         [17] 7573 	call	_DrawString
      0024F3 F1               [10] 7574 	pop	af
                                   7575 ;src\/GameLogic.h:282: Wait(60 * 5);
      0024F4 21 2C 01         [10] 7576 	ld	hl, #0x012c
      0024F7 E3               [19] 7577 	ex	(sp),hl
      0024F8 CDr00r00         [17] 7578 	call	_Wait
                                   7579 ;src\/GameLogic.h:284: }
      0024FB DD F9            [10] 7580 	ld	sp,ix
      0024FD DD E1            [14] 7581 	pop	ix
      0024FF C9               [10] 7582 	ret
      002500                       7583 ___str_7:
      002500 47 41 4D 45 20 4F 56  7584 	.ascii "GAME OVER"
             45 52
      002509 00                    7585 	.db 0x00
                                   7586 ;src\/GameLogic.h:286: void TestCase() {
                                   7587 ;	---------------------------------
                                   7588 ; Function TestCase
                                   7589 ; ---------------------------------
      00250A                       7590 _TestCase::
                                   7591 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      00250A 21r20r00         [10] 7592 	ld	hl, #(_playfield + 0x0020)
      00250D 36 04            [10] 7593 	ld	(hl), #0x04
                                   7594 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      00250F 21r21r00         [10] 7595 	ld	hl, #(_playfield + 0x0021)
      002512 36 0C            [10] 7596 	ld	(hl), #0x0c
                                   7597 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002514 21r0Ar00         [10] 7598 	ld	hl, #(_playfield + 0x000a)
      002517 36 0C            [10] 7599 	ld	(hl), #0x0c
                                   7600 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002519 21r16r00         [10] 7601 	ld	hl, #(_playfield + 0x0016)
      00251C 36 0C            [10] 7602 	ld	(hl), #0x0c
                                   7603 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      00251E 21r22r00         [10] 7604 	ld	hl, #(_playfield + 0x0022)
      002521 36 08            [10] 7605 	ld	(hl), #0x08
                                   7606 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      002523 21r3Ar00         [10] 7607 	ld	hl, #(_playfield + 0x003a)
      002526 36 08            [10] 7608 	ld	(hl), #0x08
                                   7609 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      002528 21r46r00         [10] 7610 	ld	hl, #(_playfield + 0x0046)
      00252B 36 0C            [10] 7611 	ld	(hl), #0x0c
                                   7612 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      00252D 21r0Br00         [10] 7613 	ld	hl, #(_playfield + 0x000b)
      002530 36 04            [10] 7614 	ld	(hl), #0x04
                                   7615 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      002532 21r17r00         [10] 7616 	ld	hl, #(_playfield + 0x0017)
      002535 36 04            [10] 7617 	ld	(hl), #0x04
                                   7618 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      002537 21r23r00         [10] 7619 	ld	hl, #(_playfield + 0x0023)
      00253A 36 08            [10] 7620 	ld	(hl), #0x08
                                   7621 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      00253C 21r2Fr00         [10] 7622 	ld	hl, #(_playfield + 0x002f)
      00253F 36 00            [10] 7623 	ld	(hl), #0x00
                                   7624 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      002541 21r3Br00         [10] 7625 	ld	hl, #(_playfield + 0x003b)
      002544 36 08            [10] 7626 	ld	(hl), #0x08
                                   7627 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      002546 21r47r00         [10] 7628 	ld	hl, #(_playfield + 0x0047)
      002549 36 08            [10] 7629 	ld	(hl), #0x08
                                   7630 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      00254B 3E 0C            [ 7] 7631 	ld	a, #0x0c
      00254D 32r90r00         [13] 7632 	ld	(#_topPiece), a
                                   7633 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   7634 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      002550 3E 08            [ 7] 7635 	ld	a,#0x08
      002552 32r91r00         [13] 7636 	ld	(#_midPiece),a
      002555 32r92r00         [13] 7637 	ld	(#_bottomPiece), a
                                   7638 ;src\/GameLogic.h:326: }
      002558 C9               [10] 7639 	ret
                                   7640 ;src\/GameLogic.h:328: void InitGame() {
                                   7641 ;	---------------------------------
                                   7642 ; Function InitGame
                                   7643 ; ---------------------------------
      002559                       7644 _InitGame::
                                   7645 ;src\/GameLogic.h:330: gameOver = FALSE;
      002559 21r00r00         [10] 7646 	ld	hl, #_gameOver
      00255C 36 00            [10] 7647 	ld	(hl), #0x00
                                   7648 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      00255E 21r02r00         [10] 7649 	ld	hl, #_line
      002561 36 00            [10] 7650 	ld	(hl), #0x00
                                   7651 ;src\/GameLogic.h:332: col = INITIAL_COL;
      002563 21r01r00         [10] 7652 	ld	hl, #_col
      002566 36 02            [10] 7653 	ld	(hl), #0x02
                                   7654 ;src\/GameLogic.h:334: blocksRemoved = 0;
      002568 21 00 00         [10] 7655 	ld	hl, #0x0000
      00256B 22r04r00         [16] 7656 	ld	(_blocksRemoved), hl
                                   7657 ;src\/GameLogic.h:335: level = 1;
      00256E 21r06r00         [10] 7658 	ld	hl, #_level
      002571 36 01            [10] 7659 	ld	(hl), #0x01
                                   7660 ;src\/GameLogic.h:336: newLevel = FALSE;
      002573 21r07r00         [10] 7661 	ld	hl, #_newLevel
      002576 36 00            [10] 7662 	ld	(hl), #0x00
                                   7663 ;src\/GameLogic.h:337: speed = 60;
      002578 21r96r00         [10] 7664 	ld	hl, #_speed
      00257B 36 3C            [10] 7665 	ld	(hl), #0x3c
                                   7666 ;src\/GameLogic.h:339: InitVRAM();
      00257D CDr8Br14         [17] 7667 	call	_InitVRAM
                                   7668 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002580 3Ar08r00         [13] 7669 	ld	a, (#_rndSeed + 0)
      002583 5F               [ 4] 7670 	ld	e, a
      002584 3A 9E FC         [13] 7671 	ld	a, (#_JIFFY + 0)
      002587 67               [ 4] 7672 	ld	h, a
      002588 2E 00            [ 7] 7673 	ld	l, #0x00
      00258A 55               [ 4] 7674 	ld	d, l
      00258B 06 08            [ 7] 7675 	ld	b, #0x08
      00258D                       7676 00133$:
      00258D 29               [11] 7677 	add	hl, hl
      00258E 30 01            [12] 7678 	jr	NC, 00134$
      002590 19               [11] 7679 	add	hl, de
      002591                       7680 00134$:
      002591 10 FA            [13] 7681 	djnz	00133$
      002593 7D               [ 4] 7682 	ld	a, l
      002594 C6 63            [ 7] 7683 	add	a, #0x63
      002596 4F               [ 4] 7684 	ld	c, a
      002597 3Ar08r00         [13] 7685 	ld	a, (#_rndSeed + 0)
      00259A 5F               [ 4] 7686 	ld	e, a
      00259B 3A 9E FC         [13] 7687 	ld	a, (#_JIFFY + 0)
      00259E 67               [ 4] 7688 	ld	h, a
      00259F 2E 00            [ 7] 7689 	ld	l, #0x00
      0025A1 55               [ 4] 7690 	ld	d, l
      0025A2 06 08            [ 7] 7691 	ld	b, #0x08
      0025A4                       7692 00135$:
      0025A4 29               [11] 7693 	add	hl, hl
      0025A5 30 01            [12] 7694 	jr	NC, 00136$
      0025A7 19               [11] 7695 	add	hl, de
      0025A8                       7696 00136$:
      0025A8 10 FA            [13] 7697 	djnz	00135$
      0025AA 79               [ 4] 7698 	ld	a, c
      0025AB F5               [11] 7699 	push	af
      0025AC 7D               [ 4] 7700 	ld	a, l
      0025AD 33               [ 6] 7701 	inc	sp
      0025AE F5               [11] 7702 	push	af
      0025AF 33               [ 6] 7703 	inc	sp
      0025B0 3Ar08r00         [13] 7704 	ld	a,(#_rndSeed + 0)
      0025B3 F5               [11] 7705 	push	af
      0025B4 33               [ 6] 7706 	inc	sp
      0025B5 CDr50r00         [17] 7707 	call	_InitRnd
      0025B8 F1               [10] 7708 	pop	af
      0025B9 33               [ 6] 7709 	inc	sp
                                   7710 ;src\/GameLogic.h:345: RandomPiece();
      0025BA CDrFBr1F         [17] 7711 	call	_RandomPiece
                                   7712 ;src\/GameLogic.h:346: RandomPiece();
      0025BD CDrFBr1F         [17] 7713 	call	_RandomPiece
                                   7714 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0025C0 0E 00            [ 7] 7715 	ld	c, #0x00
      0025C2                       7716 00107$:
      0025C2 79               [ 4] 7717 	ld	a, c
      0025C3 D6 0C            [ 7] 7718 	sub	a, #0x0c
      0025C5 30 20            [12] 7719 	jr	NC, 00102$
                                   7720 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0025C7 06 00            [ 7] 7721 	ld	b, #0x00
      0025C9                       7722 00104$:
      0025C9 78               [ 4] 7723 	ld	a, b
      0025CA D6 06            [ 7] 7724 	sub	a, #0x06
      0025CC 30 16            [12] 7725 	jr	NC, 00108$
                                   7726 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      0025CE 58               [ 4] 7727 	ld	e, b
      0025CF 16 00            [ 7] 7728 	ld	d, #0x00
      0025D1 6B               [ 4] 7729 	ld	l, e
      0025D2 62               [ 4] 7730 	ld	h, d
      0025D3 29               [11] 7731 	add	hl, hl
      0025D4 19               [11] 7732 	add	hl, de
      0025D5 29               [11] 7733 	add	hl, hl
      0025D6 29               [11] 7734 	add	hl, hl
      0025D7 11r00r00         [10] 7735 	ld	de, #_playfield
      0025DA 19               [11] 7736 	add	hl, de
      0025DB 59               [ 4] 7737 	ld	e, c
      0025DC 16 00            [ 7] 7738 	ld	d, #0x00
      0025DE 19               [11] 7739 	add	hl, de
      0025DF 36 00            [10] 7740 	ld	(hl), #0x00
                                   7741 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0025E1 04               [ 4] 7742 	inc	b
      0025E2 18 E5            [12] 7743 	jr	00104$
      0025E4                       7744 00108$:
                                   7745 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0025E4 0C               [ 4] 7746 	inc	c
      0025E5 18 DB            [12] 7747 	jr	00107$
      0025E7                       7748 00102$:
                                   7749 ;src\/GameLogic.h:356: TestCase();
      0025E7 CDr0Ar25         [17] 7750 	call	_TestCase
                                   7751 ;src\/GameLogic.h:360: DrawBackground();
      0025EA CDr5Cr14         [17] 7752 	call	_DrawBackground
                                   7753 ;src\/GameLogic.h:362: DrawPlayfield();
      0025ED CDr05r18         [17] 7754 	call	_DrawPlayfield
                                   7755 ;src\/GameLogic.h:364: DrawScore();
      0025F0 CDrB4r12         [17] 7756 	call	_DrawScore
                                   7757 ;src\/GameLogic.h:366: DrawNextPiece();
      0025F3 CDr5Ar11         [17] 7758 	call	_DrawNextPiece
                                   7759 ;src\/GameLogic.h:368: GameLoop();
                                   7760 ;src\/GameLogic.h:369: }
      0025F6 C3r30r21         [10] 7761 	jp	_GameLoop
                                   7762 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7763 ;	---------------------------------
                                   7764 ; Function ChangeFontColor
                                   7765 ; ---------------------------------
      0025F9                       7766 _ChangeFontColor::
                                   7767 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0025F9 21 02 00         [10] 7768 	ld	hl, #2
      0025FC 39               [11] 7769 	add	hl, sp
      0025FD 7E               [ 7] 7770 	ld	a, (hl)
      0025FE F5               [11] 7771 	push	af
      0025FF 33               [ 6] 7772 	inc	sp
      002600 21 00 03         [10] 7773 	ld	hl, #0x0300
      002603 E5               [11] 7774 	push	hl
      002604 21 78 21         [10] 7775 	ld	hl, #0x2178
      002607 E5               [11] 7776 	push	hl
      002608 CDr00r00         [17] 7777 	call	_FILVRM
      00260B F1               [10] 7778 	pop	af
      00260C F1               [10] 7779 	pop	af
      00260D 33               [ 6] 7780 	inc	sp
                                   7781 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00260E 21 02 00         [10] 7782 	ld	hl, #2
      002611 39               [11] 7783 	add	hl, sp
      002612 7E               [ 7] 7784 	ld	a, (hl)
      002613 F5               [11] 7785 	push	af
      002614 33               [ 6] 7786 	inc	sp
      002615 21 00 03         [10] 7787 	ld	hl, #0x0300
      002618 E5               [11] 7788 	push	hl
      002619 21 78 29         [10] 7789 	ld	hl, #0x2978
      00261C E5               [11] 7790 	push	hl
      00261D CDr00r00         [17] 7791 	call	_FILVRM
      002620 F1               [10] 7792 	pop	af
      002621 F1               [10] 7793 	pop	af
      002622 33               [ 6] 7794 	inc	sp
                                   7795 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002623 21 02 00         [10] 7796 	ld	hl, #2
      002626 39               [11] 7797 	add	hl, sp
      002627 7E               [ 7] 7798 	ld	a, (hl)
      002628 F5               [11] 7799 	push	af
      002629 33               [ 6] 7800 	inc	sp
      00262A 21 00 03         [10] 7801 	ld	hl, #0x0300
      00262D E5               [11] 7802 	push	hl
      00262E 21 78 31         [10] 7803 	ld	hl, #0x3178
      002631 E5               [11] 7804 	push	hl
      002632 CDr00r00         [17] 7805 	call	_FILVRM
      002635 F1               [10] 7806 	pop	af
      002636 F1               [10] 7807 	pop	af
      002637 33               [ 6] 7808 	inc	sp
                                   7809 ;src\/Intro.h:7: }
      002638 C9               [10] 7810 	ret
                                   7811 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7812 ;	---------------------------------
                                   7813 ; Function ScrollDownFont
                                   7814 ; ---------------------------------
      002639                       7815 _ScrollDownFont::
      002639 DD E5            [15] 7816 	push	ix
      00263B DD 21 00 00      [14] 7817 	ld	ix,#0
      00263F DD 39            [15] 7818 	add	ix,sp
      002641 F5               [11] 7819 	push	af
                                   7820 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002642 11 78 09         [10] 7821 	ld	de, #0x0978
      002645                       7822 00107$:
      002645 7B               [ 4] 7823 	ld	a, e
      002646 D6 78            [ 7] 7824 	sub	a, #0x78
      002648 7A               [ 4] 7825 	ld	a, d
      002649 DE 0C            [ 7] 7826 	sbc	a, #0x0c
      00264B 30 44            [12] 7827 	jr	NC, 00109$
                                   7828 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      00264D 33               [ 6] 7829 	inc	sp
      00264E 33               [ 6] 7830 	inc	sp
      00264F D5               [11] 7831 	push	de
      002650 DD 7E FE         [19] 7832 	ld	a, -2 (ix)
      002653 C6 07            [ 7] 7833 	add	a, #0x07
      002655 4F               [ 4] 7834 	ld	c, a
      002656 DD 7E FF         [19] 7835 	ld	a, -1 (ix)
      002659 CE 00            [ 7] 7836 	adc	a, #0x00
      00265B 47               [ 4] 7837 	ld	b, a
      00265C                       7838 00104$:
      00265C 78               [ 4] 7839 	ld	a, b
      00265D B1               [ 4] 7840 	or	a, c
      00265E 28 1A            [12] 7841 	jr	Z, 00101$
                                   7842 ;src\/Intro.h:27: value = RDVRM(j-1);
      002660 69               [ 4] 7843 	ld	l, c
      002661 60               [ 4] 7844 	ld	h, b
      002662 2B               [ 6] 7845 	dec	hl
      002663 C5               [11] 7846 	push	bc
      002664 D5               [11] 7847 	push	de
      002665 CDr00r00         [17] 7848 	call	_RDVRM
      002668 D1               [10] 7849 	pop	de
      002669 C1               [10] 7850 	pop	bc
                                   7851 ;src\/Intro.h:29: WRTVRM(j, 0);
      00266A C5               [11] 7852 	push	bc
      00266B D5               [11] 7853 	push	de
      00266C AF               [ 4] 7854 	xor	a, a
      00266D F5               [11] 7855 	push	af
      00266E 33               [ 6] 7856 	inc	sp
      00266F C5               [11] 7857 	push	bc
      002670 CDr00r00         [17] 7858 	call	_WRTVRM
      002673 F1               [10] 7859 	pop	af
      002674 33               [ 6] 7860 	inc	sp
      002675 D1               [10] 7861 	pop	de
      002676 C1               [10] 7862 	pop	bc
                                   7863 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002677 0B               [ 6] 7864 	dec	bc
      002678 18 E2            [12] 7865 	jr	00104$
      00267A                       7866 00101$:
                                   7867 ;src\/Intro.h:31: WRTVRM(i, 0);
      00267A AF               [ 4] 7868 	xor	a, a
      00267B F5               [11] 7869 	push	af
      00267C 33               [ 6] 7870 	inc	sp
      00267D D5               [11] 7871 	push	de
      00267E CDr00r00         [17] 7872 	call	_WRTVRM
      002681 F1               [10] 7873 	pop	af
      002682 33               [ 6] 7874 	inc	sp
                                   7875 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002683 DD 7E FE         [19] 7876 	ld	a, -2 (ix)
      002686 C6 08            [ 7] 7877 	add	a, #0x08
      002688 5F               [ 4] 7878 	ld	e, a
      002689 DD 7E FF         [19] 7879 	ld	a, -1 (ix)
      00268C CE 00            [ 7] 7880 	adc	a, #0x00
      00268E 57               [ 4] 7881 	ld	d, a
      00268F 18 B4            [12] 7882 	jr	00107$
      002691                       7883 00109$:
                                   7884 ;src\/Intro.h:35: }
      002691 DD F9            [10] 7885 	ld	sp, ix
      002693 DD E1            [14] 7886 	pop	ix
      002695 C9               [10] 7887 	ret
                                   7888 ;src\/Intro.h:37: void Intro() {
                                   7889 ;	---------------------------------
                                   7890 ; Function Intro
                                   7891 ; ---------------------------------
      002696                       7892 _Intro::
                                   7893 ;src\/Intro.h:41: InitVRAM();
      002696 CDr8Br14         [17] 7894 	call	_InitVRAM
                                   7895 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002699 11 0B 0B         [10] 7896 	ld	de, #0x0b0b
      00269C D5               [11] 7897 	push	de
      00269D 21r0Br27         [10] 7898 	ld	hl, #___str_8
      0026A0 E5               [11] 7899 	push	hl
      0026A1 CDr71r0E         [17] 7900 	call	_DrawString
      0026A4 F1               [10] 7901 	pop	af
      0026A5 F1               [10] 7902 	pop	af
                                   7903 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      0026A6 11 09 0D         [10] 7904 	ld	de, #0x0d09
      0026A9 D5               [11] 7905 	push	de
      0026AA 21r15r27         [10] 7906 	ld	hl, #___str_9
      0026AD E5               [11] 7907 	push	hl
      0026AE CDr71r0E         [17] 7908 	call	_DrawString
      0026B1 F1               [10] 7909 	pop	af
                                   7910 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      0026B2 26 F0            [ 7] 7911 	ld	h,#0xf0
      0026B4 E3               [19] 7912 	ex	(sp),hl
      0026B5 33               [ 6] 7913 	inc	sp
      0026B6 CDrF9r25         [17] 7914 	call	_ChangeFontColor
      0026B9 33               [ 6] 7915 	inc	sp
                                   7916 ;src\/Intro.h:56: Wait(2 * 60);
      0026BA 21 78 00         [10] 7917 	ld	hl, #0x0078
      0026BD E5               [11] 7918 	push	hl
      0026BE CDr00r00         [17] 7919 	call	_Wait
      0026C1 F1               [10] 7920 	pop	af
                                   7921 ;src\/Intro.h:58: while(counter++ < 20) {
      0026C2 0E 00            [ 7] 7922 	ld	c, #0x00
      0026C4                       7923 00112$:
      0026C4 79               [ 4] 7924 	ld	a, c
      0026C5 D6 14            [ 7] 7925 	sub	a, #0x14
      0026C7 D0               [11] 7926 	ret	NC
      0026C8 0C               [ 4] 7927 	inc	c
                                   7928 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      0026C9 21 9E FC         [10] 7929 	ld	hl, #_JIFFY
      0026CC 46               [ 7] 7930 	ld	b, (hl)
                                   7931 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      0026CD                       7932 00101$:
      0026CD 58               [ 4] 7933 	ld	e, b
      0026CE 16 00            [ 7] 7934 	ld	d, #0x00
      0026D0 2A 9E FC         [16] 7935 	ld	hl, (_JIFFY)
      0026D3 BF               [ 4] 7936 	cp	a, a
      0026D4 ED 52            [15] 7937 	sbc	hl, de
      0026D6 28 F5            [12] 7938 	jr	Z, 00101$
                                   7939 ;src\/Intro.h:63: if(counter == 15) {
      0026D8 79               [ 4] 7940 	ld	a, c
      0026D9 D6 0F            [ 7] 7941 	sub	a, #0x0f
      0026DB 20 0C            [12] 7942 	jr	NZ, 00110$
                                   7943 ;src\/Intro.h:64: ChangeFontColor(0x40);
      0026DD C5               [11] 7944 	push	bc
      0026DE 3E 40            [ 7] 7945 	ld	a, #0x40
      0026E0 F5               [11] 7946 	push	af
      0026E1 33               [ 6] 7947 	inc	sp
      0026E2 CDrF9r25         [17] 7948 	call	_ChangeFontColor
      0026E5 33               [ 6] 7949 	inc	sp
      0026E6 C1               [10] 7950 	pop	bc
      0026E7 18 DB            [12] 7951 	jr	00112$
      0026E9                       7952 00110$:
                                   7953 ;src\/Intro.h:66: else if(counter == 10) {
      0026E9 79               [ 4] 7954 	ld	a, c
      0026EA D6 0A            [ 7] 7955 	sub	a, #0x0a
      0026EC 20 0C            [12] 7956 	jr	NZ, 00107$
                                   7957 ;src\/Intro.h:67: ChangeFontColor(0x50);
      0026EE C5               [11] 7958 	push	bc
      0026EF 3E 50            [ 7] 7959 	ld	a, #0x50
      0026F1 F5               [11] 7960 	push	af
      0026F2 33               [ 6] 7961 	inc	sp
      0026F3 CDrF9r25         [17] 7962 	call	_ChangeFontColor
      0026F6 33               [ 6] 7963 	inc	sp
      0026F7 C1               [10] 7964 	pop	bc
      0026F8 18 CA            [12] 7965 	jr	00112$
      0026FA                       7966 00107$:
                                   7967 ;src\/Intro.h:69: else if(counter == 5) {
      0026FA 79               [ 4] 7968 	ld	a, c
      0026FB D6 05            [ 7] 7969 	sub	a, #0x05
      0026FD 20 C5            [12] 7970 	jr	NZ, 00112$
                                   7971 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      0026FF C5               [11] 7972 	push	bc
      002700 3E E0            [ 7] 7973 	ld	a, #0xe0
      002702 F5               [11] 7974 	push	af
      002703 33               [ 6] 7975 	inc	sp
      002704 CDrF9r25         [17] 7976 	call	_ChangeFontColor
      002707 33               [ 6] 7977 	inc	sp
      002708 C1               [10] 7978 	pop	bc
                                   7979 ;src\/Intro.h:140: }
      002709 18 B9            [12] 7980 	jr	00112$
      00270B                       7981 ___str_8:
      00270B 41 20 47 41 4D 45 20  7982 	.ascii "A GAME BY"
             42 59
      002714 00                    7983 	.db 0x00
      002715                       7984 ___str_9:
      002715 41 4E 44 52 45 20 42  7985 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      002723 00                    7986 	.db 0x00
                                   7987 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7988 ;	---------------------------------
                                   7989 ; Function SetBlock
                                   7990 ; ---------------------------------
      002724                       7991 _SetBlock::
      002724 DD E5            [15] 7992 	push	ix
      002726 DD 21 00 00      [14] 7993 	ld	ix,#0
      00272A DD 39            [15] 7994 	add	ix,sp
                                   7995 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      00272C DD 7E 04         [19] 7996 	ld	a, 4 (ix)
      00272F 06 00            [ 7] 7997 	ld	b, #0x00
      002731 4F               [ 4] 7998 	ld	c, a
      002732 78               [ 4] 7999 	ld	a, b
      002733 C6 18            [ 7] 8000 	add	a, #0x18
      002735 47               [ 4] 8001 	ld	b, a
      002736 DD 6E 05         [19] 8002 	ld	l, 5 (ix)
      002739 26 00            [ 7] 8003 	ld	h, #0x00
      00273B 29               [11] 8004 	add	hl, hl
      00273C 29               [11] 8005 	add	hl, hl
      00273D 29               [11] 8006 	add	hl, hl
      00273E 29               [11] 8007 	add	hl, hl
      00273F 29               [11] 8008 	add	hl, hl
      002740 09               [11] 8009 	add	hl, bc
      002741 DD 7E 06         [19] 8010 	ld	a, 6 (ix)
      002744 F5               [11] 8011 	push	af
      002745 33               [ 6] 8012 	inc	sp
      002746 E5               [11] 8013 	push	hl
      002747 CDr00r00         [17] 8014 	call	_WRTVRM
      00274A F1               [10] 8015 	pop	af
      00274B 33               [ 6] 8016 	inc	sp
                                   8017 ;src\/Title.h:16: }
      00274C DD E1            [14] 8018 	pop	ix
      00274E C9               [10] 8019 	ret
                                   8020 ;src\/Title.h:18: void TitleScreen() {
                                   8021 ;	---------------------------------
                                   8022 ; Function TitleScreen
                                   8023 ; ---------------------------------
      00274F                       8024 _TitleScreen::
      00274F DD E5            [15] 8025 	push	ix
      002751 DD 21 00 00      [14] 8026 	ld	ix,#0
      002755 DD 39            [15] 8027 	add	ix,sp
      002757 21 EB FF         [10] 8028 	ld	hl, #-21
      00275A 39               [11] 8029 	add	hl, sp
      00275B F9               [ 6] 8030 	ld	sp, hl
                                   8031 ;src\/Title.h:19: byte colorIndex = 0;
      00275C 0E 00            [ 7] 8032 	ld	c, #0x00
                                   8033 ;src\/Title.h:52: const char blocks[] = {
      00275E 21 00 00         [10] 8034 	ld	hl, #0
      002761 39               [11] 8035 	add	hl, sp
      002762 EB               [ 4] 8036 	ex	de, hl
      002763 3E 8E            [ 7] 8037 	ld	a, #0x8e
      002765 12               [ 7] 8038 	ld	(de), a
      002766 6B               [ 4] 8039 	ld	l, e
      002767 62               [ 4] 8040 	ld	h, d
      002768 23               [ 6] 8041 	inc	hl
      002769 36 8F            [10] 8042 	ld	(hl), #0x8f
      00276B 6B               [ 4] 8043 	ld	l, e
      00276C 62               [ 4] 8044 	ld	h, d
      00276D 23               [ 6] 8045 	inc	hl
      00276E 23               [ 6] 8046 	inc	hl
      00276F 36 90            [10] 8047 	ld	(hl), #0x90
      002771 6B               [ 4] 8048 	ld	l, e
      002772 62               [ 4] 8049 	ld	h, d
      002773 23               [ 6] 8050 	inc	hl
      002774 23               [ 6] 8051 	inc	hl
      002775 23               [ 6] 8052 	inc	hl
      002776 36 91            [10] 8053 	ld	(hl), #0x91
      002778 21 04 00         [10] 8054 	ld	hl, #0x0004
      00277B 19               [11] 8055 	add	hl, de
      00277C 36 92            [10] 8056 	ld	(hl), #0x92
      00277E 21 05 00         [10] 8057 	ld	hl, #0x0005
      002781 19               [11] 8058 	add	hl, de
      002782 36 93            [10] 8059 	ld	(hl), #0x93
      002784 21 06 00         [10] 8060 	ld	hl, #0x0006
      002787 19               [11] 8061 	add	hl, de
      002788 36 94            [10] 8062 	ld	(hl), #0x94
                                   8063 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      00278A 21 07 00         [10] 8064 	ld	hl, #7
      00278D 39               [11] 8065 	add	hl, sp
      00278E DD 75 F6         [19] 8066 	ld	-10 (ix), l
      002791 DD 74 F7         [19] 8067 	ld	-9 (ix), h
      002794 36 8E            [10] 8068 	ld	(hl), #0x8e
      002796 DD 6E F6         [19] 8069 	ld	l, -10 (ix)
      002799 DD 66 F7         [19] 8070 	ld	h, -9 (ix)
      00279C 23               [ 6] 8071 	inc	hl
      00279D 36 90            [10] 8072 	ld	(hl), #0x90
      00279F DD 6E F6         [19] 8073 	ld	l, -10 (ix)
      0027A2 DD 66 F7         [19] 8074 	ld	h, -9 (ix)
      0027A5 23               [ 6] 8075 	inc	hl
      0027A6 23               [ 6] 8076 	inc	hl
      0027A7 36 92            [10] 8077 	ld	(hl), #0x92
      0027A9 DD 6E F6         [19] 8078 	ld	l, -10 (ix)
      0027AC DD 66 F7         [19] 8079 	ld	h, -9 (ix)
      0027AF 23               [ 6] 8080 	inc	hl
      0027B0 23               [ 6] 8081 	inc	hl
      0027B1 23               [ 6] 8082 	inc	hl
      0027B2 36 94            [10] 8083 	ld	(hl), #0x94
                                   8084 ;src\/Title.h:65: InitVRAM();
      0027B4 C5               [11] 8085 	push	bc
      0027B5 D5               [11] 8086 	push	de
      0027B6 CDr8Br14         [17] 8087 	call	_InitVRAM
      0027B9 21 00 01         [10] 8088 	ld	hl, #0x0100
      0027BC E5               [11] 8089 	push	hl
      0027BD 21r36r29         [10] 8090 	ld	hl, #_TitleScreen_title_65536_280
      0027C0 E5               [11] 8091 	push	hl
      0027C1 21 00 18         [10] 8092 	ld	hl, #0x1800
      0027C4 E5               [11] 8093 	push	hl
      0027C5 CDr00r00         [17] 8094 	call	_LDIRVM
      0027C8 21 06 00         [10] 8095 	ld	hl, #6
      0027CB 39               [11] 8096 	add	hl, sp
      0027CC F9               [ 6] 8097 	ld	sp, hl
      0027CD 11 05 0D         [10] 8098 	ld	de, #0x0d05
      0027D0 D5               [11] 8099 	push	de
      0027D1 21r36r2A         [10] 8100 	ld	hl, #___str_10
      0027D4 E5               [11] 8101 	push	hl
      0027D5 CDr71r0E         [17] 8102 	call	_DrawString
      0027D8 F1               [10] 8103 	pop	af
      0027D9 26 17            [ 7] 8104 	ld	h,#0x17
      0027DB E3               [19] 8105 	ex	(sp),hl
      0027DC 33               [ 6] 8106 	inc	sp
      0027DD AF               [ 4] 8107 	xor	a, a
      0027DE F5               [11] 8108 	push	af
      0027DF 33               [ 6] 8109 	inc	sp
      0027E0 21r4Dr2A         [10] 8110 	ld	hl, #___str_11
      0027E3 E5               [11] 8111 	push	hl
      0027E4 CDr71r0E         [17] 8112 	call	_DrawString
      0027E7 F1               [10] 8113 	pop	af
      0027E8 F1               [10] 8114 	pop	af
      0027E9 11 19 17         [10] 8115 	ld	de, #0x1719
      0027EC D5               [11] 8116 	push	de
      0027ED 21r62r2A         [10] 8117 	ld	hl, #___str_12
      0027F0 E5               [11] 8118 	push	hl
      0027F1 CDr71r0E         [17] 8119 	call	_DrawString
      0027F4 F1               [10] 8120 	pop	af
      0027F5 F1               [10] 8121 	pop	af
      0027F6 D1               [10] 8122 	pop	de
      0027F7 C1               [10] 8123 	pop	bc
                                   8124 ;src\/Title.h:73: while(TRUE) {
      0027F8                       8125 00120$:
                                   8126 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      0027F8 DD 36 FD 00      [19] 8127 	ld	-3 (ix), #0
                                   8128 ;src\/Title.h:78: word counter = 0;
      0027FC AF               [ 4] 8129 	xor	a, a
      0027FD DD 77 FE         [19] 8130 	ld	-2 (ix), a
      002800 DD 77 FF         [19] 8131 	ld	-1 (ix), a
                                   8132 ;src\/Title.h:88: do {
      002803                       8133 00106$:
                                   8134 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002803 C5               [11] 8135 	push	bc
      002804 D5               [11] 8136 	push	de
      002805 11 1F 1F         [10] 8137 	ld	de, #0x1f1f
      002808 D5               [11] 8138 	push	de
      002809 CDrD9r00         [17] 8139 	call	_GetRandomInInterval
      00280C F1               [10] 8140 	pop	af
                                   8141 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      00280D DD 75 F8         [19] 8142 	ld	-8 (ix), l
      002810 11 07 07         [10] 8143 	ld	de, #0x0707
      002813 D5               [11] 8144 	push	de
      002814 CDrD9r00         [17] 8145 	call	_GetRandomInInterval
      002817 F1               [10] 8146 	pop	af
      002818 D1               [10] 8147 	pop	de
      002819 C1               [10] 8148 	pop	bc
      00281A DD 75 F9         [19] 8149 	ld	-7 (ix), l
                                   8150 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      00281D DD 6E F8         [19] 8151 	ld	l, -8 (ix)
      002820 3E 00            [ 7] 8152 	ld	a, #0x00
      002822 C6 18            [ 7] 8153 	add	a, #0x18
      002824 67               [ 4] 8154 	ld	h, a
      002825 DD 7E F9         [19] 8155 	ld	a, -7 (ix)
      002828 06 00            [ 7] 8156 	ld	b, #0x00
      00282A 87               [ 4] 8157 	add	a, a
      00282B CB 10            [ 8] 8158 	rl	b
      00282D 87               [ 4] 8159 	add	a, a
      00282E CB 10            [ 8] 8160 	rl	b
      002830 87               [ 4] 8161 	add	a, a
      002831 CB 10            [ 8] 8162 	rl	b
      002833 87               [ 4] 8163 	add	a, a
      002834 CB 10            [ 8] 8164 	rl	b
      002836 87               [ 4] 8165 	add	a, a
      002837 CB 10            [ 8] 8166 	rl	b
      002839 85               [ 4] 8167 	add	a, l
      00283A 6F               [ 4] 8168 	ld	l, a
      00283B 78               [ 4] 8169 	ld	a, b
      00283C 8C               [ 4] 8170 	adc	a, h
      00283D 67               [ 4] 8171 	ld	h, a
      00283E C5               [11] 8172 	push	bc
      00283F D5               [11] 8173 	push	de
      002840 CDr00r00         [17] 8174 	call	_RDVRM
      002843 D1               [10] 8175 	pop	de
      002844 C1               [10] 8176 	pop	bc
      002845 DD 75 FA         [19] 8177 	ld	-6 (ix), l
                                   8178 ;src\/Title.h:102: if(counter++ > 1000) {
      002848 DD 46 FE         [19] 8179 	ld	b, -2 (ix)
      00284B DD 6E FF         [19] 8180 	ld	l, -1 (ix)
      00284E DD 34 FE         [23] 8181 	inc	-2 (ix)
      002851 20 03            [12] 8182 	jr	NZ, 00193$
      002853 DD 34 FF         [23] 8183 	inc	-1 (ix)
      002856                       8184 00193$:
      002856 3E E8            [ 7] 8185 	ld	a, #0xe8
      002858 B8               [ 4] 8186 	cp	a, b
      002859 3E 03            [ 7] 8187 	ld	a, #0x03
      00285B 9D               [ 4] 8188 	sbc	a, l
      00285C 30 0F            [12] 8189 	jr	NC, 00107$
                                   8190 ;src\/Title.h:103: colorIndex++;
      00285E 0C               [ 4] 8191 	inc	c
                                   8192 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      00285F 79               [ 4] 8193 	ld	a, c
      002860 D6 03            [ 7] 8194 	sub	a, #0x03
      002862 38 02            [12] 8195 	jr	C, 00102$
      002864 0E 00            [ 7] 8196 	ld	c, #0x00
      002866                       8197 00102$:
                                   8198 ;src\/Title.h:119: counter = 0;
      002866 AF               [ 4] 8199 	xor	a, a
      002867 DD 77 FE         [19] 8200 	ld	-2 (ix), a
      00286A DD 77 FF         [19] 8201 	ld	-1 (ix), a
      00286D                       8202 00107$:
                                   8203 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      00286D DD 7E FA         [19] 8204 	ld	a, -6 (ix)
      002870 B7               [ 4] 8205 	or	a, a
      002871 28 90            [12] 8206 	jr	Z, 00106$
      002873 79               [ 4] 8207 	ld	a, c
      002874 3C               [ 4] 8208 	inc	a
      002875 F5               [11] 8209 	push	af
      002876 17               [ 4] 8210 	rla
      002877 9F               [ 4] 8211 	sbc	a, a
      002878 47               [ 4] 8212 	ld	b, a
      002879 F1               [10] 8213 	pop	af
      00287A DD 86 F6         [19] 8214 	add	a, -10 (ix)
      00287D DD 77 FB         [19] 8215 	ld	-5 (ix), a
      002880 78               [ 4] 8216 	ld	a, b
      002881 DD 8E F7         [19] 8217 	adc	a, -9 (ix)
      002884 DD 77 FC         [19] 8218 	ld	-4 (ix), a
      002887 DD 6E FB         [19] 8219 	ld	l, -5 (ix)
      00288A DD 66 FC         [19] 8220 	ld	h, -4 (ix)
      00288D 46               [ 7] 8221 	ld	b, (hl)
      00288E DD 7E FA         [19] 8222 	ld	a, -6 (ix)
      002891 90               [ 4] 8223 	sub	a, b
      002892 CAr03r28         [10] 8224 	jp	Z,00106$
                                   8225 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002895 06 00            [ 7] 8226 	ld	b, #0x00
      002897                       8227 00123$:
      002897 78               [ 4] 8228 	ld	a, b
      002898 D6 0A            [ 7] 8229 	sub	a, #0x0a
      00289A 30 79            [12] 8230 	jr	NC, 00118$
                                   8231 ;src\/Title.h:140: word lastJiffy = JIFFY;
      00289C 2A 9E FC         [16] 8232 	ld	hl, (_JIFFY)
      00289F DD 75 FE         [19] 8233 	ld	-2 (ix), l
      0028A2 DD 74 FF         [19] 8234 	ld	-1 (ix), h
                                   8235 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      0028A5                       8236 00109$:
      0028A5 FD 21 9E FC      [14] 8237 	ld	iy, #_JIFFY
      0028A9 FD 7E 00         [19] 8238 	ld	a, 0 (iy)
      0028AC DD 96 FE         [19] 8239 	sub	a, -2 (ix)
      0028AF 20 08            [12] 8240 	jr	NZ, 00195$
      0028B1 FD 7E 01         [19] 8241 	ld	a, 1 (iy)
      0028B4 DD 96 FF         [19] 8242 	sub	a, -1 (ix)
      0028B7 28 EC            [12] 8243 	jr	Z, 00109$
      0028B9                       8244 00195$:
                                   8245 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      0028B9 DD 6E FD         [19] 8246 	ld	l, -3 (ix)
      0028BC 26 00            [ 7] 8247 	ld	h, #0x00
      0028BE 19               [11] 8248 	add	hl, de
      0028BF 7E               [ 7] 8249 	ld	a, (hl)
      0028C0 C5               [11] 8250 	push	bc
      0028C1 D5               [11] 8251 	push	de
      0028C2 F5               [11] 8252 	push	af
      0028C3 33               [ 6] 8253 	inc	sp
      0028C4 DD 66 F9         [19] 8254 	ld	h, -7 (ix)
      0028C7 DD 6E F8         [19] 8255 	ld	l, -8 (ix)
      0028CA E5               [11] 8256 	push	hl
      0028CB CDr24r27         [17] 8257 	call	_SetBlock
      0028CE F1               [10] 8258 	pop	af
      0028CF 33               [ 6] 8259 	inc	sp
      0028D0 D1               [10] 8260 	pop	de
      0028D1 C1               [10] 8261 	pop	bc
                                   8262 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      0028D2 DD 7E FD         [19] 8263 	ld	a, -3 (ix)
      0028D5 DD 34 FD         [23] 8264 	inc	-3 (ix)
      0028D8 D6 07            [ 7] 8265 	sub	a, #0x07
      0028DA 38 04            [12] 8266 	jr	C, 00113$
      0028DC DD 36 FD 00      [19] 8267 	ld	-3 (ix), #0
      0028E0                       8268 00113$:
                                   8269 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      0028E0 C5               [11] 8270 	push	bc
      0028E1 D5               [11] 8271 	push	de
      0028E2 2E 00            [ 7] 8272 	ld	l, #0x00
      0028E4 CDr00r00         [17] 8273 	call	_GTTRIG
                                   8274 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      0028E7 DD 75 FF         [19] 8275 	ld	-1 (ix), l
      0028EA 2E 01            [ 7] 8276 	ld	l, #0x01
      0028EC CDr00r00         [17] 8277 	call	_GTTRIG
      0028EF D1               [10] 8278 	pop	de
      0028F0 C1               [10] 8279 	pop	bc
                                   8280 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      0028F1 E5               [11] 8281 	push	hl
      0028F2 C5               [11] 8282 	push	bc
      0028F3 D5               [11] 8283 	push	de
      0028F4 2E 03            [ 7] 8284 	ld	l, #0x03
      0028F6 CDr00r00         [17] 8285 	call	_GTTRIG
      0028F9 7D               [ 4] 8286 	ld	a, l
      0028FA D1               [10] 8287 	pop	de
      0028FB C1               [10] 8288 	pop	bc
      0028FC E1               [10] 8289 	pop	hl
      0028FD 67               [ 4] 8290 	ld	h, a
                                   8291 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      0028FE DD 7E FF         [19] 8292 	ld	a, -1 (ix)
      002901 3C               [ 4] 8293 	inc	a
      002902 28 06            [12] 8294 	jr	Z, 00114$
      002904 2C               [ 4] 8295 	inc	l
      002905 28 03            [12] 8296 	jr	Z, 00114$
      002907 24               [ 4] 8297 	inc	h
      002908 20 08            [12] 8298 	jr	NZ, 00124$
      00290A                       8299 00114$:
                                   8300 ;src\/Title.h:168: rndSeed = JIFFY;
      00290A 3A 9E FC         [13] 8301 	ld	a,(#_JIFFY + 0)
      00290D 32r08r00         [13] 8302 	ld	(#_rndSeed), a
                                   8303 ;src\/Title.h:169: return;
      002910 18 1F            [12] 8304 	jr	00125$
      002912                       8305 00124$:
                                   8306 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002912 04               [ 4] 8307 	inc	b
      002913 18 82            [12] 8308 	jr	00123$
      002915                       8309 00118$:
                                   8310 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002915 DD 6E FB         [19] 8311 	ld	l, -5 (ix)
      002918 DD 66 FC         [19] 8312 	ld	h, -4 (ix)
      00291B 7E               [ 7] 8313 	ld	a, (hl)
      00291C C5               [11] 8314 	push	bc
      00291D D5               [11] 8315 	push	de
      00291E F5               [11] 8316 	push	af
      00291F 33               [ 6] 8317 	inc	sp
      002920 DD 66 F9         [19] 8318 	ld	h, -7 (ix)
      002923 DD 6E F8         [19] 8319 	ld	l, -8 (ix)
      002926 E5               [11] 8320 	push	hl
      002927 CDr24r27         [17] 8321 	call	_SetBlock
      00292A F1               [10] 8322 	pop	af
      00292B 33               [ 6] 8323 	inc	sp
      00292C D1               [10] 8324 	pop	de
      00292D C1               [10] 8325 	pop	bc
      00292E C3rF8r27         [10] 8326 	jp	00120$
      002931                       8327 00125$:
                                   8328 ;src\/Title.h:176: }
      002931 DD F9            [10] 8329 	ld	sp, ix
      002933 DD E1            [14] 8330 	pop	ix
      002935 C9               [10] 8331 	ret
      002936                       8332 _TitleScreen_title_65536_280:
      002936 00                    8333 	.db #0x00	; 0
      002937 00                    8334 	.db #0x00	; 0
      002938 00                    8335 	.db #0x00	; 0
      002939 00                    8336 	.db #0x00	; 0
      00293A 8E                    8337 	.db #0x8e	; 142
      00293B 8E                    8338 	.db #0x8e	; 142
      00293C 8E                    8339 	.db #0x8e	; 142
      00293D 8E                    8340 	.db #0x8e	; 142
      00293E 00                    8341 	.db #0x00	; 0
      00293F 8E                    8342 	.db #0x8e	; 142
      002940 8E                    8343 	.db #0x8e	; 142
      002941 8E                    8344 	.db #0x8e	; 142
      002942 8E                    8345 	.db #0x8e	; 142
      002943 8E                    8346 	.db #0x8e	; 142
      002944 8E                    8347 	.db #0x8e	; 142
      002945 00                    8348 	.db #0x00	; 0
      002946 00                    8349 	.db #0x00	; 0
      002947 8E                    8350 	.db #0x8e	; 142
      002948 8E                    8351 	.db #0x8e	; 142
      002949 00                    8352 	.db #0x00	; 0
      00294A 00                    8353 	.db #0x00	; 0
      00294B 00                    8354 	.db #0x00	; 0
      00294C 8E                    8355 	.db #0x8e	; 142
      00294D 8E                    8356 	.db #0x8e	; 142
      00294E 00                    8357 	.db #0x00	; 0
      00294F 00                    8358 	.db #0x00	; 0
      002950 00                    8359 	.db #0x00	; 0
      002951 00                    8360 	.db #0x00	; 0
      002952 8E                    8361 	.db #0x8e	; 142
      002953 8E                    8362 	.db #0x8e	; 142
      002954 8E                    8363 	.db #0x8e	; 142
      002955 8E                    8364 	.db #0x8e	; 142
      002956 00                    8365 	.db #0x00	; 0
      002957 00                    8366 	.db #0x00	; 0
      002958 00                    8367 	.db #0x00	; 0
      002959 8E                    8368 	.db #0x8e	; 142
      00295A 8E                    8369 	.db #0x8e	; 142
      00295B 8E                    8370 	.db #0x8e	; 142
      00295C 8E                    8371 	.db #0x8e	; 142
      00295D 8E                    8372 	.db #0x8e	; 142
      00295E 00                    8373 	.db #0x00	; 0
      00295F 8E                    8374 	.db #0x8e	; 142
      002960 8E                    8375 	.db #0x8e	; 142
      002961 00                    8376 	.db #0x00	; 0
      002962 00                    8377 	.db #0x00	; 0
      002963 00                    8378 	.db #0x00	; 0
      002964 8E                    8379 	.db #0x8e	; 142
      002965 8E                    8380 	.db #0x8e	; 142
      002966 00                    8381 	.db #0x00	; 0
      002967 00                    8382 	.db #0x00	; 0
      002968 8E                    8383 	.db #0x8e	; 142
      002969 8E                    8384 	.db #0x8e	; 142
      00296A 00                    8385 	.db #0x00	; 0
      00296B 00                    8386 	.db #0x00	; 0
      00296C 8E                    8387 	.db #0x8e	; 142
      00296D 8E                    8388 	.db #0x8e	; 142
      00296E 00                    8389 	.db #0x00	; 0
      00296F 00                    8390 	.db #0x00	; 0
      002970 00                    8391 	.db #0x00	; 0
      002971 8E                    8392 	.db #0x8e	; 142
      002972 8E                    8393 	.db #0x8e	; 142
      002973 8E                    8394 	.db #0x8e	; 142
      002974 8E                    8395 	.db #0x8e	; 142
      002975 8E                    8396 	.db #0x8e	; 142
      002976 00                    8397 	.db #0x00	; 0
      002977 00                    8398 	.db #0x00	; 0
      002978 8E                    8399 	.db #0x8e	; 142
      002979 8E                    8400 	.db #0x8e	; 142
      00297A 8E                    8401 	.db #0x8e	; 142
      00297B 00                    8402 	.db #0x00	; 0
      00297C 8E                    8403 	.db #0x8e	; 142
      00297D 8E                    8404 	.db #0x8e	; 142
      00297E 00                    8405 	.db #0x00	; 0
      00297F 8E                    8406 	.db #0x8e	; 142
      002980 8E                    8407 	.db #0x8e	; 142
      002981 00                    8408 	.db #0x00	; 0
      002982 00                    8409 	.db #0x00	; 0
      002983 00                    8410 	.db #0x00	; 0
      002984 8E                    8411 	.db #0x8e	; 142
      002985 8E                    8412 	.db #0x8e	; 142
      002986 00                    8413 	.db #0x00	; 0
      002987 00                    8414 	.db #0x00	; 0
      002988 00                    8415 	.db #0x00	; 0
      002989 8E                    8416 	.db #0x8e	; 142
      00298A 8E                    8417 	.db #0x8e	; 142
      00298B 00                    8418 	.db #0x00	; 0
      00298C 8E                    8419 	.db #0x8e	; 142
      00298D 8E                    8420 	.db #0x8e	; 142
      00298E 00                    8421 	.db #0x00	; 0
      00298F 00                    8422 	.db #0x00	; 0
      002990 8E                    8423 	.db #0x8e	; 142
      002991 8E                    8424 	.db #0x8e	; 142
      002992 8E                    8425 	.db #0x8e	; 142
      002993 00                    8426 	.db #0x00	; 0
      002994 8E                    8427 	.db #0x8e	; 142
      002995 8E                    8428 	.db #0x8e	; 142
      002996 00                    8429 	.db #0x00	; 0
      002997 8E                    8430 	.db #0x8e	; 142
      002998 8E                    8431 	.db #0x8e	; 142
      002999 8E                    8432 	.db #0x8e	; 142
      00299A 00                    8433 	.db #0x00	; 0
      00299B 00                    8434 	.db #0x00	; 0
      00299C 8E                    8435 	.db #0x8e	; 142
      00299D 8E                    8436 	.db #0x8e	; 142
      00299E 00                    8437 	.db #0x00	; 0
      00299F 8E                    8438 	.db #0x8e	; 142
      0029A0 8E                    8439 	.db #0x8e	; 142
      0029A1 00                    8440 	.db #0x00	; 0
      0029A2 00                    8441 	.db #0x00	; 0
      0029A3 8E                    8442 	.db #0x8e	; 142
      0029A4 8E                    8443 	.db #0x8e	; 142
      0029A5 00                    8444 	.db #0x00	; 0
      0029A6 00                    8445 	.db #0x00	; 0
      0029A7 00                    8446 	.db #0x00	; 0
      0029A8 00                    8447 	.db #0x00	; 0
      0029A9 00                    8448 	.db #0x00	; 0
      0029AA 8E                    8449 	.db #0x8e	; 142
      0029AB 8E                    8450 	.db #0x8e	; 142
      0029AC 8E                    8451 	.db #0x8e	; 142
      0029AD 00                    8452 	.db #0x00	; 0
      0029AE 00                    8453 	.db #0x00	; 0
      0029AF 8E                    8454 	.db #0x8e	; 142
      0029B0 8E                    8455 	.db #0x8e	; 142
      0029B1 8E                    8456 	.db #0x8e	; 142
      0029B2 00                    8457 	.db #0x00	; 0
      0029B3 00                    8458 	.db #0x00	; 0
      0029B4 8E                    8459 	.db #0x8e	; 142
      0029B5 8E                    8460 	.db #0x8e	; 142
      0029B6 00                    8461 	.db #0x00	; 0
      0029B7 8E                    8462 	.db #0x8e	; 142
      0029B8 8E                    8463 	.db #0x8e	; 142
      0029B9 00                    8464 	.db #0x00	; 0
      0029BA 00                    8465 	.db #0x00	; 0
      0029BB 00                    8466 	.db #0x00	; 0
      0029BC 8E                    8467 	.db #0x8e	; 142
      0029BD 8E                    8468 	.db #0x8e	; 142
      0029BE 00                    8469 	.db #0x00	; 0
      0029BF 8E                    8470 	.db #0x8e	; 142
      0029C0 8E                    8471 	.db #0x8e	; 142
      0029C1 8E                    8472 	.db #0x8e	; 142
      0029C2 8E                    8473 	.db #0x8e	; 142
      0029C3 8E                    8474 	.db #0x8e	; 142
      0029C4 00                    8475 	.db #0x00	; 0
      0029C5 00                    8476 	.db #0x00	; 0
      0029C6 00                    8477 	.db #0x00	; 0
      0029C7 00                    8478 	.db #0x00	; 0
      0029C8 00                    8479 	.db #0x00	; 0
      0029C9 00                    8480 	.db #0x00	; 0
      0029CA 8E                    8481 	.db #0x8e	; 142
      0029CB 8E                    8482 	.db #0x8e	; 142
      0029CC 00                    8483 	.db #0x00	; 0
      0029CD 00                    8484 	.db #0x00	; 0
      0029CE 00                    8485 	.db #0x00	; 0
      0029CF 8E                    8486 	.db #0x8e	; 142
      0029D0 8E                    8487 	.db #0x8e	; 142
      0029D1 00                    8488 	.db #0x00	; 0
      0029D2 00                    8489 	.db #0x00	; 0
      0029D3 00                    8490 	.db #0x00	; 0
      0029D4 8E                    8491 	.db #0x8e	; 142
      0029D5 8E                    8492 	.db #0x8e	; 142
      0029D6 00                    8493 	.db #0x00	; 0
      0029D7 8E                    8494 	.db #0x8e	; 142
      0029D8 8E                    8495 	.db #0x8e	; 142
      0029D9 00                    8496 	.db #0x00	; 0
      0029DA 00                    8497 	.db #0x00	; 0
      0029DB 00                    8498 	.db #0x00	; 0
      0029DC 8E                    8499 	.db #0x8e	; 142
      0029DD 8E                    8500 	.db #0x8e	; 142
      0029DE 00                    8501 	.db #0x00	; 0
      0029DF 8E                    8502 	.db #0x8e	; 142
      0029E0 8E                    8503 	.db #0x8e	; 142
      0029E1 8E                    8504 	.db #0x8e	; 142
      0029E2 8E                    8505 	.db #0x8e	; 142
      0029E3 8E                    8506 	.db #0x8e	; 142
      0029E4 00                    8507 	.db #0x00	; 0
      0029E5 00                    8508 	.db #0x00	; 0
      0029E6 00                    8509 	.db #0x00	; 0
      0029E7 00                    8510 	.db #0x00	; 0
      0029E8 00                    8511 	.db #0x00	; 0
      0029E9 00                    8512 	.db #0x00	; 0
      0029EA 8E                    8513 	.db #0x8e	; 142
      0029EB 8E                    8514 	.db #0x8e	; 142
      0029EC 00                    8515 	.db #0x00	; 0
      0029ED 00                    8516 	.db #0x00	; 0
      0029EE 00                    8517 	.db #0x00	; 0
      0029EF 8E                    8518 	.db #0x8e	; 142
      0029F0 8E                    8519 	.db #0x8e	; 142
      0029F1 00                    8520 	.db #0x00	; 0
      0029F2 00                    8521 	.db #0x00	; 0
      0029F3 00                    8522 	.db #0x00	; 0
      0029F4 8E                    8523 	.db #0x8e	; 142
      0029F5 8E                    8524 	.db #0x8e	; 142
      0029F6 00                    8525 	.db #0x00	; 0
      0029F7 8E                    8526 	.db #0x8e	; 142
      0029F8 8E                    8527 	.db #0x8e	; 142
      0029F9 8E                    8528 	.db #0x8e	; 142
      0029FA 8E                    8529 	.db #0x8e	; 142
      0029FB 8E                    8530 	.db #0x8e	; 142
      0029FC 8E                    8531 	.db #0x8e	; 142
      0029FD 8E                    8532 	.db #0x8e	; 142
      0029FE 00                    8533 	.db #0x00	; 0
      0029FF 8E                    8534 	.db #0x8e	; 142
      002A00 8E                    8535 	.db #0x8e	; 142
      002A01 00                    8536 	.db #0x00	; 0
      002A02 00                    8537 	.db #0x00	; 0
      002A03 00                    8538 	.db #0x00	; 0
      002A04 8E                    8539 	.db #0x8e	; 142
      002A05 00                    8540 	.db #0x00	; 0
      002A06 00                    8541 	.db #0x00	; 0
      002A07 00                    8542 	.db #0x00	; 0
      002A08 00                    8543 	.db #0x00	; 0
      002A09 00                    8544 	.db #0x00	; 0
      002A0A 8E                    8545 	.db #0x8e	; 142
      002A0B 8E                    8546 	.db #0x8e	; 142
      002A0C 00                    8547 	.db #0x00	; 0
      002A0D 00                    8548 	.db #0x00	; 0
      002A0E 00                    8549 	.db #0x00	; 0
      002A0F 8E                    8550 	.db #0x8e	; 142
      002A10 8E                    8551 	.db #0x8e	; 142
      002A11 8E                    8552 	.db #0x8e	; 142
      002A12 8E                    8553 	.db #0x8e	; 142
      002A13 8E                    8554 	.db #0x8e	; 142
      002A14 8E                    8555 	.db #0x8e	; 142
      002A15 8E                    8556 	.db #0x8e	; 142
      002A16 00                    8557 	.db #0x00	; 0
      002A17 8E                    8558 	.db #0x8e	; 142
      002A18 8E                    8559 	.db #0x8e	; 142
      002A19 00                    8560 	.db #0x00	; 0
      002A1A 00                    8561 	.db #0x00	; 0
      002A1B 00                    8562 	.db #0x00	; 0
      002A1C 8E                    8563 	.db #0x8e	; 142
      002A1D 8E                    8564 	.db #0x8e	; 142
      002A1E 00                    8565 	.db #0x00	; 0
      002A1F 8E                    8566 	.db #0x8e	; 142
      002A20 8E                    8567 	.db #0x8e	; 142
      002A21 00                    8568 	.db #0x00	; 0
      002A22 00                    8569 	.db #0x00	; 0
      002A23 00                    8570 	.db #0x00	; 0
      002A24 8E                    8571 	.db #0x8e	; 142
      002A25 00                    8572 	.db #0x00	; 0
      002A26 00                    8573 	.db #0x00	; 0
      002A27 00                    8574 	.db #0x00	; 0
      002A28 00                    8575 	.db #0x00	; 0
      002A29 00                    8576 	.db #0x00	; 0
      002A2A 8E                    8577 	.db #0x8e	; 142
      002A2B 8E                    8578 	.db #0x8e	; 142
      002A2C 00                    8579 	.db #0x00	; 0
      002A2D 00                    8580 	.db #0x00	; 0
      002A2E 00                    8581 	.db #0x00	; 0
      002A2F 8E                    8582 	.db #0x8e	; 142
      002A30 8E                    8583 	.db #0x8e	; 142
      002A31 00                    8584 	.db #0x00	; 0
      002A32 00                    8585 	.db #0x00	; 0
      002A33 00                    8586 	.db #0x00	; 0
      002A34 8E                    8587 	.db #0x8e	; 142
      002A35 8E                    8588 	.db #0x8e	; 142
      002A36                       8589 ___str_10:
      002A36 50 52 45 53 53 20 54  8590 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002A4C 00                    8591 	.db 0x00
      002A4D                       8592 ___str_11:
      002A4D 41 4E 44 52 45 42 41  8593 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002A61 00                    8594 	.db 0x00
      002A62                       8595 ___str_12:
      002A62 76 2E 3F 2E 3F 2E 3F  8596 	.ascii "v.?.?.?"
      002A69 00                    8597 	.db 0x00
                                   8598 ;src\main.c:90: void main() {
                                   8599 ;	---------------------------------
                                   8600 ; Function main
                                   8601 ; ---------------------------------
      002A6A                       8602 _main::
                                   8603 ;src\main.c:92: while(TRUE) {
      002A6A                       8604 00102$:
                                   8605 ;src\main.c:98: InitGame();
      002A6A CDr59r25         [17] 8606 	call	_InitGame
                                   8607 ;src\main.c:101: }
      002A6D 18 FB            [12] 8608 	jr	00102$
                                   8609 	.area _CODE
                                   8610 	.area _INITIALIZER
      000000                       8611 __xinit__gameOver:
      000000 00                    8612 	.db #0x00	; 0
      000001                       8613 __xinit__col:
      000001 00                    8614 	.db #0x00	; 0
      000002                       8615 __xinit__line:
      000002 00                    8616 	.db #0x00	; 0
      000003                       8617 __xinit__counter:
      000003 00                    8618 	.db #0x00	; 0
      000004                       8619 __xinit__blocksRemoved:
      000004 00 00                 8620 	.dw #0x0000
      000006                       8621 __xinit__level:
      000006 01                    8622 	.db #0x01	; 1
      000007                       8623 __xinit__newLevel:
      000007 00                    8624 	.db #0x00	; 0
      000008                       8625 __xinit__rndSeed:
      000008 00                    8626 	.db #0x00	; 0
                                   8627 	.area _CABS (ABS)
