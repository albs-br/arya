                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _GetNextPieceColors
                                     37 	.globl _DrawColumn
                                     38 	.globl _DrawNumber
                                     39 	.globl _DrawString
                                     40 	.globl _DrawChar
                                     41 	.globl _DrawExplosionSprite
                                     42 	.globl _HideExplosionSprite
                                     43 	.globl _HideHitSprite
                                     44 	.globl _DrawHitSprite
                                     45 	.globl _HideArrowSprite
                                     46 	.globl _DrawArrowSprite
                                     47 	.globl _GetRandomInInterval
                                     48 	.globl _GetRandom
                                     49 	.globl _InitRnd
                                     50 	.globl _Power
                                     51 	.globl _Wait
                                     52 	.globl _SNSMAT
                                     53 	.globl _GTTRIG
                                     54 	.globl _GTSTCK
                                     55 	.globl _WRTPSG
                                     56 	.globl _GICINI
                                     57 	.globl _INIGRP
                                     58 	.globl _LDIRVM
                                     59 	.globl _FILVRM
                                     60 	.globl _WRTVRM
                                     61 	.globl _RDVRM
                                     62 	.globl _WRTVDP
                                     63 	.globl _ENASCR
                                     64 	.globl _DISSCR
                                     65 	.globl _rndSeed
                                     66 	.globl _newLevel
                                     67 	.globl _level
                                     68 	.globl _blocksRemoved
                                     69 	.globl _counter
                                     70 	.globl _line
                                     71 	.globl _col
                                     72 	.globl _gameOver
                                     73 	.globl _nextPieceColor_Back
                                     74 	.globl _nextPieceColor_Front
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _nextBottomPiece
                                     81 	.globl _nextMidPiece
                                     82 	.globl _nextTopPiece
                                     83 	.globl _bottomPiece
                                     84 	.globl _midPiece
                                     85 	.globl _topPiece
                                     86 	.globl _playfieldTemp
                                     87 	.globl _playfield
                                     88 	.globl _GETPNT
                                     89 	.globl _PUTPNT
                                     90 	.globl _REPCNT
                                     91 	.globl _SCNCNT
                                     92 	.globl _ATRBYT
                                     93 	.globl _CMASK
                                     94 	.globl _CLOC
                                     95 	.globl _BDRCLR
                                     96 	.globl _BAKCLR
                                     97 	.globl _FORCLR
                                     98 	.globl _TRGFLG
                                     99 	.globl _STATFL
                                    100 	.globl _MSX_vdp_regs
                                    101 	.globl _CNSDFG
                                    102 	.globl _CSRX
                                    103 	.globl _CSRY
                                    104 	.globl _MSX_modedata_screen3
                                    105 	.globl _MSX_modedata_screen2
                                    106 	.globl _MSX_modedata_screen1
                                    107 	.globl _MSX_modedata_screen0
                                    108 	.globl _CLIKSW
                                    109 	.globl _JIFFY
                                    110 	.globl _CLMLST
                                    111 	.globl _CRTCNT
                                    112 	.globl _LINLEN
                                    113 	.globl _LINL32
                                    114 	.globl _LINL40
                                    115 	.globl _MSX_charset
                                    116 	.globl _FONT
                                    117 	.globl _pieces
                                    118 	.globl _MSX_version
                                    119 	.globl _MSX_vdp_port_write
                                    120 	.globl _MSX_vdp_port_read
                                    121 ;--------------------------------------------------------
                                    122 ; special function registers
                                    123 ;--------------------------------------------------------
                                    124 ;--------------------------------------------------------
                                    125 ; ram data
                                    126 ;--------------------------------------------------------
                                    127 	.area _DATA
                           000004   128 _MSX_charset	=	0x0004
                           00F3AE   129 _LINL40	=	0xf3ae
                           00F3AF   130 _LINL32	=	0xf3af
                           00F3B0   131 _LINLEN	=	0xf3b0
                           00F3B1   132 _CRTCNT	=	0xf3b1
                           00F3B1   133 _CLMLST	=	0xf3b1
                           00FC9E   134 _JIFFY	=	0xfc9e
                           00F3DB   135 _CLIKSW	=	0xf3db
                           00F3B3   136 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   137 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   138 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   139 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   140 _CSRY	=	0xf3dc
                           00F3DD   141 _CSRX	=	0xf3dd
                           00F3DE   142 _CNSDFG	=	0xf3de
                           00F3DF   143 _MSX_vdp_regs	=	0xf3df
                           00F3E7   144 _STATFL	=	0xf3e7
                           00F3E8   145 _TRGFLG	=	0xf3e8
                           00F3E9   146 _FORCLR	=	0xf3e9
                           00F3EA   147 _BAKCLR	=	0xf3ea
                           00F3EB   148 _BDRCLR	=	0xf3eb
                           00F92A   149 _CLOC	=	0xf92a
                           00F92C   150 _CMASK	=	0xf92c
                           00F3F2   151 _ATRBYT	=	0xf3f2
                           00F3F6   152 _SCNCNT	=	0xf3f6
                           00F3F7   153 _REPCNT	=	0xf3f7
                           00F3F8   154 _PUTPNT	=	0xf3f8
                           00F3FA   155 _GETPNT	=	0xf3fa
      000000                        156 _playfield::
      000000                        157 	.ds 72
      000048                        158 _playfieldTemp::
      000048                        159 	.ds 72
      000090                        160 _topPiece::
      000090                        161 	.ds 1
      000091                        162 _midPiece::
      000091                        163 	.ds 1
      000092                        164 _bottomPiece::
      000092                        165 	.ds 1
      000093                        166 _nextTopPiece::
      000093                        167 	.ds 1
      000094                        168 _nextMidPiece::
      000094                        169 	.ds 1
      000095                        170 _nextBottomPiece::
      000095                        171 	.ds 1
      000096                        172 _speed::
      000096                        173 	.ds 1
      000097                        174 _Rand_a::
      000097                        175 	.ds 1
      000098                        176 _Rand_b::
      000098                        177 	.ds 1
      000099                        178 _Rand_c::
      000099                        179 	.ds 1
      00009A                        180 _Rand_x::
      00009A                        181 	.ds 1
      00009B                        182 _nextPieceColor_Front::
      00009B                        183 	.ds 1
      00009C                        184 _nextPieceColor_Back::
      00009C                        185 	.ds 1
                                    186 ;--------------------------------------------------------
                                    187 ; ram data
                                    188 ;--------------------------------------------------------
                                    189 	.area _INITIALIZED
      000000                        190 _gameOver::
      000000                        191 	.ds 1
      000001                        192 _col::
      000001                        193 	.ds 1
      000002                        194 _line::
      000002                        195 	.ds 1
      000003                        196 _counter::
      000003                        197 	.ds 1
      000004                        198 _blocksRemoved::
      000004                        199 	.ds 2
      000006                        200 _level::
      000006                        201 	.ds 1
      000007                        202 _newLevel::
      000007                        203 	.ds 1
      000008                        204 _rndSeed::
      000008                        205 	.ds 1
                                    206 ;--------------------------------------------------------
                                    207 ; absolute external ram data
                                    208 ;--------------------------------------------------------
                                    209 	.area _DABS (ABS)
                                    210 ;--------------------------------------------------------
                                    211 ; global & static initialisations
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _GSINIT
                                    215 	.area _GSFINAL
                                    216 	.area _GSINIT
                                    217 ;--------------------------------------------------------
                                    218 ; Home
                                    219 ;--------------------------------------------------------
                                    220 	.area _HOME
                                    221 	.area _HOME
                                    222 ;--------------------------------------------------------
                                    223 ; code
                                    224 ;--------------------------------------------------------
                                    225 	.area _CODE
                                    226 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    227 ;	---------------------------------
                                    228 ; Function Wait
                                    229 ; ---------------------------------
      000000                        230 _Wait::
                                    231 ;src\/Common.h:2: do {
      000000 D1               [10]  232 	pop	de
      000001 C1               [10]  233 	pop	bc
      000002 C5               [11]  234 	push	bc
      000003 D5               [11]  235 	push	de
      000004                        236 00104$:
                                    237 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  238 	ld	de, (_JIFFY)
                                    239 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        240 00101$:
      000008 2A 9E FC         [16]  241 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  242 	cp	a, a
      00000C ED 52            [15]  243 	sbc	hl, de
      00000E 28 F8            [12]  244 	jr	Z, 00101$
                                    245 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  246 	ld	e, c
      000011 50               [ 4]  247 	ld	d, b
      000012 0B               [ 6]  248 	dec	bc
      000013 7A               [ 4]  249 	ld	a, d
      000014 B3               [ 4]  250 	or	a, e
      000015 20 ED            [12]  251 	jr	NZ, 00104$
                                    252 ;src\/Common.h:8: }
      000017 C9               [10]  253 	ret
                           000006   254 _MSX_vdp_port_read	=	0x0006
                           000007   255 _MSX_vdp_port_write	=	0x0007
                           00002D   256 _MSX_version	=	0x002d
      000018                        257 _pieces:
      000018 04                     258 	.db #0x04	; 4
      000019 08                     259 	.db #0x08	; 8
      00001A 0C                     260 	.db #0x0c	; 12
      00001B 10                     261 	.db #0x10	; 16
      00001C 14                     262 	.db #0x14	; 20
                                    263 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    264 ;	---------------------------------
                                    265 ; Function Power
                                    266 ; ---------------------------------
      00001D                        267 _Power::
      00001D DD E5            [15]  268 	push	ix
      00001F DD 21 00 00      [14]  269 	ld	ix,#0
      000023 DD 39            [15]  270 	add	ix,sp
                                    271 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  272 	ld	c, 4 (ix)
      000028 06 00            [ 7]  273 	ld	b, #0x00
      00002A 69               [ 4]  274 	ld	l, c
      00002B 60               [ 4]  275 	ld	h, b
                                    276 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  277 	ld	a, 5 (ix)
      00002F B7               [ 4]  278 	or	a, a
      000030 20 05            [12]  279 	jr	NZ, 00111$
      000032 21 01 00         [10]  280 	ld	hl, #0x0001
      000035 18 16            [12]  281 	jr	00107$
                                    282 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        283 00111$:
      000037 1E 01            [ 7]  284 	ld	e, #0x01
      000039                        285 00105$:
      000039 7B               [ 4]  286 	ld	a, e
      00003A DD 96 05         [19]  287 	sub	a, 5 (ix)
      00003D 30 0E            [12]  288 	jr	NC, 00103$
                                    289 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  290 	push	bc
      000040 D5               [11]  291 	push	de
      000041 C5               [11]  292 	push	bc
      000042 E5               [11]  293 	push	hl
      000043 CDr00r00         [17]  294 	call	__mulint
      000046 F1               [10]  295 	pop	af
      000047 F1               [10]  296 	pop	af
      000048 D1               [10]  297 	pop	de
      000049 C1               [10]  298 	pop	bc
                                    299 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  300 	inc	e
      00004B 18 EC            [12]  301 	jr	00105$
      00004D                        302 00103$:
                                    303 ;src\/Math.h:10: return power;
      00004D                        304 00107$:
                                    305 ;src\/Math.h:11: }
      00004D DD E1            [14]  306 	pop	ix
      00004F C9               [10]  307 	ret
                                    308 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    309 ;	---------------------------------
                                    310 ; Function InitRnd
                                    311 ; ---------------------------------
      000050                        312 _InitRnd::
                                    313 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  314 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  315 	ld	hl, #2
      000056 39               [11]  316 	add	hl, sp
      000057 AE               [ 7]  317 	xor	a, (hl)
      000058 32r97r00         [13]  318 	ld	(_Rand_a+0), a
                                    319 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  320 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  321 	ld	hl, #3
      000061 39               [11]  322 	add	hl, sp
      000062 AE               [ 7]  323 	xor	a, (hl)
      000063 32r98r00         [13]  324 	ld	(_Rand_b+0), a
                                    325 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  326 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  327 	ld	hl, #4
      00006C 39               [11]  328 	add	hl, sp
      00006D AE               [ 7]  329 	xor	a, (hl)
      00006E 32r99r00         [13]  330 	ld	(_Rand_c+0), a
                                    331 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  332 	ld	hl, #_Rand_x
      000074 34               [11]  333 	inc	(hl)
                                    334 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  335 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  336 	ld	hl, #_Rand_c
      00007B AE               [ 7]  337 	xor	a, (hl)
      00007C 21r9Ar00         [10]  338 	ld	hl, #_Rand_x
      00007F AE               [ 7]  339 	xor	a, (hl)
      000080 32r97r00         [13]  340 	ld	(_Rand_a+0), a
                                    341 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  342 	ld	hl, #_Rand_b
      000086 7E               [ 7]  343 	ld	a, (hl)
      000087 FD 21r97r00      [14]  344 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  345 	add	a, 0 (iy)
      00008E 77               [ 7]  346 	ld	(hl), a
                                    347 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  348 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  349 	srl	a
      000094 21r99r00         [10]  350 	ld	hl, #_Rand_c
      000097 86               [ 7]  351 	add	a, (hl)
      000098 FD 21r97r00      [14]  352 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  353 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  354 	ld	(_Rand_c+0), a
                                    355 ;src\/Random.h:38: }
      0000A2 C9               [10]  356 	ret
                                    357 ;src\/Random.h:40: unsigned char GetRandom() {
                                    358 ;	---------------------------------
                                    359 ; Function GetRandom
                                    360 ; ---------------------------------
      0000A3                        361 _GetRandom::
                                    362 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  363 	ld	hl, #_Rand_x
      0000A6 34               [11]  364 	inc	(hl)
                                    365 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  366 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  367 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  368 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  369 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  370 	xor	a, (hl)
      0000B2 32r97r00         [13]  371 	ld	(_Rand_a+0), a
                                    372 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  373 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  374 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  375 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  376 	add	a, 0 (iy)
      0000C0 77               [ 7]  377 	ld	(hl), a
                                    378 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  379 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  380 	srl	a
      0000C6 21r99r00         [10]  381 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  382 	add	a, (hl)
      0000CA FD 21r97r00      [14]  383 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  384 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  385 	ld	(_Rand_c+0), a
                                    386 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  387 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  388 	ld	l, a
                                    389 ;src\/Random.h:47: }
      0000D8 C9               [10]  390 	ret
                                    391 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    392 ;	---------------------------------
                                    393 ; Function GetRandomInInterval
                                    394 ; ---------------------------------
      0000D9                        395 _GetRandomInInterval::
                                    396 ;src\/Random.h:53: do {
      0000D9                        397 00101$:
                                    398 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  399 	call	_GetRandom
      0000DC 7D               [ 4]  400 	ld	a, l
      0000DD 21 03 00         [10]  401 	ld	hl, #3
      0000E0 39               [11]  402 	add	hl, sp
      0000E1 A6               [ 7]  403 	and	a, (hl)
      0000E2 4F               [ 4]  404 	ld	c, a
                                    405 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  406 	ld	hl, #2
      0000E6 39               [11]  407 	add	hl, sp
      0000E7 7E               [ 7]  408 	ld	a, (hl)
      0000E8 91               [ 4]  409 	sub	a, c
      0000E9 38 EE            [12]  410 	jr	C, 00101$
                                    411 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  412 	ld	l, c
                                    413 ;src\/Random.h:59: }
      0000EC C9               [10]  414 	ret
                                    415 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    416 ;	---------------------------------
                                    417 ; Function DrawArrowSprite
                                    418 ; ---------------------------------
      0000ED                        419 _DrawArrowSprite::
      0000ED DD E5            [15]  420 	push	ix
      0000EF DD 21 00 00      [14]  421 	ld	ix,#0
      0000F3 DD 39            [15]  422 	add	ix,sp
      0000F5 21 F8 FF         [10]  423 	ld	hl, #-8
      0000F8 39               [11]  424 	add	hl, sp
      0000F9 F9               [ 6]  425 	ld	sp, hl
                                    426 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  427 	ld	hl, #0
      0000FD 39               [11]  428 	add	hl, sp
      0000FE EB               [ 4]  429 	ex	de, hl
      0000FF 3E 0F            [ 7]  430 	ld	a, #0x0f
      000101 12               [ 7]  431 	ld	(de), a
      000102 6B               [ 4]  432 	ld	l, e
      000103 62               [ 4]  433 	ld	h, d
      000104 23               [ 6]  434 	inc	hl
      000105 36 0E            [10]  435 	ld	(hl), #0x0e
      000107 6B               [ 4]  436 	ld	l, e
      000108 62               [ 4]  437 	ld	h, d
      000109 23               [ 6]  438 	inc	hl
      00010A 23               [ 6]  439 	inc	hl
      00010B 36 05            [10]  440 	ld	(hl), #0x05
      00010D 6B               [ 4]  441 	ld	l, e
      00010E 62               [ 4]  442 	ld	h, d
      00010F 23               [ 6]  443 	inc	hl
      000110 23               [ 6]  444 	inc	hl
      000111 23               [ 6]  445 	inc	hl
      000112 36 04            [10]  446 	ld	(hl), #0x04
      000114 21 04 00         [10]  447 	ld	hl, #0x0004
      000117 19               [11]  448 	add	hl, de
      000118 36 04            [10]  449 	ld	(hl), #0x04
      00011A 21 05 00         [10]  450 	ld	hl, #0x0005
      00011D 19               [11]  451 	add	hl, de
      00011E 36 05            [10]  452 	ld	(hl), #0x05
      000120 21 06 00         [10]  453 	ld	hl, #0x0006
      000123 19               [11]  454 	add	hl, de
      000124 36 0E            [10]  455 	ld	(hl), #0x0e
      000126 21 07 00         [10]  456 	ld	hl, #0x0007
      000129 19               [11]  457 	add	hl, de
      00012A 36 0F            [10]  458 	ld	(hl), #0x0f
                                    459 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  460 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  461 	ld	a, l
      000130 E6 0E            [ 7]  462 	and	a, #0x0e
      000132 6F               [ 4]  463 	ld	l, a
      000133 26 00            [ 7]  464 	ld	h, #0x00
      000135 CB 3C            [ 8]  465 	srl	h
      000137 CB 1D            [ 8]  466 	rr	l
                                    467 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  468 	ld	a, 5 (ix)
      00013C 3D               [ 4]  469 	dec	a
      00013D E5               [11]  470 	push	hl
      00013E D5               [11]  471 	push	de
      00013F F5               [11]  472 	push	af
      000140 33               [ 6]  473 	inc	sp
      000141 01 00 1B         [10]  474 	ld	bc, #0x1b00
      000144 C5               [11]  475 	push	bc
      000145 CDr00r00         [17]  476 	call	_WRTVRM
      000148 F1               [10]  477 	pop	af
      000149 33               [ 6]  478 	inc	sp
      00014A DD 7E 04         [19]  479 	ld	a, 4 (ix)
      00014D F5               [11]  480 	push	af
      00014E 33               [ 6]  481 	inc	sp
      00014F 01 01 1B         [10]  482 	ld	bc, #0x1b01
      000152 C5               [11]  483 	push	bc
      000153 CDr00r00         [17]  484 	call	_WRTVRM
      000156 F1               [10]  485 	pop	af
      000157 33               [ 6]  486 	inc	sp
      000158 AF               [ 4]  487 	xor	a, a
      000159 F5               [11]  488 	push	af
      00015A 33               [ 6]  489 	inc	sp
      00015B 01 02 1B         [10]  490 	ld	bc, #0x1b02
      00015E C5               [11]  491 	push	bc
      00015F CDr00r00         [17]  492 	call	_WRTVRM
      000162 F1               [10]  493 	pop	af
      000163 33               [ 6]  494 	inc	sp
      000164 D1               [10]  495 	pop	de
      000165 E1               [10]  496 	pop	hl
                                    497 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  498 	ld	h, #0x00
      000168 19               [11]  499 	add	hl, de
      000169 7E               [ 7]  500 	ld	a, (hl)
      00016A F5               [11]  501 	push	af
      00016B 33               [ 6]  502 	inc	sp
      00016C 21 03 1B         [10]  503 	ld	hl, #0x1b03
      00016F E5               [11]  504 	push	hl
      000170 CDr00r00         [17]  505 	call	_WRTVRM
                                    506 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  507 	ld	sp,ix
      000175 DD E1            [14]  508 	pop	ix
      000177 C9               [10]  509 	ret
      000178                        510 _FONT:
      000178 00                     511 	.db #0x00	; 0
      000179 00                     512 	.db #0x00	; 0
      00017A 00                     513 	.db #0x00	; 0
      00017B 00                     514 	.db #0x00	; 0
      00017C 00                     515 	.db #0x00	; 0
      00017D 00                     516 	.db #0x00	; 0
      00017E 00                     517 	.db #0x00	; 0
      00017F 00                     518 	.db #0x00	; 0
      000180 30                     519 	.db #0x30	; 48	'0'
      000181 78                     520 	.db #0x78	; 120	'x'
      000182 78                     521 	.db #0x78	; 120	'x'
      000183 30                     522 	.db #0x30	; 48	'0'
      000184 30                     523 	.db #0x30	; 48	'0'
      000185 00                     524 	.db #0x00	; 0
      000186 30                     525 	.db #0x30	; 48	'0'
      000187 00                     526 	.db #0x00	; 0
      000188 6C                     527 	.db #0x6c	; 108	'l'
      000189 6C                     528 	.db #0x6c	; 108	'l'
      00018A 6C                     529 	.db #0x6c	; 108	'l'
      00018B 00                     530 	.db #0x00	; 0
      00018C 00                     531 	.db #0x00	; 0
      00018D 00                     532 	.db #0x00	; 0
      00018E 00                     533 	.db #0x00	; 0
      00018F 00                     534 	.db #0x00	; 0
      000190 6C                     535 	.db #0x6c	; 108	'l'
      000191 6C                     536 	.db #0x6c	; 108	'l'
      000192 FE                     537 	.db #0xfe	; 254
      000193 6C                     538 	.db #0x6c	; 108	'l'
      000194 FE                     539 	.db #0xfe	; 254
      000195 6C                     540 	.db #0x6c	; 108	'l'
      000196 6C                     541 	.db #0x6c	; 108	'l'
      000197 00                     542 	.db #0x00	; 0
      000198 30                     543 	.db #0x30	; 48	'0'
      000199 7C                     544 	.db #0x7c	; 124
      00019A C0                     545 	.db #0xc0	; 192
      00019B 78                     546 	.db #0x78	; 120	'x'
      00019C 0C                     547 	.db #0x0c	; 12
      00019D F8                     548 	.db #0xf8	; 248
      00019E 30                     549 	.db #0x30	; 48	'0'
      00019F 00                     550 	.db #0x00	; 0
      0001A0 00                     551 	.db #0x00	; 0
      0001A1 C6                     552 	.db #0xc6	; 198
      0001A2 CC                     553 	.db #0xcc	; 204
      0001A3 18                     554 	.db #0x18	; 24
      0001A4 30                     555 	.db #0x30	; 48	'0'
      0001A5 66                     556 	.db #0x66	; 102	'f'
      0001A6 C6                     557 	.db #0xc6	; 198
      0001A7 00                     558 	.db #0x00	; 0
      0001A8 38                     559 	.db #0x38	; 56	'8'
      0001A9 6C                     560 	.db #0x6c	; 108	'l'
      0001AA 38                     561 	.db #0x38	; 56	'8'
      0001AB 76                     562 	.db #0x76	; 118	'v'
      0001AC DC                     563 	.db #0xdc	; 220
      0001AD CC                     564 	.db #0xcc	; 204
      0001AE 76                     565 	.db #0x76	; 118	'v'
      0001AF 00                     566 	.db #0x00	; 0
      0001B0 60                     567 	.db #0x60	; 96
      0001B1 60                     568 	.db #0x60	; 96
      0001B2 C0                     569 	.db #0xc0	; 192
      0001B3 00                     570 	.db #0x00	; 0
      0001B4 00                     571 	.db #0x00	; 0
      0001B5 00                     572 	.db #0x00	; 0
      0001B6 00                     573 	.db #0x00	; 0
      0001B7 00                     574 	.db #0x00	; 0
      0001B8 18                     575 	.db #0x18	; 24
      0001B9 30                     576 	.db #0x30	; 48	'0'
      0001BA 60                     577 	.db #0x60	; 96
      0001BB 60                     578 	.db #0x60	; 96
      0001BC 60                     579 	.db #0x60	; 96
      0001BD 30                     580 	.db #0x30	; 48	'0'
      0001BE 18                     581 	.db #0x18	; 24
      0001BF 00                     582 	.db #0x00	; 0
      0001C0 60                     583 	.db #0x60	; 96
      0001C1 30                     584 	.db #0x30	; 48	'0'
      0001C2 18                     585 	.db #0x18	; 24
      0001C3 18                     586 	.db #0x18	; 24
      0001C4 18                     587 	.db #0x18	; 24
      0001C5 30                     588 	.db #0x30	; 48	'0'
      0001C6 60                     589 	.db #0x60	; 96
      0001C7 00                     590 	.db #0x00	; 0
      0001C8 00                     591 	.db #0x00	; 0
      0001C9 66                     592 	.db #0x66	; 102	'f'
      0001CA 3C                     593 	.db #0x3c	; 60
      0001CB FF                     594 	.db #0xff	; 255
      0001CC 3C                     595 	.db #0x3c	; 60
      0001CD 66                     596 	.db #0x66	; 102	'f'
      0001CE 00                     597 	.db #0x00	; 0
      0001CF 00                     598 	.db #0x00	; 0
      0001D0 00                     599 	.db #0x00	; 0
      0001D1 30                     600 	.db #0x30	; 48	'0'
      0001D2 30                     601 	.db #0x30	; 48	'0'
      0001D3 FC                     602 	.db #0xfc	; 252
      0001D4 30                     603 	.db #0x30	; 48	'0'
      0001D5 30                     604 	.db #0x30	; 48	'0'
      0001D6 00                     605 	.db #0x00	; 0
      0001D7 00                     606 	.db #0x00	; 0
      0001D8 00                     607 	.db #0x00	; 0
      0001D9 00                     608 	.db #0x00	; 0
      0001DA 00                     609 	.db #0x00	; 0
      0001DB 00                     610 	.db #0x00	; 0
      0001DC 00                     611 	.db #0x00	; 0
      0001DD 30                     612 	.db #0x30	; 48	'0'
      0001DE 30                     613 	.db #0x30	; 48	'0'
      0001DF 60                     614 	.db #0x60	; 96
      0001E0 00                     615 	.db #0x00	; 0
      0001E1 00                     616 	.db #0x00	; 0
      0001E2 00                     617 	.db #0x00	; 0
      0001E3 FC                     618 	.db #0xfc	; 252
      0001E4 00                     619 	.db #0x00	; 0
      0001E5 00                     620 	.db #0x00	; 0
      0001E6 00                     621 	.db #0x00	; 0
      0001E7 00                     622 	.db #0x00	; 0
      0001E8 00                     623 	.db #0x00	; 0
      0001E9 00                     624 	.db #0x00	; 0
      0001EA 00                     625 	.db #0x00	; 0
      0001EB 00                     626 	.db #0x00	; 0
      0001EC 00                     627 	.db #0x00	; 0
      0001ED 30                     628 	.db #0x30	; 48	'0'
      0001EE 30                     629 	.db #0x30	; 48	'0'
      0001EF 00                     630 	.db #0x00	; 0
      0001F0 06                     631 	.db #0x06	; 6
      0001F1 0C                     632 	.db #0x0c	; 12
      0001F2 18                     633 	.db #0x18	; 24
      0001F3 30                     634 	.db #0x30	; 48	'0'
      0001F4 60                     635 	.db #0x60	; 96
      0001F5 C0                     636 	.db #0xc0	; 192
      0001F6 80                     637 	.db #0x80	; 128
      0001F7 00                     638 	.db #0x00	; 0
      0001F8 7C                     639 	.db #0x7c	; 124
      0001F9 C6                     640 	.db #0xc6	; 198
      0001FA CE                     641 	.db #0xce	; 206
      0001FB DE                     642 	.db #0xde	; 222
      0001FC F6                     643 	.db #0xf6	; 246
      0001FD E6                     644 	.db #0xe6	; 230
      0001FE 7C                     645 	.db #0x7c	; 124
      0001FF 00                     646 	.db #0x00	; 0
      000200 30                     647 	.db #0x30	; 48	'0'
      000201 70                     648 	.db #0x70	; 112	'p'
      000202 30                     649 	.db #0x30	; 48	'0'
      000203 30                     650 	.db #0x30	; 48	'0'
      000204 30                     651 	.db #0x30	; 48	'0'
      000205 30                     652 	.db #0x30	; 48	'0'
      000206 FC                     653 	.db #0xfc	; 252
      000207 00                     654 	.db #0x00	; 0
      000208 78                     655 	.db #0x78	; 120	'x'
      000209 CC                     656 	.db #0xcc	; 204
      00020A 0C                     657 	.db #0x0c	; 12
      00020B 38                     658 	.db #0x38	; 56	'8'
      00020C 60                     659 	.db #0x60	; 96
      00020D C4                     660 	.db #0xc4	; 196
      00020E FC                     661 	.db #0xfc	; 252
      00020F 00                     662 	.db #0x00	; 0
      000210 78                     663 	.db #0x78	; 120	'x'
      000211 CC                     664 	.db #0xcc	; 204
      000212 0C                     665 	.db #0x0c	; 12
      000213 38                     666 	.db #0x38	; 56	'8'
      000214 0C                     667 	.db #0x0c	; 12
      000215 CC                     668 	.db #0xcc	; 204
      000216 78                     669 	.db #0x78	; 120	'x'
      000217 00                     670 	.db #0x00	; 0
      000218 1C                     671 	.db #0x1c	; 28
      000219 3C                     672 	.db #0x3c	; 60
      00021A 6C                     673 	.db #0x6c	; 108	'l'
      00021B CC                     674 	.db #0xcc	; 204
      00021C FE                     675 	.db #0xfe	; 254
      00021D 0C                     676 	.db #0x0c	; 12
      00021E 1E                     677 	.db #0x1e	; 30
      00021F 00                     678 	.db #0x00	; 0
      000220 FC                     679 	.db #0xfc	; 252
      000221 C0                     680 	.db #0xc0	; 192
      000222 F8                     681 	.db #0xf8	; 248
      000223 0C                     682 	.db #0x0c	; 12
      000224 0C                     683 	.db #0x0c	; 12
      000225 CC                     684 	.db #0xcc	; 204
      000226 78                     685 	.db #0x78	; 120	'x'
      000227 00                     686 	.db #0x00	; 0
      000228 38                     687 	.db #0x38	; 56	'8'
      000229 60                     688 	.db #0x60	; 96
      00022A C0                     689 	.db #0xc0	; 192
      00022B F8                     690 	.db #0xf8	; 248
      00022C CC                     691 	.db #0xcc	; 204
      00022D CC                     692 	.db #0xcc	; 204
      00022E 78                     693 	.db #0x78	; 120	'x'
      00022F 00                     694 	.db #0x00	; 0
      000230 FC                     695 	.db #0xfc	; 252
      000231 CC                     696 	.db #0xcc	; 204
      000232 0C                     697 	.db #0x0c	; 12
      000233 18                     698 	.db #0x18	; 24
      000234 30                     699 	.db #0x30	; 48	'0'
      000235 30                     700 	.db #0x30	; 48	'0'
      000236 30                     701 	.db #0x30	; 48	'0'
      000237 00                     702 	.db #0x00	; 0
      000238 78                     703 	.db #0x78	; 120	'x'
      000239 CC                     704 	.db #0xcc	; 204
      00023A CC                     705 	.db #0xcc	; 204
      00023B 78                     706 	.db #0x78	; 120	'x'
      00023C CC                     707 	.db #0xcc	; 204
      00023D CC                     708 	.db #0xcc	; 204
      00023E 78                     709 	.db #0x78	; 120	'x'
      00023F 00                     710 	.db #0x00	; 0
      000240 78                     711 	.db #0x78	; 120	'x'
      000241 CC                     712 	.db #0xcc	; 204
      000242 CC                     713 	.db #0xcc	; 204
      000243 7C                     714 	.db #0x7c	; 124
      000244 0C                     715 	.db #0x0c	; 12
      000245 18                     716 	.db #0x18	; 24
      000246 70                     717 	.db #0x70	; 112	'p'
      000247 00                     718 	.db #0x00	; 0
      000248 00                     719 	.db #0x00	; 0
      000249 30                     720 	.db #0x30	; 48	'0'
      00024A 30                     721 	.db #0x30	; 48	'0'
      00024B 00                     722 	.db #0x00	; 0
      00024C 00                     723 	.db #0x00	; 0
      00024D 30                     724 	.db #0x30	; 48	'0'
      00024E 30                     725 	.db #0x30	; 48	'0'
      00024F 00                     726 	.db #0x00	; 0
      000250 00                     727 	.db #0x00	; 0
      000251 30                     728 	.db #0x30	; 48	'0'
      000252 30                     729 	.db #0x30	; 48	'0'
      000253 00                     730 	.db #0x00	; 0
      000254 30                     731 	.db #0x30	; 48	'0'
      000255 30                     732 	.db #0x30	; 48	'0'
      000256 60                     733 	.db #0x60	; 96
      000257 00                     734 	.db #0x00	; 0
      000258 18                     735 	.db #0x18	; 24
      000259 30                     736 	.db #0x30	; 48	'0'
      00025A 60                     737 	.db #0x60	; 96
      00025B C0                     738 	.db #0xc0	; 192
      00025C 60                     739 	.db #0x60	; 96
      00025D 30                     740 	.db #0x30	; 48	'0'
      00025E 18                     741 	.db #0x18	; 24
      00025F 00                     742 	.db #0x00	; 0
      000260 00                     743 	.db #0x00	; 0
      000261 00                     744 	.db #0x00	; 0
      000262 FC                     745 	.db #0xfc	; 252
      000263 00                     746 	.db #0x00	; 0
      000264 00                     747 	.db #0x00	; 0
      000265 FC                     748 	.db #0xfc	; 252
      000266 00                     749 	.db #0x00	; 0
      000267 00                     750 	.db #0x00	; 0
      000268 60                     751 	.db #0x60	; 96
      000269 30                     752 	.db #0x30	; 48	'0'
      00026A 18                     753 	.db #0x18	; 24
      00026B 0C                     754 	.db #0x0c	; 12
      00026C 18                     755 	.db #0x18	; 24
      00026D 30                     756 	.db #0x30	; 48	'0'
      00026E 60                     757 	.db #0x60	; 96
      00026F 00                     758 	.db #0x00	; 0
      000270 78                     759 	.db #0x78	; 120	'x'
      000271 CC                     760 	.db #0xcc	; 204
      000272 0C                     761 	.db #0x0c	; 12
      000273 18                     762 	.db #0x18	; 24
      000274 30                     763 	.db #0x30	; 48	'0'
      000275 00                     764 	.db #0x00	; 0
      000276 30                     765 	.db #0x30	; 48	'0'
      000277 00                     766 	.db #0x00	; 0
      000278 7C                     767 	.db #0x7c	; 124
      000279 C6                     768 	.db #0xc6	; 198
      00027A DE                     769 	.db #0xde	; 222
      00027B DE                     770 	.db #0xde	; 222
      00027C DE                     771 	.db #0xde	; 222
      00027D C0                     772 	.db #0xc0	; 192
      00027E 78                     773 	.db #0x78	; 120	'x'
      00027F 00                     774 	.db #0x00	; 0
      000280 30                     775 	.db #0x30	; 48	'0'
      000281 78                     776 	.db #0x78	; 120	'x'
      000282 CC                     777 	.db #0xcc	; 204
      000283 CC                     778 	.db #0xcc	; 204
      000284 FC                     779 	.db #0xfc	; 252
      000285 CC                     780 	.db #0xcc	; 204
      000286 CC                     781 	.db #0xcc	; 204
      000287 00                     782 	.db #0x00	; 0
      000288 FC                     783 	.db #0xfc	; 252
      000289 66                     784 	.db #0x66	; 102	'f'
      00028A 66                     785 	.db #0x66	; 102	'f'
      00028B 7C                     786 	.db #0x7c	; 124
      00028C 66                     787 	.db #0x66	; 102	'f'
      00028D 66                     788 	.db #0x66	; 102	'f'
      00028E FC                     789 	.db #0xfc	; 252
      00028F 00                     790 	.db #0x00	; 0
      000290 3C                     791 	.db #0x3c	; 60
      000291 66                     792 	.db #0x66	; 102	'f'
      000292 C0                     793 	.db #0xc0	; 192
      000293 C0                     794 	.db #0xc0	; 192
      000294 C0                     795 	.db #0xc0	; 192
      000295 66                     796 	.db #0x66	; 102	'f'
      000296 3C                     797 	.db #0x3c	; 60
      000297 00                     798 	.db #0x00	; 0
      000298 F8                     799 	.db #0xf8	; 248
      000299 6C                     800 	.db #0x6c	; 108	'l'
      00029A 66                     801 	.db #0x66	; 102	'f'
      00029B 66                     802 	.db #0x66	; 102	'f'
      00029C 66                     803 	.db #0x66	; 102	'f'
      00029D 6C                     804 	.db #0x6c	; 108	'l'
      00029E F8                     805 	.db #0xf8	; 248
      00029F 00                     806 	.db #0x00	; 0
      0002A0 FE                     807 	.db #0xfe	; 254
      0002A1 62                     808 	.db #0x62	; 98	'b'
      0002A2 68                     809 	.db #0x68	; 104	'h'
      0002A3 78                     810 	.db #0x78	; 120	'x'
      0002A4 68                     811 	.db #0x68	; 104	'h'
      0002A5 62                     812 	.db #0x62	; 98	'b'
      0002A6 FE                     813 	.db #0xfe	; 254
      0002A7 00                     814 	.db #0x00	; 0
      0002A8 FE                     815 	.db #0xfe	; 254
      0002A9 62                     816 	.db #0x62	; 98	'b'
      0002AA 68                     817 	.db #0x68	; 104	'h'
      0002AB 78                     818 	.db #0x78	; 120	'x'
      0002AC 68                     819 	.db #0x68	; 104	'h'
      0002AD 60                     820 	.db #0x60	; 96
      0002AE F0                     821 	.db #0xf0	; 240
      0002AF 00                     822 	.db #0x00	; 0
      0002B0 3C                     823 	.db #0x3c	; 60
      0002B1 66                     824 	.db #0x66	; 102	'f'
      0002B2 C0                     825 	.db #0xc0	; 192
      0002B3 C0                     826 	.db #0xc0	; 192
      0002B4 CE                     827 	.db #0xce	; 206
      0002B5 66                     828 	.db #0x66	; 102	'f'
      0002B6 3E                     829 	.db #0x3e	; 62
      0002B7 00                     830 	.db #0x00	; 0
      0002B8 CC                     831 	.db #0xcc	; 204
      0002B9 CC                     832 	.db #0xcc	; 204
      0002BA CC                     833 	.db #0xcc	; 204
      0002BB FC                     834 	.db #0xfc	; 252
      0002BC CC                     835 	.db #0xcc	; 204
      0002BD CC                     836 	.db #0xcc	; 204
      0002BE CC                     837 	.db #0xcc	; 204
      0002BF 00                     838 	.db #0x00	; 0
      0002C0 78                     839 	.db #0x78	; 120	'x'
      0002C1 30                     840 	.db #0x30	; 48	'0'
      0002C2 30                     841 	.db #0x30	; 48	'0'
      0002C3 30                     842 	.db #0x30	; 48	'0'
      0002C4 30                     843 	.db #0x30	; 48	'0'
      0002C5 30                     844 	.db #0x30	; 48	'0'
      0002C6 78                     845 	.db #0x78	; 120	'x'
      0002C7 00                     846 	.db #0x00	; 0
      0002C8 1E                     847 	.db #0x1e	; 30
      0002C9 0C                     848 	.db #0x0c	; 12
      0002CA 0C                     849 	.db #0x0c	; 12
      0002CB 0C                     850 	.db #0x0c	; 12
      0002CC CC                     851 	.db #0xcc	; 204
      0002CD CC                     852 	.db #0xcc	; 204
      0002CE 78                     853 	.db #0x78	; 120	'x'
      0002CF 00                     854 	.db #0x00	; 0
      0002D0 E6                     855 	.db #0xe6	; 230
      0002D1 66                     856 	.db #0x66	; 102	'f'
      0002D2 6C                     857 	.db #0x6c	; 108	'l'
      0002D3 78                     858 	.db #0x78	; 120	'x'
      0002D4 6C                     859 	.db #0x6c	; 108	'l'
      0002D5 66                     860 	.db #0x66	; 102	'f'
      0002D6 E6                     861 	.db #0xe6	; 230
      0002D7 00                     862 	.db #0x00	; 0
      0002D8 F0                     863 	.db #0xf0	; 240
      0002D9 60                     864 	.db #0x60	; 96
      0002DA 60                     865 	.db #0x60	; 96
      0002DB 60                     866 	.db #0x60	; 96
      0002DC 62                     867 	.db #0x62	; 98	'b'
      0002DD 66                     868 	.db #0x66	; 102	'f'
      0002DE FE                     869 	.db #0xfe	; 254
      0002DF 00                     870 	.db #0x00	; 0
      0002E0 C6                     871 	.db #0xc6	; 198
      0002E1 EE                     872 	.db #0xee	; 238
      0002E2 FE                     873 	.db #0xfe	; 254
      0002E3 FE                     874 	.db #0xfe	; 254
      0002E4 D6                     875 	.db #0xd6	; 214
      0002E5 C6                     876 	.db #0xc6	; 198
      0002E6 C6                     877 	.db #0xc6	; 198
      0002E7 00                     878 	.db #0x00	; 0
      0002E8 C6                     879 	.db #0xc6	; 198
      0002E9 E6                     880 	.db #0xe6	; 230
      0002EA F6                     881 	.db #0xf6	; 246
      0002EB DE                     882 	.db #0xde	; 222
      0002EC CE                     883 	.db #0xce	; 206
      0002ED C6                     884 	.db #0xc6	; 198
      0002EE C6                     885 	.db #0xc6	; 198
      0002EF 00                     886 	.db #0x00	; 0
      0002F0 38                     887 	.db #0x38	; 56	'8'
      0002F1 6C                     888 	.db #0x6c	; 108	'l'
      0002F2 C6                     889 	.db #0xc6	; 198
      0002F3 C6                     890 	.db #0xc6	; 198
      0002F4 C6                     891 	.db #0xc6	; 198
      0002F5 6C                     892 	.db #0x6c	; 108	'l'
      0002F6 38                     893 	.db #0x38	; 56	'8'
      0002F7 00                     894 	.db #0x00	; 0
      0002F8 FC                     895 	.db #0xfc	; 252
      0002F9 66                     896 	.db #0x66	; 102	'f'
      0002FA 66                     897 	.db #0x66	; 102	'f'
      0002FB 7C                     898 	.db #0x7c	; 124
      0002FC 60                     899 	.db #0x60	; 96
      0002FD 60                     900 	.db #0x60	; 96
      0002FE F0                     901 	.db #0xf0	; 240
      0002FF 00                     902 	.db #0x00	; 0
      000300 78                     903 	.db #0x78	; 120	'x'
      000301 CC                     904 	.db #0xcc	; 204
      000302 CC                     905 	.db #0xcc	; 204
      000303 CC                     906 	.db #0xcc	; 204
      000304 DC                     907 	.db #0xdc	; 220
      000305 78                     908 	.db #0x78	; 120	'x'
      000306 1C                     909 	.db #0x1c	; 28
      000307 00                     910 	.db #0x00	; 0
      000308 FC                     911 	.db #0xfc	; 252
      000309 66                     912 	.db #0x66	; 102	'f'
      00030A 66                     913 	.db #0x66	; 102	'f'
      00030B 7C                     914 	.db #0x7c	; 124
      00030C 6C                     915 	.db #0x6c	; 108	'l'
      00030D 66                     916 	.db #0x66	; 102	'f'
      00030E E6                     917 	.db #0xe6	; 230
      00030F 00                     918 	.db #0x00	; 0
      000310 78                     919 	.db #0x78	; 120	'x'
      000311 CC                     920 	.db #0xcc	; 204
      000312 E0                     921 	.db #0xe0	; 224
      000313 70                     922 	.db #0x70	; 112	'p'
      000314 1C                     923 	.db #0x1c	; 28
      000315 CC                     924 	.db #0xcc	; 204
      000316 78                     925 	.db #0x78	; 120	'x'
      000317 00                     926 	.db #0x00	; 0
      000318 FC                     927 	.db #0xfc	; 252
      000319 B4                     928 	.db #0xb4	; 180
      00031A 30                     929 	.db #0x30	; 48	'0'
      00031B 30                     930 	.db #0x30	; 48	'0'
      00031C 30                     931 	.db #0x30	; 48	'0'
      00031D 30                     932 	.db #0x30	; 48	'0'
      00031E 78                     933 	.db #0x78	; 120	'x'
      00031F 00                     934 	.db #0x00	; 0
      000320 CC                     935 	.db #0xcc	; 204
      000321 CC                     936 	.db #0xcc	; 204
      000322 CC                     937 	.db #0xcc	; 204
      000323 CC                     938 	.db #0xcc	; 204
      000324 CC                     939 	.db #0xcc	; 204
      000325 CC                     940 	.db #0xcc	; 204
      000326 FC                     941 	.db #0xfc	; 252
      000327 00                     942 	.db #0x00	; 0
      000328 CC                     943 	.db #0xcc	; 204
      000329 CC                     944 	.db #0xcc	; 204
      00032A CC                     945 	.db #0xcc	; 204
      00032B CC                     946 	.db #0xcc	; 204
      00032C CC                     947 	.db #0xcc	; 204
      00032D 78                     948 	.db #0x78	; 120	'x'
      00032E 30                     949 	.db #0x30	; 48	'0'
      00032F 00                     950 	.db #0x00	; 0
      000330 C6                     951 	.db #0xc6	; 198
      000331 C6                     952 	.db #0xc6	; 198
      000332 C6                     953 	.db #0xc6	; 198
      000333 D6                     954 	.db #0xd6	; 214
      000334 FE                     955 	.db #0xfe	; 254
      000335 EE                     956 	.db #0xee	; 238
      000336 C6                     957 	.db #0xc6	; 198
      000337 00                     958 	.db #0x00	; 0
      000338 C6                     959 	.db #0xc6	; 198
      000339 C6                     960 	.db #0xc6	; 198
      00033A 6C                     961 	.db #0x6c	; 108	'l'
      00033B 38                     962 	.db #0x38	; 56	'8'
      00033C 38                     963 	.db #0x38	; 56	'8'
      00033D 6C                     964 	.db #0x6c	; 108	'l'
      00033E C6                     965 	.db #0xc6	; 198
      00033F 00                     966 	.db #0x00	; 0
      000340 CC                     967 	.db #0xcc	; 204
      000341 CC                     968 	.db #0xcc	; 204
      000342 CC                     969 	.db #0xcc	; 204
      000343 78                     970 	.db #0x78	; 120	'x'
      000344 30                     971 	.db #0x30	; 48	'0'
      000345 30                     972 	.db #0x30	; 48	'0'
      000346 78                     973 	.db #0x78	; 120	'x'
      000347 00                     974 	.db #0x00	; 0
      000348 FE                     975 	.db #0xfe	; 254
      000349 C6                     976 	.db #0xc6	; 198
      00034A 8C                     977 	.db #0x8c	; 140
      00034B 18                     978 	.db #0x18	; 24
      00034C 32                     979 	.db #0x32	; 50	'2'
      00034D 66                     980 	.db #0x66	; 102	'f'
      00034E FE                     981 	.db #0xfe	; 254
      00034F 00                     982 	.db #0x00	; 0
      000350 78                     983 	.db #0x78	; 120	'x'
      000351 60                     984 	.db #0x60	; 96
      000352 60                     985 	.db #0x60	; 96
      000353 60                     986 	.db #0x60	; 96
      000354 60                     987 	.db #0x60	; 96
      000355 60                     988 	.db #0x60	; 96
      000356 78                     989 	.db #0x78	; 120	'x'
      000357 00                     990 	.db #0x00	; 0
      000358 C0                     991 	.db #0xc0	; 192
      000359 60                     992 	.db #0x60	; 96
      00035A 30                     993 	.db #0x30	; 48	'0'
      00035B 18                     994 	.db #0x18	; 24
      00035C 0C                     995 	.db #0x0c	; 12
      00035D 06                     996 	.db #0x06	; 6
      00035E 02                     997 	.db #0x02	; 2
      00035F 00                     998 	.db #0x00	; 0
      000360 78                     999 	.db #0x78	; 120	'x'
      000361 18                    1000 	.db #0x18	; 24
      000362 18                    1001 	.db #0x18	; 24
      000363 18                    1002 	.db #0x18	; 24
      000364 18                    1003 	.db #0x18	; 24
      000365 18                    1004 	.db #0x18	; 24
      000366 78                    1005 	.db #0x78	; 120	'x'
      000367 00                    1006 	.db #0x00	; 0
      000368 10                    1007 	.db #0x10	; 16
      000369 38                    1008 	.db #0x38	; 56	'8'
      00036A 6C                    1009 	.db #0x6c	; 108	'l'
      00036B C6                    1010 	.db #0xc6	; 198
      00036C 00                    1011 	.db #0x00	; 0
      00036D 00                    1012 	.db #0x00	; 0
      00036E 00                    1013 	.db #0x00	; 0
      00036F 00                    1014 	.db #0x00	; 0
      000370 00                    1015 	.db #0x00	; 0
      000371 00                    1016 	.db #0x00	; 0
      000372 00                    1017 	.db #0x00	; 0
      000373 00                    1018 	.db #0x00	; 0
      000374 00                    1019 	.db #0x00	; 0
      000375 00                    1020 	.db #0x00	; 0
      000376 00                    1021 	.db #0x00	; 0
      000377 FF                    1022 	.db #0xff	; 255
      000378 30                    1023 	.db #0x30	; 48	'0'
      000379 30                    1024 	.db #0x30	; 48	'0'
      00037A 18                    1025 	.db #0x18	; 24
      00037B 00                    1026 	.db #0x00	; 0
      00037C 00                    1027 	.db #0x00	; 0
      00037D 00                    1028 	.db #0x00	; 0
      00037E 00                    1029 	.db #0x00	; 0
      00037F 00                    1030 	.db #0x00	; 0
      000380 00                    1031 	.db #0x00	; 0
      000381 00                    1032 	.db #0x00	; 0
      000382 78                    1033 	.db #0x78	; 120	'x'
      000383 0C                    1034 	.db #0x0c	; 12
      000384 7C                    1035 	.db #0x7c	; 124
      000385 CC                    1036 	.db #0xcc	; 204
      000386 76                    1037 	.db #0x76	; 118	'v'
      000387 00                    1038 	.db #0x00	; 0
      000388 E0                    1039 	.db #0xe0	; 224
      000389 60                    1040 	.db #0x60	; 96
      00038A 60                    1041 	.db #0x60	; 96
      00038B 7C                    1042 	.db #0x7c	; 124
      00038C 66                    1043 	.db #0x66	; 102	'f'
      00038D 66                    1044 	.db #0x66	; 102	'f'
      00038E DC                    1045 	.db #0xdc	; 220
      00038F 00                    1046 	.db #0x00	; 0
      000390 00                    1047 	.db #0x00	; 0
      000391 00                    1048 	.db #0x00	; 0
      000392 78                    1049 	.db #0x78	; 120	'x'
      000393 CC                    1050 	.db #0xcc	; 204
      000394 C0                    1051 	.db #0xc0	; 192
      000395 CC                    1052 	.db #0xcc	; 204
      000396 78                    1053 	.db #0x78	; 120	'x'
      000397 00                    1054 	.db #0x00	; 0
      000398 1C                    1055 	.db #0x1c	; 28
      000399 0C                    1056 	.db #0x0c	; 12
      00039A 0C                    1057 	.db #0x0c	; 12
      00039B 7C                    1058 	.db #0x7c	; 124
      00039C CC                    1059 	.db #0xcc	; 204
      00039D CC                    1060 	.db #0xcc	; 204
      00039E 76                    1061 	.db #0x76	; 118	'v'
      00039F 00                    1062 	.db #0x00	; 0
      0003A0 00                    1063 	.db #0x00	; 0
      0003A1 00                    1064 	.db #0x00	; 0
      0003A2 78                    1065 	.db #0x78	; 120	'x'
      0003A3 CC                    1066 	.db #0xcc	; 204
      0003A4 FC                    1067 	.db #0xfc	; 252
      0003A5 C0                    1068 	.db #0xc0	; 192
      0003A6 78                    1069 	.db #0x78	; 120	'x'
      0003A7 00                    1070 	.db #0x00	; 0
      0003A8 38                    1071 	.db #0x38	; 56	'8'
      0003A9 6C                    1072 	.db #0x6c	; 108	'l'
      0003AA 60                    1073 	.db #0x60	; 96
      0003AB F0                    1074 	.db #0xf0	; 240
      0003AC 60                    1075 	.db #0x60	; 96
      0003AD 60                    1076 	.db #0x60	; 96
      0003AE F0                    1077 	.db #0xf0	; 240
      0003AF 00                    1078 	.db #0x00	; 0
      0003B0 00                    1079 	.db #0x00	; 0
      0003B1 00                    1080 	.db #0x00	; 0
      0003B2 76                    1081 	.db #0x76	; 118	'v'
      0003B3 CC                    1082 	.db #0xcc	; 204
      0003B4 CC                    1083 	.db #0xcc	; 204
      0003B5 7C                    1084 	.db #0x7c	; 124
      0003B6 0C                    1085 	.db #0x0c	; 12
      0003B7 F8                    1086 	.db #0xf8	; 248
      0003B8 E0                    1087 	.db #0xe0	; 224
      0003B9 60                    1088 	.db #0x60	; 96
      0003BA 6C                    1089 	.db #0x6c	; 108	'l'
      0003BB 76                    1090 	.db #0x76	; 118	'v'
      0003BC 66                    1091 	.db #0x66	; 102	'f'
      0003BD 66                    1092 	.db #0x66	; 102	'f'
      0003BE E6                    1093 	.db #0xe6	; 230
      0003BF 00                    1094 	.db #0x00	; 0
      0003C0 30                    1095 	.db #0x30	; 48	'0'
      0003C1 00                    1096 	.db #0x00	; 0
      0003C2 70                    1097 	.db #0x70	; 112	'p'
      0003C3 30                    1098 	.db #0x30	; 48	'0'
      0003C4 30                    1099 	.db #0x30	; 48	'0'
      0003C5 30                    1100 	.db #0x30	; 48	'0'
      0003C6 78                    1101 	.db #0x78	; 120	'x'
      0003C7 00                    1102 	.db #0x00	; 0
      0003C8 0C                    1103 	.db #0x0c	; 12
      0003C9 00                    1104 	.db #0x00	; 0
      0003CA 0C                    1105 	.db #0x0c	; 12
      0003CB 0C                    1106 	.db #0x0c	; 12
      0003CC 0C                    1107 	.db #0x0c	; 12
      0003CD CC                    1108 	.db #0xcc	; 204
      0003CE CC                    1109 	.db #0xcc	; 204
      0003CF 78                    1110 	.db #0x78	; 120	'x'
      0003D0 E0                    1111 	.db #0xe0	; 224
      0003D1 60                    1112 	.db #0x60	; 96
      0003D2 66                    1113 	.db #0x66	; 102	'f'
      0003D3 6C                    1114 	.db #0x6c	; 108	'l'
      0003D4 78                    1115 	.db #0x78	; 120	'x'
      0003D5 6C                    1116 	.db #0x6c	; 108	'l'
      0003D6 E6                    1117 	.db #0xe6	; 230
      0003D7 00                    1118 	.db #0x00	; 0
      0003D8 70                    1119 	.db #0x70	; 112	'p'
      0003D9 30                    1120 	.db #0x30	; 48	'0'
      0003DA 30                    1121 	.db #0x30	; 48	'0'
      0003DB 30                    1122 	.db #0x30	; 48	'0'
      0003DC 30                    1123 	.db #0x30	; 48	'0'
      0003DD 30                    1124 	.db #0x30	; 48	'0'
      0003DE 78                    1125 	.db #0x78	; 120	'x'
      0003DF 00                    1126 	.db #0x00	; 0
      0003E0 00                    1127 	.db #0x00	; 0
      0003E1 00                    1128 	.db #0x00	; 0
      0003E2 CC                    1129 	.db #0xcc	; 204
      0003E3 FE                    1130 	.db #0xfe	; 254
      0003E4 FE                    1131 	.db #0xfe	; 254
      0003E5 D6                    1132 	.db #0xd6	; 214
      0003E6 C6                    1133 	.db #0xc6	; 198
      0003E7 00                    1134 	.db #0x00	; 0
      0003E8 00                    1135 	.db #0x00	; 0
      0003E9 00                    1136 	.db #0x00	; 0
      0003EA F8                    1137 	.db #0xf8	; 248
      0003EB CC                    1138 	.db #0xcc	; 204
      0003EC CC                    1139 	.db #0xcc	; 204
      0003ED CC                    1140 	.db #0xcc	; 204
      0003EE CC                    1141 	.db #0xcc	; 204
      0003EF 00                    1142 	.db #0x00	; 0
      0003F0 00                    1143 	.db #0x00	; 0
      0003F1 00                    1144 	.db #0x00	; 0
      0003F2 78                    1145 	.db #0x78	; 120	'x'
      0003F3 CC                    1146 	.db #0xcc	; 204
      0003F4 CC                    1147 	.db #0xcc	; 204
      0003F5 CC                    1148 	.db #0xcc	; 204
      0003F6 78                    1149 	.db #0x78	; 120	'x'
      0003F7 00                    1150 	.db #0x00	; 0
      0003F8 00                    1151 	.db #0x00	; 0
      0003F9 00                    1152 	.db #0x00	; 0
      0003FA DC                    1153 	.db #0xdc	; 220
      0003FB 66                    1154 	.db #0x66	; 102	'f'
      0003FC 66                    1155 	.db #0x66	; 102	'f'
      0003FD 7C                    1156 	.db #0x7c	; 124
      0003FE 60                    1157 	.db #0x60	; 96
      0003FF F0                    1158 	.db #0xf0	; 240
      000400 00                    1159 	.db #0x00	; 0
      000401 00                    1160 	.db #0x00	; 0
      000402 76                    1161 	.db #0x76	; 118	'v'
      000403 CC                    1162 	.db #0xcc	; 204
      000404 CC                    1163 	.db #0xcc	; 204
      000405 7C                    1164 	.db #0x7c	; 124
      000406 0C                    1165 	.db #0x0c	; 12
      000407 1E                    1166 	.db #0x1e	; 30
      000408 00                    1167 	.db #0x00	; 0
      000409 00                    1168 	.db #0x00	; 0
      00040A DC                    1169 	.db #0xdc	; 220
      00040B 76                    1170 	.db #0x76	; 118	'v'
      00040C 66                    1171 	.db #0x66	; 102	'f'
      00040D 60                    1172 	.db #0x60	; 96
      00040E F0                    1173 	.db #0xf0	; 240
      00040F 00                    1174 	.db #0x00	; 0
      000410 00                    1175 	.db #0x00	; 0
      000411 00                    1176 	.db #0x00	; 0
      000412 7C                    1177 	.db #0x7c	; 124
      000413 C0                    1178 	.db #0xc0	; 192
      000414 78                    1179 	.db #0x78	; 120	'x'
      000415 0C                    1180 	.db #0x0c	; 12
      000416 F8                    1181 	.db #0xf8	; 248
      000417 00                    1182 	.db #0x00	; 0
      000418 10                    1183 	.db #0x10	; 16
      000419 30                    1184 	.db #0x30	; 48	'0'
      00041A 7C                    1185 	.db #0x7c	; 124
      00041B 30                    1186 	.db #0x30	; 48	'0'
      00041C 30                    1187 	.db #0x30	; 48	'0'
      00041D 34                    1188 	.db #0x34	; 52	'4'
      00041E 18                    1189 	.db #0x18	; 24
      00041F 00                    1190 	.db #0x00	; 0
      000420 00                    1191 	.db #0x00	; 0
      000421 00                    1192 	.db #0x00	; 0
      000422 CC                    1193 	.db #0xcc	; 204
      000423 CC                    1194 	.db #0xcc	; 204
      000424 CC                    1195 	.db #0xcc	; 204
      000425 CC                    1196 	.db #0xcc	; 204
      000426 76                    1197 	.db #0x76	; 118	'v'
      000427 00                    1198 	.db #0x00	; 0
      000428 00                    1199 	.db #0x00	; 0
      000429 00                    1200 	.db #0x00	; 0
      00042A CC                    1201 	.db #0xcc	; 204
      00042B CC                    1202 	.db #0xcc	; 204
      00042C CC                    1203 	.db #0xcc	; 204
      00042D 78                    1204 	.db #0x78	; 120	'x'
      00042E 30                    1205 	.db #0x30	; 48	'0'
      00042F 00                    1206 	.db #0x00	; 0
      000430 00                    1207 	.db #0x00	; 0
      000431 00                    1208 	.db #0x00	; 0
      000432 C6                    1209 	.db #0xc6	; 198
      000433 D6                    1210 	.db #0xd6	; 214
      000434 FE                    1211 	.db #0xfe	; 254
      000435 FE                    1212 	.db #0xfe	; 254
      000436 6C                    1213 	.db #0x6c	; 108	'l'
      000437 00                    1214 	.db #0x00	; 0
      000438 00                    1215 	.db #0x00	; 0
      000439 00                    1216 	.db #0x00	; 0
      00043A C6                    1217 	.db #0xc6	; 198
      00043B 6C                    1218 	.db #0x6c	; 108	'l'
      00043C 38                    1219 	.db #0x38	; 56	'8'
      00043D 6C                    1220 	.db #0x6c	; 108	'l'
      00043E C6                    1221 	.db #0xc6	; 198
      00043F 00                    1222 	.db #0x00	; 0
      000440 00                    1223 	.db #0x00	; 0
      000441 00                    1224 	.db #0x00	; 0
      000442 CC                    1225 	.db #0xcc	; 204
      000443 CC                    1226 	.db #0xcc	; 204
      000444 CC                    1227 	.db #0xcc	; 204
      000445 7C                    1228 	.db #0x7c	; 124
      000446 0C                    1229 	.db #0x0c	; 12
      000447 F8                    1230 	.db #0xf8	; 248
      000448 00                    1231 	.db #0x00	; 0
      000449 00                    1232 	.db #0x00	; 0
      00044A FC                    1233 	.db #0xfc	; 252
      00044B 98                    1234 	.db #0x98	; 152
      00044C 30                    1235 	.db #0x30	; 48	'0'
      00044D 64                    1236 	.db #0x64	; 100	'd'
      00044E FC                    1237 	.db #0xfc	; 252
      00044F 00                    1238 	.db #0x00	; 0
      000450 1C                    1239 	.db #0x1c	; 28
      000451 30                    1240 	.db #0x30	; 48	'0'
      000452 30                    1241 	.db #0x30	; 48	'0'
      000453 E0                    1242 	.db #0xe0	; 224
      000454 30                    1243 	.db #0x30	; 48	'0'
      000455 30                    1244 	.db #0x30	; 48	'0'
      000456 1C                    1245 	.db #0x1c	; 28
      000457 00                    1246 	.db #0x00	; 0
      000458 18                    1247 	.db #0x18	; 24
      000459 18                    1248 	.db #0x18	; 24
      00045A 18                    1249 	.db #0x18	; 24
      00045B 00                    1250 	.db #0x00	; 0
      00045C 18                    1251 	.db #0x18	; 24
      00045D 18                    1252 	.db #0x18	; 24
      00045E 18                    1253 	.db #0x18	; 24
      00045F 00                    1254 	.db #0x00	; 0
      000460 E0                    1255 	.db #0xe0	; 224
      000461 30                    1256 	.db #0x30	; 48	'0'
      000462 30                    1257 	.db #0x30	; 48	'0'
      000463 1C                    1258 	.db #0x1c	; 28
      000464 30                    1259 	.db #0x30	; 48	'0'
      000465 30                    1260 	.db #0x30	; 48	'0'
      000466 E0                    1261 	.db #0xe0	; 224
      000467 00                    1262 	.db #0x00	; 0
      000468 76                    1263 	.db #0x76	; 118	'v'
      000469 DC                    1264 	.db #0xdc	; 220
      00046A 00                    1265 	.db #0x00	; 0
      00046B 00                    1266 	.db #0x00	; 0
      00046C 00                    1267 	.db #0x00	; 0
      00046D 00                    1268 	.db #0x00	; 0
      00046E 00                    1269 	.db #0x00	; 0
      00046F 00                    1270 	.db #0x00	; 0
      000470 00                    1271 	.db #0x00	; 0
      000471 10                    1272 	.db #0x10	; 16
      000472 38                    1273 	.db #0x38	; 56	'8'
      000473 6C                    1274 	.db #0x6c	; 108	'l'
      000474 C6                    1275 	.db #0xc6	; 198
      000475 C6                    1276 	.db #0xc6	; 198
      000476 FE                    1277 	.db #0xfe	; 254
      000477 00                    1278 	.db #0x00	; 0
      000478                       1279 _pattern_black_0:
      000478 FF                    1280 	.db #0xff	; 255
      000479 FF                    1281 	.db #0xff	; 255
      00047A FF                    1282 	.db #0xff	; 255
      00047B FF                    1283 	.db #0xff	; 255
      00047C FF                    1284 	.db #0xff	; 255
      00047D FF                    1285 	.db #0xff	; 255
      00047E FF                    1286 	.db #0xff	; 255
      00047F FF                    1287 	.db #0xff	; 255
      000480                       1288 _pattern_black_1:
      000480 FE                    1289 	.db #0xfe	; 254
      000481 FF                    1290 	.db #0xff	; 255
      000482 FF                    1291 	.db #0xff	; 255
      000483 FF                    1292 	.db #0xff	; 255
      000484 FE                    1293 	.db #0xfe	; 254
      000485 FF                    1294 	.db #0xff	; 255
      000486 FF                    1295 	.db #0xff	; 255
      000487 FE                    1296 	.db #0xfe	; 254
      000488                       1297 _pattern_black_2:
      000488 FF                    1298 	.db #0xff	; 255
      000489 FF                    1299 	.db #0xff	; 255
      00048A FF                    1300 	.db #0xff	; 255
      00048B FF                    1301 	.db #0xff	; 255
      00048C FF                    1302 	.db #0xff	; 255
      00048D FB                    1303 	.db #0xfb	; 251
      00048E FF                    1304 	.db #0xff	; 255
      00048F BB                    1305 	.db #0xbb	; 187
      000490                       1306 _pattern_black_3:
      000490 FB                    1307 	.db #0xfb	; 251
      000491 FE                    1308 	.db #0xfe	; 254
      000492 FD                    1309 	.db #0xfd	; 253
      000493 FE                    1310 	.db #0xfe	; 254
      000494 F7                    1311 	.db #0xf7	; 247
      000495 FA                    1312 	.db #0xfa	; 250
      000496 AF                    1313 	.db #0xaf	; 175
      000497 55                    1314 	.db #0x55	; 85	'U'
      000498                       1315 _pattern_0:
      000498 9F                    1316 	.db #0x9f	; 159
      000499 90                    1317 	.db #0x90	; 144
      00049A 90                    1318 	.db #0x90	; 144
      00049B 93                    1319 	.db #0x93	; 147
      00049C 92                    1320 	.db #0x92	; 146
      00049D 92                    1321 	.db #0x92	; 146
      00049E 92                    1322 	.db #0x92	; 146
      00049F 92                    1323 	.db #0x92	; 146
      0004A0                       1324 _pattern_1:
      0004A0 FF                    1325 	.db #0xff	; 255
      0004A1 01                    1326 	.db #0x01	; 1
      0004A2 01                    1327 	.db #0x01	; 1
      0004A3 F9                    1328 	.db #0xf9	; 249
      0004A4 09                    1329 	.db #0x09	; 9
      0004A5 09                    1330 	.db #0x09	; 9
      0004A6 49                    1331 	.db #0x49	; 73	'I'
      0004A7 49                    1332 	.db #0x49	; 73	'I'
      0004A8                       1333 _pattern_2:
      0004A8 92                    1334 	.db #0x92	; 146
      0004A9 93                    1335 	.db #0x93	; 147
      0004AA 90                    1336 	.db #0x90	; 144
      0004AB 90                    1337 	.db #0x90	; 144
      0004AC 9F                    1338 	.db #0x9f	; 159
      0004AD 80                    1339 	.db #0x80	; 128
      0004AE 80                    1340 	.db #0x80	; 128
      0004AF FF                    1341 	.db #0xff	; 255
      0004B0                       1342 _pattern_3:
      0004B0 49                    1343 	.db #0x49	; 73	'I'
      0004B1 C9                    1344 	.db #0xc9	; 201
      0004B2 09                    1345 	.db #0x09	; 9
      0004B3 09                    1346 	.db #0x09	; 9
      0004B4 F9                    1347 	.db #0xf9	; 249
      0004B5 01                    1348 	.db #0x01	; 1
      0004B6 01                    1349 	.db #0x01	; 1
      0004B7 FF                    1350 	.db #0xff	; 255
      0004B8                       1351 _pattern_4:
      0004B8 7F                    1352 	.db #0x7f	; 127
      0004B9 81                    1353 	.db #0x81	; 129
      0004BA 83                    1354 	.db #0x83	; 131
      0004BB 87                    1355 	.db #0x87	; 135
      0004BC 8F                    1356 	.db #0x8f	; 143
      0004BD 9F                    1357 	.db #0x9f	; 159
      0004BE BF                    1358 	.db #0xbf	; 191
      0004BF FF                    1359 	.db #0xff	; 255
      0004C0                       1360 _pattern_5:
      0004C0 FE                    1361 	.db #0xfe	; 254
      0004C1 81                    1362 	.db #0x81	; 129
      0004C2 C1                    1363 	.db #0xc1	; 193
      0004C3 E1                    1364 	.db #0xe1	; 225
      0004C4 F1                    1365 	.db #0xf1	; 241
      0004C5 F9                    1366 	.db #0xf9	; 249
      0004C6 FD                    1367 	.db #0xfd	; 253
      0004C7 FF                    1368 	.db #0xff	; 255
      0004C8                       1369 _pattern_6:
      0004C8 FF                    1370 	.db #0xff	; 255
      0004C9 BF                    1371 	.db #0xbf	; 191
      0004CA 9F                    1372 	.db #0x9f	; 159
      0004CB 8F                    1373 	.db #0x8f	; 143
      0004CC 87                    1374 	.db #0x87	; 135
      0004CD 83                    1375 	.db #0x83	; 131
      0004CE 81                    1376 	.db #0x81	; 129
      0004CF 7F                    1377 	.db #0x7f	; 127
      0004D0                       1378 _pattern_7:
      0004D0 FF                    1379 	.db #0xff	; 255
      0004D1 FD                    1380 	.db #0xfd	; 253
      0004D2 F9                    1381 	.db #0xf9	; 249
      0004D3 F1                    1382 	.db #0xf1	; 241
      0004D4 E1                    1383 	.db #0xe1	; 225
      0004D5 C1                    1384 	.db #0xc1	; 193
      0004D6 81                    1385 	.db #0x81	; 129
      0004D7 FE                    1386 	.db #0xfe	; 254
      0004D8                       1387 _pattern_8:
      0004D8 7F                    1388 	.db #0x7f	; 127
      0004D9 AE                    1389 	.db #0xae	; 174
      0004DA FF                    1390 	.db #0xff	; 255
      0004DB 5B                    1391 	.db #0x5b	; 91
      0004DC FF                    1392 	.db #0xff	; 255
      0004DD AE                    1393 	.db #0xae	; 174
      0004DE FF                    1394 	.db #0xff	; 255
      0004DF DF                    1395 	.db #0xdf	; 223
      0004E0                       1396 _pattern_9:
      0004E0 FE                    1397 	.db #0xfe	; 254
      0004E1 BD                    1398 	.db #0xbd	; 189
      0004E2 DF                    1399 	.db #0xdf	; 223
      0004E3 7F                    1400 	.db #0x7f	; 127
      0004E4 FB                    1401 	.db #0xfb	; 251
      0004E5 DF                    1402 	.db #0xdf	; 223
      0004E6 FE                    1403 	.db #0xfe	; 254
      0004E7 EF                    1404 	.db #0xef	; 239
      0004E8                       1405 _pattern_10:
      0004E8 7F                    1406 	.db #0x7f	; 127
      0004E9 FF                    1407 	.db #0xff	; 255
      0004EA ED                    1408 	.db #0xed	; 237
      0004EB FF                    1409 	.db #0xff	; 255
      0004EC B6                    1410 	.db #0xb6	; 182
      0004ED FE                    1411 	.db #0xfe	; 254
      0004EE DB                    1412 	.db #0xdb	; 219
      0004EF 7D                    1413 	.db #0x7d	; 125
      0004F0                       1414 _pattern_11:
      0004F0 FE                    1415 	.db #0xfe	; 254
      0004F1 FF                    1416 	.db #0xff	; 255
      0004F2 FE                    1417 	.db #0xfe	; 254
      0004F3 77                    1418 	.db #0x77	; 119	'w'
      0004F4 FE                    1419 	.db #0xfe	; 254
      0004F5 DD                    1420 	.db #0xdd	; 221
      0004F6 EF                    1421 	.db #0xef	; 239
      0004F7 5A                    1422 	.db #0x5a	; 90	'Z'
      0004F8                       1423 _pattern_12:
      0004F8 7F                    1424 	.db #0x7f	; 127
      0004F9 D5                    1425 	.db #0xd5	; 213
      0004FA BF                    1426 	.db #0xbf	; 191
      0004FB ED                    1427 	.db #0xed	; 237
      0004FC BF                    1428 	.db #0xbf	; 191
      0004FD F5                    1429 	.db #0xf5	; 245
      0004FE BF                    1430 	.db #0xbf	; 191
      0004FF FF                    1431 	.db #0xff	; 255
      000500                       1432 _pattern_13:
      000500 FE                    1433 	.db #0xfe	; 254
      000501 5F                    1434 	.db #0x5f	; 95
      000502 F5                    1435 	.db #0xf5	; 245
      000503 DF                    1436 	.db #0xdf	; 223
      000504 FF                    1437 	.db #0xff	; 255
      000505 FF                    1438 	.db #0xff	; 255
      000506 FF                    1439 	.db #0xff	; 255
      000507 FF                    1440 	.db #0xff	; 255
      000508                       1441 _pattern_14:
      000508 EF                    1442 	.db #0xef	; 239
      000509 BF                    1443 	.db #0xbf	; 191
      00050A 7F                    1444 	.db #0x7f	; 127
      00050B FF                    1445 	.db #0xff	; 255
      00050C FF                    1446 	.db #0xff	; 255
      00050D FF                    1447 	.db #0xff	; 255
      00050E DB                    1448 	.db #0xdb	; 219
      00050F 7F                    1449 	.db #0x7f	; 127
      000510                       1450 _pattern_15:
      000510 FF                    1451 	.db #0xff	; 255
      000511 FD                    1452 	.db #0xfd	; 253
      000512 FF                    1453 	.db #0xff	; 255
      000513 DB                    1454 	.db #0xdb	; 219
      000514 FD                    1455 	.db #0xfd	; 253
      000515 7B                    1456 	.db #0x7b	; 123
      000516 D7                    1457 	.db #0xd7	; 215
      000517 FE                    1458 	.db #0xfe	; 254
      000518                       1459 _pattern_16:
      000518 7F                    1460 	.db #0x7f	; 127
      000519 FF                    1461 	.db #0xff	; 255
      00051A EA                    1462 	.db #0xea	; 234
      00051B DF                    1463 	.db #0xdf	; 223
      00051C FF                    1464 	.db #0xff	; 255
      00051D DF                    1465 	.db #0xdf	; 223
      00051E FF                    1466 	.db #0xff	; 255
      00051F DF                    1467 	.db #0xdf	; 223
      000520                       1468 _pattern_17:
      000520 FE                    1469 	.db #0xfe	; 254
      000521 FF                    1470 	.db #0xff	; 255
      000522 AF                    1471 	.db #0xaf	; 175
      000523 FA                    1472 	.db #0xfa	; 250
      000524 FF                    1473 	.db #0xff	; 255
      000525 FA                    1474 	.db #0xfa	; 250
      000526 FF                    1475 	.db #0xff	; 255
      000527 FA                    1476 	.db #0xfa	; 250
      000528                       1477 _pattern_18:
      000528 FF                    1478 	.db #0xff	; 255
      000529 DF                    1479 	.db #0xdf	; 223
      00052A FF                    1480 	.db #0xff	; 255
      00052B DF                    1481 	.db #0xdf	; 223
      00052C FF                    1482 	.db #0xff	; 255
      00052D EA                    1483 	.db #0xea	; 234
      00052E FF                    1484 	.db #0xff	; 255
      00052F 55                    1485 	.db #0x55	; 85	'U'
      000530                       1486 _pattern_19:
      000530 FF                    1487 	.db #0xff	; 255
      000531 FA                    1488 	.db #0xfa	; 250
      000532 FF                    1489 	.db #0xff	; 255
      000533 FA                    1490 	.db #0xfa	; 250
      000534 F7                    1491 	.db #0xf7	; 247
      000535 AA                    1492 	.db #0xaa	; 170
      000536 FF                    1493 	.db #0xff	; 255
      000537 56                    1494 	.db #0x56	; 86	'V'
      000538                       1495 _pattern_20:
      000538 3F                    1496 	.db #0x3f	; 63
      000539 7F                    1497 	.db #0x7f	; 127
      00053A E0                    1498 	.db #0xe0	; 224
      00053B CE                    1499 	.db #0xce	; 206
      00053C E6                    1500 	.db #0xe6	; 230
      00053D 7C                    1501 	.db #0x7c	; 124
      00053E 39                    1502 	.db #0x39	; 57	'9'
      00053F 03                    1503 	.db #0x03	; 3
      000540                       1504 _pattern_21:
      000540 FF                    1505 	.db #0xff	; 255
      000541 FF                    1506 	.db #0xff	; 255
      000542 00                    1507 	.db #0x00	; 0
      000543 DB                    1508 	.db #0xdb	; 219
      000544 DB                    1509 	.db #0xdb	; 219
      000545 00                    1510 	.db #0x00	; 0
      000546 FF                    1511 	.db #0xff	; 255
      000547 FF                    1512 	.db #0xff	; 255
      000548                       1513 _pattern_22:
      000548 FC                    1514 	.db #0xfc	; 252
      000549 FE                    1515 	.db #0xfe	; 254
      00054A 07                    1516 	.db #0x07	; 7
      00054B 73                    1517 	.db #0x73	; 115	's'
      00054C 67                    1518 	.db #0x67	; 103	'g'
      00054D 3E                    1519 	.db #0x3e	; 62
      00054E 9C                    1520 	.db #0x9c	; 156
      00054F C0                    1521 	.db #0xc0	; 192
      000550                       1522 _pattern_23:
      000550 06                    1523 	.db #0x06	; 6
      000551 00                    1524 	.db #0x00	; 0
      000552 03                    1525 	.db #0x03	; 3
      000553 04                    1526 	.db #0x04	; 4
      000554 05                    1527 	.db #0x05	; 5
      000555 05                    1528 	.db #0x05	; 5
      000556 05                    1529 	.db #0x05	; 5
      000557 05                    1530 	.db #0x05	; 5
      000558                       1531 _pattern_24:
      000558 00                    1532 	.db #0x00	; 0
      000559 00                    1533 	.db #0x00	; 0
      00055A 33                    1534 	.db #0x33	; 51	'3'
      00055B 44                    1535 	.db #0x44	; 68	'D'
      00055C 55                    1536 	.db #0x55	; 85	'U'
      00055D 55                    1537 	.db #0x55	; 85	'U'
      00055E 55                    1538 	.db #0x55	; 85	'U'
      00055F 55                    1539 	.db #0x55	; 85	'U'
      000560                       1540 _pattern_25:
      000560 60                    1541 	.db #0x60	; 96
      000561 00                    1542 	.db #0x00	; 0
      000562 40                    1543 	.db #0x40	; 64
      000563 20                    1544 	.db #0x20	; 32
      000564 20                    1545 	.db #0x20	; 32
      000565 20                    1546 	.db #0x20	; 32
      000566 20                    1547 	.db #0x20	; 32
      000567 20                    1548 	.db #0x20	; 32
      000568                       1549 _pattern_26:
      000568 05                    1550 	.db #0x05	; 5
      000569 05                    1551 	.db #0x05	; 5
      00056A 05                    1552 	.db #0x05	; 5
      00056B 05                    1553 	.db #0x05	; 5
      00056C 05                    1554 	.db #0x05	; 5
      00056D 05                    1555 	.db #0x05	; 5
      00056E 05                    1556 	.db #0x05	; 5
      00056F 05                    1557 	.db #0x05	; 5
      000570                       1558 _pattern_27:
      000570 55                    1559 	.db #0x55	; 85	'U'
      000571 55                    1560 	.db #0x55	; 85	'U'
      000572 55                    1561 	.db #0x55	; 85	'U'
      000573 55                    1562 	.db #0x55	; 85	'U'
      000574 55                    1563 	.db #0x55	; 85	'U'
      000575 55                    1564 	.db #0x55	; 85	'U'
      000576 55                    1565 	.db #0x55	; 85	'U'
      000577 55                    1566 	.db #0x55	; 85	'U'
      000578                       1567 _pattern_28:
      000578 20                    1568 	.db #0x20	; 32
      000579 20                    1569 	.db #0x20	; 32
      00057A 20                    1570 	.db #0x20	; 32
      00057B 20                    1571 	.db #0x20	; 32
      00057C 20                    1572 	.db #0x20	; 32
      00057D 20                    1573 	.db #0x20	; 32
      00057E 20                    1574 	.db #0x20	; 32
      00057F 20                    1575 	.db #0x20	; 32
      000580                       1576 _pattern_29:
      000580 05                    1577 	.db #0x05	; 5
      000581 05                    1578 	.db #0x05	; 5
      000582 07                    1579 	.db #0x07	; 7
      000583 07                    1580 	.db #0x07	; 7
      000584 07                    1581 	.db #0x07	; 7
      000585 05                    1582 	.db #0x05	; 5
      000586 05                    1583 	.db #0x05	; 5
      000587 05                    1584 	.db #0x05	; 5
      000588                       1585 _pattern_30:
      000588 55                    1586 	.db #0x55	; 85	'U'
      000589 55                    1587 	.db #0x55	; 85	'U'
      00058A FF                    1588 	.db #0xff	; 255
      00058B FF                    1589 	.db #0xff	; 255
      00058C FF                    1590 	.db #0xff	; 255
      00058D 55                    1591 	.db #0x55	; 85	'U'
      00058E 55                    1592 	.db #0x55	; 85	'U'
      00058F 55                    1593 	.db #0x55	; 85	'U'
      000590                       1594 _pattern_31:
      000590 20                    1595 	.db #0x20	; 32
      000591 20                    1596 	.db #0x20	; 32
      000592 E0                    1597 	.db #0xe0	; 224
      000593 E0                    1598 	.db #0xe0	; 224
      000594 E0                    1599 	.db #0xe0	; 224
      000595 20                    1600 	.db #0x20	; 32
      000596 20                    1601 	.db #0x20	; 32
      000597 20                    1602 	.db #0x20	; 32
      000598                       1603 _pattern_37:
      000598 05                    1604 	.db #0x05	; 5
      000599 05                    1605 	.db #0x05	; 5
      00059A 05                    1606 	.db #0x05	; 5
      00059B 05                    1607 	.db #0x05	; 5
      00059C 04                    1608 	.db #0x04	; 4
      00059D 03                    1609 	.db #0x03	; 3
      00059E 00                    1610 	.db #0x00	; 0
      00059F 06                    1611 	.db #0x06	; 6
      0005A0                       1612 _pattern_38:
      0005A0 55                    1613 	.db #0x55	; 85	'U'
      0005A1 55                    1614 	.db #0x55	; 85	'U'
      0005A2 55                    1615 	.db #0x55	; 85	'U'
      0005A3 55                    1616 	.db #0x55	; 85	'U'
      0005A4 44                    1617 	.db #0x44	; 68	'D'
      0005A5 33                    1618 	.db #0x33	; 51	'3'
      0005A6 00                    1619 	.db #0x00	; 0
      0005A7 00                    1620 	.db #0x00	; 0
      0005A8                       1621 _pattern_39:
      0005A8 20                    1622 	.db #0x20	; 32
      0005A9 20                    1623 	.db #0x20	; 32
      0005AA 20                    1624 	.db #0x20	; 32
      0005AB 20                    1625 	.db #0x20	; 32
      0005AC 20                    1626 	.db #0x20	; 32
      0005AD 40                    1627 	.db #0x40	; 64
      0005AE 00                    1628 	.db #0x00	; 0
      0005AF 60                    1629 	.db #0x60	; 96
      0005B0                       1630 _pattern_32:
      0005B0 03                    1631 	.db #0x03	; 3
      0005B1 39                    1632 	.db #0x39	; 57	'9'
      0005B2 7C                    1633 	.db #0x7c	; 124
      0005B3 E6                    1634 	.db #0xe6	; 230
      0005B4 CE                    1635 	.db #0xce	; 206
      0005B5 E0                    1636 	.db #0xe0	; 224
      0005B6 7F                    1637 	.db #0x7f	; 127
      0005B7 3F                    1638 	.db #0x3f	; 63
      0005B8                       1639 _pattern_33:
      0005B8 FF                    1640 	.db #0xff	; 255
      0005B9 FF                    1641 	.db #0xff	; 255
      0005BA 00                    1642 	.db #0x00	; 0
      0005BB DB                    1643 	.db #0xdb	; 219
      0005BC DB                    1644 	.db #0xdb	; 219
      0005BD 00                    1645 	.db #0x00	; 0
      0005BE FF                    1646 	.db #0xff	; 255
      0005BF FF                    1647 	.db #0xff	; 255
      0005C0                       1648 _pattern_34:
      0005C0 C0                    1649 	.db #0xc0	; 192
      0005C1 9C                    1650 	.db #0x9c	; 156
      0005C2 3E                    1651 	.db #0x3e	; 62
      0005C3 67                    1652 	.db #0x67	; 103	'g'
      0005C4 73                    1653 	.db #0x73	; 115	's'
      0005C5 07                    1654 	.db #0x07	; 7
      0005C6 FE                    1655 	.db #0xfe	; 254
      0005C7 FC                    1656 	.db #0xfc	; 252
      0005C8                       1657 _sprite_dust_0:
      0005C8 10                    1658 	.db #0x10	; 16
      0005C9 42                    1659 	.db #0x42	; 66	'B'
      0005CA 10                    1660 	.db #0x10	; 16
      0005CB 45                    1661 	.db #0x45	; 69	'E'
      0005CC 20                    1662 	.db #0x20	; 32
      0005CD 89                    1663 	.db #0x89	; 137
      0005CE 20                    1664 	.db #0x20	; 32
      0005CF 88                    1665 	.db #0x88	; 136
      0005D0                       1666 _sprite_dust_1:
      0005D0 10                    1667 	.db #0x10	; 16
      0005D1 42                    1668 	.db #0x42	; 66	'B'
      0005D2 00                    1669 	.db #0x00	; 0
      0005D3 04                    1670 	.db #0x04	; 4
      0005D4 20                    1671 	.db #0x20	; 32
      0005D5 81                    1672 	.db #0x81	; 129
      0005D6 20                    1673 	.db #0x20	; 32
      0005D7 08                    1674 	.db #0x08	; 8
      0005D8                       1675 _sprite_dust_2:
      0005D8 10                    1676 	.db #0x10	; 16
      0005D9 00                    1677 	.db #0x00	; 0
      0005DA 00                    1678 	.db #0x00	; 0
      0005DB 04                    1679 	.db #0x04	; 4
      0005DC 20                    1680 	.db #0x20	; 32
      0005DD 80                    1681 	.db #0x80	; 128
      0005DE 20                    1682 	.db #0x20	; 32
      0005DF 00                    1683 	.db #0x00	; 0
      0005E0                       1684 _sprite_dust_3:
      0005E0 10                    1685 	.db #0x10	; 16
      0005E1 00                    1686 	.db #0x00	; 0
      0005E2 00                    1687 	.db #0x00	; 0
      0005E3 04                    1688 	.db #0x04	; 4
      0005E4 00                    1689 	.db #0x00	; 0
      0005E5 00                    1690 	.db #0x00	; 0
      0005E6 20                    1691 	.db #0x20	; 32
      0005E7 00                    1692 	.db #0x00	; 0
      0005E8                       1693 _pattern_title:
      0005E8 FE                    1694 	.db #0xfe	; 254
      0005E9 FE                    1695 	.db #0xfe	; 254
      0005EA FE                    1696 	.db #0xfe	; 254
      0005EB FE                    1697 	.db #0xfe	; 254
      0005EC FE                    1698 	.db #0xfe	; 254
      0005ED FE                    1699 	.db #0xfe	; 254
      0005EE FE                    1700 	.db #0xfe	; 254
      0005EF 00                    1701 	.db #0x00	; 0
      0005F0                       1702 _color_black_0:
      0005F0 14                    1703 	.db #0x14	; 20
      0005F1 14                    1704 	.db #0x14	; 20
      0005F2 14                    1705 	.db #0x14	; 20
      0005F3 14                    1706 	.db #0x14	; 20
      0005F4 14                    1707 	.db #0x14	; 20
      0005F5 14                    1708 	.db #0x14	; 20
      0005F6 14                    1709 	.db #0x14	; 20
      0005F7 14                    1710 	.db #0x14	; 20
      0005F8                       1711 _color_black_1:
      0005F8 14                    1712 	.db #0x14	; 20
      0005F9 14                    1713 	.db #0x14	; 20
      0005FA 14                    1714 	.db #0x14	; 20
      0005FB 14                    1715 	.db #0x14	; 20
      0005FC 14                    1716 	.db #0x14	; 20
      0005FD 14                    1717 	.db #0x14	; 20
      0005FE 14                    1718 	.db #0x14	; 20
      0005FF 14                    1719 	.db #0x14	; 20
      000600                       1720 _color_black_2:
      000600 14                    1721 	.db #0x14	; 20
      000601 14                    1722 	.db #0x14	; 20
      000602 14                    1723 	.db #0x14	; 20
      000603 14                    1724 	.db #0x14	; 20
      000604 14                    1725 	.db #0x14	; 20
      000605 14                    1726 	.db #0x14	; 20
      000606 14                    1727 	.db #0x14	; 20
      000607 14                    1728 	.db #0x14	; 20
      000608                       1729 _color_black_3:
      000608 14                    1730 	.db #0x14	; 20
      000609 14                    1731 	.db #0x14	; 20
      00060A 14                    1732 	.db #0x14	; 20
      00060B 14                    1733 	.db #0x14	; 20
      00060C 14                    1734 	.db #0x14	; 20
      00060D 14                    1735 	.db #0x14	; 20
      00060E 14                    1736 	.db #0x14	; 20
      00060F 14                    1737 	.db #0x14	; 20
      000610                       1738 _color_0:
      000610 13                    1739 	.db #0x13	; 19
      000611 13                    1740 	.db #0x13	; 19
      000612 13                    1741 	.db #0x13	; 19
      000613 13                    1742 	.db #0x13	; 19
      000614 13                    1743 	.db #0x13	; 19
      000615 13                    1744 	.db #0x13	; 19
      000616 13                    1745 	.db #0x13	; 19
      000617 13                    1746 	.db #0x13	; 19
      000618                       1747 _color_1:
      000618 12                    1748 	.db #0x12	; 18
      000619 12                    1749 	.db #0x12	; 18
      00061A 12                    1750 	.db #0x12	; 18
      00061B 12                    1751 	.db #0x12	; 18
      00061C 12                    1752 	.db #0x12	; 18
      00061D 12                    1753 	.db #0x12	; 18
      00061E 12                    1754 	.db #0x12	; 18
      00061F 12                    1755 	.db #0x12	; 18
      000620                       1756 _color_2:
      000620 12                    1757 	.db #0x12	; 18
      000621 12                    1758 	.db #0x12	; 18
      000622 12                    1759 	.db #0x12	; 18
      000623 12                    1760 	.db #0x12	; 18
      000624 12                    1761 	.db #0x12	; 18
      000625 12                    1762 	.db #0x12	; 18
      000626 12                    1763 	.db #0x12	; 18
      000627 12                    1764 	.db #0x12	; 18
      000628                       1765 _color_3:
      000628 1C                    1766 	.db #0x1c	; 28
      000629 1C                    1767 	.db #0x1c	; 28
      00062A 1C                    1768 	.db #0x1c	; 28
      00062B 1C                    1769 	.db #0x1c	; 28
      00062C 1C                    1770 	.db #0x1c	; 28
      00062D 1C                    1771 	.db #0x1c	; 28
      00062E 1C                    1772 	.db #0x1c	; 28
      00062F 1C                    1773 	.db #0x1c	; 28
      000630                       1774 _color_4:
      000630 96                    1775 	.db #0x96	; 150
      000631 96                    1776 	.db #0x96	; 150
      000632 96                    1777 	.db #0x96	; 150
      000633 96                    1778 	.db #0x96	; 150
      000634 96                    1779 	.db #0x96	; 150
      000635 96                    1780 	.db #0x96	; 150
      000636 96                    1781 	.db #0x96	; 150
      000637 96                    1782 	.db #0x96	; 150
      000638                       1783 _color_5:
      000638 98                    1784 	.db #0x98	; 152
      000639 68                    1785 	.db #0x68	; 104	'h'
      00063A 68                    1786 	.db #0x68	; 104	'h'
      00063B 68                    1787 	.db #0x68	; 104	'h'
      00063C 68                    1788 	.db #0x68	; 104	'h'
      00063D 68                    1789 	.db #0x68	; 104	'h'
      00063E 68                    1790 	.db #0x68	; 104	'h'
      00063F 68                    1791 	.db #0x68	; 104	'h'
      000640                       1792 _color_6:
      000640 68                    1793 	.db #0x68	; 104	'h'
      000641 68                    1794 	.db #0x68	; 104	'h'
      000642 68                    1795 	.db #0x68	; 104	'h'
      000643 68                    1796 	.db #0x68	; 104	'h'
      000644 68                    1797 	.db #0x68	; 104	'h'
      000645 68                    1798 	.db #0x68	; 104	'h'
      000646 68                    1799 	.db #0x68	; 104	'h'
      000647 68                    1800 	.db #0x68	; 104	'h'
      000648                       1801 _color_7:
      000648 89                    1802 	.db #0x89	; 137
      000649 89                    1803 	.db #0x89	; 137
      00064A 89                    1804 	.db #0x89	; 137
      00064B 89                    1805 	.db #0x89	; 137
      00064C 89                    1806 	.db #0x89	; 137
      00064D 89                    1807 	.db #0x89	; 137
      00064E 89                    1808 	.db #0x89	; 137
      00064F 86                    1809 	.db #0x86	; 134
      000650                       1810 _color_8:
      000650 41                    1811 	.db #0x41	; 65	'A'
      000651 47                    1812 	.db #0x47	; 71	'G'
      000652 47                    1813 	.db #0x47	; 71	'G'
      000653 47                    1814 	.db #0x47	; 71	'G'
      000654 47                    1815 	.db #0x47	; 71	'G'
      000655 47                    1816 	.db #0x47	; 71	'G'
      000656 47                    1817 	.db #0x47	; 71	'G'
      000657 47                    1818 	.db #0x47	; 71	'G'
      000658                       1819 _color_9:
      000658 41                    1820 	.db #0x41	; 65	'A'
      000659 45                    1821 	.db #0x45	; 69	'E'
      00065A 47                    1822 	.db #0x47	; 71	'G'
      00065B 47                    1823 	.db #0x47	; 71	'G'
      00065C 45                    1824 	.db #0x45	; 69	'E'
      00065D 45                    1825 	.db #0x45	; 69	'E'
      00065E 41                    1826 	.db #0x41	; 65	'A'
      00065F 45                    1827 	.db #0x45	; 69	'E'
      000660                       1828 _color_10:
      000660 47                    1829 	.db #0x47	; 71	'G'
      000661 45                    1830 	.db #0x45	; 69	'E'
      000662 45                    1831 	.db #0x45	; 69	'E'
      000663 45                    1832 	.db #0x45	; 69	'E'
      000664 45                    1833 	.db #0x45	; 69	'E'
      000665 41                    1834 	.db #0x41	; 65	'A'
      000666 45                    1835 	.db #0x45	; 69	'E'
      000667 41                    1836 	.db #0x41	; 65	'A'
      000668                       1837 _color_11:
      000668 41                    1838 	.db #0x41	; 65	'A'
      000669 41                    1839 	.db #0x41	; 65	'A'
      00066A 41                    1840 	.db #0x41	; 65	'A'
      00066B 41                    1841 	.db #0x41	; 65	'A'
      00066C 41                    1842 	.db #0x41	; 65	'A'
      00066D 41                    1843 	.db #0x41	; 65	'A'
      00066E 41                    1844 	.db #0x41	; 65	'A'
      00066F 41                    1845 	.db #0x41	; 65	'A'
      000670                       1846 _color_12:
      000670 D1                    1847 	.db #0xd1	; 209
      000671 DF                    1848 	.db #0xdf	; 223
      000672 DF                    1849 	.db #0xdf	; 223
      000673 DF                    1850 	.db #0xdf	; 223
      000674 DF                    1851 	.db #0xdf	; 223
      000675 DF                    1852 	.db #0xdf	; 223
      000676 DF                    1853 	.db #0xdf	; 223
      000677 DF                    1854 	.db #0xdf	; 223
      000678                       1855 _color_13:
      000678 D1                    1856 	.db #0xd1	; 209
      000679 DF                    1857 	.db #0xdf	; 223
      00067A DF                    1858 	.db #0xdf	; 223
      00067B DF                    1859 	.db #0xdf	; 223
      00067C DF                    1860 	.db #0xdf	; 223
      00067D DF                    1861 	.db #0xdf	; 223
      00067E DF                    1862 	.db #0xdf	; 223
      00067F DF                    1863 	.db #0xdf	; 223
      000680                       1864 _color_14:
      000680 DF                    1865 	.db #0xdf	; 223
      000681 DF                    1866 	.db #0xdf	; 223
      000682 DF                    1867 	.db #0xdf	; 223
      000683 D1                    1868 	.db #0xd1	; 209
      000684 D1                    1869 	.db #0xd1	; 209
      000685 D1                    1870 	.db #0xd1	; 209
      000686 D1                    1871 	.db #0xd1	; 209
      000687 D1                    1872 	.db #0xd1	; 209
      000688                       1873 _color_15:
      000688 D1                    1874 	.db #0xd1	; 209
      000689 D1                    1875 	.db #0xd1	; 209
      00068A D1                    1876 	.db #0xd1	; 209
      00068B D1                    1877 	.db #0xd1	; 209
      00068C D1                    1878 	.db #0xd1	; 209
      00068D D1                    1879 	.db #0xd1	; 209
      00068E D1                    1880 	.db #0xd1	; 209
      00068F D1                    1881 	.db #0xd1	; 209
      000690                       1882 _color_16:
      000690 A1                    1883 	.db #0xa1	; 161
      000691 BF                    1884 	.db #0xbf	; 191
      000692 BF                    1885 	.db #0xbf	; 191
      000693 BF                    1886 	.db #0xbf	; 191
      000694 BF                    1887 	.db #0xbf	; 191
      000695 BF                    1888 	.db #0xbf	; 191
      000696 BF                    1889 	.db #0xbf	; 191
      000697 BF                    1890 	.db #0xbf	; 191
      000698                       1891 _color_17:
      000698 A1                    1892 	.db #0xa1	; 161
      000699 AF                    1893 	.db #0xaf	; 175
      00069A AF                    1894 	.db #0xaf	; 175
      00069B A1                    1895 	.db #0xa1	; 161
      00069C A1                    1896 	.db #0xa1	; 161
      00069D A1                    1897 	.db #0xa1	; 161
      00069E A1                    1898 	.db #0xa1	; 161
      00069F A1                    1899 	.db #0xa1	; 161
      0006A0                       1900 _color_18:
      0006A0 AF                    1901 	.db #0xaf	; 175
      0006A1 AF                    1902 	.db #0xaf	; 175
      0006A2 AF                    1903 	.db #0xaf	; 175
      0006A3 AF                    1904 	.db #0xaf	; 175
      0006A4 A1                    1905 	.db #0xa1	; 161
      0006A5 A1                    1906 	.db #0xa1	; 161
      0006A6 A1                    1907 	.db #0xa1	; 161
      0006A7 A1                    1908 	.db #0xa1	; 161
      0006A8                       1909 _color_19:
      0006A8 B1                    1910 	.db #0xb1	; 177
      0006A9 B1                    1911 	.db #0xb1	; 177
      0006AA B1                    1912 	.db #0xb1	; 177
      0006AB B1                    1913 	.db #0xb1	; 177
      0006AC B1                    1914 	.db #0xb1	; 177
      0006AD B1                    1915 	.db #0xb1	; 177
      0006AE B1                    1916 	.db #0xb1	; 177
      0006AF B1                    1917 	.db #0xb1	; 177
      0006B0                       1918 _color_column_1:
      0006B0 F1                    1919 	.db #0xf1	; 241
      0006B1 E1                    1920 	.db #0xe1	; 225
      0006B2 E1                    1921 	.db #0xe1	; 225
      0006B3 E1                    1922 	.db #0xe1	; 225
      0006B4 E1                    1923 	.db #0xe1	; 225
      0006B5 E1                    1924 	.db #0xe1	; 225
      0006B6 E1                    1925 	.db #0xe1	; 225
      0006B7 E1                    1926 	.db #0xe1	; 225
      0006B8                       1927 _color_column_2:
      0006B8 F1                    1928 	.db #0xf1	; 241
      0006B9 E1                    1929 	.db #0xe1	; 225
      0006BA E1                    1930 	.db #0xe1	; 225
      0006BB E1                    1931 	.db #0xe1	; 225
      0006BC E1                    1932 	.db #0xe1	; 225
      0006BD E1                    1933 	.db #0xe1	; 225
      0006BE E1                    1934 	.db #0xe1	; 225
      0006BF E1                    1935 	.db #0xe1	; 225
      0006C0                       1936 _color_column_3:
      0006C0 F1                    1937 	.db #0xf1	; 241
      0006C1 E1                    1938 	.db #0xe1	; 225
      0006C2 E1                    1939 	.db #0xe1	; 225
      0006C3 E1                    1940 	.db #0xe1	; 225
      0006C4 E1                    1941 	.db #0xe1	; 225
      0006C5 E1                    1942 	.db #0xe1	; 225
      0006C6 E1                    1943 	.db #0xe1	; 225
      0006C7 E1                    1944 	.db #0xe1	; 225
      0006C8                       1945 _color_column_4:
      0006C8 F1                    1946 	.db #0xf1	; 241
      0006C9 F1                    1947 	.db #0xf1	; 241
      0006CA F1                    1948 	.db #0xf1	; 241
      0006CB F1                    1949 	.db #0xf1	; 241
      0006CC F1                    1950 	.db #0xf1	; 241
      0006CD F1                    1951 	.db #0xf1	; 241
      0006CE F1                    1952 	.db #0xf1	; 241
      0006CF F1                    1953 	.db #0xf1	; 241
      0006D0                       1954 _color_column_5:
      0006D0 E1                    1955 	.db #0xe1	; 225
      0006D1 E1                    1956 	.db #0xe1	; 225
      0006D2 E1                    1957 	.db #0xe1	; 225
      0006D3 E1                    1958 	.db #0xe1	; 225
      0006D4 E1                    1959 	.db #0xe1	; 225
      0006D5 E1                    1960 	.db #0xe1	; 225
      0006D6 E1                    1961 	.db #0xe1	; 225
      0006D7 E1                    1962 	.db #0xe1	; 225
      0006D8                       1963 _color_column_6:
      0006D8 E1                    1964 	.db #0xe1	; 225
      0006D9 E1                    1965 	.db #0xe1	; 225
      0006DA E1                    1966 	.db #0xe1	; 225
      0006DB 41                    1967 	.db #0x41	; 65	'A'
      0006DC 41                    1968 	.db #0x41	; 65	'A'
      0006DD 41                    1969 	.db #0x41	; 65	'A'
      0006DE 41                    1970 	.db #0x41	; 65	'A'
      0006DF 41                    1971 	.db #0x41	; 65	'A'
      0006E0                       1972 _color_column_7:
      0006E0 F1                    1973 	.db #0xf1	; 241
      0006E1 F1                    1974 	.db #0xf1	; 241
      0006E2 F1                    1975 	.db #0xf1	; 241
      0006E3 F1                    1976 	.db #0xf1	; 241
      0006E4 F1                    1977 	.db #0xf1	; 241
      0006E5 F1                    1978 	.db #0xf1	; 241
      0006E6 F1                    1979 	.db #0xf1	; 241
      0006E7 F1                    1980 	.db #0xf1	; 241
      0006E8                       1981 _color_column_8:
      0006E8 E1                    1982 	.db #0xe1	; 225
      0006E9 E1                    1983 	.db #0xe1	; 225
      0006EA E1                    1984 	.db #0xe1	; 225
      0006EB F1                    1985 	.db #0xf1	; 241
      0006EC E1                    1986 	.db #0xe1	; 225
      0006ED E1                    1987 	.db #0xe1	; 225
      0006EE E1                    1988 	.db #0xe1	; 225
      0006EF E1                    1989 	.db #0xe1	; 225
      0006F0                       1990 _color_column_9:
      0006F0 41                    1991 	.db #0x41	; 65	'A'
      0006F1 41                    1992 	.db #0x41	; 65	'A'
      0006F2 41                    1993 	.db #0x41	; 65	'A'
      0006F3 F1                    1994 	.db #0xf1	; 241
      0006F4 41                    1995 	.db #0x41	; 65	'A'
      0006F5 41                    1996 	.db #0x41	; 65	'A'
      0006F6 41                    1997 	.db #0x41	; 65	'A'
      0006F7 41                    1998 	.db #0x41	; 65	'A'
      0006F8                       1999 _color_column_10:
      0006F8 F1                    2000 	.db #0xf1	; 241
      0006F9 F1                    2001 	.db #0xf1	; 241
      0006FA F1                    2002 	.db #0xf1	; 241
      0006FB F1                    2003 	.db #0xf1	; 241
      0006FC F1                    2004 	.db #0xf1	; 241
      0006FD F1                    2005 	.db #0xf1	; 241
      0006FE F1                    2006 	.db #0xf1	; 241
      0006FF F1                    2007 	.db #0xf1	; 241
      000700                       2008 _color_column_11:
      000700 E1                    2009 	.db #0xe1	; 225
      000701 E1                    2010 	.db #0xe1	; 225
      000702 E1                    2011 	.db #0xe1	; 225
      000703 E1                    2012 	.db #0xe1	; 225
      000704 E1                    2013 	.db #0xe1	; 225
      000705 E1                    2014 	.db #0xe1	; 225
      000706 E1                    2015 	.db #0xe1	; 225
      000707 E1                    2016 	.db #0xe1	; 225
      000708                       2017 _color_column_12:
      000708 41                    2018 	.db #0x41	; 65	'A'
      000709 41                    2019 	.db #0x41	; 65	'A'
      00070A 41                    2020 	.db #0x41	; 65	'A'
      00070B 41                    2021 	.db #0x41	; 65	'A'
      00070C 41                    2022 	.db #0x41	; 65	'A'
      00070D 41                    2023 	.db #0x41	; 65	'A'
      00070E 41                    2024 	.db #0x41	; 65	'A'
      00070F 41                    2025 	.db #0x41	; 65	'A'
      000710                       2026 _color_column_16:
      000710 F1                    2027 	.db #0xf1	; 241
      000711 F1                    2028 	.db #0xf1	; 241
      000712 F1                    2029 	.db #0xf1	; 241
      000713 F1                    2030 	.db #0xf1	; 241
      000714 F1                    2031 	.db #0xf1	; 241
      000715 F1                    2032 	.db #0xf1	; 241
      000716 F1                    2033 	.db #0xf1	; 241
      000717 F1                    2034 	.db #0xf1	; 241
      000718                       2035 _color_column_17:
      000718 E1                    2036 	.db #0xe1	; 225
      000719 E1                    2037 	.db #0xe1	; 225
      00071A E1                    2038 	.db #0xe1	; 225
      00071B E1                    2039 	.db #0xe1	; 225
      00071C E1                    2040 	.db #0xe1	; 225
      00071D E1                    2041 	.db #0xe1	; 225
      00071E E1                    2042 	.db #0xe1	; 225
      00071F E1                    2043 	.db #0xe1	; 225
      000720                       2044 _color_column_18:
      000720 41                    2045 	.db #0x41	; 65	'A'
      000721 41                    2046 	.db #0x41	; 65	'A'
      000722 41                    2047 	.db #0x41	; 65	'A'
      000723 41                    2048 	.db #0x41	; 65	'A'
      000724 41                    2049 	.db #0x41	; 65	'A'
      000725 E1                    2050 	.db #0xe1	; 225
      000726 E1                    2051 	.db #0xe1	; 225
      000727 E1                    2052 	.db #0xe1	; 225
      000728                       2053 _color_column_13:
      000728 E1                    2054 	.db #0xe1	; 225
      000729 E1                    2055 	.db #0xe1	; 225
      00072A E1                    2056 	.db #0xe1	; 225
      00072B E1                    2057 	.db #0xe1	; 225
      00072C E1                    2058 	.db #0xe1	; 225
      00072D E1                    2059 	.db #0xe1	; 225
      00072E E1                    2060 	.db #0xe1	; 225
      00072F F1                    2061 	.db #0xf1	; 241
      000730                       2062 _color_column_14:
      000730 E1                    2063 	.db #0xe1	; 225
      000731 E1                    2064 	.db #0xe1	; 225
      000732 E1                    2065 	.db #0xe1	; 225
      000733 E1                    2066 	.db #0xe1	; 225
      000734 E1                    2067 	.db #0xe1	; 225
      000735 E1                    2068 	.db #0xe1	; 225
      000736 E1                    2069 	.db #0xe1	; 225
      000737 F1                    2070 	.db #0xf1	; 241
      000738                       2071 _color_column_15:
      000738 E1                    2072 	.db #0xe1	; 225
      000739 E1                    2073 	.db #0xe1	; 225
      00073A E1                    2074 	.db #0xe1	; 225
      00073B E1                    2075 	.db #0xe1	; 225
      00073C E1                    2076 	.db #0xe1	; 225
      00073D E1                    2077 	.db #0xe1	; 225
      00073E E1                    2078 	.db #0xe1	; 225
      00073F F1                    2079 	.db #0xf1	; 241
      000740                       2080 _color_dust_0:
      000740 F1                    2081 	.db #0xf1	; 241
      000741 F1                    2082 	.db #0xf1	; 241
      000742 F1                    2083 	.db #0xf1	; 241
      000743 F1                    2084 	.db #0xf1	; 241
      000744 F1                    2085 	.db #0xf1	; 241
      000745 F1                    2086 	.db #0xf1	; 241
      000746 F1                    2087 	.db #0xf1	; 241
      000747 F1                    2088 	.db #0xf1	; 241
      000748                       2089 _color_dust_1:
      000748 F1                    2090 	.db #0xf1	; 241
      000749 F1                    2091 	.db #0xf1	; 241
      00074A F1                    2092 	.db #0xf1	; 241
      00074B F1                    2093 	.db #0xf1	; 241
      00074C F1                    2094 	.db #0xf1	; 241
      00074D F1                    2095 	.db #0xf1	; 241
      00074E F1                    2096 	.db #0xf1	; 241
      00074F F1                    2097 	.db #0xf1	; 241
      000750                       2098 _color_dust_2:
      000750 F1                    2099 	.db #0xf1	; 241
      000751 F1                    2100 	.db #0xf1	; 241
      000752 F1                    2101 	.db #0xf1	; 241
      000753 F1                    2102 	.db #0xf1	; 241
      000754 F1                    2103 	.db #0xf1	; 241
      000755 F1                    2104 	.db #0xf1	; 241
      000756 F1                    2105 	.db #0xf1	; 241
      000757 F1                    2106 	.db #0xf1	; 241
      000758                       2107 _color_dust_3:
      000758 F1                    2108 	.db #0xf1	; 241
      000759 F1                    2109 	.db #0xf1	; 241
      00075A F1                    2110 	.db #0xf1	; 241
      00075B F1                    2111 	.db #0xf1	; 241
      00075C F1                    2112 	.db #0xf1	; 241
      00075D F1                    2113 	.db #0xf1	; 241
      00075E F1                    2114 	.db #0xf1	; 241
      00075F F1                    2115 	.db #0xf1	; 241
      000760                       2116 _color_font_1:
      000760 F1                    2117 	.db #0xf1	; 241
      000761 F1                    2118 	.db #0xf1	; 241
      000762 E1                    2119 	.db #0xe1	; 225
      000763 71                    2120 	.db #0x71	; 113	'q'
      000764 71                    2121 	.db #0x71	; 113	'q'
      000765 51                    2122 	.db #0x51	; 81	'Q'
      000766 51                    2123 	.db #0x51	; 81	'Q'
      000767 41                    2124 	.db #0x41	; 65	'A'
      000768                       2125 _color_font_2:
      000768 61                    2126 	.db #0x61	; 97	'a'
      000769 61                    2127 	.db #0x61	; 97	'a'
      00076A 81                    2128 	.db #0x81	; 129
      00076B 81                    2129 	.db #0x81	; 129
      00076C 91                    2130 	.db #0x91	; 145
      00076D 91                    2131 	.db #0x91	; 145
      00076E E1                    2132 	.db #0xe1	; 225
      00076F E1                    2133 	.db #0xe1	; 225
      000770                       2134 _color_title_1:
      000770 A1                    2135 	.db #0xa1	; 161
      000771 A1                    2136 	.db #0xa1	; 161
      000772 A1                    2137 	.db #0xa1	; 161
      000773 A1                    2138 	.db #0xa1	; 161
      000774 A1                    2139 	.db #0xa1	; 161
      000775 A1                    2140 	.db #0xa1	; 161
      000776 A1                    2141 	.db #0xa1	; 161
      000777 A1                    2142 	.db #0xa1	; 161
      000778                       2143 _color_title_2:
      000778 B1                    2144 	.db #0xb1	; 177
      000779 B1                    2145 	.db #0xb1	; 177
      00077A B1                    2146 	.db #0xb1	; 177
      00077B B1                    2147 	.db #0xb1	; 177
      00077C B1                    2148 	.db #0xb1	; 177
      00077D B1                    2149 	.db #0xb1	; 177
      00077E B1                    2150 	.db #0xb1	; 177
      00077F B1                    2151 	.db #0xb1	; 177
      000780                       2152 _color_title_3:
      000780 D1                    2153 	.db #0xd1	; 209
      000781 D1                    2154 	.db #0xd1	; 209
      000782 D1                    2155 	.db #0xd1	; 209
      000783 D1                    2156 	.db #0xd1	; 209
      000784 D1                    2157 	.db #0xd1	; 209
      000785 D1                    2158 	.db #0xd1	; 209
      000786 D1                    2159 	.db #0xd1	; 209
      000787 D1                    2160 	.db #0xd1	; 209
      000788                       2161 _color_title_4:
      000788 F1                    2162 	.db #0xf1	; 241
      000789 F1                    2163 	.db #0xf1	; 241
      00078A F1                    2164 	.db #0xf1	; 241
      00078B F1                    2165 	.db #0xf1	; 241
      00078C F1                    2166 	.db #0xf1	; 241
      00078D F1                    2167 	.db #0xf1	; 241
      00078E F1                    2168 	.db #0xf1	; 241
      00078F F1                    2169 	.db #0xf1	; 241
      000790                       2170 _color_title_5:
      000790 71                    2171 	.db #0x71	; 113	'q'
      000791 71                    2172 	.db #0x71	; 113	'q'
      000792 71                    2173 	.db #0x71	; 113	'q'
      000793 71                    2174 	.db #0x71	; 113	'q'
      000794 71                    2175 	.db #0x71	; 113	'q'
      000795 71                    2176 	.db #0x71	; 113	'q'
      000796 71                    2177 	.db #0x71	; 113	'q'
      000797 71                    2178 	.db #0x71	; 113	'q'
      000798                       2179 _color_title_6:
      000798 51                    2180 	.db #0x51	; 81	'Q'
      000799 51                    2181 	.db #0x51	; 81	'Q'
      00079A 51                    2182 	.db #0x51	; 81	'Q'
      00079B 51                    2183 	.db #0x51	; 81	'Q'
      00079C 51                    2184 	.db #0x51	; 81	'Q'
      00079D 51                    2185 	.db #0x51	; 81	'Q'
      00079E 51                    2186 	.db #0x51	; 81	'Q'
      00079F 51                    2187 	.db #0x51	; 81	'Q'
      0007A0                       2188 _color_title_7:
      0007A0 41                    2189 	.db #0x41	; 65	'A'
      0007A1 41                    2190 	.db #0x41	; 65	'A'
      0007A2 41                    2191 	.db #0x41	; 65	'A'
      0007A3 41                    2192 	.db #0x41	; 65	'A'
      0007A4 41                    2193 	.db #0x41	; 65	'A'
      0007A5 41                    2194 	.db #0x41	; 65	'A'
      0007A6 41                    2195 	.db #0x41	; 65	'A'
      0007A7 41                    2196 	.db #0x41	; 65	'A'
      0007A8                       2197 _sprite_arrow_0:
      0007A8 00                    2198 	.db #0x00	; 0
      0007A9 00                    2199 	.db #0x00	; 0
      0007AA 00                    2200 	.db #0x00	; 0
      0007AB 00                    2201 	.db #0x00	; 0
      0007AC 00                    2202 	.db #0x00	; 0
      0007AD 00                    2203 	.db #0x00	; 0
      0007AE 00                    2204 	.db #0x00	; 0
      0007AF 00                    2205 	.db #0x00	; 0
      0007B0                       2206 _sprite_arrow_1:
      0007B0 FF                    2207 	.db #0xff	; 255
      0007B1 00                    2208 	.db #0x00	; 0
      0007B2 3F                    2209 	.db #0x3f	; 63
      0007B3 00                    2210 	.db #0x00	; 0
      0007B4 0F                    2211 	.db #0x0f	; 15
      0007B5 00                    2212 	.db #0x00	; 0
      0007B6 03                    2213 	.db #0x03	; 3
      0007B7 00                    2214 	.db #0x00	; 0
      0007B8                       2215 _sprite_arrow_2:
      0007B8 00                    2216 	.db #0x00	; 0
      0007B9 00                    2217 	.db #0x00	; 0
      0007BA 00                    2218 	.db #0x00	; 0
      0007BB 00                    2219 	.db #0x00	; 0
      0007BC 00                    2220 	.db #0x00	; 0
      0007BD 00                    2221 	.db #0x00	; 0
      0007BE 00                    2222 	.db #0x00	; 0
      0007BF 00                    2223 	.db #0x00	; 0
      0007C0                       2224 _sprite_arrow_3:
      0007C0 FF                    2225 	.db #0xff	; 255
      0007C1 00                    2226 	.db #0x00	; 0
      0007C2 FC                    2227 	.db #0xfc	; 252
      0007C3 00                    2228 	.db #0x00	; 0
      0007C4 F0                    2229 	.db #0xf0	; 240
      0007C5 00                    2230 	.db #0x00	; 0
      0007C6 C0                    2231 	.db #0xc0	; 192
      0007C7 00                    2232 	.db #0x00	; 0
      0007C8                       2233 _sprite_hit_1:
      0007C8 00                    2234 	.db #0x00	; 0
      0007C9 77                    2235 	.db #0x77	; 119	'w'
      0007CA 22                    2236 	.db #0x22	; 34
      0007CB 22                    2237 	.db #0x22	; 34
      0007CC 22                    2238 	.db #0x22	; 34
      0007CD 3E                    2239 	.db #0x3e	; 62
      0007CE 22                    2240 	.db #0x22	; 34
      0007CF 22                    2241 	.db #0x22	; 34
      0007D0 22                    2242 	.db #0x22	; 34
      0007D1 77                    2243 	.db #0x77	; 119	'w'
      0007D2 00                    2244 	.db #0x00	; 0
      0007D3 00                    2245 	.db #0x00	; 0
      0007D4 00                    2246 	.db #0x00	; 0
      0007D5 00                    2247 	.db #0x00	; 0
      0007D6 00                    2248 	.db #0x00	; 0
      0007D7 00                    2249 	.db #0x00	; 0
      0007D8 00                    2250 	.db #0x00	; 0
      0007D9 77                    2251 	.db #0x77	; 119	'w'
      0007DA 25                    2252 	.db #0x25	; 37
      0007DB 21                    2253 	.db #0x21	; 33
      0007DC 21                    2254 	.db #0x21	; 33
      0007DD 21                    2255 	.db #0x21	; 33
      0007DE 21                    2256 	.db #0x21	; 33
      0007DF 21                    2257 	.db #0x21	; 33
      0007E0 21                    2258 	.db #0x21	; 33
      0007E1 73                    2259 	.db #0x73	; 115	's'
      0007E2 00                    2260 	.db #0x00	; 0
      0007E3 00                    2261 	.db #0x00	; 0
      0007E4 00                    2262 	.db #0x00	; 0
      0007E5 00                    2263 	.db #0x00	; 0
      0007E6 00                    2264 	.db #0x00	; 0
      0007E7 00                    2265 	.db #0x00	; 0
      0007E8                       2266 _sprite_hit_2:
      0007E8 00                    2267 	.db #0x00	; 0
      0007E9 C0                    2268 	.db #0xc0	; 192
      0007EA 40                    2269 	.db #0x40	; 64
      0007EB 00                    2270 	.db #0x00	; 0
      0007EC 00                    2271 	.db #0x00	; 0
      0007ED 00                    2272 	.db #0x00	; 0
      0007EE 00                    2273 	.db #0x00	; 0
      0007EF 00                    2274 	.db #0x00	; 0
      0007F0 00                    2275 	.db #0x00	; 0
      0007F1 80                    2276 	.db #0x80	; 128
      0007F2 00                    2277 	.db #0x00	; 0
      0007F3 00                    2278 	.db #0x00	; 0
      0007F4 00                    2279 	.db #0x00	; 0
      0007F5 00                    2280 	.db #0x00	; 0
      0007F6 00                    2281 	.db #0x00	; 0
      0007F7 00                    2282 	.db #0x00	; 0
      0007F8 00                    2283 	.db #0x00	; 0
      0007F9 00                    2284 	.db #0x00	; 0
      0007FA 00                    2285 	.db #0x00	; 0
      0007FB 00                    2286 	.db #0x00	; 0
      0007FC 00                    2287 	.db #0x00	; 0
      0007FD 00                    2288 	.db #0x00	; 0
      0007FE 00                    2289 	.db #0x00	; 0
      0007FF 00                    2290 	.db #0x00	; 0
      000800 00                    2291 	.db #0x00	; 0
      000801 00                    2292 	.db #0x00	; 0
      000802 00                    2293 	.db #0x00	; 0
      000803 00                    2294 	.db #0x00	; 0
      000804 00                    2295 	.db #0x00	; 0
      000805 00                    2296 	.db #0x00	; 0
      000806 00                    2297 	.db #0x00	; 0
      000807 00                    2298 	.db #0x00	; 0
      000808                       2299 _sprite_combo_1:
      000808 00                    2300 	.db #0x00	; 0
      000809 38                    2301 	.db #0x38	; 56	'8'
      00080A 65                    2302 	.db #0x65	; 101	'e'
      00080B 61                    2303 	.db #0x61	; 97	'a'
      00080C 61                    2304 	.db #0x61	; 97	'a'
      00080D 61                    2305 	.db #0x61	; 97	'a'
      00080E 61                    2306 	.db #0x61	; 97	'a'
      00080F 61                    2307 	.db #0x61	; 97	'a'
      000810 65                    2308 	.db #0x65	; 101	'e'
      000811 38                    2309 	.db #0x38	; 56	'8'
      000812 00                    2310 	.db #0x00	; 0
      000813 00                    2311 	.db #0x00	; 0
      000814 00                    2312 	.db #0x00	; 0
      000815 00                    2313 	.db #0x00	; 0
      000816 00                    2314 	.db #0x00	; 0
      000817 00                    2315 	.db #0x00	; 0
      000818 00                    2316 	.db #0x00	; 0
      000819 E6                    2317 	.db #0xe6	; 230
      00081A 13                    2318 	.db #0x13	; 19
      00081B 12                    2319 	.db #0x12	; 18
      00081C 12                    2320 	.db #0x12	; 18
      00081D 12                    2321 	.db #0x12	; 18
      00081E 12                    2322 	.db #0x12	; 18
      00081F 12                    2323 	.db #0x12	; 18
      000820 12                    2324 	.db #0x12	; 18
      000821 E7                    2325 	.db #0xe7	; 231
      000822 00                    2326 	.db #0x00	; 0
      000823 00                    2327 	.db #0x00	; 0
      000824 00                    2328 	.db #0x00	; 0
      000825 00                    2329 	.db #0x00	; 0
      000826 00                    2330 	.db #0x00	; 0
      000827 00                    2331 	.db #0x00	; 0
      000828                       2332 _sprite_combo_2:
      000828 00                    2333 	.db #0x00	; 0
      000829 37                    2334 	.db #0x37	; 55	'7'
      00082A 62                    2335 	.db #0x62	; 98	'b'
      00082B A2                    2336 	.db #0xa2	; 162
      00082C 22                    2337 	.db #0x22	; 34
      00082D 23                    2338 	.db #0x23	; 35
      00082E 22                    2339 	.db #0x22	; 34
      00082F 22                    2340 	.db #0x22	; 34
      000830 22                    2341 	.db #0x22	; 34
      000831 77                    2342 	.db #0x77	; 119	'w'
      000832 00                    2343 	.db #0x00	; 0
      000833 00                    2344 	.db #0x00	; 0
      000834 00                    2345 	.db #0x00	; 0
      000835 00                    2346 	.db #0x00	; 0
      000836 00                    2347 	.db #0x00	; 0
      000837 00                    2348 	.db #0x00	; 0
      000838 00                    2349 	.db #0x00	; 0
      000839 8E                    2350 	.db #0x8e	; 142
      00083A 51                    2351 	.db #0x51	; 81	'Q'
      00083B 51                    2352 	.db #0x51	; 81	'Q'
      00083C 51                    2353 	.db #0x51	; 81	'Q'
      00083D 91                    2354 	.db #0x91	; 145
      00083E 51                    2355 	.db #0x51	; 81	'Q'
      00083F 51                    2356 	.db #0x51	; 81	'Q'
      000840 51                    2357 	.db #0x51	; 81	'Q'
      000841 8E                    2358 	.db #0x8e	; 142
      000842 00                    2359 	.db #0x00	; 0
      000843 00                    2360 	.db #0x00	; 0
      000844 00                    2361 	.db #0x00	; 0
      000845 00                    2362 	.db #0x00	; 0
      000846 00                    2363 	.db #0x00	; 0
      000847 00                    2364 	.db #0x00	; 0
      000848                       2365 _sprite_2x:
      000848 00                    2366 	.db #0x00	; 0
      000849 3E                    2367 	.db #0x3e	; 62
      00084A 63                    2368 	.db #0x63	; 99	'c'
      00084B 03                    2369 	.db #0x03	; 3
      00084C 03                    2370 	.db #0x03	; 3
      00084D 1E                    2371 	.db #0x1e	; 30
      00084E 30                    2372 	.db #0x30	; 48	'0'
      00084F 60                    2373 	.db #0x60	; 96
      000850 60                    2374 	.db #0x60	; 96
      000851 7F                    2375 	.db #0x7f	; 127
      000852 00                    2376 	.db #0x00	; 0
      000853 00                    2377 	.db #0x00	; 0
      000854 00                    2378 	.db #0x00	; 0
      000855 00                    2379 	.db #0x00	; 0
      000856 00                    2380 	.db #0x00	; 0
      000857 00                    2381 	.db #0x00	; 0
      000858 00                    2382 	.db #0x00	; 0
      000859 00                    2383 	.db #0x00	; 0
      00085A 00                    2384 	.db #0x00	; 0
      00085B 63                    2385 	.db #0x63	; 99	'c'
      00085C 36                    2386 	.db #0x36	; 54	'6'
      00085D 1C                    2387 	.db #0x1c	; 28
      00085E 08                    2388 	.db #0x08	; 8
      00085F 1C                    2389 	.db #0x1c	; 28
      000860 36                    2390 	.db #0x36	; 54	'6'
      000861 63                    2391 	.db #0x63	; 99	'c'
      000862 00                    2392 	.db #0x00	; 0
      000863 00                    2393 	.db #0x00	; 0
      000864 00                    2394 	.db #0x00	; 0
      000865 00                    2395 	.db #0x00	; 0
      000866 00                    2396 	.db #0x00	; 0
      000867 00                    2397 	.db #0x00	; 0
      000868                       2398 _sprite_3x:
      000868 00                    2399 	.db #0x00	; 0
      000869 3E                    2400 	.db #0x3e	; 62
      00086A 63                    2401 	.db #0x63	; 99	'c'
      00086B 03                    2402 	.db #0x03	; 3
      00086C 03                    2403 	.db #0x03	; 3
      00086D 1E                    2404 	.db #0x1e	; 30
      00086E 03                    2405 	.db #0x03	; 3
      00086F 03                    2406 	.db #0x03	; 3
      000870 63                    2407 	.db #0x63	; 99	'c'
      000871 3E                    2408 	.db #0x3e	; 62
      000872 00                    2409 	.db #0x00	; 0
      000873 00                    2410 	.db #0x00	; 0
      000874 00                    2411 	.db #0x00	; 0
      000875 00                    2412 	.db #0x00	; 0
      000876 00                    2413 	.db #0x00	; 0
      000877 00                    2414 	.db #0x00	; 0
      000878 00                    2415 	.db #0x00	; 0
      000879 00                    2416 	.db #0x00	; 0
      00087A 00                    2417 	.db #0x00	; 0
      00087B 63                    2418 	.db #0x63	; 99	'c'
      00087C 36                    2419 	.db #0x36	; 54	'6'
      00087D 1C                    2420 	.db #0x1c	; 28
      00087E 08                    2421 	.db #0x08	; 8
      00087F 1C                    2422 	.db #0x1c	; 28
      000880 36                    2423 	.db #0x36	; 54	'6'
      000881 63                    2424 	.db #0x63	; 99	'c'
      000882 00                    2425 	.db #0x00	; 0
      000883 00                    2426 	.db #0x00	; 0
      000884 00                    2427 	.db #0x00	; 0
      000885 00                    2428 	.db #0x00	; 0
      000886 00                    2429 	.db #0x00	; 0
      000887 00                    2430 	.db #0x00	; 0
      000888                       2431 _sprite_4x:
      000888 00                    2432 	.db #0x00	; 0
      000889 02                    2433 	.db #0x02	; 2
      00088A 06                    2434 	.db #0x06	; 6
      00088B 0E                    2435 	.db #0x0e	; 14
      00088C 16                    2436 	.db #0x16	; 22
      00088D 26                    2437 	.db #0x26	; 38
      00088E 7F                    2438 	.db #0x7f	; 127
      00088F 06                    2439 	.db #0x06	; 6
      000890 06                    2440 	.db #0x06	; 6
      000891 0F                    2441 	.db #0x0f	; 15
      000892 00                    2442 	.db #0x00	; 0
      000893 00                    2443 	.db #0x00	; 0
      000894 00                    2444 	.db #0x00	; 0
      000895 00                    2445 	.db #0x00	; 0
      000896 00                    2446 	.db #0x00	; 0
      000897 00                    2447 	.db #0x00	; 0
      000898 00                    2448 	.db #0x00	; 0
      000899 00                    2449 	.db #0x00	; 0
      00089A 00                    2450 	.db #0x00	; 0
      00089B 63                    2451 	.db #0x63	; 99	'c'
      00089C 36                    2452 	.db #0x36	; 54	'6'
      00089D 1C                    2453 	.db #0x1c	; 28
      00089E 08                    2454 	.db #0x08	; 8
      00089F 1C                    2455 	.db #0x1c	; 28
      0008A0 36                    2456 	.db #0x36	; 54	'6'
      0008A1 63                    2457 	.db #0x63	; 99	'c'
      0008A2 00                    2458 	.db #0x00	; 0
      0008A3 00                    2459 	.db #0x00	; 0
      0008A4 00                    2460 	.db #0x00	; 0
      0008A5 00                    2461 	.db #0x00	; 0
      0008A6 00                    2462 	.db #0x00	; 0
      0008A7 00                    2463 	.db #0x00	; 0
      0008A8                       2464 _sprite_5x:
      0008A8 00                    2465 	.db #0x00	; 0
      0008A9 7E                    2466 	.db #0x7e	; 126
      0008AA 60                    2467 	.db #0x60	; 96
      0008AB 60                    2468 	.db #0x60	; 96
      0008AC 7E                    2469 	.db #0x7e	; 126
      0008AD 03                    2470 	.db #0x03	; 3
      0008AE 03                    2471 	.db #0x03	; 3
      0008AF 03                    2472 	.db #0x03	; 3
      0008B0 63                    2473 	.db #0x63	; 99	'c'
      0008B1 3E                    2474 	.db #0x3e	; 62
      0008B2 00                    2475 	.db #0x00	; 0
      0008B3 00                    2476 	.db #0x00	; 0
      0008B4 00                    2477 	.db #0x00	; 0
      0008B5 00                    2478 	.db #0x00	; 0
      0008B6 00                    2479 	.db #0x00	; 0
      0008B7 00                    2480 	.db #0x00	; 0
      0008B8 00                    2481 	.db #0x00	; 0
      0008B9 00                    2482 	.db #0x00	; 0
      0008BA 00                    2483 	.db #0x00	; 0
      0008BB 63                    2484 	.db #0x63	; 99	'c'
      0008BC 36                    2485 	.db #0x36	; 54	'6'
      0008BD 1C                    2486 	.db #0x1c	; 28
      0008BE 08                    2487 	.db #0x08	; 8
      0008BF 1C                    2488 	.db #0x1c	; 28
      0008C0 36                    2489 	.db #0x36	; 54	'6'
      0008C1 63                    2490 	.db #0x63	; 99	'c'
      0008C2 00                    2491 	.db #0x00	; 0
      0008C3 00                    2492 	.db #0x00	; 0
      0008C4 00                    2493 	.db #0x00	; 0
      0008C5 00                    2494 	.db #0x00	; 0
      0008C6 00                    2495 	.db #0x00	; 0
      0008C7 00                    2496 	.db #0x00	; 0
      0008C8                       2497 _sprite_6x:
      0008C8 00                    2498 	.db #0x00	; 0
      0008C9 3E                    2499 	.db #0x3e	; 62
      0008CA 61                    2500 	.db #0x61	; 97	'a'
      0008CB 60                    2501 	.db #0x60	; 96
      0008CC 7E                    2502 	.db #0x7e	; 126
      0008CD 63                    2503 	.db #0x63	; 99	'c'
      0008CE 63                    2504 	.db #0x63	; 99	'c'
      0008CF 63                    2505 	.db #0x63	; 99	'c'
      0008D0 63                    2506 	.db #0x63	; 99	'c'
      0008D1 3E                    2507 	.db #0x3e	; 62
      0008D2 00                    2508 	.db #0x00	; 0
      0008D3 00                    2509 	.db #0x00	; 0
      0008D4 00                    2510 	.db #0x00	; 0
      0008D5 00                    2511 	.db #0x00	; 0
      0008D6 00                    2512 	.db #0x00	; 0
      0008D7 00                    2513 	.db #0x00	; 0
      0008D8 00                    2514 	.db #0x00	; 0
      0008D9 00                    2515 	.db #0x00	; 0
      0008DA 00                    2516 	.db #0x00	; 0
      0008DB 63                    2517 	.db #0x63	; 99	'c'
      0008DC 36                    2518 	.db #0x36	; 54	'6'
      0008DD 1C                    2519 	.db #0x1c	; 28
      0008DE 08                    2520 	.db #0x08	; 8
      0008DF 1C                    2521 	.db #0x1c	; 28
      0008E0 36                    2522 	.db #0x36	; 54	'6'
      0008E1 63                    2523 	.db #0x63	; 99	'c'
      0008E2 00                    2524 	.db #0x00	; 0
      0008E3 00                    2525 	.db #0x00	; 0
      0008E4 00                    2526 	.db #0x00	; 0
      0008E5 00                    2527 	.db #0x00	; 0
      0008E6 00                    2528 	.db #0x00	; 0
      0008E7 00                    2529 	.db #0x00	; 0
      0008E8                       2530 _sprite_mega_hit:
      0008E8 04                    2531 	.db #0x04	; 4
      0008E9 06                    2532 	.db #0x06	; 6
      0008EA 05                    2533 	.db #0x05	; 5
      0008EB 04                    2534 	.db #0x04	; 4
      0008EC 04                    2535 	.db #0x04	; 4
      0008ED 00                    2536 	.db #0x00	; 0
      0008EE 03                    2537 	.db #0x03	; 3
      0008EF 04                    2538 	.db #0x04	; 4
      0008F0 05                    2539 	.db #0x05	; 5
      0008F1 04                    2540 	.db #0x04	; 4
      0008F2 03                    2541 	.db #0x03	; 3
      0008F3 00                    2542 	.db #0x00	; 0
      0008F4 00                    2543 	.db #0x00	; 0
      0008F5 00                    2544 	.db #0x00	; 0
      0008F6 00                    2545 	.db #0x00	; 0
      0008F7 00                    2546 	.db #0x00	; 0
      0008F8 5C                    2547 	.db #0x5c	; 92
      0008F9 D0                    2548 	.db #0xd0	; 208
      0008FA 5C                    2549 	.db #0x5c	; 92
      0008FB 50                    2550 	.db #0x50	; 80	'P'
      0008FC 5C                    2551 	.db #0x5c	; 92
      0008FD 00                    2552 	.db #0x00	; 0
      0008FE 98                    2553 	.db #0x98	; 152
      0008FF 24                    2554 	.db #0x24	; 36
      000900 A4                    2555 	.db #0xa4	; 164
      000901 BC                    2556 	.db #0xbc	; 188
      000902 A4                    2557 	.db #0xa4	; 164
      000903 00                    2558 	.db #0x00	; 0
      000904 00                    2559 	.db #0x00	; 0
      000905 00                    2560 	.db #0x00	; 0
      000906 00                    2561 	.db #0x00	; 0
      000907 00                    2562 	.db #0x00	; 0
      000908                       2563 _sprite_explosion_0:
      000908 00                    2564 	.db #0x00	; 0
      000909 00                    2565 	.db #0x00	; 0
      00090A 00                    2566 	.db #0x00	; 0
      00090B 00                    2567 	.db #0x00	; 0
      00090C 00                    2568 	.db #0x00	; 0
      00090D 00                    2569 	.db #0x00	; 0
      00090E 01                    2570 	.db #0x01	; 1
      00090F 02                    2571 	.db #0x02	; 2
      000910 01                    2572 	.db #0x01	; 1
      000911 00                    2573 	.db #0x00	; 0
      000912 00                    2574 	.db #0x00	; 0
      000913 00                    2575 	.db #0x00	; 0
      000914 00                    2576 	.db #0x00	; 0
      000915 00                    2577 	.db #0x00	; 0
      000916 00                    2578 	.db #0x00	; 0
      000917 00                    2579 	.db #0x00	; 0
      000918 00                    2580 	.db #0x00	; 0
      000919 00                    2581 	.db #0x00	; 0
      00091A 00                    2582 	.db #0x00	; 0
      00091B 00                    2583 	.db #0x00	; 0
      00091C 00                    2584 	.db #0x00	; 0
      00091D 00                    2585 	.db #0x00	; 0
      00091E 00                    2586 	.db #0x00	; 0
      00091F 80                    2587 	.db #0x80	; 128
      000920 00                    2588 	.db #0x00	; 0
      000921 00                    2589 	.db #0x00	; 0
      000922 00                    2590 	.db #0x00	; 0
      000923 00                    2591 	.db #0x00	; 0
      000924 00                    2592 	.db #0x00	; 0
      000925 00                    2593 	.db #0x00	; 0
      000926 00                    2594 	.db #0x00	; 0
      000927 00                    2595 	.db #0x00	; 0
      000928                       2596 _sprite_explosion_1:
      000928 00                    2597 	.db #0x00	; 0
      000929 00                    2598 	.db #0x00	; 0
      00092A 00                    2599 	.db #0x00	; 0
      00092B 00                    2600 	.db #0x00	; 0
      00092C 00                    2601 	.db #0x00	; 0
      00092D 01                    2602 	.db #0x01	; 1
      00092E 00                    2603 	.db #0x00	; 0
      00092F 04                    2604 	.db #0x04	; 4
      000930 00                    2605 	.db #0x00	; 0
      000931 01                    2606 	.db #0x01	; 1
      000932 00                    2607 	.db #0x00	; 0
      000933 00                    2608 	.db #0x00	; 0
      000934 00                    2609 	.db #0x00	; 0
      000935 00                    2610 	.db #0x00	; 0
      000936 00                    2611 	.db #0x00	; 0
      000937 00                    2612 	.db #0x00	; 0
      000938 00                    2613 	.db #0x00	; 0
      000939 00                    2614 	.db #0x00	; 0
      00093A 00                    2615 	.db #0x00	; 0
      00093B 00                    2616 	.db #0x00	; 0
      00093C 00                    2617 	.db #0x00	; 0
      00093D 00                    2618 	.db #0x00	; 0
      00093E 00                    2619 	.db #0x00	; 0
      00093F 40                    2620 	.db #0x40	; 64
      000940 00                    2621 	.db #0x00	; 0
      000941 00                    2622 	.db #0x00	; 0
      000942 00                    2623 	.db #0x00	; 0
      000943 00                    2624 	.db #0x00	; 0
      000944 00                    2625 	.db #0x00	; 0
      000945 00                    2626 	.db #0x00	; 0
      000946 00                    2627 	.db #0x00	; 0
      000947 00                    2628 	.db #0x00	; 0
      000948                       2629 _sprite_explosion_2:
      000948 00                    2630 	.db #0x00	; 0
      000949 00                    2631 	.db #0x00	; 0
      00094A 00                    2632 	.db #0x00	; 0
      00094B 00                    2633 	.db #0x00	; 0
      00094C 01                    2634 	.db #0x01	; 1
      00094D 04                    2635 	.db #0x04	; 4
      00094E 00                    2636 	.db #0x00	; 0
      00094F 08                    2637 	.db #0x08	; 8
      000950 00                    2638 	.db #0x00	; 0
      000951 04                    2639 	.db #0x04	; 4
      000952 01                    2640 	.db #0x01	; 1
      000953 00                    2641 	.db #0x00	; 0
      000954 00                    2642 	.db #0x00	; 0
      000955 00                    2643 	.db #0x00	; 0
      000956 00                    2644 	.db #0x00	; 0
      000957 00                    2645 	.db #0x00	; 0
      000958 00                    2646 	.db #0x00	; 0
      000959 00                    2647 	.db #0x00	; 0
      00095A 00                    2648 	.db #0x00	; 0
      00095B 00                    2649 	.db #0x00	; 0
      00095C 00                    2650 	.db #0x00	; 0
      00095D 40                    2651 	.db #0x40	; 64
      00095E 00                    2652 	.db #0x00	; 0
      00095F 20                    2653 	.db #0x20	; 32
      000960 00                    2654 	.db #0x00	; 0
      000961 40                    2655 	.db #0x40	; 64
      000962 00                    2656 	.db #0x00	; 0
      000963 00                    2657 	.db #0x00	; 0
      000964 00                    2658 	.db #0x00	; 0
      000965 00                    2659 	.db #0x00	; 0
      000966 00                    2660 	.db #0x00	; 0
      000967 00                    2661 	.db #0x00	; 0
      000968                       2662 _sprite_explosion_3:
      000968 00                    2663 	.db #0x00	; 0
      000969 00                    2664 	.db #0x00	; 0
      00096A 00                    2665 	.db #0x00	; 0
      00096B 01                    2666 	.db #0x01	; 1
      00096C 08                    2667 	.db #0x08	; 8
      00096D 00                    2668 	.db #0x00	; 0
      00096E 00                    2669 	.db #0x00	; 0
      00096F 10                    2670 	.db #0x10	; 16
      000970 00                    2671 	.db #0x00	; 0
      000971 00                    2672 	.db #0x00	; 0
      000972 08                    2673 	.db #0x08	; 8
      000973 01                    2674 	.db #0x01	; 1
      000974 00                    2675 	.db #0x00	; 0
      000975 00                    2676 	.db #0x00	; 0
      000976 00                    2677 	.db #0x00	; 0
      000977 00                    2678 	.db #0x00	; 0
      000978 00                    2679 	.db #0x00	; 0
      000979 00                    2680 	.db #0x00	; 0
      00097A 00                    2681 	.db #0x00	; 0
      00097B 00                    2682 	.db #0x00	; 0
      00097C 20                    2683 	.db #0x20	; 32
      00097D 00                    2684 	.db #0x00	; 0
      00097E 00                    2685 	.db #0x00	; 0
      00097F 10                    2686 	.db #0x10	; 16
      000980 00                    2687 	.db #0x00	; 0
      000981 00                    2688 	.db #0x00	; 0
      000982 20                    2689 	.db #0x20	; 32
      000983 00                    2690 	.db #0x00	; 0
      000984 00                    2691 	.db #0x00	; 0
      000985 00                    2692 	.db #0x00	; 0
      000986 00                    2693 	.db #0x00	; 0
      000987 00                    2694 	.db #0x00	; 0
      000988                       2695 _sprite_explosion_4:
      000988 00                    2696 	.db #0x00	; 0
      000989 00                    2697 	.db #0x00	; 0
      00098A 01                    2698 	.db #0x01	; 1
      00098B 10                    2699 	.db #0x10	; 16
      00098C 00                    2700 	.db #0x00	; 0
      00098D 00                    2701 	.db #0x00	; 0
      00098E 00                    2702 	.db #0x00	; 0
      00098F 20                    2703 	.db #0x20	; 32
      000990 00                    2704 	.db #0x00	; 0
      000991 00                    2705 	.db #0x00	; 0
      000992 00                    2706 	.db #0x00	; 0
      000993 10                    2707 	.db #0x10	; 16
      000994 01                    2708 	.db #0x01	; 1
      000995 00                    2709 	.db #0x00	; 0
      000996 00                    2710 	.db #0x00	; 0
      000997 00                    2711 	.db #0x00	; 0
      000998 00                    2712 	.db #0x00	; 0
      000999 00                    2713 	.db #0x00	; 0
      00099A 00                    2714 	.db #0x00	; 0
      00099B 10                    2715 	.db #0x10	; 16
      00099C 00                    2716 	.db #0x00	; 0
      00099D 00                    2717 	.db #0x00	; 0
      00099E 00                    2718 	.db #0x00	; 0
      00099F 08                    2719 	.db #0x08	; 8
      0009A0 00                    2720 	.db #0x00	; 0
      0009A1 00                    2721 	.db #0x00	; 0
      0009A2 00                    2722 	.db #0x00	; 0
      0009A3 10                    2723 	.db #0x10	; 16
      0009A4 00                    2724 	.db #0x00	; 0
      0009A5 00                    2725 	.db #0x00	; 0
      0009A6 00                    2726 	.db #0x00	; 0
      0009A7 00                    2727 	.db #0x00	; 0
      0009A8                       2728 _sprite_explosion_5:
      0009A8 01                    2729 	.db #0x01	; 1
      0009A9 00                    2730 	.db #0x00	; 0
      0009AA 20                    2731 	.db #0x20	; 32
      0009AB 00                    2732 	.db #0x00	; 0
      0009AC 00                    2733 	.db #0x00	; 0
      0009AD 00                    2734 	.db #0x00	; 0
      0009AE 00                    2735 	.db #0x00	; 0
      0009AF 80                    2736 	.db #0x80	; 128
      0009B0 00                    2737 	.db #0x00	; 0
      0009B1 00                    2738 	.db #0x00	; 0
      0009B2 00                    2739 	.db #0x00	; 0
      0009B3 00                    2740 	.db #0x00	; 0
      0009B4 20                    2741 	.db #0x20	; 32
      0009B5 00                    2742 	.db #0x00	; 0
      0009B6 01                    2743 	.db #0x01	; 1
      0009B7 00                    2744 	.db #0x00	; 0
      0009B8 00                    2745 	.db #0x00	; 0
      0009B9 00                    2746 	.db #0x00	; 0
      0009BA 08                    2747 	.db #0x08	; 8
      0009BB 00                    2748 	.db #0x00	; 0
      0009BC 00                    2749 	.db #0x00	; 0
      0009BD 00                    2750 	.db #0x00	; 0
      0009BE 00                    2751 	.db #0x00	; 0
      0009BF 02                    2752 	.db #0x02	; 2
      0009C0 00                    2753 	.db #0x00	; 0
      0009C1 00                    2754 	.db #0x00	; 0
      0009C2 00                    2755 	.db #0x00	; 0
      0009C3 00                    2756 	.db #0x00	; 0
      0009C4 08                    2757 	.db #0x08	; 8
      0009C5 00                    2758 	.db #0x00	; 0
      0009C6 00                    2759 	.db #0x00	; 0
      0009C7 00                    2760 	.db #0x00	; 0
      0009C8                       2761 _sprite_explosion_6:
      0009C8 00                    2762 	.db #0x00	; 0
      0009C9 01                    2763 	.db #0x01	; 1
      0009CA 00                    2764 	.db #0x00	; 0
      0009CB 20                    2765 	.db #0x20	; 32
      0009CC 00                    2766 	.db #0x00	; 0
      0009CD 00                    2767 	.db #0x00	; 0
      0009CE 00                    2768 	.db #0x00	; 0
      0009CF 00                    2769 	.db #0x00	; 0
      0009D0 80                    2770 	.db #0x80	; 128
      0009D1 00                    2771 	.db #0x00	; 0
      0009D2 00                    2772 	.db #0x00	; 0
      0009D3 00                    2773 	.db #0x00	; 0
      0009D4 00                    2774 	.db #0x00	; 0
      0009D5 20                    2775 	.db #0x20	; 32
      0009D6 00                    2776 	.db #0x00	; 0
      0009D7 01                    2777 	.db #0x01	; 1
      0009D8 00                    2778 	.db #0x00	; 0
      0009D9 00                    2779 	.db #0x00	; 0
      0009DA 00                    2780 	.db #0x00	; 0
      0009DB 08                    2781 	.db #0x08	; 8
      0009DC 00                    2782 	.db #0x00	; 0
      0009DD 00                    2783 	.db #0x00	; 0
      0009DE 00                    2784 	.db #0x00	; 0
      0009DF 00                    2785 	.db #0x00	; 0
      0009E0 02                    2786 	.db #0x02	; 2
      0009E1 00                    2787 	.db #0x00	; 0
      0009E2 00                    2788 	.db #0x00	; 0
      0009E3 00                    2789 	.db #0x00	; 0
      0009E4 00                    2790 	.db #0x00	; 0
      0009E5 08                    2791 	.db #0x08	; 8
      0009E6 00                    2792 	.db #0x00	; 0
      0009E7 00                    2793 	.db #0x00	; 0
      0009E8                       2794 _sprite_explosion_7:
      0009E8 00                    2795 	.db #0x00	; 0
      0009E9 00                    2796 	.db #0x00	; 0
      0009EA 01                    2797 	.db #0x01	; 1
      0009EB 00                    2798 	.db #0x00	; 0
      0009EC 20                    2799 	.db #0x20	; 32
      0009ED 00                    2800 	.db #0x00	; 0
      0009EE 00                    2801 	.db #0x00	; 0
      0009EF 00                    2802 	.db #0x00	; 0
      0009F0 00                    2803 	.db #0x00	; 0
      0009F1 80                    2804 	.db #0x80	; 128
      0009F2 00                    2805 	.db #0x00	; 0
      0009F3 00                    2806 	.db #0x00	; 0
      0009F4 00                    2807 	.db #0x00	; 0
      0009F5 00                    2808 	.db #0x00	; 0
      0009F6 20                    2809 	.db #0x20	; 32
      0009F7 00                    2810 	.db #0x00	; 0
      0009F8 00                    2811 	.db #0x00	; 0
      0009F9 00                    2812 	.db #0x00	; 0
      0009FA 00                    2813 	.db #0x00	; 0
      0009FB 00                    2814 	.db #0x00	; 0
      0009FC 08                    2815 	.db #0x08	; 8
      0009FD 00                    2816 	.db #0x00	; 0
      0009FE 00                    2817 	.db #0x00	; 0
      0009FF 00                    2818 	.db #0x00	; 0
      000A00 00                    2819 	.db #0x00	; 0
      000A01 02                    2820 	.db #0x02	; 2
      000A02 00                    2821 	.db #0x00	; 0
      000A03 00                    2822 	.db #0x00	; 0
      000A04 00                    2823 	.db #0x00	; 0
      000A05 00                    2824 	.db #0x00	; 0
      000A06 08                    2825 	.db #0x08	; 8
      000A07 00                    2826 	.db #0x00	; 0
      000A08                       2827 _sprite_block_small_0:
      000A08 5A                    2828 	.db #0x5a	; 90	'Z'
      000A09 24                    2829 	.db #0x24	; 36
      000A0A 80                    2830 	.db #0x80	; 128
      000A0B 10                    2831 	.db #0x10	; 16
      000A0C 80                    2832 	.db #0x80	; 128
      000A0D 20                    2833 	.db #0x20	; 32
      000A0E 00                    2834 	.db #0x00	; 0
      000A0F 00                    2835 	.db #0x00	; 0
      000A10 00                    2836 	.db #0x00	; 0
      000A11 00                    2837 	.db #0x00	; 0
      000A12 00                    2838 	.db #0x00	; 0
      000A13 00                    2839 	.db #0x00	; 0
      000A14 00                    2840 	.db #0x00	; 0
      000A15 00                    2841 	.db #0x00	; 0
      000A16 00                    2842 	.db #0x00	; 0
      000A17 00                    2843 	.db #0x00	; 0
      000A18 00                    2844 	.db #0x00	; 0
      000A19 00                    2845 	.db #0x00	; 0
      000A1A 00                    2846 	.db #0x00	; 0
      000A1B 00                    2847 	.db #0x00	; 0
      000A1C 00                    2848 	.db #0x00	; 0
      000A1D 00                    2849 	.db #0x00	; 0
      000A1E 00                    2850 	.db #0x00	; 0
      000A1F 00                    2851 	.db #0x00	; 0
      000A20 00                    2852 	.db #0x00	; 0
      000A21 00                    2853 	.db #0x00	; 0
      000A22 00                    2854 	.db #0x00	; 0
      000A23 00                    2855 	.db #0x00	; 0
      000A24 00                    2856 	.db #0x00	; 0
      000A25 00                    2857 	.db #0x00	; 0
      000A26 00                    2858 	.db #0x00	; 0
      000A27 00                    2859 	.db #0x00	; 0
      000A28                       2860 _sprite_block_small_1:
      000A28 FF                    2861 	.db #0xff	; 255
      000A29 FF                    2862 	.db #0xff	; 255
      000A2A FF                    2863 	.db #0xff	; 255
      000A2B FF                    2864 	.db #0xff	; 255
      000A2C FF                    2865 	.db #0xff	; 255
      000A2D FF                    2866 	.db #0xff	; 255
      000A2E FF                    2867 	.db #0xff	; 255
      000A2F 7E                    2868 	.db #0x7e	; 126
      000A30 00                    2869 	.db #0x00	; 0
      000A31 00                    2870 	.db #0x00	; 0
      000A32 00                    2871 	.db #0x00	; 0
      000A33 00                    2872 	.db #0x00	; 0
      000A34 00                    2873 	.db #0x00	; 0
      000A35 00                    2874 	.db #0x00	; 0
      000A36 00                    2875 	.db #0x00	; 0
      000A37 00                    2876 	.db #0x00	; 0
      000A38 00                    2877 	.db #0x00	; 0
      000A39 00                    2878 	.db #0x00	; 0
      000A3A 00                    2879 	.db #0x00	; 0
      000A3B 00                    2880 	.db #0x00	; 0
      000A3C 00                    2881 	.db #0x00	; 0
      000A3D 00                    2882 	.db #0x00	; 0
      000A3E 00                    2883 	.db #0x00	; 0
      000A3F 00                    2884 	.db #0x00	; 0
      000A40 00                    2885 	.db #0x00	; 0
      000A41 00                    2886 	.db #0x00	; 0
      000A42 00                    2887 	.db #0x00	; 0
      000A43 00                    2888 	.db #0x00	; 0
      000A44 00                    2889 	.db #0x00	; 0
      000A45 00                    2890 	.db #0x00	; 0
      000A46 00                    2891 	.db #0x00	; 0
      000A47 00                    2892 	.db #0x00	; 0
                                   2893 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   2894 ;	---------------------------------
                                   2895 ; Function HideArrowSprite
                                   2896 ; ---------------------------------
      000A48                       2897 _HideArrowSprite::
                                   2898 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000A48 3E C0            [ 7] 2899 	ld	a, #0xc0
      000A4A F5               [11] 2900 	push	af
      000A4B 33               [ 6] 2901 	inc	sp
      000A4C 21 00 1B         [10] 2902 	ld	hl, #0x1b00
      000A4F E5               [11] 2903 	push	hl
      000A50 CDr00r00         [17] 2904 	call	_WRTVRM
      000A53 F1               [10] 2905 	pop	af
      000A54 33               [ 6] 2906 	inc	sp
                                   2907 ;src\/Graphics\SpritesLogic.h:36: }
      000A55 C9               [10] 2908 	ret
                                   2909 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   2910 ;	---------------------------------
                                   2911 ; Function DrawHitSprite
                                   2912 ; ---------------------------------
      000A56                       2913 _DrawHitSprite::
      000A56 DD E5            [15] 2914 	push	ix
      000A58 DD 21 00 00      [14] 2915 	ld	ix,#0
      000A5C DD 39            [15] 2916 	add	ix,sp
      000A5E 21 EC FF         [10] 2917 	ld	hl, #-20
      000A61 39               [11] 2918 	add	hl, sp
      000A62 F9               [ 6] 2919 	ld	sp, hl
                                   2920 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000A63 21 00 00         [10] 2921 	ld	hl, #0
      000A66 39               [11] 2922 	add	hl, sp
      000A67 EB               [ 4] 2923 	ex	de, hl
      000A68 3E 0F            [ 7] 2924 	ld	a, #0x0f
      000A6A 12               [ 7] 2925 	ld	(de), a
      000A6B 6B               [ 4] 2926 	ld	l, e
      000A6C 62               [ 4] 2927 	ld	h, d
      000A6D 23               [ 6] 2928 	inc	hl
      000A6E 36 0E            [10] 2929 	ld	(hl), #0x0e
      000A70 6B               [ 4] 2930 	ld	l, e
      000A71 62               [ 4] 2931 	ld	h, d
      000A72 23               [ 6] 2932 	inc	hl
      000A73 23               [ 6] 2933 	inc	hl
      000A74 36 09            [10] 2934 	ld	(hl), #0x09
      000A76 6B               [ 4] 2935 	ld	l, e
      000A77 62               [ 4] 2936 	ld	h, d
      000A78 23               [ 6] 2937 	inc	hl
      000A79 23               [ 6] 2938 	inc	hl
      000A7A 23               [ 6] 2939 	inc	hl
      000A7B 36 06            [10] 2940 	ld	(hl), #0x06
      000A7D 21 04 00         [10] 2941 	ld	hl, #0x0004
      000A80 19               [11] 2942 	add	hl, de
      000A81 36 06            [10] 2943 	ld	(hl), #0x06
      000A83 21 05 00         [10] 2944 	ld	hl, #0x0005
      000A86 19               [11] 2945 	add	hl, de
      000A87 36 09            [10] 2946 	ld	(hl), #0x09
      000A89 21 06 00         [10] 2947 	ld	hl, #0x0006
      000A8C 19               [11] 2948 	add	hl, de
      000A8D 36 0E            [10] 2949 	ld	(hl), #0x0e
      000A8F 21 07 00         [10] 2950 	ld	hl, #0x0007
      000A92 19               [11] 2951 	add	hl, de
      000A93 36 0F            [10] 2952 	ld	(hl), #0x0f
                                   2953 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000A95 21 08 00         [10] 2954 	ld	hl, #8
      000A98 39               [11] 2955 	add	hl, sp
      000A99 4D               [ 4] 2956 	ld	c, l
      000A9A 44               [ 4] 2957 	ld	b, h
      000A9B 36 0F            [10] 2958 	ld	(hl), #0x0f
      000A9D 69               [ 4] 2959 	ld	l, c
      000A9E 60               [ 4] 2960 	ld	h, b
      000A9F 23               [ 6] 2961 	inc	hl
      000AA0 36 0E            [10] 2962 	ld	(hl), #0x0e
      000AA2 69               [ 4] 2963 	ld	l, c
      000AA3 60               [ 4] 2964 	ld	h, b
      000AA4 23               [ 6] 2965 	inc	hl
      000AA5 23               [ 6] 2966 	inc	hl
      000AA6 36 03            [10] 2967 	ld	(hl), #0x03
      000AA8 69               [ 4] 2968 	ld	l, c
      000AA9 60               [ 4] 2969 	ld	h, b
      000AAA 23               [ 6] 2970 	inc	hl
      000AAB 23               [ 6] 2971 	inc	hl
      000AAC 23               [ 6] 2972 	inc	hl
      000AAD 36 0C            [10] 2973 	ld	(hl), #0x0c
      000AAF 21 04 00         [10] 2974 	ld	hl, #0x0004
      000AB2 09               [11] 2975 	add	hl, bc
      000AB3 36 0C            [10] 2976 	ld	(hl), #0x0c
      000AB5 21 05 00         [10] 2977 	ld	hl, #0x0005
      000AB8 09               [11] 2978 	add	hl, bc
      000AB9 36 03            [10] 2979 	ld	(hl), #0x03
      000ABB 21 06 00         [10] 2980 	ld	hl, #0x0006
      000ABE 09               [11] 2981 	add	hl, bc
      000ABF 36 0E            [10] 2982 	ld	(hl), #0x0e
      000AC1 21 07 00         [10] 2983 	ld	hl, #0x0007
      000AC4 09               [11] 2984 	add	hl, bc
      000AC5 36 0F            [10] 2985 	ld	(hl), #0x0f
                                   2986 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000AC7 3A 9E FC         [13] 2987 	ld	a,(#_JIFFY + 0)
      000ACA E6 07            [ 7] 2988 	and	a, #0x07
                                   2989 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000ACC 6F               [ 4] 2990 	ld	l, a
      000ACD 83               [ 4] 2991 	add	a,e
      000ACE 5F               [ 4] 2992 	ld	e, a
      000ACF 30 01            [12] 2993 	jr	NC, 00124$
      000AD1 14               [ 4] 2994 	inc	d
      000AD2                       2995 00124$:
      000AD2 1A               [ 7] 2996 	ld	a, (de)
      000AD3 DD 77 FC         [19] 2997 	ld	-4 (ix), a
                                   2998 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000AD6 26 00            [ 7] 2999 	ld	h, #0x00
      000AD8 09               [11] 3000 	add	hl, bc
      000AD9 7E               [ 7] 3001 	ld	a, (hl)
      000ADA DD 77 FD         [19] 3002 	ld	-3 (ix), a
                                   3003 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000ADD 3E 01            [ 7] 3004 	ld	a, #0x01
      000ADF DD 96 05         [19] 3005 	sub	a, 5 (ix)
      000AE2 3E 00            [ 7] 3006 	ld	a, #0x00
      000AE4 17               [ 4] 3007 	rla
      000AE5 DD 77 FE         [19] 3008 	ld	-2 (ix), a
                                   3009 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000AE8 DD 7E 08         [19] 3010 	ld	a, 8 (ix)
      000AEB B7               [ 4] 3011 	or	a, a
      000AEC CArB7r0B         [10] 3012 	jp	Z, 00104$
                                   3013 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000AEF DD 4E 06         [19] 3014 	ld	c, 6 (ix)
      000AF2 79               [ 4] 3015 	ld	a, c
      000AF3 C6 F8            [ 7] 3016 	add	a, #0xf8
      000AF5 DD 77 FF         [19] 3017 	ld	-1 (ix), a
      000AF8 C5               [11] 3018 	push	bc
      000AF9 F5               [11] 3019 	push	af
      000AFA 33               [ 6] 3020 	inc	sp
      000AFB 21 05 1B         [10] 3021 	ld	hl, #0x1b05
      000AFE E5               [11] 3022 	push	hl
      000AFF CDr00r00         [17] 3023 	call	_WRTVRM
      000B02 F1               [10] 3024 	pop	af
      000B03 33               [ 6] 3025 	inc	sp
      000B04 C1               [10] 3026 	pop	bc
                                   3027 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000B05 DD 7E 04         [19] 3028 	ld	a, 4 (ix)
      000B08 C6 FD            [ 7] 3029 	add	a, #0xfd
      000B0A 87               [ 4] 3030 	add	a, a
      000B0B 87               [ 4] 3031 	add	a, a
      000B0C C6 18            [ 7] 3032 	add	a, #0x18
      000B0E C5               [11] 3033 	push	bc
      000B0F F5               [11] 3034 	push	af
      000B10 33               [ 6] 3035 	inc	sp
      000B11 21 06 1B         [10] 3036 	ld	hl, #0x1b06
      000B14 E5               [11] 3037 	push	hl
      000B15 CDr00r00         [17] 3038 	call	_WRTVRM
      000B18 F1               [10] 3039 	pop	af
      000B19 33               [ 6] 3040 	inc	sp
      000B1A C1               [10] 3041 	pop	bc
                                   3042 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000B1B 79               [ 4] 3043 	ld	a, c
      000B1C C6 08            [ 7] 3044 	add	a, #0x08
      000B1E 47               [ 4] 3045 	ld	b, a
      000B1F C5               [11] 3046 	push	bc
      000B20 C5               [11] 3047 	push	bc
      000B21 33               [ 6] 3048 	inc	sp
      000B22 21 09 1B         [10] 3049 	ld	hl, #0x1b09
      000B25 E5               [11] 3050 	push	hl
      000B26 CDr00r00         [17] 3051 	call	_WRTVRM
      000B29 F1               [10] 3052 	pop	af
      000B2A 33               [ 6] 3053 	inc	sp
      000B2B 3E 04            [ 7] 3054 	ld	a, #0x04
      000B2D F5               [11] 3055 	push	af
      000B2E 33               [ 6] 3056 	inc	sp
      000B2F 21 0A 1B         [10] 3057 	ld	hl, #0x1b0a
      000B32 E5               [11] 3058 	push	hl
      000B33 CDr00r00         [17] 3059 	call	_WRTVRM
      000B36 F1               [10] 3060 	pop	af
      000B37 33               [ 6] 3061 	inc	sp
      000B38 C1               [10] 3062 	pop	bc
                                   3063 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000B39 79               [ 4] 3064 	ld	a, c
      000B3A C6 18            [ 7] 3065 	add	a, #0x18
      000B3C 4F               [ 4] 3066 	ld	c, a
      000B3D C5               [11] 3067 	push	bc
      000B3E 79               [ 4] 3068 	ld	a, c
      000B3F F5               [11] 3069 	push	af
      000B40 33               [ 6] 3070 	inc	sp
      000B41 21 0D 1B         [10] 3071 	ld	hl, #0x1b0d
      000B44 E5               [11] 3072 	push	hl
      000B45 CDr00r00         [17] 3073 	call	_WRTVRM
      000B48 F1               [10] 3074 	pop	af
      000B49 33               [ 6] 3075 	inc	sp
      000B4A 3E 08            [ 7] 3076 	ld	a, #0x08
      000B4C F5               [11] 3077 	push	af
      000B4D 33               [ 6] 3078 	inc	sp
      000B4E 21 0E 1B         [10] 3079 	ld	hl, #0x1b0e
      000B51 E5               [11] 3080 	push	hl
      000B52 CDr00r00         [17] 3081 	call	_WRTVRM
      000B55 F1               [10] 3082 	pop	af
      000B56 33               [ 6] 3083 	inc	sp
      000B57 C1               [10] 3084 	pop	bc
                                   3085 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B58 DD 7E FE         [19] 3086 	ld	a, -2 (ix)
      000B5B B7               [ 4] 3087 	or	a, a
      000B5C 28 59            [12] 3088 	jr	Z, 00104$
                                   3089 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000B5E C5               [11] 3090 	push	bc
      000B5F DD 7E FF         [19] 3091 	ld	a, -1 (ix)
      000B62 F5               [11] 3092 	push	af
      000B63 33               [ 6] 3093 	inc	sp
      000B64 21 11 1B         [10] 3094 	ld	hl, #0x1b11
      000B67 E5               [11] 3095 	push	hl
      000B68 CDr00r00         [17] 3096 	call	_WRTVRM
      000B6B F1               [10] 3097 	pop	af
      000B6C 33               [ 6] 3098 	inc	sp
      000B6D C1               [10] 3099 	pop	bc
                                   3100 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000B6E DD 7E 05         [19] 3101 	ld	a, 5 (ix)
      000B71 3D               [ 4] 3102 	dec	a
      000B72 3D               [ 4] 3103 	dec	a
      000B73 87               [ 4] 3104 	add	a, a
      000B74 87               [ 4] 3105 	add	a, a
      000B75 C6 14            [ 7] 3106 	add	a, #0x14
      000B77 C5               [11] 3107 	push	bc
      000B78 F5               [11] 3108 	push	af
      000B79 33               [ 6] 3109 	inc	sp
      000B7A 21 12 1B         [10] 3110 	ld	hl, #0x1b12
      000B7D E5               [11] 3111 	push	hl
      000B7E CDr00r00         [17] 3112 	call	_WRTVRM
      000B81 F1               [10] 3113 	pop	af
      000B82 33               [ 6] 3114 	inc	sp
      000B83 C1               [10] 3115 	pop	bc
                                   3116 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000B84 C5               [11] 3117 	push	bc
      000B85 C5               [11] 3118 	push	bc
      000B86 33               [ 6] 3119 	inc	sp
      000B87 21 15 1B         [10] 3120 	ld	hl, #0x1b15
      000B8A E5               [11] 3121 	push	hl
      000B8B CDr00r00         [17] 3122 	call	_WRTVRM
      000B8E F1               [10] 3123 	pop	af
      000B8F 33               [ 6] 3124 	inc	sp
      000B90 3E 0C            [ 7] 3125 	ld	a, #0x0c
      000B92 F5               [11] 3126 	push	af
      000B93 33               [ 6] 3127 	inc	sp
      000B94 21 16 1B         [10] 3128 	ld	hl, #0x1b16
      000B97 E5               [11] 3129 	push	hl
      000B98 CDr00r00         [17] 3130 	call	_WRTVRM
      000B9B F1               [10] 3131 	pop	af
      000B9C 33               [ 6] 3132 	inc	sp
      000B9D C1               [10] 3133 	pop	bc
                                   3134 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000B9E 79               [ 4] 3135 	ld	a, c
      000B9F F5               [11] 3136 	push	af
      000BA0 33               [ 6] 3137 	inc	sp
      000BA1 21 19 1B         [10] 3138 	ld	hl, #0x1b19
      000BA4 E5               [11] 3139 	push	hl
      000BA5 CDr00r00         [17] 3140 	call	_WRTVRM
      000BA8 F1               [10] 3141 	pop	af
      000BA9 33               [ 6] 3142 	inc	sp
                                   3143 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000BAA 3E 10            [ 7] 3144 	ld	a, #0x10
      000BAC F5               [11] 3145 	push	af
      000BAD 33               [ 6] 3146 	inc	sp
      000BAE 21 1A 1B         [10] 3147 	ld	hl, #0x1b1a
      000BB1 E5               [11] 3148 	push	hl
      000BB2 CDr00r00         [17] 3149 	call	_WRTVRM
      000BB5 F1               [10] 3150 	pop	af
      000BB6 33               [ 6] 3151 	inc	sp
      000BB7                       3152 00104$:
                                   3153 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000BB7 DD 7E 07         [19] 3154 	ld	a, 7 (ix)
      000BBA F5               [11] 3155 	push	af
      000BBB 33               [ 6] 3156 	inc	sp
      000BBC 21 04 1B         [10] 3157 	ld	hl, #0x1b04
      000BBF E5               [11] 3158 	push	hl
      000BC0 CDr00r00         [17] 3159 	call	_WRTVRM
      000BC3 F1               [10] 3160 	pop	af
      000BC4 33               [ 6] 3161 	inc	sp
                                   3162 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000BC5 DD 7E FC         [19] 3163 	ld	a, -4 (ix)
      000BC8 F5               [11] 3164 	push	af
      000BC9 33               [ 6] 3165 	inc	sp
      000BCA 21 07 1B         [10] 3166 	ld	hl, #0x1b07
      000BCD E5               [11] 3167 	push	hl
      000BCE CDr00r00         [17] 3168 	call	_WRTVRM
      000BD1 F1               [10] 3169 	pop	af
      000BD2 33               [ 6] 3170 	inc	sp
                                   3171 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000BD3 DD 7E 07         [19] 3172 	ld	a, 7 (ix)
      000BD6 F5               [11] 3173 	push	af
      000BD7 33               [ 6] 3174 	inc	sp
      000BD8 21 08 1B         [10] 3175 	ld	hl, #0x1b08
      000BDB E5               [11] 3176 	push	hl
      000BDC CDr00r00         [17] 3177 	call	_WRTVRM
      000BDF F1               [10] 3178 	pop	af
      000BE0 33               [ 6] 3179 	inc	sp
                                   3180 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000BE1 DD 7E FC         [19] 3181 	ld	a, -4 (ix)
      000BE4 F5               [11] 3182 	push	af
      000BE5 33               [ 6] 3183 	inc	sp
      000BE6 21 0B 1B         [10] 3184 	ld	hl, #0x1b0b
      000BE9 E5               [11] 3185 	push	hl
      000BEA CDr00r00         [17] 3186 	call	_WRTVRM
      000BED F1               [10] 3187 	pop	af
      000BEE 33               [ 6] 3188 	inc	sp
                                   3189 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000BEF DD 7E 07         [19] 3190 	ld	a, 7 (ix)
      000BF2 F5               [11] 3191 	push	af
      000BF3 33               [ 6] 3192 	inc	sp
      000BF4 21 0C 1B         [10] 3193 	ld	hl, #0x1b0c
      000BF7 E5               [11] 3194 	push	hl
      000BF8 CDr00r00         [17] 3195 	call	_WRTVRM
      000BFB F1               [10] 3196 	pop	af
      000BFC 33               [ 6] 3197 	inc	sp
                                   3198 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000BFD DD 7E FC         [19] 3199 	ld	a, -4 (ix)
      000C00 F5               [11] 3200 	push	af
      000C01 33               [ 6] 3201 	inc	sp
      000C02 21 0F 1B         [10] 3202 	ld	hl, #0x1b0f
      000C05 E5               [11] 3203 	push	hl
      000C06 CDr00r00         [17] 3204 	call	_WRTVRM
      000C09 F1               [10] 3205 	pop	af
      000C0A 33               [ 6] 3206 	inc	sp
                                   3207 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000C0B DD 7E FE         [19] 3208 	ld	a, -2 (ix)
      000C0E B7               [ 4] 3209 	or	a, a
      000C0F 28 52            [12] 3210 	jr	Z, 00107$
                                   3211 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000C11 DD 7E 07         [19] 3212 	ld	a, 7 (ix)
      000C14 C6 10            [ 7] 3213 	add	a, #0x10
      000C16 47               [ 4] 3214 	ld	b, a
      000C17 C5               [11] 3215 	push	bc
      000C18 C5               [11] 3216 	push	bc
      000C19 33               [ 6] 3217 	inc	sp
      000C1A 21 10 1B         [10] 3218 	ld	hl, #0x1b10
      000C1D E5               [11] 3219 	push	hl
      000C1E CDr00r00         [17] 3220 	call	_WRTVRM
      000C21 F1               [10] 3221 	pop	af
      000C22 33               [ 6] 3222 	inc	sp
      000C23 DD 7E FD         [19] 3223 	ld	a, -3 (ix)
      000C26 F5               [11] 3224 	push	af
      000C27 33               [ 6] 3225 	inc	sp
      000C28 21 13 1B         [10] 3226 	ld	hl, #0x1b13
      000C2B E5               [11] 3227 	push	hl
      000C2C CDr00r00         [17] 3228 	call	_WRTVRM
      000C2F F1               [10] 3229 	pop	af
      000C30 33               [ 6] 3230 	inc	sp
      000C31 C1               [10] 3231 	pop	bc
                                   3232 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000C32 C5               [11] 3233 	push	bc
      000C33 C5               [11] 3234 	push	bc
      000C34 33               [ 6] 3235 	inc	sp
      000C35 21 14 1B         [10] 3236 	ld	hl, #0x1b14
      000C38 E5               [11] 3237 	push	hl
      000C39 CDr00r00         [17] 3238 	call	_WRTVRM
      000C3C F1               [10] 3239 	pop	af
      000C3D 33               [ 6] 3240 	inc	sp
      000C3E DD 7E FD         [19] 3241 	ld	a, -3 (ix)
      000C41 F5               [11] 3242 	push	af
      000C42 33               [ 6] 3243 	inc	sp
      000C43 21 17 1B         [10] 3244 	ld	hl, #0x1b17
      000C46 E5               [11] 3245 	push	hl
      000C47 CDr00r00         [17] 3246 	call	_WRTVRM
      000C4A F1               [10] 3247 	pop	af
      000C4B 33               [ 6] 3248 	inc	sp
      000C4C 33               [ 6] 3249 	inc	sp
      000C4D 21 18 1B         [10] 3250 	ld	hl, #0x1b18
      000C50 E5               [11] 3251 	push	hl
      000C51 CDr00r00         [17] 3252 	call	_WRTVRM
      000C54 F1               [10] 3253 	pop	af
      000C55 33               [ 6] 3254 	inc	sp
                                   3255 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000C56 DD 7E FD         [19] 3256 	ld	a, -3 (ix)
      000C59 F5               [11] 3257 	push	af
      000C5A 33               [ 6] 3258 	inc	sp
      000C5B 21 1B 1B         [10] 3259 	ld	hl, #0x1b1b
      000C5E E5               [11] 3260 	push	hl
      000C5F CDr00r00         [17] 3261 	call	_WRTVRM
      000C62 F1               [10] 3262 	pop	af
      000C63                       3263 00107$:
                                   3264 ;src\/Graphics\SpritesLogic.h:119: }
      000C63 DD F9            [10] 3265 	ld	sp, ix
      000C65 DD E1            [14] 3266 	pop	ix
      000C67 C9               [10] 3267 	ret
                                   3268 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3269 ;	---------------------------------
                                   3270 ; Function HideHitSprite
                                   3271 ; ---------------------------------
      000C68                       3272 _HideHitSprite::
                                   3273 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000C68 3E C0            [ 7] 3274 	ld	a, #0xc0
      000C6A F5               [11] 3275 	push	af
      000C6B 33               [ 6] 3276 	inc	sp
      000C6C 21 04 1B         [10] 3277 	ld	hl, #0x1b04
      000C6F E5               [11] 3278 	push	hl
      000C70 CDr00r00         [17] 3279 	call	_WRTVRM
      000C73 F1               [10] 3280 	pop	af
      000C74 33               [ 6] 3281 	inc	sp
                                   3282 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000C75 3E C0            [ 7] 3283 	ld	a, #0xc0
      000C77 F5               [11] 3284 	push	af
      000C78 33               [ 6] 3285 	inc	sp
      000C79 21 08 1B         [10] 3286 	ld	hl, #0x1b08
      000C7C E5               [11] 3287 	push	hl
      000C7D CDr00r00         [17] 3288 	call	_WRTVRM
      000C80 F1               [10] 3289 	pop	af
      000C81 33               [ 6] 3290 	inc	sp
                                   3291 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000C82 3E C0            [ 7] 3292 	ld	a, #0xc0
      000C84 F5               [11] 3293 	push	af
      000C85 33               [ 6] 3294 	inc	sp
      000C86 21 0C 1B         [10] 3295 	ld	hl, #0x1b0c
      000C89 E5               [11] 3296 	push	hl
      000C8A CDr00r00         [17] 3297 	call	_WRTVRM
      000C8D F1               [10] 3298 	pop	af
      000C8E 33               [ 6] 3299 	inc	sp
                                   3300 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000C8F 3E C0            [ 7] 3301 	ld	a, #0xc0
      000C91 F5               [11] 3302 	push	af
      000C92 33               [ 6] 3303 	inc	sp
      000C93 21 10 1B         [10] 3304 	ld	hl, #0x1b10
      000C96 E5               [11] 3305 	push	hl
      000C97 CDr00r00         [17] 3306 	call	_WRTVRM
      000C9A F1               [10] 3307 	pop	af
      000C9B 33               [ 6] 3308 	inc	sp
                                   3309 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000C9C 3E C0            [ 7] 3310 	ld	a, #0xc0
      000C9E F5               [11] 3311 	push	af
      000C9F 33               [ 6] 3312 	inc	sp
      000CA0 21 14 1B         [10] 3313 	ld	hl, #0x1b14
      000CA3 E5               [11] 3314 	push	hl
      000CA4 CDr00r00         [17] 3315 	call	_WRTVRM
      000CA7 F1               [10] 3316 	pop	af
      000CA8 33               [ 6] 3317 	inc	sp
                                   3318 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000CA9 3E C0            [ 7] 3319 	ld	a, #0xc0
      000CAB F5               [11] 3320 	push	af
      000CAC 33               [ 6] 3321 	inc	sp
      000CAD 21 18 1B         [10] 3322 	ld	hl, #0x1b18
      000CB0 E5               [11] 3323 	push	hl
      000CB1 CDr00r00         [17] 3324 	call	_WRTVRM
      000CB4 F1               [10] 3325 	pop	af
      000CB5 33               [ 6] 3326 	inc	sp
                                   3327 ;src\/Graphics\SpritesLogic.h:131: }
      000CB6 C9               [10] 3328 	ret
                                   3329 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3330 ;	---------------------------------
                                   3331 ; Function HideExplosionSprite
                                   3332 ; ---------------------------------
      000CB7                       3333 _HideExplosionSprite::
                                   3334 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000CB7 3E C0            [ 7] 3335 	ld	a, #0xc0
      000CB9 F5               [11] 3336 	push	af
      000CBA 33               [ 6] 3337 	inc	sp
      000CBB 21 1C 1B         [10] 3338 	ld	hl, #0x1b1c
      000CBE E5               [11] 3339 	push	hl
      000CBF CDr00r00         [17] 3340 	call	_WRTVRM
      000CC2 F1               [10] 3341 	pop	af
      000CC3 33               [ 6] 3342 	inc	sp
                                   3343 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000CC4 3E C0            [ 7] 3344 	ld	a, #0xc0
      000CC6 F5               [11] 3345 	push	af
      000CC7 33               [ 6] 3346 	inc	sp
      000CC8 21 20 1B         [10] 3347 	ld	hl, #0x1b20
      000CCB E5               [11] 3348 	push	hl
      000CCC CDr00r00         [17] 3349 	call	_WRTVRM
      000CCF F1               [10] 3350 	pop	af
      000CD0 33               [ 6] 3351 	inc	sp
                                   3352 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000CD1 3E C0            [ 7] 3353 	ld	a, #0xc0
      000CD3 F5               [11] 3354 	push	af
      000CD4 33               [ 6] 3355 	inc	sp
      000CD5 21 24 1B         [10] 3356 	ld	hl, #0x1b24
      000CD8 E5               [11] 3357 	push	hl
      000CD9 CDr00r00         [17] 3358 	call	_WRTVRM
      000CDC F1               [10] 3359 	pop	af
      000CDD 33               [ 6] 3360 	inc	sp
                                   3361 ;src\/Graphics\SpritesLogic.h:137: }
      000CDE C9               [10] 3362 	ret
                                   3363 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3364 ;	---------------------------------
                                   3365 ; Function DrawExplosionSprite
                                   3366 ; ---------------------------------
      000CDF                       3367 _DrawExplosionSprite::
      000CDF 3B               [ 6] 3368 	dec	sp
                                   3369 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000CE0 FD 21 05 00      [14] 3370 	ld	iy, #5
      000CE4 FD 39            [15] 3371 	add	iy, sp
      000CE6 FD 6E 00         [19] 3372 	ld	l, 0 (iy)
      000CE9 CB 3D            [ 8] 3373 	srl	l
      000CEB CB 3D            [ 8] 3374 	srl	l
                                   3375 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000CED 3E 07            [ 7] 3376 	ld	a, #0x07
      000CEF 95               [ 4] 3377 	sub	a, l
      000CF0 30 07            [12] 3378 	jr	NC, 00102$
                                   3379 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000CF2 33               [ 6] 3380 	inc	sp
      000CF3 C3rB7r0C         [10] 3381 	jp	_HideExplosionSprite
      000CF6 C3rC5r0D         [10] 3382 	jp	00104$
      000CF9                       3383 00102$:
                                   3384 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000CF9 29               [11] 3385 	add	hl, hl
      000CFA 29               [11] 3386 	add	hl, hl
                                   3387 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000CFB FD 21 04 00      [14] 3388 	ld	iy, #4
      000CFF FD 39            [15] 3389 	add	iy, sp
      000D01 FD 7E 00         [19] 3390 	ld	a, 0 (iy)
      000D04 C6 F0            [ 7] 3391 	add	a, #0xf0
      000D06 67               [ 4] 3392 	ld	h, a
      000D07 E5               [11] 3393 	push	hl
      000D08 E5               [11] 3394 	push	hl
      000D09 33               [ 6] 3395 	inc	sp
      000D0A 11 1C 1B         [10] 3396 	ld	de, #0x1b1c
      000D0D D5               [11] 3397 	push	de
      000D0E CDr00r00         [17] 3398 	call	_WRTVRM
      000D11 F1               [10] 3399 	pop	af
      000D12 33               [ 6] 3400 	inc	sp
      000D13 21 05 00         [10] 3401 	ld	hl, #5
      000D16 39               [11] 3402 	add	hl, sp
      000D17 7E               [ 7] 3403 	ld	a, (hl)
      000D18 F5               [11] 3404 	push	af
      000D19 33               [ 6] 3405 	inc	sp
      000D1A 11 1D 1B         [10] 3406 	ld	de, #0x1b1d
      000D1D D5               [11] 3407 	push	de
      000D1E CDr00r00         [17] 3408 	call	_WRTVRM
      000D21 F1               [10] 3409 	pop	af
      000D22 33               [ 6] 3410 	inc	sp
      000D23 E1               [10] 3411 	pop	hl
                                   3412 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000D24 7D               [ 4] 3413 	ld	a, l
      000D25 C6 2C            [ 7] 3414 	add	a, #0x2c
      000D27 FD 21 00 00      [14] 3415 	ld	iy, #0
      000D2B FD 39            [15] 3416 	add	iy, sp
      000D2D FD 77 00         [19] 3417 	ld	0 (iy), a
      000D30 E5               [11] 3418 	push	hl
      000D31 F5               [11] 3419 	push	af
      000D32 33               [ 6] 3420 	inc	sp
      000D33 11 1E 1B         [10] 3421 	ld	de, #0x1b1e
      000D36 D5               [11] 3422 	push	de
      000D37 CDr00r00         [17] 3423 	call	_WRTVRM
      000D3A F1               [10] 3424 	pop	af
      000D3B 33               [ 6] 3425 	inc	sp
      000D3C 3E 0F            [ 7] 3426 	ld	a, #0x0f
      000D3E F5               [11] 3427 	push	af
      000D3F 33               [ 6] 3428 	inc	sp
      000D40 11 1F 1B         [10] 3429 	ld	de, #0x1b1f
      000D43 D5               [11] 3430 	push	de
      000D44 CDr00r00         [17] 3431 	call	_WRTVRM
      000D47 F1               [10] 3432 	pop	af
      000D48 33               [ 6] 3433 	inc	sp
      000D49 E1               [10] 3434 	pop	hl
                                   3435 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000D4A E5               [11] 3436 	push	hl
      000D4B E5               [11] 3437 	push	hl
      000D4C 33               [ 6] 3438 	inc	sp
      000D4D 11 20 1B         [10] 3439 	ld	de, #0x1b20
      000D50 D5               [11] 3440 	push	de
      000D51 CDr00r00         [17] 3441 	call	_WRTVRM
      000D54 F1               [10] 3442 	pop	af
      000D55 33               [ 6] 3443 	inc	sp
      000D56 E1               [10] 3444 	pop	hl
                                   3445 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000D57 FD 21 03 00      [14] 3446 	ld	iy, #3
      000D5B FD 39            [15] 3447 	add	iy, sp
      000D5D FD 6E 00         [19] 3448 	ld	l, 0 (iy)
      000D60 7D               [ 4] 3449 	ld	a, l
      000D61 C6 10            [ 7] 3450 	add	a, #0x10
      000D63 E5               [11] 3451 	push	hl
      000D64 F5               [11] 3452 	push	af
      000D65 33               [ 6] 3453 	inc	sp
      000D66 11 21 1B         [10] 3454 	ld	de, #0x1b21
      000D69 D5               [11] 3455 	push	de
      000D6A CDr00r00         [17] 3456 	call	_WRTVRM
      000D6D F1               [10] 3457 	pop	af
      000D6E 33               [ 6] 3458 	inc	sp
      000D6F 21 02 00         [10] 3459 	ld	hl, #2
      000D72 39               [11] 3460 	add	hl, sp
      000D73 7E               [ 7] 3461 	ld	a, (hl)
      000D74 F5               [11] 3462 	push	af
      000D75 33               [ 6] 3463 	inc	sp
      000D76 11 22 1B         [10] 3464 	ld	de, #0x1b22
      000D79 D5               [11] 3465 	push	de
      000D7A CDr00r00         [17] 3466 	call	_WRTVRM
      000D7D F1               [10] 3467 	pop	af
      000D7E 33               [ 6] 3468 	inc	sp
      000D7F 3E 0A            [ 7] 3469 	ld	a, #0x0a
      000D81 F5               [11] 3470 	push	af
      000D82 33               [ 6] 3471 	inc	sp
      000D83 11 23 1B         [10] 3472 	ld	de, #0x1b23
      000D86 D5               [11] 3473 	push	de
      000D87 CDr00r00         [17] 3474 	call	_WRTVRM
      000D8A F1               [10] 3475 	pop	af
      000D8B 33               [ 6] 3476 	inc	sp
      000D8C E1               [10] 3477 	pop	hl
                                   3478 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000D8D E5               [11] 3479 	push	hl
      000D8E E5               [11] 3480 	push	hl
      000D8F 33               [ 6] 3481 	inc	sp
      000D90 11 24 1B         [10] 3482 	ld	de, #0x1b24
      000D93 D5               [11] 3483 	push	de
      000D94 CDr00r00         [17] 3484 	call	_WRTVRM
      000D97 F1               [10] 3485 	pop	af
      000D98 33               [ 6] 3486 	inc	sp
      000D99 E1               [10] 3487 	pop	hl
                                   3488 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000D9A 7D               [ 4] 3489 	ld	a, l
      000D9B C6 20            [ 7] 3490 	add	a, #0x20
      000D9D F5               [11] 3491 	push	af
      000D9E 33               [ 6] 3492 	inc	sp
      000D9F 21 25 1B         [10] 3493 	ld	hl, #0x1b25
      000DA2 E5               [11] 3494 	push	hl
      000DA3 CDr00r00         [17] 3495 	call	_WRTVRM
      000DA6 F1               [10] 3496 	pop	af
      000DA7 33               [ 6] 3497 	inc	sp
                                   3498 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000DA8 21 00 00         [10] 3499 	ld	hl, #0
      000DAB 39               [11] 3500 	add	hl, sp
      000DAC 7E               [ 7] 3501 	ld	a, (hl)
      000DAD F5               [11] 3502 	push	af
      000DAE 33               [ 6] 3503 	inc	sp
      000DAF 21 26 1B         [10] 3504 	ld	hl, #0x1b26
      000DB2 E5               [11] 3505 	push	hl
      000DB3 CDr00r00         [17] 3506 	call	_WRTVRM
      000DB6 F1               [10] 3507 	pop	af
      000DB7 33               [ 6] 3508 	inc	sp
                                   3509 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000DB8 3E 03            [ 7] 3510 	ld	a, #0x03
      000DBA F5               [11] 3511 	push	af
      000DBB 33               [ 6] 3512 	inc	sp
      000DBC 21 27 1B         [10] 3513 	ld	hl, #0x1b27
      000DBF E5               [11] 3514 	push	hl
      000DC0 CDr00r00         [17] 3515 	call	_WRTVRM
      000DC3 F1               [10] 3516 	pop	af
      000DC4 33               [ 6] 3517 	inc	sp
      000DC5                       3518 00104$:
                                   3519 ;src\/Graphics\SpritesLogic.h:164: }
      000DC5 33               [ 6] 3520 	inc	sp
      000DC6 C9               [10] 3521 	ret
                                   3522 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3523 ;	---------------------------------
                                   3524 ; Function DrawChar
                                   3525 ; ---------------------------------
      000DC7                       3526 _DrawChar::
      000DC7 DD E5            [15] 3527 	push	ix
      000DC9 DD 21 00 00      [14] 3528 	ld	ix,#0
      000DCD DD 39            [15] 3529 	add	ix,sp
                                   3530 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000DCF DD 6E 06         [19] 3531 	ld	l, 6 (ix)
      000DD2 26 00            [ 7] 3532 	ld	h, #0x00
      000DD4 29               [11] 3533 	add	hl, hl
      000DD5 29               [11] 3534 	add	hl, hl
      000DD6 29               [11] 3535 	add	hl, hl
      000DD7 29               [11] 3536 	add	hl, hl
      000DD8 29               [11] 3537 	add	hl, hl
      000DD9 01 00 18         [10] 3538 	ld	bc, #0x1800
      000DDC 09               [11] 3539 	add	hl, bc
      000DDD DD 4E 05         [19] 3540 	ld	c, 5 (ix)
      000DE0 06 00            [ 7] 3541 	ld	b, #0x00
      000DE2 09               [11] 3542 	add	hl, bc
      000DE3 DD 7E 04         [19] 3543 	ld	a, 4 (ix)
      000DE6 F5               [11] 3544 	push	af
      000DE7 33               [ 6] 3545 	inc	sp
      000DE8 E5               [11] 3546 	push	hl
      000DE9 CDr00r00         [17] 3547 	call	_WRTVRM
      000DEC F1               [10] 3548 	pop	af
      000DED 33               [ 6] 3549 	inc	sp
                                   3550 ;src\/Graphics\Graphics.h:3: }
      000DEE DD E1            [14] 3551 	pop	ix
      000DF0 C9               [10] 3552 	ret
                                   3553 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3554 ;	---------------------------------
                                   3555 ; Function DrawString
                                   3556 ; ---------------------------------
      000DF1                       3557 _DrawString::
      000DF1 DD E5            [15] 3558 	push	ix
      000DF3 DD 21 00 00      [14] 3559 	ld	ix,#0
      000DF7 DD 39            [15] 3560 	add	ix,sp
                                   3561 ;src\/Graphics\Graphics.h:6: while (*str) {
      000DF9 DD 6E 06         [19] 3562 	ld	l, 6 (ix)
      000DFC DD 4E 04         [19] 3563 	ld	c, 4 (ix)
      000DFF DD 46 05         [19] 3564 	ld	b, 5 (ix)
      000E02                       3565 00101$:
      000E02 0A               [ 7] 3566 	ld	a, (bc)
      000E03 B7               [ 4] 3567 	or	a, a
      000E04 28 1A            [12] 3568 	jr	Z, 00104$
                                   3569 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000E06 55               [ 4] 3570 	ld	d, l
      000E07 2C               [ 4] 3571 	inc	l
      000E08 DD 75 06         [19] 3572 	ld	6 (ix), l
      000E0B 03               [ 6] 3573 	inc	bc
      000E0C C6 0F            [ 7] 3574 	add	a, #0x0f
      000E0E E5               [11] 3575 	push	hl
      000E0F C5               [11] 3576 	push	bc
      000E10 DD 66 07         [19] 3577 	ld	h, 7 (ix)
      000E13 6A               [ 4] 3578 	ld	l, d
      000E14 E5               [11] 3579 	push	hl
      000E15 F5               [11] 3580 	push	af
      000E16 33               [ 6] 3581 	inc	sp
      000E17 CDrC7r0D         [17] 3582 	call	_DrawChar
      000E1A F1               [10] 3583 	pop	af
      000E1B 33               [ 6] 3584 	inc	sp
      000E1C C1               [10] 3585 	pop	bc
      000E1D E1               [10] 3586 	pop	hl
      000E1E 18 E2            [12] 3587 	jr	00101$
      000E20                       3588 00104$:
                                   3589 ;src\/Graphics\Graphics.h:9: }
      000E20 DD E1            [14] 3590 	pop	ix
      000E22 C9               [10] 3591 	ret
                                   3592 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3593 ;	---------------------------------
                                   3594 ; Function DrawNumber
                                   3595 ; ---------------------------------
      000E23                       3596 _DrawNumber::
      000E23 DD E5            [15] 3597 	push	ix
      000E25 DD 21 00 00      [14] 3598 	ld	ix,#0
      000E29 DD 39            [15] 3599 	add	ix,sp
      000E2B 21 FA FF         [10] 3600 	ld	hl, #-6
      000E2E 39               [11] 3601 	add	hl, sp
      000E2F F9               [ 6] 3602 	ld	sp, hl
                                   3603 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000E30 DD 36 FA 01      [19] 3604 	ld	-6 (ix), #0x01
                                   3605 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000E34 DD 66 07         [19] 3606 	ld	h, 7 (ix)
      000E37 DD 6E 06         [19] 3607 	ld	l, 6 (ix)
      000E3A E5               [11] 3608 	push	hl
      000E3B 21rD7r0E         [10] 3609 	ld	hl, #___str_0
      000E3E E5               [11] 3610 	push	hl
      000E3F CDrF1r0D         [17] 3611 	call	_DrawString
      000E42 F1               [10] 3612 	pop	af
      000E43 F1               [10] 3613 	pop	af
                                   3614 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E44 DD 7E 06         [19] 3615 	ld	a, 6 (ix)
      000E47 DD 77 FF         [19] 3616 	ld	-1 (ix), a
      000E4A 1E 06            [ 7] 3617 	ld	e, #0x06
      000E4C                       3618 00109$:
      000E4C 7B               [ 4] 3619 	ld	a, e
      000E4D B7               [ 4] 3620 	or	a, a
      000E4E CArD2r0E         [10] 3621 	jp	Z, 00111$
                                   3622 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000E51 7B               [ 4] 3623 	ld	a, e
      000E52 3D               [ 4] 3624 	dec	a
      000E53 D5               [11] 3625 	push	de
      000E54 57               [ 4] 3626 	ld	d,a
      000E55 1E 0A            [ 7] 3627 	ld	e,#0x0a
      000E57 D5               [11] 3628 	push	de
      000E58 CDr1Dr00         [17] 3629 	call	_Power
      000E5B F1               [10] 3630 	pop	af
      000E5C D1               [10] 3631 	pop	de
      000E5D DD 75 FB         [19] 3632 	ld	-5 (ix), l
      000E60 DD 74 FC         [19] 3633 	ld	-4 (ix), h
                                   3634 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000E63 D5               [11] 3635 	push	de
      000E64 DD 6E FB         [19] 3636 	ld	l, -5 (ix)
      000E67 DD 66 FC         [19] 3637 	ld	h, -4 (ix)
      000E6A E5               [11] 3638 	push	hl
      000E6B DD 6E 04         [19] 3639 	ld	l, 4 (ix)
      000E6E DD 66 05         [19] 3640 	ld	h, 5 (ix)
      000E71 E5               [11] 3641 	push	hl
      000E72 CDr00r00         [17] 3642 	call	__divuint
      000E75 F1               [10] 3643 	pop	af
      000E76 F1               [10] 3644 	pop	af
      000E77 DD 75 FD         [19] 3645 	ld	-3 (ix), l
      000E7A DD 74 FE         [19] 3646 	ld	-2 (ix), h
      000E7D D1               [10] 3647 	pop	de
      000E7E DD 7E FA         [19] 3648 	ld	a, -6 (ix)
      000E81 B7               [ 4] 3649 	or	a, a
      000E82 28 0C            [12] 3650 	jr	Z, 00102$
      000E84 DD 7E FE         [19] 3651 	ld	a, -2 (ix)
      000E87 DD B6 FD         [19] 3652 	or	a, -3 (ix)
      000E8A 28 04            [12] 3653 	jr	Z, 00102$
      000E8C DD 36 FA 00      [19] 3654 	ld	-6 (ix), #0
      000E90                       3655 00102$:
                                   3656 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000E90 DD 7E FA         [19] 3657 	ld	a, -6 (ix)
      000E93 B7               [ 4] 3658 	or	a, a
      000E94 28 04            [12] 3659 	jr	Z, 00104$
      000E96 7B               [ 4] 3660 	ld	a, e
      000E97 3D               [ 4] 3661 	dec	a
      000E98 20 31            [12] 3662 	jr	NZ, 00105$
      000E9A                       3663 00104$:
                                   3664 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000E9A DD 7E FD         [19] 3665 	ld	a, -3 (ix)
      000E9D C6 3F            [ 7] 3666 	add	a, #0x3f
      000E9F D5               [11] 3667 	push	de
      000EA0 DD 66 07         [19] 3668 	ld	h, 7 (ix)
      000EA3 E5               [11] 3669 	push	hl
      000EA4 33               [ 6] 3670 	inc	sp
      000EA5 DD 66 FF         [19] 3671 	ld	h, -1 (ix)
      000EA8 E5               [11] 3672 	push	hl
      000EA9 33               [ 6] 3673 	inc	sp
      000EAA F5               [11] 3674 	push	af
      000EAB 33               [ 6] 3675 	inc	sp
      000EAC CDrC7r0D         [17] 3676 	call	_DrawChar
      000EAF F1               [10] 3677 	pop	af
      000EB0 33               [ 6] 3678 	inc	sp
      000EB1 DD 6E FB         [19] 3679 	ld	l, -5 (ix)
      000EB4 DD 66 FC         [19] 3680 	ld	h, -4 (ix)
      000EB7 E5               [11] 3681 	push	hl
      000EB8 DD 6E 04         [19] 3682 	ld	l, 4 (ix)
      000EBB DD 66 05         [19] 3683 	ld	h, 5 (ix)
      000EBE E5               [11] 3684 	push	hl
      000EBF CDr00r00         [17] 3685 	call	__moduint
      000EC2 F1               [10] 3686 	pop	af
      000EC3 F1               [10] 3687 	pop	af
      000EC4 D1               [10] 3688 	pop	de
      000EC5 DD 75 04         [19] 3689 	ld	4 (ix), l
      000EC8 DD 74 05         [19] 3690 	ld	5 (ix), h
      000ECB                       3691 00105$:
                                   3692 ;src\/Graphics\Graphics.h:29: col++;
      000ECB DD 34 FF         [23] 3693 	inc	-1 (ix)
                                   3694 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000ECE 1D               [ 4] 3695 	dec	e
      000ECF C3r4Cr0E         [10] 3696 	jp	00109$
      000ED2                       3697 00111$:
                                   3698 ;src\/Graphics\Graphics.h:34: }
      000ED2 DD F9            [10] 3699 	ld	sp, ix
      000ED4 DD E1            [14] 3700 	pop	ix
      000ED6 C9               [10] 3701 	ret
      000ED7                       3702 ___str_0:
      000ED7 20 20 20 20 20 20     3703 	.ascii "      "
      000EDD 00                    3704 	.db 0x00
                                   3705 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3706 ;	---------------------------------
                                   3707 ; Function DrawColumn
                                   3708 ; ---------------------------------
      000EDE                       3709 _DrawColumn::
      000EDE DD E5            [15] 3710 	push	ix
      000EE0 DD 21 00 00      [14] 3711 	ld	ix,#0
      000EE4 DD 39            [15] 3712 	add	ix,sp
      000EE6 21 F9 FF         [10] 3713 	ld	hl, #-7
      000EE9 39               [11] 3714 	add	hl, sp
      000EEA F9               [ 6] 3715 	ld	sp, hl
                                   3716 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000EEB DD 4E 04         [19] 3717 	ld	c, 4 (ix)
      000EEE 06 00            [ 7] 3718 	ld	b, #0x00
      000EF0 21 00 18         [10] 3719 	ld	hl, #0x1800
      000EF3 09               [11] 3720 	add	hl, bc
      000EF4 C5               [11] 3721 	push	bc
      000EF5 3E 18            [ 7] 3722 	ld	a, #0x18
      000EF7 F5               [11] 3723 	push	af
      000EF8 33               [ 6] 3724 	inc	sp
      000EF9 E5               [11] 3725 	push	hl
      000EFA CDr00r00         [17] 3726 	call	_WRTVRM
      000EFD F1               [10] 3727 	pop	af
      000EFE 33               [ 6] 3728 	inc	sp
      000EFF C1               [10] 3729 	pop	bc
                                   3730 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000F00 21 01 18         [10] 3731 	ld	hl, #0x1801
      000F03 09               [11] 3732 	add	hl, bc
      000F04 C5               [11] 3733 	push	bc
      000F05 3E 19            [ 7] 3734 	ld	a, #0x19
      000F07 F5               [11] 3735 	push	af
      000F08 33               [ 6] 3736 	inc	sp
      000F09 E5               [11] 3737 	push	hl
      000F0A CDr00r00         [17] 3738 	call	_WRTVRM
      000F0D F1               [10] 3739 	pop	af
      000F0E 33               [ 6] 3740 	inc	sp
      000F0F C1               [10] 3741 	pop	bc
                                   3742 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000F10 21 02 18         [10] 3743 	ld	hl, #0x1802
      000F13 09               [11] 3744 	add	hl, bc
      000F14 C5               [11] 3745 	push	bc
      000F15 3E 1A            [ 7] 3746 	ld	a, #0x1a
      000F17 F5               [11] 3747 	push	af
      000F18 33               [ 6] 3748 	inc	sp
      000F19 E5               [11] 3749 	push	hl
      000F1A CDr00r00         [17] 3750 	call	_WRTVRM
      000F1D F1               [10] 3751 	pop	af
      000F1E 33               [ 6] 3752 	inc	sp
      000F1F C1               [10] 3753 	pop	bc
                                   3754 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000F20 21 20 18         [10] 3755 	ld	hl, #0x1820
      000F23 09               [11] 3756 	add	hl, bc
      000F24 C5               [11] 3757 	push	bc
      000F25 3E 1B            [ 7] 3758 	ld	a, #0x1b
      000F27 F5               [11] 3759 	push	af
      000F28 33               [ 6] 3760 	inc	sp
      000F29 E5               [11] 3761 	push	hl
      000F2A CDr00r00         [17] 3762 	call	_WRTVRM
      000F2D F1               [10] 3763 	pop	af
      000F2E 33               [ 6] 3764 	inc	sp
      000F2F C1               [10] 3765 	pop	bc
                                   3766 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000F30 21 21 18         [10] 3767 	ld	hl, #0x1821
      000F33 09               [11] 3768 	add	hl, bc
      000F34 C5               [11] 3769 	push	bc
      000F35 3E 1C            [ 7] 3770 	ld	a, #0x1c
      000F37 F5               [11] 3771 	push	af
      000F38 33               [ 6] 3772 	inc	sp
      000F39 E5               [11] 3773 	push	hl
      000F3A CDr00r00         [17] 3774 	call	_WRTVRM
      000F3D F1               [10] 3775 	pop	af
      000F3E 33               [ 6] 3776 	inc	sp
      000F3F C1               [10] 3777 	pop	bc
                                   3778 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000F40 21 22 18         [10] 3779 	ld	hl, #0x1822
      000F43 09               [11] 3780 	add	hl, bc
      000F44 C5               [11] 3781 	push	bc
      000F45 3E 1D            [ 7] 3782 	ld	a, #0x1d
      000F47 F5               [11] 3783 	push	af
      000F48 33               [ 6] 3784 	inc	sp
      000F49 E5               [11] 3785 	push	hl
      000F4A CDr00r00         [17] 3786 	call	_WRTVRM
      000F4D F1               [10] 3787 	pop	af
      000F4E 33               [ 6] 3788 	inc	sp
      000F4F C1               [10] 3789 	pop	bc
                                   3790 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F50 21 40 18         [10] 3791 	ld	hl, #0x1840
      000F53 09               [11] 3792 	add	hl, bc
      000F54 E3               [19] 3793 	ex	(sp), hl
      000F55 21 41 18         [10] 3794 	ld	hl, #0x1841
      000F58 09               [11] 3795 	add	hl, bc
      000F59 DD 75 FB         [19] 3796 	ld	-5 (ix), l
      000F5C DD 74 FC         [19] 3797 	ld	-4 (ix), h
      000F5F 21 42 18         [10] 3798 	ld	hl, #0x1842
      000F62 09               [11] 3799 	add	hl, bc
      000F63 DD 75 FD         [19] 3800 	ld	-3 (ix), l
      000F66 DD 74 FE         [19] 3801 	ld	-2 (ix), h
      000F69 DD 36 FF 00      [19] 3802 	ld	-1 (ix), #0
      000F6D                       3803 00103$:
      000F6D DD 7E FF         [19] 3804 	ld	a, -1 (ix)
      000F70 D6 14            [ 7] 3805 	sub	a, #0x14
      000F72 30 4A            [12] 3806 	jr	NC, 00101$
                                   3807 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000F74 DD 5E FF         [19] 3808 	ld	e, -1 (ix)
      000F77 16 00            [ 7] 3809 	ld	d, #0x00
      000F79 EB               [ 4] 3810 	ex	de, hl
      000F7A 29               [11] 3811 	add	hl, hl
      000F7B 29               [11] 3812 	add	hl, hl
      000F7C 29               [11] 3813 	add	hl, hl
      000F7D 29               [11] 3814 	add	hl, hl
      000F7E 29               [11] 3815 	add	hl, hl
      000F7F EB               [ 4] 3816 	ex	de, hl
      000F80 E1               [10] 3817 	pop	hl
      000F81 E5               [11] 3818 	push	hl
      000F82 19               [11] 3819 	add	hl, de
      000F83 C5               [11] 3820 	push	bc
      000F84 D5               [11] 3821 	push	de
      000F85 3E 1E            [ 7] 3822 	ld	a, #0x1e
      000F87 F5               [11] 3823 	push	af
      000F88 33               [ 6] 3824 	inc	sp
      000F89 E5               [11] 3825 	push	hl
      000F8A CDr00r00         [17] 3826 	call	_WRTVRM
      000F8D F1               [10] 3827 	pop	af
      000F8E 33               [ 6] 3828 	inc	sp
      000F8F D1               [10] 3829 	pop	de
      000F90 C1               [10] 3830 	pop	bc
                                   3831 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000F91 DD 6E FB         [19] 3832 	ld	l, -5 (ix)
      000F94 DD 66 FC         [19] 3833 	ld	h, -4 (ix)
      000F97 19               [11] 3834 	add	hl, de
      000F98 C5               [11] 3835 	push	bc
      000F99 D5               [11] 3836 	push	de
      000F9A 3E 1F            [ 7] 3837 	ld	a, #0x1f
      000F9C F5               [11] 3838 	push	af
      000F9D 33               [ 6] 3839 	inc	sp
      000F9E E5               [11] 3840 	push	hl
      000F9F CDr00r00         [17] 3841 	call	_WRTVRM
      000FA2 F1               [10] 3842 	pop	af
      000FA3 33               [ 6] 3843 	inc	sp
      000FA4 D1               [10] 3844 	pop	de
      000FA5 C1               [10] 3845 	pop	bc
                                   3846 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000FA6 DD 6E FD         [19] 3847 	ld	l, -3 (ix)
      000FA9 DD 66 FE         [19] 3848 	ld	h, -2 (ix)
      000FAC 19               [11] 3849 	add	hl, de
      000FAD C5               [11] 3850 	push	bc
      000FAE 3E 20            [ 7] 3851 	ld	a, #0x20
      000FB0 F5               [11] 3852 	push	af
      000FB1 33               [ 6] 3853 	inc	sp
      000FB2 E5               [11] 3854 	push	hl
      000FB3 CDr00r00         [17] 3855 	call	_WRTVRM
      000FB6 F1               [10] 3856 	pop	af
      000FB7 33               [ 6] 3857 	inc	sp
      000FB8 C1               [10] 3858 	pop	bc
                                   3859 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000FB9 DD 34 FF         [23] 3860 	inc	-1 (ix)
      000FBC 18 AF            [12] 3861 	jr	00103$
      000FBE                       3862 00101$:
                                   3863 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000FBE 21 00 19         [10] 3864 	ld	hl, #0x1900
      000FC1 09               [11] 3865 	add	hl, bc
      000FC2 C5               [11] 3866 	push	bc
      000FC3 3E 21            [ 7] 3867 	ld	a, #0x21
      000FC5 F5               [11] 3868 	push	af
      000FC6 33               [ 6] 3869 	inc	sp
      000FC7 E5               [11] 3870 	push	hl
      000FC8 CDr00r00         [17] 3871 	call	_WRTVRM
      000FCB F1               [10] 3872 	pop	af
      000FCC 33               [ 6] 3873 	inc	sp
      000FCD C1               [10] 3874 	pop	bc
                                   3875 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000FCE 21 01 19         [10] 3876 	ld	hl, #0x1901
      000FD1 09               [11] 3877 	add	hl, bc
      000FD2 C5               [11] 3878 	push	bc
      000FD3 3E 22            [ 7] 3879 	ld	a, #0x22
      000FD5 F5               [11] 3880 	push	af
      000FD6 33               [ 6] 3881 	inc	sp
      000FD7 E5               [11] 3882 	push	hl
      000FD8 CDr00r00         [17] 3883 	call	_WRTVRM
      000FDB F1               [10] 3884 	pop	af
      000FDC 33               [ 6] 3885 	inc	sp
      000FDD C1               [10] 3886 	pop	bc
                                   3887 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000FDE 21 02 19         [10] 3888 	ld	hl, #0x1902
      000FE1 09               [11] 3889 	add	hl, bc
      000FE2 C5               [11] 3890 	push	bc
      000FE3 3E 23            [ 7] 3891 	ld	a, #0x23
      000FE5 F5               [11] 3892 	push	af
      000FE6 33               [ 6] 3893 	inc	sp
      000FE7 E5               [11] 3894 	push	hl
      000FE8 CDr00r00         [17] 3895 	call	_WRTVRM
      000FEB F1               [10] 3896 	pop	af
      000FEC 33               [ 6] 3897 	inc	sp
      000FED C1               [10] 3898 	pop	bc
                                   3899 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000FEE 21 00 1A         [10] 3900 	ld	hl, #0x1a00
      000FF1 09               [11] 3901 	add	hl, bc
      000FF2 C5               [11] 3902 	push	bc
      000FF3 3E 21            [ 7] 3903 	ld	a, #0x21
      000FF5 F5               [11] 3904 	push	af
      000FF6 33               [ 6] 3905 	inc	sp
      000FF7 E5               [11] 3906 	push	hl
      000FF8 CDr00r00         [17] 3907 	call	_WRTVRM
      000FFB F1               [10] 3908 	pop	af
      000FFC 33               [ 6] 3909 	inc	sp
      000FFD C1               [10] 3910 	pop	bc
                                   3911 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000FFE 21 01 1A         [10] 3912 	ld	hl, #0x1a01
      001001 09               [11] 3913 	add	hl, bc
      001002 C5               [11] 3914 	push	bc
      001003 3E 22            [ 7] 3915 	ld	a, #0x22
      001005 F5               [11] 3916 	push	af
      001006 33               [ 6] 3917 	inc	sp
      001007 E5               [11] 3918 	push	hl
      001008 CDr00r00         [17] 3919 	call	_WRTVRM
      00100B F1               [10] 3920 	pop	af
      00100C 33               [ 6] 3921 	inc	sp
      00100D C1               [10] 3922 	pop	bc
                                   3923 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      00100E 21 02 1A         [10] 3924 	ld	hl, #0x1a02
      001011 09               [11] 3925 	add	hl, bc
      001012 C5               [11] 3926 	push	bc
      001013 3E 23            [ 7] 3927 	ld	a, #0x23
      001015 F5               [11] 3928 	push	af
      001016 33               [ 6] 3929 	inc	sp
      001017 E5               [11] 3930 	push	hl
      001018 CDr00r00         [17] 3931 	call	_WRTVRM
      00101B F1               [10] 3932 	pop	af
      00101C 33               [ 6] 3933 	inc	sp
      00101D C1               [10] 3934 	pop	bc
                                   3935 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      00101E 21 C0 1A         [10] 3936 	ld	hl, #0x1ac0
      001021 09               [11] 3937 	add	hl, bc
      001022 C5               [11] 3938 	push	bc
      001023 3E 24            [ 7] 3939 	ld	a, #0x24
      001025 F5               [11] 3940 	push	af
      001026 33               [ 6] 3941 	inc	sp
      001027 E5               [11] 3942 	push	hl
      001028 CDr00r00         [17] 3943 	call	_WRTVRM
      00102B F1               [10] 3944 	pop	af
      00102C 33               [ 6] 3945 	inc	sp
      00102D C1               [10] 3946 	pop	bc
                                   3947 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      00102E 21 C1 1A         [10] 3948 	ld	hl, #0x1ac1
      001031 09               [11] 3949 	add	hl, bc
      001032 C5               [11] 3950 	push	bc
      001033 3E 25            [ 7] 3951 	ld	a, #0x25
      001035 F5               [11] 3952 	push	af
      001036 33               [ 6] 3953 	inc	sp
      001037 E5               [11] 3954 	push	hl
      001038 CDr00r00         [17] 3955 	call	_WRTVRM
      00103B F1               [10] 3956 	pop	af
      00103C 33               [ 6] 3957 	inc	sp
      00103D C1               [10] 3958 	pop	bc
                                   3959 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      00103E 21 C2 1A         [10] 3960 	ld	hl, #0x1ac2
      001041 09               [11] 3961 	add	hl, bc
      001042 C5               [11] 3962 	push	bc
      001043 3E 26            [ 7] 3963 	ld	a, #0x26
      001045 F5               [11] 3964 	push	af
      001046 33               [ 6] 3965 	inc	sp
      001047 E5               [11] 3966 	push	hl
      001048 CDr00r00         [17] 3967 	call	_WRTVRM
      00104B F1               [10] 3968 	pop	af
      00104C 33               [ 6] 3969 	inc	sp
      00104D C1               [10] 3970 	pop	bc
                                   3971 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00104E 21 E0 1A         [10] 3972 	ld	hl, #0x1ae0
      001051 09               [11] 3973 	add	hl, bc
      001052 C5               [11] 3974 	push	bc
      001053 3E 27            [ 7] 3975 	ld	a, #0x27
      001055 F5               [11] 3976 	push	af
      001056 33               [ 6] 3977 	inc	sp
      001057 E5               [11] 3978 	push	hl
      001058 CDr00r00         [17] 3979 	call	_WRTVRM
      00105B F1               [10] 3980 	pop	af
      00105C 33               [ 6] 3981 	inc	sp
      00105D C1               [10] 3982 	pop	bc
                                   3983 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00105E 21 E1 1A         [10] 3984 	ld	hl, #0x1ae1
      001061 09               [11] 3985 	add	hl, bc
      001062 C5               [11] 3986 	push	bc
      001063 3E 28            [ 7] 3987 	ld	a, #0x28
      001065 F5               [11] 3988 	push	af
      001066 33               [ 6] 3989 	inc	sp
      001067 E5               [11] 3990 	push	hl
      001068 CDr00r00         [17] 3991 	call	_WRTVRM
      00106B F1               [10] 3992 	pop	af
      00106C 33               [ 6] 3993 	inc	sp
      00106D C1               [10] 3994 	pop	bc
                                   3995 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00106E 21 E2 1A         [10] 3996 	ld	hl, #0x1ae2
      001071 09               [11] 3997 	add	hl, bc
      001072 3E 29            [ 7] 3998 	ld	a, #0x29
      001074 F5               [11] 3999 	push	af
      001075 33               [ 6] 4000 	inc	sp
      001076 E5               [11] 4001 	push	hl
      001077 CDr00r00         [17] 4002 	call	_WRTVRM
                                   4003 ;src\/Graphics\Graphics.h:64: }
      00107A DD F9            [10] 4004 	ld	sp,ix
      00107C DD E1            [14] 4005 	pop	ix
      00107E C9               [10] 4006 	ret
                                   4007 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   4008 ;	---------------------------------
                                   4009 ; Function GetNextPieceColors
                                   4010 ; ---------------------------------
      00107F                       4011 _GetNextPieceColors::
                                   4012 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      00107F FD 21 02 00      [14] 4013 	ld	iy, #2
      001083 FD 39            [15] 4014 	add	iy, sp
      001085 FD 7E 00         [19] 4015 	ld	a, 0 (iy)
      001088 D6 04            [ 7] 4016 	sub	a, #0x04
      00108A 28 22            [12] 4017 	jr	Z, 00102$
      00108C FD 7E 00         [19] 4018 	ld	a, 0 (iy)
      00108F D6 08            [ 7] 4019 	sub	a, #0x08
      001091 28 26            [12] 4020 	jr	Z, 00103$
      001093 FD 7E 00         [19] 4021 	ld	a, 0 (iy)
      001096 D6 0C            [ 7] 4022 	sub	a, #0x0c
      001098 28 09            [12] 4023 	jr	Z, 00101$
      00109A FD 7E 00         [19] 4024 	ld	a, 0 (iy)
      00109D D6 14            [ 7] 4025 	sub	a, #0x14
      00109F 28 23            [12] 4026 	jr	Z, 00104$
      0010A1 18 2C            [12] 4027 	jr	00105$
                                   4028 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      0010A3                       4029 00101$:
                                   4030 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      0010A3 3E 07            [ 7] 4031 	ld	a, #0x07
      0010A5 32r9Br00         [13] 4032 	ld	(#_nextPieceColor_Front), a
                                   4033 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      0010A8 3E 04            [ 7] 4034 	ld	a, #0x04
      0010AA 32r9Cr00         [13] 4035 	ld	(#_nextPieceColor_Back), a
                                   4036 ;src\/Graphics\Graphics.h:73: break;
      0010AD C9               [10] 4037 	ret
                                   4038 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      0010AE                       4039 00102$:
                                   4040 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      0010AE 3E 03            [ 7] 4041 	ld	a, #0x03
      0010B0 32r9Br00         [13] 4042 	ld	(#_nextPieceColor_Front), a
                                   4043 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      0010B3 3E 0C            [ 7] 4044 	ld	a, #0x0c
      0010B5 32r9Cr00         [13] 4045 	ld	(#_nextPieceColor_Back), a
                                   4046 ;src\/Graphics\Graphics.h:77: break;
      0010B8 C9               [10] 4047 	ret
                                   4048 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      0010B9                       4049 00103$:
                                   4050 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      0010B9 3E 09            [ 7] 4051 	ld	a, #0x09
      0010BB 32r9Br00         [13] 4052 	ld	(#_nextPieceColor_Front), a
                                   4053 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      0010BE 3E 06            [ 7] 4054 	ld	a, #0x06
      0010C0 32r9Cr00         [13] 4055 	ld	(#_nextPieceColor_Back), a
                                   4056 ;src\/Graphics\Graphics.h:81: break;
      0010C3 C9               [10] 4057 	ret
                                   4058 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      0010C4                       4059 00104$:
                                   4060 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      0010C4 3E 0B            [ 7] 4061 	ld	a, #0x0b
      0010C6 32r9Br00         [13] 4062 	ld	(#_nextPieceColor_Front), a
                                   4063 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      0010C9 3E 0A            [ 7] 4064 	ld	a, #0x0a
      0010CB 32r9Cr00         [13] 4065 	ld	(#_nextPieceColor_Back), a
                                   4066 ;src\/Graphics\Graphics.h:85: break;
      0010CE C9               [10] 4067 	ret
                                   4068 ;src\/Graphics\Graphics.h:86: default:
      0010CF                       4069 00105$:
                                   4070 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      0010CF 3E 0F            [ 7] 4071 	ld	a, #0x0f
      0010D1 32r9Br00         [13] 4072 	ld	(#_nextPieceColor_Front), a
                                   4073 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      0010D4 3E 0D            [ 7] 4074 	ld	a, #0x0d
      0010D6 32r9Cr00         [13] 4075 	ld	(#_nextPieceColor_Back), a
                                   4076 ;src\/Graphics\Graphics.h:89: }  
                                   4077 ;src\/Graphics\Graphics.h:90: }
      0010D9 C9               [10] 4078 	ret
                                   4079 ;src\/Graphics\Graphics.h:92: void DrawScore() {
                                   4080 ;	---------------------------------
                                   4081 ; Function DrawScore
                                   4082 ; ---------------------------------
      0010DA                       4083 _DrawScore::
      0010DA DD E5            [15] 4084 	push	ix
      0010DC DD 21 00 00      [14] 4085 	ld	ix,#0
      0010E0 DD 39            [15] 4086 	add	ix,sp
      0010E2 F5               [11] 4087 	push	af
                                   4088 ;src\/Graphics\Graphics.h:93: byte bgCounter = 0, bgColor;
      0010E3 DD 36 FE 00      [19] 4089 	ld	-2 (ix), #0
                                   4090 ;src\/Graphics\Graphics.h:97: if(newLevel) {
      0010E7 3Ar07r00         [13] 4091 	ld	a,(#_newLevel + 0)
      0010EA B7               [ 4] 4092 	or	a, a
      0010EB CArE6r11         [10] 4093 	jp	Z, 00119$
                                   4094 ;src\/Graphics\Graphics.h:98: for(byte i=0; i < 60; i++) {
      0010EE DD 36 FF 00      [19] 4095 	ld	-1 (ix), #0
      0010F2                       4096 00121$:
      0010F2 DD 7E FF         [19] 4097 	ld	a, -1 (ix)
      0010F5 D6 3C            [ 7] 4098 	sub	a, #0x3c
      0010F7 D2rE6r11         [10] 4099 	jp	NC, 00119$
                                   4100 ;src\/Graphics\Graphics.h:99: lastJiffy = JIFFY;
      0010FA ED 4B 9E FC      [20] 4101 	ld	bc, (_JIFFY)
                                   4102 ;src\/Graphics\Graphics.h:100: while(lastJiffy == JIFFY) { }
      0010FE                       4103 00101$:
      0010FE 2A 9E FC         [16] 4104 	ld	hl, (_JIFFY)
      001101 BF               [ 4] 4105 	cp	a, a
      001102 ED 42            [15] 4106 	sbc	hl, bc
      001104 28 F8            [12] 4107 	jr	Z, 00101$
                                   4108 ;src\/Graphics\Graphics.h:102: DrawExplosionSprite(26 * 8, 10 * 8, i);
      001106 DD 56 FF         [19] 4109 	ld	d, -1 (ix)
      001109 1E 50            [ 7] 4110 	ld	e,#0x50
      00110B D5               [11] 4111 	push	de
      00110C 3E D0            [ 7] 4112 	ld	a, #0xd0
      00110E F5               [11] 4113 	push	af
      00110F 33               [ 6] 4114 	inc	sp
      001110 CDrDFr0C         [17] 4115 	call	_DrawExplosionSprite
      001113 F1               [10] 4116 	pop	af
      001114 33               [ 6] 4117 	inc	sp
                                   4118 ;src\/Graphics\Graphics.h:104: if(JIFFY & 0b00000110) {
      001115 2A 9E FC         [16] 4119 	ld	hl, (_JIFFY)
      001118 7D               [ 4] 4120 	ld	a, l
      001119 E6 06            [ 7] 4121 	and	a, #0x06
      00111B CArC6r11         [10] 4122 	jp	Z,00115$
                                   4123 ;src\/Graphics\Graphics.h:106: DrawString(" LEVEL", 26, 10);
      00111E 11 1A 0A         [10] 4124 	ld	de, #0x0a1a
      001121 D5               [11] 4125 	push	de
      001122 21rC1r13         [10] 4126 	ld	hl, #___str_1
      001125 E5               [11] 4127 	push	hl
      001126 CDrF1r0D         [17] 4128 	call	_DrawString
      001129 F1               [10] 4129 	pop	af
      00112A F1               [10] 4130 	pop	af
                                   4131 ;src\/Graphics\Graphics.h:107: DrawNumber(level, 26, 11);
      00112B 3Ar06r00         [13] 4132 	ld	a, (#_level + 0)
      00112E 4F               [ 4] 4133 	ld	c, a
      00112F 06 00            [ 7] 4134 	ld	b, #0x00
      001131 11 1A 0B         [10] 4135 	ld	de, #0x0b1a
      001134 D5               [11] 4136 	push	de
      001135 C5               [11] 4137 	push	bc
      001136 CDr23r0E         [17] 4138 	call	_DrawNumber
      001139 F1               [10] 4139 	pop	af
      00113A F1               [10] 4140 	pop	af
                                   4141 ;src\/Graphics\Graphics.h:113: switch(bgCounter++) {
      00113B DD 4E FE         [19] 4142 	ld	c, -2 (ix)
      00113E DD 34 FE         [23] 4143 	inc	-2 (ix)
      001141 3E 07            [ 7] 4144 	ld	a, #0x07
      001143 91               [ 4] 4145 	sub	a, c
      001144 38 45            [12] 4146 	jr	C, 00112$
      001146 06 00            [ 7] 4147 	ld	b, #0x00
      001148 21r4Fr11         [10] 4148 	ld	hl, #00163$
      00114B 09               [11] 4149 	add	hl, bc
      00114C 09               [11] 4150 	add	hl, bc
      00114D 09               [11] 4151 	add	hl, bc
      00114E E9               [ 4] 4152 	jp	(hl)
      00114F                       4153 00163$:
      00114F C3r67r11         [10] 4154 	jp	00104$
      001152 C3r6Br11         [10] 4155 	jp	00105$
      001155 C3r6Fr11         [10] 4156 	jp	00106$
      001158 C3r73r11         [10] 4157 	jp	00107$
      00115B C3r77r11         [10] 4158 	jp	00108$
      00115E C3r7Br11         [10] 4159 	jp	00109$
      001161 C3r7Fr11         [10] 4160 	jp	00110$
      001164 C3r83r11         [10] 4161 	jp	00111$
                                   4162 ;src\/Graphics\Graphics.h:114: case 0:
      001167                       4163 00104$:
                                   4164 ;src\/Graphics\Graphics.h:115: bgColor = 0x14;
      001167 0E 14            [ 7] 4165 	ld	c, #0x14
                                   4166 ;src\/Graphics\Graphics.h:116: break;
      001169 18 22            [12] 4167 	jr	00113$
                                   4168 ;src\/Graphics\Graphics.h:117: case 1:
      00116B                       4169 00105$:
                                   4170 ;src\/Graphics\Graphics.h:118: bgColor = 0x15;
      00116B 0E 15            [ 7] 4171 	ld	c, #0x15
                                   4172 ;src\/Graphics\Graphics.h:119: break;
      00116D 18 1E            [12] 4173 	jr	00113$
                                   4174 ;src\/Graphics\Graphics.h:120: case 2:
      00116F                       4175 00106$:
                                   4176 ;src\/Graphics\Graphics.h:121: bgColor = 0x17;
      00116F 0E 17            [ 7] 4177 	ld	c, #0x17
                                   4178 ;src\/Graphics\Graphics.h:122: break;
      001171 18 1A            [12] 4179 	jr	00113$
                                   4180 ;src\/Graphics\Graphics.h:123: case 3:
      001173                       4181 00107$:
                                   4182 ;src\/Graphics\Graphics.h:124: bgColor = 0x1e;
      001173 0E 1E            [ 7] 4183 	ld	c, #0x1e
                                   4184 ;src\/Graphics\Graphics.h:125: break;
      001175 18 16            [12] 4185 	jr	00113$
                                   4186 ;src\/Graphics\Graphics.h:126: case 4:
      001177                       4187 00108$:
                                   4188 ;src\/Graphics\Graphics.h:127: bgColor = 0x1f;
      001177 0E 1F            [ 7] 4189 	ld	c, #0x1f
                                   4190 ;src\/Graphics\Graphics.h:128: break;
      001179 18 12            [12] 4191 	jr	00113$
                                   4192 ;src\/Graphics\Graphics.h:129: case 5:
      00117B                       4193 00109$:
                                   4194 ;src\/Graphics\Graphics.h:130: bgColor = 0x1e;
      00117B 0E 1E            [ 7] 4195 	ld	c, #0x1e
                                   4196 ;src\/Graphics\Graphics.h:131: break;
      00117D 18 0E            [12] 4197 	jr	00113$
                                   4198 ;src\/Graphics\Graphics.h:132: case 6:
      00117F                       4199 00110$:
                                   4200 ;src\/Graphics\Graphics.h:133: bgColor = 0x17;
      00117F 0E 17            [ 7] 4201 	ld	c, #0x17
                                   4202 ;src\/Graphics\Graphics.h:134: break;
      001181 18 0A            [12] 4203 	jr	00113$
                                   4204 ;src\/Graphics\Graphics.h:135: case 7:
      001183                       4205 00111$:
                                   4206 ;src\/Graphics\Graphics.h:136: bgColor = 0x15;
      001183 0E 15            [ 7] 4207 	ld	c, #0x15
                                   4208 ;src\/Graphics\Graphics.h:137: bgCounter = 0;
      001185 DD 36 FE 00      [19] 4209 	ld	-2 (ix), #0
                                   4210 ;src\/Graphics\Graphics.h:138: break;
      001189 18 02            [12] 4211 	jr	00113$
                                   4212 ;src\/Graphics\Graphics.h:139: default:
      00118B                       4213 00112$:
                                   4214 ;src\/Graphics\Graphics.h:140: bgColor = 0x11;
      00118B 0E 11            [ 7] 4215 	ld	c, #0x11
                                   4216 ;src\/Graphics\Graphics.h:142: }
      00118D                       4217 00113$:
                                   4218 ;src\/Graphics\Graphics.h:143: FILVRM(CLRTBL, 8 * 4, bgColor);
      00118D C5               [11] 4219 	push	bc
      00118E 79               [ 4] 4220 	ld	a, c
      00118F F5               [11] 4221 	push	af
      001190 33               [ 6] 4222 	inc	sp
      001191 21 20 00         [10] 4223 	ld	hl, #0x0020
      001194 E5               [11] 4224 	push	hl
      001195 21 00 20         [10] 4225 	ld	hl, #0x2000
      001198 E5               [11] 4226 	push	hl
      001199 CDr00r00         [17] 4227 	call	_FILVRM
      00119C F1               [10] 4228 	pop	af
      00119D F1               [10] 4229 	pop	af
      00119E 33               [ 6] 4230 	inc	sp
      00119F C1               [10] 4231 	pop	bc
                                   4232 ;src\/Graphics\Graphics.h:144: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      0011A0 C5               [11] 4233 	push	bc
      0011A1 79               [ 4] 4234 	ld	a, c
      0011A2 F5               [11] 4235 	push	af
      0011A3 33               [ 6] 4236 	inc	sp
      0011A4 21 20 00         [10] 4237 	ld	hl, #0x0020
      0011A7 E5               [11] 4238 	push	hl
      0011A8 21 00 28         [10] 4239 	ld	hl, #0x2800
      0011AB E5               [11] 4240 	push	hl
      0011AC CDr00r00         [17] 4241 	call	_FILVRM
      0011AF F1               [10] 4242 	pop	af
      0011B0 F1               [10] 4243 	pop	af
      0011B1 33               [ 6] 4244 	inc	sp
      0011B2 C1               [10] 4245 	pop	bc
                                   4246 ;src\/Graphics\Graphics.h:145: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      0011B3 79               [ 4] 4247 	ld	a, c
      0011B4 F5               [11] 4248 	push	af
      0011B5 33               [ 6] 4249 	inc	sp
      0011B6 21 20 00         [10] 4250 	ld	hl, #0x0020
      0011B9 E5               [11] 4251 	push	hl
      0011BA 21 00 30         [10] 4252 	ld	hl, #0x3000
      0011BD E5               [11] 4253 	push	hl
      0011BE CDr00r00         [17] 4254 	call	_FILVRM
      0011C1 F1               [10] 4255 	pop	af
      0011C2 F1               [10] 4256 	pop	af
      0011C3 33               [ 6] 4257 	inc	sp
      0011C4 18 1A            [12] 4258 	jr	00122$
      0011C6                       4259 00115$:
                                   4260 ;src\/Graphics\Graphics.h:150: DrawString("      ", 26, 10);
      0011C6 11 1A 0A         [10] 4261 	ld	de, #0x0a1a
      0011C9 D5               [11] 4262 	push	de
      0011CA 21rC8r13         [10] 4263 	ld	hl, #___str_2
      0011CD E5               [11] 4264 	push	hl
      0011CE CDrF1r0D         [17] 4265 	call	_DrawString
      0011D1 F1               [10] 4266 	pop	af
      0011D2 F1               [10] 4267 	pop	af
                                   4268 ;src\/Graphics\Graphics.h:151: DrawString("      ", 26, 11);
      0011D3 11 1A 0B         [10] 4269 	ld	de, #0x0b1a
      0011D6 D5               [11] 4270 	push	de
      0011D7 21rC8r13         [10] 4271 	ld	hl, #___str_2
      0011DA E5               [11] 4272 	push	hl
      0011DB CDrF1r0D         [17] 4273 	call	_DrawString
      0011DE F1               [10] 4274 	pop	af
      0011DF F1               [10] 4275 	pop	af
      0011E0                       4276 00122$:
                                   4277 ;src\/Graphics\Graphics.h:98: for(byte i=0; i < 60; i++) {
      0011E0 DD 34 FF         [23] 4278 	inc	-1 (ix)
      0011E3 C3rF2r10         [10] 4279 	jp	00121$
      0011E6                       4280 00119$:
                                   4281 ;src\/Graphics\Graphics.h:157: newLevel = FALSE;
      0011E6 21r07r00         [10] 4282 	ld	hl, #_newLevel
      0011E9 36 00            [10] 4283 	ld	(hl), #0x00
                                   4284 ;src\/Graphics\Graphics.h:160: FILVRM(CLRTBL, 8 * 4, 0x14);
      0011EB 3E 14            [ 7] 4285 	ld	a, #0x14
      0011ED F5               [11] 4286 	push	af
      0011EE 33               [ 6] 4287 	inc	sp
      0011EF 21 20 00         [10] 4288 	ld	hl, #0x0020
      0011F2 E5               [11] 4289 	push	hl
      0011F3 21 00 20         [10] 4290 	ld	hl, #0x2000
      0011F6 E5               [11] 4291 	push	hl
      0011F7 CDr00r00         [17] 4292 	call	_FILVRM
      0011FA F1               [10] 4293 	pop	af
      0011FB F1               [10] 4294 	pop	af
      0011FC 33               [ 6] 4295 	inc	sp
                                   4296 ;src\/Graphics\Graphics.h:161: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      0011FD 3E 14            [ 7] 4297 	ld	a, #0x14
      0011FF F5               [11] 4298 	push	af
      001200 33               [ 6] 4299 	inc	sp
      001201 21 20 00         [10] 4300 	ld	hl, #0x0020
      001204 E5               [11] 4301 	push	hl
      001205 21 00 28         [10] 4302 	ld	hl, #0x2800
      001208 E5               [11] 4303 	push	hl
      001209 CDr00r00         [17] 4304 	call	_FILVRM
      00120C F1               [10] 4305 	pop	af
      00120D F1               [10] 4306 	pop	af
      00120E 33               [ 6] 4307 	inc	sp
                                   4308 ;src\/Graphics\Graphics.h:162: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      00120F 3E 14            [ 7] 4309 	ld	a, #0x14
      001211 F5               [11] 4310 	push	af
      001212 33               [ 6] 4311 	inc	sp
      001213 21 20 00         [10] 4312 	ld	hl, #0x0020
      001216 E5               [11] 4313 	push	hl
      001217 21 00 30         [10] 4314 	ld	hl, #0x3000
      00121A E5               [11] 4315 	push	hl
      00121B CDr00r00         [17] 4316 	call	_FILVRM
      00121E F1               [10] 4317 	pop	af
      00121F F1               [10] 4318 	pop	af
      001220 33               [ 6] 4319 	inc	sp
                                   4320 ;src\/Graphics\Graphics.h:164: DrawString("NEXT", 2, 2);
      001221 11 02 02         [10] 4321 	ld	de, #0x0202
      001224 D5               [11] 4322 	push	de
      001225 21rCFr13         [10] 4323 	ld	hl, #___str_3
      001228 E5               [11] 4324 	push	hl
      001229 CDrF1r0D         [17] 4325 	call	_DrawString
      00122C F1               [10] 4326 	pop	af
      00122D F1               [10] 4327 	pop	af
                                   4328 ;src\/Graphics\Graphics.h:166: DrawString(" LEVEL", 26, 10);
      00122E 11 1A 0A         [10] 4329 	ld	de, #0x0a1a
      001231 D5               [11] 4330 	push	de
      001232 21rC1r13         [10] 4331 	ld	hl, #___str_1
      001235 E5               [11] 4332 	push	hl
      001236 CDrF1r0D         [17] 4333 	call	_DrawString
      001239 F1               [10] 4334 	pop	af
      00123A F1               [10] 4335 	pop	af
                                   4336 ;src\/Graphics\Graphics.h:167: DrawString("BLOCKS", 26, 18);
      00123B 11 1A 12         [10] 4337 	ld	de, #0x121a
      00123E D5               [11] 4338 	push	de
      00123F 21rD4r13         [10] 4339 	ld	hl, #___str_4
      001242 E5               [11] 4340 	push	hl
      001243 CDrF1r0D         [17] 4341 	call	_DrawString
      001246 F1               [10] 4342 	pop	af
      001247 F1               [10] 4343 	pop	af
                                   4344 ;src\/Graphics\Graphics.h:170: DrawNumber(level, 26, 11);
      001248 3Ar06r00         [13] 4345 	ld	a, (#_level + 0)
      00124B 4F               [ 4] 4346 	ld	c, a
      00124C 06 00            [ 7] 4347 	ld	b, #0x00
      00124E 11 1A 0B         [10] 4348 	ld	de, #0x0b1a
      001251 D5               [11] 4349 	push	de
      001252 C5               [11] 4350 	push	bc
      001253 CDr23r0E         [17] 4351 	call	_DrawNumber
      001256 F1               [10] 4352 	pop	af
      001257 F1               [10] 4353 	pop	af
                                   4354 ;src\/Graphics\Graphics.h:171: DrawNumber(blocksRemoved, 26, 19);
      001258 11 1A 13         [10] 4355 	ld	de, #0x131a
      00125B D5               [11] 4356 	push	de
      00125C 2Ar04r00         [16] 4357 	ld	hl, (_blocksRemoved)
      00125F E5               [11] 4358 	push	hl
      001260 CDr23r0E         [17] 4359 	call	_DrawNumber
      001263 F1               [10] 4360 	pop	af
      001264 F1               [10] 4361 	pop	af
                                   4362 ;src\/Graphics\Graphics.h:174: GetNextPieceColors(nextTopPiece);
      001265 3Ar93r00         [13] 4363 	ld	a,(#_nextTopPiece + 0)
      001268 F5               [11] 4364 	push	af
      001269 33               [ 6] 4365 	inc	sp
      00126A CDr7Fr10         [17] 4366 	call	_GetNextPieceColors
      00126D 33               [ 6] 4367 	inc	sp
                                   4368 ;src\/Graphics\Graphics.h:175: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      00126E 3E 20            [ 7] 4369 	ld	a, #0x20
      001270 F5               [11] 4370 	push	af
      001271 33               [ 6] 4371 	inc	sp
      001272 21 28 1B         [10] 4372 	ld	hl, #0x1b28
      001275 E5               [11] 4373 	push	hl
      001276 CDr00r00         [17] 4374 	call	_WRTVRM
      001279 F1               [10] 4375 	pop	af
      00127A 33               [ 6] 4376 	inc	sp
                                   4377 ;src\/Graphics\Graphics.h:176: WRTVRM(SPRATT + 41, 	(2 * 8)-4);
      00127B 3E 0C            [ 7] 4378 	ld	a, #0x0c
      00127D F5               [11] 4379 	push	af
      00127E 33               [ 6] 4380 	inc	sp
      00127F 21 29 1B         [10] 4381 	ld	hl, #0x1b29
      001282 E5               [11] 4382 	push	hl
      001283 CDr00r00         [17] 4383 	call	_WRTVRM
      001286 F1               [10] 4384 	pop	af
      001287 33               [ 6] 4385 	inc	sp
                                   4386 ;src\/Graphics\Graphics.h:177: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      001288 3E 4C            [ 7] 4387 	ld	a, #0x4c
      00128A F5               [11] 4388 	push	af
      00128B 33               [ 6] 4389 	inc	sp
      00128C 21 2A 1B         [10] 4390 	ld	hl, #0x1b2a
      00128F E5               [11] 4391 	push	hl
      001290 CDr00r00         [17] 4392 	call	_WRTVRM
      001293 F1               [10] 4393 	pop	af
      001294 33               [ 6] 4394 	inc	sp
                                   4395 ;src\/Graphics\Graphics.h:178: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      001295 3Ar9Br00         [13] 4396 	ld	a,(#_nextPieceColor_Front + 0)
      001298 F5               [11] 4397 	push	af
      001299 33               [ 6] 4398 	inc	sp
      00129A 21 2B 1B         [10] 4399 	ld	hl, #0x1b2b
      00129D E5               [11] 4400 	push	hl
      00129E CDr00r00         [17] 4401 	call	_WRTVRM
      0012A1 F1               [10] 4402 	pop	af
      0012A2 33               [ 6] 4403 	inc	sp
                                   4404 ;src\/Graphics\Graphics.h:179: WRTVRM(SPRATT + 44, 	(4 * 8));
      0012A3 3E 20            [ 7] 4405 	ld	a, #0x20
      0012A5 F5               [11] 4406 	push	af
      0012A6 33               [ 6] 4407 	inc	sp
      0012A7 21 2C 1B         [10] 4408 	ld	hl, #0x1b2c
      0012AA E5               [11] 4409 	push	hl
      0012AB CDr00r00         [17] 4410 	call	_WRTVRM
      0012AE F1               [10] 4411 	pop	af
      0012AF 33               [ 6] 4412 	inc	sp
                                   4413 ;src\/Graphics\Graphics.h:180: WRTVRM(SPRATT + 45, 	(2 * 8)-4);
      0012B0 3E 0C            [ 7] 4414 	ld	a, #0x0c
      0012B2 F5               [11] 4415 	push	af
      0012B3 33               [ 6] 4416 	inc	sp
      0012B4 21 2D 1B         [10] 4417 	ld	hl, #0x1b2d
      0012B7 E5               [11] 4418 	push	hl
      0012B8 CDr00r00         [17] 4419 	call	_WRTVRM
      0012BB F1               [10] 4420 	pop	af
      0012BC 33               [ 6] 4421 	inc	sp
                                   4422 ;src\/Graphics\Graphics.h:181: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0012BD 3E 50            [ 7] 4423 	ld	a, #0x50
      0012BF F5               [11] 4424 	push	af
      0012C0 33               [ 6] 4425 	inc	sp
      0012C1 21 2E 1B         [10] 4426 	ld	hl, #0x1b2e
      0012C4 E5               [11] 4427 	push	hl
      0012C5 CDr00r00         [17] 4428 	call	_WRTVRM
      0012C8 F1               [10] 4429 	pop	af
      0012C9 33               [ 6] 4430 	inc	sp
                                   4431 ;src\/Graphics\Graphics.h:182: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      0012CA 3Ar9Cr00         [13] 4432 	ld	a,(#_nextPieceColor_Back + 0)
      0012CD F5               [11] 4433 	push	af
      0012CE 33               [ 6] 4434 	inc	sp
      0012CF 21 2F 1B         [10] 4435 	ld	hl, #0x1b2f
      0012D2 E5               [11] 4436 	push	hl
      0012D3 CDr00r00         [17] 4437 	call	_WRTVRM
      0012D6 F1               [10] 4438 	pop	af
      0012D7 33               [ 6] 4439 	inc	sp
                                   4440 ;src\/Graphics\Graphics.h:184: GetNextPieceColors(nextMidPiece);
      0012D8 3Ar94r00         [13] 4441 	ld	a,(#_nextMidPiece + 0)
      0012DB F5               [11] 4442 	push	af
      0012DC 33               [ 6] 4443 	inc	sp
      0012DD CDr7Fr10         [17] 4444 	call	_GetNextPieceColors
      0012E0 33               [ 6] 4445 	inc	sp
                                   4446 ;src\/Graphics\Graphics.h:185: WRTVRM(SPRATT + 48, 	(5 * 8));
      0012E1 3E 28            [ 7] 4447 	ld	a, #0x28
      0012E3 F5               [11] 4448 	push	af
      0012E4 33               [ 6] 4449 	inc	sp
      0012E5 21 30 1B         [10] 4450 	ld	hl, #0x1b30
      0012E8 E5               [11] 4451 	push	hl
      0012E9 CDr00r00         [17] 4452 	call	_WRTVRM
      0012EC F1               [10] 4453 	pop	af
      0012ED 33               [ 6] 4454 	inc	sp
                                   4455 ;src\/Graphics\Graphics.h:186: WRTVRM(SPRATT + 49, 	(2 * 8)-4);
      0012EE 3E 0C            [ 7] 4456 	ld	a, #0x0c
      0012F0 F5               [11] 4457 	push	af
      0012F1 33               [ 6] 4458 	inc	sp
      0012F2 21 31 1B         [10] 4459 	ld	hl, #0x1b31
      0012F5 E5               [11] 4460 	push	hl
      0012F6 CDr00r00         [17] 4461 	call	_WRTVRM
      0012F9 F1               [10] 4462 	pop	af
      0012FA 33               [ 6] 4463 	inc	sp
                                   4464 ;src\/Graphics\Graphics.h:187: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      0012FB 3E 4C            [ 7] 4465 	ld	a, #0x4c
      0012FD F5               [11] 4466 	push	af
      0012FE 33               [ 6] 4467 	inc	sp
      0012FF 21 32 1B         [10] 4468 	ld	hl, #0x1b32
      001302 E5               [11] 4469 	push	hl
      001303 CDr00r00         [17] 4470 	call	_WRTVRM
      001306 F1               [10] 4471 	pop	af
      001307 33               [ 6] 4472 	inc	sp
                                   4473 ;src\/Graphics\Graphics.h:188: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      001308 3Ar9Br00         [13] 4474 	ld	a,(#_nextPieceColor_Front + 0)
      00130B F5               [11] 4475 	push	af
      00130C 33               [ 6] 4476 	inc	sp
      00130D 21 33 1B         [10] 4477 	ld	hl, #0x1b33
      001310 E5               [11] 4478 	push	hl
      001311 CDr00r00         [17] 4479 	call	_WRTVRM
      001314 F1               [10] 4480 	pop	af
      001315 33               [ 6] 4481 	inc	sp
                                   4482 ;src\/Graphics\Graphics.h:189: WRTVRM(SPRATT + 52, 	(5 * 8));
      001316 3E 28            [ 7] 4483 	ld	a, #0x28
      001318 F5               [11] 4484 	push	af
      001319 33               [ 6] 4485 	inc	sp
      00131A 21 34 1B         [10] 4486 	ld	hl, #0x1b34
      00131D E5               [11] 4487 	push	hl
      00131E CDr00r00         [17] 4488 	call	_WRTVRM
      001321 F1               [10] 4489 	pop	af
      001322 33               [ 6] 4490 	inc	sp
                                   4491 ;src\/Graphics\Graphics.h:190: WRTVRM(SPRATT + 53, 	(2 * 8)-4);
      001323 3E 0C            [ 7] 4492 	ld	a, #0x0c
      001325 F5               [11] 4493 	push	af
      001326 33               [ 6] 4494 	inc	sp
      001327 21 35 1B         [10] 4495 	ld	hl, #0x1b35
      00132A E5               [11] 4496 	push	hl
      00132B CDr00r00         [17] 4497 	call	_WRTVRM
      00132E F1               [10] 4498 	pop	af
      00132F 33               [ 6] 4499 	inc	sp
                                   4500 ;src\/Graphics\Graphics.h:191: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001330 3E 50            [ 7] 4501 	ld	a, #0x50
      001332 F5               [11] 4502 	push	af
      001333 33               [ 6] 4503 	inc	sp
      001334 21 36 1B         [10] 4504 	ld	hl, #0x1b36
      001337 E5               [11] 4505 	push	hl
      001338 CDr00r00         [17] 4506 	call	_WRTVRM
      00133B F1               [10] 4507 	pop	af
      00133C 33               [ 6] 4508 	inc	sp
                                   4509 ;src\/Graphics\Graphics.h:192: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      00133D 3Ar9Cr00         [13] 4510 	ld	a,(#_nextPieceColor_Back + 0)
      001340 F5               [11] 4511 	push	af
      001341 33               [ 6] 4512 	inc	sp
      001342 21 37 1B         [10] 4513 	ld	hl, #0x1b37
      001345 E5               [11] 4514 	push	hl
      001346 CDr00r00         [17] 4515 	call	_WRTVRM
      001349 F1               [10] 4516 	pop	af
      00134A 33               [ 6] 4517 	inc	sp
                                   4518 ;src\/Graphics\Graphics.h:194: GetNextPieceColors(nextBottomPiece);
      00134B 3Ar95r00         [13] 4519 	ld	a,(#_nextBottomPiece + 0)
      00134E F5               [11] 4520 	push	af
      00134F 33               [ 6] 4521 	inc	sp
      001350 CDr7Fr10         [17] 4522 	call	_GetNextPieceColors
      001353 33               [ 6] 4523 	inc	sp
                                   4524 ;src\/Graphics\Graphics.h:195: WRTVRM(SPRATT + 56, 	(6 * 8));
      001354 3E 30            [ 7] 4525 	ld	a, #0x30
      001356 F5               [11] 4526 	push	af
      001357 33               [ 6] 4527 	inc	sp
      001358 21 38 1B         [10] 4528 	ld	hl, #0x1b38
      00135B E5               [11] 4529 	push	hl
      00135C CDr00r00         [17] 4530 	call	_WRTVRM
      00135F F1               [10] 4531 	pop	af
      001360 33               [ 6] 4532 	inc	sp
                                   4533 ;src\/Graphics\Graphics.h:196: WRTVRM(SPRATT + 57, 	(2 * 8)-4);
      001361 3E 0C            [ 7] 4534 	ld	a, #0x0c
      001363 F5               [11] 4535 	push	af
      001364 33               [ 6] 4536 	inc	sp
      001365 21 39 1B         [10] 4537 	ld	hl, #0x1b39
      001368 E5               [11] 4538 	push	hl
      001369 CDr00r00         [17] 4539 	call	_WRTVRM
      00136C F1               [10] 4540 	pop	af
      00136D 33               [ 6] 4541 	inc	sp
                                   4542 ;src\/Graphics\Graphics.h:197: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      00136E 3E 4C            [ 7] 4543 	ld	a, #0x4c
      001370 F5               [11] 4544 	push	af
      001371 33               [ 6] 4545 	inc	sp
      001372 21 3A 1B         [10] 4546 	ld	hl, #0x1b3a
      001375 E5               [11] 4547 	push	hl
      001376 CDr00r00         [17] 4548 	call	_WRTVRM
      001379 F1               [10] 4549 	pop	af
      00137A 33               [ 6] 4550 	inc	sp
                                   4551 ;src\/Graphics\Graphics.h:198: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      00137B 3Ar9Br00         [13] 4552 	ld	a,(#_nextPieceColor_Front + 0)
      00137E F5               [11] 4553 	push	af
      00137F 33               [ 6] 4554 	inc	sp
      001380 21 3B 1B         [10] 4555 	ld	hl, #0x1b3b
      001383 E5               [11] 4556 	push	hl
      001384 CDr00r00         [17] 4557 	call	_WRTVRM
      001387 F1               [10] 4558 	pop	af
      001388 33               [ 6] 4559 	inc	sp
                                   4560 ;src\/Graphics\Graphics.h:199: WRTVRM(SPRATT + 60, 	(6 * 8));
      001389 3E 30            [ 7] 4561 	ld	a, #0x30
      00138B F5               [11] 4562 	push	af
      00138C 33               [ 6] 4563 	inc	sp
      00138D 21 3C 1B         [10] 4564 	ld	hl, #0x1b3c
      001390 E5               [11] 4565 	push	hl
      001391 CDr00r00         [17] 4566 	call	_WRTVRM
      001394 F1               [10] 4567 	pop	af
      001395 33               [ 6] 4568 	inc	sp
                                   4569 ;src\/Graphics\Graphics.h:200: WRTVRM(SPRATT + 61, 	(2 * 8)-4);
      001396 3E 0C            [ 7] 4570 	ld	a, #0x0c
      001398 F5               [11] 4571 	push	af
      001399 33               [ 6] 4572 	inc	sp
      00139A 21 3D 1B         [10] 4573 	ld	hl, #0x1b3d
      00139D E5               [11] 4574 	push	hl
      00139E CDr00r00         [17] 4575 	call	_WRTVRM
      0013A1 F1               [10] 4576 	pop	af
      0013A2 33               [ 6] 4577 	inc	sp
                                   4578 ;src\/Graphics\Graphics.h:201: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0013A3 3E 50            [ 7] 4579 	ld	a, #0x50
      0013A5 F5               [11] 4580 	push	af
      0013A6 33               [ 6] 4581 	inc	sp
      0013A7 21 3E 1B         [10] 4582 	ld	hl, #0x1b3e
      0013AA E5               [11] 4583 	push	hl
      0013AB CDr00r00         [17] 4584 	call	_WRTVRM
      0013AE F1               [10] 4585 	pop	af
      0013AF 33               [ 6] 4586 	inc	sp
                                   4587 ;src\/Graphics\Graphics.h:202: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      0013B0 3Ar9Cr00         [13] 4588 	ld	a,(#_nextPieceColor_Back + 0)
      0013B3 F5               [11] 4589 	push	af
      0013B4 33               [ 6] 4590 	inc	sp
      0013B5 21 3F 1B         [10] 4591 	ld	hl, #0x1b3f
      0013B8 E5               [11] 4592 	push	hl
      0013B9 CDr00r00         [17] 4593 	call	_WRTVRM
                                   4594 ;src\/Graphics\Graphics.h:213: }
      0013BC DD F9            [10] 4595 	ld	sp,ix
      0013BE DD E1            [14] 4596 	pop	ix
      0013C0 C9               [10] 4597 	ret
      0013C1                       4598 ___str_1:
      0013C1 20 4C 45 56 45 4C     4599 	.ascii " LEVEL"
      0013C7 00                    4600 	.db 0x00
      0013C8                       4601 ___str_2:
      0013C8 20 20 20 20 20 20     4602 	.ascii "      "
      0013CE 00                    4603 	.db 0x00
      0013CF                       4604 ___str_3:
      0013CF 4E 45 58 54           4605 	.ascii "NEXT"
      0013D3 00                    4606 	.db 0x00
      0013D4                       4607 ___str_4:
      0013D4 42 4C 4F 43 4B 53     4608 	.ascii "BLOCKS"
      0013DA 00                    4609 	.db 0x00
                                   4610 ;src\/Graphics\Graphics.h:215: void DrawBackground() {
                                   4611 ;	---------------------------------
                                   4612 ; Function DrawBackground
                                   4613 ; ---------------------------------
      0013DB                       4614 _DrawBackground::
                                   4615 ;src\/Graphics\Graphics.h:217: for(int i = 0; i < 256 * 3; i++) {
      0013DB 01 00 00         [10] 4616 	ld	bc, #0x0000
      0013DE                       4617 00103$:
      0013DE 78               [ 4] 4618 	ld	a, b
      0013DF EE 80            [ 7] 4619 	xor	a, #0x80
      0013E1 D6 83            [ 7] 4620 	sub	a, #0x83
      0013E3 30 12            [12] 4621 	jr	NC, 00101$
                                   4622 ;src\/Graphics\Graphics.h:218: WRTVRM(NAMTBL + i, EMPTY); // test
      0013E5 21 00 18         [10] 4623 	ld	hl, #0x1800
      0013E8 09               [11] 4624 	add	hl, bc
      0013E9 C5               [11] 4625 	push	bc
      0013EA AF               [ 4] 4626 	xor	a, a
      0013EB F5               [11] 4627 	push	af
      0013EC 33               [ 6] 4628 	inc	sp
      0013ED E5               [11] 4629 	push	hl
      0013EE CDr00r00         [17] 4630 	call	_WRTVRM
      0013F1 F1               [10] 4631 	pop	af
      0013F2 33               [ 6] 4632 	inc	sp
      0013F3 C1               [10] 4633 	pop	bc
                                   4634 ;src\/Graphics\Graphics.h:217: for(int i = 0; i < 256 * 3; i++) {
      0013F4 03               [ 6] 4635 	inc	bc
      0013F5 18 E7            [12] 4636 	jr	00103$
      0013F7                       4637 00101$:
                                   4638 ;src\/Graphics\Graphics.h:221: DrawColumn(7);
      0013F7 3E 07            [ 7] 4639 	ld	a, #0x07
      0013F9 F5               [11] 4640 	push	af
      0013FA 33               [ 6] 4641 	inc	sp
      0013FB CDrDEr0E         [17] 4642 	call	_DrawColumn
      0013FE 33               [ 6] 4643 	inc	sp
                                   4644 ;src\/Graphics\Graphics.h:222: DrawColumn(22);
      0013FF 3E 16            [ 7] 4645 	ld	a, #0x16
      001401 F5               [11] 4646 	push	af
      001402 33               [ 6] 4647 	inc	sp
      001403 CDrDEr0E         [17] 4648 	call	_DrawColumn
      001406 33               [ 6] 4649 	inc	sp
                                   4650 ;src\/Graphics\Graphics.h:224: DrawScore();
                                   4651 ;src\/Graphics\Graphics.h:260: }
      001407 C3rDAr10         [10] 4652 	jp	_DrawScore
                                   4653 ;src\/Graphics\Graphics.h:262: void InitVRAM() {
                                   4654 ;	---------------------------------
                                   4655 ; Function InitVRAM
                                   4656 ; ---------------------------------
      00140A                       4657 _InitVRAM::
      00140A DD E5            [15] 4658 	push	ix
      00140C DD 21 00 00      [14] 4659 	ld	ix,#0
      001410 DD 39            [15] 4660 	add	ix,sp
      001412 3B               [ 6] 4661 	dec	sp
                                   4662 ;src\/Graphics\Graphics.h:267: CLIKSW = 0;	// disable keyboard sound
      001413 21 00 00         [10] 4663 	ld	hl, #0x0000
      001416 22 DB F3         [16] 4664 	ld	(_CLIKSW), hl
                                   4665 ;src\/Graphics\Graphics.h:268: SCNCNT = 1; 	// set keyboard scan counter
      001419 21 F6 F3         [10] 4666 	ld	hl, #_SCNCNT
      00141C 36 01            [10] 4667 	ld	(hl), #0x01
                                   4668 ;src\/Graphics\Graphics.h:270: FORCLR = COLOR_WHITE;
      00141E 21 E9 F3         [10] 4669 	ld	hl, #_FORCLR
      001421 36 0F            [10] 4670 	ld	(hl), #0x0f
                                   4671 ;src\/Graphics\Graphics.h:271: BAKCLR = COLOR_BLACK;
      001423 21 EA F3         [10] 4672 	ld	hl, #_BAKCLR
      001426 36 01            [10] 4673 	ld	(hl), #0x01
                                   4674 ;src\/Graphics\Graphics.h:272: BDRCLR = COLOR_BLACK;
      001428 21 EB F3         [10] 4675 	ld	hl, #_BDRCLR
      00142B 36 01            [10] 4676 	ld	(hl), #0x01
                                   4677 ;src\/Graphics\Graphics.h:300: WRTVDP(0b0000000111100010);
      00142D 21 E2 01         [10] 4678 	ld	hl, #0x01e2
      001430 CDr00r00         [17] 4679 	call	_WRTVDP
                                   4680 ;src\/Graphics\Graphics.h:302: INIGRP();	// Set screen 2
      001433 CDr00r00         [17] 4681 	call	_INIGRP
                                   4682 ;src\/Graphics\Graphics.h:304: DISSCR();	// Disable screen (faster to write)
      001436 CDr00r00         [17] 4683 	call	_DISSCR
                                   4684 ;src\/Graphics\Graphics.h:308: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001439 AF               [ 4] 4685 	xor	a, a
      00143A F5               [11] 4686 	push	af
      00143B 33               [ 6] 4687 	inc	sp
      00143C 21 00 40         [10] 4688 	ld	hl, #0x4000
      00143F E5               [11] 4689 	push	hl
      001440 65               [ 4] 4690 	ld	h, l
      001441 E5               [11] 4691 	push	hl
      001442 CDr00r00         [17] 4692 	call	_FILVRM
      001445 F1               [10] 4693 	pop	af
                                   4694 ;src\/Graphics\Graphics.h:317: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001446 33               [ 6] 4695 	inc	sp
      001447 21 A0 02         [10] 4696 	ld	hl,#0x02a0
      00144A E3               [19] 4697 	ex	(sp),hl
      00144B 21rA8r07         [10] 4698 	ld	hl, #_sprite_arrow_0
      00144E E5               [11] 4699 	push	hl
      00144F 21 00 38         [10] 4700 	ld	hl, #0x3800
      001452 E5               [11] 4701 	push	hl
      001453 CDr00r00         [17] 4702 	call	_LDIRVM
      001456 21 06 00         [10] 4703 	ld	hl, #6
      001459 39               [11] 4704 	add	hl, sp
      00145A F9               [ 6] 4705 	ld	sp, hl
                                   4706 ;src\/Graphics\Graphics.h:323: for(byte i=0; i<32; i++) {
      00145B 0E 00            [ 7] 4707 	ld	c, #0x00
      00145D                       4708 00110$:
                                   4709 ;src\/Graphics\Graphics.h:324: WRTVRM(SPRATT + (i * 4), 	192);
      00145D 79               [ 4] 4710 	ld	a,c
      00145E FE 20            [ 7] 4711 	cp	a,#0x20
      001460 30 18            [12] 4712 	jr	NC, 00101$
      001462 26 00            [ 7] 4713 	ld	h, #0x00
      001464 6F               [ 4] 4714 	ld	l, a
      001465 29               [11] 4715 	add	hl, hl
      001466 29               [11] 4716 	add	hl, hl
      001467 7C               [ 4] 4717 	ld	a, h
      001468 C6 1B            [ 7] 4718 	add	a, #0x1b
      00146A 67               [ 4] 4719 	ld	h, a
      00146B C5               [11] 4720 	push	bc
      00146C 3E C0            [ 7] 4721 	ld	a, #0xc0
      00146E F5               [11] 4722 	push	af
      00146F 33               [ 6] 4723 	inc	sp
      001470 E5               [11] 4724 	push	hl
      001471 CDr00r00         [17] 4725 	call	_WRTVRM
      001474 F1               [10] 4726 	pop	af
      001475 33               [ 6] 4727 	inc	sp
      001476 C1               [10] 4728 	pop	bc
                                   4729 ;src\/Graphics\Graphics.h:323: for(byte i=0; i<32; i++) {
      001477 0C               [ 4] 4730 	inc	c
      001478 18 E3            [12] 4731 	jr	00110$
      00147A                       4732 00101$:
                                   4733 ;src\/Graphics\Graphics.h:333: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00147A 21 78 01         [10] 4734 	ld	hl, #0x0178
      00147D E5               [11] 4735 	push	hl
      00147E 21r78r04         [10] 4736 	ld	hl, #_pattern_black_0
      001481 E5               [11] 4737 	push	hl
      001482 21 00 00         [10] 4738 	ld	hl, #0x0000
      001485 E5               [11] 4739 	push	hl
      001486 CDr00r00         [17] 4740 	call	_LDIRVM
      001489 21 06 00         [10] 4741 	ld	hl, #6
      00148C 39               [11] 4742 	add	hl, sp
      00148D F9               [ 6] 4743 	ld	sp, hl
                                   4744 ;src\/Graphics\Graphics.h:336: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00148E 21 78 01         [10] 4745 	ld	hl, #0x0178
      001491 E5               [11] 4746 	push	hl
      001492 21r78r04         [10] 4747 	ld	hl, #_pattern_black_0
      001495 E5               [11] 4748 	push	hl
      001496 21 00 08         [10] 4749 	ld	hl, #0x0800
      001499 E5               [11] 4750 	push	hl
      00149A CDr00r00         [17] 4751 	call	_LDIRVM
      00149D 21 06 00         [10] 4752 	ld	hl, #6
      0014A0 39               [11] 4753 	add	hl, sp
      0014A1 F9               [ 6] 4754 	ld	sp, hl
                                   4755 ;src\/Graphics\Graphics.h:339: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014A2 21 78 01         [10] 4756 	ld	hl, #0x0178
      0014A5 E5               [11] 4757 	push	hl
      0014A6 21r78r04         [10] 4758 	ld	hl, #_pattern_black_0
      0014A9 E5               [11] 4759 	push	hl
      0014AA 21 00 10         [10] 4760 	ld	hl, #0x1000
      0014AD E5               [11] 4761 	push	hl
      0014AE CDr00r00         [17] 4762 	call	_LDIRVM
      0014B1 21 06 00         [10] 4763 	ld	hl, #6
      0014B4 39               [11] 4764 	add	hl, sp
      0014B5 F9               [ 6] 4765 	ld	sp, hl
                                   4766 ;src\/Graphics\Graphics.h:342: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014B6 21 00 03         [10] 4767 	ld	hl, #0x0300
      0014B9 E5               [11] 4768 	push	hl
      0014BA 21r78r01         [10] 4769 	ld	hl, #_FONT
      0014BD E5               [11] 4770 	push	hl
      0014BE 21 78 01         [10] 4771 	ld	hl, #0x0178
      0014C1 E5               [11] 4772 	push	hl
      0014C2 CDr00r00         [17] 4773 	call	_LDIRVM
      0014C5 21 06 00         [10] 4774 	ld	hl, #6
      0014C8 39               [11] 4775 	add	hl, sp
      0014C9 F9               [ 6] 4776 	ld	sp, hl
                                   4777 ;src\/Graphics\Graphics.h:345: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014CA 21 00 03         [10] 4778 	ld	hl, #0x0300
      0014CD E5               [11] 4779 	push	hl
      0014CE 21r78r01         [10] 4780 	ld	hl, #_FONT
      0014D1 E5               [11] 4781 	push	hl
      0014D2 21 78 09         [10] 4782 	ld	hl, #0x0978
      0014D5 E5               [11] 4783 	push	hl
      0014D6 CDr00r00         [17] 4784 	call	_LDIRVM
      0014D9 21 06 00         [10] 4785 	ld	hl, #6
      0014DC 39               [11] 4786 	add	hl, sp
      0014DD F9               [ 6] 4787 	ld	sp, hl
                                   4788 ;src\/Graphics\Graphics.h:348: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014DE 21 00 03         [10] 4789 	ld	hl, #0x0300
      0014E1 E5               [11] 4790 	push	hl
      0014E2 21r78r01         [10] 4791 	ld	hl, #_FONT
      0014E5 E5               [11] 4792 	push	hl
      0014E6 21 78 11         [10] 4793 	ld	hl, #0x1178
      0014E9 E5               [11] 4794 	push	hl
      0014EA CDr00r00         [17] 4795 	call	_LDIRVM
      0014ED 21 06 00         [10] 4796 	ld	hl, #6
      0014F0 39               [11] 4797 	add	hl, sp
      0014F1 F9               [ 6] 4798 	ld	sp, hl
                                   4799 ;src\/Graphics\Graphics.h:352: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0014F2 0E 00            [ 7] 4800 	ld	c, #0x00
      0014F4                       4801 00113$:
                                   4802 ;src\/Graphics\Graphics.h:353: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0014F4 79               [ 4] 4803 	ld	a,c
      0014F5 FE 07            [ 7] 4804 	cp	a,#0x07
      0014F7 30 20            [12] 4805 	jr	NC, 00102$
      0014F9 26 00            [ 7] 4806 	ld	h, #0x00
      0014FB 6F               [ 4] 4807 	ld	l, a
      0014FC 29               [11] 4808 	add	hl, hl
      0014FD 29               [11] 4809 	add	hl, hl
      0014FE 29               [11] 4810 	add	hl, hl
      0014FF 11 70 04         [10] 4811 	ld	de, #0x0470
      001502 19               [11] 4812 	add	hl, de
      001503 C5               [11] 4813 	push	bc
      001504 11 38 00         [10] 4814 	ld	de, #0x0038
      001507 D5               [11] 4815 	push	de
      001508 11rE8r05         [10] 4816 	ld	de, #_pattern_title
      00150B D5               [11] 4817 	push	de
      00150C E5               [11] 4818 	push	hl
      00150D CDr00r00         [17] 4819 	call	_LDIRVM
      001510 21 06 00         [10] 4820 	ld	hl, #6
      001513 39               [11] 4821 	add	hl, sp
      001514 F9               [ 6] 4822 	ld	sp, hl
      001515 C1               [10] 4823 	pop	bc
                                   4824 ;src\/Graphics\Graphics.h:352: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001516 0C               [ 4] 4825 	inc	c
      001517 18 DB            [12] 4826 	jr	00113$
      001519                       4827 00102$:
                                   4828 ;src\/Graphics\Graphics.h:359: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001519 21 78 01         [10] 4829 	ld	hl, #0x0178
      00151C E5               [11] 4830 	push	hl
      00151D 21rF0r05         [10] 4831 	ld	hl, #_color_black_0
      001520 E5               [11] 4832 	push	hl
      001521 21 00 20         [10] 4833 	ld	hl, #0x2000
      001524 E5               [11] 4834 	push	hl
      001525 CDr00r00         [17] 4835 	call	_LDIRVM
      001528 21 06 00         [10] 4836 	ld	hl, #6
      00152B 39               [11] 4837 	add	hl, sp
      00152C F9               [ 6] 4838 	ld	sp, hl
                                   4839 ;src\/Graphics\Graphics.h:361: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00152D 21 78 01         [10] 4840 	ld	hl, #0x0178
      001530 E5               [11] 4841 	push	hl
      001531 21rF0r05         [10] 4842 	ld	hl, #_color_black_0
      001534 E5               [11] 4843 	push	hl
      001535 21 00 28         [10] 4844 	ld	hl, #0x2800
      001538 E5               [11] 4845 	push	hl
      001539 CDr00r00         [17] 4846 	call	_LDIRVM
      00153C 21 06 00         [10] 4847 	ld	hl, #6
      00153F 39               [11] 4848 	add	hl, sp
      001540 F9               [ 6] 4849 	ld	sp, hl
                                   4850 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001541 21 78 01         [10] 4851 	ld	hl, #0x0178
      001544 E5               [11] 4852 	push	hl
      001545 21rF0r05         [10] 4853 	ld	hl, #_color_black_0
      001548 E5               [11] 4854 	push	hl
      001549 21 00 30         [10] 4855 	ld	hl, #0x3000
      00154C E5               [11] 4856 	push	hl
      00154D CDr00r00         [17] 4857 	call	_LDIRVM
      001550 21 06 00         [10] 4858 	ld	hl, #6
      001553 39               [11] 4859 	add	hl, sp
      001554 F9               [ 6] 4860 	ld	sp, hl
                                   4861 ;src\/Graphics\Graphics.h:370: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001555 0E 00            [ 7] 4862 	ld	c, #0x00
      001557                       4863 00116$:
                                   4864 ;src\/Graphics\Graphics.h:371: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001557 79               [ 4] 4865 	ld	a,c
      001558 FE 60            [ 7] 4866 	cp	a,#0x60
      00155A 30 20            [12] 4867 	jr	NC, 00103$
      00155C 26 00            [ 7] 4868 	ld	h, #0x00
      00155E 6F               [ 4] 4869 	ld	l, a
      00155F 29               [11] 4870 	add	hl, hl
      001560 29               [11] 4871 	add	hl, hl
      001561 29               [11] 4872 	add	hl, hl
      001562 11 78 21         [10] 4873 	ld	de, #0x2178
      001565 19               [11] 4874 	add	hl, de
      001566 C5               [11] 4875 	push	bc
      001567 11 08 00         [10] 4876 	ld	de, #0x0008
      00156A D5               [11] 4877 	push	de
      00156B 11r68r07         [10] 4878 	ld	de, #_color_font_2
      00156E D5               [11] 4879 	push	de
      00156F E5               [11] 4880 	push	hl
      001570 CDr00r00         [17] 4881 	call	_LDIRVM
      001573 21 06 00         [10] 4882 	ld	hl, #6
      001576 39               [11] 4883 	add	hl, sp
      001577 F9               [ 6] 4884 	ld	sp, hl
      001578 C1               [10] 4885 	pop	bc
                                   4886 ;src\/Graphics\Graphics.h:370: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001579 0C               [ 4] 4887 	inc	c
      00157A 18 DB            [12] 4888 	jr	00116$
      00157C                       4889 00103$:
                                   4890 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00157C 0E 00            [ 7] 4891 	ld	c, #0x00
      00157E                       4892 00119$:
                                   4893 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00157E 79               [ 4] 4894 	ld	a,c
      00157F FE 60            [ 7] 4895 	cp	a,#0x60
      001581 30 20            [12] 4896 	jr	NC, 00104$
      001583 26 00            [ 7] 4897 	ld	h, #0x00
      001585 6F               [ 4] 4898 	ld	l, a
      001586 29               [11] 4899 	add	hl, hl
      001587 29               [11] 4900 	add	hl, hl
      001588 29               [11] 4901 	add	hl, hl
      001589 11 78 29         [10] 4902 	ld	de, #0x2978
      00158C 19               [11] 4903 	add	hl, de
      00158D C5               [11] 4904 	push	bc
      00158E 11 08 00         [10] 4905 	ld	de, #0x0008
      001591 D5               [11] 4906 	push	de
      001592 11r68r07         [10] 4907 	ld	de, #_color_font_2
      001595 D5               [11] 4908 	push	de
      001596 E5               [11] 4909 	push	hl
      001597 CDr00r00         [17] 4910 	call	_LDIRVM
      00159A 21 06 00         [10] 4911 	ld	hl, #6
      00159D 39               [11] 4912 	add	hl, sp
      00159E F9               [ 6] 4913 	ld	sp, hl
      00159F C1               [10] 4914 	pop	bc
                                   4915 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015A0 0C               [ 4] 4916 	inc	c
      0015A1 18 DB            [12] 4917 	jr	00119$
      0015A3                       4918 00104$:
                                   4919 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015A3 0E 00            [ 7] 4920 	ld	c, #0x00
      0015A5                       4921 00122$:
                                   4922 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0015A5 79               [ 4] 4923 	ld	a,c
      0015A6 FE 60            [ 7] 4924 	cp	a,#0x60
      0015A8 30 20            [12] 4925 	jr	NC, 00105$
      0015AA 26 00            [ 7] 4926 	ld	h, #0x00
      0015AC 6F               [ 4] 4927 	ld	l, a
      0015AD 29               [11] 4928 	add	hl, hl
      0015AE 29               [11] 4929 	add	hl, hl
      0015AF 29               [11] 4930 	add	hl, hl
      0015B0 11 78 31         [10] 4931 	ld	de, #0x3178
      0015B3 19               [11] 4932 	add	hl, de
      0015B4 C5               [11] 4933 	push	bc
      0015B5 11 08 00         [10] 4934 	ld	de, #0x0008
      0015B8 D5               [11] 4935 	push	de
      0015B9 11r68r07         [10] 4936 	ld	de, #_color_font_2
      0015BC D5               [11] 4937 	push	de
      0015BD E5               [11] 4938 	push	hl
      0015BE CDr00r00         [17] 4939 	call	_LDIRVM
      0015C1 21 06 00         [10] 4940 	ld	hl, #6
      0015C4 39               [11] 4941 	add	hl, sp
      0015C5 F9               [ 6] 4942 	ld	sp, hl
      0015C6 C1               [10] 4943 	pop	bc
                                   4944 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015C7 0C               [ 4] 4945 	inc	c
      0015C8 18 DB            [12] 4946 	jr	00122$
      0015CA                       4947 00105$:
                                   4948 ;src\/Graphics\Graphics.h:387: for(byte i = 0; i < 10; i++) {
      0015CA 0E 00            [ 7] 4949 	ld	c, #0x00
      0015CC                       4950 00125$:
                                   4951 ;src\/Graphics\Graphics.h:388: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0015CC 79               [ 4] 4952 	ld	a,c
      0015CD FE 0A            [ 7] 4953 	cp	a,#0x0a
      0015CF 30 20            [12] 4954 	jr	NC, 00106$
      0015D1 26 00            [ 7] 4955 	ld	h, #0x00
      0015D3 6F               [ 4] 4956 	ld	l, a
      0015D4 29               [11] 4957 	add	hl, hl
      0015D5 29               [11] 4958 	add	hl, hl
      0015D6 29               [11] 4959 	add	hl, hl
      0015D7 11 F8 21         [10] 4960 	ld	de, #0x21f8
      0015DA 19               [11] 4961 	add	hl, de
      0015DB C5               [11] 4962 	push	bc
      0015DC 11 08 00         [10] 4963 	ld	de, #0x0008
      0015DF D5               [11] 4964 	push	de
      0015E0 11r60r07         [10] 4965 	ld	de, #_color_font_1
      0015E3 D5               [11] 4966 	push	de
      0015E4 E5               [11] 4967 	push	hl
      0015E5 CDr00r00         [17] 4968 	call	_LDIRVM
      0015E8 21 06 00         [10] 4969 	ld	hl, #6
      0015EB 39               [11] 4970 	add	hl, sp
      0015EC F9               [ 6] 4971 	ld	sp, hl
      0015ED C1               [10] 4972 	pop	bc
                                   4973 ;src\/Graphics\Graphics.h:387: for(byte i = 0; i < 10; i++) {
      0015EE 0C               [ 4] 4974 	inc	c
      0015EF 18 DB            [12] 4975 	jr	00125$
      0015F1                       4976 00106$:
                                   4977 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      0015F1 0E 00            [ 7] 4978 	ld	c, #0x00
      0015F3                       4979 00128$:
                                   4980 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0015F3 79               [ 4] 4981 	ld	a,c
      0015F4 FE 0A            [ 7] 4982 	cp	a,#0x0a
      0015F6 30 20            [12] 4983 	jr	NC, 00107$
      0015F8 26 00            [ 7] 4984 	ld	h, #0x00
      0015FA 6F               [ 4] 4985 	ld	l, a
      0015FB 29               [11] 4986 	add	hl, hl
      0015FC 29               [11] 4987 	add	hl, hl
      0015FD 29               [11] 4988 	add	hl, hl
      0015FE 11 F8 29         [10] 4989 	ld	de, #0x29f8
      001601 19               [11] 4990 	add	hl, de
      001602 C5               [11] 4991 	push	bc
      001603 11 08 00         [10] 4992 	ld	de, #0x0008
      001606 D5               [11] 4993 	push	de
      001607 11r60r07         [10] 4994 	ld	de, #_color_font_1
      00160A D5               [11] 4995 	push	de
      00160B E5               [11] 4996 	push	hl
      00160C CDr00r00         [17] 4997 	call	_LDIRVM
      00160F 21 06 00         [10] 4998 	ld	hl, #6
      001612 39               [11] 4999 	add	hl, sp
      001613 F9               [ 6] 5000 	ld	sp, hl
      001614 C1               [10] 5001 	pop	bc
                                   5002 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      001615 0C               [ 4] 5003 	inc	c
      001616 18 DB            [12] 5004 	jr	00128$
      001618                       5005 00107$:
                                   5006 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001618 DD 36 FF 00      [19] 5007 	ld	-1 (ix), #0
      00161C                       5008 00131$:
      00161C DD 7E FF         [19] 5009 	ld	a, -1 (ix)
      00161F D6 0A            [ 7] 5010 	sub	a, #0x0a
      001621 30 22            [12] 5011 	jr	NC, 00108$
                                   5012 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001623 01r60r07         [10] 5013 	ld	bc, #_color_font_1
      001626 DD 6E FF         [19] 5014 	ld	l, -1 (ix)
      001629 26 00            [ 7] 5015 	ld	h, #0x00
      00162B 29               [11] 5016 	add	hl, hl
      00162C 29               [11] 5017 	add	hl, hl
      00162D 29               [11] 5018 	add	hl, hl
      00162E 11 F8 31         [10] 5019 	ld	de, #0x31f8
      001631 19               [11] 5020 	add	hl, de
      001632 11 08 00         [10] 5021 	ld	de, #0x0008
      001635 D5               [11] 5022 	push	de
      001636 C5               [11] 5023 	push	bc
      001637 E5               [11] 5024 	push	hl
      001638 CDr00r00         [17] 5025 	call	_LDIRVM
      00163B 21 06 00         [10] 5026 	ld	hl, #6
      00163E 39               [11] 5027 	add	hl, sp
      00163F F9               [ 6] 5028 	ld	sp, hl
                                   5029 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001640 DD 34 FF         [23] 5030 	inc	-1 (ix)
      001643 18 D7            [12] 5031 	jr	00131$
      001645                       5032 00108$:
                                   5033 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001645 21 38 00         [10] 5034 	ld	hl, #0x0038
      001648 E5               [11] 5035 	push	hl
      001649 21r70r07         [10] 5036 	ld	hl, #_color_title_1
      00164C E5               [11] 5037 	push	hl
      00164D 21 70 24         [10] 5038 	ld	hl, #0x2470
      001650 E5               [11] 5039 	push	hl
      001651 CDr00r00         [17] 5040 	call	_LDIRVM
      001654 21 06 00         [10] 5041 	ld	hl, #6
      001657 39               [11] 5042 	add	hl, sp
      001658 F9               [ 6] 5043 	ld	sp, hl
                                   5044 ;src\/Graphics\Graphics.h:408: ENASCR();	// Enable screen
      001659 CDr00r00         [17] 5045 	call	_ENASCR
                                   5046 ;src\/Graphics\Graphics.h:409: }
      00165C 33               [ 6] 5047 	inc	sp
      00165D DD E1            [14] 5048 	pop	ix
      00165F C9               [10] 5049 	ret
                                   5050 ;src\/Graphics\Graphics.h:411: void DrawBlock(byte col, byte line, byte tile) {
                                   5051 ;	---------------------------------
                                   5052 ; Function DrawBlock
                                   5053 ; ---------------------------------
      001660                       5054 _DrawBlock::
      001660 DD E5            [15] 5055 	push	ix
      001662 DD 21 00 00      [14] 5056 	ld	ix,#0
      001666 DD 39            [15] 5057 	add	ix,sp
                                   5058 ;src\/Graphics\Graphics.h:413: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001668 DD 6E 04         [19] 5059 	ld	l, 4 (ix)
      00166B 26 00            [ 7] 5060 	ld	h, #0x00
      00166D 29               [11] 5061 	add	hl, hl
      00166E 4D               [ 4] 5062 	ld	c, l
      00166F 44               [ 4] 5063 	ld	b, h
      001670 DD 6E 05         [19] 5064 	ld	l, 5 (ix)
      001673 26 00            [ 7] 5065 	ld	h, #0x00
      001675 29               [11] 5066 	add	hl, hl
      001676 29               [11] 5067 	add	hl, hl
      001677 29               [11] 5068 	add	hl, hl
      001678 29               [11] 5069 	add	hl, hl
      001679 29               [11] 5070 	add	hl, hl
      00167A 29               [11] 5071 	add	hl, hl
      00167B 11 0A 18         [10] 5072 	ld	de, #0x180a
      00167E 19               [11] 5073 	add	hl, de
      00167F 09               [11] 5074 	add	hl, bc
      001680 EB               [ 4] 5075 	ex	de, hl
                                   5076 ;src\/Graphics\Graphics.h:415: WRTVRM(baseAddr, tile);
      001681 D5               [11] 5077 	push	de
      001682 DD 7E 06         [19] 5078 	ld	a, 6 (ix)
      001685 F5               [11] 5079 	push	af
      001686 33               [ 6] 5080 	inc	sp
      001687 D5               [11] 5081 	push	de
      001688 CDr00r00         [17] 5082 	call	_WRTVRM
      00168B F1               [10] 5083 	pop	af
      00168C 33               [ 6] 5084 	inc	sp
      00168D D1               [10] 5085 	pop	de
                                   5086 ;src\/Graphics\Graphics.h:416: WRTVRM(baseAddr + 1, tile + 1);
      00168E DD 4E 06         [19] 5087 	ld	c, 6 (ix)
      001691 79               [ 4] 5088 	ld	a, c
      001692 3C               [ 4] 5089 	inc	a
      001693 6B               [ 4] 5090 	ld	l, e
      001694 62               [ 4] 5091 	ld	h, d
      001695 23               [ 6] 5092 	inc	hl
      001696 C5               [11] 5093 	push	bc
      001697 D5               [11] 5094 	push	de
      001698 F5               [11] 5095 	push	af
      001699 33               [ 6] 5096 	inc	sp
      00169A E5               [11] 5097 	push	hl
      00169B CDr00r00         [17] 5098 	call	_WRTVRM
      00169E F1               [10] 5099 	pop	af
      00169F 33               [ 6] 5100 	inc	sp
      0016A0 D1               [10] 5101 	pop	de
      0016A1 C1               [10] 5102 	pop	bc
                                   5103 ;src\/Graphics\Graphics.h:417: WRTVRM(baseAddr + 32, tile + 2);
      0016A2 41               [ 4] 5104 	ld	b, c
      0016A3 04               [ 4] 5105 	inc	b
      0016A4 04               [ 4] 5106 	inc	b
      0016A5 21 20 00         [10] 5107 	ld	hl, #0x0020
      0016A8 19               [11] 5108 	add	hl, de
      0016A9 C5               [11] 5109 	push	bc
      0016AA D5               [11] 5110 	push	de
      0016AB C5               [11] 5111 	push	bc
      0016AC 33               [ 6] 5112 	inc	sp
      0016AD E5               [11] 5113 	push	hl
      0016AE CDr00r00         [17] 5114 	call	_WRTVRM
      0016B1 F1               [10] 5115 	pop	af
      0016B2 33               [ 6] 5116 	inc	sp
      0016B3 D1               [10] 5117 	pop	de
      0016B4 C1               [10] 5118 	pop	bc
                                   5119 ;src\/Graphics\Graphics.h:418: WRTVRM(baseAddr + 33, tile + 3);
      0016B5 0C               [ 4] 5120 	inc	c
      0016B6 0C               [ 4] 5121 	inc	c
      0016B7 0C               [ 4] 5122 	inc	c
      0016B8 21 21 00         [10] 5123 	ld	hl, #0x0021
      0016BB 19               [11] 5124 	add	hl, de
      0016BC 79               [ 4] 5125 	ld	a, c
      0016BD F5               [11] 5126 	push	af
      0016BE 33               [ 6] 5127 	inc	sp
      0016BF E5               [11] 5128 	push	hl
      0016C0 CDr00r00         [17] 5129 	call	_WRTVRM
      0016C3 F1               [10] 5130 	pop	af
      0016C4 33               [ 6] 5131 	inc	sp
                                   5132 ;src\/Graphics\Graphics.h:419: }
      0016C5 DD E1            [14] 5133 	pop	ix
      0016C7 C9               [10] 5134 	ret
                                   5135 ;src\/Graphics\Graphics.h:421: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   5136 ;	---------------------------------
                                   5137 ; Function DrawBlock_SameTile
                                   5138 ; ---------------------------------
      0016C8                       5139 _DrawBlock_SameTile::
      0016C8 DD E5            [15] 5140 	push	ix
      0016CA DD 21 00 00      [14] 5141 	ld	ix,#0
      0016CE DD 39            [15] 5142 	add	ix,sp
                                   5143 ;src\/Graphics\Graphics.h:423: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0016D0 DD 6E 04         [19] 5144 	ld	l, 4 (ix)
      0016D3 26 00            [ 7] 5145 	ld	h, #0x00
      0016D5 29               [11] 5146 	add	hl, hl
      0016D6 4D               [ 4] 5147 	ld	c, l
      0016D7 44               [ 4] 5148 	ld	b, h
      0016D8 DD 6E 05         [19] 5149 	ld	l, 5 (ix)
      0016DB 26 00            [ 7] 5150 	ld	h, #0x00
      0016DD 29               [11] 5151 	add	hl, hl
      0016DE 29               [11] 5152 	add	hl, hl
      0016DF 29               [11] 5153 	add	hl, hl
      0016E0 29               [11] 5154 	add	hl, hl
      0016E1 29               [11] 5155 	add	hl, hl
      0016E2 29               [11] 5156 	add	hl, hl
      0016E3 11 0A 18         [10] 5157 	ld	de, #0x180a
      0016E6 19               [11] 5158 	add	hl, de
      0016E7 09               [11] 5159 	add	hl, bc
      0016E8 EB               [ 4] 5160 	ex	de, hl
                                   5161 ;src\/Graphics\Graphics.h:425: WRTVRM(baseAddr, tile);
      0016E9 D5               [11] 5162 	push	de
      0016EA DD 7E 06         [19] 5163 	ld	a, 6 (ix)
      0016ED F5               [11] 5164 	push	af
      0016EE 33               [ 6] 5165 	inc	sp
      0016EF D5               [11] 5166 	push	de
      0016F0 CDr00r00         [17] 5167 	call	_WRTVRM
      0016F3 F1               [10] 5168 	pop	af
      0016F4 33               [ 6] 5169 	inc	sp
      0016F5 D1               [10] 5170 	pop	de
                                   5171 ;src\/Graphics\Graphics.h:426: WRTVRM(baseAddr + 1, tile);
      0016F6 4B               [ 4] 5172 	ld	c, e
      0016F7 42               [ 4] 5173 	ld	b, d
      0016F8 03               [ 6] 5174 	inc	bc
      0016F9 D5               [11] 5175 	push	de
      0016FA DD 7E 06         [19] 5176 	ld	a, 6 (ix)
      0016FD F5               [11] 5177 	push	af
      0016FE 33               [ 6] 5178 	inc	sp
      0016FF C5               [11] 5179 	push	bc
      001700 CDr00r00         [17] 5180 	call	_WRTVRM
      001703 F1               [10] 5181 	pop	af
      001704 33               [ 6] 5182 	inc	sp
      001705 D1               [10] 5183 	pop	de
                                   5184 ;src\/Graphics\Graphics.h:427: WRTVRM(baseAddr + 32, tile);
      001706 21 20 00         [10] 5185 	ld	hl, #0x0020
      001709 19               [11] 5186 	add	hl, de
      00170A D5               [11] 5187 	push	de
      00170B DD 7E 06         [19] 5188 	ld	a, 6 (ix)
      00170E F5               [11] 5189 	push	af
      00170F 33               [ 6] 5190 	inc	sp
      001710 E5               [11] 5191 	push	hl
      001711 CDr00r00         [17] 5192 	call	_WRTVRM
      001714 F1               [10] 5193 	pop	af
      001715 33               [ 6] 5194 	inc	sp
      001716 D1               [10] 5195 	pop	de
                                   5196 ;src\/Graphics\Graphics.h:428: WRTVRM(baseAddr + 33, tile);
      001717 21 21 00         [10] 5197 	ld	hl, #0x0021
      00171A 19               [11] 5198 	add	hl, de
      00171B DD 7E 06         [19] 5199 	ld	a, 6 (ix)
      00171E F5               [11] 5200 	push	af
      00171F 33               [ 6] 5201 	inc	sp
      001720 E5               [11] 5202 	push	hl
      001721 CDr00r00         [17] 5203 	call	_WRTVRM
      001724 F1               [10] 5204 	pop	af
      001725 33               [ 6] 5205 	inc	sp
                                   5206 ;src\/Graphics\Graphics.h:429: }
      001726 DD E1            [14] 5207 	pop	ix
      001728 C9               [10] 5208 	ret
                                   5209 ;src\/Graphics\Graphics.h:431: void DrawLine(byte line) {
                                   5210 ;	---------------------------------
                                   5211 ; Function DrawLine
                                   5212 ; ---------------------------------
      001729                       5213 _DrawLine::
      001729 DD E5            [15] 5214 	push	ix
      00172B DD 21 00 00      [14] 5215 	ld	ix,#0
      00172F DD 39            [15] 5216 	add	ix,sp
                                   5217 ;src\/Graphics\Graphics.h:432: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001731 DD 4E 04         [19] 5218 	ld	c, 4 (ix)
      001734 06 00            [ 7] 5219 	ld	b, #0x00
      001736                       5220 00103$:
      001736 78               [ 4] 5221 	ld	a, b
      001737 D6 06            [ 7] 5222 	sub	a, #0x06
      001739 30 23            [12] 5223 	jr	NC, 00105$
                                   5224 ;src\/Graphics\Graphics.h:433: DrawBlock(col, line, playfield[col][line]);
      00173B 58               [ 4] 5225 	ld	e, b
      00173C 16 00            [ 7] 5226 	ld	d, #0x00
      00173E 6B               [ 4] 5227 	ld	l, e
      00173F 62               [ 4] 5228 	ld	h, d
      001740 29               [11] 5229 	add	hl, hl
      001741 19               [11] 5230 	add	hl, de
      001742 29               [11] 5231 	add	hl, hl
      001743 29               [11] 5232 	add	hl, hl
      001744 11r00r00         [10] 5233 	ld	de, #_playfield
      001747 19               [11] 5234 	add	hl, de
      001748 59               [ 4] 5235 	ld	e, c
      001749 16 00            [ 7] 5236 	ld	d, #0x00
      00174B 19               [11] 5237 	add	hl, de
      00174C 7E               [ 7] 5238 	ld	a, (hl)
      00174D C5               [11] 5239 	push	bc
      00174E F5               [11] 5240 	push	af
      00174F 33               [ 6] 5241 	inc	sp
      001750 79               [ 4] 5242 	ld	a, c
      001751 F5               [11] 5243 	push	af
      001752 33               [ 6] 5244 	inc	sp
      001753 C5               [11] 5245 	push	bc
      001754 33               [ 6] 5246 	inc	sp
      001755 CDr60r16         [17] 5247 	call	_DrawBlock
      001758 F1               [10] 5248 	pop	af
      001759 33               [ 6] 5249 	inc	sp
      00175A C1               [10] 5250 	pop	bc
                                   5251 ;src\/Graphics\Graphics.h:432: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00175B 04               [ 4] 5252 	inc	b
      00175C 18 D8            [12] 5253 	jr	00103$
      00175E                       5254 00105$:
                                   5255 ;src\/Graphics\Graphics.h:435: }
      00175E DD E1            [14] 5256 	pop	ix
      001760 C9               [10] 5257 	ret
                                   5258 ;src\/Graphics\Graphics.h:437: void DrawPiece(byte line) {
                                   5259 ;	---------------------------------
                                   5260 ; Function DrawPiece
                                   5261 ; ---------------------------------
      001761                       5262 _DrawPiece::
                                   5263 ;src\/Graphics\Graphics.h:438: DrawLine(line);
      001761 21 02 00         [10] 5264 	ld	hl, #2
      001764 39               [11] 5265 	add	hl, sp
      001765 7E               [ 7] 5266 	ld	a, (hl)
      001766 F5               [11] 5267 	push	af
      001767 33               [ 6] 5268 	inc	sp
      001768 CDr29r17         [17] 5269 	call	_DrawLine
      00176B 33               [ 6] 5270 	inc	sp
                                   5271 ;src\/Graphics\Graphics.h:439: DrawLine(line + 1);
      00176C 21 02 00         [10] 5272 	ld	hl, #2
      00176F 39               [11] 5273 	add	hl, sp
      001770 46               [ 7] 5274 	ld	b, (hl)
      001771 78               [ 4] 5275 	ld	a, b
      001772 3C               [ 4] 5276 	inc	a
      001773 C5               [11] 5277 	push	bc
      001774 F5               [11] 5278 	push	af
      001775 33               [ 6] 5279 	inc	sp
      001776 CDr29r17         [17] 5280 	call	_DrawLine
      001779 33               [ 6] 5281 	inc	sp
      00177A C1               [10] 5282 	pop	bc
                                   5283 ;src\/Graphics\Graphics.h:440: DrawLine(line + 2);
      00177B 04               [ 4] 5284 	inc	b
      00177C 04               [ 4] 5285 	inc	b
      00177D C5               [11] 5286 	push	bc
      00177E 33               [ 6] 5287 	inc	sp
      00177F CDr29r17         [17] 5288 	call	_DrawLine
      001782 33               [ 6] 5289 	inc	sp
                                   5290 ;src\/Graphics\Graphics.h:441: }
      001783 C9               [10] 5291 	ret
                                   5292 ;src\/Graphics\Graphics.h:443: void DrawPlayfield() {
                                   5293 ;	---------------------------------
                                   5294 ; Function DrawPlayfield
                                   5295 ; ---------------------------------
      001784                       5296 _DrawPlayfield::
                                   5297 ;src\/Graphics\Graphics.h:444: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001784 06 00            [ 7] 5298 	ld	b, #0x00
      001786                       5299 00103$:
      001786 78               [ 4] 5300 	ld	a, b
      001787 D6 0C            [ 7] 5301 	sub	a, #0x0c
      001789 D0               [11] 5302 	ret	NC
                                   5303 ;src\/Graphics\Graphics.h:445: DrawLine(line);
      00178A C5               [11] 5304 	push	bc
      00178B C5               [11] 5305 	push	bc
      00178C 33               [ 6] 5306 	inc	sp
      00178D CDr29r17         [17] 5307 	call	_DrawLine
      001790 33               [ 6] 5308 	inc	sp
      001791 C1               [10] 5309 	pop	bc
                                   5310 ;src\/Graphics\Graphics.h:444: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001792 04               [ 4] 5311 	inc	b
                                   5312 ;src\/Graphics\Graphics.h:447: }
      001793 18 F1            [12] 5313 	jr	00103$
                                   5314 ;src\/Sound.h:1: void SoundFx_2() {
                                   5315 ;	---------------------------------
                                   5316 ; Function SoundFx_2
                                   5317 ; ---------------------------------
      001795                       5318 _SoundFx_2::
                                   5319 ;src\/Sound.h:2: GICINI();
      001795 CDr00r00         [17] 5320 	call	_GICINI
                                   5321 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001798 21 08 0F         [10] 5322 	ld	hl, #0x0f08
      00179B CDr00r00         [17] 5323 	call	_WRTPSG
                                   5324 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00179E 0E 00            [ 7] 5325 	ld	c, #0x00
      0017A0                       5326 00104$:
      0017A0 79               [ 4] 5327 	ld	a, c
      0017A1 D6 FF            [ 7] 5328 	sub	a, #0xff
      0017A3 30 11            [12] 5329 	jr	NC, 00101$
                                   5330 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0017A5 C5               [11] 5331 	push	bc
      0017A6 21 00 5D         [10] 5332 	ld	hl, #0x5d00
      0017A9 CDr00r00         [17] 5333 	call	_WRTPSG
      0017AC 21 01 00         [10] 5334 	ld	hl, #0x0001
      0017AF CDr00r00         [17] 5335 	call	_WRTPSG
      0017B2 C1               [10] 5336 	pop	bc
                                   5337 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0017B3 0C               [ 4] 5338 	inc	c
      0017B4 18 EA            [12] 5339 	jr	00104$
      0017B6                       5340 00101$:
                                   5341 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0017B6 0E 00            [ 7] 5342 	ld	c, #0x00
      0017B8                       5343 00107$:
      0017B8 79               [ 4] 5344 	ld	a, c
      0017B9 D6 FF            [ 7] 5345 	sub	a, #0xff
      0017BB 30 11            [12] 5346 	jr	NC, 00102$
                                   5347 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0017BD C5               [11] 5348 	push	bc
      0017BE 21 00 2D         [10] 5349 	ld	hl, #0x2d00
      0017C1 CDr00r00         [17] 5350 	call	_WRTPSG
      0017C4 21 01 00         [10] 5351 	ld	hl, #0x0001
      0017C7 CDr00r00         [17] 5352 	call	_WRTPSG
      0017CA C1               [10] 5353 	pop	bc
                                   5354 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0017CB 0C               [ 4] 5355 	inc	c
      0017CC 18 EA            [12] 5356 	jr	00107$
      0017CE                       5357 00102$:
                                   5358 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0017CE 21 08 00         [10] 5359 	ld	hl, #0x0008
                                   5360 ;src\/Sound.h:30: }
      0017D1 C3r00r00         [10] 5361 	jp	_WRTPSG
                                   5362 ;src\/Sound.h:32: void SoundFx_1() {
                                   5363 ;	---------------------------------
                                   5364 ; Function SoundFx_1
                                   5365 ; ---------------------------------
      0017D4                       5366 _SoundFx_1::
                                   5367 ;src\/Sound.h:34: GICINI();
      0017D4 CDr00r00         [17] 5368 	call	_GICINI
                                   5369 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0017D7 21 06 97         [10] 5370 	ld	hl, #0x9706
      0017DA CDr00r00         [17] 5371 	call	_WRTPSG
                                   5372 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0017DD 21 07 81         [10] 5373 	ld	hl, #0x8107
      0017E0 CDr00r00         [17] 5374 	call	_WRTPSG
                                   5375 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0017E3 21 08 10         [10] 5376 	ld	hl, #0x1008
      0017E6 CDr00r00         [17] 5377 	call	_WRTPSG
                                   5378 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0017E9 21 0C 13         [10] 5379 	ld	hl, #0x130c
      0017EC CDr00r00         [17] 5380 	call	_WRTPSG
                                   5381 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0017EF 21 0D 01         [10] 5382 	ld	hl, #0x010d
                                   5383 ;src\/Sound.h:49: }
      0017F2 C3r00r00         [10] 5384 	jp	_WRTPSG
                                   5385 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5386 ;	---------------------------------
                                   5387 ; Function CheckPlayfield
                                   5388 ; ---------------------------------
      0017F5                       5389 _CheckPlayfield::
      0017F5 DD E5            [15] 5390 	push	ix
      0017F7 DD 21 00 00      [14] 5391 	ld	ix,#0
      0017FB DD 39            [15] 5392 	add	ix,sp
      0017FD 21 EF FF         [10] 5393 	ld	hl, #-17
      001800 39               [11] 5394 	add	hl, sp
      001801 F9               [ 6] 5395 	ld	sp, hl
                                   5396 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001802 DD 36 EF 00      [19] 5397 	ld	-17 (ix), #0
                                   5398 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001806 0E 00            [ 7] 5399 	ld	c, #0x00
      001808                       5400 00196$:
      001808 79               [ 4] 5401 	ld	a, c
      001809 D6 0C            [ 7] 5402 	sub	a, #0x0c
      00180B 30 36            [12] 5403 	jr	NC, 00102$
                                   5404 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00180D DD 36 FF 00      [19] 5405 	ld	-1 (ix), #0
      001811                       5406 00193$:
      001811 DD 7E FF         [19] 5407 	ld	a, -1 (ix)
      001814 D6 06            [ 7] 5408 	sub	a, #0x06
      001816 30 28            [12] 5409 	jr	NC, 00197$
                                   5410 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001818 DD 5E FF         [19] 5411 	ld	e, -1 (ix)
      00181B 16 00            [ 7] 5412 	ld	d, #0x00
      00181D 6B               [ 4] 5413 	ld	l, e
      00181E 62               [ 4] 5414 	ld	h, d
      00181F 29               [11] 5415 	add	hl, hl
      001820 19               [11] 5416 	add	hl, de
      001821 29               [11] 5417 	add	hl, hl
      001822 29               [11] 5418 	add	hl, hl
      001823 EB               [ 4] 5419 	ex	de, hl
      001824 21r48r00         [10] 5420 	ld	hl, #_playfieldTemp
      001827 19               [11] 5421 	add	hl, de
      001828 06 00            [ 7] 5422 	ld	b, #0x00
      00182A 09               [11] 5423 	add	hl, bc
      00182B 3Er00            [ 7] 5424 	ld	a, #<(_playfield)
      00182D 83               [ 4] 5425 	add	a, e
      00182E 5F               [ 4] 5426 	ld	e, a
      00182F 3Es00            [ 7] 5427 	ld	a, #>(_playfield)
      001831 8A               [ 4] 5428 	adc	a, d
      001832 57               [ 4] 5429 	ld	d, a
      001833 7B               [ 4] 5430 	ld	a, e
      001834 81               [ 4] 5431 	add	a, c
      001835 5F               [ 4] 5432 	ld	e, a
      001836 30 01            [12] 5433 	jr	NC, 00615$
      001838 14               [ 4] 5434 	inc	d
      001839                       5435 00615$:
      001839 1A               [ 7] 5436 	ld	a, (de)
      00183A 77               [ 7] 5437 	ld	(hl), a
                                   5438 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00183B DD 34 FF         [23] 5439 	inc	-1 (ix)
      00183E 18 D1            [12] 5440 	jr	00193$
      001840                       5441 00197$:
                                   5442 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001840 0C               [ 4] 5443 	inc	c
      001841 18 C5            [12] 5444 	jr	00196$
      001843                       5445 00102$:
                                   5446 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001843 DD 36 FE 00      [19] 5447 	ld	-2 (ix), #0
      001847                       5448 00202$:
      001847 DD 7E FE         [19] 5449 	ld	a, -2 (ix)
      00184A D6 0C            [ 7] 5450 	sub	a, #0x0c
      00184C D2r4Br19         [10] 5451 	jp	NC, 00108$
                                   5452 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00184F DD 36 FF 02      [19] 5453 	ld	-1 (ix), #0x02
      001853                       5454 00199$:
      001853 DD 7E FF         [19] 5455 	ld	a, -1 (ix)
      001856 D6 06            [ 7] 5456 	sub	a, #0x06
      001858 D2r45r19         [10] 5457 	jp	NC, 00203$
                                   5458 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      00185B DD 4E FF         [19] 5459 	ld	c, -1 (ix)
      00185E 06 00            [ 7] 5460 	ld	b, #0x00
      001860 69               [ 4] 5461 	ld	l, c
      001861 60               [ 4] 5462 	ld	h, b
      001862 29               [11] 5463 	add	hl, hl
      001863 09               [11] 5464 	add	hl, bc
      001864 29               [11] 5465 	add	hl, hl
      001865 29               [11] 5466 	add	hl, hl
      001866 DD 75 F5         [19] 5467 	ld	-11 (ix), l
      001869 DD 74 F6         [19] 5468 	ld	-10 (ix), h
      00186C 3Er48            [ 7] 5469 	ld	a, #<(_playfieldTemp)
      00186E DD 86 F5         [19] 5470 	add	a, -11 (ix)
      001871 4F               [ 4] 5471 	ld	c, a
      001872 3Es00            [ 7] 5472 	ld	a, #>(_playfieldTemp)
      001874 DD 8E F6         [19] 5473 	adc	a, -10 (ix)
      001877 47               [ 4] 5474 	ld	b, a
      001878 79               [ 4] 5475 	ld	a, c
      001879 DD 86 FE         [19] 5476 	add	a, -2 (ix)
      00187C DD 77 F7         [19] 5477 	ld	-9 (ix), a
      00187F 78               [ 4] 5478 	ld	a, b
      001880 CE 00            [ 7] 5479 	adc	a, #0x00
      001882 DD 77 F8         [19] 5480 	ld	-8 (ix), a
      001885 DD 6E F7         [19] 5481 	ld	l, -9 (ix)
      001888 DD 66 F8         [19] 5482 	ld	h, -8 (ix)
      00188B 7E               [ 7] 5483 	ld	a, (hl)
      00188C DD 77 F9         [19] 5484 	ld	-7 (ix), a
      00188F B7               [ 4] 5485 	or	a, a
      001890 CAr3Fr19         [10] 5486 	jp	Z, 00200$
                                   5487 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001893 DD 7E FF         [19] 5488 	ld	a, -1 (ix)
      001896 DD 77 FD         [19] 5489 	ld	-3 (ix), a
      001899 4F               [ 4] 5490 	ld	c, a
      00189A 0D               [ 4] 5491 	dec	c
      00189B 0D               [ 4] 5492 	dec	c
      00189C 79               [ 4] 5493 	ld	a, c
      00189D 07               [ 4] 5494 	rlca
      00189E 9F               [ 4] 5495 	sbc	a, a
      00189F 47               [ 4] 5496 	ld	b, a
      0018A0 69               [ 4] 5497 	ld	l, c
      0018A1 60               [ 4] 5498 	ld	h, b
      0018A2 29               [11] 5499 	add	hl, hl
      0018A3 09               [11] 5500 	add	hl, bc
      0018A4 29               [11] 5501 	add	hl, hl
      0018A5 29               [11] 5502 	add	hl, hl
      0018A6 EB               [ 4] 5503 	ex	de, hl
      0018A7 21r48r00         [10] 5504 	ld	hl, #_playfieldTemp
      0018AA 19               [11] 5505 	add	hl, de
      0018AB 7D               [ 4] 5506 	ld	a, l
      0018AC DD 86 FE         [19] 5507 	add	a, -2 (ix)
      0018AF DD 77 FA         [19] 5508 	ld	-6 (ix), a
      0018B2 7C               [ 4] 5509 	ld	a, h
      0018B3 CE 00            [ 7] 5510 	adc	a, #0x00
      0018B5 DD 77 FB         [19] 5511 	ld	-5 (ix), a
      0018B8 DD 4E FD         [19] 5512 	ld	c, -3 (ix)
      0018BB 0D               [ 4] 5513 	dec	c
      0018BC 79               [ 4] 5514 	ld	a, c
      0018BD 07               [ 4] 5515 	rlca
      0018BE 9F               [ 4] 5516 	sbc	a, a
      0018BF 47               [ 4] 5517 	ld	b, a
      0018C0 69               [ 4] 5518 	ld	l, c
      0018C1 60               [ 4] 5519 	ld	h, b
      0018C2 29               [11] 5520 	add	hl, hl
      0018C3 09               [11] 5521 	add	hl, bc
      0018C4 29               [11] 5522 	add	hl, hl
      0018C5 29               [11] 5523 	add	hl, hl
      0018C6 DD 75 FC         [19] 5524 	ld	-4 (ix), l
      0018C9 DD 74 FD         [19] 5525 	ld	-3 (ix), h
      0018CC 3Er48            [ 7] 5526 	ld	a, #<(_playfieldTemp)
      0018CE DD 86 FC         [19] 5527 	add	a, -4 (ix)
      0018D1 4F               [ 4] 5528 	ld	c, a
      0018D2 3Es00            [ 7] 5529 	ld	a, #>(_playfieldTemp)
      0018D4 DD 8E FD         [19] 5530 	adc	a, -3 (ix)
      0018D7 47               [ 4] 5531 	ld	b, a
      0018D8 79               [ 4] 5532 	ld	a, c
      0018D9 DD 86 FE         [19] 5533 	add	a, -2 (ix)
      0018DC 4F               [ 4] 5534 	ld	c, a
      0018DD 30 01            [12] 5535 	jr	NC, 00616$
      0018DF 04               [ 4] 5536 	inc	b
      0018E0                       5537 00616$:
      0018E0 DD 6E FA         [19] 5538 	ld	l, -6 (ix)
      0018E3 DD 66 FB         [19] 5539 	ld	h, -5 (ix)
      0018E6 6E               [ 7] 5540 	ld	l, (hl)
      0018E7 0A               [ 7] 5541 	ld	a, (bc)
      0018E8 67               [ 4] 5542 	ld	h, a
      0018E9 7D               [ 4] 5543 	ld	a, l
      0018EA 94               [ 4] 5544 	sub	a, h
      0018EB 20 52            [12] 5545 	jr	NZ, 00200$
                                   5546 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      0018ED DD 7E F9         [19] 5547 	ld	a, -7 (ix)
      0018F0 94               [ 4] 5548 	sub	a, h
      0018F1 20 4C            [12] 5549 	jr	NZ, 00200$
                                   5550 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      0018F3 DD 36 EF 01      [19] 5551 	ld	-17 (ix), #0x01
                                   5552 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0018F7 3Er00            [ 7] 5553 	ld	a, #<(_playfield)
      0018F9 83               [ 4] 5554 	add	a, e
      0018FA 5F               [ 4] 5555 	ld	e, a
      0018FB 3Es00            [ 7] 5556 	ld	a, #>(_playfield)
      0018FD 8A               [ 4] 5557 	adc	a, d
      0018FE 57               [ 4] 5558 	ld	d, a
      0018FF 7B               [ 4] 5559 	ld	a, e
      001900 DD 86 FE         [19] 5560 	add	a, -2 (ix)
      001903 5F               [ 4] 5561 	ld	e, a
      001904 30 01            [12] 5562 	jr	NC, 00621$
      001906 14               [ 4] 5563 	inc	d
      001907                       5564 00621$:
      001907 7D               [ 4] 5565 	ld	a, l
      001908 CB FF            [ 8] 5566 	set	7, a
      00190A 12               [ 7] 5567 	ld	(de), a
                                   5568 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00190B 3Er00            [ 7] 5569 	ld	a, #<(_playfield)
      00190D DD 86 FC         [19] 5570 	add	a, -4 (ix)
      001910 5F               [ 4] 5571 	ld	e, a
      001911 3Es00            [ 7] 5572 	ld	a, #>(_playfield)
      001913 DD 8E FD         [19] 5573 	adc	a, -3 (ix)
      001916 57               [ 4] 5574 	ld	d, a
      001917 DD 6E FE         [19] 5575 	ld	l, -2 (ix)
      00191A 26 00            [ 7] 5576 	ld	h, #0x00
      00191C 19               [11] 5577 	add	hl, de
      00191D 0A               [ 7] 5578 	ld	a, (bc)
      00191E CB FF            [ 8] 5579 	set	7, a
      001920 77               [ 7] 5580 	ld	(hl), a
                                   5581 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001921 3Er00            [ 7] 5582 	ld	a, #<(_playfield)
      001923 DD 86 F5         [19] 5583 	add	a, -11 (ix)
      001926 4F               [ 4] 5584 	ld	c, a
      001927 3Es00            [ 7] 5585 	ld	a, #>(_playfield)
      001929 DD 8E F6         [19] 5586 	adc	a, -10 (ix)
      00192C 47               [ 4] 5587 	ld	b, a
      00192D 79               [ 4] 5588 	ld	a, c
      00192E DD 86 FE         [19] 5589 	add	a, -2 (ix)
      001931 4F               [ 4] 5590 	ld	c, a
      001932 30 01            [12] 5591 	jr	NC, 00622$
      001934 04               [ 4] 5592 	inc	b
      001935                       5593 00622$:
      001935 DD 6E F7         [19] 5594 	ld	l, -9 (ix)
      001938 DD 66 F8         [19] 5595 	ld	h, -8 (ix)
      00193B 7E               [ 7] 5596 	ld	a, (hl)
      00193C CB FF            [ 8] 5597 	set	7, a
      00193E 02               [ 7] 5598 	ld	(bc), a
      00193F                       5599 00200$:
                                   5600 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00193F DD 34 FF         [23] 5601 	inc	-1 (ix)
      001942 C3r53r18         [10] 5602 	jp	00199$
      001945                       5603 00203$:
                                   5604 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001945 DD 34 FE         [23] 5605 	inc	-2 (ix)
      001948 C3r47r18         [10] 5606 	jp	00202$
      00194B                       5607 00108$:
                                   5608 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00194B 0E 02            [ 7] 5609 	ld	c, #0x02
      00194D                       5610 00208$:
      00194D 79               [ 4] 5611 	ld	a, c
      00194E D6 0C            [ 7] 5612 	sub	a, #0x0c
      001950 D2r12r1A         [10] 5613 	jp	NC, 00114$
                                   5614 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001953 DD 36 FF 00      [19] 5615 	ld	-1 (ix), #0
      001957                       5616 00205$:
      001957 DD 7E FF         [19] 5617 	ld	a, -1 (ix)
      00195A D6 06            [ 7] 5618 	sub	a, #0x06
      00195C D2r0Er1A         [10] 5619 	jp	NC, 00209$
                                   5620 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      00195F DD 5E FF         [19] 5621 	ld	e, -1 (ix)
      001962 16 00            [ 7] 5622 	ld	d, #0x00
      001964 6B               [ 4] 5623 	ld	l, e
      001965 62               [ 4] 5624 	ld	h, d
      001966 29               [11] 5625 	add	hl, hl
      001967 19               [11] 5626 	add	hl, de
      001968 29               [11] 5627 	add	hl, hl
      001969 29               [11] 5628 	add	hl, hl
      00196A DD 75 F7         [19] 5629 	ld	-9 (ix), l
      00196D DD 74 F8         [19] 5630 	ld	-8 (ix), h
      001970 3Er48            [ 7] 5631 	ld	a, #<(_playfieldTemp)
      001972 DD 86 F7         [19] 5632 	add	a, -9 (ix)
      001975 5F               [ 4] 5633 	ld	e, a
      001976 3Es00            [ 7] 5634 	ld	a, #>(_playfieldTemp)
      001978 DD 8E F8         [19] 5635 	adc	a, -8 (ix)
      00197B 57               [ 4] 5636 	ld	d, a
      00197C 7B               [ 4] 5637 	ld	a, e
      00197D 81               [ 4] 5638 	add	a, c
      00197E DD 77 F9         [19] 5639 	ld	-7 (ix), a
      001981 7A               [ 4] 5640 	ld	a, d
      001982 CE 00            [ 7] 5641 	adc	a, #0x00
      001984 DD 77 FA         [19] 5642 	ld	-6 (ix), a
      001987 DD 6E F9         [19] 5643 	ld	l, -7 (ix)
      00198A DD 66 FA         [19] 5644 	ld	h, -6 (ix)
      00198D 7E               [ 7] 5645 	ld	a, (hl)
      00198E DD 77 FE         [19] 5646 	ld	-2 (ix), a
      001991 B7               [ 4] 5647 	or	a, a
      001992 28 74            [12] 5648 	jr	Z, 00206$
                                   5649 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001994 DD 71 FD         [19] 5650 	ld	-3 (ix), c
      001997 79               [ 4] 5651 	ld	a, c
      001998 C6 FE            [ 7] 5652 	add	a, #0xfe
      00199A DD 77 FB         [19] 5653 	ld	-5 (ix), a
      00199D 6F               [ 4] 5654 	ld	l, a
      00199E 26 00            [ 7] 5655 	ld	h, #0x00
      0019A0 19               [11] 5656 	add	hl, de
      0019A1 DD 46 FD         [19] 5657 	ld	b, -3 (ix)
      0019A4 05               [ 4] 5658 	dec	b
      0019A5 7B               [ 4] 5659 	ld	a, e
      0019A6 80               [ 4] 5660 	add	a, b
      0019A7 5F               [ 4] 5661 	ld	e, a
      0019A8 30 01            [12] 5662 	jr	NC, 00623$
      0019AA 14               [ 4] 5663 	inc	d
      0019AB                       5664 00623$:
      0019AB 7E               [ 7] 5665 	ld	a, (hl)
      0019AC DD 77 FC         [19] 5666 	ld	-4 (ix), a
      0019AF 1A               [ 7] 5667 	ld	a, (de)
      0019B0 6F               [ 4] 5668 	ld	l, a
      0019B1 DD 7E FC         [19] 5669 	ld	a, -4 (ix)
      0019B4 95               [ 4] 5670 	sub	a, l
      0019B5 20 51            [12] 5671 	jr	NZ, 00206$
                                   5672 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      0019B7 DD 7E FE         [19] 5673 	ld	a, -2 (ix)
      0019BA 95               [ 4] 5674 	sub	a, l
      0019BB 20 4B            [12] 5675 	jr	NZ, 00206$
                                   5676 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      0019BD DD 36 EF 01      [19] 5677 	ld	-17 (ix), #0x01
                                   5678 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0019C1 3Er00            [ 7] 5679 	ld	a, #<(_playfield)
      0019C3 DD 86 F7         [19] 5680 	add	a, -9 (ix)
      0019C6 DD 77 FD         [19] 5681 	ld	-3 (ix), a
      0019C9 3Es00            [ 7] 5682 	ld	a, #>(_playfield)
      0019CB DD 8E F8         [19] 5683 	adc	a, -8 (ix)
      0019CE DD 77 FE         [19] 5684 	ld	-2 (ix), a
      0019D1 DD 7E FD         [19] 5685 	ld	a, -3 (ix)
      0019D4 DD 86 FB         [19] 5686 	add	a, -5 (ix)
      0019D7 6F               [ 4] 5687 	ld	l, a
      0019D8 DD 7E FE         [19] 5688 	ld	a, -2 (ix)
      0019DB CE 00            [ 7] 5689 	adc	a, #0x00
      0019DD 67               [ 4] 5690 	ld	h, a
      0019DE DD 7E FC         [19] 5691 	ld	a, -4 (ix)
      0019E1 CB FF            [ 8] 5692 	set	7, a
      0019E3 77               [ 7] 5693 	ld	(hl), a
                                   5694 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      0019E4 DD 7E FD         [19] 5695 	ld	a, -3 (ix)
      0019E7 80               [ 4] 5696 	add	a, b
      0019E8 6F               [ 4] 5697 	ld	l, a
      0019E9 DD 7E FE         [19] 5698 	ld	a, -2 (ix)
      0019EC CE 00            [ 7] 5699 	adc	a, #0x00
      0019EE 67               [ 4] 5700 	ld	h, a
      0019EF 1A               [ 7] 5701 	ld	a, (de)
      0019F0 CB FF            [ 8] 5702 	set	7, a
      0019F2 77               [ 7] 5703 	ld	(hl), a
                                   5704 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0019F3 DD 7E FD         [19] 5705 	ld	a, -3 (ix)
      0019F6 81               [ 4] 5706 	add	a, c
      0019F7 5F               [ 4] 5707 	ld	e, a
      0019F8 DD 7E FE         [19] 5708 	ld	a, -2 (ix)
      0019FB CE 00            [ 7] 5709 	adc	a, #0x00
      0019FD 57               [ 4] 5710 	ld	d, a
      0019FE DD 6E F9         [19] 5711 	ld	l, -7 (ix)
      001A01 DD 66 FA         [19] 5712 	ld	h, -6 (ix)
      001A04 7E               [ 7] 5713 	ld	a, (hl)
      001A05 CB FF            [ 8] 5714 	set	7, a
      001A07 12               [ 7] 5715 	ld	(de), a
      001A08                       5716 00206$:
                                   5717 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A08 DD 34 FF         [23] 5718 	inc	-1 (ix)
      001A0B C3r57r19         [10] 5719 	jp	00205$
      001A0E                       5720 00209$:
                                   5721 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A0E 0C               [ 4] 5722 	inc	c
      001A0F C3r4Dr19         [10] 5723 	jp	00208$
      001A12                       5724 00114$:
                                   5725 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A12 DD 36 FE 02      [19] 5726 	ld	-2 (ix), #0x02
      001A16                       5727 00214$:
      001A16 DD 7E FE         [19] 5728 	ld	a, -2 (ix)
      001A19 D6 0C            [ 7] 5729 	sub	a, #0x0c
      001A1B D2rB9r1B         [10] 5730 	jp	NC, 00124$
                                   5731 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A1E DD 36 FF 02      [19] 5732 	ld	-1 (ix), #0x02
      001A22                       5733 00211$:
      001A22 DD 7E FF         [19] 5734 	ld	a, -1 (ix)
      001A25 D6 06            [ 7] 5735 	sub	a, #0x06
      001A27 D2rB3r1B         [10] 5736 	jp	NC, 00215$
                                   5737 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001A2A DD 4E FF         [19] 5738 	ld	c, -1 (ix)
      001A2D 06 00            [ 7] 5739 	ld	b, #0x00
      001A2F 69               [ 4] 5740 	ld	l, c
      001A30 60               [ 4] 5741 	ld	h, b
      001A31 29               [11] 5742 	add	hl, hl
      001A32 09               [11] 5743 	add	hl, bc
      001A33 29               [11] 5744 	add	hl, hl
      001A34 29               [11] 5745 	add	hl, hl
      001A35 DD 75 F0         [19] 5746 	ld	-16 (ix), l
      001A38 DD 74 F1         [19] 5747 	ld	-15 (ix), h
      001A3B 3Er48            [ 7] 5748 	ld	a, #<(_playfieldTemp)
      001A3D DD 86 F0         [19] 5749 	add	a, -16 (ix)
      001A40 4F               [ 4] 5750 	ld	c, a
      001A41 3Es00            [ 7] 5751 	ld	a, #>(_playfieldTemp)
      001A43 DD 8E F1         [19] 5752 	adc	a, -15 (ix)
      001A46 47               [ 4] 5753 	ld	b, a
      001A47 79               [ 4] 5754 	ld	a, c
      001A48 DD 86 FE         [19] 5755 	add	a, -2 (ix)
      001A4B DD 77 F2         [19] 5756 	ld	-14 (ix), a
      001A4E 78               [ 4] 5757 	ld	a, b
      001A4F CE 00            [ 7] 5758 	adc	a, #0x00
      001A51 DD 77 F3         [19] 5759 	ld	-13 (ix), a
      001A54 DD 6E F2         [19] 5760 	ld	l, -14 (ix)
      001A57 DD 66 F3         [19] 5761 	ld	h, -13 (ix)
      001A5A 5E               [ 7] 5762 	ld	e, (hl)
                                   5763 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001A5B DD 56 FF         [19] 5764 	ld	d, -1 (ix)
      001A5E DD 66 FE         [19] 5765 	ld	h, -2 (ix)
      001A61 6A               [ 4] 5766 	ld	l, d
      001A62 2D               [ 4] 5767 	dec	l
      001A63 2D               [ 4] 5768 	dec	l
      001A64 7C               [ 4] 5769 	ld	a, h
      001A65 C6 FE            [ 7] 5770 	add	a, #0xfe
      001A67 DD 77 F4         [19] 5771 	ld	-12 (ix), a
      001A6A 15               [ 4] 5772 	dec	d
      001A6B 7C               [ 4] 5773 	ld	a, h
      001A6C C6 FF            [ 7] 5774 	add	a, #0xff
      001A6E DD 77 F5         [19] 5775 	ld	-11 (ix), a
      001A71 D5               [11] 5776 	push	de
      001A72 5D               [ 4] 5777 	ld	e, l
      001A73 7B               [ 4] 5778 	ld	a, e
      001A74 07               [ 4] 5779 	rlca
      001A75 9F               [ 4] 5780 	sbc	a, a
      001A76 57               [ 4] 5781 	ld	d, a
      001A77 6B               [ 4] 5782 	ld	l, e
      001A78 62               [ 4] 5783 	ld	h, d
      001A79 29               [11] 5784 	add	hl, hl
      001A7A 19               [11] 5785 	add	hl, de
      001A7B 29               [11] 5786 	add	hl, hl
      001A7C 29               [11] 5787 	add	hl, hl
      001A7D D1               [10] 5788 	pop	de
      001A7E DD 75 F6         [19] 5789 	ld	-10 (ix), l
      001A81 DD 74 F7         [19] 5790 	ld	-9 (ix), h
      001A84 D5               [11] 5791 	push	de
      001A85 5A               [ 4] 5792 	ld	e, d
      001A86 7B               [ 4] 5793 	ld	a, e
      001A87 07               [ 4] 5794 	rlca
      001A88 9F               [ 4] 5795 	sbc	a, a
      001A89 57               [ 4] 5796 	ld	d, a
      001A8A 6B               [ 4] 5797 	ld	l, e
      001A8B 62               [ 4] 5798 	ld	h, d
      001A8C 29               [11] 5799 	add	hl, hl
      001A8D 19               [11] 5800 	add	hl, de
      001A8E 29               [11] 5801 	add	hl, hl
      001A8F 29               [11] 5802 	add	hl, hl
      001A90 D1               [10] 5803 	pop	de
      001A91 DD 75 F8         [19] 5804 	ld	-8 (ix), l
      001A94 DD 74 F9         [19] 5805 	ld	-7 (ix), h
      001A97 3Er48            [ 7] 5806 	ld	a, #<(_playfieldTemp)
      001A99 DD 86 F6         [19] 5807 	add	a, -10 (ix)
      001A9C DD 77 FA         [19] 5808 	ld	-6 (ix), a
      001A9F 3Es00            [ 7] 5809 	ld	a, #>(_playfieldTemp)
      001AA1 DD 8E F7         [19] 5810 	adc	a, -9 (ix)
      001AA4 DD 77 FB         [19] 5811 	ld	-5 (ix), a
      001AA7 3Er48            [ 7] 5812 	ld	a, #<(_playfieldTemp)
      001AA9 DD 86 F8         [19] 5813 	add	a, -8 (ix)
      001AAC 57               [ 4] 5814 	ld	d, a
      001AAD 3Es00            [ 7] 5815 	ld	a, #>(_playfieldTemp)
      001AAF DD 8E F9         [19] 5816 	adc	a, -7 (ix)
      001AB2 6F               [ 4] 5817 	ld	l, a
      001AB3 7A               [ 4] 5818 	ld	a, d
      001AB4 DD 86 F5         [19] 5819 	add	a, -11 (ix)
      001AB7 DD 77 FC         [19] 5820 	ld	-4 (ix), a
      001ABA 7D               [ 4] 5821 	ld	a, l
      001ABB CE 00            [ 7] 5822 	adc	a, #0x00
      001ABD DD 77 FD         [19] 5823 	ld	-3 (ix), a
                                   5824 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001AC0 7B               [ 4] 5825 	ld	a, e
      001AC1 B7               [ 4] 5826 	or	a, a
      001AC2 28 74            [12] 5827 	jr	Z, 00116$
                                   5828 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001AC4 DD 7E FA         [19] 5829 	ld	a, -6 (ix)
      001AC7 DD 86 F4         [19] 5830 	add	a, -12 (ix)
      001ACA 6F               [ 4] 5831 	ld	l, a
      001ACB DD 7E FB         [19] 5832 	ld	a, -5 (ix)
      001ACE CE 00            [ 7] 5833 	adc	a, #0x00
      001AD0 67               [ 4] 5834 	ld	h, a
      001AD1 56               [ 7] 5835 	ld	d, (hl)
      001AD2 DD 6E FC         [19] 5836 	ld	l, -4 (ix)
      001AD5 DD 66 FD         [19] 5837 	ld	h, -3 (ix)
      001AD8 6E               [ 7] 5838 	ld	l, (hl)
      001AD9 7A               [ 4] 5839 	ld	a, d
      001ADA 95               [ 4] 5840 	sub	a, l
      001ADB 20 5B            [12] 5841 	jr	NZ, 00116$
                                   5842 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001ADD 7B               [ 4] 5843 	ld	a, e
      001ADE 95               [ 4] 5844 	sub	a, l
      001ADF 20 57            [12] 5845 	jr	NZ, 00116$
                                   5846 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001AE1 DD 36 EF 01      [19] 5847 	ld	-17 (ix), #0x01
                                   5848 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001AE5 3Er00            [ 7] 5849 	ld	a, #<(_playfield)
      001AE7 DD 86 F6         [19] 5850 	add	a, -10 (ix)
      001AEA 5F               [ 4] 5851 	ld	e, a
      001AEB 3Es00            [ 7] 5852 	ld	a, #>(_playfield)
      001AED DD 8E F7         [19] 5853 	adc	a, -9 (ix)
      001AF0 67               [ 4] 5854 	ld	h, a
      001AF1 7B               [ 4] 5855 	ld	a, e
      001AF2 DD 86 F4         [19] 5856 	add	a, -12 (ix)
      001AF5 6F               [ 4] 5857 	ld	l, a
      001AF6 30 01            [12] 5858 	jr	NC, 00632$
      001AF8 24               [ 4] 5859 	inc	h
      001AF9                       5860 00632$:
      001AF9 CB FA            [ 8] 5861 	set	7, d
      001AFB 72               [ 7] 5862 	ld	(hl), d
                                   5863 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001AFC 3Er00            [ 7] 5864 	ld	a, #<(_playfield)
      001AFE DD 86 F8         [19] 5865 	add	a, -8 (ix)
      001B01 5F               [ 4] 5866 	ld	e, a
      001B02 3Es00            [ 7] 5867 	ld	a, #>(_playfield)
      001B04 DD 8E F9         [19] 5868 	adc	a, -7 (ix)
      001B07 57               [ 4] 5869 	ld	d, a
      001B08 7B               [ 4] 5870 	ld	a, e
      001B09 DD 86 F5         [19] 5871 	add	a, -11 (ix)
      001B0C 5F               [ 4] 5872 	ld	e, a
      001B0D 30 01            [12] 5873 	jr	NC, 00633$
      001B0F 14               [ 4] 5874 	inc	d
      001B10                       5875 00633$:
      001B10 DD 6E FC         [19] 5876 	ld	l, -4 (ix)
      001B13 DD 66 FD         [19] 5877 	ld	h, -3 (ix)
      001B16 7E               [ 7] 5878 	ld	a, (hl)
      001B17 CB FF            [ 8] 5879 	set	7, a
      001B19 12               [ 7] 5880 	ld	(de), a
                                   5881 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001B1A 3Er00            [ 7] 5882 	ld	a, #<(_playfield)
      001B1C DD 86 F0         [19] 5883 	add	a, -16 (ix)
      001B1F 5F               [ 4] 5884 	ld	e, a
      001B20 3Es00            [ 7] 5885 	ld	a, #>(_playfield)
      001B22 DD 8E F1         [19] 5886 	adc	a, -15 (ix)
      001B25 57               [ 4] 5887 	ld	d, a
      001B26 7B               [ 4] 5888 	ld	a, e
      001B27 DD 86 FE         [19] 5889 	add	a, -2 (ix)
      001B2A 5F               [ 4] 5890 	ld	e, a
      001B2B 30 01            [12] 5891 	jr	NC, 00634$
      001B2D 14               [ 4] 5892 	inc	d
      001B2E                       5893 00634$:
      001B2E DD 6E F2         [19] 5894 	ld	l, -14 (ix)
      001B31 DD 66 F3         [19] 5895 	ld	h, -13 (ix)
      001B34 7E               [ 7] 5896 	ld	a, (hl)
      001B35 CB FF            [ 8] 5897 	set	7, a
      001B37 12               [ 7] 5898 	ld	(de), a
      001B38                       5899 00116$:
                                   5900 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001B38 DD 6E F4         [19] 5901 	ld	l, -12 (ix)
      001B3B 26 00            [ 7] 5902 	ld	h, #0x00
      001B3D 09               [11] 5903 	add	hl, bc
      001B3E 4E               [ 7] 5904 	ld	c, (hl)
      001B3F 79               [ 4] 5905 	ld	a, c
      001B40 B7               [ 4] 5906 	or	a, a
      001B41 28 6A            [12] 5907 	jr	Z, 00212$
                                   5908 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001B43 DD 7E FA         [19] 5909 	ld	a, -6 (ix)
      001B46 DD 86 FE         [19] 5910 	add	a, -2 (ix)
      001B49 5F               [ 4] 5911 	ld	e, a
      001B4A DD 7E FB         [19] 5912 	ld	a, -5 (ix)
      001B4D CE 00            [ 7] 5913 	adc	a, #0x00
      001B4F 57               [ 4] 5914 	ld	d, a
      001B50 DD 6E FC         [19] 5915 	ld	l, -4 (ix)
      001B53 DD 66 FD         [19] 5916 	ld	h, -3 (ix)
      001B56 46               [ 7] 5917 	ld	b, (hl)
      001B57 1A               [ 7] 5918 	ld	a, (de)
      001B58 B8               [ 4] 5919 	cp	a, b
      001B59 20 52            [12] 5920 	jr	NZ, 00212$
                                   5921 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001B5B 91               [ 4] 5922 	sub	a, c
      001B5C 20 4F            [12] 5923 	jr	NZ, 00212$
                                   5924 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001B5E DD 36 EF 01      [19] 5925 	ld	-17 (ix), #0x01
                                   5926 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001B62 3Er00            [ 7] 5927 	ld	a, #<(_playfield)
      001B64 DD 86 F0         [19] 5928 	add	a, -16 (ix)
      001B67 47               [ 4] 5929 	ld	b, a
      001B68 3Es00            [ 7] 5930 	ld	a, #>(_playfield)
      001B6A DD 8E F1         [19] 5931 	adc	a, -15 (ix)
      001B6D 67               [ 4] 5932 	ld	h, a
      001B6E 78               [ 4] 5933 	ld	a, b
      001B6F DD 86 F4         [19] 5934 	add	a, -12 (ix)
      001B72 6F               [ 4] 5935 	ld	l, a
      001B73 30 01            [12] 5936 	jr	NC, 00639$
      001B75 24               [ 4] 5937 	inc	h
      001B76                       5938 00639$:
      001B76 CB F9            [ 8] 5939 	set	7, c
      001B78 71               [ 7] 5940 	ld	(hl), c
                                   5941 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001B79 3Er00            [ 7] 5942 	ld	a, #<(_playfield)
      001B7B DD 86 F8         [19] 5943 	add	a, -8 (ix)
      001B7E 4F               [ 4] 5944 	ld	c, a
      001B7F 3Es00            [ 7] 5945 	ld	a, #>(_playfield)
      001B81 DD 8E F9         [19] 5946 	adc	a, -7 (ix)
      001B84 47               [ 4] 5947 	ld	b, a
      001B85 79               [ 4] 5948 	ld	a, c
      001B86 DD 86 F5         [19] 5949 	add	a, -11 (ix)
      001B89 4F               [ 4] 5950 	ld	c, a
      001B8A 30 01            [12] 5951 	jr	NC, 00640$
      001B8C 04               [ 4] 5952 	inc	b
      001B8D                       5953 00640$:
      001B8D DD 6E FC         [19] 5954 	ld	l, -4 (ix)
      001B90 DD 66 FD         [19] 5955 	ld	h, -3 (ix)
      001B93 7E               [ 7] 5956 	ld	a, (hl)
      001B94 CB FF            [ 8] 5957 	set	7, a
      001B96 02               [ 7] 5958 	ld	(bc), a
                                   5959 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001B97 3Er00            [ 7] 5960 	ld	a, #<(_playfield)
      001B99 DD 86 F6         [19] 5961 	add	a, -10 (ix)
      001B9C 4F               [ 4] 5962 	ld	c, a
      001B9D 3Es00            [ 7] 5963 	ld	a, #>(_playfield)
      001B9F DD 8E F7         [19] 5964 	adc	a, -9 (ix)
      001BA2 47               [ 4] 5965 	ld	b, a
      001BA3 DD 6E FE         [19] 5966 	ld	l, -2 (ix)
      001BA6 26 00            [ 7] 5967 	ld	h, #0x00
      001BA8 09               [11] 5968 	add	hl, bc
      001BA9 1A               [ 7] 5969 	ld	a, (de)
      001BAA CB FF            [ 8] 5970 	set	7, a
      001BAC 77               [ 7] 5971 	ld	(hl), a
      001BAD                       5972 00212$:
                                   5973 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001BAD DD 34 FF         [23] 5974 	inc	-1 (ix)
      001BB0 C3r22r1A         [10] 5975 	jp	00211$
      001BB3                       5976 00215$:
                                   5977 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001BB3 DD 34 FE         [23] 5978 	inc	-2 (ix)
      001BB6 C3r16r1A         [10] 5979 	jp	00214$
      001BB9                       5980 00124$:
                                   5981 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001BB9 DD 7E EF         [19] 5982 	ld	a, -17 (ix)
      001BBC B7               [ 4] 5983 	or	a, a
      001BBD CAr65r1F         [10] 5984 	jp	Z, 00190$
                                   5985 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001BC0 DD 36 F5 FF      [19] 5986 	ld	-11 (ix), #0xff
      001BC4 DD 36 F6 00      [19] 5987 	ld	-10 (ix), #0
                                   5988 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001BC8 DD 36 F7 05      [19] 5989 	ld	-9 (ix), #0x05
      001BCC DD 36 F8 00      [19] 5990 	ld	-8 (ix), #0
                                   5991 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001BD0 DD 36 F9 0B      [19] 5992 	ld	-7 (ix), #0x0b
      001BD4 DD 36 FA 00      [19] 5993 	ld	-6 (ix), #0
                                   5994 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001BD8 CDr48r0A         [17] 5995 	call	_HideArrowSprite
                                   5996 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001BDB CDr95r17         [17] 5997 	call	_SoundFx_2
                                   5998 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001BDE DD 36 FB 00      [19] 5999 	ld	-5 (ix), #0
                                   6000 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001BE2 DD 36 FF 00      [19] 6001 	ld	-1 (ix), #0
      001BE6                       6002 00220$:
      001BE6 DD 7E FF         [19] 6003 	ld	a, -1 (ix)
      001BE9 D6 0C            [ 7] 6004 	sub	a, #0x0c
      001BEB 30 5F            [12] 6005 	jr	NC, 00291$
                                   6006 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001BED DD 5E FB         [19] 6007 	ld	e, -5 (ix)
      001BF0 06 00            [ 7] 6008 	ld	b, #0x00
      001BF2                       6009 00217$:
      001BF2 78               [ 4] 6010 	ld	a, b
      001BF3 D6 06            [ 7] 6011 	sub	a, #0x06
      001BF5 30 4D            [12] 6012 	jr	NC, 00320$
                                   6013 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001BF7 D5               [11] 6014 	push	de
      001BF8 58               [ 4] 6015 	ld	e, b
      001BF9 16 00            [ 7] 6016 	ld	d, #0x00
      001BFB 6B               [ 4] 6017 	ld	l, e
      001BFC 62               [ 4] 6018 	ld	h, d
      001BFD 29               [11] 6019 	add	hl, hl
      001BFE 19               [11] 6020 	add	hl, de
      001BFF 29               [11] 6021 	add	hl, hl
      001C00 29               [11] 6022 	add	hl, hl
      001C01 11r00r00         [10] 6023 	ld	de, #_playfield
      001C04 19               [11] 6024 	add	hl, de
      001C05 D1               [10] 6025 	pop	de
      001C06 7D               [ 4] 6026 	ld	a, l
      001C07 DD 86 FF         [19] 6027 	add	a, -1 (ix)
      001C0A 6F               [ 4] 6028 	ld	l, a
      001C0B 30 01            [12] 6029 	jr	NC, 00641$
      001C0D 24               [ 4] 6030 	inc	h
      001C0E                       6031 00641$:
      001C0E 7E               [ 7] 6032 	ld	a, (hl)
      001C0F 07               [ 4] 6033 	rlca
      001C10 30 2F            [12] 6034 	jr	NC, 00218$
                                   6035 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001C12 1C               [ 4] 6036 	inc	e
                                   6037 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001C13 78               [ 4] 6038 	ld	a, b
      001C14 DD 96 F7         [19] 6039 	sub	a, -9 (ix)
      001C17 30 03            [12] 6040 	jr	NC, 00126$
      001C19 DD 70 F7         [19] 6041 	ld	-9 (ix), b
      001C1C                       6042 00126$:
                                   6043 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001C1C DD 7E F8         [19] 6044 	ld	a, -8 (ix)
      001C1F 90               [ 4] 6045 	sub	a, b
      001C20 30 03            [12] 6046 	jr	NC, 00128$
      001C22 DD 70 F8         [19] 6047 	ld	-8 (ix), b
      001C25                       6048 00128$:
                                   6049 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001C25 DD 7E FF         [19] 6050 	ld	a, -1 (ix)
      001C28 DD 96 F9         [19] 6051 	sub	a, -7 (ix)
      001C2B 30 06            [12] 6052 	jr	NC, 00130$
      001C2D DD 7E FF         [19] 6053 	ld	a, -1 (ix)
      001C30 DD 77 F9         [19] 6054 	ld	-7 (ix), a
      001C33                       6055 00130$:
                                   6056 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001C33 DD 7E FA         [19] 6057 	ld	a, -6 (ix)
      001C36 DD 96 FF         [19] 6058 	sub	a, -1 (ix)
      001C39 30 06            [12] 6059 	jr	NC, 00218$
      001C3B DD 7E FF         [19] 6060 	ld	a, -1 (ix)
      001C3E DD 77 FA         [19] 6061 	ld	-6 (ix), a
      001C41                       6062 00218$:
                                   6063 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C41 04               [ 4] 6064 	inc	b
      001C42 18 AE            [12] 6065 	jr	00217$
      001C44                       6066 00320$:
      001C44 DD 73 FB         [19] 6067 	ld	-5 (ix), e
                                   6068 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C47 DD 34 FF         [23] 6069 	inc	-1 (ix)
      001C4A 18 9A            [12] 6070 	jr	00220$
                                   6071 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001C4C                       6072 00291$:
      001C4C DD 36 FF 48      [19] 6073 	ld	-1 (ix), #0x48
      001C50                       6074 00166$:
      001C50 DD 4E FF         [19] 6075 	ld	c, -1 (ix)
      001C53 DD 35 FF         [23] 6076 	dec	-1 (ix)
      001C56 79               [ 4] 6077 	ld	a, c
      001C57 B7               [ 4] 6078 	or	a, a
      001C58 CAr00r1E         [10] 6079 	jp	Z, 00168$
                                   6080 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001C5B ED 5B 9E FC      [20] 6081 	ld	de, (_JIFFY)
                                   6082 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001C5F                       6083 00137$:
      001C5F 2A 9E FC         [16] 6084 	ld	hl, (_JIFFY)
      001C62 BF               [ 4] 6085 	cp	a, a
      001C63 ED 52            [15] 6086 	sbc	hl, de
      001C65 28 F8            [12] 6087 	jr	Z, 00137$
                                   6088 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001C67 DD 7E FB         [19] 6089 	ld	a, -5 (ix)
      001C6A D6 03            [ 7] 6090 	sub	a, #0x03
      001C6C DAr1Er1D         [10] 6091 	jp	C, 00301$
                                   6092 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001C6F DD 7E FB         [19] 6093 	ld	a, -5 (ix)
      001C72 D6 07            [ 7] 6094 	sub	a, #0x07
      001C74 38 04            [12] 6095 	jr	C, 00141$
      001C76 DD 36 FB 07      [19] 6096 	ld	-5 (ix), #0x07
      001C7A                       6097 00141$:
                                   6098 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001C7A DD 7E F5         [19] 6099 	ld	a, -11 (ix)
      001C7D 3C               [ 4] 6100 	inc	a
      001C7E 20 7B            [12] 6101 	jr	NZ, 00143$
                                   6102 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001C80 DD 6E F8         [19] 6103 	ld	l, -8 (ix)
      001C83 26 00            [ 7] 6104 	ld	h, #0x00
      001C85 29               [11] 6105 	add	hl, hl
      001C86 29               [11] 6106 	add	hl, hl
      001C87 29               [11] 6107 	add	hl, hl
      001C88 29               [11] 6108 	add	hl, hl
      001C89 DD 5E F7         [19] 6109 	ld	e, -9 (ix)
      001C8C 16 00            [ 7] 6110 	ld	d, #0x00
      001C8E EB               [ 4] 6111 	ex	de, hl
      001C8F 29               [11] 6112 	add	hl, hl
      001C90 29               [11] 6113 	add	hl, hl
      001C91 29               [11] 6114 	add	hl, hl
      001C92 29               [11] 6115 	add	hl, hl
      001C93 EB               [ 4] 6116 	ex	de, hl
      001C94 BF               [ 4] 6117 	cp	a, a
      001C95 ED 52            [15] 6118 	sbc	hl, de
      001C97 4D               [ 4] 6119 	ld	c, l
      001C98 44               [ 4] 6120 	ld	b, h
      001C99 CB 7C            [ 8] 6121 	bit	7, h
      001C9B 28 03            [12] 6122 	jr	Z, 00239$
      001C9D 4D               [ 4] 6123 	ld	c, l
      001C9E 44               [ 4] 6124 	ld	b, h
      001C9F 03               [ 6] 6125 	inc	bc
      001CA0                       6126 00239$:
      001CA0 CB 28            [ 8] 6127 	sra	b
      001CA2 CB 19            [ 8] 6128 	rr	c
      001CA4 79               [ 4] 6129 	ld	a, c
      001CA5 C6 50            [ 7] 6130 	add	a, #0x50
      001CA7 DD 6E F7         [19] 6131 	ld	l, -9 (ix)
      001CAA 29               [11] 6132 	add	hl, hl
      001CAB 29               [11] 6133 	add	hl, hl
      001CAC 29               [11] 6134 	add	hl, hl
      001CAD 29               [11] 6135 	add	hl, hl
      001CAE 85               [ 4] 6136 	add	a, l
      001CAF DD 77 F5         [19] 6137 	ld	-11 (ix), a
                                   6138 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001CB2 DD 6E F9         [19] 6139 	ld	l, -7 (ix)
      001CB5 26 00            [ 7] 6140 	ld	h, #0x00
      001CB7 29               [11] 6141 	add	hl, hl
      001CB8 29               [11] 6142 	add	hl, hl
      001CB9 29               [11] 6143 	add	hl, hl
      001CBA 29               [11] 6144 	add	hl, hl
      001CBB DD 5E FA         [19] 6145 	ld	e, -6 (ix)
      001CBE 16 00            [ 7] 6146 	ld	d, #0x00
      001CC0 EB               [ 4] 6147 	ex	de, hl
      001CC1 29               [11] 6148 	add	hl, hl
      001CC2 29               [11] 6149 	add	hl, hl
      001CC3 29               [11] 6150 	add	hl, hl
      001CC4 29               [11] 6151 	add	hl, hl
      001CC5 EB               [ 4] 6152 	ex	de, hl
      001CC6 BF               [ 4] 6153 	cp	a, a
      001CC7 ED 52            [15] 6154 	sbc	hl, de
      001CC9 4D               [ 4] 6155 	ld	c, l
      001CCA 44               [ 4] 6156 	ld	b, h
      001CCB CB 7C            [ 8] 6157 	bit	7, h
      001CCD 28 03            [12] 6158 	jr	Z, 00240$
      001CCF 23               [ 6] 6159 	inc	hl
      001CD0 4D               [ 4] 6160 	ld	c, l
      001CD1 44               [ 4] 6161 	ld	b, h
      001CD2                       6162 00240$:
      001CD2 CB 28            [ 8] 6163 	sra	b
      001CD4 CB 19            [ 8] 6164 	rr	c
      001CD6 DD 7E FA         [19] 6165 	ld	a, -6 (ix)
      001CD9 87               [ 4] 6166 	add	a, a
      001CDA 87               [ 4] 6167 	add	a, a
      001CDB 87               [ 4] 6168 	add	a, a
      001CDC 87               [ 4] 6169 	add	a, a
      001CDD 81               [ 4] 6170 	add	a, c
      001CDE DD 77 F6         [19] 6171 	ld	-10 (ix), a
                                   6172 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001CE1 26 01            [ 7] 6173 	ld	h, #0x01
      001CE3 DD 6E F6         [19] 6174 	ld	l, -10 (ix)
      001CE6 E5               [11] 6175 	push	hl
      001CE7 DD 66 F5         [19] 6176 	ld	h, -11 (ix)
      001CEA DD 6E 04         [19] 6177 	ld	l, 4 (ix)
      001CED E5               [11] 6178 	push	hl
      001CEE DD 7E FB         [19] 6179 	ld	a, -5 (ix)
      001CF1 F5               [11] 6180 	push	af
      001CF2 33               [ 6] 6181 	inc	sp
      001CF3 CDr56r0A         [17] 6182 	call	_DrawHitSprite
      001CF6 F1               [10] 6183 	pop	af
      001CF7 F1               [10] 6184 	pop	af
      001CF8 33               [ 6] 6185 	inc	sp
      001CF9 18 23            [12] 6186 	jr	00301$
      001CFB                       6187 00143$:
                                   6188 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001CFB DD 4E FF         [19] 6189 	ld	c, -1 (ix)
      001CFE 3E 48            [ 7] 6190 	ld	a, #0x48
      001D00 91               [ 4] 6191 	sub	a, c
      001D01 4F               [ 4] 6192 	ld	c, a
      001D02 DD 7E F6         [19] 6193 	ld	a, -10 (ix)
      001D05 91               [ 4] 6194 	sub	a, c
      001D06 26 00            [ 7] 6195 	ld	h, #0x00
      001D08 E5               [11] 6196 	push	hl
      001D09 33               [ 6] 6197 	inc	sp
      001D0A F5               [11] 6198 	push	af
      001D0B 33               [ 6] 6199 	inc	sp
      001D0C DD 66 F5         [19] 6200 	ld	h, -11 (ix)
      001D0F DD 6E 04         [19] 6201 	ld	l, 4 (ix)
      001D12 E5               [11] 6202 	push	hl
      001D13 DD 7E FB         [19] 6203 	ld	a, -5 (ix)
      001D16 F5               [11] 6204 	push	af
      001D17 33               [ 6] 6205 	inc	sp
      001D18 CDr56r0A         [17] 6206 	call	_DrawHitSprite
      001D1B F1               [10] 6207 	pop	af
      001D1C F1               [10] 6208 	pop	af
      001D1D 33               [ 6] 6209 	inc	sp
                                   6210 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D1E                       6211 00301$:
      001D1E 3E 0C            [ 7] 6212 	ld	a, #0x0c
      001D20 DD 96 FF         [19] 6213 	sub	a, -1 (ix)
      001D23 3E 00            [ 7] 6214 	ld	a, #0x00
      001D25 17               [ 4] 6215 	rla
      001D26 5F               [ 4] 6216 	ld	e, a
      001D27 3E 09            [ 7] 6217 	ld	a, #0x09
      001D29 DD 96 FF         [19] 6218 	sub	a, -1 (ix)
      001D2C 3E 00            [ 7] 6219 	ld	a, #0x00
      001D2E 17               [ 4] 6220 	rla
      001D2F 4F               [ 4] 6221 	ld	c, a
      001D30 3E 06            [ 7] 6222 	ld	a, #0x06
      001D32 DD 96 FF         [19] 6223 	sub	a, -1 (ix)
      001D35 3E 00            [ 7] 6224 	ld	a, #0x00
      001D37 17               [ 4] 6225 	rla
      001D38 DD 77 FC         [19] 6226 	ld	-4 (ix), a
      001D3B 3E 03            [ 7] 6227 	ld	a, #0x03
      001D3D DD 96 FF         [19] 6228 	sub	a, -1 (ix)
      001D40 3E 00            [ 7] 6229 	ld	a, #0x00
      001D42 17               [ 4] 6230 	rla
      001D43 DD 77 FD         [19] 6231 	ld	-3 (ix), a
      001D46 06 00            [ 7] 6232 	ld	b, #0x00
      001D48                       6233 00226$:
      001D48 78               [ 4] 6234 	ld	a, b
      001D49 D6 0C            [ 7] 6235 	sub	a, #0x0c
      001D4B D2r50r1C         [10] 6236 	jp	NC, 00166$
                                   6237 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D4E 16 00            [ 7] 6238 	ld	d, #0x00
      001D50                       6239 00223$:
      001D50 7A               [ 4] 6240 	ld	a, d
      001D51 D6 06            [ 7] 6241 	sub	a, #0x06
      001D53 D2rFCr1D         [10] 6242 	jp	NC, 00227$
                                   6243 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001D56 D5               [11] 6244 	push	de
      001D57 5A               [ 4] 6245 	ld	e, d
      001D58 16 00            [ 7] 6246 	ld	d, #0x00
      001D5A 6B               [ 4] 6247 	ld	l, e
      001D5B 62               [ 4] 6248 	ld	h, d
      001D5C 29               [11] 6249 	add	hl, hl
      001D5D 19               [11] 6250 	add	hl, de
      001D5E 29               [11] 6251 	add	hl, hl
      001D5F 29               [11] 6252 	add	hl, hl
      001D60 11r00r00         [10] 6253 	ld	de, #_playfield
      001D63 19               [11] 6254 	add	hl, de
      001D64 D1               [10] 6255 	pop	de
      001D65 7D               [ 4] 6256 	ld	a, l
      001D66 80               [ 4] 6257 	add	a, b
      001D67 6F               [ 4] 6258 	ld	l, a
      001D68 30 01            [12] 6259 	jr	NC, 00646$
      001D6A 24               [ 4] 6260 	inc	h
      001D6B                       6261 00646$:
      001D6B 7E               [ 7] 6262 	ld	a, (hl)
      001D6C DD 77 FE         [19] 6263 	ld	-2 (ix), a
      001D6F DD CB FE 7E      [20] 6264 	bit	7, -2 (ix)
      001D73 CArF8r1D         [10] 6265 	jp	Z,00224$
                                   6266 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001D76 7B               [ 4] 6267 	ld	a, e
      001D77 B7               [ 4] 6268 	or	a, a
      001D78 28 2C            [12] 6269 	jr	Z, 00160$
                                   6270 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001D7A 2A 9E FC         [16] 6271 	ld	hl, (_JIFFY)
      001D7D 7D               [ 4] 6272 	ld	a, l
      001D7E E6 03            [ 7] 6273 	and	a, #0x03
      001D80 28 14            [12] 6274 	jr	Z, 00148$
                                   6275 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001D82 DD 7E FE         [19] 6276 	ld	a, -2 (ix)
      001D85 CB BF            [ 8] 6277 	res	7, a
      001D87 C5               [11] 6278 	push	bc
      001D88 D5               [11] 6279 	push	de
      001D89 F5               [11] 6280 	push	af
      001D8A 33               [ 6] 6281 	inc	sp
      001D8B 4A               [ 4] 6282 	ld	c, d
      001D8C C5               [11] 6283 	push	bc
      001D8D CDr60r16         [17] 6284 	call	_DrawBlock
      001D90 F1               [10] 6285 	pop	af
      001D91 33               [ 6] 6286 	inc	sp
      001D92 D1               [10] 6287 	pop	de
      001D93 C1               [10] 6288 	pop	bc
      001D94 18 62            [12] 6289 	jr	00224$
      001D96                       6290 00148$:
                                   6291 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001D96 C5               [11] 6292 	push	bc
      001D97 D5               [11] 6293 	push	de
      001D98 AF               [ 4] 6294 	xor	a, a
      001D99 F5               [11] 6295 	push	af
      001D9A 33               [ 6] 6296 	inc	sp
      001D9B 4A               [ 4] 6297 	ld	c, d
      001D9C C5               [11] 6298 	push	bc
      001D9D CDr60r16         [17] 6299 	call	_DrawBlock
      001DA0 F1               [10] 6300 	pop	af
      001DA1 33               [ 6] 6301 	inc	sp
      001DA2 D1               [10] 6302 	pop	de
      001DA3 C1               [10] 6303 	pop	bc
      001DA4 18 52            [12] 6304 	jr	00224$
      001DA6                       6305 00160$:
                                   6306 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001DA6 79               [ 4] 6307 	ld	a, c
      001DA7 B7               [ 4] 6308 	or	a, a
      001DA8 28 11            [12] 6309 	jr	Z, 00157$
      001DAA C5               [11] 6310 	push	bc
      001DAB D5               [11] 6311 	push	de
      001DAC 3E 2A            [ 7] 6312 	ld	a, #0x2a
      001DAE F5               [11] 6313 	push	af
      001DAF 33               [ 6] 6314 	inc	sp
      001DB0 4A               [ 4] 6315 	ld	c, d
      001DB1 C5               [11] 6316 	push	bc
      001DB2 CDrC8r16         [17] 6317 	call	_DrawBlock_SameTile
      001DB5 F1               [10] 6318 	pop	af
      001DB6 33               [ 6] 6319 	inc	sp
      001DB7 D1               [10] 6320 	pop	de
      001DB8 C1               [10] 6321 	pop	bc
      001DB9 18 3D            [12] 6322 	jr	00224$
      001DBB                       6323 00157$:
                                   6324 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001DBB DD 7E FC         [19] 6325 	ld	a, -4 (ix)
      001DBE B7               [ 4] 6326 	or	a, a
      001DBF 28 11            [12] 6327 	jr	Z, 00154$
      001DC1 C5               [11] 6328 	push	bc
      001DC2 D5               [11] 6329 	push	de
      001DC3 3E 2B            [ 7] 6330 	ld	a, #0x2b
      001DC5 F5               [11] 6331 	push	af
      001DC6 33               [ 6] 6332 	inc	sp
      001DC7 4A               [ 4] 6333 	ld	c, d
      001DC8 C5               [11] 6334 	push	bc
      001DC9 CDrC8r16         [17] 6335 	call	_DrawBlock_SameTile
      001DCC F1               [10] 6336 	pop	af
      001DCD 33               [ 6] 6337 	inc	sp
      001DCE D1               [10] 6338 	pop	de
      001DCF C1               [10] 6339 	pop	bc
      001DD0 18 26            [12] 6340 	jr	00224$
      001DD2                       6341 00154$:
                                   6342 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001DD2 DD 7E FD         [19] 6343 	ld	a, -3 (ix)
      001DD5 B7               [ 4] 6344 	or	a, a
      001DD6 28 11            [12] 6345 	jr	Z, 00151$
      001DD8 C5               [11] 6346 	push	bc
      001DD9 D5               [11] 6347 	push	de
      001DDA 3E 2C            [ 7] 6348 	ld	a, #0x2c
      001DDC F5               [11] 6349 	push	af
      001DDD 33               [ 6] 6350 	inc	sp
      001DDE 4A               [ 4] 6351 	ld	c, d
      001DDF C5               [11] 6352 	push	bc
      001DE0 CDrC8r16         [17] 6353 	call	_DrawBlock_SameTile
      001DE3 F1               [10] 6354 	pop	af
      001DE4 33               [ 6] 6355 	inc	sp
      001DE5 D1               [10] 6356 	pop	de
      001DE6 C1               [10] 6357 	pop	bc
      001DE7 18 0F            [12] 6358 	jr	00224$
      001DE9                       6359 00151$:
                                   6360 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001DE9 C5               [11] 6361 	push	bc
      001DEA D5               [11] 6362 	push	de
      001DEB 3E 2D            [ 7] 6363 	ld	a, #0x2d
      001DED F5               [11] 6364 	push	af
      001DEE 33               [ 6] 6365 	inc	sp
      001DEF 4A               [ 4] 6366 	ld	c, d
      001DF0 C5               [11] 6367 	push	bc
      001DF1 CDrC8r16         [17] 6368 	call	_DrawBlock_SameTile
      001DF4 F1               [10] 6369 	pop	af
      001DF5 33               [ 6] 6370 	inc	sp
      001DF6 D1               [10] 6371 	pop	de
      001DF7 C1               [10] 6372 	pop	bc
      001DF8                       6373 00224$:
                                   6374 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DF8 14               [ 4] 6375 	inc	d
      001DF9 C3r50r1D         [10] 6376 	jp	00223$
      001DFC                       6377 00227$:
                                   6378 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001DFC 04               [ 4] 6379 	inc	b
      001DFD C3r48r1D         [10] 6380 	jp	00226$
      001E00                       6381 00168$:
                                   6382 ;src\/CheckPlayfield.h:196: HideHitSprite();
      001E00 CDr68r0C         [17] 6383 	call	_HideHitSprite
                                   6384 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E03 DD 36 FD 00      [19] 6385 	ld	-3 (ix), #0
      001E07                       6386 00235$:
      001E07 DD 7E FD         [19] 6387 	ld	a, -3 (ix)
      001E0A D6 0C            [ 7] 6388 	sub	a, #0x0c
      001E0C D2rEAr1E         [10] 6389 	jp	NC, 00177$
                                   6390 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E0F DD 36 FE 00      [19] 6391 	ld	-2 (ix), #0
      001E13                       6392 00232$:
      001E13 DD 7E FE         [19] 6393 	ld	a, -2 (ix)
      001E16 D6 06            [ 7] 6394 	sub	a, #0x06
      001E18 D2rE4r1E         [10] 6395 	jp	NC, 00236$
                                   6396 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001E1B DD 4E FE         [19] 6397 	ld	c, -2 (ix)
      001E1E 06 00            [ 7] 6398 	ld	b, #0x00
      001E20 69               [ 4] 6399 	ld	l, c
      001E21 60               [ 4] 6400 	ld	h, b
      001E22 29               [11] 6401 	add	hl, hl
      001E23 09               [11] 6402 	add	hl, bc
      001E24 29               [11] 6403 	add	hl, hl
      001E25 29               [11] 6404 	add	hl, hl
      001E26 EB               [ 4] 6405 	ex	de, hl
      001E27 21r00r00         [10] 6406 	ld	hl, #_playfield
      001E2A 19               [11] 6407 	add	hl, de
      001E2B DD 75 FB         [19] 6408 	ld	-5 (ix), l
      001E2E DD 74 FC         [19] 6409 	ld	-4 (ix), h
      001E31 DD 7E FB         [19] 6410 	ld	a, -5 (ix)
      001E34 DD 86 FD         [19] 6411 	add	a, -3 (ix)
      001E37 4F               [ 4] 6412 	ld	c, a
      001E38 DD 7E FC         [19] 6413 	ld	a, -4 (ix)
      001E3B CE 00            [ 7] 6414 	adc	a, #0x00
      001E3D 47               [ 4] 6415 	ld	b, a
      001E3E 0A               [ 7] 6416 	ld	a, (bc)
      001E3F 07               [ 4] 6417 	rlca
      001E40 D2rDEr1E         [10] 6418 	jp	NC,00233$
                                   6419 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      001E43 2Ar04r00         [16] 6420 	ld	hl, (_blocksRemoved)
      001E46 23               [ 6] 6421 	inc	hl
      001E47 22r04r00         [16] 6422 	ld	(_blocksRemoved), hl
                                   6423 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001E4A DD 7E FB         [19] 6424 	ld	a, -5 (ix)
      001E4D DD 77 F7         [19] 6425 	ld	-9 (ix), a
      001E50 DD 7E FC         [19] 6426 	ld	a, -4 (ix)
      001E53 DD 77 F8         [19] 6427 	ld	-8 (ix), a
      001E56 DD 7E FD         [19] 6428 	ld	a, -3 (ix)
      001E59 DD 77 FF         [19] 6429 	ld	-1 (ix), a
      001E5C                       6430 00229$:
      001E5C DD 7E FF         [19] 6431 	ld	a, -1 (ix)
      001E5F B7               [ 4] 6432 	or	a, a
      001E60 28 7C            [12] 6433 	jr	Z, 00233$
                                   6434 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      001E62 0E 01            [ 7] 6435 	ld	c, #0x01
                                   6436 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001E64 DD 7E FF         [19] 6437 	ld	a, -1 (ix)
      001E67 DD 77 FC         [19] 6438 	ld	-4 (ix), a
      001E6A 3D               [ 4] 6439 	dec	a
      001E6B DD 86 F7         [19] 6440 	add	a, -9 (ix)
      001E6E 5F               [ 4] 6441 	ld	e, a
      001E6F 3E 00            [ 7] 6442 	ld	a, #0x00
      001E71 DD 8E F8         [19] 6443 	adc	a, -8 (ix)
      001E74 57               [ 4] 6444 	ld	d, a
      001E75 1A               [ 7] 6445 	ld	a, (de)
      001E76 07               [ 4] 6446 	rlca
      001E77 30 02            [12] 6447 	jr	NC, 00170$
      001E79 0E 02            [ 7] 6448 	ld	c, #0x02
      001E7B                       6449 00170$:
                                   6450 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001E7B DD 7E FC         [19] 6451 	ld	a, -4 (ix)
      001E7E 3D               [ 4] 6452 	dec	a
      001E7F 3D               [ 4] 6453 	dec	a
      001E80 DD 86 F7         [19] 6454 	add	a, -9 (ix)
      001E83 5F               [ 4] 6455 	ld	e, a
      001E84 3E 00            [ 7] 6456 	ld	a, #0x00
      001E86 DD 8E F8         [19] 6457 	adc	a, -8 (ix)
      001E89 57               [ 4] 6458 	ld	d, a
      001E8A 1A               [ 7] 6459 	ld	a, (de)
      001E8B 07               [ 4] 6460 	rlca
      001E8C 30 01            [12] 6461 	jr	NC, 00172$
      001E8E 0C               [ 4] 6462 	inc	c
      001E8F                       6463 00172$:
                                   6464 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001E8F DD 7E F7         [19] 6465 	ld	a, -9 (ix)
      001E92 DD 86 FF         [19] 6466 	add	a, -1 (ix)
      001E95 DD 77 F9         [19] 6467 	ld	-7 (ix), a
      001E98 DD 7E F8         [19] 6468 	ld	a, -8 (ix)
      001E9B CE 00            [ 7] 6469 	adc	a, #0x00
      001E9D DD 77 FA         [19] 6470 	ld	-6 (ix), a
      001EA0 DD 6E FF         [19] 6471 	ld	l, -1 (ix)
      001EA3 26 00            [ 7] 6472 	ld	h, #0x00
      001EA5 59               [ 4] 6473 	ld	e, c
      001EA6 16 00            [ 7] 6474 	ld	d, #0x00
      001EA8 BF               [ 4] 6475 	cp	a, a
      001EA9 ED 52            [15] 6476 	sbc	hl, de
      001EAB CB 7C            [ 8] 6477 	bit	7, h
      001EAD 20 18            [12] 6478 	jr	NZ, 00243$
      001EAF DD 7E FF         [19] 6479 	ld	a, -1 (ix)
      001EB2 91               [ 4] 6480 	sub	a, c
      001EB3 DD 86 F7         [19] 6481 	add	a, -9 (ix)
      001EB6 4F               [ 4] 6482 	ld	c, a
      001EB7 3E 00            [ 7] 6483 	ld	a, #0x00
      001EB9 DD 8E F8         [19] 6484 	adc	a, -8 (ix)
      001EBC 47               [ 4] 6485 	ld	b, a
      001EBD 0A               [ 7] 6486 	ld	a, (bc)
      001EBE DD 77 FB         [19] 6487 	ld	-5 (ix), a
      001EC1 DD 36 FC 00      [19] 6488 	ld	-4 (ix), #0
      001EC5 18 07            [12] 6489 	jr	00244$
      001EC7                       6490 00243$:
      001EC7 AF               [ 4] 6491 	xor	a, a
      001EC8 DD 77 FB         [19] 6492 	ld	-5 (ix), a
      001ECB DD 77 FC         [19] 6493 	ld	-4 (ix), a
      001ECE                       6494 00244$:
      001ECE DD 7E FB         [19] 6495 	ld	a, -5 (ix)
      001ED1 DD 6E F9         [19] 6496 	ld	l, -7 (ix)
      001ED4 DD 66 FA         [19] 6497 	ld	h, -6 (ix)
      001ED7 77               [ 7] 6498 	ld	(hl), a
                                   6499 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001ED8 DD 35 FF         [23] 6500 	dec	-1 (ix)
      001EDB C3r5Cr1E         [10] 6501 	jp	00229$
      001EDE                       6502 00233$:
                                   6503 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001EDE DD 34 FE         [23] 6504 	inc	-2 (ix)
      001EE1 C3r13r1E         [10] 6505 	jp	00232$
      001EE4                       6506 00236$:
                                   6507 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001EE4 DD 34 FD         [23] 6508 	inc	-3 (ix)
      001EE7 C3r07r1E         [10] 6509 	jp	00235$
      001EEA                       6510 00177$:
                                   6511 ;src\/CheckPlayfield.h:227: oldLevel = level;
      001EEA 3Ar06r00         [13] 6512 	ld	a, (#_level + 0)
      001EED 4F               [ 4] 6513 	ld	c, a
                                   6514 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      001EEE 21r04r00         [10] 6515 	ld	hl, #_blocksRemoved
      001EF1 46               [ 7] 6516 	ld	b, (hl)
      001EF2 23               [ 6] 6517 	inc	hl
      001EF3 56               [ 7] 6518 	ld	d, (hl)
      001EF4 78               [ 4] 6519 	ld	a, b
      001EF5 D6 5A            [ 7] 6520 	sub	a, #0x5a
      001EF7 7A               [ 4] 6521 	ld	a, d
      001EF8 DE 00            [ 7] 6522 	sbc	a, #0x00
      001EFA 38 19            [12] 6523 	jr	C, 00185$
                                   6524 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      001EFC C5               [11] 6525 	push	bc
      001EFD 21 1E 00         [10] 6526 	ld	hl, #0x001e
      001F00 E5               [11] 6527 	push	hl
      001F01 58               [ 4] 6528 	ld	e, b
      001F02 D5               [11] 6529 	push	de
      001F03 CDr00r00         [17] 6530 	call	__divuint
      001F06 F1               [10] 6531 	pop	af
      001F07 F1               [10] 6532 	pop	af
      001F08 C1               [10] 6533 	pop	bc
      001F09 7D               [ 4] 6534 	ld	a, l
      001F0A 3C               [ 4] 6535 	inc	a
      001F0B 32r06r00         [13] 6536 	ld	(_level+0), a
                                   6537 ;src\/CheckPlayfield.h:230: speed = 15;
      001F0E 21r96r00         [10] 6538 	ld	hl, #_speed
      001F11 36 0F            [10] 6539 	ld	(hl), #0x0f
      001F13 18 32            [12] 6540 	jr	00186$
      001F15                       6541 00185$:
                                   6542 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      001F15 78               [ 4] 6543 	ld	a, b
      001F16 D6 3C            [ 7] 6544 	sub	a, #0x3c
      001F18 7A               [ 4] 6545 	ld	a, d
      001F19 DE 00            [ 7] 6546 	sbc	a, #0x00
      001F1B 38 0C            [12] 6547 	jr	C, 00182$
                                   6548 ;src\/CheckPlayfield.h:234: level = 3;
      001F1D 21r06r00         [10] 6549 	ld	hl, #_level
      001F20 36 03            [10] 6550 	ld	(hl), #0x03
                                   6551 ;src\/CheckPlayfield.h:235: speed = 30;
      001F22 21r96r00         [10] 6552 	ld	hl, #_speed
      001F25 36 1E            [10] 6553 	ld	(hl), #0x1e
      001F27 18 1E            [12] 6554 	jr	00186$
      001F29                       6555 00182$:
                                   6556 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      001F29 78               [ 4] 6557 	ld	a, b
      001F2A D6 1E            [ 7] 6558 	sub	a, #0x1e
      001F2C 7A               [ 4] 6559 	ld	a, d
      001F2D DE 00            [ 7] 6560 	sbc	a, #0x00
      001F2F 38 0C            [12] 6561 	jr	C, 00179$
                                   6562 ;src\/CheckPlayfield.h:238: level = 2;
      001F31 21r06r00         [10] 6563 	ld	hl, #_level
      001F34 36 02            [10] 6564 	ld	(hl), #0x02
                                   6565 ;src\/CheckPlayfield.h:239: speed = 45;
      001F36 21r96r00         [10] 6566 	ld	hl, #_speed
      001F39 36 2D            [10] 6567 	ld	(hl), #0x2d
      001F3B 18 0A            [12] 6568 	jr	00186$
      001F3D                       6569 00179$:
                                   6570 ;src\/CheckPlayfield.h:242: level = 1;
      001F3D 21r06r00         [10] 6571 	ld	hl, #_level
      001F40 36 01            [10] 6572 	ld	(hl), #0x01
                                   6573 ;src\/CheckPlayfield.h:243: speed = 60;
      001F42 21r96r00         [10] 6574 	ld	hl, #_speed
      001F45 36 3C            [10] 6575 	ld	(hl), #0x3c
      001F47                       6576 00186$:
                                   6577 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      001F47 3Ar06r00         [13] 6578 	ld	a,(#_level + 0)
      001F4A 91               [ 4] 6579 	sub	a, c
      001F4B 28 05            [12] 6580 	jr	Z, 00188$
                                   6581 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      001F4D 21r07r00         [10] 6582 	ld	hl, #_newLevel
      001F50 36 01            [10] 6583 	ld	(hl), #0x01
      001F52                       6584 00188$:
                                   6585 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      001F52 CDr84r17         [17] 6586 	call	_DrawPlayfield
                                   6587 ;src\/CheckPlayfield.h:257: DrawScore();
      001F55 CDrDAr10         [17] 6588 	call	_DrawScore
                                   6589 ;src\/CheckPlayfield.h:259: iteration++;
      001F58 DD 34 04         [23] 6590 	inc	4 (ix)
                                   6591 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      001F5B DD 7E 04         [19] 6592 	ld	a, 4 (ix)
      001F5E F5               [11] 6593 	push	af
      001F5F 33               [ 6] 6594 	inc	sp
      001F60 CDrF5r17         [17] 6595 	call	_CheckPlayfield
      001F63 18 03            [12] 6596 	jr	00237$
      001F65                       6597 00190$:
                                   6598 ;src\/CheckPlayfield.h:264: DrawScore();
      001F65 CDrDAr10         [17] 6599 	call	_DrawScore
      001F68                       6600 00237$:
                                   6601 ;src\/CheckPlayfield.h:266: }
      001F68 DD F9            [10] 6602 	ld	sp, ix
      001F6A DD E1            [14] 6603 	pop	ix
      001F6C C9               [10] 6604 	ret
                                   6605 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6606 ;	---------------------------------
                                   6607 ; Function RandomIndex
                                   6608 ; ---------------------------------
      001F6D                       6609 _RandomIndex::
                                   6610 ;src\/GameLogic.h:5: do {
      001F6D                       6611 00101$:
                                   6612 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001F6D CDrA3r00         [17] 6613 	call	_GetRandom
      001F70 7D               [ 4] 6614 	ld	a, l
      001F71 E6 07            [ 7] 6615 	and	a, #0x07
      001F73 6F               [ 4] 6616 	ld	l, a
                                   6617 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001F74 3E 04            [ 7] 6618 	ld	a, #0x04
      001F76 95               [ 4] 6619 	sub	a, l
      001F77 38 F4            [12] 6620 	jr	C, 00101$
                                   6621 ;src\/GameLogic.h:10: return random;
                                   6622 ;src\/GameLogic.h:11: }
      001F79 C9               [10] 6623 	ret
                                   6624 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6625 ;	---------------------------------
                                   6626 ; Function RandomPiece
                                   6627 ; ---------------------------------
      001F7A                       6628 _RandomPiece::
                                   6629 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      001F7A 3Ar93r00         [13] 6630 	ld	a,(#_nextTopPiece + 0)
      001F7D 32r90r00         [13] 6631 	ld	(#_topPiece),a
                                   6632 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      001F80 3Ar94r00         [13] 6633 	ld	a,(#_nextMidPiece + 0)
      001F83 32r91r00         [13] 6634 	ld	(#_midPiece),a
                                   6635 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      001F86 3Ar95r00         [13] 6636 	ld	a,(#_nextBottomPiece + 0)
      001F89 32r92r00         [13] 6637 	ld	(#_bottomPiece),a
                                   6638 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      001F8C 01r18r00         [10] 6639 	ld	bc, #_pieces+0
      001F8F C5               [11] 6640 	push	bc
      001F90 CDr6Dr1F         [17] 6641 	call	_RandomIndex
      001F93 C1               [10] 6642 	pop	bc
      001F94 26 00            [ 7] 6643 	ld	h, #0x00
      001F96 09               [11] 6644 	add	hl, bc
      001F97 7E               [ 7] 6645 	ld	a, (hl)
      001F98 32r93r00         [13] 6646 	ld	(_nextTopPiece+0), a
                                   6647 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      001F9B C5               [11] 6648 	push	bc
      001F9C CDr6Dr1F         [17] 6649 	call	_RandomIndex
      001F9F C1               [10] 6650 	pop	bc
      001FA0 26 00            [ 7] 6651 	ld	h, #0x00
      001FA2 09               [11] 6652 	add	hl, bc
      001FA3 7E               [ 7] 6653 	ld	a, (hl)
      001FA4 32r94r00         [13] 6654 	ld	(_nextMidPiece+0), a
                                   6655 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      001FA7 C5               [11] 6656 	push	bc
      001FA8 CDr6Dr1F         [17] 6657 	call	_RandomIndex
      001FAB C1               [10] 6658 	pop	bc
      001FAC 26 00            [ 7] 6659 	ld	h, #0x00
      001FAE 09               [11] 6660 	add	hl, bc
      001FAF 7E               [ 7] 6661 	ld	a, (hl)
      001FB0 32r95r00         [13] 6662 	ld	(_nextBottomPiece+0), a
                                   6663 ;src\/GameLogic.h:21: }
      001FB3 C9               [10] 6664 	ret
                                   6665 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   6666 ;	---------------------------------
                                   6667 ; Function UpdateAndDrawPieceStatic
                                   6668 ; ---------------------------------
      001FB4                       6669 _UpdateAndDrawPieceStatic::
                                   6670 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      001FB4 01r00r00         [10] 6671 	ld	bc, #_playfield+0
      001FB7 ED 5Br01r00      [20] 6672 	ld	de, (_col)
      001FBB 16 00            [ 7] 6673 	ld	d, #0x00
      001FBD 6B               [ 4] 6674 	ld	l, e
      001FBE 62               [ 4] 6675 	ld	h, d
      001FBF 29               [11] 6676 	add	hl, hl
      001FC0 19               [11] 6677 	add	hl, de
      001FC1 29               [11] 6678 	add	hl, hl
      001FC2 29               [11] 6679 	add	hl, hl
      001FC3 09               [11] 6680 	add	hl, bc
      001FC4 EB               [ 4] 6681 	ex	de, hl
      001FC5 3Ar02r00         [13] 6682 	ld	a, (#_line + 0)
      001FC8 6F               [ 4] 6683 	ld	l, a
      001FC9 26 00            [ 7] 6684 	ld	h, #0x00
      001FCB 19               [11] 6685 	add	hl, de
      001FCC 3Ar90r00         [13] 6686 	ld	a,(#_topPiece + 0)
      001FCF 77               [ 7] 6687 	ld	(hl), a
                                   6688 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      001FD0 ED 5Br01r00      [20] 6689 	ld	de, (_col)
      001FD4 16 00            [ 7] 6690 	ld	d, #0x00
      001FD6 6B               [ 4] 6691 	ld	l, e
      001FD7 62               [ 4] 6692 	ld	h, d
      001FD8 29               [11] 6693 	add	hl, hl
      001FD9 19               [11] 6694 	add	hl, de
      001FDA 29               [11] 6695 	add	hl, hl
      001FDB 29               [11] 6696 	add	hl, hl
      001FDC 09               [11] 6697 	add	hl, bc
      001FDD EB               [ 4] 6698 	ex	de, hl
      001FDE 3Ar02r00         [13] 6699 	ld	a, (#_line + 0)
      001FE1 6F               [ 4] 6700 	ld	l, a
      001FE2 2C               [ 4] 6701 	inc	l
      001FE3 26 00            [ 7] 6702 	ld	h, #0x00
      001FE5 19               [11] 6703 	add	hl, de
      001FE6 3Ar91r00         [13] 6704 	ld	a,(#_midPiece + 0)
      001FE9 77               [ 7] 6705 	ld	(hl), a
                                   6706 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      001FEA ED 5Br01r00      [20] 6707 	ld	de, (_col)
      001FEE 16 00            [ 7] 6708 	ld	d, #0x00
      001FF0 6B               [ 4] 6709 	ld	l, e
      001FF1 62               [ 4] 6710 	ld	h, d
      001FF2 29               [11] 6711 	add	hl, hl
      001FF3 19               [11] 6712 	add	hl, de
      001FF4 29               [11] 6713 	add	hl, hl
      001FF5 29               [11] 6714 	add	hl, hl
      001FF6 09               [11] 6715 	add	hl, bc
      001FF7 EB               [ 4] 6716 	ex	de, hl
      001FF8 3Ar02r00         [13] 6717 	ld	a, (#_line + 0)
      001FFB 6F               [ 4] 6718 	ld	l, a
      001FFC 2C               [ 4] 6719 	inc	l
      001FFD 2C               [ 4] 6720 	inc	l
      001FFE 26 00            [ 7] 6721 	ld	h, #0x00
      002000 19               [11] 6722 	add	hl, de
      002001 3Ar92r00         [13] 6723 	ld	a,(#_bottomPiece + 0)
      002004 77               [ 7] 6724 	ld	(hl), a
                                   6725 ;src\/GameLogic.h:29: DrawPiece(line);
      002005 C5               [11] 6726 	push	bc
      002006 3Ar02r00         [13] 6727 	ld	a,(#_line + 0)
      002009 F5               [11] 6728 	push	af
      00200A 33               [ 6] 6729 	inc	sp
      00200B CDr61r17         [17] 6730 	call	_DrawPiece
      00200E 33               [ 6] 6731 	inc	sp
      00200F C1               [10] 6732 	pop	bc
                                   6733 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002010 3E 02            [ 7] 6734 	ld	a, #0x02
      002012 32r01r00         [13] 6735 	ld	(#_col), a
                                   6736 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   6737 ;src\/GameLogic.h:35: counter = 0;
      002015 3E 00            [ 7] 6738 	ld	a,#0x00
      002017 32r02r00         [13] 6739 	ld	(#_line),a
      00201A 32r03r00         [13] 6740 	ld	(#_counter), a
                                   6741 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      00201D 3Ar18r00         [13] 6742 	ld	a, (#_playfield + 24)
      002020 B7               [ 4] 6743 	or	a, a
      002021 20 0C            [12] 6744 	jr	NZ, 00101$
                                   6745 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      002023 3Ar19r00         [13] 6746 	ld	a, (#_playfield + 25)
      002026 B7               [ 4] 6747 	or	a, a
      002027 20 06            [12] 6748 	jr	NZ, 00101$
                                   6749 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      002029 3Ar1Ar00         [13] 6750 	ld	a, (#_playfield + 26)
      00202C B7               [ 4] 6751 	or	a, a
      00202D 28 0B            [12] 6752 	jr	Z, 00102$
      00202F                       6753 00101$:
                                   6754 ;src\/GameLogic.h:41: gameOver = TRUE;
      00202F FD 21r00r00      [14] 6755 	ld	iy, #_gameOver
      002033 FD 36 00 01      [19] 6756 	ld	0 (iy), #0x01
      002037 C3r84r17         [10] 6757 	jp	_DrawPlayfield
      00203A                       6758 00102$:
                                   6759 ;src\/GameLogic.h:44: RandomPiece();
      00203A CDr7Ar1F         [17] 6760 	call	_RandomPiece
                                   6761 ;src\/GameLogic.h:46: CheckPlayfield(1);
      00203D 3E 01            [ 7] 6762 	ld	a, #0x01
      00203F F5               [11] 6763 	push	af
      002040 33               [ 6] 6764 	inc	sp
      002041 CDrF5r17         [17] 6765 	call	_CheckPlayfield
      002044 33               [ 6] 6766 	inc	sp
                                   6767 ;src\/GameLogic.h:49: DrawPlayfield();
                                   6768 ;src\/GameLogic.h:50: }
      002045 C3r84r17         [10] 6769 	jp	_DrawPlayfield
                                   6770 ;src\/GameLogic.h:52: void BlinkPauseText() {
                                   6771 ;	---------------------------------
                                   6772 ; Function BlinkPauseText
                                   6773 ; ---------------------------------
      002048                       6774 _BlinkPauseText::
                                   6775 ;src\/GameLogic.h:53: if(JIFFY & 0b00001000) {
      002048 2A 9E FC         [16] 6776 	ld	hl, (_JIFFY)
      00204B CB 5D            [ 8] 6777 	bit	3, l
      00204D 28 0E            [12] 6778 	jr	Z, 00102$
                                   6779 ;src\/GameLogic.h:54: DrawString("PAUSE", 13, 12);
      00204F 11 0D 0C         [10] 6780 	ld	de, #0x0c0d
      002052 D5               [11] 6781 	push	de
      002053 21r66r20         [10] 6782 	ld	hl, #___str_5
      002056 E5               [11] 6783 	push	hl
      002057 CDrF1r0D         [17] 6784 	call	_DrawString
      00205A F1               [10] 6785 	pop	af
      00205B F1               [10] 6786 	pop	af
      00205C C9               [10] 6787 	ret
      00205D                       6788 00102$:
                                   6789 ;src\/GameLogic.h:59: DrawLine(6);
      00205D 3E 06            [ 7] 6790 	ld	a, #0x06
      00205F F5               [11] 6791 	push	af
      002060 33               [ 6] 6792 	inc	sp
      002061 CDr29r17         [17] 6793 	call	_DrawLine
      002064 33               [ 6] 6794 	inc	sp
                                   6795 ;src\/GameLogic.h:62: }
      002065 C9               [10] 6796 	ret
      002066                       6797 ___str_5:
      002066 50 41 55 53 45        6798 	.ascii "PAUSE"
      00206B 00                    6799 	.db 0x00
                                   6800 ;src\/GameLogic.h:64: void Pause() {
                                   6801 ;	---------------------------------
                                   6802 ; Function Pause
                                   6803 ; ---------------------------------
      00206C                       6804 _Pause::
                                   6805 ;src\/GameLogic.h:67: DrawString("PAUSE", 13, 12);
      00206C 11 0D 0C         [10] 6806 	ld	de, #0x0c0d
      00206F D5               [11] 6807 	push	de
      002070 21rA6r20         [10] 6808 	ld	hl, #___str_6
      002073 E5               [11] 6809 	push	hl
      002074 CDrF1r0D         [17] 6810 	call	_DrawString
      002077 F1               [10] 6811 	pop	af
      002078 F1               [10] 6812 	pop	af
                                   6813 ;src\/GameLogic.h:69: while(TRUE) {
      002079                       6814 00114$:
                                   6815 ;src\/GameLogic.h:71: BlinkPauseText();
      002079 CDr48r20         [17] 6816 	call	_BlinkPauseText
                                   6817 ;src\/GameLogic.h:74: keyboard = SNSMAT(7);
      00207C 2E 07            [ 7] 6818 	ld	l, #0x07
      00207E CDr00r00         [17] 6819 	call	_SNSMAT
                                   6820 ;src\/GameLogic.h:75: if((keyboard & 0b00000100) != 0) {
      002081 CB 55            [ 8] 6821 	bit	2, l
      002083 28 F4            [12] 6822 	jr	Z, 00114$
                                   6823 ;src\/GameLogic.h:77: while(TRUE) {
      002085                       6824 00109$:
                                   6825 ;src\/GameLogic.h:79: BlinkPauseText();
      002085 CDr48r20         [17] 6826 	call	_BlinkPauseText
                                   6827 ;src\/GameLogic.h:82: keyboard = SNSMAT(7);
      002088 2E 07            [ 7] 6828 	ld	l, #0x07
      00208A CDr00r00         [17] 6829 	call	_SNSMAT
                                   6830 ;src\/GameLogic.h:83: if((keyboard & 0b00000100) == 0) {
      00208D CB 55            [ 8] 6831 	bit	2, l
      00208F 20 F4            [12] 6832 	jr	NZ, 00109$
                                   6833 ;src\/GameLogic.h:85: while(TRUE) {
      002091                       6834 00104$:
                                   6835 ;src\/GameLogic.h:87: BlinkPauseText();
      002091 CDr48r20         [17] 6836 	call	_BlinkPauseText
                                   6837 ;src\/GameLogic.h:90: keyboard = SNSMAT(7);
      002094 2E 07            [ 7] 6838 	ld	l, #0x07
      002096 CDr00r00         [17] 6839 	call	_SNSMAT
                                   6840 ;src\/GameLogic.h:91: if((keyboard & 0b00000100) != 0) {
      002099 CB 55            [ 8] 6841 	bit	2, l
      00209B 28 F4            [12] 6842 	jr	Z, 00104$
                                   6843 ;src\/GameLogic.h:93: DrawLine(6);
      00209D 3E 06            [ 7] 6844 	ld	a, #0x06
      00209F F5               [11] 6845 	push	af
      0020A0 33               [ 6] 6846 	inc	sp
      0020A1 CDr29r17         [17] 6847 	call	_DrawLine
      0020A4 33               [ 6] 6848 	inc	sp
                                   6849 ;src\/GameLogic.h:94: return;
                                   6850 ;src\/GameLogic.h:104: }
      0020A5 C9               [10] 6851 	ret
      0020A6                       6852 ___str_6:
      0020A6 50 41 55 53 45        6853 	.ascii "PAUSE"
      0020AB 00                    6854 	.db 0x00
                                   6855 ;src\/GameLogic.h:106: void GameLoop() {
                                   6856 ;	---------------------------------
                                   6857 ; Function GameLoop
                                   6858 ; ---------------------------------
      0020AC                       6859 _GameLoop::
      0020AC DD E5            [15] 6860 	push	ix
      0020AE DD 21 00 00      [14] 6861 	ld	ix,#0
      0020B2 DD 39            [15] 6862 	add	ix,sp
      0020B4 21 F3 FF         [10] 6863 	ld	hl, #-13
      0020B7 39               [11] 6864 	add	hl, sp
      0020B8 F9               [ 6] 6865 	ld	sp, hl
                                   6866 ;src\/GameLogic.h:109: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      0020B9 DD 36 FF 00      [19] 6867 	ld	-1 (ix), #0
      0020BD DD 36 F3 00      [19] 6868 	ld	-13 (ix), #0
                                   6869 ;src\/GameLogic.h:110: byte lastBtn1 = 0, lastBtn2 = 0;
      0020C1 DD 36 F4 00      [19] 6870 	ld	-12 (ix), #0
      0020C5 DD 36 F5 00      [19] 6871 	ld	-11 (ix), #0
                                   6872 ;src\/GameLogic.h:113: while(!gameOver) {
      0020C9                       6873 00150$:
      0020C9 3Ar00r00         [13] 6874 	ld	a,(#_gameOver + 0)
      0020CC B7               [ 4] 6875 	or	a, a
      0020CD C2r64r24         [10] 6876 	jp	NZ, 00152$
                                   6877 ;src\/GameLogic.h:115: word lastJiffy = JIFFY;
      0020D0 ED 4B 9E FC      [20] 6878 	ld	bc, (_JIFFY)
                                   6879 ;src\/GameLogic.h:117: while (lastJiffy == JIFFY) {
      0020D4                       6880 00101$:
      0020D4 2A 9E FC         [16] 6881 	ld	hl, (_JIFFY)
      0020D7 BF               [ 4] 6882 	cp	a, a
      0020D8 ED 42            [15] 6883 	sbc	hl, bc
      0020DA 28 F8            [12] 6884 	jr	Z, 00101$
                                   6885 ;src\/GameLogic.h:126: playfield[col][line] = EMPTY;
      0020DC ED 4Br01r00      [20] 6886 	ld	bc, (_col)
      0020E0 06 00            [ 7] 6887 	ld	b, #0x00
      0020E2 69               [ 4] 6888 	ld	l, c
      0020E3 60               [ 4] 6889 	ld	h, b
      0020E4 29               [11] 6890 	add	hl, hl
      0020E5 09               [11] 6891 	add	hl, bc
      0020E6 29               [11] 6892 	add	hl, hl
      0020E7 29               [11] 6893 	add	hl, hl
      0020E8 EB               [ 4] 6894 	ex	de, hl
      0020E9 21r00r00         [10] 6895 	ld	hl, #_playfield
      0020EC 19               [11] 6896 	add	hl, de
      0020ED EB               [ 4] 6897 	ex	de, hl
      0020EE FD 21r02r00      [14] 6898 	ld	iy, #_line
      0020F2 FD 6E 00         [19] 6899 	ld	l, 0 (iy)
      0020F5 26 00            [ 7] 6900 	ld	h, #0x00
      0020F7 19               [11] 6901 	add	hl, de
      0020F8 36 00            [10] 6902 	ld	(hl), #0x00
                                   6903 ;src\/GameLogic.h:127: playfield[col][line + 1] = EMPTY;
      0020FA ED 4Br01r00      [20] 6904 	ld	bc, (_col)
      0020FE 06 00            [ 7] 6905 	ld	b, #0x00
      002100 69               [ 4] 6906 	ld	l, c
      002101 60               [ 4] 6907 	ld	h, b
      002102 29               [11] 6908 	add	hl, hl
      002103 09               [11] 6909 	add	hl, bc
      002104 29               [11] 6910 	add	hl, hl
      002105 29               [11] 6911 	add	hl, hl
      002106 EB               [ 4] 6912 	ex	de, hl
      002107 21r00r00         [10] 6913 	ld	hl, #_playfield
      00210A 19               [11] 6914 	add	hl, de
      00210B EB               [ 4] 6915 	ex	de, hl
      00210C FD 6E 00         [19] 6916 	ld	l, 0 (iy)
      00210F 2C               [ 4] 6917 	inc	l
      002110 26 00            [ 7] 6918 	ld	h, #0x00
      002112 19               [11] 6919 	add	hl, de
      002113 36 00            [10] 6920 	ld	(hl), #0x00
                                   6921 ;src\/GameLogic.h:128: playfield[col][line + 2] = EMPTY;
      002115 ED 4Br01r00      [20] 6922 	ld	bc, (_col)
      002119 06 00            [ 7] 6923 	ld	b, #0x00
      00211B 69               [ 4] 6924 	ld	l, c
      00211C 60               [ 4] 6925 	ld	h, b
      00211D 29               [11] 6926 	add	hl, hl
      00211E 09               [11] 6927 	add	hl, bc
      00211F 29               [11] 6928 	add	hl, hl
      002120 29               [11] 6929 	add	hl, hl
      002121 EB               [ 4] 6930 	ex	de, hl
      002122 21r00r00         [10] 6931 	ld	hl, #_playfield
      002125 19               [11] 6932 	add	hl, de
      002126 EB               [ 4] 6933 	ex	de, hl
      002127 FD 6E 00         [19] 6934 	ld	l, 0 (iy)
      00212A 2C               [ 4] 6935 	inc	l
      00212B 2C               [ 4] 6936 	inc	l
      00212C 26 00            [ 7] 6937 	ld	h, #0x00
      00212E 19               [11] 6938 	add	hl, de
      00212F 36 00            [10] 6939 	ld	(hl), #0x00
                                   6940 ;src\/GameLogic.h:131: joystick = GTSTCK(STCK_Joy1);
      002131 2E 01            [ 7] 6941 	ld	l, #0x01
      002133 CDr00r00         [17] 6942 	call	_GTSTCK
      002136 DD 75 F6         [19] 6943 	ld	-10 (ix), l
                                   6944 ;src\/GameLogic.h:132: btn1 = GTTRIG(TRIG_Joy1_A);
      002139 2E 01            [ 7] 6945 	ld	l, #0x01
      00213B CDr00r00         [17] 6946 	call	_GTTRIG
      00213E DD 75 F7         [19] 6947 	ld	-9 (ix), l
                                   6948 ;src\/GameLogic.h:133: btn2 = GTTRIG(TRIG_Joy1_B);
      002141 2E 03            [ 7] 6949 	ld	l, #0x03
      002143 CDr00r00         [17] 6950 	call	_GTTRIG
      002146 DD 75 F8         [19] 6951 	ld	-8 (ix), l
                                   6952 ;src\/GameLogic.h:135: if(joystick == STCK_none) {
      002149 DD 7E F6         [19] 6953 	ld	a, -10 (ix)
                                   6954 ;src\/GameLogic.h:136: joystick = GTSTCK(STCK_Cursors);
      00214C B7               [ 4] 6955 	or	a,a
      00214D 20 07            [12] 6956 	jr	NZ, 00105$
      00214F 6F               [ 4] 6957 	ld	l,a
      002150 CDr00r00         [17] 6958 	call	_GTSTCK
      002153 DD 75 F6         [19] 6959 	ld	-10 (ix), l
      002156                       6960 00105$:
                                   6961 ;src\/GameLogic.h:126: playfield[col][line] = EMPTY;
      002156 FD 21r02r00      [14] 6962 	ld	iy, #_line
      00215A FD 7E 00         [19] 6963 	ld	a, 0 (iy)
      00215D DD 77 F9         [19] 6964 	ld	-7 (ix), a
                                   6965 ;src\/GameLogic.h:139: if(lastJoystick_LeftRight == STCK_none) {
      002160 DD 7E FF         [19] 6966 	ld	a, -1 (ix)
      002163 B7               [ 4] 6967 	or	a, a
      002164 C2r4Dr22         [10] 6968 	jp	NZ, 00118$
                                   6969 ;src\/GameLogic.h:127: playfield[col][line + 1] = EMPTY;
      002167 FD 7E 00         [19] 6970 	ld	a, 0 (iy)
      00216A DD 77 FF         [19] 6971 	ld	-1 (ix), a
                                   6972 ;src\/GameLogic.h:144: playfield[col - 1][line] == EMPTY && 
      00216D FD 21r01r00      [14] 6973 	ld	iy, #_col
      002171 FD 7E 00         [19] 6974 	ld	a, 0 (iy)
      002174 DD 77 FA         [19] 6975 	ld	-6 (ix), a
                                   6976 ;src\/GameLogic.h:145: playfield[col - 1][line + 2] == EMPTY) {
      002177 DD 7E FF         [19] 6977 	ld	a, -1 (ix)
      00217A C6 02            [ 7] 6978 	add	a, #0x02
      00217C DD 77 FB         [19] 6979 	ld	-5 (ix), a
                                   6980 ;src\/GameLogic.h:142: if (joystick == STCK_W && 
      00217F DD 7E F6         [19] 6981 	ld	a, -10 (ix)
      002182 D6 07            [ 7] 6982 	sub	a, #0x07
      002184 20 5F            [12] 6983 	jr	NZ, 00112$
                                   6984 ;src\/GameLogic.h:143: col > 0 && 
      002186 FD 7E 00         [19] 6985 	ld	a, 0 (iy)
      002189 B7               [ 4] 6986 	or	a, a
      00218A 28 59            [12] 6987 	jr	Z, 00112$
                                   6988 ;src\/GameLogic.h:144: playfield[col - 1][line] == EMPTY && 
      00218C DD 7E FA         [19] 6989 	ld	a, -6 (ix)
      00218F C6 FF            [ 7] 6990 	add	a, #0xff
      002191 DD 77 FF         [19] 6991 	ld	-1 (ix), a
      002194 4F               [ 4] 6992 	ld	c, a
      002195 07               [ 4] 6993 	rlca
      002196 9F               [ 4] 6994 	sbc	a, a
      002197 47               [ 4] 6995 	ld	b, a
      002198 69               [ 4] 6996 	ld	l, c
      002199 60               [ 4] 6997 	ld	h, b
      00219A 29               [11] 6998 	add	hl, hl
      00219B 09               [11] 6999 	add	hl, bc
      00219C 29               [11] 7000 	add	hl, hl
      00219D 29               [11] 7001 	add	hl, hl
      00219E DD 75 FE         [19] 7002 	ld	-2 (ix), l
      0021A1 DD 74 FF         [19] 7003 	ld	-1 (ix), h
      0021A4 3Er00            [ 7] 7004 	ld	a, #<(_playfield)
      0021A6 DD 86 FE         [19] 7005 	add	a, -2 (ix)
      0021A9 DD 77 FC         [19] 7006 	ld	-4 (ix), a
      0021AC 3Es00            [ 7] 7007 	ld	a, #>(_playfield)
      0021AE DD 8E FF         [19] 7008 	adc	a, -1 (ix)
      0021B1 DD 77 FD         [19] 7009 	ld	-3 (ix), a
      0021B4 DD 7E FC         [19] 7010 	ld	a, -4 (ix)
      0021B7 DD 86 F9         [19] 7011 	add	a, -7 (ix)
      0021BA DD 77 FE         [19] 7012 	ld	-2 (ix), a
      0021BD DD 7E FD         [19] 7013 	ld	a, -3 (ix)
      0021C0 CE 00            [ 7] 7014 	adc	a, #0x00
      0021C2 DD 77 FF         [19] 7015 	ld	-1 (ix), a
      0021C5 DD 6E FE         [19] 7016 	ld	l, -2 (ix)
      0021C8 DD 66 FF         [19] 7017 	ld	h, -1 (ix)
      0021CB 7E               [ 7] 7018 	ld	a, (hl)
      0021CC B7               [ 4] 7019 	or	a, a
      0021CD 20 16            [12] 7020 	jr	NZ, 00112$
                                   7021 ;src\/GameLogic.h:145: playfield[col - 1][line + 2] == EMPTY) {
      0021CF DD 7E FC         [19] 7022 	ld	a, -4 (ix)
      0021D2 DD 86 FB         [19] 7023 	add	a, -5 (ix)
      0021D5 4F               [ 4] 7024 	ld	c, a
      0021D6 DD 7E FD         [19] 7025 	ld	a, -3 (ix)
      0021D9 CE 00            [ 7] 7026 	adc	a, #0x00
      0021DB 47               [ 4] 7027 	ld	b, a
      0021DC 0A               [ 7] 7028 	ld	a, (bc)
      0021DD B7               [ 4] 7029 	or	a, a
      0021DE 20 05            [12] 7030 	jr	NZ, 00112$
                                   7031 ;src\/GameLogic.h:146: col--;
      0021E0 FD 35 00         [23] 7032 	dec	0 (iy)
      0021E3 18 68            [12] 7033 	jr	00118$
      0021E5                       7034 00112$:
                                   7035 ;src\/GameLogic.h:148: else if (joystick == STCK_E && 
      0021E5 DD 7E F6         [19] 7036 	ld	a, -10 (ix)
      0021E8 D6 03            [ 7] 7037 	sub	a, #0x03
      0021EA 20 61            [12] 7038 	jr	NZ, 00118$
                                   7039 ;src\/GameLogic.h:149: col < COLS_PLAYFIELD - 1 &&
      0021EC FD 21r01r00      [14] 7040 	ld	iy, #_col
      0021F0 FD 7E 00         [19] 7041 	ld	a, 0 (iy)
      0021F3 D6 05            [ 7] 7042 	sub	a, #0x05
      0021F5 30 56            [12] 7043 	jr	NC, 00118$
                                   7044 ;src\/GameLogic.h:150: playfield[col + 1][line] == EMPTY &&
      0021F7 DD 7E FA         [19] 7045 	ld	a, -6 (ix)
      0021FA 3C               [ 4] 7046 	inc	a
      0021FB DD 77 FF         [19] 7047 	ld	-1 (ix), a
      0021FE 4F               [ 4] 7048 	ld	c, a
      0021FF 07               [ 4] 7049 	rlca
      002200 9F               [ 4] 7050 	sbc	a, a
      002201 47               [ 4] 7051 	ld	b, a
      002202 69               [ 4] 7052 	ld	l, c
      002203 60               [ 4] 7053 	ld	h, b
      002204 29               [11] 7054 	add	hl, hl
      002205 09               [11] 7055 	add	hl, bc
      002206 29               [11] 7056 	add	hl, hl
      002207 29               [11] 7057 	add	hl, hl
      002208 DD 75 FE         [19] 7058 	ld	-2 (ix), l
      00220B DD 74 FF         [19] 7059 	ld	-1 (ix), h
      00220E 3Er00            [ 7] 7060 	ld	a, #<(_playfield)
      002210 DD 86 FE         [19] 7061 	add	a, -2 (ix)
      002213 DD 77 FC         [19] 7062 	ld	-4 (ix), a
      002216 3Es00            [ 7] 7063 	ld	a, #>(_playfield)
      002218 DD 8E FF         [19] 7064 	adc	a, -1 (ix)
      00221B DD 77 FD         [19] 7065 	ld	-3 (ix), a
      00221E DD 7E FC         [19] 7066 	ld	a, -4 (ix)
      002221 DD 86 F9         [19] 7067 	add	a, -7 (ix)
      002224 DD 77 FE         [19] 7068 	ld	-2 (ix), a
      002227 DD 7E FD         [19] 7069 	ld	a, -3 (ix)
      00222A CE 00            [ 7] 7070 	adc	a, #0x00
      00222C DD 77 FF         [19] 7071 	ld	-1 (ix), a
      00222F DD 6E FE         [19] 7072 	ld	l, -2 (ix)
      002232 DD 66 FF         [19] 7073 	ld	h, -1 (ix)
      002235 7E               [ 7] 7074 	ld	a, (hl)
      002236 B7               [ 4] 7075 	or	a, a
      002237 20 14            [12] 7076 	jr	NZ, 00118$
                                   7077 ;src\/GameLogic.h:151: playfield[col + 1][line + 2] == EMPTY) {
      002239 DD 7E FC         [19] 7078 	ld	a, -4 (ix)
      00223C DD 86 FB         [19] 7079 	add	a, -5 (ix)
      00223F 4F               [ 4] 7080 	ld	c, a
      002240 DD 7E FD         [19] 7081 	ld	a, -3 (ix)
      002243 CE 00            [ 7] 7082 	adc	a, #0x00
      002245 47               [ 4] 7083 	ld	b, a
      002246 0A               [ 7] 7084 	ld	a, (bc)
      002247 B7               [ 4] 7085 	or	a, a
      002248 20 03            [12] 7086 	jr	NZ, 00118$
                                   7087 ;src\/GameLogic.h:152: col++;
      00224A FD 34 00         [23] 7088 	inc	0 (iy)
      00224D                       7089 00118$:
                                   7090 ;src\/GameLogic.h:156: if(lastJoystick_UpDown == STCK_none) {
      00224D DD 7E F3         [19] 7091 	ld	a, -13 (ix)
      002250 B7               [ 4] 7092 	or	a, a
      002251 C2r13r23         [10] 7093 	jp	NZ, 00132$
                                   7094 ;src\/GameLogic.h:160: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002254 DD 7E F6         [19] 7095 	ld	a, -10 (ix)
      002257 3D               [ 4] 7096 	dec	a
      002258 28 18            [12] 7097 	jr	Z, 00119$
      00225A DD 7E F4         [19] 7098 	ld	a, -12 (ix)
      00225D B7               [ 4] 7099 	or	a, a
      00225E 20 06            [12] 7100 	jr	NZ, 00124$
      002260 DD 7E F7         [19] 7101 	ld	a, -9 (ix)
      002263 3C               [ 4] 7102 	inc	a
      002264 28 0C            [12] 7103 	jr	Z, 00119$
      002266                       7104 00124$:
      002266 DD 7E F5         [19] 7105 	ld	a, -11 (ix)
      002269 B7               [ 4] 7106 	or	a, a
      00226A 20 1A            [12] 7107 	jr	NZ, 00120$
      00226C DD 7E F8         [19] 7108 	ld	a, -8 (ix)
      00226F 3C               [ 4] 7109 	inc	a
      002270 20 14            [12] 7110 	jr	NZ, 00120$
      002272                       7111 00119$:
                                   7112 ;src\/GameLogic.h:161: byte temp = bottomPiece;
      002272 3Ar92r00         [13] 7113 	ld	a, (#_bottomPiece + 0)
      002275 4F               [ 4] 7114 	ld	c, a
                                   7115 ;src\/GameLogic.h:163: bottomPiece = midPiece;
      002276 3Ar91r00         [13] 7116 	ld	a,(#_midPiece + 0)
      002279 32r92r00         [13] 7117 	ld	(#_bottomPiece),a
                                   7118 ;src\/GameLogic.h:164: midPiece = topPiece;
      00227C 3Ar90r00         [13] 7119 	ld	a,(#_topPiece + 0)
      00227F 32r91r00         [13] 7120 	ld	(#_midPiece),a
                                   7121 ;src\/GameLogic.h:165: topPiece = temp;
      002282 21r90r00         [10] 7122 	ld	hl, #_topPiece
      002285 71               [ 7] 7123 	ld	(hl), c
      002286                       7124 00120$:
                                   7125 ;src\/GameLogic.h:169: if (joystick == STCK_S) {
      002286 DD 7E F6         [19] 7126 	ld	a, -10 (ix)
      002289 D6 05            [ 7] 7127 	sub	a, #0x05
      00228B C2r13r23         [10] 7128 	jp	NZ,00132$
                                   7129 ;src\/GameLogic.h:170: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00228E DD 7E F9         [19] 7130 	ld	a, -7 (ix)
      002291 DD 77 FE         [19] 7131 	ld	-2 (ix), a
      002294 DD 7E F9         [19] 7132 	ld	a, -7 (ix)
      002297 DD 77 FF         [19] 7133 	ld	-1 (ix), a
      00229A                       7134 00154$:
      00229A DD 7E FF         [19] 7135 	ld	a, -1 (ix)
      00229D D6 0C            [ 7] 7136 	sub	a, #0x0c
      00229F 30 72            [12] 7137 	jr	NC, 00132$
                                   7138 ;src\/GameLogic.h:171: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0022A1 DD 7E FF         [19] 7139 	ld	a, -1 (ix)
      0022A4 D6 09            [ 7] 7140 	sub	a, #0x09
      0022A6 28 4C            [12] 7141 	jr	Z, 00125$
      0022A8 ED 4Br01r00      [20] 7142 	ld	bc, (_col)
      0022AC 06 00            [ 7] 7143 	ld	b, #0x00
      0022AE 69               [ 4] 7144 	ld	l, c
      0022AF 60               [ 4] 7145 	ld	h, b
      0022B0 29               [11] 7146 	add	hl, hl
      0022B1 09               [11] 7147 	add	hl, bc
      0022B2 29               [11] 7148 	add	hl, hl
      0022B3 29               [11] 7149 	add	hl, hl
      0022B4 DD 75 FC         [19] 7150 	ld	-4 (ix), l
      0022B7 DD 74 FD         [19] 7151 	ld	-3 (ix), h
      0022BA 3Er00            [ 7] 7152 	ld	a, #<(_playfield)
      0022BC DD 86 FC         [19] 7153 	add	a, -4 (ix)
      0022BF DD 77 FA         [19] 7154 	ld	-6 (ix), a
      0022C2 3Es00            [ 7] 7155 	ld	a, #>(_playfield)
      0022C4 DD 8E FD         [19] 7156 	adc	a, -3 (ix)
      0022C7 DD 77 FB         [19] 7157 	ld	-5 (ix), a
      0022CA DD 7E FF         [19] 7158 	ld	a, -1 (ix)
      0022CD DD 77 FD         [19] 7159 	ld	-3 (ix), a
      0022D0 DD 34 FD         [23] 7160 	inc	-3 (ix)
      0022D3 DD 34 FD         [23] 7161 	inc	-3 (ix)
      0022D6 DD 34 FD         [23] 7162 	inc	-3 (ix)
      0022D9 DD 7E FD         [19] 7163 	ld	a, -3 (ix)
      0022DC DD 86 FA         [19] 7164 	add	a, -6 (ix)
      0022DF DD 77 FC         [19] 7165 	ld	-4 (ix), a
      0022E2 3E 00            [ 7] 7166 	ld	a, #0x00
      0022E4 DD 8E FB         [19] 7167 	adc	a, -5 (ix)
      0022E7 DD 77 FD         [19] 7168 	ld	-3 (ix), a
      0022EA DD 6E FC         [19] 7169 	ld	l, -4 (ix)
      0022ED DD 66 FD         [19] 7170 	ld	h, -3 (ix)
      0022F0 7E               [ 7] 7171 	ld	a, (hl)
      0022F1 B7               [ 4] 7172 	or	a, a
      0022F2 28 14            [12] 7173 	jr	Z, 00155$
      0022F4                       7174 00125$:
                                   7175 ;src\/GameLogic.h:174: DrawPiece(line);
      0022F4 3Ar02r00         [13] 7176 	ld	a,(#_line + 0)
      0022F7 F5               [11] 7177 	push	af
      0022F8 33               [ 6] 7178 	inc	sp
      0022F9 CDr61r17         [17] 7179 	call	_DrawPiece
      0022FC 33               [ 6] 7180 	inc	sp
                                   7181 ;src\/GameLogic.h:176: line = i;
      0022FD DD 7E FE         [19] 7182 	ld	a, -2 (ix)
      002300 32r02r00         [13] 7183 	ld	(#_line),a
                                   7184 ;src\/GameLogic.h:178: UpdateAndDrawPieceStatic();
      002303 CDrB4r1F         [17] 7185 	call	_UpdateAndDrawPieceStatic
                                   7186 ;src\/GameLogic.h:179: break;
      002306 18 0B            [12] 7187 	jr	00132$
      002308                       7188 00155$:
                                   7189 ;src\/GameLogic.h:170: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002308 DD 34 FF         [23] 7190 	inc	-1 (ix)
      00230B DD 7E FF         [19] 7191 	ld	a, -1 (ix)
      00230E DD 77 FE         [19] 7192 	ld	-2 (ix), a
      002311 18 87            [12] 7193 	jr	00154$
      002313                       7194 00132$:
                                   7195 ;src\/GameLogic.h:188: lastJoystick_LeftRight = joystick;
      002313 DD 7E F6         [19] 7196 	ld	a, -10 (ix)
      002316 DD 77 FF         [19] 7197 	ld	-1 (ix), a
                                   7198 ;src\/GameLogic.h:189: lastJoystick_UpDown = joystick;
      002319 DD 7E F6         [19] 7199 	ld	a, -10 (ix)
      00231C DD 77 F3         [19] 7200 	ld	-13 (ix), a
                                   7201 ;src\/GameLogic.h:190: lastBtn1 = btn1;
      00231F DD 7E F7         [19] 7202 	ld	a, -9 (ix)
      002322 DD 77 F4         [19] 7203 	ld	-12 (ix), a
                                   7204 ;src\/GameLogic.h:191: lastBtn2 = btn2;
      002325 DD 7E F8         [19] 7205 	ld	a, -8 (ix)
      002328 DD 77 F5         [19] 7206 	ld	-11 (ix), a
                                   7207 ;src\/GameLogic.h:215: keyboard = SNSMAT(7);
      00232B 2E 07            [ 7] 7208 	ld	l, #0x07
      00232D CDr00r00         [17] 7209 	call	_SNSMAT
                                   7210 ;src\/GameLogic.h:217: if((keyboard & 0b00000100) == 0) {
      002330 CB 55            [ 8] 7211 	bit	2, l
      002332 20 03            [12] 7212 	jr	NZ, 00134$
                                   7213 ;src\/GameLogic.h:218: Pause();
      002334 CDr6Cr20         [17] 7214 	call	_Pause
      002337                       7215 00134$:
                                   7216 ;src\/GameLogic.h:223: counter++;
      002337 FD 21r03r00      [14] 7217 	ld	iy, #_counter
      00233B FD 34 00         [23] 7218 	inc	0 (iy)
                                   7219 ;src\/GameLogic.h:224: if(counter == speed) {
      00233E FD 7E 00         [19] 7220 	ld	a, 0 (iy)
      002341 21r96r00         [10] 7221 	ld	hl, #_speed
      002344 96               [ 7] 7222 	sub	a, (hl)
      002345 20 3F            [12] 7223 	jr	NZ, 00139$
                                   7224 ;src\/GameLogic.h:226: counter = 0;
      002347 21r03r00         [10] 7225 	ld	hl, #_counter
      00234A 36 00            [10] 7226 	ld	(hl), #0x00
                                   7227 ;src\/GameLogic.h:229: DrawPiece(line);
      00234C 3Ar02r00         [13] 7228 	ld	a,(#_line + 0)
      00234F F5               [11] 7229 	push	af
      002350 33               [ 6] 7230 	inc	sp
      002351 CDr61r17         [17] 7231 	call	_DrawPiece
      002354 33               [ 6] 7232 	inc	sp
                                   7233 ;src\/GameLogic.h:233: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002355 FD 21r02r00      [14] 7234 	ld	iy, #_line
      002359 FD 7E 00         [19] 7235 	ld	a, 0 (iy)
      00235C D6 09            [ 7] 7236 	sub	a, #0x09
      00235E 28 1F            [12] 7237 	jr	Z, 00135$
      002360 ED 4Br01r00      [20] 7238 	ld	bc, (_col)
      002364 06 00            [ 7] 7239 	ld	b, #0x00
      002366 69               [ 4] 7240 	ld	l, c
      002367 60               [ 4] 7241 	ld	h, b
      002368 29               [11] 7242 	add	hl, hl
      002369 09               [11] 7243 	add	hl, bc
      00236A 29               [11] 7244 	add	hl, hl
      00236B 29               [11] 7245 	add	hl, hl
      00236C EB               [ 4] 7246 	ex	de, hl
      00236D 21r00r00         [10] 7247 	ld	hl, #_playfield
      002370 19               [11] 7248 	add	hl, de
      002371 EB               [ 4] 7249 	ex	de, hl
      002372 FD 7E 00         [19] 7250 	ld	a, 0 (iy)
      002375 C6 03            [ 7] 7251 	add	a, #0x03
      002377 6F               [ 4] 7252 	ld	l, a
      002378 26 00            [ 7] 7253 	ld	h, #0x00
      00237A 19               [11] 7254 	add	hl, de
      00237B 7E               [ 7] 7255 	ld	a, (hl)
      00237C B7               [ 4] 7256 	or	a, a
      00237D 28 03            [12] 7257 	jr	Z, 00136$
      00237F                       7258 00135$:
                                   7259 ;src\/GameLogic.h:235: UpdateAndDrawPieceStatic();
      00237F CDrB4r1F         [17] 7260 	call	_UpdateAndDrawPieceStatic
      002382                       7261 00136$:
                                   7262 ;src\/GameLogic.h:238: line++;
      002382 21r02r00         [10] 7263 	ld	hl, #_line
      002385 34               [11] 7264 	inc	(hl)
      002386                       7265 00139$:
                                   7266 ;src\/GameLogic.h:245: playfield[col][line] = topPiece;
      002386 ED 4Br01r00      [20] 7267 	ld	bc, (_col)
      00238A 06 00            [ 7] 7268 	ld	b, #0x00
      00238C 69               [ 4] 7269 	ld	l, c
      00238D 60               [ 4] 7270 	ld	h, b
      00238E 29               [11] 7271 	add	hl, hl
      00238F 09               [11] 7272 	add	hl, bc
      002390 29               [11] 7273 	add	hl, hl
      002391 29               [11] 7274 	add	hl, hl
      002392 EB               [ 4] 7275 	ex	de, hl
      002393 21r00r00         [10] 7276 	ld	hl, #_playfield
      002396 19               [11] 7277 	add	hl, de
      002397 EB               [ 4] 7278 	ex	de, hl
      002398 3Ar02r00         [13] 7279 	ld	a, (#_line + 0)
      00239B 6F               [ 4] 7280 	ld	l, a
      00239C 26 00            [ 7] 7281 	ld	h, #0x00
      00239E 19               [11] 7282 	add	hl, de
      00239F 3Ar90r00         [13] 7283 	ld	a,(#_topPiece + 0)
      0023A2 77               [ 7] 7284 	ld	(hl), a
                                   7285 ;src\/GameLogic.h:246: playfield[col][line + 1] = midPiece;
      0023A3 ED 4Br01r00      [20] 7286 	ld	bc, (_col)
      0023A7 06 00            [ 7] 7287 	ld	b, #0x00
      0023A9 69               [ 4] 7288 	ld	l, c
      0023AA 60               [ 4] 7289 	ld	h, b
      0023AB 29               [11] 7290 	add	hl, hl
      0023AC 09               [11] 7291 	add	hl, bc
      0023AD 29               [11] 7292 	add	hl, hl
      0023AE 29               [11] 7293 	add	hl, hl
      0023AF EB               [ 4] 7294 	ex	de, hl
      0023B0 21r00r00         [10] 7295 	ld	hl, #_playfield
      0023B3 19               [11] 7296 	add	hl, de
      0023B4 EB               [ 4] 7297 	ex	de, hl
      0023B5 3Ar02r00         [13] 7298 	ld	a, (#_line + 0)
      0023B8 6F               [ 4] 7299 	ld	l, a
      0023B9 2C               [ 4] 7300 	inc	l
      0023BA 26 00            [ 7] 7301 	ld	h, #0x00
      0023BC 19               [11] 7302 	add	hl, de
      0023BD 3Ar91r00         [13] 7303 	ld	a,(#_midPiece + 0)
      0023C0 77               [ 7] 7304 	ld	(hl), a
                                   7305 ;src\/GameLogic.h:247: playfield[col][line + 2] = bottomPiece;
      0023C1 ED 4Br01r00      [20] 7306 	ld	bc, (_col)
      0023C5 06 00            [ 7] 7307 	ld	b, #0x00
      0023C7 69               [ 4] 7308 	ld	l, c
      0023C8 60               [ 4] 7309 	ld	h, b
      0023C9 29               [11] 7310 	add	hl, hl
      0023CA 09               [11] 7311 	add	hl, bc
      0023CB 29               [11] 7312 	add	hl, hl
      0023CC 29               [11] 7313 	add	hl, hl
      0023CD EB               [ 4] 7314 	ex	de, hl
      0023CE 21r00r00         [10] 7315 	ld	hl, #_playfield
      0023D1 19               [11] 7316 	add	hl, de
      0023D2 EB               [ 4] 7317 	ex	de, hl
      0023D3 3Ar02r00         [13] 7318 	ld	a, (#_line + 0)
      0023D6 6F               [ 4] 7319 	ld	l, a
      0023D7 2C               [ 4] 7320 	inc	l
      0023D8 2C               [ 4] 7321 	inc	l
      0023D9 26 00            [ 7] 7322 	ld	h, #0x00
      0023DB 19               [11] 7323 	add	hl, de
      0023DC 3Ar92r00         [13] 7324 	ld	a,(#_bottomPiece + 0)
      0023DF 77               [ 7] 7325 	ld	(hl), a
                                   7326 ;src\/GameLogic.h:252: DrawPiece(line);
      0023E0 3Ar02r00         [13] 7327 	ld	a,(#_line + 0)
      0023E3 F5               [11] 7328 	push	af
      0023E4 33               [ 6] 7329 	inc	sp
      0023E5 CDr61r17         [17] 7330 	call	_DrawPiece
      0023E8 33               [ 6] 7331 	inc	sp
                                   7332 ;src\/GameLogic.h:126: playfield[col][line] = EMPTY;
      0023E9 ED 4Br01r00      [20] 7333 	ld	bc, (_col)
      0023ED 06 00            [ 7] 7334 	ld	b, #0x00
      0023EF 69               [ 4] 7335 	ld	l, c
      0023F0 60               [ 4] 7336 	ld	h, b
      0023F1 29               [11] 7337 	add	hl, hl
      0023F2 09               [11] 7338 	add	hl, bc
      0023F3 29               [11] 7339 	add	hl, hl
      0023F4 29               [11] 7340 	add	hl, hl
      0023F5 EB               [ 4] 7341 	ex	de, hl
                                   7342 ;src\/GameLogic.h:257: if(playfield[col][line + 3] != EMPTY) {
      0023F6 21r00r00         [10] 7343 	ld	hl, #_playfield
      0023F9 19               [11] 7344 	add	hl, de
      0023FA EB               [ 4] 7345 	ex	de, hl
      0023FB 3Ar02r00         [13] 7346 	ld	a,(#_line + 0)
      0023FE C6 03            [ 7] 7347 	add	a, #0x03
      002400 4F               [ 4] 7348 	ld	c, a
      002401 69               [ 4] 7349 	ld	l, c
      002402 26 00            [ 7] 7350 	ld	h, #0x00
      002404 19               [11] 7351 	add	hl, de
      002405 7E               [ 7] 7352 	ld	a, (hl)
      002406 B7               [ 4] 7353 	or	a, a
      002407 28 06            [12] 7354 	jr	Z, 00148$
                                   7355 ;src\/GameLogic.h:258: HideArrowSprite();
      002409 CDr48r0A         [17] 7356 	call	_HideArrowSprite
      00240C C3rC9r20         [10] 7357 	jp	00150$
      00240F                       7358 00148$:
                                   7359 ;src\/GameLogic.h:261: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      00240F 41               [ 4] 7360 	ld	b, c
      002410                       7361 00157$:
      002410 78               [ 4] 7362 	ld	a, b
      002411 D6 0C            [ 7] 7363 	sub	a, #0x0c
      002413 D2rC9r20         [10] 7364 	jp	NC, 00150$
                                   7365 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002416 3Ar01r00         [13] 7366 	ld	a,(#_col + 0)
      002419 87               [ 4] 7367 	add	a, a
      00241A 87               [ 4] 7368 	add	a, a
      00241B 87               [ 4] 7369 	add	a, a
      00241C 87               [ 4] 7370 	add	a, a
      00241D DD 77 FE         [19] 7371 	ld	-2 (ix), a
                                   7372 ;src\/GameLogic.h:262: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002420 68               [ 4] 7373 	ld	l, b
      002421 26 00            [ 7] 7374 	ld	h, #0x00
      002423 19               [11] 7375 	add	hl, de
                                   7376 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002424 DD 7E FE         [19] 7377 	ld	a, -2 (ix)
      002427 C6 50            [ 7] 7378 	add	a, #0x50
      002429 DD 77 FE         [19] 7379 	ld	-2 (ix), a
                                   7380 ;src\/GameLogic.h:262: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      00242C 6E               [ 7] 7381 	ld	l, (hl)
      00242D 78               [ 4] 7382 	ld	a, b
      00242E D6 0B            [ 7] 7383 	sub	a,#0x0b
      002430 20 16            [12] 7384 	jr	NZ, 00143$
      002432 B5               [ 4] 7385 	or	a,l
      002433 20 13            [12] 7386 	jr	NZ, 00143$
                                   7387 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002435 79               [ 4] 7388 	ld	a, c
      002436 87               [ 4] 7389 	add	a, a
      002437 87               [ 4] 7390 	add	a, a
      002438 87               [ 4] 7391 	add	a, a
      002439 87               [ 4] 7392 	add	a, a
      00243A F5               [11] 7393 	push	af
      00243B 33               [ 6] 7394 	inc	sp
      00243C DD 7E FE         [19] 7395 	ld	a, -2 (ix)
      00243F F5               [11] 7396 	push	af
      002440 33               [ 6] 7397 	inc	sp
      002441 CDrEDr00         [17] 7398 	call	_DrawArrowSprite
      002444 F1               [10] 7399 	pop	af
                                   7400 ;src\/GameLogic.h:264: break;
      002445 C3rC9r20         [10] 7401 	jp	00150$
      002448                       7402 00143$:
                                   7403 ;src\/GameLogic.h:266: else if(playfield[col][i] != EMPTY) {
      002448 7D               [ 4] 7404 	ld	a, l
      002449 B7               [ 4] 7405 	or	a, a
      00244A 28 14            [12] 7406 	jr	Z, 00158$
                                   7407 ;src\/GameLogic.h:267: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      00244C 79               [ 4] 7408 	ld	a, c
      00244D 3D               [ 4] 7409 	dec	a
      00244E 87               [ 4] 7410 	add	a, a
      00244F 87               [ 4] 7411 	add	a, a
      002450 87               [ 4] 7412 	add	a, a
      002451 87               [ 4] 7413 	add	a, a
      002452 F5               [11] 7414 	push	af
      002453 33               [ 6] 7415 	inc	sp
      002454 DD 7E FE         [19] 7416 	ld	a, -2 (ix)
      002457 F5               [11] 7417 	push	af
      002458 33               [ 6] 7418 	inc	sp
      002459 CDrEDr00         [17] 7419 	call	_DrawArrowSprite
      00245C F1               [10] 7420 	pop	af
                                   7421 ;src\/GameLogic.h:268: break;
      00245D C3rC9r20         [10] 7422 	jp	00150$
      002460                       7423 00158$:
                                   7424 ;src\/GameLogic.h:261: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002460 04               [ 4] 7425 	inc	b
      002461 48               [ 4] 7426 	ld	c, b
      002462 18 AC            [12] 7427 	jr	00157$
      002464                       7428 00152$:
                                   7429 ;src\/GameLogic.h:275: DrawString("GAME OVER", 12, 12);
      002464 11 0C 0C         [10] 7430 	ld	de, #0x0c0c
      002467 D5               [11] 7431 	push	de
      002468 21r7Cr24         [10] 7432 	ld	hl, #___str_7
      00246B E5               [11] 7433 	push	hl
      00246C CDrF1r0D         [17] 7434 	call	_DrawString
      00246F F1               [10] 7435 	pop	af
                                   7436 ;src\/GameLogic.h:280: Wait(60 * 5);
      002470 21 2C 01         [10] 7437 	ld	hl, #0x012c
      002473 E3               [19] 7438 	ex	(sp),hl
      002474 CDr00r00         [17] 7439 	call	_Wait
                                   7440 ;src\/GameLogic.h:282: }
      002477 DD F9            [10] 7441 	ld	sp,ix
      002479 DD E1            [14] 7442 	pop	ix
      00247B C9               [10] 7443 	ret
      00247C                       7444 ___str_7:
      00247C 47 41 4D 45 20 4F 56  7445 	.ascii "GAME OVER"
             45 52
      002485 00                    7446 	.db 0x00
                                   7447 ;src\/GameLogic.h:284: void TestCase() {
                                   7448 ;	---------------------------------
                                   7449 ; Function TestCase
                                   7450 ; ---------------------------------
      002486                       7451 _TestCase::
                                   7452 ;src\/GameLogic.h:305: playfield[2][ 8] = TILE_GREEN;
      002486 21r20r00         [10] 7453 	ld	hl, #(_playfield + 0x0020)
      002489 36 04            [10] 7454 	ld	(hl), #0x04
                                   7455 ;src\/GameLogic.h:306: playfield[2][ 9] = TILE_BLUE;
      00248B 21r21r00         [10] 7456 	ld	hl, #(_playfield + 0x0021)
      00248E 36 0C            [10] 7457 	ld	(hl), #0x0c
                                   7458 ;src\/GameLogic.h:308: playfield[0][10] = TILE_BLUE;
      002490 21r0Ar00         [10] 7459 	ld	hl, #(_playfield + 0x000a)
      002493 36 0C            [10] 7460 	ld	(hl), #0x0c
                                   7461 ;src\/GameLogic.h:309: playfield[1][10] = TILE_BLUE;
      002495 21r16r00         [10] 7462 	ld	hl, #(_playfield + 0x0016)
      002498 36 0C            [10] 7463 	ld	(hl), #0x0c
                                   7464 ;src\/GameLogic.h:310: playfield[2][10] = TILE_RED;
      00249A 21r22r00         [10] 7465 	ld	hl, #(_playfield + 0x0022)
      00249D 36 08            [10] 7466 	ld	(hl), #0x08
                                   7467 ;src\/GameLogic.h:311: playfield[4][10] = TILE_RED;
      00249F 21r3Ar00         [10] 7468 	ld	hl, #(_playfield + 0x003a)
      0024A2 36 08            [10] 7469 	ld	(hl), #0x08
                                   7470 ;src\/GameLogic.h:312: playfield[5][10] = TILE_BLUE;
      0024A4 21r46r00         [10] 7471 	ld	hl, #(_playfield + 0x0046)
      0024A7 36 0C            [10] 7472 	ld	(hl), #0x0c
                                   7473 ;src\/GameLogic.h:314: playfield[0][11] = TILE_GREEN;
      0024A9 21r0Br00         [10] 7474 	ld	hl, #(_playfield + 0x000b)
      0024AC 36 04            [10] 7475 	ld	(hl), #0x04
                                   7476 ;src\/GameLogic.h:315: playfield[1][11] = TILE_GREEN;
      0024AE 21r17r00         [10] 7477 	ld	hl, #(_playfield + 0x0017)
      0024B1 36 04            [10] 7478 	ld	(hl), #0x04
                                   7479 ;src\/GameLogic.h:316: playfield[2][11] = TILE_RED;
      0024B3 21r23r00         [10] 7480 	ld	hl, #(_playfield + 0x0023)
      0024B6 36 08            [10] 7481 	ld	(hl), #0x08
                                   7482 ;src\/GameLogic.h:317: playfield[3][11] = EMPTY;
      0024B8 21r2Fr00         [10] 7483 	ld	hl, #(_playfield + 0x002f)
      0024BB 36 00            [10] 7484 	ld	(hl), #0x00
                                   7485 ;src\/GameLogic.h:318: playfield[4][11] = TILE_RED;
      0024BD 21r3Br00         [10] 7486 	ld	hl, #(_playfield + 0x003b)
      0024C0 36 08            [10] 7487 	ld	(hl), #0x08
                                   7488 ;src\/GameLogic.h:319: playfield[5][11] = TILE_RED;
      0024C2 21r47r00         [10] 7489 	ld	hl, #(_playfield + 0x0047)
      0024C5 36 08            [10] 7490 	ld	(hl), #0x08
                                   7491 ;src\/GameLogic.h:321: topPiece = TILE_BLUE;
      0024C7 3E 0C            [ 7] 7492 	ld	a, #0x0c
      0024C9 32r90r00         [13] 7493 	ld	(#_topPiece), a
                                   7494 ;src\/GameLogic.h:322: midPiece = TILE_RED;
                                   7495 ;src\/GameLogic.h:323: bottomPiece = TILE_RED;
      0024CC 3E 08            [ 7] 7496 	ld	a,#0x08
      0024CE 32r91r00         [13] 7497 	ld	(#_midPiece),a
      0024D1 32r92r00         [13] 7498 	ld	(#_bottomPiece), a
                                   7499 ;src\/GameLogic.h:324: }
      0024D4 C9               [10] 7500 	ret
                                   7501 ;src\/GameLogic.h:326: void InitGame() {
                                   7502 ;	---------------------------------
                                   7503 ; Function InitGame
                                   7504 ; ---------------------------------
      0024D5                       7505 _InitGame::
                                   7506 ;src\/GameLogic.h:328: gameOver = FALSE;
      0024D5 21r00r00         [10] 7507 	ld	hl, #_gameOver
      0024D8 36 00            [10] 7508 	ld	(hl), #0x00
                                   7509 ;src\/GameLogic.h:329: line = INITIAL_LINE;
      0024DA 21r02r00         [10] 7510 	ld	hl, #_line
      0024DD 36 00            [10] 7511 	ld	(hl), #0x00
                                   7512 ;src\/GameLogic.h:330: col = INITIAL_COL;
      0024DF 21r01r00         [10] 7513 	ld	hl, #_col
      0024E2 36 02            [10] 7514 	ld	(hl), #0x02
                                   7515 ;src\/GameLogic.h:332: blocksRemoved = 0;
      0024E4 21 00 00         [10] 7516 	ld	hl, #0x0000
      0024E7 22r04r00         [16] 7517 	ld	(_blocksRemoved), hl
                                   7518 ;src\/GameLogic.h:333: level = 1;
      0024EA 21r06r00         [10] 7519 	ld	hl, #_level
      0024ED 36 01            [10] 7520 	ld	(hl), #0x01
                                   7521 ;src\/GameLogic.h:334: newLevel = FALSE;
      0024EF 21r07r00         [10] 7522 	ld	hl, #_newLevel
      0024F2 36 00            [10] 7523 	ld	(hl), #0x00
                                   7524 ;src\/GameLogic.h:335: speed = 60;
      0024F4 21r96r00         [10] 7525 	ld	hl, #_speed
      0024F7 36 3C            [10] 7526 	ld	(hl), #0x3c
                                   7527 ;src\/GameLogic.h:337: InitVRAM();
      0024F9 CDr0Ar14         [17] 7528 	call	_InitVRAM
                                   7529 ;src\/GameLogic.h:340: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      0024FC 3Ar08r00         [13] 7530 	ld	a, (#_rndSeed + 0)
      0024FF 5F               [ 4] 7531 	ld	e, a
      002500 3A 9E FC         [13] 7532 	ld	a, (#_JIFFY + 0)
      002503 67               [ 4] 7533 	ld	h, a
      002504 2E 00            [ 7] 7534 	ld	l, #0x00
      002506 55               [ 4] 7535 	ld	d, l
      002507 06 08            [ 7] 7536 	ld	b, #0x08
      002509                       7537 00133$:
      002509 29               [11] 7538 	add	hl, hl
      00250A 30 01            [12] 7539 	jr	NC, 00134$
      00250C 19               [11] 7540 	add	hl, de
      00250D                       7541 00134$:
      00250D 10 FA            [13] 7542 	djnz	00133$
      00250F 7D               [ 4] 7543 	ld	a, l
      002510 C6 63            [ 7] 7544 	add	a, #0x63
      002512 4F               [ 4] 7545 	ld	c, a
      002513 3Ar08r00         [13] 7546 	ld	a, (#_rndSeed + 0)
      002516 5F               [ 4] 7547 	ld	e, a
      002517 3A 9E FC         [13] 7548 	ld	a, (#_JIFFY + 0)
      00251A 67               [ 4] 7549 	ld	h, a
      00251B 2E 00            [ 7] 7550 	ld	l, #0x00
      00251D 55               [ 4] 7551 	ld	d, l
      00251E 06 08            [ 7] 7552 	ld	b, #0x08
      002520                       7553 00135$:
      002520 29               [11] 7554 	add	hl, hl
      002521 30 01            [12] 7555 	jr	NC, 00136$
      002523 19               [11] 7556 	add	hl, de
      002524                       7557 00136$:
      002524 10 FA            [13] 7558 	djnz	00135$
      002526 79               [ 4] 7559 	ld	a, c
      002527 F5               [11] 7560 	push	af
      002528 7D               [ 4] 7561 	ld	a, l
      002529 33               [ 6] 7562 	inc	sp
      00252A F5               [11] 7563 	push	af
      00252B 33               [ 6] 7564 	inc	sp
      00252C 3Ar08r00         [13] 7565 	ld	a,(#_rndSeed + 0)
      00252F F5               [11] 7566 	push	af
      002530 33               [ 6] 7567 	inc	sp
      002531 CDr50r00         [17] 7568 	call	_InitRnd
      002534 F1               [10] 7569 	pop	af
      002535 33               [ 6] 7570 	inc	sp
                                   7571 ;src\/GameLogic.h:343: RandomPiece();
      002536 CDr7Ar1F         [17] 7572 	call	_RandomPiece
                                   7573 ;src\/GameLogic.h:344: RandomPiece();
      002539 CDr7Ar1F         [17] 7574 	call	_RandomPiece
                                   7575 ;src\/GameLogic.h:347: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00253C 0E 00            [ 7] 7576 	ld	c, #0x00
      00253E                       7577 00107$:
      00253E 79               [ 4] 7578 	ld	a, c
      00253F D6 0C            [ 7] 7579 	sub	a, #0x0c
      002541 30 20            [12] 7580 	jr	NC, 00102$
                                   7581 ;src\/GameLogic.h:348: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002543 06 00            [ 7] 7582 	ld	b, #0x00
      002545                       7583 00104$:
      002545 78               [ 4] 7584 	ld	a, b
      002546 D6 06            [ 7] 7585 	sub	a, #0x06
      002548 30 16            [12] 7586 	jr	NC, 00108$
                                   7587 ;src\/GameLogic.h:349: playfield[col][line] = EMPTY;
      00254A 58               [ 4] 7588 	ld	e, b
      00254B 16 00            [ 7] 7589 	ld	d, #0x00
      00254D 6B               [ 4] 7590 	ld	l, e
      00254E 62               [ 4] 7591 	ld	h, d
      00254F 29               [11] 7592 	add	hl, hl
      002550 19               [11] 7593 	add	hl, de
      002551 29               [11] 7594 	add	hl, hl
      002552 29               [11] 7595 	add	hl, hl
      002553 11r00r00         [10] 7596 	ld	de, #_playfield
      002556 19               [11] 7597 	add	hl, de
      002557 59               [ 4] 7598 	ld	e, c
      002558 16 00            [ 7] 7599 	ld	d, #0x00
      00255A 19               [11] 7600 	add	hl, de
      00255B 36 00            [10] 7601 	ld	(hl), #0x00
                                   7602 ;src\/GameLogic.h:348: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00255D 04               [ 4] 7603 	inc	b
      00255E 18 E5            [12] 7604 	jr	00104$
      002560                       7605 00108$:
                                   7606 ;src\/GameLogic.h:347: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002560 0C               [ 4] 7607 	inc	c
      002561 18 DB            [12] 7608 	jr	00107$
      002563                       7609 00102$:
                                   7610 ;src\/GameLogic.h:354: TestCase();
      002563 CDr86r24         [17] 7611 	call	_TestCase
                                   7612 ;src\/GameLogic.h:358: DrawBackground();
      002566 CDrDBr13         [17] 7613 	call	_DrawBackground
                                   7614 ;src\/GameLogic.h:360: DrawPlayfield();
      002569 CDr84r17         [17] 7615 	call	_DrawPlayfield
                                   7616 ;src\/GameLogic.h:362: DrawScore();
      00256C CDrDAr10         [17] 7617 	call	_DrawScore
                                   7618 ;src\/GameLogic.h:364: GameLoop();
                                   7619 ;src\/GameLogic.h:365: }
      00256F C3rACr20         [10] 7620 	jp	_GameLoop
                                   7621 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7622 ;	---------------------------------
                                   7623 ; Function ChangeFontColor
                                   7624 ; ---------------------------------
      002572                       7625 _ChangeFontColor::
                                   7626 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002572 21 02 00         [10] 7627 	ld	hl, #2
      002575 39               [11] 7628 	add	hl, sp
      002576 7E               [ 7] 7629 	ld	a, (hl)
      002577 F5               [11] 7630 	push	af
      002578 33               [ 6] 7631 	inc	sp
      002579 21 00 03         [10] 7632 	ld	hl, #0x0300
      00257C E5               [11] 7633 	push	hl
      00257D 21 78 21         [10] 7634 	ld	hl, #0x2178
      002580 E5               [11] 7635 	push	hl
      002581 CDr00r00         [17] 7636 	call	_FILVRM
      002584 F1               [10] 7637 	pop	af
      002585 F1               [10] 7638 	pop	af
      002586 33               [ 6] 7639 	inc	sp
                                   7640 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002587 21 02 00         [10] 7641 	ld	hl, #2
      00258A 39               [11] 7642 	add	hl, sp
      00258B 7E               [ 7] 7643 	ld	a, (hl)
      00258C F5               [11] 7644 	push	af
      00258D 33               [ 6] 7645 	inc	sp
      00258E 21 00 03         [10] 7646 	ld	hl, #0x0300
      002591 E5               [11] 7647 	push	hl
      002592 21 78 29         [10] 7648 	ld	hl, #0x2978
      002595 E5               [11] 7649 	push	hl
      002596 CDr00r00         [17] 7650 	call	_FILVRM
      002599 F1               [10] 7651 	pop	af
      00259A F1               [10] 7652 	pop	af
      00259B 33               [ 6] 7653 	inc	sp
                                   7654 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00259C 21 02 00         [10] 7655 	ld	hl, #2
      00259F 39               [11] 7656 	add	hl, sp
      0025A0 7E               [ 7] 7657 	ld	a, (hl)
      0025A1 F5               [11] 7658 	push	af
      0025A2 33               [ 6] 7659 	inc	sp
      0025A3 21 00 03         [10] 7660 	ld	hl, #0x0300
      0025A6 E5               [11] 7661 	push	hl
      0025A7 21 78 31         [10] 7662 	ld	hl, #0x3178
      0025AA E5               [11] 7663 	push	hl
      0025AB CDr00r00         [17] 7664 	call	_FILVRM
      0025AE F1               [10] 7665 	pop	af
      0025AF F1               [10] 7666 	pop	af
      0025B0 33               [ 6] 7667 	inc	sp
                                   7668 ;src\/Intro.h:7: }
      0025B1 C9               [10] 7669 	ret
                                   7670 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7671 ;	---------------------------------
                                   7672 ; Function ScrollDownFont
                                   7673 ; ---------------------------------
      0025B2                       7674 _ScrollDownFont::
      0025B2 DD E5            [15] 7675 	push	ix
      0025B4 DD 21 00 00      [14] 7676 	ld	ix,#0
      0025B8 DD 39            [15] 7677 	add	ix,sp
      0025BA F5               [11] 7678 	push	af
                                   7679 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0025BB 11 78 09         [10] 7680 	ld	de, #0x0978
      0025BE                       7681 00107$:
      0025BE 7B               [ 4] 7682 	ld	a, e
      0025BF D6 78            [ 7] 7683 	sub	a, #0x78
      0025C1 7A               [ 4] 7684 	ld	a, d
      0025C2 DE 0C            [ 7] 7685 	sbc	a, #0x0c
      0025C4 30 44            [12] 7686 	jr	NC, 00109$
                                   7687 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0025C6 33               [ 6] 7688 	inc	sp
      0025C7 33               [ 6] 7689 	inc	sp
      0025C8 D5               [11] 7690 	push	de
      0025C9 DD 7E FE         [19] 7691 	ld	a, -2 (ix)
      0025CC C6 07            [ 7] 7692 	add	a, #0x07
      0025CE 4F               [ 4] 7693 	ld	c, a
      0025CF DD 7E FF         [19] 7694 	ld	a, -1 (ix)
      0025D2 CE 00            [ 7] 7695 	adc	a, #0x00
      0025D4 47               [ 4] 7696 	ld	b, a
      0025D5                       7697 00104$:
      0025D5 78               [ 4] 7698 	ld	a, b
      0025D6 B1               [ 4] 7699 	or	a, c
      0025D7 28 1A            [12] 7700 	jr	Z, 00101$
                                   7701 ;src\/Intro.h:27: value = RDVRM(j-1);
      0025D9 69               [ 4] 7702 	ld	l, c
      0025DA 60               [ 4] 7703 	ld	h, b
      0025DB 2B               [ 6] 7704 	dec	hl
      0025DC C5               [11] 7705 	push	bc
      0025DD D5               [11] 7706 	push	de
      0025DE CDr00r00         [17] 7707 	call	_RDVRM
      0025E1 D1               [10] 7708 	pop	de
      0025E2 C1               [10] 7709 	pop	bc
                                   7710 ;src\/Intro.h:29: WRTVRM(j, 0);
      0025E3 C5               [11] 7711 	push	bc
      0025E4 D5               [11] 7712 	push	de
      0025E5 AF               [ 4] 7713 	xor	a, a
      0025E6 F5               [11] 7714 	push	af
      0025E7 33               [ 6] 7715 	inc	sp
      0025E8 C5               [11] 7716 	push	bc
      0025E9 CDr00r00         [17] 7717 	call	_WRTVRM
      0025EC F1               [10] 7718 	pop	af
      0025ED 33               [ 6] 7719 	inc	sp
      0025EE D1               [10] 7720 	pop	de
      0025EF C1               [10] 7721 	pop	bc
                                   7722 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0025F0 0B               [ 6] 7723 	dec	bc
      0025F1 18 E2            [12] 7724 	jr	00104$
      0025F3                       7725 00101$:
                                   7726 ;src\/Intro.h:31: WRTVRM(i, 0);
      0025F3 AF               [ 4] 7727 	xor	a, a
      0025F4 F5               [11] 7728 	push	af
      0025F5 33               [ 6] 7729 	inc	sp
      0025F6 D5               [11] 7730 	push	de
      0025F7 CDr00r00         [17] 7731 	call	_WRTVRM
      0025FA F1               [10] 7732 	pop	af
      0025FB 33               [ 6] 7733 	inc	sp
                                   7734 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0025FC DD 7E FE         [19] 7735 	ld	a, -2 (ix)
      0025FF C6 08            [ 7] 7736 	add	a, #0x08
      002601 5F               [ 4] 7737 	ld	e, a
      002602 DD 7E FF         [19] 7738 	ld	a, -1 (ix)
      002605 CE 00            [ 7] 7739 	adc	a, #0x00
      002607 57               [ 4] 7740 	ld	d, a
      002608 18 B4            [12] 7741 	jr	00107$
      00260A                       7742 00109$:
                                   7743 ;src\/Intro.h:35: }
      00260A DD F9            [10] 7744 	ld	sp, ix
      00260C DD E1            [14] 7745 	pop	ix
      00260E C9               [10] 7746 	ret
                                   7747 ;src\/Intro.h:37: void Intro() {
                                   7748 ;	---------------------------------
                                   7749 ; Function Intro
                                   7750 ; ---------------------------------
      00260F                       7751 _Intro::
                                   7752 ;src\/Intro.h:41: InitVRAM();
      00260F CDr0Ar14         [17] 7753 	call	_InitVRAM
                                   7754 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002612 11 0B 0B         [10] 7755 	ld	de, #0x0b0b
      002615 D5               [11] 7756 	push	de
      002616 21r84r26         [10] 7757 	ld	hl, #___str_8
      002619 E5               [11] 7758 	push	hl
      00261A CDrF1r0D         [17] 7759 	call	_DrawString
      00261D F1               [10] 7760 	pop	af
      00261E F1               [10] 7761 	pop	af
                                   7762 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      00261F 11 09 0D         [10] 7763 	ld	de, #0x0d09
      002622 D5               [11] 7764 	push	de
      002623 21r8Er26         [10] 7765 	ld	hl, #___str_9
      002626 E5               [11] 7766 	push	hl
      002627 CDrF1r0D         [17] 7767 	call	_DrawString
      00262A F1               [10] 7768 	pop	af
                                   7769 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00262B 26 F0            [ 7] 7770 	ld	h,#0xf0
      00262D E3               [19] 7771 	ex	(sp),hl
      00262E 33               [ 6] 7772 	inc	sp
      00262F CDr72r25         [17] 7773 	call	_ChangeFontColor
      002632 33               [ 6] 7774 	inc	sp
                                   7775 ;src\/Intro.h:56: Wait(2 * 60);
      002633 21 78 00         [10] 7776 	ld	hl, #0x0078
      002636 E5               [11] 7777 	push	hl
      002637 CDr00r00         [17] 7778 	call	_Wait
      00263A F1               [10] 7779 	pop	af
                                   7780 ;src\/Intro.h:58: while(counter++ < 20) {
      00263B 0E 00            [ 7] 7781 	ld	c, #0x00
      00263D                       7782 00112$:
      00263D 79               [ 4] 7783 	ld	a, c
      00263E D6 14            [ 7] 7784 	sub	a, #0x14
      002640 D0               [11] 7785 	ret	NC
      002641 0C               [ 4] 7786 	inc	c
                                   7787 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002642 21 9E FC         [10] 7788 	ld	hl, #_JIFFY
      002645 46               [ 7] 7789 	ld	b, (hl)
                                   7790 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002646                       7791 00101$:
      002646 58               [ 4] 7792 	ld	e, b
      002647 16 00            [ 7] 7793 	ld	d, #0x00
      002649 2A 9E FC         [16] 7794 	ld	hl, (_JIFFY)
      00264C BF               [ 4] 7795 	cp	a, a
      00264D ED 52            [15] 7796 	sbc	hl, de
      00264F 28 F5            [12] 7797 	jr	Z, 00101$
                                   7798 ;src\/Intro.h:63: if(counter == 15) {
      002651 79               [ 4] 7799 	ld	a, c
      002652 D6 0F            [ 7] 7800 	sub	a, #0x0f
      002654 20 0C            [12] 7801 	jr	NZ, 00110$
                                   7802 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002656 C5               [11] 7803 	push	bc
      002657 3E 40            [ 7] 7804 	ld	a, #0x40
      002659 F5               [11] 7805 	push	af
      00265A 33               [ 6] 7806 	inc	sp
      00265B CDr72r25         [17] 7807 	call	_ChangeFontColor
      00265E 33               [ 6] 7808 	inc	sp
      00265F C1               [10] 7809 	pop	bc
      002660 18 DB            [12] 7810 	jr	00112$
      002662                       7811 00110$:
                                   7812 ;src\/Intro.h:66: else if(counter == 10) {
      002662 79               [ 4] 7813 	ld	a, c
      002663 D6 0A            [ 7] 7814 	sub	a, #0x0a
      002665 20 0C            [12] 7815 	jr	NZ, 00107$
                                   7816 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002667 C5               [11] 7817 	push	bc
      002668 3E 50            [ 7] 7818 	ld	a, #0x50
      00266A F5               [11] 7819 	push	af
      00266B 33               [ 6] 7820 	inc	sp
      00266C CDr72r25         [17] 7821 	call	_ChangeFontColor
      00266F 33               [ 6] 7822 	inc	sp
      002670 C1               [10] 7823 	pop	bc
      002671 18 CA            [12] 7824 	jr	00112$
      002673                       7825 00107$:
                                   7826 ;src\/Intro.h:69: else if(counter == 5) {
      002673 79               [ 4] 7827 	ld	a, c
      002674 D6 05            [ 7] 7828 	sub	a, #0x05
      002676 20 C5            [12] 7829 	jr	NZ, 00112$
                                   7830 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002678 C5               [11] 7831 	push	bc
      002679 3E E0            [ 7] 7832 	ld	a, #0xe0
      00267B F5               [11] 7833 	push	af
      00267C 33               [ 6] 7834 	inc	sp
      00267D CDr72r25         [17] 7835 	call	_ChangeFontColor
      002680 33               [ 6] 7836 	inc	sp
      002681 C1               [10] 7837 	pop	bc
                                   7838 ;src\/Intro.h:140: }
      002682 18 B9            [12] 7839 	jr	00112$
      002684                       7840 ___str_8:
      002684 41 20 47 41 4D 45 20  7841 	.ascii "A GAME BY"
             42 59
      00268D 00                    7842 	.db 0x00
      00268E                       7843 ___str_9:
      00268E 41 4E 44 52 45 20 42  7844 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      00269C 00                    7845 	.db 0x00
                                   7846 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7847 ;	---------------------------------
                                   7848 ; Function SetBlock
                                   7849 ; ---------------------------------
      00269D                       7850 _SetBlock::
      00269D DD E5            [15] 7851 	push	ix
      00269F DD 21 00 00      [14] 7852 	ld	ix,#0
      0026A3 DD 39            [15] 7853 	add	ix,sp
                                   7854 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0026A5 DD 7E 04         [19] 7855 	ld	a, 4 (ix)
      0026A8 06 00            [ 7] 7856 	ld	b, #0x00
      0026AA 4F               [ 4] 7857 	ld	c, a
      0026AB 78               [ 4] 7858 	ld	a, b
      0026AC C6 18            [ 7] 7859 	add	a, #0x18
      0026AE 47               [ 4] 7860 	ld	b, a
      0026AF DD 6E 05         [19] 7861 	ld	l, 5 (ix)
      0026B2 26 00            [ 7] 7862 	ld	h, #0x00
      0026B4 29               [11] 7863 	add	hl, hl
      0026B5 29               [11] 7864 	add	hl, hl
      0026B6 29               [11] 7865 	add	hl, hl
      0026B7 29               [11] 7866 	add	hl, hl
      0026B8 29               [11] 7867 	add	hl, hl
      0026B9 09               [11] 7868 	add	hl, bc
      0026BA DD 7E 06         [19] 7869 	ld	a, 6 (ix)
      0026BD F5               [11] 7870 	push	af
      0026BE 33               [ 6] 7871 	inc	sp
      0026BF E5               [11] 7872 	push	hl
      0026C0 CDr00r00         [17] 7873 	call	_WRTVRM
      0026C3 F1               [10] 7874 	pop	af
      0026C4 33               [ 6] 7875 	inc	sp
                                   7876 ;src\/Title.h:16: }
      0026C5 DD E1            [14] 7877 	pop	ix
      0026C7 C9               [10] 7878 	ret
                                   7879 ;src\/Title.h:18: void TitleScreen() {
                                   7880 ;	---------------------------------
                                   7881 ; Function TitleScreen
                                   7882 ; ---------------------------------
      0026C8                       7883 _TitleScreen::
      0026C8 DD E5            [15] 7884 	push	ix
      0026CA DD 21 00 00      [14] 7885 	ld	ix,#0
      0026CE DD 39            [15] 7886 	add	ix,sp
      0026D0 21 EB FF         [10] 7887 	ld	hl, #-21
      0026D3 39               [11] 7888 	add	hl, sp
      0026D4 F9               [ 6] 7889 	ld	sp, hl
                                   7890 ;src\/Title.h:19: byte colorIndex = 0;
      0026D5 0E 00            [ 7] 7891 	ld	c, #0x00
                                   7892 ;src\/Title.h:52: const char blocks[] = {
      0026D7 21 00 00         [10] 7893 	ld	hl, #0
      0026DA 39               [11] 7894 	add	hl, sp
      0026DB EB               [ 4] 7895 	ex	de, hl
      0026DC 3E 8E            [ 7] 7896 	ld	a, #0x8e
      0026DE 12               [ 7] 7897 	ld	(de), a
      0026DF 6B               [ 4] 7898 	ld	l, e
      0026E0 62               [ 4] 7899 	ld	h, d
      0026E1 23               [ 6] 7900 	inc	hl
      0026E2 36 8F            [10] 7901 	ld	(hl), #0x8f
      0026E4 6B               [ 4] 7902 	ld	l, e
      0026E5 62               [ 4] 7903 	ld	h, d
      0026E6 23               [ 6] 7904 	inc	hl
      0026E7 23               [ 6] 7905 	inc	hl
      0026E8 36 90            [10] 7906 	ld	(hl), #0x90
      0026EA 6B               [ 4] 7907 	ld	l, e
      0026EB 62               [ 4] 7908 	ld	h, d
      0026EC 23               [ 6] 7909 	inc	hl
      0026ED 23               [ 6] 7910 	inc	hl
      0026EE 23               [ 6] 7911 	inc	hl
      0026EF 36 91            [10] 7912 	ld	(hl), #0x91
      0026F1 21 04 00         [10] 7913 	ld	hl, #0x0004
      0026F4 19               [11] 7914 	add	hl, de
      0026F5 36 92            [10] 7915 	ld	(hl), #0x92
      0026F7 21 05 00         [10] 7916 	ld	hl, #0x0005
      0026FA 19               [11] 7917 	add	hl, de
      0026FB 36 93            [10] 7918 	ld	(hl), #0x93
      0026FD 21 06 00         [10] 7919 	ld	hl, #0x0006
      002700 19               [11] 7920 	add	hl, de
      002701 36 94            [10] 7921 	ld	(hl), #0x94
                                   7922 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002703 21 07 00         [10] 7923 	ld	hl, #7
      002706 39               [11] 7924 	add	hl, sp
      002707 DD 75 F6         [19] 7925 	ld	-10 (ix), l
      00270A DD 74 F7         [19] 7926 	ld	-9 (ix), h
      00270D 36 8E            [10] 7927 	ld	(hl), #0x8e
      00270F DD 6E F6         [19] 7928 	ld	l, -10 (ix)
      002712 DD 66 F7         [19] 7929 	ld	h, -9 (ix)
      002715 23               [ 6] 7930 	inc	hl
      002716 36 90            [10] 7931 	ld	(hl), #0x90
      002718 DD 6E F6         [19] 7932 	ld	l, -10 (ix)
      00271B DD 66 F7         [19] 7933 	ld	h, -9 (ix)
      00271E 23               [ 6] 7934 	inc	hl
      00271F 23               [ 6] 7935 	inc	hl
      002720 36 92            [10] 7936 	ld	(hl), #0x92
      002722 DD 6E F6         [19] 7937 	ld	l, -10 (ix)
      002725 DD 66 F7         [19] 7938 	ld	h, -9 (ix)
      002728 23               [ 6] 7939 	inc	hl
      002729 23               [ 6] 7940 	inc	hl
      00272A 23               [ 6] 7941 	inc	hl
      00272B 36 94            [10] 7942 	ld	(hl), #0x94
                                   7943 ;src\/Title.h:65: InitVRAM();
      00272D C5               [11] 7944 	push	bc
      00272E D5               [11] 7945 	push	de
      00272F CDr0Ar14         [17] 7946 	call	_InitVRAM
      002732 21 00 01         [10] 7947 	ld	hl, #0x0100
      002735 E5               [11] 7948 	push	hl
      002736 21rAFr28         [10] 7949 	ld	hl, #_TitleScreen_title_65536_279
      002739 E5               [11] 7950 	push	hl
      00273A 21 00 18         [10] 7951 	ld	hl, #0x1800
      00273D E5               [11] 7952 	push	hl
      00273E CDr00r00         [17] 7953 	call	_LDIRVM
      002741 21 06 00         [10] 7954 	ld	hl, #6
      002744 39               [11] 7955 	add	hl, sp
      002745 F9               [ 6] 7956 	ld	sp, hl
      002746 11 05 0D         [10] 7957 	ld	de, #0x0d05
      002749 D5               [11] 7958 	push	de
      00274A 21rAFr29         [10] 7959 	ld	hl, #___str_10
      00274D E5               [11] 7960 	push	hl
      00274E CDrF1r0D         [17] 7961 	call	_DrawString
      002751 F1               [10] 7962 	pop	af
      002752 26 17            [ 7] 7963 	ld	h,#0x17
      002754 E3               [19] 7964 	ex	(sp),hl
      002755 33               [ 6] 7965 	inc	sp
      002756 AF               [ 4] 7966 	xor	a, a
      002757 F5               [11] 7967 	push	af
      002758 33               [ 6] 7968 	inc	sp
      002759 21rC6r29         [10] 7969 	ld	hl, #___str_11
      00275C E5               [11] 7970 	push	hl
      00275D CDrF1r0D         [17] 7971 	call	_DrawString
      002760 F1               [10] 7972 	pop	af
      002761 F1               [10] 7973 	pop	af
      002762 11 19 17         [10] 7974 	ld	de, #0x1719
      002765 D5               [11] 7975 	push	de
      002766 21rDBr29         [10] 7976 	ld	hl, #___str_12
      002769 E5               [11] 7977 	push	hl
      00276A CDrF1r0D         [17] 7978 	call	_DrawString
      00276D F1               [10] 7979 	pop	af
      00276E F1               [10] 7980 	pop	af
      00276F D1               [10] 7981 	pop	de
      002770 C1               [10] 7982 	pop	bc
                                   7983 ;src\/Title.h:73: while(TRUE) {
      002771                       7984 00120$:
                                   7985 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002771 DD 36 FD 00      [19] 7986 	ld	-3 (ix), #0
                                   7987 ;src\/Title.h:78: word counter = 0;
      002775 AF               [ 4] 7988 	xor	a, a
      002776 DD 77 FE         [19] 7989 	ld	-2 (ix), a
      002779 DD 77 FF         [19] 7990 	ld	-1 (ix), a
                                   7991 ;src\/Title.h:88: do {
      00277C                       7992 00106$:
                                   7993 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      00277C C5               [11] 7994 	push	bc
      00277D D5               [11] 7995 	push	de
      00277E 11 1F 1F         [10] 7996 	ld	de, #0x1f1f
      002781 D5               [11] 7997 	push	de
      002782 CDrD9r00         [17] 7998 	call	_GetRandomInInterval
      002785 F1               [10] 7999 	pop	af
                                   8000 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002786 DD 75 F8         [19] 8001 	ld	-8 (ix), l
      002789 11 07 07         [10] 8002 	ld	de, #0x0707
      00278C D5               [11] 8003 	push	de
      00278D CDrD9r00         [17] 8004 	call	_GetRandomInInterval
      002790 F1               [10] 8005 	pop	af
      002791 D1               [10] 8006 	pop	de
      002792 C1               [10] 8007 	pop	bc
      002793 DD 75 F9         [19] 8008 	ld	-7 (ix), l
                                   8009 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002796 DD 6E F8         [19] 8010 	ld	l, -8 (ix)
      002799 3E 00            [ 7] 8011 	ld	a, #0x00
      00279B C6 18            [ 7] 8012 	add	a, #0x18
      00279D 67               [ 4] 8013 	ld	h, a
      00279E DD 7E F9         [19] 8014 	ld	a, -7 (ix)
      0027A1 06 00            [ 7] 8015 	ld	b, #0x00
      0027A3 87               [ 4] 8016 	add	a, a
      0027A4 CB 10            [ 8] 8017 	rl	b
      0027A6 87               [ 4] 8018 	add	a, a
      0027A7 CB 10            [ 8] 8019 	rl	b
      0027A9 87               [ 4] 8020 	add	a, a
      0027AA CB 10            [ 8] 8021 	rl	b
      0027AC 87               [ 4] 8022 	add	a, a
      0027AD CB 10            [ 8] 8023 	rl	b
      0027AF 87               [ 4] 8024 	add	a, a
      0027B0 CB 10            [ 8] 8025 	rl	b
      0027B2 85               [ 4] 8026 	add	a, l
      0027B3 6F               [ 4] 8027 	ld	l, a
      0027B4 78               [ 4] 8028 	ld	a, b
      0027B5 8C               [ 4] 8029 	adc	a, h
      0027B6 67               [ 4] 8030 	ld	h, a
      0027B7 C5               [11] 8031 	push	bc
      0027B8 D5               [11] 8032 	push	de
      0027B9 CDr00r00         [17] 8033 	call	_RDVRM
      0027BC D1               [10] 8034 	pop	de
      0027BD C1               [10] 8035 	pop	bc
      0027BE DD 75 FA         [19] 8036 	ld	-6 (ix), l
                                   8037 ;src\/Title.h:102: if(counter++ > 1000) {
      0027C1 DD 46 FE         [19] 8038 	ld	b, -2 (ix)
      0027C4 DD 6E FF         [19] 8039 	ld	l, -1 (ix)
      0027C7 DD 34 FE         [23] 8040 	inc	-2 (ix)
      0027CA 20 03            [12] 8041 	jr	NZ, 00193$
      0027CC DD 34 FF         [23] 8042 	inc	-1 (ix)
      0027CF                       8043 00193$:
      0027CF 3E E8            [ 7] 8044 	ld	a, #0xe8
      0027D1 B8               [ 4] 8045 	cp	a, b
      0027D2 3E 03            [ 7] 8046 	ld	a, #0x03
      0027D4 9D               [ 4] 8047 	sbc	a, l
      0027D5 30 0F            [12] 8048 	jr	NC, 00107$
                                   8049 ;src\/Title.h:103: colorIndex++;
      0027D7 0C               [ 4] 8050 	inc	c
                                   8051 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0027D8 79               [ 4] 8052 	ld	a, c
      0027D9 D6 03            [ 7] 8053 	sub	a, #0x03
      0027DB 38 02            [12] 8054 	jr	C, 00102$
      0027DD 0E 00            [ 7] 8055 	ld	c, #0x00
      0027DF                       8056 00102$:
                                   8057 ;src\/Title.h:119: counter = 0;
      0027DF AF               [ 4] 8058 	xor	a, a
      0027E0 DD 77 FE         [19] 8059 	ld	-2 (ix), a
      0027E3 DD 77 FF         [19] 8060 	ld	-1 (ix), a
      0027E6                       8061 00107$:
                                   8062 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0027E6 DD 7E FA         [19] 8063 	ld	a, -6 (ix)
      0027E9 B7               [ 4] 8064 	or	a, a
      0027EA 28 90            [12] 8065 	jr	Z, 00106$
      0027EC 79               [ 4] 8066 	ld	a, c
      0027ED 3C               [ 4] 8067 	inc	a
      0027EE F5               [11] 8068 	push	af
      0027EF 17               [ 4] 8069 	rla
      0027F0 9F               [ 4] 8070 	sbc	a, a
      0027F1 47               [ 4] 8071 	ld	b, a
      0027F2 F1               [10] 8072 	pop	af
      0027F3 DD 86 F6         [19] 8073 	add	a, -10 (ix)
      0027F6 DD 77 FB         [19] 8074 	ld	-5 (ix), a
      0027F9 78               [ 4] 8075 	ld	a, b
      0027FA DD 8E F7         [19] 8076 	adc	a, -9 (ix)
      0027FD DD 77 FC         [19] 8077 	ld	-4 (ix), a
      002800 DD 6E FB         [19] 8078 	ld	l, -5 (ix)
      002803 DD 66 FC         [19] 8079 	ld	h, -4 (ix)
      002806 46               [ 7] 8080 	ld	b, (hl)
      002807 DD 7E FA         [19] 8081 	ld	a, -6 (ix)
      00280A 90               [ 4] 8082 	sub	a, b
      00280B CAr7Cr27         [10] 8083 	jp	Z,00106$
                                   8084 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00280E 06 00            [ 7] 8085 	ld	b, #0x00
      002810                       8086 00123$:
      002810 78               [ 4] 8087 	ld	a, b
      002811 D6 0A            [ 7] 8088 	sub	a, #0x0a
      002813 30 79            [12] 8089 	jr	NC, 00118$
                                   8090 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002815 2A 9E FC         [16] 8091 	ld	hl, (_JIFFY)
      002818 DD 75 FE         [19] 8092 	ld	-2 (ix), l
      00281B DD 74 FF         [19] 8093 	ld	-1 (ix), h
                                   8094 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      00281E                       8095 00109$:
      00281E FD 21 9E FC      [14] 8096 	ld	iy, #_JIFFY
      002822 FD 7E 00         [19] 8097 	ld	a, 0 (iy)
      002825 DD 96 FE         [19] 8098 	sub	a, -2 (ix)
      002828 20 08            [12] 8099 	jr	NZ, 00195$
      00282A FD 7E 01         [19] 8100 	ld	a, 1 (iy)
      00282D DD 96 FF         [19] 8101 	sub	a, -1 (ix)
      002830 28 EC            [12] 8102 	jr	Z, 00109$
      002832                       8103 00195$:
                                   8104 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002832 DD 6E FD         [19] 8105 	ld	l, -3 (ix)
      002835 26 00            [ 7] 8106 	ld	h, #0x00
      002837 19               [11] 8107 	add	hl, de
      002838 7E               [ 7] 8108 	ld	a, (hl)
      002839 C5               [11] 8109 	push	bc
      00283A D5               [11] 8110 	push	de
      00283B F5               [11] 8111 	push	af
      00283C 33               [ 6] 8112 	inc	sp
      00283D DD 66 F9         [19] 8113 	ld	h, -7 (ix)
      002840 DD 6E F8         [19] 8114 	ld	l, -8 (ix)
      002843 E5               [11] 8115 	push	hl
      002844 CDr9Dr26         [17] 8116 	call	_SetBlock
      002847 F1               [10] 8117 	pop	af
      002848 33               [ 6] 8118 	inc	sp
      002849 D1               [10] 8119 	pop	de
      00284A C1               [10] 8120 	pop	bc
                                   8121 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00284B DD 7E FD         [19] 8122 	ld	a, -3 (ix)
      00284E DD 34 FD         [23] 8123 	inc	-3 (ix)
      002851 D6 07            [ 7] 8124 	sub	a, #0x07
      002853 38 04            [12] 8125 	jr	C, 00113$
      002855 DD 36 FD 00      [19] 8126 	ld	-3 (ix), #0
      002859                       8127 00113$:
                                   8128 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002859 C5               [11] 8129 	push	bc
      00285A D5               [11] 8130 	push	de
      00285B 2E 00            [ 7] 8131 	ld	l, #0x00
      00285D CDr00r00         [17] 8132 	call	_GTTRIG
                                   8133 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002860 DD 75 FF         [19] 8134 	ld	-1 (ix), l
      002863 2E 01            [ 7] 8135 	ld	l, #0x01
      002865 CDr00r00         [17] 8136 	call	_GTTRIG
      002868 D1               [10] 8137 	pop	de
      002869 C1               [10] 8138 	pop	bc
                                   8139 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      00286A E5               [11] 8140 	push	hl
      00286B C5               [11] 8141 	push	bc
      00286C D5               [11] 8142 	push	de
      00286D 2E 03            [ 7] 8143 	ld	l, #0x03
      00286F CDr00r00         [17] 8144 	call	_GTTRIG
      002872 7D               [ 4] 8145 	ld	a, l
      002873 D1               [10] 8146 	pop	de
      002874 C1               [10] 8147 	pop	bc
      002875 E1               [10] 8148 	pop	hl
      002876 67               [ 4] 8149 	ld	h, a
                                   8150 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002877 DD 7E FF         [19] 8151 	ld	a, -1 (ix)
      00287A 3C               [ 4] 8152 	inc	a
      00287B 28 06            [12] 8153 	jr	Z, 00114$
      00287D 2C               [ 4] 8154 	inc	l
      00287E 28 03            [12] 8155 	jr	Z, 00114$
      002880 24               [ 4] 8156 	inc	h
      002881 20 08            [12] 8157 	jr	NZ, 00124$
      002883                       8158 00114$:
                                   8159 ;src\/Title.h:168: rndSeed = JIFFY;
      002883 3A 9E FC         [13] 8160 	ld	a,(#_JIFFY + 0)
      002886 32r08r00         [13] 8161 	ld	(#_rndSeed), a
                                   8162 ;src\/Title.h:169: return;
      002889 18 1F            [12] 8163 	jr	00125$
      00288B                       8164 00124$:
                                   8165 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00288B 04               [ 4] 8166 	inc	b
      00288C 18 82            [12] 8167 	jr	00123$
      00288E                       8168 00118$:
                                   8169 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00288E DD 6E FB         [19] 8170 	ld	l, -5 (ix)
      002891 DD 66 FC         [19] 8171 	ld	h, -4 (ix)
      002894 7E               [ 7] 8172 	ld	a, (hl)
      002895 C5               [11] 8173 	push	bc
      002896 D5               [11] 8174 	push	de
      002897 F5               [11] 8175 	push	af
      002898 33               [ 6] 8176 	inc	sp
      002899 DD 66 F9         [19] 8177 	ld	h, -7 (ix)
      00289C DD 6E F8         [19] 8178 	ld	l, -8 (ix)
      00289F E5               [11] 8179 	push	hl
      0028A0 CDr9Dr26         [17] 8180 	call	_SetBlock
      0028A3 F1               [10] 8181 	pop	af
      0028A4 33               [ 6] 8182 	inc	sp
      0028A5 D1               [10] 8183 	pop	de
      0028A6 C1               [10] 8184 	pop	bc
      0028A7 C3r71r27         [10] 8185 	jp	00120$
      0028AA                       8186 00125$:
                                   8187 ;src\/Title.h:176: }
      0028AA DD F9            [10] 8188 	ld	sp, ix
      0028AC DD E1            [14] 8189 	pop	ix
      0028AE C9               [10] 8190 	ret
      0028AF                       8191 _TitleScreen_title_65536_279:
      0028AF 00                    8192 	.db #0x00	; 0
      0028B0 00                    8193 	.db #0x00	; 0
      0028B1 00                    8194 	.db #0x00	; 0
      0028B2 00                    8195 	.db #0x00	; 0
      0028B3 8E                    8196 	.db #0x8e	; 142
      0028B4 8E                    8197 	.db #0x8e	; 142
      0028B5 8E                    8198 	.db #0x8e	; 142
      0028B6 8E                    8199 	.db #0x8e	; 142
      0028B7 00                    8200 	.db #0x00	; 0
      0028B8 8E                    8201 	.db #0x8e	; 142
      0028B9 8E                    8202 	.db #0x8e	; 142
      0028BA 8E                    8203 	.db #0x8e	; 142
      0028BB 8E                    8204 	.db #0x8e	; 142
      0028BC 8E                    8205 	.db #0x8e	; 142
      0028BD 8E                    8206 	.db #0x8e	; 142
      0028BE 00                    8207 	.db #0x00	; 0
      0028BF 00                    8208 	.db #0x00	; 0
      0028C0 8E                    8209 	.db #0x8e	; 142
      0028C1 8E                    8210 	.db #0x8e	; 142
      0028C2 00                    8211 	.db #0x00	; 0
      0028C3 00                    8212 	.db #0x00	; 0
      0028C4 00                    8213 	.db #0x00	; 0
      0028C5 8E                    8214 	.db #0x8e	; 142
      0028C6 8E                    8215 	.db #0x8e	; 142
      0028C7 00                    8216 	.db #0x00	; 0
      0028C8 00                    8217 	.db #0x00	; 0
      0028C9 00                    8218 	.db #0x00	; 0
      0028CA 00                    8219 	.db #0x00	; 0
      0028CB 8E                    8220 	.db #0x8e	; 142
      0028CC 8E                    8221 	.db #0x8e	; 142
      0028CD 8E                    8222 	.db #0x8e	; 142
      0028CE 8E                    8223 	.db #0x8e	; 142
      0028CF 00                    8224 	.db #0x00	; 0
      0028D0 00                    8225 	.db #0x00	; 0
      0028D1 00                    8226 	.db #0x00	; 0
      0028D2 8E                    8227 	.db #0x8e	; 142
      0028D3 8E                    8228 	.db #0x8e	; 142
      0028D4 8E                    8229 	.db #0x8e	; 142
      0028D5 8E                    8230 	.db #0x8e	; 142
      0028D6 8E                    8231 	.db #0x8e	; 142
      0028D7 00                    8232 	.db #0x00	; 0
      0028D8 8E                    8233 	.db #0x8e	; 142
      0028D9 8E                    8234 	.db #0x8e	; 142
      0028DA 00                    8235 	.db #0x00	; 0
      0028DB 00                    8236 	.db #0x00	; 0
      0028DC 00                    8237 	.db #0x00	; 0
      0028DD 8E                    8238 	.db #0x8e	; 142
      0028DE 8E                    8239 	.db #0x8e	; 142
      0028DF 00                    8240 	.db #0x00	; 0
      0028E0 00                    8241 	.db #0x00	; 0
      0028E1 8E                    8242 	.db #0x8e	; 142
      0028E2 8E                    8243 	.db #0x8e	; 142
      0028E3 00                    8244 	.db #0x00	; 0
      0028E4 00                    8245 	.db #0x00	; 0
      0028E5 8E                    8246 	.db #0x8e	; 142
      0028E6 8E                    8247 	.db #0x8e	; 142
      0028E7 00                    8248 	.db #0x00	; 0
      0028E8 00                    8249 	.db #0x00	; 0
      0028E9 00                    8250 	.db #0x00	; 0
      0028EA 8E                    8251 	.db #0x8e	; 142
      0028EB 8E                    8252 	.db #0x8e	; 142
      0028EC 8E                    8253 	.db #0x8e	; 142
      0028ED 8E                    8254 	.db #0x8e	; 142
      0028EE 8E                    8255 	.db #0x8e	; 142
      0028EF 00                    8256 	.db #0x00	; 0
      0028F0 00                    8257 	.db #0x00	; 0
      0028F1 8E                    8258 	.db #0x8e	; 142
      0028F2 8E                    8259 	.db #0x8e	; 142
      0028F3 8E                    8260 	.db #0x8e	; 142
      0028F4 00                    8261 	.db #0x00	; 0
      0028F5 8E                    8262 	.db #0x8e	; 142
      0028F6 8E                    8263 	.db #0x8e	; 142
      0028F7 00                    8264 	.db #0x00	; 0
      0028F8 8E                    8265 	.db #0x8e	; 142
      0028F9 8E                    8266 	.db #0x8e	; 142
      0028FA 00                    8267 	.db #0x00	; 0
      0028FB 00                    8268 	.db #0x00	; 0
      0028FC 00                    8269 	.db #0x00	; 0
      0028FD 8E                    8270 	.db #0x8e	; 142
      0028FE 8E                    8271 	.db #0x8e	; 142
      0028FF 00                    8272 	.db #0x00	; 0
      002900 00                    8273 	.db #0x00	; 0
      002901 00                    8274 	.db #0x00	; 0
      002902 8E                    8275 	.db #0x8e	; 142
      002903 8E                    8276 	.db #0x8e	; 142
      002904 00                    8277 	.db #0x00	; 0
      002905 8E                    8278 	.db #0x8e	; 142
      002906 8E                    8279 	.db #0x8e	; 142
      002907 00                    8280 	.db #0x00	; 0
      002908 00                    8281 	.db #0x00	; 0
      002909 8E                    8282 	.db #0x8e	; 142
      00290A 8E                    8283 	.db #0x8e	; 142
      00290B 8E                    8284 	.db #0x8e	; 142
      00290C 00                    8285 	.db #0x00	; 0
      00290D 8E                    8286 	.db #0x8e	; 142
      00290E 8E                    8287 	.db #0x8e	; 142
      00290F 00                    8288 	.db #0x00	; 0
      002910 8E                    8289 	.db #0x8e	; 142
      002911 8E                    8290 	.db #0x8e	; 142
      002912 8E                    8291 	.db #0x8e	; 142
      002913 00                    8292 	.db #0x00	; 0
      002914 00                    8293 	.db #0x00	; 0
      002915 8E                    8294 	.db #0x8e	; 142
      002916 8E                    8295 	.db #0x8e	; 142
      002917 00                    8296 	.db #0x00	; 0
      002918 8E                    8297 	.db #0x8e	; 142
      002919 8E                    8298 	.db #0x8e	; 142
      00291A 00                    8299 	.db #0x00	; 0
      00291B 00                    8300 	.db #0x00	; 0
      00291C 8E                    8301 	.db #0x8e	; 142
      00291D 8E                    8302 	.db #0x8e	; 142
      00291E 00                    8303 	.db #0x00	; 0
      00291F 00                    8304 	.db #0x00	; 0
      002920 00                    8305 	.db #0x00	; 0
      002921 00                    8306 	.db #0x00	; 0
      002922 00                    8307 	.db #0x00	; 0
      002923 8E                    8308 	.db #0x8e	; 142
      002924 8E                    8309 	.db #0x8e	; 142
      002925 8E                    8310 	.db #0x8e	; 142
      002926 00                    8311 	.db #0x00	; 0
      002927 00                    8312 	.db #0x00	; 0
      002928 8E                    8313 	.db #0x8e	; 142
      002929 8E                    8314 	.db #0x8e	; 142
      00292A 8E                    8315 	.db #0x8e	; 142
      00292B 00                    8316 	.db #0x00	; 0
      00292C 00                    8317 	.db #0x00	; 0
      00292D 8E                    8318 	.db #0x8e	; 142
      00292E 8E                    8319 	.db #0x8e	; 142
      00292F 00                    8320 	.db #0x00	; 0
      002930 8E                    8321 	.db #0x8e	; 142
      002931 8E                    8322 	.db #0x8e	; 142
      002932 00                    8323 	.db #0x00	; 0
      002933 00                    8324 	.db #0x00	; 0
      002934 00                    8325 	.db #0x00	; 0
      002935 8E                    8326 	.db #0x8e	; 142
      002936 8E                    8327 	.db #0x8e	; 142
      002937 00                    8328 	.db #0x00	; 0
      002938 8E                    8329 	.db #0x8e	; 142
      002939 8E                    8330 	.db #0x8e	; 142
      00293A 8E                    8331 	.db #0x8e	; 142
      00293B 8E                    8332 	.db #0x8e	; 142
      00293C 8E                    8333 	.db #0x8e	; 142
      00293D 00                    8334 	.db #0x00	; 0
      00293E 00                    8335 	.db #0x00	; 0
      00293F 00                    8336 	.db #0x00	; 0
      002940 00                    8337 	.db #0x00	; 0
      002941 00                    8338 	.db #0x00	; 0
      002942 00                    8339 	.db #0x00	; 0
      002943 8E                    8340 	.db #0x8e	; 142
      002944 8E                    8341 	.db #0x8e	; 142
      002945 00                    8342 	.db #0x00	; 0
      002946 00                    8343 	.db #0x00	; 0
      002947 00                    8344 	.db #0x00	; 0
      002948 8E                    8345 	.db #0x8e	; 142
      002949 8E                    8346 	.db #0x8e	; 142
      00294A 00                    8347 	.db #0x00	; 0
      00294B 00                    8348 	.db #0x00	; 0
      00294C 00                    8349 	.db #0x00	; 0
      00294D 8E                    8350 	.db #0x8e	; 142
      00294E 8E                    8351 	.db #0x8e	; 142
      00294F 00                    8352 	.db #0x00	; 0
      002950 8E                    8353 	.db #0x8e	; 142
      002951 8E                    8354 	.db #0x8e	; 142
      002952 00                    8355 	.db #0x00	; 0
      002953 00                    8356 	.db #0x00	; 0
      002954 00                    8357 	.db #0x00	; 0
      002955 8E                    8358 	.db #0x8e	; 142
      002956 8E                    8359 	.db #0x8e	; 142
      002957 00                    8360 	.db #0x00	; 0
      002958 8E                    8361 	.db #0x8e	; 142
      002959 8E                    8362 	.db #0x8e	; 142
      00295A 8E                    8363 	.db #0x8e	; 142
      00295B 8E                    8364 	.db #0x8e	; 142
      00295C 8E                    8365 	.db #0x8e	; 142
      00295D 00                    8366 	.db #0x00	; 0
      00295E 00                    8367 	.db #0x00	; 0
      00295F 00                    8368 	.db #0x00	; 0
      002960 00                    8369 	.db #0x00	; 0
      002961 00                    8370 	.db #0x00	; 0
      002962 00                    8371 	.db #0x00	; 0
      002963 8E                    8372 	.db #0x8e	; 142
      002964 8E                    8373 	.db #0x8e	; 142
      002965 00                    8374 	.db #0x00	; 0
      002966 00                    8375 	.db #0x00	; 0
      002967 00                    8376 	.db #0x00	; 0
      002968 8E                    8377 	.db #0x8e	; 142
      002969 8E                    8378 	.db #0x8e	; 142
      00296A 00                    8379 	.db #0x00	; 0
      00296B 00                    8380 	.db #0x00	; 0
      00296C 00                    8381 	.db #0x00	; 0
      00296D 8E                    8382 	.db #0x8e	; 142
      00296E 8E                    8383 	.db #0x8e	; 142
      00296F 00                    8384 	.db #0x00	; 0
      002970 8E                    8385 	.db #0x8e	; 142
      002971 8E                    8386 	.db #0x8e	; 142
      002972 8E                    8387 	.db #0x8e	; 142
      002973 8E                    8388 	.db #0x8e	; 142
      002974 8E                    8389 	.db #0x8e	; 142
      002975 8E                    8390 	.db #0x8e	; 142
      002976 8E                    8391 	.db #0x8e	; 142
      002977 00                    8392 	.db #0x00	; 0
      002978 8E                    8393 	.db #0x8e	; 142
      002979 8E                    8394 	.db #0x8e	; 142
      00297A 00                    8395 	.db #0x00	; 0
      00297B 00                    8396 	.db #0x00	; 0
      00297C 00                    8397 	.db #0x00	; 0
      00297D 8E                    8398 	.db #0x8e	; 142
      00297E 00                    8399 	.db #0x00	; 0
      00297F 00                    8400 	.db #0x00	; 0
      002980 00                    8401 	.db #0x00	; 0
      002981 00                    8402 	.db #0x00	; 0
      002982 00                    8403 	.db #0x00	; 0
      002983 8E                    8404 	.db #0x8e	; 142
      002984 8E                    8405 	.db #0x8e	; 142
      002985 00                    8406 	.db #0x00	; 0
      002986 00                    8407 	.db #0x00	; 0
      002987 00                    8408 	.db #0x00	; 0
      002988 8E                    8409 	.db #0x8e	; 142
      002989 8E                    8410 	.db #0x8e	; 142
      00298A 8E                    8411 	.db #0x8e	; 142
      00298B 8E                    8412 	.db #0x8e	; 142
      00298C 8E                    8413 	.db #0x8e	; 142
      00298D 8E                    8414 	.db #0x8e	; 142
      00298E 8E                    8415 	.db #0x8e	; 142
      00298F 00                    8416 	.db #0x00	; 0
      002990 8E                    8417 	.db #0x8e	; 142
      002991 8E                    8418 	.db #0x8e	; 142
      002992 00                    8419 	.db #0x00	; 0
      002993 00                    8420 	.db #0x00	; 0
      002994 00                    8421 	.db #0x00	; 0
      002995 8E                    8422 	.db #0x8e	; 142
      002996 8E                    8423 	.db #0x8e	; 142
      002997 00                    8424 	.db #0x00	; 0
      002998 8E                    8425 	.db #0x8e	; 142
      002999 8E                    8426 	.db #0x8e	; 142
      00299A 00                    8427 	.db #0x00	; 0
      00299B 00                    8428 	.db #0x00	; 0
      00299C 00                    8429 	.db #0x00	; 0
      00299D 8E                    8430 	.db #0x8e	; 142
      00299E 00                    8431 	.db #0x00	; 0
      00299F 00                    8432 	.db #0x00	; 0
      0029A0 00                    8433 	.db #0x00	; 0
      0029A1 00                    8434 	.db #0x00	; 0
      0029A2 00                    8435 	.db #0x00	; 0
      0029A3 8E                    8436 	.db #0x8e	; 142
      0029A4 8E                    8437 	.db #0x8e	; 142
      0029A5 00                    8438 	.db #0x00	; 0
      0029A6 00                    8439 	.db #0x00	; 0
      0029A7 00                    8440 	.db #0x00	; 0
      0029A8 8E                    8441 	.db #0x8e	; 142
      0029A9 8E                    8442 	.db #0x8e	; 142
      0029AA 00                    8443 	.db #0x00	; 0
      0029AB 00                    8444 	.db #0x00	; 0
      0029AC 00                    8445 	.db #0x00	; 0
      0029AD 8E                    8446 	.db #0x8e	; 142
      0029AE 8E                    8447 	.db #0x8e	; 142
      0029AF                       8448 ___str_10:
      0029AF 50 52 45 53 53 20 54  8449 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0029C5 00                    8450 	.db 0x00
      0029C6                       8451 ___str_11:
      0029C6 41 4E 44 52 45 42 41  8452 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0029DA 00                    8453 	.db 0x00
      0029DB                       8454 ___str_12:
      0029DB 76 2E 3F 2E 3F 2E 3F  8455 	.ascii "v.?.?.?"
      0029E2 00                    8456 	.db 0x00
                                   8457 ;src\main.c:90: void main() {
                                   8458 ;	---------------------------------
                                   8459 ; Function main
                                   8460 ; ---------------------------------
      0029E3                       8461 _main::
                                   8462 ;src\main.c:92: while(TRUE) {
      0029E3                       8463 00102$:
                                   8464 ;src\main.c:98: InitGame();
      0029E3 CDrD5r24         [17] 8465 	call	_InitGame
                                   8466 ;src\main.c:101: }
      0029E6 18 FB            [12] 8467 	jr	00102$
                                   8468 	.area _CODE
                                   8469 	.area _INITIALIZER
      000000                       8470 __xinit__gameOver:
      000000 00                    8471 	.db #0x00	; 0
      000001                       8472 __xinit__col:
      000001 00                    8473 	.db #0x00	; 0
      000002                       8474 __xinit__line:
      000002 00                    8475 	.db #0x00	; 0
      000003                       8476 __xinit__counter:
      000003 00                    8477 	.db #0x00	; 0
      000004                       8478 __xinit__blocksRemoved:
      000004 00 00                 8479 	.dw #0x0000
      000006                       8480 __xinit__level:
      000006 01                    8481 	.db #0x01	; 1
      000007                       8482 __xinit__newLevel:
      000007 00                    8483 	.db #0x00	; 0
      000008                       8484 __xinit__rndSeed:
      000008 00                    8485 	.db #0x00	; 0
                                   8486 	.area _CABS (ABS)
