                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _GetNextPieceColors
                                     38 	.globl _DrawColumn
                                     39 	.globl _DrawNumber
                                     40 	.globl _DrawString
                                     41 	.globl _DrawChar
                                     42 	.globl _DrawExplosionSprite
                                     43 	.globl _HideExplosionSprite
                                     44 	.globl _HideHitSprite
                                     45 	.globl _DrawHitSprite
                                     46 	.globl _HideArrowSprite
                                     47 	.globl _DrawArrowSprite
                                     48 	.globl _GetRandomInInterval
                                     49 	.globl _GetRandom
                                     50 	.globl _InitRnd
                                     51 	.globl _Power
                                     52 	.globl _Wait
                                     53 	.globl _SNSMAT
                                     54 	.globl _GTTRIG
                                     55 	.globl _GTSTCK
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _rndSeed
                                     67 	.globl _newLevel
                                     68 	.globl _level
                                     69 	.globl _blocksRemoved
                                     70 	.globl _counter
                                     71 	.globl _line
                                     72 	.globl _col
                                     73 	.globl _gameOver
                                     74 	.globl _nextPieceColor_Back
                                     75 	.globl _nextPieceColor_Front
                                     76 	.globl _Rand_x
                                     77 	.globl _Rand_c
                                     78 	.globl _Rand_b
                                     79 	.globl _Rand_a
                                     80 	.globl _speed
                                     81 	.globl _nextBottomPiece
                                     82 	.globl _nextMidPiece
                                     83 	.globl _nextTopPiece
                                     84 	.globl _bottomPiece
                                     85 	.globl _midPiece
                                     86 	.globl _topPiece
                                     87 	.globl _playfieldTemp
                                     88 	.globl _playfield
                                     89 	.globl _GETPNT
                                     90 	.globl _PUTPNT
                                     91 	.globl _REPCNT
                                     92 	.globl _SCNCNT
                                     93 	.globl _ATRBYT
                                     94 	.globl _CMASK
                                     95 	.globl _CLOC
                                     96 	.globl _BDRCLR
                                     97 	.globl _BAKCLR
                                     98 	.globl _FORCLR
                                     99 	.globl _TRGFLG
                                    100 	.globl _STATFL
                                    101 	.globl _MSX_vdp_regs
                                    102 	.globl _CNSDFG
                                    103 	.globl _CSRX
                                    104 	.globl _CSRY
                                    105 	.globl _MSX_modedata_screen3
                                    106 	.globl _MSX_modedata_screen2
                                    107 	.globl _MSX_modedata_screen1
                                    108 	.globl _MSX_modedata_screen0
                                    109 	.globl _CLIKSW
                                    110 	.globl _JIFFY
                                    111 	.globl _CLMLST
                                    112 	.globl _CRTCNT
                                    113 	.globl _LINLEN
                                    114 	.globl _LINL32
                                    115 	.globl _LINL40
                                    116 	.globl _MSX_charset
                                    117 	.globl _FONT
                                    118 	.globl _pieces
                                    119 	.globl _MSX_version
                                    120 	.globl _MSX_vdp_port_write
                                    121 	.globl _MSX_vdp_port_read
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 ;--------------------------------------------------------
                                    126 ; ram data
                                    127 ;--------------------------------------------------------
                                    128 	.area _DATA
                           000004   129 _MSX_charset	=	0x0004
                           00F3AE   130 _LINL40	=	0xf3ae
                           00F3AF   131 _LINL32	=	0xf3af
                           00F3B0   132 _LINLEN	=	0xf3b0
                           00F3B1   133 _CRTCNT	=	0xf3b1
                           00F3B1   134 _CLMLST	=	0xf3b1
                           00FC9E   135 _JIFFY	=	0xfc9e
                           00F3DB   136 _CLIKSW	=	0xf3db
                           00F3B3   137 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   138 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   139 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   140 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   141 _CSRY	=	0xf3dc
                           00F3DD   142 _CSRX	=	0xf3dd
                           00F3DE   143 _CNSDFG	=	0xf3de
                           00F3DF   144 _MSX_vdp_regs	=	0xf3df
                           00F3E7   145 _STATFL	=	0xf3e7
                           00F3E8   146 _TRGFLG	=	0xf3e8
                           00F3E9   147 _FORCLR	=	0xf3e9
                           00F3EA   148 _BAKCLR	=	0xf3ea
                           00F3EB   149 _BDRCLR	=	0xf3eb
                           00F92A   150 _CLOC	=	0xf92a
                           00F92C   151 _CMASK	=	0xf92c
                           00F3F2   152 _ATRBYT	=	0xf3f2
                           00F3F6   153 _SCNCNT	=	0xf3f6
                           00F3F7   154 _REPCNT	=	0xf3f7
                           00F3F8   155 _PUTPNT	=	0xf3f8
                           00F3FA   156 _GETPNT	=	0xf3fa
      000000                        157 _playfield::
      000000                        158 	.ds 72
      000048                        159 _playfieldTemp::
      000048                        160 	.ds 72
      000090                        161 _topPiece::
      000090                        162 	.ds 1
      000091                        163 _midPiece::
      000091                        164 	.ds 1
      000092                        165 _bottomPiece::
      000092                        166 	.ds 1
      000093                        167 _nextTopPiece::
      000093                        168 	.ds 1
      000094                        169 _nextMidPiece::
      000094                        170 	.ds 1
      000095                        171 _nextBottomPiece::
      000095                        172 	.ds 1
      000096                        173 _speed::
      000096                        174 	.ds 1
      000097                        175 _Rand_a::
      000097                        176 	.ds 1
      000098                        177 _Rand_b::
      000098                        178 	.ds 1
      000099                        179 _Rand_c::
      000099                        180 	.ds 1
      00009A                        181 _Rand_x::
      00009A                        182 	.ds 1
      00009B                        183 _nextPieceColor_Front::
      00009B                        184 	.ds 1
      00009C                        185 _nextPieceColor_Back::
      00009C                        186 	.ds 1
                                    187 ;--------------------------------------------------------
                                    188 ; ram data
                                    189 ;--------------------------------------------------------
                                    190 	.area _INITIALIZED
      000000                        191 _gameOver::
      000000                        192 	.ds 1
      000001                        193 _col::
      000001                        194 	.ds 1
      000002                        195 _line::
      000002                        196 	.ds 1
      000003                        197 _counter::
      000003                        198 	.ds 1
      000004                        199 _blocksRemoved::
      000004                        200 	.ds 2
      000006                        201 _level::
      000006                        202 	.ds 1
      000007                        203 _newLevel::
      000007                        204 	.ds 1
      000008                        205 _rndSeed::
      000008                        206 	.ds 1
                                    207 ;--------------------------------------------------------
                                    208 ; absolute external ram data
                                    209 ;--------------------------------------------------------
                                    210 	.area _DABS (ABS)
                                    211 ;--------------------------------------------------------
                                    212 ; global & static initialisations
                                    213 ;--------------------------------------------------------
                                    214 	.area _HOME
                                    215 	.area _GSINIT
                                    216 	.area _GSFINAL
                                    217 	.area _GSINIT
                                    218 ;--------------------------------------------------------
                                    219 ; Home
                                    220 ;--------------------------------------------------------
                                    221 	.area _HOME
                                    222 	.area _HOME
                                    223 ;--------------------------------------------------------
                                    224 ; code
                                    225 ;--------------------------------------------------------
                                    226 	.area _CODE
                                    227 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    228 ;	---------------------------------
                                    229 ; Function Wait
                                    230 ; ---------------------------------
      000000                        231 _Wait::
                                    232 ;src\/Common.h:2: do {
      000000 D1               [10]  233 	pop	de
      000001 C1               [10]  234 	pop	bc
      000002 C5               [11]  235 	push	bc
      000003 D5               [11]  236 	push	de
      000004                        237 00104$:
                                    238 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  239 	ld	de, (_JIFFY)
                                    240 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        241 00101$:
      000008 2A 9E FC         [16]  242 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  243 	cp	a, a
      00000C ED 52            [15]  244 	sbc	hl, de
      00000E 28 F8            [12]  245 	jr	Z, 00101$
                                    246 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  247 	ld	e, c
      000011 50               [ 4]  248 	ld	d, b
      000012 0B               [ 6]  249 	dec	bc
      000013 7A               [ 4]  250 	ld	a, d
      000014 B3               [ 4]  251 	or	a, e
      000015 20 ED            [12]  252 	jr	NZ, 00104$
                                    253 ;src\/Common.h:8: }
      000017 C9               [10]  254 	ret
                           000006   255 _MSX_vdp_port_read	=	0x0006
                           000007   256 _MSX_vdp_port_write	=	0x0007
                           00002D   257 _MSX_version	=	0x002d
      000018                        258 _pieces:
      000018 04                     259 	.db #0x04	; 4
      000019 08                     260 	.db #0x08	; 8
      00001A 0C                     261 	.db #0x0c	; 12
      00001B 10                     262 	.db #0x10	; 16
      00001C 14                     263 	.db #0x14	; 20
                                    264 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    265 ;	---------------------------------
                                    266 ; Function Power
                                    267 ; ---------------------------------
      00001D                        268 _Power::
      00001D DD E5            [15]  269 	push	ix
      00001F DD 21 00 00      [14]  270 	ld	ix,#0
      000023 DD 39            [15]  271 	add	ix,sp
                                    272 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  273 	ld	c, 4 (ix)
      000028 06 00            [ 7]  274 	ld	b, #0x00
      00002A 69               [ 4]  275 	ld	l, c
      00002B 60               [ 4]  276 	ld	h, b
                                    277 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  278 	ld	a, 5 (ix)
      00002F B7               [ 4]  279 	or	a, a
      000030 20 05            [12]  280 	jr	NZ, 00111$
      000032 21 01 00         [10]  281 	ld	hl, #0x0001
      000035 18 16            [12]  282 	jr	00107$
                                    283 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        284 00111$:
      000037 1E 01            [ 7]  285 	ld	e, #0x01
      000039                        286 00105$:
      000039 7B               [ 4]  287 	ld	a, e
      00003A DD 96 05         [19]  288 	sub	a, 5 (ix)
      00003D 30 0E            [12]  289 	jr	NC, 00103$
                                    290 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  291 	push	bc
      000040 D5               [11]  292 	push	de
      000041 C5               [11]  293 	push	bc
      000042 E5               [11]  294 	push	hl
      000043 CDr00r00         [17]  295 	call	__mulint
      000046 F1               [10]  296 	pop	af
      000047 F1               [10]  297 	pop	af
      000048 D1               [10]  298 	pop	de
      000049 C1               [10]  299 	pop	bc
                                    300 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  301 	inc	e
      00004B 18 EC            [12]  302 	jr	00105$
      00004D                        303 00103$:
                                    304 ;src\/Math.h:10: return power;
      00004D                        305 00107$:
                                    306 ;src\/Math.h:11: }
      00004D DD E1            [14]  307 	pop	ix
      00004F C9               [10]  308 	ret
                                    309 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    310 ;	---------------------------------
                                    311 ; Function InitRnd
                                    312 ; ---------------------------------
      000050                        313 _InitRnd::
                                    314 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  315 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  316 	ld	hl, #2
      000056 39               [11]  317 	add	hl, sp
      000057 AE               [ 7]  318 	xor	a, (hl)
      000058 32r97r00         [13]  319 	ld	(_Rand_a+0), a
                                    320 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  321 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  322 	ld	hl, #3
      000061 39               [11]  323 	add	hl, sp
      000062 AE               [ 7]  324 	xor	a, (hl)
      000063 32r98r00         [13]  325 	ld	(_Rand_b+0), a
                                    326 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  327 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  328 	ld	hl, #4
      00006C 39               [11]  329 	add	hl, sp
      00006D AE               [ 7]  330 	xor	a, (hl)
      00006E 32r99r00         [13]  331 	ld	(_Rand_c+0), a
                                    332 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  333 	ld	hl, #_Rand_x
      000074 34               [11]  334 	inc	(hl)
                                    335 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  336 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  337 	ld	hl, #_Rand_c
      00007B AE               [ 7]  338 	xor	a, (hl)
      00007C 21r9Ar00         [10]  339 	ld	hl, #_Rand_x
      00007F AE               [ 7]  340 	xor	a, (hl)
      000080 32r97r00         [13]  341 	ld	(_Rand_a+0), a
                                    342 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  343 	ld	hl, #_Rand_b
      000086 7E               [ 7]  344 	ld	a, (hl)
      000087 FD 21r97r00      [14]  345 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  346 	add	a, 0 (iy)
      00008E 77               [ 7]  347 	ld	(hl), a
                                    348 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  349 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  350 	srl	a
      000094 21r99r00         [10]  351 	ld	hl, #_Rand_c
      000097 86               [ 7]  352 	add	a, (hl)
      000098 FD 21r97r00      [14]  353 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  354 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  355 	ld	(_Rand_c+0), a
                                    356 ;src\/Random.h:38: }
      0000A2 C9               [10]  357 	ret
                                    358 ;src\/Random.h:40: unsigned char GetRandom() {
                                    359 ;	---------------------------------
                                    360 ; Function GetRandom
                                    361 ; ---------------------------------
      0000A3                        362 _GetRandom::
                                    363 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  364 	ld	hl, #_Rand_x
      0000A6 34               [11]  365 	inc	(hl)
                                    366 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  367 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  368 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  369 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  370 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  371 	xor	a, (hl)
      0000B2 32r97r00         [13]  372 	ld	(_Rand_a+0), a
                                    373 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  374 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  375 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  376 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  377 	add	a, 0 (iy)
      0000C0 77               [ 7]  378 	ld	(hl), a
                                    379 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  380 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  381 	srl	a
      0000C6 21r99r00         [10]  382 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  383 	add	a, (hl)
      0000CA FD 21r97r00      [14]  384 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  385 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  386 	ld	(_Rand_c+0), a
                                    387 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  388 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  389 	ld	l, a
                                    390 ;src\/Random.h:47: }
      0000D8 C9               [10]  391 	ret
                                    392 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    393 ;	---------------------------------
                                    394 ; Function GetRandomInInterval
                                    395 ; ---------------------------------
      0000D9                        396 _GetRandomInInterval::
                                    397 ;src\/Random.h:53: do {
      0000D9                        398 00101$:
                                    399 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  400 	call	_GetRandom
      0000DC 7D               [ 4]  401 	ld	a, l
      0000DD 21 03 00         [10]  402 	ld	hl, #3
      0000E0 39               [11]  403 	add	hl, sp
      0000E1 A6               [ 7]  404 	and	a, (hl)
      0000E2 4F               [ 4]  405 	ld	c, a
                                    406 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  407 	ld	hl, #2
      0000E6 39               [11]  408 	add	hl, sp
      0000E7 7E               [ 7]  409 	ld	a, (hl)
      0000E8 91               [ 4]  410 	sub	a, c
      0000E9 38 EE            [12]  411 	jr	C, 00101$
                                    412 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  413 	ld	l, c
                                    414 ;src\/Random.h:59: }
      0000EC C9               [10]  415 	ret
                                    416 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    417 ;	---------------------------------
                                    418 ; Function DrawArrowSprite
                                    419 ; ---------------------------------
      0000ED                        420 _DrawArrowSprite::
      0000ED DD E5            [15]  421 	push	ix
      0000EF DD 21 00 00      [14]  422 	ld	ix,#0
      0000F3 DD 39            [15]  423 	add	ix,sp
      0000F5 21 F8 FF         [10]  424 	ld	hl, #-8
      0000F8 39               [11]  425 	add	hl, sp
      0000F9 F9               [ 6]  426 	ld	sp, hl
                                    427 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  428 	ld	hl, #0
      0000FD 39               [11]  429 	add	hl, sp
      0000FE EB               [ 4]  430 	ex	de, hl
      0000FF 3E 0F            [ 7]  431 	ld	a, #0x0f
      000101 12               [ 7]  432 	ld	(de), a
      000102 6B               [ 4]  433 	ld	l, e
      000103 62               [ 4]  434 	ld	h, d
      000104 23               [ 6]  435 	inc	hl
      000105 36 0E            [10]  436 	ld	(hl), #0x0e
      000107 6B               [ 4]  437 	ld	l, e
      000108 62               [ 4]  438 	ld	h, d
      000109 23               [ 6]  439 	inc	hl
      00010A 23               [ 6]  440 	inc	hl
      00010B 36 05            [10]  441 	ld	(hl), #0x05
      00010D 6B               [ 4]  442 	ld	l, e
      00010E 62               [ 4]  443 	ld	h, d
      00010F 23               [ 6]  444 	inc	hl
      000110 23               [ 6]  445 	inc	hl
      000111 23               [ 6]  446 	inc	hl
      000112 36 04            [10]  447 	ld	(hl), #0x04
      000114 21 04 00         [10]  448 	ld	hl, #0x0004
      000117 19               [11]  449 	add	hl, de
      000118 36 04            [10]  450 	ld	(hl), #0x04
      00011A 21 05 00         [10]  451 	ld	hl, #0x0005
      00011D 19               [11]  452 	add	hl, de
      00011E 36 05            [10]  453 	ld	(hl), #0x05
      000120 21 06 00         [10]  454 	ld	hl, #0x0006
      000123 19               [11]  455 	add	hl, de
      000124 36 0E            [10]  456 	ld	(hl), #0x0e
      000126 21 07 00         [10]  457 	ld	hl, #0x0007
      000129 19               [11]  458 	add	hl, de
      00012A 36 0F            [10]  459 	ld	(hl), #0x0f
                                    460 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  461 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  462 	ld	a, l
      000130 E6 0E            [ 7]  463 	and	a, #0x0e
      000132 6F               [ 4]  464 	ld	l, a
      000133 26 00            [ 7]  465 	ld	h, #0x00
      000135 CB 3C            [ 8]  466 	srl	h
      000137 CB 1D            [ 8]  467 	rr	l
                                    468 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  469 	ld	a, 5 (ix)
      00013C 3D               [ 4]  470 	dec	a
      00013D E5               [11]  471 	push	hl
      00013E D5               [11]  472 	push	de
      00013F F5               [11]  473 	push	af
      000140 33               [ 6]  474 	inc	sp
      000141 01 00 1B         [10]  475 	ld	bc, #0x1b00
      000144 C5               [11]  476 	push	bc
      000145 CDr00r00         [17]  477 	call	_WRTVRM
      000148 F1               [10]  478 	pop	af
      000149 33               [ 6]  479 	inc	sp
      00014A DD 7E 04         [19]  480 	ld	a, 4 (ix)
      00014D F5               [11]  481 	push	af
      00014E 33               [ 6]  482 	inc	sp
      00014F 01 01 1B         [10]  483 	ld	bc, #0x1b01
      000152 C5               [11]  484 	push	bc
      000153 CDr00r00         [17]  485 	call	_WRTVRM
      000156 F1               [10]  486 	pop	af
      000157 33               [ 6]  487 	inc	sp
      000158 AF               [ 4]  488 	xor	a, a
      000159 F5               [11]  489 	push	af
      00015A 33               [ 6]  490 	inc	sp
      00015B 01 02 1B         [10]  491 	ld	bc, #0x1b02
      00015E C5               [11]  492 	push	bc
      00015F CDr00r00         [17]  493 	call	_WRTVRM
      000162 F1               [10]  494 	pop	af
      000163 33               [ 6]  495 	inc	sp
      000164 D1               [10]  496 	pop	de
      000165 E1               [10]  497 	pop	hl
                                    498 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  499 	ld	h, #0x00
      000168 19               [11]  500 	add	hl, de
      000169 7E               [ 7]  501 	ld	a, (hl)
      00016A F5               [11]  502 	push	af
      00016B 33               [ 6]  503 	inc	sp
      00016C 21 03 1B         [10]  504 	ld	hl, #0x1b03
      00016F E5               [11]  505 	push	hl
      000170 CDr00r00         [17]  506 	call	_WRTVRM
                                    507 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  508 	ld	sp,ix
      000175 DD E1            [14]  509 	pop	ix
      000177 C9               [10]  510 	ret
      000178                        511 _FONT:
      000178 00                     512 	.db #0x00	; 0
      000179 00                     513 	.db #0x00	; 0
      00017A 00                     514 	.db #0x00	; 0
      00017B 00                     515 	.db #0x00	; 0
      00017C 00                     516 	.db #0x00	; 0
      00017D 00                     517 	.db #0x00	; 0
      00017E 00                     518 	.db #0x00	; 0
      00017F 00                     519 	.db #0x00	; 0
      000180 30                     520 	.db #0x30	; 48	'0'
      000181 78                     521 	.db #0x78	; 120	'x'
      000182 78                     522 	.db #0x78	; 120	'x'
      000183 30                     523 	.db #0x30	; 48	'0'
      000184 30                     524 	.db #0x30	; 48	'0'
      000185 00                     525 	.db #0x00	; 0
      000186 30                     526 	.db #0x30	; 48	'0'
      000187 00                     527 	.db #0x00	; 0
      000188 6C                     528 	.db #0x6c	; 108	'l'
      000189 6C                     529 	.db #0x6c	; 108	'l'
      00018A 6C                     530 	.db #0x6c	; 108	'l'
      00018B 00                     531 	.db #0x00	; 0
      00018C 00                     532 	.db #0x00	; 0
      00018D 00                     533 	.db #0x00	; 0
      00018E 00                     534 	.db #0x00	; 0
      00018F 00                     535 	.db #0x00	; 0
      000190 6C                     536 	.db #0x6c	; 108	'l'
      000191 6C                     537 	.db #0x6c	; 108	'l'
      000192 FE                     538 	.db #0xfe	; 254
      000193 6C                     539 	.db #0x6c	; 108	'l'
      000194 FE                     540 	.db #0xfe	; 254
      000195 6C                     541 	.db #0x6c	; 108	'l'
      000196 6C                     542 	.db #0x6c	; 108	'l'
      000197 00                     543 	.db #0x00	; 0
      000198 30                     544 	.db #0x30	; 48	'0'
      000199 7C                     545 	.db #0x7c	; 124
      00019A C0                     546 	.db #0xc0	; 192
      00019B 78                     547 	.db #0x78	; 120	'x'
      00019C 0C                     548 	.db #0x0c	; 12
      00019D F8                     549 	.db #0xf8	; 248
      00019E 30                     550 	.db #0x30	; 48	'0'
      00019F 00                     551 	.db #0x00	; 0
      0001A0 00                     552 	.db #0x00	; 0
      0001A1 C6                     553 	.db #0xc6	; 198
      0001A2 CC                     554 	.db #0xcc	; 204
      0001A3 18                     555 	.db #0x18	; 24
      0001A4 30                     556 	.db #0x30	; 48	'0'
      0001A5 66                     557 	.db #0x66	; 102	'f'
      0001A6 C6                     558 	.db #0xc6	; 198
      0001A7 00                     559 	.db #0x00	; 0
      0001A8 38                     560 	.db #0x38	; 56	'8'
      0001A9 6C                     561 	.db #0x6c	; 108	'l'
      0001AA 38                     562 	.db #0x38	; 56	'8'
      0001AB 76                     563 	.db #0x76	; 118	'v'
      0001AC DC                     564 	.db #0xdc	; 220
      0001AD CC                     565 	.db #0xcc	; 204
      0001AE 76                     566 	.db #0x76	; 118	'v'
      0001AF 00                     567 	.db #0x00	; 0
      0001B0 60                     568 	.db #0x60	; 96
      0001B1 60                     569 	.db #0x60	; 96
      0001B2 C0                     570 	.db #0xc0	; 192
      0001B3 00                     571 	.db #0x00	; 0
      0001B4 00                     572 	.db #0x00	; 0
      0001B5 00                     573 	.db #0x00	; 0
      0001B6 00                     574 	.db #0x00	; 0
      0001B7 00                     575 	.db #0x00	; 0
      0001B8 18                     576 	.db #0x18	; 24
      0001B9 30                     577 	.db #0x30	; 48	'0'
      0001BA 60                     578 	.db #0x60	; 96
      0001BB 60                     579 	.db #0x60	; 96
      0001BC 60                     580 	.db #0x60	; 96
      0001BD 30                     581 	.db #0x30	; 48	'0'
      0001BE 18                     582 	.db #0x18	; 24
      0001BF 00                     583 	.db #0x00	; 0
      0001C0 60                     584 	.db #0x60	; 96
      0001C1 30                     585 	.db #0x30	; 48	'0'
      0001C2 18                     586 	.db #0x18	; 24
      0001C3 18                     587 	.db #0x18	; 24
      0001C4 18                     588 	.db #0x18	; 24
      0001C5 30                     589 	.db #0x30	; 48	'0'
      0001C6 60                     590 	.db #0x60	; 96
      0001C7 00                     591 	.db #0x00	; 0
      0001C8 00                     592 	.db #0x00	; 0
      0001C9 66                     593 	.db #0x66	; 102	'f'
      0001CA 3C                     594 	.db #0x3c	; 60
      0001CB FF                     595 	.db #0xff	; 255
      0001CC 3C                     596 	.db #0x3c	; 60
      0001CD 66                     597 	.db #0x66	; 102	'f'
      0001CE 00                     598 	.db #0x00	; 0
      0001CF 00                     599 	.db #0x00	; 0
      0001D0 00                     600 	.db #0x00	; 0
      0001D1 30                     601 	.db #0x30	; 48	'0'
      0001D2 30                     602 	.db #0x30	; 48	'0'
      0001D3 FC                     603 	.db #0xfc	; 252
      0001D4 30                     604 	.db #0x30	; 48	'0'
      0001D5 30                     605 	.db #0x30	; 48	'0'
      0001D6 00                     606 	.db #0x00	; 0
      0001D7 00                     607 	.db #0x00	; 0
      0001D8 00                     608 	.db #0x00	; 0
      0001D9 00                     609 	.db #0x00	; 0
      0001DA 00                     610 	.db #0x00	; 0
      0001DB 00                     611 	.db #0x00	; 0
      0001DC 00                     612 	.db #0x00	; 0
      0001DD 30                     613 	.db #0x30	; 48	'0'
      0001DE 30                     614 	.db #0x30	; 48	'0'
      0001DF 60                     615 	.db #0x60	; 96
      0001E0 00                     616 	.db #0x00	; 0
      0001E1 00                     617 	.db #0x00	; 0
      0001E2 00                     618 	.db #0x00	; 0
      0001E3 FC                     619 	.db #0xfc	; 252
      0001E4 00                     620 	.db #0x00	; 0
      0001E5 00                     621 	.db #0x00	; 0
      0001E6 00                     622 	.db #0x00	; 0
      0001E7 00                     623 	.db #0x00	; 0
      0001E8 00                     624 	.db #0x00	; 0
      0001E9 00                     625 	.db #0x00	; 0
      0001EA 00                     626 	.db #0x00	; 0
      0001EB 00                     627 	.db #0x00	; 0
      0001EC 00                     628 	.db #0x00	; 0
      0001ED 30                     629 	.db #0x30	; 48	'0'
      0001EE 30                     630 	.db #0x30	; 48	'0'
      0001EF 00                     631 	.db #0x00	; 0
      0001F0 06                     632 	.db #0x06	; 6
      0001F1 0C                     633 	.db #0x0c	; 12
      0001F2 18                     634 	.db #0x18	; 24
      0001F3 30                     635 	.db #0x30	; 48	'0'
      0001F4 60                     636 	.db #0x60	; 96
      0001F5 C0                     637 	.db #0xc0	; 192
      0001F6 80                     638 	.db #0x80	; 128
      0001F7 00                     639 	.db #0x00	; 0
      0001F8 7C                     640 	.db #0x7c	; 124
      0001F9 C6                     641 	.db #0xc6	; 198
      0001FA CE                     642 	.db #0xce	; 206
      0001FB DE                     643 	.db #0xde	; 222
      0001FC F6                     644 	.db #0xf6	; 246
      0001FD E6                     645 	.db #0xe6	; 230
      0001FE 7C                     646 	.db #0x7c	; 124
      0001FF 00                     647 	.db #0x00	; 0
      000200 30                     648 	.db #0x30	; 48	'0'
      000201 70                     649 	.db #0x70	; 112	'p'
      000202 30                     650 	.db #0x30	; 48	'0'
      000203 30                     651 	.db #0x30	; 48	'0'
      000204 30                     652 	.db #0x30	; 48	'0'
      000205 30                     653 	.db #0x30	; 48	'0'
      000206 FC                     654 	.db #0xfc	; 252
      000207 00                     655 	.db #0x00	; 0
      000208 78                     656 	.db #0x78	; 120	'x'
      000209 CC                     657 	.db #0xcc	; 204
      00020A 0C                     658 	.db #0x0c	; 12
      00020B 38                     659 	.db #0x38	; 56	'8'
      00020C 60                     660 	.db #0x60	; 96
      00020D C4                     661 	.db #0xc4	; 196
      00020E FC                     662 	.db #0xfc	; 252
      00020F 00                     663 	.db #0x00	; 0
      000210 78                     664 	.db #0x78	; 120	'x'
      000211 CC                     665 	.db #0xcc	; 204
      000212 0C                     666 	.db #0x0c	; 12
      000213 38                     667 	.db #0x38	; 56	'8'
      000214 0C                     668 	.db #0x0c	; 12
      000215 CC                     669 	.db #0xcc	; 204
      000216 78                     670 	.db #0x78	; 120	'x'
      000217 00                     671 	.db #0x00	; 0
      000218 1C                     672 	.db #0x1c	; 28
      000219 3C                     673 	.db #0x3c	; 60
      00021A 6C                     674 	.db #0x6c	; 108	'l'
      00021B CC                     675 	.db #0xcc	; 204
      00021C FE                     676 	.db #0xfe	; 254
      00021D 0C                     677 	.db #0x0c	; 12
      00021E 1E                     678 	.db #0x1e	; 30
      00021F 00                     679 	.db #0x00	; 0
      000220 FC                     680 	.db #0xfc	; 252
      000221 C0                     681 	.db #0xc0	; 192
      000222 F8                     682 	.db #0xf8	; 248
      000223 0C                     683 	.db #0x0c	; 12
      000224 0C                     684 	.db #0x0c	; 12
      000225 CC                     685 	.db #0xcc	; 204
      000226 78                     686 	.db #0x78	; 120	'x'
      000227 00                     687 	.db #0x00	; 0
      000228 38                     688 	.db #0x38	; 56	'8'
      000229 60                     689 	.db #0x60	; 96
      00022A C0                     690 	.db #0xc0	; 192
      00022B F8                     691 	.db #0xf8	; 248
      00022C CC                     692 	.db #0xcc	; 204
      00022D CC                     693 	.db #0xcc	; 204
      00022E 78                     694 	.db #0x78	; 120	'x'
      00022F 00                     695 	.db #0x00	; 0
      000230 FC                     696 	.db #0xfc	; 252
      000231 CC                     697 	.db #0xcc	; 204
      000232 0C                     698 	.db #0x0c	; 12
      000233 18                     699 	.db #0x18	; 24
      000234 30                     700 	.db #0x30	; 48	'0'
      000235 30                     701 	.db #0x30	; 48	'0'
      000236 30                     702 	.db #0x30	; 48	'0'
      000237 00                     703 	.db #0x00	; 0
      000238 78                     704 	.db #0x78	; 120	'x'
      000239 CC                     705 	.db #0xcc	; 204
      00023A CC                     706 	.db #0xcc	; 204
      00023B 78                     707 	.db #0x78	; 120	'x'
      00023C CC                     708 	.db #0xcc	; 204
      00023D CC                     709 	.db #0xcc	; 204
      00023E 78                     710 	.db #0x78	; 120	'x'
      00023F 00                     711 	.db #0x00	; 0
      000240 78                     712 	.db #0x78	; 120	'x'
      000241 CC                     713 	.db #0xcc	; 204
      000242 CC                     714 	.db #0xcc	; 204
      000243 7C                     715 	.db #0x7c	; 124
      000244 0C                     716 	.db #0x0c	; 12
      000245 18                     717 	.db #0x18	; 24
      000246 70                     718 	.db #0x70	; 112	'p'
      000247 00                     719 	.db #0x00	; 0
      000248 00                     720 	.db #0x00	; 0
      000249 30                     721 	.db #0x30	; 48	'0'
      00024A 30                     722 	.db #0x30	; 48	'0'
      00024B 00                     723 	.db #0x00	; 0
      00024C 00                     724 	.db #0x00	; 0
      00024D 30                     725 	.db #0x30	; 48	'0'
      00024E 30                     726 	.db #0x30	; 48	'0'
      00024F 00                     727 	.db #0x00	; 0
      000250 00                     728 	.db #0x00	; 0
      000251 30                     729 	.db #0x30	; 48	'0'
      000252 30                     730 	.db #0x30	; 48	'0'
      000253 00                     731 	.db #0x00	; 0
      000254 30                     732 	.db #0x30	; 48	'0'
      000255 30                     733 	.db #0x30	; 48	'0'
      000256 60                     734 	.db #0x60	; 96
      000257 00                     735 	.db #0x00	; 0
      000258 18                     736 	.db #0x18	; 24
      000259 30                     737 	.db #0x30	; 48	'0'
      00025A 60                     738 	.db #0x60	; 96
      00025B C0                     739 	.db #0xc0	; 192
      00025C 60                     740 	.db #0x60	; 96
      00025D 30                     741 	.db #0x30	; 48	'0'
      00025E 18                     742 	.db #0x18	; 24
      00025F 00                     743 	.db #0x00	; 0
      000260 00                     744 	.db #0x00	; 0
      000261 00                     745 	.db #0x00	; 0
      000262 FC                     746 	.db #0xfc	; 252
      000263 00                     747 	.db #0x00	; 0
      000264 00                     748 	.db #0x00	; 0
      000265 FC                     749 	.db #0xfc	; 252
      000266 00                     750 	.db #0x00	; 0
      000267 00                     751 	.db #0x00	; 0
      000268 60                     752 	.db #0x60	; 96
      000269 30                     753 	.db #0x30	; 48	'0'
      00026A 18                     754 	.db #0x18	; 24
      00026B 0C                     755 	.db #0x0c	; 12
      00026C 18                     756 	.db #0x18	; 24
      00026D 30                     757 	.db #0x30	; 48	'0'
      00026E 60                     758 	.db #0x60	; 96
      00026F 00                     759 	.db #0x00	; 0
      000270 78                     760 	.db #0x78	; 120	'x'
      000271 CC                     761 	.db #0xcc	; 204
      000272 0C                     762 	.db #0x0c	; 12
      000273 18                     763 	.db #0x18	; 24
      000274 30                     764 	.db #0x30	; 48	'0'
      000275 00                     765 	.db #0x00	; 0
      000276 30                     766 	.db #0x30	; 48	'0'
      000277 00                     767 	.db #0x00	; 0
      000278 7C                     768 	.db #0x7c	; 124
      000279 C6                     769 	.db #0xc6	; 198
      00027A DE                     770 	.db #0xde	; 222
      00027B DE                     771 	.db #0xde	; 222
      00027C DE                     772 	.db #0xde	; 222
      00027D C0                     773 	.db #0xc0	; 192
      00027E 78                     774 	.db #0x78	; 120	'x'
      00027F 00                     775 	.db #0x00	; 0
      000280 30                     776 	.db #0x30	; 48	'0'
      000281 78                     777 	.db #0x78	; 120	'x'
      000282 CC                     778 	.db #0xcc	; 204
      000283 CC                     779 	.db #0xcc	; 204
      000284 FC                     780 	.db #0xfc	; 252
      000285 CC                     781 	.db #0xcc	; 204
      000286 CC                     782 	.db #0xcc	; 204
      000287 00                     783 	.db #0x00	; 0
      000288 FC                     784 	.db #0xfc	; 252
      000289 66                     785 	.db #0x66	; 102	'f'
      00028A 66                     786 	.db #0x66	; 102	'f'
      00028B 7C                     787 	.db #0x7c	; 124
      00028C 66                     788 	.db #0x66	; 102	'f'
      00028D 66                     789 	.db #0x66	; 102	'f'
      00028E FC                     790 	.db #0xfc	; 252
      00028F 00                     791 	.db #0x00	; 0
      000290 3C                     792 	.db #0x3c	; 60
      000291 66                     793 	.db #0x66	; 102	'f'
      000292 C0                     794 	.db #0xc0	; 192
      000293 C0                     795 	.db #0xc0	; 192
      000294 C0                     796 	.db #0xc0	; 192
      000295 66                     797 	.db #0x66	; 102	'f'
      000296 3C                     798 	.db #0x3c	; 60
      000297 00                     799 	.db #0x00	; 0
      000298 F8                     800 	.db #0xf8	; 248
      000299 6C                     801 	.db #0x6c	; 108	'l'
      00029A 66                     802 	.db #0x66	; 102	'f'
      00029B 66                     803 	.db #0x66	; 102	'f'
      00029C 66                     804 	.db #0x66	; 102	'f'
      00029D 6C                     805 	.db #0x6c	; 108	'l'
      00029E F8                     806 	.db #0xf8	; 248
      00029F 00                     807 	.db #0x00	; 0
      0002A0 FE                     808 	.db #0xfe	; 254
      0002A1 62                     809 	.db #0x62	; 98	'b'
      0002A2 68                     810 	.db #0x68	; 104	'h'
      0002A3 78                     811 	.db #0x78	; 120	'x'
      0002A4 68                     812 	.db #0x68	; 104	'h'
      0002A5 62                     813 	.db #0x62	; 98	'b'
      0002A6 FE                     814 	.db #0xfe	; 254
      0002A7 00                     815 	.db #0x00	; 0
      0002A8 FE                     816 	.db #0xfe	; 254
      0002A9 62                     817 	.db #0x62	; 98	'b'
      0002AA 68                     818 	.db #0x68	; 104	'h'
      0002AB 78                     819 	.db #0x78	; 120	'x'
      0002AC 68                     820 	.db #0x68	; 104	'h'
      0002AD 60                     821 	.db #0x60	; 96
      0002AE F0                     822 	.db #0xf0	; 240
      0002AF 00                     823 	.db #0x00	; 0
      0002B0 3C                     824 	.db #0x3c	; 60
      0002B1 66                     825 	.db #0x66	; 102	'f'
      0002B2 C0                     826 	.db #0xc0	; 192
      0002B3 C0                     827 	.db #0xc0	; 192
      0002B4 CE                     828 	.db #0xce	; 206
      0002B5 66                     829 	.db #0x66	; 102	'f'
      0002B6 3E                     830 	.db #0x3e	; 62
      0002B7 00                     831 	.db #0x00	; 0
      0002B8 CC                     832 	.db #0xcc	; 204
      0002B9 CC                     833 	.db #0xcc	; 204
      0002BA CC                     834 	.db #0xcc	; 204
      0002BB FC                     835 	.db #0xfc	; 252
      0002BC CC                     836 	.db #0xcc	; 204
      0002BD CC                     837 	.db #0xcc	; 204
      0002BE CC                     838 	.db #0xcc	; 204
      0002BF 00                     839 	.db #0x00	; 0
      0002C0 78                     840 	.db #0x78	; 120	'x'
      0002C1 30                     841 	.db #0x30	; 48	'0'
      0002C2 30                     842 	.db #0x30	; 48	'0'
      0002C3 30                     843 	.db #0x30	; 48	'0'
      0002C4 30                     844 	.db #0x30	; 48	'0'
      0002C5 30                     845 	.db #0x30	; 48	'0'
      0002C6 78                     846 	.db #0x78	; 120	'x'
      0002C7 00                     847 	.db #0x00	; 0
      0002C8 1E                     848 	.db #0x1e	; 30
      0002C9 0C                     849 	.db #0x0c	; 12
      0002CA 0C                     850 	.db #0x0c	; 12
      0002CB 0C                     851 	.db #0x0c	; 12
      0002CC CC                     852 	.db #0xcc	; 204
      0002CD CC                     853 	.db #0xcc	; 204
      0002CE 78                     854 	.db #0x78	; 120	'x'
      0002CF 00                     855 	.db #0x00	; 0
      0002D0 E6                     856 	.db #0xe6	; 230
      0002D1 66                     857 	.db #0x66	; 102	'f'
      0002D2 6C                     858 	.db #0x6c	; 108	'l'
      0002D3 78                     859 	.db #0x78	; 120	'x'
      0002D4 6C                     860 	.db #0x6c	; 108	'l'
      0002D5 66                     861 	.db #0x66	; 102	'f'
      0002D6 E6                     862 	.db #0xe6	; 230
      0002D7 00                     863 	.db #0x00	; 0
      0002D8 F0                     864 	.db #0xf0	; 240
      0002D9 60                     865 	.db #0x60	; 96
      0002DA 60                     866 	.db #0x60	; 96
      0002DB 60                     867 	.db #0x60	; 96
      0002DC 62                     868 	.db #0x62	; 98	'b'
      0002DD 66                     869 	.db #0x66	; 102	'f'
      0002DE FE                     870 	.db #0xfe	; 254
      0002DF 00                     871 	.db #0x00	; 0
      0002E0 C6                     872 	.db #0xc6	; 198
      0002E1 EE                     873 	.db #0xee	; 238
      0002E2 FE                     874 	.db #0xfe	; 254
      0002E3 FE                     875 	.db #0xfe	; 254
      0002E4 D6                     876 	.db #0xd6	; 214
      0002E5 C6                     877 	.db #0xc6	; 198
      0002E6 C6                     878 	.db #0xc6	; 198
      0002E7 00                     879 	.db #0x00	; 0
      0002E8 C6                     880 	.db #0xc6	; 198
      0002E9 E6                     881 	.db #0xe6	; 230
      0002EA F6                     882 	.db #0xf6	; 246
      0002EB DE                     883 	.db #0xde	; 222
      0002EC CE                     884 	.db #0xce	; 206
      0002ED C6                     885 	.db #0xc6	; 198
      0002EE C6                     886 	.db #0xc6	; 198
      0002EF 00                     887 	.db #0x00	; 0
      0002F0 38                     888 	.db #0x38	; 56	'8'
      0002F1 6C                     889 	.db #0x6c	; 108	'l'
      0002F2 C6                     890 	.db #0xc6	; 198
      0002F3 C6                     891 	.db #0xc6	; 198
      0002F4 C6                     892 	.db #0xc6	; 198
      0002F5 6C                     893 	.db #0x6c	; 108	'l'
      0002F6 38                     894 	.db #0x38	; 56	'8'
      0002F7 00                     895 	.db #0x00	; 0
      0002F8 FC                     896 	.db #0xfc	; 252
      0002F9 66                     897 	.db #0x66	; 102	'f'
      0002FA 66                     898 	.db #0x66	; 102	'f'
      0002FB 7C                     899 	.db #0x7c	; 124
      0002FC 60                     900 	.db #0x60	; 96
      0002FD 60                     901 	.db #0x60	; 96
      0002FE F0                     902 	.db #0xf0	; 240
      0002FF 00                     903 	.db #0x00	; 0
      000300 78                     904 	.db #0x78	; 120	'x'
      000301 CC                     905 	.db #0xcc	; 204
      000302 CC                     906 	.db #0xcc	; 204
      000303 CC                     907 	.db #0xcc	; 204
      000304 DC                     908 	.db #0xdc	; 220
      000305 78                     909 	.db #0x78	; 120	'x'
      000306 1C                     910 	.db #0x1c	; 28
      000307 00                     911 	.db #0x00	; 0
      000308 FC                     912 	.db #0xfc	; 252
      000309 66                     913 	.db #0x66	; 102	'f'
      00030A 66                     914 	.db #0x66	; 102	'f'
      00030B 7C                     915 	.db #0x7c	; 124
      00030C 6C                     916 	.db #0x6c	; 108	'l'
      00030D 66                     917 	.db #0x66	; 102	'f'
      00030E E6                     918 	.db #0xe6	; 230
      00030F 00                     919 	.db #0x00	; 0
      000310 78                     920 	.db #0x78	; 120	'x'
      000311 CC                     921 	.db #0xcc	; 204
      000312 E0                     922 	.db #0xe0	; 224
      000313 70                     923 	.db #0x70	; 112	'p'
      000314 1C                     924 	.db #0x1c	; 28
      000315 CC                     925 	.db #0xcc	; 204
      000316 78                     926 	.db #0x78	; 120	'x'
      000317 00                     927 	.db #0x00	; 0
      000318 FC                     928 	.db #0xfc	; 252
      000319 B4                     929 	.db #0xb4	; 180
      00031A 30                     930 	.db #0x30	; 48	'0'
      00031B 30                     931 	.db #0x30	; 48	'0'
      00031C 30                     932 	.db #0x30	; 48	'0'
      00031D 30                     933 	.db #0x30	; 48	'0'
      00031E 78                     934 	.db #0x78	; 120	'x'
      00031F 00                     935 	.db #0x00	; 0
      000320 CC                     936 	.db #0xcc	; 204
      000321 CC                     937 	.db #0xcc	; 204
      000322 CC                     938 	.db #0xcc	; 204
      000323 CC                     939 	.db #0xcc	; 204
      000324 CC                     940 	.db #0xcc	; 204
      000325 CC                     941 	.db #0xcc	; 204
      000326 FC                     942 	.db #0xfc	; 252
      000327 00                     943 	.db #0x00	; 0
      000328 CC                     944 	.db #0xcc	; 204
      000329 CC                     945 	.db #0xcc	; 204
      00032A CC                     946 	.db #0xcc	; 204
      00032B CC                     947 	.db #0xcc	; 204
      00032C CC                     948 	.db #0xcc	; 204
      00032D 78                     949 	.db #0x78	; 120	'x'
      00032E 30                     950 	.db #0x30	; 48	'0'
      00032F 00                     951 	.db #0x00	; 0
      000330 C6                     952 	.db #0xc6	; 198
      000331 C6                     953 	.db #0xc6	; 198
      000332 C6                     954 	.db #0xc6	; 198
      000333 D6                     955 	.db #0xd6	; 214
      000334 FE                     956 	.db #0xfe	; 254
      000335 EE                     957 	.db #0xee	; 238
      000336 C6                     958 	.db #0xc6	; 198
      000337 00                     959 	.db #0x00	; 0
      000338 C6                     960 	.db #0xc6	; 198
      000339 C6                     961 	.db #0xc6	; 198
      00033A 6C                     962 	.db #0x6c	; 108	'l'
      00033B 38                     963 	.db #0x38	; 56	'8'
      00033C 38                     964 	.db #0x38	; 56	'8'
      00033D 6C                     965 	.db #0x6c	; 108	'l'
      00033E C6                     966 	.db #0xc6	; 198
      00033F 00                     967 	.db #0x00	; 0
      000340 CC                     968 	.db #0xcc	; 204
      000341 CC                     969 	.db #0xcc	; 204
      000342 CC                     970 	.db #0xcc	; 204
      000343 78                     971 	.db #0x78	; 120	'x'
      000344 30                     972 	.db #0x30	; 48	'0'
      000345 30                     973 	.db #0x30	; 48	'0'
      000346 78                     974 	.db #0x78	; 120	'x'
      000347 00                     975 	.db #0x00	; 0
      000348 FE                     976 	.db #0xfe	; 254
      000349 C6                     977 	.db #0xc6	; 198
      00034A 8C                     978 	.db #0x8c	; 140
      00034B 18                     979 	.db #0x18	; 24
      00034C 32                     980 	.db #0x32	; 50	'2'
      00034D 66                     981 	.db #0x66	; 102	'f'
      00034E FE                     982 	.db #0xfe	; 254
      00034F 00                     983 	.db #0x00	; 0
      000350 78                     984 	.db #0x78	; 120	'x'
      000351 60                     985 	.db #0x60	; 96
      000352 60                     986 	.db #0x60	; 96
      000353 60                     987 	.db #0x60	; 96
      000354 60                     988 	.db #0x60	; 96
      000355 60                     989 	.db #0x60	; 96
      000356 78                     990 	.db #0x78	; 120	'x'
      000357 00                     991 	.db #0x00	; 0
      000358 C0                     992 	.db #0xc0	; 192
      000359 60                     993 	.db #0x60	; 96
      00035A 30                     994 	.db #0x30	; 48	'0'
      00035B 18                     995 	.db #0x18	; 24
      00035C 0C                     996 	.db #0x0c	; 12
      00035D 06                     997 	.db #0x06	; 6
      00035E 02                     998 	.db #0x02	; 2
      00035F 00                     999 	.db #0x00	; 0
      000360 78                    1000 	.db #0x78	; 120	'x'
      000361 18                    1001 	.db #0x18	; 24
      000362 18                    1002 	.db #0x18	; 24
      000363 18                    1003 	.db #0x18	; 24
      000364 18                    1004 	.db #0x18	; 24
      000365 18                    1005 	.db #0x18	; 24
      000366 78                    1006 	.db #0x78	; 120	'x'
      000367 00                    1007 	.db #0x00	; 0
      000368 10                    1008 	.db #0x10	; 16
      000369 38                    1009 	.db #0x38	; 56	'8'
      00036A 6C                    1010 	.db #0x6c	; 108	'l'
      00036B C6                    1011 	.db #0xc6	; 198
      00036C 00                    1012 	.db #0x00	; 0
      00036D 00                    1013 	.db #0x00	; 0
      00036E 00                    1014 	.db #0x00	; 0
      00036F 00                    1015 	.db #0x00	; 0
      000370 00                    1016 	.db #0x00	; 0
      000371 00                    1017 	.db #0x00	; 0
      000372 00                    1018 	.db #0x00	; 0
      000373 00                    1019 	.db #0x00	; 0
      000374 00                    1020 	.db #0x00	; 0
      000375 00                    1021 	.db #0x00	; 0
      000376 00                    1022 	.db #0x00	; 0
      000377 FF                    1023 	.db #0xff	; 255
      000378 30                    1024 	.db #0x30	; 48	'0'
      000379 30                    1025 	.db #0x30	; 48	'0'
      00037A 18                    1026 	.db #0x18	; 24
      00037B 00                    1027 	.db #0x00	; 0
      00037C 00                    1028 	.db #0x00	; 0
      00037D 00                    1029 	.db #0x00	; 0
      00037E 00                    1030 	.db #0x00	; 0
      00037F 00                    1031 	.db #0x00	; 0
      000380 00                    1032 	.db #0x00	; 0
      000381 00                    1033 	.db #0x00	; 0
      000382 78                    1034 	.db #0x78	; 120	'x'
      000383 0C                    1035 	.db #0x0c	; 12
      000384 7C                    1036 	.db #0x7c	; 124
      000385 CC                    1037 	.db #0xcc	; 204
      000386 76                    1038 	.db #0x76	; 118	'v'
      000387 00                    1039 	.db #0x00	; 0
      000388 E0                    1040 	.db #0xe0	; 224
      000389 60                    1041 	.db #0x60	; 96
      00038A 60                    1042 	.db #0x60	; 96
      00038B 7C                    1043 	.db #0x7c	; 124
      00038C 66                    1044 	.db #0x66	; 102	'f'
      00038D 66                    1045 	.db #0x66	; 102	'f'
      00038E DC                    1046 	.db #0xdc	; 220
      00038F 00                    1047 	.db #0x00	; 0
      000390 00                    1048 	.db #0x00	; 0
      000391 00                    1049 	.db #0x00	; 0
      000392 78                    1050 	.db #0x78	; 120	'x'
      000393 CC                    1051 	.db #0xcc	; 204
      000394 C0                    1052 	.db #0xc0	; 192
      000395 CC                    1053 	.db #0xcc	; 204
      000396 78                    1054 	.db #0x78	; 120	'x'
      000397 00                    1055 	.db #0x00	; 0
      000398 1C                    1056 	.db #0x1c	; 28
      000399 0C                    1057 	.db #0x0c	; 12
      00039A 0C                    1058 	.db #0x0c	; 12
      00039B 7C                    1059 	.db #0x7c	; 124
      00039C CC                    1060 	.db #0xcc	; 204
      00039D CC                    1061 	.db #0xcc	; 204
      00039E 76                    1062 	.db #0x76	; 118	'v'
      00039F 00                    1063 	.db #0x00	; 0
      0003A0 00                    1064 	.db #0x00	; 0
      0003A1 00                    1065 	.db #0x00	; 0
      0003A2 78                    1066 	.db #0x78	; 120	'x'
      0003A3 CC                    1067 	.db #0xcc	; 204
      0003A4 FC                    1068 	.db #0xfc	; 252
      0003A5 C0                    1069 	.db #0xc0	; 192
      0003A6 78                    1070 	.db #0x78	; 120	'x'
      0003A7 00                    1071 	.db #0x00	; 0
      0003A8 38                    1072 	.db #0x38	; 56	'8'
      0003A9 6C                    1073 	.db #0x6c	; 108	'l'
      0003AA 60                    1074 	.db #0x60	; 96
      0003AB F0                    1075 	.db #0xf0	; 240
      0003AC 60                    1076 	.db #0x60	; 96
      0003AD 60                    1077 	.db #0x60	; 96
      0003AE F0                    1078 	.db #0xf0	; 240
      0003AF 00                    1079 	.db #0x00	; 0
      0003B0 00                    1080 	.db #0x00	; 0
      0003B1 00                    1081 	.db #0x00	; 0
      0003B2 76                    1082 	.db #0x76	; 118	'v'
      0003B3 CC                    1083 	.db #0xcc	; 204
      0003B4 CC                    1084 	.db #0xcc	; 204
      0003B5 7C                    1085 	.db #0x7c	; 124
      0003B6 0C                    1086 	.db #0x0c	; 12
      0003B7 F8                    1087 	.db #0xf8	; 248
      0003B8 E0                    1088 	.db #0xe0	; 224
      0003B9 60                    1089 	.db #0x60	; 96
      0003BA 6C                    1090 	.db #0x6c	; 108	'l'
      0003BB 76                    1091 	.db #0x76	; 118	'v'
      0003BC 66                    1092 	.db #0x66	; 102	'f'
      0003BD 66                    1093 	.db #0x66	; 102	'f'
      0003BE E6                    1094 	.db #0xe6	; 230
      0003BF 00                    1095 	.db #0x00	; 0
      0003C0 30                    1096 	.db #0x30	; 48	'0'
      0003C1 00                    1097 	.db #0x00	; 0
      0003C2 70                    1098 	.db #0x70	; 112	'p'
      0003C3 30                    1099 	.db #0x30	; 48	'0'
      0003C4 30                    1100 	.db #0x30	; 48	'0'
      0003C5 30                    1101 	.db #0x30	; 48	'0'
      0003C6 78                    1102 	.db #0x78	; 120	'x'
      0003C7 00                    1103 	.db #0x00	; 0
      0003C8 0C                    1104 	.db #0x0c	; 12
      0003C9 00                    1105 	.db #0x00	; 0
      0003CA 0C                    1106 	.db #0x0c	; 12
      0003CB 0C                    1107 	.db #0x0c	; 12
      0003CC 0C                    1108 	.db #0x0c	; 12
      0003CD CC                    1109 	.db #0xcc	; 204
      0003CE CC                    1110 	.db #0xcc	; 204
      0003CF 78                    1111 	.db #0x78	; 120	'x'
      0003D0 E0                    1112 	.db #0xe0	; 224
      0003D1 60                    1113 	.db #0x60	; 96
      0003D2 66                    1114 	.db #0x66	; 102	'f'
      0003D3 6C                    1115 	.db #0x6c	; 108	'l'
      0003D4 78                    1116 	.db #0x78	; 120	'x'
      0003D5 6C                    1117 	.db #0x6c	; 108	'l'
      0003D6 E6                    1118 	.db #0xe6	; 230
      0003D7 00                    1119 	.db #0x00	; 0
      0003D8 70                    1120 	.db #0x70	; 112	'p'
      0003D9 30                    1121 	.db #0x30	; 48	'0'
      0003DA 30                    1122 	.db #0x30	; 48	'0'
      0003DB 30                    1123 	.db #0x30	; 48	'0'
      0003DC 30                    1124 	.db #0x30	; 48	'0'
      0003DD 30                    1125 	.db #0x30	; 48	'0'
      0003DE 78                    1126 	.db #0x78	; 120	'x'
      0003DF 00                    1127 	.db #0x00	; 0
      0003E0 00                    1128 	.db #0x00	; 0
      0003E1 00                    1129 	.db #0x00	; 0
      0003E2 CC                    1130 	.db #0xcc	; 204
      0003E3 FE                    1131 	.db #0xfe	; 254
      0003E4 FE                    1132 	.db #0xfe	; 254
      0003E5 D6                    1133 	.db #0xd6	; 214
      0003E6 C6                    1134 	.db #0xc6	; 198
      0003E7 00                    1135 	.db #0x00	; 0
      0003E8 00                    1136 	.db #0x00	; 0
      0003E9 00                    1137 	.db #0x00	; 0
      0003EA F8                    1138 	.db #0xf8	; 248
      0003EB CC                    1139 	.db #0xcc	; 204
      0003EC CC                    1140 	.db #0xcc	; 204
      0003ED CC                    1141 	.db #0xcc	; 204
      0003EE CC                    1142 	.db #0xcc	; 204
      0003EF 00                    1143 	.db #0x00	; 0
      0003F0 00                    1144 	.db #0x00	; 0
      0003F1 00                    1145 	.db #0x00	; 0
      0003F2 78                    1146 	.db #0x78	; 120	'x'
      0003F3 CC                    1147 	.db #0xcc	; 204
      0003F4 CC                    1148 	.db #0xcc	; 204
      0003F5 CC                    1149 	.db #0xcc	; 204
      0003F6 78                    1150 	.db #0x78	; 120	'x'
      0003F7 00                    1151 	.db #0x00	; 0
      0003F8 00                    1152 	.db #0x00	; 0
      0003F9 00                    1153 	.db #0x00	; 0
      0003FA DC                    1154 	.db #0xdc	; 220
      0003FB 66                    1155 	.db #0x66	; 102	'f'
      0003FC 66                    1156 	.db #0x66	; 102	'f'
      0003FD 7C                    1157 	.db #0x7c	; 124
      0003FE 60                    1158 	.db #0x60	; 96
      0003FF F0                    1159 	.db #0xf0	; 240
      000400 00                    1160 	.db #0x00	; 0
      000401 00                    1161 	.db #0x00	; 0
      000402 76                    1162 	.db #0x76	; 118	'v'
      000403 CC                    1163 	.db #0xcc	; 204
      000404 CC                    1164 	.db #0xcc	; 204
      000405 7C                    1165 	.db #0x7c	; 124
      000406 0C                    1166 	.db #0x0c	; 12
      000407 1E                    1167 	.db #0x1e	; 30
      000408 00                    1168 	.db #0x00	; 0
      000409 00                    1169 	.db #0x00	; 0
      00040A DC                    1170 	.db #0xdc	; 220
      00040B 76                    1171 	.db #0x76	; 118	'v'
      00040C 66                    1172 	.db #0x66	; 102	'f'
      00040D 60                    1173 	.db #0x60	; 96
      00040E F0                    1174 	.db #0xf0	; 240
      00040F 00                    1175 	.db #0x00	; 0
      000410 00                    1176 	.db #0x00	; 0
      000411 00                    1177 	.db #0x00	; 0
      000412 7C                    1178 	.db #0x7c	; 124
      000413 C0                    1179 	.db #0xc0	; 192
      000414 78                    1180 	.db #0x78	; 120	'x'
      000415 0C                    1181 	.db #0x0c	; 12
      000416 F8                    1182 	.db #0xf8	; 248
      000417 00                    1183 	.db #0x00	; 0
      000418 10                    1184 	.db #0x10	; 16
      000419 30                    1185 	.db #0x30	; 48	'0'
      00041A 7C                    1186 	.db #0x7c	; 124
      00041B 30                    1187 	.db #0x30	; 48	'0'
      00041C 30                    1188 	.db #0x30	; 48	'0'
      00041D 34                    1189 	.db #0x34	; 52	'4'
      00041E 18                    1190 	.db #0x18	; 24
      00041F 00                    1191 	.db #0x00	; 0
      000420 00                    1192 	.db #0x00	; 0
      000421 00                    1193 	.db #0x00	; 0
      000422 CC                    1194 	.db #0xcc	; 204
      000423 CC                    1195 	.db #0xcc	; 204
      000424 CC                    1196 	.db #0xcc	; 204
      000425 CC                    1197 	.db #0xcc	; 204
      000426 76                    1198 	.db #0x76	; 118	'v'
      000427 00                    1199 	.db #0x00	; 0
      000428 00                    1200 	.db #0x00	; 0
      000429 00                    1201 	.db #0x00	; 0
      00042A CC                    1202 	.db #0xcc	; 204
      00042B CC                    1203 	.db #0xcc	; 204
      00042C CC                    1204 	.db #0xcc	; 204
      00042D 78                    1205 	.db #0x78	; 120	'x'
      00042E 30                    1206 	.db #0x30	; 48	'0'
      00042F 00                    1207 	.db #0x00	; 0
      000430 00                    1208 	.db #0x00	; 0
      000431 00                    1209 	.db #0x00	; 0
      000432 C6                    1210 	.db #0xc6	; 198
      000433 D6                    1211 	.db #0xd6	; 214
      000434 FE                    1212 	.db #0xfe	; 254
      000435 FE                    1213 	.db #0xfe	; 254
      000436 6C                    1214 	.db #0x6c	; 108	'l'
      000437 00                    1215 	.db #0x00	; 0
      000438 00                    1216 	.db #0x00	; 0
      000439 00                    1217 	.db #0x00	; 0
      00043A C6                    1218 	.db #0xc6	; 198
      00043B 6C                    1219 	.db #0x6c	; 108	'l'
      00043C 38                    1220 	.db #0x38	; 56	'8'
      00043D 6C                    1221 	.db #0x6c	; 108	'l'
      00043E C6                    1222 	.db #0xc6	; 198
      00043F 00                    1223 	.db #0x00	; 0
      000440 00                    1224 	.db #0x00	; 0
      000441 00                    1225 	.db #0x00	; 0
      000442 CC                    1226 	.db #0xcc	; 204
      000443 CC                    1227 	.db #0xcc	; 204
      000444 CC                    1228 	.db #0xcc	; 204
      000445 7C                    1229 	.db #0x7c	; 124
      000446 0C                    1230 	.db #0x0c	; 12
      000447 F8                    1231 	.db #0xf8	; 248
      000448 00                    1232 	.db #0x00	; 0
      000449 00                    1233 	.db #0x00	; 0
      00044A FC                    1234 	.db #0xfc	; 252
      00044B 98                    1235 	.db #0x98	; 152
      00044C 30                    1236 	.db #0x30	; 48	'0'
      00044D 64                    1237 	.db #0x64	; 100	'd'
      00044E FC                    1238 	.db #0xfc	; 252
      00044F 00                    1239 	.db #0x00	; 0
      000450 1C                    1240 	.db #0x1c	; 28
      000451 30                    1241 	.db #0x30	; 48	'0'
      000452 30                    1242 	.db #0x30	; 48	'0'
      000453 E0                    1243 	.db #0xe0	; 224
      000454 30                    1244 	.db #0x30	; 48	'0'
      000455 30                    1245 	.db #0x30	; 48	'0'
      000456 1C                    1246 	.db #0x1c	; 28
      000457 00                    1247 	.db #0x00	; 0
      000458 18                    1248 	.db #0x18	; 24
      000459 18                    1249 	.db #0x18	; 24
      00045A 18                    1250 	.db #0x18	; 24
      00045B 00                    1251 	.db #0x00	; 0
      00045C 18                    1252 	.db #0x18	; 24
      00045D 18                    1253 	.db #0x18	; 24
      00045E 18                    1254 	.db #0x18	; 24
      00045F 00                    1255 	.db #0x00	; 0
      000460 E0                    1256 	.db #0xe0	; 224
      000461 30                    1257 	.db #0x30	; 48	'0'
      000462 30                    1258 	.db #0x30	; 48	'0'
      000463 1C                    1259 	.db #0x1c	; 28
      000464 30                    1260 	.db #0x30	; 48	'0'
      000465 30                    1261 	.db #0x30	; 48	'0'
      000466 E0                    1262 	.db #0xe0	; 224
      000467 00                    1263 	.db #0x00	; 0
      000468 76                    1264 	.db #0x76	; 118	'v'
      000469 DC                    1265 	.db #0xdc	; 220
      00046A 00                    1266 	.db #0x00	; 0
      00046B 00                    1267 	.db #0x00	; 0
      00046C 00                    1268 	.db #0x00	; 0
      00046D 00                    1269 	.db #0x00	; 0
      00046E 00                    1270 	.db #0x00	; 0
      00046F 00                    1271 	.db #0x00	; 0
      000470 00                    1272 	.db #0x00	; 0
      000471 10                    1273 	.db #0x10	; 16
      000472 38                    1274 	.db #0x38	; 56	'8'
      000473 6C                    1275 	.db #0x6c	; 108	'l'
      000474 C6                    1276 	.db #0xc6	; 198
      000475 C6                    1277 	.db #0xc6	; 198
      000476 FE                    1278 	.db #0xfe	; 254
      000477 00                    1279 	.db #0x00	; 0
      000478                       1280 _pattern_black_0:
      000478 FF                    1281 	.db #0xff	; 255
      000479 FF                    1282 	.db #0xff	; 255
      00047A FF                    1283 	.db #0xff	; 255
      00047B FF                    1284 	.db #0xff	; 255
      00047C FF                    1285 	.db #0xff	; 255
      00047D FF                    1286 	.db #0xff	; 255
      00047E FF                    1287 	.db #0xff	; 255
      00047F FF                    1288 	.db #0xff	; 255
      000480                       1289 _pattern_black_1:
      000480 FE                    1290 	.db #0xfe	; 254
      000481 FF                    1291 	.db #0xff	; 255
      000482 FF                    1292 	.db #0xff	; 255
      000483 FF                    1293 	.db #0xff	; 255
      000484 FE                    1294 	.db #0xfe	; 254
      000485 FF                    1295 	.db #0xff	; 255
      000486 FF                    1296 	.db #0xff	; 255
      000487 FE                    1297 	.db #0xfe	; 254
      000488                       1298 _pattern_black_2:
      000488 FF                    1299 	.db #0xff	; 255
      000489 FF                    1300 	.db #0xff	; 255
      00048A FF                    1301 	.db #0xff	; 255
      00048B FF                    1302 	.db #0xff	; 255
      00048C FF                    1303 	.db #0xff	; 255
      00048D FB                    1304 	.db #0xfb	; 251
      00048E FF                    1305 	.db #0xff	; 255
      00048F BB                    1306 	.db #0xbb	; 187
      000490                       1307 _pattern_black_3:
      000490 FB                    1308 	.db #0xfb	; 251
      000491 FE                    1309 	.db #0xfe	; 254
      000492 FD                    1310 	.db #0xfd	; 253
      000493 FE                    1311 	.db #0xfe	; 254
      000494 F7                    1312 	.db #0xf7	; 247
      000495 FA                    1313 	.db #0xfa	; 250
      000496 AF                    1314 	.db #0xaf	; 175
      000497 55                    1315 	.db #0x55	; 85	'U'
      000498                       1316 _pattern_0:
      000498 9F                    1317 	.db #0x9f	; 159
      000499 90                    1318 	.db #0x90	; 144
      00049A 90                    1319 	.db #0x90	; 144
      00049B 93                    1320 	.db #0x93	; 147
      00049C 92                    1321 	.db #0x92	; 146
      00049D 92                    1322 	.db #0x92	; 146
      00049E 92                    1323 	.db #0x92	; 146
      00049F 92                    1324 	.db #0x92	; 146
      0004A0                       1325 _pattern_1:
      0004A0 FF                    1326 	.db #0xff	; 255
      0004A1 01                    1327 	.db #0x01	; 1
      0004A2 01                    1328 	.db #0x01	; 1
      0004A3 F9                    1329 	.db #0xf9	; 249
      0004A4 09                    1330 	.db #0x09	; 9
      0004A5 09                    1331 	.db #0x09	; 9
      0004A6 49                    1332 	.db #0x49	; 73	'I'
      0004A7 49                    1333 	.db #0x49	; 73	'I'
      0004A8                       1334 _pattern_2:
      0004A8 92                    1335 	.db #0x92	; 146
      0004A9 93                    1336 	.db #0x93	; 147
      0004AA 90                    1337 	.db #0x90	; 144
      0004AB 90                    1338 	.db #0x90	; 144
      0004AC 9F                    1339 	.db #0x9f	; 159
      0004AD 80                    1340 	.db #0x80	; 128
      0004AE 80                    1341 	.db #0x80	; 128
      0004AF FF                    1342 	.db #0xff	; 255
      0004B0                       1343 _pattern_3:
      0004B0 49                    1344 	.db #0x49	; 73	'I'
      0004B1 C9                    1345 	.db #0xc9	; 201
      0004B2 09                    1346 	.db #0x09	; 9
      0004B3 09                    1347 	.db #0x09	; 9
      0004B4 F9                    1348 	.db #0xf9	; 249
      0004B5 01                    1349 	.db #0x01	; 1
      0004B6 01                    1350 	.db #0x01	; 1
      0004B7 FF                    1351 	.db #0xff	; 255
      0004B8                       1352 _pattern_4:
      0004B8 7F                    1353 	.db #0x7f	; 127
      0004B9 81                    1354 	.db #0x81	; 129
      0004BA 83                    1355 	.db #0x83	; 131
      0004BB 87                    1356 	.db #0x87	; 135
      0004BC 8F                    1357 	.db #0x8f	; 143
      0004BD 9F                    1358 	.db #0x9f	; 159
      0004BE BF                    1359 	.db #0xbf	; 191
      0004BF FF                    1360 	.db #0xff	; 255
      0004C0                       1361 _pattern_5:
      0004C0 FE                    1362 	.db #0xfe	; 254
      0004C1 81                    1363 	.db #0x81	; 129
      0004C2 C1                    1364 	.db #0xc1	; 193
      0004C3 E1                    1365 	.db #0xe1	; 225
      0004C4 F1                    1366 	.db #0xf1	; 241
      0004C5 F9                    1367 	.db #0xf9	; 249
      0004C6 FD                    1368 	.db #0xfd	; 253
      0004C7 FF                    1369 	.db #0xff	; 255
      0004C8                       1370 _pattern_6:
      0004C8 FF                    1371 	.db #0xff	; 255
      0004C9 BF                    1372 	.db #0xbf	; 191
      0004CA 9F                    1373 	.db #0x9f	; 159
      0004CB 8F                    1374 	.db #0x8f	; 143
      0004CC 87                    1375 	.db #0x87	; 135
      0004CD 83                    1376 	.db #0x83	; 131
      0004CE 81                    1377 	.db #0x81	; 129
      0004CF 7F                    1378 	.db #0x7f	; 127
      0004D0                       1379 _pattern_7:
      0004D0 FF                    1380 	.db #0xff	; 255
      0004D1 FD                    1381 	.db #0xfd	; 253
      0004D2 F9                    1382 	.db #0xf9	; 249
      0004D3 F1                    1383 	.db #0xf1	; 241
      0004D4 E1                    1384 	.db #0xe1	; 225
      0004D5 C1                    1385 	.db #0xc1	; 193
      0004D6 81                    1386 	.db #0x81	; 129
      0004D7 FE                    1387 	.db #0xfe	; 254
      0004D8                       1388 _pattern_8:
      0004D8 7F                    1389 	.db #0x7f	; 127
      0004D9 AE                    1390 	.db #0xae	; 174
      0004DA FF                    1391 	.db #0xff	; 255
      0004DB 5B                    1392 	.db #0x5b	; 91
      0004DC FF                    1393 	.db #0xff	; 255
      0004DD AE                    1394 	.db #0xae	; 174
      0004DE FF                    1395 	.db #0xff	; 255
      0004DF DF                    1396 	.db #0xdf	; 223
      0004E0                       1397 _pattern_9:
      0004E0 FE                    1398 	.db #0xfe	; 254
      0004E1 BD                    1399 	.db #0xbd	; 189
      0004E2 DF                    1400 	.db #0xdf	; 223
      0004E3 7F                    1401 	.db #0x7f	; 127
      0004E4 FB                    1402 	.db #0xfb	; 251
      0004E5 DF                    1403 	.db #0xdf	; 223
      0004E6 FE                    1404 	.db #0xfe	; 254
      0004E7 EF                    1405 	.db #0xef	; 239
      0004E8                       1406 _pattern_10:
      0004E8 7F                    1407 	.db #0x7f	; 127
      0004E9 FF                    1408 	.db #0xff	; 255
      0004EA ED                    1409 	.db #0xed	; 237
      0004EB FF                    1410 	.db #0xff	; 255
      0004EC B6                    1411 	.db #0xb6	; 182
      0004ED FE                    1412 	.db #0xfe	; 254
      0004EE DB                    1413 	.db #0xdb	; 219
      0004EF 7D                    1414 	.db #0x7d	; 125
      0004F0                       1415 _pattern_11:
      0004F0 FE                    1416 	.db #0xfe	; 254
      0004F1 FF                    1417 	.db #0xff	; 255
      0004F2 FE                    1418 	.db #0xfe	; 254
      0004F3 77                    1419 	.db #0x77	; 119	'w'
      0004F4 FE                    1420 	.db #0xfe	; 254
      0004F5 DD                    1421 	.db #0xdd	; 221
      0004F6 EF                    1422 	.db #0xef	; 239
      0004F7 5A                    1423 	.db #0x5a	; 90	'Z'
      0004F8                       1424 _pattern_12:
      0004F8 7F                    1425 	.db #0x7f	; 127
      0004F9 D5                    1426 	.db #0xd5	; 213
      0004FA BF                    1427 	.db #0xbf	; 191
      0004FB ED                    1428 	.db #0xed	; 237
      0004FC BF                    1429 	.db #0xbf	; 191
      0004FD F5                    1430 	.db #0xf5	; 245
      0004FE BF                    1431 	.db #0xbf	; 191
      0004FF FF                    1432 	.db #0xff	; 255
      000500                       1433 _pattern_13:
      000500 FE                    1434 	.db #0xfe	; 254
      000501 5F                    1435 	.db #0x5f	; 95
      000502 F5                    1436 	.db #0xf5	; 245
      000503 DF                    1437 	.db #0xdf	; 223
      000504 FF                    1438 	.db #0xff	; 255
      000505 FF                    1439 	.db #0xff	; 255
      000506 FF                    1440 	.db #0xff	; 255
      000507 FF                    1441 	.db #0xff	; 255
      000508                       1442 _pattern_14:
      000508 EF                    1443 	.db #0xef	; 239
      000509 BF                    1444 	.db #0xbf	; 191
      00050A 7F                    1445 	.db #0x7f	; 127
      00050B FF                    1446 	.db #0xff	; 255
      00050C FF                    1447 	.db #0xff	; 255
      00050D FF                    1448 	.db #0xff	; 255
      00050E DB                    1449 	.db #0xdb	; 219
      00050F 7F                    1450 	.db #0x7f	; 127
      000510                       1451 _pattern_15:
      000510 FF                    1452 	.db #0xff	; 255
      000511 FD                    1453 	.db #0xfd	; 253
      000512 FF                    1454 	.db #0xff	; 255
      000513 DB                    1455 	.db #0xdb	; 219
      000514 FD                    1456 	.db #0xfd	; 253
      000515 7B                    1457 	.db #0x7b	; 123
      000516 D7                    1458 	.db #0xd7	; 215
      000517 FE                    1459 	.db #0xfe	; 254
      000518                       1460 _pattern_16:
      000518 7F                    1461 	.db #0x7f	; 127
      000519 FF                    1462 	.db #0xff	; 255
      00051A EA                    1463 	.db #0xea	; 234
      00051B DF                    1464 	.db #0xdf	; 223
      00051C FF                    1465 	.db #0xff	; 255
      00051D DF                    1466 	.db #0xdf	; 223
      00051E FF                    1467 	.db #0xff	; 255
      00051F DF                    1468 	.db #0xdf	; 223
      000520                       1469 _pattern_17:
      000520 FE                    1470 	.db #0xfe	; 254
      000521 FF                    1471 	.db #0xff	; 255
      000522 AF                    1472 	.db #0xaf	; 175
      000523 FA                    1473 	.db #0xfa	; 250
      000524 FF                    1474 	.db #0xff	; 255
      000525 FA                    1475 	.db #0xfa	; 250
      000526 FF                    1476 	.db #0xff	; 255
      000527 FA                    1477 	.db #0xfa	; 250
      000528                       1478 _pattern_18:
      000528 FF                    1479 	.db #0xff	; 255
      000529 DF                    1480 	.db #0xdf	; 223
      00052A FF                    1481 	.db #0xff	; 255
      00052B DF                    1482 	.db #0xdf	; 223
      00052C FF                    1483 	.db #0xff	; 255
      00052D EA                    1484 	.db #0xea	; 234
      00052E FF                    1485 	.db #0xff	; 255
      00052F 55                    1486 	.db #0x55	; 85	'U'
      000530                       1487 _pattern_19:
      000530 FF                    1488 	.db #0xff	; 255
      000531 FA                    1489 	.db #0xfa	; 250
      000532 FF                    1490 	.db #0xff	; 255
      000533 FA                    1491 	.db #0xfa	; 250
      000534 F7                    1492 	.db #0xf7	; 247
      000535 AA                    1493 	.db #0xaa	; 170
      000536 FF                    1494 	.db #0xff	; 255
      000537 56                    1495 	.db #0x56	; 86	'V'
      000538                       1496 _pattern_20:
      000538 3F                    1497 	.db #0x3f	; 63
      000539 7F                    1498 	.db #0x7f	; 127
      00053A E0                    1499 	.db #0xe0	; 224
      00053B CE                    1500 	.db #0xce	; 206
      00053C E6                    1501 	.db #0xe6	; 230
      00053D 7C                    1502 	.db #0x7c	; 124
      00053E 39                    1503 	.db #0x39	; 57	'9'
      00053F 03                    1504 	.db #0x03	; 3
      000540                       1505 _pattern_21:
      000540 FF                    1506 	.db #0xff	; 255
      000541 FF                    1507 	.db #0xff	; 255
      000542 00                    1508 	.db #0x00	; 0
      000543 DB                    1509 	.db #0xdb	; 219
      000544 DB                    1510 	.db #0xdb	; 219
      000545 00                    1511 	.db #0x00	; 0
      000546 FF                    1512 	.db #0xff	; 255
      000547 FF                    1513 	.db #0xff	; 255
      000548                       1514 _pattern_22:
      000548 FC                    1515 	.db #0xfc	; 252
      000549 FE                    1516 	.db #0xfe	; 254
      00054A 07                    1517 	.db #0x07	; 7
      00054B 73                    1518 	.db #0x73	; 115	's'
      00054C 67                    1519 	.db #0x67	; 103	'g'
      00054D 3E                    1520 	.db #0x3e	; 62
      00054E 9C                    1521 	.db #0x9c	; 156
      00054F C0                    1522 	.db #0xc0	; 192
      000550                       1523 _pattern_23:
      000550 06                    1524 	.db #0x06	; 6
      000551 00                    1525 	.db #0x00	; 0
      000552 03                    1526 	.db #0x03	; 3
      000553 04                    1527 	.db #0x04	; 4
      000554 05                    1528 	.db #0x05	; 5
      000555 05                    1529 	.db #0x05	; 5
      000556 05                    1530 	.db #0x05	; 5
      000557 05                    1531 	.db #0x05	; 5
      000558                       1532 _pattern_24:
      000558 00                    1533 	.db #0x00	; 0
      000559 00                    1534 	.db #0x00	; 0
      00055A 33                    1535 	.db #0x33	; 51	'3'
      00055B 44                    1536 	.db #0x44	; 68	'D'
      00055C 55                    1537 	.db #0x55	; 85	'U'
      00055D 55                    1538 	.db #0x55	; 85	'U'
      00055E 55                    1539 	.db #0x55	; 85	'U'
      00055F 55                    1540 	.db #0x55	; 85	'U'
      000560                       1541 _pattern_25:
      000560 60                    1542 	.db #0x60	; 96
      000561 00                    1543 	.db #0x00	; 0
      000562 40                    1544 	.db #0x40	; 64
      000563 20                    1545 	.db #0x20	; 32
      000564 20                    1546 	.db #0x20	; 32
      000565 20                    1547 	.db #0x20	; 32
      000566 20                    1548 	.db #0x20	; 32
      000567 20                    1549 	.db #0x20	; 32
      000568                       1550 _pattern_26:
      000568 05                    1551 	.db #0x05	; 5
      000569 05                    1552 	.db #0x05	; 5
      00056A 05                    1553 	.db #0x05	; 5
      00056B 05                    1554 	.db #0x05	; 5
      00056C 05                    1555 	.db #0x05	; 5
      00056D 05                    1556 	.db #0x05	; 5
      00056E 05                    1557 	.db #0x05	; 5
      00056F 05                    1558 	.db #0x05	; 5
      000570                       1559 _pattern_27:
      000570 55                    1560 	.db #0x55	; 85	'U'
      000571 55                    1561 	.db #0x55	; 85	'U'
      000572 55                    1562 	.db #0x55	; 85	'U'
      000573 55                    1563 	.db #0x55	; 85	'U'
      000574 55                    1564 	.db #0x55	; 85	'U'
      000575 55                    1565 	.db #0x55	; 85	'U'
      000576 55                    1566 	.db #0x55	; 85	'U'
      000577 55                    1567 	.db #0x55	; 85	'U'
      000578                       1568 _pattern_28:
      000578 20                    1569 	.db #0x20	; 32
      000579 20                    1570 	.db #0x20	; 32
      00057A 20                    1571 	.db #0x20	; 32
      00057B 20                    1572 	.db #0x20	; 32
      00057C 20                    1573 	.db #0x20	; 32
      00057D 20                    1574 	.db #0x20	; 32
      00057E 20                    1575 	.db #0x20	; 32
      00057F 20                    1576 	.db #0x20	; 32
      000580                       1577 _pattern_29:
      000580 05                    1578 	.db #0x05	; 5
      000581 05                    1579 	.db #0x05	; 5
      000582 07                    1580 	.db #0x07	; 7
      000583 07                    1581 	.db #0x07	; 7
      000584 07                    1582 	.db #0x07	; 7
      000585 05                    1583 	.db #0x05	; 5
      000586 05                    1584 	.db #0x05	; 5
      000587 05                    1585 	.db #0x05	; 5
      000588                       1586 _pattern_30:
      000588 55                    1587 	.db #0x55	; 85	'U'
      000589 55                    1588 	.db #0x55	; 85	'U'
      00058A FF                    1589 	.db #0xff	; 255
      00058B FF                    1590 	.db #0xff	; 255
      00058C FF                    1591 	.db #0xff	; 255
      00058D 55                    1592 	.db #0x55	; 85	'U'
      00058E 55                    1593 	.db #0x55	; 85	'U'
      00058F 55                    1594 	.db #0x55	; 85	'U'
      000590                       1595 _pattern_31:
      000590 20                    1596 	.db #0x20	; 32
      000591 20                    1597 	.db #0x20	; 32
      000592 E0                    1598 	.db #0xe0	; 224
      000593 E0                    1599 	.db #0xe0	; 224
      000594 E0                    1600 	.db #0xe0	; 224
      000595 20                    1601 	.db #0x20	; 32
      000596 20                    1602 	.db #0x20	; 32
      000597 20                    1603 	.db #0x20	; 32
      000598                       1604 _pattern_37:
      000598 05                    1605 	.db #0x05	; 5
      000599 05                    1606 	.db #0x05	; 5
      00059A 05                    1607 	.db #0x05	; 5
      00059B 05                    1608 	.db #0x05	; 5
      00059C 04                    1609 	.db #0x04	; 4
      00059D 03                    1610 	.db #0x03	; 3
      00059E 00                    1611 	.db #0x00	; 0
      00059F 06                    1612 	.db #0x06	; 6
      0005A0                       1613 _pattern_38:
      0005A0 55                    1614 	.db #0x55	; 85	'U'
      0005A1 55                    1615 	.db #0x55	; 85	'U'
      0005A2 55                    1616 	.db #0x55	; 85	'U'
      0005A3 55                    1617 	.db #0x55	; 85	'U'
      0005A4 44                    1618 	.db #0x44	; 68	'D'
      0005A5 33                    1619 	.db #0x33	; 51	'3'
      0005A6 00                    1620 	.db #0x00	; 0
      0005A7 00                    1621 	.db #0x00	; 0
      0005A8                       1622 _pattern_39:
      0005A8 20                    1623 	.db #0x20	; 32
      0005A9 20                    1624 	.db #0x20	; 32
      0005AA 20                    1625 	.db #0x20	; 32
      0005AB 20                    1626 	.db #0x20	; 32
      0005AC 20                    1627 	.db #0x20	; 32
      0005AD 40                    1628 	.db #0x40	; 64
      0005AE 00                    1629 	.db #0x00	; 0
      0005AF 60                    1630 	.db #0x60	; 96
      0005B0                       1631 _pattern_32:
      0005B0 03                    1632 	.db #0x03	; 3
      0005B1 39                    1633 	.db #0x39	; 57	'9'
      0005B2 7C                    1634 	.db #0x7c	; 124
      0005B3 E6                    1635 	.db #0xe6	; 230
      0005B4 CE                    1636 	.db #0xce	; 206
      0005B5 E0                    1637 	.db #0xe0	; 224
      0005B6 7F                    1638 	.db #0x7f	; 127
      0005B7 3F                    1639 	.db #0x3f	; 63
      0005B8                       1640 _pattern_33:
      0005B8 FF                    1641 	.db #0xff	; 255
      0005B9 FF                    1642 	.db #0xff	; 255
      0005BA 00                    1643 	.db #0x00	; 0
      0005BB DB                    1644 	.db #0xdb	; 219
      0005BC DB                    1645 	.db #0xdb	; 219
      0005BD 00                    1646 	.db #0x00	; 0
      0005BE FF                    1647 	.db #0xff	; 255
      0005BF FF                    1648 	.db #0xff	; 255
      0005C0                       1649 _pattern_34:
      0005C0 C0                    1650 	.db #0xc0	; 192
      0005C1 9C                    1651 	.db #0x9c	; 156
      0005C2 3E                    1652 	.db #0x3e	; 62
      0005C3 67                    1653 	.db #0x67	; 103	'g'
      0005C4 73                    1654 	.db #0x73	; 115	's'
      0005C5 07                    1655 	.db #0x07	; 7
      0005C6 FE                    1656 	.db #0xfe	; 254
      0005C7 FC                    1657 	.db #0xfc	; 252
      0005C8                       1658 _sprite_dust_0:
      0005C8 10                    1659 	.db #0x10	; 16
      0005C9 42                    1660 	.db #0x42	; 66	'B'
      0005CA 10                    1661 	.db #0x10	; 16
      0005CB 45                    1662 	.db #0x45	; 69	'E'
      0005CC 20                    1663 	.db #0x20	; 32
      0005CD 89                    1664 	.db #0x89	; 137
      0005CE 20                    1665 	.db #0x20	; 32
      0005CF 88                    1666 	.db #0x88	; 136
      0005D0                       1667 _sprite_dust_1:
      0005D0 10                    1668 	.db #0x10	; 16
      0005D1 42                    1669 	.db #0x42	; 66	'B'
      0005D2 00                    1670 	.db #0x00	; 0
      0005D3 04                    1671 	.db #0x04	; 4
      0005D4 20                    1672 	.db #0x20	; 32
      0005D5 81                    1673 	.db #0x81	; 129
      0005D6 20                    1674 	.db #0x20	; 32
      0005D7 08                    1675 	.db #0x08	; 8
      0005D8                       1676 _sprite_dust_2:
      0005D8 10                    1677 	.db #0x10	; 16
      0005D9 00                    1678 	.db #0x00	; 0
      0005DA 00                    1679 	.db #0x00	; 0
      0005DB 04                    1680 	.db #0x04	; 4
      0005DC 20                    1681 	.db #0x20	; 32
      0005DD 80                    1682 	.db #0x80	; 128
      0005DE 20                    1683 	.db #0x20	; 32
      0005DF 00                    1684 	.db #0x00	; 0
      0005E0                       1685 _sprite_dust_3:
      0005E0 10                    1686 	.db #0x10	; 16
      0005E1 00                    1687 	.db #0x00	; 0
      0005E2 00                    1688 	.db #0x00	; 0
      0005E3 04                    1689 	.db #0x04	; 4
      0005E4 00                    1690 	.db #0x00	; 0
      0005E5 00                    1691 	.db #0x00	; 0
      0005E6 20                    1692 	.db #0x20	; 32
      0005E7 00                    1693 	.db #0x00	; 0
      0005E8                       1694 _pattern_title:
      0005E8 FE                    1695 	.db #0xfe	; 254
      0005E9 FE                    1696 	.db #0xfe	; 254
      0005EA FE                    1697 	.db #0xfe	; 254
      0005EB FE                    1698 	.db #0xfe	; 254
      0005EC FE                    1699 	.db #0xfe	; 254
      0005ED FE                    1700 	.db #0xfe	; 254
      0005EE FE                    1701 	.db #0xfe	; 254
      0005EF 00                    1702 	.db #0x00	; 0
      0005F0                       1703 _color_black_0:
      0005F0 14                    1704 	.db #0x14	; 20
      0005F1 14                    1705 	.db #0x14	; 20
      0005F2 14                    1706 	.db #0x14	; 20
      0005F3 14                    1707 	.db #0x14	; 20
      0005F4 14                    1708 	.db #0x14	; 20
      0005F5 14                    1709 	.db #0x14	; 20
      0005F6 14                    1710 	.db #0x14	; 20
      0005F7 14                    1711 	.db #0x14	; 20
      0005F8                       1712 _color_black_1:
      0005F8 14                    1713 	.db #0x14	; 20
      0005F9 14                    1714 	.db #0x14	; 20
      0005FA 14                    1715 	.db #0x14	; 20
      0005FB 14                    1716 	.db #0x14	; 20
      0005FC 14                    1717 	.db #0x14	; 20
      0005FD 14                    1718 	.db #0x14	; 20
      0005FE 14                    1719 	.db #0x14	; 20
      0005FF 14                    1720 	.db #0x14	; 20
      000600                       1721 _color_black_2:
      000600 14                    1722 	.db #0x14	; 20
      000601 14                    1723 	.db #0x14	; 20
      000602 14                    1724 	.db #0x14	; 20
      000603 14                    1725 	.db #0x14	; 20
      000604 14                    1726 	.db #0x14	; 20
      000605 14                    1727 	.db #0x14	; 20
      000606 14                    1728 	.db #0x14	; 20
      000607 14                    1729 	.db #0x14	; 20
      000608                       1730 _color_black_3:
      000608 14                    1731 	.db #0x14	; 20
      000609 14                    1732 	.db #0x14	; 20
      00060A 14                    1733 	.db #0x14	; 20
      00060B 14                    1734 	.db #0x14	; 20
      00060C 14                    1735 	.db #0x14	; 20
      00060D 14                    1736 	.db #0x14	; 20
      00060E 14                    1737 	.db #0x14	; 20
      00060F 14                    1738 	.db #0x14	; 20
      000610                       1739 _color_0:
      000610 13                    1740 	.db #0x13	; 19
      000611 13                    1741 	.db #0x13	; 19
      000612 13                    1742 	.db #0x13	; 19
      000613 13                    1743 	.db #0x13	; 19
      000614 13                    1744 	.db #0x13	; 19
      000615 13                    1745 	.db #0x13	; 19
      000616 13                    1746 	.db #0x13	; 19
      000617 13                    1747 	.db #0x13	; 19
      000618                       1748 _color_1:
      000618 12                    1749 	.db #0x12	; 18
      000619 12                    1750 	.db #0x12	; 18
      00061A 12                    1751 	.db #0x12	; 18
      00061B 12                    1752 	.db #0x12	; 18
      00061C 12                    1753 	.db #0x12	; 18
      00061D 12                    1754 	.db #0x12	; 18
      00061E 12                    1755 	.db #0x12	; 18
      00061F 12                    1756 	.db #0x12	; 18
      000620                       1757 _color_2:
      000620 12                    1758 	.db #0x12	; 18
      000621 12                    1759 	.db #0x12	; 18
      000622 12                    1760 	.db #0x12	; 18
      000623 12                    1761 	.db #0x12	; 18
      000624 12                    1762 	.db #0x12	; 18
      000625 12                    1763 	.db #0x12	; 18
      000626 12                    1764 	.db #0x12	; 18
      000627 12                    1765 	.db #0x12	; 18
      000628                       1766 _color_3:
      000628 1C                    1767 	.db #0x1c	; 28
      000629 1C                    1768 	.db #0x1c	; 28
      00062A 1C                    1769 	.db #0x1c	; 28
      00062B 1C                    1770 	.db #0x1c	; 28
      00062C 1C                    1771 	.db #0x1c	; 28
      00062D 1C                    1772 	.db #0x1c	; 28
      00062E 1C                    1773 	.db #0x1c	; 28
      00062F 1C                    1774 	.db #0x1c	; 28
      000630                       1775 _color_4:
      000630 96                    1776 	.db #0x96	; 150
      000631 96                    1777 	.db #0x96	; 150
      000632 96                    1778 	.db #0x96	; 150
      000633 96                    1779 	.db #0x96	; 150
      000634 96                    1780 	.db #0x96	; 150
      000635 96                    1781 	.db #0x96	; 150
      000636 96                    1782 	.db #0x96	; 150
      000637 96                    1783 	.db #0x96	; 150
      000638                       1784 _color_5:
      000638 98                    1785 	.db #0x98	; 152
      000639 68                    1786 	.db #0x68	; 104	'h'
      00063A 68                    1787 	.db #0x68	; 104	'h'
      00063B 68                    1788 	.db #0x68	; 104	'h'
      00063C 68                    1789 	.db #0x68	; 104	'h'
      00063D 68                    1790 	.db #0x68	; 104	'h'
      00063E 68                    1791 	.db #0x68	; 104	'h'
      00063F 68                    1792 	.db #0x68	; 104	'h'
      000640                       1793 _color_6:
      000640 68                    1794 	.db #0x68	; 104	'h'
      000641 68                    1795 	.db #0x68	; 104	'h'
      000642 68                    1796 	.db #0x68	; 104	'h'
      000643 68                    1797 	.db #0x68	; 104	'h'
      000644 68                    1798 	.db #0x68	; 104	'h'
      000645 68                    1799 	.db #0x68	; 104	'h'
      000646 68                    1800 	.db #0x68	; 104	'h'
      000647 68                    1801 	.db #0x68	; 104	'h'
      000648                       1802 _color_7:
      000648 89                    1803 	.db #0x89	; 137
      000649 89                    1804 	.db #0x89	; 137
      00064A 89                    1805 	.db #0x89	; 137
      00064B 89                    1806 	.db #0x89	; 137
      00064C 89                    1807 	.db #0x89	; 137
      00064D 89                    1808 	.db #0x89	; 137
      00064E 89                    1809 	.db #0x89	; 137
      00064F 86                    1810 	.db #0x86	; 134
      000650                       1811 _color_8:
      000650 41                    1812 	.db #0x41	; 65	'A'
      000651 47                    1813 	.db #0x47	; 71	'G'
      000652 47                    1814 	.db #0x47	; 71	'G'
      000653 47                    1815 	.db #0x47	; 71	'G'
      000654 47                    1816 	.db #0x47	; 71	'G'
      000655 47                    1817 	.db #0x47	; 71	'G'
      000656 47                    1818 	.db #0x47	; 71	'G'
      000657 47                    1819 	.db #0x47	; 71	'G'
      000658                       1820 _color_9:
      000658 41                    1821 	.db #0x41	; 65	'A'
      000659 45                    1822 	.db #0x45	; 69	'E'
      00065A 47                    1823 	.db #0x47	; 71	'G'
      00065B 47                    1824 	.db #0x47	; 71	'G'
      00065C 45                    1825 	.db #0x45	; 69	'E'
      00065D 45                    1826 	.db #0x45	; 69	'E'
      00065E 41                    1827 	.db #0x41	; 65	'A'
      00065F 45                    1828 	.db #0x45	; 69	'E'
      000660                       1829 _color_10:
      000660 47                    1830 	.db #0x47	; 71	'G'
      000661 45                    1831 	.db #0x45	; 69	'E'
      000662 45                    1832 	.db #0x45	; 69	'E'
      000663 45                    1833 	.db #0x45	; 69	'E'
      000664 45                    1834 	.db #0x45	; 69	'E'
      000665 41                    1835 	.db #0x41	; 65	'A'
      000666 45                    1836 	.db #0x45	; 69	'E'
      000667 41                    1837 	.db #0x41	; 65	'A'
      000668                       1838 _color_11:
      000668 41                    1839 	.db #0x41	; 65	'A'
      000669 41                    1840 	.db #0x41	; 65	'A'
      00066A 41                    1841 	.db #0x41	; 65	'A'
      00066B 41                    1842 	.db #0x41	; 65	'A'
      00066C 41                    1843 	.db #0x41	; 65	'A'
      00066D 41                    1844 	.db #0x41	; 65	'A'
      00066E 41                    1845 	.db #0x41	; 65	'A'
      00066F 41                    1846 	.db #0x41	; 65	'A'
      000670                       1847 _color_12:
      000670 D1                    1848 	.db #0xd1	; 209
      000671 DF                    1849 	.db #0xdf	; 223
      000672 DF                    1850 	.db #0xdf	; 223
      000673 DF                    1851 	.db #0xdf	; 223
      000674 DF                    1852 	.db #0xdf	; 223
      000675 DF                    1853 	.db #0xdf	; 223
      000676 DF                    1854 	.db #0xdf	; 223
      000677 DF                    1855 	.db #0xdf	; 223
      000678                       1856 _color_13:
      000678 D1                    1857 	.db #0xd1	; 209
      000679 DF                    1858 	.db #0xdf	; 223
      00067A DF                    1859 	.db #0xdf	; 223
      00067B DF                    1860 	.db #0xdf	; 223
      00067C DF                    1861 	.db #0xdf	; 223
      00067D DF                    1862 	.db #0xdf	; 223
      00067E DF                    1863 	.db #0xdf	; 223
      00067F DF                    1864 	.db #0xdf	; 223
      000680                       1865 _color_14:
      000680 DF                    1866 	.db #0xdf	; 223
      000681 DF                    1867 	.db #0xdf	; 223
      000682 DF                    1868 	.db #0xdf	; 223
      000683 D1                    1869 	.db #0xd1	; 209
      000684 D1                    1870 	.db #0xd1	; 209
      000685 D1                    1871 	.db #0xd1	; 209
      000686 D1                    1872 	.db #0xd1	; 209
      000687 D1                    1873 	.db #0xd1	; 209
      000688                       1874 _color_15:
      000688 D1                    1875 	.db #0xd1	; 209
      000689 D1                    1876 	.db #0xd1	; 209
      00068A D1                    1877 	.db #0xd1	; 209
      00068B D1                    1878 	.db #0xd1	; 209
      00068C D1                    1879 	.db #0xd1	; 209
      00068D D1                    1880 	.db #0xd1	; 209
      00068E D1                    1881 	.db #0xd1	; 209
      00068F D1                    1882 	.db #0xd1	; 209
      000690                       1883 _color_16:
      000690 A1                    1884 	.db #0xa1	; 161
      000691 BF                    1885 	.db #0xbf	; 191
      000692 BF                    1886 	.db #0xbf	; 191
      000693 BF                    1887 	.db #0xbf	; 191
      000694 BF                    1888 	.db #0xbf	; 191
      000695 BF                    1889 	.db #0xbf	; 191
      000696 BF                    1890 	.db #0xbf	; 191
      000697 BF                    1891 	.db #0xbf	; 191
      000698                       1892 _color_17:
      000698 A1                    1893 	.db #0xa1	; 161
      000699 AF                    1894 	.db #0xaf	; 175
      00069A AF                    1895 	.db #0xaf	; 175
      00069B A1                    1896 	.db #0xa1	; 161
      00069C A1                    1897 	.db #0xa1	; 161
      00069D A1                    1898 	.db #0xa1	; 161
      00069E A1                    1899 	.db #0xa1	; 161
      00069F A1                    1900 	.db #0xa1	; 161
      0006A0                       1901 _color_18:
      0006A0 AF                    1902 	.db #0xaf	; 175
      0006A1 AF                    1903 	.db #0xaf	; 175
      0006A2 AF                    1904 	.db #0xaf	; 175
      0006A3 AF                    1905 	.db #0xaf	; 175
      0006A4 A1                    1906 	.db #0xa1	; 161
      0006A5 A1                    1907 	.db #0xa1	; 161
      0006A6 A1                    1908 	.db #0xa1	; 161
      0006A7 A1                    1909 	.db #0xa1	; 161
      0006A8                       1910 _color_19:
      0006A8 B1                    1911 	.db #0xb1	; 177
      0006A9 B1                    1912 	.db #0xb1	; 177
      0006AA B1                    1913 	.db #0xb1	; 177
      0006AB B1                    1914 	.db #0xb1	; 177
      0006AC B1                    1915 	.db #0xb1	; 177
      0006AD B1                    1916 	.db #0xb1	; 177
      0006AE B1                    1917 	.db #0xb1	; 177
      0006AF B1                    1918 	.db #0xb1	; 177
      0006B0                       1919 _color_column_1:
      0006B0 F1                    1920 	.db #0xf1	; 241
      0006B1 E1                    1921 	.db #0xe1	; 225
      0006B2 E1                    1922 	.db #0xe1	; 225
      0006B3 E1                    1923 	.db #0xe1	; 225
      0006B4 E1                    1924 	.db #0xe1	; 225
      0006B5 E1                    1925 	.db #0xe1	; 225
      0006B6 E1                    1926 	.db #0xe1	; 225
      0006B7 E1                    1927 	.db #0xe1	; 225
      0006B8                       1928 _color_column_2:
      0006B8 F1                    1929 	.db #0xf1	; 241
      0006B9 E1                    1930 	.db #0xe1	; 225
      0006BA E1                    1931 	.db #0xe1	; 225
      0006BB E1                    1932 	.db #0xe1	; 225
      0006BC E1                    1933 	.db #0xe1	; 225
      0006BD E1                    1934 	.db #0xe1	; 225
      0006BE E1                    1935 	.db #0xe1	; 225
      0006BF E1                    1936 	.db #0xe1	; 225
      0006C0                       1937 _color_column_3:
      0006C0 F1                    1938 	.db #0xf1	; 241
      0006C1 E1                    1939 	.db #0xe1	; 225
      0006C2 E1                    1940 	.db #0xe1	; 225
      0006C3 E1                    1941 	.db #0xe1	; 225
      0006C4 E1                    1942 	.db #0xe1	; 225
      0006C5 E1                    1943 	.db #0xe1	; 225
      0006C6 E1                    1944 	.db #0xe1	; 225
      0006C7 E1                    1945 	.db #0xe1	; 225
      0006C8                       1946 _color_column_4:
      0006C8 F1                    1947 	.db #0xf1	; 241
      0006C9 F1                    1948 	.db #0xf1	; 241
      0006CA F1                    1949 	.db #0xf1	; 241
      0006CB F1                    1950 	.db #0xf1	; 241
      0006CC F1                    1951 	.db #0xf1	; 241
      0006CD F1                    1952 	.db #0xf1	; 241
      0006CE F1                    1953 	.db #0xf1	; 241
      0006CF F1                    1954 	.db #0xf1	; 241
      0006D0                       1955 _color_column_5:
      0006D0 E1                    1956 	.db #0xe1	; 225
      0006D1 E1                    1957 	.db #0xe1	; 225
      0006D2 E1                    1958 	.db #0xe1	; 225
      0006D3 E1                    1959 	.db #0xe1	; 225
      0006D4 E1                    1960 	.db #0xe1	; 225
      0006D5 E1                    1961 	.db #0xe1	; 225
      0006D6 E1                    1962 	.db #0xe1	; 225
      0006D7 E1                    1963 	.db #0xe1	; 225
      0006D8                       1964 _color_column_6:
      0006D8 E1                    1965 	.db #0xe1	; 225
      0006D9 E1                    1966 	.db #0xe1	; 225
      0006DA E1                    1967 	.db #0xe1	; 225
      0006DB 41                    1968 	.db #0x41	; 65	'A'
      0006DC 41                    1969 	.db #0x41	; 65	'A'
      0006DD 41                    1970 	.db #0x41	; 65	'A'
      0006DE 41                    1971 	.db #0x41	; 65	'A'
      0006DF 41                    1972 	.db #0x41	; 65	'A'
      0006E0                       1973 _color_column_7:
      0006E0 F1                    1974 	.db #0xf1	; 241
      0006E1 F1                    1975 	.db #0xf1	; 241
      0006E2 F1                    1976 	.db #0xf1	; 241
      0006E3 F1                    1977 	.db #0xf1	; 241
      0006E4 F1                    1978 	.db #0xf1	; 241
      0006E5 F1                    1979 	.db #0xf1	; 241
      0006E6 F1                    1980 	.db #0xf1	; 241
      0006E7 F1                    1981 	.db #0xf1	; 241
      0006E8                       1982 _color_column_8:
      0006E8 E1                    1983 	.db #0xe1	; 225
      0006E9 E1                    1984 	.db #0xe1	; 225
      0006EA E1                    1985 	.db #0xe1	; 225
      0006EB F1                    1986 	.db #0xf1	; 241
      0006EC E1                    1987 	.db #0xe1	; 225
      0006ED E1                    1988 	.db #0xe1	; 225
      0006EE E1                    1989 	.db #0xe1	; 225
      0006EF E1                    1990 	.db #0xe1	; 225
      0006F0                       1991 _color_column_9:
      0006F0 41                    1992 	.db #0x41	; 65	'A'
      0006F1 41                    1993 	.db #0x41	; 65	'A'
      0006F2 41                    1994 	.db #0x41	; 65	'A'
      0006F3 F1                    1995 	.db #0xf1	; 241
      0006F4 41                    1996 	.db #0x41	; 65	'A'
      0006F5 41                    1997 	.db #0x41	; 65	'A'
      0006F6 41                    1998 	.db #0x41	; 65	'A'
      0006F7 41                    1999 	.db #0x41	; 65	'A'
      0006F8                       2000 _color_column_10:
      0006F8 F1                    2001 	.db #0xf1	; 241
      0006F9 F1                    2002 	.db #0xf1	; 241
      0006FA F1                    2003 	.db #0xf1	; 241
      0006FB F1                    2004 	.db #0xf1	; 241
      0006FC F1                    2005 	.db #0xf1	; 241
      0006FD F1                    2006 	.db #0xf1	; 241
      0006FE F1                    2007 	.db #0xf1	; 241
      0006FF F1                    2008 	.db #0xf1	; 241
      000700                       2009 _color_column_11:
      000700 E1                    2010 	.db #0xe1	; 225
      000701 E1                    2011 	.db #0xe1	; 225
      000702 E1                    2012 	.db #0xe1	; 225
      000703 E1                    2013 	.db #0xe1	; 225
      000704 E1                    2014 	.db #0xe1	; 225
      000705 E1                    2015 	.db #0xe1	; 225
      000706 E1                    2016 	.db #0xe1	; 225
      000707 E1                    2017 	.db #0xe1	; 225
      000708                       2018 _color_column_12:
      000708 41                    2019 	.db #0x41	; 65	'A'
      000709 41                    2020 	.db #0x41	; 65	'A'
      00070A 41                    2021 	.db #0x41	; 65	'A'
      00070B 41                    2022 	.db #0x41	; 65	'A'
      00070C 41                    2023 	.db #0x41	; 65	'A'
      00070D 41                    2024 	.db #0x41	; 65	'A'
      00070E 41                    2025 	.db #0x41	; 65	'A'
      00070F 41                    2026 	.db #0x41	; 65	'A'
      000710                       2027 _color_column_16:
      000710 F1                    2028 	.db #0xf1	; 241
      000711 F1                    2029 	.db #0xf1	; 241
      000712 F1                    2030 	.db #0xf1	; 241
      000713 F1                    2031 	.db #0xf1	; 241
      000714 F1                    2032 	.db #0xf1	; 241
      000715 F1                    2033 	.db #0xf1	; 241
      000716 F1                    2034 	.db #0xf1	; 241
      000717 F1                    2035 	.db #0xf1	; 241
      000718                       2036 _color_column_17:
      000718 E1                    2037 	.db #0xe1	; 225
      000719 E1                    2038 	.db #0xe1	; 225
      00071A E1                    2039 	.db #0xe1	; 225
      00071B E1                    2040 	.db #0xe1	; 225
      00071C E1                    2041 	.db #0xe1	; 225
      00071D E1                    2042 	.db #0xe1	; 225
      00071E E1                    2043 	.db #0xe1	; 225
      00071F E1                    2044 	.db #0xe1	; 225
      000720                       2045 _color_column_18:
      000720 41                    2046 	.db #0x41	; 65	'A'
      000721 41                    2047 	.db #0x41	; 65	'A'
      000722 41                    2048 	.db #0x41	; 65	'A'
      000723 41                    2049 	.db #0x41	; 65	'A'
      000724 41                    2050 	.db #0x41	; 65	'A'
      000725 E1                    2051 	.db #0xe1	; 225
      000726 E1                    2052 	.db #0xe1	; 225
      000727 E1                    2053 	.db #0xe1	; 225
      000728                       2054 _color_column_13:
      000728 E1                    2055 	.db #0xe1	; 225
      000729 E1                    2056 	.db #0xe1	; 225
      00072A E1                    2057 	.db #0xe1	; 225
      00072B E1                    2058 	.db #0xe1	; 225
      00072C E1                    2059 	.db #0xe1	; 225
      00072D E1                    2060 	.db #0xe1	; 225
      00072E E1                    2061 	.db #0xe1	; 225
      00072F F1                    2062 	.db #0xf1	; 241
      000730                       2063 _color_column_14:
      000730 E1                    2064 	.db #0xe1	; 225
      000731 E1                    2065 	.db #0xe1	; 225
      000732 E1                    2066 	.db #0xe1	; 225
      000733 E1                    2067 	.db #0xe1	; 225
      000734 E1                    2068 	.db #0xe1	; 225
      000735 E1                    2069 	.db #0xe1	; 225
      000736 E1                    2070 	.db #0xe1	; 225
      000737 F1                    2071 	.db #0xf1	; 241
      000738                       2072 _color_column_15:
      000738 E1                    2073 	.db #0xe1	; 225
      000739 E1                    2074 	.db #0xe1	; 225
      00073A E1                    2075 	.db #0xe1	; 225
      00073B E1                    2076 	.db #0xe1	; 225
      00073C E1                    2077 	.db #0xe1	; 225
      00073D E1                    2078 	.db #0xe1	; 225
      00073E E1                    2079 	.db #0xe1	; 225
      00073F F1                    2080 	.db #0xf1	; 241
      000740                       2081 _color_dust_0:
      000740 F1                    2082 	.db #0xf1	; 241
      000741 F1                    2083 	.db #0xf1	; 241
      000742 F1                    2084 	.db #0xf1	; 241
      000743 F1                    2085 	.db #0xf1	; 241
      000744 F1                    2086 	.db #0xf1	; 241
      000745 F1                    2087 	.db #0xf1	; 241
      000746 F1                    2088 	.db #0xf1	; 241
      000747 F1                    2089 	.db #0xf1	; 241
      000748                       2090 _color_dust_1:
      000748 F1                    2091 	.db #0xf1	; 241
      000749 F1                    2092 	.db #0xf1	; 241
      00074A F1                    2093 	.db #0xf1	; 241
      00074B F1                    2094 	.db #0xf1	; 241
      00074C F1                    2095 	.db #0xf1	; 241
      00074D F1                    2096 	.db #0xf1	; 241
      00074E F1                    2097 	.db #0xf1	; 241
      00074F F1                    2098 	.db #0xf1	; 241
      000750                       2099 _color_dust_2:
      000750 F1                    2100 	.db #0xf1	; 241
      000751 F1                    2101 	.db #0xf1	; 241
      000752 F1                    2102 	.db #0xf1	; 241
      000753 F1                    2103 	.db #0xf1	; 241
      000754 F1                    2104 	.db #0xf1	; 241
      000755 F1                    2105 	.db #0xf1	; 241
      000756 F1                    2106 	.db #0xf1	; 241
      000757 F1                    2107 	.db #0xf1	; 241
      000758                       2108 _color_dust_3:
      000758 F1                    2109 	.db #0xf1	; 241
      000759 F1                    2110 	.db #0xf1	; 241
      00075A F1                    2111 	.db #0xf1	; 241
      00075B F1                    2112 	.db #0xf1	; 241
      00075C F1                    2113 	.db #0xf1	; 241
      00075D F1                    2114 	.db #0xf1	; 241
      00075E F1                    2115 	.db #0xf1	; 241
      00075F F1                    2116 	.db #0xf1	; 241
      000760                       2117 _color_font_1:
      000760 F1                    2118 	.db #0xf1	; 241
      000761 F1                    2119 	.db #0xf1	; 241
      000762 E1                    2120 	.db #0xe1	; 225
      000763 71                    2121 	.db #0x71	; 113	'q'
      000764 71                    2122 	.db #0x71	; 113	'q'
      000765 51                    2123 	.db #0x51	; 81	'Q'
      000766 51                    2124 	.db #0x51	; 81	'Q'
      000767 41                    2125 	.db #0x41	; 65	'A'
      000768                       2126 _color_font_2:
      000768 61                    2127 	.db #0x61	; 97	'a'
      000769 61                    2128 	.db #0x61	; 97	'a'
      00076A 81                    2129 	.db #0x81	; 129
      00076B 81                    2130 	.db #0x81	; 129
      00076C 91                    2131 	.db #0x91	; 145
      00076D 91                    2132 	.db #0x91	; 145
      00076E E1                    2133 	.db #0xe1	; 225
      00076F E1                    2134 	.db #0xe1	; 225
      000770                       2135 _color_title_1:
      000770 A1                    2136 	.db #0xa1	; 161
      000771 A1                    2137 	.db #0xa1	; 161
      000772 A1                    2138 	.db #0xa1	; 161
      000773 A1                    2139 	.db #0xa1	; 161
      000774 A1                    2140 	.db #0xa1	; 161
      000775 A1                    2141 	.db #0xa1	; 161
      000776 A1                    2142 	.db #0xa1	; 161
      000777 A1                    2143 	.db #0xa1	; 161
      000778                       2144 _color_title_2:
      000778 B1                    2145 	.db #0xb1	; 177
      000779 B1                    2146 	.db #0xb1	; 177
      00077A B1                    2147 	.db #0xb1	; 177
      00077B B1                    2148 	.db #0xb1	; 177
      00077C B1                    2149 	.db #0xb1	; 177
      00077D B1                    2150 	.db #0xb1	; 177
      00077E B1                    2151 	.db #0xb1	; 177
      00077F B1                    2152 	.db #0xb1	; 177
      000780                       2153 _color_title_3:
      000780 D1                    2154 	.db #0xd1	; 209
      000781 D1                    2155 	.db #0xd1	; 209
      000782 D1                    2156 	.db #0xd1	; 209
      000783 D1                    2157 	.db #0xd1	; 209
      000784 D1                    2158 	.db #0xd1	; 209
      000785 D1                    2159 	.db #0xd1	; 209
      000786 D1                    2160 	.db #0xd1	; 209
      000787 D1                    2161 	.db #0xd1	; 209
      000788                       2162 _color_title_4:
      000788 F1                    2163 	.db #0xf1	; 241
      000789 F1                    2164 	.db #0xf1	; 241
      00078A F1                    2165 	.db #0xf1	; 241
      00078B F1                    2166 	.db #0xf1	; 241
      00078C F1                    2167 	.db #0xf1	; 241
      00078D F1                    2168 	.db #0xf1	; 241
      00078E F1                    2169 	.db #0xf1	; 241
      00078F F1                    2170 	.db #0xf1	; 241
      000790                       2171 _color_title_5:
      000790 71                    2172 	.db #0x71	; 113	'q'
      000791 71                    2173 	.db #0x71	; 113	'q'
      000792 71                    2174 	.db #0x71	; 113	'q'
      000793 71                    2175 	.db #0x71	; 113	'q'
      000794 71                    2176 	.db #0x71	; 113	'q'
      000795 71                    2177 	.db #0x71	; 113	'q'
      000796 71                    2178 	.db #0x71	; 113	'q'
      000797 71                    2179 	.db #0x71	; 113	'q'
      000798                       2180 _color_title_6:
      000798 51                    2181 	.db #0x51	; 81	'Q'
      000799 51                    2182 	.db #0x51	; 81	'Q'
      00079A 51                    2183 	.db #0x51	; 81	'Q'
      00079B 51                    2184 	.db #0x51	; 81	'Q'
      00079C 51                    2185 	.db #0x51	; 81	'Q'
      00079D 51                    2186 	.db #0x51	; 81	'Q'
      00079E 51                    2187 	.db #0x51	; 81	'Q'
      00079F 51                    2188 	.db #0x51	; 81	'Q'
      0007A0                       2189 _color_title_7:
      0007A0 41                    2190 	.db #0x41	; 65	'A'
      0007A1 41                    2191 	.db #0x41	; 65	'A'
      0007A2 41                    2192 	.db #0x41	; 65	'A'
      0007A3 41                    2193 	.db #0x41	; 65	'A'
      0007A4 41                    2194 	.db #0x41	; 65	'A'
      0007A5 41                    2195 	.db #0x41	; 65	'A'
      0007A6 41                    2196 	.db #0x41	; 65	'A'
      0007A7 41                    2197 	.db #0x41	; 65	'A'
      0007A8                       2198 _sprite_arrow_0:
      0007A8 00                    2199 	.db #0x00	; 0
      0007A9 00                    2200 	.db #0x00	; 0
      0007AA 00                    2201 	.db #0x00	; 0
      0007AB 00                    2202 	.db #0x00	; 0
      0007AC 00                    2203 	.db #0x00	; 0
      0007AD 00                    2204 	.db #0x00	; 0
      0007AE 00                    2205 	.db #0x00	; 0
      0007AF 00                    2206 	.db #0x00	; 0
      0007B0                       2207 _sprite_arrow_1:
      0007B0 FF                    2208 	.db #0xff	; 255
      0007B1 00                    2209 	.db #0x00	; 0
      0007B2 3F                    2210 	.db #0x3f	; 63
      0007B3 00                    2211 	.db #0x00	; 0
      0007B4 0F                    2212 	.db #0x0f	; 15
      0007B5 00                    2213 	.db #0x00	; 0
      0007B6 03                    2214 	.db #0x03	; 3
      0007B7 00                    2215 	.db #0x00	; 0
      0007B8                       2216 _sprite_arrow_2:
      0007B8 00                    2217 	.db #0x00	; 0
      0007B9 00                    2218 	.db #0x00	; 0
      0007BA 00                    2219 	.db #0x00	; 0
      0007BB 00                    2220 	.db #0x00	; 0
      0007BC 00                    2221 	.db #0x00	; 0
      0007BD 00                    2222 	.db #0x00	; 0
      0007BE 00                    2223 	.db #0x00	; 0
      0007BF 00                    2224 	.db #0x00	; 0
      0007C0                       2225 _sprite_arrow_3:
      0007C0 FF                    2226 	.db #0xff	; 255
      0007C1 00                    2227 	.db #0x00	; 0
      0007C2 FC                    2228 	.db #0xfc	; 252
      0007C3 00                    2229 	.db #0x00	; 0
      0007C4 F0                    2230 	.db #0xf0	; 240
      0007C5 00                    2231 	.db #0x00	; 0
      0007C6 C0                    2232 	.db #0xc0	; 192
      0007C7 00                    2233 	.db #0x00	; 0
      0007C8                       2234 _sprite_hit_1:
      0007C8 00                    2235 	.db #0x00	; 0
      0007C9 77                    2236 	.db #0x77	; 119	'w'
      0007CA 22                    2237 	.db #0x22	; 34
      0007CB 22                    2238 	.db #0x22	; 34
      0007CC 22                    2239 	.db #0x22	; 34
      0007CD 3E                    2240 	.db #0x3e	; 62
      0007CE 22                    2241 	.db #0x22	; 34
      0007CF 22                    2242 	.db #0x22	; 34
      0007D0 22                    2243 	.db #0x22	; 34
      0007D1 77                    2244 	.db #0x77	; 119	'w'
      0007D2 00                    2245 	.db #0x00	; 0
      0007D3 00                    2246 	.db #0x00	; 0
      0007D4 00                    2247 	.db #0x00	; 0
      0007D5 00                    2248 	.db #0x00	; 0
      0007D6 00                    2249 	.db #0x00	; 0
      0007D7 00                    2250 	.db #0x00	; 0
      0007D8 00                    2251 	.db #0x00	; 0
      0007D9 77                    2252 	.db #0x77	; 119	'w'
      0007DA 25                    2253 	.db #0x25	; 37
      0007DB 21                    2254 	.db #0x21	; 33
      0007DC 21                    2255 	.db #0x21	; 33
      0007DD 21                    2256 	.db #0x21	; 33
      0007DE 21                    2257 	.db #0x21	; 33
      0007DF 21                    2258 	.db #0x21	; 33
      0007E0 21                    2259 	.db #0x21	; 33
      0007E1 73                    2260 	.db #0x73	; 115	's'
      0007E2 00                    2261 	.db #0x00	; 0
      0007E3 00                    2262 	.db #0x00	; 0
      0007E4 00                    2263 	.db #0x00	; 0
      0007E5 00                    2264 	.db #0x00	; 0
      0007E6 00                    2265 	.db #0x00	; 0
      0007E7 00                    2266 	.db #0x00	; 0
      0007E8                       2267 _sprite_hit_2:
      0007E8 00                    2268 	.db #0x00	; 0
      0007E9 C0                    2269 	.db #0xc0	; 192
      0007EA 40                    2270 	.db #0x40	; 64
      0007EB 00                    2271 	.db #0x00	; 0
      0007EC 00                    2272 	.db #0x00	; 0
      0007ED 00                    2273 	.db #0x00	; 0
      0007EE 00                    2274 	.db #0x00	; 0
      0007EF 00                    2275 	.db #0x00	; 0
      0007F0 00                    2276 	.db #0x00	; 0
      0007F1 80                    2277 	.db #0x80	; 128
      0007F2 00                    2278 	.db #0x00	; 0
      0007F3 00                    2279 	.db #0x00	; 0
      0007F4 00                    2280 	.db #0x00	; 0
      0007F5 00                    2281 	.db #0x00	; 0
      0007F6 00                    2282 	.db #0x00	; 0
      0007F7 00                    2283 	.db #0x00	; 0
      0007F8 00                    2284 	.db #0x00	; 0
      0007F9 00                    2285 	.db #0x00	; 0
      0007FA 00                    2286 	.db #0x00	; 0
      0007FB 00                    2287 	.db #0x00	; 0
      0007FC 00                    2288 	.db #0x00	; 0
      0007FD 00                    2289 	.db #0x00	; 0
      0007FE 00                    2290 	.db #0x00	; 0
      0007FF 00                    2291 	.db #0x00	; 0
      000800 00                    2292 	.db #0x00	; 0
      000801 00                    2293 	.db #0x00	; 0
      000802 00                    2294 	.db #0x00	; 0
      000803 00                    2295 	.db #0x00	; 0
      000804 00                    2296 	.db #0x00	; 0
      000805 00                    2297 	.db #0x00	; 0
      000806 00                    2298 	.db #0x00	; 0
      000807 00                    2299 	.db #0x00	; 0
      000808                       2300 _sprite_combo_1:
      000808 00                    2301 	.db #0x00	; 0
      000809 38                    2302 	.db #0x38	; 56	'8'
      00080A 65                    2303 	.db #0x65	; 101	'e'
      00080B 61                    2304 	.db #0x61	; 97	'a'
      00080C 61                    2305 	.db #0x61	; 97	'a'
      00080D 61                    2306 	.db #0x61	; 97	'a'
      00080E 61                    2307 	.db #0x61	; 97	'a'
      00080F 61                    2308 	.db #0x61	; 97	'a'
      000810 65                    2309 	.db #0x65	; 101	'e'
      000811 38                    2310 	.db #0x38	; 56	'8'
      000812 00                    2311 	.db #0x00	; 0
      000813 00                    2312 	.db #0x00	; 0
      000814 00                    2313 	.db #0x00	; 0
      000815 00                    2314 	.db #0x00	; 0
      000816 00                    2315 	.db #0x00	; 0
      000817 00                    2316 	.db #0x00	; 0
      000818 00                    2317 	.db #0x00	; 0
      000819 E6                    2318 	.db #0xe6	; 230
      00081A 13                    2319 	.db #0x13	; 19
      00081B 12                    2320 	.db #0x12	; 18
      00081C 12                    2321 	.db #0x12	; 18
      00081D 12                    2322 	.db #0x12	; 18
      00081E 12                    2323 	.db #0x12	; 18
      00081F 12                    2324 	.db #0x12	; 18
      000820 12                    2325 	.db #0x12	; 18
      000821 E7                    2326 	.db #0xe7	; 231
      000822 00                    2327 	.db #0x00	; 0
      000823 00                    2328 	.db #0x00	; 0
      000824 00                    2329 	.db #0x00	; 0
      000825 00                    2330 	.db #0x00	; 0
      000826 00                    2331 	.db #0x00	; 0
      000827 00                    2332 	.db #0x00	; 0
      000828                       2333 _sprite_combo_2:
      000828 00                    2334 	.db #0x00	; 0
      000829 37                    2335 	.db #0x37	; 55	'7'
      00082A 62                    2336 	.db #0x62	; 98	'b'
      00082B A2                    2337 	.db #0xa2	; 162
      00082C 22                    2338 	.db #0x22	; 34
      00082D 23                    2339 	.db #0x23	; 35
      00082E 22                    2340 	.db #0x22	; 34
      00082F 22                    2341 	.db #0x22	; 34
      000830 22                    2342 	.db #0x22	; 34
      000831 77                    2343 	.db #0x77	; 119	'w'
      000832 00                    2344 	.db #0x00	; 0
      000833 00                    2345 	.db #0x00	; 0
      000834 00                    2346 	.db #0x00	; 0
      000835 00                    2347 	.db #0x00	; 0
      000836 00                    2348 	.db #0x00	; 0
      000837 00                    2349 	.db #0x00	; 0
      000838 00                    2350 	.db #0x00	; 0
      000839 8E                    2351 	.db #0x8e	; 142
      00083A 51                    2352 	.db #0x51	; 81	'Q'
      00083B 51                    2353 	.db #0x51	; 81	'Q'
      00083C 51                    2354 	.db #0x51	; 81	'Q'
      00083D 91                    2355 	.db #0x91	; 145
      00083E 51                    2356 	.db #0x51	; 81	'Q'
      00083F 51                    2357 	.db #0x51	; 81	'Q'
      000840 51                    2358 	.db #0x51	; 81	'Q'
      000841 8E                    2359 	.db #0x8e	; 142
      000842 00                    2360 	.db #0x00	; 0
      000843 00                    2361 	.db #0x00	; 0
      000844 00                    2362 	.db #0x00	; 0
      000845 00                    2363 	.db #0x00	; 0
      000846 00                    2364 	.db #0x00	; 0
      000847 00                    2365 	.db #0x00	; 0
      000848                       2366 _sprite_2x:
      000848 00                    2367 	.db #0x00	; 0
      000849 3E                    2368 	.db #0x3e	; 62
      00084A 63                    2369 	.db #0x63	; 99	'c'
      00084B 03                    2370 	.db #0x03	; 3
      00084C 03                    2371 	.db #0x03	; 3
      00084D 1E                    2372 	.db #0x1e	; 30
      00084E 30                    2373 	.db #0x30	; 48	'0'
      00084F 60                    2374 	.db #0x60	; 96
      000850 60                    2375 	.db #0x60	; 96
      000851 7F                    2376 	.db #0x7f	; 127
      000852 00                    2377 	.db #0x00	; 0
      000853 00                    2378 	.db #0x00	; 0
      000854 00                    2379 	.db #0x00	; 0
      000855 00                    2380 	.db #0x00	; 0
      000856 00                    2381 	.db #0x00	; 0
      000857 00                    2382 	.db #0x00	; 0
      000858 00                    2383 	.db #0x00	; 0
      000859 00                    2384 	.db #0x00	; 0
      00085A 00                    2385 	.db #0x00	; 0
      00085B 63                    2386 	.db #0x63	; 99	'c'
      00085C 36                    2387 	.db #0x36	; 54	'6'
      00085D 1C                    2388 	.db #0x1c	; 28
      00085E 08                    2389 	.db #0x08	; 8
      00085F 1C                    2390 	.db #0x1c	; 28
      000860 36                    2391 	.db #0x36	; 54	'6'
      000861 63                    2392 	.db #0x63	; 99	'c'
      000862 00                    2393 	.db #0x00	; 0
      000863 00                    2394 	.db #0x00	; 0
      000864 00                    2395 	.db #0x00	; 0
      000865 00                    2396 	.db #0x00	; 0
      000866 00                    2397 	.db #0x00	; 0
      000867 00                    2398 	.db #0x00	; 0
      000868                       2399 _sprite_3x:
      000868 00                    2400 	.db #0x00	; 0
      000869 3E                    2401 	.db #0x3e	; 62
      00086A 63                    2402 	.db #0x63	; 99	'c'
      00086B 03                    2403 	.db #0x03	; 3
      00086C 03                    2404 	.db #0x03	; 3
      00086D 1E                    2405 	.db #0x1e	; 30
      00086E 03                    2406 	.db #0x03	; 3
      00086F 03                    2407 	.db #0x03	; 3
      000870 63                    2408 	.db #0x63	; 99	'c'
      000871 3E                    2409 	.db #0x3e	; 62
      000872 00                    2410 	.db #0x00	; 0
      000873 00                    2411 	.db #0x00	; 0
      000874 00                    2412 	.db #0x00	; 0
      000875 00                    2413 	.db #0x00	; 0
      000876 00                    2414 	.db #0x00	; 0
      000877 00                    2415 	.db #0x00	; 0
      000878 00                    2416 	.db #0x00	; 0
      000879 00                    2417 	.db #0x00	; 0
      00087A 00                    2418 	.db #0x00	; 0
      00087B 63                    2419 	.db #0x63	; 99	'c'
      00087C 36                    2420 	.db #0x36	; 54	'6'
      00087D 1C                    2421 	.db #0x1c	; 28
      00087E 08                    2422 	.db #0x08	; 8
      00087F 1C                    2423 	.db #0x1c	; 28
      000880 36                    2424 	.db #0x36	; 54	'6'
      000881 63                    2425 	.db #0x63	; 99	'c'
      000882 00                    2426 	.db #0x00	; 0
      000883 00                    2427 	.db #0x00	; 0
      000884 00                    2428 	.db #0x00	; 0
      000885 00                    2429 	.db #0x00	; 0
      000886 00                    2430 	.db #0x00	; 0
      000887 00                    2431 	.db #0x00	; 0
      000888                       2432 _sprite_4x:
      000888 00                    2433 	.db #0x00	; 0
      000889 02                    2434 	.db #0x02	; 2
      00088A 06                    2435 	.db #0x06	; 6
      00088B 0E                    2436 	.db #0x0e	; 14
      00088C 16                    2437 	.db #0x16	; 22
      00088D 26                    2438 	.db #0x26	; 38
      00088E 7F                    2439 	.db #0x7f	; 127
      00088F 06                    2440 	.db #0x06	; 6
      000890 06                    2441 	.db #0x06	; 6
      000891 0F                    2442 	.db #0x0f	; 15
      000892 00                    2443 	.db #0x00	; 0
      000893 00                    2444 	.db #0x00	; 0
      000894 00                    2445 	.db #0x00	; 0
      000895 00                    2446 	.db #0x00	; 0
      000896 00                    2447 	.db #0x00	; 0
      000897 00                    2448 	.db #0x00	; 0
      000898 00                    2449 	.db #0x00	; 0
      000899 00                    2450 	.db #0x00	; 0
      00089A 00                    2451 	.db #0x00	; 0
      00089B 63                    2452 	.db #0x63	; 99	'c'
      00089C 36                    2453 	.db #0x36	; 54	'6'
      00089D 1C                    2454 	.db #0x1c	; 28
      00089E 08                    2455 	.db #0x08	; 8
      00089F 1C                    2456 	.db #0x1c	; 28
      0008A0 36                    2457 	.db #0x36	; 54	'6'
      0008A1 63                    2458 	.db #0x63	; 99	'c'
      0008A2 00                    2459 	.db #0x00	; 0
      0008A3 00                    2460 	.db #0x00	; 0
      0008A4 00                    2461 	.db #0x00	; 0
      0008A5 00                    2462 	.db #0x00	; 0
      0008A6 00                    2463 	.db #0x00	; 0
      0008A7 00                    2464 	.db #0x00	; 0
      0008A8                       2465 _sprite_5x:
      0008A8 00                    2466 	.db #0x00	; 0
      0008A9 7E                    2467 	.db #0x7e	; 126
      0008AA 60                    2468 	.db #0x60	; 96
      0008AB 60                    2469 	.db #0x60	; 96
      0008AC 7E                    2470 	.db #0x7e	; 126
      0008AD 03                    2471 	.db #0x03	; 3
      0008AE 03                    2472 	.db #0x03	; 3
      0008AF 03                    2473 	.db #0x03	; 3
      0008B0 63                    2474 	.db #0x63	; 99	'c'
      0008B1 3E                    2475 	.db #0x3e	; 62
      0008B2 00                    2476 	.db #0x00	; 0
      0008B3 00                    2477 	.db #0x00	; 0
      0008B4 00                    2478 	.db #0x00	; 0
      0008B5 00                    2479 	.db #0x00	; 0
      0008B6 00                    2480 	.db #0x00	; 0
      0008B7 00                    2481 	.db #0x00	; 0
      0008B8 00                    2482 	.db #0x00	; 0
      0008B9 00                    2483 	.db #0x00	; 0
      0008BA 00                    2484 	.db #0x00	; 0
      0008BB 63                    2485 	.db #0x63	; 99	'c'
      0008BC 36                    2486 	.db #0x36	; 54	'6'
      0008BD 1C                    2487 	.db #0x1c	; 28
      0008BE 08                    2488 	.db #0x08	; 8
      0008BF 1C                    2489 	.db #0x1c	; 28
      0008C0 36                    2490 	.db #0x36	; 54	'6'
      0008C1 63                    2491 	.db #0x63	; 99	'c'
      0008C2 00                    2492 	.db #0x00	; 0
      0008C3 00                    2493 	.db #0x00	; 0
      0008C4 00                    2494 	.db #0x00	; 0
      0008C5 00                    2495 	.db #0x00	; 0
      0008C6 00                    2496 	.db #0x00	; 0
      0008C7 00                    2497 	.db #0x00	; 0
      0008C8                       2498 _sprite_6x:
      0008C8 00                    2499 	.db #0x00	; 0
      0008C9 3E                    2500 	.db #0x3e	; 62
      0008CA 61                    2501 	.db #0x61	; 97	'a'
      0008CB 60                    2502 	.db #0x60	; 96
      0008CC 7E                    2503 	.db #0x7e	; 126
      0008CD 63                    2504 	.db #0x63	; 99	'c'
      0008CE 63                    2505 	.db #0x63	; 99	'c'
      0008CF 63                    2506 	.db #0x63	; 99	'c'
      0008D0 63                    2507 	.db #0x63	; 99	'c'
      0008D1 3E                    2508 	.db #0x3e	; 62
      0008D2 00                    2509 	.db #0x00	; 0
      0008D3 00                    2510 	.db #0x00	; 0
      0008D4 00                    2511 	.db #0x00	; 0
      0008D5 00                    2512 	.db #0x00	; 0
      0008D6 00                    2513 	.db #0x00	; 0
      0008D7 00                    2514 	.db #0x00	; 0
      0008D8 00                    2515 	.db #0x00	; 0
      0008D9 00                    2516 	.db #0x00	; 0
      0008DA 00                    2517 	.db #0x00	; 0
      0008DB 63                    2518 	.db #0x63	; 99	'c'
      0008DC 36                    2519 	.db #0x36	; 54	'6'
      0008DD 1C                    2520 	.db #0x1c	; 28
      0008DE 08                    2521 	.db #0x08	; 8
      0008DF 1C                    2522 	.db #0x1c	; 28
      0008E0 36                    2523 	.db #0x36	; 54	'6'
      0008E1 63                    2524 	.db #0x63	; 99	'c'
      0008E2 00                    2525 	.db #0x00	; 0
      0008E3 00                    2526 	.db #0x00	; 0
      0008E4 00                    2527 	.db #0x00	; 0
      0008E5 00                    2528 	.db #0x00	; 0
      0008E6 00                    2529 	.db #0x00	; 0
      0008E7 00                    2530 	.db #0x00	; 0
      0008E8                       2531 _sprite_mega_hit:
      0008E8 04                    2532 	.db #0x04	; 4
      0008E9 06                    2533 	.db #0x06	; 6
      0008EA 05                    2534 	.db #0x05	; 5
      0008EB 04                    2535 	.db #0x04	; 4
      0008EC 04                    2536 	.db #0x04	; 4
      0008ED 00                    2537 	.db #0x00	; 0
      0008EE 03                    2538 	.db #0x03	; 3
      0008EF 04                    2539 	.db #0x04	; 4
      0008F0 05                    2540 	.db #0x05	; 5
      0008F1 04                    2541 	.db #0x04	; 4
      0008F2 03                    2542 	.db #0x03	; 3
      0008F3 00                    2543 	.db #0x00	; 0
      0008F4 00                    2544 	.db #0x00	; 0
      0008F5 00                    2545 	.db #0x00	; 0
      0008F6 00                    2546 	.db #0x00	; 0
      0008F7 00                    2547 	.db #0x00	; 0
      0008F8 5C                    2548 	.db #0x5c	; 92
      0008F9 D0                    2549 	.db #0xd0	; 208
      0008FA 5C                    2550 	.db #0x5c	; 92
      0008FB 50                    2551 	.db #0x50	; 80	'P'
      0008FC 5C                    2552 	.db #0x5c	; 92
      0008FD 00                    2553 	.db #0x00	; 0
      0008FE 98                    2554 	.db #0x98	; 152
      0008FF 24                    2555 	.db #0x24	; 36
      000900 A4                    2556 	.db #0xa4	; 164
      000901 BC                    2557 	.db #0xbc	; 188
      000902 A4                    2558 	.db #0xa4	; 164
      000903 00                    2559 	.db #0x00	; 0
      000904 00                    2560 	.db #0x00	; 0
      000905 00                    2561 	.db #0x00	; 0
      000906 00                    2562 	.db #0x00	; 0
      000907 00                    2563 	.db #0x00	; 0
      000908                       2564 _sprite_explosion_0:
      000908 00                    2565 	.db #0x00	; 0
      000909 00                    2566 	.db #0x00	; 0
      00090A 00                    2567 	.db #0x00	; 0
      00090B 00                    2568 	.db #0x00	; 0
      00090C 00                    2569 	.db #0x00	; 0
      00090D 00                    2570 	.db #0x00	; 0
      00090E 01                    2571 	.db #0x01	; 1
      00090F 02                    2572 	.db #0x02	; 2
      000910 01                    2573 	.db #0x01	; 1
      000911 00                    2574 	.db #0x00	; 0
      000912 00                    2575 	.db #0x00	; 0
      000913 00                    2576 	.db #0x00	; 0
      000914 00                    2577 	.db #0x00	; 0
      000915 00                    2578 	.db #0x00	; 0
      000916 00                    2579 	.db #0x00	; 0
      000917 00                    2580 	.db #0x00	; 0
      000918 00                    2581 	.db #0x00	; 0
      000919 00                    2582 	.db #0x00	; 0
      00091A 00                    2583 	.db #0x00	; 0
      00091B 00                    2584 	.db #0x00	; 0
      00091C 00                    2585 	.db #0x00	; 0
      00091D 00                    2586 	.db #0x00	; 0
      00091E 00                    2587 	.db #0x00	; 0
      00091F 80                    2588 	.db #0x80	; 128
      000920 00                    2589 	.db #0x00	; 0
      000921 00                    2590 	.db #0x00	; 0
      000922 00                    2591 	.db #0x00	; 0
      000923 00                    2592 	.db #0x00	; 0
      000924 00                    2593 	.db #0x00	; 0
      000925 00                    2594 	.db #0x00	; 0
      000926 00                    2595 	.db #0x00	; 0
      000927 00                    2596 	.db #0x00	; 0
      000928                       2597 _sprite_explosion_1:
      000928 00                    2598 	.db #0x00	; 0
      000929 00                    2599 	.db #0x00	; 0
      00092A 00                    2600 	.db #0x00	; 0
      00092B 00                    2601 	.db #0x00	; 0
      00092C 00                    2602 	.db #0x00	; 0
      00092D 01                    2603 	.db #0x01	; 1
      00092E 00                    2604 	.db #0x00	; 0
      00092F 04                    2605 	.db #0x04	; 4
      000930 00                    2606 	.db #0x00	; 0
      000931 01                    2607 	.db #0x01	; 1
      000932 00                    2608 	.db #0x00	; 0
      000933 00                    2609 	.db #0x00	; 0
      000934 00                    2610 	.db #0x00	; 0
      000935 00                    2611 	.db #0x00	; 0
      000936 00                    2612 	.db #0x00	; 0
      000937 00                    2613 	.db #0x00	; 0
      000938 00                    2614 	.db #0x00	; 0
      000939 00                    2615 	.db #0x00	; 0
      00093A 00                    2616 	.db #0x00	; 0
      00093B 00                    2617 	.db #0x00	; 0
      00093C 00                    2618 	.db #0x00	; 0
      00093D 00                    2619 	.db #0x00	; 0
      00093E 00                    2620 	.db #0x00	; 0
      00093F 40                    2621 	.db #0x40	; 64
      000940 00                    2622 	.db #0x00	; 0
      000941 00                    2623 	.db #0x00	; 0
      000942 00                    2624 	.db #0x00	; 0
      000943 00                    2625 	.db #0x00	; 0
      000944 00                    2626 	.db #0x00	; 0
      000945 00                    2627 	.db #0x00	; 0
      000946 00                    2628 	.db #0x00	; 0
      000947 00                    2629 	.db #0x00	; 0
      000948                       2630 _sprite_explosion_2:
      000948 00                    2631 	.db #0x00	; 0
      000949 00                    2632 	.db #0x00	; 0
      00094A 00                    2633 	.db #0x00	; 0
      00094B 00                    2634 	.db #0x00	; 0
      00094C 01                    2635 	.db #0x01	; 1
      00094D 04                    2636 	.db #0x04	; 4
      00094E 00                    2637 	.db #0x00	; 0
      00094F 08                    2638 	.db #0x08	; 8
      000950 00                    2639 	.db #0x00	; 0
      000951 04                    2640 	.db #0x04	; 4
      000952 01                    2641 	.db #0x01	; 1
      000953 00                    2642 	.db #0x00	; 0
      000954 00                    2643 	.db #0x00	; 0
      000955 00                    2644 	.db #0x00	; 0
      000956 00                    2645 	.db #0x00	; 0
      000957 00                    2646 	.db #0x00	; 0
      000958 00                    2647 	.db #0x00	; 0
      000959 00                    2648 	.db #0x00	; 0
      00095A 00                    2649 	.db #0x00	; 0
      00095B 00                    2650 	.db #0x00	; 0
      00095C 00                    2651 	.db #0x00	; 0
      00095D 40                    2652 	.db #0x40	; 64
      00095E 00                    2653 	.db #0x00	; 0
      00095F 20                    2654 	.db #0x20	; 32
      000960 00                    2655 	.db #0x00	; 0
      000961 40                    2656 	.db #0x40	; 64
      000962 00                    2657 	.db #0x00	; 0
      000963 00                    2658 	.db #0x00	; 0
      000964 00                    2659 	.db #0x00	; 0
      000965 00                    2660 	.db #0x00	; 0
      000966 00                    2661 	.db #0x00	; 0
      000967 00                    2662 	.db #0x00	; 0
      000968                       2663 _sprite_explosion_3:
      000968 00                    2664 	.db #0x00	; 0
      000969 00                    2665 	.db #0x00	; 0
      00096A 00                    2666 	.db #0x00	; 0
      00096B 01                    2667 	.db #0x01	; 1
      00096C 08                    2668 	.db #0x08	; 8
      00096D 00                    2669 	.db #0x00	; 0
      00096E 00                    2670 	.db #0x00	; 0
      00096F 10                    2671 	.db #0x10	; 16
      000970 00                    2672 	.db #0x00	; 0
      000971 00                    2673 	.db #0x00	; 0
      000972 08                    2674 	.db #0x08	; 8
      000973 01                    2675 	.db #0x01	; 1
      000974 00                    2676 	.db #0x00	; 0
      000975 00                    2677 	.db #0x00	; 0
      000976 00                    2678 	.db #0x00	; 0
      000977 00                    2679 	.db #0x00	; 0
      000978 00                    2680 	.db #0x00	; 0
      000979 00                    2681 	.db #0x00	; 0
      00097A 00                    2682 	.db #0x00	; 0
      00097B 00                    2683 	.db #0x00	; 0
      00097C 20                    2684 	.db #0x20	; 32
      00097D 00                    2685 	.db #0x00	; 0
      00097E 00                    2686 	.db #0x00	; 0
      00097F 10                    2687 	.db #0x10	; 16
      000980 00                    2688 	.db #0x00	; 0
      000981 00                    2689 	.db #0x00	; 0
      000982 20                    2690 	.db #0x20	; 32
      000983 00                    2691 	.db #0x00	; 0
      000984 00                    2692 	.db #0x00	; 0
      000985 00                    2693 	.db #0x00	; 0
      000986 00                    2694 	.db #0x00	; 0
      000987 00                    2695 	.db #0x00	; 0
      000988                       2696 _sprite_explosion_4:
      000988 00                    2697 	.db #0x00	; 0
      000989 00                    2698 	.db #0x00	; 0
      00098A 01                    2699 	.db #0x01	; 1
      00098B 10                    2700 	.db #0x10	; 16
      00098C 00                    2701 	.db #0x00	; 0
      00098D 00                    2702 	.db #0x00	; 0
      00098E 00                    2703 	.db #0x00	; 0
      00098F 20                    2704 	.db #0x20	; 32
      000990 00                    2705 	.db #0x00	; 0
      000991 00                    2706 	.db #0x00	; 0
      000992 00                    2707 	.db #0x00	; 0
      000993 10                    2708 	.db #0x10	; 16
      000994 01                    2709 	.db #0x01	; 1
      000995 00                    2710 	.db #0x00	; 0
      000996 00                    2711 	.db #0x00	; 0
      000997 00                    2712 	.db #0x00	; 0
      000998 00                    2713 	.db #0x00	; 0
      000999 00                    2714 	.db #0x00	; 0
      00099A 00                    2715 	.db #0x00	; 0
      00099B 10                    2716 	.db #0x10	; 16
      00099C 00                    2717 	.db #0x00	; 0
      00099D 00                    2718 	.db #0x00	; 0
      00099E 00                    2719 	.db #0x00	; 0
      00099F 08                    2720 	.db #0x08	; 8
      0009A0 00                    2721 	.db #0x00	; 0
      0009A1 00                    2722 	.db #0x00	; 0
      0009A2 00                    2723 	.db #0x00	; 0
      0009A3 10                    2724 	.db #0x10	; 16
      0009A4 00                    2725 	.db #0x00	; 0
      0009A5 00                    2726 	.db #0x00	; 0
      0009A6 00                    2727 	.db #0x00	; 0
      0009A7 00                    2728 	.db #0x00	; 0
      0009A8                       2729 _sprite_explosion_5:
      0009A8 01                    2730 	.db #0x01	; 1
      0009A9 00                    2731 	.db #0x00	; 0
      0009AA 20                    2732 	.db #0x20	; 32
      0009AB 00                    2733 	.db #0x00	; 0
      0009AC 00                    2734 	.db #0x00	; 0
      0009AD 00                    2735 	.db #0x00	; 0
      0009AE 00                    2736 	.db #0x00	; 0
      0009AF 80                    2737 	.db #0x80	; 128
      0009B0 00                    2738 	.db #0x00	; 0
      0009B1 00                    2739 	.db #0x00	; 0
      0009B2 00                    2740 	.db #0x00	; 0
      0009B3 00                    2741 	.db #0x00	; 0
      0009B4 20                    2742 	.db #0x20	; 32
      0009B5 00                    2743 	.db #0x00	; 0
      0009B6 01                    2744 	.db #0x01	; 1
      0009B7 00                    2745 	.db #0x00	; 0
      0009B8 00                    2746 	.db #0x00	; 0
      0009B9 00                    2747 	.db #0x00	; 0
      0009BA 08                    2748 	.db #0x08	; 8
      0009BB 00                    2749 	.db #0x00	; 0
      0009BC 00                    2750 	.db #0x00	; 0
      0009BD 00                    2751 	.db #0x00	; 0
      0009BE 00                    2752 	.db #0x00	; 0
      0009BF 02                    2753 	.db #0x02	; 2
      0009C0 00                    2754 	.db #0x00	; 0
      0009C1 00                    2755 	.db #0x00	; 0
      0009C2 00                    2756 	.db #0x00	; 0
      0009C3 00                    2757 	.db #0x00	; 0
      0009C4 08                    2758 	.db #0x08	; 8
      0009C5 00                    2759 	.db #0x00	; 0
      0009C6 00                    2760 	.db #0x00	; 0
      0009C7 00                    2761 	.db #0x00	; 0
      0009C8                       2762 _sprite_explosion_6:
      0009C8 00                    2763 	.db #0x00	; 0
      0009C9 01                    2764 	.db #0x01	; 1
      0009CA 00                    2765 	.db #0x00	; 0
      0009CB 20                    2766 	.db #0x20	; 32
      0009CC 00                    2767 	.db #0x00	; 0
      0009CD 00                    2768 	.db #0x00	; 0
      0009CE 00                    2769 	.db #0x00	; 0
      0009CF 00                    2770 	.db #0x00	; 0
      0009D0 80                    2771 	.db #0x80	; 128
      0009D1 00                    2772 	.db #0x00	; 0
      0009D2 00                    2773 	.db #0x00	; 0
      0009D3 00                    2774 	.db #0x00	; 0
      0009D4 00                    2775 	.db #0x00	; 0
      0009D5 20                    2776 	.db #0x20	; 32
      0009D6 00                    2777 	.db #0x00	; 0
      0009D7 01                    2778 	.db #0x01	; 1
      0009D8 00                    2779 	.db #0x00	; 0
      0009D9 00                    2780 	.db #0x00	; 0
      0009DA 00                    2781 	.db #0x00	; 0
      0009DB 08                    2782 	.db #0x08	; 8
      0009DC 00                    2783 	.db #0x00	; 0
      0009DD 00                    2784 	.db #0x00	; 0
      0009DE 00                    2785 	.db #0x00	; 0
      0009DF 00                    2786 	.db #0x00	; 0
      0009E0 02                    2787 	.db #0x02	; 2
      0009E1 00                    2788 	.db #0x00	; 0
      0009E2 00                    2789 	.db #0x00	; 0
      0009E3 00                    2790 	.db #0x00	; 0
      0009E4 00                    2791 	.db #0x00	; 0
      0009E5 08                    2792 	.db #0x08	; 8
      0009E6 00                    2793 	.db #0x00	; 0
      0009E7 00                    2794 	.db #0x00	; 0
      0009E8                       2795 _sprite_explosion_7:
      0009E8 00                    2796 	.db #0x00	; 0
      0009E9 00                    2797 	.db #0x00	; 0
      0009EA 01                    2798 	.db #0x01	; 1
      0009EB 00                    2799 	.db #0x00	; 0
      0009EC 20                    2800 	.db #0x20	; 32
      0009ED 00                    2801 	.db #0x00	; 0
      0009EE 00                    2802 	.db #0x00	; 0
      0009EF 00                    2803 	.db #0x00	; 0
      0009F0 00                    2804 	.db #0x00	; 0
      0009F1 80                    2805 	.db #0x80	; 128
      0009F2 00                    2806 	.db #0x00	; 0
      0009F3 00                    2807 	.db #0x00	; 0
      0009F4 00                    2808 	.db #0x00	; 0
      0009F5 00                    2809 	.db #0x00	; 0
      0009F6 20                    2810 	.db #0x20	; 32
      0009F7 00                    2811 	.db #0x00	; 0
      0009F8 00                    2812 	.db #0x00	; 0
      0009F9 00                    2813 	.db #0x00	; 0
      0009FA 00                    2814 	.db #0x00	; 0
      0009FB 00                    2815 	.db #0x00	; 0
      0009FC 08                    2816 	.db #0x08	; 8
      0009FD 00                    2817 	.db #0x00	; 0
      0009FE 00                    2818 	.db #0x00	; 0
      0009FF 00                    2819 	.db #0x00	; 0
      000A00 00                    2820 	.db #0x00	; 0
      000A01 02                    2821 	.db #0x02	; 2
      000A02 00                    2822 	.db #0x00	; 0
      000A03 00                    2823 	.db #0x00	; 0
      000A04 00                    2824 	.db #0x00	; 0
      000A05 00                    2825 	.db #0x00	; 0
      000A06 08                    2826 	.db #0x08	; 8
      000A07 00                    2827 	.db #0x00	; 0
      000A08                       2828 _sprite_block_small_0:
      000A08 5A                    2829 	.db #0x5a	; 90	'Z'
      000A09 24                    2830 	.db #0x24	; 36
      000A0A 80                    2831 	.db #0x80	; 128
      000A0B 10                    2832 	.db #0x10	; 16
      000A0C 80                    2833 	.db #0x80	; 128
      000A0D 20                    2834 	.db #0x20	; 32
      000A0E 00                    2835 	.db #0x00	; 0
      000A0F 00                    2836 	.db #0x00	; 0
      000A10 00                    2837 	.db #0x00	; 0
      000A11 00                    2838 	.db #0x00	; 0
      000A12 00                    2839 	.db #0x00	; 0
      000A13 00                    2840 	.db #0x00	; 0
      000A14 00                    2841 	.db #0x00	; 0
      000A15 00                    2842 	.db #0x00	; 0
      000A16 00                    2843 	.db #0x00	; 0
      000A17 00                    2844 	.db #0x00	; 0
      000A18 00                    2845 	.db #0x00	; 0
      000A19 00                    2846 	.db #0x00	; 0
      000A1A 00                    2847 	.db #0x00	; 0
      000A1B 00                    2848 	.db #0x00	; 0
      000A1C 00                    2849 	.db #0x00	; 0
      000A1D 00                    2850 	.db #0x00	; 0
      000A1E 00                    2851 	.db #0x00	; 0
      000A1F 00                    2852 	.db #0x00	; 0
      000A20 00                    2853 	.db #0x00	; 0
      000A21 00                    2854 	.db #0x00	; 0
      000A22 00                    2855 	.db #0x00	; 0
      000A23 00                    2856 	.db #0x00	; 0
      000A24 00                    2857 	.db #0x00	; 0
      000A25 00                    2858 	.db #0x00	; 0
      000A26 00                    2859 	.db #0x00	; 0
      000A27 00                    2860 	.db #0x00	; 0
      000A28                       2861 _sprite_block_small_1:
      000A28 FF                    2862 	.db #0xff	; 255
      000A29 FF                    2863 	.db #0xff	; 255
      000A2A FF                    2864 	.db #0xff	; 255
      000A2B FF                    2865 	.db #0xff	; 255
      000A2C FF                    2866 	.db #0xff	; 255
      000A2D FF                    2867 	.db #0xff	; 255
      000A2E FF                    2868 	.db #0xff	; 255
      000A2F 7E                    2869 	.db #0x7e	; 126
      000A30 00                    2870 	.db #0x00	; 0
      000A31 00                    2871 	.db #0x00	; 0
      000A32 00                    2872 	.db #0x00	; 0
      000A33 00                    2873 	.db #0x00	; 0
      000A34 00                    2874 	.db #0x00	; 0
      000A35 00                    2875 	.db #0x00	; 0
      000A36 00                    2876 	.db #0x00	; 0
      000A37 00                    2877 	.db #0x00	; 0
      000A38 00                    2878 	.db #0x00	; 0
      000A39 00                    2879 	.db #0x00	; 0
      000A3A 00                    2880 	.db #0x00	; 0
      000A3B 00                    2881 	.db #0x00	; 0
      000A3C 00                    2882 	.db #0x00	; 0
      000A3D 00                    2883 	.db #0x00	; 0
      000A3E 00                    2884 	.db #0x00	; 0
      000A3F 00                    2885 	.db #0x00	; 0
      000A40 00                    2886 	.db #0x00	; 0
      000A41 00                    2887 	.db #0x00	; 0
      000A42 00                    2888 	.db #0x00	; 0
      000A43 00                    2889 	.db #0x00	; 0
      000A44 00                    2890 	.db #0x00	; 0
      000A45 00                    2891 	.db #0x00	; 0
      000A46 00                    2892 	.db #0x00	; 0
      000A47 00                    2893 	.db #0x00	; 0
                                   2894 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   2895 ;	---------------------------------
                                   2896 ; Function HideArrowSprite
                                   2897 ; ---------------------------------
      000A48                       2898 _HideArrowSprite::
                                   2899 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000A48 3E C0            [ 7] 2900 	ld	a, #0xc0
      000A4A F5               [11] 2901 	push	af
      000A4B 33               [ 6] 2902 	inc	sp
      000A4C 21 00 1B         [10] 2903 	ld	hl, #0x1b00
      000A4F E5               [11] 2904 	push	hl
      000A50 CDr00r00         [17] 2905 	call	_WRTVRM
      000A53 F1               [10] 2906 	pop	af
      000A54 33               [ 6] 2907 	inc	sp
                                   2908 ;src\/Graphics\SpritesLogic.h:36: }
      000A55 C9               [10] 2909 	ret
                                   2910 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   2911 ;	---------------------------------
                                   2912 ; Function DrawHitSprite
                                   2913 ; ---------------------------------
      000A56                       2914 _DrawHitSprite::
      000A56 DD E5            [15] 2915 	push	ix
      000A58 DD 21 00 00      [14] 2916 	ld	ix,#0
      000A5C DD 39            [15] 2917 	add	ix,sp
      000A5E 21 EC FF         [10] 2918 	ld	hl, #-20
      000A61 39               [11] 2919 	add	hl, sp
      000A62 F9               [ 6] 2920 	ld	sp, hl
                                   2921 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000A63 21 00 00         [10] 2922 	ld	hl, #0
      000A66 39               [11] 2923 	add	hl, sp
      000A67 EB               [ 4] 2924 	ex	de, hl
      000A68 3E 0F            [ 7] 2925 	ld	a, #0x0f
      000A6A 12               [ 7] 2926 	ld	(de), a
      000A6B 6B               [ 4] 2927 	ld	l, e
      000A6C 62               [ 4] 2928 	ld	h, d
      000A6D 23               [ 6] 2929 	inc	hl
      000A6E 36 0E            [10] 2930 	ld	(hl), #0x0e
      000A70 6B               [ 4] 2931 	ld	l, e
      000A71 62               [ 4] 2932 	ld	h, d
      000A72 23               [ 6] 2933 	inc	hl
      000A73 23               [ 6] 2934 	inc	hl
      000A74 36 09            [10] 2935 	ld	(hl), #0x09
      000A76 6B               [ 4] 2936 	ld	l, e
      000A77 62               [ 4] 2937 	ld	h, d
      000A78 23               [ 6] 2938 	inc	hl
      000A79 23               [ 6] 2939 	inc	hl
      000A7A 23               [ 6] 2940 	inc	hl
      000A7B 36 06            [10] 2941 	ld	(hl), #0x06
      000A7D 21 04 00         [10] 2942 	ld	hl, #0x0004
      000A80 19               [11] 2943 	add	hl, de
      000A81 36 06            [10] 2944 	ld	(hl), #0x06
      000A83 21 05 00         [10] 2945 	ld	hl, #0x0005
      000A86 19               [11] 2946 	add	hl, de
      000A87 36 09            [10] 2947 	ld	(hl), #0x09
      000A89 21 06 00         [10] 2948 	ld	hl, #0x0006
      000A8C 19               [11] 2949 	add	hl, de
      000A8D 36 0E            [10] 2950 	ld	(hl), #0x0e
      000A8F 21 07 00         [10] 2951 	ld	hl, #0x0007
      000A92 19               [11] 2952 	add	hl, de
      000A93 36 0F            [10] 2953 	ld	(hl), #0x0f
                                   2954 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000A95 21 08 00         [10] 2955 	ld	hl, #8
      000A98 39               [11] 2956 	add	hl, sp
      000A99 4D               [ 4] 2957 	ld	c, l
      000A9A 44               [ 4] 2958 	ld	b, h
      000A9B 36 0F            [10] 2959 	ld	(hl), #0x0f
      000A9D 69               [ 4] 2960 	ld	l, c
      000A9E 60               [ 4] 2961 	ld	h, b
      000A9F 23               [ 6] 2962 	inc	hl
      000AA0 36 0E            [10] 2963 	ld	(hl), #0x0e
      000AA2 69               [ 4] 2964 	ld	l, c
      000AA3 60               [ 4] 2965 	ld	h, b
      000AA4 23               [ 6] 2966 	inc	hl
      000AA5 23               [ 6] 2967 	inc	hl
      000AA6 36 03            [10] 2968 	ld	(hl), #0x03
      000AA8 69               [ 4] 2969 	ld	l, c
      000AA9 60               [ 4] 2970 	ld	h, b
      000AAA 23               [ 6] 2971 	inc	hl
      000AAB 23               [ 6] 2972 	inc	hl
      000AAC 23               [ 6] 2973 	inc	hl
      000AAD 36 0C            [10] 2974 	ld	(hl), #0x0c
      000AAF 21 04 00         [10] 2975 	ld	hl, #0x0004
      000AB2 09               [11] 2976 	add	hl, bc
      000AB3 36 0C            [10] 2977 	ld	(hl), #0x0c
      000AB5 21 05 00         [10] 2978 	ld	hl, #0x0005
      000AB8 09               [11] 2979 	add	hl, bc
      000AB9 36 03            [10] 2980 	ld	(hl), #0x03
      000ABB 21 06 00         [10] 2981 	ld	hl, #0x0006
      000ABE 09               [11] 2982 	add	hl, bc
      000ABF 36 0E            [10] 2983 	ld	(hl), #0x0e
      000AC1 21 07 00         [10] 2984 	ld	hl, #0x0007
      000AC4 09               [11] 2985 	add	hl, bc
      000AC5 36 0F            [10] 2986 	ld	(hl), #0x0f
                                   2987 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000AC7 3A 9E FC         [13] 2988 	ld	a,(#_JIFFY + 0)
      000ACA E6 07            [ 7] 2989 	and	a, #0x07
                                   2990 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000ACC 6F               [ 4] 2991 	ld	l, a
      000ACD 83               [ 4] 2992 	add	a,e
      000ACE 5F               [ 4] 2993 	ld	e, a
      000ACF 30 01            [12] 2994 	jr	NC, 00124$
      000AD1 14               [ 4] 2995 	inc	d
      000AD2                       2996 00124$:
      000AD2 1A               [ 7] 2997 	ld	a, (de)
      000AD3 DD 77 FC         [19] 2998 	ld	-4 (ix), a
                                   2999 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000AD6 26 00            [ 7] 3000 	ld	h, #0x00
      000AD8 09               [11] 3001 	add	hl, bc
      000AD9 7E               [ 7] 3002 	ld	a, (hl)
      000ADA DD 77 FD         [19] 3003 	ld	-3 (ix), a
                                   3004 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000ADD 3E 01            [ 7] 3005 	ld	a, #0x01
      000ADF DD 96 05         [19] 3006 	sub	a, 5 (ix)
      000AE2 3E 00            [ 7] 3007 	ld	a, #0x00
      000AE4 17               [ 4] 3008 	rla
      000AE5 DD 77 FE         [19] 3009 	ld	-2 (ix), a
                                   3010 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000AE8 DD 7E 08         [19] 3011 	ld	a, 8 (ix)
      000AEB B7               [ 4] 3012 	or	a, a
      000AEC CArB7r0B         [10] 3013 	jp	Z, 00104$
                                   3014 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000AEF DD 4E 06         [19] 3015 	ld	c, 6 (ix)
      000AF2 79               [ 4] 3016 	ld	a, c
      000AF3 C6 F8            [ 7] 3017 	add	a, #0xf8
      000AF5 DD 77 FF         [19] 3018 	ld	-1 (ix), a
      000AF8 C5               [11] 3019 	push	bc
      000AF9 F5               [11] 3020 	push	af
      000AFA 33               [ 6] 3021 	inc	sp
      000AFB 21 05 1B         [10] 3022 	ld	hl, #0x1b05
      000AFE E5               [11] 3023 	push	hl
      000AFF CDr00r00         [17] 3024 	call	_WRTVRM
      000B02 F1               [10] 3025 	pop	af
      000B03 33               [ 6] 3026 	inc	sp
      000B04 C1               [10] 3027 	pop	bc
                                   3028 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000B05 DD 7E 04         [19] 3029 	ld	a, 4 (ix)
      000B08 C6 FD            [ 7] 3030 	add	a, #0xfd
      000B0A 87               [ 4] 3031 	add	a, a
      000B0B 87               [ 4] 3032 	add	a, a
      000B0C C6 18            [ 7] 3033 	add	a, #0x18
      000B0E C5               [11] 3034 	push	bc
      000B0F F5               [11] 3035 	push	af
      000B10 33               [ 6] 3036 	inc	sp
      000B11 21 06 1B         [10] 3037 	ld	hl, #0x1b06
      000B14 E5               [11] 3038 	push	hl
      000B15 CDr00r00         [17] 3039 	call	_WRTVRM
      000B18 F1               [10] 3040 	pop	af
      000B19 33               [ 6] 3041 	inc	sp
      000B1A C1               [10] 3042 	pop	bc
                                   3043 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000B1B 79               [ 4] 3044 	ld	a, c
      000B1C C6 08            [ 7] 3045 	add	a, #0x08
      000B1E 47               [ 4] 3046 	ld	b, a
      000B1F C5               [11] 3047 	push	bc
      000B20 C5               [11] 3048 	push	bc
      000B21 33               [ 6] 3049 	inc	sp
      000B22 21 09 1B         [10] 3050 	ld	hl, #0x1b09
      000B25 E5               [11] 3051 	push	hl
      000B26 CDr00r00         [17] 3052 	call	_WRTVRM
      000B29 F1               [10] 3053 	pop	af
      000B2A 33               [ 6] 3054 	inc	sp
      000B2B 3E 04            [ 7] 3055 	ld	a, #0x04
      000B2D F5               [11] 3056 	push	af
      000B2E 33               [ 6] 3057 	inc	sp
      000B2F 21 0A 1B         [10] 3058 	ld	hl, #0x1b0a
      000B32 E5               [11] 3059 	push	hl
      000B33 CDr00r00         [17] 3060 	call	_WRTVRM
      000B36 F1               [10] 3061 	pop	af
      000B37 33               [ 6] 3062 	inc	sp
      000B38 C1               [10] 3063 	pop	bc
                                   3064 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000B39 79               [ 4] 3065 	ld	a, c
      000B3A C6 18            [ 7] 3066 	add	a, #0x18
      000B3C 4F               [ 4] 3067 	ld	c, a
      000B3D C5               [11] 3068 	push	bc
      000B3E 79               [ 4] 3069 	ld	a, c
      000B3F F5               [11] 3070 	push	af
      000B40 33               [ 6] 3071 	inc	sp
      000B41 21 0D 1B         [10] 3072 	ld	hl, #0x1b0d
      000B44 E5               [11] 3073 	push	hl
      000B45 CDr00r00         [17] 3074 	call	_WRTVRM
      000B48 F1               [10] 3075 	pop	af
      000B49 33               [ 6] 3076 	inc	sp
      000B4A 3E 08            [ 7] 3077 	ld	a, #0x08
      000B4C F5               [11] 3078 	push	af
      000B4D 33               [ 6] 3079 	inc	sp
      000B4E 21 0E 1B         [10] 3080 	ld	hl, #0x1b0e
      000B51 E5               [11] 3081 	push	hl
      000B52 CDr00r00         [17] 3082 	call	_WRTVRM
      000B55 F1               [10] 3083 	pop	af
      000B56 33               [ 6] 3084 	inc	sp
      000B57 C1               [10] 3085 	pop	bc
                                   3086 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B58 DD 7E FE         [19] 3087 	ld	a, -2 (ix)
      000B5B B7               [ 4] 3088 	or	a, a
      000B5C 28 59            [12] 3089 	jr	Z, 00104$
                                   3090 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000B5E C5               [11] 3091 	push	bc
      000B5F DD 7E FF         [19] 3092 	ld	a, -1 (ix)
      000B62 F5               [11] 3093 	push	af
      000B63 33               [ 6] 3094 	inc	sp
      000B64 21 11 1B         [10] 3095 	ld	hl, #0x1b11
      000B67 E5               [11] 3096 	push	hl
      000B68 CDr00r00         [17] 3097 	call	_WRTVRM
      000B6B F1               [10] 3098 	pop	af
      000B6C 33               [ 6] 3099 	inc	sp
      000B6D C1               [10] 3100 	pop	bc
                                   3101 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000B6E DD 7E 05         [19] 3102 	ld	a, 5 (ix)
      000B71 3D               [ 4] 3103 	dec	a
      000B72 3D               [ 4] 3104 	dec	a
      000B73 87               [ 4] 3105 	add	a, a
      000B74 87               [ 4] 3106 	add	a, a
      000B75 C6 14            [ 7] 3107 	add	a, #0x14
      000B77 C5               [11] 3108 	push	bc
      000B78 F5               [11] 3109 	push	af
      000B79 33               [ 6] 3110 	inc	sp
      000B7A 21 12 1B         [10] 3111 	ld	hl, #0x1b12
      000B7D E5               [11] 3112 	push	hl
      000B7E CDr00r00         [17] 3113 	call	_WRTVRM
      000B81 F1               [10] 3114 	pop	af
      000B82 33               [ 6] 3115 	inc	sp
      000B83 C1               [10] 3116 	pop	bc
                                   3117 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000B84 C5               [11] 3118 	push	bc
      000B85 C5               [11] 3119 	push	bc
      000B86 33               [ 6] 3120 	inc	sp
      000B87 21 15 1B         [10] 3121 	ld	hl, #0x1b15
      000B8A E5               [11] 3122 	push	hl
      000B8B CDr00r00         [17] 3123 	call	_WRTVRM
      000B8E F1               [10] 3124 	pop	af
      000B8F 33               [ 6] 3125 	inc	sp
      000B90 3E 0C            [ 7] 3126 	ld	a, #0x0c
      000B92 F5               [11] 3127 	push	af
      000B93 33               [ 6] 3128 	inc	sp
      000B94 21 16 1B         [10] 3129 	ld	hl, #0x1b16
      000B97 E5               [11] 3130 	push	hl
      000B98 CDr00r00         [17] 3131 	call	_WRTVRM
      000B9B F1               [10] 3132 	pop	af
      000B9C 33               [ 6] 3133 	inc	sp
      000B9D C1               [10] 3134 	pop	bc
                                   3135 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000B9E 79               [ 4] 3136 	ld	a, c
      000B9F F5               [11] 3137 	push	af
      000BA0 33               [ 6] 3138 	inc	sp
      000BA1 21 19 1B         [10] 3139 	ld	hl, #0x1b19
      000BA4 E5               [11] 3140 	push	hl
      000BA5 CDr00r00         [17] 3141 	call	_WRTVRM
      000BA8 F1               [10] 3142 	pop	af
      000BA9 33               [ 6] 3143 	inc	sp
                                   3144 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000BAA 3E 10            [ 7] 3145 	ld	a, #0x10
      000BAC F5               [11] 3146 	push	af
      000BAD 33               [ 6] 3147 	inc	sp
      000BAE 21 1A 1B         [10] 3148 	ld	hl, #0x1b1a
      000BB1 E5               [11] 3149 	push	hl
      000BB2 CDr00r00         [17] 3150 	call	_WRTVRM
      000BB5 F1               [10] 3151 	pop	af
      000BB6 33               [ 6] 3152 	inc	sp
      000BB7                       3153 00104$:
                                   3154 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000BB7 DD 7E 07         [19] 3155 	ld	a, 7 (ix)
      000BBA F5               [11] 3156 	push	af
      000BBB 33               [ 6] 3157 	inc	sp
      000BBC 21 04 1B         [10] 3158 	ld	hl, #0x1b04
      000BBF E5               [11] 3159 	push	hl
      000BC0 CDr00r00         [17] 3160 	call	_WRTVRM
      000BC3 F1               [10] 3161 	pop	af
      000BC4 33               [ 6] 3162 	inc	sp
                                   3163 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000BC5 DD 7E FC         [19] 3164 	ld	a, -4 (ix)
      000BC8 F5               [11] 3165 	push	af
      000BC9 33               [ 6] 3166 	inc	sp
      000BCA 21 07 1B         [10] 3167 	ld	hl, #0x1b07
      000BCD E5               [11] 3168 	push	hl
      000BCE CDr00r00         [17] 3169 	call	_WRTVRM
      000BD1 F1               [10] 3170 	pop	af
      000BD2 33               [ 6] 3171 	inc	sp
                                   3172 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000BD3 DD 7E 07         [19] 3173 	ld	a, 7 (ix)
      000BD6 F5               [11] 3174 	push	af
      000BD7 33               [ 6] 3175 	inc	sp
      000BD8 21 08 1B         [10] 3176 	ld	hl, #0x1b08
      000BDB E5               [11] 3177 	push	hl
      000BDC CDr00r00         [17] 3178 	call	_WRTVRM
      000BDF F1               [10] 3179 	pop	af
      000BE0 33               [ 6] 3180 	inc	sp
                                   3181 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000BE1 DD 7E FC         [19] 3182 	ld	a, -4 (ix)
      000BE4 F5               [11] 3183 	push	af
      000BE5 33               [ 6] 3184 	inc	sp
      000BE6 21 0B 1B         [10] 3185 	ld	hl, #0x1b0b
      000BE9 E5               [11] 3186 	push	hl
      000BEA CDr00r00         [17] 3187 	call	_WRTVRM
      000BED F1               [10] 3188 	pop	af
      000BEE 33               [ 6] 3189 	inc	sp
                                   3190 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000BEF DD 7E 07         [19] 3191 	ld	a, 7 (ix)
      000BF2 F5               [11] 3192 	push	af
      000BF3 33               [ 6] 3193 	inc	sp
      000BF4 21 0C 1B         [10] 3194 	ld	hl, #0x1b0c
      000BF7 E5               [11] 3195 	push	hl
      000BF8 CDr00r00         [17] 3196 	call	_WRTVRM
      000BFB F1               [10] 3197 	pop	af
      000BFC 33               [ 6] 3198 	inc	sp
                                   3199 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000BFD DD 7E FC         [19] 3200 	ld	a, -4 (ix)
      000C00 F5               [11] 3201 	push	af
      000C01 33               [ 6] 3202 	inc	sp
      000C02 21 0F 1B         [10] 3203 	ld	hl, #0x1b0f
      000C05 E5               [11] 3204 	push	hl
      000C06 CDr00r00         [17] 3205 	call	_WRTVRM
      000C09 F1               [10] 3206 	pop	af
      000C0A 33               [ 6] 3207 	inc	sp
                                   3208 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000C0B DD 7E FE         [19] 3209 	ld	a, -2 (ix)
      000C0E B7               [ 4] 3210 	or	a, a
      000C0F 28 52            [12] 3211 	jr	Z, 00107$
                                   3212 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000C11 DD 7E 07         [19] 3213 	ld	a, 7 (ix)
      000C14 C6 10            [ 7] 3214 	add	a, #0x10
      000C16 47               [ 4] 3215 	ld	b, a
      000C17 C5               [11] 3216 	push	bc
      000C18 C5               [11] 3217 	push	bc
      000C19 33               [ 6] 3218 	inc	sp
      000C1A 21 10 1B         [10] 3219 	ld	hl, #0x1b10
      000C1D E5               [11] 3220 	push	hl
      000C1E CDr00r00         [17] 3221 	call	_WRTVRM
      000C21 F1               [10] 3222 	pop	af
      000C22 33               [ 6] 3223 	inc	sp
      000C23 DD 7E FD         [19] 3224 	ld	a, -3 (ix)
      000C26 F5               [11] 3225 	push	af
      000C27 33               [ 6] 3226 	inc	sp
      000C28 21 13 1B         [10] 3227 	ld	hl, #0x1b13
      000C2B E5               [11] 3228 	push	hl
      000C2C CDr00r00         [17] 3229 	call	_WRTVRM
      000C2F F1               [10] 3230 	pop	af
      000C30 33               [ 6] 3231 	inc	sp
      000C31 C1               [10] 3232 	pop	bc
                                   3233 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000C32 C5               [11] 3234 	push	bc
      000C33 C5               [11] 3235 	push	bc
      000C34 33               [ 6] 3236 	inc	sp
      000C35 21 14 1B         [10] 3237 	ld	hl, #0x1b14
      000C38 E5               [11] 3238 	push	hl
      000C39 CDr00r00         [17] 3239 	call	_WRTVRM
      000C3C F1               [10] 3240 	pop	af
      000C3D 33               [ 6] 3241 	inc	sp
      000C3E DD 7E FD         [19] 3242 	ld	a, -3 (ix)
      000C41 F5               [11] 3243 	push	af
      000C42 33               [ 6] 3244 	inc	sp
      000C43 21 17 1B         [10] 3245 	ld	hl, #0x1b17
      000C46 E5               [11] 3246 	push	hl
      000C47 CDr00r00         [17] 3247 	call	_WRTVRM
      000C4A F1               [10] 3248 	pop	af
      000C4B 33               [ 6] 3249 	inc	sp
      000C4C 33               [ 6] 3250 	inc	sp
      000C4D 21 18 1B         [10] 3251 	ld	hl, #0x1b18
      000C50 E5               [11] 3252 	push	hl
      000C51 CDr00r00         [17] 3253 	call	_WRTVRM
      000C54 F1               [10] 3254 	pop	af
      000C55 33               [ 6] 3255 	inc	sp
                                   3256 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000C56 DD 7E FD         [19] 3257 	ld	a, -3 (ix)
      000C59 F5               [11] 3258 	push	af
      000C5A 33               [ 6] 3259 	inc	sp
      000C5B 21 1B 1B         [10] 3260 	ld	hl, #0x1b1b
      000C5E E5               [11] 3261 	push	hl
      000C5F CDr00r00         [17] 3262 	call	_WRTVRM
      000C62 F1               [10] 3263 	pop	af
      000C63                       3264 00107$:
                                   3265 ;src\/Graphics\SpritesLogic.h:119: }
      000C63 DD F9            [10] 3266 	ld	sp, ix
      000C65 DD E1            [14] 3267 	pop	ix
      000C67 C9               [10] 3268 	ret
                                   3269 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3270 ;	---------------------------------
                                   3271 ; Function HideHitSprite
                                   3272 ; ---------------------------------
      000C68                       3273 _HideHitSprite::
                                   3274 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000C68 3E C0            [ 7] 3275 	ld	a, #0xc0
      000C6A F5               [11] 3276 	push	af
      000C6B 33               [ 6] 3277 	inc	sp
      000C6C 21 04 1B         [10] 3278 	ld	hl, #0x1b04
      000C6F E5               [11] 3279 	push	hl
      000C70 CDr00r00         [17] 3280 	call	_WRTVRM
      000C73 F1               [10] 3281 	pop	af
      000C74 33               [ 6] 3282 	inc	sp
                                   3283 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000C75 3E C0            [ 7] 3284 	ld	a, #0xc0
      000C77 F5               [11] 3285 	push	af
      000C78 33               [ 6] 3286 	inc	sp
      000C79 21 08 1B         [10] 3287 	ld	hl, #0x1b08
      000C7C E5               [11] 3288 	push	hl
      000C7D CDr00r00         [17] 3289 	call	_WRTVRM
      000C80 F1               [10] 3290 	pop	af
      000C81 33               [ 6] 3291 	inc	sp
                                   3292 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000C82 3E C0            [ 7] 3293 	ld	a, #0xc0
      000C84 F5               [11] 3294 	push	af
      000C85 33               [ 6] 3295 	inc	sp
      000C86 21 0C 1B         [10] 3296 	ld	hl, #0x1b0c
      000C89 E5               [11] 3297 	push	hl
      000C8A CDr00r00         [17] 3298 	call	_WRTVRM
      000C8D F1               [10] 3299 	pop	af
      000C8E 33               [ 6] 3300 	inc	sp
                                   3301 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000C8F 3E C0            [ 7] 3302 	ld	a, #0xc0
      000C91 F5               [11] 3303 	push	af
      000C92 33               [ 6] 3304 	inc	sp
      000C93 21 10 1B         [10] 3305 	ld	hl, #0x1b10
      000C96 E5               [11] 3306 	push	hl
      000C97 CDr00r00         [17] 3307 	call	_WRTVRM
      000C9A F1               [10] 3308 	pop	af
      000C9B 33               [ 6] 3309 	inc	sp
                                   3310 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000C9C 3E C0            [ 7] 3311 	ld	a, #0xc0
      000C9E F5               [11] 3312 	push	af
      000C9F 33               [ 6] 3313 	inc	sp
      000CA0 21 14 1B         [10] 3314 	ld	hl, #0x1b14
      000CA3 E5               [11] 3315 	push	hl
      000CA4 CDr00r00         [17] 3316 	call	_WRTVRM
      000CA7 F1               [10] 3317 	pop	af
      000CA8 33               [ 6] 3318 	inc	sp
                                   3319 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000CA9 3E C0            [ 7] 3320 	ld	a, #0xc0
      000CAB F5               [11] 3321 	push	af
      000CAC 33               [ 6] 3322 	inc	sp
      000CAD 21 18 1B         [10] 3323 	ld	hl, #0x1b18
      000CB0 E5               [11] 3324 	push	hl
      000CB1 CDr00r00         [17] 3325 	call	_WRTVRM
      000CB4 F1               [10] 3326 	pop	af
      000CB5 33               [ 6] 3327 	inc	sp
                                   3328 ;src\/Graphics\SpritesLogic.h:131: }
      000CB6 C9               [10] 3329 	ret
                                   3330 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3331 ;	---------------------------------
                                   3332 ; Function HideExplosionSprite
                                   3333 ; ---------------------------------
      000CB7                       3334 _HideExplosionSprite::
                                   3335 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000CB7 3E C0            [ 7] 3336 	ld	a, #0xc0
      000CB9 F5               [11] 3337 	push	af
      000CBA 33               [ 6] 3338 	inc	sp
      000CBB 21 1C 1B         [10] 3339 	ld	hl, #0x1b1c
      000CBE E5               [11] 3340 	push	hl
      000CBF CDr00r00         [17] 3341 	call	_WRTVRM
      000CC2 F1               [10] 3342 	pop	af
      000CC3 33               [ 6] 3343 	inc	sp
                                   3344 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000CC4 3E C0            [ 7] 3345 	ld	a, #0xc0
      000CC6 F5               [11] 3346 	push	af
      000CC7 33               [ 6] 3347 	inc	sp
      000CC8 21 20 1B         [10] 3348 	ld	hl, #0x1b20
      000CCB E5               [11] 3349 	push	hl
      000CCC CDr00r00         [17] 3350 	call	_WRTVRM
      000CCF F1               [10] 3351 	pop	af
      000CD0 33               [ 6] 3352 	inc	sp
                                   3353 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000CD1 3E C0            [ 7] 3354 	ld	a, #0xc0
      000CD3 F5               [11] 3355 	push	af
      000CD4 33               [ 6] 3356 	inc	sp
      000CD5 21 24 1B         [10] 3357 	ld	hl, #0x1b24
      000CD8 E5               [11] 3358 	push	hl
      000CD9 CDr00r00         [17] 3359 	call	_WRTVRM
      000CDC F1               [10] 3360 	pop	af
      000CDD 33               [ 6] 3361 	inc	sp
                                   3362 ;src\/Graphics\SpritesLogic.h:137: }
      000CDE C9               [10] 3363 	ret
                                   3364 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3365 ;	---------------------------------
                                   3366 ; Function DrawExplosionSprite
                                   3367 ; ---------------------------------
      000CDF                       3368 _DrawExplosionSprite::
      000CDF 3B               [ 6] 3369 	dec	sp
                                   3370 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000CE0 FD 21 05 00      [14] 3371 	ld	iy, #5
      000CE4 FD 39            [15] 3372 	add	iy, sp
      000CE6 FD 6E 00         [19] 3373 	ld	l, 0 (iy)
      000CE9 CB 3D            [ 8] 3374 	srl	l
      000CEB CB 3D            [ 8] 3375 	srl	l
                                   3376 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000CED 3E 07            [ 7] 3377 	ld	a, #0x07
      000CEF 95               [ 4] 3378 	sub	a, l
      000CF0 30 07            [12] 3379 	jr	NC, 00102$
                                   3380 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000CF2 33               [ 6] 3381 	inc	sp
      000CF3 C3rB7r0C         [10] 3382 	jp	_HideExplosionSprite
      000CF6 C3rC5r0D         [10] 3383 	jp	00104$
      000CF9                       3384 00102$:
                                   3385 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000CF9 29               [11] 3386 	add	hl, hl
      000CFA 29               [11] 3387 	add	hl, hl
                                   3388 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000CFB FD 21 04 00      [14] 3389 	ld	iy, #4
      000CFF FD 39            [15] 3390 	add	iy, sp
      000D01 FD 7E 00         [19] 3391 	ld	a, 0 (iy)
      000D04 C6 F0            [ 7] 3392 	add	a, #0xf0
      000D06 67               [ 4] 3393 	ld	h, a
      000D07 E5               [11] 3394 	push	hl
      000D08 E5               [11] 3395 	push	hl
      000D09 33               [ 6] 3396 	inc	sp
      000D0A 11 1C 1B         [10] 3397 	ld	de, #0x1b1c
      000D0D D5               [11] 3398 	push	de
      000D0E CDr00r00         [17] 3399 	call	_WRTVRM
      000D11 F1               [10] 3400 	pop	af
      000D12 33               [ 6] 3401 	inc	sp
      000D13 21 05 00         [10] 3402 	ld	hl, #5
      000D16 39               [11] 3403 	add	hl, sp
      000D17 7E               [ 7] 3404 	ld	a, (hl)
      000D18 F5               [11] 3405 	push	af
      000D19 33               [ 6] 3406 	inc	sp
      000D1A 11 1D 1B         [10] 3407 	ld	de, #0x1b1d
      000D1D D5               [11] 3408 	push	de
      000D1E CDr00r00         [17] 3409 	call	_WRTVRM
      000D21 F1               [10] 3410 	pop	af
      000D22 33               [ 6] 3411 	inc	sp
      000D23 E1               [10] 3412 	pop	hl
                                   3413 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000D24 7D               [ 4] 3414 	ld	a, l
      000D25 C6 2C            [ 7] 3415 	add	a, #0x2c
      000D27 FD 21 00 00      [14] 3416 	ld	iy, #0
      000D2B FD 39            [15] 3417 	add	iy, sp
      000D2D FD 77 00         [19] 3418 	ld	0 (iy), a
      000D30 E5               [11] 3419 	push	hl
      000D31 F5               [11] 3420 	push	af
      000D32 33               [ 6] 3421 	inc	sp
      000D33 11 1E 1B         [10] 3422 	ld	de, #0x1b1e
      000D36 D5               [11] 3423 	push	de
      000D37 CDr00r00         [17] 3424 	call	_WRTVRM
      000D3A F1               [10] 3425 	pop	af
      000D3B 33               [ 6] 3426 	inc	sp
      000D3C 3E 0F            [ 7] 3427 	ld	a, #0x0f
      000D3E F5               [11] 3428 	push	af
      000D3F 33               [ 6] 3429 	inc	sp
      000D40 11 1F 1B         [10] 3430 	ld	de, #0x1b1f
      000D43 D5               [11] 3431 	push	de
      000D44 CDr00r00         [17] 3432 	call	_WRTVRM
      000D47 F1               [10] 3433 	pop	af
      000D48 33               [ 6] 3434 	inc	sp
      000D49 E1               [10] 3435 	pop	hl
                                   3436 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000D4A E5               [11] 3437 	push	hl
      000D4B E5               [11] 3438 	push	hl
      000D4C 33               [ 6] 3439 	inc	sp
      000D4D 11 20 1B         [10] 3440 	ld	de, #0x1b20
      000D50 D5               [11] 3441 	push	de
      000D51 CDr00r00         [17] 3442 	call	_WRTVRM
      000D54 F1               [10] 3443 	pop	af
      000D55 33               [ 6] 3444 	inc	sp
      000D56 E1               [10] 3445 	pop	hl
                                   3446 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000D57 FD 21 03 00      [14] 3447 	ld	iy, #3
      000D5B FD 39            [15] 3448 	add	iy, sp
      000D5D FD 6E 00         [19] 3449 	ld	l, 0 (iy)
      000D60 7D               [ 4] 3450 	ld	a, l
      000D61 C6 10            [ 7] 3451 	add	a, #0x10
      000D63 E5               [11] 3452 	push	hl
      000D64 F5               [11] 3453 	push	af
      000D65 33               [ 6] 3454 	inc	sp
      000D66 11 21 1B         [10] 3455 	ld	de, #0x1b21
      000D69 D5               [11] 3456 	push	de
      000D6A CDr00r00         [17] 3457 	call	_WRTVRM
      000D6D F1               [10] 3458 	pop	af
      000D6E 33               [ 6] 3459 	inc	sp
      000D6F 21 02 00         [10] 3460 	ld	hl, #2
      000D72 39               [11] 3461 	add	hl, sp
      000D73 7E               [ 7] 3462 	ld	a, (hl)
      000D74 F5               [11] 3463 	push	af
      000D75 33               [ 6] 3464 	inc	sp
      000D76 11 22 1B         [10] 3465 	ld	de, #0x1b22
      000D79 D5               [11] 3466 	push	de
      000D7A CDr00r00         [17] 3467 	call	_WRTVRM
      000D7D F1               [10] 3468 	pop	af
      000D7E 33               [ 6] 3469 	inc	sp
      000D7F 3E 0A            [ 7] 3470 	ld	a, #0x0a
      000D81 F5               [11] 3471 	push	af
      000D82 33               [ 6] 3472 	inc	sp
      000D83 11 23 1B         [10] 3473 	ld	de, #0x1b23
      000D86 D5               [11] 3474 	push	de
      000D87 CDr00r00         [17] 3475 	call	_WRTVRM
      000D8A F1               [10] 3476 	pop	af
      000D8B 33               [ 6] 3477 	inc	sp
      000D8C E1               [10] 3478 	pop	hl
                                   3479 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000D8D E5               [11] 3480 	push	hl
      000D8E E5               [11] 3481 	push	hl
      000D8F 33               [ 6] 3482 	inc	sp
      000D90 11 24 1B         [10] 3483 	ld	de, #0x1b24
      000D93 D5               [11] 3484 	push	de
      000D94 CDr00r00         [17] 3485 	call	_WRTVRM
      000D97 F1               [10] 3486 	pop	af
      000D98 33               [ 6] 3487 	inc	sp
      000D99 E1               [10] 3488 	pop	hl
                                   3489 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000D9A 7D               [ 4] 3490 	ld	a, l
      000D9B C6 20            [ 7] 3491 	add	a, #0x20
      000D9D F5               [11] 3492 	push	af
      000D9E 33               [ 6] 3493 	inc	sp
      000D9F 21 25 1B         [10] 3494 	ld	hl, #0x1b25
      000DA2 E5               [11] 3495 	push	hl
      000DA3 CDr00r00         [17] 3496 	call	_WRTVRM
      000DA6 F1               [10] 3497 	pop	af
      000DA7 33               [ 6] 3498 	inc	sp
                                   3499 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000DA8 21 00 00         [10] 3500 	ld	hl, #0
      000DAB 39               [11] 3501 	add	hl, sp
      000DAC 7E               [ 7] 3502 	ld	a, (hl)
      000DAD F5               [11] 3503 	push	af
      000DAE 33               [ 6] 3504 	inc	sp
      000DAF 21 26 1B         [10] 3505 	ld	hl, #0x1b26
      000DB2 E5               [11] 3506 	push	hl
      000DB3 CDr00r00         [17] 3507 	call	_WRTVRM
      000DB6 F1               [10] 3508 	pop	af
      000DB7 33               [ 6] 3509 	inc	sp
                                   3510 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000DB8 3E 03            [ 7] 3511 	ld	a, #0x03
      000DBA F5               [11] 3512 	push	af
      000DBB 33               [ 6] 3513 	inc	sp
      000DBC 21 27 1B         [10] 3514 	ld	hl, #0x1b27
      000DBF E5               [11] 3515 	push	hl
      000DC0 CDr00r00         [17] 3516 	call	_WRTVRM
      000DC3 F1               [10] 3517 	pop	af
      000DC4 33               [ 6] 3518 	inc	sp
      000DC5                       3519 00104$:
                                   3520 ;src\/Graphics\SpritesLogic.h:164: }
      000DC5 33               [ 6] 3521 	inc	sp
      000DC6 C9               [10] 3522 	ret
                                   3523 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3524 ;	---------------------------------
                                   3525 ; Function DrawChar
                                   3526 ; ---------------------------------
      000DC7                       3527 _DrawChar::
      000DC7 DD E5            [15] 3528 	push	ix
      000DC9 DD 21 00 00      [14] 3529 	ld	ix,#0
      000DCD DD 39            [15] 3530 	add	ix,sp
                                   3531 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000DCF DD 6E 06         [19] 3532 	ld	l, 6 (ix)
      000DD2 26 00            [ 7] 3533 	ld	h, #0x00
      000DD4 29               [11] 3534 	add	hl, hl
      000DD5 29               [11] 3535 	add	hl, hl
      000DD6 29               [11] 3536 	add	hl, hl
      000DD7 29               [11] 3537 	add	hl, hl
      000DD8 29               [11] 3538 	add	hl, hl
      000DD9 01 00 18         [10] 3539 	ld	bc, #0x1800
      000DDC 09               [11] 3540 	add	hl, bc
      000DDD DD 4E 05         [19] 3541 	ld	c, 5 (ix)
      000DE0 06 00            [ 7] 3542 	ld	b, #0x00
      000DE2 09               [11] 3543 	add	hl, bc
      000DE3 DD 7E 04         [19] 3544 	ld	a, 4 (ix)
      000DE6 F5               [11] 3545 	push	af
      000DE7 33               [ 6] 3546 	inc	sp
      000DE8 E5               [11] 3547 	push	hl
      000DE9 CDr00r00         [17] 3548 	call	_WRTVRM
      000DEC F1               [10] 3549 	pop	af
      000DED 33               [ 6] 3550 	inc	sp
                                   3551 ;src\/Graphics\Graphics.h:3: }
      000DEE DD E1            [14] 3552 	pop	ix
      000DF0 C9               [10] 3553 	ret
                                   3554 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3555 ;	---------------------------------
                                   3556 ; Function DrawString
                                   3557 ; ---------------------------------
      000DF1                       3558 _DrawString::
      000DF1 DD E5            [15] 3559 	push	ix
      000DF3 DD 21 00 00      [14] 3560 	ld	ix,#0
      000DF7 DD 39            [15] 3561 	add	ix,sp
                                   3562 ;src\/Graphics\Graphics.h:6: while (*str) {
      000DF9 DD 6E 06         [19] 3563 	ld	l, 6 (ix)
      000DFC DD 4E 04         [19] 3564 	ld	c, 4 (ix)
      000DFF DD 46 05         [19] 3565 	ld	b, 5 (ix)
      000E02                       3566 00101$:
      000E02 0A               [ 7] 3567 	ld	a, (bc)
      000E03 B7               [ 4] 3568 	or	a, a
      000E04 28 1A            [12] 3569 	jr	Z, 00104$
                                   3570 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000E06 55               [ 4] 3571 	ld	d, l
      000E07 2C               [ 4] 3572 	inc	l
      000E08 DD 75 06         [19] 3573 	ld	6 (ix), l
      000E0B 03               [ 6] 3574 	inc	bc
      000E0C C6 0F            [ 7] 3575 	add	a, #0x0f
      000E0E E5               [11] 3576 	push	hl
      000E0F C5               [11] 3577 	push	bc
      000E10 DD 66 07         [19] 3578 	ld	h, 7 (ix)
      000E13 6A               [ 4] 3579 	ld	l, d
      000E14 E5               [11] 3580 	push	hl
      000E15 F5               [11] 3581 	push	af
      000E16 33               [ 6] 3582 	inc	sp
      000E17 CDrC7r0D         [17] 3583 	call	_DrawChar
      000E1A F1               [10] 3584 	pop	af
      000E1B 33               [ 6] 3585 	inc	sp
      000E1C C1               [10] 3586 	pop	bc
      000E1D E1               [10] 3587 	pop	hl
      000E1E 18 E2            [12] 3588 	jr	00101$
      000E20                       3589 00104$:
                                   3590 ;src\/Graphics\Graphics.h:9: }
      000E20 DD E1            [14] 3591 	pop	ix
      000E22 C9               [10] 3592 	ret
                                   3593 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3594 ;	---------------------------------
                                   3595 ; Function DrawNumber
                                   3596 ; ---------------------------------
      000E23                       3597 _DrawNumber::
      000E23 DD E5            [15] 3598 	push	ix
      000E25 DD 21 00 00      [14] 3599 	ld	ix,#0
      000E29 DD 39            [15] 3600 	add	ix,sp
      000E2B 21 FA FF         [10] 3601 	ld	hl, #-6
      000E2E 39               [11] 3602 	add	hl, sp
      000E2F F9               [ 6] 3603 	ld	sp, hl
                                   3604 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000E30 DD 36 FA 01      [19] 3605 	ld	-6 (ix), #0x01
                                   3606 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000E34 DD 66 07         [19] 3607 	ld	h, 7 (ix)
      000E37 DD 6E 06         [19] 3608 	ld	l, 6 (ix)
      000E3A E5               [11] 3609 	push	hl
      000E3B 21rD7r0E         [10] 3610 	ld	hl, #___str_0
      000E3E E5               [11] 3611 	push	hl
      000E3F CDrF1r0D         [17] 3612 	call	_DrawString
      000E42 F1               [10] 3613 	pop	af
      000E43 F1               [10] 3614 	pop	af
                                   3615 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E44 DD 7E 06         [19] 3616 	ld	a, 6 (ix)
      000E47 DD 77 FF         [19] 3617 	ld	-1 (ix), a
      000E4A 1E 06            [ 7] 3618 	ld	e, #0x06
      000E4C                       3619 00109$:
      000E4C 7B               [ 4] 3620 	ld	a, e
      000E4D B7               [ 4] 3621 	or	a, a
      000E4E CArD2r0E         [10] 3622 	jp	Z, 00111$
                                   3623 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000E51 7B               [ 4] 3624 	ld	a, e
      000E52 3D               [ 4] 3625 	dec	a
      000E53 D5               [11] 3626 	push	de
      000E54 57               [ 4] 3627 	ld	d,a
      000E55 1E 0A            [ 7] 3628 	ld	e,#0x0a
      000E57 D5               [11] 3629 	push	de
      000E58 CDr1Dr00         [17] 3630 	call	_Power
      000E5B F1               [10] 3631 	pop	af
      000E5C D1               [10] 3632 	pop	de
      000E5D DD 75 FB         [19] 3633 	ld	-5 (ix), l
      000E60 DD 74 FC         [19] 3634 	ld	-4 (ix), h
                                   3635 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000E63 D5               [11] 3636 	push	de
      000E64 DD 6E FB         [19] 3637 	ld	l, -5 (ix)
      000E67 DD 66 FC         [19] 3638 	ld	h, -4 (ix)
      000E6A E5               [11] 3639 	push	hl
      000E6B DD 6E 04         [19] 3640 	ld	l, 4 (ix)
      000E6E DD 66 05         [19] 3641 	ld	h, 5 (ix)
      000E71 E5               [11] 3642 	push	hl
      000E72 CDr00r00         [17] 3643 	call	__divuint
      000E75 F1               [10] 3644 	pop	af
      000E76 F1               [10] 3645 	pop	af
      000E77 DD 75 FD         [19] 3646 	ld	-3 (ix), l
      000E7A DD 74 FE         [19] 3647 	ld	-2 (ix), h
      000E7D D1               [10] 3648 	pop	de
      000E7E DD 7E FA         [19] 3649 	ld	a, -6 (ix)
      000E81 B7               [ 4] 3650 	or	a, a
      000E82 28 0C            [12] 3651 	jr	Z, 00102$
      000E84 DD 7E FE         [19] 3652 	ld	a, -2 (ix)
      000E87 DD B6 FD         [19] 3653 	or	a, -3 (ix)
      000E8A 28 04            [12] 3654 	jr	Z, 00102$
      000E8C DD 36 FA 00      [19] 3655 	ld	-6 (ix), #0
      000E90                       3656 00102$:
                                   3657 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000E90 DD 7E FA         [19] 3658 	ld	a, -6 (ix)
      000E93 B7               [ 4] 3659 	or	a, a
      000E94 28 04            [12] 3660 	jr	Z, 00104$
      000E96 7B               [ 4] 3661 	ld	a, e
      000E97 3D               [ 4] 3662 	dec	a
      000E98 20 31            [12] 3663 	jr	NZ, 00105$
      000E9A                       3664 00104$:
                                   3665 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000E9A DD 7E FD         [19] 3666 	ld	a, -3 (ix)
      000E9D C6 3F            [ 7] 3667 	add	a, #0x3f
      000E9F D5               [11] 3668 	push	de
      000EA0 DD 66 07         [19] 3669 	ld	h, 7 (ix)
      000EA3 E5               [11] 3670 	push	hl
      000EA4 33               [ 6] 3671 	inc	sp
      000EA5 DD 66 FF         [19] 3672 	ld	h, -1 (ix)
      000EA8 E5               [11] 3673 	push	hl
      000EA9 33               [ 6] 3674 	inc	sp
      000EAA F5               [11] 3675 	push	af
      000EAB 33               [ 6] 3676 	inc	sp
      000EAC CDrC7r0D         [17] 3677 	call	_DrawChar
      000EAF F1               [10] 3678 	pop	af
      000EB0 33               [ 6] 3679 	inc	sp
      000EB1 DD 6E FB         [19] 3680 	ld	l, -5 (ix)
      000EB4 DD 66 FC         [19] 3681 	ld	h, -4 (ix)
      000EB7 E5               [11] 3682 	push	hl
      000EB8 DD 6E 04         [19] 3683 	ld	l, 4 (ix)
      000EBB DD 66 05         [19] 3684 	ld	h, 5 (ix)
      000EBE E5               [11] 3685 	push	hl
      000EBF CDr00r00         [17] 3686 	call	__moduint
      000EC2 F1               [10] 3687 	pop	af
      000EC3 F1               [10] 3688 	pop	af
      000EC4 D1               [10] 3689 	pop	de
      000EC5 DD 75 04         [19] 3690 	ld	4 (ix), l
      000EC8 DD 74 05         [19] 3691 	ld	5 (ix), h
      000ECB                       3692 00105$:
                                   3693 ;src\/Graphics\Graphics.h:29: col++;
      000ECB DD 34 FF         [23] 3694 	inc	-1 (ix)
                                   3695 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000ECE 1D               [ 4] 3696 	dec	e
      000ECF C3r4Cr0E         [10] 3697 	jp	00109$
      000ED2                       3698 00111$:
                                   3699 ;src\/Graphics\Graphics.h:34: }
      000ED2 DD F9            [10] 3700 	ld	sp, ix
      000ED4 DD E1            [14] 3701 	pop	ix
      000ED6 C9               [10] 3702 	ret
      000ED7                       3703 ___str_0:
      000ED7 20 20 20 20 20 20     3704 	.ascii "      "
      000EDD 00                    3705 	.db 0x00
                                   3706 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3707 ;	---------------------------------
                                   3708 ; Function DrawColumn
                                   3709 ; ---------------------------------
      000EDE                       3710 _DrawColumn::
      000EDE DD E5            [15] 3711 	push	ix
      000EE0 DD 21 00 00      [14] 3712 	ld	ix,#0
      000EE4 DD 39            [15] 3713 	add	ix,sp
      000EE6 21 F9 FF         [10] 3714 	ld	hl, #-7
      000EE9 39               [11] 3715 	add	hl, sp
      000EEA F9               [ 6] 3716 	ld	sp, hl
                                   3717 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000EEB DD 4E 04         [19] 3718 	ld	c, 4 (ix)
      000EEE 06 00            [ 7] 3719 	ld	b, #0x00
      000EF0 21 00 18         [10] 3720 	ld	hl, #0x1800
      000EF3 09               [11] 3721 	add	hl, bc
      000EF4 C5               [11] 3722 	push	bc
      000EF5 3E 18            [ 7] 3723 	ld	a, #0x18
      000EF7 F5               [11] 3724 	push	af
      000EF8 33               [ 6] 3725 	inc	sp
      000EF9 E5               [11] 3726 	push	hl
      000EFA CDr00r00         [17] 3727 	call	_WRTVRM
      000EFD F1               [10] 3728 	pop	af
      000EFE 33               [ 6] 3729 	inc	sp
      000EFF C1               [10] 3730 	pop	bc
                                   3731 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000F00 21 01 18         [10] 3732 	ld	hl, #0x1801
      000F03 09               [11] 3733 	add	hl, bc
      000F04 C5               [11] 3734 	push	bc
      000F05 3E 19            [ 7] 3735 	ld	a, #0x19
      000F07 F5               [11] 3736 	push	af
      000F08 33               [ 6] 3737 	inc	sp
      000F09 E5               [11] 3738 	push	hl
      000F0A CDr00r00         [17] 3739 	call	_WRTVRM
      000F0D F1               [10] 3740 	pop	af
      000F0E 33               [ 6] 3741 	inc	sp
      000F0F C1               [10] 3742 	pop	bc
                                   3743 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000F10 21 02 18         [10] 3744 	ld	hl, #0x1802
      000F13 09               [11] 3745 	add	hl, bc
      000F14 C5               [11] 3746 	push	bc
      000F15 3E 1A            [ 7] 3747 	ld	a, #0x1a
      000F17 F5               [11] 3748 	push	af
      000F18 33               [ 6] 3749 	inc	sp
      000F19 E5               [11] 3750 	push	hl
      000F1A CDr00r00         [17] 3751 	call	_WRTVRM
      000F1D F1               [10] 3752 	pop	af
      000F1E 33               [ 6] 3753 	inc	sp
      000F1F C1               [10] 3754 	pop	bc
                                   3755 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000F20 21 20 18         [10] 3756 	ld	hl, #0x1820
      000F23 09               [11] 3757 	add	hl, bc
      000F24 C5               [11] 3758 	push	bc
      000F25 3E 1B            [ 7] 3759 	ld	a, #0x1b
      000F27 F5               [11] 3760 	push	af
      000F28 33               [ 6] 3761 	inc	sp
      000F29 E5               [11] 3762 	push	hl
      000F2A CDr00r00         [17] 3763 	call	_WRTVRM
      000F2D F1               [10] 3764 	pop	af
      000F2E 33               [ 6] 3765 	inc	sp
      000F2F C1               [10] 3766 	pop	bc
                                   3767 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000F30 21 21 18         [10] 3768 	ld	hl, #0x1821
      000F33 09               [11] 3769 	add	hl, bc
      000F34 C5               [11] 3770 	push	bc
      000F35 3E 1C            [ 7] 3771 	ld	a, #0x1c
      000F37 F5               [11] 3772 	push	af
      000F38 33               [ 6] 3773 	inc	sp
      000F39 E5               [11] 3774 	push	hl
      000F3A CDr00r00         [17] 3775 	call	_WRTVRM
      000F3D F1               [10] 3776 	pop	af
      000F3E 33               [ 6] 3777 	inc	sp
      000F3F C1               [10] 3778 	pop	bc
                                   3779 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000F40 21 22 18         [10] 3780 	ld	hl, #0x1822
      000F43 09               [11] 3781 	add	hl, bc
      000F44 C5               [11] 3782 	push	bc
      000F45 3E 1D            [ 7] 3783 	ld	a, #0x1d
      000F47 F5               [11] 3784 	push	af
      000F48 33               [ 6] 3785 	inc	sp
      000F49 E5               [11] 3786 	push	hl
      000F4A CDr00r00         [17] 3787 	call	_WRTVRM
      000F4D F1               [10] 3788 	pop	af
      000F4E 33               [ 6] 3789 	inc	sp
      000F4F C1               [10] 3790 	pop	bc
                                   3791 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F50 21 40 18         [10] 3792 	ld	hl, #0x1840
      000F53 09               [11] 3793 	add	hl, bc
      000F54 E3               [19] 3794 	ex	(sp), hl
      000F55 21 41 18         [10] 3795 	ld	hl, #0x1841
      000F58 09               [11] 3796 	add	hl, bc
      000F59 DD 75 FB         [19] 3797 	ld	-5 (ix), l
      000F5C DD 74 FC         [19] 3798 	ld	-4 (ix), h
      000F5F 21 42 18         [10] 3799 	ld	hl, #0x1842
      000F62 09               [11] 3800 	add	hl, bc
      000F63 DD 75 FD         [19] 3801 	ld	-3 (ix), l
      000F66 DD 74 FE         [19] 3802 	ld	-2 (ix), h
      000F69 DD 36 FF 00      [19] 3803 	ld	-1 (ix), #0
      000F6D                       3804 00103$:
      000F6D DD 7E FF         [19] 3805 	ld	a, -1 (ix)
      000F70 D6 14            [ 7] 3806 	sub	a, #0x14
      000F72 30 4A            [12] 3807 	jr	NC, 00101$
                                   3808 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000F74 DD 5E FF         [19] 3809 	ld	e, -1 (ix)
      000F77 16 00            [ 7] 3810 	ld	d, #0x00
      000F79 EB               [ 4] 3811 	ex	de, hl
      000F7A 29               [11] 3812 	add	hl, hl
      000F7B 29               [11] 3813 	add	hl, hl
      000F7C 29               [11] 3814 	add	hl, hl
      000F7D 29               [11] 3815 	add	hl, hl
      000F7E 29               [11] 3816 	add	hl, hl
      000F7F EB               [ 4] 3817 	ex	de, hl
      000F80 E1               [10] 3818 	pop	hl
      000F81 E5               [11] 3819 	push	hl
      000F82 19               [11] 3820 	add	hl, de
      000F83 C5               [11] 3821 	push	bc
      000F84 D5               [11] 3822 	push	de
      000F85 3E 1E            [ 7] 3823 	ld	a, #0x1e
      000F87 F5               [11] 3824 	push	af
      000F88 33               [ 6] 3825 	inc	sp
      000F89 E5               [11] 3826 	push	hl
      000F8A CDr00r00         [17] 3827 	call	_WRTVRM
      000F8D F1               [10] 3828 	pop	af
      000F8E 33               [ 6] 3829 	inc	sp
      000F8F D1               [10] 3830 	pop	de
      000F90 C1               [10] 3831 	pop	bc
                                   3832 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000F91 DD 6E FB         [19] 3833 	ld	l, -5 (ix)
      000F94 DD 66 FC         [19] 3834 	ld	h, -4 (ix)
      000F97 19               [11] 3835 	add	hl, de
      000F98 C5               [11] 3836 	push	bc
      000F99 D5               [11] 3837 	push	de
      000F9A 3E 1F            [ 7] 3838 	ld	a, #0x1f
      000F9C F5               [11] 3839 	push	af
      000F9D 33               [ 6] 3840 	inc	sp
      000F9E E5               [11] 3841 	push	hl
      000F9F CDr00r00         [17] 3842 	call	_WRTVRM
      000FA2 F1               [10] 3843 	pop	af
      000FA3 33               [ 6] 3844 	inc	sp
      000FA4 D1               [10] 3845 	pop	de
      000FA5 C1               [10] 3846 	pop	bc
                                   3847 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000FA6 DD 6E FD         [19] 3848 	ld	l, -3 (ix)
      000FA9 DD 66 FE         [19] 3849 	ld	h, -2 (ix)
      000FAC 19               [11] 3850 	add	hl, de
      000FAD C5               [11] 3851 	push	bc
      000FAE 3E 20            [ 7] 3852 	ld	a, #0x20
      000FB0 F5               [11] 3853 	push	af
      000FB1 33               [ 6] 3854 	inc	sp
      000FB2 E5               [11] 3855 	push	hl
      000FB3 CDr00r00         [17] 3856 	call	_WRTVRM
      000FB6 F1               [10] 3857 	pop	af
      000FB7 33               [ 6] 3858 	inc	sp
      000FB8 C1               [10] 3859 	pop	bc
                                   3860 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000FB9 DD 34 FF         [23] 3861 	inc	-1 (ix)
      000FBC 18 AF            [12] 3862 	jr	00103$
      000FBE                       3863 00101$:
                                   3864 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000FBE 21 00 19         [10] 3865 	ld	hl, #0x1900
      000FC1 09               [11] 3866 	add	hl, bc
      000FC2 C5               [11] 3867 	push	bc
      000FC3 3E 21            [ 7] 3868 	ld	a, #0x21
      000FC5 F5               [11] 3869 	push	af
      000FC6 33               [ 6] 3870 	inc	sp
      000FC7 E5               [11] 3871 	push	hl
      000FC8 CDr00r00         [17] 3872 	call	_WRTVRM
      000FCB F1               [10] 3873 	pop	af
      000FCC 33               [ 6] 3874 	inc	sp
      000FCD C1               [10] 3875 	pop	bc
                                   3876 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000FCE 21 01 19         [10] 3877 	ld	hl, #0x1901
      000FD1 09               [11] 3878 	add	hl, bc
      000FD2 C5               [11] 3879 	push	bc
      000FD3 3E 22            [ 7] 3880 	ld	a, #0x22
      000FD5 F5               [11] 3881 	push	af
      000FD6 33               [ 6] 3882 	inc	sp
      000FD7 E5               [11] 3883 	push	hl
      000FD8 CDr00r00         [17] 3884 	call	_WRTVRM
      000FDB F1               [10] 3885 	pop	af
      000FDC 33               [ 6] 3886 	inc	sp
      000FDD C1               [10] 3887 	pop	bc
                                   3888 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000FDE 21 02 19         [10] 3889 	ld	hl, #0x1902
      000FE1 09               [11] 3890 	add	hl, bc
      000FE2 C5               [11] 3891 	push	bc
      000FE3 3E 23            [ 7] 3892 	ld	a, #0x23
      000FE5 F5               [11] 3893 	push	af
      000FE6 33               [ 6] 3894 	inc	sp
      000FE7 E5               [11] 3895 	push	hl
      000FE8 CDr00r00         [17] 3896 	call	_WRTVRM
      000FEB F1               [10] 3897 	pop	af
      000FEC 33               [ 6] 3898 	inc	sp
      000FED C1               [10] 3899 	pop	bc
                                   3900 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000FEE 21 00 1A         [10] 3901 	ld	hl, #0x1a00
      000FF1 09               [11] 3902 	add	hl, bc
      000FF2 C5               [11] 3903 	push	bc
      000FF3 3E 21            [ 7] 3904 	ld	a, #0x21
      000FF5 F5               [11] 3905 	push	af
      000FF6 33               [ 6] 3906 	inc	sp
      000FF7 E5               [11] 3907 	push	hl
      000FF8 CDr00r00         [17] 3908 	call	_WRTVRM
      000FFB F1               [10] 3909 	pop	af
      000FFC 33               [ 6] 3910 	inc	sp
      000FFD C1               [10] 3911 	pop	bc
                                   3912 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000FFE 21 01 1A         [10] 3913 	ld	hl, #0x1a01
      001001 09               [11] 3914 	add	hl, bc
      001002 C5               [11] 3915 	push	bc
      001003 3E 22            [ 7] 3916 	ld	a, #0x22
      001005 F5               [11] 3917 	push	af
      001006 33               [ 6] 3918 	inc	sp
      001007 E5               [11] 3919 	push	hl
      001008 CDr00r00         [17] 3920 	call	_WRTVRM
      00100B F1               [10] 3921 	pop	af
      00100C 33               [ 6] 3922 	inc	sp
      00100D C1               [10] 3923 	pop	bc
                                   3924 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      00100E 21 02 1A         [10] 3925 	ld	hl, #0x1a02
      001011 09               [11] 3926 	add	hl, bc
      001012 C5               [11] 3927 	push	bc
      001013 3E 23            [ 7] 3928 	ld	a, #0x23
      001015 F5               [11] 3929 	push	af
      001016 33               [ 6] 3930 	inc	sp
      001017 E5               [11] 3931 	push	hl
      001018 CDr00r00         [17] 3932 	call	_WRTVRM
      00101B F1               [10] 3933 	pop	af
      00101C 33               [ 6] 3934 	inc	sp
      00101D C1               [10] 3935 	pop	bc
                                   3936 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      00101E 21 C0 1A         [10] 3937 	ld	hl, #0x1ac0
      001021 09               [11] 3938 	add	hl, bc
      001022 C5               [11] 3939 	push	bc
      001023 3E 24            [ 7] 3940 	ld	a, #0x24
      001025 F5               [11] 3941 	push	af
      001026 33               [ 6] 3942 	inc	sp
      001027 E5               [11] 3943 	push	hl
      001028 CDr00r00         [17] 3944 	call	_WRTVRM
      00102B F1               [10] 3945 	pop	af
      00102C 33               [ 6] 3946 	inc	sp
      00102D C1               [10] 3947 	pop	bc
                                   3948 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      00102E 21 C1 1A         [10] 3949 	ld	hl, #0x1ac1
      001031 09               [11] 3950 	add	hl, bc
      001032 C5               [11] 3951 	push	bc
      001033 3E 25            [ 7] 3952 	ld	a, #0x25
      001035 F5               [11] 3953 	push	af
      001036 33               [ 6] 3954 	inc	sp
      001037 E5               [11] 3955 	push	hl
      001038 CDr00r00         [17] 3956 	call	_WRTVRM
      00103B F1               [10] 3957 	pop	af
      00103C 33               [ 6] 3958 	inc	sp
      00103D C1               [10] 3959 	pop	bc
                                   3960 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      00103E 21 C2 1A         [10] 3961 	ld	hl, #0x1ac2
      001041 09               [11] 3962 	add	hl, bc
      001042 C5               [11] 3963 	push	bc
      001043 3E 26            [ 7] 3964 	ld	a, #0x26
      001045 F5               [11] 3965 	push	af
      001046 33               [ 6] 3966 	inc	sp
      001047 E5               [11] 3967 	push	hl
      001048 CDr00r00         [17] 3968 	call	_WRTVRM
      00104B F1               [10] 3969 	pop	af
      00104C 33               [ 6] 3970 	inc	sp
      00104D C1               [10] 3971 	pop	bc
                                   3972 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00104E 21 E0 1A         [10] 3973 	ld	hl, #0x1ae0
      001051 09               [11] 3974 	add	hl, bc
      001052 C5               [11] 3975 	push	bc
      001053 3E 27            [ 7] 3976 	ld	a, #0x27
      001055 F5               [11] 3977 	push	af
      001056 33               [ 6] 3978 	inc	sp
      001057 E5               [11] 3979 	push	hl
      001058 CDr00r00         [17] 3980 	call	_WRTVRM
      00105B F1               [10] 3981 	pop	af
      00105C 33               [ 6] 3982 	inc	sp
      00105D C1               [10] 3983 	pop	bc
                                   3984 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00105E 21 E1 1A         [10] 3985 	ld	hl, #0x1ae1
      001061 09               [11] 3986 	add	hl, bc
      001062 C5               [11] 3987 	push	bc
      001063 3E 28            [ 7] 3988 	ld	a, #0x28
      001065 F5               [11] 3989 	push	af
      001066 33               [ 6] 3990 	inc	sp
      001067 E5               [11] 3991 	push	hl
      001068 CDr00r00         [17] 3992 	call	_WRTVRM
      00106B F1               [10] 3993 	pop	af
      00106C 33               [ 6] 3994 	inc	sp
      00106D C1               [10] 3995 	pop	bc
                                   3996 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00106E 21 E2 1A         [10] 3997 	ld	hl, #0x1ae2
      001071 09               [11] 3998 	add	hl, bc
      001072 3E 29            [ 7] 3999 	ld	a, #0x29
      001074 F5               [11] 4000 	push	af
      001075 33               [ 6] 4001 	inc	sp
      001076 E5               [11] 4002 	push	hl
      001077 CDr00r00         [17] 4003 	call	_WRTVRM
                                   4004 ;src\/Graphics\Graphics.h:64: }
      00107A DD F9            [10] 4005 	ld	sp,ix
      00107C DD E1            [14] 4006 	pop	ix
      00107E C9               [10] 4007 	ret
                                   4008 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   4009 ;	---------------------------------
                                   4010 ; Function GetNextPieceColors
                                   4011 ; ---------------------------------
      00107F                       4012 _GetNextPieceColors::
                                   4013 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      00107F FD 21 02 00      [14] 4014 	ld	iy, #2
      001083 FD 39            [15] 4015 	add	iy, sp
      001085 FD 7E 00         [19] 4016 	ld	a, 0 (iy)
      001088 D6 04            [ 7] 4017 	sub	a, #0x04
      00108A 28 22            [12] 4018 	jr	Z, 00102$
      00108C FD 7E 00         [19] 4019 	ld	a, 0 (iy)
      00108F D6 08            [ 7] 4020 	sub	a, #0x08
      001091 28 26            [12] 4021 	jr	Z, 00103$
      001093 FD 7E 00         [19] 4022 	ld	a, 0 (iy)
      001096 D6 0C            [ 7] 4023 	sub	a, #0x0c
      001098 28 09            [12] 4024 	jr	Z, 00101$
      00109A FD 7E 00         [19] 4025 	ld	a, 0 (iy)
      00109D D6 14            [ 7] 4026 	sub	a, #0x14
      00109F 28 23            [12] 4027 	jr	Z, 00104$
      0010A1 18 2C            [12] 4028 	jr	00105$
                                   4029 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      0010A3                       4030 00101$:
                                   4031 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      0010A3 3E 07            [ 7] 4032 	ld	a, #0x07
      0010A5 32r9Br00         [13] 4033 	ld	(#_nextPieceColor_Front), a
                                   4034 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      0010A8 3E 04            [ 7] 4035 	ld	a, #0x04
      0010AA 32r9Cr00         [13] 4036 	ld	(#_nextPieceColor_Back), a
                                   4037 ;src\/Graphics\Graphics.h:73: break;
      0010AD C9               [10] 4038 	ret
                                   4039 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      0010AE                       4040 00102$:
                                   4041 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      0010AE 3E 03            [ 7] 4042 	ld	a, #0x03
      0010B0 32r9Br00         [13] 4043 	ld	(#_nextPieceColor_Front), a
                                   4044 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      0010B3 3E 0C            [ 7] 4045 	ld	a, #0x0c
      0010B5 32r9Cr00         [13] 4046 	ld	(#_nextPieceColor_Back), a
                                   4047 ;src\/Graphics\Graphics.h:77: break;
      0010B8 C9               [10] 4048 	ret
                                   4049 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      0010B9                       4050 00103$:
                                   4051 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      0010B9 3E 09            [ 7] 4052 	ld	a, #0x09
      0010BB 32r9Br00         [13] 4053 	ld	(#_nextPieceColor_Front), a
                                   4054 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      0010BE 3E 06            [ 7] 4055 	ld	a, #0x06
      0010C0 32r9Cr00         [13] 4056 	ld	(#_nextPieceColor_Back), a
                                   4057 ;src\/Graphics\Graphics.h:81: break;
      0010C3 C9               [10] 4058 	ret
                                   4059 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      0010C4                       4060 00104$:
                                   4061 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      0010C4 3E 0B            [ 7] 4062 	ld	a, #0x0b
      0010C6 32r9Br00         [13] 4063 	ld	(#_nextPieceColor_Front), a
                                   4064 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      0010C9 3E 0A            [ 7] 4065 	ld	a, #0x0a
      0010CB 32r9Cr00         [13] 4066 	ld	(#_nextPieceColor_Back), a
                                   4067 ;src\/Graphics\Graphics.h:85: break;
      0010CE C9               [10] 4068 	ret
                                   4069 ;src\/Graphics\Graphics.h:86: default:
      0010CF                       4070 00105$:
                                   4071 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      0010CF 3E 0F            [ 7] 4072 	ld	a, #0x0f
      0010D1 32r9Br00         [13] 4073 	ld	(#_nextPieceColor_Front), a
                                   4074 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      0010D4 3E 0D            [ 7] 4075 	ld	a, #0x0d
      0010D6 32r9Cr00         [13] 4076 	ld	(#_nextPieceColor_Back), a
                                   4077 ;src\/Graphics\Graphics.h:89: }  
                                   4078 ;src\/Graphics\Graphics.h:90: }
      0010D9 C9               [10] 4079 	ret
                                   4080 ;src\/Graphics\Graphics.h:92: void DrawNextPiece() {
                                   4081 ;	---------------------------------
                                   4082 ; Function DrawNextPiece
                                   4083 ; ---------------------------------
      0010DA                       4084 _DrawNextPiece::
                                   4085 ;src\/Graphics\Graphics.h:94: GetNextPieceColors(nextTopPiece);
      0010DA 3Ar93r00         [13] 4086 	ld	a,(#_nextTopPiece + 0)
      0010DD F5               [11] 4087 	push	af
      0010DE 33               [ 6] 4088 	inc	sp
      0010DF CDr7Fr10         [17] 4089 	call	_GetNextPieceColors
      0010E2 33               [ 6] 4090 	inc	sp
                                   4091 ;src\/Graphics\Graphics.h:95: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      0010E3 3E 20            [ 7] 4092 	ld	a, #0x20
      0010E5 F5               [11] 4093 	push	af
      0010E6 33               [ 6] 4094 	inc	sp
      0010E7 21 28 1B         [10] 4095 	ld	hl, #0x1b28
      0010EA E5               [11] 4096 	push	hl
      0010EB CDr00r00         [17] 4097 	call	_WRTVRM
      0010EE F1               [10] 4098 	pop	af
      0010EF 33               [ 6] 4099 	inc	sp
                                   4100 ;src\/Graphics\Graphics.h:96: WRTVRM(SPRATT + 41, 	(4 * 8)-4);
      0010F0 3E 1C            [ 7] 4101 	ld	a, #0x1c
      0010F2 F5               [11] 4102 	push	af
      0010F3 33               [ 6] 4103 	inc	sp
      0010F4 21 29 1B         [10] 4104 	ld	hl, #0x1b29
      0010F7 E5               [11] 4105 	push	hl
      0010F8 CDr00r00         [17] 4106 	call	_WRTVRM
      0010FB F1               [10] 4107 	pop	af
      0010FC 33               [ 6] 4108 	inc	sp
                                   4109 ;src\/Graphics\Graphics.h:97: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      0010FD 3E 4C            [ 7] 4110 	ld	a, #0x4c
      0010FF F5               [11] 4111 	push	af
      001100 33               [ 6] 4112 	inc	sp
      001101 21 2A 1B         [10] 4113 	ld	hl, #0x1b2a
      001104 E5               [11] 4114 	push	hl
      001105 CDr00r00         [17] 4115 	call	_WRTVRM
      001108 F1               [10] 4116 	pop	af
      001109 33               [ 6] 4117 	inc	sp
                                   4118 ;src\/Graphics\Graphics.h:98: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      00110A 3Ar9Br00         [13] 4119 	ld	a,(#_nextPieceColor_Front + 0)
      00110D F5               [11] 4120 	push	af
      00110E 33               [ 6] 4121 	inc	sp
      00110F 21 2B 1B         [10] 4122 	ld	hl, #0x1b2b
      001112 E5               [11] 4123 	push	hl
      001113 CDr00r00         [17] 4124 	call	_WRTVRM
      001116 F1               [10] 4125 	pop	af
      001117 33               [ 6] 4126 	inc	sp
                                   4127 ;src\/Graphics\Graphics.h:99: WRTVRM(SPRATT + 44, 	(4 * 8));
      001118 3E 20            [ 7] 4128 	ld	a, #0x20
      00111A F5               [11] 4129 	push	af
      00111B 33               [ 6] 4130 	inc	sp
      00111C 21 2C 1B         [10] 4131 	ld	hl, #0x1b2c
      00111F E5               [11] 4132 	push	hl
      001120 CDr00r00         [17] 4133 	call	_WRTVRM
      001123 F1               [10] 4134 	pop	af
      001124 33               [ 6] 4135 	inc	sp
                                   4136 ;src\/Graphics\Graphics.h:100: WRTVRM(SPRATT + 45, 	(4 * 8)-4);
      001125 3E 1C            [ 7] 4137 	ld	a, #0x1c
      001127 F5               [11] 4138 	push	af
      001128 33               [ 6] 4139 	inc	sp
      001129 21 2D 1B         [10] 4140 	ld	hl, #0x1b2d
      00112C E5               [11] 4141 	push	hl
      00112D CDr00r00         [17] 4142 	call	_WRTVRM
      001130 F1               [10] 4143 	pop	af
      001131 33               [ 6] 4144 	inc	sp
                                   4145 ;src\/Graphics\Graphics.h:101: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001132 3E 50            [ 7] 4146 	ld	a, #0x50
      001134 F5               [11] 4147 	push	af
      001135 33               [ 6] 4148 	inc	sp
      001136 21 2E 1B         [10] 4149 	ld	hl, #0x1b2e
      001139 E5               [11] 4150 	push	hl
      00113A CDr00r00         [17] 4151 	call	_WRTVRM
      00113D F1               [10] 4152 	pop	af
      00113E 33               [ 6] 4153 	inc	sp
                                   4154 ;src\/Graphics\Graphics.h:102: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      00113F 3Ar9Cr00         [13] 4155 	ld	a,(#_nextPieceColor_Back + 0)
      001142 F5               [11] 4156 	push	af
      001143 33               [ 6] 4157 	inc	sp
      001144 21 2F 1B         [10] 4158 	ld	hl, #0x1b2f
      001147 E5               [11] 4159 	push	hl
      001148 CDr00r00         [17] 4160 	call	_WRTVRM
      00114B F1               [10] 4161 	pop	af
      00114C 33               [ 6] 4162 	inc	sp
                                   4163 ;src\/Graphics\Graphics.h:104: GetNextPieceColors(nextMidPiece);
      00114D 3Ar94r00         [13] 4164 	ld	a,(#_nextMidPiece + 0)
      001150 F5               [11] 4165 	push	af
      001151 33               [ 6] 4166 	inc	sp
      001152 CDr7Fr10         [17] 4167 	call	_GetNextPieceColors
      001155 33               [ 6] 4168 	inc	sp
                                   4169 ;src\/Graphics\Graphics.h:105: WRTVRM(SPRATT + 48, 	(5 * 8));
      001156 3E 28            [ 7] 4170 	ld	a, #0x28
      001158 F5               [11] 4171 	push	af
      001159 33               [ 6] 4172 	inc	sp
      00115A 21 30 1B         [10] 4173 	ld	hl, #0x1b30
      00115D E5               [11] 4174 	push	hl
      00115E CDr00r00         [17] 4175 	call	_WRTVRM
      001161 F1               [10] 4176 	pop	af
      001162 33               [ 6] 4177 	inc	sp
                                   4178 ;src\/Graphics\Graphics.h:106: WRTVRM(SPRATT + 49, 	(4 * 8)-4);
      001163 3E 1C            [ 7] 4179 	ld	a, #0x1c
      001165 F5               [11] 4180 	push	af
      001166 33               [ 6] 4181 	inc	sp
      001167 21 31 1B         [10] 4182 	ld	hl, #0x1b31
      00116A E5               [11] 4183 	push	hl
      00116B CDr00r00         [17] 4184 	call	_WRTVRM
      00116E F1               [10] 4185 	pop	af
      00116F 33               [ 6] 4186 	inc	sp
                                   4187 ;src\/Graphics\Graphics.h:107: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      001170 3E 4C            [ 7] 4188 	ld	a, #0x4c
      001172 F5               [11] 4189 	push	af
      001173 33               [ 6] 4190 	inc	sp
      001174 21 32 1B         [10] 4191 	ld	hl, #0x1b32
      001177 E5               [11] 4192 	push	hl
      001178 CDr00r00         [17] 4193 	call	_WRTVRM
      00117B F1               [10] 4194 	pop	af
      00117C 33               [ 6] 4195 	inc	sp
                                   4196 ;src\/Graphics\Graphics.h:108: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      00117D 3Ar9Br00         [13] 4197 	ld	a,(#_nextPieceColor_Front + 0)
      001180 F5               [11] 4198 	push	af
      001181 33               [ 6] 4199 	inc	sp
      001182 21 33 1B         [10] 4200 	ld	hl, #0x1b33
      001185 E5               [11] 4201 	push	hl
      001186 CDr00r00         [17] 4202 	call	_WRTVRM
      001189 F1               [10] 4203 	pop	af
      00118A 33               [ 6] 4204 	inc	sp
                                   4205 ;src\/Graphics\Graphics.h:109: WRTVRM(SPRATT + 52, 	(5 * 8));
      00118B 3E 28            [ 7] 4206 	ld	a, #0x28
      00118D F5               [11] 4207 	push	af
      00118E 33               [ 6] 4208 	inc	sp
      00118F 21 34 1B         [10] 4209 	ld	hl, #0x1b34
      001192 E5               [11] 4210 	push	hl
      001193 CDr00r00         [17] 4211 	call	_WRTVRM
      001196 F1               [10] 4212 	pop	af
      001197 33               [ 6] 4213 	inc	sp
                                   4214 ;src\/Graphics\Graphics.h:110: WRTVRM(SPRATT + 53, 	(4 * 8)-4);
      001198 3E 1C            [ 7] 4215 	ld	a, #0x1c
      00119A F5               [11] 4216 	push	af
      00119B 33               [ 6] 4217 	inc	sp
      00119C 21 35 1B         [10] 4218 	ld	hl, #0x1b35
      00119F E5               [11] 4219 	push	hl
      0011A0 CDr00r00         [17] 4220 	call	_WRTVRM
      0011A3 F1               [10] 4221 	pop	af
      0011A4 33               [ 6] 4222 	inc	sp
                                   4223 ;src\/Graphics\Graphics.h:111: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0011A5 3E 50            [ 7] 4224 	ld	a, #0x50
      0011A7 F5               [11] 4225 	push	af
      0011A8 33               [ 6] 4226 	inc	sp
      0011A9 21 36 1B         [10] 4227 	ld	hl, #0x1b36
      0011AC E5               [11] 4228 	push	hl
      0011AD CDr00r00         [17] 4229 	call	_WRTVRM
      0011B0 F1               [10] 4230 	pop	af
      0011B1 33               [ 6] 4231 	inc	sp
                                   4232 ;src\/Graphics\Graphics.h:112: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      0011B2 3Ar9Cr00         [13] 4233 	ld	a,(#_nextPieceColor_Back + 0)
      0011B5 F5               [11] 4234 	push	af
      0011B6 33               [ 6] 4235 	inc	sp
      0011B7 21 37 1B         [10] 4236 	ld	hl, #0x1b37
      0011BA E5               [11] 4237 	push	hl
      0011BB CDr00r00         [17] 4238 	call	_WRTVRM
      0011BE F1               [10] 4239 	pop	af
      0011BF 33               [ 6] 4240 	inc	sp
                                   4241 ;src\/Graphics\Graphics.h:114: GetNextPieceColors(nextBottomPiece);
      0011C0 3Ar95r00         [13] 4242 	ld	a,(#_nextBottomPiece + 0)
      0011C3 F5               [11] 4243 	push	af
      0011C4 33               [ 6] 4244 	inc	sp
      0011C5 CDr7Fr10         [17] 4245 	call	_GetNextPieceColors
      0011C8 33               [ 6] 4246 	inc	sp
                                   4247 ;src\/Graphics\Graphics.h:115: WRTVRM(SPRATT + 56, 	(6 * 8));
      0011C9 3E 30            [ 7] 4248 	ld	a, #0x30
      0011CB F5               [11] 4249 	push	af
      0011CC 33               [ 6] 4250 	inc	sp
      0011CD 21 38 1B         [10] 4251 	ld	hl, #0x1b38
      0011D0 E5               [11] 4252 	push	hl
      0011D1 CDr00r00         [17] 4253 	call	_WRTVRM
      0011D4 F1               [10] 4254 	pop	af
      0011D5 33               [ 6] 4255 	inc	sp
                                   4256 ;src\/Graphics\Graphics.h:116: WRTVRM(SPRATT + 57, 	(4 * 8)-4);
      0011D6 3E 1C            [ 7] 4257 	ld	a, #0x1c
      0011D8 F5               [11] 4258 	push	af
      0011D9 33               [ 6] 4259 	inc	sp
      0011DA 21 39 1B         [10] 4260 	ld	hl, #0x1b39
      0011DD E5               [11] 4261 	push	hl
      0011DE CDr00r00         [17] 4262 	call	_WRTVRM
      0011E1 F1               [10] 4263 	pop	af
      0011E2 33               [ 6] 4264 	inc	sp
                                   4265 ;src\/Graphics\Graphics.h:117: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      0011E3 3E 4C            [ 7] 4266 	ld	a, #0x4c
      0011E5 F5               [11] 4267 	push	af
      0011E6 33               [ 6] 4268 	inc	sp
      0011E7 21 3A 1B         [10] 4269 	ld	hl, #0x1b3a
      0011EA E5               [11] 4270 	push	hl
      0011EB CDr00r00         [17] 4271 	call	_WRTVRM
      0011EE F1               [10] 4272 	pop	af
      0011EF 33               [ 6] 4273 	inc	sp
                                   4274 ;src\/Graphics\Graphics.h:118: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      0011F0 3Ar9Br00         [13] 4275 	ld	a,(#_nextPieceColor_Front + 0)
      0011F3 F5               [11] 4276 	push	af
      0011F4 33               [ 6] 4277 	inc	sp
      0011F5 21 3B 1B         [10] 4278 	ld	hl, #0x1b3b
      0011F8 E5               [11] 4279 	push	hl
      0011F9 CDr00r00         [17] 4280 	call	_WRTVRM
      0011FC F1               [10] 4281 	pop	af
      0011FD 33               [ 6] 4282 	inc	sp
                                   4283 ;src\/Graphics\Graphics.h:119: WRTVRM(SPRATT + 60, 	(6 * 8));
      0011FE 3E 30            [ 7] 4284 	ld	a, #0x30
      001200 F5               [11] 4285 	push	af
      001201 33               [ 6] 4286 	inc	sp
      001202 21 3C 1B         [10] 4287 	ld	hl, #0x1b3c
      001205 E5               [11] 4288 	push	hl
      001206 CDr00r00         [17] 4289 	call	_WRTVRM
      001209 F1               [10] 4290 	pop	af
      00120A 33               [ 6] 4291 	inc	sp
                                   4292 ;src\/Graphics\Graphics.h:120: WRTVRM(SPRATT + 61, 	(4 * 8)-4);
      00120B 3E 1C            [ 7] 4293 	ld	a, #0x1c
      00120D F5               [11] 4294 	push	af
      00120E 33               [ 6] 4295 	inc	sp
      00120F 21 3D 1B         [10] 4296 	ld	hl, #0x1b3d
      001212 E5               [11] 4297 	push	hl
      001213 CDr00r00         [17] 4298 	call	_WRTVRM
      001216 F1               [10] 4299 	pop	af
      001217 33               [ 6] 4300 	inc	sp
                                   4301 ;src\/Graphics\Graphics.h:121: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001218 3E 50            [ 7] 4302 	ld	a, #0x50
      00121A F5               [11] 4303 	push	af
      00121B 33               [ 6] 4304 	inc	sp
      00121C 21 3E 1B         [10] 4305 	ld	hl, #0x1b3e
      00121F E5               [11] 4306 	push	hl
      001220 CDr00r00         [17] 4307 	call	_WRTVRM
      001223 F1               [10] 4308 	pop	af
      001224 33               [ 6] 4309 	inc	sp
                                   4310 ;src\/Graphics\Graphics.h:122: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      001225 3Ar9Cr00         [13] 4311 	ld	a,(#_nextPieceColor_Back + 0)
      001228 F5               [11] 4312 	push	af
      001229 33               [ 6] 4313 	inc	sp
      00122A 21 3F 1B         [10] 4314 	ld	hl, #0x1b3f
      00122D E5               [11] 4315 	push	hl
      00122E CDr00r00         [17] 4316 	call	_WRTVRM
      001231 F1               [10] 4317 	pop	af
      001232 33               [ 6] 4318 	inc	sp
                                   4319 ;src\/Graphics\Graphics.h:133: }
      001233 C9               [10] 4320 	ret
                                   4321 ;src\/Graphics\Graphics.h:135: void DrawScore() {
                                   4322 ;	---------------------------------
                                   4323 ; Function DrawScore
                                   4324 ; ---------------------------------
      001234                       4325 _DrawScore::
      001234 DD E5            [15] 4326 	push	ix
      001236 DD 21 00 00      [14] 4327 	ld	ix,#0
      00123A DD 39            [15] 4328 	add	ix,sp
      00123C F5               [11] 4329 	push	af
                                   4330 ;src\/Graphics\Graphics.h:136: byte bgCounter = 0, bgColor;
      00123D DD 36 FE 00      [19] 4331 	ld	-2 (ix), #0
                                   4332 ;src\/Graphics\Graphics.h:140: if(newLevel) {
      001241 3Ar07r00         [13] 4333 	ld	a,(#_newLevel + 0)
      001244 B7               [ 4] 4334 	or	a, a
      001245 CAr40r13         [10] 4335 	jp	Z, 00119$
                                   4336 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      001248 DD 36 FF 00      [19] 4337 	ld	-1 (ix), #0
      00124C                       4338 00121$:
      00124C DD 7E FF         [19] 4339 	ld	a, -1 (ix)
      00124F D6 3C            [ 7] 4340 	sub	a, #0x3c
      001251 D2r40r13         [10] 4341 	jp	NC, 00119$
                                   4342 ;src\/Graphics\Graphics.h:142: lastJiffy = JIFFY;
      001254 ED 4B 9E FC      [20] 4343 	ld	bc, (_JIFFY)
                                   4344 ;src\/Graphics\Graphics.h:143: while(lastJiffy == JIFFY) { }
      001258                       4345 00101$:
      001258 2A 9E FC         [16] 4346 	ld	hl, (_JIFFY)
      00125B BF               [ 4] 4347 	cp	a, a
      00125C ED 42            [15] 4348 	sbc	hl, bc
      00125E 28 F8            [12] 4349 	jr	Z, 00101$
                                   4350 ;src\/Graphics\Graphics.h:145: DrawExplosionSprite(26 * 8, 10 * 8, i);
      001260 DD 56 FF         [19] 4351 	ld	d, -1 (ix)
      001263 1E 50            [ 7] 4352 	ld	e,#0x50
      001265 D5               [11] 4353 	push	de
      001266 3E D0            [ 7] 4354 	ld	a, #0xd0
      001268 F5               [11] 4355 	push	af
      001269 33               [ 6] 4356 	inc	sp
      00126A CDrDFr0C         [17] 4357 	call	_DrawExplosionSprite
      00126D F1               [10] 4358 	pop	af
      00126E 33               [ 6] 4359 	inc	sp
                                   4360 ;src\/Graphics\Graphics.h:147: if(JIFFY & 0b00000110) {
      00126F 2A 9E FC         [16] 4361 	ld	hl, (_JIFFY)
      001272 7D               [ 4] 4362 	ld	a, l
      001273 E6 06            [ 7] 4363 	and	a, #0x06
      001275 CAr20r13         [10] 4364 	jp	Z,00115$
                                   4365 ;src\/Graphics\Graphics.h:149: DrawString(" LEVEL", 26, 10);
      001278 11 1A 0A         [10] 4366 	ld	de, #0x0a1a
      00127B D5               [11] 4367 	push	de
      00127C 21rC2r13         [10] 4368 	ld	hl, #___str_1
      00127F E5               [11] 4369 	push	hl
      001280 CDrF1r0D         [17] 4370 	call	_DrawString
      001283 F1               [10] 4371 	pop	af
      001284 F1               [10] 4372 	pop	af
                                   4373 ;src\/Graphics\Graphics.h:150: DrawNumber(level, 26, 11);
      001285 3Ar06r00         [13] 4374 	ld	a, (#_level + 0)
      001288 4F               [ 4] 4375 	ld	c, a
      001289 06 00            [ 7] 4376 	ld	b, #0x00
      00128B 11 1A 0B         [10] 4377 	ld	de, #0x0b1a
      00128E D5               [11] 4378 	push	de
      00128F C5               [11] 4379 	push	bc
      001290 CDr23r0E         [17] 4380 	call	_DrawNumber
      001293 F1               [10] 4381 	pop	af
      001294 F1               [10] 4382 	pop	af
                                   4383 ;src\/Graphics\Graphics.h:156: switch(bgCounter++) {
      001295 DD 4E FE         [19] 4384 	ld	c, -2 (ix)
      001298 DD 34 FE         [23] 4385 	inc	-2 (ix)
      00129B 3E 07            [ 7] 4386 	ld	a, #0x07
      00129D 91               [ 4] 4387 	sub	a, c
      00129E 38 45            [12] 4388 	jr	C, 00112$
      0012A0 06 00            [ 7] 4389 	ld	b, #0x00
      0012A2 21rA9r12         [10] 4390 	ld	hl, #00163$
      0012A5 09               [11] 4391 	add	hl, bc
      0012A6 09               [11] 4392 	add	hl, bc
      0012A7 09               [11] 4393 	add	hl, bc
      0012A8 E9               [ 4] 4394 	jp	(hl)
      0012A9                       4395 00163$:
      0012A9 C3rC1r12         [10] 4396 	jp	00104$
      0012AC C3rC5r12         [10] 4397 	jp	00105$
      0012AF C3rC9r12         [10] 4398 	jp	00106$
      0012B2 C3rCDr12         [10] 4399 	jp	00107$
      0012B5 C3rD1r12         [10] 4400 	jp	00108$
      0012B8 C3rD5r12         [10] 4401 	jp	00109$
      0012BB C3rD9r12         [10] 4402 	jp	00110$
      0012BE C3rDDr12         [10] 4403 	jp	00111$
                                   4404 ;src\/Graphics\Graphics.h:157: case 0:
      0012C1                       4405 00104$:
                                   4406 ;src\/Graphics\Graphics.h:158: bgColor = 0x14;
      0012C1 0E 14            [ 7] 4407 	ld	c, #0x14
                                   4408 ;src\/Graphics\Graphics.h:159: break;
      0012C3 18 22            [12] 4409 	jr	00113$
                                   4410 ;src\/Graphics\Graphics.h:160: case 1:
      0012C5                       4411 00105$:
                                   4412 ;src\/Graphics\Graphics.h:161: bgColor = 0x15;
      0012C5 0E 15            [ 7] 4413 	ld	c, #0x15
                                   4414 ;src\/Graphics\Graphics.h:162: break;
      0012C7 18 1E            [12] 4415 	jr	00113$
                                   4416 ;src\/Graphics\Graphics.h:163: case 2:
      0012C9                       4417 00106$:
                                   4418 ;src\/Graphics\Graphics.h:164: bgColor = 0x17;
      0012C9 0E 17            [ 7] 4419 	ld	c, #0x17
                                   4420 ;src\/Graphics\Graphics.h:165: break;
      0012CB 18 1A            [12] 4421 	jr	00113$
                                   4422 ;src\/Graphics\Graphics.h:166: case 3:
      0012CD                       4423 00107$:
                                   4424 ;src\/Graphics\Graphics.h:167: bgColor = 0x1e;
      0012CD 0E 1E            [ 7] 4425 	ld	c, #0x1e
                                   4426 ;src\/Graphics\Graphics.h:168: break;
      0012CF 18 16            [12] 4427 	jr	00113$
                                   4428 ;src\/Graphics\Graphics.h:169: case 4:
      0012D1                       4429 00108$:
                                   4430 ;src\/Graphics\Graphics.h:170: bgColor = 0x1f;
      0012D1 0E 1F            [ 7] 4431 	ld	c, #0x1f
                                   4432 ;src\/Graphics\Graphics.h:171: break;
      0012D3 18 12            [12] 4433 	jr	00113$
                                   4434 ;src\/Graphics\Graphics.h:172: case 5:
      0012D5                       4435 00109$:
                                   4436 ;src\/Graphics\Graphics.h:173: bgColor = 0x1e;
      0012D5 0E 1E            [ 7] 4437 	ld	c, #0x1e
                                   4438 ;src\/Graphics\Graphics.h:174: break;
      0012D7 18 0E            [12] 4439 	jr	00113$
                                   4440 ;src\/Graphics\Graphics.h:175: case 6:
      0012D9                       4441 00110$:
                                   4442 ;src\/Graphics\Graphics.h:176: bgColor = 0x17;
      0012D9 0E 17            [ 7] 4443 	ld	c, #0x17
                                   4444 ;src\/Graphics\Graphics.h:177: break;
      0012DB 18 0A            [12] 4445 	jr	00113$
                                   4446 ;src\/Graphics\Graphics.h:178: case 7:
      0012DD                       4447 00111$:
                                   4448 ;src\/Graphics\Graphics.h:179: bgColor = 0x15;
      0012DD 0E 15            [ 7] 4449 	ld	c, #0x15
                                   4450 ;src\/Graphics\Graphics.h:180: bgCounter = 0;
      0012DF DD 36 FE 00      [19] 4451 	ld	-2 (ix), #0
                                   4452 ;src\/Graphics\Graphics.h:181: break;
      0012E3 18 02            [12] 4453 	jr	00113$
                                   4454 ;src\/Graphics\Graphics.h:182: default:
      0012E5                       4455 00112$:
                                   4456 ;src\/Graphics\Graphics.h:183: bgColor = 0x11;
      0012E5 0E 11            [ 7] 4457 	ld	c, #0x11
                                   4458 ;src\/Graphics\Graphics.h:185: }
      0012E7                       4459 00113$:
                                   4460 ;src\/Graphics\Graphics.h:186: FILVRM(CLRTBL, 8 * 4, bgColor);
      0012E7 C5               [11] 4461 	push	bc
      0012E8 79               [ 4] 4462 	ld	a, c
      0012E9 F5               [11] 4463 	push	af
      0012EA 33               [ 6] 4464 	inc	sp
      0012EB 21 20 00         [10] 4465 	ld	hl, #0x0020
      0012EE E5               [11] 4466 	push	hl
      0012EF 21 00 20         [10] 4467 	ld	hl, #0x2000
      0012F2 E5               [11] 4468 	push	hl
      0012F3 CDr00r00         [17] 4469 	call	_FILVRM
      0012F6 F1               [10] 4470 	pop	af
      0012F7 F1               [10] 4471 	pop	af
      0012F8 33               [ 6] 4472 	inc	sp
      0012F9 C1               [10] 4473 	pop	bc
                                   4474 ;src\/Graphics\Graphics.h:187: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      0012FA C5               [11] 4475 	push	bc
      0012FB 79               [ 4] 4476 	ld	a, c
      0012FC F5               [11] 4477 	push	af
      0012FD 33               [ 6] 4478 	inc	sp
      0012FE 21 20 00         [10] 4479 	ld	hl, #0x0020
      001301 E5               [11] 4480 	push	hl
      001302 21 00 28         [10] 4481 	ld	hl, #0x2800
      001305 E5               [11] 4482 	push	hl
      001306 CDr00r00         [17] 4483 	call	_FILVRM
      001309 F1               [10] 4484 	pop	af
      00130A F1               [10] 4485 	pop	af
      00130B 33               [ 6] 4486 	inc	sp
      00130C C1               [10] 4487 	pop	bc
                                   4488 ;src\/Graphics\Graphics.h:188: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      00130D 79               [ 4] 4489 	ld	a, c
      00130E F5               [11] 4490 	push	af
      00130F 33               [ 6] 4491 	inc	sp
      001310 21 20 00         [10] 4492 	ld	hl, #0x0020
      001313 E5               [11] 4493 	push	hl
      001314 21 00 30         [10] 4494 	ld	hl, #0x3000
      001317 E5               [11] 4495 	push	hl
      001318 CDr00r00         [17] 4496 	call	_FILVRM
      00131B F1               [10] 4497 	pop	af
      00131C F1               [10] 4498 	pop	af
      00131D 33               [ 6] 4499 	inc	sp
      00131E 18 1A            [12] 4500 	jr	00122$
      001320                       4501 00115$:
                                   4502 ;src\/Graphics\Graphics.h:193: DrawString("      ", 26, 10);
      001320 11 1A 0A         [10] 4503 	ld	de, #0x0a1a
      001323 D5               [11] 4504 	push	de
      001324 21rC9r13         [10] 4505 	ld	hl, #___str_2
      001327 E5               [11] 4506 	push	hl
      001328 CDrF1r0D         [17] 4507 	call	_DrawString
      00132B F1               [10] 4508 	pop	af
      00132C F1               [10] 4509 	pop	af
                                   4510 ;src\/Graphics\Graphics.h:194: DrawString("      ", 26, 11);
      00132D 11 1A 0B         [10] 4511 	ld	de, #0x0b1a
      001330 D5               [11] 4512 	push	de
      001331 21rC9r13         [10] 4513 	ld	hl, #___str_2
      001334 E5               [11] 4514 	push	hl
      001335 CDrF1r0D         [17] 4515 	call	_DrawString
      001338 F1               [10] 4516 	pop	af
      001339 F1               [10] 4517 	pop	af
      00133A                       4518 00122$:
                                   4519 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      00133A DD 34 FF         [23] 4520 	inc	-1 (ix)
      00133D C3r4Cr12         [10] 4521 	jp	00121$
      001340                       4522 00119$:
                                   4523 ;src\/Graphics\Graphics.h:200: newLevel = FALSE;
      001340 21r07r00         [10] 4524 	ld	hl, #_newLevel
      001343 36 00            [10] 4525 	ld	(hl), #0x00
                                   4526 ;src\/Graphics\Graphics.h:203: FILVRM(CLRTBL, 8 * 4, 0x14);
      001345 3E 14            [ 7] 4527 	ld	a, #0x14
      001347 F5               [11] 4528 	push	af
      001348 33               [ 6] 4529 	inc	sp
      001349 21 20 00         [10] 4530 	ld	hl, #0x0020
      00134C E5               [11] 4531 	push	hl
      00134D 21 00 20         [10] 4532 	ld	hl, #0x2000
      001350 E5               [11] 4533 	push	hl
      001351 CDr00r00         [17] 4534 	call	_FILVRM
      001354 F1               [10] 4535 	pop	af
      001355 F1               [10] 4536 	pop	af
      001356 33               [ 6] 4537 	inc	sp
                                   4538 ;src\/Graphics\Graphics.h:204: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001357 3E 14            [ 7] 4539 	ld	a, #0x14
      001359 F5               [11] 4540 	push	af
      00135A 33               [ 6] 4541 	inc	sp
      00135B 21 20 00         [10] 4542 	ld	hl, #0x0020
      00135E E5               [11] 4543 	push	hl
      00135F 21 00 28         [10] 4544 	ld	hl, #0x2800
      001362 E5               [11] 4545 	push	hl
      001363 CDr00r00         [17] 4546 	call	_FILVRM
      001366 F1               [10] 4547 	pop	af
      001367 F1               [10] 4548 	pop	af
      001368 33               [ 6] 4549 	inc	sp
                                   4550 ;src\/Graphics\Graphics.h:205: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001369 3E 14            [ 7] 4551 	ld	a, #0x14
      00136B F5               [11] 4552 	push	af
      00136C 33               [ 6] 4553 	inc	sp
      00136D 21 20 00         [10] 4554 	ld	hl, #0x0020
      001370 E5               [11] 4555 	push	hl
      001371 21 00 30         [10] 4556 	ld	hl, #0x3000
      001374 E5               [11] 4557 	push	hl
      001375 CDr00r00         [17] 4558 	call	_FILVRM
      001378 F1               [10] 4559 	pop	af
      001379 F1               [10] 4560 	pop	af
      00137A 33               [ 6] 4561 	inc	sp
                                   4562 ;src\/Graphics\Graphics.h:207: DrawString("NEXT", 2, 2);
      00137B 11 02 02         [10] 4563 	ld	de, #0x0202
      00137E D5               [11] 4564 	push	de
      00137F 21rD0r13         [10] 4565 	ld	hl, #___str_3
      001382 E5               [11] 4566 	push	hl
      001383 CDrF1r0D         [17] 4567 	call	_DrawString
      001386 F1               [10] 4568 	pop	af
      001387 F1               [10] 4569 	pop	af
                                   4570 ;src\/Graphics\Graphics.h:209: DrawString(" LEVEL", 26, 10);
      001388 11 1A 0A         [10] 4571 	ld	de, #0x0a1a
      00138B D5               [11] 4572 	push	de
      00138C 21rC2r13         [10] 4573 	ld	hl, #___str_1
      00138F E5               [11] 4574 	push	hl
      001390 CDrF1r0D         [17] 4575 	call	_DrawString
      001393 F1               [10] 4576 	pop	af
      001394 F1               [10] 4577 	pop	af
                                   4578 ;src\/Graphics\Graphics.h:210: DrawString("BLOCKS", 26, 18);
      001395 11 1A 12         [10] 4579 	ld	de, #0x121a
      001398 D5               [11] 4580 	push	de
      001399 21rD5r13         [10] 4581 	ld	hl, #___str_4
      00139C E5               [11] 4582 	push	hl
      00139D CDrF1r0D         [17] 4583 	call	_DrawString
      0013A0 F1               [10] 4584 	pop	af
      0013A1 F1               [10] 4585 	pop	af
                                   4586 ;src\/Graphics\Graphics.h:213: DrawNumber(level, 26, 11);
      0013A2 3Ar06r00         [13] 4587 	ld	a, (#_level + 0)
      0013A5 4F               [ 4] 4588 	ld	c, a
      0013A6 06 00            [ 7] 4589 	ld	b, #0x00
      0013A8 11 1A 0B         [10] 4590 	ld	de, #0x0b1a
      0013AB D5               [11] 4591 	push	de
      0013AC C5               [11] 4592 	push	bc
      0013AD CDr23r0E         [17] 4593 	call	_DrawNumber
      0013B0 F1               [10] 4594 	pop	af
      0013B1 F1               [10] 4595 	pop	af
                                   4596 ;src\/Graphics\Graphics.h:214: DrawNumber(blocksRemoved, 26, 19);
      0013B2 11 1A 13         [10] 4597 	ld	de, #0x131a
      0013B5 D5               [11] 4598 	push	de
      0013B6 2Ar04r00         [16] 4599 	ld	hl, (_blocksRemoved)
      0013B9 E5               [11] 4600 	push	hl
      0013BA CDr23r0E         [17] 4601 	call	_DrawNumber
                                   4602 ;src\/Graphics\Graphics.h:217: }
      0013BD DD F9            [10] 4603 	ld	sp,ix
      0013BF DD E1            [14] 4604 	pop	ix
      0013C1 C9               [10] 4605 	ret
      0013C2                       4606 ___str_1:
      0013C2 20 4C 45 56 45 4C     4607 	.ascii " LEVEL"
      0013C8 00                    4608 	.db 0x00
      0013C9                       4609 ___str_2:
      0013C9 20 20 20 20 20 20     4610 	.ascii "      "
      0013CF 00                    4611 	.db 0x00
      0013D0                       4612 ___str_3:
      0013D0 4E 45 58 54           4613 	.ascii "NEXT"
      0013D4 00                    4614 	.db 0x00
      0013D5                       4615 ___str_4:
      0013D5 42 4C 4F 43 4B 53     4616 	.ascii "BLOCKS"
      0013DB 00                    4617 	.db 0x00
                                   4618 ;src\/Graphics\Graphics.h:219: void DrawBackground() {
                                   4619 ;	---------------------------------
                                   4620 ; Function DrawBackground
                                   4621 ; ---------------------------------
      0013DC                       4622 _DrawBackground::
                                   4623 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0013DC 01 00 00         [10] 4624 	ld	bc, #0x0000
      0013DF                       4625 00103$:
      0013DF 78               [ 4] 4626 	ld	a, b
      0013E0 EE 80            [ 7] 4627 	xor	a, #0x80
      0013E2 D6 83            [ 7] 4628 	sub	a, #0x83
      0013E4 30 12            [12] 4629 	jr	NC, 00101$
                                   4630 ;src\/Graphics\Graphics.h:222: WRTVRM(NAMTBL + i, EMPTY); // test
      0013E6 21 00 18         [10] 4631 	ld	hl, #0x1800
      0013E9 09               [11] 4632 	add	hl, bc
      0013EA C5               [11] 4633 	push	bc
      0013EB AF               [ 4] 4634 	xor	a, a
      0013EC F5               [11] 4635 	push	af
      0013ED 33               [ 6] 4636 	inc	sp
      0013EE E5               [11] 4637 	push	hl
      0013EF CDr00r00         [17] 4638 	call	_WRTVRM
      0013F2 F1               [10] 4639 	pop	af
      0013F3 33               [ 6] 4640 	inc	sp
      0013F4 C1               [10] 4641 	pop	bc
                                   4642 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0013F5 03               [ 6] 4643 	inc	bc
      0013F6 18 E7            [12] 4644 	jr	00103$
      0013F8                       4645 00101$:
                                   4646 ;src\/Graphics\Graphics.h:225: DrawColumn(7);
      0013F8 3E 07            [ 7] 4647 	ld	a, #0x07
      0013FA F5               [11] 4648 	push	af
      0013FB 33               [ 6] 4649 	inc	sp
      0013FC CDrDEr0E         [17] 4650 	call	_DrawColumn
      0013FF 33               [ 6] 4651 	inc	sp
                                   4652 ;src\/Graphics\Graphics.h:226: DrawColumn(22);
      001400 3E 16            [ 7] 4653 	ld	a, #0x16
      001402 F5               [11] 4654 	push	af
      001403 33               [ 6] 4655 	inc	sp
      001404 CDrDEr0E         [17] 4656 	call	_DrawColumn
      001407 33               [ 6] 4657 	inc	sp
                                   4658 ;src\/Graphics\Graphics.h:228: DrawScore();
                                   4659 ;src\/Graphics\Graphics.h:264: }
      001408 C3r34r12         [10] 4660 	jp	_DrawScore
                                   4661 ;src\/Graphics\Graphics.h:266: void InitVRAM() {
                                   4662 ;	---------------------------------
                                   4663 ; Function InitVRAM
                                   4664 ; ---------------------------------
      00140B                       4665 _InitVRAM::
      00140B DD E5            [15] 4666 	push	ix
      00140D DD 21 00 00      [14] 4667 	ld	ix,#0
      001411 DD 39            [15] 4668 	add	ix,sp
      001413 3B               [ 6] 4669 	dec	sp
                                   4670 ;src\/Graphics\Graphics.h:271: CLIKSW = 0;	// disable keyboard sound
      001414 21 00 00         [10] 4671 	ld	hl, #0x0000
      001417 22 DB F3         [16] 4672 	ld	(_CLIKSW), hl
                                   4673 ;src\/Graphics\Graphics.h:272: SCNCNT = 1; 	// set keyboard scan counter
      00141A 21 F6 F3         [10] 4674 	ld	hl, #_SCNCNT
      00141D 36 01            [10] 4675 	ld	(hl), #0x01
                                   4676 ;src\/Graphics\Graphics.h:274: FORCLR = COLOR_WHITE;
      00141F 21 E9 F3         [10] 4677 	ld	hl, #_FORCLR
      001422 36 0F            [10] 4678 	ld	(hl), #0x0f
                                   4679 ;src\/Graphics\Graphics.h:275: BAKCLR = COLOR_BLACK;
      001424 21 EA F3         [10] 4680 	ld	hl, #_BAKCLR
      001427 36 01            [10] 4681 	ld	(hl), #0x01
                                   4682 ;src\/Graphics\Graphics.h:276: BDRCLR = COLOR_BLACK;
      001429 21 EB F3         [10] 4683 	ld	hl, #_BDRCLR
      00142C 36 01            [10] 4684 	ld	(hl), #0x01
                                   4685 ;src\/Graphics\Graphics.h:304: WRTVDP(0b0000000111100010);
      00142E 21 E2 01         [10] 4686 	ld	hl, #0x01e2
      001431 CDr00r00         [17] 4687 	call	_WRTVDP
                                   4688 ;src\/Graphics\Graphics.h:306: INIGRP();	// Set screen 2
      001434 CDr00r00         [17] 4689 	call	_INIGRP
                                   4690 ;src\/Graphics\Graphics.h:308: DISSCR();	// Disable screen (faster to write)
      001437 CDr00r00         [17] 4691 	call	_DISSCR
                                   4692 ;src\/Graphics\Graphics.h:312: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      00143A AF               [ 4] 4693 	xor	a, a
      00143B F5               [11] 4694 	push	af
      00143C 33               [ 6] 4695 	inc	sp
      00143D 21 00 40         [10] 4696 	ld	hl, #0x4000
      001440 E5               [11] 4697 	push	hl
      001441 65               [ 4] 4698 	ld	h, l
      001442 E5               [11] 4699 	push	hl
      001443 CDr00r00         [17] 4700 	call	_FILVRM
      001446 F1               [10] 4701 	pop	af
                                   4702 ;src\/Graphics\Graphics.h:321: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001447 33               [ 6] 4703 	inc	sp
      001448 21 A0 02         [10] 4704 	ld	hl,#0x02a0
      00144B E3               [19] 4705 	ex	(sp),hl
      00144C 21rA8r07         [10] 4706 	ld	hl, #_sprite_arrow_0
      00144F E5               [11] 4707 	push	hl
      001450 21 00 38         [10] 4708 	ld	hl, #0x3800
      001453 E5               [11] 4709 	push	hl
      001454 CDr00r00         [17] 4710 	call	_LDIRVM
      001457 21 06 00         [10] 4711 	ld	hl, #6
      00145A 39               [11] 4712 	add	hl, sp
      00145B F9               [ 6] 4713 	ld	sp, hl
                                   4714 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      00145C 0E 00            [ 7] 4715 	ld	c, #0x00
      00145E                       4716 00110$:
                                   4717 ;src\/Graphics\Graphics.h:328: WRTVRM(SPRATT + (i * 4), 	192);
      00145E 79               [ 4] 4718 	ld	a,c
      00145F FE 20            [ 7] 4719 	cp	a,#0x20
      001461 30 18            [12] 4720 	jr	NC, 00101$
      001463 26 00            [ 7] 4721 	ld	h, #0x00
      001465 6F               [ 4] 4722 	ld	l, a
      001466 29               [11] 4723 	add	hl, hl
      001467 29               [11] 4724 	add	hl, hl
      001468 7C               [ 4] 4725 	ld	a, h
      001469 C6 1B            [ 7] 4726 	add	a, #0x1b
      00146B 67               [ 4] 4727 	ld	h, a
      00146C C5               [11] 4728 	push	bc
      00146D 3E C0            [ 7] 4729 	ld	a, #0xc0
      00146F F5               [11] 4730 	push	af
      001470 33               [ 6] 4731 	inc	sp
      001471 E5               [11] 4732 	push	hl
      001472 CDr00r00         [17] 4733 	call	_WRTVRM
      001475 F1               [10] 4734 	pop	af
      001476 33               [ 6] 4735 	inc	sp
      001477 C1               [10] 4736 	pop	bc
                                   4737 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      001478 0C               [ 4] 4738 	inc	c
      001479 18 E3            [12] 4739 	jr	00110$
      00147B                       4740 00101$:
                                   4741 ;src\/Graphics\Graphics.h:337: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00147B 21 78 01         [10] 4742 	ld	hl, #0x0178
      00147E E5               [11] 4743 	push	hl
      00147F 21r78r04         [10] 4744 	ld	hl, #_pattern_black_0
      001482 E5               [11] 4745 	push	hl
      001483 21 00 00         [10] 4746 	ld	hl, #0x0000
      001486 E5               [11] 4747 	push	hl
      001487 CDr00r00         [17] 4748 	call	_LDIRVM
      00148A 21 06 00         [10] 4749 	ld	hl, #6
      00148D 39               [11] 4750 	add	hl, sp
      00148E F9               [ 6] 4751 	ld	sp, hl
                                   4752 ;src\/Graphics\Graphics.h:340: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00148F 21 78 01         [10] 4753 	ld	hl, #0x0178
      001492 E5               [11] 4754 	push	hl
      001493 21r78r04         [10] 4755 	ld	hl, #_pattern_black_0
      001496 E5               [11] 4756 	push	hl
      001497 21 00 08         [10] 4757 	ld	hl, #0x0800
      00149A E5               [11] 4758 	push	hl
      00149B CDr00r00         [17] 4759 	call	_LDIRVM
      00149E 21 06 00         [10] 4760 	ld	hl, #6
      0014A1 39               [11] 4761 	add	hl, sp
      0014A2 F9               [ 6] 4762 	ld	sp, hl
                                   4763 ;src\/Graphics\Graphics.h:343: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014A3 21 78 01         [10] 4764 	ld	hl, #0x0178
      0014A6 E5               [11] 4765 	push	hl
      0014A7 21r78r04         [10] 4766 	ld	hl, #_pattern_black_0
      0014AA E5               [11] 4767 	push	hl
      0014AB 21 00 10         [10] 4768 	ld	hl, #0x1000
      0014AE E5               [11] 4769 	push	hl
      0014AF CDr00r00         [17] 4770 	call	_LDIRVM
      0014B2 21 06 00         [10] 4771 	ld	hl, #6
      0014B5 39               [11] 4772 	add	hl, sp
      0014B6 F9               [ 6] 4773 	ld	sp, hl
                                   4774 ;src\/Graphics\Graphics.h:346: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014B7 21 00 03         [10] 4775 	ld	hl, #0x0300
      0014BA E5               [11] 4776 	push	hl
      0014BB 21r78r01         [10] 4777 	ld	hl, #_FONT
      0014BE E5               [11] 4778 	push	hl
      0014BF 21 78 01         [10] 4779 	ld	hl, #0x0178
      0014C2 E5               [11] 4780 	push	hl
      0014C3 CDr00r00         [17] 4781 	call	_LDIRVM
      0014C6 21 06 00         [10] 4782 	ld	hl, #6
      0014C9 39               [11] 4783 	add	hl, sp
      0014CA F9               [ 6] 4784 	ld	sp, hl
                                   4785 ;src\/Graphics\Graphics.h:349: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014CB 21 00 03         [10] 4786 	ld	hl, #0x0300
      0014CE E5               [11] 4787 	push	hl
      0014CF 21r78r01         [10] 4788 	ld	hl, #_FONT
      0014D2 E5               [11] 4789 	push	hl
      0014D3 21 78 09         [10] 4790 	ld	hl, #0x0978
      0014D6 E5               [11] 4791 	push	hl
      0014D7 CDr00r00         [17] 4792 	call	_LDIRVM
      0014DA 21 06 00         [10] 4793 	ld	hl, #6
      0014DD 39               [11] 4794 	add	hl, sp
      0014DE F9               [ 6] 4795 	ld	sp, hl
                                   4796 ;src\/Graphics\Graphics.h:352: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0014DF 21 00 03         [10] 4797 	ld	hl, #0x0300
      0014E2 E5               [11] 4798 	push	hl
      0014E3 21r78r01         [10] 4799 	ld	hl, #_FONT
      0014E6 E5               [11] 4800 	push	hl
      0014E7 21 78 11         [10] 4801 	ld	hl, #0x1178
      0014EA E5               [11] 4802 	push	hl
      0014EB CDr00r00         [17] 4803 	call	_LDIRVM
      0014EE 21 06 00         [10] 4804 	ld	hl, #6
      0014F1 39               [11] 4805 	add	hl, sp
      0014F2 F9               [ 6] 4806 	ld	sp, hl
                                   4807 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0014F3 0E 00            [ 7] 4808 	ld	c, #0x00
      0014F5                       4809 00113$:
                                   4810 ;src\/Graphics\Graphics.h:357: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0014F5 79               [ 4] 4811 	ld	a,c
      0014F6 FE 07            [ 7] 4812 	cp	a,#0x07
      0014F8 30 20            [12] 4813 	jr	NC, 00102$
      0014FA 26 00            [ 7] 4814 	ld	h, #0x00
      0014FC 6F               [ 4] 4815 	ld	l, a
      0014FD 29               [11] 4816 	add	hl, hl
      0014FE 29               [11] 4817 	add	hl, hl
      0014FF 29               [11] 4818 	add	hl, hl
      001500 11 70 04         [10] 4819 	ld	de, #0x0470
      001503 19               [11] 4820 	add	hl, de
      001504 C5               [11] 4821 	push	bc
      001505 11 38 00         [10] 4822 	ld	de, #0x0038
      001508 D5               [11] 4823 	push	de
      001509 11rE8r05         [10] 4824 	ld	de, #_pattern_title
      00150C D5               [11] 4825 	push	de
      00150D E5               [11] 4826 	push	hl
      00150E CDr00r00         [17] 4827 	call	_LDIRVM
      001511 21 06 00         [10] 4828 	ld	hl, #6
      001514 39               [11] 4829 	add	hl, sp
      001515 F9               [ 6] 4830 	ld	sp, hl
      001516 C1               [10] 4831 	pop	bc
                                   4832 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001517 0C               [ 4] 4833 	inc	c
      001518 18 DB            [12] 4834 	jr	00113$
      00151A                       4835 00102$:
                                   4836 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      00151A 21 78 01         [10] 4837 	ld	hl, #0x0178
      00151D E5               [11] 4838 	push	hl
      00151E 21rF0r05         [10] 4839 	ld	hl, #_color_black_0
      001521 E5               [11] 4840 	push	hl
      001522 21 00 20         [10] 4841 	ld	hl, #0x2000
      001525 E5               [11] 4842 	push	hl
      001526 CDr00r00         [17] 4843 	call	_LDIRVM
      001529 21 06 00         [10] 4844 	ld	hl, #6
      00152C 39               [11] 4845 	add	hl, sp
      00152D F9               [ 6] 4846 	ld	sp, hl
                                   4847 ;src\/Graphics\Graphics.h:365: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00152E 21 78 01         [10] 4848 	ld	hl, #0x0178
      001531 E5               [11] 4849 	push	hl
      001532 21rF0r05         [10] 4850 	ld	hl, #_color_black_0
      001535 E5               [11] 4851 	push	hl
      001536 21 00 28         [10] 4852 	ld	hl, #0x2800
      001539 E5               [11] 4853 	push	hl
      00153A CDr00r00         [17] 4854 	call	_LDIRVM
      00153D 21 06 00         [10] 4855 	ld	hl, #6
      001540 39               [11] 4856 	add	hl, sp
      001541 F9               [ 6] 4857 	ld	sp, hl
                                   4858 ;src\/Graphics\Graphics.h:367: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001542 21 78 01         [10] 4859 	ld	hl, #0x0178
      001545 E5               [11] 4860 	push	hl
      001546 21rF0r05         [10] 4861 	ld	hl, #_color_black_0
      001549 E5               [11] 4862 	push	hl
      00154A 21 00 30         [10] 4863 	ld	hl, #0x3000
      00154D E5               [11] 4864 	push	hl
      00154E CDr00r00         [17] 4865 	call	_LDIRVM
      001551 21 06 00         [10] 4866 	ld	hl, #6
      001554 39               [11] 4867 	add	hl, sp
      001555 F9               [ 6] 4868 	ld	sp, hl
                                   4869 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001556 0E 00            [ 7] 4870 	ld	c, #0x00
      001558                       4871 00116$:
                                   4872 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001558 79               [ 4] 4873 	ld	a,c
      001559 FE 60            [ 7] 4874 	cp	a,#0x60
      00155B 30 20            [12] 4875 	jr	NC, 00103$
      00155D 26 00            [ 7] 4876 	ld	h, #0x00
      00155F 6F               [ 4] 4877 	ld	l, a
      001560 29               [11] 4878 	add	hl, hl
      001561 29               [11] 4879 	add	hl, hl
      001562 29               [11] 4880 	add	hl, hl
      001563 11 78 21         [10] 4881 	ld	de, #0x2178
      001566 19               [11] 4882 	add	hl, de
      001567 C5               [11] 4883 	push	bc
      001568 11 08 00         [10] 4884 	ld	de, #0x0008
      00156B D5               [11] 4885 	push	de
      00156C 11r68r07         [10] 4886 	ld	de, #_color_font_2
      00156F D5               [11] 4887 	push	de
      001570 E5               [11] 4888 	push	hl
      001571 CDr00r00         [17] 4889 	call	_LDIRVM
      001574 21 06 00         [10] 4890 	ld	hl, #6
      001577 39               [11] 4891 	add	hl, sp
      001578 F9               [ 6] 4892 	ld	sp, hl
      001579 C1               [10] 4893 	pop	bc
                                   4894 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00157A 0C               [ 4] 4895 	inc	c
      00157B 18 DB            [12] 4896 	jr	00116$
      00157D                       4897 00103$:
                                   4898 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00157D 0E 00            [ 7] 4899 	ld	c, #0x00
      00157F                       4900 00119$:
                                   4901 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00157F 79               [ 4] 4902 	ld	a,c
      001580 FE 60            [ 7] 4903 	cp	a,#0x60
      001582 30 20            [12] 4904 	jr	NC, 00104$
      001584 26 00            [ 7] 4905 	ld	h, #0x00
      001586 6F               [ 4] 4906 	ld	l, a
      001587 29               [11] 4907 	add	hl, hl
      001588 29               [11] 4908 	add	hl, hl
      001589 29               [11] 4909 	add	hl, hl
      00158A 11 78 29         [10] 4910 	ld	de, #0x2978
      00158D 19               [11] 4911 	add	hl, de
      00158E C5               [11] 4912 	push	bc
      00158F 11 08 00         [10] 4913 	ld	de, #0x0008
      001592 D5               [11] 4914 	push	de
      001593 11r68r07         [10] 4915 	ld	de, #_color_font_2
      001596 D5               [11] 4916 	push	de
      001597 E5               [11] 4917 	push	hl
      001598 CDr00r00         [17] 4918 	call	_LDIRVM
      00159B 21 06 00         [10] 4919 	ld	hl, #6
      00159E 39               [11] 4920 	add	hl, sp
      00159F F9               [ 6] 4921 	ld	sp, hl
      0015A0 C1               [10] 4922 	pop	bc
                                   4923 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015A1 0C               [ 4] 4924 	inc	c
      0015A2 18 DB            [12] 4925 	jr	00119$
      0015A4                       4926 00104$:
                                   4927 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015A4 0E 00            [ 7] 4928 	ld	c, #0x00
      0015A6                       4929 00122$:
                                   4930 ;src\/Graphics\Graphics.h:383: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0015A6 79               [ 4] 4931 	ld	a,c
      0015A7 FE 60            [ 7] 4932 	cp	a,#0x60
      0015A9 30 20            [12] 4933 	jr	NC, 00105$
      0015AB 26 00            [ 7] 4934 	ld	h, #0x00
      0015AD 6F               [ 4] 4935 	ld	l, a
      0015AE 29               [11] 4936 	add	hl, hl
      0015AF 29               [11] 4937 	add	hl, hl
      0015B0 29               [11] 4938 	add	hl, hl
      0015B1 11 78 31         [10] 4939 	ld	de, #0x3178
      0015B4 19               [11] 4940 	add	hl, de
      0015B5 C5               [11] 4941 	push	bc
      0015B6 11 08 00         [10] 4942 	ld	de, #0x0008
      0015B9 D5               [11] 4943 	push	de
      0015BA 11r68r07         [10] 4944 	ld	de, #_color_font_2
      0015BD D5               [11] 4945 	push	de
      0015BE E5               [11] 4946 	push	hl
      0015BF CDr00r00         [17] 4947 	call	_LDIRVM
      0015C2 21 06 00         [10] 4948 	ld	hl, #6
      0015C5 39               [11] 4949 	add	hl, sp
      0015C6 F9               [ 6] 4950 	ld	sp, hl
      0015C7 C1               [10] 4951 	pop	bc
                                   4952 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0015C8 0C               [ 4] 4953 	inc	c
      0015C9 18 DB            [12] 4954 	jr	00122$
      0015CB                       4955 00105$:
                                   4956 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      0015CB 0E 00            [ 7] 4957 	ld	c, #0x00
      0015CD                       4958 00125$:
                                   4959 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0015CD 79               [ 4] 4960 	ld	a,c
      0015CE FE 0A            [ 7] 4961 	cp	a,#0x0a
      0015D0 30 20            [12] 4962 	jr	NC, 00106$
      0015D2 26 00            [ 7] 4963 	ld	h, #0x00
      0015D4 6F               [ 4] 4964 	ld	l, a
      0015D5 29               [11] 4965 	add	hl, hl
      0015D6 29               [11] 4966 	add	hl, hl
      0015D7 29               [11] 4967 	add	hl, hl
      0015D8 11 F8 21         [10] 4968 	ld	de, #0x21f8
      0015DB 19               [11] 4969 	add	hl, de
      0015DC C5               [11] 4970 	push	bc
      0015DD 11 08 00         [10] 4971 	ld	de, #0x0008
      0015E0 D5               [11] 4972 	push	de
      0015E1 11r60r07         [10] 4973 	ld	de, #_color_font_1
      0015E4 D5               [11] 4974 	push	de
      0015E5 E5               [11] 4975 	push	hl
      0015E6 CDr00r00         [17] 4976 	call	_LDIRVM
      0015E9 21 06 00         [10] 4977 	ld	hl, #6
      0015EC 39               [11] 4978 	add	hl, sp
      0015ED F9               [ 6] 4979 	ld	sp, hl
      0015EE C1               [10] 4980 	pop	bc
                                   4981 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      0015EF 0C               [ 4] 4982 	inc	c
      0015F0 18 DB            [12] 4983 	jr	00125$
      0015F2                       4984 00106$:
                                   4985 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      0015F2 0E 00            [ 7] 4986 	ld	c, #0x00
      0015F4                       4987 00128$:
                                   4988 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0015F4 79               [ 4] 4989 	ld	a,c
      0015F5 FE 0A            [ 7] 4990 	cp	a,#0x0a
      0015F7 30 20            [12] 4991 	jr	NC, 00107$
      0015F9 26 00            [ 7] 4992 	ld	h, #0x00
      0015FB 6F               [ 4] 4993 	ld	l, a
      0015FC 29               [11] 4994 	add	hl, hl
      0015FD 29               [11] 4995 	add	hl, hl
      0015FE 29               [11] 4996 	add	hl, hl
      0015FF 11 F8 29         [10] 4997 	ld	de, #0x29f8
      001602 19               [11] 4998 	add	hl, de
      001603 C5               [11] 4999 	push	bc
      001604 11 08 00         [10] 5000 	ld	de, #0x0008
      001607 D5               [11] 5001 	push	de
      001608 11r60r07         [10] 5002 	ld	de, #_color_font_1
      00160B D5               [11] 5003 	push	de
      00160C E5               [11] 5004 	push	hl
      00160D CDr00r00         [17] 5005 	call	_LDIRVM
      001610 21 06 00         [10] 5006 	ld	hl, #6
      001613 39               [11] 5007 	add	hl, sp
      001614 F9               [ 6] 5008 	ld	sp, hl
      001615 C1               [10] 5009 	pop	bc
                                   5010 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001616 0C               [ 4] 5011 	inc	c
      001617 18 DB            [12] 5012 	jr	00128$
      001619                       5013 00107$:
                                   5014 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001619 DD 36 FF 00      [19] 5015 	ld	-1 (ix), #0
      00161D                       5016 00131$:
      00161D DD 7E FF         [19] 5017 	ld	a, -1 (ix)
      001620 D6 0A            [ 7] 5018 	sub	a, #0x0a
      001622 30 22            [12] 5019 	jr	NC, 00108$
                                   5020 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001624 01r60r07         [10] 5021 	ld	bc, #_color_font_1
      001627 DD 6E FF         [19] 5022 	ld	l, -1 (ix)
      00162A 26 00            [ 7] 5023 	ld	h, #0x00
      00162C 29               [11] 5024 	add	hl, hl
      00162D 29               [11] 5025 	add	hl, hl
      00162E 29               [11] 5026 	add	hl, hl
      00162F 11 F8 31         [10] 5027 	ld	de, #0x31f8
      001632 19               [11] 5028 	add	hl, de
      001633 11 08 00         [10] 5029 	ld	de, #0x0008
      001636 D5               [11] 5030 	push	de
      001637 C5               [11] 5031 	push	bc
      001638 E5               [11] 5032 	push	hl
      001639 CDr00r00         [17] 5033 	call	_LDIRVM
      00163C 21 06 00         [10] 5034 	ld	hl, #6
      00163F 39               [11] 5035 	add	hl, sp
      001640 F9               [ 6] 5036 	ld	sp, hl
                                   5037 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001641 DD 34 FF         [23] 5038 	inc	-1 (ix)
      001644 18 D7            [12] 5039 	jr	00131$
      001646                       5040 00108$:
                                   5041 ;src\/Graphics\Graphics.h:404: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001646 21 38 00         [10] 5042 	ld	hl, #0x0038
      001649 E5               [11] 5043 	push	hl
      00164A 21r70r07         [10] 5044 	ld	hl, #_color_title_1
      00164D E5               [11] 5045 	push	hl
      00164E 21 70 24         [10] 5046 	ld	hl, #0x2470
      001651 E5               [11] 5047 	push	hl
      001652 CDr00r00         [17] 5048 	call	_LDIRVM
      001655 21 06 00         [10] 5049 	ld	hl, #6
      001658 39               [11] 5050 	add	hl, sp
      001659 F9               [ 6] 5051 	ld	sp, hl
                                   5052 ;src\/Graphics\Graphics.h:412: ENASCR();	// Enable screen
      00165A CDr00r00         [17] 5053 	call	_ENASCR
                                   5054 ;src\/Graphics\Graphics.h:413: }
      00165D 33               [ 6] 5055 	inc	sp
      00165E DD E1            [14] 5056 	pop	ix
      001660 C9               [10] 5057 	ret
                                   5058 ;src\/Graphics\Graphics.h:415: void DrawBlock(byte col, byte line, byte tile) {
                                   5059 ;	---------------------------------
                                   5060 ; Function DrawBlock
                                   5061 ; ---------------------------------
      001661                       5062 _DrawBlock::
      001661 DD E5            [15] 5063 	push	ix
      001663 DD 21 00 00      [14] 5064 	ld	ix,#0
      001667 DD 39            [15] 5065 	add	ix,sp
                                   5066 ;src\/Graphics\Graphics.h:417: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001669 DD 6E 04         [19] 5067 	ld	l, 4 (ix)
      00166C 26 00            [ 7] 5068 	ld	h, #0x00
      00166E 29               [11] 5069 	add	hl, hl
      00166F 4D               [ 4] 5070 	ld	c, l
      001670 44               [ 4] 5071 	ld	b, h
      001671 DD 6E 05         [19] 5072 	ld	l, 5 (ix)
      001674 26 00            [ 7] 5073 	ld	h, #0x00
      001676 29               [11] 5074 	add	hl, hl
      001677 29               [11] 5075 	add	hl, hl
      001678 29               [11] 5076 	add	hl, hl
      001679 29               [11] 5077 	add	hl, hl
      00167A 29               [11] 5078 	add	hl, hl
      00167B 29               [11] 5079 	add	hl, hl
      00167C 11 0A 18         [10] 5080 	ld	de, #0x180a
      00167F 19               [11] 5081 	add	hl, de
      001680 09               [11] 5082 	add	hl, bc
      001681 EB               [ 4] 5083 	ex	de, hl
                                   5084 ;src\/Graphics\Graphics.h:419: WRTVRM(baseAddr, tile);
      001682 D5               [11] 5085 	push	de
      001683 DD 7E 06         [19] 5086 	ld	a, 6 (ix)
      001686 F5               [11] 5087 	push	af
      001687 33               [ 6] 5088 	inc	sp
      001688 D5               [11] 5089 	push	de
      001689 CDr00r00         [17] 5090 	call	_WRTVRM
      00168C F1               [10] 5091 	pop	af
      00168D 33               [ 6] 5092 	inc	sp
      00168E D1               [10] 5093 	pop	de
                                   5094 ;src\/Graphics\Graphics.h:420: WRTVRM(baseAddr + 1, tile + 1);
      00168F DD 4E 06         [19] 5095 	ld	c, 6 (ix)
      001692 79               [ 4] 5096 	ld	a, c
      001693 3C               [ 4] 5097 	inc	a
      001694 6B               [ 4] 5098 	ld	l, e
      001695 62               [ 4] 5099 	ld	h, d
      001696 23               [ 6] 5100 	inc	hl
      001697 C5               [11] 5101 	push	bc
      001698 D5               [11] 5102 	push	de
      001699 F5               [11] 5103 	push	af
      00169A 33               [ 6] 5104 	inc	sp
      00169B E5               [11] 5105 	push	hl
      00169C CDr00r00         [17] 5106 	call	_WRTVRM
      00169F F1               [10] 5107 	pop	af
      0016A0 33               [ 6] 5108 	inc	sp
      0016A1 D1               [10] 5109 	pop	de
      0016A2 C1               [10] 5110 	pop	bc
                                   5111 ;src\/Graphics\Graphics.h:421: WRTVRM(baseAddr + 32, tile + 2);
      0016A3 41               [ 4] 5112 	ld	b, c
      0016A4 04               [ 4] 5113 	inc	b
      0016A5 04               [ 4] 5114 	inc	b
      0016A6 21 20 00         [10] 5115 	ld	hl, #0x0020
      0016A9 19               [11] 5116 	add	hl, de
      0016AA C5               [11] 5117 	push	bc
      0016AB D5               [11] 5118 	push	de
      0016AC C5               [11] 5119 	push	bc
      0016AD 33               [ 6] 5120 	inc	sp
      0016AE E5               [11] 5121 	push	hl
      0016AF CDr00r00         [17] 5122 	call	_WRTVRM
      0016B2 F1               [10] 5123 	pop	af
      0016B3 33               [ 6] 5124 	inc	sp
      0016B4 D1               [10] 5125 	pop	de
      0016B5 C1               [10] 5126 	pop	bc
                                   5127 ;src\/Graphics\Graphics.h:422: WRTVRM(baseAddr + 33, tile + 3);
      0016B6 0C               [ 4] 5128 	inc	c
      0016B7 0C               [ 4] 5129 	inc	c
      0016B8 0C               [ 4] 5130 	inc	c
      0016B9 21 21 00         [10] 5131 	ld	hl, #0x0021
      0016BC 19               [11] 5132 	add	hl, de
      0016BD 79               [ 4] 5133 	ld	a, c
      0016BE F5               [11] 5134 	push	af
      0016BF 33               [ 6] 5135 	inc	sp
      0016C0 E5               [11] 5136 	push	hl
      0016C1 CDr00r00         [17] 5137 	call	_WRTVRM
      0016C4 F1               [10] 5138 	pop	af
      0016C5 33               [ 6] 5139 	inc	sp
                                   5140 ;src\/Graphics\Graphics.h:423: }
      0016C6 DD E1            [14] 5141 	pop	ix
      0016C8 C9               [10] 5142 	ret
                                   5143 ;src\/Graphics\Graphics.h:425: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   5144 ;	---------------------------------
                                   5145 ; Function DrawBlock_SameTile
                                   5146 ; ---------------------------------
      0016C9                       5147 _DrawBlock_SameTile::
      0016C9 DD E5            [15] 5148 	push	ix
      0016CB DD 21 00 00      [14] 5149 	ld	ix,#0
      0016CF DD 39            [15] 5150 	add	ix,sp
                                   5151 ;src\/Graphics\Graphics.h:427: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0016D1 DD 6E 04         [19] 5152 	ld	l, 4 (ix)
      0016D4 26 00            [ 7] 5153 	ld	h, #0x00
      0016D6 29               [11] 5154 	add	hl, hl
      0016D7 4D               [ 4] 5155 	ld	c, l
      0016D8 44               [ 4] 5156 	ld	b, h
      0016D9 DD 6E 05         [19] 5157 	ld	l, 5 (ix)
      0016DC 26 00            [ 7] 5158 	ld	h, #0x00
      0016DE 29               [11] 5159 	add	hl, hl
      0016DF 29               [11] 5160 	add	hl, hl
      0016E0 29               [11] 5161 	add	hl, hl
      0016E1 29               [11] 5162 	add	hl, hl
      0016E2 29               [11] 5163 	add	hl, hl
      0016E3 29               [11] 5164 	add	hl, hl
      0016E4 11 0A 18         [10] 5165 	ld	de, #0x180a
      0016E7 19               [11] 5166 	add	hl, de
      0016E8 09               [11] 5167 	add	hl, bc
      0016E9 EB               [ 4] 5168 	ex	de, hl
                                   5169 ;src\/Graphics\Graphics.h:429: WRTVRM(baseAddr, tile);
      0016EA D5               [11] 5170 	push	de
      0016EB DD 7E 06         [19] 5171 	ld	a, 6 (ix)
      0016EE F5               [11] 5172 	push	af
      0016EF 33               [ 6] 5173 	inc	sp
      0016F0 D5               [11] 5174 	push	de
      0016F1 CDr00r00         [17] 5175 	call	_WRTVRM
      0016F4 F1               [10] 5176 	pop	af
      0016F5 33               [ 6] 5177 	inc	sp
      0016F6 D1               [10] 5178 	pop	de
                                   5179 ;src\/Graphics\Graphics.h:430: WRTVRM(baseAddr + 1, tile);
      0016F7 4B               [ 4] 5180 	ld	c, e
      0016F8 42               [ 4] 5181 	ld	b, d
      0016F9 03               [ 6] 5182 	inc	bc
      0016FA D5               [11] 5183 	push	de
      0016FB DD 7E 06         [19] 5184 	ld	a, 6 (ix)
      0016FE F5               [11] 5185 	push	af
      0016FF 33               [ 6] 5186 	inc	sp
      001700 C5               [11] 5187 	push	bc
      001701 CDr00r00         [17] 5188 	call	_WRTVRM
      001704 F1               [10] 5189 	pop	af
      001705 33               [ 6] 5190 	inc	sp
      001706 D1               [10] 5191 	pop	de
                                   5192 ;src\/Graphics\Graphics.h:431: WRTVRM(baseAddr + 32, tile);
      001707 21 20 00         [10] 5193 	ld	hl, #0x0020
      00170A 19               [11] 5194 	add	hl, de
      00170B D5               [11] 5195 	push	de
      00170C DD 7E 06         [19] 5196 	ld	a, 6 (ix)
      00170F F5               [11] 5197 	push	af
      001710 33               [ 6] 5198 	inc	sp
      001711 E5               [11] 5199 	push	hl
      001712 CDr00r00         [17] 5200 	call	_WRTVRM
      001715 F1               [10] 5201 	pop	af
      001716 33               [ 6] 5202 	inc	sp
      001717 D1               [10] 5203 	pop	de
                                   5204 ;src\/Graphics\Graphics.h:432: WRTVRM(baseAddr + 33, tile);
      001718 21 21 00         [10] 5205 	ld	hl, #0x0021
      00171B 19               [11] 5206 	add	hl, de
      00171C DD 7E 06         [19] 5207 	ld	a, 6 (ix)
      00171F F5               [11] 5208 	push	af
      001720 33               [ 6] 5209 	inc	sp
      001721 E5               [11] 5210 	push	hl
      001722 CDr00r00         [17] 5211 	call	_WRTVRM
      001725 F1               [10] 5212 	pop	af
      001726 33               [ 6] 5213 	inc	sp
                                   5214 ;src\/Graphics\Graphics.h:433: }
      001727 DD E1            [14] 5215 	pop	ix
      001729 C9               [10] 5216 	ret
                                   5217 ;src\/Graphics\Graphics.h:435: void DrawLine(byte line) {
                                   5218 ;	---------------------------------
                                   5219 ; Function DrawLine
                                   5220 ; ---------------------------------
      00172A                       5221 _DrawLine::
      00172A DD E5            [15] 5222 	push	ix
      00172C DD 21 00 00      [14] 5223 	ld	ix,#0
      001730 DD 39            [15] 5224 	add	ix,sp
                                   5225 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001732 DD 4E 04         [19] 5226 	ld	c, 4 (ix)
      001735 06 00            [ 7] 5227 	ld	b, #0x00
      001737                       5228 00103$:
      001737 78               [ 4] 5229 	ld	a, b
      001738 D6 06            [ 7] 5230 	sub	a, #0x06
      00173A 30 23            [12] 5231 	jr	NC, 00105$
                                   5232 ;src\/Graphics\Graphics.h:437: DrawBlock(col, line, playfield[col][line]);
      00173C 58               [ 4] 5233 	ld	e, b
      00173D 16 00            [ 7] 5234 	ld	d, #0x00
      00173F 6B               [ 4] 5235 	ld	l, e
      001740 62               [ 4] 5236 	ld	h, d
      001741 29               [11] 5237 	add	hl, hl
      001742 19               [11] 5238 	add	hl, de
      001743 29               [11] 5239 	add	hl, hl
      001744 29               [11] 5240 	add	hl, hl
      001745 11r00r00         [10] 5241 	ld	de, #_playfield
      001748 19               [11] 5242 	add	hl, de
      001749 59               [ 4] 5243 	ld	e, c
      00174A 16 00            [ 7] 5244 	ld	d, #0x00
      00174C 19               [11] 5245 	add	hl, de
      00174D 7E               [ 7] 5246 	ld	a, (hl)
      00174E C5               [11] 5247 	push	bc
      00174F F5               [11] 5248 	push	af
      001750 33               [ 6] 5249 	inc	sp
      001751 79               [ 4] 5250 	ld	a, c
      001752 F5               [11] 5251 	push	af
      001753 33               [ 6] 5252 	inc	sp
      001754 C5               [11] 5253 	push	bc
      001755 33               [ 6] 5254 	inc	sp
      001756 CDr61r16         [17] 5255 	call	_DrawBlock
      001759 F1               [10] 5256 	pop	af
      00175A 33               [ 6] 5257 	inc	sp
      00175B C1               [10] 5258 	pop	bc
                                   5259 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00175C 04               [ 4] 5260 	inc	b
      00175D 18 D8            [12] 5261 	jr	00103$
      00175F                       5262 00105$:
                                   5263 ;src\/Graphics\Graphics.h:439: }
      00175F DD E1            [14] 5264 	pop	ix
      001761 C9               [10] 5265 	ret
                                   5266 ;src\/Graphics\Graphics.h:441: void DrawPiece(byte line) {
                                   5267 ;	---------------------------------
                                   5268 ; Function DrawPiece
                                   5269 ; ---------------------------------
      001762                       5270 _DrawPiece::
                                   5271 ;src\/Graphics\Graphics.h:442: DrawLine(line);
      001762 21 02 00         [10] 5272 	ld	hl, #2
      001765 39               [11] 5273 	add	hl, sp
      001766 7E               [ 7] 5274 	ld	a, (hl)
      001767 F5               [11] 5275 	push	af
      001768 33               [ 6] 5276 	inc	sp
      001769 CDr2Ar17         [17] 5277 	call	_DrawLine
      00176C 33               [ 6] 5278 	inc	sp
                                   5279 ;src\/Graphics\Graphics.h:443: DrawLine(line + 1);
      00176D 21 02 00         [10] 5280 	ld	hl, #2
      001770 39               [11] 5281 	add	hl, sp
      001771 46               [ 7] 5282 	ld	b, (hl)
      001772 78               [ 4] 5283 	ld	a, b
      001773 3C               [ 4] 5284 	inc	a
      001774 C5               [11] 5285 	push	bc
      001775 F5               [11] 5286 	push	af
      001776 33               [ 6] 5287 	inc	sp
      001777 CDr2Ar17         [17] 5288 	call	_DrawLine
      00177A 33               [ 6] 5289 	inc	sp
      00177B C1               [10] 5290 	pop	bc
                                   5291 ;src\/Graphics\Graphics.h:444: DrawLine(line + 2);
      00177C 04               [ 4] 5292 	inc	b
      00177D 04               [ 4] 5293 	inc	b
      00177E C5               [11] 5294 	push	bc
      00177F 33               [ 6] 5295 	inc	sp
      001780 CDr2Ar17         [17] 5296 	call	_DrawLine
      001783 33               [ 6] 5297 	inc	sp
                                   5298 ;src\/Graphics\Graphics.h:445: }
      001784 C9               [10] 5299 	ret
                                   5300 ;src\/Graphics\Graphics.h:447: void DrawPlayfield() {
                                   5301 ;	---------------------------------
                                   5302 ; Function DrawPlayfield
                                   5303 ; ---------------------------------
      001785                       5304 _DrawPlayfield::
                                   5305 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001785 06 00            [ 7] 5306 	ld	b, #0x00
      001787                       5307 00103$:
      001787 78               [ 4] 5308 	ld	a, b
      001788 D6 0C            [ 7] 5309 	sub	a, #0x0c
      00178A D0               [11] 5310 	ret	NC
                                   5311 ;src\/Graphics\Graphics.h:449: DrawLine(line);
      00178B C5               [11] 5312 	push	bc
      00178C C5               [11] 5313 	push	bc
      00178D 33               [ 6] 5314 	inc	sp
      00178E CDr2Ar17         [17] 5315 	call	_DrawLine
      001791 33               [ 6] 5316 	inc	sp
      001792 C1               [10] 5317 	pop	bc
                                   5318 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001793 04               [ 4] 5319 	inc	b
                                   5320 ;src\/Graphics\Graphics.h:451: }
      001794 18 F1            [12] 5321 	jr	00103$
                                   5322 ;src\/Sound.h:1: void SoundFx_2() {
                                   5323 ;	---------------------------------
                                   5324 ; Function SoundFx_2
                                   5325 ; ---------------------------------
      001796                       5326 _SoundFx_2::
                                   5327 ;src\/Sound.h:2: GICINI();
      001796 CDr00r00         [17] 5328 	call	_GICINI
                                   5329 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001799 21 08 0F         [10] 5330 	ld	hl, #0x0f08
      00179C CDr00r00         [17] 5331 	call	_WRTPSG
                                   5332 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00179F 0E 00            [ 7] 5333 	ld	c, #0x00
      0017A1                       5334 00104$:
      0017A1 79               [ 4] 5335 	ld	a, c
      0017A2 D6 FF            [ 7] 5336 	sub	a, #0xff
      0017A4 30 11            [12] 5337 	jr	NC, 00101$
                                   5338 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0017A6 C5               [11] 5339 	push	bc
      0017A7 21 00 5D         [10] 5340 	ld	hl, #0x5d00
      0017AA CDr00r00         [17] 5341 	call	_WRTPSG
      0017AD 21 01 00         [10] 5342 	ld	hl, #0x0001
      0017B0 CDr00r00         [17] 5343 	call	_WRTPSG
      0017B3 C1               [10] 5344 	pop	bc
                                   5345 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0017B4 0C               [ 4] 5346 	inc	c
      0017B5 18 EA            [12] 5347 	jr	00104$
      0017B7                       5348 00101$:
                                   5349 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0017B7 0E 00            [ 7] 5350 	ld	c, #0x00
      0017B9                       5351 00107$:
      0017B9 79               [ 4] 5352 	ld	a, c
      0017BA D6 FF            [ 7] 5353 	sub	a, #0xff
      0017BC 30 11            [12] 5354 	jr	NC, 00102$
                                   5355 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0017BE C5               [11] 5356 	push	bc
      0017BF 21 00 2D         [10] 5357 	ld	hl, #0x2d00
      0017C2 CDr00r00         [17] 5358 	call	_WRTPSG
      0017C5 21 01 00         [10] 5359 	ld	hl, #0x0001
      0017C8 CDr00r00         [17] 5360 	call	_WRTPSG
      0017CB C1               [10] 5361 	pop	bc
                                   5362 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0017CC 0C               [ 4] 5363 	inc	c
      0017CD 18 EA            [12] 5364 	jr	00107$
      0017CF                       5365 00102$:
                                   5366 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0017CF 21 08 00         [10] 5367 	ld	hl, #0x0008
                                   5368 ;src\/Sound.h:30: }
      0017D2 C3r00r00         [10] 5369 	jp	_WRTPSG
                                   5370 ;src\/Sound.h:32: void SoundFx_1() {
                                   5371 ;	---------------------------------
                                   5372 ; Function SoundFx_1
                                   5373 ; ---------------------------------
      0017D5                       5374 _SoundFx_1::
                                   5375 ;src\/Sound.h:34: GICINI();
      0017D5 CDr00r00         [17] 5376 	call	_GICINI
                                   5377 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0017D8 21 06 97         [10] 5378 	ld	hl, #0x9706
      0017DB CDr00r00         [17] 5379 	call	_WRTPSG
                                   5380 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0017DE 21 07 81         [10] 5381 	ld	hl, #0x8107
      0017E1 CDr00r00         [17] 5382 	call	_WRTPSG
                                   5383 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0017E4 21 08 10         [10] 5384 	ld	hl, #0x1008
      0017E7 CDr00r00         [17] 5385 	call	_WRTPSG
                                   5386 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0017EA 21 0C 13         [10] 5387 	ld	hl, #0x130c
      0017ED CDr00r00         [17] 5388 	call	_WRTPSG
                                   5389 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0017F0 21 0D 01         [10] 5390 	ld	hl, #0x010d
                                   5391 ;src\/Sound.h:49: }
      0017F3 C3r00r00         [10] 5392 	jp	_WRTPSG
                                   5393 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5394 ;	---------------------------------
                                   5395 ; Function CheckPlayfield
                                   5396 ; ---------------------------------
      0017F6                       5397 _CheckPlayfield::
      0017F6 DD E5            [15] 5398 	push	ix
      0017F8 DD 21 00 00      [14] 5399 	ld	ix,#0
      0017FC DD 39            [15] 5400 	add	ix,sp
      0017FE 21 EF FF         [10] 5401 	ld	hl, #-17
      001801 39               [11] 5402 	add	hl, sp
      001802 F9               [ 6] 5403 	ld	sp, hl
                                   5404 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001803 DD 36 EF 00      [19] 5405 	ld	-17 (ix), #0
                                   5406 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001807 0E 00            [ 7] 5407 	ld	c, #0x00
      001809                       5408 00196$:
      001809 79               [ 4] 5409 	ld	a, c
      00180A D6 0C            [ 7] 5410 	sub	a, #0x0c
      00180C 30 36            [12] 5411 	jr	NC, 00102$
                                   5412 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00180E DD 36 FF 00      [19] 5413 	ld	-1 (ix), #0
      001812                       5414 00193$:
      001812 DD 7E FF         [19] 5415 	ld	a, -1 (ix)
      001815 D6 06            [ 7] 5416 	sub	a, #0x06
      001817 30 28            [12] 5417 	jr	NC, 00197$
                                   5418 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001819 DD 5E FF         [19] 5419 	ld	e, -1 (ix)
      00181C 16 00            [ 7] 5420 	ld	d, #0x00
      00181E 6B               [ 4] 5421 	ld	l, e
      00181F 62               [ 4] 5422 	ld	h, d
      001820 29               [11] 5423 	add	hl, hl
      001821 19               [11] 5424 	add	hl, de
      001822 29               [11] 5425 	add	hl, hl
      001823 29               [11] 5426 	add	hl, hl
      001824 EB               [ 4] 5427 	ex	de, hl
      001825 21r48r00         [10] 5428 	ld	hl, #_playfieldTemp
      001828 19               [11] 5429 	add	hl, de
      001829 06 00            [ 7] 5430 	ld	b, #0x00
      00182B 09               [11] 5431 	add	hl, bc
      00182C 3Er00            [ 7] 5432 	ld	a, #<(_playfield)
      00182E 83               [ 4] 5433 	add	a, e
      00182F 5F               [ 4] 5434 	ld	e, a
      001830 3Es00            [ 7] 5435 	ld	a, #>(_playfield)
      001832 8A               [ 4] 5436 	adc	a, d
      001833 57               [ 4] 5437 	ld	d, a
      001834 7B               [ 4] 5438 	ld	a, e
      001835 81               [ 4] 5439 	add	a, c
      001836 5F               [ 4] 5440 	ld	e, a
      001837 30 01            [12] 5441 	jr	NC, 00615$
      001839 14               [ 4] 5442 	inc	d
      00183A                       5443 00615$:
      00183A 1A               [ 7] 5444 	ld	a, (de)
      00183B 77               [ 7] 5445 	ld	(hl), a
                                   5446 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00183C DD 34 FF         [23] 5447 	inc	-1 (ix)
      00183F 18 D1            [12] 5448 	jr	00193$
      001841                       5449 00197$:
                                   5450 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001841 0C               [ 4] 5451 	inc	c
      001842 18 C5            [12] 5452 	jr	00196$
      001844                       5453 00102$:
                                   5454 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001844 DD 36 FE 00      [19] 5455 	ld	-2 (ix), #0
      001848                       5456 00202$:
      001848 DD 7E FE         [19] 5457 	ld	a, -2 (ix)
      00184B D6 0C            [ 7] 5458 	sub	a, #0x0c
      00184D D2r4Cr19         [10] 5459 	jp	NC, 00108$
                                   5460 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001850 DD 36 FF 02      [19] 5461 	ld	-1 (ix), #0x02
      001854                       5462 00199$:
      001854 DD 7E FF         [19] 5463 	ld	a, -1 (ix)
      001857 D6 06            [ 7] 5464 	sub	a, #0x06
      001859 D2r46r19         [10] 5465 	jp	NC, 00203$
                                   5466 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      00185C DD 4E FF         [19] 5467 	ld	c, -1 (ix)
      00185F 06 00            [ 7] 5468 	ld	b, #0x00
      001861 69               [ 4] 5469 	ld	l, c
      001862 60               [ 4] 5470 	ld	h, b
      001863 29               [11] 5471 	add	hl, hl
      001864 09               [11] 5472 	add	hl, bc
      001865 29               [11] 5473 	add	hl, hl
      001866 29               [11] 5474 	add	hl, hl
      001867 DD 75 F5         [19] 5475 	ld	-11 (ix), l
      00186A DD 74 F6         [19] 5476 	ld	-10 (ix), h
      00186D 3Er48            [ 7] 5477 	ld	a, #<(_playfieldTemp)
      00186F DD 86 F5         [19] 5478 	add	a, -11 (ix)
      001872 4F               [ 4] 5479 	ld	c, a
      001873 3Es00            [ 7] 5480 	ld	a, #>(_playfieldTemp)
      001875 DD 8E F6         [19] 5481 	adc	a, -10 (ix)
      001878 47               [ 4] 5482 	ld	b, a
      001879 79               [ 4] 5483 	ld	a, c
      00187A DD 86 FE         [19] 5484 	add	a, -2 (ix)
      00187D DD 77 F7         [19] 5485 	ld	-9 (ix), a
      001880 78               [ 4] 5486 	ld	a, b
      001881 CE 00            [ 7] 5487 	adc	a, #0x00
      001883 DD 77 F8         [19] 5488 	ld	-8 (ix), a
      001886 DD 6E F7         [19] 5489 	ld	l, -9 (ix)
      001889 DD 66 F8         [19] 5490 	ld	h, -8 (ix)
      00188C 7E               [ 7] 5491 	ld	a, (hl)
      00188D DD 77 F9         [19] 5492 	ld	-7 (ix), a
      001890 B7               [ 4] 5493 	or	a, a
      001891 CAr40r19         [10] 5494 	jp	Z, 00200$
                                   5495 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001894 DD 7E FF         [19] 5496 	ld	a, -1 (ix)
      001897 DD 77 FD         [19] 5497 	ld	-3 (ix), a
      00189A 4F               [ 4] 5498 	ld	c, a
      00189B 0D               [ 4] 5499 	dec	c
      00189C 0D               [ 4] 5500 	dec	c
      00189D 79               [ 4] 5501 	ld	a, c
      00189E 07               [ 4] 5502 	rlca
      00189F 9F               [ 4] 5503 	sbc	a, a
      0018A0 47               [ 4] 5504 	ld	b, a
      0018A1 69               [ 4] 5505 	ld	l, c
      0018A2 60               [ 4] 5506 	ld	h, b
      0018A3 29               [11] 5507 	add	hl, hl
      0018A4 09               [11] 5508 	add	hl, bc
      0018A5 29               [11] 5509 	add	hl, hl
      0018A6 29               [11] 5510 	add	hl, hl
      0018A7 EB               [ 4] 5511 	ex	de, hl
      0018A8 21r48r00         [10] 5512 	ld	hl, #_playfieldTemp
      0018AB 19               [11] 5513 	add	hl, de
      0018AC 7D               [ 4] 5514 	ld	a, l
      0018AD DD 86 FE         [19] 5515 	add	a, -2 (ix)
      0018B0 DD 77 FA         [19] 5516 	ld	-6 (ix), a
      0018B3 7C               [ 4] 5517 	ld	a, h
      0018B4 CE 00            [ 7] 5518 	adc	a, #0x00
      0018B6 DD 77 FB         [19] 5519 	ld	-5 (ix), a
      0018B9 DD 4E FD         [19] 5520 	ld	c, -3 (ix)
      0018BC 0D               [ 4] 5521 	dec	c
      0018BD 79               [ 4] 5522 	ld	a, c
      0018BE 07               [ 4] 5523 	rlca
      0018BF 9F               [ 4] 5524 	sbc	a, a
      0018C0 47               [ 4] 5525 	ld	b, a
      0018C1 69               [ 4] 5526 	ld	l, c
      0018C2 60               [ 4] 5527 	ld	h, b
      0018C3 29               [11] 5528 	add	hl, hl
      0018C4 09               [11] 5529 	add	hl, bc
      0018C5 29               [11] 5530 	add	hl, hl
      0018C6 29               [11] 5531 	add	hl, hl
      0018C7 DD 75 FC         [19] 5532 	ld	-4 (ix), l
      0018CA DD 74 FD         [19] 5533 	ld	-3 (ix), h
      0018CD 3Er48            [ 7] 5534 	ld	a, #<(_playfieldTemp)
      0018CF DD 86 FC         [19] 5535 	add	a, -4 (ix)
      0018D2 4F               [ 4] 5536 	ld	c, a
      0018D3 3Es00            [ 7] 5537 	ld	a, #>(_playfieldTemp)
      0018D5 DD 8E FD         [19] 5538 	adc	a, -3 (ix)
      0018D8 47               [ 4] 5539 	ld	b, a
      0018D9 79               [ 4] 5540 	ld	a, c
      0018DA DD 86 FE         [19] 5541 	add	a, -2 (ix)
      0018DD 4F               [ 4] 5542 	ld	c, a
      0018DE 30 01            [12] 5543 	jr	NC, 00616$
      0018E0 04               [ 4] 5544 	inc	b
      0018E1                       5545 00616$:
      0018E1 DD 6E FA         [19] 5546 	ld	l, -6 (ix)
      0018E4 DD 66 FB         [19] 5547 	ld	h, -5 (ix)
      0018E7 6E               [ 7] 5548 	ld	l, (hl)
      0018E8 0A               [ 7] 5549 	ld	a, (bc)
      0018E9 67               [ 4] 5550 	ld	h, a
      0018EA 7D               [ 4] 5551 	ld	a, l
      0018EB 94               [ 4] 5552 	sub	a, h
      0018EC 20 52            [12] 5553 	jr	NZ, 00200$
                                   5554 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      0018EE DD 7E F9         [19] 5555 	ld	a, -7 (ix)
      0018F1 94               [ 4] 5556 	sub	a, h
      0018F2 20 4C            [12] 5557 	jr	NZ, 00200$
                                   5558 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      0018F4 DD 36 EF 01      [19] 5559 	ld	-17 (ix), #0x01
                                   5560 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0018F8 3Er00            [ 7] 5561 	ld	a, #<(_playfield)
      0018FA 83               [ 4] 5562 	add	a, e
      0018FB 5F               [ 4] 5563 	ld	e, a
      0018FC 3Es00            [ 7] 5564 	ld	a, #>(_playfield)
      0018FE 8A               [ 4] 5565 	adc	a, d
      0018FF 57               [ 4] 5566 	ld	d, a
      001900 7B               [ 4] 5567 	ld	a, e
      001901 DD 86 FE         [19] 5568 	add	a, -2 (ix)
      001904 5F               [ 4] 5569 	ld	e, a
      001905 30 01            [12] 5570 	jr	NC, 00621$
      001907 14               [ 4] 5571 	inc	d
      001908                       5572 00621$:
      001908 7D               [ 4] 5573 	ld	a, l
      001909 CB FF            [ 8] 5574 	set	7, a
      00190B 12               [ 7] 5575 	ld	(de), a
                                   5576 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00190C 3Er00            [ 7] 5577 	ld	a, #<(_playfield)
      00190E DD 86 FC         [19] 5578 	add	a, -4 (ix)
      001911 5F               [ 4] 5579 	ld	e, a
      001912 3Es00            [ 7] 5580 	ld	a, #>(_playfield)
      001914 DD 8E FD         [19] 5581 	adc	a, -3 (ix)
      001917 57               [ 4] 5582 	ld	d, a
      001918 DD 6E FE         [19] 5583 	ld	l, -2 (ix)
      00191B 26 00            [ 7] 5584 	ld	h, #0x00
      00191D 19               [11] 5585 	add	hl, de
      00191E 0A               [ 7] 5586 	ld	a, (bc)
      00191F CB FF            [ 8] 5587 	set	7, a
      001921 77               [ 7] 5588 	ld	(hl), a
                                   5589 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001922 3Er00            [ 7] 5590 	ld	a, #<(_playfield)
      001924 DD 86 F5         [19] 5591 	add	a, -11 (ix)
      001927 4F               [ 4] 5592 	ld	c, a
      001928 3Es00            [ 7] 5593 	ld	a, #>(_playfield)
      00192A DD 8E F6         [19] 5594 	adc	a, -10 (ix)
      00192D 47               [ 4] 5595 	ld	b, a
      00192E 79               [ 4] 5596 	ld	a, c
      00192F DD 86 FE         [19] 5597 	add	a, -2 (ix)
      001932 4F               [ 4] 5598 	ld	c, a
      001933 30 01            [12] 5599 	jr	NC, 00622$
      001935 04               [ 4] 5600 	inc	b
      001936                       5601 00622$:
      001936 DD 6E F7         [19] 5602 	ld	l, -9 (ix)
      001939 DD 66 F8         [19] 5603 	ld	h, -8 (ix)
      00193C 7E               [ 7] 5604 	ld	a, (hl)
      00193D CB FF            [ 8] 5605 	set	7, a
      00193F 02               [ 7] 5606 	ld	(bc), a
      001940                       5607 00200$:
                                   5608 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001940 DD 34 FF         [23] 5609 	inc	-1 (ix)
      001943 C3r54r18         [10] 5610 	jp	00199$
      001946                       5611 00203$:
                                   5612 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001946 DD 34 FE         [23] 5613 	inc	-2 (ix)
      001949 C3r48r18         [10] 5614 	jp	00202$
      00194C                       5615 00108$:
                                   5616 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00194C 0E 02            [ 7] 5617 	ld	c, #0x02
      00194E                       5618 00208$:
      00194E 79               [ 4] 5619 	ld	a, c
      00194F D6 0C            [ 7] 5620 	sub	a, #0x0c
      001951 D2r13r1A         [10] 5621 	jp	NC, 00114$
                                   5622 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001954 DD 36 FF 00      [19] 5623 	ld	-1 (ix), #0
      001958                       5624 00205$:
      001958 DD 7E FF         [19] 5625 	ld	a, -1 (ix)
      00195B D6 06            [ 7] 5626 	sub	a, #0x06
      00195D D2r0Fr1A         [10] 5627 	jp	NC, 00209$
                                   5628 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      001960 DD 5E FF         [19] 5629 	ld	e, -1 (ix)
      001963 16 00            [ 7] 5630 	ld	d, #0x00
      001965 6B               [ 4] 5631 	ld	l, e
      001966 62               [ 4] 5632 	ld	h, d
      001967 29               [11] 5633 	add	hl, hl
      001968 19               [11] 5634 	add	hl, de
      001969 29               [11] 5635 	add	hl, hl
      00196A 29               [11] 5636 	add	hl, hl
      00196B DD 75 F7         [19] 5637 	ld	-9 (ix), l
      00196E DD 74 F8         [19] 5638 	ld	-8 (ix), h
      001971 3Er48            [ 7] 5639 	ld	a, #<(_playfieldTemp)
      001973 DD 86 F7         [19] 5640 	add	a, -9 (ix)
      001976 5F               [ 4] 5641 	ld	e, a
      001977 3Es00            [ 7] 5642 	ld	a, #>(_playfieldTemp)
      001979 DD 8E F8         [19] 5643 	adc	a, -8 (ix)
      00197C 57               [ 4] 5644 	ld	d, a
      00197D 7B               [ 4] 5645 	ld	a, e
      00197E 81               [ 4] 5646 	add	a, c
      00197F DD 77 F9         [19] 5647 	ld	-7 (ix), a
      001982 7A               [ 4] 5648 	ld	a, d
      001983 CE 00            [ 7] 5649 	adc	a, #0x00
      001985 DD 77 FA         [19] 5650 	ld	-6 (ix), a
      001988 DD 6E F9         [19] 5651 	ld	l, -7 (ix)
      00198B DD 66 FA         [19] 5652 	ld	h, -6 (ix)
      00198E 7E               [ 7] 5653 	ld	a, (hl)
      00198F DD 77 FE         [19] 5654 	ld	-2 (ix), a
      001992 B7               [ 4] 5655 	or	a, a
      001993 28 74            [12] 5656 	jr	Z, 00206$
                                   5657 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001995 DD 71 FD         [19] 5658 	ld	-3 (ix), c
      001998 79               [ 4] 5659 	ld	a, c
      001999 C6 FE            [ 7] 5660 	add	a, #0xfe
      00199B DD 77 FB         [19] 5661 	ld	-5 (ix), a
      00199E 6F               [ 4] 5662 	ld	l, a
      00199F 26 00            [ 7] 5663 	ld	h, #0x00
      0019A1 19               [11] 5664 	add	hl, de
      0019A2 DD 46 FD         [19] 5665 	ld	b, -3 (ix)
      0019A5 05               [ 4] 5666 	dec	b
      0019A6 7B               [ 4] 5667 	ld	a, e
      0019A7 80               [ 4] 5668 	add	a, b
      0019A8 5F               [ 4] 5669 	ld	e, a
      0019A9 30 01            [12] 5670 	jr	NC, 00623$
      0019AB 14               [ 4] 5671 	inc	d
      0019AC                       5672 00623$:
      0019AC 7E               [ 7] 5673 	ld	a, (hl)
      0019AD DD 77 FC         [19] 5674 	ld	-4 (ix), a
      0019B0 1A               [ 7] 5675 	ld	a, (de)
      0019B1 6F               [ 4] 5676 	ld	l, a
      0019B2 DD 7E FC         [19] 5677 	ld	a, -4 (ix)
      0019B5 95               [ 4] 5678 	sub	a, l
      0019B6 20 51            [12] 5679 	jr	NZ, 00206$
                                   5680 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      0019B8 DD 7E FE         [19] 5681 	ld	a, -2 (ix)
      0019BB 95               [ 4] 5682 	sub	a, l
      0019BC 20 4B            [12] 5683 	jr	NZ, 00206$
                                   5684 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      0019BE DD 36 EF 01      [19] 5685 	ld	-17 (ix), #0x01
                                   5686 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0019C2 3Er00            [ 7] 5687 	ld	a, #<(_playfield)
      0019C4 DD 86 F7         [19] 5688 	add	a, -9 (ix)
      0019C7 DD 77 FD         [19] 5689 	ld	-3 (ix), a
      0019CA 3Es00            [ 7] 5690 	ld	a, #>(_playfield)
      0019CC DD 8E F8         [19] 5691 	adc	a, -8 (ix)
      0019CF DD 77 FE         [19] 5692 	ld	-2 (ix), a
      0019D2 DD 7E FD         [19] 5693 	ld	a, -3 (ix)
      0019D5 DD 86 FB         [19] 5694 	add	a, -5 (ix)
      0019D8 6F               [ 4] 5695 	ld	l, a
      0019D9 DD 7E FE         [19] 5696 	ld	a, -2 (ix)
      0019DC CE 00            [ 7] 5697 	adc	a, #0x00
      0019DE 67               [ 4] 5698 	ld	h, a
      0019DF DD 7E FC         [19] 5699 	ld	a, -4 (ix)
      0019E2 CB FF            [ 8] 5700 	set	7, a
      0019E4 77               [ 7] 5701 	ld	(hl), a
                                   5702 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      0019E5 DD 7E FD         [19] 5703 	ld	a, -3 (ix)
      0019E8 80               [ 4] 5704 	add	a, b
      0019E9 6F               [ 4] 5705 	ld	l, a
      0019EA DD 7E FE         [19] 5706 	ld	a, -2 (ix)
      0019ED CE 00            [ 7] 5707 	adc	a, #0x00
      0019EF 67               [ 4] 5708 	ld	h, a
      0019F0 1A               [ 7] 5709 	ld	a, (de)
      0019F1 CB FF            [ 8] 5710 	set	7, a
      0019F3 77               [ 7] 5711 	ld	(hl), a
                                   5712 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0019F4 DD 7E FD         [19] 5713 	ld	a, -3 (ix)
      0019F7 81               [ 4] 5714 	add	a, c
      0019F8 5F               [ 4] 5715 	ld	e, a
      0019F9 DD 7E FE         [19] 5716 	ld	a, -2 (ix)
      0019FC CE 00            [ 7] 5717 	adc	a, #0x00
      0019FE 57               [ 4] 5718 	ld	d, a
      0019FF DD 6E F9         [19] 5719 	ld	l, -7 (ix)
      001A02 DD 66 FA         [19] 5720 	ld	h, -6 (ix)
      001A05 7E               [ 7] 5721 	ld	a, (hl)
      001A06 CB FF            [ 8] 5722 	set	7, a
      001A08 12               [ 7] 5723 	ld	(de), a
      001A09                       5724 00206$:
                                   5725 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A09 DD 34 FF         [23] 5726 	inc	-1 (ix)
      001A0C C3r58r19         [10] 5727 	jp	00205$
      001A0F                       5728 00209$:
                                   5729 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A0F 0C               [ 4] 5730 	inc	c
      001A10 C3r4Er19         [10] 5731 	jp	00208$
      001A13                       5732 00114$:
                                   5733 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A13 DD 36 FE 02      [19] 5734 	ld	-2 (ix), #0x02
      001A17                       5735 00214$:
      001A17 DD 7E FE         [19] 5736 	ld	a, -2 (ix)
      001A1A D6 0C            [ 7] 5737 	sub	a, #0x0c
      001A1C D2rBAr1B         [10] 5738 	jp	NC, 00124$
                                   5739 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A1F DD 36 FF 02      [19] 5740 	ld	-1 (ix), #0x02
      001A23                       5741 00211$:
      001A23 DD 7E FF         [19] 5742 	ld	a, -1 (ix)
      001A26 D6 06            [ 7] 5743 	sub	a, #0x06
      001A28 D2rB4r1B         [10] 5744 	jp	NC, 00215$
                                   5745 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001A2B DD 4E FF         [19] 5746 	ld	c, -1 (ix)
      001A2E 06 00            [ 7] 5747 	ld	b, #0x00
      001A30 69               [ 4] 5748 	ld	l, c
      001A31 60               [ 4] 5749 	ld	h, b
      001A32 29               [11] 5750 	add	hl, hl
      001A33 09               [11] 5751 	add	hl, bc
      001A34 29               [11] 5752 	add	hl, hl
      001A35 29               [11] 5753 	add	hl, hl
      001A36 DD 75 F0         [19] 5754 	ld	-16 (ix), l
      001A39 DD 74 F1         [19] 5755 	ld	-15 (ix), h
      001A3C 3Er48            [ 7] 5756 	ld	a, #<(_playfieldTemp)
      001A3E DD 86 F0         [19] 5757 	add	a, -16 (ix)
      001A41 4F               [ 4] 5758 	ld	c, a
      001A42 3Es00            [ 7] 5759 	ld	a, #>(_playfieldTemp)
      001A44 DD 8E F1         [19] 5760 	adc	a, -15 (ix)
      001A47 47               [ 4] 5761 	ld	b, a
      001A48 79               [ 4] 5762 	ld	a, c
      001A49 DD 86 FE         [19] 5763 	add	a, -2 (ix)
      001A4C DD 77 F2         [19] 5764 	ld	-14 (ix), a
      001A4F 78               [ 4] 5765 	ld	a, b
      001A50 CE 00            [ 7] 5766 	adc	a, #0x00
      001A52 DD 77 F3         [19] 5767 	ld	-13 (ix), a
      001A55 DD 6E F2         [19] 5768 	ld	l, -14 (ix)
      001A58 DD 66 F3         [19] 5769 	ld	h, -13 (ix)
      001A5B 5E               [ 7] 5770 	ld	e, (hl)
                                   5771 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001A5C DD 56 FF         [19] 5772 	ld	d, -1 (ix)
      001A5F DD 66 FE         [19] 5773 	ld	h, -2 (ix)
      001A62 6A               [ 4] 5774 	ld	l, d
      001A63 2D               [ 4] 5775 	dec	l
      001A64 2D               [ 4] 5776 	dec	l
      001A65 7C               [ 4] 5777 	ld	a, h
      001A66 C6 FE            [ 7] 5778 	add	a, #0xfe
      001A68 DD 77 F4         [19] 5779 	ld	-12 (ix), a
      001A6B 15               [ 4] 5780 	dec	d
      001A6C 7C               [ 4] 5781 	ld	a, h
      001A6D C6 FF            [ 7] 5782 	add	a, #0xff
      001A6F DD 77 F5         [19] 5783 	ld	-11 (ix), a
      001A72 D5               [11] 5784 	push	de
      001A73 5D               [ 4] 5785 	ld	e, l
      001A74 7B               [ 4] 5786 	ld	a, e
      001A75 07               [ 4] 5787 	rlca
      001A76 9F               [ 4] 5788 	sbc	a, a
      001A77 57               [ 4] 5789 	ld	d, a
      001A78 6B               [ 4] 5790 	ld	l, e
      001A79 62               [ 4] 5791 	ld	h, d
      001A7A 29               [11] 5792 	add	hl, hl
      001A7B 19               [11] 5793 	add	hl, de
      001A7C 29               [11] 5794 	add	hl, hl
      001A7D 29               [11] 5795 	add	hl, hl
      001A7E D1               [10] 5796 	pop	de
      001A7F DD 75 F6         [19] 5797 	ld	-10 (ix), l
      001A82 DD 74 F7         [19] 5798 	ld	-9 (ix), h
      001A85 D5               [11] 5799 	push	de
      001A86 5A               [ 4] 5800 	ld	e, d
      001A87 7B               [ 4] 5801 	ld	a, e
      001A88 07               [ 4] 5802 	rlca
      001A89 9F               [ 4] 5803 	sbc	a, a
      001A8A 57               [ 4] 5804 	ld	d, a
      001A8B 6B               [ 4] 5805 	ld	l, e
      001A8C 62               [ 4] 5806 	ld	h, d
      001A8D 29               [11] 5807 	add	hl, hl
      001A8E 19               [11] 5808 	add	hl, de
      001A8F 29               [11] 5809 	add	hl, hl
      001A90 29               [11] 5810 	add	hl, hl
      001A91 D1               [10] 5811 	pop	de
      001A92 DD 75 F8         [19] 5812 	ld	-8 (ix), l
      001A95 DD 74 F9         [19] 5813 	ld	-7 (ix), h
      001A98 3Er48            [ 7] 5814 	ld	a, #<(_playfieldTemp)
      001A9A DD 86 F6         [19] 5815 	add	a, -10 (ix)
      001A9D DD 77 FA         [19] 5816 	ld	-6 (ix), a
      001AA0 3Es00            [ 7] 5817 	ld	a, #>(_playfieldTemp)
      001AA2 DD 8E F7         [19] 5818 	adc	a, -9 (ix)
      001AA5 DD 77 FB         [19] 5819 	ld	-5 (ix), a
      001AA8 3Er48            [ 7] 5820 	ld	a, #<(_playfieldTemp)
      001AAA DD 86 F8         [19] 5821 	add	a, -8 (ix)
      001AAD 57               [ 4] 5822 	ld	d, a
      001AAE 3Es00            [ 7] 5823 	ld	a, #>(_playfieldTemp)
      001AB0 DD 8E F9         [19] 5824 	adc	a, -7 (ix)
      001AB3 6F               [ 4] 5825 	ld	l, a
      001AB4 7A               [ 4] 5826 	ld	a, d
      001AB5 DD 86 F5         [19] 5827 	add	a, -11 (ix)
      001AB8 DD 77 FC         [19] 5828 	ld	-4 (ix), a
      001ABB 7D               [ 4] 5829 	ld	a, l
      001ABC CE 00            [ 7] 5830 	adc	a, #0x00
      001ABE DD 77 FD         [19] 5831 	ld	-3 (ix), a
                                   5832 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001AC1 7B               [ 4] 5833 	ld	a, e
      001AC2 B7               [ 4] 5834 	or	a, a
      001AC3 28 74            [12] 5835 	jr	Z, 00116$
                                   5836 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001AC5 DD 7E FA         [19] 5837 	ld	a, -6 (ix)
      001AC8 DD 86 F4         [19] 5838 	add	a, -12 (ix)
      001ACB 6F               [ 4] 5839 	ld	l, a
      001ACC DD 7E FB         [19] 5840 	ld	a, -5 (ix)
      001ACF CE 00            [ 7] 5841 	adc	a, #0x00
      001AD1 67               [ 4] 5842 	ld	h, a
      001AD2 56               [ 7] 5843 	ld	d, (hl)
      001AD3 DD 6E FC         [19] 5844 	ld	l, -4 (ix)
      001AD6 DD 66 FD         [19] 5845 	ld	h, -3 (ix)
      001AD9 6E               [ 7] 5846 	ld	l, (hl)
      001ADA 7A               [ 4] 5847 	ld	a, d
      001ADB 95               [ 4] 5848 	sub	a, l
      001ADC 20 5B            [12] 5849 	jr	NZ, 00116$
                                   5850 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001ADE 7B               [ 4] 5851 	ld	a, e
      001ADF 95               [ 4] 5852 	sub	a, l
      001AE0 20 57            [12] 5853 	jr	NZ, 00116$
                                   5854 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001AE2 DD 36 EF 01      [19] 5855 	ld	-17 (ix), #0x01
                                   5856 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001AE6 3Er00            [ 7] 5857 	ld	a, #<(_playfield)
      001AE8 DD 86 F6         [19] 5858 	add	a, -10 (ix)
      001AEB 5F               [ 4] 5859 	ld	e, a
      001AEC 3Es00            [ 7] 5860 	ld	a, #>(_playfield)
      001AEE DD 8E F7         [19] 5861 	adc	a, -9 (ix)
      001AF1 67               [ 4] 5862 	ld	h, a
      001AF2 7B               [ 4] 5863 	ld	a, e
      001AF3 DD 86 F4         [19] 5864 	add	a, -12 (ix)
      001AF6 6F               [ 4] 5865 	ld	l, a
      001AF7 30 01            [12] 5866 	jr	NC, 00632$
      001AF9 24               [ 4] 5867 	inc	h
      001AFA                       5868 00632$:
      001AFA CB FA            [ 8] 5869 	set	7, d
      001AFC 72               [ 7] 5870 	ld	(hl), d
                                   5871 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001AFD 3Er00            [ 7] 5872 	ld	a, #<(_playfield)
      001AFF DD 86 F8         [19] 5873 	add	a, -8 (ix)
      001B02 5F               [ 4] 5874 	ld	e, a
      001B03 3Es00            [ 7] 5875 	ld	a, #>(_playfield)
      001B05 DD 8E F9         [19] 5876 	adc	a, -7 (ix)
      001B08 57               [ 4] 5877 	ld	d, a
      001B09 7B               [ 4] 5878 	ld	a, e
      001B0A DD 86 F5         [19] 5879 	add	a, -11 (ix)
      001B0D 5F               [ 4] 5880 	ld	e, a
      001B0E 30 01            [12] 5881 	jr	NC, 00633$
      001B10 14               [ 4] 5882 	inc	d
      001B11                       5883 00633$:
      001B11 DD 6E FC         [19] 5884 	ld	l, -4 (ix)
      001B14 DD 66 FD         [19] 5885 	ld	h, -3 (ix)
      001B17 7E               [ 7] 5886 	ld	a, (hl)
      001B18 CB FF            [ 8] 5887 	set	7, a
      001B1A 12               [ 7] 5888 	ld	(de), a
                                   5889 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001B1B 3Er00            [ 7] 5890 	ld	a, #<(_playfield)
      001B1D DD 86 F0         [19] 5891 	add	a, -16 (ix)
      001B20 5F               [ 4] 5892 	ld	e, a
      001B21 3Es00            [ 7] 5893 	ld	a, #>(_playfield)
      001B23 DD 8E F1         [19] 5894 	adc	a, -15 (ix)
      001B26 57               [ 4] 5895 	ld	d, a
      001B27 7B               [ 4] 5896 	ld	a, e
      001B28 DD 86 FE         [19] 5897 	add	a, -2 (ix)
      001B2B 5F               [ 4] 5898 	ld	e, a
      001B2C 30 01            [12] 5899 	jr	NC, 00634$
      001B2E 14               [ 4] 5900 	inc	d
      001B2F                       5901 00634$:
      001B2F DD 6E F2         [19] 5902 	ld	l, -14 (ix)
      001B32 DD 66 F3         [19] 5903 	ld	h, -13 (ix)
      001B35 7E               [ 7] 5904 	ld	a, (hl)
      001B36 CB FF            [ 8] 5905 	set	7, a
      001B38 12               [ 7] 5906 	ld	(de), a
      001B39                       5907 00116$:
                                   5908 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001B39 DD 6E F4         [19] 5909 	ld	l, -12 (ix)
      001B3C 26 00            [ 7] 5910 	ld	h, #0x00
      001B3E 09               [11] 5911 	add	hl, bc
      001B3F 4E               [ 7] 5912 	ld	c, (hl)
      001B40 79               [ 4] 5913 	ld	a, c
      001B41 B7               [ 4] 5914 	or	a, a
      001B42 28 6A            [12] 5915 	jr	Z, 00212$
                                   5916 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001B44 DD 7E FA         [19] 5917 	ld	a, -6 (ix)
      001B47 DD 86 FE         [19] 5918 	add	a, -2 (ix)
      001B4A 5F               [ 4] 5919 	ld	e, a
      001B4B DD 7E FB         [19] 5920 	ld	a, -5 (ix)
      001B4E CE 00            [ 7] 5921 	adc	a, #0x00
      001B50 57               [ 4] 5922 	ld	d, a
      001B51 DD 6E FC         [19] 5923 	ld	l, -4 (ix)
      001B54 DD 66 FD         [19] 5924 	ld	h, -3 (ix)
      001B57 46               [ 7] 5925 	ld	b, (hl)
      001B58 1A               [ 7] 5926 	ld	a, (de)
      001B59 B8               [ 4] 5927 	cp	a, b
      001B5A 20 52            [12] 5928 	jr	NZ, 00212$
                                   5929 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001B5C 91               [ 4] 5930 	sub	a, c
      001B5D 20 4F            [12] 5931 	jr	NZ, 00212$
                                   5932 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001B5F DD 36 EF 01      [19] 5933 	ld	-17 (ix), #0x01
                                   5934 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001B63 3Er00            [ 7] 5935 	ld	a, #<(_playfield)
      001B65 DD 86 F0         [19] 5936 	add	a, -16 (ix)
      001B68 47               [ 4] 5937 	ld	b, a
      001B69 3Es00            [ 7] 5938 	ld	a, #>(_playfield)
      001B6B DD 8E F1         [19] 5939 	adc	a, -15 (ix)
      001B6E 67               [ 4] 5940 	ld	h, a
      001B6F 78               [ 4] 5941 	ld	a, b
      001B70 DD 86 F4         [19] 5942 	add	a, -12 (ix)
      001B73 6F               [ 4] 5943 	ld	l, a
      001B74 30 01            [12] 5944 	jr	NC, 00639$
      001B76 24               [ 4] 5945 	inc	h
      001B77                       5946 00639$:
      001B77 CB F9            [ 8] 5947 	set	7, c
      001B79 71               [ 7] 5948 	ld	(hl), c
                                   5949 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001B7A 3Er00            [ 7] 5950 	ld	a, #<(_playfield)
      001B7C DD 86 F8         [19] 5951 	add	a, -8 (ix)
      001B7F 4F               [ 4] 5952 	ld	c, a
      001B80 3Es00            [ 7] 5953 	ld	a, #>(_playfield)
      001B82 DD 8E F9         [19] 5954 	adc	a, -7 (ix)
      001B85 47               [ 4] 5955 	ld	b, a
      001B86 79               [ 4] 5956 	ld	a, c
      001B87 DD 86 F5         [19] 5957 	add	a, -11 (ix)
      001B8A 4F               [ 4] 5958 	ld	c, a
      001B8B 30 01            [12] 5959 	jr	NC, 00640$
      001B8D 04               [ 4] 5960 	inc	b
      001B8E                       5961 00640$:
      001B8E DD 6E FC         [19] 5962 	ld	l, -4 (ix)
      001B91 DD 66 FD         [19] 5963 	ld	h, -3 (ix)
      001B94 7E               [ 7] 5964 	ld	a, (hl)
      001B95 CB FF            [ 8] 5965 	set	7, a
      001B97 02               [ 7] 5966 	ld	(bc), a
                                   5967 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001B98 3Er00            [ 7] 5968 	ld	a, #<(_playfield)
      001B9A DD 86 F6         [19] 5969 	add	a, -10 (ix)
      001B9D 4F               [ 4] 5970 	ld	c, a
      001B9E 3Es00            [ 7] 5971 	ld	a, #>(_playfield)
      001BA0 DD 8E F7         [19] 5972 	adc	a, -9 (ix)
      001BA3 47               [ 4] 5973 	ld	b, a
      001BA4 DD 6E FE         [19] 5974 	ld	l, -2 (ix)
      001BA7 26 00            [ 7] 5975 	ld	h, #0x00
      001BA9 09               [11] 5976 	add	hl, bc
      001BAA 1A               [ 7] 5977 	ld	a, (de)
      001BAB CB FF            [ 8] 5978 	set	7, a
      001BAD 77               [ 7] 5979 	ld	(hl), a
      001BAE                       5980 00212$:
                                   5981 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001BAE DD 34 FF         [23] 5982 	inc	-1 (ix)
      001BB1 C3r23r1A         [10] 5983 	jp	00211$
      001BB4                       5984 00215$:
                                   5985 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001BB4 DD 34 FE         [23] 5986 	inc	-2 (ix)
      001BB7 C3r17r1A         [10] 5987 	jp	00214$
      001BBA                       5988 00124$:
                                   5989 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001BBA DD 7E EF         [19] 5990 	ld	a, -17 (ix)
      001BBD B7               [ 4] 5991 	or	a, a
      001BBE CAr66r1F         [10] 5992 	jp	Z, 00190$
                                   5993 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001BC1 DD 36 F5 FF      [19] 5994 	ld	-11 (ix), #0xff
      001BC5 DD 36 F6 00      [19] 5995 	ld	-10 (ix), #0
                                   5996 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001BC9 DD 36 F7 05      [19] 5997 	ld	-9 (ix), #0x05
      001BCD DD 36 F8 00      [19] 5998 	ld	-8 (ix), #0
                                   5999 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001BD1 DD 36 F9 0B      [19] 6000 	ld	-7 (ix), #0x0b
      001BD5 DD 36 FA 00      [19] 6001 	ld	-6 (ix), #0
                                   6002 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001BD9 CDr48r0A         [17] 6003 	call	_HideArrowSprite
                                   6004 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001BDC CDr96r17         [17] 6005 	call	_SoundFx_2
                                   6006 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001BDF DD 36 FB 00      [19] 6007 	ld	-5 (ix), #0
                                   6008 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001BE3 DD 36 FF 00      [19] 6009 	ld	-1 (ix), #0
      001BE7                       6010 00220$:
      001BE7 DD 7E FF         [19] 6011 	ld	a, -1 (ix)
      001BEA D6 0C            [ 7] 6012 	sub	a, #0x0c
      001BEC 30 5F            [12] 6013 	jr	NC, 00291$
                                   6014 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001BEE DD 5E FB         [19] 6015 	ld	e, -5 (ix)
      001BF1 06 00            [ 7] 6016 	ld	b, #0x00
      001BF3                       6017 00217$:
      001BF3 78               [ 4] 6018 	ld	a, b
      001BF4 D6 06            [ 7] 6019 	sub	a, #0x06
      001BF6 30 4D            [12] 6020 	jr	NC, 00320$
                                   6021 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001BF8 D5               [11] 6022 	push	de
      001BF9 58               [ 4] 6023 	ld	e, b
      001BFA 16 00            [ 7] 6024 	ld	d, #0x00
      001BFC 6B               [ 4] 6025 	ld	l, e
      001BFD 62               [ 4] 6026 	ld	h, d
      001BFE 29               [11] 6027 	add	hl, hl
      001BFF 19               [11] 6028 	add	hl, de
      001C00 29               [11] 6029 	add	hl, hl
      001C01 29               [11] 6030 	add	hl, hl
      001C02 11r00r00         [10] 6031 	ld	de, #_playfield
      001C05 19               [11] 6032 	add	hl, de
      001C06 D1               [10] 6033 	pop	de
      001C07 7D               [ 4] 6034 	ld	a, l
      001C08 DD 86 FF         [19] 6035 	add	a, -1 (ix)
      001C0B 6F               [ 4] 6036 	ld	l, a
      001C0C 30 01            [12] 6037 	jr	NC, 00641$
      001C0E 24               [ 4] 6038 	inc	h
      001C0F                       6039 00641$:
      001C0F 7E               [ 7] 6040 	ld	a, (hl)
      001C10 07               [ 4] 6041 	rlca
      001C11 30 2F            [12] 6042 	jr	NC, 00218$
                                   6043 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001C13 1C               [ 4] 6044 	inc	e
                                   6045 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001C14 78               [ 4] 6046 	ld	a, b
      001C15 DD 96 F7         [19] 6047 	sub	a, -9 (ix)
      001C18 30 03            [12] 6048 	jr	NC, 00126$
      001C1A DD 70 F7         [19] 6049 	ld	-9 (ix), b
      001C1D                       6050 00126$:
                                   6051 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001C1D DD 7E F8         [19] 6052 	ld	a, -8 (ix)
      001C20 90               [ 4] 6053 	sub	a, b
      001C21 30 03            [12] 6054 	jr	NC, 00128$
      001C23 DD 70 F8         [19] 6055 	ld	-8 (ix), b
      001C26                       6056 00128$:
                                   6057 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001C26 DD 7E FF         [19] 6058 	ld	a, -1 (ix)
      001C29 DD 96 F9         [19] 6059 	sub	a, -7 (ix)
      001C2C 30 06            [12] 6060 	jr	NC, 00130$
      001C2E DD 7E FF         [19] 6061 	ld	a, -1 (ix)
      001C31 DD 77 F9         [19] 6062 	ld	-7 (ix), a
      001C34                       6063 00130$:
                                   6064 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001C34 DD 7E FA         [19] 6065 	ld	a, -6 (ix)
      001C37 DD 96 FF         [19] 6066 	sub	a, -1 (ix)
      001C3A 30 06            [12] 6067 	jr	NC, 00218$
      001C3C DD 7E FF         [19] 6068 	ld	a, -1 (ix)
      001C3F DD 77 FA         [19] 6069 	ld	-6 (ix), a
      001C42                       6070 00218$:
                                   6071 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C42 04               [ 4] 6072 	inc	b
      001C43 18 AE            [12] 6073 	jr	00217$
      001C45                       6074 00320$:
      001C45 DD 73 FB         [19] 6075 	ld	-5 (ix), e
                                   6076 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C48 DD 34 FF         [23] 6077 	inc	-1 (ix)
      001C4B 18 9A            [12] 6078 	jr	00220$
                                   6079 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001C4D                       6080 00291$:
      001C4D DD 36 FF 48      [19] 6081 	ld	-1 (ix), #0x48
      001C51                       6082 00166$:
      001C51 DD 4E FF         [19] 6083 	ld	c, -1 (ix)
      001C54 DD 35 FF         [23] 6084 	dec	-1 (ix)
      001C57 79               [ 4] 6085 	ld	a, c
      001C58 B7               [ 4] 6086 	or	a, a
      001C59 CAr01r1E         [10] 6087 	jp	Z, 00168$
                                   6088 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001C5C ED 5B 9E FC      [20] 6089 	ld	de, (_JIFFY)
                                   6090 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001C60                       6091 00137$:
      001C60 2A 9E FC         [16] 6092 	ld	hl, (_JIFFY)
      001C63 BF               [ 4] 6093 	cp	a, a
      001C64 ED 52            [15] 6094 	sbc	hl, de
      001C66 28 F8            [12] 6095 	jr	Z, 00137$
                                   6096 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001C68 DD 7E FB         [19] 6097 	ld	a, -5 (ix)
      001C6B D6 03            [ 7] 6098 	sub	a, #0x03
      001C6D DAr1Fr1D         [10] 6099 	jp	C, 00301$
                                   6100 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001C70 DD 7E FB         [19] 6101 	ld	a, -5 (ix)
      001C73 D6 07            [ 7] 6102 	sub	a, #0x07
      001C75 38 04            [12] 6103 	jr	C, 00141$
      001C77 DD 36 FB 07      [19] 6104 	ld	-5 (ix), #0x07
      001C7B                       6105 00141$:
                                   6106 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001C7B DD 7E F5         [19] 6107 	ld	a, -11 (ix)
      001C7E 3C               [ 4] 6108 	inc	a
      001C7F 20 7B            [12] 6109 	jr	NZ, 00143$
                                   6110 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001C81 DD 6E F8         [19] 6111 	ld	l, -8 (ix)
      001C84 26 00            [ 7] 6112 	ld	h, #0x00
      001C86 29               [11] 6113 	add	hl, hl
      001C87 29               [11] 6114 	add	hl, hl
      001C88 29               [11] 6115 	add	hl, hl
      001C89 29               [11] 6116 	add	hl, hl
      001C8A DD 5E F7         [19] 6117 	ld	e, -9 (ix)
      001C8D 16 00            [ 7] 6118 	ld	d, #0x00
      001C8F EB               [ 4] 6119 	ex	de, hl
      001C90 29               [11] 6120 	add	hl, hl
      001C91 29               [11] 6121 	add	hl, hl
      001C92 29               [11] 6122 	add	hl, hl
      001C93 29               [11] 6123 	add	hl, hl
      001C94 EB               [ 4] 6124 	ex	de, hl
      001C95 BF               [ 4] 6125 	cp	a, a
      001C96 ED 52            [15] 6126 	sbc	hl, de
      001C98 4D               [ 4] 6127 	ld	c, l
      001C99 44               [ 4] 6128 	ld	b, h
      001C9A CB 7C            [ 8] 6129 	bit	7, h
      001C9C 28 03            [12] 6130 	jr	Z, 00239$
      001C9E 4D               [ 4] 6131 	ld	c, l
      001C9F 44               [ 4] 6132 	ld	b, h
      001CA0 03               [ 6] 6133 	inc	bc
      001CA1                       6134 00239$:
      001CA1 CB 28            [ 8] 6135 	sra	b
      001CA3 CB 19            [ 8] 6136 	rr	c
      001CA5 79               [ 4] 6137 	ld	a, c
      001CA6 C6 50            [ 7] 6138 	add	a, #0x50
      001CA8 DD 6E F7         [19] 6139 	ld	l, -9 (ix)
      001CAB 29               [11] 6140 	add	hl, hl
      001CAC 29               [11] 6141 	add	hl, hl
      001CAD 29               [11] 6142 	add	hl, hl
      001CAE 29               [11] 6143 	add	hl, hl
      001CAF 85               [ 4] 6144 	add	a, l
      001CB0 DD 77 F5         [19] 6145 	ld	-11 (ix), a
                                   6146 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001CB3 DD 6E F9         [19] 6147 	ld	l, -7 (ix)
      001CB6 26 00            [ 7] 6148 	ld	h, #0x00
      001CB8 29               [11] 6149 	add	hl, hl
      001CB9 29               [11] 6150 	add	hl, hl
      001CBA 29               [11] 6151 	add	hl, hl
      001CBB 29               [11] 6152 	add	hl, hl
      001CBC DD 5E FA         [19] 6153 	ld	e, -6 (ix)
      001CBF 16 00            [ 7] 6154 	ld	d, #0x00
      001CC1 EB               [ 4] 6155 	ex	de, hl
      001CC2 29               [11] 6156 	add	hl, hl
      001CC3 29               [11] 6157 	add	hl, hl
      001CC4 29               [11] 6158 	add	hl, hl
      001CC5 29               [11] 6159 	add	hl, hl
      001CC6 EB               [ 4] 6160 	ex	de, hl
      001CC7 BF               [ 4] 6161 	cp	a, a
      001CC8 ED 52            [15] 6162 	sbc	hl, de
      001CCA 4D               [ 4] 6163 	ld	c, l
      001CCB 44               [ 4] 6164 	ld	b, h
      001CCC CB 7C            [ 8] 6165 	bit	7, h
      001CCE 28 03            [12] 6166 	jr	Z, 00240$
      001CD0 23               [ 6] 6167 	inc	hl
      001CD1 4D               [ 4] 6168 	ld	c, l
      001CD2 44               [ 4] 6169 	ld	b, h
      001CD3                       6170 00240$:
      001CD3 CB 28            [ 8] 6171 	sra	b
      001CD5 CB 19            [ 8] 6172 	rr	c
      001CD7 DD 7E FA         [19] 6173 	ld	a, -6 (ix)
      001CDA 87               [ 4] 6174 	add	a, a
      001CDB 87               [ 4] 6175 	add	a, a
      001CDC 87               [ 4] 6176 	add	a, a
      001CDD 87               [ 4] 6177 	add	a, a
      001CDE 81               [ 4] 6178 	add	a, c
      001CDF DD 77 F6         [19] 6179 	ld	-10 (ix), a
                                   6180 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001CE2 26 01            [ 7] 6181 	ld	h, #0x01
      001CE4 DD 6E F6         [19] 6182 	ld	l, -10 (ix)
      001CE7 E5               [11] 6183 	push	hl
      001CE8 DD 66 F5         [19] 6184 	ld	h, -11 (ix)
      001CEB DD 6E 04         [19] 6185 	ld	l, 4 (ix)
      001CEE E5               [11] 6186 	push	hl
      001CEF DD 7E FB         [19] 6187 	ld	a, -5 (ix)
      001CF2 F5               [11] 6188 	push	af
      001CF3 33               [ 6] 6189 	inc	sp
      001CF4 CDr56r0A         [17] 6190 	call	_DrawHitSprite
      001CF7 F1               [10] 6191 	pop	af
      001CF8 F1               [10] 6192 	pop	af
      001CF9 33               [ 6] 6193 	inc	sp
      001CFA 18 23            [12] 6194 	jr	00301$
      001CFC                       6195 00143$:
                                   6196 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001CFC DD 4E FF         [19] 6197 	ld	c, -1 (ix)
      001CFF 3E 48            [ 7] 6198 	ld	a, #0x48
      001D01 91               [ 4] 6199 	sub	a, c
      001D02 4F               [ 4] 6200 	ld	c, a
      001D03 DD 7E F6         [19] 6201 	ld	a, -10 (ix)
      001D06 91               [ 4] 6202 	sub	a, c
      001D07 26 00            [ 7] 6203 	ld	h, #0x00
      001D09 E5               [11] 6204 	push	hl
      001D0A 33               [ 6] 6205 	inc	sp
      001D0B F5               [11] 6206 	push	af
      001D0C 33               [ 6] 6207 	inc	sp
      001D0D DD 66 F5         [19] 6208 	ld	h, -11 (ix)
      001D10 DD 6E 04         [19] 6209 	ld	l, 4 (ix)
      001D13 E5               [11] 6210 	push	hl
      001D14 DD 7E FB         [19] 6211 	ld	a, -5 (ix)
      001D17 F5               [11] 6212 	push	af
      001D18 33               [ 6] 6213 	inc	sp
      001D19 CDr56r0A         [17] 6214 	call	_DrawHitSprite
      001D1C F1               [10] 6215 	pop	af
      001D1D F1               [10] 6216 	pop	af
      001D1E 33               [ 6] 6217 	inc	sp
                                   6218 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D1F                       6219 00301$:
      001D1F 3E 0C            [ 7] 6220 	ld	a, #0x0c
      001D21 DD 96 FF         [19] 6221 	sub	a, -1 (ix)
      001D24 3E 00            [ 7] 6222 	ld	a, #0x00
      001D26 17               [ 4] 6223 	rla
      001D27 5F               [ 4] 6224 	ld	e, a
      001D28 3E 09            [ 7] 6225 	ld	a, #0x09
      001D2A DD 96 FF         [19] 6226 	sub	a, -1 (ix)
      001D2D 3E 00            [ 7] 6227 	ld	a, #0x00
      001D2F 17               [ 4] 6228 	rla
      001D30 4F               [ 4] 6229 	ld	c, a
      001D31 3E 06            [ 7] 6230 	ld	a, #0x06
      001D33 DD 96 FF         [19] 6231 	sub	a, -1 (ix)
      001D36 3E 00            [ 7] 6232 	ld	a, #0x00
      001D38 17               [ 4] 6233 	rla
      001D39 DD 77 FC         [19] 6234 	ld	-4 (ix), a
      001D3C 3E 03            [ 7] 6235 	ld	a, #0x03
      001D3E DD 96 FF         [19] 6236 	sub	a, -1 (ix)
      001D41 3E 00            [ 7] 6237 	ld	a, #0x00
      001D43 17               [ 4] 6238 	rla
      001D44 DD 77 FD         [19] 6239 	ld	-3 (ix), a
      001D47 06 00            [ 7] 6240 	ld	b, #0x00
      001D49                       6241 00226$:
      001D49 78               [ 4] 6242 	ld	a, b
      001D4A D6 0C            [ 7] 6243 	sub	a, #0x0c
      001D4C D2r51r1C         [10] 6244 	jp	NC, 00166$
                                   6245 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D4F 16 00            [ 7] 6246 	ld	d, #0x00
      001D51                       6247 00223$:
      001D51 7A               [ 4] 6248 	ld	a, d
      001D52 D6 06            [ 7] 6249 	sub	a, #0x06
      001D54 D2rFDr1D         [10] 6250 	jp	NC, 00227$
                                   6251 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001D57 D5               [11] 6252 	push	de
      001D58 5A               [ 4] 6253 	ld	e, d
      001D59 16 00            [ 7] 6254 	ld	d, #0x00
      001D5B 6B               [ 4] 6255 	ld	l, e
      001D5C 62               [ 4] 6256 	ld	h, d
      001D5D 29               [11] 6257 	add	hl, hl
      001D5E 19               [11] 6258 	add	hl, de
      001D5F 29               [11] 6259 	add	hl, hl
      001D60 29               [11] 6260 	add	hl, hl
      001D61 11r00r00         [10] 6261 	ld	de, #_playfield
      001D64 19               [11] 6262 	add	hl, de
      001D65 D1               [10] 6263 	pop	de
      001D66 7D               [ 4] 6264 	ld	a, l
      001D67 80               [ 4] 6265 	add	a, b
      001D68 6F               [ 4] 6266 	ld	l, a
      001D69 30 01            [12] 6267 	jr	NC, 00646$
      001D6B 24               [ 4] 6268 	inc	h
      001D6C                       6269 00646$:
      001D6C 7E               [ 7] 6270 	ld	a, (hl)
      001D6D DD 77 FE         [19] 6271 	ld	-2 (ix), a
      001D70 DD CB FE 7E      [20] 6272 	bit	7, -2 (ix)
      001D74 CArF9r1D         [10] 6273 	jp	Z,00224$
                                   6274 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001D77 7B               [ 4] 6275 	ld	a, e
      001D78 B7               [ 4] 6276 	or	a, a
      001D79 28 2C            [12] 6277 	jr	Z, 00160$
                                   6278 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001D7B 2A 9E FC         [16] 6279 	ld	hl, (_JIFFY)
      001D7E 7D               [ 4] 6280 	ld	a, l
      001D7F E6 03            [ 7] 6281 	and	a, #0x03
      001D81 28 14            [12] 6282 	jr	Z, 00148$
                                   6283 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001D83 DD 7E FE         [19] 6284 	ld	a, -2 (ix)
      001D86 CB BF            [ 8] 6285 	res	7, a
      001D88 C5               [11] 6286 	push	bc
      001D89 D5               [11] 6287 	push	de
      001D8A F5               [11] 6288 	push	af
      001D8B 33               [ 6] 6289 	inc	sp
      001D8C 4A               [ 4] 6290 	ld	c, d
      001D8D C5               [11] 6291 	push	bc
      001D8E CDr61r16         [17] 6292 	call	_DrawBlock
      001D91 F1               [10] 6293 	pop	af
      001D92 33               [ 6] 6294 	inc	sp
      001D93 D1               [10] 6295 	pop	de
      001D94 C1               [10] 6296 	pop	bc
      001D95 18 62            [12] 6297 	jr	00224$
      001D97                       6298 00148$:
                                   6299 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001D97 C5               [11] 6300 	push	bc
      001D98 D5               [11] 6301 	push	de
      001D99 AF               [ 4] 6302 	xor	a, a
      001D9A F5               [11] 6303 	push	af
      001D9B 33               [ 6] 6304 	inc	sp
      001D9C 4A               [ 4] 6305 	ld	c, d
      001D9D C5               [11] 6306 	push	bc
      001D9E CDr61r16         [17] 6307 	call	_DrawBlock
      001DA1 F1               [10] 6308 	pop	af
      001DA2 33               [ 6] 6309 	inc	sp
      001DA3 D1               [10] 6310 	pop	de
      001DA4 C1               [10] 6311 	pop	bc
      001DA5 18 52            [12] 6312 	jr	00224$
      001DA7                       6313 00160$:
                                   6314 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001DA7 79               [ 4] 6315 	ld	a, c
      001DA8 B7               [ 4] 6316 	or	a, a
      001DA9 28 11            [12] 6317 	jr	Z, 00157$
      001DAB C5               [11] 6318 	push	bc
      001DAC D5               [11] 6319 	push	de
      001DAD 3E 2A            [ 7] 6320 	ld	a, #0x2a
      001DAF F5               [11] 6321 	push	af
      001DB0 33               [ 6] 6322 	inc	sp
      001DB1 4A               [ 4] 6323 	ld	c, d
      001DB2 C5               [11] 6324 	push	bc
      001DB3 CDrC9r16         [17] 6325 	call	_DrawBlock_SameTile
      001DB6 F1               [10] 6326 	pop	af
      001DB7 33               [ 6] 6327 	inc	sp
      001DB8 D1               [10] 6328 	pop	de
      001DB9 C1               [10] 6329 	pop	bc
      001DBA 18 3D            [12] 6330 	jr	00224$
      001DBC                       6331 00157$:
                                   6332 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001DBC DD 7E FC         [19] 6333 	ld	a, -4 (ix)
      001DBF B7               [ 4] 6334 	or	a, a
      001DC0 28 11            [12] 6335 	jr	Z, 00154$
      001DC2 C5               [11] 6336 	push	bc
      001DC3 D5               [11] 6337 	push	de
      001DC4 3E 2B            [ 7] 6338 	ld	a, #0x2b
      001DC6 F5               [11] 6339 	push	af
      001DC7 33               [ 6] 6340 	inc	sp
      001DC8 4A               [ 4] 6341 	ld	c, d
      001DC9 C5               [11] 6342 	push	bc
      001DCA CDrC9r16         [17] 6343 	call	_DrawBlock_SameTile
      001DCD F1               [10] 6344 	pop	af
      001DCE 33               [ 6] 6345 	inc	sp
      001DCF D1               [10] 6346 	pop	de
      001DD0 C1               [10] 6347 	pop	bc
      001DD1 18 26            [12] 6348 	jr	00224$
      001DD3                       6349 00154$:
                                   6350 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001DD3 DD 7E FD         [19] 6351 	ld	a, -3 (ix)
      001DD6 B7               [ 4] 6352 	or	a, a
      001DD7 28 11            [12] 6353 	jr	Z, 00151$
      001DD9 C5               [11] 6354 	push	bc
      001DDA D5               [11] 6355 	push	de
      001DDB 3E 2C            [ 7] 6356 	ld	a, #0x2c
      001DDD F5               [11] 6357 	push	af
      001DDE 33               [ 6] 6358 	inc	sp
      001DDF 4A               [ 4] 6359 	ld	c, d
      001DE0 C5               [11] 6360 	push	bc
      001DE1 CDrC9r16         [17] 6361 	call	_DrawBlock_SameTile
      001DE4 F1               [10] 6362 	pop	af
      001DE5 33               [ 6] 6363 	inc	sp
      001DE6 D1               [10] 6364 	pop	de
      001DE7 C1               [10] 6365 	pop	bc
      001DE8 18 0F            [12] 6366 	jr	00224$
      001DEA                       6367 00151$:
                                   6368 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001DEA C5               [11] 6369 	push	bc
      001DEB D5               [11] 6370 	push	de
      001DEC 3E 2D            [ 7] 6371 	ld	a, #0x2d
      001DEE F5               [11] 6372 	push	af
      001DEF 33               [ 6] 6373 	inc	sp
      001DF0 4A               [ 4] 6374 	ld	c, d
      001DF1 C5               [11] 6375 	push	bc
      001DF2 CDrC9r16         [17] 6376 	call	_DrawBlock_SameTile
      001DF5 F1               [10] 6377 	pop	af
      001DF6 33               [ 6] 6378 	inc	sp
      001DF7 D1               [10] 6379 	pop	de
      001DF8 C1               [10] 6380 	pop	bc
      001DF9                       6381 00224$:
                                   6382 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DF9 14               [ 4] 6383 	inc	d
      001DFA C3r51r1D         [10] 6384 	jp	00223$
      001DFD                       6385 00227$:
                                   6386 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001DFD 04               [ 4] 6387 	inc	b
      001DFE C3r49r1D         [10] 6388 	jp	00226$
      001E01                       6389 00168$:
                                   6390 ;src\/CheckPlayfield.h:196: HideHitSprite();
      001E01 CDr68r0C         [17] 6391 	call	_HideHitSprite
                                   6392 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E04 DD 36 FD 00      [19] 6393 	ld	-3 (ix), #0
      001E08                       6394 00235$:
      001E08 DD 7E FD         [19] 6395 	ld	a, -3 (ix)
      001E0B D6 0C            [ 7] 6396 	sub	a, #0x0c
      001E0D D2rEBr1E         [10] 6397 	jp	NC, 00177$
                                   6398 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E10 DD 36 FE 00      [19] 6399 	ld	-2 (ix), #0
      001E14                       6400 00232$:
      001E14 DD 7E FE         [19] 6401 	ld	a, -2 (ix)
      001E17 D6 06            [ 7] 6402 	sub	a, #0x06
      001E19 D2rE5r1E         [10] 6403 	jp	NC, 00236$
                                   6404 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001E1C DD 4E FE         [19] 6405 	ld	c, -2 (ix)
      001E1F 06 00            [ 7] 6406 	ld	b, #0x00
      001E21 69               [ 4] 6407 	ld	l, c
      001E22 60               [ 4] 6408 	ld	h, b
      001E23 29               [11] 6409 	add	hl, hl
      001E24 09               [11] 6410 	add	hl, bc
      001E25 29               [11] 6411 	add	hl, hl
      001E26 29               [11] 6412 	add	hl, hl
      001E27 EB               [ 4] 6413 	ex	de, hl
      001E28 21r00r00         [10] 6414 	ld	hl, #_playfield
      001E2B 19               [11] 6415 	add	hl, de
      001E2C DD 75 FB         [19] 6416 	ld	-5 (ix), l
      001E2F DD 74 FC         [19] 6417 	ld	-4 (ix), h
      001E32 DD 7E FB         [19] 6418 	ld	a, -5 (ix)
      001E35 DD 86 FD         [19] 6419 	add	a, -3 (ix)
      001E38 4F               [ 4] 6420 	ld	c, a
      001E39 DD 7E FC         [19] 6421 	ld	a, -4 (ix)
      001E3C CE 00            [ 7] 6422 	adc	a, #0x00
      001E3E 47               [ 4] 6423 	ld	b, a
      001E3F 0A               [ 7] 6424 	ld	a, (bc)
      001E40 07               [ 4] 6425 	rlca
      001E41 D2rDFr1E         [10] 6426 	jp	NC,00233$
                                   6427 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      001E44 2Ar04r00         [16] 6428 	ld	hl, (_blocksRemoved)
      001E47 23               [ 6] 6429 	inc	hl
      001E48 22r04r00         [16] 6430 	ld	(_blocksRemoved), hl
                                   6431 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001E4B DD 7E FB         [19] 6432 	ld	a, -5 (ix)
      001E4E DD 77 F7         [19] 6433 	ld	-9 (ix), a
      001E51 DD 7E FC         [19] 6434 	ld	a, -4 (ix)
      001E54 DD 77 F8         [19] 6435 	ld	-8 (ix), a
      001E57 DD 7E FD         [19] 6436 	ld	a, -3 (ix)
      001E5A DD 77 FF         [19] 6437 	ld	-1 (ix), a
      001E5D                       6438 00229$:
      001E5D DD 7E FF         [19] 6439 	ld	a, -1 (ix)
      001E60 B7               [ 4] 6440 	or	a, a
      001E61 28 7C            [12] 6441 	jr	Z, 00233$
                                   6442 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      001E63 0E 01            [ 7] 6443 	ld	c, #0x01
                                   6444 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001E65 DD 7E FF         [19] 6445 	ld	a, -1 (ix)
      001E68 DD 77 FC         [19] 6446 	ld	-4 (ix), a
      001E6B 3D               [ 4] 6447 	dec	a
      001E6C DD 86 F7         [19] 6448 	add	a, -9 (ix)
      001E6F 5F               [ 4] 6449 	ld	e, a
      001E70 3E 00            [ 7] 6450 	ld	a, #0x00
      001E72 DD 8E F8         [19] 6451 	adc	a, -8 (ix)
      001E75 57               [ 4] 6452 	ld	d, a
      001E76 1A               [ 7] 6453 	ld	a, (de)
      001E77 07               [ 4] 6454 	rlca
      001E78 30 02            [12] 6455 	jr	NC, 00170$
      001E7A 0E 02            [ 7] 6456 	ld	c, #0x02
      001E7C                       6457 00170$:
                                   6458 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001E7C DD 7E FC         [19] 6459 	ld	a, -4 (ix)
      001E7F 3D               [ 4] 6460 	dec	a
      001E80 3D               [ 4] 6461 	dec	a
      001E81 DD 86 F7         [19] 6462 	add	a, -9 (ix)
      001E84 5F               [ 4] 6463 	ld	e, a
      001E85 3E 00            [ 7] 6464 	ld	a, #0x00
      001E87 DD 8E F8         [19] 6465 	adc	a, -8 (ix)
      001E8A 57               [ 4] 6466 	ld	d, a
      001E8B 1A               [ 7] 6467 	ld	a, (de)
      001E8C 07               [ 4] 6468 	rlca
      001E8D 30 01            [12] 6469 	jr	NC, 00172$
      001E8F 0C               [ 4] 6470 	inc	c
      001E90                       6471 00172$:
                                   6472 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001E90 DD 7E F7         [19] 6473 	ld	a, -9 (ix)
      001E93 DD 86 FF         [19] 6474 	add	a, -1 (ix)
      001E96 DD 77 F9         [19] 6475 	ld	-7 (ix), a
      001E99 DD 7E F8         [19] 6476 	ld	a, -8 (ix)
      001E9C CE 00            [ 7] 6477 	adc	a, #0x00
      001E9E DD 77 FA         [19] 6478 	ld	-6 (ix), a
      001EA1 DD 6E FF         [19] 6479 	ld	l, -1 (ix)
      001EA4 26 00            [ 7] 6480 	ld	h, #0x00
      001EA6 59               [ 4] 6481 	ld	e, c
      001EA7 16 00            [ 7] 6482 	ld	d, #0x00
      001EA9 BF               [ 4] 6483 	cp	a, a
      001EAA ED 52            [15] 6484 	sbc	hl, de
      001EAC CB 7C            [ 8] 6485 	bit	7, h
      001EAE 20 18            [12] 6486 	jr	NZ, 00243$
      001EB0 DD 7E FF         [19] 6487 	ld	a, -1 (ix)
      001EB3 91               [ 4] 6488 	sub	a, c
      001EB4 DD 86 F7         [19] 6489 	add	a, -9 (ix)
      001EB7 4F               [ 4] 6490 	ld	c, a
      001EB8 3E 00            [ 7] 6491 	ld	a, #0x00
      001EBA DD 8E F8         [19] 6492 	adc	a, -8 (ix)
      001EBD 47               [ 4] 6493 	ld	b, a
      001EBE 0A               [ 7] 6494 	ld	a, (bc)
      001EBF DD 77 FB         [19] 6495 	ld	-5 (ix), a
      001EC2 DD 36 FC 00      [19] 6496 	ld	-4 (ix), #0
      001EC6 18 07            [12] 6497 	jr	00244$
      001EC8                       6498 00243$:
      001EC8 AF               [ 4] 6499 	xor	a, a
      001EC9 DD 77 FB         [19] 6500 	ld	-5 (ix), a
      001ECC DD 77 FC         [19] 6501 	ld	-4 (ix), a
      001ECF                       6502 00244$:
      001ECF DD 7E FB         [19] 6503 	ld	a, -5 (ix)
      001ED2 DD 6E F9         [19] 6504 	ld	l, -7 (ix)
      001ED5 DD 66 FA         [19] 6505 	ld	h, -6 (ix)
      001ED8 77               [ 7] 6506 	ld	(hl), a
                                   6507 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001ED9 DD 35 FF         [23] 6508 	dec	-1 (ix)
      001EDC C3r5Dr1E         [10] 6509 	jp	00229$
      001EDF                       6510 00233$:
                                   6511 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001EDF DD 34 FE         [23] 6512 	inc	-2 (ix)
      001EE2 C3r14r1E         [10] 6513 	jp	00232$
      001EE5                       6514 00236$:
                                   6515 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001EE5 DD 34 FD         [23] 6516 	inc	-3 (ix)
      001EE8 C3r08r1E         [10] 6517 	jp	00235$
      001EEB                       6518 00177$:
                                   6519 ;src\/CheckPlayfield.h:227: oldLevel = level;
      001EEB 3Ar06r00         [13] 6520 	ld	a, (#_level + 0)
      001EEE 4F               [ 4] 6521 	ld	c, a
                                   6522 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      001EEF 21r04r00         [10] 6523 	ld	hl, #_blocksRemoved
      001EF2 46               [ 7] 6524 	ld	b, (hl)
      001EF3 23               [ 6] 6525 	inc	hl
      001EF4 56               [ 7] 6526 	ld	d, (hl)
      001EF5 78               [ 4] 6527 	ld	a, b
      001EF6 D6 5A            [ 7] 6528 	sub	a, #0x5a
      001EF8 7A               [ 4] 6529 	ld	a, d
      001EF9 DE 00            [ 7] 6530 	sbc	a, #0x00
      001EFB 38 19            [12] 6531 	jr	C, 00185$
                                   6532 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      001EFD C5               [11] 6533 	push	bc
      001EFE 21 1E 00         [10] 6534 	ld	hl, #0x001e
      001F01 E5               [11] 6535 	push	hl
      001F02 58               [ 4] 6536 	ld	e, b
      001F03 D5               [11] 6537 	push	de
      001F04 CDr00r00         [17] 6538 	call	__divuint
      001F07 F1               [10] 6539 	pop	af
      001F08 F1               [10] 6540 	pop	af
      001F09 C1               [10] 6541 	pop	bc
      001F0A 7D               [ 4] 6542 	ld	a, l
      001F0B 3C               [ 4] 6543 	inc	a
      001F0C 32r06r00         [13] 6544 	ld	(_level+0), a
                                   6545 ;src\/CheckPlayfield.h:230: speed = 15;
      001F0F 21r96r00         [10] 6546 	ld	hl, #_speed
      001F12 36 0F            [10] 6547 	ld	(hl), #0x0f
      001F14 18 32            [12] 6548 	jr	00186$
      001F16                       6549 00185$:
                                   6550 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      001F16 78               [ 4] 6551 	ld	a, b
      001F17 D6 3C            [ 7] 6552 	sub	a, #0x3c
      001F19 7A               [ 4] 6553 	ld	a, d
      001F1A DE 00            [ 7] 6554 	sbc	a, #0x00
      001F1C 38 0C            [12] 6555 	jr	C, 00182$
                                   6556 ;src\/CheckPlayfield.h:234: level = 3;
      001F1E 21r06r00         [10] 6557 	ld	hl, #_level
      001F21 36 03            [10] 6558 	ld	(hl), #0x03
                                   6559 ;src\/CheckPlayfield.h:235: speed = 30;
      001F23 21r96r00         [10] 6560 	ld	hl, #_speed
      001F26 36 1E            [10] 6561 	ld	(hl), #0x1e
      001F28 18 1E            [12] 6562 	jr	00186$
      001F2A                       6563 00182$:
                                   6564 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      001F2A 78               [ 4] 6565 	ld	a, b
      001F2B D6 1E            [ 7] 6566 	sub	a, #0x1e
      001F2D 7A               [ 4] 6567 	ld	a, d
      001F2E DE 00            [ 7] 6568 	sbc	a, #0x00
      001F30 38 0C            [12] 6569 	jr	C, 00179$
                                   6570 ;src\/CheckPlayfield.h:238: level = 2;
      001F32 21r06r00         [10] 6571 	ld	hl, #_level
      001F35 36 02            [10] 6572 	ld	(hl), #0x02
                                   6573 ;src\/CheckPlayfield.h:239: speed = 45;
      001F37 21r96r00         [10] 6574 	ld	hl, #_speed
      001F3A 36 2D            [10] 6575 	ld	(hl), #0x2d
      001F3C 18 0A            [12] 6576 	jr	00186$
      001F3E                       6577 00179$:
                                   6578 ;src\/CheckPlayfield.h:242: level = 1;
      001F3E 21r06r00         [10] 6579 	ld	hl, #_level
      001F41 36 01            [10] 6580 	ld	(hl), #0x01
                                   6581 ;src\/CheckPlayfield.h:243: speed = 60;
      001F43 21r96r00         [10] 6582 	ld	hl, #_speed
      001F46 36 3C            [10] 6583 	ld	(hl), #0x3c
      001F48                       6584 00186$:
                                   6585 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      001F48 3Ar06r00         [13] 6586 	ld	a,(#_level + 0)
      001F4B 91               [ 4] 6587 	sub	a, c
      001F4C 28 05            [12] 6588 	jr	Z, 00188$
                                   6589 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      001F4E 21r07r00         [10] 6590 	ld	hl, #_newLevel
      001F51 36 01            [10] 6591 	ld	(hl), #0x01
      001F53                       6592 00188$:
                                   6593 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      001F53 CDr85r17         [17] 6594 	call	_DrawPlayfield
                                   6595 ;src\/CheckPlayfield.h:257: DrawScore();
      001F56 CDr34r12         [17] 6596 	call	_DrawScore
                                   6597 ;src\/CheckPlayfield.h:259: iteration++;
      001F59 DD 34 04         [23] 6598 	inc	4 (ix)
                                   6599 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      001F5C DD 7E 04         [19] 6600 	ld	a, 4 (ix)
      001F5F F5               [11] 6601 	push	af
      001F60 33               [ 6] 6602 	inc	sp
      001F61 CDrF6r17         [17] 6603 	call	_CheckPlayfield
      001F64 18 03            [12] 6604 	jr	00237$
      001F66                       6605 00190$:
                                   6606 ;src\/CheckPlayfield.h:264: DrawScore();
      001F66 CDr34r12         [17] 6607 	call	_DrawScore
      001F69                       6608 00237$:
                                   6609 ;src\/CheckPlayfield.h:266: }
      001F69 DD F9            [10] 6610 	ld	sp, ix
      001F6B DD E1            [14] 6611 	pop	ix
      001F6D C9               [10] 6612 	ret
                                   6613 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6614 ;	---------------------------------
                                   6615 ; Function RandomIndex
                                   6616 ; ---------------------------------
      001F6E                       6617 _RandomIndex::
                                   6618 ;src\/GameLogic.h:5: do {
      001F6E                       6619 00101$:
                                   6620 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001F6E CDrA3r00         [17] 6621 	call	_GetRandom
      001F71 7D               [ 4] 6622 	ld	a, l
      001F72 E6 07            [ 7] 6623 	and	a, #0x07
      001F74 6F               [ 4] 6624 	ld	l, a
                                   6625 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001F75 3E 04            [ 7] 6626 	ld	a, #0x04
      001F77 95               [ 4] 6627 	sub	a, l
      001F78 38 F4            [12] 6628 	jr	C, 00101$
                                   6629 ;src\/GameLogic.h:10: return random;
                                   6630 ;src\/GameLogic.h:11: }
      001F7A C9               [10] 6631 	ret
                                   6632 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6633 ;	---------------------------------
                                   6634 ; Function RandomPiece
                                   6635 ; ---------------------------------
      001F7B                       6636 _RandomPiece::
                                   6637 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      001F7B 3Ar93r00         [13] 6638 	ld	a,(#_nextTopPiece + 0)
      001F7E 32r90r00         [13] 6639 	ld	(#_topPiece),a
                                   6640 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      001F81 3Ar94r00         [13] 6641 	ld	a,(#_nextMidPiece + 0)
      001F84 32r91r00         [13] 6642 	ld	(#_midPiece),a
                                   6643 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      001F87 3Ar95r00         [13] 6644 	ld	a,(#_nextBottomPiece + 0)
      001F8A 32r92r00         [13] 6645 	ld	(#_bottomPiece),a
                                   6646 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      001F8D 01r18r00         [10] 6647 	ld	bc, #_pieces+0
      001F90 C5               [11] 6648 	push	bc
      001F91 CDr6Er1F         [17] 6649 	call	_RandomIndex
      001F94 C1               [10] 6650 	pop	bc
      001F95 26 00            [ 7] 6651 	ld	h, #0x00
      001F97 09               [11] 6652 	add	hl, bc
      001F98 7E               [ 7] 6653 	ld	a, (hl)
      001F99 32r93r00         [13] 6654 	ld	(_nextTopPiece+0), a
                                   6655 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      001F9C C5               [11] 6656 	push	bc
      001F9D CDr6Er1F         [17] 6657 	call	_RandomIndex
      001FA0 C1               [10] 6658 	pop	bc
      001FA1 26 00            [ 7] 6659 	ld	h, #0x00
      001FA3 09               [11] 6660 	add	hl, bc
      001FA4 7E               [ 7] 6661 	ld	a, (hl)
      001FA5 32r94r00         [13] 6662 	ld	(_nextMidPiece+0), a
                                   6663 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      001FA8 C5               [11] 6664 	push	bc
      001FA9 CDr6Er1F         [17] 6665 	call	_RandomIndex
      001FAC C1               [10] 6666 	pop	bc
      001FAD 26 00            [ 7] 6667 	ld	h, #0x00
      001FAF 09               [11] 6668 	add	hl, bc
      001FB0 7E               [ 7] 6669 	ld	a, (hl)
      001FB1 32r95r00         [13] 6670 	ld	(_nextBottomPiece+0), a
                                   6671 ;src\/GameLogic.h:21: }
      001FB4 C9               [10] 6672 	ret
                                   6673 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   6674 ;	---------------------------------
                                   6675 ; Function UpdateAndDrawPieceStatic
                                   6676 ; ---------------------------------
      001FB5                       6677 _UpdateAndDrawPieceStatic::
                                   6678 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      001FB5 01r00r00         [10] 6679 	ld	bc, #_playfield+0
      001FB8 ED 5Br01r00      [20] 6680 	ld	de, (_col)
      001FBC 16 00            [ 7] 6681 	ld	d, #0x00
      001FBE 6B               [ 4] 6682 	ld	l, e
      001FBF 62               [ 4] 6683 	ld	h, d
      001FC0 29               [11] 6684 	add	hl, hl
      001FC1 19               [11] 6685 	add	hl, de
      001FC2 29               [11] 6686 	add	hl, hl
      001FC3 29               [11] 6687 	add	hl, hl
      001FC4 09               [11] 6688 	add	hl, bc
      001FC5 EB               [ 4] 6689 	ex	de, hl
      001FC6 3Ar02r00         [13] 6690 	ld	a, (#_line + 0)
      001FC9 6F               [ 4] 6691 	ld	l, a
      001FCA 26 00            [ 7] 6692 	ld	h, #0x00
      001FCC 19               [11] 6693 	add	hl, de
      001FCD 3Ar90r00         [13] 6694 	ld	a,(#_topPiece + 0)
      001FD0 77               [ 7] 6695 	ld	(hl), a
                                   6696 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      001FD1 ED 5Br01r00      [20] 6697 	ld	de, (_col)
      001FD5 16 00            [ 7] 6698 	ld	d, #0x00
      001FD7 6B               [ 4] 6699 	ld	l, e
      001FD8 62               [ 4] 6700 	ld	h, d
      001FD9 29               [11] 6701 	add	hl, hl
      001FDA 19               [11] 6702 	add	hl, de
      001FDB 29               [11] 6703 	add	hl, hl
      001FDC 29               [11] 6704 	add	hl, hl
      001FDD 09               [11] 6705 	add	hl, bc
      001FDE EB               [ 4] 6706 	ex	de, hl
      001FDF 3Ar02r00         [13] 6707 	ld	a, (#_line + 0)
      001FE2 6F               [ 4] 6708 	ld	l, a
      001FE3 2C               [ 4] 6709 	inc	l
      001FE4 26 00            [ 7] 6710 	ld	h, #0x00
      001FE6 19               [11] 6711 	add	hl, de
      001FE7 3Ar91r00         [13] 6712 	ld	a,(#_midPiece + 0)
      001FEA 77               [ 7] 6713 	ld	(hl), a
                                   6714 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      001FEB ED 5Br01r00      [20] 6715 	ld	de, (_col)
      001FEF 16 00            [ 7] 6716 	ld	d, #0x00
      001FF1 6B               [ 4] 6717 	ld	l, e
      001FF2 62               [ 4] 6718 	ld	h, d
      001FF3 29               [11] 6719 	add	hl, hl
      001FF4 19               [11] 6720 	add	hl, de
      001FF5 29               [11] 6721 	add	hl, hl
      001FF6 29               [11] 6722 	add	hl, hl
      001FF7 09               [11] 6723 	add	hl, bc
      001FF8 EB               [ 4] 6724 	ex	de, hl
      001FF9 3Ar02r00         [13] 6725 	ld	a, (#_line + 0)
      001FFC 6F               [ 4] 6726 	ld	l, a
      001FFD 2C               [ 4] 6727 	inc	l
      001FFE 2C               [ 4] 6728 	inc	l
      001FFF 26 00            [ 7] 6729 	ld	h, #0x00
      002001 19               [11] 6730 	add	hl, de
      002002 3Ar92r00         [13] 6731 	ld	a,(#_bottomPiece + 0)
      002005 77               [ 7] 6732 	ld	(hl), a
                                   6733 ;src\/GameLogic.h:29: DrawPiece(line);
      002006 C5               [11] 6734 	push	bc
      002007 3Ar02r00         [13] 6735 	ld	a,(#_line + 0)
      00200A F5               [11] 6736 	push	af
      00200B 33               [ 6] 6737 	inc	sp
      00200C CDr62r17         [17] 6738 	call	_DrawPiece
      00200F 33               [ 6] 6739 	inc	sp
      002010 C1               [10] 6740 	pop	bc
                                   6741 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002011 3E 02            [ 7] 6742 	ld	a, #0x02
      002013 32r01r00         [13] 6743 	ld	(#_col), a
                                   6744 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   6745 ;src\/GameLogic.h:35: counter = 0;
      002016 3E 00            [ 7] 6746 	ld	a,#0x00
      002018 32r02r00         [13] 6747 	ld	(#_line),a
      00201B 32r03r00         [13] 6748 	ld	(#_counter), a
                                   6749 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      00201E 3Ar18r00         [13] 6750 	ld	a, (#_playfield + 24)
      002021 B7               [ 4] 6751 	or	a, a
      002022 20 0C            [12] 6752 	jr	NZ, 00101$
                                   6753 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      002024 3Ar19r00         [13] 6754 	ld	a, (#_playfield + 25)
      002027 B7               [ 4] 6755 	or	a, a
      002028 20 06            [12] 6756 	jr	NZ, 00101$
                                   6757 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      00202A 3Ar1Ar00         [13] 6758 	ld	a, (#_playfield + 26)
      00202D B7               [ 4] 6759 	or	a, a
      00202E 28 0B            [12] 6760 	jr	Z, 00102$
      002030                       6761 00101$:
                                   6762 ;src\/GameLogic.h:41: gameOver = TRUE;
      002030 FD 21r00r00      [14] 6763 	ld	iy, #_gameOver
      002034 FD 36 00 01      [19] 6764 	ld	0 (iy), #0x01
      002038 C3r85r17         [10] 6765 	jp	_DrawPlayfield
      00203B                       6766 00102$:
                                   6767 ;src\/GameLogic.h:44: RandomPiece();
      00203B CDr7Br1F         [17] 6768 	call	_RandomPiece
                                   6769 ;src\/GameLogic.h:46: CheckPlayfield(1);
      00203E 3E 01            [ 7] 6770 	ld	a, #0x01
      002040 F5               [11] 6771 	push	af
      002041 33               [ 6] 6772 	inc	sp
      002042 CDrF6r17         [17] 6773 	call	_CheckPlayfield
      002045 33               [ 6] 6774 	inc	sp
                                   6775 ;src\/GameLogic.h:48: DrawNextPiece();
      002046 CDrDAr10         [17] 6776 	call	_DrawNextPiece
                                   6777 ;src\/GameLogic.h:51: DrawPlayfield();
                                   6778 ;src\/GameLogic.h:52: }
      002049 C3r85r17         [10] 6779 	jp	_DrawPlayfield
                                   6780 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   6781 ;	---------------------------------
                                   6782 ; Function BlinkPauseText
                                   6783 ; ---------------------------------
      00204C                       6784 _BlinkPauseText::
                                   6785 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      00204C 2A 9E FC         [16] 6786 	ld	hl, (_JIFFY)
      00204F CB 5D            [ 8] 6787 	bit	3, l
      002051 28 0E            [12] 6788 	jr	Z, 00102$
                                   6789 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      002053 11 0D 0C         [10] 6790 	ld	de, #0x0c0d
      002056 D5               [11] 6791 	push	de
      002057 21r6Ar20         [10] 6792 	ld	hl, #___str_5
      00205A E5               [11] 6793 	push	hl
      00205B CDrF1r0D         [17] 6794 	call	_DrawString
      00205E F1               [10] 6795 	pop	af
      00205F F1               [10] 6796 	pop	af
      002060 C9               [10] 6797 	ret
      002061                       6798 00102$:
                                   6799 ;src\/GameLogic.h:61: DrawLine(6);
      002061 3E 06            [ 7] 6800 	ld	a, #0x06
      002063 F5               [11] 6801 	push	af
      002064 33               [ 6] 6802 	inc	sp
      002065 CDr2Ar17         [17] 6803 	call	_DrawLine
      002068 33               [ 6] 6804 	inc	sp
                                   6805 ;src\/GameLogic.h:64: }
      002069 C9               [10] 6806 	ret
      00206A                       6807 ___str_5:
      00206A 50 41 55 53 45        6808 	.ascii "PAUSE"
      00206F 00                    6809 	.db 0x00
                                   6810 ;src\/GameLogic.h:66: void Pause() {
                                   6811 ;	---------------------------------
                                   6812 ; Function Pause
                                   6813 ; ---------------------------------
      002070                       6814 _Pause::
                                   6815 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      002070 11 0D 0C         [10] 6816 	ld	de, #0x0c0d
      002073 D5               [11] 6817 	push	de
      002074 21rAAr20         [10] 6818 	ld	hl, #___str_6
      002077 E5               [11] 6819 	push	hl
      002078 CDrF1r0D         [17] 6820 	call	_DrawString
      00207B F1               [10] 6821 	pop	af
      00207C F1               [10] 6822 	pop	af
                                   6823 ;src\/GameLogic.h:71: while(TRUE) {
      00207D                       6824 00114$:
                                   6825 ;src\/GameLogic.h:73: BlinkPauseText();
      00207D CDr4Cr20         [17] 6826 	call	_BlinkPauseText
                                   6827 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      002080 2E 07            [ 7] 6828 	ld	l, #0x07
      002082 CDr00r00         [17] 6829 	call	_SNSMAT
                                   6830 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      002085 CB 55            [ 8] 6831 	bit	2, l
      002087 28 F4            [12] 6832 	jr	Z, 00114$
                                   6833 ;src\/GameLogic.h:79: while(TRUE) {
      002089                       6834 00109$:
                                   6835 ;src\/GameLogic.h:81: BlinkPauseText();
      002089 CDr4Cr20         [17] 6836 	call	_BlinkPauseText
                                   6837 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      00208C 2E 07            [ 7] 6838 	ld	l, #0x07
      00208E CDr00r00         [17] 6839 	call	_SNSMAT
                                   6840 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      002091 CB 55            [ 8] 6841 	bit	2, l
      002093 20 F4            [12] 6842 	jr	NZ, 00109$
                                   6843 ;src\/GameLogic.h:87: while(TRUE) {
      002095                       6844 00104$:
                                   6845 ;src\/GameLogic.h:89: BlinkPauseText();
      002095 CDr4Cr20         [17] 6846 	call	_BlinkPauseText
                                   6847 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      002098 2E 07            [ 7] 6848 	ld	l, #0x07
      00209A CDr00r00         [17] 6849 	call	_SNSMAT
                                   6850 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      00209D CB 55            [ 8] 6851 	bit	2, l
      00209F 28 F4            [12] 6852 	jr	Z, 00104$
                                   6853 ;src\/GameLogic.h:95: DrawLine(6);
      0020A1 3E 06            [ 7] 6854 	ld	a, #0x06
      0020A3 F5               [11] 6855 	push	af
      0020A4 33               [ 6] 6856 	inc	sp
      0020A5 CDr2Ar17         [17] 6857 	call	_DrawLine
      0020A8 33               [ 6] 6858 	inc	sp
                                   6859 ;src\/GameLogic.h:96: return;
                                   6860 ;src\/GameLogic.h:106: }
      0020A9 C9               [10] 6861 	ret
      0020AA                       6862 ___str_6:
      0020AA 50 41 55 53 45        6863 	.ascii "PAUSE"
      0020AF 00                    6864 	.db 0x00
                                   6865 ;src\/GameLogic.h:108: void GameLoop() {
                                   6866 ;	---------------------------------
                                   6867 ; Function GameLoop
                                   6868 ; ---------------------------------
      0020B0                       6869 _GameLoop::
      0020B0 DD E5            [15] 6870 	push	ix
      0020B2 DD 21 00 00      [14] 6871 	ld	ix,#0
      0020B6 DD 39            [15] 6872 	add	ix,sp
      0020B8 21 F3 FF         [10] 6873 	ld	hl, #-13
      0020BB 39               [11] 6874 	add	hl, sp
      0020BC F9               [ 6] 6875 	ld	sp, hl
                                   6876 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      0020BD DD 36 FF 00      [19] 6877 	ld	-1 (ix), #0
      0020C1 DD 36 F3 00      [19] 6878 	ld	-13 (ix), #0
                                   6879 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      0020C5 DD 36 F4 00      [19] 6880 	ld	-12 (ix), #0
      0020C9 DD 36 F5 00      [19] 6881 	ld	-11 (ix), #0
                                   6882 ;src\/GameLogic.h:115: while(!gameOver) {
      0020CD                       6883 00150$:
      0020CD 3Ar00r00         [13] 6884 	ld	a,(#_gameOver + 0)
      0020D0 B7               [ 4] 6885 	or	a, a
      0020D1 C2r68r24         [10] 6886 	jp	NZ, 00152$
                                   6887 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      0020D4 ED 4B 9E FC      [20] 6888 	ld	bc, (_JIFFY)
                                   6889 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      0020D8                       6890 00101$:
      0020D8 2A 9E FC         [16] 6891 	ld	hl, (_JIFFY)
      0020DB BF               [ 4] 6892 	cp	a, a
      0020DC ED 42            [15] 6893 	sbc	hl, bc
      0020DE 28 F8            [12] 6894 	jr	Z, 00101$
                                   6895 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0020E0 ED 4Br01r00      [20] 6896 	ld	bc, (_col)
      0020E4 06 00            [ 7] 6897 	ld	b, #0x00
      0020E6 69               [ 4] 6898 	ld	l, c
      0020E7 60               [ 4] 6899 	ld	h, b
      0020E8 29               [11] 6900 	add	hl, hl
      0020E9 09               [11] 6901 	add	hl, bc
      0020EA 29               [11] 6902 	add	hl, hl
      0020EB 29               [11] 6903 	add	hl, hl
      0020EC EB               [ 4] 6904 	ex	de, hl
      0020ED 21r00r00         [10] 6905 	ld	hl, #_playfield
      0020F0 19               [11] 6906 	add	hl, de
      0020F1 EB               [ 4] 6907 	ex	de, hl
      0020F2 FD 21r02r00      [14] 6908 	ld	iy, #_line
      0020F6 FD 6E 00         [19] 6909 	ld	l, 0 (iy)
      0020F9 26 00            [ 7] 6910 	ld	h, #0x00
      0020FB 19               [11] 6911 	add	hl, de
      0020FC 36 00            [10] 6912 	ld	(hl), #0x00
                                   6913 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0020FE ED 4Br01r00      [20] 6914 	ld	bc, (_col)
      002102 06 00            [ 7] 6915 	ld	b, #0x00
      002104 69               [ 4] 6916 	ld	l, c
      002105 60               [ 4] 6917 	ld	h, b
      002106 29               [11] 6918 	add	hl, hl
      002107 09               [11] 6919 	add	hl, bc
      002108 29               [11] 6920 	add	hl, hl
      002109 29               [11] 6921 	add	hl, hl
      00210A EB               [ 4] 6922 	ex	de, hl
      00210B 21r00r00         [10] 6923 	ld	hl, #_playfield
      00210E 19               [11] 6924 	add	hl, de
      00210F EB               [ 4] 6925 	ex	de, hl
      002110 FD 6E 00         [19] 6926 	ld	l, 0 (iy)
      002113 2C               [ 4] 6927 	inc	l
      002114 26 00            [ 7] 6928 	ld	h, #0x00
      002116 19               [11] 6929 	add	hl, de
      002117 36 00            [10] 6930 	ld	(hl), #0x00
                                   6931 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002119 ED 4Br01r00      [20] 6932 	ld	bc, (_col)
      00211D 06 00            [ 7] 6933 	ld	b, #0x00
      00211F 69               [ 4] 6934 	ld	l, c
      002120 60               [ 4] 6935 	ld	h, b
      002121 29               [11] 6936 	add	hl, hl
      002122 09               [11] 6937 	add	hl, bc
      002123 29               [11] 6938 	add	hl, hl
      002124 29               [11] 6939 	add	hl, hl
      002125 EB               [ 4] 6940 	ex	de, hl
      002126 21r00r00         [10] 6941 	ld	hl, #_playfield
      002129 19               [11] 6942 	add	hl, de
      00212A EB               [ 4] 6943 	ex	de, hl
      00212B FD 6E 00         [19] 6944 	ld	l, 0 (iy)
      00212E 2C               [ 4] 6945 	inc	l
      00212F 2C               [ 4] 6946 	inc	l
      002130 26 00            [ 7] 6947 	ld	h, #0x00
      002132 19               [11] 6948 	add	hl, de
      002133 36 00            [10] 6949 	ld	(hl), #0x00
                                   6950 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      002135 2E 01            [ 7] 6951 	ld	l, #0x01
      002137 CDr00r00         [17] 6952 	call	_GTSTCK
      00213A DD 75 F6         [19] 6953 	ld	-10 (ix), l
                                   6954 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      00213D 2E 01            [ 7] 6955 	ld	l, #0x01
      00213F CDr00r00         [17] 6956 	call	_GTTRIG
      002142 DD 75 F7         [19] 6957 	ld	-9 (ix), l
                                   6958 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      002145 2E 03            [ 7] 6959 	ld	l, #0x03
      002147 CDr00r00         [17] 6960 	call	_GTTRIG
      00214A DD 75 F8         [19] 6961 	ld	-8 (ix), l
                                   6962 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      00214D DD 7E F6         [19] 6963 	ld	a, -10 (ix)
                                   6964 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      002150 B7               [ 4] 6965 	or	a,a
      002151 20 07            [12] 6966 	jr	NZ, 00105$
      002153 6F               [ 4] 6967 	ld	l,a
      002154 CDr00r00         [17] 6968 	call	_GTSTCK
      002157 DD 75 F6         [19] 6969 	ld	-10 (ix), l
      00215A                       6970 00105$:
                                   6971 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      00215A FD 21r02r00      [14] 6972 	ld	iy, #_line
      00215E FD 7E 00         [19] 6973 	ld	a, 0 (iy)
      002161 DD 77 F9         [19] 6974 	ld	-7 (ix), a
                                   6975 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      002164 DD 7E FF         [19] 6976 	ld	a, -1 (ix)
      002167 B7               [ 4] 6977 	or	a, a
      002168 C2r51r22         [10] 6978 	jp	NZ, 00118$
                                   6979 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      00216B FD 7E 00         [19] 6980 	ld	a, 0 (iy)
      00216E DD 77 FF         [19] 6981 	ld	-1 (ix), a
                                   6982 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002171 FD 21r01r00      [14] 6983 	ld	iy, #_col
      002175 FD 7E 00         [19] 6984 	ld	a, 0 (iy)
      002178 DD 77 FA         [19] 6985 	ld	-6 (ix), a
                                   6986 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      00217B DD 7E FF         [19] 6987 	ld	a, -1 (ix)
      00217E C6 02            [ 7] 6988 	add	a, #0x02
      002180 DD 77 FB         [19] 6989 	ld	-5 (ix), a
                                   6990 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      002183 DD 7E F6         [19] 6991 	ld	a, -10 (ix)
      002186 D6 07            [ 7] 6992 	sub	a, #0x07
      002188 20 5F            [12] 6993 	jr	NZ, 00112$
                                   6994 ;src\/GameLogic.h:145: col > 0 && 
      00218A FD 7E 00         [19] 6995 	ld	a, 0 (iy)
      00218D B7               [ 4] 6996 	or	a, a
      00218E 28 59            [12] 6997 	jr	Z, 00112$
                                   6998 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002190 DD 7E FA         [19] 6999 	ld	a, -6 (ix)
      002193 C6 FF            [ 7] 7000 	add	a, #0xff
      002195 DD 77 FF         [19] 7001 	ld	-1 (ix), a
      002198 4F               [ 4] 7002 	ld	c, a
      002199 07               [ 4] 7003 	rlca
      00219A 9F               [ 4] 7004 	sbc	a, a
      00219B 47               [ 4] 7005 	ld	b, a
      00219C 69               [ 4] 7006 	ld	l, c
      00219D 60               [ 4] 7007 	ld	h, b
      00219E 29               [11] 7008 	add	hl, hl
      00219F 09               [11] 7009 	add	hl, bc
      0021A0 29               [11] 7010 	add	hl, hl
      0021A1 29               [11] 7011 	add	hl, hl
      0021A2 DD 75 FE         [19] 7012 	ld	-2 (ix), l
      0021A5 DD 74 FF         [19] 7013 	ld	-1 (ix), h
      0021A8 3Er00            [ 7] 7014 	ld	a, #<(_playfield)
      0021AA DD 86 FE         [19] 7015 	add	a, -2 (ix)
      0021AD DD 77 FC         [19] 7016 	ld	-4 (ix), a
      0021B0 3Es00            [ 7] 7017 	ld	a, #>(_playfield)
      0021B2 DD 8E FF         [19] 7018 	adc	a, -1 (ix)
      0021B5 DD 77 FD         [19] 7019 	ld	-3 (ix), a
      0021B8 DD 7E FC         [19] 7020 	ld	a, -4 (ix)
      0021BB DD 86 F9         [19] 7021 	add	a, -7 (ix)
      0021BE DD 77 FE         [19] 7022 	ld	-2 (ix), a
      0021C1 DD 7E FD         [19] 7023 	ld	a, -3 (ix)
      0021C4 CE 00            [ 7] 7024 	adc	a, #0x00
      0021C6 DD 77 FF         [19] 7025 	ld	-1 (ix), a
      0021C9 DD 6E FE         [19] 7026 	ld	l, -2 (ix)
      0021CC DD 66 FF         [19] 7027 	ld	h, -1 (ix)
      0021CF 7E               [ 7] 7028 	ld	a, (hl)
      0021D0 B7               [ 4] 7029 	or	a, a
      0021D1 20 16            [12] 7030 	jr	NZ, 00112$
                                   7031 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0021D3 DD 7E FC         [19] 7032 	ld	a, -4 (ix)
      0021D6 DD 86 FB         [19] 7033 	add	a, -5 (ix)
      0021D9 4F               [ 4] 7034 	ld	c, a
      0021DA DD 7E FD         [19] 7035 	ld	a, -3 (ix)
      0021DD CE 00            [ 7] 7036 	adc	a, #0x00
      0021DF 47               [ 4] 7037 	ld	b, a
      0021E0 0A               [ 7] 7038 	ld	a, (bc)
      0021E1 B7               [ 4] 7039 	or	a, a
      0021E2 20 05            [12] 7040 	jr	NZ, 00112$
                                   7041 ;src\/GameLogic.h:148: col--;
      0021E4 FD 35 00         [23] 7042 	dec	0 (iy)
      0021E7 18 68            [12] 7043 	jr	00118$
      0021E9                       7044 00112$:
                                   7045 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      0021E9 DD 7E F6         [19] 7046 	ld	a, -10 (ix)
      0021EC D6 03            [ 7] 7047 	sub	a, #0x03
      0021EE 20 61            [12] 7048 	jr	NZ, 00118$
                                   7049 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      0021F0 FD 21r01r00      [14] 7050 	ld	iy, #_col
      0021F4 FD 7E 00         [19] 7051 	ld	a, 0 (iy)
      0021F7 D6 05            [ 7] 7052 	sub	a, #0x05
      0021F9 30 56            [12] 7053 	jr	NC, 00118$
                                   7054 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      0021FB DD 7E FA         [19] 7055 	ld	a, -6 (ix)
      0021FE 3C               [ 4] 7056 	inc	a
      0021FF DD 77 FF         [19] 7057 	ld	-1 (ix), a
      002202 4F               [ 4] 7058 	ld	c, a
      002203 07               [ 4] 7059 	rlca
      002204 9F               [ 4] 7060 	sbc	a, a
      002205 47               [ 4] 7061 	ld	b, a
      002206 69               [ 4] 7062 	ld	l, c
      002207 60               [ 4] 7063 	ld	h, b
      002208 29               [11] 7064 	add	hl, hl
      002209 09               [11] 7065 	add	hl, bc
      00220A 29               [11] 7066 	add	hl, hl
      00220B 29               [11] 7067 	add	hl, hl
      00220C DD 75 FE         [19] 7068 	ld	-2 (ix), l
      00220F DD 74 FF         [19] 7069 	ld	-1 (ix), h
      002212 3Er00            [ 7] 7070 	ld	a, #<(_playfield)
      002214 DD 86 FE         [19] 7071 	add	a, -2 (ix)
      002217 DD 77 FC         [19] 7072 	ld	-4 (ix), a
      00221A 3Es00            [ 7] 7073 	ld	a, #>(_playfield)
      00221C DD 8E FF         [19] 7074 	adc	a, -1 (ix)
      00221F DD 77 FD         [19] 7075 	ld	-3 (ix), a
      002222 DD 7E FC         [19] 7076 	ld	a, -4 (ix)
      002225 DD 86 F9         [19] 7077 	add	a, -7 (ix)
      002228 DD 77 FE         [19] 7078 	ld	-2 (ix), a
      00222B DD 7E FD         [19] 7079 	ld	a, -3 (ix)
      00222E CE 00            [ 7] 7080 	adc	a, #0x00
      002230 DD 77 FF         [19] 7081 	ld	-1 (ix), a
      002233 DD 6E FE         [19] 7082 	ld	l, -2 (ix)
      002236 DD 66 FF         [19] 7083 	ld	h, -1 (ix)
      002239 7E               [ 7] 7084 	ld	a, (hl)
      00223A B7               [ 4] 7085 	or	a, a
      00223B 20 14            [12] 7086 	jr	NZ, 00118$
                                   7087 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      00223D DD 7E FC         [19] 7088 	ld	a, -4 (ix)
      002240 DD 86 FB         [19] 7089 	add	a, -5 (ix)
      002243 4F               [ 4] 7090 	ld	c, a
      002244 DD 7E FD         [19] 7091 	ld	a, -3 (ix)
      002247 CE 00            [ 7] 7092 	adc	a, #0x00
      002249 47               [ 4] 7093 	ld	b, a
      00224A 0A               [ 7] 7094 	ld	a, (bc)
      00224B B7               [ 4] 7095 	or	a, a
      00224C 20 03            [12] 7096 	jr	NZ, 00118$
                                   7097 ;src\/GameLogic.h:154: col++;
      00224E FD 34 00         [23] 7098 	inc	0 (iy)
      002251                       7099 00118$:
                                   7100 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      002251 DD 7E F3         [19] 7101 	ld	a, -13 (ix)
      002254 B7               [ 4] 7102 	or	a, a
      002255 C2r17r23         [10] 7103 	jp	NZ, 00132$
                                   7104 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002258 DD 7E F6         [19] 7105 	ld	a, -10 (ix)
      00225B 3D               [ 4] 7106 	dec	a
      00225C 28 18            [12] 7107 	jr	Z, 00119$
      00225E DD 7E F4         [19] 7108 	ld	a, -12 (ix)
      002261 B7               [ 4] 7109 	or	a, a
      002262 20 06            [12] 7110 	jr	NZ, 00124$
      002264 DD 7E F7         [19] 7111 	ld	a, -9 (ix)
      002267 3C               [ 4] 7112 	inc	a
      002268 28 0C            [12] 7113 	jr	Z, 00119$
      00226A                       7114 00124$:
      00226A DD 7E F5         [19] 7115 	ld	a, -11 (ix)
      00226D B7               [ 4] 7116 	or	a, a
      00226E 20 1A            [12] 7117 	jr	NZ, 00120$
      002270 DD 7E F8         [19] 7118 	ld	a, -8 (ix)
      002273 3C               [ 4] 7119 	inc	a
      002274 20 14            [12] 7120 	jr	NZ, 00120$
      002276                       7121 00119$:
                                   7122 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      002276 3Ar92r00         [13] 7123 	ld	a, (#_bottomPiece + 0)
      002279 4F               [ 4] 7124 	ld	c, a
                                   7125 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      00227A 3Ar91r00         [13] 7126 	ld	a,(#_midPiece + 0)
      00227D 32r92r00         [13] 7127 	ld	(#_bottomPiece),a
                                   7128 ;src\/GameLogic.h:166: midPiece = topPiece;
      002280 3Ar90r00         [13] 7129 	ld	a,(#_topPiece + 0)
      002283 32r91r00         [13] 7130 	ld	(#_midPiece),a
                                   7131 ;src\/GameLogic.h:167: topPiece = temp;
      002286 21r90r00         [10] 7132 	ld	hl, #_topPiece
      002289 71               [ 7] 7133 	ld	(hl), c
      00228A                       7134 00120$:
                                   7135 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      00228A DD 7E F6         [19] 7136 	ld	a, -10 (ix)
      00228D D6 05            [ 7] 7137 	sub	a, #0x05
      00228F C2r17r23         [10] 7138 	jp	NZ,00132$
                                   7139 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002292 DD 7E F9         [19] 7140 	ld	a, -7 (ix)
      002295 DD 77 FE         [19] 7141 	ld	-2 (ix), a
      002298 DD 7E F9         [19] 7142 	ld	a, -7 (ix)
      00229B DD 77 FF         [19] 7143 	ld	-1 (ix), a
      00229E                       7144 00154$:
      00229E DD 7E FF         [19] 7145 	ld	a, -1 (ix)
      0022A1 D6 0C            [ 7] 7146 	sub	a, #0x0c
      0022A3 30 72            [12] 7147 	jr	NC, 00132$
                                   7148 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0022A5 DD 7E FF         [19] 7149 	ld	a, -1 (ix)
      0022A8 D6 09            [ 7] 7150 	sub	a, #0x09
      0022AA 28 4C            [12] 7151 	jr	Z, 00125$
      0022AC ED 4Br01r00      [20] 7152 	ld	bc, (_col)
      0022B0 06 00            [ 7] 7153 	ld	b, #0x00
      0022B2 69               [ 4] 7154 	ld	l, c
      0022B3 60               [ 4] 7155 	ld	h, b
      0022B4 29               [11] 7156 	add	hl, hl
      0022B5 09               [11] 7157 	add	hl, bc
      0022B6 29               [11] 7158 	add	hl, hl
      0022B7 29               [11] 7159 	add	hl, hl
      0022B8 DD 75 FC         [19] 7160 	ld	-4 (ix), l
      0022BB DD 74 FD         [19] 7161 	ld	-3 (ix), h
      0022BE 3Er00            [ 7] 7162 	ld	a, #<(_playfield)
      0022C0 DD 86 FC         [19] 7163 	add	a, -4 (ix)
      0022C3 DD 77 FA         [19] 7164 	ld	-6 (ix), a
      0022C6 3Es00            [ 7] 7165 	ld	a, #>(_playfield)
      0022C8 DD 8E FD         [19] 7166 	adc	a, -3 (ix)
      0022CB DD 77 FB         [19] 7167 	ld	-5 (ix), a
      0022CE DD 7E FF         [19] 7168 	ld	a, -1 (ix)
      0022D1 DD 77 FD         [19] 7169 	ld	-3 (ix), a
      0022D4 DD 34 FD         [23] 7170 	inc	-3 (ix)
      0022D7 DD 34 FD         [23] 7171 	inc	-3 (ix)
      0022DA DD 34 FD         [23] 7172 	inc	-3 (ix)
      0022DD DD 7E FD         [19] 7173 	ld	a, -3 (ix)
      0022E0 DD 86 FA         [19] 7174 	add	a, -6 (ix)
      0022E3 DD 77 FC         [19] 7175 	ld	-4 (ix), a
      0022E6 3E 00            [ 7] 7176 	ld	a, #0x00
      0022E8 DD 8E FB         [19] 7177 	adc	a, -5 (ix)
      0022EB DD 77 FD         [19] 7178 	ld	-3 (ix), a
      0022EE DD 6E FC         [19] 7179 	ld	l, -4 (ix)
      0022F1 DD 66 FD         [19] 7180 	ld	h, -3 (ix)
      0022F4 7E               [ 7] 7181 	ld	a, (hl)
      0022F5 B7               [ 4] 7182 	or	a, a
      0022F6 28 14            [12] 7183 	jr	Z, 00155$
      0022F8                       7184 00125$:
                                   7185 ;src\/GameLogic.h:176: DrawPiece(line);
      0022F8 3Ar02r00         [13] 7186 	ld	a,(#_line + 0)
      0022FB F5               [11] 7187 	push	af
      0022FC 33               [ 6] 7188 	inc	sp
      0022FD CDr62r17         [17] 7189 	call	_DrawPiece
      002300 33               [ 6] 7190 	inc	sp
                                   7191 ;src\/GameLogic.h:178: line = i;
      002301 DD 7E FE         [19] 7192 	ld	a, -2 (ix)
      002304 32r02r00         [13] 7193 	ld	(#_line),a
                                   7194 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002307 CDrB5r1F         [17] 7195 	call	_UpdateAndDrawPieceStatic
                                   7196 ;src\/GameLogic.h:181: break;
      00230A 18 0B            [12] 7197 	jr	00132$
      00230C                       7198 00155$:
                                   7199 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00230C DD 34 FF         [23] 7200 	inc	-1 (ix)
      00230F DD 7E FF         [19] 7201 	ld	a, -1 (ix)
      002312 DD 77 FE         [19] 7202 	ld	-2 (ix), a
      002315 18 87            [12] 7203 	jr	00154$
      002317                       7204 00132$:
                                   7205 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002317 DD 7E F6         [19] 7206 	ld	a, -10 (ix)
      00231A DD 77 FF         [19] 7207 	ld	-1 (ix), a
                                   7208 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      00231D DD 7E F6         [19] 7209 	ld	a, -10 (ix)
      002320 DD 77 F3         [19] 7210 	ld	-13 (ix), a
                                   7211 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      002323 DD 7E F7         [19] 7212 	ld	a, -9 (ix)
      002326 DD 77 F4         [19] 7213 	ld	-12 (ix), a
                                   7214 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002329 DD 7E F8         [19] 7215 	ld	a, -8 (ix)
      00232C DD 77 F5         [19] 7216 	ld	-11 (ix), a
                                   7217 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      00232F 2E 07            [ 7] 7218 	ld	l, #0x07
      002331 CDr00r00         [17] 7219 	call	_SNSMAT
                                   7220 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      002334 CB 55            [ 8] 7221 	bit	2, l
      002336 20 03            [12] 7222 	jr	NZ, 00134$
                                   7223 ;src\/GameLogic.h:220: Pause();
      002338 CDr70r20         [17] 7224 	call	_Pause
      00233B                       7225 00134$:
                                   7226 ;src\/GameLogic.h:225: counter++;
      00233B FD 21r03r00      [14] 7227 	ld	iy, #_counter
      00233F FD 34 00         [23] 7228 	inc	0 (iy)
                                   7229 ;src\/GameLogic.h:226: if(counter == speed) {
      002342 FD 7E 00         [19] 7230 	ld	a, 0 (iy)
      002345 21r96r00         [10] 7231 	ld	hl, #_speed
      002348 96               [ 7] 7232 	sub	a, (hl)
      002349 20 3F            [12] 7233 	jr	NZ, 00139$
                                   7234 ;src\/GameLogic.h:228: counter = 0;
      00234B 21r03r00         [10] 7235 	ld	hl, #_counter
      00234E 36 00            [10] 7236 	ld	(hl), #0x00
                                   7237 ;src\/GameLogic.h:231: DrawPiece(line);
      002350 3Ar02r00         [13] 7238 	ld	a,(#_line + 0)
      002353 F5               [11] 7239 	push	af
      002354 33               [ 6] 7240 	inc	sp
      002355 CDr62r17         [17] 7241 	call	_DrawPiece
      002358 33               [ 6] 7242 	inc	sp
                                   7243 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002359 FD 21r02r00      [14] 7244 	ld	iy, #_line
      00235D FD 7E 00         [19] 7245 	ld	a, 0 (iy)
      002360 D6 09            [ 7] 7246 	sub	a, #0x09
      002362 28 1F            [12] 7247 	jr	Z, 00135$
      002364 ED 4Br01r00      [20] 7248 	ld	bc, (_col)
      002368 06 00            [ 7] 7249 	ld	b, #0x00
      00236A 69               [ 4] 7250 	ld	l, c
      00236B 60               [ 4] 7251 	ld	h, b
      00236C 29               [11] 7252 	add	hl, hl
      00236D 09               [11] 7253 	add	hl, bc
      00236E 29               [11] 7254 	add	hl, hl
      00236F 29               [11] 7255 	add	hl, hl
      002370 EB               [ 4] 7256 	ex	de, hl
      002371 21r00r00         [10] 7257 	ld	hl, #_playfield
      002374 19               [11] 7258 	add	hl, de
      002375 EB               [ 4] 7259 	ex	de, hl
      002376 FD 7E 00         [19] 7260 	ld	a, 0 (iy)
      002379 C6 03            [ 7] 7261 	add	a, #0x03
      00237B 6F               [ 4] 7262 	ld	l, a
      00237C 26 00            [ 7] 7263 	ld	h, #0x00
      00237E 19               [11] 7264 	add	hl, de
      00237F 7E               [ 7] 7265 	ld	a, (hl)
      002380 B7               [ 4] 7266 	or	a, a
      002381 28 03            [12] 7267 	jr	Z, 00136$
      002383                       7268 00135$:
                                   7269 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002383 CDrB5r1F         [17] 7270 	call	_UpdateAndDrawPieceStatic
      002386                       7271 00136$:
                                   7272 ;src\/GameLogic.h:240: line++;
      002386 21r02r00         [10] 7273 	ld	hl, #_line
      002389 34               [11] 7274 	inc	(hl)
      00238A                       7275 00139$:
                                   7276 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      00238A ED 4Br01r00      [20] 7277 	ld	bc, (_col)
      00238E 06 00            [ 7] 7278 	ld	b, #0x00
      002390 69               [ 4] 7279 	ld	l, c
      002391 60               [ 4] 7280 	ld	h, b
      002392 29               [11] 7281 	add	hl, hl
      002393 09               [11] 7282 	add	hl, bc
      002394 29               [11] 7283 	add	hl, hl
      002395 29               [11] 7284 	add	hl, hl
      002396 EB               [ 4] 7285 	ex	de, hl
      002397 21r00r00         [10] 7286 	ld	hl, #_playfield
      00239A 19               [11] 7287 	add	hl, de
      00239B EB               [ 4] 7288 	ex	de, hl
      00239C 3Ar02r00         [13] 7289 	ld	a, (#_line + 0)
      00239F 6F               [ 4] 7290 	ld	l, a
      0023A0 26 00            [ 7] 7291 	ld	h, #0x00
      0023A2 19               [11] 7292 	add	hl, de
      0023A3 3Ar90r00         [13] 7293 	ld	a,(#_topPiece + 0)
      0023A6 77               [ 7] 7294 	ld	(hl), a
                                   7295 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      0023A7 ED 4Br01r00      [20] 7296 	ld	bc, (_col)
      0023AB 06 00            [ 7] 7297 	ld	b, #0x00
      0023AD 69               [ 4] 7298 	ld	l, c
      0023AE 60               [ 4] 7299 	ld	h, b
      0023AF 29               [11] 7300 	add	hl, hl
      0023B0 09               [11] 7301 	add	hl, bc
      0023B1 29               [11] 7302 	add	hl, hl
      0023B2 29               [11] 7303 	add	hl, hl
      0023B3 EB               [ 4] 7304 	ex	de, hl
      0023B4 21r00r00         [10] 7305 	ld	hl, #_playfield
      0023B7 19               [11] 7306 	add	hl, de
      0023B8 EB               [ 4] 7307 	ex	de, hl
      0023B9 3Ar02r00         [13] 7308 	ld	a, (#_line + 0)
      0023BC 6F               [ 4] 7309 	ld	l, a
      0023BD 2C               [ 4] 7310 	inc	l
      0023BE 26 00            [ 7] 7311 	ld	h, #0x00
      0023C0 19               [11] 7312 	add	hl, de
      0023C1 3Ar91r00         [13] 7313 	ld	a,(#_midPiece + 0)
      0023C4 77               [ 7] 7314 	ld	(hl), a
                                   7315 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      0023C5 ED 4Br01r00      [20] 7316 	ld	bc, (_col)
      0023C9 06 00            [ 7] 7317 	ld	b, #0x00
      0023CB 69               [ 4] 7318 	ld	l, c
      0023CC 60               [ 4] 7319 	ld	h, b
      0023CD 29               [11] 7320 	add	hl, hl
      0023CE 09               [11] 7321 	add	hl, bc
      0023CF 29               [11] 7322 	add	hl, hl
      0023D0 29               [11] 7323 	add	hl, hl
      0023D1 EB               [ 4] 7324 	ex	de, hl
      0023D2 21r00r00         [10] 7325 	ld	hl, #_playfield
      0023D5 19               [11] 7326 	add	hl, de
      0023D6 EB               [ 4] 7327 	ex	de, hl
      0023D7 3Ar02r00         [13] 7328 	ld	a, (#_line + 0)
      0023DA 6F               [ 4] 7329 	ld	l, a
      0023DB 2C               [ 4] 7330 	inc	l
      0023DC 2C               [ 4] 7331 	inc	l
      0023DD 26 00            [ 7] 7332 	ld	h, #0x00
      0023DF 19               [11] 7333 	add	hl, de
      0023E0 3Ar92r00         [13] 7334 	ld	a,(#_bottomPiece + 0)
      0023E3 77               [ 7] 7335 	ld	(hl), a
                                   7336 ;src\/GameLogic.h:254: DrawPiece(line);
      0023E4 3Ar02r00         [13] 7337 	ld	a,(#_line + 0)
      0023E7 F5               [11] 7338 	push	af
      0023E8 33               [ 6] 7339 	inc	sp
      0023E9 CDr62r17         [17] 7340 	call	_DrawPiece
      0023EC 33               [ 6] 7341 	inc	sp
                                   7342 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0023ED ED 4Br01r00      [20] 7343 	ld	bc, (_col)
      0023F1 06 00            [ 7] 7344 	ld	b, #0x00
      0023F3 69               [ 4] 7345 	ld	l, c
      0023F4 60               [ 4] 7346 	ld	h, b
      0023F5 29               [11] 7347 	add	hl, hl
      0023F6 09               [11] 7348 	add	hl, bc
      0023F7 29               [11] 7349 	add	hl, hl
      0023F8 29               [11] 7350 	add	hl, hl
      0023F9 EB               [ 4] 7351 	ex	de, hl
                                   7352 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      0023FA 21r00r00         [10] 7353 	ld	hl, #_playfield
      0023FD 19               [11] 7354 	add	hl, de
      0023FE EB               [ 4] 7355 	ex	de, hl
      0023FF 3Ar02r00         [13] 7356 	ld	a,(#_line + 0)
      002402 C6 03            [ 7] 7357 	add	a, #0x03
      002404 4F               [ 4] 7358 	ld	c, a
      002405 69               [ 4] 7359 	ld	l, c
      002406 26 00            [ 7] 7360 	ld	h, #0x00
      002408 19               [11] 7361 	add	hl, de
      002409 7E               [ 7] 7362 	ld	a, (hl)
      00240A B7               [ 4] 7363 	or	a, a
      00240B 28 06            [12] 7364 	jr	Z, 00148$
                                   7365 ;src\/GameLogic.h:260: HideArrowSprite();
      00240D CDr48r0A         [17] 7366 	call	_HideArrowSprite
      002410 C3rCDr20         [10] 7367 	jp	00150$
      002413                       7368 00148$:
                                   7369 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002413 41               [ 4] 7370 	ld	b, c
      002414                       7371 00157$:
      002414 78               [ 4] 7372 	ld	a, b
      002415 D6 0C            [ 7] 7373 	sub	a, #0x0c
      002417 D2rCDr20         [10] 7374 	jp	NC, 00150$
                                   7375 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00241A 3Ar01r00         [13] 7376 	ld	a,(#_col + 0)
      00241D 87               [ 4] 7377 	add	a, a
      00241E 87               [ 4] 7378 	add	a, a
      00241F 87               [ 4] 7379 	add	a, a
      002420 87               [ 4] 7380 	add	a, a
      002421 DD 77 FE         [19] 7381 	ld	-2 (ix), a
                                   7382 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002424 68               [ 4] 7383 	ld	l, b
      002425 26 00            [ 7] 7384 	ld	h, #0x00
      002427 19               [11] 7385 	add	hl, de
                                   7386 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002428 DD 7E FE         [19] 7387 	ld	a, -2 (ix)
      00242B C6 50            [ 7] 7388 	add	a, #0x50
      00242D DD 77 FE         [19] 7389 	ld	-2 (ix), a
                                   7390 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002430 6E               [ 7] 7391 	ld	l, (hl)
      002431 78               [ 4] 7392 	ld	a, b
      002432 D6 0B            [ 7] 7393 	sub	a,#0x0b
      002434 20 16            [12] 7394 	jr	NZ, 00143$
      002436 B5               [ 4] 7395 	or	a,l
      002437 20 13            [12] 7396 	jr	NZ, 00143$
                                   7397 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002439 79               [ 4] 7398 	ld	a, c
      00243A 87               [ 4] 7399 	add	a, a
      00243B 87               [ 4] 7400 	add	a, a
      00243C 87               [ 4] 7401 	add	a, a
      00243D 87               [ 4] 7402 	add	a, a
      00243E F5               [11] 7403 	push	af
      00243F 33               [ 6] 7404 	inc	sp
      002440 DD 7E FE         [19] 7405 	ld	a, -2 (ix)
      002443 F5               [11] 7406 	push	af
      002444 33               [ 6] 7407 	inc	sp
      002445 CDrEDr00         [17] 7408 	call	_DrawArrowSprite
      002448 F1               [10] 7409 	pop	af
                                   7410 ;src\/GameLogic.h:266: break;
      002449 C3rCDr20         [10] 7411 	jp	00150$
      00244C                       7412 00143$:
                                   7413 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      00244C 7D               [ 4] 7414 	ld	a, l
      00244D B7               [ 4] 7415 	or	a, a
      00244E 28 14            [12] 7416 	jr	Z, 00158$
                                   7417 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002450 79               [ 4] 7418 	ld	a, c
      002451 3D               [ 4] 7419 	dec	a
      002452 87               [ 4] 7420 	add	a, a
      002453 87               [ 4] 7421 	add	a, a
      002454 87               [ 4] 7422 	add	a, a
      002455 87               [ 4] 7423 	add	a, a
      002456 F5               [11] 7424 	push	af
      002457 33               [ 6] 7425 	inc	sp
      002458 DD 7E FE         [19] 7426 	ld	a, -2 (ix)
      00245B F5               [11] 7427 	push	af
      00245C 33               [ 6] 7428 	inc	sp
      00245D CDrEDr00         [17] 7429 	call	_DrawArrowSprite
      002460 F1               [10] 7430 	pop	af
                                   7431 ;src\/GameLogic.h:270: break;
      002461 C3rCDr20         [10] 7432 	jp	00150$
      002464                       7433 00158$:
                                   7434 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002464 04               [ 4] 7435 	inc	b
      002465 48               [ 4] 7436 	ld	c, b
      002466 18 AC            [12] 7437 	jr	00157$
      002468                       7438 00152$:
                                   7439 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002468 11 0C 0C         [10] 7440 	ld	de, #0x0c0c
      00246B D5               [11] 7441 	push	de
      00246C 21r80r24         [10] 7442 	ld	hl, #___str_7
      00246F E5               [11] 7443 	push	hl
      002470 CDrF1r0D         [17] 7444 	call	_DrawString
      002473 F1               [10] 7445 	pop	af
                                   7446 ;src\/GameLogic.h:282: Wait(60 * 5);
      002474 21 2C 01         [10] 7447 	ld	hl, #0x012c
      002477 E3               [19] 7448 	ex	(sp),hl
      002478 CDr00r00         [17] 7449 	call	_Wait
                                   7450 ;src\/GameLogic.h:284: }
      00247B DD F9            [10] 7451 	ld	sp,ix
      00247D DD E1            [14] 7452 	pop	ix
      00247F C9               [10] 7453 	ret
      002480                       7454 ___str_7:
      002480 47 41 4D 45 20 4F 56  7455 	.ascii "GAME OVER"
             45 52
      002489 00                    7456 	.db 0x00
                                   7457 ;src\/GameLogic.h:286: void TestCase() {
                                   7458 ;	---------------------------------
                                   7459 ; Function TestCase
                                   7460 ; ---------------------------------
      00248A                       7461 _TestCase::
                                   7462 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      00248A 21r20r00         [10] 7463 	ld	hl, #(_playfield + 0x0020)
      00248D 36 04            [10] 7464 	ld	(hl), #0x04
                                   7465 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      00248F 21r21r00         [10] 7466 	ld	hl, #(_playfield + 0x0021)
      002492 36 0C            [10] 7467 	ld	(hl), #0x0c
                                   7468 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002494 21r0Ar00         [10] 7469 	ld	hl, #(_playfield + 0x000a)
      002497 36 0C            [10] 7470 	ld	(hl), #0x0c
                                   7471 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002499 21r16r00         [10] 7472 	ld	hl, #(_playfield + 0x0016)
      00249C 36 0C            [10] 7473 	ld	(hl), #0x0c
                                   7474 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      00249E 21r22r00         [10] 7475 	ld	hl, #(_playfield + 0x0022)
      0024A1 36 08            [10] 7476 	ld	(hl), #0x08
                                   7477 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      0024A3 21r3Ar00         [10] 7478 	ld	hl, #(_playfield + 0x003a)
      0024A6 36 08            [10] 7479 	ld	(hl), #0x08
                                   7480 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      0024A8 21r46r00         [10] 7481 	ld	hl, #(_playfield + 0x0046)
      0024AB 36 0C            [10] 7482 	ld	(hl), #0x0c
                                   7483 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      0024AD 21r0Br00         [10] 7484 	ld	hl, #(_playfield + 0x000b)
      0024B0 36 04            [10] 7485 	ld	(hl), #0x04
                                   7486 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      0024B2 21r17r00         [10] 7487 	ld	hl, #(_playfield + 0x0017)
      0024B5 36 04            [10] 7488 	ld	(hl), #0x04
                                   7489 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      0024B7 21r23r00         [10] 7490 	ld	hl, #(_playfield + 0x0023)
      0024BA 36 08            [10] 7491 	ld	(hl), #0x08
                                   7492 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      0024BC 21r2Fr00         [10] 7493 	ld	hl, #(_playfield + 0x002f)
      0024BF 36 00            [10] 7494 	ld	(hl), #0x00
                                   7495 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      0024C1 21r3Br00         [10] 7496 	ld	hl, #(_playfield + 0x003b)
      0024C4 36 08            [10] 7497 	ld	(hl), #0x08
                                   7498 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      0024C6 21r47r00         [10] 7499 	ld	hl, #(_playfield + 0x0047)
      0024C9 36 08            [10] 7500 	ld	(hl), #0x08
                                   7501 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      0024CB 3E 0C            [ 7] 7502 	ld	a, #0x0c
      0024CD 32r90r00         [13] 7503 	ld	(#_topPiece), a
                                   7504 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   7505 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      0024D0 3E 08            [ 7] 7506 	ld	a,#0x08
      0024D2 32r91r00         [13] 7507 	ld	(#_midPiece),a
      0024D5 32r92r00         [13] 7508 	ld	(#_bottomPiece), a
                                   7509 ;src\/GameLogic.h:326: }
      0024D8 C9               [10] 7510 	ret
                                   7511 ;src\/GameLogic.h:328: void InitGame() {
                                   7512 ;	---------------------------------
                                   7513 ; Function InitGame
                                   7514 ; ---------------------------------
      0024D9                       7515 _InitGame::
                                   7516 ;src\/GameLogic.h:330: gameOver = FALSE;
      0024D9 21r00r00         [10] 7517 	ld	hl, #_gameOver
      0024DC 36 00            [10] 7518 	ld	(hl), #0x00
                                   7519 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      0024DE 21r02r00         [10] 7520 	ld	hl, #_line
      0024E1 36 00            [10] 7521 	ld	(hl), #0x00
                                   7522 ;src\/GameLogic.h:332: col = INITIAL_COL;
      0024E3 21r01r00         [10] 7523 	ld	hl, #_col
      0024E6 36 02            [10] 7524 	ld	(hl), #0x02
                                   7525 ;src\/GameLogic.h:334: blocksRemoved = 0;
      0024E8 21 00 00         [10] 7526 	ld	hl, #0x0000
      0024EB 22r04r00         [16] 7527 	ld	(_blocksRemoved), hl
                                   7528 ;src\/GameLogic.h:335: level = 1;
      0024EE 21r06r00         [10] 7529 	ld	hl, #_level
      0024F1 36 01            [10] 7530 	ld	(hl), #0x01
                                   7531 ;src\/GameLogic.h:336: newLevel = FALSE;
      0024F3 21r07r00         [10] 7532 	ld	hl, #_newLevel
      0024F6 36 00            [10] 7533 	ld	(hl), #0x00
                                   7534 ;src\/GameLogic.h:337: speed = 60;
      0024F8 21r96r00         [10] 7535 	ld	hl, #_speed
      0024FB 36 3C            [10] 7536 	ld	(hl), #0x3c
                                   7537 ;src\/GameLogic.h:339: InitVRAM();
      0024FD CDr0Br14         [17] 7538 	call	_InitVRAM
                                   7539 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002500 3Ar08r00         [13] 7540 	ld	a, (#_rndSeed + 0)
      002503 5F               [ 4] 7541 	ld	e, a
      002504 3A 9E FC         [13] 7542 	ld	a, (#_JIFFY + 0)
      002507 67               [ 4] 7543 	ld	h, a
      002508 2E 00            [ 7] 7544 	ld	l, #0x00
      00250A 55               [ 4] 7545 	ld	d, l
      00250B 06 08            [ 7] 7546 	ld	b, #0x08
      00250D                       7547 00133$:
      00250D 29               [11] 7548 	add	hl, hl
      00250E 30 01            [12] 7549 	jr	NC, 00134$
      002510 19               [11] 7550 	add	hl, de
      002511                       7551 00134$:
      002511 10 FA            [13] 7552 	djnz	00133$
      002513 7D               [ 4] 7553 	ld	a, l
      002514 C6 63            [ 7] 7554 	add	a, #0x63
      002516 4F               [ 4] 7555 	ld	c, a
      002517 3Ar08r00         [13] 7556 	ld	a, (#_rndSeed + 0)
      00251A 5F               [ 4] 7557 	ld	e, a
      00251B 3A 9E FC         [13] 7558 	ld	a, (#_JIFFY + 0)
      00251E 67               [ 4] 7559 	ld	h, a
      00251F 2E 00            [ 7] 7560 	ld	l, #0x00
      002521 55               [ 4] 7561 	ld	d, l
      002522 06 08            [ 7] 7562 	ld	b, #0x08
      002524                       7563 00135$:
      002524 29               [11] 7564 	add	hl, hl
      002525 30 01            [12] 7565 	jr	NC, 00136$
      002527 19               [11] 7566 	add	hl, de
      002528                       7567 00136$:
      002528 10 FA            [13] 7568 	djnz	00135$
      00252A 79               [ 4] 7569 	ld	a, c
      00252B F5               [11] 7570 	push	af
      00252C 7D               [ 4] 7571 	ld	a, l
      00252D 33               [ 6] 7572 	inc	sp
      00252E F5               [11] 7573 	push	af
      00252F 33               [ 6] 7574 	inc	sp
      002530 3Ar08r00         [13] 7575 	ld	a,(#_rndSeed + 0)
      002533 F5               [11] 7576 	push	af
      002534 33               [ 6] 7577 	inc	sp
      002535 CDr50r00         [17] 7578 	call	_InitRnd
      002538 F1               [10] 7579 	pop	af
      002539 33               [ 6] 7580 	inc	sp
                                   7581 ;src\/GameLogic.h:345: RandomPiece();
      00253A CDr7Br1F         [17] 7582 	call	_RandomPiece
                                   7583 ;src\/GameLogic.h:346: RandomPiece();
      00253D CDr7Br1F         [17] 7584 	call	_RandomPiece
                                   7585 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002540 0E 00            [ 7] 7586 	ld	c, #0x00
      002542                       7587 00107$:
      002542 79               [ 4] 7588 	ld	a, c
      002543 D6 0C            [ 7] 7589 	sub	a, #0x0c
      002545 30 20            [12] 7590 	jr	NC, 00102$
                                   7591 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002547 06 00            [ 7] 7592 	ld	b, #0x00
      002549                       7593 00104$:
      002549 78               [ 4] 7594 	ld	a, b
      00254A D6 06            [ 7] 7595 	sub	a, #0x06
      00254C 30 16            [12] 7596 	jr	NC, 00108$
                                   7597 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      00254E 58               [ 4] 7598 	ld	e, b
      00254F 16 00            [ 7] 7599 	ld	d, #0x00
      002551 6B               [ 4] 7600 	ld	l, e
      002552 62               [ 4] 7601 	ld	h, d
      002553 29               [11] 7602 	add	hl, hl
      002554 19               [11] 7603 	add	hl, de
      002555 29               [11] 7604 	add	hl, hl
      002556 29               [11] 7605 	add	hl, hl
      002557 11r00r00         [10] 7606 	ld	de, #_playfield
      00255A 19               [11] 7607 	add	hl, de
      00255B 59               [ 4] 7608 	ld	e, c
      00255C 16 00            [ 7] 7609 	ld	d, #0x00
      00255E 19               [11] 7610 	add	hl, de
      00255F 36 00            [10] 7611 	ld	(hl), #0x00
                                   7612 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002561 04               [ 4] 7613 	inc	b
      002562 18 E5            [12] 7614 	jr	00104$
      002564                       7615 00108$:
                                   7616 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002564 0C               [ 4] 7617 	inc	c
      002565 18 DB            [12] 7618 	jr	00107$
      002567                       7619 00102$:
                                   7620 ;src\/GameLogic.h:356: TestCase();
      002567 CDr8Ar24         [17] 7621 	call	_TestCase
                                   7622 ;src\/GameLogic.h:360: DrawBackground();
      00256A CDrDCr13         [17] 7623 	call	_DrawBackground
                                   7624 ;src\/GameLogic.h:362: DrawPlayfield();
      00256D CDr85r17         [17] 7625 	call	_DrawPlayfield
                                   7626 ;src\/GameLogic.h:364: DrawScore();
      002570 CDr34r12         [17] 7627 	call	_DrawScore
                                   7628 ;src\/GameLogic.h:366: DrawNextPiece();
      002573 CDrDAr10         [17] 7629 	call	_DrawNextPiece
                                   7630 ;src\/GameLogic.h:368: GameLoop();
                                   7631 ;src\/GameLogic.h:369: }
      002576 C3rB0r20         [10] 7632 	jp	_GameLoop
                                   7633 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7634 ;	---------------------------------
                                   7635 ; Function ChangeFontColor
                                   7636 ; ---------------------------------
      002579                       7637 _ChangeFontColor::
                                   7638 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002579 21 02 00         [10] 7639 	ld	hl, #2
      00257C 39               [11] 7640 	add	hl, sp
      00257D 7E               [ 7] 7641 	ld	a, (hl)
      00257E F5               [11] 7642 	push	af
      00257F 33               [ 6] 7643 	inc	sp
      002580 21 00 03         [10] 7644 	ld	hl, #0x0300
      002583 E5               [11] 7645 	push	hl
      002584 21 78 21         [10] 7646 	ld	hl, #0x2178
      002587 E5               [11] 7647 	push	hl
      002588 CDr00r00         [17] 7648 	call	_FILVRM
      00258B F1               [10] 7649 	pop	af
      00258C F1               [10] 7650 	pop	af
      00258D 33               [ 6] 7651 	inc	sp
                                   7652 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00258E 21 02 00         [10] 7653 	ld	hl, #2
      002591 39               [11] 7654 	add	hl, sp
      002592 7E               [ 7] 7655 	ld	a, (hl)
      002593 F5               [11] 7656 	push	af
      002594 33               [ 6] 7657 	inc	sp
      002595 21 00 03         [10] 7658 	ld	hl, #0x0300
      002598 E5               [11] 7659 	push	hl
      002599 21 78 29         [10] 7660 	ld	hl, #0x2978
      00259C E5               [11] 7661 	push	hl
      00259D CDr00r00         [17] 7662 	call	_FILVRM
      0025A0 F1               [10] 7663 	pop	af
      0025A1 F1               [10] 7664 	pop	af
      0025A2 33               [ 6] 7665 	inc	sp
                                   7666 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0025A3 21 02 00         [10] 7667 	ld	hl, #2
      0025A6 39               [11] 7668 	add	hl, sp
      0025A7 7E               [ 7] 7669 	ld	a, (hl)
      0025A8 F5               [11] 7670 	push	af
      0025A9 33               [ 6] 7671 	inc	sp
      0025AA 21 00 03         [10] 7672 	ld	hl, #0x0300
      0025AD E5               [11] 7673 	push	hl
      0025AE 21 78 31         [10] 7674 	ld	hl, #0x3178
      0025B1 E5               [11] 7675 	push	hl
      0025B2 CDr00r00         [17] 7676 	call	_FILVRM
      0025B5 F1               [10] 7677 	pop	af
      0025B6 F1               [10] 7678 	pop	af
      0025B7 33               [ 6] 7679 	inc	sp
                                   7680 ;src\/Intro.h:7: }
      0025B8 C9               [10] 7681 	ret
                                   7682 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7683 ;	---------------------------------
                                   7684 ; Function ScrollDownFont
                                   7685 ; ---------------------------------
      0025B9                       7686 _ScrollDownFont::
      0025B9 DD E5            [15] 7687 	push	ix
      0025BB DD 21 00 00      [14] 7688 	ld	ix,#0
      0025BF DD 39            [15] 7689 	add	ix,sp
      0025C1 F5               [11] 7690 	push	af
                                   7691 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0025C2 11 78 09         [10] 7692 	ld	de, #0x0978
      0025C5                       7693 00107$:
      0025C5 7B               [ 4] 7694 	ld	a, e
      0025C6 D6 78            [ 7] 7695 	sub	a, #0x78
      0025C8 7A               [ 4] 7696 	ld	a, d
      0025C9 DE 0C            [ 7] 7697 	sbc	a, #0x0c
      0025CB 30 44            [12] 7698 	jr	NC, 00109$
                                   7699 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0025CD 33               [ 6] 7700 	inc	sp
      0025CE 33               [ 6] 7701 	inc	sp
      0025CF D5               [11] 7702 	push	de
      0025D0 DD 7E FE         [19] 7703 	ld	a, -2 (ix)
      0025D3 C6 07            [ 7] 7704 	add	a, #0x07
      0025D5 4F               [ 4] 7705 	ld	c, a
      0025D6 DD 7E FF         [19] 7706 	ld	a, -1 (ix)
      0025D9 CE 00            [ 7] 7707 	adc	a, #0x00
      0025DB 47               [ 4] 7708 	ld	b, a
      0025DC                       7709 00104$:
      0025DC 78               [ 4] 7710 	ld	a, b
      0025DD B1               [ 4] 7711 	or	a, c
      0025DE 28 1A            [12] 7712 	jr	Z, 00101$
                                   7713 ;src\/Intro.h:27: value = RDVRM(j-1);
      0025E0 69               [ 4] 7714 	ld	l, c
      0025E1 60               [ 4] 7715 	ld	h, b
      0025E2 2B               [ 6] 7716 	dec	hl
      0025E3 C5               [11] 7717 	push	bc
      0025E4 D5               [11] 7718 	push	de
      0025E5 CDr00r00         [17] 7719 	call	_RDVRM
      0025E8 D1               [10] 7720 	pop	de
      0025E9 C1               [10] 7721 	pop	bc
                                   7722 ;src\/Intro.h:29: WRTVRM(j, 0);
      0025EA C5               [11] 7723 	push	bc
      0025EB D5               [11] 7724 	push	de
      0025EC AF               [ 4] 7725 	xor	a, a
      0025ED F5               [11] 7726 	push	af
      0025EE 33               [ 6] 7727 	inc	sp
      0025EF C5               [11] 7728 	push	bc
      0025F0 CDr00r00         [17] 7729 	call	_WRTVRM
      0025F3 F1               [10] 7730 	pop	af
      0025F4 33               [ 6] 7731 	inc	sp
      0025F5 D1               [10] 7732 	pop	de
      0025F6 C1               [10] 7733 	pop	bc
                                   7734 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0025F7 0B               [ 6] 7735 	dec	bc
      0025F8 18 E2            [12] 7736 	jr	00104$
      0025FA                       7737 00101$:
                                   7738 ;src\/Intro.h:31: WRTVRM(i, 0);
      0025FA AF               [ 4] 7739 	xor	a, a
      0025FB F5               [11] 7740 	push	af
      0025FC 33               [ 6] 7741 	inc	sp
      0025FD D5               [11] 7742 	push	de
      0025FE CDr00r00         [17] 7743 	call	_WRTVRM
      002601 F1               [10] 7744 	pop	af
      002602 33               [ 6] 7745 	inc	sp
                                   7746 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002603 DD 7E FE         [19] 7747 	ld	a, -2 (ix)
      002606 C6 08            [ 7] 7748 	add	a, #0x08
      002608 5F               [ 4] 7749 	ld	e, a
      002609 DD 7E FF         [19] 7750 	ld	a, -1 (ix)
      00260C CE 00            [ 7] 7751 	adc	a, #0x00
      00260E 57               [ 4] 7752 	ld	d, a
      00260F 18 B4            [12] 7753 	jr	00107$
      002611                       7754 00109$:
                                   7755 ;src\/Intro.h:35: }
      002611 DD F9            [10] 7756 	ld	sp, ix
      002613 DD E1            [14] 7757 	pop	ix
      002615 C9               [10] 7758 	ret
                                   7759 ;src\/Intro.h:37: void Intro() {
                                   7760 ;	---------------------------------
                                   7761 ; Function Intro
                                   7762 ; ---------------------------------
      002616                       7763 _Intro::
                                   7764 ;src\/Intro.h:41: InitVRAM();
      002616 CDr0Br14         [17] 7765 	call	_InitVRAM
                                   7766 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002619 11 0B 0B         [10] 7767 	ld	de, #0x0b0b
      00261C D5               [11] 7768 	push	de
      00261D 21r8Br26         [10] 7769 	ld	hl, #___str_8
      002620 E5               [11] 7770 	push	hl
      002621 CDrF1r0D         [17] 7771 	call	_DrawString
      002624 F1               [10] 7772 	pop	af
      002625 F1               [10] 7773 	pop	af
                                   7774 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002626 11 09 0D         [10] 7775 	ld	de, #0x0d09
      002629 D5               [11] 7776 	push	de
      00262A 21r95r26         [10] 7777 	ld	hl, #___str_9
      00262D E5               [11] 7778 	push	hl
      00262E CDrF1r0D         [17] 7779 	call	_DrawString
      002631 F1               [10] 7780 	pop	af
                                   7781 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002632 26 F0            [ 7] 7782 	ld	h,#0xf0
      002634 E3               [19] 7783 	ex	(sp),hl
      002635 33               [ 6] 7784 	inc	sp
      002636 CDr79r25         [17] 7785 	call	_ChangeFontColor
      002639 33               [ 6] 7786 	inc	sp
                                   7787 ;src\/Intro.h:56: Wait(2 * 60);
      00263A 21 78 00         [10] 7788 	ld	hl, #0x0078
      00263D E5               [11] 7789 	push	hl
      00263E CDr00r00         [17] 7790 	call	_Wait
      002641 F1               [10] 7791 	pop	af
                                   7792 ;src\/Intro.h:58: while(counter++ < 20) {
      002642 0E 00            [ 7] 7793 	ld	c, #0x00
      002644                       7794 00112$:
      002644 79               [ 4] 7795 	ld	a, c
      002645 D6 14            [ 7] 7796 	sub	a, #0x14
      002647 D0               [11] 7797 	ret	NC
      002648 0C               [ 4] 7798 	inc	c
                                   7799 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002649 21 9E FC         [10] 7800 	ld	hl, #_JIFFY
      00264C 46               [ 7] 7801 	ld	b, (hl)
                                   7802 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      00264D                       7803 00101$:
      00264D 58               [ 4] 7804 	ld	e, b
      00264E 16 00            [ 7] 7805 	ld	d, #0x00
      002650 2A 9E FC         [16] 7806 	ld	hl, (_JIFFY)
      002653 BF               [ 4] 7807 	cp	a, a
      002654 ED 52            [15] 7808 	sbc	hl, de
      002656 28 F5            [12] 7809 	jr	Z, 00101$
                                   7810 ;src\/Intro.h:63: if(counter == 15) {
      002658 79               [ 4] 7811 	ld	a, c
      002659 D6 0F            [ 7] 7812 	sub	a, #0x0f
      00265B 20 0C            [12] 7813 	jr	NZ, 00110$
                                   7814 ;src\/Intro.h:64: ChangeFontColor(0x40);
      00265D C5               [11] 7815 	push	bc
      00265E 3E 40            [ 7] 7816 	ld	a, #0x40
      002660 F5               [11] 7817 	push	af
      002661 33               [ 6] 7818 	inc	sp
      002662 CDr79r25         [17] 7819 	call	_ChangeFontColor
      002665 33               [ 6] 7820 	inc	sp
      002666 C1               [10] 7821 	pop	bc
      002667 18 DB            [12] 7822 	jr	00112$
      002669                       7823 00110$:
                                   7824 ;src\/Intro.h:66: else if(counter == 10) {
      002669 79               [ 4] 7825 	ld	a, c
      00266A D6 0A            [ 7] 7826 	sub	a, #0x0a
      00266C 20 0C            [12] 7827 	jr	NZ, 00107$
                                   7828 ;src\/Intro.h:67: ChangeFontColor(0x50);
      00266E C5               [11] 7829 	push	bc
      00266F 3E 50            [ 7] 7830 	ld	a, #0x50
      002671 F5               [11] 7831 	push	af
      002672 33               [ 6] 7832 	inc	sp
      002673 CDr79r25         [17] 7833 	call	_ChangeFontColor
      002676 33               [ 6] 7834 	inc	sp
      002677 C1               [10] 7835 	pop	bc
      002678 18 CA            [12] 7836 	jr	00112$
      00267A                       7837 00107$:
                                   7838 ;src\/Intro.h:69: else if(counter == 5) {
      00267A 79               [ 4] 7839 	ld	a, c
      00267B D6 05            [ 7] 7840 	sub	a, #0x05
      00267D 20 C5            [12] 7841 	jr	NZ, 00112$
                                   7842 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      00267F C5               [11] 7843 	push	bc
      002680 3E E0            [ 7] 7844 	ld	a, #0xe0
      002682 F5               [11] 7845 	push	af
      002683 33               [ 6] 7846 	inc	sp
      002684 CDr79r25         [17] 7847 	call	_ChangeFontColor
      002687 33               [ 6] 7848 	inc	sp
      002688 C1               [10] 7849 	pop	bc
                                   7850 ;src\/Intro.h:140: }
      002689 18 B9            [12] 7851 	jr	00112$
      00268B                       7852 ___str_8:
      00268B 41 20 47 41 4D 45 20  7853 	.ascii "A GAME BY"
             42 59
      002694 00                    7854 	.db 0x00
      002695                       7855 ___str_9:
      002695 41 4E 44 52 45 20 42  7856 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0026A3 00                    7857 	.db 0x00
                                   7858 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7859 ;	---------------------------------
                                   7860 ; Function SetBlock
                                   7861 ; ---------------------------------
      0026A4                       7862 _SetBlock::
      0026A4 DD E5            [15] 7863 	push	ix
      0026A6 DD 21 00 00      [14] 7864 	ld	ix,#0
      0026AA DD 39            [15] 7865 	add	ix,sp
                                   7866 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0026AC DD 7E 04         [19] 7867 	ld	a, 4 (ix)
      0026AF 06 00            [ 7] 7868 	ld	b, #0x00
      0026B1 4F               [ 4] 7869 	ld	c, a
      0026B2 78               [ 4] 7870 	ld	a, b
      0026B3 C6 18            [ 7] 7871 	add	a, #0x18
      0026B5 47               [ 4] 7872 	ld	b, a
      0026B6 DD 6E 05         [19] 7873 	ld	l, 5 (ix)
      0026B9 26 00            [ 7] 7874 	ld	h, #0x00
      0026BB 29               [11] 7875 	add	hl, hl
      0026BC 29               [11] 7876 	add	hl, hl
      0026BD 29               [11] 7877 	add	hl, hl
      0026BE 29               [11] 7878 	add	hl, hl
      0026BF 29               [11] 7879 	add	hl, hl
      0026C0 09               [11] 7880 	add	hl, bc
      0026C1 DD 7E 06         [19] 7881 	ld	a, 6 (ix)
      0026C4 F5               [11] 7882 	push	af
      0026C5 33               [ 6] 7883 	inc	sp
      0026C6 E5               [11] 7884 	push	hl
      0026C7 CDr00r00         [17] 7885 	call	_WRTVRM
      0026CA F1               [10] 7886 	pop	af
      0026CB 33               [ 6] 7887 	inc	sp
                                   7888 ;src\/Title.h:16: }
      0026CC DD E1            [14] 7889 	pop	ix
      0026CE C9               [10] 7890 	ret
                                   7891 ;src\/Title.h:18: void TitleScreen() {
                                   7892 ;	---------------------------------
                                   7893 ; Function TitleScreen
                                   7894 ; ---------------------------------
      0026CF                       7895 _TitleScreen::
      0026CF DD E5            [15] 7896 	push	ix
      0026D1 DD 21 00 00      [14] 7897 	ld	ix,#0
      0026D5 DD 39            [15] 7898 	add	ix,sp
      0026D7 21 EB FF         [10] 7899 	ld	hl, #-21
      0026DA 39               [11] 7900 	add	hl, sp
      0026DB F9               [ 6] 7901 	ld	sp, hl
                                   7902 ;src\/Title.h:19: byte colorIndex = 0;
      0026DC 0E 00            [ 7] 7903 	ld	c, #0x00
                                   7904 ;src\/Title.h:52: const char blocks[] = {
      0026DE 21 00 00         [10] 7905 	ld	hl, #0
      0026E1 39               [11] 7906 	add	hl, sp
      0026E2 EB               [ 4] 7907 	ex	de, hl
      0026E3 3E 8E            [ 7] 7908 	ld	a, #0x8e
      0026E5 12               [ 7] 7909 	ld	(de), a
      0026E6 6B               [ 4] 7910 	ld	l, e
      0026E7 62               [ 4] 7911 	ld	h, d
      0026E8 23               [ 6] 7912 	inc	hl
      0026E9 36 8F            [10] 7913 	ld	(hl), #0x8f
      0026EB 6B               [ 4] 7914 	ld	l, e
      0026EC 62               [ 4] 7915 	ld	h, d
      0026ED 23               [ 6] 7916 	inc	hl
      0026EE 23               [ 6] 7917 	inc	hl
      0026EF 36 90            [10] 7918 	ld	(hl), #0x90
      0026F1 6B               [ 4] 7919 	ld	l, e
      0026F2 62               [ 4] 7920 	ld	h, d
      0026F3 23               [ 6] 7921 	inc	hl
      0026F4 23               [ 6] 7922 	inc	hl
      0026F5 23               [ 6] 7923 	inc	hl
      0026F6 36 91            [10] 7924 	ld	(hl), #0x91
      0026F8 21 04 00         [10] 7925 	ld	hl, #0x0004
      0026FB 19               [11] 7926 	add	hl, de
      0026FC 36 92            [10] 7927 	ld	(hl), #0x92
      0026FE 21 05 00         [10] 7928 	ld	hl, #0x0005
      002701 19               [11] 7929 	add	hl, de
      002702 36 93            [10] 7930 	ld	(hl), #0x93
      002704 21 06 00         [10] 7931 	ld	hl, #0x0006
      002707 19               [11] 7932 	add	hl, de
      002708 36 94            [10] 7933 	ld	(hl), #0x94
                                   7934 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      00270A 21 07 00         [10] 7935 	ld	hl, #7
      00270D 39               [11] 7936 	add	hl, sp
      00270E DD 75 F6         [19] 7937 	ld	-10 (ix), l
      002711 DD 74 F7         [19] 7938 	ld	-9 (ix), h
      002714 36 8E            [10] 7939 	ld	(hl), #0x8e
      002716 DD 6E F6         [19] 7940 	ld	l, -10 (ix)
      002719 DD 66 F7         [19] 7941 	ld	h, -9 (ix)
      00271C 23               [ 6] 7942 	inc	hl
      00271D 36 90            [10] 7943 	ld	(hl), #0x90
      00271F DD 6E F6         [19] 7944 	ld	l, -10 (ix)
      002722 DD 66 F7         [19] 7945 	ld	h, -9 (ix)
      002725 23               [ 6] 7946 	inc	hl
      002726 23               [ 6] 7947 	inc	hl
      002727 36 92            [10] 7948 	ld	(hl), #0x92
      002729 DD 6E F6         [19] 7949 	ld	l, -10 (ix)
      00272C DD 66 F7         [19] 7950 	ld	h, -9 (ix)
      00272F 23               [ 6] 7951 	inc	hl
      002730 23               [ 6] 7952 	inc	hl
      002731 23               [ 6] 7953 	inc	hl
      002732 36 94            [10] 7954 	ld	(hl), #0x94
                                   7955 ;src\/Title.h:65: InitVRAM();
      002734 C5               [11] 7956 	push	bc
      002735 D5               [11] 7957 	push	de
      002736 CDr0Br14         [17] 7958 	call	_InitVRAM
      002739 21 00 01         [10] 7959 	ld	hl, #0x0100
      00273C E5               [11] 7960 	push	hl
      00273D 21rB6r28         [10] 7961 	ld	hl, #_TitleScreen_title_65536_280
      002740 E5               [11] 7962 	push	hl
      002741 21 00 18         [10] 7963 	ld	hl, #0x1800
      002744 E5               [11] 7964 	push	hl
      002745 CDr00r00         [17] 7965 	call	_LDIRVM
      002748 21 06 00         [10] 7966 	ld	hl, #6
      00274B 39               [11] 7967 	add	hl, sp
      00274C F9               [ 6] 7968 	ld	sp, hl
      00274D 11 05 0D         [10] 7969 	ld	de, #0x0d05
      002750 D5               [11] 7970 	push	de
      002751 21rB6r29         [10] 7971 	ld	hl, #___str_10
      002754 E5               [11] 7972 	push	hl
      002755 CDrF1r0D         [17] 7973 	call	_DrawString
      002758 F1               [10] 7974 	pop	af
      002759 26 17            [ 7] 7975 	ld	h,#0x17
      00275B E3               [19] 7976 	ex	(sp),hl
      00275C 33               [ 6] 7977 	inc	sp
      00275D AF               [ 4] 7978 	xor	a, a
      00275E F5               [11] 7979 	push	af
      00275F 33               [ 6] 7980 	inc	sp
      002760 21rCDr29         [10] 7981 	ld	hl, #___str_11
      002763 E5               [11] 7982 	push	hl
      002764 CDrF1r0D         [17] 7983 	call	_DrawString
      002767 F1               [10] 7984 	pop	af
      002768 F1               [10] 7985 	pop	af
      002769 11 19 17         [10] 7986 	ld	de, #0x1719
      00276C D5               [11] 7987 	push	de
      00276D 21rE2r29         [10] 7988 	ld	hl, #___str_12
      002770 E5               [11] 7989 	push	hl
      002771 CDrF1r0D         [17] 7990 	call	_DrawString
      002774 F1               [10] 7991 	pop	af
      002775 F1               [10] 7992 	pop	af
      002776 D1               [10] 7993 	pop	de
      002777 C1               [10] 7994 	pop	bc
                                   7995 ;src\/Title.h:73: while(TRUE) {
      002778                       7996 00120$:
                                   7997 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002778 DD 36 FD 00      [19] 7998 	ld	-3 (ix), #0
                                   7999 ;src\/Title.h:78: word counter = 0;
      00277C AF               [ 4] 8000 	xor	a, a
      00277D DD 77 FE         [19] 8001 	ld	-2 (ix), a
      002780 DD 77 FF         [19] 8002 	ld	-1 (ix), a
                                   8003 ;src\/Title.h:88: do {
      002783                       8004 00106$:
                                   8005 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002783 C5               [11] 8006 	push	bc
      002784 D5               [11] 8007 	push	de
      002785 11 1F 1F         [10] 8008 	ld	de, #0x1f1f
      002788 D5               [11] 8009 	push	de
      002789 CDrD9r00         [17] 8010 	call	_GetRandomInInterval
      00278C F1               [10] 8011 	pop	af
                                   8012 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      00278D DD 75 F8         [19] 8013 	ld	-8 (ix), l
      002790 11 07 07         [10] 8014 	ld	de, #0x0707
      002793 D5               [11] 8015 	push	de
      002794 CDrD9r00         [17] 8016 	call	_GetRandomInInterval
      002797 F1               [10] 8017 	pop	af
      002798 D1               [10] 8018 	pop	de
      002799 C1               [10] 8019 	pop	bc
      00279A DD 75 F9         [19] 8020 	ld	-7 (ix), l
                                   8021 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      00279D DD 6E F8         [19] 8022 	ld	l, -8 (ix)
      0027A0 3E 00            [ 7] 8023 	ld	a, #0x00
      0027A2 C6 18            [ 7] 8024 	add	a, #0x18
      0027A4 67               [ 4] 8025 	ld	h, a
      0027A5 DD 7E F9         [19] 8026 	ld	a, -7 (ix)
      0027A8 06 00            [ 7] 8027 	ld	b, #0x00
      0027AA 87               [ 4] 8028 	add	a, a
      0027AB CB 10            [ 8] 8029 	rl	b
      0027AD 87               [ 4] 8030 	add	a, a
      0027AE CB 10            [ 8] 8031 	rl	b
      0027B0 87               [ 4] 8032 	add	a, a
      0027B1 CB 10            [ 8] 8033 	rl	b
      0027B3 87               [ 4] 8034 	add	a, a
      0027B4 CB 10            [ 8] 8035 	rl	b
      0027B6 87               [ 4] 8036 	add	a, a
      0027B7 CB 10            [ 8] 8037 	rl	b
      0027B9 85               [ 4] 8038 	add	a, l
      0027BA 6F               [ 4] 8039 	ld	l, a
      0027BB 78               [ 4] 8040 	ld	a, b
      0027BC 8C               [ 4] 8041 	adc	a, h
      0027BD 67               [ 4] 8042 	ld	h, a
      0027BE C5               [11] 8043 	push	bc
      0027BF D5               [11] 8044 	push	de
      0027C0 CDr00r00         [17] 8045 	call	_RDVRM
      0027C3 D1               [10] 8046 	pop	de
      0027C4 C1               [10] 8047 	pop	bc
      0027C5 DD 75 FA         [19] 8048 	ld	-6 (ix), l
                                   8049 ;src\/Title.h:102: if(counter++ > 1000) {
      0027C8 DD 46 FE         [19] 8050 	ld	b, -2 (ix)
      0027CB DD 6E FF         [19] 8051 	ld	l, -1 (ix)
      0027CE DD 34 FE         [23] 8052 	inc	-2 (ix)
      0027D1 20 03            [12] 8053 	jr	NZ, 00193$
      0027D3 DD 34 FF         [23] 8054 	inc	-1 (ix)
      0027D6                       8055 00193$:
      0027D6 3E E8            [ 7] 8056 	ld	a, #0xe8
      0027D8 B8               [ 4] 8057 	cp	a, b
      0027D9 3E 03            [ 7] 8058 	ld	a, #0x03
      0027DB 9D               [ 4] 8059 	sbc	a, l
      0027DC 30 0F            [12] 8060 	jr	NC, 00107$
                                   8061 ;src\/Title.h:103: colorIndex++;
      0027DE 0C               [ 4] 8062 	inc	c
                                   8063 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0027DF 79               [ 4] 8064 	ld	a, c
      0027E0 D6 03            [ 7] 8065 	sub	a, #0x03
      0027E2 38 02            [12] 8066 	jr	C, 00102$
      0027E4 0E 00            [ 7] 8067 	ld	c, #0x00
      0027E6                       8068 00102$:
                                   8069 ;src\/Title.h:119: counter = 0;
      0027E6 AF               [ 4] 8070 	xor	a, a
      0027E7 DD 77 FE         [19] 8071 	ld	-2 (ix), a
      0027EA DD 77 FF         [19] 8072 	ld	-1 (ix), a
      0027ED                       8073 00107$:
                                   8074 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0027ED DD 7E FA         [19] 8075 	ld	a, -6 (ix)
      0027F0 B7               [ 4] 8076 	or	a, a
      0027F1 28 90            [12] 8077 	jr	Z, 00106$
      0027F3 79               [ 4] 8078 	ld	a, c
      0027F4 3C               [ 4] 8079 	inc	a
      0027F5 F5               [11] 8080 	push	af
      0027F6 17               [ 4] 8081 	rla
      0027F7 9F               [ 4] 8082 	sbc	a, a
      0027F8 47               [ 4] 8083 	ld	b, a
      0027F9 F1               [10] 8084 	pop	af
      0027FA DD 86 F6         [19] 8085 	add	a, -10 (ix)
      0027FD DD 77 FB         [19] 8086 	ld	-5 (ix), a
      002800 78               [ 4] 8087 	ld	a, b
      002801 DD 8E F7         [19] 8088 	adc	a, -9 (ix)
      002804 DD 77 FC         [19] 8089 	ld	-4 (ix), a
      002807 DD 6E FB         [19] 8090 	ld	l, -5 (ix)
      00280A DD 66 FC         [19] 8091 	ld	h, -4 (ix)
      00280D 46               [ 7] 8092 	ld	b, (hl)
      00280E DD 7E FA         [19] 8093 	ld	a, -6 (ix)
      002811 90               [ 4] 8094 	sub	a, b
      002812 CAr83r27         [10] 8095 	jp	Z,00106$
                                   8096 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002815 06 00            [ 7] 8097 	ld	b, #0x00
      002817                       8098 00123$:
      002817 78               [ 4] 8099 	ld	a, b
      002818 D6 0A            [ 7] 8100 	sub	a, #0x0a
      00281A 30 79            [12] 8101 	jr	NC, 00118$
                                   8102 ;src\/Title.h:140: word lastJiffy = JIFFY;
      00281C 2A 9E FC         [16] 8103 	ld	hl, (_JIFFY)
      00281F DD 75 FE         [19] 8104 	ld	-2 (ix), l
      002822 DD 74 FF         [19] 8105 	ld	-1 (ix), h
                                   8106 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002825                       8107 00109$:
      002825 FD 21 9E FC      [14] 8108 	ld	iy, #_JIFFY
      002829 FD 7E 00         [19] 8109 	ld	a, 0 (iy)
      00282C DD 96 FE         [19] 8110 	sub	a, -2 (ix)
      00282F 20 08            [12] 8111 	jr	NZ, 00195$
      002831 FD 7E 01         [19] 8112 	ld	a, 1 (iy)
      002834 DD 96 FF         [19] 8113 	sub	a, -1 (ix)
      002837 28 EC            [12] 8114 	jr	Z, 00109$
      002839                       8115 00195$:
                                   8116 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002839 DD 6E FD         [19] 8117 	ld	l, -3 (ix)
      00283C 26 00            [ 7] 8118 	ld	h, #0x00
      00283E 19               [11] 8119 	add	hl, de
      00283F 7E               [ 7] 8120 	ld	a, (hl)
      002840 C5               [11] 8121 	push	bc
      002841 D5               [11] 8122 	push	de
      002842 F5               [11] 8123 	push	af
      002843 33               [ 6] 8124 	inc	sp
      002844 DD 66 F9         [19] 8125 	ld	h, -7 (ix)
      002847 DD 6E F8         [19] 8126 	ld	l, -8 (ix)
      00284A E5               [11] 8127 	push	hl
      00284B CDrA4r26         [17] 8128 	call	_SetBlock
      00284E F1               [10] 8129 	pop	af
      00284F 33               [ 6] 8130 	inc	sp
      002850 D1               [10] 8131 	pop	de
      002851 C1               [10] 8132 	pop	bc
                                   8133 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002852 DD 7E FD         [19] 8134 	ld	a, -3 (ix)
      002855 DD 34 FD         [23] 8135 	inc	-3 (ix)
      002858 D6 07            [ 7] 8136 	sub	a, #0x07
      00285A 38 04            [12] 8137 	jr	C, 00113$
      00285C DD 36 FD 00      [19] 8138 	ld	-3 (ix), #0
      002860                       8139 00113$:
                                   8140 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002860 C5               [11] 8141 	push	bc
      002861 D5               [11] 8142 	push	de
      002862 2E 00            [ 7] 8143 	ld	l, #0x00
      002864 CDr00r00         [17] 8144 	call	_GTTRIG
                                   8145 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002867 DD 75 FF         [19] 8146 	ld	-1 (ix), l
      00286A 2E 01            [ 7] 8147 	ld	l, #0x01
      00286C CDr00r00         [17] 8148 	call	_GTTRIG
      00286F D1               [10] 8149 	pop	de
      002870 C1               [10] 8150 	pop	bc
                                   8151 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      002871 E5               [11] 8152 	push	hl
      002872 C5               [11] 8153 	push	bc
      002873 D5               [11] 8154 	push	de
      002874 2E 03            [ 7] 8155 	ld	l, #0x03
      002876 CDr00r00         [17] 8156 	call	_GTTRIG
      002879 7D               [ 4] 8157 	ld	a, l
      00287A D1               [10] 8158 	pop	de
      00287B C1               [10] 8159 	pop	bc
      00287C E1               [10] 8160 	pop	hl
      00287D 67               [ 4] 8161 	ld	h, a
                                   8162 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      00287E DD 7E FF         [19] 8163 	ld	a, -1 (ix)
      002881 3C               [ 4] 8164 	inc	a
      002882 28 06            [12] 8165 	jr	Z, 00114$
      002884 2C               [ 4] 8166 	inc	l
      002885 28 03            [12] 8167 	jr	Z, 00114$
      002887 24               [ 4] 8168 	inc	h
      002888 20 08            [12] 8169 	jr	NZ, 00124$
      00288A                       8170 00114$:
                                   8171 ;src\/Title.h:168: rndSeed = JIFFY;
      00288A 3A 9E FC         [13] 8172 	ld	a,(#_JIFFY + 0)
      00288D 32r08r00         [13] 8173 	ld	(#_rndSeed), a
                                   8174 ;src\/Title.h:169: return;
      002890 18 1F            [12] 8175 	jr	00125$
      002892                       8176 00124$:
                                   8177 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002892 04               [ 4] 8178 	inc	b
      002893 18 82            [12] 8179 	jr	00123$
      002895                       8180 00118$:
                                   8181 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002895 DD 6E FB         [19] 8182 	ld	l, -5 (ix)
      002898 DD 66 FC         [19] 8183 	ld	h, -4 (ix)
      00289B 7E               [ 7] 8184 	ld	a, (hl)
      00289C C5               [11] 8185 	push	bc
      00289D D5               [11] 8186 	push	de
      00289E F5               [11] 8187 	push	af
      00289F 33               [ 6] 8188 	inc	sp
      0028A0 DD 66 F9         [19] 8189 	ld	h, -7 (ix)
      0028A3 DD 6E F8         [19] 8190 	ld	l, -8 (ix)
      0028A6 E5               [11] 8191 	push	hl
      0028A7 CDrA4r26         [17] 8192 	call	_SetBlock
      0028AA F1               [10] 8193 	pop	af
      0028AB 33               [ 6] 8194 	inc	sp
      0028AC D1               [10] 8195 	pop	de
      0028AD C1               [10] 8196 	pop	bc
      0028AE C3r78r27         [10] 8197 	jp	00120$
      0028B1                       8198 00125$:
                                   8199 ;src\/Title.h:176: }
      0028B1 DD F9            [10] 8200 	ld	sp, ix
      0028B3 DD E1            [14] 8201 	pop	ix
      0028B5 C9               [10] 8202 	ret
      0028B6                       8203 _TitleScreen_title_65536_280:
      0028B6 00                    8204 	.db #0x00	; 0
      0028B7 00                    8205 	.db #0x00	; 0
      0028B8 00                    8206 	.db #0x00	; 0
      0028B9 00                    8207 	.db #0x00	; 0
      0028BA 8E                    8208 	.db #0x8e	; 142
      0028BB 8E                    8209 	.db #0x8e	; 142
      0028BC 8E                    8210 	.db #0x8e	; 142
      0028BD 8E                    8211 	.db #0x8e	; 142
      0028BE 00                    8212 	.db #0x00	; 0
      0028BF 8E                    8213 	.db #0x8e	; 142
      0028C0 8E                    8214 	.db #0x8e	; 142
      0028C1 8E                    8215 	.db #0x8e	; 142
      0028C2 8E                    8216 	.db #0x8e	; 142
      0028C3 8E                    8217 	.db #0x8e	; 142
      0028C4 8E                    8218 	.db #0x8e	; 142
      0028C5 00                    8219 	.db #0x00	; 0
      0028C6 00                    8220 	.db #0x00	; 0
      0028C7 8E                    8221 	.db #0x8e	; 142
      0028C8 8E                    8222 	.db #0x8e	; 142
      0028C9 00                    8223 	.db #0x00	; 0
      0028CA 00                    8224 	.db #0x00	; 0
      0028CB 00                    8225 	.db #0x00	; 0
      0028CC 8E                    8226 	.db #0x8e	; 142
      0028CD 8E                    8227 	.db #0x8e	; 142
      0028CE 00                    8228 	.db #0x00	; 0
      0028CF 00                    8229 	.db #0x00	; 0
      0028D0 00                    8230 	.db #0x00	; 0
      0028D1 00                    8231 	.db #0x00	; 0
      0028D2 8E                    8232 	.db #0x8e	; 142
      0028D3 8E                    8233 	.db #0x8e	; 142
      0028D4 8E                    8234 	.db #0x8e	; 142
      0028D5 8E                    8235 	.db #0x8e	; 142
      0028D6 00                    8236 	.db #0x00	; 0
      0028D7 00                    8237 	.db #0x00	; 0
      0028D8 00                    8238 	.db #0x00	; 0
      0028D9 8E                    8239 	.db #0x8e	; 142
      0028DA 8E                    8240 	.db #0x8e	; 142
      0028DB 8E                    8241 	.db #0x8e	; 142
      0028DC 8E                    8242 	.db #0x8e	; 142
      0028DD 8E                    8243 	.db #0x8e	; 142
      0028DE 00                    8244 	.db #0x00	; 0
      0028DF 8E                    8245 	.db #0x8e	; 142
      0028E0 8E                    8246 	.db #0x8e	; 142
      0028E1 00                    8247 	.db #0x00	; 0
      0028E2 00                    8248 	.db #0x00	; 0
      0028E3 00                    8249 	.db #0x00	; 0
      0028E4 8E                    8250 	.db #0x8e	; 142
      0028E5 8E                    8251 	.db #0x8e	; 142
      0028E6 00                    8252 	.db #0x00	; 0
      0028E7 00                    8253 	.db #0x00	; 0
      0028E8 8E                    8254 	.db #0x8e	; 142
      0028E9 8E                    8255 	.db #0x8e	; 142
      0028EA 00                    8256 	.db #0x00	; 0
      0028EB 00                    8257 	.db #0x00	; 0
      0028EC 8E                    8258 	.db #0x8e	; 142
      0028ED 8E                    8259 	.db #0x8e	; 142
      0028EE 00                    8260 	.db #0x00	; 0
      0028EF 00                    8261 	.db #0x00	; 0
      0028F0 00                    8262 	.db #0x00	; 0
      0028F1 8E                    8263 	.db #0x8e	; 142
      0028F2 8E                    8264 	.db #0x8e	; 142
      0028F3 8E                    8265 	.db #0x8e	; 142
      0028F4 8E                    8266 	.db #0x8e	; 142
      0028F5 8E                    8267 	.db #0x8e	; 142
      0028F6 00                    8268 	.db #0x00	; 0
      0028F7 00                    8269 	.db #0x00	; 0
      0028F8 8E                    8270 	.db #0x8e	; 142
      0028F9 8E                    8271 	.db #0x8e	; 142
      0028FA 8E                    8272 	.db #0x8e	; 142
      0028FB 00                    8273 	.db #0x00	; 0
      0028FC 8E                    8274 	.db #0x8e	; 142
      0028FD 8E                    8275 	.db #0x8e	; 142
      0028FE 00                    8276 	.db #0x00	; 0
      0028FF 8E                    8277 	.db #0x8e	; 142
      002900 8E                    8278 	.db #0x8e	; 142
      002901 00                    8279 	.db #0x00	; 0
      002902 00                    8280 	.db #0x00	; 0
      002903 00                    8281 	.db #0x00	; 0
      002904 8E                    8282 	.db #0x8e	; 142
      002905 8E                    8283 	.db #0x8e	; 142
      002906 00                    8284 	.db #0x00	; 0
      002907 00                    8285 	.db #0x00	; 0
      002908 00                    8286 	.db #0x00	; 0
      002909 8E                    8287 	.db #0x8e	; 142
      00290A 8E                    8288 	.db #0x8e	; 142
      00290B 00                    8289 	.db #0x00	; 0
      00290C 8E                    8290 	.db #0x8e	; 142
      00290D 8E                    8291 	.db #0x8e	; 142
      00290E 00                    8292 	.db #0x00	; 0
      00290F 00                    8293 	.db #0x00	; 0
      002910 8E                    8294 	.db #0x8e	; 142
      002911 8E                    8295 	.db #0x8e	; 142
      002912 8E                    8296 	.db #0x8e	; 142
      002913 00                    8297 	.db #0x00	; 0
      002914 8E                    8298 	.db #0x8e	; 142
      002915 8E                    8299 	.db #0x8e	; 142
      002916 00                    8300 	.db #0x00	; 0
      002917 8E                    8301 	.db #0x8e	; 142
      002918 8E                    8302 	.db #0x8e	; 142
      002919 8E                    8303 	.db #0x8e	; 142
      00291A 00                    8304 	.db #0x00	; 0
      00291B 00                    8305 	.db #0x00	; 0
      00291C 8E                    8306 	.db #0x8e	; 142
      00291D 8E                    8307 	.db #0x8e	; 142
      00291E 00                    8308 	.db #0x00	; 0
      00291F 8E                    8309 	.db #0x8e	; 142
      002920 8E                    8310 	.db #0x8e	; 142
      002921 00                    8311 	.db #0x00	; 0
      002922 00                    8312 	.db #0x00	; 0
      002923 8E                    8313 	.db #0x8e	; 142
      002924 8E                    8314 	.db #0x8e	; 142
      002925 00                    8315 	.db #0x00	; 0
      002926 00                    8316 	.db #0x00	; 0
      002927 00                    8317 	.db #0x00	; 0
      002928 00                    8318 	.db #0x00	; 0
      002929 00                    8319 	.db #0x00	; 0
      00292A 8E                    8320 	.db #0x8e	; 142
      00292B 8E                    8321 	.db #0x8e	; 142
      00292C 8E                    8322 	.db #0x8e	; 142
      00292D 00                    8323 	.db #0x00	; 0
      00292E 00                    8324 	.db #0x00	; 0
      00292F 8E                    8325 	.db #0x8e	; 142
      002930 8E                    8326 	.db #0x8e	; 142
      002931 8E                    8327 	.db #0x8e	; 142
      002932 00                    8328 	.db #0x00	; 0
      002933 00                    8329 	.db #0x00	; 0
      002934 8E                    8330 	.db #0x8e	; 142
      002935 8E                    8331 	.db #0x8e	; 142
      002936 00                    8332 	.db #0x00	; 0
      002937 8E                    8333 	.db #0x8e	; 142
      002938 8E                    8334 	.db #0x8e	; 142
      002939 00                    8335 	.db #0x00	; 0
      00293A 00                    8336 	.db #0x00	; 0
      00293B 00                    8337 	.db #0x00	; 0
      00293C 8E                    8338 	.db #0x8e	; 142
      00293D 8E                    8339 	.db #0x8e	; 142
      00293E 00                    8340 	.db #0x00	; 0
      00293F 8E                    8341 	.db #0x8e	; 142
      002940 8E                    8342 	.db #0x8e	; 142
      002941 8E                    8343 	.db #0x8e	; 142
      002942 8E                    8344 	.db #0x8e	; 142
      002943 8E                    8345 	.db #0x8e	; 142
      002944 00                    8346 	.db #0x00	; 0
      002945 00                    8347 	.db #0x00	; 0
      002946 00                    8348 	.db #0x00	; 0
      002947 00                    8349 	.db #0x00	; 0
      002948 00                    8350 	.db #0x00	; 0
      002949 00                    8351 	.db #0x00	; 0
      00294A 8E                    8352 	.db #0x8e	; 142
      00294B 8E                    8353 	.db #0x8e	; 142
      00294C 00                    8354 	.db #0x00	; 0
      00294D 00                    8355 	.db #0x00	; 0
      00294E 00                    8356 	.db #0x00	; 0
      00294F 8E                    8357 	.db #0x8e	; 142
      002950 8E                    8358 	.db #0x8e	; 142
      002951 00                    8359 	.db #0x00	; 0
      002952 00                    8360 	.db #0x00	; 0
      002953 00                    8361 	.db #0x00	; 0
      002954 8E                    8362 	.db #0x8e	; 142
      002955 8E                    8363 	.db #0x8e	; 142
      002956 00                    8364 	.db #0x00	; 0
      002957 8E                    8365 	.db #0x8e	; 142
      002958 8E                    8366 	.db #0x8e	; 142
      002959 00                    8367 	.db #0x00	; 0
      00295A 00                    8368 	.db #0x00	; 0
      00295B 00                    8369 	.db #0x00	; 0
      00295C 8E                    8370 	.db #0x8e	; 142
      00295D 8E                    8371 	.db #0x8e	; 142
      00295E 00                    8372 	.db #0x00	; 0
      00295F 8E                    8373 	.db #0x8e	; 142
      002960 8E                    8374 	.db #0x8e	; 142
      002961 8E                    8375 	.db #0x8e	; 142
      002962 8E                    8376 	.db #0x8e	; 142
      002963 8E                    8377 	.db #0x8e	; 142
      002964 00                    8378 	.db #0x00	; 0
      002965 00                    8379 	.db #0x00	; 0
      002966 00                    8380 	.db #0x00	; 0
      002967 00                    8381 	.db #0x00	; 0
      002968 00                    8382 	.db #0x00	; 0
      002969 00                    8383 	.db #0x00	; 0
      00296A 8E                    8384 	.db #0x8e	; 142
      00296B 8E                    8385 	.db #0x8e	; 142
      00296C 00                    8386 	.db #0x00	; 0
      00296D 00                    8387 	.db #0x00	; 0
      00296E 00                    8388 	.db #0x00	; 0
      00296F 8E                    8389 	.db #0x8e	; 142
      002970 8E                    8390 	.db #0x8e	; 142
      002971 00                    8391 	.db #0x00	; 0
      002972 00                    8392 	.db #0x00	; 0
      002973 00                    8393 	.db #0x00	; 0
      002974 8E                    8394 	.db #0x8e	; 142
      002975 8E                    8395 	.db #0x8e	; 142
      002976 00                    8396 	.db #0x00	; 0
      002977 8E                    8397 	.db #0x8e	; 142
      002978 8E                    8398 	.db #0x8e	; 142
      002979 8E                    8399 	.db #0x8e	; 142
      00297A 8E                    8400 	.db #0x8e	; 142
      00297B 8E                    8401 	.db #0x8e	; 142
      00297C 8E                    8402 	.db #0x8e	; 142
      00297D 8E                    8403 	.db #0x8e	; 142
      00297E 00                    8404 	.db #0x00	; 0
      00297F 8E                    8405 	.db #0x8e	; 142
      002980 8E                    8406 	.db #0x8e	; 142
      002981 00                    8407 	.db #0x00	; 0
      002982 00                    8408 	.db #0x00	; 0
      002983 00                    8409 	.db #0x00	; 0
      002984 8E                    8410 	.db #0x8e	; 142
      002985 00                    8411 	.db #0x00	; 0
      002986 00                    8412 	.db #0x00	; 0
      002987 00                    8413 	.db #0x00	; 0
      002988 00                    8414 	.db #0x00	; 0
      002989 00                    8415 	.db #0x00	; 0
      00298A 8E                    8416 	.db #0x8e	; 142
      00298B 8E                    8417 	.db #0x8e	; 142
      00298C 00                    8418 	.db #0x00	; 0
      00298D 00                    8419 	.db #0x00	; 0
      00298E 00                    8420 	.db #0x00	; 0
      00298F 8E                    8421 	.db #0x8e	; 142
      002990 8E                    8422 	.db #0x8e	; 142
      002991 8E                    8423 	.db #0x8e	; 142
      002992 8E                    8424 	.db #0x8e	; 142
      002993 8E                    8425 	.db #0x8e	; 142
      002994 8E                    8426 	.db #0x8e	; 142
      002995 8E                    8427 	.db #0x8e	; 142
      002996 00                    8428 	.db #0x00	; 0
      002997 8E                    8429 	.db #0x8e	; 142
      002998 8E                    8430 	.db #0x8e	; 142
      002999 00                    8431 	.db #0x00	; 0
      00299A 00                    8432 	.db #0x00	; 0
      00299B 00                    8433 	.db #0x00	; 0
      00299C 8E                    8434 	.db #0x8e	; 142
      00299D 8E                    8435 	.db #0x8e	; 142
      00299E 00                    8436 	.db #0x00	; 0
      00299F 8E                    8437 	.db #0x8e	; 142
      0029A0 8E                    8438 	.db #0x8e	; 142
      0029A1 00                    8439 	.db #0x00	; 0
      0029A2 00                    8440 	.db #0x00	; 0
      0029A3 00                    8441 	.db #0x00	; 0
      0029A4 8E                    8442 	.db #0x8e	; 142
      0029A5 00                    8443 	.db #0x00	; 0
      0029A6 00                    8444 	.db #0x00	; 0
      0029A7 00                    8445 	.db #0x00	; 0
      0029A8 00                    8446 	.db #0x00	; 0
      0029A9 00                    8447 	.db #0x00	; 0
      0029AA 8E                    8448 	.db #0x8e	; 142
      0029AB 8E                    8449 	.db #0x8e	; 142
      0029AC 00                    8450 	.db #0x00	; 0
      0029AD 00                    8451 	.db #0x00	; 0
      0029AE 00                    8452 	.db #0x00	; 0
      0029AF 8E                    8453 	.db #0x8e	; 142
      0029B0 8E                    8454 	.db #0x8e	; 142
      0029B1 00                    8455 	.db #0x00	; 0
      0029B2 00                    8456 	.db #0x00	; 0
      0029B3 00                    8457 	.db #0x00	; 0
      0029B4 8E                    8458 	.db #0x8e	; 142
      0029B5 8E                    8459 	.db #0x8e	; 142
      0029B6                       8460 ___str_10:
      0029B6 50 52 45 53 53 20 54  8461 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0029CC 00                    8462 	.db 0x00
      0029CD                       8463 ___str_11:
      0029CD 41 4E 44 52 45 42 41  8464 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0029E1 00                    8465 	.db 0x00
      0029E2                       8466 ___str_12:
      0029E2 76 2E 3F 2E 3F 2E 3F  8467 	.ascii "v.?.?.?"
      0029E9 00                    8468 	.db 0x00
                                   8469 ;src\main.c:90: void main() {
                                   8470 ;	---------------------------------
                                   8471 ; Function main
                                   8472 ; ---------------------------------
      0029EA                       8473 _main::
                                   8474 ;src\main.c:92: while(TRUE) {
      0029EA                       8475 00102$:
                                   8476 ;src\main.c:98: InitGame();
      0029EA CDrD9r24         [17] 8477 	call	_InitGame
                                   8478 ;src\main.c:101: }
      0029ED 18 FB            [12] 8479 	jr	00102$
                                   8480 	.area _CODE
                                   8481 	.area _INITIALIZER
      000000                       8482 __xinit__gameOver:
      000000 00                    8483 	.db #0x00	; 0
      000001                       8484 __xinit__col:
      000001 00                    8485 	.db #0x00	; 0
      000002                       8486 __xinit__line:
      000002 00                    8487 	.db #0x00	; 0
      000003                       8488 __xinit__counter:
      000003 00                    8489 	.db #0x00	; 0
      000004                       8490 __xinit__blocksRemoved:
      000004 00 00                 8491 	.dw #0x0000
      000006                       8492 __xinit__level:
      000006 01                    8493 	.db #0x01	; 1
      000007                       8494 __xinit__newLevel:
      000007 00                    8495 	.db #0x00	; 0
      000008                       8496 __xinit__rndSeed:
      000008 00                    8497 	.db #0x00	; 0
                                   8498 	.area _CABS (ABS)
