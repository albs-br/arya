                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideHitSprite
                                     36 	.globl _DrawHitSprite
                                     37 	.globl _HideArrow
                                     38 	.globl _DrawArrow
                                     39 	.globl _DrawBackground
                                     40 	.globl _DrawScore
                                     41 	.globl _DrawColumn
                                     42 	.globl _DrawNumber
                                     43 	.globl _DrawString
                                     44 	.globl _DrawChar
                                     45 	.globl _GetRandomInInterval
                                     46 	.globl _GetRandom
                                     47 	.globl _InitRnd
                                     48 	.globl _Power
                                     49 	.globl _Wait
                                     50 	.globl _SNSMAT
                                     51 	.globl _GTTRIG
                                     52 	.globl _GTSTCK
                                     53 	.globl _BEEP
                                     54 	.globl _WRTPSG
                                     55 	.globl _GICINI
                                     56 	.globl _INIGRP
                                     57 	.globl _LDIRVM
                                     58 	.globl _FILVRM
                                     59 	.globl _WRTVRM
                                     60 	.globl _RDVRM
                                     61 	.globl _WRTVDP
                                     62 	.globl _ENASCR
                                     63 	.globl _DISSCR
                                     64 	.globl _d_value
                                     65 	.globl _d_line
                                     66 	.globl _d_col
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _bottomPiece
                                     81 	.globl _midPiece
                                     82 	.globl _topPiece
                                     83 	.globl _playfieldTemp
                                     84 	.globl _playfield
                                     85 	.globl _GETPNT
                                     86 	.globl _PUTPNT
                                     87 	.globl _REPCNT
                                     88 	.globl _SCNCNT
                                     89 	.globl _ATRBYT
                                     90 	.globl _CMASK
                                     91 	.globl _CLOC
                                     92 	.globl _BDRCLR
                                     93 	.globl _BAKCLR
                                     94 	.globl _FORCLR
                                     95 	.globl _TRGFLG
                                     96 	.globl _STATFL
                                     97 	.globl _MSX_vdp_regs
                                     98 	.globl _CNSDFG
                                     99 	.globl _CSRX
                                    100 	.globl _CSRY
                                    101 	.globl _MSX_modedata_screen3
                                    102 	.globl _MSX_modedata_screen2
                                    103 	.globl _MSX_modedata_screen1
                                    104 	.globl _MSX_modedata_screen0
                                    105 	.globl _CLIKSW
                                    106 	.globl _JIFFY
                                    107 	.globl _CLMLST
                                    108 	.globl _CRTCNT
                                    109 	.globl _LINLEN
                                    110 	.globl _LINL32
                                    111 	.globl _LINL40
                                    112 	.globl _MSX_charset
                                    113 	.globl _FONT
                                    114 	.globl _pieces
                                    115 	.globl _MSX_version
                                    116 	.globl _MSX_vdp_port_write
                                    117 	.globl _MSX_vdp_port_read
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 ;--------------------------------------------------------
                                    122 ; ram data
                                    123 ;--------------------------------------------------------
                                    124 	.area _DATA
                           000004   125 _MSX_charset	=	0x0004
                           00F3AE   126 _LINL40	=	0xf3ae
                           00F3AF   127 _LINL32	=	0xf3af
                           00F3B0   128 _LINLEN	=	0xf3b0
                           00F3B1   129 _CRTCNT	=	0xf3b1
                           00F3B1   130 _CLMLST	=	0xf3b1
                           00FC9E   131 _JIFFY	=	0xfc9e
                           00F3DB   132 _CLIKSW	=	0xf3db
                           00F3B3   133 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   134 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   135 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   136 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   137 _CSRY	=	0xf3dc
                           00F3DD   138 _CSRX	=	0xf3dd
                           00F3DE   139 _CNSDFG	=	0xf3de
                           00F3DF   140 _MSX_vdp_regs	=	0xf3df
                           00F3E7   141 _STATFL	=	0xf3e7
                           00F3E8   142 _TRGFLG	=	0xf3e8
                           00F3E9   143 _FORCLR	=	0xf3e9
                           00F3EA   144 _BAKCLR	=	0xf3ea
                           00F3EB   145 _BDRCLR	=	0xf3eb
                           00F92A   146 _CLOC	=	0xf92a
                           00F92C   147 _CMASK	=	0xf92c
                           00F3F2   148 _ATRBYT	=	0xf3f2
                           00F3F6   149 _SCNCNT	=	0xf3f6
                           00F3F7   150 _REPCNT	=	0xf3f7
                           00F3F8   151 _PUTPNT	=	0xf3f8
                           00F3FA   152 _GETPNT	=	0xf3fa
      000000                        153 _playfield::
      000000                        154 	.ds 72
      000048                        155 _playfieldTemp::
      000048                        156 	.ds 72
      000090                        157 _topPiece::
      000090                        158 	.ds 1
      000091                        159 _midPiece::
      000091                        160 	.ds 1
      000092                        161 _bottomPiece::
      000092                        162 	.ds 1
      000093                        163 _speed::
      000093                        164 	.ds 1
      000094                        165 _Rand_a::
      000094                        166 	.ds 1
      000095                        167 _Rand_b::
      000095                        168 	.ds 1
      000096                        169 _Rand_c::
      000096                        170 	.ds 1
      000097                        171 _Rand_x::
      000097                        172 	.ds 1
                                    173 ;--------------------------------------------------------
                                    174 ; ram data
                                    175 ;--------------------------------------------------------
                                    176 	.area _INITIALIZED
      000000                        177 _gameOver::
      000000                        178 	.ds 1
      000001                        179 _col::
      000001                        180 	.ds 1
      000002                        181 _line::
      000002                        182 	.ds 1
      000003                        183 _counter::
      000003                        184 	.ds 1
      000004                        185 _blocksRemoved::
      000004                        186 	.ds 2
      000006                        187 _level::
      000006                        188 	.ds 1
      000007                        189 _newLevel::
      000007                        190 	.ds 1
      000008                        191 _rndSeed::
      000008                        192 	.ds 1
      000009                        193 _d_col::
      000009                        194 	.ds 1
      00000A                        195 _d_line::
      00000A                        196 	.ds 1
      00000B                        197 _d_value::
      00000B                        198 	.ds 1
                                    199 ;--------------------------------------------------------
                                    200 ; absolute external ram data
                                    201 ;--------------------------------------------------------
                                    202 	.area _DABS (ABS)
                                    203 ;--------------------------------------------------------
                                    204 ; global & static initialisations
                                    205 ;--------------------------------------------------------
                                    206 	.area _HOME
                                    207 	.area _GSINIT
                                    208 	.area _GSFINAL
                                    209 	.area _GSINIT
                                    210 ;--------------------------------------------------------
                                    211 ; Home
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _HOME
                                    215 ;--------------------------------------------------------
                                    216 ; code
                                    217 ;--------------------------------------------------------
                                    218 	.area _CODE
                                    219 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    220 ;	---------------------------------
                                    221 ; Function Wait
                                    222 ; ---------------------------------
      000000                        223 _Wait::
                                    224 ;src\/Common.h:2: do {
      000000 D1               [10]  225 	pop	de
      000001 C1               [10]  226 	pop	bc
      000002 C5               [11]  227 	push	bc
      000003 D5               [11]  228 	push	de
      000004                        229 00104$:
                                    230 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  231 	ld	de, (_JIFFY)
                                    232 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        233 00101$:
      000008 2A 9E FC         [16]  234 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  235 	cp	a, a
      00000C ED 52            [15]  236 	sbc	hl, de
      00000E 28 F8            [12]  237 	jr	Z, 00101$
                                    238 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  239 	ld	e, c
      000011 50               [ 4]  240 	ld	d, b
      000012 0B               [ 6]  241 	dec	bc
      000013 7A               [ 4]  242 	ld	a, d
      000014 B3               [ 4]  243 	or	a, e
      000015 20 ED            [12]  244 	jr	NZ, 00104$
                                    245 ;src\/Common.h:8: }
      000017 C9               [10]  246 	ret
                           000006   247 _MSX_vdp_port_read	=	0x0006
                           000007   248 _MSX_vdp_port_write	=	0x0007
                           00002D   249 _MSX_version	=	0x002d
      000018                        250 _pieces:
      000018 04                     251 	.db #0x04	; 4
      000019 08                     252 	.db #0x08	; 8
      00001A 0C                     253 	.db #0x0c	; 12
      00001B 10                     254 	.db #0x10	; 16
      00001C 14                     255 	.db #0x14	; 20
                                    256 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    257 ;	---------------------------------
                                    258 ; Function Power
                                    259 ; ---------------------------------
      00001D                        260 _Power::
      00001D DD E5            [15]  261 	push	ix
      00001F DD 21 00 00      [14]  262 	ld	ix,#0
      000023 DD 39            [15]  263 	add	ix,sp
                                    264 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  265 	ld	c, 4 (ix)
      000028 06 00            [ 7]  266 	ld	b, #0x00
      00002A 69               [ 4]  267 	ld	l, c
      00002B 60               [ 4]  268 	ld	h, b
                                    269 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  270 	ld	a, 5 (ix)
      00002F B7               [ 4]  271 	or	a, a
      000030 20 05            [12]  272 	jr	NZ, 00111$
      000032 21 01 00         [10]  273 	ld	hl, #0x0001
      000035 18 16            [12]  274 	jr	00107$
                                    275 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        276 00111$:
      000037 1E 01            [ 7]  277 	ld	e, #0x01
      000039                        278 00105$:
      000039 7B               [ 4]  279 	ld	a, e
      00003A DD 96 05         [19]  280 	sub	a, 5 (ix)
      00003D 30 0E            [12]  281 	jr	NC, 00103$
                                    282 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  283 	push	bc
      000040 D5               [11]  284 	push	de
      000041 C5               [11]  285 	push	bc
      000042 E5               [11]  286 	push	hl
      000043 CDr00r00         [17]  287 	call	__mulint
      000046 F1               [10]  288 	pop	af
      000047 F1               [10]  289 	pop	af
      000048 D1               [10]  290 	pop	de
      000049 C1               [10]  291 	pop	bc
                                    292 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  293 	inc	e
      00004B 18 EC            [12]  294 	jr	00105$
      00004D                        295 00103$:
                                    296 ;src\/Math.h:10: return power;
      00004D                        297 00107$:
                                    298 ;src\/Math.h:11: }
      00004D DD E1            [14]  299 	pop	ix
      00004F C9               [10]  300 	ret
                                    301 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    302 ;	---------------------------------
                                    303 ; Function InitRnd
                                    304 ; ---------------------------------
      000050                        305 _InitRnd::
                                    306 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  307 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  308 	ld	hl, #2
      000056 39               [11]  309 	add	hl, sp
      000057 AE               [ 7]  310 	xor	a, (hl)
      000058 32r94r00         [13]  311 	ld	(_Rand_a+0), a
                                    312 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  313 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  314 	ld	hl, #3
      000061 39               [11]  315 	add	hl, sp
      000062 AE               [ 7]  316 	xor	a, (hl)
      000063 32r95r00         [13]  317 	ld	(_Rand_b+0), a
                                    318 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  319 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  320 	ld	hl, #4
      00006C 39               [11]  321 	add	hl, sp
      00006D AE               [ 7]  322 	xor	a, (hl)
      00006E 32r96r00         [13]  323 	ld	(_Rand_c+0), a
                                    324 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  325 	ld	hl, #_Rand_x
      000074 34               [11]  326 	inc	(hl)
                                    327 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  328 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  329 	ld	hl, #_Rand_c
      00007B AE               [ 7]  330 	xor	a, (hl)
      00007C 21r97r00         [10]  331 	ld	hl, #_Rand_x
      00007F AE               [ 7]  332 	xor	a, (hl)
      000080 32r94r00         [13]  333 	ld	(_Rand_a+0), a
                                    334 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  335 	ld	hl, #_Rand_b
      000086 7E               [ 7]  336 	ld	a, (hl)
      000087 FD 21r94r00      [14]  337 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  338 	add	a, 0 (iy)
      00008E 77               [ 7]  339 	ld	(hl), a
                                    340 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  341 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  342 	srl	a
      000094 21r96r00         [10]  343 	ld	hl, #_Rand_c
      000097 86               [ 7]  344 	add	a, (hl)
      000098 FD 21r94r00      [14]  345 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  346 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  347 	ld	(_Rand_c+0), a
                                    348 ;src\/Random.h:38: }
      0000A2 C9               [10]  349 	ret
                                    350 ;src\/Random.h:40: unsigned char GetRandom() {
                                    351 ;	---------------------------------
                                    352 ; Function GetRandom
                                    353 ; ---------------------------------
      0000A3                        354 _GetRandom::
                                    355 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  356 	ld	hl, #_Rand_x
      0000A6 34               [11]  357 	inc	(hl)
                                    358 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  359 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  360 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  361 	xor	a, (hl)
      0000AE 21r97r00         [10]  362 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  363 	xor	a, (hl)
      0000B2 32r94r00         [13]  364 	ld	(_Rand_a+0), a
                                    365 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  366 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  367 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  368 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  369 	add	a, 0 (iy)
      0000C0 77               [ 7]  370 	ld	(hl), a
                                    371 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  372 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  373 	srl	a
      0000C6 21r96r00         [10]  374 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  375 	add	a, (hl)
      0000CA FD 21r94r00      [14]  376 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  377 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  378 	ld	(_Rand_c+0), a
                                    379 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  380 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  381 	ld	l, a
                                    382 ;src\/Random.h:47: }
      0000D8 C9               [10]  383 	ret
                                    384 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    385 ;	---------------------------------
                                    386 ; Function GetRandomInInterval
                                    387 ; ---------------------------------
      0000D9                        388 _GetRandomInInterval::
                                    389 ;src\/Random.h:53: do {
      0000D9                        390 00101$:
                                    391 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  392 	call	_GetRandom
      0000DC 7D               [ 4]  393 	ld	a, l
      0000DD 21 03 00         [10]  394 	ld	hl, #3
      0000E0 39               [11]  395 	add	hl, sp
      0000E1 A6               [ 7]  396 	and	a, (hl)
      0000E2 4F               [ 4]  397 	ld	c, a
                                    398 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  399 	ld	hl, #2
      0000E6 39               [11]  400 	add	hl, sp
      0000E7 7E               [ 7]  401 	ld	a, (hl)
      0000E8 91               [ 4]  402 	sub	a, c
      0000E9 38 EE            [12]  403 	jr	C, 00101$
                                    404 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  405 	ld	l, c
                                    406 ;src\/Random.h:59: }
      0000EC C9               [10]  407 	ret
                                    408 ;src\/Graphics.h:12: void DrawChar(byte character, byte col, byte line) {
                                    409 ;	---------------------------------
                                    410 ; Function DrawChar
                                    411 ; ---------------------------------
      0000ED                        412 _DrawChar::
      0000ED DD E5            [15]  413 	push	ix
      0000EF DD 21 00 00      [14]  414 	ld	ix,#0
      0000F3 DD 39            [15]  415 	add	ix,sp
                                    416 ;src\/Graphics.h:13: WRTVRM(NAMTBL + (line * 32) + col, character);
      0000F5 DD 6E 06         [19]  417 	ld	l, 6 (ix)
      0000F8 26 00            [ 7]  418 	ld	h, #0x00
      0000FA 29               [11]  419 	add	hl, hl
      0000FB 29               [11]  420 	add	hl, hl
      0000FC 29               [11]  421 	add	hl, hl
      0000FD 29               [11]  422 	add	hl, hl
      0000FE 29               [11]  423 	add	hl, hl
      0000FF 01 00 18         [10]  424 	ld	bc, #0x1800
      000102 09               [11]  425 	add	hl, bc
      000103 DD 4E 05         [19]  426 	ld	c, 5 (ix)
      000106 06 00            [ 7]  427 	ld	b, #0x00
      000108 09               [11]  428 	add	hl, bc
      000109 DD 7E 04         [19]  429 	ld	a, 4 (ix)
      00010C F5               [11]  430 	push	af
      00010D 33               [ 6]  431 	inc	sp
      00010E E5               [11]  432 	push	hl
      00010F CDr00r00         [17]  433 	call	_WRTVRM
      000112 F1               [10]  434 	pop	af
      000113 33               [ 6]  435 	inc	sp
                                    436 ;src\/Graphics.h:14: }
      000114 DD E1            [14]  437 	pop	ix
      000116 C9               [10]  438 	ret
      000117                        439 _FONT:
      000117 00                     440 	.db #0x00	; 0
      000118 00                     441 	.db #0x00	; 0
      000119 00                     442 	.db #0x00	; 0
      00011A 00                     443 	.db #0x00	; 0
      00011B 00                     444 	.db #0x00	; 0
      00011C 00                     445 	.db #0x00	; 0
      00011D 00                     446 	.db #0x00	; 0
      00011E 00                     447 	.db #0x00	; 0
      00011F 30                     448 	.db #0x30	; 48	'0'
      000120 78                     449 	.db #0x78	; 120	'x'
      000121 78                     450 	.db #0x78	; 120	'x'
      000122 30                     451 	.db #0x30	; 48	'0'
      000123 30                     452 	.db #0x30	; 48	'0'
      000124 00                     453 	.db #0x00	; 0
      000125 30                     454 	.db #0x30	; 48	'0'
      000126 00                     455 	.db #0x00	; 0
      000127 6C                     456 	.db #0x6c	; 108	'l'
      000128 6C                     457 	.db #0x6c	; 108	'l'
      000129 6C                     458 	.db #0x6c	; 108	'l'
      00012A 00                     459 	.db #0x00	; 0
      00012B 00                     460 	.db #0x00	; 0
      00012C 00                     461 	.db #0x00	; 0
      00012D 00                     462 	.db #0x00	; 0
      00012E 00                     463 	.db #0x00	; 0
      00012F 6C                     464 	.db #0x6c	; 108	'l'
      000130 6C                     465 	.db #0x6c	; 108	'l'
      000131 FE                     466 	.db #0xfe	; 254
      000132 6C                     467 	.db #0x6c	; 108	'l'
      000133 FE                     468 	.db #0xfe	; 254
      000134 6C                     469 	.db #0x6c	; 108	'l'
      000135 6C                     470 	.db #0x6c	; 108	'l'
      000136 00                     471 	.db #0x00	; 0
      000137 30                     472 	.db #0x30	; 48	'0'
      000138 7C                     473 	.db #0x7c	; 124
      000139 C0                     474 	.db #0xc0	; 192
      00013A 78                     475 	.db #0x78	; 120	'x'
      00013B 0C                     476 	.db #0x0c	; 12
      00013C F8                     477 	.db #0xf8	; 248
      00013D 30                     478 	.db #0x30	; 48	'0'
      00013E 00                     479 	.db #0x00	; 0
      00013F 00                     480 	.db #0x00	; 0
      000140 C6                     481 	.db #0xc6	; 198
      000141 CC                     482 	.db #0xcc	; 204
      000142 18                     483 	.db #0x18	; 24
      000143 30                     484 	.db #0x30	; 48	'0'
      000144 66                     485 	.db #0x66	; 102	'f'
      000145 C6                     486 	.db #0xc6	; 198
      000146 00                     487 	.db #0x00	; 0
      000147 38                     488 	.db #0x38	; 56	'8'
      000148 6C                     489 	.db #0x6c	; 108	'l'
      000149 38                     490 	.db #0x38	; 56	'8'
      00014A 76                     491 	.db #0x76	; 118	'v'
      00014B DC                     492 	.db #0xdc	; 220
      00014C CC                     493 	.db #0xcc	; 204
      00014D 76                     494 	.db #0x76	; 118	'v'
      00014E 00                     495 	.db #0x00	; 0
      00014F 60                     496 	.db #0x60	; 96
      000150 60                     497 	.db #0x60	; 96
      000151 C0                     498 	.db #0xc0	; 192
      000152 00                     499 	.db #0x00	; 0
      000153 00                     500 	.db #0x00	; 0
      000154 00                     501 	.db #0x00	; 0
      000155 00                     502 	.db #0x00	; 0
      000156 00                     503 	.db #0x00	; 0
      000157 18                     504 	.db #0x18	; 24
      000158 30                     505 	.db #0x30	; 48	'0'
      000159 60                     506 	.db #0x60	; 96
      00015A 60                     507 	.db #0x60	; 96
      00015B 60                     508 	.db #0x60	; 96
      00015C 30                     509 	.db #0x30	; 48	'0'
      00015D 18                     510 	.db #0x18	; 24
      00015E 00                     511 	.db #0x00	; 0
      00015F 60                     512 	.db #0x60	; 96
      000160 30                     513 	.db #0x30	; 48	'0'
      000161 18                     514 	.db #0x18	; 24
      000162 18                     515 	.db #0x18	; 24
      000163 18                     516 	.db #0x18	; 24
      000164 30                     517 	.db #0x30	; 48	'0'
      000165 60                     518 	.db #0x60	; 96
      000166 00                     519 	.db #0x00	; 0
      000167 00                     520 	.db #0x00	; 0
      000168 66                     521 	.db #0x66	; 102	'f'
      000169 3C                     522 	.db #0x3c	; 60
      00016A FF                     523 	.db #0xff	; 255
      00016B 3C                     524 	.db #0x3c	; 60
      00016C 66                     525 	.db #0x66	; 102	'f'
      00016D 00                     526 	.db #0x00	; 0
      00016E 00                     527 	.db #0x00	; 0
      00016F 00                     528 	.db #0x00	; 0
      000170 30                     529 	.db #0x30	; 48	'0'
      000171 30                     530 	.db #0x30	; 48	'0'
      000172 FC                     531 	.db #0xfc	; 252
      000173 30                     532 	.db #0x30	; 48	'0'
      000174 30                     533 	.db #0x30	; 48	'0'
      000175 00                     534 	.db #0x00	; 0
      000176 00                     535 	.db #0x00	; 0
      000177 00                     536 	.db #0x00	; 0
      000178 00                     537 	.db #0x00	; 0
      000179 00                     538 	.db #0x00	; 0
      00017A 00                     539 	.db #0x00	; 0
      00017B 00                     540 	.db #0x00	; 0
      00017C 30                     541 	.db #0x30	; 48	'0'
      00017D 30                     542 	.db #0x30	; 48	'0'
      00017E 60                     543 	.db #0x60	; 96
      00017F 00                     544 	.db #0x00	; 0
      000180 00                     545 	.db #0x00	; 0
      000181 00                     546 	.db #0x00	; 0
      000182 FC                     547 	.db #0xfc	; 252
      000183 00                     548 	.db #0x00	; 0
      000184 00                     549 	.db #0x00	; 0
      000185 00                     550 	.db #0x00	; 0
      000186 00                     551 	.db #0x00	; 0
      000187 00                     552 	.db #0x00	; 0
      000188 00                     553 	.db #0x00	; 0
      000189 00                     554 	.db #0x00	; 0
      00018A 00                     555 	.db #0x00	; 0
      00018B 00                     556 	.db #0x00	; 0
      00018C 30                     557 	.db #0x30	; 48	'0'
      00018D 30                     558 	.db #0x30	; 48	'0'
      00018E 00                     559 	.db #0x00	; 0
      00018F 06                     560 	.db #0x06	; 6
      000190 0C                     561 	.db #0x0c	; 12
      000191 18                     562 	.db #0x18	; 24
      000192 30                     563 	.db #0x30	; 48	'0'
      000193 60                     564 	.db #0x60	; 96
      000194 C0                     565 	.db #0xc0	; 192
      000195 80                     566 	.db #0x80	; 128
      000196 00                     567 	.db #0x00	; 0
      000197 7C                     568 	.db #0x7c	; 124
      000198 C6                     569 	.db #0xc6	; 198
      000199 CE                     570 	.db #0xce	; 206
      00019A DE                     571 	.db #0xde	; 222
      00019B F6                     572 	.db #0xf6	; 246
      00019C E6                     573 	.db #0xe6	; 230
      00019D 7C                     574 	.db #0x7c	; 124
      00019E 00                     575 	.db #0x00	; 0
      00019F 30                     576 	.db #0x30	; 48	'0'
      0001A0 70                     577 	.db #0x70	; 112	'p'
      0001A1 30                     578 	.db #0x30	; 48	'0'
      0001A2 30                     579 	.db #0x30	; 48	'0'
      0001A3 30                     580 	.db #0x30	; 48	'0'
      0001A4 30                     581 	.db #0x30	; 48	'0'
      0001A5 FC                     582 	.db #0xfc	; 252
      0001A6 00                     583 	.db #0x00	; 0
      0001A7 78                     584 	.db #0x78	; 120	'x'
      0001A8 CC                     585 	.db #0xcc	; 204
      0001A9 0C                     586 	.db #0x0c	; 12
      0001AA 38                     587 	.db #0x38	; 56	'8'
      0001AB 60                     588 	.db #0x60	; 96
      0001AC C4                     589 	.db #0xc4	; 196
      0001AD FC                     590 	.db #0xfc	; 252
      0001AE 00                     591 	.db #0x00	; 0
      0001AF 78                     592 	.db #0x78	; 120	'x'
      0001B0 CC                     593 	.db #0xcc	; 204
      0001B1 0C                     594 	.db #0x0c	; 12
      0001B2 38                     595 	.db #0x38	; 56	'8'
      0001B3 0C                     596 	.db #0x0c	; 12
      0001B4 CC                     597 	.db #0xcc	; 204
      0001B5 78                     598 	.db #0x78	; 120	'x'
      0001B6 00                     599 	.db #0x00	; 0
      0001B7 1C                     600 	.db #0x1c	; 28
      0001B8 3C                     601 	.db #0x3c	; 60
      0001B9 6C                     602 	.db #0x6c	; 108	'l'
      0001BA CC                     603 	.db #0xcc	; 204
      0001BB FE                     604 	.db #0xfe	; 254
      0001BC 0C                     605 	.db #0x0c	; 12
      0001BD 1E                     606 	.db #0x1e	; 30
      0001BE 00                     607 	.db #0x00	; 0
      0001BF FC                     608 	.db #0xfc	; 252
      0001C0 C0                     609 	.db #0xc0	; 192
      0001C1 F8                     610 	.db #0xf8	; 248
      0001C2 0C                     611 	.db #0x0c	; 12
      0001C3 0C                     612 	.db #0x0c	; 12
      0001C4 CC                     613 	.db #0xcc	; 204
      0001C5 78                     614 	.db #0x78	; 120	'x'
      0001C6 00                     615 	.db #0x00	; 0
      0001C7 38                     616 	.db #0x38	; 56	'8'
      0001C8 60                     617 	.db #0x60	; 96
      0001C9 C0                     618 	.db #0xc0	; 192
      0001CA F8                     619 	.db #0xf8	; 248
      0001CB CC                     620 	.db #0xcc	; 204
      0001CC CC                     621 	.db #0xcc	; 204
      0001CD 78                     622 	.db #0x78	; 120	'x'
      0001CE 00                     623 	.db #0x00	; 0
      0001CF FC                     624 	.db #0xfc	; 252
      0001D0 CC                     625 	.db #0xcc	; 204
      0001D1 0C                     626 	.db #0x0c	; 12
      0001D2 18                     627 	.db #0x18	; 24
      0001D3 30                     628 	.db #0x30	; 48	'0'
      0001D4 30                     629 	.db #0x30	; 48	'0'
      0001D5 30                     630 	.db #0x30	; 48	'0'
      0001D6 00                     631 	.db #0x00	; 0
      0001D7 78                     632 	.db #0x78	; 120	'x'
      0001D8 CC                     633 	.db #0xcc	; 204
      0001D9 CC                     634 	.db #0xcc	; 204
      0001DA 78                     635 	.db #0x78	; 120	'x'
      0001DB CC                     636 	.db #0xcc	; 204
      0001DC CC                     637 	.db #0xcc	; 204
      0001DD 78                     638 	.db #0x78	; 120	'x'
      0001DE 00                     639 	.db #0x00	; 0
      0001DF 78                     640 	.db #0x78	; 120	'x'
      0001E0 CC                     641 	.db #0xcc	; 204
      0001E1 CC                     642 	.db #0xcc	; 204
      0001E2 7C                     643 	.db #0x7c	; 124
      0001E3 0C                     644 	.db #0x0c	; 12
      0001E4 18                     645 	.db #0x18	; 24
      0001E5 70                     646 	.db #0x70	; 112	'p'
      0001E6 00                     647 	.db #0x00	; 0
      0001E7 00                     648 	.db #0x00	; 0
      0001E8 30                     649 	.db #0x30	; 48	'0'
      0001E9 30                     650 	.db #0x30	; 48	'0'
      0001EA 00                     651 	.db #0x00	; 0
      0001EB 00                     652 	.db #0x00	; 0
      0001EC 30                     653 	.db #0x30	; 48	'0'
      0001ED 30                     654 	.db #0x30	; 48	'0'
      0001EE 00                     655 	.db #0x00	; 0
      0001EF 00                     656 	.db #0x00	; 0
      0001F0 30                     657 	.db #0x30	; 48	'0'
      0001F1 30                     658 	.db #0x30	; 48	'0'
      0001F2 00                     659 	.db #0x00	; 0
      0001F3 30                     660 	.db #0x30	; 48	'0'
      0001F4 30                     661 	.db #0x30	; 48	'0'
      0001F5 60                     662 	.db #0x60	; 96
      0001F6 00                     663 	.db #0x00	; 0
      0001F7 18                     664 	.db #0x18	; 24
      0001F8 30                     665 	.db #0x30	; 48	'0'
      0001F9 60                     666 	.db #0x60	; 96
      0001FA C0                     667 	.db #0xc0	; 192
      0001FB 60                     668 	.db #0x60	; 96
      0001FC 30                     669 	.db #0x30	; 48	'0'
      0001FD 18                     670 	.db #0x18	; 24
      0001FE 00                     671 	.db #0x00	; 0
      0001FF 00                     672 	.db #0x00	; 0
      000200 00                     673 	.db #0x00	; 0
      000201 FC                     674 	.db #0xfc	; 252
      000202 00                     675 	.db #0x00	; 0
      000203 00                     676 	.db #0x00	; 0
      000204 FC                     677 	.db #0xfc	; 252
      000205 00                     678 	.db #0x00	; 0
      000206 00                     679 	.db #0x00	; 0
      000207 60                     680 	.db #0x60	; 96
      000208 30                     681 	.db #0x30	; 48	'0'
      000209 18                     682 	.db #0x18	; 24
      00020A 0C                     683 	.db #0x0c	; 12
      00020B 18                     684 	.db #0x18	; 24
      00020C 30                     685 	.db #0x30	; 48	'0'
      00020D 60                     686 	.db #0x60	; 96
      00020E 00                     687 	.db #0x00	; 0
      00020F 78                     688 	.db #0x78	; 120	'x'
      000210 CC                     689 	.db #0xcc	; 204
      000211 0C                     690 	.db #0x0c	; 12
      000212 18                     691 	.db #0x18	; 24
      000213 30                     692 	.db #0x30	; 48	'0'
      000214 00                     693 	.db #0x00	; 0
      000215 30                     694 	.db #0x30	; 48	'0'
      000216 00                     695 	.db #0x00	; 0
      000217 7C                     696 	.db #0x7c	; 124
      000218 C6                     697 	.db #0xc6	; 198
      000219 DE                     698 	.db #0xde	; 222
      00021A DE                     699 	.db #0xde	; 222
      00021B DE                     700 	.db #0xde	; 222
      00021C C0                     701 	.db #0xc0	; 192
      00021D 78                     702 	.db #0x78	; 120	'x'
      00021E 00                     703 	.db #0x00	; 0
      00021F 30                     704 	.db #0x30	; 48	'0'
      000220 78                     705 	.db #0x78	; 120	'x'
      000221 CC                     706 	.db #0xcc	; 204
      000222 CC                     707 	.db #0xcc	; 204
      000223 FC                     708 	.db #0xfc	; 252
      000224 CC                     709 	.db #0xcc	; 204
      000225 CC                     710 	.db #0xcc	; 204
      000226 00                     711 	.db #0x00	; 0
      000227 FC                     712 	.db #0xfc	; 252
      000228 66                     713 	.db #0x66	; 102	'f'
      000229 66                     714 	.db #0x66	; 102	'f'
      00022A 7C                     715 	.db #0x7c	; 124
      00022B 66                     716 	.db #0x66	; 102	'f'
      00022C 66                     717 	.db #0x66	; 102	'f'
      00022D FC                     718 	.db #0xfc	; 252
      00022E 00                     719 	.db #0x00	; 0
      00022F 3C                     720 	.db #0x3c	; 60
      000230 66                     721 	.db #0x66	; 102	'f'
      000231 C0                     722 	.db #0xc0	; 192
      000232 C0                     723 	.db #0xc0	; 192
      000233 C0                     724 	.db #0xc0	; 192
      000234 66                     725 	.db #0x66	; 102	'f'
      000235 3C                     726 	.db #0x3c	; 60
      000236 00                     727 	.db #0x00	; 0
      000237 F8                     728 	.db #0xf8	; 248
      000238 6C                     729 	.db #0x6c	; 108	'l'
      000239 66                     730 	.db #0x66	; 102	'f'
      00023A 66                     731 	.db #0x66	; 102	'f'
      00023B 66                     732 	.db #0x66	; 102	'f'
      00023C 6C                     733 	.db #0x6c	; 108	'l'
      00023D F8                     734 	.db #0xf8	; 248
      00023E 00                     735 	.db #0x00	; 0
      00023F FE                     736 	.db #0xfe	; 254
      000240 62                     737 	.db #0x62	; 98	'b'
      000241 68                     738 	.db #0x68	; 104	'h'
      000242 78                     739 	.db #0x78	; 120	'x'
      000243 68                     740 	.db #0x68	; 104	'h'
      000244 62                     741 	.db #0x62	; 98	'b'
      000245 FE                     742 	.db #0xfe	; 254
      000246 00                     743 	.db #0x00	; 0
      000247 FE                     744 	.db #0xfe	; 254
      000248 62                     745 	.db #0x62	; 98	'b'
      000249 68                     746 	.db #0x68	; 104	'h'
      00024A 78                     747 	.db #0x78	; 120	'x'
      00024B 68                     748 	.db #0x68	; 104	'h'
      00024C 60                     749 	.db #0x60	; 96
      00024D F0                     750 	.db #0xf0	; 240
      00024E 00                     751 	.db #0x00	; 0
      00024F 3C                     752 	.db #0x3c	; 60
      000250 66                     753 	.db #0x66	; 102	'f'
      000251 C0                     754 	.db #0xc0	; 192
      000252 C0                     755 	.db #0xc0	; 192
      000253 CE                     756 	.db #0xce	; 206
      000254 66                     757 	.db #0x66	; 102	'f'
      000255 3E                     758 	.db #0x3e	; 62
      000256 00                     759 	.db #0x00	; 0
      000257 CC                     760 	.db #0xcc	; 204
      000258 CC                     761 	.db #0xcc	; 204
      000259 CC                     762 	.db #0xcc	; 204
      00025A FC                     763 	.db #0xfc	; 252
      00025B CC                     764 	.db #0xcc	; 204
      00025C CC                     765 	.db #0xcc	; 204
      00025D CC                     766 	.db #0xcc	; 204
      00025E 00                     767 	.db #0x00	; 0
      00025F 78                     768 	.db #0x78	; 120	'x'
      000260 30                     769 	.db #0x30	; 48	'0'
      000261 30                     770 	.db #0x30	; 48	'0'
      000262 30                     771 	.db #0x30	; 48	'0'
      000263 30                     772 	.db #0x30	; 48	'0'
      000264 30                     773 	.db #0x30	; 48	'0'
      000265 78                     774 	.db #0x78	; 120	'x'
      000266 00                     775 	.db #0x00	; 0
      000267 1E                     776 	.db #0x1e	; 30
      000268 0C                     777 	.db #0x0c	; 12
      000269 0C                     778 	.db #0x0c	; 12
      00026A 0C                     779 	.db #0x0c	; 12
      00026B CC                     780 	.db #0xcc	; 204
      00026C CC                     781 	.db #0xcc	; 204
      00026D 78                     782 	.db #0x78	; 120	'x'
      00026E 00                     783 	.db #0x00	; 0
      00026F E6                     784 	.db #0xe6	; 230
      000270 66                     785 	.db #0x66	; 102	'f'
      000271 6C                     786 	.db #0x6c	; 108	'l'
      000272 78                     787 	.db #0x78	; 120	'x'
      000273 6C                     788 	.db #0x6c	; 108	'l'
      000274 66                     789 	.db #0x66	; 102	'f'
      000275 E6                     790 	.db #0xe6	; 230
      000276 00                     791 	.db #0x00	; 0
      000277 F0                     792 	.db #0xf0	; 240
      000278 60                     793 	.db #0x60	; 96
      000279 60                     794 	.db #0x60	; 96
      00027A 60                     795 	.db #0x60	; 96
      00027B 62                     796 	.db #0x62	; 98	'b'
      00027C 66                     797 	.db #0x66	; 102	'f'
      00027D FE                     798 	.db #0xfe	; 254
      00027E 00                     799 	.db #0x00	; 0
      00027F C6                     800 	.db #0xc6	; 198
      000280 EE                     801 	.db #0xee	; 238
      000281 FE                     802 	.db #0xfe	; 254
      000282 FE                     803 	.db #0xfe	; 254
      000283 D6                     804 	.db #0xd6	; 214
      000284 C6                     805 	.db #0xc6	; 198
      000285 C6                     806 	.db #0xc6	; 198
      000286 00                     807 	.db #0x00	; 0
      000287 C6                     808 	.db #0xc6	; 198
      000288 E6                     809 	.db #0xe6	; 230
      000289 F6                     810 	.db #0xf6	; 246
      00028A DE                     811 	.db #0xde	; 222
      00028B CE                     812 	.db #0xce	; 206
      00028C C6                     813 	.db #0xc6	; 198
      00028D C6                     814 	.db #0xc6	; 198
      00028E 00                     815 	.db #0x00	; 0
      00028F 38                     816 	.db #0x38	; 56	'8'
      000290 6C                     817 	.db #0x6c	; 108	'l'
      000291 C6                     818 	.db #0xc6	; 198
      000292 C6                     819 	.db #0xc6	; 198
      000293 C6                     820 	.db #0xc6	; 198
      000294 6C                     821 	.db #0x6c	; 108	'l'
      000295 38                     822 	.db #0x38	; 56	'8'
      000296 00                     823 	.db #0x00	; 0
      000297 FC                     824 	.db #0xfc	; 252
      000298 66                     825 	.db #0x66	; 102	'f'
      000299 66                     826 	.db #0x66	; 102	'f'
      00029A 7C                     827 	.db #0x7c	; 124
      00029B 60                     828 	.db #0x60	; 96
      00029C 60                     829 	.db #0x60	; 96
      00029D F0                     830 	.db #0xf0	; 240
      00029E 00                     831 	.db #0x00	; 0
      00029F 78                     832 	.db #0x78	; 120	'x'
      0002A0 CC                     833 	.db #0xcc	; 204
      0002A1 CC                     834 	.db #0xcc	; 204
      0002A2 CC                     835 	.db #0xcc	; 204
      0002A3 DC                     836 	.db #0xdc	; 220
      0002A4 78                     837 	.db #0x78	; 120	'x'
      0002A5 1C                     838 	.db #0x1c	; 28
      0002A6 00                     839 	.db #0x00	; 0
      0002A7 FC                     840 	.db #0xfc	; 252
      0002A8 66                     841 	.db #0x66	; 102	'f'
      0002A9 66                     842 	.db #0x66	; 102	'f'
      0002AA 7C                     843 	.db #0x7c	; 124
      0002AB 6C                     844 	.db #0x6c	; 108	'l'
      0002AC 66                     845 	.db #0x66	; 102	'f'
      0002AD E6                     846 	.db #0xe6	; 230
      0002AE 00                     847 	.db #0x00	; 0
      0002AF 78                     848 	.db #0x78	; 120	'x'
      0002B0 CC                     849 	.db #0xcc	; 204
      0002B1 E0                     850 	.db #0xe0	; 224
      0002B2 70                     851 	.db #0x70	; 112	'p'
      0002B3 1C                     852 	.db #0x1c	; 28
      0002B4 CC                     853 	.db #0xcc	; 204
      0002B5 78                     854 	.db #0x78	; 120	'x'
      0002B6 00                     855 	.db #0x00	; 0
      0002B7 FC                     856 	.db #0xfc	; 252
      0002B8 B4                     857 	.db #0xb4	; 180
      0002B9 30                     858 	.db #0x30	; 48	'0'
      0002BA 30                     859 	.db #0x30	; 48	'0'
      0002BB 30                     860 	.db #0x30	; 48	'0'
      0002BC 30                     861 	.db #0x30	; 48	'0'
      0002BD 78                     862 	.db #0x78	; 120	'x'
      0002BE 00                     863 	.db #0x00	; 0
      0002BF CC                     864 	.db #0xcc	; 204
      0002C0 CC                     865 	.db #0xcc	; 204
      0002C1 CC                     866 	.db #0xcc	; 204
      0002C2 CC                     867 	.db #0xcc	; 204
      0002C3 CC                     868 	.db #0xcc	; 204
      0002C4 CC                     869 	.db #0xcc	; 204
      0002C5 FC                     870 	.db #0xfc	; 252
      0002C6 00                     871 	.db #0x00	; 0
      0002C7 CC                     872 	.db #0xcc	; 204
      0002C8 CC                     873 	.db #0xcc	; 204
      0002C9 CC                     874 	.db #0xcc	; 204
      0002CA CC                     875 	.db #0xcc	; 204
      0002CB CC                     876 	.db #0xcc	; 204
      0002CC 78                     877 	.db #0x78	; 120	'x'
      0002CD 30                     878 	.db #0x30	; 48	'0'
      0002CE 00                     879 	.db #0x00	; 0
      0002CF C6                     880 	.db #0xc6	; 198
      0002D0 C6                     881 	.db #0xc6	; 198
      0002D1 C6                     882 	.db #0xc6	; 198
      0002D2 D6                     883 	.db #0xd6	; 214
      0002D3 FE                     884 	.db #0xfe	; 254
      0002D4 EE                     885 	.db #0xee	; 238
      0002D5 C6                     886 	.db #0xc6	; 198
      0002D6 00                     887 	.db #0x00	; 0
      0002D7 C6                     888 	.db #0xc6	; 198
      0002D8 C6                     889 	.db #0xc6	; 198
      0002D9 6C                     890 	.db #0x6c	; 108	'l'
      0002DA 38                     891 	.db #0x38	; 56	'8'
      0002DB 38                     892 	.db #0x38	; 56	'8'
      0002DC 6C                     893 	.db #0x6c	; 108	'l'
      0002DD C6                     894 	.db #0xc6	; 198
      0002DE 00                     895 	.db #0x00	; 0
      0002DF CC                     896 	.db #0xcc	; 204
      0002E0 CC                     897 	.db #0xcc	; 204
      0002E1 CC                     898 	.db #0xcc	; 204
      0002E2 78                     899 	.db #0x78	; 120	'x'
      0002E3 30                     900 	.db #0x30	; 48	'0'
      0002E4 30                     901 	.db #0x30	; 48	'0'
      0002E5 78                     902 	.db #0x78	; 120	'x'
      0002E6 00                     903 	.db #0x00	; 0
      0002E7 FE                     904 	.db #0xfe	; 254
      0002E8 C6                     905 	.db #0xc6	; 198
      0002E9 8C                     906 	.db #0x8c	; 140
      0002EA 18                     907 	.db #0x18	; 24
      0002EB 32                     908 	.db #0x32	; 50	'2'
      0002EC 66                     909 	.db #0x66	; 102	'f'
      0002ED FE                     910 	.db #0xfe	; 254
      0002EE 00                     911 	.db #0x00	; 0
      0002EF 78                     912 	.db #0x78	; 120	'x'
      0002F0 60                     913 	.db #0x60	; 96
      0002F1 60                     914 	.db #0x60	; 96
      0002F2 60                     915 	.db #0x60	; 96
      0002F3 60                     916 	.db #0x60	; 96
      0002F4 60                     917 	.db #0x60	; 96
      0002F5 78                     918 	.db #0x78	; 120	'x'
      0002F6 00                     919 	.db #0x00	; 0
      0002F7 C0                     920 	.db #0xc0	; 192
      0002F8 60                     921 	.db #0x60	; 96
      0002F9 30                     922 	.db #0x30	; 48	'0'
      0002FA 18                     923 	.db #0x18	; 24
      0002FB 0C                     924 	.db #0x0c	; 12
      0002FC 06                     925 	.db #0x06	; 6
      0002FD 02                     926 	.db #0x02	; 2
      0002FE 00                     927 	.db #0x00	; 0
      0002FF 78                     928 	.db #0x78	; 120	'x'
      000300 18                     929 	.db #0x18	; 24
      000301 18                     930 	.db #0x18	; 24
      000302 18                     931 	.db #0x18	; 24
      000303 18                     932 	.db #0x18	; 24
      000304 18                     933 	.db #0x18	; 24
      000305 78                     934 	.db #0x78	; 120	'x'
      000306 00                     935 	.db #0x00	; 0
      000307 10                     936 	.db #0x10	; 16
      000308 38                     937 	.db #0x38	; 56	'8'
      000309 6C                     938 	.db #0x6c	; 108	'l'
      00030A C6                     939 	.db #0xc6	; 198
      00030B 00                     940 	.db #0x00	; 0
      00030C 00                     941 	.db #0x00	; 0
      00030D 00                     942 	.db #0x00	; 0
      00030E 00                     943 	.db #0x00	; 0
      00030F 00                     944 	.db #0x00	; 0
      000310 00                     945 	.db #0x00	; 0
      000311 00                     946 	.db #0x00	; 0
      000312 00                     947 	.db #0x00	; 0
      000313 00                     948 	.db #0x00	; 0
      000314 00                     949 	.db #0x00	; 0
      000315 00                     950 	.db #0x00	; 0
      000316 FF                     951 	.db #0xff	; 255
      000317 30                     952 	.db #0x30	; 48	'0'
      000318 30                     953 	.db #0x30	; 48	'0'
      000319 18                     954 	.db #0x18	; 24
      00031A 00                     955 	.db #0x00	; 0
      00031B 00                     956 	.db #0x00	; 0
      00031C 00                     957 	.db #0x00	; 0
      00031D 00                     958 	.db #0x00	; 0
      00031E 00                     959 	.db #0x00	; 0
      00031F 00                     960 	.db #0x00	; 0
      000320 00                     961 	.db #0x00	; 0
      000321 78                     962 	.db #0x78	; 120	'x'
      000322 0C                     963 	.db #0x0c	; 12
      000323 7C                     964 	.db #0x7c	; 124
      000324 CC                     965 	.db #0xcc	; 204
      000325 76                     966 	.db #0x76	; 118	'v'
      000326 00                     967 	.db #0x00	; 0
      000327 E0                     968 	.db #0xe0	; 224
      000328 60                     969 	.db #0x60	; 96
      000329 60                     970 	.db #0x60	; 96
      00032A 7C                     971 	.db #0x7c	; 124
      00032B 66                     972 	.db #0x66	; 102	'f'
      00032C 66                     973 	.db #0x66	; 102	'f'
      00032D DC                     974 	.db #0xdc	; 220
      00032E 00                     975 	.db #0x00	; 0
      00032F 00                     976 	.db #0x00	; 0
      000330 00                     977 	.db #0x00	; 0
      000331 78                     978 	.db #0x78	; 120	'x'
      000332 CC                     979 	.db #0xcc	; 204
      000333 C0                     980 	.db #0xc0	; 192
      000334 CC                     981 	.db #0xcc	; 204
      000335 78                     982 	.db #0x78	; 120	'x'
      000336 00                     983 	.db #0x00	; 0
      000337 1C                     984 	.db #0x1c	; 28
      000338 0C                     985 	.db #0x0c	; 12
      000339 0C                     986 	.db #0x0c	; 12
      00033A 7C                     987 	.db #0x7c	; 124
      00033B CC                     988 	.db #0xcc	; 204
      00033C CC                     989 	.db #0xcc	; 204
      00033D 76                     990 	.db #0x76	; 118	'v'
      00033E 00                     991 	.db #0x00	; 0
      00033F 00                     992 	.db #0x00	; 0
      000340 00                     993 	.db #0x00	; 0
      000341 78                     994 	.db #0x78	; 120	'x'
      000342 CC                     995 	.db #0xcc	; 204
      000343 FC                     996 	.db #0xfc	; 252
      000344 C0                     997 	.db #0xc0	; 192
      000345 78                     998 	.db #0x78	; 120	'x'
      000346 00                     999 	.db #0x00	; 0
      000347 38                    1000 	.db #0x38	; 56	'8'
      000348 6C                    1001 	.db #0x6c	; 108	'l'
      000349 60                    1002 	.db #0x60	; 96
      00034A F0                    1003 	.db #0xf0	; 240
      00034B 60                    1004 	.db #0x60	; 96
      00034C 60                    1005 	.db #0x60	; 96
      00034D F0                    1006 	.db #0xf0	; 240
      00034E 00                    1007 	.db #0x00	; 0
      00034F 00                    1008 	.db #0x00	; 0
      000350 00                    1009 	.db #0x00	; 0
      000351 76                    1010 	.db #0x76	; 118	'v'
      000352 CC                    1011 	.db #0xcc	; 204
      000353 CC                    1012 	.db #0xcc	; 204
      000354 7C                    1013 	.db #0x7c	; 124
      000355 0C                    1014 	.db #0x0c	; 12
      000356 F8                    1015 	.db #0xf8	; 248
      000357 E0                    1016 	.db #0xe0	; 224
      000358 60                    1017 	.db #0x60	; 96
      000359 6C                    1018 	.db #0x6c	; 108	'l'
      00035A 76                    1019 	.db #0x76	; 118	'v'
      00035B 66                    1020 	.db #0x66	; 102	'f'
      00035C 66                    1021 	.db #0x66	; 102	'f'
      00035D E6                    1022 	.db #0xe6	; 230
      00035E 00                    1023 	.db #0x00	; 0
      00035F 30                    1024 	.db #0x30	; 48	'0'
      000360 00                    1025 	.db #0x00	; 0
      000361 70                    1026 	.db #0x70	; 112	'p'
      000362 30                    1027 	.db #0x30	; 48	'0'
      000363 30                    1028 	.db #0x30	; 48	'0'
      000364 30                    1029 	.db #0x30	; 48	'0'
      000365 78                    1030 	.db #0x78	; 120	'x'
      000366 00                    1031 	.db #0x00	; 0
      000367 0C                    1032 	.db #0x0c	; 12
      000368 00                    1033 	.db #0x00	; 0
      000369 0C                    1034 	.db #0x0c	; 12
      00036A 0C                    1035 	.db #0x0c	; 12
      00036B 0C                    1036 	.db #0x0c	; 12
      00036C CC                    1037 	.db #0xcc	; 204
      00036D CC                    1038 	.db #0xcc	; 204
      00036E 78                    1039 	.db #0x78	; 120	'x'
      00036F E0                    1040 	.db #0xe0	; 224
      000370 60                    1041 	.db #0x60	; 96
      000371 66                    1042 	.db #0x66	; 102	'f'
      000372 6C                    1043 	.db #0x6c	; 108	'l'
      000373 78                    1044 	.db #0x78	; 120	'x'
      000374 6C                    1045 	.db #0x6c	; 108	'l'
      000375 E6                    1046 	.db #0xe6	; 230
      000376 00                    1047 	.db #0x00	; 0
      000377 70                    1048 	.db #0x70	; 112	'p'
      000378 30                    1049 	.db #0x30	; 48	'0'
      000379 30                    1050 	.db #0x30	; 48	'0'
      00037A 30                    1051 	.db #0x30	; 48	'0'
      00037B 30                    1052 	.db #0x30	; 48	'0'
      00037C 30                    1053 	.db #0x30	; 48	'0'
      00037D 78                    1054 	.db #0x78	; 120	'x'
      00037E 00                    1055 	.db #0x00	; 0
      00037F 00                    1056 	.db #0x00	; 0
      000380 00                    1057 	.db #0x00	; 0
      000381 CC                    1058 	.db #0xcc	; 204
      000382 FE                    1059 	.db #0xfe	; 254
      000383 FE                    1060 	.db #0xfe	; 254
      000384 D6                    1061 	.db #0xd6	; 214
      000385 C6                    1062 	.db #0xc6	; 198
      000386 00                    1063 	.db #0x00	; 0
      000387 00                    1064 	.db #0x00	; 0
      000388 00                    1065 	.db #0x00	; 0
      000389 F8                    1066 	.db #0xf8	; 248
      00038A CC                    1067 	.db #0xcc	; 204
      00038B CC                    1068 	.db #0xcc	; 204
      00038C CC                    1069 	.db #0xcc	; 204
      00038D CC                    1070 	.db #0xcc	; 204
      00038E 00                    1071 	.db #0x00	; 0
      00038F 00                    1072 	.db #0x00	; 0
      000390 00                    1073 	.db #0x00	; 0
      000391 78                    1074 	.db #0x78	; 120	'x'
      000392 CC                    1075 	.db #0xcc	; 204
      000393 CC                    1076 	.db #0xcc	; 204
      000394 CC                    1077 	.db #0xcc	; 204
      000395 78                    1078 	.db #0x78	; 120	'x'
      000396 00                    1079 	.db #0x00	; 0
      000397 00                    1080 	.db #0x00	; 0
      000398 00                    1081 	.db #0x00	; 0
      000399 DC                    1082 	.db #0xdc	; 220
      00039A 66                    1083 	.db #0x66	; 102	'f'
      00039B 66                    1084 	.db #0x66	; 102	'f'
      00039C 7C                    1085 	.db #0x7c	; 124
      00039D 60                    1086 	.db #0x60	; 96
      00039E F0                    1087 	.db #0xf0	; 240
      00039F 00                    1088 	.db #0x00	; 0
      0003A0 00                    1089 	.db #0x00	; 0
      0003A1 76                    1090 	.db #0x76	; 118	'v'
      0003A2 CC                    1091 	.db #0xcc	; 204
      0003A3 CC                    1092 	.db #0xcc	; 204
      0003A4 7C                    1093 	.db #0x7c	; 124
      0003A5 0C                    1094 	.db #0x0c	; 12
      0003A6 1E                    1095 	.db #0x1e	; 30
      0003A7 00                    1096 	.db #0x00	; 0
      0003A8 00                    1097 	.db #0x00	; 0
      0003A9 DC                    1098 	.db #0xdc	; 220
      0003AA 76                    1099 	.db #0x76	; 118	'v'
      0003AB 66                    1100 	.db #0x66	; 102	'f'
      0003AC 60                    1101 	.db #0x60	; 96
      0003AD F0                    1102 	.db #0xf0	; 240
      0003AE 00                    1103 	.db #0x00	; 0
      0003AF 00                    1104 	.db #0x00	; 0
      0003B0 00                    1105 	.db #0x00	; 0
      0003B1 7C                    1106 	.db #0x7c	; 124
      0003B2 C0                    1107 	.db #0xc0	; 192
      0003B3 78                    1108 	.db #0x78	; 120	'x'
      0003B4 0C                    1109 	.db #0x0c	; 12
      0003B5 F8                    1110 	.db #0xf8	; 248
      0003B6 00                    1111 	.db #0x00	; 0
      0003B7 10                    1112 	.db #0x10	; 16
      0003B8 30                    1113 	.db #0x30	; 48	'0'
      0003B9 7C                    1114 	.db #0x7c	; 124
      0003BA 30                    1115 	.db #0x30	; 48	'0'
      0003BB 30                    1116 	.db #0x30	; 48	'0'
      0003BC 34                    1117 	.db #0x34	; 52	'4'
      0003BD 18                    1118 	.db #0x18	; 24
      0003BE 00                    1119 	.db #0x00	; 0
      0003BF 00                    1120 	.db #0x00	; 0
      0003C0 00                    1121 	.db #0x00	; 0
      0003C1 CC                    1122 	.db #0xcc	; 204
      0003C2 CC                    1123 	.db #0xcc	; 204
      0003C3 CC                    1124 	.db #0xcc	; 204
      0003C4 CC                    1125 	.db #0xcc	; 204
      0003C5 76                    1126 	.db #0x76	; 118	'v'
      0003C6 00                    1127 	.db #0x00	; 0
      0003C7 00                    1128 	.db #0x00	; 0
      0003C8 00                    1129 	.db #0x00	; 0
      0003C9 CC                    1130 	.db #0xcc	; 204
      0003CA CC                    1131 	.db #0xcc	; 204
      0003CB CC                    1132 	.db #0xcc	; 204
      0003CC 78                    1133 	.db #0x78	; 120	'x'
      0003CD 30                    1134 	.db #0x30	; 48	'0'
      0003CE 00                    1135 	.db #0x00	; 0
      0003CF 00                    1136 	.db #0x00	; 0
      0003D0 00                    1137 	.db #0x00	; 0
      0003D1 C6                    1138 	.db #0xc6	; 198
      0003D2 D6                    1139 	.db #0xd6	; 214
      0003D3 FE                    1140 	.db #0xfe	; 254
      0003D4 FE                    1141 	.db #0xfe	; 254
      0003D5 6C                    1142 	.db #0x6c	; 108	'l'
      0003D6 00                    1143 	.db #0x00	; 0
      0003D7 00                    1144 	.db #0x00	; 0
      0003D8 00                    1145 	.db #0x00	; 0
      0003D9 C6                    1146 	.db #0xc6	; 198
      0003DA 6C                    1147 	.db #0x6c	; 108	'l'
      0003DB 38                    1148 	.db #0x38	; 56	'8'
      0003DC 6C                    1149 	.db #0x6c	; 108	'l'
      0003DD C6                    1150 	.db #0xc6	; 198
      0003DE 00                    1151 	.db #0x00	; 0
      0003DF 00                    1152 	.db #0x00	; 0
      0003E0 00                    1153 	.db #0x00	; 0
      0003E1 CC                    1154 	.db #0xcc	; 204
      0003E2 CC                    1155 	.db #0xcc	; 204
      0003E3 CC                    1156 	.db #0xcc	; 204
      0003E4 7C                    1157 	.db #0x7c	; 124
      0003E5 0C                    1158 	.db #0x0c	; 12
      0003E6 F8                    1159 	.db #0xf8	; 248
      0003E7 00                    1160 	.db #0x00	; 0
      0003E8 00                    1161 	.db #0x00	; 0
      0003E9 FC                    1162 	.db #0xfc	; 252
      0003EA 98                    1163 	.db #0x98	; 152
      0003EB 30                    1164 	.db #0x30	; 48	'0'
      0003EC 64                    1165 	.db #0x64	; 100	'd'
      0003ED FC                    1166 	.db #0xfc	; 252
      0003EE 00                    1167 	.db #0x00	; 0
      0003EF 1C                    1168 	.db #0x1c	; 28
      0003F0 30                    1169 	.db #0x30	; 48	'0'
      0003F1 30                    1170 	.db #0x30	; 48	'0'
      0003F2 E0                    1171 	.db #0xe0	; 224
      0003F3 30                    1172 	.db #0x30	; 48	'0'
      0003F4 30                    1173 	.db #0x30	; 48	'0'
      0003F5 1C                    1174 	.db #0x1c	; 28
      0003F6 00                    1175 	.db #0x00	; 0
      0003F7 18                    1176 	.db #0x18	; 24
      0003F8 18                    1177 	.db #0x18	; 24
      0003F9 18                    1178 	.db #0x18	; 24
      0003FA 00                    1179 	.db #0x00	; 0
      0003FB 18                    1180 	.db #0x18	; 24
      0003FC 18                    1181 	.db #0x18	; 24
      0003FD 18                    1182 	.db #0x18	; 24
      0003FE 00                    1183 	.db #0x00	; 0
      0003FF E0                    1184 	.db #0xe0	; 224
      000400 30                    1185 	.db #0x30	; 48	'0'
      000401 30                    1186 	.db #0x30	; 48	'0'
      000402 1C                    1187 	.db #0x1c	; 28
      000403 30                    1188 	.db #0x30	; 48	'0'
      000404 30                    1189 	.db #0x30	; 48	'0'
      000405 E0                    1190 	.db #0xe0	; 224
      000406 00                    1191 	.db #0x00	; 0
      000407 76                    1192 	.db #0x76	; 118	'v'
      000408 DC                    1193 	.db #0xdc	; 220
      000409 00                    1194 	.db #0x00	; 0
      00040A 00                    1195 	.db #0x00	; 0
      00040B 00                    1196 	.db #0x00	; 0
      00040C 00                    1197 	.db #0x00	; 0
      00040D 00                    1198 	.db #0x00	; 0
      00040E 00                    1199 	.db #0x00	; 0
      00040F 00                    1200 	.db #0x00	; 0
      000410 10                    1201 	.db #0x10	; 16
      000411 38                    1202 	.db #0x38	; 56	'8'
      000412 6C                    1203 	.db #0x6c	; 108	'l'
      000413 C6                    1204 	.db #0xc6	; 198
      000414 C6                    1205 	.db #0xc6	; 198
      000415 FE                    1206 	.db #0xfe	; 254
      000416 00                    1207 	.db #0x00	; 0
      000417                       1208 _pattern_black_0:
      000417 FF                    1209 	.db #0xff	; 255
      000418 FF                    1210 	.db #0xff	; 255
      000419 FF                    1211 	.db #0xff	; 255
      00041A FF                    1212 	.db #0xff	; 255
      00041B FF                    1213 	.db #0xff	; 255
      00041C FF                    1214 	.db #0xff	; 255
      00041D FF                    1215 	.db #0xff	; 255
      00041E FF                    1216 	.db #0xff	; 255
      00041F                       1217 _pattern_black_1:
      00041F FE                    1218 	.db #0xfe	; 254
      000420 FF                    1219 	.db #0xff	; 255
      000421 FF                    1220 	.db #0xff	; 255
      000422 FF                    1221 	.db #0xff	; 255
      000423 FE                    1222 	.db #0xfe	; 254
      000424 FF                    1223 	.db #0xff	; 255
      000425 FF                    1224 	.db #0xff	; 255
      000426 FE                    1225 	.db #0xfe	; 254
      000427                       1226 _pattern_black_2:
      000427 FF                    1227 	.db #0xff	; 255
      000428 FF                    1228 	.db #0xff	; 255
      000429 FF                    1229 	.db #0xff	; 255
      00042A FF                    1230 	.db #0xff	; 255
      00042B FF                    1231 	.db #0xff	; 255
      00042C FB                    1232 	.db #0xfb	; 251
      00042D FF                    1233 	.db #0xff	; 255
      00042E BB                    1234 	.db #0xbb	; 187
      00042F                       1235 _pattern_black_3:
      00042F FB                    1236 	.db #0xfb	; 251
      000430 FE                    1237 	.db #0xfe	; 254
      000431 FD                    1238 	.db #0xfd	; 253
      000432 FE                    1239 	.db #0xfe	; 254
      000433 F7                    1240 	.db #0xf7	; 247
      000434 FA                    1241 	.db #0xfa	; 250
      000435 AF                    1242 	.db #0xaf	; 175
      000436 55                    1243 	.db #0x55	; 85	'U'
      000437                       1244 _pattern_0:
      000437 9F                    1245 	.db #0x9f	; 159
      000438 90                    1246 	.db #0x90	; 144
      000439 90                    1247 	.db #0x90	; 144
      00043A 93                    1248 	.db #0x93	; 147
      00043B 92                    1249 	.db #0x92	; 146
      00043C 92                    1250 	.db #0x92	; 146
      00043D 92                    1251 	.db #0x92	; 146
      00043E 92                    1252 	.db #0x92	; 146
      00043F                       1253 _pattern_1:
      00043F FF                    1254 	.db #0xff	; 255
      000440 01                    1255 	.db #0x01	; 1
      000441 01                    1256 	.db #0x01	; 1
      000442 F9                    1257 	.db #0xf9	; 249
      000443 09                    1258 	.db #0x09	; 9
      000444 09                    1259 	.db #0x09	; 9
      000445 49                    1260 	.db #0x49	; 73	'I'
      000446 49                    1261 	.db #0x49	; 73	'I'
      000447                       1262 _pattern_2:
      000447 92                    1263 	.db #0x92	; 146
      000448 93                    1264 	.db #0x93	; 147
      000449 90                    1265 	.db #0x90	; 144
      00044A 90                    1266 	.db #0x90	; 144
      00044B 9F                    1267 	.db #0x9f	; 159
      00044C 80                    1268 	.db #0x80	; 128
      00044D 80                    1269 	.db #0x80	; 128
      00044E FF                    1270 	.db #0xff	; 255
      00044F                       1271 _pattern_3:
      00044F 49                    1272 	.db #0x49	; 73	'I'
      000450 C9                    1273 	.db #0xc9	; 201
      000451 09                    1274 	.db #0x09	; 9
      000452 09                    1275 	.db #0x09	; 9
      000453 F9                    1276 	.db #0xf9	; 249
      000454 01                    1277 	.db #0x01	; 1
      000455 01                    1278 	.db #0x01	; 1
      000456 FF                    1279 	.db #0xff	; 255
      000457                       1280 _pattern_4:
      000457 7F                    1281 	.db #0x7f	; 127
      000458 81                    1282 	.db #0x81	; 129
      000459 83                    1283 	.db #0x83	; 131
      00045A 87                    1284 	.db #0x87	; 135
      00045B 8F                    1285 	.db #0x8f	; 143
      00045C 9F                    1286 	.db #0x9f	; 159
      00045D BF                    1287 	.db #0xbf	; 191
      00045E FF                    1288 	.db #0xff	; 255
      00045F                       1289 _pattern_5:
      00045F FE                    1290 	.db #0xfe	; 254
      000460 81                    1291 	.db #0x81	; 129
      000461 C1                    1292 	.db #0xc1	; 193
      000462 E1                    1293 	.db #0xe1	; 225
      000463 F1                    1294 	.db #0xf1	; 241
      000464 F9                    1295 	.db #0xf9	; 249
      000465 FD                    1296 	.db #0xfd	; 253
      000466 FF                    1297 	.db #0xff	; 255
      000467                       1298 _pattern_6:
      000467 FF                    1299 	.db #0xff	; 255
      000468 BF                    1300 	.db #0xbf	; 191
      000469 9F                    1301 	.db #0x9f	; 159
      00046A 8F                    1302 	.db #0x8f	; 143
      00046B 87                    1303 	.db #0x87	; 135
      00046C 83                    1304 	.db #0x83	; 131
      00046D 81                    1305 	.db #0x81	; 129
      00046E 7F                    1306 	.db #0x7f	; 127
      00046F                       1307 _pattern_7:
      00046F FF                    1308 	.db #0xff	; 255
      000470 FD                    1309 	.db #0xfd	; 253
      000471 F9                    1310 	.db #0xf9	; 249
      000472 F1                    1311 	.db #0xf1	; 241
      000473 E1                    1312 	.db #0xe1	; 225
      000474 C1                    1313 	.db #0xc1	; 193
      000475 81                    1314 	.db #0x81	; 129
      000476 FE                    1315 	.db #0xfe	; 254
      000477                       1316 _pattern_8:
      000477 7F                    1317 	.db #0x7f	; 127
      000478 AE                    1318 	.db #0xae	; 174
      000479 FF                    1319 	.db #0xff	; 255
      00047A 5B                    1320 	.db #0x5b	; 91
      00047B FF                    1321 	.db #0xff	; 255
      00047C AE                    1322 	.db #0xae	; 174
      00047D FF                    1323 	.db #0xff	; 255
      00047E DF                    1324 	.db #0xdf	; 223
      00047F                       1325 _pattern_9:
      00047F FE                    1326 	.db #0xfe	; 254
      000480 BD                    1327 	.db #0xbd	; 189
      000481 DF                    1328 	.db #0xdf	; 223
      000482 7F                    1329 	.db #0x7f	; 127
      000483 FB                    1330 	.db #0xfb	; 251
      000484 DF                    1331 	.db #0xdf	; 223
      000485 FE                    1332 	.db #0xfe	; 254
      000486 EF                    1333 	.db #0xef	; 239
      000487                       1334 _pattern_10:
      000487 7F                    1335 	.db #0x7f	; 127
      000488 FF                    1336 	.db #0xff	; 255
      000489 ED                    1337 	.db #0xed	; 237
      00048A FF                    1338 	.db #0xff	; 255
      00048B B6                    1339 	.db #0xb6	; 182
      00048C FE                    1340 	.db #0xfe	; 254
      00048D DB                    1341 	.db #0xdb	; 219
      00048E 7D                    1342 	.db #0x7d	; 125
      00048F                       1343 _pattern_11:
      00048F FE                    1344 	.db #0xfe	; 254
      000490 FF                    1345 	.db #0xff	; 255
      000491 FE                    1346 	.db #0xfe	; 254
      000492 77                    1347 	.db #0x77	; 119	'w'
      000493 FE                    1348 	.db #0xfe	; 254
      000494 DD                    1349 	.db #0xdd	; 221
      000495 EF                    1350 	.db #0xef	; 239
      000496 5A                    1351 	.db #0x5a	; 90	'Z'
      000497                       1352 _pattern_12:
      000497 7F                    1353 	.db #0x7f	; 127
      000498 D5                    1354 	.db #0xd5	; 213
      000499 BF                    1355 	.db #0xbf	; 191
      00049A ED                    1356 	.db #0xed	; 237
      00049B BF                    1357 	.db #0xbf	; 191
      00049C F5                    1358 	.db #0xf5	; 245
      00049D BF                    1359 	.db #0xbf	; 191
      00049E FF                    1360 	.db #0xff	; 255
      00049F                       1361 _pattern_13:
      00049F FE                    1362 	.db #0xfe	; 254
      0004A0 5F                    1363 	.db #0x5f	; 95
      0004A1 F5                    1364 	.db #0xf5	; 245
      0004A2 DF                    1365 	.db #0xdf	; 223
      0004A3 FF                    1366 	.db #0xff	; 255
      0004A4 FF                    1367 	.db #0xff	; 255
      0004A5 FF                    1368 	.db #0xff	; 255
      0004A6 FF                    1369 	.db #0xff	; 255
      0004A7                       1370 _pattern_14:
      0004A7 EF                    1371 	.db #0xef	; 239
      0004A8 BF                    1372 	.db #0xbf	; 191
      0004A9 7F                    1373 	.db #0x7f	; 127
      0004AA FF                    1374 	.db #0xff	; 255
      0004AB FF                    1375 	.db #0xff	; 255
      0004AC FF                    1376 	.db #0xff	; 255
      0004AD DB                    1377 	.db #0xdb	; 219
      0004AE 7F                    1378 	.db #0x7f	; 127
      0004AF                       1379 _pattern_15:
      0004AF FF                    1380 	.db #0xff	; 255
      0004B0 FD                    1381 	.db #0xfd	; 253
      0004B1 FF                    1382 	.db #0xff	; 255
      0004B2 DB                    1383 	.db #0xdb	; 219
      0004B3 FD                    1384 	.db #0xfd	; 253
      0004B4 7B                    1385 	.db #0x7b	; 123
      0004B5 D7                    1386 	.db #0xd7	; 215
      0004B6 FE                    1387 	.db #0xfe	; 254
      0004B7                       1388 _pattern_16:
      0004B7 7F                    1389 	.db #0x7f	; 127
      0004B8 FF                    1390 	.db #0xff	; 255
      0004B9 EA                    1391 	.db #0xea	; 234
      0004BA DF                    1392 	.db #0xdf	; 223
      0004BB FF                    1393 	.db #0xff	; 255
      0004BC DF                    1394 	.db #0xdf	; 223
      0004BD FF                    1395 	.db #0xff	; 255
      0004BE DF                    1396 	.db #0xdf	; 223
      0004BF                       1397 _pattern_17:
      0004BF FE                    1398 	.db #0xfe	; 254
      0004C0 FF                    1399 	.db #0xff	; 255
      0004C1 AF                    1400 	.db #0xaf	; 175
      0004C2 FA                    1401 	.db #0xfa	; 250
      0004C3 FF                    1402 	.db #0xff	; 255
      0004C4 FA                    1403 	.db #0xfa	; 250
      0004C5 FF                    1404 	.db #0xff	; 255
      0004C6 FA                    1405 	.db #0xfa	; 250
      0004C7                       1406 _pattern_18:
      0004C7 FF                    1407 	.db #0xff	; 255
      0004C8 DF                    1408 	.db #0xdf	; 223
      0004C9 FF                    1409 	.db #0xff	; 255
      0004CA DF                    1410 	.db #0xdf	; 223
      0004CB FF                    1411 	.db #0xff	; 255
      0004CC EA                    1412 	.db #0xea	; 234
      0004CD FF                    1413 	.db #0xff	; 255
      0004CE 55                    1414 	.db #0x55	; 85	'U'
      0004CF                       1415 _pattern_19:
      0004CF FF                    1416 	.db #0xff	; 255
      0004D0 FA                    1417 	.db #0xfa	; 250
      0004D1 FF                    1418 	.db #0xff	; 255
      0004D2 FA                    1419 	.db #0xfa	; 250
      0004D3 F7                    1420 	.db #0xf7	; 247
      0004D4 AA                    1421 	.db #0xaa	; 170
      0004D5 FF                    1422 	.db #0xff	; 255
      0004D6 56                    1423 	.db #0x56	; 86	'V'
      0004D7                       1424 _pattern_20:
      0004D7 3F                    1425 	.db #0x3f	; 63
      0004D8 7F                    1426 	.db #0x7f	; 127
      0004D9 E0                    1427 	.db #0xe0	; 224
      0004DA CE                    1428 	.db #0xce	; 206
      0004DB E6                    1429 	.db #0xe6	; 230
      0004DC 7C                    1430 	.db #0x7c	; 124
      0004DD 39                    1431 	.db #0x39	; 57	'9'
      0004DE 03                    1432 	.db #0x03	; 3
      0004DF                       1433 _pattern_21:
      0004DF FF                    1434 	.db #0xff	; 255
      0004E0 FF                    1435 	.db #0xff	; 255
      0004E1 00                    1436 	.db #0x00	; 0
      0004E2 DB                    1437 	.db #0xdb	; 219
      0004E3 DB                    1438 	.db #0xdb	; 219
      0004E4 00                    1439 	.db #0x00	; 0
      0004E5 FF                    1440 	.db #0xff	; 255
      0004E6 FF                    1441 	.db #0xff	; 255
      0004E7                       1442 _pattern_22:
      0004E7 FC                    1443 	.db #0xfc	; 252
      0004E8 FE                    1444 	.db #0xfe	; 254
      0004E9 07                    1445 	.db #0x07	; 7
      0004EA 73                    1446 	.db #0x73	; 115	's'
      0004EB 67                    1447 	.db #0x67	; 103	'g'
      0004EC 3E                    1448 	.db #0x3e	; 62
      0004ED 9C                    1449 	.db #0x9c	; 156
      0004EE C0                    1450 	.db #0xc0	; 192
      0004EF                       1451 _pattern_23:
      0004EF 06                    1452 	.db #0x06	; 6
      0004F0 00                    1453 	.db #0x00	; 0
      0004F1 03                    1454 	.db #0x03	; 3
      0004F2 04                    1455 	.db #0x04	; 4
      0004F3 05                    1456 	.db #0x05	; 5
      0004F4 05                    1457 	.db #0x05	; 5
      0004F5 05                    1458 	.db #0x05	; 5
      0004F6 05                    1459 	.db #0x05	; 5
      0004F7                       1460 _pattern_24:
      0004F7 00                    1461 	.db #0x00	; 0
      0004F8 00                    1462 	.db #0x00	; 0
      0004F9 33                    1463 	.db #0x33	; 51	'3'
      0004FA 44                    1464 	.db #0x44	; 68	'D'
      0004FB 55                    1465 	.db #0x55	; 85	'U'
      0004FC 55                    1466 	.db #0x55	; 85	'U'
      0004FD 55                    1467 	.db #0x55	; 85	'U'
      0004FE 55                    1468 	.db #0x55	; 85	'U'
      0004FF                       1469 _pattern_25:
      0004FF 60                    1470 	.db #0x60	; 96
      000500 00                    1471 	.db #0x00	; 0
      000501 40                    1472 	.db #0x40	; 64
      000502 20                    1473 	.db #0x20	; 32
      000503 20                    1474 	.db #0x20	; 32
      000504 20                    1475 	.db #0x20	; 32
      000505 20                    1476 	.db #0x20	; 32
      000506 20                    1477 	.db #0x20	; 32
      000507                       1478 _pattern_26:
      000507 05                    1479 	.db #0x05	; 5
      000508 05                    1480 	.db #0x05	; 5
      000509 05                    1481 	.db #0x05	; 5
      00050A 05                    1482 	.db #0x05	; 5
      00050B 05                    1483 	.db #0x05	; 5
      00050C 05                    1484 	.db #0x05	; 5
      00050D 05                    1485 	.db #0x05	; 5
      00050E 05                    1486 	.db #0x05	; 5
      00050F                       1487 _pattern_27:
      00050F 55                    1488 	.db #0x55	; 85	'U'
      000510 55                    1489 	.db #0x55	; 85	'U'
      000511 55                    1490 	.db #0x55	; 85	'U'
      000512 55                    1491 	.db #0x55	; 85	'U'
      000513 55                    1492 	.db #0x55	; 85	'U'
      000514 55                    1493 	.db #0x55	; 85	'U'
      000515 55                    1494 	.db #0x55	; 85	'U'
      000516 55                    1495 	.db #0x55	; 85	'U'
      000517                       1496 _pattern_28:
      000517 20                    1497 	.db #0x20	; 32
      000518 20                    1498 	.db #0x20	; 32
      000519 20                    1499 	.db #0x20	; 32
      00051A 20                    1500 	.db #0x20	; 32
      00051B 20                    1501 	.db #0x20	; 32
      00051C 20                    1502 	.db #0x20	; 32
      00051D 20                    1503 	.db #0x20	; 32
      00051E 20                    1504 	.db #0x20	; 32
      00051F                       1505 _pattern_29:
      00051F 05                    1506 	.db #0x05	; 5
      000520 05                    1507 	.db #0x05	; 5
      000521 07                    1508 	.db #0x07	; 7
      000522 07                    1509 	.db #0x07	; 7
      000523 07                    1510 	.db #0x07	; 7
      000524 05                    1511 	.db #0x05	; 5
      000525 05                    1512 	.db #0x05	; 5
      000526 05                    1513 	.db #0x05	; 5
      000527                       1514 _pattern_30:
      000527 55                    1515 	.db #0x55	; 85	'U'
      000528 55                    1516 	.db #0x55	; 85	'U'
      000529 FF                    1517 	.db #0xff	; 255
      00052A FF                    1518 	.db #0xff	; 255
      00052B FF                    1519 	.db #0xff	; 255
      00052C 55                    1520 	.db #0x55	; 85	'U'
      00052D 55                    1521 	.db #0x55	; 85	'U'
      00052E 55                    1522 	.db #0x55	; 85	'U'
      00052F                       1523 _pattern_31:
      00052F 20                    1524 	.db #0x20	; 32
      000530 20                    1525 	.db #0x20	; 32
      000531 E0                    1526 	.db #0xe0	; 224
      000532 E0                    1527 	.db #0xe0	; 224
      000533 E0                    1528 	.db #0xe0	; 224
      000534 20                    1529 	.db #0x20	; 32
      000535 20                    1530 	.db #0x20	; 32
      000536 20                    1531 	.db #0x20	; 32
      000537                       1532 _pattern_37:
      000537 05                    1533 	.db #0x05	; 5
      000538 05                    1534 	.db #0x05	; 5
      000539 05                    1535 	.db #0x05	; 5
      00053A 05                    1536 	.db #0x05	; 5
      00053B 04                    1537 	.db #0x04	; 4
      00053C 03                    1538 	.db #0x03	; 3
      00053D 00                    1539 	.db #0x00	; 0
      00053E 06                    1540 	.db #0x06	; 6
      00053F                       1541 _pattern_38:
      00053F 55                    1542 	.db #0x55	; 85	'U'
      000540 55                    1543 	.db #0x55	; 85	'U'
      000541 55                    1544 	.db #0x55	; 85	'U'
      000542 55                    1545 	.db #0x55	; 85	'U'
      000543 44                    1546 	.db #0x44	; 68	'D'
      000544 33                    1547 	.db #0x33	; 51	'3'
      000545 00                    1548 	.db #0x00	; 0
      000546 00                    1549 	.db #0x00	; 0
      000547                       1550 _pattern_39:
      000547 20                    1551 	.db #0x20	; 32
      000548 20                    1552 	.db #0x20	; 32
      000549 20                    1553 	.db #0x20	; 32
      00054A 20                    1554 	.db #0x20	; 32
      00054B 20                    1555 	.db #0x20	; 32
      00054C 40                    1556 	.db #0x40	; 64
      00054D 00                    1557 	.db #0x00	; 0
      00054E 60                    1558 	.db #0x60	; 96
      00054F                       1559 _pattern_32:
      00054F 03                    1560 	.db #0x03	; 3
      000550 39                    1561 	.db #0x39	; 57	'9'
      000551 7C                    1562 	.db #0x7c	; 124
      000552 E6                    1563 	.db #0xe6	; 230
      000553 CE                    1564 	.db #0xce	; 206
      000554 E0                    1565 	.db #0xe0	; 224
      000555 7F                    1566 	.db #0x7f	; 127
      000556 3F                    1567 	.db #0x3f	; 63
      000557                       1568 _pattern_33:
      000557 FF                    1569 	.db #0xff	; 255
      000558 FF                    1570 	.db #0xff	; 255
      000559 00                    1571 	.db #0x00	; 0
      00055A DB                    1572 	.db #0xdb	; 219
      00055B DB                    1573 	.db #0xdb	; 219
      00055C 00                    1574 	.db #0x00	; 0
      00055D FF                    1575 	.db #0xff	; 255
      00055E FF                    1576 	.db #0xff	; 255
      00055F                       1577 _pattern_34:
      00055F C0                    1578 	.db #0xc0	; 192
      000560 9C                    1579 	.db #0x9c	; 156
      000561 3E                    1580 	.db #0x3e	; 62
      000562 67                    1581 	.db #0x67	; 103	'g'
      000563 73                    1582 	.db #0x73	; 115	's'
      000564 07                    1583 	.db #0x07	; 7
      000565 FE                    1584 	.db #0xfe	; 254
      000566 FC                    1585 	.db #0xfc	; 252
      000567                       1586 _sprite_dust_0:
      000567 10                    1587 	.db #0x10	; 16
      000568 42                    1588 	.db #0x42	; 66	'B'
      000569 10                    1589 	.db #0x10	; 16
      00056A 45                    1590 	.db #0x45	; 69	'E'
      00056B 20                    1591 	.db #0x20	; 32
      00056C 89                    1592 	.db #0x89	; 137
      00056D 20                    1593 	.db #0x20	; 32
      00056E 88                    1594 	.db #0x88	; 136
      00056F                       1595 _sprite_dust_1:
      00056F 10                    1596 	.db #0x10	; 16
      000570 42                    1597 	.db #0x42	; 66	'B'
      000571 00                    1598 	.db #0x00	; 0
      000572 04                    1599 	.db #0x04	; 4
      000573 20                    1600 	.db #0x20	; 32
      000574 81                    1601 	.db #0x81	; 129
      000575 20                    1602 	.db #0x20	; 32
      000576 08                    1603 	.db #0x08	; 8
      000577                       1604 _sprite_dust_2:
      000577 10                    1605 	.db #0x10	; 16
      000578 00                    1606 	.db #0x00	; 0
      000579 00                    1607 	.db #0x00	; 0
      00057A 04                    1608 	.db #0x04	; 4
      00057B 20                    1609 	.db #0x20	; 32
      00057C 80                    1610 	.db #0x80	; 128
      00057D 20                    1611 	.db #0x20	; 32
      00057E 00                    1612 	.db #0x00	; 0
      00057F                       1613 _sprite_dust_3:
      00057F 10                    1614 	.db #0x10	; 16
      000580 00                    1615 	.db #0x00	; 0
      000581 00                    1616 	.db #0x00	; 0
      000582 04                    1617 	.db #0x04	; 4
      000583 00                    1618 	.db #0x00	; 0
      000584 00                    1619 	.db #0x00	; 0
      000585 20                    1620 	.db #0x20	; 32
      000586 00                    1621 	.db #0x00	; 0
      000587                       1622 _pattern_title:
      000587 FE                    1623 	.db #0xfe	; 254
      000588 FE                    1624 	.db #0xfe	; 254
      000589 FE                    1625 	.db #0xfe	; 254
      00058A FE                    1626 	.db #0xfe	; 254
      00058B FE                    1627 	.db #0xfe	; 254
      00058C FE                    1628 	.db #0xfe	; 254
      00058D FE                    1629 	.db #0xfe	; 254
      00058E 00                    1630 	.db #0x00	; 0
      00058F                       1631 _color_black_0:
      00058F 14                    1632 	.db #0x14	; 20
      000590 14                    1633 	.db #0x14	; 20
      000591 14                    1634 	.db #0x14	; 20
      000592 14                    1635 	.db #0x14	; 20
      000593 14                    1636 	.db #0x14	; 20
      000594 14                    1637 	.db #0x14	; 20
      000595 14                    1638 	.db #0x14	; 20
      000596 14                    1639 	.db #0x14	; 20
      000597                       1640 _color_black_1:
      000597 14                    1641 	.db #0x14	; 20
      000598 14                    1642 	.db #0x14	; 20
      000599 14                    1643 	.db #0x14	; 20
      00059A 14                    1644 	.db #0x14	; 20
      00059B 14                    1645 	.db #0x14	; 20
      00059C 14                    1646 	.db #0x14	; 20
      00059D 14                    1647 	.db #0x14	; 20
      00059E 14                    1648 	.db #0x14	; 20
      00059F                       1649 _color_black_2:
      00059F 14                    1650 	.db #0x14	; 20
      0005A0 14                    1651 	.db #0x14	; 20
      0005A1 14                    1652 	.db #0x14	; 20
      0005A2 14                    1653 	.db #0x14	; 20
      0005A3 14                    1654 	.db #0x14	; 20
      0005A4 14                    1655 	.db #0x14	; 20
      0005A5 14                    1656 	.db #0x14	; 20
      0005A6 14                    1657 	.db #0x14	; 20
      0005A7                       1658 _color_black_3:
      0005A7 14                    1659 	.db #0x14	; 20
      0005A8 14                    1660 	.db #0x14	; 20
      0005A9 14                    1661 	.db #0x14	; 20
      0005AA 14                    1662 	.db #0x14	; 20
      0005AB 14                    1663 	.db #0x14	; 20
      0005AC 14                    1664 	.db #0x14	; 20
      0005AD 14                    1665 	.db #0x14	; 20
      0005AE 14                    1666 	.db #0x14	; 20
      0005AF                       1667 _color_0:
      0005AF 13                    1668 	.db #0x13	; 19
      0005B0 13                    1669 	.db #0x13	; 19
      0005B1 13                    1670 	.db #0x13	; 19
      0005B2 13                    1671 	.db #0x13	; 19
      0005B3 13                    1672 	.db #0x13	; 19
      0005B4 13                    1673 	.db #0x13	; 19
      0005B5 13                    1674 	.db #0x13	; 19
      0005B6 13                    1675 	.db #0x13	; 19
      0005B7                       1676 _color_1:
      0005B7 12                    1677 	.db #0x12	; 18
      0005B8 12                    1678 	.db #0x12	; 18
      0005B9 12                    1679 	.db #0x12	; 18
      0005BA 12                    1680 	.db #0x12	; 18
      0005BB 12                    1681 	.db #0x12	; 18
      0005BC 12                    1682 	.db #0x12	; 18
      0005BD 12                    1683 	.db #0x12	; 18
      0005BE 12                    1684 	.db #0x12	; 18
      0005BF                       1685 _color_2:
      0005BF 12                    1686 	.db #0x12	; 18
      0005C0 12                    1687 	.db #0x12	; 18
      0005C1 12                    1688 	.db #0x12	; 18
      0005C2 12                    1689 	.db #0x12	; 18
      0005C3 12                    1690 	.db #0x12	; 18
      0005C4 12                    1691 	.db #0x12	; 18
      0005C5 12                    1692 	.db #0x12	; 18
      0005C6 12                    1693 	.db #0x12	; 18
      0005C7                       1694 _color_3:
      0005C7 1C                    1695 	.db #0x1c	; 28
      0005C8 1C                    1696 	.db #0x1c	; 28
      0005C9 1C                    1697 	.db #0x1c	; 28
      0005CA 1C                    1698 	.db #0x1c	; 28
      0005CB 1C                    1699 	.db #0x1c	; 28
      0005CC 1C                    1700 	.db #0x1c	; 28
      0005CD 1C                    1701 	.db #0x1c	; 28
      0005CE 1C                    1702 	.db #0x1c	; 28
      0005CF                       1703 _color_4:
      0005CF 96                    1704 	.db #0x96	; 150
      0005D0 96                    1705 	.db #0x96	; 150
      0005D1 96                    1706 	.db #0x96	; 150
      0005D2 96                    1707 	.db #0x96	; 150
      0005D3 96                    1708 	.db #0x96	; 150
      0005D4 96                    1709 	.db #0x96	; 150
      0005D5 96                    1710 	.db #0x96	; 150
      0005D6 96                    1711 	.db #0x96	; 150
      0005D7                       1712 _color_5:
      0005D7 98                    1713 	.db #0x98	; 152
      0005D8 68                    1714 	.db #0x68	; 104	'h'
      0005D9 68                    1715 	.db #0x68	; 104	'h'
      0005DA 68                    1716 	.db #0x68	; 104	'h'
      0005DB 68                    1717 	.db #0x68	; 104	'h'
      0005DC 68                    1718 	.db #0x68	; 104	'h'
      0005DD 68                    1719 	.db #0x68	; 104	'h'
      0005DE 68                    1720 	.db #0x68	; 104	'h'
      0005DF                       1721 _color_6:
      0005DF 68                    1722 	.db #0x68	; 104	'h'
      0005E0 68                    1723 	.db #0x68	; 104	'h'
      0005E1 68                    1724 	.db #0x68	; 104	'h'
      0005E2 68                    1725 	.db #0x68	; 104	'h'
      0005E3 68                    1726 	.db #0x68	; 104	'h'
      0005E4 68                    1727 	.db #0x68	; 104	'h'
      0005E5 68                    1728 	.db #0x68	; 104	'h'
      0005E6 68                    1729 	.db #0x68	; 104	'h'
      0005E7                       1730 _color_7:
      0005E7 89                    1731 	.db #0x89	; 137
      0005E8 89                    1732 	.db #0x89	; 137
      0005E9 89                    1733 	.db #0x89	; 137
      0005EA 89                    1734 	.db #0x89	; 137
      0005EB 89                    1735 	.db #0x89	; 137
      0005EC 89                    1736 	.db #0x89	; 137
      0005ED 89                    1737 	.db #0x89	; 137
      0005EE 86                    1738 	.db #0x86	; 134
      0005EF                       1739 _color_8:
      0005EF 41                    1740 	.db #0x41	; 65	'A'
      0005F0 47                    1741 	.db #0x47	; 71	'G'
      0005F1 47                    1742 	.db #0x47	; 71	'G'
      0005F2 47                    1743 	.db #0x47	; 71	'G'
      0005F3 47                    1744 	.db #0x47	; 71	'G'
      0005F4 47                    1745 	.db #0x47	; 71	'G'
      0005F5 47                    1746 	.db #0x47	; 71	'G'
      0005F6 47                    1747 	.db #0x47	; 71	'G'
      0005F7                       1748 _color_9:
      0005F7 41                    1749 	.db #0x41	; 65	'A'
      0005F8 45                    1750 	.db #0x45	; 69	'E'
      0005F9 47                    1751 	.db #0x47	; 71	'G'
      0005FA 47                    1752 	.db #0x47	; 71	'G'
      0005FB 45                    1753 	.db #0x45	; 69	'E'
      0005FC 45                    1754 	.db #0x45	; 69	'E'
      0005FD 41                    1755 	.db #0x41	; 65	'A'
      0005FE 45                    1756 	.db #0x45	; 69	'E'
      0005FF                       1757 _color_10:
      0005FF 47                    1758 	.db #0x47	; 71	'G'
      000600 45                    1759 	.db #0x45	; 69	'E'
      000601 45                    1760 	.db #0x45	; 69	'E'
      000602 45                    1761 	.db #0x45	; 69	'E'
      000603 45                    1762 	.db #0x45	; 69	'E'
      000604 41                    1763 	.db #0x41	; 65	'A'
      000605 45                    1764 	.db #0x45	; 69	'E'
      000606 41                    1765 	.db #0x41	; 65	'A'
      000607                       1766 _color_11:
      000607 41                    1767 	.db #0x41	; 65	'A'
      000608 41                    1768 	.db #0x41	; 65	'A'
      000609 41                    1769 	.db #0x41	; 65	'A'
      00060A 41                    1770 	.db #0x41	; 65	'A'
      00060B 41                    1771 	.db #0x41	; 65	'A'
      00060C 41                    1772 	.db #0x41	; 65	'A'
      00060D 41                    1773 	.db #0x41	; 65	'A'
      00060E 41                    1774 	.db #0x41	; 65	'A'
      00060F                       1775 _color_12:
      00060F D1                    1776 	.db #0xd1	; 209
      000610 DF                    1777 	.db #0xdf	; 223
      000611 DF                    1778 	.db #0xdf	; 223
      000612 DF                    1779 	.db #0xdf	; 223
      000613 DF                    1780 	.db #0xdf	; 223
      000614 DF                    1781 	.db #0xdf	; 223
      000615 DF                    1782 	.db #0xdf	; 223
      000616 DF                    1783 	.db #0xdf	; 223
      000617                       1784 _color_13:
      000617 D1                    1785 	.db #0xd1	; 209
      000618 DF                    1786 	.db #0xdf	; 223
      000619 DF                    1787 	.db #0xdf	; 223
      00061A DF                    1788 	.db #0xdf	; 223
      00061B DF                    1789 	.db #0xdf	; 223
      00061C DF                    1790 	.db #0xdf	; 223
      00061D DF                    1791 	.db #0xdf	; 223
      00061E DF                    1792 	.db #0xdf	; 223
      00061F                       1793 _color_14:
      00061F DF                    1794 	.db #0xdf	; 223
      000620 DF                    1795 	.db #0xdf	; 223
      000621 DF                    1796 	.db #0xdf	; 223
      000622 D1                    1797 	.db #0xd1	; 209
      000623 D1                    1798 	.db #0xd1	; 209
      000624 D1                    1799 	.db #0xd1	; 209
      000625 D1                    1800 	.db #0xd1	; 209
      000626 D1                    1801 	.db #0xd1	; 209
      000627                       1802 _color_15:
      000627 D1                    1803 	.db #0xd1	; 209
      000628 D1                    1804 	.db #0xd1	; 209
      000629 D1                    1805 	.db #0xd1	; 209
      00062A D1                    1806 	.db #0xd1	; 209
      00062B D1                    1807 	.db #0xd1	; 209
      00062C D1                    1808 	.db #0xd1	; 209
      00062D D1                    1809 	.db #0xd1	; 209
      00062E D1                    1810 	.db #0xd1	; 209
      00062F                       1811 _color_16:
      00062F A1                    1812 	.db #0xa1	; 161
      000630 BF                    1813 	.db #0xbf	; 191
      000631 BF                    1814 	.db #0xbf	; 191
      000632 BF                    1815 	.db #0xbf	; 191
      000633 BF                    1816 	.db #0xbf	; 191
      000634 BF                    1817 	.db #0xbf	; 191
      000635 BF                    1818 	.db #0xbf	; 191
      000636 BF                    1819 	.db #0xbf	; 191
      000637                       1820 _color_17:
      000637 A1                    1821 	.db #0xa1	; 161
      000638 AF                    1822 	.db #0xaf	; 175
      000639 AF                    1823 	.db #0xaf	; 175
      00063A A1                    1824 	.db #0xa1	; 161
      00063B A1                    1825 	.db #0xa1	; 161
      00063C A1                    1826 	.db #0xa1	; 161
      00063D A1                    1827 	.db #0xa1	; 161
      00063E A1                    1828 	.db #0xa1	; 161
      00063F                       1829 _color_18:
      00063F AF                    1830 	.db #0xaf	; 175
      000640 AF                    1831 	.db #0xaf	; 175
      000641 AF                    1832 	.db #0xaf	; 175
      000642 AF                    1833 	.db #0xaf	; 175
      000643 A1                    1834 	.db #0xa1	; 161
      000644 A1                    1835 	.db #0xa1	; 161
      000645 A1                    1836 	.db #0xa1	; 161
      000646 A1                    1837 	.db #0xa1	; 161
      000647                       1838 _color_19:
      000647 B1                    1839 	.db #0xb1	; 177
      000648 B1                    1840 	.db #0xb1	; 177
      000649 B1                    1841 	.db #0xb1	; 177
      00064A B1                    1842 	.db #0xb1	; 177
      00064B B1                    1843 	.db #0xb1	; 177
      00064C B1                    1844 	.db #0xb1	; 177
      00064D B1                    1845 	.db #0xb1	; 177
      00064E B1                    1846 	.db #0xb1	; 177
      00064F                       1847 _color_column_1:
      00064F F1                    1848 	.db #0xf1	; 241
      000650 E1                    1849 	.db #0xe1	; 225
      000651 E1                    1850 	.db #0xe1	; 225
      000652 E1                    1851 	.db #0xe1	; 225
      000653 E1                    1852 	.db #0xe1	; 225
      000654 E1                    1853 	.db #0xe1	; 225
      000655 E1                    1854 	.db #0xe1	; 225
      000656 E1                    1855 	.db #0xe1	; 225
      000657                       1856 _color_column_2:
      000657 F1                    1857 	.db #0xf1	; 241
      000658 E1                    1858 	.db #0xe1	; 225
      000659 E1                    1859 	.db #0xe1	; 225
      00065A E1                    1860 	.db #0xe1	; 225
      00065B E1                    1861 	.db #0xe1	; 225
      00065C E1                    1862 	.db #0xe1	; 225
      00065D E1                    1863 	.db #0xe1	; 225
      00065E E1                    1864 	.db #0xe1	; 225
      00065F                       1865 _color_column_3:
      00065F F1                    1866 	.db #0xf1	; 241
      000660 E1                    1867 	.db #0xe1	; 225
      000661 E1                    1868 	.db #0xe1	; 225
      000662 E1                    1869 	.db #0xe1	; 225
      000663 E1                    1870 	.db #0xe1	; 225
      000664 E1                    1871 	.db #0xe1	; 225
      000665 E1                    1872 	.db #0xe1	; 225
      000666 E1                    1873 	.db #0xe1	; 225
      000667                       1874 _color_column_4:
      000667 F1                    1875 	.db #0xf1	; 241
      000668 F1                    1876 	.db #0xf1	; 241
      000669 F1                    1877 	.db #0xf1	; 241
      00066A F1                    1878 	.db #0xf1	; 241
      00066B F1                    1879 	.db #0xf1	; 241
      00066C F1                    1880 	.db #0xf1	; 241
      00066D F1                    1881 	.db #0xf1	; 241
      00066E F1                    1882 	.db #0xf1	; 241
      00066F                       1883 _color_column_5:
      00066F E1                    1884 	.db #0xe1	; 225
      000670 E1                    1885 	.db #0xe1	; 225
      000671 E1                    1886 	.db #0xe1	; 225
      000672 E1                    1887 	.db #0xe1	; 225
      000673 E1                    1888 	.db #0xe1	; 225
      000674 E1                    1889 	.db #0xe1	; 225
      000675 E1                    1890 	.db #0xe1	; 225
      000676 E1                    1891 	.db #0xe1	; 225
      000677                       1892 _color_column_6:
      000677 E1                    1893 	.db #0xe1	; 225
      000678 E1                    1894 	.db #0xe1	; 225
      000679 E1                    1895 	.db #0xe1	; 225
      00067A 41                    1896 	.db #0x41	; 65	'A'
      00067B 41                    1897 	.db #0x41	; 65	'A'
      00067C 41                    1898 	.db #0x41	; 65	'A'
      00067D 41                    1899 	.db #0x41	; 65	'A'
      00067E 41                    1900 	.db #0x41	; 65	'A'
      00067F                       1901 _color_column_7:
      00067F F1                    1902 	.db #0xf1	; 241
      000680 F1                    1903 	.db #0xf1	; 241
      000681 F1                    1904 	.db #0xf1	; 241
      000682 F1                    1905 	.db #0xf1	; 241
      000683 F1                    1906 	.db #0xf1	; 241
      000684 F1                    1907 	.db #0xf1	; 241
      000685 F1                    1908 	.db #0xf1	; 241
      000686 F1                    1909 	.db #0xf1	; 241
      000687                       1910 _color_column_8:
      000687 E1                    1911 	.db #0xe1	; 225
      000688 E1                    1912 	.db #0xe1	; 225
      000689 E1                    1913 	.db #0xe1	; 225
      00068A F1                    1914 	.db #0xf1	; 241
      00068B E1                    1915 	.db #0xe1	; 225
      00068C E1                    1916 	.db #0xe1	; 225
      00068D E1                    1917 	.db #0xe1	; 225
      00068E E1                    1918 	.db #0xe1	; 225
      00068F                       1919 _color_column_9:
      00068F 41                    1920 	.db #0x41	; 65	'A'
      000690 41                    1921 	.db #0x41	; 65	'A'
      000691 41                    1922 	.db #0x41	; 65	'A'
      000692 F1                    1923 	.db #0xf1	; 241
      000693 41                    1924 	.db #0x41	; 65	'A'
      000694 41                    1925 	.db #0x41	; 65	'A'
      000695 41                    1926 	.db #0x41	; 65	'A'
      000696 41                    1927 	.db #0x41	; 65	'A'
      000697                       1928 _color_column_10:
      000697 F1                    1929 	.db #0xf1	; 241
      000698 F1                    1930 	.db #0xf1	; 241
      000699 F1                    1931 	.db #0xf1	; 241
      00069A F1                    1932 	.db #0xf1	; 241
      00069B F1                    1933 	.db #0xf1	; 241
      00069C F1                    1934 	.db #0xf1	; 241
      00069D F1                    1935 	.db #0xf1	; 241
      00069E F1                    1936 	.db #0xf1	; 241
      00069F                       1937 _color_column_11:
      00069F E1                    1938 	.db #0xe1	; 225
      0006A0 E1                    1939 	.db #0xe1	; 225
      0006A1 E1                    1940 	.db #0xe1	; 225
      0006A2 E1                    1941 	.db #0xe1	; 225
      0006A3 E1                    1942 	.db #0xe1	; 225
      0006A4 E1                    1943 	.db #0xe1	; 225
      0006A5 E1                    1944 	.db #0xe1	; 225
      0006A6 E1                    1945 	.db #0xe1	; 225
      0006A7                       1946 _color_column_12:
      0006A7 41                    1947 	.db #0x41	; 65	'A'
      0006A8 41                    1948 	.db #0x41	; 65	'A'
      0006A9 41                    1949 	.db #0x41	; 65	'A'
      0006AA 41                    1950 	.db #0x41	; 65	'A'
      0006AB 41                    1951 	.db #0x41	; 65	'A'
      0006AC 41                    1952 	.db #0x41	; 65	'A'
      0006AD 41                    1953 	.db #0x41	; 65	'A'
      0006AE 41                    1954 	.db #0x41	; 65	'A'
      0006AF                       1955 _color_column_16:
      0006AF F1                    1956 	.db #0xf1	; 241
      0006B0 F1                    1957 	.db #0xf1	; 241
      0006B1 F1                    1958 	.db #0xf1	; 241
      0006B2 F1                    1959 	.db #0xf1	; 241
      0006B3 F1                    1960 	.db #0xf1	; 241
      0006B4 F1                    1961 	.db #0xf1	; 241
      0006B5 F1                    1962 	.db #0xf1	; 241
      0006B6 F1                    1963 	.db #0xf1	; 241
      0006B7                       1964 _color_column_17:
      0006B7 E1                    1965 	.db #0xe1	; 225
      0006B8 E1                    1966 	.db #0xe1	; 225
      0006B9 E1                    1967 	.db #0xe1	; 225
      0006BA E1                    1968 	.db #0xe1	; 225
      0006BB E1                    1969 	.db #0xe1	; 225
      0006BC E1                    1970 	.db #0xe1	; 225
      0006BD E1                    1971 	.db #0xe1	; 225
      0006BE E1                    1972 	.db #0xe1	; 225
      0006BF                       1973 _color_column_18:
      0006BF 41                    1974 	.db #0x41	; 65	'A'
      0006C0 41                    1975 	.db #0x41	; 65	'A'
      0006C1 41                    1976 	.db #0x41	; 65	'A'
      0006C2 41                    1977 	.db #0x41	; 65	'A'
      0006C3 41                    1978 	.db #0x41	; 65	'A'
      0006C4 E1                    1979 	.db #0xe1	; 225
      0006C5 E1                    1980 	.db #0xe1	; 225
      0006C6 E1                    1981 	.db #0xe1	; 225
      0006C7                       1982 _color_column_13:
      0006C7 E1                    1983 	.db #0xe1	; 225
      0006C8 E1                    1984 	.db #0xe1	; 225
      0006C9 E1                    1985 	.db #0xe1	; 225
      0006CA E1                    1986 	.db #0xe1	; 225
      0006CB E1                    1987 	.db #0xe1	; 225
      0006CC E1                    1988 	.db #0xe1	; 225
      0006CD E1                    1989 	.db #0xe1	; 225
      0006CE F1                    1990 	.db #0xf1	; 241
      0006CF                       1991 _color_column_14:
      0006CF E1                    1992 	.db #0xe1	; 225
      0006D0 E1                    1993 	.db #0xe1	; 225
      0006D1 E1                    1994 	.db #0xe1	; 225
      0006D2 E1                    1995 	.db #0xe1	; 225
      0006D3 E1                    1996 	.db #0xe1	; 225
      0006D4 E1                    1997 	.db #0xe1	; 225
      0006D5 E1                    1998 	.db #0xe1	; 225
      0006D6 F1                    1999 	.db #0xf1	; 241
      0006D7                       2000 _color_column_15:
      0006D7 E1                    2001 	.db #0xe1	; 225
      0006D8 E1                    2002 	.db #0xe1	; 225
      0006D9 E1                    2003 	.db #0xe1	; 225
      0006DA E1                    2004 	.db #0xe1	; 225
      0006DB E1                    2005 	.db #0xe1	; 225
      0006DC E1                    2006 	.db #0xe1	; 225
      0006DD E1                    2007 	.db #0xe1	; 225
      0006DE F1                    2008 	.db #0xf1	; 241
      0006DF                       2009 _color_dust_0:
      0006DF F1                    2010 	.db #0xf1	; 241
      0006E0 F1                    2011 	.db #0xf1	; 241
      0006E1 F1                    2012 	.db #0xf1	; 241
      0006E2 F1                    2013 	.db #0xf1	; 241
      0006E3 F1                    2014 	.db #0xf1	; 241
      0006E4 F1                    2015 	.db #0xf1	; 241
      0006E5 F1                    2016 	.db #0xf1	; 241
      0006E6 F1                    2017 	.db #0xf1	; 241
      0006E7                       2018 _color_dust_1:
      0006E7 F1                    2019 	.db #0xf1	; 241
      0006E8 F1                    2020 	.db #0xf1	; 241
      0006E9 F1                    2021 	.db #0xf1	; 241
      0006EA F1                    2022 	.db #0xf1	; 241
      0006EB F1                    2023 	.db #0xf1	; 241
      0006EC F1                    2024 	.db #0xf1	; 241
      0006ED F1                    2025 	.db #0xf1	; 241
      0006EE F1                    2026 	.db #0xf1	; 241
      0006EF                       2027 _color_dust_2:
      0006EF F1                    2028 	.db #0xf1	; 241
      0006F0 F1                    2029 	.db #0xf1	; 241
      0006F1 F1                    2030 	.db #0xf1	; 241
      0006F2 F1                    2031 	.db #0xf1	; 241
      0006F3 F1                    2032 	.db #0xf1	; 241
      0006F4 F1                    2033 	.db #0xf1	; 241
      0006F5 F1                    2034 	.db #0xf1	; 241
      0006F6 F1                    2035 	.db #0xf1	; 241
      0006F7                       2036 _color_dust_3:
      0006F7 F1                    2037 	.db #0xf1	; 241
      0006F8 F1                    2038 	.db #0xf1	; 241
      0006F9 F1                    2039 	.db #0xf1	; 241
      0006FA F1                    2040 	.db #0xf1	; 241
      0006FB F1                    2041 	.db #0xf1	; 241
      0006FC F1                    2042 	.db #0xf1	; 241
      0006FD F1                    2043 	.db #0xf1	; 241
      0006FE F1                    2044 	.db #0xf1	; 241
      0006FF                       2045 _color_font_1:
      0006FF F1                    2046 	.db #0xf1	; 241
      000700 F1                    2047 	.db #0xf1	; 241
      000701 E1                    2048 	.db #0xe1	; 225
      000702 71                    2049 	.db #0x71	; 113	'q'
      000703 71                    2050 	.db #0x71	; 113	'q'
      000704 51                    2051 	.db #0x51	; 81	'Q'
      000705 51                    2052 	.db #0x51	; 81	'Q'
      000706 41                    2053 	.db #0x41	; 65	'A'
      000707                       2054 _color_font_2:
      000707 61                    2055 	.db #0x61	; 97	'a'
      000708 61                    2056 	.db #0x61	; 97	'a'
      000709 81                    2057 	.db #0x81	; 129
      00070A 81                    2058 	.db #0x81	; 129
      00070B 91                    2059 	.db #0x91	; 145
      00070C 91                    2060 	.db #0x91	; 145
      00070D E1                    2061 	.db #0xe1	; 225
      00070E E1                    2062 	.db #0xe1	; 225
      00070F                       2063 _color_title_1:
      00070F A1                    2064 	.db #0xa1	; 161
      000710 A1                    2065 	.db #0xa1	; 161
      000711 A1                    2066 	.db #0xa1	; 161
      000712 A1                    2067 	.db #0xa1	; 161
      000713 A1                    2068 	.db #0xa1	; 161
      000714 A1                    2069 	.db #0xa1	; 161
      000715 A1                    2070 	.db #0xa1	; 161
      000716 A1                    2071 	.db #0xa1	; 161
      000717                       2072 _color_title_2:
      000717 B1                    2073 	.db #0xb1	; 177
      000718 B1                    2074 	.db #0xb1	; 177
      000719 B1                    2075 	.db #0xb1	; 177
      00071A B1                    2076 	.db #0xb1	; 177
      00071B B1                    2077 	.db #0xb1	; 177
      00071C B1                    2078 	.db #0xb1	; 177
      00071D B1                    2079 	.db #0xb1	; 177
      00071E B1                    2080 	.db #0xb1	; 177
      00071F                       2081 _color_title_3:
      00071F D1                    2082 	.db #0xd1	; 209
      000720 D1                    2083 	.db #0xd1	; 209
      000721 D1                    2084 	.db #0xd1	; 209
      000722 D1                    2085 	.db #0xd1	; 209
      000723 D1                    2086 	.db #0xd1	; 209
      000724 D1                    2087 	.db #0xd1	; 209
      000725 D1                    2088 	.db #0xd1	; 209
      000726 D1                    2089 	.db #0xd1	; 209
      000727                       2090 _color_title_4:
      000727 F1                    2091 	.db #0xf1	; 241
      000728 F1                    2092 	.db #0xf1	; 241
      000729 F1                    2093 	.db #0xf1	; 241
      00072A F1                    2094 	.db #0xf1	; 241
      00072B F1                    2095 	.db #0xf1	; 241
      00072C F1                    2096 	.db #0xf1	; 241
      00072D F1                    2097 	.db #0xf1	; 241
      00072E F1                    2098 	.db #0xf1	; 241
      00072F                       2099 _color_title_5:
      00072F 71                    2100 	.db #0x71	; 113	'q'
      000730 71                    2101 	.db #0x71	; 113	'q'
      000731 71                    2102 	.db #0x71	; 113	'q'
      000732 71                    2103 	.db #0x71	; 113	'q'
      000733 71                    2104 	.db #0x71	; 113	'q'
      000734 71                    2105 	.db #0x71	; 113	'q'
      000735 71                    2106 	.db #0x71	; 113	'q'
      000736 71                    2107 	.db #0x71	; 113	'q'
      000737                       2108 _color_title_6:
      000737 51                    2109 	.db #0x51	; 81	'Q'
      000738 51                    2110 	.db #0x51	; 81	'Q'
      000739 51                    2111 	.db #0x51	; 81	'Q'
      00073A 51                    2112 	.db #0x51	; 81	'Q'
      00073B 51                    2113 	.db #0x51	; 81	'Q'
      00073C 51                    2114 	.db #0x51	; 81	'Q'
      00073D 51                    2115 	.db #0x51	; 81	'Q'
      00073E 51                    2116 	.db #0x51	; 81	'Q'
      00073F                       2117 _color_title_7:
      00073F 41                    2118 	.db #0x41	; 65	'A'
      000740 41                    2119 	.db #0x41	; 65	'A'
      000741 41                    2120 	.db #0x41	; 65	'A'
      000742 41                    2121 	.db #0x41	; 65	'A'
      000743 41                    2122 	.db #0x41	; 65	'A'
      000744 41                    2123 	.db #0x41	; 65	'A'
      000745 41                    2124 	.db #0x41	; 65	'A'
      000746 41                    2125 	.db #0x41	; 65	'A'
      000747                       2126 _sprite_arrow_0:
      000747 00                    2127 	.db #0x00	; 0
      000748 00                    2128 	.db #0x00	; 0
      000749 00                    2129 	.db #0x00	; 0
      00074A 00                    2130 	.db #0x00	; 0
      00074B 00                    2131 	.db #0x00	; 0
      00074C 00                    2132 	.db #0x00	; 0
      00074D 00                    2133 	.db #0x00	; 0
      00074E 00                    2134 	.db #0x00	; 0
      00074F                       2135 _sprite_arrow_1:
      00074F FF                    2136 	.db #0xff	; 255
      000750 00                    2137 	.db #0x00	; 0
      000751 3F                    2138 	.db #0x3f	; 63
      000752 00                    2139 	.db #0x00	; 0
      000753 0F                    2140 	.db #0x0f	; 15
      000754 00                    2141 	.db #0x00	; 0
      000755 03                    2142 	.db #0x03	; 3
      000756 00                    2143 	.db #0x00	; 0
      000757                       2144 _sprite_arrow_2:
      000757 00                    2145 	.db #0x00	; 0
      000758 00                    2146 	.db #0x00	; 0
      000759 00                    2147 	.db #0x00	; 0
      00075A 00                    2148 	.db #0x00	; 0
      00075B 00                    2149 	.db #0x00	; 0
      00075C 00                    2150 	.db #0x00	; 0
      00075D 00                    2151 	.db #0x00	; 0
      00075E 00                    2152 	.db #0x00	; 0
      00075F                       2153 _sprite_arrow_3:
      00075F FF                    2154 	.db #0xff	; 255
      000760 00                    2155 	.db #0x00	; 0
      000761 FC                    2156 	.db #0xfc	; 252
      000762 00                    2157 	.db #0x00	; 0
      000763 F0                    2158 	.db #0xf0	; 240
      000764 00                    2159 	.db #0x00	; 0
      000765 C0                    2160 	.db #0xc0	; 192
      000766 00                    2161 	.db #0x00	; 0
      000767                       2162 _sprite_hit_1:
      000767 00                    2163 	.db #0x00	; 0
      000768 77                    2164 	.db #0x77	; 119	'w'
      000769 22                    2165 	.db #0x22	; 34
      00076A 22                    2166 	.db #0x22	; 34
      00076B 22                    2167 	.db #0x22	; 34
      00076C 3E                    2168 	.db #0x3e	; 62
      00076D 22                    2169 	.db #0x22	; 34
      00076E 22                    2170 	.db #0x22	; 34
      00076F 22                    2171 	.db #0x22	; 34
      000770 77                    2172 	.db #0x77	; 119	'w'
      000771 00                    2173 	.db #0x00	; 0
      000772 00                    2174 	.db #0x00	; 0
      000773 00                    2175 	.db #0x00	; 0
      000774 00                    2176 	.db #0x00	; 0
      000775 00                    2177 	.db #0x00	; 0
      000776 00                    2178 	.db #0x00	; 0
      000777 00                    2179 	.db #0x00	; 0
      000778 77                    2180 	.db #0x77	; 119	'w'
      000779 25                    2181 	.db #0x25	; 37
      00077A 21                    2182 	.db #0x21	; 33
      00077B 21                    2183 	.db #0x21	; 33
      00077C 21                    2184 	.db #0x21	; 33
      00077D 21                    2185 	.db #0x21	; 33
      00077E 21                    2186 	.db #0x21	; 33
      00077F 21                    2187 	.db #0x21	; 33
      000780 73                    2188 	.db #0x73	; 115	's'
      000781 00                    2189 	.db #0x00	; 0
      000782 00                    2190 	.db #0x00	; 0
      000783 00                    2191 	.db #0x00	; 0
      000784 00                    2192 	.db #0x00	; 0
      000785 00                    2193 	.db #0x00	; 0
      000786 00                    2194 	.db #0x00	; 0
      000787                       2195 _sprite_hit_2:
      000787 00                    2196 	.db #0x00	; 0
      000788 C0                    2197 	.db #0xc0	; 192
      000789 40                    2198 	.db #0x40	; 64
      00078A 00                    2199 	.db #0x00	; 0
      00078B 00                    2200 	.db #0x00	; 0
      00078C 00                    2201 	.db #0x00	; 0
      00078D 00                    2202 	.db #0x00	; 0
      00078E 00                    2203 	.db #0x00	; 0
      00078F 00                    2204 	.db #0x00	; 0
      000790 80                    2205 	.db #0x80	; 128
      000791 00                    2206 	.db #0x00	; 0
      000792 00                    2207 	.db #0x00	; 0
      000793 00                    2208 	.db #0x00	; 0
      000794 00                    2209 	.db #0x00	; 0
      000795 00                    2210 	.db #0x00	; 0
      000796 00                    2211 	.db #0x00	; 0
      000797 00                    2212 	.db #0x00	; 0
      000798 00                    2213 	.db #0x00	; 0
      000799 00                    2214 	.db #0x00	; 0
      00079A 00                    2215 	.db #0x00	; 0
      00079B 00                    2216 	.db #0x00	; 0
      00079C 00                    2217 	.db #0x00	; 0
      00079D 00                    2218 	.db #0x00	; 0
      00079E 00                    2219 	.db #0x00	; 0
      00079F 00                    2220 	.db #0x00	; 0
      0007A0 00                    2221 	.db #0x00	; 0
      0007A1 00                    2222 	.db #0x00	; 0
      0007A2 00                    2223 	.db #0x00	; 0
      0007A3 00                    2224 	.db #0x00	; 0
      0007A4 00                    2225 	.db #0x00	; 0
      0007A5 00                    2226 	.db #0x00	; 0
      0007A6 00                    2227 	.db #0x00	; 0
      0007A7                       2228 _sprite_combo_1:
      0007A7 00                    2229 	.db #0x00	; 0
      0007A8 38                    2230 	.db #0x38	; 56	'8'
      0007A9 65                    2231 	.db #0x65	; 101	'e'
      0007AA 61                    2232 	.db #0x61	; 97	'a'
      0007AB 61                    2233 	.db #0x61	; 97	'a'
      0007AC 61                    2234 	.db #0x61	; 97	'a'
      0007AD 61                    2235 	.db #0x61	; 97	'a'
      0007AE 61                    2236 	.db #0x61	; 97	'a'
      0007AF 65                    2237 	.db #0x65	; 101	'e'
      0007B0 38                    2238 	.db #0x38	; 56	'8'
      0007B1 00                    2239 	.db #0x00	; 0
      0007B2 00                    2240 	.db #0x00	; 0
      0007B3 00                    2241 	.db #0x00	; 0
      0007B4 00                    2242 	.db #0x00	; 0
      0007B5 00                    2243 	.db #0x00	; 0
      0007B6 00                    2244 	.db #0x00	; 0
      0007B7 00                    2245 	.db #0x00	; 0
      0007B8 E6                    2246 	.db #0xe6	; 230
      0007B9 13                    2247 	.db #0x13	; 19
      0007BA 12                    2248 	.db #0x12	; 18
      0007BB 12                    2249 	.db #0x12	; 18
      0007BC 12                    2250 	.db #0x12	; 18
      0007BD 12                    2251 	.db #0x12	; 18
      0007BE 12                    2252 	.db #0x12	; 18
      0007BF 12                    2253 	.db #0x12	; 18
      0007C0 E7                    2254 	.db #0xe7	; 231
      0007C1 00                    2255 	.db #0x00	; 0
      0007C2 00                    2256 	.db #0x00	; 0
      0007C3 00                    2257 	.db #0x00	; 0
      0007C4 00                    2258 	.db #0x00	; 0
      0007C5 00                    2259 	.db #0x00	; 0
      0007C6 00                    2260 	.db #0x00	; 0
      0007C7                       2261 _sprite_combo_2:
      0007C7 00                    2262 	.db #0x00	; 0
      0007C8 37                    2263 	.db #0x37	; 55	'7'
      0007C9 62                    2264 	.db #0x62	; 98	'b'
      0007CA A2                    2265 	.db #0xa2	; 162
      0007CB 22                    2266 	.db #0x22	; 34
      0007CC 23                    2267 	.db #0x23	; 35
      0007CD 22                    2268 	.db #0x22	; 34
      0007CE 22                    2269 	.db #0x22	; 34
      0007CF 22                    2270 	.db #0x22	; 34
      0007D0 77                    2271 	.db #0x77	; 119	'w'
      0007D1 00                    2272 	.db #0x00	; 0
      0007D2 00                    2273 	.db #0x00	; 0
      0007D3 00                    2274 	.db #0x00	; 0
      0007D4 00                    2275 	.db #0x00	; 0
      0007D5 00                    2276 	.db #0x00	; 0
      0007D6 00                    2277 	.db #0x00	; 0
      0007D7 00                    2278 	.db #0x00	; 0
      0007D8 8E                    2279 	.db #0x8e	; 142
      0007D9 51                    2280 	.db #0x51	; 81	'Q'
      0007DA 51                    2281 	.db #0x51	; 81	'Q'
      0007DB 51                    2282 	.db #0x51	; 81	'Q'
      0007DC 91                    2283 	.db #0x91	; 145
      0007DD 51                    2284 	.db #0x51	; 81	'Q'
      0007DE 51                    2285 	.db #0x51	; 81	'Q'
      0007DF 51                    2286 	.db #0x51	; 81	'Q'
      0007E0 8E                    2287 	.db #0x8e	; 142
      0007E1 00                    2288 	.db #0x00	; 0
      0007E2 00                    2289 	.db #0x00	; 0
      0007E3 00                    2290 	.db #0x00	; 0
      0007E4 00                    2291 	.db #0x00	; 0
      0007E5 00                    2292 	.db #0x00	; 0
      0007E6 00                    2293 	.db #0x00	; 0
      0007E7                       2294 _sprite_2x:
      0007E7 00                    2295 	.db #0x00	; 0
      0007E8 3E                    2296 	.db #0x3e	; 62
      0007E9 63                    2297 	.db #0x63	; 99	'c'
      0007EA 03                    2298 	.db #0x03	; 3
      0007EB 03                    2299 	.db #0x03	; 3
      0007EC 1E                    2300 	.db #0x1e	; 30
      0007ED 30                    2301 	.db #0x30	; 48	'0'
      0007EE 60                    2302 	.db #0x60	; 96
      0007EF 60                    2303 	.db #0x60	; 96
      0007F0 7F                    2304 	.db #0x7f	; 127
      0007F1 00                    2305 	.db #0x00	; 0
      0007F2 00                    2306 	.db #0x00	; 0
      0007F3 00                    2307 	.db #0x00	; 0
      0007F4 00                    2308 	.db #0x00	; 0
      0007F5 00                    2309 	.db #0x00	; 0
      0007F6 00                    2310 	.db #0x00	; 0
      0007F7 00                    2311 	.db #0x00	; 0
      0007F8 00                    2312 	.db #0x00	; 0
      0007F9 00                    2313 	.db #0x00	; 0
      0007FA 63                    2314 	.db #0x63	; 99	'c'
      0007FB 36                    2315 	.db #0x36	; 54	'6'
      0007FC 1C                    2316 	.db #0x1c	; 28
      0007FD 08                    2317 	.db #0x08	; 8
      0007FE 1C                    2318 	.db #0x1c	; 28
      0007FF 36                    2319 	.db #0x36	; 54	'6'
      000800 63                    2320 	.db #0x63	; 99	'c'
      000801 00                    2321 	.db #0x00	; 0
      000802 00                    2322 	.db #0x00	; 0
      000803 00                    2323 	.db #0x00	; 0
      000804 00                    2324 	.db #0x00	; 0
      000805 00                    2325 	.db #0x00	; 0
      000806 00                    2326 	.db #0x00	; 0
      000807                       2327 _sprite_3x:
      000807 00                    2328 	.db #0x00	; 0
      000808 3E                    2329 	.db #0x3e	; 62
      000809 63                    2330 	.db #0x63	; 99	'c'
      00080A 03                    2331 	.db #0x03	; 3
      00080B 03                    2332 	.db #0x03	; 3
      00080C 1E                    2333 	.db #0x1e	; 30
      00080D 03                    2334 	.db #0x03	; 3
      00080E 03                    2335 	.db #0x03	; 3
      00080F 63                    2336 	.db #0x63	; 99	'c'
      000810 3E                    2337 	.db #0x3e	; 62
      000811 00                    2338 	.db #0x00	; 0
      000812 00                    2339 	.db #0x00	; 0
      000813 00                    2340 	.db #0x00	; 0
      000814 00                    2341 	.db #0x00	; 0
      000815 00                    2342 	.db #0x00	; 0
      000816 00                    2343 	.db #0x00	; 0
      000817 00                    2344 	.db #0x00	; 0
      000818 00                    2345 	.db #0x00	; 0
      000819 00                    2346 	.db #0x00	; 0
      00081A 63                    2347 	.db #0x63	; 99	'c'
      00081B 36                    2348 	.db #0x36	; 54	'6'
      00081C 1C                    2349 	.db #0x1c	; 28
      00081D 08                    2350 	.db #0x08	; 8
      00081E 1C                    2351 	.db #0x1c	; 28
      00081F 36                    2352 	.db #0x36	; 54	'6'
      000820 63                    2353 	.db #0x63	; 99	'c'
      000821 00                    2354 	.db #0x00	; 0
      000822 00                    2355 	.db #0x00	; 0
      000823 00                    2356 	.db #0x00	; 0
      000824 00                    2357 	.db #0x00	; 0
      000825 00                    2358 	.db #0x00	; 0
      000826 00                    2359 	.db #0x00	; 0
      000827                       2360 _sprite_4x:
      000827 00                    2361 	.db #0x00	; 0
      000828 02                    2362 	.db #0x02	; 2
      000829 06                    2363 	.db #0x06	; 6
      00082A 0E                    2364 	.db #0x0e	; 14
      00082B 16                    2365 	.db #0x16	; 22
      00082C 26                    2366 	.db #0x26	; 38
      00082D 7F                    2367 	.db #0x7f	; 127
      00082E 06                    2368 	.db #0x06	; 6
      00082F 06                    2369 	.db #0x06	; 6
      000830 0F                    2370 	.db #0x0f	; 15
      000831 00                    2371 	.db #0x00	; 0
      000832 00                    2372 	.db #0x00	; 0
      000833 00                    2373 	.db #0x00	; 0
      000834 00                    2374 	.db #0x00	; 0
      000835 00                    2375 	.db #0x00	; 0
      000836 00                    2376 	.db #0x00	; 0
      000837 00                    2377 	.db #0x00	; 0
      000838 00                    2378 	.db #0x00	; 0
      000839 00                    2379 	.db #0x00	; 0
      00083A 63                    2380 	.db #0x63	; 99	'c'
      00083B 36                    2381 	.db #0x36	; 54	'6'
      00083C 1C                    2382 	.db #0x1c	; 28
      00083D 08                    2383 	.db #0x08	; 8
      00083E 1C                    2384 	.db #0x1c	; 28
      00083F 36                    2385 	.db #0x36	; 54	'6'
      000840 63                    2386 	.db #0x63	; 99	'c'
      000841 00                    2387 	.db #0x00	; 0
      000842 00                    2388 	.db #0x00	; 0
      000843 00                    2389 	.db #0x00	; 0
      000844 00                    2390 	.db #0x00	; 0
      000845 00                    2391 	.db #0x00	; 0
      000846 00                    2392 	.db #0x00	; 0
      000847                       2393 _sprite_5x:
      000847 00                    2394 	.db #0x00	; 0
      000848 7E                    2395 	.db #0x7e	; 126
      000849 60                    2396 	.db #0x60	; 96
      00084A 60                    2397 	.db #0x60	; 96
      00084B 7E                    2398 	.db #0x7e	; 126
      00084C 03                    2399 	.db #0x03	; 3
      00084D 03                    2400 	.db #0x03	; 3
      00084E 03                    2401 	.db #0x03	; 3
      00084F 63                    2402 	.db #0x63	; 99	'c'
      000850 3E                    2403 	.db #0x3e	; 62
      000851 00                    2404 	.db #0x00	; 0
      000852 00                    2405 	.db #0x00	; 0
      000853 00                    2406 	.db #0x00	; 0
      000854 00                    2407 	.db #0x00	; 0
      000855 00                    2408 	.db #0x00	; 0
      000856 00                    2409 	.db #0x00	; 0
      000857 00                    2410 	.db #0x00	; 0
      000858 00                    2411 	.db #0x00	; 0
      000859 00                    2412 	.db #0x00	; 0
      00085A 63                    2413 	.db #0x63	; 99	'c'
      00085B 36                    2414 	.db #0x36	; 54	'6'
      00085C 1C                    2415 	.db #0x1c	; 28
      00085D 08                    2416 	.db #0x08	; 8
      00085E 1C                    2417 	.db #0x1c	; 28
      00085F 36                    2418 	.db #0x36	; 54	'6'
      000860 63                    2419 	.db #0x63	; 99	'c'
      000861 00                    2420 	.db #0x00	; 0
      000862 00                    2421 	.db #0x00	; 0
      000863 00                    2422 	.db #0x00	; 0
      000864 00                    2423 	.db #0x00	; 0
      000865 00                    2424 	.db #0x00	; 0
      000866 00                    2425 	.db #0x00	; 0
      000867                       2426 _sprite_6x:
      000867 00                    2427 	.db #0x00	; 0
      000868 3E                    2428 	.db #0x3e	; 62
      000869 61                    2429 	.db #0x61	; 97	'a'
      00086A 60                    2430 	.db #0x60	; 96
      00086B 7E                    2431 	.db #0x7e	; 126
      00086C 63                    2432 	.db #0x63	; 99	'c'
      00086D 63                    2433 	.db #0x63	; 99	'c'
      00086E 63                    2434 	.db #0x63	; 99	'c'
      00086F 63                    2435 	.db #0x63	; 99	'c'
      000870 3E                    2436 	.db #0x3e	; 62
      000871 00                    2437 	.db #0x00	; 0
      000872 00                    2438 	.db #0x00	; 0
      000873 00                    2439 	.db #0x00	; 0
      000874 00                    2440 	.db #0x00	; 0
      000875 00                    2441 	.db #0x00	; 0
      000876 00                    2442 	.db #0x00	; 0
      000877 00                    2443 	.db #0x00	; 0
      000878 00                    2444 	.db #0x00	; 0
      000879 00                    2445 	.db #0x00	; 0
      00087A 63                    2446 	.db #0x63	; 99	'c'
      00087B 36                    2447 	.db #0x36	; 54	'6'
      00087C 1C                    2448 	.db #0x1c	; 28
      00087D 08                    2449 	.db #0x08	; 8
      00087E 1C                    2450 	.db #0x1c	; 28
      00087F 36                    2451 	.db #0x36	; 54	'6'
      000880 63                    2452 	.db #0x63	; 99	'c'
      000881 00                    2453 	.db #0x00	; 0
      000882 00                    2454 	.db #0x00	; 0
      000883 00                    2455 	.db #0x00	; 0
      000884 00                    2456 	.db #0x00	; 0
      000885 00                    2457 	.db #0x00	; 0
      000886 00                    2458 	.db #0x00	; 0
      000887                       2459 _sprite_mega_hit:
      000887 04                    2460 	.db #0x04	; 4
      000888 06                    2461 	.db #0x06	; 6
      000889 05                    2462 	.db #0x05	; 5
      00088A 04                    2463 	.db #0x04	; 4
      00088B 04                    2464 	.db #0x04	; 4
      00088C 00                    2465 	.db #0x00	; 0
      00088D 03                    2466 	.db #0x03	; 3
      00088E 04                    2467 	.db #0x04	; 4
      00088F 05                    2468 	.db #0x05	; 5
      000890 04                    2469 	.db #0x04	; 4
      000891 03                    2470 	.db #0x03	; 3
      000892 00                    2471 	.db #0x00	; 0
      000893 00                    2472 	.db #0x00	; 0
      000894 00                    2473 	.db #0x00	; 0
      000895 00                    2474 	.db #0x00	; 0
      000896 00                    2475 	.db #0x00	; 0
      000897 5C                    2476 	.db #0x5c	; 92
      000898 D0                    2477 	.db #0xd0	; 208
      000899 5C                    2478 	.db #0x5c	; 92
      00089A 50                    2479 	.db #0x50	; 80	'P'
      00089B 5C                    2480 	.db #0x5c	; 92
      00089C 00                    2481 	.db #0x00	; 0
      00089D 98                    2482 	.db #0x98	; 152
      00089E 24                    2483 	.db #0x24	; 36
      00089F A4                    2484 	.db #0xa4	; 164
      0008A0 BC                    2485 	.db #0xbc	; 188
      0008A1 A4                    2486 	.db #0xa4	; 164
      0008A2 00                    2487 	.db #0x00	; 0
      0008A3 00                    2488 	.db #0x00	; 0
      0008A4 00                    2489 	.db #0x00	; 0
      0008A5 00                    2490 	.db #0x00	; 0
      0008A6 00                    2491 	.db #0x00	; 0
                                   2492 ;src\/Graphics.h:16: void DrawString(const char* str, byte col, byte line) {
                                   2493 ;	---------------------------------
                                   2494 ; Function DrawString
                                   2495 ; ---------------------------------
      0008A7                       2496 _DrawString::
      0008A7 DD E5            [15] 2497 	push	ix
      0008A9 DD 21 00 00      [14] 2498 	ld	ix,#0
      0008AD DD 39            [15] 2499 	add	ix,sp
                                   2500 ;src\/Graphics.h:17: while (*str) {
      0008AF DD 6E 06         [19] 2501 	ld	l, 6 (ix)
      0008B2 DD 4E 04         [19] 2502 	ld	c, 4 (ix)
      0008B5 DD 46 05         [19] 2503 	ld	b, 5 (ix)
      0008B8                       2504 00101$:
      0008B8 0A               [ 7] 2505 	ld	a, (bc)
      0008B9 B7               [ 4] 2506 	or	a, a
      0008BA 28 1A            [12] 2507 	jr	Z, 00104$
                                   2508 ;src\/Graphics.h:18: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0008BC 55               [ 4] 2509 	ld	d, l
      0008BD 2C               [ 4] 2510 	inc	l
      0008BE DD 75 06         [19] 2511 	ld	6 (ix), l
      0008C1 03               [ 6] 2512 	inc	bc
      0008C2 C6 0F            [ 7] 2513 	add	a, #0x0f
      0008C4 E5               [11] 2514 	push	hl
      0008C5 C5               [11] 2515 	push	bc
      0008C6 DD 66 07         [19] 2516 	ld	h, 7 (ix)
      0008C9 6A               [ 4] 2517 	ld	l, d
      0008CA E5               [11] 2518 	push	hl
      0008CB F5               [11] 2519 	push	af
      0008CC 33               [ 6] 2520 	inc	sp
      0008CD CDrEDr00         [17] 2521 	call	_DrawChar
      0008D0 F1               [10] 2522 	pop	af
      0008D1 33               [ 6] 2523 	inc	sp
      0008D2 C1               [10] 2524 	pop	bc
      0008D3 E1               [10] 2525 	pop	hl
      0008D4 18 E2            [12] 2526 	jr	00101$
      0008D6                       2527 00104$:
                                   2528 ;src\/Graphics.h:20: }
      0008D6 DD E1            [14] 2529 	pop	ix
      0008D8 C9               [10] 2530 	ret
                                   2531 ;src\/Graphics.h:22: void DrawNumber(word number, byte col, byte line) {
                                   2532 ;	---------------------------------
                                   2533 ; Function DrawNumber
                                   2534 ; ---------------------------------
      0008D9                       2535 _DrawNumber::
      0008D9 DD E5            [15] 2536 	push	ix
      0008DB DD 21 00 00      [14] 2537 	ld	ix,#0
      0008DF DD 39            [15] 2538 	add	ix,sp
      0008E1 21 FA FF         [10] 2539 	ld	hl, #-6
      0008E4 39               [11] 2540 	add	hl, sp
      0008E5 F9               [ 6] 2541 	ld	sp, hl
                                   2542 ;src\/Graphics.h:25: bool trailingZero = TRUE;
      0008E6 DD 36 FA 01      [19] 2543 	ld	-6 (ix), #0x01
                                   2544 ;src\/Graphics.h:27: DrawString("      ", col, line); // Clear space for number (6 digits)
      0008EA DD 66 07         [19] 2545 	ld	h, 7 (ix)
      0008ED DD 6E 06         [19] 2546 	ld	l, 6 (ix)
      0008F0 E5               [11] 2547 	push	hl
      0008F1 21r8Dr09         [10] 2548 	ld	hl, #___str_0
      0008F4 E5               [11] 2549 	push	hl
      0008F5 CDrA7r08         [17] 2550 	call	_DrawString
      0008F8 F1               [10] 2551 	pop	af
      0008F9 F1               [10] 2552 	pop	af
                                   2553 ;src\/Graphics.h:29: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0008FA DD 7E 06         [19] 2554 	ld	a, 6 (ix)
      0008FD DD 77 FF         [19] 2555 	ld	-1 (ix), a
      000900 1E 06            [ 7] 2556 	ld	e, #0x06
      000902                       2557 00109$:
      000902 7B               [ 4] 2558 	ld	a, e
      000903 B7               [ 4] 2559 	or	a, a
      000904 CAr88r09         [10] 2560 	jp	Z, 00111$
                                   2561 ;src\/Graphics.h:31: power = Power(10, i - 1);
      000907 7B               [ 4] 2562 	ld	a, e
      000908 3D               [ 4] 2563 	dec	a
      000909 D5               [11] 2564 	push	de
      00090A 57               [ 4] 2565 	ld	d,a
      00090B 1E 0A            [ 7] 2566 	ld	e,#0x0a
      00090D D5               [11] 2567 	push	de
      00090E CDr1Dr00         [17] 2568 	call	_Power
      000911 F1               [10] 2569 	pop	af
      000912 D1               [10] 2570 	pop	de
      000913 DD 75 FB         [19] 2571 	ld	-5 (ix), l
      000916 DD 74 FC         [19] 2572 	ld	-4 (ix), h
                                   2573 ;src\/Graphics.h:33: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000919 D5               [11] 2574 	push	de
      00091A DD 6E FB         [19] 2575 	ld	l, -5 (ix)
      00091D DD 66 FC         [19] 2576 	ld	h, -4 (ix)
      000920 E5               [11] 2577 	push	hl
      000921 DD 6E 04         [19] 2578 	ld	l, 4 (ix)
      000924 DD 66 05         [19] 2579 	ld	h, 5 (ix)
      000927 E5               [11] 2580 	push	hl
      000928 CDr00r00         [17] 2581 	call	__divuint
      00092B F1               [10] 2582 	pop	af
      00092C F1               [10] 2583 	pop	af
      00092D DD 75 FD         [19] 2584 	ld	-3 (ix), l
      000930 DD 74 FE         [19] 2585 	ld	-2 (ix), h
      000933 D1               [10] 2586 	pop	de
      000934 DD 7E FA         [19] 2587 	ld	a, -6 (ix)
      000937 B7               [ 4] 2588 	or	a, a
      000938 28 0C            [12] 2589 	jr	Z, 00102$
      00093A DD 7E FE         [19] 2590 	ld	a, -2 (ix)
      00093D DD B6 FD         [19] 2591 	or	a, -3 (ix)
      000940 28 04            [12] 2592 	jr	Z, 00102$
      000942 DD 36 FA 00      [19] 2593 	ld	-6 (ix), #0
      000946                       2594 00102$:
                                   2595 ;src\/Graphics.h:35: if(!trailingZero || i == 1) {
      000946 DD 7E FA         [19] 2596 	ld	a, -6 (ix)
      000949 B7               [ 4] 2597 	or	a, a
      00094A 28 04            [12] 2598 	jr	Z, 00104$
      00094C 7B               [ 4] 2599 	ld	a, e
      00094D 3D               [ 4] 2600 	dec	a
      00094E 20 31            [12] 2601 	jr	NZ, 00105$
      000950                       2602 00104$:
                                   2603 ;src\/Graphics.h:36: DrawChar((number / power) + CHAR_0, col, line);
      000950 DD 7E FD         [19] 2604 	ld	a, -3 (ix)
      000953 C6 3F            [ 7] 2605 	add	a, #0x3f
      000955 D5               [11] 2606 	push	de
      000956 DD 66 07         [19] 2607 	ld	h, 7 (ix)
      000959 E5               [11] 2608 	push	hl
      00095A 33               [ 6] 2609 	inc	sp
      00095B DD 66 FF         [19] 2610 	ld	h, -1 (ix)
      00095E E5               [11] 2611 	push	hl
      00095F 33               [ 6] 2612 	inc	sp
      000960 F5               [11] 2613 	push	af
      000961 33               [ 6] 2614 	inc	sp
      000962 CDrEDr00         [17] 2615 	call	_DrawChar
      000965 F1               [10] 2616 	pop	af
      000966 33               [ 6] 2617 	inc	sp
      000967 DD 6E FB         [19] 2618 	ld	l, -5 (ix)
      00096A DD 66 FC         [19] 2619 	ld	h, -4 (ix)
      00096D E5               [11] 2620 	push	hl
      00096E DD 6E 04         [19] 2621 	ld	l, 4 (ix)
      000971 DD 66 05         [19] 2622 	ld	h, 5 (ix)
      000974 E5               [11] 2623 	push	hl
      000975 CDr00r00         [17] 2624 	call	__moduint
      000978 F1               [10] 2625 	pop	af
      000979 F1               [10] 2626 	pop	af
      00097A D1               [10] 2627 	pop	de
      00097B DD 75 04         [19] 2628 	ld	4 (ix), l
      00097E DD 74 05         [19] 2629 	ld	5 (ix), h
      000981                       2630 00105$:
                                   2631 ;src\/Graphics.h:40: col++;
      000981 DD 34 FF         [23] 2632 	inc	-1 (ix)
                                   2633 ;src\/Graphics.h:29: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000984 1D               [ 4] 2634 	dec	e
      000985 C3r02r09         [10] 2635 	jp	00109$
      000988                       2636 00111$:
                                   2637 ;src\/Graphics.h:45: }
      000988 DD F9            [10] 2638 	ld	sp, ix
      00098A DD E1            [14] 2639 	pop	ix
      00098C C9               [10] 2640 	ret
      00098D                       2641 ___str_0:
      00098D 20 20 20 20 20 20     2642 	.ascii "      "
      000993 00                    2643 	.db 0x00
                                   2644 ;src\/Graphics.h:47: void DrawColumn(byte col) {
                                   2645 ;	---------------------------------
                                   2646 ; Function DrawColumn
                                   2647 ; ---------------------------------
      000994                       2648 _DrawColumn::
      000994 DD E5            [15] 2649 	push	ix
      000996 DD 21 00 00      [14] 2650 	ld	ix,#0
      00099A DD 39            [15] 2651 	add	ix,sp
      00099C 21 F9 FF         [10] 2652 	ld	hl, #-7
      00099F 39               [11] 2653 	add	hl, sp
      0009A0 F9               [ 6] 2654 	ld	sp, hl
                                   2655 ;src\/Graphics.h:48: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0009A1 DD 4E 04         [19] 2656 	ld	c, 4 (ix)
      0009A4 06 00            [ 7] 2657 	ld	b, #0x00
      0009A6 21 00 18         [10] 2658 	ld	hl, #0x1800
      0009A9 09               [11] 2659 	add	hl, bc
      0009AA C5               [11] 2660 	push	bc
      0009AB 3E 18            [ 7] 2661 	ld	a, #0x18
      0009AD F5               [11] 2662 	push	af
      0009AE 33               [ 6] 2663 	inc	sp
      0009AF E5               [11] 2664 	push	hl
      0009B0 CDr00r00         [17] 2665 	call	_WRTVRM
      0009B3 F1               [10] 2666 	pop	af
      0009B4 33               [ 6] 2667 	inc	sp
      0009B5 C1               [10] 2668 	pop	bc
                                   2669 ;src\/Graphics.h:49: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      0009B6 21 01 18         [10] 2670 	ld	hl, #0x1801
      0009B9 09               [11] 2671 	add	hl, bc
      0009BA C5               [11] 2672 	push	bc
      0009BB 3E 19            [ 7] 2673 	ld	a, #0x19
      0009BD F5               [11] 2674 	push	af
      0009BE 33               [ 6] 2675 	inc	sp
      0009BF E5               [11] 2676 	push	hl
      0009C0 CDr00r00         [17] 2677 	call	_WRTVRM
      0009C3 F1               [10] 2678 	pop	af
      0009C4 33               [ 6] 2679 	inc	sp
      0009C5 C1               [10] 2680 	pop	bc
                                   2681 ;src\/Graphics.h:50: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      0009C6 21 02 18         [10] 2682 	ld	hl, #0x1802
      0009C9 09               [11] 2683 	add	hl, bc
      0009CA C5               [11] 2684 	push	bc
      0009CB 3E 1A            [ 7] 2685 	ld	a, #0x1a
      0009CD F5               [11] 2686 	push	af
      0009CE 33               [ 6] 2687 	inc	sp
      0009CF E5               [11] 2688 	push	hl
      0009D0 CDr00r00         [17] 2689 	call	_WRTVRM
      0009D3 F1               [10] 2690 	pop	af
      0009D4 33               [ 6] 2691 	inc	sp
      0009D5 C1               [10] 2692 	pop	bc
                                   2693 ;src\/Graphics.h:51: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      0009D6 21 20 18         [10] 2694 	ld	hl, #0x1820
      0009D9 09               [11] 2695 	add	hl, bc
      0009DA C5               [11] 2696 	push	bc
      0009DB 3E 1B            [ 7] 2697 	ld	a, #0x1b
      0009DD F5               [11] 2698 	push	af
      0009DE 33               [ 6] 2699 	inc	sp
      0009DF E5               [11] 2700 	push	hl
      0009E0 CDr00r00         [17] 2701 	call	_WRTVRM
      0009E3 F1               [10] 2702 	pop	af
      0009E4 33               [ 6] 2703 	inc	sp
      0009E5 C1               [10] 2704 	pop	bc
                                   2705 ;src\/Graphics.h:52: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      0009E6 21 21 18         [10] 2706 	ld	hl, #0x1821
      0009E9 09               [11] 2707 	add	hl, bc
      0009EA C5               [11] 2708 	push	bc
      0009EB 3E 1C            [ 7] 2709 	ld	a, #0x1c
      0009ED F5               [11] 2710 	push	af
      0009EE 33               [ 6] 2711 	inc	sp
      0009EF E5               [11] 2712 	push	hl
      0009F0 CDr00r00         [17] 2713 	call	_WRTVRM
      0009F3 F1               [10] 2714 	pop	af
      0009F4 33               [ 6] 2715 	inc	sp
      0009F5 C1               [10] 2716 	pop	bc
                                   2717 ;src\/Graphics.h:53: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      0009F6 21 22 18         [10] 2718 	ld	hl, #0x1822
      0009F9 09               [11] 2719 	add	hl, bc
      0009FA C5               [11] 2720 	push	bc
      0009FB 3E 1D            [ 7] 2721 	ld	a, #0x1d
      0009FD F5               [11] 2722 	push	af
      0009FE 33               [ 6] 2723 	inc	sp
      0009FF E5               [11] 2724 	push	hl
      000A00 CDr00r00         [17] 2725 	call	_WRTVRM
      000A03 F1               [10] 2726 	pop	af
      000A04 33               [ 6] 2727 	inc	sp
      000A05 C1               [10] 2728 	pop	bc
                                   2729 ;src\/Graphics.h:55: for(byte i=0; i<20; i++) {
      000A06 21 40 18         [10] 2730 	ld	hl, #0x1840
      000A09 09               [11] 2731 	add	hl, bc
      000A0A E3               [19] 2732 	ex	(sp), hl
      000A0B 21 41 18         [10] 2733 	ld	hl, #0x1841
      000A0E 09               [11] 2734 	add	hl, bc
      000A0F DD 75 FB         [19] 2735 	ld	-5 (ix), l
      000A12 DD 74 FC         [19] 2736 	ld	-4 (ix), h
      000A15 21 42 18         [10] 2737 	ld	hl, #0x1842
      000A18 09               [11] 2738 	add	hl, bc
      000A19 DD 75 FD         [19] 2739 	ld	-3 (ix), l
      000A1C DD 74 FE         [19] 2740 	ld	-2 (ix), h
      000A1F DD 36 FF 00      [19] 2741 	ld	-1 (ix), #0
      000A23                       2742 00103$:
      000A23 DD 7E FF         [19] 2743 	ld	a, -1 (ix)
      000A26 D6 14            [ 7] 2744 	sub	a, #0x14
      000A28 30 4A            [12] 2745 	jr	NC, 00101$
                                   2746 ;src\/Graphics.h:56: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000A2A DD 5E FF         [19] 2747 	ld	e, -1 (ix)
      000A2D 16 00            [ 7] 2748 	ld	d, #0x00
      000A2F EB               [ 4] 2749 	ex	de, hl
      000A30 29               [11] 2750 	add	hl, hl
      000A31 29               [11] 2751 	add	hl, hl
      000A32 29               [11] 2752 	add	hl, hl
      000A33 29               [11] 2753 	add	hl, hl
      000A34 29               [11] 2754 	add	hl, hl
      000A35 EB               [ 4] 2755 	ex	de, hl
      000A36 E1               [10] 2756 	pop	hl
      000A37 E5               [11] 2757 	push	hl
      000A38 19               [11] 2758 	add	hl, de
      000A39 C5               [11] 2759 	push	bc
      000A3A D5               [11] 2760 	push	de
      000A3B 3E 1E            [ 7] 2761 	ld	a, #0x1e
      000A3D F5               [11] 2762 	push	af
      000A3E 33               [ 6] 2763 	inc	sp
      000A3F E5               [11] 2764 	push	hl
      000A40 CDr00r00         [17] 2765 	call	_WRTVRM
      000A43 F1               [10] 2766 	pop	af
      000A44 33               [ 6] 2767 	inc	sp
      000A45 D1               [10] 2768 	pop	de
      000A46 C1               [10] 2769 	pop	bc
                                   2770 ;src\/Graphics.h:57: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000A47 DD 6E FB         [19] 2771 	ld	l, -5 (ix)
      000A4A DD 66 FC         [19] 2772 	ld	h, -4 (ix)
      000A4D 19               [11] 2773 	add	hl, de
      000A4E C5               [11] 2774 	push	bc
      000A4F D5               [11] 2775 	push	de
      000A50 3E 1F            [ 7] 2776 	ld	a, #0x1f
      000A52 F5               [11] 2777 	push	af
      000A53 33               [ 6] 2778 	inc	sp
      000A54 E5               [11] 2779 	push	hl
      000A55 CDr00r00         [17] 2780 	call	_WRTVRM
      000A58 F1               [10] 2781 	pop	af
      000A59 33               [ 6] 2782 	inc	sp
      000A5A D1               [10] 2783 	pop	de
      000A5B C1               [10] 2784 	pop	bc
                                   2785 ;src\/Graphics.h:58: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000A5C DD 6E FD         [19] 2786 	ld	l, -3 (ix)
      000A5F DD 66 FE         [19] 2787 	ld	h, -2 (ix)
      000A62 19               [11] 2788 	add	hl, de
      000A63 C5               [11] 2789 	push	bc
      000A64 3E 20            [ 7] 2790 	ld	a, #0x20
      000A66 F5               [11] 2791 	push	af
      000A67 33               [ 6] 2792 	inc	sp
      000A68 E5               [11] 2793 	push	hl
      000A69 CDr00r00         [17] 2794 	call	_WRTVRM
      000A6C F1               [10] 2795 	pop	af
      000A6D 33               [ 6] 2796 	inc	sp
      000A6E C1               [10] 2797 	pop	bc
                                   2798 ;src\/Graphics.h:55: for(byte i=0; i<20; i++) {
      000A6F DD 34 FF         [23] 2799 	inc	-1 (ix)
      000A72 18 AF            [12] 2800 	jr	00103$
      000A74                       2801 00101$:
                                   2802 ;src\/Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000A74 21 00 19         [10] 2803 	ld	hl, #0x1900
      000A77 09               [11] 2804 	add	hl, bc
      000A78 C5               [11] 2805 	push	bc
      000A79 3E 21            [ 7] 2806 	ld	a, #0x21
      000A7B F5               [11] 2807 	push	af
      000A7C 33               [ 6] 2808 	inc	sp
      000A7D E5               [11] 2809 	push	hl
      000A7E CDr00r00         [17] 2810 	call	_WRTVRM
      000A81 F1               [10] 2811 	pop	af
      000A82 33               [ 6] 2812 	inc	sp
      000A83 C1               [10] 2813 	pop	bc
                                   2814 ;src\/Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000A84 21 01 19         [10] 2815 	ld	hl, #0x1901
      000A87 09               [11] 2816 	add	hl, bc
      000A88 C5               [11] 2817 	push	bc
      000A89 3E 22            [ 7] 2818 	ld	a, #0x22
      000A8B F5               [11] 2819 	push	af
      000A8C 33               [ 6] 2820 	inc	sp
      000A8D E5               [11] 2821 	push	hl
      000A8E CDr00r00         [17] 2822 	call	_WRTVRM
      000A91 F1               [10] 2823 	pop	af
      000A92 33               [ 6] 2824 	inc	sp
      000A93 C1               [10] 2825 	pop	bc
                                   2826 ;src\/Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000A94 21 02 19         [10] 2827 	ld	hl, #0x1902
      000A97 09               [11] 2828 	add	hl, bc
      000A98 C5               [11] 2829 	push	bc
      000A99 3E 23            [ 7] 2830 	ld	a, #0x23
      000A9B F5               [11] 2831 	push	af
      000A9C 33               [ 6] 2832 	inc	sp
      000A9D E5               [11] 2833 	push	hl
      000A9E CDr00r00         [17] 2834 	call	_WRTVRM
      000AA1 F1               [10] 2835 	pop	af
      000AA2 33               [ 6] 2836 	inc	sp
      000AA3 C1               [10] 2837 	pop	bc
                                   2838 ;src\/Graphics.h:65: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000AA4 21 00 1A         [10] 2839 	ld	hl, #0x1a00
      000AA7 09               [11] 2840 	add	hl, bc
      000AA8 C5               [11] 2841 	push	bc
      000AA9 3E 21            [ 7] 2842 	ld	a, #0x21
      000AAB F5               [11] 2843 	push	af
      000AAC 33               [ 6] 2844 	inc	sp
      000AAD E5               [11] 2845 	push	hl
      000AAE CDr00r00         [17] 2846 	call	_WRTVRM
      000AB1 F1               [10] 2847 	pop	af
      000AB2 33               [ 6] 2848 	inc	sp
      000AB3 C1               [10] 2849 	pop	bc
                                   2850 ;src\/Graphics.h:66: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000AB4 21 01 1A         [10] 2851 	ld	hl, #0x1a01
      000AB7 09               [11] 2852 	add	hl, bc
      000AB8 C5               [11] 2853 	push	bc
      000AB9 3E 22            [ 7] 2854 	ld	a, #0x22
      000ABB F5               [11] 2855 	push	af
      000ABC 33               [ 6] 2856 	inc	sp
      000ABD E5               [11] 2857 	push	hl
      000ABE CDr00r00         [17] 2858 	call	_WRTVRM
      000AC1 F1               [10] 2859 	pop	af
      000AC2 33               [ 6] 2860 	inc	sp
      000AC3 C1               [10] 2861 	pop	bc
                                   2862 ;src\/Graphics.h:67: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      000AC4 21 02 1A         [10] 2863 	ld	hl, #0x1a02
      000AC7 09               [11] 2864 	add	hl, bc
      000AC8 C5               [11] 2865 	push	bc
      000AC9 3E 23            [ 7] 2866 	ld	a, #0x23
      000ACB F5               [11] 2867 	push	af
      000ACC 33               [ 6] 2868 	inc	sp
      000ACD E5               [11] 2869 	push	hl
      000ACE CDr00r00         [17] 2870 	call	_WRTVRM
      000AD1 F1               [10] 2871 	pop	af
      000AD2 33               [ 6] 2872 	inc	sp
      000AD3 C1               [10] 2873 	pop	bc
                                   2874 ;src\/Graphics.h:69: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000AD4 21 C0 1A         [10] 2875 	ld	hl, #0x1ac0
      000AD7 09               [11] 2876 	add	hl, bc
      000AD8 C5               [11] 2877 	push	bc
      000AD9 3E 24            [ 7] 2878 	ld	a, #0x24
      000ADB F5               [11] 2879 	push	af
      000ADC 33               [ 6] 2880 	inc	sp
      000ADD E5               [11] 2881 	push	hl
      000ADE CDr00r00         [17] 2882 	call	_WRTVRM
      000AE1 F1               [10] 2883 	pop	af
      000AE2 33               [ 6] 2884 	inc	sp
      000AE3 C1               [10] 2885 	pop	bc
                                   2886 ;src\/Graphics.h:70: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000AE4 21 C1 1A         [10] 2887 	ld	hl, #0x1ac1
      000AE7 09               [11] 2888 	add	hl, bc
      000AE8 C5               [11] 2889 	push	bc
      000AE9 3E 25            [ 7] 2890 	ld	a, #0x25
      000AEB F5               [11] 2891 	push	af
      000AEC 33               [ 6] 2892 	inc	sp
      000AED E5               [11] 2893 	push	hl
      000AEE CDr00r00         [17] 2894 	call	_WRTVRM
      000AF1 F1               [10] 2895 	pop	af
      000AF2 33               [ 6] 2896 	inc	sp
      000AF3 C1               [10] 2897 	pop	bc
                                   2898 ;src\/Graphics.h:71: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000AF4 21 C2 1A         [10] 2899 	ld	hl, #0x1ac2
      000AF7 09               [11] 2900 	add	hl, bc
      000AF8 C5               [11] 2901 	push	bc
      000AF9 3E 26            [ 7] 2902 	ld	a, #0x26
      000AFB F5               [11] 2903 	push	af
      000AFC 33               [ 6] 2904 	inc	sp
      000AFD E5               [11] 2905 	push	hl
      000AFE CDr00r00         [17] 2906 	call	_WRTVRM
      000B01 F1               [10] 2907 	pop	af
      000B02 33               [ 6] 2908 	inc	sp
      000B03 C1               [10] 2909 	pop	bc
                                   2910 ;src\/Graphics.h:72: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000B04 21 E0 1A         [10] 2911 	ld	hl, #0x1ae0
      000B07 09               [11] 2912 	add	hl, bc
      000B08 C5               [11] 2913 	push	bc
      000B09 3E 27            [ 7] 2914 	ld	a, #0x27
      000B0B F5               [11] 2915 	push	af
      000B0C 33               [ 6] 2916 	inc	sp
      000B0D E5               [11] 2917 	push	hl
      000B0E CDr00r00         [17] 2918 	call	_WRTVRM
      000B11 F1               [10] 2919 	pop	af
      000B12 33               [ 6] 2920 	inc	sp
      000B13 C1               [10] 2921 	pop	bc
                                   2922 ;src\/Graphics.h:73: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000B14 21 E1 1A         [10] 2923 	ld	hl, #0x1ae1
      000B17 09               [11] 2924 	add	hl, bc
      000B18 C5               [11] 2925 	push	bc
      000B19 3E 28            [ 7] 2926 	ld	a, #0x28
      000B1B F5               [11] 2927 	push	af
      000B1C 33               [ 6] 2928 	inc	sp
      000B1D E5               [11] 2929 	push	hl
      000B1E CDr00r00         [17] 2930 	call	_WRTVRM
      000B21 F1               [10] 2931 	pop	af
      000B22 33               [ 6] 2932 	inc	sp
      000B23 C1               [10] 2933 	pop	bc
                                   2934 ;src\/Graphics.h:74: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000B24 21 E2 1A         [10] 2935 	ld	hl, #0x1ae2
      000B27 09               [11] 2936 	add	hl, bc
      000B28 3E 29            [ 7] 2937 	ld	a, #0x29
      000B2A F5               [11] 2938 	push	af
      000B2B 33               [ 6] 2939 	inc	sp
      000B2C E5               [11] 2940 	push	hl
      000B2D CDr00r00         [17] 2941 	call	_WRTVRM
                                   2942 ;src\/Graphics.h:75: }
      000B30 DD F9            [10] 2943 	ld	sp,ix
      000B32 DD E1            [14] 2944 	pop	ix
      000B34 C9               [10] 2945 	ret
                                   2946 ;src\/Graphics.h:77: void DrawScore() {
                                   2947 ;	---------------------------------
                                   2948 ; Function DrawScore
                                   2949 ; ---------------------------------
      000B35                       2950 _DrawScore::
      000B35 DD E5            [15] 2951 	push	ix
      000B37 DD 21 00 00      [14] 2952 	ld	ix,#0
      000B3B DD 39            [15] 2953 	add	ix,sp
      000B3D F5               [11] 2954 	push	af
                                   2955 ;src\/Graphics.h:78: byte bgCounter = 0, bgColor;
      000B3E DD 36 FE 00      [19] 2956 	ld	-2 (ix), #0
                                   2957 ;src\/Graphics.h:82: if(newLevel) {
      000B42 3Ar07r00         [13] 2958 	ld	a,(#_newLevel + 0)
      000B45 B7               [ 4] 2959 	or	a, a
      000B46 CAr32r0C         [10] 2960 	jp	Z, 00119$
                                   2961 ;src\/Graphics.h:83: for(byte i=0; i < 60; i++) {
      000B49 DD 36 FF 00      [19] 2962 	ld	-1 (ix), #0
      000B4D                       2963 00121$:
      000B4D DD 7E FF         [19] 2964 	ld	a, -1 (ix)
      000B50 D6 3C            [ 7] 2965 	sub	a, #0x3c
      000B52 D2r32r0C         [10] 2966 	jp	NC, 00119$
                                   2967 ;src\/Graphics.h:84: lastJiffy = JIFFY;
      000B55 ED 4B 9E FC      [20] 2968 	ld	bc, (_JIFFY)
                                   2969 ;src\/Graphics.h:85: while(lastJiffy == JIFFY) { }
      000B59                       2970 00101$:
      000B59 2A 9E FC         [16] 2971 	ld	hl, (_JIFFY)
      000B5C BF               [ 4] 2972 	cp	a, a
      000B5D ED 42            [15] 2973 	sbc	hl, bc
      000B5F 28 F8            [12] 2974 	jr	Z, 00101$
                                   2975 ;src\/Graphics.h:88: if(JIFFY & 0b00000110) {
      000B61 2A 9E FC         [16] 2976 	ld	hl, (_JIFFY)
      000B64 7D               [ 4] 2977 	ld	a, l
      000B65 E6 06            [ 7] 2978 	and	a, #0x06
      000B67 CAr12r0C         [10] 2979 	jp	Z,00115$
                                   2980 ;src\/Graphics.h:89: DrawString(" LEVEL", 26, 4);
      000B6A 11 1A 04         [10] 2981 	ld	de, #0x041a
      000B6D D5               [11] 2982 	push	de
      000B6E 21rA7r0C         [10] 2983 	ld	hl, #___str_1
      000B71 E5               [11] 2984 	push	hl
      000B72 CDrA7r08         [17] 2985 	call	_DrawString
      000B75 F1               [10] 2986 	pop	af
      000B76 F1               [10] 2987 	pop	af
                                   2988 ;src\/Graphics.h:90: DrawNumber(level, 26, 5);
      000B77 3Ar06r00         [13] 2989 	ld	a, (#_level + 0)
      000B7A 4F               [ 4] 2990 	ld	c, a
      000B7B 06 00            [ 7] 2991 	ld	b, #0x00
      000B7D 11 1A 05         [10] 2992 	ld	de, #0x051a
      000B80 D5               [11] 2993 	push	de
      000B81 C5               [11] 2994 	push	bc
      000B82 CDrD9r08         [17] 2995 	call	_DrawNumber
      000B85 F1               [10] 2996 	pop	af
      000B86 F1               [10] 2997 	pop	af
                                   2998 ;src\/Graphics.h:96: switch(bgCounter++) {
      000B87 DD 4E FE         [19] 2999 	ld	c, -2 (ix)
      000B8A DD 34 FE         [23] 3000 	inc	-2 (ix)
      000B8D 3E 07            [ 7] 3001 	ld	a, #0x07
      000B8F 91               [ 4] 3002 	sub	a, c
      000B90 38 45            [12] 3003 	jr	C, 00112$
      000B92 06 00            [ 7] 3004 	ld	b, #0x00
      000B94 21r9Br0B         [10] 3005 	ld	hl, #00163$
      000B97 09               [11] 3006 	add	hl, bc
      000B98 09               [11] 3007 	add	hl, bc
      000B99 09               [11] 3008 	add	hl, bc
      000B9A E9               [ 4] 3009 	jp	(hl)
      000B9B                       3010 00163$:
      000B9B C3rB3r0B         [10] 3011 	jp	00104$
      000B9E C3rB7r0B         [10] 3012 	jp	00105$
      000BA1 C3rBBr0B         [10] 3013 	jp	00106$
      000BA4 C3rBFr0B         [10] 3014 	jp	00107$
      000BA7 C3rC3r0B         [10] 3015 	jp	00108$
      000BAA C3rC7r0B         [10] 3016 	jp	00109$
      000BAD C3rCBr0B         [10] 3017 	jp	00110$
      000BB0 C3rCFr0B         [10] 3018 	jp	00111$
                                   3019 ;src\/Graphics.h:97: case 0:
      000BB3                       3020 00104$:
                                   3021 ;src\/Graphics.h:98: bgColor = 0x14;
      000BB3 0E 14            [ 7] 3022 	ld	c, #0x14
                                   3023 ;src\/Graphics.h:99: break;
      000BB5 18 22            [12] 3024 	jr	00113$
                                   3025 ;src\/Graphics.h:100: case 1:
      000BB7                       3026 00105$:
                                   3027 ;src\/Graphics.h:101: bgColor = 0x15;
      000BB7 0E 15            [ 7] 3028 	ld	c, #0x15
                                   3029 ;src\/Graphics.h:102: break;
      000BB9 18 1E            [12] 3030 	jr	00113$
                                   3031 ;src\/Graphics.h:103: case 2:
      000BBB                       3032 00106$:
                                   3033 ;src\/Graphics.h:104: bgColor = 0x17;
      000BBB 0E 17            [ 7] 3034 	ld	c, #0x17
                                   3035 ;src\/Graphics.h:105: break;
      000BBD 18 1A            [12] 3036 	jr	00113$
                                   3037 ;src\/Graphics.h:106: case 3:
      000BBF                       3038 00107$:
                                   3039 ;src\/Graphics.h:107: bgColor = 0x1e;
      000BBF 0E 1E            [ 7] 3040 	ld	c, #0x1e
                                   3041 ;src\/Graphics.h:108: break;
      000BC1 18 16            [12] 3042 	jr	00113$
                                   3043 ;src\/Graphics.h:109: case 4:
      000BC3                       3044 00108$:
                                   3045 ;src\/Graphics.h:110: bgColor = 0x1f;
      000BC3 0E 1F            [ 7] 3046 	ld	c, #0x1f
                                   3047 ;src\/Graphics.h:111: break;
      000BC5 18 12            [12] 3048 	jr	00113$
                                   3049 ;src\/Graphics.h:112: case 5:
      000BC7                       3050 00109$:
                                   3051 ;src\/Graphics.h:113: bgColor = 0x1e;
      000BC7 0E 1E            [ 7] 3052 	ld	c, #0x1e
                                   3053 ;src\/Graphics.h:114: break;
      000BC9 18 0E            [12] 3054 	jr	00113$
                                   3055 ;src\/Graphics.h:115: case 6:
      000BCB                       3056 00110$:
                                   3057 ;src\/Graphics.h:116: bgColor = 0x17;
      000BCB 0E 17            [ 7] 3058 	ld	c, #0x17
                                   3059 ;src\/Graphics.h:117: break;
      000BCD 18 0A            [12] 3060 	jr	00113$
                                   3061 ;src\/Graphics.h:118: case 7:
      000BCF                       3062 00111$:
                                   3063 ;src\/Graphics.h:119: bgColor = 0x15;
      000BCF 0E 15            [ 7] 3064 	ld	c, #0x15
                                   3065 ;src\/Graphics.h:120: bgCounter = 0;
      000BD1 DD 36 FE 00      [19] 3066 	ld	-2 (ix), #0
                                   3067 ;src\/Graphics.h:121: break;
      000BD5 18 02            [12] 3068 	jr	00113$
                                   3069 ;src\/Graphics.h:122: default:
      000BD7                       3070 00112$:
                                   3071 ;src\/Graphics.h:123: bgColor = 0x11;
      000BD7 0E 11            [ 7] 3072 	ld	c, #0x11
                                   3073 ;src\/Graphics.h:125: }
      000BD9                       3074 00113$:
                                   3075 ;src\/Graphics.h:126: FILVRM(CLRTBL, 8 * 4, bgColor);
      000BD9 C5               [11] 3076 	push	bc
      000BDA 79               [ 4] 3077 	ld	a, c
      000BDB F5               [11] 3078 	push	af
      000BDC 33               [ 6] 3079 	inc	sp
      000BDD 21 20 00         [10] 3080 	ld	hl, #0x0020
      000BE0 E5               [11] 3081 	push	hl
      000BE1 21 00 20         [10] 3082 	ld	hl, #0x2000
      000BE4 E5               [11] 3083 	push	hl
      000BE5 CDr00r00         [17] 3084 	call	_FILVRM
      000BE8 F1               [10] 3085 	pop	af
      000BE9 F1               [10] 3086 	pop	af
      000BEA 33               [ 6] 3087 	inc	sp
      000BEB C1               [10] 3088 	pop	bc
                                   3089 ;src\/Graphics.h:127: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      000BEC C5               [11] 3090 	push	bc
      000BED 79               [ 4] 3091 	ld	a, c
      000BEE F5               [11] 3092 	push	af
      000BEF 33               [ 6] 3093 	inc	sp
      000BF0 21 20 00         [10] 3094 	ld	hl, #0x0020
      000BF3 E5               [11] 3095 	push	hl
      000BF4 21 00 28         [10] 3096 	ld	hl, #0x2800
      000BF7 E5               [11] 3097 	push	hl
      000BF8 CDr00r00         [17] 3098 	call	_FILVRM
      000BFB F1               [10] 3099 	pop	af
      000BFC F1               [10] 3100 	pop	af
      000BFD 33               [ 6] 3101 	inc	sp
      000BFE C1               [10] 3102 	pop	bc
                                   3103 ;src\/Graphics.h:128: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      000BFF 79               [ 4] 3104 	ld	a, c
      000C00 F5               [11] 3105 	push	af
      000C01 33               [ 6] 3106 	inc	sp
      000C02 21 20 00         [10] 3107 	ld	hl, #0x0020
      000C05 E5               [11] 3108 	push	hl
      000C06 21 00 30         [10] 3109 	ld	hl, #0x3000
      000C09 E5               [11] 3110 	push	hl
      000C0A CDr00r00         [17] 3111 	call	_FILVRM
      000C0D F1               [10] 3112 	pop	af
      000C0E F1               [10] 3113 	pop	af
      000C0F 33               [ 6] 3114 	inc	sp
      000C10 18 1A            [12] 3115 	jr	00122$
      000C12                       3116 00115$:
                                   3117 ;src\/Graphics.h:133: DrawString("      ", 26, 4);
      000C12 11 1A 04         [10] 3118 	ld	de, #0x041a
      000C15 D5               [11] 3119 	push	de
      000C16 21rAEr0C         [10] 3120 	ld	hl, #___str_2
      000C19 E5               [11] 3121 	push	hl
      000C1A CDrA7r08         [17] 3122 	call	_DrawString
      000C1D F1               [10] 3123 	pop	af
      000C1E F1               [10] 3124 	pop	af
                                   3125 ;src\/Graphics.h:134: DrawString("      ", 26, 5);
      000C1F 11 1A 05         [10] 3126 	ld	de, #0x051a
      000C22 D5               [11] 3127 	push	de
      000C23 21rAEr0C         [10] 3128 	ld	hl, #___str_2
      000C26 E5               [11] 3129 	push	hl
      000C27 CDrA7r08         [17] 3130 	call	_DrawString
      000C2A F1               [10] 3131 	pop	af
      000C2B F1               [10] 3132 	pop	af
      000C2C                       3133 00122$:
                                   3134 ;src\/Graphics.h:83: for(byte i=0; i < 60; i++) {
      000C2C DD 34 FF         [23] 3135 	inc	-1 (ix)
      000C2F C3r4Dr0B         [10] 3136 	jp	00121$
      000C32                       3137 00119$:
                                   3138 ;src\/Graphics.h:140: newLevel = FALSE;
      000C32 21r07r00         [10] 3139 	ld	hl, #_newLevel
      000C35 36 00            [10] 3140 	ld	(hl), #0x00
                                   3141 ;src\/Graphics.h:143: FILVRM(CLRTBL, 8 * 4, 0x14);
      000C37 3E 14            [ 7] 3142 	ld	a, #0x14
      000C39 F5               [11] 3143 	push	af
      000C3A 33               [ 6] 3144 	inc	sp
      000C3B 21 20 00         [10] 3145 	ld	hl, #0x0020
      000C3E E5               [11] 3146 	push	hl
      000C3F 21 00 20         [10] 3147 	ld	hl, #0x2000
      000C42 E5               [11] 3148 	push	hl
      000C43 CDr00r00         [17] 3149 	call	_FILVRM
      000C46 F1               [10] 3150 	pop	af
      000C47 F1               [10] 3151 	pop	af
      000C48 33               [ 6] 3152 	inc	sp
                                   3153 ;src\/Graphics.h:144: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      000C49 3E 14            [ 7] 3154 	ld	a, #0x14
      000C4B F5               [11] 3155 	push	af
      000C4C 33               [ 6] 3156 	inc	sp
      000C4D 21 20 00         [10] 3157 	ld	hl, #0x0020
      000C50 E5               [11] 3158 	push	hl
      000C51 21 00 28         [10] 3159 	ld	hl, #0x2800
      000C54 E5               [11] 3160 	push	hl
      000C55 CDr00r00         [17] 3161 	call	_FILVRM
      000C58 F1               [10] 3162 	pop	af
      000C59 F1               [10] 3163 	pop	af
      000C5A 33               [ 6] 3164 	inc	sp
                                   3165 ;src\/Graphics.h:145: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      000C5B 3E 14            [ 7] 3166 	ld	a, #0x14
      000C5D F5               [11] 3167 	push	af
      000C5E 33               [ 6] 3168 	inc	sp
      000C5F 21 20 00         [10] 3169 	ld	hl, #0x0020
      000C62 E5               [11] 3170 	push	hl
      000C63 21 00 30         [10] 3171 	ld	hl, #0x3000
      000C66 E5               [11] 3172 	push	hl
      000C67 CDr00r00         [17] 3173 	call	_FILVRM
      000C6A F1               [10] 3174 	pop	af
      000C6B F1               [10] 3175 	pop	af
      000C6C 33               [ 6] 3176 	inc	sp
                                   3177 ;src\/Graphics.h:147: DrawString(" LEVEL", 26, 4);
      000C6D 11 1A 04         [10] 3178 	ld	de, #0x041a
      000C70 D5               [11] 3179 	push	de
      000C71 21rA7r0C         [10] 3180 	ld	hl, #___str_1
      000C74 E5               [11] 3181 	push	hl
      000C75 CDrA7r08         [17] 3182 	call	_DrawString
      000C78 F1               [10] 3183 	pop	af
      000C79 F1               [10] 3184 	pop	af
                                   3185 ;src\/Graphics.h:148: DrawString("BLOCKS", 26, 9);
      000C7A 11 1A 09         [10] 3186 	ld	de, #0x091a
      000C7D D5               [11] 3187 	push	de
      000C7E 21rB5r0C         [10] 3188 	ld	hl, #___str_3
      000C81 E5               [11] 3189 	push	hl
      000C82 CDrA7r08         [17] 3190 	call	_DrawString
      000C85 F1               [10] 3191 	pop	af
      000C86 F1               [10] 3192 	pop	af
                                   3193 ;src\/Graphics.h:150: DrawNumber(blocksRemoved, 26, 10);
      000C87 11 1A 0A         [10] 3194 	ld	de, #0x0a1a
      000C8A D5               [11] 3195 	push	de
      000C8B 2Ar04r00         [16] 3196 	ld	hl, (_blocksRemoved)
      000C8E E5               [11] 3197 	push	hl
      000C8F CDrD9r08         [17] 3198 	call	_DrawNumber
      000C92 F1               [10] 3199 	pop	af
      000C93 F1               [10] 3200 	pop	af
                                   3201 ;src\/Graphics.h:151: DrawNumber(level, 26, 5);
      000C94 3Ar06r00         [13] 3202 	ld	a, (#_level + 0)
      000C97 4F               [ 4] 3203 	ld	c, a
      000C98 06 00            [ 7] 3204 	ld	b, #0x00
      000C9A 11 1A 05         [10] 3205 	ld	de, #0x051a
      000C9D D5               [11] 3206 	push	de
      000C9E C5               [11] 3207 	push	bc
      000C9F CDrD9r08         [17] 3208 	call	_DrawNumber
                                   3209 ;src\/Graphics.h:153: }
      000CA2 DD F9            [10] 3210 	ld	sp,ix
      000CA4 DD E1            [14] 3211 	pop	ix
      000CA6 C9               [10] 3212 	ret
      000CA7                       3213 ___str_1:
      000CA7 20 4C 45 56 45 4C     3214 	.ascii " LEVEL"
      000CAD 00                    3215 	.db 0x00
      000CAE                       3216 ___str_2:
      000CAE 20 20 20 20 20 20     3217 	.ascii "      "
      000CB4 00                    3218 	.db 0x00
      000CB5                       3219 ___str_3:
      000CB5 42 4C 4F 43 4B 53     3220 	.ascii "BLOCKS"
      000CBB 00                    3221 	.db 0x00
                                   3222 ;src\/Graphics.h:155: void DrawBackground() {
                                   3223 ;	---------------------------------
                                   3224 ; Function DrawBackground
                                   3225 ; ---------------------------------
      000CBC                       3226 _DrawBackground::
                                   3227 ;src\/Graphics.h:157: for(int i = 0; i < 256 * 3; i++) {
      000CBC 01 00 00         [10] 3228 	ld	bc, #0x0000
      000CBF                       3229 00103$:
      000CBF 78               [ 4] 3230 	ld	a, b
      000CC0 EE 80            [ 7] 3231 	xor	a, #0x80
      000CC2 D6 83            [ 7] 3232 	sub	a, #0x83
      000CC4 30 12            [12] 3233 	jr	NC, 00101$
                                   3234 ;src\/Graphics.h:158: WRTVRM(NAMTBL + i, 0); // test
      000CC6 21 00 18         [10] 3235 	ld	hl, #0x1800
      000CC9 09               [11] 3236 	add	hl, bc
      000CCA C5               [11] 3237 	push	bc
      000CCB AF               [ 4] 3238 	xor	a, a
      000CCC F5               [11] 3239 	push	af
      000CCD 33               [ 6] 3240 	inc	sp
      000CCE E5               [11] 3241 	push	hl
      000CCF CDr00r00         [17] 3242 	call	_WRTVRM
      000CD2 F1               [10] 3243 	pop	af
      000CD3 33               [ 6] 3244 	inc	sp
      000CD4 C1               [10] 3245 	pop	bc
                                   3246 ;src\/Graphics.h:157: for(int i = 0; i < 256 * 3; i++) {
      000CD5 03               [ 6] 3247 	inc	bc
      000CD6 18 E7            [12] 3248 	jr	00103$
      000CD8                       3249 00101$:
                                   3250 ;src\/Graphics.h:161: DrawColumn(7);
      000CD8 3E 07            [ 7] 3251 	ld	a, #0x07
      000CDA F5               [11] 3252 	push	af
      000CDB 33               [ 6] 3253 	inc	sp
      000CDC CDr94r09         [17] 3254 	call	_DrawColumn
      000CDF 33               [ 6] 3255 	inc	sp
                                   3256 ;src\/Graphics.h:162: DrawColumn(22);
      000CE0 3E 16            [ 7] 3257 	ld	a, #0x16
      000CE2 F5               [11] 3258 	push	af
      000CE3 33               [ 6] 3259 	inc	sp
      000CE4 CDr94r09         [17] 3260 	call	_DrawColumn
      000CE7 33               [ 6] 3261 	inc	sp
                                   3262 ;src\/Graphics.h:164: DrawScore();
                                   3263 ;src\/Graphics.h:200: }
      000CE8 C3r35r0B         [10] 3264 	jp	_DrawScore
                                   3265 ;src\/Graphics.h:202: void DrawArrow(byte x, byte y) {
                                   3266 ;	---------------------------------
                                   3267 ; Function DrawArrow
                                   3268 ; ---------------------------------
      000CEB                       3269 _DrawArrow::
      000CEB DD E5            [15] 3270 	push	ix
      000CED DD 21 00 00      [14] 3271 	ld	ix,#0
      000CF1 DD 39            [15] 3272 	add	ix,sp
      000CF3 21 F8 FF         [10] 3273 	ld	hl, #-8
      000CF6 39               [11] 3274 	add	hl, sp
      000CF7 F9               [ 6] 3275 	ld	sp, hl
                                   3276 ;src\/Graphics.h:203: const byte colors[] = {
      000CF8 21 00 00         [10] 3277 	ld	hl, #0
      000CFB 39               [11] 3278 	add	hl, sp
      000CFC EB               [ 4] 3279 	ex	de, hl
      000CFD 3E 0F            [ 7] 3280 	ld	a, #0x0f
      000CFF 12               [ 7] 3281 	ld	(de), a
      000D00 6B               [ 4] 3282 	ld	l, e
      000D01 62               [ 4] 3283 	ld	h, d
      000D02 23               [ 6] 3284 	inc	hl
      000D03 36 0E            [10] 3285 	ld	(hl), #0x0e
      000D05 6B               [ 4] 3286 	ld	l, e
      000D06 62               [ 4] 3287 	ld	h, d
      000D07 23               [ 6] 3288 	inc	hl
      000D08 23               [ 6] 3289 	inc	hl
      000D09 36 05            [10] 3290 	ld	(hl), #0x05
      000D0B 6B               [ 4] 3291 	ld	l, e
      000D0C 62               [ 4] 3292 	ld	h, d
      000D0D 23               [ 6] 3293 	inc	hl
      000D0E 23               [ 6] 3294 	inc	hl
      000D0F 23               [ 6] 3295 	inc	hl
      000D10 36 04            [10] 3296 	ld	(hl), #0x04
      000D12 21 04 00         [10] 3297 	ld	hl, #0x0004
      000D15 19               [11] 3298 	add	hl, de
      000D16 36 04            [10] 3299 	ld	(hl), #0x04
      000D18 21 05 00         [10] 3300 	ld	hl, #0x0005
      000D1B 19               [11] 3301 	add	hl, de
      000D1C 36 05            [10] 3302 	ld	(hl), #0x05
      000D1E 21 06 00         [10] 3303 	ld	hl, #0x0006
      000D21 19               [11] 3304 	add	hl, de
      000D22 36 0E            [10] 3305 	ld	(hl), #0x0e
      000D24 21 07 00         [10] 3306 	ld	hl, #0x0007
      000D27 19               [11] 3307 	add	hl, de
      000D28 36 0F            [10] 3308 	ld	(hl), #0x0f
                                   3309 ;src\/Graphics.h:214: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000D2A 2A 9E FC         [16] 3310 	ld	hl, (_JIFFY)
      000D2D 7D               [ 4] 3311 	ld	a, l
      000D2E E6 0E            [ 7] 3312 	and	a, #0x0e
      000D30 6F               [ 4] 3313 	ld	l, a
      000D31 26 00            [ 7] 3314 	ld	h, #0x00
      000D33 CB 3C            [ 8] 3315 	srl	h
      000D35 CB 1D            [ 8] 3316 	rr	l
                                   3317 ;src\/Graphics.h:221: WRTVRM(SPRATT, 	y - 1);
      000D37 DD 7E 05         [19] 3318 	ld	a, 5 (ix)
      000D3A 3D               [ 4] 3319 	dec	a
      000D3B E5               [11] 3320 	push	hl
      000D3C D5               [11] 3321 	push	de
      000D3D F5               [11] 3322 	push	af
      000D3E 33               [ 6] 3323 	inc	sp
      000D3F 01 00 1B         [10] 3324 	ld	bc, #0x1b00
      000D42 C5               [11] 3325 	push	bc
      000D43 CDr00r00         [17] 3326 	call	_WRTVRM
      000D46 F1               [10] 3327 	pop	af
      000D47 33               [ 6] 3328 	inc	sp
      000D48 DD 7E 04         [19] 3329 	ld	a, 4 (ix)
      000D4B F5               [11] 3330 	push	af
      000D4C 33               [ 6] 3331 	inc	sp
      000D4D 01 01 1B         [10] 3332 	ld	bc, #0x1b01
      000D50 C5               [11] 3333 	push	bc
      000D51 CDr00r00         [17] 3334 	call	_WRTVRM
      000D54 F1               [10] 3335 	pop	af
      000D55 33               [ 6] 3336 	inc	sp
      000D56 AF               [ 4] 3337 	xor	a, a
      000D57 F5               [11] 3338 	push	af
      000D58 33               [ 6] 3339 	inc	sp
      000D59 01 02 1B         [10] 3340 	ld	bc, #0x1b02
      000D5C C5               [11] 3341 	push	bc
      000D5D CDr00r00         [17] 3342 	call	_WRTVRM
      000D60 F1               [10] 3343 	pop	af
      000D61 33               [ 6] 3344 	inc	sp
      000D62 D1               [10] 3345 	pop	de
      000D63 E1               [10] 3346 	pop	hl
                                   3347 ;src\/Graphics.h:224: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000D64 26 00            [ 7] 3348 	ld	h, #0x00
      000D66 19               [11] 3349 	add	hl, de
      000D67 7E               [ 7] 3350 	ld	a, (hl)
      000D68 F5               [11] 3351 	push	af
      000D69 33               [ 6] 3352 	inc	sp
      000D6A 21 03 1B         [10] 3353 	ld	hl, #0x1b03
      000D6D E5               [11] 3354 	push	hl
      000D6E CDr00r00         [17] 3355 	call	_WRTVRM
                                   3356 ;src\/Graphics.h:233: }
      000D71 DD F9            [10] 3357 	ld	sp,ix
      000D73 DD E1            [14] 3358 	pop	ix
      000D75 C9               [10] 3359 	ret
                                   3360 ;src\/Graphics.h:235: void HideArrow() {
                                   3361 ;	---------------------------------
                                   3362 ; Function HideArrow
                                   3363 ; ---------------------------------
      000D76                       3364 _HideArrow::
                                   3365 ;src\/Graphics.h:236: WRTVRM(SPRATT, 	192);
      000D76 3E C0            [ 7] 3366 	ld	a, #0xc0
      000D78 F5               [11] 3367 	push	af
      000D79 33               [ 6] 3368 	inc	sp
      000D7A 21 00 1B         [10] 3369 	ld	hl, #0x1b00
      000D7D E5               [11] 3370 	push	hl
      000D7E CDr00r00         [17] 3371 	call	_WRTVRM
      000D81 F1               [10] 3372 	pop	af
      000D82 33               [ 6] 3373 	inc	sp
                                   3374 ;src\/Graphics.h:237: }
      000D83 C9               [10] 3375 	ret
                                   3376 ;src\/Graphics.h:239: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3377 ;	---------------------------------
                                   3378 ; Function DrawHitSprite
                                   3379 ; ---------------------------------
      000D84                       3380 _DrawHitSprite::
      000D84 DD E5            [15] 3381 	push	ix
      000D86 DD 21 00 00      [14] 3382 	ld	ix,#0
      000D8A DD 39            [15] 3383 	add	ix,sp
      000D8C 21 EC FF         [10] 3384 	ld	hl, #-20
      000D8F 39               [11] 3385 	add	hl, sp
      000D90 F9               [ 6] 3386 	ld	sp, hl
                                   3387 ;src\/Graphics.h:240: const byte redColorRamp[] = {
      000D91 21 00 00         [10] 3388 	ld	hl, #0
      000D94 39               [11] 3389 	add	hl, sp
      000D95 EB               [ 4] 3390 	ex	de, hl
      000D96 3E 0F            [ 7] 3391 	ld	a, #0x0f
      000D98 12               [ 7] 3392 	ld	(de), a
      000D99 6B               [ 4] 3393 	ld	l, e
      000D9A 62               [ 4] 3394 	ld	h, d
      000D9B 23               [ 6] 3395 	inc	hl
      000D9C 36 0E            [10] 3396 	ld	(hl), #0x0e
      000D9E 6B               [ 4] 3397 	ld	l, e
      000D9F 62               [ 4] 3398 	ld	h, d
      000DA0 23               [ 6] 3399 	inc	hl
      000DA1 23               [ 6] 3400 	inc	hl
      000DA2 36 09            [10] 3401 	ld	(hl), #0x09
      000DA4 6B               [ 4] 3402 	ld	l, e
      000DA5 62               [ 4] 3403 	ld	h, d
      000DA6 23               [ 6] 3404 	inc	hl
      000DA7 23               [ 6] 3405 	inc	hl
      000DA8 23               [ 6] 3406 	inc	hl
      000DA9 36 06            [10] 3407 	ld	(hl), #0x06
      000DAB 21 04 00         [10] 3408 	ld	hl, #0x0004
      000DAE 19               [11] 3409 	add	hl, de
      000DAF 36 06            [10] 3410 	ld	(hl), #0x06
      000DB1 21 05 00         [10] 3411 	ld	hl, #0x0005
      000DB4 19               [11] 3412 	add	hl, de
      000DB5 36 09            [10] 3413 	ld	(hl), #0x09
      000DB7 21 06 00         [10] 3414 	ld	hl, #0x0006
      000DBA 19               [11] 3415 	add	hl, de
      000DBB 36 0E            [10] 3416 	ld	(hl), #0x0e
      000DBD 21 07 00         [10] 3417 	ld	hl, #0x0007
      000DC0 19               [11] 3418 	add	hl, de
      000DC1 36 0F            [10] 3419 	ld	(hl), #0x0f
                                   3420 ;src\/Graphics.h:262: const byte greenColorRamp[] = {
      000DC3 21 08 00         [10] 3421 	ld	hl, #8
      000DC6 39               [11] 3422 	add	hl, sp
      000DC7 4D               [ 4] 3423 	ld	c, l
      000DC8 44               [ 4] 3424 	ld	b, h
      000DC9 36 0F            [10] 3425 	ld	(hl), #0x0f
      000DCB 69               [ 4] 3426 	ld	l, c
      000DCC 60               [ 4] 3427 	ld	h, b
      000DCD 23               [ 6] 3428 	inc	hl
      000DCE 36 0E            [10] 3429 	ld	(hl), #0x0e
      000DD0 69               [ 4] 3430 	ld	l, c
      000DD1 60               [ 4] 3431 	ld	h, b
      000DD2 23               [ 6] 3432 	inc	hl
      000DD3 23               [ 6] 3433 	inc	hl
      000DD4 36 03            [10] 3434 	ld	(hl), #0x03
      000DD6 69               [ 4] 3435 	ld	l, c
      000DD7 60               [ 4] 3436 	ld	h, b
      000DD8 23               [ 6] 3437 	inc	hl
      000DD9 23               [ 6] 3438 	inc	hl
      000DDA 23               [ 6] 3439 	inc	hl
      000DDB 36 0C            [10] 3440 	ld	(hl), #0x0c
      000DDD 21 04 00         [10] 3441 	ld	hl, #0x0004
      000DE0 09               [11] 3442 	add	hl, bc
      000DE1 36 0C            [10] 3443 	ld	(hl), #0x0c
      000DE3 21 05 00         [10] 3444 	ld	hl, #0x0005
      000DE6 09               [11] 3445 	add	hl, bc
      000DE7 36 03            [10] 3446 	ld	(hl), #0x03
      000DE9 21 06 00         [10] 3447 	ld	hl, #0x0006
      000DEC 09               [11] 3448 	add	hl, bc
      000DED 36 0E            [10] 3449 	ld	(hl), #0x0e
      000DEF 21 07 00         [10] 3450 	ld	hl, #0x0007
      000DF2 09               [11] 3451 	add	hl, bc
      000DF3 36 0F            [10] 3452 	ld	(hl), #0x0f
                                   3453 ;src\/Graphics.h:273: byte colorIndex = (JIFFY & 0b00000111);
      000DF5 3A 9E FC         [13] 3454 	ld	a,(#_JIFFY + 0)
      000DF8 E6 07            [ 7] 3455 	and	a, #0x07
                                   3456 ;src\/Graphics.h:274: byte currentColor_1 = redColorRamp[colorIndex];
      000DFA 6F               [ 4] 3457 	ld	l, a
      000DFB 83               [ 4] 3458 	add	a,e
      000DFC 5F               [ 4] 3459 	ld	e, a
      000DFD 30 01            [12] 3460 	jr	NC, 00124$
      000DFF 14               [ 4] 3461 	inc	d
      000E00                       3462 00124$:
      000E00 1A               [ 7] 3463 	ld	a, (de)
      000E01 DD 77 FC         [19] 3464 	ld	-4 (ix), a
                                   3465 ;src\/Graphics.h:275: byte currentColor_2 = greenColorRamp[colorIndex];
      000E04 26 00            [ 7] 3466 	ld	h, #0x00
      000E06 09               [11] 3467 	add	hl, bc
      000E07 7E               [ 7] 3468 	ld	a, (hl)
      000E08 DD 77 FD         [19] 3469 	ld	-3 (ix), a
                                   3470 ;src\/Graphics.h:287: if(numberCombo > 1) {
      000E0B 3E 01            [ 7] 3471 	ld	a, #0x01
      000E0D DD 96 05         [19] 3472 	sub	a, 5 (ix)
      000E10 3E 00            [ 7] 3473 	ld	a, #0x00
      000E12 17               [ 4] 3474 	rla
      000E13 DD 77 FE         [19] 3475 	ld	-2 (ix), a
                                   3476 ;src\/Graphics.h:277: if(firstTime) {
      000E16 DD 7E 08         [19] 3477 	ld	a, 8 (ix)
      000E19 B7               [ 4] 3478 	or	a, a
      000E1A CArE5r0E         [10] 3479 	jp	Z, 00104$
                                   3480 ;src\/Graphics.h:278: WRTVRM(SPRATT + 5, 	x - 8);
      000E1D DD 4E 06         [19] 3481 	ld	c, 6 (ix)
      000E20 79               [ 4] 3482 	ld	a, c
      000E21 C6 F8            [ 7] 3483 	add	a, #0xf8
      000E23 DD 77 FF         [19] 3484 	ld	-1 (ix), a
      000E26 C5               [11] 3485 	push	bc
      000E27 F5               [11] 3486 	push	af
      000E28 33               [ 6] 3487 	inc	sp
      000E29 21 05 1B         [10] 3488 	ld	hl, #0x1b05
      000E2C E5               [11] 3489 	push	hl
      000E2D CDr00r00         [17] 3490 	call	_WRTVRM
      000E30 F1               [10] 3491 	pop	af
      000E31 33               [ 6] 3492 	inc	sp
      000E32 C1               [10] 3493 	pop	bc
                                   3494 ;src\/Graphics.h:279: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000E33 DD 7E 04         [19] 3495 	ld	a, 4 (ix)
      000E36 C6 FD            [ 7] 3496 	add	a, #0xfd
      000E38 87               [ 4] 3497 	add	a, a
      000E39 87               [ 4] 3498 	add	a, a
      000E3A C6 18            [ 7] 3499 	add	a, #0x18
      000E3C C5               [11] 3500 	push	bc
      000E3D F5               [11] 3501 	push	af
      000E3E 33               [ 6] 3502 	inc	sp
      000E3F 21 06 1B         [10] 3503 	ld	hl, #0x1b06
      000E42 E5               [11] 3504 	push	hl
      000E43 CDr00r00         [17] 3505 	call	_WRTVRM
      000E46 F1               [10] 3506 	pop	af
      000E47 33               [ 6] 3507 	inc	sp
      000E48 C1               [10] 3508 	pop	bc
                                   3509 ;src\/Graphics.h:281: WRTVRM(SPRATT + 9, 	x + 8);
      000E49 79               [ 4] 3510 	ld	a, c
      000E4A C6 08            [ 7] 3511 	add	a, #0x08
      000E4C 47               [ 4] 3512 	ld	b, a
      000E4D C5               [11] 3513 	push	bc
      000E4E C5               [11] 3514 	push	bc
      000E4F 33               [ 6] 3515 	inc	sp
      000E50 21 09 1B         [10] 3516 	ld	hl, #0x1b09
      000E53 E5               [11] 3517 	push	hl
      000E54 CDr00r00         [17] 3518 	call	_WRTVRM
      000E57 F1               [10] 3519 	pop	af
      000E58 33               [ 6] 3520 	inc	sp
      000E59 3E 04            [ 7] 3521 	ld	a, #0x04
      000E5B F5               [11] 3522 	push	af
      000E5C 33               [ 6] 3523 	inc	sp
      000E5D 21 0A 1B         [10] 3524 	ld	hl, #0x1b0a
      000E60 E5               [11] 3525 	push	hl
      000E61 CDr00r00         [17] 3526 	call	_WRTVRM
      000E64 F1               [10] 3527 	pop	af
      000E65 33               [ 6] 3528 	inc	sp
      000E66 C1               [10] 3529 	pop	bc
                                   3530 ;src\/Graphics.h:284: WRTVRM(SPRATT + 13, 	x + 24);
      000E67 79               [ 4] 3531 	ld	a, c
      000E68 C6 18            [ 7] 3532 	add	a, #0x18
      000E6A 4F               [ 4] 3533 	ld	c, a
      000E6B C5               [11] 3534 	push	bc
      000E6C 79               [ 4] 3535 	ld	a, c
      000E6D F5               [11] 3536 	push	af
      000E6E 33               [ 6] 3537 	inc	sp
      000E6F 21 0D 1B         [10] 3538 	ld	hl, #0x1b0d
      000E72 E5               [11] 3539 	push	hl
      000E73 CDr00r00         [17] 3540 	call	_WRTVRM
      000E76 F1               [10] 3541 	pop	af
      000E77 33               [ 6] 3542 	inc	sp
      000E78 3E 08            [ 7] 3543 	ld	a, #0x08
      000E7A F5               [11] 3544 	push	af
      000E7B 33               [ 6] 3545 	inc	sp
      000E7C 21 0E 1B         [10] 3546 	ld	hl, #0x1b0e
      000E7F E5               [11] 3547 	push	hl
      000E80 CDr00r00         [17] 3548 	call	_WRTVRM
      000E83 F1               [10] 3549 	pop	af
      000E84 33               [ 6] 3550 	inc	sp
      000E85 C1               [10] 3551 	pop	bc
                                   3552 ;src\/Graphics.h:287: if(numberCombo > 1) {
      000E86 DD 7E FE         [19] 3553 	ld	a, -2 (ix)
      000E89 B7               [ 4] 3554 	or	a, a
      000E8A 28 59            [12] 3555 	jr	Z, 00104$
                                   3556 ;src\/Graphics.h:288: WRTVRM(SPRATT + 17, 	x - 8);
      000E8C C5               [11] 3557 	push	bc
      000E8D DD 7E FF         [19] 3558 	ld	a, -1 (ix)
      000E90 F5               [11] 3559 	push	af
      000E91 33               [ 6] 3560 	inc	sp
      000E92 21 11 1B         [10] 3561 	ld	hl, #0x1b11
      000E95 E5               [11] 3562 	push	hl
      000E96 CDr00r00         [17] 3563 	call	_WRTVRM
      000E99 F1               [10] 3564 	pop	af
      000E9A 33               [ 6] 3565 	inc	sp
      000E9B C1               [10] 3566 	pop	bc
                                   3567 ;src\/Graphics.h:289: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000E9C DD 7E 05         [19] 3568 	ld	a, 5 (ix)
      000E9F 3D               [ 4] 3569 	dec	a
      000EA0 3D               [ 4] 3570 	dec	a
      000EA1 87               [ 4] 3571 	add	a, a
      000EA2 87               [ 4] 3572 	add	a, a
      000EA3 C6 14            [ 7] 3573 	add	a, #0x14
      000EA5 C5               [11] 3574 	push	bc
      000EA6 F5               [11] 3575 	push	af
      000EA7 33               [ 6] 3576 	inc	sp
      000EA8 21 12 1B         [10] 3577 	ld	hl, #0x1b12
      000EAB E5               [11] 3578 	push	hl
      000EAC CDr00r00         [17] 3579 	call	_WRTVRM
      000EAF F1               [10] 3580 	pop	af
      000EB0 33               [ 6] 3581 	inc	sp
      000EB1 C1               [10] 3582 	pop	bc
                                   3583 ;src\/Graphics.h:291: WRTVRM(SPRATT + 21, 	x + 8);
      000EB2 C5               [11] 3584 	push	bc
      000EB3 C5               [11] 3585 	push	bc
      000EB4 33               [ 6] 3586 	inc	sp
      000EB5 21 15 1B         [10] 3587 	ld	hl, #0x1b15
      000EB8 E5               [11] 3588 	push	hl
      000EB9 CDr00r00         [17] 3589 	call	_WRTVRM
      000EBC F1               [10] 3590 	pop	af
      000EBD 33               [ 6] 3591 	inc	sp
      000EBE 3E 0C            [ 7] 3592 	ld	a, #0x0c
      000EC0 F5               [11] 3593 	push	af
      000EC1 33               [ 6] 3594 	inc	sp
      000EC2 21 16 1B         [10] 3595 	ld	hl, #0x1b16
      000EC5 E5               [11] 3596 	push	hl
      000EC6 CDr00r00         [17] 3597 	call	_WRTVRM
      000EC9 F1               [10] 3598 	pop	af
      000ECA 33               [ 6] 3599 	inc	sp
      000ECB C1               [10] 3600 	pop	bc
                                   3601 ;src\/Graphics.h:294: WRTVRM(SPRATT + 25, 	x + 24);
      000ECC 79               [ 4] 3602 	ld	a, c
      000ECD F5               [11] 3603 	push	af
      000ECE 33               [ 6] 3604 	inc	sp
      000ECF 21 19 1B         [10] 3605 	ld	hl, #0x1b19
      000ED2 E5               [11] 3606 	push	hl
      000ED3 CDr00r00         [17] 3607 	call	_WRTVRM
      000ED6 F1               [10] 3608 	pop	af
      000ED7 33               [ 6] 3609 	inc	sp
                                   3610 ;src\/Graphics.h:295: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000ED8 3E 10            [ 7] 3611 	ld	a, #0x10
      000EDA F5               [11] 3612 	push	af
      000EDB 33               [ 6] 3613 	inc	sp
      000EDC 21 1A 1B         [10] 3614 	ld	hl, #0x1b1a
      000EDF E5               [11] 3615 	push	hl
      000EE0 CDr00r00         [17] 3616 	call	_WRTVRM
      000EE3 F1               [10] 3617 	pop	af
      000EE4 33               [ 6] 3618 	inc	sp
      000EE5                       3619 00104$:
                                   3620 ;src\/Graphics.h:300: WRTVRM(SPRATT + 4, 	y);
      000EE5 DD 7E 07         [19] 3621 	ld	a, 7 (ix)
      000EE8 F5               [11] 3622 	push	af
      000EE9 33               [ 6] 3623 	inc	sp
      000EEA 21 04 1B         [10] 3624 	ld	hl, #0x1b04
      000EED E5               [11] 3625 	push	hl
      000EEE CDr00r00         [17] 3626 	call	_WRTVRM
      000EF1 F1               [10] 3627 	pop	af
      000EF2 33               [ 6] 3628 	inc	sp
                                   3629 ;src\/Graphics.h:301: WRTVRM(SPRATT + 7, 	currentColor_1);
      000EF3 DD 7E FC         [19] 3630 	ld	a, -4 (ix)
      000EF6 F5               [11] 3631 	push	af
      000EF7 33               [ 6] 3632 	inc	sp
      000EF8 21 07 1B         [10] 3633 	ld	hl, #0x1b07
      000EFB E5               [11] 3634 	push	hl
      000EFC CDr00r00         [17] 3635 	call	_WRTVRM
      000EFF F1               [10] 3636 	pop	af
      000F00 33               [ 6] 3637 	inc	sp
                                   3638 ;src\/Graphics.h:303: WRTVRM(SPRATT + 8, 	y);
      000F01 DD 7E 07         [19] 3639 	ld	a, 7 (ix)
      000F04 F5               [11] 3640 	push	af
      000F05 33               [ 6] 3641 	inc	sp
      000F06 21 08 1B         [10] 3642 	ld	hl, #0x1b08
      000F09 E5               [11] 3643 	push	hl
      000F0A CDr00r00         [17] 3644 	call	_WRTVRM
      000F0D F1               [10] 3645 	pop	af
      000F0E 33               [ 6] 3646 	inc	sp
                                   3647 ;src\/Graphics.h:304: WRTVRM(SPRATT + 11, 	currentColor_1);
      000F0F DD 7E FC         [19] 3648 	ld	a, -4 (ix)
      000F12 F5               [11] 3649 	push	af
      000F13 33               [ 6] 3650 	inc	sp
      000F14 21 0B 1B         [10] 3651 	ld	hl, #0x1b0b
      000F17 E5               [11] 3652 	push	hl
      000F18 CDr00r00         [17] 3653 	call	_WRTVRM
      000F1B F1               [10] 3654 	pop	af
      000F1C 33               [ 6] 3655 	inc	sp
                                   3656 ;src\/Graphics.h:306: WRTVRM(SPRATT + 12, 	y);
      000F1D DD 7E 07         [19] 3657 	ld	a, 7 (ix)
      000F20 F5               [11] 3658 	push	af
      000F21 33               [ 6] 3659 	inc	sp
      000F22 21 0C 1B         [10] 3660 	ld	hl, #0x1b0c
      000F25 E5               [11] 3661 	push	hl
      000F26 CDr00r00         [17] 3662 	call	_WRTVRM
      000F29 F1               [10] 3663 	pop	af
      000F2A 33               [ 6] 3664 	inc	sp
                                   3665 ;src\/Graphics.h:307: WRTVRM(SPRATT + 15, 	currentColor_1);
      000F2B DD 7E FC         [19] 3666 	ld	a, -4 (ix)
      000F2E F5               [11] 3667 	push	af
      000F2F 33               [ 6] 3668 	inc	sp
      000F30 21 0F 1B         [10] 3669 	ld	hl, #0x1b0f
      000F33 E5               [11] 3670 	push	hl
      000F34 CDr00r00         [17] 3671 	call	_WRTVRM
      000F37 F1               [10] 3672 	pop	af
      000F38 33               [ 6] 3673 	inc	sp
                                   3674 ;src\/Graphics.h:309: if(numberCombo > 1) {
      000F39 DD 7E FE         [19] 3675 	ld	a, -2 (ix)
      000F3C B7               [ 4] 3676 	or	a, a
      000F3D 28 52            [12] 3677 	jr	Z, 00107$
                                   3678 ;src\/Graphics.h:311: WRTVRM(SPRATT + 16, 	y + 16);
      000F3F DD 7E 07         [19] 3679 	ld	a, 7 (ix)
      000F42 C6 10            [ 7] 3680 	add	a, #0x10
      000F44 47               [ 4] 3681 	ld	b, a
      000F45 C5               [11] 3682 	push	bc
      000F46 C5               [11] 3683 	push	bc
      000F47 33               [ 6] 3684 	inc	sp
      000F48 21 10 1B         [10] 3685 	ld	hl, #0x1b10
      000F4B E5               [11] 3686 	push	hl
      000F4C CDr00r00         [17] 3687 	call	_WRTVRM
      000F4F F1               [10] 3688 	pop	af
      000F50 33               [ 6] 3689 	inc	sp
      000F51 DD 7E FD         [19] 3690 	ld	a, -3 (ix)
      000F54 F5               [11] 3691 	push	af
      000F55 33               [ 6] 3692 	inc	sp
      000F56 21 13 1B         [10] 3693 	ld	hl, #0x1b13
      000F59 E5               [11] 3694 	push	hl
      000F5A CDr00r00         [17] 3695 	call	_WRTVRM
      000F5D F1               [10] 3696 	pop	af
      000F5E 33               [ 6] 3697 	inc	sp
      000F5F C1               [10] 3698 	pop	bc
                                   3699 ;src\/Graphics.h:314: WRTVRM(SPRATT + 20, 	y + 16);
      000F60 C5               [11] 3700 	push	bc
      000F61 C5               [11] 3701 	push	bc
      000F62 33               [ 6] 3702 	inc	sp
      000F63 21 14 1B         [10] 3703 	ld	hl, #0x1b14
      000F66 E5               [11] 3704 	push	hl
      000F67 CDr00r00         [17] 3705 	call	_WRTVRM
      000F6A F1               [10] 3706 	pop	af
      000F6B 33               [ 6] 3707 	inc	sp
      000F6C DD 7E FD         [19] 3708 	ld	a, -3 (ix)
      000F6F F5               [11] 3709 	push	af
      000F70 33               [ 6] 3710 	inc	sp
      000F71 21 17 1B         [10] 3711 	ld	hl, #0x1b17
      000F74 E5               [11] 3712 	push	hl
      000F75 CDr00r00         [17] 3713 	call	_WRTVRM
      000F78 F1               [10] 3714 	pop	af
      000F79 33               [ 6] 3715 	inc	sp
      000F7A 33               [ 6] 3716 	inc	sp
      000F7B 21 18 1B         [10] 3717 	ld	hl, #0x1b18
      000F7E E5               [11] 3718 	push	hl
      000F7F CDr00r00         [17] 3719 	call	_WRTVRM
      000F82 F1               [10] 3720 	pop	af
      000F83 33               [ 6] 3721 	inc	sp
                                   3722 ;src\/Graphics.h:318: WRTVRM(SPRATT + 27, 	currentColor_2);
      000F84 DD 7E FD         [19] 3723 	ld	a, -3 (ix)
      000F87 F5               [11] 3724 	push	af
      000F88 33               [ 6] 3725 	inc	sp
      000F89 21 1B 1B         [10] 3726 	ld	hl, #0x1b1b
      000F8C E5               [11] 3727 	push	hl
      000F8D CDr00r00         [17] 3728 	call	_WRTVRM
      000F90 F1               [10] 3729 	pop	af
      000F91                       3730 00107$:
                                   3731 ;src\/Graphics.h:320: }
      000F91 DD F9            [10] 3732 	ld	sp, ix
      000F93 DD E1            [14] 3733 	pop	ix
      000F95 C9               [10] 3734 	ret
                                   3735 ;src\/Graphics.h:322: void HideHitSprite() {
                                   3736 ;	---------------------------------
                                   3737 ; Function HideHitSprite
                                   3738 ; ---------------------------------
      000F96                       3739 _HideHitSprite::
                                   3740 ;src\/Graphics.h:324: WRTVRM(SPRATT + 4, 	192);
      000F96 3E C0            [ 7] 3741 	ld	a, #0xc0
      000F98 F5               [11] 3742 	push	af
      000F99 33               [ 6] 3743 	inc	sp
      000F9A 21 04 1B         [10] 3744 	ld	hl, #0x1b04
      000F9D E5               [11] 3745 	push	hl
      000F9E CDr00r00         [17] 3746 	call	_WRTVRM
      000FA1 F1               [10] 3747 	pop	af
      000FA2 33               [ 6] 3748 	inc	sp
                                   3749 ;src\/Graphics.h:325: WRTVRM(SPRATT + 8, 	192);
      000FA3 3E C0            [ 7] 3750 	ld	a, #0xc0
      000FA5 F5               [11] 3751 	push	af
      000FA6 33               [ 6] 3752 	inc	sp
      000FA7 21 08 1B         [10] 3753 	ld	hl, #0x1b08
      000FAA E5               [11] 3754 	push	hl
      000FAB CDr00r00         [17] 3755 	call	_WRTVRM
      000FAE F1               [10] 3756 	pop	af
      000FAF 33               [ 6] 3757 	inc	sp
                                   3758 ;src\/Graphics.h:326: WRTVRM(SPRATT + 12, 	192);
      000FB0 3E C0            [ 7] 3759 	ld	a, #0xc0
      000FB2 F5               [11] 3760 	push	af
      000FB3 33               [ 6] 3761 	inc	sp
      000FB4 21 0C 1B         [10] 3762 	ld	hl, #0x1b0c
      000FB7 E5               [11] 3763 	push	hl
      000FB8 CDr00r00         [17] 3764 	call	_WRTVRM
      000FBB F1               [10] 3765 	pop	af
      000FBC 33               [ 6] 3766 	inc	sp
                                   3767 ;src\/Graphics.h:329: WRTVRM(SPRATT + 16, 	192);
      000FBD 3E C0            [ 7] 3768 	ld	a, #0xc0
      000FBF F5               [11] 3769 	push	af
      000FC0 33               [ 6] 3770 	inc	sp
      000FC1 21 10 1B         [10] 3771 	ld	hl, #0x1b10
      000FC4 E5               [11] 3772 	push	hl
      000FC5 CDr00r00         [17] 3773 	call	_WRTVRM
      000FC8 F1               [10] 3774 	pop	af
      000FC9 33               [ 6] 3775 	inc	sp
                                   3776 ;src\/Graphics.h:330: WRTVRM(SPRATT + 20, 	192);
      000FCA 3E C0            [ 7] 3777 	ld	a, #0xc0
      000FCC F5               [11] 3778 	push	af
      000FCD 33               [ 6] 3779 	inc	sp
      000FCE 21 14 1B         [10] 3780 	ld	hl, #0x1b14
      000FD1 E5               [11] 3781 	push	hl
      000FD2 CDr00r00         [17] 3782 	call	_WRTVRM
      000FD5 F1               [10] 3783 	pop	af
      000FD6 33               [ 6] 3784 	inc	sp
                                   3785 ;src\/Graphics.h:331: WRTVRM(SPRATT + 24, 	192);
      000FD7 3E C0            [ 7] 3786 	ld	a, #0xc0
      000FD9 F5               [11] 3787 	push	af
      000FDA 33               [ 6] 3788 	inc	sp
      000FDB 21 18 1B         [10] 3789 	ld	hl, #0x1b18
      000FDE E5               [11] 3790 	push	hl
      000FDF CDr00r00         [17] 3791 	call	_WRTVRM
      000FE2 F1               [10] 3792 	pop	af
      000FE3 33               [ 6] 3793 	inc	sp
                                   3794 ;src\/Graphics.h:332: }
      000FE4 C9               [10] 3795 	ret
                                   3796 ;src\/Graphics.h:334: void InitVRAM() {
                                   3797 ;	---------------------------------
                                   3798 ; Function InitVRAM
                                   3799 ; ---------------------------------
      000FE5                       3800 _InitVRAM::
      000FE5 DD E5            [15] 3801 	push	ix
      000FE7 DD 21 00 00      [14] 3802 	ld	ix,#0
      000FEB DD 39            [15] 3803 	add	ix,sp
      000FED 3B               [ 6] 3804 	dec	sp
                                   3805 ;src\/Graphics.h:339: CLIKSW = 0;	// disable keyboard sound
      000FEE 21 00 00         [10] 3806 	ld	hl, #0x0000
      000FF1 22 DB F3         [16] 3807 	ld	(_CLIKSW), hl
                                   3808 ;src\/Graphics.h:340: SCNCNT = 1; 	// set keyboard scan counter
      000FF4 21 F6 F3         [10] 3809 	ld	hl, #_SCNCNT
      000FF7 36 01            [10] 3810 	ld	(hl), #0x01
                                   3811 ;src\/Graphics.h:342: FORCLR = COLOR_WHITE;
      000FF9 21 E9 F3         [10] 3812 	ld	hl, #_FORCLR
      000FFC 36 0F            [10] 3813 	ld	(hl), #0x0f
                                   3814 ;src\/Graphics.h:343: BAKCLR = COLOR_BLACK;
      000FFE 21 EA F3         [10] 3815 	ld	hl, #_BAKCLR
      001001 36 01            [10] 3816 	ld	(hl), #0x01
                                   3817 ;src\/Graphics.h:344: BDRCLR = COLOR_BLACK;
      001003 21 EB F3         [10] 3818 	ld	hl, #_BDRCLR
      001006 36 01            [10] 3819 	ld	(hl), #0x01
                                   3820 ;src\/Graphics.h:372: WRTVDP(0b0000000111100010);
      001008 21 E2 01         [10] 3821 	ld	hl, #0x01e2
      00100B CDr00r00         [17] 3822 	call	_WRTVDP
                                   3823 ;src\/Graphics.h:374: INIGRP();	// Set screen 2
      00100E CDr00r00         [17] 3824 	call	_INIGRP
                                   3825 ;src\/Graphics.h:376: DISSCR();	// Disable screen (faster to write)
      001011 CDr00r00         [17] 3826 	call	_DISSCR
                                   3827 ;src\/Graphics.h:380: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001014 AF               [ 4] 3828 	xor	a, a
      001015 F5               [11] 3829 	push	af
      001016 33               [ 6] 3830 	inc	sp
      001017 21 00 40         [10] 3831 	ld	hl, #0x4000
      00101A E5               [11] 3832 	push	hl
      00101B 65               [ 4] 3833 	ld	h, l
      00101C E5               [11] 3834 	push	hl
      00101D CDr00r00         [17] 3835 	call	_FILVRM
      001020 F1               [10] 3836 	pop	af
                                   3837 ;src\/Graphics.h:389: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001021 33               [ 6] 3838 	inc	sp
      001022 21 60 01         [10] 3839 	ld	hl,#0x0160
      001025 E3               [19] 3840 	ex	(sp),hl
      001026 21r47r07         [10] 3841 	ld	hl, #_sprite_arrow_0
      001029 E5               [11] 3842 	push	hl
      00102A 21 00 38         [10] 3843 	ld	hl, #0x3800
      00102D E5               [11] 3844 	push	hl
      00102E CDr00r00         [17] 3845 	call	_LDIRVM
      001031 21 06 00         [10] 3846 	ld	hl, #6
      001034 39               [11] 3847 	add	hl, sp
      001035 F9               [ 6] 3848 	ld	sp, hl
                                   3849 ;src\/Graphics.h:395: for(byte i=0; i<32; i++) {
      001036 0E 00            [ 7] 3850 	ld	c, #0x00
      001038                       3851 00110$:
                                   3852 ;src\/Graphics.h:396: WRTVRM(SPRATT + (i * 4), 	192);
      001038 79               [ 4] 3853 	ld	a,c
      001039 FE 20            [ 7] 3854 	cp	a,#0x20
      00103B 30 18            [12] 3855 	jr	NC, 00101$
      00103D 26 00            [ 7] 3856 	ld	h, #0x00
      00103F 6F               [ 4] 3857 	ld	l, a
      001040 29               [11] 3858 	add	hl, hl
      001041 29               [11] 3859 	add	hl, hl
      001042 7C               [ 4] 3860 	ld	a, h
      001043 C6 1B            [ 7] 3861 	add	a, #0x1b
      001045 67               [ 4] 3862 	ld	h, a
      001046 C5               [11] 3863 	push	bc
      001047 3E C0            [ 7] 3864 	ld	a, #0xc0
      001049 F5               [11] 3865 	push	af
      00104A 33               [ 6] 3866 	inc	sp
      00104B E5               [11] 3867 	push	hl
      00104C CDr00r00         [17] 3868 	call	_WRTVRM
      00104F F1               [10] 3869 	pop	af
      001050 33               [ 6] 3870 	inc	sp
      001051 C1               [10] 3871 	pop	bc
                                   3872 ;src\/Graphics.h:395: for(byte i=0; i<32; i++) {
      001052 0C               [ 4] 3873 	inc	c
      001053 18 E3            [12] 3874 	jr	00110$
      001055                       3875 00101$:
                                   3876 ;src\/Graphics.h:405: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001055 21 78 01         [10] 3877 	ld	hl, #0x0178
      001058 E5               [11] 3878 	push	hl
      001059 21r17r04         [10] 3879 	ld	hl, #_pattern_black_0
      00105C E5               [11] 3880 	push	hl
      00105D 21 00 00         [10] 3881 	ld	hl, #0x0000
      001060 E5               [11] 3882 	push	hl
      001061 CDr00r00         [17] 3883 	call	_LDIRVM
      001064 21 06 00         [10] 3884 	ld	hl, #6
      001067 39               [11] 3885 	add	hl, sp
      001068 F9               [ 6] 3886 	ld	sp, hl
                                   3887 ;src\/Graphics.h:408: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001069 21 78 01         [10] 3888 	ld	hl, #0x0178
      00106C E5               [11] 3889 	push	hl
      00106D 21r17r04         [10] 3890 	ld	hl, #_pattern_black_0
      001070 E5               [11] 3891 	push	hl
      001071 21 00 08         [10] 3892 	ld	hl, #0x0800
      001074 E5               [11] 3893 	push	hl
      001075 CDr00r00         [17] 3894 	call	_LDIRVM
      001078 21 06 00         [10] 3895 	ld	hl, #6
      00107B 39               [11] 3896 	add	hl, sp
      00107C F9               [ 6] 3897 	ld	sp, hl
                                   3898 ;src\/Graphics.h:411: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00107D 21 78 01         [10] 3899 	ld	hl, #0x0178
      001080 E5               [11] 3900 	push	hl
      001081 21r17r04         [10] 3901 	ld	hl, #_pattern_black_0
      001084 E5               [11] 3902 	push	hl
      001085 21 00 10         [10] 3903 	ld	hl, #0x1000
      001088 E5               [11] 3904 	push	hl
      001089 CDr00r00         [17] 3905 	call	_LDIRVM
      00108C 21 06 00         [10] 3906 	ld	hl, #6
      00108F 39               [11] 3907 	add	hl, sp
      001090 F9               [ 6] 3908 	ld	sp, hl
                                   3909 ;src\/Graphics.h:414: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001091 21 00 03         [10] 3910 	ld	hl, #0x0300
      001094 E5               [11] 3911 	push	hl
      001095 21r17r01         [10] 3912 	ld	hl, #_FONT
      001098 E5               [11] 3913 	push	hl
      001099 21 78 01         [10] 3914 	ld	hl, #0x0178
      00109C E5               [11] 3915 	push	hl
      00109D CDr00r00         [17] 3916 	call	_LDIRVM
      0010A0 21 06 00         [10] 3917 	ld	hl, #6
      0010A3 39               [11] 3918 	add	hl, sp
      0010A4 F9               [ 6] 3919 	ld	sp, hl
                                   3920 ;src\/Graphics.h:417: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0010A5 21 00 03         [10] 3921 	ld	hl, #0x0300
      0010A8 E5               [11] 3922 	push	hl
      0010A9 21r17r01         [10] 3923 	ld	hl, #_FONT
      0010AC E5               [11] 3924 	push	hl
      0010AD 21 78 09         [10] 3925 	ld	hl, #0x0978
      0010B0 E5               [11] 3926 	push	hl
      0010B1 CDr00r00         [17] 3927 	call	_LDIRVM
      0010B4 21 06 00         [10] 3928 	ld	hl, #6
      0010B7 39               [11] 3929 	add	hl, sp
      0010B8 F9               [ 6] 3930 	ld	sp, hl
                                   3931 ;src\/Graphics.h:420: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0010B9 21 00 03         [10] 3932 	ld	hl, #0x0300
      0010BC E5               [11] 3933 	push	hl
      0010BD 21r17r01         [10] 3934 	ld	hl, #_FONT
      0010C0 E5               [11] 3935 	push	hl
      0010C1 21 78 11         [10] 3936 	ld	hl, #0x1178
      0010C4 E5               [11] 3937 	push	hl
      0010C5 CDr00r00         [17] 3938 	call	_LDIRVM
      0010C8 21 06 00         [10] 3939 	ld	hl, #6
      0010CB 39               [11] 3940 	add	hl, sp
      0010CC F9               [ 6] 3941 	ld	sp, hl
                                   3942 ;src\/Graphics.h:424: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0010CD 0E 00            [ 7] 3943 	ld	c, #0x00
      0010CF                       3944 00113$:
                                   3945 ;src\/Graphics.h:425: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0010CF 79               [ 4] 3946 	ld	a,c
      0010D0 FE 07            [ 7] 3947 	cp	a,#0x07
      0010D2 30 20            [12] 3948 	jr	NC, 00102$
      0010D4 26 00            [ 7] 3949 	ld	h, #0x00
      0010D6 6F               [ 4] 3950 	ld	l, a
      0010D7 29               [11] 3951 	add	hl, hl
      0010D8 29               [11] 3952 	add	hl, hl
      0010D9 29               [11] 3953 	add	hl, hl
      0010DA 11 70 04         [10] 3954 	ld	de, #0x0470
      0010DD 19               [11] 3955 	add	hl, de
      0010DE C5               [11] 3956 	push	bc
      0010DF 11 38 00         [10] 3957 	ld	de, #0x0038
      0010E2 D5               [11] 3958 	push	de
      0010E3 11r87r05         [10] 3959 	ld	de, #_pattern_title
      0010E6 D5               [11] 3960 	push	de
      0010E7 E5               [11] 3961 	push	hl
      0010E8 CDr00r00         [17] 3962 	call	_LDIRVM
      0010EB 21 06 00         [10] 3963 	ld	hl, #6
      0010EE 39               [11] 3964 	add	hl, sp
      0010EF F9               [ 6] 3965 	ld	sp, hl
      0010F0 C1               [10] 3966 	pop	bc
                                   3967 ;src\/Graphics.h:424: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0010F1 0C               [ 4] 3968 	inc	c
      0010F2 18 DB            [12] 3969 	jr	00113$
      0010F4                       3970 00102$:
                                   3971 ;src\/Graphics.h:431: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      0010F4 21 78 01         [10] 3972 	ld	hl, #0x0178
      0010F7 E5               [11] 3973 	push	hl
      0010F8 21r8Fr05         [10] 3974 	ld	hl, #_color_black_0
      0010FB E5               [11] 3975 	push	hl
      0010FC 21 00 20         [10] 3976 	ld	hl, #0x2000
      0010FF E5               [11] 3977 	push	hl
      001100 CDr00r00         [17] 3978 	call	_LDIRVM
      001103 21 06 00         [10] 3979 	ld	hl, #6
      001106 39               [11] 3980 	add	hl, sp
      001107 F9               [ 6] 3981 	ld	sp, hl
                                   3982 ;src\/Graphics.h:433: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001108 21 78 01         [10] 3983 	ld	hl, #0x0178
      00110B E5               [11] 3984 	push	hl
      00110C 21r8Fr05         [10] 3985 	ld	hl, #_color_black_0
      00110F E5               [11] 3986 	push	hl
      001110 21 00 28         [10] 3987 	ld	hl, #0x2800
      001113 E5               [11] 3988 	push	hl
      001114 CDr00r00         [17] 3989 	call	_LDIRVM
      001117 21 06 00         [10] 3990 	ld	hl, #6
      00111A 39               [11] 3991 	add	hl, sp
      00111B F9               [ 6] 3992 	ld	sp, hl
                                   3993 ;src\/Graphics.h:435: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00111C 21 78 01         [10] 3994 	ld	hl, #0x0178
      00111F E5               [11] 3995 	push	hl
      001120 21r8Fr05         [10] 3996 	ld	hl, #_color_black_0
      001123 E5               [11] 3997 	push	hl
      001124 21 00 30         [10] 3998 	ld	hl, #0x3000
      001127 E5               [11] 3999 	push	hl
      001128 CDr00r00         [17] 4000 	call	_LDIRVM
      00112B 21 06 00         [10] 4001 	ld	hl, #6
      00112E 39               [11] 4002 	add	hl, sp
      00112F F9               [ 6] 4003 	ld	sp, hl
                                   4004 ;src\/Graphics.h:442: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001130 0E 00            [ 7] 4005 	ld	c, #0x00
      001132                       4006 00116$:
                                   4007 ;src\/Graphics.h:443: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001132 79               [ 4] 4008 	ld	a,c
      001133 FE 60            [ 7] 4009 	cp	a,#0x60
      001135 30 20            [12] 4010 	jr	NC, 00103$
      001137 26 00            [ 7] 4011 	ld	h, #0x00
      001139 6F               [ 4] 4012 	ld	l, a
      00113A 29               [11] 4013 	add	hl, hl
      00113B 29               [11] 4014 	add	hl, hl
      00113C 29               [11] 4015 	add	hl, hl
      00113D 11 78 21         [10] 4016 	ld	de, #0x2178
      001140 19               [11] 4017 	add	hl, de
      001141 C5               [11] 4018 	push	bc
      001142 11 08 00         [10] 4019 	ld	de, #0x0008
      001145 D5               [11] 4020 	push	de
      001146 11r07r07         [10] 4021 	ld	de, #_color_font_2
      001149 D5               [11] 4022 	push	de
      00114A E5               [11] 4023 	push	hl
      00114B CDr00r00         [17] 4024 	call	_LDIRVM
      00114E 21 06 00         [10] 4025 	ld	hl, #6
      001151 39               [11] 4026 	add	hl, sp
      001152 F9               [ 6] 4027 	ld	sp, hl
      001153 C1               [10] 4028 	pop	bc
                                   4029 ;src\/Graphics.h:442: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001154 0C               [ 4] 4030 	inc	c
      001155 18 DB            [12] 4031 	jr	00116$
      001157                       4032 00103$:
                                   4033 ;src\/Graphics.h:446: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001157 0E 00            [ 7] 4034 	ld	c, #0x00
      001159                       4035 00119$:
                                   4036 ;src\/Graphics.h:447: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001159 79               [ 4] 4037 	ld	a,c
      00115A FE 60            [ 7] 4038 	cp	a,#0x60
      00115C 30 20            [12] 4039 	jr	NC, 00104$
      00115E 26 00            [ 7] 4040 	ld	h, #0x00
      001160 6F               [ 4] 4041 	ld	l, a
      001161 29               [11] 4042 	add	hl, hl
      001162 29               [11] 4043 	add	hl, hl
      001163 29               [11] 4044 	add	hl, hl
      001164 11 78 29         [10] 4045 	ld	de, #0x2978
      001167 19               [11] 4046 	add	hl, de
      001168 C5               [11] 4047 	push	bc
      001169 11 08 00         [10] 4048 	ld	de, #0x0008
      00116C D5               [11] 4049 	push	de
      00116D 11r07r07         [10] 4050 	ld	de, #_color_font_2
      001170 D5               [11] 4051 	push	de
      001171 E5               [11] 4052 	push	hl
      001172 CDr00r00         [17] 4053 	call	_LDIRVM
      001175 21 06 00         [10] 4054 	ld	hl, #6
      001178 39               [11] 4055 	add	hl, sp
      001179 F9               [ 6] 4056 	ld	sp, hl
      00117A C1               [10] 4057 	pop	bc
                                   4058 ;src\/Graphics.h:446: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00117B 0C               [ 4] 4059 	inc	c
      00117C 18 DB            [12] 4060 	jr	00119$
      00117E                       4061 00104$:
                                   4062 ;src\/Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00117E 0E 00            [ 7] 4063 	ld	c, #0x00
      001180                       4064 00122$:
                                   4065 ;src\/Graphics.h:451: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001180 79               [ 4] 4066 	ld	a,c
      001181 FE 60            [ 7] 4067 	cp	a,#0x60
      001183 30 20            [12] 4068 	jr	NC, 00105$
      001185 26 00            [ 7] 4069 	ld	h, #0x00
      001187 6F               [ 4] 4070 	ld	l, a
      001188 29               [11] 4071 	add	hl, hl
      001189 29               [11] 4072 	add	hl, hl
      00118A 29               [11] 4073 	add	hl, hl
      00118B 11 78 31         [10] 4074 	ld	de, #0x3178
      00118E 19               [11] 4075 	add	hl, de
      00118F C5               [11] 4076 	push	bc
      001190 11 08 00         [10] 4077 	ld	de, #0x0008
      001193 D5               [11] 4078 	push	de
      001194 11r07r07         [10] 4079 	ld	de, #_color_font_2
      001197 D5               [11] 4080 	push	de
      001198 E5               [11] 4081 	push	hl
      001199 CDr00r00         [17] 4082 	call	_LDIRVM
      00119C 21 06 00         [10] 4083 	ld	hl, #6
      00119F 39               [11] 4084 	add	hl, sp
      0011A0 F9               [ 6] 4085 	ld	sp, hl
      0011A1 C1               [10] 4086 	pop	bc
                                   4087 ;src\/Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0011A2 0C               [ 4] 4088 	inc	c
      0011A3 18 DB            [12] 4089 	jr	00122$
      0011A5                       4090 00105$:
                                   4091 ;src\/Graphics.h:459: for(byte i = 0; i < 10; i++) {
      0011A5 0E 00            [ 7] 4092 	ld	c, #0x00
      0011A7                       4093 00125$:
                                   4094 ;src\/Graphics.h:460: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0011A7 79               [ 4] 4095 	ld	a,c
      0011A8 FE 0A            [ 7] 4096 	cp	a,#0x0a
      0011AA 30 20            [12] 4097 	jr	NC, 00106$
      0011AC 26 00            [ 7] 4098 	ld	h, #0x00
      0011AE 6F               [ 4] 4099 	ld	l, a
      0011AF 29               [11] 4100 	add	hl, hl
      0011B0 29               [11] 4101 	add	hl, hl
      0011B1 29               [11] 4102 	add	hl, hl
      0011B2 11 F8 21         [10] 4103 	ld	de, #0x21f8
      0011B5 19               [11] 4104 	add	hl, de
      0011B6 C5               [11] 4105 	push	bc
      0011B7 11 08 00         [10] 4106 	ld	de, #0x0008
      0011BA D5               [11] 4107 	push	de
      0011BB 11rFFr06         [10] 4108 	ld	de, #_color_font_1
      0011BE D5               [11] 4109 	push	de
      0011BF E5               [11] 4110 	push	hl
      0011C0 CDr00r00         [17] 4111 	call	_LDIRVM
      0011C3 21 06 00         [10] 4112 	ld	hl, #6
      0011C6 39               [11] 4113 	add	hl, sp
      0011C7 F9               [ 6] 4114 	ld	sp, hl
      0011C8 C1               [10] 4115 	pop	bc
                                   4116 ;src\/Graphics.h:459: for(byte i = 0; i < 10; i++) {
      0011C9 0C               [ 4] 4117 	inc	c
      0011CA 18 DB            [12] 4118 	jr	00125$
      0011CC                       4119 00106$:
                                   4120 ;src\/Graphics.h:463: for(byte i = 0; i < 10; i++) {
      0011CC 0E 00            [ 7] 4121 	ld	c, #0x00
      0011CE                       4122 00128$:
                                   4123 ;src\/Graphics.h:464: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0011CE 79               [ 4] 4124 	ld	a,c
      0011CF FE 0A            [ 7] 4125 	cp	a,#0x0a
      0011D1 30 20            [12] 4126 	jr	NC, 00107$
      0011D3 26 00            [ 7] 4127 	ld	h, #0x00
      0011D5 6F               [ 4] 4128 	ld	l, a
      0011D6 29               [11] 4129 	add	hl, hl
      0011D7 29               [11] 4130 	add	hl, hl
      0011D8 29               [11] 4131 	add	hl, hl
      0011D9 11 F8 29         [10] 4132 	ld	de, #0x29f8
      0011DC 19               [11] 4133 	add	hl, de
      0011DD C5               [11] 4134 	push	bc
      0011DE 11 08 00         [10] 4135 	ld	de, #0x0008
      0011E1 D5               [11] 4136 	push	de
      0011E2 11rFFr06         [10] 4137 	ld	de, #_color_font_1
      0011E5 D5               [11] 4138 	push	de
      0011E6 E5               [11] 4139 	push	hl
      0011E7 CDr00r00         [17] 4140 	call	_LDIRVM
      0011EA 21 06 00         [10] 4141 	ld	hl, #6
      0011ED 39               [11] 4142 	add	hl, sp
      0011EE F9               [ 6] 4143 	ld	sp, hl
      0011EF C1               [10] 4144 	pop	bc
                                   4145 ;src\/Graphics.h:463: for(byte i = 0; i < 10; i++) {
      0011F0 0C               [ 4] 4146 	inc	c
      0011F1 18 DB            [12] 4147 	jr	00128$
      0011F3                       4148 00107$:
                                   4149 ;src\/Graphics.h:467: for(byte i = 0; i < 10; i++) {
      0011F3 DD 36 FF 00      [19] 4150 	ld	-1 (ix), #0
      0011F7                       4151 00131$:
      0011F7 DD 7E FF         [19] 4152 	ld	a, -1 (ix)
      0011FA D6 0A            [ 7] 4153 	sub	a, #0x0a
      0011FC 30 22            [12] 4154 	jr	NC, 00108$
                                   4155 ;src\/Graphics.h:468: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0011FE 01rFFr06         [10] 4156 	ld	bc, #_color_font_1
      001201 DD 6E FF         [19] 4157 	ld	l, -1 (ix)
      001204 26 00            [ 7] 4158 	ld	h, #0x00
      001206 29               [11] 4159 	add	hl, hl
      001207 29               [11] 4160 	add	hl, hl
      001208 29               [11] 4161 	add	hl, hl
      001209 11 F8 31         [10] 4162 	ld	de, #0x31f8
      00120C 19               [11] 4163 	add	hl, de
      00120D 11 08 00         [10] 4164 	ld	de, #0x0008
      001210 D5               [11] 4165 	push	de
      001211 C5               [11] 4166 	push	bc
      001212 E5               [11] 4167 	push	hl
      001213 CDr00r00         [17] 4168 	call	_LDIRVM
      001216 21 06 00         [10] 4169 	ld	hl, #6
      001219 39               [11] 4170 	add	hl, sp
      00121A F9               [ 6] 4171 	ld	sp, hl
                                   4172 ;src\/Graphics.h:467: for(byte i = 0; i < 10; i++) {
      00121B DD 34 FF         [23] 4173 	inc	-1 (ix)
      00121E 18 D7            [12] 4174 	jr	00131$
      001220                       4175 00108$:
                                   4176 ;src\/Graphics.h:472: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001220 21 38 00         [10] 4177 	ld	hl, #0x0038
      001223 E5               [11] 4178 	push	hl
      001224 21r0Fr07         [10] 4179 	ld	hl, #_color_title_1
      001227 E5               [11] 4180 	push	hl
      001228 21 70 24         [10] 4181 	ld	hl, #0x2470
      00122B E5               [11] 4182 	push	hl
      00122C CDr00r00         [17] 4183 	call	_LDIRVM
      00122F 21 06 00         [10] 4184 	ld	hl, #6
      001232 39               [11] 4185 	add	hl, sp
      001233 F9               [ 6] 4186 	ld	sp, hl
                                   4187 ;src\/Graphics.h:480: ENASCR();	// Enable screen
      001234 CDr00r00         [17] 4188 	call	_ENASCR
                                   4189 ;src\/Graphics.h:481: }
      001237 33               [ 6] 4190 	inc	sp
      001238 DD E1            [14] 4191 	pop	ix
      00123A C9               [10] 4192 	ret
                                   4193 ;src\/Graphics.h:483: void DrawBlock(byte col, byte line, byte tile) {
                                   4194 ;	---------------------------------
                                   4195 ; Function DrawBlock
                                   4196 ; ---------------------------------
      00123B                       4197 _DrawBlock::
      00123B DD E5            [15] 4198 	push	ix
      00123D DD 21 00 00      [14] 4199 	ld	ix,#0
      001241 DD 39            [15] 4200 	add	ix,sp
                                   4201 ;src\/Graphics.h:485: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001243 DD 6E 04         [19] 4202 	ld	l, 4 (ix)
      001246 26 00            [ 7] 4203 	ld	h, #0x00
      001248 29               [11] 4204 	add	hl, hl
      001249 4D               [ 4] 4205 	ld	c, l
      00124A 44               [ 4] 4206 	ld	b, h
      00124B DD 6E 05         [19] 4207 	ld	l, 5 (ix)
      00124E 26 00            [ 7] 4208 	ld	h, #0x00
      001250 29               [11] 4209 	add	hl, hl
      001251 29               [11] 4210 	add	hl, hl
      001252 29               [11] 4211 	add	hl, hl
      001253 29               [11] 4212 	add	hl, hl
      001254 29               [11] 4213 	add	hl, hl
      001255 29               [11] 4214 	add	hl, hl
      001256 11 0A 18         [10] 4215 	ld	de, #0x180a
      001259 19               [11] 4216 	add	hl, de
      00125A 09               [11] 4217 	add	hl, bc
      00125B EB               [ 4] 4218 	ex	de, hl
                                   4219 ;src\/Graphics.h:487: WRTVRM(baseAddr, tile);
      00125C D5               [11] 4220 	push	de
      00125D DD 7E 06         [19] 4221 	ld	a, 6 (ix)
      001260 F5               [11] 4222 	push	af
      001261 33               [ 6] 4223 	inc	sp
      001262 D5               [11] 4224 	push	de
      001263 CDr00r00         [17] 4225 	call	_WRTVRM
      001266 F1               [10] 4226 	pop	af
      001267 33               [ 6] 4227 	inc	sp
      001268 D1               [10] 4228 	pop	de
                                   4229 ;src\/Graphics.h:488: WRTVRM(baseAddr + 1, tile + 1);
      001269 DD 4E 06         [19] 4230 	ld	c, 6 (ix)
      00126C 79               [ 4] 4231 	ld	a, c
      00126D 3C               [ 4] 4232 	inc	a
      00126E 6B               [ 4] 4233 	ld	l, e
      00126F 62               [ 4] 4234 	ld	h, d
      001270 23               [ 6] 4235 	inc	hl
      001271 C5               [11] 4236 	push	bc
      001272 D5               [11] 4237 	push	de
      001273 F5               [11] 4238 	push	af
      001274 33               [ 6] 4239 	inc	sp
      001275 E5               [11] 4240 	push	hl
      001276 CDr00r00         [17] 4241 	call	_WRTVRM
      001279 F1               [10] 4242 	pop	af
      00127A 33               [ 6] 4243 	inc	sp
      00127B D1               [10] 4244 	pop	de
      00127C C1               [10] 4245 	pop	bc
                                   4246 ;src\/Graphics.h:489: WRTVRM(baseAddr + 32, tile + 2);
      00127D 41               [ 4] 4247 	ld	b, c
      00127E 04               [ 4] 4248 	inc	b
      00127F 04               [ 4] 4249 	inc	b
      001280 21 20 00         [10] 4250 	ld	hl, #0x0020
      001283 19               [11] 4251 	add	hl, de
      001284 C5               [11] 4252 	push	bc
      001285 D5               [11] 4253 	push	de
      001286 C5               [11] 4254 	push	bc
      001287 33               [ 6] 4255 	inc	sp
      001288 E5               [11] 4256 	push	hl
      001289 CDr00r00         [17] 4257 	call	_WRTVRM
      00128C F1               [10] 4258 	pop	af
      00128D 33               [ 6] 4259 	inc	sp
      00128E D1               [10] 4260 	pop	de
      00128F C1               [10] 4261 	pop	bc
                                   4262 ;src\/Graphics.h:490: WRTVRM(baseAddr + 33, tile + 3);
      001290 0C               [ 4] 4263 	inc	c
      001291 0C               [ 4] 4264 	inc	c
      001292 0C               [ 4] 4265 	inc	c
      001293 21 21 00         [10] 4266 	ld	hl, #0x0021
      001296 19               [11] 4267 	add	hl, de
      001297 79               [ 4] 4268 	ld	a, c
      001298 F5               [11] 4269 	push	af
      001299 33               [ 6] 4270 	inc	sp
      00129A E5               [11] 4271 	push	hl
      00129B CDr00r00         [17] 4272 	call	_WRTVRM
      00129E F1               [10] 4273 	pop	af
      00129F 33               [ 6] 4274 	inc	sp
                                   4275 ;src\/Graphics.h:491: }
      0012A0 DD E1            [14] 4276 	pop	ix
      0012A2 C9               [10] 4277 	ret
                                   4278 ;src\/Graphics.h:493: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   4279 ;	---------------------------------
                                   4280 ; Function DrawBlock_SameTile
                                   4281 ; ---------------------------------
      0012A3                       4282 _DrawBlock_SameTile::
      0012A3 DD E5            [15] 4283 	push	ix
      0012A5 DD 21 00 00      [14] 4284 	ld	ix,#0
      0012A9 DD 39            [15] 4285 	add	ix,sp
                                   4286 ;src\/Graphics.h:495: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0012AB DD 6E 04         [19] 4287 	ld	l, 4 (ix)
      0012AE 26 00            [ 7] 4288 	ld	h, #0x00
      0012B0 29               [11] 4289 	add	hl, hl
      0012B1 4D               [ 4] 4290 	ld	c, l
      0012B2 44               [ 4] 4291 	ld	b, h
      0012B3 DD 6E 05         [19] 4292 	ld	l, 5 (ix)
      0012B6 26 00            [ 7] 4293 	ld	h, #0x00
      0012B8 29               [11] 4294 	add	hl, hl
      0012B9 29               [11] 4295 	add	hl, hl
      0012BA 29               [11] 4296 	add	hl, hl
      0012BB 29               [11] 4297 	add	hl, hl
      0012BC 29               [11] 4298 	add	hl, hl
      0012BD 29               [11] 4299 	add	hl, hl
      0012BE 11 0A 18         [10] 4300 	ld	de, #0x180a
      0012C1 19               [11] 4301 	add	hl, de
      0012C2 09               [11] 4302 	add	hl, bc
      0012C3 EB               [ 4] 4303 	ex	de, hl
                                   4304 ;src\/Graphics.h:497: WRTVRM(baseAddr, tile);
      0012C4 D5               [11] 4305 	push	de
      0012C5 DD 7E 06         [19] 4306 	ld	a, 6 (ix)
      0012C8 F5               [11] 4307 	push	af
      0012C9 33               [ 6] 4308 	inc	sp
      0012CA D5               [11] 4309 	push	de
      0012CB CDr00r00         [17] 4310 	call	_WRTVRM
      0012CE F1               [10] 4311 	pop	af
      0012CF 33               [ 6] 4312 	inc	sp
      0012D0 D1               [10] 4313 	pop	de
                                   4314 ;src\/Graphics.h:498: WRTVRM(baseAddr + 1, tile);
      0012D1 4B               [ 4] 4315 	ld	c, e
      0012D2 42               [ 4] 4316 	ld	b, d
      0012D3 03               [ 6] 4317 	inc	bc
      0012D4 D5               [11] 4318 	push	de
      0012D5 DD 7E 06         [19] 4319 	ld	a, 6 (ix)
      0012D8 F5               [11] 4320 	push	af
      0012D9 33               [ 6] 4321 	inc	sp
      0012DA C5               [11] 4322 	push	bc
      0012DB CDr00r00         [17] 4323 	call	_WRTVRM
      0012DE F1               [10] 4324 	pop	af
      0012DF 33               [ 6] 4325 	inc	sp
      0012E0 D1               [10] 4326 	pop	de
                                   4327 ;src\/Graphics.h:499: WRTVRM(baseAddr + 32, tile);
      0012E1 21 20 00         [10] 4328 	ld	hl, #0x0020
      0012E4 19               [11] 4329 	add	hl, de
      0012E5 D5               [11] 4330 	push	de
      0012E6 DD 7E 06         [19] 4331 	ld	a, 6 (ix)
      0012E9 F5               [11] 4332 	push	af
      0012EA 33               [ 6] 4333 	inc	sp
      0012EB E5               [11] 4334 	push	hl
      0012EC CDr00r00         [17] 4335 	call	_WRTVRM
      0012EF F1               [10] 4336 	pop	af
      0012F0 33               [ 6] 4337 	inc	sp
      0012F1 D1               [10] 4338 	pop	de
                                   4339 ;src\/Graphics.h:500: WRTVRM(baseAddr + 33, tile);
      0012F2 21 21 00         [10] 4340 	ld	hl, #0x0021
      0012F5 19               [11] 4341 	add	hl, de
      0012F6 DD 7E 06         [19] 4342 	ld	a, 6 (ix)
      0012F9 F5               [11] 4343 	push	af
      0012FA 33               [ 6] 4344 	inc	sp
      0012FB E5               [11] 4345 	push	hl
      0012FC CDr00r00         [17] 4346 	call	_WRTVRM
      0012FF F1               [10] 4347 	pop	af
      001300 33               [ 6] 4348 	inc	sp
                                   4349 ;src\/Graphics.h:501: }
      001301 DD E1            [14] 4350 	pop	ix
      001303 C9               [10] 4351 	ret
                                   4352 ;src\/Graphics.h:503: void DrawLine(byte line) {
                                   4353 ;	---------------------------------
                                   4354 ; Function DrawLine
                                   4355 ; ---------------------------------
      001304                       4356 _DrawLine::
      001304 DD E5            [15] 4357 	push	ix
      001306 DD 21 00 00      [14] 4358 	ld	ix,#0
      00130A DD 39            [15] 4359 	add	ix,sp
                                   4360 ;src\/Graphics.h:504: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00130C DD 4E 04         [19] 4361 	ld	c, 4 (ix)
      00130F 06 00            [ 7] 4362 	ld	b, #0x00
      001311                       4363 00103$:
      001311 78               [ 4] 4364 	ld	a, b
      001312 D6 06            [ 7] 4365 	sub	a, #0x06
      001314 30 23            [12] 4366 	jr	NC, 00105$
                                   4367 ;src\/Graphics.h:505: DrawBlock(col, line, playfield[col][line]);
      001316 58               [ 4] 4368 	ld	e, b
      001317 16 00            [ 7] 4369 	ld	d, #0x00
      001319 6B               [ 4] 4370 	ld	l, e
      00131A 62               [ 4] 4371 	ld	h, d
      00131B 29               [11] 4372 	add	hl, hl
      00131C 19               [11] 4373 	add	hl, de
      00131D 29               [11] 4374 	add	hl, hl
      00131E 29               [11] 4375 	add	hl, hl
      00131F 11r00r00         [10] 4376 	ld	de, #_playfield
      001322 19               [11] 4377 	add	hl, de
      001323 59               [ 4] 4378 	ld	e, c
      001324 16 00            [ 7] 4379 	ld	d, #0x00
      001326 19               [11] 4380 	add	hl, de
      001327 7E               [ 7] 4381 	ld	a, (hl)
      001328 C5               [11] 4382 	push	bc
      001329 F5               [11] 4383 	push	af
      00132A 33               [ 6] 4384 	inc	sp
      00132B 79               [ 4] 4385 	ld	a, c
      00132C F5               [11] 4386 	push	af
      00132D 33               [ 6] 4387 	inc	sp
      00132E C5               [11] 4388 	push	bc
      00132F 33               [ 6] 4389 	inc	sp
      001330 CDr3Br12         [17] 4390 	call	_DrawBlock
      001333 F1               [10] 4391 	pop	af
      001334 33               [ 6] 4392 	inc	sp
      001335 C1               [10] 4393 	pop	bc
                                   4394 ;src\/Graphics.h:504: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001336 04               [ 4] 4395 	inc	b
      001337 18 D8            [12] 4396 	jr	00103$
      001339                       4397 00105$:
                                   4398 ;src\/Graphics.h:507: }
      001339 DD E1            [14] 4399 	pop	ix
      00133B C9               [10] 4400 	ret
                                   4401 ;src\/Graphics.h:509: void DrawPiece(byte line) {
                                   4402 ;	---------------------------------
                                   4403 ; Function DrawPiece
                                   4404 ; ---------------------------------
      00133C                       4405 _DrawPiece::
                                   4406 ;src\/Graphics.h:510: DrawLine(line);
      00133C 21 02 00         [10] 4407 	ld	hl, #2
      00133F 39               [11] 4408 	add	hl, sp
      001340 7E               [ 7] 4409 	ld	a, (hl)
      001341 F5               [11] 4410 	push	af
      001342 33               [ 6] 4411 	inc	sp
      001343 CDr04r13         [17] 4412 	call	_DrawLine
      001346 33               [ 6] 4413 	inc	sp
                                   4414 ;src\/Graphics.h:511: DrawLine(line + 1);
      001347 21 02 00         [10] 4415 	ld	hl, #2
      00134A 39               [11] 4416 	add	hl, sp
      00134B 46               [ 7] 4417 	ld	b, (hl)
      00134C 78               [ 4] 4418 	ld	a, b
      00134D 3C               [ 4] 4419 	inc	a
      00134E C5               [11] 4420 	push	bc
      00134F F5               [11] 4421 	push	af
      001350 33               [ 6] 4422 	inc	sp
      001351 CDr04r13         [17] 4423 	call	_DrawLine
      001354 33               [ 6] 4424 	inc	sp
      001355 C1               [10] 4425 	pop	bc
                                   4426 ;src\/Graphics.h:512: DrawLine(line + 2);
      001356 04               [ 4] 4427 	inc	b
      001357 04               [ 4] 4428 	inc	b
      001358 C5               [11] 4429 	push	bc
      001359 33               [ 6] 4430 	inc	sp
      00135A CDr04r13         [17] 4431 	call	_DrawLine
      00135D 33               [ 6] 4432 	inc	sp
                                   4433 ;src\/Graphics.h:513: }
      00135E C9               [10] 4434 	ret
                                   4435 ;src\/Graphics.h:515: void DrawPlayfield() {
                                   4436 ;	---------------------------------
                                   4437 ; Function DrawPlayfield
                                   4438 ; ---------------------------------
      00135F                       4439 _DrawPlayfield::
                                   4440 ;src\/Graphics.h:516: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00135F 06 00            [ 7] 4441 	ld	b, #0x00
      001361                       4442 00103$:
      001361 78               [ 4] 4443 	ld	a, b
      001362 D6 0C            [ 7] 4444 	sub	a, #0x0c
      001364 D0               [11] 4445 	ret	NC
                                   4446 ;src\/Graphics.h:517: DrawLine(line);
      001365 C5               [11] 4447 	push	bc
      001366 C5               [11] 4448 	push	bc
      001367 33               [ 6] 4449 	inc	sp
      001368 CDr04r13         [17] 4450 	call	_DrawLine
      00136B 33               [ 6] 4451 	inc	sp
      00136C C1               [10] 4452 	pop	bc
                                   4453 ;src\/Graphics.h:516: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00136D 04               [ 4] 4454 	inc	b
                                   4455 ;src\/Graphics.h:519: }
      00136E 18 F1            [12] 4456 	jr	00103$
                                   4457 ;src\/Sound.h:1: void SoundFx_2() {
                                   4458 ;	---------------------------------
                                   4459 ; Function SoundFx_2
                                   4460 ; ---------------------------------
      001370                       4461 _SoundFx_2::
                                   4462 ;src\/Sound.h:2: GICINI();
      001370 CDr00r00         [17] 4463 	call	_GICINI
                                   4464 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001373 21 08 0F         [10] 4465 	ld	hl, #0x0f08
      001376 CDr00r00         [17] 4466 	call	_WRTPSG
                                   4467 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001379 0E 00            [ 7] 4468 	ld	c, #0x00
      00137B                       4469 00104$:
      00137B 79               [ 4] 4470 	ld	a, c
      00137C D6 FF            [ 7] 4471 	sub	a, #0xff
      00137E 30 11            [12] 4472 	jr	NC, 00101$
                                   4473 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001380 C5               [11] 4474 	push	bc
      001381 21 00 5D         [10] 4475 	ld	hl, #0x5d00
      001384 CDr00r00         [17] 4476 	call	_WRTPSG
      001387 21 01 00         [10] 4477 	ld	hl, #0x0001
      00138A CDr00r00         [17] 4478 	call	_WRTPSG
      00138D C1               [10] 4479 	pop	bc
                                   4480 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00138E 0C               [ 4] 4481 	inc	c
      00138F 18 EA            [12] 4482 	jr	00104$
      001391                       4483 00101$:
                                   4484 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001391 0E 00            [ 7] 4485 	ld	c, #0x00
      001393                       4486 00107$:
      001393 79               [ 4] 4487 	ld	a, c
      001394 D6 FF            [ 7] 4488 	sub	a, #0xff
      001396 30 11            [12] 4489 	jr	NC, 00102$
                                   4490 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001398 C5               [11] 4491 	push	bc
      001399 21 00 2D         [10] 4492 	ld	hl, #0x2d00
      00139C CDr00r00         [17] 4493 	call	_WRTPSG
      00139F 21 01 00         [10] 4494 	ld	hl, #0x0001
      0013A2 CDr00r00         [17] 4495 	call	_WRTPSG
      0013A5 C1               [10] 4496 	pop	bc
                                   4497 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0013A6 0C               [ 4] 4498 	inc	c
      0013A7 18 EA            [12] 4499 	jr	00107$
      0013A9                       4500 00102$:
                                   4501 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0013A9 21 08 00         [10] 4502 	ld	hl, #0x0008
                                   4503 ;src\/Sound.h:30: }
      0013AC C3r00r00         [10] 4504 	jp	_WRTPSG
                                   4505 ;src\/Sound.h:32: void SoundFx_1() {
                                   4506 ;	---------------------------------
                                   4507 ; Function SoundFx_1
                                   4508 ; ---------------------------------
      0013AF                       4509 _SoundFx_1::
                                   4510 ;src\/Sound.h:34: GICINI();
      0013AF CDr00r00         [17] 4511 	call	_GICINI
                                   4512 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0013B2 21 06 97         [10] 4513 	ld	hl, #0x9706
      0013B5 CDr00r00         [17] 4514 	call	_WRTPSG
                                   4515 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0013B8 21 07 81         [10] 4516 	ld	hl, #0x8107
      0013BB CDr00r00         [17] 4517 	call	_WRTPSG
                                   4518 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0013BE 21 08 10         [10] 4519 	ld	hl, #0x1008
      0013C1 CDr00r00         [17] 4520 	call	_WRTPSG
                                   4521 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0013C4 21 0C 13         [10] 4522 	ld	hl, #0x130c
      0013C7 CDr00r00         [17] 4523 	call	_WRTPSG
                                   4524 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0013CA 21 0D 01         [10] 4525 	ld	hl, #0x010d
                                   4526 ;src\/Sound.h:49: }
      0013CD C3r00r00         [10] 4527 	jp	_WRTPSG
                                   4528 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4529 ;	---------------------------------
                                   4530 ; Function CheckIfPlayfieldIsValid
                                   4531 ; ---------------------------------
      0013D0                       4532 _CheckIfPlayfieldIsValid::
      0013D0 DD E5            [15] 4533 	push	ix
      0013D2 DD 21 00 00      [14] 4534 	ld	ix,#0
      0013D6 DD 39            [15] 4535 	add	ix,sp
      0013D8 F5               [11] 4536 	push	af
      0013D9 F5               [11] 4537 	push	af
      0013DA 3B               [ 6] 4538 	dec	sp
                                   4539 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      0013DB DD 36 FB 00      [19] 4540 	ld	-5 (ix), #0
                                   4541 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0013DF DD 36 FC 00      [19] 4542 	ld	-4 (ix), #0
      0013E3 DD 36 FE 00      [19] 4543 	ld	-2 (ix), #0
      0013E7                       4544 00119$:
      0013E7 DD 7E FE         [19] 4545 	ld	a, -2 (ix)
      0013EA D6 0C            [ 7] 4546 	sub	a, #0x0c
      0013EC D2r7Fr14         [10] 4547 	jp	NC, 00121$
                                   4548 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0013EF DD 36 FD 00      [19] 4549 	ld	-3 (ix), #0
      0013F3 DD 36 FF 00      [19] 4550 	ld	-1 (ix), #0
      0013F7                       4551 00116$:
      0013F7 DD 7E FF         [19] 4552 	ld	a, -1 (ix)
      0013FA D6 06            [ 7] 4553 	sub	a, #0x06
      0013FC 30 75            [12] 4554 	jr	NC, 00120$
                                   4555 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      0013FE 0E 00            [ 7] 4556 	ld	c, #0x00
      001400                       4557 00113$:
      001400 79               [ 4] 4558 	ld	a, c
      001401 D6 05            [ 7] 4559 	sub	a, #0x05
      001403 30 33            [12] 4560 	jr	NC, 00104$
                                   4561 ;src\/CheckPlayfield.h:7: found = FALSE;
      001405 DD 36 FB 00      [19] 4562 	ld	-5 (ix), #0
                                   4563 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001409 DD 5E FF         [19] 4564 	ld	e, -1 (ix)
      00140C 16 00            [ 7] 4565 	ld	d, #0x00
      00140E 6B               [ 4] 4566 	ld	l, e
      00140F 62               [ 4] 4567 	ld	h, d
      001410 29               [11] 4568 	add	hl, hl
      001411 19               [11] 4569 	add	hl, de
      001412 29               [11] 4570 	add	hl, hl
      001413 29               [11] 4571 	add	hl, hl
      001414 11r48r00         [10] 4572 	ld	de, #_playfieldTemp
      001417 19               [11] 4573 	add	hl, de
      001418 7D               [ 4] 4574 	ld	a, l
      001419 DD 86 FE         [19] 4575 	add	a, -2 (ix)
      00141C 5F               [ 4] 4576 	ld	e, a
      00141D 7C               [ 4] 4577 	ld	a, h
      00141E CE 00            [ 7] 4578 	adc	a, #0x00
      001420 57               [ 4] 4579 	ld	d, a
      001421 21r18r00         [10] 4580 	ld	hl, #_pieces
      001424 06 00            [ 7] 4581 	ld	b, #0x00
      001426 09               [11] 4582 	add	hl, bc
      001427 46               [ 7] 4583 	ld	b, (hl)
      001428 1A               [ 7] 4584 	ld	a, (de)
      001429 B8               [ 4] 4585 	cp	a, b
      00142A 28 03            [12] 4586 	jr	Z, 00101$
      00142C B7               [ 4] 4587 	or	a, a
      00142D 20 06            [12] 4588 	jr	NZ, 00114$
      00142F                       4589 00101$:
                                   4590 ;src\/CheckPlayfield.h:9: found = TRUE;
      00142F DD 36 FB 01      [19] 4591 	ld	-5 (ix), #0x01
                                   4592 ;src\/CheckPlayfield.h:10: break;
      001433 18 03            [12] 4593 	jr	00104$
      001435                       4594 00114$:
                                   4595 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001435 0C               [ 4] 4596 	inc	c
      001436 18 C8            [12] 4597 	jr	00113$
      001438                       4598 00104$:
                                   4599 ;src\/CheckPlayfield.h:13: if(!found) {
      001438 DD 7E FB         [19] 4600 	ld	a, -5 (ix)
      00143B B7               [ 4] 4601 	or	a, a
      00143C 20 2A            [12] 4602 	jr	NZ, 00117$
                                   4603 ;src\/CheckPlayfield.h:14: d_col = col;
      00143E DD 7E FD         [19] 4604 	ld	a, -3 (ix)
      001441 32r09r00         [13] 4605 	ld	(#_d_col),a
                                   4606 ;src\/CheckPlayfield.h:15: d_line = line;
      001444 DD 7E FC         [19] 4607 	ld	a, -4 (ix)
      001447 32r0Ar00         [13] 4608 	ld	(#_d_line),a
                                   4609 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      00144A DD 4E FD         [19] 4610 	ld	c, -3 (ix)
      00144D 06 00            [ 7] 4611 	ld	b, #0x00
      00144F 69               [ 4] 4612 	ld	l, c
      001450 60               [ 4] 4613 	ld	h, b
      001451 29               [11] 4614 	add	hl, hl
      001452 09               [11] 4615 	add	hl, bc
      001453 29               [11] 4616 	add	hl, hl
      001454 29               [11] 4617 	add	hl, hl
      001455 11r48r00         [10] 4618 	ld	de, #_playfieldTemp
      001458 19               [11] 4619 	add	hl, de
      001459 DD 5E FC         [19] 4620 	ld	e, -4 (ix)
      00145C 16 00            [ 7] 4621 	ld	d, #0x00
      00145E 19               [11] 4622 	add	hl, de
      00145F 7E               [ 7] 4623 	ld	a, (hl)
      001460 32r0Br00         [13] 4624 	ld	(_d_value+0), a
                                   4625 ;src\/CheckPlayfield.h:18: while(1) { 
      001463                       4626 00106$:
                                   4627 ;src\/CheckPlayfield.h:19: BEEP();
      001463 CDr00r00         [17] 4628 	call	_BEEP
      001466 18 FB            [12] 4629 	jr	00106$
      001468                       4630 00117$:
                                   4631 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001468 DD 34 FF         [23] 4632 	inc	-1 (ix)
      00146B DD 7E FF         [19] 4633 	ld	a, -1 (ix)
      00146E DD 77 FD         [19] 4634 	ld	-3 (ix), a
      001471 18 84            [12] 4635 	jr	00116$
      001473                       4636 00120$:
                                   4637 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001473 DD 34 FE         [23] 4638 	inc	-2 (ix)
      001476 DD 7E FE         [19] 4639 	ld	a, -2 (ix)
      001479 DD 77 FC         [19] 4640 	ld	-4 (ix), a
      00147C C3rE7r13         [10] 4641 	jp	00119$
      00147F                       4642 00121$:
                                   4643 ;src\/CheckPlayfield.h:25: }
      00147F DD F9            [10] 4644 	ld	sp, ix
      001481 DD E1            [14] 4645 	pop	ix
      001483 C9               [10] 4646 	ret
                                   4647 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4648 ;	---------------------------------
                                   4649 ; Function CheckPlayfield
                                   4650 ; ---------------------------------
      001484                       4651 _CheckPlayfield::
      001484 DD E5            [15] 4652 	push	ix
      001486 DD 21 00 00      [14] 4653 	ld	ix,#0
      00148A DD 39            [15] 4654 	add	ix,sp
      00148C 21 EF FF         [10] 4655 	ld	hl, #-17
      00148F 39               [11] 4656 	add	hl, sp
      001490 F9               [ 6] 4657 	ld	sp, hl
                                   4658 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      001491 DD 36 EF 00      [19] 4659 	ld	-17 (ix), #0
                                   4660 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001495 0E 00            [ 7] 4661 	ld	c, #0x00
      001497                       4662 00195$:
      001497 79               [ 4] 4663 	ld	a, c
      001498 D6 0C            [ 7] 4664 	sub	a, #0x0c
      00149A 30 36            [12] 4665 	jr	NC, 00102$
                                   4666 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00149C DD 36 FF 00      [19] 4667 	ld	-1 (ix), #0
      0014A0                       4668 00192$:
      0014A0 DD 7E FF         [19] 4669 	ld	a, -1 (ix)
      0014A3 D6 06            [ 7] 4670 	sub	a, #0x06
      0014A5 30 28            [12] 4671 	jr	NC, 00196$
                                   4672 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      0014A7 DD 5E FF         [19] 4673 	ld	e, -1 (ix)
      0014AA 16 00            [ 7] 4674 	ld	d, #0x00
      0014AC 6B               [ 4] 4675 	ld	l, e
      0014AD 62               [ 4] 4676 	ld	h, d
      0014AE 29               [11] 4677 	add	hl, hl
      0014AF 19               [11] 4678 	add	hl, de
      0014B0 29               [11] 4679 	add	hl, hl
      0014B1 29               [11] 4680 	add	hl, hl
      0014B2 EB               [ 4] 4681 	ex	de, hl
      0014B3 21r48r00         [10] 4682 	ld	hl, #_playfieldTemp
      0014B6 19               [11] 4683 	add	hl, de
      0014B7 06 00            [ 7] 4684 	ld	b, #0x00
      0014B9 09               [11] 4685 	add	hl, bc
      0014BA 3Er00            [ 7] 4686 	ld	a, #<(_playfield)
      0014BC 83               [ 4] 4687 	add	a, e
      0014BD 5F               [ 4] 4688 	ld	e, a
      0014BE 3Es00            [ 7] 4689 	ld	a, #>(_playfield)
      0014C0 8A               [ 4] 4690 	adc	a, d
      0014C1 57               [ 4] 4691 	ld	d, a
      0014C2 7B               [ 4] 4692 	ld	a, e
      0014C3 81               [ 4] 4693 	add	a, c
      0014C4 5F               [ 4] 4694 	ld	e, a
      0014C5 30 01            [12] 4695 	jr	NC, 00614$
      0014C7 14               [ 4] 4696 	inc	d
      0014C8                       4697 00614$:
      0014C8 1A               [ 7] 4698 	ld	a, (de)
      0014C9 77               [ 7] 4699 	ld	(hl), a
                                   4700 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0014CA DD 34 FF         [23] 4701 	inc	-1 (ix)
      0014CD 18 D1            [12] 4702 	jr	00192$
      0014CF                       4703 00196$:
                                   4704 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0014CF 0C               [ 4] 4705 	inc	c
      0014D0 18 C5            [12] 4706 	jr	00195$
      0014D2                       4707 00102$:
                                   4708 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0014D2 DD 36 FE 00      [19] 4709 	ld	-2 (ix), #0
      0014D6                       4710 00201$:
      0014D6 DD 7E FE         [19] 4711 	ld	a, -2 (ix)
      0014D9 D6 0C            [ 7] 4712 	sub	a, #0x0c
      0014DB D2rDAr15         [10] 4713 	jp	NC, 00108$
                                   4714 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0014DE DD 36 FF 02      [19] 4715 	ld	-1 (ix), #0x02
      0014E2                       4716 00198$:
      0014E2 DD 7E FF         [19] 4717 	ld	a, -1 (ix)
      0014E5 D6 06            [ 7] 4718 	sub	a, #0x06
      0014E7 D2rD4r15         [10] 4719 	jp	NC, 00202$
                                   4720 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      0014EA DD 4E FF         [19] 4721 	ld	c, -1 (ix)
      0014ED 06 00            [ 7] 4722 	ld	b, #0x00
      0014EF 69               [ 4] 4723 	ld	l, c
      0014F0 60               [ 4] 4724 	ld	h, b
      0014F1 29               [11] 4725 	add	hl, hl
      0014F2 09               [11] 4726 	add	hl, bc
      0014F3 29               [11] 4727 	add	hl, hl
      0014F4 29               [11] 4728 	add	hl, hl
      0014F5 DD 75 F5         [19] 4729 	ld	-11 (ix), l
      0014F8 DD 74 F6         [19] 4730 	ld	-10 (ix), h
      0014FB 3Er48            [ 7] 4731 	ld	a, #<(_playfieldTemp)
      0014FD DD 86 F5         [19] 4732 	add	a, -11 (ix)
      001500 4F               [ 4] 4733 	ld	c, a
      001501 3Es00            [ 7] 4734 	ld	a, #>(_playfieldTemp)
      001503 DD 8E F6         [19] 4735 	adc	a, -10 (ix)
      001506 47               [ 4] 4736 	ld	b, a
      001507 79               [ 4] 4737 	ld	a, c
      001508 DD 86 FE         [19] 4738 	add	a, -2 (ix)
      00150B DD 77 F7         [19] 4739 	ld	-9 (ix), a
      00150E 78               [ 4] 4740 	ld	a, b
      00150F CE 00            [ 7] 4741 	adc	a, #0x00
      001511 DD 77 F8         [19] 4742 	ld	-8 (ix), a
      001514 DD 6E F7         [19] 4743 	ld	l, -9 (ix)
      001517 DD 66 F8         [19] 4744 	ld	h, -8 (ix)
      00151A 7E               [ 7] 4745 	ld	a, (hl)
      00151B DD 77 F9         [19] 4746 	ld	-7 (ix), a
      00151E B7               [ 4] 4747 	or	a, a
      00151F CArCEr15         [10] 4748 	jp	Z, 00199$
                                   4749 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001522 DD 7E FF         [19] 4750 	ld	a, -1 (ix)
      001525 DD 77 FD         [19] 4751 	ld	-3 (ix), a
      001528 4F               [ 4] 4752 	ld	c, a
      001529 0D               [ 4] 4753 	dec	c
      00152A 0D               [ 4] 4754 	dec	c
      00152B 79               [ 4] 4755 	ld	a, c
      00152C 07               [ 4] 4756 	rlca
      00152D 9F               [ 4] 4757 	sbc	a, a
      00152E 47               [ 4] 4758 	ld	b, a
      00152F 69               [ 4] 4759 	ld	l, c
      001530 60               [ 4] 4760 	ld	h, b
      001531 29               [11] 4761 	add	hl, hl
      001532 09               [11] 4762 	add	hl, bc
      001533 29               [11] 4763 	add	hl, hl
      001534 29               [11] 4764 	add	hl, hl
      001535 EB               [ 4] 4765 	ex	de, hl
      001536 21r48r00         [10] 4766 	ld	hl, #_playfieldTemp
      001539 19               [11] 4767 	add	hl, de
      00153A 7D               [ 4] 4768 	ld	a, l
      00153B DD 86 FE         [19] 4769 	add	a, -2 (ix)
      00153E DD 77 FA         [19] 4770 	ld	-6 (ix), a
      001541 7C               [ 4] 4771 	ld	a, h
      001542 CE 00            [ 7] 4772 	adc	a, #0x00
      001544 DD 77 FB         [19] 4773 	ld	-5 (ix), a
      001547 DD 4E FD         [19] 4774 	ld	c, -3 (ix)
      00154A 0D               [ 4] 4775 	dec	c
      00154B 79               [ 4] 4776 	ld	a, c
      00154C 07               [ 4] 4777 	rlca
      00154D 9F               [ 4] 4778 	sbc	a, a
      00154E 47               [ 4] 4779 	ld	b, a
      00154F 69               [ 4] 4780 	ld	l, c
      001550 60               [ 4] 4781 	ld	h, b
      001551 29               [11] 4782 	add	hl, hl
      001552 09               [11] 4783 	add	hl, bc
      001553 29               [11] 4784 	add	hl, hl
      001554 29               [11] 4785 	add	hl, hl
      001555 DD 75 FC         [19] 4786 	ld	-4 (ix), l
      001558 DD 74 FD         [19] 4787 	ld	-3 (ix), h
      00155B 3Er48            [ 7] 4788 	ld	a, #<(_playfieldTemp)
      00155D DD 86 FC         [19] 4789 	add	a, -4 (ix)
      001560 4F               [ 4] 4790 	ld	c, a
      001561 3Es00            [ 7] 4791 	ld	a, #>(_playfieldTemp)
      001563 DD 8E FD         [19] 4792 	adc	a, -3 (ix)
      001566 47               [ 4] 4793 	ld	b, a
      001567 79               [ 4] 4794 	ld	a, c
      001568 DD 86 FE         [19] 4795 	add	a, -2 (ix)
      00156B 4F               [ 4] 4796 	ld	c, a
      00156C 30 01            [12] 4797 	jr	NC, 00615$
      00156E 04               [ 4] 4798 	inc	b
      00156F                       4799 00615$:
      00156F DD 6E FA         [19] 4800 	ld	l, -6 (ix)
      001572 DD 66 FB         [19] 4801 	ld	h, -5 (ix)
      001575 6E               [ 7] 4802 	ld	l, (hl)
      001576 0A               [ 7] 4803 	ld	a, (bc)
      001577 67               [ 4] 4804 	ld	h, a
      001578 7D               [ 4] 4805 	ld	a, l
      001579 94               [ 4] 4806 	sub	a, h
      00157A 20 52            [12] 4807 	jr	NZ, 00199$
                                   4808 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00157C DD 7E F9         [19] 4809 	ld	a, -7 (ix)
      00157F 94               [ 4] 4810 	sub	a, h
      001580 20 4C            [12] 4811 	jr	NZ, 00199$
                                   4812 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      001582 DD 36 EF 01      [19] 4813 	ld	-17 (ix), #0x01
                                   4814 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001586 3Er00            [ 7] 4815 	ld	a, #<(_playfield)
      001588 83               [ 4] 4816 	add	a, e
      001589 5F               [ 4] 4817 	ld	e, a
      00158A 3Es00            [ 7] 4818 	ld	a, #>(_playfield)
      00158C 8A               [ 4] 4819 	adc	a, d
      00158D 57               [ 4] 4820 	ld	d, a
      00158E 7B               [ 4] 4821 	ld	a, e
      00158F DD 86 FE         [19] 4822 	add	a, -2 (ix)
      001592 5F               [ 4] 4823 	ld	e, a
      001593 30 01            [12] 4824 	jr	NC, 00620$
      001595 14               [ 4] 4825 	inc	d
      001596                       4826 00620$:
      001596 7D               [ 4] 4827 	ld	a, l
      001597 CB FF            [ 8] 4828 	set	7, a
      001599 12               [ 7] 4829 	ld	(de), a
                                   4830 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00159A 3Er00            [ 7] 4831 	ld	a, #<(_playfield)
      00159C DD 86 FC         [19] 4832 	add	a, -4 (ix)
      00159F 5F               [ 4] 4833 	ld	e, a
      0015A0 3Es00            [ 7] 4834 	ld	a, #>(_playfield)
      0015A2 DD 8E FD         [19] 4835 	adc	a, -3 (ix)
      0015A5 57               [ 4] 4836 	ld	d, a
      0015A6 DD 6E FE         [19] 4837 	ld	l, -2 (ix)
      0015A9 26 00            [ 7] 4838 	ld	h, #0x00
      0015AB 19               [11] 4839 	add	hl, de
      0015AC 0A               [ 7] 4840 	ld	a, (bc)
      0015AD CB FF            [ 8] 4841 	set	7, a
      0015AF 77               [ 7] 4842 	ld	(hl), a
                                   4843 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0015B0 3Er00            [ 7] 4844 	ld	a, #<(_playfield)
      0015B2 DD 86 F5         [19] 4845 	add	a, -11 (ix)
      0015B5 4F               [ 4] 4846 	ld	c, a
      0015B6 3Es00            [ 7] 4847 	ld	a, #>(_playfield)
      0015B8 DD 8E F6         [19] 4848 	adc	a, -10 (ix)
      0015BB 47               [ 4] 4849 	ld	b, a
      0015BC 79               [ 4] 4850 	ld	a, c
      0015BD DD 86 FE         [19] 4851 	add	a, -2 (ix)
      0015C0 4F               [ 4] 4852 	ld	c, a
      0015C1 30 01            [12] 4853 	jr	NC, 00621$
      0015C3 04               [ 4] 4854 	inc	b
      0015C4                       4855 00621$:
      0015C4 DD 6E F7         [19] 4856 	ld	l, -9 (ix)
      0015C7 DD 66 F8         [19] 4857 	ld	h, -8 (ix)
      0015CA 7E               [ 7] 4858 	ld	a, (hl)
      0015CB CB FF            [ 8] 4859 	set	7, a
      0015CD 02               [ 7] 4860 	ld	(bc), a
      0015CE                       4861 00199$:
                                   4862 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0015CE DD 34 FF         [23] 4863 	inc	-1 (ix)
      0015D1 C3rE2r14         [10] 4864 	jp	00198$
      0015D4                       4865 00202$:
                                   4866 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0015D4 DD 34 FE         [23] 4867 	inc	-2 (ix)
      0015D7 C3rD6r14         [10] 4868 	jp	00201$
      0015DA                       4869 00108$:
                                   4870 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0015DA 0E 02            [ 7] 4871 	ld	c, #0x02
      0015DC                       4872 00207$:
      0015DC 79               [ 4] 4873 	ld	a, c
      0015DD D6 0C            [ 7] 4874 	sub	a, #0x0c
      0015DF D2rA1r16         [10] 4875 	jp	NC, 00114$
                                   4876 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0015E2 DD 36 FF 00      [19] 4877 	ld	-1 (ix), #0
      0015E6                       4878 00204$:
      0015E6 DD 7E FF         [19] 4879 	ld	a, -1 (ix)
      0015E9 D6 06            [ 7] 4880 	sub	a, #0x06
      0015EB D2r9Dr16         [10] 4881 	jp	NC, 00208$
                                   4882 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      0015EE DD 5E FF         [19] 4883 	ld	e, -1 (ix)
      0015F1 16 00            [ 7] 4884 	ld	d, #0x00
      0015F3 6B               [ 4] 4885 	ld	l, e
      0015F4 62               [ 4] 4886 	ld	h, d
      0015F5 29               [11] 4887 	add	hl, hl
      0015F6 19               [11] 4888 	add	hl, de
      0015F7 29               [11] 4889 	add	hl, hl
      0015F8 29               [11] 4890 	add	hl, hl
      0015F9 DD 75 F7         [19] 4891 	ld	-9 (ix), l
      0015FC DD 74 F8         [19] 4892 	ld	-8 (ix), h
      0015FF 3Er48            [ 7] 4893 	ld	a, #<(_playfieldTemp)
      001601 DD 86 F7         [19] 4894 	add	a, -9 (ix)
      001604 5F               [ 4] 4895 	ld	e, a
      001605 3Es00            [ 7] 4896 	ld	a, #>(_playfieldTemp)
      001607 DD 8E F8         [19] 4897 	adc	a, -8 (ix)
      00160A 57               [ 4] 4898 	ld	d, a
      00160B 7B               [ 4] 4899 	ld	a, e
      00160C 81               [ 4] 4900 	add	a, c
      00160D DD 77 F9         [19] 4901 	ld	-7 (ix), a
      001610 7A               [ 4] 4902 	ld	a, d
      001611 CE 00            [ 7] 4903 	adc	a, #0x00
      001613 DD 77 FA         [19] 4904 	ld	-6 (ix), a
      001616 DD 6E F9         [19] 4905 	ld	l, -7 (ix)
      001619 DD 66 FA         [19] 4906 	ld	h, -6 (ix)
      00161C 7E               [ 7] 4907 	ld	a, (hl)
      00161D DD 77 FE         [19] 4908 	ld	-2 (ix), a
      001620 B7               [ 4] 4909 	or	a, a
      001621 28 74            [12] 4910 	jr	Z, 00205$
                                   4911 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001623 DD 71 FD         [19] 4912 	ld	-3 (ix), c
      001626 79               [ 4] 4913 	ld	a, c
      001627 C6 FE            [ 7] 4914 	add	a, #0xfe
      001629 DD 77 FB         [19] 4915 	ld	-5 (ix), a
      00162C 6F               [ 4] 4916 	ld	l, a
      00162D 26 00            [ 7] 4917 	ld	h, #0x00
      00162F 19               [11] 4918 	add	hl, de
      001630 DD 46 FD         [19] 4919 	ld	b, -3 (ix)
      001633 05               [ 4] 4920 	dec	b
      001634 7B               [ 4] 4921 	ld	a, e
      001635 80               [ 4] 4922 	add	a, b
      001636 5F               [ 4] 4923 	ld	e, a
      001637 30 01            [12] 4924 	jr	NC, 00622$
      001639 14               [ 4] 4925 	inc	d
      00163A                       4926 00622$:
      00163A 7E               [ 7] 4927 	ld	a, (hl)
      00163B DD 77 FC         [19] 4928 	ld	-4 (ix), a
      00163E 1A               [ 7] 4929 	ld	a, (de)
      00163F 6F               [ 4] 4930 	ld	l, a
      001640 DD 7E FC         [19] 4931 	ld	a, -4 (ix)
      001643 95               [ 4] 4932 	sub	a, l
      001644 20 51            [12] 4933 	jr	NZ, 00205$
                                   4934 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001646 DD 7E FE         [19] 4935 	ld	a, -2 (ix)
      001649 95               [ 4] 4936 	sub	a, l
      00164A 20 4B            [12] 4937 	jr	NZ, 00205$
                                   4938 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      00164C DD 36 EF 01      [19] 4939 	ld	-17 (ix), #0x01
                                   4940 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001650 3Er00            [ 7] 4941 	ld	a, #<(_playfield)
      001652 DD 86 F7         [19] 4942 	add	a, -9 (ix)
      001655 DD 77 FD         [19] 4943 	ld	-3 (ix), a
      001658 3Es00            [ 7] 4944 	ld	a, #>(_playfield)
      00165A DD 8E F8         [19] 4945 	adc	a, -8 (ix)
      00165D DD 77 FE         [19] 4946 	ld	-2 (ix), a
      001660 DD 7E FD         [19] 4947 	ld	a, -3 (ix)
      001663 DD 86 FB         [19] 4948 	add	a, -5 (ix)
      001666 6F               [ 4] 4949 	ld	l, a
      001667 DD 7E FE         [19] 4950 	ld	a, -2 (ix)
      00166A CE 00            [ 7] 4951 	adc	a, #0x00
      00166C 67               [ 4] 4952 	ld	h, a
      00166D DD 7E FC         [19] 4953 	ld	a, -4 (ix)
      001670 CB FF            [ 8] 4954 	set	7, a
      001672 77               [ 7] 4955 	ld	(hl), a
                                   4956 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001673 DD 7E FD         [19] 4957 	ld	a, -3 (ix)
      001676 80               [ 4] 4958 	add	a, b
      001677 6F               [ 4] 4959 	ld	l, a
      001678 DD 7E FE         [19] 4960 	ld	a, -2 (ix)
      00167B CE 00            [ 7] 4961 	adc	a, #0x00
      00167D 67               [ 4] 4962 	ld	h, a
      00167E 1A               [ 7] 4963 	ld	a, (de)
      00167F CB FF            [ 8] 4964 	set	7, a
      001681 77               [ 7] 4965 	ld	(hl), a
                                   4966 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001682 DD 7E FD         [19] 4967 	ld	a, -3 (ix)
      001685 81               [ 4] 4968 	add	a, c
      001686 5F               [ 4] 4969 	ld	e, a
      001687 DD 7E FE         [19] 4970 	ld	a, -2 (ix)
      00168A CE 00            [ 7] 4971 	adc	a, #0x00
      00168C 57               [ 4] 4972 	ld	d, a
      00168D DD 6E F9         [19] 4973 	ld	l, -7 (ix)
      001690 DD 66 FA         [19] 4974 	ld	h, -6 (ix)
      001693 7E               [ 7] 4975 	ld	a, (hl)
      001694 CB FF            [ 8] 4976 	set	7, a
      001696 12               [ 7] 4977 	ld	(de), a
      001697                       4978 00205$:
                                   4979 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001697 DD 34 FF         [23] 4980 	inc	-1 (ix)
      00169A C3rE6r15         [10] 4981 	jp	00204$
      00169D                       4982 00208$:
                                   4983 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00169D 0C               [ 4] 4984 	inc	c
      00169E C3rDCr15         [10] 4985 	jp	00207$
      0016A1                       4986 00114$:
                                   4987 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0016A1 DD 36 FE 02      [19] 4988 	ld	-2 (ix), #0x02
      0016A5                       4989 00213$:
      0016A5 DD 7E FE         [19] 4990 	ld	a, -2 (ix)
      0016A8 D6 0C            [ 7] 4991 	sub	a, #0x0c
      0016AA D2r48r18         [10] 4992 	jp	NC, 00124$
                                   4993 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0016AD DD 36 FF 02      [19] 4994 	ld	-1 (ix), #0x02
      0016B1                       4995 00210$:
      0016B1 DD 7E FF         [19] 4996 	ld	a, -1 (ix)
      0016B4 D6 06            [ 7] 4997 	sub	a, #0x06
      0016B6 D2r42r18         [10] 4998 	jp	NC, 00214$
                                   4999 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0016B9 DD 4E FF         [19] 5000 	ld	c, -1 (ix)
      0016BC 06 00            [ 7] 5001 	ld	b, #0x00
      0016BE 69               [ 4] 5002 	ld	l, c
      0016BF 60               [ 4] 5003 	ld	h, b
      0016C0 29               [11] 5004 	add	hl, hl
      0016C1 09               [11] 5005 	add	hl, bc
      0016C2 29               [11] 5006 	add	hl, hl
      0016C3 29               [11] 5007 	add	hl, hl
      0016C4 DD 75 F0         [19] 5008 	ld	-16 (ix), l
      0016C7 DD 74 F1         [19] 5009 	ld	-15 (ix), h
      0016CA 3Er48            [ 7] 5010 	ld	a, #<(_playfieldTemp)
      0016CC DD 86 F0         [19] 5011 	add	a, -16 (ix)
      0016CF 4F               [ 4] 5012 	ld	c, a
      0016D0 3Es00            [ 7] 5013 	ld	a, #>(_playfieldTemp)
      0016D2 DD 8E F1         [19] 5014 	adc	a, -15 (ix)
      0016D5 47               [ 4] 5015 	ld	b, a
      0016D6 79               [ 4] 5016 	ld	a, c
      0016D7 DD 86 FE         [19] 5017 	add	a, -2 (ix)
      0016DA DD 77 F2         [19] 5018 	ld	-14 (ix), a
      0016DD 78               [ 4] 5019 	ld	a, b
      0016DE CE 00            [ 7] 5020 	adc	a, #0x00
      0016E0 DD 77 F3         [19] 5021 	ld	-13 (ix), a
      0016E3 DD 6E F2         [19] 5022 	ld	l, -14 (ix)
      0016E6 DD 66 F3         [19] 5023 	ld	h, -13 (ix)
      0016E9 5E               [ 7] 5024 	ld	e, (hl)
                                   5025 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0016EA DD 56 FF         [19] 5026 	ld	d, -1 (ix)
      0016ED DD 66 FE         [19] 5027 	ld	h, -2 (ix)
      0016F0 6A               [ 4] 5028 	ld	l, d
      0016F1 2D               [ 4] 5029 	dec	l
      0016F2 2D               [ 4] 5030 	dec	l
      0016F3 7C               [ 4] 5031 	ld	a, h
      0016F4 C6 FE            [ 7] 5032 	add	a, #0xfe
      0016F6 DD 77 F4         [19] 5033 	ld	-12 (ix), a
      0016F9 15               [ 4] 5034 	dec	d
      0016FA 7C               [ 4] 5035 	ld	a, h
      0016FB C6 FF            [ 7] 5036 	add	a, #0xff
      0016FD DD 77 F5         [19] 5037 	ld	-11 (ix), a
      001700 D5               [11] 5038 	push	de
      001701 5D               [ 4] 5039 	ld	e, l
      001702 7B               [ 4] 5040 	ld	a, e
      001703 07               [ 4] 5041 	rlca
      001704 9F               [ 4] 5042 	sbc	a, a
      001705 57               [ 4] 5043 	ld	d, a
      001706 6B               [ 4] 5044 	ld	l, e
      001707 62               [ 4] 5045 	ld	h, d
      001708 29               [11] 5046 	add	hl, hl
      001709 19               [11] 5047 	add	hl, de
      00170A 29               [11] 5048 	add	hl, hl
      00170B 29               [11] 5049 	add	hl, hl
      00170C D1               [10] 5050 	pop	de
      00170D DD 75 F6         [19] 5051 	ld	-10 (ix), l
      001710 DD 74 F7         [19] 5052 	ld	-9 (ix), h
      001713 D5               [11] 5053 	push	de
      001714 5A               [ 4] 5054 	ld	e, d
      001715 7B               [ 4] 5055 	ld	a, e
      001716 07               [ 4] 5056 	rlca
      001717 9F               [ 4] 5057 	sbc	a, a
      001718 57               [ 4] 5058 	ld	d, a
      001719 6B               [ 4] 5059 	ld	l, e
      00171A 62               [ 4] 5060 	ld	h, d
      00171B 29               [11] 5061 	add	hl, hl
      00171C 19               [11] 5062 	add	hl, de
      00171D 29               [11] 5063 	add	hl, hl
      00171E 29               [11] 5064 	add	hl, hl
      00171F D1               [10] 5065 	pop	de
      001720 DD 75 F8         [19] 5066 	ld	-8 (ix), l
      001723 DD 74 F9         [19] 5067 	ld	-7 (ix), h
      001726 3Er48            [ 7] 5068 	ld	a, #<(_playfieldTemp)
      001728 DD 86 F6         [19] 5069 	add	a, -10 (ix)
      00172B DD 77 FA         [19] 5070 	ld	-6 (ix), a
      00172E 3Es00            [ 7] 5071 	ld	a, #>(_playfieldTemp)
      001730 DD 8E F7         [19] 5072 	adc	a, -9 (ix)
      001733 DD 77 FB         [19] 5073 	ld	-5 (ix), a
      001736 3Er48            [ 7] 5074 	ld	a, #<(_playfieldTemp)
      001738 DD 86 F8         [19] 5075 	add	a, -8 (ix)
      00173B 57               [ 4] 5076 	ld	d, a
      00173C 3Es00            [ 7] 5077 	ld	a, #>(_playfieldTemp)
      00173E DD 8E F9         [19] 5078 	adc	a, -7 (ix)
      001741 6F               [ 4] 5079 	ld	l, a
      001742 7A               [ 4] 5080 	ld	a, d
      001743 DD 86 F5         [19] 5081 	add	a, -11 (ix)
      001746 DD 77 FC         [19] 5082 	ld	-4 (ix), a
      001749 7D               [ 4] 5083 	ld	a, l
      00174A CE 00            [ 7] 5084 	adc	a, #0x00
      00174C DD 77 FD         [19] 5085 	ld	-3 (ix), a
                                   5086 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      00174F 7B               [ 4] 5087 	ld	a, e
      001750 B7               [ 4] 5088 	or	a, a
      001751 28 74            [12] 5089 	jr	Z, 00116$
                                   5090 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001753 DD 7E FA         [19] 5091 	ld	a, -6 (ix)
      001756 DD 86 F4         [19] 5092 	add	a, -12 (ix)
      001759 6F               [ 4] 5093 	ld	l, a
      00175A DD 7E FB         [19] 5094 	ld	a, -5 (ix)
      00175D CE 00            [ 7] 5095 	adc	a, #0x00
      00175F 67               [ 4] 5096 	ld	h, a
      001760 56               [ 7] 5097 	ld	d, (hl)
      001761 DD 6E FC         [19] 5098 	ld	l, -4 (ix)
      001764 DD 66 FD         [19] 5099 	ld	h, -3 (ix)
      001767 6E               [ 7] 5100 	ld	l, (hl)
      001768 7A               [ 4] 5101 	ld	a, d
      001769 95               [ 4] 5102 	sub	a, l
      00176A 20 5B            [12] 5103 	jr	NZ, 00116$
                                   5104 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      00176C 7B               [ 4] 5105 	ld	a, e
      00176D 95               [ 4] 5106 	sub	a, l
      00176E 20 57            [12] 5107 	jr	NZ, 00116$
                                   5108 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      001770 DD 36 EF 01      [19] 5109 	ld	-17 (ix), #0x01
                                   5110 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001774 3Er00            [ 7] 5111 	ld	a, #<(_playfield)
      001776 DD 86 F6         [19] 5112 	add	a, -10 (ix)
      001779 5F               [ 4] 5113 	ld	e, a
      00177A 3Es00            [ 7] 5114 	ld	a, #>(_playfield)
      00177C DD 8E F7         [19] 5115 	adc	a, -9 (ix)
      00177F 67               [ 4] 5116 	ld	h, a
      001780 7B               [ 4] 5117 	ld	a, e
      001781 DD 86 F4         [19] 5118 	add	a, -12 (ix)
      001784 6F               [ 4] 5119 	ld	l, a
      001785 30 01            [12] 5120 	jr	NC, 00631$
      001787 24               [ 4] 5121 	inc	h
      001788                       5122 00631$:
      001788 CB FA            [ 8] 5123 	set	7, d
      00178A 72               [ 7] 5124 	ld	(hl), d
                                   5125 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      00178B 3Er00            [ 7] 5126 	ld	a, #<(_playfield)
      00178D DD 86 F8         [19] 5127 	add	a, -8 (ix)
      001790 5F               [ 4] 5128 	ld	e, a
      001791 3Es00            [ 7] 5129 	ld	a, #>(_playfield)
      001793 DD 8E F9         [19] 5130 	adc	a, -7 (ix)
      001796 57               [ 4] 5131 	ld	d, a
      001797 7B               [ 4] 5132 	ld	a, e
      001798 DD 86 F5         [19] 5133 	add	a, -11 (ix)
      00179B 5F               [ 4] 5134 	ld	e, a
      00179C 30 01            [12] 5135 	jr	NC, 00632$
      00179E 14               [ 4] 5136 	inc	d
      00179F                       5137 00632$:
      00179F DD 6E FC         [19] 5138 	ld	l, -4 (ix)
      0017A2 DD 66 FD         [19] 5139 	ld	h, -3 (ix)
      0017A5 7E               [ 7] 5140 	ld	a, (hl)
      0017A6 CB FF            [ 8] 5141 	set	7, a
      0017A8 12               [ 7] 5142 	ld	(de), a
                                   5143 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      0017A9 3Er00            [ 7] 5144 	ld	a, #<(_playfield)
      0017AB DD 86 F0         [19] 5145 	add	a, -16 (ix)
      0017AE 5F               [ 4] 5146 	ld	e, a
      0017AF 3Es00            [ 7] 5147 	ld	a, #>(_playfield)
      0017B1 DD 8E F1         [19] 5148 	adc	a, -15 (ix)
      0017B4 57               [ 4] 5149 	ld	d, a
      0017B5 7B               [ 4] 5150 	ld	a, e
      0017B6 DD 86 FE         [19] 5151 	add	a, -2 (ix)
      0017B9 5F               [ 4] 5152 	ld	e, a
      0017BA 30 01            [12] 5153 	jr	NC, 00633$
      0017BC 14               [ 4] 5154 	inc	d
      0017BD                       5155 00633$:
      0017BD DD 6E F2         [19] 5156 	ld	l, -14 (ix)
      0017C0 DD 66 F3         [19] 5157 	ld	h, -13 (ix)
      0017C3 7E               [ 7] 5158 	ld	a, (hl)
      0017C4 CB FF            [ 8] 5159 	set	7, a
      0017C6 12               [ 7] 5160 	ld	(de), a
      0017C7                       5161 00116$:
                                   5162 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      0017C7 DD 6E F4         [19] 5163 	ld	l, -12 (ix)
      0017CA 26 00            [ 7] 5164 	ld	h, #0x00
      0017CC 09               [11] 5165 	add	hl, bc
      0017CD 4E               [ 7] 5166 	ld	c, (hl)
      0017CE 79               [ 4] 5167 	ld	a, c
      0017CF B7               [ 4] 5168 	or	a, a
      0017D0 28 6A            [12] 5169 	jr	Z, 00211$
                                   5170 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      0017D2 DD 7E FA         [19] 5171 	ld	a, -6 (ix)
      0017D5 DD 86 FE         [19] 5172 	add	a, -2 (ix)
      0017D8 5F               [ 4] 5173 	ld	e, a
      0017D9 DD 7E FB         [19] 5174 	ld	a, -5 (ix)
      0017DC CE 00            [ 7] 5175 	adc	a, #0x00
      0017DE 57               [ 4] 5176 	ld	d, a
      0017DF DD 6E FC         [19] 5177 	ld	l, -4 (ix)
      0017E2 DD 66 FD         [19] 5178 	ld	h, -3 (ix)
      0017E5 46               [ 7] 5179 	ld	b, (hl)
      0017E6 1A               [ 7] 5180 	ld	a, (de)
      0017E7 B8               [ 4] 5181 	cp	a, b
      0017E8 20 52            [12] 5182 	jr	NZ, 00211$
                                   5183 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0017EA 91               [ 4] 5184 	sub	a, c
      0017EB 20 4F            [12] 5185 	jr	NZ, 00211$
                                   5186 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      0017ED DD 36 EF 01      [19] 5187 	ld	-17 (ix), #0x01
                                   5188 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0017F1 3Er00            [ 7] 5189 	ld	a, #<(_playfield)
      0017F3 DD 86 F0         [19] 5190 	add	a, -16 (ix)
      0017F6 47               [ 4] 5191 	ld	b, a
      0017F7 3Es00            [ 7] 5192 	ld	a, #>(_playfield)
      0017F9 DD 8E F1         [19] 5193 	adc	a, -15 (ix)
      0017FC 67               [ 4] 5194 	ld	h, a
      0017FD 78               [ 4] 5195 	ld	a, b
      0017FE DD 86 F4         [19] 5196 	add	a, -12 (ix)
      001801 6F               [ 4] 5197 	ld	l, a
      001802 30 01            [12] 5198 	jr	NC, 00638$
      001804 24               [ 4] 5199 	inc	h
      001805                       5200 00638$:
      001805 CB F9            [ 8] 5201 	set	7, c
      001807 71               [ 7] 5202 	ld	(hl), c
                                   5203 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001808 3Er00            [ 7] 5204 	ld	a, #<(_playfield)
      00180A DD 86 F8         [19] 5205 	add	a, -8 (ix)
      00180D 4F               [ 4] 5206 	ld	c, a
      00180E 3Es00            [ 7] 5207 	ld	a, #>(_playfield)
      001810 DD 8E F9         [19] 5208 	adc	a, -7 (ix)
      001813 47               [ 4] 5209 	ld	b, a
      001814 79               [ 4] 5210 	ld	a, c
      001815 DD 86 F5         [19] 5211 	add	a, -11 (ix)
      001818 4F               [ 4] 5212 	ld	c, a
      001819 30 01            [12] 5213 	jr	NC, 00639$
      00181B 04               [ 4] 5214 	inc	b
      00181C                       5215 00639$:
      00181C DD 6E FC         [19] 5216 	ld	l, -4 (ix)
      00181F DD 66 FD         [19] 5217 	ld	h, -3 (ix)
      001822 7E               [ 7] 5218 	ld	a, (hl)
      001823 CB FF            [ 8] 5219 	set	7, a
      001825 02               [ 7] 5220 	ld	(bc), a
                                   5221 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001826 3Er00            [ 7] 5222 	ld	a, #<(_playfield)
      001828 DD 86 F6         [19] 5223 	add	a, -10 (ix)
      00182B 4F               [ 4] 5224 	ld	c, a
      00182C 3Es00            [ 7] 5225 	ld	a, #>(_playfield)
      00182E DD 8E F7         [19] 5226 	adc	a, -9 (ix)
      001831 47               [ 4] 5227 	ld	b, a
      001832 DD 6E FE         [19] 5228 	ld	l, -2 (ix)
      001835 26 00            [ 7] 5229 	ld	h, #0x00
      001837 09               [11] 5230 	add	hl, bc
      001838 1A               [ 7] 5231 	ld	a, (de)
      001839 CB FF            [ 8] 5232 	set	7, a
      00183B 77               [ 7] 5233 	ld	(hl), a
      00183C                       5234 00211$:
                                   5235 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00183C DD 34 FF         [23] 5236 	inc	-1 (ix)
      00183F C3rB1r16         [10] 5237 	jp	00210$
      001842                       5238 00214$:
                                   5239 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001842 DD 34 FE         [23] 5240 	inc	-2 (ix)
      001845 C3rA5r16         [10] 5241 	jp	00213$
      001848                       5242 00124$:
                                   5243 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      001848 DD 7E EF         [19] 5244 	ld	a, -17 (ix)
      00184B B7               [ 4] 5245 	or	a, a
      00184C CAr60r1C         [10] 5246 	jp	Z, 00236$
                                   5247 ;src\/CheckPlayfield.h:106: byte x = 255, y = 0;
      00184F DD 36 F5 FF      [19] 5248 	ld	-11 (ix), #0xff
      001853 DD 36 F6 00      [19] 5249 	ld	-10 (ix), #0
                                   5250 ;src\/CheckPlayfield.h:108: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001857 DD 36 F7 05      [19] 5251 	ld	-9 (ix), #0x05
      00185B DD 36 F8 00      [19] 5252 	ld	-8 (ix), #0
                                   5253 ;src\/CheckPlayfield.h:109: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      00185F DD 36 F9 0B      [19] 5254 	ld	-7 (ix), #0x0b
      001863 DD 36 FA 00      [19] 5255 	ld	-6 (ix), #0
                                   5256 ;src\/CheckPlayfield.h:111: HideArrow();
      001867 CDr76r0D         [17] 5257 	call	_HideArrow
                                   5258 ;src\/CheckPlayfield.h:113: SoundFx_2();
      00186A CDr70r13         [17] 5259 	call	_SoundFx_2
                                   5260 ;src\/CheckPlayfield.h:116: numberPiecesRemoved = 0;
      00186D DD 36 FB 00      [19] 5261 	ld	-5 (ix), #0
                                   5262 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001871 DD 36 FF 00      [19] 5263 	ld	-1 (ix), #0
      001875                       5264 00219$:
      001875 DD 7E FF         [19] 5265 	ld	a, -1 (ix)
      001878 D6 0C            [ 7] 5266 	sub	a, #0x0c
      00187A 30 5F            [12] 5267 	jr	NC, 00136$
                                   5268 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00187C DD 5E FB         [19] 5269 	ld	e, -5 (ix)
      00187F 06 00            [ 7] 5270 	ld	b, #0x00
      001881                       5271 00216$:
      001881 78               [ 4] 5272 	ld	a, b
      001882 D6 06            [ 7] 5273 	sub	a, #0x06
      001884 30 4D            [12] 5274 	jr	NC, 00319$
                                   5275 ;src\/CheckPlayfield.h:119: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001886 D5               [11] 5276 	push	de
      001887 58               [ 4] 5277 	ld	e, b
      001888 16 00            [ 7] 5278 	ld	d, #0x00
      00188A 6B               [ 4] 5279 	ld	l, e
      00188B 62               [ 4] 5280 	ld	h, d
      00188C 29               [11] 5281 	add	hl, hl
      00188D 19               [11] 5282 	add	hl, de
      00188E 29               [11] 5283 	add	hl, hl
      00188F 29               [11] 5284 	add	hl, hl
      001890 11r00r00         [10] 5285 	ld	de, #_playfield
      001893 19               [11] 5286 	add	hl, de
      001894 D1               [10] 5287 	pop	de
      001895 7D               [ 4] 5288 	ld	a, l
      001896 DD 86 FF         [19] 5289 	add	a, -1 (ix)
      001899 6F               [ 4] 5290 	ld	l, a
      00189A 30 01            [12] 5291 	jr	NC, 00640$
      00189C 24               [ 4] 5292 	inc	h
      00189D                       5293 00640$:
      00189D 7E               [ 7] 5294 	ld	a, (hl)
      00189E 07               [ 4] 5295 	rlca
      00189F 30 2F            [12] 5296 	jr	NC, 00217$
                                   5297 ;src\/CheckPlayfield.h:120: numberPiecesRemoved++;
      0018A1 1C               [ 4] 5298 	inc	e
                                   5299 ;src\/CheckPlayfield.h:122: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      0018A2 78               [ 4] 5300 	ld	a, b
      0018A3 DD 96 F7         [19] 5301 	sub	a, -9 (ix)
      0018A6 30 03            [12] 5302 	jr	NC, 00126$
      0018A8 DD 70 F7         [19] 5303 	ld	-9 (ix), b
      0018AB                       5304 00126$:
                                   5305 ;src\/CheckPlayfield.h:123: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      0018AB DD 7E F8         [19] 5306 	ld	a, -8 (ix)
      0018AE 90               [ 4] 5307 	sub	a, b
      0018AF 30 03            [12] 5308 	jr	NC, 00128$
      0018B1 DD 70 F8         [19] 5309 	ld	-8 (ix), b
      0018B4                       5310 00128$:
                                   5311 ;src\/CheckPlayfield.h:124: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      0018B4 DD 7E FF         [19] 5312 	ld	a, -1 (ix)
      0018B7 DD 96 F9         [19] 5313 	sub	a, -7 (ix)
      0018BA 30 06            [12] 5314 	jr	NC, 00130$
      0018BC DD 7E FF         [19] 5315 	ld	a, -1 (ix)
      0018BF DD 77 F9         [19] 5316 	ld	-7 (ix), a
      0018C2                       5317 00130$:
                                   5318 ;src\/CheckPlayfield.h:125: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      0018C2 DD 7E FA         [19] 5319 	ld	a, -6 (ix)
      0018C5 DD 96 FF         [19] 5320 	sub	a, -1 (ix)
      0018C8 30 06            [12] 5321 	jr	NC, 00217$
      0018CA DD 7E FF         [19] 5322 	ld	a, -1 (ix)
      0018CD DD 77 FA         [19] 5323 	ld	-6 (ix), a
      0018D0                       5324 00217$:
                                   5325 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018D0 04               [ 4] 5326 	inc	b
      0018D1 18 AE            [12] 5327 	jr	00216$
      0018D3                       5328 00319$:
      0018D3 DD 73 FB         [19] 5329 	ld	-5 (ix), e
                                   5330 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018D6 DD 34 FF         [23] 5331 	inc	-1 (ix)
      0018D9 18 9A            [12] 5332 	jr	00219$
      0018DB                       5333 00136$:
                                   5334 ;src\/CheckPlayfield.h:131: DrawNumber(numberPiecesRemoved, 0, 0);//test
      0018DB DD 4E FB         [19] 5335 	ld	c, -5 (ix)
      0018DE 06 00            [ 7] 5336 	ld	b, #0x00
      0018E0 AF               [ 4] 5337 	xor	a, a
      0018E1 F5               [11] 5338 	push	af
      0018E2 33               [ 6] 5339 	inc	sp
      0018E3 AF               [ 4] 5340 	xor	a, a
      0018E4 F5               [11] 5341 	push	af
      0018E5 33               [ 6] 5342 	inc	sp
      0018E6 C5               [11] 5343 	push	bc
      0018E7 CDrD9r08         [17] 5344 	call	_DrawNumber
      0018EA F1               [10] 5345 	pop	af
      0018EB F1               [10] 5346 	pop	af
                                   5347 ;src\/CheckPlayfield.h:132: DrawNumber(iteration, 0, 1);//test
      0018EC DD 4E 04         [19] 5348 	ld	c, 4 (ix)
      0018EF 06 00            [ 7] 5349 	ld	b, #0x00
      0018F1 3E 01            [ 7] 5350 	ld	a, #0x01
      0018F3 F5               [11] 5351 	push	af
      0018F4 33               [ 6] 5352 	inc	sp
      0018F5 AF               [ 4] 5353 	xor	a, a
      0018F6 F5               [11] 5354 	push	af
      0018F7 33               [ 6] 5355 	inc	sp
      0018F8 C5               [11] 5356 	push	bc
      0018F9 CDrD9r08         [17] 5357 	call	_DrawNumber
      0018FC F1               [10] 5358 	pop	af
      0018FD F1               [10] 5359 	pop	af
                                   5360 ;src\/CheckPlayfield.h:133: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      0018FE DD 4E F7         [19] 5361 	ld	c, -9 (ix)
      001901 06 00            [ 7] 5362 	ld	b, #0x00
      001903 3E 0D            [ 7] 5363 	ld	a, #0x0d
      001905 F5               [11] 5364 	push	af
      001906 33               [ 6] 5365 	inc	sp
      001907 AF               [ 4] 5366 	xor	a, a
      001908 F5               [11] 5367 	push	af
      001909 33               [ 6] 5368 	inc	sp
      00190A C5               [11] 5369 	push	bc
      00190B CDrD9r08         [17] 5370 	call	_DrawNumber
      00190E F1               [10] 5371 	pop	af
      00190F F1               [10] 5372 	pop	af
                                   5373 ;src\/CheckPlayfield.h:134: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      001910 DD 4E F8         [19] 5374 	ld	c, -8 (ix)
      001913 06 00            [ 7] 5375 	ld	b, #0x00
      001915 3E 0E            [ 7] 5376 	ld	a, #0x0e
      001917 F5               [11] 5377 	push	af
      001918 33               [ 6] 5378 	inc	sp
      001919 AF               [ 4] 5379 	xor	a, a
      00191A F5               [11] 5380 	push	af
      00191B 33               [ 6] 5381 	inc	sp
      00191C C5               [11] 5382 	push	bc
      00191D CDrD9r08         [17] 5383 	call	_DrawNumber
      001920 F1               [10] 5384 	pop	af
      001921 F1               [10] 5385 	pop	af
                                   5386 ;src\/CheckPlayfield.h:135: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      001922 DD 4E F9         [19] 5387 	ld	c, -7 (ix)
      001925 06 00            [ 7] 5388 	ld	b, #0x00
      001927 3E 10            [ 7] 5389 	ld	a, #0x10
      001929 F5               [11] 5390 	push	af
      00192A 33               [ 6] 5391 	inc	sp
      00192B AF               [ 4] 5392 	xor	a, a
      00192C F5               [11] 5393 	push	af
      00192D 33               [ 6] 5394 	inc	sp
      00192E C5               [11] 5395 	push	bc
      00192F CDrD9r08         [17] 5396 	call	_DrawNumber
      001932 F1               [10] 5397 	pop	af
      001933 F1               [10] 5398 	pop	af
                                   5399 ;src\/CheckPlayfield.h:136: DrawNumber(upmostPieceRemoved, 0, 17);//test
      001934 DD 4E FA         [19] 5400 	ld	c, -6 (ix)
      001937 06 00            [ 7] 5401 	ld	b, #0x00
      001939 3E 11            [ 7] 5402 	ld	a, #0x11
      00193B F5               [11] 5403 	push	af
      00193C 33               [ 6] 5404 	inc	sp
      00193D AF               [ 4] 5405 	xor	a, a
      00193E F5               [11] 5406 	push	af
      00193F 33               [ 6] 5407 	inc	sp
      001940 C5               [11] 5408 	push	bc
      001941 CDrD9r08         [17] 5409 	call	_DrawNumber
      001944 F1               [10] 5410 	pop	af
      001945 F1               [10] 5411 	pop	af
                                   5412 ;src\/CheckPlayfield.h:139: while(counter-- > 0) {
      001946 DD 36 FF 48      [19] 5413 	ld	-1 (ix), #0x48
      00194A                       5414 00166$:
      00194A DD 4E FF         [19] 5415 	ld	c, -1 (ix)
      00194D DD 35 FF         [23] 5416 	dec	-1 (ix)
      001950 79               [ 4] 5417 	ld	a, c
      001951 B7               [ 4] 5418 	or	a, a
      001952 CArFAr1A         [10] 5419 	jp	Z, 00168$
                                   5420 ;src\/CheckPlayfield.h:141: word lastJiffy = JIFFY;
      001955 ED 5B 9E FC      [20] 5421 	ld	de, (_JIFFY)
                                   5422 ;src\/CheckPlayfield.h:142: while (lastJiffy == JIFFY) {
      001959                       5423 00137$:
      001959 2A 9E FC         [16] 5424 	ld	hl, (_JIFFY)
      00195C BF               [ 4] 5425 	cp	a, a
      00195D ED 52            [15] 5426 	sbc	hl, de
      00195F 28 F8            [12] 5427 	jr	Z, 00137$
                                   5428 ;src\/CheckPlayfield.h:148: if(numberPiecesRemoved >= 3) {
      001961 DD 7E FB         [19] 5429 	ld	a, -5 (ix)
      001964 D6 03            [ 7] 5430 	sub	a, #0x03
      001966 DAr18r1A         [10] 5431 	jp	C, 00300$
                                   5432 ;src\/CheckPlayfield.h:150: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001969 DD 7E FB         [19] 5433 	ld	a, -5 (ix)
      00196C D6 07            [ 7] 5434 	sub	a, #0x07
      00196E 38 04            [12] 5435 	jr	C, 00141$
      001970 DD 36 FB 07      [19] 5436 	ld	-5 (ix), #0x07
      001974                       5437 00141$:
                                   5438 ;src\/CheckPlayfield.h:152: if(x == 255) { // do this expensive calculation only once
      001974 DD 7E F5         [19] 5439 	ld	a, -11 (ix)
      001977 3C               [ 4] 5440 	inc	a
      001978 20 7B            [12] 5441 	jr	NZ, 00143$
                                   5442 ;src\/CheckPlayfield.h:153: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      00197A DD 6E F8         [19] 5443 	ld	l, -8 (ix)
      00197D 26 00            [ 7] 5444 	ld	h, #0x00
      00197F 29               [11] 5445 	add	hl, hl
      001980 29               [11] 5446 	add	hl, hl
      001981 29               [11] 5447 	add	hl, hl
      001982 29               [11] 5448 	add	hl, hl
      001983 DD 5E F7         [19] 5449 	ld	e, -9 (ix)
      001986 16 00            [ 7] 5450 	ld	d, #0x00
      001988 EB               [ 4] 5451 	ex	de, hl
      001989 29               [11] 5452 	add	hl, hl
      00198A 29               [11] 5453 	add	hl, hl
      00198B 29               [11] 5454 	add	hl, hl
      00198C 29               [11] 5455 	add	hl, hl
      00198D EB               [ 4] 5456 	ex	de, hl
      00198E BF               [ 4] 5457 	cp	a, a
      00198F ED 52            [15] 5458 	sbc	hl, de
      001991 4D               [ 4] 5459 	ld	c, l
      001992 44               [ 4] 5460 	ld	b, h
      001993 CB 7C            [ 8] 5461 	bit	7, h
      001995 28 03            [12] 5462 	jr	Z, 00238$
      001997 4D               [ 4] 5463 	ld	c, l
      001998 44               [ 4] 5464 	ld	b, h
      001999 03               [ 6] 5465 	inc	bc
      00199A                       5466 00238$:
      00199A CB 28            [ 8] 5467 	sra	b
      00199C CB 19            [ 8] 5468 	rr	c
      00199E 79               [ 4] 5469 	ld	a, c
      00199F C6 50            [ 7] 5470 	add	a, #0x50
      0019A1 DD 6E F7         [19] 5471 	ld	l, -9 (ix)
      0019A4 29               [11] 5472 	add	hl, hl
      0019A5 29               [11] 5473 	add	hl, hl
      0019A6 29               [11] 5474 	add	hl, hl
      0019A7 29               [11] 5475 	add	hl, hl
      0019A8 85               [ 4] 5476 	add	a, l
      0019A9 DD 77 F5         [19] 5477 	ld	-11 (ix), a
                                   5478 ;src\/CheckPlayfield.h:155: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      0019AC DD 6E F9         [19] 5479 	ld	l, -7 (ix)
      0019AF 26 00            [ 7] 5480 	ld	h, #0x00
      0019B1 29               [11] 5481 	add	hl, hl
      0019B2 29               [11] 5482 	add	hl, hl
      0019B3 29               [11] 5483 	add	hl, hl
      0019B4 29               [11] 5484 	add	hl, hl
      0019B5 DD 5E FA         [19] 5485 	ld	e, -6 (ix)
      0019B8 16 00            [ 7] 5486 	ld	d, #0x00
      0019BA EB               [ 4] 5487 	ex	de, hl
      0019BB 29               [11] 5488 	add	hl, hl
      0019BC 29               [11] 5489 	add	hl, hl
      0019BD 29               [11] 5490 	add	hl, hl
      0019BE 29               [11] 5491 	add	hl, hl
      0019BF EB               [ 4] 5492 	ex	de, hl
      0019C0 BF               [ 4] 5493 	cp	a, a
      0019C1 ED 52            [15] 5494 	sbc	hl, de
      0019C3 4D               [ 4] 5495 	ld	c, l
      0019C4 44               [ 4] 5496 	ld	b, h
      0019C5 CB 7C            [ 8] 5497 	bit	7, h
      0019C7 28 03            [12] 5498 	jr	Z, 00239$
      0019C9 23               [ 6] 5499 	inc	hl
      0019CA 4D               [ 4] 5500 	ld	c, l
      0019CB 44               [ 4] 5501 	ld	b, h
      0019CC                       5502 00239$:
      0019CC CB 28            [ 8] 5503 	sra	b
      0019CE CB 19            [ 8] 5504 	rr	c
      0019D0 DD 7E FA         [19] 5505 	ld	a, -6 (ix)
      0019D3 87               [ 4] 5506 	add	a, a
      0019D4 87               [ 4] 5507 	add	a, a
      0019D5 87               [ 4] 5508 	add	a, a
      0019D6 87               [ 4] 5509 	add	a, a
      0019D7 81               [ 4] 5510 	add	a, c
      0019D8 DD 77 F6         [19] 5511 	ld	-10 (ix), a
                                   5512 ;src\/CheckPlayfield.h:156: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      0019DB 26 01            [ 7] 5513 	ld	h, #0x01
      0019DD DD 6E F6         [19] 5514 	ld	l, -10 (ix)
      0019E0 E5               [11] 5515 	push	hl
      0019E1 DD 66 F5         [19] 5516 	ld	h, -11 (ix)
      0019E4 DD 6E 04         [19] 5517 	ld	l, 4 (ix)
      0019E7 E5               [11] 5518 	push	hl
      0019E8 DD 7E FB         [19] 5519 	ld	a, -5 (ix)
      0019EB F5               [11] 5520 	push	af
      0019EC 33               [ 6] 5521 	inc	sp
      0019ED CDr84r0D         [17] 5522 	call	_DrawHitSprite
      0019F0 F1               [10] 5523 	pop	af
      0019F1 F1               [10] 5524 	pop	af
      0019F2 33               [ 6] 5525 	inc	sp
      0019F3 18 23            [12] 5526 	jr	00300$
      0019F5                       5527 00143$:
                                   5528 ;src\/CheckPlayfield.h:162: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      0019F5 DD 4E FF         [19] 5529 	ld	c, -1 (ix)
      0019F8 3E 48            [ 7] 5530 	ld	a, #0x48
      0019FA 91               [ 4] 5531 	sub	a, c
      0019FB 4F               [ 4] 5532 	ld	c, a
      0019FC DD 7E F6         [19] 5533 	ld	a, -10 (ix)
      0019FF 91               [ 4] 5534 	sub	a, c
      001A00 26 00            [ 7] 5535 	ld	h, #0x00
      001A02 E5               [11] 5536 	push	hl
      001A03 33               [ 6] 5537 	inc	sp
      001A04 F5               [11] 5538 	push	af
      001A05 33               [ 6] 5539 	inc	sp
      001A06 DD 66 F5         [19] 5540 	ld	h, -11 (ix)
      001A09 DD 6E 04         [19] 5541 	ld	l, 4 (ix)
      001A0C E5               [11] 5542 	push	hl
      001A0D DD 7E FB         [19] 5543 	ld	a, -5 (ix)
      001A10 F5               [11] 5544 	push	af
      001A11 33               [ 6] 5545 	inc	sp
      001A12 CDr84r0D         [17] 5546 	call	_DrawHitSprite
      001A15 F1               [10] 5547 	pop	af
      001A16 F1               [10] 5548 	pop	af
      001A17 33               [ 6] 5549 	inc	sp
                                   5550 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A18                       5551 00300$:
      001A18 3E 0C            [ 7] 5552 	ld	a, #0x0c
      001A1A DD 96 FF         [19] 5553 	sub	a, -1 (ix)
      001A1D 3E 00            [ 7] 5554 	ld	a, #0x00
      001A1F 17               [ 4] 5555 	rla
      001A20 5F               [ 4] 5556 	ld	e, a
      001A21 3E 09            [ 7] 5557 	ld	a, #0x09
      001A23 DD 96 FF         [19] 5558 	sub	a, -1 (ix)
      001A26 3E 00            [ 7] 5559 	ld	a, #0x00
      001A28 17               [ 4] 5560 	rla
      001A29 4F               [ 4] 5561 	ld	c, a
      001A2A 3E 06            [ 7] 5562 	ld	a, #0x06
      001A2C DD 96 FF         [19] 5563 	sub	a, -1 (ix)
      001A2F 3E 00            [ 7] 5564 	ld	a, #0x00
      001A31 17               [ 4] 5565 	rla
      001A32 DD 77 FC         [19] 5566 	ld	-4 (ix), a
      001A35 3E 03            [ 7] 5567 	ld	a, #0x03
      001A37 DD 96 FF         [19] 5568 	sub	a, -1 (ix)
      001A3A 3E 00            [ 7] 5569 	ld	a, #0x00
      001A3C 17               [ 4] 5570 	rla
      001A3D DD 77 FD         [19] 5571 	ld	-3 (ix), a
      001A40 06 00            [ 7] 5572 	ld	b, #0x00
      001A42                       5573 00225$:
      001A42 78               [ 4] 5574 	ld	a, b
      001A43 D6 0C            [ 7] 5575 	sub	a, #0x0c
      001A45 D2r4Ar19         [10] 5576 	jp	NC, 00166$
                                   5577 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A48 16 00            [ 7] 5578 	ld	d, #0x00
      001A4A                       5579 00222$:
      001A4A 7A               [ 4] 5580 	ld	a, d
      001A4B D6 06            [ 7] 5581 	sub	a, #0x06
      001A4D D2rF6r1A         [10] 5582 	jp	NC, 00226$
                                   5583 ;src\/CheckPlayfield.h:169: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001A50 D5               [11] 5584 	push	de
      001A51 5A               [ 4] 5585 	ld	e, d
      001A52 16 00            [ 7] 5586 	ld	d, #0x00
      001A54 6B               [ 4] 5587 	ld	l, e
      001A55 62               [ 4] 5588 	ld	h, d
      001A56 29               [11] 5589 	add	hl, hl
      001A57 19               [11] 5590 	add	hl, de
      001A58 29               [11] 5591 	add	hl, hl
      001A59 29               [11] 5592 	add	hl, hl
      001A5A 11r00r00         [10] 5593 	ld	de, #_playfield
      001A5D 19               [11] 5594 	add	hl, de
      001A5E D1               [10] 5595 	pop	de
      001A5F 7D               [ 4] 5596 	ld	a, l
      001A60 80               [ 4] 5597 	add	a, b
      001A61 6F               [ 4] 5598 	ld	l, a
      001A62 30 01            [12] 5599 	jr	NC, 00645$
      001A64 24               [ 4] 5600 	inc	h
      001A65                       5601 00645$:
      001A65 7E               [ 7] 5602 	ld	a, (hl)
      001A66 DD 77 FE         [19] 5603 	ld	-2 (ix), a
      001A69 DD CB FE 7E      [20] 5604 	bit	7, -2 (ix)
      001A6D CArF2r1A         [10] 5605 	jp	Z,00223$
                                   5606 ;src\/CheckPlayfield.h:172: if(counter > 12) {
      001A70 7B               [ 4] 5607 	ld	a, e
      001A71 B7               [ 4] 5608 	or	a, a
      001A72 28 2C            [12] 5609 	jr	Z, 00160$
                                   5610 ;src\/CheckPlayfield.h:173: if(JIFFY & 0b00000011) {
      001A74 2A 9E FC         [16] 5611 	ld	hl, (_JIFFY)
      001A77 7D               [ 4] 5612 	ld	a, l
      001A78 E6 03            [ 7] 5613 	and	a, #0x03
      001A7A 28 14            [12] 5614 	jr	Z, 00148$
                                   5615 ;src\/CheckPlayfield.h:174: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001A7C DD 7E FE         [19] 5616 	ld	a, -2 (ix)
      001A7F CB BF            [ 8] 5617 	res	7, a
      001A81 C5               [11] 5618 	push	bc
      001A82 D5               [11] 5619 	push	de
      001A83 F5               [11] 5620 	push	af
      001A84 33               [ 6] 5621 	inc	sp
      001A85 4A               [ 4] 5622 	ld	c, d
      001A86 C5               [11] 5623 	push	bc
      001A87 CDr3Br12         [17] 5624 	call	_DrawBlock
      001A8A F1               [10] 5625 	pop	af
      001A8B 33               [ 6] 5626 	inc	sp
      001A8C D1               [10] 5627 	pop	de
      001A8D C1               [10] 5628 	pop	bc
      001A8E 18 62            [12] 5629 	jr	00223$
      001A90                       5630 00148$:
                                   5631 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, EMPTY);
      001A90 C5               [11] 5632 	push	bc
      001A91 D5               [11] 5633 	push	de
      001A92 AF               [ 4] 5634 	xor	a, a
      001A93 F5               [11] 5635 	push	af
      001A94 33               [ 6] 5636 	inc	sp
      001A95 4A               [ 4] 5637 	ld	c, d
      001A96 C5               [11] 5638 	push	bc
      001A97 CDr3Br12         [17] 5639 	call	_DrawBlock
      001A9A F1               [10] 5640 	pop	af
      001A9B 33               [ 6] 5641 	inc	sp
      001A9C D1               [10] 5642 	pop	de
      001A9D C1               [10] 5643 	pop	bc
      001A9E 18 52            [12] 5644 	jr	00223$
      001AA0                       5645 00160$:
                                   5646 ;src\/CheckPlayfield.h:182: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001AA0 79               [ 4] 5647 	ld	a, c
      001AA1 B7               [ 4] 5648 	or	a, a
      001AA2 28 11            [12] 5649 	jr	Z, 00157$
      001AA4 C5               [11] 5650 	push	bc
      001AA5 D5               [11] 5651 	push	de
      001AA6 3E 2A            [ 7] 5652 	ld	a, #0x2a
      001AA8 F5               [11] 5653 	push	af
      001AA9 33               [ 6] 5654 	inc	sp
      001AAA 4A               [ 4] 5655 	ld	c, d
      001AAB C5               [11] 5656 	push	bc
      001AAC CDrA3r12         [17] 5657 	call	_DrawBlock_SameTile
      001AAF F1               [10] 5658 	pop	af
      001AB0 33               [ 6] 5659 	inc	sp
      001AB1 D1               [10] 5660 	pop	de
      001AB2 C1               [10] 5661 	pop	bc
      001AB3 18 3D            [12] 5662 	jr	00223$
      001AB5                       5663 00157$:
                                   5664 ;src\/CheckPlayfield.h:183: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001AB5 DD 7E FC         [19] 5665 	ld	a, -4 (ix)
      001AB8 B7               [ 4] 5666 	or	a, a
      001AB9 28 11            [12] 5667 	jr	Z, 00154$
      001ABB C5               [11] 5668 	push	bc
      001ABC D5               [11] 5669 	push	de
      001ABD 3E 2B            [ 7] 5670 	ld	a, #0x2b
      001ABF F5               [11] 5671 	push	af
      001AC0 33               [ 6] 5672 	inc	sp
      001AC1 4A               [ 4] 5673 	ld	c, d
      001AC2 C5               [11] 5674 	push	bc
      001AC3 CDrA3r12         [17] 5675 	call	_DrawBlock_SameTile
      001AC6 F1               [10] 5676 	pop	af
      001AC7 33               [ 6] 5677 	inc	sp
      001AC8 D1               [10] 5678 	pop	de
      001AC9 C1               [10] 5679 	pop	bc
      001ACA 18 26            [12] 5680 	jr	00223$
      001ACC                       5681 00154$:
                                   5682 ;src\/CheckPlayfield.h:184: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001ACC DD 7E FD         [19] 5683 	ld	a, -3 (ix)
      001ACF B7               [ 4] 5684 	or	a, a
      001AD0 28 11            [12] 5685 	jr	Z, 00151$
      001AD2 C5               [11] 5686 	push	bc
      001AD3 D5               [11] 5687 	push	de
      001AD4 3E 2C            [ 7] 5688 	ld	a, #0x2c
      001AD6 F5               [11] 5689 	push	af
      001AD7 33               [ 6] 5690 	inc	sp
      001AD8 4A               [ 4] 5691 	ld	c, d
      001AD9 C5               [11] 5692 	push	bc
      001ADA CDrA3r12         [17] 5693 	call	_DrawBlock_SameTile
      001ADD F1               [10] 5694 	pop	af
      001ADE 33               [ 6] 5695 	inc	sp
      001ADF D1               [10] 5696 	pop	de
      001AE0 C1               [10] 5697 	pop	bc
      001AE1 18 0F            [12] 5698 	jr	00223$
      001AE3                       5699 00151$:
                                   5700 ;src\/CheckPlayfield.h:185: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001AE3 C5               [11] 5701 	push	bc
      001AE4 D5               [11] 5702 	push	de
      001AE5 3E 2D            [ 7] 5703 	ld	a, #0x2d
      001AE7 F5               [11] 5704 	push	af
      001AE8 33               [ 6] 5705 	inc	sp
      001AE9 4A               [ 4] 5706 	ld	c, d
      001AEA C5               [11] 5707 	push	bc
      001AEB CDrA3r12         [17] 5708 	call	_DrawBlock_SameTile
      001AEE F1               [10] 5709 	pop	af
      001AEF 33               [ 6] 5710 	inc	sp
      001AF0 D1               [10] 5711 	pop	de
      001AF1 C1               [10] 5712 	pop	bc
      001AF2                       5713 00223$:
                                   5714 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001AF2 14               [ 4] 5715 	inc	d
      001AF3 C3r4Ar1A         [10] 5716 	jp	00222$
      001AF6                       5717 00226$:
                                   5718 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001AF6 04               [ 4] 5719 	inc	b
      001AF7 C3r42r1A         [10] 5720 	jp	00225$
      001AFA                       5721 00168$:
                                   5722 ;src\/CheckPlayfield.h:193: HideHitSprite();
      001AFA CDr96r0F         [17] 5723 	call	_HideHitSprite
                                   5724 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001AFD DD 36 FD 00      [19] 5725 	ld	-3 (ix), #0
      001B01                       5726 00234$:
      001B01 DD 7E FD         [19] 5727 	ld	a, -3 (ix)
      001B04 D6 0C            [ 7] 5728 	sub	a, #0x0c
      001B06 D2rE4r1B         [10] 5729 	jp	NC, 00177$
                                   5730 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B09 DD 36 FE 00      [19] 5731 	ld	-2 (ix), #0
      001B0D                       5732 00231$:
      001B0D DD 7E FE         [19] 5733 	ld	a, -2 (ix)
      001B10 D6 06            [ 7] 5734 	sub	a, #0x06
      001B12 D2rDEr1B         [10] 5735 	jp	NC, 00235$
                                   5736 ;src\/CheckPlayfield.h:201: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001B15 DD 4E FE         [19] 5737 	ld	c, -2 (ix)
      001B18 06 00            [ 7] 5738 	ld	b, #0x00
      001B1A 69               [ 4] 5739 	ld	l, c
      001B1B 60               [ 4] 5740 	ld	h, b
      001B1C 29               [11] 5741 	add	hl, hl
      001B1D 09               [11] 5742 	add	hl, bc
      001B1E 29               [11] 5743 	add	hl, hl
      001B1F 29               [11] 5744 	add	hl, hl
      001B20 EB               [ 4] 5745 	ex	de, hl
      001B21 21r00r00         [10] 5746 	ld	hl, #_playfield
      001B24 19               [11] 5747 	add	hl, de
      001B25 DD 75 FB         [19] 5748 	ld	-5 (ix), l
      001B28 DD 74 FC         [19] 5749 	ld	-4 (ix), h
      001B2B DD 7E FB         [19] 5750 	ld	a, -5 (ix)
      001B2E DD 86 FD         [19] 5751 	add	a, -3 (ix)
      001B31 4F               [ 4] 5752 	ld	c, a
      001B32 DD 7E FC         [19] 5753 	ld	a, -4 (ix)
      001B35 CE 00            [ 7] 5754 	adc	a, #0x00
      001B37 47               [ 4] 5755 	ld	b, a
      001B38 0A               [ 7] 5756 	ld	a, (bc)
      001B39 07               [ 4] 5757 	rlca
      001B3A D2rD8r1B         [10] 5758 	jp	NC,00232$
                                   5759 ;src\/CheckPlayfield.h:203: blocksRemoved++;
      001B3D 2Ar04r00         [16] 5760 	ld	hl, (_blocksRemoved)
      001B40 23               [ 6] 5761 	inc	hl
      001B41 22r04r00         [16] 5762 	ld	(_blocksRemoved), hl
                                   5763 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      001B44 DD 7E FB         [19] 5764 	ld	a, -5 (ix)
      001B47 DD 77 F7         [19] 5765 	ld	-9 (ix), a
      001B4A DD 7E FC         [19] 5766 	ld	a, -4 (ix)
      001B4D DD 77 F8         [19] 5767 	ld	-8 (ix), a
      001B50 DD 7E FD         [19] 5768 	ld	a, -3 (ix)
      001B53 DD 77 FF         [19] 5769 	ld	-1 (ix), a
      001B56                       5770 00228$:
      001B56 DD 7E FF         [19] 5771 	ld	a, -1 (ix)
      001B59 B7               [ 4] 5772 	or	a, a
      001B5A 28 7C            [12] 5773 	jr	Z, 00232$
                                   5774 ;src\/CheckPlayfield.h:207: byte linesToBeRemoved = 1;
      001B5C 0E 01            [ 7] 5775 	ld	c, #0x01
                                   5776 ;src\/CheckPlayfield.h:208: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001B5E DD 7E FF         [19] 5777 	ld	a, -1 (ix)
      001B61 DD 77 FC         [19] 5778 	ld	-4 (ix), a
      001B64 3D               [ 4] 5779 	dec	a
      001B65 DD 86 F7         [19] 5780 	add	a, -9 (ix)
      001B68 5F               [ 4] 5781 	ld	e, a
      001B69 3E 00            [ 7] 5782 	ld	a, #0x00
      001B6B DD 8E F8         [19] 5783 	adc	a, -8 (ix)
      001B6E 57               [ 4] 5784 	ld	d, a
      001B6F 1A               [ 7] 5785 	ld	a, (de)
      001B70 07               [ 4] 5786 	rlca
      001B71 30 02            [12] 5787 	jr	NC, 00170$
      001B73 0E 02            [ 7] 5788 	ld	c, #0x02
      001B75                       5789 00170$:
                                   5790 ;src\/CheckPlayfield.h:209: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001B75 DD 7E FC         [19] 5791 	ld	a, -4 (ix)
      001B78 3D               [ 4] 5792 	dec	a
      001B79 3D               [ 4] 5793 	dec	a
      001B7A DD 86 F7         [19] 5794 	add	a, -9 (ix)
      001B7D 5F               [ 4] 5795 	ld	e, a
      001B7E 3E 00            [ 7] 5796 	ld	a, #0x00
      001B80 DD 8E F8         [19] 5797 	adc	a, -8 (ix)
      001B83 57               [ 4] 5798 	ld	d, a
      001B84 1A               [ 7] 5799 	ld	a, (de)
      001B85 07               [ 4] 5800 	rlca
      001B86 30 01            [12] 5801 	jr	NC, 00172$
      001B88 0C               [ 4] 5802 	inc	c
      001B89                       5803 00172$:
                                   5804 ;src\/CheckPlayfield.h:213: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001B89 DD 7E F7         [19] 5805 	ld	a, -9 (ix)
      001B8C DD 86 FF         [19] 5806 	add	a, -1 (ix)
      001B8F DD 77 F9         [19] 5807 	ld	-7 (ix), a
      001B92 DD 7E F8         [19] 5808 	ld	a, -8 (ix)
      001B95 CE 00            [ 7] 5809 	adc	a, #0x00
      001B97 DD 77 FA         [19] 5810 	ld	-6 (ix), a
      001B9A DD 6E FF         [19] 5811 	ld	l, -1 (ix)
      001B9D 26 00            [ 7] 5812 	ld	h, #0x00
      001B9F 59               [ 4] 5813 	ld	e, c
      001BA0 16 00            [ 7] 5814 	ld	d, #0x00
      001BA2 BF               [ 4] 5815 	cp	a, a
      001BA3 ED 52            [15] 5816 	sbc	hl, de
      001BA5 CB 7C            [ 8] 5817 	bit	7, h
      001BA7 20 18            [12] 5818 	jr	NZ, 00242$
      001BA9 DD 7E FF         [19] 5819 	ld	a, -1 (ix)
      001BAC 91               [ 4] 5820 	sub	a, c
      001BAD DD 86 F7         [19] 5821 	add	a, -9 (ix)
      001BB0 4F               [ 4] 5822 	ld	c, a
      001BB1 3E 00            [ 7] 5823 	ld	a, #0x00
      001BB3 DD 8E F8         [19] 5824 	adc	a, -8 (ix)
      001BB6 47               [ 4] 5825 	ld	b, a
      001BB7 0A               [ 7] 5826 	ld	a, (bc)
      001BB8 DD 77 FB         [19] 5827 	ld	-5 (ix), a
      001BBB DD 36 FC 00      [19] 5828 	ld	-4 (ix), #0
      001BBF 18 07            [12] 5829 	jr	00243$
      001BC1                       5830 00242$:
      001BC1 AF               [ 4] 5831 	xor	a, a
      001BC2 DD 77 FB         [19] 5832 	ld	-5 (ix), a
      001BC5 DD 77 FC         [19] 5833 	ld	-4 (ix), a
      001BC8                       5834 00243$:
      001BC8 DD 7E FB         [19] 5835 	ld	a, -5 (ix)
      001BCB DD 6E F9         [19] 5836 	ld	l, -7 (ix)
      001BCE DD 66 FA         [19] 5837 	ld	h, -6 (ix)
      001BD1 77               [ 7] 5838 	ld	(hl), a
                                   5839 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      001BD2 DD 35 FF         [23] 5840 	dec	-1 (ix)
      001BD5 C3r56r1B         [10] 5841 	jp	00228$
      001BD8                       5842 00232$:
                                   5843 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001BD8 DD 34 FE         [23] 5844 	inc	-2 (ix)
      001BDB C3r0Dr1B         [10] 5845 	jp	00231$
      001BDE                       5846 00235$:
                                   5847 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001BDE DD 34 FD         [23] 5848 	inc	-3 (ix)
      001BE1 C3r01r1B         [10] 5849 	jp	00234$
      001BE4                       5850 00177$:
                                   5851 ;src\/CheckPlayfield.h:220: oldLevel = level;
      001BE4 3Ar06r00         [13] 5852 	ld	a, (#_level + 0)
      001BE7 4F               [ 4] 5853 	ld	c, a
                                   5854 ;src\/CheckPlayfield.h:221: if(blocksRemoved >= 90) {
      001BE8 21r04r00         [10] 5855 	ld	hl, #_blocksRemoved
      001BEB 46               [ 7] 5856 	ld	b, (hl)
      001BEC 23               [ 6] 5857 	inc	hl
      001BED 56               [ 7] 5858 	ld	d, (hl)
      001BEE 78               [ 4] 5859 	ld	a, b
      001BEF D6 5A            [ 7] 5860 	sub	a, #0x5a
      001BF1 7A               [ 4] 5861 	ld	a, d
      001BF2 DE 00            [ 7] 5862 	sbc	a, #0x00
      001BF4 38 19            [12] 5863 	jr	C, 00185$
                                   5864 ;src\/CheckPlayfield.h:222: level = (blocksRemoved / 30) + 1;
      001BF6 C5               [11] 5865 	push	bc
      001BF7 21 1E 00         [10] 5866 	ld	hl, #0x001e
      001BFA E5               [11] 5867 	push	hl
      001BFB 58               [ 4] 5868 	ld	e, b
      001BFC D5               [11] 5869 	push	de
      001BFD CDr00r00         [17] 5870 	call	__divuint
      001C00 F1               [10] 5871 	pop	af
      001C01 F1               [10] 5872 	pop	af
      001C02 C1               [10] 5873 	pop	bc
      001C03 7D               [ 4] 5874 	ld	a, l
      001C04 3C               [ 4] 5875 	inc	a
      001C05 32r06r00         [13] 5876 	ld	(_level+0), a
                                   5877 ;src\/CheckPlayfield.h:223: speed = 15;
      001C08 21r93r00         [10] 5878 	ld	hl, #_speed
      001C0B 36 0F            [10] 5879 	ld	(hl), #0x0f
      001C0D 18 32            [12] 5880 	jr	00186$
      001C0F                       5881 00185$:
                                   5882 ;src\/CheckPlayfield.h:226: else if(blocksRemoved >= 60) { 
      001C0F 78               [ 4] 5883 	ld	a, b
      001C10 D6 3C            [ 7] 5884 	sub	a, #0x3c
      001C12 7A               [ 4] 5885 	ld	a, d
      001C13 DE 00            [ 7] 5886 	sbc	a, #0x00
      001C15 38 0C            [12] 5887 	jr	C, 00182$
                                   5888 ;src\/CheckPlayfield.h:227: level = 3;
      001C17 21r06r00         [10] 5889 	ld	hl, #_level
      001C1A 36 03            [10] 5890 	ld	(hl), #0x03
                                   5891 ;src\/CheckPlayfield.h:228: speed = 30;
      001C1C 21r93r00         [10] 5892 	ld	hl, #_speed
      001C1F 36 1E            [10] 5893 	ld	(hl), #0x1e
      001C21 18 1E            [12] 5894 	jr	00186$
      001C23                       5895 00182$:
                                   5896 ;src\/CheckPlayfield.h:230: else if(blocksRemoved >= 30) { 
      001C23 78               [ 4] 5897 	ld	a, b
      001C24 D6 1E            [ 7] 5898 	sub	a, #0x1e
      001C26 7A               [ 4] 5899 	ld	a, d
      001C27 DE 00            [ 7] 5900 	sbc	a, #0x00
      001C29 38 0C            [12] 5901 	jr	C, 00179$
                                   5902 ;src\/CheckPlayfield.h:231: level = 2;
      001C2B 21r06r00         [10] 5903 	ld	hl, #_level
      001C2E 36 02            [10] 5904 	ld	(hl), #0x02
                                   5905 ;src\/CheckPlayfield.h:232: speed = 45;
      001C30 21r93r00         [10] 5906 	ld	hl, #_speed
      001C33 36 2D            [10] 5907 	ld	(hl), #0x2d
      001C35 18 0A            [12] 5908 	jr	00186$
      001C37                       5909 00179$:
                                   5910 ;src\/CheckPlayfield.h:235: level = 1;
      001C37 21r06r00         [10] 5911 	ld	hl, #_level
      001C3A 36 01            [10] 5912 	ld	(hl), #0x01
                                   5913 ;src\/CheckPlayfield.h:236: speed = 60;
      001C3C 21r93r00         [10] 5914 	ld	hl, #_speed
      001C3F 36 3C            [10] 5915 	ld	(hl), #0x3c
      001C41                       5916 00186$:
                                   5917 ;src\/CheckPlayfield.h:239: if(oldLevel != level) {
      001C41 3Ar06r00         [13] 5918 	ld	a,(#_level + 0)
      001C44 91               [ 4] 5919 	sub	a, c
      001C45 28 05            [12] 5920 	jr	Z, 00188$
                                   5921 ;src\/CheckPlayfield.h:240: newLevel = TRUE;
      001C47 21r07r00         [10] 5922 	ld	hl, #_newLevel
      001C4A 36 01            [10] 5923 	ld	(hl), #0x01
      001C4C                       5924 00188$:
                                   5925 ;src\/CheckPlayfield.h:244: DrawPlayfield();
      001C4C CDr5Fr13         [17] 5926 	call	_DrawPlayfield
                                   5927 ;src\/CheckPlayfield.h:248: CheckIfPlayfieldIsValid(); // test
      001C4F CDrD0r13         [17] 5928 	call	_CheckIfPlayfieldIsValid
                                   5929 ;src\/CheckPlayfield.h:250: DrawScore();
      001C52 CDr35r0B         [17] 5930 	call	_DrawScore
                                   5931 ;src\/CheckPlayfield.h:252: iteration++;
      001C55 DD 34 04         [23] 5932 	inc	4 (ix)
                                   5933 ;src\/CheckPlayfield.h:253: CheckPlayfield(iteration);  
      001C58 DD 7E 04         [19] 5934 	ld	a, 4 (ix)
      001C5B F5               [11] 5935 	push	af
      001C5C 33               [ 6] 5936 	inc	sp
      001C5D CDr84r14         [17] 5937 	call	_CheckPlayfield
      001C60                       5938 00236$:
                                   5939 ;src\/CheckPlayfield.h:258: }
      001C60 DD F9            [10] 5940 	ld	sp, ix
      001C62 DD E1            [14] 5941 	pop	ix
      001C64 C9               [10] 5942 	ret
                                   5943 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5944 ;	---------------------------------
                                   5945 ; Function RandomIndex
                                   5946 ; ---------------------------------
      001C65                       5947 _RandomIndex::
                                   5948 ;src\/GameLogic.h:5: do {
      001C65                       5949 00101$:
                                   5950 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001C65 CDrA3r00         [17] 5951 	call	_GetRandom
      001C68 7D               [ 4] 5952 	ld	a, l
      001C69 E6 07            [ 7] 5953 	and	a, #0x07
      001C6B 6F               [ 4] 5954 	ld	l, a
                                   5955 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001C6C 3E 04            [ 7] 5956 	ld	a, #0x04
      001C6E 95               [ 4] 5957 	sub	a, l
      001C6F 38 F4            [12] 5958 	jr	C, 00101$
                                   5959 ;src\/GameLogic.h:10: return random;
                                   5960 ;src\/GameLogic.h:11: }
      001C71 C9               [10] 5961 	ret
                                   5962 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5963 ;	---------------------------------
                                   5964 ; Function RandomPiece
                                   5965 ; ---------------------------------
      001C72                       5966 _RandomPiece::
                                   5967 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001C72 01r18r00         [10] 5968 	ld	bc, #_pieces+0
      001C75 C5               [11] 5969 	push	bc
      001C76 CDr65r1C         [17] 5970 	call	_RandomIndex
      001C79 C1               [10] 5971 	pop	bc
      001C7A 26 00            [ 7] 5972 	ld	h, #0x00
      001C7C 09               [11] 5973 	add	hl, bc
      001C7D 7E               [ 7] 5974 	ld	a, (hl)
      001C7E 32r90r00         [13] 5975 	ld	(_topPiece+0), a
                                   5976 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001C81 C5               [11] 5977 	push	bc
      001C82 CDr65r1C         [17] 5978 	call	_RandomIndex
      001C85 C1               [10] 5979 	pop	bc
      001C86 26 00            [ 7] 5980 	ld	h, #0x00
      001C88 09               [11] 5981 	add	hl, bc
      001C89 7E               [ 7] 5982 	ld	a, (hl)
      001C8A 32r91r00         [13] 5983 	ld	(_midPiece+0), a
                                   5984 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001C8D C5               [11] 5985 	push	bc
      001C8E CDr65r1C         [17] 5986 	call	_RandomIndex
      001C91 C1               [10] 5987 	pop	bc
      001C92 26 00            [ 7] 5988 	ld	h, #0x00
      001C94 09               [11] 5989 	add	hl, bc
      001C95 7E               [ 7] 5990 	ld	a, (hl)
      001C96 32r92r00         [13] 5991 	ld	(_bottomPiece+0), a
                                   5992 ;src\/GameLogic.h:17: }
      001C99 C9               [10] 5993 	ret
                                   5994 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5995 ;	---------------------------------
                                   5996 ; Function UpdateAndDrawPieceStatic
                                   5997 ; ---------------------------------
      001C9A                       5998 _UpdateAndDrawPieceStatic::
                                   5999 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001C9A 01r00r00         [10] 6000 	ld	bc, #_playfield+0
      001C9D ED 5Br01r00      [20] 6001 	ld	de, (_col)
      001CA1 16 00            [ 7] 6002 	ld	d, #0x00
      001CA3 6B               [ 4] 6003 	ld	l, e
      001CA4 62               [ 4] 6004 	ld	h, d
      001CA5 29               [11] 6005 	add	hl, hl
      001CA6 19               [11] 6006 	add	hl, de
      001CA7 29               [11] 6007 	add	hl, hl
      001CA8 29               [11] 6008 	add	hl, hl
      001CA9 09               [11] 6009 	add	hl, bc
      001CAA EB               [ 4] 6010 	ex	de, hl
      001CAB 3Ar02r00         [13] 6011 	ld	a, (#_line + 0)
      001CAE 6F               [ 4] 6012 	ld	l, a
      001CAF 26 00            [ 7] 6013 	ld	h, #0x00
      001CB1 19               [11] 6014 	add	hl, de
      001CB2 3Ar90r00         [13] 6015 	ld	a,(#_topPiece + 0)
      001CB5 77               [ 7] 6016 	ld	(hl), a
                                   6017 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001CB6 ED 5Br01r00      [20] 6018 	ld	de, (_col)
      001CBA 16 00            [ 7] 6019 	ld	d, #0x00
      001CBC 6B               [ 4] 6020 	ld	l, e
      001CBD 62               [ 4] 6021 	ld	h, d
      001CBE 29               [11] 6022 	add	hl, hl
      001CBF 19               [11] 6023 	add	hl, de
      001CC0 29               [11] 6024 	add	hl, hl
      001CC1 29               [11] 6025 	add	hl, hl
      001CC2 09               [11] 6026 	add	hl, bc
      001CC3 EB               [ 4] 6027 	ex	de, hl
      001CC4 3Ar02r00         [13] 6028 	ld	a, (#_line + 0)
      001CC7 6F               [ 4] 6029 	ld	l, a
      001CC8 2C               [ 4] 6030 	inc	l
      001CC9 26 00            [ 7] 6031 	ld	h, #0x00
      001CCB 19               [11] 6032 	add	hl, de
      001CCC 3Ar91r00         [13] 6033 	ld	a,(#_midPiece + 0)
      001CCF 77               [ 7] 6034 	ld	(hl), a
                                   6035 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001CD0 ED 5Br01r00      [20] 6036 	ld	de, (_col)
      001CD4 16 00            [ 7] 6037 	ld	d, #0x00
      001CD6 6B               [ 4] 6038 	ld	l, e
      001CD7 62               [ 4] 6039 	ld	h, d
      001CD8 29               [11] 6040 	add	hl, hl
      001CD9 19               [11] 6041 	add	hl, de
      001CDA 29               [11] 6042 	add	hl, hl
      001CDB 29               [11] 6043 	add	hl, hl
      001CDC 09               [11] 6044 	add	hl, bc
      001CDD EB               [ 4] 6045 	ex	de, hl
      001CDE 3Ar02r00         [13] 6046 	ld	a, (#_line + 0)
      001CE1 6F               [ 4] 6047 	ld	l, a
      001CE2 2C               [ 4] 6048 	inc	l
      001CE3 2C               [ 4] 6049 	inc	l
      001CE4 26 00            [ 7] 6050 	ld	h, #0x00
      001CE6 19               [11] 6051 	add	hl, de
      001CE7 3Ar92r00         [13] 6052 	ld	a,(#_bottomPiece + 0)
      001CEA 77               [ 7] 6053 	ld	(hl), a
                                   6054 ;src\/GameLogic.h:25: DrawPiece(line);
      001CEB C5               [11] 6055 	push	bc
      001CEC 3Ar02r00         [13] 6056 	ld	a,(#_line + 0)
      001CEF F5               [11] 6057 	push	af
      001CF0 33               [ 6] 6058 	inc	sp
      001CF1 CDr3Cr13         [17] 6059 	call	_DrawPiece
      001CF4 33               [ 6] 6060 	inc	sp
      001CF5 C1               [10] 6061 	pop	bc
                                   6062 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001CF6 3E 02            [ 7] 6063 	ld	a, #0x02
      001CF8 32r01r00         [13] 6064 	ld	(#_col), a
                                   6065 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   6066 ;src\/GameLogic.h:31: counter = 0;
      001CFB 3E 00            [ 7] 6067 	ld	a,#0x00
      001CFD 32r02r00         [13] 6068 	ld	(#_line),a
      001D00 32r03r00         [13] 6069 	ld	(#_counter), a
                                   6070 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001D03 3Ar18r00         [13] 6071 	ld	a, (#_playfield + 24)
      001D06 B7               [ 4] 6072 	or	a, a
      001D07 20 0C            [12] 6073 	jr	NZ, 00101$
                                   6074 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001D09 3Ar19r00         [13] 6075 	ld	a, (#_playfield + 25)
      001D0C B7               [ 4] 6076 	or	a, a
      001D0D 20 06            [12] 6077 	jr	NZ, 00101$
                                   6078 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001D0F 3Ar1Ar00         [13] 6079 	ld	a, (#_playfield + 26)
      001D12 B7               [ 4] 6080 	or	a, a
      001D13 28 0B            [12] 6081 	jr	Z, 00102$
      001D15                       6082 00101$:
                                   6083 ;src\/GameLogic.h:37: gameOver = TRUE;
      001D15 FD 21r00r00      [14] 6084 	ld	iy, #_gameOver
      001D19 FD 36 00 01      [19] 6085 	ld	0 (iy), #0x01
      001D1D C3r5Fr13         [10] 6086 	jp	_DrawPlayfield
      001D20                       6087 00102$:
                                   6088 ;src\/GameLogic.h:40: RandomPiece();
      001D20 CDr72r1C         [17] 6089 	call	_RandomPiece
                                   6090 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001D23 3E 01            [ 7] 6091 	ld	a, #0x01
      001D25 F5               [11] 6092 	push	af
      001D26 33               [ 6] 6093 	inc	sp
      001D27 CDr84r14         [17] 6094 	call	_CheckPlayfield
      001D2A 33               [ 6] 6095 	inc	sp
                                   6096 ;src\/GameLogic.h:45: DrawPlayfield();
                                   6097 ;src\/GameLogic.h:46: }
      001D2B C3r5Fr13         [10] 6098 	jp	_DrawPlayfield
                                   6099 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   6100 ;	---------------------------------
                                   6101 ; Function BlinkPauseText
                                   6102 ; ---------------------------------
      001D2E                       6103 _BlinkPauseText::
                                   6104 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001D2E 2A 9E FC         [16] 6105 	ld	hl, (_JIFFY)
      001D31 CB 5D            [ 8] 6106 	bit	3, l
      001D33 28 0E            [12] 6107 	jr	Z, 00102$
                                   6108 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001D35 11 0D 0C         [10] 6109 	ld	de, #0x0c0d
      001D38 D5               [11] 6110 	push	de
      001D39 21r4Cr1D         [10] 6111 	ld	hl, #___str_4
      001D3C E5               [11] 6112 	push	hl
      001D3D CDrA7r08         [17] 6113 	call	_DrawString
      001D40 F1               [10] 6114 	pop	af
      001D41 F1               [10] 6115 	pop	af
      001D42 C9               [10] 6116 	ret
      001D43                       6117 00102$:
                                   6118 ;src\/GameLogic.h:55: DrawLine(6);
      001D43 3E 06            [ 7] 6119 	ld	a, #0x06
      001D45 F5               [11] 6120 	push	af
      001D46 33               [ 6] 6121 	inc	sp
      001D47 CDr04r13         [17] 6122 	call	_DrawLine
      001D4A 33               [ 6] 6123 	inc	sp
                                   6124 ;src\/GameLogic.h:58: }
      001D4B C9               [10] 6125 	ret
      001D4C                       6126 ___str_4:
      001D4C 50 41 55 53 45        6127 	.ascii "PAUSE"
      001D51 00                    6128 	.db 0x00
                                   6129 ;src\/GameLogic.h:60: void Pause() {
                                   6130 ;	---------------------------------
                                   6131 ; Function Pause
                                   6132 ; ---------------------------------
      001D52                       6133 _Pause::
                                   6134 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001D52 11 0D 0C         [10] 6135 	ld	de, #0x0c0d
      001D55 D5               [11] 6136 	push	de
      001D56 21r8Cr1D         [10] 6137 	ld	hl, #___str_5
      001D59 E5               [11] 6138 	push	hl
      001D5A CDrA7r08         [17] 6139 	call	_DrawString
      001D5D F1               [10] 6140 	pop	af
      001D5E F1               [10] 6141 	pop	af
                                   6142 ;src\/GameLogic.h:65: while(TRUE) {
      001D5F                       6143 00114$:
                                   6144 ;src\/GameLogic.h:67: BlinkPauseText();
      001D5F CDr2Er1D         [17] 6145 	call	_BlinkPauseText
                                   6146 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001D62 2E 07            [ 7] 6147 	ld	l, #0x07
      001D64 CDr00r00         [17] 6148 	call	_SNSMAT
                                   6149 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001D67 CB 55            [ 8] 6150 	bit	2, l
      001D69 28 F4            [12] 6151 	jr	Z, 00114$
                                   6152 ;src\/GameLogic.h:73: while(TRUE) {
      001D6B                       6153 00109$:
                                   6154 ;src\/GameLogic.h:75: BlinkPauseText();
      001D6B CDr2Er1D         [17] 6155 	call	_BlinkPauseText
                                   6156 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001D6E 2E 07            [ 7] 6157 	ld	l, #0x07
      001D70 CDr00r00         [17] 6158 	call	_SNSMAT
                                   6159 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001D73 CB 55            [ 8] 6160 	bit	2, l
      001D75 20 F4            [12] 6161 	jr	NZ, 00109$
                                   6162 ;src\/GameLogic.h:81: while(TRUE) {
      001D77                       6163 00104$:
                                   6164 ;src\/GameLogic.h:83: BlinkPauseText();
      001D77 CDr2Er1D         [17] 6165 	call	_BlinkPauseText
                                   6166 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001D7A 2E 07            [ 7] 6167 	ld	l, #0x07
      001D7C CDr00r00         [17] 6168 	call	_SNSMAT
                                   6169 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001D7F CB 55            [ 8] 6170 	bit	2, l
      001D81 28 F4            [12] 6171 	jr	Z, 00104$
                                   6172 ;src\/GameLogic.h:89: DrawLine(6);
      001D83 3E 06            [ 7] 6173 	ld	a, #0x06
      001D85 F5               [11] 6174 	push	af
      001D86 33               [ 6] 6175 	inc	sp
      001D87 CDr04r13         [17] 6176 	call	_DrawLine
      001D8A 33               [ 6] 6177 	inc	sp
                                   6178 ;src\/GameLogic.h:90: return;
                                   6179 ;src\/GameLogic.h:100: }
      001D8B C9               [10] 6180 	ret
      001D8C                       6181 ___str_5:
      001D8C 50 41 55 53 45        6182 	.ascii "PAUSE"
      001D91 00                    6183 	.db 0x00
                                   6184 ;src\/GameLogic.h:102: void GameLoop() {
                                   6185 ;	---------------------------------
                                   6186 ; Function GameLoop
                                   6187 ; ---------------------------------
      001D92                       6188 _GameLoop::
      001D92 DD E5            [15] 6189 	push	ix
      001D94 DD 21 00 00      [14] 6190 	ld	ix,#0
      001D98 DD 39            [15] 6191 	add	ix,sp
      001D9A 21 F3 FF         [10] 6192 	ld	hl, #-13
      001D9D 39               [11] 6193 	add	hl, sp
      001D9E F9               [ 6] 6194 	ld	sp, hl
                                   6195 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001D9F DD 36 FF 00      [19] 6196 	ld	-1 (ix), #0
      001DA3 DD 36 F3 00      [19] 6197 	ld	-13 (ix), #0
                                   6198 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001DA7 DD 36 F4 00      [19] 6199 	ld	-12 (ix), #0
      001DAB DD 36 F5 00      [19] 6200 	ld	-11 (ix), #0
                                   6201 ;src\/GameLogic.h:109: while(!gameOver) {
      001DAF                       6202 00150$:
      001DAF 3Ar00r00         [13] 6203 	ld	a,(#_gameOver + 0)
      001DB2 B7               [ 4] 6204 	or	a, a
      001DB3 C2r4Ar21         [10] 6205 	jp	NZ, 00152$
                                   6206 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001DB6 ED 4B 9E FC      [20] 6207 	ld	bc, (_JIFFY)
                                   6208 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001DBA                       6209 00101$:
      001DBA 2A 9E FC         [16] 6210 	ld	hl, (_JIFFY)
      001DBD BF               [ 4] 6211 	cp	a, a
      001DBE ED 42            [15] 6212 	sbc	hl, bc
      001DC0 28 F8            [12] 6213 	jr	Z, 00101$
                                   6214 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001DC2 ED 4Br01r00      [20] 6215 	ld	bc, (_col)
      001DC6 06 00            [ 7] 6216 	ld	b, #0x00
      001DC8 69               [ 4] 6217 	ld	l, c
      001DC9 60               [ 4] 6218 	ld	h, b
      001DCA 29               [11] 6219 	add	hl, hl
      001DCB 09               [11] 6220 	add	hl, bc
      001DCC 29               [11] 6221 	add	hl, hl
      001DCD 29               [11] 6222 	add	hl, hl
      001DCE EB               [ 4] 6223 	ex	de, hl
      001DCF 21r00r00         [10] 6224 	ld	hl, #_playfield
      001DD2 19               [11] 6225 	add	hl, de
      001DD3 EB               [ 4] 6226 	ex	de, hl
      001DD4 FD 21r02r00      [14] 6227 	ld	iy, #_line
      001DD8 FD 6E 00         [19] 6228 	ld	l, 0 (iy)
      001DDB 26 00            [ 7] 6229 	ld	h, #0x00
      001DDD 19               [11] 6230 	add	hl, de
      001DDE 36 00            [10] 6231 	ld	(hl), #0x00
                                   6232 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001DE0 ED 4Br01r00      [20] 6233 	ld	bc, (_col)
      001DE4 06 00            [ 7] 6234 	ld	b, #0x00
      001DE6 69               [ 4] 6235 	ld	l, c
      001DE7 60               [ 4] 6236 	ld	h, b
      001DE8 29               [11] 6237 	add	hl, hl
      001DE9 09               [11] 6238 	add	hl, bc
      001DEA 29               [11] 6239 	add	hl, hl
      001DEB 29               [11] 6240 	add	hl, hl
      001DEC EB               [ 4] 6241 	ex	de, hl
      001DED 21r00r00         [10] 6242 	ld	hl, #_playfield
      001DF0 19               [11] 6243 	add	hl, de
      001DF1 EB               [ 4] 6244 	ex	de, hl
      001DF2 FD 6E 00         [19] 6245 	ld	l, 0 (iy)
      001DF5 2C               [ 4] 6246 	inc	l
      001DF6 26 00            [ 7] 6247 	ld	h, #0x00
      001DF8 19               [11] 6248 	add	hl, de
      001DF9 36 00            [10] 6249 	ld	(hl), #0x00
                                   6250 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001DFB ED 4Br01r00      [20] 6251 	ld	bc, (_col)
      001DFF 06 00            [ 7] 6252 	ld	b, #0x00
      001E01 69               [ 4] 6253 	ld	l, c
      001E02 60               [ 4] 6254 	ld	h, b
      001E03 29               [11] 6255 	add	hl, hl
      001E04 09               [11] 6256 	add	hl, bc
      001E05 29               [11] 6257 	add	hl, hl
      001E06 29               [11] 6258 	add	hl, hl
      001E07 EB               [ 4] 6259 	ex	de, hl
      001E08 21r00r00         [10] 6260 	ld	hl, #_playfield
      001E0B 19               [11] 6261 	add	hl, de
      001E0C EB               [ 4] 6262 	ex	de, hl
      001E0D FD 6E 00         [19] 6263 	ld	l, 0 (iy)
      001E10 2C               [ 4] 6264 	inc	l
      001E11 2C               [ 4] 6265 	inc	l
      001E12 26 00            [ 7] 6266 	ld	h, #0x00
      001E14 19               [11] 6267 	add	hl, de
      001E15 36 00            [10] 6268 	ld	(hl), #0x00
                                   6269 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001E17 2E 01            [ 7] 6270 	ld	l, #0x01
      001E19 CDr00r00         [17] 6271 	call	_GTSTCK
      001E1C DD 75 F6         [19] 6272 	ld	-10 (ix), l
                                   6273 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001E1F 2E 01            [ 7] 6274 	ld	l, #0x01
      001E21 CDr00r00         [17] 6275 	call	_GTTRIG
      001E24 DD 75 F7         [19] 6276 	ld	-9 (ix), l
                                   6277 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001E27 2E 03            [ 7] 6278 	ld	l, #0x03
      001E29 CDr00r00         [17] 6279 	call	_GTTRIG
      001E2C DD 75 F8         [19] 6280 	ld	-8 (ix), l
                                   6281 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001E2F DD 7E F6         [19] 6282 	ld	a, -10 (ix)
                                   6283 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001E32 B7               [ 4] 6284 	or	a,a
      001E33 20 07            [12] 6285 	jr	NZ, 00105$
      001E35 6F               [ 4] 6286 	ld	l,a
      001E36 CDr00r00         [17] 6287 	call	_GTSTCK
      001E39 DD 75 F6         [19] 6288 	ld	-10 (ix), l
      001E3C                       6289 00105$:
                                   6290 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001E3C FD 21r02r00      [14] 6291 	ld	iy, #_line
      001E40 FD 7E 00         [19] 6292 	ld	a, 0 (iy)
      001E43 DD 77 F9         [19] 6293 	ld	-7 (ix), a
                                   6294 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001E46 DD 7E FF         [19] 6295 	ld	a, -1 (ix)
      001E49 B7               [ 4] 6296 	or	a, a
      001E4A C2r33r1F         [10] 6297 	jp	NZ, 00118$
                                   6298 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001E4D FD 7E 00         [19] 6299 	ld	a, 0 (iy)
      001E50 DD 77 FF         [19] 6300 	ld	-1 (ix), a
                                   6301 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001E53 FD 21r01r00      [14] 6302 	ld	iy, #_col
      001E57 FD 7E 00         [19] 6303 	ld	a, 0 (iy)
      001E5A DD 77 FA         [19] 6304 	ld	-6 (ix), a
                                   6305 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001E5D DD 7E FF         [19] 6306 	ld	a, -1 (ix)
      001E60 C6 02            [ 7] 6307 	add	a, #0x02
      001E62 DD 77 FB         [19] 6308 	ld	-5 (ix), a
                                   6309 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001E65 DD 7E F6         [19] 6310 	ld	a, -10 (ix)
      001E68 D6 07            [ 7] 6311 	sub	a, #0x07
      001E6A 20 5F            [12] 6312 	jr	NZ, 00112$
                                   6313 ;src\/GameLogic.h:139: col > 0 && 
      001E6C FD 7E 00         [19] 6314 	ld	a, 0 (iy)
      001E6F B7               [ 4] 6315 	or	a, a
      001E70 28 59            [12] 6316 	jr	Z, 00112$
                                   6317 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001E72 DD 7E FA         [19] 6318 	ld	a, -6 (ix)
      001E75 C6 FF            [ 7] 6319 	add	a, #0xff
      001E77 DD 77 FF         [19] 6320 	ld	-1 (ix), a
      001E7A 4F               [ 4] 6321 	ld	c, a
      001E7B 07               [ 4] 6322 	rlca
      001E7C 9F               [ 4] 6323 	sbc	a, a
      001E7D 47               [ 4] 6324 	ld	b, a
      001E7E 69               [ 4] 6325 	ld	l, c
      001E7F 60               [ 4] 6326 	ld	h, b
      001E80 29               [11] 6327 	add	hl, hl
      001E81 09               [11] 6328 	add	hl, bc
      001E82 29               [11] 6329 	add	hl, hl
      001E83 29               [11] 6330 	add	hl, hl
      001E84 DD 75 FE         [19] 6331 	ld	-2 (ix), l
      001E87 DD 74 FF         [19] 6332 	ld	-1 (ix), h
      001E8A 3Er00            [ 7] 6333 	ld	a, #<(_playfield)
      001E8C DD 86 FE         [19] 6334 	add	a, -2 (ix)
      001E8F DD 77 FC         [19] 6335 	ld	-4 (ix), a
      001E92 3Es00            [ 7] 6336 	ld	a, #>(_playfield)
      001E94 DD 8E FF         [19] 6337 	adc	a, -1 (ix)
      001E97 DD 77 FD         [19] 6338 	ld	-3 (ix), a
      001E9A DD 7E FC         [19] 6339 	ld	a, -4 (ix)
      001E9D DD 86 F9         [19] 6340 	add	a, -7 (ix)
      001EA0 DD 77 FE         [19] 6341 	ld	-2 (ix), a
      001EA3 DD 7E FD         [19] 6342 	ld	a, -3 (ix)
      001EA6 CE 00            [ 7] 6343 	adc	a, #0x00
      001EA8 DD 77 FF         [19] 6344 	ld	-1 (ix), a
      001EAB DD 6E FE         [19] 6345 	ld	l, -2 (ix)
      001EAE DD 66 FF         [19] 6346 	ld	h, -1 (ix)
      001EB1 7E               [ 7] 6347 	ld	a, (hl)
      001EB2 B7               [ 4] 6348 	or	a, a
      001EB3 20 16            [12] 6349 	jr	NZ, 00112$
                                   6350 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001EB5 DD 7E FC         [19] 6351 	ld	a, -4 (ix)
      001EB8 DD 86 FB         [19] 6352 	add	a, -5 (ix)
      001EBB 4F               [ 4] 6353 	ld	c, a
      001EBC DD 7E FD         [19] 6354 	ld	a, -3 (ix)
      001EBF CE 00            [ 7] 6355 	adc	a, #0x00
      001EC1 47               [ 4] 6356 	ld	b, a
      001EC2 0A               [ 7] 6357 	ld	a, (bc)
      001EC3 B7               [ 4] 6358 	or	a, a
      001EC4 20 05            [12] 6359 	jr	NZ, 00112$
                                   6360 ;src\/GameLogic.h:142: col--;
      001EC6 FD 35 00         [23] 6361 	dec	0 (iy)
      001EC9 18 68            [12] 6362 	jr	00118$
      001ECB                       6363 00112$:
                                   6364 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001ECB DD 7E F6         [19] 6365 	ld	a, -10 (ix)
      001ECE D6 03            [ 7] 6366 	sub	a, #0x03
      001ED0 20 61            [12] 6367 	jr	NZ, 00118$
                                   6368 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001ED2 FD 21r01r00      [14] 6369 	ld	iy, #_col
      001ED6 FD 7E 00         [19] 6370 	ld	a, 0 (iy)
      001ED9 D6 05            [ 7] 6371 	sub	a, #0x05
      001EDB 30 56            [12] 6372 	jr	NC, 00118$
                                   6373 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001EDD DD 7E FA         [19] 6374 	ld	a, -6 (ix)
      001EE0 3C               [ 4] 6375 	inc	a
      001EE1 DD 77 FF         [19] 6376 	ld	-1 (ix), a
      001EE4 4F               [ 4] 6377 	ld	c, a
      001EE5 07               [ 4] 6378 	rlca
      001EE6 9F               [ 4] 6379 	sbc	a, a
      001EE7 47               [ 4] 6380 	ld	b, a
      001EE8 69               [ 4] 6381 	ld	l, c
      001EE9 60               [ 4] 6382 	ld	h, b
      001EEA 29               [11] 6383 	add	hl, hl
      001EEB 09               [11] 6384 	add	hl, bc
      001EEC 29               [11] 6385 	add	hl, hl
      001EED 29               [11] 6386 	add	hl, hl
      001EEE DD 75 FE         [19] 6387 	ld	-2 (ix), l
      001EF1 DD 74 FF         [19] 6388 	ld	-1 (ix), h
      001EF4 3Er00            [ 7] 6389 	ld	a, #<(_playfield)
      001EF6 DD 86 FE         [19] 6390 	add	a, -2 (ix)
      001EF9 DD 77 FC         [19] 6391 	ld	-4 (ix), a
      001EFC 3Es00            [ 7] 6392 	ld	a, #>(_playfield)
      001EFE DD 8E FF         [19] 6393 	adc	a, -1 (ix)
      001F01 DD 77 FD         [19] 6394 	ld	-3 (ix), a
      001F04 DD 7E FC         [19] 6395 	ld	a, -4 (ix)
      001F07 DD 86 F9         [19] 6396 	add	a, -7 (ix)
      001F0A DD 77 FE         [19] 6397 	ld	-2 (ix), a
      001F0D DD 7E FD         [19] 6398 	ld	a, -3 (ix)
      001F10 CE 00            [ 7] 6399 	adc	a, #0x00
      001F12 DD 77 FF         [19] 6400 	ld	-1 (ix), a
      001F15 DD 6E FE         [19] 6401 	ld	l, -2 (ix)
      001F18 DD 66 FF         [19] 6402 	ld	h, -1 (ix)
      001F1B 7E               [ 7] 6403 	ld	a, (hl)
      001F1C B7               [ 4] 6404 	or	a, a
      001F1D 20 14            [12] 6405 	jr	NZ, 00118$
                                   6406 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001F1F DD 7E FC         [19] 6407 	ld	a, -4 (ix)
      001F22 DD 86 FB         [19] 6408 	add	a, -5 (ix)
      001F25 4F               [ 4] 6409 	ld	c, a
      001F26 DD 7E FD         [19] 6410 	ld	a, -3 (ix)
      001F29 CE 00            [ 7] 6411 	adc	a, #0x00
      001F2B 47               [ 4] 6412 	ld	b, a
      001F2C 0A               [ 7] 6413 	ld	a, (bc)
      001F2D B7               [ 4] 6414 	or	a, a
      001F2E 20 03            [12] 6415 	jr	NZ, 00118$
                                   6416 ;src\/GameLogic.h:148: col++;
      001F30 FD 34 00         [23] 6417 	inc	0 (iy)
      001F33                       6418 00118$:
                                   6419 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001F33 DD 7E F3         [19] 6420 	ld	a, -13 (ix)
      001F36 B7               [ 4] 6421 	or	a, a
      001F37 C2rF9r1F         [10] 6422 	jp	NZ, 00132$
                                   6423 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001F3A DD 7E F6         [19] 6424 	ld	a, -10 (ix)
      001F3D 3D               [ 4] 6425 	dec	a
      001F3E 28 18            [12] 6426 	jr	Z, 00119$
      001F40 DD 7E F4         [19] 6427 	ld	a, -12 (ix)
      001F43 B7               [ 4] 6428 	or	a, a
      001F44 20 06            [12] 6429 	jr	NZ, 00124$
      001F46 DD 7E F7         [19] 6430 	ld	a, -9 (ix)
      001F49 3C               [ 4] 6431 	inc	a
      001F4A 28 0C            [12] 6432 	jr	Z, 00119$
      001F4C                       6433 00124$:
      001F4C DD 7E F5         [19] 6434 	ld	a, -11 (ix)
      001F4F B7               [ 4] 6435 	or	a, a
      001F50 20 1A            [12] 6436 	jr	NZ, 00120$
      001F52 DD 7E F8         [19] 6437 	ld	a, -8 (ix)
      001F55 3C               [ 4] 6438 	inc	a
      001F56 20 14            [12] 6439 	jr	NZ, 00120$
      001F58                       6440 00119$:
                                   6441 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001F58 3Ar92r00         [13] 6442 	ld	a, (#_bottomPiece + 0)
      001F5B 4F               [ 4] 6443 	ld	c, a
                                   6444 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001F5C 3Ar91r00         [13] 6445 	ld	a,(#_midPiece + 0)
      001F5F 32r92r00         [13] 6446 	ld	(#_bottomPiece),a
                                   6447 ;src\/GameLogic.h:160: midPiece = topPiece;
      001F62 3Ar90r00         [13] 6448 	ld	a,(#_topPiece + 0)
      001F65 32r91r00         [13] 6449 	ld	(#_midPiece),a
                                   6450 ;src\/GameLogic.h:161: topPiece = temp;
      001F68 21r90r00         [10] 6451 	ld	hl, #_topPiece
      001F6B 71               [ 7] 6452 	ld	(hl), c
      001F6C                       6453 00120$:
                                   6454 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001F6C DD 7E F6         [19] 6455 	ld	a, -10 (ix)
      001F6F D6 05            [ 7] 6456 	sub	a, #0x05
      001F71 C2rF9r1F         [10] 6457 	jp	NZ,00132$
                                   6458 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001F74 DD 7E F9         [19] 6459 	ld	a, -7 (ix)
      001F77 DD 77 FE         [19] 6460 	ld	-2 (ix), a
      001F7A DD 7E F9         [19] 6461 	ld	a, -7 (ix)
      001F7D DD 77 FF         [19] 6462 	ld	-1 (ix), a
      001F80                       6463 00154$:
      001F80 DD 7E FF         [19] 6464 	ld	a, -1 (ix)
      001F83 D6 0C            [ 7] 6465 	sub	a, #0x0c
      001F85 30 72            [12] 6466 	jr	NC, 00132$
                                   6467 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001F87 DD 7E FF         [19] 6468 	ld	a, -1 (ix)
      001F8A D6 09            [ 7] 6469 	sub	a, #0x09
      001F8C 28 4C            [12] 6470 	jr	Z, 00125$
      001F8E ED 4Br01r00      [20] 6471 	ld	bc, (_col)
      001F92 06 00            [ 7] 6472 	ld	b, #0x00
      001F94 69               [ 4] 6473 	ld	l, c
      001F95 60               [ 4] 6474 	ld	h, b
      001F96 29               [11] 6475 	add	hl, hl
      001F97 09               [11] 6476 	add	hl, bc
      001F98 29               [11] 6477 	add	hl, hl
      001F99 29               [11] 6478 	add	hl, hl
      001F9A DD 75 FC         [19] 6479 	ld	-4 (ix), l
      001F9D DD 74 FD         [19] 6480 	ld	-3 (ix), h
      001FA0 3Er00            [ 7] 6481 	ld	a, #<(_playfield)
      001FA2 DD 86 FC         [19] 6482 	add	a, -4 (ix)
      001FA5 DD 77 FA         [19] 6483 	ld	-6 (ix), a
      001FA8 3Es00            [ 7] 6484 	ld	a, #>(_playfield)
      001FAA DD 8E FD         [19] 6485 	adc	a, -3 (ix)
      001FAD DD 77 FB         [19] 6486 	ld	-5 (ix), a
      001FB0 DD 7E FF         [19] 6487 	ld	a, -1 (ix)
      001FB3 DD 77 FD         [19] 6488 	ld	-3 (ix), a
      001FB6 DD 34 FD         [23] 6489 	inc	-3 (ix)
      001FB9 DD 34 FD         [23] 6490 	inc	-3 (ix)
      001FBC DD 34 FD         [23] 6491 	inc	-3 (ix)
      001FBF DD 7E FD         [19] 6492 	ld	a, -3 (ix)
      001FC2 DD 86 FA         [19] 6493 	add	a, -6 (ix)
      001FC5 DD 77 FC         [19] 6494 	ld	-4 (ix), a
      001FC8 3E 00            [ 7] 6495 	ld	a, #0x00
      001FCA DD 8E FB         [19] 6496 	adc	a, -5 (ix)
      001FCD DD 77 FD         [19] 6497 	ld	-3 (ix), a
      001FD0 DD 6E FC         [19] 6498 	ld	l, -4 (ix)
      001FD3 DD 66 FD         [19] 6499 	ld	h, -3 (ix)
      001FD6 7E               [ 7] 6500 	ld	a, (hl)
      001FD7 B7               [ 4] 6501 	or	a, a
      001FD8 28 14            [12] 6502 	jr	Z, 00155$
      001FDA                       6503 00125$:
                                   6504 ;src\/GameLogic.h:170: DrawPiece(line);
      001FDA 3Ar02r00         [13] 6505 	ld	a,(#_line + 0)
      001FDD F5               [11] 6506 	push	af
      001FDE 33               [ 6] 6507 	inc	sp
      001FDF CDr3Cr13         [17] 6508 	call	_DrawPiece
      001FE2 33               [ 6] 6509 	inc	sp
                                   6510 ;src\/GameLogic.h:172: line = i;
      001FE3 DD 7E FE         [19] 6511 	ld	a, -2 (ix)
      001FE6 32r02r00         [13] 6512 	ld	(#_line),a
                                   6513 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001FE9 CDr9Ar1C         [17] 6514 	call	_UpdateAndDrawPieceStatic
                                   6515 ;src\/GameLogic.h:175: break;
      001FEC 18 0B            [12] 6516 	jr	00132$
      001FEE                       6517 00155$:
                                   6518 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001FEE DD 34 FF         [23] 6519 	inc	-1 (ix)
      001FF1 DD 7E FF         [19] 6520 	ld	a, -1 (ix)
      001FF4 DD 77 FE         [19] 6521 	ld	-2 (ix), a
      001FF7 18 87            [12] 6522 	jr	00154$
      001FF9                       6523 00132$:
                                   6524 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001FF9 DD 7E F6         [19] 6525 	ld	a, -10 (ix)
      001FFC DD 77 FF         [19] 6526 	ld	-1 (ix), a
                                   6527 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001FFF DD 7E F6         [19] 6528 	ld	a, -10 (ix)
      002002 DD 77 F3         [19] 6529 	ld	-13 (ix), a
                                   6530 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      002005 DD 7E F7         [19] 6531 	ld	a, -9 (ix)
      002008 DD 77 F4         [19] 6532 	ld	-12 (ix), a
                                   6533 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      00200B DD 7E F8         [19] 6534 	ld	a, -8 (ix)
      00200E DD 77 F5         [19] 6535 	ld	-11 (ix), a
                                   6536 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      002011 2E 07            [ 7] 6537 	ld	l, #0x07
      002013 CDr00r00         [17] 6538 	call	_SNSMAT
                                   6539 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      002016 CB 55            [ 8] 6540 	bit	2, l
      002018 20 03            [12] 6541 	jr	NZ, 00134$
                                   6542 ;src\/GameLogic.h:214: Pause();
      00201A CDr52r1D         [17] 6543 	call	_Pause
      00201D                       6544 00134$:
                                   6545 ;src\/GameLogic.h:219: counter++;
      00201D FD 21r03r00      [14] 6546 	ld	iy, #_counter
      002021 FD 34 00         [23] 6547 	inc	0 (iy)
                                   6548 ;src\/GameLogic.h:220: if(counter == speed) {
      002024 FD 7E 00         [19] 6549 	ld	a, 0 (iy)
      002027 21r93r00         [10] 6550 	ld	hl, #_speed
      00202A 96               [ 7] 6551 	sub	a, (hl)
      00202B 20 3F            [12] 6552 	jr	NZ, 00139$
                                   6553 ;src\/GameLogic.h:222: counter = 0;
      00202D 21r03r00         [10] 6554 	ld	hl, #_counter
      002030 36 00            [10] 6555 	ld	(hl), #0x00
                                   6556 ;src\/GameLogic.h:225: DrawPiece(line);
      002032 3Ar02r00         [13] 6557 	ld	a,(#_line + 0)
      002035 F5               [11] 6558 	push	af
      002036 33               [ 6] 6559 	inc	sp
      002037 CDr3Cr13         [17] 6560 	call	_DrawPiece
      00203A 33               [ 6] 6561 	inc	sp
                                   6562 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      00203B FD 21r02r00      [14] 6563 	ld	iy, #_line
      00203F FD 7E 00         [19] 6564 	ld	a, 0 (iy)
      002042 D6 09            [ 7] 6565 	sub	a, #0x09
      002044 28 1F            [12] 6566 	jr	Z, 00135$
      002046 ED 4Br01r00      [20] 6567 	ld	bc, (_col)
      00204A 06 00            [ 7] 6568 	ld	b, #0x00
      00204C 69               [ 4] 6569 	ld	l, c
      00204D 60               [ 4] 6570 	ld	h, b
      00204E 29               [11] 6571 	add	hl, hl
      00204F 09               [11] 6572 	add	hl, bc
      002050 29               [11] 6573 	add	hl, hl
      002051 29               [11] 6574 	add	hl, hl
      002052 EB               [ 4] 6575 	ex	de, hl
      002053 21r00r00         [10] 6576 	ld	hl, #_playfield
      002056 19               [11] 6577 	add	hl, de
      002057 EB               [ 4] 6578 	ex	de, hl
      002058 FD 7E 00         [19] 6579 	ld	a, 0 (iy)
      00205B C6 03            [ 7] 6580 	add	a, #0x03
      00205D 6F               [ 4] 6581 	ld	l, a
      00205E 26 00            [ 7] 6582 	ld	h, #0x00
      002060 19               [11] 6583 	add	hl, de
      002061 7E               [ 7] 6584 	ld	a, (hl)
      002062 B7               [ 4] 6585 	or	a, a
      002063 28 03            [12] 6586 	jr	Z, 00136$
      002065                       6587 00135$:
                                   6588 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      002065 CDr9Ar1C         [17] 6589 	call	_UpdateAndDrawPieceStatic
      002068                       6590 00136$:
                                   6591 ;src\/GameLogic.h:234: line++;
      002068 21r02r00         [10] 6592 	ld	hl, #_line
      00206B 34               [11] 6593 	inc	(hl)
      00206C                       6594 00139$:
                                   6595 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      00206C ED 4Br01r00      [20] 6596 	ld	bc, (_col)
      002070 06 00            [ 7] 6597 	ld	b, #0x00
      002072 69               [ 4] 6598 	ld	l, c
      002073 60               [ 4] 6599 	ld	h, b
      002074 29               [11] 6600 	add	hl, hl
      002075 09               [11] 6601 	add	hl, bc
      002076 29               [11] 6602 	add	hl, hl
      002077 29               [11] 6603 	add	hl, hl
      002078 EB               [ 4] 6604 	ex	de, hl
      002079 21r00r00         [10] 6605 	ld	hl, #_playfield
      00207C 19               [11] 6606 	add	hl, de
      00207D EB               [ 4] 6607 	ex	de, hl
      00207E 3Ar02r00         [13] 6608 	ld	a, (#_line + 0)
      002081 6F               [ 4] 6609 	ld	l, a
      002082 26 00            [ 7] 6610 	ld	h, #0x00
      002084 19               [11] 6611 	add	hl, de
      002085 3Ar90r00         [13] 6612 	ld	a,(#_topPiece + 0)
      002088 77               [ 7] 6613 	ld	(hl), a
                                   6614 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      002089 ED 4Br01r00      [20] 6615 	ld	bc, (_col)
      00208D 06 00            [ 7] 6616 	ld	b, #0x00
      00208F 69               [ 4] 6617 	ld	l, c
      002090 60               [ 4] 6618 	ld	h, b
      002091 29               [11] 6619 	add	hl, hl
      002092 09               [11] 6620 	add	hl, bc
      002093 29               [11] 6621 	add	hl, hl
      002094 29               [11] 6622 	add	hl, hl
      002095 EB               [ 4] 6623 	ex	de, hl
      002096 21r00r00         [10] 6624 	ld	hl, #_playfield
      002099 19               [11] 6625 	add	hl, de
      00209A EB               [ 4] 6626 	ex	de, hl
      00209B 3Ar02r00         [13] 6627 	ld	a, (#_line + 0)
      00209E 6F               [ 4] 6628 	ld	l, a
      00209F 2C               [ 4] 6629 	inc	l
      0020A0 26 00            [ 7] 6630 	ld	h, #0x00
      0020A2 19               [11] 6631 	add	hl, de
      0020A3 3Ar91r00         [13] 6632 	ld	a,(#_midPiece + 0)
      0020A6 77               [ 7] 6633 	ld	(hl), a
                                   6634 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      0020A7 ED 4Br01r00      [20] 6635 	ld	bc, (_col)
      0020AB 06 00            [ 7] 6636 	ld	b, #0x00
      0020AD 69               [ 4] 6637 	ld	l, c
      0020AE 60               [ 4] 6638 	ld	h, b
      0020AF 29               [11] 6639 	add	hl, hl
      0020B0 09               [11] 6640 	add	hl, bc
      0020B1 29               [11] 6641 	add	hl, hl
      0020B2 29               [11] 6642 	add	hl, hl
      0020B3 EB               [ 4] 6643 	ex	de, hl
      0020B4 21r00r00         [10] 6644 	ld	hl, #_playfield
      0020B7 19               [11] 6645 	add	hl, de
      0020B8 EB               [ 4] 6646 	ex	de, hl
      0020B9 3Ar02r00         [13] 6647 	ld	a, (#_line + 0)
      0020BC 6F               [ 4] 6648 	ld	l, a
      0020BD 2C               [ 4] 6649 	inc	l
      0020BE 2C               [ 4] 6650 	inc	l
      0020BF 26 00            [ 7] 6651 	ld	h, #0x00
      0020C1 19               [11] 6652 	add	hl, de
      0020C2 3Ar92r00         [13] 6653 	ld	a,(#_bottomPiece + 0)
      0020C5 77               [ 7] 6654 	ld	(hl), a
                                   6655 ;src\/GameLogic.h:248: DrawPiece(line);
      0020C6 3Ar02r00         [13] 6656 	ld	a,(#_line + 0)
      0020C9 F5               [11] 6657 	push	af
      0020CA 33               [ 6] 6658 	inc	sp
      0020CB CDr3Cr13         [17] 6659 	call	_DrawPiece
      0020CE 33               [ 6] 6660 	inc	sp
                                   6661 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      0020CF ED 4Br01r00      [20] 6662 	ld	bc, (_col)
      0020D3 06 00            [ 7] 6663 	ld	b, #0x00
      0020D5 69               [ 4] 6664 	ld	l, c
      0020D6 60               [ 4] 6665 	ld	h, b
      0020D7 29               [11] 6666 	add	hl, hl
      0020D8 09               [11] 6667 	add	hl, bc
      0020D9 29               [11] 6668 	add	hl, hl
      0020DA 29               [11] 6669 	add	hl, hl
      0020DB EB               [ 4] 6670 	ex	de, hl
                                   6671 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      0020DC 21r00r00         [10] 6672 	ld	hl, #_playfield
      0020DF 19               [11] 6673 	add	hl, de
      0020E0 EB               [ 4] 6674 	ex	de, hl
      0020E1 3Ar02r00         [13] 6675 	ld	a,(#_line + 0)
      0020E4 C6 03            [ 7] 6676 	add	a, #0x03
      0020E6 4F               [ 4] 6677 	ld	c, a
      0020E7 69               [ 4] 6678 	ld	l, c
      0020E8 26 00            [ 7] 6679 	ld	h, #0x00
      0020EA 19               [11] 6680 	add	hl, de
      0020EB 7E               [ 7] 6681 	ld	a, (hl)
      0020EC B7               [ 4] 6682 	or	a, a
      0020ED 28 06            [12] 6683 	jr	Z, 00148$
                                   6684 ;src\/GameLogic.h:254: HideArrow();
      0020EF CDr76r0D         [17] 6685 	call	_HideArrow
      0020F2 C3rAFr1D         [10] 6686 	jp	00150$
      0020F5                       6687 00148$:
                                   6688 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0020F5 41               [ 4] 6689 	ld	b, c
      0020F6                       6690 00157$:
      0020F6 78               [ 4] 6691 	ld	a, b
      0020F7 D6 0C            [ 7] 6692 	sub	a, #0x0c
      0020F9 D2rAFr1D         [10] 6693 	jp	NC, 00150$
                                   6694 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0020FC 3Ar01r00         [13] 6695 	ld	a,(#_col + 0)
      0020FF 87               [ 4] 6696 	add	a, a
      002100 87               [ 4] 6697 	add	a, a
      002101 87               [ 4] 6698 	add	a, a
      002102 87               [ 4] 6699 	add	a, a
      002103 DD 77 FE         [19] 6700 	ld	-2 (ix), a
                                   6701 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002106 68               [ 4] 6702 	ld	l, b
      002107 26 00            [ 7] 6703 	ld	h, #0x00
      002109 19               [11] 6704 	add	hl, de
                                   6705 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00210A DD 7E FE         [19] 6706 	ld	a, -2 (ix)
      00210D C6 50            [ 7] 6707 	add	a, #0x50
      00210F DD 77 FE         [19] 6708 	ld	-2 (ix), a
                                   6709 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002112 6E               [ 7] 6710 	ld	l, (hl)
      002113 78               [ 4] 6711 	ld	a, b
      002114 D6 0B            [ 7] 6712 	sub	a,#0x0b
      002116 20 16            [12] 6713 	jr	NZ, 00143$
      002118 B5               [ 4] 6714 	or	a,l
      002119 20 13            [12] 6715 	jr	NZ, 00143$
                                   6716 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00211B 79               [ 4] 6717 	ld	a, c
      00211C 87               [ 4] 6718 	add	a, a
      00211D 87               [ 4] 6719 	add	a, a
      00211E 87               [ 4] 6720 	add	a, a
      00211F 87               [ 4] 6721 	add	a, a
      002120 F5               [11] 6722 	push	af
      002121 33               [ 6] 6723 	inc	sp
      002122 DD 7E FE         [19] 6724 	ld	a, -2 (ix)
      002125 F5               [11] 6725 	push	af
      002126 33               [ 6] 6726 	inc	sp
      002127 CDrEBr0C         [17] 6727 	call	_DrawArrow
      00212A F1               [10] 6728 	pop	af
                                   6729 ;src\/GameLogic.h:260: break;
      00212B C3rAFr1D         [10] 6730 	jp	00150$
      00212E                       6731 00143$:
                                   6732 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      00212E 7D               [ 4] 6733 	ld	a, l
      00212F B7               [ 4] 6734 	or	a, a
      002130 28 14            [12] 6735 	jr	Z, 00158$
                                   6736 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002132 79               [ 4] 6737 	ld	a, c
      002133 3D               [ 4] 6738 	dec	a
      002134 87               [ 4] 6739 	add	a, a
      002135 87               [ 4] 6740 	add	a, a
      002136 87               [ 4] 6741 	add	a, a
      002137 87               [ 4] 6742 	add	a, a
      002138 F5               [11] 6743 	push	af
      002139 33               [ 6] 6744 	inc	sp
      00213A DD 7E FE         [19] 6745 	ld	a, -2 (ix)
      00213D F5               [11] 6746 	push	af
      00213E 33               [ 6] 6747 	inc	sp
      00213F CDrEBr0C         [17] 6748 	call	_DrawArrow
      002142 F1               [10] 6749 	pop	af
                                   6750 ;src\/GameLogic.h:264: break;
      002143 C3rAFr1D         [10] 6751 	jp	00150$
      002146                       6752 00158$:
                                   6753 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002146 04               [ 4] 6754 	inc	b
      002147 48               [ 4] 6755 	ld	c, b
      002148 18 AC            [12] 6756 	jr	00157$
      00214A                       6757 00152$:
                                   6758 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      00214A 11 0C 0C         [10] 6759 	ld	de, #0x0c0c
      00214D D5               [11] 6760 	push	de
      00214E 21r62r21         [10] 6761 	ld	hl, #___str_6
      002151 E5               [11] 6762 	push	hl
      002152 CDrA7r08         [17] 6763 	call	_DrawString
      002155 F1               [10] 6764 	pop	af
                                   6765 ;src\/GameLogic.h:276: Wait(60 * 3);
      002156 21 B4 00         [10] 6766 	ld	hl, #0x00b4
      002159 E3               [19] 6767 	ex	(sp),hl
      00215A CDr00r00         [17] 6768 	call	_Wait
                                   6769 ;src\/GameLogic.h:278: }
      00215D DD F9            [10] 6770 	ld	sp,ix
      00215F DD E1            [14] 6771 	pop	ix
      002161 C9               [10] 6772 	ret
      002162                       6773 ___str_6:
      002162 47 41 4D 45 20 4F 56  6774 	.ascii "GAME OVER"
             45 52
      00216B 00                    6775 	.db 0x00
                                   6776 ;src\/GameLogic.h:280: void TestCase() {
                                   6777 ;	---------------------------------
                                   6778 ; Function TestCase
                                   6779 ; ---------------------------------
      00216C                       6780 _TestCase::
                                   6781 ;src\/GameLogic.h:301: playfield[2][ 8] = TILE_GREEN;
      00216C 21r20r00         [10] 6782 	ld	hl, #(_playfield + 0x0020)
      00216F 36 04            [10] 6783 	ld	(hl), #0x04
                                   6784 ;src\/GameLogic.h:302: playfield[2][ 9] = TILE_BLUE;
      002171 21r21r00         [10] 6785 	ld	hl, #(_playfield + 0x0021)
      002174 36 0C            [10] 6786 	ld	(hl), #0x0c
                                   6787 ;src\/GameLogic.h:304: playfield[0][10] = TILE_BLUE;
      002176 21r0Ar00         [10] 6788 	ld	hl, #(_playfield + 0x000a)
      002179 36 0C            [10] 6789 	ld	(hl), #0x0c
                                   6790 ;src\/GameLogic.h:305: playfield[1][10] = TILE_BLUE;
      00217B 21r16r00         [10] 6791 	ld	hl, #(_playfield + 0x0016)
      00217E 36 0C            [10] 6792 	ld	(hl), #0x0c
                                   6793 ;src\/GameLogic.h:306: playfield[2][10] = TILE_RED;
      002180 21r22r00         [10] 6794 	ld	hl, #(_playfield + 0x0022)
      002183 36 08            [10] 6795 	ld	(hl), #0x08
                                   6796 ;src\/GameLogic.h:307: playfield[4][10] = TILE_RED;
      002185 21r3Ar00         [10] 6797 	ld	hl, #(_playfield + 0x003a)
      002188 36 08            [10] 6798 	ld	(hl), #0x08
                                   6799 ;src\/GameLogic.h:308: playfield[5][10] = TILE_BLUE;
      00218A 21r46r00         [10] 6800 	ld	hl, #(_playfield + 0x0046)
      00218D 36 0C            [10] 6801 	ld	(hl), #0x0c
                                   6802 ;src\/GameLogic.h:310: playfield[0][11] = TILE_GREEN;
      00218F 21r0Br00         [10] 6803 	ld	hl, #(_playfield + 0x000b)
      002192 36 04            [10] 6804 	ld	(hl), #0x04
                                   6805 ;src\/GameLogic.h:311: playfield[1][11] = TILE_GREEN;
      002194 21r17r00         [10] 6806 	ld	hl, #(_playfield + 0x0017)
      002197 36 04            [10] 6807 	ld	(hl), #0x04
                                   6808 ;src\/GameLogic.h:312: playfield[2][11] = TILE_RED;
      002199 21r23r00         [10] 6809 	ld	hl, #(_playfield + 0x0023)
      00219C 36 08            [10] 6810 	ld	(hl), #0x08
                                   6811 ;src\/GameLogic.h:313: playfield[3][11] = EMPTY;
      00219E 21r2Fr00         [10] 6812 	ld	hl, #(_playfield + 0x002f)
      0021A1 36 00            [10] 6813 	ld	(hl), #0x00
                                   6814 ;src\/GameLogic.h:314: playfield[4][11] = TILE_RED;
      0021A3 21r3Br00         [10] 6815 	ld	hl, #(_playfield + 0x003b)
      0021A6 36 08            [10] 6816 	ld	(hl), #0x08
                                   6817 ;src\/GameLogic.h:315: playfield[5][11] = TILE_RED;
      0021A8 21r47r00         [10] 6818 	ld	hl, #(_playfield + 0x0047)
      0021AB 36 08            [10] 6819 	ld	(hl), #0x08
                                   6820 ;src\/GameLogic.h:317: topPiece = TILE_BLUE;
      0021AD 3E 0C            [ 7] 6821 	ld	a, #0x0c
      0021AF 32r90r00         [13] 6822 	ld	(#_topPiece), a
                                   6823 ;src\/GameLogic.h:318: midPiece = TILE_RED;
                                   6824 ;src\/GameLogic.h:319: bottomPiece = TILE_RED;
      0021B2 3E 08            [ 7] 6825 	ld	a,#0x08
      0021B4 32r91r00         [13] 6826 	ld	(#_midPiece),a
      0021B7 32r92r00         [13] 6827 	ld	(#_bottomPiece), a
                                   6828 ;src\/GameLogic.h:320: }
      0021BA C9               [10] 6829 	ret
                                   6830 ;src\/GameLogic.h:322: void InitGame() {
                                   6831 ;	---------------------------------
                                   6832 ; Function InitGame
                                   6833 ; ---------------------------------
      0021BB                       6834 _InitGame::
                                   6835 ;src\/GameLogic.h:324: gameOver = FALSE;
      0021BB 21r00r00         [10] 6836 	ld	hl, #_gameOver
      0021BE 36 00            [10] 6837 	ld	(hl), #0x00
                                   6838 ;src\/GameLogic.h:325: line = INITIAL_LINE;
      0021C0 21r02r00         [10] 6839 	ld	hl, #_line
      0021C3 36 00            [10] 6840 	ld	(hl), #0x00
                                   6841 ;src\/GameLogic.h:326: col = INITIAL_COL;
      0021C5 21r01r00         [10] 6842 	ld	hl, #_col
      0021C8 36 02            [10] 6843 	ld	(hl), #0x02
                                   6844 ;src\/GameLogic.h:327: blocksRemoved = 0;
      0021CA 21 00 00         [10] 6845 	ld	hl, #0x0000
      0021CD 22r04r00         [16] 6846 	ld	(_blocksRemoved), hl
                                   6847 ;src\/GameLogic.h:328: level = 1;
      0021D0 21r06r00         [10] 6848 	ld	hl, #_level
      0021D3 36 01            [10] 6849 	ld	(hl), #0x01
                                   6850 ;src\/GameLogic.h:329: newLevel = FALSE;
      0021D5 21r07r00         [10] 6851 	ld	hl, #_newLevel
      0021D8 36 00            [10] 6852 	ld	(hl), #0x00
                                   6853 ;src\/GameLogic.h:330: speed = 60;
      0021DA 21r93r00         [10] 6854 	ld	hl, #_speed
      0021DD 36 3C            [10] 6855 	ld	(hl), #0x3c
                                   6856 ;src\/GameLogic.h:332: InitVRAM();
      0021DF CDrE5r0F         [17] 6857 	call	_InitVRAM
                                   6858 ;src\/GameLogic.h:335: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      0021E2 3Ar08r00         [13] 6859 	ld	a, (#_rndSeed + 0)
      0021E5 5F               [ 4] 6860 	ld	e, a
      0021E6 3A 9E FC         [13] 6861 	ld	a, (#_JIFFY + 0)
      0021E9 67               [ 4] 6862 	ld	h, a
      0021EA 2E 00            [ 7] 6863 	ld	l, #0x00
      0021EC 55               [ 4] 6864 	ld	d, l
      0021ED 06 08            [ 7] 6865 	ld	b, #0x08
      0021EF                       6866 00133$:
      0021EF 29               [11] 6867 	add	hl, hl
      0021F0 30 01            [12] 6868 	jr	NC, 00134$
      0021F2 19               [11] 6869 	add	hl, de
      0021F3                       6870 00134$:
      0021F3 10 FA            [13] 6871 	djnz	00133$
      0021F5 7D               [ 4] 6872 	ld	a, l
      0021F6 C6 63            [ 7] 6873 	add	a, #0x63
      0021F8 4F               [ 4] 6874 	ld	c, a
      0021F9 3Ar08r00         [13] 6875 	ld	a, (#_rndSeed + 0)
      0021FC 5F               [ 4] 6876 	ld	e, a
      0021FD 3A 9E FC         [13] 6877 	ld	a, (#_JIFFY + 0)
      002200 67               [ 4] 6878 	ld	h, a
      002201 2E 00            [ 7] 6879 	ld	l, #0x00
      002203 55               [ 4] 6880 	ld	d, l
      002204 06 08            [ 7] 6881 	ld	b, #0x08
      002206                       6882 00135$:
      002206 29               [11] 6883 	add	hl, hl
      002207 30 01            [12] 6884 	jr	NC, 00136$
      002209 19               [11] 6885 	add	hl, de
      00220A                       6886 00136$:
      00220A 10 FA            [13] 6887 	djnz	00135$
      00220C 79               [ 4] 6888 	ld	a, c
      00220D F5               [11] 6889 	push	af
      00220E 7D               [ 4] 6890 	ld	a, l
      00220F 33               [ 6] 6891 	inc	sp
      002210 F5               [11] 6892 	push	af
      002211 33               [ 6] 6893 	inc	sp
      002212 3Ar08r00         [13] 6894 	ld	a,(#_rndSeed + 0)
      002215 F5               [11] 6895 	push	af
      002216 33               [ 6] 6896 	inc	sp
      002217 CDr50r00         [17] 6897 	call	_InitRnd
      00221A F1               [10] 6898 	pop	af
      00221B 33               [ 6] 6899 	inc	sp
                                   6900 ;src\/GameLogic.h:338: RandomPiece();
      00221C CDr72r1C         [17] 6901 	call	_RandomPiece
                                   6902 ;src\/GameLogic.h:341: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00221F 0E 00            [ 7] 6903 	ld	c, #0x00
      002221                       6904 00107$:
      002221 79               [ 4] 6905 	ld	a, c
      002222 D6 0C            [ 7] 6906 	sub	a, #0x0c
      002224 30 20            [12] 6907 	jr	NC, 00102$
                                   6908 ;src\/GameLogic.h:342: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002226 06 00            [ 7] 6909 	ld	b, #0x00
      002228                       6910 00104$:
      002228 78               [ 4] 6911 	ld	a, b
      002229 D6 06            [ 7] 6912 	sub	a, #0x06
      00222B 30 16            [12] 6913 	jr	NC, 00108$
                                   6914 ;src\/GameLogic.h:343: playfield[col][line] = EMPTY;
      00222D 58               [ 4] 6915 	ld	e, b
      00222E 16 00            [ 7] 6916 	ld	d, #0x00
      002230 6B               [ 4] 6917 	ld	l, e
      002231 62               [ 4] 6918 	ld	h, d
      002232 29               [11] 6919 	add	hl, hl
      002233 19               [11] 6920 	add	hl, de
      002234 29               [11] 6921 	add	hl, hl
      002235 29               [11] 6922 	add	hl, hl
      002236 11r00r00         [10] 6923 	ld	de, #_playfield
      002239 19               [11] 6924 	add	hl, de
      00223A 59               [ 4] 6925 	ld	e, c
      00223B 16 00            [ 7] 6926 	ld	d, #0x00
      00223D 19               [11] 6927 	add	hl, de
      00223E 36 00            [10] 6928 	ld	(hl), #0x00
                                   6929 ;src\/GameLogic.h:342: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002240 04               [ 4] 6930 	inc	b
      002241 18 E5            [12] 6931 	jr	00104$
      002243                       6932 00108$:
                                   6933 ;src\/GameLogic.h:341: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002243 0C               [ 4] 6934 	inc	c
      002244 18 DB            [12] 6935 	jr	00107$
      002246                       6936 00102$:
                                   6937 ;src\/GameLogic.h:348: TestCase();
      002246 CDr6Cr21         [17] 6938 	call	_TestCase
                                   6939 ;src\/GameLogic.h:350: DrawBackground();
      002249 CDrBCr0C         [17] 6940 	call	_DrawBackground
                                   6941 ;src\/GameLogic.h:352: DrawPlayfield();
      00224C CDr5Fr13         [17] 6942 	call	_DrawPlayfield
                                   6943 ;src\/GameLogic.h:354: DrawScore();
      00224F CDr35r0B         [17] 6944 	call	_DrawScore
                                   6945 ;src\/GameLogic.h:356: GameLoop();
                                   6946 ;src\/GameLogic.h:357: }
      002252 C3r92r1D         [10] 6947 	jp	_GameLoop
                                   6948 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6949 ;	---------------------------------
                                   6950 ; Function ChangeFontColor
                                   6951 ; ---------------------------------
      002255                       6952 _ChangeFontColor::
                                   6953 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002255 21 02 00         [10] 6954 	ld	hl, #2
      002258 39               [11] 6955 	add	hl, sp
      002259 7E               [ 7] 6956 	ld	a, (hl)
      00225A F5               [11] 6957 	push	af
      00225B 33               [ 6] 6958 	inc	sp
      00225C 21 00 03         [10] 6959 	ld	hl, #0x0300
      00225F E5               [11] 6960 	push	hl
      002260 21 78 21         [10] 6961 	ld	hl, #0x2178
      002263 E5               [11] 6962 	push	hl
      002264 CDr00r00         [17] 6963 	call	_FILVRM
      002267 F1               [10] 6964 	pop	af
      002268 F1               [10] 6965 	pop	af
      002269 33               [ 6] 6966 	inc	sp
                                   6967 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00226A 21 02 00         [10] 6968 	ld	hl, #2
      00226D 39               [11] 6969 	add	hl, sp
      00226E 7E               [ 7] 6970 	ld	a, (hl)
      00226F F5               [11] 6971 	push	af
      002270 33               [ 6] 6972 	inc	sp
      002271 21 00 03         [10] 6973 	ld	hl, #0x0300
      002274 E5               [11] 6974 	push	hl
      002275 21 78 29         [10] 6975 	ld	hl, #0x2978
      002278 E5               [11] 6976 	push	hl
      002279 CDr00r00         [17] 6977 	call	_FILVRM
      00227C F1               [10] 6978 	pop	af
      00227D F1               [10] 6979 	pop	af
      00227E 33               [ 6] 6980 	inc	sp
                                   6981 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00227F 21 02 00         [10] 6982 	ld	hl, #2
      002282 39               [11] 6983 	add	hl, sp
      002283 7E               [ 7] 6984 	ld	a, (hl)
      002284 F5               [11] 6985 	push	af
      002285 33               [ 6] 6986 	inc	sp
      002286 21 00 03         [10] 6987 	ld	hl, #0x0300
      002289 E5               [11] 6988 	push	hl
      00228A 21 78 31         [10] 6989 	ld	hl, #0x3178
      00228D E5               [11] 6990 	push	hl
      00228E CDr00r00         [17] 6991 	call	_FILVRM
      002291 F1               [10] 6992 	pop	af
      002292 F1               [10] 6993 	pop	af
      002293 33               [ 6] 6994 	inc	sp
                                   6995 ;src\/Intro.h:7: }
      002294 C9               [10] 6996 	ret
                                   6997 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6998 ;	---------------------------------
                                   6999 ; Function ScrollDownFont
                                   7000 ; ---------------------------------
      002295                       7001 _ScrollDownFont::
      002295 DD E5            [15] 7002 	push	ix
      002297 DD 21 00 00      [14] 7003 	ld	ix,#0
      00229B DD 39            [15] 7004 	add	ix,sp
      00229D F5               [11] 7005 	push	af
                                   7006 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00229E 11 78 09         [10] 7007 	ld	de, #0x0978
      0022A1                       7008 00107$:
      0022A1 7B               [ 4] 7009 	ld	a, e
      0022A2 D6 78            [ 7] 7010 	sub	a, #0x78
      0022A4 7A               [ 4] 7011 	ld	a, d
      0022A5 DE 0C            [ 7] 7012 	sbc	a, #0x0c
      0022A7 30 44            [12] 7013 	jr	NC, 00109$
                                   7014 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0022A9 33               [ 6] 7015 	inc	sp
      0022AA 33               [ 6] 7016 	inc	sp
      0022AB D5               [11] 7017 	push	de
      0022AC DD 7E FE         [19] 7018 	ld	a, -2 (ix)
      0022AF C6 07            [ 7] 7019 	add	a, #0x07
      0022B1 4F               [ 4] 7020 	ld	c, a
      0022B2 DD 7E FF         [19] 7021 	ld	a, -1 (ix)
      0022B5 CE 00            [ 7] 7022 	adc	a, #0x00
      0022B7 47               [ 4] 7023 	ld	b, a
      0022B8                       7024 00104$:
      0022B8 78               [ 4] 7025 	ld	a, b
      0022B9 B1               [ 4] 7026 	or	a, c
      0022BA 28 1A            [12] 7027 	jr	Z, 00101$
                                   7028 ;src\/Intro.h:27: value = RDVRM(j-1);
      0022BC 69               [ 4] 7029 	ld	l, c
      0022BD 60               [ 4] 7030 	ld	h, b
      0022BE 2B               [ 6] 7031 	dec	hl
      0022BF C5               [11] 7032 	push	bc
      0022C0 D5               [11] 7033 	push	de
      0022C1 CDr00r00         [17] 7034 	call	_RDVRM
      0022C4 D1               [10] 7035 	pop	de
      0022C5 C1               [10] 7036 	pop	bc
                                   7037 ;src\/Intro.h:29: WRTVRM(j, 0);
      0022C6 C5               [11] 7038 	push	bc
      0022C7 D5               [11] 7039 	push	de
      0022C8 AF               [ 4] 7040 	xor	a, a
      0022C9 F5               [11] 7041 	push	af
      0022CA 33               [ 6] 7042 	inc	sp
      0022CB C5               [11] 7043 	push	bc
      0022CC CDr00r00         [17] 7044 	call	_WRTVRM
      0022CF F1               [10] 7045 	pop	af
      0022D0 33               [ 6] 7046 	inc	sp
      0022D1 D1               [10] 7047 	pop	de
      0022D2 C1               [10] 7048 	pop	bc
                                   7049 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0022D3 0B               [ 6] 7050 	dec	bc
      0022D4 18 E2            [12] 7051 	jr	00104$
      0022D6                       7052 00101$:
                                   7053 ;src\/Intro.h:31: WRTVRM(i, 0);
      0022D6 AF               [ 4] 7054 	xor	a, a
      0022D7 F5               [11] 7055 	push	af
      0022D8 33               [ 6] 7056 	inc	sp
      0022D9 D5               [11] 7057 	push	de
      0022DA CDr00r00         [17] 7058 	call	_WRTVRM
      0022DD F1               [10] 7059 	pop	af
      0022DE 33               [ 6] 7060 	inc	sp
                                   7061 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0022DF DD 7E FE         [19] 7062 	ld	a, -2 (ix)
      0022E2 C6 08            [ 7] 7063 	add	a, #0x08
      0022E4 5F               [ 4] 7064 	ld	e, a
      0022E5 DD 7E FF         [19] 7065 	ld	a, -1 (ix)
      0022E8 CE 00            [ 7] 7066 	adc	a, #0x00
      0022EA 57               [ 4] 7067 	ld	d, a
      0022EB 18 B4            [12] 7068 	jr	00107$
      0022ED                       7069 00109$:
                                   7070 ;src\/Intro.h:35: }
      0022ED DD F9            [10] 7071 	ld	sp, ix
      0022EF DD E1            [14] 7072 	pop	ix
      0022F1 C9               [10] 7073 	ret
                                   7074 ;src\/Intro.h:37: void Intro() {
                                   7075 ;	---------------------------------
                                   7076 ; Function Intro
                                   7077 ; ---------------------------------
      0022F2                       7078 _Intro::
                                   7079 ;src\/Intro.h:41: InitVRAM();
      0022F2 CDrE5r0F         [17] 7080 	call	_InitVRAM
                                   7081 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      0022F5 11 0B 0B         [10] 7082 	ld	de, #0x0b0b
      0022F8 D5               [11] 7083 	push	de
      0022F9 21r67r23         [10] 7084 	ld	hl, #___str_7
      0022FC E5               [11] 7085 	push	hl
      0022FD CDrA7r08         [17] 7086 	call	_DrawString
      002300 F1               [10] 7087 	pop	af
      002301 F1               [10] 7088 	pop	af
                                   7089 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002302 11 09 0D         [10] 7090 	ld	de, #0x0d09
      002305 D5               [11] 7091 	push	de
      002306 21r71r23         [10] 7092 	ld	hl, #___str_8
      002309 E5               [11] 7093 	push	hl
      00230A CDrA7r08         [17] 7094 	call	_DrawString
      00230D F1               [10] 7095 	pop	af
                                   7096 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00230E 26 F0            [ 7] 7097 	ld	h,#0xf0
      002310 E3               [19] 7098 	ex	(sp),hl
      002311 33               [ 6] 7099 	inc	sp
      002312 CDr55r22         [17] 7100 	call	_ChangeFontColor
      002315 33               [ 6] 7101 	inc	sp
                                   7102 ;src\/Intro.h:56: Wait(2 * 60);
      002316 21 78 00         [10] 7103 	ld	hl, #0x0078
      002319 E5               [11] 7104 	push	hl
      00231A CDr00r00         [17] 7105 	call	_Wait
      00231D F1               [10] 7106 	pop	af
                                   7107 ;src\/Intro.h:58: while(counter++ < 20) {
      00231E 0E 00            [ 7] 7108 	ld	c, #0x00
      002320                       7109 00112$:
      002320 79               [ 4] 7110 	ld	a, c
      002321 D6 14            [ 7] 7111 	sub	a, #0x14
      002323 D0               [11] 7112 	ret	NC
      002324 0C               [ 4] 7113 	inc	c
                                   7114 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002325 21 9E FC         [10] 7115 	ld	hl, #_JIFFY
      002328 46               [ 7] 7116 	ld	b, (hl)
                                   7117 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002329                       7118 00101$:
      002329 58               [ 4] 7119 	ld	e, b
      00232A 16 00            [ 7] 7120 	ld	d, #0x00
      00232C 2A 9E FC         [16] 7121 	ld	hl, (_JIFFY)
      00232F BF               [ 4] 7122 	cp	a, a
      002330 ED 52            [15] 7123 	sbc	hl, de
      002332 28 F5            [12] 7124 	jr	Z, 00101$
                                   7125 ;src\/Intro.h:63: if(counter == 15) {
      002334 79               [ 4] 7126 	ld	a, c
      002335 D6 0F            [ 7] 7127 	sub	a, #0x0f
      002337 20 0C            [12] 7128 	jr	NZ, 00110$
                                   7129 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002339 C5               [11] 7130 	push	bc
      00233A 3E 40            [ 7] 7131 	ld	a, #0x40
      00233C F5               [11] 7132 	push	af
      00233D 33               [ 6] 7133 	inc	sp
      00233E CDr55r22         [17] 7134 	call	_ChangeFontColor
      002341 33               [ 6] 7135 	inc	sp
      002342 C1               [10] 7136 	pop	bc
      002343 18 DB            [12] 7137 	jr	00112$
      002345                       7138 00110$:
                                   7139 ;src\/Intro.h:66: else if(counter == 10) {
      002345 79               [ 4] 7140 	ld	a, c
      002346 D6 0A            [ 7] 7141 	sub	a, #0x0a
      002348 20 0C            [12] 7142 	jr	NZ, 00107$
                                   7143 ;src\/Intro.h:67: ChangeFontColor(0x50);
      00234A C5               [11] 7144 	push	bc
      00234B 3E 50            [ 7] 7145 	ld	a, #0x50
      00234D F5               [11] 7146 	push	af
      00234E 33               [ 6] 7147 	inc	sp
      00234F CDr55r22         [17] 7148 	call	_ChangeFontColor
      002352 33               [ 6] 7149 	inc	sp
      002353 C1               [10] 7150 	pop	bc
      002354 18 CA            [12] 7151 	jr	00112$
      002356                       7152 00107$:
                                   7153 ;src\/Intro.h:69: else if(counter == 5) {
      002356 79               [ 4] 7154 	ld	a, c
      002357 D6 05            [ 7] 7155 	sub	a, #0x05
      002359 20 C5            [12] 7156 	jr	NZ, 00112$
                                   7157 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      00235B C5               [11] 7158 	push	bc
      00235C 3E E0            [ 7] 7159 	ld	a, #0xe0
      00235E F5               [11] 7160 	push	af
      00235F 33               [ 6] 7161 	inc	sp
      002360 CDr55r22         [17] 7162 	call	_ChangeFontColor
      002363 33               [ 6] 7163 	inc	sp
      002364 C1               [10] 7164 	pop	bc
                                   7165 ;src\/Intro.h:140: }
      002365 18 B9            [12] 7166 	jr	00112$
      002367                       7167 ___str_7:
      002367 41 20 47 41 4D 45 20  7168 	.ascii "A GAME BY"
             42 59
      002370 00                    7169 	.db 0x00
      002371                       7170 ___str_8:
      002371 41 4E 44 52 45 20 42  7171 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      00237F 00                    7172 	.db 0x00
                                   7173 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7174 ;	---------------------------------
                                   7175 ; Function SetBlock
                                   7176 ; ---------------------------------
      002380                       7177 _SetBlock::
      002380 DD E5            [15] 7178 	push	ix
      002382 DD 21 00 00      [14] 7179 	ld	ix,#0
      002386 DD 39            [15] 7180 	add	ix,sp
                                   7181 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002388 DD 7E 04         [19] 7182 	ld	a, 4 (ix)
      00238B 06 00            [ 7] 7183 	ld	b, #0x00
      00238D 4F               [ 4] 7184 	ld	c, a
      00238E 78               [ 4] 7185 	ld	a, b
      00238F C6 18            [ 7] 7186 	add	a, #0x18
      002391 47               [ 4] 7187 	ld	b, a
      002392 DD 6E 05         [19] 7188 	ld	l, 5 (ix)
      002395 26 00            [ 7] 7189 	ld	h, #0x00
      002397 29               [11] 7190 	add	hl, hl
      002398 29               [11] 7191 	add	hl, hl
      002399 29               [11] 7192 	add	hl, hl
      00239A 29               [11] 7193 	add	hl, hl
      00239B 29               [11] 7194 	add	hl, hl
      00239C 09               [11] 7195 	add	hl, bc
      00239D DD 7E 06         [19] 7196 	ld	a, 6 (ix)
      0023A0 F5               [11] 7197 	push	af
      0023A1 33               [ 6] 7198 	inc	sp
      0023A2 E5               [11] 7199 	push	hl
      0023A3 CDr00r00         [17] 7200 	call	_WRTVRM
      0023A6 F1               [10] 7201 	pop	af
      0023A7 33               [ 6] 7202 	inc	sp
                                   7203 ;src\/Title.h:16: }
      0023A8 DD E1            [14] 7204 	pop	ix
      0023AA C9               [10] 7205 	ret
                                   7206 ;src\/Title.h:18: void TitleScreen() {
                                   7207 ;	---------------------------------
                                   7208 ; Function TitleScreen
                                   7209 ; ---------------------------------
      0023AB                       7210 _TitleScreen::
      0023AB DD E5            [15] 7211 	push	ix
      0023AD DD 21 00 00      [14] 7212 	ld	ix,#0
      0023B1 DD 39            [15] 7213 	add	ix,sp
      0023B3 21 EB FF         [10] 7214 	ld	hl, #-21
      0023B6 39               [11] 7215 	add	hl, sp
      0023B7 F9               [ 6] 7216 	ld	sp, hl
                                   7217 ;src\/Title.h:19: byte colorIndex = 0;
      0023B8 0E 00            [ 7] 7218 	ld	c, #0x00
                                   7219 ;src\/Title.h:52: const char blocks[] = {
      0023BA 21 00 00         [10] 7220 	ld	hl, #0
      0023BD 39               [11] 7221 	add	hl, sp
      0023BE EB               [ 4] 7222 	ex	de, hl
      0023BF 3E 8E            [ 7] 7223 	ld	a, #0x8e
      0023C1 12               [ 7] 7224 	ld	(de), a
      0023C2 6B               [ 4] 7225 	ld	l, e
      0023C3 62               [ 4] 7226 	ld	h, d
      0023C4 23               [ 6] 7227 	inc	hl
      0023C5 36 8F            [10] 7228 	ld	(hl), #0x8f
      0023C7 6B               [ 4] 7229 	ld	l, e
      0023C8 62               [ 4] 7230 	ld	h, d
      0023C9 23               [ 6] 7231 	inc	hl
      0023CA 23               [ 6] 7232 	inc	hl
      0023CB 36 90            [10] 7233 	ld	(hl), #0x90
      0023CD 6B               [ 4] 7234 	ld	l, e
      0023CE 62               [ 4] 7235 	ld	h, d
      0023CF 23               [ 6] 7236 	inc	hl
      0023D0 23               [ 6] 7237 	inc	hl
      0023D1 23               [ 6] 7238 	inc	hl
      0023D2 36 91            [10] 7239 	ld	(hl), #0x91
      0023D4 21 04 00         [10] 7240 	ld	hl, #0x0004
      0023D7 19               [11] 7241 	add	hl, de
      0023D8 36 92            [10] 7242 	ld	(hl), #0x92
      0023DA 21 05 00         [10] 7243 	ld	hl, #0x0005
      0023DD 19               [11] 7244 	add	hl, de
      0023DE 36 93            [10] 7245 	ld	(hl), #0x93
      0023E0 21 06 00         [10] 7246 	ld	hl, #0x0006
      0023E3 19               [11] 7247 	add	hl, de
      0023E4 36 94            [10] 7248 	ld	(hl), #0x94
                                   7249 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      0023E6 21 07 00         [10] 7250 	ld	hl, #7
      0023E9 39               [11] 7251 	add	hl, sp
      0023EA DD 75 F6         [19] 7252 	ld	-10 (ix), l
      0023ED DD 74 F7         [19] 7253 	ld	-9 (ix), h
      0023F0 36 8E            [10] 7254 	ld	(hl), #0x8e
      0023F2 DD 6E F6         [19] 7255 	ld	l, -10 (ix)
      0023F5 DD 66 F7         [19] 7256 	ld	h, -9 (ix)
      0023F8 23               [ 6] 7257 	inc	hl
      0023F9 36 90            [10] 7258 	ld	(hl), #0x90
      0023FB DD 6E F6         [19] 7259 	ld	l, -10 (ix)
      0023FE DD 66 F7         [19] 7260 	ld	h, -9 (ix)
      002401 23               [ 6] 7261 	inc	hl
      002402 23               [ 6] 7262 	inc	hl
      002403 36 92            [10] 7263 	ld	(hl), #0x92
      002405 DD 6E F6         [19] 7264 	ld	l, -10 (ix)
      002408 DD 66 F7         [19] 7265 	ld	h, -9 (ix)
      00240B 23               [ 6] 7266 	inc	hl
      00240C 23               [ 6] 7267 	inc	hl
      00240D 23               [ 6] 7268 	inc	hl
      00240E 36 94            [10] 7269 	ld	(hl), #0x94
                                   7270 ;src\/Title.h:65: InitVRAM();
      002410 C5               [11] 7271 	push	bc
      002411 D5               [11] 7272 	push	de
      002412 CDrE5r0F         [17] 7273 	call	_InitVRAM
      002415 21 00 01         [10] 7274 	ld	hl, #0x0100
      002418 E5               [11] 7275 	push	hl
      002419 21r92r25         [10] 7276 	ld	hl, #_TitleScreen_title_65536_280
      00241C E5               [11] 7277 	push	hl
      00241D 21 00 18         [10] 7278 	ld	hl, #0x1800
      002420 E5               [11] 7279 	push	hl
      002421 CDr00r00         [17] 7280 	call	_LDIRVM
      002424 21 06 00         [10] 7281 	ld	hl, #6
      002427 39               [11] 7282 	add	hl, sp
      002428 F9               [ 6] 7283 	ld	sp, hl
      002429 11 05 0D         [10] 7284 	ld	de, #0x0d05
      00242C D5               [11] 7285 	push	de
      00242D 21r92r26         [10] 7286 	ld	hl, #___str_9
      002430 E5               [11] 7287 	push	hl
      002431 CDrA7r08         [17] 7288 	call	_DrawString
      002434 F1               [10] 7289 	pop	af
      002435 26 17            [ 7] 7290 	ld	h,#0x17
      002437 E3               [19] 7291 	ex	(sp),hl
      002438 33               [ 6] 7292 	inc	sp
      002439 AF               [ 4] 7293 	xor	a, a
      00243A F5               [11] 7294 	push	af
      00243B 33               [ 6] 7295 	inc	sp
      00243C 21rA9r26         [10] 7296 	ld	hl, #___str_10
      00243F E5               [11] 7297 	push	hl
      002440 CDrA7r08         [17] 7298 	call	_DrawString
      002443 F1               [10] 7299 	pop	af
      002444 F1               [10] 7300 	pop	af
      002445 11 19 17         [10] 7301 	ld	de, #0x1719
      002448 D5               [11] 7302 	push	de
      002449 21rBEr26         [10] 7303 	ld	hl, #___str_11
      00244C E5               [11] 7304 	push	hl
      00244D CDrA7r08         [17] 7305 	call	_DrawString
      002450 F1               [10] 7306 	pop	af
      002451 F1               [10] 7307 	pop	af
      002452 D1               [10] 7308 	pop	de
      002453 C1               [10] 7309 	pop	bc
                                   7310 ;src\/Title.h:73: while(TRUE) {
      002454                       7311 00120$:
                                   7312 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002454 DD 36 FD 00      [19] 7313 	ld	-3 (ix), #0
                                   7314 ;src\/Title.h:78: word counter = 0;
      002458 AF               [ 4] 7315 	xor	a, a
      002459 DD 77 FE         [19] 7316 	ld	-2 (ix), a
      00245C DD 77 FF         [19] 7317 	ld	-1 (ix), a
                                   7318 ;src\/Title.h:88: do {
      00245F                       7319 00106$:
                                   7320 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      00245F C5               [11] 7321 	push	bc
      002460 D5               [11] 7322 	push	de
      002461 11 1F 1F         [10] 7323 	ld	de, #0x1f1f
      002464 D5               [11] 7324 	push	de
      002465 CDrD9r00         [17] 7325 	call	_GetRandomInInterval
      002468 F1               [10] 7326 	pop	af
                                   7327 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002469 DD 75 F8         [19] 7328 	ld	-8 (ix), l
      00246C 11 07 07         [10] 7329 	ld	de, #0x0707
      00246F D5               [11] 7330 	push	de
      002470 CDrD9r00         [17] 7331 	call	_GetRandomInInterval
      002473 F1               [10] 7332 	pop	af
      002474 D1               [10] 7333 	pop	de
      002475 C1               [10] 7334 	pop	bc
      002476 DD 75 F9         [19] 7335 	ld	-7 (ix), l
                                   7336 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002479 DD 6E F8         [19] 7337 	ld	l, -8 (ix)
      00247C 3E 00            [ 7] 7338 	ld	a, #0x00
      00247E C6 18            [ 7] 7339 	add	a, #0x18
      002480 67               [ 4] 7340 	ld	h, a
      002481 DD 7E F9         [19] 7341 	ld	a, -7 (ix)
      002484 06 00            [ 7] 7342 	ld	b, #0x00
      002486 87               [ 4] 7343 	add	a, a
      002487 CB 10            [ 8] 7344 	rl	b
      002489 87               [ 4] 7345 	add	a, a
      00248A CB 10            [ 8] 7346 	rl	b
      00248C 87               [ 4] 7347 	add	a, a
      00248D CB 10            [ 8] 7348 	rl	b
      00248F 87               [ 4] 7349 	add	a, a
      002490 CB 10            [ 8] 7350 	rl	b
      002492 87               [ 4] 7351 	add	a, a
      002493 CB 10            [ 8] 7352 	rl	b
      002495 85               [ 4] 7353 	add	a, l
      002496 6F               [ 4] 7354 	ld	l, a
      002497 78               [ 4] 7355 	ld	a, b
      002498 8C               [ 4] 7356 	adc	a, h
      002499 67               [ 4] 7357 	ld	h, a
      00249A C5               [11] 7358 	push	bc
      00249B D5               [11] 7359 	push	de
      00249C CDr00r00         [17] 7360 	call	_RDVRM
      00249F D1               [10] 7361 	pop	de
      0024A0 C1               [10] 7362 	pop	bc
      0024A1 DD 75 FA         [19] 7363 	ld	-6 (ix), l
                                   7364 ;src\/Title.h:102: if(counter++ > 1000) {
      0024A4 DD 46 FE         [19] 7365 	ld	b, -2 (ix)
      0024A7 DD 6E FF         [19] 7366 	ld	l, -1 (ix)
      0024AA DD 34 FE         [23] 7367 	inc	-2 (ix)
      0024AD 20 03            [12] 7368 	jr	NZ, 00193$
      0024AF DD 34 FF         [23] 7369 	inc	-1 (ix)
      0024B2                       7370 00193$:
      0024B2 3E E8            [ 7] 7371 	ld	a, #0xe8
      0024B4 B8               [ 4] 7372 	cp	a, b
      0024B5 3E 03            [ 7] 7373 	ld	a, #0x03
      0024B7 9D               [ 4] 7374 	sbc	a, l
      0024B8 30 0F            [12] 7375 	jr	NC, 00107$
                                   7376 ;src\/Title.h:103: colorIndex++;
      0024BA 0C               [ 4] 7377 	inc	c
                                   7378 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0024BB 79               [ 4] 7379 	ld	a, c
      0024BC D6 03            [ 7] 7380 	sub	a, #0x03
      0024BE 38 02            [12] 7381 	jr	C, 00102$
      0024C0 0E 00            [ 7] 7382 	ld	c, #0x00
      0024C2                       7383 00102$:
                                   7384 ;src\/Title.h:119: counter = 0;
      0024C2 AF               [ 4] 7385 	xor	a, a
      0024C3 DD 77 FE         [19] 7386 	ld	-2 (ix), a
      0024C6 DD 77 FF         [19] 7387 	ld	-1 (ix), a
      0024C9                       7388 00107$:
                                   7389 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0024C9 DD 7E FA         [19] 7390 	ld	a, -6 (ix)
      0024CC B7               [ 4] 7391 	or	a, a
      0024CD 28 90            [12] 7392 	jr	Z, 00106$
      0024CF 79               [ 4] 7393 	ld	a, c
      0024D0 3C               [ 4] 7394 	inc	a
      0024D1 F5               [11] 7395 	push	af
      0024D2 17               [ 4] 7396 	rla
      0024D3 9F               [ 4] 7397 	sbc	a, a
      0024D4 47               [ 4] 7398 	ld	b, a
      0024D5 F1               [10] 7399 	pop	af
      0024D6 DD 86 F6         [19] 7400 	add	a, -10 (ix)
      0024D9 DD 77 FB         [19] 7401 	ld	-5 (ix), a
      0024DC 78               [ 4] 7402 	ld	a, b
      0024DD DD 8E F7         [19] 7403 	adc	a, -9 (ix)
      0024E0 DD 77 FC         [19] 7404 	ld	-4 (ix), a
      0024E3 DD 6E FB         [19] 7405 	ld	l, -5 (ix)
      0024E6 DD 66 FC         [19] 7406 	ld	h, -4 (ix)
      0024E9 46               [ 7] 7407 	ld	b, (hl)
      0024EA DD 7E FA         [19] 7408 	ld	a, -6 (ix)
      0024ED 90               [ 4] 7409 	sub	a, b
      0024EE CAr5Fr24         [10] 7410 	jp	Z,00106$
                                   7411 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      0024F1 06 00            [ 7] 7412 	ld	b, #0x00
      0024F3                       7413 00123$:
      0024F3 78               [ 4] 7414 	ld	a, b
      0024F4 D6 0A            [ 7] 7415 	sub	a, #0x0a
      0024F6 30 79            [12] 7416 	jr	NC, 00118$
                                   7417 ;src\/Title.h:140: word lastJiffy = JIFFY;
      0024F8 2A 9E FC         [16] 7418 	ld	hl, (_JIFFY)
      0024FB DD 75 FE         [19] 7419 	ld	-2 (ix), l
      0024FE DD 74 FF         [19] 7420 	ld	-1 (ix), h
                                   7421 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002501                       7422 00109$:
      002501 FD 21 9E FC      [14] 7423 	ld	iy, #_JIFFY
      002505 FD 7E 00         [19] 7424 	ld	a, 0 (iy)
      002508 DD 96 FE         [19] 7425 	sub	a, -2 (ix)
      00250B 20 08            [12] 7426 	jr	NZ, 00195$
      00250D FD 7E 01         [19] 7427 	ld	a, 1 (iy)
      002510 DD 96 FF         [19] 7428 	sub	a, -1 (ix)
      002513 28 EC            [12] 7429 	jr	Z, 00109$
      002515                       7430 00195$:
                                   7431 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002515 DD 6E FD         [19] 7432 	ld	l, -3 (ix)
      002518 26 00            [ 7] 7433 	ld	h, #0x00
      00251A 19               [11] 7434 	add	hl, de
      00251B 7E               [ 7] 7435 	ld	a, (hl)
      00251C C5               [11] 7436 	push	bc
      00251D D5               [11] 7437 	push	de
      00251E F5               [11] 7438 	push	af
      00251F 33               [ 6] 7439 	inc	sp
      002520 DD 66 F9         [19] 7440 	ld	h, -7 (ix)
      002523 DD 6E F8         [19] 7441 	ld	l, -8 (ix)
      002526 E5               [11] 7442 	push	hl
      002527 CDr80r23         [17] 7443 	call	_SetBlock
      00252A F1               [10] 7444 	pop	af
      00252B 33               [ 6] 7445 	inc	sp
      00252C D1               [10] 7446 	pop	de
      00252D C1               [10] 7447 	pop	bc
                                   7448 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00252E DD 7E FD         [19] 7449 	ld	a, -3 (ix)
      002531 DD 34 FD         [23] 7450 	inc	-3 (ix)
      002534 D6 07            [ 7] 7451 	sub	a, #0x07
      002536 38 04            [12] 7452 	jr	C, 00113$
      002538 DD 36 FD 00      [19] 7453 	ld	-3 (ix), #0
      00253C                       7454 00113$:
                                   7455 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      00253C C5               [11] 7456 	push	bc
      00253D D5               [11] 7457 	push	de
      00253E 2E 00            [ 7] 7458 	ld	l, #0x00
      002540 CDr00r00         [17] 7459 	call	_GTTRIG
                                   7460 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002543 DD 75 FF         [19] 7461 	ld	-1 (ix), l
      002546 2E 01            [ 7] 7462 	ld	l, #0x01
      002548 CDr00r00         [17] 7463 	call	_GTTRIG
      00254B D1               [10] 7464 	pop	de
      00254C C1               [10] 7465 	pop	bc
                                   7466 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      00254D E5               [11] 7467 	push	hl
      00254E C5               [11] 7468 	push	bc
      00254F D5               [11] 7469 	push	de
      002550 2E 03            [ 7] 7470 	ld	l, #0x03
      002552 CDr00r00         [17] 7471 	call	_GTTRIG
      002555 7D               [ 4] 7472 	ld	a, l
      002556 D1               [10] 7473 	pop	de
      002557 C1               [10] 7474 	pop	bc
      002558 E1               [10] 7475 	pop	hl
      002559 67               [ 4] 7476 	ld	h, a
                                   7477 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      00255A DD 7E FF         [19] 7478 	ld	a, -1 (ix)
      00255D 3C               [ 4] 7479 	inc	a
      00255E 28 06            [12] 7480 	jr	Z, 00114$
      002560 2C               [ 4] 7481 	inc	l
      002561 28 03            [12] 7482 	jr	Z, 00114$
      002563 24               [ 4] 7483 	inc	h
      002564 20 08            [12] 7484 	jr	NZ, 00124$
      002566                       7485 00114$:
                                   7486 ;src\/Title.h:168: rndSeed = JIFFY;
      002566 3A 9E FC         [13] 7487 	ld	a,(#_JIFFY + 0)
      002569 32r08r00         [13] 7488 	ld	(#_rndSeed), a
                                   7489 ;src\/Title.h:169: return;
      00256C 18 1F            [12] 7490 	jr	00125$
      00256E                       7491 00124$:
                                   7492 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00256E 04               [ 4] 7493 	inc	b
      00256F 18 82            [12] 7494 	jr	00123$
      002571                       7495 00118$:
                                   7496 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002571 DD 6E FB         [19] 7497 	ld	l, -5 (ix)
      002574 DD 66 FC         [19] 7498 	ld	h, -4 (ix)
      002577 7E               [ 7] 7499 	ld	a, (hl)
      002578 C5               [11] 7500 	push	bc
      002579 D5               [11] 7501 	push	de
      00257A F5               [11] 7502 	push	af
      00257B 33               [ 6] 7503 	inc	sp
      00257C DD 66 F9         [19] 7504 	ld	h, -7 (ix)
      00257F DD 6E F8         [19] 7505 	ld	l, -8 (ix)
      002582 E5               [11] 7506 	push	hl
      002583 CDr80r23         [17] 7507 	call	_SetBlock
      002586 F1               [10] 7508 	pop	af
      002587 33               [ 6] 7509 	inc	sp
      002588 D1               [10] 7510 	pop	de
      002589 C1               [10] 7511 	pop	bc
      00258A C3r54r24         [10] 7512 	jp	00120$
      00258D                       7513 00125$:
                                   7514 ;src\/Title.h:176: }
      00258D DD F9            [10] 7515 	ld	sp, ix
      00258F DD E1            [14] 7516 	pop	ix
      002591 C9               [10] 7517 	ret
      002592                       7518 _TitleScreen_title_65536_280:
      002592 00                    7519 	.db #0x00	; 0
      002593 00                    7520 	.db #0x00	; 0
      002594 00                    7521 	.db #0x00	; 0
      002595 00                    7522 	.db #0x00	; 0
      002596 8E                    7523 	.db #0x8e	; 142
      002597 8E                    7524 	.db #0x8e	; 142
      002598 8E                    7525 	.db #0x8e	; 142
      002599 8E                    7526 	.db #0x8e	; 142
      00259A 00                    7527 	.db #0x00	; 0
      00259B 8E                    7528 	.db #0x8e	; 142
      00259C 8E                    7529 	.db #0x8e	; 142
      00259D 8E                    7530 	.db #0x8e	; 142
      00259E 8E                    7531 	.db #0x8e	; 142
      00259F 8E                    7532 	.db #0x8e	; 142
      0025A0 8E                    7533 	.db #0x8e	; 142
      0025A1 00                    7534 	.db #0x00	; 0
      0025A2 00                    7535 	.db #0x00	; 0
      0025A3 8E                    7536 	.db #0x8e	; 142
      0025A4 8E                    7537 	.db #0x8e	; 142
      0025A5 00                    7538 	.db #0x00	; 0
      0025A6 00                    7539 	.db #0x00	; 0
      0025A7 00                    7540 	.db #0x00	; 0
      0025A8 8E                    7541 	.db #0x8e	; 142
      0025A9 8E                    7542 	.db #0x8e	; 142
      0025AA 00                    7543 	.db #0x00	; 0
      0025AB 00                    7544 	.db #0x00	; 0
      0025AC 00                    7545 	.db #0x00	; 0
      0025AD 00                    7546 	.db #0x00	; 0
      0025AE 8E                    7547 	.db #0x8e	; 142
      0025AF 8E                    7548 	.db #0x8e	; 142
      0025B0 8E                    7549 	.db #0x8e	; 142
      0025B1 8E                    7550 	.db #0x8e	; 142
      0025B2 00                    7551 	.db #0x00	; 0
      0025B3 00                    7552 	.db #0x00	; 0
      0025B4 00                    7553 	.db #0x00	; 0
      0025B5 8E                    7554 	.db #0x8e	; 142
      0025B6 8E                    7555 	.db #0x8e	; 142
      0025B7 8E                    7556 	.db #0x8e	; 142
      0025B8 8E                    7557 	.db #0x8e	; 142
      0025B9 8E                    7558 	.db #0x8e	; 142
      0025BA 00                    7559 	.db #0x00	; 0
      0025BB 8E                    7560 	.db #0x8e	; 142
      0025BC 8E                    7561 	.db #0x8e	; 142
      0025BD 00                    7562 	.db #0x00	; 0
      0025BE 00                    7563 	.db #0x00	; 0
      0025BF 00                    7564 	.db #0x00	; 0
      0025C0 8E                    7565 	.db #0x8e	; 142
      0025C1 8E                    7566 	.db #0x8e	; 142
      0025C2 00                    7567 	.db #0x00	; 0
      0025C3 00                    7568 	.db #0x00	; 0
      0025C4 8E                    7569 	.db #0x8e	; 142
      0025C5 8E                    7570 	.db #0x8e	; 142
      0025C6 00                    7571 	.db #0x00	; 0
      0025C7 00                    7572 	.db #0x00	; 0
      0025C8 8E                    7573 	.db #0x8e	; 142
      0025C9 8E                    7574 	.db #0x8e	; 142
      0025CA 00                    7575 	.db #0x00	; 0
      0025CB 00                    7576 	.db #0x00	; 0
      0025CC 00                    7577 	.db #0x00	; 0
      0025CD 8E                    7578 	.db #0x8e	; 142
      0025CE 8E                    7579 	.db #0x8e	; 142
      0025CF 8E                    7580 	.db #0x8e	; 142
      0025D0 8E                    7581 	.db #0x8e	; 142
      0025D1 8E                    7582 	.db #0x8e	; 142
      0025D2 00                    7583 	.db #0x00	; 0
      0025D3 00                    7584 	.db #0x00	; 0
      0025D4 8E                    7585 	.db #0x8e	; 142
      0025D5 8E                    7586 	.db #0x8e	; 142
      0025D6 8E                    7587 	.db #0x8e	; 142
      0025D7 00                    7588 	.db #0x00	; 0
      0025D8 8E                    7589 	.db #0x8e	; 142
      0025D9 8E                    7590 	.db #0x8e	; 142
      0025DA 00                    7591 	.db #0x00	; 0
      0025DB 8E                    7592 	.db #0x8e	; 142
      0025DC 8E                    7593 	.db #0x8e	; 142
      0025DD 00                    7594 	.db #0x00	; 0
      0025DE 00                    7595 	.db #0x00	; 0
      0025DF 00                    7596 	.db #0x00	; 0
      0025E0 8E                    7597 	.db #0x8e	; 142
      0025E1 8E                    7598 	.db #0x8e	; 142
      0025E2 00                    7599 	.db #0x00	; 0
      0025E3 00                    7600 	.db #0x00	; 0
      0025E4 00                    7601 	.db #0x00	; 0
      0025E5 8E                    7602 	.db #0x8e	; 142
      0025E6 8E                    7603 	.db #0x8e	; 142
      0025E7 00                    7604 	.db #0x00	; 0
      0025E8 8E                    7605 	.db #0x8e	; 142
      0025E9 8E                    7606 	.db #0x8e	; 142
      0025EA 00                    7607 	.db #0x00	; 0
      0025EB 00                    7608 	.db #0x00	; 0
      0025EC 8E                    7609 	.db #0x8e	; 142
      0025ED 8E                    7610 	.db #0x8e	; 142
      0025EE 8E                    7611 	.db #0x8e	; 142
      0025EF 00                    7612 	.db #0x00	; 0
      0025F0 8E                    7613 	.db #0x8e	; 142
      0025F1 8E                    7614 	.db #0x8e	; 142
      0025F2 00                    7615 	.db #0x00	; 0
      0025F3 8E                    7616 	.db #0x8e	; 142
      0025F4 8E                    7617 	.db #0x8e	; 142
      0025F5 8E                    7618 	.db #0x8e	; 142
      0025F6 00                    7619 	.db #0x00	; 0
      0025F7 00                    7620 	.db #0x00	; 0
      0025F8 8E                    7621 	.db #0x8e	; 142
      0025F9 8E                    7622 	.db #0x8e	; 142
      0025FA 00                    7623 	.db #0x00	; 0
      0025FB 8E                    7624 	.db #0x8e	; 142
      0025FC 8E                    7625 	.db #0x8e	; 142
      0025FD 00                    7626 	.db #0x00	; 0
      0025FE 00                    7627 	.db #0x00	; 0
      0025FF 8E                    7628 	.db #0x8e	; 142
      002600 8E                    7629 	.db #0x8e	; 142
      002601 00                    7630 	.db #0x00	; 0
      002602 00                    7631 	.db #0x00	; 0
      002603 00                    7632 	.db #0x00	; 0
      002604 00                    7633 	.db #0x00	; 0
      002605 00                    7634 	.db #0x00	; 0
      002606 8E                    7635 	.db #0x8e	; 142
      002607 8E                    7636 	.db #0x8e	; 142
      002608 8E                    7637 	.db #0x8e	; 142
      002609 00                    7638 	.db #0x00	; 0
      00260A 00                    7639 	.db #0x00	; 0
      00260B 8E                    7640 	.db #0x8e	; 142
      00260C 8E                    7641 	.db #0x8e	; 142
      00260D 8E                    7642 	.db #0x8e	; 142
      00260E 00                    7643 	.db #0x00	; 0
      00260F 00                    7644 	.db #0x00	; 0
      002610 8E                    7645 	.db #0x8e	; 142
      002611 8E                    7646 	.db #0x8e	; 142
      002612 00                    7647 	.db #0x00	; 0
      002613 8E                    7648 	.db #0x8e	; 142
      002614 8E                    7649 	.db #0x8e	; 142
      002615 00                    7650 	.db #0x00	; 0
      002616 00                    7651 	.db #0x00	; 0
      002617 00                    7652 	.db #0x00	; 0
      002618 8E                    7653 	.db #0x8e	; 142
      002619 8E                    7654 	.db #0x8e	; 142
      00261A 00                    7655 	.db #0x00	; 0
      00261B 8E                    7656 	.db #0x8e	; 142
      00261C 8E                    7657 	.db #0x8e	; 142
      00261D 8E                    7658 	.db #0x8e	; 142
      00261E 8E                    7659 	.db #0x8e	; 142
      00261F 8E                    7660 	.db #0x8e	; 142
      002620 00                    7661 	.db #0x00	; 0
      002621 00                    7662 	.db #0x00	; 0
      002622 00                    7663 	.db #0x00	; 0
      002623 00                    7664 	.db #0x00	; 0
      002624 00                    7665 	.db #0x00	; 0
      002625 00                    7666 	.db #0x00	; 0
      002626 8E                    7667 	.db #0x8e	; 142
      002627 8E                    7668 	.db #0x8e	; 142
      002628 00                    7669 	.db #0x00	; 0
      002629 00                    7670 	.db #0x00	; 0
      00262A 00                    7671 	.db #0x00	; 0
      00262B 8E                    7672 	.db #0x8e	; 142
      00262C 8E                    7673 	.db #0x8e	; 142
      00262D 00                    7674 	.db #0x00	; 0
      00262E 00                    7675 	.db #0x00	; 0
      00262F 00                    7676 	.db #0x00	; 0
      002630 8E                    7677 	.db #0x8e	; 142
      002631 8E                    7678 	.db #0x8e	; 142
      002632 00                    7679 	.db #0x00	; 0
      002633 8E                    7680 	.db #0x8e	; 142
      002634 8E                    7681 	.db #0x8e	; 142
      002635 00                    7682 	.db #0x00	; 0
      002636 00                    7683 	.db #0x00	; 0
      002637 00                    7684 	.db #0x00	; 0
      002638 8E                    7685 	.db #0x8e	; 142
      002639 8E                    7686 	.db #0x8e	; 142
      00263A 00                    7687 	.db #0x00	; 0
      00263B 8E                    7688 	.db #0x8e	; 142
      00263C 8E                    7689 	.db #0x8e	; 142
      00263D 8E                    7690 	.db #0x8e	; 142
      00263E 8E                    7691 	.db #0x8e	; 142
      00263F 8E                    7692 	.db #0x8e	; 142
      002640 00                    7693 	.db #0x00	; 0
      002641 00                    7694 	.db #0x00	; 0
      002642 00                    7695 	.db #0x00	; 0
      002643 00                    7696 	.db #0x00	; 0
      002644 00                    7697 	.db #0x00	; 0
      002645 00                    7698 	.db #0x00	; 0
      002646 8E                    7699 	.db #0x8e	; 142
      002647 8E                    7700 	.db #0x8e	; 142
      002648 00                    7701 	.db #0x00	; 0
      002649 00                    7702 	.db #0x00	; 0
      00264A 00                    7703 	.db #0x00	; 0
      00264B 8E                    7704 	.db #0x8e	; 142
      00264C 8E                    7705 	.db #0x8e	; 142
      00264D 00                    7706 	.db #0x00	; 0
      00264E 00                    7707 	.db #0x00	; 0
      00264F 00                    7708 	.db #0x00	; 0
      002650 8E                    7709 	.db #0x8e	; 142
      002651 8E                    7710 	.db #0x8e	; 142
      002652 00                    7711 	.db #0x00	; 0
      002653 8E                    7712 	.db #0x8e	; 142
      002654 8E                    7713 	.db #0x8e	; 142
      002655 8E                    7714 	.db #0x8e	; 142
      002656 8E                    7715 	.db #0x8e	; 142
      002657 8E                    7716 	.db #0x8e	; 142
      002658 8E                    7717 	.db #0x8e	; 142
      002659 8E                    7718 	.db #0x8e	; 142
      00265A 00                    7719 	.db #0x00	; 0
      00265B 8E                    7720 	.db #0x8e	; 142
      00265C 8E                    7721 	.db #0x8e	; 142
      00265D 00                    7722 	.db #0x00	; 0
      00265E 00                    7723 	.db #0x00	; 0
      00265F 00                    7724 	.db #0x00	; 0
      002660 8E                    7725 	.db #0x8e	; 142
      002661 00                    7726 	.db #0x00	; 0
      002662 00                    7727 	.db #0x00	; 0
      002663 00                    7728 	.db #0x00	; 0
      002664 00                    7729 	.db #0x00	; 0
      002665 00                    7730 	.db #0x00	; 0
      002666 8E                    7731 	.db #0x8e	; 142
      002667 8E                    7732 	.db #0x8e	; 142
      002668 00                    7733 	.db #0x00	; 0
      002669 00                    7734 	.db #0x00	; 0
      00266A 00                    7735 	.db #0x00	; 0
      00266B 8E                    7736 	.db #0x8e	; 142
      00266C 8E                    7737 	.db #0x8e	; 142
      00266D 8E                    7738 	.db #0x8e	; 142
      00266E 8E                    7739 	.db #0x8e	; 142
      00266F 8E                    7740 	.db #0x8e	; 142
      002670 8E                    7741 	.db #0x8e	; 142
      002671 8E                    7742 	.db #0x8e	; 142
      002672 00                    7743 	.db #0x00	; 0
      002673 8E                    7744 	.db #0x8e	; 142
      002674 8E                    7745 	.db #0x8e	; 142
      002675 00                    7746 	.db #0x00	; 0
      002676 00                    7747 	.db #0x00	; 0
      002677 00                    7748 	.db #0x00	; 0
      002678 8E                    7749 	.db #0x8e	; 142
      002679 8E                    7750 	.db #0x8e	; 142
      00267A 00                    7751 	.db #0x00	; 0
      00267B 8E                    7752 	.db #0x8e	; 142
      00267C 8E                    7753 	.db #0x8e	; 142
      00267D 00                    7754 	.db #0x00	; 0
      00267E 00                    7755 	.db #0x00	; 0
      00267F 00                    7756 	.db #0x00	; 0
      002680 8E                    7757 	.db #0x8e	; 142
      002681 00                    7758 	.db #0x00	; 0
      002682 00                    7759 	.db #0x00	; 0
      002683 00                    7760 	.db #0x00	; 0
      002684 00                    7761 	.db #0x00	; 0
      002685 00                    7762 	.db #0x00	; 0
      002686 8E                    7763 	.db #0x8e	; 142
      002687 8E                    7764 	.db #0x8e	; 142
      002688 00                    7765 	.db #0x00	; 0
      002689 00                    7766 	.db #0x00	; 0
      00268A 00                    7767 	.db #0x00	; 0
      00268B 8E                    7768 	.db #0x8e	; 142
      00268C 8E                    7769 	.db #0x8e	; 142
      00268D 00                    7770 	.db #0x00	; 0
      00268E 00                    7771 	.db #0x00	; 0
      00268F 00                    7772 	.db #0x00	; 0
      002690 8E                    7773 	.db #0x8e	; 142
      002691 8E                    7774 	.db #0x8e	; 142
      002692                       7775 ___str_9:
      002692 50 52 45 53 53 20 54  7776 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0026A8 00                    7777 	.db 0x00
      0026A9                       7778 ___str_10:
      0026A9 41 4E 44 52 45 42 41  7779 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0026BD 00                    7780 	.db 0x00
      0026BE                       7781 ___str_11:
      0026BE 76 2E 3F 2E 3F 2E 3F  7782 	.ascii "v.?.?.?"
      0026C5 00                    7783 	.db 0x00
                                   7784 ;src\main.c:85: void main() {
                                   7785 ;	---------------------------------
                                   7786 ; Function main
                                   7787 ; ---------------------------------
      0026C6                       7788 _main::
                                   7789 ;src\main.c:87: while(TRUE) {
      0026C6                       7790 00102$:
                                   7791 ;src\main.c:93: InitGame();
      0026C6 CDrBBr21         [17] 7792 	call	_InitGame
                                   7793 ;src\main.c:96: }
      0026C9 18 FB            [12] 7794 	jr	00102$
                                   7795 	.area _CODE
                                   7796 	.area _INITIALIZER
      000000                       7797 __xinit__gameOver:
      000000 00                    7798 	.db #0x00	; 0
      000001                       7799 __xinit__col:
      000001 00                    7800 	.db #0x00	; 0
      000002                       7801 __xinit__line:
      000002 00                    7802 	.db #0x00	; 0
      000003                       7803 __xinit__counter:
      000003 00                    7804 	.db #0x00	; 0
      000004                       7805 __xinit__blocksRemoved:
      000004 00 00                 7806 	.dw #0x0000
      000006                       7807 __xinit__level:
      000006 01                    7808 	.db #0x01	; 1
      000007                       7809 __xinit__newLevel:
      000007 00                    7810 	.db #0x00	; 0
      000008                       7811 __xinit__rndSeed:
      000008 00                    7812 	.db #0x00	; 0
      000009                       7813 __xinit__d_col:
      000009 00                    7814 	.db #0x00	; 0
      00000A                       7815 __xinit__d_line:
      00000A 00                    7816 	.db #0x00	; 0
      00000B                       7817 __xinit__d_value:
      00000B 00                    7818 	.db #0x00	; 0
                                   7819 	.area _CABS (ABS)
