                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideHitSprite
                                     36 	.globl _DrawHitSprite
                                     37 	.globl _HideArrow
                                     38 	.globl _DrawArrow
                                     39 	.globl _DrawBackground
                                     40 	.globl _DrawScore
                                     41 	.globl _DrawColumn
                                     42 	.globl _DrawNumber
                                     43 	.globl _DrawString
                                     44 	.globl _DrawChar
                                     45 	.globl _GetRandomInInterval
                                     46 	.globl _GetRandom
                                     47 	.globl _InitRnd
                                     48 	.globl _Power
                                     49 	.globl _Wait
                                     50 	.globl _SNSMAT
                                     51 	.globl _GTTRIG
                                     52 	.globl _GTSTCK
                                     53 	.globl _BEEP
                                     54 	.globl _WRTPSG
                                     55 	.globl _GICINI
                                     56 	.globl _INIGRP
                                     57 	.globl _LDIRVM
                                     58 	.globl _FILVRM
                                     59 	.globl _WRTVRM
                                     60 	.globl _RDVRM
                                     61 	.globl _WRTVDP
                                     62 	.globl _ENASCR
                                     63 	.globl _DISSCR
                                     64 	.globl _d_value
                                     65 	.globl _d_line
                                     66 	.globl _d_col
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _bottomPiece
                                     81 	.globl _midPiece
                                     82 	.globl _topPiece
                                     83 	.globl _playfieldTemp
                                     84 	.globl _playfield
                                     85 	.globl _GETPNT
                                     86 	.globl _PUTPNT
                                     87 	.globl _REPCNT
                                     88 	.globl _SCNCNT
                                     89 	.globl _ATRBYT
                                     90 	.globl _CMASK
                                     91 	.globl _CLOC
                                     92 	.globl _BDRCLR
                                     93 	.globl _BAKCLR
                                     94 	.globl _FORCLR
                                     95 	.globl _TRGFLG
                                     96 	.globl _STATFL
                                     97 	.globl _MSX_vdp_regs
                                     98 	.globl _CNSDFG
                                     99 	.globl _CSRX
                                    100 	.globl _CSRY
                                    101 	.globl _MSX_modedata_screen3
                                    102 	.globl _MSX_modedata_screen2
                                    103 	.globl _MSX_modedata_screen1
                                    104 	.globl _MSX_modedata_screen0
                                    105 	.globl _CLIKSW
                                    106 	.globl _JIFFY
                                    107 	.globl _CLMLST
                                    108 	.globl _CRTCNT
                                    109 	.globl _LINLEN
                                    110 	.globl _LINL32
                                    111 	.globl _LINL40
                                    112 	.globl _MSX_charset
                                    113 	.globl _FONT
                                    114 	.globl _pieces
                                    115 	.globl _MSX_version
                                    116 	.globl _MSX_vdp_port_write
                                    117 	.globl _MSX_vdp_port_read
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 ;--------------------------------------------------------
                                    122 ; ram data
                                    123 ;--------------------------------------------------------
                                    124 	.area _DATA
                           000004   125 _MSX_charset	=	0x0004
                           00F3AE   126 _LINL40	=	0xf3ae
                           00F3AF   127 _LINL32	=	0xf3af
                           00F3B0   128 _LINLEN	=	0xf3b0
                           00F3B1   129 _CRTCNT	=	0xf3b1
                           00F3B1   130 _CLMLST	=	0xf3b1
                           00FC9E   131 _JIFFY	=	0xfc9e
                           00F3DB   132 _CLIKSW	=	0xf3db
                           00F3B3   133 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   134 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   135 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   136 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   137 _CSRY	=	0xf3dc
                           00F3DD   138 _CSRX	=	0xf3dd
                           00F3DE   139 _CNSDFG	=	0xf3de
                           00F3DF   140 _MSX_vdp_regs	=	0xf3df
                           00F3E7   141 _STATFL	=	0xf3e7
                           00F3E8   142 _TRGFLG	=	0xf3e8
                           00F3E9   143 _FORCLR	=	0xf3e9
                           00F3EA   144 _BAKCLR	=	0xf3ea
                           00F3EB   145 _BDRCLR	=	0xf3eb
                           00F92A   146 _CLOC	=	0xf92a
                           00F92C   147 _CMASK	=	0xf92c
                           00F3F2   148 _ATRBYT	=	0xf3f2
                           00F3F6   149 _SCNCNT	=	0xf3f6
                           00F3F7   150 _REPCNT	=	0xf3f7
                           00F3F8   151 _PUTPNT	=	0xf3f8
                           00F3FA   152 _GETPNT	=	0xf3fa
      000000                        153 _playfield::
      000000                        154 	.ds 72
      000048                        155 _playfieldTemp::
      000048                        156 	.ds 72
      000090                        157 _topPiece::
      000090                        158 	.ds 1
      000091                        159 _midPiece::
      000091                        160 	.ds 1
      000092                        161 _bottomPiece::
      000092                        162 	.ds 1
      000093                        163 _speed::
      000093                        164 	.ds 1
      000094                        165 _Rand_a::
      000094                        166 	.ds 1
      000095                        167 _Rand_b::
      000095                        168 	.ds 1
      000096                        169 _Rand_c::
      000096                        170 	.ds 1
      000097                        171 _Rand_x::
      000097                        172 	.ds 1
                                    173 ;--------------------------------------------------------
                                    174 ; ram data
                                    175 ;--------------------------------------------------------
                                    176 	.area _INITIALIZED
      000000                        177 _gameOver::
      000000                        178 	.ds 1
      000001                        179 _col::
      000001                        180 	.ds 1
      000002                        181 _line::
      000002                        182 	.ds 1
      000003                        183 _counter::
      000003                        184 	.ds 1
      000004                        185 _blocksRemoved::
      000004                        186 	.ds 2
      000006                        187 _level::
      000006                        188 	.ds 1
      000007                        189 _newLevel::
      000007                        190 	.ds 1
      000008                        191 _rndSeed::
      000008                        192 	.ds 1
      000009                        193 _d_col::
      000009                        194 	.ds 1
      00000A                        195 _d_line::
      00000A                        196 	.ds 1
      00000B                        197 _d_value::
      00000B                        198 	.ds 1
                                    199 ;--------------------------------------------------------
                                    200 ; absolute external ram data
                                    201 ;--------------------------------------------------------
                                    202 	.area _DABS (ABS)
                                    203 ;--------------------------------------------------------
                                    204 ; global & static initialisations
                                    205 ;--------------------------------------------------------
                                    206 	.area _HOME
                                    207 	.area _GSINIT
                                    208 	.area _GSFINAL
                                    209 	.area _GSINIT
                                    210 ;--------------------------------------------------------
                                    211 ; Home
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _HOME
                                    215 ;--------------------------------------------------------
                                    216 ; code
                                    217 ;--------------------------------------------------------
                                    218 	.area _CODE
                                    219 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    220 ;	---------------------------------
                                    221 ; Function Wait
                                    222 ; ---------------------------------
      000000                        223 _Wait::
                                    224 ;src\/Common.h:2: do {
      000000 D1               [10]  225 	pop	de
      000001 C1               [10]  226 	pop	bc
      000002 C5               [11]  227 	push	bc
      000003 D5               [11]  228 	push	de
      000004                        229 00104$:
                                    230 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  231 	ld	de, (_JIFFY)
                                    232 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        233 00101$:
      000008 2A 9E FC         [16]  234 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  235 	cp	a, a
      00000C ED 52            [15]  236 	sbc	hl, de
      00000E 28 F8            [12]  237 	jr	Z, 00101$
                                    238 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  239 	ld	e, c
      000011 50               [ 4]  240 	ld	d, b
      000012 0B               [ 6]  241 	dec	bc
      000013 7A               [ 4]  242 	ld	a, d
      000014 B3               [ 4]  243 	or	a, e
      000015 20 ED            [12]  244 	jr	NZ, 00104$
                                    245 ;src\/Common.h:8: }
      000017 C9               [10]  246 	ret
                           000006   247 _MSX_vdp_port_read	=	0x0006
                           000007   248 _MSX_vdp_port_write	=	0x0007
                           00002D   249 _MSX_version	=	0x002d
      000018                        250 _pieces:
      000018 04                     251 	.db #0x04	; 4
      000019 08                     252 	.db #0x08	; 8
      00001A 0C                     253 	.db #0x0c	; 12
      00001B 10                     254 	.db #0x10	; 16
      00001C 14                     255 	.db #0x14	; 20
                                    256 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    257 ;	---------------------------------
                                    258 ; Function Power
                                    259 ; ---------------------------------
      00001D                        260 _Power::
      00001D DD E5            [15]  261 	push	ix
      00001F DD 21 00 00      [14]  262 	ld	ix,#0
      000023 DD 39            [15]  263 	add	ix,sp
                                    264 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  265 	ld	c, 4 (ix)
      000028 06 00            [ 7]  266 	ld	b, #0x00
      00002A 69               [ 4]  267 	ld	l, c
      00002B 60               [ 4]  268 	ld	h, b
                                    269 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  270 	ld	a, 5 (ix)
      00002F B7               [ 4]  271 	or	a, a
      000030 20 05            [12]  272 	jr	NZ, 00111$
      000032 21 01 00         [10]  273 	ld	hl, #0x0001
      000035 18 16            [12]  274 	jr	00107$
                                    275 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        276 00111$:
      000037 1E 01            [ 7]  277 	ld	e, #0x01
      000039                        278 00105$:
      000039 7B               [ 4]  279 	ld	a, e
      00003A DD 96 05         [19]  280 	sub	a, 5 (ix)
      00003D 30 0E            [12]  281 	jr	NC, 00103$
                                    282 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  283 	push	bc
      000040 D5               [11]  284 	push	de
      000041 C5               [11]  285 	push	bc
      000042 E5               [11]  286 	push	hl
      000043 CDr00r00         [17]  287 	call	__mulint
      000046 F1               [10]  288 	pop	af
      000047 F1               [10]  289 	pop	af
      000048 D1               [10]  290 	pop	de
      000049 C1               [10]  291 	pop	bc
                                    292 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  293 	inc	e
      00004B 18 EC            [12]  294 	jr	00105$
      00004D                        295 00103$:
                                    296 ;src\/Math.h:10: return power;
      00004D                        297 00107$:
                                    298 ;src\/Math.h:11: }
      00004D DD E1            [14]  299 	pop	ix
      00004F C9               [10]  300 	ret
                                    301 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    302 ;	---------------------------------
                                    303 ; Function InitRnd
                                    304 ; ---------------------------------
      000050                        305 _InitRnd::
                                    306 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  307 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  308 	ld	hl, #2
      000056 39               [11]  309 	add	hl, sp
      000057 AE               [ 7]  310 	xor	a, (hl)
      000058 32r94r00         [13]  311 	ld	(_Rand_a+0), a
                                    312 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  313 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  314 	ld	hl, #3
      000061 39               [11]  315 	add	hl, sp
      000062 AE               [ 7]  316 	xor	a, (hl)
      000063 32r95r00         [13]  317 	ld	(_Rand_b+0), a
                                    318 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  319 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  320 	ld	hl, #4
      00006C 39               [11]  321 	add	hl, sp
      00006D AE               [ 7]  322 	xor	a, (hl)
      00006E 32r96r00         [13]  323 	ld	(_Rand_c+0), a
                                    324 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  325 	ld	hl, #_Rand_x
      000074 34               [11]  326 	inc	(hl)
                                    327 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  328 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  329 	ld	hl, #_Rand_c
      00007B AE               [ 7]  330 	xor	a, (hl)
      00007C 21r97r00         [10]  331 	ld	hl, #_Rand_x
      00007F AE               [ 7]  332 	xor	a, (hl)
      000080 32r94r00         [13]  333 	ld	(_Rand_a+0), a
                                    334 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  335 	ld	hl, #_Rand_b
      000086 7E               [ 7]  336 	ld	a, (hl)
      000087 FD 21r94r00      [14]  337 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  338 	add	a, 0 (iy)
      00008E 77               [ 7]  339 	ld	(hl), a
                                    340 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  341 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  342 	srl	a
      000094 21r96r00         [10]  343 	ld	hl, #_Rand_c
      000097 86               [ 7]  344 	add	a, (hl)
      000098 FD 21r94r00      [14]  345 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  346 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  347 	ld	(_Rand_c+0), a
                                    348 ;src\/Random.h:38: }
      0000A2 C9               [10]  349 	ret
                                    350 ;src\/Random.h:40: unsigned char GetRandom() {
                                    351 ;	---------------------------------
                                    352 ; Function GetRandom
                                    353 ; ---------------------------------
      0000A3                        354 _GetRandom::
                                    355 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  356 	ld	hl, #_Rand_x
      0000A6 34               [11]  357 	inc	(hl)
                                    358 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  359 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  360 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  361 	xor	a, (hl)
      0000AE 21r97r00         [10]  362 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  363 	xor	a, (hl)
      0000B2 32r94r00         [13]  364 	ld	(_Rand_a+0), a
                                    365 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  366 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  367 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  368 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  369 	add	a, 0 (iy)
      0000C0 77               [ 7]  370 	ld	(hl), a
                                    371 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  372 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  373 	srl	a
      0000C6 21r96r00         [10]  374 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  375 	add	a, (hl)
      0000CA FD 21r94r00      [14]  376 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  377 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  378 	ld	(_Rand_c+0), a
                                    379 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  380 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  381 	ld	l, a
                                    382 ;src\/Random.h:47: }
      0000D8 C9               [10]  383 	ret
                                    384 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    385 ;	---------------------------------
                                    386 ; Function GetRandomInInterval
                                    387 ; ---------------------------------
      0000D9                        388 _GetRandomInInterval::
                                    389 ;src\/Random.h:53: do {
      0000D9                        390 00101$:
                                    391 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  392 	call	_GetRandom
      0000DC 7D               [ 4]  393 	ld	a, l
      0000DD 21 03 00         [10]  394 	ld	hl, #3
      0000E0 39               [11]  395 	add	hl, sp
      0000E1 A6               [ 7]  396 	and	a, (hl)
      0000E2 4F               [ 4]  397 	ld	c, a
                                    398 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  399 	ld	hl, #2
      0000E6 39               [11]  400 	add	hl, sp
      0000E7 7E               [ 7]  401 	ld	a, (hl)
      0000E8 91               [ 4]  402 	sub	a, c
      0000E9 38 EE            [12]  403 	jr	C, 00101$
                                    404 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  405 	ld	l, c
                                    406 ;src\/Random.h:59: }
      0000EC C9               [10]  407 	ret
                                    408 ;src\/Graphics.h:4: void DrawChar(byte character, byte col, byte line) {
                                    409 ;	---------------------------------
                                    410 ; Function DrawChar
                                    411 ; ---------------------------------
      0000ED                        412 _DrawChar::
      0000ED DD E5            [15]  413 	push	ix
      0000EF DD 21 00 00      [14]  414 	ld	ix,#0
      0000F3 DD 39            [15]  415 	add	ix,sp
                                    416 ;src\/Graphics.h:5: WRTVRM(MSX_modedata_screen2.name + (line * 32) + col, character);
      0000F5 ED 4B C7 F3      [20]  417 	ld	bc, (#_MSX_modedata_screen2 + 0)
      0000F9 DD 6E 06         [19]  418 	ld	l, 6 (ix)
      0000FC 26 00            [ 7]  419 	ld	h, #0x00
      0000FE 29               [11]  420 	add	hl, hl
      0000FF 29               [11]  421 	add	hl, hl
      000100 29               [11]  422 	add	hl, hl
      000101 29               [11]  423 	add	hl, hl
      000102 29               [11]  424 	add	hl, hl
      000103 09               [11]  425 	add	hl, bc
      000104 DD 4E 05         [19]  426 	ld	c, 5 (ix)
      000107 06 00            [ 7]  427 	ld	b, #0x00
      000109 09               [11]  428 	add	hl, bc
      00010A DD 7E 04         [19]  429 	ld	a, 4 (ix)
      00010D F5               [11]  430 	push	af
      00010E 33               [ 6]  431 	inc	sp
      00010F E5               [11]  432 	push	hl
      000110 CDr00r00         [17]  433 	call	_WRTVRM
      000113 F1               [10]  434 	pop	af
      000114 33               [ 6]  435 	inc	sp
                                    436 ;src\/Graphics.h:6: }
      000115 DD E1            [14]  437 	pop	ix
      000117 C9               [10]  438 	ret
      000118                        439 _FONT:
      000118 00                     440 	.db #0x00	; 0
      000119 00                     441 	.db #0x00	; 0
      00011A 00                     442 	.db #0x00	; 0
      00011B 00                     443 	.db #0x00	; 0
      00011C 00                     444 	.db #0x00	; 0
      00011D 00                     445 	.db #0x00	; 0
      00011E 00                     446 	.db #0x00	; 0
      00011F 00                     447 	.db #0x00	; 0
      000120 30                     448 	.db #0x30	; 48	'0'
      000121 78                     449 	.db #0x78	; 120	'x'
      000122 78                     450 	.db #0x78	; 120	'x'
      000123 30                     451 	.db #0x30	; 48	'0'
      000124 30                     452 	.db #0x30	; 48	'0'
      000125 00                     453 	.db #0x00	; 0
      000126 30                     454 	.db #0x30	; 48	'0'
      000127 00                     455 	.db #0x00	; 0
      000128 6C                     456 	.db #0x6c	; 108	'l'
      000129 6C                     457 	.db #0x6c	; 108	'l'
      00012A 6C                     458 	.db #0x6c	; 108	'l'
      00012B 00                     459 	.db #0x00	; 0
      00012C 00                     460 	.db #0x00	; 0
      00012D 00                     461 	.db #0x00	; 0
      00012E 00                     462 	.db #0x00	; 0
      00012F 00                     463 	.db #0x00	; 0
      000130 6C                     464 	.db #0x6c	; 108	'l'
      000131 6C                     465 	.db #0x6c	; 108	'l'
      000132 FE                     466 	.db #0xfe	; 254
      000133 6C                     467 	.db #0x6c	; 108	'l'
      000134 FE                     468 	.db #0xfe	; 254
      000135 6C                     469 	.db #0x6c	; 108	'l'
      000136 6C                     470 	.db #0x6c	; 108	'l'
      000137 00                     471 	.db #0x00	; 0
      000138 30                     472 	.db #0x30	; 48	'0'
      000139 7C                     473 	.db #0x7c	; 124
      00013A C0                     474 	.db #0xc0	; 192
      00013B 78                     475 	.db #0x78	; 120	'x'
      00013C 0C                     476 	.db #0x0c	; 12
      00013D F8                     477 	.db #0xf8	; 248
      00013E 30                     478 	.db #0x30	; 48	'0'
      00013F 00                     479 	.db #0x00	; 0
      000140 00                     480 	.db #0x00	; 0
      000141 C6                     481 	.db #0xc6	; 198
      000142 CC                     482 	.db #0xcc	; 204
      000143 18                     483 	.db #0x18	; 24
      000144 30                     484 	.db #0x30	; 48	'0'
      000145 66                     485 	.db #0x66	; 102	'f'
      000146 C6                     486 	.db #0xc6	; 198
      000147 00                     487 	.db #0x00	; 0
      000148 38                     488 	.db #0x38	; 56	'8'
      000149 6C                     489 	.db #0x6c	; 108	'l'
      00014A 38                     490 	.db #0x38	; 56	'8'
      00014B 76                     491 	.db #0x76	; 118	'v'
      00014C DC                     492 	.db #0xdc	; 220
      00014D CC                     493 	.db #0xcc	; 204
      00014E 76                     494 	.db #0x76	; 118	'v'
      00014F 00                     495 	.db #0x00	; 0
      000150 60                     496 	.db #0x60	; 96
      000151 60                     497 	.db #0x60	; 96
      000152 C0                     498 	.db #0xc0	; 192
      000153 00                     499 	.db #0x00	; 0
      000154 00                     500 	.db #0x00	; 0
      000155 00                     501 	.db #0x00	; 0
      000156 00                     502 	.db #0x00	; 0
      000157 00                     503 	.db #0x00	; 0
      000158 18                     504 	.db #0x18	; 24
      000159 30                     505 	.db #0x30	; 48	'0'
      00015A 60                     506 	.db #0x60	; 96
      00015B 60                     507 	.db #0x60	; 96
      00015C 60                     508 	.db #0x60	; 96
      00015D 30                     509 	.db #0x30	; 48	'0'
      00015E 18                     510 	.db #0x18	; 24
      00015F 00                     511 	.db #0x00	; 0
      000160 60                     512 	.db #0x60	; 96
      000161 30                     513 	.db #0x30	; 48	'0'
      000162 18                     514 	.db #0x18	; 24
      000163 18                     515 	.db #0x18	; 24
      000164 18                     516 	.db #0x18	; 24
      000165 30                     517 	.db #0x30	; 48	'0'
      000166 60                     518 	.db #0x60	; 96
      000167 00                     519 	.db #0x00	; 0
      000168 00                     520 	.db #0x00	; 0
      000169 66                     521 	.db #0x66	; 102	'f'
      00016A 3C                     522 	.db #0x3c	; 60
      00016B FF                     523 	.db #0xff	; 255
      00016C 3C                     524 	.db #0x3c	; 60
      00016D 66                     525 	.db #0x66	; 102	'f'
      00016E 00                     526 	.db #0x00	; 0
      00016F 00                     527 	.db #0x00	; 0
      000170 00                     528 	.db #0x00	; 0
      000171 30                     529 	.db #0x30	; 48	'0'
      000172 30                     530 	.db #0x30	; 48	'0'
      000173 FC                     531 	.db #0xfc	; 252
      000174 30                     532 	.db #0x30	; 48	'0'
      000175 30                     533 	.db #0x30	; 48	'0'
      000176 00                     534 	.db #0x00	; 0
      000177 00                     535 	.db #0x00	; 0
      000178 00                     536 	.db #0x00	; 0
      000179 00                     537 	.db #0x00	; 0
      00017A 00                     538 	.db #0x00	; 0
      00017B 00                     539 	.db #0x00	; 0
      00017C 00                     540 	.db #0x00	; 0
      00017D 30                     541 	.db #0x30	; 48	'0'
      00017E 30                     542 	.db #0x30	; 48	'0'
      00017F 60                     543 	.db #0x60	; 96
      000180 00                     544 	.db #0x00	; 0
      000181 00                     545 	.db #0x00	; 0
      000182 00                     546 	.db #0x00	; 0
      000183 FC                     547 	.db #0xfc	; 252
      000184 00                     548 	.db #0x00	; 0
      000185 00                     549 	.db #0x00	; 0
      000186 00                     550 	.db #0x00	; 0
      000187 00                     551 	.db #0x00	; 0
      000188 00                     552 	.db #0x00	; 0
      000189 00                     553 	.db #0x00	; 0
      00018A 00                     554 	.db #0x00	; 0
      00018B 00                     555 	.db #0x00	; 0
      00018C 00                     556 	.db #0x00	; 0
      00018D 30                     557 	.db #0x30	; 48	'0'
      00018E 30                     558 	.db #0x30	; 48	'0'
      00018F 00                     559 	.db #0x00	; 0
      000190 06                     560 	.db #0x06	; 6
      000191 0C                     561 	.db #0x0c	; 12
      000192 18                     562 	.db #0x18	; 24
      000193 30                     563 	.db #0x30	; 48	'0'
      000194 60                     564 	.db #0x60	; 96
      000195 C0                     565 	.db #0xc0	; 192
      000196 80                     566 	.db #0x80	; 128
      000197 00                     567 	.db #0x00	; 0
      000198 7C                     568 	.db #0x7c	; 124
      000199 C6                     569 	.db #0xc6	; 198
      00019A CE                     570 	.db #0xce	; 206
      00019B DE                     571 	.db #0xde	; 222
      00019C F6                     572 	.db #0xf6	; 246
      00019D E6                     573 	.db #0xe6	; 230
      00019E 7C                     574 	.db #0x7c	; 124
      00019F 00                     575 	.db #0x00	; 0
      0001A0 30                     576 	.db #0x30	; 48	'0'
      0001A1 70                     577 	.db #0x70	; 112	'p'
      0001A2 30                     578 	.db #0x30	; 48	'0'
      0001A3 30                     579 	.db #0x30	; 48	'0'
      0001A4 30                     580 	.db #0x30	; 48	'0'
      0001A5 30                     581 	.db #0x30	; 48	'0'
      0001A6 FC                     582 	.db #0xfc	; 252
      0001A7 00                     583 	.db #0x00	; 0
      0001A8 78                     584 	.db #0x78	; 120	'x'
      0001A9 CC                     585 	.db #0xcc	; 204
      0001AA 0C                     586 	.db #0x0c	; 12
      0001AB 38                     587 	.db #0x38	; 56	'8'
      0001AC 60                     588 	.db #0x60	; 96
      0001AD C4                     589 	.db #0xc4	; 196
      0001AE FC                     590 	.db #0xfc	; 252
      0001AF 00                     591 	.db #0x00	; 0
      0001B0 78                     592 	.db #0x78	; 120	'x'
      0001B1 CC                     593 	.db #0xcc	; 204
      0001B2 0C                     594 	.db #0x0c	; 12
      0001B3 38                     595 	.db #0x38	; 56	'8'
      0001B4 0C                     596 	.db #0x0c	; 12
      0001B5 CC                     597 	.db #0xcc	; 204
      0001B6 78                     598 	.db #0x78	; 120	'x'
      0001B7 00                     599 	.db #0x00	; 0
      0001B8 1C                     600 	.db #0x1c	; 28
      0001B9 3C                     601 	.db #0x3c	; 60
      0001BA 6C                     602 	.db #0x6c	; 108	'l'
      0001BB CC                     603 	.db #0xcc	; 204
      0001BC FE                     604 	.db #0xfe	; 254
      0001BD 0C                     605 	.db #0x0c	; 12
      0001BE 1E                     606 	.db #0x1e	; 30
      0001BF 00                     607 	.db #0x00	; 0
      0001C0 FC                     608 	.db #0xfc	; 252
      0001C1 C0                     609 	.db #0xc0	; 192
      0001C2 F8                     610 	.db #0xf8	; 248
      0001C3 0C                     611 	.db #0x0c	; 12
      0001C4 0C                     612 	.db #0x0c	; 12
      0001C5 CC                     613 	.db #0xcc	; 204
      0001C6 78                     614 	.db #0x78	; 120	'x'
      0001C7 00                     615 	.db #0x00	; 0
      0001C8 38                     616 	.db #0x38	; 56	'8'
      0001C9 60                     617 	.db #0x60	; 96
      0001CA C0                     618 	.db #0xc0	; 192
      0001CB F8                     619 	.db #0xf8	; 248
      0001CC CC                     620 	.db #0xcc	; 204
      0001CD CC                     621 	.db #0xcc	; 204
      0001CE 78                     622 	.db #0x78	; 120	'x'
      0001CF 00                     623 	.db #0x00	; 0
      0001D0 FC                     624 	.db #0xfc	; 252
      0001D1 CC                     625 	.db #0xcc	; 204
      0001D2 0C                     626 	.db #0x0c	; 12
      0001D3 18                     627 	.db #0x18	; 24
      0001D4 30                     628 	.db #0x30	; 48	'0'
      0001D5 30                     629 	.db #0x30	; 48	'0'
      0001D6 30                     630 	.db #0x30	; 48	'0'
      0001D7 00                     631 	.db #0x00	; 0
      0001D8 78                     632 	.db #0x78	; 120	'x'
      0001D9 CC                     633 	.db #0xcc	; 204
      0001DA CC                     634 	.db #0xcc	; 204
      0001DB 78                     635 	.db #0x78	; 120	'x'
      0001DC CC                     636 	.db #0xcc	; 204
      0001DD CC                     637 	.db #0xcc	; 204
      0001DE 78                     638 	.db #0x78	; 120	'x'
      0001DF 00                     639 	.db #0x00	; 0
      0001E0 78                     640 	.db #0x78	; 120	'x'
      0001E1 CC                     641 	.db #0xcc	; 204
      0001E2 CC                     642 	.db #0xcc	; 204
      0001E3 7C                     643 	.db #0x7c	; 124
      0001E4 0C                     644 	.db #0x0c	; 12
      0001E5 18                     645 	.db #0x18	; 24
      0001E6 70                     646 	.db #0x70	; 112	'p'
      0001E7 00                     647 	.db #0x00	; 0
      0001E8 00                     648 	.db #0x00	; 0
      0001E9 30                     649 	.db #0x30	; 48	'0'
      0001EA 30                     650 	.db #0x30	; 48	'0'
      0001EB 00                     651 	.db #0x00	; 0
      0001EC 00                     652 	.db #0x00	; 0
      0001ED 30                     653 	.db #0x30	; 48	'0'
      0001EE 30                     654 	.db #0x30	; 48	'0'
      0001EF 00                     655 	.db #0x00	; 0
      0001F0 00                     656 	.db #0x00	; 0
      0001F1 30                     657 	.db #0x30	; 48	'0'
      0001F2 30                     658 	.db #0x30	; 48	'0'
      0001F3 00                     659 	.db #0x00	; 0
      0001F4 30                     660 	.db #0x30	; 48	'0'
      0001F5 30                     661 	.db #0x30	; 48	'0'
      0001F6 60                     662 	.db #0x60	; 96
      0001F7 00                     663 	.db #0x00	; 0
      0001F8 18                     664 	.db #0x18	; 24
      0001F9 30                     665 	.db #0x30	; 48	'0'
      0001FA 60                     666 	.db #0x60	; 96
      0001FB C0                     667 	.db #0xc0	; 192
      0001FC 60                     668 	.db #0x60	; 96
      0001FD 30                     669 	.db #0x30	; 48	'0'
      0001FE 18                     670 	.db #0x18	; 24
      0001FF 00                     671 	.db #0x00	; 0
      000200 00                     672 	.db #0x00	; 0
      000201 00                     673 	.db #0x00	; 0
      000202 FC                     674 	.db #0xfc	; 252
      000203 00                     675 	.db #0x00	; 0
      000204 00                     676 	.db #0x00	; 0
      000205 FC                     677 	.db #0xfc	; 252
      000206 00                     678 	.db #0x00	; 0
      000207 00                     679 	.db #0x00	; 0
      000208 60                     680 	.db #0x60	; 96
      000209 30                     681 	.db #0x30	; 48	'0'
      00020A 18                     682 	.db #0x18	; 24
      00020B 0C                     683 	.db #0x0c	; 12
      00020C 18                     684 	.db #0x18	; 24
      00020D 30                     685 	.db #0x30	; 48	'0'
      00020E 60                     686 	.db #0x60	; 96
      00020F 00                     687 	.db #0x00	; 0
      000210 78                     688 	.db #0x78	; 120	'x'
      000211 CC                     689 	.db #0xcc	; 204
      000212 0C                     690 	.db #0x0c	; 12
      000213 18                     691 	.db #0x18	; 24
      000214 30                     692 	.db #0x30	; 48	'0'
      000215 00                     693 	.db #0x00	; 0
      000216 30                     694 	.db #0x30	; 48	'0'
      000217 00                     695 	.db #0x00	; 0
      000218 7C                     696 	.db #0x7c	; 124
      000219 C6                     697 	.db #0xc6	; 198
      00021A DE                     698 	.db #0xde	; 222
      00021B DE                     699 	.db #0xde	; 222
      00021C DE                     700 	.db #0xde	; 222
      00021D C0                     701 	.db #0xc0	; 192
      00021E 78                     702 	.db #0x78	; 120	'x'
      00021F 00                     703 	.db #0x00	; 0
      000220 30                     704 	.db #0x30	; 48	'0'
      000221 78                     705 	.db #0x78	; 120	'x'
      000222 CC                     706 	.db #0xcc	; 204
      000223 CC                     707 	.db #0xcc	; 204
      000224 FC                     708 	.db #0xfc	; 252
      000225 CC                     709 	.db #0xcc	; 204
      000226 CC                     710 	.db #0xcc	; 204
      000227 00                     711 	.db #0x00	; 0
      000228 FC                     712 	.db #0xfc	; 252
      000229 66                     713 	.db #0x66	; 102	'f'
      00022A 66                     714 	.db #0x66	; 102	'f'
      00022B 7C                     715 	.db #0x7c	; 124
      00022C 66                     716 	.db #0x66	; 102	'f'
      00022D 66                     717 	.db #0x66	; 102	'f'
      00022E FC                     718 	.db #0xfc	; 252
      00022F 00                     719 	.db #0x00	; 0
      000230 3C                     720 	.db #0x3c	; 60
      000231 66                     721 	.db #0x66	; 102	'f'
      000232 C0                     722 	.db #0xc0	; 192
      000233 C0                     723 	.db #0xc0	; 192
      000234 C0                     724 	.db #0xc0	; 192
      000235 66                     725 	.db #0x66	; 102	'f'
      000236 3C                     726 	.db #0x3c	; 60
      000237 00                     727 	.db #0x00	; 0
      000238 F8                     728 	.db #0xf8	; 248
      000239 6C                     729 	.db #0x6c	; 108	'l'
      00023A 66                     730 	.db #0x66	; 102	'f'
      00023B 66                     731 	.db #0x66	; 102	'f'
      00023C 66                     732 	.db #0x66	; 102	'f'
      00023D 6C                     733 	.db #0x6c	; 108	'l'
      00023E F8                     734 	.db #0xf8	; 248
      00023F 00                     735 	.db #0x00	; 0
      000240 FE                     736 	.db #0xfe	; 254
      000241 62                     737 	.db #0x62	; 98	'b'
      000242 68                     738 	.db #0x68	; 104	'h'
      000243 78                     739 	.db #0x78	; 120	'x'
      000244 68                     740 	.db #0x68	; 104	'h'
      000245 62                     741 	.db #0x62	; 98	'b'
      000246 FE                     742 	.db #0xfe	; 254
      000247 00                     743 	.db #0x00	; 0
      000248 FE                     744 	.db #0xfe	; 254
      000249 62                     745 	.db #0x62	; 98	'b'
      00024A 68                     746 	.db #0x68	; 104	'h'
      00024B 78                     747 	.db #0x78	; 120	'x'
      00024C 68                     748 	.db #0x68	; 104	'h'
      00024D 60                     749 	.db #0x60	; 96
      00024E F0                     750 	.db #0xf0	; 240
      00024F 00                     751 	.db #0x00	; 0
      000250 3C                     752 	.db #0x3c	; 60
      000251 66                     753 	.db #0x66	; 102	'f'
      000252 C0                     754 	.db #0xc0	; 192
      000253 C0                     755 	.db #0xc0	; 192
      000254 CE                     756 	.db #0xce	; 206
      000255 66                     757 	.db #0x66	; 102	'f'
      000256 3E                     758 	.db #0x3e	; 62
      000257 00                     759 	.db #0x00	; 0
      000258 CC                     760 	.db #0xcc	; 204
      000259 CC                     761 	.db #0xcc	; 204
      00025A CC                     762 	.db #0xcc	; 204
      00025B FC                     763 	.db #0xfc	; 252
      00025C CC                     764 	.db #0xcc	; 204
      00025D CC                     765 	.db #0xcc	; 204
      00025E CC                     766 	.db #0xcc	; 204
      00025F 00                     767 	.db #0x00	; 0
      000260 78                     768 	.db #0x78	; 120	'x'
      000261 30                     769 	.db #0x30	; 48	'0'
      000262 30                     770 	.db #0x30	; 48	'0'
      000263 30                     771 	.db #0x30	; 48	'0'
      000264 30                     772 	.db #0x30	; 48	'0'
      000265 30                     773 	.db #0x30	; 48	'0'
      000266 78                     774 	.db #0x78	; 120	'x'
      000267 00                     775 	.db #0x00	; 0
      000268 1E                     776 	.db #0x1e	; 30
      000269 0C                     777 	.db #0x0c	; 12
      00026A 0C                     778 	.db #0x0c	; 12
      00026B 0C                     779 	.db #0x0c	; 12
      00026C CC                     780 	.db #0xcc	; 204
      00026D CC                     781 	.db #0xcc	; 204
      00026E 78                     782 	.db #0x78	; 120	'x'
      00026F 00                     783 	.db #0x00	; 0
      000270 E6                     784 	.db #0xe6	; 230
      000271 66                     785 	.db #0x66	; 102	'f'
      000272 6C                     786 	.db #0x6c	; 108	'l'
      000273 78                     787 	.db #0x78	; 120	'x'
      000274 6C                     788 	.db #0x6c	; 108	'l'
      000275 66                     789 	.db #0x66	; 102	'f'
      000276 E6                     790 	.db #0xe6	; 230
      000277 00                     791 	.db #0x00	; 0
      000278 F0                     792 	.db #0xf0	; 240
      000279 60                     793 	.db #0x60	; 96
      00027A 60                     794 	.db #0x60	; 96
      00027B 60                     795 	.db #0x60	; 96
      00027C 62                     796 	.db #0x62	; 98	'b'
      00027D 66                     797 	.db #0x66	; 102	'f'
      00027E FE                     798 	.db #0xfe	; 254
      00027F 00                     799 	.db #0x00	; 0
      000280 C6                     800 	.db #0xc6	; 198
      000281 EE                     801 	.db #0xee	; 238
      000282 FE                     802 	.db #0xfe	; 254
      000283 FE                     803 	.db #0xfe	; 254
      000284 D6                     804 	.db #0xd6	; 214
      000285 C6                     805 	.db #0xc6	; 198
      000286 C6                     806 	.db #0xc6	; 198
      000287 00                     807 	.db #0x00	; 0
      000288 C6                     808 	.db #0xc6	; 198
      000289 E6                     809 	.db #0xe6	; 230
      00028A F6                     810 	.db #0xf6	; 246
      00028B DE                     811 	.db #0xde	; 222
      00028C CE                     812 	.db #0xce	; 206
      00028D C6                     813 	.db #0xc6	; 198
      00028E C6                     814 	.db #0xc6	; 198
      00028F 00                     815 	.db #0x00	; 0
      000290 38                     816 	.db #0x38	; 56	'8'
      000291 6C                     817 	.db #0x6c	; 108	'l'
      000292 C6                     818 	.db #0xc6	; 198
      000293 C6                     819 	.db #0xc6	; 198
      000294 C6                     820 	.db #0xc6	; 198
      000295 6C                     821 	.db #0x6c	; 108	'l'
      000296 38                     822 	.db #0x38	; 56	'8'
      000297 00                     823 	.db #0x00	; 0
      000298 FC                     824 	.db #0xfc	; 252
      000299 66                     825 	.db #0x66	; 102	'f'
      00029A 66                     826 	.db #0x66	; 102	'f'
      00029B 7C                     827 	.db #0x7c	; 124
      00029C 60                     828 	.db #0x60	; 96
      00029D 60                     829 	.db #0x60	; 96
      00029E F0                     830 	.db #0xf0	; 240
      00029F 00                     831 	.db #0x00	; 0
      0002A0 78                     832 	.db #0x78	; 120	'x'
      0002A1 CC                     833 	.db #0xcc	; 204
      0002A2 CC                     834 	.db #0xcc	; 204
      0002A3 CC                     835 	.db #0xcc	; 204
      0002A4 DC                     836 	.db #0xdc	; 220
      0002A5 78                     837 	.db #0x78	; 120	'x'
      0002A6 1C                     838 	.db #0x1c	; 28
      0002A7 00                     839 	.db #0x00	; 0
      0002A8 FC                     840 	.db #0xfc	; 252
      0002A9 66                     841 	.db #0x66	; 102	'f'
      0002AA 66                     842 	.db #0x66	; 102	'f'
      0002AB 7C                     843 	.db #0x7c	; 124
      0002AC 6C                     844 	.db #0x6c	; 108	'l'
      0002AD 66                     845 	.db #0x66	; 102	'f'
      0002AE E6                     846 	.db #0xe6	; 230
      0002AF 00                     847 	.db #0x00	; 0
      0002B0 78                     848 	.db #0x78	; 120	'x'
      0002B1 CC                     849 	.db #0xcc	; 204
      0002B2 E0                     850 	.db #0xe0	; 224
      0002B3 70                     851 	.db #0x70	; 112	'p'
      0002B4 1C                     852 	.db #0x1c	; 28
      0002B5 CC                     853 	.db #0xcc	; 204
      0002B6 78                     854 	.db #0x78	; 120	'x'
      0002B7 00                     855 	.db #0x00	; 0
      0002B8 FC                     856 	.db #0xfc	; 252
      0002B9 B4                     857 	.db #0xb4	; 180
      0002BA 30                     858 	.db #0x30	; 48	'0'
      0002BB 30                     859 	.db #0x30	; 48	'0'
      0002BC 30                     860 	.db #0x30	; 48	'0'
      0002BD 30                     861 	.db #0x30	; 48	'0'
      0002BE 78                     862 	.db #0x78	; 120	'x'
      0002BF 00                     863 	.db #0x00	; 0
      0002C0 CC                     864 	.db #0xcc	; 204
      0002C1 CC                     865 	.db #0xcc	; 204
      0002C2 CC                     866 	.db #0xcc	; 204
      0002C3 CC                     867 	.db #0xcc	; 204
      0002C4 CC                     868 	.db #0xcc	; 204
      0002C5 CC                     869 	.db #0xcc	; 204
      0002C6 FC                     870 	.db #0xfc	; 252
      0002C7 00                     871 	.db #0x00	; 0
      0002C8 CC                     872 	.db #0xcc	; 204
      0002C9 CC                     873 	.db #0xcc	; 204
      0002CA CC                     874 	.db #0xcc	; 204
      0002CB CC                     875 	.db #0xcc	; 204
      0002CC CC                     876 	.db #0xcc	; 204
      0002CD 78                     877 	.db #0x78	; 120	'x'
      0002CE 30                     878 	.db #0x30	; 48	'0'
      0002CF 00                     879 	.db #0x00	; 0
      0002D0 C6                     880 	.db #0xc6	; 198
      0002D1 C6                     881 	.db #0xc6	; 198
      0002D2 C6                     882 	.db #0xc6	; 198
      0002D3 D6                     883 	.db #0xd6	; 214
      0002D4 FE                     884 	.db #0xfe	; 254
      0002D5 EE                     885 	.db #0xee	; 238
      0002D6 C6                     886 	.db #0xc6	; 198
      0002D7 00                     887 	.db #0x00	; 0
      0002D8 C6                     888 	.db #0xc6	; 198
      0002D9 C6                     889 	.db #0xc6	; 198
      0002DA 6C                     890 	.db #0x6c	; 108	'l'
      0002DB 38                     891 	.db #0x38	; 56	'8'
      0002DC 38                     892 	.db #0x38	; 56	'8'
      0002DD 6C                     893 	.db #0x6c	; 108	'l'
      0002DE C6                     894 	.db #0xc6	; 198
      0002DF 00                     895 	.db #0x00	; 0
      0002E0 CC                     896 	.db #0xcc	; 204
      0002E1 CC                     897 	.db #0xcc	; 204
      0002E2 CC                     898 	.db #0xcc	; 204
      0002E3 78                     899 	.db #0x78	; 120	'x'
      0002E4 30                     900 	.db #0x30	; 48	'0'
      0002E5 30                     901 	.db #0x30	; 48	'0'
      0002E6 78                     902 	.db #0x78	; 120	'x'
      0002E7 00                     903 	.db #0x00	; 0
      0002E8 FE                     904 	.db #0xfe	; 254
      0002E9 C6                     905 	.db #0xc6	; 198
      0002EA 8C                     906 	.db #0x8c	; 140
      0002EB 18                     907 	.db #0x18	; 24
      0002EC 32                     908 	.db #0x32	; 50	'2'
      0002ED 66                     909 	.db #0x66	; 102	'f'
      0002EE FE                     910 	.db #0xfe	; 254
      0002EF 00                     911 	.db #0x00	; 0
      0002F0 78                     912 	.db #0x78	; 120	'x'
      0002F1 60                     913 	.db #0x60	; 96
      0002F2 60                     914 	.db #0x60	; 96
      0002F3 60                     915 	.db #0x60	; 96
      0002F4 60                     916 	.db #0x60	; 96
      0002F5 60                     917 	.db #0x60	; 96
      0002F6 78                     918 	.db #0x78	; 120	'x'
      0002F7 00                     919 	.db #0x00	; 0
      0002F8 C0                     920 	.db #0xc0	; 192
      0002F9 60                     921 	.db #0x60	; 96
      0002FA 30                     922 	.db #0x30	; 48	'0'
      0002FB 18                     923 	.db #0x18	; 24
      0002FC 0C                     924 	.db #0x0c	; 12
      0002FD 06                     925 	.db #0x06	; 6
      0002FE 02                     926 	.db #0x02	; 2
      0002FF 00                     927 	.db #0x00	; 0
      000300 78                     928 	.db #0x78	; 120	'x'
      000301 18                     929 	.db #0x18	; 24
      000302 18                     930 	.db #0x18	; 24
      000303 18                     931 	.db #0x18	; 24
      000304 18                     932 	.db #0x18	; 24
      000305 18                     933 	.db #0x18	; 24
      000306 78                     934 	.db #0x78	; 120	'x'
      000307 00                     935 	.db #0x00	; 0
      000308 10                     936 	.db #0x10	; 16
      000309 38                     937 	.db #0x38	; 56	'8'
      00030A 6C                     938 	.db #0x6c	; 108	'l'
      00030B C6                     939 	.db #0xc6	; 198
      00030C 00                     940 	.db #0x00	; 0
      00030D 00                     941 	.db #0x00	; 0
      00030E 00                     942 	.db #0x00	; 0
      00030F 00                     943 	.db #0x00	; 0
      000310 00                     944 	.db #0x00	; 0
      000311 00                     945 	.db #0x00	; 0
      000312 00                     946 	.db #0x00	; 0
      000313 00                     947 	.db #0x00	; 0
      000314 00                     948 	.db #0x00	; 0
      000315 00                     949 	.db #0x00	; 0
      000316 00                     950 	.db #0x00	; 0
      000317 FF                     951 	.db #0xff	; 255
      000318 30                     952 	.db #0x30	; 48	'0'
      000319 30                     953 	.db #0x30	; 48	'0'
      00031A 18                     954 	.db #0x18	; 24
      00031B 00                     955 	.db #0x00	; 0
      00031C 00                     956 	.db #0x00	; 0
      00031D 00                     957 	.db #0x00	; 0
      00031E 00                     958 	.db #0x00	; 0
      00031F 00                     959 	.db #0x00	; 0
      000320 00                     960 	.db #0x00	; 0
      000321 00                     961 	.db #0x00	; 0
      000322 78                     962 	.db #0x78	; 120	'x'
      000323 0C                     963 	.db #0x0c	; 12
      000324 7C                     964 	.db #0x7c	; 124
      000325 CC                     965 	.db #0xcc	; 204
      000326 76                     966 	.db #0x76	; 118	'v'
      000327 00                     967 	.db #0x00	; 0
      000328 E0                     968 	.db #0xe0	; 224
      000329 60                     969 	.db #0x60	; 96
      00032A 60                     970 	.db #0x60	; 96
      00032B 7C                     971 	.db #0x7c	; 124
      00032C 66                     972 	.db #0x66	; 102	'f'
      00032D 66                     973 	.db #0x66	; 102	'f'
      00032E DC                     974 	.db #0xdc	; 220
      00032F 00                     975 	.db #0x00	; 0
      000330 00                     976 	.db #0x00	; 0
      000331 00                     977 	.db #0x00	; 0
      000332 78                     978 	.db #0x78	; 120	'x'
      000333 CC                     979 	.db #0xcc	; 204
      000334 C0                     980 	.db #0xc0	; 192
      000335 CC                     981 	.db #0xcc	; 204
      000336 78                     982 	.db #0x78	; 120	'x'
      000337 00                     983 	.db #0x00	; 0
      000338 1C                     984 	.db #0x1c	; 28
      000339 0C                     985 	.db #0x0c	; 12
      00033A 0C                     986 	.db #0x0c	; 12
      00033B 7C                     987 	.db #0x7c	; 124
      00033C CC                     988 	.db #0xcc	; 204
      00033D CC                     989 	.db #0xcc	; 204
      00033E 76                     990 	.db #0x76	; 118	'v'
      00033F 00                     991 	.db #0x00	; 0
      000340 00                     992 	.db #0x00	; 0
      000341 00                     993 	.db #0x00	; 0
      000342 78                     994 	.db #0x78	; 120	'x'
      000343 CC                     995 	.db #0xcc	; 204
      000344 FC                     996 	.db #0xfc	; 252
      000345 C0                     997 	.db #0xc0	; 192
      000346 78                     998 	.db #0x78	; 120	'x'
      000347 00                     999 	.db #0x00	; 0
      000348 38                    1000 	.db #0x38	; 56	'8'
      000349 6C                    1001 	.db #0x6c	; 108	'l'
      00034A 60                    1002 	.db #0x60	; 96
      00034B F0                    1003 	.db #0xf0	; 240
      00034C 60                    1004 	.db #0x60	; 96
      00034D 60                    1005 	.db #0x60	; 96
      00034E F0                    1006 	.db #0xf0	; 240
      00034F 00                    1007 	.db #0x00	; 0
      000350 00                    1008 	.db #0x00	; 0
      000351 00                    1009 	.db #0x00	; 0
      000352 76                    1010 	.db #0x76	; 118	'v'
      000353 CC                    1011 	.db #0xcc	; 204
      000354 CC                    1012 	.db #0xcc	; 204
      000355 7C                    1013 	.db #0x7c	; 124
      000356 0C                    1014 	.db #0x0c	; 12
      000357 F8                    1015 	.db #0xf8	; 248
      000358 E0                    1016 	.db #0xe0	; 224
      000359 60                    1017 	.db #0x60	; 96
      00035A 6C                    1018 	.db #0x6c	; 108	'l'
      00035B 76                    1019 	.db #0x76	; 118	'v'
      00035C 66                    1020 	.db #0x66	; 102	'f'
      00035D 66                    1021 	.db #0x66	; 102	'f'
      00035E E6                    1022 	.db #0xe6	; 230
      00035F 00                    1023 	.db #0x00	; 0
      000360 30                    1024 	.db #0x30	; 48	'0'
      000361 00                    1025 	.db #0x00	; 0
      000362 70                    1026 	.db #0x70	; 112	'p'
      000363 30                    1027 	.db #0x30	; 48	'0'
      000364 30                    1028 	.db #0x30	; 48	'0'
      000365 30                    1029 	.db #0x30	; 48	'0'
      000366 78                    1030 	.db #0x78	; 120	'x'
      000367 00                    1031 	.db #0x00	; 0
      000368 0C                    1032 	.db #0x0c	; 12
      000369 00                    1033 	.db #0x00	; 0
      00036A 0C                    1034 	.db #0x0c	; 12
      00036B 0C                    1035 	.db #0x0c	; 12
      00036C 0C                    1036 	.db #0x0c	; 12
      00036D CC                    1037 	.db #0xcc	; 204
      00036E CC                    1038 	.db #0xcc	; 204
      00036F 78                    1039 	.db #0x78	; 120	'x'
      000370 E0                    1040 	.db #0xe0	; 224
      000371 60                    1041 	.db #0x60	; 96
      000372 66                    1042 	.db #0x66	; 102	'f'
      000373 6C                    1043 	.db #0x6c	; 108	'l'
      000374 78                    1044 	.db #0x78	; 120	'x'
      000375 6C                    1045 	.db #0x6c	; 108	'l'
      000376 E6                    1046 	.db #0xe6	; 230
      000377 00                    1047 	.db #0x00	; 0
      000378 70                    1048 	.db #0x70	; 112	'p'
      000379 30                    1049 	.db #0x30	; 48	'0'
      00037A 30                    1050 	.db #0x30	; 48	'0'
      00037B 30                    1051 	.db #0x30	; 48	'0'
      00037C 30                    1052 	.db #0x30	; 48	'0'
      00037D 30                    1053 	.db #0x30	; 48	'0'
      00037E 78                    1054 	.db #0x78	; 120	'x'
      00037F 00                    1055 	.db #0x00	; 0
      000380 00                    1056 	.db #0x00	; 0
      000381 00                    1057 	.db #0x00	; 0
      000382 CC                    1058 	.db #0xcc	; 204
      000383 FE                    1059 	.db #0xfe	; 254
      000384 FE                    1060 	.db #0xfe	; 254
      000385 D6                    1061 	.db #0xd6	; 214
      000386 C6                    1062 	.db #0xc6	; 198
      000387 00                    1063 	.db #0x00	; 0
      000388 00                    1064 	.db #0x00	; 0
      000389 00                    1065 	.db #0x00	; 0
      00038A F8                    1066 	.db #0xf8	; 248
      00038B CC                    1067 	.db #0xcc	; 204
      00038C CC                    1068 	.db #0xcc	; 204
      00038D CC                    1069 	.db #0xcc	; 204
      00038E CC                    1070 	.db #0xcc	; 204
      00038F 00                    1071 	.db #0x00	; 0
      000390 00                    1072 	.db #0x00	; 0
      000391 00                    1073 	.db #0x00	; 0
      000392 78                    1074 	.db #0x78	; 120	'x'
      000393 CC                    1075 	.db #0xcc	; 204
      000394 CC                    1076 	.db #0xcc	; 204
      000395 CC                    1077 	.db #0xcc	; 204
      000396 78                    1078 	.db #0x78	; 120	'x'
      000397 00                    1079 	.db #0x00	; 0
      000398 00                    1080 	.db #0x00	; 0
      000399 00                    1081 	.db #0x00	; 0
      00039A DC                    1082 	.db #0xdc	; 220
      00039B 66                    1083 	.db #0x66	; 102	'f'
      00039C 66                    1084 	.db #0x66	; 102	'f'
      00039D 7C                    1085 	.db #0x7c	; 124
      00039E 60                    1086 	.db #0x60	; 96
      00039F F0                    1087 	.db #0xf0	; 240
      0003A0 00                    1088 	.db #0x00	; 0
      0003A1 00                    1089 	.db #0x00	; 0
      0003A2 76                    1090 	.db #0x76	; 118	'v'
      0003A3 CC                    1091 	.db #0xcc	; 204
      0003A4 CC                    1092 	.db #0xcc	; 204
      0003A5 7C                    1093 	.db #0x7c	; 124
      0003A6 0C                    1094 	.db #0x0c	; 12
      0003A7 1E                    1095 	.db #0x1e	; 30
      0003A8 00                    1096 	.db #0x00	; 0
      0003A9 00                    1097 	.db #0x00	; 0
      0003AA DC                    1098 	.db #0xdc	; 220
      0003AB 76                    1099 	.db #0x76	; 118	'v'
      0003AC 66                    1100 	.db #0x66	; 102	'f'
      0003AD 60                    1101 	.db #0x60	; 96
      0003AE F0                    1102 	.db #0xf0	; 240
      0003AF 00                    1103 	.db #0x00	; 0
      0003B0 00                    1104 	.db #0x00	; 0
      0003B1 00                    1105 	.db #0x00	; 0
      0003B2 7C                    1106 	.db #0x7c	; 124
      0003B3 C0                    1107 	.db #0xc0	; 192
      0003B4 78                    1108 	.db #0x78	; 120	'x'
      0003B5 0C                    1109 	.db #0x0c	; 12
      0003B6 F8                    1110 	.db #0xf8	; 248
      0003B7 00                    1111 	.db #0x00	; 0
      0003B8 10                    1112 	.db #0x10	; 16
      0003B9 30                    1113 	.db #0x30	; 48	'0'
      0003BA 7C                    1114 	.db #0x7c	; 124
      0003BB 30                    1115 	.db #0x30	; 48	'0'
      0003BC 30                    1116 	.db #0x30	; 48	'0'
      0003BD 34                    1117 	.db #0x34	; 52	'4'
      0003BE 18                    1118 	.db #0x18	; 24
      0003BF 00                    1119 	.db #0x00	; 0
      0003C0 00                    1120 	.db #0x00	; 0
      0003C1 00                    1121 	.db #0x00	; 0
      0003C2 CC                    1122 	.db #0xcc	; 204
      0003C3 CC                    1123 	.db #0xcc	; 204
      0003C4 CC                    1124 	.db #0xcc	; 204
      0003C5 CC                    1125 	.db #0xcc	; 204
      0003C6 76                    1126 	.db #0x76	; 118	'v'
      0003C7 00                    1127 	.db #0x00	; 0
      0003C8 00                    1128 	.db #0x00	; 0
      0003C9 00                    1129 	.db #0x00	; 0
      0003CA CC                    1130 	.db #0xcc	; 204
      0003CB CC                    1131 	.db #0xcc	; 204
      0003CC CC                    1132 	.db #0xcc	; 204
      0003CD 78                    1133 	.db #0x78	; 120	'x'
      0003CE 30                    1134 	.db #0x30	; 48	'0'
      0003CF 00                    1135 	.db #0x00	; 0
      0003D0 00                    1136 	.db #0x00	; 0
      0003D1 00                    1137 	.db #0x00	; 0
      0003D2 C6                    1138 	.db #0xc6	; 198
      0003D3 D6                    1139 	.db #0xd6	; 214
      0003D4 FE                    1140 	.db #0xfe	; 254
      0003D5 FE                    1141 	.db #0xfe	; 254
      0003D6 6C                    1142 	.db #0x6c	; 108	'l'
      0003D7 00                    1143 	.db #0x00	; 0
      0003D8 00                    1144 	.db #0x00	; 0
      0003D9 00                    1145 	.db #0x00	; 0
      0003DA C6                    1146 	.db #0xc6	; 198
      0003DB 6C                    1147 	.db #0x6c	; 108	'l'
      0003DC 38                    1148 	.db #0x38	; 56	'8'
      0003DD 6C                    1149 	.db #0x6c	; 108	'l'
      0003DE C6                    1150 	.db #0xc6	; 198
      0003DF 00                    1151 	.db #0x00	; 0
      0003E0 00                    1152 	.db #0x00	; 0
      0003E1 00                    1153 	.db #0x00	; 0
      0003E2 CC                    1154 	.db #0xcc	; 204
      0003E3 CC                    1155 	.db #0xcc	; 204
      0003E4 CC                    1156 	.db #0xcc	; 204
      0003E5 7C                    1157 	.db #0x7c	; 124
      0003E6 0C                    1158 	.db #0x0c	; 12
      0003E7 F8                    1159 	.db #0xf8	; 248
      0003E8 00                    1160 	.db #0x00	; 0
      0003E9 00                    1161 	.db #0x00	; 0
      0003EA FC                    1162 	.db #0xfc	; 252
      0003EB 98                    1163 	.db #0x98	; 152
      0003EC 30                    1164 	.db #0x30	; 48	'0'
      0003ED 64                    1165 	.db #0x64	; 100	'd'
      0003EE FC                    1166 	.db #0xfc	; 252
      0003EF 00                    1167 	.db #0x00	; 0
      0003F0 1C                    1168 	.db #0x1c	; 28
      0003F1 30                    1169 	.db #0x30	; 48	'0'
      0003F2 30                    1170 	.db #0x30	; 48	'0'
      0003F3 E0                    1171 	.db #0xe0	; 224
      0003F4 30                    1172 	.db #0x30	; 48	'0'
      0003F5 30                    1173 	.db #0x30	; 48	'0'
      0003F6 1C                    1174 	.db #0x1c	; 28
      0003F7 00                    1175 	.db #0x00	; 0
      0003F8 18                    1176 	.db #0x18	; 24
      0003F9 18                    1177 	.db #0x18	; 24
      0003FA 18                    1178 	.db #0x18	; 24
      0003FB 00                    1179 	.db #0x00	; 0
      0003FC 18                    1180 	.db #0x18	; 24
      0003FD 18                    1181 	.db #0x18	; 24
      0003FE 18                    1182 	.db #0x18	; 24
      0003FF 00                    1183 	.db #0x00	; 0
      000400 E0                    1184 	.db #0xe0	; 224
      000401 30                    1185 	.db #0x30	; 48	'0'
      000402 30                    1186 	.db #0x30	; 48	'0'
      000403 1C                    1187 	.db #0x1c	; 28
      000404 30                    1188 	.db #0x30	; 48	'0'
      000405 30                    1189 	.db #0x30	; 48	'0'
      000406 E0                    1190 	.db #0xe0	; 224
      000407 00                    1191 	.db #0x00	; 0
      000408 76                    1192 	.db #0x76	; 118	'v'
      000409 DC                    1193 	.db #0xdc	; 220
      00040A 00                    1194 	.db #0x00	; 0
      00040B 00                    1195 	.db #0x00	; 0
      00040C 00                    1196 	.db #0x00	; 0
      00040D 00                    1197 	.db #0x00	; 0
      00040E 00                    1198 	.db #0x00	; 0
      00040F 00                    1199 	.db #0x00	; 0
      000410 00                    1200 	.db #0x00	; 0
      000411 10                    1201 	.db #0x10	; 16
      000412 38                    1202 	.db #0x38	; 56	'8'
      000413 6C                    1203 	.db #0x6c	; 108	'l'
      000414 C6                    1204 	.db #0xc6	; 198
      000415 C6                    1205 	.db #0xc6	; 198
      000416 FE                    1206 	.db #0xfe	; 254
      000417 00                    1207 	.db #0x00	; 0
      000418                       1208 _pattern_black_0:
      000418 FF                    1209 	.db #0xff	; 255
      000419 FF                    1210 	.db #0xff	; 255
      00041A FF                    1211 	.db #0xff	; 255
      00041B FF                    1212 	.db #0xff	; 255
      00041C FF                    1213 	.db #0xff	; 255
      00041D FF                    1214 	.db #0xff	; 255
      00041E FF                    1215 	.db #0xff	; 255
      00041F FF                    1216 	.db #0xff	; 255
      000420                       1217 _pattern_black_1:
      000420 FE                    1218 	.db #0xfe	; 254
      000421 FF                    1219 	.db #0xff	; 255
      000422 FF                    1220 	.db #0xff	; 255
      000423 FF                    1221 	.db #0xff	; 255
      000424 FE                    1222 	.db #0xfe	; 254
      000425 FF                    1223 	.db #0xff	; 255
      000426 FF                    1224 	.db #0xff	; 255
      000427 FE                    1225 	.db #0xfe	; 254
      000428                       1226 _pattern_black_2:
      000428 FF                    1227 	.db #0xff	; 255
      000429 FF                    1228 	.db #0xff	; 255
      00042A FF                    1229 	.db #0xff	; 255
      00042B FF                    1230 	.db #0xff	; 255
      00042C FF                    1231 	.db #0xff	; 255
      00042D FB                    1232 	.db #0xfb	; 251
      00042E FF                    1233 	.db #0xff	; 255
      00042F BB                    1234 	.db #0xbb	; 187
      000430                       1235 _pattern_black_3:
      000430 FB                    1236 	.db #0xfb	; 251
      000431 FE                    1237 	.db #0xfe	; 254
      000432 FD                    1238 	.db #0xfd	; 253
      000433 FE                    1239 	.db #0xfe	; 254
      000434 F7                    1240 	.db #0xf7	; 247
      000435 FA                    1241 	.db #0xfa	; 250
      000436 AF                    1242 	.db #0xaf	; 175
      000437 55                    1243 	.db #0x55	; 85	'U'
      000438                       1244 _pattern_0:
      000438 9F                    1245 	.db #0x9f	; 159
      000439 90                    1246 	.db #0x90	; 144
      00043A 90                    1247 	.db #0x90	; 144
      00043B 93                    1248 	.db #0x93	; 147
      00043C 92                    1249 	.db #0x92	; 146
      00043D 92                    1250 	.db #0x92	; 146
      00043E 92                    1251 	.db #0x92	; 146
      00043F 92                    1252 	.db #0x92	; 146
      000440                       1253 _pattern_1:
      000440 FF                    1254 	.db #0xff	; 255
      000441 01                    1255 	.db #0x01	; 1
      000442 01                    1256 	.db #0x01	; 1
      000443 F9                    1257 	.db #0xf9	; 249
      000444 09                    1258 	.db #0x09	; 9
      000445 09                    1259 	.db #0x09	; 9
      000446 49                    1260 	.db #0x49	; 73	'I'
      000447 49                    1261 	.db #0x49	; 73	'I'
      000448                       1262 _pattern_2:
      000448 92                    1263 	.db #0x92	; 146
      000449 93                    1264 	.db #0x93	; 147
      00044A 90                    1265 	.db #0x90	; 144
      00044B 90                    1266 	.db #0x90	; 144
      00044C 9F                    1267 	.db #0x9f	; 159
      00044D 80                    1268 	.db #0x80	; 128
      00044E 80                    1269 	.db #0x80	; 128
      00044F FF                    1270 	.db #0xff	; 255
      000450                       1271 _pattern_3:
      000450 49                    1272 	.db #0x49	; 73	'I'
      000451 C9                    1273 	.db #0xc9	; 201
      000452 09                    1274 	.db #0x09	; 9
      000453 09                    1275 	.db #0x09	; 9
      000454 F9                    1276 	.db #0xf9	; 249
      000455 01                    1277 	.db #0x01	; 1
      000456 01                    1278 	.db #0x01	; 1
      000457 FF                    1279 	.db #0xff	; 255
      000458                       1280 _pattern_4:
      000458 7F                    1281 	.db #0x7f	; 127
      000459 81                    1282 	.db #0x81	; 129
      00045A 83                    1283 	.db #0x83	; 131
      00045B 87                    1284 	.db #0x87	; 135
      00045C 8F                    1285 	.db #0x8f	; 143
      00045D 9F                    1286 	.db #0x9f	; 159
      00045E BF                    1287 	.db #0xbf	; 191
      00045F FF                    1288 	.db #0xff	; 255
      000460                       1289 _pattern_5:
      000460 FE                    1290 	.db #0xfe	; 254
      000461 81                    1291 	.db #0x81	; 129
      000462 C1                    1292 	.db #0xc1	; 193
      000463 E1                    1293 	.db #0xe1	; 225
      000464 F1                    1294 	.db #0xf1	; 241
      000465 F9                    1295 	.db #0xf9	; 249
      000466 FD                    1296 	.db #0xfd	; 253
      000467 FF                    1297 	.db #0xff	; 255
      000468                       1298 _pattern_6:
      000468 FF                    1299 	.db #0xff	; 255
      000469 BF                    1300 	.db #0xbf	; 191
      00046A 9F                    1301 	.db #0x9f	; 159
      00046B 8F                    1302 	.db #0x8f	; 143
      00046C 87                    1303 	.db #0x87	; 135
      00046D 83                    1304 	.db #0x83	; 131
      00046E 81                    1305 	.db #0x81	; 129
      00046F 7F                    1306 	.db #0x7f	; 127
      000470                       1307 _pattern_7:
      000470 FF                    1308 	.db #0xff	; 255
      000471 FD                    1309 	.db #0xfd	; 253
      000472 F9                    1310 	.db #0xf9	; 249
      000473 F1                    1311 	.db #0xf1	; 241
      000474 E1                    1312 	.db #0xe1	; 225
      000475 C1                    1313 	.db #0xc1	; 193
      000476 81                    1314 	.db #0x81	; 129
      000477 FE                    1315 	.db #0xfe	; 254
      000478                       1316 _pattern_8:
      000478 7F                    1317 	.db #0x7f	; 127
      000479 AE                    1318 	.db #0xae	; 174
      00047A FF                    1319 	.db #0xff	; 255
      00047B 5B                    1320 	.db #0x5b	; 91
      00047C FF                    1321 	.db #0xff	; 255
      00047D AE                    1322 	.db #0xae	; 174
      00047E FF                    1323 	.db #0xff	; 255
      00047F DF                    1324 	.db #0xdf	; 223
      000480                       1325 _pattern_9:
      000480 FE                    1326 	.db #0xfe	; 254
      000481 BD                    1327 	.db #0xbd	; 189
      000482 DF                    1328 	.db #0xdf	; 223
      000483 7F                    1329 	.db #0x7f	; 127
      000484 FB                    1330 	.db #0xfb	; 251
      000485 DF                    1331 	.db #0xdf	; 223
      000486 FE                    1332 	.db #0xfe	; 254
      000487 EF                    1333 	.db #0xef	; 239
      000488                       1334 _pattern_10:
      000488 7F                    1335 	.db #0x7f	; 127
      000489 FF                    1336 	.db #0xff	; 255
      00048A ED                    1337 	.db #0xed	; 237
      00048B FF                    1338 	.db #0xff	; 255
      00048C B6                    1339 	.db #0xb6	; 182
      00048D FE                    1340 	.db #0xfe	; 254
      00048E DB                    1341 	.db #0xdb	; 219
      00048F 7D                    1342 	.db #0x7d	; 125
      000490                       1343 _pattern_11:
      000490 FE                    1344 	.db #0xfe	; 254
      000491 FF                    1345 	.db #0xff	; 255
      000492 FE                    1346 	.db #0xfe	; 254
      000493 77                    1347 	.db #0x77	; 119	'w'
      000494 FE                    1348 	.db #0xfe	; 254
      000495 DD                    1349 	.db #0xdd	; 221
      000496 EF                    1350 	.db #0xef	; 239
      000497 5A                    1351 	.db #0x5a	; 90	'Z'
      000498                       1352 _pattern_12:
      000498 7F                    1353 	.db #0x7f	; 127
      000499 D5                    1354 	.db #0xd5	; 213
      00049A BF                    1355 	.db #0xbf	; 191
      00049B ED                    1356 	.db #0xed	; 237
      00049C BF                    1357 	.db #0xbf	; 191
      00049D F5                    1358 	.db #0xf5	; 245
      00049E BF                    1359 	.db #0xbf	; 191
      00049F FF                    1360 	.db #0xff	; 255
      0004A0                       1361 _pattern_13:
      0004A0 FE                    1362 	.db #0xfe	; 254
      0004A1 5F                    1363 	.db #0x5f	; 95
      0004A2 F5                    1364 	.db #0xf5	; 245
      0004A3 DF                    1365 	.db #0xdf	; 223
      0004A4 FF                    1366 	.db #0xff	; 255
      0004A5 FF                    1367 	.db #0xff	; 255
      0004A6 FF                    1368 	.db #0xff	; 255
      0004A7 FF                    1369 	.db #0xff	; 255
      0004A8                       1370 _pattern_14:
      0004A8 EF                    1371 	.db #0xef	; 239
      0004A9 BF                    1372 	.db #0xbf	; 191
      0004AA 7F                    1373 	.db #0x7f	; 127
      0004AB FF                    1374 	.db #0xff	; 255
      0004AC FF                    1375 	.db #0xff	; 255
      0004AD FF                    1376 	.db #0xff	; 255
      0004AE DB                    1377 	.db #0xdb	; 219
      0004AF 7F                    1378 	.db #0x7f	; 127
      0004B0                       1379 _pattern_15:
      0004B0 FF                    1380 	.db #0xff	; 255
      0004B1 FD                    1381 	.db #0xfd	; 253
      0004B2 FF                    1382 	.db #0xff	; 255
      0004B3 DB                    1383 	.db #0xdb	; 219
      0004B4 FD                    1384 	.db #0xfd	; 253
      0004B5 7B                    1385 	.db #0x7b	; 123
      0004B6 D7                    1386 	.db #0xd7	; 215
      0004B7 FE                    1387 	.db #0xfe	; 254
      0004B8                       1388 _pattern_16:
      0004B8 7F                    1389 	.db #0x7f	; 127
      0004B9 FF                    1390 	.db #0xff	; 255
      0004BA EA                    1391 	.db #0xea	; 234
      0004BB DF                    1392 	.db #0xdf	; 223
      0004BC FF                    1393 	.db #0xff	; 255
      0004BD DF                    1394 	.db #0xdf	; 223
      0004BE FF                    1395 	.db #0xff	; 255
      0004BF DF                    1396 	.db #0xdf	; 223
      0004C0                       1397 _pattern_17:
      0004C0 FE                    1398 	.db #0xfe	; 254
      0004C1 FF                    1399 	.db #0xff	; 255
      0004C2 AF                    1400 	.db #0xaf	; 175
      0004C3 FA                    1401 	.db #0xfa	; 250
      0004C4 FF                    1402 	.db #0xff	; 255
      0004C5 FA                    1403 	.db #0xfa	; 250
      0004C6 FF                    1404 	.db #0xff	; 255
      0004C7 FA                    1405 	.db #0xfa	; 250
      0004C8                       1406 _pattern_18:
      0004C8 FF                    1407 	.db #0xff	; 255
      0004C9 DF                    1408 	.db #0xdf	; 223
      0004CA FF                    1409 	.db #0xff	; 255
      0004CB DF                    1410 	.db #0xdf	; 223
      0004CC FF                    1411 	.db #0xff	; 255
      0004CD EA                    1412 	.db #0xea	; 234
      0004CE FF                    1413 	.db #0xff	; 255
      0004CF 55                    1414 	.db #0x55	; 85	'U'
      0004D0                       1415 _pattern_19:
      0004D0 FF                    1416 	.db #0xff	; 255
      0004D1 FA                    1417 	.db #0xfa	; 250
      0004D2 FF                    1418 	.db #0xff	; 255
      0004D3 FA                    1419 	.db #0xfa	; 250
      0004D4 F7                    1420 	.db #0xf7	; 247
      0004D5 AA                    1421 	.db #0xaa	; 170
      0004D6 FF                    1422 	.db #0xff	; 255
      0004D7 56                    1423 	.db #0x56	; 86	'V'
      0004D8                       1424 _pattern_20:
      0004D8 3F                    1425 	.db #0x3f	; 63
      0004D9 7F                    1426 	.db #0x7f	; 127
      0004DA E0                    1427 	.db #0xe0	; 224
      0004DB CE                    1428 	.db #0xce	; 206
      0004DC E6                    1429 	.db #0xe6	; 230
      0004DD 7C                    1430 	.db #0x7c	; 124
      0004DE 39                    1431 	.db #0x39	; 57	'9'
      0004DF 03                    1432 	.db #0x03	; 3
      0004E0                       1433 _pattern_21:
      0004E0 FF                    1434 	.db #0xff	; 255
      0004E1 FF                    1435 	.db #0xff	; 255
      0004E2 00                    1436 	.db #0x00	; 0
      0004E3 DB                    1437 	.db #0xdb	; 219
      0004E4 DB                    1438 	.db #0xdb	; 219
      0004E5 00                    1439 	.db #0x00	; 0
      0004E6 FF                    1440 	.db #0xff	; 255
      0004E7 FF                    1441 	.db #0xff	; 255
      0004E8                       1442 _pattern_22:
      0004E8 FC                    1443 	.db #0xfc	; 252
      0004E9 FE                    1444 	.db #0xfe	; 254
      0004EA 07                    1445 	.db #0x07	; 7
      0004EB 73                    1446 	.db #0x73	; 115	's'
      0004EC 67                    1447 	.db #0x67	; 103	'g'
      0004ED 3E                    1448 	.db #0x3e	; 62
      0004EE 9C                    1449 	.db #0x9c	; 156
      0004EF C0                    1450 	.db #0xc0	; 192
      0004F0                       1451 _pattern_23:
      0004F0 06                    1452 	.db #0x06	; 6
      0004F1 00                    1453 	.db #0x00	; 0
      0004F2 03                    1454 	.db #0x03	; 3
      0004F3 04                    1455 	.db #0x04	; 4
      0004F4 05                    1456 	.db #0x05	; 5
      0004F5 05                    1457 	.db #0x05	; 5
      0004F6 05                    1458 	.db #0x05	; 5
      0004F7 05                    1459 	.db #0x05	; 5
      0004F8                       1460 _pattern_24:
      0004F8 00                    1461 	.db #0x00	; 0
      0004F9 00                    1462 	.db #0x00	; 0
      0004FA 33                    1463 	.db #0x33	; 51	'3'
      0004FB 44                    1464 	.db #0x44	; 68	'D'
      0004FC 55                    1465 	.db #0x55	; 85	'U'
      0004FD 55                    1466 	.db #0x55	; 85	'U'
      0004FE 55                    1467 	.db #0x55	; 85	'U'
      0004FF 55                    1468 	.db #0x55	; 85	'U'
      000500                       1469 _pattern_25:
      000500 60                    1470 	.db #0x60	; 96
      000501 00                    1471 	.db #0x00	; 0
      000502 40                    1472 	.db #0x40	; 64
      000503 20                    1473 	.db #0x20	; 32
      000504 20                    1474 	.db #0x20	; 32
      000505 20                    1475 	.db #0x20	; 32
      000506 20                    1476 	.db #0x20	; 32
      000507 20                    1477 	.db #0x20	; 32
      000508                       1478 _pattern_26:
      000508 05                    1479 	.db #0x05	; 5
      000509 05                    1480 	.db #0x05	; 5
      00050A 05                    1481 	.db #0x05	; 5
      00050B 05                    1482 	.db #0x05	; 5
      00050C 05                    1483 	.db #0x05	; 5
      00050D 05                    1484 	.db #0x05	; 5
      00050E 05                    1485 	.db #0x05	; 5
      00050F 05                    1486 	.db #0x05	; 5
      000510                       1487 _pattern_27:
      000510 55                    1488 	.db #0x55	; 85	'U'
      000511 55                    1489 	.db #0x55	; 85	'U'
      000512 55                    1490 	.db #0x55	; 85	'U'
      000513 55                    1491 	.db #0x55	; 85	'U'
      000514 55                    1492 	.db #0x55	; 85	'U'
      000515 55                    1493 	.db #0x55	; 85	'U'
      000516 55                    1494 	.db #0x55	; 85	'U'
      000517 55                    1495 	.db #0x55	; 85	'U'
      000518                       1496 _pattern_28:
      000518 20                    1497 	.db #0x20	; 32
      000519 20                    1498 	.db #0x20	; 32
      00051A 20                    1499 	.db #0x20	; 32
      00051B 20                    1500 	.db #0x20	; 32
      00051C 20                    1501 	.db #0x20	; 32
      00051D 20                    1502 	.db #0x20	; 32
      00051E 20                    1503 	.db #0x20	; 32
      00051F 20                    1504 	.db #0x20	; 32
      000520                       1505 _pattern_29:
      000520 05                    1506 	.db #0x05	; 5
      000521 05                    1507 	.db #0x05	; 5
      000522 07                    1508 	.db #0x07	; 7
      000523 07                    1509 	.db #0x07	; 7
      000524 07                    1510 	.db #0x07	; 7
      000525 05                    1511 	.db #0x05	; 5
      000526 05                    1512 	.db #0x05	; 5
      000527 05                    1513 	.db #0x05	; 5
      000528                       1514 _pattern_30:
      000528 55                    1515 	.db #0x55	; 85	'U'
      000529 55                    1516 	.db #0x55	; 85	'U'
      00052A FF                    1517 	.db #0xff	; 255
      00052B FF                    1518 	.db #0xff	; 255
      00052C FF                    1519 	.db #0xff	; 255
      00052D 55                    1520 	.db #0x55	; 85	'U'
      00052E 55                    1521 	.db #0x55	; 85	'U'
      00052F 55                    1522 	.db #0x55	; 85	'U'
      000530                       1523 _pattern_31:
      000530 20                    1524 	.db #0x20	; 32
      000531 20                    1525 	.db #0x20	; 32
      000532 E0                    1526 	.db #0xe0	; 224
      000533 E0                    1527 	.db #0xe0	; 224
      000534 E0                    1528 	.db #0xe0	; 224
      000535 20                    1529 	.db #0x20	; 32
      000536 20                    1530 	.db #0x20	; 32
      000537 20                    1531 	.db #0x20	; 32
      000538                       1532 _pattern_37:
      000538 05                    1533 	.db #0x05	; 5
      000539 05                    1534 	.db #0x05	; 5
      00053A 05                    1535 	.db #0x05	; 5
      00053B 05                    1536 	.db #0x05	; 5
      00053C 04                    1537 	.db #0x04	; 4
      00053D 03                    1538 	.db #0x03	; 3
      00053E 00                    1539 	.db #0x00	; 0
      00053F 06                    1540 	.db #0x06	; 6
      000540                       1541 _pattern_38:
      000540 55                    1542 	.db #0x55	; 85	'U'
      000541 55                    1543 	.db #0x55	; 85	'U'
      000542 55                    1544 	.db #0x55	; 85	'U'
      000543 55                    1545 	.db #0x55	; 85	'U'
      000544 44                    1546 	.db #0x44	; 68	'D'
      000545 33                    1547 	.db #0x33	; 51	'3'
      000546 00                    1548 	.db #0x00	; 0
      000547 00                    1549 	.db #0x00	; 0
      000548                       1550 _pattern_39:
      000548 20                    1551 	.db #0x20	; 32
      000549 20                    1552 	.db #0x20	; 32
      00054A 20                    1553 	.db #0x20	; 32
      00054B 20                    1554 	.db #0x20	; 32
      00054C 20                    1555 	.db #0x20	; 32
      00054D 40                    1556 	.db #0x40	; 64
      00054E 00                    1557 	.db #0x00	; 0
      00054F 60                    1558 	.db #0x60	; 96
      000550                       1559 _pattern_32:
      000550 03                    1560 	.db #0x03	; 3
      000551 39                    1561 	.db #0x39	; 57	'9'
      000552 7C                    1562 	.db #0x7c	; 124
      000553 E6                    1563 	.db #0xe6	; 230
      000554 CE                    1564 	.db #0xce	; 206
      000555 E0                    1565 	.db #0xe0	; 224
      000556 7F                    1566 	.db #0x7f	; 127
      000557 3F                    1567 	.db #0x3f	; 63
      000558                       1568 _pattern_33:
      000558 FF                    1569 	.db #0xff	; 255
      000559 FF                    1570 	.db #0xff	; 255
      00055A 00                    1571 	.db #0x00	; 0
      00055B DB                    1572 	.db #0xdb	; 219
      00055C DB                    1573 	.db #0xdb	; 219
      00055D 00                    1574 	.db #0x00	; 0
      00055E FF                    1575 	.db #0xff	; 255
      00055F FF                    1576 	.db #0xff	; 255
      000560                       1577 _pattern_34:
      000560 C0                    1578 	.db #0xc0	; 192
      000561 9C                    1579 	.db #0x9c	; 156
      000562 3E                    1580 	.db #0x3e	; 62
      000563 67                    1581 	.db #0x67	; 103	'g'
      000564 73                    1582 	.db #0x73	; 115	's'
      000565 07                    1583 	.db #0x07	; 7
      000566 FE                    1584 	.db #0xfe	; 254
      000567 FC                    1585 	.db #0xfc	; 252
      000568                       1586 _sprite_dust_0:
      000568 10                    1587 	.db #0x10	; 16
      000569 42                    1588 	.db #0x42	; 66	'B'
      00056A 10                    1589 	.db #0x10	; 16
      00056B 45                    1590 	.db #0x45	; 69	'E'
      00056C 20                    1591 	.db #0x20	; 32
      00056D 89                    1592 	.db #0x89	; 137
      00056E 20                    1593 	.db #0x20	; 32
      00056F 88                    1594 	.db #0x88	; 136
      000570                       1595 _sprite_dust_1:
      000570 10                    1596 	.db #0x10	; 16
      000571 42                    1597 	.db #0x42	; 66	'B'
      000572 00                    1598 	.db #0x00	; 0
      000573 04                    1599 	.db #0x04	; 4
      000574 20                    1600 	.db #0x20	; 32
      000575 81                    1601 	.db #0x81	; 129
      000576 20                    1602 	.db #0x20	; 32
      000577 08                    1603 	.db #0x08	; 8
      000578                       1604 _sprite_dust_2:
      000578 10                    1605 	.db #0x10	; 16
      000579 00                    1606 	.db #0x00	; 0
      00057A 00                    1607 	.db #0x00	; 0
      00057B 04                    1608 	.db #0x04	; 4
      00057C 20                    1609 	.db #0x20	; 32
      00057D 80                    1610 	.db #0x80	; 128
      00057E 20                    1611 	.db #0x20	; 32
      00057F 00                    1612 	.db #0x00	; 0
      000580                       1613 _sprite_dust_3:
      000580 10                    1614 	.db #0x10	; 16
      000581 00                    1615 	.db #0x00	; 0
      000582 00                    1616 	.db #0x00	; 0
      000583 04                    1617 	.db #0x04	; 4
      000584 00                    1618 	.db #0x00	; 0
      000585 00                    1619 	.db #0x00	; 0
      000586 20                    1620 	.db #0x20	; 32
      000587 00                    1621 	.db #0x00	; 0
      000588                       1622 _pattern_title:
      000588 FE                    1623 	.db #0xfe	; 254
      000589 FE                    1624 	.db #0xfe	; 254
      00058A FE                    1625 	.db #0xfe	; 254
      00058B FE                    1626 	.db #0xfe	; 254
      00058C FE                    1627 	.db #0xfe	; 254
      00058D FE                    1628 	.db #0xfe	; 254
      00058E FE                    1629 	.db #0xfe	; 254
      00058F 00                    1630 	.db #0x00	; 0
      000590                       1631 _color_black_0:
      000590 14                    1632 	.db #0x14	; 20
      000591 14                    1633 	.db #0x14	; 20
      000592 14                    1634 	.db #0x14	; 20
      000593 14                    1635 	.db #0x14	; 20
      000594 14                    1636 	.db #0x14	; 20
      000595 14                    1637 	.db #0x14	; 20
      000596 14                    1638 	.db #0x14	; 20
      000597 14                    1639 	.db #0x14	; 20
      000598                       1640 _color_black_1:
      000598 14                    1641 	.db #0x14	; 20
      000599 14                    1642 	.db #0x14	; 20
      00059A 14                    1643 	.db #0x14	; 20
      00059B 14                    1644 	.db #0x14	; 20
      00059C 14                    1645 	.db #0x14	; 20
      00059D 14                    1646 	.db #0x14	; 20
      00059E 14                    1647 	.db #0x14	; 20
      00059F 14                    1648 	.db #0x14	; 20
      0005A0                       1649 _color_black_2:
      0005A0 14                    1650 	.db #0x14	; 20
      0005A1 14                    1651 	.db #0x14	; 20
      0005A2 14                    1652 	.db #0x14	; 20
      0005A3 14                    1653 	.db #0x14	; 20
      0005A4 14                    1654 	.db #0x14	; 20
      0005A5 14                    1655 	.db #0x14	; 20
      0005A6 14                    1656 	.db #0x14	; 20
      0005A7 14                    1657 	.db #0x14	; 20
      0005A8                       1658 _color_black_3:
      0005A8 14                    1659 	.db #0x14	; 20
      0005A9 14                    1660 	.db #0x14	; 20
      0005AA 14                    1661 	.db #0x14	; 20
      0005AB 14                    1662 	.db #0x14	; 20
      0005AC 14                    1663 	.db #0x14	; 20
      0005AD 14                    1664 	.db #0x14	; 20
      0005AE 14                    1665 	.db #0x14	; 20
      0005AF 14                    1666 	.db #0x14	; 20
      0005B0                       1667 _color_0:
      0005B0 13                    1668 	.db #0x13	; 19
      0005B1 13                    1669 	.db #0x13	; 19
      0005B2 13                    1670 	.db #0x13	; 19
      0005B3 13                    1671 	.db #0x13	; 19
      0005B4 13                    1672 	.db #0x13	; 19
      0005B5 13                    1673 	.db #0x13	; 19
      0005B6 13                    1674 	.db #0x13	; 19
      0005B7 13                    1675 	.db #0x13	; 19
      0005B8                       1676 _color_1:
      0005B8 12                    1677 	.db #0x12	; 18
      0005B9 12                    1678 	.db #0x12	; 18
      0005BA 12                    1679 	.db #0x12	; 18
      0005BB 12                    1680 	.db #0x12	; 18
      0005BC 12                    1681 	.db #0x12	; 18
      0005BD 12                    1682 	.db #0x12	; 18
      0005BE 12                    1683 	.db #0x12	; 18
      0005BF 12                    1684 	.db #0x12	; 18
      0005C0                       1685 _color_2:
      0005C0 12                    1686 	.db #0x12	; 18
      0005C1 12                    1687 	.db #0x12	; 18
      0005C2 12                    1688 	.db #0x12	; 18
      0005C3 12                    1689 	.db #0x12	; 18
      0005C4 12                    1690 	.db #0x12	; 18
      0005C5 12                    1691 	.db #0x12	; 18
      0005C6 12                    1692 	.db #0x12	; 18
      0005C7 12                    1693 	.db #0x12	; 18
      0005C8                       1694 _color_3:
      0005C8 1C                    1695 	.db #0x1c	; 28
      0005C9 1C                    1696 	.db #0x1c	; 28
      0005CA 1C                    1697 	.db #0x1c	; 28
      0005CB 1C                    1698 	.db #0x1c	; 28
      0005CC 1C                    1699 	.db #0x1c	; 28
      0005CD 1C                    1700 	.db #0x1c	; 28
      0005CE 1C                    1701 	.db #0x1c	; 28
      0005CF 1C                    1702 	.db #0x1c	; 28
      0005D0                       1703 _color_4:
      0005D0 96                    1704 	.db #0x96	; 150
      0005D1 96                    1705 	.db #0x96	; 150
      0005D2 96                    1706 	.db #0x96	; 150
      0005D3 96                    1707 	.db #0x96	; 150
      0005D4 96                    1708 	.db #0x96	; 150
      0005D5 96                    1709 	.db #0x96	; 150
      0005D6 96                    1710 	.db #0x96	; 150
      0005D7 96                    1711 	.db #0x96	; 150
      0005D8                       1712 _color_5:
      0005D8 98                    1713 	.db #0x98	; 152
      0005D9 68                    1714 	.db #0x68	; 104	'h'
      0005DA 68                    1715 	.db #0x68	; 104	'h'
      0005DB 68                    1716 	.db #0x68	; 104	'h'
      0005DC 68                    1717 	.db #0x68	; 104	'h'
      0005DD 68                    1718 	.db #0x68	; 104	'h'
      0005DE 68                    1719 	.db #0x68	; 104	'h'
      0005DF 68                    1720 	.db #0x68	; 104	'h'
      0005E0                       1721 _color_6:
      0005E0 68                    1722 	.db #0x68	; 104	'h'
      0005E1 68                    1723 	.db #0x68	; 104	'h'
      0005E2 68                    1724 	.db #0x68	; 104	'h'
      0005E3 68                    1725 	.db #0x68	; 104	'h'
      0005E4 68                    1726 	.db #0x68	; 104	'h'
      0005E5 68                    1727 	.db #0x68	; 104	'h'
      0005E6 68                    1728 	.db #0x68	; 104	'h'
      0005E7 68                    1729 	.db #0x68	; 104	'h'
      0005E8                       1730 _color_7:
      0005E8 89                    1731 	.db #0x89	; 137
      0005E9 89                    1732 	.db #0x89	; 137
      0005EA 89                    1733 	.db #0x89	; 137
      0005EB 89                    1734 	.db #0x89	; 137
      0005EC 89                    1735 	.db #0x89	; 137
      0005ED 89                    1736 	.db #0x89	; 137
      0005EE 89                    1737 	.db #0x89	; 137
      0005EF 86                    1738 	.db #0x86	; 134
      0005F0                       1739 _color_8:
      0005F0 41                    1740 	.db #0x41	; 65	'A'
      0005F1 47                    1741 	.db #0x47	; 71	'G'
      0005F2 47                    1742 	.db #0x47	; 71	'G'
      0005F3 47                    1743 	.db #0x47	; 71	'G'
      0005F4 47                    1744 	.db #0x47	; 71	'G'
      0005F5 47                    1745 	.db #0x47	; 71	'G'
      0005F6 47                    1746 	.db #0x47	; 71	'G'
      0005F7 47                    1747 	.db #0x47	; 71	'G'
      0005F8                       1748 _color_9:
      0005F8 41                    1749 	.db #0x41	; 65	'A'
      0005F9 45                    1750 	.db #0x45	; 69	'E'
      0005FA 47                    1751 	.db #0x47	; 71	'G'
      0005FB 47                    1752 	.db #0x47	; 71	'G'
      0005FC 45                    1753 	.db #0x45	; 69	'E'
      0005FD 45                    1754 	.db #0x45	; 69	'E'
      0005FE 41                    1755 	.db #0x41	; 65	'A'
      0005FF 45                    1756 	.db #0x45	; 69	'E'
      000600                       1757 _color_10:
      000600 47                    1758 	.db #0x47	; 71	'G'
      000601 45                    1759 	.db #0x45	; 69	'E'
      000602 45                    1760 	.db #0x45	; 69	'E'
      000603 45                    1761 	.db #0x45	; 69	'E'
      000604 45                    1762 	.db #0x45	; 69	'E'
      000605 41                    1763 	.db #0x41	; 65	'A'
      000606 45                    1764 	.db #0x45	; 69	'E'
      000607 41                    1765 	.db #0x41	; 65	'A'
      000608                       1766 _color_11:
      000608 41                    1767 	.db #0x41	; 65	'A'
      000609 41                    1768 	.db #0x41	; 65	'A'
      00060A 41                    1769 	.db #0x41	; 65	'A'
      00060B 41                    1770 	.db #0x41	; 65	'A'
      00060C 41                    1771 	.db #0x41	; 65	'A'
      00060D 41                    1772 	.db #0x41	; 65	'A'
      00060E 41                    1773 	.db #0x41	; 65	'A'
      00060F 41                    1774 	.db #0x41	; 65	'A'
      000610                       1775 _color_12:
      000610 D1                    1776 	.db #0xd1	; 209
      000611 DF                    1777 	.db #0xdf	; 223
      000612 DF                    1778 	.db #0xdf	; 223
      000613 DF                    1779 	.db #0xdf	; 223
      000614 DF                    1780 	.db #0xdf	; 223
      000615 DF                    1781 	.db #0xdf	; 223
      000616 DF                    1782 	.db #0xdf	; 223
      000617 DF                    1783 	.db #0xdf	; 223
      000618                       1784 _color_13:
      000618 D1                    1785 	.db #0xd1	; 209
      000619 DF                    1786 	.db #0xdf	; 223
      00061A DF                    1787 	.db #0xdf	; 223
      00061B DF                    1788 	.db #0xdf	; 223
      00061C DF                    1789 	.db #0xdf	; 223
      00061D DF                    1790 	.db #0xdf	; 223
      00061E DF                    1791 	.db #0xdf	; 223
      00061F DF                    1792 	.db #0xdf	; 223
      000620                       1793 _color_14:
      000620 DF                    1794 	.db #0xdf	; 223
      000621 DF                    1795 	.db #0xdf	; 223
      000622 DF                    1796 	.db #0xdf	; 223
      000623 D1                    1797 	.db #0xd1	; 209
      000624 D1                    1798 	.db #0xd1	; 209
      000625 D1                    1799 	.db #0xd1	; 209
      000626 D1                    1800 	.db #0xd1	; 209
      000627 D1                    1801 	.db #0xd1	; 209
      000628                       1802 _color_15:
      000628 D1                    1803 	.db #0xd1	; 209
      000629 D1                    1804 	.db #0xd1	; 209
      00062A D1                    1805 	.db #0xd1	; 209
      00062B D1                    1806 	.db #0xd1	; 209
      00062C D1                    1807 	.db #0xd1	; 209
      00062D D1                    1808 	.db #0xd1	; 209
      00062E D1                    1809 	.db #0xd1	; 209
      00062F D1                    1810 	.db #0xd1	; 209
      000630                       1811 _color_16:
      000630 A1                    1812 	.db #0xa1	; 161
      000631 BF                    1813 	.db #0xbf	; 191
      000632 BF                    1814 	.db #0xbf	; 191
      000633 BF                    1815 	.db #0xbf	; 191
      000634 BF                    1816 	.db #0xbf	; 191
      000635 BF                    1817 	.db #0xbf	; 191
      000636 BF                    1818 	.db #0xbf	; 191
      000637 BF                    1819 	.db #0xbf	; 191
      000638                       1820 _color_17:
      000638 A1                    1821 	.db #0xa1	; 161
      000639 AF                    1822 	.db #0xaf	; 175
      00063A AF                    1823 	.db #0xaf	; 175
      00063B A1                    1824 	.db #0xa1	; 161
      00063C A1                    1825 	.db #0xa1	; 161
      00063D A1                    1826 	.db #0xa1	; 161
      00063E A1                    1827 	.db #0xa1	; 161
      00063F A1                    1828 	.db #0xa1	; 161
      000640                       1829 _color_18:
      000640 AF                    1830 	.db #0xaf	; 175
      000641 AF                    1831 	.db #0xaf	; 175
      000642 AF                    1832 	.db #0xaf	; 175
      000643 AF                    1833 	.db #0xaf	; 175
      000644 A1                    1834 	.db #0xa1	; 161
      000645 A1                    1835 	.db #0xa1	; 161
      000646 A1                    1836 	.db #0xa1	; 161
      000647 A1                    1837 	.db #0xa1	; 161
      000648                       1838 _color_19:
      000648 B1                    1839 	.db #0xb1	; 177
      000649 B1                    1840 	.db #0xb1	; 177
      00064A B1                    1841 	.db #0xb1	; 177
      00064B B1                    1842 	.db #0xb1	; 177
      00064C B1                    1843 	.db #0xb1	; 177
      00064D B1                    1844 	.db #0xb1	; 177
      00064E B1                    1845 	.db #0xb1	; 177
      00064F B1                    1846 	.db #0xb1	; 177
      000650                       1847 _color_column_1:
      000650 F1                    1848 	.db #0xf1	; 241
      000651 E1                    1849 	.db #0xe1	; 225
      000652 E1                    1850 	.db #0xe1	; 225
      000653 E1                    1851 	.db #0xe1	; 225
      000654 E1                    1852 	.db #0xe1	; 225
      000655 E1                    1853 	.db #0xe1	; 225
      000656 E1                    1854 	.db #0xe1	; 225
      000657 E1                    1855 	.db #0xe1	; 225
      000658                       1856 _color_column_2:
      000658 F1                    1857 	.db #0xf1	; 241
      000659 E1                    1858 	.db #0xe1	; 225
      00065A E1                    1859 	.db #0xe1	; 225
      00065B E1                    1860 	.db #0xe1	; 225
      00065C E1                    1861 	.db #0xe1	; 225
      00065D E1                    1862 	.db #0xe1	; 225
      00065E E1                    1863 	.db #0xe1	; 225
      00065F E1                    1864 	.db #0xe1	; 225
      000660                       1865 _color_column_3:
      000660 F1                    1866 	.db #0xf1	; 241
      000661 E1                    1867 	.db #0xe1	; 225
      000662 E1                    1868 	.db #0xe1	; 225
      000663 E1                    1869 	.db #0xe1	; 225
      000664 E1                    1870 	.db #0xe1	; 225
      000665 E1                    1871 	.db #0xe1	; 225
      000666 E1                    1872 	.db #0xe1	; 225
      000667 E1                    1873 	.db #0xe1	; 225
      000668                       1874 _color_column_4:
      000668 F1                    1875 	.db #0xf1	; 241
      000669 F1                    1876 	.db #0xf1	; 241
      00066A F1                    1877 	.db #0xf1	; 241
      00066B F1                    1878 	.db #0xf1	; 241
      00066C F1                    1879 	.db #0xf1	; 241
      00066D F1                    1880 	.db #0xf1	; 241
      00066E F1                    1881 	.db #0xf1	; 241
      00066F F1                    1882 	.db #0xf1	; 241
      000670                       1883 _color_column_5:
      000670 E1                    1884 	.db #0xe1	; 225
      000671 E1                    1885 	.db #0xe1	; 225
      000672 E1                    1886 	.db #0xe1	; 225
      000673 E1                    1887 	.db #0xe1	; 225
      000674 E1                    1888 	.db #0xe1	; 225
      000675 E1                    1889 	.db #0xe1	; 225
      000676 E1                    1890 	.db #0xe1	; 225
      000677 E1                    1891 	.db #0xe1	; 225
      000678                       1892 _color_column_6:
      000678 E1                    1893 	.db #0xe1	; 225
      000679 E1                    1894 	.db #0xe1	; 225
      00067A E1                    1895 	.db #0xe1	; 225
      00067B 41                    1896 	.db #0x41	; 65	'A'
      00067C 41                    1897 	.db #0x41	; 65	'A'
      00067D 41                    1898 	.db #0x41	; 65	'A'
      00067E 41                    1899 	.db #0x41	; 65	'A'
      00067F 41                    1900 	.db #0x41	; 65	'A'
      000680                       1901 _color_column_7:
      000680 F1                    1902 	.db #0xf1	; 241
      000681 F1                    1903 	.db #0xf1	; 241
      000682 F1                    1904 	.db #0xf1	; 241
      000683 F1                    1905 	.db #0xf1	; 241
      000684 F1                    1906 	.db #0xf1	; 241
      000685 F1                    1907 	.db #0xf1	; 241
      000686 F1                    1908 	.db #0xf1	; 241
      000687 F1                    1909 	.db #0xf1	; 241
      000688                       1910 _color_column_8:
      000688 E1                    1911 	.db #0xe1	; 225
      000689 E1                    1912 	.db #0xe1	; 225
      00068A E1                    1913 	.db #0xe1	; 225
      00068B F1                    1914 	.db #0xf1	; 241
      00068C E1                    1915 	.db #0xe1	; 225
      00068D E1                    1916 	.db #0xe1	; 225
      00068E E1                    1917 	.db #0xe1	; 225
      00068F E1                    1918 	.db #0xe1	; 225
      000690                       1919 _color_column_9:
      000690 41                    1920 	.db #0x41	; 65	'A'
      000691 41                    1921 	.db #0x41	; 65	'A'
      000692 41                    1922 	.db #0x41	; 65	'A'
      000693 F1                    1923 	.db #0xf1	; 241
      000694 41                    1924 	.db #0x41	; 65	'A'
      000695 41                    1925 	.db #0x41	; 65	'A'
      000696 41                    1926 	.db #0x41	; 65	'A'
      000697 41                    1927 	.db #0x41	; 65	'A'
      000698                       1928 _color_column_10:
      000698 F1                    1929 	.db #0xf1	; 241
      000699 F1                    1930 	.db #0xf1	; 241
      00069A F1                    1931 	.db #0xf1	; 241
      00069B F1                    1932 	.db #0xf1	; 241
      00069C F1                    1933 	.db #0xf1	; 241
      00069D F1                    1934 	.db #0xf1	; 241
      00069E F1                    1935 	.db #0xf1	; 241
      00069F F1                    1936 	.db #0xf1	; 241
      0006A0                       1937 _color_column_11:
      0006A0 E1                    1938 	.db #0xe1	; 225
      0006A1 E1                    1939 	.db #0xe1	; 225
      0006A2 E1                    1940 	.db #0xe1	; 225
      0006A3 E1                    1941 	.db #0xe1	; 225
      0006A4 E1                    1942 	.db #0xe1	; 225
      0006A5 E1                    1943 	.db #0xe1	; 225
      0006A6 E1                    1944 	.db #0xe1	; 225
      0006A7 E1                    1945 	.db #0xe1	; 225
      0006A8                       1946 _color_column_12:
      0006A8 41                    1947 	.db #0x41	; 65	'A'
      0006A9 41                    1948 	.db #0x41	; 65	'A'
      0006AA 41                    1949 	.db #0x41	; 65	'A'
      0006AB 41                    1950 	.db #0x41	; 65	'A'
      0006AC 41                    1951 	.db #0x41	; 65	'A'
      0006AD 41                    1952 	.db #0x41	; 65	'A'
      0006AE 41                    1953 	.db #0x41	; 65	'A'
      0006AF 41                    1954 	.db #0x41	; 65	'A'
      0006B0                       1955 _color_column_16:
      0006B0 F1                    1956 	.db #0xf1	; 241
      0006B1 F1                    1957 	.db #0xf1	; 241
      0006B2 F1                    1958 	.db #0xf1	; 241
      0006B3 F1                    1959 	.db #0xf1	; 241
      0006B4 F1                    1960 	.db #0xf1	; 241
      0006B5 F1                    1961 	.db #0xf1	; 241
      0006B6 F1                    1962 	.db #0xf1	; 241
      0006B7 F1                    1963 	.db #0xf1	; 241
      0006B8                       1964 _color_column_17:
      0006B8 E1                    1965 	.db #0xe1	; 225
      0006B9 E1                    1966 	.db #0xe1	; 225
      0006BA E1                    1967 	.db #0xe1	; 225
      0006BB E1                    1968 	.db #0xe1	; 225
      0006BC E1                    1969 	.db #0xe1	; 225
      0006BD E1                    1970 	.db #0xe1	; 225
      0006BE E1                    1971 	.db #0xe1	; 225
      0006BF E1                    1972 	.db #0xe1	; 225
      0006C0                       1973 _color_column_18:
      0006C0 41                    1974 	.db #0x41	; 65	'A'
      0006C1 41                    1975 	.db #0x41	; 65	'A'
      0006C2 41                    1976 	.db #0x41	; 65	'A'
      0006C3 41                    1977 	.db #0x41	; 65	'A'
      0006C4 41                    1978 	.db #0x41	; 65	'A'
      0006C5 E1                    1979 	.db #0xe1	; 225
      0006C6 E1                    1980 	.db #0xe1	; 225
      0006C7 E1                    1981 	.db #0xe1	; 225
      0006C8                       1982 _color_column_13:
      0006C8 E1                    1983 	.db #0xe1	; 225
      0006C9 E1                    1984 	.db #0xe1	; 225
      0006CA E1                    1985 	.db #0xe1	; 225
      0006CB E1                    1986 	.db #0xe1	; 225
      0006CC E1                    1987 	.db #0xe1	; 225
      0006CD E1                    1988 	.db #0xe1	; 225
      0006CE E1                    1989 	.db #0xe1	; 225
      0006CF F1                    1990 	.db #0xf1	; 241
      0006D0                       1991 _color_column_14:
      0006D0 E1                    1992 	.db #0xe1	; 225
      0006D1 E1                    1993 	.db #0xe1	; 225
      0006D2 E1                    1994 	.db #0xe1	; 225
      0006D3 E1                    1995 	.db #0xe1	; 225
      0006D4 E1                    1996 	.db #0xe1	; 225
      0006D5 E1                    1997 	.db #0xe1	; 225
      0006D6 E1                    1998 	.db #0xe1	; 225
      0006D7 F1                    1999 	.db #0xf1	; 241
      0006D8                       2000 _color_column_15:
      0006D8 E1                    2001 	.db #0xe1	; 225
      0006D9 E1                    2002 	.db #0xe1	; 225
      0006DA E1                    2003 	.db #0xe1	; 225
      0006DB E1                    2004 	.db #0xe1	; 225
      0006DC E1                    2005 	.db #0xe1	; 225
      0006DD E1                    2006 	.db #0xe1	; 225
      0006DE E1                    2007 	.db #0xe1	; 225
      0006DF F1                    2008 	.db #0xf1	; 241
      0006E0                       2009 _color_dust_0:
      0006E0 F1                    2010 	.db #0xf1	; 241
      0006E1 F1                    2011 	.db #0xf1	; 241
      0006E2 F1                    2012 	.db #0xf1	; 241
      0006E3 F1                    2013 	.db #0xf1	; 241
      0006E4 F1                    2014 	.db #0xf1	; 241
      0006E5 F1                    2015 	.db #0xf1	; 241
      0006E6 F1                    2016 	.db #0xf1	; 241
      0006E7 F1                    2017 	.db #0xf1	; 241
      0006E8                       2018 _color_dust_1:
      0006E8 F1                    2019 	.db #0xf1	; 241
      0006E9 F1                    2020 	.db #0xf1	; 241
      0006EA F1                    2021 	.db #0xf1	; 241
      0006EB F1                    2022 	.db #0xf1	; 241
      0006EC F1                    2023 	.db #0xf1	; 241
      0006ED F1                    2024 	.db #0xf1	; 241
      0006EE F1                    2025 	.db #0xf1	; 241
      0006EF F1                    2026 	.db #0xf1	; 241
      0006F0                       2027 _color_dust_2:
      0006F0 F1                    2028 	.db #0xf1	; 241
      0006F1 F1                    2029 	.db #0xf1	; 241
      0006F2 F1                    2030 	.db #0xf1	; 241
      0006F3 F1                    2031 	.db #0xf1	; 241
      0006F4 F1                    2032 	.db #0xf1	; 241
      0006F5 F1                    2033 	.db #0xf1	; 241
      0006F6 F1                    2034 	.db #0xf1	; 241
      0006F7 F1                    2035 	.db #0xf1	; 241
      0006F8                       2036 _color_dust_3:
      0006F8 F1                    2037 	.db #0xf1	; 241
      0006F9 F1                    2038 	.db #0xf1	; 241
      0006FA F1                    2039 	.db #0xf1	; 241
      0006FB F1                    2040 	.db #0xf1	; 241
      0006FC F1                    2041 	.db #0xf1	; 241
      0006FD F1                    2042 	.db #0xf1	; 241
      0006FE F1                    2043 	.db #0xf1	; 241
      0006FF F1                    2044 	.db #0xf1	; 241
      000700                       2045 _color_font_1:
      000700 F1                    2046 	.db #0xf1	; 241
      000701 F1                    2047 	.db #0xf1	; 241
      000702 E1                    2048 	.db #0xe1	; 225
      000703 71                    2049 	.db #0x71	; 113	'q'
      000704 71                    2050 	.db #0x71	; 113	'q'
      000705 51                    2051 	.db #0x51	; 81	'Q'
      000706 51                    2052 	.db #0x51	; 81	'Q'
      000707 41                    2053 	.db #0x41	; 65	'A'
      000708                       2054 _color_font_2:
      000708 61                    2055 	.db #0x61	; 97	'a'
      000709 61                    2056 	.db #0x61	; 97	'a'
      00070A 81                    2057 	.db #0x81	; 129
      00070B 81                    2058 	.db #0x81	; 129
      00070C 91                    2059 	.db #0x91	; 145
      00070D 91                    2060 	.db #0x91	; 145
      00070E E1                    2061 	.db #0xe1	; 225
      00070F E1                    2062 	.db #0xe1	; 225
      000710                       2063 _color_title_1:
      000710 A1                    2064 	.db #0xa1	; 161
      000711 A1                    2065 	.db #0xa1	; 161
      000712 A1                    2066 	.db #0xa1	; 161
      000713 A1                    2067 	.db #0xa1	; 161
      000714 A1                    2068 	.db #0xa1	; 161
      000715 A1                    2069 	.db #0xa1	; 161
      000716 A1                    2070 	.db #0xa1	; 161
      000717 A1                    2071 	.db #0xa1	; 161
      000718                       2072 _color_title_2:
      000718 B1                    2073 	.db #0xb1	; 177
      000719 B1                    2074 	.db #0xb1	; 177
      00071A B1                    2075 	.db #0xb1	; 177
      00071B B1                    2076 	.db #0xb1	; 177
      00071C B1                    2077 	.db #0xb1	; 177
      00071D B1                    2078 	.db #0xb1	; 177
      00071E B1                    2079 	.db #0xb1	; 177
      00071F B1                    2080 	.db #0xb1	; 177
      000720                       2081 _color_title_3:
      000720 D1                    2082 	.db #0xd1	; 209
      000721 D1                    2083 	.db #0xd1	; 209
      000722 D1                    2084 	.db #0xd1	; 209
      000723 D1                    2085 	.db #0xd1	; 209
      000724 D1                    2086 	.db #0xd1	; 209
      000725 D1                    2087 	.db #0xd1	; 209
      000726 D1                    2088 	.db #0xd1	; 209
      000727 D1                    2089 	.db #0xd1	; 209
      000728                       2090 _color_title_4:
      000728 F1                    2091 	.db #0xf1	; 241
      000729 F1                    2092 	.db #0xf1	; 241
      00072A F1                    2093 	.db #0xf1	; 241
      00072B F1                    2094 	.db #0xf1	; 241
      00072C F1                    2095 	.db #0xf1	; 241
      00072D F1                    2096 	.db #0xf1	; 241
      00072E F1                    2097 	.db #0xf1	; 241
      00072F F1                    2098 	.db #0xf1	; 241
      000730                       2099 _color_title_5:
      000730 71                    2100 	.db #0x71	; 113	'q'
      000731 71                    2101 	.db #0x71	; 113	'q'
      000732 71                    2102 	.db #0x71	; 113	'q'
      000733 71                    2103 	.db #0x71	; 113	'q'
      000734 71                    2104 	.db #0x71	; 113	'q'
      000735 71                    2105 	.db #0x71	; 113	'q'
      000736 71                    2106 	.db #0x71	; 113	'q'
      000737 71                    2107 	.db #0x71	; 113	'q'
      000738                       2108 _color_title_6:
      000738 51                    2109 	.db #0x51	; 81	'Q'
      000739 51                    2110 	.db #0x51	; 81	'Q'
      00073A 51                    2111 	.db #0x51	; 81	'Q'
      00073B 51                    2112 	.db #0x51	; 81	'Q'
      00073C 51                    2113 	.db #0x51	; 81	'Q'
      00073D 51                    2114 	.db #0x51	; 81	'Q'
      00073E 51                    2115 	.db #0x51	; 81	'Q'
      00073F 51                    2116 	.db #0x51	; 81	'Q'
      000740                       2117 _color_title_7:
      000740 41                    2118 	.db #0x41	; 65	'A'
      000741 41                    2119 	.db #0x41	; 65	'A'
      000742 41                    2120 	.db #0x41	; 65	'A'
      000743 41                    2121 	.db #0x41	; 65	'A'
      000744 41                    2122 	.db #0x41	; 65	'A'
      000745 41                    2123 	.db #0x41	; 65	'A'
      000746 41                    2124 	.db #0x41	; 65	'A'
      000747 41                    2125 	.db #0x41	; 65	'A'
      000748                       2126 _sprite_arrow_0:
      000748 00                    2127 	.db #0x00	; 0
      000749 00                    2128 	.db #0x00	; 0
      00074A 00                    2129 	.db #0x00	; 0
      00074B 00                    2130 	.db #0x00	; 0
      00074C 00                    2131 	.db #0x00	; 0
      00074D 00                    2132 	.db #0x00	; 0
      00074E 00                    2133 	.db #0x00	; 0
      00074F 00                    2134 	.db #0x00	; 0
      000750                       2135 _sprite_arrow_1:
      000750 FF                    2136 	.db #0xff	; 255
      000751 00                    2137 	.db #0x00	; 0
      000752 3F                    2138 	.db #0x3f	; 63
      000753 00                    2139 	.db #0x00	; 0
      000754 0F                    2140 	.db #0x0f	; 15
      000755 00                    2141 	.db #0x00	; 0
      000756 03                    2142 	.db #0x03	; 3
      000757 00                    2143 	.db #0x00	; 0
      000758                       2144 _sprite_arrow_2:
      000758 00                    2145 	.db #0x00	; 0
      000759 00                    2146 	.db #0x00	; 0
      00075A 00                    2147 	.db #0x00	; 0
      00075B 00                    2148 	.db #0x00	; 0
      00075C 00                    2149 	.db #0x00	; 0
      00075D 00                    2150 	.db #0x00	; 0
      00075E 00                    2151 	.db #0x00	; 0
      00075F 00                    2152 	.db #0x00	; 0
      000760                       2153 _sprite_arrow_3:
      000760 FF                    2154 	.db #0xff	; 255
      000761 00                    2155 	.db #0x00	; 0
      000762 FC                    2156 	.db #0xfc	; 252
      000763 00                    2157 	.db #0x00	; 0
      000764 F0                    2158 	.db #0xf0	; 240
      000765 00                    2159 	.db #0x00	; 0
      000766 C0                    2160 	.db #0xc0	; 192
      000767 00                    2161 	.db #0x00	; 0
      000768                       2162 _sprite_3x_hit:
      000768 0C                    2163 	.db #0x0c	; 12
      000769 02                    2164 	.db #0x02	; 2
      00076A 0C                    2165 	.db #0x0c	; 12
      00076B 02                    2166 	.db #0x02	; 2
      00076C 0C                    2167 	.db #0x0c	; 12
      00076D 00                    2168 	.db #0x00	; 0
      00076E 00                    2169 	.db #0x00	; 0
      00076F 00                    2170 	.db #0x00	; 0
      000770 15                    2171 	.db #0x15	; 21
      000771 15                    2172 	.db #0x15	; 21
      000772 1D                    2173 	.db #0x1d	; 29
      000773 15                    2174 	.db #0x15	; 21
      000774 15                    2175 	.db #0x15	; 21
      000775 00                    2176 	.db #0x00	; 0
      000776 00                    2177 	.db #0x00	; 0
      000777 00                    2178 	.db #0x00	; 0
      000778 00                    2179 	.db #0x00	; 0
      000779 00                    2180 	.db #0x00	; 0
      00077A A0                    2181 	.db #0xa0	; 160
      00077B 40                    2182 	.db #0x40	; 64
      00077C A0                    2183 	.db #0xa0	; 160
      00077D 00                    2184 	.db #0x00	; 0
      00077E 00                    2185 	.db #0x00	; 0
      00077F 00                    2186 	.db #0x00	; 0
      000780 70                    2187 	.db #0x70	; 112	'p'
      000781 20                    2188 	.db #0x20	; 32
      000782 20                    2189 	.db #0x20	; 32
      000783 20                    2190 	.db #0x20	; 32
      000784 20                    2191 	.db #0x20	; 32
      000785 00                    2192 	.db #0x00	; 0
      000786 00                    2193 	.db #0x00	; 0
      000787 00                    2194 	.db #0x00	; 0
      000788                       2195 _test:
      000788 0C                    2196 	.db #0x0c	; 12
      000789 02                    2197 	.db #0x02	; 2
      00078A 0C                    2198 	.db #0x0c	; 12
      00078B 02                    2199 	.db #0x02	; 2
      00078C 0C                    2200 	.db #0x0c	; 12
      00078D 00                    2201 	.db #0x00	; 0
      00078E 00                    2202 	.db #0x00	; 0
      00078F 00                    2203 	.db #0x00	; 0
      000790 15                    2204 	.db #0x15	; 21
      000791 15                    2205 	.db #0x15	; 21
      000792 1D                    2206 	.db #0x1d	; 29
      000793 15                    2207 	.db #0x15	; 21
      000794 15                    2208 	.db #0x15	; 21
      000795 00                    2209 	.db #0x00	; 0
      000796 00                    2210 	.db #0x00	; 0
      000797 00                    2211 	.db #0x00	; 0
      000798 00                    2212 	.db #0x00	; 0
      000799 00                    2213 	.db #0x00	; 0
      00079A A0                    2214 	.db #0xa0	; 160
      00079B 40                    2215 	.db #0x40	; 64
      00079C A0                    2216 	.db #0xa0	; 160
      00079D 00                    2217 	.db #0x00	; 0
      00079E 00                    2218 	.db #0x00	; 0
      00079F 00                    2219 	.db #0x00	; 0
      0007A0 70                    2220 	.db #0x70	; 112	'p'
      0007A1 20                    2221 	.db #0x20	; 32
      0007A2 20                    2222 	.db #0x20	; 32
      0007A3 20                    2223 	.db #0x20	; 32
      0007A4 20                    2224 	.db #0x20	; 32
      0007A5 00                    2225 	.db #0x00	; 0
      0007A6 00                    2226 	.db #0x00	; 0
      0007A7 00                    2227 	.db #0x00	; 0
                                   2228 ;src\/Graphics.h:8: void DrawString(const char* str, byte col, byte line) {
                                   2229 ;	---------------------------------
                                   2230 ; Function DrawString
                                   2231 ; ---------------------------------
      0007A8                       2232 _DrawString::
      0007A8 DD E5            [15] 2233 	push	ix
      0007AA DD 21 00 00      [14] 2234 	ld	ix,#0
      0007AE DD 39            [15] 2235 	add	ix,sp
                                   2236 ;src\/Graphics.h:9: while (*str) {
      0007B0 DD 6E 06         [19] 2237 	ld	l, 6 (ix)
      0007B3 DD 4E 04         [19] 2238 	ld	c, 4 (ix)
      0007B6 DD 46 05         [19] 2239 	ld	b, 5 (ix)
      0007B9                       2240 00101$:
      0007B9 0A               [ 7] 2241 	ld	a, (bc)
      0007BA B7               [ 4] 2242 	or	a, a
      0007BB 28 1A            [12] 2243 	jr	Z, 00104$
                                   2244 ;src\/Graphics.h:10: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0007BD 55               [ 4] 2245 	ld	d, l
      0007BE 2C               [ 4] 2246 	inc	l
      0007BF DD 75 06         [19] 2247 	ld	6 (ix), l
      0007C2 03               [ 6] 2248 	inc	bc
      0007C3 C6 0F            [ 7] 2249 	add	a, #0x0f
      0007C5 E5               [11] 2250 	push	hl
      0007C6 C5               [11] 2251 	push	bc
      0007C7 DD 66 07         [19] 2252 	ld	h, 7 (ix)
      0007CA 6A               [ 4] 2253 	ld	l, d
      0007CB E5               [11] 2254 	push	hl
      0007CC F5               [11] 2255 	push	af
      0007CD 33               [ 6] 2256 	inc	sp
      0007CE CDrEDr00         [17] 2257 	call	_DrawChar
      0007D1 F1               [10] 2258 	pop	af
      0007D2 33               [ 6] 2259 	inc	sp
      0007D3 C1               [10] 2260 	pop	bc
      0007D4 E1               [10] 2261 	pop	hl
      0007D5 18 E2            [12] 2262 	jr	00101$
      0007D7                       2263 00104$:
                                   2264 ;src\/Graphics.h:12: }
      0007D7 DD E1            [14] 2265 	pop	ix
      0007D9 C9               [10] 2266 	ret
                                   2267 ;src\/Graphics.h:14: void DrawNumber(word number, byte col, byte line) {
                                   2268 ;	---------------------------------
                                   2269 ; Function DrawNumber
                                   2270 ; ---------------------------------
      0007DA                       2271 _DrawNumber::
      0007DA DD E5            [15] 2272 	push	ix
      0007DC DD 21 00 00      [14] 2273 	ld	ix,#0
      0007E0 DD 39            [15] 2274 	add	ix,sp
      0007E2 21 FA FF         [10] 2275 	ld	hl, #-6
      0007E5 39               [11] 2276 	add	hl, sp
      0007E6 F9               [ 6] 2277 	ld	sp, hl
                                   2278 ;src\/Graphics.h:17: bool trailingZero = TRUE;
      0007E7 DD 36 FA 01      [19] 2279 	ld	-6 (ix), #0x01
                                   2280 ;src\/Graphics.h:19: DrawString("      ", col, line); // Clear space for number (6 digits)
      0007EB DD 66 07         [19] 2281 	ld	h, 7 (ix)
      0007EE DD 6E 06         [19] 2282 	ld	l, 6 (ix)
      0007F1 E5               [11] 2283 	push	hl
      0007F2 21r8Er08         [10] 2284 	ld	hl, #___str_0
      0007F5 E5               [11] 2285 	push	hl
      0007F6 CDrA8r07         [17] 2286 	call	_DrawString
      0007F9 F1               [10] 2287 	pop	af
      0007FA F1               [10] 2288 	pop	af
                                   2289 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0007FB DD 7E 06         [19] 2290 	ld	a, 6 (ix)
      0007FE DD 77 FF         [19] 2291 	ld	-1 (ix), a
      000801 1E 06            [ 7] 2292 	ld	e, #0x06
      000803                       2293 00109$:
      000803 7B               [ 4] 2294 	ld	a, e
      000804 B7               [ 4] 2295 	or	a, a
      000805 CAr89r08         [10] 2296 	jp	Z, 00111$
                                   2297 ;src\/Graphics.h:23: power = Power(10, i - 1);
      000808 7B               [ 4] 2298 	ld	a, e
      000809 3D               [ 4] 2299 	dec	a
      00080A D5               [11] 2300 	push	de
      00080B 57               [ 4] 2301 	ld	d,a
      00080C 1E 0A            [ 7] 2302 	ld	e,#0x0a
      00080E D5               [11] 2303 	push	de
      00080F CDr1Dr00         [17] 2304 	call	_Power
      000812 F1               [10] 2305 	pop	af
      000813 D1               [10] 2306 	pop	de
      000814 DD 75 FB         [19] 2307 	ld	-5 (ix), l
      000817 DD 74 FC         [19] 2308 	ld	-4 (ix), h
                                   2309 ;src\/Graphics.h:25: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00081A D5               [11] 2310 	push	de
      00081B DD 6E FB         [19] 2311 	ld	l, -5 (ix)
      00081E DD 66 FC         [19] 2312 	ld	h, -4 (ix)
      000821 E5               [11] 2313 	push	hl
      000822 DD 6E 04         [19] 2314 	ld	l, 4 (ix)
      000825 DD 66 05         [19] 2315 	ld	h, 5 (ix)
      000828 E5               [11] 2316 	push	hl
      000829 CDr00r00         [17] 2317 	call	__divuint
      00082C F1               [10] 2318 	pop	af
      00082D F1               [10] 2319 	pop	af
      00082E DD 75 FD         [19] 2320 	ld	-3 (ix), l
      000831 DD 74 FE         [19] 2321 	ld	-2 (ix), h
      000834 D1               [10] 2322 	pop	de
      000835 DD 7E FA         [19] 2323 	ld	a, -6 (ix)
      000838 B7               [ 4] 2324 	or	a, a
      000839 28 0C            [12] 2325 	jr	Z, 00102$
      00083B DD 7E FE         [19] 2326 	ld	a, -2 (ix)
      00083E DD B6 FD         [19] 2327 	or	a, -3 (ix)
      000841 28 04            [12] 2328 	jr	Z, 00102$
      000843 DD 36 FA 00      [19] 2329 	ld	-6 (ix), #0
      000847                       2330 00102$:
                                   2331 ;src\/Graphics.h:27: if(!trailingZero || i == 1) {
      000847 DD 7E FA         [19] 2332 	ld	a, -6 (ix)
      00084A B7               [ 4] 2333 	or	a, a
      00084B 28 04            [12] 2334 	jr	Z, 00104$
      00084D 7B               [ 4] 2335 	ld	a, e
      00084E 3D               [ 4] 2336 	dec	a
      00084F 20 31            [12] 2337 	jr	NZ, 00105$
      000851                       2338 00104$:
                                   2339 ;src\/Graphics.h:28: DrawChar((number / power) + CHAR_0, col, line);
      000851 DD 7E FD         [19] 2340 	ld	a, -3 (ix)
      000854 C6 3F            [ 7] 2341 	add	a, #0x3f
      000856 D5               [11] 2342 	push	de
      000857 DD 66 07         [19] 2343 	ld	h, 7 (ix)
      00085A E5               [11] 2344 	push	hl
      00085B 33               [ 6] 2345 	inc	sp
      00085C DD 66 FF         [19] 2346 	ld	h, -1 (ix)
      00085F E5               [11] 2347 	push	hl
      000860 33               [ 6] 2348 	inc	sp
      000861 F5               [11] 2349 	push	af
      000862 33               [ 6] 2350 	inc	sp
      000863 CDrEDr00         [17] 2351 	call	_DrawChar
      000866 F1               [10] 2352 	pop	af
      000867 33               [ 6] 2353 	inc	sp
      000868 DD 6E FB         [19] 2354 	ld	l, -5 (ix)
      00086B DD 66 FC         [19] 2355 	ld	h, -4 (ix)
      00086E E5               [11] 2356 	push	hl
      00086F DD 6E 04         [19] 2357 	ld	l, 4 (ix)
      000872 DD 66 05         [19] 2358 	ld	h, 5 (ix)
      000875 E5               [11] 2359 	push	hl
      000876 CDr00r00         [17] 2360 	call	__moduint
      000879 F1               [10] 2361 	pop	af
      00087A F1               [10] 2362 	pop	af
      00087B D1               [10] 2363 	pop	de
      00087C DD 75 04         [19] 2364 	ld	4 (ix), l
      00087F DD 74 05         [19] 2365 	ld	5 (ix), h
      000882                       2366 00105$:
                                   2367 ;src\/Graphics.h:32: col++;
      000882 DD 34 FF         [23] 2368 	inc	-1 (ix)
                                   2369 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000885 1D               [ 4] 2370 	dec	e
      000886 C3r03r08         [10] 2371 	jp	00109$
      000889                       2372 00111$:
                                   2373 ;src\/Graphics.h:37: }
      000889 DD F9            [10] 2374 	ld	sp, ix
      00088B DD E1            [14] 2375 	pop	ix
      00088D C9               [10] 2376 	ret
      00088E                       2377 ___str_0:
      00088E 20 20 20 20 20 20     2378 	.ascii "      "
      000894 00                    2379 	.db 0x00
                                   2380 ;src\/Graphics.h:39: void DrawColumn(byte col) {
                                   2381 ;	---------------------------------
                                   2382 ; Function DrawColumn
                                   2383 ; ---------------------------------
      000895                       2384 _DrawColumn::
      000895 DD E5            [15] 2385 	push	ix
      000897 DD 21 00 00      [14] 2386 	ld	ix,#0
      00089B DD 39            [15] 2387 	add	ix,sp
      00089D 3B               [ 6] 2388 	dec	sp
                                   2389 ;src\/Graphics.h:40: WRTVRM(MSX_modedata_screen2.name + col + 0, COLUMN_TOP_1);
      00089E 2A C7 F3         [16] 2390 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008A1 DD 4E 04         [19] 2391 	ld	c, 4 (ix)
      0008A4 06 00            [ 7] 2392 	ld	b, #0x00
      0008A6 09               [11] 2393 	add	hl, bc
      0008A7 C5               [11] 2394 	push	bc
      0008A8 3E 18            [ 7] 2395 	ld	a, #0x18
      0008AA F5               [11] 2396 	push	af
      0008AB 33               [ 6] 2397 	inc	sp
      0008AC E5               [11] 2398 	push	hl
      0008AD CDr00r00         [17] 2399 	call	_WRTVRM
      0008B0 F1               [10] 2400 	pop	af
      0008B1 33               [ 6] 2401 	inc	sp
      0008B2 C1               [10] 2402 	pop	bc
                                   2403 ;src\/Graphics.h:41: WRTVRM(MSX_modedata_screen2.name + col + 1, COLUMN_TOP_1 + 1);
      0008B3 2A C7 F3         [16] 2404 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008B6 09               [11] 2405 	add	hl, bc
      0008B7 23               [ 6] 2406 	inc	hl
      0008B8 C5               [11] 2407 	push	bc
      0008B9 3E 19            [ 7] 2408 	ld	a, #0x19
      0008BB F5               [11] 2409 	push	af
      0008BC 33               [ 6] 2410 	inc	sp
      0008BD E5               [11] 2411 	push	hl
      0008BE CDr00r00         [17] 2412 	call	_WRTVRM
      0008C1 F1               [10] 2413 	pop	af
      0008C2 33               [ 6] 2414 	inc	sp
      0008C3 C1               [10] 2415 	pop	bc
                                   2416 ;src\/Graphics.h:42: WRTVRM(MSX_modedata_screen2.name + col + 2, COLUMN_TOP_1 + 2);
      0008C4 2A C7 F3         [16] 2417 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008C7 09               [11] 2418 	add	hl, bc
      0008C8 23               [ 6] 2419 	inc	hl
      0008C9 23               [ 6] 2420 	inc	hl
      0008CA C5               [11] 2421 	push	bc
      0008CB 3E 1A            [ 7] 2422 	ld	a, #0x1a
      0008CD F5               [11] 2423 	push	af
      0008CE 33               [ 6] 2424 	inc	sp
      0008CF E5               [11] 2425 	push	hl
      0008D0 CDr00r00         [17] 2426 	call	_WRTVRM
      0008D3 F1               [10] 2427 	pop	af
      0008D4 33               [ 6] 2428 	inc	sp
      0008D5 C1               [10] 2429 	pop	bc
                                   2430 ;src\/Graphics.h:43: WRTVRM(MSX_modedata_screen2.name + col + 32, COLUMN_TOP_1 + 3);
      0008D6 2A C7 F3         [16] 2431 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008D9 09               [11] 2432 	add	hl, bc
      0008DA 11 20 00         [10] 2433 	ld	de, #0x0020
      0008DD 19               [11] 2434 	add	hl, de
      0008DE C5               [11] 2435 	push	bc
      0008DF 3E 1B            [ 7] 2436 	ld	a, #0x1b
      0008E1 F5               [11] 2437 	push	af
      0008E2 33               [ 6] 2438 	inc	sp
      0008E3 E5               [11] 2439 	push	hl
      0008E4 CDr00r00         [17] 2440 	call	_WRTVRM
      0008E7 F1               [10] 2441 	pop	af
      0008E8 33               [ 6] 2442 	inc	sp
      0008E9 C1               [10] 2443 	pop	bc
                                   2444 ;src\/Graphics.h:44: WRTVRM(MSX_modedata_screen2.name + col + 33, COLUMN_TOP_1 + 4);
      0008EA 2A C7 F3         [16] 2445 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008ED 09               [11] 2446 	add	hl, bc
      0008EE 11 21 00         [10] 2447 	ld	de, #0x0021
      0008F1 19               [11] 2448 	add	hl, de
      0008F2 C5               [11] 2449 	push	bc
      0008F3 3E 1C            [ 7] 2450 	ld	a, #0x1c
      0008F5 F5               [11] 2451 	push	af
      0008F6 33               [ 6] 2452 	inc	sp
      0008F7 E5               [11] 2453 	push	hl
      0008F8 CDr00r00         [17] 2454 	call	_WRTVRM
      0008FB F1               [10] 2455 	pop	af
      0008FC 33               [ 6] 2456 	inc	sp
      0008FD C1               [10] 2457 	pop	bc
                                   2458 ;src\/Graphics.h:45: WRTVRM(MSX_modedata_screen2.name + col + 34, COLUMN_TOP_1 + 5);
      0008FE 2A C7 F3         [16] 2459 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000901 09               [11] 2460 	add	hl, bc
      000902 11 22 00         [10] 2461 	ld	de, #0x0022
      000905 19               [11] 2462 	add	hl, de
      000906 C5               [11] 2463 	push	bc
      000907 3E 1D            [ 7] 2464 	ld	a, #0x1d
      000909 F5               [11] 2465 	push	af
      00090A 33               [ 6] 2466 	inc	sp
      00090B E5               [11] 2467 	push	hl
      00090C CDr00r00         [17] 2468 	call	_WRTVRM
      00090F F1               [10] 2469 	pop	af
                                   2470 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000910 DD 36 FF 00      [19] 2471 	ld	-1 (ix), #0
      000914 33               [ 6] 2472 	inc	sp
      000915 C1               [10] 2473 	pop	bc
      000916                       2474 00103$:
      000916 DD 7E FF         [19] 2475 	ld	a, -1 (ix)
      000919 D6 14            [ 7] 2476 	sub	a, #0x14
      00091B 30 58            [12] 2477 	jr	NC, 00101$
                                   2478 ;src\/Graphics.h:48: WRTVRM(MSX_modedata_screen2.name + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00091D 2A C7 F3         [16] 2479 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000920 09               [11] 2480 	add	hl, bc
      000921 11 40 00         [10] 2481 	ld	de, #0x0040
      000924 19               [11] 2482 	add	hl, de
      000925 DD 5E FF         [19] 2483 	ld	e, -1 (ix)
      000928 16 00            [ 7] 2484 	ld	d, #0x00
      00092A EB               [ 4] 2485 	ex	de, hl
      00092B 29               [11] 2486 	add	hl, hl
      00092C 29               [11] 2487 	add	hl, hl
      00092D 29               [11] 2488 	add	hl, hl
      00092E 29               [11] 2489 	add	hl, hl
      00092F 29               [11] 2490 	add	hl, hl
      000930 EB               [ 4] 2491 	ex	de, hl
      000931 19               [11] 2492 	add	hl, de
      000932 C5               [11] 2493 	push	bc
      000933 D5               [11] 2494 	push	de
      000934 3E 1E            [ 7] 2495 	ld	a, #0x1e
      000936 F5               [11] 2496 	push	af
      000937 33               [ 6] 2497 	inc	sp
      000938 E5               [11] 2498 	push	hl
      000939 CDr00r00         [17] 2499 	call	_WRTVRM
      00093C F1               [10] 2500 	pop	af
      00093D 33               [ 6] 2501 	inc	sp
      00093E D1               [10] 2502 	pop	de
      00093F C1               [10] 2503 	pop	bc
                                   2504 ;src\/Graphics.h:49: WRTVRM(MSX_modedata_screen2.name + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000940 2A C7 F3         [16] 2505 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000943 09               [11] 2506 	add	hl, bc
      000944 D5               [11] 2507 	push	de
      000945 11 41 00         [10] 2508 	ld	de, #0x0041
      000948 19               [11] 2509 	add	hl, de
      000949 D1               [10] 2510 	pop	de
      00094A 19               [11] 2511 	add	hl, de
      00094B C5               [11] 2512 	push	bc
      00094C D5               [11] 2513 	push	de
      00094D 3E 1F            [ 7] 2514 	ld	a, #0x1f
      00094F F5               [11] 2515 	push	af
      000950 33               [ 6] 2516 	inc	sp
      000951 E5               [11] 2517 	push	hl
      000952 CDr00r00         [17] 2518 	call	_WRTVRM
      000955 F1               [10] 2519 	pop	af
      000956 33               [ 6] 2520 	inc	sp
      000957 D1               [10] 2521 	pop	de
      000958 C1               [10] 2522 	pop	bc
                                   2523 ;src\/Graphics.h:50: WRTVRM(MSX_modedata_screen2.name + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000959 2A C7 F3         [16] 2524 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00095C 09               [11] 2525 	add	hl, bc
      00095D D5               [11] 2526 	push	de
      00095E 11 42 00         [10] 2527 	ld	de, #0x0042
      000961 19               [11] 2528 	add	hl, de
      000962 D1               [10] 2529 	pop	de
      000963 19               [11] 2530 	add	hl, de
      000964 C5               [11] 2531 	push	bc
      000965 3E 20            [ 7] 2532 	ld	a, #0x20
      000967 F5               [11] 2533 	push	af
      000968 33               [ 6] 2534 	inc	sp
      000969 E5               [11] 2535 	push	hl
      00096A CDr00r00         [17] 2536 	call	_WRTVRM
      00096D F1               [10] 2537 	pop	af
      00096E 33               [ 6] 2538 	inc	sp
      00096F C1               [10] 2539 	pop	bc
                                   2540 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000970 DD 34 FF         [23] 2541 	inc	-1 (ix)
      000973 18 A1            [12] 2542 	jr	00103$
      000975                       2543 00101$:
                                   2544 ;src\/Graphics.h:53: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8), COLUMN_MIDDLE_2);
      000975 2A C7 F3         [16] 2545 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000978 09               [11] 2546 	add	hl, bc
      000979 7C               [ 4] 2547 	ld	a, h
      00097A 3C               [ 4] 2548 	inc	a
      00097B 67               [ 4] 2549 	ld	h, a
      00097C C5               [11] 2550 	push	bc
      00097D 3E 21            [ 7] 2551 	ld	a, #0x21
      00097F F5               [11] 2552 	push	af
      000980 33               [ 6] 2553 	inc	sp
      000981 E5               [11] 2554 	push	hl
      000982 CDr00r00         [17] 2555 	call	_WRTVRM
      000985 F1               [10] 2556 	pop	af
      000986 33               [ 6] 2557 	inc	sp
      000987 C1               [10] 2558 	pop	bc
                                   2559 ;src\/Graphics.h:54: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000988 2A C7 F3         [16] 2560 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00098B 09               [11] 2561 	add	hl, bc
      00098C 11 01 01         [10] 2562 	ld	de, #0x0101
      00098F 19               [11] 2563 	add	hl, de
      000990 C5               [11] 2564 	push	bc
      000991 3E 22            [ 7] 2565 	ld	a, #0x22
      000993 F5               [11] 2566 	push	af
      000994 33               [ 6] 2567 	inc	sp
      000995 E5               [11] 2568 	push	hl
      000996 CDr00r00         [17] 2569 	call	_WRTVRM
      000999 F1               [10] 2570 	pop	af
      00099A 33               [ 6] 2571 	inc	sp
      00099B C1               [10] 2572 	pop	bc
                                   2573 ;src\/Graphics.h:55: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      00099C 2A C7 F3         [16] 2574 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00099F 09               [11] 2575 	add	hl, bc
      0009A0 11 02 01         [10] 2576 	ld	de, #0x0102
      0009A3 19               [11] 2577 	add	hl, de
      0009A4 C5               [11] 2578 	push	bc
      0009A5 3E 23            [ 7] 2579 	ld	a, #0x23
      0009A7 F5               [11] 2580 	push	af
      0009A8 33               [ 6] 2581 	inc	sp
      0009A9 E5               [11] 2582 	push	hl
      0009AA CDr00r00         [17] 2583 	call	_WRTVRM
      0009AD F1               [10] 2584 	pop	af
      0009AE 33               [ 6] 2585 	inc	sp
      0009AF C1               [10] 2586 	pop	bc
                                   2587 ;src\/Graphics.h:57: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16), COLUMN_MIDDLE_2);
      0009B0 2A C7 F3         [16] 2588 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009B3 09               [11] 2589 	add	hl, bc
      0009B4 7C               [ 4] 2590 	ld	a, h
      0009B5 C6 02            [ 7] 2591 	add	a, #0x02
      0009B7 67               [ 4] 2592 	ld	h, a
      0009B8 C5               [11] 2593 	push	bc
      0009B9 3E 21            [ 7] 2594 	ld	a, #0x21
      0009BB F5               [11] 2595 	push	af
      0009BC 33               [ 6] 2596 	inc	sp
      0009BD E5               [11] 2597 	push	hl
      0009BE CDr00r00         [17] 2598 	call	_WRTVRM
      0009C1 F1               [10] 2599 	pop	af
      0009C2 33               [ 6] 2600 	inc	sp
      0009C3 C1               [10] 2601 	pop	bc
                                   2602 ;src\/Graphics.h:58: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0009C4 2A C7 F3         [16] 2603 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009C7 09               [11] 2604 	add	hl, bc
      0009C8 11 01 02         [10] 2605 	ld	de, #0x0201
      0009CB 19               [11] 2606 	add	hl, de
      0009CC C5               [11] 2607 	push	bc
      0009CD 3E 22            [ 7] 2608 	ld	a, #0x22
      0009CF F5               [11] 2609 	push	af
      0009D0 33               [ 6] 2610 	inc	sp
      0009D1 E5               [11] 2611 	push	hl
      0009D2 CDr00r00         [17] 2612 	call	_WRTVRM
      0009D5 F1               [10] 2613 	pop	af
      0009D6 33               [ 6] 2614 	inc	sp
      0009D7 C1               [10] 2615 	pop	bc
                                   2616 ;src\/Graphics.h:59: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0009D8 2A C7 F3         [16] 2617 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009DB 09               [11] 2618 	add	hl, bc
      0009DC 11 02 02         [10] 2619 	ld	de, #0x0202
      0009DF 19               [11] 2620 	add	hl, de
      0009E0 C5               [11] 2621 	push	bc
      0009E1 3E 23            [ 7] 2622 	ld	a, #0x23
      0009E3 F5               [11] 2623 	push	af
      0009E4 33               [ 6] 2624 	inc	sp
      0009E5 E5               [11] 2625 	push	hl
      0009E6 CDr00r00         [17] 2626 	call	_WRTVRM
      0009E9 F1               [10] 2627 	pop	af
      0009EA 33               [ 6] 2628 	inc	sp
      0009EB C1               [10] 2629 	pop	bc
                                   2630 ;src\/Graphics.h:61: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0009EC 2A C7 F3         [16] 2631 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009EF 09               [11] 2632 	add	hl, bc
      0009F0 11 C0 02         [10] 2633 	ld	de, #0x02c0
      0009F3 19               [11] 2634 	add	hl, de
      0009F4 C5               [11] 2635 	push	bc
      0009F5 3E 24            [ 7] 2636 	ld	a, #0x24
      0009F7 F5               [11] 2637 	push	af
      0009F8 33               [ 6] 2638 	inc	sp
      0009F9 E5               [11] 2639 	push	hl
      0009FA CDr00r00         [17] 2640 	call	_WRTVRM
      0009FD F1               [10] 2641 	pop	af
      0009FE 33               [ 6] 2642 	inc	sp
      0009FF C1               [10] 2643 	pop	bc
                                   2644 ;src\/Graphics.h:62: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000A00 2A C7 F3         [16] 2645 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A03 09               [11] 2646 	add	hl, bc
      000A04 11 C1 02         [10] 2647 	ld	de, #0x02c1
      000A07 19               [11] 2648 	add	hl, de
      000A08 C5               [11] 2649 	push	bc
      000A09 3E 25            [ 7] 2650 	ld	a, #0x25
      000A0B F5               [11] 2651 	push	af
      000A0C 33               [ 6] 2652 	inc	sp
      000A0D E5               [11] 2653 	push	hl
      000A0E CDr00r00         [17] 2654 	call	_WRTVRM
      000A11 F1               [10] 2655 	pop	af
      000A12 33               [ 6] 2656 	inc	sp
      000A13 C1               [10] 2657 	pop	bc
                                   2658 ;src\/Graphics.h:63: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000A14 2A C7 F3         [16] 2659 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A17 09               [11] 2660 	add	hl, bc
      000A18 11 C2 02         [10] 2661 	ld	de, #0x02c2
      000A1B 19               [11] 2662 	add	hl, de
      000A1C C5               [11] 2663 	push	bc
      000A1D 3E 26            [ 7] 2664 	ld	a, #0x26
      000A1F F5               [11] 2665 	push	af
      000A20 33               [ 6] 2666 	inc	sp
      000A21 E5               [11] 2667 	push	hl
      000A22 CDr00r00         [17] 2668 	call	_WRTVRM
      000A25 F1               [10] 2669 	pop	af
      000A26 33               [ 6] 2670 	inc	sp
      000A27 C1               [10] 2671 	pop	bc
                                   2672 ;src\/Graphics.h:64: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000A28 2A C7 F3         [16] 2673 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A2B 09               [11] 2674 	add	hl, bc
      000A2C 11 E0 02         [10] 2675 	ld	de, #0x02e0
      000A2F 19               [11] 2676 	add	hl, de
      000A30 C5               [11] 2677 	push	bc
      000A31 3E 27            [ 7] 2678 	ld	a, #0x27
      000A33 F5               [11] 2679 	push	af
      000A34 33               [ 6] 2680 	inc	sp
      000A35 E5               [11] 2681 	push	hl
      000A36 CDr00r00         [17] 2682 	call	_WRTVRM
      000A39 F1               [10] 2683 	pop	af
      000A3A 33               [ 6] 2684 	inc	sp
      000A3B C1               [10] 2685 	pop	bc
                                   2686 ;src\/Graphics.h:65: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000A3C 2A C7 F3         [16] 2687 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A3F 09               [11] 2688 	add	hl, bc
      000A40 11 E1 02         [10] 2689 	ld	de, #0x02e1
      000A43 19               [11] 2690 	add	hl, de
      000A44 C5               [11] 2691 	push	bc
      000A45 3E 28            [ 7] 2692 	ld	a, #0x28
      000A47 F5               [11] 2693 	push	af
      000A48 33               [ 6] 2694 	inc	sp
      000A49 E5               [11] 2695 	push	hl
      000A4A CDr00r00         [17] 2696 	call	_WRTVRM
      000A4D F1               [10] 2697 	pop	af
      000A4E 33               [ 6] 2698 	inc	sp
      000A4F C1               [10] 2699 	pop	bc
                                   2700 ;src\/Graphics.h:66: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000A50 2A C7 F3         [16] 2701 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A53 09               [11] 2702 	add	hl, bc
      000A54 01 E2 02         [10] 2703 	ld	bc, #0x02e2
      000A57 09               [11] 2704 	add	hl, bc
      000A58 3E 29            [ 7] 2705 	ld	a, #0x29
      000A5A F5               [11] 2706 	push	af
      000A5B 33               [ 6] 2707 	inc	sp
      000A5C E5               [11] 2708 	push	hl
      000A5D CDr00r00         [17] 2709 	call	_WRTVRM
      000A60 F1               [10] 2710 	pop	af
      000A61 33               [ 6] 2711 	inc	sp
                                   2712 ;src\/Graphics.h:67: }
      000A62 33               [ 6] 2713 	inc	sp
      000A63 DD E1            [14] 2714 	pop	ix
      000A65 C9               [10] 2715 	ret
                                   2716 ;src\/Graphics.h:69: void DrawScore() {
                                   2717 ;	---------------------------------
                                   2718 ; Function DrawScore
                                   2719 ; ---------------------------------
      000A66                       2720 _DrawScore::
      000A66 DD E5            [15] 2721 	push	ix
      000A68 DD 21 00 00      [14] 2722 	ld	ix,#0
      000A6C DD 39            [15] 2723 	add	ix,sp
      000A6E F5               [11] 2724 	push	af
                                   2725 ;src\/Graphics.h:70: byte bgCounter = 0, bgColor;
      000A6F DD 36 FE 00      [19] 2726 	ld	-2 (ix), #0
                                   2727 ;src\/Graphics.h:74: if(newLevel) {
      000A73 3Ar07r00         [13] 2728 	ld	a,(#_newLevel + 0)
      000A76 B7               [ 4] 2729 	or	a, a
      000A77 CAr6Br0B         [10] 2730 	jp	Z, 00119$
                                   2731 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000A7A DD 36 FF 00      [19] 2732 	ld	-1 (ix), #0
      000A7E                       2733 00121$:
      000A7E DD 7E FF         [19] 2734 	ld	a, -1 (ix)
      000A81 D6 3C            [ 7] 2735 	sub	a, #0x3c
      000A83 D2r6Br0B         [10] 2736 	jp	NC, 00119$
                                   2737 ;src\/Graphics.h:76: lastJiffy = JIFFY;
      000A86 ED 4B 9E FC      [20] 2738 	ld	bc, (_JIFFY)
                                   2739 ;src\/Graphics.h:77: while(lastJiffy == JIFFY) { }
      000A8A                       2740 00101$:
      000A8A 2A 9E FC         [16] 2741 	ld	hl, (_JIFFY)
      000A8D BF               [ 4] 2742 	cp	a, a
      000A8E ED 42            [15] 2743 	sbc	hl, bc
      000A90 28 F8            [12] 2744 	jr	Z, 00101$
                                   2745 ;src\/Graphics.h:80: if(JIFFY & 0b00000110) {
      000A92 2A 9E FC         [16] 2746 	ld	hl, (_JIFFY)
      000A95 7D               [ 4] 2747 	ld	a, l
      000A96 E6 06            [ 7] 2748 	and	a, #0x06
      000A98 CAr4Br0B         [10] 2749 	jp	Z,00115$
                                   2750 ;src\/Graphics.h:81: DrawString(" LEVEL", 26, 4);
      000A9B 11 1A 04         [10] 2751 	ld	de, #0x041a
      000A9E D5               [11] 2752 	push	de
      000A9F 21rE8r0B         [10] 2753 	ld	hl, #___str_1
      000AA2 E5               [11] 2754 	push	hl
      000AA3 CDrA8r07         [17] 2755 	call	_DrawString
      000AA6 F1               [10] 2756 	pop	af
      000AA7 F1               [10] 2757 	pop	af
                                   2758 ;src\/Graphics.h:82: DrawNumber(level, 26, 5);
      000AA8 3Ar06r00         [13] 2759 	ld	a, (#_level + 0)
      000AAB 4F               [ 4] 2760 	ld	c, a
      000AAC 06 00            [ 7] 2761 	ld	b, #0x00
      000AAE 11 1A 05         [10] 2762 	ld	de, #0x051a
      000AB1 D5               [11] 2763 	push	de
      000AB2 C5               [11] 2764 	push	bc
      000AB3 CDrDAr07         [17] 2765 	call	_DrawNumber
      000AB6 F1               [10] 2766 	pop	af
      000AB7 F1               [10] 2767 	pop	af
                                   2768 ;src\/Graphics.h:88: switch(bgCounter++) {
      000AB8 DD 4E FE         [19] 2769 	ld	c, -2 (ix)
      000ABB DD 34 FE         [23] 2770 	inc	-2 (ix)
      000ABE 3E 07            [ 7] 2771 	ld	a, #0x07
      000AC0 91               [ 4] 2772 	sub	a, c
      000AC1 38 45            [12] 2773 	jr	C, 00112$
      000AC3 06 00            [ 7] 2774 	ld	b, #0x00
      000AC5 21rCCr0A         [10] 2775 	ld	hl, #00163$
      000AC8 09               [11] 2776 	add	hl, bc
      000AC9 09               [11] 2777 	add	hl, bc
      000ACA 09               [11] 2778 	add	hl, bc
      000ACB E9               [ 4] 2779 	jp	(hl)
      000ACC                       2780 00163$:
      000ACC C3rE4r0A         [10] 2781 	jp	00104$
      000ACF C3rE8r0A         [10] 2782 	jp	00105$
      000AD2 C3rECr0A         [10] 2783 	jp	00106$
      000AD5 C3rF0r0A         [10] 2784 	jp	00107$
      000AD8 C3rF4r0A         [10] 2785 	jp	00108$
      000ADB C3rF8r0A         [10] 2786 	jp	00109$
      000ADE C3rFCr0A         [10] 2787 	jp	00110$
      000AE1 C3r00r0B         [10] 2788 	jp	00111$
                                   2789 ;src\/Graphics.h:89: case 0:
      000AE4                       2790 00104$:
                                   2791 ;src\/Graphics.h:90: bgColor = 0x14;
      000AE4 0E 14            [ 7] 2792 	ld	c, #0x14
                                   2793 ;src\/Graphics.h:91: break;
      000AE6 18 22            [12] 2794 	jr	00113$
                                   2795 ;src\/Graphics.h:92: case 1:
      000AE8                       2796 00105$:
                                   2797 ;src\/Graphics.h:93: bgColor = 0x15;
      000AE8 0E 15            [ 7] 2798 	ld	c, #0x15
                                   2799 ;src\/Graphics.h:94: break;
      000AEA 18 1E            [12] 2800 	jr	00113$
                                   2801 ;src\/Graphics.h:95: case 2:
      000AEC                       2802 00106$:
                                   2803 ;src\/Graphics.h:96: bgColor = 0x17;
      000AEC 0E 17            [ 7] 2804 	ld	c, #0x17
                                   2805 ;src\/Graphics.h:97: break;
      000AEE 18 1A            [12] 2806 	jr	00113$
                                   2807 ;src\/Graphics.h:98: case 3:
      000AF0                       2808 00107$:
                                   2809 ;src\/Graphics.h:99: bgColor = 0x1e;
      000AF0 0E 1E            [ 7] 2810 	ld	c, #0x1e
                                   2811 ;src\/Graphics.h:100: break;
      000AF2 18 16            [12] 2812 	jr	00113$
                                   2813 ;src\/Graphics.h:101: case 4:
      000AF4                       2814 00108$:
                                   2815 ;src\/Graphics.h:102: bgColor = 0x1f;
      000AF4 0E 1F            [ 7] 2816 	ld	c, #0x1f
                                   2817 ;src\/Graphics.h:103: break;
      000AF6 18 12            [12] 2818 	jr	00113$
                                   2819 ;src\/Graphics.h:104: case 5:
      000AF8                       2820 00109$:
                                   2821 ;src\/Graphics.h:105: bgColor = 0x1e;
      000AF8 0E 1E            [ 7] 2822 	ld	c, #0x1e
                                   2823 ;src\/Graphics.h:106: break;
      000AFA 18 0E            [12] 2824 	jr	00113$
                                   2825 ;src\/Graphics.h:107: case 6:
      000AFC                       2826 00110$:
                                   2827 ;src\/Graphics.h:108: bgColor = 0x17;
      000AFC 0E 17            [ 7] 2828 	ld	c, #0x17
                                   2829 ;src\/Graphics.h:109: break;
      000AFE 18 0A            [12] 2830 	jr	00113$
                                   2831 ;src\/Graphics.h:110: case 7:
      000B00                       2832 00111$:
                                   2833 ;src\/Graphics.h:111: bgColor = 0x15;
      000B00 0E 15            [ 7] 2834 	ld	c, #0x15
                                   2835 ;src\/Graphics.h:112: bgCounter = 0;
      000B02 DD 36 FE 00      [19] 2836 	ld	-2 (ix), #0
                                   2837 ;src\/Graphics.h:113: break;
      000B06 18 02            [12] 2838 	jr	00113$
                                   2839 ;src\/Graphics.h:114: default:
      000B08                       2840 00112$:
                                   2841 ;src\/Graphics.h:115: bgColor = 0x11;
      000B08 0E 11            [ 7] 2842 	ld	c, #0x11
                                   2843 ;src\/Graphics.h:117: }
      000B0A                       2844 00113$:
                                   2845 ;src\/Graphics.h:118: FILVRM(MSX_modedata_screen2.color, 8 * 4, bgColor);
      000B0A 2A C9 F3         [16] 2846 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B0D C5               [11] 2847 	push	bc
      000B0E 79               [ 4] 2848 	ld	a, c
      000B0F F5               [11] 2849 	push	af
      000B10 33               [ 6] 2850 	inc	sp
      000B11 11 20 00         [10] 2851 	ld	de, #0x0020
      000B14 D5               [11] 2852 	push	de
      000B15 E5               [11] 2853 	push	hl
      000B16 CDr00r00         [17] 2854 	call	_FILVRM
      000B19 F1               [10] 2855 	pop	af
      000B1A F1               [10] 2856 	pop	af
      000B1B 33               [ 6] 2857 	inc	sp
      000B1C C1               [10] 2858 	pop	bc
                                   2859 ;src\/Graphics.h:119: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, bgColor);
      000B1D 2A C9 F3         [16] 2860 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B20 7C               [ 4] 2861 	ld	a, h
      000B21 C6 08            [ 7] 2862 	add	a, #0x08
      000B23 67               [ 4] 2863 	ld	h, a
      000B24 C5               [11] 2864 	push	bc
      000B25 79               [ 4] 2865 	ld	a, c
      000B26 F5               [11] 2866 	push	af
      000B27 33               [ 6] 2867 	inc	sp
      000B28 11 20 00         [10] 2868 	ld	de, #0x0020
      000B2B D5               [11] 2869 	push	de
      000B2C E5               [11] 2870 	push	hl
      000B2D CDr00r00         [17] 2871 	call	_FILVRM
      000B30 F1               [10] 2872 	pop	af
      000B31 F1               [10] 2873 	pop	af
      000B32 33               [ 6] 2874 	inc	sp
      000B33 C1               [10] 2875 	pop	bc
                                   2876 ;src\/Graphics.h:120: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, bgColor);
      000B34 2A C9 F3         [16] 2877 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B37 7C               [ 4] 2878 	ld	a, h
      000B38 C6 10            [ 7] 2879 	add	a, #0x10
      000B3A 67               [ 4] 2880 	ld	h, a
      000B3B 79               [ 4] 2881 	ld	a, c
      000B3C F5               [11] 2882 	push	af
      000B3D 33               [ 6] 2883 	inc	sp
      000B3E 11 20 00         [10] 2884 	ld	de, #0x0020
      000B41 D5               [11] 2885 	push	de
      000B42 E5               [11] 2886 	push	hl
      000B43 CDr00r00         [17] 2887 	call	_FILVRM
      000B46 F1               [10] 2888 	pop	af
      000B47 F1               [10] 2889 	pop	af
      000B48 33               [ 6] 2890 	inc	sp
      000B49 18 1A            [12] 2891 	jr	00122$
      000B4B                       2892 00115$:
                                   2893 ;src\/Graphics.h:125: DrawString("      ", 26, 4);
      000B4B 11 1A 04         [10] 2894 	ld	de, #0x041a
      000B4E D5               [11] 2895 	push	de
      000B4F 21rEFr0B         [10] 2896 	ld	hl, #___str_2
      000B52 E5               [11] 2897 	push	hl
      000B53 CDrA8r07         [17] 2898 	call	_DrawString
      000B56 F1               [10] 2899 	pop	af
      000B57 F1               [10] 2900 	pop	af
                                   2901 ;src\/Graphics.h:126: DrawString("      ", 26, 5);
      000B58 11 1A 05         [10] 2902 	ld	de, #0x051a
      000B5B D5               [11] 2903 	push	de
      000B5C 21rEFr0B         [10] 2904 	ld	hl, #___str_2
      000B5F E5               [11] 2905 	push	hl
      000B60 CDrA8r07         [17] 2906 	call	_DrawString
      000B63 F1               [10] 2907 	pop	af
      000B64 F1               [10] 2908 	pop	af
      000B65                       2909 00122$:
                                   2910 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000B65 DD 34 FF         [23] 2911 	inc	-1 (ix)
      000B68 C3r7Er0A         [10] 2912 	jp	00121$
      000B6B                       2913 00119$:
                                   2914 ;src\/Graphics.h:132: newLevel = FALSE;
      000B6B 21r07r00         [10] 2915 	ld	hl, #_newLevel
      000B6E 36 00            [10] 2916 	ld	(hl), #0x00
                                   2917 ;src\/Graphics.h:135: FILVRM(MSX_modedata_screen2.color, 8 * 4, 0x14);
      000B70 2A C9 F3         [16] 2918 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B73 3E 14            [ 7] 2919 	ld	a, #0x14
      000B75 F5               [11] 2920 	push	af
      000B76 33               [ 6] 2921 	inc	sp
      000B77 11 20 00         [10] 2922 	ld	de, #0x0020
      000B7A D5               [11] 2923 	push	de
      000B7B E5               [11] 2924 	push	hl
      000B7C CDr00r00         [17] 2925 	call	_FILVRM
      000B7F F1               [10] 2926 	pop	af
      000B80 F1               [10] 2927 	pop	af
      000B81 33               [ 6] 2928 	inc	sp
                                   2929 ;src\/Graphics.h:136: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, 0x14);
      000B82 2A C9 F3         [16] 2930 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B85 7C               [ 4] 2931 	ld	a, h
      000B86 C6 08            [ 7] 2932 	add	a, #0x08
      000B88 67               [ 4] 2933 	ld	h, a
      000B89 3E 14            [ 7] 2934 	ld	a, #0x14
      000B8B F5               [11] 2935 	push	af
      000B8C 33               [ 6] 2936 	inc	sp
      000B8D 11 20 00         [10] 2937 	ld	de, #0x0020
      000B90 D5               [11] 2938 	push	de
      000B91 E5               [11] 2939 	push	hl
      000B92 CDr00r00         [17] 2940 	call	_FILVRM
      000B95 F1               [10] 2941 	pop	af
      000B96 F1               [10] 2942 	pop	af
      000B97 33               [ 6] 2943 	inc	sp
                                   2944 ;src\/Graphics.h:137: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, 0x14);
      000B98 2A C9 F3         [16] 2945 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B9B 7C               [ 4] 2946 	ld	a, h
      000B9C C6 10            [ 7] 2947 	add	a, #0x10
      000B9E 67               [ 4] 2948 	ld	h, a
      000B9F 3E 14            [ 7] 2949 	ld	a, #0x14
      000BA1 F5               [11] 2950 	push	af
      000BA2 33               [ 6] 2951 	inc	sp
      000BA3 11 20 00         [10] 2952 	ld	de, #0x0020
      000BA6 D5               [11] 2953 	push	de
      000BA7 E5               [11] 2954 	push	hl
      000BA8 CDr00r00         [17] 2955 	call	_FILVRM
      000BAB F1               [10] 2956 	pop	af
      000BAC F1               [10] 2957 	pop	af
      000BAD 33               [ 6] 2958 	inc	sp
                                   2959 ;src\/Graphics.h:139: DrawString(" LEVEL", 26, 4);
      000BAE 11 1A 04         [10] 2960 	ld	de, #0x041a
      000BB1 D5               [11] 2961 	push	de
      000BB2 21rE8r0B         [10] 2962 	ld	hl, #___str_1
      000BB5 E5               [11] 2963 	push	hl
      000BB6 CDrA8r07         [17] 2964 	call	_DrawString
      000BB9 F1               [10] 2965 	pop	af
      000BBA F1               [10] 2966 	pop	af
                                   2967 ;src\/Graphics.h:140: DrawString("BLOCKS", 26, 9);
      000BBB 11 1A 09         [10] 2968 	ld	de, #0x091a
      000BBE D5               [11] 2969 	push	de
      000BBF 21rF6r0B         [10] 2970 	ld	hl, #___str_3
      000BC2 E5               [11] 2971 	push	hl
      000BC3 CDrA8r07         [17] 2972 	call	_DrawString
      000BC6 F1               [10] 2973 	pop	af
      000BC7 F1               [10] 2974 	pop	af
                                   2975 ;src\/Graphics.h:142: DrawNumber(blocksRemoved, 26, 10);
      000BC8 11 1A 0A         [10] 2976 	ld	de, #0x0a1a
      000BCB D5               [11] 2977 	push	de
      000BCC 2Ar04r00         [16] 2978 	ld	hl, (_blocksRemoved)
      000BCF E5               [11] 2979 	push	hl
      000BD0 CDrDAr07         [17] 2980 	call	_DrawNumber
      000BD3 F1               [10] 2981 	pop	af
      000BD4 F1               [10] 2982 	pop	af
                                   2983 ;src\/Graphics.h:143: DrawNumber(level, 26, 5);
      000BD5 3Ar06r00         [13] 2984 	ld	a, (#_level + 0)
      000BD8 4F               [ 4] 2985 	ld	c, a
      000BD9 06 00            [ 7] 2986 	ld	b, #0x00
      000BDB 11 1A 05         [10] 2987 	ld	de, #0x051a
      000BDE D5               [11] 2988 	push	de
      000BDF C5               [11] 2989 	push	bc
      000BE0 CDrDAr07         [17] 2990 	call	_DrawNumber
                                   2991 ;src\/Graphics.h:145: }
      000BE3 DD F9            [10] 2992 	ld	sp,ix
      000BE5 DD E1            [14] 2993 	pop	ix
      000BE7 C9               [10] 2994 	ret
      000BE8                       2995 ___str_1:
      000BE8 20 4C 45 56 45 4C     2996 	.ascii " LEVEL"
      000BEE 00                    2997 	.db 0x00
      000BEF                       2998 ___str_2:
      000BEF 20 20 20 20 20 20     2999 	.ascii "      "
      000BF5 00                    3000 	.db 0x00
      000BF6                       3001 ___str_3:
      000BF6 42 4C 4F 43 4B 53     3002 	.ascii "BLOCKS"
      000BFC 00                    3003 	.db 0x00
                                   3004 ;src\/Graphics.h:147: void DrawBackground() {
                                   3005 ;	---------------------------------
                                   3006 ; Function DrawBackground
                                   3007 ; ---------------------------------
      000BFD                       3008 _DrawBackground::
                                   3009 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000BFD 01 00 00         [10] 3010 	ld	bc, #0x0000
      000C00                       3011 00103$:
      000C00 78               [ 4] 3012 	ld	a, b
      000C01 EE 80            [ 7] 3013 	xor	a, #0x80
      000C03 D6 83            [ 7] 3014 	sub	a, #0x83
      000C05 30 14            [12] 3015 	jr	NC, 00101$
                                   3016 ;src\/Graphics.h:150: WRTVRM(MSX_modedata_screen2.name + i, 0); // test
      000C07 2A C7 F3         [16] 3017 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000C0A 59               [ 4] 3018 	ld	e, c
      000C0B 50               [ 4] 3019 	ld	d, b
      000C0C 19               [11] 3020 	add	hl, de
      000C0D C5               [11] 3021 	push	bc
      000C0E AF               [ 4] 3022 	xor	a, a
      000C0F F5               [11] 3023 	push	af
      000C10 33               [ 6] 3024 	inc	sp
      000C11 E5               [11] 3025 	push	hl
      000C12 CDr00r00         [17] 3026 	call	_WRTVRM
      000C15 F1               [10] 3027 	pop	af
      000C16 33               [ 6] 3028 	inc	sp
      000C17 C1               [10] 3029 	pop	bc
                                   3030 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C18 03               [ 6] 3031 	inc	bc
      000C19 18 E5            [12] 3032 	jr	00103$
      000C1B                       3033 00101$:
                                   3034 ;src\/Graphics.h:153: DrawColumn(7);
      000C1B 3E 07            [ 7] 3035 	ld	a, #0x07
      000C1D F5               [11] 3036 	push	af
      000C1E 33               [ 6] 3037 	inc	sp
      000C1F CDr95r08         [17] 3038 	call	_DrawColumn
      000C22 33               [ 6] 3039 	inc	sp
                                   3040 ;src\/Graphics.h:154: DrawColumn(22);
      000C23 3E 16            [ 7] 3041 	ld	a, #0x16
      000C25 F5               [11] 3042 	push	af
      000C26 33               [ 6] 3043 	inc	sp
      000C27 CDr95r08         [17] 3044 	call	_DrawColumn
      000C2A 33               [ 6] 3045 	inc	sp
                                   3046 ;src\/Graphics.h:156: DrawScore();
                                   3047 ;src\/Graphics.h:192: }
      000C2B C3r66r0A         [10] 3048 	jp	_DrawScore
                                   3049 ;src\/Graphics.h:194: void DrawArrow(byte x, byte y) {
                                   3050 ;	---------------------------------
                                   3051 ; Function DrawArrow
                                   3052 ; ---------------------------------
      000C2E                       3053 _DrawArrow::
      000C2E DD E5            [15] 3054 	push	ix
      000C30 DD 21 00 00      [14] 3055 	ld	ix,#0
      000C34 DD 39            [15] 3056 	add	ix,sp
      000C36 21 F8 FF         [10] 3057 	ld	hl, #-8
      000C39 39               [11] 3058 	add	hl, sp
      000C3A F9               [ 6] 3059 	ld	sp, hl
                                   3060 ;src\/Graphics.h:195: const byte colors[] = {
      000C3B 21 00 00         [10] 3061 	ld	hl, #0
      000C3E 39               [11] 3062 	add	hl, sp
      000C3F EB               [ 4] 3063 	ex	de, hl
      000C40 3E 0F            [ 7] 3064 	ld	a, #0x0f
      000C42 12               [ 7] 3065 	ld	(de), a
      000C43 6B               [ 4] 3066 	ld	l, e
      000C44 62               [ 4] 3067 	ld	h, d
      000C45 23               [ 6] 3068 	inc	hl
      000C46 36 0E            [10] 3069 	ld	(hl), #0x0e
      000C48 6B               [ 4] 3070 	ld	l, e
      000C49 62               [ 4] 3071 	ld	h, d
      000C4A 23               [ 6] 3072 	inc	hl
      000C4B 23               [ 6] 3073 	inc	hl
      000C4C 36 05            [10] 3074 	ld	(hl), #0x05
      000C4E 6B               [ 4] 3075 	ld	l, e
      000C4F 62               [ 4] 3076 	ld	h, d
      000C50 23               [ 6] 3077 	inc	hl
      000C51 23               [ 6] 3078 	inc	hl
      000C52 23               [ 6] 3079 	inc	hl
      000C53 36 04            [10] 3080 	ld	(hl), #0x04
      000C55 21 04 00         [10] 3081 	ld	hl, #0x0004
      000C58 19               [11] 3082 	add	hl, de
      000C59 36 04            [10] 3083 	ld	(hl), #0x04
      000C5B 21 05 00         [10] 3084 	ld	hl, #0x0005
      000C5E 19               [11] 3085 	add	hl, de
      000C5F 36 05            [10] 3086 	ld	(hl), #0x05
      000C61 21 06 00         [10] 3087 	ld	hl, #0x0006
      000C64 19               [11] 3088 	add	hl, de
      000C65 36 0E            [10] 3089 	ld	(hl), #0x0e
      000C67 21 07 00         [10] 3090 	ld	hl, #0x0007
      000C6A 19               [11] 3091 	add	hl, de
      000C6B 36 0F            [10] 3092 	ld	(hl), #0x0f
                                   3093 ;src\/Graphics.h:206: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000C6D 2A 9E FC         [16] 3094 	ld	hl, (_JIFFY)
      000C70 7D               [ 4] 3095 	ld	a, l
      000C71 E6 0E            [ 7] 3096 	and	a, #0x0e
      000C73 4F               [ 4] 3097 	ld	c, a
      000C74 06 00            [ 7] 3098 	ld	b, #0x00
      000C76 CB 38            [ 8] 3099 	srl	b
      000C78 CB 19            [ 8] 3100 	rr	c
                                   3101 ;src\/Graphics.h:213: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	y - 1);
      000C7A DD 46 05         [19] 3102 	ld	b, 5 (ix)
      000C7D 05               [ 4] 3103 	dec	b
      000C7E 2A CD F3         [16] 3104 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000C81 C5               [11] 3105 	push	bc
      000C82 D5               [11] 3106 	push	de
      000C83 C5               [11] 3107 	push	bc
      000C84 33               [ 6] 3108 	inc	sp
      000C85 E5               [11] 3109 	push	hl
      000C86 CDr00r00         [17] 3110 	call	_WRTVRM
      000C89 F1               [10] 3111 	pop	af
      000C8A 33               [ 6] 3112 	inc	sp
      000C8B D1               [10] 3113 	pop	de
      000C8C C1               [10] 3114 	pop	bc
                                   3115 ;src\/Graphics.h:214: WRTVRM(MSX_modedata_screen2.sprite_attribute + 1, 	x);
      000C8D 2A CD F3         [16] 3116 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000C90 23               [ 6] 3117 	inc	hl
      000C91 C5               [11] 3118 	push	bc
      000C92 D5               [11] 3119 	push	de
      000C93 DD 7E 04         [19] 3120 	ld	a, 4 (ix)
      000C96 F5               [11] 3121 	push	af
      000C97 33               [ 6] 3122 	inc	sp
      000C98 E5               [11] 3123 	push	hl
      000C99 CDr00r00         [17] 3124 	call	_WRTVRM
      000C9C F1               [10] 3125 	pop	af
      000C9D 33               [ 6] 3126 	inc	sp
      000C9E D1               [10] 3127 	pop	de
      000C9F C1               [10] 3128 	pop	bc
                                   3129 ;src\/Graphics.h:215: WRTVRM(MSX_modedata_screen2.sprite_attribute + 2, 	SPRITE_PATTERN_DOWN_ARROW);
      000CA0 2A CD F3         [16] 3130 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CA3 23               [ 6] 3131 	inc	hl
      000CA4 23               [ 6] 3132 	inc	hl
      000CA5 C5               [11] 3133 	push	bc
      000CA6 D5               [11] 3134 	push	de
      000CA7 AF               [ 4] 3135 	xor	a, a
      000CA8 F5               [11] 3136 	push	af
      000CA9 33               [ 6] 3137 	inc	sp
      000CAA E5               [11] 3138 	push	hl
      000CAB CDr00r00         [17] 3139 	call	_WRTVRM
      000CAE F1               [10] 3140 	pop	af
      000CAF 33               [ 6] 3141 	inc	sp
      000CB0 D1               [10] 3142 	pop	de
      000CB1 C1               [10] 3143 	pop	bc
                                   3144 ;src\/Graphics.h:216: WRTVRM(MSX_modedata_screen2.sprite_attribute + 3, 	colors[colorIndex]);
      000CB2 69               [ 4] 3145 	ld	l, c
      000CB3 26 00            [ 7] 3146 	ld	h, #0x00
      000CB5 19               [11] 3147 	add	hl, de
      000CB6 4E               [ 7] 3148 	ld	c, (hl)
      000CB7 2A CD F3         [16] 3149 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CBA 23               [ 6] 3150 	inc	hl
      000CBB 23               [ 6] 3151 	inc	hl
      000CBC 23               [ 6] 3152 	inc	hl
      000CBD 79               [ 4] 3153 	ld	a, c
      000CBE F5               [11] 3154 	push	af
      000CBF 33               [ 6] 3155 	inc	sp
      000CC0 E5               [11] 3156 	push	hl
      000CC1 CDr00r00         [17] 3157 	call	_WRTVRM
                                   3158 ;src\/Graphics.h:225: }
      000CC4 DD F9            [10] 3159 	ld	sp,ix
      000CC6 DD E1            [14] 3160 	pop	ix
      000CC8 C9               [10] 3161 	ret
                                   3162 ;src\/Graphics.h:227: void HideArrow() {
                                   3163 ;	---------------------------------
                                   3164 ; Function HideArrow
                                   3165 ; ---------------------------------
      000CC9                       3166 _HideArrow::
                                   3167 ;src\/Graphics.h:228: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	192);
      000CC9 2A CD F3         [16] 3168 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CCC 3E C0            [ 7] 3169 	ld	a, #0xc0
      000CCE F5               [11] 3170 	push	af
      000CCF 33               [ 6] 3171 	inc	sp
      000CD0 E5               [11] 3172 	push	hl
      000CD1 CDr00r00         [17] 3173 	call	_WRTVRM
      000CD4 F1               [10] 3174 	pop	af
      000CD5 33               [ 6] 3175 	inc	sp
                                   3176 ;src\/Graphics.h:229: }
      000CD6 C9               [10] 3177 	ret
                                   3178 ;src\/Graphics.h:231: void DrawHitSprite(byte x, byte y) {
                                   3179 ;	---------------------------------
                                   3180 ; Function DrawHitSprite
                                   3181 ; ---------------------------------
      000CD7                       3182 _DrawHitSprite::
      000CD7 DD E5            [15] 3183 	push	ix
      000CD9 DD 21 00 00      [14] 3184 	ld	ix,#0
      000CDD DD 39            [15] 3185 	add	ix,sp
      000CDF 21 F7 FF         [10] 3186 	ld	hl, #-9
      000CE2 39               [11] 3187 	add	hl, sp
      000CE3 F9               [ 6] 3188 	ld	sp, hl
                                   3189 ;src\/Graphics.h:233: const byte colors[] = {
      000CE4 21 00 00         [10] 3190 	ld	hl, #0
      000CE7 39               [11] 3191 	add	hl, sp
      000CE8 EB               [ 4] 3192 	ex	de, hl
      000CE9 3E 0F            [ 7] 3193 	ld	a, #0x0f
      000CEB 12               [ 7] 3194 	ld	(de), a
      000CEC 6B               [ 4] 3195 	ld	l, e
      000CED 62               [ 4] 3196 	ld	h, d
      000CEE 23               [ 6] 3197 	inc	hl
      000CEF 36 0E            [10] 3198 	ld	(hl), #0x0e
      000CF1 6B               [ 4] 3199 	ld	l, e
      000CF2 62               [ 4] 3200 	ld	h, d
      000CF3 23               [ 6] 3201 	inc	hl
      000CF4 23               [ 6] 3202 	inc	hl
      000CF5 36 05            [10] 3203 	ld	(hl), #0x05
      000CF7 6B               [ 4] 3204 	ld	l, e
      000CF8 62               [ 4] 3205 	ld	h, d
      000CF9 23               [ 6] 3206 	inc	hl
      000CFA 23               [ 6] 3207 	inc	hl
      000CFB 23               [ 6] 3208 	inc	hl
      000CFC 36 04            [10] 3209 	ld	(hl), #0x04
      000CFE 21 04 00         [10] 3210 	ld	hl, #0x0004
      000D01 19               [11] 3211 	add	hl, de
      000D02 36 04            [10] 3212 	ld	(hl), #0x04
      000D04 21 05 00         [10] 3213 	ld	hl, #0x0005
      000D07 19               [11] 3214 	add	hl, de
      000D08 36 05            [10] 3215 	ld	(hl), #0x05
      000D0A 21 06 00         [10] 3216 	ld	hl, #0x0006
      000D0D 19               [11] 3217 	add	hl, de
      000D0E 36 0E            [10] 3218 	ld	(hl), #0x0e
      000D10 21 07 00         [10] 3219 	ld	hl, #0x0007
      000D13 19               [11] 3220 	add	hl, de
      000D14 36 0F            [10] 3221 	ld	(hl), #0x0f
                                   3222 ;src\/Graphics.h:244: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000D16 2A 9E FC         [16] 3223 	ld	hl, (_JIFFY)
      000D19 7D               [ 4] 3224 	ld	a, l
      000D1A E6 0E            [ 7] 3225 	and	a, #0x0e
      000D1C 4F               [ 4] 3226 	ld	c, a
      000D1D 06 00            [ 7] 3227 	ld	b, #0x00
      000D1F CB 38            [ 8] 3228 	srl	b
      000D21 CB 19            [ 8] 3229 	rr	c
      000D23 DD 71 FF         [19] 3230 	ld	-1 (ix), c
                                   3231 ;src\/Graphics.h:246: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	y - 1);
      000D26 DD 4E 05         [19] 3232 	ld	c, 5 (ix)
      000D29 0D               [ 4] 3233 	dec	c
      000D2A 2A CD F3         [16] 3234 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D2D 23               [ 6] 3235 	inc	hl
      000D2E 23               [ 6] 3236 	inc	hl
      000D2F 23               [ 6] 3237 	inc	hl
      000D30 23               [ 6] 3238 	inc	hl
      000D31 D5               [11] 3239 	push	de
      000D32 79               [ 4] 3240 	ld	a, c
      000D33 F5               [11] 3241 	push	af
      000D34 33               [ 6] 3242 	inc	sp
      000D35 E5               [11] 3243 	push	hl
      000D36 CDr00r00         [17] 3244 	call	_WRTVRM
      000D39 F1               [10] 3245 	pop	af
      000D3A 33               [ 6] 3246 	inc	sp
      000D3B D1               [10] 3247 	pop	de
                                   3248 ;src\/Graphics.h:247: WRTVRM(MSX_modedata_screen2.sprite_attribute + 5, 	x);
      000D3C 2A CD F3         [16] 3249 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D3F 01 05 00         [10] 3250 	ld	bc, #0x0005
      000D42 09               [11] 3251 	add	hl, bc
      000D43 D5               [11] 3252 	push	de
      000D44 DD 7E 04         [19] 3253 	ld	a, 4 (ix)
      000D47 F5               [11] 3254 	push	af
      000D48 33               [ 6] 3255 	inc	sp
      000D49 E5               [11] 3256 	push	hl
      000D4A CDr00r00         [17] 3257 	call	_WRTVRM
      000D4D F1               [10] 3258 	pop	af
      000D4E 33               [ 6] 3259 	inc	sp
      000D4F D1               [10] 3260 	pop	de
                                   3261 ;src\/Graphics.h:248: WRTVRM(MSX_modedata_screen2.sprite_attribute + 6, 	SPRITE_PATTERN_3X_HIT);
      000D50 2A CD F3         [16] 3262 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D53 01 06 00         [10] 3263 	ld	bc, #0x0006
      000D56 09               [11] 3264 	add	hl, bc
      000D57 D5               [11] 3265 	push	de
      000D58 3E 04            [ 7] 3266 	ld	a, #0x04
      000D5A F5               [11] 3267 	push	af
      000D5B 33               [ 6] 3268 	inc	sp
      000D5C E5               [11] 3269 	push	hl
      000D5D CDr00r00         [17] 3270 	call	_WRTVRM
      000D60 F1               [10] 3271 	pop	af
      000D61 33               [ 6] 3272 	inc	sp
      000D62 D1               [10] 3273 	pop	de
                                   3274 ;src\/Graphics.h:249: WRTVRM(MSX_modedata_screen2.sprite_attribute + 7, 	colors[colorIndex]);
      000D63 DD 6E FF         [19] 3275 	ld	l, -1 (ix)
      000D66 26 00            [ 7] 3276 	ld	h, #0x00
      000D68 19               [11] 3277 	add	hl, de
      000D69 46               [ 7] 3278 	ld	b, (hl)
      000D6A 2A CD F3         [16] 3279 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D6D 11 07 00         [10] 3280 	ld	de, #0x0007
      000D70 19               [11] 3281 	add	hl, de
      000D71 C5               [11] 3282 	push	bc
      000D72 33               [ 6] 3283 	inc	sp
      000D73 E5               [11] 3284 	push	hl
      000D74 CDr00r00         [17] 3285 	call	_WRTVRM
                                   3286 ;src\/Graphics.h:250: }
      000D77 DD F9            [10] 3287 	ld	sp,ix
      000D79 DD E1            [14] 3288 	pop	ix
      000D7B C9               [10] 3289 	ret
                                   3290 ;src\/Graphics.h:252: void HideHitSprite() {
                                   3291 ;	---------------------------------
                                   3292 ; Function HideHitSprite
                                   3293 ; ---------------------------------
      000D7C                       3294 _HideHitSprite::
                                   3295 ;src\/Graphics.h:253: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	192);
      000D7C 2A CD F3         [16] 3296 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D7F 01 04 00         [10] 3297 	ld	bc, #0x0004
      000D82 09               [11] 3298 	add	hl, bc
      000D83 3E C0            [ 7] 3299 	ld	a, #0xc0
      000D85 F5               [11] 3300 	push	af
      000D86 33               [ 6] 3301 	inc	sp
      000D87 E5               [11] 3302 	push	hl
      000D88 CDr00r00         [17] 3303 	call	_WRTVRM
      000D8B F1               [10] 3304 	pop	af
      000D8C 33               [ 6] 3305 	inc	sp
                                   3306 ;src\/Graphics.h:254: }
      000D8D C9               [10] 3307 	ret
                                   3308 ;src\/Graphics.h:256: void InitVRAM() {
                                   3309 ;	---------------------------------
                                   3310 ; Function InitVRAM
                                   3311 ; ---------------------------------
      000D8E                       3312 _InitVRAM::
                                   3313 ;src\/Graphics.h:261: CLIKSW = 0;	// disable keyboard sound
      000D8E 21 00 00         [10] 3314 	ld	hl, #0x0000
      000D91 22 DB F3         [16] 3315 	ld	(_CLIKSW), hl
                                   3316 ;src\/Graphics.h:262: SCNCNT = 1; 	// set keyboard scan counter
      000D94 21 F6 F3         [10] 3317 	ld	hl, #_SCNCNT
      000D97 36 01            [10] 3318 	ld	(hl), #0x01
                                   3319 ;src\/Graphics.h:264: FORCLR = COLOR_WHITE;
      000D99 21 E9 F3         [10] 3320 	ld	hl, #_FORCLR
      000D9C 36 0F            [10] 3321 	ld	(hl), #0x0f
                                   3322 ;src\/Graphics.h:265: BAKCLR = COLOR_BLACK;
      000D9E 21 EA F3         [10] 3323 	ld	hl, #_BAKCLR
      000DA1 36 01            [10] 3324 	ld	(hl), #0x01
                                   3325 ;src\/Graphics.h:266: BDRCLR = COLOR_BLACK;
      000DA3 21 EB F3         [10] 3326 	ld	hl, #_BDRCLR
      000DA6 36 01            [10] 3327 	ld	(hl), #0x01
                                   3328 ;src\/Graphics.h:294: WRTVDP(0b0000000111100010);
      000DA8 21 E2 01         [10] 3329 	ld	hl, #0x01e2
      000DAB CDr00r00         [17] 3330 	call	_WRTVDP
                                   3331 ;src\/Graphics.h:296: INIGRP();	// Set screen 2
      000DAE CDr00r00         [17] 3332 	call	_INIGRP
                                   3333 ;src\/Graphics.h:298: DISSCR();	// Disable screen (faster to write)
      000DB1 CDr00r00         [17] 3334 	call	_DISSCR
                                   3335 ;src\/Graphics.h:302: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      000DB4 AF               [ 4] 3336 	xor	a, a
      000DB5 F5               [11] 3337 	push	af
      000DB6 33               [ 6] 3338 	inc	sp
      000DB7 21 00 40         [10] 3339 	ld	hl, #0x4000
      000DBA E5               [11] 3340 	push	hl
      000DBB 65               [ 4] 3341 	ld	h, l
      000DBC E5               [11] 3342 	push	hl
      000DBD CDr00r00         [17] 3343 	call	_FILVRM
      000DC0 F1               [10] 3344 	pop	af
      000DC1 F1               [10] 3345 	pop	af
      000DC2 33               [ 6] 3346 	inc	sp
                                   3347 ;src\/Graphics.h:311: LDIRVM(MSX_modedata_screen2.sprite_pattern, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      000DC3 01r48r07         [10] 3348 	ld	bc, #_sprite_arrow_0+0
      000DC6 2A CF F3         [16] 3349 	ld	hl, (#(_MSX_modedata_screen2 + 0x0008) + 0)
      000DC9 11 40 00         [10] 3350 	ld	de, #0x0040
      000DCC D5               [11] 3351 	push	de
      000DCD C5               [11] 3352 	push	bc
      000DCE E5               [11] 3353 	push	hl
      000DCF CDr00r00         [17] 3354 	call	_LDIRVM
      000DD2 21 06 00         [10] 3355 	ld	hl, #6
      000DD5 39               [11] 3356 	add	hl, sp
      000DD6 F9               [ 6] 3357 	ld	sp, hl
                                   3358 ;src\/Graphics.h:317: for(byte i=0; i<32; i++) {
      000DD7 0E 00            [ 7] 3359 	ld	c, #0x00
      000DD9                       3360 00110$:
      000DD9 79               [ 4] 3361 	ld	a, c
      000DDA D6 20            [ 7] 3362 	sub	a, #0x20
      000DDC 30 1A            [12] 3363 	jr	NC, 00101$
                                   3364 ;src\/Graphics.h:318: WRTVRM(MSX_modedata_screen2.sprite_attribute + (i * 4), 	192);
      000DDE ED 5B CD F3      [20] 3365 	ld	de, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DE2 79               [ 4] 3366 	ld	a, c
      000DE3 26 00            [ 7] 3367 	ld	h, #0x00
      000DE5 6F               [ 4] 3368 	ld	l, a
      000DE6 29               [11] 3369 	add	hl, hl
      000DE7 29               [11] 3370 	add	hl, hl
      000DE8 19               [11] 3371 	add	hl, de
      000DE9 C5               [11] 3372 	push	bc
      000DEA 3E C0            [ 7] 3373 	ld	a, #0xc0
      000DEC F5               [11] 3374 	push	af
      000DED 33               [ 6] 3375 	inc	sp
      000DEE E5               [11] 3376 	push	hl
      000DEF CDr00r00         [17] 3377 	call	_WRTVRM
      000DF2 F1               [10] 3378 	pop	af
      000DF3 33               [ 6] 3379 	inc	sp
      000DF4 C1               [10] 3380 	pop	bc
                                   3381 ;src\/Graphics.h:317: for(byte i=0; i<32; i++) {
      000DF5 0C               [ 4] 3382 	inc	c
      000DF6 18 E1            [12] 3383 	jr	00110$
      000DF8                       3384 00101$:
                                   3385 ;src\/Graphics.h:327: LDIRVM(MSX_modedata_screen2.pattern, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000DF8 01r18r04         [10] 3386 	ld	bc, #_pattern_black_0
      000DFB 2A CB F3         [16] 3387 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000DFE 11 78 01         [10] 3388 	ld	de, #0x0178
      000E01 D5               [11] 3389 	push	de
      000E02 C5               [11] 3390 	push	bc
      000E03 E5               [11] 3391 	push	hl
      000E04 CDr00r00         [17] 3392 	call	_LDIRVM
      000E07 21 06 00         [10] 3393 	ld	hl, #6
      000E0A 39               [11] 3394 	add	hl, sp
      000E0B F9               [ 6] 3395 	ld	sp, hl
                                   3396 ;src\/Graphics.h:330: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E0C 01r18r04         [10] 3397 	ld	bc, #_pattern_black_0
      000E0F 2A CB F3         [16] 3398 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E12 7C               [ 4] 3399 	ld	a, h
      000E13 C6 08            [ 7] 3400 	add	a, #0x08
      000E15 67               [ 4] 3401 	ld	h, a
      000E16 11 78 01         [10] 3402 	ld	de, #0x0178
      000E19 D5               [11] 3403 	push	de
      000E1A C5               [11] 3404 	push	bc
      000E1B E5               [11] 3405 	push	hl
      000E1C CDr00r00         [17] 3406 	call	_LDIRVM
      000E1F 21 06 00         [10] 3407 	ld	hl, #6
      000E22 39               [11] 3408 	add	hl, sp
      000E23 F9               [ 6] 3409 	ld	sp, hl
                                   3410 ;src\/Graphics.h:333: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E24 01r18r04         [10] 3411 	ld	bc, #_pattern_black_0
      000E27 2A CB F3         [16] 3412 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E2A 7C               [ 4] 3413 	ld	a, h
      000E2B C6 10            [ 7] 3414 	add	a, #0x10
      000E2D 67               [ 4] 3415 	ld	h, a
      000E2E 11 78 01         [10] 3416 	ld	de, #0x0178
      000E31 D5               [11] 3417 	push	de
      000E32 C5               [11] 3418 	push	bc
      000E33 E5               [11] 3419 	push	hl
      000E34 CDr00r00         [17] 3420 	call	_LDIRVM
      000E37 21 06 00         [10] 3421 	ld	hl, #6
      000E3A 39               [11] 3422 	add	hl, sp
      000E3B F9               [ 6] 3423 	ld	sp, hl
                                   3424 ;src\/Graphics.h:336: LDIRVM(MSX_modedata_screen2.pattern + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E3C 01r18r01         [10] 3425 	ld	bc, #_FONT
      000E3F 2A CB F3         [16] 3426 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E42 11 78 01         [10] 3427 	ld	de, #0x0178
      000E45 19               [11] 3428 	add	hl, de
      000E46 11 00 03         [10] 3429 	ld	de, #0x0300
      000E49 D5               [11] 3430 	push	de
      000E4A C5               [11] 3431 	push	bc
      000E4B E5               [11] 3432 	push	hl
      000E4C CDr00r00         [17] 3433 	call	_LDIRVM
      000E4F 21 06 00         [10] 3434 	ld	hl, #6
      000E52 39               [11] 3435 	add	hl, sp
      000E53 F9               [ 6] 3436 	ld	sp, hl
                                   3437 ;src\/Graphics.h:339: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E54 01r18r01         [10] 3438 	ld	bc, #_FONT
      000E57 2A CB F3         [16] 3439 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E5A 11 78 09         [10] 3440 	ld	de, #0x0978
      000E5D 19               [11] 3441 	add	hl, de
      000E5E 11 00 03         [10] 3442 	ld	de, #0x0300
      000E61 D5               [11] 3443 	push	de
      000E62 C5               [11] 3444 	push	bc
      000E63 E5               [11] 3445 	push	hl
      000E64 CDr00r00         [17] 3446 	call	_LDIRVM
      000E67 21 06 00         [10] 3447 	ld	hl, #6
      000E6A 39               [11] 3448 	add	hl, sp
      000E6B F9               [ 6] 3449 	ld	sp, hl
                                   3450 ;src\/Graphics.h:342: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E6C 01r18r01         [10] 3451 	ld	bc, #_FONT
      000E6F 2A CB F3         [16] 3452 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E72 11 78 11         [10] 3453 	ld	de, #0x1178
      000E75 19               [11] 3454 	add	hl, de
      000E76 11 00 03         [10] 3455 	ld	de, #0x0300
      000E79 D5               [11] 3456 	push	de
      000E7A C5               [11] 3457 	push	bc
      000E7B E5               [11] 3458 	push	hl
      000E7C CDr00r00         [17] 3459 	call	_LDIRVM
      000E7F 21 06 00         [10] 3460 	ld	hl, #6
      000E82 39               [11] 3461 	add	hl, sp
      000E83 F9               [ 6] 3462 	ld	sp, hl
                                   3463 ;src\/Graphics.h:346: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000E84 0E 00            [ 7] 3464 	ld	c, #0x00
      000E86                       3465 00113$:
      000E86 79               [ 4] 3466 	ld	a, c
      000E87 D6 07            [ 7] 3467 	sub	a, #0x07
      000E89 30 27            [12] 3468 	jr	NC, 00102$
                                   3469 ;src\/Graphics.h:347: LDIRVM(MSX_modedata_screen2.pattern + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      000E8B ED 5B CB F3      [20] 3470 	ld	de, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E8F 21 70 04         [10] 3471 	ld	hl, #0x0470
      000E92 19               [11] 3472 	add	hl, de
      000E93 EB               [ 4] 3473 	ex	de, hl
      000E94 79               [ 4] 3474 	ld	a, c
      000E95 26 00            [ 7] 3475 	ld	h, #0x00
      000E97 6F               [ 4] 3476 	ld	l, a
      000E98 29               [11] 3477 	add	hl, hl
      000E99 29               [11] 3478 	add	hl, hl
      000E9A 29               [11] 3479 	add	hl, hl
      000E9B 19               [11] 3480 	add	hl, de
      000E9C C5               [11] 3481 	push	bc
      000E9D 11 38 00         [10] 3482 	ld	de, #0x0038
      000EA0 D5               [11] 3483 	push	de
      000EA1 11r88r05         [10] 3484 	ld	de, #_pattern_title
      000EA4 D5               [11] 3485 	push	de
      000EA5 E5               [11] 3486 	push	hl
      000EA6 CDr00r00         [17] 3487 	call	_LDIRVM
      000EA9 21 06 00         [10] 3488 	ld	hl, #6
      000EAC 39               [11] 3489 	add	hl, sp
      000EAD F9               [ 6] 3490 	ld	sp, hl
      000EAE C1               [10] 3491 	pop	bc
                                   3492 ;src\/Graphics.h:346: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000EAF 0C               [ 4] 3493 	inc	c
      000EB0 18 D4            [12] 3494 	jr	00113$
      000EB2                       3495 00102$:
                                   3496 ;src\/Graphics.h:357: LDIRVM(MSX_modedata_screen2.color, color_black_0, NUMBER_OF_PATTERNS * 8);
      000EB2 01r90r05         [10] 3497 	ld	bc, #_color_black_0
      000EB5 2A C9 F3         [16] 3498 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000EB8 11 78 01         [10] 3499 	ld	de, #0x0178
      000EBB D5               [11] 3500 	push	de
      000EBC C5               [11] 3501 	push	bc
      000EBD E5               [11] 3502 	push	hl
      000EBE CDr00r00         [17] 3503 	call	_LDIRVM
      000EC1 21 06 00         [10] 3504 	ld	hl, #6
      000EC4 39               [11] 3505 	add	hl, sp
      000EC5 F9               [ 6] 3506 	ld	sp, hl
                                   3507 ;src\/Graphics.h:359: LDIRVM(MSX_modedata_screen2.color + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000EC6 01r90r05         [10] 3508 	ld	bc, #_color_black_0
      000EC9 2A C9 F3         [16] 3509 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000ECC 7C               [ 4] 3510 	ld	a, h
      000ECD C6 08            [ 7] 3511 	add	a, #0x08
      000ECF 67               [ 4] 3512 	ld	h, a
      000ED0 11 78 01         [10] 3513 	ld	de, #0x0178
      000ED3 D5               [11] 3514 	push	de
      000ED4 C5               [11] 3515 	push	bc
      000ED5 E5               [11] 3516 	push	hl
      000ED6 CDr00r00         [17] 3517 	call	_LDIRVM
      000ED9 21 06 00         [10] 3518 	ld	hl, #6
      000EDC 39               [11] 3519 	add	hl, sp
      000EDD F9               [ 6] 3520 	ld	sp, hl
                                   3521 ;src\/Graphics.h:361: LDIRVM(MSX_modedata_screen2.color + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000EDE 01r90r05         [10] 3522 	ld	bc, #_color_black_0
      000EE1 2A C9 F3         [16] 3523 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000EE4 7C               [ 4] 3524 	ld	a, h
      000EE5 C6 10            [ 7] 3525 	add	a, #0x10
      000EE7 67               [ 4] 3526 	ld	h, a
      000EE8 11 78 01         [10] 3527 	ld	de, #0x0178
      000EEB D5               [11] 3528 	push	de
      000EEC C5               [11] 3529 	push	bc
      000EED E5               [11] 3530 	push	hl
      000EEE CDr00r00         [17] 3531 	call	_LDIRVM
      000EF1 21 06 00         [10] 3532 	ld	hl, #6
      000EF4 39               [11] 3533 	add	hl, sp
      000EF5 F9               [ 6] 3534 	ld	sp, hl
                                   3535 ;src\/Graphics.h:368: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000EF6 0E 00            [ 7] 3536 	ld	c, #0x00
      000EF8                       3537 00116$:
      000EF8 79               [ 4] 3538 	ld	a, c
      000EF9 D6 60            [ 7] 3539 	sub	a, #0x60
      000EFB 30 27            [12] 3540 	jr	NC, 00103$
                                   3541 ;src\/Graphics.h:369: LDIRVM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000EFD ED 5B C9 F3      [20] 3542 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F01 21 78 01         [10] 3543 	ld	hl, #0x0178
      000F04 19               [11] 3544 	add	hl, de
      000F05 EB               [ 4] 3545 	ex	de, hl
      000F06 79               [ 4] 3546 	ld	a, c
      000F07 26 00            [ 7] 3547 	ld	h, #0x00
      000F09 6F               [ 4] 3548 	ld	l, a
      000F0A 29               [11] 3549 	add	hl, hl
      000F0B 29               [11] 3550 	add	hl, hl
      000F0C 29               [11] 3551 	add	hl, hl
      000F0D 19               [11] 3552 	add	hl, de
      000F0E C5               [11] 3553 	push	bc
      000F0F 11 08 00         [10] 3554 	ld	de, #0x0008
      000F12 D5               [11] 3555 	push	de
      000F13 11r08r07         [10] 3556 	ld	de, #_color_font_2
      000F16 D5               [11] 3557 	push	de
      000F17 E5               [11] 3558 	push	hl
      000F18 CDr00r00         [17] 3559 	call	_LDIRVM
      000F1B 21 06 00         [10] 3560 	ld	hl, #6
      000F1E 39               [11] 3561 	add	hl, sp
      000F1F F9               [ 6] 3562 	ld	sp, hl
      000F20 C1               [10] 3563 	pop	bc
                                   3564 ;src\/Graphics.h:368: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F21 0C               [ 4] 3565 	inc	c
      000F22 18 D4            [12] 3566 	jr	00116$
      000F24                       3567 00103$:
                                   3568 ;src\/Graphics.h:372: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F24 0E 00            [ 7] 3569 	ld	c, #0x00
      000F26                       3570 00119$:
      000F26 79               [ 4] 3571 	ld	a, c
      000F27 D6 60            [ 7] 3572 	sub	a, #0x60
      000F29 30 27            [12] 3573 	jr	NC, 00104$
                                   3574 ;src\/Graphics.h:373: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000F2B ED 5B C9 F3      [20] 3575 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F2F 21 78 09         [10] 3576 	ld	hl, #0x0978
      000F32 19               [11] 3577 	add	hl, de
      000F33 EB               [ 4] 3578 	ex	de, hl
      000F34 79               [ 4] 3579 	ld	a, c
      000F35 26 00            [ 7] 3580 	ld	h, #0x00
      000F37 6F               [ 4] 3581 	ld	l, a
      000F38 29               [11] 3582 	add	hl, hl
      000F39 29               [11] 3583 	add	hl, hl
      000F3A 29               [11] 3584 	add	hl, hl
      000F3B 19               [11] 3585 	add	hl, de
      000F3C C5               [11] 3586 	push	bc
      000F3D 11 08 00         [10] 3587 	ld	de, #0x0008
      000F40 D5               [11] 3588 	push	de
      000F41 11r08r07         [10] 3589 	ld	de, #_color_font_2
      000F44 D5               [11] 3590 	push	de
      000F45 E5               [11] 3591 	push	hl
      000F46 CDr00r00         [17] 3592 	call	_LDIRVM
      000F49 21 06 00         [10] 3593 	ld	hl, #6
      000F4C 39               [11] 3594 	add	hl, sp
      000F4D F9               [ 6] 3595 	ld	sp, hl
      000F4E C1               [10] 3596 	pop	bc
                                   3597 ;src\/Graphics.h:372: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F4F 0C               [ 4] 3598 	inc	c
      000F50 18 D4            [12] 3599 	jr	00119$
      000F52                       3600 00104$:
                                   3601 ;src\/Graphics.h:376: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F52 0E 00            [ 7] 3602 	ld	c, #0x00
      000F54                       3603 00122$:
      000F54 79               [ 4] 3604 	ld	a, c
      000F55 D6 60            [ 7] 3605 	sub	a, #0x60
      000F57 30 27            [12] 3606 	jr	NC, 00105$
                                   3607 ;src\/Graphics.h:377: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000F59 ED 5B C9 F3      [20] 3608 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F5D 21 78 11         [10] 3609 	ld	hl, #0x1178
      000F60 19               [11] 3610 	add	hl, de
      000F61 EB               [ 4] 3611 	ex	de, hl
      000F62 79               [ 4] 3612 	ld	a, c
      000F63 26 00            [ 7] 3613 	ld	h, #0x00
      000F65 6F               [ 4] 3614 	ld	l, a
      000F66 29               [11] 3615 	add	hl, hl
      000F67 29               [11] 3616 	add	hl, hl
      000F68 29               [11] 3617 	add	hl, hl
      000F69 19               [11] 3618 	add	hl, de
      000F6A C5               [11] 3619 	push	bc
      000F6B 11 08 00         [10] 3620 	ld	de, #0x0008
      000F6E D5               [11] 3621 	push	de
      000F6F 11r08r07         [10] 3622 	ld	de, #_color_font_2
      000F72 D5               [11] 3623 	push	de
      000F73 E5               [11] 3624 	push	hl
      000F74 CDr00r00         [17] 3625 	call	_LDIRVM
      000F77 21 06 00         [10] 3626 	ld	hl, #6
      000F7A 39               [11] 3627 	add	hl, sp
      000F7B F9               [ 6] 3628 	ld	sp, hl
      000F7C C1               [10] 3629 	pop	bc
                                   3630 ;src\/Graphics.h:376: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F7D 0C               [ 4] 3631 	inc	c
      000F7E 18 D4            [12] 3632 	jr	00122$
      000F80                       3633 00105$:
                                   3634 ;src\/Graphics.h:385: for(byte i = 0; i < 10; i++) {
      000F80 0E 00            [ 7] 3635 	ld	c, #0x00
      000F82                       3636 00125$:
      000F82 79               [ 4] 3637 	ld	a, c
      000F83 D6 0A            [ 7] 3638 	sub	a, #0x0a
      000F85 30 27            [12] 3639 	jr	NC, 00106$
                                   3640 ;src\/Graphics.h:386: LDIRVM(MSX_modedata_screen2.color + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000F87 ED 5B C9 F3      [20] 3641 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F8B 21 F8 01         [10] 3642 	ld	hl, #0x01f8
      000F8E 19               [11] 3643 	add	hl, de
      000F8F EB               [ 4] 3644 	ex	de, hl
      000F90 79               [ 4] 3645 	ld	a, c
      000F91 26 00            [ 7] 3646 	ld	h, #0x00
      000F93 6F               [ 4] 3647 	ld	l, a
      000F94 29               [11] 3648 	add	hl, hl
      000F95 29               [11] 3649 	add	hl, hl
      000F96 29               [11] 3650 	add	hl, hl
      000F97 19               [11] 3651 	add	hl, de
      000F98 C5               [11] 3652 	push	bc
      000F99 11 08 00         [10] 3653 	ld	de, #0x0008
      000F9C D5               [11] 3654 	push	de
      000F9D 11r00r07         [10] 3655 	ld	de, #_color_font_1
      000FA0 D5               [11] 3656 	push	de
      000FA1 E5               [11] 3657 	push	hl
      000FA2 CDr00r00         [17] 3658 	call	_LDIRVM
      000FA5 21 06 00         [10] 3659 	ld	hl, #6
      000FA8 39               [11] 3660 	add	hl, sp
      000FA9 F9               [ 6] 3661 	ld	sp, hl
      000FAA C1               [10] 3662 	pop	bc
                                   3663 ;src\/Graphics.h:385: for(byte i = 0; i < 10; i++) {
      000FAB 0C               [ 4] 3664 	inc	c
      000FAC 18 D4            [12] 3665 	jr	00125$
      000FAE                       3666 00106$:
                                   3667 ;src\/Graphics.h:389: for(byte i = 0; i < 10; i++) {
      000FAE 0E 00            [ 7] 3668 	ld	c, #0x00
      000FB0                       3669 00128$:
      000FB0 79               [ 4] 3670 	ld	a, c
      000FB1 D6 0A            [ 7] 3671 	sub	a, #0x0a
      000FB3 30 27            [12] 3672 	jr	NC, 00107$
                                   3673 ;src\/Graphics.h:390: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000FB5 ED 5B C9 F3      [20] 3674 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FB9 21 F8 09         [10] 3675 	ld	hl, #0x09f8
      000FBC 19               [11] 3676 	add	hl, de
      000FBD EB               [ 4] 3677 	ex	de, hl
      000FBE 79               [ 4] 3678 	ld	a, c
      000FBF 26 00            [ 7] 3679 	ld	h, #0x00
      000FC1 6F               [ 4] 3680 	ld	l, a
      000FC2 29               [11] 3681 	add	hl, hl
      000FC3 29               [11] 3682 	add	hl, hl
      000FC4 29               [11] 3683 	add	hl, hl
      000FC5 19               [11] 3684 	add	hl, de
      000FC6 C5               [11] 3685 	push	bc
      000FC7 11 08 00         [10] 3686 	ld	de, #0x0008
      000FCA D5               [11] 3687 	push	de
      000FCB 11r00r07         [10] 3688 	ld	de, #_color_font_1
      000FCE D5               [11] 3689 	push	de
      000FCF E5               [11] 3690 	push	hl
      000FD0 CDr00r00         [17] 3691 	call	_LDIRVM
      000FD3 21 06 00         [10] 3692 	ld	hl, #6
      000FD6 39               [11] 3693 	add	hl, sp
      000FD7 F9               [ 6] 3694 	ld	sp, hl
      000FD8 C1               [10] 3695 	pop	bc
                                   3696 ;src\/Graphics.h:389: for(byte i = 0; i < 10; i++) {
      000FD9 0C               [ 4] 3697 	inc	c
      000FDA 18 D4            [12] 3698 	jr	00128$
      000FDC                       3699 00107$:
                                   3700 ;src\/Graphics.h:393: for(byte i = 0; i < 10; i++) {
      000FDC 0E 00            [ 7] 3701 	ld	c, #0x00
      000FDE                       3702 00131$:
      000FDE 79               [ 4] 3703 	ld	a, c
      000FDF D6 0A            [ 7] 3704 	sub	a, #0x0a
      000FE1 30 26            [12] 3705 	jr	NC, 00108$
                                   3706 ;src\/Graphics.h:394: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000FE3 ED 5B C9 F3      [20] 3707 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FE7 21 F8 11         [10] 3708 	ld	hl, #0x11f8
      000FEA 19               [11] 3709 	add	hl, de
      000FEB EB               [ 4] 3710 	ex	de, hl
      000FEC 69               [ 4] 3711 	ld	l, c
      000FED 26 00            [ 7] 3712 	ld	h, #0x00
      000FEF 29               [11] 3713 	add	hl, hl
      000FF0 29               [11] 3714 	add	hl, hl
      000FF1 29               [11] 3715 	add	hl, hl
      000FF2 19               [11] 3716 	add	hl, de
      000FF3 C5               [11] 3717 	push	bc
      000FF4 11 08 00         [10] 3718 	ld	de, #0x0008
      000FF7 D5               [11] 3719 	push	de
      000FF8 11r00r07         [10] 3720 	ld	de, #_color_font_1
      000FFB D5               [11] 3721 	push	de
      000FFC E5               [11] 3722 	push	hl
      000FFD CDr00r00         [17] 3723 	call	_LDIRVM
      001000 21 06 00         [10] 3724 	ld	hl, #6
      001003 39               [11] 3725 	add	hl, sp
      001004 F9               [ 6] 3726 	ld	sp, hl
      001005 C1               [10] 3727 	pop	bc
                                   3728 ;src\/Graphics.h:393: for(byte i = 0; i < 10; i++) {
      001006 0C               [ 4] 3729 	inc	c
      001007 18 D5            [12] 3730 	jr	00131$
      001009                       3731 00108$:
                                   3732 ;src\/Graphics.h:398: LDIRVM(MSX_modedata_screen2.color + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001009 2A C9 F3         [16] 3733 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      00100C 01 70 04         [10] 3734 	ld	bc, #0x0470
      00100F 09               [11] 3735 	add	hl, bc
      001010 11 38 00         [10] 3736 	ld	de, #0x0038
      001013 D5               [11] 3737 	push	de
      001014 11r10r07         [10] 3738 	ld	de, #_color_title_1
      001017 D5               [11] 3739 	push	de
      001018 E5               [11] 3740 	push	hl
      001019 CDr00r00         [17] 3741 	call	_LDIRVM
      00101C 21 06 00         [10] 3742 	ld	hl, #6
      00101F 39               [11] 3743 	add	hl, sp
      001020 F9               [ 6] 3744 	ld	sp, hl
                                   3745 ;src\/Graphics.h:406: ENASCR();	// Enable screen
                                   3746 ;src\/Graphics.h:407: }
      001021 C3r00r00         [10] 3747 	jp	_ENASCR
                                   3748 ;src\/Graphics.h:409: void DrawBlock(byte col, byte line, byte tile) {
                                   3749 ;	---------------------------------
                                   3750 ; Function DrawBlock
                                   3751 ; ---------------------------------
      001024                       3752 _DrawBlock::
      001024 DD E5            [15] 3753 	push	ix
      001026 DD 21 00 00      [14] 3754 	ld	ix,#0
      00102A DD 39            [15] 3755 	add	ix,sp
                                   3756 ;src\/Graphics.h:411: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      00102C ED 4B C7 F3      [20] 3757 	ld	bc, (#_MSX_modedata_screen2 + 0)
      001030 DD 6E 04         [19] 3758 	ld	l, 4 (ix)
      001033 26 00            [ 7] 3759 	ld	h, #0x00
      001035 29               [11] 3760 	add	hl, hl
      001036 09               [11] 3761 	add	hl, bc
      001037 EB               [ 4] 3762 	ex	de, hl
      001038 DD 6E 05         [19] 3763 	ld	l, 5 (ix)
      00103B 26 00            [ 7] 3764 	ld	h, #0x00
      00103D 29               [11] 3765 	add	hl, hl
      00103E 29               [11] 3766 	add	hl, hl
      00103F 29               [11] 3767 	add	hl, hl
      001040 29               [11] 3768 	add	hl, hl
      001041 29               [11] 3769 	add	hl, hl
      001042 29               [11] 3770 	add	hl, hl
      001043 19               [11] 3771 	add	hl, de
      001044 EB               [ 4] 3772 	ex	de, hl
      001045 21 0A 00         [10] 3773 	ld	hl, #0x000a
      001048 19               [11] 3774 	add	hl, de
      001049 EB               [ 4] 3775 	ex	de, hl
                                   3776 ;src\/Graphics.h:413: WRTVRM(baseAddr, tile);
      00104A D5               [11] 3777 	push	de
      00104B DD 7E 06         [19] 3778 	ld	a, 6 (ix)
      00104E F5               [11] 3779 	push	af
      00104F 33               [ 6] 3780 	inc	sp
      001050 D5               [11] 3781 	push	de
      001051 CDr00r00         [17] 3782 	call	_WRTVRM
      001054 F1               [10] 3783 	pop	af
      001055 33               [ 6] 3784 	inc	sp
      001056 D1               [10] 3785 	pop	de
                                   3786 ;src\/Graphics.h:414: WRTVRM(baseAddr + 1, tile + 1);
      001057 DD 4E 06         [19] 3787 	ld	c, 6 (ix)
      00105A 79               [ 4] 3788 	ld	a, c
      00105B 3C               [ 4] 3789 	inc	a
      00105C 6B               [ 4] 3790 	ld	l, e
      00105D 62               [ 4] 3791 	ld	h, d
      00105E 23               [ 6] 3792 	inc	hl
      00105F C5               [11] 3793 	push	bc
      001060 D5               [11] 3794 	push	de
      001061 F5               [11] 3795 	push	af
      001062 33               [ 6] 3796 	inc	sp
      001063 E5               [11] 3797 	push	hl
      001064 CDr00r00         [17] 3798 	call	_WRTVRM
      001067 F1               [10] 3799 	pop	af
      001068 33               [ 6] 3800 	inc	sp
      001069 D1               [10] 3801 	pop	de
      00106A C1               [10] 3802 	pop	bc
                                   3803 ;src\/Graphics.h:415: WRTVRM(baseAddr + 32, tile + 2);
      00106B 41               [ 4] 3804 	ld	b, c
      00106C 04               [ 4] 3805 	inc	b
      00106D 04               [ 4] 3806 	inc	b
      00106E 21 20 00         [10] 3807 	ld	hl, #0x0020
      001071 19               [11] 3808 	add	hl, de
      001072 C5               [11] 3809 	push	bc
      001073 D5               [11] 3810 	push	de
      001074 C5               [11] 3811 	push	bc
      001075 33               [ 6] 3812 	inc	sp
      001076 E5               [11] 3813 	push	hl
      001077 CDr00r00         [17] 3814 	call	_WRTVRM
      00107A F1               [10] 3815 	pop	af
      00107B 33               [ 6] 3816 	inc	sp
      00107C D1               [10] 3817 	pop	de
      00107D C1               [10] 3818 	pop	bc
                                   3819 ;src\/Graphics.h:416: WRTVRM(baseAddr + 33, tile + 3);
      00107E 0C               [ 4] 3820 	inc	c
      00107F 0C               [ 4] 3821 	inc	c
      001080 0C               [ 4] 3822 	inc	c
      001081 21 21 00         [10] 3823 	ld	hl, #0x0021
      001084 19               [11] 3824 	add	hl, de
      001085 79               [ 4] 3825 	ld	a, c
      001086 F5               [11] 3826 	push	af
      001087 33               [ 6] 3827 	inc	sp
      001088 E5               [11] 3828 	push	hl
      001089 CDr00r00         [17] 3829 	call	_WRTVRM
      00108C F1               [10] 3830 	pop	af
      00108D 33               [ 6] 3831 	inc	sp
                                   3832 ;src\/Graphics.h:417: }
      00108E DD E1            [14] 3833 	pop	ix
      001090 C9               [10] 3834 	ret
                                   3835 ;src\/Graphics.h:419: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   3836 ;	---------------------------------
                                   3837 ; Function DrawBlock_SameTile
                                   3838 ; ---------------------------------
      001091                       3839 _DrawBlock_SameTile::
      001091 DD E5            [15] 3840 	push	ix
      001093 DD 21 00 00      [14] 3841 	ld	ix,#0
      001097 DD 39            [15] 3842 	add	ix,sp
                                   3843 ;src\/Graphics.h:421: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001099 ED 4B C7 F3      [20] 3844 	ld	bc, (#_MSX_modedata_screen2 + 0)
      00109D DD 6E 04         [19] 3845 	ld	l, 4 (ix)
      0010A0 26 00            [ 7] 3846 	ld	h, #0x00
      0010A2 29               [11] 3847 	add	hl, hl
      0010A3 09               [11] 3848 	add	hl, bc
      0010A4 EB               [ 4] 3849 	ex	de, hl
      0010A5 DD 6E 05         [19] 3850 	ld	l, 5 (ix)
      0010A8 26 00            [ 7] 3851 	ld	h, #0x00
      0010AA 29               [11] 3852 	add	hl, hl
      0010AB 29               [11] 3853 	add	hl, hl
      0010AC 29               [11] 3854 	add	hl, hl
      0010AD 29               [11] 3855 	add	hl, hl
      0010AE 29               [11] 3856 	add	hl, hl
      0010AF 29               [11] 3857 	add	hl, hl
      0010B0 19               [11] 3858 	add	hl, de
      0010B1 01 0A 00         [10] 3859 	ld	bc, #0x000a
      0010B4 09               [11] 3860 	add	hl, bc
      0010B5 4D               [ 4] 3861 	ld	c, l
      0010B6 44               [ 4] 3862 	ld	b, h
                                   3863 ;src\/Graphics.h:423: WRTVRM(baseAddr, tile);
      0010B7 C5               [11] 3864 	push	bc
      0010B8 DD 7E 06         [19] 3865 	ld	a, 6 (ix)
      0010BB F5               [11] 3866 	push	af
      0010BC 33               [ 6] 3867 	inc	sp
      0010BD C5               [11] 3868 	push	bc
      0010BE CDr00r00         [17] 3869 	call	_WRTVRM
      0010C1 F1               [10] 3870 	pop	af
      0010C2 33               [ 6] 3871 	inc	sp
      0010C3 C1               [10] 3872 	pop	bc
                                   3873 ;src\/Graphics.h:424: WRTVRM(baseAddr + 1, tile);
      0010C4 59               [ 4] 3874 	ld	e, c
      0010C5 50               [ 4] 3875 	ld	d, b
      0010C6 13               [ 6] 3876 	inc	de
      0010C7 C5               [11] 3877 	push	bc
      0010C8 DD 7E 06         [19] 3878 	ld	a, 6 (ix)
      0010CB F5               [11] 3879 	push	af
      0010CC 33               [ 6] 3880 	inc	sp
      0010CD D5               [11] 3881 	push	de
      0010CE CDr00r00         [17] 3882 	call	_WRTVRM
      0010D1 F1               [10] 3883 	pop	af
      0010D2 33               [ 6] 3884 	inc	sp
      0010D3 C1               [10] 3885 	pop	bc
                                   3886 ;src\/Graphics.h:425: WRTVRM(baseAddr + 32, tile);
      0010D4 21 20 00         [10] 3887 	ld	hl, #0x0020
      0010D7 09               [11] 3888 	add	hl, bc
      0010D8 C5               [11] 3889 	push	bc
      0010D9 DD 7E 06         [19] 3890 	ld	a, 6 (ix)
      0010DC F5               [11] 3891 	push	af
      0010DD 33               [ 6] 3892 	inc	sp
      0010DE E5               [11] 3893 	push	hl
      0010DF CDr00r00         [17] 3894 	call	_WRTVRM
      0010E2 F1               [10] 3895 	pop	af
      0010E3 33               [ 6] 3896 	inc	sp
      0010E4 C1               [10] 3897 	pop	bc
                                   3898 ;src\/Graphics.h:426: WRTVRM(baseAddr + 33, tile);
      0010E5 21 21 00         [10] 3899 	ld	hl, #0x0021
      0010E8 09               [11] 3900 	add	hl, bc
      0010E9 DD 7E 06         [19] 3901 	ld	a, 6 (ix)
      0010EC F5               [11] 3902 	push	af
      0010ED 33               [ 6] 3903 	inc	sp
      0010EE E5               [11] 3904 	push	hl
      0010EF CDr00r00         [17] 3905 	call	_WRTVRM
      0010F2 F1               [10] 3906 	pop	af
      0010F3 33               [ 6] 3907 	inc	sp
                                   3908 ;src\/Graphics.h:427: }
      0010F4 DD E1            [14] 3909 	pop	ix
      0010F6 C9               [10] 3910 	ret
                                   3911 ;src\/Graphics.h:429: void DrawLine(byte line) {
                                   3912 ;	---------------------------------
                                   3913 ; Function DrawLine
                                   3914 ; ---------------------------------
      0010F7                       3915 _DrawLine::
      0010F7 DD E5            [15] 3916 	push	ix
      0010F9 DD 21 00 00      [14] 3917 	ld	ix,#0
      0010FD DD 39            [15] 3918 	add	ix,sp
                                   3919 ;src\/Graphics.h:430: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0010FF DD 4E 04         [19] 3920 	ld	c, 4 (ix)
      001102 06 00            [ 7] 3921 	ld	b, #0x00
      001104                       3922 00103$:
      001104 78               [ 4] 3923 	ld	a, b
      001105 D6 06            [ 7] 3924 	sub	a, #0x06
      001107 30 23            [12] 3925 	jr	NC, 00105$
                                   3926 ;src\/Graphics.h:431: DrawBlock(col, line, playfield[col][line]);
      001109 58               [ 4] 3927 	ld	e, b
      00110A 16 00            [ 7] 3928 	ld	d, #0x00
      00110C 6B               [ 4] 3929 	ld	l, e
      00110D 62               [ 4] 3930 	ld	h, d
      00110E 29               [11] 3931 	add	hl, hl
      00110F 19               [11] 3932 	add	hl, de
      001110 29               [11] 3933 	add	hl, hl
      001111 29               [11] 3934 	add	hl, hl
      001112 11r00r00         [10] 3935 	ld	de, #_playfield
      001115 19               [11] 3936 	add	hl, de
      001116 59               [ 4] 3937 	ld	e, c
      001117 16 00            [ 7] 3938 	ld	d, #0x00
      001119 19               [11] 3939 	add	hl, de
      00111A 7E               [ 7] 3940 	ld	a, (hl)
      00111B C5               [11] 3941 	push	bc
      00111C F5               [11] 3942 	push	af
      00111D 33               [ 6] 3943 	inc	sp
      00111E 79               [ 4] 3944 	ld	a, c
      00111F F5               [11] 3945 	push	af
      001120 33               [ 6] 3946 	inc	sp
      001121 C5               [11] 3947 	push	bc
      001122 33               [ 6] 3948 	inc	sp
      001123 CDr24r10         [17] 3949 	call	_DrawBlock
      001126 F1               [10] 3950 	pop	af
      001127 33               [ 6] 3951 	inc	sp
      001128 C1               [10] 3952 	pop	bc
                                   3953 ;src\/Graphics.h:430: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001129 04               [ 4] 3954 	inc	b
      00112A 18 D8            [12] 3955 	jr	00103$
      00112C                       3956 00105$:
                                   3957 ;src\/Graphics.h:433: }
      00112C DD E1            [14] 3958 	pop	ix
      00112E C9               [10] 3959 	ret
                                   3960 ;src\/Graphics.h:435: void DrawPiece(byte line) {
                                   3961 ;	---------------------------------
                                   3962 ; Function DrawPiece
                                   3963 ; ---------------------------------
      00112F                       3964 _DrawPiece::
                                   3965 ;src\/Graphics.h:436: DrawLine(line);
      00112F 21 02 00         [10] 3966 	ld	hl, #2
      001132 39               [11] 3967 	add	hl, sp
      001133 7E               [ 7] 3968 	ld	a, (hl)
      001134 F5               [11] 3969 	push	af
      001135 33               [ 6] 3970 	inc	sp
      001136 CDrF7r10         [17] 3971 	call	_DrawLine
      001139 33               [ 6] 3972 	inc	sp
                                   3973 ;src\/Graphics.h:437: DrawLine(line + 1);
      00113A 21 02 00         [10] 3974 	ld	hl, #2
      00113D 39               [11] 3975 	add	hl, sp
      00113E 46               [ 7] 3976 	ld	b, (hl)
      00113F 78               [ 4] 3977 	ld	a, b
      001140 3C               [ 4] 3978 	inc	a
      001141 C5               [11] 3979 	push	bc
      001142 F5               [11] 3980 	push	af
      001143 33               [ 6] 3981 	inc	sp
      001144 CDrF7r10         [17] 3982 	call	_DrawLine
      001147 33               [ 6] 3983 	inc	sp
      001148 C1               [10] 3984 	pop	bc
                                   3985 ;src\/Graphics.h:438: DrawLine(line + 2);
      001149 04               [ 4] 3986 	inc	b
      00114A 04               [ 4] 3987 	inc	b
      00114B C5               [11] 3988 	push	bc
      00114C 33               [ 6] 3989 	inc	sp
      00114D CDrF7r10         [17] 3990 	call	_DrawLine
      001150 33               [ 6] 3991 	inc	sp
                                   3992 ;src\/Graphics.h:439: }
      001151 C9               [10] 3993 	ret
                                   3994 ;src\/Graphics.h:441: void DrawPlayfield() {
                                   3995 ;	---------------------------------
                                   3996 ; Function DrawPlayfield
                                   3997 ; ---------------------------------
      001152                       3998 _DrawPlayfield::
                                   3999 ;src\/Graphics.h:442: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001152 06 00            [ 7] 4000 	ld	b, #0x00
      001154                       4001 00103$:
      001154 78               [ 4] 4002 	ld	a, b
      001155 D6 0C            [ 7] 4003 	sub	a, #0x0c
      001157 D0               [11] 4004 	ret	NC
                                   4005 ;src\/Graphics.h:443: DrawLine(line);
      001158 C5               [11] 4006 	push	bc
      001159 C5               [11] 4007 	push	bc
      00115A 33               [ 6] 4008 	inc	sp
      00115B CDrF7r10         [17] 4009 	call	_DrawLine
      00115E 33               [ 6] 4010 	inc	sp
      00115F C1               [10] 4011 	pop	bc
                                   4012 ;src\/Graphics.h:442: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001160 04               [ 4] 4013 	inc	b
                                   4014 ;src\/Graphics.h:445: }
      001161 18 F1            [12] 4015 	jr	00103$
                                   4016 ;src\/Sound.h:1: void SoundFx_2() {
                                   4017 ;	---------------------------------
                                   4018 ; Function SoundFx_2
                                   4019 ; ---------------------------------
      001163                       4020 _SoundFx_2::
                                   4021 ;src\/Sound.h:2: GICINI();
      001163 CDr00r00         [17] 4022 	call	_GICINI
                                   4023 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001166 21 08 0F         [10] 4024 	ld	hl, #0x0f08
      001169 CDr00r00         [17] 4025 	call	_WRTPSG
                                   4026 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00116C 0E 00            [ 7] 4027 	ld	c, #0x00
      00116E                       4028 00104$:
      00116E 79               [ 4] 4029 	ld	a, c
      00116F D6 FF            [ 7] 4030 	sub	a, #0xff
      001171 30 11            [12] 4031 	jr	NC, 00101$
                                   4032 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001173 C5               [11] 4033 	push	bc
      001174 21 00 5D         [10] 4034 	ld	hl, #0x5d00
      001177 CDr00r00         [17] 4035 	call	_WRTPSG
      00117A 21 01 00         [10] 4036 	ld	hl, #0x0001
      00117D CDr00r00         [17] 4037 	call	_WRTPSG
      001180 C1               [10] 4038 	pop	bc
                                   4039 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001181 0C               [ 4] 4040 	inc	c
      001182 18 EA            [12] 4041 	jr	00104$
      001184                       4042 00101$:
                                   4043 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001184 0E 00            [ 7] 4044 	ld	c, #0x00
      001186                       4045 00107$:
      001186 79               [ 4] 4046 	ld	a, c
      001187 D6 FF            [ 7] 4047 	sub	a, #0xff
      001189 30 11            [12] 4048 	jr	NC, 00102$
                                   4049 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      00118B C5               [11] 4050 	push	bc
      00118C 21 00 2D         [10] 4051 	ld	hl, #0x2d00
      00118F CDr00r00         [17] 4052 	call	_WRTPSG
      001192 21 01 00         [10] 4053 	ld	hl, #0x0001
      001195 CDr00r00         [17] 4054 	call	_WRTPSG
      001198 C1               [10] 4055 	pop	bc
                                   4056 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001199 0C               [ 4] 4057 	inc	c
      00119A 18 EA            [12] 4058 	jr	00107$
      00119C                       4059 00102$:
                                   4060 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      00119C 21 08 00         [10] 4061 	ld	hl, #0x0008
                                   4062 ;src\/Sound.h:30: }
      00119F C3r00r00         [10] 4063 	jp	_WRTPSG
                                   4064 ;src\/Sound.h:32: void SoundFx_1() {
                                   4065 ;	---------------------------------
                                   4066 ; Function SoundFx_1
                                   4067 ; ---------------------------------
      0011A2                       4068 _SoundFx_1::
                                   4069 ;src\/Sound.h:34: GICINI();
      0011A2 CDr00r00         [17] 4070 	call	_GICINI
                                   4071 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0011A5 21 06 97         [10] 4072 	ld	hl, #0x9706
      0011A8 CDr00r00         [17] 4073 	call	_WRTPSG
                                   4074 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0011AB 21 07 81         [10] 4075 	ld	hl, #0x8107
      0011AE CDr00r00         [17] 4076 	call	_WRTPSG
                                   4077 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0011B1 21 08 10         [10] 4078 	ld	hl, #0x1008
      0011B4 CDr00r00         [17] 4079 	call	_WRTPSG
                                   4080 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0011B7 21 0C 13         [10] 4081 	ld	hl, #0x130c
      0011BA CDr00r00         [17] 4082 	call	_WRTPSG
                                   4083 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0011BD 21 0D 01         [10] 4084 	ld	hl, #0x010d
                                   4085 ;src\/Sound.h:49: }
      0011C0 C3r00r00         [10] 4086 	jp	_WRTPSG
                                   4087 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4088 ;	---------------------------------
                                   4089 ; Function CheckIfPlayfieldIsValid
                                   4090 ; ---------------------------------
      0011C3                       4091 _CheckIfPlayfieldIsValid::
      0011C3 DD E5            [15] 4092 	push	ix
      0011C5 DD 21 00 00      [14] 4093 	ld	ix,#0
      0011C9 DD 39            [15] 4094 	add	ix,sp
      0011CB F5               [11] 4095 	push	af
      0011CC F5               [11] 4096 	push	af
      0011CD 3B               [ 6] 4097 	dec	sp
                                   4098 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      0011CE DD 36 FB 00      [19] 4099 	ld	-5 (ix), #0
                                   4100 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011D2 DD 36 FC 00      [19] 4101 	ld	-4 (ix), #0
      0011D6 DD 36 FE 00      [19] 4102 	ld	-2 (ix), #0
      0011DA                       4103 00119$:
      0011DA DD 7E FE         [19] 4104 	ld	a, -2 (ix)
      0011DD D6 0C            [ 7] 4105 	sub	a, #0x0c
      0011DF D2r72r12         [10] 4106 	jp	NC, 00121$
                                   4107 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011E2 DD 36 FD 00      [19] 4108 	ld	-3 (ix), #0
      0011E6 DD 36 FF 00      [19] 4109 	ld	-1 (ix), #0
      0011EA                       4110 00116$:
      0011EA DD 7E FF         [19] 4111 	ld	a, -1 (ix)
      0011ED D6 06            [ 7] 4112 	sub	a, #0x06
      0011EF 30 75            [12] 4113 	jr	NC, 00120$
                                   4114 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      0011F1 0E 00            [ 7] 4115 	ld	c, #0x00
      0011F3                       4116 00113$:
      0011F3 79               [ 4] 4117 	ld	a, c
      0011F4 D6 05            [ 7] 4118 	sub	a, #0x05
      0011F6 30 33            [12] 4119 	jr	NC, 00104$
                                   4120 ;src\/CheckPlayfield.h:7: found = FALSE;
      0011F8 DD 36 FB 00      [19] 4121 	ld	-5 (ix), #0
                                   4122 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      0011FC DD 5E FF         [19] 4123 	ld	e, -1 (ix)
      0011FF 16 00            [ 7] 4124 	ld	d, #0x00
      001201 6B               [ 4] 4125 	ld	l, e
      001202 62               [ 4] 4126 	ld	h, d
      001203 29               [11] 4127 	add	hl, hl
      001204 19               [11] 4128 	add	hl, de
      001205 29               [11] 4129 	add	hl, hl
      001206 29               [11] 4130 	add	hl, hl
      001207 11r48r00         [10] 4131 	ld	de, #_playfieldTemp
      00120A 19               [11] 4132 	add	hl, de
      00120B 7D               [ 4] 4133 	ld	a, l
      00120C DD 86 FE         [19] 4134 	add	a, -2 (ix)
      00120F 5F               [ 4] 4135 	ld	e, a
      001210 7C               [ 4] 4136 	ld	a, h
      001211 CE 00            [ 7] 4137 	adc	a, #0x00
      001213 57               [ 4] 4138 	ld	d, a
      001214 21r18r00         [10] 4139 	ld	hl, #_pieces
      001217 06 00            [ 7] 4140 	ld	b, #0x00
      001219 09               [11] 4141 	add	hl, bc
      00121A 46               [ 7] 4142 	ld	b, (hl)
      00121B 1A               [ 7] 4143 	ld	a, (de)
      00121C B8               [ 4] 4144 	cp	a, b
      00121D 28 03            [12] 4145 	jr	Z, 00101$
      00121F B7               [ 4] 4146 	or	a, a
      001220 20 06            [12] 4147 	jr	NZ, 00114$
      001222                       4148 00101$:
                                   4149 ;src\/CheckPlayfield.h:9: found = TRUE;
      001222 DD 36 FB 01      [19] 4150 	ld	-5 (ix), #0x01
                                   4151 ;src\/CheckPlayfield.h:10: break;
      001226 18 03            [12] 4152 	jr	00104$
      001228                       4153 00114$:
                                   4154 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001228 0C               [ 4] 4155 	inc	c
      001229 18 C8            [12] 4156 	jr	00113$
      00122B                       4157 00104$:
                                   4158 ;src\/CheckPlayfield.h:13: if(!found) {
      00122B DD 7E FB         [19] 4159 	ld	a, -5 (ix)
      00122E B7               [ 4] 4160 	or	a, a
      00122F 20 2A            [12] 4161 	jr	NZ, 00117$
                                   4162 ;src\/CheckPlayfield.h:14: d_col = col;
      001231 DD 7E FD         [19] 4163 	ld	a, -3 (ix)
      001234 32r09r00         [13] 4164 	ld	(#_d_col),a
                                   4165 ;src\/CheckPlayfield.h:15: d_line = line;
      001237 DD 7E FC         [19] 4166 	ld	a, -4 (ix)
      00123A 32r0Ar00         [13] 4167 	ld	(#_d_line),a
                                   4168 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      00123D DD 4E FD         [19] 4169 	ld	c, -3 (ix)
      001240 06 00            [ 7] 4170 	ld	b, #0x00
      001242 69               [ 4] 4171 	ld	l, c
      001243 60               [ 4] 4172 	ld	h, b
      001244 29               [11] 4173 	add	hl, hl
      001245 09               [11] 4174 	add	hl, bc
      001246 29               [11] 4175 	add	hl, hl
      001247 29               [11] 4176 	add	hl, hl
      001248 11r48r00         [10] 4177 	ld	de, #_playfieldTemp
      00124B 19               [11] 4178 	add	hl, de
      00124C DD 5E FC         [19] 4179 	ld	e, -4 (ix)
      00124F 16 00            [ 7] 4180 	ld	d, #0x00
      001251 19               [11] 4181 	add	hl, de
      001252 7E               [ 7] 4182 	ld	a, (hl)
      001253 32r0Br00         [13] 4183 	ld	(_d_value+0), a
                                   4184 ;src\/CheckPlayfield.h:18: while(1) { 
      001256                       4185 00106$:
                                   4186 ;src\/CheckPlayfield.h:19: BEEP();
      001256 CDr00r00         [17] 4187 	call	_BEEP
      001259 18 FB            [12] 4188 	jr	00106$
      00125B                       4189 00117$:
                                   4190 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00125B DD 34 FF         [23] 4191 	inc	-1 (ix)
      00125E DD 7E FF         [19] 4192 	ld	a, -1 (ix)
      001261 DD 77 FD         [19] 4193 	ld	-3 (ix), a
      001264 18 84            [12] 4194 	jr	00116$
      001266                       4195 00120$:
                                   4196 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001266 DD 34 FE         [23] 4197 	inc	-2 (ix)
      001269 DD 7E FE         [19] 4198 	ld	a, -2 (ix)
      00126C DD 77 FC         [19] 4199 	ld	-4 (ix), a
      00126F C3rDAr11         [10] 4200 	jp	00119$
      001272                       4201 00121$:
                                   4202 ;src\/CheckPlayfield.h:25: }
      001272 DD F9            [10] 4203 	ld	sp, ix
      001274 DD E1            [14] 4204 	pop	ix
      001276 C9               [10] 4205 	ret
                                   4206 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4207 ;	---------------------------------
                                   4208 ; Function CheckPlayfield
                                   4209 ; ---------------------------------
      001277                       4210 _CheckPlayfield::
      001277 DD E5            [15] 4211 	push	ix
      001279 DD 21 00 00      [14] 4212 	ld	ix,#0
      00127D DD 39            [15] 4213 	add	ix,sp
      00127F 21 EF FF         [10] 4214 	ld	hl, #-17
      001282 39               [11] 4215 	add	hl, sp
      001283 F9               [ 6] 4216 	ld	sp, hl
                                   4217 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      001284 DD 36 EF 00      [19] 4218 	ld	-17 (ix), #0
                                   4219 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001288 0E 00            [ 7] 4220 	ld	c, #0x00
      00128A                       4221 00190$:
      00128A 79               [ 4] 4222 	ld	a, c
      00128B D6 0C            [ 7] 4223 	sub	a, #0x0c
      00128D 30 36            [12] 4224 	jr	NC, 00102$
                                   4225 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00128F DD 36 FF 00      [19] 4226 	ld	-1 (ix), #0
      001293                       4227 00187$:
      001293 DD 7E FF         [19] 4228 	ld	a, -1 (ix)
      001296 D6 06            [ 7] 4229 	sub	a, #0x06
      001298 30 28            [12] 4230 	jr	NC, 00191$
                                   4231 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      00129A DD 5E FF         [19] 4232 	ld	e, -1 (ix)
      00129D 16 00            [ 7] 4233 	ld	d, #0x00
      00129F 6B               [ 4] 4234 	ld	l, e
      0012A0 62               [ 4] 4235 	ld	h, d
      0012A1 29               [11] 4236 	add	hl, hl
      0012A2 19               [11] 4237 	add	hl, de
      0012A3 29               [11] 4238 	add	hl, hl
      0012A4 29               [11] 4239 	add	hl, hl
      0012A5 EB               [ 4] 4240 	ex	de, hl
      0012A6 21r48r00         [10] 4241 	ld	hl, #_playfieldTemp
      0012A9 19               [11] 4242 	add	hl, de
      0012AA 06 00            [ 7] 4243 	ld	b, #0x00
      0012AC 09               [11] 4244 	add	hl, bc
      0012AD 3Er00            [ 7] 4245 	ld	a, #<(_playfield)
      0012AF 83               [ 4] 4246 	add	a, e
      0012B0 5F               [ 4] 4247 	ld	e, a
      0012B1 3Es00            [ 7] 4248 	ld	a, #>(_playfield)
      0012B3 8A               [ 4] 4249 	adc	a, d
      0012B4 57               [ 4] 4250 	ld	d, a
      0012B5 7B               [ 4] 4251 	ld	a, e
      0012B6 81               [ 4] 4252 	add	a, c
      0012B7 5F               [ 4] 4253 	ld	e, a
      0012B8 30 01            [12] 4254 	jr	NC, 00599$
      0012BA 14               [ 4] 4255 	inc	d
      0012BB                       4256 00599$:
      0012BB 1A               [ 7] 4257 	ld	a, (de)
      0012BC 77               [ 7] 4258 	ld	(hl), a
                                   4259 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0012BD DD 34 FF         [23] 4260 	inc	-1 (ix)
      0012C0 18 D1            [12] 4261 	jr	00187$
      0012C2                       4262 00191$:
                                   4263 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0012C2 0C               [ 4] 4264 	inc	c
      0012C3 18 C5            [12] 4265 	jr	00190$
      0012C5                       4266 00102$:
                                   4267 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0012C5 DD 36 FE 00      [19] 4268 	ld	-2 (ix), #0
      0012C9                       4269 00196$:
      0012C9 DD 7E FE         [19] 4270 	ld	a, -2 (ix)
      0012CC D6 0C            [ 7] 4271 	sub	a, #0x0c
      0012CE D2rCDr13         [10] 4272 	jp	NC, 00108$
                                   4273 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0012D1 DD 36 FF 02      [19] 4274 	ld	-1 (ix), #0x02
      0012D5                       4275 00193$:
      0012D5 DD 7E FF         [19] 4276 	ld	a, -1 (ix)
      0012D8 D6 06            [ 7] 4277 	sub	a, #0x06
      0012DA D2rC7r13         [10] 4278 	jp	NC, 00197$
                                   4279 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      0012DD DD 4E FF         [19] 4280 	ld	c, -1 (ix)
      0012E0 06 00            [ 7] 4281 	ld	b, #0x00
      0012E2 69               [ 4] 4282 	ld	l, c
      0012E3 60               [ 4] 4283 	ld	h, b
      0012E4 29               [11] 4284 	add	hl, hl
      0012E5 09               [11] 4285 	add	hl, bc
      0012E6 29               [11] 4286 	add	hl, hl
      0012E7 29               [11] 4287 	add	hl, hl
      0012E8 DD 75 F5         [19] 4288 	ld	-11 (ix), l
      0012EB DD 74 F6         [19] 4289 	ld	-10 (ix), h
      0012EE 3Er48            [ 7] 4290 	ld	a, #<(_playfieldTemp)
      0012F0 DD 86 F5         [19] 4291 	add	a, -11 (ix)
      0012F3 4F               [ 4] 4292 	ld	c, a
      0012F4 3Es00            [ 7] 4293 	ld	a, #>(_playfieldTemp)
      0012F6 DD 8E F6         [19] 4294 	adc	a, -10 (ix)
      0012F9 47               [ 4] 4295 	ld	b, a
      0012FA 79               [ 4] 4296 	ld	a, c
      0012FB DD 86 FE         [19] 4297 	add	a, -2 (ix)
      0012FE DD 77 F7         [19] 4298 	ld	-9 (ix), a
      001301 78               [ 4] 4299 	ld	a, b
      001302 CE 00            [ 7] 4300 	adc	a, #0x00
      001304 DD 77 F8         [19] 4301 	ld	-8 (ix), a
      001307 DD 6E F7         [19] 4302 	ld	l, -9 (ix)
      00130A DD 66 F8         [19] 4303 	ld	h, -8 (ix)
      00130D 7E               [ 7] 4304 	ld	a, (hl)
      00130E DD 77 F9         [19] 4305 	ld	-7 (ix), a
      001311 B7               [ 4] 4306 	or	a, a
      001312 CArC1r13         [10] 4307 	jp	Z, 00194$
                                   4308 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001315 DD 7E FF         [19] 4309 	ld	a, -1 (ix)
      001318 DD 77 FD         [19] 4310 	ld	-3 (ix), a
      00131B 4F               [ 4] 4311 	ld	c, a
      00131C 0D               [ 4] 4312 	dec	c
      00131D 0D               [ 4] 4313 	dec	c
      00131E 79               [ 4] 4314 	ld	a, c
      00131F 07               [ 4] 4315 	rlca
      001320 9F               [ 4] 4316 	sbc	a, a
      001321 47               [ 4] 4317 	ld	b, a
      001322 69               [ 4] 4318 	ld	l, c
      001323 60               [ 4] 4319 	ld	h, b
      001324 29               [11] 4320 	add	hl, hl
      001325 09               [11] 4321 	add	hl, bc
      001326 29               [11] 4322 	add	hl, hl
      001327 29               [11] 4323 	add	hl, hl
      001328 EB               [ 4] 4324 	ex	de, hl
      001329 21r48r00         [10] 4325 	ld	hl, #_playfieldTemp
      00132C 19               [11] 4326 	add	hl, de
      00132D 7D               [ 4] 4327 	ld	a, l
      00132E DD 86 FE         [19] 4328 	add	a, -2 (ix)
      001331 DD 77 FA         [19] 4329 	ld	-6 (ix), a
      001334 7C               [ 4] 4330 	ld	a, h
      001335 CE 00            [ 7] 4331 	adc	a, #0x00
      001337 DD 77 FB         [19] 4332 	ld	-5 (ix), a
      00133A DD 4E FD         [19] 4333 	ld	c, -3 (ix)
      00133D 0D               [ 4] 4334 	dec	c
      00133E 79               [ 4] 4335 	ld	a, c
      00133F 07               [ 4] 4336 	rlca
      001340 9F               [ 4] 4337 	sbc	a, a
      001341 47               [ 4] 4338 	ld	b, a
      001342 69               [ 4] 4339 	ld	l, c
      001343 60               [ 4] 4340 	ld	h, b
      001344 29               [11] 4341 	add	hl, hl
      001345 09               [11] 4342 	add	hl, bc
      001346 29               [11] 4343 	add	hl, hl
      001347 29               [11] 4344 	add	hl, hl
      001348 DD 75 FC         [19] 4345 	ld	-4 (ix), l
      00134B DD 74 FD         [19] 4346 	ld	-3 (ix), h
      00134E 3Er48            [ 7] 4347 	ld	a, #<(_playfieldTemp)
      001350 DD 86 FC         [19] 4348 	add	a, -4 (ix)
      001353 4F               [ 4] 4349 	ld	c, a
      001354 3Es00            [ 7] 4350 	ld	a, #>(_playfieldTemp)
      001356 DD 8E FD         [19] 4351 	adc	a, -3 (ix)
      001359 47               [ 4] 4352 	ld	b, a
      00135A 79               [ 4] 4353 	ld	a, c
      00135B DD 86 FE         [19] 4354 	add	a, -2 (ix)
      00135E 4F               [ 4] 4355 	ld	c, a
      00135F 30 01            [12] 4356 	jr	NC, 00600$
      001361 04               [ 4] 4357 	inc	b
      001362                       4358 00600$:
      001362 DD 6E FA         [19] 4359 	ld	l, -6 (ix)
      001365 DD 66 FB         [19] 4360 	ld	h, -5 (ix)
      001368 6E               [ 7] 4361 	ld	l, (hl)
      001369 0A               [ 7] 4362 	ld	a, (bc)
      00136A 67               [ 4] 4363 	ld	h, a
      00136B 7D               [ 4] 4364 	ld	a, l
      00136C 94               [ 4] 4365 	sub	a, h
      00136D 20 52            [12] 4366 	jr	NZ, 00194$
                                   4367 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00136F DD 7E F9         [19] 4368 	ld	a, -7 (ix)
      001372 94               [ 4] 4369 	sub	a, h
      001373 20 4C            [12] 4370 	jr	NZ, 00194$
                                   4371 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      001375 DD 36 EF 01      [19] 4372 	ld	-17 (ix), #0x01
                                   4373 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001379 3Er00            [ 7] 4374 	ld	a, #<(_playfield)
      00137B 83               [ 4] 4375 	add	a, e
      00137C 5F               [ 4] 4376 	ld	e, a
      00137D 3Es00            [ 7] 4377 	ld	a, #>(_playfield)
      00137F 8A               [ 4] 4378 	adc	a, d
      001380 57               [ 4] 4379 	ld	d, a
      001381 7B               [ 4] 4380 	ld	a, e
      001382 DD 86 FE         [19] 4381 	add	a, -2 (ix)
      001385 5F               [ 4] 4382 	ld	e, a
      001386 30 01            [12] 4383 	jr	NC, 00605$
      001388 14               [ 4] 4384 	inc	d
      001389                       4385 00605$:
      001389 7D               [ 4] 4386 	ld	a, l
      00138A CB FF            [ 8] 4387 	set	7, a
      00138C 12               [ 7] 4388 	ld	(de), a
                                   4389 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00138D 3Er00            [ 7] 4390 	ld	a, #<(_playfield)
      00138F DD 86 FC         [19] 4391 	add	a, -4 (ix)
      001392 5F               [ 4] 4392 	ld	e, a
      001393 3Es00            [ 7] 4393 	ld	a, #>(_playfield)
      001395 DD 8E FD         [19] 4394 	adc	a, -3 (ix)
      001398 57               [ 4] 4395 	ld	d, a
      001399 DD 6E FE         [19] 4396 	ld	l, -2 (ix)
      00139C 26 00            [ 7] 4397 	ld	h, #0x00
      00139E 19               [11] 4398 	add	hl, de
      00139F 0A               [ 7] 4399 	ld	a, (bc)
      0013A0 CB FF            [ 8] 4400 	set	7, a
      0013A2 77               [ 7] 4401 	ld	(hl), a
                                   4402 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0013A3 3Er00            [ 7] 4403 	ld	a, #<(_playfield)
      0013A5 DD 86 F5         [19] 4404 	add	a, -11 (ix)
      0013A8 4F               [ 4] 4405 	ld	c, a
      0013A9 3Es00            [ 7] 4406 	ld	a, #>(_playfield)
      0013AB DD 8E F6         [19] 4407 	adc	a, -10 (ix)
      0013AE 47               [ 4] 4408 	ld	b, a
      0013AF 79               [ 4] 4409 	ld	a, c
      0013B0 DD 86 FE         [19] 4410 	add	a, -2 (ix)
      0013B3 4F               [ 4] 4411 	ld	c, a
      0013B4 30 01            [12] 4412 	jr	NC, 00606$
      0013B6 04               [ 4] 4413 	inc	b
      0013B7                       4414 00606$:
      0013B7 DD 6E F7         [19] 4415 	ld	l, -9 (ix)
      0013BA DD 66 F8         [19] 4416 	ld	h, -8 (ix)
      0013BD 7E               [ 7] 4417 	ld	a, (hl)
      0013BE CB FF            [ 8] 4418 	set	7, a
      0013C0 02               [ 7] 4419 	ld	(bc), a
      0013C1                       4420 00194$:
                                   4421 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0013C1 DD 34 FF         [23] 4422 	inc	-1 (ix)
      0013C4 C3rD5r12         [10] 4423 	jp	00193$
      0013C7                       4424 00197$:
                                   4425 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0013C7 DD 34 FE         [23] 4426 	inc	-2 (ix)
      0013CA C3rC9r12         [10] 4427 	jp	00196$
      0013CD                       4428 00108$:
                                   4429 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0013CD 0E 02            [ 7] 4430 	ld	c, #0x02
      0013CF                       4431 00202$:
      0013CF 79               [ 4] 4432 	ld	a, c
      0013D0 D6 0C            [ 7] 4433 	sub	a, #0x0c
      0013D2 D2r94r14         [10] 4434 	jp	NC, 00114$
                                   4435 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0013D5 DD 36 FF 00      [19] 4436 	ld	-1 (ix), #0
      0013D9                       4437 00199$:
      0013D9 DD 7E FF         [19] 4438 	ld	a, -1 (ix)
      0013DC D6 06            [ 7] 4439 	sub	a, #0x06
      0013DE D2r90r14         [10] 4440 	jp	NC, 00203$
                                   4441 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      0013E1 DD 5E FF         [19] 4442 	ld	e, -1 (ix)
      0013E4 16 00            [ 7] 4443 	ld	d, #0x00
      0013E6 6B               [ 4] 4444 	ld	l, e
      0013E7 62               [ 4] 4445 	ld	h, d
      0013E8 29               [11] 4446 	add	hl, hl
      0013E9 19               [11] 4447 	add	hl, de
      0013EA 29               [11] 4448 	add	hl, hl
      0013EB 29               [11] 4449 	add	hl, hl
      0013EC DD 75 F7         [19] 4450 	ld	-9 (ix), l
      0013EF DD 74 F8         [19] 4451 	ld	-8 (ix), h
      0013F2 3Er48            [ 7] 4452 	ld	a, #<(_playfieldTemp)
      0013F4 DD 86 F7         [19] 4453 	add	a, -9 (ix)
      0013F7 5F               [ 4] 4454 	ld	e, a
      0013F8 3Es00            [ 7] 4455 	ld	a, #>(_playfieldTemp)
      0013FA DD 8E F8         [19] 4456 	adc	a, -8 (ix)
      0013FD 57               [ 4] 4457 	ld	d, a
      0013FE 7B               [ 4] 4458 	ld	a, e
      0013FF 81               [ 4] 4459 	add	a, c
      001400 DD 77 F9         [19] 4460 	ld	-7 (ix), a
      001403 7A               [ 4] 4461 	ld	a, d
      001404 CE 00            [ 7] 4462 	adc	a, #0x00
      001406 DD 77 FA         [19] 4463 	ld	-6 (ix), a
      001409 DD 6E F9         [19] 4464 	ld	l, -7 (ix)
      00140C DD 66 FA         [19] 4465 	ld	h, -6 (ix)
      00140F 7E               [ 7] 4466 	ld	a, (hl)
      001410 DD 77 FE         [19] 4467 	ld	-2 (ix), a
      001413 B7               [ 4] 4468 	or	a, a
      001414 28 74            [12] 4469 	jr	Z, 00200$
                                   4470 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001416 DD 71 FD         [19] 4471 	ld	-3 (ix), c
      001419 79               [ 4] 4472 	ld	a, c
      00141A C6 FE            [ 7] 4473 	add	a, #0xfe
      00141C DD 77 FB         [19] 4474 	ld	-5 (ix), a
      00141F 6F               [ 4] 4475 	ld	l, a
      001420 26 00            [ 7] 4476 	ld	h, #0x00
      001422 19               [11] 4477 	add	hl, de
      001423 DD 46 FD         [19] 4478 	ld	b, -3 (ix)
      001426 05               [ 4] 4479 	dec	b
      001427 7B               [ 4] 4480 	ld	a, e
      001428 80               [ 4] 4481 	add	a, b
      001429 5F               [ 4] 4482 	ld	e, a
      00142A 30 01            [12] 4483 	jr	NC, 00607$
      00142C 14               [ 4] 4484 	inc	d
      00142D                       4485 00607$:
      00142D 7E               [ 7] 4486 	ld	a, (hl)
      00142E DD 77 FC         [19] 4487 	ld	-4 (ix), a
      001431 1A               [ 7] 4488 	ld	a, (de)
      001432 6F               [ 4] 4489 	ld	l, a
      001433 DD 7E FC         [19] 4490 	ld	a, -4 (ix)
      001436 95               [ 4] 4491 	sub	a, l
      001437 20 51            [12] 4492 	jr	NZ, 00200$
                                   4493 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001439 DD 7E FE         [19] 4494 	ld	a, -2 (ix)
      00143C 95               [ 4] 4495 	sub	a, l
      00143D 20 4B            [12] 4496 	jr	NZ, 00200$
                                   4497 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      00143F DD 36 EF 01      [19] 4498 	ld	-17 (ix), #0x01
                                   4499 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001443 3Er00            [ 7] 4500 	ld	a, #<(_playfield)
      001445 DD 86 F7         [19] 4501 	add	a, -9 (ix)
      001448 DD 77 FD         [19] 4502 	ld	-3 (ix), a
      00144B 3Es00            [ 7] 4503 	ld	a, #>(_playfield)
      00144D DD 8E F8         [19] 4504 	adc	a, -8 (ix)
      001450 DD 77 FE         [19] 4505 	ld	-2 (ix), a
      001453 DD 7E FD         [19] 4506 	ld	a, -3 (ix)
      001456 DD 86 FB         [19] 4507 	add	a, -5 (ix)
      001459 6F               [ 4] 4508 	ld	l, a
      00145A DD 7E FE         [19] 4509 	ld	a, -2 (ix)
      00145D CE 00            [ 7] 4510 	adc	a, #0x00
      00145F 67               [ 4] 4511 	ld	h, a
      001460 DD 7E FC         [19] 4512 	ld	a, -4 (ix)
      001463 CB FF            [ 8] 4513 	set	7, a
      001465 77               [ 7] 4514 	ld	(hl), a
                                   4515 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001466 DD 7E FD         [19] 4516 	ld	a, -3 (ix)
      001469 80               [ 4] 4517 	add	a, b
      00146A 6F               [ 4] 4518 	ld	l, a
      00146B DD 7E FE         [19] 4519 	ld	a, -2 (ix)
      00146E CE 00            [ 7] 4520 	adc	a, #0x00
      001470 67               [ 4] 4521 	ld	h, a
      001471 1A               [ 7] 4522 	ld	a, (de)
      001472 CB FF            [ 8] 4523 	set	7, a
      001474 77               [ 7] 4524 	ld	(hl), a
                                   4525 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001475 DD 7E FD         [19] 4526 	ld	a, -3 (ix)
      001478 81               [ 4] 4527 	add	a, c
      001479 5F               [ 4] 4528 	ld	e, a
      00147A DD 7E FE         [19] 4529 	ld	a, -2 (ix)
      00147D CE 00            [ 7] 4530 	adc	a, #0x00
      00147F 57               [ 4] 4531 	ld	d, a
      001480 DD 6E F9         [19] 4532 	ld	l, -7 (ix)
      001483 DD 66 FA         [19] 4533 	ld	h, -6 (ix)
      001486 7E               [ 7] 4534 	ld	a, (hl)
      001487 CB FF            [ 8] 4535 	set	7, a
      001489 12               [ 7] 4536 	ld	(de), a
      00148A                       4537 00200$:
                                   4538 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00148A DD 34 FF         [23] 4539 	inc	-1 (ix)
      00148D C3rD9r13         [10] 4540 	jp	00199$
      001490                       4541 00203$:
                                   4542 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001490 0C               [ 4] 4543 	inc	c
      001491 C3rCFr13         [10] 4544 	jp	00202$
      001494                       4545 00114$:
                                   4546 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001494 DD 36 FE 02      [19] 4547 	ld	-2 (ix), #0x02
      001498                       4548 00208$:
      001498 DD 7E FE         [19] 4549 	ld	a, -2 (ix)
      00149B D6 0C            [ 7] 4550 	sub	a, #0x0c
      00149D D2r3Br16         [10] 4551 	jp	NC, 00124$
                                   4552 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0014A0 DD 36 FF 02      [19] 4553 	ld	-1 (ix), #0x02
      0014A4                       4554 00205$:
      0014A4 DD 7E FF         [19] 4555 	ld	a, -1 (ix)
      0014A7 D6 06            [ 7] 4556 	sub	a, #0x06
      0014A9 D2r35r16         [10] 4557 	jp	NC, 00209$
                                   4558 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0014AC DD 4E FF         [19] 4559 	ld	c, -1 (ix)
      0014AF 06 00            [ 7] 4560 	ld	b, #0x00
      0014B1 69               [ 4] 4561 	ld	l, c
      0014B2 60               [ 4] 4562 	ld	h, b
      0014B3 29               [11] 4563 	add	hl, hl
      0014B4 09               [11] 4564 	add	hl, bc
      0014B5 29               [11] 4565 	add	hl, hl
      0014B6 29               [11] 4566 	add	hl, hl
      0014B7 DD 75 F0         [19] 4567 	ld	-16 (ix), l
      0014BA DD 74 F1         [19] 4568 	ld	-15 (ix), h
      0014BD 3Er48            [ 7] 4569 	ld	a, #<(_playfieldTemp)
      0014BF DD 86 F0         [19] 4570 	add	a, -16 (ix)
      0014C2 4F               [ 4] 4571 	ld	c, a
      0014C3 3Es00            [ 7] 4572 	ld	a, #>(_playfieldTemp)
      0014C5 DD 8E F1         [19] 4573 	adc	a, -15 (ix)
      0014C8 47               [ 4] 4574 	ld	b, a
      0014C9 79               [ 4] 4575 	ld	a, c
      0014CA DD 86 FE         [19] 4576 	add	a, -2 (ix)
      0014CD DD 77 F2         [19] 4577 	ld	-14 (ix), a
      0014D0 78               [ 4] 4578 	ld	a, b
      0014D1 CE 00            [ 7] 4579 	adc	a, #0x00
      0014D3 DD 77 F3         [19] 4580 	ld	-13 (ix), a
      0014D6 DD 6E F2         [19] 4581 	ld	l, -14 (ix)
      0014D9 DD 66 F3         [19] 4582 	ld	h, -13 (ix)
      0014DC 5E               [ 7] 4583 	ld	e, (hl)
                                   4584 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0014DD DD 56 FF         [19] 4585 	ld	d, -1 (ix)
      0014E0 DD 66 FE         [19] 4586 	ld	h, -2 (ix)
      0014E3 6A               [ 4] 4587 	ld	l, d
      0014E4 2D               [ 4] 4588 	dec	l
      0014E5 2D               [ 4] 4589 	dec	l
      0014E6 7C               [ 4] 4590 	ld	a, h
      0014E7 C6 FE            [ 7] 4591 	add	a, #0xfe
      0014E9 DD 77 F4         [19] 4592 	ld	-12 (ix), a
      0014EC 15               [ 4] 4593 	dec	d
      0014ED 7C               [ 4] 4594 	ld	a, h
      0014EE C6 FF            [ 7] 4595 	add	a, #0xff
      0014F0 DD 77 F5         [19] 4596 	ld	-11 (ix), a
      0014F3 D5               [11] 4597 	push	de
      0014F4 5D               [ 4] 4598 	ld	e, l
      0014F5 7B               [ 4] 4599 	ld	a, e
      0014F6 07               [ 4] 4600 	rlca
      0014F7 9F               [ 4] 4601 	sbc	a, a
      0014F8 57               [ 4] 4602 	ld	d, a
      0014F9 6B               [ 4] 4603 	ld	l, e
      0014FA 62               [ 4] 4604 	ld	h, d
      0014FB 29               [11] 4605 	add	hl, hl
      0014FC 19               [11] 4606 	add	hl, de
      0014FD 29               [11] 4607 	add	hl, hl
      0014FE 29               [11] 4608 	add	hl, hl
      0014FF D1               [10] 4609 	pop	de
      001500 DD 75 F6         [19] 4610 	ld	-10 (ix), l
      001503 DD 74 F7         [19] 4611 	ld	-9 (ix), h
      001506 D5               [11] 4612 	push	de
      001507 5A               [ 4] 4613 	ld	e, d
      001508 7B               [ 4] 4614 	ld	a, e
      001509 07               [ 4] 4615 	rlca
      00150A 9F               [ 4] 4616 	sbc	a, a
      00150B 57               [ 4] 4617 	ld	d, a
      00150C 6B               [ 4] 4618 	ld	l, e
      00150D 62               [ 4] 4619 	ld	h, d
      00150E 29               [11] 4620 	add	hl, hl
      00150F 19               [11] 4621 	add	hl, de
      001510 29               [11] 4622 	add	hl, hl
      001511 29               [11] 4623 	add	hl, hl
      001512 D1               [10] 4624 	pop	de
      001513 DD 75 F8         [19] 4625 	ld	-8 (ix), l
      001516 DD 74 F9         [19] 4626 	ld	-7 (ix), h
      001519 3Er48            [ 7] 4627 	ld	a, #<(_playfieldTemp)
      00151B DD 86 F6         [19] 4628 	add	a, -10 (ix)
      00151E DD 77 FA         [19] 4629 	ld	-6 (ix), a
      001521 3Es00            [ 7] 4630 	ld	a, #>(_playfieldTemp)
      001523 DD 8E F7         [19] 4631 	adc	a, -9 (ix)
      001526 DD 77 FB         [19] 4632 	ld	-5 (ix), a
      001529 3Er48            [ 7] 4633 	ld	a, #<(_playfieldTemp)
      00152B DD 86 F8         [19] 4634 	add	a, -8 (ix)
      00152E 57               [ 4] 4635 	ld	d, a
      00152F 3Es00            [ 7] 4636 	ld	a, #>(_playfieldTemp)
      001531 DD 8E F9         [19] 4637 	adc	a, -7 (ix)
      001534 6F               [ 4] 4638 	ld	l, a
      001535 7A               [ 4] 4639 	ld	a, d
      001536 DD 86 F5         [19] 4640 	add	a, -11 (ix)
      001539 DD 77 FC         [19] 4641 	ld	-4 (ix), a
      00153C 7D               [ 4] 4642 	ld	a, l
      00153D CE 00            [ 7] 4643 	adc	a, #0x00
      00153F DD 77 FD         [19] 4644 	ld	-3 (ix), a
                                   4645 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      001542 7B               [ 4] 4646 	ld	a, e
      001543 B7               [ 4] 4647 	or	a, a
      001544 28 74            [12] 4648 	jr	Z, 00116$
                                   4649 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001546 DD 7E FA         [19] 4650 	ld	a, -6 (ix)
      001549 DD 86 F4         [19] 4651 	add	a, -12 (ix)
      00154C 6F               [ 4] 4652 	ld	l, a
      00154D DD 7E FB         [19] 4653 	ld	a, -5 (ix)
      001550 CE 00            [ 7] 4654 	adc	a, #0x00
      001552 67               [ 4] 4655 	ld	h, a
      001553 56               [ 7] 4656 	ld	d, (hl)
      001554 DD 6E FC         [19] 4657 	ld	l, -4 (ix)
      001557 DD 66 FD         [19] 4658 	ld	h, -3 (ix)
      00155A 6E               [ 7] 4659 	ld	l, (hl)
      00155B 7A               [ 4] 4660 	ld	a, d
      00155C 95               [ 4] 4661 	sub	a, l
      00155D 20 5B            [12] 4662 	jr	NZ, 00116$
                                   4663 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      00155F 7B               [ 4] 4664 	ld	a, e
      001560 95               [ 4] 4665 	sub	a, l
      001561 20 57            [12] 4666 	jr	NZ, 00116$
                                   4667 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      001563 DD 36 EF 01      [19] 4668 	ld	-17 (ix), #0x01
                                   4669 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001567 3Er00            [ 7] 4670 	ld	a, #<(_playfield)
      001569 DD 86 F6         [19] 4671 	add	a, -10 (ix)
      00156C 5F               [ 4] 4672 	ld	e, a
      00156D 3Es00            [ 7] 4673 	ld	a, #>(_playfield)
      00156F DD 8E F7         [19] 4674 	adc	a, -9 (ix)
      001572 67               [ 4] 4675 	ld	h, a
      001573 7B               [ 4] 4676 	ld	a, e
      001574 DD 86 F4         [19] 4677 	add	a, -12 (ix)
      001577 6F               [ 4] 4678 	ld	l, a
      001578 30 01            [12] 4679 	jr	NC, 00616$
      00157A 24               [ 4] 4680 	inc	h
      00157B                       4681 00616$:
      00157B CB FA            [ 8] 4682 	set	7, d
      00157D 72               [ 7] 4683 	ld	(hl), d
                                   4684 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      00157E 3Er00            [ 7] 4685 	ld	a, #<(_playfield)
      001580 DD 86 F8         [19] 4686 	add	a, -8 (ix)
      001583 5F               [ 4] 4687 	ld	e, a
      001584 3Es00            [ 7] 4688 	ld	a, #>(_playfield)
      001586 DD 8E F9         [19] 4689 	adc	a, -7 (ix)
      001589 57               [ 4] 4690 	ld	d, a
      00158A 7B               [ 4] 4691 	ld	a, e
      00158B DD 86 F5         [19] 4692 	add	a, -11 (ix)
      00158E 5F               [ 4] 4693 	ld	e, a
      00158F 30 01            [12] 4694 	jr	NC, 00617$
      001591 14               [ 4] 4695 	inc	d
      001592                       4696 00617$:
      001592 DD 6E FC         [19] 4697 	ld	l, -4 (ix)
      001595 DD 66 FD         [19] 4698 	ld	h, -3 (ix)
      001598 7E               [ 7] 4699 	ld	a, (hl)
      001599 CB FF            [ 8] 4700 	set	7, a
      00159B 12               [ 7] 4701 	ld	(de), a
                                   4702 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      00159C 3Er00            [ 7] 4703 	ld	a, #<(_playfield)
      00159E DD 86 F0         [19] 4704 	add	a, -16 (ix)
      0015A1 5F               [ 4] 4705 	ld	e, a
      0015A2 3Es00            [ 7] 4706 	ld	a, #>(_playfield)
      0015A4 DD 8E F1         [19] 4707 	adc	a, -15 (ix)
      0015A7 57               [ 4] 4708 	ld	d, a
      0015A8 7B               [ 4] 4709 	ld	a, e
      0015A9 DD 86 FE         [19] 4710 	add	a, -2 (ix)
      0015AC 5F               [ 4] 4711 	ld	e, a
      0015AD 30 01            [12] 4712 	jr	NC, 00618$
      0015AF 14               [ 4] 4713 	inc	d
      0015B0                       4714 00618$:
      0015B0 DD 6E F2         [19] 4715 	ld	l, -14 (ix)
      0015B3 DD 66 F3         [19] 4716 	ld	h, -13 (ix)
      0015B6 7E               [ 7] 4717 	ld	a, (hl)
      0015B7 CB FF            [ 8] 4718 	set	7, a
      0015B9 12               [ 7] 4719 	ld	(de), a
      0015BA                       4720 00116$:
                                   4721 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      0015BA DD 6E F4         [19] 4722 	ld	l, -12 (ix)
      0015BD 26 00            [ 7] 4723 	ld	h, #0x00
      0015BF 09               [11] 4724 	add	hl, bc
      0015C0 4E               [ 7] 4725 	ld	c, (hl)
      0015C1 79               [ 4] 4726 	ld	a, c
      0015C2 B7               [ 4] 4727 	or	a, a
      0015C3 28 6A            [12] 4728 	jr	Z, 00206$
                                   4729 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      0015C5 DD 7E FA         [19] 4730 	ld	a, -6 (ix)
      0015C8 DD 86 FE         [19] 4731 	add	a, -2 (ix)
      0015CB 5F               [ 4] 4732 	ld	e, a
      0015CC DD 7E FB         [19] 4733 	ld	a, -5 (ix)
      0015CF CE 00            [ 7] 4734 	adc	a, #0x00
      0015D1 57               [ 4] 4735 	ld	d, a
      0015D2 DD 6E FC         [19] 4736 	ld	l, -4 (ix)
      0015D5 DD 66 FD         [19] 4737 	ld	h, -3 (ix)
      0015D8 46               [ 7] 4738 	ld	b, (hl)
      0015D9 1A               [ 7] 4739 	ld	a, (de)
      0015DA B8               [ 4] 4740 	cp	a, b
      0015DB 20 52            [12] 4741 	jr	NZ, 00206$
                                   4742 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0015DD 91               [ 4] 4743 	sub	a, c
      0015DE 20 4F            [12] 4744 	jr	NZ, 00206$
                                   4745 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      0015E0 DD 36 EF 01      [19] 4746 	ld	-17 (ix), #0x01
                                   4747 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0015E4 3Er00            [ 7] 4748 	ld	a, #<(_playfield)
      0015E6 DD 86 F0         [19] 4749 	add	a, -16 (ix)
      0015E9 47               [ 4] 4750 	ld	b, a
      0015EA 3Es00            [ 7] 4751 	ld	a, #>(_playfield)
      0015EC DD 8E F1         [19] 4752 	adc	a, -15 (ix)
      0015EF 67               [ 4] 4753 	ld	h, a
      0015F0 78               [ 4] 4754 	ld	a, b
      0015F1 DD 86 F4         [19] 4755 	add	a, -12 (ix)
      0015F4 6F               [ 4] 4756 	ld	l, a
      0015F5 30 01            [12] 4757 	jr	NC, 00623$
      0015F7 24               [ 4] 4758 	inc	h
      0015F8                       4759 00623$:
      0015F8 CB F9            [ 8] 4760 	set	7, c
      0015FA 71               [ 7] 4761 	ld	(hl), c
                                   4762 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0015FB 3Er00            [ 7] 4763 	ld	a, #<(_playfield)
      0015FD DD 86 F8         [19] 4764 	add	a, -8 (ix)
      001600 4F               [ 4] 4765 	ld	c, a
      001601 3Es00            [ 7] 4766 	ld	a, #>(_playfield)
      001603 DD 8E F9         [19] 4767 	adc	a, -7 (ix)
      001606 47               [ 4] 4768 	ld	b, a
      001607 79               [ 4] 4769 	ld	a, c
      001608 DD 86 F5         [19] 4770 	add	a, -11 (ix)
      00160B 4F               [ 4] 4771 	ld	c, a
      00160C 30 01            [12] 4772 	jr	NC, 00624$
      00160E 04               [ 4] 4773 	inc	b
      00160F                       4774 00624$:
      00160F DD 6E FC         [19] 4775 	ld	l, -4 (ix)
      001612 DD 66 FD         [19] 4776 	ld	h, -3 (ix)
      001615 7E               [ 7] 4777 	ld	a, (hl)
      001616 CB FF            [ 8] 4778 	set	7, a
      001618 02               [ 7] 4779 	ld	(bc), a
                                   4780 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001619 3Er00            [ 7] 4781 	ld	a, #<(_playfield)
      00161B DD 86 F6         [19] 4782 	add	a, -10 (ix)
      00161E 4F               [ 4] 4783 	ld	c, a
      00161F 3Es00            [ 7] 4784 	ld	a, #>(_playfield)
      001621 DD 8E F7         [19] 4785 	adc	a, -9 (ix)
      001624 47               [ 4] 4786 	ld	b, a
      001625 DD 6E FE         [19] 4787 	ld	l, -2 (ix)
      001628 26 00            [ 7] 4788 	ld	h, #0x00
      00162A 09               [11] 4789 	add	hl, bc
      00162B 1A               [ 7] 4790 	ld	a, (de)
      00162C CB FF            [ 8] 4791 	set	7, a
      00162E 77               [ 7] 4792 	ld	(hl), a
      00162F                       4793 00206$:
                                   4794 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00162F DD 34 FF         [23] 4795 	inc	-1 (ix)
      001632 C3rA4r14         [10] 4796 	jp	00205$
      001635                       4797 00209$:
                                   4798 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001635 DD 34 FE         [23] 4799 	inc	-2 (ix)
      001638 C3r98r14         [10] 4800 	jp	00208$
      00163B                       4801 00124$:
                                   4802 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      00163B DD 7E EF         [19] 4803 	ld	a, -17 (ix)
      00163E B7               [ 4] 4804 	or	a, a
      00163F CAr60r1A         [10] 4805 	jp	Z, 00231$
                                   4806 ;src\/CheckPlayfield.h:107: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001642 DD 36 F0 05      [19] 4807 	ld	-16 (ix), #0x05
      001646 DD 36 F1 00      [19] 4808 	ld	-15 (ix), #0
                                   4809 ;src\/CheckPlayfield.h:108: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      00164A DD 36 F2 0B      [19] 4810 	ld	-14 (ix), #0x0b
      00164E DD 36 F3 00      [19] 4811 	ld	-13 (ix), #0
                                   4812 ;src\/CheckPlayfield.h:110: HideArrow();
      001652 CDrC9r0C         [17] 4813 	call	_HideArrow
                                   4814 ;src\/CheckPlayfield.h:112: SoundFx_2();
      001655 CDr63r11         [17] 4815 	call	_SoundFx_2
                                   4816 ;src\/CheckPlayfield.h:115: numberPiecesRemoved = 0;
      001658 DD 36 FE 00      [19] 4817 	ld	-2 (ix), #0
                                   4818 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00165C DD 36 FF 00      [19] 4819 	ld	-1 (ix), #0
      001660                       4820 00214$:
      001660 DD 7E FF         [19] 4821 	ld	a, -1 (ix)
      001663 D6 0C            [ 7] 4822 	sub	a, #0x0c
      001665 30 5E            [12] 4823 	jr	NC, 00136$
                                   4824 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001667 DD 46 FE         [19] 4825 	ld	b, -2 (ix)
      00166A 1E 00            [ 7] 4826 	ld	e, #0x00
      00166C                       4827 00211$:
      00166C 7B               [ 4] 4828 	ld	a, e
      00166D D6 06            [ 7] 4829 	sub	a, #0x06
      00166F 30 4C            [12] 4830 	jr	NC, 00312$
                                   4831 ;src\/CheckPlayfield.h:118: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001671 D5               [11] 4832 	push	de
      001672 16 00            [ 7] 4833 	ld	d, #0x00
      001674 6B               [ 4] 4834 	ld	l, e
      001675 62               [ 4] 4835 	ld	h, d
      001676 29               [11] 4836 	add	hl, hl
      001677 19               [11] 4837 	add	hl, de
      001678 29               [11] 4838 	add	hl, hl
      001679 29               [11] 4839 	add	hl, hl
      00167A 11r00r00         [10] 4840 	ld	de, #_playfield
      00167D 19               [11] 4841 	add	hl, de
      00167E D1               [10] 4842 	pop	de
      00167F 7D               [ 4] 4843 	ld	a, l
      001680 DD 86 FF         [19] 4844 	add	a, -1 (ix)
      001683 6F               [ 4] 4845 	ld	l, a
      001684 30 01            [12] 4846 	jr	NC, 00625$
      001686 24               [ 4] 4847 	inc	h
      001687                       4848 00625$:
      001687 7E               [ 7] 4849 	ld	a, (hl)
      001688 07               [ 4] 4850 	rlca
      001689 30 2F            [12] 4851 	jr	NC, 00212$
                                   4852 ;src\/CheckPlayfield.h:119: numberPiecesRemoved++;
      00168B 04               [ 4] 4853 	inc	b
                                   4854 ;src\/CheckPlayfield.h:121: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      00168C 7B               [ 4] 4855 	ld	a, e
      00168D DD 96 F0         [19] 4856 	sub	a, -16 (ix)
      001690 30 03            [12] 4857 	jr	NC, 00126$
      001692 DD 73 F0         [19] 4858 	ld	-16 (ix), e
      001695                       4859 00126$:
                                   4860 ;src\/CheckPlayfield.h:122: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001695 DD 7E F1         [19] 4861 	ld	a, -15 (ix)
      001698 93               [ 4] 4862 	sub	a, e
      001699 30 03            [12] 4863 	jr	NC, 00128$
      00169B DD 73 F1         [19] 4864 	ld	-15 (ix), e
      00169E                       4865 00128$:
                                   4866 ;src\/CheckPlayfield.h:123: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      00169E DD 7E FF         [19] 4867 	ld	a, -1 (ix)
      0016A1 DD 96 F2         [19] 4868 	sub	a, -14 (ix)
      0016A4 30 06            [12] 4869 	jr	NC, 00130$
      0016A6 DD 7E FF         [19] 4870 	ld	a, -1 (ix)
      0016A9 DD 77 F2         [19] 4871 	ld	-14 (ix), a
      0016AC                       4872 00130$:
                                   4873 ;src\/CheckPlayfield.h:124: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      0016AC DD 7E F3         [19] 4874 	ld	a, -13 (ix)
      0016AF DD 96 FF         [19] 4875 	sub	a, -1 (ix)
      0016B2 30 06            [12] 4876 	jr	NC, 00212$
      0016B4 DD 7E FF         [19] 4877 	ld	a, -1 (ix)
      0016B7 DD 77 F3         [19] 4878 	ld	-13 (ix), a
      0016BA                       4879 00212$:
                                   4880 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016BA 1C               [ 4] 4881 	inc	e
      0016BB 18 AF            [12] 4882 	jr	00211$
      0016BD                       4883 00312$:
      0016BD DD 70 FE         [19] 4884 	ld	-2 (ix), b
                                   4885 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016C0 DD 34 FF         [23] 4886 	inc	-1 (ix)
      0016C3 18 9B            [12] 4887 	jr	00214$
      0016C5                       4888 00136$:
                                   4889 ;src\/CheckPlayfield.h:130: DrawNumber(numberPiecesRemoved, 0, 0);//test
      0016C5 DD 4E FE         [19] 4890 	ld	c, -2 (ix)
      0016C8 06 00            [ 7] 4891 	ld	b, #0x00
      0016CA AF               [ 4] 4892 	xor	a, a
      0016CB F5               [11] 4893 	push	af
      0016CC 33               [ 6] 4894 	inc	sp
      0016CD AF               [ 4] 4895 	xor	a, a
      0016CE F5               [11] 4896 	push	af
      0016CF 33               [ 6] 4897 	inc	sp
      0016D0 C5               [11] 4898 	push	bc
      0016D1 CDrDAr07         [17] 4899 	call	_DrawNumber
      0016D4 F1               [10] 4900 	pop	af
      0016D5 F1               [10] 4901 	pop	af
                                   4902 ;src\/CheckPlayfield.h:131: DrawNumber(iteration, 0, 1);//test
      0016D6 DD 4E 04         [19] 4903 	ld	c, 4 (ix)
      0016D9 06 00            [ 7] 4904 	ld	b, #0x00
      0016DB 3E 01            [ 7] 4905 	ld	a, #0x01
      0016DD F5               [11] 4906 	push	af
      0016DE 33               [ 6] 4907 	inc	sp
      0016DF AF               [ 4] 4908 	xor	a, a
      0016E0 F5               [11] 4909 	push	af
      0016E1 33               [ 6] 4910 	inc	sp
      0016E2 C5               [11] 4911 	push	bc
      0016E3 CDrDAr07         [17] 4912 	call	_DrawNumber
      0016E6 F1               [10] 4913 	pop	af
      0016E7 F1               [10] 4914 	pop	af
                                   4915 ;src\/CheckPlayfield.h:132: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      0016E8 DD 4E F0         [19] 4916 	ld	c, -16 (ix)
      0016EB 06 00            [ 7] 4917 	ld	b, #0x00
      0016ED 3E 0D            [ 7] 4918 	ld	a, #0x0d
      0016EF F5               [11] 4919 	push	af
      0016F0 33               [ 6] 4920 	inc	sp
      0016F1 AF               [ 4] 4921 	xor	a, a
      0016F2 F5               [11] 4922 	push	af
      0016F3 33               [ 6] 4923 	inc	sp
      0016F4 C5               [11] 4924 	push	bc
      0016F5 CDrDAr07         [17] 4925 	call	_DrawNumber
      0016F8 F1               [10] 4926 	pop	af
      0016F9 F1               [10] 4927 	pop	af
                                   4928 ;src\/CheckPlayfield.h:133: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      0016FA DD 4E F1         [19] 4929 	ld	c, -15 (ix)
      0016FD 06 00            [ 7] 4930 	ld	b, #0x00
      0016FF 3E 0E            [ 7] 4931 	ld	a, #0x0e
      001701 F5               [11] 4932 	push	af
      001702 33               [ 6] 4933 	inc	sp
      001703 AF               [ 4] 4934 	xor	a, a
      001704 F5               [11] 4935 	push	af
      001705 33               [ 6] 4936 	inc	sp
      001706 C5               [11] 4937 	push	bc
      001707 CDrDAr07         [17] 4938 	call	_DrawNumber
      00170A F1               [10] 4939 	pop	af
      00170B F1               [10] 4940 	pop	af
                                   4941 ;src\/CheckPlayfield.h:134: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      00170C DD 4E F2         [19] 4942 	ld	c, -14 (ix)
      00170F 06 00            [ 7] 4943 	ld	b, #0x00
      001711 3E 10            [ 7] 4944 	ld	a, #0x10
      001713 F5               [11] 4945 	push	af
      001714 33               [ 6] 4946 	inc	sp
      001715 AF               [ 4] 4947 	xor	a, a
      001716 F5               [11] 4948 	push	af
      001717 33               [ 6] 4949 	inc	sp
      001718 C5               [11] 4950 	push	bc
      001719 CDrDAr07         [17] 4951 	call	_DrawNumber
      00171C F1               [10] 4952 	pop	af
      00171D F1               [10] 4953 	pop	af
                                   4954 ;src\/CheckPlayfield.h:135: DrawNumber(upmostPieceRemoved, 0, 17);//test
      00171E DD 4E F3         [19] 4955 	ld	c, -13 (ix)
      001721 06 00            [ 7] 4956 	ld	b, #0x00
      001723 3E 11            [ 7] 4957 	ld	a, #0x11
      001725 F5               [11] 4958 	push	af
      001726 33               [ 6] 4959 	inc	sp
      001727 AF               [ 4] 4960 	xor	a, a
      001728 F5               [11] 4961 	push	af
      001729 33               [ 6] 4962 	inc	sp
      00172A C5               [11] 4963 	push	bc
      00172B CDrDAr07         [17] 4964 	call	_DrawNumber
      00172E F1               [10] 4965 	pop	af
      00172F F1               [10] 4966 	pop	af
                                   4967 ;src\/CheckPlayfield.h:138: while(counter-- > 0) {
      001730 DD 7E FE         [19] 4968 	ld	a, -2 (ix)
      001733 D6 03            [ 7] 4969 	sub	a, #0x03
      001735 3E 01            [ 7] 4970 	ld	a, #0x01
      001737 28 01            [12] 4971 	jr	Z, 00628$
      001739 AF               [ 4] 4972 	xor	a, a
      00173A                       4973 00628$:
      00173A DD 77 F4         [19] 4974 	ld	-12 (ix), a
      00173D DD 36 FD 48      [19] 4975 	ld	-3 (ix), #0x48
      001741                       4976 00161$:
      001741 DD 4E FD         [19] 4977 	ld	c, -3 (ix)
      001744 DD 35 FD         [23] 4978 	dec	-3 (ix)
      001747 79               [ 4] 4979 	ld	a, c
      001748 B7               [ 4] 4980 	or	a, a
      001749 CArFAr18         [10] 4981 	jp	Z, 00163$
                                   4982 ;src\/CheckPlayfield.h:139: word lastJiffy = JIFFY;
      00174C ED 4B 9E FC      [20] 4983 	ld	bc, (_JIFFY)
                                   4984 ;src\/CheckPlayfield.h:140: while (lastJiffy == JIFFY) {
      001750                       4985 00137$:
      001750 2A 9E FC         [16] 4986 	ld	hl, (_JIFFY)
      001753 BF               [ 4] 4987 	cp	a, a
      001754 ED 42            [15] 4988 	sbc	hl, bc
      001756 28 F8            [12] 4989 	jr	Z, 00137$
                                   4990 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001758 3E 0C            [ 7] 4991 	ld	a, #0x0c
      00175A DD 96 FD         [19] 4992 	sub	a, -3 (ix)
      00175D 3E 00            [ 7] 4993 	ld	a, #0x00
      00175F 17               [ 4] 4994 	rla
      001760 DD 77 F5         [19] 4995 	ld	-11 (ix), a
      001763 3E 09            [ 7] 4996 	ld	a, #0x09
      001765 DD 96 FD         [19] 4997 	sub	a, -3 (ix)
      001768 3E 00            [ 7] 4998 	ld	a, #0x00
      00176A 17               [ 4] 4999 	rla
      00176B DD 77 F6         [19] 5000 	ld	-10 (ix), a
      00176E 3E 06            [ 7] 5001 	ld	a, #0x06
      001770 DD 96 FD         [19] 5002 	sub	a, -3 (ix)
      001773 3E 00            [ 7] 5003 	ld	a, #0x00
      001775 17               [ 4] 5004 	rla
      001776 DD 77 F7         [19] 5005 	ld	-9 (ix), a
      001779 3E 03            [ 7] 5006 	ld	a, #0x03
      00177B DD 96 FD         [19] 5007 	sub	a, -3 (ix)
      00177E 3E 00            [ 7] 5008 	ld	a, #0x00
      001780 17               [ 4] 5009 	rla
      001781 DD 77 F8         [19] 5010 	ld	-8 (ix), a
      001784 DD 36 FE 00      [19] 5011 	ld	-2 (ix), #0
      001788                       5012 00220$:
      001788 DD 7E FE         [19] 5013 	ld	a, -2 (ix)
      00178B D6 0C            [ 7] 5014 	sub	a, #0x0c
      00178D 30 B2            [12] 5015 	jr	NC, 00161$
                                   5016 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00178F DD 36 FF 00      [19] 5017 	ld	-1 (ix), #0
      001793                       5018 00217$:
      001793 DD 7E FF         [19] 5019 	ld	a, -1 (ix)
      001796 D6 06            [ 7] 5020 	sub	a, #0x06
      001798 D2rF4r18         [10] 5021 	jp	NC, 00221$
                                   5022 ;src\/CheckPlayfield.h:148: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00179B DD 4E FF         [19] 5023 	ld	c, -1 (ix)
      00179E 06 00            [ 7] 5024 	ld	b, #0x00
      0017A0 69               [ 4] 5025 	ld	l, c
      0017A1 60               [ 4] 5026 	ld	h, b
      0017A2 29               [11] 5027 	add	hl, hl
      0017A3 09               [11] 5028 	add	hl, bc
      0017A4 29               [11] 5029 	add	hl, hl
      0017A5 29               [11] 5030 	add	hl, hl
      0017A6 11r00r00         [10] 5031 	ld	de, #_playfield
      0017A9 19               [11] 5032 	add	hl, de
      0017AA DD 5E FE         [19] 5033 	ld	e, -2 (ix)
      0017AD 16 00            [ 7] 5034 	ld	d, #0x00
      0017AF 19               [11] 5035 	add	hl, de
      0017B0 7E               [ 7] 5036 	ld	a, (hl)
      0017B1 07               [ 4] 5037 	rlca
      0017B2 D2rEEr18         [10] 5038 	jp	NC,00218$
                                   5039 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved == 3) {
      0017B5 DD 7E F4         [19] 5040 	ld	a, -12 (ix)
      0017B8 B7               [ 4] 5041 	or	a, a
      0017B9 CAr4Fr18         [10] 5042 	jp	Z, 00141$
                                   5043 ;src\/CheckPlayfield.h:154: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      0017BC DD 6E F1         [19] 5044 	ld	l, -15 (ix)
      0017BF 26 00            [ 7] 5045 	ld	h, #0x00
      0017C1 29               [11] 5046 	add	hl, hl
      0017C2 29               [11] 5047 	add	hl, hl
      0017C3 29               [11] 5048 	add	hl, hl
      0017C4 29               [11] 5049 	add	hl, hl
      0017C5 7D               [ 4] 5050 	ld	a, l
      0017C6 4C               [ 4] 5051 	ld	c, h
      0017C7 DD 6E F0         [19] 5052 	ld	l, -16 (ix)
      0017CA 26 00            [ 7] 5053 	ld	h, #0x00
      0017CC 29               [11] 5054 	add	hl, hl
      0017CD 29               [11] 5055 	add	hl, hl
      0017CE 29               [11] 5056 	add	hl, hl
      0017CF 29               [11] 5057 	add	hl, hl
      0017D0 95               [ 4] 5058 	sub	a, l
      0017D1 DD 77 F9         [19] 5059 	ld	-7 (ix), a
      0017D4 79               [ 4] 5060 	ld	a, c
      0017D5 9C               [ 4] 5061 	sbc	a, h
      0017D6 DD 77 FA         [19] 5062 	ld	-6 (ix), a
      0017D9 DD 7E F9         [19] 5063 	ld	a, -7 (ix)
      0017DC DD 77 FB         [19] 5064 	ld	-5 (ix), a
      0017DF DD 7E FA         [19] 5065 	ld	a, -6 (ix)
      0017E2 DD 77 FC         [19] 5066 	ld	-4 (ix), a
      0017E5 DD CB FA 7E      [20] 5067 	bit	7, -6 (ix)
      0017E9 28 10            [12] 5068 	jr	Z, 00233$
      0017EB DD 7E F9         [19] 5069 	ld	a, -7 (ix)
      0017EE C6 01            [ 7] 5070 	add	a, #0x01
      0017F0 DD 77 FB         [19] 5071 	ld	-5 (ix), a
      0017F3 DD 7E FA         [19] 5072 	ld	a, -6 (ix)
      0017F6 CE 00            [ 7] 5073 	adc	a, #0x00
      0017F8 DD 77 FC         [19] 5074 	ld	-4 (ix), a
      0017FB                       5075 00233$:
      0017FB DD 4E FB         [19] 5076 	ld	c, -5 (ix)
      0017FE DD 46 FC         [19] 5077 	ld	b, -4 (ix)
      001801 CB 28            [ 8] 5078 	sra	b
      001803 CB 19            [ 8] 5079 	rr	c
      001805 79               [ 4] 5080 	ld	a, c
      001806 C6 50            [ 7] 5081 	add	a, #0x50
      001808 DD 6E F0         [19] 5082 	ld	l, -16 (ix)
      00180B 29               [11] 5083 	add	hl, hl
      00180C 29               [11] 5084 	add	hl, hl
      00180D 29               [11] 5085 	add	hl, hl
      00180E 29               [11] 5086 	add	hl, hl
      00180F 85               [ 4] 5087 	add	a, l
      001810 5F               [ 4] 5088 	ld	e, a
                                   5089 ;src\/CheckPlayfield.h:155: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16) - (72 - counter);
      001811 DD 6E F2         [19] 5090 	ld	l, -14 (ix)
      001814 26 00            [ 7] 5091 	ld	h, #0x00
      001816 29               [11] 5092 	add	hl, hl
      001817 29               [11] 5093 	add	hl, hl
      001818 29               [11] 5094 	add	hl, hl
      001819 29               [11] 5095 	add	hl, hl
      00181A 4D               [ 4] 5096 	ld	c, l
      00181B 44               [ 4] 5097 	ld	b, h
      00181C DD 6E F3         [19] 5098 	ld	l, -13 (ix)
      00181F 26 00            [ 7] 5099 	ld	h, #0x00
      001821 29               [11] 5100 	add	hl, hl
      001822 29               [11] 5101 	add	hl, hl
      001823 29               [11] 5102 	add	hl, hl
      001824 29               [11] 5103 	add	hl, hl
      001825 79               [ 4] 5104 	ld	a, c
      001826 95               [ 4] 5105 	sub	a, l
      001827 6F               [ 4] 5106 	ld	l, a
      001828 78               [ 4] 5107 	ld	a, b
      001829 9C               [ 4] 5108 	sbc	a, h
      00182A 67               [ 4] 5109 	ld	h, a
      00182B 4D               [ 4] 5110 	ld	c, l
      00182C 44               [ 4] 5111 	ld	b, h
      00182D CB 7C            [ 8] 5112 	bit	7, h
      00182F 28 03            [12] 5113 	jr	Z, 00234$
      001831 4D               [ 4] 5114 	ld	c, l
      001832 44               [ 4] 5115 	ld	b, h
      001833 03               [ 6] 5116 	inc	bc
      001834                       5117 00234$:
      001834 CB 28            [ 8] 5118 	sra	b
      001836 CB 19            [ 8] 5119 	rr	c
      001838 DD 6E F3         [19] 5120 	ld	l, -13 (ix)
      00183B 29               [11] 5121 	add	hl, hl
      00183C 29               [11] 5122 	add	hl, hl
      00183D 29               [11] 5123 	add	hl, hl
      00183E 29               [11] 5124 	add	hl, hl
      00183F 09               [11] 5125 	add	hl, bc
      001840 DD 4E FD         [19] 5126 	ld	c, -3 (ix)
      001843 3E 48            [ 7] 5127 	ld	a, #0x48
      001845 91               [ 4] 5128 	sub	a, c
      001846 4F               [ 4] 5129 	ld	c, a
      001847 7D               [ 4] 5130 	ld	a, l
      001848 91               [ 4] 5131 	sub	a, c
                                   5132 ;src\/CheckPlayfield.h:156: DrawHitSprite(x, y);
      001849 57               [ 4] 5133 	ld	d,a
      00184A D5               [11] 5134 	push	de
      00184B CDrD7r0C         [17] 5135 	call	_DrawHitSprite
      00184E F1               [10] 5136 	pop	af
      00184F                       5137 00141$:
                                   5138 ;src\/CheckPlayfield.h:160: if(counter > 12) {
      00184F DD 7E F5         [19] 5139 	ld	a, -11 (ix)
      001852 B7               [ 4] 5140 	or	a, a
      001853 28 41            [12] 5141 	jr	Z, 00155$
                                   5142 ;src\/CheckPlayfield.h:161: if(JIFFY & 0b00000011) {
      001855 2A 9E FC         [16] 5143 	ld	hl, (_JIFFY)
      001858 7D               [ 4] 5144 	ld	a, l
      001859 E6 03            [ 7] 5145 	and	a, #0x03
      00185B 28 28            [12] 5146 	jr	Z, 00143$
                                   5147 ;src\/CheckPlayfield.h:162: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      00185D DD 4E FF         [19] 5148 	ld	c, -1 (ix)
      001860 06 00            [ 7] 5149 	ld	b, #0x00
      001862 69               [ 4] 5150 	ld	l, c
      001863 60               [ 4] 5151 	ld	h, b
      001864 29               [11] 5152 	add	hl, hl
      001865 09               [11] 5153 	add	hl, bc
      001866 29               [11] 5154 	add	hl, hl
      001867 29               [11] 5155 	add	hl, hl
      001868 11r00r00         [10] 5156 	ld	de, #_playfield
      00186B 19               [11] 5157 	add	hl, de
      00186C DD 5E FE         [19] 5158 	ld	e, -2 (ix)
      00186F 16 00            [ 7] 5159 	ld	d, #0x00
      001871 19               [11] 5160 	add	hl, de
      001872 7E               [ 7] 5161 	ld	a, (hl)
      001873 CB BF            [ 8] 5162 	res	7, a
      001875 F5               [11] 5163 	push	af
      001876 33               [ 6] 5164 	inc	sp
      001877 DD 66 FE         [19] 5165 	ld	h, -2 (ix)
      00187A DD 6E FF         [19] 5166 	ld	l, -1 (ix)
      00187D E5               [11] 5167 	push	hl
      00187E CDr24r10         [17] 5168 	call	_DrawBlock
      001881 F1               [10] 5169 	pop	af
      001882 33               [ 6] 5170 	inc	sp
      001883 18 69            [12] 5171 	jr	00218$
      001885                       5172 00143$:
                                   5173 ;src\/CheckPlayfield.h:165: DrawBlock(col, line, EMPTY);
      001885 AF               [ 4] 5174 	xor	a, a
      001886 F5               [11] 5175 	push	af
      001887 33               [ 6] 5176 	inc	sp
      001888 DD 66 FE         [19] 5177 	ld	h, -2 (ix)
      00188B DD 6E FF         [19] 5178 	ld	l, -1 (ix)
      00188E E5               [11] 5179 	push	hl
      00188F CDr24r10         [17] 5180 	call	_DrawBlock
      001892 F1               [10] 5181 	pop	af
      001893 33               [ 6] 5182 	inc	sp
      001894 18 58            [12] 5183 	jr	00218$
      001896                       5184 00155$:
                                   5185 ;src\/CheckPlayfield.h:170: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001896 DD 7E F6         [19] 5186 	ld	a, -10 (ix)
      001899 B7               [ 4] 5187 	or	a, a
      00189A 28 12            [12] 5188 	jr	Z, 00152$
      00189C 26 2A            [ 7] 5189 	ld	h, #0x2a
      00189E DD 6E FE         [19] 5190 	ld	l, -2 (ix)
      0018A1 E5               [11] 5191 	push	hl
      0018A2 DD 7E FF         [19] 5192 	ld	a, -1 (ix)
      0018A5 F5               [11] 5193 	push	af
      0018A6 33               [ 6] 5194 	inc	sp
      0018A7 CDr91r10         [17] 5195 	call	_DrawBlock_SameTile
      0018AA F1               [10] 5196 	pop	af
      0018AB 33               [ 6] 5197 	inc	sp
      0018AC 18 40            [12] 5198 	jr	00218$
      0018AE                       5199 00152$:
                                   5200 ;src\/CheckPlayfield.h:171: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      0018AE DD 7E F7         [19] 5201 	ld	a, -9 (ix)
      0018B1 B7               [ 4] 5202 	or	a, a
      0018B2 28 12            [12] 5203 	jr	Z, 00149$
      0018B4 26 2B            [ 7] 5204 	ld	h, #0x2b
      0018B6 DD 6E FE         [19] 5205 	ld	l, -2 (ix)
      0018B9 E5               [11] 5206 	push	hl
      0018BA DD 7E FF         [19] 5207 	ld	a, -1 (ix)
      0018BD F5               [11] 5208 	push	af
      0018BE 33               [ 6] 5209 	inc	sp
      0018BF CDr91r10         [17] 5210 	call	_DrawBlock_SameTile
      0018C2 F1               [10] 5211 	pop	af
      0018C3 33               [ 6] 5212 	inc	sp
      0018C4 18 28            [12] 5213 	jr	00218$
      0018C6                       5214 00149$:
                                   5215 ;src\/CheckPlayfield.h:172: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      0018C6 DD 7E F8         [19] 5216 	ld	a, -8 (ix)
      0018C9 B7               [ 4] 5217 	or	a, a
      0018CA 28 12            [12] 5218 	jr	Z, 00146$
      0018CC 26 2C            [ 7] 5219 	ld	h, #0x2c
      0018CE DD 6E FE         [19] 5220 	ld	l, -2 (ix)
      0018D1 E5               [11] 5221 	push	hl
      0018D2 DD 7E FF         [19] 5222 	ld	a, -1 (ix)
      0018D5 F5               [11] 5223 	push	af
      0018D6 33               [ 6] 5224 	inc	sp
      0018D7 CDr91r10         [17] 5225 	call	_DrawBlock_SameTile
      0018DA F1               [10] 5226 	pop	af
      0018DB 33               [ 6] 5227 	inc	sp
      0018DC 18 10            [12] 5228 	jr	00218$
      0018DE                       5229 00146$:
                                   5230 ;src\/CheckPlayfield.h:173: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      0018DE 26 2D            [ 7] 5231 	ld	h, #0x2d
      0018E0 DD 6E FE         [19] 5232 	ld	l, -2 (ix)
      0018E3 E5               [11] 5233 	push	hl
      0018E4 DD 7E FF         [19] 5234 	ld	a, -1 (ix)
      0018E7 F5               [11] 5235 	push	af
      0018E8 33               [ 6] 5236 	inc	sp
      0018E9 CDr91r10         [17] 5237 	call	_DrawBlock_SameTile
      0018EC F1               [10] 5238 	pop	af
      0018ED 33               [ 6] 5239 	inc	sp
      0018EE                       5240 00218$:
                                   5241 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018EE DD 34 FF         [23] 5242 	inc	-1 (ix)
      0018F1 C3r93r17         [10] 5243 	jp	00217$
      0018F4                       5244 00221$:
                                   5245 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018F4 DD 34 FE         [23] 5246 	inc	-2 (ix)
      0018F7 C3r88r17         [10] 5247 	jp	00220$
      0018FA                       5248 00163$:
                                   5249 ;src\/CheckPlayfield.h:181: HideHitSprite();
      0018FA CDr7Cr0D         [17] 5250 	call	_HideHitSprite
                                   5251 ;src\/CheckPlayfield.h:186: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018FD DD 36 FD 00      [19] 5252 	ld	-3 (ix), #0
      001901                       5253 00229$:
      001901 DD 7E FD         [19] 5254 	ld	a, -3 (ix)
      001904 D6 0C            [ 7] 5255 	sub	a, #0x0c
      001906 D2rE4r19         [10] 5256 	jp	NC, 00172$
                                   5257 ;src\/CheckPlayfield.h:187: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001909 DD 36 FE 00      [19] 5258 	ld	-2 (ix), #0
      00190D                       5259 00226$:
      00190D DD 7E FE         [19] 5260 	ld	a, -2 (ix)
      001910 D6 06            [ 7] 5261 	sub	a, #0x06
      001912 D2rDEr19         [10] 5262 	jp	NC, 00230$
                                   5263 ;src\/CheckPlayfield.h:189: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001915 DD 4E FE         [19] 5264 	ld	c, -2 (ix)
      001918 06 00            [ 7] 5265 	ld	b, #0x00
      00191A 69               [ 4] 5266 	ld	l, c
      00191B 60               [ 4] 5267 	ld	h, b
      00191C 29               [11] 5268 	add	hl, hl
      00191D 09               [11] 5269 	add	hl, bc
      00191E 29               [11] 5270 	add	hl, hl
      00191F 29               [11] 5271 	add	hl, hl
      001920 EB               [ 4] 5272 	ex	de, hl
      001921 21r00r00         [10] 5273 	ld	hl, #_playfield
      001924 19               [11] 5274 	add	hl, de
      001925 DD 75 FB         [19] 5275 	ld	-5 (ix), l
      001928 DD 74 FC         [19] 5276 	ld	-4 (ix), h
      00192B DD 7E FB         [19] 5277 	ld	a, -5 (ix)
      00192E DD 86 FD         [19] 5278 	add	a, -3 (ix)
      001931 4F               [ 4] 5279 	ld	c, a
      001932 DD 7E FC         [19] 5280 	ld	a, -4 (ix)
      001935 CE 00            [ 7] 5281 	adc	a, #0x00
      001937 47               [ 4] 5282 	ld	b, a
      001938 0A               [ 7] 5283 	ld	a, (bc)
      001939 07               [ 4] 5284 	rlca
      00193A D2rD8r19         [10] 5285 	jp	NC,00227$
                                   5286 ;src\/CheckPlayfield.h:191: blocksRemoved++;
      00193D 2Ar04r00         [16] 5287 	ld	hl, (_blocksRemoved)
      001940 23               [ 6] 5288 	inc	hl
      001941 22r04r00         [16] 5289 	ld	(_blocksRemoved), hl
                                   5290 ;src\/CheckPlayfield.h:194: for(byte line1 = line; line1 > 0; line1--) {
      001944 DD 7E FB         [19] 5291 	ld	a, -5 (ix)
      001947 DD 77 F7         [19] 5292 	ld	-9 (ix), a
      00194A DD 7E FC         [19] 5293 	ld	a, -4 (ix)
      00194D DD 77 F8         [19] 5294 	ld	-8 (ix), a
      001950 DD 7E FD         [19] 5295 	ld	a, -3 (ix)
      001953 DD 77 FF         [19] 5296 	ld	-1 (ix), a
      001956                       5297 00223$:
      001956 DD 7E FF         [19] 5298 	ld	a, -1 (ix)
      001959 B7               [ 4] 5299 	or	a, a
      00195A 28 7C            [12] 5300 	jr	Z, 00227$
                                   5301 ;src\/CheckPlayfield.h:195: byte linesToBeRemoved = 1;
      00195C 0E 01            [ 7] 5302 	ld	c, #0x01
                                   5303 ;src\/CheckPlayfield.h:196: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      00195E DD 7E FF         [19] 5304 	ld	a, -1 (ix)
      001961 DD 77 FC         [19] 5305 	ld	-4 (ix), a
      001964 3D               [ 4] 5306 	dec	a
      001965 DD 86 F7         [19] 5307 	add	a, -9 (ix)
      001968 5F               [ 4] 5308 	ld	e, a
      001969 3E 00            [ 7] 5309 	ld	a, #0x00
      00196B DD 8E F8         [19] 5310 	adc	a, -8 (ix)
      00196E 57               [ 4] 5311 	ld	d, a
      00196F 1A               [ 7] 5312 	ld	a, (de)
      001970 07               [ 4] 5313 	rlca
      001971 30 02            [12] 5314 	jr	NC, 00165$
      001973 0E 02            [ 7] 5315 	ld	c, #0x02
      001975                       5316 00165$:
                                   5317 ;src\/CheckPlayfield.h:197: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001975 DD 7E FC         [19] 5318 	ld	a, -4 (ix)
      001978 3D               [ 4] 5319 	dec	a
      001979 3D               [ 4] 5320 	dec	a
      00197A DD 86 F7         [19] 5321 	add	a, -9 (ix)
      00197D 5F               [ 4] 5322 	ld	e, a
      00197E 3E 00            [ 7] 5323 	ld	a, #0x00
      001980 DD 8E F8         [19] 5324 	adc	a, -8 (ix)
      001983 57               [ 4] 5325 	ld	d, a
      001984 1A               [ 7] 5326 	ld	a, (de)
      001985 07               [ 4] 5327 	rlca
      001986 30 01            [12] 5328 	jr	NC, 00167$
      001988 0C               [ 4] 5329 	inc	c
      001989                       5330 00167$:
                                   5331 ;src\/CheckPlayfield.h:201: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001989 DD 7E F7         [19] 5332 	ld	a, -9 (ix)
      00198C DD 86 FF         [19] 5333 	add	a, -1 (ix)
      00198F DD 77 F9         [19] 5334 	ld	-7 (ix), a
      001992 DD 7E F8         [19] 5335 	ld	a, -8 (ix)
      001995 CE 00            [ 7] 5336 	adc	a, #0x00
      001997 DD 77 FA         [19] 5337 	ld	-6 (ix), a
      00199A DD 6E FF         [19] 5338 	ld	l, -1 (ix)
      00199D 26 00            [ 7] 5339 	ld	h, #0x00
      00199F 59               [ 4] 5340 	ld	e, c
      0019A0 16 00            [ 7] 5341 	ld	d, #0x00
      0019A2 BF               [ 4] 5342 	cp	a, a
      0019A3 ED 52            [15] 5343 	sbc	hl, de
      0019A5 CB 7C            [ 8] 5344 	bit	7, h
      0019A7 20 18            [12] 5345 	jr	NZ, 00237$
      0019A9 DD 7E FF         [19] 5346 	ld	a, -1 (ix)
      0019AC 91               [ 4] 5347 	sub	a, c
      0019AD DD 86 F7         [19] 5348 	add	a, -9 (ix)
      0019B0 4F               [ 4] 5349 	ld	c, a
      0019B1 3E 00            [ 7] 5350 	ld	a, #0x00
      0019B3 DD 8E F8         [19] 5351 	adc	a, -8 (ix)
      0019B6 47               [ 4] 5352 	ld	b, a
      0019B7 0A               [ 7] 5353 	ld	a, (bc)
      0019B8 DD 77 FB         [19] 5354 	ld	-5 (ix), a
      0019BB DD 36 FC 00      [19] 5355 	ld	-4 (ix), #0
      0019BF 18 07            [12] 5356 	jr	00238$
      0019C1                       5357 00237$:
      0019C1 AF               [ 4] 5358 	xor	a, a
      0019C2 DD 77 FB         [19] 5359 	ld	-5 (ix), a
      0019C5 DD 77 FC         [19] 5360 	ld	-4 (ix), a
      0019C8                       5361 00238$:
      0019C8 DD 7E FB         [19] 5362 	ld	a, -5 (ix)
      0019CB DD 6E F9         [19] 5363 	ld	l, -7 (ix)
      0019CE DD 66 FA         [19] 5364 	ld	h, -6 (ix)
      0019D1 77               [ 7] 5365 	ld	(hl), a
                                   5366 ;src\/CheckPlayfield.h:194: for(byte line1 = line; line1 > 0; line1--) {
      0019D2 DD 35 FF         [23] 5367 	dec	-1 (ix)
      0019D5 C3r56r19         [10] 5368 	jp	00223$
      0019D8                       5369 00227$:
                                   5370 ;src\/CheckPlayfield.h:187: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0019D8 DD 34 FE         [23] 5371 	inc	-2 (ix)
      0019DB C3r0Dr19         [10] 5372 	jp	00226$
      0019DE                       5373 00230$:
                                   5374 ;src\/CheckPlayfield.h:186: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0019DE DD 34 FD         [23] 5375 	inc	-3 (ix)
      0019E1 C3r01r19         [10] 5376 	jp	00229$
      0019E4                       5377 00172$:
                                   5378 ;src\/CheckPlayfield.h:208: oldLevel = level;
      0019E4 3Ar06r00         [13] 5379 	ld	a, (#_level + 0)
      0019E7 4F               [ 4] 5380 	ld	c, a
                                   5381 ;src\/CheckPlayfield.h:209: if(blocksRemoved >= 90) {
      0019E8 21r04r00         [10] 5382 	ld	hl, #_blocksRemoved
      0019EB 46               [ 7] 5383 	ld	b, (hl)
      0019EC 23               [ 6] 5384 	inc	hl
      0019ED 56               [ 7] 5385 	ld	d, (hl)
      0019EE 78               [ 4] 5386 	ld	a, b
      0019EF D6 5A            [ 7] 5387 	sub	a, #0x5a
      0019F1 7A               [ 4] 5388 	ld	a, d
      0019F2 DE 00            [ 7] 5389 	sbc	a, #0x00
      0019F4 38 19            [12] 5390 	jr	C, 00180$
                                   5391 ;src\/CheckPlayfield.h:210: level = (blocksRemoved / 30) + 1;
      0019F6 C5               [11] 5392 	push	bc
      0019F7 21 1E 00         [10] 5393 	ld	hl, #0x001e
      0019FA E5               [11] 5394 	push	hl
      0019FB 58               [ 4] 5395 	ld	e, b
      0019FC D5               [11] 5396 	push	de
      0019FD CDr00r00         [17] 5397 	call	__divuint
      001A00 F1               [10] 5398 	pop	af
      001A01 F1               [10] 5399 	pop	af
      001A02 C1               [10] 5400 	pop	bc
      001A03 7D               [ 4] 5401 	ld	a, l
      001A04 3C               [ 4] 5402 	inc	a
      001A05 32r06r00         [13] 5403 	ld	(_level+0), a
                                   5404 ;src\/CheckPlayfield.h:211: speed = 15;
      001A08 21r93r00         [10] 5405 	ld	hl, #_speed
      001A0B 36 0F            [10] 5406 	ld	(hl), #0x0f
      001A0D 18 32            [12] 5407 	jr	00181$
      001A0F                       5408 00180$:
                                   5409 ;src\/CheckPlayfield.h:214: else if(blocksRemoved >= 60) { 
      001A0F 78               [ 4] 5410 	ld	a, b
      001A10 D6 3C            [ 7] 5411 	sub	a, #0x3c
      001A12 7A               [ 4] 5412 	ld	a, d
      001A13 DE 00            [ 7] 5413 	sbc	a, #0x00
      001A15 38 0C            [12] 5414 	jr	C, 00177$
                                   5415 ;src\/CheckPlayfield.h:215: level = 3;
      001A17 21r06r00         [10] 5416 	ld	hl, #_level
      001A1A 36 03            [10] 5417 	ld	(hl), #0x03
                                   5418 ;src\/CheckPlayfield.h:216: speed = 30;
      001A1C 21r93r00         [10] 5419 	ld	hl, #_speed
      001A1F 36 1E            [10] 5420 	ld	(hl), #0x1e
      001A21 18 1E            [12] 5421 	jr	00181$
      001A23                       5422 00177$:
                                   5423 ;src\/CheckPlayfield.h:218: else if(blocksRemoved >= 30) { 
      001A23 78               [ 4] 5424 	ld	a, b
      001A24 D6 1E            [ 7] 5425 	sub	a, #0x1e
      001A26 7A               [ 4] 5426 	ld	a, d
      001A27 DE 00            [ 7] 5427 	sbc	a, #0x00
      001A29 38 0C            [12] 5428 	jr	C, 00174$
                                   5429 ;src\/CheckPlayfield.h:219: level = 2;
      001A2B 21r06r00         [10] 5430 	ld	hl, #_level
      001A2E 36 02            [10] 5431 	ld	(hl), #0x02
                                   5432 ;src\/CheckPlayfield.h:220: speed = 45;
      001A30 21r93r00         [10] 5433 	ld	hl, #_speed
      001A33 36 2D            [10] 5434 	ld	(hl), #0x2d
      001A35 18 0A            [12] 5435 	jr	00181$
      001A37                       5436 00174$:
                                   5437 ;src\/CheckPlayfield.h:223: level = 1;
      001A37 21r06r00         [10] 5438 	ld	hl, #_level
      001A3A 36 01            [10] 5439 	ld	(hl), #0x01
                                   5440 ;src\/CheckPlayfield.h:224: speed = 60;
      001A3C 21r93r00         [10] 5441 	ld	hl, #_speed
      001A3F 36 3C            [10] 5442 	ld	(hl), #0x3c
      001A41                       5443 00181$:
                                   5444 ;src\/CheckPlayfield.h:227: if(oldLevel != level) {
      001A41 3Ar06r00         [13] 5445 	ld	a,(#_level + 0)
      001A44 91               [ 4] 5446 	sub	a, c
      001A45 28 05            [12] 5447 	jr	Z, 00183$
                                   5448 ;src\/CheckPlayfield.h:228: newLevel = TRUE;
      001A47 21r07r00         [10] 5449 	ld	hl, #_newLevel
      001A4A 36 01            [10] 5450 	ld	(hl), #0x01
      001A4C                       5451 00183$:
                                   5452 ;src\/CheckPlayfield.h:232: DrawPlayfield();
      001A4C CDr52r11         [17] 5453 	call	_DrawPlayfield
                                   5454 ;src\/CheckPlayfield.h:236: CheckIfPlayfieldIsValid(); // test
      001A4F CDrC3r11         [17] 5455 	call	_CheckIfPlayfieldIsValid
                                   5456 ;src\/CheckPlayfield.h:238: DrawScore();
      001A52 CDr66r0A         [17] 5457 	call	_DrawScore
                                   5458 ;src\/CheckPlayfield.h:240: iteration++;
      001A55 DD 34 04         [23] 5459 	inc	4 (ix)
                                   5460 ;src\/CheckPlayfield.h:241: CheckPlayfield(iteration);  
      001A58 DD 7E 04         [19] 5461 	ld	a, 4 (ix)
      001A5B F5               [11] 5462 	push	af
      001A5C 33               [ 6] 5463 	inc	sp
      001A5D CDr77r12         [17] 5464 	call	_CheckPlayfield
      001A60                       5465 00231$:
                                   5466 ;src\/CheckPlayfield.h:246: }
      001A60 DD F9            [10] 5467 	ld	sp, ix
      001A62 DD E1            [14] 5468 	pop	ix
      001A64 C9               [10] 5469 	ret
                                   5470 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5471 ;	---------------------------------
                                   5472 ; Function RandomIndex
                                   5473 ; ---------------------------------
      001A65                       5474 _RandomIndex::
                                   5475 ;src\/GameLogic.h:5: do {
      001A65                       5476 00101$:
                                   5477 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001A65 CDrA3r00         [17] 5478 	call	_GetRandom
      001A68 7D               [ 4] 5479 	ld	a, l
      001A69 E6 07            [ 7] 5480 	and	a, #0x07
      001A6B 6F               [ 4] 5481 	ld	l, a
                                   5482 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001A6C 3E 04            [ 7] 5483 	ld	a, #0x04
      001A6E 95               [ 4] 5484 	sub	a, l
      001A6F 38 F4            [12] 5485 	jr	C, 00101$
                                   5486 ;src\/GameLogic.h:10: return random;
                                   5487 ;src\/GameLogic.h:11: }
      001A71 C9               [10] 5488 	ret
                                   5489 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5490 ;	---------------------------------
                                   5491 ; Function RandomPiece
                                   5492 ; ---------------------------------
      001A72                       5493 _RandomPiece::
                                   5494 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001A72 01r18r00         [10] 5495 	ld	bc, #_pieces+0
      001A75 C5               [11] 5496 	push	bc
      001A76 CDr65r1A         [17] 5497 	call	_RandomIndex
      001A79 C1               [10] 5498 	pop	bc
      001A7A 26 00            [ 7] 5499 	ld	h, #0x00
      001A7C 09               [11] 5500 	add	hl, bc
      001A7D 7E               [ 7] 5501 	ld	a, (hl)
      001A7E 32r90r00         [13] 5502 	ld	(_topPiece+0), a
                                   5503 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001A81 C5               [11] 5504 	push	bc
      001A82 CDr65r1A         [17] 5505 	call	_RandomIndex
      001A85 C1               [10] 5506 	pop	bc
      001A86 26 00            [ 7] 5507 	ld	h, #0x00
      001A88 09               [11] 5508 	add	hl, bc
      001A89 7E               [ 7] 5509 	ld	a, (hl)
      001A8A 32r91r00         [13] 5510 	ld	(_midPiece+0), a
                                   5511 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001A8D C5               [11] 5512 	push	bc
      001A8E CDr65r1A         [17] 5513 	call	_RandomIndex
      001A91 C1               [10] 5514 	pop	bc
      001A92 26 00            [ 7] 5515 	ld	h, #0x00
      001A94 09               [11] 5516 	add	hl, bc
      001A95 7E               [ 7] 5517 	ld	a, (hl)
      001A96 32r92r00         [13] 5518 	ld	(_bottomPiece+0), a
                                   5519 ;src\/GameLogic.h:17: }
      001A99 C9               [10] 5520 	ret
                                   5521 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5522 ;	---------------------------------
                                   5523 ; Function UpdateAndDrawPieceStatic
                                   5524 ; ---------------------------------
      001A9A                       5525 _UpdateAndDrawPieceStatic::
                                   5526 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001A9A 01r00r00         [10] 5527 	ld	bc, #_playfield+0
      001A9D ED 5Br01r00      [20] 5528 	ld	de, (_col)
      001AA1 16 00            [ 7] 5529 	ld	d, #0x00
      001AA3 6B               [ 4] 5530 	ld	l, e
      001AA4 62               [ 4] 5531 	ld	h, d
      001AA5 29               [11] 5532 	add	hl, hl
      001AA6 19               [11] 5533 	add	hl, de
      001AA7 29               [11] 5534 	add	hl, hl
      001AA8 29               [11] 5535 	add	hl, hl
      001AA9 09               [11] 5536 	add	hl, bc
      001AAA EB               [ 4] 5537 	ex	de, hl
      001AAB 3Ar02r00         [13] 5538 	ld	a, (#_line + 0)
      001AAE 6F               [ 4] 5539 	ld	l, a
      001AAF 26 00            [ 7] 5540 	ld	h, #0x00
      001AB1 19               [11] 5541 	add	hl, de
      001AB2 3Ar90r00         [13] 5542 	ld	a,(#_topPiece + 0)
      001AB5 77               [ 7] 5543 	ld	(hl), a
                                   5544 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001AB6 ED 5Br01r00      [20] 5545 	ld	de, (_col)
      001ABA 16 00            [ 7] 5546 	ld	d, #0x00
      001ABC 6B               [ 4] 5547 	ld	l, e
      001ABD 62               [ 4] 5548 	ld	h, d
      001ABE 29               [11] 5549 	add	hl, hl
      001ABF 19               [11] 5550 	add	hl, de
      001AC0 29               [11] 5551 	add	hl, hl
      001AC1 29               [11] 5552 	add	hl, hl
      001AC2 09               [11] 5553 	add	hl, bc
      001AC3 EB               [ 4] 5554 	ex	de, hl
      001AC4 3Ar02r00         [13] 5555 	ld	a, (#_line + 0)
      001AC7 6F               [ 4] 5556 	ld	l, a
      001AC8 2C               [ 4] 5557 	inc	l
      001AC9 26 00            [ 7] 5558 	ld	h, #0x00
      001ACB 19               [11] 5559 	add	hl, de
      001ACC 3Ar91r00         [13] 5560 	ld	a,(#_midPiece + 0)
      001ACF 77               [ 7] 5561 	ld	(hl), a
                                   5562 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001AD0 ED 5Br01r00      [20] 5563 	ld	de, (_col)
      001AD4 16 00            [ 7] 5564 	ld	d, #0x00
      001AD6 6B               [ 4] 5565 	ld	l, e
      001AD7 62               [ 4] 5566 	ld	h, d
      001AD8 29               [11] 5567 	add	hl, hl
      001AD9 19               [11] 5568 	add	hl, de
      001ADA 29               [11] 5569 	add	hl, hl
      001ADB 29               [11] 5570 	add	hl, hl
      001ADC 09               [11] 5571 	add	hl, bc
      001ADD EB               [ 4] 5572 	ex	de, hl
      001ADE 3Ar02r00         [13] 5573 	ld	a, (#_line + 0)
      001AE1 6F               [ 4] 5574 	ld	l, a
      001AE2 2C               [ 4] 5575 	inc	l
      001AE3 2C               [ 4] 5576 	inc	l
      001AE4 26 00            [ 7] 5577 	ld	h, #0x00
      001AE6 19               [11] 5578 	add	hl, de
      001AE7 3Ar92r00         [13] 5579 	ld	a,(#_bottomPiece + 0)
      001AEA 77               [ 7] 5580 	ld	(hl), a
                                   5581 ;src\/GameLogic.h:25: DrawPiece(line);
      001AEB C5               [11] 5582 	push	bc
      001AEC 3Ar02r00         [13] 5583 	ld	a,(#_line + 0)
      001AEF F5               [11] 5584 	push	af
      001AF0 33               [ 6] 5585 	inc	sp
      001AF1 CDr2Fr11         [17] 5586 	call	_DrawPiece
      001AF4 33               [ 6] 5587 	inc	sp
      001AF5 C1               [10] 5588 	pop	bc
                                   5589 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001AF6 3E 02            [ 7] 5590 	ld	a, #0x02
      001AF8 32r01r00         [13] 5591 	ld	(#_col), a
                                   5592 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   5593 ;src\/GameLogic.h:31: counter = 0;
      001AFB 3E 00            [ 7] 5594 	ld	a,#0x00
      001AFD 32r02r00         [13] 5595 	ld	(#_line),a
      001B00 32r03r00         [13] 5596 	ld	(#_counter), a
                                   5597 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001B03 3Ar18r00         [13] 5598 	ld	a, (#_playfield + 24)
      001B06 B7               [ 4] 5599 	or	a, a
      001B07 20 0C            [12] 5600 	jr	NZ, 00101$
                                   5601 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001B09 3Ar19r00         [13] 5602 	ld	a, (#_playfield + 25)
      001B0C B7               [ 4] 5603 	or	a, a
      001B0D 20 06            [12] 5604 	jr	NZ, 00101$
                                   5605 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001B0F 3Ar1Ar00         [13] 5606 	ld	a, (#_playfield + 26)
      001B12 B7               [ 4] 5607 	or	a, a
      001B13 28 0B            [12] 5608 	jr	Z, 00102$
      001B15                       5609 00101$:
                                   5610 ;src\/GameLogic.h:37: gameOver = TRUE;
      001B15 FD 21r00r00      [14] 5611 	ld	iy, #_gameOver
      001B19 FD 36 00 01      [19] 5612 	ld	0 (iy), #0x01
      001B1D C3r52r11         [10] 5613 	jp	_DrawPlayfield
      001B20                       5614 00102$:
                                   5615 ;src\/GameLogic.h:40: RandomPiece();
      001B20 CDr72r1A         [17] 5616 	call	_RandomPiece
                                   5617 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001B23 3E 01            [ 7] 5618 	ld	a, #0x01
      001B25 F5               [11] 5619 	push	af
      001B26 33               [ 6] 5620 	inc	sp
      001B27 CDr77r12         [17] 5621 	call	_CheckPlayfield
      001B2A 33               [ 6] 5622 	inc	sp
                                   5623 ;src\/GameLogic.h:45: DrawPlayfield();
                                   5624 ;src\/GameLogic.h:46: }
      001B2B C3r52r11         [10] 5625 	jp	_DrawPlayfield
                                   5626 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   5627 ;	---------------------------------
                                   5628 ; Function BlinkPauseText
                                   5629 ; ---------------------------------
      001B2E                       5630 _BlinkPauseText::
                                   5631 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001B2E 2A 9E FC         [16] 5632 	ld	hl, (_JIFFY)
      001B31 CB 5D            [ 8] 5633 	bit	3, l
      001B33 28 0E            [12] 5634 	jr	Z, 00102$
                                   5635 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001B35 11 0D 0C         [10] 5636 	ld	de, #0x0c0d
      001B38 D5               [11] 5637 	push	de
      001B39 21r4Cr1B         [10] 5638 	ld	hl, #___str_4
      001B3C E5               [11] 5639 	push	hl
      001B3D CDrA8r07         [17] 5640 	call	_DrawString
      001B40 F1               [10] 5641 	pop	af
      001B41 F1               [10] 5642 	pop	af
      001B42 C9               [10] 5643 	ret
      001B43                       5644 00102$:
                                   5645 ;src\/GameLogic.h:55: DrawLine(6);
      001B43 3E 06            [ 7] 5646 	ld	a, #0x06
      001B45 F5               [11] 5647 	push	af
      001B46 33               [ 6] 5648 	inc	sp
      001B47 CDrF7r10         [17] 5649 	call	_DrawLine
      001B4A 33               [ 6] 5650 	inc	sp
                                   5651 ;src\/GameLogic.h:58: }
      001B4B C9               [10] 5652 	ret
      001B4C                       5653 ___str_4:
      001B4C 50 41 55 53 45        5654 	.ascii "PAUSE"
      001B51 00                    5655 	.db 0x00
                                   5656 ;src\/GameLogic.h:60: void Pause() {
                                   5657 ;	---------------------------------
                                   5658 ; Function Pause
                                   5659 ; ---------------------------------
      001B52                       5660 _Pause::
                                   5661 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001B52 11 0D 0C         [10] 5662 	ld	de, #0x0c0d
      001B55 D5               [11] 5663 	push	de
      001B56 21r8Cr1B         [10] 5664 	ld	hl, #___str_5
      001B59 E5               [11] 5665 	push	hl
      001B5A CDrA8r07         [17] 5666 	call	_DrawString
      001B5D F1               [10] 5667 	pop	af
      001B5E F1               [10] 5668 	pop	af
                                   5669 ;src\/GameLogic.h:65: while(TRUE) {
      001B5F                       5670 00114$:
                                   5671 ;src\/GameLogic.h:67: BlinkPauseText();
      001B5F CDr2Er1B         [17] 5672 	call	_BlinkPauseText
                                   5673 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001B62 2E 07            [ 7] 5674 	ld	l, #0x07
      001B64 CDr00r00         [17] 5675 	call	_SNSMAT
                                   5676 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001B67 CB 55            [ 8] 5677 	bit	2, l
      001B69 28 F4            [12] 5678 	jr	Z, 00114$
                                   5679 ;src\/GameLogic.h:73: while(TRUE) {
      001B6B                       5680 00109$:
                                   5681 ;src\/GameLogic.h:75: BlinkPauseText();
      001B6B CDr2Er1B         [17] 5682 	call	_BlinkPauseText
                                   5683 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001B6E 2E 07            [ 7] 5684 	ld	l, #0x07
      001B70 CDr00r00         [17] 5685 	call	_SNSMAT
                                   5686 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001B73 CB 55            [ 8] 5687 	bit	2, l
      001B75 20 F4            [12] 5688 	jr	NZ, 00109$
                                   5689 ;src\/GameLogic.h:81: while(TRUE) {
      001B77                       5690 00104$:
                                   5691 ;src\/GameLogic.h:83: BlinkPauseText();
      001B77 CDr2Er1B         [17] 5692 	call	_BlinkPauseText
                                   5693 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001B7A 2E 07            [ 7] 5694 	ld	l, #0x07
      001B7C CDr00r00         [17] 5695 	call	_SNSMAT
                                   5696 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001B7F CB 55            [ 8] 5697 	bit	2, l
      001B81 28 F4            [12] 5698 	jr	Z, 00104$
                                   5699 ;src\/GameLogic.h:89: DrawLine(6);
      001B83 3E 06            [ 7] 5700 	ld	a, #0x06
      001B85 F5               [11] 5701 	push	af
      001B86 33               [ 6] 5702 	inc	sp
      001B87 CDrF7r10         [17] 5703 	call	_DrawLine
      001B8A 33               [ 6] 5704 	inc	sp
                                   5705 ;src\/GameLogic.h:90: return;
                                   5706 ;src\/GameLogic.h:100: }
      001B8B C9               [10] 5707 	ret
      001B8C                       5708 ___str_5:
      001B8C 50 41 55 53 45        5709 	.ascii "PAUSE"
      001B91 00                    5710 	.db 0x00
                                   5711 ;src\/GameLogic.h:102: void GameLoop() {
                                   5712 ;	---------------------------------
                                   5713 ; Function GameLoop
                                   5714 ; ---------------------------------
      001B92                       5715 _GameLoop::
      001B92 DD E5            [15] 5716 	push	ix
      001B94 DD 21 00 00      [14] 5717 	ld	ix,#0
      001B98 DD 39            [15] 5718 	add	ix,sp
      001B9A 21 F3 FF         [10] 5719 	ld	hl, #-13
      001B9D 39               [11] 5720 	add	hl, sp
      001B9E F9               [ 6] 5721 	ld	sp, hl
                                   5722 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001B9F DD 36 FF 00      [19] 5723 	ld	-1 (ix), #0
      001BA3 DD 36 F3 00      [19] 5724 	ld	-13 (ix), #0
                                   5725 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001BA7 DD 36 F4 00      [19] 5726 	ld	-12 (ix), #0
      001BAB DD 36 F5 00      [19] 5727 	ld	-11 (ix), #0
                                   5728 ;src\/GameLogic.h:109: while(!gameOver) {
      001BAF                       5729 00150$:
      001BAF 3Ar00r00         [13] 5730 	ld	a,(#_gameOver + 0)
      001BB2 B7               [ 4] 5731 	or	a, a
      001BB3 C2r4Ar1F         [10] 5732 	jp	NZ, 00152$
                                   5733 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001BB6 ED 4B 9E FC      [20] 5734 	ld	bc, (_JIFFY)
                                   5735 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001BBA                       5736 00101$:
      001BBA 2A 9E FC         [16] 5737 	ld	hl, (_JIFFY)
      001BBD BF               [ 4] 5738 	cp	a, a
      001BBE ED 42            [15] 5739 	sbc	hl, bc
      001BC0 28 F8            [12] 5740 	jr	Z, 00101$
                                   5741 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001BC2 ED 4Br01r00      [20] 5742 	ld	bc, (_col)
      001BC6 06 00            [ 7] 5743 	ld	b, #0x00
      001BC8 69               [ 4] 5744 	ld	l, c
      001BC9 60               [ 4] 5745 	ld	h, b
      001BCA 29               [11] 5746 	add	hl, hl
      001BCB 09               [11] 5747 	add	hl, bc
      001BCC 29               [11] 5748 	add	hl, hl
      001BCD 29               [11] 5749 	add	hl, hl
      001BCE EB               [ 4] 5750 	ex	de, hl
      001BCF 21r00r00         [10] 5751 	ld	hl, #_playfield
      001BD2 19               [11] 5752 	add	hl, de
      001BD3 EB               [ 4] 5753 	ex	de, hl
      001BD4 FD 21r02r00      [14] 5754 	ld	iy, #_line
      001BD8 FD 6E 00         [19] 5755 	ld	l, 0 (iy)
      001BDB 26 00            [ 7] 5756 	ld	h, #0x00
      001BDD 19               [11] 5757 	add	hl, de
      001BDE 36 00            [10] 5758 	ld	(hl), #0x00
                                   5759 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001BE0 ED 4Br01r00      [20] 5760 	ld	bc, (_col)
      001BE4 06 00            [ 7] 5761 	ld	b, #0x00
      001BE6 69               [ 4] 5762 	ld	l, c
      001BE7 60               [ 4] 5763 	ld	h, b
      001BE8 29               [11] 5764 	add	hl, hl
      001BE9 09               [11] 5765 	add	hl, bc
      001BEA 29               [11] 5766 	add	hl, hl
      001BEB 29               [11] 5767 	add	hl, hl
      001BEC EB               [ 4] 5768 	ex	de, hl
      001BED 21r00r00         [10] 5769 	ld	hl, #_playfield
      001BF0 19               [11] 5770 	add	hl, de
      001BF1 EB               [ 4] 5771 	ex	de, hl
      001BF2 FD 6E 00         [19] 5772 	ld	l, 0 (iy)
      001BF5 2C               [ 4] 5773 	inc	l
      001BF6 26 00            [ 7] 5774 	ld	h, #0x00
      001BF8 19               [11] 5775 	add	hl, de
      001BF9 36 00            [10] 5776 	ld	(hl), #0x00
                                   5777 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001BFB ED 4Br01r00      [20] 5778 	ld	bc, (_col)
      001BFF 06 00            [ 7] 5779 	ld	b, #0x00
      001C01 69               [ 4] 5780 	ld	l, c
      001C02 60               [ 4] 5781 	ld	h, b
      001C03 29               [11] 5782 	add	hl, hl
      001C04 09               [11] 5783 	add	hl, bc
      001C05 29               [11] 5784 	add	hl, hl
      001C06 29               [11] 5785 	add	hl, hl
      001C07 EB               [ 4] 5786 	ex	de, hl
      001C08 21r00r00         [10] 5787 	ld	hl, #_playfield
      001C0B 19               [11] 5788 	add	hl, de
      001C0C EB               [ 4] 5789 	ex	de, hl
      001C0D FD 6E 00         [19] 5790 	ld	l, 0 (iy)
      001C10 2C               [ 4] 5791 	inc	l
      001C11 2C               [ 4] 5792 	inc	l
      001C12 26 00            [ 7] 5793 	ld	h, #0x00
      001C14 19               [11] 5794 	add	hl, de
      001C15 36 00            [10] 5795 	ld	(hl), #0x00
                                   5796 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001C17 2E 01            [ 7] 5797 	ld	l, #0x01
      001C19 CDr00r00         [17] 5798 	call	_GTSTCK
      001C1C DD 75 F6         [19] 5799 	ld	-10 (ix), l
                                   5800 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001C1F 2E 01            [ 7] 5801 	ld	l, #0x01
      001C21 CDr00r00         [17] 5802 	call	_GTTRIG
      001C24 DD 75 F7         [19] 5803 	ld	-9 (ix), l
                                   5804 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001C27 2E 03            [ 7] 5805 	ld	l, #0x03
      001C29 CDr00r00         [17] 5806 	call	_GTTRIG
      001C2C DD 75 F8         [19] 5807 	ld	-8 (ix), l
                                   5808 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001C2F DD 7E F6         [19] 5809 	ld	a, -10 (ix)
                                   5810 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001C32 B7               [ 4] 5811 	or	a,a
      001C33 20 07            [12] 5812 	jr	NZ, 00105$
      001C35 6F               [ 4] 5813 	ld	l,a
      001C36 CDr00r00         [17] 5814 	call	_GTSTCK
      001C39 DD 75 F6         [19] 5815 	ld	-10 (ix), l
      001C3C                       5816 00105$:
                                   5817 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001C3C FD 21r02r00      [14] 5818 	ld	iy, #_line
      001C40 FD 7E 00         [19] 5819 	ld	a, 0 (iy)
      001C43 DD 77 F9         [19] 5820 	ld	-7 (ix), a
                                   5821 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001C46 DD 7E FF         [19] 5822 	ld	a, -1 (ix)
      001C49 B7               [ 4] 5823 	or	a, a
      001C4A C2r33r1D         [10] 5824 	jp	NZ, 00118$
                                   5825 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001C4D FD 7E 00         [19] 5826 	ld	a, 0 (iy)
      001C50 DD 77 FF         [19] 5827 	ld	-1 (ix), a
                                   5828 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001C53 FD 21r01r00      [14] 5829 	ld	iy, #_col
      001C57 FD 7E 00         [19] 5830 	ld	a, 0 (iy)
      001C5A DD 77 FA         [19] 5831 	ld	-6 (ix), a
                                   5832 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001C5D DD 7E FF         [19] 5833 	ld	a, -1 (ix)
      001C60 C6 02            [ 7] 5834 	add	a, #0x02
      001C62 DD 77 FB         [19] 5835 	ld	-5 (ix), a
                                   5836 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001C65 DD 7E F6         [19] 5837 	ld	a, -10 (ix)
      001C68 D6 07            [ 7] 5838 	sub	a, #0x07
      001C6A 20 5F            [12] 5839 	jr	NZ, 00112$
                                   5840 ;src\/GameLogic.h:139: col > 0 && 
      001C6C FD 7E 00         [19] 5841 	ld	a, 0 (iy)
      001C6F B7               [ 4] 5842 	or	a, a
      001C70 28 59            [12] 5843 	jr	Z, 00112$
                                   5844 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001C72 DD 7E FA         [19] 5845 	ld	a, -6 (ix)
      001C75 C6 FF            [ 7] 5846 	add	a, #0xff
      001C77 DD 77 FF         [19] 5847 	ld	-1 (ix), a
      001C7A 4F               [ 4] 5848 	ld	c, a
      001C7B 07               [ 4] 5849 	rlca
      001C7C 9F               [ 4] 5850 	sbc	a, a
      001C7D 47               [ 4] 5851 	ld	b, a
      001C7E 69               [ 4] 5852 	ld	l, c
      001C7F 60               [ 4] 5853 	ld	h, b
      001C80 29               [11] 5854 	add	hl, hl
      001C81 09               [11] 5855 	add	hl, bc
      001C82 29               [11] 5856 	add	hl, hl
      001C83 29               [11] 5857 	add	hl, hl
      001C84 DD 75 FE         [19] 5858 	ld	-2 (ix), l
      001C87 DD 74 FF         [19] 5859 	ld	-1 (ix), h
      001C8A 3Er00            [ 7] 5860 	ld	a, #<(_playfield)
      001C8C DD 86 FE         [19] 5861 	add	a, -2 (ix)
      001C8F DD 77 FC         [19] 5862 	ld	-4 (ix), a
      001C92 3Es00            [ 7] 5863 	ld	a, #>(_playfield)
      001C94 DD 8E FF         [19] 5864 	adc	a, -1 (ix)
      001C97 DD 77 FD         [19] 5865 	ld	-3 (ix), a
      001C9A DD 7E FC         [19] 5866 	ld	a, -4 (ix)
      001C9D DD 86 F9         [19] 5867 	add	a, -7 (ix)
      001CA0 DD 77 FE         [19] 5868 	ld	-2 (ix), a
      001CA3 DD 7E FD         [19] 5869 	ld	a, -3 (ix)
      001CA6 CE 00            [ 7] 5870 	adc	a, #0x00
      001CA8 DD 77 FF         [19] 5871 	ld	-1 (ix), a
      001CAB DD 6E FE         [19] 5872 	ld	l, -2 (ix)
      001CAE DD 66 FF         [19] 5873 	ld	h, -1 (ix)
      001CB1 7E               [ 7] 5874 	ld	a, (hl)
      001CB2 B7               [ 4] 5875 	or	a, a
      001CB3 20 16            [12] 5876 	jr	NZ, 00112$
                                   5877 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001CB5 DD 7E FC         [19] 5878 	ld	a, -4 (ix)
      001CB8 DD 86 FB         [19] 5879 	add	a, -5 (ix)
      001CBB 4F               [ 4] 5880 	ld	c, a
      001CBC DD 7E FD         [19] 5881 	ld	a, -3 (ix)
      001CBF CE 00            [ 7] 5882 	adc	a, #0x00
      001CC1 47               [ 4] 5883 	ld	b, a
      001CC2 0A               [ 7] 5884 	ld	a, (bc)
      001CC3 B7               [ 4] 5885 	or	a, a
      001CC4 20 05            [12] 5886 	jr	NZ, 00112$
                                   5887 ;src\/GameLogic.h:142: col--;
      001CC6 FD 35 00         [23] 5888 	dec	0 (iy)
      001CC9 18 68            [12] 5889 	jr	00118$
      001CCB                       5890 00112$:
                                   5891 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001CCB DD 7E F6         [19] 5892 	ld	a, -10 (ix)
      001CCE D6 03            [ 7] 5893 	sub	a, #0x03
      001CD0 20 61            [12] 5894 	jr	NZ, 00118$
                                   5895 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001CD2 FD 21r01r00      [14] 5896 	ld	iy, #_col
      001CD6 FD 7E 00         [19] 5897 	ld	a, 0 (iy)
      001CD9 D6 05            [ 7] 5898 	sub	a, #0x05
      001CDB 30 56            [12] 5899 	jr	NC, 00118$
                                   5900 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001CDD DD 7E FA         [19] 5901 	ld	a, -6 (ix)
      001CE0 3C               [ 4] 5902 	inc	a
      001CE1 DD 77 FF         [19] 5903 	ld	-1 (ix), a
      001CE4 4F               [ 4] 5904 	ld	c, a
      001CE5 07               [ 4] 5905 	rlca
      001CE6 9F               [ 4] 5906 	sbc	a, a
      001CE7 47               [ 4] 5907 	ld	b, a
      001CE8 69               [ 4] 5908 	ld	l, c
      001CE9 60               [ 4] 5909 	ld	h, b
      001CEA 29               [11] 5910 	add	hl, hl
      001CEB 09               [11] 5911 	add	hl, bc
      001CEC 29               [11] 5912 	add	hl, hl
      001CED 29               [11] 5913 	add	hl, hl
      001CEE DD 75 FE         [19] 5914 	ld	-2 (ix), l
      001CF1 DD 74 FF         [19] 5915 	ld	-1 (ix), h
      001CF4 3Er00            [ 7] 5916 	ld	a, #<(_playfield)
      001CF6 DD 86 FE         [19] 5917 	add	a, -2 (ix)
      001CF9 DD 77 FC         [19] 5918 	ld	-4 (ix), a
      001CFC 3Es00            [ 7] 5919 	ld	a, #>(_playfield)
      001CFE DD 8E FF         [19] 5920 	adc	a, -1 (ix)
      001D01 DD 77 FD         [19] 5921 	ld	-3 (ix), a
      001D04 DD 7E FC         [19] 5922 	ld	a, -4 (ix)
      001D07 DD 86 F9         [19] 5923 	add	a, -7 (ix)
      001D0A DD 77 FE         [19] 5924 	ld	-2 (ix), a
      001D0D DD 7E FD         [19] 5925 	ld	a, -3 (ix)
      001D10 CE 00            [ 7] 5926 	adc	a, #0x00
      001D12 DD 77 FF         [19] 5927 	ld	-1 (ix), a
      001D15 DD 6E FE         [19] 5928 	ld	l, -2 (ix)
      001D18 DD 66 FF         [19] 5929 	ld	h, -1 (ix)
      001D1B 7E               [ 7] 5930 	ld	a, (hl)
      001D1C B7               [ 4] 5931 	or	a, a
      001D1D 20 14            [12] 5932 	jr	NZ, 00118$
                                   5933 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001D1F DD 7E FC         [19] 5934 	ld	a, -4 (ix)
      001D22 DD 86 FB         [19] 5935 	add	a, -5 (ix)
      001D25 4F               [ 4] 5936 	ld	c, a
      001D26 DD 7E FD         [19] 5937 	ld	a, -3 (ix)
      001D29 CE 00            [ 7] 5938 	adc	a, #0x00
      001D2B 47               [ 4] 5939 	ld	b, a
      001D2C 0A               [ 7] 5940 	ld	a, (bc)
      001D2D B7               [ 4] 5941 	or	a, a
      001D2E 20 03            [12] 5942 	jr	NZ, 00118$
                                   5943 ;src\/GameLogic.h:148: col++;
      001D30 FD 34 00         [23] 5944 	inc	0 (iy)
      001D33                       5945 00118$:
                                   5946 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001D33 DD 7E F3         [19] 5947 	ld	a, -13 (ix)
      001D36 B7               [ 4] 5948 	or	a, a
      001D37 C2rF9r1D         [10] 5949 	jp	NZ, 00132$
                                   5950 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001D3A DD 7E F6         [19] 5951 	ld	a, -10 (ix)
      001D3D 3D               [ 4] 5952 	dec	a
      001D3E 28 18            [12] 5953 	jr	Z, 00119$
      001D40 DD 7E F4         [19] 5954 	ld	a, -12 (ix)
      001D43 B7               [ 4] 5955 	or	a, a
      001D44 20 06            [12] 5956 	jr	NZ, 00124$
      001D46 DD 7E F7         [19] 5957 	ld	a, -9 (ix)
      001D49 3C               [ 4] 5958 	inc	a
      001D4A 28 0C            [12] 5959 	jr	Z, 00119$
      001D4C                       5960 00124$:
      001D4C DD 7E F5         [19] 5961 	ld	a, -11 (ix)
      001D4F B7               [ 4] 5962 	or	a, a
      001D50 20 1A            [12] 5963 	jr	NZ, 00120$
      001D52 DD 7E F8         [19] 5964 	ld	a, -8 (ix)
      001D55 3C               [ 4] 5965 	inc	a
      001D56 20 14            [12] 5966 	jr	NZ, 00120$
      001D58                       5967 00119$:
                                   5968 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001D58 3Ar92r00         [13] 5969 	ld	a, (#_bottomPiece + 0)
      001D5B 4F               [ 4] 5970 	ld	c, a
                                   5971 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001D5C 3Ar91r00         [13] 5972 	ld	a,(#_midPiece + 0)
      001D5F 32r92r00         [13] 5973 	ld	(#_bottomPiece),a
                                   5974 ;src\/GameLogic.h:160: midPiece = topPiece;
      001D62 3Ar90r00         [13] 5975 	ld	a,(#_topPiece + 0)
      001D65 32r91r00         [13] 5976 	ld	(#_midPiece),a
                                   5977 ;src\/GameLogic.h:161: topPiece = temp;
      001D68 21r90r00         [10] 5978 	ld	hl, #_topPiece
      001D6B 71               [ 7] 5979 	ld	(hl), c
      001D6C                       5980 00120$:
                                   5981 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001D6C DD 7E F6         [19] 5982 	ld	a, -10 (ix)
      001D6F D6 05            [ 7] 5983 	sub	a, #0x05
      001D71 C2rF9r1D         [10] 5984 	jp	NZ,00132$
                                   5985 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001D74 DD 7E F9         [19] 5986 	ld	a, -7 (ix)
      001D77 DD 77 FE         [19] 5987 	ld	-2 (ix), a
      001D7A DD 7E F9         [19] 5988 	ld	a, -7 (ix)
      001D7D DD 77 FF         [19] 5989 	ld	-1 (ix), a
      001D80                       5990 00154$:
      001D80 DD 7E FF         [19] 5991 	ld	a, -1 (ix)
      001D83 D6 0C            [ 7] 5992 	sub	a, #0x0c
      001D85 30 72            [12] 5993 	jr	NC, 00132$
                                   5994 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001D87 DD 7E FF         [19] 5995 	ld	a, -1 (ix)
      001D8A D6 09            [ 7] 5996 	sub	a, #0x09
      001D8C 28 4C            [12] 5997 	jr	Z, 00125$
      001D8E ED 4Br01r00      [20] 5998 	ld	bc, (_col)
      001D92 06 00            [ 7] 5999 	ld	b, #0x00
      001D94 69               [ 4] 6000 	ld	l, c
      001D95 60               [ 4] 6001 	ld	h, b
      001D96 29               [11] 6002 	add	hl, hl
      001D97 09               [11] 6003 	add	hl, bc
      001D98 29               [11] 6004 	add	hl, hl
      001D99 29               [11] 6005 	add	hl, hl
      001D9A DD 75 FC         [19] 6006 	ld	-4 (ix), l
      001D9D DD 74 FD         [19] 6007 	ld	-3 (ix), h
      001DA0 3Er00            [ 7] 6008 	ld	a, #<(_playfield)
      001DA2 DD 86 FC         [19] 6009 	add	a, -4 (ix)
      001DA5 DD 77 FA         [19] 6010 	ld	-6 (ix), a
      001DA8 3Es00            [ 7] 6011 	ld	a, #>(_playfield)
      001DAA DD 8E FD         [19] 6012 	adc	a, -3 (ix)
      001DAD DD 77 FB         [19] 6013 	ld	-5 (ix), a
      001DB0 DD 7E FF         [19] 6014 	ld	a, -1 (ix)
      001DB3 DD 77 FD         [19] 6015 	ld	-3 (ix), a
      001DB6 DD 34 FD         [23] 6016 	inc	-3 (ix)
      001DB9 DD 34 FD         [23] 6017 	inc	-3 (ix)
      001DBC DD 34 FD         [23] 6018 	inc	-3 (ix)
      001DBF DD 7E FD         [19] 6019 	ld	a, -3 (ix)
      001DC2 DD 86 FA         [19] 6020 	add	a, -6 (ix)
      001DC5 DD 77 FC         [19] 6021 	ld	-4 (ix), a
      001DC8 3E 00            [ 7] 6022 	ld	a, #0x00
      001DCA DD 8E FB         [19] 6023 	adc	a, -5 (ix)
      001DCD DD 77 FD         [19] 6024 	ld	-3 (ix), a
      001DD0 DD 6E FC         [19] 6025 	ld	l, -4 (ix)
      001DD3 DD 66 FD         [19] 6026 	ld	h, -3 (ix)
      001DD6 7E               [ 7] 6027 	ld	a, (hl)
      001DD7 B7               [ 4] 6028 	or	a, a
      001DD8 28 14            [12] 6029 	jr	Z, 00155$
      001DDA                       6030 00125$:
                                   6031 ;src\/GameLogic.h:170: DrawPiece(line);
      001DDA 3Ar02r00         [13] 6032 	ld	a,(#_line + 0)
      001DDD F5               [11] 6033 	push	af
      001DDE 33               [ 6] 6034 	inc	sp
      001DDF CDr2Fr11         [17] 6035 	call	_DrawPiece
      001DE2 33               [ 6] 6036 	inc	sp
                                   6037 ;src\/GameLogic.h:172: line = i;
      001DE3 DD 7E FE         [19] 6038 	ld	a, -2 (ix)
      001DE6 32r02r00         [13] 6039 	ld	(#_line),a
                                   6040 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001DE9 CDr9Ar1A         [17] 6041 	call	_UpdateAndDrawPieceStatic
                                   6042 ;src\/GameLogic.h:175: break;
      001DEC 18 0B            [12] 6043 	jr	00132$
      001DEE                       6044 00155$:
                                   6045 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001DEE DD 34 FF         [23] 6046 	inc	-1 (ix)
      001DF1 DD 7E FF         [19] 6047 	ld	a, -1 (ix)
      001DF4 DD 77 FE         [19] 6048 	ld	-2 (ix), a
      001DF7 18 87            [12] 6049 	jr	00154$
      001DF9                       6050 00132$:
                                   6051 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001DF9 DD 7E F6         [19] 6052 	ld	a, -10 (ix)
      001DFC DD 77 FF         [19] 6053 	ld	-1 (ix), a
                                   6054 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001DFF DD 7E F6         [19] 6055 	ld	a, -10 (ix)
      001E02 DD 77 F3         [19] 6056 	ld	-13 (ix), a
                                   6057 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      001E05 DD 7E F7         [19] 6058 	ld	a, -9 (ix)
      001E08 DD 77 F4         [19] 6059 	ld	-12 (ix), a
                                   6060 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      001E0B DD 7E F8         [19] 6061 	ld	a, -8 (ix)
      001E0E DD 77 F5         [19] 6062 	ld	-11 (ix), a
                                   6063 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      001E11 2E 07            [ 7] 6064 	ld	l, #0x07
      001E13 CDr00r00         [17] 6065 	call	_SNSMAT
                                   6066 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      001E16 CB 55            [ 8] 6067 	bit	2, l
      001E18 20 03            [12] 6068 	jr	NZ, 00134$
                                   6069 ;src\/GameLogic.h:214: Pause();
      001E1A CDr52r1B         [17] 6070 	call	_Pause
      001E1D                       6071 00134$:
                                   6072 ;src\/GameLogic.h:219: counter++;
      001E1D FD 21r03r00      [14] 6073 	ld	iy, #_counter
      001E21 FD 34 00         [23] 6074 	inc	0 (iy)
                                   6075 ;src\/GameLogic.h:220: if(counter == speed) {
      001E24 FD 7E 00         [19] 6076 	ld	a, 0 (iy)
      001E27 21r93r00         [10] 6077 	ld	hl, #_speed
      001E2A 96               [ 7] 6078 	sub	a, (hl)
      001E2B 20 3F            [12] 6079 	jr	NZ, 00139$
                                   6080 ;src\/GameLogic.h:222: counter = 0;
      001E2D 21r03r00         [10] 6081 	ld	hl, #_counter
      001E30 36 00            [10] 6082 	ld	(hl), #0x00
                                   6083 ;src\/GameLogic.h:225: DrawPiece(line);
      001E32 3Ar02r00         [13] 6084 	ld	a,(#_line + 0)
      001E35 F5               [11] 6085 	push	af
      001E36 33               [ 6] 6086 	inc	sp
      001E37 CDr2Fr11         [17] 6087 	call	_DrawPiece
      001E3A 33               [ 6] 6088 	inc	sp
                                   6089 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      001E3B FD 21r02r00      [14] 6090 	ld	iy, #_line
      001E3F FD 7E 00         [19] 6091 	ld	a, 0 (iy)
      001E42 D6 09            [ 7] 6092 	sub	a, #0x09
      001E44 28 1F            [12] 6093 	jr	Z, 00135$
      001E46 ED 4Br01r00      [20] 6094 	ld	bc, (_col)
      001E4A 06 00            [ 7] 6095 	ld	b, #0x00
      001E4C 69               [ 4] 6096 	ld	l, c
      001E4D 60               [ 4] 6097 	ld	h, b
      001E4E 29               [11] 6098 	add	hl, hl
      001E4F 09               [11] 6099 	add	hl, bc
      001E50 29               [11] 6100 	add	hl, hl
      001E51 29               [11] 6101 	add	hl, hl
      001E52 EB               [ 4] 6102 	ex	de, hl
      001E53 21r00r00         [10] 6103 	ld	hl, #_playfield
      001E56 19               [11] 6104 	add	hl, de
      001E57 EB               [ 4] 6105 	ex	de, hl
      001E58 FD 7E 00         [19] 6106 	ld	a, 0 (iy)
      001E5B C6 03            [ 7] 6107 	add	a, #0x03
      001E5D 6F               [ 4] 6108 	ld	l, a
      001E5E 26 00            [ 7] 6109 	ld	h, #0x00
      001E60 19               [11] 6110 	add	hl, de
      001E61 7E               [ 7] 6111 	ld	a, (hl)
      001E62 B7               [ 4] 6112 	or	a, a
      001E63 28 03            [12] 6113 	jr	Z, 00136$
      001E65                       6114 00135$:
                                   6115 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      001E65 CDr9Ar1A         [17] 6116 	call	_UpdateAndDrawPieceStatic
      001E68                       6117 00136$:
                                   6118 ;src\/GameLogic.h:234: line++;
      001E68 21r02r00         [10] 6119 	ld	hl, #_line
      001E6B 34               [11] 6120 	inc	(hl)
      001E6C                       6121 00139$:
                                   6122 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      001E6C ED 4Br01r00      [20] 6123 	ld	bc, (_col)
      001E70 06 00            [ 7] 6124 	ld	b, #0x00
      001E72 69               [ 4] 6125 	ld	l, c
      001E73 60               [ 4] 6126 	ld	h, b
      001E74 29               [11] 6127 	add	hl, hl
      001E75 09               [11] 6128 	add	hl, bc
      001E76 29               [11] 6129 	add	hl, hl
      001E77 29               [11] 6130 	add	hl, hl
      001E78 EB               [ 4] 6131 	ex	de, hl
      001E79 21r00r00         [10] 6132 	ld	hl, #_playfield
      001E7C 19               [11] 6133 	add	hl, de
      001E7D EB               [ 4] 6134 	ex	de, hl
      001E7E 3Ar02r00         [13] 6135 	ld	a, (#_line + 0)
      001E81 6F               [ 4] 6136 	ld	l, a
      001E82 26 00            [ 7] 6137 	ld	h, #0x00
      001E84 19               [11] 6138 	add	hl, de
      001E85 3Ar90r00         [13] 6139 	ld	a,(#_topPiece + 0)
      001E88 77               [ 7] 6140 	ld	(hl), a
                                   6141 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      001E89 ED 4Br01r00      [20] 6142 	ld	bc, (_col)
      001E8D 06 00            [ 7] 6143 	ld	b, #0x00
      001E8F 69               [ 4] 6144 	ld	l, c
      001E90 60               [ 4] 6145 	ld	h, b
      001E91 29               [11] 6146 	add	hl, hl
      001E92 09               [11] 6147 	add	hl, bc
      001E93 29               [11] 6148 	add	hl, hl
      001E94 29               [11] 6149 	add	hl, hl
      001E95 EB               [ 4] 6150 	ex	de, hl
      001E96 21r00r00         [10] 6151 	ld	hl, #_playfield
      001E99 19               [11] 6152 	add	hl, de
      001E9A EB               [ 4] 6153 	ex	de, hl
      001E9B 3Ar02r00         [13] 6154 	ld	a, (#_line + 0)
      001E9E 6F               [ 4] 6155 	ld	l, a
      001E9F 2C               [ 4] 6156 	inc	l
      001EA0 26 00            [ 7] 6157 	ld	h, #0x00
      001EA2 19               [11] 6158 	add	hl, de
      001EA3 3Ar91r00         [13] 6159 	ld	a,(#_midPiece + 0)
      001EA6 77               [ 7] 6160 	ld	(hl), a
                                   6161 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      001EA7 ED 4Br01r00      [20] 6162 	ld	bc, (_col)
      001EAB 06 00            [ 7] 6163 	ld	b, #0x00
      001EAD 69               [ 4] 6164 	ld	l, c
      001EAE 60               [ 4] 6165 	ld	h, b
      001EAF 29               [11] 6166 	add	hl, hl
      001EB0 09               [11] 6167 	add	hl, bc
      001EB1 29               [11] 6168 	add	hl, hl
      001EB2 29               [11] 6169 	add	hl, hl
      001EB3 EB               [ 4] 6170 	ex	de, hl
      001EB4 21r00r00         [10] 6171 	ld	hl, #_playfield
      001EB7 19               [11] 6172 	add	hl, de
      001EB8 EB               [ 4] 6173 	ex	de, hl
      001EB9 3Ar02r00         [13] 6174 	ld	a, (#_line + 0)
      001EBC 6F               [ 4] 6175 	ld	l, a
      001EBD 2C               [ 4] 6176 	inc	l
      001EBE 2C               [ 4] 6177 	inc	l
      001EBF 26 00            [ 7] 6178 	ld	h, #0x00
      001EC1 19               [11] 6179 	add	hl, de
      001EC2 3Ar92r00         [13] 6180 	ld	a,(#_bottomPiece + 0)
      001EC5 77               [ 7] 6181 	ld	(hl), a
                                   6182 ;src\/GameLogic.h:248: DrawPiece(line);
      001EC6 3Ar02r00         [13] 6183 	ld	a,(#_line + 0)
      001EC9 F5               [11] 6184 	push	af
      001ECA 33               [ 6] 6185 	inc	sp
      001ECB CDr2Fr11         [17] 6186 	call	_DrawPiece
      001ECE 33               [ 6] 6187 	inc	sp
                                   6188 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001ECF ED 4Br01r00      [20] 6189 	ld	bc, (_col)
      001ED3 06 00            [ 7] 6190 	ld	b, #0x00
      001ED5 69               [ 4] 6191 	ld	l, c
      001ED6 60               [ 4] 6192 	ld	h, b
      001ED7 29               [11] 6193 	add	hl, hl
      001ED8 09               [11] 6194 	add	hl, bc
      001ED9 29               [11] 6195 	add	hl, hl
      001EDA 29               [11] 6196 	add	hl, hl
      001EDB EB               [ 4] 6197 	ex	de, hl
                                   6198 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      001EDC 21r00r00         [10] 6199 	ld	hl, #_playfield
      001EDF 19               [11] 6200 	add	hl, de
      001EE0 EB               [ 4] 6201 	ex	de, hl
      001EE1 3Ar02r00         [13] 6202 	ld	a,(#_line + 0)
      001EE4 C6 03            [ 7] 6203 	add	a, #0x03
      001EE6 4F               [ 4] 6204 	ld	c, a
      001EE7 69               [ 4] 6205 	ld	l, c
      001EE8 26 00            [ 7] 6206 	ld	h, #0x00
      001EEA 19               [11] 6207 	add	hl, de
      001EEB 7E               [ 7] 6208 	ld	a, (hl)
      001EEC B7               [ 4] 6209 	or	a, a
      001EED 28 06            [12] 6210 	jr	Z, 00148$
                                   6211 ;src\/GameLogic.h:254: HideArrow();
      001EEF CDrC9r0C         [17] 6212 	call	_HideArrow
      001EF2 C3rAFr1B         [10] 6213 	jp	00150$
      001EF5                       6214 00148$:
                                   6215 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001EF5 41               [ 4] 6216 	ld	b, c
      001EF6                       6217 00157$:
      001EF6 78               [ 4] 6218 	ld	a, b
      001EF7 D6 0C            [ 7] 6219 	sub	a, #0x0c
      001EF9 D2rAFr1B         [10] 6220 	jp	NC, 00150$
                                   6221 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001EFC 3Ar01r00         [13] 6222 	ld	a,(#_col + 0)
      001EFF 87               [ 4] 6223 	add	a, a
      001F00 87               [ 4] 6224 	add	a, a
      001F01 87               [ 4] 6225 	add	a, a
      001F02 87               [ 4] 6226 	add	a, a
      001F03 DD 77 FE         [19] 6227 	ld	-2 (ix), a
                                   6228 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001F06 68               [ 4] 6229 	ld	l, b
      001F07 26 00            [ 7] 6230 	ld	h, #0x00
      001F09 19               [11] 6231 	add	hl, de
                                   6232 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F0A DD 7E FE         [19] 6233 	ld	a, -2 (ix)
      001F0D C6 50            [ 7] 6234 	add	a, #0x50
      001F0F DD 77 FE         [19] 6235 	ld	-2 (ix), a
                                   6236 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001F12 6E               [ 7] 6237 	ld	l, (hl)
      001F13 78               [ 4] 6238 	ld	a, b
      001F14 D6 0B            [ 7] 6239 	sub	a,#0x0b
      001F16 20 16            [12] 6240 	jr	NZ, 00143$
      001F18 B5               [ 4] 6241 	or	a,l
      001F19 20 13            [12] 6242 	jr	NZ, 00143$
                                   6243 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F1B 79               [ 4] 6244 	ld	a, c
      001F1C 87               [ 4] 6245 	add	a, a
      001F1D 87               [ 4] 6246 	add	a, a
      001F1E 87               [ 4] 6247 	add	a, a
      001F1F 87               [ 4] 6248 	add	a, a
      001F20 F5               [11] 6249 	push	af
      001F21 33               [ 6] 6250 	inc	sp
      001F22 DD 7E FE         [19] 6251 	ld	a, -2 (ix)
      001F25 F5               [11] 6252 	push	af
      001F26 33               [ 6] 6253 	inc	sp
      001F27 CDr2Er0C         [17] 6254 	call	_DrawArrow
      001F2A F1               [10] 6255 	pop	af
                                   6256 ;src\/GameLogic.h:260: break;
      001F2B C3rAFr1B         [10] 6257 	jp	00150$
      001F2E                       6258 00143$:
                                   6259 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      001F2E 7D               [ 4] 6260 	ld	a, l
      001F2F B7               [ 4] 6261 	or	a, a
      001F30 28 14            [12] 6262 	jr	Z, 00158$
                                   6263 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      001F32 79               [ 4] 6264 	ld	a, c
      001F33 3D               [ 4] 6265 	dec	a
      001F34 87               [ 4] 6266 	add	a, a
      001F35 87               [ 4] 6267 	add	a, a
      001F36 87               [ 4] 6268 	add	a, a
      001F37 87               [ 4] 6269 	add	a, a
      001F38 F5               [11] 6270 	push	af
      001F39 33               [ 6] 6271 	inc	sp
      001F3A DD 7E FE         [19] 6272 	ld	a, -2 (ix)
      001F3D F5               [11] 6273 	push	af
      001F3E 33               [ 6] 6274 	inc	sp
      001F3F CDr2Er0C         [17] 6275 	call	_DrawArrow
      001F42 F1               [10] 6276 	pop	af
                                   6277 ;src\/GameLogic.h:264: break;
      001F43 C3rAFr1B         [10] 6278 	jp	00150$
      001F46                       6279 00158$:
                                   6280 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001F46 04               [ 4] 6281 	inc	b
      001F47 48               [ 4] 6282 	ld	c, b
      001F48 18 AC            [12] 6283 	jr	00157$
      001F4A                       6284 00152$:
                                   6285 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      001F4A 11 0C 0C         [10] 6286 	ld	de, #0x0c0c
      001F4D D5               [11] 6287 	push	de
      001F4E 21r62r1F         [10] 6288 	ld	hl, #___str_6
      001F51 E5               [11] 6289 	push	hl
      001F52 CDrA8r07         [17] 6290 	call	_DrawString
      001F55 F1               [10] 6291 	pop	af
                                   6292 ;src\/GameLogic.h:276: Wait(60 * 3);
      001F56 21 B4 00         [10] 6293 	ld	hl, #0x00b4
      001F59 E3               [19] 6294 	ex	(sp),hl
      001F5A CDr00r00         [17] 6295 	call	_Wait
                                   6296 ;src\/GameLogic.h:278: }
      001F5D DD F9            [10] 6297 	ld	sp,ix
      001F5F DD E1            [14] 6298 	pop	ix
      001F61 C9               [10] 6299 	ret
      001F62                       6300 ___str_6:
      001F62 47 41 4D 45 20 4F 56  6301 	.ascii "GAME OVER"
             45 52
      001F6B 00                    6302 	.db 0x00
                                   6303 ;src\/GameLogic.h:280: void TestCase() {
                                   6304 ;	---------------------------------
                                   6305 ; Function TestCase
                                   6306 ; ---------------------------------
      001F6C                       6307 _TestCase::
                                   6308 ;src\/GameLogic.h:281: playfield[2][ 8] = TILE_GREEN;
      001F6C 21r20r00         [10] 6309 	ld	hl, #(_playfield + 0x0020)
      001F6F 36 04            [10] 6310 	ld	(hl), #0x04
                                   6311 ;src\/GameLogic.h:282: playfield[2][ 9] = TILE_BLUE;
      001F71 21r21r00         [10] 6312 	ld	hl, #(_playfield + 0x0021)
      001F74 36 0C            [10] 6313 	ld	(hl), #0x0c
                                   6314 ;src\/GameLogic.h:284: playfield[0][10] = TILE_BLUE;
      001F76 21r0Ar00         [10] 6315 	ld	hl, #(_playfield + 0x000a)
      001F79 36 0C            [10] 6316 	ld	(hl), #0x0c
                                   6317 ;src\/GameLogic.h:285: playfield[1][10] = TILE_BLUE;
      001F7B 21r16r00         [10] 6318 	ld	hl, #(_playfield + 0x0016)
      001F7E 36 0C            [10] 6319 	ld	(hl), #0x0c
                                   6320 ;src\/GameLogic.h:286: playfield[2][10] = TILE_RED;
      001F80 21r22r00         [10] 6321 	ld	hl, #(_playfield + 0x0022)
      001F83 36 08            [10] 6322 	ld	(hl), #0x08
                                   6323 ;src\/GameLogic.h:287: playfield[4][10] = TILE_RED;
      001F85 21r3Ar00         [10] 6324 	ld	hl, #(_playfield + 0x003a)
      001F88 36 08            [10] 6325 	ld	(hl), #0x08
                                   6326 ;src\/GameLogic.h:288: playfield[5][10] = TILE_BLUE;
      001F8A 21r46r00         [10] 6327 	ld	hl, #(_playfield + 0x0046)
      001F8D 36 0C            [10] 6328 	ld	(hl), #0x0c
                                   6329 ;src\/GameLogic.h:290: playfield[0][11] = TILE_GREEN;
      001F8F 21r0Br00         [10] 6330 	ld	hl, #(_playfield + 0x000b)
      001F92 36 04            [10] 6331 	ld	(hl), #0x04
                                   6332 ;src\/GameLogic.h:291: playfield[1][11] = TILE_GREEN;
      001F94 21r17r00         [10] 6333 	ld	hl, #(_playfield + 0x0017)
      001F97 36 04            [10] 6334 	ld	(hl), #0x04
                                   6335 ;src\/GameLogic.h:292: playfield[2][11] = TILE_RED;
      001F99 21r23r00         [10] 6336 	ld	hl, #(_playfield + 0x0023)
      001F9C 36 08            [10] 6337 	ld	(hl), #0x08
                                   6338 ;src\/GameLogic.h:293: playfield[3][11] = TILE_BLUE;
      001F9E 21r2Fr00         [10] 6339 	ld	hl, #(_playfield + 0x002f)
      001FA1 36 0C            [10] 6340 	ld	(hl), #0x0c
                                   6341 ;src\/GameLogic.h:294: playfield[4][11] = TILE_RED;
      001FA3 21r3Br00         [10] 6342 	ld	hl, #(_playfield + 0x003b)
      001FA6 36 08            [10] 6343 	ld	(hl), #0x08
                                   6344 ;src\/GameLogic.h:295: playfield[5][11] = TILE_RED;
      001FA8 21r47r00         [10] 6345 	ld	hl, #(_playfield + 0x0047)
      001FAB 36 08            [10] 6346 	ld	(hl), #0x08
                                   6347 ;src\/GameLogic.h:297: topPiece = TILE_BLUE;
      001FAD 3E 0C            [ 7] 6348 	ld	a, #0x0c
      001FAF 32r90r00         [13] 6349 	ld	(#_topPiece), a
                                   6350 ;src\/GameLogic.h:298: midPiece = TILE_RED;
      001FB2 3E 08            [ 7] 6351 	ld	a, #0x08
      001FB4 32r91r00         [13] 6352 	ld	(#_midPiece), a
                                   6353 ;src\/GameLogic.h:299: bottomPiece = TILE_YELLOW;
      001FB7 3E 14            [ 7] 6354 	ld	a, #0x14
      001FB9 32r92r00         [13] 6355 	ld	(#_bottomPiece), a
                                   6356 ;src\/GameLogic.h:300: }
      001FBC C9               [10] 6357 	ret
                                   6358 ;src\/GameLogic.h:302: void InitGame() {
                                   6359 ;	---------------------------------
                                   6360 ; Function InitGame
                                   6361 ; ---------------------------------
      001FBD                       6362 _InitGame::
                                   6363 ;src\/GameLogic.h:304: gameOver = FALSE;
      001FBD 21r00r00         [10] 6364 	ld	hl, #_gameOver
      001FC0 36 00            [10] 6365 	ld	(hl), #0x00
                                   6366 ;src\/GameLogic.h:305: line = INITIAL_LINE;
      001FC2 21r02r00         [10] 6367 	ld	hl, #_line
      001FC5 36 00            [10] 6368 	ld	(hl), #0x00
                                   6369 ;src\/GameLogic.h:306: col = INITIAL_COL;
      001FC7 21r01r00         [10] 6370 	ld	hl, #_col
      001FCA 36 02            [10] 6371 	ld	(hl), #0x02
                                   6372 ;src\/GameLogic.h:307: blocksRemoved = 0;
      001FCC 21 00 00         [10] 6373 	ld	hl, #0x0000
      001FCF 22r04r00         [16] 6374 	ld	(_blocksRemoved), hl
                                   6375 ;src\/GameLogic.h:308: level = 1;
      001FD2 21r06r00         [10] 6376 	ld	hl, #_level
      001FD5 36 01            [10] 6377 	ld	(hl), #0x01
                                   6378 ;src\/GameLogic.h:309: newLevel = FALSE;
      001FD7 21r07r00         [10] 6379 	ld	hl, #_newLevel
      001FDA 36 00            [10] 6380 	ld	(hl), #0x00
                                   6381 ;src\/GameLogic.h:310: speed = 60;
      001FDC 21r93r00         [10] 6382 	ld	hl, #_speed
      001FDF 36 3C            [10] 6383 	ld	(hl), #0x3c
                                   6384 ;src\/GameLogic.h:312: InitVRAM();
      001FE1 CDr8Er0D         [17] 6385 	call	_InitVRAM
                                   6386 ;src\/GameLogic.h:315: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      001FE4 3Ar08r00         [13] 6387 	ld	a, (#_rndSeed + 0)
      001FE7 5F               [ 4] 6388 	ld	e, a
      001FE8 3A 9E FC         [13] 6389 	ld	a, (#_JIFFY + 0)
      001FEB 67               [ 4] 6390 	ld	h, a
      001FEC 2E 00            [ 7] 6391 	ld	l, #0x00
      001FEE 55               [ 4] 6392 	ld	d, l
      001FEF 06 08            [ 7] 6393 	ld	b, #0x08
      001FF1                       6394 00133$:
      001FF1 29               [11] 6395 	add	hl, hl
      001FF2 30 01            [12] 6396 	jr	NC, 00134$
      001FF4 19               [11] 6397 	add	hl, de
      001FF5                       6398 00134$:
      001FF5 10 FA            [13] 6399 	djnz	00133$
      001FF7 7D               [ 4] 6400 	ld	a, l
      001FF8 C6 63            [ 7] 6401 	add	a, #0x63
      001FFA 4F               [ 4] 6402 	ld	c, a
      001FFB 3Ar08r00         [13] 6403 	ld	a, (#_rndSeed + 0)
      001FFE 5F               [ 4] 6404 	ld	e, a
      001FFF 3A 9E FC         [13] 6405 	ld	a, (#_JIFFY + 0)
      002002 67               [ 4] 6406 	ld	h, a
      002003 2E 00            [ 7] 6407 	ld	l, #0x00
      002005 55               [ 4] 6408 	ld	d, l
      002006 06 08            [ 7] 6409 	ld	b, #0x08
      002008                       6410 00135$:
      002008 29               [11] 6411 	add	hl, hl
      002009 30 01            [12] 6412 	jr	NC, 00136$
      00200B 19               [11] 6413 	add	hl, de
      00200C                       6414 00136$:
      00200C 10 FA            [13] 6415 	djnz	00135$
      00200E 79               [ 4] 6416 	ld	a, c
      00200F F5               [11] 6417 	push	af
      002010 7D               [ 4] 6418 	ld	a, l
      002011 33               [ 6] 6419 	inc	sp
      002012 F5               [11] 6420 	push	af
      002013 33               [ 6] 6421 	inc	sp
      002014 3Ar08r00         [13] 6422 	ld	a,(#_rndSeed + 0)
      002017 F5               [11] 6423 	push	af
      002018 33               [ 6] 6424 	inc	sp
      002019 CDr50r00         [17] 6425 	call	_InitRnd
      00201C F1               [10] 6426 	pop	af
      00201D 33               [ 6] 6427 	inc	sp
                                   6428 ;src\/GameLogic.h:318: RandomPiece();
      00201E CDr72r1A         [17] 6429 	call	_RandomPiece
                                   6430 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002021 0E 00            [ 7] 6431 	ld	c, #0x00
      002023                       6432 00107$:
      002023 79               [ 4] 6433 	ld	a, c
      002024 D6 0C            [ 7] 6434 	sub	a, #0x0c
      002026 30 20            [12] 6435 	jr	NC, 00102$
                                   6436 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002028 06 00            [ 7] 6437 	ld	b, #0x00
      00202A                       6438 00104$:
      00202A 78               [ 4] 6439 	ld	a, b
      00202B D6 06            [ 7] 6440 	sub	a, #0x06
      00202D 30 16            [12] 6441 	jr	NC, 00108$
                                   6442 ;src\/GameLogic.h:323: playfield[col][line] = EMPTY;
      00202F 58               [ 4] 6443 	ld	e, b
      002030 16 00            [ 7] 6444 	ld	d, #0x00
      002032 6B               [ 4] 6445 	ld	l, e
      002033 62               [ 4] 6446 	ld	h, d
      002034 29               [11] 6447 	add	hl, hl
      002035 19               [11] 6448 	add	hl, de
      002036 29               [11] 6449 	add	hl, hl
      002037 29               [11] 6450 	add	hl, hl
      002038 11r00r00         [10] 6451 	ld	de, #_playfield
      00203B 19               [11] 6452 	add	hl, de
      00203C 59               [ 4] 6453 	ld	e, c
      00203D 16 00            [ 7] 6454 	ld	d, #0x00
      00203F 19               [11] 6455 	add	hl, de
      002040 36 00            [10] 6456 	ld	(hl), #0x00
                                   6457 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002042 04               [ 4] 6458 	inc	b
      002043 18 E5            [12] 6459 	jr	00104$
      002045                       6460 00108$:
                                   6461 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002045 0C               [ 4] 6462 	inc	c
      002046 18 DB            [12] 6463 	jr	00107$
      002048                       6464 00102$:
                                   6465 ;src\/GameLogic.h:328: TestCase();
      002048 CDr6Cr1F         [17] 6466 	call	_TestCase
                                   6467 ;src\/GameLogic.h:330: DrawBackground();
      00204B CDrFDr0B         [17] 6468 	call	_DrawBackground
                                   6469 ;src\/GameLogic.h:332: DrawPlayfield();
      00204E CDr52r11         [17] 6470 	call	_DrawPlayfield
                                   6471 ;src\/GameLogic.h:334: DrawScore();
      002051 CDr66r0A         [17] 6472 	call	_DrawScore
                                   6473 ;src\/GameLogic.h:336: GameLoop();
                                   6474 ;src\/GameLogic.h:337: }
      002054 C3r92r1B         [10] 6475 	jp	_GameLoop
                                   6476 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6477 ;	---------------------------------
                                   6478 ; Function ChangeFontColor
                                   6479 ; ---------------------------------
      002057                       6480 _ChangeFontColor::
                                   6481 ;src\/Intro.h:4: FILVRM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002057 2A C9 F3         [16] 6482 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      00205A 01 78 01         [10] 6483 	ld	bc, #0x0178
      00205D 09               [11] 6484 	add	hl, bc
      00205E FD 21 02 00      [14] 6485 	ld	iy, #2
      002062 FD 39            [15] 6486 	add	iy, sp
      002064 FD 7E 00         [19] 6487 	ld	a, 0 (iy)
      002067 F5               [11] 6488 	push	af
      002068 33               [ 6] 6489 	inc	sp
      002069 11 00 03         [10] 6490 	ld	de, #0x0300
      00206C D5               [11] 6491 	push	de
      00206D E5               [11] 6492 	push	hl
      00206E CDr00r00         [17] 6493 	call	_FILVRM
      002071 F1               [10] 6494 	pop	af
      002072 F1               [10] 6495 	pop	af
      002073 33               [ 6] 6496 	inc	sp
                                   6497 ;src\/Intro.h:5: FILVRM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002074 2A C9 F3         [16] 6498 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      002077 01 78 09         [10] 6499 	ld	bc, #0x0978
      00207A 09               [11] 6500 	add	hl, bc
      00207B FD 21 02 00      [14] 6501 	ld	iy, #2
      00207F FD 39            [15] 6502 	add	iy, sp
      002081 FD 7E 00         [19] 6503 	ld	a, 0 (iy)
      002084 F5               [11] 6504 	push	af
      002085 33               [ 6] 6505 	inc	sp
      002086 11 00 03         [10] 6506 	ld	de, #0x0300
      002089 D5               [11] 6507 	push	de
      00208A E5               [11] 6508 	push	hl
      00208B CDr00r00         [17] 6509 	call	_FILVRM
      00208E F1               [10] 6510 	pop	af
      00208F F1               [10] 6511 	pop	af
      002090 33               [ 6] 6512 	inc	sp
                                   6513 ;src\/Intro.h:6: FILVRM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002091 2A C9 F3         [16] 6514 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      002094 01 78 11         [10] 6515 	ld	bc, #0x1178
      002097 09               [11] 6516 	add	hl, bc
      002098 FD 21 02 00      [14] 6517 	ld	iy, #2
      00209C FD 39            [15] 6518 	add	iy, sp
      00209E FD 7E 00         [19] 6519 	ld	a, 0 (iy)
      0020A1 F5               [11] 6520 	push	af
      0020A2 33               [ 6] 6521 	inc	sp
      0020A3 11 00 03         [10] 6522 	ld	de, #0x0300
      0020A6 D5               [11] 6523 	push	de
      0020A7 E5               [11] 6524 	push	hl
      0020A8 CDr00r00         [17] 6525 	call	_FILVRM
      0020AB F1               [10] 6526 	pop	af
      0020AC F1               [10] 6527 	pop	af
      0020AD 33               [ 6] 6528 	inc	sp
                                   6529 ;src\/Intro.h:7: }
      0020AE C9               [10] 6530 	ret
                                   6531 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6532 ;	---------------------------------
                                   6533 ; Function ScrollDownFont
                                   6534 ; ---------------------------------
      0020AF                       6535 _ScrollDownFont::
      0020AF DD E5            [15] 6536 	push	ix
      0020B1 DD 21 00 00      [14] 6537 	ld	ix,#0
      0020B5 DD 39            [15] 6538 	add	ix,sp
      0020B7 F5               [11] 6539 	push	af
      0020B8 F5               [11] 6540 	push	af
                                   6541 ;src\/Intro.h:10: word startVRAMAddr = MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8);
      0020B9 2A CB F3         [16] 6542 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      0020BC 01 78 09         [10] 6543 	ld	bc, #0x0978
      0020BF 09               [11] 6544 	add	hl, bc
                                   6545 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0020C0 4D               [ 4] 6546 	ld	c, l
      0020C1 44               [ 4] 6547 	ld	b, h
      0020C2 5D               [ 4] 6548 	ld	e, l
      0020C3 7C               [ 4] 6549 	ld	a, h
      0020C4 C6 03            [ 7] 6550 	add	a, #0x03
      0020C6 57               [ 4] 6551 	ld	d, a
      0020C7                       6552 00107$:
      0020C7 79               [ 4] 6553 	ld	a, c
      0020C8 93               [ 4] 6554 	sub	a, e
      0020C9 78               [ 4] 6555 	ld	a, b
      0020CA 9A               [ 4] 6556 	sbc	a, d
      0020CB 30 61            [12] 6557 	jr	NC, 00109$
                                   6558 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0020CD 33               [ 6] 6559 	inc	sp
      0020CE 33               [ 6] 6560 	inc	sp
      0020CF C5               [11] 6561 	push	bc
      0020D0 DD 7E FC         [19] 6562 	ld	a, -4 (ix)
      0020D3 C6 07            [ 7] 6563 	add	a, #0x07
      0020D5 6F               [ 4] 6564 	ld	l, a
      0020D6 DD 7E FD         [19] 6565 	ld	a, -3 (ix)
      0020D9 CE 00            [ 7] 6566 	adc	a, #0x00
      0020DB DD 75 FE         [19] 6567 	ld	-2 (ix), l
      0020DE DD 77 FF         [19] 6568 	ld	-1 (ix), a
      0020E1                       6569 00104$:
      0020E1 DD 7E FF         [19] 6570 	ld	a, -1 (ix)
      0020E4 DD B6 FE         [19] 6571 	or	a, -2 (ix)
      0020E7 28 2C            [12] 6572 	jr	Z, 00101$
                                   6573 ;src\/Intro.h:27: value = RDVRM(j-1);
      0020E9 DD 6E FE         [19] 6574 	ld	l, -2 (ix)
      0020EC DD 66 FF         [19] 6575 	ld	h, -1 (ix)
      0020EF 2B               [ 6] 6576 	dec	hl
      0020F0 C5               [11] 6577 	push	bc
      0020F1 D5               [11] 6578 	push	de
      0020F2 CDr00r00         [17] 6579 	call	_RDVRM
      0020F5 AF               [ 4] 6580 	xor	a, a
      0020F6 F5               [11] 6581 	push	af
      0020F7 33               [ 6] 6582 	inc	sp
      0020F8 DD 6E FE         [19] 6583 	ld	l, -2 (ix)
      0020FB DD 66 FF         [19] 6584 	ld	h, -1 (ix)
      0020FE E5               [11] 6585 	push	hl
      0020FF CDr00r00         [17] 6586 	call	_WRTVRM
      002102 F1               [10] 6587 	pop	af
      002103 33               [ 6] 6588 	inc	sp
      002104 D1               [10] 6589 	pop	de
      002105 C1               [10] 6590 	pop	bc
                                   6591 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002106 DD 6E FE         [19] 6592 	ld	l, -2 (ix)
      002109 DD 66 FF         [19] 6593 	ld	h, -1 (ix)
      00210C 2B               [ 6] 6594 	dec	hl
      00210D DD 75 FE         [19] 6595 	ld	-2 (ix), l
      002110 DD 74 FF         [19] 6596 	ld	-1 (ix), h
      002113 18 CC            [12] 6597 	jr	00104$
      002115                       6598 00101$:
                                   6599 ;src\/Intro.h:31: WRTVRM(i, 0);
      002115 D5               [11] 6600 	push	de
      002116 AF               [ 4] 6601 	xor	a, a
      002117 F5               [11] 6602 	push	af
      002118 33               [ 6] 6603 	inc	sp
      002119 C5               [11] 6604 	push	bc
      00211A CDr00r00         [17] 6605 	call	_WRTVRM
      00211D F1               [10] 6606 	pop	af
      00211E 33               [ 6] 6607 	inc	sp
      00211F D1               [10] 6608 	pop	de
                                   6609 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002120 DD 7E FC         [19] 6610 	ld	a, -4 (ix)
      002123 C6 08            [ 7] 6611 	add	a, #0x08
      002125 4F               [ 4] 6612 	ld	c, a
      002126 DD 7E FD         [19] 6613 	ld	a, -3 (ix)
      002129 CE 00            [ 7] 6614 	adc	a, #0x00
      00212B 47               [ 4] 6615 	ld	b, a
      00212C 18 99            [12] 6616 	jr	00107$
      00212E                       6617 00109$:
                                   6618 ;src\/Intro.h:35: }
      00212E DD F9            [10] 6619 	ld	sp, ix
      002130 DD E1            [14] 6620 	pop	ix
      002132 C9               [10] 6621 	ret
                                   6622 ;src\/Intro.h:37: void Intro() {
                                   6623 ;	---------------------------------
                                   6624 ; Function Intro
                                   6625 ; ---------------------------------
      002133                       6626 _Intro::
                                   6627 ;src\/Intro.h:41: InitVRAM();
      002133 CDr8Er0D         [17] 6628 	call	_InitVRAM
                                   6629 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002136 11 0B 0B         [10] 6630 	ld	de, #0x0b0b
      002139 D5               [11] 6631 	push	de
      00213A 21rA8r21         [10] 6632 	ld	hl, #___str_7
      00213D E5               [11] 6633 	push	hl
      00213E CDrA8r07         [17] 6634 	call	_DrawString
      002141 F1               [10] 6635 	pop	af
      002142 F1               [10] 6636 	pop	af
                                   6637 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002143 11 09 0D         [10] 6638 	ld	de, #0x0d09
      002146 D5               [11] 6639 	push	de
      002147 21rB2r21         [10] 6640 	ld	hl, #___str_8
      00214A E5               [11] 6641 	push	hl
      00214B CDrA8r07         [17] 6642 	call	_DrawString
      00214E F1               [10] 6643 	pop	af
                                   6644 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00214F 26 F0            [ 7] 6645 	ld	h,#0xf0
      002151 E3               [19] 6646 	ex	(sp),hl
      002152 33               [ 6] 6647 	inc	sp
      002153 CDr57r20         [17] 6648 	call	_ChangeFontColor
      002156 33               [ 6] 6649 	inc	sp
                                   6650 ;src\/Intro.h:56: Wait(2 * 60);
      002157 21 78 00         [10] 6651 	ld	hl, #0x0078
      00215A E5               [11] 6652 	push	hl
      00215B CDr00r00         [17] 6653 	call	_Wait
      00215E F1               [10] 6654 	pop	af
                                   6655 ;src\/Intro.h:58: while(counter++ < 20) {
      00215F 0E 00            [ 7] 6656 	ld	c, #0x00
      002161                       6657 00112$:
      002161 79               [ 4] 6658 	ld	a, c
      002162 D6 14            [ 7] 6659 	sub	a, #0x14
      002164 D0               [11] 6660 	ret	NC
      002165 0C               [ 4] 6661 	inc	c
                                   6662 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002166 21 9E FC         [10] 6663 	ld	hl, #_JIFFY
      002169 46               [ 7] 6664 	ld	b, (hl)
                                   6665 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      00216A                       6666 00101$:
      00216A 58               [ 4] 6667 	ld	e, b
      00216B 16 00            [ 7] 6668 	ld	d, #0x00
      00216D 2A 9E FC         [16] 6669 	ld	hl, (_JIFFY)
      002170 BF               [ 4] 6670 	cp	a, a
      002171 ED 52            [15] 6671 	sbc	hl, de
      002173 28 F5            [12] 6672 	jr	Z, 00101$
                                   6673 ;src\/Intro.h:63: if(counter == 15) {
      002175 79               [ 4] 6674 	ld	a, c
      002176 D6 0F            [ 7] 6675 	sub	a, #0x0f
      002178 20 0C            [12] 6676 	jr	NZ, 00110$
                                   6677 ;src\/Intro.h:64: ChangeFontColor(0x40);
      00217A C5               [11] 6678 	push	bc
      00217B 3E 40            [ 7] 6679 	ld	a, #0x40
      00217D F5               [11] 6680 	push	af
      00217E 33               [ 6] 6681 	inc	sp
      00217F CDr57r20         [17] 6682 	call	_ChangeFontColor
      002182 33               [ 6] 6683 	inc	sp
      002183 C1               [10] 6684 	pop	bc
      002184 18 DB            [12] 6685 	jr	00112$
      002186                       6686 00110$:
                                   6687 ;src\/Intro.h:66: else if(counter == 10) {
      002186 79               [ 4] 6688 	ld	a, c
      002187 D6 0A            [ 7] 6689 	sub	a, #0x0a
      002189 20 0C            [12] 6690 	jr	NZ, 00107$
                                   6691 ;src\/Intro.h:67: ChangeFontColor(0x50);
      00218B C5               [11] 6692 	push	bc
      00218C 3E 50            [ 7] 6693 	ld	a, #0x50
      00218E F5               [11] 6694 	push	af
      00218F 33               [ 6] 6695 	inc	sp
      002190 CDr57r20         [17] 6696 	call	_ChangeFontColor
      002193 33               [ 6] 6697 	inc	sp
      002194 C1               [10] 6698 	pop	bc
      002195 18 CA            [12] 6699 	jr	00112$
      002197                       6700 00107$:
                                   6701 ;src\/Intro.h:69: else if(counter == 5) {
      002197 79               [ 4] 6702 	ld	a, c
      002198 D6 05            [ 7] 6703 	sub	a, #0x05
      00219A 20 C5            [12] 6704 	jr	NZ, 00112$
                                   6705 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      00219C C5               [11] 6706 	push	bc
      00219D 3E E0            [ 7] 6707 	ld	a, #0xe0
      00219F F5               [11] 6708 	push	af
      0021A0 33               [ 6] 6709 	inc	sp
      0021A1 CDr57r20         [17] 6710 	call	_ChangeFontColor
      0021A4 33               [ 6] 6711 	inc	sp
      0021A5 C1               [10] 6712 	pop	bc
                                   6713 ;src\/Intro.h:140: }
      0021A6 18 B9            [12] 6714 	jr	00112$
      0021A8                       6715 ___str_7:
      0021A8 41 20 47 41 4D 45 20  6716 	.ascii "A GAME BY"
             42 59
      0021B1 00                    6717 	.db 0x00
      0021B2                       6718 ___str_8:
      0021B2 41 4E 44 52 45 20 42  6719 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0021C0 00                    6720 	.db 0x00
                                   6721 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   6722 ;	---------------------------------
                                   6723 ; Function SetBlock
                                   6724 ; ---------------------------------
      0021C1                       6725 _SetBlock::
      0021C1 DD E5            [15] 6726 	push	ix
      0021C3 DD 21 00 00      [14] 6727 	ld	ix,#0
      0021C7 DD 39            [15] 6728 	add	ix,sp
                                   6729 ;src\/Title.h:15: WRTVRM(MSX_modedata_screen2.name + col + (line * 32), tileNumber);
      0021C9 2A C7 F3         [16] 6730 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0021CC DD 4E 04         [19] 6731 	ld	c, 4 (ix)
      0021CF 06 00            [ 7] 6732 	ld	b, #0x00
      0021D1 09               [11] 6733 	add	hl, bc
      0021D2 EB               [ 4] 6734 	ex	de, hl
      0021D3 DD 6E 05         [19] 6735 	ld	l, 5 (ix)
      0021D6 26 00            [ 7] 6736 	ld	h, #0x00
      0021D8 29               [11] 6737 	add	hl, hl
      0021D9 29               [11] 6738 	add	hl, hl
      0021DA 29               [11] 6739 	add	hl, hl
      0021DB 29               [11] 6740 	add	hl, hl
      0021DC 29               [11] 6741 	add	hl, hl
      0021DD 19               [11] 6742 	add	hl, de
      0021DE DD 7E 06         [19] 6743 	ld	a, 6 (ix)
      0021E1 F5               [11] 6744 	push	af
      0021E2 33               [ 6] 6745 	inc	sp
      0021E3 E5               [11] 6746 	push	hl
      0021E4 CDr00r00         [17] 6747 	call	_WRTVRM
      0021E7 F1               [10] 6748 	pop	af
      0021E8 33               [ 6] 6749 	inc	sp
                                   6750 ;src\/Title.h:16: }
      0021E9 DD E1            [14] 6751 	pop	ix
      0021EB C9               [10] 6752 	ret
                                   6753 ;src\/Title.h:18: void TitleScreen() {
                                   6754 ;	---------------------------------
                                   6755 ; Function TitleScreen
                                   6756 ; ---------------------------------
      0021EC                       6757 _TitleScreen::
      0021EC DD E5            [15] 6758 	push	ix
      0021EE DD 21 00 00      [14] 6759 	ld	ix,#0
      0021F2 DD 39            [15] 6760 	add	ix,sp
      0021F4 21 EB FF         [10] 6761 	ld	hl, #-21
      0021F7 39               [11] 6762 	add	hl, sp
      0021F8 F9               [ 6] 6763 	ld	sp, hl
                                   6764 ;src\/Title.h:19: byte colorIndex = 0;
      0021F9 0E 00            [ 7] 6765 	ld	c, #0x00
                                   6766 ;src\/Title.h:50: const char blocks[] = {
      0021FB 21 00 00         [10] 6767 	ld	hl, #0
      0021FE 39               [11] 6768 	add	hl, sp
      0021FF EB               [ 4] 6769 	ex	de, hl
      002200 3E 8E            [ 7] 6770 	ld	a, #0x8e
      002202 12               [ 7] 6771 	ld	(de), a
      002203 6B               [ 4] 6772 	ld	l, e
      002204 62               [ 4] 6773 	ld	h, d
      002205 23               [ 6] 6774 	inc	hl
      002206 36 8F            [10] 6775 	ld	(hl), #0x8f
      002208 6B               [ 4] 6776 	ld	l, e
      002209 62               [ 4] 6777 	ld	h, d
      00220A 23               [ 6] 6778 	inc	hl
      00220B 23               [ 6] 6779 	inc	hl
      00220C 36 90            [10] 6780 	ld	(hl), #0x90
      00220E 6B               [ 4] 6781 	ld	l, e
      00220F 62               [ 4] 6782 	ld	h, d
      002210 23               [ 6] 6783 	inc	hl
      002211 23               [ 6] 6784 	inc	hl
      002212 23               [ 6] 6785 	inc	hl
      002213 36 91            [10] 6786 	ld	(hl), #0x91
      002215 21 04 00         [10] 6787 	ld	hl, #0x0004
      002218 19               [11] 6788 	add	hl, de
      002219 36 92            [10] 6789 	ld	(hl), #0x92
      00221B 21 05 00         [10] 6790 	ld	hl, #0x0005
      00221E 19               [11] 6791 	add	hl, de
      00221F 36 93            [10] 6792 	ld	(hl), #0x93
      002221 21 06 00         [10] 6793 	ld	hl, #0x0006
      002224 19               [11] 6794 	add	hl, de
      002225 36 94            [10] 6795 	ld	(hl), #0x94
                                   6796 ;src\/Title.h:60: const char colors[] = { A, C, E, G }; // last item will be ignored
      002227 21 07 00         [10] 6797 	ld	hl, #7
      00222A 39               [11] 6798 	add	hl, sp
      00222B DD 75 F6         [19] 6799 	ld	-10 (ix), l
      00222E DD 74 F7         [19] 6800 	ld	-9 (ix), h
      002231 36 8E            [10] 6801 	ld	(hl), #0x8e
      002233 DD 6E F6         [19] 6802 	ld	l, -10 (ix)
      002236 DD 66 F7         [19] 6803 	ld	h, -9 (ix)
      002239 23               [ 6] 6804 	inc	hl
      00223A 36 90            [10] 6805 	ld	(hl), #0x90
      00223C DD 6E F6         [19] 6806 	ld	l, -10 (ix)
      00223F DD 66 F7         [19] 6807 	ld	h, -9 (ix)
      002242 23               [ 6] 6808 	inc	hl
      002243 23               [ 6] 6809 	inc	hl
      002244 36 92            [10] 6810 	ld	(hl), #0x92
      002246 DD 6E F6         [19] 6811 	ld	l, -10 (ix)
      002249 DD 66 F7         [19] 6812 	ld	h, -9 (ix)
      00224C 23               [ 6] 6813 	inc	hl
      00224D 23               [ 6] 6814 	inc	hl
      00224E 23               [ 6] 6815 	inc	hl
      00224F 36 94            [10] 6816 	ld	(hl), #0x94
                                   6817 ;src\/Title.h:63: InitVRAM();
      002251 C5               [11] 6818 	push	bc
      002252 D5               [11] 6819 	push	de
      002253 CDr8Er0D         [17] 6820 	call	_InitVRAM
      002256 D1               [10] 6821 	pop	de
      002257 C1               [10] 6822 	pop	bc
                                   6823 ;src\/Title.h:65: LDIRVM(MSX_modedata_screen2.name, title, 32 * 24);
      002258 2A C7 F3         [16] 6824 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00225B C5               [11] 6825 	push	bc
      00225C D5               [11] 6826 	push	de
      00225D 11 00 03         [10] 6827 	ld	de, #0x0300
      002260 D5               [11] 6828 	push	de
      002261 11rE7r23         [10] 6829 	ld	de, #_TitleScreen_title_65536_275
      002264 D5               [11] 6830 	push	de
      002265 E5               [11] 6831 	push	hl
      002266 CDr00r00         [17] 6832 	call	_LDIRVM
      002269 21 06 00         [10] 6833 	ld	hl, #6
      00226C 39               [11] 6834 	add	hl, sp
      00226D F9               [ 6] 6835 	ld	sp, hl
      00226E 11 05 0D         [10] 6836 	ld	de, #0x0d05
      002271 D5               [11] 6837 	push	de
      002272 21rE7r26         [10] 6838 	ld	hl, #___str_9
      002275 E5               [11] 6839 	push	hl
      002276 CDrA8r07         [17] 6840 	call	_DrawString
      002279 F1               [10] 6841 	pop	af
      00227A 26 17            [ 7] 6842 	ld	h,#0x17
      00227C E3               [19] 6843 	ex	(sp),hl
      00227D 33               [ 6] 6844 	inc	sp
      00227E AF               [ 4] 6845 	xor	a, a
      00227F F5               [11] 6846 	push	af
      002280 33               [ 6] 6847 	inc	sp
      002281 21rFEr26         [10] 6848 	ld	hl, #___str_10
      002284 E5               [11] 6849 	push	hl
      002285 CDrA8r07         [17] 6850 	call	_DrawString
      002288 F1               [10] 6851 	pop	af
      002289 F1               [10] 6852 	pop	af
      00228A 11 19 17         [10] 6853 	ld	de, #0x1719
      00228D D5               [11] 6854 	push	de
      00228E 21r13r27         [10] 6855 	ld	hl, #___str_11
      002291 E5               [11] 6856 	push	hl
      002292 CDrA8r07         [17] 6857 	call	_DrawString
      002295 F1               [10] 6858 	pop	af
      002296 F1               [10] 6859 	pop	af
      002297 D1               [10] 6860 	pop	de
      002298 C1               [10] 6861 	pop	bc
                                   6862 ;src\/Title.h:71: while(TRUE) {
      002299                       6863 00120$:
                                   6864 ;src\/Title.h:72: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002299 DD 36 FD 00      [19] 6865 	ld	-3 (ix), #0
                                   6866 ;src\/Title.h:76: word counter = 0;
      00229D AF               [ 4] 6867 	xor	a, a
      00229E DD 77 FE         [19] 6868 	ld	-2 (ix), a
      0022A1 DD 77 FF         [19] 6869 	ld	-1 (ix), a
                                   6870 ;src\/Title.h:84: do {
      0022A4                       6871 00106$:
                                   6872 ;src\/Title.h:85: col_1 = GetRandomInInterval(31, 0b00011111);
      0022A4 C5               [11] 6873 	push	bc
      0022A5 D5               [11] 6874 	push	de
      0022A6 11 1F 1F         [10] 6875 	ld	de, #0x1f1f
      0022A9 D5               [11] 6876 	push	de
      0022AA CDrD9r00         [17] 6877 	call	_GetRandomInInterval
      0022AD F1               [10] 6878 	pop	af
                                   6879 ;src\/Title.h:86: line_1 = GetRandomInInterval(7, 0b00000111);
      0022AE DD 75 F8         [19] 6880 	ld	-8 (ix), l
      0022B1 11 07 07         [10] 6881 	ld	de, #0x0707
      0022B4 D5               [11] 6882 	push	de
      0022B5 CDrD9r00         [17] 6883 	call	_GetRandomInInterval
      0022B8 F1               [10] 6884 	pop	af
      0022B9 D1               [10] 6885 	pop	de
      0022BA C1               [10] 6886 	pop	bc
      0022BB DD 75 F9         [19] 6887 	ld	-7 (ix), l
                                   6888 ;src\/Title.h:89: value = RDVRM(MSX_modedata_screen2.name + col_1 + (line_1 * 32));
      0022BE 2A C7 F3         [16] 6889 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0022C1 DD 7E F8         [19] 6890 	ld	a, -8 (ix)
      0022C4 06 00            [ 7] 6891 	ld	b, #0x00
      0022C6 85               [ 4] 6892 	add	a, l
      0022C7 DD 77 FB         [19] 6893 	ld	-5 (ix), a
      0022CA 78               [ 4] 6894 	ld	a, b
      0022CB 8C               [ 4] 6895 	adc	a, h
      0022CC DD 77 FC         [19] 6896 	ld	-4 (ix), a
      0022CF DD 6E F9         [19] 6897 	ld	l, -7 (ix)
      0022D2 26 00            [ 7] 6898 	ld	h, #0x00
      0022D4 29               [11] 6899 	add	hl, hl
      0022D5 29               [11] 6900 	add	hl, hl
      0022D6 29               [11] 6901 	add	hl, hl
      0022D7 29               [11] 6902 	add	hl, hl
      0022D8 29               [11] 6903 	add	hl, hl
      0022D9 7D               [ 4] 6904 	ld	a, l
      0022DA DD 86 FB         [19] 6905 	add	a, -5 (ix)
      0022DD 6F               [ 4] 6906 	ld	l, a
      0022DE 7C               [ 4] 6907 	ld	a, h
      0022DF DD 8E FC         [19] 6908 	adc	a, -4 (ix)
      0022E2 67               [ 4] 6909 	ld	h, a
      0022E3 C5               [11] 6910 	push	bc
      0022E4 D5               [11] 6911 	push	de
      0022E5 CDr00r00         [17] 6912 	call	_RDVRM
      0022E8 D1               [10] 6913 	pop	de
      0022E9 C1               [10] 6914 	pop	bc
      0022EA DD 75 FA         [19] 6915 	ld	-6 (ix), l
                                   6916 ;src\/Title.h:91: if(counter++ > 1000) {
      0022ED DD 46 FE         [19] 6917 	ld	b, -2 (ix)
      0022F0 DD 6E FF         [19] 6918 	ld	l, -1 (ix)
      0022F3 DD 34 FE         [23] 6919 	inc	-2 (ix)
      0022F6 20 03            [12] 6920 	jr	NZ, 00192$
      0022F8 DD 34 FF         [23] 6921 	inc	-1 (ix)
      0022FB                       6922 00192$:
      0022FB 3E E8            [ 7] 6923 	ld	a, #0xe8
      0022FD B8               [ 4] 6924 	cp	a, b
      0022FE 3E 03            [ 7] 6925 	ld	a, #0x03
      002300 9D               [ 4] 6926 	sbc	a, l
      002301 30 0F            [12] 6927 	jr	NC, 00107$
                                   6928 ;src\/Title.h:92: colorIndex++;
      002303 0C               [ 4] 6929 	inc	c
                                   6930 ;src\/Title.h:93: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002304 79               [ 4] 6931 	ld	a, c
      002305 D6 03            [ 7] 6932 	sub	a, #0x03
      002307 38 02            [12] 6933 	jr	C, 00102$
      002309 0E 00            [ 7] 6934 	ld	c, #0x00
      00230B                       6935 00102$:
                                   6936 ;src\/Title.h:95: counter = 0;
      00230B AF               [ 4] 6937 	xor	a, a
      00230C DD 77 FE         [19] 6938 	ld	-2 (ix), a
      00230F DD 77 FF         [19] 6939 	ld	-1 (ix), a
      002312                       6940 00107$:
                                   6941 ;src\/Title.h:98: while (value == EMPTY || value == colors[colorIndex + 1]);
      002312 DD 7E FA         [19] 6942 	ld	a, -6 (ix)
      002315 B7               [ 4] 6943 	or	a, a
      002316 28 8C            [12] 6944 	jr	Z, 00106$
      002318 79               [ 4] 6945 	ld	a, c
      002319 3C               [ 4] 6946 	inc	a
      00231A F5               [11] 6947 	push	af
      00231B 17               [ 4] 6948 	rla
      00231C 9F               [ 4] 6949 	sbc	a, a
      00231D 47               [ 4] 6950 	ld	b, a
      00231E F1               [10] 6951 	pop	af
      00231F DD 86 F6         [19] 6952 	add	a, -10 (ix)
      002322 DD 77 FB         [19] 6953 	ld	-5 (ix), a
      002325 78               [ 4] 6954 	ld	a, b
      002326 DD 8E F7         [19] 6955 	adc	a, -9 (ix)
      002329 DD 77 FC         [19] 6956 	ld	-4 (ix), a
      00232C DD 6E FB         [19] 6957 	ld	l, -5 (ix)
      00232F DD 66 FC         [19] 6958 	ld	h, -4 (ix)
      002332 46               [ 7] 6959 	ld	b, (hl)
      002333 DD 7E FA         [19] 6960 	ld	a, -6 (ix)
      002336 90               [ 4] 6961 	sub	a, b
      002337 CArA4r22         [10] 6962 	jp	Z,00106$
                                   6963 ;src\/Title.h:112: rnd = GetRandomInInterval(7, 0b00000111);
      00233A C5               [11] 6964 	push	bc
      00233B D5               [11] 6965 	push	de
      00233C 11 07 07         [10] 6966 	ld	de, #0x0707
      00233F D5               [11] 6967 	push	de
      002340 CDrD9r00         [17] 6968 	call	_GetRandomInInterval
      002343 F1               [10] 6969 	pop	af
      002344 D1               [10] 6970 	pop	de
      002345 C1               [10] 6971 	pop	bc
                                   6972 ;src\/Title.h:114: for(byte i=0; i < 10 + 0; i++) {
      002346 06 00            [ 7] 6973 	ld	b, #0x00
      002348                       6974 00123$:
      002348 78               [ 4] 6975 	ld	a, b
      002349 D6 0A            [ 7] 6976 	sub	a, #0x0a
      00234B 30 79            [12] 6977 	jr	NC, 00118$
                                   6978 ;src\/Title.h:116: word lastJiffy = JIFFY;
      00234D 2A 9E FC         [16] 6979 	ld	hl, (_JIFFY)
      002350 DD 75 FE         [19] 6980 	ld	-2 (ix), l
      002353 DD 74 FF         [19] 6981 	ld	-1 (ix), h
                                   6982 ;src\/Title.h:117: while (JIFFY == lastJiffy) {
      002356                       6983 00109$:
      002356 FD 21 9E FC      [14] 6984 	ld	iy, #_JIFFY
      00235A FD 7E 00         [19] 6985 	ld	a, 0 (iy)
      00235D DD 96 FE         [19] 6986 	sub	a, -2 (ix)
      002360 20 08            [12] 6987 	jr	NZ, 00194$
      002362 FD 7E 01         [19] 6988 	ld	a, 1 (iy)
      002365 DD 96 FF         [19] 6989 	sub	a, -1 (ix)
      002368 28 EC            [12] 6990 	jr	Z, 00109$
      00236A                       6991 00194$:
                                   6992 ;src\/Title.h:122: SetBlock(col_1, line_1, blocks[index]);
      00236A DD 6E FD         [19] 6993 	ld	l, -3 (ix)
      00236D 26 00            [ 7] 6994 	ld	h, #0x00
      00236F 19               [11] 6995 	add	hl, de
      002370 7E               [ 7] 6996 	ld	a, (hl)
      002371 C5               [11] 6997 	push	bc
      002372 D5               [11] 6998 	push	de
      002373 F5               [11] 6999 	push	af
      002374 33               [ 6] 7000 	inc	sp
      002375 DD 66 F9         [19] 7001 	ld	h, -7 (ix)
      002378 DD 6E F8         [19] 7002 	ld	l, -8 (ix)
      00237B E5               [11] 7003 	push	hl
      00237C CDrC1r21         [17] 7004 	call	_SetBlock
      00237F F1               [10] 7005 	pop	af
      002380 33               [ 6] 7006 	inc	sp
      002381 D1               [10] 7007 	pop	de
      002382 C1               [10] 7008 	pop	bc
                                   7009 ;src\/Title.h:126: if(index++ >= sizeof(blocks)) index = 0;
      002383 DD 7E FD         [19] 7010 	ld	a, -3 (ix)
      002386 DD 34 FD         [23] 7011 	inc	-3 (ix)
      002389 D6 07            [ 7] 7012 	sub	a, #0x07
      00238B 38 04            [12] 7013 	jr	C, 00113$
      00238D DD 36 FD 00      [19] 7014 	ld	-3 (ix), #0
      002391                       7015 00113$:
                                   7016 ;src\/Title.h:139: spaceBar = GTTRIG(TRIG_Spacebar);
      002391 C5               [11] 7017 	push	bc
      002392 D5               [11] 7018 	push	de
      002393 2E 00            [ 7] 7019 	ld	l, #0x00
      002395 CDr00r00         [17] 7020 	call	_GTTRIG
                                   7021 ;src\/Title.h:140: btn1 = GTTRIG(TRIG_Joy1_A);
      002398 DD 75 FF         [19] 7022 	ld	-1 (ix), l
      00239B 2E 01            [ 7] 7023 	ld	l, #0x01
      00239D CDr00r00         [17] 7024 	call	_GTTRIG
      0023A0 D1               [10] 7025 	pop	de
      0023A1 C1               [10] 7026 	pop	bc
                                   7027 ;src\/Title.h:141: btn2 = GTTRIG(TRIG_Joy1_B);
      0023A2 E5               [11] 7028 	push	hl
      0023A3 C5               [11] 7029 	push	bc
      0023A4 D5               [11] 7030 	push	de
      0023A5 2E 03            [ 7] 7031 	ld	l, #0x03
      0023A7 CDr00r00         [17] 7032 	call	_GTTRIG
      0023AA 7D               [ 4] 7033 	ld	a, l
      0023AB D1               [10] 7034 	pop	de
      0023AC C1               [10] 7035 	pop	bc
      0023AD E1               [10] 7036 	pop	hl
      0023AE 67               [ 4] 7037 	ld	h, a
                                   7038 ;src\/Title.h:143: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      0023AF DD 7E FF         [19] 7039 	ld	a, -1 (ix)
      0023B2 3C               [ 4] 7040 	inc	a
      0023B3 28 06            [12] 7041 	jr	Z, 00114$
      0023B5 2C               [ 4] 7042 	inc	l
      0023B6 28 03            [12] 7043 	jr	Z, 00114$
      0023B8 24               [ 4] 7044 	inc	h
      0023B9 20 08            [12] 7045 	jr	NZ, 00124$
      0023BB                       7046 00114$:
                                   7047 ;src\/Title.h:144: rndSeed = JIFFY;
      0023BB 3A 9E FC         [13] 7048 	ld	a,(#_JIFFY + 0)
      0023BE 32r08r00         [13] 7049 	ld	(#_rndSeed), a
                                   7050 ;src\/Title.h:145: return;
      0023C1 18 1F            [12] 7051 	jr	00125$
      0023C3                       7052 00124$:
                                   7053 ;src\/Title.h:114: for(byte i=0; i < 10 + 0; i++) {
      0023C3 04               [ 4] 7054 	inc	b
      0023C4 18 82            [12] 7055 	jr	00123$
      0023C6                       7056 00118$:
                                   7057 ;src\/Title.h:149: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      0023C6 DD 6E FB         [19] 7058 	ld	l, -5 (ix)
      0023C9 DD 66 FC         [19] 7059 	ld	h, -4 (ix)
      0023CC 7E               [ 7] 7060 	ld	a, (hl)
      0023CD C5               [11] 7061 	push	bc
      0023CE D5               [11] 7062 	push	de
      0023CF F5               [11] 7063 	push	af
      0023D0 33               [ 6] 7064 	inc	sp
      0023D1 DD 66 F9         [19] 7065 	ld	h, -7 (ix)
      0023D4 DD 6E F8         [19] 7066 	ld	l, -8 (ix)
      0023D7 E5               [11] 7067 	push	hl
      0023D8 CDrC1r21         [17] 7068 	call	_SetBlock
      0023DB F1               [10] 7069 	pop	af
      0023DC 33               [ 6] 7070 	inc	sp
      0023DD D1               [10] 7071 	pop	de
      0023DE C1               [10] 7072 	pop	bc
      0023DF C3r99r22         [10] 7073 	jp	00120$
      0023E2                       7074 00125$:
                                   7075 ;src\/Title.h:152: }
      0023E2 DD F9            [10] 7076 	ld	sp, ix
      0023E4 DD E1            [14] 7077 	pop	ix
      0023E6 C9               [10] 7078 	ret
      0023E7                       7079 _TitleScreen_title_65536_275:
      0023E7 00                    7080 	.db #0x00	; 0
      0023E8 00                    7081 	.db #0x00	; 0
      0023E9 00                    7082 	.db #0x00	; 0
      0023EA 00                    7083 	.db #0x00	; 0
      0023EB 8E                    7084 	.db #0x8e	; 142
      0023EC 8E                    7085 	.db #0x8e	; 142
      0023ED 8E                    7086 	.db #0x8e	; 142
      0023EE 8E                    7087 	.db #0x8e	; 142
      0023EF 00                    7088 	.db #0x00	; 0
      0023F0 8E                    7089 	.db #0x8e	; 142
      0023F1 8E                    7090 	.db #0x8e	; 142
      0023F2 8E                    7091 	.db #0x8e	; 142
      0023F3 8E                    7092 	.db #0x8e	; 142
      0023F4 8E                    7093 	.db #0x8e	; 142
      0023F5 8E                    7094 	.db #0x8e	; 142
      0023F6 00                    7095 	.db #0x00	; 0
      0023F7 00                    7096 	.db #0x00	; 0
      0023F8 8E                    7097 	.db #0x8e	; 142
      0023F9 8E                    7098 	.db #0x8e	; 142
      0023FA 00                    7099 	.db #0x00	; 0
      0023FB 00                    7100 	.db #0x00	; 0
      0023FC 00                    7101 	.db #0x00	; 0
      0023FD 8E                    7102 	.db #0x8e	; 142
      0023FE 8E                    7103 	.db #0x8e	; 142
      0023FF 00                    7104 	.db #0x00	; 0
      002400 00                    7105 	.db #0x00	; 0
      002401 00                    7106 	.db #0x00	; 0
      002402 00                    7107 	.db #0x00	; 0
      002403 8E                    7108 	.db #0x8e	; 142
      002404 8E                    7109 	.db #0x8e	; 142
      002405 8E                    7110 	.db #0x8e	; 142
      002406 8E                    7111 	.db #0x8e	; 142
      002407 00                    7112 	.db #0x00	; 0
      002408 00                    7113 	.db #0x00	; 0
      002409 00                    7114 	.db #0x00	; 0
      00240A 8E                    7115 	.db #0x8e	; 142
      00240B 8E                    7116 	.db #0x8e	; 142
      00240C 8E                    7117 	.db #0x8e	; 142
      00240D 8E                    7118 	.db #0x8e	; 142
      00240E 8E                    7119 	.db #0x8e	; 142
      00240F 00                    7120 	.db #0x00	; 0
      002410 8E                    7121 	.db #0x8e	; 142
      002411 8E                    7122 	.db #0x8e	; 142
      002412 00                    7123 	.db #0x00	; 0
      002413 00                    7124 	.db #0x00	; 0
      002414 00                    7125 	.db #0x00	; 0
      002415 8E                    7126 	.db #0x8e	; 142
      002416 8E                    7127 	.db #0x8e	; 142
      002417 00                    7128 	.db #0x00	; 0
      002418 00                    7129 	.db #0x00	; 0
      002419 8E                    7130 	.db #0x8e	; 142
      00241A 8E                    7131 	.db #0x8e	; 142
      00241B 00                    7132 	.db #0x00	; 0
      00241C 00                    7133 	.db #0x00	; 0
      00241D 8E                    7134 	.db #0x8e	; 142
      00241E 8E                    7135 	.db #0x8e	; 142
      00241F 00                    7136 	.db #0x00	; 0
      002420 00                    7137 	.db #0x00	; 0
      002421 00                    7138 	.db #0x00	; 0
      002422 8E                    7139 	.db #0x8e	; 142
      002423 8E                    7140 	.db #0x8e	; 142
      002424 8E                    7141 	.db #0x8e	; 142
      002425 8E                    7142 	.db #0x8e	; 142
      002426 8E                    7143 	.db #0x8e	; 142
      002427 00                    7144 	.db #0x00	; 0
      002428 00                    7145 	.db #0x00	; 0
      002429 8E                    7146 	.db #0x8e	; 142
      00242A 8E                    7147 	.db #0x8e	; 142
      00242B 8E                    7148 	.db #0x8e	; 142
      00242C 00                    7149 	.db #0x00	; 0
      00242D 8E                    7150 	.db #0x8e	; 142
      00242E 8E                    7151 	.db #0x8e	; 142
      00242F 00                    7152 	.db #0x00	; 0
      002430 8E                    7153 	.db #0x8e	; 142
      002431 8E                    7154 	.db #0x8e	; 142
      002432 00                    7155 	.db #0x00	; 0
      002433 00                    7156 	.db #0x00	; 0
      002434 00                    7157 	.db #0x00	; 0
      002435 8E                    7158 	.db #0x8e	; 142
      002436 8E                    7159 	.db #0x8e	; 142
      002437 00                    7160 	.db #0x00	; 0
      002438 00                    7161 	.db #0x00	; 0
      002439 00                    7162 	.db #0x00	; 0
      00243A 8E                    7163 	.db #0x8e	; 142
      00243B 8E                    7164 	.db #0x8e	; 142
      00243C 00                    7165 	.db #0x00	; 0
      00243D 8E                    7166 	.db #0x8e	; 142
      00243E 8E                    7167 	.db #0x8e	; 142
      00243F 00                    7168 	.db #0x00	; 0
      002440 00                    7169 	.db #0x00	; 0
      002441 8E                    7170 	.db #0x8e	; 142
      002442 8E                    7171 	.db #0x8e	; 142
      002443 8E                    7172 	.db #0x8e	; 142
      002444 00                    7173 	.db #0x00	; 0
      002445 8E                    7174 	.db #0x8e	; 142
      002446 8E                    7175 	.db #0x8e	; 142
      002447 00                    7176 	.db #0x00	; 0
      002448 8E                    7177 	.db #0x8e	; 142
      002449 8E                    7178 	.db #0x8e	; 142
      00244A 8E                    7179 	.db #0x8e	; 142
      00244B 00                    7180 	.db #0x00	; 0
      00244C 00                    7181 	.db #0x00	; 0
      00244D 8E                    7182 	.db #0x8e	; 142
      00244E 8E                    7183 	.db #0x8e	; 142
      00244F 00                    7184 	.db #0x00	; 0
      002450 8E                    7185 	.db #0x8e	; 142
      002451 8E                    7186 	.db #0x8e	; 142
      002452 00                    7187 	.db #0x00	; 0
      002453 00                    7188 	.db #0x00	; 0
      002454 8E                    7189 	.db #0x8e	; 142
      002455 8E                    7190 	.db #0x8e	; 142
      002456 00                    7191 	.db #0x00	; 0
      002457 00                    7192 	.db #0x00	; 0
      002458 00                    7193 	.db #0x00	; 0
      002459 00                    7194 	.db #0x00	; 0
      00245A 00                    7195 	.db #0x00	; 0
      00245B 8E                    7196 	.db #0x8e	; 142
      00245C 8E                    7197 	.db #0x8e	; 142
      00245D 8E                    7198 	.db #0x8e	; 142
      00245E 00                    7199 	.db #0x00	; 0
      00245F 00                    7200 	.db #0x00	; 0
      002460 8E                    7201 	.db #0x8e	; 142
      002461 8E                    7202 	.db #0x8e	; 142
      002462 8E                    7203 	.db #0x8e	; 142
      002463 00                    7204 	.db #0x00	; 0
      002464 00                    7205 	.db #0x00	; 0
      002465 8E                    7206 	.db #0x8e	; 142
      002466 8E                    7207 	.db #0x8e	; 142
      002467 00                    7208 	.db #0x00	; 0
      002468 8E                    7209 	.db #0x8e	; 142
      002469 8E                    7210 	.db #0x8e	; 142
      00246A 00                    7211 	.db #0x00	; 0
      00246B 00                    7212 	.db #0x00	; 0
      00246C 00                    7213 	.db #0x00	; 0
      00246D 8E                    7214 	.db #0x8e	; 142
      00246E 8E                    7215 	.db #0x8e	; 142
      00246F 00                    7216 	.db #0x00	; 0
      002470 8E                    7217 	.db #0x8e	; 142
      002471 8E                    7218 	.db #0x8e	; 142
      002472 8E                    7219 	.db #0x8e	; 142
      002473 8E                    7220 	.db #0x8e	; 142
      002474 8E                    7221 	.db #0x8e	; 142
      002475 00                    7222 	.db #0x00	; 0
      002476 00                    7223 	.db #0x00	; 0
      002477 00                    7224 	.db #0x00	; 0
      002478 00                    7225 	.db #0x00	; 0
      002479 00                    7226 	.db #0x00	; 0
      00247A 00                    7227 	.db #0x00	; 0
      00247B 8E                    7228 	.db #0x8e	; 142
      00247C 8E                    7229 	.db #0x8e	; 142
      00247D 00                    7230 	.db #0x00	; 0
      00247E 00                    7231 	.db #0x00	; 0
      00247F 00                    7232 	.db #0x00	; 0
      002480 8E                    7233 	.db #0x8e	; 142
      002481 8E                    7234 	.db #0x8e	; 142
      002482 00                    7235 	.db #0x00	; 0
      002483 00                    7236 	.db #0x00	; 0
      002484 00                    7237 	.db #0x00	; 0
      002485 8E                    7238 	.db #0x8e	; 142
      002486 8E                    7239 	.db #0x8e	; 142
      002487 00                    7240 	.db #0x00	; 0
      002488 8E                    7241 	.db #0x8e	; 142
      002489 8E                    7242 	.db #0x8e	; 142
      00248A 00                    7243 	.db #0x00	; 0
      00248B 00                    7244 	.db #0x00	; 0
      00248C 00                    7245 	.db #0x00	; 0
      00248D 8E                    7246 	.db #0x8e	; 142
      00248E 8E                    7247 	.db #0x8e	; 142
      00248F 00                    7248 	.db #0x00	; 0
      002490 8E                    7249 	.db #0x8e	; 142
      002491 8E                    7250 	.db #0x8e	; 142
      002492 8E                    7251 	.db #0x8e	; 142
      002493 8E                    7252 	.db #0x8e	; 142
      002494 8E                    7253 	.db #0x8e	; 142
      002495 00                    7254 	.db #0x00	; 0
      002496 00                    7255 	.db #0x00	; 0
      002497 00                    7256 	.db #0x00	; 0
      002498 00                    7257 	.db #0x00	; 0
      002499 00                    7258 	.db #0x00	; 0
      00249A 00                    7259 	.db #0x00	; 0
      00249B 8E                    7260 	.db #0x8e	; 142
      00249C 8E                    7261 	.db #0x8e	; 142
      00249D 00                    7262 	.db #0x00	; 0
      00249E 00                    7263 	.db #0x00	; 0
      00249F 00                    7264 	.db #0x00	; 0
      0024A0 8E                    7265 	.db #0x8e	; 142
      0024A1 8E                    7266 	.db #0x8e	; 142
      0024A2 00                    7267 	.db #0x00	; 0
      0024A3 00                    7268 	.db #0x00	; 0
      0024A4 00                    7269 	.db #0x00	; 0
      0024A5 8E                    7270 	.db #0x8e	; 142
      0024A6 8E                    7271 	.db #0x8e	; 142
      0024A7 00                    7272 	.db #0x00	; 0
      0024A8 8E                    7273 	.db #0x8e	; 142
      0024A9 8E                    7274 	.db #0x8e	; 142
      0024AA 8E                    7275 	.db #0x8e	; 142
      0024AB 8E                    7276 	.db #0x8e	; 142
      0024AC 8E                    7277 	.db #0x8e	; 142
      0024AD 8E                    7278 	.db #0x8e	; 142
      0024AE 8E                    7279 	.db #0x8e	; 142
      0024AF 00                    7280 	.db #0x00	; 0
      0024B0 8E                    7281 	.db #0x8e	; 142
      0024B1 8E                    7282 	.db #0x8e	; 142
      0024B2 00                    7283 	.db #0x00	; 0
      0024B3 00                    7284 	.db #0x00	; 0
      0024B4 00                    7285 	.db #0x00	; 0
      0024B5 8E                    7286 	.db #0x8e	; 142
      0024B6 00                    7287 	.db #0x00	; 0
      0024B7 00                    7288 	.db #0x00	; 0
      0024B8 00                    7289 	.db #0x00	; 0
      0024B9 00                    7290 	.db #0x00	; 0
      0024BA 00                    7291 	.db #0x00	; 0
      0024BB 8E                    7292 	.db #0x8e	; 142
      0024BC 8E                    7293 	.db #0x8e	; 142
      0024BD 00                    7294 	.db #0x00	; 0
      0024BE 00                    7295 	.db #0x00	; 0
      0024BF 00                    7296 	.db #0x00	; 0
      0024C0 8E                    7297 	.db #0x8e	; 142
      0024C1 8E                    7298 	.db #0x8e	; 142
      0024C2 8E                    7299 	.db #0x8e	; 142
      0024C3 8E                    7300 	.db #0x8e	; 142
      0024C4 8E                    7301 	.db #0x8e	; 142
      0024C5 8E                    7302 	.db #0x8e	; 142
      0024C6 8E                    7303 	.db #0x8e	; 142
      0024C7 00                    7304 	.db #0x00	; 0
      0024C8 8E                    7305 	.db #0x8e	; 142
      0024C9 8E                    7306 	.db #0x8e	; 142
      0024CA 00                    7307 	.db #0x00	; 0
      0024CB 00                    7308 	.db #0x00	; 0
      0024CC 00                    7309 	.db #0x00	; 0
      0024CD 8E                    7310 	.db #0x8e	; 142
      0024CE 8E                    7311 	.db #0x8e	; 142
      0024CF 00                    7312 	.db #0x00	; 0
      0024D0 8E                    7313 	.db #0x8e	; 142
      0024D1 8E                    7314 	.db #0x8e	; 142
      0024D2 00                    7315 	.db #0x00	; 0
      0024D3 00                    7316 	.db #0x00	; 0
      0024D4 00                    7317 	.db #0x00	; 0
      0024D5 8E                    7318 	.db #0x8e	; 142
      0024D6 00                    7319 	.db #0x00	; 0
      0024D7 00                    7320 	.db #0x00	; 0
      0024D8 00                    7321 	.db #0x00	; 0
      0024D9 00                    7322 	.db #0x00	; 0
      0024DA 00                    7323 	.db #0x00	; 0
      0024DB 8E                    7324 	.db #0x8e	; 142
      0024DC 8E                    7325 	.db #0x8e	; 142
      0024DD 00                    7326 	.db #0x00	; 0
      0024DE 00                    7327 	.db #0x00	; 0
      0024DF 00                    7328 	.db #0x00	; 0
      0024E0 8E                    7329 	.db #0x8e	; 142
      0024E1 8E                    7330 	.db #0x8e	; 142
      0024E2 00                    7331 	.db #0x00	; 0
      0024E3 00                    7332 	.db #0x00	; 0
      0024E4 00                    7333 	.db #0x00	; 0
      0024E5 8E                    7334 	.db #0x8e	; 142
      0024E6 8E                    7335 	.db #0x8e	; 142
      0024E7 00                    7336 	.db #0x00	; 0
      0024E8 00                    7337 	.db #0x00	; 0
      0024E9 00                    7338 	.db #0x00	; 0
      0024EA 00                    7339 	.db #0x00	; 0
      0024EB 00                    7340 	.db #0x00	; 0
      0024EC 00                    7341 	.db #0x00	; 0
      0024ED 00                    7342 	.db #0x00	; 0
      0024EE 00                    7343 	.db #0x00	; 0
      0024EF 00                    7344 	.db #0x00	; 0
      0024F0 00                    7345 	.db #0x00	; 0
      0024F1 00                    7346 	.db #0x00	; 0
      0024F2 00                    7347 	.db #0x00	; 0
      0024F3 00                    7348 	.db #0x00	; 0
      0024F4 00                    7349 	.db #0x00	; 0
      0024F5 00                    7350 	.db #0x00	; 0
      0024F6 00                    7351 	.db #0x00	; 0
      0024F7 00                    7352 	.db #0x00	; 0
      0024F8 00                    7353 	.db #0x00	; 0
      0024F9 00                    7354 	.db #0x00	; 0
      0024FA 00                    7355 	.db #0x00	; 0
      0024FB 00                    7356 	.db #0x00	; 0
      0024FC 00                    7357 	.db #0x00	; 0
      0024FD 00                    7358 	.db #0x00	; 0
      0024FE 00                    7359 	.db #0x00	; 0
      0024FF 00                    7360 	.db #0x00	; 0
      002500 00                    7361 	.db #0x00	; 0
      002501 00                    7362 	.db #0x00	; 0
      002502 00                    7363 	.db #0x00	; 0
      002503 00                    7364 	.db #0x00	; 0
      002504 00                    7365 	.db #0x00	; 0
      002505 00                    7366 	.db #0x00	; 0
      002506 00                    7367 	.db #0x00	; 0
      002507 00                    7368 	.db #0x00	; 0
      002508 00                    7369 	.db #0x00	; 0
      002509 00                    7370 	.db #0x00	; 0
      00250A 00                    7371 	.db #0x00	; 0
      00250B 00                    7372 	.db #0x00	; 0
      00250C 00                    7373 	.db #0x00	; 0
      00250D 00                    7374 	.db #0x00	; 0
      00250E 00                    7375 	.db #0x00	; 0
      00250F 00                    7376 	.db #0x00	; 0
      002510 00                    7377 	.db #0x00	; 0
      002511 00                    7378 	.db #0x00	; 0
      002512 00                    7379 	.db #0x00	; 0
      002513 00                    7380 	.db #0x00	; 0
      002514 00                    7381 	.db #0x00	; 0
      002515 00                    7382 	.db #0x00	; 0
      002516 00                    7383 	.db #0x00	; 0
      002517 00                    7384 	.db #0x00	; 0
      002518 00                    7385 	.db #0x00	; 0
      002519 00                    7386 	.db #0x00	; 0
      00251A 00                    7387 	.db #0x00	; 0
      00251B 00                    7388 	.db #0x00	; 0
      00251C 00                    7389 	.db #0x00	; 0
      00251D 00                    7390 	.db #0x00	; 0
      00251E 00                    7391 	.db #0x00	; 0
      00251F 00                    7392 	.db #0x00	; 0
      002520 00                    7393 	.db #0x00	; 0
      002521 00                    7394 	.db #0x00	; 0
      002522 00                    7395 	.db #0x00	; 0
      002523 00                    7396 	.db #0x00	; 0
      002524 00                    7397 	.db #0x00	; 0
      002525 00                    7398 	.db #0x00	; 0
      002526 00                    7399 	.db #0x00	; 0
      002527 00                    7400 	.db #0x00	; 0
      002528 00                    7401 	.db #0x00	; 0
      002529 00                    7402 	.db #0x00	; 0
      00252A 00                    7403 	.db #0x00	; 0
      00252B 00                    7404 	.db #0x00	; 0
      00252C 00                    7405 	.db #0x00	; 0
      00252D 00                    7406 	.db #0x00	; 0
      00252E 00                    7407 	.db #0x00	; 0
      00252F 00                    7408 	.db #0x00	; 0
      002530 00                    7409 	.db #0x00	; 0
      002531 00                    7410 	.db #0x00	; 0
      002532 00                    7411 	.db #0x00	; 0
      002533 00                    7412 	.db #0x00	; 0
      002534 00                    7413 	.db #0x00	; 0
      002535 00                    7414 	.db #0x00	; 0
      002536 00                    7415 	.db #0x00	; 0
      002537 00                    7416 	.db #0x00	; 0
      002538 00                    7417 	.db #0x00	; 0
      002539 00                    7418 	.db #0x00	; 0
      00253A 00                    7419 	.db #0x00	; 0
      00253B 00                    7420 	.db #0x00	; 0
      00253C 00                    7421 	.db #0x00	; 0
      00253D 00                    7422 	.db #0x00	; 0
      00253E 00                    7423 	.db #0x00	; 0
      00253F 00                    7424 	.db #0x00	; 0
      002540 00                    7425 	.db #0x00	; 0
      002541 00                    7426 	.db #0x00	; 0
      002542 00                    7427 	.db #0x00	; 0
      002543 00                    7428 	.db #0x00	; 0
      002544 00                    7429 	.db #0x00	; 0
      002545 00                    7430 	.db #0x00	; 0
      002546 00                    7431 	.db #0x00	; 0
      002547 00                    7432 	.db #0x00	; 0
      002548 00                    7433 	.db #0x00	; 0
      002549 00                    7434 	.db #0x00	; 0
      00254A 00                    7435 	.db #0x00	; 0
      00254B 00                    7436 	.db #0x00	; 0
      00254C 00                    7437 	.db #0x00	; 0
      00254D 00                    7438 	.db #0x00	; 0
      00254E 00                    7439 	.db #0x00	; 0
      00254F 00                    7440 	.db #0x00	; 0
      002550 00                    7441 	.db #0x00	; 0
      002551 00                    7442 	.db #0x00	; 0
      002552 00                    7443 	.db #0x00	; 0
      002553 00                    7444 	.db #0x00	; 0
      002554 00                    7445 	.db #0x00	; 0
      002555 00                    7446 	.db #0x00	; 0
      002556 00                    7447 	.db #0x00	; 0
      002557 00                    7448 	.db #0x00	; 0
      002558 00                    7449 	.db #0x00	; 0
      002559 00                    7450 	.db #0x00	; 0
      00255A 00                    7451 	.db #0x00	; 0
      00255B 00                    7452 	.db #0x00	; 0
      00255C 00                    7453 	.db #0x00	; 0
      00255D 00                    7454 	.db #0x00	; 0
      00255E 00                    7455 	.db #0x00	; 0
      00255F 00                    7456 	.db #0x00	; 0
      002560 00                    7457 	.db #0x00	; 0
      002561 00                    7458 	.db #0x00	; 0
      002562 00                    7459 	.db #0x00	; 0
      002563 00                    7460 	.db #0x00	; 0
      002564 00                    7461 	.db #0x00	; 0
      002565 00                    7462 	.db #0x00	; 0
      002566 00                    7463 	.db #0x00	; 0
      002567 00                    7464 	.db #0x00	; 0
      002568 00                    7465 	.db #0x00	; 0
      002569 00                    7466 	.db #0x00	; 0
      00256A 00                    7467 	.db #0x00	; 0
      00256B 00                    7468 	.db #0x00	; 0
      00256C 00                    7469 	.db #0x00	; 0
      00256D 00                    7470 	.db #0x00	; 0
      00256E 00                    7471 	.db #0x00	; 0
      00256F 00                    7472 	.db #0x00	; 0
      002570 00                    7473 	.db #0x00	; 0
      002571 00                    7474 	.db #0x00	; 0
      002572 00                    7475 	.db #0x00	; 0
      002573 00                    7476 	.db #0x00	; 0
      002574 00                    7477 	.db #0x00	; 0
      002575 00                    7478 	.db #0x00	; 0
      002576 00                    7479 	.db #0x00	; 0
      002577 00                    7480 	.db #0x00	; 0
      002578 00                    7481 	.db #0x00	; 0
      002579 00                    7482 	.db #0x00	; 0
      00257A 00                    7483 	.db #0x00	; 0
      00257B 00                    7484 	.db #0x00	; 0
      00257C 00                    7485 	.db #0x00	; 0
      00257D 00                    7486 	.db #0x00	; 0
      00257E 00                    7487 	.db #0x00	; 0
      00257F 00                    7488 	.db #0x00	; 0
      002580 00                    7489 	.db #0x00	; 0
      002581 00                    7490 	.db #0x00	; 0
      002582 00                    7491 	.db #0x00	; 0
      002583 00                    7492 	.db #0x00	; 0
      002584 00                    7493 	.db #0x00	; 0
      002585 00                    7494 	.db #0x00	; 0
      002586 00                    7495 	.db #0x00	; 0
      002587 00                    7496 	.db #0x00	; 0
      002588 00                    7497 	.db #0x00	; 0
      002589 00                    7498 	.db #0x00	; 0
      00258A 00                    7499 	.db #0x00	; 0
      00258B 00                    7500 	.db #0x00	; 0
      00258C 00                    7501 	.db #0x00	; 0
      00258D 00                    7502 	.db #0x00	; 0
      00258E 00                    7503 	.db #0x00	; 0
      00258F 00                    7504 	.db #0x00	; 0
      002590 00                    7505 	.db #0x00	; 0
      002591 00                    7506 	.db #0x00	; 0
      002592 00                    7507 	.db #0x00	; 0
      002593 00                    7508 	.db #0x00	; 0
      002594 00                    7509 	.db #0x00	; 0
      002595 00                    7510 	.db #0x00	; 0
      002596 00                    7511 	.db #0x00	; 0
      002597 00                    7512 	.db #0x00	; 0
      002598 00                    7513 	.db #0x00	; 0
      002599 00                    7514 	.db #0x00	; 0
      00259A 00                    7515 	.db #0x00	; 0
      00259B 00                    7516 	.db #0x00	; 0
      00259C 00                    7517 	.db #0x00	; 0
      00259D 00                    7518 	.db #0x00	; 0
      00259E 00                    7519 	.db #0x00	; 0
      00259F 00                    7520 	.db #0x00	; 0
      0025A0 00                    7521 	.db #0x00	; 0
      0025A1 00                    7522 	.db #0x00	; 0
      0025A2 00                    7523 	.db #0x00	; 0
      0025A3 00                    7524 	.db #0x00	; 0
      0025A4 00                    7525 	.db #0x00	; 0
      0025A5 00                    7526 	.db #0x00	; 0
      0025A6 00                    7527 	.db #0x00	; 0
      0025A7 00                    7528 	.db #0x00	; 0
      0025A8 00                    7529 	.db #0x00	; 0
      0025A9 00                    7530 	.db #0x00	; 0
      0025AA 00                    7531 	.db #0x00	; 0
      0025AB 00                    7532 	.db #0x00	; 0
      0025AC 00                    7533 	.db #0x00	; 0
      0025AD 00                    7534 	.db #0x00	; 0
      0025AE 00                    7535 	.db #0x00	; 0
      0025AF 00                    7536 	.db #0x00	; 0
      0025B0 00                    7537 	.db #0x00	; 0
      0025B1 00                    7538 	.db #0x00	; 0
      0025B2 00                    7539 	.db #0x00	; 0
      0025B3 00                    7540 	.db #0x00	; 0
      0025B4 00                    7541 	.db #0x00	; 0
      0025B5 00                    7542 	.db #0x00	; 0
      0025B6 00                    7543 	.db #0x00	; 0
      0025B7 00                    7544 	.db #0x00	; 0
      0025B8 00                    7545 	.db #0x00	; 0
      0025B9 00                    7546 	.db #0x00	; 0
      0025BA 00                    7547 	.db #0x00	; 0
      0025BB 00                    7548 	.db #0x00	; 0
      0025BC 00                    7549 	.db #0x00	; 0
      0025BD 00                    7550 	.db #0x00	; 0
      0025BE 00                    7551 	.db #0x00	; 0
      0025BF 00                    7552 	.db #0x00	; 0
      0025C0 00                    7553 	.db #0x00	; 0
      0025C1 00                    7554 	.db #0x00	; 0
      0025C2 00                    7555 	.db #0x00	; 0
      0025C3 00                    7556 	.db #0x00	; 0
      0025C4 00                    7557 	.db #0x00	; 0
      0025C5 00                    7558 	.db #0x00	; 0
      0025C6 00                    7559 	.db #0x00	; 0
      0025C7 00                    7560 	.db #0x00	; 0
      0025C8 00                    7561 	.db #0x00	; 0
      0025C9 00                    7562 	.db #0x00	; 0
      0025CA 00                    7563 	.db #0x00	; 0
      0025CB 00                    7564 	.db #0x00	; 0
      0025CC 00                    7565 	.db #0x00	; 0
      0025CD 00                    7566 	.db #0x00	; 0
      0025CE 00                    7567 	.db #0x00	; 0
      0025CF 00                    7568 	.db #0x00	; 0
      0025D0 00                    7569 	.db #0x00	; 0
      0025D1 00                    7570 	.db #0x00	; 0
      0025D2 00                    7571 	.db #0x00	; 0
      0025D3 00                    7572 	.db #0x00	; 0
      0025D4 00                    7573 	.db #0x00	; 0
      0025D5 00                    7574 	.db #0x00	; 0
      0025D6 00                    7575 	.db #0x00	; 0
      0025D7 00                    7576 	.db #0x00	; 0
      0025D8 00                    7577 	.db #0x00	; 0
      0025D9 00                    7578 	.db #0x00	; 0
      0025DA 00                    7579 	.db #0x00	; 0
      0025DB 00                    7580 	.db #0x00	; 0
      0025DC 00                    7581 	.db #0x00	; 0
      0025DD 00                    7582 	.db #0x00	; 0
      0025DE 00                    7583 	.db #0x00	; 0
      0025DF 00                    7584 	.db #0x00	; 0
      0025E0 00                    7585 	.db #0x00	; 0
      0025E1 00                    7586 	.db #0x00	; 0
      0025E2 00                    7587 	.db #0x00	; 0
      0025E3 00                    7588 	.db #0x00	; 0
      0025E4 00                    7589 	.db #0x00	; 0
      0025E5 00                    7590 	.db #0x00	; 0
      0025E6 00                    7591 	.db #0x00	; 0
      0025E7 00                    7592 	.db #0x00	; 0
      0025E8 00                    7593 	.db #0x00	; 0
      0025E9 00                    7594 	.db #0x00	; 0
      0025EA 00                    7595 	.db #0x00	; 0
      0025EB 00                    7596 	.db #0x00	; 0
      0025EC 00                    7597 	.db #0x00	; 0
      0025ED 00                    7598 	.db #0x00	; 0
      0025EE 00                    7599 	.db #0x00	; 0
      0025EF 00                    7600 	.db #0x00	; 0
      0025F0 00                    7601 	.db #0x00	; 0
      0025F1 00                    7602 	.db #0x00	; 0
      0025F2 00                    7603 	.db #0x00	; 0
      0025F3 00                    7604 	.db #0x00	; 0
      0025F4 00                    7605 	.db #0x00	; 0
      0025F5 00                    7606 	.db #0x00	; 0
      0025F6 00                    7607 	.db #0x00	; 0
      0025F7 00                    7608 	.db #0x00	; 0
      0025F8 00                    7609 	.db #0x00	; 0
      0025F9 00                    7610 	.db #0x00	; 0
      0025FA 00                    7611 	.db #0x00	; 0
      0025FB 00                    7612 	.db #0x00	; 0
      0025FC 00                    7613 	.db #0x00	; 0
      0025FD 00                    7614 	.db #0x00	; 0
      0025FE 00                    7615 	.db #0x00	; 0
      0025FF 00                    7616 	.db #0x00	; 0
      002600 00                    7617 	.db #0x00	; 0
      002601 00                    7618 	.db #0x00	; 0
      002602 00                    7619 	.db #0x00	; 0
      002603 00                    7620 	.db #0x00	; 0
      002604 00                    7621 	.db #0x00	; 0
      002605 00                    7622 	.db #0x00	; 0
      002606 00                    7623 	.db #0x00	; 0
      002607 00                    7624 	.db #0x00	; 0
      002608 00                    7625 	.db #0x00	; 0
      002609 00                    7626 	.db #0x00	; 0
      00260A 00                    7627 	.db #0x00	; 0
      00260B 00                    7628 	.db #0x00	; 0
      00260C 00                    7629 	.db #0x00	; 0
      00260D 00                    7630 	.db #0x00	; 0
      00260E 00                    7631 	.db #0x00	; 0
      00260F 00                    7632 	.db #0x00	; 0
      002610 00                    7633 	.db #0x00	; 0
      002611 00                    7634 	.db #0x00	; 0
      002612 00                    7635 	.db #0x00	; 0
      002613 00                    7636 	.db #0x00	; 0
      002614 00                    7637 	.db #0x00	; 0
      002615 00                    7638 	.db #0x00	; 0
      002616 00                    7639 	.db #0x00	; 0
      002617 00                    7640 	.db #0x00	; 0
      002618 00                    7641 	.db #0x00	; 0
      002619 00                    7642 	.db #0x00	; 0
      00261A 00                    7643 	.db #0x00	; 0
      00261B 00                    7644 	.db #0x00	; 0
      00261C 00                    7645 	.db #0x00	; 0
      00261D 00                    7646 	.db #0x00	; 0
      00261E 00                    7647 	.db #0x00	; 0
      00261F 00                    7648 	.db #0x00	; 0
      002620 00                    7649 	.db #0x00	; 0
      002621 00                    7650 	.db #0x00	; 0
      002622 00                    7651 	.db #0x00	; 0
      002623 00                    7652 	.db #0x00	; 0
      002624 00                    7653 	.db #0x00	; 0
      002625 00                    7654 	.db #0x00	; 0
      002626 00                    7655 	.db #0x00	; 0
      002627 00                    7656 	.db #0x00	; 0
      002628 00                    7657 	.db #0x00	; 0
      002629 00                    7658 	.db #0x00	; 0
      00262A 00                    7659 	.db #0x00	; 0
      00262B 00                    7660 	.db #0x00	; 0
      00262C 00                    7661 	.db #0x00	; 0
      00262D 00                    7662 	.db #0x00	; 0
      00262E 00                    7663 	.db #0x00	; 0
      00262F 00                    7664 	.db #0x00	; 0
      002630 00                    7665 	.db #0x00	; 0
      002631 00                    7666 	.db #0x00	; 0
      002632 00                    7667 	.db #0x00	; 0
      002633 00                    7668 	.db #0x00	; 0
      002634 00                    7669 	.db #0x00	; 0
      002635 00                    7670 	.db #0x00	; 0
      002636 00                    7671 	.db #0x00	; 0
      002637 00                    7672 	.db #0x00	; 0
      002638 00                    7673 	.db #0x00	; 0
      002639 00                    7674 	.db #0x00	; 0
      00263A 00                    7675 	.db #0x00	; 0
      00263B 00                    7676 	.db #0x00	; 0
      00263C 00                    7677 	.db #0x00	; 0
      00263D 00                    7678 	.db #0x00	; 0
      00263E 00                    7679 	.db #0x00	; 0
      00263F 00                    7680 	.db #0x00	; 0
      002640 00                    7681 	.db #0x00	; 0
      002641 00                    7682 	.db #0x00	; 0
      002642 00                    7683 	.db #0x00	; 0
      002643 00                    7684 	.db #0x00	; 0
      002644 00                    7685 	.db #0x00	; 0
      002645 00                    7686 	.db #0x00	; 0
      002646 00                    7687 	.db #0x00	; 0
      002647 00                    7688 	.db #0x00	; 0
      002648 00                    7689 	.db #0x00	; 0
      002649 00                    7690 	.db #0x00	; 0
      00264A 00                    7691 	.db #0x00	; 0
      00264B 00                    7692 	.db #0x00	; 0
      00264C 00                    7693 	.db #0x00	; 0
      00264D 00                    7694 	.db #0x00	; 0
      00264E 00                    7695 	.db #0x00	; 0
      00264F 00                    7696 	.db #0x00	; 0
      002650 00                    7697 	.db #0x00	; 0
      002651 00                    7698 	.db #0x00	; 0
      002652 00                    7699 	.db #0x00	; 0
      002653 00                    7700 	.db #0x00	; 0
      002654 00                    7701 	.db #0x00	; 0
      002655 00                    7702 	.db #0x00	; 0
      002656 00                    7703 	.db #0x00	; 0
      002657 00                    7704 	.db #0x00	; 0
      002658 00                    7705 	.db #0x00	; 0
      002659 00                    7706 	.db #0x00	; 0
      00265A 00                    7707 	.db #0x00	; 0
      00265B 00                    7708 	.db #0x00	; 0
      00265C 00                    7709 	.db #0x00	; 0
      00265D 00                    7710 	.db #0x00	; 0
      00265E 00                    7711 	.db #0x00	; 0
      00265F 00                    7712 	.db #0x00	; 0
      002660 00                    7713 	.db #0x00	; 0
      002661 00                    7714 	.db #0x00	; 0
      002662 00                    7715 	.db #0x00	; 0
      002663 00                    7716 	.db #0x00	; 0
      002664 00                    7717 	.db #0x00	; 0
      002665 00                    7718 	.db #0x00	; 0
      002666 00                    7719 	.db #0x00	; 0
      002667 00                    7720 	.db #0x00	; 0
      002668 00                    7721 	.db #0x00	; 0
      002669 00                    7722 	.db #0x00	; 0
      00266A 00                    7723 	.db #0x00	; 0
      00266B 00                    7724 	.db #0x00	; 0
      00266C 00                    7725 	.db #0x00	; 0
      00266D 00                    7726 	.db #0x00	; 0
      00266E 00                    7727 	.db #0x00	; 0
      00266F 00                    7728 	.db #0x00	; 0
      002670 00                    7729 	.db #0x00	; 0
      002671 00                    7730 	.db #0x00	; 0
      002672 00                    7731 	.db #0x00	; 0
      002673 00                    7732 	.db #0x00	; 0
      002674 00                    7733 	.db #0x00	; 0
      002675 00                    7734 	.db #0x00	; 0
      002676 00                    7735 	.db #0x00	; 0
      002677 00                    7736 	.db #0x00	; 0
      002678 00                    7737 	.db #0x00	; 0
      002679 00                    7738 	.db #0x00	; 0
      00267A 00                    7739 	.db #0x00	; 0
      00267B 00                    7740 	.db #0x00	; 0
      00267C 00                    7741 	.db #0x00	; 0
      00267D 00                    7742 	.db #0x00	; 0
      00267E 00                    7743 	.db #0x00	; 0
      00267F 00                    7744 	.db #0x00	; 0
      002680 00                    7745 	.db #0x00	; 0
      002681 00                    7746 	.db #0x00	; 0
      002682 00                    7747 	.db #0x00	; 0
      002683 00                    7748 	.db #0x00	; 0
      002684 00                    7749 	.db #0x00	; 0
      002685 00                    7750 	.db #0x00	; 0
      002686 00                    7751 	.db #0x00	; 0
      002687 00                    7752 	.db #0x00	; 0
      002688 00                    7753 	.db #0x00	; 0
      002689 00                    7754 	.db #0x00	; 0
      00268A 00                    7755 	.db #0x00	; 0
      00268B 00                    7756 	.db #0x00	; 0
      00268C 00                    7757 	.db #0x00	; 0
      00268D 00                    7758 	.db #0x00	; 0
      00268E 00                    7759 	.db #0x00	; 0
      00268F 00                    7760 	.db #0x00	; 0
      002690 00                    7761 	.db #0x00	; 0
      002691 00                    7762 	.db #0x00	; 0
      002692 00                    7763 	.db #0x00	; 0
      002693 00                    7764 	.db #0x00	; 0
      002694 00                    7765 	.db #0x00	; 0
      002695 00                    7766 	.db #0x00	; 0
      002696 00                    7767 	.db #0x00	; 0
      002697 00                    7768 	.db #0x00	; 0
      002698 00                    7769 	.db #0x00	; 0
      002699 00                    7770 	.db #0x00	; 0
      00269A 00                    7771 	.db #0x00	; 0
      00269B 00                    7772 	.db #0x00	; 0
      00269C 00                    7773 	.db #0x00	; 0
      00269D 00                    7774 	.db #0x00	; 0
      00269E 00                    7775 	.db #0x00	; 0
      00269F 00                    7776 	.db #0x00	; 0
      0026A0 00                    7777 	.db #0x00	; 0
      0026A1 00                    7778 	.db #0x00	; 0
      0026A2 00                    7779 	.db #0x00	; 0
      0026A3 00                    7780 	.db #0x00	; 0
      0026A4 00                    7781 	.db #0x00	; 0
      0026A5 00                    7782 	.db #0x00	; 0
      0026A6 00                    7783 	.db #0x00	; 0
      0026A7 00                    7784 	.db #0x00	; 0
      0026A8 00                    7785 	.db #0x00	; 0
      0026A9 00                    7786 	.db #0x00	; 0
      0026AA 00                    7787 	.db #0x00	; 0
      0026AB 00                    7788 	.db #0x00	; 0
      0026AC 00                    7789 	.db #0x00	; 0
      0026AD 00                    7790 	.db #0x00	; 0
      0026AE 00                    7791 	.db #0x00	; 0
      0026AF 00                    7792 	.db #0x00	; 0
      0026B0 00                    7793 	.db #0x00	; 0
      0026B1 00                    7794 	.db #0x00	; 0
      0026B2 00                    7795 	.db #0x00	; 0
      0026B3 00                    7796 	.db #0x00	; 0
      0026B4 00                    7797 	.db #0x00	; 0
      0026B5 00                    7798 	.db #0x00	; 0
      0026B6 00                    7799 	.db #0x00	; 0
      0026B7 00                    7800 	.db #0x00	; 0
      0026B8 00                    7801 	.db #0x00	; 0
      0026B9 00                    7802 	.db #0x00	; 0
      0026BA 00                    7803 	.db #0x00	; 0
      0026BB 00                    7804 	.db #0x00	; 0
      0026BC 00                    7805 	.db #0x00	; 0
      0026BD 00                    7806 	.db #0x00	; 0
      0026BE 00                    7807 	.db #0x00	; 0
      0026BF 00                    7808 	.db #0x00	; 0
      0026C0 00                    7809 	.db #0x00	; 0
      0026C1 00                    7810 	.db #0x00	; 0
      0026C2 00                    7811 	.db #0x00	; 0
      0026C3 00                    7812 	.db #0x00	; 0
      0026C4 00                    7813 	.db #0x00	; 0
      0026C5 00                    7814 	.db #0x00	; 0
      0026C6 00                    7815 	.db #0x00	; 0
      0026C7 00                    7816 	.db #0x00	; 0
      0026C8 00                    7817 	.db #0x00	; 0
      0026C9 00                    7818 	.db #0x00	; 0
      0026CA 00                    7819 	.db #0x00	; 0
      0026CB 00                    7820 	.db #0x00	; 0
      0026CC 00                    7821 	.db #0x00	; 0
      0026CD 00                    7822 	.db #0x00	; 0
      0026CE 00                    7823 	.db #0x00	; 0
      0026CF 00                    7824 	.db #0x00	; 0
      0026D0 00                    7825 	.db #0x00	; 0
      0026D1 00                    7826 	.db #0x00	; 0
      0026D2 00                    7827 	.db #0x00	; 0
      0026D3 00                    7828 	.db #0x00	; 0
      0026D4 00                    7829 	.db #0x00	; 0
      0026D5 00                    7830 	.db #0x00	; 0
      0026D6 00                    7831 	.db #0x00	; 0
      0026D7 00                    7832 	.db #0x00	; 0
      0026D8 00                    7833 	.db #0x00	; 0
      0026D9 00                    7834 	.db #0x00	; 0
      0026DA 00                    7835 	.db #0x00	; 0
      0026DB 00                    7836 	.db #0x00	; 0
      0026DC 00                    7837 	.db #0x00	; 0
      0026DD 00                    7838 	.db #0x00	; 0
      0026DE 00                    7839 	.db #0x00	; 0
      0026DF 00                    7840 	.db #0x00	; 0
      0026E0 00                    7841 	.db #0x00	; 0
      0026E1 00                    7842 	.db #0x00	; 0
      0026E2 00                    7843 	.db #0x00	; 0
      0026E3 00                    7844 	.db #0x00	; 0
      0026E4 00                    7845 	.db #0x00	; 0
      0026E5 00                    7846 	.db #0x00	; 0
      0026E6 00                    7847 	.db #0x00	; 0
      0026E7                       7848 ___str_9:
      0026E7 50 52 45 53 53 20 54  7849 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0026FD 00                    7850 	.db 0x00
      0026FE                       7851 ___str_10:
      0026FE 41 4E 44 52 45 42 41  7852 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002712 00                    7853 	.db 0x00
      002713                       7854 ___str_11:
      002713 76 2E 3F 2E 3F 2E 3F  7855 	.ascii "v.?.?.?"
      00271A 00                    7856 	.db 0x00
                                   7857 ;src\main.c:85: void main() {
                                   7858 ;	---------------------------------
                                   7859 ; Function main
                                   7860 ; ---------------------------------
      00271B                       7861 _main::
                                   7862 ;src\main.c:87: while(TRUE) {
      00271B                       7863 00102$:
                                   7864 ;src\main.c:89: Intro();
      00271B CDr33r21         [17] 7865 	call	_Intro
                                   7866 ;src\main.c:91: TitleScreen();
      00271E CDrECr21         [17] 7867 	call	_TitleScreen
                                   7868 ;src\main.c:93: InitGame();
      002721 CDrBDr1F         [17] 7869 	call	_InitGame
                                   7870 ;src\main.c:96: }
      002724 18 F5            [12] 7871 	jr	00102$
                                   7872 	.area _CODE
                                   7873 	.area _INITIALIZER
      000000                       7874 __xinit__gameOver:
      000000 00                    7875 	.db #0x00	; 0
      000001                       7876 __xinit__col:
      000001 00                    7877 	.db #0x00	; 0
      000002                       7878 __xinit__line:
      000002 00                    7879 	.db #0x00	; 0
      000003                       7880 __xinit__counter:
      000003 00                    7881 	.db #0x00	; 0
      000004                       7882 __xinit__blocksRemoved:
      000004 00 00                 7883 	.dw #0x0000
      000006                       7884 __xinit__level:
      000006 01                    7885 	.db #0x01	; 1
      000007                       7886 __xinit__newLevel:
      000007 00                    7887 	.db #0x00	; 0
      000008                       7888 __xinit__rndSeed:
      000008 00                    7889 	.db #0x00	; 0
      000009                       7890 __xinit__d_col:
      000009 00                    7891 	.db #0x00	; 0
      00000A                       7892 __xinit__d_line:
      00000A 00                    7893 	.db #0x00	; 0
      00000B                       7894 __xinit__d_value:
      00000B 00                    7895 	.db #0x00	; 0
                                   7896 	.area _CABS (ABS)
