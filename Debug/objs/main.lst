                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideHitSprite
                                     36 	.globl _DrawHitSprite
                                     37 	.globl _HideArrow
                                     38 	.globl _DrawArrow
                                     39 	.globl _DrawBackground
                                     40 	.globl _DrawScore
                                     41 	.globl _DrawColumn
                                     42 	.globl _DrawNumber
                                     43 	.globl _DrawString
                                     44 	.globl _DrawChar
                                     45 	.globl _GetRandomInInterval
                                     46 	.globl _GetRandom
                                     47 	.globl _InitRnd
                                     48 	.globl _Power
                                     49 	.globl _Wait
                                     50 	.globl _SNSMAT
                                     51 	.globl _GTTRIG
                                     52 	.globl _GTSTCK
                                     53 	.globl _BEEP
                                     54 	.globl _WRTPSG
                                     55 	.globl _GICINI
                                     56 	.globl _INIGRP
                                     57 	.globl _LDIRVM
                                     58 	.globl _FILVRM
                                     59 	.globl _WRTVRM
                                     60 	.globl _RDVRM
                                     61 	.globl _WRTVDP
                                     62 	.globl _ENASCR
                                     63 	.globl _DISSCR
                                     64 	.globl _d_value
                                     65 	.globl _d_line
                                     66 	.globl _d_col
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _bottomPiece
                                     81 	.globl _midPiece
                                     82 	.globl _topPiece
                                     83 	.globl _playfieldTemp
                                     84 	.globl _playfield
                                     85 	.globl _GETPNT
                                     86 	.globl _PUTPNT
                                     87 	.globl _REPCNT
                                     88 	.globl _SCNCNT
                                     89 	.globl _ATRBYT
                                     90 	.globl _CMASK
                                     91 	.globl _CLOC
                                     92 	.globl _BDRCLR
                                     93 	.globl _BAKCLR
                                     94 	.globl _FORCLR
                                     95 	.globl _TRGFLG
                                     96 	.globl _STATFL
                                     97 	.globl _MSX_vdp_regs
                                     98 	.globl _CNSDFG
                                     99 	.globl _CSRX
                                    100 	.globl _CSRY
                                    101 	.globl _MSX_modedata_screen3
                                    102 	.globl _MSX_modedata_screen2
                                    103 	.globl _MSX_modedata_screen1
                                    104 	.globl _MSX_modedata_screen0
                                    105 	.globl _CLIKSW
                                    106 	.globl _JIFFY
                                    107 	.globl _CLMLST
                                    108 	.globl _CRTCNT
                                    109 	.globl _LINLEN
                                    110 	.globl _LINL32
                                    111 	.globl _LINL40
                                    112 	.globl _MSX_charset
                                    113 	.globl _FONT
                                    114 	.globl _pieces
                                    115 	.globl _MSX_version
                                    116 	.globl _MSX_vdp_port_write
                                    117 	.globl _MSX_vdp_port_read
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 ;--------------------------------------------------------
                                    122 ; ram data
                                    123 ;--------------------------------------------------------
                                    124 	.area _DATA
                           000004   125 _MSX_charset	=	0x0004
                           00F3AE   126 _LINL40	=	0xf3ae
                           00F3AF   127 _LINL32	=	0xf3af
                           00F3B0   128 _LINLEN	=	0xf3b0
                           00F3B1   129 _CRTCNT	=	0xf3b1
                           00F3B1   130 _CLMLST	=	0xf3b1
                           00FC9E   131 _JIFFY	=	0xfc9e
                           00F3DB   132 _CLIKSW	=	0xf3db
                           00F3B3   133 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   134 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   135 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   136 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   137 _CSRY	=	0xf3dc
                           00F3DD   138 _CSRX	=	0xf3dd
                           00F3DE   139 _CNSDFG	=	0xf3de
                           00F3DF   140 _MSX_vdp_regs	=	0xf3df
                           00F3E7   141 _STATFL	=	0xf3e7
                           00F3E8   142 _TRGFLG	=	0xf3e8
                           00F3E9   143 _FORCLR	=	0xf3e9
                           00F3EA   144 _BAKCLR	=	0xf3ea
                           00F3EB   145 _BDRCLR	=	0xf3eb
                           00F92A   146 _CLOC	=	0xf92a
                           00F92C   147 _CMASK	=	0xf92c
                           00F3F2   148 _ATRBYT	=	0xf3f2
                           00F3F6   149 _SCNCNT	=	0xf3f6
                           00F3F7   150 _REPCNT	=	0xf3f7
                           00F3F8   151 _PUTPNT	=	0xf3f8
                           00F3FA   152 _GETPNT	=	0xf3fa
      000000                        153 _playfield::
      000000                        154 	.ds 72
      000048                        155 _playfieldTemp::
      000048                        156 	.ds 72
      000090                        157 _topPiece::
      000090                        158 	.ds 1
      000091                        159 _midPiece::
      000091                        160 	.ds 1
      000092                        161 _bottomPiece::
      000092                        162 	.ds 1
      000093                        163 _speed::
      000093                        164 	.ds 1
      000094                        165 _Rand_a::
      000094                        166 	.ds 1
      000095                        167 _Rand_b::
      000095                        168 	.ds 1
      000096                        169 _Rand_c::
      000096                        170 	.ds 1
      000097                        171 _Rand_x::
      000097                        172 	.ds 1
                                    173 ;--------------------------------------------------------
                                    174 ; ram data
                                    175 ;--------------------------------------------------------
                                    176 	.area _INITIALIZED
      000000                        177 _gameOver::
      000000                        178 	.ds 1
      000001                        179 _col::
      000001                        180 	.ds 1
      000002                        181 _line::
      000002                        182 	.ds 1
      000003                        183 _counter::
      000003                        184 	.ds 1
      000004                        185 _blocksRemoved::
      000004                        186 	.ds 2
      000006                        187 _level::
      000006                        188 	.ds 1
      000007                        189 _newLevel::
      000007                        190 	.ds 1
      000008                        191 _rndSeed::
      000008                        192 	.ds 1
      000009                        193 _d_col::
      000009                        194 	.ds 1
      00000A                        195 _d_line::
      00000A                        196 	.ds 1
      00000B                        197 _d_value::
      00000B                        198 	.ds 1
                                    199 ;--------------------------------------------------------
                                    200 ; absolute external ram data
                                    201 ;--------------------------------------------------------
                                    202 	.area _DABS (ABS)
                                    203 ;--------------------------------------------------------
                                    204 ; global & static initialisations
                                    205 ;--------------------------------------------------------
                                    206 	.area _HOME
                                    207 	.area _GSINIT
                                    208 	.area _GSFINAL
                                    209 	.area _GSINIT
                                    210 ;--------------------------------------------------------
                                    211 ; Home
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _HOME
                                    215 ;--------------------------------------------------------
                                    216 ; code
                                    217 ;--------------------------------------------------------
                                    218 	.area _CODE
                                    219 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    220 ;	---------------------------------
                                    221 ; Function Wait
                                    222 ; ---------------------------------
      000000                        223 _Wait::
                                    224 ;src\/Common.h:2: do {
      000000 D1               [10]  225 	pop	de
      000001 C1               [10]  226 	pop	bc
      000002 C5               [11]  227 	push	bc
      000003 D5               [11]  228 	push	de
      000004                        229 00104$:
                                    230 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  231 	ld	de, (_JIFFY)
                                    232 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        233 00101$:
      000008 2A 9E FC         [16]  234 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  235 	cp	a, a
      00000C ED 52            [15]  236 	sbc	hl, de
      00000E 28 F8            [12]  237 	jr	Z, 00101$
                                    238 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  239 	ld	e, c
      000011 50               [ 4]  240 	ld	d, b
      000012 0B               [ 6]  241 	dec	bc
      000013 7A               [ 4]  242 	ld	a, d
      000014 B3               [ 4]  243 	or	a, e
      000015 20 ED            [12]  244 	jr	NZ, 00104$
                                    245 ;src\/Common.h:8: }
      000017 C9               [10]  246 	ret
                           000006   247 _MSX_vdp_port_read	=	0x0006
                           000007   248 _MSX_vdp_port_write	=	0x0007
                           00002D   249 _MSX_version	=	0x002d
      000018                        250 _pieces:
      000018 04                     251 	.db #0x04	; 4
      000019 08                     252 	.db #0x08	; 8
      00001A 0C                     253 	.db #0x0c	; 12
      00001B 10                     254 	.db #0x10	; 16
      00001C 14                     255 	.db #0x14	; 20
                                    256 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    257 ;	---------------------------------
                                    258 ; Function Power
                                    259 ; ---------------------------------
      00001D                        260 _Power::
      00001D DD E5            [15]  261 	push	ix
      00001F DD 21 00 00      [14]  262 	ld	ix,#0
      000023 DD 39            [15]  263 	add	ix,sp
                                    264 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  265 	ld	c, 4 (ix)
      000028 06 00            [ 7]  266 	ld	b, #0x00
      00002A 69               [ 4]  267 	ld	l, c
      00002B 60               [ 4]  268 	ld	h, b
                                    269 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  270 	ld	a, 5 (ix)
      00002F B7               [ 4]  271 	or	a, a
      000030 20 05            [12]  272 	jr	NZ, 00111$
      000032 21 01 00         [10]  273 	ld	hl, #0x0001
      000035 18 16            [12]  274 	jr	00107$
                                    275 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        276 00111$:
      000037 1E 01            [ 7]  277 	ld	e, #0x01
      000039                        278 00105$:
      000039 7B               [ 4]  279 	ld	a, e
      00003A DD 96 05         [19]  280 	sub	a, 5 (ix)
      00003D 30 0E            [12]  281 	jr	NC, 00103$
                                    282 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  283 	push	bc
      000040 D5               [11]  284 	push	de
      000041 C5               [11]  285 	push	bc
      000042 E5               [11]  286 	push	hl
      000043 CDr00r00         [17]  287 	call	__mulint
      000046 F1               [10]  288 	pop	af
      000047 F1               [10]  289 	pop	af
      000048 D1               [10]  290 	pop	de
      000049 C1               [10]  291 	pop	bc
                                    292 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  293 	inc	e
      00004B 18 EC            [12]  294 	jr	00105$
      00004D                        295 00103$:
                                    296 ;src\/Math.h:10: return power;
      00004D                        297 00107$:
                                    298 ;src\/Math.h:11: }
      00004D DD E1            [14]  299 	pop	ix
      00004F C9               [10]  300 	ret
                                    301 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    302 ;	---------------------------------
                                    303 ; Function InitRnd
                                    304 ; ---------------------------------
      000050                        305 _InitRnd::
                                    306 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  307 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  308 	ld	hl, #2
      000056 39               [11]  309 	add	hl, sp
      000057 AE               [ 7]  310 	xor	a, (hl)
      000058 32r94r00         [13]  311 	ld	(_Rand_a+0), a
                                    312 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  313 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  314 	ld	hl, #3
      000061 39               [11]  315 	add	hl, sp
      000062 AE               [ 7]  316 	xor	a, (hl)
      000063 32r95r00         [13]  317 	ld	(_Rand_b+0), a
                                    318 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  319 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  320 	ld	hl, #4
      00006C 39               [11]  321 	add	hl, sp
      00006D AE               [ 7]  322 	xor	a, (hl)
      00006E 32r96r00         [13]  323 	ld	(_Rand_c+0), a
                                    324 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  325 	ld	hl, #_Rand_x
      000074 34               [11]  326 	inc	(hl)
                                    327 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  328 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  329 	ld	hl, #_Rand_c
      00007B AE               [ 7]  330 	xor	a, (hl)
      00007C 21r97r00         [10]  331 	ld	hl, #_Rand_x
      00007F AE               [ 7]  332 	xor	a, (hl)
      000080 32r94r00         [13]  333 	ld	(_Rand_a+0), a
                                    334 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  335 	ld	hl, #_Rand_b
      000086 7E               [ 7]  336 	ld	a, (hl)
      000087 FD 21r94r00      [14]  337 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  338 	add	a, 0 (iy)
      00008E 77               [ 7]  339 	ld	(hl), a
                                    340 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  341 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  342 	srl	a
      000094 21r96r00         [10]  343 	ld	hl, #_Rand_c
      000097 86               [ 7]  344 	add	a, (hl)
      000098 FD 21r94r00      [14]  345 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  346 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  347 	ld	(_Rand_c+0), a
                                    348 ;src\/Random.h:38: }
      0000A2 C9               [10]  349 	ret
                                    350 ;src\/Random.h:40: unsigned char GetRandom() {
                                    351 ;	---------------------------------
                                    352 ; Function GetRandom
                                    353 ; ---------------------------------
      0000A3                        354 _GetRandom::
                                    355 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  356 	ld	hl, #_Rand_x
      0000A6 34               [11]  357 	inc	(hl)
                                    358 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  359 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  360 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  361 	xor	a, (hl)
      0000AE 21r97r00         [10]  362 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  363 	xor	a, (hl)
      0000B2 32r94r00         [13]  364 	ld	(_Rand_a+0), a
                                    365 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  366 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  367 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  368 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  369 	add	a, 0 (iy)
      0000C0 77               [ 7]  370 	ld	(hl), a
                                    371 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  372 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  373 	srl	a
      0000C6 21r96r00         [10]  374 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  375 	add	a, (hl)
      0000CA FD 21r94r00      [14]  376 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  377 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  378 	ld	(_Rand_c+0), a
                                    379 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  380 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  381 	ld	l, a
                                    382 ;src\/Random.h:47: }
      0000D8 C9               [10]  383 	ret
                                    384 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    385 ;	---------------------------------
                                    386 ; Function GetRandomInInterval
                                    387 ; ---------------------------------
      0000D9                        388 _GetRandomInInterval::
                                    389 ;src\/Random.h:53: do {
      0000D9                        390 00101$:
                                    391 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  392 	call	_GetRandom
      0000DC 7D               [ 4]  393 	ld	a, l
      0000DD 21 03 00         [10]  394 	ld	hl, #3
      0000E0 39               [11]  395 	add	hl, sp
      0000E1 A6               [ 7]  396 	and	a, (hl)
      0000E2 4F               [ 4]  397 	ld	c, a
                                    398 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  399 	ld	hl, #2
      0000E6 39               [11]  400 	add	hl, sp
      0000E7 7E               [ 7]  401 	ld	a, (hl)
      0000E8 91               [ 4]  402 	sub	a, c
      0000E9 38 EE            [12]  403 	jr	C, 00101$
                                    404 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  405 	ld	l, c
                                    406 ;src\/Random.h:59: }
      0000EC C9               [10]  407 	ret
                                    408 ;src\/Graphics.h:4: void DrawChar(byte character, byte col, byte line) {
                                    409 ;	---------------------------------
                                    410 ; Function DrawChar
                                    411 ; ---------------------------------
      0000ED                        412 _DrawChar::
      0000ED DD E5            [15]  413 	push	ix
      0000EF DD 21 00 00      [14]  414 	ld	ix,#0
      0000F3 DD 39            [15]  415 	add	ix,sp
                                    416 ;src\/Graphics.h:5: WRTVRM(MSX_modedata_screen2.name + (line * 32) + col, character);
      0000F5 ED 4B C7 F3      [20]  417 	ld	bc, (#_MSX_modedata_screen2 + 0)
      0000F9 DD 6E 06         [19]  418 	ld	l, 6 (ix)
      0000FC 26 00            [ 7]  419 	ld	h, #0x00
      0000FE 29               [11]  420 	add	hl, hl
      0000FF 29               [11]  421 	add	hl, hl
      000100 29               [11]  422 	add	hl, hl
      000101 29               [11]  423 	add	hl, hl
      000102 29               [11]  424 	add	hl, hl
      000103 09               [11]  425 	add	hl, bc
      000104 DD 4E 05         [19]  426 	ld	c, 5 (ix)
      000107 06 00            [ 7]  427 	ld	b, #0x00
      000109 09               [11]  428 	add	hl, bc
      00010A DD 7E 04         [19]  429 	ld	a, 4 (ix)
      00010D F5               [11]  430 	push	af
      00010E 33               [ 6]  431 	inc	sp
      00010F E5               [11]  432 	push	hl
      000110 CDr00r00         [17]  433 	call	_WRTVRM
      000113 F1               [10]  434 	pop	af
      000114 33               [ 6]  435 	inc	sp
                                    436 ;src\/Graphics.h:6: }
      000115 DD E1            [14]  437 	pop	ix
      000117 C9               [10]  438 	ret
      000118                        439 _FONT:
      000118 00                     440 	.db #0x00	; 0
      000119 00                     441 	.db #0x00	; 0
      00011A 00                     442 	.db #0x00	; 0
      00011B 00                     443 	.db #0x00	; 0
      00011C 00                     444 	.db #0x00	; 0
      00011D 00                     445 	.db #0x00	; 0
      00011E 00                     446 	.db #0x00	; 0
      00011F 00                     447 	.db #0x00	; 0
      000120 30                     448 	.db #0x30	; 48	'0'
      000121 78                     449 	.db #0x78	; 120	'x'
      000122 78                     450 	.db #0x78	; 120	'x'
      000123 30                     451 	.db #0x30	; 48	'0'
      000124 30                     452 	.db #0x30	; 48	'0'
      000125 00                     453 	.db #0x00	; 0
      000126 30                     454 	.db #0x30	; 48	'0'
      000127 00                     455 	.db #0x00	; 0
      000128 6C                     456 	.db #0x6c	; 108	'l'
      000129 6C                     457 	.db #0x6c	; 108	'l'
      00012A 6C                     458 	.db #0x6c	; 108	'l'
      00012B 00                     459 	.db #0x00	; 0
      00012C 00                     460 	.db #0x00	; 0
      00012D 00                     461 	.db #0x00	; 0
      00012E 00                     462 	.db #0x00	; 0
      00012F 00                     463 	.db #0x00	; 0
      000130 6C                     464 	.db #0x6c	; 108	'l'
      000131 6C                     465 	.db #0x6c	; 108	'l'
      000132 FE                     466 	.db #0xfe	; 254
      000133 6C                     467 	.db #0x6c	; 108	'l'
      000134 FE                     468 	.db #0xfe	; 254
      000135 6C                     469 	.db #0x6c	; 108	'l'
      000136 6C                     470 	.db #0x6c	; 108	'l'
      000137 00                     471 	.db #0x00	; 0
      000138 30                     472 	.db #0x30	; 48	'0'
      000139 7C                     473 	.db #0x7c	; 124
      00013A C0                     474 	.db #0xc0	; 192
      00013B 78                     475 	.db #0x78	; 120	'x'
      00013C 0C                     476 	.db #0x0c	; 12
      00013D F8                     477 	.db #0xf8	; 248
      00013E 30                     478 	.db #0x30	; 48	'0'
      00013F 00                     479 	.db #0x00	; 0
      000140 00                     480 	.db #0x00	; 0
      000141 C6                     481 	.db #0xc6	; 198
      000142 CC                     482 	.db #0xcc	; 204
      000143 18                     483 	.db #0x18	; 24
      000144 30                     484 	.db #0x30	; 48	'0'
      000145 66                     485 	.db #0x66	; 102	'f'
      000146 C6                     486 	.db #0xc6	; 198
      000147 00                     487 	.db #0x00	; 0
      000148 38                     488 	.db #0x38	; 56	'8'
      000149 6C                     489 	.db #0x6c	; 108	'l'
      00014A 38                     490 	.db #0x38	; 56	'8'
      00014B 76                     491 	.db #0x76	; 118	'v'
      00014C DC                     492 	.db #0xdc	; 220
      00014D CC                     493 	.db #0xcc	; 204
      00014E 76                     494 	.db #0x76	; 118	'v'
      00014F 00                     495 	.db #0x00	; 0
      000150 60                     496 	.db #0x60	; 96
      000151 60                     497 	.db #0x60	; 96
      000152 C0                     498 	.db #0xc0	; 192
      000153 00                     499 	.db #0x00	; 0
      000154 00                     500 	.db #0x00	; 0
      000155 00                     501 	.db #0x00	; 0
      000156 00                     502 	.db #0x00	; 0
      000157 00                     503 	.db #0x00	; 0
      000158 18                     504 	.db #0x18	; 24
      000159 30                     505 	.db #0x30	; 48	'0'
      00015A 60                     506 	.db #0x60	; 96
      00015B 60                     507 	.db #0x60	; 96
      00015C 60                     508 	.db #0x60	; 96
      00015D 30                     509 	.db #0x30	; 48	'0'
      00015E 18                     510 	.db #0x18	; 24
      00015F 00                     511 	.db #0x00	; 0
      000160 60                     512 	.db #0x60	; 96
      000161 30                     513 	.db #0x30	; 48	'0'
      000162 18                     514 	.db #0x18	; 24
      000163 18                     515 	.db #0x18	; 24
      000164 18                     516 	.db #0x18	; 24
      000165 30                     517 	.db #0x30	; 48	'0'
      000166 60                     518 	.db #0x60	; 96
      000167 00                     519 	.db #0x00	; 0
      000168 00                     520 	.db #0x00	; 0
      000169 66                     521 	.db #0x66	; 102	'f'
      00016A 3C                     522 	.db #0x3c	; 60
      00016B FF                     523 	.db #0xff	; 255
      00016C 3C                     524 	.db #0x3c	; 60
      00016D 66                     525 	.db #0x66	; 102	'f'
      00016E 00                     526 	.db #0x00	; 0
      00016F 00                     527 	.db #0x00	; 0
      000170 00                     528 	.db #0x00	; 0
      000171 30                     529 	.db #0x30	; 48	'0'
      000172 30                     530 	.db #0x30	; 48	'0'
      000173 FC                     531 	.db #0xfc	; 252
      000174 30                     532 	.db #0x30	; 48	'0'
      000175 30                     533 	.db #0x30	; 48	'0'
      000176 00                     534 	.db #0x00	; 0
      000177 00                     535 	.db #0x00	; 0
      000178 00                     536 	.db #0x00	; 0
      000179 00                     537 	.db #0x00	; 0
      00017A 00                     538 	.db #0x00	; 0
      00017B 00                     539 	.db #0x00	; 0
      00017C 00                     540 	.db #0x00	; 0
      00017D 30                     541 	.db #0x30	; 48	'0'
      00017E 30                     542 	.db #0x30	; 48	'0'
      00017F 60                     543 	.db #0x60	; 96
      000180 00                     544 	.db #0x00	; 0
      000181 00                     545 	.db #0x00	; 0
      000182 00                     546 	.db #0x00	; 0
      000183 FC                     547 	.db #0xfc	; 252
      000184 00                     548 	.db #0x00	; 0
      000185 00                     549 	.db #0x00	; 0
      000186 00                     550 	.db #0x00	; 0
      000187 00                     551 	.db #0x00	; 0
      000188 00                     552 	.db #0x00	; 0
      000189 00                     553 	.db #0x00	; 0
      00018A 00                     554 	.db #0x00	; 0
      00018B 00                     555 	.db #0x00	; 0
      00018C 00                     556 	.db #0x00	; 0
      00018D 30                     557 	.db #0x30	; 48	'0'
      00018E 30                     558 	.db #0x30	; 48	'0'
      00018F 00                     559 	.db #0x00	; 0
      000190 06                     560 	.db #0x06	; 6
      000191 0C                     561 	.db #0x0c	; 12
      000192 18                     562 	.db #0x18	; 24
      000193 30                     563 	.db #0x30	; 48	'0'
      000194 60                     564 	.db #0x60	; 96
      000195 C0                     565 	.db #0xc0	; 192
      000196 80                     566 	.db #0x80	; 128
      000197 00                     567 	.db #0x00	; 0
      000198 7C                     568 	.db #0x7c	; 124
      000199 C6                     569 	.db #0xc6	; 198
      00019A CE                     570 	.db #0xce	; 206
      00019B DE                     571 	.db #0xde	; 222
      00019C F6                     572 	.db #0xf6	; 246
      00019D E6                     573 	.db #0xe6	; 230
      00019E 7C                     574 	.db #0x7c	; 124
      00019F 00                     575 	.db #0x00	; 0
      0001A0 30                     576 	.db #0x30	; 48	'0'
      0001A1 70                     577 	.db #0x70	; 112	'p'
      0001A2 30                     578 	.db #0x30	; 48	'0'
      0001A3 30                     579 	.db #0x30	; 48	'0'
      0001A4 30                     580 	.db #0x30	; 48	'0'
      0001A5 30                     581 	.db #0x30	; 48	'0'
      0001A6 FC                     582 	.db #0xfc	; 252
      0001A7 00                     583 	.db #0x00	; 0
      0001A8 78                     584 	.db #0x78	; 120	'x'
      0001A9 CC                     585 	.db #0xcc	; 204
      0001AA 0C                     586 	.db #0x0c	; 12
      0001AB 38                     587 	.db #0x38	; 56	'8'
      0001AC 60                     588 	.db #0x60	; 96
      0001AD C4                     589 	.db #0xc4	; 196
      0001AE FC                     590 	.db #0xfc	; 252
      0001AF 00                     591 	.db #0x00	; 0
      0001B0 78                     592 	.db #0x78	; 120	'x'
      0001B1 CC                     593 	.db #0xcc	; 204
      0001B2 0C                     594 	.db #0x0c	; 12
      0001B3 38                     595 	.db #0x38	; 56	'8'
      0001B4 0C                     596 	.db #0x0c	; 12
      0001B5 CC                     597 	.db #0xcc	; 204
      0001B6 78                     598 	.db #0x78	; 120	'x'
      0001B7 00                     599 	.db #0x00	; 0
      0001B8 1C                     600 	.db #0x1c	; 28
      0001B9 3C                     601 	.db #0x3c	; 60
      0001BA 6C                     602 	.db #0x6c	; 108	'l'
      0001BB CC                     603 	.db #0xcc	; 204
      0001BC FE                     604 	.db #0xfe	; 254
      0001BD 0C                     605 	.db #0x0c	; 12
      0001BE 1E                     606 	.db #0x1e	; 30
      0001BF 00                     607 	.db #0x00	; 0
      0001C0 FC                     608 	.db #0xfc	; 252
      0001C1 C0                     609 	.db #0xc0	; 192
      0001C2 F8                     610 	.db #0xf8	; 248
      0001C3 0C                     611 	.db #0x0c	; 12
      0001C4 0C                     612 	.db #0x0c	; 12
      0001C5 CC                     613 	.db #0xcc	; 204
      0001C6 78                     614 	.db #0x78	; 120	'x'
      0001C7 00                     615 	.db #0x00	; 0
      0001C8 38                     616 	.db #0x38	; 56	'8'
      0001C9 60                     617 	.db #0x60	; 96
      0001CA C0                     618 	.db #0xc0	; 192
      0001CB F8                     619 	.db #0xf8	; 248
      0001CC CC                     620 	.db #0xcc	; 204
      0001CD CC                     621 	.db #0xcc	; 204
      0001CE 78                     622 	.db #0x78	; 120	'x'
      0001CF 00                     623 	.db #0x00	; 0
      0001D0 FC                     624 	.db #0xfc	; 252
      0001D1 CC                     625 	.db #0xcc	; 204
      0001D2 0C                     626 	.db #0x0c	; 12
      0001D3 18                     627 	.db #0x18	; 24
      0001D4 30                     628 	.db #0x30	; 48	'0'
      0001D5 30                     629 	.db #0x30	; 48	'0'
      0001D6 30                     630 	.db #0x30	; 48	'0'
      0001D7 00                     631 	.db #0x00	; 0
      0001D8 78                     632 	.db #0x78	; 120	'x'
      0001D9 CC                     633 	.db #0xcc	; 204
      0001DA CC                     634 	.db #0xcc	; 204
      0001DB 78                     635 	.db #0x78	; 120	'x'
      0001DC CC                     636 	.db #0xcc	; 204
      0001DD CC                     637 	.db #0xcc	; 204
      0001DE 78                     638 	.db #0x78	; 120	'x'
      0001DF 00                     639 	.db #0x00	; 0
      0001E0 78                     640 	.db #0x78	; 120	'x'
      0001E1 CC                     641 	.db #0xcc	; 204
      0001E2 CC                     642 	.db #0xcc	; 204
      0001E3 7C                     643 	.db #0x7c	; 124
      0001E4 0C                     644 	.db #0x0c	; 12
      0001E5 18                     645 	.db #0x18	; 24
      0001E6 70                     646 	.db #0x70	; 112	'p'
      0001E7 00                     647 	.db #0x00	; 0
      0001E8 00                     648 	.db #0x00	; 0
      0001E9 30                     649 	.db #0x30	; 48	'0'
      0001EA 30                     650 	.db #0x30	; 48	'0'
      0001EB 00                     651 	.db #0x00	; 0
      0001EC 00                     652 	.db #0x00	; 0
      0001ED 30                     653 	.db #0x30	; 48	'0'
      0001EE 30                     654 	.db #0x30	; 48	'0'
      0001EF 00                     655 	.db #0x00	; 0
      0001F0 00                     656 	.db #0x00	; 0
      0001F1 30                     657 	.db #0x30	; 48	'0'
      0001F2 30                     658 	.db #0x30	; 48	'0'
      0001F3 00                     659 	.db #0x00	; 0
      0001F4 30                     660 	.db #0x30	; 48	'0'
      0001F5 30                     661 	.db #0x30	; 48	'0'
      0001F6 60                     662 	.db #0x60	; 96
      0001F7 00                     663 	.db #0x00	; 0
      0001F8 18                     664 	.db #0x18	; 24
      0001F9 30                     665 	.db #0x30	; 48	'0'
      0001FA 60                     666 	.db #0x60	; 96
      0001FB C0                     667 	.db #0xc0	; 192
      0001FC 60                     668 	.db #0x60	; 96
      0001FD 30                     669 	.db #0x30	; 48	'0'
      0001FE 18                     670 	.db #0x18	; 24
      0001FF 00                     671 	.db #0x00	; 0
      000200 00                     672 	.db #0x00	; 0
      000201 00                     673 	.db #0x00	; 0
      000202 FC                     674 	.db #0xfc	; 252
      000203 00                     675 	.db #0x00	; 0
      000204 00                     676 	.db #0x00	; 0
      000205 FC                     677 	.db #0xfc	; 252
      000206 00                     678 	.db #0x00	; 0
      000207 00                     679 	.db #0x00	; 0
      000208 60                     680 	.db #0x60	; 96
      000209 30                     681 	.db #0x30	; 48	'0'
      00020A 18                     682 	.db #0x18	; 24
      00020B 0C                     683 	.db #0x0c	; 12
      00020C 18                     684 	.db #0x18	; 24
      00020D 30                     685 	.db #0x30	; 48	'0'
      00020E 60                     686 	.db #0x60	; 96
      00020F 00                     687 	.db #0x00	; 0
      000210 78                     688 	.db #0x78	; 120	'x'
      000211 CC                     689 	.db #0xcc	; 204
      000212 0C                     690 	.db #0x0c	; 12
      000213 18                     691 	.db #0x18	; 24
      000214 30                     692 	.db #0x30	; 48	'0'
      000215 00                     693 	.db #0x00	; 0
      000216 30                     694 	.db #0x30	; 48	'0'
      000217 00                     695 	.db #0x00	; 0
      000218 7C                     696 	.db #0x7c	; 124
      000219 C6                     697 	.db #0xc6	; 198
      00021A DE                     698 	.db #0xde	; 222
      00021B DE                     699 	.db #0xde	; 222
      00021C DE                     700 	.db #0xde	; 222
      00021D C0                     701 	.db #0xc0	; 192
      00021E 78                     702 	.db #0x78	; 120	'x'
      00021F 00                     703 	.db #0x00	; 0
      000220 30                     704 	.db #0x30	; 48	'0'
      000221 78                     705 	.db #0x78	; 120	'x'
      000222 CC                     706 	.db #0xcc	; 204
      000223 CC                     707 	.db #0xcc	; 204
      000224 FC                     708 	.db #0xfc	; 252
      000225 CC                     709 	.db #0xcc	; 204
      000226 CC                     710 	.db #0xcc	; 204
      000227 00                     711 	.db #0x00	; 0
      000228 FC                     712 	.db #0xfc	; 252
      000229 66                     713 	.db #0x66	; 102	'f'
      00022A 66                     714 	.db #0x66	; 102	'f'
      00022B 7C                     715 	.db #0x7c	; 124
      00022C 66                     716 	.db #0x66	; 102	'f'
      00022D 66                     717 	.db #0x66	; 102	'f'
      00022E FC                     718 	.db #0xfc	; 252
      00022F 00                     719 	.db #0x00	; 0
      000230 3C                     720 	.db #0x3c	; 60
      000231 66                     721 	.db #0x66	; 102	'f'
      000232 C0                     722 	.db #0xc0	; 192
      000233 C0                     723 	.db #0xc0	; 192
      000234 C0                     724 	.db #0xc0	; 192
      000235 66                     725 	.db #0x66	; 102	'f'
      000236 3C                     726 	.db #0x3c	; 60
      000237 00                     727 	.db #0x00	; 0
      000238 F8                     728 	.db #0xf8	; 248
      000239 6C                     729 	.db #0x6c	; 108	'l'
      00023A 66                     730 	.db #0x66	; 102	'f'
      00023B 66                     731 	.db #0x66	; 102	'f'
      00023C 66                     732 	.db #0x66	; 102	'f'
      00023D 6C                     733 	.db #0x6c	; 108	'l'
      00023E F8                     734 	.db #0xf8	; 248
      00023F 00                     735 	.db #0x00	; 0
      000240 FE                     736 	.db #0xfe	; 254
      000241 62                     737 	.db #0x62	; 98	'b'
      000242 68                     738 	.db #0x68	; 104	'h'
      000243 78                     739 	.db #0x78	; 120	'x'
      000244 68                     740 	.db #0x68	; 104	'h'
      000245 62                     741 	.db #0x62	; 98	'b'
      000246 FE                     742 	.db #0xfe	; 254
      000247 00                     743 	.db #0x00	; 0
      000248 FE                     744 	.db #0xfe	; 254
      000249 62                     745 	.db #0x62	; 98	'b'
      00024A 68                     746 	.db #0x68	; 104	'h'
      00024B 78                     747 	.db #0x78	; 120	'x'
      00024C 68                     748 	.db #0x68	; 104	'h'
      00024D 60                     749 	.db #0x60	; 96
      00024E F0                     750 	.db #0xf0	; 240
      00024F 00                     751 	.db #0x00	; 0
      000250 3C                     752 	.db #0x3c	; 60
      000251 66                     753 	.db #0x66	; 102	'f'
      000252 C0                     754 	.db #0xc0	; 192
      000253 C0                     755 	.db #0xc0	; 192
      000254 CE                     756 	.db #0xce	; 206
      000255 66                     757 	.db #0x66	; 102	'f'
      000256 3E                     758 	.db #0x3e	; 62
      000257 00                     759 	.db #0x00	; 0
      000258 CC                     760 	.db #0xcc	; 204
      000259 CC                     761 	.db #0xcc	; 204
      00025A CC                     762 	.db #0xcc	; 204
      00025B FC                     763 	.db #0xfc	; 252
      00025C CC                     764 	.db #0xcc	; 204
      00025D CC                     765 	.db #0xcc	; 204
      00025E CC                     766 	.db #0xcc	; 204
      00025F 00                     767 	.db #0x00	; 0
      000260 78                     768 	.db #0x78	; 120	'x'
      000261 30                     769 	.db #0x30	; 48	'0'
      000262 30                     770 	.db #0x30	; 48	'0'
      000263 30                     771 	.db #0x30	; 48	'0'
      000264 30                     772 	.db #0x30	; 48	'0'
      000265 30                     773 	.db #0x30	; 48	'0'
      000266 78                     774 	.db #0x78	; 120	'x'
      000267 00                     775 	.db #0x00	; 0
      000268 1E                     776 	.db #0x1e	; 30
      000269 0C                     777 	.db #0x0c	; 12
      00026A 0C                     778 	.db #0x0c	; 12
      00026B 0C                     779 	.db #0x0c	; 12
      00026C CC                     780 	.db #0xcc	; 204
      00026D CC                     781 	.db #0xcc	; 204
      00026E 78                     782 	.db #0x78	; 120	'x'
      00026F 00                     783 	.db #0x00	; 0
      000270 E6                     784 	.db #0xe6	; 230
      000271 66                     785 	.db #0x66	; 102	'f'
      000272 6C                     786 	.db #0x6c	; 108	'l'
      000273 78                     787 	.db #0x78	; 120	'x'
      000274 6C                     788 	.db #0x6c	; 108	'l'
      000275 66                     789 	.db #0x66	; 102	'f'
      000276 E6                     790 	.db #0xe6	; 230
      000277 00                     791 	.db #0x00	; 0
      000278 F0                     792 	.db #0xf0	; 240
      000279 60                     793 	.db #0x60	; 96
      00027A 60                     794 	.db #0x60	; 96
      00027B 60                     795 	.db #0x60	; 96
      00027C 62                     796 	.db #0x62	; 98	'b'
      00027D 66                     797 	.db #0x66	; 102	'f'
      00027E FE                     798 	.db #0xfe	; 254
      00027F 00                     799 	.db #0x00	; 0
      000280 C6                     800 	.db #0xc6	; 198
      000281 EE                     801 	.db #0xee	; 238
      000282 FE                     802 	.db #0xfe	; 254
      000283 FE                     803 	.db #0xfe	; 254
      000284 D6                     804 	.db #0xd6	; 214
      000285 C6                     805 	.db #0xc6	; 198
      000286 C6                     806 	.db #0xc6	; 198
      000287 00                     807 	.db #0x00	; 0
      000288 C6                     808 	.db #0xc6	; 198
      000289 E6                     809 	.db #0xe6	; 230
      00028A F6                     810 	.db #0xf6	; 246
      00028B DE                     811 	.db #0xde	; 222
      00028C CE                     812 	.db #0xce	; 206
      00028D C6                     813 	.db #0xc6	; 198
      00028E C6                     814 	.db #0xc6	; 198
      00028F 00                     815 	.db #0x00	; 0
      000290 38                     816 	.db #0x38	; 56	'8'
      000291 6C                     817 	.db #0x6c	; 108	'l'
      000292 C6                     818 	.db #0xc6	; 198
      000293 C6                     819 	.db #0xc6	; 198
      000294 C6                     820 	.db #0xc6	; 198
      000295 6C                     821 	.db #0x6c	; 108	'l'
      000296 38                     822 	.db #0x38	; 56	'8'
      000297 00                     823 	.db #0x00	; 0
      000298 FC                     824 	.db #0xfc	; 252
      000299 66                     825 	.db #0x66	; 102	'f'
      00029A 66                     826 	.db #0x66	; 102	'f'
      00029B 7C                     827 	.db #0x7c	; 124
      00029C 60                     828 	.db #0x60	; 96
      00029D 60                     829 	.db #0x60	; 96
      00029E F0                     830 	.db #0xf0	; 240
      00029F 00                     831 	.db #0x00	; 0
      0002A0 78                     832 	.db #0x78	; 120	'x'
      0002A1 CC                     833 	.db #0xcc	; 204
      0002A2 CC                     834 	.db #0xcc	; 204
      0002A3 CC                     835 	.db #0xcc	; 204
      0002A4 DC                     836 	.db #0xdc	; 220
      0002A5 78                     837 	.db #0x78	; 120	'x'
      0002A6 1C                     838 	.db #0x1c	; 28
      0002A7 00                     839 	.db #0x00	; 0
      0002A8 FC                     840 	.db #0xfc	; 252
      0002A9 66                     841 	.db #0x66	; 102	'f'
      0002AA 66                     842 	.db #0x66	; 102	'f'
      0002AB 7C                     843 	.db #0x7c	; 124
      0002AC 6C                     844 	.db #0x6c	; 108	'l'
      0002AD 66                     845 	.db #0x66	; 102	'f'
      0002AE E6                     846 	.db #0xe6	; 230
      0002AF 00                     847 	.db #0x00	; 0
      0002B0 78                     848 	.db #0x78	; 120	'x'
      0002B1 CC                     849 	.db #0xcc	; 204
      0002B2 E0                     850 	.db #0xe0	; 224
      0002B3 70                     851 	.db #0x70	; 112	'p'
      0002B4 1C                     852 	.db #0x1c	; 28
      0002B5 CC                     853 	.db #0xcc	; 204
      0002B6 78                     854 	.db #0x78	; 120	'x'
      0002B7 00                     855 	.db #0x00	; 0
      0002B8 FC                     856 	.db #0xfc	; 252
      0002B9 B4                     857 	.db #0xb4	; 180
      0002BA 30                     858 	.db #0x30	; 48	'0'
      0002BB 30                     859 	.db #0x30	; 48	'0'
      0002BC 30                     860 	.db #0x30	; 48	'0'
      0002BD 30                     861 	.db #0x30	; 48	'0'
      0002BE 78                     862 	.db #0x78	; 120	'x'
      0002BF 00                     863 	.db #0x00	; 0
      0002C0 CC                     864 	.db #0xcc	; 204
      0002C1 CC                     865 	.db #0xcc	; 204
      0002C2 CC                     866 	.db #0xcc	; 204
      0002C3 CC                     867 	.db #0xcc	; 204
      0002C4 CC                     868 	.db #0xcc	; 204
      0002C5 CC                     869 	.db #0xcc	; 204
      0002C6 FC                     870 	.db #0xfc	; 252
      0002C7 00                     871 	.db #0x00	; 0
      0002C8 CC                     872 	.db #0xcc	; 204
      0002C9 CC                     873 	.db #0xcc	; 204
      0002CA CC                     874 	.db #0xcc	; 204
      0002CB CC                     875 	.db #0xcc	; 204
      0002CC CC                     876 	.db #0xcc	; 204
      0002CD 78                     877 	.db #0x78	; 120	'x'
      0002CE 30                     878 	.db #0x30	; 48	'0'
      0002CF 00                     879 	.db #0x00	; 0
      0002D0 C6                     880 	.db #0xc6	; 198
      0002D1 C6                     881 	.db #0xc6	; 198
      0002D2 C6                     882 	.db #0xc6	; 198
      0002D3 D6                     883 	.db #0xd6	; 214
      0002D4 FE                     884 	.db #0xfe	; 254
      0002D5 EE                     885 	.db #0xee	; 238
      0002D6 C6                     886 	.db #0xc6	; 198
      0002D7 00                     887 	.db #0x00	; 0
      0002D8 C6                     888 	.db #0xc6	; 198
      0002D9 C6                     889 	.db #0xc6	; 198
      0002DA 6C                     890 	.db #0x6c	; 108	'l'
      0002DB 38                     891 	.db #0x38	; 56	'8'
      0002DC 38                     892 	.db #0x38	; 56	'8'
      0002DD 6C                     893 	.db #0x6c	; 108	'l'
      0002DE C6                     894 	.db #0xc6	; 198
      0002DF 00                     895 	.db #0x00	; 0
      0002E0 CC                     896 	.db #0xcc	; 204
      0002E1 CC                     897 	.db #0xcc	; 204
      0002E2 CC                     898 	.db #0xcc	; 204
      0002E3 78                     899 	.db #0x78	; 120	'x'
      0002E4 30                     900 	.db #0x30	; 48	'0'
      0002E5 30                     901 	.db #0x30	; 48	'0'
      0002E6 78                     902 	.db #0x78	; 120	'x'
      0002E7 00                     903 	.db #0x00	; 0
      0002E8 FE                     904 	.db #0xfe	; 254
      0002E9 C6                     905 	.db #0xc6	; 198
      0002EA 8C                     906 	.db #0x8c	; 140
      0002EB 18                     907 	.db #0x18	; 24
      0002EC 32                     908 	.db #0x32	; 50	'2'
      0002ED 66                     909 	.db #0x66	; 102	'f'
      0002EE FE                     910 	.db #0xfe	; 254
      0002EF 00                     911 	.db #0x00	; 0
      0002F0 78                     912 	.db #0x78	; 120	'x'
      0002F1 60                     913 	.db #0x60	; 96
      0002F2 60                     914 	.db #0x60	; 96
      0002F3 60                     915 	.db #0x60	; 96
      0002F4 60                     916 	.db #0x60	; 96
      0002F5 60                     917 	.db #0x60	; 96
      0002F6 78                     918 	.db #0x78	; 120	'x'
      0002F7 00                     919 	.db #0x00	; 0
      0002F8 C0                     920 	.db #0xc0	; 192
      0002F9 60                     921 	.db #0x60	; 96
      0002FA 30                     922 	.db #0x30	; 48	'0'
      0002FB 18                     923 	.db #0x18	; 24
      0002FC 0C                     924 	.db #0x0c	; 12
      0002FD 06                     925 	.db #0x06	; 6
      0002FE 02                     926 	.db #0x02	; 2
      0002FF 00                     927 	.db #0x00	; 0
      000300 78                     928 	.db #0x78	; 120	'x'
      000301 18                     929 	.db #0x18	; 24
      000302 18                     930 	.db #0x18	; 24
      000303 18                     931 	.db #0x18	; 24
      000304 18                     932 	.db #0x18	; 24
      000305 18                     933 	.db #0x18	; 24
      000306 78                     934 	.db #0x78	; 120	'x'
      000307 00                     935 	.db #0x00	; 0
      000308 10                     936 	.db #0x10	; 16
      000309 38                     937 	.db #0x38	; 56	'8'
      00030A 6C                     938 	.db #0x6c	; 108	'l'
      00030B C6                     939 	.db #0xc6	; 198
      00030C 00                     940 	.db #0x00	; 0
      00030D 00                     941 	.db #0x00	; 0
      00030E 00                     942 	.db #0x00	; 0
      00030F 00                     943 	.db #0x00	; 0
      000310 00                     944 	.db #0x00	; 0
      000311 00                     945 	.db #0x00	; 0
      000312 00                     946 	.db #0x00	; 0
      000313 00                     947 	.db #0x00	; 0
      000314 00                     948 	.db #0x00	; 0
      000315 00                     949 	.db #0x00	; 0
      000316 00                     950 	.db #0x00	; 0
      000317 FF                     951 	.db #0xff	; 255
      000318 30                     952 	.db #0x30	; 48	'0'
      000319 30                     953 	.db #0x30	; 48	'0'
      00031A 18                     954 	.db #0x18	; 24
      00031B 00                     955 	.db #0x00	; 0
      00031C 00                     956 	.db #0x00	; 0
      00031D 00                     957 	.db #0x00	; 0
      00031E 00                     958 	.db #0x00	; 0
      00031F 00                     959 	.db #0x00	; 0
      000320 00                     960 	.db #0x00	; 0
      000321 00                     961 	.db #0x00	; 0
      000322 78                     962 	.db #0x78	; 120	'x'
      000323 0C                     963 	.db #0x0c	; 12
      000324 7C                     964 	.db #0x7c	; 124
      000325 CC                     965 	.db #0xcc	; 204
      000326 76                     966 	.db #0x76	; 118	'v'
      000327 00                     967 	.db #0x00	; 0
      000328 E0                     968 	.db #0xe0	; 224
      000329 60                     969 	.db #0x60	; 96
      00032A 60                     970 	.db #0x60	; 96
      00032B 7C                     971 	.db #0x7c	; 124
      00032C 66                     972 	.db #0x66	; 102	'f'
      00032D 66                     973 	.db #0x66	; 102	'f'
      00032E DC                     974 	.db #0xdc	; 220
      00032F 00                     975 	.db #0x00	; 0
      000330 00                     976 	.db #0x00	; 0
      000331 00                     977 	.db #0x00	; 0
      000332 78                     978 	.db #0x78	; 120	'x'
      000333 CC                     979 	.db #0xcc	; 204
      000334 C0                     980 	.db #0xc0	; 192
      000335 CC                     981 	.db #0xcc	; 204
      000336 78                     982 	.db #0x78	; 120	'x'
      000337 00                     983 	.db #0x00	; 0
      000338 1C                     984 	.db #0x1c	; 28
      000339 0C                     985 	.db #0x0c	; 12
      00033A 0C                     986 	.db #0x0c	; 12
      00033B 7C                     987 	.db #0x7c	; 124
      00033C CC                     988 	.db #0xcc	; 204
      00033D CC                     989 	.db #0xcc	; 204
      00033E 76                     990 	.db #0x76	; 118	'v'
      00033F 00                     991 	.db #0x00	; 0
      000340 00                     992 	.db #0x00	; 0
      000341 00                     993 	.db #0x00	; 0
      000342 78                     994 	.db #0x78	; 120	'x'
      000343 CC                     995 	.db #0xcc	; 204
      000344 FC                     996 	.db #0xfc	; 252
      000345 C0                     997 	.db #0xc0	; 192
      000346 78                     998 	.db #0x78	; 120	'x'
      000347 00                     999 	.db #0x00	; 0
      000348 38                    1000 	.db #0x38	; 56	'8'
      000349 6C                    1001 	.db #0x6c	; 108	'l'
      00034A 60                    1002 	.db #0x60	; 96
      00034B F0                    1003 	.db #0xf0	; 240
      00034C 60                    1004 	.db #0x60	; 96
      00034D 60                    1005 	.db #0x60	; 96
      00034E F0                    1006 	.db #0xf0	; 240
      00034F 00                    1007 	.db #0x00	; 0
      000350 00                    1008 	.db #0x00	; 0
      000351 00                    1009 	.db #0x00	; 0
      000352 76                    1010 	.db #0x76	; 118	'v'
      000353 CC                    1011 	.db #0xcc	; 204
      000354 CC                    1012 	.db #0xcc	; 204
      000355 7C                    1013 	.db #0x7c	; 124
      000356 0C                    1014 	.db #0x0c	; 12
      000357 F8                    1015 	.db #0xf8	; 248
      000358 E0                    1016 	.db #0xe0	; 224
      000359 60                    1017 	.db #0x60	; 96
      00035A 6C                    1018 	.db #0x6c	; 108	'l'
      00035B 76                    1019 	.db #0x76	; 118	'v'
      00035C 66                    1020 	.db #0x66	; 102	'f'
      00035D 66                    1021 	.db #0x66	; 102	'f'
      00035E E6                    1022 	.db #0xe6	; 230
      00035F 00                    1023 	.db #0x00	; 0
      000360 30                    1024 	.db #0x30	; 48	'0'
      000361 00                    1025 	.db #0x00	; 0
      000362 70                    1026 	.db #0x70	; 112	'p'
      000363 30                    1027 	.db #0x30	; 48	'0'
      000364 30                    1028 	.db #0x30	; 48	'0'
      000365 30                    1029 	.db #0x30	; 48	'0'
      000366 78                    1030 	.db #0x78	; 120	'x'
      000367 00                    1031 	.db #0x00	; 0
      000368 0C                    1032 	.db #0x0c	; 12
      000369 00                    1033 	.db #0x00	; 0
      00036A 0C                    1034 	.db #0x0c	; 12
      00036B 0C                    1035 	.db #0x0c	; 12
      00036C 0C                    1036 	.db #0x0c	; 12
      00036D CC                    1037 	.db #0xcc	; 204
      00036E CC                    1038 	.db #0xcc	; 204
      00036F 78                    1039 	.db #0x78	; 120	'x'
      000370 E0                    1040 	.db #0xe0	; 224
      000371 60                    1041 	.db #0x60	; 96
      000372 66                    1042 	.db #0x66	; 102	'f'
      000373 6C                    1043 	.db #0x6c	; 108	'l'
      000374 78                    1044 	.db #0x78	; 120	'x'
      000375 6C                    1045 	.db #0x6c	; 108	'l'
      000376 E6                    1046 	.db #0xe6	; 230
      000377 00                    1047 	.db #0x00	; 0
      000378 70                    1048 	.db #0x70	; 112	'p'
      000379 30                    1049 	.db #0x30	; 48	'0'
      00037A 30                    1050 	.db #0x30	; 48	'0'
      00037B 30                    1051 	.db #0x30	; 48	'0'
      00037C 30                    1052 	.db #0x30	; 48	'0'
      00037D 30                    1053 	.db #0x30	; 48	'0'
      00037E 78                    1054 	.db #0x78	; 120	'x'
      00037F 00                    1055 	.db #0x00	; 0
      000380 00                    1056 	.db #0x00	; 0
      000381 00                    1057 	.db #0x00	; 0
      000382 CC                    1058 	.db #0xcc	; 204
      000383 FE                    1059 	.db #0xfe	; 254
      000384 FE                    1060 	.db #0xfe	; 254
      000385 D6                    1061 	.db #0xd6	; 214
      000386 C6                    1062 	.db #0xc6	; 198
      000387 00                    1063 	.db #0x00	; 0
      000388 00                    1064 	.db #0x00	; 0
      000389 00                    1065 	.db #0x00	; 0
      00038A F8                    1066 	.db #0xf8	; 248
      00038B CC                    1067 	.db #0xcc	; 204
      00038C CC                    1068 	.db #0xcc	; 204
      00038D CC                    1069 	.db #0xcc	; 204
      00038E CC                    1070 	.db #0xcc	; 204
      00038F 00                    1071 	.db #0x00	; 0
      000390 00                    1072 	.db #0x00	; 0
      000391 00                    1073 	.db #0x00	; 0
      000392 78                    1074 	.db #0x78	; 120	'x'
      000393 CC                    1075 	.db #0xcc	; 204
      000394 CC                    1076 	.db #0xcc	; 204
      000395 CC                    1077 	.db #0xcc	; 204
      000396 78                    1078 	.db #0x78	; 120	'x'
      000397 00                    1079 	.db #0x00	; 0
      000398 00                    1080 	.db #0x00	; 0
      000399 00                    1081 	.db #0x00	; 0
      00039A DC                    1082 	.db #0xdc	; 220
      00039B 66                    1083 	.db #0x66	; 102	'f'
      00039C 66                    1084 	.db #0x66	; 102	'f'
      00039D 7C                    1085 	.db #0x7c	; 124
      00039E 60                    1086 	.db #0x60	; 96
      00039F F0                    1087 	.db #0xf0	; 240
      0003A0 00                    1088 	.db #0x00	; 0
      0003A1 00                    1089 	.db #0x00	; 0
      0003A2 76                    1090 	.db #0x76	; 118	'v'
      0003A3 CC                    1091 	.db #0xcc	; 204
      0003A4 CC                    1092 	.db #0xcc	; 204
      0003A5 7C                    1093 	.db #0x7c	; 124
      0003A6 0C                    1094 	.db #0x0c	; 12
      0003A7 1E                    1095 	.db #0x1e	; 30
      0003A8 00                    1096 	.db #0x00	; 0
      0003A9 00                    1097 	.db #0x00	; 0
      0003AA DC                    1098 	.db #0xdc	; 220
      0003AB 76                    1099 	.db #0x76	; 118	'v'
      0003AC 66                    1100 	.db #0x66	; 102	'f'
      0003AD 60                    1101 	.db #0x60	; 96
      0003AE F0                    1102 	.db #0xf0	; 240
      0003AF 00                    1103 	.db #0x00	; 0
      0003B0 00                    1104 	.db #0x00	; 0
      0003B1 00                    1105 	.db #0x00	; 0
      0003B2 7C                    1106 	.db #0x7c	; 124
      0003B3 C0                    1107 	.db #0xc0	; 192
      0003B4 78                    1108 	.db #0x78	; 120	'x'
      0003B5 0C                    1109 	.db #0x0c	; 12
      0003B6 F8                    1110 	.db #0xf8	; 248
      0003B7 00                    1111 	.db #0x00	; 0
      0003B8 10                    1112 	.db #0x10	; 16
      0003B9 30                    1113 	.db #0x30	; 48	'0'
      0003BA 7C                    1114 	.db #0x7c	; 124
      0003BB 30                    1115 	.db #0x30	; 48	'0'
      0003BC 30                    1116 	.db #0x30	; 48	'0'
      0003BD 34                    1117 	.db #0x34	; 52	'4'
      0003BE 18                    1118 	.db #0x18	; 24
      0003BF 00                    1119 	.db #0x00	; 0
      0003C0 00                    1120 	.db #0x00	; 0
      0003C1 00                    1121 	.db #0x00	; 0
      0003C2 CC                    1122 	.db #0xcc	; 204
      0003C3 CC                    1123 	.db #0xcc	; 204
      0003C4 CC                    1124 	.db #0xcc	; 204
      0003C5 CC                    1125 	.db #0xcc	; 204
      0003C6 76                    1126 	.db #0x76	; 118	'v'
      0003C7 00                    1127 	.db #0x00	; 0
      0003C8 00                    1128 	.db #0x00	; 0
      0003C9 00                    1129 	.db #0x00	; 0
      0003CA CC                    1130 	.db #0xcc	; 204
      0003CB CC                    1131 	.db #0xcc	; 204
      0003CC CC                    1132 	.db #0xcc	; 204
      0003CD 78                    1133 	.db #0x78	; 120	'x'
      0003CE 30                    1134 	.db #0x30	; 48	'0'
      0003CF 00                    1135 	.db #0x00	; 0
      0003D0 00                    1136 	.db #0x00	; 0
      0003D1 00                    1137 	.db #0x00	; 0
      0003D2 C6                    1138 	.db #0xc6	; 198
      0003D3 D6                    1139 	.db #0xd6	; 214
      0003D4 FE                    1140 	.db #0xfe	; 254
      0003D5 FE                    1141 	.db #0xfe	; 254
      0003D6 6C                    1142 	.db #0x6c	; 108	'l'
      0003D7 00                    1143 	.db #0x00	; 0
      0003D8 00                    1144 	.db #0x00	; 0
      0003D9 00                    1145 	.db #0x00	; 0
      0003DA C6                    1146 	.db #0xc6	; 198
      0003DB 6C                    1147 	.db #0x6c	; 108	'l'
      0003DC 38                    1148 	.db #0x38	; 56	'8'
      0003DD 6C                    1149 	.db #0x6c	; 108	'l'
      0003DE C6                    1150 	.db #0xc6	; 198
      0003DF 00                    1151 	.db #0x00	; 0
      0003E0 00                    1152 	.db #0x00	; 0
      0003E1 00                    1153 	.db #0x00	; 0
      0003E2 CC                    1154 	.db #0xcc	; 204
      0003E3 CC                    1155 	.db #0xcc	; 204
      0003E4 CC                    1156 	.db #0xcc	; 204
      0003E5 7C                    1157 	.db #0x7c	; 124
      0003E6 0C                    1158 	.db #0x0c	; 12
      0003E7 F8                    1159 	.db #0xf8	; 248
      0003E8 00                    1160 	.db #0x00	; 0
      0003E9 00                    1161 	.db #0x00	; 0
      0003EA FC                    1162 	.db #0xfc	; 252
      0003EB 98                    1163 	.db #0x98	; 152
      0003EC 30                    1164 	.db #0x30	; 48	'0'
      0003ED 64                    1165 	.db #0x64	; 100	'd'
      0003EE FC                    1166 	.db #0xfc	; 252
      0003EF 00                    1167 	.db #0x00	; 0
      0003F0 1C                    1168 	.db #0x1c	; 28
      0003F1 30                    1169 	.db #0x30	; 48	'0'
      0003F2 30                    1170 	.db #0x30	; 48	'0'
      0003F3 E0                    1171 	.db #0xe0	; 224
      0003F4 30                    1172 	.db #0x30	; 48	'0'
      0003F5 30                    1173 	.db #0x30	; 48	'0'
      0003F6 1C                    1174 	.db #0x1c	; 28
      0003F7 00                    1175 	.db #0x00	; 0
      0003F8 18                    1176 	.db #0x18	; 24
      0003F9 18                    1177 	.db #0x18	; 24
      0003FA 18                    1178 	.db #0x18	; 24
      0003FB 00                    1179 	.db #0x00	; 0
      0003FC 18                    1180 	.db #0x18	; 24
      0003FD 18                    1181 	.db #0x18	; 24
      0003FE 18                    1182 	.db #0x18	; 24
      0003FF 00                    1183 	.db #0x00	; 0
      000400 E0                    1184 	.db #0xe0	; 224
      000401 30                    1185 	.db #0x30	; 48	'0'
      000402 30                    1186 	.db #0x30	; 48	'0'
      000403 1C                    1187 	.db #0x1c	; 28
      000404 30                    1188 	.db #0x30	; 48	'0'
      000405 30                    1189 	.db #0x30	; 48	'0'
      000406 E0                    1190 	.db #0xe0	; 224
      000407 00                    1191 	.db #0x00	; 0
      000408 76                    1192 	.db #0x76	; 118	'v'
      000409 DC                    1193 	.db #0xdc	; 220
      00040A 00                    1194 	.db #0x00	; 0
      00040B 00                    1195 	.db #0x00	; 0
      00040C 00                    1196 	.db #0x00	; 0
      00040D 00                    1197 	.db #0x00	; 0
      00040E 00                    1198 	.db #0x00	; 0
      00040F 00                    1199 	.db #0x00	; 0
      000410 00                    1200 	.db #0x00	; 0
      000411 10                    1201 	.db #0x10	; 16
      000412 38                    1202 	.db #0x38	; 56	'8'
      000413 6C                    1203 	.db #0x6c	; 108	'l'
      000414 C6                    1204 	.db #0xc6	; 198
      000415 C6                    1205 	.db #0xc6	; 198
      000416 FE                    1206 	.db #0xfe	; 254
      000417 00                    1207 	.db #0x00	; 0
      000418                       1208 _pattern_black_0:
      000418 FF                    1209 	.db #0xff	; 255
      000419 FF                    1210 	.db #0xff	; 255
      00041A FF                    1211 	.db #0xff	; 255
      00041B FF                    1212 	.db #0xff	; 255
      00041C FF                    1213 	.db #0xff	; 255
      00041D FF                    1214 	.db #0xff	; 255
      00041E FF                    1215 	.db #0xff	; 255
      00041F FF                    1216 	.db #0xff	; 255
      000420                       1217 _pattern_black_1:
      000420 FE                    1218 	.db #0xfe	; 254
      000421 FF                    1219 	.db #0xff	; 255
      000422 FF                    1220 	.db #0xff	; 255
      000423 FF                    1221 	.db #0xff	; 255
      000424 FE                    1222 	.db #0xfe	; 254
      000425 FF                    1223 	.db #0xff	; 255
      000426 FF                    1224 	.db #0xff	; 255
      000427 FE                    1225 	.db #0xfe	; 254
      000428                       1226 _pattern_black_2:
      000428 FF                    1227 	.db #0xff	; 255
      000429 FF                    1228 	.db #0xff	; 255
      00042A FF                    1229 	.db #0xff	; 255
      00042B FF                    1230 	.db #0xff	; 255
      00042C FF                    1231 	.db #0xff	; 255
      00042D FB                    1232 	.db #0xfb	; 251
      00042E FF                    1233 	.db #0xff	; 255
      00042F BB                    1234 	.db #0xbb	; 187
      000430                       1235 _pattern_black_3:
      000430 FB                    1236 	.db #0xfb	; 251
      000431 FE                    1237 	.db #0xfe	; 254
      000432 FD                    1238 	.db #0xfd	; 253
      000433 FE                    1239 	.db #0xfe	; 254
      000434 F7                    1240 	.db #0xf7	; 247
      000435 FA                    1241 	.db #0xfa	; 250
      000436 AF                    1242 	.db #0xaf	; 175
      000437 55                    1243 	.db #0x55	; 85	'U'
      000438                       1244 _pattern_0:
      000438 9F                    1245 	.db #0x9f	; 159
      000439 90                    1246 	.db #0x90	; 144
      00043A 90                    1247 	.db #0x90	; 144
      00043B 93                    1248 	.db #0x93	; 147
      00043C 92                    1249 	.db #0x92	; 146
      00043D 92                    1250 	.db #0x92	; 146
      00043E 92                    1251 	.db #0x92	; 146
      00043F 92                    1252 	.db #0x92	; 146
      000440                       1253 _pattern_1:
      000440 FF                    1254 	.db #0xff	; 255
      000441 01                    1255 	.db #0x01	; 1
      000442 01                    1256 	.db #0x01	; 1
      000443 F9                    1257 	.db #0xf9	; 249
      000444 09                    1258 	.db #0x09	; 9
      000445 09                    1259 	.db #0x09	; 9
      000446 49                    1260 	.db #0x49	; 73	'I'
      000447 49                    1261 	.db #0x49	; 73	'I'
      000448                       1262 _pattern_2:
      000448 92                    1263 	.db #0x92	; 146
      000449 93                    1264 	.db #0x93	; 147
      00044A 90                    1265 	.db #0x90	; 144
      00044B 90                    1266 	.db #0x90	; 144
      00044C 9F                    1267 	.db #0x9f	; 159
      00044D 80                    1268 	.db #0x80	; 128
      00044E 80                    1269 	.db #0x80	; 128
      00044F FF                    1270 	.db #0xff	; 255
      000450                       1271 _pattern_3:
      000450 49                    1272 	.db #0x49	; 73	'I'
      000451 C9                    1273 	.db #0xc9	; 201
      000452 09                    1274 	.db #0x09	; 9
      000453 09                    1275 	.db #0x09	; 9
      000454 F9                    1276 	.db #0xf9	; 249
      000455 01                    1277 	.db #0x01	; 1
      000456 01                    1278 	.db #0x01	; 1
      000457 FF                    1279 	.db #0xff	; 255
      000458                       1280 _pattern_4:
      000458 7F                    1281 	.db #0x7f	; 127
      000459 81                    1282 	.db #0x81	; 129
      00045A 83                    1283 	.db #0x83	; 131
      00045B 87                    1284 	.db #0x87	; 135
      00045C 8F                    1285 	.db #0x8f	; 143
      00045D 9F                    1286 	.db #0x9f	; 159
      00045E BF                    1287 	.db #0xbf	; 191
      00045F FF                    1288 	.db #0xff	; 255
      000460                       1289 _pattern_5:
      000460 FE                    1290 	.db #0xfe	; 254
      000461 81                    1291 	.db #0x81	; 129
      000462 C1                    1292 	.db #0xc1	; 193
      000463 E1                    1293 	.db #0xe1	; 225
      000464 F1                    1294 	.db #0xf1	; 241
      000465 F9                    1295 	.db #0xf9	; 249
      000466 FD                    1296 	.db #0xfd	; 253
      000467 FF                    1297 	.db #0xff	; 255
      000468                       1298 _pattern_6:
      000468 FF                    1299 	.db #0xff	; 255
      000469 BF                    1300 	.db #0xbf	; 191
      00046A 9F                    1301 	.db #0x9f	; 159
      00046B 8F                    1302 	.db #0x8f	; 143
      00046C 87                    1303 	.db #0x87	; 135
      00046D 83                    1304 	.db #0x83	; 131
      00046E 81                    1305 	.db #0x81	; 129
      00046F 7F                    1306 	.db #0x7f	; 127
      000470                       1307 _pattern_7:
      000470 FF                    1308 	.db #0xff	; 255
      000471 FD                    1309 	.db #0xfd	; 253
      000472 F9                    1310 	.db #0xf9	; 249
      000473 F1                    1311 	.db #0xf1	; 241
      000474 E1                    1312 	.db #0xe1	; 225
      000475 C1                    1313 	.db #0xc1	; 193
      000476 81                    1314 	.db #0x81	; 129
      000477 FE                    1315 	.db #0xfe	; 254
      000478                       1316 _pattern_8:
      000478 7F                    1317 	.db #0x7f	; 127
      000479 AE                    1318 	.db #0xae	; 174
      00047A FF                    1319 	.db #0xff	; 255
      00047B 5B                    1320 	.db #0x5b	; 91
      00047C FF                    1321 	.db #0xff	; 255
      00047D AE                    1322 	.db #0xae	; 174
      00047E FF                    1323 	.db #0xff	; 255
      00047F DF                    1324 	.db #0xdf	; 223
      000480                       1325 _pattern_9:
      000480 FE                    1326 	.db #0xfe	; 254
      000481 BD                    1327 	.db #0xbd	; 189
      000482 DF                    1328 	.db #0xdf	; 223
      000483 7F                    1329 	.db #0x7f	; 127
      000484 FB                    1330 	.db #0xfb	; 251
      000485 DF                    1331 	.db #0xdf	; 223
      000486 FE                    1332 	.db #0xfe	; 254
      000487 EF                    1333 	.db #0xef	; 239
      000488                       1334 _pattern_10:
      000488 7F                    1335 	.db #0x7f	; 127
      000489 FF                    1336 	.db #0xff	; 255
      00048A ED                    1337 	.db #0xed	; 237
      00048B FF                    1338 	.db #0xff	; 255
      00048C B6                    1339 	.db #0xb6	; 182
      00048D FE                    1340 	.db #0xfe	; 254
      00048E DB                    1341 	.db #0xdb	; 219
      00048F 7D                    1342 	.db #0x7d	; 125
      000490                       1343 _pattern_11:
      000490 FE                    1344 	.db #0xfe	; 254
      000491 FF                    1345 	.db #0xff	; 255
      000492 FE                    1346 	.db #0xfe	; 254
      000493 77                    1347 	.db #0x77	; 119	'w'
      000494 FE                    1348 	.db #0xfe	; 254
      000495 DD                    1349 	.db #0xdd	; 221
      000496 EF                    1350 	.db #0xef	; 239
      000497 5A                    1351 	.db #0x5a	; 90	'Z'
      000498                       1352 _pattern_12:
      000498 7F                    1353 	.db #0x7f	; 127
      000499 D5                    1354 	.db #0xd5	; 213
      00049A BF                    1355 	.db #0xbf	; 191
      00049B ED                    1356 	.db #0xed	; 237
      00049C BF                    1357 	.db #0xbf	; 191
      00049D F5                    1358 	.db #0xf5	; 245
      00049E BF                    1359 	.db #0xbf	; 191
      00049F FF                    1360 	.db #0xff	; 255
      0004A0                       1361 _pattern_13:
      0004A0 FE                    1362 	.db #0xfe	; 254
      0004A1 5F                    1363 	.db #0x5f	; 95
      0004A2 F5                    1364 	.db #0xf5	; 245
      0004A3 DF                    1365 	.db #0xdf	; 223
      0004A4 FF                    1366 	.db #0xff	; 255
      0004A5 FF                    1367 	.db #0xff	; 255
      0004A6 FF                    1368 	.db #0xff	; 255
      0004A7 FF                    1369 	.db #0xff	; 255
      0004A8                       1370 _pattern_14:
      0004A8 EF                    1371 	.db #0xef	; 239
      0004A9 BF                    1372 	.db #0xbf	; 191
      0004AA 7F                    1373 	.db #0x7f	; 127
      0004AB FF                    1374 	.db #0xff	; 255
      0004AC FF                    1375 	.db #0xff	; 255
      0004AD FF                    1376 	.db #0xff	; 255
      0004AE DB                    1377 	.db #0xdb	; 219
      0004AF 7F                    1378 	.db #0x7f	; 127
      0004B0                       1379 _pattern_15:
      0004B0 FF                    1380 	.db #0xff	; 255
      0004B1 FD                    1381 	.db #0xfd	; 253
      0004B2 FF                    1382 	.db #0xff	; 255
      0004B3 DB                    1383 	.db #0xdb	; 219
      0004B4 FD                    1384 	.db #0xfd	; 253
      0004B5 7B                    1385 	.db #0x7b	; 123
      0004B6 D7                    1386 	.db #0xd7	; 215
      0004B7 FE                    1387 	.db #0xfe	; 254
      0004B8                       1388 _pattern_16:
      0004B8 7F                    1389 	.db #0x7f	; 127
      0004B9 FF                    1390 	.db #0xff	; 255
      0004BA EA                    1391 	.db #0xea	; 234
      0004BB DF                    1392 	.db #0xdf	; 223
      0004BC FF                    1393 	.db #0xff	; 255
      0004BD DF                    1394 	.db #0xdf	; 223
      0004BE FF                    1395 	.db #0xff	; 255
      0004BF DF                    1396 	.db #0xdf	; 223
      0004C0                       1397 _pattern_17:
      0004C0 FE                    1398 	.db #0xfe	; 254
      0004C1 FF                    1399 	.db #0xff	; 255
      0004C2 AF                    1400 	.db #0xaf	; 175
      0004C3 FA                    1401 	.db #0xfa	; 250
      0004C4 FF                    1402 	.db #0xff	; 255
      0004C5 FA                    1403 	.db #0xfa	; 250
      0004C6 FF                    1404 	.db #0xff	; 255
      0004C7 FA                    1405 	.db #0xfa	; 250
      0004C8                       1406 _pattern_18:
      0004C8 FF                    1407 	.db #0xff	; 255
      0004C9 DF                    1408 	.db #0xdf	; 223
      0004CA FF                    1409 	.db #0xff	; 255
      0004CB DF                    1410 	.db #0xdf	; 223
      0004CC FF                    1411 	.db #0xff	; 255
      0004CD EA                    1412 	.db #0xea	; 234
      0004CE FF                    1413 	.db #0xff	; 255
      0004CF 55                    1414 	.db #0x55	; 85	'U'
      0004D0                       1415 _pattern_19:
      0004D0 FF                    1416 	.db #0xff	; 255
      0004D1 FA                    1417 	.db #0xfa	; 250
      0004D2 FF                    1418 	.db #0xff	; 255
      0004D3 FA                    1419 	.db #0xfa	; 250
      0004D4 F7                    1420 	.db #0xf7	; 247
      0004D5 AA                    1421 	.db #0xaa	; 170
      0004D6 FF                    1422 	.db #0xff	; 255
      0004D7 56                    1423 	.db #0x56	; 86	'V'
      0004D8                       1424 _pattern_20:
      0004D8 3F                    1425 	.db #0x3f	; 63
      0004D9 7F                    1426 	.db #0x7f	; 127
      0004DA E0                    1427 	.db #0xe0	; 224
      0004DB CE                    1428 	.db #0xce	; 206
      0004DC E6                    1429 	.db #0xe6	; 230
      0004DD 7C                    1430 	.db #0x7c	; 124
      0004DE 39                    1431 	.db #0x39	; 57	'9'
      0004DF 03                    1432 	.db #0x03	; 3
      0004E0                       1433 _pattern_21:
      0004E0 FF                    1434 	.db #0xff	; 255
      0004E1 FF                    1435 	.db #0xff	; 255
      0004E2 00                    1436 	.db #0x00	; 0
      0004E3 DB                    1437 	.db #0xdb	; 219
      0004E4 DB                    1438 	.db #0xdb	; 219
      0004E5 00                    1439 	.db #0x00	; 0
      0004E6 FF                    1440 	.db #0xff	; 255
      0004E7 FF                    1441 	.db #0xff	; 255
      0004E8                       1442 _pattern_22:
      0004E8 FC                    1443 	.db #0xfc	; 252
      0004E9 FE                    1444 	.db #0xfe	; 254
      0004EA 07                    1445 	.db #0x07	; 7
      0004EB 73                    1446 	.db #0x73	; 115	's'
      0004EC 67                    1447 	.db #0x67	; 103	'g'
      0004ED 3E                    1448 	.db #0x3e	; 62
      0004EE 9C                    1449 	.db #0x9c	; 156
      0004EF C0                    1450 	.db #0xc0	; 192
      0004F0                       1451 _pattern_23:
      0004F0 06                    1452 	.db #0x06	; 6
      0004F1 00                    1453 	.db #0x00	; 0
      0004F2 03                    1454 	.db #0x03	; 3
      0004F3 04                    1455 	.db #0x04	; 4
      0004F4 05                    1456 	.db #0x05	; 5
      0004F5 05                    1457 	.db #0x05	; 5
      0004F6 05                    1458 	.db #0x05	; 5
      0004F7 05                    1459 	.db #0x05	; 5
      0004F8                       1460 _pattern_24:
      0004F8 00                    1461 	.db #0x00	; 0
      0004F9 00                    1462 	.db #0x00	; 0
      0004FA 33                    1463 	.db #0x33	; 51	'3'
      0004FB 44                    1464 	.db #0x44	; 68	'D'
      0004FC 55                    1465 	.db #0x55	; 85	'U'
      0004FD 55                    1466 	.db #0x55	; 85	'U'
      0004FE 55                    1467 	.db #0x55	; 85	'U'
      0004FF 55                    1468 	.db #0x55	; 85	'U'
      000500                       1469 _pattern_25:
      000500 60                    1470 	.db #0x60	; 96
      000501 00                    1471 	.db #0x00	; 0
      000502 40                    1472 	.db #0x40	; 64
      000503 20                    1473 	.db #0x20	; 32
      000504 20                    1474 	.db #0x20	; 32
      000505 20                    1475 	.db #0x20	; 32
      000506 20                    1476 	.db #0x20	; 32
      000507 20                    1477 	.db #0x20	; 32
      000508                       1478 _pattern_26:
      000508 05                    1479 	.db #0x05	; 5
      000509 05                    1480 	.db #0x05	; 5
      00050A 05                    1481 	.db #0x05	; 5
      00050B 05                    1482 	.db #0x05	; 5
      00050C 05                    1483 	.db #0x05	; 5
      00050D 05                    1484 	.db #0x05	; 5
      00050E 05                    1485 	.db #0x05	; 5
      00050F 05                    1486 	.db #0x05	; 5
      000510                       1487 _pattern_27:
      000510 55                    1488 	.db #0x55	; 85	'U'
      000511 55                    1489 	.db #0x55	; 85	'U'
      000512 55                    1490 	.db #0x55	; 85	'U'
      000513 55                    1491 	.db #0x55	; 85	'U'
      000514 55                    1492 	.db #0x55	; 85	'U'
      000515 55                    1493 	.db #0x55	; 85	'U'
      000516 55                    1494 	.db #0x55	; 85	'U'
      000517 55                    1495 	.db #0x55	; 85	'U'
      000518                       1496 _pattern_28:
      000518 20                    1497 	.db #0x20	; 32
      000519 20                    1498 	.db #0x20	; 32
      00051A 20                    1499 	.db #0x20	; 32
      00051B 20                    1500 	.db #0x20	; 32
      00051C 20                    1501 	.db #0x20	; 32
      00051D 20                    1502 	.db #0x20	; 32
      00051E 20                    1503 	.db #0x20	; 32
      00051F 20                    1504 	.db #0x20	; 32
      000520                       1505 _pattern_29:
      000520 05                    1506 	.db #0x05	; 5
      000521 05                    1507 	.db #0x05	; 5
      000522 07                    1508 	.db #0x07	; 7
      000523 07                    1509 	.db #0x07	; 7
      000524 07                    1510 	.db #0x07	; 7
      000525 05                    1511 	.db #0x05	; 5
      000526 05                    1512 	.db #0x05	; 5
      000527 05                    1513 	.db #0x05	; 5
      000528                       1514 _pattern_30:
      000528 55                    1515 	.db #0x55	; 85	'U'
      000529 55                    1516 	.db #0x55	; 85	'U'
      00052A FF                    1517 	.db #0xff	; 255
      00052B FF                    1518 	.db #0xff	; 255
      00052C FF                    1519 	.db #0xff	; 255
      00052D 55                    1520 	.db #0x55	; 85	'U'
      00052E 55                    1521 	.db #0x55	; 85	'U'
      00052F 55                    1522 	.db #0x55	; 85	'U'
      000530                       1523 _pattern_31:
      000530 20                    1524 	.db #0x20	; 32
      000531 20                    1525 	.db #0x20	; 32
      000532 E0                    1526 	.db #0xe0	; 224
      000533 E0                    1527 	.db #0xe0	; 224
      000534 E0                    1528 	.db #0xe0	; 224
      000535 20                    1529 	.db #0x20	; 32
      000536 20                    1530 	.db #0x20	; 32
      000537 20                    1531 	.db #0x20	; 32
      000538                       1532 _pattern_37:
      000538 05                    1533 	.db #0x05	; 5
      000539 05                    1534 	.db #0x05	; 5
      00053A 05                    1535 	.db #0x05	; 5
      00053B 05                    1536 	.db #0x05	; 5
      00053C 04                    1537 	.db #0x04	; 4
      00053D 03                    1538 	.db #0x03	; 3
      00053E 00                    1539 	.db #0x00	; 0
      00053F 06                    1540 	.db #0x06	; 6
      000540                       1541 _pattern_38:
      000540 55                    1542 	.db #0x55	; 85	'U'
      000541 55                    1543 	.db #0x55	; 85	'U'
      000542 55                    1544 	.db #0x55	; 85	'U'
      000543 55                    1545 	.db #0x55	; 85	'U'
      000544 44                    1546 	.db #0x44	; 68	'D'
      000545 33                    1547 	.db #0x33	; 51	'3'
      000546 00                    1548 	.db #0x00	; 0
      000547 00                    1549 	.db #0x00	; 0
      000548                       1550 _pattern_39:
      000548 20                    1551 	.db #0x20	; 32
      000549 20                    1552 	.db #0x20	; 32
      00054A 20                    1553 	.db #0x20	; 32
      00054B 20                    1554 	.db #0x20	; 32
      00054C 20                    1555 	.db #0x20	; 32
      00054D 40                    1556 	.db #0x40	; 64
      00054E 00                    1557 	.db #0x00	; 0
      00054F 60                    1558 	.db #0x60	; 96
      000550                       1559 _pattern_32:
      000550 03                    1560 	.db #0x03	; 3
      000551 39                    1561 	.db #0x39	; 57	'9'
      000552 7C                    1562 	.db #0x7c	; 124
      000553 E6                    1563 	.db #0xe6	; 230
      000554 CE                    1564 	.db #0xce	; 206
      000555 E0                    1565 	.db #0xe0	; 224
      000556 7F                    1566 	.db #0x7f	; 127
      000557 3F                    1567 	.db #0x3f	; 63
      000558                       1568 _pattern_33:
      000558 FF                    1569 	.db #0xff	; 255
      000559 FF                    1570 	.db #0xff	; 255
      00055A 00                    1571 	.db #0x00	; 0
      00055B DB                    1572 	.db #0xdb	; 219
      00055C DB                    1573 	.db #0xdb	; 219
      00055D 00                    1574 	.db #0x00	; 0
      00055E FF                    1575 	.db #0xff	; 255
      00055F FF                    1576 	.db #0xff	; 255
      000560                       1577 _pattern_34:
      000560 C0                    1578 	.db #0xc0	; 192
      000561 9C                    1579 	.db #0x9c	; 156
      000562 3E                    1580 	.db #0x3e	; 62
      000563 67                    1581 	.db #0x67	; 103	'g'
      000564 73                    1582 	.db #0x73	; 115	's'
      000565 07                    1583 	.db #0x07	; 7
      000566 FE                    1584 	.db #0xfe	; 254
      000567 FC                    1585 	.db #0xfc	; 252
      000568                       1586 _sprite_dust_0:
      000568 10                    1587 	.db #0x10	; 16
      000569 42                    1588 	.db #0x42	; 66	'B'
      00056A 10                    1589 	.db #0x10	; 16
      00056B 45                    1590 	.db #0x45	; 69	'E'
      00056C 20                    1591 	.db #0x20	; 32
      00056D 89                    1592 	.db #0x89	; 137
      00056E 20                    1593 	.db #0x20	; 32
      00056F 88                    1594 	.db #0x88	; 136
      000570                       1595 _sprite_dust_1:
      000570 10                    1596 	.db #0x10	; 16
      000571 42                    1597 	.db #0x42	; 66	'B'
      000572 00                    1598 	.db #0x00	; 0
      000573 04                    1599 	.db #0x04	; 4
      000574 20                    1600 	.db #0x20	; 32
      000575 81                    1601 	.db #0x81	; 129
      000576 20                    1602 	.db #0x20	; 32
      000577 08                    1603 	.db #0x08	; 8
      000578                       1604 _sprite_dust_2:
      000578 10                    1605 	.db #0x10	; 16
      000579 00                    1606 	.db #0x00	; 0
      00057A 00                    1607 	.db #0x00	; 0
      00057B 04                    1608 	.db #0x04	; 4
      00057C 20                    1609 	.db #0x20	; 32
      00057D 80                    1610 	.db #0x80	; 128
      00057E 20                    1611 	.db #0x20	; 32
      00057F 00                    1612 	.db #0x00	; 0
      000580                       1613 _sprite_dust_3:
      000580 10                    1614 	.db #0x10	; 16
      000581 00                    1615 	.db #0x00	; 0
      000582 00                    1616 	.db #0x00	; 0
      000583 04                    1617 	.db #0x04	; 4
      000584 00                    1618 	.db #0x00	; 0
      000585 00                    1619 	.db #0x00	; 0
      000586 20                    1620 	.db #0x20	; 32
      000587 00                    1621 	.db #0x00	; 0
      000588                       1622 _pattern_title:
      000588 FE                    1623 	.db #0xfe	; 254
      000589 FE                    1624 	.db #0xfe	; 254
      00058A FE                    1625 	.db #0xfe	; 254
      00058B FE                    1626 	.db #0xfe	; 254
      00058C FE                    1627 	.db #0xfe	; 254
      00058D FE                    1628 	.db #0xfe	; 254
      00058E FE                    1629 	.db #0xfe	; 254
      00058F 00                    1630 	.db #0x00	; 0
      000590                       1631 _color_black_0:
      000590 14                    1632 	.db #0x14	; 20
      000591 14                    1633 	.db #0x14	; 20
      000592 14                    1634 	.db #0x14	; 20
      000593 14                    1635 	.db #0x14	; 20
      000594 14                    1636 	.db #0x14	; 20
      000595 14                    1637 	.db #0x14	; 20
      000596 14                    1638 	.db #0x14	; 20
      000597 14                    1639 	.db #0x14	; 20
      000598                       1640 _color_black_1:
      000598 14                    1641 	.db #0x14	; 20
      000599 14                    1642 	.db #0x14	; 20
      00059A 14                    1643 	.db #0x14	; 20
      00059B 14                    1644 	.db #0x14	; 20
      00059C 14                    1645 	.db #0x14	; 20
      00059D 14                    1646 	.db #0x14	; 20
      00059E 14                    1647 	.db #0x14	; 20
      00059F 14                    1648 	.db #0x14	; 20
      0005A0                       1649 _color_black_2:
      0005A0 14                    1650 	.db #0x14	; 20
      0005A1 14                    1651 	.db #0x14	; 20
      0005A2 14                    1652 	.db #0x14	; 20
      0005A3 14                    1653 	.db #0x14	; 20
      0005A4 14                    1654 	.db #0x14	; 20
      0005A5 14                    1655 	.db #0x14	; 20
      0005A6 14                    1656 	.db #0x14	; 20
      0005A7 14                    1657 	.db #0x14	; 20
      0005A8                       1658 _color_black_3:
      0005A8 14                    1659 	.db #0x14	; 20
      0005A9 14                    1660 	.db #0x14	; 20
      0005AA 14                    1661 	.db #0x14	; 20
      0005AB 14                    1662 	.db #0x14	; 20
      0005AC 14                    1663 	.db #0x14	; 20
      0005AD 14                    1664 	.db #0x14	; 20
      0005AE 14                    1665 	.db #0x14	; 20
      0005AF 14                    1666 	.db #0x14	; 20
      0005B0                       1667 _color_0:
      0005B0 13                    1668 	.db #0x13	; 19
      0005B1 13                    1669 	.db #0x13	; 19
      0005B2 13                    1670 	.db #0x13	; 19
      0005B3 13                    1671 	.db #0x13	; 19
      0005B4 13                    1672 	.db #0x13	; 19
      0005B5 13                    1673 	.db #0x13	; 19
      0005B6 13                    1674 	.db #0x13	; 19
      0005B7 13                    1675 	.db #0x13	; 19
      0005B8                       1676 _color_1:
      0005B8 12                    1677 	.db #0x12	; 18
      0005B9 12                    1678 	.db #0x12	; 18
      0005BA 12                    1679 	.db #0x12	; 18
      0005BB 12                    1680 	.db #0x12	; 18
      0005BC 12                    1681 	.db #0x12	; 18
      0005BD 12                    1682 	.db #0x12	; 18
      0005BE 12                    1683 	.db #0x12	; 18
      0005BF 12                    1684 	.db #0x12	; 18
      0005C0                       1685 _color_2:
      0005C0 12                    1686 	.db #0x12	; 18
      0005C1 12                    1687 	.db #0x12	; 18
      0005C2 12                    1688 	.db #0x12	; 18
      0005C3 12                    1689 	.db #0x12	; 18
      0005C4 12                    1690 	.db #0x12	; 18
      0005C5 12                    1691 	.db #0x12	; 18
      0005C6 12                    1692 	.db #0x12	; 18
      0005C7 12                    1693 	.db #0x12	; 18
      0005C8                       1694 _color_3:
      0005C8 1C                    1695 	.db #0x1c	; 28
      0005C9 1C                    1696 	.db #0x1c	; 28
      0005CA 1C                    1697 	.db #0x1c	; 28
      0005CB 1C                    1698 	.db #0x1c	; 28
      0005CC 1C                    1699 	.db #0x1c	; 28
      0005CD 1C                    1700 	.db #0x1c	; 28
      0005CE 1C                    1701 	.db #0x1c	; 28
      0005CF 1C                    1702 	.db #0x1c	; 28
      0005D0                       1703 _color_4:
      0005D0 96                    1704 	.db #0x96	; 150
      0005D1 96                    1705 	.db #0x96	; 150
      0005D2 96                    1706 	.db #0x96	; 150
      0005D3 96                    1707 	.db #0x96	; 150
      0005D4 96                    1708 	.db #0x96	; 150
      0005D5 96                    1709 	.db #0x96	; 150
      0005D6 96                    1710 	.db #0x96	; 150
      0005D7 96                    1711 	.db #0x96	; 150
      0005D8                       1712 _color_5:
      0005D8 98                    1713 	.db #0x98	; 152
      0005D9 68                    1714 	.db #0x68	; 104	'h'
      0005DA 68                    1715 	.db #0x68	; 104	'h'
      0005DB 68                    1716 	.db #0x68	; 104	'h'
      0005DC 68                    1717 	.db #0x68	; 104	'h'
      0005DD 68                    1718 	.db #0x68	; 104	'h'
      0005DE 68                    1719 	.db #0x68	; 104	'h'
      0005DF 68                    1720 	.db #0x68	; 104	'h'
      0005E0                       1721 _color_6:
      0005E0 68                    1722 	.db #0x68	; 104	'h'
      0005E1 68                    1723 	.db #0x68	; 104	'h'
      0005E2 68                    1724 	.db #0x68	; 104	'h'
      0005E3 68                    1725 	.db #0x68	; 104	'h'
      0005E4 68                    1726 	.db #0x68	; 104	'h'
      0005E5 68                    1727 	.db #0x68	; 104	'h'
      0005E6 68                    1728 	.db #0x68	; 104	'h'
      0005E7 68                    1729 	.db #0x68	; 104	'h'
      0005E8                       1730 _color_7:
      0005E8 89                    1731 	.db #0x89	; 137
      0005E9 89                    1732 	.db #0x89	; 137
      0005EA 89                    1733 	.db #0x89	; 137
      0005EB 89                    1734 	.db #0x89	; 137
      0005EC 89                    1735 	.db #0x89	; 137
      0005ED 89                    1736 	.db #0x89	; 137
      0005EE 89                    1737 	.db #0x89	; 137
      0005EF 86                    1738 	.db #0x86	; 134
      0005F0                       1739 _color_8:
      0005F0 41                    1740 	.db #0x41	; 65	'A'
      0005F1 47                    1741 	.db #0x47	; 71	'G'
      0005F2 47                    1742 	.db #0x47	; 71	'G'
      0005F3 47                    1743 	.db #0x47	; 71	'G'
      0005F4 47                    1744 	.db #0x47	; 71	'G'
      0005F5 47                    1745 	.db #0x47	; 71	'G'
      0005F6 47                    1746 	.db #0x47	; 71	'G'
      0005F7 47                    1747 	.db #0x47	; 71	'G'
      0005F8                       1748 _color_9:
      0005F8 41                    1749 	.db #0x41	; 65	'A'
      0005F9 45                    1750 	.db #0x45	; 69	'E'
      0005FA 47                    1751 	.db #0x47	; 71	'G'
      0005FB 47                    1752 	.db #0x47	; 71	'G'
      0005FC 45                    1753 	.db #0x45	; 69	'E'
      0005FD 45                    1754 	.db #0x45	; 69	'E'
      0005FE 41                    1755 	.db #0x41	; 65	'A'
      0005FF 45                    1756 	.db #0x45	; 69	'E'
      000600                       1757 _color_10:
      000600 47                    1758 	.db #0x47	; 71	'G'
      000601 45                    1759 	.db #0x45	; 69	'E'
      000602 45                    1760 	.db #0x45	; 69	'E'
      000603 45                    1761 	.db #0x45	; 69	'E'
      000604 45                    1762 	.db #0x45	; 69	'E'
      000605 41                    1763 	.db #0x41	; 65	'A'
      000606 45                    1764 	.db #0x45	; 69	'E'
      000607 41                    1765 	.db #0x41	; 65	'A'
      000608                       1766 _color_11:
      000608 41                    1767 	.db #0x41	; 65	'A'
      000609 41                    1768 	.db #0x41	; 65	'A'
      00060A 41                    1769 	.db #0x41	; 65	'A'
      00060B 41                    1770 	.db #0x41	; 65	'A'
      00060C 41                    1771 	.db #0x41	; 65	'A'
      00060D 41                    1772 	.db #0x41	; 65	'A'
      00060E 41                    1773 	.db #0x41	; 65	'A'
      00060F 41                    1774 	.db #0x41	; 65	'A'
      000610                       1775 _color_12:
      000610 D1                    1776 	.db #0xd1	; 209
      000611 DF                    1777 	.db #0xdf	; 223
      000612 DF                    1778 	.db #0xdf	; 223
      000613 DF                    1779 	.db #0xdf	; 223
      000614 DF                    1780 	.db #0xdf	; 223
      000615 DF                    1781 	.db #0xdf	; 223
      000616 DF                    1782 	.db #0xdf	; 223
      000617 DF                    1783 	.db #0xdf	; 223
      000618                       1784 _color_13:
      000618 D1                    1785 	.db #0xd1	; 209
      000619 DF                    1786 	.db #0xdf	; 223
      00061A DF                    1787 	.db #0xdf	; 223
      00061B DF                    1788 	.db #0xdf	; 223
      00061C DF                    1789 	.db #0xdf	; 223
      00061D DF                    1790 	.db #0xdf	; 223
      00061E DF                    1791 	.db #0xdf	; 223
      00061F DF                    1792 	.db #0xdf	; 223
      000620                       1793 _color_14:
      000620 DF                    1794 	.db #0xdf	; 223
      000621 DF                    1795 	.db #0xdf	; 223
      000622 DF                    1796 	.db #0xdf	; 223
      000623 D1                    1797 	.db #0xd1	; 209
      000624 D1                    1798 	.db #0xd1	; 209
      000625 D1                    1799 	.db #0xd1	; 209
      000626 D1                    1800 	.db #0xd1	; 209
      000627 D1                    1801 	.db #0xd1	; 209
      000628                       1802 _color_15:
      000628 D1                    1803 	.db #0xd1	; 209
      000629 D1                    1804 	.db #0xd1	; 209
      00062A D1                    1805 	.db #0xd1	; 209
      00062B D1                    1806 	.db #0xd1	; 209
      00062C D1                    1807 	.db #0xd1	; 209
      00062D D1                    1808 	.db #0xd1	; 209
      00062E D1                    1809 	.db #0xd1	; 209
      00062F D1                    1810 	.db #0xd1	; 209
      000630                       1811 _color_16:
      000630 A1                    1812 	.db #0xa1	; 161
      000631 BF                    1813 	.db #0xbf	; 191
      000632 BF                    1814 	.db #0xbf	; 191
      000633 BF                    1815 	.db #0xbf	; 191
      000634 BF                    1816 	.db #0xbf	; 191
      000635 BF                    1817 	.db #0xbf	; 191
      000636 BF                    1818 	.db #0xbf	; 191
      000637 BF                    1819 	.db #0xbf	; 191
      000638                       1820 _color_17:
      000638 A1                    1821 	.db #0xa1	; 161
      000639 AF                    1822 	.db #0xaf	; 175
      00063A AF                    1823 	.db #0xaf	; 175
      00063B A1                    1824 	.db #0xa1	; 161
      00063C A1                    1825 	.db #0xa1	; 161
      00063D A1                    1826 	.db #0xa1	; 161
      00063E A1                    1827 	.db #0xa1	; 161
      00063F A1                    1828 	.db #0xa1	; 161
      000640                       1829 _color_18:
      000640 AF                    1830 	.db #0xaf	; 175
      000641 AF                    1831 	.db #0xaf	; 175
      000642 AF                    1832 	.db #0xaf	; 175
      000643 AF                    1833 	.db #0xaf	; 175
      000644 A1                    1834 	.db #0xa1	; 161
      000645 A1                    1835 	.db #0xa1	; 161
      000646 A1                    1836 	.db #0xa1	; 161
      000647 A1                    1837 	.db #0xa1	; 161
      000648                       1838 _color_19:
      000648 B1                    1839 	.db #0xb1	; 177
      000649 B1                    1840 	.db #0xb1	; 177
      00064A B1                    1841 	.db #0xb1	; 177
      00064B B1                    1842 	.db #0xb1	; 177
      00064C B1                    1843 	.db #0xb1	; 177
      00064D B1                    1844 	.db #0xb1	; 177
      00064E B1                    1845 	.db #0xb1	; 177
      00064F B1                    1846 	.db #0xb1	; 177
      000650                       1847 _color_column_1:
      000650 F1                    1848 	.db #0xf1	; 241
      000651 E1                    1849 	.db #0xe1	; 225
      000652 E1                    1850 	.db #0xe1	; 225
      000653 E1                    1851 	.db #0xe1	; 225
      000654 E1                    1852 	.db #0xe1	; 225
      000655 E1                    1853 	.db #0xe1	; 225
      000656 E1                    1854 	.db #0xe1	; 225
      000657 E1                    1855 	.db #0xe1	; 225
      000658                       1856 _color_column_2:
      000658 F1                    1857 	.db #0xf1	; 241
      000659 E1                    1858 	.db #0xe1	; 225
      00065A E1                    1859 	.db #0xe1	; 225
      00065B E1                    1860 	.db #0xe1	; 225
      00065C E1                    1861 	.db #0xe1	; 225
      00065D E1                    1862 	.db #0xe1	; 225
      00065E E1                    1863 	.db #0xe1	; 225
      00065F E1                    1864 	.db #0xe1	; 225
      000660                       1865 _color_column_3:
      000660 F1                    1866 	.db #0xf1	; 241
      000661 E1                    1867 	.db #0xe1	; 225
      000662 E1                    1868 	.db #0xe1	; 225
      000663 E1                    1869 	.db #0xe1	; 225
      000664 E1                    1870 	.db #0xe1	; 225
      000665 E1                    1871 	.db #0xe1	; 225
      000666 E1                    1872 	.db #0xe1	; 225
      000667 E1                    1873 	.db #0xe1	; 225
      000668                       1874 _color_column_4:
      000668 F1                    1875 	.db #0xf1	; 241
      000669 F1                    1876 	.db #0xf1	; 241
      00066A F1                    1877 	.db #0xf1	; 241
      00066B F1                    1878 	.db #0xf1	; 241
      00066C F1                    1879 	.db #0xf1	; 241
      00066D F1                    1880 	.db #0xf1	; 241
      00066E F1                    1881 	.db #0xf1	; 241
      00066F F1                    1882 	.db #0xf1	; 241
      000670                       1883 _color_column_5:
      000670 E1                    1884 	.db #0xe1	; 225
      000671 E1                    1885 	.db #0xe1	; 225
      000672 E1                    1886 	.db #0xe1	; 225
      000673 E1                    1887 	.db #0xe1	; 225
      000674 E1                    1888 	.db #0xe1	; 225
      000675 E1                    1889 	.db #0xe1	; 225
      000676 E1                    1890 	.db #0xe1	; 225
      000677 E1                    1891 	.db #0xe1	; 225
      000678                       1892 _color_column_6:
      000678 E1                    1893 	.db #0xe1	; 225
      000679 E1                    1894 	.db #0xe1	; 225
      00067A E1                    1895 	.db #0xe1	; 225
      00067B 41                    1896 	.db #0x41	; 65	'A'
      00067C 41                    1897 	.db #0x41	; 65	'A'
      00067D 41                    1898 	.db #0x41	; 65	'A'
      00067E 41                    1899 	.db #0x41	; 65	'A'
      00067F 41                    1900 	.db #0x41	; 65	'A'
      000680                       1901 _color_column_7:
      000680 F1                    1902 	.db #0xf1	; 241
      000681 F1                    1903 	.db #0xf1	; 241
      000682 F1                    1904 	.db #0xf1	; 241
      000683 F1                    1905 	.db #0xf1	; 241
      000684 F1                    1906 	.db #0xf1	; 241
      000685 F1                    1907 	.db #0xf1	; 241
      000686 F1                    1908 	.db #0xf1	; 241
      000687 F1                    1909 	.db #0xf1	; 241
      000688                       1910 _color_column_8:
      000688 E1                    1911 	.db #0xe1	; 225
      000689 E1                    1912 	.db #0xe1	; 225
      00068A E1                    1913 	.db #0xe1	; 225
      00068B F1                    1914 	.db #0xf1	; 241
      00068C E1                    1915 	.db #0xe1	; 225
      00068D E1                    1916 	.db #0xe1	; 225
      00068E E1                    1917 	.db #0xe1	; 225
      00068F E1                    1918 	.db #0xe1	; 225
      000690                       1919 _color_column_9:
      000690 41                    1920 	.db #0x41	; 65	'A'
      000691 41                    1921 	.db #0x41	; 65	'A'
      000692 41                    1922 	.db #0x41	; 65	'A'
      000693 F1                    1923 	.db #0xf1	; 241
      000694 41                    1924 	.db #0x41	; 65	'A'
      000695 41                    1925 	.db #0x41	; 65	'A'
      000696 41                    1926 	.db #0x41	; 65	'A'
      000697 41                    1927 	.db #0x41	; 65	'A'
      000698                       1928 _color_column_10:
      000698 F1                    1929 	.db #0xf1	; 241
      000699 F1                    1930 	.db #0xf1	; 241
      00069A F1                    1931 	.db #0xf1	; 241
      00069B F1                    1932 	.db #0xf1	; 241
      00069C F1                    1933 	.db #0xf1	; 241
      00069D F1                    1934 	.db #0xf1	; 241
      00069E F1                    1935 	.db #0xf1	; 241
      00069F F1                    1936 	.db #0xf1	; 241
      0006A0                       1937 _color_column_11:
      0006A0 E1                    1938 	.db #0xe1	; 225
      0006A1 E1                    1939 	.db #0xe1	; 225
      0006A2 E1                    1940 	.db #0xe1	; 225
      0006A3 E1                    1941 	.db #0xe1	; 225
      0006A4 E1                    1942 	.db #0xe1	; 225
      0006A5 E1                    1943 	.db #0xe1	; 225
      0006A6 E1                    1944 	.db #0xe1	; 225
      0006A7 E1                    1945 	.db #0xe1	; 225
      0006A8                       1946 _color_column_12:
      0006A8 41                    1947 	.db #0x41	; 65	'A'
      0006A9 41                    1948 	.db #0x41	; 65	'A'
      0006AA 41                    1949 	.db #0x41	; 65	'A'
      0006AB 41                    1950 	.db #0x41	; 65	'A'
      0006AC 41                    1951 	.db #0x41	; 65	'A'
      0006AD 41                    1952 	.db #0x41	; 65	'A'
      0006AE 41                    1953 	.db #0x41	; 65	'A'
      0006AF 41                    1954 	.db #0x41	; 65	'A'
      0006B0                       1955 _color_column_16:
      0006B0 F1                    1956 	.db #0xf1	; 241
      0006B1 F1                    1957 	.db #0xf1	; 241
      0006B2 F1                    1958 	.db #0xf1	; 241
      0006B3 F1                    1959 	.db #0xf1	; 241
      0006B4 F1                    1960 	.db #0xf1	; 241
      0006B5 F1                    1961 	.db #0xf1	; 241
      0006B6 F1                    1962 	.db #0xf1	; 241
      0006B7 F1                    1963 	.db #0xf1	; 241
      0006B8                       1964 _color_column_17:
      0006B8 E1                    1965 	.db #0xe1	; 225
      0006B9 E1                    1966 	.db #0xe1	; 225
      0006BA E1                    1967 	.db #0xe1	; 225
      0006BB E1                    1968 	.db #0xe1	; 225
      0006BC E1                    1969 	.db #0xe1	; 225
      0006BD E1                    1970 	.db #0xe1	; 225
      0006BE E1                    1971 	.db #0xe1	; 225
      0006BF E1                    1972 	.db #0xe1	; 225
      0006C0                       1973 _color_column_18:
      0006C0 41                    1974 	.db #0x41	; 65	'A'
      0006C1 41                    1975 	.db #0x41	; 65	'A'
      0006C2 41                    1976 	.db #0x41	; 65	'A'
      0006C3 41                    1977 	.db #0x41	; 65	'A'
      0006C4 41                    1978 	.db #0x41	; 65	'A'
      0006C5 E1                    1979 	.db #0xe1	; 225
      0006C6 E1                    1980 	.db #0xe1	; 225
      0006C7 E1                    1981 	.db #0xe1	; 225
      0006C8                       1982 _color_column_13:
      0006C8 E1                    1983 	.db #0xe1	; 225
      0006C9 E1                    1984 	.db #0xe1	; 225
      0006CA E1                    1985 	.db #0xe1	; 225
      0006CB E1                    1986 	.db #0xe1	; 225
      0006CC E1                    1987 	.db #0xe1	; 225
      0006CD E1                    1988 	.db #0xe1	; 225
      0006CE E1                    1989 	.db #0xe1	; 225
      0006CF F1                    1990 	.db #0xf1	; 241
      0006D0                       1991 _color_column_14:
      0006D0 E1                    1992 	.db #0xe1	; 225
      0006D1 E1                    1993 	.db #0xe1	; 225
      0006D2 E1                    1994 	.db #0xe1	; 225
      0006D3 E1                    1995 	.db #0xe1	; 225
      0006D4 E1                    1996 	.db #0xe1	; 225
      0006D5 E1                    1997 	.db #0xe1	; 225
      0006D6 E1                    1998 	.db #0xe1	; 225
      0006D7 F1                    1999 	.db #0xf1	; 241
      0006D8                       2000 _color_column_15:
      0006D8 E1                    2001 	.db #0xe1	; 225
      0006D9 E1                    2002 	.db #0xe1	; 225
      0006DA E1                    2003 	.db #0xe1	; 225
      0006DB E1                    2004 	.db #0xe1	; 225
      0006DC E1                    2005 	.db #0xe1	; 225
      0006DD E1                    2006 	.db #0xe1	; 225
      0006DE E1                    2007 	.db #0xe1	; 225
      0006DF F1                    2008 	.db #0xf1	; 241
      0006E0                       2009 _color_dust_0:
      0006E0 F1                    2010 	.db #0xf1	; 241
      0006E1 F1                    2011 	.db #0xf1	; 241
      0006E2 F1                    2012 	.db #0xf1	; 241
      0006E3 F1                    2013 	.db #0xf1	; 241
      0006E4 F1                    2014 	.db #0xf1	; 241
      0006E5 F1                    2015 	.db #0xf1	; 241
      0006E6 F1                    2016 	.db #0xf1	; 241
      0006E7 F1                    2017 	.db #0xf1	; 241
      0006E8                       2018 _color_dust_1:
      0006E8 F1                    2019 	.db #0xf1	; 241
      0006E9 F1                    2020 	.db #0xf1	; 241
      0006EA F1                    2021 	.db #0xf1	; 241
      0006EB F1                    2022 	.db #0xf1	; 241
      0006EC F1                    2023 	.db #0xf1	; 241
      0006ED F1                    2024 	.db #0xf1	; 241
      0006EE F1                    2025 	.db #0xf1	; 241
      0006EF F1                    2026 	.db #0xf1	; 241
      0006F0                       2027 _color_dust_2:
      0006F0 F1                    2028 	.db #0xf1	; 241
      0006F1 F1                    2029 	.db #0xf1	; 241
      0006F2 F1                    2030 	.db #0xf1	; 241
      0006F3 F1                    2031 	.db #0xf1	; 241
      0006F4 F1                    2032 	.db #0xf1	; 241
      0006F5 F1                    2033 	.db #0xf1	; 241
      0006F6 F1                    2034 	.db #0xf1	; 241
      0006F7 F1                    2035 	.db #0xf1	; 241
      0006F8                       2036 _color_dust_3:
      0006F8 F1                    2037 	.db #0xf1	; 241
      0006F9 F1                    2038 	.db #0xf1	; 241
      0006FA F1                    2039 	.db #0xf1	; 241
      0006FB F1                    2040 	.db #0xf1	; 241
      0006FC F1                    2041 	.db #0xf1	; 241
      0006FD F1                    2042 	.db #0xf1	; 241
      0006FE F1                    2043 	.db #0xf1	; 241
      0006FF F1                    2044 	.db #0xf1	; 241
      000700                       2045 _color_font_1:
      000700 F1                    2046 	.db #0xf1	; 241
      000701 F1                    2047 	.db #0xf1	; 241
      000702 E1                    2048 	.db #0xe1	; 225
      000703 71                    2049 	.db #0x71	; 113	'q'
      000704 71                    2050 	.db #0x71	; 113	'q'
      000705 51                    2051 	.db #0x51	; 81	'Q'
      000706 51                    2052 	.db #0x51	; 81	'Q'
      000707 41                    2053 	.db #0x41	; 65	'A'
      000708                       2054 _color_font_2:
      000708 61                    2055 	.db #0x61	; 97	'a'
      000709 61                    2056 	.db #0x61	; 97	'a'
      00070A 81                    2057 	.db #0x81	; 129
      00070B 81                    2058 	.db #0x81	; 129
      00070C 91                    2059 	.db #0x91	; 145
      00070D 91                    2060 	.db #0x91	; 145
      00070E E1                    2061 	.db #0xe1	; 225
      00070F E1                    2062 	.db #0xe1	; 225
      000710                       2063 _color_title_1:
      000710 A1                    2064 	.db #0xa1	; 161
      000711 A1                    2065 	.db #0xa1	; 161
      000712 A1                    2066 	.db #0xa1	; 161
      000713 A1                    2067 	.db #0xa1	; 161
      000714 A1                    2068 	.db #0xa1	; 161
      000715 A1                    2069 	.db #0xa1	; 161
      000716 A1                    2070 	.db #0xa1	; 161
      000717 A1                    2071 	.db #0xa1	; 161
      000718                       2072 _color_title_2:
      000718 B1                    2073 	.db #0xb1	; 177
      000719 B1                    2074 	.db #0xb1	; 177
      00071A B1                    2075 	.db #0xb1	; 177
      00071B B1                    2076 	.db #0xb1	; 177
      00071C B1                    2077 	.db #0xb1	; 177
      00071D B1                    2078 	.db #0xb1	; 177
      00071E B1                    2079 	.db #0xb1	; 177
      00071F B1                    2080 	.db #0xb1	; 177
      000720                       2081 _color_title_3:
      000720 D1                    2082 	.db #0xd1	; 209
      000721 D1                    2083 	.db #0xd1	; 209
      000722 D1                    2084 	.db #0xd1	; 209
      000723 D1                    2085 	.db #0xd1	; 209
      000724 D1                    2086 	.db #0xd1	; 209
      000725 D1                    2087 	.db #0xd1	; 209
      000726 D1                    2088 	.db #0xd1	; 209
      000727 D1                    2089 	.db #0xd1	; 209
      000728                       2090 _color_title_4:
      000728 F1                    2091 	.db #0xf1	; 241
      000729 F1                    2092 	.db #0xf1	; 241
      00072A F1                    2093 	.db #0xf1	; 241
      00072B F1                    2094 	.db #0xf1	; 241
      00072C F1                    2095 	.db #0xf1	; 241
      00072D F1                    2096 	.db #0xf1	; 241
      00072E F1                    2097 	.db #0xf1	; 241
      00072F F1                    2098 	.db #0xf1	; 241
      000730                       2099 _color_title_5:
      000730 71                    2100 	.db #0x71	; 113	'q'
      000731 71                    2101 	.db #0x71	; 113	'q'
      000732 71                    2102 	.db #0x71	; 113	'q'
      000733 71                    2103 	.db #0x71	; 113	'q'
      000734 71                    2104 	.db #0x71	; 113	'q'
      000735 71                    2105 	.db #0x71	; 113	'q'
      000736 71                    2106 	.db #0x71	; 113	'q'
      000737 71                    2107 	.db #0x71	; 113	'q'
      000738                       2108 _color_title_6:
      000738 51                    2109 	.db #0x51	; 81	'Q'
      000739 51                    2110 	.db #0x51	; 81	'Q'
      00073A 51                    2111 	.db #0x51	; 81	'Q'
      00073B 51                    2112 	.db #0x51	; 81	'Q'
      00073C 51                    2113 	.db #0x51	; 81	'Q'
      00073D 51                    2114 	.db #0x51	; 81	'Q'
      00073E 51                    2115 	.db #0x51	; 81	'Q'
      00073F 51                    2116 	.db #0x51	; 81	'Q'
      000740                       2117 _color_title_7:
      000740 41                    2118 	.db #0x41	; 65	'A'
      000741 41                    2119 	.db #0x41	; 65	'A'
      000742 41                    2120 	.db #0x41	; 65	'A'
      000743 41                    2121 	.db #0x41	; 65	'A'
      000744 41                    2122 	.db #0x41	; 65	'A'
      000745 41                    2123 	.db #0x41	; 65	'A'
      000746 41                    2124 	.db #0x41	; 65	'A'
      000747 41                    2125 	.db #0x41	; 65	'A'
      000748                       2126 _sprite_arrow_0:
      000748 00                    2127 	.db #0x00	; 0
      000749 00                    2128 	.db #0x00	; 0
      00074A 00                    2129 	.db #0x00	; 0
      00074B 00                    2130 	.db #0x00	; 0
      00074C 00                    2131 	.db #0x00	; 0
      00074D 00                    2132 	.db #0x00	; 0
      00074E 00                    2133 	.db #0x00	; 0
      00074F 00                    2134 	.db #0x00	; 0
      000750                       2135 _sprite_arrow_1:
      000750 FF                    2136 	.db #0xff	; 255
      000751 00                    2137 	.db #0x00	; 0
      000752 3F                    2138 	.db #0x3f	; 63
      000753 00                    2139 	.db #0x00	; 0
      000754 0F                    2140 	.db #0x0f	; 15
      000755 00                    2141 	.db #0x00	; 0
      000756 03                    2142 	.db #0x03	; 3
      000757 00                    2143 	.db #0x00	; 0
      000758                       2144 _sprite_arrow_2:
      000758 00                    2145 	.db #0x00	; 0
      000759 00                    2146 	.db #0x00	; 0
      00075A 00                    2147 	.db #0x00	; 0
      00075B 00                    2148 	.db #0x00	; 0
      00075C 00                    2149 	.db #0x00	; 0
      00075D 00                    2150 	.db #0x00	; 0
      00075E 00                    2151 	.db #0x00	; 0
      00075F 00                    2152 	.db #0x00	; 0
      000760                       2153 _sprite_arrow_3:
      000760 FF                    2154 	.db #0xff	; 255
      000761 00                    2155 	.db #0x00	; 0
      000762 FC                    2156 	.db #0xfc	; 252
      000763 00                    2157 	.db #0x00	; 0
      000764 F0                    2158 	.db #0xf0	; 240
      000765 00                    2159 	.db #0x00	; 0
      000766 C0                    2160 	.db #0xc0	; 192
      000767 00                    2161 	.db #0x00	; 0
      000768                       2162 _sprite_3x_hit_1:
      000768 00                    2163 	.db #0x00	; 0
      000769 3E                    2164 	.db #0x3e	; 62
      00076A 63                    2165 	.db #0x63	; 99	'c'
      00076B 03                    2166 	.db #0x03	; 3
      00076C 03                    2167 	.db #0x03	; 3
      00076D 1E                    2168 	.db #0x1e	; 30
      00076E 03                    2169 	.db #0x03	; 3
      00076F 03                    2170 	.db #0x03	; 3
      000770 63                    2171 	.db #0x63	; 99	'c'
      000771 3E                    2172 	.db #0x3e	; 62
      000772 00                    2173 	.db #0x00	; 0
      000773 00                    2174 	.db #0x00	; 0
      000774 00                    2175 	.db #0x00	; 0
      000775 00                    2176 	.db #0x00	; 0
      000776 00                    2177 	.db #0x00	; 0
      000777 00                    2178 	.db #0x00	; 0
      000778 00                    2179 	.db #0x00	; 0
      000779 00                    2180 	.db #0x00	; 0
      00077A 00                    2181 	.db #0x00	; 0
      00077B 63                    2182 	.db #0x63	; 99	'c'
      00077C 36                    2183 	.db #0x36	; 54	'6'
      00077D 1C                    2184 	.db #0x1c	; 28
      00077E 08                    2185 	.db #0x08	; 8
      00077F 1C                    2186 	.db #0x1c	; 28
      000780 36                    2187 	.db #0x36	; 54	'6'
      000781 63                    2188 	.db #0x63	; 99	'c'
      000782 00                    2189 	.db #0x00	; 0
      000783 00                    2190 	.db #0x00	; 0
      000784 00                    2191 	.db #0x00	; 0
      000785 00                    2192 	.db #0x00	; 0
      000786 00                    2193 	.db #0x00	; 0
      000787 00                    2194 	.db #0x00	; 0
      000788                       2195 _sprite_3x_hit_2:
      000788 00                    2196 	.db #0x00	; 0
      000789 77                    2197 	.db #0x77	; 119	'w'
      00078A 22                    2198 	.db #0x22	; 34
      00078B 22                    2199 	.db #0x22	; 34
      00078C 22                    2200 	.db #0x22	; 34
      00078D 3E                    2201 	.db #0x3e	; 62
      00078E 22                    2202 	.db #0x22	; 34
      00078F 22                    2203 	.db #0x22	; 34
      000790 22                    2204 	.db #0x22	; 34
      000791 77                    2205 	.db #0x77	; 119	'w'
      000792 00                    2206 	.db #0x00	; 0
      000793 00                    2207 	.db #0x00	; 0
      000794 00                    2208 	.db #0x00	; 0
      000795 00                    2209 	.db #0x00	; 0
      000796 00                    2210 	.db #0x00	; 0
      000797 00                    2211 	.db #0x00	; 0
      000798 00                    2212 	.db #0x00	; 0
      000799 77                    2213 	.db #0x77	; 119	'w'
      00079A 25                    2214 	.db #0x25	; 37
      00079B 21                    2215 	.db #0x21	; 33
      00079C 21                    2216 	.db #0x21	; 33
      00079D 21                    2217 	.db #0x21	; 33
      00079E 21                    2218 	.db #0x21	; 33
      00079F 21                    2219 	.db #0x21	; 33
      0007A0 21                    2220 	.db #0x21	; 33
      0007A1 73                    2221 	.db #0x73	; 115	's'
      0007A2 00                    2222 	.db #0x00	; 0
      0007A3 00                    2223 	.db #0x00	; 0
      0007A4 00                    2224 	.db #0x00	; 0
      0007A5 00                    2225 	.db #0x00	; 0
      0007A6 00                    2226 	.db #0x00	; 0
      0007A7 00                    2227 	.db #0x00	; 0
      0007A8                       2228 _sprite_3x_hit_3:
      0007A8 00                    2229 	.db #0x00	; 0
      0007A9 C0                    2230 	.db #0xc0	; 192
      0007AA 40                    2231 	.db #0x40	; 64
      0007AB 00                    2232 	.db #0x00	; 0
      0007AC 00                    2233 	.db #0x00	; 0
      0007AD 00                    2234 	.db #0x00	; 0
      0007AE 00                    2235 	.db #0x00	; 0
      0007AF 00                    2236 	.db #0x00	; 0
      0007B0 00                    2237 	.db #0x00	; 0
      0007B1 80                    2238 	.db #0x80	; 128
      0007B2 00                    2239 	.db #0x00	; 0
      0007B3 00                    2240 	.db #0x00	; 0
      0007B4 00                    2241 	.db #0x00	; 0
      0007B5 00                    2242 	.db #0x00	; 0
      0007B6 00                    2243 	.db #0x00	; 0
      0007B7 00                    2244 	.db #0x00	; 0
      0007B8 00                    2245 	.db #0x00	; 0
      0007B9 00                    2246 	.db #0x00	; 0
      0007BA 00                    2247 	.db #0x00	; 0
      0007BB 00                    2248 	.db #0x00	; 0
      0007BC 00                    2249 	.db #0x00	; 0
      0007BD 00                    2250 	.db #0x00	; 0
      0007BE 00                    2251 	.db #0x00	; 0
      0007BF 00                    2252 	.db #0x00	; 0
      0007C0 00                    2253 	.db #0x00	; 0
      0007C1 00                    2254 	.db #0x00	; 0
      0007C2 00                    2255 	.db #0x00	; 0
      0007C3 00                    2256 	.db #0x00	; 0
      0007C4 00                    2257 	.db #0x00	; 0
      0007C5 00                    2258 	.db #0x00	; 0
      0007C6 00                    2259 	.db #0x00	; 0
      0007C7 00                    2260 	.db #0x00	; 0
                                   2261 ;src\/Graphics.h:8: void DrawString(const char* str, byte col, byte line) {
                                   2262 ;	---------------------------------
                                   2263 ; Function DrawString
                                   2264 ; ---------------------------------
      0007C8                       2265 _DrawString::
      0007C8 DD E5            [15] 2266 	push	ix
      0007CA DD 21 00 00      [14] 2267 	ld	ix,#0
      0007CE DD 39            [15] 2268 	add	ix,sp
                                   2269 ;src\/Graphics.h:9: while (*str) {
      0007D0 DD 6E 06         [19] 2270 	ld	l, 6 (ix)
      0007D3 DD 4E 04         [19] 2271 	ld	c, 4 (ix)
      0007D6 DD 46 05         [19] 2272 	ld	b, 5 (ix)
      0007D9                       2273 00101$:
      0007D9 0A               [ 7] 2274 	ld	a, (bc)
      0007DA B7               [ 4] 2275 	or	a, a
      0007DB 28 1A            [12] 2276 	jr	Z, 00104$
                                   2277 ;src\/Graphics.h:10: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0007DD 55               [ 4] 2278 	ld	d, l
      0007DE 2C               [ 4] 2279 	inc	l
      0007DF DD 75 06         [19] 2280 	ld	6 (ix), l
      0007E2 03               [ 6] 2281 	inc	bc
      0007E3 C6 0F            [ 7] 2282 	add	a, #0x0f
      0007E5 E5               [11] 2283 	push	hl
      0007E6 C5               [11] 2284 	push	bc
      0007E7 DD 66 07         [19] 2285 	ld	h, 7 (ix)
      0007EA 6A               [ 4] 2286 	ld	l, d
      0007EB E5               [11] 2287 	push	hl
      0007EC F5               [11] 2288 	push	af
      0007ED 33               [ 6] 2289 	inc	sp
      0007EE CDrEDr00         [17] 2290 	call	_DrawChar
      0007F1 F1               [10] 2291 	pop	af
      0007F2 33               [ 6] 2292 	inc	sp
      0007F3 C1               [10] 2293 	pop	bc
      0007F4 E1               [10] 2294 	pop	hl
      0007F5 18 E2            [12] 2295 	jr	00101$
      0007F7                       2296 00104$:
                                   2297 ;src\/Graphics.h:12: }
      0007F7 DD E1            [14] 2298 	pop	ix
      0007F9 C9               [10] 2299 	ret
                                   2300 ;src\/Graphics.h:14: void DrawNumber(word number, byte col, byte line) {
                                   2301 ;	---------------------------------
                                   2302 ; Function DrawNumber
                                   2303 ; ---------------------------------
      0007FA                       2304 _DrawNumber::
      0007FA DD E5            [15] 2305 	push	ix
      0007FC DD 21 00 00      [14] 2306 	ld	ix,#0
      000800 DD 39            [15] 2307 	add	ix,sp
      000802 21 FA FF         [10] 2308 	ld	hl, #-6
      000805 39               [11] 2309 	add	hl, sp
      000806 F9               [ 6] 2310 	ld	sp, hl
                                   2311 ;src\/Graphics.h:17: bool trailingZero = TRUE;
      000807 DD 36 FA 01      [19] 2312 	ld	-6 (ix), #0x01
                                   2313 ;src\/Graphics.h:19: DrawString("      ", col, line); // Clear space for number (6 digits)
      00080B DD 66 07         [19] 2314 	ld	h, 7 (ix)
      00080E DD 6E 06         [19] 2315 	ld	l, 6 (ix)
      000811 E5               [11] 2316 	push	hl
      000812 21rAEr08         [10] 2317 	ld	hl, #___str_0
      000815 E5               [11] 2318 	push	hl
      000816 CDrC8r07         [17] 2319 	call	_DrawString
      000819 F1               [10] 2320 	pop	af
      00081A F1               [10] 2321 	pop	af
                                   2322 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00081B DD 7E 06         [19] 2323 	ld	a, 6 (ix)
      00081E DD 77 FF         [19] 2324 	ld	-1 (ix), a
      000821 1E 06            [ 7] 2325 	ld	e, #0x06
      000823                       2326 00109$:
      000823 7B               [ 4] 2327 	ld	a, e
      000824 B7               [ 4] 2328 	or	a, a
      000825 CArA9r08         [10] 2329 	jp	Z, 00111$
                                   2330 ;src\/Graphics.h:23: power = Power(10, i - 1);
      000828 7B               [ 4] 2331 	ld	a, e
      000829 3D               [ 4] 2332 	dec	a
      00082A D5               [11] 2333 	push	de
      00082B 57               [ 4] 2334 	ld	d,a
      00082C 1E 0A            [ 7] 2335 	ld	e,#0x0a
      00082E D5               [11] 2336 	push	de
      00082F CDr1Dr00         [17] 2337 	call	_Power
      000832 F1               [10] 2338 	pop	af
      000833 D1               [10] 2339 	pop	de
      000834 DD 75 FB         [19] 2340 	ld	-5 (ix), l
      000837 DD 74 FC         [19] 2341 	ld	-4 (ix), h
                                   2342 ;src\/Graphics.h:25: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00083A D5               [11] 2343 	push	de
      00083B DD 6E FB         [19] 2344 	ld	l, -5 (ix)
      00083E DD 66 FC         [19] 2345 	ld	h, -4 (ix)
      000841 E5               [11] 2346 	push	hl
      000842 DD 6E 04         [19] 2347 	ld	l, 4 (ix)
      000845 DD 66 05         [19] 2348 	ld	h, 5 (ix)
      000848 E5               [11] 2349 	push	hl
      000849 CDr00r00         [17] 2350 	call	__divuint
      00084C F1               [10] 2351 	pop	af
      00084D F1               [10] 2352 	pop	af
      00084E DD 75 FD         [19] 2353 	ld	-3 (ix), l
      000851 DD 74 FE         [19] 2354 	ld	-2 (ix), h
      000854 D1               [10] 2355 	pop	de
      000855 DD 7E FA         [19] 2356 	ld	a, -6 (ix)
      000858 B7               [ 4] 2357 	or	a, a
      000859 28 0C            [12] 2358 	jr	Z, 00102$
      00085B DD 7E FE         [19] 2359 	ld	a, -2 (ix)
      00085E DD B6 FD         [19] 2360 	or	a, -3 (ix)
      000861 28 04            [12] 2361 	jr	Z, 00102$
      000863 DD 36 FA 00      [19] 2362 	ld	-6 (ix), #0
      000867                       2363 00102$:
                                   2364 ;src\/Graphics.h:27: if(!trailingZero || i == 1) {
      000867 DD 7E FA         [19] 2365 	ld	a, -6 (ix)
      00086A B7               [ 4] 2366 	or	a, a
      00086B 28 04            [12] 2367 	jr	Z, 00104$
      00086D 7B               [ 4] 2368 	ld	a, e
      00086E 3D               [ 4] 2369 	dec	a
      00086F 20 31            [12] 2370 	jr	NZ, 00105$
      000871                       2371 00104$:
                                   2372 ;src\/Graphics.h:28: DrawChar((number / power) + CHAR_0, col, line);
      000871 DD 7E FD         [19] 2373 	ld	a, -3 (ix)
      000874 C6 3F            [ 7] 2374 	add	a, #0x3f
      000876 D5               [11] 2375 	push	de
      000877 DD 66 07         [19] 2376 	ld	h, 7 (ix)
      00087A E5               [11] 2377 	push	hl
      00087B 33               [ 6] 2378 	inc	sp
      00087C DD 66 FF         [19] 2379 	ld	h, -1 (ix)
      00087F E5               [11] 2380 	push	hl
      000880 33               [ 6] 2381 	inc	sp
      000881 F5               [11] 2382 	push	af
      000882 33               [ 6] 2383 	inc	sp
      000883 CDrEDr00         [17] 2384 	call	_DrawChar
      000886 F1               [10] 2385 	pop	af
      000887 33               [ 6] 2386 	inc	sp
      000888 DD 6E FB         [19] 2387 	ld	l, -5 (ix)
      00088B DD 66 FC         [19] 2388 	ld	h, -4 (ix)
      00088E E5               [11] 2389 	push	hl
      00088F DD 6E 04         [19] 2390 	ld	l, 4 (ix)
      000892 DD 66 05         [19] 2391 	ld	h, 5 (ix)
      000895 E5               [11] 2392 	push	hl
      000896 CDr00r00         [17] 2393 	call	__moduint
      000899 F1               [10] 2394 	pop	af
      00089A F1               [10] 2395 	pop	af
      00089B D1               [10] 2396 	pop	de
      00089C DD 75 04         [19] 2397 	ld	4 (ix), l
      00089F DD 74 05         [19] 2398 	ld	5 (ix), h
      0008A2                       2399 00105$:
                                   2400 ;src\/Graphics.h:32: col++;
      0008A2 DD 34 FF         [23] 2401 	inc	-1 (ix)
                                   2402 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0008A5 1D               [ 4] 2403 	dec	e
      0008A6 C3r23r08         [10] 2404 	jp	00109$
      0008A9                       2405 00111$:
                                   2406 ;src\/Graphics.h:37: }
      0008A9 DD F9            [10] 2407 	ld	sp, ix
      0008AB DD E1            [14] 2408 	pop	ix
      0008AD C9               [10] 2409 	ret
      0008AE                       2410 ___str_0:
      0008AE 20 20 20 20 20 20     2411 	.ascii "      "
      0008B4 00                    2412 	.db 0x00
                                   2413 ;src\/Graphics.h:39: void DrawColumn(byte col) {
                                   2414 ;	---------------------------------
                                   2415 ; Function DrawColumn
                                   2416 ; ---------------------------------
      0008B5                       2417 _DrawColumn::
      0008B5 DD E5            [15] 2418 	push	ix
      0008B7 DD 21 00 00      [14] 2419 	ld	ix,#0
      0008BB DD 39            [15] 2420 	add	ix,sp
      0008BD 3B               [ 6] 2421 	dec	sp
                                   2422 ;src\/Graphics.h:40: WRTVRM(MSX_modedata_screen2.name + col + 0, COLUMN_TOP_1);
      0008BE 2A C7 F3         [16] 2423 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008C1 DD 4E 04         [19] 2424 	ld	c, 4 (ix)
      0008C4 06 00            [ 7] 2425 	ld	b, #0x00
      0008C6 09               [11] 2426 	add	hl, bc
      0008C7 C5               [11] 2427 	push	bc
      0008C8 3E 18            [ 7] 2428 	ld	a, #0x18
      0008CA F5               [11] 2429 	push	af
      0008CB 33               [ 6] 2430 	inc	sp
      0008CC E5               [11] 2431 	push	hl
      0008CD CDr00r00         [17] 2432 	call	_WRTVRM
      0008D0 F1               [10] 2433 	pop	af
      0008D1 33               [ 6] 2434 	inc	sp
      0008D2 C1               [10] 2435 	pop	bc
                                   2436 ;src\/Graphics.h:41: WRTVRM(MSX_modedata_screen2.name + col + 1, COLUMN_TOP_1 + 1);
      0008D3 2A C7 F3         [16] 2437 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008D6 09               [11] 2438 	add	hl, bc
      0008D7 23               [ 6] 2439 	inc	hl
      0008D8 C5               [11] 2440 	push	bc
      0008D9 3E 19            [ 7] 2441 	ld	a, #0x19
      0008DB F5               [11] 2442 	push	af
      0008DC 33               [ 6] 2443 	inc	sp
      0008DD E5               [11] 2444 	push	hl
      0008DE CDr00r00         [17] 2445 	call	_WRTVRM
      0008E1 F1               [10] 2446 	pop	af
      0008E2 33               [ 6] 2447 	inc	sp
      0008E3 C1               [10] 2448 	pop	bc
                                   2449 ;src\/Graphics.h:42: WRTVRM(MSX_modedata_screen2.name + col + 2, COLUMN_TOP_1 + 2);
      0008E4 2A C7 F3         [16] 2450 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008E7 09               [11] 2451 	add	hl, bc
      0008E8 23               [ 6] 2452 	inc	hl
      0008E9 23               [ 6] 2453 	inc	hl
      0008EA C5               [11] 2454 	push	bc
      0008EB 3E 1A            [ 7] 2455 	ld	a, #0x1a
      0008ED F5               [11] 2456 	push	af
      0008EE 33               [ 6] 2457 	inc	sp
      0008EF E5               [11] 2458 	push	hl
      0008F0 CDr00r00         [17] 2459 	call	_WRTVRM
      0008F3 F1               [10] 2460 	pop	af
      0008F4 33               [ 6] 2461 	inc	sp
      0008F5 C1               [10] 2462 	pop	bc
                                   2463 ;src\/Graphics.h:43: WRTVRM(MSX_modedata_screen2.name + col + 32, COLUMN_TOP_1 + 3);
      0008F6 2A C7 F3         [16] 2464 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008F9 09               [11] 2465 	add	hl, bc
      0008FA 11 20 00         [10] 2466 	ld	de, #0x0020
      0008FD 19               [11] 2467 	add	hl, de
      0008FE C5               [11] 2468 	push	bc
      0008FF 3E 1B            [ 7] 2469 	ld	a, #0x1b
      000901 F5               [11] 2470 	push	af
      000902 33               [ 6] 2471 	inc	sp
      000903 E5               [11] 2472 	push	hl
      000904 CDr00r00         [17] 2473 	call	_WRTVRM
      000907 F1               [10] 2474 	pop	af
      000908 33               [ 6] 2475 	inc	sp
      000909 C1               [10] 2476 	pop	bc
                                   2477 ;src\/Graphics.h:44: WRTVRM(MSX_modedata_screen2.name + col + 33, COLUMN_TOP_1 + 4);
      00090A 2A C7 F3         [16] 2478 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00090D 09               [11] 2479 	add	hl, bc
      00090E 11 21 00         [10] 2480 	ld	de, #0x0021
      000911 19               [11] 2481 	add	hl, de
      000912 C5               [11] 2482 	push	bc
      000913 3E 1C            [ 7] 2483 	ld	a, #0x1c
      000915 F5               [11] 2484 	push	af
      000916 33               [ 6] 2485 	inc	sp
      000917 E5               [11] 2486 	push	hl
      000918 CDr00r00         [17] 2487 	call	_WRTVRM
      00091B F1               [10] 2488 	pop	af
      00091C 33               [ 6] 2489 	inc	sp
      00091D C1               [10] 2490 	pop	bc
                                   2491 ;src\/Graphics.h:45: WRTVRM(MSX_modedata_screen2.name + col + 34, COLUMN_TOP_1 + 5);
      00091E 2A C7 F3         [16] 2492 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000921 09               [11] 2493 	add	hl, bc
      000922 11 22 00         [10] 2494 	ld	de, #0x0022
      000925 19               [11] 2495 	add	hl, de
      000926 C5               [11] 2496 	push	bc
      000927 3E 1D            [ 7] 2497 	ld	a, #0x1d
      000929 F5               [11] 2498 	push	af
      00092A 33               [ 6] 2499 	inc	sp
      00092B E5               [11] 2500 	push	hl
      00092C CDr00r00         [17] 2501 	call	_WRTVRM
      00092F F1               [10] 2502 	pop	af
                                   2503 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000930 DD 36 FF 00      [19] 2504 	ld	-1 (ix), #0
      000934 33               [ 6] 2505 	inc	sp
      000935 C1               [10] 2506 	pop	bc
      000936                       2507 00103$:
      000936 DD 7E FF         [19] 2508 	ld	a, -1 (ix)
      000939 D6 14            [ 7] 2509 	sub	a, #0x14
      00093B 30 58            [12] 2510 	jr	NC, 00101$
                                   2511 ;src\/Graphics.h:48: WRTVRM(MSX_modedata_screen2.name + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00093D 2A C7 F3         [16] 2512 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000940 09               [11] 2513 	add	hl, bc
      000941 11 40 00         [10] 2514 	ld	de, #0x0040
      000944 19               [11] 2515 	add	hl, de
      000945 DD 5E FF         [19] 2516 	ld	e, -1 (ix)
      000948 16 00            [ 7] 2517 	ld	d, #0x00
      00094A EB               [ 4] 2518 	ex	de, hl
      00094B 29               [11] 2519 	add	hl, hl
      00094C 29               [11] 2520 	add	hl, hl
      00094D 29               [11] 2521 	add	hl, hl
      00094E 29               [11] 2522 	add	hl, hl
      00094F 29               [11] 2523 	add	hl, hl
      000950 EB               [ 4] 2524 	ex	de, hl
      000951 19               [11] 2525 	add	hl, de
      000952 C5               [11] 2526 	push	bc
      000953 D5               [11] 2527 	push	de
      000954 3E 1E            [ 7] 2528 	ld	a, #0x1e
      000956 F5               [11] 2529 	push	af
      000957 33               [ 6] 2530 	inc	sp
      000958 E5               [11] 2531 	push	hl
      000959 CDr00r00         [17] 2532 	call	_WRTVRM
      00095C F1               [10] 2533 	pop	af
      00095D 33               [ 6] 2534 	inc	sp
      00095E D1               [10] 2535 	pop	de
      00095F C1               [10] 2536 	pop	bc
                                   2537 ;src\/Graphics.h:49: WRTVRM(MSX_modedata_screen2.name + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000960 2A C7 F3         [16] 2538 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000963 09               [11] 2539 	add	hl, bc
      000964 D5               [11] 2540 	push	de
      000965 11 41 00         [10] 2541 	ld	de, #0x0041
      000968 19               [11] 2542 	add	hl, de
      000969 D1               [10] 2543 	pop	de
      00096A 19               [11] 2544 	add	hl, de
      00096B C5               [11] 2545 	push	bc
      00096C D5               [11] 2546 	push	de
      00096D 3E 1F            [ 7] 2547 	ld	a, #0x1f
      00096F F5               [11] 2548 	push	af
      000970 33               [ 6] 2549 	inc	sp
      000971 E5               [11] 2550 	push	hl
      000972 CDr00r00         [17] 2551 	call	_WRTVRM
      000975 F1               [10] 2552 	pop	af
      000976 33               [ 6] 2553 	inc	sp
      000977 D1               [10] 2554 	pop	de
      000978 C1               [10] 2555 	pop	bc
                                   2556 ;src\/Graphics.h:50: WRTVRM(MSX_modedata_screen2.name + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000979 2A C7 F3         [16] 2557 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00097C 09               [11] 2558 	add	hl, bc
      00097D D5               [11] 2559 	push	de
      00097E 11 42 00         [10] 2560 	ld	de, #0x0042
      000981 19               [11] 2561 	add	hl, de
      000982 D1               [10] 2562 	pop	de
      000983 19               [11] 2563 	add	hl, de
      000984 C5               [11] 2564 	push	bc
      000985 3E 20            [ 7] 2565 	ld	a, #0x20
      000987 F5               [11] 2566 	push	af
      000988 33               [ 6] 2567 	inc	sp
      000989 E5               [11] 2568 	push	hl
      00098A CDr00r00         [17] 2569 	call	_WRTVRM
      00098D F1               [10] 2570 	pop	af
      00098E 33               [ 6] 2571 	inc	sp
      00098F C1               [10] 2572 	pop	bc
                                   2573 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000990 DD 34 FF         [23] 2574 	inc	-1 (ix)
      000993 18 A1            [12] 2575 	jr	00103$
      000995                       2576 00101$:
                                   2577 ;src\/Graphics.h:53: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8), COLUMN_MIDDLE_2);
      000995 2A C7 F3         [16] 2578 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000998 09               [11] 2579 	add	hl, bc
      000999 7C               [ 4] 2580 	ld	a, h
      00099A 3C               [ 4] 2581 	inc	a
      00099B 67               [ 4] 2582 	ld	h, a
      00099C C5               [11] 2583 	push	bc
      00099D 3E 21            [ 7] 2584 	ld	a, #0x21
      00099F F5               [11] 2585 	push	af
      0009A0 33               [ 6] 2586 	inc	sp
      0009A1 E5               [11] 2587 	push	hl
      0009A2 CDr00r00         [17] 2588 	call	_WRTVRM
      0009A5 F1               [10] 2589 	pop	af
      0009A6 33               [ 6] 2590 	inc	sp
      0009A7 C1               [10] 2591 	pop	bc
                                   2592 ;src\/Graphics.h:54: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      0009A8 2A C7 F3         [16] 2593 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009AB 09               [11] 2594 	add	hl, bc
      0009AC 11 01 01         [10] 2595 	ld	de, #0x0101
      0009AF 19               [11] 2596 	add	hl, de
      0009B0 C5               [11] 2597 	push	bc
      0009B1 3E 22            [ 7] 2598 	ld	a, #0x22
      0009B3 F5               [11] 2599 	push	af
      0009B4 33               [ 6] 2600 	inc	sp
      0009B5 E5               [11] 2601 	push	hl
      0009B6 CDr00r00         [17] 2602 	call	_WRTVRM
      0009B9 F1               [10] 2603 	pop	af
      0009BA 33               [ 6] 2604 	inc	sp
      0009BB C1               [10] 2605 	pop	bc
                                   2606 ;src\/Graphics.h:55: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0009BC 2A C7 F3         [16] 2607 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009BF 09               [11] 2608 	add	hl, bc
      0009C0 11 02 01         [10] 2609 	ld	de, #0x0102
      0009C3 19               [11] 2610 	add	hl, de
      0009C4 C5               [11] 2611 	push	bc
      0009C5 3E 23            [ 7] 2612 	ld	a, #0x23
      0009C7 F5               [11] 2613 	push	af
      0009C8 33               [ 6] 2614 	inc	sp
      0009C9 E5               [11] 2615 	push	hl
      0009CA CDr00r00         [17] 2616 	call	_WRTVRM
      0009CD F1               [10] 2617 	pop	af
      0009CE 33               [ 6] 2618 	inc	sp
      0009CF C1               [10] 2619 	pop	bc
                                   2620 ;src\/Graphics.h:57: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16), COLUMN_MIDDLE_2);
      0009D0 2A C7 F3         [16] 2621 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009D3 09               [11] 2622 	add	hl, bc
      0009D4 7C               [ 4] 2623 	ld	a, h
      0009D5 C6 02            [ 7] 2624 	add	a, #0x02
      0009D7 67               [ 4] 2625 	ld	h, a
      0009D8 C5               [11] 2626 	push	bc
      0009D9 3E 21            [ 7] 2627 	ld	a, #0x21
      0009DB F5               [11] 2628 	push	af
      0009DC 33               [ 6] 2629 	inc	sp
      0009DD E5               [11] 2630 	push	hl
      0009DE CDr00r00         [17] 2631 	call	_WRTVRM
      0009E1 F1               [10] 2632 	pop	af
      0009E2 33               [ 6] 2633 	inc	sp
      0009E3 C1               [10] 2634 	pop	bc
                                   2635 ;src\/Graphics.h:58: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0009E4 2A C7 F3         [16] 2636 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009E7 09               [11] 2637 	add	hl, bc
      0009E8 11 01 02         [10] 2638 	ld	de, #0x0201
      0009EB 19               [11] 2639 	add	hl, de
      0009EC C5               [11] 2640 	push	bc
      0009ED 3E 22            [ 7] 2641 	ld	a, #0x22
      0009EF F5               [11] 2642 	push	af
      0009F0 33               [ 6] 2643 	inc	sp
      0009F1 E5               [11] 2644 	push	hl
      0009F2 CDr00r00         [17] 2645 	call	_WRTVRM
      0009F5 F1               [10] 2646 	pop	af
      0009F6 33               [ 6] 2647 	inc	sp
      0009F7 C1               [10] 2648 	pop	bc
                                   2649 ;src\/Graphics.h:59: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0009F8 2A C7 F3         [16] 2650 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009FB 09               [11] 2651 	add	hl, bc
      0009FC 11 02 02         [10] 2652 	ld	de, #0x0202
      0009FF 19               [11] 2653 	add	hl, de
      000A00 C5               [11] 2654 	push	bc
      000A01 3E 23            [ 7] 2655 	ld	a, #0x23
      000A03 F5               [11] 2656 	push	af
      000A04 33               [ 6] 2657 	inc	sp
      000A05 E5               [11] 2658 	push	hl
      000A06 CDr00r00         [17] 2659 	call	_WRTVRM
      000A09 F1               [10] 2660 	pop	af
      000A0A 33               [ 6] 2661 	inc	sp
      000A0B C1               [10] 2662 	pop	bc
                                   2663 ;src\/Graphics.h:61: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000A0C 2A C7 F3         [16] 2664 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A0F 09               [11] 2665 	add	hl, bc
      000A10 11 C0 02         [10] 2666 	ld	de, #0x02c0
      000A13 19               [11] 2667 	add	hl, de
      000A14 C5               [11] 2668 	push	bc
      000A15 3E 24            [ 7] 2669 	ld	a, #0x24
      000A17 F5               [11] 2670 	push	af
      000A18 33               [ 6] 2671 	inc	sp
      000A19 E5               [11] 2672 	push	hl
      000A1A CDr00r00         [17] 2673 	call	_WRTVRM
      000A1D F1               [10] 2674 	pop	af
      000A1E 33               [ 6] 2675 	inc	sp
      000A1F C1               [10] 2676 	pop	bc
                                   2677 ;src\/Graphics.h:62: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000A20 2A C7 F3         [16] 2678 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A23 09               [11] 2679 	add	hl, bc
      000A24 11 C1 02         [10] 2680 	ld	de, #0x02c1
      000A27 19               [11] 2681 	add	hl, de
      000A28 C5               [11] 2682 	push	bc
      000A29 3E 25            [ 7] 2683 	ld	a, #0x25
      000A2B F5               [11] 2684 	push	af
      000A2C 33               [ 6] 2685 	inc	sp
      000A2D E5               [11] 2686 	push	hl
      000A2E CDr00r00         [17] 2687 	call	_WRTVRM
      000A31 F1               [10] 2688 	pop	af
      000A32 33               [ 6] 2689 	inc	sp
      000A33 C1               [10] 2690 	pop	bc
                                   2691 ;src\/Graphics.h:63: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000A34 2A C7 F3         [16] 2692 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A37 09               [11] 2693 	add	hl, bc
      000A38 11 C2 02         [10] 2694 	ld	de, #0x02c2
      000A3B 19               [11] 2695 	add	hl, de
      000A3C C5               [11] 2696 	push	bc
      000A3D 3E 26            [ 7] 2697 	ld	a, #0x26
      000A3F F5               [11] 2698 	push	af
      000A40 33               [ 6] 2699 	inc	sp
      000A41 E5               [11] 2700 	push	hl
      000A42 CDr00r00         [17] 2701 	call	_WRTVRM
      000A45 F1               [10] 2702 	pop	af
      000A46 33               [ 6] 2703 	inc	sp
      000A47 C1               [10] 2704 	pop	bc
                                   2705 ;src\/Graphics.h:64: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000A48 2A C7 F3         [16] 2706 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A4B 09               [11] 2707 	add	hl, bc
      000A4C 11 E0 02         [10] 2708 	ld	de, #0x02e0
      000A4F 19               [11] 2709 	add	hl, de
      000A50 C5               [11] 2710 	push	bc
      000A51 3E 27            [ 7] 2711 	ld	a, #0x27
      000A53 F5               [11] 2712 	push	af
      000A54 33               [ 6] 2713 	inc	sp
      000A55 E5               [11] 2714 	push	hl
      000A56 CDr00r00         [17] 2715 	call	_WRTVRM
      000A59 F1               [10] 2716 	pop	af
      000A5A 33               [ 6] 2717 	inc	sp
      000A5B C1               [10] 2718 	pop	bc
                                   2719 ;src\/Graphics.h:65: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000A5C 2A C7 F3         [16] 2720 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A5F 09               [11] 2721 	add	hl, bc
      000A60 11 E1 02         [10] 2722 	ld	de, #0x02e1
      000A63 19               [11] 2723 	add	hl, de
      000A64 C5               [11] 2724 	push	bc
      000A65 3E 28            [ 7] 2725 	ld	a, #0x28
      000A67 F5               [11] 2726 	push	af
      000A68 33               [ 6] 2727 	inc	sp
      000A69 E5               [11] 2728 	push	hl
      000A6A CDr00r00         [17] 2729 	call	_WRTVRM
      000A6D F1               [10] 2730 	pop	af
      000A6E 33               [ 6] 2731 	inc	sp
      000A6F C1               [10] 2732 	pop	bc
                                   2733 ;src\/Graphics.h:66: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000A70 2A C7 F3         [16] 2734 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A73 09               [11] 2735 	add	hl, bc
      000A74 01 E2 02         [10] 2736 	ld	bc, #0x02e2
      000A77 09               [11] 2737 	add	hl, bc
      000A78 3E 29            [ 7] 2738 	ld	a, #0x29
      000A7A F5               [11] 2739 	push	af
      000A7B 33               [ 6] 2740 	inc	sp
      000A7C E5               [11] 2741 	push	hl
      000A7D CDr00r00         [17] 2742 	call	_WRTVRM
      000A80 F1               [10] 2743 	pop	af
      000A81 33               [ 6] 2744 	inc	sp
                                   2745 ;src\/Graphics.h:67: }
      000A82 33               [ 6] 2746 	inc	sp
      000A83 DD E1            [14] 2747 	pop	ix
      000A85 C9               [10] 2748 	ret
                                   2749 ;src\/Graphics.h:69: void DrawScore() {
                                   2750 ;	---------------------------------
                                   2751 ; Function DrawScore
                                   2752 ; ---------------------------------
      000A86                       2753 _DrawScore::
      000A86 DD E5            [15] 2754 	push	ix
      000A88 DD 21 00 00      [14] 2755 	ld	ix,#0
      000A8C DD 39            [15] 2756 	add	ix,sp
      000A8E F5               [11] 2757 	push	af
                                   2758 ;src\/Graphics.h:70: byte bgCounter = 0, bgColor;
      000A8F DD 36 FE 00      [19] 2759 	ld	-2 (ix), #0
                                   2760 ;src\/Graphics.h:74: if(newLevel) {
      000A93 3Ar07r00         [13] 2761 	ld	a,(#_newLevel + 0)
      000A96 B7               [ 4] 2762 	or	a, a
      000A97 CAr8Br0B         [10] 2763 	jp	Z, 00119$
                                   2764 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000A9A DD 36 FF 00      [19] 2765 	ld	-1 (ix), #0
      000A9E                       2766 00121$:
      000A9E DD 7E FF         [19] 2767 	ld	a, -1 (ix)
      000AA1 D6 3C            [ 7] 2768 	sub	a, #0x3c
      000AA3 D2r8Br0B         [10] 2769 	jp	NC, 00119$
                                   2770 ;src\/Graphics.h:76: lastJiffy = JIFFY;
      000AA6 ED 4B 9E FC      [20] 2771 	ld	bc, (_JIFFY)
                                   2772 ;src\/Graphics.h:77: while(lastJiffy == JIFFY) { }
      000AAA                       2773 00101$:
      000AAA 2A 9E FC         [16] 2774 	ld	hl, (_JIFFY)
      000AAD BF               [ 4] 2775 	cp	a, a
      000AAE ED 42            [15] 2776 	sbc	hl, bc
      000AB0 28 F8            [12] 2777 	jr	Z, 00101$
                                   2778 ;src\/Graphics.h:80: if(JIFFY & 0b00000110) {
      000AB2 2A 9E FC         [16] 2779 	ld	hl, (_JIFFY)
      000AB5 7D               [ 4] 2780 	ld	a, l
      000AB6 E6 06            [ 7] 2781 	and	a, #0x06
      000AB8 CAr6Br0B         [10] 2782 	jp	Z,00115$
                                   2783 ;src\/Graphics.h:81: DrawString(" LEVEL", 26, 4);
      000ABB 11 1A 04         [10] 2784 	ld	de, #0x041a
      000ABE D5               [11] 2785 	push	de
      000ABF 21r08r0C         [10] 2786 	ld	hl, #___str_1
      000AC2 E5               [11] 2787 	push	hl
      000AC3 CDrC8r07         [17] 2788 	call	_DrawString
      000AC6 F1               [10] 2789 	pop	af
      000AC7 F1               [10] 2790 	pop	af
                                   2791 ;src\/Graphics.h:82: DrawNumber(level, 26, 5);
      000AC8 3Ar06r00         [13] 2792 	ld	a, (#_level + 0)
      000ACB 4F               [ 4] 2793 	ld	c, a
      000ACC 06 00            [ 7] 2794 	ld	b, #0x00
      000ACE 11 1A 05         [10] 2795 	ld	de, #0x051a
      000AD1 D5               [11] 2796 	push	de
      000AD2 C5               [11] 2797 	push	bc
      000AD3 CDrFAr07         [17] 2798 	call	_DrawNumber
      000AD6 F1               [10] 2799 	pop	af
      000AD7 F1               [10] 2800 	pop	af
                                   2801 ;src\/Graphics.h:88: switch(bgCounter++) {
      000AD8 DD 4E FE         [19] 2802 	ld	c, -2 (ix)
      000ADB DD 34 FE         [23] 2803 	inc	-2 (ix)
      000ADE 3E 07            [ 7] 2804 	ld	a, #0x07
      000AE0 91               [ 4] 2805 	sub	a, c
      000AE1 38 45            [12] 2806 	jr	C, 00112$
      000AE3 06 00            [ 7] 2807 	ld	b, #0x00
      000AE5 21rECr0A         [10] 2808 	ld	hl, #00163$
      000AE8 09               [11] 2809 	add	hl, bc
      000AE9 09               [11] 2810 	add	hl, bc
      000AEA 09               [11] 2811 	add	hl, bc
      000AEB E9               [ 4] 2812 	jp	(hl)
      000AEC                       2813 00163$:
      000AEC C3r04r0B         [10] 2814 	jp	00104$
      000AEF C3r08r0B         [10] 2815 	jp	00105$
      000AF2 C3r0Cr0B         [10] 2816 	jp	00106$
      000AF5 C3r10r0B         [10] 2817 	jp	00107$
      000AF8 C3r14r0B         [10] 2818 	jp	00108$
      000AFB C3r18r0B         [10] 2819 	jp	00109$
      000AFE C3r1Cr0B         [10] 2820 	jp	00110$
      000B01 C3r20r0B         [10] 2821 	jp	00111$
                                   2822 ;src\/Graphics.h:89: case 0:
      000B04                       2823 00104$:
                                   2824 ;src\/Graphics.h:90: bgColor = 0x14;
      000B04 0E 14            [ 7] 2825 	ld	c, #0x14
                                   2826 ;src\/Graphics.h:91: break;
      000B06 18 22            [12] 2827 	jr	00113$
                                   2828 ;src\/Graphics.h:92: case 1:
      000B08                       2829 00105$:
                                   2830 ;src\/Graphics.h:93: bgColor = 0x15;
      000B08 0E 15            [ 7] 2831 	ld	c, #0x15
                                   2832 ;src\/Graphics.h:94: break;
      000B0A 18 1E            [12] 2833 	jr	00113$
                                   2834 ;src\/Graphics.h:95: case 2:
      000B0C                       2835 00106$:
                                   2836 ;src\/Graphics.h:96: bgColor = 0x17;
      000B0C 0E 17            [ 7] 2837 	ld	c, #0x17
                                   2838 ;src\/Graphics.h:97: break;
      000B0E 18 1A            [12] 2839 	jr	00113$
                                   2840 ;src\/Graphics.h:98: case 3:
      000B10                       2841 00107$:
                                   2842 ;src\/Graphics.h:99: bgColor = 0x1e;
      000B10 0E 1E            [ 7] 2843 	ld	c, #0x1e
                                   2844 ;src\/Graphics.h:100: break;
      000B12 18 16            [12] 2845 	jr	00113$
                                   2846 ;src\/Graphics.h:101: case 4:
      000B14                       2847 00108$:
                                   2848 ;src\/Graphics.h:102: bgColor = 0x1f;
      000B14 0E 1F            [ 7] 2849 	ld	c, #0x1f
                                   2850 ;src\/Graphics.h:103: break;
      000B16 18 12            [12] 2851 	jr	00113$
                                   2852 ;src\/Graphics.h:104: case 5:
      000B18                       2853 00109$:
                                   2854 ;src\/Graphics.h:105: bgColor = 0x1e;
      000B18 0E 1E            [ 7] 2855 	ld	c, #0x1e
                                   2856 ;src\/Graphics.h:106: break;
      000B1A 18 0E            [12] 2857 	jr	00113$
                                   2858 ;src\/Graphics.h:107: case 6:
      000B1C                       2859 00110$:
                                   2860 ;src\/Graphics.h:108: bgColor = 0x17;
      000B1C 0E 17            [ 7] 2861 	ld	c, #0x17
                                   2862 ;src\/Graphics.h:109: break;
      000B1E 18 0A            [12] 2863 	jr	00113$
                                   2864 ;src\/Graphics.h:110: case 7:
      000B20                       2865 00111$:
                                   2866 ;src\/Graphics.h:111: bgColor = 0x15;
      000B20 0E 15            [ 7] 2867 	ld	c, #0x15
                                   2868 ;src\/Graphics.h:112: bgCounter = 0;
      000B22 DD 36 FE 00      [19] 2869 	ld	-2 (ix), #0
                                   2870 ;src\/Graphics.h:113: break;
      000B26 18 02            [12] 2871 	jr	00113$
                                   2872 ;src\/Graphics.h:114: default:
      000B28                       2873 00112$:
                                   2874 ;src\/Graphics.h:115: bgColor = 0x11;
      000B28 0E 11            [ 7] 2875 	ld	c, #0x11
                                   2876 ;src\/Graphics.h:117: }
      000B2A                       2877 00113$:
                                   2878 ;src\/Graphics.h:118: FILVRM(MSX_modedata_screen2.color, 8 * 4, bgColor);
      000B2A 2A C9 F3         [16] 2879 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B2D C5               [11] 2880 	push	bc
      000B2E 79               [ 4] 2881 	ld	a, c
      000B2F F5               [11] 2882 	push	af
      000B30 33               [ 6] 2883 	inc	sp
      000B31 11 20 00         [10] 2884 	ld	de, #0x0020
      000B34 D5               [11] 2885 	push	de
      000B35 E5               [11] 2886 	push	hl
      000B36 CDr00r00         [17] 2887 	call	_FILVRM
      000B39 F1               [10] 2888 	pop	af
      000B3A F1               [10] 2889 	pop	af
      000B3B 33               [ 6] 2890 	inc	sp
      000B3C C1               [10] 2891 	pop	bc
                                   2892 ;src\/Graphics.h:119: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, bgColor);
      000B3D 2A C9 F3         [16] 2893 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B40 7C               [ 4] 2894 	ld	a, h
      000B41 C6 08            [ 7] 2895 	add	a, #0x08
      000B43 67               [ 4] 2896 	ld	h, a
      000B44 C5               [11] 2897 	push	bc
      000B45 79               [ 4] 2898 	ld	a, c
      000B46 F5               [11] 2899 	push	af
      000B47 33               [ 6] 2900 	inc	sp
      000B48 11 20 00         [10] 2901 	ld	de, #0x0020
      000B4B D5               [11] 2902 	push	de
      000B4C E5               [11] 2903 	push	hl
      000B4D CDr00r00         [17] 2904 	call	_FILVRM
      000B50 F1               [10] 2905 	pop	af
      000B51 F1               [10] 2906 	pop	af
      000B52 33               [ 6] 2907 	inc	sp
      000B53 C1               [10] 2908 	pop	bc
                                   2909 ;src\/Graphics.h:120: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, bgColor);
      000B54 2A C9 F3         [16] 2910 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B57 7C               [ 4] 2911 	ld	a, h
      000B58 C6 10            [ 7] 2912 	add	a, #0x10
      000B5A 67               [ 4] 2913 	ld	h, a
      000B5B 79               [ 4] 2914 	ld	a, c
      000B5C F5               [11] 2915 	push	af
      000B5D 33               [ 6] 2916 	inc	sp
      000B5E 11 20 00         [10] 2917 	ld	de, #0x0020
      000B61 D5               [11] 2918 	push	de
      000B62 E5               [11] 2919 	push	hl
      000B63 CDr00r00         [17] 2920 	call	_FILVRM
      000B66 F1               [10] 2921 	pop	af
      000B67 F1               [10] 2922 	pop	af
      000B68 33               [ 6] 2923 	inc	sp
      000B69 18 1A            [12] 2924 	jr	00122$
      000B6B                       2925 00115$:
                                   2926 ;src\/Graphics.h:125: DrawString("      ", 26, 4);
      000B6B 11 1A 04         [10] 2927 	ld	de, #0x041a
      000B6E D5               [11] 2928 	push	de
      000B6F 21r0Fr0C         [10] 2929 	ld	hl, #___str_2
      000B72 E5               [11] 2930 	push	hl
      000B73 CDrC8r07         [17] 2931 	call	_DrawString
      000B76 F1               [10] 2932 	pop	af
      000B77 F1               [10] 2933 	pop	af
                                   2934 ;src\/Graphics.h:126: DrawString("      ", 26, 5);
      000B78 11 1A 05         [10] 2935 	ld	de, #0x051a
      000B7B D5               [11] 2936 	push	de
      000B7C 21r0Fr0C         [10] 2937 	ld	hl, #___str_2
      000B7F E5               [11] 2938 	push	hl
      000B80 CDrC8r07         [17] 2939 	call	_DrawString
      000B83 F1               [10] 2940 	pop	af
      000B84 F1               [10] 2941 	pop	af
      000B85                       2942 00122$:
                                   2943 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000B85 DD 34 FF         [23] 2944 	inc	-1 (ix)
      000B88 C3r9Er0A         [10] 2945 	jp	00121$
      000B8B                       2946 00119$:
                                   2947 ;src\/Graphics.h:132: newLevel = FALSE;
      000B8B 21r07r00         [10] 2948 	ld	hl, #_newLevel
      000B8E 36 00            [10] 2949 	ld	(hl), #0x00
                                   2950 ;src\/Graphics.h:135: FILVRM(MSX_modedata_screen2.color, 8 * 4, 0x14);
      000B90 2A C9 F3         [16] 2951 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B93 3E 14            [ 7] 2952 	ld	a, #0x14
      000B95 F5               [11] 2953 	push	af
      000B96 33               [ 6] 2954 	inc	sp
      000B97 11 20 00         [10] 2955 	ld	de, #0x0020
      000B9A D5               [11] 2956 	push	de
      000B9B E5               [11] 2957 	push	hl
      000B9C CDr00r00         [17] 2958 	call	_FILVRM
      000B9F F1               [10] 2959 	pop	af
      000BA0 F1               [10] 2960 	pop	af
      000BA1 33               [ 6] 2961 	inc	sp
                                   2962 ;src\/Graphics.h:136: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, 0x14);
      000BA2 2A C9 F3         [16] 2963 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000BA5 7C               [ 4] 2964 	ld	a, h
      000BA6 C6 08            [ 7] 2965 	add	a, #0x08
      000BA8 67               [ 4] 2966 	ld	h, a
      000BA9 3E 14            [ 7] 2967 	ld	a, #0x14
      000BAB F5               [11] 2968 	push	af
      000BAC 33               [ 6] 2969 	inc	sp
      000BAD 11 20 00         [10] 2970 	ld	de, #0x0020
      000BB0 D5               [11] 2971 	push	de
      000BB1 E5               [11] 2972 	push	hl
      000BB2 CDr00r00         [17] 2973 	call	_FILVRM
      000BB5 F1               [10] 2974 	pop	af
      000BB6 F1               [10] 2975 	pop	af
      000BB7 33               [ 6] 2976 	inc	sp
                                   2977 ;src\/Graphics.h:137: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, 0x14);
      000BB8 2A C9 F3         [16] 2978 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000BBB 7C               [ 4] 2979 	ld	a, h
      000BBC C6 10            [ 7] 2980 	add	a, #0x10
      000BBE 67               [ 4] 2981 	ld	h, a
      000BBF 3E 14            [ 7] 2982 	ld	a, #0x14
      000BC1 F5               [11] 2983 	push	af
      000BC2 33               [ 6] 2984 	inc	sp
      000BC3 11 20 00         [10] 2985 	ld	de, #0x0020
      000BC6 D5               [11] 2986 	push	de
      000BC7 E5               [11] 2987 	push	hl
      000BC8 CDr00r00         [17] 2988 	call	_FILVRM
      000BCB F1               [10] 2989 	pop	af
      000BCC F1               [10] 2990 	pop	af
      000BCD 33               [ 6] 2991 	inc	sp
                                   2992 ;src\/Graphics.h:139: DrawString(" LEVEL", 26, 4);
      000BCE 11 1A 04         [10] 2993 	ld	de, #0x041a
      000BD1 D5               [11] 2994 	push	de
      000BD2 21r08r0C         [10] 2995 	ld	hl, #___str_1
      000BD5 E5               [11] 2996 	push	hl
      000BD6 CDrC8r07         [17] 2997 	call	_DrawString
      000BD9 F1               [10] 2998 	pop	af
      000BDA F1               [10] 2999 	pop	af
                                   3000 ;src\/Graphics.h:140: DrawString("BLOCKS", 26, 9);
      000BDB 11 1A 09         [10] 3001 	ld	de, #0x091a
      000BDE D5               [11] 3002 	push	de
      000BDF 21r16r0C         [10] 3003 	ld	hl, #___str_3
      000BE2 E5               [11] 3004 	push	hl
      000BE3 CDrC8r07         [17] 3005 	call	_DrawString
      000BE6 F1               [10] 3006 	pop	af
      000BE7 F1               [10] 3007 	pop	af
                                   3008 ;src\/Graphics.h:142: DrawNumber(blocksRemoved, 26, 10);
      000BE8 11 1A 0A         [10] 3009 	ld	de, #0x0a1a
      000BEB D5               [11] 3010 	push	de
      000BEC 2Ar04r00         [16] 3011 	ld	hl, (_blocksRemoved)
      000BEF E5               [11] 3012 	push	hl
      000BF0 CDrFAr07         [17] 3013 	call	_DrawNumber
      000BF3 F1               [10] 3014 	pop	af
      000BF4 F1               [10] 3015 	pop	af
                                   3016 ;src\/Graphics.h:143: DrawNumber(level, 26, 5);
      000BF5 3Ar06r00         [13] 3017 	ld	a, (#_level + 0)
      000BF8 4F               [ 4] 3018 	ld	c, a
      000BF9 06 00            [ 7] 3019 	ld	b, #0x00
      000BFB 11 1A 05         [10] 3020 	ld	de, #0x051a
      000BFE D5               [11] 3021 	push	de
      000BFF C5               [11] 3022 	push	bc
      000C00 CDrFAr07         [17] 3023 	call	_DrawNumber
                                   3024 ;src\/Graphics.h:145: }
      000C03 DD F9            [10] 3025 	ld	sp,ix
      000C05 DD E1            [14] 3026 	pop	ix
      000C07 C9               [10] 3027 	ret
      000C08                       3028 ___str_1:
      000C08 20 4C 45 56 45 4C     3029 	.ascii " LEVEL"
      000C0E 00                    3030 	.db 0x00
      000C0F                       3031 ___str_2:
      000C0F 20 20 20 20 20 20     3032 	.ascii "      "
      000C15 00                    3033 	.db 0x00
      000C16                       3034 ___str_3:
      000C16 42 4C 4F 43 4B 53     3035 	.ascii "BLOCKS"
      000C1C 00                    3036 	.db 0x00
                                   3037 ;src\/Graphics.h:147: void DrawBackground() {
                                   3038 ;	---------------------------------
                                   3039 ; Function DrawBackground
                                   3040 ; ---------------------------------
      000C1D                       3041 _DrawBackground::
                                   3042 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C1D 01 00 00         [10] 3043 	ld	bc, #0x0000
      000C20                       3044 00103$:
      000C20 78               [ 4] 3045 	ld	a, b
      000C21 EE 80            [ 7] 3046 	xor	a, #0x80
      000C23 D6 83            [ 7] 3047 	sub	a, #0x83
      000C25 30 14            [12] 3048 	jr	NC, 00101$
                                   3049 ;src\/Graphics.h:150: WRTVRM(MSX_modedata_screen2.name + i, 0); // test
      000C27 2A C7 F3         [16] 3050 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000C2A 59               [ 4] 3051 	ld	e, c
      000C2B 50               [ 4] 3052 	ld	d, b
      000C2C 19               [11] 3053 	add	hl, de
      000C2D C5               [11] 3054 	push	bc
      000C2E AF               [ 4] 3055 	xor	a, a
      000C2F F5               [11] 3056 	push	af
      000C30 33               [ 6] 3057 	inc	sp
      000C31 E5               [11] 3058 	push	hl
      000C32 CDr00r00         [17] 3059 	call	_WRTVRM
      000C35 F1               [10] 3060 	pop	af
      000C36 33               [ 6] 3061 	inc	sp
      000C37 C1               [10] 3062 	pop	bc
                                   3063 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C38 03               [ 6] 3064 	inc	bc
      000C39 18 E5            [12] 3065 	jr	00103$
      000C3B                       3066 00101$:
                                   3067 ;src\/Graphics.h:153: DrawColumn(7);
      000C3B 3E 07            [ 7] 3068 	ld	a, #0x07
      000C3D F5               [11] 3069 	push	af
      000C3E 33               [ 6] 3070 	inc	sp
      000C3F CDrB5r08         [17] 3071 	call	_DrawColumn
      000C42 33               [ 6] 3072 	inc	sp
                                   3073 ;src\/Graphics.h:154: DrawColumn(22);
      000C43 3E 16            [ 7] 3074 	ld	a, #0x16
      000C45 F5               [11] 3075 	push	af
      000C46 33               [ 6] 3076 	inc	sp
      000C47 CDrB5r08         [17] 3077 	call	_DrawColumn
      000C4A 33               [ 6] 3078 	inc	sp
                                   3079 ;src\/Graphics.h:156: DrawScore();
                                   3080 ;src\/Graphics.h:192: }
      000C4B C3r86r0A         [10] 3081 	jp	_DrawScore
                                   3082 ;src\/Graphics.h:194: void DrawArrow(byte x, byte y) {
                                   3083 ;	---------------------------------
                                   3084 ; Function DrawArrow
                                   3085 ; ---------------------------------
      000C4E                       3086 _DrawArrow::
      000C4E DD E5            [15] 3087 	push	ix
      000C50 DD 21 00 00      [14] 3088 	ld	ix,#0
      000C54 DD 39            [15] 3089 	add	ix,sp
      000C56 21 F8 FF         [10] 3090 	ld	hl, #-8
      000C59 39               [11] 3091 	add	hl, sp
      000C5A F9               [ 6] 3092 	ld	sp, hl
                                   3093 ;src\/Graphics.h:195: const byte colors[] = {
      000C5B 21 00 00         [10] 3094 	ld	hl, #0
      000C5E 39               [11] 3095 	add	hl, sp
      000C5F EB               [ 4] 3096 	ex	de, hl
      000C60 3E 0F            [ 7] 3097 	ld	a, #0x0f
      000C62 12               [ 7] 3098 	ld	(de), a
      000C63 6B               [ 4] 3099 	ld	l, e
      000C64 62               [ 4] 3100 	ld	h, d
      000C65 23               [ 6] 3101 	inc	hl
      000C66 36 0E            [10] 3102 	ld	(hl), #0x0e
      000C68 6B               [ 4] 3103 	ld	l, e
      000C69 62               [ 4] 3104 	ld	h, d
      000C6A 23               [ 6] 3105 	inc	hl
      000C6B 23               [ 6] 3106 	inc	hl
      000C6C 36 05            [10] 3107 	ld	(hl), #0x05
      000C6E 6B               [ 4] 3108 	ld	l, e
      000C6F 62               [ 4] 3109 	ld	h, d
      000C70 23               [ 6] 3110 	inc	hl
      000C71 23               [ 6] 3111 	inc	hl
      000C72 23               [ 6] 3112 	inc	hl
      000C73 36 04            [10] 3113 	ld	(hl), #0x04
      000C75 21 04 00         [10] 3114 	ld	hl, #0x0004
      000C78 19               [11] 3115 	add	hl, de
      000C79 36 04            [10] 3116 	ld	(hl), #0x04
      000C7B 21 05 00         [10] 3117 	ld	hl, #0x0005
      000C7E 19               [11] 3118 	add	hl, de
      000C7F 36 05            [10] 3119 	ld	(hl), #0x05
      000C81 21 06 00         [10] 3120 	ld	hl, #0x0006
      000C84 19               [11] 3121 	add	hl, de
      000C85 36 0E            [10] 3122 	ld	(hl), #0x0e
      000C87 21 07 00         [10] 3123 	ld	hl, #0x0007
      000C8A 19               [11] 3124 	add	hl, de
      000C8B 36 0F            [10] 3125 	ld	(hl), #0x0f
                                   3126 ;src\/Graphics.h:206: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000C8D 2A 9E FC         [16] 3127 	ld	hl, (_JIFFY)
      000C90 7D               [ 4] 3128 	ld	a, l
      000C91 E6 0E            [ 7] 3129 	and	a, #0x0e
      000C93 4F               [ 4] 3130 	ld	c, a
      000C94 06 00            [ 7] 3131 	ld	b, #0x00
      000C96 CB 38            [ 8] 3132 	srl	b
      000C98 CB 19            [ 8] 3133 	rr	c
                                   3134 ;src\/Graphics.h:213: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	y - 1);
      000C9A DD 46 05         [19] 3135 	ld	b, 5 (ix)
      000C9D 05               [ 4] 3136 	dec	b
      000C9E 2A CD F3         [16] 3137 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CA1 C5               [11] 3138 	push	bc
      000CA2 D5               [11] 3139 	push	de
      000CA3 C5               [11] 3140 	push	bc
      000CA4 33               [ 6] 3141 	inc	sp
      000CA5 E5               [11] 3142 	push	hl
      000CA6 CDr00r00         [17] 3143 	call	_WRTVRM
      000CA9 F1               [10] 3144 	pop	af
      000CAA 33               [ 6] 3145 	inc	sp
      000CAB D1               [10] 3146 	pop	de
      000CAC C1               [10] 3147 	pop	bc
                                   3148 ;src\/Graphics.h:214: WRTVRM(MSX_modedata_screen2.sprite_attribute + 1, 	x);
      000CAD 2A CD F3         [16] 3149 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CB0 23               [ 6] 3150 	inc	hl
      000CB1 C5               [11] 3151 	push	bc
      000CB2 D5               [11] 3152 	push	de
      000CB3 DD 7E 04         [19] 3153 	ld	a, 4 (ix)
      000CB6 F5               [11] 3154 	push	af
      000CB7 33               [ 6] 3155 	inc	sp
      000CB8 E5               [11] 3156 	push	hl
      000CB9 CDr00r00         [17] 3157 	call	_WRTVRM
      000CBC F1               [10] 3158 	pop	af
      000CBD 33               [ 6] 3159 	inc	sp
      000CBE D1               [10] 3160 	pop	de
      000CBF C1               [10] 3161 	pop	bc
                                   3162 ;src\/Graphics.h:215: WRTVRM(MSX_modedata_screen2.sprite_attribute + 2, 	SPRITE_PATTERN_DOWN_ARROW);
      000CC0 2A CD F3         [16] 3163 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CC3 23               [ 6] 3164 	inc	hl
      000CC4 23               [ 6] 3165 	inc	hl
      000CC5 C5               [11] 3166 	push	bc
      000CC6 D5               [11] 3167 	push	de
      000CC7 AF               [ 4] 3168 	xor	a, a
      000CC8 F5               [11] 3169 	push	af
      000CC9 33               [ 6] 3170 	inc	sp
      000CCA E5               [11] 3171 	push	hl
      000CCB CDr00r00         [17] 3172 	call	_WRTVRM
      000CCE F1               [10] 3173 	pop	af
      000CCF 33               [ 6] 3174 	inc	sp
      000CD0 D1               [10] 3175 	pop	de
      000CD1 C1               [10] 3176 	pop	bc
                                   3177 ;src\/Graphics.h:216: WRTVRM(MSX_modedata_screen2.sprite_attribute + 3, 	colors[colorIndex]);
      000CD2 69               [ 4] 3178 	ld	l, c
      000CD3 26 00            [ 7] 3179 	ld	h, #0x00
      000CD5 19               [11] 3180 	add	hl, de
      000CD6 4E               [ 7] 3181 	ld	c, (hl)
      000CD7 2A CD F3         [16] 3182 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CDA 23               [ 6] 3183 	inc	hl
      000CDB 23               [ 6] 3184 	inc	hl
      000CDC 23               [ 6] 3185 	inc	hl
      000CDD 79               [ 4] 3186 	ld	a, c
      000CDE F5               [11] 3187 	push	af
      000CDF 33               [ 6] 3188 	inc	sp
      000CE0 E5               [11] 3189 	push	hl
      000CE1 CDr00r00         [17] 3190 	call	_WRTVRM
                                   3191 ;src\/Graphics.h:225: }
      000CE4 DD F9            [10] 3192 	ld	sp,ix
      000CE6 DD E1            [14] 3193 	pop	ix
      000CE8 C9               [10] 3194 	ret
                                   3195 ;src\/Graphics.h:227: void HideArrow() {
                                   3196 ;	---------------------------------
                                   3197 ; Function HideArrow
                                   3198 ; ---------------------------------
      000CE9                       3199 _HideArrow::
                                   3200 ;src\/Graphics.h:228: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	192);
      000CE9 2A CD F3         [16] 3201 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CEC 3E C0            [ 7] 3202 	ld	a, #0xc0
      000CEE F5               [11] 3203 	push	af
      000CEF 33               [ 6] 3204 	inc	sp
      000CF0 E5               [11] 3205 	push	hl
      000CF1 CDr00r00         [17] 3206 	call	_WRTVRM
      000CF4 F1               [10] 3207 	pop	af
      000CF5 33               [ 6] 3208 	inc	sp
                                   3209 ;src\/Graphics.h:229: }
      000CF6 C9               [10] 3210 	ret
                                   3211 ;src\/Graphics.h:231: void DrawHitSprite(byte x, byte y, bool firstTime) {
                                   3212 ;	---------------------------------
                                   3213 ; Function DrawHitSprite
                                   3214 ; ---------------------------------
      000CF7                       3215 _DrawHitSprite::
      000CF7 DD E5            [15] 3216 	push	ix
      000CF9 DD 21 00 00      [14] 3217 	ld	ix,#0
      000CFD DD 39            [15] 3218 	add	ix,sp
      000CFF 21 F6 FF         [10] 3219 	ld	hl, #-10
      000D02 39               [11] 3220 	add	hl, sp
      000D03 F9               [ 6] 3221 	ld	sp, hl
                                   3222 ;src\/Graphics.h:233: const byte colors[] = {
      000D04 21 00 00         [10] 3223 	ld	hl, #0
      000D07 39               [11] 3224 	add	hl, sp
      000D08 EB               [ 4] 3225 	ex	de, hl
      000D09 3E 0F            [ 7] 3226 	ld	a, #0x0f
      000D0B 12               [ 7] 3227 	ld	(de), a
      000D0C 6B               [ 4] 3228 	ld	l, e
      000D0D 62               [ 4] 3229 	ld	h, d
      000D0E 23               [ 6] 3230 	inc	hl
      000D0F 36 0E            [10] 3231 	ld	(hl), #0x0e
      000D11 6B               [ 4] 3232 	ld	l, e
      000D12 62               [ 4] 3233 	ld	h, d
      000D13 23               [ 6] 3234 	inc	hl
      000D14 23               [ 6] 3235 	inc	hl
      000D15 36 05            [10] 3236 	ld	(hl), #0x05
      000D17 6B               [ 4] 3237 	ld	l, e
      000D18 62               [ 4] 3238 	ld	h, d
      000D19 23               [ 6] 3239 	inc	hl
      000D1A 23               [ 6] 3240 	inc	hl
      000D1B 23               [ 6] 3241 	inc	hl
      000D1C 36 04            [10] 3242 	ld	(hl), #0x04
      000D1E 21 04 00         [10] 3243 	ld	hl, #0x0004
      000D21 19               [11] 3244 	add	hl, de
      000D22 36 04            [10] 3245 	ld	(hl), #0x04
      000D24 21 05 00         [10] 3246 	ld	hl, #0x0005
      000D27 19               [11] 3247 	add	hl, de
      000D28 36 05            [10] 3248 	ld	(hl), #0x05
      000D2A 21 06 00         [10] 3249 	ld	hl, #0x0006
      000D2D 19               [11] 3250 	add	hl, de
      000D2E 36 0E            [10] 3251 	ld	(hl), #0x0e
      000D30 21 07 00         [10] 3252 	ld	hl, #0x0007
      000D33 19               [11] 3253 	add	hl, de
      000D34 36 0F            [10] 3254 	ld	(hl), #0x0f
                                   3255 ;src\/Graphics.h:244: byte colorIndex = (JIFFY & 0b00000111) >> 1;
      000D36 2A 9E FC         [16] 3256 	ld	hl, (_JIFFY)
      000D39 7D               [ 4] 3257 	ld	a, l
      000D3A E6 07            [ 7] 3258 	and	a, #0x07
      000D3C 4F               [ 4] 3259 	ld	c, a
      000D3D 06 00            [ 7] 3260 	ld	b, #0x00
      000D3F CB 38            [ 8] 3261 	srl	b
      000D41 CB 19            [ 8] 3262 	rr	c
      000D43 DD 71 FE         [19] 3263 	ld	-2 (ix), c
                                   3264 ;src\/Graphics.h:246: if(firstTime) {
      000D46 DD 7E 06         [19] 3265 	ld	a, 6 (ix)
      000D49 B7               [ 4] 3266 	or	a, a
      000D4A CArCFr0D         [10] 3267 	jp	Z, 00102$
                                   3268 ;src\/Graphics.h:247: WRTVRM(MSX_modedata_screen2.sprite_attribute + 5, 	x - 8);
      000D4D DD 7E 04         [19] 3269 	ld	a, 4 (ix)
      000D50 DD 77 FF         [19] 3270 	ld	-1 (ix), a
      000D53 C6 F8            [ 7] 3271 	add	a, #0xf8
      000D55 47               [ 4] 3272 	ld	b, a
      000D56 2A CD F3         [16] 3273 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D59 23               [ 6] 3274 	inc	hl
      000D5A 23               [ 6] 3275 	inc	hl
      000D5B 23               [ 6] 3276 	inc	hl
      000D5C 23               [ 6] 3277 	inc	hl
      000D5D 23               [ 6] 3278 	inc	hl
      000D5E D5               [11] 3279 	push	de
      000D5F C5               [11] 3280 	push	bc
      000D60 33               [ 6] 3281 	inc	sp
      000D61 E5               [11] 3282 	push	hl
      000D62 CDr00r00         [17] 3283 	call	_WRTVRM
      000D65 F1               [10] 3284 	pop	af
      000D66 33               [ 6] 3285 	inc	sp
      000D67 D1               [10] 3286 	pop	de
                                   3287 ;src\/Graphics.h:248: WRTVRM(MSX_modedata_screen2.sprite_attribute + 6, 	SPRITE_PATTERN_3X_HIT);
      000D68 2A CD F3         [16] 3288 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D6B 01 06 00         [10] 3289 	ld	bc, #0x0006
      000D6E 09               [11] 3290 	add	hl, bc
      000D6F D5               [11] 3291 	push	de
      000D70 3E 04            [ 7] 3292 	ld	a, #0x04
      000D72 F5               [11] 3293 	push	af
      000D73 33               [ 6] 3294 	inc	sp
      000D74 E5               [11] 3295 	push	hl
      000D75 CDr00r00         [17] 3296 	call	_WRTVRM
      000D78 F1               [10] 3297 	pop	af
      000D79 33               [ 6] 3298 	inc	sp
      000D7A D1               [10] 3299 	pop	de
                                   3300 ;src\/Graphics.h:250: WRTVRM(MSX_modedata_screen2.sprite_attribute + 9, 	x + 8);
      000D7B DD 7E FF         [19] 3301 	ld	a, -1 (ix)
      000D7E C6 08            [ 7] 3302 	add	a, #0x08
      000D80 47               [ 4] 3303 	ld	b, a
      000D81 2A CD F3         [16] 3304 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D84 D5               [11] 3305 	push	de
      000D85 11 09 00         [10] 3306 	ld	de, #0x0009
      000D88 19               [11] 3307 	add	hl, de
      000D89 C5               [11] 3308 	push	bc
      000D8A 33               [ 6] 3309 	inc	sp
      000D8B E5               [11] 3310 	push	hl
      000D8C CDr00r00         [17] 3311 	call	_WRTVRM
      000D8F F1               [10] 3312 	pop	af
      000D90 33               [ 6] 3313 	inc	sp
      000D91 D1               [10] 3314 	pop	de
                                   3315 ;src\/Graphics.h:251: WRTVRM(MSX_modedata_screen2.sprite_attribute + 10, 	SPRITE_PATTERN_3X_HIT + 4);
      000D92 2A CD F3         [16] 3316 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D95 01 0A 00         [10] 3317 	ld	bc, #0x000a
      000D98 09               [11] 3318 	add	hl, bc
      000D99 D5               [11] 3319 	push	de
      000D9A 3E 08            [ 7] 3320 	ld	a, #0x08
      000D9C F5               [11] 3321 	push	af
      000D9D 33               [ 6] 3322 	inc	sp
      000D9E E5               [11] 3323 	push	hl
      000D9F CDr00r00         [17] 3324 	call	_WRTVRM
      000DA2 F1               [10] 3325 	pop	af
      000DA3 33               [ 6] 3326 	inc	sp
      000DA4 D1               [10] 3327 	pop	de
                                   3328 ;src\/Graphics.h:253: WRTVRM(MSX_modedata_screen2.sprite_attribute + 13, 	x + 24);
      000DA5 DD 7E FF         [19] 3329 	ld	a, -1 (ix)
      000DA8 C6 18            [ 7] 3330 	add	a, #0x18
      000DAA 47               [ 4] 3331 	ld	b, a
      000DAB 2A CD F3         [16] 3332 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DAE D5               [11] 3333 	push	de
      000DAF 11 0D 00         [10] 3334 	ld	de, #0x000d
      000DB2 19               [11] 3335 	add	hl, de
      000DB3 C5               [11] 3336 	push	bc
      000DB4 33               [ 6] 3337 	inc	sp
      000DB5 E5               [11] 3338 	push	hl
      000DB6 CDr00r00         [17] 3339 	call	_WRTVRM
      000DB9 F1               [10] 3340 	pop	af
      000DBA 33               [ 6] 3341 	inc	sp
      000DBB D1               [10] 3342 	pop	de
                                   3343 ;src\/Graphics.h:254: WRTVRM(MSX_modedata_screen2.sprite_attribute + 14, 	SPRITE_PATTERN_3X_HIT + 8);
      000DBC 2A CD F3         [16] 3344 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DBF 01 0E 00         [10] 3345 	ld	bc, #0x000e
      000DC2 09               [11] 3346 	add	hl, bc
      000DC3 D5               [11] 3347 	push	de
      000DC4 3E 0C            [ 7] 3348 	ld	a, #0x0c
      000DC6 F5               [11] 3349 	push	af
      000DC7 33               [ 6] 3350 	inc	sp
      000DC8 E5               [11] 3351 	push	hl
      000DC9 CDr00r00         [17] 3352 	call	_WRTVRM
      000DCC F1               [10] 3353 	pop	af
      000DCD 33               [ 6] 3354 	inc	sp
      000DCE D1               [10] 3355 	pop	de
      000DCF                       3356 00102$:
                                   3357 ;src\/Graphics.h:257: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	y - 1);
      000DCF DD 7E 05         [19] 3358 	ld	a, 5 (ix)
      000DD2 C6 FF            [ 7] 3359 	add	a, #0xff
      000DD4 DD 77 FF         [19] 3360 	ld	-1 (ix), a
      000DD7 2A CD F3         [16] 3361 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DDA 01 04 00         [10] 3362 	ld	bc, #0x0004
      000DDD 09               [11] 3363 	add	hl, bc
      000DDE D5               [11] 3364 	push	de
      000DDF DD 7E FF         [19] 3365 	ld	a, -1 (ix)
      000DE2 F5               [11] 3366 	push	af
      000DE3 33               [ 6] 3367 	inc	sp
      000DE4 E5               [11] 3368 	push	hl
      000DE5 CDr00r00         [17] 3369 	call	_WRTVRM
      000DE8 F1               [10] 3370 	pop	af
      000DE9 33               [ 6] 3371 	inc	sp
      000DEA D1               [10] 3372 	pop	de
                                   3373 ;src\/Graphics.h:258: WRTVRM(MSX_modedata_screen2.sprite_attribute + 7, 	colors[colorIndex]);
      000DEB 7B               [ 4] 3374 	ld	a, e
      000DEC DD 86 FE         [19] 3375 	add	a, -2 (ix)
      000DEF 5F               [ 4] 3376 	ld	e, a
      000DF0 30 01            [12] 3377 	jr	NC, 00110$
      000DF2 14               [ 4] 3378 	inc	d
      000DF3                       3379 00110$:
      000DF3 1A               [ 7] 3380 	ld	a, (de)
      000DF4 47               [ 4] 3381 	ld	b, a
      000DF5 2A CD F3         [16] 3382 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DF8 D5               [11] 3383 	push	de
      000DF9 11 07 00         [10] 3384 	ld	de, #0x0007
      000DFC 19               [11] 3385 	add	hl, de
      000DFD C5               [11] 3386 	push	bc
      000DFE 33               [ 6] 3387 	inc	sp
      000DFF E5               [11] 3388 	push	hl
      000E00 CDr00r00         [17] 3389 	call	_WRTVRM
      000E03 F1               [10] 3390 	pop	af
      000E04 33               [ 6] 3391 	inc	sp
      000E05 D1               [10] 3392 	pop	de
                                   3393 ;src\/Graphics.h:260: WRTVRM(MSX_modedata_screen2.sprite_attribute + 8, 	y - 1);
      000E06 2A CD F3         [16] 3394 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E09 01 08 00         [10] 3395 	ld	bc, #0x0008
      000E0C 09               [11] 3396 	add	hl, bc
      000E0D D5               [11] 3397 	push	de
      000E0E DD 7E FF         [19] 3398 	ld	a, -1 (ix)
      000E11 F5               [11] 3399 	push	af
      000E12 33               [ 6] 3400 	inc	sp
      000E13 E5               [11] 3401 	push	hl
      000E14 CDr00r00         [17] 3402 	call	_WRTVRM
      000E17 F1               [10] 3403 	pop	af
      000E18 33               [ 6] 3404 	inc	sp
      000E19 D1               [10] 3405 	pop	de
                                   3406 ;src\/Graphics.h:261: WRTVRM(MSX_modedata_screen2.sprite_attribute + 11, 	colors[colorIndex]);
      000E1A 1A               [ 7] 3407 	ld	a, (de)
      000E1B 47               [ 4] 3408 	ld	b, a
      000E1C 2A CD F3         [16] 3409 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E1F D5               [11] 3410 	push	de
      000E20 11 0B 00         [10] 3411 	ld	de, #0x000b
      000E23 19               [11] 3412 	add	hl, de
      000E24 C5               [11] 3413 	push	bc
      000E25 33               [ 6] 3414 	inc	sp
      000E26 E5               [11] 3415 	push	hl
      000E27 CDr00r00         [17] 3416 	call	_WRTVRM
      000E2A F1               [10] 3417 	pop	af
      000E2B 33               [ 6] 3418 	inc	sp
      000E2C D1               [10] 3419 	pop	de
                                   3420 ;src\/Graphics.h:263: WRTVRM(MSX_modedata_screen2.sprite_attribute + 12, 	y - 1);
      000E2D 2A CD F3         [16] 3421 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E30 01 0C 00         [10] 3422 	ld	bc, #0x000c
      000E33 09               [11] 3423 	add	hl, bc
      000E34 D5               [11] 3424 	push	de
      000E35 DD 7E FF         [19] 3425 	ld	a, -1 (ix)
      000E38 F5               [11] 3426 	push	af
      000E39 33               [ 6] 3427 	inc	sp
      000E3A E5               [11] 3428 	push	hl
      000E3B CDr00r00         [17] 3429 	call	_WRTVRM
      000E3E F1               [10] 3430 	pop	af
      000E3F 33               [ 6] 3431 	inc	sp
      000E40 D1               [10] 3432 	pop	de
                                   3433 ;src\/Graphics.h:264: WRTVRM(MSX_modedata_screen2.sprite_attribute + 15, 	colors[colorIndex]);
      000E41 1A               [ 7] 3434 	ld	a, (de)
      000E42 47               [ 4] 3435 	ld	b, a
      000E43 2A CD F3         [16] 3436 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E46 11 0F 00         [10] 3437 	ld	de, #0x000f
      000E49 19               [11] 3438 	add	hl, de
      000E4A C5               [11] 3439 	push	bc
      000E4B 33               [ 6] 3440 	inc	sp
      000E4C E5               [11] 3441 	push	hl
      000E4D CDr00r00         [17] 3442 	call	_WRTVRM
                                   3443 ;src\/Graphics.h:265: }
      000E50 DD F9            [10] 3444 	ld	sp,ix
      000E52 DD E1            [14] 3445 	pop	ix
      000E54 C9               [10] 3446 	ret
                                   3447 ;src\/Graphics.h:267: void HideHitSprite() {
                                   3448 ;	---------------------------------
                                   3449 ; Function HideHitSprite
                                   3450 ; ---------------------------------
      000E55                       3451 _HideHitSprite::
                                   3452 ;src\/Graphics.h:268: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	192);
      000E55 2A CD F3         [16] 3453 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E58 01 04 00         [10] 3454 	ld	bc, #0x0004
      000E5B 09               [11] 3455 	add	hl, bc
      000E5C 3E C0            [ 7] 3456 	ld	a, #0xc0
      000E5E F5               [11] 3457 	push	af
      000E5F 33               [ 6] 3458 	inc	sp
      000E60 E5               [11] 3459 	push	hl
      000E61 CDr00r00         [17] 3460 	call	_WRTVRM
      000E64 F1               [10] 3461 	pop	af
      000E65 33               [ 6] 3462 	inc	sp
                                   3463 ;src\/Graphics.h:269: WRTVRM(MSX_modedata_screen2.sprite_attribute + 8, 	192);
      000E66 2A CD F3         [16] 3464 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E69 01 08 00         [10] 3465 	ld	bc, #0x0008
      000E6C 09               [11] 3466 	add	hl, bc
      000E6D 3E C0            [ 7] 3467 	ld	a, #0xc0
      000E6F F5               [11] 3468 	push	af
      000E70 33               [ 6] 3469 	inc	sp
      000E71 E5               [11] 3470 	push	hl
      000E72 CDr00r00         [17] 3471 	call	_WRTVRM
      000E75 F1               [10] 3472 	pop	af
      000E76 33               [ 6] 3473 	inc	sp
                                   3474 ;src\/Graphics.h:270: WRTVRM(MSX_modedata_screen2.sprite_attribute + 12, 	192);
      000E77 2A CD F3         [16] 3475 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E7A 01 0C 00         [10] 3476 	ld	bc, #0x000c
      000E7D 09               [11] 3477 	add	hl, bc
      000E7E 3E C0            [ 7] 3478 	ld	a, #0xc0
      000E80 F5               [11] 3479 	push	af
      000E81 33               [ 6] 3480 	inc	sp
      000E82 E5               [11] 3481 	push	hl
      000E83 CDr00r00         [17] 3482 	call	_WRTVRM
      000E86 F1               [10] 3483 	pop	af
      000E87 33               [ 6] 3484 	inc	sp
                                   3485 ;src\/Graphics.h:271: }
      000E88 C9               [10] 3486 	ret
                                   3487 ;src\/Graphics.h:273: void InitVRAM() {
                                   3488 ;	---------------------------------
                                   3489 ; Function InitVRAM
                                   3490 ; ---------------------------------
      000E89                       3491 _InitVRAM::
                                   3492 ;src\/Graphics.h:278: CLIKSW = 0;	// disable keyboard sound
      000E89 21 00 00         [10] 3493 	ld	hl, #0x0000
      000E8C 22 DB F3         [16] 3494 	ld	(_CLIKSW), hl
                                   3495 ;src\/Graphics.h:279: SCNCNT = 1; 	// set keyboard scan counter
      000E8F 21 F6 F3         [10] 3496 	ld	hl, #_SCNCNT
      000E92 36 01            [10] 3497 	ld	(hl), #0x01
                                   3498 ;src\/Graphics.h:281: FORCLR = COLOR_WHITE;
      000E94 21 E9 F3         [10] 3499 	ld	hl, #_FORCLR
      000E97 36 0F            [10] 3500 	ld	(hl), #0x0f
                                   3501 ;src\/Graphics.h:282: BAKCLR = COLOR_BLACK;
      000E99 21 EA F3         [10] 3502 	ld	hl, #_BAKCLR
      000E9C 36 01            [10] 3503 	ld	(hl), #0x01
                                   3504 ;src\/Graphics.h:283: BDRCLR = COLOR_BLACK;
      000E9E 21 EB F3         [10] 3505 	ld	hl, #_BDRCLR
      000EA1 36 01            [10] 3506 	ld	(hl), #0x01
                                   3507 ;src\/Graphics.h:311: WRTVDP(0b0000000111100010);
      000EA3 21 E2 01         [10] 3508 	ld	hl, #0x01e2
      000EA6 CDr00r00         [17] 3509 	call	_WRTVDP
                                   3510 ;src\/Graphics.h:313: INIGRP();	// Set screen 2
      000EA9 CDr00r00         [17] 3511 	call	_INIGRP
                                   3512 ;src\/Graphics.h:315: DISSCR();	// Disable screen (faster to write)
      000EAC CDr00r00         [17] 3513 	call	_DISSCR
                                   3514 ;src\/Graphics.h:319: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      000EAF AF               [ 4] 3515 	xor	a, a
      000EB0 F5               [11] 3516 	push	af
      000EB1 33               [ 6] 3517 	inc	sp
      000EB2 21 00 40         [10] 3518 	ld	hl, #0x4000
      000EB5 E5               [11] 3519 	push	hl
      000EB6 65               [ 4] 3520 	ld	h, l
      000EB7 E5               [11] 3521 	push	hl
      000EB8 CDr00r00         [17] 3522 	call	_FILVRM
      000EBB F1               [10] 3523 	pop	af
      000EBC F1               [10] 3524 	pop	af
      000EBD 33               [ 6] 3525 	inc	sp
                                   3526 ;src\/Graphics.h:328: LDIRVM(MSX_modedata_screen2.sprite_pattern, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      000EBE 01r48r07         [10] 3527 	ld	bc, #_sprite_arrow_0+0
      000EC1 2A CF F3         [16] 3528 	ld	hl, (#(_MSX_modedata_screen2 + 0x0008) + 0)
      000EC4 11 80 00         [10] 3529 	ld	de, #0x0080
      000EC7 D5               [11] 3530 	push	de
      000EC8 C5               [11] 3531 	push	bc
      000EC9 E5               [11] 3532 	push	hl
      000ECA CDr00r00         [17] 3533 	call	_LDIRVM
      000ECD 21 06 00         [10] 3534 	ld	hl, #6
      000ED0 39               [11] 3535 	add	hl, sp
      000ED1 F9               [ 6] 3536 	ld	sp, hl
                                   3537 ;src\/Graphics.h:334: for(byte i=0; i<32; i++) {
      000ED2 0E 00            [ 7] 3538 	ld	c, #0x00
      000ED4                       3539 00110$:
      000ED4 79               [ 4] 3540 	ld	a, c
      000ED5 D6 20            [ 7] 3541 	sub	a, #0x20
      000ED7 30 1A            [12] 3542 	jr	NC, 00101$
                                   3543 ;src\/Graphics.h:335: WRTVRM(MSX_modedata_screen2.sprite_attribute + (i * 4), 	192);
      000ED9 ED 5B CD F3      [20] 3544 	ld	de, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000EDD 79               [ 4] 3545 	ld	a, c
      000EDE 26 00            [ 7] 3546 	ld	h, #0x00
      000EE0 6F               [ 4] 3547 	ld	l, a
      000EE1 29               [11] 3548 	add	hl, hl
      000EE2 29               [11] 3549 	add	hl, hl
      000EE3 19               [11] 3550 	add	hl, de
      000EE4 C5               [11] 3551 	push	bc
      000EE5 3E C0            [ 7] 3552 	ld	a, #0xc0
      000EE7 F5               [11] 3553 	push	af
      000EE8 33               [ 6] 3554 	inc	sp
      000EE9 E5               [11] 3555 	push	hl
      000EEA CDr00r00         [17] 3556 	call	_WRTVRM
      000EED F1               [10] 3557 	pop	af
      000EEE 33               [ 6] 3558 	inc	sp
      000EEF C1               [10] 3559 	pop	bc
                                   3560 ;src\/Graphics.h:334: for(byte i=0; i<32; i++) {
      000EF0 0C               [ 4] 3561 	inc	c
      000EF1 18 E1            [12] 3562 	jr	00110$
      000EF3                       3563 00101$:
                                   3564 ;src\/Graphics.h:344: LDIRVM(MSX_modedata_screen2.pattern, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EF3 01r18r04         [10] 3565 	ld	bc, #_pattern_black_0
      000EF6 2A CB F3         [16] 3566 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000EF9 11 78 01         [10] 3567 	ld	de, #0x0178
      000EFC D5               [11] 3568 	push	de
      000EFD C5               [11] 3569 	push	bc
      000EFE E5               [11] 3570 	push	hl
      000EFF CDr00r00         [17] 3571 	call	_LDIRVM
      000F02 21 06 00         [10] 3572 	ld	hl, #6
      000F05 39               [11] 3573 	add	hl, sp
      000F06 F9               [ 6] 3574 	ld	sp, hl
                                   3575 ;src\/Graphics.h:347: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F07 01r18r04         [10] 3576 	ld	bc, #_pattern_black_0
      000F0A 2A CB F3         [16] 3577 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F0D 7C               [ 4] 3578 	ld	a, h
      000F0E C6 08            [ 7] 3579 	add	a, #0x08
      000F10 67               [ 4] 3580 	ld	h, a
      000F11 11 78 01         [10] 3581 	ld	de, #0x0178
      000F14 D5               [11] 3582 	push	de
      000F15 C5               [11] 3583 	push	bc
      000F16 E5               [11] 3584 	push	hl
      000F17 CDr00r00         [17] 3585 	call	_LDIRVM
      000F1A 21 06 00         [10] 3586 	ld	hl, #6
      000F1D 39               [11] 3587 	add	hl, sp
      000F1E F9               [ 6] 3588 	ld	sp, hl
                                   3589 ;src\/Graphics.h:350: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F1F 01r18r04         [10] 3590 	ld	bc, #_pattern_black_0
      000F22 2A CB F3         [16] 3591 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F25 7C               [ 4] 3592 	ld	a, h
      000F26 C6 10            [ 7] 3593 	add	a, #0x10
      000F28 67               [ 4] 3594 	ld	h, a
      000F29 11 78 01         [10] 3595 	ld	de, #0x0178
      000F2C D5               [11] 3596 	push	de
      000F2D C5               [11] 3597 	push	bc
      000F2E E5               [11] 3598 	push	hl
      000F2F CDr00r00         [17] 3599 	call	_LDIRVM
      000F32 21 06 00         [10] 3600 	ld	hl, #6
      000F35 39               [11] 3601 	add	hl, sp
      000F36 F9               [ 6] 3602 	ld	sp, hl
                                   3603 ;src\/Graphics.h:353: LDIRVM(MSX_modedata_screen2.pattern + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F37 01r18r01         [10] 3604 	ld	bc, #_FONT
      000F3A 2A CB F3         [16] 3605 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F3D 11 78 01         [10] 3606 	ld	de, #0x0178
      000F40 19               [11] 3607 	add	hl, de
      000F41 11 00 03         [10] 3608 	ld	de, #0x0300
      000F44 D5               [11] 3609 	push	de
      000F45 C5               [11] 3610 	push	bc
      000F46 E5               [11] 3611 	push	hl
      000F47 CDr00r00         [17] 3612 	call	_LDIRVM
      000F4A 21 06 00         [10] 3613 	ld	hl, #6
      000F4D 39               [11] 3614 	add	hl, sp
      000F4E F9               [ 6] 3615 	ld	sp, hl
                                   3616 ;src\/Graphics.h:356: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F4F 01r18r01         [10] 3617 	ld	bc, #_FONT
      000F52 2A CB F3         [16] 3618 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F55 11 78 09         [10] 3619 	ld	de, #0x0978
      000F58 19               [11] 3620 	add	hl, de
      000F59 11 00 03         [10] 3621 	ld	de, #0x0300
      000F5C D5               [11] 3622 	push	de
      000F5D C5               [11] 3623 	push	bc
      000F5E E5               [11] 3624 	push	hl
      000F5F CDr00r00         [17] 3625 	call	_LDIRVM
      000F62 21 06 00         [10] 3626 	ld	hl, #6
      000F65 39               [11] 3627 	add	hl, sp
      000F66 F9               [ 6] 3628 	ld	sp, hl
                                   3629 ;src\/Graphics.h:359: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F67 01r18r01         [10] 3630 	ld	bc, #_FONT
      000F6A 2A CB F3         [16] 3631 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F6D 11 78 11         [10] 3632 	ld	de, #0x1178
      000F70 19               [11] 3633 	add	hl, de
      000F71 11 00 03         [10] 3634 	ld	de, #0x0300
      000F74 D5               [11] 3635 	push	de
      000F75 C5               [11] 3636 	push	bc
      000F76 E5               [11] 3637 	push	hl
      000F77 CDr00r00         [17] 3638 	call	_LDIRVM
      000F7A 21 06 00         [10] 3639 	ld	hl, #6
      000F7D 39               [11] 3640 	add	hl, sp
      000F7E F9               [ 6] 3641 	ld	sp, hl
                                   3642 ;src\/Graphics.h:363: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000F7F 0E 00            [ 7] 3643 	ld	c, #0x00
      000F81                       3644 00113$:
      000F81 79               [ 4] 3645 	ld	a, c
      000F82 D6 07            [ 7] 3646 	sub	a, #0x07
      000F84 30 27            [12] 3647 	jr	NC, 00102$
                                   3648 ;src\/Graphics.h:364: LDIRVM(MSX_modedata_screen2.pattern + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      000F86 ED 5B CB F3      [20] 3649 	ld	de, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F8A 21 70 04         [10] 3650 	ld	hl, #0x0470
      000F8D 19               [11] 3651 	add	hl, de
      000F8E EB               [ 4] 3652 	ex	de, hl
      000F8F 79               [ 4] 3653 	ld	a, c
      000F90 26 00            [ 7] 3654 	ld	h, #0x00
      000F92 6F               [ 4] 3655 	ld	l, a
      000F93 29               [11] 3656 	add	hl, hl
      000F94 29               [11] 3657 	add	hl, hl
      000F95 29               [11] 3658 	add	hl, hl
      000F96 19               [11] 3659 	add	hl, de
      000F97 C5               [11] 3660 	push	bc
      000F98 11 38 00         [10] 3661 	ld	de, #0x0038
      000F9B D5               [11] 3662 	push	de
      000F9C 11r88r05         [10] 3663 	ld	de, #_pattern_title
      000F9F D5               [11] 3664 	push	de
      000FA0 E5               [11] 3665 	push	hl
      000FA1 CDr00r00         [17] 3666 	call	_LDIRVM
      000FA4 21 06 00         [10] 3667 	ld	hl, #6
      000FA7 39               [11] 3668 	add	hl, sp
      000FA8 F9               [ 6] 3669 	ld	sp, hl
      000FA9 C1               [10] 3670 	pop	bc
                                   3671 ;src\/Graphics.h:363: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000FAA 0C               [ 4] 3672 	inc	c
      000FAB 18 D4            [12] 3673 	jr	00113$
      000FAD                       3674 00102$:
                                   3675 ;src\/Graphics.h:374: LDIRVM(MSX_modedata_screen2.color, color_black_0, NUMBER_OF_PATTERNS * 8);
      000FAD 01r90r05         [10] 3676 	ld	bc, #_color_black_0
      000FB0 2A C9 F3         [16] 3677 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FB3 11 78 01         [10] 3678 	ld	de, #0x0178
      000FB6 D5               [11] 3679 	push	de
      000FB7 C5               [11] 3680 	push	bc
      000FB8 E5               [11] 3681 	push	hl
      000FB9 CDr00r00         [17] 3682 	call	_LDIRVM
      000FBC 21 06 00         [10] 3683 	ld	hl, #6
      000FBF 39               [11] 3684 	add	hl, sp
      000FC0 F9               [ 6] 3685 	ld	sp, hl
                                   3686 ;src\/Graphics.h:376: LDIRVM(MSX_modedata_screen2.color + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000FC1 01r90r05         [10] 3687 	ld	bc, #_color_black_0
      000FC4 2A C9 F3         [16] 3688 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FC7 7C               [ 4] 3689 	ld	a, h
      000FC8 C6 08            [ 7] 3690 	add	a, #0x08
      000FCA 67               [ 4] 3691 	ld	h, a
      000FCB 11 78 01         [10] 3692 	ld	de, #0x0178
      000FCE D5               [11] 3693 	push	de
      000FCF C5               [11] 3694 	push	bc
      000FD0 E5               [11] 3695 	push	hl
      000FD1 CDr00r00         [17] 3696 	call	_LDIRVM
      000FD4 21 06 00         [10] 3697 	ld	hl, #6
      000FD7 39               [11] 3698 	add	hl, sp
      000FD8 F9               [ 6] 3699 	ld	sp, hl
                                   3700 ;src\/Graphics.h:378: LDIRVM(MSX_modedata_screen2.color + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000FD9 01r90r05         [10] 3701 	ld	bc, #_color_black_0
      000FDC 2A C9 F3         [16] 3702 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FDF 7C               [ 4] 3703 	ld	a, h
      000FE0 C6 10            [ 7] 3704 	add	a, #0x10
      000FE2 67               [ 4] 3705 	ld	h, a
      000FE3 11 78 01         [10] 3706 	ld	de, #0x0178
      000FE6 D5               [11] 3707 	push	de
      000FE7 C5               [11] 3708 	push	bc
      000FE8 E5               [11] 3709 	push	hl
      000FE9 CDr00r00         [17] 3710 	call	_LDIRVM
      000FEC 21 06 00         [10] 3711 	ld	hl, #6
      000FEF 39               [11] 3712 	add	hl, sp
      000FF0 F9               [ 6] 3713 	ld	sp, hl
                                   3714 ;src\/Graphics.h:385: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FF1 0E 00            [ 7] 3715 	ld	c, #0x00
      000FF3                       3716 00116$:
      000FF3 79               [ 4] 3717 	ld	a, c
      000FF4 D6 60            [ 7] 3718 	sub	a, #0x60
      000FF6 30 27            [12] 3719 	jr	NC, 00103$
                                   3720 ;src\/Graphics.h:386: LDIRVM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FF8 ED 5B C9 F3      [20] 3721 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FFC 21 78 01         [10] 3722 	ld	hl, #0x0178
      000FFF 19               [11] 3723 	add	hl, de
      001000 EB               [ 4] 3724 	ex	de, hl
      001001 79               [ 4] 3725 	ld	a, c
      001002 26 00            [ 7] 3726 	ld	h, #0x00
      001004 6F               [ 4] 3727 	ld	l, a
      001005 29               [11] 3728 	add	hl, hl
      001006 29               [11] 3729 	add	hl, hl
      001007 29               [11] 3730 	add	hl, hl
      001008 19               [11] 3731 	add	hl, de
      001009 C5               [11] 3732 	push	bc
      00100A 11 08 00         [10] 3733 	ld	de, #0x0008
      00100D D5               [11] 3734 	push	de
      00100E 11r08r07         [10] 3735 	ld	de, #_color_font_2
      001011 D5               [11] 3736 	push	de
      001012 E5               [11] 3737 	push	hl
      001013 CDr00r00         [17] 3738 	call	_LDIRVM
      001016 21 06 00         [10] 3739 	ld	hl, #6
      001019 39               [11] 3740 	add	hl, sp
      00101A F9               [ 6] 3741 	ld	sp, hl
      00101B C1               [10] 3742 	pop	bc
                                   3743 ;src\/Graphics.h:385: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00101C 0C               [ 4] 3744 	inc	c
      00101D 18 D4            [12] 3745 	jr	00116$
      00101F                       3746 00103$:
                                   3747 ;src\/Graphics.h:389: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00101F 0E 00            [ 7] 3748 	ld	c, #0x00
      001021                       3749 00119$:
      001021 79               [ 4] 3750 	ld	a, c
      001022 D6 60            [ 7] 3751 	sub	a, #0x60
      001024 30 27            [12] 3752 	jr	NC, 00104$
                                   3753 ;src\/Graphics.h:390: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001026 ED 5B C9 F3      [20] 3754 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      00102A 21 78 09         [10] 3755 	ld	hl, #0x0978
      00102D 19               [11] 3756 	add	hl, de
      00102E EB               [ 4] 3757 	ex	de, hl
      00102F 79               [ 4] 3758 	ld	a, c
      001030 26 00            [ 7] 3759 	ld	h, #0x00
      001032 6F               [ 4] 3760 	ld	l, a
      001033 29               [11] 3761 	add	hl, hl
      001034 29               [11] 3762 	add	hl, hl
      001035 29               [11] 3763 	add	hl, hl
      001036 19               [11] 3764 	add	hl, de
      001037 C5               [11] 3765 	push	bc
      001038 11 08 00         [10] 3766 	ld	de, #0x0008
      00103B D5               [11] 3767 	push	de
      00103C 11r08r07         [10] 3768 	ld	de, #_color_font_2
      00103F D5               [11] 3769 	push	de
      001040 E5               [11] 3770 	push	hl
      001041 CDr00r00         [17] 3771 	call	_LDIRVM
      001044 21 06 00         [10] 3772 	ld	hl, #6
      001047 39               [11] 3773 	add	hl, sp
      001048 F9               [ 6] 3774 	ld	sp, hl
      001049 C1               [10] 3775 	pop	bc
                                   3776 ;src\/Graphics.h:389: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00104A 0C               [ 4] 3777 	inc	c
      00104B 18 D4            [12] 3778 	jr	00119$
      00104D                       3779 00104$:
                                   3780 ;src\/Graphics.h:393: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00104D 0E 00            [ 7] 3781 	ld	c, #0x00
      00104F                       3782 00122$:
      00104F 79               [ 4] 3783 	ld	a, c
      001050 D6 60            [ 7] 3784 	sub	a, #0x60
      001052 30 27            [12] 3785 	jr	NC, 00105$
                                   3786 ;src\/Graphics.h:394: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001054 ED 5B C9 F3      [20] 3787 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001058 21 78 11         [10] 3788 	ld	hl, #0x1178
      00105B 19               [11] 3789 	add	hl, de
      00105C EB               [ 4] 3790 	ex	de, hl
      00105D 79               [ 4] 3791 	ld	a, c
      00105E 26 00            [ 7] 3792 	ld	h, #0x00
      001060 6F               [ 4] 3793 	ld	l, a
      001061 29               [11] 3794 	add	hl, hl
      001062 29               [11] 3795 	add	hl, hl
      001063 29               [11] 3796 	add	hl, hl
      001064 19               [11] 3797 	add	hl, de
      001065 C5               [11] 3798 	push	bc
      001066 11 08 00         [10] 3799 	ld	de, #0x0008
      001069 D5               [11] 3800 	push	de
      00106A 11r08r07         [10] 3801 	ld	de, #_color_font_2
      00106D D5               [11] 3802 	push	de
      00106E E5               [11] 3803 	push	hl
      00106F CDr00r00         [17] 3804 	call	_LDIRVM
      001072 21 06 00         [10] 3805 	ld	hl, #6
      001075 39               [11] 3806 	add	hl, sp
      001076 F9               [ 6] 3807 	ld	sp, hl
      001077 C1               [10] 3808 	pop	bc
                                   3809 ;src\/Graphics.h:393: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001078 0C               [ 4] 3810 	inc	c
      001079 18 D4            [12] 3811 	jr	00122$
      00107B                       3812 00105$:
                                   3813 ;src\/Graphics.h:402: for(byte i = 0; i < 10; i++) {
      00107B 0E 00            [ 7] 3814 	ld	c, #0x00
      00107D                       3815 00125$:
      00107D 79               [ 4] 3816 	ld	a, c
      00107E D6 0A            [ 7] 3817 	sub	a, #0x0a
      001080 30 27            [12] 3818 	jr	NC, 00106$
                                   3819 ;src\/Graphics.h:403: LDIRVM(MSX_modedata_screen2.color + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001082 ED 5B C9 F3      [20] 3820 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001086 21 F8 01         [10] 3821 	ld	hl, #0x01f8
      001089 19               [11] 3822 	add	hl, de
      00108A EB               [ 4] 3823 	ex	de, hl
      00108B 79               [ 4] 3824 	ld	a, c
      00108C 26 00            [ 7] 3825 	ld	h, #0x00
      00108E 6F               [ 4] 3826 	ld	l, a
      00108F 29               [11] 3827 	add	hl, hl
      001090 29               [11] 3828 	add	hl, hl
      001091 29               [11] 3829 	add	hl, hl
      001092 19               [11] 3830 	add	hl, de
      001093 C5               [11] 3831 	push	bc
      001094 11 08 00         [10] 3832 	ld	de, #0x0008
      001097 D5               [11] 3833 	push	de
      001098 11r00r07         [10] 3834 	ld	de, #_color_font_1
      00109B D5               [11] 3835 	push	de
      00109C E5               [11] 3836 	push	hl
      00109D CDr00r00         [17] 3837 	call	_LDIRVM
      0010A0 21 06 00         [10] 3838 	ld	hl, #6
      0010A3 39               [11] 3839 	add	hl, sp
      0010A4 F9               [ 6] 3840 	ld	sp, hl
      0010A5 C1               [10] 3841 	pop	bc
                                   3842 ;src\/Graphics.h:402: for(byte i = 0; i < 10; i++) {
      0010A6 0C               [ 4] 3843 	inc	c
      0010A7 18 D4            [12] 3844 	jr	00125$
      0010A9                       3845 00106$:
                                   3846 ;src\/Graphics.h:406: for(byte i = 0; i < 10; i++) {
      0010A9 0E 00            [ 7] 3847 	ld	c, #0x00
      0010AB                       3848 00128$:
      0010AB 79               [ 4] 3849 	ld	a, c
      0010AC D6 0A            [ 7] 3850 	sub	a, #0x0a
      0010AE 30 27            [12] 3851 	jr	NC, 00107$
                                   3852 ;src\/Graphics.h:407: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0010B0 ED 5B C9 F3      [20] 3853 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      0010B4 21 F8 09         [10] 3854 	ld	hl, #0x09f8
      0010B7 19               [11] 3855 	add	hl, de
      0010B8 EB               [ 4] 3856 	ex	de, hl
      0010B9 79               [ 4] 3857 	ld	a, c
      0010BA 26 00            [ 7] 3858 	ld	h, #0x00
      0010BC 6F               [ 4] 3859 	ld	l, a
      0010BD 29               [11] 3860 	add	hl, hl
      0010BE 29               [11] 3861 	add	hl, hl
      0010BF 29               [11] 3862 	add	hl, hl
      0010C0 19               [11] 3863 	add	hl, de
      0010C1 C5               [11] 3864 	push	bc
      0010C2 11 08 00         [10] 3865 	ld	de, #0x0008
      0010C5 D5               [11] 3866 	push	de
      0010C6 11r00r07         [10] 3867 	ld	de, #_color_font_1
      0010C9 D5               [11] 3868 	push	de
      0010CA E5               [11] 3869 	push	hl
      0010CB CDr00r00         [17] 3870 	call	_LDIRVM
      0010CE 21 06 00         [10] 3871 	ld	hl, #6
      0010D1 39               [11] 3872 	add	hl, sp
      0010D2 F9               [ 6] 3873 	ld	sp, hl
      0010D3 C1               [10] 3874 	pop	bc
                                   3875 ;src\/Graphics.h:406: for(byte i = 0; i < 10; i++) {
      0010D4 0C               [ 4] 3876 	inc	c
      0010D5 18 D4            [12] 3877 	jr	00128$
      0010D7                       3878 00107$:
                                   3879 ;src\/Graphics.h:410: for(byte i = 0; i < 10; i++) {
      0010D7 0E 00            [ 7] 3880 	ld	c, #0x00
      0010D9                       3881 00131$:
      0010D9 79               [ 4] 3882 	ld	a, c
      0010DA D6 0A            [ 7] 3883 	sub	a, #0x0a
      0010DC 30 26            [12] 3884 	jr	NC, 00108$
                                   3885 ;src\/Graphics.h:411: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0010DE ED 5B C9 F3      [20] 3886 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      0010E2 21 F8 11         [10] 3887 	ld	hl, #0x11f8
      0010E5 19               [11] 3888 	add	hl, de
      0010E6 EB               [ 4] 3889 	ex	de, hl
      0010E7 69               [ 4] 3890 	ld	l, c
      0010E8 26 00            [ 7] 3891 	ld	h, #0x00
      0010EA 29               [11] 3892 	add	hl, hl
      0010EB 29               [11] 3893 	add	hl, hl
      0010EC 29               [11] 3894 	add	hl, hl
      0010ED 19               [11] 3895 	add	hl, de
      0010EE C5               [11] 3896 	push	bc
      0010EF 11 08 00         [10] 3897 	ld	de, #0x0008
      0010F2 D5               [11] 3898 	push	de
      0010F3 11r00r07         [10] 3899 	ld	de, #_color_font_1
      0010F6 D5               [11] 3900 	push	de
      0010F7 E5               [11] 3901 	push	hl
      0010F8 CDr00r00         [17] 3902 	call	_LDIRVM
      0010FB 21 06 00         [10] 3903 	ld	hl, #6
      0010FE 39               [11] 3904 	add	hl, sp
      0010FF F9               [ 6] 3905 	ld	sp, hl
      001100 C1               [10] 3906 	pop	bc
                                   3907 ;src\/Graphics.h:410: for(byte i = 0; i < 10; i++) {
      001101 0C               [ 4] 3908 	inc	c
      001102 18 D5            [12] 3909 	jr	00131$
      001104                       3910 00108$:
                                   3911 ;src\/Graphics.h:415: LDIRVM(MSX_modedata_screen2.color + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001104 2A C9 F3         [16] 3912 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001107 01 70 04         [10] 3913 	ld	bc, #0x0470
      00110A 09               [11] 3914 	add	hl, bc
      00110B 11 38 00         [10] 3915 	ld	de, #0x0038
      00110E D5               [11] 3916 	push	de
      00110F 11r10r07         [10] 3917 	ld	de, #_color_title_1
      001112 D5               [11] 3918 	push	de
      001113 E5               [11] 3919 	push	hl
      001114 CDr00r00         [17] 3920 	call	_LDIRVM
      001117 21 06 00         [10] 3921 	ld	hl, #6
      00111A 39               [11] 3922 	add	hl, sp
      00111B F9               [ 6] 3923 	ld	sp, hl
                                   3924 ;src\/Graphics.h:423: ENASCR();	// Enable screen
                                   3925 ;src\/Graphics.h:424: }
      00111C C3r00r00         [10] 3926 	jp	_ENASCR
                                   3927 ;src\/Graphics.h:426: void DrawBlock(byte col, byte line, byte tile) {
                                   3928 ;	---------------------------------
                                   3929 ; Function DrawBlock
                                   3930 ; ---------------------------------
      00111F                       3931 _DrawBlock::
      00111F DD E5            [15] 3932 	push	ix
      001121 DD 21 00 00      [14] 3933 	ld	ix,#0
      001125 DD 39            [15] 3934 	add	ix,sp
                                   3935 ;src\/Graphics.h:428: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001127 ED 4B C7 F3      [20] 3936 	ld	bc, (#_MSX_modedata_screen2 + 0)
      00112B DD 6E 04         [19] 3937 	ld	l, 4 (ix)
      00112E 26 00            [ 7] 3938 	ld	h, #0x00
      001130 29               [11] 3939 	add	hl, hl
      001131 09               [11] 3940 	add	hl, bc
      001132 EB               [ 4] 3941 	ex	de, hl
      001133 DD 6E 05         [19] 3942 	ld	l, 5 (ix)
      001136 26 00            [ 7] 3943 	ld	h, #0x00
      001138 29               [11] 3944 	add	hl, hl
      001139 29               [11] 3945 	add	hl, hl
      00113A 29               [11] 3946 	add	hl, hl
      00113B 29               [11] 3947 	add	hl, hl
      00113C 29               [11] 3948 	add	hl, hl
      00113D 29               [11] 3949 	add	hl, hl
      00113E 19               [11] 3950 	add	hl, de
      00113F EB               [ 4] 3951 	ex	de, hl
      001140 21 0A 00         [10] 3952 	ld	hl, #0x000a
      001143 19               [11] 3953 	add	hl, de
      001144 EB               [ 4] 3954 	ex	de, hl
                                   3955 ;src\/Graphics.h:430: WRTVRM(baseAddr, tile);
      001145 D5               [11] 3956 	push	de
      001146 DD 7E 06         [19] 3957 	ld	a, 6 (ix)
      001149 F5               [11] 3958 	push	af
      00114A 33               [ 6] 3959 	inc	sp
      00114B D5               [11] 3960 	push	de
      00114C CDr00r00         [17] 3961 	call	_WRTVRM
      00114F F1               [10] 3962 	pop	af
      001150 33               [ 6] 3963 	inc	sp
      001151 D1               [10] 3964 	pop	de
                                   3965 ;src\/Graphics.h:431: WRTVRM(baseAddr + 1, tile + 1);
      001152 DD 4E 06         [19] 3966 	ld	c, 6 (ix)
      001155 79               [ 4] 3967 	ld	a, c
      001156 3C               [ 4] 3968 	inc	a
      001157 6B               [ 4] 3969 	ld	l, e
      001158 62               [ 4] 3970 	ld	h, d
      001159 23               [ 6] 3971 	inc	hl
      00115A C5               [11] 3972 	push	bc
      00115B D5               [11] 3973 	push	de
      00115C F5               [11] 3974 	push	af
      00115D 33               [ 6] 3975 	inc	sp
      00115E E5               [11] 3976 	push	hl
      00115F CDr00r00         [17] 3977 	call	_WRTVRM
      001162 F1               [10] 3978 	pop	af
      001163 33               [ 6] 3979 	inc	sp
      001164 D1               [10] 3980 	pop	de
      001165 C1               [10] 3981 	pop	bc
                                   3982 ;src\/Graphics.h:432: WRTVRM(baseAddr + 32, tile + 2);
      001166 41               [ 4] 3983 	ld	b, c
      001167 04               [ 4] 3984 	inc	b
      001168 04               [ 4] 3985 	inc	b
      001169 21 20 00         [10] 3986 	ld	hl, #0x0020
      00116C 19               [11] 3987 	add	hl, de
      00116D C5               [11] 3988 	push	bc
      00116E D5               [11] 3989 	push	de
      00116F C5               [11] 3990 	push	bc
      001170 33               [ 6] 3991 	inc	sp
      001171 E5               [11] 3992 	push	hl
      001172 CDr00r00         [17] 3993 	call	_WRTVRM
      001175 F1               [10] 3994 	pop	af
      001176 33               [ 6] 3995 	inc	sp
      001177 D1               [10] 3996 	pop	de
      001178 C1               [10] 3997 	pop	bc
                                   3998 ;src\/Graphics.h:433: WRTVRM(baseAddr + 33, tile + 3);
      001179 0C               [ 4] 3999 	inc	c
      00117A 0C               [ 4] 4000 	inc	c
      00117B 0C               [ 4] 4001 	inc	c
      00117C 21 21 00         [10] 4002 	ld	hl, #0x0021
      00117F 19               [11] 4003 	add	hl, de
      001180 79               [ 4] 4004 	ld	a, c
      001181 F5               [11] 4005 	push	af
      001182 33               [ 6] 4006 	inc	sp
      001183 E5               [11] 4007 	push	hl
      001184 CDr00r00         [17] 4008 	call	_WRTVRM
      001187 F1               [10] 4009 	pop	af
      001188 33               [ 6] 4010 	inc	sp
                                   4011 ;src\/Graphics.h:434: }
      001189 DD E1            [14] 4012 	pop	ix
      00118B C9               [10] 4013 	ret
                                   4014 ;src\/Graphics.h:436: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   4015 ;	---------------------------------
                                   4016 ; Function DrawBlock_SameTile
                                   4017 ; ---------------------------------
      00118C                       4018 _DrawBlock_SameTile::
      00118C DD E5            [15] 4019 	push	ix
      00118E DD 21 00 00      [14] 4020 	ld	ix,#0
      001192 DD 39            [15] 4021 	add	ix,sp
                                   4022 ;src\/Graphics.h:438: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001194 ED 4B C7 F3      [20] 4023 	ld	bc, (#_MSX_modedata_screen2 + 0)
      001198 DD 6E 04         [19] 4024 	ld	l, 4 (ix)
      00119B 26 00            [ 7] 4025 	ld	h, #0x00
      00119D 29               [11] 4026 	add	hl, hl
      00119E 09               [11] 4027 	add	hl, bc
      00119F EB               [ 4] 4028 	ex	de, hl
      0011A0 DD 6E 05         [19] 4029 	ld	l, 5 (ix)
      0011A3 26 00            [ 7] 4030 	ld	h, #0x00
      0011A5 29               [11] 4031 	add	hl, hl
      0011A6 29               [11] 4032 	add	hl, hl
      0011A7 29               [11] 4033 	add	hl, hl
      0011A8 29               [11] 4034 	add	hl, hl
      0011A9 29               [11] 4035 	add	hl, hl
      0011AA 29               [11] 4036 	add	hl, hl
      0011AB 19               [11] 4037 	add	hl, de
      0011AC 01 0A 00         [10] 4038 	ld	bc, #0x000a
      0011AF 09               [11] 4039 	add	hl, bc
      0011B0 4D               [ 4] 4040 	ld	c, l
      0011B1 44               [ 4] 4041 	ld	b, h
                                   4042 ;src\/Graphics.h:440: WRTVRM(baseAddr, tile);
      0011B2 C5               [11] 4043 	push	bc
      0011B3 DD 7E 06         [19] 4044 	ld	a, 6 (ix)
      0011B6 F5               [11] 4045 	push	af
      0011B7 33               [ 6] 4046 	inc	sp
      0011B8 C5               [11] 4047 	push	bc
      0011B9 CDr00r00         [17] 4048 	call	_WRTVRM
      0011BC F1               [10] 4049 	pop	af
      0011BD 33               [ 6] 4050 	inc	sp
      0011BE C1               [10] 4051 	pop	bc
                                   4052 ;src\/Graphics.h:441: WRTVRM(baseAddr + 1, tile);
      0011BF 59               [ 4] 4053 	ld	e, c
      0011C0 50               [ 4] 4054 	ld	d, b
      0011C1 13               [ 6] 4055 	inc	de
      0011C2 C5               [11] 4056 	push	bc
      0011C3 DD 7E 06         [19] 4057 	ld	a, 6 (ix)
      0011C6 F5               [11] 4058 	push	af
      0011C7 33               [ 6] 4059 	inc	sp
      0011C8 D5               [11] 4060 	push	de
      0011C9 CDr00r00         [17] 4061 	call	_WRTVRM
      0011CC F1               [10] 4062 	pop	af
      0011CD 33               [ 6] 4063 	inc	sp
      0011CE C1               [10] 4064 	pop	bc
                                   4065 ;src\/Graphics.h:442: WRTVRM(baseAddr + 32, tile);
      0011CF 21 20 00         [10] 4066 	ld	hl, #0x0020
      0011D2 09               [11] 4067 	add	hl, bc
      0011D3 C5               [11] 4068 	push	bc
      0011D4 DD 7E 06         [19] 4069 	ld	a, 6 (ix)
      0011D7 F5               [11] 4070 	push	af
      0011D8 33               [ 6] 4071 	inc	sp
      0011D9 E5               [11] 4072 	push	hl
      0011DA CDr00r00         [17] 4073 	call	_WRTVRM
      0011DD F1               [10] 4074 	pop	af
      0011DE 33               [ 6] 4075 	inc	sp
      0011DF C1               [10] 4076 	pop	bc
                                   4077 ;src\/Graphics.h:443: WRTVRM(baseAddr + 33, tile);
      0011E0 21 21 00         [10] 4078 	ld	hl, #0x0021
      0011E3 09               [11] 4079 	add	hl, bc
      0011E4 DD 7E 06         [19] 4080 	ld	a, 6 (ix)
      0011E7 F5               [11] 4081 	push	af
      0011E8 33               [ 6] 4082 	inc	sp
      0011E9 E5               [11] 4083 	push	hl
      0011EA CDr00r00         [17] 4084 	call	_WRTVRM
      0011ED F1               [10] 4085 	pop	af
      0011EE 33               [ 6] 4086 	inc	sp
                                   4087 ;src\/Graphics.h:444: }
      0011EF DD E1            [14] 4088 	pop	ix
      0011F1 C9               [10] 4089 	ret
                                   4090 ;src\/Graphics.h:446: void DrawLine(byte line) {
                                   4091 ;	---------------------------------
                                   4092 ; Function DrawLine
                                   4093 ; ---------------------------------
      0011F2                       4094 _DrawLine::
      0011F2 DD E5            [15] 4095 	push	ix
      0011F4 DD 21 00 00      [14] 4096 	ld	ix,#0
      0011F8 DD 39            [15] 4097 	add	ix,sp
                                   4098 ;src\/Graphics.h:447: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011FA DD 4E 04         [19] 4099 	ld	c, 4 (ix)
      0011FD 06 00            [ 7] 4100 	ld	b, #0x00
      0011FF                       4101 00103$:
      0011FF 78               [ 4] 4102 	ld	a, b
      001200 D6 06            [ 7] 4103 	sub	a, #0x06
      001202 30 23            [12] 4104 	jr	NC, 00105$
                                   4105 ;src\/Graphics.h:448: DrawBlock(col, line, playfield[col][line]);
      001204 58               [ 4] 4106 	ld	e, b
      001205 16 00            [ 7] 4107 	ld	d, #0x00
      001207 6B               [ 4] 4108 	ld	l, e
      001208 62               [ 4] 4109 	ld	h, d
      001209 29               [11] 4110 	add	hl, hl
      00120A 19               [11] 4111 	add	hl, de
      00120B 29               [11] 4112 	add	hl, hl
      00120C 29               [11] 4113 	add	hl, hl
      00120D 11r00r00         [10] 4114 	ld	de, #_playfield
      001210 19               [11] 4115 	add	hl, de
      001211 59               [ 4] 4116 	ld	e, c
      001212 16 00            [ 7] 4117 	ld	d, #0x00
      001214 19               [11] 4118 	add	hl, de
      001215 7E               [ 7] 4119 	ld	a, (hl)
      001216 C5               [11] 4120 	push	bc
      001217 F5               [11] 4121 	push	af
      001218 33               [ 6] 4122 	inc	sp
      001219 79               [ 4] 4123 	ld	a, c
      00121A F5               [11] 4124 	push	af
      00121B 33               [ 6] 4125 	inc	sp
      00121C C5               [11] 4126 	push	bc
      00121D 33               [ 6] 4127 	inc	sp
      00121E CDr1Fr11         [17] 4128 	call	_DrawBlock
      001221 F1               [10] 4129 	pop	af
      001222 33               [ 6] 4130 	inc	sp
      001223 C1               [10] 4131 	pop	bc
                                   4132 ;src\/Graphics.h:447: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001224 04               [ 4] 4133 	inc	b
      001225 18 D8            [12] 4134 	jr	00103$
      001227                       4135 00105$:
                                   4136 ;src\/Graphics.h:450: }
      001227 DD E1            [14] 4137 	pop	ix
      001229 C9               [10] 4138 	ret
                                   4139 ;src\/Graphics.h:452: void DrawPiece(byte line) {
                                   4140 ;	---------------------------------
                                   4141 ; Function DrawPiece
                                   4142 ; ---------------------------------
      00122A                       4143 _DrawPiece::
                                   4144 ;src\/Graphics.h:453: DrawLine(line);
      00122A 21 02 00         [10] 4145 	ld	hl, #2
      00122D 39               [11] 4146 	add	hl, sp
      00122E 7E               [ 7] 4147 	ld	a, (hl)
      00122F F5               [11] 4148 	push	af
      001230 33               [ 6] 4149 	inc	sp
      001231 CDrF2r11         [17] 4150 	call	_DrawLine
      001234 33               [ 6] 4151 	inc	sp
                                   4152 ;src\/Graphics.h:454: DrawLine(line + 1);
      001235 21 02 00         [10] 4153 	ld	hl, #2
      001238 39               [11] 4154 	add	hl, sp
      001239 46               [ 7] 4155 	ld	b, (hl)
      00123A 78               [ 4] 4156 	ld	a, b
      00123B 3C               [ 4] 4157 	inc	a
      00123C C5               [11] 4158 	push	bc
      00123D F5               [11] 4159 	push	af
      00123E 33               [ 6] 4160 	inc	sp
      00123F CDrF2r11         [17] 4161 	call	_DrawLine
      001242 33               [ 6] 4162 	inc	sp
      001243 C1               [10] 4163 	pop	bc
                                   4164 ;src\/Graphics.h:455: DrawLine(line + 2);
      001244 04               [ 4] 4165 	inc	b
      001245 04               [ 4] 4166 	inc	b
      001246 C5               [11] 4167 	push	bc
      001247 33               [ 6] 4168 	inc	sp
      001248 CDrF2r11         [17] 4169 	call	_DrawLine
      00124B 33               [ 6] 4170 	inc	sp
                                   4171 ;src\/Graphics.h:456: }
      00124C C9               [10] 4172 	ret
                                   4173 ;src\/Graphics.h:458: void DrawPlayfield() {
                                   4174 ;	---------------------------------
                                   4175 ; Function DrawPlayfield
                                   4176 ; ---------------------------------
      00124D                       4177 _DrawPlayfield::
                                   4178 ;src\/Graphics.h:459: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00124D 06 00            [ 7] 4179 	ld	b, #0x00
      00124F                       4180 00103$:
      00124F 78               [ 4] 4181 	ld	a, b
      001250 D6 0C            [ 7] 4182 	sub	a, #0x0c
      001252 D0               [11] 4183 	ret	NC
                                   4184 ;src\/Graphics.h:460: DrawLine(line);
      001253 C5               [11] 4185 	push	bc
      001254 C5               [11] 4186 	push	bc
      001255 33               [ 6] 4187 	inc	sp
      001256 CDrF2r11         [17] 4188 	call	_DrawLine
      001259 33               [ 6] 4189 	inc	sp
      00125A C1               [10] 4190 	pop	bc
                                   4191 ;src\/Graphics.h:459: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00125B 04               [ 4] 4192 	inc	b
                                   4193 ;src\/Graphics.h:462: }
      00125C 18 F1            [12] 4194 	jr	00103$
                                   4195 ;src\/Sound.h:1: void SoundFx_2() {
                                   4196 ;	---------------------------------
                                   4197 ; Function SoundFx_2
                                   4198 ; ---------------------------------
      00125E                       4199 _SoundFx_2::
                                   4200 ;src\/Sound.h:2: GICINI();
      00125E CDr00r00         [17] 4201 	call	_GICINI
                                   4202 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001261 21 08 0F         [10] 4203 	ld	hl, #0x0f08
      001264 CDr00r00         [17] 4204 	call	_WRTPSG
                                   4205 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001267 0E 00            [ 7] 4206 	ld	c, #0x00
      001269                       4207 00104$:
      001269 79               [ 4] 4208 	ld	a, c
      00126A D6 FF            [ 7] 4209 	sub	a, #0xff
      00126C 30 11            [12] 4210 	jr	NC, 00101$
                                   4211 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      00126E C5               [11] 4212 	push	bc
      00126F 21 00 5D         [10] 4213 	ld	hl, #0x5d00
      001272 CDr00r00         [17] 4214 	call	_WRTPSG
      001275 21 01 00         [10] 4215 	ld	hl, #0x0001
      001278 CDr00r00         [17] 4216 	call	_WRTPSG
      00127B C1               [10] 4217 	pop	bc
                                   4218 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00127C 0C               [ 4] 4219 	inc	c
      00127D 18 EA            [12] 4220 	jr	00104$
      00127F                       4221 00101$:
                                   4222 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      00127F 0E 00            [ 7] 4223 	ld	c, #0x00
      001281                       4224 00107$:
      001281 79               [ 4] 4225 	ld	a, c
      001282 D6 FF            [ 7] 4226 	sub	a, #0xff
      001284 30 11            [12] 4227 	jr	NC, 00102$
                                   4228 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001286 C5               [11] 4229 	push	bc
      001287 21 00 2D         [10] 4230 	ld	hl, #0x2d00
      00128A CDr00r00         [17] 4231 	call	_WRTPSG
      00128D 21 01 00         [10] 4232 	ld	hl, #0x0001
      001290 CDr00r00         [17] 4233 	call	_WRTPSG
      001293 C1               [10] 4234 	pop	bc
                                   4235 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001294 0C               [ 4] 4236 	inc	c
      001295 18 EA            [12] 4237 	jr	00107$
      001297                       4238 00102$:
                                   4239 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001297 21 08 00         [10] 4240 	ld	hl, #0x0008
                                   4241 ;src\/Sound.h:30: }
      00129A C3r00r00         [10] 4242 	jp	_WRTPSG
                                   4243 ;src\/Sound.h:32: void SoundFx_1() {
                                   4244 ;	---------------------------------
                                   4245 ; Function SoundFx_1
                                   4246 ; ---------------------------------
      00129D                       4247 _SoundFx_1::
                                   4248 ;src\/Sound.h:34: GICINI();
      00129D CDr00r00         [17] 4249 	call	_GICINI
                                   4250 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0012A0 21 06 97         [10] 4251 	ld	hl, #0x9706
      0012A3 CDr00r00         [17] 4252 	call	_WRTPSG
                                   4253 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0012A6 21 07 81         [10] 4254 	ld	hl, #0x8107
      0012A9 CDr00r00         [17] 4255 	call	_WRTPSG
                                   4256 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0012AC 21 08 10         [10] 4257 	ld	hl, #0x1008
      0012AF CDr00r00         [17] 4258 	call	_WRTPSG
                                   4259 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0012B2 21 0C 13         [10] 4260 	ld	hl, #0x130c
      0012B5 CDr00r00         [17] 4261 	call	_WRTPSG
                                   4262 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0012B8 21 0D 01         [10] 4263 	ld	hl, #0x010d
                                   4264 ;src\/Sound.h:49: }
      0012BB C3r00r00         [10] 4265 	jp	_WRTPSG
                                   4266 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4267 ;	---------------------------------
                                   4268 ; Function CheckIfPlayfieldIsValid
                                   4269 ; ---------------------------------
      0012BE                       4270 _CheckIfPlayfieldIsValid::
      0012BE DD E5            [15] 4271 	push	ix
      0012C0 DD 21 00 00      [14] 4272 	ld	ix,#0
      0012C4 DD 39            [15] 4273 	add	ix,sp
      0012C6 F5               [11] 4274 	push	af
      0012C7 F5               [11] 4275 	push	af
      0012C8 3B               [ 6] 4276 	dec	sp
                                   4277 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      0012C9 DD 36 FB 00      [19] 4278 	ld	-5 (ix), #0
                                   4279 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0012CD DD 36 FC 00      [19] 4280 	ld	-4 (ix), #0
      0012D1 DD 36 FE 00      [19] 4281 	ld	-2 (ix), #0
      0012D5                       4282 00119$:
      0012D5 DD 7E FE         [19] 4283 	ld	a, -2 (ix)
      0012D8 D6 0C            [ 7] 4284 	sub	a, #0x0c
      0012DA D2r6Dr13         [10] 4285 	jp	NC, 00121$
                                   4286 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0012DD DD 36 FD 00      [19] 4287 	ld	-3 (ix), #0
      0012E1 DD 36 FF 00      [19] 4288 	ld	-1 (ix), #0
      0012E5                       4289 00116$:
      0012E5 DD 7E FF         [19] 4290 	ld	a, -1 (ix)
      0012E8 D6 06            [ 7] 4291 	sub	a, #0x06
      0012EA 30 75            [12] 4292 	jr	NC, 00120$
                                   4293 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      0012EC 0E 00            [ 7] 4294 	ld	c, #0x00
      0012EE                       4295 00113$:
      0012EE 79               [ 4] 4296 	ld	a, c
      0012EF D6 05            [ 7] 4297 	sub	a, #0x05
      0012F1 30 33            [12] 4298 	jr	NC, 00104$
                                   4299 ;src\/CheckPlayfield.h:7: found = FALSE;
      0012F3 DD 36 FB 00      [19] 4300 	ld	-5 (ix), #0
                                   4301 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      0012F7 DD 5E FF         [19] 4302 	ld	e, -1 (ix)
      0012FA 16 00            [ 7] 4303 	ld	d, #0x00
      0012FC 6B               [ 4] 4304 	ld	l, e
      0012FD 62               [ 4] 4305 	ld	h, d
      0012FE 29               [11] 4306 	add	hl, hl
      0012FF 19               [11] 4307 	add	hl, de
      001300 29               [11] 4308 	add	hl, hl
      001301 29               [11] 4309 	add	hl, hl
      001302 11r48r00         [10] 4310 	ld	de, #_playfieldTemp
      001305 19               [11] 4311 	add	hl, de
      001306 7D               [ 4] 4312 	ld	a, l
      001307 DD 86 FE         [19] 4313 	add	a, -2 (ix)
      00130A 5F               [ 4] 4314 	ld	e, a
      00130B 7C               [ 4] 4315 	ld	a, h
      00130C CE 00            [ 7] 4316 	adc	a, #0x00
      00130E 57               [ 4] 4317 	ld	d, a
      00130F 21r18r00         [10] 4318 	ld	hl, #_pieces
      001312 06 00            [ 7] 4319 	ld	b, #0x00
      001314 09               [11] 4320 	add	hl, bc
      001315 46               [ 7] 4321 	ld	b, (hl)
      001316 1A               [ 7] 4322 	ld	a, (de)
      001317 B8               [ 4] 4323 	cp	a, b
      001318 28 03            [12] 4324 	jr	Z, 00101$
      00131A B7               [ 4] 4325 	or	a, a
      00131B 20 06            [12] 4326 	jr	NZ, 00114$
      00131D                       4327 00101$:
                                   4328 ;src\/CheckPlayfield.h:9: found = TRUE;
      00131D DD 36 FB 01      [19] 4329 	ld	-5 (ix), #0x01
                                   4330 ;src\/CheckPlayfield.h:10: break;
      001321 18 03            [12] 4331 	jr	00104$
      001323                       4332 00114$:
                                   4333 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001323 0C               [ 4] 4334 	inc	c
      001324 18 C8            [12] 4335 	jr	00113$
      001326                       4336 00104$:
                                   4337 ;src\/CheckPlayfield.h:13: if(!found) {
      001326 DD 7E FB         [19] 4338 	ld	a, -5 (ix)
      001329 B7               [ 4] 4339 	or	a, a
      00132A 20 2A            [12] 4340 	jr	NZ, 00117$
                                   4341 ;src\/CheckPlayfield.h:14: d_col = col;
      00132C DD 7E FD         [19] 4342 	ld	a, -3 (ix)
      00132F 32r09r00         [13] 4343 	ld	(#_d_col),a
                                   4344 ;src\/CheckPlayfield.h:15: d_line = line;
      001332 DD 7E FC         [19] 4345 	ld	a, -4 (ix)
      001335 32r0Ar00         [13] 4346 	ld	(#_d_line),a
                                   4347 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      001338 DD 4E FD         [19] 4348 	ld	c, -3 (ix)
      00133B 06 00            [ 7] 4349 	ld	b, #0x00
      00133D 69               [ 4] 4350 	ld	l, c
      00133E 60               [ 4] 4351 	ld	h, b
      00133F 29               [11] 4352 	add	hl, hl
      001340 09               [11] 4353 	add	hl, bc
      001341 29               [11] 4354 	add	hl, hl
      001342 29               [11] 4355 	add	hl, hl
      001343 11r48r00         [10] 4356 	ld	de, #_playfieldTemp
      001346 19               [11] 4357 	add	hl, de
      001347 DD 5E FC         [19] 4358 	ld	e, -4 (ix)
      00134A 16 00            [ 7] 4359 	ld	d, #0x00
      00134C 19               [11] 4360 	add	hl, de
      00134D 7E               [ 7] 4361 	ld	a, (hl)
      00134E 32r0Br00         [13] 4362 	ld	(_d_value+0), a
                                   4363 ;src\/CheckPlayfield.h:18: while(1) { 
      001351                       4364 00106$:
                                   4365 ;src\/CheckPlayfield.h:19: BEEP();
      001351 CDr00r00         [17] 4366 	call	_BEEP
      001354 18 FB            [12] 4367 	jr	00106$
      001356                       4368 00117$:
                                   4369 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001356 DD 34 FF         [23] 4370 	inc	-1 (ix)
      001359 DD 7E FF         [19] 4371 	ld	a, -1 (ix)
      00135C DD 77 FD         [19] 4372 	ld	-3 (ix), a
      00135F 18 84            [12] 4373 	jr	00116$
      001361                       4374 00120$:
                                   4375 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001361 DD 34 FE         [23] 4376 	inc	-2 (ix)
      001364 DD 7E FE         [19] 4377 	ld	a, -2 (ix)
      001367 DD 77 FC         [19] 4378 	ld	-4 (ix), a
      00136A C3rD5r12         [10] 4379 	jp	00119$
      00136D                       4380 00121$:
                                   4381 ;src\/CheckPlayfield.h:25: }
      00136D DD F9            [10] 4382 	ld	sp, ix
      00136F DD E1            [14] 4383 	pop	ix
      001371 C9               [10] 4384 	ret
                                   4385 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4386 ;	---------------------------------
                                   4387 ; Function CheckPlayfield
                                   4388 ; ---------------------------------
      001372                       4389 _CheckPlayfield::
      001372 DD E5            [15] 4390 	push	ix
      001374 DD 21 00 00      [14] 4391 	ld	ix,#0
      001378 DD 39            [15] 4392 	add	ix,sp
      00137A 21 EF FF         [10] 4393 	ld	hl, #-17
      00137D 39               [11] 4394 	add	hl, sp
      00137E F9               [ 6] 4395 	ld	sp, hl
                                   4396 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      00137F DD 36 EF 00      [19] 4397 	ld	-17 (ix), #0
                                   4398 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001383 0E 00            [ 7] 4399 	ld	c, #0x00
      001385                       4400 00193$:
      001385 79               [ 4] 4401 	ld	a, c
      001386 D6 0C            [ 7] 4402 	sub	a, #0x0c
      001388 30 36            [12] 4403 	jr	NC, 00102$
                                   4404 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00138A DD 36 FF 00      [19] 4405 	ld	-1 (ix), #0
      00138E                       4406 00190$:
      00138E DD 7E FF         [19] 4407 	ld	a, -1 (ix)
      001391 D6 06            [ 7] 4408 	sub	a, #0x06
      001393 30 28            [12] 4409 	jr	NC, 00194$
                                   4410 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      001395 DD 5E FF         [19] 4411 	ld	e, -1 (ix)
      001398 16 00            [ 7] 4412 	ld	d, #0x00
      00139A 6B               [ 4] 4413 	ld	l, e
      00139B 62               [ 4] 4414 	ld	h, d
      00139C 29               [11] 4415 	add	hl, hl
      00139D 19               [11] 4416 	add	hl, de
      00139E 29               [11] 4417 	add	hl, hl
      00139F 29               [11] 4418 	add	hl, hl
      0013A0 EB               [ 4] 4419 	ex	de, hl
      0013A1 21r48r00         [10] 4420 	ld	hl, #_playfieldTemp
      0013A4 19               [11] 4421 	add	hl, de
      0013A5 06 00            [ 7] 4422 	ld	b, #0x00
      0013A7 09               [11] 4423 	add	hl, bc
      0013A8 3Er00            [ 7] 4424 	ld	a, #<(_playfield)
      0013AA 83               [ 4] 4425 	add	a, e
      0013AB 5F               [ 4] 4426 	ld	e, a
      0013AC 3Es00            [ 7] 4427 	ld	a, #>(_playfield)
      0013AE 8A               [ 4] 4428 	adc	a, d
      0013AF 57               [ 4] 4429 	ld	d, a
      0013B0 7B               [ 4] 4430 	ld	a, e
      0013B1 81               [ 4] 4431 	add	a, c
      0013B2 5F               [ 4] 4432 	ld	e, a
      0013B3 30 01            [12] 4433 	jr	NC, 00607$
      0013B5 14               [ 4] 4434 	inc	d
      0013B6                       4435 00607$:
      0013B6 1A               [ 7] 4436 	ld	a, (de)
      0013B7 77               [ 7] 4437 	ld	(hl), a
                                   4438 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0013B8 DD 34 FF         [23] 4439 	inc	-1 (ix)
      0013BB 18 D1            [12] 4440 	jr	00190$
      0013BD                       4441 00194$:
                                   4442 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0013BD 0C               [ 4] 4443 	inc	c
      0013BE 18 C5            [12] 4444 	jr	00193$
      0013C0                       4445 00102$:
                                   4446 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0013C0 DD 36 FE 00      [19] 4447 	ld	-2 (ix), #0
      0013C4                       4448 00199$:
      0013C4 DD 7E FE         [19] 4449 	ld	a, -2 (ix)
      0013C7 D6 0C            [ 7] 4450 	sub	a, #0x0c
      0013C9 D2rC8r14         [10] 4451 	jp	NC, 00108$
                                   4452 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0013CC DD 36 FF 02      [19] 4453 	ld	-1 (ix), #0x02
      0013D0                       4454 00196$:
      0013D0 DD 7E FF         [19] 4455 	ld	a, -1 (ix)
      0013D3 D6 06            [ 7] 4456 	sub	a, #0x06
      0013D5 D2rC2r14         [10] 4457 	jp	NC, 00200$
                                   4458 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      0013D8 DD 4E FF         [19] 4459 	ld	c, -1 (ix)
      0013DB 06 00            [ 7] 4460 	ld	b, #0x00
      0013DD 69               [ 4] 4461 	ld	l, c
      0013DE 60               [ 4] 4462 	ld	h, b
      0013DF 29               [11] 4463 	add	hl, hl
      0013E0 09               [11] 4464 	add	hl, bc
      0013E1 29               [11] 4465 	add	hl, hl
      0013E2 29               [11] 4466 	add	hl, hl
      0013E3 DD 75 F5         [19] 4467 	ld	-11 (ix), l
      0013E6 DD 74 F6         [19] 4468 	ld	-10 (ix), h
      0013E9 3Er48            [ 7] 4469 	ld	a, #<(_playfieldTemp)
      0013EB DD 86 F5         [19] 4470 	add	a, -11 (ix)
      0013EE 4F               [ 4] 4471 	ld	c, a
      0013EF 3Es00            [ 7] 4472 	ld	a, #>(_playfieldTemp)
      0013F1 DD 8E F6         [19] 4473 	adc	a, -10 (ix)
      0013F4 47               [ 4] 4474 	ld	b, a
      0013F5 79               [ 4] 4475 	ld	a, c
      0013F6 DD 86 FE         [19] 4476 	add	a, -2 (ix)
      0013F9 DD 77 F7         [19] 4477 	ld	-9 (ix), a
      0013FC 78               [ 4] 4478 	ld	a, b
      0013FD CE 00            [ 7] 4479 	adc	a, #0x00
      0013FF DD 77 F8         [19] 4480 	ld	-8 (ix), a
      001402 DD 6E F7         [19] 4481 	ld	l, -9 (ix)
      001405 DD 66 F8         [19] 4482 	ld	h, -8 (ix)
      001408 7E               [ 7] 4483 	ld	a, (hl)
      001409 DD 77 F9         [19] 4484 	ld	-7 (ix), a
      00140C B7               [ 4] 4485 	or	a, a
      00140D CArBCr14         [10] 4486 	jp	Z, 00197$
                                   4487 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001410 DD 7E FF         [19] 4488 	ld	a, -1 (ix)
      001413 DD 77 FD         [19] 4489 	ld	-3 (ix), a
      001416 4F               [ 4] 4490 	ld	c, a
      001417 0D               [ 4] 4491 	dec	c
      001418 0D               [ 4] 4492 	dec	c
      001419 79               [ 4] 4493 	ld	a, c
      00141A 07               [ 4] 4494 	rlca
      00141B 9F               [ 4] 4495 	sbc	a, a
      00141C 47               [ 4] 4496 	ld	b, a
      00141D 69               [ 4] 4497 	ld	l, c
      00141E 60               [ 4] 4498 	ld	h, b
      00141F 29               [11] 4499 	add	hl, hl
      001420 09               [11] 4500 	add	hl, bc
      001421 29               [11] 4501 	add	hl, hl
      001422 29               [11] 4502 	add	hl, hl
      001423 EB               [ 4] 4503 	ex	de, hl
      001424 21r48r00         [10] 4504 	ld	hl, #_playfieldTemp
      001427 19               [11] 4505 	add	hl, de
      001428 7D               [ 4] 4506 	ld	a, l
      001429 DD 86 FE         [19] 4507 	add	a, -2 (ix)
      00142C DD 77 FA         [19] 4508 	ld	-6 (ix), a
      00142F 7C               [ 4] 4509 	ld	a, h
      001430 CE 00            [ 7] 4510 	adc	a, #0x00
      001432 DD 77 FB         [19] 4511 	ld	-5 (ix), a
      001435 DD 4E FD         [19] 4512 	ld	c, -3 (ix)
      001438 0D               [ 4] 4513 	dec	c
      001439 79               [ 4] 4514 	ld	a, c
      00143A 07               [ 4] 4515 	rlca
      00143B 9F               [ 4] 4516 	sbc	a, a
      00143C 47               [ 4] 4517 	ld	b, a
      00143D 69               [ 4] 4518 	ld	l, c
      00143E 60               [ 4] 4519 	ld	h, b
      00143F 29               [11] 4520 	add	hl, hl
      001440 09               [11] 4521 	add	hl, bc
      001441 29               [11] 4522 	add	hl, hl
      001442 29               [11] 4523 	add	hl, hl
      001443 DD 75 FC         [19] 4524 	ld	-4 (ix), l
      001446 DD 74 FD         [19] 4525 	ld	-3 (ix), h
      001449 3Er48            [ 7] 4526 	ld	a, #<(_playfieldTemp)
      00144B DD 86 FC         [19] 4527 	add	a, -4 (ix)
      00144E 4F               [ 4] 4528 	ld	c, a
      00144F 3Es00            [ 7] 4529 	ld	a, #>(_playfieldTemp)
      001451 DD 8E FD         [19] 4530 	adc	a, -3 (ix)
      001454 47               [ 4] 4531 	ld	b, a
      001455 79               [ 4] 4532 	ld	a, c
      001456 DD 86 FE         [19] 4533 	add	a, -2 (ix)
      001459 4F               [ 4] 4534 	ld	c, a
      00145A 30 01            [12] 4535 	jr	NC, 00608$
      00145C 04               [ 4] 4536 	inc	b
      00145D                       4537 00608$:
      00145D DD 6E FA         [19] 4538 	ld	l, -6 (ix)
      001460 DD 66 FB         [19] 4539 	ld	h, -5 (ix)
      001463 6E               [ 7] 4540 	ld	l, (hl)
      001464 0A               [ 7] 4541 	ld	a, (bc)
      001465 67               [ 4] 4542 	ld	h, a
      001466 7D               [ 4] 4543 	ld	a, l
      001467 94               [ 4] 4544 	sub	a, h
      001468 20 52            [12] 4545 	jr	NZ, 00197$
                                   4546 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00146A DD 7E F9         [19] 4547 	ld	a, -7 (ix)
      00146D 94               [ 4] 4548 	sub	a, h
      00146E 20 4C            [12] 4549 	jr	NZ, 00197$
                                   4550 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      001470 DD 36 EF 01      [19] 4551 	ld	-17 (ix), #0x01
                                   4552 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001474 3Er00            [ 7] 4553 	ld	a, #<(_playfield)
      001476 83               [ 4] 4554 	add	a, e
      001477 5F               [ 4] 4555 	ld	e, a
      001478 3Es00            [ 7] 4556 	ld	a, #>(_playfield)
      00147A 8A               [ 4] 4557 	adc	a, d
      00147B 57               [ 4] 4558 	ld	d, a
      00147C 7B               [ 4] 4559 	ld	a, e
      00147D DD 86 FE         [19] 4560 	add	a, -2 (ix)
      001480 5F               [ 4] 4561 	ld	e, a
      001481 30 01            [12] 4562 	jr	NC, 00613$
      001483 14               [ 4] 4563 	inc	d
      001484                       4564 00613$:
      001484 7D               [ 4] 4565 	ld	a, l
      001485 CB FF            [ 8] 4566 	set	7, a
      001487 12               [ 7] 4567 	ld	(de), a
                                   4568 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001488 3Er00            [ 7] 4569 	ld	a, #<(_playfield)
      00148A DD 86 FC         [19] 4570 	add	a, -4 (ix)
      00148D 5F               [ 4] 4571 	ld	e, a
      00148E 3Es00            [ 7] 4572 	ld	a, #>(_playfield)
      001490 DD 8E FD         [19] 4573 	adc	a, -3 (ix)
      001493 57               [ 4] 4574 	ld	d, a
      001494 DD 6E FE         [19] 4575 	ld	l, -2 (ix)
      001497 26 00            [ 7] 4576 	ld	h, #0x00
      001499 19               [11] 4577 	add	hl, de
      00149A 0A               [ 7] 4578 	ld	a, (bc)
      00149B CB FF            [ 8] 4579 	set	7, a
      00149D 77               [ 7] 4580 	ld	(hl), a
                                   4581 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00149E 3Er00            [ 7] 4582 	ld	a, #<(_playfield)
      0014A0 DD 86 F5         [19] 4583 	add	a, -11 (ix)
      0014A3 4F               [ 4] 4584 	ld	c, a
      0014A4 3Es00            [ 7] 4585 	ld	a, #>(_playfield)
      0014A6 DD 8E F6         [19] 4586 	adc	a, -10 (ix)
      0014A9 47               [ 4] 4587 	ld	b, a
      0014AA 79               [ 4] 4588 	ld	a, c
      0014AB DD 86 FE         [19] 4589 	add	a, -2 (ix)
      0014AE 4F               [ 4] 4590 	ld	c, a
      0014AF 30 01            [12] 4591 	jr	NC, 00614$
      0014B1 04               [ 4] 4592 	inc	b
      0014B2                       4593 00614$:
      0014B2 DD 6E F7         [19] 4594 	ld	l, -9 (ix)
      0014B5 DD 66 F8         [19] 4595 	ld	h, -8 (ix)
      0014B8 7E               [ 7] 4596 	ld	a, (hl)
      0014B9 CB FF            [ 8] 4597 	set	7, a
      0014BB 02               [ 7] 4598 	ld	(bc), a
      0014BC                       4599 00197$:
                                   4600 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0014BC DD 34 FF         [23] 4601 	inc	-1 (ix)
      0014BF C3rD0r13         [10] 4602 	jp	00196$
      0014C2                       4603 00200$:
                                   4604 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0014C2 DD 34 FE         [23] 4605 	inc	-2 (ix)
      0014C5 C3rC4r13         [10] 4606 	jp	00199$
      0014C8                       4607 00108$:
                                   4608 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0014C8 0E 02            [ 7] 4609 	ld	c, #0x02
      0014CA                       4610 00205$:
      0014CA 79               [ 4] 4611 	ld	a, c
      0014CB D6 0C            [ 7] 4612 	sub	a, #0x0c
      0014CD D2r8Fr15         [10] 4613 	jp	NC, 00114$
                                   4614 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0014D0 DD 36 FF 00      [19] 4615 	ld	-1 (ix), #0
      0014D4                       4616 00202$:
      0014D4 DD 7E FF         [19] 4617 	ld	a, -1 (ix)
      0014D7 D6 06            [ 7] 4618 	sub	a, #0x06
      0014D9 D2r8Br15         [10] 4619 	jp	NC, 00206$
                                   4620 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      0014DC DD 5E FF         [19] 4621 	ld	e, -1 (ix)
      0014DF 16 00            [ 7] 4622 	ld	d, #0x00
      0014E1 6B               [ 4] 4623 	ld	l, e
      0014E2 62               [ 4] 4624 	ld	h, d
      0014E3 29               [11] 4625 	add	hl, hl
      0014E4 19               [11] 4626 	add	hl, de
      0014E5 29               [11] 4627 	add	hl, hl
      0014E6 29               [11] 4628 	add	hl, hl
      0014E7 DD 75 F7         [19] 4629 	ld	-9 (ix), l
      0014EA DD 74 F8         [19] 4630 	ld	-8 (ix), h
      0014ED 3Er48            [ 7] 4631 	ld	a, #<(_playfieldTemp)
      0014EF DD 86 F7         [19] 4632 	add	a, -9 (ix)
      0014F2 5F               [ 4] 4633 	ld	e, a
      0014F3 3Es00            [ 7] 4634 	ld	a, #>(_playfieldTemp)
      0014F5 DD 8E F8         [19] 4635 	adc	a, -8 (ix)
      0014F8 57               [ 4] 4636 	ld	d, a
      0014F9 7B               [ 4] 4637 	ld	a, e
      0014FA 81               [ 4] 4638 	add	a, c
      0014FB DD 77 F9         [19] 4639 	ld	-7 (ix), a
      0014FE 7A               [ 4] 4640 	ld	a, d
      0014FF CE 00            [ 7] 4641 	adc	a, #0x00
      001501 DD 77 FA         [19] 4642 	ld	-6 (ix), a
      001504 DD 6E F9         [19] 4643 	ld	l, -7 (ix)
      001507 DD 66 FA         [19] 4644 	ld	h, -6 (ix)
      00150A 7E               [ 7] 4645 	ld	a, (hl)
      00150B DD 77 FE         [19] 4646 	ld	-2 (ix), a
      00150E B7               [ 4] 4647 	or	a, a
      00150F 28 74            [12] 4648 	jr	Z, 00203$
                                   4649 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001511 DD 71 FD         [19] 4650 	ld	-3 (ix), c
      001514 79               [ 4] 4651 	ld	a, c
      001515 C6 FE            [ 7] 4652 	add	a, #0xfe
      001517 DD 77 FB         [19] 4653 	ld	-5 (ix), a
      00151A 6F               [ 4] 4654 	ld	l, a
      00151B 26 00            [ 7] 4655 	ld	h, #0x00
      00151D 19               [11] 4656 	add	hl, de
      00151E DD 46 FD         [19] 4657 	ld	b, -3 (ix)
      001521 05               [ 4] 4658 	dec	b
      001522 7B               [ 4] 4659 	ld	a, e
      001523 80               [ 4] 4660 	add	a, b
      001524 5F               [ 4] 4661 	ld	e, a
      001525 30 01            [12] 4662 	jr	NC, 00615$
      001527 14               [ 4] 4663 	inc	d
      001528                       4664 00615$:
      001528 7E               [ 7] 4665 	ld	a, (hl)
      001529 DD 77 FC         [19] 4666 	ld	-4 (ix), a
      00152C 1A               [ 7] 4667 	ld	a, (de)
      00152D 6F               [ 4] 4668 	ld	l, a
      00152E DD 7E FC         [19] 4669 	ld	a, -4 (ix)
      001531 95               [ 4] 4670 	sub	a, l
      001532 20 51            [12] 4671 	jr	NZ, 00203$
                                   4672 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001534 DD 7E FE         [19] 4673 	ld	a, -2 (ix)
      001537 95               [ 4] 4674 	sub	a, l
      001538 20 4B            [12] 4675 	jr	NZ, 00203$
                                   4676 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      00153A DD 36 EF 01      [19] 4677 	ld	-17 (ix), #0x01
                                   4678 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00153E 3Er00            [ 7] 4679 	ld	a, #<(_playfield)
      001540 DD 86 F7         [19] 4680 	add	a, -9 (ix)
      001543 DD 77 FD         [19] 4681 	ld	-3 (ix), a
      001546 3Es00            [ 7] 4682 	ld	a, #>(_playfield)
      001548 DD 8E F8         [19] 4683 	adc	a, -8 (ix)
      00154B DD 77 FE         [19] 4684 	ld	-2 (ix), a
      00154E DD 7E FD         [19] 4685 	ld	a, -3 (ix)
      001551 DD 86 FB         [19] 4686 	add	a, -5 (ix)
      001554 6F               [ 4] 4687 	ld	l, a
      001555 DD 7E FE         [19] 4688 	ld	a, -2 (ix)
      001558 CE 00            [ 7] 4689 	adc	a, #0x00
      00155A 67               [ 4] 4690 	ld	h, a
      00155B DD 7E FC         [19] 4691 	ld	a, -4 (ix)
      00155E CB FF            [ 8] 4692 	set	7, a
      001560 77               [ 7] 4693 	ld	(hl), a
                                   4694 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001561 DD 7E FD         [19] 4695 	ld	a, -3 (ix)
      001564 80               [ 4] 4696 	add	a, b
      001565 6F               [ 4] 4697 	ld	l, a
      001566 DD 7E FE         [19] 4698 	ld	a, -2 (ix)
      001569 CE 00            [ 7] 4699 	adc	a, #0x00
      00156B 67               [ 4] 4700 	ld	h, a
      00156C 1A               [ 7] 4701 	ld	a, (de)
      00156D CB FF            [ 8] 4702 	set	7, a
      00156F 77               [ 7] 4703 	ld	(hl), a
                                   4704 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001570 DD 7E FD         [19] 4705 	ld	a, -3 (ix)
      001573 81               [ 4] 4706 	add	a, c
      001574 5F               [ 4] 4707 	ld	e, a
      001575 DD 7E FE         [19] 4708 	ld	a, -2 (ix)
      001578 CE 00            [ 7] 4709 	adc	a, #0x00
      00157A 57               [ 4] 4710 	ld	d, a
      00157B DD 6E F9         [19] 4711 	ld	l, -7 (ix)
      00157E DD 66 FA         [19] 4712 	ld	h, -6 (ix)
      001581 7E               [ 7] 4713 	ld	a, (hl)
      001582 CB FF            [ 8] 4714 	set	7, a
      001584 12               [ 7] 4715 	ld	(de), a
      001585                       4716 00203$:
                                   4717 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001585 DD 34 FF         [23] 4718 	inc	-1 (ix)
      001588 C3rD4r14         [10] 4719 	jp	00202$
      00158B                       4720 00206$:
                                   4721 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00158B 0C               [ 4] 4722 	inc	c
      00158C C3rCAr14         [10] 4723 	jp	00205$
      00158F                       4724 00114$:
                                   4725 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00158F DD 36 FE 02      [19] 4726 	ld	-2 (ix), #0x02
      001593                       4727 00211$:
      001593 DD 7E FE         [19] 4728 	ld	a, -2 (ix)
      001596 D6 0C            [ 7] 4729 	sub	a, #0x0c
      001598 D2r36r17         [10] 4730 	jp	NC, 00124$
                                   4731 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00159B DD 36 FF 02      [19] 4732 	ld	-1 (ix), #0x02
      00159F                       4733 00208$:
      00159F DD 7E FF         [19] 4734 	ld	a, -1 (ix)
      0015A2 D6 06            [ 7] 4735 	sub	a, #0x06
      0015A4 D2r30r17         [10] 4736 	jp	NC, 00212$
                                   4737 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0015A7 DD 4E FF         [19] 4738 	ld	c, -1 (ix)
      0015AA 06 00            [ 7] 4739 	ld	b, #0x00
      0015AC 69               [ 4] 4740 	ld	l, c
      0015AD 60               [ 4] 4741 	ld	h, b
      0015AE 29               [11] 4742 	add	hl, hl
      0015AF 09               [11] 4743 	add	hl, bc
      0015B0 29               [11] 4744 	add	hl, hl
      0015B1 29               [11] 4745 	add	hl, hl
      0015B2 DD 75 F0         [19] 4746 	ld	-16 (ix), l
      0015B5 DD 74 F1         [19] 4747 	ld	-15 (ix), h
      0015B8 3Er48            [ 7] 4748 	ld	a, #<(_playfieldTemp)
      0015BA DD 86 F0         [19] 4749 	add	a, -16 (ix)
      0015BD 4F               [ 4] 4750 	ld	c, a
      0015BE 3Es00            [ 7] 4751 	ld	a, #>(_playfieldTemp)
      0015C0 DD 8E F1         [19] 4752 	adc	a, -15 (ix)
      0015C3 47               [ 4] 4753 	ld	b, a
      0015C4 79               [ 4] 4754 	ld	a, c
      0015C5 DD 86 FE         [19] 4755 	add	a, -2 (ix)
      0015C8 DD 77 F2         [19] 4756 	ld	-14 (ix), a
      0015CB 78               [ 4] 4757 	ld	a, b
      0015CC CE 00            [ 7] 4758 	adc	a, #0x00
      0015CE DD 77 F3         [19] 4759 	ld	-13 (ix), a
      0015D1 DD 6E F2         [19] 4760 	ld	l, -14 (ix)
      0015D4 DD 66 F3         [19] 4761 	ld	h, -13 (ix)
      0015D7 5E               [ 7] 4762 	ld	e, (hl)
                                   4763 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0015D8 DD 56 FF         [19] 4764 	ld	d, -1 (ix)
      0015DB DD 66 FE         [19] 4765 	ld	h, -2 (ix)
      0015DE 6A               [ 4] 4766 	ld	l, d
      0015DF 2D               [ 4] 4767 	dec	l
      0015E0 2D               [ 4] 4768 	dec	l
      0015E1 7C               [ 4] 4769 	ld	a, h
      0015E2 C6 FE            [ 7] 4770 	add	a, #0xfe
      0015E4 DD 77 F4         [19] 4771 	ld	-12 (ix), a
      0015E7 15               [ 4] 4772 	dec	d
      0015E8 7C               [ 4] 4773 	ld	a, h
      0015E9 C6 FF            [ 7] 4774 	add	a, #0xff
      0015EB DD 77 F5         [19] 4775 	ld	-11 (ix), a
      0015EE D5               [11] 4776 	push	de
      0015EF 5D               [ 4] 4777 	ld	e, l
      0015F0 7B               [ 4] 4778 	ld	a, e
      0015F1 07               [ 4] 4779 	rlca
      0015F2 9F               [ 4] 4780 	sbc	a, a
      0015F3 57               [ 4] 4781 	ld	d, a
      0015F4 6B               [ 4] 4782 	ld	l, e
      0015F5 62               [ 4] 4783 	ld	h, d
      0015F6 29               [11] 4784 	add	hl, hl
      0015F7 19               [11] 4785 	add	hl, de
      0015F8 29               [11] 4786 	add	hl, hl
      0015F9 29               [11] 4787 	add	hl, hl
      0015FA D1               [10] 4788 	pop	de
      0015FB DD 75 F6         [19] 4789 	ld	-10 (ix), l
      0015FE DD 74 F7         [19] 4790 	ld	-9 (ix), h
      001601 D5               [11] 4791 	push	de
      001602 5A               [ 4] 4792 	ld	e, d
      001603 7B               [ 4] 4793 	ld	a, e
      001604 07               [ 4] 4794 	rlca
      001605 9F               [ 4] 4795 	sbc	a, a
      001606 57               [ 4] 4796 	ld	d, a
      001607 6B               [ 4] 4797 	ld	l, e
      001608 62               [ 4] 4798 	ld	h, d
      001609 29               [11] 4799 	add	hl, hl
      00160A 19               [11] 4800 	add	hl, de
      00160B 29               [11] 4801 	add	hl, hl
      00160C 29               [11] 4802 	add	hl, hl
      00160D D1               [10] 4803 	pop	de
      00160E DD 75 F8         [19] 4804 	ld	-8 (ix), l
      001611 DD 74 F9         [19] 4805 	ld	-7 (ix), h
      001614 3Er48            [ 7] 4806 	ld	a, #<(_playfieldTemp)
      001616 DD 86 F6         [19] 4807 	add	a, -10 (ix)
      001619 DD 77 FA         [19] 4808 	ld	-6 (ix), a
      00161C 3Es00            [ 7] 4809 	ld	a, #>(_playfieldTemp)
      00161E DD 8E F7         [19] 4810 	adc	a, -9 (ix)
      001621 DD 77 FB         [19] 4811 	ld	-5 (ix), a
      001624 3Er48            [ 7] 4812 	ld	a, #<(_playfieldTemp)
      001626 DD 86 F8         [19] 4813 	add	a, -8 (ix)
      001629 57               [ 4] 4814 	ld	d, a
      00162A 3Es00            [ 7] 4815 	ld	a, #>(_playfieldTemp)
      00162C DD 8E F9         [19] 4816 	adc	a, -7 (ix)
      00162F 6F               [ 4] 4817 	ld	l, a
      001630 7A               [ 4] 4818 	ld	a, d
      001631 DD 86 F5         [19] 4819 	add	a, -11 (ix)
      001634 DD 77 FC         [19] 4820 	ld	-4 (ix), a
      001637 7D               [ 4] 4821 	ld	a, l
      001638 CE 00            [ 7] 4822 	adc	a, #0x00
      00163A DD 77 FD         [19] 4823 	ld	-3 (ix), a
                                   4824 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      00163D 7B               [ 4] 4825 	ld	a, e
      00163E B7               [ 4] 4826 	or	a, a
      00163F 28 74            [12] 4827 	jr	Z, 00116$
                                   4828 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001641 DD 7E FA         [19] 4829 	ld	a, -6 (ix)
      001644 DD 86 F4         [19] 4830 	add	a, -12 (ix)
      001647 6F               [ 4] 4831 	ld	l, a
      001648 DD 7E FB         [19] 4832 	ld	a, -5 (ix)
      00164B CE 00            [ 7] 4833 	adc	a, #0x00
      00164D 67               [ 4] 4834 	ld	h, a
      00164E 56               [ 7] 4835 	ld	d, (hl)
      00164F DD 6E FC         [19] 4836 	ld	l, -4 (ix)
      001652 DD 66 FD         [19] 4837 	ld	h, -3 (ix)
      001655 6E               [ 7] 4838 	ld	l, (hl)
      001656 7A               [ 4] 4839 	ld	a, d
      001657 95               [ 4] 4840 	sub	a, l
      001658 20 5B            [12] 4841 	jr	NZ, 00116$
                                   4842 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      00165A 7B               [ 4] 4843 	ld	a, e
      00165B 95               [ 4] 4844 	sub	a, l
      00165C 20 57            [12] 4845 	jr	NZ, 00116$
                                   4846 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      00165E DD 36 EF 01      [19] 4847 	ld	-17 (ix), #0x01
                                   4848 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001662 3Er00            [ 7] 4849 	ld	a, #<(_playfield)
      001664 DD 86 F6         [19] 4850 	add	a, -10 (ix)
      001667 5F               [ 4] 4851 	ld	e, a
      001668 3Es00            [ 7] 4852 	ld	a, #>(_playfield)
      00166A DD 8E F7         [19] 4853 	adc	a, -9 (ix)
      00166D 67               [ 4] 4854 	ld	h, a
      00166E 7B               [ 4] 4855 	ld	a, e
      00166F DD 86 F4         [19] 4856 	add	a, -12 (ix)
      001672 6F               [ 4] 4857 	ld	l, a
      001673 30 01            [12] 4858 	jr	NC, 00624$
      001675 24               [ 4] 4859 	inc	h
      001676                       4860 00624$:
      001676 CB FA            [ 8] 4861 	set	7, d
      001678 72               [ 7] 4862 	ld	(hl), d
                                   4863 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001679 3Er00            [ 7] 4864 	ld	a, #<(_playfield)
      00167B DD 86 F8         [19] 4865 	add	a, -8 (ix)
      00167E 5F               [ 4] 4866 	ld	e, a
      00167F 3Es00            [ 7] 4867 	ld	a, #>(_playfield)
      001681 DD 8E F9         [19] 4868 	adc	a, -7 (ix)
      001684 57               [ 4] 4869 	ld	d, a
      001685 7B               [ 4] 4870 	ld	a, e
      001686 DD 86 F5         [19] 4871 	add	a, -11 (ix)
      001689 5F               [ 4] 4872 	ld	e, a
      00168A 30 01            [12] 4873 	jr	NC, 00625$
      00168C 14               [ 4] 4874 	inc	d
      00168D                       4875 00625$:
      00168D DD 6E FC         [19] 4876 	ld	l, -4 (ix)
      001690 DD 66 FD         [19] 4877 	ld	h, -3 (ix)
      001693 7E               [ 7] 4878 	ld	a, (hl)
      001694 CB FF            [ 8] 4879 	set	7, a
      001696 12               [ 7] 4880 	ld	(de), a
                                   4881 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001697 3Er00            [ 7] 4882 	ld	a, #<(_playfield)
      001699 DD 86 F0         [19] 4883 	add	a, -16 (ix)
      00169C 5F               [ 4] 4884 	ld	e, a
      00169D 3Es00            [ 7] 4885 	ld	a, #>(_playfield)
      00169F DD 8E F1         [19] 4886 	adc	a, -15 (ix)
      0016A2 57               [ 4] 4887 	ld	d, a
      0016A3 7B               [ 4] 4888 	ld	a, e
      0016A4 DD 86 FE         [19] 4889 	add	a, -2 (ix)
      0016A7 5F               [ 4] 4890 	ld	e, a
      0016A8 30 01            [12] 4891 	jr	NC, 00626$
      0016AA 14               [ 4] 4892 	inc	d
      0016AB                       4893 00626$:
      0016AB DD 6E F2         [19] 4894 	ld	l, -14 (ix)
      0016AE DD 66 F3         [19] 4895 	ld	h, -13 (ix)
      0016B1 7E               [ 7] 4896 	ld	a, (hl)
      0016B2 CB FF            [ 8] 4897 	set	7, a
      0016B4 12               [ 7] 4898 	ld	(de), a
      0016B5                       4899 00116$:
                                   4900 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      0016B5 DD 6E F4         [19] 4901 	ld	l, -12 (ix)
      0016B8 26 00            [ 7] 4902 	ld	h, #0x00
      0016BA 09               [11] 4903 	add	hl, bc
      0016BB 4E               [ 7] 4904 	ld	c, (hl)
      0016BC 79               [ 4] 4905 	ld	a, c
      0016BD B7               [ 4] 4906 	or	a, a
      0016BE 28 6A            [12] 4907 	jr	Z, 00209$
                                   4908 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      0016C0 DD 7E FA         [19] 4909 	ld	a, -6 (ix)
      0016C3 DD 86 FE         [19] 4910 	add	a, -2 (ix)
      0016C6 5F               [ 4] 4911 	ld	e, a
      0016C7 DD 7E FB         [19] 4912 	ld	a, -5 (ix)
      0016CA CE 00            [ 7] 4913 	adc	a, #0x00
      0016CC 57               [ 4] 4914 	ld	d, a
      0016CD DD 6E FC         [19] 4915 	ld	l, -4 (ix)
      0016D0 DD 66 FD         [19] 4916 	ld	h, -3 (ix)
      0016D3 46               [ 7] 4917 	ld	b, (hl)
      0016D4 1A               [ 7] 4918 	ld	a, (de)
      0016D5 B8               [ 4] 4919 	cp	a, b
      0016D6 20 52            [12] 4920 	jr	NZ, 00209$
                                   4921 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0016D8 91               [ 4] 4922 	sub	a, c
      0016D9 20 4F            [12] 4923 	jr	NZ, 00209$
                                   4924 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      0016DB DD 36 EF 01      [19] 4925 	ld	-17 (ix), #0x01
                                   4926 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0016DF 3Er00            [ 7] 4927 	ld	a, #<(_playfield)
      0016E1 DD 86 F0         [19] 4928 	add	a, -16 (ix)
      0016E4 47               [ 4] 4929 	ld	b, a
      0016E5 3Es00            [ 7] 4930 	ld	a, #>(_playfield)
      0016E7 DD 8E F1         [19] 4931 	adc	a, -15 (ix)
      0016EA 67               [ 4] 4932 	ld	h, a
      0016EB 78               [ 4] 4933 	ld	a, b
      0016EC DD 86 F4         [19] 4934 	add	a, -12 (ix)
      0016EF 6F               [ 4] 4935 	ld	l, a
      0016F0 30 01            [12] 4936 	jr	NC, 00631$
      0016F2 24               [ 4] 4937 	inc	h
      0016F3                       4938 00631$:
      0016F3 CB F9            [ 8] 4939 	set	7, c
      0016F5 71               [ 7] 4940 	ld	(hl), c
                                   4941 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0016F6 3Er00            [ 7] 4942 	ld	a, #<(_playfield)
      0016F8 DD 86 F8         [19] 4943 	add	a, -8 (ix)
      0016FB 4F               [ 4] 4944 	ld	c, a
      0016FC 3Es00            [ 7] 4945 	ld	a, #>(_playfield)
      0016FE DD 8E F9         [19] 4946 	adc	a, -7 (ix)
      001701 47               [ 4] 4947 	ld	b, a
      001702 79               [ 4] 4948 	ld	a, c
      001703 DD 86 F5         [19] 4949 	add	a, -11 (ix)
      001706 4F               [ 4] 4950 	ld	c, a
      001707 30 01            [12] 4951 	jr	NC, 00632$
      001709 04               [ 4] 4952 	inc	b
      00170A                       4953 00632$:
      00170A DD 6E FC         [19] 4954 	ld	l, -4 (ix)
      00170D DD 66 FD         [19] 4955 	ld	h, -3 (ix)
      001710 7E               [ 7] 4956 	ld	a, (hl)
      001711 CB FF            [ 8] 4957 	set	7, a
      001713 02               [ 7] 4958 	ld	(bc), a
                                   4959 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001714 3Er00            [ 7] 4960 	ld	a, #<(_playfield)
      001716 DD 86 F6         [19] 4961 	add	a, -10 (ix)
      001719 4F               [ 4] 4962 	ld	c, a
      00171A 3Es00            [ 7] 4963 	ld	a, #>(_playfield)
      00171C DD 8E F7         [19] 4964 	adc	a, -9 (ix)
      00171F 47               [ 4] 4965 	ld	b, a
      001720 DD 6E FE         [19] 4966 	ld	l, -2 (ix)
      001723 26 00            [ 7] 4967 	ld	h, #0x00
      001725 09               [11] 4968 	add	hl, bc
      001726 1A               [ 7] 4969 	ld	a, (de)
      001727 CB FF            [ 8] 4970 	set	7, a
      001729 77               [ 7] 4971 	ld	(hl), a
      00172A                       4972 00209$:
                                   4973 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00172A DD 34 FF         [23] 4974 	inc	-1 (ix)
      00172D C3r9Fr15         [10] 4975 	jp	00208$
      001730                       4976 00212$:
                                   4977 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001730 DD 34 FE         [23] 4978 	inc	-2 (ix)
      001733 C3r93r15         [10] 4979 	jp	00211$
      001736                       4980 00124$:
                                   4981 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      001736 DD 7E EF         [19] 4982 	ld	a, -17 (ix)
      001739 B7               [ 4] 4983 	or	a, a
      00173A CAr25r1B         [10] 4984 	jp	Z, 00234$
                                   4985 ;src\/CheckPlayfield.h:106: byte x = 255, y = 0;
      00173D DD 36 F6 FF      [19] 4986 	ld	-10 (ix), #0xff
                                   4987 ;src\/CheckPlayfield.h:108: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001741 DD 36 F7 05      [19] 4988 	ld	-9 (ix), #0x05
      001745 DD 36 F8 00      [19] 4989 	ld	-8 (ix), #0
                                   4990 ;src\/CheckPlayfield.h:109: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001749 DD 36 F9 0B      [19] 4991 	ld	-7 (ix), #0x0b
      00174D DD 36 FA 00      [19] 4992 	ld	-6 (ix), #0
                                   4993 ;src\/CheckPlayfield.h:111: HideArrow();
      001751 CDrE9r0C         [17] 4994 	call	_HideArrow
                                   4995 ;src\/CheckPlayfield.h:113: SoundFx_2();
      001754 CDr5Er12         [17] 4996 	call	_SoundFx_2
                                   4997 ;src\/CheckPlayfield.h:116: numberPiecesRemoved = 0;
      001757 DD 36 FF 00      [19] 4998 	ld	-1 (ix), #0
                                   4999 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00175B 0E 00            [ 7] 5000 	ld	c, #0x00
      00175D                       5001 00217$:
      00175D 79               [ 4] 5002 	ld	a, c
      00175E D6 0C            [ 7] 5003 	sub	a, #0x0c
      001760 30 4E            [12] 5004 	jr	NC, 00136$
                                   5005 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001762 DD 5E FF         [19] 5006 	ld	e, -1 (ix)
      001765 16 00            [ 7] 5007 	ld	d, #0x00
      001767                       5008 00214$:
      001767 7A               [ 4] 5009 	ld	a, d
      001768 D6 06            [ 7] 5010 	sub	a, #0x06
      00176A 30 3E            [12] 5011 	jr	NC, 00316$
                                   5012 ;src\/CheckPlayfield.h:119: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00176C D5               [11] 5013 	push	de
      00176D 5A               [ 4] 5014 	ld	e, d
      00176E 16 00            [ 7] 5015 	ld	d, #0x00
      001770 6B               [ 4] 5016 	ld	l, e
      001771 62               [ 4] 5017 	ld	h, d
      001772 29               [11] 5018 	add	hl, hl
      001773 19               [11] 5019 	add	hl, de
      001774 29               [11] 5020 	add	hl, hl
      001775 29               [11] 5021 	add	hl, hl
      001776 11r00r00         [10] 5022 	ld	de, #_playfield
      001779 19               [11] 5023 	add	hl, de
      00177A D1               [10] 5024 	pop	de
      00177B 06 00            [ 7] 5025 	ld	b, #0x00
      00177D 09               [11] 5026 	add	hl, bc
      00177E 7E               [ 7] 5027 	ld	a, (hl)
      00177F 07               [ 4] 5028 	rlca
      001780 30 25            [12] 5029 	jr	NC, 00215$
                                   5030 ;src\/CheckPlayfield.h:120: numberPiecesRemoved++;
      001782 1C               [ 4] 5031 	inc	e
                                   5032 ;src\/CheckPlayfield.h:122: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001783 7A               [ 4] 5033 	ld	a, d
      001784 DD 96 F7         [19] 5034 	sub	a, -9 (ix)
      001787 30 03            [12] 5035 	jr	NC, 00126$
      001789 DD 72 F7         [19] 5036 	ld	-9 (ix), d
      00178C                       5037 00126$:
                                   5038 ;src\/CheckPlayfield.h:123: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      00178C DD 7E F8         [19] 5039 	ld	a, -8 (ix)
      00178F 92               [ 4] 5040 	sub	a, d
      001790 30 03            [12] 5041 	jr	NC, 00128$
      001792 DD 72 F8         [19] 5042 	ld	-8 (ix), d
      001795                       5043 00128$:
                                   5044 ;src\/CheckPlayfield.h:124: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001795 79               [ 4] 5045 	ld	a, c
      001796 DD 96 F9         [19] 5046 	sub	a, -7 (ix)
      001799 30 03            [12] 5047 	jr	NC, 00130$
      00179B DD 71 F9         [19] 5048 	ld	-7 (ix), c
      00179E                       5049 00130$:
                                   5050 ;src\/CheckPlayfield.h:125: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      00179E DD 7E FA         [19] 5051 	ld	a, -6 (ix)
      0017A1 91               [ 4] 5052 	sub	a, c
      0017A2 30 03            [12] 5053 	jr	NC, 00215$
      0017A4 DD 71 FA         [19] 5054 	ld	-6 (ix), c
      0017A7                       5055 00215$:
                                   5056 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0017A7 14               [ 4] 5057 	inc	d
      0017A8 18 BD            [12] 5058 	jr	00214$
      0017AA                       5059 00316$:
      0017AA DD 73 FF         [19] 5060 	ld	-1 (ix), e
                                   5061 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0017AD 0C               [ 4] 5062 	inc	c
      0017AE 18 AD            [12] 5063 	jr	00217$
      0017B0                       5064 00136$:
                                   5065 ;src\/CheckPlayfield.h:131: DrawNumber(numberPiecesRemoved, 0, 0);//test
      0017B0 DD 4E FF         [19] 5066 	ld	c, -1 (ix)
      0017B3 06 00            [ 7] 5067 	ld	b, #0x00
      0017B5 AF               [ 4] 5068 	xor	a, a
      0017B6 F5               [11] 5069 	push	af
      0017B7 33               [ 6] 5070 	inc	sp
      0017B8 AF               [ 4] 5071 	xor	a, a
      0017B9 F5               [11] 5072 	push	af
      0017BA 33               [ 6] 5073 	inc	sp
      0017BB C5               [11] 5074 	push	bc
      0017BC CDrFAr07         [17] 5075 	call	_DrawNumber
      0017BF F1               [10] 5076 	pop	af
      0017C0 F1               [10] 5077 	pop	af
                                   5078 ;src\/CheckPlayfield.h:132: DrawNumber(iteration, 0, 1);//test
      0017C1 DD 4E 04         [19] 5079 	ld	c, 4 (ix)
      0017C4 06 00            [ 7] 5080 	ld	b, #0x00
      0017C6 3E 01            [ 7] 5081 	ld	a, #0x01
      0017C8 F5               [11] 5082 	push	af
      0017C9 33               [ 6] 5083 	inc	sp
      0017CA AF               [ 4] 5084 	xor	a, a
      0017CB F5               [11] 5085 	push	af
      0017CC 33               [ 6] 5086 	inc	sp
      0017CD C5               [11] 5087 	push	bc
      0017CE CDrFAr07         [17] 5088 	call	_DrawNumber
      0017D1 F1               [10] 5089 	pop	af
      0017D2 F1               [10] 5090 	pop	af
                                   5091 ;src\/CheckPlayfield.h:133: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      0017D3 DD 4E F7         [19] 5092 	ld	c, -9 (ix)
      0017D6 06 00            [ 7] 5093 	ld	b, #0x00
      0017D8 3E 0D            [ 7] 5094 	ld	a, #0x0d
      0017DA F5               [11] 5095 	push	af
      0017DB 33               [ 6] 5096 	inc	sp
      0017DC AF               [ 4] 5097 	xor	a, a
      0017DD F5               [11] 5098 	push	af
      0017DE 33               [ 6] 5099 	inc	sp
      0017DF C5               [11] 5100 	push	bc
      0017E0 CDrFAr07         [17] 5101 	call	_DrawNumber
      0017E3 F1               [10] 5102 	pop	af
      0017E4 F1               [10] 5103 	pop	af
                                   5104 ;src\/CheckPlayfield.h:134: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      0017E5 DD 4E F8         [19] 5105 	ld	c, -8 (ix)
      0017E8 06 00            [ 7] 5106 	ld	b, #0x00
      0017EA 3E 0E            [ 7] 5107 	ld	a, #0x0e
      0017EC F5               [11] 5108 	push	af
      0017ED 33               [ 6] 5109 	inc	sp
      0017EE AF               [ 4] 5110 	xor	a, a
      0017EF F5               [11] 5111 	push	af
      0017F0 33               [ 6] 5112 	inc	sp
      0017F1 C5               [11] 5113 	push	bc
      0017F2 CDrFAr07         [17] 5114 	call	_DrawNumber
      0017F5 F1               [10] 5115 	pop	af
      0017F6 F1               [10] 5116 	pop	af
                                   5117 ;src\/CheckPlayfield.h:135: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      0017F7 DD 4E F9         [19] 5118 	ld	c, -7 (ix)
      0017FA 06 00            [ 7] 5119 	ld	b, #0x00
      0017FC 3E 10            [ 7] 5120 	ld	a, #0x10
      0017FE F5               [11] 5121 	push	af
      0017FF 33               [ 6] 5122 	inc	sp
      001800 AF               [ 4] 5123 	xor	a, a
      001801 F5               [11] 5124 	push	af
      001802 33               [ 6] 5125 	inc	sp
      001803 C5               [11] 5126 	push	bc
      001804 CDrFAr07         [17] 5127 	call	_DrawNumber
      001807 F1               [10] 5128 	pop	af
      001808 F1               [10] 5129 	pop	af
                                   5130 ;src\/CheckPlayfield.h:136: DrawNumber(upmostPieceRemoved, 0, 17);//test
      001809 DD 4E FA         [19] 5131 	ld	c, -6 (ix)
      00180C 06 00            [ 7] 5132 	ld	b, #0x00
      00180E 3E 11            [ 7] 5133 	ld	a, #0x11
      001810 F5               [11] 5134 	push	af
      001811 33               [ 6] 5135 	inc	sp
      001812 AF               [ 4] 5136 	xor	a, a
      001813 F5               [11] 5137 	push	af
      001814 33               [ 6] 5138 	inc	sp
      001815 C5               [11] 5139 	push	bc
      001816 CDrFAr07         [17] 5140 	call	_DrawNumber
      001819 F1               [10] 5141 	pop	af
      00181A F1               [10] 5142 	pop	af
                                   5143 ;src\/CheckPlayfield.h:139: while(counter-- > 0) {
      00181B DD 7E FF         [19] 5144 	ld	a, -1 (ix)
      00181E D6 03            [ 7] 5145 	sub	a, #0x03
      001820 3E 01            [ 7] 5146 	ld	a, #0x01
      001822 28 01            [12] 5147 	jr	Z, 00635$
      001824 AF               [ 4] 5148 	xor	a, a
      001825                       5149 00635$:
      001825 DD 77 FB         [19] 5150 	ld	-5 (ix), a
      001828 DD 36 FF 48      [19] 5151 	ld	-1 (ix), #0x48
      00182C                       5152 00164$:
      00182C DD 4E FF         [19] 5153 	ld	c, -1 (ix)
      00182F DD 35 FF         [23] 5154 	dec	-1 (ix)
      001832 79               [ 4] 5155 	ld	a, c
      001833 B7               [ 4] 5156 	or	a, a
      001834 CArBFr19         [10] 5157 	jp	Z, 00166$
                                   5158 ;src\/CheckPlayfield.h:141: word lastJiffy = JIFFY;
      001837 ED 4B 9E FC      [20] 5159 	ld	bc, (_JIFFY)
                                   5160 ;src\/CheckPlayfield.h:142: while (lastJiffy == JIFFY) {
      00183B                       5161 00137$:
      00183B 2A 9E FC         [16] 5162 	ld	hl, (_JIFFY)
      00183E BF               [ 4] 5163 	cp	a, a
      00183F ED 42            [15] 5164 	sbc	hl, bc
      001841 28 F8            [12] 5165 	jr	Z, 00137$
                                   5166 ;src\/CheckPlayfield.h:148: if(numberPiecesRemoved == 3) {
      001843 DD 7E FB         [19] 5167 	ld	a, -5 (ix)
      001846 B7               [ 4] 5168 	or	a, a
      001847 CArDDr18         [10] 5169 	jp	Z, 00297$
                                   5170 ;src\/CheckPlayfield.h:149: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16) - (72 - counter);
      00184A DD 6E F9         [19] 5171 	ld	l, -7 (ix)
      00184D 26 00            [ 7] 5172 	ld	h, #0x00
      00184F 29               [11] 5173 	add	hl, hl
      001850 29               [11] 5174 	add	hl, hl
      001851 29               [11] 5175 	add	hl, hl
      001852 29               [11] 5176 	add	hl, hl
      001853 7D               [ 4] 5177 	ld	a, l
      001854 44               [ 4] 5178 	ld	b, h
      001855 DD 6E FA         [19] 5179 	ld	l, -6 (ix)
      001858 26 00            [ 7] 5180 	ld	h, #0x00
      00185A 29               [11] 5181 	add	hl, hl
      00185B 29               [11] 5182 	add	hl, hl
      00185C 29               [11] 5183 	add	hl, hl
      00185D 29               [11] 5184 	add	hl, hl
      00185E 95               [ 4] 5185 	sub	a, l
      00185F 4F               [ 4] 5186 	ld	c, a
      001860 78               [ 4] 5187 	ld	a, b
      001861 9C               [ 4] 5188 	sbc	a, h
      001862 47               [ 4] 5189 	ld	b, a
      001863 59               [ 4] 5190 	ld	e, c
      001864 50               [ 4] 5191 	ld	d, b
      001865 CB 78            [ 8] 5192 	bit	7, b
      001867 28 03            [12] 5193 	jr	Z, 00236$
      001869 59               [ 4] 5194 	ld	e, c
      00186A 50               [ 4] 5195 	ld	d, b
      00186B 13               [ 6] 5196 	inc	de
      00186C                       5197 00236$:
      00186C CB 2A            [ 8] 5198 	sra	d
      00186E CB 1B            [ 8] 5199 	rr	e
      001870 DD 6E FA         [19] 5200 	ld	l, -6 (ix)
      001873 29               [11] 5201 	add	hl, hl
      001874 29               [11] 5202 	add	hl, hl
      001875 29               [11] 5203 	add	hl, hl
      001876 29               [11] 5204 	add	hl, hl
      001877 19               [11] 5205 	add	hl, de
      001878 DD 4E FF         [19] 5206 	ld	c, -1 (ix)
      00187B 3E 48            [ 7] 5207 	ld	a, #0x48
      00187D 91               [ 4] 5208 	sub	a, c
      00187E 4F               [ 4] 5209 	ld	c, a
      00187F 7D               [ 4] 5210 	ld	a, l
      001880 91               [ 4] 5211 	sub	a, c
      001881 DD 77 FE         [19] 5212 	ld	-2 (ix), a
                                   5213 ;src\/CheckPlayfield.h:151: if(x == 255) { // do this expensive calculation only once
      001884 DD 7E F6         [19] 5214 	ld	a, -10 (ix)
      001887 3C               [ 4] 5215 	inc	a
      001888 20 44            [12] 5216 	jr	NZ, 00141$
                                   5217 ;src\/CheckPlayfield.h:152: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      00188A DD 6E F8         [19] 5218 	ld	l, -8 (ix)
      00188D 26 00            [ 7] 5219 	ld	h, #0x00
      00188F 29               [11] 5220 	add	hl, hl
      001890 29               [11] 5221 	add	hl, hl
      001891 29               [11] 5222 	add	hl, hl
      001892 29               [11] 5223 	add	hl, hl
      001893 DD 5E F7         [19] 5224 	ld	e, -9 (ix)
      001896 16 00            [ 7] 5225 	ld	d, #0x00
      001898 EB               [ 4] 5226 	ex	de, hl
      001899 29               [11] 5227 	add	hl, hl
      00189A 29               [11] 5228 	add	hl, hl
      00189B 29               [11] 5229 	add	hl, hl
      00189C 29               [11] 5230 	add	hl, hl
      00189D EB               [ 4] 5231 	ex	de, hl
      00189E BF               [ 4] 5232 	cp	a, a
      00189F ED 52            [15] 5233 	sbc	hl, de
      0018A1 4D               [ 4] 5234 	ld	c, l
      0018A2 44               [ 4] 5235 	ld	b, h
      0018A3 CB 7C            [ 8] 5236 	bit	7, h
      0018A5 28 03            [12] 5237 	jr	Z, 00237$
      0018A7 4D               [ 4] 5238 	ld	c, l
      0018A8 44               [ 4] 5239 	ld	b, h
      0018A9 03               [ 6] 5240 	inc	bc
      0018AA                       5241 00237$:
      0018AA CB 28            [ 8] 5242 	sra	b
      0018AC CB 19            [ 8] 5243 	rr	c
      0018AE 79               [ 4] 5244 	ld	a, c
      0018AF C6 50            [ 7] 5245 	add	a, #0x50
      0018B1 DD 6E F7         [19] 5246 	ld	l, -9 (ix)
      0018B4 29               [11] 5247 	add	hl, hl
      0018B5 29               [11] 5248 	add	hl, hl
      0018B6 29               [11] 5249 	add	hl, hl
      0018B7 29               [11] 5250 	add	hl, hl
      0018B8 85               [ 4] 5251 	add	a, l
      0018B9 DD 77 F6         [19] 5252 	ld	-10 (ix), a
                                   5253 ;src\/CheckPlayfield.h:154: DrawHitSprite(x, y, TRUE);
      0018BC 26 01            [ 7] 5254 	ld	h, #0x01
      0018BE DD 6E FE         [19] 5255 	ld	l, -2 (ix)
      0018C1 E5               [11] 5256 	push	hl
      0018C2 DD 7E F6         [19] 5257 	ld	a, -10 (ix)
      0018C5 F5               [11] 5258 	push	af
      0018C6 33               [ 6] 5259 	inc	sp
      0018C7 CDrF7r0C         [17] 5260 	call	_DrawHitSprite
      0018CA F1               [10] 5261 	pop	af
      0018CB 33               [ 6] 5262 	inc	sp
      0018CC 18 0F            [12] 5263 	jr	00297$
      0018CE                       5264 00141$:
                                   5265 ;src\/CheckPlayfield.h:160: DrawHitSprite(x, y, FALSE);
      0018CE AF               [ 4] 5266 	xor	a, a
      0018CF F5               [11] 5267 	push	af
      0018D0 33               [ 6] 5268 	inc	sp
      0018D1 DD 66 FE         [19] 5269 	ld	h, -2 (ix)
      0018D4 DD 6E F6         [19] 5270 	ld	l, -10 (ix)
      0018D7 E5               [11] 5271 	push	hl
      0018D8 CDrF7r0C         [17] 5272 	call	_DrawHitSprite
      0018DB F1               [10] 5273 	pop	af
      0018DC 33               [ 6] 5274 	inc	sp
                                   5275 ;src\/CheckPlayfield.h:164: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0018DD                       5276 00297$:
      0018DD 3E 0C            [ 7] 5277 	ld	a, #0x0c
      0018DF DD 96 FF         [19] 5278 	sub	a, -1 (ix)
      0018E2 3E 00            [ 7] 5279 	ld	a, #0x00
      0018E4 17               [ 4] 5280 	rla
      0018E5 5F               [ 4] 5281 	ld	e, a
      0018E6 3E 09            [ 7] 5282 	ld	a, #0x09
      0018E8 DD 96 FF         [19] 5283 	sub	a, -1 (ix)
      0018EB 3E 00            [ 7] 5284 	ld	a, #0x00
      0018ED 17               [ 4] 5285 	rla
      0018EE 4F               [ 4] 5286 	ld	c, a
      0018EF 3E 06            [ 7] 5287 	ld	a, #0x06
      0018F1 DD 96 FF         [19] 5288 	sub	a, -1 (ix)
      0018F4 3E 00            [ 7] 5289 	ld	a, #0x00
      0018F6 17               [ 4] 5290 	rla
      0018F7 DD 77 FC         [19] 5291 	ld	-4 (ix), a
      0018FA 3E 03            [ 7] 5292 	ld	a, #0x03
      0018FC DD 96 FF         [19] 5293 	sub	a, -1 (ix)
      0018FF 3E 00            [ 7] 5294 	ld	a, #0x00
      001901 17               [ 4] 5295 	rla
      001902 DD 77 FD         [19] 5296 	ld	-3 (ix), a
      001905 06 00            [ 7] 5297 	ld	b, #0x00
      001907                       5298 00223$:
      001907 78               [ 4] 5299 	ld	a, b
      001908 D6 0C            [ 7] 5300 	sub	a, #0x0c
      00190A D2r2Cr18         [10] 5301 	jp	NC, 00164$
                                   5302 ;src\/CheckPlayfield.h:165: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00190D 16 00            [ 7] 5303 	ld	d, #0x00
      00190F                       5304 00220$:
      00190F 7A               [ 4] 5305 	ld	a, d
      001910 D6 06            [ 7] 5306 	sub	a, #0x06
      001912 D2rBBr19         [10] 5307 	jp	NC, 00224$
                                   5308 ;src\/CheckPlayfield.h:167: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001915 D5               [11] 5309 	push	de
      001916 5A               [ 4] 5310 	ld	e, d
      001917 16 00            [ 7] 5311 	ld	d, #0x00
      001919 6B               [ 4] 5312 	ld	l, e
      00191A 62               [ 4] 5313 	ld	h, d
      00191B 29               [11] 5314 	add	hl, hl
      00191C 19               [11] 5315 	add	hl, de
      00191D 29               [11] 5316 	add	hl, hl
      00191E 29               [11] 5317 	add	hl, hl
      00191F 11r00r00         [10] 5318 	ld	de, #_playfield
      001922 19               [11] 5319 	add	hl, de
      001923 D1               [10] 5320 	pop	de
      001924 7D               [ 4] 5321 	ld	a, l
      001925 80               [ 4] 5322 	add	a, b
      001926 6F               [ 4] 5323 	ld	l, a
      001927 30 01            [12] 5324 	jr	NC, 00639$
      001929 24               [ 4] 5325 	inc	h
      00192A                       5326 00639$:
      00192A 7E               [ 7] 5327 	ld	a, (hl)
      00192B DD 77 FE         [19] 5328 	ld	-2 (ix), a
      00192E DD CB FE 7E      [20] 5329 	bit	7, -2 (ix)
      001932 CArB7r19         [10] 5330 	jp	Z,00221$
                                   5331 ;src\/CheckPlayfield.h:170: if(counter > 12) {
      001935 7B               [ 4] 5332 	ld	a, e
      001936 B7               [ 4] 5333 	or	a, a
      001937 28 2C            [12] 5334 	jr	Z, 00158$
                                   5335 ;src\/CheckPlayfield.h:171: if(JIFFY & 0b00000011) {
      001939 2A 9E FC         [16] 5336 	ld	hl, (_JIFFY)
      00193C 7D               [ 4] 5337 	ld	a, l
      00193D E6 03            [ 7] 5338 	and	a, #0x03
      00193F 28 14            [12] 5339 	jr	Z, 00146$
                                   5340 ;src\/CheckPlayfield.h:172: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001941 DD 7E FE         [19] 5341 	ld	a, -2 (ix)
      001944 CB BF            [ 8] 5342 	res	7, a
      001946 C5               [11] 5343 	push	bc
      001947 D5               [11] 5344 	push	de
      001948 F5               [11] 5345 	push	af
      001949 33               [ 6] 5346 	inc	sp
      00194A 4A               [ 4] 5347 	ld	c, d
      00194B C5               [11] 5348 	push	bc
      00194C CDr1Fr11         [17] 5349 	call	_DrawBlock
      00194F F1               [10] 5350 	pop	af
      001950 33               [ 6] 5351 	inc	sp
      001951 D1               [10] 5352 	pop	de
      001952 C1               [10] 5353 	pop	bc
      001953 18 62            [12] 5354 	jr	00221$
      001955                       5355 00146$:
                                   5356 ;src\/CheckPlayfield.h:175: DrawBlock(col, line, EMPTY);
      001955 C5               [11] 5357 	push	bc
      001956 D5               [11] 5358 	push	de
      001957 AF               [ 4] 5359 	xor	a, a
      001958 F5               [11] 5360 	push	af
      001959 33               [ 6] 5361 	inc	sp
      00195A 4A               [ 4] 5362 	ld	c, d
      00195B C5               [11] 5363 	push	bc
      00195C CDr1Fr11         [17] 5364 	call	_DrawBlock
      00195F F1               [10] 5365 	pop	af
      001960 33               [ 6] 5366 	inc	sp
      001961 D1               [10] 5367 	pop	de
      001962 C1               [10] 5368 	pop	bc
      001963 18 52            [12] 5369 	jr	00221$
      001965                       5370 00158$:
                                   5371 ;src\/CheckPlayfield.h:180: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001965 79               [ 4] 5372 	ld	a, c
      001966 B7               [ 4] 5373 	or	a, a
      001967 28 11            [12] 5374 	jr	Z, 00155$
      001969 C5               [11] 5375 	push	bc
      00196A D5               [11] 5376 	push	de
      00196B 3E 2A            [ 7] 5377 	ld	a, #0x2a
      00196D F5               [11] 5378 	push	af
      00196E 33               [ 6] 5379 	inc	sp
      00196F 4A               [ 4] 5380 	ld	c, d
      001970 C5               [11] 5381 	push	bc
      001971 CDr8Cr11         [17] 5382 	call	_DrawBlock_SameTile
      001974 F1               [10] 5383 	pop	af
      001975 33               [ 6] 5384 	inc	sp
      001976 D1               [10] 5385 	pop	de
      001977 C1               [10] 5386 	pop	bc
      001978 18 3D            [12] 5387 	jr	00221$
      00197A                       5388 00155$:
                                   5389 ;src\/CheckPlayfield.h:181: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      00197A DD 7E FC         [19] 5390 	ld	a, -4 (ix)
      00197D B7               [ 4] 5391 	or	a, a
      00197E 28 11            [12] 5392 	jr	Z, 00152$
      001980 C5               [11] 5393 	push	bc
      001981 D5               [11] 5394 	push	de
      001982 3E 2B            [ 7] 5395 	ld	a, #0x2b
      001984 F5               [11] 5396 	push	af
      001985 33               [ 6] 5397 	inc	sp
      001986 4A               [ 4] 5398 	ld	c, d
      001987 C5               [11] 5399 	push	bc
      001988 CDr8Cr11         [17] 5400 	call	_DrawBlock_SameTile
      00198B F1               [10] 5401 	pop	af
      00198C 33               [ 6] 5402 	inc	sp
      00198D D1               [10] 5403 	pop	de
      00198E C1               [10] 5404 	pop	bc
      00198F 18 26            [12] 5405 	jr	00221$
      001991                       5406 00152$:
                                   5407 ;src\/CheckPlayfield.h:182: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001991 DD 7E FD         [19] 5408 	ld	a, -3 (ix)
      001994 B7               [ 4] 5409 	or	a, a
      001995 28 11            [12] 5410 	jr	Z, 00149$
      001997 C5               [11] 5411 	push	bc
      001998 D5               [11] 5412 	push	de
      001999 3E 2C            [ 7] 5413 	ld	a, #0x2c
      00199B F5               [11] 5414 	push	af
      00199C 33               [ 6] 5415 	inc	sp
      00199D 4A               [ 4] 5416 	ld	c, d
      00199E C5               [11] 5417 	push	bc
      00199F CDr8Cr11         [17] 5418 	call	_DrawBlock_SameTile
      0019A2 F1               [10] 5419 	pop	af
      0019A3 33               [ 6] 5420 	inc	sp
      0019A4 D1               [10] 5421 	pop	de
      0019A5 C1               [10] 5422 	pop	bc
      0019A6 18 0F            [12] 5423 	jr	00221$
      0019A8                       5424 00149$:
                                   5425 ;src\/CheckPlayfield.h:183: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      0019A8 C5               [11] 5426 	push	bc
      0019A9 D5               [11] 5427 	push	de
      0019AA 3E 2D            [ 7] 5428 	ld	a, #0x2d
      0019AC F5               [11] 5429 	push	af
      0019AD 33               [ 6] 5430 	inc	sp
      0019AE 4A               [ 4] 5431 	ld	c, d
      0019AF C5               [11] 5432 	push	bc
      0019B0 CDr8Cr11         [17] 5433 	call	_DrawBlock_SameTile
      0019B3 F1               [10] 5434 	pop	af
      0019B4 33               [ 6] 5435 	inc	sp
      0019B5 D1               [10] 5436 	pop	de
      0019B6 C1               [10] 5437 	pop	bc
      0019B7                       5438 00221$:
                                   5439 ;src\/CheckPlayfield.h:165: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0019B7 14               [ 4] 5440 	inc	d
      0019B8 C3r0Fr19         [10] 5441 	jp	00220$
      0019BB                       5442 00224$:
                                   5443 ;src\/CheckPlayfield.h:164: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0019BB 04               [ 4] 5444 	inc	b
      0019BC C3r07r19         [10] 5445 	jp	00223$
      0019BF                       5446 00166$:
                                   5447 ;src\/CheckPlayfield.h:191: HideHitSprite();
      0019BF CDr55r0E         [17] 5448 	call	_HideHitSprite
                                   5449 ;src\/CheckPlayfield.h:196: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0019C2 DD 36 FD 00      [19] 5450 	ld	-3 (ix), #0
      0019C6                       5451 00232$:
      0019C6 DD 7E FD         [19] 5452 	ld	a, -3 (ix)
      0019C9 D6 0C            [ 7] 5453 	sub	a, #0x0c
      0019CB D2rA9r1A         [10] 5454 	jp	NC, 00175$
                                   5455 ;src\/CheckPlayfield.h:197: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0019CE DD 36 FE 00      [19] 5456 	ld	-2 (ix), #0
      0019D2                       5457 00229$:
      0019D2 DD 7E FE         [19] 5458 	ld	a, -2 (ix)
      0019D5 D6 06            [ 7] 5459 	sub	a, #0x06
      0019D7 D2rA3r1A         [10] 5460 	jp	NC, 00233$
                                   5461 ;src\/CheckPlayfield.h:199: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0019DA DD 4E FE         [19] 5462 	ld	c, -2 (ix)
      0019DD 06 00            [ 7] 5463 	ld	b, #0x00
      0019DF 69               [ 4] 5464 	ld	l, c
      0019E0 60               [ 4] 5465 	ld	h, b
      0019E1 29               [11] 5466 	add	hl, hl
      0019E2 09               [11] 5467 	add	hl, bc
      0019E3 29               [11] 5468 	add	hl, hl
      0019E4 29               [11] 5469 	add	hl, hl
      0019E5 EB               [ 4] 5470 	ex	de, hl
      0019E6 21r00r00         [10] 5471 	ld	hl, #_playfield
      0019E9 19               [11] 5472 	add	hl, de
      0019EA DD 75 FB         [19] 5473 	ld	-5 (ix), l
      0019ED DD 74 FC         [19] 5474 	ld	-4 (ix), h
      0019F0 DD 7E FB         [19] 5475 	ld	a, -5 (ix)
      0019F3 DD 86 FD         [19] 5476 	add	a, -3 (ix)
      0019F6 4F               [ 4] 5477 	ld	c, a
      0019F7 DD 7E FC         [19] 5478 	ld	a, -4 (ix)
      0019FA CE 00            [ 7] 5479 	adc	a, #0x00
      0019FC 47               [ 4] 5480 	ld	b, a
      0019FD 0A               [ 7] 5481 	ld	a, (bc)
      0019FE 07               [ 4] 5482 	rlca
      0019FF D2r9Dr1A         [10] 5483 	jp	NC,00230$
                                   5484 ;src\/CheckPlayfield.h:201: blocksRemoved++;
      001A02 2Ar04r00         [16] 5485 	ld	hl, (_blocksRemoved)
      001A05 23               [ 6] 5486 	inc	hl
      001A06 22r04r00         [16] 5487 	ld	(_blocksRemoved), hl
                                   5488 ;src\/CheckPlayfield.h:204: for(byte line1 = line; line1 > 0; line1--) {
      001A09 DD 7E FB         [19] 5489 	ld	a, -5 (ix)
      001A0C DD 77 F7         [19] 5490 	ld	-9 (ix), a
      001A0F DD 7E FC         [19] 5491 	ld	a, -4 (ix)
      001A12 DD 77 F8         [19] 5492 	ld	-8 (ix), a
      001A15 DD 7E FD         [19] 5493 	ld	a, -3 (ix)
      001A18 DD 77 FF         [19] 5494 	ld	-1 (ix), a
      001A1B                       5495 00226$:
      001A1B DD 7E FF         [19] 5496 	ld	a, -1 (ix)
      001A1E B7               [ 4] 5497 	or	a, a
      001A1F 28 7C            [12] 5498 	jr	Z, 00230$
                                   5499 ;src\/CheckPlayfield.h:205: byte linesToBeRemoved = 1;
      001A21 0E 01            [ 7] 5500 	ld	c, #0x01
                                   5501 ;src\/CheckPlayfield.h:206: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001A23 DD 7E FF         [19] 5502 	ld	a, -1 (ix)
      001A26 DD 77 FC         [19] 5503 	ld	-4 (ix), a
      001A29 3D               [ 4] 5504 	dec	a
      001A2A DD 86 F7         [19] 5505 	add	a, -9 (ix)
      001A2D 5F               [ 4] 5506 	ld	e, a
      001A2E 3E 00            [ 7] 5507 	ld	a, #0x00
      001A30 DD 8E F8         [19] 5508 	adc	a, -8 (ix)
      001A33 57               [ 4] 5509 	ld	d, a
      001A34 1A               [ 7] 5510 	ld	a, (de)
      001A35 07               [ 4] 5511 	rlca
      001A36 30 02            [12] 5512 	jr	NC, 00168$
      001A38 0E 02            [ 7] 5513 	ld	c, #0x02
      001A3A                       5514 00168$:
                                   5515 ;src\/CheckPlayfield.h:207: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001A3A DD 7E FC         [19] 5516 	ld	a, -4 (ix)
      001A3D 3D               [ 4] 5517 	dec	a
      001A3E 3D               [ 4] 5518 	dec	a
      001A3F DD 86 F7         [19] 5519 	add	a, -9 (ix)
      001A42 5F               [ 4] 5520 	ld	e, a
      001A43 3E 00            [ 7] 5521 	ld	a, #0x00
      001A45 DD 8E F8         [19] 5522 	adc	a, -8 (ix)
      001A48 57               [ 4] 5523 	ld	d, a
      001A49 1A               [ 7] 5524 	ld	a, (de)
      001A4A 07               [ 4] 5525 	rlca
      001A4B 30 01            [12] 5526 	jr	NC, 00170$
      001A4D 0C               [ 4] 5527 	inc	c
      001A4E                       5528 00170$:
                                   5529 ;src\/CheckPlayfield.h:211: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001A4E DD 7E F7         [19] 5530 	ld	a, -9 (ix)
      001A51 DD 86 FF         [19] 5531 	add	a, -1 (ix)
      001A54 DD 77 F9         [19] 5532 	ld	-7 (ix), a
      001A57 DD 7E F8         [19] 5533 	ld	a, -8 (ix)
      001A5A CE 00            [ 7] 5534 	adc	a, #0x00
      001A5C DD 77 FA         [19] 5535 	ld	-6 (ix), a
      001A5F DD 6E FF         [19] 5536 	ld	l, -1 (ix)
      001A62 26 00            [ 7] 5537 	ld	h, #0x00
      001A64 59               [ 4] 5538 	ld	e, c
      001A65 16 00            [ 7] 5539 	ld	d, #0x00
      001A67 BF               [ 4] 5540 	cp	a, a
      001A68 ED 52            [15] 5541 	sbc	hl, de
      001A6A CB 7C            [ 8] 5542 	bit	7, h
      001A6C 20 18            [12] 5543 	jr	NZ, 00240$
      001A6E DD 7E FF         [19] 5544 	ld	a, -1 (ix)
      001A71 91               [ 4] 5545 	sub	a, c
      001A72 DD 86 F7         [19] 5546 	add	a, -9 (ix)
      001A75 4F               [ 4] 5547 	ld	c, a
      001A76 3E 00            [ 7] 5548 	ld	a, #0x00
      001A78 DD 8E F8         [19] 5549 	adc	a, -8 (ix)
      001A7B 47               [ 4] 5550 	ld	b, a
      001A7C 0A               [ 7] 5551 	ld	a, (bc)
      001A7D DD 77 FB         [19] 5552 	ld	-5 (ix), a
      001A80 DD 36 FC 00      [19] 5553 	ld	-4 (ix), #0
      001A84 18 07            [12] 5554 	jr	00241$
      001A86                       5555 00240$:
      001A86 AF               [ 4] 5556 	xor	a, a
      001A87 DD 77 FB         [19] 5557 	ld	-5 (ix), a
      001A8A DD 77 FC         [19] 5558 	ld	-4 (ix), a
      001A8D                       5559 00241$:
      001A8D DD 7E FB         [19] 5560 	ld	a, -5 (ix)
      001A90 DD 6E F9         [19] 5561 	ld	l, -7 (ix)
      001A93 DD 66 FA         [19] 5562 	ld	h, -6 (ix)
      001A96 77               [ 7] 5563 	ld	(hl), a
                                   5564 ;src\/CheckPlayfield.h:204: for(byte line1 = line; line1 > 0; line1--) {
      001A97 DD 35 FF         [23] 5565 	dec	-1 (ix)
      001A9A C3r1Br1A         [10] 5566 	jp	00226$
      001A9D                       5567 00230$:
                                   5568 ;src\/CheckPlayfield.h:197: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A9D DD 34 FE         [23] 5569 	inc	-2 (ix)
      001AA0 C3rD2r19         [10] 5570 	jp	00229$
      001AA3                       5571 00233$:
                                   5572 ;src\/CheckPlayfield.h:196: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001AA3 DD 34 FD         [23] 5573 	inc	-3 (ix)
      001AA6 C3rC6r19         [10] 5574 	jp	00232$
      001AA9                       5575 00175$:
                                   5576 ;src\/CheckPlayfield.h:218: oldLevel = level;
      001AA9 3Ar06r00         [13] 5577 	ld	a, (#_level + 0)
      001AAC 4F               [ 4] 5578 	ld	c, a
                                   5579 ;src\/CheckPlayfield.h:219: if(blocksRemoved >= 90) {
      001AAD 21r04r00         [10] 5580 	ld	hl, #_blocksRemoved
      001AB0 46               [ 7] 5581 	ld	b, (hl)
      001AB1 23               [ 6] 5582 	inc	hl
      001AB2 56               [ 7] 5583 	ld	d, (hl)
      001AB3 78               [ 4] 5584 	ld	a, b
      001AB4 D6 5A            [ 7] 5585 	sub	a, #0x5a
      001AB6 7A               [ 4] 5586 	ld	a, d
      001AB7 DE 00            [ 7] 5587 	sbc	a, #0x00
      001AB9 38 19            [12] 5588 	jr	C, 00183$
                                   5589 ;src\/CheckPlayfield.h:220: level = (blocksRemoved / 30) + 1;
      001ABB C5               [11] 5590 	push	bc
      001ABC 21 1E 00         [10] 5591 	ld	hl, #0x001e
      001ABF E5               [11] 5592 	push	hl
      001AC0 58               [ 4] 5593 	ld	e, b
      001AC1 D5               [11] 5594 	push	de
      001AC2 CDr00r00         [17] 5595 	call	__divuint
      001AC5 F1               [10] 5596 	pop	af
      001AC6 F1               [10] 5597 	pop	af
      001AC7 C1               [10] 5598 	pop	bc
      001AC8 7D               [ 4] 5599 	ld	a, l
      001AC9 3C               [ 4] 5600 	inc	a
      001ACA 32r06r00         [13] 5601 	ld	(_level+0), a
                                   5602 ;src\/CheckPlayfield.h:221: speed = 15;
      001ACD 21r93r00         [10] 5603 	ld	hl, #_speed
      001AD0 36 0F            [10] 5604 	ld	(hl), #0x0f
      001AD2 18 32            [12] 5605 	jr	00184$
      001AD4                       5606 00183$:
                                   5607 ;src\/CheckPlayfield.h:224: else if(blocksRemoved >= 60) { 
      001AD4 78               [ 4] 5608 	ld	a, b
      001AD5 D6 3C            [ 7] 5609 	sub	a, #0x3c
      001AD7 7A               [ 4] 5610 	ld	a, d
      001AD8 DE 00            [ 7] 5611 	sbc	a, #0x00
      001ADA 38 0C            [12] 5612 	jr	C, 00180$
                                   5613 ;src\/CheckPlayfield.h:225: level = 3;
      001ADC 21r06r00         [10] 5614 	ld	hl, #_level
      001ADF 36 03            [10] 5615 	ld	(hl), #0x03
                                   5616 ;src\/CheckPlayfield.h:226: speed = 30;
      001AE1 21r93r00         [10] 5617 	ld	hl, #_speed
      001AE4 36 1E            [10] 5618 	ld	(hl), #0x1e
      001AE6 18 1E            [12] 5619 	jr	00184$
      001AE8                       5620 00180$:
                                   5621 ;src\/CheckPlayfield.h:228: else if(blocksRemoved >= 30) { 
      001AE8 78               [ 4] 5622 	ld	a, b
      001AE9 D6 1E            [ 7] 5623 	sub	a, #0x1e
      001AEB 7A               [ 4] 5624 	ld	a, d
      001AEC DE 00            [ 7] 5625 	sbc	a, #0x00
      001AEE 38 0C            [12] 5626 	jr	C, 00177$
                                   5627 ;src\/CheckPlayfield.h:229: level = 2;
      001AF0 21r06r00         [10] 5628 	ld	hl, #_level
      001AF3 36 02            [10] 5629 	ld	(hl), #0x02
                                   5630 ;src\/CheckPlayfield.h:230: speed = 45;
      001AF5 21r93r00         [10] 5631 	ld	hl, #_speed
      001AF8 36 2D            [10] 5632 	ld	(hl), #0x2d
      001AFA 18 0A            [12] 5633 	jr	00184$
      001AFC                       5634 00177$:
                                   5635 ;src\/CheckPlayfield.h:233: level = 1;
      001AFC 21r06r00         [10] 5636 	ld	hl, #_level
      001AFF 36 01            [10] 5637 	ld	(hl), #0x01
                                   5638 ;src\/CheckPlayfield.h:234: speed = 60;
      001B01 21r93r00         [10] 5639 	ld	hl, #_speed
      001B04 36 3C            [10] 5640 	ld	(hl), #0x3c
      001B06                       5641 00184$:
                                   5642 ;src\/CheckPlayfield.h:237: if(oldLevel != level) {
      001B06 3Ar06r00         [13] 5643 	ld	a,(#_level + 0)
      001B09 91               [ 4] 5644 	sub	a, c
      001B0A 28 05            [12] 5645 	jr	Z, 00186$
                                   5646 ;src\/CheckPlayfield.h:238: newLevel = TRUE;
      001B0C 21r07r00         [10] 5647 	ld	hl, #_newLevel
      001B0F 36 01            [10] 5648 	ld	(hl), #0x01
      001B11                       5649 00186$:
                                   5650 ;src\/CheckPlayfield.h:242: DrawPlayfield();
      001B11 CDr4Dr12         [17] 5651 	call	_DrawPlayfield
                                   5652 ;src\/CheckPlayfield.h:246: CheckIfPlayfieldIsValid(); // test
      001B14 CDrBEr12         [17] 5653 	call	_CheckIfPlayfieldIsValid
                                   5654 ;src\/CheckPlayfield.h:248: DrawScore();
      001B17 CDr86r0A         [17] 5655 	call	_DrawScore
                                   5656 ;src\/CheckPlayfield.h:250: iteration++;
      001B1A DD 34 04         [23] 5657 	inc	4 (ix)
                                   5658 ;src\/CheckPlayfield.h:251: CheckPlayfield(iteration);  
      001B1D DD 7E 04         [19] 5659 	ld	a, 4 (ix)
      001B20 F5               [11] 5660 	push	af
      001B21 33               [ 6] 5661 	inc	sp
      001B22 CDr72r13         [17] 5662 	call	_CheckPlayfield
      001B25                       5663 00234$:
                                   5664 ;src\/CheckPlayfield.h:256: }
      001B25 DD F9            [10] 5665 	ld	sp, ix
      001B27 DD E1            [14] 5666 	pop	ix
      001B29 C9               [10] 5667 	ret
                                   5668 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5669 ;	---------------------------------
                                   5670 ; Function RandomIndex
                                   5671 ; ---------------------------------
      001B2A                       5672 _RandomIndex::
                                   5673 ;src\/GameLogic.h:5: do {
      001B2A                       5674 00101$:
                                   5675 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001B2A CDrA3r00         [17] 5676 	call	_GetRandom
      001B2D 7D               [ 4] 5677 	ld	a, l
      001B2E E6 07            [ 7] 5678 	and	a, #0x07
      001B30 6F               [ 4] 5679 	ld	l, a
                                   5680 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001B31 3E 04            [ 7] 5681 	ld	a, #0x04
      001B33 95               [ 4] 5682 	sub	a, l
      001B34 38 F4            [12] 5683 	jr	C, 00101$
                                   5684 ;src\/GameLogic.h:10: return random;
                                   5685 ;src\/GameLogic.h:11: }
      001B36 C9               [10] 5686 	ret
                                   5687 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5688 ;	---------------------------------
                                   5689 ; Function RandomPiece
                                   5690 ; ---------------------------------
      001B37                       5691 _RandomPiece::
                                   5692 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001B37 01r18r00         [10] 5693 	ld	bc, #_pieces+0
      001B3A C5               [11] 5694 	push	bc
      001B3B CDr2Ar1B         [17] 5695 	call	_RandomIndex
      001B3E C1               [10] 5696 	pop	bc
      001B3F 26 00            [ 7] 5697 	ld	h, #0x00
      001B41 09               [11] 5698 	add	hl, bc
      001B42 7E               [ 7] 5699 	ld	a, (hl)
      001B43 32r90r00         [13] 5700 	ld	(_topPiece+0), a
                                   5701 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001B46 C5               [11] 5702 	push	bc
      001B47 CDr2Ar1B         [17] 5703 	call	_RandomIndex
      001B4A C1               [10] 5704 	pop	bc
      001B4B 26 00            [ 7] 5705 	ld	h, #0x00
      001B4D 09               [11] 5706 	add	hl, bc
      001B4E 7E               [ 7] 5707 	ld	a, (hl)
      001B4F 32r91r00         [13] 5708 	ld	(_midPiece+0), a
                                   5709 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001B52 C5               [11] 5710 	push	bc
      001B53 CDr2Ar1B         [17] 5711 	call	_RandomIndex
      001B56 C1               [10] 5712 	pop	bc
      001B57 26 00            [ 7] 5713 	ld	h, #0x00
      001B59 09               [11] 5714 	add	hl, bc
      001B5A 7E               [ 7] 5715 	ld	a, (hl)
      001B5B 32r92r00         [13] 5716 	ld	(_bottomPiece+0), a
                                   5717 ;src\/GameLogic.h:17: }
      001B5E C9               [10] 5718 	ret
                                   5719 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5720 ;	---------------------------------
                                   5721 ; Function UpdateAndDrawPieceStatic
                                   5722 ; ---------------------------------
      001B5F                       5723 _UpdateAndDrawPieceStatic::
                                   5724 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001B5F 01r00r00         [10] 5725 	ld	bc, #_playfield+0
      001B62 ED 5Br01r00      [20] 5726 	ld	de, (_col)
      001B66 16 00            [ 7] 5727 	ld	d, #0x00
      001B68 6B               [ 4] 5728 	ld	l, e
      001B69 62               [ 4] 5729 	ld	h, d
      001B6A 29               [11] 5730 	add	hl, hl
      001B6B 19               [11] 5731 	add	hl, de
      001B6C 29               [11] 5732 	add	hl, hl
      001B6D 29               [11] 5733 	add	hl, hl
      001B6E 09               [11] 5734 	add	hl, bc
      001B6F EB               [ 4] 5735 	ex	de, hl
      001B70 3Ar02r00         [13] 5736 	ld	a, (#_line + 0)
      001B73 6F               [ 4] 5737 	ld	l, a
      001B74 26 00            [ 7] 5738 	ld	h, #0x00
      001B76 19               [11] 5739 	add	hl, de
      001B77 3Ar90r00         [13] 5740 	ld	a,(#_topPiece + 0)
      001B7A 77               [ 7] 5741 	ld	(hl), a
                                   5742 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001B7B ED 5Br01r00      [20] 5743 	ld	de, (_col)
      001B7F 16 00            [ 7] 5744 	ld	d, #0x00
      001B81 6B               [ 4] 5745 	ld	l, e
      001B82 62               [ 4] 5746 	ld	h, d
      001B83 29               [11] 5747 	add	hl, hl
      001B84 19               [11] 5748 	add	hl, de
      001B85 29               [11] 5749 	add	hl, hl
      001B86 29               [11] 5750 	add	hl, hl
      001B87 09               [11] 5751 	add	hl, bc
      001B88 EB               [ 4] 5752 	ex	de, hl
      001B89 3Ar02r00         [13] 5753 	ld	a, (#_line + 0)
      001B8C 6F               [ 4] 5754 	ld	l, a
      001B8D 2C               [ 4] 5755 	inc	l
      001B8E 26 00            [ 7] 5756 	ld	h, #0x00
      001B90 19               [11] 5757 	add	hl, de
      001B91 3Ar91r00         [13] 5758 	ld	a,(#_midPiece + 0)
      001B94 77               [ 7] 5759 	ld	(hl), a
                                   5760 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001B95 ED 5Br01r00      [20] 5761 	ld	de, (_col)
      001B99 16 00            [ 7] 5762 	ld	d, #0x00
      001B9B 6B               [ 4] 5763 	ld	l, e
      001B9C 62               [ 4] 5764 	ld	h, d
      001B9D 29               [11] 5765 	add	hl, hl
      001B9E 19               [11] 5766 	add	hl, de
      001B9F 29               [11] 5767 	add	hl, hl
      001BA0 29               [11] 5768 	add	hl, hl
      001BA1 09               [11] 5769 	add	hl, bc
      001BA2 EB               [ 4] 5770 	ex	de, hl
      001BA3 3Ar02r00         [13] 5771 	ld	a, (#_line + 0)
      001BA6 6F               [ 4] 5772 	ld	l, a
      001BA7 2C               [ 4] 5773 	inc	l
      001BA8 2C               [ 4] 5774 	inc	l
      001BA9 26 00            [ 7] 5775 	ld	h, #0x00
      001BAB 19               [11] 5776 	add	hl, de
      001BAC 3Ar92r00         [13] 5777 	ld	a,(#_bottomPiece + 0)
      001BAF 77               [ 7] 5778 	ld	(hl), a
                                   5779 ;src\/GameLogic.h:25: DrawPiece(line);
      001BB0 C5               [11] 5780 	push	bc
      001BB1 3Ar02r00         [13] 5781 	ld	a,(#_line + 0)
      001BB4 F5               [11] 5782 	push	af
      001BB5 33               [ 6] 5783 	inc	sp
      001BB6 CDr2Ar12         [17] 5784 	call	_DrawPiece
      001BB9 33               [ 6] 5785 	inc	sp
      001BBA C1               [10] 5786 	pop	bc
                                   5787 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001BBB 3E 02            [ 7] 5788 	ld	a, #0x02
      001BBD 32r01r00         [13] 5789 	ld	(#_col), a
                                   5790 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   5791 ;src\/GameLogic.h:31: counter = 0;
      001BC0 3E 00            [ 7] 5792 	ld	a,#0x00
      001BC2 32r02r00         [13] 5793 	ld	(#_line),a
      001BC5 32r03r00         [13] 5794 	ld	(#_counter), a
                                   5795 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001BC8 3Ar18r00         [13] 5796 	ld	a, (#_playfield + 24)
      001BCB B7               [ 4] 5797 	or	a, a
      001BCC 20 0C            [12] 5798 	jr	NZ, 00101$
                                   5799 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001BCE 3Ar19r00         [13] 5800 	ld	a, (#_playfield + 25)
      001BD1 B7               [ 4] 5801 	or	a, a
      001BD2 20 06            [12] 5802 	jr	NZ, 00101$
                                   5803 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001BD4 3Ar1Ar00         [13] 5804 	ld	a, (#_playfield + 26)
      001BD7 B7               [ 4] 5805 	or	a, a
      001BD8 28 0B            [12] 5806 	jr	Z, 00102$
      001BDA                       5807 00101$:
                                   5808 ;src\/GameLogic.h:37: gameOver = TRUE;
      001BDA FD 21r00r00      [14] 5809 	ld	iy, #_gameOver
      001BDE FD 36 00 01      [19] 5810 	ld	0 (iy), #0x01
      001BE2 C3r4Dr12         [10] 5811 	jp	_DrawPlayfield
      001BE5                       5812 00102$:
                                   5813 ;src\/GameLogic.h:40: RandomPiece();
      001BE5 CDr37r1B         [17] 5814 	call	_RandomPiece
                                   5815 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001BE8 3E 01            [ 7] 5816 	ld	a, #0x01
      001BEA F5               [11] 5817 	push	af
      001BEB 33               [ 6] 5818 	inc	sp
      001BEC CDr72r13         [17] 5819 	call	_CheckPlayfield
      001BEF 33               [ 6] 5820 	inc	sp
                                   5821 ;src\/GameLogic.h:45: DrawPlayfield();
                                   5822 ;src\/GameLogic.h:46: }
      001BF0 C3r4Dr12         [10] 5823 	jp	_DrawPlayfield
                                   5824 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   5825 ;	---------------------------------
                                   5826 ; Function BlinkPauseText
                                   5827 ; ---------------------------------
      001BF3                       5828 _BlinkPauseText::
                                   5829 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001BF3 2A 9E FC         [16] 5830 	ld	hl, (_JIFFY)
      001BF6 CB 5D            [ 8] 5831 	bit	3, l
      001BF8 28 0E            [12] 5832 	jr	Z, 00102$
                                   5833 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001BFA 11 0D 0C         [10] 5834 	ld	de, #0x0c0d
      001BFD D5               [11] 5835 	push	de
      001BFE 21r11r1C         [10] 5836 	ld	hl, #___str_4
      001C01 E5               [11] 5837 	push	hl
      001C02 CDrC8r07         [17] 5838 	call	_DrawString
      001C05 F1               [10] 5839 	pop	af
      001C06 F1               [10] 5840 	pop	af
      001C07 C9               [10] 5841 	ret
      001C08                       5842 00102$:
                                   5843 ;src\/GameLogic.h:55: DrawLine(6);
      001C08 3E 06            [ 7] 5844 	ld	a, #0x06
      001C0A F5               [11] 5845 	push	af
      001C0B 33               [ 6] 5846 	inc	sp
      001C0C CDrF2r11         [17] 5847 	call	_DrawLine
      001C0F 33               [ 6] 5848 	inc	sp
                                   5849 ;src\/GameLogic.h:58: }
      001C10 C9               [10] 5850 	ret
      001C11                       5851 ___str_4:
      001C11 50 41 55 53 45        5852 	.ascii "PAUSE"
      001C16 00                    5853 	.db 0x00
                                   5854 ;src\/GameLogic.h:60: void Pause() {
                                   5855 ;	---------------------------------
                                   5856 ; Function Pause
                                   5857 ; ---------------------------------
      001C17                       5858 _Pause::
                                   5859 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001C17 11 0D 0C         [10] 5860 	ld	de, #0x0c0d
      001C1A D5               [11] 5861 	push	de
      001C1B 21r51r1C         [10] 5862 	ld	hl, #___str_5
      001C1E E5               [11] 5863 	push	hl
      001C1F CDrC8r07         [17] 5864 	call	_DrawString
      001C22 F1               [10] 5865 	pop	af
      001C23 F1               [10] 5866 	pop	af
                                   5867 ;src\/GameLogic.h:65: while(TRUE) {
      001C24                       5868 00114$:
                                   5869 ;src\/GameLogic.h:67: BlinkPauseText();
      001C24 CDrF3r1B         [17] 5870 	call	_BlinkPauseText
                                   5871 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001C27 2E 07            [ 7] 5872 	ld	l, #0x07
      001C29 CDr00r00         [17] 5873 	call	_SNSMAT
                                   5874 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001C2C CB 55            [ 8] 5875 	bit	2, l
      001C2E 28 F4            [12] 5876 	jr	Z, 00114$
                                   5877 ;src\/GameLogic.h:73: while(TRUE) {
      001C30                       5878 00109$:
                                   5879 ;src\/GameLogic.h:75: BlinkPauseText();
      001C30 CDrF3r1B         [17] 5880 	call	_BlinkPauseText
                                   5881 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001C33 2E 07            [ 7] 5882 	ld	l, #0x07
      001C35 CDr00r00         [17] 5883 	call	_SNSMAT
                                   5884 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001C38 CB 55            [ 8] 5885 	bit	2, l
      001C3A 20 F4            [12] 5886 	jr	NZ, 00109$
                                   5887 ;src\/GameLogic.h:81: while(TRUE) {
      001C3C                       5888 00104$:
                                   5889 ;src\/GameLogic.h:83: BlinkPauseText();
      001C3C CDrF3r1B         [17] 5890 	call	_BlinkPauseText
                                   5891 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001C3F 2E 07            [ 7] 5892 	ld	l, #0x07
      001C41 CDr00r00         [17] 5893 	call	_SNSMAT
                                   5894 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001C44 CB 55            [ 8] 5895 	bit	2, l
      001C46 28 F4            [12] 5896 	jr	Z, 00104$
                                   5897 ;src\/GameLogic.h:89: DrawLine(6);
      001C48 3E 06            [ 7] 5898 	ld	a, #0x06
      001C4A F5               [11] 5899 	push	af
      001C4B 33               [ 6] 5900 	inc	sp
      001C4C CDrF2r11         [17] 5901 	call	_DrawLine
      001C4F 33               [ 6] 5902 	inc	sp
                                   5903 ;src\/GameLogic.h:90: return;
                                   5904 ;src\/GameLogic.h:100: }
      001C50 C9               [10] 5905 	ret
      001C51                       5906 ___str_5:
      001C51 50 41 55 53 45        5907 	.ascii "PAUSE"
      001C56 00                    5908 	.db 0x00
                                   5909 ;src\/GameLogic.h:102: void GameLoop() {
                                   5910 ;	---------------------------------
                                   5911 ; Function GameLoop
                                   5912 ; ---------------------------------
      001C57                       5913 _GameLoop::
      001C57 DD E5            [15] 5914 	push	ix
      001C59 DD 21 00 00      [14] 5915 	ld	ix,#0
      001C5D DD 39            [15] 5916 	add	ix,sp
      001C5F 21 F3 FF         [10] 5917 	ld	hl, #-13
      001C62 39               [11] 5918 	add	hl, sp
      001C63 F9               [ 6] 5919 	ld	sp, hl
                                   5920 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001C64 DD 36 FF 00      [19] 5921 	ld	-1 (ix), #0
      001C68 DD 36 F3 00      [19] 5922 	ld	-13 (ix), #0
                                   5923 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001C6C DD 36 F4 00      [19] 5924 	ld	-12 (ix), #0
      001C70 DD 36 F5 00      [19] 5925 	ld	-11 (ix), #0
                                   5926 ;src\/GameLogic.h:109: while(!gameOver) {
      001C74                       5927 00150$:
      001C74 3Ar00r00         [13] 5928 	ld	a,(#_gameOver + 0)
      001C77 B7               [ 4] 5929 	or	a, a
      001C78 C2r0Fr20         [10] 5930 	jp	NZ, 00152$
                                   5931 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001C7B ED 4B 9E FC      [20] 5932 	ld	bc, (_JIFFY)
                                   5933 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001C7F                       5934 00101$:
      001C7F 2A 9E FC         [16] 5935 	ld	hl, (_JIFFY)
      001C82 BF               [ 4] 5936 	cp	a, a
      001C83 ED 42            [15] 5937 	sbc	hl, bc
      001C85 28 F8            [12] 5938 	jr	Z, 00101$
                                   5939 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001C87 ED 4Br01r00      [20] 5940 	ld	bc, (_col)
      001C8B 06 00            [ 7] 5941 	ld	b, #0x00
      001C8D 69               [ 4] 5942 	ld	l, c
      001C8E 60               [ 4] 5943 	ld	h, b
      001C8F 29               [11] 5944 	add	hl, hl
      001C90 09               [11] 5945 	add	hl, bc
      001C91 29               [11] 5946 	add	hl, hl
      001C92 29               [11] 5947 	add	hl, hl
      001C93 EB               [ 4] 5948 	ex	de, hl
      001C94 21r00r00         [10] 5949 	ld	hl, #_playfield
      001C97 19               [11] 5950 	add	hl, de
      001C98 EB               [ 4] 5951 	ex	de, hl
      001C99 FD 21r02r00      [14] 5952 	ld	iy, #_line
      001C9D FD 6E 00         [19] 5953 	ld	l, 0 (iy)
      001CA0 26 00            [ 7] 5954 	ld	h, #0x00
      001CA2 19               [11] 5955 	add	hl, de
      001CA3 36 00            [10] 5956 	ld	(hl), #0x00
                                   5957 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001CA5 ED 4Br01r00      [20] 5958 	ld	bc, (_col)
      001CA9 06 00            [ 7] 5959 	ld	b, #0x00
      001CAB 69               [ 4] 5960 	ld	l, c
      001CAC 60               [ 4] 5961 	ld	h, b
      001CAD 29               [11] 5962 	add	hl, hl
      001CAE 09               [11] 5963 	add	hl, bc
      001CAF 29               [11] 5964 	add	hl, hl
      001CB0 29               [11] 5965 	add	hl, hl
      001CB1 EB               [ 4] 5966 	ex	de, hl
      001CB2 21r00r00         [10] 5967 	ld	hl, #_playfield
      001CB5 19               [11] 5968 	add	hl, de
      001CB6 EB               [ 4] 5969 	ex	de, hl
      001CB7 FD 6E 00         [19] 5970 	ld	l, 0 (iy)
      001CBA 2C               [ 4] 5971 	inc	l
      001CBB 26 00            [ 7] 5972 	ld	h, #0x00
      001CBD 19               [11] 5973 	add	hl, de
      001CBE 36 00            [10] 5974 	ld	(hl), #0x00
                                   5975 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001CC0 ED 4Br01r00      [20] 5976 	ld	bc, (_col)
      001CC4 06 00            [ 7] 5977 	ld	b, #0x00
      001CC6 69               [ 4] 5978 	ld	l, c
      001CC7 60               [ 4] 5979 	ld	h, b
      001CC8 29               [11] 5980 	add	hl, hl
      001CC9 09               [11] 5981 	add	hl, bc
      001CCA 29               [11] 5982 	add	hl, hl
      001CCB 29               [11] 5983 	add	hl, hl
      001CCC EB               [ 4] 5984 	ex	de, hl
      001CCD 21r00r00         [10] 5985 	ld	hl, #_playfield
      001CD0 19               [11] 5986 	add	hl, de
      001CD1 EB               [ 4] 5987 	ex	de, hl
      001CD2 FD 6E 00         [19] 5988 	ld	l, 0 (iy)
      001CD5 2C               [ 4] 5989 	inc	l
      001CD6 2C               [ 4] 5990 	inc	l
      001CD7 26 00            [ 7] 5991 	ld	h, #0x00
      001CD9 19               [11] 5992 	add	hl, de
      001CDA 36 00            [10] 5993 	ld	(hl), #0x00
                                   5994 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001CDC 2E 01            [ 7] 5995 	ld	l, #0x01
      001CDE CDr00r00         [17] 5996 	call	_GTSTCK
      001CE1 DD 75 F6         [19] 5997 	ld	-10 (ix), l
                                   5998 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001CE4 2E 01            [ 7] 5999 	ld	l, #0x01
      001CE6 CDr00r00         [17] 6000 	call	_GTTRIG
      001CE9 DD 75 F7         [19] 6001 	ld	-9 (ix), l
                                   6002 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001CEC 2E 03            [ 7] 6003 	ld	l, #0x03
      001CEE CDr00r00         [17] 6004 	call	_GTTRIG
      001CF1 DD 75 F8         [19] 6005 	ld	-8 (ix), l
                                   6006 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001CF4 DD 7E F6         [19] 6007 	ld	a, -10 (ix)
                                   6008 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001CF7 B7               [ 4] 6009 	or	a,a
      001CF8 20 07            [12] 6010 	jr	NZ, 00105$
      001CFA 6F               [ 4] 6011 	ld	l,a
      001CFB CDr00r00         [17] 6012 	call	_GTSTCK
      001CFE DD 75 F6         [19] 6013 	ld	-10 (ix), l
      001D01                       6014 00105$:
                                   6015 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001D01 FD 21r02r00      [14] 6016 	ld	iy, #_line
      001D05 FD 7E 00         [19] 6017 	ld	a, 0 (iy)
      001D08 DD 77 F9         [19] 6018 	ld	-7 (ix), a
                                   6019 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001D0B DD 7E FF         [19] 6020 	ld	a, -1 (ix)
      001D0E B7               [ 4] 6021 	or	a, a
      001D0F C2rF8r1D         [10] 6022 	jp	NZ, 00118$
                                   6023 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001D12 FD 7E 00         [19] 6024 	ld	a, 0 (iy)
      001D15 DD 77 FF         [19] 6025 	ld	-1 (ix), a
                                   6026 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001D18 FD 21r01r00      [14] 6027 	ld	iy, #_col
      001D1C FD 7E 00         [19] 6028 	ld	a, 0 (iy)
      001D1F DD 77 FA         [19] 6029 	ld	-6 (ix), a
                                   6030 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001D22 DD 7E FF         [19] 6031 	ld	a, -1 (ix)
      001D25 C6 02            [ 7] 6032 	add	a, #0x02
      001D27 DD 77 FB         [19] 6033 	ld	-5 (ix), a
                                   6034 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001D2A DD 7E F6         [19] 6035 	ld	a, -10 (ix)
      001D2D D6 07            [ 7] 6036 	sub	a, #0x07
      001D2F 20 5F            [12] 6037 	jr	NZ, 00112$
                                   6038 ;src\/GameLogic.h:139: col > 0 && 
      001D31 FD 7E 00         [19] 6039 	ld	a, 0 (iy)
      001D34 B7               [ 4] 6040 	or	a, a
      001D35 28 59            [12] 6041 	jr	Z, 00112$
                                   6042 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001D37 DD 7E FA         [19] 6043 	ld	a, -6 (ix)
      001D3A C6 FF            [ 7] 6044 	add	a, #0xff
      001D3C DD 77 FF         [19] 6045 	ld	-1 (ix), a
      001D3F 4F               [ 4] 6046 	ld	c, a
      001D40 07               [ 4] 6047 	rlca
      001D41 9F               [ 4] 6048 	sbc	a, a
      001D42 47               [ 4] 6049 	ld	b, a
      001D43 69               [ 4] 6050 	ld	l, c
      001D44 60               [ 4] 6051 	ld	h, b
      001D45 29               [11] 6052 	add	hl, hl
      001D46 09               [11] 6053 	add	hl, bc
      001D47 29               [11] 6054 	add	hl, hl
      001D48 29               [11] 6055 	add	hl, hl
      001D49 DD 75 FE         [19] 6056 	ld	-2 (ix), l
      001D4C DD 74 FF         [19] 6057 	ld	-1 (ix), h
      001D4F 3Er00            [ 7] 6058 	ld	a, #<(_playfield)
      001D51 DD 86 FE         [19] 6059 	add	a, -2 (ix)
      001D54 DD 77 FC         [19] 6060 	ld	-4 (ix), a
      001D57 3Es00            [ 7] 6061 	ld	a, #>(_playfield)
      001D59 DD 8E FF         [19] 6062 	adc	a, -1 (ix)
      001D5C DD 77 FD         [19] 6063 	ld	-3 (ix), a
      001D5F DD 7E FC         [19] 6064 	ld	a, -4 (ix)
      001D62 DD 86 F9         [19] 6065 	add	a, -7 (ix)
      001D65 DD 77 FE         [19] 6066 	ld	-2 (ix), a
      001D68 DD 7E FD         [19] 6067 	ld	a, -3 (ix)
      001D6B CE 00            [ 7] 6068 	adc	a, #0x00
      001D6D DD 77 FF         [19] 6069 	ld	-1 (ix), a
      001D70 DD 6E FE         [19] 6070 	ld	l, -2 (ix)
      001D73 DD 66 FF         [19] 6071 	ld	h, -1 (ix)
      001D76 7E               [ 7] 6072 	ld	a, (hl)
      001D77 B7               [ 4] 6073 	or	a, a
      001D78 20 16            [12] 6074 	jr	NZ, 00112$
                                   6075 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001D7A DD 7E FC         [19] 6076 	ld	a, -4 (ix)
      001D7D DD 86 FB         [19] 6077 	add	a, -5 (ix)
      001D80 4F               [ 4] 6078 	ld	c, a
      001D81 DD 7E FD         [19] 6079 	ld	a, -3 (ix)
      001D84 CE 00            [ 7] 6080 	adc	a, #0x00
      001D86 47               [ 4] 6081 	ld	b, a
      001D87 0A               [ 7] 6082 	ld	a, (bc)
      001D88 B7               [ 4] 6083 	or	a, a
      001D89 20 05            [12] 6084 	jr	NZ, 00112$
                                   6085 ;src\/GameLogic.h:142: col--;
      001D8B FD 35 00         [23] 6086 	dec	0 (iy)
      001D8E 18 68            [12] 6087 	jr	00118$
      001D90                       6088 00112$:
                                   6089 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001D90 DD 7E F6         [19] 6090 	ld	a, -10 (ix)
      001D93 D6 03            [ 7] 6091 	sub	a, #0x03
      001D95 20 61            [12] 6092 	jr	NZ, 00118$
                                   6093 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001D97 FD 21r01r00      [14] 6094 	ld	iy, #_col
      001D9B FD 7E 00         [19] 6095 	ld	a, 0 (iy)
      001D9E D6 05            [ 7] 6096 	sub	a, #0x05
      001DA0 30 56            [12] 6097 	jr	NC, 00118$
                                   6098 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001DA2 DD 7E FA         [19] 6099 	ld	a, -6 (ix)
      001DA5 3C               [ 4] 6100 	inc	a
      001DA6 DD 77 FF         [19] 6101 	ld	-1 (ix), a
      001DA9 4F               [ 4] 6102 	ld	c, a
      001DAA 07               [ 4] 6103 	rlca
      001DAB 9F               [ 4] 6104 	sbc	a, a
      001DAC 47               [ 4] 6105 	ld	b, a
      001DAD 69               [ 4] 6106 	ld	l, c
      001DAE 60               [ 4] 6107 	ld	h, b
      001DAF 29               [11] 6108 	add	hl, hl
      001DB0 09               [11] 6109 	add	hl, bc
      001DB1 29               [11] 6110 	add	hl, hl
      001DB2 29               [11] 6111 	add	hl, hl
      001DB3 DD 75 FE         [19] 6112 	ld	-2 (ix), l
      001DB6 DD 74 FF         [19] 6113 	ld	-1 (ix), h
      001DB9 3Er00            [ 7] 6114 	ld	a, #<(_playfield)
      001DBB DD 86 FE         [19] 6115 	add	a, -2 (ix)
      001DBE DD 77 FC         [19] 6116 	ld	-4 (ix), a
      001DC1 3Es00            [ 7] 6117 	ld	a, #>(_playfield)
      001DC3 DD 8E FF         [19] 6118 	adc	a, -1 (ix)
      001DC6 DD 77 FD         [19] 6119 	ld	-3 (ix), a
      001DC9 DD 7E FC         [19] 6120 	ld	a, -4 (ix)
      001DCC DD 86 F9         [19] 6121 	add	a, -7 (ix)
      001DCF DD 77 FE         [19] 6122 	ld	-2 (ix), a
      001DD2 DD 7E FD         [19] 6123 	ld	a, -3 (ix)
      001DD5 CE 00            [ 7] 6124 	adc	a, #0x00
      001DD7 DD 77 FF         [19] 6125 	ld	-1 (ix), a
      001DDA DD 6E FE         [19] 6126 	ld	l, -2 (ix)
      001DDD DD 66 FF         [19] 6127 	ld	h, -1 (ix)
      001DE0 7E               [ 7] 6128 	ld	a, (hl)
      001DE1 B7               [ 4] 6129 	or	a, a
      001DE2 20 14            [12] 6130 	jr	NZ, 00118$
                                   6131 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001DE4 DD 7E FC         [19] 6132 	ld	a, -4 (ix)
      001DE7 DD 86 FB         [19] 6133 	add	a, -5 (ix)
      001DEA 4F               [ 4] 6134 	ld	c, a
      001DEB DD 7E FD         [19] 6135 	ld	a, -3 (ix)
      001DEE CE 00            [ 7] 6136 	adc	a, #0x00
      001DF0 47               [ 4] 6137 	ld	b, a
      001DF1 0A               [ 7] 6138 	ld	a, (bc)
      001DF2 B7               [ 4] 6139 	or	a, a
      001DF3 20 03            [12] 6140 	jr	NZ, 00118$
                                   6141 ;src\/GameLogic.h:148: col++;
      001DF5 FD 34 00         [23] 6142 	inc	0 (iy)
      001DF8                       6143 00118$:
                                   6144 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001DF8 DD 7E F3         [19] 6145 	ld	a, -13 (ix)
      001DFB B7               [ 4] 6146 	or	a, a
      001DFC C2rBEr1E         [10] 6147 	jp	NZ, 00132$
                                   6148 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001DFF DD 7E F6         [19] 6149 	ld	a, -10 (ix)
      001E02 3D               [ 4] 6150 	dec	a
      001E03 28 18            [12] 6151 	jr	Z, 00119$
      001E05 DD 7E F4         [19] 6152 	ld	a, -12 (ix)
      001E08 B7               [ 4] 6153 	or	a, a
      001E09 20 06            [12] 6154 	jr	NZ, 00124$
      001E0B DD 7E F7         [19] 6155 	ld	a, -9 (ix)
      001E0E 3C               [ 4] 6156 	inc	a
      001E0F 28 0C            [12] 6157 	jr	Z, 00119$
      001E11                       6158 00124$:
      001E11 DD 7E F5         [19] 6159 	ld	a, -11 (ix)
      001E14 B7               [ 4] 6160 	or	a, a
      001E15 20 1A            [12] 6161 	jr	NZ, 00120$
      001E17 DD 7E F8         [19] 6162 	ld	a, -8 (ix)
      001E1A 3C               [ 4] 6163 	inc	a
      001E1B 20 14            [12] 6164 	jr	NZ, 00120$
      001E1D                       6165 00119$:
                                   6166 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001E1D 3Ar92r00         [13] 6167 	ld	a, (#_bottomPiece + 0)
      001E20 4F               [ 4] 6168 	ld	c, a
                                   6169 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001E21 3Ar91r00         [13] 6170 	ld	a,(#_midPiece + 0)
      001E24 32r92r00         [13] 6171 	ld	(#_bottomPiece),a
                                   6172 ;src\/GameLogic.h:160: midPiece = topPiece;
      001E27 3Ar90r00         [13] 6173 	ld	a,(#_topPiece + 0)
      001E2A 32r91r00         [13] 6174 	ld	(#_midPiece),a
                                   6175 ;src\/GameLogic.h:161: topPiece = temp;
      001E2D 21r90r00         [10] 6176 	ld	hl, #_topPiece
      001E30 71               [ 7] 6177 	ld	(hl), c
      001E31                       6178 00120$:
                                   6179 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001E31 DD 7E F6         [19] 6180 	ld	a, -10 (ix)
      001E34 D6 05            [ 7] 6181 	sub	a, #0x05
      001E36 C2rBEr1E         [10] 6182 	jp	NZ,00132$
                                   6183 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001E39 DD 7E F9         [19] 6184 	ld	a, -7 (ix)
      001E3C DD 77 FE         [19] 6185 	ld	-2 (ix), a
      001E3F DD 7E F9         [19] 6186 	ld	a, -7 (ix)
      001E42 DD 77 FF         [19] 6187 	ld	-1 (ix), a
      001E45                       6188 00154$:
      001E45 DD 7E FF         [19] 6189 	ld	a, -1 (ix)
      001E48 D6 0C            [ 7] 6190 	sub	a, #0x0c
      001E4A 30 72            [12] 6191 	jr	NC, 00132$
                                   6192 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001E4C DD 7E FF         [19] 6193 	ld	a, -1 (ix)
      001E4F D6 09            [ 7] 6194 	sub	a, #0x09
      001E51 28 4C            [12] 6195 	jr	Z, 00125$
      001E53 ED 4Br01r00      [20] 6196 	ld	bc, (_col)
      001E57 06 00            [ 7] 6197 	ld	b, #0x00
      001E59 69               [ 4] 6198 	ld	l, c
      001E5A 60               [ 4] 6199 	ld	h, b
      001E5B 29               [11] 6200 	add	hl, hl
      001E5C 09               [11] 6201 	add	hl, bc
      001E5D 29               [11] 6202 	add	hl, hl
      001E5E 29               [11] 6203 	add	hl, hl
      001E5F DD 75 FC         [19] 6204 	ld	-4 (ix), l
      001E62 DD 74 FD         [19] 6205 	ld	-3 (ix), h
      001E65 3Er00            [ 7] 6206 	ld	a, #<(_playfield)
      001E67 DD 86 FC         [19] 6207 	add	a, -4 (ix)
      001E6A DD 77 FA         [19] 6208 	ld	-6 (ix), a
      001E6D 3Es00            [ 7] 6209 	ld	a, #>(_playfield)
      001E6F DD 8E FD         [19] 6210 	adc	a, -3 (ix)
      001E72 DD 77 FB         [19] 6211 	ld	-5 (ix), a
      001E75 DD 7E FF         [19] 6212 	ld	a, -1 (ix)
      001E78 DD 77 FD         [19] 6213 	ld	-3 (ix), a
      001E7B DD 34 FD         [23] 6214 	inc	-3 (ix)
      001E7E DD 34 FD         [23] 6215 	inc	-3 (ix)
      001E81 DD 34 FD         [23] 6216 	inc	-3 (ix)
      001E84 DD 7E FD         [19] 6217 	ld	a, -3 (ix)
      001E87 DD 86 FA         [19] 6218 	add	a, -6 (ix)
      001E8A DD 77 FC         [19] 6219 	ld	-4 (ix), a
      001E8D 3E 00            [ 7] 6220 	ld	a, #0x00
      001E8F DD 8E FB         [19] 6221 	adc	a, -5 (ix)
      001E92 DD 77 FD         [19] 6222 	ld	-3 (ix), a
      001E95 DD 6E FC         [19] 6223 	ld	l, -4 (ix)
      001E98 DD 66 FD         [19] 6224 	ld	h, -3 (ix)
      001E9B 7E               [ 7] 6225 	ld	a, (hl)
      001E9C B7               [ 4] 6226 	or	a, a
      001E9D 28 14            [12] 6227 	jr	Z, 00155$
      001E9F                       6228 00125$:
                                   6229 ;src\/GameLogic.h:170: DrawPiece(line);
      001E9F 3Ar02r00         [13] 6230 	ld	a,(#_line + 0)
      001EA2 F5               [11] 6231 	push	af
      001EA3 33               [ 6] 6232 	inc	sp
      001EA4 CDr2Ar12         [17] 6233 	call	_DrawPiece
      001EA7 33               [ 6] 6234 	inc	sp
                                   6235 ;src\/GameLogic.h:172: line = i;
      001EA8 DD 7E FE         [19] 6236 	ld	a, -2 (ix)
      001EAB 32r02r00         [13] 6237 	ld	(#_line),a
                                   6238 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001EAE CDr5Fr1B         [17] 6239 	call	_UpdateAndDrawPieceStatic
                                   6240 ;src\/GameLogic.h:175: break;
      001EB1 18 0B            [12] 6241 	jr	00132$
      001EB3                       6242 00155$:
                                   6243 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001EB3 DD 34 FF         [23] 6244 	inc	-1 (ix)
      001EB6 DD 7E FF         [19] 6245 	ld	a, -1 (ix)
      001EB9 DD 77 FE         [19] 6246 	ld	-2 (ix), a
      001EBC 18 87            [12] 6247 	jr	00154$
      001EBE                       6248 00132$:
                                   6249 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001EBE DD 7E F6         [19] 6250 	ld	a, -10 (ix)
      001EC1 DD 77 FF         [19] 6251 	ld	-1 (ix), a
                                   6252 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001EC4 DD 7E F6         [19] 6253 	ld	a, -10 (ix)
      001EC7 DD 77 F3         [19] 6254 	ld	-13 (ix), a
                                   6255 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      001ECA DD 7E F7         [19] 6256 	ld	a, -9 (ix)
      001ECD DD 77 F4         [19] 6257 	ld	-12 (ix), a
                                   6258 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      001ED0 DD 7E F8         [19] 6259 	ld	a, -8 (ix)
      001ED3 DD 77 F5         [19] 6260 	ld	-11 (ix), a
                                   6261 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      001ED6 2E 07            [ 7] 6262 	ld	l, #0x07
      001ED8 CDr00r00         [17] 6263 	call	_SNSMAT
                                   6264 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      001EDB CB 55            [ 8] 6265 	bit	2, l
      001EDD 20 03            [12] 6266 	jr	NZ, 00134$
                                   6267 ;src\/GameLogic.h:214: Pause();
      001EDF CDr17r1C         [17] 6268 	call	_Pause
      001EE2                       6269 00134$:
                                   6270 ;src\/GameLogic.h:219: counter++;
      001EE2 FD 21r03r00      [14] 6271 	ld	iy, #_counter
      001EE6 FD 34 00         [23] 6272 	inc	0 (iy)
                                   6273 ;src\/GameLogic.h:220: if(counter == speed) {
      001EE9 FD 7E 00         [19] 6274 	ld	a, 0 (iy)
      001EEC 21r93r00         [10] 6275 	ld	hl, #_speed
      001EEF 96               [ 7] 6276 	sub	a, (hl)
      001EF0 20 3F            [12] 6277 	jr	NZ, 00139$
                                   6278 ;src\/GameLogic.h:222: counter = 0;
      001EF2 21r03r00         [10] 6279 	ld	hl, #_counter
      001EF5 36 00            [10] 6280 	ld	(hl), #0x00
                                   6281 ;src\/GameLogic.h:225: DrawPiece(line);
      001EF7 3Ar02r00         [13] 6282 	ld	a,(#_line + 0)
      001EFA F5               [11] 6283 	push	af
      001EFB 33               [ 6] 6284 	inc	sp
      001EFC CDr2Ar12         [17] 6285 	call	_DrawPiece
      001EFF 33               [ 6] 6286 	inc	sp
                                   6287 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      001F00 FD 21r02r00      [14] 6288 	ld	iy, #_line
      001F04 FD 7E 00         [19] 6289 	ld	a, 0 (iy)
      001F07 D6 09            [ 7] 6290 	sub	a, #0x09
      001F09 28 1F            [12] 6291 	jr	Z, 00135$
      001F0B ED 4Br01r00      [20] 6292 	ld	bc, (_col)
      001F0F 06 00            [ 7] 6293 	ld	b, #0x00
      001F11 69               [ 4] 6294 	ld	l, c
      001F12 60               [ 4] 6295 	ld	h, b
      001F13 29               [11] 6296 	add	hl, hl
      001F14 09               [11] 6297 	add	hl, bc
      001F15 29               [11] 6298 	add	hl, hl
      001F16 29               [11] 6299 	add	hl, hl
      001F17 EB               [ 4] 6300 	ex	de, hl
      001F18 21r00r00         [10] 6301 	ld	hl, #_playfield
      001F1B 19               [11] 6302 	add	hl, de
      001F1C EB               [ 4] 6303 	ex	de, hl
      001F1D FD 7E 00         [19] 6304 	ld	a, 0 (iy)
      001F20 C6 03            [ 7] 6305 	add	a, #0x03
      001F22 6F               [ 4] 6306 	ld	l, a
      001F23 26 00            [ 7] 6307 	ld	h, #0x00
      001F25 19               [11] 6308 	add	hl, de
      001F26 7E               [ 7] 6309 	ld	a, (hl)
      001F27 B7               [ 4] 6310 	or	a, a
      001F28 28 03            [12] 6311 	jr	Z, 00136$
      001F2A                       6312 00135$:
                                   6313 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      001F2A CDr5Fr1B         [17] 6314 	call	_UpdateAndDrawPieceStatic
      001F2D                       6315 00136$:
                                   6316 ;src\/GameLogic.h:234: line++;
      001F2D 21r02r00         [10] 6317 	ld	hl, #_line
      001F30 34               [11] 6318 	inc	(hl)
      001F31                       6319 00139$:
                                   6320 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      001F31 ED 4Br01r00      [20] 6321 	ld	bc, (_col)
      001F35 06 00            [ 7] 6322 	ld	b, #0x00
      001F37 69               [ 4] 6323 	ld	l, c
      001F38 60               [ 4] 6324 	ld	h, b
      001F39 29               [11] 6325 	add	hl, hl
      001F3A 09               [11] 6326 	add	hl, bc
      001F3B 29               [11] 6327 	add	hl, hl
      001F3C 29               [11] 6328 	add	hl, hl
      001F3D EB               [ 4] 6329 	ex	de, hl
      001F3E 21r00r00         [10] 6330 	ld	hl, #_playfield
      001F41 19               [11] 6331 	add	hl, de
      001F42 EB               [ 4] 6332 	ex	de, hl
      001F43 3Ar02r00         [13] 6333 	ld	a, (#_line + 0)
      001F46 6F               [ 4] 6334 	ld	l, a
      001F47 26 00            [ 7] 6335 	ld	h, #0x00
      001F49 19               [11] 6336 	add	hl, de
      001F4A 3Ar90r00         [13] 6337 	ld	a,(#_topPiece + 0)
      001F4D 77               [ 7] 6338 	ld	(hl), a
                                   6339 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      001F4E ED 4Br01r00      [20] 6340 	ld	bc, (_col)
      001F52 06 00            [ 7] 6341 	ld	b, #0x00
      001F54 69               [ 4] 6342 	ld	l, c
      001F55 60               [ 4] 6343 	ld	h, b
      001F56 29               [11] 6344 	add	hl, hl
      001F57 09               [11] 6345 	add	hl, bc
      001F58 29               [11] 6346 	add	hl, hl
      001F59 29               [11] 6347 	add	hl, hl
      001F5A EB               [ 4] 6348 	ex	de, hl
      001F5B 21r00r00         [10] 6349 	ld	hl, #_playfield
      001F5E 19               [11] 6350 	add	hl, de
      001F5F EB               [ 4] 6351 	ex	de, hl
      001F60 3Ar02r00         [13] 6352 	ld	a, (#_line + 0)
      001F63 6F               [ 4] 6353 	ld	l, a
      001F64 2C               [ 4] 6354 	inc	l
      001F65 26 00            [ 7] 6355 	ld	h, #0x00
      001F67 19               [11] 6356 	add	hl, de
      001F68 3Ar91r00         [13] 6357 	ld	a,(#_midPiece + 0)
      001F6B 77               [ 7] 6358 	ld	(hl), a
                                   6359 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      001F6C ED 4Br01r00      [20] 6360 	ld	bc, (_col)
      001F70 06 00            [ 7] 6361 	ld	b, #0x00
      001F72 69               [ 4] 6362 	ld	l, c
      001F73 60               [ 4] 6363 	ld	h, b
      001F74 29               [11] 6364 	add	hl, hl
      001F75 09               [11] 6365 	add	hl, bc
      001F76 29               [11] 6366 	add	hl, hl
      001F77 29               [11] 6367 	add	hl, hl
      001F78 EB               [ 4] 6368 	ex	de, hl
      001F79 21r00r00         [10] 6369 	ld	hl, #_playfield
      001F7C 19               [11] 6370 	add	hl, de
      001F7D EB               [ 4] 6371 	ex	de, hl
      001F7E 3Ar02r00         [13] 6372 	ld	a, (#_line + 0)
      001F81 6F               [ 4] 6373 	ld	l, a
      001F82 2C               [ 4] 6374 	inc	l
      001F83 2C               [ 4] 6375 	inc	l
      001F84 26 00            [ 7] 6376 	ld	h, #0x00
      001F86 19               [11] 6377 	add	hl, de
      001F87 3Ar92r00         [13] 6378 	ld	a,(#_bottomPiece + 0)
      001F8A 77               [ 7] 6379 	ld	(hl), a
                                   6380 ;src\/GameLogic.h:248: DrawPiece(line);
      001F8B 3Ar02r00         [13] 6381 	ld	a,(#_line + 0)
      001F8E F5               [11] 6382 	push	af
      001F8F 33               [ 6] 6383 	inc	sp
      001F90 CDr2Ar12         [17] 6384 	call	_DrawPiece
      001F93 33               [ 6] 6385 	inc	sp
                                   6386 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001F94 ED 4Br01r00      [20] 6387 	ld	bc, (_col)
      001F98 06 00            [ 7] 6388 	ld	b, #0x00
      001F9A 69               [ 4] 6389 	ld	l, c
      001F9B 60               [ 4] 6390 	ld	h, b
      001F9C 29               [11] 6391 	add	hl, hl
      001F9D 09               [11] 6392 	add	hl, bc
      001F9E 29               [11] 6393 	add	hl, hl
      001F9F 29               [11] 6394 	add	hl, hl
      001FA0 EB               [ 4] 6395 	ex	de, hl
                                   6396 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      001FA1 21r00r00         [10] 6397 	ld	hl, #_playfield
      001FA4 19               [11] 6398 	add	hl, de
      001FA5 EB               [ 4] 6399 	ex	de, hl
      001FA6 3Ar02r00         [13] 6400 	ld	a,(#_line + 0)
      001FA9 C6 03            [ 7] 6401 	add	a, #0x03
      001FAB 4F               [ 4] 6402 	ld	c, a
      001FAC 69               [ 4] 6403 	ld	l, c
      001FAD 26 00            [ 7] 6404 	ld	h, #0x00
      001FAF 19               [11] 6405 	add	hl, de
      001FB0 7E               [ 7] 6406 	ld	a, (hl)
      001FB1 B7               [ 4] 6407 	or	a, a
      001FB2 28 06            [12] 6408 	jr	Z, 00148$
                                   6409 ;src\/GameLogic.h:254: HideArrow();
      001FB4 CDrE9r0C         [17] 6410 	call	_HideArrow
      001FB7 C3r74r1C         [10] 6411 	jp	00150$
      001FBA                       6412 00148$:
                                   6413 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001FBA 41               [ 4] 6414 	ld	b, c
      001FBB                       6415 00157$:
      001FBB 78               [ 4] 6416 	ld	a, b
      001FBC D6 0C            [ 7] 6417 	sub	a, #0x0c
      001FBE D2r74r1C         [10] 6418 	jp	NC, 00150$
                                   6419 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001FC1 3Ar01r00         [13] 6420 	ld	a,(#_col + 0)
      001FC4 87               [ 4] 6421 	add	a, a
      001FC5 87               [ 4] 6422 	add	a, a
      001FC6 87               [ 4] 6423 	add	a, a
      001FC7 87               [ 4] 6424 	add	a, a
      001FC8 DD 77 FE         [19] 6425 	ld	-2 (ix), a
                                   6426 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001FCB 68               [ 4] 6427 	ld	l, b
      001FCC 26 00            [ 7] 6428 	ld	h, #0x00
      001FCE 19               [11] 6429 	add	hl, de
                                   6430 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001FCF DD 7E FE         [19] 6431 	ld	a, -2 (ix)
      001FD2 C6 50            [ 7] 6432 	add	a, #0x50
      001FD4 DD 77 FE         [19] 6433 	ld	-2 (ix), a
                                   6434 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001FD7 6E               [ 7] 6435 	ld	l, (hl)
      001FD8 78               [ 4] 6436 	ld	a, b
      001FD9 D6 0B            [ 7] 6437 	sub	a,#0x0b
      001FDB 20 16            [12] 6438 	jr	NZ, 00143$
      001FDD B5               [ 4] 6439 	or	a,l
      001FDE 20 13            [12] 6440 	jr	NZ, 00143$
                                   6441 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001FE0 79               [ 4] 6442 	ld	a, c
      001FE1 87               [ 4] 6443 	add	a, a
      001FE2 87               [ 4] 6444 	add	a, a
      001FE3 87               [ 4] 6445 	add	a, a
      001FE4 87               [ 4] 6446 	add	a, a
      001FE5 F5               [11] 6447 	push	af
      001FE6 33               [ 6] 6448 	inc	sp
      001FE7 DD 7E FE         [19] 6449 	ld	a, -2 (ix)
      001FEA F5               [11] 6450 	push	af
      001FEB 33               [ 6] 6451 	inc	sp
      001FEC CDr4Er0C         [17] 6452 	call	_DrawArrow
      001FEF F1               [10] 6453 	pop	af
                                   6454 ;src\/GameLogic.h:260: break;
      001FF0 C3r74r1C         [10] 6455 	jp	00150$
      001FF3                       6456 00143$:
                                   6457 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      001FF3 7D               [ 4] 6458 	ld	a, l
      001FF4 B7               [ 4] 6459 	or	a, a
      001FF5 28 14            [12] 6460 	jr	Z, 00158$
                                   6461 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      001FF7 79               [ 4] 6462 	ld	a, c
      001FF8 3D               [ 4] 6463 	dec	a
      001FF9 87               [ 4] 6464 	add	a, a
      001FFA 87               [ 4] 6465 	add	a, a
      001FFB 87               [ 4] 6466 	add	a, a
      001FFC 87               [ 4] 6467 	add	a, a
      001FFD F5               [11] 6468 	push	af
      001FFE 33               [ 6] 6469 	inc	sp
      001FFF DD 7E FE         [19] 6470 	ld	a, -2 (ix)
      002002 F5               [11] 6471 	push	af
      002003 33               [ 6] 6472 	inc	sp
      002004 CDr4Er0C         [17] 6473 	call	_DrawArrow
      002007 F1               [10] 6474 	pop	af
                                   6475 ;src\/GameLogic.h:264: break;
      002008 C3r74r1C         [10] 6476 	jp	00150$
      00200B                       6477 00158$:
                                   6478 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      00200B 04               [ 4] 6479 	inc	b
      00200C 48               [ 4] 6480 	ld	c, b
      00200D 18 AC            [12] 6481 	jr	00157$
      00200F                       6482 00152$:
                                   6483 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      00200F 11 0C 0C         [10] 6484 	ld	de, #0x0c0c
      002012 D5               [11] 6485 	push	de
      002013 21r27r20         [10] 6486 	ld	hl, #___str_6
      002016 E5               [11] 6487 	push	hl
      002017 CDrC8r07         [17] 6488 	call	_DrawString
      00201A F1               [10] 6489 	pop	af
                                   6490 ;src\/GameLogic.h:276: Wait(60 * 3);
      00201B 21 B4 00         [10] 6491 	ld	hl, #0x00b4
      00201E E3               [19] 6492 	ex	(sp),hl
      00201F CDr00r00         [17] 6493 	call	_Wait
                                   6494 ;src\/GameLogic.h:278: }
      002022 DD F9            [10] 6495 	ld	sp,ix
      002024 DD E1            [14] 6496 	pop	ix
      002026 C9               [10] 6497 	ret
      002027                       6498 ___str_6:
      002027 47 41 4D 45 20 4F 56  6499 	.ascii "GAME OVER"
             45 52
      002030 00                    6500 	.db 0x00
                                   6501 ;src\/GameLogic.h:280: void TestCase() {
                                   6502 ;	---------------------------------
                                   6503 ; Function TestCase
                                   6504 ; ---------------------------------
      002031                       6505 _TestCase::
                                   6506 ;src\/GameLogic.h:281: playfield[2][ 8] = TILE_GREEN;
      002031 21r20r00         [10] 6507 	ld	hl, #(_playfield + 0x0020)
      002034 36 04            [10] 6508 	ld	(hl), #0x04
                                   6509 ;src\/GameLogic.h:282: playfield[2][ 9] = TILE_BLUE;
      002036 21r21r00         [10] 6510 	ld	hl, #(_playfield + 0x0021)
      002039 36 0C            [10] 6511 	ld	(hl), #0x0c
                                   6512 ;src\/GameLogic.h:284: playfield[0][10] = TILE_BLUE;
      00203B 21r0Ar00         [10] 6513 	ld	hl, #(_playfield + 0x000a)
      00203E 36 0C            [10] 6514 	ld	(hl), #0x0c
                                   6515 ;src\/GameLogic.h:285: playfield[1][10] = TILE_BLUE;
      002040 21r16r00         [10] 6516 	ld	hl, #(_playfield + 0x0016)
      002043 36 0C            [10] 6517 	ld	(hl), #0x0c
                                   6518 ;src\/GameLogic.h:286: playfield[2][10] = TILE_RED;
      002045 21r22r00         [10] 6519 	ld	hl, #(_playfield + 0x0022)
      002048 36 08            [10] 6520 	ld	(hl), #0x08
                                   6521 ;src\/GameLogic.h:287: playfield[4][10] = TILE_RED;
      00204A 21r3Ar00         [10] 6522 	ld	hl, #(_playfield + 0x003a)
      00204D 36 08            [10] 6523 	ld	(hl), #0x08
                                   6524 ;src\/GameLogic.h:288: playfield[5][10] = TILE_BLUE;
      00204F 21r46r00         [10] 6525 	ld	hl, #(_playfield + 0x0046)
      002052 36 0C            [10] 6526 	ld	(hl), #0x0c
                                   6527 ;src\/GameLogic.h:290: playfield[0][11] = TILE_GREEN;
      002054 21r0Br00         [10] 6528 	ld	hl, #(_playfield + 0x000b)
      002057 36 04            [10] 6529 	ld	(hl), #0x04
                                   6530 ;src\/GameLogic.h:291: playfield[1][11] = TILE_GREEN;
      002059 21r17r00         [10] 6531 	ld	hl, #(_playfield + 0x0017)
      00205C 36 04            [10] 6532 	ld	(hl), #0x04
                                   6533 ;src\/GameLogic.h:292: playfield[2][11] = TILE_RED;
      00205E 21r23r00         [10] 6534 	ld	hl, #(_playfield + 0x0023)
      002061 36 08            [10] 6535 	ld	(hl), #0x08
                                   6536 ;src\/GameLogic.h:293: playfield[3][11] = TILE_BLUE;
      002063 21r2Fr00         [10] 6537 	ld	hl, #(_playfield + 0x002f)
      002066 36 0C            [10] 6538 	ld	(hl), #0x0c
                                   6539 ;src\/GameLogic.h:294: playfield[4][11] = TILE_RED;
      002068 21r3Br00         [10] 6540 	ld	hl, #(_playfield + 0x003b)
      00206B 36 08            [10] 6541 	ld	(hl), #0x08
                                   6542 ;src\/GameLogic.h:295: playfield[5][11] = TILE_RED;
      00206D 21r47r00         [10] 6543 	ld	hl, #(_playfield + 0x0047)
      002070 36 08            [10] 6544 	ld	(hl), #0x08
                                   6545 ;src\/GameLogic.h:297: topPiece = TILE_BLUE;
      002072 3E 0C            [ 7] 6546 	ld	a, #0x0c
      002074 32r90r00         [13] 6547 	ld	(#_topPiece), a
                                   6548 ;src\/GameLogic.h:298: midPiece = TILE_RED;
      002077 3E 08            [ 7] 6549 	ld	a, #0x08
      002079 32r91r00         [13] 6550 	ld	(#_midPiece), a
                                   6551 ;src\/GameLogic.h:299: bottomPiece = TILE_YELLOW;
      00207C 3E 14            [ 7] 6552 	ld	a, #0x14
      00207E 32r92r00         [13] 6553 	ld	(#_bottomPiece), a
                                   6554 ;src\/GameLogic.h:300: }
      002081 C9               [10] 6555 	ret
                                   6556 ;src\/GameLogic.h:302: void InitGame() {
                                   6557 ;	---------------------------------
                                   6558 ; Function InitGame
                                   6559 ; ---------------------------------
      002082                       6560 _InitGame::
                                   6561 ;src\/GameLogic.h:304: gameOver = FALSE;
      002082 21r00r00         [10] 6562 	ld	hl, #_gameOver
      002085 36 00            [10] 6563 	ld	(hl), #0x00
                                   6564 ;src\/GameLogic.h:305: line = INITIAL_LINE;
      002087 21r02r00         [10] 6565 	ld	hl, #_line
      00208A 36 00            [10] 6566 	ld	(hl), #0x00
                                   6567 ;src\/GameLogic.h:306: col = INITIAL_COL;
      00208C 21r01r00         [10] 6568 	ld	hl, #_col
      00208F 36 02            [10] 6569 	ld	(hl), #0x02
                                   6570 ;src\/GameLogic.h:307: blocksRemoved = 0;
      002091 21 00 00         [10] 6571 	ld	hl, #0x0000
      002094 22r04r00         [16] 6572 	ld	(_blocksRemoved), hl
                                   6573 ;src\/GameLogic.h:308: level = 1;
      002097 21r06r00         [10] 6574 	ld	hl, #_level
      00209A 36 01            [10] 6575 	ld	(hl), #0x01
                                   6576 ;src\/GameLogic.h:309: newLevel = FALSE;
      00209C 21r07r00         [10] 6577 	ld	hl, #_newLevel
      00209F 36 00            [10] 6578 	ld	(hl), #0x00
                                   6579 ;src\/GameLogic.h:310: speed = 60;
      0020A1 21r93r00         [10] 6580 	ld	hl, #_speed
      0020A4 36 3C            [10] 6581 	ld	(hl), #0x3c
                                   6582 ;src\/GameLogic.h:312: InitVRAM();
      0020A6 CDr89r0E         [17] 6583 	call	_InitVRAM
                                   6584 ;src\/GameLogic.h:315: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      0020A9 3Ar08r00         [13] 6585 	ld	a, (#_rndSeed + 0)
      0020AC 5F               [ 4] 6586 	ld	e, a
      0020AD 3A 9E FC         [13] 6587 	ld	a, (#_JIFFY + 0)
      0020B0 67               [ 4] 6588 	ld	h, a
      0020B1 2E 00            [ 7] 6589 	ld	l, #0x00
      0020B3 55               [ 4] 6590 	ld	d, l
      0020B4 06 08            [ 7] 6591 	ld	b, #0x08
      0020B6                       6592 00133$:
      0020B6 29               [11] 6593 	add	hl, hl
      0020B7 30 01            [12] 6594 	jr	NC, 00134$
      0020B9 19               [11] 6595 	add	hl, de
      0020BA                       6596 00134$:
      0020BA 10 FA            [13] 6597 	djnz	00133$
      0020BC 7D               [ 4] 6598 	ld	a, l
      0020BD C6 63            [ 7] 6599 	add	a, #0x63
      0020BF 4F               [ 4] 6600 	ld	c, a
      0020C0 3Ar08r00         [13] 6601 	ld	a, (#_rndSeed + 0)
      0020C3 5F               [ 4] 6602 	ld	e, a
      0020C4 3A 9E FC         [13] 6603 	ld	a, (#_JIFFY + 0)
      0020C7 67               [ 4] 6604 	ld	h, a
      0020C8 2E 00            [ 7] 6605 	ld	l, #0x00
      0020CA 55               [ 4] 6606 	ld	d, l
      0020CB 06 08            [ 7] 6607 	ld	b, #0x08
      0020CD                       6608 00135$:
      0020CD 29               [11] 6609 	add	hl, hl
      0020CE 30 01            [12] 6610 	jr	NC, 00136$
      0020D0 19               [11] 6611 	add	hl, de
      0020D1                       6612 00136$:
      0020D1 10 FA            [13] 6613 	djnz	00135$
      0020D3 79               [ 4] 6614 	ld	a, c
      0020D4 F5               [11] 6615 	push	af
      0020D5 7D               [ 4] 6616 	ld	a, l
      0020D6 33               [ 6] 6617 	inc	sp
      0020D7 F5               [11] 6618 	push	af
      0020D8 33               [ 6] 6619 	inc	sp
      0020D9 3Ar08r00         [13] 6620 	ld	a,(#_rndSeed + 0)
      0020DC F5               [11] 6621 	push	af
      0020DD 33               [ 6] 6622 	inc	sp
      0020DE CDr50r00         [17] 6623 	call	_InitRnd
      0020E1 F1               [10] 6624 	pop	af
      0020E2 33               [ 6] 6625 	inc	sp
                                   6626 ;src\/GameLogic.h:318: RandomPiece();
      0020E3 CDr37r1B         [17] 6627 	call	_RandomPiece
                                   6628 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020E6 0E 00            [ 7] 6629 	ld	c, #0x00
      0020E8                       6630 00107$:
      0020E8 79               [ 4] 6631 	ld	a, c
      0020E9 D6 0C            [ 7] 6632 	sub	a, #0x0c
      0020EB 30 20            [12] 6633 	jr	NC, 00102$
                                   6634 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020ED 06 00            [ 7] 6635 	ld	b, #0x00
      0020EF                       6636 00104$:
      0020EF 78               [ 4] 6637 	ld	a, b
      0020F0 D6 06            [ 7] 6638 	sub	a, #0x06
      0020F2 30 16            [12] 6639 	jr	NC, 00108$
                                   6640 ;src\/GameLogic.h:323: playfield[col][line] = EMPTY;
      0020F4 58               [ 4] 6641 	ld	e, b
      0020F5 16 00            [ 7] 6642 	ld	d, #0x00
      0020F7 6B               [ 4] 6643 	ld	l, e
      0020F8 62               [ 4] 6644 	ld	h, d
      0020F9 29               [11] 6645 	add	hl, hl
      0020FA 19               [11] 6646 	add	hl, de
      0020FB 29               [11] 6647 	add	hl, hl
      0020FC 29               [11] 6648 	add	hl, hl
      0020FD 11r00r00         [10] 6649 	ld	de, #_playfield
      002100 19               [11] 6650 	add	hl, de
      002101 59               [ 4] 6651 	ld	e, c
      002102 16 00            [ 7] 6652 	ld	d, #0x00
      002104 19               [11] 6653 	add	hl, de
      002105 36 00            [10] 6654 	ld	(hl), #0x00
                                   6655 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002107 04               [ 4] 6656 	inc	b
      002108 18 E5            [12] 6657 	jr	00104$
      00210A                       6658 00108$:
                                   6659 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00210A 0C               [ 4] 6660 	inc	c
      00210B 18 DB            [12] 6661 	jr	00107$
      00210D                       6662 00102$:
                                   6663 ;src\/GameLogic.h:328: TestCase();
      00210D CDr31r20         [17] 6664 	call	_TestCase
                                   6665 ;src\/GameLogic.h:330: DrawBackground();
      002110 CDr1Dr0C         [17] 6666 	call	_DrawBackground
                                   6667 ;src\/GameLogic.h:332: DrawPlayfield();
      002113 CDr4Dr12         [17] 6668 	call	_DrawPlayfield
                                   6669 ;src\/GameLogic.h:334: DrawScore();
      002116 CDr86r0A         [17] 6670 	call	_DrawScore
                                   6671 ;src\/GameLogic.h:336: GameLoop();
                                   6672 ;src\/GameLogic.h:337: }
      002119 C3r57r1C         [10] 6673 	jp	_GameLoop
                                   6674 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6675 ;	---------------------------------
                                   6676 ; Function ChangeFontColor
                                   6677 ; ---------------------------------
      00211C                       6678 _ChangeFontColor::
                                   6679 ;src\/Intro.h:4: FILVRM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00211C 2A C9 F3         [16] 6680 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      00211F 01 78 01         [10] 6681 	ld	bc, #0x0178
      002122 09               [11] 6682 	add	hl, bc
      002123 FD 21 02 00      [14] 6683 	ld	iy, #2
      002127 FD 39            [15] 6684 	add	iy, sp
      002129 FD 7E 00         [19] 6685 	ld	a, 0 (iy)
      00212C F5               [11] 6686 	push	af
      00212D 33               [ 6] 6687 	inc	sp
      00212E 11 00 03         [10] 6688 	ld	de, #0x0300
      002131 D5               [11] 6689 	push	de
      002132 E5               [11] 6690 	push	hl
      002133 CDr00r00         [17] 6691 	call	_FILVRM
      002136 F1               [10] 6692 	pop	af
      002137 F1               [10] 6693 	pop	af
      002138 33               [ 6] 6694 	inc	sp
                                   6695 ;src\/Intro.h:5: FILVRM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002139 2A C9 F3         [16] 6696 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      00213C 01 78 09         [10] 6697 	ld	bc, #0x0978
      00213F 09               [11] 6698 	add	hl, bc
      002140 FD 21 02 00      [14] 6699 	ld	iy, #2
      002144 FD 39            [15] 6700 	add	iy, sp
      002146 FD 7E 00         [19] 6701 	ld	a, 0 (iy)
      002149 F5               [11] 6702 	push	af
      00214A 33               [ 6] 6703 	inc	sp
      00214B 11 00 03         [10] 6704 	ld	de, #0x0300
      00214E D5               [11] 6705 	push	de
      00214F E5               [11] 6706 	push	hl
      002150 CDr00r00         [17] 6707 	call	_FILVRM
      002153 F1               [10] 6708 	pop	af
      002154 F1               [10] 6709 	pop	af
      002155 33               [ 6] 6710 	inc	sp
                                   6711 ;src\/Intro.h:6: FILVRM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002156 2A C9 F3         [16] 6712 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      002159 01 78 11         [10] 6713 	ld	bc, #0x1178
      00215C 09               [11] 6714 	add	hl, bc
      00215D FD 21 02 00      [14] 6715 	ld	iy, #2
      002161 FD 39            [15] 6716 	add	iy, sp
      002163 FD 7E 00         [19] 6717 	ld	a, 0 (iy)
      002166 F5               [11] 6718 	push	af
      002167 33               [ 6] 6719 	inc	sp
      002168 11 00 03         [10] 6720 	ld	de, #0x0300
      00216B D5               [11] 6721 	push	de
      00216C E5               [11] 6722 	push	hl
      00216D CDr00r00         [17] 6723 	call	_FILVRM
      002170 F1               [10] 6724 	pop	af
      002171 F1               [10] 6725 	pop	af
      002172 33               [ 6] 6726 	inc	sp
                                   6727 ;src\/Intro.h:7: }
      002173 C9               [10] 6728 	ret
                                   6729 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6730 ;	---------------------------------
                                   6731 ; Function ScrollDownFont
                                   6732 ; ---------------------------------
      002174                       6733 _ScrollDownFont::
      002174 DD E5            [15] 6734 	push	ix
      002176 DD 21 00 00      [14] 6735 	ld	ix,#0
      00217A DD 39            [15] 6736 	add	ix,sp
      00217C F5               [11] 6737 	push	af
      00217D F5               [11] 6738 	push	af
                                   6739 ;src\/Intro.h:10: word startVRAMAddr = MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8);
      00217E 2A CB F3         [16] 6740 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      002181 01 78 09         [10] 6741 	ld	bc, #0x0978
      002184 09               [11] 6742 	add	hl, bc
                                   6743 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002185 4D               [ 4] 6744 	ld	c, l
      002186 44               [ 4] 6745 	ld	b, h
      002187 5D               [ 4] 6746 	ld	e, l
      002188 7C               [ 4] 6747 	ld	a, h
      002189 C6 03            [ 7] 6748 	add	a, #0x03
      00218B 57               [ 4] 6749 	ld	d, a
      00218C                       6750 00107$:
      00218C 79               [ 4] 6751 	ld	a, c
      00218D 93               [ 4] 6752 	sub	a, e
      00218E 78               [ 4] 6753 	ld	a, b
      00218F 9A               [ 4] 6754 	sbc	a, d
      002190 30 61            [12] 6755 	jr	NC, 00109$
                                   6756 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002192 33               [ 6] 6757 	inc	sp
      002193 33               [ 6] 6758 	inc	sp
      002194 C5               [11] 6759 	push	bc
      002195 DD 7E FC         [19] 6760 	ld	a, -4 (ix)
      002198 C6 07            [ 7] 6761 	add	a, #0x07
      00219A 6F               [ 4] 6762 	ld	l, a
      00219B DD 7E FD         [19] 6763 	ld	a, -3 (ix)
      00219E CE 00            [ 7] 6764 	adc	a, #0x00
      0021A0 DD 75 FE         [19] 6765 	ld	-2 (ix), l
      0021A3 DD 77 FF         [19] 6766 	ld	-1 (ix), a
      0021A6                       6767 00104$:
      0021A6 DD 7E FF         [19] 6768 	ld	a, -1 (ix)
      0021A9 DD B6 FE         [19] 6769 	or	a, -2 (ix)
      0021AC 28 2C            [12] 6770 	jr	Z, 00101$
                                   6771 ;src\/Intro.h:27: value = RDVRM(j-1);
      0021AE DD 6E FE         [19] 6772 	ld	l, -2 (ix)
      0021B1 DD 66 FF         [19] 6773 	ld	h, -1 (ix)
      0021B4 2B               [ 6] 6774 	dec	hl
      0021B5 C5               [11] 6775 	push	bc
      0021B6 D5               [11] 6776 	push	de
      0021B7 CDr00r00         [17] 6777 	call	_RDVRM
      0021BA AF               [ 4] 6778 	xor	a, a
      0021BB F5               [11] 6779 	push	af
      0021BC 33               [ 6] 6780 	inc	sp
      0021BD DD 6E FE         [19] 6781 	ld	l, -2 (ix)
      0021C0 DD 66 FF         [19] 6782 	ld	h, -1 (ix)
      0021C3 E5               [11] 6783 	push	hl
      0021C4 CDr00r00         [17] 6784 	call	_WRTVRM
      0021C7 F1               [10] 6785 	pop	af
      0021C8 33               [ 6] 6786 	inc	sp
      0021C9 D1               [10] 6787 	pop	de
      0021CA C1               [10] 6788 	pop	bc
                                   6789 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0021CB DD 6E FE         [19] 6790 	ld	l, -2 (ix)
      0021CE DD 66 FF         [19] 6791 	ld	h, -1 (ix)
      0021D1 2B               [ 6] 6792 	dec	hl
      0021D2 DD 75 FE         [19] 6793 	ld	-2 (ix), l
      0021D5 DD 74 FF         [19] 6794 	ld	-1 (ix), h
      0021D8 18 CC            [12] 6795 	jr	00104$
      0021DA                       6796 00101$:
                                   6797 ;src\/Intro.h:31: WRTVRM(i, 0);
      0021DA D5               [11] 6798 	push	de
      0021DB AF               [ 4] 6799 	xor	a, a
      0021DC F5               [11] 6800 	push	af
      0021DD 33               [ 6] 6801 	inc	sp
      0021DE C5               [11] 6802 	push	bc
      0021DF CDr00r00         [17] 6803 	call	_WRTVRM
      0021E2 F1               [10] 6804 	pop	af
      0021E3 33               [ 6] 6805 	inc	sp
      0021E4 D1               [10] 6806 	pop	de
                                   6807 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0021E5 DD 7E FC         [19] 6808 	ld	a, -4 (ix)
      0021E8 C6 08            [ 7] 6809 	add	a, #0x08
      0021EA 4F               [ 4] 6810 	ld	c, a
      0021EB DD 7E FD         [19] 6811 	ld	a, -3 (ix)
      0021EE CE 00            [ 7] 6812 	adc	a, #0x00
      0021F0 47               [ 4] 6813 	ld	b, a
      0021F1 18 99            [12] 6814 	jr	00107$
      0021F3                       6815 00109$:
                                   6816 ;src\/Intro.h:35: }
      0021F3 DD F9            [10] 6817 	ld	sp, ix
      0021F5 DD E1            [14] 6818 	pop	ix
      0021F7 C9               [10] 6819 	ret
                                   6820 ;src\/Intro.h:37: void Intro() {
                                   6821 ;	---------------------------------
                                   6822 ; Function Intro
                                   6823 ; ---------------------------------
      0021F8                       6824 _Intro::
                                   6825 ;src\/Intro.h:41: InitVRAM();
      0021F8 CDr89r0E         [17] 6826 	call	_InitVRAM
                                   6827 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      0021FB 11 0B 0B         [10] 6828 	ld	de, #0x0b0b
      0021FE D5               [11] 6829 	push	de
      0021FF 21r6Dr22         [10] 6830 	ld	hl, #___str_7
      002202 E5               [11] 6831 	push	hl
      002203 CDrC8r07         [17] 6832 	call	_DrawString
      002206 F1               [10] 6833 	pop	af
      002207 F1               [10] 6834 	pop	af
                                   6835 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002208 11 09 0D         [10] 6836 	ld	de, #0x0d09
      00220B D5               [11] 6837 	push	de
      00220C 21r77r22         [10] 6838 	ld	hl, #___str_8
      00220F E5               [11] 6839 	push	hl
      002210 CDrC8r07         [17] 6840 	call	_DrawString
      002213 F1               [10] 6841 	pop	af
                                   6842 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002214 26 F0            [ 7] 6843 	ld	h,#0xf0
      002216 E3               [19] 6844 	ex	(sp),hl
      002217 33               [ 6] 6845 	inc	sp
      002218 CDr1Cr21         [17] 6846 	call	_ChangeFontColor
      00221B 33               [ 6] 6847 	inc	sp
                                   6848 ;src\/Intro.h:56: Wait(2 * 60);
      00221C 21 78 00         [10] 6849 	ld	hl, #0x0078
      00221F E5               [11] 6850 	push	hl
      002220 CDr00r00         [17] 6851 	call	_Wait
      002223 F1               [10] 6852 	pop	af
                                   6853 ;src\/Intro.h:58: while(counter++ < 20) {
      002224 0E 00            [ 7] 6854 	ld	c, #0x00
      002226                       6855 00112$:
      002226 79               [ 4] 6856 	ld	a, c
      002227 D6 14            [ 7] 6857 	sub	a, #0x14
      002229 D0               [11] 6858 	ret	NC
      00222A 0C               [ 4] 6859 	inc	c
                                   6860 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      00222B 21 9E FC         [10] 6861 	ld	hl, #_JIFFY
      00222E 46               [ 7] 6862 	ld	b, (hl)
                                   6863 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      00222F                       6864 00101$:
      00222F 58               [ 4] 6865 	ld	e, b
      002230 16 00            [ 7] 6866 	ld	d, #0x00
      002232 2A 9E FC         [16] 6867 	ld	hl, (_JIFFY)
      002235 BF               [ 4] 6868 	cp	a, a
      002236 ED 52            [15] 6869 	sbc	hl, de
      002238 28 F5            [12] 6870 	jr	Z, 00101$
                                   6871 ;src\/Intro.h:63: if(counter == 15) {
      00223A 79               [ 4] 6872 	ld	a, c
      00223B D6 0F            [ 7] 6873 	sub	a, #0x0f
      00223D 20 0C            [12] 6874 	jr	NZ, 00110$
                                   6875 ;src\/Intro.h:64: ChangeFontColor(0x40);
      00223F C5               [11] 6876 	push	bc
      002240 3E 40            [ 7] 6877 	ld	a, #0x40
      002242 F5               [11] 6878 	push	af
      002243 33               [ 6] 6879 	inc	sp
      002244 CDr1Cr21         [17] 6880 	call	_ChangeFontColor
      002247 33               [ 6] 6881 	inc	sp
      002248 C1               [10] 6882 	pop	bc
      002249 18 DB            [12] 6883 	jr	00112$
      00224B                       6884 00110$:
                                   6885 ;src\/Intro.h:66: else if(counter == 10) {
      00224B 79               [ 4] 6886 	ld	a, c
      00224C D6 0A            [ 7] 6887 	sub	a, #0x0a
      00224E 20 0C            [12] 6888 	jr	NZ, 00107$
                                   6889 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002250 C5               [11] 6890 	push	bc
      002251 3E 50            [ 7] 6891 	ld	a, #0x50
      002253 F5               [11] 6892 	push	af
      002254 33               [ 6] 6893 	inc	sp
      002255 CDr1Cr21         [17] 6894 	call	_ChangeFontColor
      002258 33               [ 6] 6895 	inc	sp
      002259 C1               [10] 6896 	pop	bc
      00225A 18 CA            [12] 6897 	jr	00112$
      00225C                       6898 00107$:
                                   6899 ;src\/Intro.h:69: else if(counter == 5) {
      00225C 79               [ 4] 6900 	ld	a, c
      00225D D6 05            [ 7] 6901 	sub	a, #0x05
      00225F 20 C5            [12] 6902 	jr	NZ, 00112$
                                   6903 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002261 C5               [11] 6904 	push	bc
      002262 3E E0            [ 7] 6905 	ld	a, #0xe0
      002264 F5               [11] 6906 	push	af
      002265 33               [ 6] 6907 	inc	sp
      002266 CDr1Cr21         [17] 6908 	call	_ChangeFontColor
      002269 33               [ 6] 6909 	inc	sp
      00226A C1               [10] 6910 	pop	bc
                                   6911 ;src\/Intro.h:140: }
      00226B 18 B9            [12] 6912 	jr	00112$
      00226D                       6913 ___str_7:
      00226D 41 20 47 41 4D 45 20  6914 	.ascii "A GAME BY"
             42 59
      002276 00                    6915 	.db 0x00
      002277                       6916 ___str_8:
      002277 41 4E 44 52 45 20 42  6917 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      002285 00                    6918 	.db 0x00
                                   6919 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   6920 ;	---------------------------------
                                   6921 ; Function SetBlock
                                   6922 ; ---------------------------------
      002286                       6923 _SetBlock::
      002286 DD E5            [15] 6924 	push	ix
      002288 DD 21 00 00      [14] 6925 	ld	ix,#0
      00228C DD 39            [15] 6926 	add	ix,sp
                                   6927 ;src\/Title.h:15: WRTVRM(MSX_modedata_screen2.name + col + (line * 32), tileNumber);
      00228E 2A C7 F3         [16] 6928 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002291 DD 4E 04         [19] 6929 	ld	c, 4 (ix)
      002294 06 00            [ 7] 6930 	ld	b, #0x00
      002296 09               [11] 6931 	add	hl, bc
      002297 EB               [ 4] 6932 	ex	de, hl
      002298 DD 6E 05         [19] 6933 	ld	l, 5 (ix)
      00229B 26 00            [ 7] 6934 	ld	h, #0x00
      00229D 29               [11] 6935 	add	hl, hl
      00229E 29               [11] 6936 	add	hl, hl
      00229F 29               [11] 6937 	add	hl, hl
      0022A0 29               [11] 6938 	add	hl, hl
      0022A1 29               [11] 6939 	add	hl, hl
      0022A2 19               [11] 6940 	add	hl, de
      0022A3 DD 7E 06         [19] 6941 	ld	a, 6 (ix)
      0022A6 F5               [11] 6942 	push	af
      0022A7 33               [ 6] 6943 	inc	sp
      0022A8 E5               [11] 6944 	push	hl
      0022A9 CDr00r00         [17] 6945 	call	_WRTVRM
      0022AC F1               [10] 6946 	pop	af
      0022AD 33               [ 6] 6947 	inc	sp
                                   6948 ;src\/Title.h:16: }
      0022AE DD E1            [14] 6949 	pop	ix
      0022B0 C9               [10] 6950 	ret
                                   6951 ;src\/Title.h:18: void TitleScreen() {
                                   6952 ;	---------------------------------
                                   6953 ; Function TitleScreen
                                   6954 ; ---------------------------------
      0022B1                       6955 _TitleScreen::
      0022B1 DD E5            [15] 6956 	push	ix
      0022B3 DD 21 00 00      [14] 6957 	ld	ix,#0
      0022B7 DD 39            [15] 6958 	add	ix,sp
      0022B9 21 EB FF         [10] 6959 	ld	hl, #-21
      0022BC 39               [11] 6960 	add	hl, sp
      0022BD F9               [ 6] 6961 	ld	sp, hl
                                   6962 ;src\/Title.h:19: byte colorIndex = 0;
      0022BE 0E 00            [ 7] 6963 	ld	c, #0x00
                                   6964 ;src\/Title.h:52: const char blocks[] = {
      0022C0 21 00 00         [10] 6965 	ld	hl, #0
      0022C3 39               [11] 6966 	add	hl, sp
      0022C4 EB               [ 4] 6967 	ex	de, hl
      0022C5 3E 8E            [ 7] 6968 	ld	a, #0x8e
      0022C7 12               [ 7] 6969 	ld	(de), a
      0022C8 6B               [ 4] 6970 	ld	l, e
      0022C9 62               [ 4] 6971 	ld	h, d
      0022CA 23               [ 6] 6972 	inc	hl
      0022CB 36 8F            [10] 6973 	ld	(hl), #0x8f
      0022CD 6B               [ 4] 6974 	ld	l, e
      0022CE 62               [ 4] 6975 	ld	h, d
      0022CF 23               [ 6] 6976 	inc	hl
      0022D0 23               [ 6] 6977 	inc	hl
      0022D1 36 90            [10] 6978 	ld	(hl), #0x90
      0022D3 6B               [ 4] 6979 	ld	l, e
      0022D4 62               [ 4] 6980 	ld	h, d
      0022D5 23               [ 6] 6981 	inc	hl
      0022D6 23               [ 6] 6982 	inc	hl
      0022D7 23               [ 6] 6983 	inc	hl
      0022D8 36 91            [10] 6984 	ld	(hl), #0x91
      0022DA 21 04 00         [10] 6985 	ld	hl, #0x0004
      0022DD 19               [11] 6986 	add	hl, de
      0022DE 36 92            [10] 6987 	ld	(hl), #0x92
      0022E0 21 05 00         [10] 6988 	ld	hl, #0x0005
      0022E3 19               [11] 6989 	add	hl, de
      0022E4 36 93            [10] 6990 	ld	(hl), #0x93
      0022E6 21 06 00         [10] 6991 	ld	hl, #0x0006
      0022E9 19               [11] 6992 	add	hl, de
      0022EA 36 94            [10] 6993 	ld	(hl), #0x94
                                   6994 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      0022EC 21 07 00         [10] 6995 	ld	hl, #7
      0022EF 39               [11] 6996 	add	hl, sp
      0022F0 DD 75 F6         [19] 6997 	ld	-10 (ix), l
      0022F3 DD 74 F7         [19] 6998 	ld	-9 (ix), h
      0022F6 36 8E            [10] 6999 	ld	(hl), #0x8e
      0022F8 DD 6E F6         [19] 7000 	ld	l, -10 (ix)
      0022FB DD 66 F7         [19] 7001 	ld	h, -9 (ix)
      0022FE 23               [ 6] 7002 	inc	hl
      0022FF 36 90            [10] 7003 	ld	(hl), #0x90
      002301 DD 6E F6         [19] 7004 	ld	l, -10 (ix)
      002304 DD 66 F7         [19] 7005 	ld	h, -9 (ix)
      002307 23               [ 6] 7006 	inc	hl
      002308 23               [ 6] 7007 	inc	hl
      002309 36 92            [10] 7008 	ld	(hl), #0x92
      00230B DD 6E F6         [19] 7009 	ld	l, -10 (ix)
      00230E DD 66 F7         [19] 7010 	ld	h, -9 (ix)
      002311 23               [ 6] 7011 	inc	hl
      002312 23               [ 6] 7012 	inc	hl
      002313 23               [ 6] 7013 	inc	hl
      002314 36 94            [10] 7014 	ld	(hl), #0x94
                                   7015 ;src\/Title.h:65: InitVRAM();
      002316 C5               [11] 7016 	push	bc
      002317 D5               [11] 7017 	push	de
      002318 CDr89r0E         [17] 7018 	call	_InitVRAM
      00231B D1               [10] 7019 	pop	de
      00231C C1               [10] 7020 	pop	bc
                                   7021 ;src\/Title.h:67: LDIRVM(MSX_modedata_screen2.name, title, sizeof(title));
      00231D 2A C7 F3         [16] 7022 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002320 C5               [11] 7023 	push	bc
      002321 D5               [11] 7024 	push	de
      002322 11 00 01         [10] 7025 	ld	de, #0x0100
      002325 D5               [11] 7026 	push	de
      002326 11rA0r24         [10] 7027 	ld	de, #_TitleScreen_title_65536_278
      002329 D5               [11] 7028 	push	de
      00232A E5               [11] 7029 	push	hl
      00232B CDr00r00         [17] 7030 	call	_LDIRVM
      00232E 21 06 00         [10] 7031 	ld	hl, #6
      002331 39               [11] 7032 	add	hl, sp
      002332 F9               [ 6] 7033 	ld	sp, hl
      002333 11 05 0D         [10] 7034 	ld	de, #0x0d05
      002336 D5               [11] 7035 	push	de
      002337 21rA0r25         [10] 7036 	ld	hl, #___str_9
      00233A E5               [11] 7037 	push	hl
      00233B CDrC8r07         [17] 7038 	call	_DrawString
      00233E F1               [10] 7039 	pop	af
      00233F 26 17            [ 7] 7040 	ld	h,#0x17
      002341 E3               [19] 7041 	ex	(sp),hl
      002342 33               [ 6] 7042 	inc	sp
      002343 AF               [ 4] 7043 	xor	a, a
      002344 F5               [11] 7044 	push	af
      002345 33               [ 6] 7045 	inc	sp
      002346 21rB7r25         [10] 7046 	ld	hl, #___str_10
      002349 E5               [11] 7047 	push	hl
      00234A CDrC8r07         [17] 7048 	call	_DrawString
      00234D F1               [10] 7049 	pop	af
      00234E F1               [10] 7050 	pop	af
      00234F 11 19 17         [10] 7051 	ld	de, #0x1719
      002352 D5               [11] 7052 	push	de
      002353 21rCCr25         [10] 7053 	ld	hl, #___str_11
      002356 E5               [11] 7054 	push	hl
      002357 CDrC8r07         [17] 7055 	call	_DrawString
      00235A F1               [10] 7056 	pop	af
      00235B F1               [10] 7057 	pop	af
      00235C D1               [10] 7058 	pop	de
      00235D C1               [10] 7059 	pop	bc
                                   7060 ;src\/Title.h:73: while(TRUE) {
      00235E                       7061 00120$:
                                   7062 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      00235E DD 36 FD 00      [19] 7063 	ld	-3 (ix), #0
                                   7064 ;src\/Title.h:78: word counter = 0;
      002362 AF               [ 4] 7065 	xor	a, a
      002363 DD 77 FE         [19] 7066 	ld	-2 (ix), a
      002366 DD 77 FF         [19] 7067 	ld	-1 (ix), a
                                   7068 ;src\/Title.h:88: do {
      002369                       7069 00106$:
                                   7070 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002369 C5               [11] 7071 	push	bc
      00236A D5               [11] 7072 	push	de
      00236B 11 1F 1F         [10] 7073 	ld	de, #0x1f1f
      00236E D5               [11] 7074 	push	de
      00236F CDrD9r00         [17] 7075 	call	_GetRandomInInterval
      002372 F1               [10] 7076 	pop	af
                                   7077 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002373 DD 75 F8         [19] 7078 	ld	-8 (ix), l
      002376 11 07 07         [10] 7079 	ld	de, #0x0707
      002379 D5               [11] 7080 	push	de
      00237A CDrD9r00         [17] 7081 	call	_GetRandomInInterval
      00237D F1               [10] 7082 	pop	af
      00237E D1               [10] 7083 	pop	de
      00237F C1               [10] 7084 	pop	bc
      002380 DD 75 F9         [19] 7085 	ld	-7 (ix), l
                                   7086 ;src\/Title.h:99: value = RDVRM(MSX_modedata_screen2.name + col_1 + (line_1 * 32));
      002383 2A C7 F3         [16] 7087 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002386 DD 7E F8         [19] 7088 	ld	a, -8 (ix)
      002389 06 00            [ 7] 7089 	ld	b, #0x00
      00238B 85               [ 4] 7090 	add	a, l
      00238C DD 77 FB         [19] 7091 	ld	-5 (ix), a
      00238F 78               [ 4] 7092 	ld	a, b
      002390 8C               [ 4] 7093 	adc	a, h
      002391 DD 77 FC         [19] 7094 	ld	-4 (ix), a
      002394 DD 6E F9         [19] 7095 	ld	l, -7 (ix)
      002397 26 00            [ 7] 7096 	ld	h, #0x00
      002399 29               [11] 7097 	add	hl, hl
      00239A 29               [11] 7098 	add	hl, hl
      00239B 29               [11] 7099 	add	hl, hl
      00239C 29               [11] 7100 	add	hl, hl
      00239D 29               [11] 7101 	add	hl, hl
      00239E 7D               [ 4] 7102 	ld	a, l
      00239F DD 86 FB         [19] 7103 	add	a, -5 (ix)
      0023A2 6F               [ 4] 7104 	ld	l, a
      0023A3 7C               [ 4] 7105 	ld	a, h
      0023A4 DD 8E FC         [19] 7106 	adc	a, -4 (ix)
      0023A7 67               [ 4] 7107 	ld	h, a
      0023A8 C5               [11] 7108 	push	bc
      0023A9 D5               [11] 7109 	push	de
      0023AA CDr00r00         [17] 7110 	call	_RDVRM
      0023AD D1               [10] 7111 	pop	de
      0023AE C1               [10] 7112 	pop	bc
      0023AF DD 75 FA         [19] 7113 	ld	-6 (ix), l
                                   7114 ;src\/Title.h:102: if(counter++ > 1000) {
      0023B2 DD 46 FE         [19] 7115 	ld	b, -2 (ix)
      0023B5 DD 6E FF         [19] 7116 	ld	l, -1 (ix)
      0023B8 DD 34 FE         [23] 7117 	inc	-2 (ix)
      0023BB 20 03            [12] 7118 	jr	NZ, 00192$
      0023BD DD 34 FF         [23] 7119 	inc	-1 (ix)
      0023C0                       7120 00192$:
      0023C0 3E E8            [ 7] 7121 	ld	a, #0xe8
      0023C2 B8               [ 4] 7122 	cp	a, b
      0023C3 3E 03            [ 7] 7123 	ld	a, #0x03
      0023C5 9D               [ 4] 7124 	sbc	a, l
      0023C6 30 0F            [12] 7125 	jr	NC, 00107$
                                   7126 ;src\/Title.h:103: colorIndex++;
      0023C8 0C               [ 4] 7127 	inc	c
                                   7128 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0023C9 79               [ 4] 7129 	ld	a, c
      0023CA D6 03            [ 7] 7130 	sub	a, #0x03
      0023CC 38 02            [12] 7131 	jr	C, 00102$
      0023CE 0E 00            [ 7] 7132 	ld	c, #0x00
      0023D0                       7133 00102$:
                                   7134 ;src\/Title.h:119: counter = 0;
      0023D0 AF               [ 4] 7135 	xor	a, a
      0023D1 DD 77 FE         [19] 7136 	ld	-2 (ix), a
      0023D4 DD 77 FF         [19] 7137 	ld	-1 (ix), a
      0023D7                       7138 00107$:
                                   7139 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0023D7 DD 7E FA         [19] 7140 	ld	a, -6 (ix)
      0023DA B7               [ 4] 7141 	or	a, a
      0023DB 28 8C            [12] 7142 	jr	Z, 00106$
      0023DD 79               [ 4] 7143 	ld	a, c
      0023DE 3C               [ 4] 7144 	inc	a
      0023DF F5               [11] 7145 	push	af
      0023E0 17               [ 4] 7146 	rla
      0023E1 9F               [ 4] 7147 	sbc	a, a
      0023E2 47               [ 4] 7148 	ld	b, a
      0023E3 F1               [10] 7149 	pop	af
      0023E4 DD 86 F6         [19] 7150 	add	a, -10 (ix)
      0023E7 DD 77 FB         [19] 7151 	ld	-5 (ix), a
      0023EA 78               [ 4] 7152 	ld	a, b
      0023EB DD 8E F7         [19] 7153 	adc	a, -9 (ix)
      0023EE DD 77 FC         [19] 7154 	ld	-4 (ix), a
      0023F1 DD 6E FB         [19] 7155 	ld	l, -5 (ix)
      0023F4 DD 66 FC         [19] 7156 	ld	h, -4 (ix)
      0023F7 46               [ 7] 7157 	ld	b, (hl)
      0023F8 DD 7E FA         [19] 7158 	ld	a, -6 (ix)
      0023FB 90               [ 4] 7159 	sub	a, b
      0023FC CAr69r23         [10] 7160 	jp	Z,00106$
                                   7161 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      0023FF 06 00            [ 7] 7162 	ld	b, #0x00
      002401                       7163 00123$:
      002401 78               [ 4] 7164 	ld	a, b
      002402 D6 0A            [ 7] 7165 	sub	a, #0x0a
      002404 30 79            [12] 7166 	jr	NC, 00118$
                                   7167 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002406 2A 9E FC         [16] 7168 	ld	hl, (_JIFFY)
      002409 DD 75 FE         [19] 7169 	ld	-2 (ix), l
      00240C DD 74 FF         [19] 7170 	ld	-1 (ix), h
                                   7171 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      00240F                       7172 00109$:
      00240F FD 21 9E FC      [14] 7173 	ld	iy, #_JIFFY
      002413 FD 7E 00         [19] 7174 	ld	a, 0 (iy)
      002416 DD 96 FE         [19] 7175 	sub	a, -2 (ix)
      002419 20 08            [12] 7176 	jr	NZ, 00194$
      00241B FD 7E 01         [19] 7177 	ld	a, 1 (iy)
      00241E DD 96 FF         [19] 7178 	sub	a, -1 (ix)
      002421 28 EC            [12] 7179 	jr	Z, 00109$
      002423                       7180 00194$:
                                   7181 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002423 DD 6E FD         [19] 7182 	ld	l, -3 (ix)
      002426 26 00            [ 7] 7183 	ld	h, #0x00
      002428 19               [11] 7184 	add	hl, de
      002429 7E               [ 7] 7185 	ld	a, (hl)
      00242A C5               [11] 7186 	push	bc
      00242B D5               [11] 7187 	push	de
      00242C F5               [11] 7188 	push	af
      00242D 33               [ 6] 7189 	inc	sp
      00242E DD 66 F9         [19] 7190 	ld	h, -7 (ix)
      002431 DD 6E F8         [19] 7191 	ld	l, -8 (ix)
      002434 E5               [11] 7192 	push	hl
      002435 CDr86r22         [17] 7193 	call	_SetBlock
      002438 F1               [10] 7194 	pop	af
      002439 33               [ 6] 7195 	inc	sp
      00243A D1               [10] 7196 	pop	de
      00243B C1               [10] 7197 	pop	bc
                                   7198 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00243C DD 7E FD         [19] 7199 	ld	a, -3 (ix)
      00243F DD 34 FD         [23] 7200 	inc	-3 (ix)
      002442 D6 07            [ 7] 7201 	sub	a, #0x07
      002444 38 04            [12] 7202 	jr	C, 00113$
      002446 DD 36 FD 00      [19] 7203 	ld	-3 (ix), #0
      00244A                       7204 00113$:
                                   7205 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      00244A C5               [11] 7206 	push	bc
      00244B D5               [11] 7207 	push	de
      00244C 2E 00            [ 7] 7208 	ld	l, #0x00
      00244E CDr00r00         [17] 7209 	call	_GTTRIG
                                   7210 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002451 DD 75 FF         [19] 7211 	ld	-1 (ix), l
      002454 2E 01            [ 7] 7212 	ld	l, #0x01
      002456 CDr00r00         [17] 7213 	call	_GTTRIG
      002459 D1               [10] 7214 	pop	de
      00245A C1               [10] 7215 	pop	bc
                                   7216 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      00245B E5               [11] 7217 	push	hl
      00245C C5               [11] 7218 	push	bc
      00245D D5               [11] 7219 	push	de
      00245E 2E 03            [ 7] 7220 	ld	l, #0x03
      002460 CDr00r00         [17] 7221 	call	_GTTRIG
      002463 7D               [ 4] 7222 	ld	a, l
      002464 D1               [10] 7223 	pop	de
      002465 C1               [10] 7224 	pop	bc
      002466 E1               [10] 7225 	pop	hl
      002467 67               [ 4] 7226 	ld	h, a
                                   7227 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002468 DD 7E FF         [19] 7228 	ld	a, -1 (ix)
      00246B 3C               [ 4] 7229 	inc	a
      00246C 28 06            [12] 7230 	jr	Z, 00114$
      00246E 2C               [ 4] 7231 	inc	l
      00246F 28 03            [12] 7232 	jr	Z, 00114$
      002471 24               [ 4] 7233 	inc	h
      002472 20 08            [12] 7234 	jr	NZ, 00124$
      002474                       7235 00114$:
                                   7236 ;src\/Title.h:168: rndSeed = JIFFY;
      002474 3A 9E FC         [13] 7237 	ld	a,(#_JIFFY + 0)
      002477 32r08r00         [13] 7238 	ld	(#_rndSeed), a
                                   7239 ;src\/Title.h:169: return;
      00247A 18 1F            [12] 7240 	jr	00125$
      00247C                       7241 00124$:
                                   7242 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00247C 04               [ 4] 7243 	inc	b
      00247D 18 82            [12] 7244 	jr	00123$
      00247F                       7245 00118$:
                                   7246 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00247F DD 6E FB         [19] 7247 	ld	l, -5 (ix)
      002482 DD 66 FC         [19] 7248 	ld	h, -4 (ix)
      002485 7E               [ 7] 7249 	ld	a, (hl)
      002486 C5               [11] 7250 	push	bc
      002487 D5               [11] 7251 	push	de
      002488 F5               [11] 7252 	push	af
      002489 33               [ 6] 7253 	inc	sp
      00248A DD 66 F9         [19] 7254 	ld	h, -7 (ix)
      00248D DD 6E F8         [19] 7255 	ld	l, -8 (ix)
      002490 E5               [11] 7256 	push	hl
      002491 CDr86r22         [17] 7257 	call	_SetBlock
      002494 F1               [10] 7258 	pop	af
      002495 33               [ 6] 7259 	inc	sp
      002496 D1               [10] 7260 	pop	de
      002497 C1               [10] 7261 	pop	bc
      002498 C3r5Er23         [10] 7262 	jp	00120$
      00249B                       7263 00125$:
                                   7264 ;src\/Title.h:176: }
      00249B DD F9            [10] 7265 	ld	sp, ix
      00249D DD E1            [14] 7266 	pop	ix
      00249F C9               [10] 7267 	ret
      0024A0                       7268 _TitleScreen_title_65536_278:
      0024A0 00                    7269 	.db #0x00	; 0
      0024A1 00                    7270 	.db #0x00	; 0
      0024A2 00                    7271 	.db #0x00	; 0
      0024A3 00                    7272 	.db #0x00	; 0
      0024A4 8E                    7273 	.db #0x8e	; 142
      0024A5 8E                    7274 	.db #0x8e	; 142
      0024A6 8E                    7275 	.db #0x8e	; 142
      0024A7 8E                    7276 	.db #0x8e	; 142
      0024A8 00                    7277 	.db #0x00	; 0
      0024A9 8E                    7278 	.db #0x8e	; 142
      0024AA 8E                    7279 	.db #0x8e	; 142
      0024AB 8E                    7280 	.db #0x8e	; 142
      0024AC 8E                    7281 	.db #0x8e	; 142
      0024AD 8E                    7282 	.db #0x8e	; 142
      0024AE 8E                    7283 	.db #0x8e	; 142
      0024AF 00                    7284 	.db #0x00	; 0
      0024B0 00                    7285 	.db #0x00	; 0
      0024B1 8E                    7286 	.db #0x8e	; 142
      0024B2 8E                    7287 	.db #0x8e	; 142
      0024B3 00                    7288 	.db #0x00	; 0
      0024B4 00                    7289 	.db #0x00	; 0
      0024B5 00                    7290 	.db #0x00	; 0
      0024B6 8E                    7291 	.db #0x8e	; 142
      0024B7 8E                    7292 	.db #0x8e	; 142
      0024B8 00                    7293 	.db #0x00	; 0
      0024B9 00                    7294 	.db #0x00	; 0
      0024BA 00                    7295 	.db #0x00	; 0
      0024BB 00                    7296 	.db #0x00	; 0
      0024BC 8E                    7297 	.db #0x8e	; 142
      0024BD 8E                    7298 	.db #0x8e	; 142
      0024BE 8E                    7299 	.db #0x8e	; 142
      0024BF 8E                    7300 	.db #0x8e	; 142
      0024C0 00                    7301 	.db #0x00	; 0
      0024C1 00                    7302 	.db #0x00	; 0
      0024C2 00                    7303 	.db #0x00	; 0
      0024C3 8E                    7304 	.db #0x8e	; 142
      0024C4 8E                    7305 	.db #0x8e	; 142
      0024C5 8E                    7306 	.db #0x8e	; 142
      0024C6 8E                    7307 	.db #0x8e	; 142
      0024C7 8E                    7308 	.db #0x8e	; 142
      0024C8 00                    7309 	.db #0x00	; 0
      0024C9 8E                    7310 	.db #0x8e	; 142
      0024CA 8E                    7311 	.db #0x8e	; 142
      0024CB 00                    7312 	.db #0x00	; 0
      0024CC 00                    7313 	.db #0x00	; 0
      0024CD 00                    7314 	.db #0x00	; 0
      0024CE 8E                    7315 	.db #0x8e	; 142
      0024CF 8E                    7316 	.db #0x8e	; 142
      0024D0 00                    7317 	.db #0x00	; 0
      0024D1 00                    7318 	.db #0x00	; 0
      0024D2 8E                    7319 	.db #0x8e	; 142
      0024D3 8E                    7320 	.db #0x8e	; 142
      0024D4 00                    7321 	.db #0x00	; 0
      0024D5 00                    7322 	.db #0x00	; 0
      0024D6 8E                    7323 	.db #0x8e	; 142
      0024D7 8E                    7324 	.db #0x8e	; 142
      0024D8 00                    7325 	.db #0x00	; 0
      0024D9 00                    7326 	.db #0x00	; 0
      0024DA 00                    7327 	.db #0x00	; 0
      0024DB 8E                    7328 	.db #0x8e	; 142
      0024DC 8E                    7329 	.db #0x8e	; 142
      0024DD 8E                    7330 	.db #0x8e	; 142
      0024DE 8E                    7331 	.db #0x8e	; 142
      0024DF 8E                    7332 	.db #0x8e	; 142
      0024E0 00                    7333 	.db #0x00	; 0
      0024E1 00                    7334 	.db #0x00	; 0
      0024E2 8E                    7335 	.db #0x8e	; 142
      0024E3 8E                    7336 	.db #0x8e	; 142
      0024E4 8E                    7337 	.db #0x8e	; 142
      0024E5 00                    7338 	.db #0x00	; 0
      0024E6 8E                    7339 	.db #0x8e	; 142
      0024E7 8E                    7340 	.db #0x8e	; 142
      0024E8 00                    7341 	.db #0x00	; 0
      0024E9 8E                    7342 	.db #0x8e	; 142
      0024EA 8E                    7343 	.db #0x8e	; 142
      0024EB 00                    7344 	.db #0x00	; 0
      0024EC 00                    7345 	.db #0x00	; 0
      0024ED 00                    7346 	.db #0x00	; 0
      0024EE 8E                    7347 	.db #0x8e	; 142
      0024EF 8E                    7348 	.db #0x8e	; 142
      0024F0 00                    7349 	.db #0x00	; 0
      0024F1 00                    7350 	.db #0x00	; 0
      0024F2 00                    7351 	.db #0x00	; 0
      0024F3 8E                    7352 	.db #0x8e	; 142
      0024F4 8E                    7353 	.db #0x8e	; 142
      0024F5 00                    7354 	.db #0x00	; 0
      0024F6 8E                    7355 	.db #0x8e	; 142
      0024F7 8E                    7356 	.db #0x8e	; 142
      0024F8 00                    7357 	.db #0x00	; 0
      0024F9 00                    7358 	.db #0x00	; 0
      0024FA 8E                    7359 	.db #0x8e	; 142
      0024FB 8E                    7360 	.db #0x8e	; 142
      0024FC 8E                    7361 	.db #0x8e	; 142
      0024FD 00                    7362 	.db #0x00	; 0
      0024FE 8E                    7363 	.db #0x8e	; 142
      0024FF 8E                    7364 	.db #0x8e	; 142
      002500 00                    7365 	.db #0x00	; 0
      002501 8E                    7366 	.db #0x8e	; 142
      002502 8E                    7367 	.db #0x8e	; 142
      002503 8E                    7368 	.db #0x8e	; 142
      002504 00                    7369 	.db #0x00	; 0
      002505 00                    7370 	.db #0x00	; 0
      002506 8E                    7371 	.db #0x8e	; 142
      002507 8E                    7372 	.db #0x8e	; 142
      002508 00                    7373 	.db #0x00	; 0
      002509 8E                    7374 	.db #0x8e	; 142
      00250A 8E                    7375 	.db #0x8e	; 142
      00250B 00                    7376 	.db #0x00	; 0
      00250C 00                    7377 	.db #0x00	; 0
      00250D 8E                    7378 	.db #0x8e	; 142
      00250E 8E                    7379 	.db #0x8e	; 142
      00250F 00                    7380 	.db #0x00	; 0
      002510 00                    7381 	.db #0x00	; 0
      002511 00                    7382 	.db #0x00	; 0
      002512 00                    7383 	.db #0x00	; 0
      002513 00                    7384 	.db #0x00	; 0
      002514 8E                    7385 	.db #0x8e	; 142
      002515 8E                    7386 	.db #0x8e	; 142
      002516 8E                    7387 	.db #0x8e	; 142
      002517 00                    7388 	.db #0x00	; 0
      002518 00                    7389 	.db #0x00	; 0
      002519 8E                    7390 	.db #0x8e	; 142
      00251A 8E                    7391 	.db #0x8e	; 142
      00251B 8E                    7392 	.db #0x8e	; 142
      00251C 00                    7393 	.db #0x00	; 0
      00251D 00                    7394 	.db #0x00	; 0
      00251E 8E                    7395 	.db #0x8e	; 142
      00251F 8E                    7396 	.db #0x8e	; 142
      002520 00                    7397 	.db #0x00	; 0
      002521 8E                    7398 	.db #0x8e	; 142
      002522 8E                    7399 	.db #0x8e	; 142
      002523 00                    7400 	.db #0x00	; 0
      002524 00                    7401 	.db #0x00	; 0
      002525 00                    7402 	.db #0x00	; 0
      002526 8E                    7403 	.db #0x8e	; 142
      002527 8E                    7404 	.db #0x8e	; 142
      002528 00                    7405 	.db #0x00	; 0
      002529 8E                    7406 	.db #0x8e	; 142
      00252A 8E                    7407 	.db #0x8e	; 142
      00252B 8E                    7408 	.db #0x8e	; 142
      00252C 8E                    7409 	.db #0x8e	; 142
      00252D 8E                    7410 	.db #0x8e	; 142
      00252E 00                    7411 	.db #0x00	; 0
      00252F 00                    7412 	.db #0x00	; 0
      002530 00                    7413 	.db #0x00	; 0
      002531 00                    7414 	.db #0x00	; 0
      002532 00                    7415 	.db #0x00	; 0
      002533 00                    7416 	.db #0x00	; 0
      002534 8E                    7417 	.db #0x8e	; 142
      002535 8E                    7418 	.db #0x8e	; 142
      002536 00                    7419 	.db #0x00	; 0
      002537 00                    7420 	.db #0x00	; 0
      002538 00                    7421 	.db #0x00	; 0
      002539 8E                    7422 	.db #0x8e	; 142
      00253A 8E                    7423 	.db #0x8e	; 142
      00253B 00                    7424 	.db #0x00	; 0
      00253C 00                    7425 	.db #0x00	; 0
      00253D 00                    7426 	.db #0x00	; 0
      00253E 8E                    7427 	.db #0x8e	; 142
      00253F 8E                    7428 	.db #0x8e	; 142
      002540 00                    7429 	.db #0x00	; 0
      002541 8E                    7430 	.db #0x8e	; 142
      002542 8E                    7431 	.db #0x8e	; 142
      002543 00                    7432 	.db #0x00	; 0
      002544 00                    7433 	.db #0x00	; 0
      002545 00                    7434 	.db #0x00	; 0
      002546 8E                    7435 	.db #0x8e	; 142
      002547 8E                    7436 	.db #0x8e	; 142
      002548 00                    7437 	.db #0x00	; 0
      002549 8E                    7438 	.db #0x8e	; 142
      00254A 8E                    7439 	.db #0x8e	; 142
      00254B 8E                    7440 	.db #0x8e	; 142
      00254C 8E                    7441 	.db #0x8e	; 142
      00254D 8E                    7442 	.db #0x8e	; 142
      00254E 00                    7443 	.db #0x00	; 0
      00254F 00                    7444 	.db #0x00	; 0
      002550 00                    7445 	.db #0x00	; 0
      002551 00                    7446 	.db #0x00	; 0
      002552 00                    7447 	.db #0x00	; 0
      002553 00                    7448 	.db #0x00	; 0
      002554 8E                    7449 	.db #0x8e	; 142
      002555 8E                    7450 	.db #0x8e	; 142
      002556 00                    7451 	.db #0x00	; 0
      002557 00                    7452 	.db #0x00	; 0
      002558 00                    7453 	.db #0x00	; 0
      002559 8E                    7454 	.db #0x8e	; 142
      00255A 8E                    7455 	.db #0x8e	; 142
      00255B 00                    7456 	.db #0x00	; 0
      00255C 00                    7457 	.db #0x00	; 0
      00255D 00                    7458 	.db #0x00	; 0
      00255E 8E                    7459 	.db #0x8e	; 142
      00255F 8E                    7460 	.db #0x8e	; 142
      002560 00                    7461 	.db #0x00	; 0
      002561 8E                    7462 	.db #0x8e	; 142
      002562 8E                    7463 	.db #0x8e	; 142
      002563 8E                    7464 	.db #0x8e	; 142
      002564 8E                    7465 	.db #0x8e	; 142
      002565 8E                    7466 	.db #0x8e	; 142
      002566 8E                    7467 	.db #0x8e	; 142
      002567 8E                    7468 	.db #0x8e	; 142
      002568 00                    7469 	.db #0x00	; 0
      002569 8E                    7470 	.db #0x8e	; 142
      00256A 8E                    7471 	.db #0x8e	; 142
      00256B 00                    7472 	.db #0x00	; 0
      00256C 00                    7473 	.db #0x00	; 0
      00256D 00                    7474 	.db #0x00	; 0
      00256E 8E                    7475 	.db #0x8e	; 142
      00256F 00                    7476 	.db #0x00	; 0
      002570 00                    7477 	.db #0x00	; 0
      002571 00                    7478 	.db #0x00	; 0
      002572 00                    7479 	.db #0x00	; 0
      002573 00                    7480 	.db #0x00	; 0
      002574 8E                    7481 	.db #0x8e	; 142
      002575 8E                    7482 	.db #0x8e	; 142
      002576 00                    7483 	.db #0x00	; 0
      002577 00                    7484 	.db #0x00	; 0
      002578 00                    7485 	.db #0x00	; 0
      002579 8E                    7486 	.db #0x8e	; 142
      00257A 8E                    7487 	.db #0x8e	; 142
      00257B 8E                    7488 	.db #0x8e	; 142
      00257C 8E                    7489 	.db #0x8e	; 142
      00257D 8E                    7490 	.db #0x8e	; 142
      00257E 8E                    7491 	.db #0x8e	; 142
      00257F 8E                    7492 	.db #0x8e	; 142
      002580 00                    7493 	.db #0x00	; 0
      002581 8E                    7494 	.db #0x8e	; 142
      002582 8E                    7495 	.db #0x8e	; 142
      002583 00                    7496 	.db #0x00	; 0
      002584 00                    7497 	.db #0x00	; 0
      002585 00                    7498 	.db #0x00	; 0
      002586 8E                    7499 	.db #0x8e	; 142
      002587 8E                    7500 	.db #0x8e	; 142
      002588 00                    7501 	.db #0x00	; 0
      002589 8E                    7502 	.db #0x8e	; 142
      00258A 8E                    7503 	.db #0x8e	; 142
      00258B 00                    7504 	.db #0x00	; 0
      00258C 00                    7505 	.db #0x00	; 0
      00258D 00                    7506 	.db #0x00	; 0
      00258E 8E                    7507 	.db #0x8e	; 142
      00258F 00                    7508 	.db #0x00	; 0
      002590 00                    7509 	.db #0x00	; 0
      002591 00                    7510 	.db #0x00	; 0
      002592 00                    7511 	.db #0x00	; 0
      002593 00                    7512 	.db #0x00	; 0
      002594 8E                    7513 	.db #0x8e	; 142
      002595 8E                    7514 	.db #0x8e	; 142
      002596 00                    7515 	.db #0x00	; 0
      002597 00                    7516 	.db #0x00	; 0
      002598 00                    7517 	.db #0x00	; 0
      002599 8E                    7518 	.db #0x8e	; 142
      00259A 8E                    7519 	.db #0x8e	; 142
      00259B 00                    7520 	.db #0x00	; 0
      00259C 00                    7521 	.db #0x00	; 0
      00259D 00                    7522 	.db #0x00	; 0
      00259E 8E                    7523 	.db #0x8e	; 142
      00259F 8E                    7524 	.db #0x8e	; 142
      0025A0                       7525 ___str_9:
      0025A0 50 52 45 53 53 20 54  7526 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0025B6 00                    7527 	.db 0x00
      0025B7                       7528 ___str_10:
      0025B7 41 4E 44 52 45 42 41  7529 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0025CB 00                    7530 	.db 0x00
      0025CC                       7531 ___str_11:
      0025CC 76 2E 3F 2E 3F 2E 3F  7532 	.ascii "v.?.?.?"
      0025D3 00                    7533 	.db 0x00
                                   7534 ;src\main.c:85: void main() {
                                   7535 ;	---------------------------------
                                   7536 ; Function main
                                   7537 ; ---------------------------------
      0025D4                       7538 _main::
                                   7539 ;src\main.c:87: while(TRUE) {
      0025D4                       7540 00102$:
                                   7541 ;src\main.c:91: TitleScreen();
      0025D4 CDrB1r22         [17] 7542 	call	_TitleScreen
                                   7543 ;src\main.c:93: InitGame();
      0025D7 CDr82r20         [17] 7544 	call	_InitGame
                                   7545 ;src\main.c:96: }
      0025DA 18 F8            [12] 7546 	jr	00102$
                                   7547 	.area _CODE
                                   7548 	.area _INITIALIZER
      000000                       7549 __xinit__gameOver:
      000000 00                    7550 	.db #0x00	; 0
      000001                       7551 __xinit__col:
      000001 00                    7552 	.db #0x00	; 0
      000002                       7553 __xinit__line:
      000002 00                    7554 	.db #0x00	; 0
      000003                       7555 __xinit__counter:
      000003 00                    7556 	.db #0x00	; 0
      000004                       7557 __xinit__blocksRemoved:
      000004 00 00                 7558 	.dw #0x0000
      000006                       7559 __xinit__level:
      000006 01                    7560 	.db #0x01	; 1
      000007                       7561 __xinit__newLevel:
      000007 00                    7562 	.db #0x00	; 0
      000008                       7563 __xinit__rndSeed:
      000008 00                    7564 	.db #0x00	; 0
      000009                       7565 __xinit__d_col:
      000009 00                    7566 	.db #0x00	; 0
      00000A                       7567 __xinit__d_line:
      00000A 00                    7568 	.db #0x00	; 0
      00000B                       7569 __xinit__d_value:
      00000B 00                    7570 	.db #0x00	; 0
                                   7571 	.area _CABS (ABS)
