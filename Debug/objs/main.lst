                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _DrawBackground
                                     36 	.globl _DrawScore
                                     37 	.globl _DrawColumn
                                     38 	.globl _DrawNumber
                                     39 	.globl _DrawString
                                     40 	.globl _DrawChar
                                     41 	.globl _DrawExplosionSprite
                                     42 	.globl _HideExplosionSprite
                                     43 	.globl _HideHitSprite
                                     44 	.globl _DrawHitSprite
                                     45 	.globl _HideArrowSprite
                                     46 	.globl _DrawArrowSprite
                                     47 	.globl _GetRandomInInterval
                                     48 	.globl _GetRandom
                                     49 	.globl _InitRnd
                                     50 	.globl _Power
                                     51 	.globl _Wait
                                     52 	.globl _SNSMAT
                                     53 	.globl _GTTRIG
                                     54 	.globl _GTSTCK
                                     55 	.globl _BEEP
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _d_value
                                     67 	.globl _d_line
                                     68 	.globl _d_col
                                     69 	.globl _rndSeed
                                     70 	.globl _newLevel
                                     71 	.globl _level
                                     72 	.globl _blocksRemoved
                                     73 	.globl _counter
                                     74 	.globl _line
                                     75 	.globl _col
                                     76 	.globl _gameOver
                                     77 	.globl _Rand_x
                                     78 	.globl _Rand_c
                                     79 	.globl _Rand_b
                                     80 	.globl _Rand_a
                                     81 	.globl _speed
                                     82 	.globl _bottomPiece
                                     83 	.globl _midPiece
                                     84 	.globl _topPiece
                                     85 	.globl _playfieldTemp
                                     86 	.globl _playfield
                                     87 	.globl _GETPNT
                                     88 	.globl _PUTPNT
                                     89 	.globl _REPCNT
                                     90 	.globl _SCNCNT
                                     91 	.globl _ATRBYT
                                     92 	.globl _CMASK
                                     93 	.globl _CLOC
                                     94 	.globl _BDRCLR
                                     95 	.globl _BAKCLR
                                     96 	.globl _FORCLR
                                     97 	.globl _TRGFLG
                                     98 	.globl _STATFL
                                     99 	.globl _MSX_vdp_regs
                                    100 	.globl _CNSDFG
                                    101 	.globl _CSRX
                                    102 	.globl _CSRY
                                    103 	.globl _MSX_modedata_screen3
                                    104 	.globl _MSX_modedata_screen2
                                    105 	.globl _MSX_modedata_screen1
                                    106 	.globl _MSX_modedata_screen0
                                    107 	.globl _CLIKSW
                                    108 	.globl _JIFFY
                                    109 	.globl _CLMLST
                                    110 	.globl _CRTCNT
                                    111 	.globl _LINLEN
                                    112 	.globl _LINL32
                                    113 	.globl _LINL40
                                    114 	.globl _MSX_charset
                                    115 	.globl _FONT
                                    116 	.globl _pieces
                                    117 	.globl _MSX_version
                                    118 	.globl _MSX_vdp_port_write
                                    119 	.globl _MSX_vdp_port_read
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 ;--------------------------------------------------------
                                    124 ; ram data
                                    125 ;--------------------------------------------------------
                                    126 	.area _DATA
                           000004   127 _MSX_charset	=	0x0004
                           00F3AE   128 _LINL40	=	0xf3ae
                           00F3AF   129 _LINL32	=	0xf3af
                           00F3B0   130 _LINLEN	=	0xf3b0
                           00F3B1   131 _CRTCNT	=	0xf3b1
                           00F3B1   132 _CLMLST	=	0xf3b1
                           00FC9E   133 _JIFFY	=	0xfc9e
                           00F3DB   134 _CLIKSW	=	0xf3db
                           00F3B3   135 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   136 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   137 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   138 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   139 _CSRY	=	0xf3dc
                           00F3DD   140 _CSRX	=	0xf3dd
                           00F3DE   141 _CNSDFG	=	0xf3de
                           00F3DF   142 _MSX_vdp_regs	=	0xf3df
                           00F3E7   143 _STATFL	=	0xf3e7
                           00F3E8   144 _TRGFLG	=	0xf3e8
                           00F3E9   145 _FORCLR	=	0xf3e9
                           00F3EA   146 _BAKCLR	=	0xf3ea
                           00F3EB   147 _BDRCLR	=	0xf3eb
                           00F92A   148 _CLOC	=	0xf92a
                           00F92C   149 _CMASK	=	0xf92c
                           00F3F2   150 _ATRBYT	=	0xf3f2
                           00F3F6   151 _SCNCNT	=	0xf3f6
                           00F3F7   152 _REPCNT	=	0xf3f7
                           00F3F8   153 _PUTPNT	=	0xf3f8
                           00F3FA   154 _GETPNT	=	0xf3fa
      000000                        155 _playfield::
      000000                        156 	.ds 72
      000048                        157 _playfieldTemp::
      000048                        158 	.ds 72
      000090                        159 _topPiece::
      000090                        160 	.ds 1
      000091                        161 _midPiece::
      000091                        162 	.ds 1
      000092                        163 _bottomPiece::
      000092                        164 	.ds 1
      000093                        165 _speed::
      000093                        166 	.ds 1
      000094                        167 _Rand_a::
      000094                        168 	.ds 1
      000095                        169 _Rand_b::
      000095                        170 	.ds 1
      000096                        171 _Rand_c::
      000096                        172 	.ds 1
      000097                        173 _Rand_x::
      000097                        174 	.ds 1
                                    175 ;--------------------------------------------------------
                                    176 ; ram data
                                    177 ;--------------------------------------------------------
                                    178 	.area _INITIALIZED
      000000                        179 _gameOver::
      000000                        180 	.ds 1
      000001                        181 _col::
      000001                        182 	.ds 1
      000002                        183 _line::
      000002                        184 	.ds 1
      000003                        185 _counter::
      000003                        186 	.ds 1
      000004                        187 _blocksRemoved::
      000004                        188 	.ds 2
      000006                        189 _level::
      000006                        190 	.ds 1
      000007                        191 _newLevel::
      000007                        192 	.ds 1
      000008                        193 _rndSeed::
      000008                        194 	.ds 1
      000009                        195 _d_col::
      000009                        196 	.ds 1
      00000A                        197 _d_line::
      00000A                        198 	.ds 1
      00000B                        199 _d_value::
      00000B                        200 	.ds 1
                                    201 ;--------------------------------------------------------
                                    202 ; absolute external ram data
                                    203 ;--------------------------------------------------------
                                    204 	.area _DABS (ABS)
                                    205 ;--------------------------------------------------------
                                    206 ; global & static initialisations
                                    207 ;--------------------------------------------------------
                                    208 	.area _HOME
                                    209 	.area _GSINIT
                                    210 	.area _GSFINAL
                                    211 	.area _GSINIT
                                    212 ;--------------------------------------------------------
                                    213 ; Home
                                    214 ;--------------------------------------------------------
                                    215 	.area _HOME
                                    216 	.area _HOME
                                    217 ;--------------------------------------------------------
                                    218 ; code
                                    219 ;--------------------------------------------------------
                                    220 	.area _CODE
                                    221 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    222 ;	---------------------------------
                                    223 ; Function Wait
                                    224 ; ---------------------------------
      000000                        225 _Wait::
                                    226 ;src\/Common.h:2: do {
      000000 D1               [10]  227 	pop	de
      000001 C1               [10]  228 	pop	bc
      000002 C5               [11]  229 	push	bc
      000003 D5               [11]  230 	push	de
      000004                        231 00104$:
                                    232 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  233 	ld	de, (_JIFFY)
                                    234 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        235 00101$:
      000008 2A 9E FC         [16]  236 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  237 	cp	a, a
      00000C ED 52            [15]  238 	sbc	hl, de
      00000E 28 F8            [12]  239 	jr	Z, 00101$
                                    240 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  241 	ld	e, c
      000011 50               [ 4]  242 	ld	d, b
      000012 0B               [ 6]  243 	dec	bc
      000013 7A               [ 4]  244 	ld	a, d
      000014 B3               [ 4]  245 	or	a, e
      000015 20 ED            [12]  246 	jr	NZ, 00104$
                                    247 ;src\/Common.h:8: }
      000017 C9               [10]  248 	ret
                           000006   249 _MSX_vdp_port_read	=	0x0006
                           000007   250 _MSX_vdp_port_write	=	0x0007
                           00002D   251 _MSX_version	=	0x002d
      000018                        252 _pieces:
      000018 04                     253 	.db #0x04	; 4
      000019 08                     254 	.db #0x08	; 8
      00001A 0C                     255 	.db #0x0c	; 12
      00001B 10                     256 	.db #0x10	; 16
      00001C 14                     257 	.db #0x14	; 20
                                    258 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    259 ;	---------------------------------
                                    260 ; Function Power
                                    261 ; ---------------------------------
      00001D                        262 _Power::
      00001D DD E5            [15]  263 	push	ix
      00001F DD 21 00 00      [14]  264 	ld	ix,#0
      000023 DD 39            [15]  265 	add	ix,sp
                                    266 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  267 	ld	c, 4 (ix)
      000028 06 00            [ 7]  268 	ld	b, #0x00
      00002A 69               [ 4]  269 	ld	l, c
      00002B 60               [ 4]  270 	ld	h, b
                                    271 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  272 	ld	a, 5 (ix)
      00002F B7               [ 4]  273 	or	a, a
      000030 20 05            [12]  274 	jr	NZ, 00111$
      000032 21 01 00         [10]  275 	ld	hl, #0x0001
      000035 18 16            [12]  276 	jr	00107$
                                    277 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        278 00111$:
      000037 1E 01            [ 7]  279 	ld	e, #0x01
      000039                        280 00105$:
      000039 7B               [ 4]  281 	ld	a, e
      00003A DD 96 05         [19]  282 	sub	a, 5 (ix)
      00003D 30 0E            [12]  283 	jr	NC, 00103$
                                    284 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  285 	push	bc
      000040 D5               [11]  286 	push	de
      000041 C5               [11]  287 	push	bc
      000042 E5               [11]  288 	push	hl
      000043 CDr00r00         [17]  289 	call	__mulint
      000046 F1               [10]  290 	pop	af
      000047 F1               [10]  291 	pop	af
      000048 D1               [10]  292 	pop	de
      000049 C1               [10]  293 	pop	bc
                                    294 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  295 	inc	e
      00004B 18 EC            [12]  296 	jr	00105$
      00004D                        297 00103$:
                                    298 ;src\/Math.h:10: return power;
      00004D                        299 00107$:
                                    300 ;src\/Math.h:11: }
      00004D DD E1            [14]  301 	pop	ix
      00004F C9               [10]  302 	ret
                                    303 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    304 ;	---------------------------------
                                    305 ; Function InitRnd
                                    306 ; ---------------------------------
      000050                        307 _InitRnd::
                                    308 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  309 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  310 	ld	hl, #2
      000056 39               [11]  311 	add	hl, sp
      000057 AE               [ 7]  312 	xor	a, (hl)
      000058 32r94r00         [13]  313 	ld	(_Rand_a+0), a
                                    314 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  315 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  316 	ld	hl, #3
      000061 39               [11]  317 	add	hl, sp
      000062 AE               [ 7]  318 	xor	a, (hl)
      000063 32r95r00         [13]  319 	ld	(_Rand_b+0), a
                                    320 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  321 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  322 	ld	hl, #4
      00006C 39               [11]  323 	add	hl, sp
      00006D AE               [ 7]  324 	xor	a, (hl)
      00006E 32r96r00         [13]  325 	ld	(_Rand_c+0), a
                                    326 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  327 	ld	hl, #_Rand_x
      000074 34               [11]  328 	inc	(hl)
                                    329 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  330 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  331 	ld	hl, #_Rand_c
      00007B AE               [ 7]  332 	xor	a, (hl)
      00007C 21r97r00         [10]  333 	ld	hl, #_Rand_x
      00007F AE               [ 7]  334 	xor	a, (hl)
      000080 32r94r00         [13]  335 	ld	(_Rand_a+0), a
                                    336 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  337 	ld	hl, #_Rand_b
      000086 7E               [ 7]  338 	ld	a, (hl)
      000087 FD 21r94r00      [14]  339 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  340 	add	a, 0 (iy)
      00008E 77               [ 7]  341 	ld	(hl), a
                                    342 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  343 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  344 	srl	a
      000094 21r96r00         [10]  345 	ld	hl, #_Rand_c
      000097 86               [ 7]  346 	add	a, (hl)
      000098 FD 21r94r00      [14]  347 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  348 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  349 	ld	(_Rand_c+0), a
                                    350 ;src\/Random.h:38: }
      0000A2 C9               [10]  351 	ret
                                    352 ;src\/Random.h:40: unsigned char GetRandom() {
                                    353 ;	---------------------------------
                                    354 ; Function GetRandom
                                    355 ; ---------------------------------
      0000A3                        356 _GetRandom::
                                    357 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  358 	ld	hl, #_Rand_x
      0000A6 34               [11]  359 	inc	(hl)
                                    360 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  361 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  362 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  363 	xor	a, (hl)
      0000AE 21r97r00         [10]  364 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  365 	xor	a, (hl)
      0000B2 32r94r00         [13]  366 	ld	(_Rand_a+0), a
                                    367 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  368 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  369 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  370 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  371 	add	a, 0 (iy)
      0000C0 77               [ 7]  372 	ld	(hl), a
                                    373 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  374 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  375 	srl	a
      0000C6 21r96r00         [10]  376 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  377 	add	a, (hl)
      0000CA FD 21r94r00      [14]  378 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  379 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  380 	ld	(_Rand_c+0), a
                                    381 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  382 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  383 	ld	l, a
                                    384 ;src\/Random.h:47: }
      0000D8 C9               [10]  385 	ret
                                    386 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    387 ;	---------------------------------
                                    388 ; Function GetRandomInInterval
                                    389 ; ---------------------------------
      0000D9                        390 _GetRandomInInterval::
                                    391 ;src\/Random.h:53: do {
      0000D9                        392 00101$:
                                    393 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  394 	call	_GetRandom
      0000DC 7D               [ 4]  395 	ld	a, l
      0000DD 21 03 00         [10]  396 	ld	hl, #3
      0000E0 39               [11]  397 	add	hl, sp
      0000E1 A6               [ 7]  398 	and	a, (hl)
      0000E2 4F               [ 4]  399 	ld	c, a
                                    400 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  401 	ld	hl, #2
      0000E6 39               [11]  402 	add	hl, sp
      0000E7 7E               [ 7]  403 	ld	a, (hl)
      0000E8 91               [ 4]  404 	sub	a, c
      0000E9 38 EE            [12]  405 	jr	C, 00101$
                                    406 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  407 	ld	l, c
                                    408 ;src\/Random.h:59: }
      0000EC C9               [10]  409 	ret
                                    410 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    411 ;	---------------------------------
                                    412 ; Function DrawArrowSprite
                                    413 ; ---------------------------------
      0000ED                        414 _DrawArrowSprite::
      0000ED DD E5            [15]  415 	push	ix
      0000EF DD 21 00 00      [14]  416 	ld	ix,#0
      0000F3 DD 39            [15]  417 	add	ix,sp
      0000F5 21 F8 FF         [10]  418 	ld	hl, #-8
      0000F8 39               [11]  419 	add	hl, sp
      0000F9 F9               [ 6]  420 	ld	sp, hl
                                    421 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  422 	ld	hl, #0
      0000FD 39               [11]  423 	add	hl, sp
      0000FE EB               [ 4]  424 	ex	de, hl
      0000FF 3E 0F            [ 7]  425 	ld	a, #0x0f
      000101 12               [ 7]  426 	ld	(de), a
      000102 6B               [ 4]  427 	ld	l, e
      000103 62               [ 4]  428 	ld	h, d
      000104 23               [ 6]  429 	inc	hl
      000105 36 0E            [10]  430 	ld	(hl), #0x0e
      000107 6B               [ 4]  431 	ld	l, e
      000108 62               [ 4]  432 	ld	h, d
      000109 23               [ 6]  433 	inc	hl
      00010A 23               [ 6]  434 	inc	hl
      00010B 36 05            [10]  435 	ld	(hl), #0x05
      00010D 6B               [ 4]  436 	ld	l, e
      00010E 62               [ 4]  437 	ld	h, d
      00010F 23               [ 6]  438 	inc	hl
      000110 23               [ 6]  439 	inc	hl
      000111 23               [ 6]  440 	inc	hl
      000112 36 04            [10]  441 	ld	(hl), #0x04
      000114 21 04 00         [10]  442 	ld	hl, #0x0004
      000117 19               [11]  443 	add	hl, de
      000118 36 04            [10]  444 	ld	(hl), #0x04
      00011A 21 05 00         [10]  445 	ld	hl, #0x0005
      00011D 19               [11]  446 	add	hl, de
      00011E 36 05            [10]  447 	ld	(hl), #0x05
      000120 21 06 00         [10]  448 	ld	hl, #0x0006
      000123 19               [11]  449 	add	hl, de
      000124 36 0E            [10]  450 	ld	(hl), #0x0e
      000126 21 07 00         [10]  451 	ld	hl, #0x0007
      000129 19               [11]  452 	add	hl, de
      00012A 36 0F            [10]  453 	ld	(hl), #0x0f
                                    454 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  455 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  456 	ld	a, l
      000130 E6 0E            [ 7]  457 	and	a, #0x0e
      000132 6F               [ 4]  458 	ld	l, a
      000133 26 00            [ 7]  459 	ld	h, #0x00
      000135 CB 3C            [ 8]  460 	srl	h
      000137 CB 1D            [ 8]  461 	rr	l
                                    462 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  463 	ld	a, 5 (ix)
      00013C 3D               [ 4]  464 	dec	a
      00013D E5               [11]  465 	push	hl
      00013E D5               [11]  466 	push	de
      00013F F5               [11]  467 	push	af
      000140 33               [ 6]  468 	inc	sp
      000141 01 00 1B         [10]  469 	ld	bc, #0x1b00
      000144 C5               [11]  470 	push	bc
      000145 CDr00r00         [17]  471 	call	_WRTVRM
      000148 F1               [10]  472 	pop	af
      000149 33               [ 6]  473 	inc	sp
      00014A DD 7E 04         [19]  474 	ld	a, 4 (ix)
      00014D F5               [11]  475 	push	af
      00014E 33               [ 6]  476 	inc	sp
      00014F 01 01 1B         [10]  477 	ld	bc, #0x1b01
      000152 C5               [11]  478 	push	bc
      000153 CDr00r00         [17]  479 	call	_WRTVRM
      000156 F1               [10]  480 	pop	af
      000157 33               [ 6]  481 	inc	sp
      000158 AF               [ 4]  482 	xor	a, a
      000159 F5               [11]  483 	push	af
      00015A 33               [ 6]  484 	inc	sp
      00015B 01 02 1B         [10]  485 	ld	bc, #0x1b02
      00015E C5               [11]  486 	push	bc
      00015F CDr00r00         [17]  487 	call	_WRTVRM
      000162 F1               [10]  488 	pop	af
      000163 33               [ 6]  489 	inc	sp
      000164 D1               [10]  490 	pop	de
      000165 E1               [10]  491 	pop	hl
                                    492 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  493 	ld	h, #0x00
      000168 19               [11]  494 	add	hl, de
      000169 7E               [ 7]  495 	ld	a, (hl)
      00016A F5               [11]  496 	push	af
      00016B 33               [ 6]  497 	inc	sp
      00016C 21 03 1B         [10]  498 	ld	hl, #0x1b03
      00016F E5               [11]  499 	push	hl
      000170 CDr00r00         [17]  500 	call	_WRTVRM
                                    501 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  502 	ld	sp,ix
      000175 DD E1            [14]  503 	pop	ix
      000177 C9               [10]  504 	ret
      000178                        505 _FONT:
      000178 00                     506 	.db #0x00	; 0
      000179 00                     507 	.db #0x00	; 0
      00017A 00                     508 	.db #0x00	; 0
      00017B 00                     509 	.db #0x00	; 0
      00017C 00                     510 	.db #0x00	; 0
      00017D 00                     511 	.db #0x00	; 0
      00017E 00                     512 	.db #0x00	; 0
      00017F 00                     513 	.db #0x00	; 0
      000180 30                     514 	.db #0x30	; 48	'0'
      000181 78                     515 	.db #0x78	; 120	'x'
      000182 78                     516 	.db #0x78	; 120	'x'
      000183 30                     517 	.db #0x30	; 48	'0'
      000184 30                     518 	.db #0x30	; 48	'0'
      000185 00                     519 	.db #0x00	; 0
      000186 30                     520 	.db #0x30	; 48	'0'
      000187 00                     521 	.db #0x00	; 0
      000188 6C                     522 	.db #0x6c	; 108	'l'
      000189 6C                     523 	.db #0x6c	; 108	'l'
      00018A 6C                     524 	.db #0x6c	; 108	'l'
      00018B 00                     525 	.db #0x00	; 0
      00018C 00                     526 	.db #0x00	; 0
      00018D 00                     527 	.db #0x00	; 0
      00018E 00                     528 	.db #0x00	; 0
      00018F 00                     529 	.db #0x00	; 0
      000190 6C                     530 	.db #0x6c	; 108	'l'
      000191 6C                     531 	.db #0x6c	; 108	'l'
      000192 FE                     532 	.db #0xfe	; 254
      000193 6C                     533 	.db #0x6c	; 108	'l'
      000194 FE                     534 	.db #0xfe	; 254
      000195 6C                     535 	.db #0x6c	; 108	'l'
      000196 6C                     536 	.db #0x6c	; 108	'l'
      000197 00                     537 	.db #0x00	; 0
      000198 30                     538 	.db #0x30	; 48	'0'
      000199 7C                     539 	.db #0x7c	; 124
      00019A C0                     540 	.db #0xc0	; 192
      00019B 78                     541 	.db #0x78	; 120	'x'
      00019C 0C                     542 	.db #0x0c	; 12
      00019D F8                     543 	.db #0xf8	; 248
      00019E 30                     544 	.db #0x30	; 48	'0'
      00019F 00                     545 	.db #0x00	; 0
      0001A0 00                     546 	.db #0x00	; 0
      0001A1 C6                     547 	.db #0xc6	; 198
      0001A2 CC                     548 	.db #0xcc	; 204
      0001A3 18                     549 	.db #0x18	; 24
      0001A4 30                     550 	.db #0x30	; 48	'0'
      0001A5 66                     551 	.db #0x66	; 102	'f'
      0001A6 C6                     552 	.db #0xc6	; 198
      0001A7 00                     553 	.db #0x00	; 0
      0001A8 38                     554 	.db #0x38	; 56	'8'
      0001A9 6C                     555 	.db #0x6c	; 108	'l'
      0001AA 38                     556 	.db #0x38	; 56	'8'
      0001AB 76                     557 	.db #0x76	; 118	'v'
      0001AC DC                     558 	.db #0xdc	; 220
      0001AD CC                     559 	.db #0xcc	; 204
      0001AE 76                     560 	.db #0x76	; 118	'v'
      0001AF 00                     561 	.db #0x00	; 0
      0001B0 60                     562 	.db #0x60	; 96
      0001B1 60                     563 	.db #0x60	; 96
      0001B2 C0                     564 	.db #0xc0	; 192
      0001B3 00                     565 	.db #0x00	; 0
      0001B4 00                     566 	.db #0x00	; 0
      0001B5 00                     567 	.db #0x00	; 0
      0001B6 00                     568 	.db #0x00	; 0
      0001B7 00                     569 	.db #0x00	; 0
      0001B8 18                     570 	.db #0x18	; 24
      0001B9 30                     571 	.db #0x30	; 48	'0'
      0001BA 60                     572 	.db #0x60	; 96
      0001BB 60                     573 	.db #0x60	; 96
      0001BC 60                     574 	.db #0x60	; 96
      0001BD 30                     575 	.db #0x30	; 48	'0'
      0001BE 18                     576 	.db #0x18	; 24
      0001BF 00                     577 	.db #0x00	; 0
      0001C0 60                     578 	.db #0x60	; 96
      0001C1 30                     579 	.db #0x30	; 48	'0'
      0001C2 18                     580 	.db #0x18	; 24
      0001C3 18                     581 	.db #0x18	; 24
      0001C4 18                     582 	.db #0x18	; 24
      0001C5 30                     583 	.db #0x30	; 48	'0'
      0001C6 60                     584 	.db #0x60	; 96
      0001C7 00                     585 	.db #0x00	; 0
      0001C8 00                     586 	.db #0x00	; 0
      0001C9 66                     587 	.db #0x66	; 102	'f'
      0001CA 3C                     588 	.db #0x3c	; 60
      0001CB FF                     589 	.db #0xff	; 255
      0001CC 3C                     590 	.db #0x3c	; 60
      0001CD 66                     591 	.db #0x66	; 102	'f'
      0001CE 00                     592 	.db #0x00	; 0
      0001CF 00                     593 	.db #0x00	; 0
      0001D0 00                     594 	.db #0x00	; 0
      0001D1 30                     595 	.db #0x30	; 48	'0'
      0001D2 30                     596 	.db #0x30	; 48	'0'
      0001D3 FC                     597 	.db #0xfc	; 252
      0001D4 30                     598 	.db #0x30	; 48	'0'
      0001D5 30                     599 	.db #0x30	; 48	'0'
      0001D6 00                     600 	.db #0x00	; 0
      0001D7 00                     601 	.db #0x00	; 0
      0001D8 00                     602 	.db #0x00	; 0
      0001D9 00                     603 	.db #0x00	; 0
      0001DA 00                     604 	.db #0x00	; 0
      0001DB 00                     605 	.db #0x00	; 0
      0001DC 00                     606 	.db #0x00	; 0
      0001DD 30                     607 	.db #0x30	; 48	'0'
      0001DE 30                     608 	.db #0x30	; 48	'0'
      0001DF 60                     609 	.db #0x60	; 96
      0001E0 00                     610 	.db #0x00	; 0
      0001E1 00                     611 	.db #0x00	; 0
      0001E2 00                     612 	.db #0x00	; 0
      0001E3 FC                     613 	.db #0xfc	; 252
      0001E4 00                     614 	.db #0x00	; 0
      0001E5 00                     615 	.db #0x00	; 0
      0001E6 00                     616 	.db #0x00	; 0
      0001E7 00                     617 	.db #0x00	; 0
      0001E8 00                     618 	.db #0x00	; 0
      0001E9 00                     619 	.db #0x00	; 0
      0001EA 00                     620 	.db #0x00	; 0
      0001EB 00                     621 	.db #0x00	; 0
      0001EC 00                     622 	.db #0x00	; 0
      0001ED 30                     623 	.db #0x30	; 48	'0'
      0001EE 30                     624 	.db #0x30	; 48	'0'
      0001EF 00                     625 	.db #0x00	; 0
      0001F0 06                     626 	.db #0x06	; 6
      0001F1 0C                     627 	.db #0x0c	; 12
      0001F2 18                     628 	.db #0x18	; 24
      0001F3 30                     629 	.db #0x30	; 48	'0'
      0001F4 60                     630 	.db #0x60	; 96
      0001F5 C0                     631 	.db #0xc0	; 192
      0001F6 80                     632 	.db #0x80	; 128
      0001F7 00                     633 	.db #0x00	; 0
      0001F8 7C                     634 	.db #0x7c	; 124
      0001F9 C6                     635 	.db #0xc6	; 198
      0001FA CE                     636 	.db #0xce	; 206
      0001FB DE                     637 	.db #0xde	; 222
      0001FC F6                     638 	.db #0xf6	; 246
      0001FD E6                     639 	.db #0xe6	; 230
      0001FE 7C                     640 	.db #0x7c	; 124
      0001FF 00                     641 	.db #0x00	; 0
      000200 30                     642 	.db #0x30	; 48	'0'
      000201 70                     643 	.db #0x70	; 112	'p'
      000202 30                     644 	.db #0x30	; 48	'0'
      000203 30                     645 	.db #0x30	; 48	'0'
      000204 30                     646 	.db #0x30	; 48	'0'
      000205 30                     647 	.db #0x30	; 48	'0'
      000206 FC                     648 	.db #0xfc	; 252
      000207 00                     649 	.db #0x00	; 0
      000208 78                     650 	.db #0x78	; 120	'x'
      000209 CC                     651 	.db #0xcc	; 204
      00020A 0C                     652 	.db #0x0c	; 12
      00020B 38                     653 	.db #0x38	; 56	'8'
      00020C 60                     654 	.db #0x60	; 96
      00020D C4                     655 	.db #0xc4	; 196
      00020E FC                     656 	.db #0xfc	; 252
      00020F 00                     657 	.db #0x00	; 0
      000210 78                     658 	.db #0x78	; 120	'x'
      000211 CC                     659 	.db #0xcc	; 204
      000212 0C                     660 	.db #0x0c	; 12
      000213 38                     661 	.db #0x38	; 56	'8'
      000214 0C                     662 	.db #0x0c	; 12
      000215 CC                     663 	.db #0xcc	; 204
      000216 78                     664 	.db #0x78	; 120	'x'
      000217 00                     665 	.db #0x00	; 0
      000218 1C                     666 	.db #0x1c	; 28
      000219 3C                     667 	.db #0x3c	; 60
      00021A 6C                     668 	.db #0x6c	; 108	'l'
      00021B CC                     669 	.db #0xcc	; 204
      00021C FE                     670 	.db #0xfe	; 254
      00021D 0C                     671 	.db #0x0c	; 12
      00021E 1E                     672 	.db #0x1e	; 30
      00021F 00                     673 	.db #0x00	; 0
      000220 FC                     674 	.db #0xfc	; 252
      000221 C0                     675 	.db #0xc0	; 192
      000222 F8                     676 	.db #0xf8	; 248
      000223 0C                     677 	.db #0x0c	; 12
      000224 0C                     678 	.db #0x0c	; 12
      000225 CC                     679 	.db #0xcc	; 204
      000226 78                     680 	.db #0x78	; 120	'x'
      000227 00                     681 	.db #0x00	; 0
      000228 38                     682 	.db #0x38	; 56	'8'
      000229 60                     683 	.db #0x60	; 96
      00022A C0                     684 	.db #0xc0	; 192
      00022B F8                     685 	.db #0xf8	; 248
      00022C CC                     686 	.db #0xcc	; 204
      00022D CC                     687 	.db #0xcc	; 204
      00022E 78                     688 	.db #0x78	; 120	'x'
      00022F 00                     689 	.db #0x00	; 0
      000230 FC                     690 	.db #0xfc	; 252
      000231 CC                     691 	.db #0xcc	; 204
      000232 0C                     692 	.db #0x0c	; 12
      000233 18                     693 	.db #0x18	; 24
      000234 30                     694 	.db #0x30	; 48	'0'
      000235 30                     695 	.db #0x30	; 48	'0'
      000236 30                     696 	.db #0x30	; 48	'0'
      000237 00                     697 	.db #0x00	; 0
      000238 78                     698 	.db #0x78	; 120	'x'
      000239 CC                     699 	.db #0xcc	; 204
      00023A CC                     700 	.db #0xcc	; 204
      00023B 78                     701 	.db #0x78	; 120	'x'
      00023C CC                     702 	.db #0xcc	; 204
      00023D CC                     703 	.db #0xcc	; 204
      00023E 78                     704 	.db #0x78	; 120	'x'
      00023F 00                     705 	.db #0x00	; 0
      000240 78                     706 	.db #0x78	; 120	'x'
      000241 CC                     707 	.db #0xcc	; 204
      000242 CC                     708 	.db #0xcc	; 204
      000243 7C                     709 	.db #0x7c	; 124
      000244 0C                     710 	.db #0x0c	; 12
      000245 18                     711 	.db #0x18	; 24
      000246 70                     712 	.db #0x70	; 112	'p'
      000247 00                     713 	.db #0x00	; 0
      000248 00                     714 	.db #0x00	; 0
      000249 30                     715 	.db #0x30	; 48	'0'
      00024A 30                     716 	.db #0x30	; 48	'0'
      00024B 00                     717 	.db #0x00	; 0
      00024C 00                     718 	.db #0x00	; 0
      00024D 30                     719 	.db #0x30	; 48	'0'
      00024E 30                     720 	.db #0x30	; 48	'0'
      00024F 00                     721 	.db #0x00	; 0
      000250 00                     722 	.db #0x00	; 0
      000251 30                     723 	.db #0x30	; 48	'0'
      000252 30                     724 	.db #0x30	; 48	'0'
      000253 00                     725 	.db #0x00	; 0
      000254 30                     726 	.db #0x30	; 48	'0'
      000255 30                     727 	.db #0x30	; 48	'0'
      000256 60                     728 	.db #0x60	; 96
      000257 00                     729 	.db #0x00	; 0
      000258 18                     730 	.db #0x18	; 24
      000259 30                     731 	.db #0x30	; 48	'0'
      00025A 60                     732 	.db #0x60	; 96
      00025B C0                     733 	.db #0xc0	; 192
      00025C 60                     734 	.db #0x60	; 96
      00025D 30                     735 	.db #0x30	; 48	'0'
      00025E 18                     736 	.db #0x18	; 24
      00025F 00                     737 	.db #0x00	; 0
      000260 00                     738 	.db #0x00	; 0
      000261 00                     739 	.db #0x00	; 0
      000262 FC                     740 	.db #0xfc	; 252
      000263 00                     741 	.db #0x00	; 0
      000264 00                     742 	.db #0x00	; 0
      000265 FC                     743 	.db #0xfc	; 252
      000266 00                     744 	.db #0x00	; 0
      000267 00                     745 	.db #0x00	; 0
      000268 60                     746 	.db #0x60	; 96
      000269 30                     747 	.db #0x30	; 48	'0'
      00026A 18                     748 	.db #0x18	; 24
      00026B 0C                     749 	.db #0x0c	; 12
      00026C 18                     750 	.db #0x18	; 24
      00026D 30                     751 	.db #0x30	; 48	'0'
      00026E 60                     752 	.db #0x60	; 96
      00026F 00                     753 	.db #0x00	; 0
      000270 78                     754 	.db #0x78	; 120	'x'
      000271 CC                     755 	.db #0xcc	; 204
      000272 0C                     756 	.db #0x0c	; 12
      000273 18                     757 	.db #0x18	; 24
      000274 30                     758 	.db #0x30	; 48	'0'
      000275 00                     759 	.db #0x00	; 0
      000276 30                     760 	.db #0x30	; 48	'0'
      000277 00                     761 	.db #0x00	; 0
      000278 7C                     762 	.db #0x7c	; 124
      000279 C6                     763 	.db #0xc6	; 198
      00027A DE                     764 	.db #0xde	; 222
      00027B DE                     765 	.db #0xde	; 222
      00027C DE                     766 	.db #0xde	; 222
      00027D C0                     767 	.db #0xc0	; 192
      00027E 78                     768 	.db #0x78	; 120	'x'
      00027F 00                     769 	.db #0x00	; 0
      000280 30                     770 	.db #0x30	; 48	'0'
      000281 78                     771 	.db #0x78	; 120	'x'
      000282 CC                     772 	.db #0xcc	; 204
      000283 CC                     773 	.db #0xcc	; 204
      000284 FC                     774 	.db #0xfc	; 252
      000285 CC                     775 	.db #0xcc	; 204
      000286 CC                     776 	.db #0xcc	; 204
      000287 00                     777 	.db #0x00	; 0
      000288 FC                     778 	.db #0xfc	; 252
      000289 66                     779 	.db #0x66	; 102	'f'
      00028A 66                     780 	.db #0x66	; 102	'f'
      00028B 7C                     781 	.db #0x7c	; 124
      00028C 66                     782 	.db #0x66	; 102	'f'
      00028D 66                     783 	.db #0x66	; 102	'f'
      00028E FC                     784 	.db #0xfc	; 252
      00028F 00                     785 	.db #0x00	; 0
      000290 3C                     786 	.db #0x3c	; 60
      000291 66                     787 	.db #0x66	; 102	'f'
      000292 C0                     788 	.db #0xc0	; 192
      000293 C0                     789 	.db #0xc0	; 192
      000294 C0                     790 	.db #0xc0	; 192
      000295 66                     791 	.db #0x66	; 102	'f'
      000296 3C                     792 	.db #0x3c	; 60
      000297 00                     793 	.db #0x00	; 0
      000298 F8                     794 	.db #0xf8	; 248
      000299 6C                     795 	.db #0x6c	; 108	'l'
      00029A 66                     796 	.db #0x66	; 102	'f'
      00029B 66                     797 	.db #0x66	; 102	'f'
      00029C 66                     798 	.db #0x66	; 102	'f'
      00029D 6C                     799 	.db #0x6c	; 108	'l'
      00029E F8                     800 	.db #0xf8	; 248
      00029F 00                     801 	.db #0x00	; 0
      0002A0 FE                     802 	.db #0xfe	; 254
      0002A1 62                     803 	.db #0x62	; 98	'b'
      0002A2 68                     804 	.db #0x68	; 104	'h'
      0002A3 78                     805 	.db #0x78	; 120	'x'
      0002A4 68                     806 	.db #0x68	; 104	'h'
      0002A5 62                     807 	.db #0x62	; 98	'b'
      0002A6 FE                     808 	.db #0xfe	; 254
      0002A7 00                     809 	.db #0x00	; 0
      0002A8 FE                     810 	.db #0xfe	; 254
      0002A9 62                     811 	.db #0x62	; 98	'b'
      0002AA 68                     812 	.db #0x68	; 104	'h'
      0002AB 78                     813 	.db #0x78	; 120	'x'
      0002AC 68                     814 	.db #0x68	; 104	'h'
      0002AD 60                     815 	.db #0x60	; 96
      0002AE F0                     816 	.db #0xf0	; 240
      0002AF 00                     817 	.db #0x00	; 0
      0002B0 3C                     818 	.db #0x3c	; 60
      0002B1 66                     819 	.db #0x66	; 102	'f'
      0002B2 C0                     820 	.db #0xc0	; 192
      0002B3 C0                     821 	.db #0xc0	; 192
      0002B4 CE                     822 	.db #0xce	; 206
      0002B5 66                     823 	.db #0x66	; 102	'f'
      0002B6 3E                     824 	.db #0x3e	; 62
      0002B7 00                     825 	.db #0x00	; 0
      0002B8 CC                     826 	.db #0xcc	; 204
      0002B9 CC                     827 	.db #0xcc	; 204
      0002BA CC                     828 	.db #0xcc	; 204
      0002BB FC                     829 	.db #0xfc	; 252
      0002BC CC                     830 	.db #0xcc	; 204
      0002BD CC                     831 	.db #0xcc	; 204
      0002BE CC                     832 	.db #0xcc	; 204
      0002BF 00                     833 	.db #0x00	; 0
      0002C0 78                     834 	.db #0x78	; 120	'x'
      0002C1 30                     835 	.db #0x30	; 48	'0'
      0002C2 30                     836 	.db #0x30	; 48	'0'
      0002C3 30                     837 	.db #0x30	; 48	'0'
      0002C4 30                     838 	.db #0x30	; 48	'0'
      0002C5 30                     839 	.db #0x30	; 48	'0'
      0002C6 78                     840 	.db #0x78	; 120	'x'
      0002C7 00                     841 	.db #0x00	; 0
      0002C8 1E                     842 	.db #0x1e	; 30
      0002C9 0C                     843 	.db #0x0c	; 12
      0002CA 0C                     844 	.db #0x0c	; 12
      0002CB 0C                     845 	.db #0x0c	; 12
      0002CC CC                     846 	.db #0xcc	; 204
      0002CD CC                     847 	.db #0xcc	; 204
      0002CE 78                     848 	.db #0x78	; 120	'x'
      0002CF 00                     849 	.db #0x00	; 0
      0002D0 E6                     850 	.db #0xe6	; 230
      0002D1 66                     851 	.db #0x66	; 102	'f'
      0002D2 6C                     852 	.db #0x6c	; 108	'l'
      0002D3 78                     853 	.db #0x78	; 120	'x'
      0002D4 6C                     854 	.db #0x6c	; 108	'l'
      0002D5 66                     855 	.db #0x66	; 102	'f'
      0002D6 E6                     856 	.db #0xe6	; 230
      0002D7 00                     857 	.db #0x00	; 0
      0002D8 F0                     858 	.db #0xf0	; 240
      0002D9 60                     859 	.db #0x60	; 96
      0002DA 60                     860 	.db #0x60	; 96
      0002DB 60                     861 	.db #0x60	; 96
      0002DC 62                     862 	.db #0x62	; 98	'b'
      0002DD 66                     863 	.db #0x66	; 102	'f'
      0002DE FE                     864 	.db #0xfe	; 254
      0002DF 00                     865 	.db #0x00	; 0
      0002E0 C6                     866 	.db #0xc6	; 198
      0002E1 EE                     867 	.db #0xee	; 238
      0002E2 FE                     868 	.db #0xfe	; 254
      0002E3 FE                     869 	.db #0xfe	; 254
      0002E4 D6                     870 	.db #0xd6	; 214
      0002E5 C6                     871 	.db #0xc6	; 198
      0002E6 C6                     872 	.db #0xc6	; 198
      0002E7 00                     873 	.db #0x00	; 0
      0002E8 C6                     874 	.db #0xc6	; 198
      0002E9 E6                     875 	.db #0xe6	; 230
      0002EA F6                     876 	.db #0xf6	; 246
      0002EB DE                     877 	.db #0xde	; 222
      0002EC CE                     878 	.db #0xce	; 206
      0002ED C6                     879 	.db #0xc6	; 198
      0002EE C6                     880 	.db #0xc6	; 198
      0002EF 00                     881 	.db #0x00	; 0
      0002F0 38                     882 	.db #0x38	; 56	'8'
      0002F1 6C                     883 	.db #0x6c	; 108	'l'
      0002F2 C6                     884 	.db #0xc6	; 198
      0002F3 C6                     885 	.db #0xc6	; 198
      0002F4 C6                     886 	.db #0xc6	; 198
      0002F5 6C                     887 	.db #0x6c	; 108	'l'
      0002F6 38                     888 	.db #0x38	; 56	'8'
      0002F7 00                     889 	.db #0x00	; 0
      0002F8 FC                     890 	.db #0xfc	; 252
      0002F9 66                     891 	.db #0x66	; 102	'f'
      0002FA 66                     892 	.db #0x66	; 102	'f'
      0002FB 7C                     893 	.db #0x7c	; 124
      0002FC 60                     894 	.db #0x60	; 96
      0002FD 60                     895 	.db #0x60	; 96
      0002FE F0                     896 	.db #0xf0	; 240
      0002FF 00                     897 	.db #0x00	; 0
      000300 78                     898 	.db #0x78	; 120	'x'
      000301 CC                     899 	.db #0xcc	; 204
      000302 CC                     900 	.db #0xcc	; 204
      000303 CC                     901 	.db #0xcc	; 204
      000304 DC                     902 	.db #0xdc	; 220
      000305 78                     903 	.db #0x78	; 120	'x'
      000306 1C                     904 	.db #0x1c	; 28
      000307 00                     905 	.db #0x00	; 0
      000308 FC                     906 	.db #0xfc	; 252
      000309 66                     907 	.db #0x66	; 102	'f'
      00030A 66                     908 	.db #0x66	; 102	'f'
      00030B 7C                     909 	.db #0x7c	; 124
      00030C 6C                     910 	.db #0x6c	; 108	'l'
      00030D 66                     911 	.db #0x66	; 102	'f'
      00030E E6                     912 	.db #0xe6	; 230
      00030F 00                     913 	.db #0x00	; 0
      000310 78                     914 	.db #0x78	; 120	'x'
      000311 CC                     915 	.db #0xcc	; 204
      000312 E0                     916 	.db #0xe0	; 224
      000313 70                     917 	.db #0x70	; 112	'p'
      000314 1C                     918 	.db #0x1c	; 28
      000315 CC                     919 	.db #0xcc	; 204
      000316 78                     920 	.db #0x78	; 120	'x'
      000317 00                     921 	.db #0x00	; 0
      000318 FC                     922 	.db #0xfc	; 252
      000319 B4                     923 	.db #0xb4	; 180
      00031A 30                     924 	.db #0x30	; 48	'0'
      00031B 30                     925 	.db #0x30	; 48	'0'
      00031C 30                     926 	.db #0x30	; 48	'0'
      00031D 30                     927 	.db #0x30	; 48	'0'
      00031E 78                     928 	.db #0x78	; 120	'x'
      00031F 00                     929 	.db #0x00	; 0
      000320 CC                     930 	.db #0xcc	; 204
      000321 CC                     931 	.db #0xcc	; 204
      000322 CC                     932 	.db #0xcc	; 204
      000323 CC                     933 	.db #0xcc	; 204
      000324 CC                     934 	.db #0xcc	; 204
      000325 CC                     935 	.db #0xcc	; 204
      000326 FC                     936 	.db #0xfc	; 252
      000327 00                     937 	.db #0x00	; 0
      000328 CC                     938 	.db #0xcc	; 204
      000329 CC                     939 	.db #0xcc	; 204
      00032A CC                     940 	.db #0xcc	; 204
      00032B CC                     941 	.db #0xcc	; 204
      00032C CC                     942 	.db #0xcc	; 204
      00032D 78                     943 	.db #0x78	; 120	'x'
      00032E 30                     944 	.db #0x30	; 48	'0'
      00032F 00                     945 	.db #0x00	; 0
      000330 C6                     946 	.db #0xc6	; 198
      000331 C6                     947 	.db #0xc6	; 198
      000332 C6                     948 	.db #0xc6	; 198
      000333 D6                     949 	.db #0xd6	; 214
      000334 FE                     950 	.db #0xfe	; 254
      000335 EE                     951 	.db #0xee	; 238
      000336 C6                     952 	.db #0xc6	; 198
      000337 00                     953 	.db #0x00	; 0
      000338 C6                     954 	.db #0xc6	; 198
      000339 C6                     955 	.db #0xc6	; 198
      00033A 6C                     956 	.db #0x6c	; 108	'l'
      00033B 38                     957 	.db #0x38	; 56	'8'
      00033C 38                     958 	.db #0x38	; 56	'8'
      00033D 6C                     959 	.db #0x6c	; 108	'l'
      00033E C6                     960 	.db #0xc6	; 198
      00033F 00                     961 	.db #0x00	; 0
      000340 CC                     962 	.db #0xcc	; 204
      000341 CC                     963 	.db #0xcc	; 204
      000342 CC                     964 	.db #0xcc	; 204
      000343 78                     965 	.db #0x78	; 120	'x'
      000344 30                     966 	.db #0x30	; 48	'0'
      000345 30                     967 	.db #0x30	; 48	'0'
      000346 78                     968 	.db #0x78	; 120	'x'
      000347 00                     969 	.db #0x00	; 0
      000348 FE                     970 	.db #0xfe	; 254
      000349 C6                     971 	.db #0xc6	; 198
      00034A 8C                     972 	.db #0x8c	; 140
      00034B 18                     973 	.db #0x18	; 24
      00034C 32                     974 	.db #0x32	; 50	'2'
      00034D 66                     975 	.db #0x66	; 102	'f'
      00034E FE                     976 	.db #0xfe	; 254
      00034F 00                     977 	.db #0x00	; 0
      000350 78                     978 	.db #0x78	; 120	'x'
      000351 60                     979 	.db #0x60	; 96
      000352 60                     980 	.db #0x60	; 96
      000353 60                     981 	.db #0x60	; 96
      000354 60                     982 	.db #0x60	; 96
      000355 60                     983 	.db #0x60	; 96
      000356 78                     984 	.db #0x78	; 120	'x'
      000357 00                     985 	.db #0x00	; 0
      000358 C0                     986 	.db #0xc0	; 192
      000359 60                     987 	.db #0x60	; 96
      00035A 30                     988 	.db #0x30	; 48	'0'
      00035B 18                     989 	.db #0x18	; 24
      00035C 0C                     990 	.db #0x0c	; 12
      00035D 06                     991 	.db #0x06	; 6
      00035E 02                     992 	.db #0x02	; 2
      00035F 00                     993 	.db #0x00	; 0
      000360 78                     994 	.db #0x78	; 120	'x'
      000361 18                     995 	.db #0x18	; 24
      000362 18                     996 	.db #0x18	; 24
      000363 18                     997 	.db #0x18	; 24
      000364 18                     998 	.db #0x18	; 24
      000365 18                     999 	.db #0x18	; 24
      000366 78                    1000 	.db #0x78	; 120	'x'
      000367 00                    1001 	.db #0x00	; 0
      000368 10                    1002 	.db #0x10	; 16
      000369 38                    1003 	.db #0x38	; 56	'8'
      00036A 6C                    1004 	.db #0x6c	; 108	'l'
      00036B C6                    1005 	.db #0xc6	; 198
      00036C 00                    1006 	.db #0x00	; 0
      00036D 00                    1007 	.db #0x00	; 0
      00036E 00                    1008 	.db #0x00	; 0
      00036F 00                    1009 	.db #0x00	; 0
      000370 00                    1010 	.db #0x00	; 0
      000371 00                    1011 	.db #0x00	; 0
      000372 00                    1012 	.db #0x00	; 0
      000373 00                    1013 	.db #0x00	; 0
      000374 00                    1014 	.db #0x00	; 0
      000375 00                    1015 	.db #0x00	; 0
      000376 00                    1016 	.db #0x00	; 0
      000377 FF                    1017 	.db #0xff	; 255
      000378 30                    1018 	.db #0x30	; 48	'0'
      000379 30                    1019 	.db #0x30	; 48	'0'
      00037A 18                    1020 	.db #0x18	; 24
      00037B 00                    1021 	.db #0x00	; 0
      00037C 00                    1022 	.db #0x00	; 0
      00037D 00                    1023 	.db #0x00	; 0
      00037E 00                    1024 	.db #0x00	; 0
      00037F 00                    1025 	.db #0x00	; 0
      000380 00                    1026 	.db #0x00	; 0
      000381 00                    1027 	.db #0x00	; 0
      000382 78                    1028 	.db #0x78	; 120	'x'
      000383 0C                    1029 	.db #0x0c	; 12
      000384 7C                    1030 	.db #0x7c	; 124
      000385 CC                    1031 	.db #0xcc	; 204
      000386 76                    1032 	.db #0x76	; 118	'v'
      000387 00                    1033 	.db #0x00	; 0
      000388 E0                    1034 	.db #0xe0	; 224
      000389 60                    1035 	.db #0x60	; 96
      00038A 60                    1036 	.db #0x60	; 96
      00038B 7C                    1037 	.db #0x7c	; 124
      00038C 66                    1038 	.db #0x66	; 102	'f'
      00038D 66                    1039 	.db #0x66	; 102	'f'
      00038E DC                    1040 	.db #0xdc	; 220
      00038F 00                    1041 	.db #0x00	; 0
      000390 00                    1042 	.db #0x00	; 0
      000391 00                    1043 	.db #0x00	; 0
      000392 78                    1044 	.db #0x78	; 120	'x'
      000393 CC                    1045 	.db #0xcc	; 204
      000394 C0                    1046 	.db #0xc0	; 192
      000395 CC                    1047 	.db #0xcc	; 204
      000396 78                    1048 	.db #0x78	; 120	'x'
      000397 00                    1049 	.db #0x00	; 0
      000398 1C                    1050 	.db #0x1c	; 28
      000399 0C                    1051 	.db #0x0c	; 12
      00039A 0C                    1052 	.db #0x0c	; 12
      00039B 7C                    1053 	.db #0x7c	; 124
      00039C CC                    1054 	.db #0xcc	; 204
      00039D CC                    1055 	.db #0xcc	; 204
      00039E 76                    1056 	.db #0x76	; 118	'v'
      00039F 00                    1057 	.db #0x00	; 0
      0003A0 00                    1058 	.db #0x00	; 0
      0003A1 00                    1059 	.db #0x00	; 0
      0003A2 78                    1060 	.db #0x78	; 120	'x'
      0003A3 CC                    1061 	.db #0xcc	; 204
      0003A4 FC                    1062 	.db #0xfc	; 252
      0003A5 C0                    1063 	.db #0xc0	; 192
      0003A6 78                    1064 	.db #0x78	; 120	'x'
      0003A7 00                    1065 	.db #0x00	; 0
      0003A8 38                    1066 	.db #0x38	; 56	'8'
      0003A9 6C                    1067 	.db #0x6c	; 108	'l'
      0003AA 60                    1068 	.db #0x60	; 96
      0003AB F0                    1069 	.db #0xf0	; 240
      0003AC 60                    1070 	.db #0x60	; 96
      0003AD 60                    1071 	.db #0x60	; 96
      0003AE F0                    1072 	.db #0xf0	; 240
      0003AF 00                    1073 	.db #0x00	; 0
      0003B0 00                    1074 	.db #0x00	; 0
      0003B1 00                    1075 	.db #0x00	; 0
      0003B2 76                    1076 	.db #0x76	; 118	'v'
      0003B3 CC                    1077 	.db #0xcc	; 204
      0003B4 CC                    1078 	.db #0xcc	; 204
      0003B5 7C                    1079 	.db #0x7c	; 124
      0003B6 0C                    1080 	.db #0x0c	; 12
      0003B7 F8                    1081 	.db #0xf8	; 248
      0003B8 E0                    1082 	.db #0xe0	; 224
      0003B9 60                    1083 	.db #0x60	; 96
      0003BA 6C                    1084 	.db #0x6c	; 108	'l'
      0003BB 76                    1085 	.db #0x76	; 118	'v'
      0003BC 66                    1086 	.db #0x66	; 102	'f'
      0003BD 66                    1087 	.db #0x66	; 102	'f'
      0003BE E6                    1088 	.db #0xe6	; 230
      0003BF 00                    1089 	.db #0x00	; 0
      0003C0 30                    1090 	.db #0x30	; 48	'0'
      0003C1 00                    1091 	.db #0x00	; 0
      0003C2 70                    1092 	.db #0x70	; 112	'p'
      0003C3 30                    1093 	.db #0x30	; 48	'0'
      0003C4 30                    1094 	.db #0x30	; 48	'0'
      0003C5 30                    1095 	.db #0x30	; 48	'0'
      0003C6 78                    1096 	.db #0x78	; 120	'x'
      0003C7 00                    1097 	.db #0x00	; 0
      0003C8 0C                    1098 	.db #0x0c	; 12
      0003C9 00                    1099 	.db #0x00	; 0
      0003CA 0C                    1100 	.db #0x0c	; 12
      0003CB 0C                    1101 	.db #0x0c	; 12
      0003CC 0C                    1102 	.db #0x0c	; 12
      0003CD CC                    1103 	.db #0xcc	; 204
      0003CE CC                    1104 	.db #0xcc	; 204
      0003CF 78                    1105 	.db #0x78	; 120	'x'
      0003D0 E0                    1106 	.db #0xe0	; 224
      0003D1 60                    1107 	.db #0x60	; 96
      0003D2 66                    1108 	.db #0x66	; 102	'f'
      0003D3 6C                    1109 	.db #0x6c	; 108	'l'
      0003D4 78                    1110 	.db #0x78	; 120	'x'
      0003D5 6C                    1111 	.db #0x6c	; 108	'l'
      0003D6 E6                    1112 	.db #0xe6	; 230
      0003D7 00                    1113 	.db #0x00	; 0
      0003D8 70                    1114 	.db #0x70	; 112	'p'
      0003D9 30                    1115 	.db #0x30	; 48	'0'
      0003DA 30                    1116 	.db #0x30	; 48	'0'
      0003DB 30                    1117 	.db #0x30	; 48	'0'
      0003DC 30                    1118 	.db #0x30	; 48	'0'
      0003DD 30                    1119 	.db #0x30	; 48	'0'
      0003DE 78                    1120 	.db #0x78	; 120	'x'
      0003DF 00                    1121 	.db #0x00	; 0
      0003E0 00                    1122 	.db #0x00	; 0
      0003E1 00                    1123 	.db #0x00	; 0
      0003E2 CC                    1124 	.db #0xcc	; 204
      0003E3 FE                    1125 	.db #0xfe	; 254
      0003E4 FE                    1126 	.db #0xfe	; 254
      0003E5 D6                    1127 	.db #0xd6	; 214
      0003E6 C6                    1128 	.db #0xc6	; 198
      0003E7 00                    1129 	.db #0x00	; 0
      0003E8 00                    1130 	.db #0x00	; 0
      0003E9 00                    1131 	.db #0x00	; 0
      0003EA F8                    1132 	.db #0xf8	; 248
      0003EB CC                    1133 	.db #0xcc	; 204
      0003EC CC                    1134 	.db #0xcc	; 204
      0003ED CC                    1135 	.db #0xcc	; 204
      0003EE CC                    1136 	.db #0xcc	; 204
      0003EF 00                    1137 	.db #0x00	; 0
      0003F0 00                    1138 	.db #0x00	; 0
      0003F1 00                    1139 	.db #0x00	; 0
      0003F2 78                    1140 	.db #0x78	; 120	'x'
      0003F3 CC                    1141 	.db #0xcc	; 204
      0003F4 CC                    1142 	.db #0xcc	; 204
      0003F5 CC                    1143 	.db #0xcc	; 204
      0003F6 78                    1144 	.db #0x78	; 120	'x'
      0003F7 00                    1145 	.db #0x00	; 0
      0003F8 00                    1146 	.db #0x00	; 0
      0003F9 00                    1147 	.db #0x00	; 0
      0003FA DC                    1148 	.db #0xdc	; 220
      0003FB 66                    1149 	.db #0x66	; 102	'f'
      0003FC 66                    1150 	.db #0x66	; 102	'f'
      0003FD 7C                    1151 	.db #0x7c	; 124
      0003FE 60                    1152 	.db #0x60	; 96
      0003FF F0                    1153 	.db #0xf0	; 240
      000400 00                    1154 	.db #0x00	; 0
      000401 00                    1155 	.db #0x00	; 0
      000402 76                    1156 	.db #0x76	; 118	'v'
      000403 CC                    1157 	.db #0xcc	; 204
      000404 CC                    1158 	.db #0xcc	; 204
      000405 7C                    1159 	.db #0x7c	; 124
      000406 0C                    1160 	.db #0x0c	; 12
      000407 1E                    1161 	.db #0x1e	; 30
      000408 00                    1162 	.db #0x00	; 0
      000409 00                    1163 	.db #0x00	; 0
      00040A DC                    1164 	.db #0xdc	; 220
      00040B 76                    1165 	.db #0x76	; 118	'v'
      00040C 66                    1166 	.db #0x66	; 102	'f'
      00040D 60                    1167 	.db #0x60	; 96
      00040E F0                    1168 	.db #0xf0	; 240
      00040F 00                    1169 	.db #0x00	; 0
      000410 00                    1170 	.db #0x00	; 0
      000411 00                    1171 	.db #0x00	; 0
      000412 7C                    1172 	.db #0x7c	; 124
      000413 C0                    1173 	.db #0xc0	; 192
      000414 78                    1174 	.db #0x78	; 120	'x'
      000415 0C                    1175 	.db #0x0c	; 12
      000416 F8                    1176 	.db #0xf8	; 248
      000417 00                    1177 	.db #0x00	; 0
      000418 10                    1178 	.db #0x10	; 16
      000419 30                    1179 	.db #0x30	; 48	'0'
      00041A 7C                    1180 	.db #0x7c	; 124
      00041B 30                    1181 	.db #0x30	; 48	'0'
      00041C 30                    1182 	.db #0x30	; 48	'0'
      00041D 34                    1183 	.db #0x34	; 52	'4'
      00041E 18                    1184 	.db #0x18	; 24
      00041F 00                    1185 	.db #0x00	; 0
      000420 00                    1186 	.db #0x00	; 0
      000421 00                    1187 	.db #0x00	; 0
      000422 CC                    1188 	.db #0xcc	; 204
      000423 CC                    1189 	.db #0xcc	; 204
      000424 CC                    1190 	.db #0xcc	; 204
      000425 CC                    1191 	.db #0xcc	; 204
      000426 76                    1192 	.db #0x76	; 118	'v'
      000427 00                    1193 	.db #0x00	; 0
      000428 00                    1194 	.db #0x00	; 0
      000429 00                    1195 	.db #0x00	; 0
      00042A CC                    1196 	.db #0xcc	; 204
      00042B CC                    1197 	.db #0xcc	; 204
      00042C CC                    1198 	.db #0xcc	; 204
      00042D 78                    1199 	.db #0x78	; 120	'x'
      00042E 30                    1200 	.db #0x30	; 48	'0'
      00042F 00                    1201 	.db #0x00	; 0
      000430 00                    1202 	.db #0x00	; 0
      000431 00                    1203 	.db #0x00	; 0
      000432 C6                    1204 	.db #0xc6	; 198
      000433 D6                    1205 	.db #0xd6	; 214
      000434 FE                    1206 	.db #0xfe	; 254
      000435 FE                    1207 	.db #0xfe	; 254
      000436 6C                    1208 	.db #0x6c	; 108	'l'
      000437 00                    1209 	.db #0x00	; 0
      000438 00                    1210 	.db #0x00	; 0
      000439 00                    1211 	.db #0x00	; 0
      00043A C6                    1212 	.db #0xc6	; 198
      00043B 6C                    1213 	.db #0x6c	; 108	'l'
      00043C 38                    1214 	.db #0x38	; 56	'8'
      00043D 6C                    1215 	.db #0x6c	; 108	'l'
      00043E C6                    1216 	.db #0xc6	; 198
      00043F 00                    1217 	.db #0x00	; 0
      000440 00                    1218 	.db #0x00	; 0
      000441 00                    1219 	.db #0x00	; 0
      000442 CC                    1220 	.db #0xcc	; 204
      000443 CC                    1221 	.db #0xcc	; 204
      000444 CC                    1222 	.db #0xcc	; 204
      000445 7C                    1223 	.db #0x7c	; 124
      000446 0C                    1224 	.db #0x0c	; 12
      000447 F8                    1225 	.db #0xf8	; 248
      000448 00                    1226 	.db #0x00	; 0
      000449 00                    1227 	.db #0x00	; 0
      00044A FC                    1228 	.db #0xfc	; 252
      00044B 98                    1229 	.db #0x98	; 152
      00044C 30                    1230 	.db #0x30	; 48	'0'
      00044D 64                    1231 	.db #0x64	; 100	'd'
      00044E FC                    1232 	.db #0xfc	; 252
      00044F 00                    1233 	.db #0x00	; 0
      000450 1C                    1234 	.db #0x1c	; 28
      000451 30                    1235 	.db #0x30	; 48	'0'
      000452 30                    1236 	.db #0x30	; 48	'0'
      000453 E0                    1237 	.db #0xe0	; 224
      000454 30                    1238 	.db #0x30	; 48	'0'
      000455 30                    1239 	.db #0x30	; 48	'0'
      000456 1C                    1240 	.db #0x1c	; 28
      000457 00                    1241 	.db #0x00	; 0
      000458 18                    1242 	.db #0x18	; 24
      000459 18                    1243 	.db #0x18	; 24
      00045A 18                    1244 	.db #0x18	; 24
      00045B 00                    1245 	.db #0x00	; 0
      00045C 18                    1246 	.db #0x18	; 24
      00045D 18                    1247 	.db #0x18	; 24
      00045E 18                    1248 	.db #0x18	; 24
      00045F 00                    1249 	.db #0x00	; 0
      000460 E0                    1250 	.db #0xe0	; 224
      000461 30                    1251 	.db #0x30	; 48	'0'
      000462 30                    1252 	.db #0x30	; 48	'0'
      000463 1C                    1253 	.db #0x1c	; 28
      000464 30                    1254 	.db #0x30	; 48	'0'
      000465 30                    1255 	.db #0x30	; 48	'0'
      000466 E0                    1256 	.db #0xe0	; 224
      000467 00                    1257 	.db #0x00	; 0
      000468 76                    1258 	.db #0x76	; 118	'v'
      000469 DC                    1259 	.db #0xdc	; 220
      00046A 00                    1260 	.db #0x00	; 0
      00046B 00                    1261 	.db #0x00	; 0
      00046C 00                    1262 	.db #0x00	; 0
      00046D 00                    1263 	.db #0x00	; 0
      00046E 00                    1264 	.db #0x00	; 0
      00046F 00                    1265 	.db #0x00	; 0
      000470 00                    1266 	.db #0x00	; 0
      000471 10                    1267 	.db #0x10	; 16
      000472 38                    1268 	.db #0x38	; 56	'8'
      000473 6C                    1269 	.db #0x6c	; 108	'l'
      000474 C6                    1270 	.db #0xc6	; 198
      000475 C6                    1271 	.db #0xc6	; 198
      000476 FE                    1272 	.db #0xfe	; 254
      000477 00                    1273 	.db #0x00	; 0
      000478                       1274 _pattern_black_0:
      000478 FF                    1275 	.db #0xff	; 255
      000479 FF                    1276 	.db #0xff	; 255
      00047A FF                    1277 	.db #0xff	; 255
      00047B FF                    1278 	.db #0xff	; 255
      00047C FF                    1279 	.db #0xff	; 255
      00047D FF                    1280 	.db #0xff	; 255
      00047E FF                    1281 	.db #0xff	; 255
      00047F FF                    1282 	.db #0xff	; 255
      000480                       1283 _pattern_black_1:
      000480 FE                    1284 	.db #0xfe	; 254
      000481 FF                    1285 	.db #0xff	; 255
      000482 FF                    1286 	.db #0xff	; 255
      000483 FF                    1287 	.db #0xff	; 255
      000484 FE                    1288 	.db #0xfe	; 254
      000485 FF                    1289 	.db #0xff	; 255
      000486 FF                    1290 	.db #0xff	; 255
      000487 FE                    1291 	.db #0xfe	; 254
      000488                       1292 _pattern_black_2:
      000488 FF                    1293 	.db #0xff	; 255
      000489 FF                    1294 	.db #0xff	; 255
      00048A FF                    1295 	.db #0xff	; 255
      00048B FF                    1296 	.db #0xff	; 255
      00048C FF                    1297 	.db #0xff	; 255
      00048D FB                    1298 	.db #0xfb	; 251
      00048E FF                    1299 	.db #0xff	; 255
      00048F BB                    1300 	.db #0xbb	; 187
      000490                       1301 _pattern_black_3:
      000490 FB                    1302 	.db #0xfb	; 251
      000491 FE                    1303 	.db #0xfe	; 254
      000492 FD                    1304 	.db #0xfd	; 253
      000493 FE                    1305 	.db #0xfe	; 254
      000494 F7                    1306 	.db #0xf7	; 247
      000495 FA                    1307 	.db #0xfa	; 250
      000496 AF                    1308 	.db #0xaf	; 175
      000497 55                    1309 	.db #0x55	; 85	'U'
      000498                       1310 _pattern_0:
      000498 9F                    1311 	.db #0x9f	; 159
      000499 90                    1312 	.db #0x90	; 144
      00049A 90                    1313 	.db #0x90	; 144
      00049B 93                    1314 	.db #0x93	; 147
      00049C 92                    1315 	.db #0x92	; 146
      00049D 92                    1316 	.db #0x92	; 146
      00049E 92                    1317 	.db #0x92	; 146
      00049F 92                    1318 	.db #0x92	; 146
      0004A0                       1319 _pattern_1:
      0004A0 FF                    1320 	.db #0xff	; 255
      0004A1 01                    1321 	.db #0x01	; 1
      0004A2 01                    1322 	.db #0x01	; 1
      0004A3 F9                    1323 	.db #0xf9	; 249
      0004A4 09                    1324 	.db #0x09	; 9
      0004A5 09                    1325 	.db #0x09	; 9
      0004A6 49                    1326 	.db #0x49	; 73	'I'
      0004A7 49                    1327 	.db #0x49	; 73	'I'
      0004A8                       1328 _pattern_2:
      0004A8 92                    1329 	.db #0x92	; 146
      0004A9 93                    1330 	.db #0x93	; 147
      0004AA 90                    1331 	.db #0x90	; 144
      0004AB 90                    1332 	.db #0x90	; 144
      0004AC 9F                    1333 	.db #0x9f	; 159
      0004AD 80                    1334 	.db #0x80	; 128
      0004AE 80                    1335 	.db #0x80	; 128
      0004AF FF                    1336 	.db #0xff	; 255
      0004B0                       1337 _pattern_3:
      0004B0 49                    1338 	.db #0x49	; 73	'I'
      0004B1 C9                    1339 	.db #0xc9	; 201
      0004B2 09                    1340 	.db #0x09	; 9
      0004B3 09                    1341 	.db #0x09	; 9
      0004B4 F9                    1342 	.db #0xf9	; 249
      0004B5 01                    1343 	.db #0x01	; 1
      0004B6 01                    1344 	.db #0x01	; 1
      0004B7 FF                    1345 	.db #0xff	; 255
      0004B8                       1346 _pattern_4:
      0004B8 7F                    1347 	.db #0x7f	; 127
      0004B9 81                    1348 	.db #0x81	; 129
      0004BA 83                    1349 	.db #0x83	; 131
      0004BB 87                    1350 	.db #0x87	; 135
      0004BC 8F                    1351 	.db #0x8f	; 143
      0004BD 9F                    1352 	.db #0x9f	; 159
      0004BE BF                    1353 	.db #0xbf	; 191
      0004BF FF                    1354 	.db #0xff	; 255
      0004C0                       1355 _pattern_5:
      0004C0 FE                    1356 	.db #0xfe	; 254
      0004C1 81                    1357 	.db #0x81	; 129
      0004C2 C1                    1358 	.db #0xc1	; 193
      0004C3 E1                    1359 	.db #0xe1	; 225
      0004C4 F1                    1360 	.db #0xf1	; 241
      0004C5 F9                    1361 	.db #0xf9	; 249
      0004C6 FD                    1362 	.db #0xfd	; 253
      0004C7 FF                    1363 	.db #0xff	; 255
      0004C8                       1364 _pattern_6:
      0004C8 FF                    1365 	.db #0xff	; 255
      0004C9 BF                    1366 	.db #0xbf	; 191
      0004CA 9F                    1367 	.db #0x9f	; 159
      0004CB 8F                    1368 	.db #0x8f	; 143
      0004CC 87                    1369 	.db #0x87	; 135
      0004CD 83                    1370 	.db #0x83	; 131
      0004CE 81                    1371 	.db #0x81	; 129
      0004CF 7F                    1372 	.db #0x7f	; 127
      0004D0                       1373 _pattern_7:
      0004D0 FF                    1374 	.db #0xff	; 255
      0004D1 FD                    1375 	.db #0xfd	; 253
      0004D2 F9                    1376 	.db #0xf9	; 249
      0004D3 F1                    1377 	.db #0xf1	; 241
      0004D4 E1                    1378 	.db #0xe1	; 225
      0004D5 C1                    1379 	.db #0xc1	; 193
      0004D6 81                    1380 	.db #0x81	; 129
      0004D7 FE                    1381 	.db #0xfe	; 254
      0004D8                       1382 _pattern_8:
      0004D8 7F                    1383 	.db #0x7f	; 127
      0004D9 AE                    1384 	.db #0xae	; 174
      0004DA FF                    1385 	.db #0xff	; 255
      0004DB 5B                    1386 	.db #0x5b	; 91
      0004DC FF                    1387 	.db #0xff	; 255
      0004DD AE                    1388 	.db #0xae	; 174
      0004DE FF                    1389 	.db #0xff	; 255
      0004DF DF                    1390 	.db #0xdf	; 223
      0004E0                       1391 _pattern_9:
      0004E0 FE                    1392 	.db #0xfe	; 254
      0004E1 BD                    1393 	.db #0xbd	; 189
      0004E2 DF                    1394 	.db #0xdf	; 223
      0004E3 7F                    1395 	.db #0x7f	; 127
      0004E4 FB                    1396 	.db #0xfb	; 251
      0004E5 DF                    1397 	.db #0xdf	; 223
      0004E6 FE                    1398 	.db #0xfe	; 254
      0004E7 EF                    1399 	.db #0xef	; 239
      0004E8                       1400 _pattern_10:
      0004E8 7F                    1401 	.db #0x7f	; 127
      0004E9 FF                    1402 	.db #0xff	; 255
      0004EA ED                    1403 	.db #0xed	; 237
      0004EB FF                    1404 	.db #0xff	; 255
      0004EC B6                    1405 	.db #0xb6	; 182
      0004ED FE                    1406 	.db #0xfe	; 254
      0004EE DB                    1407 	.db #0xdb	; 219
      0004EF 7D                    1408 	.db #0x7d	; 125
      0004F0                       1409 _pattern_11:
      0004F0 FE                    1410 	.db #0xfe	; 254
      0004F1 FF                    1411 	.db #0xff	; 255
      0004F2 FE                    1412 	.db #0xfe	; 254
      0004F3 77                    1413 	.db #0x77	; 119	'w'
      0004F4 FE                    1414 	.db #0xfe	; 254
      0004F5 DD                    1415 	.db #0xdd	; 221
      0004F6 EF                    1416 	.db #0xef	; 239
      0004F7 5A                    1417 	.db #0x5a	; 90	'Z'
      0004F8                       1418 _pattern_12:
      0004F8 7F                    1419 	.db #0x7f	; 127
      0004F9 D5                    1420 	.db #0xd5	; 213
      0004FA BF                    1421 	.db #0xbf	; 191
      0004FB ED                    1422 	.db #0xed	; 237
      0004FC BF                    1423 	.db #0xbf	; 191
      0004FD F5                    1424 	.db #0xf5	; 245
      0004FE BF                    1425 	.db #0xbf	; 191
      0004FF FF                    1426 	.db #0xff	; 255
      000500                       1427 _pattern_13:
      000500 FE                    1428 	.db #0xfe	; 254
      000501 5F                    1429 	.db #0x5f	; 95
      000502 F5                    1430 	.db #0xf5	; 245
      000503 DF                    1431 	.db #0xdf	; 223
      000504 FF                    1432 	.db #0xff	; 255
      000505 FF                    1433 	.db #0xff	; 255
      000506 FF                    1434 	.db #0xff	; 255
      000507 FF                    1435 	.db #0xff	; 255
      000508                       1436 _pattern_14:
      000508 EF                    1437 	.db #0xef	; 239
      000509 BF                    1438 	.db #0xbf	; 191
      00050A 7F                    1439 	.db #0x7f	; 127
      00050B FF                    1440 	.db #0xff	; 255
      00050C FF                    1441 	.db #0xff	; 255
      00050D FF                    1442 	.db #0xff	; 255
      00050E DB                    1443 	.db #0xdb	; 219
      00050F 7F                    1444 	.db #0x7f	; 127
      000510                       1445 _pattern_15:
      000510 FF                    1446 	.db #0xff	; 255
      000511 FD                    1447 	.db #0xfd	; 253
      000512 FF                    1448 	.db #0xff	; 255
      000513 DB                    1449 	.db #0xdb	; 219
      000514 FD                    1450 	.db #0xfd	; 253
      000515 7B                    1451 	.db #0x7b	; 123
      000516 D7                    1452 	.db #0xd7	; 215
      000517 FE                    1453 	.db #0xfe	; 254
      000518                       1454 _pattern_16:
      000518 7F                    1455 	.db #0x7f	; 127
      000519 FF                    1456 	.db #0xff	; 255
      00051A EA                    1457 	.db #0xea	; 234
      00051B DF                    1458 	.db #0xdf	; 223
      00051C FF                    1459 	.db #0xff	; 255
      00051D DF                    1460 	.db #0xdf	; 223
      00051E FF                    1461 	.db #0xff	; 255
      00051F DF                    1462 	.db #0xdf	; 223
      000520                       1463 _pattern_17:
      000520 FE                    1464 	.db #0xfe	; 254
      000521 FF                    1465 	.db #0xff	; 255
      000522 AF                    1466 	.db #0xaf	; 175
      000523 FA                    1467 	.db #0xfa	; 250
      000524 FF                    1468 	.db #0xff	; 255
      000525 FA                    1469 	.db #0xfa	; 250
      000526 FF                    1470 	.db #0xff	; 255
      000527 FA                    1471 	.db #0xfa	; 250
      000528                       1472 _pattern_18:
      000528 FF                    1473 	.db #0xff	; 255
      000529 DF                    1474 	.db #0xdf	; 223
      00052A FF                    1475 	.db #0xff	; 255
      00052B DF                    1476 	.db #0xdf	; 223
      00052C FF                    1477 	.db #0xff	; 255
      00052D EA                    1478 	.db #0xea	; 234
      00052E FF                    1479 	.db #0xff	; 255
      00052F 55                    1480 	.db #0x55	; 85	'U'
      000530                       1481 _pattern_19:
      000530 FF                    1482 	.db #0xff	; 255
      000531 FA                    1483 	.db #0xfa	; 250
      000532 FF                    1484 	.db #0xff	; 255
      000533 FA                    1485 	.db #0xfa	; 250
      000534 F7                    1486 	.db #0xf7	; 247
      000535 AA                    1487 	.db #0xaa	; 170
      000536 FF                    1488 	.db #0xff	; 255
      000537 56                    1489 	.db #0x56	; 86	'V'
      000538                       1490 _pattern_20:
      000538 3F                    1491 	.db #0x3f	; 63
      000539 7F                    1492 	.db #0x7f	; 127
      00053A E0                    1493 	.db #0xe0	; 224
      00053B CE                    1494 	.db #0xce	; 206
      00053C E6                    1495 	.db #0xe6	; 230
      00053D 7C                    1496 	.db #0x7c	; 124
      00053E 39                    1497 	.db #0x39	; 57	'9'
      00053F 03                    1498 	.db #0x03	; 3
      000540                       1499 _pattern_21:
      000540 FF                    1500 	.db #0xff	; 255
      000541 FF                    1501 	.db #0xff	; 255
      000542 00                    1502 	.db #0x00	; 0
      000543 DB                    1503 	.db #0xdb	; 219
      000544 DB                    1504 	.db #0xdb	; 219
      000545 00                    1505 	.db #0x00	; 0
      000546 FF                    1506 	.db #0xff	; 255
      000547 FF                    1507 	.db #0xff	; 255
      000548                       1508 _pattern_22:
      000548 FC                    1509 	.db #0xfc	; 252
      000549 FE                    1510 	.db #0xfe	; 254
      00054A 07                    1511 	.db #0x07	; 7
      00054B 73                    1512 	.db #0x73	; 115	's'
      00054C 67                    1513 	.db #0x67	; 103	'g'
      00054D 3E                    1514 	.db #0x3e	; 62
      00054E 9C                    1515 	.db #0x9c	; 156
      00054F C0                    1516 	.db #0xc0	; 192
      000550                       1517 _pattern_23:
      000550 06                    1518 	.db #0x06	; 6
      000551 00                    1519 	.db #0x00	; 0
      000552 03                    1520 	.db #0x03	; 3
      000553 04                    1521 	.db #0x04	; 4
      000554 05                    1522 	.db #0x05	; 5
      000555 05                    1523 	.db #0x05	; 5
      000556 05                    1524 	.db #0x05	; 5
      000557 05                    1525 	.db #0x05	; 5
      000558                       1526 _pattern_24:
      000558 00                    1527 	.db #0x00	; 0
      000559 00                    1528 	.db #0x00	; 0
      00055A 33                    1529 	.db #0x33	; 51	'3'
      00055B 44                    1530 	.db #0x44	; 68	'D'
      00055C 55                    1531 	.db #0x55	; 85	'U'
      00055D 55                    1532 	.db #0x55	; 85	'U'
      00055E 55                    1533 	.db #0x55	; 85	'U'
      00055F 55                    1534 	.db #0x55	; 85	'U'
      000560                       1535 _pattern_25:
      000560 60                    1536 	.db #0x60	; 96
      000561 00                    1537 	.db #0x00	; 0
      000562 40                    1538 	.db #0x40	; 64
      000563 20                    1539 	.db #0x20	; 32
      000564 20                    1540 	.db #0x20	; 32
      000565 20                    1541 	.db #0x20	; 32
      000566 20                    1542 	.db #0x20	; 32
      000567 20                    1543 	.db #0x20	; 32
      000568                       1544 _pattern_26:
      000568 05                    1545 	.db #0x05	; 5
      000569 05                    1546 	.db #0x05	; 5
      00056A 05                    1547 	.db #0x05	; 5
      00056B 05                    1548 	.db #0x05	; 5
      00056C 05                    1549 	.db #0x05	; 5
      00056D 05                    1550 	.db #0x05	; 5
      00056E 05                    1551 	.db #0x05	; 5
      00056F 05                    1552 	.db #0x05	; 5
      000570                       1553 _pattern_27:
      000570 55                    1554 	.db #0x55	; 85	'U'
      000571 55                    1555 	.db #0x55	; 85	'U'
      000572 55                    1556 	.db #0x55	; 85	'U'
      000573 55                    1557 	.db #0x55	; 85	'U'
      000574 55                    1558 	.db #0x55	; 85	'U'
      000575 55                    1559 	.db #0x55	; 85	'U'
      000576 55                    1560 	.db #0x55	; 85	'U'
      000577 55                    1561 	.db #0x55	; 85	'U'
      000578                       1562 _pattern_28:
      000578 20                    1563 	.db #0x20	; 32
      000579 20                    1564 	.db #0x20	; 32
      00057A 20                    1565 	.db #0x20	; 32
      00057B 20                    1566 	.db #0x20	; 32
      00057C 20                    1567 	.db #0x20	; 32
      00057D 20                    1568 	.db #0x20	; 32
      00057E 20                    1569 	.db #0x20	; 32
      00057F 20                    1570 	.db #0x20	; 32
      000580                       1571 _pattern_29:
      000580 05                    1572 	.db #0x05	; 5
      000581 05                    1573 	.db #0x05	; 5
      000582 07                    1574 	.db #0x07	; 7
      000583 07                    1575 	.db #0x07	; 7
      000584 07                    1576 	.db #0x07	; 7
      000585 05                    1577 	.db #0x05	; 5
      000586 05                    1578 	.db #0x05	; 5
      000587 05                    1579 	.db #0x05	; 5
      000588                       1580 _pattern_30:
      000588 55                    1581 	.db #0x55	; 85	'U'
      000589 55                    1582 	.db #0x55	; 85	'U'
      00058A FF                    1583 	.db #0xff	; 255
      00058B FF                    1584 	.db #0xff	; 255
      00058C FF                    1585 	.db #0xff	; 255
      00058D 55                    1586 	.db #0x55	; 85	'U'
      00058E 55                    1587 	.db #0x55	; 85	'U'
      00058F 55                    1588 	.db #0x55	; 85	'U'
      000590                       1589 _pattern_31:
      000590 20                    1590 	.db #0x20	; 32
      000591 20                    1591 	.db #0x20	; 32
      000592 E0                    1592 	.db #0xe0	; 224
      000593 E0                    1593 	.db #0xe0	; 224
      000594 E0                    1594 	.db #0xe0	; 224
      000595 20                    1595 	.db #0x20	; 32
      000596 20                    1596 	.db #0x20	; 32
      000597 20                    1597 	.db #0x20	; 32
      000598                       1598 _pattern_37:
      000598 05                    1599 	.db #0x05	; 5
      000599 05                    1600 	.db #0x05	; 5
      00059A 05                    1601 	.db #0x05	; 5
      00059B 05                    1602 	.db #0x05	; 5
      00059C 04                    1603 	.db #0x04	; 4
      00059D 03                    1604 	.db #0x03	; 3
      00059E 00                    1605 	.db #0x00	; 0
      00059F 06                    1606 	.db #0x06	; 6
      0005A0                       1607 _pattern_38:
      0005A0 55                    1608 	.db #0x55	; 85	'U'
      0005A1 55                    1609 	.db #0x55	; 85	'U'
      0005A2 55                    1610 	.db #0x55	; 85	'U'
      0005A3 55                    1611 	.db #0x55	; 85	'U'
      0005A4 44                    1612 	.db #0x44	; 68	'D'
      0005A5 33                    1613 	.db #0x33	; 51	'3'
      0005A6 00                    1614 	.db #0x00	; 0
      0005A7 00                    1615 	.db #0x00	; 0
      0005A8                       1616 _pattern_39:
      0005A8 20                    1617 	.db #0x20	; 32
      0005A9 20                    1618 	.db #0x20	; 32
      0005AA 20                    1619 	.db #0x20	; 32
      0005AB 20                    1620 	.db #0x20	; 32
      0005AC 20                    1621 	.db #0x20	; 32
      0005AD 40                    1622 	.db #0x40	; 64
      0005AE 00                    1623 	.db #0x00	; 0
      0005AF 60                    1624 	.db #0x60	; 96
      0005B0                       1625 _pattern_32:
      0005B0 03                    1626 	.db #0x03	; 3
      0005B1 39                    1627 	.db #0x39	; 57	'9'
      0005B2 7C                    1628 	.db #0x7c	; 124
      0005B3 E6                    1629 	.db #0xe6	; 230
      0005B4 CE                    1630 	.db #0xce	; 206
      0005B5 E0                    1631 	.db #0xe0	; 224
      0005B6 7F                    1632 	.db #0x7f	; 127
      0005B7 3F                    1633 	.db #0x3f	; 63
      0005B8                       1634 _pattern_33:
      0005B8 FF                    1635 	.db #0xff	; 255
      0005B9 FF                    1636 	.db #0xff	; 255
      0005BA 00                    1637 	.db #0x00	; 0
      0005BB DB                    1638 	.db #0xdb	; 219
      0005BC DB                    1639 	.db #0xdb	; 219
      0005BD 00                    1640 	.db #0x00	; 0
      0005BE FF                    1641 	.db #0xff	; 255
      0005BF FF                    1642 	.db #0xff	; 255
      0005C0                       1643 _pattern_34:
      0005C0 C0                    1644 	.db #0xc0	; 192
      0005C1 9C                    1645 	.db #0x9c	; 156
      0005C2 3E                    1646 	.db #0x3e	; 62
      0005C3 67                    1647 	.db #0x67	; 103	'g'
      0005C4 73                    1648 	.db #0x73	; 115	's'
      0005C5 07                    1649 	.db #0x07	; 7
      0005C6 FE                    1650 	.db #0xfe	; 254
      0005C7 FC                    1651 	.db #0xfc	; 252
      0005C8                       1652 _sprite_dust_0:
      0005C8 10                    1653 	.db #0x10	; 16
      0005C9 42                    1654 	.db #0x42	; 66	'B'
      0005CA 10                    1655 	.db #0x10	; 16
      0005CB 45                    1656 	.db #0x45	; 69	'E'
      0005CC 20                    1657 	.db #0x20	; 32
      0005CD 89                    1658 	.db #0x89	; 137
      0005CE 20                    1659 	.db #0x20	; 32
      0005CF 88                    1660 	.db #0x88	; 136
      0005D0                       1661 _sprite_dust_1:
      0005D0 10                    1662 	.db #0x10	; 16
      0005D1 42                    1663 	.db #0x42	; 66	'B'
      0005D2 00                    1664 	.db #0x00	; 0
      0005D3 04                    1665 	.db #0x04	; 4
      0005D4 20                    1666 	.db #0x20	; 32
      0005D5 81                    1667 	.db #0x81	; 129
      0005D6 20                    1668 	.db #0x20	; 32
      0005D7 08                    1669 	.db #0x08	; 8
      0005D8                       1670 _sprite_dust_2:
      0005D8 10                    1671 	.db #0x10	; 16
      0005D9 00                    1672 	.db #0x00	; 0
      0005DA 00                    1673 	.db #0x00	; 0
      0005DB 04                    1674 	.db #0x04	; 4
      0005DC 20                    1675 	.db #0x20	; 32
      0005DD 80                    1676 	.db #0x80	; 128
      0005DE 20                    1677 	.db #0x20	; 32
      0005DF 00                    1678 	.db #0x00	; 0
      0005E0                       1679 _sprite_dust_3:
      0005E0 10                    1680 	.db #0x10	; 16
      0005E1 00                    1681 	.db #0x00	; 0
      0005E2 00                    1682 	.db #0x00	; 0
      0005E3 04                    1683 	.db #0x04	; 4
      0005E4 00                    1684 	.db #0x00	; 0
      0005E5 00                    1685 	.db #0x00	; 0
      0005E6 20                    1686 	.db #0x20	; 32
      0005E7 00                    1687 	.db #0x00	; 0
      0005E8                       1688 _pattern_title:
      0005E8 FE                    1689 	.db #0xfe	; 254
      0005E9 FE                    1690 	.db #0xfe	; 254
      0005EA FE                    1691 	.db #0xfe	; 254
      0005EB FE                    1692 	.db #0xfe	; 254
      0005EC FE                    1693 	.db #0xfe	; 254
      0005ED FE                    1694 	.db #0xfe	; 254
      0005EE FE                    1695 	.db #0xfe	; 254
      0005EF 00                    1696 	.db #0x00	; 0
      0005F0                       1697 _color_black_0:
      0005F0 14                    1698 	.db #0x14	; 20
      0005F1 14                    1699 	.db #0x14	; 20
      0005F2 14                    1700 	.db #0x14	; 20
      0005F3 14                    1701 	.db #0x14	; 20
      0005F4 14                    1702 	.db #0x14	; 20
      0005F5 14                    1703 	.db #0x14	; 20
      0005F6 14                    1704 	.db #0x14	; 20
      0005F7 14                    1705 	.db #0x14	; 20
      0005F8                       1706 _color_black_1:
      0005F8 14                    1707 	.db #0x14	; 20
      0005F9 14                    1708 	.db #0x14	; 20
      0005FA 14                    1709 	.db #0x14	; 20
      0005FB 14                    1710 	.db #0x14	; 20
      0005FC 14                    1711 	.db #0x14	; 20
      0005FD 14                    1712 	.db #0x14	; 20
      0005FE 14                    1713 	.db #0x14	; 20
      0005FF 14                    1714 	.db #0x14	; 20
      000600                       1715 _color_black_2:
      000600 14                    1716 	.db #0x14	; 20
      000601 14                    1717 	.db #0x14	; 20
      000602 14                    1718 	.db #0x14	; 20
      000603 14                    1719 	.db #0x14	; 20
      000604 14                    1720 	.db #0x14	; 20
      000605 14                    1721 	.db #0x14	; 20
      000606 14                    1722 	.db #0x14	; 20
      000607 14                    1723 	.db #0x14	; 20
      000608                       1724 _color_black_3:
      000608 14                    1725 	.db #0x14	; 20
      000609 14                    1726 	.db #0x14	; 20
      00060A 14                    1727 	.db #0x14	; 20
      00060B 14                    1728 	.db #0x14	; 20
      00060C 14                    1729 	.db #0x14	; 20
      00060D 14                    1730 	.db #0x14	; 20
      00060E 14                    1731 	.db #0x14	; 20
      00060F 14                    1732 	.db #0x14	; 20
      000610                       1733 _color_0:
      000610 13                    1734 	.db #0x13	; 19
      000611 13                    1735 	.db #0x13	; 19
      000612 13                    1736 	.db #0x13	; 19
      000613 13                    1737 	.db #0x13	; 19
      000614 13                    1738 	.db #0x13	; 19
      000615 13                    1739 	.db #0x13	; 19
      000616 13                    1740 	.db #0x13	; 19
      000617 13                    1741 	.db #0x13	; 19
      000618                       1742 _color_1:
      000618 12                    1743 	.db #0x12	; 18
      000619 12                    1744 	.db #0x12	; 18
      00061A 12                    1745 	.db #0x12	; 18
      00061B 12                    1746 	.db #0x12	; 18
      00061C 12                    1747 	.db #0x12	; 18
      00061D 12                    1748 	.db #0x12	; 18
      00061E 12                    1749 	.db #0x12	; 18
      00061F 12                    1750 	.db #0x12	; 18
      000620                       1751 _color_2:
      000620 12                    1752 	.db #0x12	; 18
      000621 12                    1753 	.db #0x12	; 18
      000622 12                    1754 	.db #0x12	; 18
      000623 12                    1755 	.db #0x12	; 18
      000624 12                    1756 	.db #0x12	; 18
      000625 12                    1757 	.db #0x12	; 18
      000626 12                    1758 	.db #0x12	; 18
      000627 12                    1759 	.db #0x12	; 18
      000628                       1760 _color_3:
      000628 1C                    1761 	.db #0x1c	; 28
      000629 1C                    1762 	.db #0x1c	; 28
      00062A 1C                    1763 	.db #0x1c	; 28
      00062B 1C                    1764 	.db #0x1c	; 28
      00062C 1C                    1765 	.db #0x1c	; 28
      00062D 1C                    1766 	.db #0x1c	; 28
      00062E 1C                    1767 	.db #0x1c	; 28
      00062F 1C                    1768 	.db #0x1c	; 28
      000630                       1769 _color_4:
      000630 96                    1770 	.db #0x96	; 150
      000631 96                    1771 	.db #0x96	; 150
      000632 96                    1772 	.db #0x96	; 150
      000633 96                    1773 	.db #0x96	; 150
      000634 96                    1774 	.db #0x96	; 150
      000635 96                    1775 	.db #0x96	; 150
      000636 96                    1776 	.db #0x96	; 150
      000637 96                    1777 	.db #0x96	; 150
      000638                       1778 _color_5:
      000638 98                    1779 	.db #0x98	; 152
      000639 68                    1780 	.db #0x68	; 104	'h'
      00063A 68                    1781 	.db #0x68	; 104	'h'
      00063B 68                    1782 	.db #0x68	; 104	'h'
      00063C 68                    1783 	.db #0x68	; 104	'h'
      00063D 68                    1784 	.db #0x68	; 104	'h'
      00063E 68                    1785 	.db #0x68	; 104	'h'
      00063F 68                    1786 	.db #0x68	; 104	'h'
      000640                       1787 _color_6:
      000640 68                    1788 	.db #0x68	; 104	'h'
      000641 68                    1789 	.db #0x68	; 104	'h'
      000642 68                    1790 	.db #0x68	; 104	'h'
      000643 68                    1791 	.db #0x68	; 104	'h'
      000644 68                    1792 	.db #0x68	; 104	'h'
      000645 68                    1793 	.db #0x68	; 104	'h'
      000646 68                    1794 	.db #0x68	; 104	'h'
      000647 68                    1795 	.db #0x68	; 104	'h'
      000648                       1796 _color_7:
      000648 89                    1797 	.db #0x89	; 137
      000649 89                    1798 	.db #0x89	; 137
      00064A 89                    1799 	.db #0x89	; 137
      00064B 89                    1800 	.db #0x89	; 137
      00064C 89                    1801 	.db #0x89	; 137
      00064D 89                    1802 	.db #0x89	; 137
      00064E 89                    1803 	.db #0x89	; 137
      00064F 86                    1804 	.db #0x86	; 134
      000650                       1805 _color_8:
      000650 41                    1806 	.db #0x41	; 65	'A'
      000651 47                    1807 	.db #0x47	; 71	'G'
      000652 47                    1808 	.db #0x47	; 71	'G'
      000653 47                    1809 	.db #0x47	; 71	'G'
      000654 47                    1810 	.db #0x47	; 71	'G'
      000655 47                    1811 	.db #0x47	; 71	'G'
      000656 47                    1812 	.db #0x47	; 71	'G'
      000657 47                    1813 	.db #0x47	; 71	'G'
      000658                       1814 _color_9:
      000658 41                    1815 	.db #0x41	; 65	'A'
      000659 45                    1816 	.db #0x45	; 69	'E'
      00065A 47                    1817 	.db #0x47	; 71	'G'
      00065B 47                    1818 	.db #0x47	; 71	'G'
      00065C 45                    1819 	.db #0x45	; 69	'E'
      00065D 45                    1820 	.db #0x45	; 69	'E'
      00065E 41                    1821 	.db #0x41	; 65	'A'
      00065F 45                    1822 	.db #0x45	; 69	'E'
      000660                       1823 _color_10:
      000660 47                    1824 	.db #0x47	; 71	'G'
      000661 45                    1825 	.db #0x45	; 69	'E'
      000662 45                    1826 	.db #0x45	; 69	'E'
      000663 45                    1827 	.db #0x45	; 69	'E'
      000664 45                    1828 	.db #0x45	; 69	'E'
      000665 41                    1829 	.db #0x41	; 65	'A'
      000666 45                    1830 	.db #0x45	; 69	'E'
      000667 41                    1831 	.db #0x41	; 65	'A'
      000668                       1832 _color_11:
      000668 41                    1833 	.db #0x41	; 65	'A'
      000669 41                    1834 	.db #0x41	; 65	'A'
      00066A 41                    1835 	.db #0x41	; 65	'A'
      00066B 41                    1836 	.db #0x41	; 65	'A'
      00066C 41                    1837 	.db #0x41	; 65	'A'
      00066D 41                    1838 	.db #0x41	; 65	'A'
      00066E 41                    1839 	.db #0x41	; 65	'A'
      00066F 41                    1840 	.db #0x41	; 65	'A'
      000670                       1841 _color_12:
      000670 D1                    1842 	.db #0xd1	; 209
      000671 DF                    1843 	.db #0xdf	; 223
      000672 DF                    1844 	.db #0xdf	; 223
      000673 DF                    1845 	.db #0xdf	; 223
      000674 DF                    1846 	.db #0xdf	; 223
      000675 DF                    1847 	.db #0xdf	; 223
      000676 DF                    1848 	.db #0xdf	; 223
      000677 DF                    1849 	.db #0xdf	; 223
      000678                       1850 _color_13:
      000678 D1                    1851 	.db #0xd1	; 209
      000679 DF                    1852 	.db #0xdf	; 223
      00067A DF                    1853 	.db #0xdf	; 223
      00067B DF                    1854 	.db #0xdf	; 223
      00067C DF                    1855 	.db #0xdf	; 223
      00067D DF                    1856 	.db #0xdf	; 223
      00067E DF                    1857 	.db #0xdf	; 223
      00067F DF                    1858 	.db #0xdf	; 223
      000680                       1859 _color_14:
      000680 DF                    1860 	.db #0xdf	; 223
      000681 DF                    1861 	.db #0xdf	; 223
      000682 DF                    1862 	.db #0xdf	; 223
      000683 D1                    1863 	.db #0xd1	; 209
      000684 D1                    1864 	.db #0xd1	; 209
      000685 D1                    1865 	.db #0xd1	; 209
      000686 D1                    1866 	.db #0xd1	; 209
      000687 D1                    1867 	.db #0xd1	; 209
      000688                       1868 _color_15:
      000688 D1                    1869 	.db #0xd1	; 209
      000689 D1                    1870 	.db #0xd1	; 209
      00068A D1                    1871 	.db #0xd1	; 209
      00068B D1                    1872 	.db #0xd1	; 209
      00068C D1                    1873 	.db #0xd1	; 209
      00068D D1                    1874 	.db #0xd1	; 209
      00068E D1                    1875 	.db #0xd1	; 209
      00068F D1                    1876 	.db #0xd1	; 209
      000690                       1877 _color_16:
      000690 A1                    1878 	.db #0xa1	; 161
      000691 BF                    1879 	.db #0xbf	; 191
      000692 BF                    1880 	.db #0xbf	; 191
      000693 BF                    1881 	.db #0xbf	; 191
      000694 BF                    1882 	.db #0xbf	; 191
      000695 BF                    1883 	.db #0xbf	; 191
      000696 BF                    1884 	.db #0xbf	; 191
      000697 BF                    1885 	.db #0xbf	; 191
      000698                       1886 _color_17:
      000698 A1                    1887 	.db #0xa1	; 161
      000699 AF                    1888 	.db #0xaf	; 175
      00069A AF                    1889 	.db #0xaf	; 175
      00069B A1                    1890 	.db #0xa1	; 161
      00069C A1                    1891 	.db #0xa1	; 161
      00069D A1                    1892 	.db #0xa1	; 161
      00069E A1                    1893 	.db #0xa1	; 161
      00069F A1                    1894 	.db #0xa1	; 161
      0006A0                       1895 _color_18:
      0006A0 AF                    1896 	.db #0xaf	; 175
      0006A1 AF                    1897 	.db #0xaf	; 175
      0006A2 AF                    1898 	.db #0xaf	; 175
      0006A3 AF                    1899 	.db #0xaf	; 175
      0006A4 A1                    1900 	.db #0xa1	; 161
      0006A5 A1                    1901 	.db #0xa1	; 161
      0006A6 A1                    1902 	.db #0xa1	; 161
      0006A7 A1                    1903 	.db #0xa1	; 161
      0006A8                       1904 _color_19:
      0006A8 B1                    1905 	.db #0xb1	; 177
      0006A9 B1                    1906 	.db #0xb1	; 177
      0006AA B1                    1907 	.db #0xb1	; 177
      0006AB B1                    1908 	.db #0xb1	; 177
      0006AC B1                    1909 	.db #0xb1	; 177
      0006AD B1                    1910 	.db #0xb1	; 177
      0006AE B1                    1911 	.db #0xb1	; 177
      0006AF B1                    1912 	.db #0xb1	; 177
      0006B0                       1913 _color_column_1:
      0006B0 F1                    1914 	.db #0xf1	; 241
      0006B1 E1                    1915 	.db #0xe1	; 225
      0006B2 E1                    1916 	.db #0xe1	; 225
      0006B3 E1                    1917 	.db #0xe1	; 225
      0006B4 E1                    1918 	.db #0xe1	; 225
      0006B5 E1                    1919 	.db #0xe1	; 225
      0006B6 E1                    1920 	.db #0xe1	; 225
      0006B7 E1                    1921 	.db #0xe1	; 225
      0006B8                       1922 _color_column_2:
      0006B8 F1                    1923 	.db #0xf1	; 241
      0006B9 E1                    1924 	.db #0xe1	; 225
      0006BA E1                    1925 	.db #0xe1	; 225
      0006BB E1                    1926 	.db #0xe1	; 225
      0006BC E1                    1927 	.db #0xe1	; 225
      0006BD E1                    1928 	.db #0xe1	; 225
      0006BE E1                    1929 	.db #0xe1	; 225
      0006BF E1                    1930 	.db #0xe1	; 225
      0006C0                       1931 _color_column_3:
      0006C0 F1                    1932 	.db #0xf1	; 241
      0006C1 E1                    1933 	.db #0xe1	; 225
      0006C2 E1                    1934 	.db #0xe1	; 225
      0006C3 E1                    1935 	.db #0xe1	; 225
      0006C4 E1                    1936 	.db #0xe1	; 225
      0006C5 E1                    1937 	.db #0xe1	; 225
      0006C6 E1                    1938 	.db #0xe1	; 225
      0006C7 E1                    1939 	.db #0xe1	; 225
      0006C8                       1940 _color_column_4:
      0006C8 F1                    1941 	.db #0xf1	; 241
      0006C9 F1                    1942 	.db #0xf1	; 241
      0006CA F1                    1943 	.db #0xf1	; 241
      0006CB F1                    1944 	.db #0xf1	; 241
      0006CC F1                    1945 	.db #0xf1	; 241
      0006CD F1                    1946 	.db #0xf1	; 241
      0006CE F1                    1947 	.db #0xf1	; 241
      0006CF F1                    1948 	.db #0xf1	; 241
      0006D0                       1949 _color_column_5:
      0006D0 E1                    1950 	.db #0xe1	; 225
      0006D1 E1                    1951 	.db #0xe1	; 225
      0006D2 E1                    1952 	.db #0xe1	; 225
      0006D3 E1                    1953 	.db #0xe1	; 225
      0006D4 E1                    1954 	.db #0xe1	; 225
      0006D5 E1                    1955 	.db #0xe1	; 225
      0006D6 E1                    1956 	.db #0xe1	; 225
      0006D7 E1                    1957 	.db #0xe1	; 225
      0006D8                       1958 _color_column_6:
      0006D8 E1                    1959 	.db #0xe1	; 225
      0006D9 E1                    1960 	.db #0xe1	; 225
      0006DA E1                    1961 	.db #0xe1	; 225
      0006DB 41                    1962 	.db #0x41	; 65	'A'
      0006DC 41                    1963 	.db #0x41	; 65	'A'
      0006DD 41                    1964 	.db #0x41	; 65	'A'
      0006DE 41                    1965 	.db #0x41	; 65	'A'
      0006DF 41                    1966 	.db #0x41	; 65	'A'
      0006E0                       1967 _color_column_7:
      0006E0 F1                    1968 	.db #0xf1	; 241
      0006E1 F1                    1969 	.db #0xf1	; 241
      0006E2 F1                    1970 	.db #0xf1	; 241
      0006E3 F1                    1971 	.db #0xf1	; 241
      0006E4 F1                    1972 	.db #0xf1	; 241
      0006E5 F1                    1973 	.db #0xf1	; 241
      0006E6 F1                    1974 	.db #0xf1	; 241
      0006E7 F1                    1975 	.db #0xf1	; 241
      0006E8                       1976 _color_column_8:
      0006E8 E1                    1977 	.db #0xe1	; 225
      0006E9 E1                    1978 	.db #0xe1	; 225
      0006EA E1                    1979 	.db #0xe1	; 225
      0006EB F1                    1980 	.db #0xf1	; 241
      0006EC E1                    1981 	.db #0xe1	; 225
      0006ED E1                    1982 	.db #0xe1	; 225
      0006EE E1                    1983 	.db #0xe1	; 225
      0006EF E1                    1984 	.db #0xe1	; 225
      0006F0                       1985 _color_column_9:
      0006F0 41                    1986 	.db #0x41	; 65	'A'
      0006F1 41                    1987 	.db #0x41	; 65	'A'
      0006F2 41                    1988 	.db #0x41	; 65	'A'
      0006F3 F1                    1989 	.db #0xf1	; 241
      0006F4 41                    1990 	.db #0x41	; 65	'A'
      0006F5 41                    1991 	.db #0x41	; 65	'A'
      0006F6 41                    1992 	.db #0x41	; 65	'A'
      0006F7 41                    1993 	.db #0x41	; 65	'A'
      0006F8                       1994 _color_column_10:
      0006F8 F1                    1995 	.db #0xf1	; 241
      0006F9 F1                    1996 	.db #0xf1	; 241
      0006FA F1                    1997 	.db #0xf1	; 241
      0006FB F1                    1998 	.db #0xf1	; 241
      0006FC F1                    1999 	.db #0xf1	; 241
      0006FD F1                    2000 	.db #0xf1	; 241
      0006FE F1                    2001 	.db #0xf1	; 241
      0006FF F1                    2002 	.db #0xf1	; 241
      000700                       2003 _color_column_11:
      000700 E1                    2004 	.db #0xe1	; 225
      000701 E1                    2005 	.db #0xe1	; 225
      000702 E1                    2006 	.db #0xe1	; 225
      000703 E1                    2007 	.db #0xe1	; 225
      000704 E1                    2008 	.db #0xe1	; 225
      000705 E1                    2009 	.db #0xe1	; 225
      000706 E1                    2010 	.db #0xe1	; 225
      000707 E1                    2011 	.db #0xe1	; 225
      000708                       2012 _color_column_12:
      000708 41                    2013 	.db #0x41	; 65	'A'
      000709 41                    2014 	.db #0x41	; 65	'A'
      00070A 41                    2015 	.db #0x41	; 65	'A'
      00070B 41                    2016 	.db #0x41	; 65	'A'
      00070C 41                    2017 	.db #0x41	; 65	'A'
      00070D 41                    2018 	.db #0x41	; 65	'A'
      00070E 41                    2019 	.db #0x41	; 65	'A'
      00070F 41                    2020 	.db #0x41	; 65	'A'
      000710                       2021 _color_column_16:
      000710 F1                    2022 	.db #0xf1	; 241
      000711 F1                    2023 	.db #0xf1	; 241
      000712 F1                    2024 	.db #0xf1	; 241
      000713 F1                    2025 	.db #0xf1	; 241
      000714 F1                    2026 	.db #0xf1	; 241
      000715 F1                    2027 	.db #0xf1	; 241
      000716 F1                    2028 	.db #0xf1	; 241
      000717 F1                    2029 	.db #0xf1	; 241
      000718                       2030 _color_column_17:
      000718 E1                    2031 	.db #0xe1	; 225
      000719 E1                    2032 	.db #0xe1	; 225
      00071A E1                    2033 	.db #0xe1	; 225
      00071B E1                    2034 	.db #0xe1	; 225
      00071C E1                    2035 	.db #0xe1	; 225
      00071D E1                    2036 	.db #0xe1	; 225
      00071E E1                    2037 	.db #0xe1	; 225
      00071F E1                    2038 	.db #0xe1	; 225
      000720                       2039 _color_column_18:
      000720 41                    2040 	.db #0x41	; 65	'A'
      000721 41                    2041 	.db #0x41	; 65	'A'
      000722 41                    2042 	.db #0x41	; 65	'A'
      000723 41                    2043 	.db #0x41	; 65	'A'
      000724 41                    2044 	.db #0x41	; 65	'A'
      000725 E1                    2045 	.db #0xe1	; 225
      000726 E1                    2046 	.db #0xe1	; 225
      000727 E1                    2047 	.db #0xe1	; 225
      000728                       2048 _color_column_13:
      000728 E1                    2049 	.db #0xe1	; 225
      000729 E1                    2050 	.db #0xe1	; 225
      00072A E1                    2051 	.db #0xe1	; 225
      00072B E1                    2052 	.db #0xe1	; 225
      00072C E1                    2053 	.db #0xe1	; 225
      00072D E1                    2054 	.db #0xe1	; 225
      00072E E1                    2055 	.db #0xe1	; 225
      00072F F1                    2056 	.db #0xf1	; 241
      000730                       2057 _color_column_14:
      000730 E1                    2058 	.db #0xe1	; 225
      000731 E1                    2059 	.db #0xe1	; 225
      000732 E1                    2060 	.db #0xe1	; 225
      000733 E1                    2061 	.db #0xe1	; 225
      000734 E1                    2062 	.db #0xe1	; 225
      000735 E1                    2063 	.db #0xe1	; 225
      000736 E1                    2064 	.db #0xe1	; 225
      000737 F1                    2065 	.db #0xf1	; 241
      000738                       2066 _color_column_15:
      000738 E1                    2067 	.db #0xe1	; 225
      000739 E1                    2068 	.db #0xe1	; 225
      00073A E1                    2069 	.db #0xe1	; 225
      00073B E1                    2070 	.db #0xe1	; 225
      00073C E1                    2071 	.db #0xe1	; 225
      00073D E1                    2072 	.db #0xe1	; 225
      00073E E1                    2073 	.db #0xe1	; 225
      00073F F1                    2074 	.db #0xf1	; 241
      000740                       2075 _color_dust_0:
      000740 F1                    2076 	.db #0xf1	; 241
      000741 F1                    2077 	.db #0xf1	; 241
      000742 F1                    2078 	.db #0xf1	; 241
      000743 F1                    2079 	.db #0xf1	; 241
      000744 F1                    2080 	.db #0xf1	; 241
      000745 F1                    2081 	.db #0xf1	; 241
      000746 F1                    2082 	.db #0xf1	; 241
      000747 F1                    2083 	.db #0xf1	; 241
      000748                       2084 _color_dust_1:
      000748 F1                    2085 	.db #0xf1	; 241
      000749 F1                    2086 	.db #0xf1	; 241
      00074A F1                    2087 	.db #0xf1	; 241
      00074B F1                    2088 	.db #0xf1	; 241
      00074C F1                    2089 	.db #0xf1	; 241
      00074D F1                    2090 	.db #0xf1	; 241
      00074E F1                    2091 	.db #0xf1	; 241
      00074F F1                    2092 	.db #0xf1	; 241
      000750                       2093 _color_dust_2:
      000750 F1                    2094 	.db #0xf1	; 241
      000751 F1                    2095 	.db #0xf1	; 241
      000752 F1                    2096 	.db #0xf1	; 241
      000753 F1                    2097 	.db #0xf1	; 241
      000754 F1                    2098 	.db #0xf1	; 241
      000755 F1                    2099 	.db #0xf1	; 241
      000756 F1                    2100 	.db #0xf1	; 241
      000757 F1                    2101 	.db #0xf1	; 241
      000758                       2102 _color_dust_3:
      000758 F1                    2103 	.db #0xf1	; 241
      000759 F1                    2104 	.db #0xf1	; 241
      00075A F1                    2105 	.db #0xf1	; 241
      00075B F1                    2106 	.db #0xf1	; 241
      00075C F1                    2107 	.db #0xf1	; 241
      00075D F1                    2108 	.db #0xf1	; 241
      00075E F1                    2109 	.db #0xf1	; 241
      00075F F1                    2110 	.db #0xf1	; 241
      000760                       2111 _color_font_1:
      000760 F1                    2112 	.db #0xf1	; 241
      000761 F1                    2113 	.db #0xf1	; 241
      000762 E1                    2114 	.db #0xe1	; 225
      000763 71                    2115 	.db #0x71	; 113	'q'
      000764 71                    2116 	.db #0x71	; 113	'q'
      000765 51                    2117 	.db #0x51	; 81	'Q'
      000766 51                    2118 	.db #0x51	; 81	'Q'
      000767 41                    2119 	.db #0x41	; 65	'A'
      000768                       2120 _color_font_2:
      000768 61                    2121 	.db #0x61	; 97	'a'
      000769 61                    2122 	.db #0x61	; 97	'a'
      00076A 81                    2123 	.db #0x81	; 129
      00076B 81                    2124 	.db #0x81	; 129
      00076C 91                    2125 	.db #0x91	; 145
      00076D 91                    2126 	.db #0x91	; 145
      00076E E1                    2127 	.db #0xe1	; 225
      00076F E1                    2128 	.db #0xe1	; 225
      000770                       2129 _color_title_1:
      000770 A1                    2130 	.db #0xa1	; 161
      000771 A1                    2131 	.db #0xa1	; 161
      000772 A1                    2132 	.db #0xa1	; 161
      000773 A1                    2133 	.db #0xa1	; 161
      000774 A1                    2134 	.db #0xa1	; 161
      000775 A1                    2135 	.db #0xa1	; 161
      000776 A1                    2136 	.db #0xa1	; 161
      000777 A1                    2137 	.db #0xa1	; 161
      000778                       2138 _color_title_2:
      000778 B1                    2139 	.db #0xb1	; 177
      000779 B1                    2140 	.db #0xb1	; 177
      00077A B1                    2141 	.db #0xb1	; 177
      00077B B1                    2142 	.db #0xb1	; 177
      00077C B1                    2143 	.db #0xb1	; 177
      00077D B1                    2144 	.db #0xb1	; 177
      00077E B1                    2145 	.db #0xb1	; 177
      00077F B1                    2146 	.db #0xb1	; 177
      000780                       2147 _color_title_3:
      000780 D1                    2148 	.db #0xd1	; 209
      000781 D1                    2149 	.db #0xd1	; 209
      000782 D1                    2150 	.db #0xd1	; 209
      000783 D1                    2151 	.db #0xd1	; 209
      000784 D1                    2152 	.db #0xd1	; 209
      000785 D1                    2153 	.db #0xd1	; 209
      000786 D1                    2154 	.db #0xd1	; 209
      000787 D1                    2155 	.db #0xd1	; 209
      000788                       2156 _color_title_4:
      000788 F1                    2157 	.db #0xf1	; 241
      000789 F1                    2158 	.db #0xf1	; 241
      00078A F1                    2159 	.db #0xf1	; 241
      00078B F1                    2160 	.db #0xf1	; 241
      00078C F1                    2161 	.db #0xf1	; 241
      00078D F1                    2162 	.db #0xf1	; 241
      00078E F1                    2163 	.db #0xf1	; 241
      00078F F1                    2164 	.db #0xf1	; 241
      000790                       2165 _color_title_5:
      000790 71                    2166 	.db #0x71	; 113	'q'
      000791 71                    2167 	.db #0x71	; 113	'q'
      000792 71                    2168 	.db #0x71	; 113	'q'
      000793 71                    2169 	.db #0x71	; 113	'q'
      000794 71                    2170 	.db #0x71	; 113	'q'
      000795 71                    2171 	.db #0x71	; 113	'q'
      000796 71                    2172 	.db #0x71	; 113	'q'
      000797 71                    2173 	.db #0x71	; 113	'q'
      000798                       2174 _color_title_6:
      000798 51                    2175 	.db #0x51	; 81	'Q'
      000799 51                    2176 	.db #0x51	; 81	'Q'
      00079A 51                    2177 	.db #0x51	; 81	'Q'
      00079B 51                    2178 	.db #0x51	; 81	'Q'
      00079C 51                    2179 	.db #0x51	; 81	'Q'
      00079D 51                    2180 	.db #0x51	; 81	'Q'
      00079E 51                    2181 	.db #0x51	; 81	'Q'
      00079F 51                    2182 	.db #0x51	; 81	'Q'
      0007A0                       2183 _color_title_7:
      0007A0 41                    2184 	.db #0x41	; 65	'A'
      0007A1 41                    2185 	.db #0x41	; 65	'A'
      0007A2 41                    2186 	.db #0x41	; 65	'A'
      0007A3 41                    2187 	.db #0x41	; 65	'A'
      0007A4 41                    2188 	.db #0x41	; 65	'A'
      0007A5 41                    2189 	.db #0x41	; 65	'A'
      0007A6 41                    2190 	.db #0x41	; 65	'A'
      0007A7 41                    2191 	.db #0x41	; 65	'A'
      0007A8                       2192 _sprite_arrow_0:
      0007A8 00                    2193 	.db #0x00	; 0
      0007A9 00                    2194 	.db #0x00	; 0
      0007AA 00                    2195 	.db #0x00	; 0
      0007AB 00                    2196 	.db #0x00	; 0
      0007AC 00                    2197 	.db #0x00	; 0
      0007AD 00                    2198 	.db #0x00	; 0
      0007AE 00                    2199 	.db #0x00	; 0
      0007AF 00                    2200 	.db #0x00	; 0
      0007B0                       2201 _sprite_arrow_1:
      0007B0 FF                    2202 	.db #0xff	; 255
      0007B1 00                    2203 	.db #0x00	; 0
      0007B2 3F                    2204 	.db #0x3f	; 63
      0007B3 00                    2205 	.db #0x00	; 0
      0007B4 0F                    2206 	.db #0x0f	; 15
      0007B5 00                    2207 	.db #0x00	; 0
      0007B6 03                    2208 	.db #0x03	; 3
      0007B7 00                    2209 	.db #0x00	; 0
      0007B8                       2210 _sprite_arrow_2:
      0007B8 00                    2211 	.db #0x00	; 0
      0007B9 00                    2212 	.db #0x00	; 0
      0007BA 00                    2213 	.db #0x00	; 0
      0007BB 00                    2214 	.db #0x00	; 0
      0007BC 00                    2215 	.db #0x00	; 0
      0007BD 00                    2216 	.db #0x00	; 0
      0007BE 00                    2217 	.db #0x00	; 0
      0007BF 00                    2218 	.db #0x00	; 0
      0007C0                       2219 _sprite_arrow_3:
      0007C0 FF                    2220 	.db #0xff	; 255
      0007C1 00                    2221 	.db #0x00	; 0
      0007C2 FC                    2222 	.db #0xfc	; 252
      0007C3 00                    2223 	.db #0x00	; 0
      0007C4 F0                    2224 	.db #0xf0	; 240
      0007C5 00                    2225 	.db #0x00	; 0
      0007C6 C0                    2226 	.db #0xc0	; 192
      0007C7 00                    2227 	.db #0x00	; 0
      0007C8                       2228 _sprite_hit_1:
      0007C8 00                    2229 	.db #0x00	; 0
      0007C9 77                    2230 	.db #0x77	; 119	'w'
      0007CA 22                    2231 	.db #0x22	; 34
      0007CB 22                    2232 	.db #0x22	; 34
      0007CC 22                    2233 	.db #0x22	; 34
      0007CD 3E                    2234 	.db #0x3e	; 62
      0007CE 22                    2235 	.db #0x22	; 34
      0007CF 22                    2236 	.db #0x22	; 34
      0007D0 22                    2237 	.db #0x22	; 34
      0007D1 77                    2238 	.db #0x77	; 119	'w'
      0007D2 00                    2239 	.db #0x00	; 0
      0007D3 00                    2240 	.db #0x00	; 0
      0007D4 00                    2241 	.db #0x00	; 0
      0007D5 00                    2242 	.db #0x00	; 0
      0007D6 00                    2243 	.db #0x00	; 0
      0007D7 00                    2244 	.db #0x00	; 0
      0007D8 00                    2245 	.db #0x00	; 0
      0007D9 77                    2246 	.db #0x77	; 119	'w'
      0007DA 25                    2247 	.db #0x25	; 37
      0007DB 21                    2248 	.db #0x21	; 33
      0007DC 21                    2249 	.db #0x21	; 33
      0007DD 21                    2250 	.db #0x21	; 33
      0007DE 21                    2251 	.db #0x21	; 33
      0007DF 21                    2252 	.db #0x21	; 33
      0007E0 21                    2253 	.db #0x21	; 33
      0007E1 73                    2254 	.db #0x73	; 115	's'
      0007E2 00                    2255 	.db #0x00	; 0
      0007E3 00                    2256 	.db #0x00	; 0
      0007E4 00                    2257 	.db #0x00	; 0
      0007E5 00                    2258 	.db #0x00	; 0
      0007E6 00                    2259 	.db #0x00	; 0
      0007E7 00                    2260 	.db #0x00	; 0
      0007E8                       2261 _sprite_hit_2:
      0007E8 00                    2262 	.db #0x00	; 0
      0007E9 C0                    2263 	.db #0xc0	; 192
      0007EA 40                    2264 	.db #0x40	; 64
      0007EB 00                    2265 	.db #0x00	; 0
      0007EC 00                    2266 	.db #0x00	; 0
      0007ED 00                    2267 	.db #0x00	; 0
      0007EE 00                    2268 	.db #0x00	; 0
      0007EF 00                    2269 	.db #0x00	; 0
      0007F0 00                    2270 	.db #0x00	; 0
      0007F1 80                    2271 	.db #0x80	; 128
      0007F2 00                    2272 	.db #0x00	; 0
      0007F3 00                    2273 	.db #0x00	; 0
      0007F4 00                    2274 	.db #0x00	; 0
      0007F5 00                    2275 	.db #0x00	; 0
      0007F6 00                    2276 	.db #0x00	; 0
      0007F7 00                    2277 	.db #0x00	; 0
      0007F8 00                    2278 	.db #0x00	; 0
      0007F9 00                    2279 	.db #0x00	; 0
      0007FA 00                    2280 	.db #0x00	; 0
      0007FB 00                    2281 	.db #0x00	; 0
      0007FC 00                    2282 	.db #0x00	; 0
      0007FD 00                    2283 	.db #0x00	; 0
      0007FE 00                    2284 	.db #0x00	; 0
      0007FF 00                    2285 	.db #0x00	; 0
      000800 00                    2286 	.db #0x00	; 0
      000801 00                    2287 	.db #0x00	; 0
      000802 00                    2288 	.db #0x00	; 0
      000803 00                    2289 	.db #0x00	; 0
      000804 00                    2290 	.db #0x00	; 0
      000805 00                    2291 	.db #0x00	; 0
      000806 00                    2292 	.db #0x00	; 0
      000807 00                    2293 	.db #0x00	; 0
      000808                       2294 _sprite_combo_1:
      000808 00                    2295 	.db #0x00	; 0
      000809 38                    2296 	.db #0x38	; 56	'8'
      00080A 65                    2297 	.db #0x65	; 101	'e'
      00080B 61                    2298 	.db #0x61	; 97	'a'
      00080C 61                    2299 	.db #0x61	; 97	'a'
      00080D 61                    2300 	.db #0x61	; 97	'a'
      00080E 61                    2301 	.db #0x61	; 97	'a'
      00080F 61                    2302 	.db #0x61	; 97	'a'
      000810 65                    2303 	.db #0x65	; 101	'e'
      000811 38                    2304 	.db #0x38	; 56	'8'
      000812 00                    2305 	.db #0x00	; 0
      000813 00                    2306 	.db #0x00	; 0
      000814 00                    2307 	.db #0x00	; 0
      000815 00                    2308 	.db #0x00	; 0
      000816 00                    2309 	.db #0x00	; 0
      000817 00                    2310 	.db #0x00	; 0
      000818 00                    2311 	.db #0x00	; 0
      000819 E6                    2312 	.db #0xe6	; 230
      00081A 13                    2313 	.db #0x13	; 19
      00081B 12                    2314 	.db #0x12	; 18
      00081C 12                    2315 	.db #0x12	; 18
      00081D 12                    2316 	.db #0x12	; 18
      00081E 12                    2317 	.db #0x12	; 18
      00081F 12                    2318 	.db #0x12	; 18
      000820 12                    2319 	.db #0x12	; 18
      000821 E7                    2320 	.db #0xe7	; 231
      000822 00                    2321 	.db #0x00	; 0
      000823 00                    2322 	.db #0x00	; 0
      000824 00                    2323 	.db #0x00	; 0
      000825 00                    2324 	.db #0x00	; 0
      000826 00                    2325 	.db #0x00	; 0
      000827 00                    2326 	.db #0x00	; 0
      000828                       2327 _sprite_combo_2:
      000828 00                    2328 	.db #0x00	; 0
      000829 37                    2329 	.db #0x37	; 55	'7'
      00082A 62                    2330 	.db #0x62	; 98	'b'
      00082B A2                    2331 	.db #0xa2	; 162
      00082C 22                    2332 	.db #0x22	; 34
      00082D 23                    2333 	.db #0x23	; 35
      00082E 22                    2334 	.db #0x22	; 34
      00082F 22                    2335 	.db #0x22	; 34
      000830 22                    2336 	.db #0x22	; 34
      000831 77                    2337 	.db #0x77	; 119	'w'
      000832 00                    2338 	.db #0x00	; 0
      000833 00                    2339 	.db #0x00	; 0
      000834 00                    2340 	.db #0x00	; 0
      000835 00                    2341 	.db #0x00	; 0
      000836 00                    2342 	.db #0x00	; 0
      000837 00                    2343 	.db #0x00	; 0
      000838 00                    2344 	.db #0x00	; 0
      000839 8E                    2345 	.db #0x8e	; 142
      00083A 51                    2346 	.db #0x51	; 81	'Q'
      00083B 51                    2347 	.db #0x51	; 81	'Q'
      00083C 51                    2348 	.db #0x51	; 81	'Q'
      00083D 91                    2349 	.db #0x91	; 145
      00083E 51                    2350 	.db #0x51	; 81	'Q'
      00083F 51                    2351 	.db #0x51	; 81	'Q'
      000840 51                    2352 	.db #0x51	; 81	'Q'
      000841 8E                    2353 	.db #0x8e	; 142
      000842 00                    2354 	.db #0x00	; 0
      000843 00                    2355 	.db #0x00	; 0
      000844 00                    2356 	.db #0x00	; 0
      000845 00                    2357 	.db #0x00	; 0
      000846 00                    2358 	.db #0x00	; 0
      000847 00                    2359 	.db #0x00	; 0
      000848                       2360 _sprite_2x:
      000848 00                    2361 	.db #0x00	; 0
      000849 3E                    2362 	.db #0x3e	; 62
      00084A 63                    2363 	.db #0x63	; 99	'c'
      00084B 03                    2364 	.db #0x03	; 3
      00084C 03                    2365 	.db #0x03	; 3
      00084D 1E                    2366 	.db #0x1e	; 30
      00084E 30                    2367 	.db #0x30	; 48	'0'
      00084F 60                    2368 	.db #0x60	; 96
      000850 60                    2369 	.db #0x60	; 96
      000851 7F                    2370 	.db #0x7f	; 127
      000852 00                    2371 	.db #0x00	; 0
      000853 00                    2372 	.db #0x00	; 0
      000854 00                    2373 	.db #0x00	; 0
      000855 00                    2374 	.db #0x00	; 0
      000856 00                    2375 	.db #0x00	; 0
      000857 00                    2376 	.db #0x00	; 0
      000858 00                    2377 	.db #0x00	; 0
      000859 00                    2378 	.db #0x00	; 0
      00085A 00                    2379 	.db #0x00	; 0
      00085B 63                    2380 	.db #0x63	; 99	'c'
      00085C 36                    2381 	.db #0x36	; 54	'6'
      00085D 1C                    2382 	.db #0x1c	; 28
      00085E 08                    2383 	.db #0x08	; 8
      00085F 1C                    2384 	.db #0x1c	; 28
      000860 36                    2385 	.db #0x36	; 54	'6'
      000861 63                    2386 	.db #0x63	; 99	'c'
      000862 00                    2387 	.db #0x00	; 0
      000863 00                    2388 	.db #0x00	; 0
      000864 00                    2389 	.db #0x00	; 0
      000865 00                    2390 	.db #0x00	; 0
      000866 00                    2391 	.db #0x00	; 0
      000867 00                    2392 	.db #0x00	; 0
      000868                       2393 _sprite_3x:
      000868 00                    2394 	.db #0x00	; 0
      000869 3E                    2395 	.db #0x3e	; 62
      00086A 63                    2396 	.db #0x63	; 99	'c'
      00086B 03                    2397 	.db #0x03	; 3
      00086C 03                    2398 	.db #0x03	; 3
      00086D 1E                    2399 	.db #0x1e	; 30
      00086E 03                    2400 	.db #0x03	; 3
      00086F 03                    2401 	.db #0x03	; 3
      000870 63                    2402 	.db #0x63	; 99	'c'
      000871 3E                    2403 	.db #0x3e	; 62
      000872 00                    2404 	.db #0x00	; 0
      000873 00                    2405 	.db #0x00	; 0
      000874 00                    2406 	.db #0x00	; 0
      000875 00                    2407 	.db #0x00	; 0
      000876 00                    2408 	.db #0x00	; 0
      000877 00                    2409 	.db #0x00	; 0
      000878 00                    2410 	.db #0x00	; 0
      000879 00                    2411 	.db #0x00	; 0
      00087A 00                    2412 	.db #0x00	; 0
      00087B 63                    2413 	.db #0x63	; 99	'c'
      00087C 36                    2414 	.db #0x36	; 54	'6'
      00087D 1C                    2415 	.db #0x1c	; 28
      00087E 08                    2416 	.db #0x08	; 8
      00087F 1C                    2417 	.db #0x1c	; 28
      000880 36                    2418 	.db #0x36	; 54	'6'
      000881 63                    2419 	.db #0x63	; 99	'c'
      000882 00                    2420 	.db #0x00	; 0
      000883 00                    2421 	.db #0x00	; 0
      000884 00                    2422 	.db #0x00	; 0
      000885 00                    2423 	.db #0x00	; 0
      000886 00                    2424 	.db #0x00	; 0
      000887 00                    2425 	.db #0x00	; 0
      000888                       2426 _sprite_4x:
      000888 00                    2427 	.db #0x00	; 0
      000889 02                    2428 	.db #0x02	; 2
      00088A 06                    2429 	.db #0x06	; 6
      00088B 0E                    2430 	.db #0x0e	; 14
      00088C 16                    2431 	.db #0x16	; 22
      00088D 26                    2432 	.db #0x26	; 38
      00088E 7F                    2433 	.db #0x7f	; 127
      00088F 06                    2434 	.db #0x06	; 6
      000890 06                    2435 	.db #0x06	; 6
      000891 0F                    2436 	.db #0x0f	; 15
      000892 00                    2437 	.db #0x00	; 0
      000893 00                    2438 	.db #0x00	; 0
      000894 00                    2439 	.db #0x00	; 0
      000895 00                    2440 	.db #0x00	; 0
      000896 00                    2441 	.db #0x00	; 0
      000897 00                    2442 	.db #0x00	; 0
      000898 00                    2443 	.db #0x00	; 0
      000899 00                    2444 	.db #0x00	; 0
      00089A 00                    2445 	.db #0x00	; 0
      00089B 63                    2446 	.db #0x63	; 99	'c'
      00089C 36                    2447 	.db #0x36	; 54	'6'
      00089D 1C                    2448 	.db #0x1c	; 28
      00089E 08                    2449 	.db #0x08	; 8
      00089F 1C                    2450 	.db #0x1c	; 28
      0008A0 36                    2451 	.db #0x36	; 54	'6'
      0008A1 63                    2452 	.db #0x63	; 99	'c'
      0008A2 00                    2453 	.db #0x00	; 0
      0008A3 00                    2454 	.db #0x00	; 0
      0008A4 00                    2455 	.db #0x00	; 0
      0008A5 00                    2456 	.db #0x00	; 0
      0008A6 00                    2457 	.db #0x00	; 0
      0008A7 00                    2458 	.db #0x00	; 0
      0008A8                       2459 _sprite_5x:
      0008A8 00                    2460 	.db #0x00	; 0
      0008A9 7E                    2461 	.db #0x7e	; 126
      0008AA 60                    2462 	.db #0x60	; 96
      0008AB 60                    2463 	.db #0x60	; 96
      0008AC 7E                    2464 	.db #0x7e	; 126
      0008AD 03                    2465 	.db #0x03	; 3
      0008AE 03                    2466 	.db #0x03	; 3
      0008AF 03                    2467 	.db #0x03	; 3
      0008B0 63                    2468 	.db #0x63	; 99	'c'
      0008B1 3E                    2469 	.db #0x3e	; 62
      0008B2 00                    2470 	.db #0x00	; 0
      0008B3 00                    2471 	.db #0x00	; 0
      0008B4 00                    2472 	.db #0x00	; 0
      0008B5 00                    2473 	.db #0x00	; 0
      0008B6 00                    2474 	.db #0x00	; 0
      0008B7 00                    2475 	.db #0x00	; 0
      0008B8 00                    2476 	.db #0x00	; 0
      0008B9 00                    2477 	.db #0x00	; 0
      0008BA 00                    2478 	.db #0x00	; 0
      0008BB 63                    2479 	.db #0x63	; 99	'c'
      0008BC 36                    2480 	.db #0x36	; 54	'6'
      0008BD 1C                    2481 	.db #0x1c	; 28
      0008BE 08                    2482 	.db #0x08	; 8
      0008BF 1C                    2483 	.db #0x1c	; 28
      0008C0 36                    2484 	.db #0x36	; 54	'6'
      0008C1 63                    2485 	.db #0x63	; 99	'c'
      0008C2 00                    2486 	.db #0x00	; 0
      0008C3 00                    2487 	.db #0x00	; 0
      0008C4 00                    2488 	.db #0x00	; 0
      0008C5 00                    2489 	.db #0x00	; 0
      0008C6 00                    2490 	.db #0x00	; 0
      0008C7 00                    2491 	.db #0x00	; 0
      0008C8                       2492 _sprite_6x:
      0008C8 00                    2493 	.db #0x00	; 0
      0008C9 3E                    2494 	.db #0x3e	; 62
      0008CA 61                    2495 	.db #0x61	; 97	'a'
      0008CB 60                    2496 	.db #0x60	; 96
      0008CC 7E                    2497 	.db #0x7e	; 126
      0008CD 63                    2498 	.db #0x63	; 99	'c'
      0008CE 63                    2499 	.db #0x63	; 99	'c'
      0008CF 63                    2500 	.db #0x63	; 99	'c'
      0008D0 63                    2501 	.db #0x63	; 99	'c'
      0008D1 3E                    2502 	.db #0x3e	; 62
      0008D2 00                    2503 	.db #0x00	; 0
      0008D3 00                    2504 	.db #0x00	; 0
      0008D4 00                    2505 	.db #0x00	; 0
      0008D5 00                    2506 	.db #0x00	; 0
      0008D6 00                    2507 	.db #0x00	; 0
      0008D7 00                    2508 	.db #0x00	; 0
      0008D8 00                    2509 	.db #0x00	; 0
      0008D9 00                    2510 	.db #0x00	; 0
      0008DA 00                    2511 	.db #0x00	; 0
      0008DB 63                    2512 	.db #0x63	; 99	'c'
      0008DC 36                    2513 	.db #0x36	; 54	'6'
      0008DD 1C                    2514 	.db #0x1c	; 28
      0008DE 08                    2515 	.db #0x08	; 8
      0008DF 1C                    2516 	.db #0x1c	; 28
      0008E0 36                    2517 	.db #0x36	; 54	'6'
      0008E1 63                    2518 	.db #0x63	; 99	'c'
      0008E2 00                    2519 	.db #0x00	; 0
      0008E3 00                    2520 	.db #0x00	; 0
      0008E4 00                    2521 	.db #0x00	; 0
      0008E5 00                    2522 	.db #0x00	; 0
      0008E6 00                    2523 	.db #0x00	; 0
      0008E7 00                    2524 	.db #0x00	; 0
      0008E8                       2525 _sprite_mega_hit:
      0008E8 04                    2526 	.db #0x04	; 4
      0008E9 06                    2527 	.db #0x06	; 6
      0008EA 05                    2528 	.db #0x05	; 5
      0008EB 04                    2529 	.db #0x04	; 4
      0008EC 04                    2530 	.db #0x04	; 4
      0008ED 00                    2531 	.db #0x00	; 0
      0008EE 03                    2532 	.db #0x03	; 3
      0008EF 04                    2533 	.db #0x04	; 4
      0008F0 05                    2534 	.db #0x05	; 5
      0008F1 04                    2535 	.db #0x04	; 4
      0008F2 03                    2536 	.db #0x03	; 3
      0008F3 00                    2537 	.db #0x00	; 0
      0008F4 00                    2538 	.db #0x00	; 0
      0008F5 00                    2539 	.db #0x00	; 0
      0008F6 00                    2540 	.db #0x00	; 0
      0008F7 00                    2541 	.db #0x00	; 0
      0008F8 5C                    2542 	.db #0x5c	; 92
      0008F9 D0                    2543 	.db #0xd0	; 208
      0008FA 5C                    2544 	.db #0x5c	; 92
      0008FB 50                    2545 	.db #0x50	; 80	'P'
      0008FC 5C                    2546 	.db #0x5c	; 92
      0008FD 00                    2547 	.db #0x00	; 0
      0008FE 98                    2548 	.db #0x98	; 152
      0008FF 24                    2549 	.db #0x24	; 36
      000900 A4                    2550 	.db #0xa4	; 164
      000901 BC                    2551 	.db #0xbc	; 188
      000902 A4                    2552 	.db #0xa4	; 164
      000903 00                    2553 	.db #0x00	; 0
      000904 00                    2554 	.db #0x00	; 0
      000905 00                    2555 	.db #0x00	; 0
      000906 00                    2556 	.db #0x00	; 0
      000907 00                    2557 	.db #0x00	; 0
      000908                       2558 _sprite_explosion_0:
      000908 00                    2559 	.db #0x00	; 0
      000909 00                    2560 	.db #0x00	; 0
      00090A 00                    2561 	.db #0x00	; 0
      00090B 00                    2562 	.db #0x00	; 0
      00090C 00                    2563 	.db #0x00	; 0
      00090D 00                    2564 	.db #0x00	; 0
      00090E 01                    2565 	.db #0x01	; 1
      00090F 02                    2566 	.db #0x02	; 2
      000910 01                    2567 	.db #0x01	; 1
      000911 00                    2568 	.db #0x00	; 0
      000912 00                    2569 	.db #0x00	; 0
      000913 00                    2570 	.db #0x00	; 0
      000914 00                    2571 	.db #0x00	; 0
      000915 00                    2572 	.db #0x00	; 0
      000916 00                    2573 	.db #0x00	; 0
      000917 00                    2574 	.db #0x00	; 0
      000918 00                    2575 	.db #0x00	; 0
      000919 00                    2576 	.db #0x00	; 0
      00091A 00                    2577 	.db #0x00	; 0
      00091B 00                    2578 	.db #0x00	; 0
      00091C 00                    2579 	.db #0x00	; 0
      00091D 00                    2580 	.db #0x00	; 0
      00091E 00                    2581 	.db #0x00	; 0
      00091F 80                    2582 	.db #0x80	; 128
      000920 00                    2583 	.db #0x00	; 0
      000921 00                    2584 	.db #0x00	; 0
      000922 00                    2585 	.db #0x00	; 0
      000923 00                    2586 	.db #0x00	; 0
      000924 00                    2587 	.db #0x00	; 0
      000925 00                    2588 	.db #0x00	; 0
      000926 00                    2589 	.db #0x00	; 0
      000927 00                    2590 	.db #0x00	; 0
      000928                       2591 _sprite_explosion_1:
      000928 00                    2592 	.db #0x00	; 0
      000929 00                    2593 	.db #0x00	; 0
      00092A 00                    2594 	.db #0x00	; 0
      00092B 00                    2595 	.db #0x00	; 0
      00092C 00                    2596 	.db #0x00	; 0
      00092D 01                    2597 	.db #0x01	; 1
      00092E 00                    2598 	.db #0x00	; 0
      00092F 04                    2599 	.db #0x04	; 4
      000930 00                    2600 	.db #0x00	; 0
      000931 01                    2601 	.db #0x01	; 1
      000932 00                    2602 	.db #0x00	; 0
      000933 00                    2603 	.db #0x00	; 0
      000934 00                    2604 	.db #0x00	; 0
      000935 00                    2605 	.db #0x00	; 0
      000936 00                    2606 	.db #0x00	; 0
      000937 00                    2607 	.db #0x00	; 0
      000938 00                    2608 	.db #0x00	; 0
      000939 00                    2609 	.db #0x00	; 0
      00093A 00                    2610 	.db #0x00	; 0
      00093B 00                    2611 	.db #0x00	; 0
      00093C 00                    2612 	.db #0x00	; 0
      00093D 00                    2613 	.db #0x00	; 0
      00093E 00                    2614 	.db #0x00	; 0
      00093F 40                    2615 	.db #0x40	; 64
      000940 00                    2616 	.db #0x00	; 0
      000941 00                    2617 	.db #0x00	; 0
      000942 00                    2618 	.db #0x00	; 0
      000943 00                    2619 	.db #0x00	; 0
      000944 00                    2620 	.db #0x00	; 0
      000945 00                    2621 	.db #0x00	; 0
      000946 00                    2622 	.db #0x00	; 0
      000947 00                    2623 	.db #0x00	; 0
      000948                       2624 _sprite_explosion_2:
      000948 00                    2625 	.db #0x00	; 0
      000949 00                    2626 	.db #0x00	; 0
      00094A 00                    2627 	.db #0x00	; 0
      00094B 00                    2628 	.db #0x00	; 0
      00094C 01                    2629 	.db #0x01	; 1
      00094D 04                    2630 	.db #0x04	; 4
      00094E 00                    2631 	.db #0x00	; 0
      00094F 08                    2632 	.db #0x08	; 8
      000950 00                    2633 	.db #0x00	; 0
      000951 04                    2634 	.db #0x04	; 4
      000952 01                    2635 	.db #0x01	; 1
      000953 00                    2636 	.db #0x00	; 0
      000954 00                    2637 	.db #0x00	; 0
      000955 00                    2638 	.db #0x00	; 0
      000956 00                    2639 	.db #0x00	; 0
      000957 00                    2640 	.db #0x00	; 0
      000958 00                    2641 	.db #0x00	; 0
      000959 00                    2642 	.db #0x00	; 0
      00095A 00                    2643 	.db #0x00	; 0
      00095B 00                    2644 	.db #0x00	; 0
      00095C 00                    2645 	.db #0x00	; 0
      00095D 40                    2646 	.db #0x40	; 64
      00095E 00                    2647 	.db #0x00	; 0
      00095F 20                    2648 	.db #0x20	; 32
      000960 00                    2649 	.db #0x00	; 0
      000961 40                    2650 	.db #0x40	; 64
      000962 00                    2651 	.db #0x00	; 0
      000963 00                    2652 	.db #0x00	; 0
      000964 00                    2653 	.db #0x00	; 0
      000965 00                    2654 	.db #0x00	; 0
      000966 00                    2655 	.db #0x00	; 0
      000967 00                    2656 	.db #0x00	; 0
      000968                       2657 _sprite_explosion_3:
      000968 00                    2658 	.db #0x00	; 0
      000969 00                    2659 	.db #0x00	; 0
      00096A 00                    2660 	.db #0x00	; 0
      00096B 01                    2661 	.db #0x01	; 1
      00096C 08                    2662 	.db #0x08	; 8
      00096D 00                    2663 	.db #0x00	; 0
      00096E 00                    2664 	.db #0x00	; 0
      00096F 10                    2665 	.db #0x10	; 16
      000970 00                    2666 	.db #0x00	; 0
      000971 00                    2667 	.db #0x00	; 0
      000972 08                    2668 	.db #0x08	; 8
      000973 01                    2669 	.db #0x01	; 1
      000974 00                    2670 	.db #0x00	; 0
      000975 00                    2671 	.db #0x00	; 0
      000976 00                    2672 	.db #0x00	; 0
      000977 00                    2673 	.db #0x00	; 0
      000978 00                    2674 	.db #0x00	; 0
      000979 00                    2675 	.db #0x00	; 0
      00097A 00                    2676 	.db #0x00	; 0
      00097B 00                    2677 	.db #0x00	; 0
      00097C 20                    2678 	.db #0x20	; 32
      00097D 00                    2679 	.db #0x00	; 0
      00097E 00                    2680 	.db #0x00	; 0
      00097F 10                    2681 	.db #0x10	; 16
      000980 00                    2682 	.db #0x00	; 0
      000981 00                    2683 	.db #0x00	; 0
      000982 20                    2684 	.db #0x20	; 32
      000983 00                    2685 	.db #0x00	; 0
      000984 00                    2686 	.db #0x00	; 0
      000985 00                    2687 	.db #0x00	; 0
      000986 00                    2688 	.db #0x00	; 0
      000987 00                    2689 	.db #0x00	; 0
      000988                       2690 _sprite_explosion_4:
      000988 00                    2691 	.db #0x00	; 0
      000989 00                    2692 	.db #0x00	; 0
      00098A 01                    2693 	.db #0x01	; 1
      00098B 10                    2694 	.db #0x10	; 16
      00098C 00                    2695 	.db #0x00	; 0
      00098D 00                    2696 	.db #0x00	; 0
      00098E 00                    2697 	.db #0x00	; 0
      00098F 20                    2698 	.db #0x20	; 32
      000990 00                    2699 	.db #0x00	; 0
      000991 00                    2700 	.db #0x00	; 0
      000992 00                    2701 	.db #0x00	; 0
      000993 10                    2702 	.db #0x10	; 16
      000994 01                    2703 	.db #0x01	; 1
      000995 00                    2704 	.db #0x00	; 0
      000996 00                    2705 	.db #0x00	; 0
      000997 00                    2706 	.db #0x00	; 0
      000998 00                    2707 	.db #0x00	; 0
      000999 00                    2708 	.db #0x00	; 0
      00099A 00                    2709 	.db #0x00	; 0
      00099B 10                    2710 	.db #0x10	; 16
      00099C 00                    2711 	.db #0x00	; 0
      00099D 00                    2712 	.db #0x00	; 0
      00099E 00                    2713 	.db #0x00	; 0
      00099F 08                    2714 	.db #0x08	; 8
      0009A0 00                    2715 	.db #0x00	; 0
      0009A1 00                    2716 	.db #0x00	; 0
      0009A2 00                    2717 	.db #0x00	; 0
      0009A3 10                    2718 	.db #0x10	; 16
      0009A4 00                    2719 	.db #0x00	; 0
      0009A5 00                    2720 	.db #0x00	; 0
      0009A6 00                    2721 	.db #0x00	; 0
      0009A7 00                    2722 	.db #0x00	; 0
      0009A8                       2723 _sprite_explosion_5:
      0009A8 01                    2724 	.db #0x01	; 1
      0009A9 00                    2725 	.db #0x00	; 0
      0009AA 20                    2726 	.db #0x20	; 32
      0009AB 00                    2727 	.db #0x00	; 0
      0009AC 00                    2728 	.db #0x00	; 0
      0009AD 00                    2729 	.db #0x00	; 0
      0009AE 00                    2730 	.db #0x00	; 0
      0009AF 80                    2731 	.db #0x80	; 128
      0009B0 00                    2732 	.db #0x00	; 0
      0009B1 00                    2733 	.db #0x00	; 0
      0009B2 00                    2734 	.db #0x00	; 0
      0009B3 00                    2735 	.db #0x00	; 0
      0009B4 20                    2736 	.db #0x20	; 32
      0009B5 00                    2737 	.db #0x00	; 0
      0009B6 01                    2738 	.db #0x01	; 1
      0009B7 00                    2739 	.db #0x00	; 0
      0009B8 00                    2740 	.db #0x00	; 0
      0009B9 00                    2741 	.db #0x00	; 0
      0009BA 08                    2742 	.db #0x08	; 8
      0009BB 00                    2743 	.db #0x00	; 0
      0009BC 00                    2744 	.db #0x00	; 0
      0009BD 00                    2745 	.db #0x00	; 0
      0009BE 00                    2746 	.db #0x00	; 0
      0009BF 02                    2747 	.db #0x02	; 2
      0009C0 00                    2748 	.db #0x00	; 0
      0009C1 00                    2749 	.db #0x00	; 0
      0009C2 00                    2750 	.db #0x00	; 0
      0009C3 00                    2751 	.db #0x00	; 0
      0009C4 08                    2752 	.db #0x08	; 8
      0009C5 00                    2753 	.db #0x00	; 0
      0009C6 00                    2754 	.db #0x00	; 0
      0009C7 00                    2755 	.db #0x00	; 0
      0009C8                       2756 _sprite_explosion_6:
      0009C8 00                    2757 	.db #0x00	; 0
      0009C9 01                    2758 	.db #0x01	; 1
      0009CA 00                    2759 	.db #0x00	; 0
      0009CB 20                    2760 	.db #0x20	; 32
      0009CC 00                    2761 	.db #0x00	; 0
      0009CD 00                    2762 	.db #0x00	; 0
      0009CE 00                    2763 	.db #0x00	; 0
      0009CF 00                    2764 	.db #0x00	; 0
      0009D0 80                    2765 	.db #0x80	; 128
      0009D1 00                    2766 	.db #0x00	; 0
      0009D2 00                    2767 	.db #0x00	; 0
      0009D3 00                    2768 	.db #0x00	; 0
      0009D4 00                    2769 	.db #0x00	; 0
      0009D5 20                    2770 	.db #0x20	; 32
      0009D6 00                    2771 	.db #0x00	; 0
      0009D7 01                    2772 	.db #0x01	; 1
      0009D8 00                    2773 	.db #0x00	; 0
      0009D9 00                    2774 	.db #0x00	; 0
      0009DA 00                    2775 	.db #0x00	; 0
      0009DB 08                    2776 	.db #0x08	; 8
      0009DC 00                    2777 	.db #0x00	; 0
      0009DD 00                    2778 	.db #0x00	; 0
      0009DE 00                    2779 	.db #0x00	; 0
      0009DF 00                    2780 	.db #0x00	; 0
      0009E0 02                    2781 	.db #0x02	; 2
      0009E1 00                    2782 	.db #0x00	; 0
      0009E2 00                    2783 	.db #0x00	; 0
      0009E3 00                    2784 	.db #0x00	; 0
      0009E4 00                    2785 	.db #0x00	; 0
      0009E5 08                    2786 	.db #0x08	; 8
      0009E6 00                    2787 	.db #0x00	; 0
      0009E7 00                    2788 	.db #0x00	; 0
      0009E8                       2789 _sprite_explosion_7:
      0009E8 00                    2790 	.db #0x00	; 0
      0009E9 00                    2791 	.db #0x00	; 0
      0009EA 01                    2792 	.db #0x01	; 1
      0009EB 00                    2793 	.db #0x00	; 0
      0009EC 20                    2794 	.db #0x20	; 32
      0009ED 00                    2795 	.db #0x00	; 0
      0009EE 00                    2796 	.db #0x00	; 0
      0009EF 00                    2797 	.db #0x00	; 0
      0009F0 00                    2798 	.db #0x00	; 0
      0009F1 80                    2799 	.db #0x80	; 128
      0009F2 00                    2800 	.db #0x00	; 0
      0009F3 00                    2801 	.db #0x00	; 0
      0009F4 00                    2802 	.db #0x00	; 0
      0009F5 00                    2803 	.db #0x00	; 0
      0009F6 20                    2804 	.db #0x20	; 32
      0009F7 00                    2805 	.db #0x00	; 0
      0009F8 00                    2806 	.db #0x00	; 0
      0009F9 00                    2807 	.db #0x00	; 0
      0009FA 00                    2808 	.db #0x00	; 0
      0009FB 00                    2809 	.db #0x00	; 0
      0009FC 08                    2810 	.db #0x08	; 8
      0009FD 00                    2811 	.db #0x00	; 0
      0009FE 00                    2812 	.db #0x00	; 0
      0009FF 00                    2813 	.db #0x00	; 0
      000A00 00                    2814 	.db #0x00	; 0
      000A01 02                    2815 	.db #0x02	; 2
      000A02 00                    2816 	.db #0x00	; 0
      000A03 00                    2817 	.db #0x00	; 0
      000A04 00                    2818 	.db #0x00	; 0
      000A05 00                    2819 	.db #0x00	; 0
      000A06 08                    2820 	.db #0x08	; 8
      000A07 00                    2821 	.db #0x00	; 0
      000A08                       2822 _sprite_block_small_0:
      000A08 5A                    2823 	.db #0x5a	; 90	'Z'
      000A09 24                    2824 	.db #0x24	; 36
      000A0A 80                    2825 	.db #0x80	; 128
      000A0B 10                    2826 	.db #0x10	; 16
      000A0C 80                    2827 	.db #0x80	; 128
      000A0D 20                    2828 	.db #0x20	; 32
      000A0E 00                    2829 	.db #0x00	; 0
      000A0F 00                    2830 	.db #0x00	; 0
      000A10 00                    2831 	.db #0x00	; 0
      000A11 00                    2832 	.db #0x00	; 0
      000A12 00                    2833 	.db #0x00	; 0
      000A13 00                    2834 	.db #0x00	; 0
      000A14 00                    2835 	.db #0x00	; 0
      000A15 00                    2836 	.db #0x00	; 0
      000A16 00                    2837 	.db #0x00	; 0
      000A17 00                    2838 	.db #0x00	; 0
      000A18 00                    2839 	.db #0x00	; 0
      000A19 00                    2840 	.db #0x00	; 0
      000A1A 00                    2841 	.db #0x00	; 0
      000A1B 00                    2842 	.db #0x00	; 0
      000A1C 00                    2843 	.db #0x00	; 0
      000A1D 00                    2844 	.db #0x00	; 0
      000A1E 00                    2845 	.db #0x00	; 0
      000A1F 00                    2846 	.db #0x00	; 0
      000A20 00                    2847 	.db #0x00	; 0
      000A21 00                    2848 	.db #0x00	; 0
      000A22 00                    2849 	.db #0x00	; 0
      000A23 00                    2850 	.db #0x00	; 0
      000A24 00                    2851 	.db #0x00	; 0
      000A25 00                    2852 	.db #0x00	; 0
      000A26 00                    2853 	.db #0x00	; 0
      000A27 00                    2854 	.db #0x00	; 0
      000A28                       2855 _sprite_block_small_1:
      000A28 FF                    2856 	.db #0xff	; 255
      000A29 FF                    2857 	.db #0xff	; 255
      000A2A FF                    2858 	.db #0xff	; 255
      000A2B FF                    2859 	.db #0xff	; 255
      000A2C FF                    2860 	.db #0xff	; 255
      000A2D FF                    2861 	.db #0xff	; 255
      000A2E FF                    2862 	.db #0xff	; 255
      000A2F 7E                    2863 	.db #0x7e	; 126
      000A30 00                    2864 	.db #0x00	; 0
      000A31 00                    2865 	.db #0x00	; 0
      000A32 00                    2866 	.db #0x00	; 0
      000A33 00                    2867 	.db #0x00	; 0
      000A34 00                    2868 	.db #0x00	; 0
      000A35 00                    2869 	.db #0x00	; 0
      000A36 00                    2870 	.db #0x00	; 0
      000A37 00                    2871 	.db #0x00	; 0
      000A38 00                    2872 	.db #0x00	; 0
      000A39 00                    2873 	.db #0x00	; 0
      000A3A 00                    2874 	.db #0x00	; 0
      000A3B 00                    2875 	.db #0x00	; 0
      000A3C 00                    2876 	.db #0x00	; 0
      000A3D 00                    2877 	.db #0x00	; 0
      000A3E 00                    2878 	.db #0x00	; 0
      000A3F 00                    2879 	.db #0x00	; 0
      000A40 00                    2880 	.db #0x00	; 0
      000A41 00                    2881 	.db #0x00	; 0
      000A42 00                    2882 	.db #0x00	; 0
      000A43 00                    2883 	.db #0x00	; 0
      000A44 00                    2884 	.db #0x00	; 0
      000A45 00                    2885 	.db #0x00	; 0
      000A46 00                    2886 	.db #0x00	; 0
      000A47 00                    2887 	.db #0x00	; 0
                                   2888 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   2889 ;	---------------------------------
                                   2890 ; Function HideArrowSprite
                                   2891 ; ---------------------------------
      000A48                       2892 _HideArrowSprite::
                                   2893 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000A48 3E C0            [ 7] 2894 	ld	a, #0xc0
      000A4A F5               [11] 2895 	push	af
      000A4B 33               [ 6] 2896 	inc	sp
      000A4C 21 00 1B         [10] 2897 	ld	hl, #0x1b00
      000A4F E5               [11] 2898 	push	hl
      000A50 CDr00r00         [17] 2899 	call	_WRTVRM
      000A53 F1               [10] 2900 	pop	af
      000A54 33               [ 6] 2901 	inc	sp
                                   2902 ;src\/Graphics\SpritesLogic.h:36: }
      000A55 C9               [10] 2903 	ret
                                   2904 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   2905 ;	---------------------------------
                                   2906 ; Function DrawHitSprite
                                   2907 ; ---------------------------------
      000A56                       2908 _DrawHitSprite::
      000A56 DD E5            [15] 2909 	push	ix
      000A58 DD 21 00 00      [14] 2910 	ld	ix,#0
      000A5C DD 39            [15] 2911 	add	ix,sp
      000A5E 21 EC FF         [10] 2912 	ld	hl, #-20
      000A61 39               [11] 2913 	add	hl, sp
      000A62 F9               [ 6] 2914 	ld	sp, hl
                                   2915 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000A63 21 00 00         [10] 2916 	ld	hl, #0
      000A66 39               [11] 2917 	add	hl, sp
      000A67 EB               [ 4] 2918 	ex	de, hl
      000A68 3E 0F            [ 7] 2919 	ld	a, #0x0f
      000A6A 12               [ 7] 2920 	ld	(de), a
      000A6B 6B               [ 4] 2921 	ld	l, e
      000A6C 62               [ 4] 2922 	ld	h, d
      000A6D 23               [ 6] 2923 	inc	hl
      000A6E 36 0E            [10] 2924 	ld	(hl), #0x0e
      000A70 6B               [ 4] 2925 	ld	l, e
      000A71 62               [ 4] 2926 	ld	h, d
      000A72 23               [ 6] 2927 	inc	hl
      000A73 23               [ 6] 2928 	inc	hl
      000A74 36 09            [10] 2929 	ld	(hl), #0x09
      000A76 6B               [ 4] 2930 	ld	l, e
      000A77 62               [ 4] 2931 	ld	h, d
      000A78 23               [ 6] 2932 	inc	hl
      000A79 23               [ 6] 2933 	inc	hl
      000A7A 23               [ 6] 2934 	inc	hl
      000A7B 36 06            [10] 2935 	ld	(hl), #0x06
      000A7D 21 04 00         [10] 2936 	ld	hl, #0x0004
      000A80 19               [11] 2937 	add	hl, de
      000A81 36 06            [10] 2938 	ld	(hl), #0x06
      000A83 21 05 00         [10] 2939 	ld	hl, #0x0005
      000A86 19               [11] 2940 	add	hl, de
      000A87 36 09            [10] 2941 	ld	(hl), #0x09
      000A89 21 06 00         [10] 2942 	ld	hl, #0x0006
      000A8C 19               [11] 2943 	add	hl, de
      000A8D 36 0E            [10] 2944 	ld	(hl), #0x0e
      000A8F 21 07 00         [10] 2945 	ld	hl, #0x0007
      000A92 19               [11] 2946 	add	hl, de
      000A93 36 0F            [10] 2947 	ld	(hl), #0x0f
                                   2948 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000A95 21 08 00         [10] 2949 	ld	hl, #8
      000A98 39               [11] 2950 	add	hl, sp
      000A99 4D               [ 4] 2951 	ld	c, l
      000A9A 44               [ 4] 2952 	ld	b, h
      000A9B 36 0F            [10] 2953 	ld	(hl), #0x0f
      000A9D 69               [ 4] 2954 	ld	l, c
      000A9E 60               [ 4] 2955 	ld	h, b
      000A9F 23               [ 6] 2956 	inc	hl
      000AA0 36 0E            [10] 2957 	ld	(hl), #0x0e
      000AA2 69               [ 4] 2958 	ld	l, c
      000AA3 60               [ 4] 2959 	ld	h, b
      000AA4 23               [ 6] 2960 	inc	hl
      000AA5 23               [ 6] 2961 	inc	hl
      000AA6 36 03            [10] 2962 	ld	(hl), #0x03
      000AA8 69               [ 4] 2963 	ld	l, c
      000AA9 60               [ 4] 2964 	ld	h, b
      000AAA 23               [ 6] 2965 	inc	hl
      000AAB 23               [ 6] 2966 	inc	hl
      000AAC 23               [ 6] 2967 	inc	hl
      000AAD 36 0C            [10] 2968 	ld	(hl), #0x0c
      000AAF 21 04 00         [10] 2969 	ld	hl, #0x0004
      000AB2 09               [11] 2970 	add	hl, bc
      000AB3 36 0C            [10] 2971 	ld	(hl), #0x0c
      000AB5 21 05 00         [10] 2972 	ld	hl, #0x0005
      000AB8 09               [11] 2973 	add	hl, bc
      000AB9 36 03            [10] 2974 	ld	(hl), #0x03
      000ABB 21 06 00         [10] 2975 	ld	hl, #0x0006
      000ABE 09               [11] 2976 	add	hl, bc
      000ABF 36 0E            [10] 2977 	ld	(hl), #0x0e
      000AC1 21 07 00         [10] 2978 	ld	hl, #0x0007
      000AC4 09               [11] 2979 	add	hl, bc
      000AC5 36 0F            [10] 2980 	ld	(hl), #0x0f
                                   2981 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000AC7 3A 9E FC         [13] 2982 	ld	a,(#_JIFFY + 0)
      000ACA E6 07            [ 7] 2983 	and	a, #0x07
                                   2984 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000ACC 6F               [ 4] 2985 	ld	l, a
      000ACD 83               [ 4] 2986 	add	a,e
      000ACE 5F               [ 4] 2987 	ld	e, a
      000ACF 30 01            [12] 2988 	jr	NC, 00124$
      000AD1 14               [ 4] 2989 	inc	d
      000AD2                       2990 00124$:
      000AD2 1A               [ 7] 2991 	ld	a, (de)
      000AD3 DD 77 FC         [19] 2992 	ld	-4 (ix), a
                                   2993 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000AD6 26 00            [ 7] 2994 	ld	h, #0x00
      000AD8 09               [11] 2995 	add	hl, bc
      000AD9 7E               [ 7] 2996 	ld	a, (hl)
      000ADA DD 77 FD         [19] 2997 	ld	-3 (ix), a
                                   2998 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000ADD 3E 01            [ 7] 2999 	ld	a, #0x01
      000ADF DD 96 05         [19] 3000 	sub	a, 5 (ix)
      000AE2 3E 00            [ 7] 3001 	ld	a, #0x00
      000AE4 17               [ 4] 3002 	rla
      000AE5 DD 77 FE         [19] 3003 	ld	-2 (ix), a
                                   3004 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000AE8 DD 7E 08         [19] 3005 	ld	a, 8 (ix)
      000AEB B7               [ 4] 3006 	or	a, a
      000AEC CArB7r0B         [10] 3007 	jp	Z, 00104$
                                   3008 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000AEF DD 4E 06         [19] 3009 	ld	c, 6 (ix)
      000AF2 79               [ 4] 3010 	ld	a, c
      000AF3 C6 F8            [ 7] 3011 	add	a, #0xf8
      000AF5 DD 77 FF         [19] 3012 	ld	-1 (ix), a
      000AF8 C5               [11] 3013 	push	bc
      000AF9 F5               [11] 3014 	push	af
      000AFA 33               [ 6] 3015 	inc	sp
      000AFB 21 05 1B         [10] 3016 	ld	hl, #0x1b05
      000AFE E5               [11] 3017 	push	hl
      000AFF CDr00r00         [17] 3018 	call	_WRTVRM
      000B02 F1               [10] 3019 	pop	af
      000B03 33               [ 6] 3020 	inc	sp
      000B04 C1               [10] 3021 	pop	bc
                                   3022 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000B05 DD 7E 04         [19] 3023 	ld	a, 4 (ix)
      000B08 C6 FD            [ 7] 3024 	add	a, #0xfd
      000B0A 87               [ 4] 3025 	add	a, a
      000B0B 87               [ 4] 3026 	add	a, a
      000B0C C6 18            [ 7] 3027 	add	a, #0x18
      000B0E C5               [11] 3028 	push	bc
      000B0F F5               [11] 3029 	push	af
      000B10 33               [ 6] 3030 	inc	sp
      000B11 21 06 1B         [10] 3031 	ld	hl, #0x1b06
      000B14 E5               [11] 3032 	push	hl
      000B15 CDr00r00         [17] 3033 	call	_WRTVRM
      000B18 F1               [10] 3034 	pop	af
      000B19 33               [ 6] 3035 	inc	sp
      000B1A C1               [10] 3036 	pop	bc
                                   3037 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000B1B 79               [ 4] 3038 	ld	a, c
      000B1C C6 08            [ 7] 3039 	add	a, #0x08
      000B1E 47               [ 4] 3040 	ld	b, a
      000B1F C5               [11] 3041 	push	bc
      000B20 C5               [11] 3042 	push	bc
      000B21 33               [ 6] 3043 	inc	sp
      000B22 21 09 1B         [10] 3044 	ld	hl, #0x1b09
      000B25 E5               [11] 3045 	push	hl
      000B26 CDr00r00         [17] 3046 	call	_WRTVRM
      000B29 F1               [10] 3047 	pop	af
      000B2A 33               [ 6] 3048 	inc	sp
      000B2B 3E 04            [ 7] 3049 	ld	a, #0x04
      000B2D F5               [11] 3050 	push	af
      000B2E 33               [ 6] 3051 	inc	sp
      000B2F 21 0A 1B         [10] 3052 	ld	hl, #0x1b0a
      000B32 E5               [11] 3053 	push	hl
      000B33 CDr00r00         [17] 3054 	call	_WRTVRM
      000B36 F1               [10] 3055 	pop	af
      000B37 33               [ 6] 3056 	inc	sp
      000B38 C1               [10] 3057 	pop	bc
                                   3058 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000B39 79               [ 4] 3059 	ld	a, c
      000B3A C6 18            [ 7] 3060 	add	a, #0x18
      000B3C 4F               [ 4] 3061 	ld	c, a
      000B3D C5               [11] 3062 	push	bc
      000B3E 79               [ 4] 3063 	ld	a, c
      000B3F F5               [11] 3064 	push	af
      000B40 33               [ 6] 3065 	inc	sp
      000B41 21 0D 1B         [10] 3066 	ld	hl, #0x1b0d
      000B44 E5               [11] 3067 	push	hl
      000B45 CDr00r00         [17] 3068 	call	_WRTVRM
      000B48 F1               [10] 3069 	pop	af
      000B49 33               [ 6] 3070 	inc	sp
      000B4A 3E 08            [ 7] 3071 	ld	a, #0x08
      000B4C F5               [11] 3072 	push	af
      000B4D 33               [ 6] 3073 	inc	sp
      000B4E 21 0E 1B         [10] 3074 	ld	hl, #0x1b0e
      000B51 E5               [11] 3075 	push	hl
      000B52 CDr00r00         [17] 3076 	call	_WRTVRM
      000B55 F1               [10] 3077 	pop	af
      000B56 33               [ 6] 3078 	inc	sp
      000B57 C1               [10] 3079 	pop	bc
                                   3080 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B58 DD 7E FE         [19] 3081 	ld	a, -2 (ix)
      000B5B B7               [ 4] 3082 	or	a, a
      000B5C 28 59            [12] 3083 	jr	Z, 00104$
                                   3084 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000B5E C5               [11] 3085 	push	bc
      000B5F DD 7E FF         [19] 3086 	ld	a, -1 (ix)
      000B62 F5               [11] 3087 	push	af
      000B63 33               [ 6] 3088 	inc	sp
      000B64 21 11 1B         [10] 3089 	ld	hl, #0x1b11
      000B67 E5               [11] 3090 	push	hl
      000B68 CDr00r00         [17] 3091 	call	_WRTVRM
      000B6B F1               [10] 3092 	pop	af
      000B6C 33               [ 6] 3093 	inc	sp
      000B6D C1               [10] 3094 	pop	bc
                                   3095 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000B6E DD 7E 05         [19] 3096 	ld	a, 5 (ix)
      000B71 3D               [ 4] 3097 	dec	a
      000B72 3D               [ 4] 3098 	dec	a
      000B73 87               [ 4] 3099 	add	a, a
      000B74 87               [ 4] 3100 	add	a, a
      000B75 C6 14            [ 7] 3101 	add	a, #0x14
      000B77 C5               [11] 3102 	push	bc
      000B78 F5               [11] 3103 	push	af
      000B79 33               [ 6] 3104 	inc	sp
      000B7A 21 12 1B         [10] 3105 	ld	hl, #0x1b12
      000B7D E5               [11] 3106 	push	hl
      000B7E CDr00r00         [17] 3107 	call	_WRTVRM
      000B81 F1               [10] 3108 	pop	af
      000B82 33               [ 6] 3109 	inc	sp
      000B83 C1               [10] 3110 	pop	bc
                                   3111 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000B84 C5               [11] 3112 	push	bc
      000B85 C5               [11] 3113 	push	bc
      000B86 33               [ 6] 3114 	inc	sp
      000B87 21 15 1B         [10] 3115 	ld	hl, #0x1b15
      000B8A E5               [11] 3116 	push	hl
      000B8B CDr00r00         [17] 3117 	call	_WRTVRM
      000B8E F1               [10] 3118 	pop	af
      000B8F 33               [ 6] 3119 	inc	sp
      000B90 3E 0C            [ 7] 3120 	ld	a, #0x0c
      000B92 F5               [11] 3121 	push	af
      000B93 33               [ 6] 3122 	inc	sp
      000B94 21 16 1B         [10] 3123 	ld	hl, #0x1b16
      000B97 E5               [11] 3124 	push	hl
      000B98 CDr00r00         [17] 3125 	call	_WRTVRM
      000B9B F1               [10] 3126 	pop	af
      000B9C 33               [ 6] 3127 	inc	sp
      000B9D C1               [10] 3128 	pop	bc
                                   3129 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000B9E 79               [ 4] 3130 	ld	a, c
      000B9F F5               [11] 3131 	push	af
      000BA0 33               [ 6] 3132 	inc	sp
      000BA1 21 19 1B         [10] 3133 	ld	hl, #0x1b19
      000BA4 E5               [11] 3134 	push	hl
      000BA5 CDr00r00         [17] 3135 	call	_WRTVRM
      000BA8 F1               [10] 3136 	pop	af
      000BA9 33               [ 6] 3137 	inc	sp
                                   3138 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000BAA 3E 10            [ 7] 3139 	ld	a, #0x10
      000BAC F5               [11] 3140 	push	af
      000BAD 33               [ 6] 3141 	inc	sp
      000BAE 21 1A 1B         [10] 3142 	ld	hl, #0x1b1a
      000BB1 E5               [11] 3143 	push	hl
      000BB2 CDr00r00         [17] 3144 	call	_WRTVRM
      000BB5 F1               [10] 3145 	pop	af
      000BB6 33               [ 6] 3146 	inc	sp
      000BB7                       3147 00104$:
                                   3148 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000BB7 DD 7E 07         [19] 3149 	ld	a, 7 (ix)
      000BBA F5               [11] 3150 	push	af
      000BBB 33               [ 6] 3151 	inc	sp
      000BBC 21 04 1B         [10] 3152 	ld	hl, #0x1b04
      000BBF E5               [11] 3153 	push	hl
      000BC0 CDr00r00         [17] 3154 	call	_WRTVRM
      000BC3 F1               [10] 3155 	pop	af
      000BC4 33               [ 6] 3156 	inc	sp
                                   3157 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000BC5 DD 7E FC         [19] 3158 	ld	a, -4 (ix)
      000BC8 F5               [11] 3159 	push	af
      000BC9 33               [ 6] 3160 	inc	sp
      000BCA 21 07 1B         [10] 3161 	ld	hl, #0x1b07
      000BCD E5               [11] 3162 	push	hl
      000BCE CDr00r00         [17] 3163 	call	_WRTVRM
      000BD1 F1               [10] 3164 	pop	af
      000BD2 33               [ 6] 3165 	inc	sp
                                   3166 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000BD3 DD 7E 07         [19] 3167 	ld	a, 7 (ix)
      000BD6 F5               [11] 3168 	push	af
      000BD7 33               [ 6] 3169 	inc	sp
      000BD8 21 08 1B         [10] 3170 	ld	hl, #0x1b08
      000BDB E5               [11] 3171 	push	hl
      000BDC CDr00r00         [17] 3172 	call	_WRTVRM
      000BDF F1               [10] 3173 	pop	af
      000BE0 33               [ 6] 3174 	inc	sp
                                   3175 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000BE1 DD 7E FC         [19] 3176 	ld	a, -4 (ix)
      000BE4 F5               [11] 3177 	push	af
      000BE5 33               [ 6] 3178 	inc	sp
      000BE6 21 0B 1B         [10] 3179 	ld	hl, #0x1b0b
      000BE9 E5               [11] 3180 	push	hl
      000BEA CDr00r00         [17] 3181 	call	_WRTVRM
      000BED F1               [10] 3182 	pop	af
      000BEE 33               [ 6] 3183 	inc	sp
                                   3184 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000BEF DD 7E 07         [19] 3185 	ld	a, 7 (ix)
      000BF2 F5               [11] 3186 	push	af
      000BF3 33               [ 6] 3187 	inc	sp
      000BF4 21 0C 1B         [10] 3188 	ld	hl, #0x1b0c
      000BF7 E5               [11] 3189 	push	hl
      000BF8 CDr00r00         [17] 3190 	call	_WRTVRM
      000BFB F1               [10] 3191 	pop	af
      000BFC 33               [ 6] 3192 	inc	sp
                                   3193 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000BFD DD 7E FC         [19] 3194 	ld	a, -4 (ix)
      000C00 F5               [11] 3195 	push	af
      000C01 33               [ 6] 3196 	inc	sp
      000C02 21 0F 1B         [10] 3197 	ld	hl, #0x1b0f
      000C05 E5               [11] 3198 	push	hl
      000C06 CDr00r00         [17] 3199 	call	_WRTVRM
      000C09 F1               [10] 3200 	pop	af
      000C0A 33               [ 6] 3201 	inc	sp
                                   3202 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000C0B DD 7E FE         [19] 3203 	ld	a, -2 (ix)
      000C0E B7               [ 4] 3204 	or	a, a
      000C0F 28 52            [12] 3205 	jr	Z, 00107$
                                   3206 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000C11 DD 7E 07         [19] 3207 	ld	a, 7 (ix)
      000C14 C6 10            [ 7] 3208 	add	a, #0x10
      000C16 47               [ 4] 3209 	ld	b, a
      000C17 C5               [11] 3210 	push	bc
      000C18 C5               [11] 3211 	push	bc
      000C19 33               [ 6] 3212 	inc	sp
      000C1A 21 10 1B         [10] 3213 	ld	hl, #0x1b10
      000C1D E5               [11] 3214 	push	hl
      000C1E CDr00r00         [17] 3215 	call	_WRTVRM
      000C21 F1               [10] 3216 	pop	af
      000C22 33               [ 6] 3217 	inc	sp
      000C23 DD 7E FD         [19] 3218 	ld	a, -3 (ix)
      000C26 F5               [11] 3219 	push	af
      000C27 33               [ 6] 3220 	inc	sp
      000C28 21 13 1B         [10] 3221 	ld	hl, #0x1b13
      000C2B E5               [11] 3222 	push	hl
      000C2C CDr00r00         [17] 3223 	call	_WRTVRM
      000C2F F1               [10] 3224 	pop	af
      000C30 33               [ 6] 3225 	inc	sp
      000C31 C1               [10] 3226 	pop	bc
                                   3227 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000C32 C5               [11] 3228 	push	bc
      000C33 C5               [11] 3229 	push	bc
      000C34 33               [ 6] 3230 	inc	sp
      000C35 21 14 1B         [10] 3231 	ld	hl, #0x1b14
      000C38 E5               [11] 3232 	push	hl
      000C39 CDr00r00         [17] 3233 	call	_WRTVRM
      000C3C F1               [10] 3234 	pop	af
      000C3D 33               [ 6] 3235 	inc	sp
      000C3E DD 7E FD         [19] 3236 	ld	a, -3 (ix)
      000C41 F5               [11] 3237 	push	af
      000C42 33               [ 6] 3238 	inc	sp
      000C43 21 17 1B         [10] 3239 	ld	hl, #0x1b17
      000C46 E5               [11] 3240 	push	hl
      000C47 CDr00r00         [17] 3241 	call	_WRTVRM
      000C4A F1               [10] 3242 	pop	af
      000C4B 33               [ 6] 3243 	inc	sp
      000C4C 33               [ 6] 3244 	inc	sp
      000C4D 21 18 1B         [10] 3245 	ld	hl, #0x1b18
      000C50 E5               [11] 3246 	push	hl
      000C51 CDr00r00         [17] 3247 	call	_WRTVRM
      000C54 F1               [10] 3248 	pop	af
      000C55 33               [ 6] 3249 	inc	sp
                                   3250 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000C56 DD 7E FD         [19] 3251 	ld	a, -3 (ix)
      000C59 F5               [11] 3252 	push	af
      000C5A 33               [ 6] 3253 	inc	sp
      000C5B 21 1B 1B         [10] 3254 	ld	hl, #0x1b1b
      000C5E E5               [11] 3255 	push	hl
      000C5F CDr00r00         [17] 3256 	call	_WRTVRM
      000C62 F1               [10] 3257 	pop	af
      000C63                       3258 00107$:
                                   3259 ;src\/Graphics\SpritesLogic.h:119: }
      000C63 DD F9            [10] 3260 	ld	sp, ix
      000C65 DD E1            [14] 3261 	pop	ix
      000C67 C9               [10] 3262 	ret
                                   3263 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3264 ;	---------------------------------
                                   3265 ; Function HideHitSprite
                                   3266 ; ---------------------------------
      000C68                       3267 _HideHitSprite::
                                   3268 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000C68 3E C0            [ 7] 3269 	ld	a, #0xc0
      000C6A F5               [11] 3270 	push	af
      000C6B 33               [ 6] 3271 	inc	sp
      000C6C 21 04 1B         [10] 3272 	ld	hl, #0x1b04
      000C6F E5               [11] 3273 	push	hl
      000C70 CDr00r00         [17] 3274 	call	_WRTVRM
      000C73 F1               [10] 3275 	pop	af
      000C74 33               [ 6] 3276 	inc	sp
                                   3277 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000C75 3E C0            [ 7] 3278 	ld	a, #0xc0
      000C77 F5               [11] 3279 	push	af
      000C78 33               [ 6] 3280 	inc	sp
      000C79 21 08 1B         [10] 3281 	ld	hl, #0x1b08
      000C7C E5               [11] 3282 	push	hl
      000C7D CDr00r00         [17] 3283 	call	_WRTVRM
      000C80 F1               [10] 3284 	pop	af
      000C81 33               [ 6] 3285 	inc	sp
                                   3286 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000C82 3E C0            [ 7] 3287 	ld	a, #0xc0
      000C84 F5               [11] 3288 	push	af
      000C85 33               [ 6] 3289 	inc	sp
      000C86 21 0C 1B         [10] 3290 	ld	hl, #0x1b0c
      000C89 E5               [11] 3291 	push	hl
      000C8A CDr00r00         [17] 3292 	call	_WRTVRM
      000C8D F1               [10] 3293 	pop	af
      000C8E 33               [ 6] 3294 	inc	sp
                                   3295 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000C8F 3E C0            [ 7] 3296 	ld	a, #0xc0
      000C91 F5               [11] 3297 	push	af
      000C92 33               [ 6] 3298 	inc	sp
      000C93 21 10 1B         [10] 3299 	ld	hl, #0x1b10
      000C96 E5               [11] 3300 	push	hl
      000C97 CDr00r00         [17] 3301 	call	_WRTVRM
      000C9A F1               [10] 3302 	pop	af
      000C9B 33               [ 6] 3303 	inc	sp
                                   3304 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000C9C 3E C0            [ 7] 3305 	ld	a, #0xc0
      000C9E F5               [11] 3306 	push	af
      000C9F 33               [ 6] 3307 	inc	sp
      000CA0 21 14 1B         [10] 3308 	ld	hl, #0x1b14
      000CA3 E5               [11] 3309 	push	hl
      000CA4 CDr00r00         [17] 3310 	call	_WRTVRM
      000CA7 F1               [10] 3311 	pop	af
      000CA8 33               [ 6] 3312 	inc	sp
                                   3313 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000CA9 3E C0            [ 7] 3314 	ld	a, #0xc0
      000CAB F5               [11] 3315 	push	af
      000CAC 33               [ 6] 3316 	inc	sp
      000CAD 21 18 1B         [10] 3317 	ld	hl, #0x1b18
      000CB0 E5               [11] 3318 	push	hl
      000CB1 CDr00r00         [17] 3319 	call	_WRTVRM
      000CB4 F1               [10] 3320 	pop	af
      000CB5 33               [ 6] 3321 	inc	sp
                                   3322 ;src\/Graphics\SpritesLogic.h:131: }
      000CB6 C9               [10] 3323 	ret
                                   3324 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3325 ;	---------------------------------
                                   3326 ; Function HideExplosionSprite
                                   3327 ; ---------------------------------
      000CB7                       3328 _HideExplosionSprite::
                                   3329 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000CB7 3E C0            [ 7] 3330 	ld	a, #0xc0
      000CB9 F5               [11] 3331 	push	af
      000CBA 33               [ 6] 3332 	inc	sp
      000CBB 21 1C 1B         [10] 3333 	ld	hl, #0x1b1c
      000CBE E5               [11] 3334 	push	hl
      000CBF CDr00r00         [17] 3335 	call	_WRTVRM
      000CC2 F1               [10] 3336 	pop	af
      000CC3 33               [ 6] 3337 	inc	sp
                                   3338 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000CC4 3E C0            [ 7] 3339 	ld	a, #0xc0
      000CC6 F5               [11] 3340 	push	af
      000CC7 33               [ 6] 3341 	inc	sp
      000CC8 21 20 1B         [10] 3342 	ld	hl, #0x1b20
      000CCB E5               [11] 3343 	push	hl
      000CCC CDr00r00         [17] 3344 	call	_WRTVRM
      000CCF F1               [10] 3345 	pop	af
      000CD0 33               [ 6] 3346 	inc	sp
                                   3347 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000CD1 3E C0            [ 7] 3348 	ld	a, #0xc0
      000CD3 F5               [11] 3349 	push	af
      000CD4 33               [ 6] 3350 	inc	sp
      000CD5 21 24 1B         [10] 3351 	ld	hl, #0x1b24
      000CD8 E5               [11] 3352 	push	hl
      000CD9 CDr00r00         [17] 3353 	call	_WRTVRM
      000CDC F1               [10] 3354 	pop	af
      000CDD 33               [ 6] 3355 	inc	sp
                                   3356 ;src\/Graphics\SpritesLogic.h:137: }
      000CDE C9               [10] 3357 	ret
                                   3358 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3359 ;	---------------------------------
                                   3360 ; Function DrawExplosionSprite
                                   3361 ; ---------------------------------
      000CDF                       3362 _DrawExplosionSprite::
      000CDF 3B               [ 6] 3363 	dec	sp
                                   3364 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000CE0 FD 21 05 00      [14] 3365 	ld	iy, #5
      000CE4 FD 39            [15] 3366 	add	iy, sp
      000CE6 FD 6E 00         [19] 3367 	ld	l, 0 (iy)
      000CE9 CB 3D            [ 8] 3368 	srl	l
      000CEB CB 3D            [ 8] 3369 	srl	l
                                   3370 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000CED 3E 07            [ 7] 3371 	ld	a, #0x07
      000CEF 95               [ 4] 3372 	sub	a, l
      000CF0 30 07            [12] 3373 	jr	NC, 00102$
                                   3374 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000CF2 33               [ 6] 3375 	inc	sp
      000CF3 C3rB7r0C         [10] 3376 	jp	_HideExplosionSprite
      000CF6 C3rC5r0D         [10] 3377 	jp	00104$
      000CF9                       3378 00102$:
                                   3379 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000CF9 29               [11] 3380 	add	hl, hl
      000CFA 29               [11] 3381 	add	hl, hl
                                   3382 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000CFB FD 21 04 00      [14] 3383 	ld	iy, #4
      000CFF FD 39            [15] 3384 	add	iy, sp
      000D01 FD 7E 00         [19] 3385 	ld	a, 0 (iy)
      000D04 C6 F0            [ 7] 3386 	add	a, #0xf0
      000D06 67               [ 4] 3387 	ld	h, a
      000D07 E5               [11] 3388 	push	hl
      000D08 E5               [11] 3389 	push	hl
      000D09 33               [ 6] 3390 	inc	sp
      000D0A 11 1C 1B         [10] 3391 	ld	de, #0x1b1c
      000D0D D5               [11] 3392 	push	de
      000D0E CDr00r00         [17] 3393 	call	_WRTVRM
      000D11 F1               [10] 3394 	pop	af
      000D12 33               [ 6] 3395 	inc	sp
      000D13 21 05 00         [10] 3396 	ld	hl, #5
      000D16 39               [11] 3397 	add	hl, sp
      000D17 7E               [ 7] 3398 	ld	a, (hl)
      000D18 F5               [11] 3399 	push	af
      000D19 33               [ 6] 3400 	inc	sp
      000D1A 11 1D 1B         [10] 3401 	ld	de, #0x1b1d
      000D1D D5               [11] 3402 	push	de
      000D1E CDr00r00         [17] 3403 	call	_WRTVRM
      000D21 F1               [10] 3404 	pop	af
      000D22 33               [ 6] 3405 	inc	sp
      000D23 E1               [10] 3406 	pop	hl
                                   3407 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000D24 7D               [ 4] 3408 	ld	a, l
      000D25 C6 2C            [ 7] 3409 	add	a, #0x2c
      000D27 FD 21 00 00      [14] 3410 	ld	iy, #0
      000D2B FD 39            [15] 3411 	add	iy, sp
      000D2D FD 77 00         [19] 3412 	ld	0 (iy), a
      000D30 E5               [11] 3413 	push	hl
      000D31 F5               [11] 3414 	push	af
      000D32 33               [ 6] 3415 	inc	sp
      000D33 11 1E 1B         [10] 3416 	ld	de, #0x1b1e
      000D36 D5               [11] 3417 	push	de
      000D37 CDr00r00         [17] 3418 	call	_WRTVRM
      000D3A F1               [10] 3419 	pop	af
      000D3B 33               [ 6] 3420 	inc	sp
      000D3C 3E 0F            [ 7] 3421 	ld	a, #0x0f
      000D3E F5               [11] 3422 	push	af
      000D3F 33               [ 6] 3423 	inc	sp
      000D40 11 1F 1B         [10] 3424 	ld	de, #0x1b1f
      000D43 D5               [11] 3425 	push	de
      000D44 CDr00r00         [17] 3426 	call	_WRTVRM
      000D47 F1               [10] 3427 	pop	af
      000D48 33               [ 6] 3428 	inc	sp
      000D49 E1               [10] 3429 	pop	hl
                                   3430 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000D4A E5               [11] 3431 	push	hl
      000D4B E5               [11] 3432 	push	hl
      000D4C 33               [ 6] 3433 	inc	sp
      000D4D 11 20 1B         [10] 3434 	ld	de, #0x1b20
      000D50 D5               [11] 3435 	push	de
      000D51 CDr00r00         [17] 3436 	call	_WRTVRM
      000D54 F1               [10] 3437 	pop	af
      000D55 33               [ 6] 3438 	inc	sp
      000D56 E1               [10] 3439 	pop	hl
                                   3440 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000D57 FD 21 03 00      [14] 3441 	ld	iy, #3
      000D5B FD 39            [15] 3442 	add	iy, sp
      000D5D FD 6E 00         [19] 3443 	ld	l, 0 (iy)
      000D60 7D               [ 4] 3444 	ld	a, l
      000D61 C6 10            [ 7] 3445 	add	a, #0x10
      000D63 E5               [11] 3446 	push	hl
      000D64 F5               [11] 3447 	push	af
      000D65 33               [ 6] 3448 	inc	sp
      000D66 11 21 1B         [10] 3449 	ld	de, #0x1b21
      000D69 D5               [11] 3450 	push	de
      000D6A CDr00r00         [17] 3451 	call	_WRTVRM
      000D6D F1               [10] 3452 	pop	af
      000D6E 33               [ 6] 3453 	inc	sp
      000D6F 21 02 00         [10] 3454 	ld	hl, #2
      000D72 39               [11] 3455 	add	hl, sp
      000D73 7E               [ 7] 3456 	ld	a, (hl)
      000D74 F5               [11] 3457 	push	af
      000D75 33               [ 6] 3458 	inc	sp
      000D76 11 22 1B         [10] 3459 	ld	de, #0x1b22
      000D79 D5               [11] 3460 	push	de
      000D7A CDr00r00         [17] 3461 	call	_WRTVRM
      000D7D F1               [10] 3462 	pop	af
      000D7E 33               [ 6] 3463 	inc	sp
      000D7F 3E 0A            [ 7] 3464 	ld	a, #0x0a
      000D81 F5               [11] 3465 	push	af
      000D82 33               [ 6] 3466 	inc	sp
      000D83 11 23 1B         [10] 3467 	ld	de, #0x1b23
      000D86 D5               [11] 3468 	push	de
      000D87 CDr00r00         [17] 3469 	call	_WRTVRM
      000D8A F1               [10] 3470 	pop	af
      000D8B 33               [ 6] 3471 	inc	sp
      000D8C E1               [10] 3472 	pop	hl
                                   3473 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000D8D E5               [11] 3474 	push	hl
      000D8E E5               [11] 3475 	push	hl
      000D8F 33               [ 6] 3476 	inc	sp
      000D90 11 24 1B         [10] 3477 	ld	de, #0x1b24
      000D93 D5               [11] 3478 	push	de
      000D94 CDr00r00         [17] 3479 	call	_WRTVRM
      000D97 F1               [10] 3480 	pop	af
      000D98 33               [ 6] 3481 	inc	sp
      000D99 E1               [10] 3482 	pop	hl
                                   3483 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000D9A 7D               [ 4] 3484 	ld	a, l
      000D9B C6 20            [ 7] 3485 	add	a, #0x20
      000D9D F5               [11] 3486 	push	af
      000D9E 33               [ 6] 3487 	inc	sp
      000D9F 21 25 1B         [10] 3488 	ld	hl, #0x1b25
      000DA2 E5               [11] 3489 	push	hl
      000DA3 CDr00r00         [17] 3490 	call	_WRTVRM
      000DA6 F1               [10] 3491 	pop	af
      000DA7 33               [ 6] 3492 	inc	sp
                                   3493 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000DA8 21 00 00         [10] 3494 	ld	hl, #0
      000DAB 39               [11] 3495 	add	hl, sp
      000DAC 7E               [ 7] 3496 	ld	a, (hl)
      000DAD F5               [11] 3497 	push	af
      000DAE 33               [ 6] 3498 	inc	sp
      000DAF 21 26 1B         [10] 3499 	ld	hl, #0x1b26
      000DB2 E5               [11] 3500 	push	hl
      000DB3 CDr00r00         [17] 3501 	call	_WRTVRM
      000DB6 F1               [10] 3502 	pop	af
      000DB7 33               [ 6] 3503 	inc	sp
                                   3504 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000DB8 3E 03            [ 7] 3505 	ld	a, #0x03
      000DBA F5               [11] 3506 	push	af
      000DBB 33               [ 6] 3507 	inc	sp
      000DBC 21 27 1B         [10] 3508 	ld	hl, #0x1b27
      000DBF E5               [11] 3509 	push	hl
      000DC0 CDr00r00         [17] 3510 	call	_WRTVRM
      000DC3 F1               [10] 3511 	pop	af
      000DC4 33               [ 6] 3512 	inc	sp
      000DC5                       3513 00104$:
                                   3514 ;src\/Graphics\SpritesLogic.h:164: }
      000DC5 33               [ 6] 3515 	inc	sp
      000DC6 C9               [10] 3516 	ret
                                   3517 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3518 ;	---------------------------------
                                   3519 ; Function DrawChar
                                   3520 ; ---------------------------------
      000DC7                       3521 _DrawChar::
      000DC7 DD E5            [15] 3522 	push	ix
      000DC9 DD 21 00 00      [14] 3523 	ld	ix,#0
      000DCD DD 39            [15] 3524 	add	ix,sp
                                   3525 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000DCF DD 6E 06         [19] 3526 	ld	l, 6 (ix)
      000DD2 26 00            [ 7] 3527 	ld	h, #0x00
      000DD4 29               [11] 3528 	add	hl, hl
      000DD5 29               [11] 3529 	add	hl, hl
      000DD6 29               [11] 3530 	add	hl, hl
      000DD7 29               [11] 3531 	add	hl, hl
      000DD8 29               [11] 3532 	add	hl, hl
      000DD9 01 00 18         [10] 3533 	ld	bc, #0x1800
      000DDC 09               [11] 3534 	add	hl, bc
      000DDD DD 4E 05         [19] 3535 	ld	c, 5 (ix)
      000DE0 06 00            [ 7] 3536 	ld	b, #0x00
      000DE2 09               [11] 3537 	add	hl, bc
      000DE3 DD 7E 04         [19] 3538 	ld	a, 4 (ix)
      000DE6 F5               [11] 3539 	push	af
      000DE7 33               [ 6] 3540 	inc	sp
      000DE8 E5               [11] 3541 	push	hl
      000DE9 CDr00r00         [17] 3542 	call	_WRTVRM
      000DEC F1               [10] 3543 	pop	af
      000DED 33               [ 6] 3544 	inc	sp
                                   3545 ;src\/Graphics\Graphics.h:3: }
      000DEE DD E1            [14] 3546 	pop	ix
      000DF0 C9               [10] 3547 	ret
                                   3548 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3549 ;	---------------------------------
                                   3550 ; Function DrawString
                                   3551 ; ---------------------------------
      000DF1                       3552 _DrawString::
      000DF1 DD E5            [15] 3553 	push	ix
      000DF3 DD 21 00 00      [14] 3554 	ld	ix,#0
      000DF7 DD 39            [15] 3555 	add	ix,sp
                                   3556 ;src\/Graphics\Graphics.h:6: while (*str) {
      000DF9 DD 6E 06         [19] 3557 	ld	l, 6 (ix)
      000DFC DD 4E 04         [19] 3558 	ld	c, 4 (ix)
      000DFF DD 46 05         [19] 3559 	ld	b, 5 (ix)
      000E02                       3560 00101$:
      000E02 0A               [ 7] 3561 	ld	a, (bc)
      000E03 B7               [ 4] 3562 	or	a, a
      000E04 28 1A            [12] 3563 	jr	Z, 00104$
                                   3564 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000E06 55               [ 4] 3565 	ld	d, l
      000E07 2C               [ 4] 3566 	inc	l
      000E08 DD 75 06         [19] 3567 	ld	6 (ix), l
      000E0B 03               [ 6] 3568 	inc	bc
      000E0C C6 0F            [ 7] 3569 	add	a, #0x0f
      000E0E E5               [11] 3570 	push	hl
      000E0F C5               [11] 3571 	push	bc
      000E10 DD 66 07         [19] 3572 	ld	h, 7 (ix)
      000E13 6A               [ 4] 3573 	ld	l, d
      000E14 E5               [11] 3574 	push	hl
      000E15 F5               [11] 3575 	push	af
      000E16 33               [ 6] 3576 	inc	sp
      000E17 CDrC7r0D         [17] 3577 	call	_DrawChar
      000E1A F1               [10] 3578 	pop	af
      000E1B 33               [ 6] 3579 	inc	sp
      000E1C C1               [10] 3580 	pop	bc
      000E1D E1               [10] 3581 	pop	hl
      000E1E 18 E2            [12] 3582 	jr	00101$
      000E20                       3583 00104$:
                                   3584 ;src\/Graphics\Graphics.h:9: }
      000E20 DD E1            [14] 3585 	pop	ix
      000E22 C9               [10] 3586 	ret
                                   3587 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3588 ;	---------------------------------
                                   3589 ; Function DrawNumber
                                   3590 ; ---------------------------------
      000E23                       3591 _DrawNumber::
      000E23 DD E5            [15] 3592 	push	ix
      000E25 DD 21 00 00      [14] 3593 	ld	ix,#0
      000E29 DD 39            [15] 3594 	add	ix,sp
      000E2B 21 FA FF         [10] 3595 	ld	hl, #-6
      000E2E 39               [11] 3596 	add	hl, sp
      000E2F F9               [ 6] 3597 	ld	sp, hl
                                   3598 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000E30 DD 36 FA 01      [19] 3599 	ld	-6 (ix), #0x01
                                   3600 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000E34 DD 66 07         [19] 3601 	ld	h, 7 (ix)
      000E37 DD 6E 06         [19] 3602 	ld	l, 6 (ix)
      000E3A E5               [11] 3603 	push	hl
      000E3B 21rD7r0E         [10] 3604 	ld	hl, #___str_0
      000E3E E5               [11] 3605 	push	hl
      000E3F CDrF1r0D         [17] 3606 	call	_DrawString
      000E42 F1               [10] 3607 	pop	af
      000E43 F1               [10] 3608 	pop	af
                                   3609 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E44 DD 7E 06         [19] 3610 	ld	a, 6 (ix)
      000E47 DD 77 FF         [19] 3611 	ld	-1 (ix), a
      000E4A 1E 06            [ 7] 3612 	ld	e, #0x06
      000E4C                       3613 00109$:
      000E4C 7B               [ 4] 3614 	ld	a, e
      000E4D B7               [ 4] 3615 	or	a, a
      000E4E CArD2r0E         [10] 3616 	jp	Z, 00111$
                                   3617 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000E51 7B               [ 4] 3618 	ld	a, e
      000E52 3D               [ 4] 3619 	dec	a
      000E53 D5               [11] 3620 	push	de
      000E54 57               [ 4] 3621 	ld	d,a
      000E55 1E 0A            [ 7] 3622 	ld	e,#0x0a
      000E57 D5               [11] 3623 	push	de
      000E58 CDr1Dr00         [17] 3624 	call	_Power
      000E5B F1               [10] 3625 	pop	af
      000E5C D1               [10] 3626 	pop	de
      000E5D DD 75 FB         [19] 3627 	ld	-5 (ix), l
      000E60 DD 74 FC         [19] 3628 	ld	-4 (ix), h
                                   3629 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000E63 D5               [11] 3630 	push	de
      000E64 DD 6E FB         [19] 3631 	ld	l, -5 (ix)
      000E67 DD 66 FC         [19] 3632 	ld	h, -4 (ix)
      000E6A E5               [11] 3633 	push	hl
      000E6B DD 6E 04         [19] 3634 	ld	l, 4 (ix)
      000E6E DD 66 05         [19] 3635 	ld	h, 5 (ix)
      000E71 E5               [11] 3636 	push	hl
      000E72 CDr00r00         [17] 3637 	call	__divuint
      000E75 F1               [10] 3638 	pop	af
      000E76 F1               [10] 3639 	pop	af
      000E77 DD 75 FD         [19] 3640 	ld	-3 (ix), l
      000E7A DD 74 FE         [19] 3641 	ld	-2 (ix), h
      000E7D D1               [10] 3642 	pop	de
      000E7E DD 7E FA         [19] 3643 	ld	a, -6 (ix)
      000E81 B7               [ 4] 3644 	or	a, a
      000E82 28 0C            [12] 3645 	jr	Z, 00102$
      000E84 DD 7E FE         [19] 3646 	ld	a, -2 (ix)
      000E87 DD B6 FD         [19] 3647 	or	a, -3 (ix)
      000E8A 28 04            [12] 3648 	jr	Z, 00102$
      000E8C DD 36 FA 00      [19] 3649 	ld	-6 (ix), #0
      000E90                       3650 00102$:
                                   3651 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000E90 DD 7E FA         [19] 3652 	ld	a, -6 (ix)
      000E93 B7               [ 4] 3653 	or	a, a
      000E94 28 04            [12] 3654 	jr	Z, 00104$
      000E96 7B               [ 4] 3655 	ld	a, e
      000E97 3D               [ 4] 3656 	dec	a
      000E98 20 31            [12] 3657 	jr	NZ, 00105$
      000E9A                       3658 00104$:
                                   3659 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000E9A DD 7E FD         [19] 3660 	ld	a, -3 (ix)
      000E9D C6 3F            [ 7] 3661 	add	a, #0x3f
      000E9F D5               [11] 3662 	push	de
      000EA0 DD 66 07         [19] 3663 	ld	h, 7 (ix)
      000EA3 E5               [11] 3664 	push	hl
      000EA4 33               [ 6] 3665 	inc	sp
      000EA5 DD 66 FF         [19] 3666 	ld	h, -1 (ix)
      000EA8 E5               [11] 3667 	push	hl
      000EA9 33               [ 6] 3668 	inc	sp
      000EAA F5               [11] 3669 	push	af
      000EAB 33               [ 6] 3670 	inc	sp
      000EAC CDrC7r0D         [17] 3671 	call	_DrawChar
      000EAF F1               [10] 3672 	pop	af
      000EB0 33               [ 6] 3673 	inc	sp
      000EB1 DD 6E FB         [19] 3674 	ld	l, -5 (ix)
      000EB4 DD 66 FC         [19] 3675 	ld	h, -4 (ix)
      000EB7 E5               [11] 3676 	push	hl
      000EB8 DD 6E 04         [19] 3677 	ld	l, 4 (ix)
      000EBB DD 66 05         [19] 3678 	ld	h, 5 (ix)
      000EBE E5               [11] 3679 	push	hl
      000EBF CDr00r00         [17] 3680 	call	__moduint
      000EC2 F1               [10] 3681 	pop	af
      000EC3 F1               [10] 3682 	pop	af
      000EC4 D1               [10] 3683 	pop	de
      000EC5 DD 75 04         [19] 3684 	ld	4 (ix), l
      000EC8 DD 74 05         [19] 3685 	ld	5 (ix), h
      000ECB                       3686 00105$:
                                   3687 ;src\/Graphics\Graphics.h:29: col++;
      000ECB DD 34 FF         [23] 3688 	inc	-1 (ix)
                                   3689 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000ECE 1D               [ 4] 3690 	dec	e
      000ECF C3r4Cr0E         [10] 3691 	jp	00109$
      000ED2                       3692 00111$:
                                   3693 ;src\/Graphics\Graphics.h:34: }
      000ED2 DD F9            [10] 3694 	ld	sp, ix
      000ED4 DD E1            [14] 3695 	pop	ix
      000ED6 C9               [10] 3696 	ret
      000ED7                       3697 ___str_0:
      000ED7 20 20 20 20 20 20     3698 	.ascii "      "
      000EDD 00                    3699 	.db 0x00
                                   3700 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3701 ;	---------------------------------
                                   3702 ; Function DrawColumn
                                   3703 ; ---------------------------------
      000EDE                       3704 _DrawColumn::
      000EDE DD E5            [15] 3705 	push	ix
      000EE0 DD 21 00 00      [14] 3706 	ld	ix,#0
      000EE4 DD 39            [15] 3707 	add	ix,sp
      000EE6 21 F9 FF         [10] 3708 	ld	hl, #-7
      000EE9 39               [11] 3709 	add	hl, sp
      000EEA F9               [ 6] 3710 	ld	sp, hl
                                   3711 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000EEB DD 4E 04         [19] 3712 	ld	c, 4 (ix)
      000EEE 06 00            [ 7] 3713 	ld	b, #0x00
      000EF0 21 00 18         [10] 3714 	ld	hl, #0x1800
      000EF3 09               [11] 3715 	add	hl, bc
      000EF4 C5               [11] 3716 	push	bc
      000EF5 3E 18            [ 7] 3717 	ld	a, #0x18
      000EF7 F5               [11] 3718 	push	af
      000EF8 33               [ 6] 3719 	inc	sp
      000EF9 E5               [11] 3720 	push	hl
      000EFA CDr00r00         [17] 3721 	call	_WRTVRM
      000EFD F1               [10] 3722 	pop	af
      000EFE 33               [ 6] 3723 	inc	sp
      000EFF C1               [10] 3724 	pop	bc
                                   3725 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000F00 21 01 18         [10] 3726 	ld	hl, #0x1801
      000F03 09               [11] 3727 	add	hl, bc
      000F04 C5               [11] 3728 	push	bc
      000F05 3E 19            [ 7] 3729 	ld	a, #0x19
      000F07 F5               [11] 3730 	push	af
      000F08 33               [ 6] 3731 	inc	sp
      000F09 E5               [11] 3732 	push	hl
      000F0A CDr00r00         [17] 3733 	call	_WRTVRM
      000F0D F1               [10] 3734 	pop	af
      000F0E 33               [ 6] 3735 	inc	sp
      000F0F C1               [10] 3736 	pop	bc
                                   3737 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000F10 21 02 18         [10] 3738 	ld	hl, #0x1802
      000F13 09               [11] 3739 	add	hl, bc
      000F14 C5               [11] 3740 	push	bc
      000F15 3E 1A            [ 7] 3741 	ld	a, #0x1a
      000F17 F5               [11] 3742 	push	af
      000F18 33               [ 6] 3743 	inc	sp
      000F19 E5               [11] 3744 	push	hl
      000F1A CDr00r00         [17] 3745 	call	_WRTVRM
      000F1D F1               [10] 3746 	pop	af
      000F1E 33               [ 6] 3747 	inc	sp
      000F1F C1               [10] 3748 	pop	bc
                                   3749 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000F20 21 20 18         [10] 3750 	ld	hl, #0x1820
      000F23 09               [11] 3751 	add	hl, bc
      000F24 C5               [11] 3752 	push	bc
      000F25 3E 1B            [ 7] 3753 	ld	a, #0x1b
      000F27 F5               [11] 3754 	push	af
      000F28 33               [ 6] 3755 	inc	sp
      000F29 E5               [11] 3756 	push	hl
      000F2A CDr00r00         [17] 3757 	call	_WRTVRM
      000F2D F1               [10] 3758 	pop	af
      000F2E 33               [ 6] 3759 	inc	sp
      000F2F C1               [10] 3760 	pop	bc
                                   3761 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000F30 21 21 18         [10] 3762 	ld	hl, #0x1821
      000F33 09               [11] 3763 	add	hl, bc
      000F34 C5               [11] 3764 	push	bc
      000F35 3E 1C            [ 7] 3765 	ld	a, #0x1c
      000F37 F5               [11] 3766 	push	af
      000F38 33               [ 6] 3767 	inc	sp
      000F39 E5               [11] 3768 	push	hl
      000F3A CDr00r00         [17] 3769 	call	_WRTVRM
      000F3D F1               [10] 3770 	pop	af
      000F3E 33               [ 6] 3771 	inc	sp
      000F3F C1               [10] 3772 	pop	bc
                                   3773 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000F40 21 22 18         [10] 3774 	ld	hl, #0x1822
      000F43 09               [11] 3775 	add	hl, bc
      000F44 C5               [11] 3776 	push	bc
      000F45 3E 1D            [ 7] 3777 	ld	a, #0x1d
      000F47 F5               [11] 3778 	push	af
      000F48 33               [ 6] 3779 	inc	sp
      000F49 E5               [11] 3780 	push	hl
      000F4A CDr00r00         [17] 3781 	call	_WRTVRM
      000F4D F1               [10] 3782 	pop	af
      000F4E 33               [ 6] 3783 	inc	sp
      000F4F C1               [10] 3784 	pop	bc
                                   3785 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F50 21 40 18         [10] 3786 	ld	hl, #0x1840
      000F53 09               [11] 3787 	add	hl, bc
      000F54 E3               [19] 3788 	ex	(sp), hl
      000F55 21 41 18         [10] 3789 	ld	hl, #0x1841
      000F58 09               [11] 3790 	add	hl, bc
      000F59 DD 75 FB         [19] 3791 	ld	-5 (ix), l
      000F5C DD 74 FC         [19] 3792 	ld	-4 (ix), h
      000F5F 21 42 18         [10] 3793 	ld	hl, #0x1842
      000F62 09               [11] 3794 	add	hl, bc
      000F63 DD 75 FD         [19] 3795 	ld	-3 (ix), l
      000F66 DD 74 FE         [19] 3796 	ld	-2 (ix), h
      000F69 DD 36 FF 00      [19] 3797 	ld	-1 (ix), #0
      000F6D                       3798 00103$:
      000F6D DD 7E FF         [19] 3799 	ld	a, -1 (ix)
      000F70 D6 14            [ 7] 3800 	sub	a, #0x14
      000F72 30 4A            [12] 3801 	jr	NC, 00101$
                                   3802 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000F74 DD 5E FF         [19] 3803 	ld	e, -1 (ix)
      000F77 16 00            [ 7] 3804 	ld	d, #0x00
      000F79 EB               [ 4] 3805 	ex	de, hl
      000F7A 29               [11] 3806 	add	hl, hl
      000F7B 29               [11] 3807 	add	hl, hl
      000F7C 29               [11] 3808 	add	hl, hl
      000F7D 29               [11] 3809 	add	hl, hl
      000F7E 29               [11] 3810 	add	hl, hl
      000F7F EB               [ 4] 3811 	ex	de, hl
      000F80 E1               [10] 3812 	pop	hl
      000F81 E5               [11] 3813 	push	hl
      000F82 19               [11] 3814 	add	hl, de
      000F83 C5               [11] 3815 	push	bc
      000F84 D5               [11] 3816 	push	de
      000F85 3E 1E            [ 7] 3817 	ld	a, #0x1e
      000F87 F5               [11] 3818 	push	af
      000F88 33               [ 6] 3819 	inc	sp
      000F89 E5               [11] 3820 	push	hl
      000F8A CDr00r00         [17] 3821 	call	_WRTVRM
      000F8D F1               [10] 3822 	pop	af
      000F8E 33               [ 6] 3823 	inc	sp
      000F8F D1               [10] 3824 	pop	de
      000F90 C1               [10] 3825 	pop	bc
                                   3826 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000F91 DD 6E FB         [19] 3827 	ld	l, -5 (ix)
      000F94 DD 66 FC         [19] 3828 	ld	h, -4 (ix)
      000F97 19               [11] 3829 	add	hl, de
      000F98 C5               [11] 3830 	push	bc
      000F99 D5               [11] 3831 	push	de
      000F9A 3E 1F            [ 7] 3832 	ld	a, #0x1f
      000F9C F5               [11] 3833 	push	af
      000F9D 33               [ 6] 3834 	inc	sp
      000F9E E5               [11] 3835 	push	hl
      000F9F CDr00r00         [17] 3836 	call	_WRTVRM
      000FA2 F1               [10] 3837 	pop	af
      000FA3 33               [ 6] 3838 	inc	sp
      000FA4 D1               [10] 3839 	pop	de
      000FA5 C1               [10] 3840 	pop	bc
                                   3841 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000FA6 DD 6E FD         [19] 3842 	ld	l, -3 (ix)
      000FA9 DD 66 FE         [19] 3843 	ld	h, -2 (ix)
      000FAC 19               [11] 3844 	add	hl, de
      000FAD C5               [11] 3845 	push	bc
      000FAE 3E 20            [ 7] 3846 	ld	a, #0x20
      000FB0 F5               [11] 3847 	push	af
      000FB1 33               [ 6] 3848 	inc	sp
      000FB2 E5               [11] 3849 	push	hl
      000FB3 CDr00r00         [17] 3850 	call	_WRTVRM
      000FB6 F1               [10] 3851 	pop	af
      000FB7 33               [ 6] 3852 	inc	sp
      000FB8 C1               [10] 3853 	pop	bc
                                   3854 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000FB9 DD 34 FF         [23] 3855 	inc	-1 (ix)
      000FBC 18 AF            [12] 3856 	jr	00103$
      000FBE                       3857 00101$:
                                   3858 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000FBE 21 00 19         [10] 3859 	ld	hl, #0x1900
      000FC1 09               [11] 3860 	add	hl, bc
      000FC2 C5               [11] 3861 	push	bc
      000FC3 3E 21            [ 7] 3862 	ld	a, #0x21
      000FC5 F5               [11] 3863 	push	af
      000FC6 33               [ 6] 3864 	inc	sp
      000FC7 E5               [11] 3865 	push	hl
      000FC8 CDr00r00         [17] 3866 	call	_WRTVRM
      000FCB F1               [10] 3867 	pop	af
      000FCC 33               [ 6] 3868 	inc	sp
      000FCD C1               [10] 3869 	pop	bc
                                   3870 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000FCE 21 01 19         [10] 3871 	ld	hl, #0x1901
      000FD1 09               [11] 3872 	add	hl, bc
      000FD2 C5               [11] 3873 	push	bc
      000FD3 3E 22            [ 7] 3874 	ld	a, #0x22
      000FD5 F5               [11] 3875 	push	af
      000FD6 33               [ 6] 3876 	inc	sp
      000FD7 E5               [11] 3877 	push	hl
      000FD8 CDr00r00         [17] 3878 	call	_WRTVRM
      000FDB F1               [10] 3879 	pop	af
      000FDC 33               [ 6] 3880 	inc	sp
      000FDD C1               [10] 3881 	pop	bc
                                   3882 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000FDE 21 02 19         [10] 3883 	ld	hl, #0x1902
      000FE1 09               [11] 3884 	add	hl, bc
      000FE2 C5               [11] 3885 	push	bc
      000FE3 3E 23            [ 7] 3886 	ld	a, #0x23
      000FE5 F5               [11] 3887 	push	af
      000FE6 33               [ 6] 3888 	inc	sp
      000FE7 E5               [11] 3889 	push	hl
      000FE8 CDr00r00         [17] 3890 	call	_WRTVRM
      000FEB F1               [10] 3891 	pop	af
      000FEC 33               [ 6] 3892 	inc	sp
      000FED C1               [10] 3893 	pop	bc
                                   3894 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000FEE 21 00 1A         [10] 3895 	ld	hl, #0x1a00
      000FF1 09               [11] 3896 	add	hl, bc
      000FF2 C5               [11] 3897 	push	bc
      000FF3 3E 21            [ 7] 3898 	ld	a, #0x21
      000FF5 F5               [11] 3899 	push	af
      000FF6 33               [ 6] 3900 	inc	sp
      000FF7 E5               [11] 3901 	push	hl
      000FF8 CDr00r00         [17] 3902 	call	_WRTVRM
      000FFB F1               [10] 3903 	pop	af
      000FFC 33               [ 6] 3904 	inc	sp
      000FFD C1               [10] 3905 	pop	bc
                                   3906 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000FFE 21 01 1A         [10] 3907 	ld	hl, #0x1a01
      001001 09               [11] 3908 	add	hl, bc
      001002 C5               [11] 3909 	push	bc
      001003 3E 22            [ 7] 3910 	ld	a, #0x22
      001005 F5               [11] 3911 	push	af
      001006 33               [ 6] 3912 	inc	sp
      001007 E5               [11] 3913 	push	hl
      001008 CDr00r00         [17] 3914 	call	_WRTVRM
      00100B F1               [10] 3915 	pop	af
      00100C 33               [ 6] 3916 	inc	sp
      00100D C1               [10] 3917 	pop	bc
                                   3918 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      00100E 21 02 1A         [10] 3919 	ld	hl, #0x1a02
      001011 09               [11] 3920 	add	hl, bc
      001012 C5               [11] 3921 	push	bc
      001013 3E 23            [ 7] 3922 	ld	a, #0x23
      001015 F5               [11] 3923 	push	af
      001016 33               [ 6] 3924 	inc	sp
      001017 E5               [11] 3925 	push	hl
      001018 CDr00r00         [17] 3926 	call	_WRTVRM
      00101B F1               [10] 3927 	pop	af
      00101C 33               [ 6] 3928 	inc	sp
      00101D C1               [10] 3929 	pop	bc
                                   3930 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      00101E 21 C0 1A         [10] 3931 	ld	hl, #0x1ac0
      001021 09               [11] 3932 	add	hl, bc
      001022 C5               [11] 3933 	push	bc
      001023 3E 24            [ 7] 3934 	ld	a, #0x24
      001025 F5               [11] 3935 	push	af
      001026 33               [ 6] 3936 	inc	sp
      001027 E5               [11] 3937 	push	hl
      001028 CDr00r00         [17] 3938 	call	_WRTVRM
      00102B F1               [10] 3939 	pop	af
      00102C 33               [ 6] 3940 	inc	sp
      00102D C1               [10] 3941 	pop	bc
                                   3942 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      00102E 21 C1 1A         [10] 3943 	ld	hl, #0x1ac1
      001031 09               [11] 3944 	add	hl, bc
      001032 C5               [11] 3945 	push	bc
      001033 3E 25            [ 7] 3946 	ld	a, #0x25
      001035 F5               [11] 3947 	push	af
      001036 33               [ 6] 3948 	inc	sp
      001037 E5               [11] 3949 	push	hl
      001038 CDr00r00         [17] 3950 	call	_WRTVRM
      00103B F1               [10] 3951 	pop	af
      00103C 33               [ 6] 3952 	inc	sp
      00103D C1               [10] 3953 	pop	bc
                                   3954 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      00103E 21 C2 1A         [10] 3955 	ld	hl, #0x1ac2
      001041 09               [11] 3956 	add	hl, bc
      001042 C5               [11] 3957 	push	bc
      001043 3E 26            [ 7] 3958 	ld	a, #0x26
      001045 F5               [11] 3959 	push	af
      001046 33               [ 6] 3960 	inc	sp
      001047 E5               [11] 3961 	push	hl
      001048 CDr00r00         [17] 3962 	call	_WRTVRM
      00104B F1               [10] 3963 	pop	af
      00104C 33               [ 6] 3964 	inc	sp
      00104D C1               [10] 3965 	pop	bc
                                   3966 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00104E 21 E0 1A         [10] 3967 	ld	hl, #0x1ae0
      001051 09               [11] 3968 	add	hl, bc
      001052 C5               [11] 3969 	push	bc
      001053 3E 27            [ 7] 3970 	ld	a, #0x27
      001055 F5               [11] 3971 	push	af
      001056 33               [ 6] 3972 	inc	sp
      001057 E5               [11] 3973 	push	hl
      001058 CDr00r00         [17] 3974 	call	_WRTVRM
      00105B F1               [10] 3975 	pop	af
      00105C 33               [ 6] 3976 	inc	sp
      00105D C1               [10] 3977 	pop	bc
                                   3978 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00105E 21 E1 1A         [10] 3979 	ld	hl, #0x1ae1
      001061 09               [11] 3980 	add	hl, bc
      001062 C5               [11] 3981 	push	bc
      001063 3E 28            [ 7] 3982 	ld	a, #0x28
      001065 F5               [11] 3983 	push	af
      001066 33               [ 6] 3984 	inc	sp
      001067 E5               [11] 3985 	push	hl
      001068 CDr00r00         [17] 3986 	call	_WRTVRM
      00106B F1               [10] 3987 	pop	af
      00106C 33               [ 6] 3988 	inc	sp
      00106D C1               [10] 3989 	pop	bc
                                   3990 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00106E 21 E2 1A         [10] 3991 	ld	hl, #0x1ae2
      001071 09               [11] 3992 	add	hl, bc
      001072 3E 29            [ 7] 3993 	ld	a, #0x29
      001074 F5               [11] 3994 	push	af
      001075 33               [ 6] 3995 	inc	sp
      001076 E5               [11] 3996 	push	hl
      001077 CDr00r00         [17] 3997 	call	_WRTVRM
                                   3998 ;src\/Graphics\Graphics.h:64: }
      00107A DD F9            [10] 3999 	ld	sp,ix
      00107C DD E1            [14] 4000 	pop	ix
      00107E C9               [10] 4001 	ret
                                   4002 ;src\/Graphics\Graphics.h:66: void DrawScore() {
                                   4003 ;	---------------------------------
                                   4004 ; Function DrawScore
                                   4005 ; ---------------------------------
      00107F                       4006 _DrawScore::
      00107F DD E5            [15] 4007 	push	ix
      001081 DD 21 00 00      [14] 4008 	ld	ix,#0
      001085 DD 39            [15] 4009 	add	ix,sp
      001087 F5               [11] 4010 	push	af
                                   4011 ;src\/Graphics\Graphics.h:67: byte bgCounter = 0, bgColor;
      001088 DD 36 FE 00      [19] 4012 	ld	-2 (ix), #0
                                   4013 ;src\/Graphics\Graphics.h:71: if(newLevel) {
      00108C 3Ar07r00         [13] 4014 	ld	a,(#_newLevel + 0)
      00108F B7               [ 4] 4015 	or	a, a
      001090 CAr8Br11         [10] 4016 	jp	Z, 00119$
                                   4017 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001093 DD 36 FF 00      [19] 4018 	ld	-1 (ix), #0
      001097                       4019 00121$:
      001097 DD 7E FF         [19] 4020 	ld	a, -1 (ix)
      00109A D6 3C            [ 7] 4021 	sub	a, #0x3c
      00109C D2r8Br11         [10] 4022 	jp	NC, 00119$
                                   4023 ;src\/Graphics\Graphics.h:73: lastJiffy = JIFFY;
      00109F ED 4B 9E FC      [20] 4024 	ld	bc, (_JIFFY)
                                   4025 ;src\/Graphics\Graphics.h:74: while(lastJiffy == JIFFY) { }
      0010A3                       4026 00101$:
      0010A3 2A 9E FC         [16] 4027 	ld	hl, (_JIFFY)
      0010A6 BF               [ 4] 4028 	cp	a, a
      0010A7 ED 42            [15] 4029 	sbc	hl, bc
      0010A9 28 F8            [12] 4030 	jr	Z, 00101$
                                   4031 ;src\/Graphics\Graphics.h:76: DrawExplosionSprite(26 * 8, 10 * 8, i);
      0010AB DD 56 FF         [19] 4032 	ld	d, -1 (ix)
      0010AE 1E 50            [ 7] 4033 	ld	e,#0x50
      0010B0 D5               [11] 4034 	push	de
      0010B1 3E D0            [ 7] 4035 	ld	a, #0xd0
      0010B3 F5               [11] 4036 	push	af
      0010B4 33               [ 6] 4037 	inc	sp
      0010B5 CDrDFr0C         [17] 4038 	call	_DrawExplosionSprite
      0010B8 F1               [10] 4039 	pop	af
      0010B9 33               [ 6] 4040 	inc	sp
                                   4041 ;src\/Graphics\Graphics.h:78: if(JIFFY & 0b00000110) {
      0010BA 2A 9E FC         [16] 4042 	ld	hl, (_JIFFY)
      0010BD 7D               [ 4] 4043 	ld	a, l
      0010BE E6 06            [ 7] 4044 	and	a, #0x06
      0010C0 CAr6Br11         [10] 4045 	jp	Z,00115$
                                   4046 ;src\/Graphics\Graphics.h:80: DrawString(" LEVEL", 26, 10);
      0010C3 11 1A 0A         [10] 4047 	ld	de, #0x0a1a
      0010C6 D5               [11] 4048 	push	de
      0010C7 21r67r12         [10] 4049 	ld	hl, #___str_1
      0010CA E5               [11] 4050 	push	hl
      0010CB CDrF1r0D         [17] 4051 	call	_DrawString
      0010CE F1               [10] 4052 	pop	af
      0010CF F1               [10] 4053 	pop	af
                                   4054 ;src\/Graphics\Graphics.h:81: DrawNumber(level, 26, 11);
      0010D0 3Ar06r00         [13] 4055 	ld	a, (#_level + 0)
      0010D3 4F               [ 4] 4056 	ld	c, a
      0010D4 06 00            [ 7] 4057 	ld	b, #0x00
      0010D6 11 1A 0B         [10] 4058 	ld	de, #0x0b1a
      0010D9 D5               [11] 4059 	push	de
      0010DA C5               [11] 4060 	push	bc
      0010DB CDr23r0E         [17] 4061 	call	_DrawNumber
      0010DE F1               [10] 4062 	pop	af
      0010DF F1               [10] 4063 	pop	af
                                   4064 ;src\/Graphics\Graphics.h:87: switch(bgCounter++) {
      0010E0 DD 4E FE         [19] 4065 	ld	c, -2 (ix)
      0010E3 DD 34 FE         [23] 4066 	inc	-2 (ix)
      0010E6 3E 07            [ 7] 4067 	ld	a, #0x07
      0010E8 91               [ 4] 4068 	sub	a, c
      0010E9 38 45            [12] 4069 	jr	C, 00112$
      0010EB 06 00            [ 7] 4070 	ld	b, #0x00
      0010ED 21rF4r10         [10] 4071 	ld	hl, #00163$
      0010F0 09               [11] 4072 	add	hl, bc
      0010F1 09               [11] 4073 	add	hl, bc
      0010F2 09               [11] 4074 	add	hl, bc
      0010F3 E9               [ 4] 4075 	jp	(hl)
      0010F4                       4076 00163$:
      0010F4 C3r0Cr11         [10] 4077 	jp	00104$
      0010F7 C3r10r11         [10] 4078 	jp	00105$
      0010FA C3r14r11         [10] 4079 	jp	00106$
      0010FD C3r18r11         [10] 4080 	jp	00107$
      001100 C3r1Cr11         [10] 4081 	jp	00108$
      001103 C3r20r11         [10] 4082 	jp	00109$
      001106 C3r24r11         [10] 4083 	jp	00110$
      001109 C3r28r11         [10] 4084 	jp	00111$
                                   4085 ;src\/Graphics\Graphics.h:88: case 0:
      00110C                       4086 00104$:
                                   4087 ;src\/Graphics\Graphics.h:89: bgColor = 0x14;
      00110C 0E 14            [ 7] 4088 	ld	c, #0x14
                                   4089 ;src\/Graphics\Graphics.h:90: break;
      00110E 18 22            [12] 4090 	jr	00113$
                                   4091 ;src\/Graphics\Graphics.h:91: case 1:
      001110                       4092 00105$:
                                   4093 ;src\/Graphics\Graphics.h:92: bgColor = 0x15;
      001110 0E 15            [ 7] 4094 	ld	c, #0x15
                                   4095 ;src\/Graphics\Graphics.h:93: break;
      001112 18 1E            [12] 4096 	jr	00113$
                                   4097 ;src\/Graphics\Graphics.h:94: case 2:
      001114                       4098 00106$:
                                   4099 ;src\/Graphics\Graphics.h:95: bgColor = 0x17;
      001114 0E 17            [ 7] 4100 	ld	c, #0x17
                                   4101 ;src\/Graphics\Graphics.h:96: break;
      001116 18 1A            [12] 4102 	jr	00113$
                                   4103 ;src\/Graphics\Graphics.h:97: case 3:
      001118                       4104 00107$:
                                   4105 ;src\/Graphics\Graphics.h:98: bgColor = 0x1e;
      001118 0E 1E            [ 7] 4106 	ld	c, #0x1e
                                   4107 ;src\/Graphics\Graphics.h:99: break;
      00111A 18 16            [12] 4108 	jr	00113$
                                   4109 ;src\/Graphics\Graphics.h:100: case 4:
      00111C                       4110 00108$:
                                   4111 ;src\/Graphics\Graphics.h:101: bgColor = 0x1f;
      00111C 0E 1F            [ 7] 4112 	ld	c, #0x1f
                                   4113 ;src\/Graphics\Graphics.h:102: break;
      00111E 18 12            [12] 4114 	jr	00113$
                                   4115 ;src\/Graphics\Graphics.h:103: case 5:
      001120                       4116 00109$:
                                   4117 ;src\/Graphics\Graphics.h:104: bgColor = 0x1e;
      001120 0E 1E            [ 7] 4118 	ld	c, #0x1e
                                   4119 ;src\/Graphics\Graphics.h:105: break;
      001122 18 0E            [12] 4120 	jr	00113$
                                   4121 ;src\/Graphics\Graphics.h:106: case 6:
      001124                       4122 00110$:
                                   4123 ;src\/Graphics\Graphics.h:107: bgColor = 0x17;
      001124 0E 17            [ 7] 4124 	ld	c, #0x17
                                   4125 ;src\/Graphics\Graphics.h:108: break;
      001126 18 0A            [12] 4126 	jr	00113$
                                   4127 ;src\/Graphics\Graphics.h:109: case 7:
      001128                       4128 00111$:
                                   4129 ;src\/Graphics\Graphics.h:110: bgColor = 0x15;
      001128 0E 15            [ 7] 4130 	ld	c, #0x15
                                   4131 ;src\/Graphics\Graphics.h:111: bgCounter = 0;
      00112A DD 36 FE 00      [19] 4132 	ld	-2 (ix), #0
                                   4133 ;src\/Graphics\Graphics.h:112: break;
      00112E 18 02            [12] 4134 	jr	00113$
                                   4135 ;src\/Graphics\Graphics.h:113: default:
      001130                       4136 00112$:
                                   4137 ;src\/Graphics\Graphics.h:114: bgColor = 0x11;
      001130 0E 11            [ 7] 4138 	ld	c, #0x11
                                   4139 ;src\/Graphics\Graphics.h:116: }
      001132                       4140 00113$:
                                   4141 ;src\/Graphics\Graphics.h:117: FILVRM(CLRTBL, 8 * 4, bgColor);
      001132 C5               [11] 4142 	push	bc
      001133 79               [ 4] 4143 	ld	a, c
      001134 F5               [11] 4144 	push	af
      001135 33               [ 6] 4145 	inc	sp
      001136 21 20 00         [10] 4146 	ld	hl, #0x0020
      001139 E5               [11] 4147 	push	hl
      00113A 21 00 20         [10] 4148 	ld	hl, #0x2000
      00113D E5               [11] 4149 	push	hl
      00113E CDr00r00         [17] 4150 	call	_FILVRM
      001141 F1               [10] 4151 	pop	af
      001142 F1               [10] 4152 	pop	af
      001143 33               [ 6] 4153 	inc	sp
      001144 C1               [10] 4154 	pop	bc
                                   4155 ;src\/Graphics\Graphics.h:118: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001145 C5               [11] 4156 	push	bc
      001146 79               [ 4] 4157 	ld	a, c
      001147 F5               [11] 4158 	push	af
      001148 33               [ 6] 4159 	inc	sp
      001149 21 20 00         [10] 4160 	ld	hl, #0x0020
      00114C E5               [11] 4161 	push	hl
      00114D 21 00 28         [10] 4162 	ld	hl, #0x2800
      001150 E5               [11] 4163 	push	hl
      001151 CDr00r00         [17] 4164 	call	_FILVRM
      001154 F1               [10] 4165 	pop	af
      001155 F1               [10] 4166 	pop	af
      001156 33               [ 6] 4167 	inc	sp
      001157 C1               [10] 4168 	pop	bc
                                   4169 ;src\/Graphics\Graphics.h:119: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001158 79               [ 4] 4170 	ld	a, c
      001159 F5               [11] 4171 	push	af
      00115A 33               [ 6] 4172 	inc	sp
      00115B 21 20 00         [10] 4173 	ld	hl, #0x0020
      00115E E5               [11] 4174 	push	hl
      00115F 21 00 30         [10] 4175 	ld	hl, #0x3000
      001162 E5               [11] 4176 	push	hl
      001163 CDr00r00         [17] 4177 	call	_FILVRM
      001166 F1               [10] 4178 	pop	af
      001167 F1               [10] 4179 	pop	af
      001168 33               [ 6] 4180 	inc	sp
      001169 18 1A            [12] 4181 	jr	00122$
      00116B                       4182 00115$:
                                   4183 ;src\/Graphics\Graphics.h:124: DrawString("      ", 26, 10);
      00116B 11 1A 0A         [10] 4184 	ld	de, #0x0a1a
      00116E D5               [11] 4185 	push	de
      00116F 21r6Er12         [10] 4186 	ld	hl, #___str_2
      001172 E5               [11] 4187 	push	hl
      001173 CDrF1r0D         [17] 4188 	call	_DrawString
      001176 F1               [10] 4189 	pop	af
      001177 F1               [10] 4190 	pop	af
                                   4191 ;src\/Graphics\Graphics.h:125: DrawString("      ", 26, 11);
      001178 11 1A 0B         [10] 4192 	ld	de, #0x0b1a
      00117B D5               [11] 4193 	push	de
      00117C 21r6Er12         [10] 4194 	ld	hl, #___str_2
      00117F E5               [11] 4195 	push	hl
      001180 CDrF1r0D         [17] 4196 	call	_DrawString
      001183 F1               [10] 4197 	pop	af
      001184 F1               [10] 4198 	pop	af
      001185                       4199 00122$:
                                   4200 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001185 DD 34 FF         [23] 4201 	inc	-1 (ix)
      001188 C3r97r10         [10] 4202 	jp	00121$
      00118B                       4203 00119$:
                                   4204 ;src\/Graphics\Graphics.h:131: newLevel = FALSE;
      00118B 21r07r00         [10] 4205 	ld	hl, #_newLevel
      00118E 36 00            [10] 4206 	ld	(hl), #0x00
                                   4207 ;src\/Graphics\Graphics.h:134: FILVRM(CLRTBL, 8 * 4, 0x14);
      001190 3E 14            [ 7] 4208 	ld	a, #0x14
      001192 F5               [11] 4209 	push	af
      001193 33               [ 6] 4210 	inc	sp
      001194 21 20 00         [10] 4211 	ld	hl, #0x0020
      001197 E5               [11] 4212 	push	hl
      001198 21 00 20         [10] 4213 	ld	hl, #0x2000
      00119B E5               [11] 4214 	push	hl
      00119C CDr00r00         [17] 4215 	call	_FILVRM
      00119F F1               [10] 4216 	pop	af
      0011A0 F1               [10] 4217 	pop	af
      0011A1 33               [ 6] 4218 	inc	sp
                                   4219 ;src\/Graphics\Graphics.h:135: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      0011A2 3E 14            [ 7] 4220 	ld	a, #0x14
      0011A4 F5               [11] 4221 	push	af
      0011A5 33               [ 6] 4222 	inc	sp
      0011A6 21 20 00         [10] 4223 	ld	hl, #0x0020
      0011A9 E5               [11] 4224 	push	hl
      0011AA 21 00 28         [10] 4225 	ld	hl, #0x2800
      0011AD E5               [11] 4226 	push	hl
      0011AE CDr00r00         [17] 4227 	call	_FILVRM
      0011B1 F1               [10] 4228 	pop	af
      0011B2 F1               [10] 4229 	pop	af
      0011B3 33               [ 6] 4230 	inc	sp
                                   4231 ;src\/Graphics\Graphics.h:136: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      0011B4 3E 14            [ 7] 4232 	ld	a, #0x14
      0011B6 F5               [11] 4233 	push	af
      0011B7 33               [ 6] 4234 	inc	sp
      0011B8 21 20 00         [10] 4235 	ld	hl, #0x0020
      0011BB E5               [11] 4236 	push	hl
      0011BC 21 00 30         [10] 4237 	ld	hl, #0x3000
      0011BF E5               [11] 4238 	push	hl
      0011C0 CDr00r00         [17] 4239 	call	_FILVRM
      0011C3 F1               [10] 4240 	pop	af
      0011C4 F1               [10] 4241 	pop	af
      0011C5 33               [ 6] 4242 	inc	sp
                                   4243 ;src\/Graphics\Graphics.h:139: DrawString(" LEVEL", 26, 10);
      0011C6 11 1A 0A         [10] 4244 	ld	de, #0x0a1a
      0011C9 D5               [11] 4245 	push	de
      0011CA 21r67r12         [10] 4246 	ld	hl, #___str_1
      0011CD E5               [11] 4247 	push	hl
      0011CE CDrF1r0D         [17] 4248 	call	_DrawString
      0011D1 F1               [10] 4249 	pop	af
      0011D2 F1               [10] 4250 	pop	af
                                   4251 ;src\/Graphics\Graphics.h:140: DrawString("BLOCKS", 26, 18);
      0011D3 11 1A 12         [10] 4252 	ld	de, #0x121a
      0011D6 D5               [11] 4253 	push	de
      0011D7 21r75r12         [10] 4254 	ld	hl, #___str_3
      0011DA E5               [11] 4255 	push	hl
      0011DB CDrF1r0D         [17] 4256 	call	_DrawString
      0011DE F1               [10] 4257 	pop	af
      0011DF F1               [10] 4258 	pop	af
                                   4259 ;src\/Graphics\Graphics.h:143: DrawNumber(level, 26, 11);
      0011E0 3Ar06r00         [13] 4260 	ld	a, (#_level + 0)
      0011E3 4F               [ 4] 4261 	ld	c, a
      0011E4 06 00            [ 7] 4262 	ld	b, #0x00
      0011E6 11 1A 0B         [10] 4263 	ld	de, #0x0b1a
      0011E9 D5               [11] 4264 	push	de
      0011EA C5               [11] 4265 	push	bc
      0011EB CDr23r0E         [17] 4266 	call	_DrawNumber
      0011EE F1               [10] 4267 	pop	af
      0011EF F1               [10] 4268 	pop	af
                                   4269 ;src\/Graphics\Graphics.h:144: DrawNumber(blocksRemoved, 26, 19);
      0011F0 11 1A 13         [10] 4270 	ld	de, #0x131a
      0011F3 D5               [11] 4271 	push	de
      0011F4 2Ar04r00         [16] 4272 	ld	hl, (_blocksRemoved)
      0011F7 E5               [11] 4273 	push	hl
      0011F8 CDr23r0E         [17] 4274 	call	_DrawNumber
      0011FB F1               [10] 4275 	pop	af
                                   4276 ;src\/Graphics\Graphics.h:147: WRTVRM(SPRATT + 40, 	10);
      0011FC 26 0A            [ 7] 4277 	ld	h,#0x0a
      0011FE E3               [19] 4278 	ex	(sp),hl
      0011FF 33               [ 6] 4279 	inc	sp
      001200 21 28 1B         [10] 4280 	ld	hl, #0x1b28
      001203 E5               [11] 4281 	push	hl
      001204 CDr00r00         [17] 4282 	call	_WRTVRM
      001207 F1               [10] 4283 	pop	af
      001208 33               [ 6] 4284 	inc	sp
                                   4285 ;src\/Graphics\Graphics.h:148: WRTVRM(SPRATT + 41, 	26 * 8);
      001209 3E D0            [ 7] 4286 	ld	a, #0xd0
      00120B F5               [11] 4287 	push	af
      00120C 33               [ 6] 4288 	inc	sp
      00120D 21 29 1B         [10] 4289 	ld	hl, #0x1b29
      001210 E5               [11] 4290 	push	hl
      001211 CDr00r00         [17] 4291 	call	_WRTVRM
      001214 F1               [10] 4292 	pop	af
      001215 33               [ 6] 4293 	inc	sp
                                   4294 ;src\/Graphics\Graphics.h:149: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      001216 3E 4C            [ 7] 4295 	ld	a, #0x4c
      001218 F5               [11] 4296 	push	af
      001219 33               [ 6] 4297 	inc	sp
      00121A 21 2A 1B         [10] 4298 	ld	hl, #0x1b2a
      00121D E5               [11] 4299 	push	hl
      00121E CDr00r00         [17] 4300 	call	_WRTVRM
      001221 F1               [10] 4301 	pop	af
      001222 33               [ 6] 4302 	inc	sp
                                   4303 ;src\/Graphics\Graphics.h:150: WRTVRM(SPRATT + 43, 	3);
      001223 3E 03            [ 7] 4304 	ld	a, #0x03
      001225 F5               [11] 4305 	push	af
      001226 33               [ 6] 4306 	inc	sp
      001227 21 2B 1B         [10] 4307 	ld	hl, #0x1b2b
      00122A E5               [11] 4308 	push	hl
      00122B CDr00r00         [17] 4309 	call	_WRTVRM
      00122E F1               [10] 4310 	pop	af
      00122F 33               [ 6] 4311 	inc	sp
                                   4312 ;src\/Graphics\Graphics.h:152: WRTVRM(SPRATT + 44, 	10);
      001230 3E 0A            [ 7] 4313 	ld	a, #0x0a
      001232 F5               [11] 4314 	push	af
      001233 33               [ 6] 4315 	inc	sp
      001234 21 2C 1B         [10] 4316 	ld	hl, #0x1b2c
      001237 E5               [11] 4317 	push	hl
      001238 CDr00r00         [17] 4318 	call	_WRTVRM
      00123B F1               [10] 4319 	pop	af
      00123C 33               [ 6] 4320 	inc	sp
                                   4321 ;src\/Graphics\Graphics.h:153: WRTVRM(SPRATT + 45, 	26 * 8);
      00123D 3E D0            [ 7] 4322 	ld	a, #0xd0
      00123F F5               [11] 4323 	push	af
      001240 33               [ 6] 4324 	inc	sp
      001241 21 2D 1B         [10] 4325 	ld	hl, #0x1b2d
      001244 E5               [11] 4326 	push	hl
      001245 CDr00r00         [17] 4327 	call	_WRTVRM
      001248 F1               [10] 4328 	pop	af
      001249 33               [ 6] 4329 	inc	sp
                                   4330 ;src\/Graphics\Graphics.h:154: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      00124A 3E 50            [ 7] 4331 	ld	a, #0x50
      00124C F5               [11] 4332 	push	af
      00124D 33               [ 6] 4333 	inc	sp
      00124E 21 2E 1B         [10] 4334 	ld	hl, #0x1b2e
      001251 E5               [11] 4335 	push	hl
      001252 CDr00r00         [17] 4336 	call	_WRTVRM
      001255 F1               [10] 4337 	pop	af
      001256 33               [ 6] 4338 	inc	sp
                                   4339 ;src\/Graphics\Graphics.h:155: WRTVRM(SPRATT + 47, 	12);
      001257 3E 0C            [ 7] 4340 	ld	a, #0x0c
      001259 F5               [11] 4341 	push	af
      00125A 33               [ 6] 4342 	inc	sp
      00125B 21 2F 1B         [10] 4343 	ld	hl, #0x1b2f
      00125E E5               [11] 4344 	push	hl
      00125F CDr00r00         [17] 4345 	call	_WRTVRM
                                   4346 ;src\/Graphics\Graphics.h:156: }
      001262 DD F9            [10] 4347 	ld	sp,ix
      001264 DD E1            [14] 4348 	pop	ix
      001266 C9               [10] 4349 	ret
      001267                       4350 ___str_1:
      001267 20 4C 45 56 45 4C     4351 	.ascii " LEVEL"
      00126D 00                    4352 	.db 0x00
      00126E                       4353 ___str_2:
      00126E 20 20 20 20 20 20     4354 	.ascii "      "
      001274 00                    4355 	.db 0x00
      001275                       4356 ___str_3:
      001275 42 4C 4F 43 4B 53     4357 	.ascii "BLOCKS"
      00127B 00                    4358 	.db 0x00
                                   4359 ;src\/Graphics\Graphics.h:158: void DrawBackground() {
                                   4360 ;	---------------------------------
                                   4361 ; Function DrawBackground
                                   4362 ; ---------------------------------
      00127C                       4363 _DrawBackground::
                                   4364 ;src\/Graphics\Graphics.h:160: for(int i = 0; i < 256 * 3; i++) {
      00127C 01 00 00         [10] 4365 	ld	bc, #0x0000
      00127F                       4366 00103$:
      00127F 78               [ 4] 4367 	ld	a, b
      001280 EE 80            [ 7] 4368 	xor	a, #0x80
      001282 D6 83            [ 7] 4369 	sub	a, #0x83
      001284 30 12            [12] 4370 	jr	NC, 00101$
                                   4371 ;src\/Graphics\Graphics.h:161: WRTVRM(NAMTBL + i, 0); // test
      001286 21 00 18         [10] 4372 	ld	hl, #0x1800
      001289 09               [11] 4373 	add	hl, bc
      00128A C5               [11] 4374 	push	bc
      00128B AF               [ 4] 4375 	xor	a, a
      00128C F5               [11] 4376 	push	af
      00128D 33               [ 6] 4377 	inc	sp
      00128E E5               [11] 4378 	push	hl
      00128F CDr00r00         [17] 4379 	call	_WRTVRM
      001292 F1               [10] 4380 	pop	af
      001293 33               [ 6] 4381 	inc	sp
      001294 C1               [10] 4382 	pop	bc
                                   4383 ;src\/Graphics\Graphics.h:160: for(int i = 0; i < 256 * 3; i++) {
      001295 03               [ 6] 4384 	inc	bc
      001296 18 E7            [12] 4385 	jr	00103$
      001298                       4386 00101$:
                                   4387 ;src\/Graphics\Graphics.h:164: DrawColumn(7);
      001298 3E 07            [ 7] 4388 	ld	a, #0x07
      00129A F5               [11] 4389 	push	af
      00129B 33               [ 6] 4390 	inc	sp
      00129C CDrDEr0E         [17] 4391 	call	_DrawColumn
      00129F 33               [ 6] 4392 	inc	sp
                                   4393 ;src\/Graphics\Graphics.h:165: DrawColumn(22);
      0012A0 3E 16            [ 7] 4394 	ld	a, #0x16
      0012A2 F5               [11] 4395 	push	af
      0012A3 33               [ 6] 4396 	inc	sp
      0012A4 CDrDEr0E         [17] 4397 	call	_DrawColumn
      0012A7 33               [ 6] 4398 	inc	sp
                                   4399 ;src\/Graphics\Graphics.h:167: DrawScore();
                                   4400 ;src\/Graphics\Graphics.h:203: }
      0012A8 C3r7Fr10         [10] 4401 	jp	_DrawScore
                                   4402 ;src\/Graphics\Graphics.h:205: void InitVRAM() {
                                   4403 ;	---------------------------------
                                   4404 ; Function InitVRAM
                                   4405 ; ---------------------------------
      0012AB                       4406 _InitVRAM::
      0012AB DD E5            [15] 4407 	push	ix
      0012AD DD 21 00 00      [14] 4408 	ld	ix,#0
      0012B1 DD 39            [15] 4409 	add	ix,sp
      0012B3 3B               [ 6] 4410 	dec	sp
                                   4411 ;src\/Graphics\Graphics.h:210: CLIKSW = 0;	// disable keyboard sound
      0012B4 21 00 00         [10] 4412 	ld	hl, #0x0000
      0012B7 22 DB F3         [16] 4413 	ld	(_CLIKSW), hl
                                   4414 ;src\/Graphics\Graphics.h:211: SCNCNT = 1; 	// set keyboard scan counter
      0012BA 21 F6 F3         [10] 4415 	ld	hl, #_SCNCNT
      0012BD 36 01            [10] 4416 	ld	(hl), #0x01
                                   4417 ;src\/Graphics\Graphics.h:213: FORCLR = COLOR_WHITE;
      0012BF 21 E9 F3         [10] 4418 	ld	hl, #_FORCLR
      0012C2 36 0F            [10] 4419 	ld	(hl), #0x0f
                                   4420 ;src\/Graphics\Graphics.h:214: BAKCLR = COLOR_BLACK;
      0012C4 21 EA F3         [10] 4421 	ld	hl, #_BAKCLR
      0012C7 36 01            [10] 4422 	ld	(hl), #0x01
                                   4423 ;src\/Graphics\Graphics.h:215: BDRCLR = COLOR_BLACK;
      0012C9 21 EB F3         [10] 4424 	ld	hl, #_BDRCLR
      0012CC 36 01            [10] 4425 	ld	(hl), #0x01
                                   4426 ;src\/Graphics\Graphics.h:243: WRTVDP(0b0000000111100010);
      0012CE 21 E2 01         [10] 4427 	ld	hl, #0x01e2
      0012D1 CDr00r00         [17] 4428 	call	_WRTVDP
                                   4429 ;src\/Graphics\Graphics.h:245: INIGRP();	// Set screen 2
      0012D4 CDr00r00         [17] 4430 	call	_INIGRP
                                   4431 ;src\/Graphics\Graphics.h:247: DISSCR();	// Disable screen (faster to write)
      0012D7 CDr00r00         [17] 4432 	call	_DISSCR
                                   4433 ;src\/Graphics\Graphics.h:251: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      0012DA AF               [ 4] 4434 	xor	a, a
      0012DB F5               [11] 4435 	push	af
      0012DC 33               [ 6] 4436 	inc	sp
      0012DD 21 00 40         [10] 4437 	ld	hl, #0x4000
      0012E0 E5               [11] 4438 	push	hl
      0012E1 65               [ 4] 4439 	ld	h, l
      0012E2 E5               [11] 4440 	push	hl
      0012E3 CDr00r00         [17] 4441 	call	_FILVRM
      0012E6 F1               [10] 4442 	pop	af
                                   4443 ;src\/Graphics\Graphics.h:260: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      0012E7 33               [ 6] 4444 	inc	sp
      0012E8 21 A0 02         [10] 4445 	ld	hl,#0x02a0
      0012EB E3               [19] 4446 	ex	(sp),hl
      0012EC 21rA8r07         [10] 4447 	ld	hl, #_sprite_arrow_0
      0012EF E5               [11] 4448 	push	hl
      0012F0 21 00 38         [10] 4449 	ld	hl, #0x3800
      0012F3 E5               [11] 4450 	push	hl
      0012F4 CDr00r00         [17] 4451 	call	_LDIRVM
      0012F7 21 06 00         [10] 4452 	ld	hl, #6
      0012FA 39               [11] 4453 	add	hl, sp
      0012FB F9               [ 6] 4454 	ld	sp, hl
                                   4455 ;src\/Graphics\Graphics.h:266: for(byte i=0; i<32; i++) {
      0012FC 0E 00            [ 7] 4456 	ld	c, #0x00
      0012FE                       4457 00110$:
                                   4458 ;src\/Graphics\Graphics.h:267: WRTVRM(SPRATT + (i * 4), 	192);
      0012FE 79               [ 4] 4459 	ld	a,c
      0012FF FE 20            [ 7] 4460 	cp	a,#0x20
      001301 30 18            [12] 4461 	jr	NC, 00101$
      001303 26 00            [ 7] 4462 	ld	h, #0x00
      001305 6F               [ 4] 4463 	ld	l, a
      001306 29               [11] 4464 	add	hl, hl
      001307 29               [11] 4465 	add	hl, hl
      001308 7C               [ 4] 4466 	ld	a, h
      001309 C6 1B            [ 7] 4467 	add	a, #0x1b
      00130B 67               [ 4] 4468 	ld	h, a
      00130C C5               [11] 4469 	push	bc
      00130D 3E C0            [ 7] 4470 	ld	a, #0xc0
      00130F F5               [11] 4471 	push	af
      001310 33               [ 6] 4472 	inc	sp
      001311 E5               [11] 4473 	push	hl
      001312 CDr00r00         [17] 4474 	call	_WRTVRM
      001315 F1               [10] 4475 	pop	af
      001316 33               [ 6] 4476 	inc	sp
      001317 C1               [10] 4477 	pop	bc
                                   4478 ;src\/Graphics\Graphics.h:266: for(byte i=0; i<32; i++) {
      001318 0C               [ 4] 4479 	inc	c
      001319 18 E3            [12] 4480 	jr	00110$
      00131B                       4481 00101$:
                                   4482 ;src\/Graphics\Graphics.h:276: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00131B 21 78 01         [10] 4483 	ld	hl, #0x0178
      00131E E5               [11] 4484 	push	hl
      00131F 21r78r04         [10] 4485 	ld	hl, #_pattern_black_0
      001322 E5               [11] 4486 	push	hl
      001323 21 00 00         [10] 4487 	ld	hl, #0x0000
      001326 E5               [11] 4488 	push	hl
      001327 CDr00r00         [17] 4489 	call	_LDIRVM
      00132A 21 06 00         [10] 4490 	ld	hl, #6
      00132D 39               [11] 4491 	add	hl, sp
      00132E F9               [ 6] 4492 	ld	sp, hl
                                   4493 ;src\/Graphics\Graphics.h:279: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00132F 21 78 01         [10] 4494 	ld	hl, #0x0178
      001332 E5               [11] 4495 	push	hl
      001333 21r78r04         [10] 4496 	ld	hl, #_pattern_black_0
      001336 E5               [11] 4497 	push	hl
      001337 21 00 08         [10] 4498 	ld	hl, #0x0800
      00133A E5               [11] 4499 	push	hl
      00133B CDr00r00         [17] 4500 	call	_LDIRVM
      00133E 21 06 00         [10] 4501 	ld	hl, #6
      001341 39               [11] 4502 	add	hl, sp
      001342 F9               [ 6] 4503 	ld	sp, hl
                                   4504 ;src\/Graphics\Graphics.h:282: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001343 21 78 01         [10] 4505 	ld	hl, #0x0178
      001346 E5               [11] 4506 	push	hl
      001347 21r78r04         [10] 4507 	ld	hl, #_pattern_black_0
      00134A E5               [11] 4508 	push	hl
      00134B 21 00 10         [10] 4509 	ld	hl, #0x1000
      00134E E5               [11] 4510 	push	hl
      00134F CDr00r00         [17] 4511 	call	_LDIRVM
      001352 21 06 00         [10] 4512 	ld	hl, #6
      001355 39               [11] 4513 	add	hl, sp
      001356 F9               [ 6] 4514 	ld	sp, hl
                                   4515 ;src\/Graphics\Graphics.h:285: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001357 21 00 03         [10] 4516 	ld	hl, #0x0300
      00135A E5               [11] 4517 	push	hl
      00135B 21r78r01         [10] 4518 	ld	hl, #_FONT
      00135E E5               [11] 4519 	push	hl
      00135F 21 78 01         [10] 4520 	ld	hl, #0x0178
      001362 E5               [11] 4521 	push	hl
      001363 CDr00r00         [17] 4522 	call	_LDIRVM
      001366 21 06 00         [10] 4523 	ld	hl, #6
      001369 39               [11] 4524 	add	hl, sp
      00136A F9               [ 6] 4525 	ld	sp, hl
                                   4526 ;src\/Graphics\Graphics.h:288: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00136B 21 00 03         [10] 4527 	ld	hl, #0x0300
      00136E E5               [11] 4528 	push	hl
      00136F 21r78r01         [10] 4529 	ld	hl, #_FONT
      001372 E5               [11] 4530 	push	hl
      001373 21 78 09         [10] 4531 	ld	hl, #0x0978
      001376 E5               [11] 4532 	push	hl
      001377 CDr00r00         [17] 4533 	call	_LDIRVM
      00137A 21 06 00         [10] 4534 	ld	hl, #6
      00137D 39               [11] 4535 	add	hl, sp
      00137E F9               [ 6] 4536 	ld	sp, hl
                                   4537 ;src\/Graphics\Graphics.h:291: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00137F 21 00 03         [10] 4538 	ld	hl, #0x0300
      001382 E5               [11] 4539 	push	hl
      001383 21r78r01         [10] 4540 	ld	hl, #_FONT
      001386 E5               [11] 4541 	push	hl
      001387 21 78 11         [10] 4542 	ld	hl, #0x1178
      00138A E5               [11] 4543 	push	hl
      00138B CDr00r00         [17] 4544 	call	_LDIRVM
      00138E 21 06 00         [10] 4545 	ld	hl, #6
      001391 39               [11] 4546 	add	hl, sp
      001392 F9               [ 6] 4547 	ld	sp, hl
                                   4548 ;src\/Graphics\Graphics.h:295: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001393 0E 00            [ 7] 4549 	ld	c, #0x00
      001395                       4550 00113$:
                                   4551 ;src\/Graphics\Graphics.h:296: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      001395 79               [ 4] 4552 	ld	a,c
      001396 FE 07            [ 7] 4553 	cp	a,#0x07
      001398 30 20            [12] 4554 	jr	NC, 00102$
      00139A 26 00            [ 7] 4555 	ld	h, #0x00
      00139C 6F               [ 4] 4556 	ld	l, a
      00139D 29               [11] 4557 	add	hl, hl
      00139E 29               [11] 4558 	add	hl, hl
      00139F 29               [11] 4559 	add	hl, hl
      0013A0 11 70 04         [10] 4560 	ld	de, #0x0470
      0013A3 19               [11] 4561 	add	hl, de
      0013A4 C5               [11] 4562 	push	bc
      0013A5 11 38 00         [10] 4563 	ld	de, #0x0038
      0013A8 D5               [11] 4564 	push	de
      0013A9 11rE8r05         [10] 4565 	ld	de, #_pattern_title
      0013AC D5               [11] 4566 	push	de
      0013AD E5               [11] 4567 	push	hl
      0013AE CDr00r00         [17] 4568 	call	_LDIRVM
      0013B1 21 06 00         [10] 4569 	ld	hl, #6
      0013B4 39               [11] 4570 	add	hl, sp
      0013B5 F9               [ 6] 4571 	ld	sp, hl
      0013B6 C1               [10] 4572 	pop	bc
                                   4573 ;src\/Graphics\Graphics.h:295: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0013B7 0C               [ 4] 4574 	inc	c
      0013B8 18 DB            [12] 4575 	jr	00113$
      0013BA                       4576 00102$:
                                   4577 ;src\/Graphics\Graphics.h:302: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      0013BA 21 78 01         [10] 4578 	ld	hl, #0x0178
      0013BD E5               [11] 4579 	push	hl
      0013BE 21rF0r05         [10] 4580 	ld	hl, #_color_black_0
      0013C1 E5               [11] 4581 	push	hl
      0013C2 21 00 20         [10] 4582 	ld	hl, #0x2000
      0013C5 E5               [11] 4583 	push	hl
      0013C6 CDr00r00         [17] 4584 	call	_LDIRVM
      0013C9 21 06 00         [10] 4585 	ld	hl, #6
      0013CC 39               [11] 4586 	add	hl, sp
      0013CD F9               [ 6] 4587 	ld	sp, hl
                                   4588 ;src\/Graphics\Graphics.h:304: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      0013CE 21 78 01         [10] 4589 	ld	hl, #0x0178
      0013D1 E5               [11] 4590 	push	hl
      0013D2 21rF0r05         [10] 4591 	ld	hl, #_color_black_0
      0013D5 E5               [11] 4592 	push	hl
      0013D6 21 00 28         [10] 4593 	ld	hl, #0x2800
      0013D9 E5               [11] 4594 	push	hl
      0013DA CDr00r00         [17] 4595 	call	_LDIRVM
      0013DD 21 06 00         [10] 4596 	ld	hl, #6
      0013E0 39               [11] 4597 	add	hl, sp
      0013E1 F9               [ 6] 4598 	ld	sp, hl
                                   4599 ;src\/Graphics\Graphics.h:306: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      0013E2 21 78 01         [10] 4600 	ld	hl, #0x0178
      0013E5 E5               [11] 4601 	push	hl
      0013E6 21rF0r05         [10] 4602 	ld	hl, #_color_black_0
      0013E9 E5               [11] 4603 	push	hl
      0013EA 21 00 30         [10] 4604 	ld	hl, #0x3000
      0013ED E5               [11] 4605 	push	hl
      0013EE CDr00r00         [17] 4606 	call	_LDIRVM
      0013F1 21 06 00         [10] 4607 	ld	hl, #6
      0013F4 39               [11] 4608 	add	hl, sp
      0013F5 F9               [ 6] 4609 	ld	sp, hl
                                   4610 ;src\/Graphics\Graphics.h:313: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0013F6 0E 00            [ 7] 4611 	ld	c, #0x00
      0013F8                       4612 00116$:
                                   4613 ;src\/Graphics\Graphics.h:314: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0013F8 79               [ 4] 4614 	ld	a,c
      0013F9 FE 60            [ 7] 4615 	cp	a,#0x60
      0013FB 30 20            [12] 4616 	jr	NC, 00103$
      0013FD 26 00            [ 7] 4617 	ld	h, #0x00
      0013FF 6F               [ 4] 4618 	ld	l, a
      001400 29               [11] 4619 	add	hl, hl
      001401 29               [11] 4620 	add	hl, hl
      001402 29               [11] 4621 	add	hl, hl
      001403 11 78 21         [10] 4622 	ld	de, #0x2178
      001406 19               [11] 4623 	add	hl, de
      001407 C5               [11] 4624 	push	bc
      001408 11 08 00         [10] 4625 	ld	de, #0x0008
      00140B D5               [11] 4626 	push	de
      00140C 11r68r07         [10] 4627 	ld	de, #_color_font_2
      00140F D5               [11] 4628 	push	de
      001410 E5               [11] 4629 	push	hl
      001411 CDr00r00         [17] 4630 	call	_LDIRVM
      001414 21 06 00         [10] 4631 	ld	hl, #6
      001417 39               [11] 4632 	add	hl, sp
      001418 F9               [ 6] 4633 	ld	sp, hl
      001419 C1               [10] 4634 	pop	bc
                                   4635 ;src\/Graphics\Graphics.h:313: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00141A 0C               [ 4] 4636 	inc	c
      00141B 18 DB            [12] 4637 	jr	00116$
      00141D                       4638 00103$:
                                   4639 ;src\/Graphics\Graphics.h:317: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00141D 0E 00            [ 7] 4640 	ld	c, #0x00
      00141F                       4641 00119$:
                                   4642 ;src\/Graphics\Graphics.h:318: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00141F 79               [ 4] 4643 	ld	a,c
      001420 FE 60            [ 7] 4644 	cp	a,#0x60
      001422 30 20            [12] 4645 	jr	NC, 00104$
      001424 26 00            [ 7] 4646 	ld	h, #0x00
      001426 6F               [ 4] 4647 	ld	l, a
      001427 29               [11] 4648 	add	hl, hl
      001428 29               [11] 4649 	add	hl, hl
      001429 29               [11] 4650 	add	hl, hl
      00142A 11 78 29         [10] 4651 	ld	de, #0x2978
      00142D 19               [11] 4652 	add	hl, de
      00142E C5               [11] 4653 	push	bc
      00142F 11 08 00         [10] 4654 	ld	de, #0x0008
      001432 D5               [11] 4655 	push	de
      001433 11r68r07         [10] 4656 	ld	de, #_color_font_2
      001436 D5               [11] 4657 	push	de
      001437 E5               [11] 4658 	push	hl
      001438 CDr00r00         [17] 4659 	call	_LDIRVM
      00143B 21 06 00         [10] 4660 	ld	hl, #6
      00143E 39               [11] 4661 	add	hl, sp
      00143F F9               [ 6] 4662 	ld	sp, hl
      001440 C1               [10] 4663 	pop	bc
                                   4664 ;src\/Graphics\Graphics.h:317: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001441 0C               [ 4] 4665 	inc	c
      001442 18 DB            [12] 4666 	jr	00119$
      001444                       4667 00104$:
                                   4668 ;src\/Graphics\Graphics.h:321: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001444 0E 00            [ 7] 4669 	ld	c, #0x00
      001446                       4670 00122$:
                                   4671 ;src\/Graphics\Graphics.h:322: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001446 79               [ 4] 4672 	ld	a,c
      001447 FE 60            [ 7] 4673 	cp	a,#0x60
      001449 30 20            [12] 4674 	jr	NC, 00105$
      00144B 26 00            [ 7] 4675 	ld	h, #0x00
      00144D 6F               [ 4] 4676 	ld	l, a
      00144E 29               [11] 4677 	add	hl, hl
      00144F 29               [11] 4678 	add	hl, hl
      001450 29               [11] 4679 	add	hl, hl
      001451 11 78 31         [10] 4680 	ld	de, #0x3178
      001454 19               [11] 4681 	add	hl, de
      001455 C5               [11] 4682 	push	bc
      001456 11 08 00         [10] 4683 	ld	de, #0x0008
      001459 D5               [11] 4684 	push	de
      00145A 11r68r07         [10] 4685 	ld	de, #_color_font_2
      00145D D5               [11] 4686 	push	de
      00145E E5               [11] 4687 	push	hl
      00145F CDr00r00         [17] 4688 	call	_LDIRVM
      001462 21 06 00         [10] 4689 	ld	hl, #6
      001465 39               [11] 4690 	add	hl, sp
      001466 F9               [ 6] 4691 	ld	sp, hl
      001467 C1               [10] 4692 	pop	bc
                                   4693 ;src\/Graphics\Graphics.h:321: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001468 0C               [ 4] 4694 	inc	c
      001469 18 DB            [12] 4695 	jr	00122$
      00146B                       4696 00105$:
                                   4697 ;src\/Graphics\Graphics.h:330: for(byte i = 0; i < 10; i++) {
      00146B 0E 00            [ 7] 4698 	ld	c, #0x00
      00146D                       4699 00125$:
                                   4700 ;src\/Graphics\Graphics.h:331: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00146D 79               [ 4] 4701 	ld	a,c
      00146E FE 0A            [ 7] 4702 	cp	a,#0x0a
      001470 30 20            [12] 4703 	jr	NC, 00106$
      001472 26 00            [ 7] 4704 	ld	h, #0x00
      001474 6F               [ 4] 4705 	ld	l, a
      001475 29               [11] 4706 	add	hl, hl
      001476 29               [11] 4707 	add	hl, hl
      001477 29               [11] 4708 	add	hl, hl
      001478 11 F8 21         [10] 4709 	ld	de, #0x21f8
      00147B 19               [11] 4710 	add	hl, de
      00147C C5               [11] 4711 	push	bc
      00147D 11 08 00         [10] 4712 	ld	de, #0x0008
      001480 D5               [11] 4713 	push	de
      001481 11r60r07         [10] 4714 	ld	de, #_color_font_1
      001484 D5               [11] 4715 	push	de
      001485 E5               [11] 4716 	push	hl
      001486 CDr00r00         [17] 4717 	call	_LDIRVM
      001489 21 06 00         [10] 4718 	ld	hl, #6
      00148C 39               [11] 4719 	add	hl, sp
      00148D F9               [ 6] 4720 	ld	sp, hl
      00148E C1               [10] 4721 	pop	bc
                                   4722 ;src\/Graphics\Graphics.h:330: for(byte i = 0; i < 10; i++) {
      00148F 0C               [ 4] 4723 	inc	c
      001490 18 DB            [12] 4724 	jr	00125$
      001492                       4725 00106$:
                                   4726 ;src\/Graphics\Graphics.h:334: for(byte i = 0; i < 10; i++) {
      001492 0E 00            [ 7] 4727 	ld	c, #0x00
      001494                       4728 00128$:
                                   4729 ;src\/Graphics\Graphics.h:335: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001494 79               [ 4] 4730 	ld	a,c
      001495 FE 0A            [ 7] 4731 	cp	a,#0x0a
      001497 30 20            [12] 4732 	jr	NC, 00107$
      001499 26 00            [ 7] 4733 	ld	h, #0x00
      00149B 6F               [ 4] 4734 	ld	l, a
      00149C 29               [11] 4735 	add	hl, hl
      00149D 29               [11] 4736 	add	hl, hl
      00149E 29               [11] 4737 	add	hl, hl
      00149F 11 F8 29         [10] 4738 	ld	de, #0x29f8
      0014A2 19               [11] 4739 	add	hl, de
      0014A3 C5               [11] 4740 	push	bc
      0014A4 11 08 00         [10] 4741 	ld	de, #0x0008
      0014A7 D5               [11] 4742 	push	de
      0014A8 11r60r07         [10] 4743 	ld	de, #_color_font_1
      0014AB D5               [11] 4744 	push	de
      0014AC E5               [11] 4745 	push	hl
      0014AD CDr00r00         [17] 4746 	call	_LDIRVM
      0014B0 21 06 00         [10] 4747 	ld	hl, #6
      0014B3 39               [11] 4748 	add	hl, sp
      0014B4 F9               [ 6] 4749 	ld	sp, hl
      0014B5 C1               [10] 4750 	pop	bc
                                   4751 ;src\/Graphics\Graphics.h:334: for(byte i = 0; i < 10; i++) {
      0014B6 0C               [ 4] 4752 	inc	c
      0014B7 18 DB            [12] 4753 	jr	00128$
      0014B9                       4754 00107$:
                                   4755 ;src\/Graphics\Graphics.h:338: for(byte i = 0; i < 10; i++) {
      0014B9 DD 36 FF 00      [19] 4756 	ld	-1 (ix), #0
      0014BD                       4757 00131$:
      0014BD DD 7E FF         [19] 4758 	ld	a, -1 (ix)
      0014C0 D6 0A            [ 7] 4759 	sub	a, #0x0a
      0014C2 30 22            [12] 4760 	jr	NC, 00108$
                                   4761 ;src\/Graphics\Graphics.h:339: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0014C4 01r60r07         [10] 4762 	ld	bc, #_color_font_1
      0014C7 DD 6E FF         [19] 4763 	ld	l, -1 (ix)
      0014CA 26 00            [ 7] 4764 	ld	h, #0x00
      0014CC 29               [11] 4765 	add	hl, hl
      0014CD 29               [11] 4766 	add	hl, hl
      0014CE 29               [11] 4767 	add	hl, hl
      0014CF 11 F8 31         [10] 4768 	ld	de, #0x31f8
      0014D2 19               [11] 4769 	add	hl, de
      0014D3 11 08 00         [10] 4770 	ld	de, #0x0008
      0014D6 D5               [11] 4771 	push	de
      0014D7 C5               [11] 4772 	push	bc
      0014D8 E5               [11] 4773 	push	hl
      0014D9 CDr00r00         [17] 4774 	call	_LDIRVM
      0014DC 21 06 00         [10] 4775 	ld	hl, #6
      0014DF 39               [11] 4776 	add	hl, sp
      0014E0 F9               [ 6] 4777 	ld	sp, hl
                                   4778 ;src\/Graphics\Graphics.h:338: for(byte i = 0; i < 10; i++) {
      0014E1 DD 34 FF         [23] 4779 	inc	-1 (ix)
      0014E4 18 D7            [12] 4780 	jr	00131$
      0014E6                       4781 00108$:
                                   4782 ;src\/Graphics\Graphics.h:343: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      0014E6 21 38 00         [10] 4783 	ld	hl, #0x0038
      0014E9 E5               [11] 4784 	push	hl
      0014EA 21r70r07         [10] 4785 	ld	hl, #_color_title_1
      0014ED E5               [11] 4786 	push	hl
      0014EE 21 70 24         [10] 4787 	ld	hl, #0x2470
      0014F1 E5               [11] 4788 	push	hl
      0014F2 CDr00r00         [17] 4789 	call	_LDIRVM
      0014F5 21 06 00         [10] 4790 	ld	hl, #6
      0014F8 39               [11] 4791 	add	hl, sp
      0014F9 F9               [ 6] 4792 	ld	sp, hl
                                   4793 ;src\/Graphics\Graphics.h:351: ENASCR();	// Enable screen
      0014FA CDr00r00         [17] 4794 	call	_ENASCR
                                   4795 ;src\/Graphics\Graphics.h:352: }
      0014FD 33               [ 6] 4796 	inc	sp
      0014FE DD E1            [14] 4797 	pop	ix
      001500 C9               [10] 4798 	ret
                                   4799 ;src\/Graphics\Graphics.h:354: void DrawBlock(byte col, byte line, byte tile) {
                                   4800 ;	---------------------------------
                                   4801 ; Function DrawBlock
                                   4802 ; ---------------------------------
      001501                       4803 _DrawBlock::
      001501 DD E5            [15] 4804 	push	ix
      001503 DD 21 00 00      [14] 4805 	ld	ix,#0
      001507 DD 39            [15] 4806 	add	ix,sp
                                   4807 ;src\/Graphics\Graphics.h:356: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001509 DD 6E 04         [19] 4808 	ld	l, 4 (ix)
      00150C 26 00            [ 7] 4809 	ld	h, #0x00
      00150E 29               [11] 4810 	add	hl, hl
      00150F 4D               [ 4] 4811 	ld	c, l
      001510 44               [ 4] 4812 	ld	b, h
      001511 DD 6E 05         [19] 4813 	ld	l, 5 (ix)
      001514 26 00            [ 7] 4814 	ld	h, #0x00
      001516 29               [11] 4815 	add	hl, hl
      001517 29               [11] 4816 	add	hl, hl
      001518 29               [11] 4817 	add	hl, hl
      001519 29               [11] 4818 	add	hl, hl
      00151A 29               [11] 4819 	add	hl, hl
      00151B 29               [11] 4820 	add	hl, hl
      00151C 11 0A 18         [10] 4821 	ld	de, #0x180a
      00151F 19               [11] 4822 	add	hl, de
      001520 09               [11] 4823 	add	hl, bc
      001521 EB               [ 4] 4824 	ex	de, hl
                                   4825 ;src\/Graphics\Graphics.h:358: WRTVRM(baseAddr, tile);
      001522 D5               [11] 4826 	push	de
      001523 DD 7E 06         [19] 4827 	ld	a, 6 (ix)
      001526 F5               [11] 4828 	push	af
      001527 33               [ 6] 4829 	inc	sp
      001528 D5               [11] 4830 	push	de
      001529 CDr00r00         [17] 4831 	call	_WRTVRM
      00152C F1               [10] 4832 	pop	af
      00152D 33               [ 6] 4833 	inc	sp
      00152E D1               [10] 4834 	pop	de
                                   4835 ;src\/Graphics\Graphics.h:359: WRTVRM(baseAddr + 1, tile + 1);
      00152F DD 4E 06         [19] 4836 	ld	c, 6 (ix)
      001532 79               [ 4] 4837 	ld	a, c
      001533 3C               [ 4] 4838 	inc	a
      001534 6B               [ 4] 4839 	ld	l, e
      001535 62               [ 4] 4840 	ld	h, d
      001536 23               [ 6] 4841 	inc	hl
      001537 C5               [11] 4842 	push	bc
      001538 D5               [11] 4843 	push	de
      001539 F5               [11] 4844 	push	af
      00153A 33               [ 6] 4845 	inc	sp
      00153B E5               [11] 4846 	push	hl
      00153C CDr00r00         [17] 4847 	call	_WRTVRM
      00153F F1               [10] 4848 	pop	af
      001540 33               [ 6] 4849 	inc	sp
      001541 D1               [10] 4850 	pop	de
      001542 C1               [10] 4851 	pop	bc
                                   4852 ;src\/Graphics\Graphics.h:360: WRTVRM(baseAddr + 32, tile + 2);
      001543 41               [ 4] 4853 	ld	b, c
      001544 04               [ 4] 4854 	inc	b
      001545 04               [ 4] 4855 	inc	b
      001546 21 20 00         [10] 4856 	ld	hl, #0x0020
      001549 19               [11] 4857 	add	hl, de
      00154A C5               [11] 4858 	push	bc
      00154B D5               [11] 4859 	push	de
      00154C C5               [11] 4860 	push	bc
      00154D 33               [ 6] 4861 	inc	sp
      00154E E5               [11] 4862 	push	hl
      00154F CDr00r00         [17] 4863 	call	_WRTVRM
      001552 F1               [10] 4864 	pop	af
      001553 33               [ 6] 4865 	inc	sp
      001554 D1               [10] 4866 	pop	de
      001555 C1               [10] 4867 	pop	bc
                                   4868 ;src\/Graphics\Graphics.h:361: WRTVRM(baseAddr + 33, tile + 3);
      001556 0C               [ 4] 4869 	inc	c
      001557 0C               [ 4] 4870 	inc	c
      001558 0C               [ 4] 4871 	inc	c
      001559 21 21 00         [10] 4872 	ld	hl, #0x0021
      00155C 19               [11] 4873 	add	hl, de
      00155D 79               [ 4] 4874 	ld	a, c
      00155E F5               [11] 4875 	push	af
      00155F 33               [ 6] 4876 	inc	sp
      001560 E5               [11] 4877 	push	hl
      001561 CDr00r00         [17] 4878 	call	_WRTVRM
      001564 F1               [10] 4879 	pop	af
      001565 33               [ 6] 4880 	inc	sp
                                   4881 ;src\/Graphics\Graphics.h:362: }
      001566 DD E1            [14] 4882 	pop	ix
      001568 C9               [10] 4883 	ret
                                   4884 ;src\/Graphics\Graphics.h:364: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   4885 ;	---------------------------------
                                   4886 ; Function DrawBlock_SameTile
                                   4887 ; ---------------------------------
      001569                       4888 _DrawBlock_SameTile::
      001569 DD E5            [15] 4889 	push	ix
      00156B DD 21 00 00      [14] 4890 	ld	ix,#0
      00156F DD 39            [15] 4891 	add	ix,sp
                                   4892 ;src\/Graphics\Graphics.h:366: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001571 DD 6E 04         [19] 4893 	ld	l, 4 (ix)
      001574 26 00            [ 7] 4894 	ld	h, #0x00
      001576 29               [11] 4895 	add	hl, hl
      001577 4D               [ 4] 4896 	ld	c, l
      001578 44               [ 4] 4897 	ld	b, h
      001579 DD 6E 05         [19] 4898 	ld	l, 5 (ix)
      00157C 26 00            [ 7] 4899 	ld	h, #0x00
      00157E 29               [11] 4900 	add	hl, hl
      00157F 29               [11] 4901 	add	hl, hl
      001580 29               [11] 4902 	add	hl, hl
      001581 29               [11] 4903 	add	hl, hl
      001582 29               [11] 4904 	add	hl, hl
      001583 29               [11] 4905 	add	hl, hl
      001584 11 0A 18         [10] 4906 	ld	de, #0x180a
      001587 19               [11] 4907 	add	hl, de
      001588 09               [11] 4908 	add	hl, bc
      001589 EB               [ 4] 4909 	ex	de, hl
                                   4910 ;src\/Graphics\Graphics.h:368: WRTVRM(baseAddr, tile);
      00158A D5               [11] 4911 	push	de
      00158B DD 7E 06         [19] 4912 	ld	a, 6 (ix)
      00158E F5               [11] 4913 	push	af
      00158F 33               [ 6] 4914 	inc	sp
      001590 D5               [11] 4915 	push	de
      001591 CDr00r00         [17] 4916 	call	_WRTVRM
      001594 F1               [10] 4917 	pop	af
      001595 33               [ 6] 4918 	inc	sp
      001596 D1               [10] 4919 	pop	de
                                   4920 ;src\/Graphics\Graphics.h:369: WRTVRM(baseAddr + 1, tile);
      001597 4B               [ 4] 4921 	ld	c, e
      001598 42               [ 4] 4922 	ld	b, d
      001599 03               [ 6] 4923 	inc	bc
      00159A D5               [11] 4924 	push	de
      00159B DD 7E 06         [19] 4925 	ld	a, 6 (ix)
      00159E F5               [11] 4926 	push	af
      00159F 33               [ 6] 4927 	inc	sp
      0015A0 C5               [11] 4928 	push	bc
      0015A1 CDr00r00         [17] 4929 	call	_WRTVRM
      0015A4 F1               [10] 4930 	pop	af
      0015A5 33               [ 6] 4931 	inc	sp
      0015A6 D1               [10] 4932 	pop	de
                                   4933 ;src\/Graphics\Graphics.h:370: WRTVRM(baseAddr + 32, tile);
      0015A7 21 20 00         [10] 4934 	ld	hl, #0x0020
      0015AA 19               [11] 4935 	add	hl, de
      0015AB D5               [11] 4936 	push	de
      0015AC DD 7E 06         [19] 4937 	ld	a, 6 (ix)
      0015AF F5               [11] 4938 	push	af
      0015B0 33               [ 6] 4939 	inc	sp
      0015B1 E5               [11] 4940 	push	hl
      0015B2 CDr00r00         [17] 4941 	call	_WRTVRM
      0015B5 F1               [10] 4942 	pop	af
      0015B6 33               [ 6] 4943 	inc	sp
      0015B7 D1               [10] 4944 	pop	de
                                   4945 ;src\/Graphics\Graphics.h:371: WRTVRM(baseAddr + 33, tile);
      0015B8 21 21 00         [10] 4946 	ld	hl, #0x0021
      0015BB 19               [11] 4947 	add	hl, de
      0015BC DD 7E 06         [19] 4948 	ld	a, 6 (ix)
      0015BF F5               [11] 4949 	push	af
      0015C0 33               [ 6] 4950 	inc	sp
      0015C1 E5               [11] 4951 	push	hl
      0015C2 CDr00r00         [17] 4952 	call	_WRTVRM
      0015C5 F1               [10] 4953 	pop	af
      0015C6 33               [ 6] 4954 	inc	sp
                                   4955 ;src\/Graphics\Graphics.h:372: }
      0015C7 DD E1            [14] 4956 	pop	ix
      0015C9 C9               [10] 4957 	ret
                                   4958 ;src\/Graphics\Graphics.h:374: void DrawLine(byte line) {
                                   4959 ;	---------------------------------
                                   4960 ; Function DrawLine
                                   4961 ; ---------------------------------
      0015CA                       4962 _DrawLine::
      0015CA DD E5            [15] 4963 	push	ix
      0015CC DD 21 00 00      [14] 4964 	ld	ix,#0
      0015D0 DD 39            [15] 4965 	add	ix,sp
                                   4966 ;src\/Graphics\Graphics.h:375: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0015D2 DD 4E 04         [19] 4967 	ld	c, 4 (ix)
      0015D5 06 00            [ 7] 4968 	ld	b, #0x00
      0015D7                       4969 00103$:
      0015D7 78               [ 4] 4970 	ld	a, b
      0015D8 D6 06            [ 7] 4971 	sub	a, #0x06
      0015DA 30 23            [12] 4972 	jr	NC, 00105$
                                   4973 ;src\/Graphics\Graphics.h:376: DrawBlock(col, line, playfield[col][line]);
      0015DC 58               [ 4] 4974 	ld	e, b
      0015DD 16 00            [ 7] 4975 	ld	d, #0x00
      0015DF 6B               [ 4] 4976 	ld	l, e
      0015E0 62               [ 4] 4977 	ld	h, d
      0015E1 29               [11] 4978 	add	hl, hl
      0015E2 19               [11] 4979 	add	hl, de
      0015E3 29               [11] 4980 	add	hl, hl
      0015E4 29               [11] 4981 	add	hl, hl
      0015E5 11r00r00         [10] 4982 	ld	de, #_playfield
      0015E8 19               [11] 4983 	add	hl, de
      0015E9 59               [ 4] 4984 	ld	e, c
      0015EA 16 00            [ 7] 4985 	ld	d, #0x00
      0015EC 19               [11] 4986 	add	hl, de
      0015ED 7E               [ 7] 4987 	ld	a, (hl)
      0015EE C5               [11] 4988 	push	bc
      0015EF F5               [11] 4989 	push	af
      0015F0 33               [ 6] 4990 	inc	sp
      0015F1 79               [ 4] 4991 	ld	a, c
      0015F2 F5               [11] 4992 	push	af
      0015F3 33               [ 6] 4993 	inc	sp
      0015F4 C5               [11] 4994 	push	bc
      0015F5 33               [ 6] 4995 	inc	sp
      0015F6 CDr01r15         [17] 4996 	call	_DrawBlock
      0015F9 F1               [10] 4997 	pop	af
      0015FA 33               [ 6] 4998 	inc	sp
      0015FB C1               [10] 4999 	pop	bc
                                   5000 ;src\/Graphics\Graphics.h:375: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0015FC 04               [ 4] 5001 	inc	b
      0015FD 18 D8            [12] 5002 	jr	00103$
      0015FF                       5003 00105$:
                                   5004 ;src\/Graphics\Graphics.h:378: }
      0015FF DD E1            [14] 5005 	pop	ix
      001601 C9               [10] 5006 	ret
                                   5007 ;src\/Graphics\Graphics.h:380: void DrawPiece(byte line) {
                                   5008 ;	---------------------------------
                                   5009 ; Function DrawPiece
                                   5010 ; ---------------------------------
      001602                       5011 _DrawPiece::
                                   5012 ;src\/Graphics\Graphics.h:381: DrawLine(line);
      001602 21 02 00         [10] 5013 	ld	hl, #2
      001605 39               [11] 5014 	add	hl, sp
      001606 7E               [ 7] 5015 	ld	a, (hl)
      001607 F5               [11] 5016 	push	af
      001608 33               [ 6] 5017 	inc	sp
      001609 CDrCAr15         [17] 5018 	call	_DrawLine
      00160C 33               [ 6] 5019 	inc	sp
                                   5020 ;src\/Graphics\Graphics.h:382: DrawLine(line + 1);
      00160D 21 02 00         [10] 5021 	ld	hl, #2
      001610 39               [11] 5022 	add	hl, sp
      001611 46               [ 7] 5023 	ld	b, (hl)
      001612 78               [ 4] 5024 	ld	a, b
      001613 3C               [ 4] 5025 	inc	a
      001614 C5               [11] 5026 	push	bc
      001615 F5               [11] 5027 	push	af
      001616 33               [ 6] 5028 	inc	sp
      001617 CDrCAr15         [17] 5029 	call	_DrawLine
      00161A 33               [ 6] 5030 	inc	sp
      00161B C1               [10] 5031 	pop	bc
                                   5032 ;src\/Graphics\Graphics.h:383: DrawLine(line + 2);
      00161C 04               [ 4] 5033 	inc	b
      00161D 04               [ 4] 5034 	inc	b
      00161E C5               [11] 5035 	push	bc
      00161F 33               [ 6] 5036 	inc	sp
      001620 CDrCAr15         [17] 5037 	call	_DrawLine
      001623 33               [ 6] 5038 	inc	sp
                                   5039 ;src\/Graphics\Graphics.h:384: }
      001624 C9               [10] 5040 	ret
                                   5041 ;src\/Graphics\Graphics.h:386: void DrawPlayfield() {
                                   5042 ;	---------------------------------
                                   5043 ; Function DrawPlayfield
                                   5044 ; ---------------------------------
      001625                       5045 _DrawPlayfield::
                                   5046 ;src\/Graphics\Graphics.h:387: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001625 06 00            [ 7] 5047 	ld	b, #0x00
      001627                       5048 00103$:
      001627 78               [ 4] 5049 	ld	a, b
      001628 D6 0C            [ 7] 5050 	sub	a, #0x0c
      00162A D0               [11] 5051 	ret	NC
                                   5052 ;src\/Graphics\Graphics.h:388: DrawLine(line);
      00162B C5               [11] 5053 	push	bc
      00162C C5               [11] 5054 	push	bc
      00162D 33               [ 6] 5055 	inc	sp
      00162E CDrCAr15         [17] 5056 	call	_DrawLine
      001631 33               [ 6] 5057 	inc	sp
      001632 C1               [10] 5058 	pop	bc
                                   5059 ;src\/Graphics\Graphics.h:387: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001633 04               [ 4] 5060 	inc	b
                                   5061 ;src\/Graphics\Graphics.h:390: }
      001634 18 F1            [12] 5062 	jr	00103$
                                   5063 ;src\/Sound.h:1: void SoundFx_2() {
                                   5064 ;	---------------------------------
                                   5065 ; Function SoundFx_2
                                   5066 ; ---------------------------------
      001636                       5067 _SoundFx_2::
                                   5068 ;src\/Sound.h:2: GICINI();
      001636 CDr00r00         [17] 5069 	call	_GICINI
                                   5070 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001639 21 08 0F         [10] 5071 	ld	hl, #0x0f08
      00163C CDr00r00         [17] 5072 	call	_WRTPSG
                                   5073 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00163F 0E 00            [ 7] 5074 	ld	c, #0x00
      001641                       5075 00104$:
      001641 79               [ 4] 5076 	ld	a, c
      001642 D6 FF            [ 7] 5077 	sub	a, #0xff
      001644 30 11            [12] 5078 	jr	NC, 00101$
                                   5079 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001646 C5               [11] 5080 	push	bc
      001647 21 00 5D         [10] 5081 	ld	hl, #0x5d00
      00164A CDr00r00         [17] 5082 	call	_WRTPSG
      00164D 21 01 00         [10] 5083 	ld	hl, #0x0001
      001650 CDr00r00         [17] 5084 	call	_WRTPSG
      001653 C1               [10] 5085 	pop	bc
                                   5086 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001654 0C               [ 4] 5087 	inc	c
      001655 18 EA            [12] 5088 	jr	00104$
      001657                       5089 00101$:
                                   5090 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001657 0E 00            [ 7] 5091 	ld	c, #0x00
      001659                       5092 00107$:
      001659 79               [ 4] 5093 	ld	a, c
      00165A D6 FF            [ 7] 5094 	sub	a, #0xff
      00165C 30 11            [12] 5095 	jr	NC, 00102$
                                   5096 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      00165E C5               [11] 5097 	push	bc
      00165F 21 00 2D         [10] 5098 	ld	hl, #0x2d00
      001662 CDr00r00         [17] 5099 	call	_WRTPSG
      001665 21 01 00         [10] 5100 	ld	hl, #0x0001
      001668 CDr00r00         [17] 5101 	call	_WRTPSG
      00166B C1               [10] 5102 	pop	bc
                                   5103 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      00166C 0C               [ 4] 5104 	inc	c
      00166D 18 EA            [12] 5105 	jr	00107$
      00166F                       5106 00102$:
                                   5107 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      00166F 21 08 00         [10] 5108 	ld	hl, #0x0008
                                   5109 ;src\/Sound.h:30: }
      001672 C3r00r00         [10] 5110 	jp	_WRTPSG
                                   5111 ;src\/Sound.h:32: void SoundFx_1() {
                                   5112 ;	---------------------------------
                                   5113 ; Function SoundFx_1
                                   5114 ; ---------------------------------
      001675                       5115 _SoundFx_1::
                                   5116 ;src\/Sound.h:34: GICINI();
      001675 CDr00r00         [17] 5117 	call	_GICINI
                                   5118 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001678 21 06 97         [10] 5119 	ld	hl, #0x9706
      00167B CDr00r00         [17] 5120 	call	_WRTPSG
                                   5121 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      00167E 21 07 81         [10] 5122 	ld	hl, #0x8107
      001681 CDr00r00         [17] 5123 	call	_WRTPSG
                                   5124 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001684 21 08 10         [10] 5125 	ld	hl, #0x1008
      001687 CDr00r00         [17] 5126 	call	_WRTPSG
                                   5127 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      00168A 21 0C 13         [10] 5128 	ld	hl, #0x130c
      00168D CDr00r00         [17] 5129 	call	_WRTPSG
                                   5130 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001690 21 0D 01         [10] 5131 	ld	hl, #0x010d
                                   5132 ;src\/Sound.h:49: }
      001693 C3r00r00         [10] 5133 	jp	_WRTPSG
                                   5134 ;src\/CheckPlayfield.h:5: void CheckIfPlayfieldIsValid() {
                                   5135 ;	---------------------------------
                                   5136 ; Function CheckIfPlayfieldIsValid
                                   5137 ; ---------------------------------
      001696                       5138 _CheckIfPlayfieldIsValid::
      001696 DD E5            [15] 5139 	push	ix
      001698 DD 21 00 00      [14] 5140 	ld	ix,#0
      00169C DD 39            [15] 5141 	add	ix,sp
      00169E F5               [11] 5142 	push	af
      00169F F5               [11] 5143 	push	af
      0016A0 3B               [ 6] 5144 	dec	sp
                                   5145 ;src\/CheckPlayfield.h:6: bool found = FALSE;
      0016A1 DD 36 FB 00      [19] 5146 	ld	-5 (ix), #0
                                   5147 ;src\/CheckPlayfield.h:7: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016A5 DD 36 FC 00      [19] 5148 	ld	-4 (ix), #0
      0016A9 DD 36 FE 00      [19] 5149 	ld	-2 (ix), #0
      0016AD                       5150 00119$:
      0016AD DD 7E FE         [19] 5151 	ld	a, -2 (ix)
      0016B0 D6 0C            [ 7] 5152 	sub	a, #0x0c
      0016B2 D2r45r17         [10] 5153 	jp	NC, 00121$
                                   5154 ;src\/CheckPlayfield.h:8: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016B5 DD 36 FD 00      [19] 5155 	ld	-3 (ix), #0
      0016B9 DD 36 FF 00      [19] 5156 	ld	-1 (ix), #0
      0016BD                       5157 00116$:
      0016BD DD 7E FF         [19] 5158 	ld	a, -1 (ix)
      0016C0 D6 06            [ 7] 5159 	sub	a, #0x06
      0016C2 30 75            [12] 5160 	jr	NC, 00120$
                                   5161 ;src\/CheckPlayfield.h:9: for(byte item = 0; item < 5; item++) {
      0016C4 0E 00            [ 7] 5162 	ld	c, #0x00
      0016C6                       5163 00113$:
      0016C6 79               [ 4] 5164 	ld	a, c
      0016C7 D6 05            [ 7] 5165 	sub	a, #0x05
      0016C9 30 33            [12] 5166 	jr	NC, 00104$
                                   5167 ;src\/CheckPlayfield.h:10: found = FALSE;
      0016CB DD 36 FB 00      [19] 5168 	ld	-5 (ix), #0
                                   5169 ;src\/CheckPlayfield.h:11: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      0016CF DD 5E FF         [19] 5170 	ld	e, -1 (ix)
      0016D2 16 00            [ 7] 5171 	ld	d, #0x00
      0016D4 6B               [ 4] 5172 	ld	l, e
      0016D5 62               [ 4] 5173 	ld	h, d
      0016D6 29               [11] 5174 	add	hl, hl
      0016D7 19               [11] 5175 	add	hl, de
      0016D8 29               [11] 5176 	add	hl, hl
      0016D9 29               [11] 5177 	add	hl, hl
      0016DA 11r48r00         [10] 5178 	ld	de, #_playfieldTemp
      0016DD 19               [11] 5179 	add	hl, de
      0016DE 7D               [ 4] 5180 	ld	a, l
      0016DF DD 86 FE         [19] 5181 	add	a, -2 (ix)
      0016E2 5F               [ 4] 5182 	ld	e, a
      0016E3 7C               [ 4] 5183 	ld	a, h
      0016E4 CE 00            [ 7] 5184 	adc	a, #0x00
      0016E6 57               [ 4] 5185 	ld	d, a
      0016E7 21r18r00         [10] 5186 	ld	hl, #_pieces
      0016EA 06 00            [ 7] 5187 	ld	b, #0x00
      0016EC 09               [11] 5188 	add	hl, bc
      0016ED 46               [ 7] 5189 	ld	b, (hl)
      0016EE 1A               [ 7] 5190 	ld	a, (de)
      0016EF B8               [ 4] 5191 	cp	a, b
      0016F0 28 03            [12] 5192 	jr	Z, 00101$
      0016F2 B7               [ 4] 5193 	or	a, a
      0016F3 20 06            [12] 5194 	jr	NZ, 00114$
      0016F5                       5195 00101$:
                                   5196 ;src\/CheckPlayfield.h:12: found = TRUE;
      0016F5 DD 36 FB 01      [19] 5197 	ld	-5 (ix), #0x01
                                   5198 ;src\/CheckPlayfield.h:13: break;
      0016F9 18 03            [12] 5199 	jr	00104$
      0016FB                       5200 00114$:
                                   5201 ;src\/CheckPlayfield.h:9: for(byte item = 0; item < 5; item++) {
      0016FB 0C               [ 4] 5202 	inc	c
      0016FC 18 C8            [12] 5203 	jr	00113$
      0016FE                       5204 00104$:
                                   5205 ;src\/CheckPlayfield.h:16: if(!found) {
      0016FE DD 7E FB         [19] 5206 	ld	a, -5 (ix)
      001701 B7               [ 4] 5207 	or	a, a
      001702 20 2A            [12] 5208 	jr	NZ, 00117$
                                   5209 ;src\/CheckPlayfield.h:17: d_col = col;
      001704 DD 7E FD         [19] 5210 	ld	a, -3 (ix)
      001707 32r09r00         [13] 5211 	ld	(#_d_col),a
                                   5212 ;src\/CheckPlayfield.h:18: d_line = line;
      00170A DD 7E FC         [19] 5213 	ld	a, -4 (ix)
      00170D 32r0Ar00         [13] 5214 	ld	(#_d_line),a
                                   5215 ;src\/CheckPlayfield.h:19: d_value = playfieldTemp[col][line];
      001710 DD 4E FD         [19] 5216 	ld	c, -3 (ix)
      001713 06 00            [ 7] 5217 	ld	b, #0x00
      001715 69               [ 4] 5218 	ld	l, c
      001716 60               [ 4] 5219 	ld	h, b
      001717 29               [11] 5220 	add	hl, hl
      001718 09               [11] 5221 	add	hl, bc
      001719 29               [11] 5222 	add	hl, hl
      00171A 29               [11] 5223 	add	hl, hl
      00171B 11r48r00         [10] 5224 	ld	de, #_playfieldTemp
      00171E 19               [11] 5225 	add	hl, de
      00171F DD 5E FC         [19] 5226 	ld	e, -4 (ix)
      001722 16 00            [ 7] 5227 	ld	d, #0x00
      001724 19               [11] 5228 	add	hl, de
      001725 7E               [ 7] 5229 	ld	a, (hl)
      001726 32r0Br00         [13] 5230 	ld	(_d_value+0), a
                                   5231 ;src\/CheckPlayfield.h:21: while(1) { 
      001729                       5232 00106$:
                                   5233 ;src\/CheckPlayfield.h:22: BEEP();
      001729 CDr00r00         [17] 5234 	call	_BEEP
      00172C 18 FB            [12] 5235 	jr	00106$
      00172E                       5236 00117$:
                                   5237 ;src\/CheckPlayfield.h:8: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00172E DD 34 FF         [23] 5238 	inc	-1 (ix)
      001731 DD 7E FF         [19] 5239 	ld	a, -1 (ix)
      001734 DD 77 FD         [19] 5240 	ld	-3 (ix), a
      001737 18 84            [12] 5241 	jr	00116$
      001739                       5242 00120$:
                                   5243 ;src\/CheckPlayfield.h:7: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001739 DD 34 FE         [23] 5244 	inc	-2 (ix)
      00173C DD 7E FE         [19] 5245 	ld	a, -2 (ix)
      00173F DD 77 FC         [19] 5246 	ld	-4 (ix), a
      001742 C3rADr16         [10] 5247 	jp	00119$
      001745                       5248 00121$:
                                   5249 ;src\/CheckPlayfield.h:28: }
      001745 DD F9            [10] 5250 	ld	sp, ix
      001747 DD E1            [14] 5251 	pop	ix
      001749 C9               [10] 5252 	ret
                                   5253 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5254 ;	---------------------------------
                                   5255 ; Function CheckPlayfield
                                   5256 ; ---------------------------------
      00174A                       5257 _CheckPlayfield::
      00174A DD E5            [15] 5258 	push	ix
      00174C DD 21 00 00      [14] 5259 	ld	ix,#0
      001750 DD 39            [15] 5260 	add	ix,sp
      001752 21 EF FF         [10] 5261 	ld	hl, #-17
      001755 39               [11] 5262 	add	hl, sp
      001756 F9               [ 6] 5263 	ld	sp, hl
                                   5264 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001757 DD 36 EF 00      [19] 5265 	ld	-17 (ix), #0
                                   5266 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00175B 0E 00            [ 7] 5267 	ld	c, #0x00
      00175D                       5268 00195$:
      00175D 79               [ 4] 5269 	ld	a, c
      00175E D6 0C            [ 7] 5270 	sub	a, #0x0c
      001760 30 36            [12] 5271 	jr	NC, 00102$
                                   5272 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001762 DD 36 FF 00      [19] 5273 	ld	-1 (ix), #0
      001766                       5274 00192$:
      001766 DD 7E FF         [19] 5275 	ld	a, -1 (ix)
      001769 D6 06            [ 7] 5276 	sub	a, #0x06
      00176B 30 28            [12] 5277 	jr	NC, 00196$
                                   5278 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      00176D DD 5E FF         [19] 5279 	ld	e, -1 (ix)
      001770 16 00            [ 7] 5280 	ld	d, #0x00
      001772 6B               [ 4] 5281 	ld	l, e
      001773 62               [ 4] 5282 	ld	h, d
      001774 29               [11] 5283 	add	hl, hl
      001775 19               [11] 5284 	add	hl, de
      001776 29               [11] 5285 	add	hl, hl
      001777 29               [11] 5286 	add	hl, hl
      001778 EB               [ 4] 5287 	ex	de, hl
      001779 21r48r00         [10] 5288 	ld	hl, #_playfieldTemp
      00177C 19               [11] 5289 	add	hl, de
      00177D 06 00            [ 7] 5290 	ld	b, #0x00
      00177F 09               [11] 5291 	add	hl, bc
      001780 3Er00            [ 7] 5292 	ld	a, #<(_playfield)
      001782 83               [ 4] 5293 	add	a, e
      001783 5F               [ 4] 5294 	ld	e, a
      001784 3Es00            [ 7] 5295 	ld	a, #>(_playfield)
      001786 8A               [ 4] 5296 	adc	a, d
      001787 57               [ 4] 5297 	ld	d, a
      001788 7B               [ 4] 5298 	ld	a, e
      001789 81               [ 4] 5299 	add	a, c
      00178A 5F               [ 4] 5300 	ld	e, a
      00178B 30 01            [12] 5301 	jr	NC, 00614$
      00178D 14               [ 4] 5302 	inc	d
      00178E                       5303 00614$:
      00178E 1A               [ 7] 5304 	ld	a, (de)
      00178F 77               [ 7] 5305 	ld	(hl), a
                                   5306 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001790 DD 34 FF         [23] 5307 	inc	-1 (ix)
      001793 18 D1            [12] 5308 	jr	00192$
      001795                       5309 00196$:
                                   5310 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001795 0C               [ 4] 5311 	inc	c
      001796 18 C5            [12] 5312 	jr	00195$
      001798                       5313 00102$:
                                   5314 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001798 DD 36 FE 00      [19] 5315 	ld	-2 (ix), #0
      00179C                       5316 00201$:
      00179C DD 7E FE         [19] 5317 	ld	a, -2 (ix)
      00179F D6 0C            [ 7] 5318 	sub	a, #0x0c
      0017A1 D2rA0r18         [10] 5319 	jp	NC, 00108$
                                   5320 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0017A4 DD 36 FF 02      [19] 5321 	ld	-1 (ix), #0x02
      0017A8                       5322 00198$:
      0017A8 DD 7E FF         [19] 5323 	ld	a, -1 (ix)
      0017AB D6 06            [ 7] 5324 	sub	a, #0x06
      0017AD D2r9Ar18         [10] 5325 	jp	NC, 00202$
                                   5326 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      0017B0 DD 4E FF         [19] 5327 	ld	c, -1 (ix)
      0017B3 06 00            [ 7] 5328 	ld	b, #0x00
      0017B5 69               [ 4] 5329 	ld	l, c
      0017B6 60               [ 4] 5330 	ld	h, b
      0017B7 29               [11] 5331 	add	hl, hl
      0017B8 09               [11] 5332 	add	hl, bc
      0017B9 29               [11] 5333 	add	hl, hl
      0017BA 29               [11] 5334 	add	hl, hl
      0017BB DD 75 F5         [19] 5335 	ld	-11 (ix), l
      0017BE DD 74 F6         [19] 5336 	ld	-10 (ix), h
      0017C1 3Er48            [ 7] 5337 	ld	a, #<(_playfieldTemp)
      0017C3 DD 86 F5         [19] 5338 	add	a, -11 (ix)
      0017C6 4F               [ 4] 5339 	ld	c, a
      0017C7 3Es00            [ 7] 5340 	ld	a, #>(_playfieldTemp)
      0017C9 DD 8E F6         [19] 5341 	adc	a, -10 (ix)
      0017CC 47               [ 4] 5342 	ld	b, a
      0017CD 79               [ 4] 5343 	ld	a, c
      0017CE DD 86 FE         [19] 5344 	add	a, -2 (ix)
      0017D1 DD 77 F7         [19] 5345 	ld	-9 (ix), a
      0017D4 78               [ 4] 5346 	ld	a, b
      0017D5 CE 00            [ 7] 5347 	adc	a, #0x00
      0017D7 DD 77 F8         [19] 5348 	ld	-8 (ix), a
      0017DA DD 6E F7         [19] 5349 	ld	l, -9 (ix)
      0017DD DD 66 F8         [19] 5350 	ld	h, -8 (ix)
      0017E0 7E               [ 7] 5351 	ld	a, (hl)
      0017E1 DD 77 F9         [19] 5352 	ld	-7 (ix), a
      0017E4 B7               [ 4] 5353 	or	a, a
      0017E5 CAr94r18         [10] 5354 	jp	Z, 00199$
                                   5355 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      0017E8 DD 7E FF         [19] 5356 	ld	a, -1 (ix)
      0017EB DD 77 FD         [19] 5357 	ld	-3 (ix), a
      0017EE 4F               [ 4] 5358 	ld	c, a
      0017EF 0D               [ 4] 5359 	dec	c
      0017F0 0D               [ 4] 5360 	dec	c
      0017F1 79               [ 4] 5361 	ld	a, c
      0017F2 07               [ 4] 5362 	rlca
      0017F3 9F               [ 4] 5363 	sbc	a, a
      0017F4 47               [ 4] 5364 	ld	b, a
      0017F5 69               [ 4] 5365 	ld	l, c
      0017F6 60               [ 4] 5366 	ld	h, b
      0017F7 29               [11] 5367 	add	hl, hl
      0017F8 09               [11] 5368 	add	hl, bc
      0017F9 29               [11] 5369 	add	hl, hl
      0017FA 29               [11] 5370 	add	hl, hl
      0017FB EB               [ 4] 5371 	ex	de, hl
      0017FC 21r48r00         [10] 5372 	ld	hl, #_playfieldTemp
      0017FF 19               [11] 5373 	add	hl, de
      001800 7D               [ 4] 5374 	ld	a, l
      001801 DD 86 FE         [19] 5375 	add	a, -2 (ix)
      001804 DD 77 FA         [19] 5376 	ld	-6 (ix), a
      001807 7C               [ 4] 5377 	ld	a, h
      001808 CE 00            [ 7] 5378 	adc	a, #0x00
      00180A DD 77 FB         [19] 5379 	ld	-5 (ix), a
      00180D DD 4E FD         [19] 5380 	ld	c, -3 (ix)
      001810 0D               [ 4] 5381 	dec	c
      001811 79               [ 4] 5382 	ld	a, c
      001812 07               [ 4] 5383 	rlca
      001813 9F               [ 4] 5384 	sbc	a, a
      001814 47               [ 4] 5385 	ld	b, a
      001815 69               [ 4] 5386 	ld	l, c
      001816 60               [ 4] 5387 	ld	h, b
      001817 29               [11] 5388 	add	hl, hl
      001818 09               [11] 5389 	add	hl, bc
      001819 29               [11] 5390 	add	hl, hl
      00181A 29               [11] 5391 	add	hl, hl
      00181B DD 75 FC         [19] 5392 	ld	-4 (ix), l
      00181E DD 74 FD         [19] 5393 	ld	-3 (ix), h
      001821 3Er48            [ 7] 5394 	ld	a, #<(_playfieldTemp)
      001823 DD 86 FC         [19] 5395 	add	a, -4 (ix)
      001826 4F               [ 4] 5396 	ld	c, a
      001827 3Es00            [ 7] 5397 	ld	a, #>(_playfieldTemp)
      001829 DD 8E FD         [19] 5398 	adc	a, -3 (ix)
      00182C 47               [ 4] 5399 	ld	b, a
      00182D 79               [ 4] 5400 	ld	a, c
      00182E DD 86 FE         [19] 5401 	add	a, -2 (ix)
      001831 4F               [ 4] 5402 	ld	c, a
      001832 30 01            [12] 5403 	jr	NC, 00615$
      001834 04               [ 4] 5404 	inc	b
      001835                       5405 00615$:
      001835 DD 6E FA         [19] 5406 	ld	l, -6 (ix)
      001838 DD 66 FB         [19] 5407 	ld	h, -5 (ix)
      00183B 6E               [ 7] 5408 	ld	l, (hl)
      00183C 0A               [ 7] 5409 	ld	a, (bc)
      00183D 67               [ 4] 5410 	ld	h, a
      00183E 7D               [ 4] 5411 	ld	a, l
      00183F 94               [ 4] 5412 	sub	a, h
      001840 20 52            [12] 5413 	jr	NZ, 00199$
                                   5414 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      001842 DD 7E F9         [19] 5415 	ld	a, -7 (ix)
      001845 94               [ 4] 5416 	sub	a, h
      001846 20 4C            [12] 5417 	jr	NZ, 00199$
                                   5418 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      001848 DD 36 EF 01      [19] 5419 	ld	-17 (ix), #0x01
                                   5420 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      00184C 3Er00            [ 7] 5421 	ld	a, #<(_playfield)
      00184E 83               [ 4] 5422 	add	a, e
      00184F 5F               [ 4] 5423 	ld	e, a
      001850 3Es00            [ 7] 5424 	ld	a, #>(_playfield)
      001852 8A               [ 4] 5425 	adc	a, d
      001853 57               [ 4] 5426 	ld	d, a
      001854 7B               [ 4] 5427 	ld	a, e
      001855 DD 86 FE         [19] 5428 	add	a, -2 (ix)
      001858 5F               [ 4] 5429 	ld	e, a
      001859 30 01            [12] 5430 	jr	NC, 00620$
      00185B 14               [ 4] 5431 	inc	d
      00185C                       5432 00620$:
      00185C 7D               [ 4] 5433 	ld	a, l
      00185D CB FF            [ 8] 5434 	set	7, a
      00185F 12               [ 7] 5435 	ld	(de), a
                                   5436 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001860 3Er00            [ 7] 5437 	ld	a, #<(_playfield)
      001862 DD 86 FC         [19] 5438 	add	a, -4 (ix)
      001865 5F               [ 4] 5439 	ld	e, a
      001866 3Es00            [ 7] 5440 	ld	a, #>(_playfield)
      001868 DD 8E FD         [19] 5441 	adc	a, -3 (ix)
      00186B 57               [ 4] 5442 	ld	d, a
      00186C DD 6E FE         [19] 5443 	ld	l, -2 (ix)
      00186F 26 00            [ 7] 5444 	ld	h, #0x00
      001871 19               [11] 5445 	add	hl, de
      001872 0A               [ 7] 5446 	ld	a, (bc)
      001873 CB FF            [ 8] 5447 	set	7, a
      001875 77               [ 7] 5448 	ld	(hl), a
                                   5449 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001876 3Er00            [ 7] 5450 	ld	a, #<(_playfield)
      001878 DD 86 F5         [19] 5451 	add	a, -11 (ix)
      00187B 4F               [ 4] 5452 	ld	c, a
      00187C 3Es00            [ 7] 5453 	ld	a, #>(_playfield)
      00187E DD 8E F6         [19] 5454 	adc	a, -10 (ix)
      001881 47               [ 4] 5455 	ld	b, a
      001882 79               [ 4] 5456 	ld	a, c
      001883 DD 86 FE         [19] 5457 	add	a, -2 (ix)
      001886 4F               [ 4] 5458 	ld	c, a
      001887 30 01            [12] 5459 	jr	NC, 00621$
      001889 04               [ 4] 5460 	inc	b
      00188A                       5461 00621$:
      00188A DD 6E F7         [19] 5462 	ld	l, -9 (ix)
      00188D DD 66 F8         [19] 5463 	ld	h, -8 (ix)
      001890 7E               [ 7] 5464 	ld	a, (hl)
      001891 CB FF            [ 8] 5465 	set	7, a
      001893 02               [ 7] 5466 	ld	(bc), a
      001894                       5467 00199$:
                                   5468 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001894 DD 34 FF         [23] 5469 	inc	-1 (ix)
      001897 C3rA8r17         [10] 5470 	jp	00198$
      00189A                       5471 00202$:
                                   5472 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00189A DD 34 FE         [23] 5473 	inc	-2 (ix)
      00189D C3r9Cr17         [10] 5474 	jp	00201$
      0018A0                       5475 00108$:
                                   5476 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0018A0 0E 02            [ 7] 5477 	ld	c, #0x02
      0018A2                       5478 00207$:
      0018A2 79               [ 4] 5479 	ld	a, c
      0018A3 D6 0C            [ 7] 5480 	sub	a, #0x0c
      0018A5 D2r67r19         [10] 5481 	jp	NC, 00114$
                                   5482 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018A8 DD 36 FF 00      [19] 5483 	ld	-1 (ix), #0
      0018AC                       5484 00204$:
      0018AC DD 7E FF         [19] 5485 	ld	a, -1 (ix)
      0018AF D6 06            [ 7] 5486 	sub	a, #0x06
      0018B1 D2r63r19         [10] 5487 	jp	NC, 00208$
                                   5488 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      0018B4 DD 5E FF         [19] 5489 	ld	e, -1 (ix)
      0018B7 16 00            [ 7] 5490 	ld	d, #0x00
      0018B9 6B               [ 4] 5491 	ld	l, e
      0018BA 62               [ 4] 5492 	ld	h, d
      0018BB 29               [11] 5493 	add	hl, hl
      0018BC 19               [11] 5494 	add	hl, de
      0018BD 29               [11] 5495 	add	hl, hl
      0018BE 29               [11] 5496 	add	hl, hl
      0018BF DD 75 F7         [19] 5497 	ld	-9 (ix), l
      0018C2 DD 74 F8         [19] 5498 	ld	-8 (ix), h
      0018C5 3Er48            [ 7] 5499 	ld	a, #<(_playfieldTemp)
      0018C7 DD 86 F7         [19] 5500 	add	a, -9 (ix)
      0018CA 5F               [ 4] 5501 	ld	e, a
      0018CB 3Es00            [ 7] 5502 	ld	a, #>(_playfieldTemp)
      0018CD DD 8E F8         [19] 5503 	adc	a, -8 (ix)
      0018D0 57               [ 4] 5504 	ld	d, a
      0018D1 7B               [ 4] 5505 	ld	a, e
      0018D2 81               [ 4] 5506 	add	a, c
      0018D3 DD 77 F9         [19] 5507 	ld	-7 (ix), a
      0018D6 7A               [ 4] 5508 	ld	a, d
      0018D7 CE 00            [ 7] 5509 	adc	a, #0x00
      0018D9 DD 77 FA         [19] 5510 	ld	-6 (ix), a
      0018DC DD 6E F9         [19] 5511 	ld	l, -7 (ix)
      0018DF DD 66 FA         [19] 5512 	ld	h, -6 (ix)
      0018E2 7E               [ 7] 5513 	ld	a, (hl)
      0018E3 DD 77 FE         [19] 5514 	ld	-2 (ix), a
      0018E6 B7               [ 4] 5515 	or	a, a
      0018E7 28 74            [12] 5516 	jr	Z, 00205$
                                   5517 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      0018E9 DD 71 FD         [19] 5518 	ld	-3 (ix), c
      0018EC 79               [ 4] 5519 	ld	a, c
      0018ED C6 FE            [ 7] 5520 	add	a, #0xfe
      0018EF DD 77 FB         [19] 5521 	ld	-5 (ix), a
      0018F2 6F               [ 4] 5522 	ld	l, a
      0018F3 26 00            [ 7] 5523 	ld	h, #0x00
      0018F5 19               [11] 5524 	add	hl, de
      0018F6 DD 46 FD         [19] 5525 	ld	b, -3 (ix)
      0018F9 05               [ 4] 5526 	dec	b
      0018FA 7B               [ 4] 5527 	ld	a, e
      0018FB 80               [ 4] 5528 	add	a, b
      0018FC 5F               [ 4] 5529 	ld	e, a
      0018FD 30 01            [12] 5530 	jr	NC, 00622$
      0018FF 14               [ 4] 5531 	inc	d
      001900                       5532 00622$:
      001900 7E               [ 7] 5533 	ld	a, (hl)
      001901 DD 77 FC         [19] 5534 	ld	-4 (ix), a
      001904 1A               [ 7] 5535 	ld	a, (de)
      001905 6F               [ 4] 5536 	ld	l, a
      001906 DD 7E FC         [19] 5537 	ld	a, -4 (ix)
      001909 95               [ 4] 5538 	sub	a, l
      00190A 20 51            [12] 5539 	jr	NZ, 00205$
                                   5540 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      00190C DD 7E FE         [19] 5541 	ld	a, -2 (ix)
      00190F 95               [ 4] 5542 	sub	a, l
      001910 20 4B            [12] 5543 	jr	NZ, 00205$
                                   5544 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      001912 DD 36 EF 01      [19] 5545 	ld	-17 (ix), #0x01
                                   5546 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001916 3Er00            [ 7] 5547 	ld	a, #<(_playfield)
      001918 DD 86 F7         [19] 5548 	add	a, -9 (ix)
      00191B DD 77 FD         [19] 5549 	ld	-3 (ix), a
      00191E 3Es00            [ 7] 5550 	ld	a, #>(_playfield)
      001920 DD 8E F8         [19] 5551 	adc	a, -8 (ix)
      001923 DD 77 FE         [19] 5552 	ld	-2 (ix), a
      001926 DD 7E FD         [19] 5553 	ld	a, -3 (ix)
      001929 DD 86 FB         [19] 5554 	add	a, -5 (ix)
      00192C 6F               [ 4] 5555 	ld	l, a
      00192D DD 7E FE         [19] 5556 	ld	a, -2 (ix)
      001930 CE 00            [ 7] 5557 	adc	a, #0x00
      001932 67               [ 4] 5558 	ld	h, a
      001933 DD 7E FC         [19] 5559 	ld	a, -4 (ix)
      001936 CB FF            [ 8] 5560 	set	7, a
      001938 77               [ 7] 5561 	ld	(hl), a
                                   5562 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001939 DD 7E FD         [19] 5563 	ld	a, -3 (ix)
      00193C 80               [ 4] 5564 	add	a, b
      00193D 6F               [ 4] 5565 	ld	l, a
      00193E DD 7E FE         [19] 5566 	ld	a, -2 (ix)
      001941 CE 00            [ 7] 5567 	adc	a, #0x00
      001943 67               [ 4] 5568 	ld	h, a
      001944 1A               [ 7] 5569 	ld	a, (de)
      001945 CB FF            [ 8] 5570 	set	7, a
      001947 77               [ 7] 5571 	ld	(hl), a
                                   5572 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001948 DD 7E FD         [19] 5573 	ld	a, -3 (ix)
      00194B 81               [ 4] 5574 	add	a, c
      00194C 5F               [ 4] 5575 	ld	e, a
      00194D DD 7E FE         [19] 5576 	ld	a, -2 (ix)
      001950 CE 00            [ 7] 5577 	adc	a, #0x00
      001952 57               [ 4] 5578 	ld	d, a
      001953 DD 6E F9         [19] 5579 	ld	l, -7 (ix)
      001956 DD 66 FA         [19] 5580 	ld	h, -6 (ix)
      001959 7E               [ 7] 5581 	ld	a, (hl)
      00195A CB FF            [ 8] 5582 	set	7, a
      00195C 12               [ 7] 5583 	ld	(de), a
      00195D                       5584 00205$:
                                   5585 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00195D DD 34 FF         [23] 5586 	inc	-1 (ix)
      001960 C3rACr18         [10] 5587 	jp	00204$
      001963                       5588 00208$:
                                   5589 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001963 0C               [ 4] 5590 	inc	c
      001964 C3rA2r18         [10] 5591 	jp	00207$
      001967                       5592 00114$:
                                   5593 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001967 DD 36 FE 02      [19] 5594 	ld	-2 (ix), #0x02
      00196B                       5595 00213$:
      00196B DD 7E FE         [19] 5596 	ld	a, -2 (ix)
      00196E D6 0C            [ 7] 5597 	sub	a, #0x0c
      001970 D2r0Er1B         [10] 5598 	jp	NC, 00124$
                                   5599 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001973 DD 36 FF 02      [19] 5600 	ld	-1 (ix), #0x02
      001977                       5601 00210$:
      001977 DD 7E FF         [19] 5602 	ld	a, -1 (ix)
      00197A D6 06            [ 7] 5603 	sub	a, #0x06
      00197C D2r08r1B         [10] 5604 	jp	NC, 00214$
                                   5605 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      00197F DD 4E FF         [19] 5606 	ld	c, -1 (ix)
      001982 06 00            [ 7] 5607 	ld	b, #0x00
      001984 69               [ 4] 5608 	ld	l, c
      001985 60               [ 4] 5609 	ld	h, b
      001986 29               [11] 5610 	add	hl, hl
      001987 09               [11] 5611 	add	hl, bc
      001988 29               [11] 5612 	add	hl, hl
      001989 29               [11] 5613 	add	hl, hl
      00198A DD 75 F0         [19] 5614 	ld	-16 (ix), l
      00198D DD 74 F1         [19] 5615 	ld	-15 (ix), h
      001990 3Er48            [ 7] 5616 	ld	a, #<(_playfieldTemp)
      001992 DD 86 F0         [19] 5617 	add	a, -16 (ix)
      001995 4F               [ 4] 5618 	ld	c, a
      001996 3Es00            [ 7] 5619 	ld	a, #>(_playfieldTemp)
      001998 DD 8E F1         [19] 5620 	adc	a, -15 (ix)
      00199B 47               [ 4] 5621 	ld	b, a
      00199C 79               [ 4] 5622 	ld	a, c
      00199D DD 86 FE         [19] 5623 	add	a, -2 (ix)
      0019A0 DD 77 F2         [19] 5624 	ld	-14 (ix), a
      0019A3 78               [ 4] 5625 	ld	a, b
      0019A4 CE 00            [ 7] 5626 	adc	a, #0x00
      0019A6 DD 77 F3         [19] 5627 	ld	-13 (ix), a
      0019A9 DD 6E F2         [19] 5628 	ld	l, -14 (ix)
      0019AC DD 66 F3         [19] 5629 	ld	h, -13 (ix)
      0019AF 5E               [ 7] 5630 	ld	e, (hl)
                                   5631 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0019B0 DD 56 FF         [19] 5632 	ld	d, -1 (ix)
      0019B3 DD 66 FE         [19] 5633 	ld	h, -2 (ix)
      0019B6 6A               [ 4] 5634 	ld	l, d
      0019B7 2D               [ 4] 5635 	dec	l
      0019B8 2D               [ 4] 5636 	dec	l
      0019B9 7C               [ 4] 5637 	ld	a, h
      0019BA C6 FE            [ 7] 5638 	add	a, #0xfe
      0019BC DD 77 F4         [19] 5639 	ld	-12 (ix), a
      0019BF 15               [ 4] 5640 	dec	d
      0019C0 7C               [ 4] 5641 	ld	a, h
      0019C1 C6 FF            [ 7] 5642 	add	a, #0xff
      0019C3 DD 77 F5         [19] 5643 	ld	-11 (ix), a
      0019C6 D5               [11] 5644 	push	de
      0019C7 5D               [ 4] 5645 	ld	e, l
      0019C8 7B               [ 4] 5646 	ld	a, e
      0019C9 07               [ 4] 5647 	rlca
      0019CA 9F               [ 4] 5648 	sbc	a, a
      0019CB 57               [ 4] 5649 	ld	d, a
      0019CC 6B               [ 4] 5650 	ld	l, e
      0019CD 62               [ 4] 5651 	ld	h, d
      0019CE 29               [11] 5652 	add	hl, hl
      0019CF 19               [11] 5653 	add	hl, de
      0019D0 29               [11] 5654 	add	hl, hl
      0019D1 29               [11] 5655 	add	hl, hl
      0019D2 D1               [10] 5656 	pop	de
      0019D3 DD 75 F6         [19] 5657 	ld	-10 (ix), l
      0019D6 DD 74 F7         [19] 5658 	ld	-9 (ix), h
      0019D9 D5               [11] 5659 	push	de
      0019DA 5A               [ 4] 5660 	ld	e, d
      0019DB 7B               [ 4] 5661 	ld	a, e
      0019DC 07               [ 4] 5662 	rlca
      0019DD 9F               [ 4] 5663 	sbc	a, a
      0019DE 57               [ 4] 5664 	ld	d, a
      0019DF 6B               [ 4] 5665 	ld	l, e
      0019E0 62               [ 4] 5666 	ld	h, d
      0019E1 29               [11] 5667 	add	hl, hl
      0019E2 19               [11] 5668 	add	hl, de
      0019E3 29               [11] 5669 	add	hl, hl
      0019E4 29               [11] 5670 	add	hl, hl
      0019E5 D1               [10] 5671 	pop	de
      0019E6 DD 75 F8         [19] 5672 	ld	-8 (ix), l
      0019E9 DD 74 F9         [19] 5673 	ld	-7 (ix), h
      0019EC 3Er48            [ 7] 5674 	ld	a, #<(_playfieldTemp)
      0019EE DD 86 F6         [19] 5675 	add	a, -10 (ix)
      0019F1 DD 77 FA         [19] 5676 	ld	-6 (ix), a
      0019F4 3Es00            [ 7] 5677 	ld	a, #>(_playfieldTemp)
      0019F6 DD 8E F7         [19] 5678 	adc	a, -9 (ix)
      0019F9 DD 77 FB         [19] 5679 	ld	-5 (ix), a
      0019FC 3Er48            [ 7] 5680 	ld	a, #<(_playfieldTemp)
      0019FE DD 86 F8         [19] 5681 	add	a, -8 (ix)
      001A01 57               [ 4] 5682 	ld	d, a
      001A02 3Es00            [ 7] 5683 	ld	a, #>(_playfieldTemp)
      001A04 DD 8E F9         [19] 5684 	adc	a, -7 (ix)
      001A07 6F               [ 4] 5685 	ld	l, a
      001A08 7A               [ 4] 5686 	ld	a, d
      001A09 DD 86 F5         [19] 5687 	add	a, -11 (ix)
      001A0C DD 77 FC         [19] 5688 	ld	-4 (ix), a
      001A0F 7D               [ 4] 5689 	ld	a, l
      001A10 CE 00            [ 7] 5690 	adc	a, #0x00
      001A12 DD 77 FD         [19] 5691 	ld	-3 (ix), a
                                   5692 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001A15 7B               [ 4] 5693 	ld	a, e
      001A16 B7               [ 4] 5694 	or	a, a
      001A17 28 74            [12] 5695 	jr	Z, 00116$
                                   5696 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001A19 DD 7E FA         [19] 5697 	ld	a, -6 (ix)
      001A1C DD 86 F4         [19] 5698 	add	a, -12 (ix)
      001A1F 6F               [ 4] 5699 	ld	l, a
      001A20 DD 7E FB         [19] 5700 	ld	a, -5 (ix)
      001A23 CE 00            [ 7] 5701 	adc	a, #0x00
      001A25 67               [ 4] 5702 	ld	h, a
      001A26 56               [ 7] 5703 	ld	d, (hl)
      001A27 DD 6E FC         [19] 5704 	ld	l, -4 (ix)
      001A2A DD 66 FD         [19] 5705 	ld	h, -3 (ix)
      001A2D 6E               [ 7] 5706 	ld	l, (hl)
      001A2E 7A               [ 4] 5707 	ld	a, d
      001A2F 95               [ 4] 5708 	sub	a, l
      001A30 20 5B            [12] 5709 	jr	NZ, 00116$
                                   5710 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001A32 7B               [ 4] 5711 	ld	a, e
      001A33 95               [ 4] 5712 	sub	a, l
      001A34 20 57            [12] 5713 	jr	NZ, 00116$
                                   5714 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001A36 DD 36 EF 01      [19] 5715 	ld	-17 (ix), #0x01
                                   5716 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001A3A 3Er00            [ 7] 5717 	ld	a, #<(_playfield)
      001A3C DD 86 F6         [19] 5718 	add	a, -10 (ix)
      001A3F 5F               [ 4] 5719 	ld	e, a
      001A40 3Es00            [ 7] 5720 	ld	a, #>(_playfield)
      001A42 DD 8E F7         [19] 5721 	adc	a, -9 (ix)
      001A45 67               [ 4] 5722 	ld	h, a
      001A46 7B               [ 4] 5723 	ld	a, e
      001A47 DD 86 F4         [19] 5724 	add	a, -12 (ix)
      001A4A 6F               [ 4] 5725 	ld	l, a
      001A4B 30 01            [12] 5726 	jr	NC, 00631$
      001A4D 24               [ 4] 5727 	inc	h
      001A4E                       5728 00631$:
      001A4E CB FA            [ 8] 5729 	set	7, d
      001A50 72               [ 7] 5730 	ld	(hl), d
                                   5731 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001A51 3Er00            [ 7] 5732 	ld	a, #<(_playfield)
      001A53 DD 86 F8         [19] 5733 	add	a, -8 (ix)
      001A56 5F               [ 4] 5734 	ld	e, a
      001A57 3Es00            [ 7] 5735 	ld	a, #>(_playfield)
      001A59 DD 8E F9         [19] 5736 	adc	a, -7 (ix)
      001A5C 57               [ 4] 5737 	ld	d, a
      001A5D 7B               [ 4] 5738 	ld	a, e
      001A5E DD 86 F5         [19] 5739 	add	a, -11 (ix)
      001A61 5F               [ 4] 5740 	ld	e, a
      001A62 30 01            [12] 5741 	jr	NC, 00632$
      001A64 14               [ 4] 5742 	inc	d
      001A65                       5743 00632$:
      001A65 DD 6E FC         [19] 5744 	ld	l, -4 (ix)
      001A68 DD 66 FD         [19] 5745 	ld	h, -3 (ix)
      001A6B 7E               [ 7] 5746 	ld	a, (hl)
      001A6C CB FF            [ 8] 5747 	set	7, a
      001A6E 12               [ 7] 5748 	ld	(de), a
                                   5749 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001A6F 3Er00            [ 7] 5750 	ld	a, #<(_playfield)
      001A71 DD 86 F0         [19] 5751 	add	a, -16 (ix)
      001A74 5F               [ 4] 5752 	ld	e, a
      001A75 3Es00            [ 7] 5753 	ld	a, #>(_playfield)
      001A77 DD 8E F1         [19] 5754 	adc	a, -15 (ix)
      001A7A 57               [ 4] 5755 	ld	d, a
      001A7B 7B               [ 4] 5756 	ld	a, e
      001A7C DD 86 FE         [19] 5757 	add	a, -2 (ix)
      001A7F 5F               [ 4] 5758 	ld	e, a
      001A80 30 01            [12] 5759 	jr	NC, 00633$
      001A82 14               [ 4] 5760 	inc	d
      001A83                       5761 00633$:
      001A83 DD 6E F2         [19] 5762 	ld	l, -14 (ix)
      001A86 DD 66 F3         [19] 5763 	ld	h, -13 (ix)
      001A89 7E               [ 7] 5764 	ld	a, (hl)
      001A8A CB FF            [ 8] 5765 	set	7, a
      001A8C 12               [ 7] 5766 	ld	(de), a
      001A8D                       5767 00116$:
                                   5768 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001A8D DD 6E F4         [19] 5769 	ld	l, -12 (ix)
      001A90 26 00            [ 7] 5770 	ld	h, #0x00
      001A92 09               [11] 5771 	add	hl, bc
      001A93 4E               [ 7] 5772 	ld	c, (hl)
      001A94 79               [ 4] 5773 	ld	a, c
      001A95 B7               [ 4] 5774 	or	a, a
      001A96 28 6A            [12] 5775 	jr	Z, 00211$
                                   5776 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001A98 DD 7E FA         [19] 5777 	ld	a, -6 (ix)
      001A9B DD 86 FE         [19] 5778 	add	a, -2 (ix)
      001A9E 5F               [ 4] 5779 	ld	e, a
      001A9F DD 7E FB         [19] 5780 	ld	a, -5 (ix)
      001AA2 CE 00            [ 7] 5781 	adc	a, #0x00
      001AA4 57               [ 4] 5782 	ld	d, a
      001AA5 DD 6E FC         [19] 5783 	ld	l, -4 (ix)
      001AA8 DD 66 FD         [19] 5784 	ld	h, -3 (ix)
      001AAB 46               [ 7] 5785 	ld	b, (hl)
      001AAC 1A               [ 7] 5786 	ld	a, (de)
      001AAD B8               [ 4] 5787 	cp	a, b
      001AAE 20 52            [12] 5788 	jr	NZ, 00211$
                                   5789 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001AB0 91               [ 4] 5790 	sub	a, c
      001AB1 20 4F            [12] 5791 	jr	NZ, 00211$
                                   5792 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001AB3 DD 36 EF 01      [19] 5793 	ld	-17 (ix), #0x01
                                   5794 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001AB7 3Er00            [ 7] 5795 	ld	a, #<(_playfield)
      001AB9 DD 86 F0         [19] 5796 	add	a, -16 (ix)
      001ABC 47               [ 4] 5797 	ld	b, a
      001ABD 3Es00            [ 7] 5798 	ld	a, #>(_playfield)
      001ABF DD 8E F1         [19] 5799 	adc	a, -15 (ix)
      001AC2 67               [ 4] 5800 	ld	h, a
      001AC3 78               [ 4] 5801 	ld	a, b
      001AC4 DD 86 F4         [19] 5802 	add	a, -12 (ix)
      001AC7 6F               [ 4] 5803 	ld	l, a
      001AC8 30 01            [12] 5804 	jr	NC, 00638$
      001ACA 24               [ 4] 5805 	inc	h
      001ACB                       5806 00638$:
      001ACB CB F9            [ 8] 5807 	set	7, c
      001ACD 71               [ 7] 5808 	ld	(hl), c
                                   5809 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001ACE 3Er00            [ 7] 5810 	ld	a, #<(_playfield)
      001AD0 DD 86 F8         [19] 5811 	add	a, -8 (ix)
      001AD3 4F               [ 4] 5812 	ld	c, a
      001AD4 3Es00            [ 7] 5813 	ld	a, #>(_playfield)
      001AD6 DD 8E F9         [19] 5814 	adc	a, -7 (ix)
      001AD9 47               [ 4] 5815 	ld	b, a
      001ADA 79               [ 4] 5816 	ld	a, c
      001ADB DD 86 F5         [19] 5817 	add	a, -11 (ix)
      001ADE 4F               [ 4] 5818 	ld	c, a
      001ADF 30 01            [12] 5819 	jr	NC, 00639$
      001AE1 04               [ 4] 5820 	inc	b
      001AE2                       5821 00639$:
      001AE2 DD 6E FC         [19] 5822 	ld	l, -4 (ix)
      001AE5 DD 66 FD         [19] 5823 	ld	h, -3 (ix)
      001AE8 7E               [ 7] 5824 	ld	a, (hl)
      001AE9 CB FF            [ 8] 5825 	set	7, a
      001AEB 02               [ 7] 5826 	ld	(bc), a
                                   5827 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001AEC 3Er00            [ 7] 5828 	ld	a, #<(_playfield)
      001AEE DD 86 F6         [19] 5829 	add	a, -10 (ix)
      001AF1 4F               [ 4] 5830 	ld	c, a
      001AF2 3Es00            [ 7] 5831 	ld	a, #>(_playfield)
      001AF4 DD 8E F7         [19] 5832 	adc	a, -9 (ix)
      001AF7 47               [ 4] 5833 	ld	b, a
      001AF8 DD 6E FE         [19] 5834 	ld	l, -2 (ix)
      001AFB 26 00            [ 7] 5835 	ld	h, #0x00
      001AFD 09               [11] 5836 	add	hl, bc
      001AFE 1A               [ 7] 5837 	ld	a, (de)
      001AFF CB FF            [ 8] 5838 	set	7, a
      001B01 77               [ 7] 5839 	ld	(hl), a
      001B02                       5840 00211$:
                                   5841 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001B02 DD 34 FF         [23] 5842 	inc	-1 (ix)
      001B05 C3r77r19         [10] 5843 	jp	00210$
      001B08                       5844 00214$:
                                   5845 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001B08 DD 34 FE         [23] 5846 	inc	-2 (ix)
      001B0B C3r6Br19         [10] 5847 	jp	00213$
      001B0E                       5848 00124$:
                                   5849 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001B0E DD 7E EF         [19] 5850 	ld	a, -17 (ix)
      001B11 B7               [ 4] 5851 	or	a, a
      001B12 CArBBr1E         [10] 5852 	jp	Z, 00236$
                                   5853 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001B15 DD 36 F5 FF      [19] 5854 	ld	-11 (ix), #0xff
      001B19 DD 36 F6 00      [19] 5855 	ld	-10 (ix), #0
                                   5856 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001B1D DD 36 F7 05      [19] 5857 	ld	-9 (ix), #0x05
      001B21 DD 36 F8 00      [19] 5858 	ld	-8 (ix), #0
                                   5859 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001B25 DD 36 F9 0B      [19] 5860 	ld	-7 (ix), #0x0b
      001B29 DD 36 FA 00      [19] 5861 	ld	-6 (ix), #0
                                   5862 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001B2D CDr48r0A         [17] 5863 	call	_HideArrowSprite
                                   5864 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001B30 CDr36r16         [17] 5865 	call	_SoundFx_2
                                   5866 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001B33 DD 36 FB 00      [19] 5867 	ld	-5 (ix), #0
                                   5868 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B37 DD 36 FF 00      [19] 5869 	ld	-1 (ix), #0
      001B3B                       5870 00219$:
      001B3B DD 7E FF         [19] 5871 	ld	a, -1 (ix)
      001B3E D6 0C            [ 7] 5872 	sub	a, #0x0c
      001B40 30 5F            [12] 5873 	jr	NC, 00290$
                                   5874 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B42 DD 5E FB         [19] 5875 	ld	e, -5 (ix)
      001B45 06 00            [ 7] 5876 	ld	b, #0x00
      001B47                       5877 00216$:
      001B47 78               [ 4] 5878 	ld	a, b
      001B48 D6 06            [ 7] 5879 	sub	a, #0x06
      001B4A 30 4D            [12] 5880 	jr	NC, 00319$
                                   5881 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001B4C D5               [11] 5882 	push	de
      001B4D 58               [ 4] 5883 	ld	e, b
      001B4E 16 00            [ 7] 5884 	ld	d, #0x00
      001B50 6B               [ 4] 5885 	ld	l, e
      001B51 62               [ 4] 5886 	ld	h, d
      001B52 29               [11] 5887 	add	hl, hl
      001B53 19               [11] 5888 	add	hl, de
      001B54 29               [11] 5889 	add	hl, hl
      001B55 29               [11] 5890 	add	hl, hl
      001B56 11r00r00         [10] 5891 	ld	de, #_playfield
      001B59 19               [11] 5892 	add	hl, de
      001B5A D1               [10] 5893 	pop	de
      001B5B 7D               [ 4] 5894 	ld	a, l
      001B5C DD 86 FF         [19] 5895 	add	a, -1 (ix)
      001B5F 6F               [ 4] 5896 	ld	l, a
      001B60 30 01            [12] 5897 	jr	NC, 00640$
      001B62 24               [ 4] 5898 	inc	h
      001B63                       5899 00640$:
      001B63 7E               [ 7] 5900 	ld	a, (hl)
      001B64 07               [ 4] 5901 	rlca
      001B65 30 2F            [12] 5902 	jr	NC, 00217$
                                   5903 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001B67 1C               [ 4] 5904 	inc	e
                                   5905 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001B68 78               [ 4] 5906 	ld	a, b
      001B69 DD 96 F7         [19] 5907 	sub	a, -9 (ix)
      001B6C 30 03            [12] 5908 	jr	NC, 00126$
      001B6E DD 70 F7         [19] 5909 	ld	-9 (ix), b
      001B71                       5910 00126$:
                                   5911 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001B71 DD 7E F8         [19] 5912 	ld	a, -8 (ix)
      001B74 90               [ 4] 5913 	sub	a, b
      001B75 30 03            [12] 5914 	jr	NC, 00128$
      001B77 DD 70 F8         [19] 5915 	ld	-8 (ix), b
      001B7A                       5916 00128$:
                                   5917 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001B7A DD 7E FF         [19] 5918 	ld	a, -1 (ix)
      001B7D DD 96 F9         [19] 5919 	sub	a, -7 (ix)
      001B80 30 06            [12] 5920 	jr	NC, 00130$
      001B82 DD 7E FF         [19] 5921 	ld	a, -1 (ix)
      001B85 DD 77 F9         [19] 5922 	ld	-7 (ix), a
      001B88                       5923 00130$:
                                   5924 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001B88 DD 7E FA         [19] 5925 	ld	a, -6 (ix)
      001B8B DD 96 FF         [19] 5926 	sub	a, -1 (ix)
      001B8E 30 06            [12] 5927 	jr	NC, 00217$
      001B90 DD 7E FF         [19] 5928 	ld	a, -1 (ix)
      001B93 DD 77 FA         [19] 5929 	ld	-6 (ix), a
      001B96                       5930 00217$:
                                   5931 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B96 04               [ 4] 5932 	inc	b
      001B97 18 AE            [12] 5933 	jr	00216$
      001B99                       5934 00319$:
      001B99 DD 73 FB         [19] 5935 	ld	-5 (ix), e
                                   5936 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B9C DD 34 FF         [23] 5937 	inc	-1 (ix)
      001B9F 18 9A            [12] 5938 	jr	00219$
                                   5939 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001BA1                       5940 00290$:
      001BA1 DD 36 FF 48      [19] 5941 	ld	-1 (ix), #0x48
      001BA5                       5942 00166$:
      001BA5 DD 4E FF         [19] 5943 	ld	c, -1 (ix)
      001BA8 DD 35 FF         [23] 5944 	dec	-1 (ix)
      001BAB 79               [ 4] 5945 	ld	a, c
      001BAC B7               [ 4] 5946 	or	a, a
      001BAD CAr55r1D         [10] 5947 	jp	Z, 00168$
                                   5948 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001BB0 ED 5B 9E FC      [20] 5949 	ld	de, (_JIFFY)
                                   5950 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001BB4                       5951 00137$:
      001BB4 2A 9E FC         [16] 5952 	ld	hl, (_JIFFY)
      001BB7 BF               [ 4] 5953 	cp	a, a
      001BB8 ED 52            [15] 5954 	sbc	hl, de
      001BBA 28 F8            [12] 5955 	jr	Z, 00137$
                                   5956 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001BBC DD 7E FB         [19] 5957 	ld	a, -5 (ix)
      001BBF D6 03            [ 7] 5958 	sub	a, #0x03
      001BC1 DAr73r1C         [10] 5959 	jp	C, 00300$
                                   5960 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001BC4 DD 7E FB         [19] 5961 	ld	a, -5 (ix)
      001BC7 D6 07            [ 7] 5962 	sub	a, #0x07
      001BC9 38 04            [12] 5963 	jr	C, 00141$
      001BCB DD 36 FB 07      [19] 5964 	ld	-5 (ix), #0x07
      001BCF                       5965 00141$:
                                   5966 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001BCF DD 7E F5         [19] 5967 	ld	a, -11 (ix)
      001BD2 3C               [ 4] 5968 	inc	a
      001BD3 20 7B            [12] 5969 	jr	NZ, 00143$
                                   5970 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001BD5 DD 6E F8         [19] 5971 	ld	l, -8 (ix)
      001BD8 26 00            [ 7] 5972 	ld	h, #0x00
      001BDA 29               [11] 5973 	add	hl, hl
      001BDB 29               [11] 5974 	add	hl, hl
      001BDC 29               [11] 5975 	add	hl, hl
      001BDD 29               [11] 5976 	add	hl, hl
      001BDE DD 5E F7         [19] 5977 	ld	e, -9 (ix)
      001BE1 16 00            [ 7] 5978 	ld	d, #0x00
      001BE3 EB               [ 4] 5979 	ex	de, hl
      001BE4 29               [11] 5980 	add	hl, hl
      001BE5 29               [11] 5981 	add	hl, hl
      001BE6 29               [11] 5982 	add	hl, hl
      001BE7 29               [11] 5983 	add	hl, hl
      001BE8 EB               [ 4] 5984 	ex	de, hl
      001BE9 BF               [ 4] 5985 	cp	a, a
      001BEA ED 52            [15] 5986 	sbc	hl, de
      001BEC 4D               [ 4] 5987 	ld	c, l
      001BED 44               [ 4] 5988 	ld	b, h
      001BEE CB 7C            [ 8] 5989 	bit	7, h
      001BF0 28 03            [12] 5990 	jr	Z, 00238$
      001BF2 4D               [ 4] 5991 	ld	c, l
      001BF3 44               [ 4] 5992 	ld	b, h
      001BF4 03               [ 6] 5993 	inc	bc
      001BF5                       5994 00238$:
      001BF5 CB 28            [ 8] 5995 	sra	b
      001BF7 CB 19            [ 8] 5996 	rr	c
      001BF9 79               [ 4] 5997 	ld	a, c
      001BFA C6 50            [ 7] 5998 	add	a, #0x50
      001BFC DD 6E F7         [19] 5999 	ld	l, -9 (ix)
      001BFF 29               [11] 6000 	add	hl, hl
      001C00 29               [11] 6001 	add	hl, hl
      001C01 29               [11] 6002 	add	hl, hl
      001C02 29               [11] 6003 	add	hl, hl
      001C03 85               [ 4] 6004 	add	a, l
      001C04 DD 77 F5         [19] 6005 	ld	-11 (ix), a
                                   6006 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001C07 DD 6E F9         [19] 6007 	ld	l, -7 (ix)
      001C0A 26 00            [ 7] 6008 	ld	h, #0x00
      001C0C 29               [11] 6009 	add	hl, hl
      001C0D 29               [11] 6010 	add	hl, hl
      001C0E 29               [11] 6011 	add	hl, hl
      001C0F 29               [11] 6012 	add	hl, hl
      001C10 DD 5E FA         [19] 6013 	ld	e, -6 (ix)
      001C13 16 00            [ 7] 6014 	ld	d, #0x00
      001C15 EB               [ 4] 6015 	ex	de, hl
      001C16 29               [11] 6016 	add	hl, hl
      001C17 29               [11] 6017 	add	hl, hl
      001C18 29               [11] 6018 	add	hl, hl
      001C19 29               [11] 6019 	add	hl, hl
      001C1A EB               [ 4] 6020 	ex	de, hl
      001C1B BF               [ 4] 6021 	cp	a, a
      001C1C ED 52            [15] 6022 	sbc	hl, de
      001C1E 4D               [ 4] 6023 	ld	c, l
      001C1F 44               [ 4] 6024 	ld	b, h
      001C20 CB 7C            [ 8] 6025 	bit	7, h
      001C22 28 03            [12] 6026 	jr	Z, 00239$
      001C24 23               [ 6] 6027 	inc	hl
      001C25 4D               [ 4] 6028 	ld	c, l
      001C26 44               [ 4] 6029 	ld	b, h
      001C27                       6030 00239$:
      001C27 CB 28            [ 8] 6031 	sra	b
      001C29 CB 19            [ 8] 6032 	rr	c
      001C2B DD 7E FA         [19] 6033 	ld	a, -6 (ix)
      001C2E 87               [ 4] 6034 	add	a, a
      001C2F 87               [ 4] 6035 	add	a, a
      001C30 87               [ 4] 6036 	add	a, a
      001C31 87               [ 4] 6037 	add	a, a
      001C32 81               [ 4] 6038 	add	a, c
      001C33 DD 77 F6         [19] 6039 	ld	-10 (ix), a
                                   6040 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001C36 26 01            [ 7] 6041 	ld	h, #0x01
      001C38 DD 6E F6         [19] 6042 	ld	l, -10 (ix)
      001C3B E5               [11] 6043 	push	hl
      001C3C DD 66 F5         [19] 6044 	ld	h, -11 (ix)
      001C3F DD 6E 04         [19] 6045 	ld	l, 4 (ix)
      001C42 E5               [11] 6046 	push	hl
      001C43 DD 7E FB         [19] 6047 	ld	a, -5 (ix)
      001C46 F5               [11] 6048 	push	af
      001C47 33               [ 6] 6049 	inc	sp
      001C48 CDr56r0A         [17] 6050 	call	_DrawHitSprite
      001C4B F1               [10] 6051 	pop	af
      001C4C F1               [10] 6052 	pop	af
      001C4D 33               [ 6] 6053 	inc	sp
      001C4E 18 23            [12] 6054 	jr	00300$
      001C50                       6055 00143$:
                                   6056 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001C50 DD 4E FF         [19] 6057 	ld	c, -1 (ix)
      001C53 3E 48            [ 7] 6058 	ld	a, #0x48
      001C55 91               [ 4] 6059 	sub	a, c
      001C56 4F               [ 4] 6060 	ld	c, a
      001C57 DD 7E F6         [19] 6061 	ld	a, -10 (ix)
      001C5A 91               [ 4] 6062 	sub	a, c
      001C5B 26 00            [ 7] 6063 	ld	h, #0x00
      001C5D E5               [11] 6064 	push	hl
      001C5E 33               [ 6] 6065 	inc	sp
      001C5F F5               [11] 6066 	push	af
      001C60 33               [ 6] 6067 	inc	sp
      001C61 DD 66 F5         [19] 6068 	ld	h, -11 (ix)
      001C64 DD 6E 04         [19] 6069 	ld	l, 4 (ix)
      001C67 E5               [11] 6070 	push	hl
      001C68 DD 7E FB         [19] 6071 	ld	a, -5 (ix)
      001C6B F5               [11] 6072 	push	af
      001C6C 33               [ 6] 6073 	inc	sp
      001C6D CDr56r0A         [17] 6074 	call	_DrawHitSprite
      001C70 F1               [10] 6075 	pop	af
      001C71 F1               [10] 6076 	pop	af
      001C72 33               [ 6] 6077 	inc	sp
                                   6078 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C73                       6079 00300$:
      001C73 3E 0C            [ 7] 6080 	ld	a, #0x0c
      001C75 DD 96 FF         [19] 6081 	sub	a, -1 (ix)
      001C78 3E 00            [ 7] 6082 	ld	a, #0x00
      001C7A 17               [ 4] 6083 	rla
      001C7B 5F               [ 4] 6084 	ld	e, a
      001C7C 3E 09            [ 7] 6085 	ld	a, #0x09
      001C7E DD 96 FF         [19] 6086 	sub	a, -1 (ix)
      001C81 3E 00            [ 7] 6087 	ld	a, #0x00
      001C83 17               [ 4] 6088 	rla
      001C84 4F               [ 4] 6089 	ld	c, a
      001C85 3E 06            [ 7] 6090 	ld	a, #0x06
      001C87 DD 96 FF         [19] 6091 	sub	a, -1 (ix)
      001C8A 3E 00            [ 7] 6092 	ld	a, #0x00
      001C8C 17               [ 4] 6093 	rla
      001C8D DD 77 FC         [19] 6094 	ld	-4 (ix), a
      001C90 3E 03            [ 7] 6095 	ld	a, #0x03
      001C92 DD 96 FF         [19] 6096 	sub	a, -1 (ix)
      001C95 3E 00            [ 7] 6097 	ld	a, #0x00
      001C97 17               [ 4] 6098 	rla
      001C98 DD 77 FD         [19] 6099 	ld	-3 (ix), a
      001C9B 06 00            [ 7] 6100 	ld	b, #0x00
      001C9D                       6101 00225$:
      001C9D 78               [ 4] 6102 	ld	a, b
      001C9E D6 0C            [ 7] 6103 	sub	a, #0x0c
      001CA0 D2rA5r1B         [10] 6104 	jp	NC, 00166$
                                   6105 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001CA3 16 00            [ 7] 6106 	ld	d, #0x00
      001CA5                       6107 00222$:
      001CA5 7A               [ 4] 6108 	ld	a, d
      001CA6 D6 06            [ 7] 6109 	sub	a, #0x06
      001CA8 D2r51r1D         [10] 6110 	jp	NC, 00226$
                                   6111 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001CAB D5               [11] 6112 	push	de
      001CAC 5A               [ 4] 6113 	ld	e, d
      001CAD 16 00            [ 7] 6114 	ld	d, #0x00
      001CAF 6B               [ 4] 6115 	ld	l, e
      001CB0 62               [ 4] 6116 	ld	h, d
      001CB1 29               [11] 6117 	add	hl, hl
      001CB2 19               [11] 6118 	add	hl, de
      001CB3 29               [11] 6119 	add	hl, hl
      001CB4 29               [11] 6120 	add	hl, hl
      001CB5 11r00r00         [10] 6121 	ld	de, #_playfield
      001CB8 19               [11] 6122 	add	hl, de
      001CB9 D1               [10] 6123 	pop	de
      001CBA 7D               [ 4] 6124 	ld	a, l
      001CBB 80               [ 4] 6125 	add	a, b
      001CBC 6F               [ 4] 6126 	ld	l, a
      001CBD 30 01            [12] 6127 	jr	NC, 00645$
      001CBF 24               [ 4] 6128 	inc	h
      001CC0                       6129 00645$:
      001CC0 7E               [ 7] 6130 	ld	a, (hl)
      001CC1 DD 77 FE         [19] 6131 	ld	-2 (ix), a
      001CC4 DD CB FE 7E      [20] 6132 	bit	7, -2 (ix)
      001CC8 CAr4Dr1D         [10] 6133 	jp	Z,00223$
                                   6134 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001CCB 7B               [ 4] 6135 	ld	a, e
      001CCC B7               [ 4] 6136 	or	a, a
      001CCD 28 2C            [12] 6137 	jr	Z, 00160$
                                   6138 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001CCF 2A 9E FC         [16] 6139 	ld	hl, (_JIFFY)
      001CD2 7D               [ 4] 6140 	ld	a, l
      001CD3 E6 03            [ 7] 6141 	and	a, #0x03
      001CD5 28 14            [12] 6142 	jr	Z, 00148$
                                   6143 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001CD7 DD 7E FE         [19] 6144 	ld	a, -2 (ix)
      001CDA CB BF            [ 8] 6145 	res	7, a
      001CDC C5               [11] 6146 	push	bc
      001CDD D5               [11] 6147 	push	de
      001CDE F5               [11] 6148 	push	af
      001CDF 33               [ 6] 6149 	inc	sp
      001CE0 4A               [ 4] 6150 	ld	c, d
      001CE1 C5               [11] 6151 	push	bc
      001CE2 CDr01r15         [17] 6152 	call	_DrawBlock
      001CE5 F1               [10] 6153 	pop	af
      001CE6 33               [ 6] 6154 	inc	sp
      001CE7 D1               [10] 6155 	pop	de
      001CE8 C1               [10] 6156 	pop	bc
      001CE9 18 62            [12] 6157 	jr	00223$
      001CEB                       6158 00148$:
                                   6159 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001CEB C5               [11] 6160 	push	bc
      001CEC D5               [11] 6161 	push	de
      001CED AF               [ 4] 6162 	xor	a, a
      001CEE F5               [11] 6163 	push	af
      001CEF 33               [ 6] 6164 	inc	sp
      001CF0 4A               [ 4] 6165 	ld	c, d
      001CF1 C5               [11] 6166 	push	bc
      001CF2 CDr01r15         [17] 6167 	call	_DrawBlock
      001CF5 F1               [10] 6168 	pop	af
      001CF6 33               [ 6] 6169 	inc	sp
      001CF7 D1               [10] 6170 	pop	de
      001CF8 C1               [10] 6171 	pop	bc
      001CF9 18 52            [12] 6172 	jr	00223$
      001CFB                       6173 00160$:
                                   6174 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001CFB 79               [ 4] 6175 	ld	a, c
      001CFC B7               [ 4] 6176 	or	a, a
      001CFD 28 11            [12] 6177 	jr	Z, 00157$
      001CFF C5               [11] 6178 	push	bc
      001D00 D5               [11] 6179 	push	de
      001D01 3E 2A            [ 7] 6180 	ld	a, #0x2a
      001D03 F5               [11] 6181 	push	af
      001D04 33               [ 6] 6182 	inc	sp
      001D05 4A               [ 4] 6183 	ld	c, d
      001D06 C5               [11] 6184 	push	bc
      001D07 CDr69r15         [17] 6185 	call	_DrawBlock_SameTile
      001D0A F1               [10] 6186 	pop	af
      001D0B 33               [ 6] 6187 	inc	sp
      001D0C D1               [10] 6188 	pop	de
      001D0D C1               [10] 6189 	pop	bc
      001D0E 18 3D            [12] 6190 	jr	00223$
      001D10                       6191 00157$:
                                   6192 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001D10 DD 7E FC         [19] 6193 	ld	a, -4 (ix)
      001D13 B7               [ 4] 6194 	or	a, a
      001D14 28 11            [12] 6195 	jr	Z, 00154$
      001D16 C5               [11] 6196 	push	bc
      001D17 D5               [11] 6197 	push	de
      001D18 3E 2B            [ 7] 6198 	ld	a, #0x2b
      001D1A F5               [11] 6199 	push	af
      001D1B 33               [ 6] 6200 	inc	sp
      001D1C 4A               [ 4] 6201 	ld	c, d
      001D1D C5               [11] 6202 	push	bc
      001D1E CDr69r15         [17] 6203 	call	_DrawBlock_SameTile
      001D21 F1               [10] 6204 	pop	af
      001D22 33               [ 6] 6205 	inc	sp
      001D23 D1               [10] 6206 	pop	de
      001D24 C1               [10] 6207 	pop	bc
      001D25 18 26            [12] 6208 	jr	00223$
      001D27                       6209 00154$:
                                   6210 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001D27 DD 7E FD         [19] 6211 	ld	a, -3 (ix)
      001D2A B7               [ 4] 6212 	or	a, a
      001D2B 28 11            [12] 6213 	jr	Z, 00151$
      001D2D C5               [11] 6214 	push	bc
      001D2E D5               [11] 6215 	push	de
      001D2F 3E 2C            [ 7] 6216 	ld	a, #0x2c
      001D31 F5               [11] 6217 	push	af
      001D32 33               [ 6] 6218 	inc	sp
      001D33 4A               [ 4] 6219 	ld	c, d
      001D34 C5               [11] 6220 	push	bc
      001D35 CDr69r15         [17] 6221 	call	_DrawBlock_SameTile
      001D38 F1               [10] 6222 	pop	af
      001D39 33               [ 6] 6223 	inc	sp
      001D3A D1               [10] 6224 	pop	de
      001D3B C1               [10] 6225 	pop	bc
      001D3C 18 0F            [12] 6226 	jr	00223$
      001D3E                       6227 00151$:
                                   6228 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001D3E C5               [11] 6229 	push	bc
      001D3F D5               [11] 6230 	push	de
      001D40 3E 2D            [ 7] 6231 	ld	a, #0x2d
      001D42 F5               [11] 6232 	push	af
      001D43 33               [ 6] 6233 	inc	sp
      001D44 4A               [ 4] 6234 	ld	c, d
      001D45 C5               [11] 6235 	push	bc
      001D46 CDr69r15         [17] 6236 	call	_DrawBlock_SameTile
      001D49 F1               [10] 6237 	pop	af
      001D4A 33               [ 6] 6238 	inc	sp
      001D4B D1               [10] 6239 	pop	de
      001D4C C1               [10] 6240 	pop	bc
      001D4D                       6241 00223$:
                                   6242 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D4D 14               [ 4] 6243 	inc	d
      001D4E C3rA5r1C         [10] 6244 	jp	00222$
      001D51                       6245 00226$:
                                   6246 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D51 04               [ 4] 6247 	inc	b
      001D52 C3r9Dr1C         [10] 6248 	jp	00225$
      001D55                       6249 00168$:
                                   6250 ;src\/CheckPlayfield.h:196: HideHitSprite();
      001D55 CDr68r0C         [17] 6251 	call	_HideHitSprite
                                   6252 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D58 DD 36 FD 00      [19] 6253 	ld	-3 (ix), #0
      001D5C                       6254 00234$:
      001D5C DD 7E FD         [19] 6255 	ld	a, -3 (ix)
      001D5F D6 0C            [ 7] 6256 	sub	a, #0x0c
      001D61 D2r3Fr1E         [10] 6257 	jp	NC, 00177$
                                   6258 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D64 DD 36 FE 00      [19] 6259 	ld	-2 (ix), #0
      001D68                       6260 00231$:
      001D68 DD 7E FE         [19] 6261 	ld	a, -2 (ix)
      001D6B D6 06            [ 7] 6262 	sub	a, #0x06
      001D6D D2r39r1E         [10] 6263 	jp	NC, 00235$
                                   6264 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001D70 DD 4E FE         [19] 6265 	ld	c, -2 (ix)
      001D73 06 00            [ 7] 6266 	ld	b, #0x00
      001D75 69               [ 4] 6267 	ld	l, c
      001D76 60               [ 4] 6268 	ld	h, b
      001D77 29               [11] 6269 	add	hl, hl
      001D78 09               [11] 6270 	add	hl, bc
      001D79 29               [11] 6271 	add	hl, hl
      001D7A 29               [11] 6272 	add	hl, hl
      001D7B EB               [ 4] 6273 	ex	de, hl
      001D7C 21r00r00         [10] 6274 	ld	hl, #_playfield
      001D7F 19               [11] 6275 	add	hl, de
      001D80 DD 75 FB         [19] 6276 	ld	-5 (ix), l
      001D83 DD 74 FC         [19] 6277 	ld	-4 (ix), h
      001D86 DD 7E FB         [19] 6278 	ld	a, -5 (ix)
      001D89 DD 86 FD         [19] 6279 	add	a, -3 (ix)
      001D8C 4F               [ 4] 6280 	ld	c, a
      001D8D DD 7E FC         [19] 6281 	ld	a, -4 (ix)
      001D90 CE 00            [ 7] 6282 	adc	a, #0x00
      001D92 47               [ 4] 6283 	ld	b, a
      001D93 0A               [ 7] 6284 	ld	a, (bc)
      001D94 07               [ 4] 6285 	rlca
      001D95 D2r33r1E         [10] 6286 	jp	NC,00232$
                                   6287 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      001D98 2Ar04r00         [16] 6288 	ld	hl, (_blocksRemoved)
      001D9B 23               [ 6] 6289 	inc	hl
      001D9C 22r04r00         [16] 6290 	ld	(_blocksRemoved), hl
                                   6291 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001D9F DD 7E FB         [19] 6292 	ld	a, -5 (ix)
      001DA2 DD 77 F7         [19] 6293 	ld	-9 (ix), a
      001DA5 DD 7E FC         [19] 6294 	ld	a, -4 (ix)
      001DA8 DD 77 F8         [19] 6295 	ld	-8 (ix), a
      001DAB DD 7E FD         [19] 6296 	ld	a, -3 (ix)
      001DAE DD 77 FF         [19] 6297 	ld	-1 (ix), a
      001DB1                       6298 00228$:
      001DB1 DD 7E FF         [19] 6299 	ld	a, -1 (ix)
      001DB4 B7               [ 4] 6300 	or	a, a
      001DB5 28 7C            [12] 6301 	jr	Z, 00232$
                                   6302 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      001DB7 0E 01            [ 7] 6303 	ld	c, #0x01
                                   6304 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001DB9 DD 7E FF         [19] 6305 	ld	a, -1 (ix)
      001DBC DD 77 FC         [19] 6306 	ld	-4 (ix), a
      001DBF 3D               [ 4] 6307 	dec	a
      001DC0 DD 86 F7         [19] 6308 	add	a, -9 (ix)
      001DC3 5F               [ 4] 6309 	ld	e, a
      001DC4 3E 00            [ 7] 6310 	ld	a, #0x00
      001DC6 DD 8E F8         [19] 6311 	adc	a, -8 (ix)
      001DC9 57               [ 4] 6312 	ld	d, a
      001DCA 1A               [ 7] 6313 	ld	a, (de)
      001DCB 07               [ 4] 6314 	rlca
      001DCC 30 02            [12] 6315 	jr	NC, 00170$
      001DCE 0E 02            [ 7] 6316 	ld	c, #0x02
      001DD0                       6317 00170$:
                                   6318 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001DD0 DD 7E FC         [19] 6319 	ld	a, -4 (ix)
      001DD3 3D               [ 4] 6320 	dec	a
      001DD4 3D               [ 4] 6321 	dec	a
      001DD5 DD 86 F7         [19] 6322 	add	a, -9 (ix)
      001DD8 5F               [ 4] 6323 	ld	e, a
      001DD9 3E 00            [ 7] 6324 	ld	a, #0x00
      001DDB DD 8E F8         [19] 6325 	adc	a, -8 (ix)
      001DDE 57               [ 4] 6326 	ld	d, a
      001DDF 1A               [ 7] 6327 	ld	a, (de)
      001DE0 07               [ 4] 6328 	rlca
      001DE1 30 01            [12] 6329 	jr	NC, 00172$
      001DE3 0C               [ 4] 6330 	inc	c
      001DE4                       6331 00172$:
                                   6332 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001DE4 DD 7E F7         [19] 6333 	ld	a, -9 (ix)
      001DE7 DD 86 FF         [19] 6334 	add	a, -1 (ix)
      001DEA DD 77 F9         [19] 6335 	ld	-7 (ix), a
      001DED DD 7E F8         [19] 6336 	ld	a, -8 (ix)
      001DF0 CE 00            [ 7] 6337 	adc	a, #0x00
      001DF2 DD 77 FA         [19] 6338 	ld	-6 (ix), a
      001DF5 DD 6E FF         [19] 6339 	ld	l, -1 (ix)
      001DF8 26 00            [ 7] 6340 	ld	h, #0x00
      001DFA 59               [ 4] 6341 	ld	e, c
      001DFB 16 00            [ 7] 6342 	ld	d, #0x00
      001DFD BF               [ 4] 6343 	cp	a, a
      001DFE ED 52            [15] 6344 	sbc	hl, de
      001E00 CB 7C            [ 8] 6345 	bit	7, h
      001E02 20 18            [12] 6346 	jr	NZ, 00242$
      001E04 DD 7E FF         [19] 6347 	ld	a, -1 (ix)
      001E07 91               [ 4] 6348 	sub	a, c
      001E08 DD 86 F7         [19] 6349 	add	a, -9 (ix)
      001E0B 4F               [ 4] 6350 	ld	c, a
      001E0C 3E 00            [ 7] 6351 	ld	a, #0x00
      001E0E DD 8E F8         [19] 6352 	adc	a, -8 (ix)
      001E11 47               [ 4] 6353 	ld	b, a
      001E12 0A               [ 7] 6354 	ld	a, (bc)
      001E13 DD 77 FB         [19] 6355 	ld	-5 (ix), a
      001E16 DD 36 FC 00      [19] 6356 	ld	-4 (ix), #0
      001E1A 18 07            [12] 6357 	jr	00243$
      001E1C                       6358 00242$:
      001E1C AF               [ 4] 6359 	xor	a, a
      001E1D DD 77 FB         [19] 6360 	ld	-5 (ix), a
      001E20 DD 77 FC         [19] 6361 	ld	-4 (ix), a
      001E23                       6362 00243$:
      001E23 DD 7E FB         [19] 6363 	ld	a, -5 (ix)
      001E26 DD 6E F9         [19] 6364 	ld	l, -7 (ix)
      001E29 DD 66 FA         [19] 6365 	ld	h, -6 (ix)
      001E2C 77               [ 7] 6366 	ld	(hl), a
                                   6367 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001E2D DD 35 FF         [23] 6368 	dec	-1 (ix)
      001E30 C3rB1r1D         [10] 6369 	jp	00228$
      001E33                       6370 00232$:
                                   6371 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E33 DD 34 FE         [23] 6372 	inc	-2 (ix)
      001E36 C3r68r1D         [10] 6373 	jp	00231$
      001E39                       6374 00235$:
                                   6375 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E39 DD 34 FD         [23] 6376 	inc	-3 (ix)
      001E3C C3r5Cr1D         [10] 6377 	jp	00234$
      001E3F                       6378 00177$:
                                   6379 ;src\/CheckPlayfield.h:227: oldLevel = level;
      001E3F 3Ar06r00         [13] 6380 	ld	a, (#_level + 0)
      001E42 4F               [ 4] 6381 	ld	c, a
                                   6382 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      001E43 21r04r00         [10] 6383 	ld	hl, #_blocksRemoved
      001E46 46               [ 7] 6384 	ld	b, (hl)
      001E47 23               [ 6] 6385 	inc	hl
      001E48 56               [ 7] 6386 	ld	d, (hl)
      001E49 78               [ 4] 6387 	ld	a, b
      001E4A D6 5A            [ 7] 6388 	sub	a, #0x5a
      001E4C 7A               [ 4] 6389 	ld	a, d
      001E4D DE 00            [ 7] 6390 	sbc	a, #0x00
      001E4F 38 19            [12] 6391 	jr	C, 00185$
                                   6392 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      001E51 C5               [11] 6393 	push	bc
      001E52 21 1E 00         [10] 6394 	ld	hl, #0x001e
      001E55 E5               [11] 6395 	push	hl
      001E56 58               [ 4] 6396 	ld	e, b
      001E57 D5               [11] 6397 	push	de
      001E58 CDr00r00         [17] 6398 	call	__divuint
      001E5B F1               [10] 6399 	pop	af
      001E5C F1               [10] 6400 	pop	af
      001E5D C1               [10] 6401 	pop	bc
      001E5E 7D               [ 4] 6402 	ld	a, l
      001E5F 3C               [ 4] 6403 	inc	a
      001E60 32r06r00         [13] 6404 	ld	(_level+0), a
                                   6405 ;src\/CheckPlayfield.h:230: speed = 15;
      001E63 21r93r00         [10] 6406 	ld	hl, #_speed
      001E66 36 0F            [10] 6407 	ld	(hl), #0x0f
      001E68 18 32            [12] 6408 	jr	00186$
      001E6A                       6409 00185$:
                                   6410 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      001E6A 78               [ 4] 6411 	ld	a, b
      001E6B D6 3C            [ 7] 6412 	sub	a, #0x3c
      001E6D 7A               [ 4] 6413 	ld	a, d
      001E6E DE 00            [ 7] 6414 	sbc	a, #0x00
      001E70 38 0C            [12] 6415 	jr	C, 00182$
                                   6416 ;src\/CheckPlayfield.h:234: level = 3;
      001E72 21r06r00         [10] 6417 	ld	hl, #_level
      001E75 36 03            [10] 6418 	ld	(hl), #0x03
                                   6419 ;src\/CheckPlayfield.h:235: speed = 30;
      001E77 21r93r00         [10] 6420 	ld	hl, #_speed
      001E7A 36 1E            [10] 6421 	ld	(hl), #0x1e
      001E7C 18 1E            [12] 6422 	jr	00186$
      001E7E                       6423 00182$:
                                   6424 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      001E7E 78               [ 4] 6425 	ld	a, b
      001E7F D6 1E            [ 7] 6426 	sub	a, #0x1e
      001E81 7A               [ 4] 6427 	ld	a, d
      001E82 DE 00            [ 7] 6428 	sbc	a, #0x00
      001E84 38 0C            [12] 6429 	jr	C, 00179$
                                   6430 ;src\/CheckPlayfield.h:238: level = 2;
      001E86 21r06r00         [10] 6431 	ld	hl, #_level
      001E89 36 02            [10] 6432 	ld	(hl), #0x02
                                   6433 ;src\/CheckPlayfield.h:239: speed = 45;
      001E8B 21r93r00         [10] 6434 	ld	hl, #_speed
      001E8E 36 2D            [10] 6435 	ld	(hl), #0x2d
      001E90 18 0A            [12] 6436 	jr	00186$
      001E92                       6437 00179$:
                                   6438 ;src\/CheckPlayfield.h:242: level = 1;
      001E92 21r06r00         [10] 6439 	ld	hl, #_level
      001E95 36 01            [10] 6440 	ld	(hl), #0x01
                                   6441 ;src\/CheckPlayfield.h:243: speed = 60;
      001E97 21r93r00         [10] 6442 	ld	hl, #_speed
      001E9A 36 3C            [10] 6443 	ld	(hl), #0x3c
      001E9C                       6444 00186$:
                                   6445 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      001E9C 3Ar06r00         [13] 6446 	ld	a,(#_level + 0)
      001E9F 91               [ 4] 6447 	sub	a, c
      001EA0 28 05            [12] 6448 	jr	Z, 00188$
                                   6449 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      001EA2 21r07r00         [10] 6450 	ld	hl, #_newLevel
      001EA5 36 01            [10] 6451 	ld	(hl), #0x01
      001EA7                       6452 00188$:
                                   6453 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      001EA7 CDr25r16         [17] 6454 	call	_DrawPlayfield
                                   6455 ;src\/CheckPlayfield.h:255: CheckIfPlayfieldIsValid(); // test
      001EAA CDr96r16         [17] 6456 	call	_CheckIfPlayfieldIsValid
                                   6457 ;src\/CheckPlayfield.h:257: DrawScore();
      001EAD CDr7Fr10         [17] 6458 	call	_DrawScore
                                   6459 ;src\/CheckPlayfield.h:259: iteration++;
      001EB0 DD 34 04         [23] 6460 	inc	4 (ix)
                                   6461 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      001EB3 DD 7E 04         [19] 6462 	ld	a, 4 (ix)
      001EB6 F5               [11] 6463 	push	af
      001EB7 33               [ 6] 6464 	inc	sp
      001EB8 CDr4Ar17         [17] 6465 	call	_CheckPlayfield
      001EBB                       6466 00236$:
                                   6467 ;src\/CheckPlayfield.h:265: }
      001EBB DD F9            [10] 6468 	ld	sp, ix
      001EBD DD E1            [14] 6469 	pop	ix
      001EBF C9               [10] 6470 	ret
                                   6471 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6472 ;	---------------------------------
                                   6473 ; Function RandomIndex
                                   6474 ; ---------------------------------
      001EC0                       6475 _RandomIndex::
                                   6476 ;src\/GameLogic.h:5: do {
      001EC0                       6477 00101$:
                                   6478 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001EC0 CDrA3r00         [17] 6479 	call	_GetRandom
      001EC3 7D               [ 4] 6480 	ld	a, l
      001EC4 E6 07            [ 7] 6481 	and	a, #0x07
      001EC6 6F               [ 4] 6482 	ld	l, a
                                   6483 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001EC7 3E 04            [ 7] 6484 	ld	a, #0x04
      001EC9 95               [ 4] 6485 	sub	a, l
      001ECA 38 F4            [12] 6486 	jr	C, 00101$
                                   6487 ;src\/GameLogic.h:10: return random;
                                   6488 ;src\/GameLogic.h:11: }
      001ECC C9               [10] 6489 	ret
                                   6490 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6491 ;	---------------------------------
                                   6492 ; Function RandomPiece
                                   6493 ; ---------------------------------
      001ECD                       6494 _RandomPiece::
                                   6495 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001ECD 01r18r00         [10] 6496 	ld	bc, #_pieces+0
      001ED0 C5               [11] 6497 	push	bc
      001ED1 CDrC0r1E         [17] 6498 	call	_RandomIndex
      001ED4 C1               [10] 6499 	pop	bc
      001ED5 26 00            [ 7] 6500 	ld	h, #0x00
      001ED7 09               [11] 6501 	add	hl, bc
      001ED8 7E               [ 7] 6502 	ld	a, (hl)
      001ED9 32r90r00         [13] 6503 	ld	(_topPiece+0), a
                                   6504 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001EDC C5               [11] 6505 	push	bc
      001EDD CDrC0r1E         [17] 6506 	call	_RandomIndex
      001EE0 C1               [10] 6507 	pop	bc
      001EE1 26 00            [ 7] 6508 	ld	h, #0x00
      001EE3 09               [11] 6509 	add	hl, bc
      001EE4 7E               [ 7] 6510 	ld	a, (hl)
      001EE5 32r91r00         [13] 6511 	ld	(_midPiece+0), a
                                   6512 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001EE8 C5               [11] 6513 	push	bc
      001EE9 CDrC0r1E         [17] 6514 	call	_RandomIndex
      001EEC C1               [10] 6515 	pop	bc
      001EED 26 00            [ 7] 6516 	ld	h, #0x00
      001EEF 09               [11] 6517 	add	hl, bc
      001EF0 7E               [ 7] 6518 	ld	a, (hl)
      001EF1 32r92r00         [13] 6519 	ld	(_bottomPiece+0), a
                                   6520 ;src\/GameLogic.h:17: }
      001EF4 C9               [10] 6521 	ret
                                   6522 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   6523 ;	---------------------------------
                                   6524 ; Function UpdateAndDrawPieceStatic
                                   6525 ; ---------------------------------
      001EF5                       6526 _UpdateAndDrawPieceStatic::
                                   6527 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001EF5 01r00r00         [10] 6528 	ld	bc, #_playfield+0
      001EF8 ED 5Br01r00      [20] 6529 	ld	de, (_col)
      001EFC 16 00            [ 7] 6530 	ld	d, #0x00
      001EFE 6B               [ 4] 6531 	ld	l, e
      001EFF 62               [ 4] 6532 	ld	h, d
      001F00 29               [11] 6533 	add	hl, hl
      001F01 19               [11] 6534 	add	hl, de
      001F02 29               [11] 6535 	add	hl, hl
      001F03 29               [11] 6536 	add	hl, hl
      001F04 09               [11] 6537 	add	hl, bc
      001F05 EB               [ 4] 6538 	ex	de, hl
      001F06 3Ar02r00         [13] 6539 	ld	a, (#_line + 0)
      001F09 6F               [ 4] 6540 	ld	l, a
      001F0A 26 00            [ 7] 6541 	ld	h, #0x00
      001F0C 19               [11] 6542 	add	hl, de
      001F0D 3Ar90r00         [13] 6543 	ld	a,(#_topPiece + 0)
      001F10 77               [ 7] 6544 	ld	(hl), a
                                   6545 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001F11 ED 5Br01r00      [20] 6546 	ld	de, (_col)
      001F15 16 00            [ 7] 6547 	ld	d, #0x00
      001F17 6B               [ 4] 6548 	ld	l, e
      001F18 62               [ 4] 6549 	ld	h, d
      001F19 29               [11] 6550 	add	hl, hl
      001F1A 19               [11] 6551 	add	hl, de
      001F1B 29               [11] 6552 	add	hl, hl
      001F1C 29               [11] 6553 	add	hl, hl
      001F1D 09               [11] 6554 	add	hl, bc
      001F1E EB               [ 4] 6555 	ex	de, hl
      001F1F 3Ar02r00         [13] 6556 	ld	a, (#_line + 0)
      001F22 6F               [ 4] 6557 	ld	l, a
      001F23 2C               [ 4] 6558 	inc	l
      001F24 26 00            [ 7] 6559 	ld	h, #0x00
      001F26 19               [11] 6560 	add	hl, de
      001F27 3Ar91r00         [13] 6561 	ld	a,(#_midPiece + 0)
      001F2A 77               [ 7] 6562 	ld	(hl), a
                                   6563 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001F2B ED 5Br01r00      [20] 6564 	ld	de, (_col)
      001F2F 16 00            [ 7] 6565 	ld	d, #0x00
      001F31 6B               [ 4] 6566 	ld	l, e
      001F32 62               [ 4] 6567 	ld	h, d
      001F33 29               [11] 6568 	add	hl, hl
      001F34 19               [11] 6569 	add	hl, de
      001F35 29               [11] 6570 	add	hl, hl
      001F36 29               [11] 6571 	add	hl, hl
      001F37 09               [11] 6572 	add	hl, bc
      001F38 EB               [ 4] 6573 	ex	de, hl
      001F39 3Ar02r00         [13] 6574 	ld	a, (#_line + 0)
      001F3C 6F               [ 4] 6575 	ld	l, a
      001F3D 2C               [ 4] 6576 	inc	l
      001F3E 2C               [ 4] 6577 	inc	l
      001F3F 26 00            [ 7] 6578 	ld	h, #0x00
      001F41 19               [11] 6579 	add	hl, de
      001F42 3Ar92r00         [13] 6580 	ld	a,(#_bottomPiece + 0)
      001F45 77               [ 7] 6581 	ld	(hl), a
                                   6582 ;src\/GameLogic.h:25: DrawPiece(line);
      001F46 C5               [11] 6583 	push	bc
      001F47 3Ar02r00         [13] 6584 	ld	a,(#_line + 0)
      001F4A F5               [11] 6585 	push	af
      001F4B 33               [ 6] 6586 	inc	sp
      001F4C CDr02r16         [17] 6587 	call	_DrawPiece
      001F4F 33               [ 6] 6588 	inc	sp
      001F50 C1               [10] 6589 	pop	bc
                                   6590 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001F51 3E 02            [ 7] 6591 	ld	a, #0x02
      001F53 32r01r00         [13] 6592 	ld	(#_col), a
                                   6593 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   6594 ;src\/GameLogic.h:31: counter = 0;
      001F56 3E 00            [ 7] 6595 	ld	a,#0x00
      001F58 32r02r00         [13] 6596 	ld	(#_line),a
      001F5B 32r03r00         [13] 6597 	ld	(#_counter), a
                                   6598 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001F5E 3Ar18r00         [13] 6599 	ld	a, (#_playfield + 24)
      001F61 B7               [ 4] 6600 	or	a, a
      001F62 20 0C            [12] 6601 	jr	NZ, 00101$
                                   6602 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001F64 3Ar19r00         [13] 6603 	ld	a, (#_playfield + 25)
      001F67 B7               [ 4] 6604 	or	a, a
      001F68 20 06            [12] 6605 	jr	NZ, 00101$
                                   6606 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001F6A 3Ar1Ar00         [13] 6607 	ld	a, (#_playfield + 26)
      001F6D B7               [ 4] 6608 	or	a, a
      001F6E 28 0B            [12] 6609 	jr	Z, 00102$
      001F70                       6610 00101$:
                                   6611 ;src\/GameLogic.h:37: gameOver = TRUE;
      001F70 FD 21r00r00      [14] 6612 	ld	iy, #_gameOver
      001F74 FD 36 00 01      [19] 6613 	ld	0 (iy), #0x01
      001F78 C3r25r16         [10] 6614 	jp	_DrawPlayfield
      001F7B                       6615 00102$:
                                   6616 ;src\/GameLogic.h:40: RandomPiece();
      001F7B CDrCDr1E         [17] 6617 	call	_RandomPiece
                                   6618 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001F7E 3E 01            [ 7] 6619 	ld	a, #0x01
      001F80 F5               [11] 6620 	push	af
      001F81 33               [ 6] 6621 	inc	sp
      001F82 CDr4Ar17         [17] 6622 	call	_CheckPlayfield
      001F85 33               [ 6] 6623 	inc	sp
                                   6624 ;src\/GameLogic.h:45: DrawPlayfield();
                                   6625 ;src\/GameLogic.h:46: }
      001F86 C3r25r16         [10] 6626 	jp	_DrawPlayfield
                                   6627 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   6628 ;	---------------------------------
                                   6629 ; Function BlinkPauseText
                                   6630 ; ---------------------------------
      001F89                       6631 _BlinkPauseText::
                                   6632 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001F89 2A 9E FC         [16] 6633 	ld	hl, (_JIFFY)
      001F8C CB 5D            [ 8] 6634 	bit	3, l
      001F8E 28 0E            [12] 6635 	jr	Z, 00102$
                                   6636 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001F90 11 0D 0C         [10] 6637 	ld	de, #0x0c0d
      001F93 D5               [11] 6638 	push	de
      001F94 21rA7r1F         [10] 6639 	ld	hl, #___str_4
      001F97 E5               [11] 6640 	push	hl
      001F98 CDrF1r0D         [17] 6641 	call	_DrawString
      001F9B F1               [10] 6642 	pop	af
      001F9C F1               [10] 6643 	pop	af
      001F9D C9               [10] 6644 	ret
      001F9E                       6645 00102$:
                                   6646 ;src\/GameLogic.h:55: DrawLine(6);
      001F9E 3E 06            [ 7] 6647 	ld	a, #0x06
      001FA0 F5               [11] 6648 	push	af
      001FA1 33               [ 6] 6649 	inc	sp
      001FA2 CDrCAr15         [17] 6650 	call	_DrawLine
      001FA5 33               [ 6] 6651 	inc	sp
                                   6652 ;src\/GameLogic.h:58: }
      001FA6 C9               [10] 6653 	ret
      001FA7                       6654 ___str_4:
      001FA7 50 41 55 53 45        6655 	.ascii "PAUSE"
      001FAC 00                    6656 	.db 0x00
                                   6657 ;src\/GameLogic.h:60: void Pause() {
                                   6658 ;	---------------------------------
                                   6659 ; Function Pause
                                   6660 ; ---------------------------------
      001FAD                       6661 _Pause::
                                   6662 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001FAD 11 0D 0C         [10] 6663 	ld	de, #0x0c0d
      001FB0 D5               [11] 6664 	push	de
      001FB1 21rE7r1F         [10] 6665 	ld	hl, #___str_5
      001FB4 E5               [11] 6666 	push	hl
      001FB5 CDrF1r0D         [17] 6667 	call	_DrawString
      001FB8 F1               [10] 6668 	pop	af
      001FB9 F1               [10] 6669 	pop	af
                                   6670 ;src\/GameLogic.h:65: while(TRUE) {
      001FBA                       6671 00114$:
                                   6672 ;src\/GameLogic.h:67: BlinkPauseText();
      001FBA CDr89r1F         [17] 6673 	call	_BlinkPauseText
                                   6674 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001FBD 2E 07            [ 7] 6675 	ld	l, #0x07
      001FBF CDr00r00         [17] 6676 	call	_SNSMAT
                                   6677 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001FC2 CB 55            [ 8] 6678 	bit	2, l
      001FC4 28 F4            [12] 6679 	jr	Z, 00114$
                                   6680 ;src\/GameLogic.h:73: while(TRUE) {
      001FC6                       6681 00109$:
                                   6682 ;src\/GameLogic.h:75: BlinkPauseText();
      001FC6 CDr89r1F         [17] 6683 	call	_BlinkPauseText
                                   6684 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001FC9 2E 07            [ 7] 6685 	ld	l, #0x07
      001FCB CDr00r00         [17] 6686 	call	_SNSMAT
                                   6687 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001FCE CB 55            [ 8] 6688 	bit	2, l
      001FD0 20 F4            [12] 6689 	jr	NZ, 00109$
                                   6690 ;src\/GameLogic.h:81: while(TRUE) {
      001FD2                       6691 00104$:
                                   6692 ;src\/GameLogic.h:83: BlinkPauseText();
      001FD2 CDr89r1F         [17] 6693 	call	_BlinkPauseText
                                   6694 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001FD5 2E 07            [ 7] 6695 	ld	l, #0x07
      001FD7 CDr00r00         [17] 6696 	call	_SNSMAT
                                   6697 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001FDA CB 55            [ 8] 6698 	bit	2, l
      001FDC 28 F4            [12] 6699 	jr	Z, 00104$
                                   6700 ;src\/GameLogic.h:89: DrawLine(6);
      001FDE 3E 06            [ 7] 6701 	ld	a, #0x06
      001FE0 F5               [11] 6702 	push	af
      001FE1 33               [ 6] 6703 	inc	sp
      001FE2 CDrCAr15         [17] 6704 	call	_DrawLine
      001FE5 33               [ 6] 6705 	inc	sp
                                   6706 ;src\/GameLogic.h:90: return;
                                   6707 ;src\/GameLogic.h:100: }
      001FE6 C9               [10] 6708 	ret
      001FE7                       6709 ___str_5:
      001FE7 50 41 55 53 45        6710 	.ascii "PAUSE"
      001FEC 00                    6711 	.db 0x00
                                   6712 ;src\/GameLogic.h:102: void GameLoop() {
                                   6713 ;	---------------------------------
                                   6714 ; Function GameLoop
                                   6715 ; ---------------------------------
      001FED                       6716 _GameLoop::
      001FED DD E5            [15] 6717 	push	ix
      001FEF DD 21 00 00      [14] 6718 	ld	ix,#0
      001FF3 DD 39            [15] 6719 	add	ix,sp
      001FF5 21 F3 FF         [10] 6720 	ld	hl, #-13
      001FF8 39               [11] 6721 	add	hl, sp
      001FF9 F9               [ 6] 6722 	ld	sp, hl
                                   6723 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001FFA DD 36 FF 00      [19] 6724 	ld	-1 (ix), #0
      001FFE DD 36 F3 00      [19] 6725 	ld	-13 (ix), #0
                                   6726 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      002002 DD 36 F4 00      [19] 6727 	ld	-12 (ix), #0
      002006 DD 36 F5 00      [19] 6728 	ld	-11 (ix), #0
                                   6729 ;src\/GameLogic.h:109: while(!gameOver) {
      00200A                       6730 00150$:
      00200A 3Ar00r00         [13] 6731 	ld	a,(#_gameOver + 0)
      00200D B7               [ 4] 6732 	or	a, a
      00200E C2rA5r23         [10] 6733 	jp	NZ, 00152$
                                   6734 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      002011 ED 4B 9E FC      [20] 6735 	ld	bc, (_JIFFY)
                                   6736 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      002015                       6737 00101$:
      002015 2A 9E FC         [16] 6738 	ld	hl, (_JIFFY)
      002018 BF               [ 4] 6739 	cp	a, a
      002019 ED 42            [15] 6740 	sbc	hl, bc
      00201B 28 F8            [12] 6741 	jr	Z, 00101$
                                   6742 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      00201D ED 4Br01r00      [20] 6743 	ld	bc, (_col)
      002021 06 00            [ 7] 6744 	ld	b, #0x00
      002023 69               [ 4] 6745 	ld	l, c
      002024 60               [ 4] 6746 	ld	h, b
      002025 29               [11] 6747 	add	hl, hl
      002026 09               [11] 6748 	add	hl, bc
      002027 29               [11] 6749 	add	hl, hl
      002028 29               [11] 6750 	add	hl, hl
      002029 EB               [ 4] 6751 	ex	de, hl
      00202A 21r00r00         [10] 6752 	ld	hl, #_playfield
      00202D 19               [11] 6753 	add	hl, de
      00202E EB               [ 4] 6754 	ex	de, hl
      00202F FD 21r02r00      [14] 6755 	ld	iy, #_line
      002033 FD 6E 00         [19] 6756 	ld	l, 0 (iy)
      002036 26 00            [ 7] 6757 	ld	h, #0x00
      002038 19               [11] 6758 	add	hl, de
      002039 36 00            [10] 6759 	ld	(hl), #0x00
                                   6760 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      00203B ED 4Br01r00      [20] 6761 	ld	bc, (_col)
      00203F 06 00            [ 7] 6762 	ld	b, #0x00
      002041 69               [ 4] 6763 	ld	l, c
      002042 60               [ 4] 6764 	ld	h, b
      002043 29               [11] 6765 	add	hl, hl
      002044 09               [11] 6766 	add	hl, bc
      002045 29               [11] 6767 	add	hl, hl
      002046 29               [11] 6768 	add	hl, hl
      002047 EB               [ 4] 6769 	ex	de, hl
      002048 21r00r00         [10] 6770 	ld	hl, #_playfield
      00204B 19               [11] 6771 	add	hl, de
      00204C EB               [ 4] 6772 	ex	de, hl
      00204D FD 6E 00         [19] 6773 	ld	l, 0 (iy)
      002050 2C               [ 4] 6774 	inc	l
      002051 26 00            [ 7] 6775 	ld	h, #0x00
      002053 19               [11] 6776 	add	hl, de
      002054 36 00            [10] 6777 	ld	(hl), #0x00
                                   6778 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      002056 ED 4Br01r00      [20] 6779 	ld	bc, (_col)
      00205A 06 00            [ 7] 6780 	ld	b, #0x00
      00205C 69               [ 4] 6781 	ld	l, c
      00205D 60               [ 4] 6782 	ld	h, b
      00205E 29               [11] 6783 	add	hl, hl
      00205F 09               [11] 6784 	add	hl, bc
      002060 29               [11] 6785 	add	hl, hl
      002061 29               [11] 6786 	add	hl, hl
      002062 EB               [ 4] 6787 	ex	de, hl
      002063 21r00r00         [10] 6788 	ld	hl, #_playfield
      002066 19               [11] 6789 	add	hl, de
      002067 EB               [ 4] 6790 	ex	de, hl
      002068 FD 6E 00         [19] 6791 	ld	l, 0 (iy)
      00206B 2C               [ 4] 6792 	inc	l
      00206C 2C               [ 4] 6793 	inc	l
      00206D 26 00            [ 7] 6794 	ld	h, #0x00
      00206F 19               [11] 6795 	add	hl, de
      002070 36 00            [10] 6796 	ld	(hl), #0x00
                                   6797 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      002072 2E 01            [ 7] 6798 	ld	l, #0x01
      002074 CDr00r00         [17] 6799 	call	_GTSTCK
      002077 DD 75 F6         [19] 6800 	ld	-10 (ix), l
                                   6801 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      00207A 2E 01            [ 7] 6802 	ld	l, #0x01
      00207C CDr00r00         [17] 6803 	call	_GTTRIG
      00207F DD 75 F7         [19] 6804 	ld	-9 (ix), l
                                   6805 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      002082 2E 03            [ 7] 6806 	ld	l, #0x03
      002084 CDr00r00         [17] 6807 	call	_GTTRIG
      002087 DD 75 F8         [19] 6808 	ld	-8 (ix), l
                                   6809 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      00208A DD 7E F6         [19] 6810 	ld	a, -10 (ix)
                                   6811 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      00208D B7               [ 4] 6812 	or	a,a
      00208E 20 07            [12] 6813 	jr	NZ, 00105$
      002090 6F               [ 4] 6814 	ld	l,a
      002091 CDr00r00         [17] 6815 	call	_GTSTCK
      002094 DD 75 F6         [19] 6816 	ld	-10 (ix), l
      002097                       6817 00105$:
                                   6818 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      002097 FD 21r02r00      [14] 6819 	ld	iy, #_line
      00209B FD 7E 00         [19] 6820 	ld	a, 0 (iy)
      00209E DD 77 F9         [19] 6821 	ld	-7 (ix), a
                                   6822 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      0020A1 DD 7E FF         [19] 6823 	ld	a, -1 (ix)
      0020A4 B7               [ 4] 6824 	or	a, a
      0020A5 C2r8Er21         [10] 6825 	jp	NZ, 00118$
                                   6826 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      0020A8 FD 7E 00         [19] 6827 	ld	a, 0 (iy)
      0020AB DD 77 FF         [19] 6828 	ld	-1 (ix), a
                                   6829 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      0020AE FD 21r01r00      [14] 6830 	ld	iy, #_col
      0020B2 FD 7E 00         [19] 6831 	ld	a, 0 (iy)
      0020B5 DD 77 FA         [19] 6832 	ld	-6 (ix), a
                                   6833 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      0020B8 DD 7E FF         [19] 6834 	ld	a, -1 (ix)
      0020BB C6 02            [ 7] 6835 	add	a, #0x02
      0020BD DD 77 FB         [19] 6836 	ld	-5 (ix), a
                                   6837 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      0020C0 DD 7E F6         [19] 6838 	ld	a, -10 (ix)
      0020C3 D6 07            [ 7] 6839 	sub	a, #0x07
      0020C5 20 5F            [12] 6840 	jr	NZ, 00112$
                                   6841 ;src\/GameLogic.h:139: col > 0 && 
      0020C7 FD 7E 00         [19] 6842 	ld	a, 0 (iy)
      0020CA B7               [ 4] 6843 	or	a, a
      0020CB 28 59            [12] 6844 	jr	Z, 00112$
                                   6845 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      0020CD DD 7E FA         [19] 6846 	ld	a, -6 (ix)
      0020D0 C6 FF            [ 7] 6847 	add	a, #0xff
      0020D2 DD 77 FF         [19] 6848 	ld	-1 (ix), a
      0020D5 4F               [ 4] 6849 	ld	c, a
      0020D6 07               [ 4] 6850 	rlca
      0020D7 9F               [ 4] 6851 	sbc	a, a
      0020D8 47               [ 4] 6852 	ld	b, a
      0020D9 69               [ 4] 6853 	ld	l, c
      0020DA 60               [ 4] 6854 	ld	h, b
      0020DB 29               [11] 6855 	add	hl, hl
      0020DC 09               [11] 6856 	add	hl, bc
      0020DD 29               [11] 6857 	add	hl, hl
      0020DE 29               [11] 6858 	add	hl, hl
      0020DF DD 75 FE         [19] 6859 	ld	-2 (ix), l
      0020E2 DD 74 FF         [19] 6860 	ld	-1 (ix), h
      0020E5 3Er00            [ 7] 6861 	ld	a, #<(_playfield)
      0020E7 DD 86 FE         [19] 6862 	add	a, -2 (ix)
      0020EA DD 77 FC         [19] 6863 	ld	-4 (ix), a
      0020ED 3Es00            [ 7] 6864 	ld	a, #>(_playfield)
      0020EF DD 8E FF         [19] 6865 	adc	a, -1 (ix)
      0020F2 DD 77 FD         [19] 6866 	ld	-3 (ix), a
      0020F5 DD 7E FC         [19] 6867 	ld	a, -4 (ix)
      0020F8 DD 86 F9         [19] 6868 	add	a, -7 (ix)
      0020FB DD 77 FE         [19] 6869 	ld	-2 (ix), a
      0020FE DD 7E FD         [19] 6870 	ld	a, -3 (ix)
      002101 CE 00            [ 7] 6871 	adc	a, #0x00
      002103 DD 77 FF         [19] 6872 	ld	-1 (ix), a
      002106 DD 6E FE         [19] 6873 	ld	l, -2 (ix)
      002109 DD 66 FF         [19] 6874 	ld	h, -1 (ix)
      00210C 7E               [ 7] 6875 	ld	a, (hl)
      00210D B7               [ 4] 6876 	or	a, a
      00210E 20 16            [12] 6877 	jr	NZ, 00112$
                                   6878 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      002110 DD 7E FC         [19] 6879 	ld	a, -4 (ix)
      002113 DD 86 FB         [19] 6880 	add	a, -5 (ix)
      002116 4F               [ 4] 6881 	ld	c, a
      002117 DD 7E FD         [19] 6882 	ld	a, -3 (ix)
      00211A CE 00            [ 7] 6883 	adc	a, #0x00
      00211C 47               [ 4] 6884 	ld	b, a
      00211D 0A               [ 7] 6885 	ld	a, (bc)
      00211E B7               [ 4] 6886 	or	a, a
      00211F 20 05            [12] 6887 	jr	NZ, 00112$
                                   6888 ;src\/GameLogic.h:142: col--;
      002121 FD 35 00         [23] 6889 	dec	0 (iy)
      002124 18 68            [12] 6890 	jr	00118$
      002126                       6891 00112$:
                                   6892 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      002126 DD 7E F6         [19] 6893 	ld	a, -10 (ix)
      002129 D6 03            [ 7] 6894 	sub	a, #0x03
      00212B 20 61            [12] 6895 	jr	NZ, 00118$
                                   6896 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      00212D FD 21r01r00      [14] 6897 	ld	iy, #_col
      002131 FD 7E 00         [19] 6898 	ld	a, 0 (iy)
      002134 D6 05            [ 7] 6899 	sub	a, #0x05
      002136 30 56            [12] 6900 	jr	NC, 00118$
                                   6901 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      002138 DD 7E FA         [19] 6902 	ld	a, -6 (ix)
      00213B 3C               [ 4] 6903 	inc	a
      00213C DD 77 FF         [19] 6904 	ld	-1 (ix), a
      00213F 4F               [ 4] 6905 	ld	c, a
      002140 07               [ 4] 6906 	rlca
      002141 9F               [ 4] 6907 	sbc	a, a
      002142 47               [ 4] 6908 	ld	b, a
      002143 69               [ 4] 6909 	ld	l, c
      002144 60               [ 4] 6910 	ld	h, b
      002145 29               [11] 6911 	add	hl, hl
      002146 09               [11] 6912 	add	hl, bc
      002147 29               [11] 6913 	add	hl, hl
      002148 29               [11] 6914 	add	hl, hl
      002149 DD 75 FE         [19] 6915 	ld	-2 (ix), l
      00214C DD 74 FF         [19] 6916 	ld	-1 (ix), h
      00214F 3Er00            [ 7] 6917 	ld	a, #<(_playfield)
      002151 DD 86 FE         [19] 6918 	add	a, -2 (ix)
      002154 DD 77 FC         [19] 6919 	ld	-4 (ix), a
      002157 3Es00            [ 7] 6920 	ld	a, #>(_playfield)
      002159 DD 8E FF         [19] 6921 	adc	a, -1 (ix)
      00215C DD 77 FD         [19] 6922 	ld	-3 (ix), a
      00215F DD 7E FC         [19] 6923 	ld	a, -4 (ix)
      002162 DD 86 F9         [19] 6924 	add	a, -7 (ix)
      002165 DD 77 FE         [19] 6925 	ld	-2 (ix), a
      002168 DD 7E FD         [19] 6926 	ld	a, -3 (ix)
      00216B CE 00            [ 7] 6927 	adc	a, #0x00
      00216D DD 77 FF         [19] 6928 	ld	-1 (ix), a
      002170 DD 6E FE         [19] 6929 	ld	l, -2 (ix)
      002173 DD 66 FF         [19] 6930 	ld	h, -1 (ix)
      002176 7E               [ 7] 6931 	ld	a, (hl)
      002177 B7               [ 4] 6932 	or	a, a
      002178 20 14            [12] 6933 	jr	NZ, 00118$
                                   6934 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      00217A DD 7E FC         [19] 6935 	ld	a, -4 (ix)
      00217D DD 86 FB         [19] 6936 	add	a, -5 (ix)
      002180 4F               [ 4] 6937 	ld	c, a
      002181 DD 7E FD         [19] 6938 	ld	a, -3 (ix)
      002184 CE 00            [ 7] 6939 	adc	a, #0x00
      002186 47               [ 4] 6940 	ld	b, a
      002187 0A               [ 7] 6941 	ld	a, (bc)
      002188 B7               [ 4] 6942 	or	a, a
      002189 20 03            [12] 6943 	jr	NZ, 00118$
                                   6944 ;src\/GameLogic.h:148: col++;
      00218B FD 34 00         [23] 6945 	inc	0 (iy)
      00218E                       6946 00118$:
                                   6947 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      00218E DD 7E F3         [19] 6948 	ld	a, -13 (ix)
      002191 B7               [ 4] 6949 	or	a, a
      002192 C2r54r22         [10] 6950 	jp	NZ, 00132$
                                   6951 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002195 DD 7E F6         [19] 6952 	ld	a, -10 (ix)
      002198 3D               [ 4] 6953 	dec	a
      002199 28 18            [12] 6954 	jr	Z, 00119$
      00219B DD 7E F4         [19] 6955 	ld	a, -12 (ix)
      00219E B7               [ 4] 6956 	or	a, a
      00219F 20 06            [12] 6957 	jr	NZ, 00124$
      0021A1 DD 7E F7         [19] 6958 	ld	a, -9 (ix)
      0021A4 3C               [ 4] 6959 	inc	a
      0021A5 28 0C            [12] 6960 	jr	Z, 00119$
      0021A7                       6961 00124$:
      0021A7 DD 7E F5         [19] 6962 	ld	a, -11 (ix)
      0021AA B7               [ 4] 6963 	or	a, a
      0021AB 20 1A            [12] 6964 	jr	NZ, 00120$
      0021AD DD 7E F8         [19] 6965 	ld	a, -8 (ix)
      0021B0 3C               [ 4] 6966 	inc	a
      0021B1 20 14            [12] 6967 	jr	NZ, 00120$
      0021B3                       6968 00119$:
                                   6969 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      0021B3 3Ar92r00         [13] 6970 	ld	a, (#_bottomPiece + 0)
      0021B6 4F               [ 4] 6971 	ld	c, a
                                   6972 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      0021B7 3Ar91r00         [13] 6973 	ld	a,(#_midPiece + 0)
      0021BA 32r92r00         [13] 6974 	ld	(#_bottomPiece),a
                                   6975 ;src\/GameLogic.h:160: midPiece = topPiece;
      0021BD 3Ar90r00         [13] 6976 	ld	a,(#_topPiece + 0)
      0021C0 32r91r00         [13] 6977 	ld	(#_midPiece),a
                                   6978 ;src\/GameLogic.h:161: topPiece = temp;
      0021C3 21r90r00         [10] 6979 	ld	hl, #_topPiece
      0021C6 71               [ 7] 6980 	ld	(hl), c
      0021C7                       6981 00120$:
                                   6982 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      0021C7 DD 7E F6         [19] 6983 	ld	a, -10 (ix)
      0021CA D6 05            [ 7] 6984 	sub	a, #0x05
      0021CC C2r54r22         [10] 6985 	jp	NZ,00132$
                                   6986 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      0021CF DD 7E F9         [19] 6987 	ld	a, -7 (ix)
      0021D2 DD 77 FE         [19] 6988 	ld	-2 (ix), a
      0021D5 DD 7E F9         [19] 6989 	ld	a, -7 (ix)
      0021D8 DD 77 FF         [19] 6990 	ld	-1 (ix), a
      0021DB                       6991 00154$:
      0021DB DD 7E FF         [19] 6992 	ld	a, -1 (ix)
      0021DE D6 0C            [ 7] 6993 	sub	a, #0x0c
      0021E0 30 72            [12] 6994 	jr	NC, 00132$
                                   6995 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0021E2 DD 7E FF         [19] 6996 	ld	a, -1 (ix)
      0021E5 D6 09            [ 7] 6997 	sub	a, #0x09
      0021E7 28 4C            [12] 6998 	jr	Z, 00125$
      0021E9 ED 4Br01r00      [20] 6999 	ld	bc, (_col)
      0021ED 06 00            [ 7] 7000 	ld	b, #0x00
      0021EF 69               [ 4] 7001 	ld	l, c
      0021F0 60               [ 4] 7002 	ld	h, b
      0021F1 29               [11] 7003 	add	hl, hl
      0021F2 09               [11] 7004 	add	hl, bc
      0021F3 29               [11] 7005 	add	hl, hl
      0021F4 29               [11] 7006 	add	hl, hl
      0021F5 DD 75 FC         [19] 7007 	ld	-4 (ix), l
      0021F8 DD 74 FD         [19] 7008 	ld	-3 (ix), h
      0021FB 3Er00            [ 7] 7009 	ld	a, #<(_playfield)
      0021FD DD 86 FC         [19] 7010 	add	a, -4 (ix)
      002200 DD 77 FA         [19] 7011 	ld	-6 (ix), a
      002203 3Es00            [ 7] 7012 	ld	a, #>(_playfield)
      002205 DD 8E FD         [19] 7013 	adc	a, -3 (ix)
      002208 DD 77 FB         [19] 7014 	ld	-5 (ix), a
      00220B DD 7E FF         [19] 7015 	ld	a, -1 (ix)
      00220E DD 77 FD         [19] 7016 	ld	-3 (ix), a
      002211 DD 34 FD         [23] 7017 	inc	-3 (ix)
      002214 DD 34 FD         [23] 7018 	inc	-3 (ix)
      002217 DD 34 FD         [23] 7019 	inc	-3 (ix)
      00221A DD 7E FD         [19] 7020 	ld	a, -3 (ix)
      00221D DD 86 FA         [19] 7021 	add	a, -6 (ix)
      002220 DD 77 FC         [19] 7022 	ld	-4 (ix), a
      002223 3E 00            [ 7] 7023 	ld	a, #0x00
      002225 DD 8E FB         [19] 7024 	adc	a, -5 (ix)
      002228 DD 77 FD         [19] 7025 	ld	-3 (ix), a
      00222B DD 6E FC         [19] 7026 	ld	l, -4 (ix)
      00222E DD 66 FD         [19] 7027 	ld	h, -3 (ix)
      002231 7E               [ 7] 7028 	ld	a, (hl)
      002232 B7               [ 4] 7029 	or	a, a
      002233 28 14            [12] 7030 	jr	Z, 00155$
      002235                       7031 00125$:
                                   7032 ;src\/GameLogic.h:170: DrawPiece(line);
      002235 3Ar02r00         [13] 7033 	ld	a,(#_line + 0)
      002238 F5               [11] 7034 	push	af
      002239 33               [ 6] 7035 	inc	sp
      00223A CDr02r16         [17] 7036 	call	_DrawPiece
      00223D 33               [ 6] 7037 	inc	sp
                                   7038 ;src\/GameLogic.h:172: line = i;
      00223E DD 7E FE         [19] 7039 	ld	a, -2 (ix)
      002241 32r02r00         [13] 7040 	ld	(#_line),a
                                   7041 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      002244 CDrF5r1E         [17] 7042 	call	_UpdateAndDrawPieceStatic
                                   7043 ;src\/GameLogic.h:175: break;
      002247 18 0B            [12] 7044 	jr	00132$
      002249                       7045 00155$:
                                   7046 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002249 DD 34 FF         [23] 7047 	inc	-1 (ix)
      00224C DD 7E FF         [19] 7048 	ld	a, -1 (ix)
      00224F DD 77 FE         [19] 7049 	ld	-2 (ix), a
      002252 18 87            [12] 7050 	jr	00154$
      002254                       7051 00132$:
                                   7052 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      002254 DD 7E F6         [19] 7053 	ld	a, -10 (ix)
      002257 DD 77 FF         [19] 7054 	ld	-1 (ix), a
                                   7055 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      00225A DD 7E F6         [19] 7056 	ld	a, -10 (ix)
      00225D DD 77 F3         [19] 7057 	ld	-13 (ix), a
                                   7058 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      002260 DD 7E F7         [19] 7059 	ld	a, -9 (ix)
      002263 DD 77 F4         [19] 7060 	ld	-12 (ix), a
                                   7061 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      002266 DD 7E F8         [19] 7062 	ld	a, -8 (ix)
      002269 DD 77 F5         [19] 7063 	ld	-11 (ix), a
                                   7064 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      00226C 2E 07            [ 7] 7065 	ld	l, #0x07
      00226E CDr00r00         [17] 7066 	call	_SNSMAT
                                   7067 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      002271 CB 55            [ 8] 7068 	bit	2, l
      002273 20 03            [12] 7069 	jr	NZ, 00134$
                                   7070 ;src\/GameLogic.h:214: Pause();
      002275 CDrADr1F         [17] 7071 	call	_Pause
      002278                       7072 00134$:
                                   7073 ;src\/GameLogic.h:219: counter++;
      002278 FD 21r03r00      [14] 7074 	ld	iy, #_counter
      00227C FD 34 00         [23] 7075 	inc	0 (iy)
                                   7076 ;src\/GameLogic.h:220: if(counter == speed) {
      00227F FD 7E 00         [19] 7077 	ld	a, 0 (iy)
      002282 21r93r00         [10] 7078 	ld	hl, #_speed
      002285 96               [ 7] 7079 	sub	a, (hl)
      002286 20 3F            [12] 7080 	jr	NZ, 00139$
                                   7081 ;src\/GameLogic.h:222: counter = 0;
      002288 21r03r00         [10] 7082 	ld	hl, #_counter
      00228B 36 00            [10] 7083 	ld	(hl), #0x00
                                   7084 ;src\/GameLogic.h:225: DrawPiece(line);
      00228D 3Ar02r00         [13] 7085 	ld	a,(#_line + 0)
      002290 F5               [11] 7086 	push	af
      002291 33               [ 6] 7087 	inc	sp
      002292 CDr02r16         [17] 7088 	call	_DrawPiece
      002295 33               [ 6] 7089 	inc	sp
                                   7090 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002296 FD 21r02r00      [14] 7091 	ld	iy, #_line
      00229A FD 7E 00         [19] 7092 	ld	a, 0 (iy)
      00229D D6 09            [ 7] 7093 	sub	a, #0x09
      00229F 28 1F            [12] 7094 	jr	Z, 00135$
      0022A1 ED 4Br01r00      [20] 7095 	ld	bc, (_col)
      0022A5 06 00            [ 7] 7096 	ld	b, #0x00
      0022A7 69               [ 4] 7097 	ld	l, c
      0022A8 60               [ 4] 7098 	ld	h, b
      0022A9 29               [11] 7099 	add	hl, hl
      0022AA 09               [11] 7100 	add	hl, bc
      0022AB 29               [11] 7101 	add	hl, hl
      0022AC 29               [11] 7102 	add	hl, hl
      0022AD EB               [ 4] 7103 	ex	de, hl
      0022AE 21r00r00         [10] 7104 	ld	hl, #_playfield
      0022B1 19               [11] 7105 	add	hl, de
      0022B2 EB               [ 4] 7106 	ex	de, hl
      0022B3 FD 7E 00         [19] 7107 	ld	a, 0 (iy)
      0022B6 C6 03            [ 7] 7108 	add	a, #0x03
      0022B8 6F               [ 4] 7109 	ld	l, a
      0022B9 26 00            [ 7] 7110 	ld	h, #0x00
      0022BB 19               [11] 7111 	add	hl, de
      0022BC 7E               [ 7] 7112 	ld	a, (hl)
      0022BD B7               [ 4] 7113 	or	a, a
      0022BE 28 03            [12] 7114 	jr	Z, 00136$
      0022C0                       7115 00135$:
                                   7116 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      0022C0 CDrF5r1E         [17] 7117 	call	_UpdateAndDrawPieceStatic
      0022C3                       7118 00136$:
                                   7119 ;src\/GameLogic.h:234: line++;
      0022C3 21r02r00         [10] 7120 	ld	hl, #_line
      0022C6 34               [11] 7121 	inc	(hl)
      0022C7                       7122 00139$:
                                   7123 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      0022C7 ED 4Br01r00      [20] 7124 	ld	bc, (_col)
      0022CB 06 00            [ 7] 7125 	ld	b, #0x00
      0022CD 69               [ 4] 7126 	ld	l, c
      0022CE 60               [ 4] 7127 	ld	h, b
      0022CF 29               [11] 7128 	add	hl, hl
      0022D0 09               [11] 7129 	add	hl, bc
      0022D1 29               [11] 7130 	add	hl, hl
      0022D2 29               [11] 7131 	add	hl, hl
      0022D3 EB               [ 4] 7132 	ex	de, hl
      0022D4 21r00r00         [10] 7133 	ld	hl, #_playfield
      0022D7 19               [11] 7134 	add	hl, de
      0022D8 EB               [ 4] 7135 	ex	de, hl
      0022D9 3Ar02r00         [13] 7136 	ld	a, (#_line + 0)
      0022DC 6F               [ 4] 7137 	ld	l, a
      0022DD 26 00            [ 7] 7138 	ld	h, #0x00
      0022DF 19               [11] 7139 	add	hl, de
      0022E0 3Ar90r00         [13] 7140 	ld	a,(#_topPiece + 0)
      0022E3 77               [ 7] 7141 	ld	(hl), a
                                   7142 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      0022E4 ED 4Br01r00      [20] 7143 	ld	bc, (_col)
      0022E8 06 00            [ 7] 7144 	ld	b, #0x00
      0022EA 69               [ 4] 7145 	ld	l, c
      0022EB 60               [ 4] 7146 	ld	h, b
      0022EC 29               [11] 7147 	add	hl, hl
      0022ED 09               [11] 7148 	add	hl, bc
      0022EE 29               [11] 7149 	add	hl, hl
      0022EF 29               [11] 7150 	add	hl, hl
      0022F0 EB               [ 4] 7151 	ex	de, hl
      0022F1 21r00r00         [10] 7152 	ld	hl, #_playfield
      0022F4 19               [11] 7153 	add	hl, de
      0022F5 EB               [ 4] 7154 	ex	de, hl
      0022F6 3Ar02r00         [13] 7155 	ld	a, (#_line + 0)
      0022F9 6F               [ 4] 7156 	ld	l, a
      0022FA 2C               [ 4] 7157 	inc	l
      0022FB 26 00            [ 7] 7158 	ld	h, #0x00
      0022FD 19               [11] 7159 	add	hl, de
      0022FE 3Ar91r00         [13] 7160 	ld	a,(#_midPiece + 0)
      002301 77               [ 7] 7161 	ld	(hl), a
                                   7162 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      002302 ED 4Br01r00      [20] 7163 	ld	bc, (_col)
      002306 06 00            [ 7] 7164 	ld	b, #0x00
      002308 69               [ 4] 7165 	ld	l, c
      002309 60               [ 4] 7166 	ld	h, b
      00230A 29               [11] 7167 	add	hl, hl
      00230B 09               [11] 7168 	add	hl, bc
      00230C 29               [11] 7169 	add	hl, hl
      00230D 29               [11] 7170 	add	hl, hl
      00230E EB               [ 4] 7171 	ex	de, hl
      00230F 21r00r00         [10] 7172 	ld	hl, #_playfield
      002312 19               [11] 7173 	add	hl, de
      002313 EB               [ 4] 7174 	ex	de, hl
      002314 3Ar02r00         [13] 7175 	ld	a, (#_line + 0)
      002317 6F               [ 4] 7176 	ld	l, a
      002318 2C               [ 4] 7177 	inc	l
      002319 2C               [ 4] 7178 	inc	l
      00231A 26 00            [ 7] 7179 	ld	h, #0x00
      00231C 19               [11] 7180 	add	hl, de
      00231D 3Ar92r00         [13] 7181 	ld	a,(#_bottomPiece + 0)
      002320 77               [ 7] 7182 	ld	(hl), a
                                   7183 ;src\/GameLogic.h:248: DrawPiece(line);
      002321 3Ar02r00         [13] 7184 	ld	a,(#_line + 0)
      002324 F5               [11] 7185 	push	af
      002325 33               [ 6] 7186 	inc	sp
      002326 CDr02r16         [17] 7187 	call	_DrawPiece
      002329 33               [ 6] 7188 	inc	sp
                                   7189 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      00232A ED 4Br01r00      [20] 7190 	ld	bc, (_col)
      00232E 06 00            [ 7] 7191 	ld	b, #0x00
      002330 69               [ 4] 7192 	ld	l, c
      002331 60               [ 4] 7193 	ld	h, b
      002332 29               [11] 7194 	add	hl, hl
      002333 09               [11] 7195 	add	hl, bc
      002334 29               [11] 7196 	add	hl, hl
      002335 29               [11] 7197 	add	hl, hl
      002336 EB               [ 4] 7198 	ex	de, hl
                                   7199 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      002337 21r00r00         [10] 7200 	ld	hl, #_playfield
      00233A 19               [11] 7201 	add	hl, de
      00233B EB               [ 4] 7202 	ex	de, hl
      00233C 3Ar02r00         [13] 7203 	ld	a,(#_line + 0)
      00233F C6 03            [ 7] 7204 	add	a, #0x03
      002341 4F               [ 4] 7205 	ld	c, a
      002342 69               [ 4] 7206 	ld	l, c
      002343 26 00            [ 7] 7207 	ld	h, #0x00
      002345 19               [11] 7208 	add	hl, de
      002346 7E               [ 7] 7209 	ld	a, (hl)
      002347 B7               [ 4] 7210 	or	a, a
      002348 28 06            [12] 7211 	jr	Z, 00148$
                                   7212 ;src\/GameLogic.h:254: HideArrowSprite();
      00234A CDr48r0A         [17] 7213 	call	_HideArrowSprite
      00234D C3r0Ar20         [10] 7214 	jp	00150$
      002350                       7215 00148$:
                                   7216 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002350 41               [ 4] 7217 	ld	b, c
      002351                       7218 00157$:
      002351 78               [ 4] 7219 	ld	a, b
      002352 D6 0C            [ 7] 7220 	sub	a, #0x0c
      002354 D2r0Ar20         [10] 7221 	jp	NC, 00150$
                                   7222 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002357 3Ar01r00         [13] 7223 	ld	a,(#_col + 0)
      00235A 87               [ 4] 7224 	add	a, a
      00235B 87               [ 4] 7225 	add	a, a
      00235C 87               [ 4] 7226 	add	a, a
      00235D 87               [ 4] 7227 	add	a, a
      00235E DD 77 FE         [19] 7228 	ld	-2 (ix), a
                                   7229 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002361 68               [ 4] 7230 	ld	l, b
      002362 26 00            [ 7] 7231 	ld	h, #0x00
      002364 19               [11] 7232 	add	hl, de
                                   7233 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002365 DD 7E FE         [19] 7234 	ld	a, -2 (ix)
      002368 C6 50            [ 7] 7235 	add	a, #0x50
      00236A DD 77 FE         [19] 7236 	ld	-2 (ix), a
                                   7237 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      00236D 6E               [ 7] 7238 	ld	l, (hl)
      00236E 78               [ 4] 7239 	ld	a, b
      00236F D6 0B            [ 7] 7240 	sub	a,#0x0b
      002371 20 16            [12] 7241 	jr	NZ, 00143$
      002373 B5               [ 4] 7242 	or	a,l
      002374 20 13            [12] 7243 	jr	NZ, 00143$
                                   7244 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002376 79               [ 4] 7245 	ld	a, c
      002377 87               [ 4] 7246 	add	a, a
      002378 87               [ 4] 7247 	add	a, a
      002379 87               [ 4] 7248 	add	a, a
      00237A 87               [ 4] 7249 	add	a, a
      00237B F5               [11] 7250 	push	af
      00237C 33               [ 6] 7251 	inc	sp
      00237D DD 7E FE         [19] 7252 	ld	a, -2 (ix)
      002380 F5               [11] 7253 	push	af
      002381 33               [ 6] 7254 	inc	sp
      002382 CDrEDr00         [17] 7255 	call	_DrawArrowSprite
      002385 F1               [10] 7256 	pop	af
                                   7257 ;src\/GameLogic.h:260: break;
      002386 C3r0Ar20         [10] 7258 	jp	00150$
      002389                       7259 00143$:
                                   7260 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      002389 7D               [ 4] 7261 	ld	a, l
      00238A B7               [ 4] 7262 	or	a, a
      00238B 28 14            [12] 7263 	jr	Z, 00158$
                                   7264 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      00238D 79               [ 4] 7265 	ld	a, c
      00238E 3D               [ 4] 7266 	dec	a
      00238F 87               [ 4] 7267 	add	a, a
      002390 87               [ 4] 7268 	add	a, a
      002391 87               [ 4] 7269 	add	a, a
      002392 87               [ 4] 7270 	add	a, a
      002393 F5               [11] 7271 	push	af
      002394 33               [ 6] 7272 	inc	sp
      002395 DD 7E FE         [19] 7273 	ld	a, -2 (ix)
      002398 F5               [11] 7274 	push	af
      002399 33               [ 6] 7275 	inc	sp
      00239A CDrEDr00         [17] 7276 	call	_DrawArrowSprite
      00239D F1               [10] 7277 	pop	af
                                   7278 ;src\/GameLogic.h:264: break;
      00239E C3r0Ar20         [10] 7279 	jp	00150$
      0023A1                       7280 00158$:
                                   7281 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0023A1 04               [ 4] 7282 	inc	b
      0023A2 48               [ 4] 7283 	ld	c, b
      0023A3 18 AC            [12] 7284 	jr	00157$
      0023A5                       7285 00152$:
                                   7286 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      0023A5 11 0C 0C         [10] 7287 	ld	de, #0x0c0c
      0023A8 D5               [11] 7288 	push	de
      0023A9 21rBDr23         [10] 7289 	ld	hl, #___str_6
      0023AC E5               [11] 7290 	push	hl
      0023AD CDrF1r0D         [17] 7291 	call	_DrawString
      0023B0 F1               [10] 7292 	pop	af
                                   7293 ;src\/GameLogic.h:276: Wait(60 * 5);
      0023B1 21 2C 01         [10] 7294 	ld	hl, #0x012c
      0023B4 E3               [19] 7295 	ex	(sp),hl
      0023B5 CDr00r00         [17] 7296 	call	_Wait
                                   7297 ;src\/GameLogic.h:278: }
      0023B8 DD F9            [10] 7298 	ld	sp,ix
      0023BA DD E1            [14] 7299 	pop	ix
      0023BC C9               [10] 7300 	ret
      0023BD                       7301 ___str_6:
      0023BD 47 41 4D 45 20 4F 56  7302 	.ascii "GAME OVER"
             45 52
      0023C6 00                    7303 	.db 0x00
                                   7304 ;src\/GameLogic.h:280: void TestCase() {
                                   7305 ;	---------------------------------
                                   7306 ; Function TestCase
                                   7307 ; ---------------------------------
      0023C7                       7308 _TestCase::
                                   7309 ;src\/GameLogic.h:301: playfield[2][ 8] = TILE_GREEN;
      0023C7 21r20r00         [10] 7310 	ld	hl, #(_playfield + 0x0020)
      0023CA 36 04            [10] 7311 	ld	(hl), #0x04
                                   7312 ;src\/GameLogic.h:302: playfield[2][ 9] = TILE_BLUE;
      0023CC 21r21r00         [10] 7313 	ld	hl, #(_playfield + 0x0021)
      0023CF 36 0C            [10] 7314 	ld	(hl), #0x0c
                                   7315 ;src\/GameLogic.h:304: playfield[0][10] = TILE_BLUE;
      0023D1 21r0Ar00         [10] 7316 	ld	hl, #(_playfield + 0x000a)
      0023D4 36 0C            [10] 7317 	ld	(hl), #0x0c
                                   7318 ;src\/GameLogic.h:305: playfield[1][10] = TILE_BLUE;
      0023D6 21r16r00         [10] 7319 	ld	hl, #(_playfield + 0x0016)
      0023D9 36 0C            [10] 7320 	ld	(hl), #0x0c
                                   7321 ;src\/GameLogic.h:306: playfield[2][10] = TILE_RED;
      0023DB 21r22r00         [10] 7322 	ld	hl, #(_playfield + 0x0022)
      0023DE 36 08            [10] 7323 	ld	(hl), #0x08
                                   7324 ;src\/GameLogic.h:307: playfield[4][10] = TILE_RED;
      0023E0 21r3Ar00         [10] 7325 	ld	hl, #(_playfield + 0x003a)
      0023E3 36 08            [10] 7326 	ld	(hl), #0x08
                                   7327 ;src\/GameLogic.h:308: playfield[5][10] = TILE_BLUE;
      0023E5 21r46r00         [10] 7328 	ld	hl, #(_playfield + 0x0046)
      0023E8 36 0C            [10] 7329 	ld	(hl), #0x0c
                                   7330 ;src\/GameLogic.h:310: playfield[0][11] = TILE_GREEN;
      0023EA 21r0Br00         [10] 7331 	ld	hl, #(_playfield + 0x000b)
      0023ED 36 04            [10] 7332 	ld	(hl), #0x04
                                   7333 ;src\/GameLogic.h:311: playfield[1][11] = TILE_GREEN;
      0023EF 21r17r00         [10] 7334 	ld	hl, #(_playfield + 0x0017)
      0023F2 36 04            [10] 7335 	ld	(hl), #0x04
                                   7336 ;src\/GameLogic.h:312: playfield[2][11] = TILE_RED;
      0023F4 21r23r00         [10] 7337 	ld	hl, #(_playfield + 0x0023)
      0023F7 36 08            [10] 7338 	ld	(hl), #0x08
                                   7339 ;src\/GameLogic.h:313: playfield[3][11] = EMPTY;
      0023F9 21r2Fr00         [10] 7340 	ld	hl, #(_playfield + 0x002f)
      0023FC 36 00            [10] 7341 	ld	(hl), #0x00
                                   7342 ;src\/GameLogic.h:314: playfield[4][11] = TILE_RED;
      0023FE 21r3Br00         [10] 7343 	ld	hl, #(_playfield + 0x003b)
      002401 36 08            [10] 7344 	ld	(hl), #0x08
                                   7345 ;src\/GameLogic.h:315: playfield[5][11] = TILE_RED;
      002403 21r47r00         [10] 7346 	ld	hl, #(_playfield + 0x0047)
      002406 36 08            [10] 7347 	ld	(hl), #0x08
                                   7348 ;src\/GameLogic.h:317: topPiece = TILE_BLUE;
      002408 3E 0C            [ 7] 7349 	ld	a, #0x0c
      00240A 32r90r00         [13] 7350 	ld	(#_topPiece), a
                                   7351 ;src\/GameLogic.h:318: midPiece = TILE_RED;
                                   7352 ;src\/GameLogic.h:319: bottomPiece = TILE_RED;
      00240D 3E 08            [ 7] 7353 	ld	a,#0x08
      00240F 32r91r00         [13] 7354 	ld	(#_midPiece),a
      002412 32r92r00         [13] 7355 	ld	(#_bottomPiece), a
                                   7356 ;src\/GameLogic.h:320: }
      002415 C9               [10] 7357 	ret
                                   7358 ;src\/GameLogic.h:322: void InitGame() {
                                   7359 ;	---------------------------------
                                   7360 ; Function InitGame
                                   7361 ; ---------------------------------
      002416                       7362 _InitGame::
                                   7363 ;src\/GameLogic.h:324: gameOver = FALSE;
      002416 21r00r00         [10] 7364 	ld	hl, #_gameOver
      002419 36 00            [10] 7365 	ld	(hl), #0x00
                                   7366 ;src\/GameLogic.h:325: line = INITIAL_LINE;
      00241B 21r02r00         [10] 7367 	ld	hl, #_line
      00241E 36 00            [10] 7368 	ld	(hl), #0x00
                                   7369 ;src\/GameLogic.h:326: col = INITIAL_COL;
      002420 21r01r00         [10] 7370 	ld	hl, #_col
      002423 36 02            [10] 7371 	ld	(hl), #0x02
                                   7372 ;src\/GameLogic.h:328: blocksRemoved = 0;
      002425 21 00 00         [10] 7373 	ld	hl, #0x0000
      002428 22r04r00         [16] 7374 	ld	(_blocksRemoved), hl
                                   7375 ;src\/GameLogic.h:329: level = 1;
      00242B 21r06r00         [10] 7376 	ld	hl, #_level
      00242E 36 01            [10] 7377 	ld	(hl), #0x01
                                   7378 ;src\/GameLogic.h:330: newLevel = FALSE;
      002430 21r07r00         [10] 7379 	ld	hl, #_newLevel
      002433 36 00            [10] 7380 	ld	(hl), #0x00
                                   7381 ;src\/GameLogic.h:331: speed = 60;
      002435 21r93r00         [10] 7382 	ld	hl, #_speed
      002438 36 3C            [10] 7383 	ld	(hl), #0x3c
                                   7384 ;src\/GameLogic.h:333: InitVRAM();
      00243A CDrABr12         [17] 7385 	call	_InitVRAM
                                   7386 ;src\/GameLogic.h:336: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      00243D 3Ar08r00         [13] 7387 	ld	a, (#_rndSeed + 0)
      002440 5F               [ 4] 7388 	ld	e, a
      002441 3A 9E FC         [13] 7389 	ld	a, (#_JIFFY + 0)
      002444 67               [ 4] 7390 	ld	h, a
      002445 2E 00            [ 7] 7391 	ld	l, #0x00
      002447 55               [ 4] 7392 	ld	d, l
      002448 06 08            [ 7] 7393 	ld	b, #0x08
      00244A                       7394 00133$:
      00244A 29               [11] 7395 	add	hl, hl
      00244B 30 01            [12] 7396 	jr	NC, 00134$
      00244D 19               [11] 7397 	add	hl, de
      00244E                       7398 00134$:
      00244E 10 FA            [13] 7399 	djnz	00133$
      002450 7D               [ 4] 7400 	ld	a, l
      002451 C6 63            [ 7] 7401 	add	a, #0x63
      002453 4F               [ 4] 7402 	ld	c, a
      002454 3Ar08r00         [13] 7403 	ld	a, (#_rndSeed + 0)
      002457 5F               [ 4] 7404 	ld	e, a
      002458 3A 9E FC         [13] 7405 	ld	a, (#_JIFFY + 0)
      00245B 67               [ 4] 7406 	ld	h, a
      00245C 2E 00            [ 7] 7407 	ld	l, #0x00
      00245E 55               [ 4] 7408 	ld	d, l
      00245F 06 08            [ 7] 7409 	ld	b, #0x08
      002461                       7410 00135$:
      002461 29               [11] 7411 	add	hl, hl
      002462 30 01            [12] 7412 	jr	NC, 00136$
      002464 19               [11] 7413 	add	hl, de
      002465                       7414 00136$:
      002465 10 FA            [13] 7415 	djnz	00135$
      002467 79               [ 4] 7416 	ld	a, c
      002468 F5               [11] 7417 	push	af
      002469 7D               [ 4] 7418 	ld	a, l
      00246A 33               [ 6] 7419 	inc	sp
      00246B F5               [11] 7420 	push	af
      00246C 33               [ 6] 7421 	inc	sp
      00246D 3Ar08r00         [13] 7422 	ld	a,(#_rndSeed + 0)
      002470 F5               [11] 7423 	push	af
      002471 33               [ 6] 7424 	inc	sp
      002472 CDr50r00         [17] 7425 	call	_InitRnd
      002475 F1               [10] 7426 	pop	af
      002476 33               [ 6] 7427 	inc	sp
                                   7428 ;src\/GameLogic.h:339: RandomPiece();
      002477 CDrCDr1E         [17] 7429 	call	_RandomPiece
                                   7430 ;src\/GameLogic.h:342: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00247A 0E 00            [ 7] 7431 	ld	c, #0x00
      00247C                       7432 00107$:
      00247C 79               [ 4] 7433 	ld	a, c
      00247D D6 0C            [ 7] 7434 	sub	a, #0x0c
      00247F 30 20            [12] 7435 	jr	NC, 00102$
                                   7436 ;src\/GameLogic.h:343: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002481 06 00            [ 7] 7437 	ld	b, #0x00
      002483                       7438 00104$:
      002483 78               [ 4] 7439 	ld	a, b
      002484 D6 06            [ 7] 7440 	sub	a, #0x06
      002486 30 16            [12] 7441 	jr	NC, 00108$
                                   7442 ;src\/GameLogic.h:344: playfield[col][line] = EMPTY;
      002488 58               [ 4] 7443 	ld	e, b
      002489 16 00            [ 7] 7444 	ld	d, #0x00
      00248B 6B               [ 4] 7445 	ld	l, e
      00248C 62               [ 4] 7446 	ld	h, d
      00248D 29               [11] 7447 	add	hl, hl
      00248E 19               [11] 7448 	add	hl, de
      00248F 29               [11] 7449 	add	hl, hl
      002490 29               [11] 7450 	add	hl, hl
      002491 11r00r00         [10] 7451 	ld	de, #_playfield
      002494 19               [11] 7452 	add	hl, de
      002495 59               [ 4] 7453 	ld	e, c
      002496 16 00            [ 7] 7454 	ld	d, #0x00
      002498 19               [11] 7455 	add	hl, de
      002499 36 00            [10] 7456 	ld	(hl), #0x00
                                   7457 ;src\/GameLogic.h:343: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00249B 04               [ 4] 7458 	inc	b
      00249C 18 E5            [12] 7459 	jr	00104$
      00249E                       7460 00108$:
                                   7461 ;src\/GameLogic.h:342: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00249E 0C               [ 4] 7462 	inc	c
      00249F 18 DB            [12] 7463 	jr	00107$
      0024A1                       7464 00102$:
                                   7465 ;src\/GameLogic.h:349: TestCase();
      0024A1 CDrC7r23         [17] 7466 	call	_TestCase
                                   7467 ;src\/GameLogic.h:353: DrawBackground();
      0024A4 CDr7Cr12         [17] 7468 	call	_DrawBackground
                                   7469 ;src\/GameLogic.h:355: DrawPlayfield();
      0024A7 CDr25r16         [17] 7470 	call	_DrawPlayfield
                                   7471 ;src\/GameLogic.h:357: DrawScore();
      0024AA CDr7Fr10         [17] 7472 	call	_DrawScore
                                   7473 ;src\/GameLogic.h:359: GameLoop();
                                   7474 ;src\/GameLogic.h:360: }
      0024AD C3rEDr1F         [10] 7475 	jp	_GameLoop
                                   7476 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7477 ;	---------------------------------
                                   7478 ; Function ChangeFontColor
                                   7479 ; ---------------------------------
      0024B0                       7480 _ChangeFontColor::
                                   7481 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0024B0 21 02 00         [10] 7482 	ld	hl, #2
      0024B3 39               [11] 7483 	add	hl, sp
      0024B4 7E               [ 7] 7484 	ld	a, (hl)
      0024B5 F5               [11] 7485 	push	af
      0024B6 33               [ 6] 7486 	inc	sp
      0024B7 21 00 03         [10] 7487 	ld	hl, #0x0300
      0024BA E5               [11] 7488 	push	hl
      0024BB 21 78 21         [10] 7489 	ld	hl, #0x2178
      0024BE E5               [11] 7490 	push	hl
      0024BF CDr00r00         [17] 7491 	call	_FILVRM
      0024C2 F1               [10] 7492 	pop	af
      0024C3 F1               [10] 7493 	pop	af
      0024C4 33               [ 6] 7494 	inc	sp
                                   7495 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0024C5 21 02 00         [10] 7496 	ld	hl, #2
      0024C8 39               [11] 7497 	add	hl, sp
      0024C9 7E               [ 7] 7498 	ld	a, (hl)
      0024CA F5               [11] 7499 	push	af
      0024CB 33               [ 6] 7500 	inc	sp
      0024CC 21 00 03         [10] 7501 	ld	hl, #0x0300
      0024CF E5               [11] 7502 	push	hl
      0024D0 21 78 29         [10] 7503 	ld	hl, #0x2978
      0024D3 E5               [11] 7504 	push	hl
      0024D4 CDr00r00         [17] 7505 	call	_FILVRM
      0024D7 F1               [10] 7506 	pop	af
      0024D8 F1               [10] 7507 	pop	af
      0024D9 33               [ 6] 7508 	inc	sp
                                   7509 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0024DA 21 02 00         [10] 7510 	ld	hl, #2
      0024DD 39               [11] 7511 	add	hl, sp
      0024DE 7E               [ 7] 7512 	ld	a, (hl)
      0024DF F5               [11] 7513 	push	af
      0024E0 33               [ 6] 7514 	inc	sp
      0024E1 21 00 03         [10] 7515 	ld	hl, #0x0300
      0024E4 E5               [11] 7516 	push	hl
      0024E5 21 78 31         [10] 7517 	ld	hl, #0x3178
      0024E8 E5               [11] 7518 	push	hl
      0024E9 CDr00r00         [17] 7519 	call	_FILVRM
      0024EC F1               [10] 7520 	pop	af
      0024ED F1               [10] 7521 	pop	af
      0024EE 33               [ 6] 7522 	inc	sp
                                   7523 ;src\/Intro.h:7: }
      0024EF C9               [10] 7524 	ret
                                   7525 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7526 ;	---------------------------------
                                   7527 ; Function ScrollDownFont
                                   7528 ; ---------------------------------
      0024F0                       7529 _ScrollDownFont::
      0024F0 DD E5            [15] 7530 	push	ix
      0024F2 DD 21 00 00      [14] 7531 	ld	ix,#0
      0024F6 DD 39            [15] 7532 	add	ix,sp
      0024F8 F5               [11] 7533 	push	af
                                   7534 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0024F9 11 78 09         [10] 7535 	ld	de, #0x0978
      0024FC                       7536 00107$:
      0024FC 7B               [ 4] 7537 	ld	a, e
      0024FD D6 78            [ 7] 7538 	sub	a, #0x78
      0024FF 7A               [ 4] 7539 	ld	a, d
      002500 DE 0C            [ 7] 7540 	sbc	a, #0x0c
      002502 30 44            [12] 7541 	jr	NC, 00109$
                                   7542 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002504 33               [ 6] 7543 	inc	sp
      002505 33               [ 6] 7544 	inc	sp
      002506 D5               [11] 7545 	push	de
      002507 DD 7E FE         [19] 7546 	ld	a, -2 (ix)
      00250A C6 07            [ 7] 7547 	add	a, #0x07
      00250C 4F               [ 4] 7548 	ld	c, a
      00250D DD 7E FF         [19] 7549 	ld	a, -1 (ix)
      002510 CE 00            [ 7] 7550 	adc	a, #0x00
      002512 47               [ 4] 7551 	ld	b, a
      002513                       7552 00104$:
      002513 78               [ 4] 7553 	ld	a, b
      002514 B1               [ 4] 7554 	or	a, c
      002515 28 1A            [12] 7555 	jr	Z, 00101$
                                   7556 ;src\/Intro.h:27: value = RDVRM(j-1);
      002517 69               [ 4] 7557 	ld	l, c
      002518 60               [ 4] 7558 	ld	h, b
      002519 2B               [ 6] 7559 	dec	hl
      00251A C5               [11] 7560 	push	bc
      00251B D5               [11] 7561 	push	de
      00251C CDr00r00         [17] 7562 	call	_RDVRM
      00251F D1               [10] 7563 	pop	de
      002520 C1               [10] 7564 	pop	bc
                                   7565 ;src\/Intro.h:29: WRTVRM(j, 0);
      002521 C5               [11] 7566 	push	bc
      002522 D5               [11] 7567 	push	de
      002523 AF               [ 4] 7568 	xor	a, a
      002524 F5               [11] 7569 	push	af
      002525 33               [ 6] 7570 	inc	sp
      002526 C5               [11] 7571 	push	bc
      002527 CDr00r00         [17] 7572 	call	_WRTVRM
      00252A F1               [10] 7573 	pop	af
      00252B 33               [ 6] 7574 	inc	sp
      00252C D1               [10] 7575 	pop	de
      00252D C1               [10] 7576 	pop	bc
                                   7577 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      00252E 0B               [ 6] 7578 	dec	bc
      00252F 18 E2            [12] 7579 	jr	00104$
      002531                       7580 00101$:
                                   7581 ;src\/Intro.h:31: WRTVRM(i, 0);
      002531 AF               [ 4] 7582 	xor	a, a
      002532 F5               [11] 7583 	push	af
      002533 33               [ 6] 7584 	inc	sp
      002534 D5               [11] 7585 	push	de
      002535 CDr00r00         [17] 7586 	call	_WRTVRM
      002538 F1               [10] 7587 	pop	af
      002539 33               [ 6] 7588 	inc	sp
                                   7589 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00253A DD 7E FE         [19] 7590 	ld	a, -2 (ix)
      00253D C6 08            [ 7] 7591 	add	a, #0x08
      00253F 5F               [ 4] 7592 	ld	e, a
      002540 DD 7E FF         [19] 7593 	ld	a, -1 (ix)
      002543 CE 00            [ 7] 7594 	adc	a, #0x00
      002545 57               [ 4] 7595 	ld	d, a
      002546 18 B4            [12] 7596 	jr	00107$
      002548                       7597 00109$:
                                   7598 ;src\/Intro.h:35: }
      002548 DD F9            [10] 7599 	ld	sp, ix
      00254A DD E1            [14] 7600 	pop	ix
      00254C C9               [10] 7601 	ret
                                   7602 ;src\/Intro.h:37: void Intro() {
                                   7603 ;	---------------------------------
                                   7604 ; Function Intro
                                   7605 ; ---------------------------------
      00254D                       7606 _Intro::
                                   7607 ;src\/Intro.h:41: InitVRAM();
      00254D CDrABr12         [17] 7608 	call	_InitVRAM
                                   7609 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002550 11 0B 0B         [10] 7610 	ld	de, #0x0b0b
      002553 D5               [11] 7611 	push	de
      002554 21rC2r25         [10] 7612 	ld	hl, #___str_7
      002557 E5               [11] 7613 	push	hl
      002558 CDrF1r0D         [17] 7614 	call	_DrawString
      00255B F1               [10] 7615 	pop	af
      00255C F1               [10] 7616 	pop	af
                                   7617 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      00255D 11 09 0D         [10] 7618 	ld	de, #0x0d09
      002560 D5               [11] 7619 	push	de
      002561 21rCCr25         [10] 7620 	ld	hl, #___str_8
      002564 E5               [11] 7621 	push	hl
      002565 CDrF1r0D         [17] 7622 	call	_DrawString
      002568 F1               [10] 7623 	pop	af
                                   7624 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002569 26 F0            [ 7] 7625 	ld	h,#0xf0
      00256B E3               [19] 7626 	ex	(sp),hl
      00256C 33               [ 6] 7627 	inc	sp
      00256D CDrB0r24         [17] 7628 	call	_ChangeFontColor
      002570 33               [ 6] 7629 	inc	sp
                                   7630 ;src\/Intro.h:56: Wait(2 * 60);
      002571 21 78 00         [10] 7631 	ld	hl, #0x0078
      002574 E5               [11] 7632 	push	hl
      002575 CDr00r00         [17] 7633 	call	_Wait
      002578 F1               [10] 7634 	pop	af
                                   7635 ;src\/Intro.h:58: while(counter++ < 20) {
      002579 0E 00            [ 7] 7636 	ld	c, #0x00
      00257B                       7637 00112$:
      00257B 79               [ 4] 7638 	ld	a, c
      00257C D6 14            [ 7] 7639 	sub	a, #0x14
      00257E D0               [11] 7640 	ret	NC
      00257F 0C               [ 4] 7641 	inc	c
                                   7642 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002580 21 9E FC         [10] 7643 	ld	hl, #_JIFFY
      002583 46               [ 7] 7644 	ld	b, (hl)
                                   7645 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002584                       7646 00101$:
      002584 58               [ 4] 7647 	ld	e, b
      002585 16 00            [ 7] 7648 	ld	d, #0x00
      002587 2A 9E FC         [16] 7649 	ld	hl, (_JIFFY)
      00258A BF               [ 4] 7650 	cp	a, a
      00258B ED 52            [15] 7651 	sbc	hl, de
      00258D 28 F5            [12] 7652 	jr	Z, 00101$
                                   7653 ;src\/Intro.h:63: if(counter == 15) {
      00258F 79               [ 4] 7654 	ld	a, c
      002590 D6 0F            [ 7] 7655 	sub	a, #0x0f
      002592 20 0C            [12] 7656 	jr	NZ, 00110$
                                   7657 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002594 C5               [11] 7658 	push	bc
      002595 3E 40            [ 7] 7659 	ld	a, #0x40
      002597 F5               [11] 7660 	push	af
      002598 33               [ 6] 7661 	inc	sp
      002599 CDrB0r24         [17] 7662 	call	_ChangeFontColor
      00259C 33               [ 6] 7663 	inc	sp
      00259D C1               [10] 7664 	pop	bc
      00259E 18 DB            [12] 7665 	jr	00112$
      0025A0                       7666 00110$:
                                   7667 ;src\/Intro.h:66: else if(counter == 10) {
      0025A0 79               [ 4] 7668 	ld	a, c
      0025A1 D6 0A            [ 7] 7669 	sub	a, #0x0a
      0025A3 20 0C            [12] 7670 	jr	NZ, 00107$
                                   7671 ;src\/Intro.h:67: ChangeFontColor(0x50);
      0025A5 C5               [11] 7672 	push	bc
      0025A6 3E 50            [ 7] 7673 	ld	a, #0x50
      0025A8 F5               [11] 7674 	push	af
      0025A9 33               [ 6] 7675 	inc	sp
      0025AA CDrB0r24         [17] 7676 	call	_ChangeFontColor
      0025AD 33               [ 6] 7677 	inc	sp
      0025AE C1               [10] 7678 	pop	bc
      0025AF 18 CA            [12] 7679 	jr	00112$
      0025B1                       7680 00107$:
                                   7681 ;src\/Intro.h:69: else if(counter == 5) {
      0025B1 79               [ 4] 7682 	ld	a, c
      0025B2 D6 05            [ 7] 7683 	sub	a, #0x05
      0025B4 20 C5            [12] 7684 	jr	NZ, 00112$
                                   7685 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      0025B6 C5               [11] 7686 	push	bc
      0025B7 3E E0            [ 7] 7687 	ld	a, #0xe0
      0025B9 F5               [11] 7688 	push	af
      0025BA 33               [ 6] 7689 	inc	sp
      0025BB CDrB0r24         [17] 7690 	call	_ChangeFontColor
      0025BE 33               [ 6] 7691 	inc	sp
      0025BF C1               [10] 7692 	pop	bc
                                   7693 ;src\/Intro.h:140: }
      0025C0 18 B9            [12] 7694 	jr	00112$
      0025C2                       7695 ___str_7:
      0025C2 41 20 47 41 4D 45 20  7696 	.ascii "A GAME BY"
             42 59
      0025CB 00                    7697 	.db 0x00
      0025CC                       7698 ___str_8:
      0025CC 41 4E 44 52 45 20 42  7699 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0025DA 00                    7700 	.db 0x00
                                   7701 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7702 ;	---------------------------------
                                   7703 ; Function SetBlock
                                   7704 ; ---------------------------------
      0025DB                       7705 _SetBlock::
      0025DB DD E5            [15] 7706 	push	ix
      0025DD DD 21 00 00      [14] 7707 	ld	ix,#0
      0025E1 DD 39            [15] 7708 	add	ix,sp
                                   7709 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0025E3 DD 7E 04         [19] 7710 	ld	a, 4 (ix)
      0025E6 06 00            [ 7] 7711 	ld	b, #0x00
      0025E8 4F               [ 4] 7712 	ld	c, a
      0025E9 78               [ 4] 7713 	ld	a, b
      0025EA C6 18            [ 7] 7714 	add	a, #0x18
      0025EC 47               [ 4] 7715 	ld	b, a
      0025ED DD 6E 05         [19] 7716 	ld	l, 5 (ix)
      0025F0 26 00            [ 7] 7717 	ld	h, #0x00
      0025F2 29               [11] 7718 	add	hl, hl
      0025F3 29               [11] 7719 	add	hl, hl
      0025F4 29               [11] 7720 	add	hl, hl
      0025F5 29               [11] 7721 	add	hl, hl
      0025F6 29               [11] 7722 	add	hl, hl
      0025F7 09               [11] 7723 	add	hl, bc
      0025F8 DD 7E 06         [19] 7724 	ld	a, 6 (ix)
      0025FB F5               [11] 7725 	push	af
      0025FC 33               [ 6] 7726 	inc	sp
      0025FD E5               [11] 7727 	push	hl
      0025FE CDr00r00         [17] 7728 	call	_WRTVRM
      002601 F1               [10] 7729 	pop	af
      002602 33               [ 6] 7730 	inc	sp
                                   7731 ;src\/Title.h:16: }
      002603 DD E1            [14] 7732 	pop	ix
      002605 C9               [10] 7733 	ret
                                   7734 ;src\/Title.h:18: void TitleScreen() {
                                   7735 ;	---------------------------------
                                   7736 ; Function TitleScreen
                                   7737 ; ---------------------------------
      002606                       7738 _TitleScreen::
      002606 DD E5            [15] 7739 	push	ix
      002608 DD 21 00 00      [14] 7740 	ld	ix,#0
      00260C DD 39            [15] 7741 	add	ix,sp
      00260E 21 EB FF         [10] 7742 	ld	hl, #-21
      002611 39               [11] 7743 	add	hl, sp
      002612 F9               [ 6] 7744 	ld	sp, hl
                                   7745 ;src\/Title.h:19: byte colorIndex = 0;
      002613 0E 00            [ 7] 7746 	ld	c, #0x00
                                   7747 ;src\/Title.h:52: const char blocks[] = {
      002615 21 00 00         [10] 7748 	ld	hl, #0
      002618 39               [11] 7749 	add	hl, sp
      002619 EB               [ 4] 7750 	ex	de, hl
      00261A 3E 8E            [ 7] 7751 	ld	a, #0x8e
      00261C 12               [ 7] 7752 	ld	(de), a
      00261D 6B               [ 4] 7753 	ld	l, e
      00261E 62               [ 4] 7754 	ld	h, d
      00261F 23               [ 6] 7755 	inc	hl
      002620 36 8F            [10] 7756 	ld	(hl), #0x8f
      002622 6B               [ 4] 7757 	ld	l, e
      002623 62               [ 4] 7758 	ld	h, d
      002624 23               [ 6] 7759 	inc	hl
      002625 23               [ 6] 7760 	inc	hl
      002626 36 90            [10] 7761 	ld	(hl), #0x90
      002628 6B               [ 4] 7762 	ld	l, e
      002629 62               [ 4] 7763 	ld	h, d
      00262A 23               [ 6] 7764 	inc	hl
      00262B 23               [ 6] 7765 	inc	hl
      00262C 23               [ 6] 7766 	inc	hl
      00262D 36 91            [10] 7767 	ld	(hl), #0x91
      00262F 21 04 00         [10] 7768 	ld	hl, #0x0004
      002632 19               [11] 7769 	add	hl, de
      002633 36 92            [10] 7770 	ld	(hl), #0x92
      002635 21 05 00         [10] 7771 	ld	hl, #0x0005
      002638 19               [11] 7772 	add	hl, de
      002639 36 93            [10] 7773 	ld	(hl), #0x93
      00263B 21 06 00         [10] 7774 	ld	hl, #0x0006
      00263E 19               [11] 7775 	add	hl, de
      00263F 36 94            [10] 7776 	ld	(hl), #0x94
                                   7777 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002641 21 07 00         [10] 7778 	ld	hl, #7
      002644 39               [11] 7779 	add	hl, sp
      002645 DD 75 F6         [19] 7780 	ld	-10 (ix), l
      002648 DD 74 F7         [19] 7781 	ld	-9 (ix), h
      00264B 36 8E            [10] 7782 	ld	(hl), #0x8e
      00264D DD 6E F6         [19] 7783 	ld	l, -10 (ix)
      002650 DD 66 F7         [19] 7784 	ld	h, -9 (ix)
      002653 23               [ 6] 7785 	inc	hl
      002654 36 90            [10] 7786 	ld	(hl), #0x90
      002656 DD 6E F6         [19] 7787 	ld	l, -10 (ix)
      002659 DD 66 F7         [19] 7788 	ld	h, -9 (ix)
      00265C 23               [ 6] 7789 	inc	hl
      00265D 23               [ 6] 7790 	inc	hl
      00265E 36 92            [10] 7791 	ld	(hl), #0x92
      002660 DD 6E F6         [19] 7792 	ld	l, -10 (ix)
      002663 DD 66 F7         [19] 7793 	ld	h, -9 (ix)
      002666 23               [ 6] 7794 	inc	hl
      002667 23               [ 6] 7795 	inc	hl
      002668 23               [ 6] 7796 	inc	hl
      002669 36 94            [10] 7797 	ld	(hl), #0x94
                                   7798 ;src\/Title.h:65: InitVRAM();
      00266B C5               [11] 7799 	push	bc
      00266C D5               [11] 7800 	push	de
      00266D CDrABr12         [17] 7801 	call	_InitVRAM
      002670 21 00 01         [10] 7802 	ld	hl, #0x0100
      002673 E5               [11] 7803 	push	hl
      002674 21rEDr27         [10] 7804 	ld	hl, #_TitleScreen_title_65536_285
      002677 E5               [11] 7805 	push	hl
      002678 21 00 18         [10] 7806 	ld	hl, #0x1800
      00267B E5               [11] 7807 	push	hl
      00267C CDr00r00         [17] 7808 	call	_LDIRVM
      00267F 21 06 00         [10] 7809 	ld	hl, #6
      002682 39               [11] 7810 	add	hl, sp
      002683 F9               [ 6] 7811 	ld	sp, hl
      002684 11 05 0D         [10] 7812 	ld	de, #0x0d05
      002687 D5               [11] 7813 	push	de
      002688 21rEDr28         [10] 7814 	ld	hl, #___str_9
      00268B E5               [11] 7815 	push	hl
      00268C CDrF1r0D         [17] 7816 	call	_DrawString
      00268F F1               [10] 7817 	pop	af
      002690 26 17            [ 7] 7818 	ld	h,#0x17
      002692 E3               [19] 7819 	ex	(sp),hl
      002693 33               [ 6] 7820 	inc	sp
      002694 AF               [ 4] 7821 	xor	a, a
      002695 F5               [11] 7822 	push	af
      002696 33               [ 6] 7823 	inc	sp
      002697 21r04r29         [10] 7824 	ld	hl, #___str_10
      00269A E5               [11] 7825 	push	hl
      00269B CDrF1r0D         [17] 7826 	call	_DrawString
      00269E F1               [10] 7827 	pop	af
      00269F F1               [10] 7828 	pop	af
      0026A0 11 19 17         [10] 7829 	ld	de, #0x1719
      0026A3 D5               [11] 7830 	push	de
      0026A4 21r19r29         [10] 7831 	ld	hl, #___str_11
      0026A7 E5               [11] 7832 	push	hl
      0026A8 CDrF1r0D         [17] 7833 	call	_DrawString
      0026AB F1               [10] 7834 	pop	af
      0026AC F1               [10] 7835 	pop	af
      0026AD D1               [10] 7836 	pop	de
      0026AE C1               [10] 7837 	pop	bc
                                   7838 ;src\/Title.h:73: while(TRUE) {
      0026AF                       7839 00120$:
                                   7840 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      0026AF DD 36 FD 00      [19] 7841 	ld	-3 (ix), #0
                                   7842 ;src\/Title.h:78: word counter = 0;
      0026B3 AF               [ 4] 7843 	xor	a, a
      0026B4 DD 77 FE         [19] 7844 	ld	-2 (ix), a
      0026B7 DD 77 FF         [19] 7845 	ld	-1 (ix), a
                                   7846 ;src\/Title.h:88: do {
      0026BA                       7847 00106$:
                                   7848 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      0026BA C5               [11] 7849 	push	bc
      0026BB D5               [11] 7850 	push	de
      0026BC 11 1F 1F         [10] 7851 	ld	de, #0x1f1f
      0026BF D5               [11] 7852 	push	de
      0026C0 CDrD9r00         [17] 7853 	call	_GetRandomInInterval
      0026C3 F1               [10] 7854 	pop	af
                                   7855 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      0026C4 DD 75 F8         [19] 7856 	ld	-8 (ix), l
      0026C7 11 07 07         [10] 7857 	ld	de, #0x0707
      0026CA D5               [11] 7858 	push	de
      0026CB CDrD9r00         [17] 7859 	call	_GetRandomInInterval
      0026CE F1               [10] 7860 	pop	af
      0026CF D1               [10] 7861 	pop	de
      0026D0 C1               [10] 7862 	pop	bc
      0026D1 DD 75 F9         [19] 7863 	ld	-7 (ix), l
                                   7864 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      0026D4 DD 6E F8         [19] 7865 	ld	l, -8 (ix)
      0026D7 3E 00            [ 7] 7866 	ld	a, #0x00
      0026D9 C6 18            [ 7] 7867 	add	a, #0x18
      0026DB 67               [ 4] 7868 	ld	h, a
      0026DC DD 7E F9         [19] 7869 	ld	a, -7 (ix)
      0026DF 06 00            [ 7] 7870 	ld	b, #0x00
      0026E1 87               [ 4] 7871 	add	a, a
      0026E2 CB 10            [ 8] 7872 	rl	b
      0026E4 87               [ 4] 7873 	add	a, a
      0026E5 CB 10            [ 8] 7874 	rl	b
      0026E7 87               [ 4] 7875 	add	a, a
      0026E8 CB 10            [ 8] 7876 	rl	b
      0026EA 87               [ 4] 7877 	add	a, a
      0026EB CB 10            [ 8] 7878 	rl	b
      0026ED 87               [ 4] 7879 	add	a, a
      0026EE CB 10            [ 8] 7880 	rl	b
      0026F0 85               [ 4] 7881 	add	a, l
      0026F1 6F               [ 4] 7882 	ld	l, a
      0026F2 78               [ 4] 7883 	ld	a, b
      0026F3 8C               [ 4] 7884 	adc	a, h
      0026F4 67               [ 4] 7885 	ld	h, a
      0026F5 C5               [11] 7886 	push	bc
      0026F6 D5               [11] 7887 	push	de
      0026F7 CDr00r00         [17] 7888 	call	_RDVRM
      0026FA D1               [10] 7889 	pop	de
      0026FB C1               [10] 7890 	pop	bc
      0026FC DD 75 FA         [19] 7891 	ld	-6 (ix), l
                                   7892 ;src\/Title.h:102: if(counter++ > 1000) {
      0026FF DD 46 FE         [19] 7893 	ld	b, -2 (ix)
      002702 DD 6E FF         [19] 7894 	ld	l, -1 (ix)
      002705 DD 34 FE         [23] 7895 	inc	-2 (ix)
      002708 20 03            [12] 7896 	jr	NZ, 00193$
      00270A DD 34 FF         [23] 7897 	inc	-1 (ix)
      00270D                       7898 00193$:
      00270D 3E E8            [ 7] 7899 	ld	a, #0xe8
      00270F B8               [ 4] 7900 	cp	a, b
      002710 3E 03            [ 7] 7901 	ld	a, #0x03
      002712 9D               [ 4] 7902 	sbc	a, l
      002713 30 0F            [12] 7903 	jr	NC, 00107$
                                   7904 ;src\/Title.h:103: colorIndex++;
      002715 0C               [ 4] 7905 	inc	c
                                   7906 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002716 79               [ 4] 7907 	ld	a, c
      002717 D6 03            [ 7] 7908 	sub	a, #0x03
      002719 38 02            [12] 7909 	jr	C, 00102$
      00271B 0E 00            [ 7] 7910 	ld	c, #0x00
      00271D                       7911 00102$:
                                   7912 ;src\/Title.h:119: counter = 0;
      00271D AF               [ 4] 7913 	xor	a, a
      00271E DD 77 FE         [19] 7914 	ld	-2 (ix), a
      002721 DD 77 FF         [19] 7915 	ld	-1 (ix), a
      002724                       7916 00107$:
                                   7917 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      002724 DD 7E FA         [19] 7918 	ld	a, -6 (ix)
      002727 B7               [ 4] 7919 	or	a, a
      002728 28 90            [12] 7920 	jr	Z, 00106$
      00272A 79               [ 4] 7921 	ld	a, c
      00272B 3C               [ 4] 7922 	inc	a
      00272C F5               [11] 7923 	push	af
      00272D 17               [ 4] 7924 	rla
      00272E 9F               [ 4] 7925 	sbc	a, a
      00272F 47               [ 4] 7926 	ld	b, a
      002730 F1               [10] 7927 	pop	af
      002731 DD 86 F6         [19] 7928 	add	a, -10 (ix)
      002734 DD 77 FB         [19] 7929 	ld	-5 (ix), a
      002737 78               [ 4] 7930 	ld	a, b
      002738 DD 8E F7         [19] 7931 	adc	a, -9 (ix)
      00273B DD 77 FC         [19] 7932 	ld	-4 (ix), a
      00273E DD 6E FB         [19] 7933 	ld	l, -5 (ix)
      002741 DD 66 FC         [19] 7934 	ld	h, -4 (ix)
      002744 46               [ 7] 7935 	ld	b, (hl)
      002745 DD 7E FA         [19] 7936 	ld	a, -6 (ix)
      002748 90               [ 4] 7937 	sub	a, b
      002749 CArBAr26         [10] 7938 	jp	Z,00106$
                                   7939 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00274C 06 00            [ 7] 7940 	ld	b, #0x00
      00274E                       7941 00123$:
      00274E 78               [ 4] 7942 	ld	a, b
      00274F D6 0A            [ 7] 7943 	sub	a, #0x0a
      002751 30 79            [12] 7944 	jr	NC, 00118$
                                   7945 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002753 2A 9E FC         [16] 7946 	ld	hl, (_JIFFY)
      002756 DD 75 FE         [19] 7947 	ld	-2 (ix), l
      002759 DD 74 FF         [19] 7948 	ld	-1 (ix), h
                                   7949 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      00275C                       7950 00109$:
      00275C FD 21 9E FC      [14] 7951 	ld	iy, #_JIFFY
      002760 FD 7E 00         [19] 7952 	ld	a, 0 (iy)
      002763 DD 96 FE         [19] 7953 	sub	a, -2 (ix)
      002766 20 08            [12] 7954 	jr	NZ, 00195$
      002768 FD 7E 01         [19] 7955 	ld	a, 1 (iy)
      00276B DD 96 FF         [19] 7956 	sub	a, -1 (ix)
      00276E 28 EC            [12] 7957 	jr	Z, 00109$
      002770                       7958 00195$:
                                   7959 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002770 DD 6E FD         [19] 7960 	ld	l, -3 (ix)
      002773 26 00            [ 7] 7961 	ld	h, #0x00
      002775 19               [11] 7962 	add	hl, de
      002776 7E               [ 7] 7963 	ld	a, (hl)
      002777 C5               [11] 7964 	push	bc
      002778 D5               [11] 7965 	push	de
      002779 F5               [11] 7966 	push	af
      00277A 33               [ 6] 7967 	inc	sp
      00277B DD 66 F9         [19] 7968 	ld	h, -7 (ix)
      00277E DD 6E F8         [19] 7969 	ld	l, -8 (ix)
      002781 E5               [11] 7970 	push	hl
      002782 CDrDBr25         [17] 7971 	call	_SetBlock
      002785 F1               [10] 7972 	pop	af
      002786 33               [ 6] 7973 	inc	sp
      002787 D1               [10] 7974 	pop	de
      002788 C1               [10] 7975 	pop	bc
                                   7976 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002789 DD 7E FD         [19] 7977 	ld	a, -3 (ix)
      00278C DD 34 FD         [23] 7978 	inc	-3 (ix)
      00278F D6 07            [ 7] 7979 	sub	a, #0x07
      002791 38 04            [12] 7980 	jr	C, 00113$
      002793 DD 36 FD 00      [19] 7981 	ld	-3 (ix), #0
      002797                       7982 00113$:
                                   7983 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002797 C5               [11] 7984 	push	bc
      002798 D5               [11] 7985 	push	de
      002799 2E 00            [ 7] 7986 	ld	l, #0x00
      00279B CDr00r00         [17] 7987 	call	_GTTRIG
                                   7988 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      00279E DD 75 FF         [19] 7989 	ld	-1 (ix), l
      0027A1 2E 01            [ 7] 7990 	ld	l, #0x01
      0027A3 CDr00r00         [17] 7991 	call	_GTTRIG
      0027A6 D1               [10] 7992 	pop	de
      0027A7 C1               [10] 7993 	pop	bc
                                   7994 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      0027A8 E5               [11] 7995 	push	hl
      0027A9 C5               [11] 7996 	push	bc
      0027AA D5               [11] 7997 	push	de
      0027AB 2E 03            [ 7] 7998 	ld	l, #0x03
      0027AD CDr00r00         [17] 7999 	call	_GTTRIG
      0027B0 7D               [ 4] 8000 	ld	a, l
      0027B1 D1               [10] 8001 	pop	de
      0027B2 C1               [10] 8002 	pop	bc
      0027B3 E1               [10] 8003 	pop	hl
      0027B4 67               [ 4] 8004 	ld	h, a
                                   8005 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      0027B5 DD 7E FF         [19] 8006 	ld	a, -1 (ix)
      0027B8 3C               [ 4] 8007 	inc	a
      0027B9 28 06            [12] 8008 	jr	Z, 00114$
      0027BB 2C               [ 4] 8009 	inc	l
      0027BC 28 03            [12] 8010 	jr	Z, 00114$
      0027BE 24               [ 4] 8011 	inc	h
      0027BF 20 08            [12] 8012 	jr	NZ, 00124$
      0027C1                       8013 00114$:
                                   8014 ;src\/Title.h:168: rndSeed = JIFFY;
      0027C1 3A 9E FC         [13] 8015 	ld	a,(#_JIFFY + 0)
      0027C4 32r08r00         [13] 8016 	ld	(#_rndSeed), a
                                   8017 ;src\/Title.h:169: return;
      0027C7 18 1F            [12] 8018 	jr	00125$
      0027C9                       8019 00124$:
                                   8020 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      0027C9 04               [ 4] 8021 	inc	b
      0027CA 18 82            [12] 8022 	jr	00123$
      0027CC                       8023 00118$:
                                   8024 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      0027CC DD 6E FB         [19] 8025 	ld	l, -5 (ix)
      0027CF DD 66 FC         [19] 8026 	ld	h, -4 (ix)
      0027D2 7E               [ 7] 8027 	ld	a, (hl)
      0027D3 C5               [11] 8028 	push	bc
      0027D4 D5               [11] 8029 	push	de
      0027D5 F5               [11] 8030 	push	af
      0027D6 33               [ 6] 8031 	inc	sp
      0027D7 DD 66 F9         [19] 8032 	ld	h, -7 (ix)
      0027DA DD 6E F8         [19] 8033 	ld	l, -8 (ix)
      0027DD E5               [11] 8034 	push	hl
      0027DE CDrDBr25         [17] 8035 	call	_SetBlock
      0027E1 F1               [10] 8036 	pop	af
      0027E2 33               [ 6] 8037 	inc	sp
      0027E3 D1               [10] 8038 	pop	de
      0027E4 C1               [10] 8039 	pop	bc
      0027E5 C3rAFr26         [10] 8040 	jp	00120$
      0027E8                       8041 00125$:
                                   8042 ;src\/Title.h:176: }
      0027E8 DD F9            [10] 8043 	ld	sp, ix
      0027EA DD E1            [14] 8044 	pop	ix
      0027EC C9               [10] 8045 	ret
      0027ED                       8046 _TitleScreen_title_65536_285:
      0027ED 00                    8047 	.db #0x00	; 0
      0027EE 00                    8048 	.db #0x00	; 0
      0027EF 00                    8049 	.db #0x00	; 0
      0027F0 00                    8050 	.db #0x00	; 0
      0027F1 8E                    8051 	.db #0x8e	; 142
      0027F2 8E                    8052 	.db #0x8e	; 142
      0027F3 8E                    8053 	.db #0x8e	; 142
      0027F4 8E                    8054 	.db #0x8e	; 142
      0027F5 00                    8055 	.db #0x00	; 0
      0027F6 8E                    8056 	.db #0x8e	; 142
      0027F7 8E                    8057 	.db #0x8e	; 142
      0027F8 8E                    8058 	.db #0x8e	; 142
      0027F9 8E                    8059 	.db #0x8e	; 142
      0027FA 8E                    8060 	.db #0x8e	; 142
      0027FB 8E                    8061 	.db #0x8e	; 142
      0027FC 00                    8062 	.db #0x00	; 0
      0027FD 00                    8063 	.db #0x00	; 0
      0027FE 8E                    8064 	.db #0x8e	; 142
      0027FF 8E                    8065 	.db #0x8e	; 142
      002800 00                    8066 	.db #0x00	; 0
      002801 00                    8067 	.db #0x00	; 0
      002802 00                    8068 	.db #0x00	; 0
      002803 8E                    8069 	.db #0x8e	; 142
      002804 8E                    8070 	.db #0x8e	; 142
      002805 00                    8071 	.db #0x00	; 0
      002806 00                    8072 	.db #0x00	; 0
      002807 00                    8073 	.db #0x00	; 0
      002808 00                    8074 	.db #0x00	; 0
      002809 8E                    8075 	.db #0x8e	; 142
      00280A 8E                    8076 	.db #0x8e	; 142
      00280B 8E                    8077 	.db #0x8e	; 142
      00280C 8E                    8078 	.db #0x8e	; 142
      00280D 00                    8079 	.db #0x00	; 0
      00280E 00                    8080 	.db #0x00	; 0
      00280F 00                    8081 	.db #0x00	; 0
      002810 8E                    8082 	.db #0x8e	; 142
      002811 8E                    8083 	.db #0x8e	; 142
      002812 8E                    8084 	.db #0x8e	; 142
      002813 8E                    8085 	.db #0x8e	; 142
      002814 8E                    8086 	.db #0x8e	; 142
      002815 00                    8087 	.db #0x00	; 0
      002816 8E                    8088 	.db #0x8e	; 142
      002817 8E                    8089 	.db #0x8e	; 142
      002818 00                    8090 	.db #0x00	; 0
      002819 00                    8091 	.db #0x00	; 0
      00281A 00                    8092 	.db #0x00	; 0
      00281B 8E                    8093 	.db #0x8e	; 142
      00281C 8E                    8094 	.db #0x8e	; 142
      00281D 00                    8095 	.db #0x00	; 0
      00281E 00                    8096 	.db #0x00	; 0
      00281F 8E                    8097 	.db #0x8e	; 142
      002820 8E                    8098 	.db #0x8e	; 142
      002821 00                    8099 	.db #0x00	; 0
      002822 00                    8100 	.db #0x00	; 0
      002823 8E                    8101 	.db #0x8e	; 142
      002824 8E                    8102 	.db #0x8e	; 142
      002825 00                    8103 	.db #0x00	; 0
      002826 00                    8104 	.db #0x00	; 0
      002827 00                    8105 	.db #0x00	; 0
      002828 8E                    8106 	.db #0x8e	; 142
      002829 8E                    8107 	.db #0x8e	; 142
      00282A 8E                    8108 	.db #0x8e	; 142
      00282B 8E                    8109 	.db #0x8e	; 142
      00282C 8E                    8110 	.db #0x8e	; 142
      00282D 00                    8111 	.db #0x00	; 0
      00282E 00                    8112 	.db #0x00	; 0
      00282F 8E                    8113 	.db #0x8e	; 142
      002830 8E                    8114 	.db #0x8e	; 142
      002831 8E                    8115 	.db #0x8e	; 142
      002832 00                    8116 	.db #0x00	; 0
      002833 8E                    8117 	.db #0x8e	; 142
      002834 8E                    8118 	.db #0x8e	; 142
      002835 00                    8119 	.db #0x00	; 0
      002836 8E                    8120 	.db #0x8e	; 142
      002837 8E                    8121 	.db #0x8e	; 142
      002838 00                    8122 	.db #0x00	; 0
      002839 00                    8123 	.db #0x00	; 0
      00283A 00                    8124 	.db #0x00	; 0
      00283B 8E                    8125 	.db #0x8e	; 142
      00283C 8E                    8126 	.db #0x8e	; 142
      00283D 00                    8127 	.db #0x00	; 0
      00283E 00                    8128 	.db #0x00	; 0
      00283F 00                    8129 	.db #0x00	; 0
      002840 8E                    8130 	.db #0x8e	; 142
      002841 8E                    8131 	.db #0x8e	; 142
      002842 00                    8132 	.db #0x00	; 0
      002843 8E                    8133 	.db #0x8e	; 142
      002844 8E                    8134 	.db #0x8e	; 142
      002845 00                    8135 	.db #0x00	; 0
      002846 00                    8136 	.db #0x00	; 0
      002847 8E                    8137 	.db #0x8e	; 142
      002848 8E                    8138 	.db #0x8e	; 142
      002849 8E                    8139 	.db #0x8e	; 142
      00284A 00                    8140 	.db #0x00	; 0
      00284B 8E                    8141 	.db #0x8e	; 142
      00284C 8E                    8142 	.db #0x8e	; 142
      00284D 00                    8143 	.db #0x00	; 0
      00284E 8E                    8144 	.db #0x8e	; 142
      00284F 8E                    8145 	.db #0x8e	; 142
      002850 8E                    8146 	.db #0x8e	; 142
      002851 00                    8147 	.db #0x00	; 0
      002852 00                    8148 	.db #0x00	; 0
      002853 8E                    8149 	.db #0x8e	; 142
      002854 8E                    8150 	.db #0x8e	; 142
      002855 00                    8151 	.db #0x00	; 0
      002856 8E                    8152 	.db #0x8e	; 142
      002857 8E                    8153 	.db #0x8e	; 142
      002858 00                    8154 	.db #0x00	; 0
      002859 00                    8155 	.db #0x00	; 0
      00285A 8E                    8156 	.db #0x8e	; 142
      00285B 8E                    8157 	.db #0x8e	; 142
      00285C 00                    8158 	.db #0x00	; 0
      00285D 00                    8159 	.db #0x00	; 0
      00285E 00                    8160 	.db #0x00	; 0
      00285F 00                    8161 	.db #0x00	; 0
      002860 00                    8162 	.db #0x00	; 0
      002861 8E                    8163 	.db #0x8e	; 142
      002862 8E                    8164 	.db #0x8e	; 142
      002863 8E                    8165 	.db #0x8e	; 142
      002864 00                    8166 	.db #0x00	; 0
      002865 00                    8167 	.db #0x00	; 0
      002866 8E                    8168 	.db #0x8e	; 142
      002867 8E                    8169 	.db #0x8e	; 142
      002868 8E                    8170 	.db #0x8e	; 142
      002869 00                    8171 	.db #0x00	; 0
      00286A 00                    8172 	.db #0x00	; 0
      00286B 8E                    8173 	.db #0x8e	; 142
      00286C 8E                    8174 	.db #0x8e	; 142
      00286D 00                    8175 	.db #0x00	; 0
      00286E 8E                    8176 	.db #0x8e	; 142
      00286F 8E                    8177 	.db #0x8e	; 142
      002870 00                    8178 	.db #0x00	; 0
      002871 00                    8179 	.db #0x00	; 0
      002872 00                    8180 	.db #0x00	; 0
      002873 8E                    8181 	.db #0x8e	; 142
      002874 8E                    8182 	.db #0x8e	; 142
      002875 00                    8183 	.db #0x00	; 0
      002876 8E                    8184 	.db #0x8e	; 142
      002877 8E                    8185 	.db #0x8e	; 142
      002878 8E                    8186 	.db #0x8e	; 142
      002879 8E                    8187 	.db #0x8e	; 142
      00287A 8E                    8188 	.db #0x8e	; 142
      00287B 00                    8189 	.db #0x00	; 0
      00287C 00                    8190 	.db #0x00	; 0
      00287D 00                    8191 	.db #0x00	; 0
      00287E 00                    8192 	.db #0x00	; 0
      00287F 00                    8193 	.db #0x00	; 0
      002880 00                    8194 	.db #0x00	; 0
      002881 8E                    8195 	.db #0x8e	; 142
      002882 8E                    8196 	.db #0x8e	; 142
      002883 00                    8197 	.db #0x00	; 0
      002884 00                    8198 	.db #0x00	; 0
      002885 00                    8199 	.db #0x00	; 0
      002886 8E                    8200 	.db #0x8e	; 142
      002887 8E                    8201 	.db #0x8e	; 142
      002888 00                    8202 	.db #0x00	; 0
      002889 00                    8203 	.db #0x00	; 0
      00288A 00                    8204 	.db #0x00	; 0
      00288B 8E                    8205 	.db #0x8e	; 142
      00288C 8E                    8206 	.db #0x8e	; 142
      00288D 00                    8207 	.db #0x00	; 0
      00288E 8E                    8208 	.db #0x8e	; 142
      00288F 8E                    8209 	.db #0x8e	; 142
      002890 00                    8210 	.db #0x00	; 0
      002891 00                    8211 	.db #0x00	; 0
      002892 00                    8212 	.db #0x00	; 0
      002893 8E                    8213 	.db #0x8e	; 142
      002894 8E                    8214 	.db #0x8e	; 142
      002895 00                    8215 	.db #0x00	; 0
      002896 8E                    8216 	.db #0x8e	; 142
      002897 8E                    8217 	.db #0x8e	; 142
      002898 8E                    8218 	.db #0x8e	; 142
      002899 8E                    8219 	.db #0x8e	; 142
      00289A 8E                    8220 	.db #0x8e	; 142
      00289B 00                    8221 	.db #0x00	; 0
      00289C 00                    8222 	.db #0x00	; 0
      00289D 00                    8223 	.db #0x00	; 0
      00289E 00                    8224 	.db #0x00	; 0
      00289F 00                    8225 	.db #0x00	; 0
      0028A0 00                    8226 	.db #0x00	; 0
      0028A1 8E                    8227 	.db #0x8e	; 142
      0028A2 8E                    8228 	.db #0x8e	; 142
      0028A3 00                    8229 	.db #0x00	; 0
      0028A4 00                    8230 	.db #0x00	; 0
      0028A5 00                    8231 	.db #0x00	; 0
      0028A6 8E                    8232 	.db #0x8e	; 142
      0028A7 8E                    8233 	.db #0x8e	; 142
      0028A8 00                    8234 	.db #0x00	; 0
      0028A9 00                    8235 	.db #0x00	; 0
      0028AA 00                    8236 	.db #0x00	; 0
      0028AB 8E                    8237 	.db #0x8e	; 142
      0028AC 8E                    8238 	.db #0x8e	; 142
      0028AD 00                    8239 	.db #0x00	; 0
      0028AE 8E                    8240 	.db #0x8e	; 142
      0028AF 8E                    8241 	.db #0x8e	; 142
      0028B0 8E                    8242 	.db #0x8e	; 142
      0028B1 8E                    8243 	.db #0x8e	; 142
      0028B2 8E                    8244 	.db #0x8e	; 142
      0028B3 8E                    8245 	.db #0x8e	; 142
      0028B4 8E                    8246 	.db #0x8e	; 142
      0028B5 00                    8247 	.db #0x00	; 0
      0028B6 8E                    8248 	.db #0x8e	; 142
      0028B7 8E                    8249 	.db #0x8e	; 142
      0028B8 00                    8250 	.db #0x00	; 0
      0028B9 00                    8251 	.db #0x00	; 0
      0028BA 00                    8252 	.db #0x00	; 0
      0028BB 8E                    8253 	.db #0x8e	; 142
      0028BC 00                    8254 	.db #0x00	; 0
      0028BD 00                    8255 	.db #0x00	; 0
      0028BE 00                    8256 	.db #0x00	; 0
      0028BF 00                    8257 	.db #0x00	; 0
      0028C0 00                    8258 	.db #0x00	; 0
      0028C1 8E                    8259 	.db #0x8e	; 142
      0028C2 8E                    8260 	.db #0x8e	; 142
      0028C3 00                    8261 	.db #0x00	; 0
      0028C4 00                    8262 	.db #0x00	; 0
      0028C5 00                    8263 	.db #0x00	; 0
      0028C6 8E                    8264 	.db #0x8e	; 142
      0028C7 8E                    8265 	.db #0x8e	; 142
      0028C8 8E                    8266 	.db #0x8e	; 142
      0028C9 8E                    8267 	.db #0x8e	; 142
      0028CA 8E                    8268 	.db #0x8e	; 142
      0028CB 8E                    8269 	.db #0x8e	; 142
      0028CC 8E                    8270 	.db #0x8e	; 142
      0028CD 00                    8271 	.db #0x00	; 0
      0028CE 8E                    8272 	.db #0x8e	; 142
      0028CF 8E                    8273 	.db #0x8e	; 142
      0028D0 00                    8274 	.db #0x00	; 0
      0028D1 00                    8275 	.db #0x00	; 0
      0028D2 00                    8276 	.db #0x00	; 0
      0028D3 8E                    8277 	.db #0x8e	; 142
      0028D4 8E                    8278 	.db #0x8e	; 142
      0028D5 00                    8279 	.db #0x00	; 0
      0028D6 8E                    8280 	.db #0x8e	; 142
      0028D7 8E                    8281 	.db #0x8e	; 142
      0028D8 00                    8282 	.db #0x00	; 0
      0028D9 00                    8283 	.db #0x00	; 0
      0028DA 00                    8284 	.db #0x00	; 0
      0028DB 8E                    8285 	.db #0x8e	; 142
      0028DC 00                    8286 	.db #0x00	; 0
      0028DD 00                    8287 	.db #0x00	; 0
      0028DE 00                    8288 	.db #0x00	; 0
      0028DF 00                    8289 	.db #0x00	; 0
      0028E0 00                    8290 	.db #0x00	; 0
      0028E1 8E                    8291 	.db #0x8e	; 142
      0028E2 8E                    8292 	.db #0x8e	; 142
      0028E3 00                    8293 	.db #0x00	; 0
      0028E4 00                    8294 	.db #0x00	; 0
      0028E5 00                    8295 	.db #0x00	; 0
      0028E6 8E                    8296 	.db #0x8e	; 142
      0028E7 8E                    8297 	.db #0x8e	; 142
      0028E8 00                    8298 	.db #0x00	; 0
      0028E9 00                    8299 	.db #0x00	; 0
      0028EA 00                    8300 	.db #0x00	; 0
      0028EB 8E                    8301 	.db #0x8e	; 142
      0028EC 8E                    8302 	.db #0x8e	; 142
      0028ED                       8303 ___str_9:
      0028ED 50 52 45 53 53 20 54  8304 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002903 00                    8305 	.db 0x00
      002904                       8306 ___str_10:
      002904 41 4E 44 52 45 42 41  8307 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002918 00                    8308 	.db 0x00
      002919                       8309 ___str_11:
      002919 76 2E 3F 2E 3F 2E 3F  8310 	.ascii "v.?.?.?"
      002920 00                    8311 	.db 0x00
                                   8312 ;src\main.c:89: void main() {
                                   8313 ;	---------------------------------
                                   8314 ; Function main
                                   8315 ; ---------------------------------
      002921                       8316 _main::
                                   8317 ;src\main.c:91: while(TRUE) {
      002921                       8318 00102$:
                                   8319 ;src\main.c:93: Intro();
      002921 CDr4Dr25         [17] 8320 	call	_Intro
                                   8321 ;src\main.c:95: TitleScreen();
      002924 CDr06r26         [17] 8322 	call	_TitleScreen
                                   8323 ;src\main.c:97: InitGame();
      002927 CDr16r24         [17] 8324 	call	_InitGame
                                   8325 ;src\main.c:100: }
      00292A 18 F5            [12] 8326 	jr	00102$
                                   8327 	.area _CODE
                                   8328 	.area _INITIALIZER
      000000                       8329 __xinit__gameOver:
      000000 00                    8330 	.db #0x00	; 0
      000001                       8331 __xinit__col:
      000001 00                    8332 	.db #0x00	; 0
      000002                       8333 __xinit__line:
      000002 00                    8334 	.db #0x00	; 0
      000003                       8335 __xinit__counter:
      000003 00                    8336 	.db #0x00	; 0
      000004                       8337 __xinit__blocksRemoved:
      000004 00 00                 8338 	.dw #0x0000
      000006                       8339 __xinit__level:
      000006 01                    8340 	.db #0x01	; 1
      000007                       8341 __xinit__newLevel:
      000007 00                    8342 	.db #0x00	; 0
      000008                       8343 __xinit__rndSeed:
      000008 00                    8344 	.db #0x00	; 0
      000009                       8345 __xinit__d_col:
      000009 00                    8346 	.db #0x00	; 0
      00000A                       8347 __xinit__d_line:
      00000A 00                    8348 	.db #0x00	; 0
      00000B                       8349 __xinit__d_value:
      00000B 00                    8350 	.db #0x00	; 0
                                   8351 	.area _CABS (ABS)
