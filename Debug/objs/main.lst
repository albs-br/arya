                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _GetNextPieceColors
                                     38 	.globl _DrawColumn
                                     39 	.globl _DrawNumber
                                     40 	.globl _DrawString
                                     41 	.globl _DrawChar
                                     42 	.globl _ShowCountdown
                                     43 	.globl _DrawExplosionSprite
                                     44 	.globl _HideExplosionSprite
                                     45 	.globl _HideHitSprite
                                     46 	.globl _DrawHitSprite
                                     47 	.globl _HideArrowSprite
                                     48 	.globl _DrawArrowSprite
                                     49 	.globl _GetRandomInInterval
                                     50 	.globl _GetRandom
                                     51 	.globl _InitRnd
                                     52 	.globl _Power
                                     53 	.globl _Wait
                                     54 	.globl _SNSMAT
                                     55 	.globl _GTTRIG
                                     56 	.globl _GTSTCK
                                     57 	.globl _WRTPSG
                                     58 	.globl _GICINI
                                     59 	.globl _INIGRP
                                     60 	.globl _LDIRVM
                                     61 	.globl _FILVRM
                                     62 	.globl _WRTVRM
                                     63 	.globl _RDVRM
                                     64 	.globl _WRTVDP
                                     65 	.globl _ENASCR
                                     66 	.globl _DISSCR
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _nextPieceColor_Back
                                     76 	.globl _nextPieceColor_Front
                                     77 	.globl _Rand_x
                                     78 	.globl _Rand_c
                                     79 	.globl _Rand_b
                                     80 	.globl _Rand_a
                                     81 	.globl _speed
                                     82 	.globl _nextBottomPiece
                                     83 	.globl _nextMidPiece
                                     84 	.globl _nextTopPiece
                                     85 	.globl _bottomPiece
                                     86 	.globl _midPiece
                                     87 	.globl _topPiece
                                     88 	.globl _playfieldTemp
                                     89 	.globl _playfield
                                     90 	.globl _GETPNT
                                     91 	.globl _PUTPNT
                                     92 	.globl _REPCNT
                                     93 	.globl _SCNCNT
                                     94 	.globl _ATRBYT
                                     95 	.globl _CMASK
                                     96 	.globl _CLOC
                                     97 	.globl _BDRCLR
                                     98 	.globl _BAKCLR
                                     99 	.globl _FORCLR
                                    100 	.globl _TRGFLG
                                    101 	.globl _STATFL
                                    102 	.globl _MSX_vdp_regs
                                    103 	.globl _CNSDFG
                                    104 	.globl _CSRX
                                    105 	.globl _CSRY
                                    106 	.globl _MSX_modedata_screen3
                                    107 	.globl _MSX_modedata_screen2
                                    108 	.globl _MSX_modedata_screen1
                                    109 	.globl _MSX_modedata_screen0
                                    110 	.globl _CLIKSW
                                    111 	.globl _JIFFY
                                    112 	.globl _CLMLST
                                    113 	.globl _CRTCNT
                                    114 	.globl _LINLEN
                                    115 	.globl _LINL32
                                    116 	.globl _LINL40
                                    117 	.globl _MSX_charset
                                    118 	.globl _FONT
                                    119 	.globl _pieces
                                    120 	.globl _MSX_version
                                    121 	.globl _MSX_vdp_port_write
                                    122 	.globl _MSX_vdp_port_read
                                    123 ;--------------------------------------------------------
                                    124 ; special function registers
                                    125 ;--------------------------------------------------------
                                    126 ;--------------------------------------------------------
                                    127 ; ram data
                                    128 ;--------------------------------------------------------
                                    129 	.area _DATA
                           000004   130 _MSX_charset	=	0x0004
                           00F3AE   131 _LINL40	=	0xf3ae
                           00F3AF   132 _LINL32	=	0xf3af
                           00F3B0   133 _LINLEN	=	0xf3b0
                           00F3B1   134 _CRTCNT	=	0xf3b1
                           00F3B1   135 _CLMLST	=	0xf3b1
                           00FC9E   136 _JIFFY	=	0xfc9e
                           00F3DB   137 _CLIKSW	=	0xf3db
                           00F3B3   138 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   139 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   140 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   141 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   142 _CSRY	=	0xf3dc
                           00F3DD   143 _CSRX	=	0xf3dd
                           00F3DE   144 _CNSDFG	=	0xf3de
                           00F3DF   145 _MSX_vdp_regs	=	0xf3df
                           00F3E7   146 _STATFL	=	0xf3e7
                           00F3E8   147 _TRGFLG	=	0xf3e8
                           00F3E9   148 _FORCLR	=	0xf3e9
                           00F3EA   149 _BAKCLR	=	0xf3ea
                           00F3EB   150 _BDRCLR	=	0xf3eb
                           00F92A   151 _CLOC	=	0xf92a
                           00F92C   152 _CMASK	=	0xf92c
                           00F3F2   153 _ATRBYT	=	0xf3f2
                           00F3F6   154 _SCNCNT	=	0xf3f6
                           00F3F7   155 _REPCNT	=	0xf3f7
                           00F3F8   156 _PUTPNT	=	0xf3f8
                           00F3FA   157 _GETPNT	=	0xf3fa
      000000                        158 _playfield::
      000000                        159 	.ds 72
      000048                        160 _playfieldTemp::
      000048                        161 	.ds 72
      000090                        162 _topPiece::
      000090                        163 	.ds 1
      000091                        164 _midPiece::
      000091                        165 	.ds 1
      000092                        166 _bottomPiece::
      000092                        167 	.ds 1
      000093                        168 _nextTopPiece::
      000093                        169 	.ds 1
      000094                        170 _nextMidPiece::
      000094                        171 	.ds 1
      000095                        172 _nextBottomPiece::
      000095                        173 	.ds 1
      000096                        174 _speed::
      000096                        175 	.ds 1
      000097                        176 _Rand_a::
      000097                        177 	.ds 1
      000098                        178 _Rand_b::
      000098                        179 	.ds 1
      000099                        180 _Rand_c::
      000099                        181 	.ds 1
      00009A                        182 _Rand_x::
      00009A                        183 	.ds 1
      00009B                        184 _nextPieceColor_Front::
      00009B                        185 	.ds 1
      00009C                        186 _nextPieceColor_Back::
      00009C                        187 	.ds 1
                                    188 ;--------------------------------------------------------
                                    189 ; ram data
                                    190 ;--------------------------------------------------------
                                    191 	.area _INITIALIZED
      000000                        192 _gameOver::
      000000                        193 	.ds 1
      000001                        194 _col::
      000001                        195 	.ds 1
      000002                        196 _line::
      000002                        197 	.ds 1
      000003                        198 _counter::
      000003                        199 	.ds 1
      000004                        200 _blocksRemoved::
      000004                        201 	.ds 2
      000006                        202 _level::
      000006                        203 	.ds 1
      000007                        204 _newLevel::
      000007                        205 	.ds 1
      000008                        206 _rndSeed::
      000008                        207 	.ds 1
                                    208 ;--------------------------------------------------------
                                    209 ; absolute external ram data
                                    210 ;--------------------------------------------------------
                                    211 	.area _DABS (ABS)
                                    212 ;--------------------------------------------------------
                                    213 ; global & static initialisations
                                    214 ;--------------------------------------------------------
                                    215 	.area _HOME
                                    216 	.area _GSINIT
                                    217 	.area _GSFINAL
                                    218 	.area _GSINIT
                                    219 ;--------------------------------------------------------
                                    220 ; Home
                                    221 ;--------------------------------------------------------
                                    222 	.area _HOME
                                    223 	.area _HOME
                                    224 ;--------------------------------------------------------
                                    225 ; code
                                    226 ;--------------------------------------------------------
                                    227 	.area _CODE
                                    228 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    229 ;	---------------------------------
                                    230 ; Function Wait
                                    231 ; ---------------------------------
      000000                        232 _Wait::
                                    233 ;src\/Common.h:2: do {
      000000 D1               [10]  234 	pop	de
      000001 C1               [10]  235 	pop	bc
      000002 C5               [11]  236 	push	bc
      000003 D5               [11]  237 	push	de
      000004                        238 00104$:
                                    239 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  240 	ld	de, (_JIFFY)
                                    241 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        242 00101$:
      000008 2A 9E FC         [16]  243 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  244 	cp	a, a
      00000C ED 52            [15]  245 	sbc	hl, de
      00000E 28 F8            [12]  246 	jr	Z, 00101$
                                    247 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  248 	ld	e, c
      000011 50               [ 4]  249 	ld	d, b
      000012 0B               [ 6]  250 	dec	bc
      000013 7A               [ 4]  251 	ld	a, d
      000014 B3               [ 4]  252 	or	a, e
      000015 20 ED            [12]  253 	jr	NZ, 00104$
                                    254 ;src\/Common.h:8: }
      000017 C9               [10]  255 	ret
                           000006   256 _MSX_vdp_port_read	=	0x0006
                           000007   257 _MSX_vdp_port_write	=	0x0007
                           00002D   258 _MSX_version	=	0x002d
      000018                        259 _pieces:
      000018 04                     260 	.db #0x04	; 4
      000019 08                     261 	.db #0x08	; 8
      00001A 0C                     262 	.db #0x0c	; 12
      00001B 10                     263 	.db #0x10	; 16
      00001C 14                     264 	.db #0x14	; 20
                                    265 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    266 ;	---------------------------------
                                    267 ; Function Power
                                    268 ; ---------------------------------
      00001D                        269 _Power::
      00001D DD E5            [15]  270 	push	ix
      00001F DD 21 00 00      [14]  271 	ld	ix,#0
      000023 DD 39            [15]  272 	add	ix,sp
                                    273 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  274 	ld	c, 4 (ix)
      000028 06 00            [ 7]  275 	ld	b, #0x00
      00002A 69               [ 4]  276 	ld	l, c
      00002B 60               [ 4]  277 	ld	h, b
                                    278 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  279 	ld	a, 5 (ix)
      00002F B7               [ 4]  280 	or	a, a
      000030 20 05            [12]  281 	jr	NZ, 00111$
      000032 21 01 00         [10]  282 	ld	hl, #0x0001
      000035 18 16            [12]  283 	jr	00107$
                                    284 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        285 00111$:
      000037 1E 01            [ 7]  286 	ld	e, #0x01
      000039                        287 00105$:
      000039 7B               [ 4]  288 	ld	a, e
      00003A DD 96 05         [19]  289 	sub	a, 5 (ix)
      00003D 30 0E            [12]  290 	jr	NC, 00103$
                                    291 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  292 	push	bc
      000040 D5               [11]  293 	push	de
      000041 C5               [11]  294 	push	bc
      000042 E5               [11]  295 	push	hl
      000043 CDr00r00         [17]  296 	call	__mulint
      000046 F1               [10]  297 	pop	af
      000047 F1               [10]  298 	pop	af
      000048 D1               [10]  299 	pop	de
      000049 C1               [10]  300 	pop	bc
                                    301 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  302 	inc	e
      00004B 18 EC            [12]  303 	jr	00105$
      00004D                        304 00103$:
                                    305 ;src\/Math.h:10: return power;
      00004D                        306 00107$:
                                    307 ;src\/Math.h:11: }
      00004D DD E1            [14]  308 	pop	ix
      00004F C9               [10]  309 	ret
                                    310 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    311 ;	---------------------------------
                                    312 ; Function InitRnd
                                    313 ; ---------------------------------
      000050                        314 _InitRnd::
                                    315 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  316 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  317 	ld	hl, #2
      000056 39               [11]  318 	add	hl, sp
      000057 AE               [ 7]  319 	xor	a, (hl)
      000058 32r97r00         [13]  320 	ld	(_Rand_a+0), a
                                    321 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  322 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  323 	ld	hl, #3
      000061 39               [11]  324 	add	hl, sp
      000062 AE               [ 7]  325 	xor	a, (hl)
      000063 32r98r00         [13]  326 	ld	(_Rand_b+0), a
                                    327 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  328 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  329 	ld	hl, #4
      00006C 39               [11]  330 	add	hl, sp
      00006D AE               [ 7]  331 	xor	a, (hl)
      00006E 32r99r00         [13]  332 	ld	(_Rand_c+0), a
                                    333 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  334 	ld	hl, #_Rand_x
      000074 34               [11]  335 	inc	(hl)
                                    336 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  337 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  338 	ld	hl, #_Rand_c
      00007B AE               [ 7]  339 	xor	a, (hl)
      00007C 21r9Ar00         [10]  340 	ld	hl, #_Rand_x
      00007F AE               [ 7]  341 	xor	a, (hl)
      000080 32r97r00         [13]  342 	ld	(_Rand_a+0), a
                                    343 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  344 	ld	hl, #_Rand_b
      000086 7E               [ 7]  345 	ld	a, (hl)
      000087 FD 21r97r00      [14]  346 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  347 	add	a, 0 (iy)
      00008E 77               [ 7]  348 	ld	(hl), a
                                    349 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  350 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  351 	srl	a
      000094 21r99r00         [10]  352 	ld	hl, #_Rand_c
      000097 86               [ 7]  353 	add	a, (hl)
      000098 FD 21r97r00      [14]  354 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  355 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  356 	ld	(_Rand_c+0), a
                                    357 ;src\/Random.h:38: }
      0000A2 C9               [10]  358 	ret
                                    359 ;src\/Random.h:40: unsigned char GetRandom() {
                                    360 ;	---------------------------------
                                    361 ; Function GetRandom
                                    362 ; ---------------------------------
      0000A3                        363 _GetRandom::
                                    364 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  365 	ld	hl, #_Rand_x
      0000A6 34               [11]  366 	inc	(hl)
                                    367 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  368 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  369 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  370 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  371 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  372 	xor	a, (hl)
      0000B2 32r97r00         [13]  373 	ld	(_Rand_a+0), a
                                    374 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  375 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  376 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  377 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  378 	add	a, 0 (iy)
      0000C0 77               [ 7]  379 	ld	(hl), a
                                    380 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  381 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  382 	srl	a
      0000C6 21r99r00         [10]  383 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  384 	add	a, (hl)
      0000CA FD 21r97r00      [14]  385 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  386 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  387 	ld	(_Rand_c+0), a
                                    388 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  389 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  390 	ld	l, a
                                    391 ;src\/Random.h:47: }
      0000D8 C9               [10]  392 	ret
                                    393 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    394 ;	---------------------------------
                                    395 ; Function GetRandomInInterval
                                    396 ; ---------------------------------
      0000D9                        397 _GetRandomInInterval::
                                    398 ;src\/Random.h:53: do {
      0000D9                        399 00101$:
                                    400 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  401 	call	_GetRandom
      0000DC 7D               [ 4]  402 	ld	a, l
      0000DD 21 03 00         [10]  403 	ld	hl, #3
      0000E0 39               [11]  404 	add	hl, sp
      0000E1 A6               [ 7]  405 	and	a, (hl)
      0000E2 4F               [ 4]  406 	ld	c, a
                                    407 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  408 	ld	hl, #2
      0000E6 39               [11]  409 	add	hl, sp
      0000E7 7E               [ 7]  410 	ld	a, (hl)
      0000E8 91               [ 4]  411 	sub	a, c
      0000E9 38 EE            [12]  412 	jr	C, 00101$
                                    413 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  414 	ld	l, c
                                    415 ;src\/Random.h:59: }
      0000EC C9               [10]  416 	ret
                                    417 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    418 ;	---------------------------------
                                    419 ; Function DrawArrowSprite
                                    420 ; ---------------------------------
      0000ED                        421 _DrawArrowSprite::
      0000ED DD E5            [15]  422 	push	ix
      0000EF DD 21 00 00      [14]  423 	ld	ix,#0
      0000F3 DD 39            [15]  424 	add	ix,sp
      0000F5 21 F8 FF         [10]  425 	ld	hl, #-8
      0000F8 39               [11]  426 	add	hl, sp
      0000F9 F9               [ 6]  427 	ld	sp, hl
                                    428 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  429 	ld	hl, #0
      0000FD 39               [11]  430 	add	hl, sp
      0000FE EB               [ 4]  431 	ex	de, hl
      0000FF 3E 0F            [ 7]  432 	ld	a, #0x0f
      000101 12               [ 7]  433 	ld	(de), a
      000102 6B               [ 4]  434 	ld	l, e
      000103 62               [ 4]  435 	ld	h, d
      000104 23               [ 6]  436 	inc	hl
      000105 36 0E            [10]  437 	ld	(hl), #0x0e
      000107 6B               [ 4]  438 	ld	l, e
      000108 62               [ 4]  439 	ld	h, d
      000109 23               [ 6]  440 	inc	hl
      00010A 23               [ 6]  441 	inc	hl
      00010B 36 05            [10]  442 	ld	(hl), #0x05
      00010D 6B               [ 4]  443 	ld	l, e
      00010E 62               [ 4]  444 	ld	h, d
      00010F 23               [ 6]  445 	inc	hl
      000110 23               [ 6]  446 	inc	hl
      000111 23               [ 6]  447 	inc	hl
      000112 36 04            [10]  448 	ld	(hl), #0x04
      000114 21 04 00         [10]  449 	ld	hl, #0x0004
      000117 19               [11]  450 	add	hl, de
      000118 36 04            [10]  451 	ld	(hl), #0x04
      00011A 21 05 00         [10]  452 	ld	hl, #0x0005
      00011D 19               [11]  453 	add	hl, de
      00011E 36 05            [10]  454 	ld	(hl), #0x05
      000120 21 06 00         [10]  455 	ld	hl, #0x0006
      000123 19               [11]  456 	add	hl, de
      000124 36 0E            [10]  457 	ld	(hl), #0x0e
      000126 21 07 00         [10]  458 	ld	hl, #0x0007
      000129 19               [11]  459 	add	hl, de
      00012A 36 0F            [10]  460 	ld	(hl), #0x0f
                                    461 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  462 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  463 	ld	a, l
      000130 E6 0E            [ 7]  464 	and	a, #0x0e
      000132 6F               [ 4]  465 	ld	l, a
      000133 26 00            [ 7]  466 	ld	h, #0x00
      000135 CB 3C            [ 8]  467 	srl	h
      000137 CB 1D            [ 8]  468 	rr	l
                                    469 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  470 	ld	a, 5 (ix)
      00013C 3D               [ 4]  471 	dec	a
      00013D E5               [11]  472 	push	hl
      00013E D5               [11]  473 	push	de
      00013F F5               [11]  474 	push	af
      000140 33               [ 6]  475 	inc	sp
      000141 01 00 1B         [10]  476 	ld	bc, #0x1b00
      000144 C5               [11]  477 	push	bc
      000145 CDr00r00         [17]  478 	call	_WRTVRM
      000148 F1               [10]  479 	pop	af
      000149 33               [ 6]  480 	inc	sp
      00014A DD 7E 04         [19]  481 	ld	a, 4 (ix)
      00014D F5               [11]  482 	push	af
      00014E 33               [ 6]  483 	inc	sp
      00014F 01 01 1B         [10]  484 	ld	bc, #0x1b01
      000152 C5               [11]  485 	push	bc
      000153 CDr00r00         [17]  486 	call	_WRTVRM
      000156 F1               [10]  487 	pop	af
      000157 33               [ 6]  488 	inc	sp
      000158 AF               [ 4]  489 	xor	a, a
      000159 F5               [11]  490 	push	af
      00015A 33               [ 6]  491 	inc	sp
      00015B 01 02 1B         [10]  492 	ld	bc, #0x1b02
      00015E C5               [11]  493 	push	bc
      00015F CDr00r00         [17]  494 	call	_WRTVRM
      000162 F1               [10]  495 	pop	af
      000163 33               [ 6]  496 	inc	sp
      000164 D1               [10]  497 	pop	de
      000165 E1               [10]  498 	pop	hl
                                    499 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  500 	ld	h, #0x00
      000168 19               [11]  501 	add	hl, de
      000169 7E               [ 7]  502 	ld	a, (hl)
      00016A F5               [11]  503 	push	af
      00016B 33               [ 6]  504 	inc	sp
      00016C 21 03 1B         [10]  505 	ld	hl, #0x1b03
      00016F E5               [11]  506 	push	hl
      000170 CDr00r00         [17]  507 	call	_WRTVRM
                                    508 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  509 	ld	sp,ix
      000175 DD E1            [14]  510 	pop	ix
      000177 C9               [10]  511 	ret
      000178                        512 _FONT:
      000178 00                     513 	.db #0x00	; 0
      000179 00                     514 	.db #0x00	; 0
      00017A 00                     515 	.db #0x00	; 0
      00017B 00                     516 	.db #0x00	; 0
      00017C 00                     517 	.db #0x00	; 0
      00017D 00                     518 	.db #0x00	; 0
      00017E 00                     519 	.db #0x00	; 0
      00017F 00                     520 	.db #0x00	; 0
      000180 30                     521 	.db #0x30	; 48	'0'
      000181 78                     522 	.db #0x78	; 120	'x'
      000182 78                     523 	.db #0x78	; 120	'x'
      000183 30                     524 	.db #0x30	; 48	'0'
      000184 30                     525 	.db #0x30	; 48	'0'
      000185 00                     526 	.db #0x00	; 0
      000186 30                     527 	.db #0x30	; 48	'0'
      000187 00                     528 	.db #0x00	; 0
      000188 6C                     529 	.db #0x6c	; 108	'l'
      000189 6C                     530 	.db #0x6c	; 108	'l'
      00018A 6C                     531 	.db #0x6c	; 108	'l'
      00018B 00                     532 	.db #0x00	; 0
      00018C 00                     533 	.db #0x00	; 0
      00018D 00                     534 	.db #0x00	; 0
      00018E 00                     535 	.db #0x00	; 0
      00018F 00                     536 	.db #0x00	; 0
      000190 6C                     537 	.db #0x6c	; 108	'l'
      000191 6C                     538 	.db #0x6c	; 108	'l'
      000192 FE                     539 	.db #0xfe	; 254
      000193 6C                     540 	.db #0x6c	; 108	'l'
      000194 FE                     541 	.db #0xfe	; 254
      000195 6C                     542 	.db #0x6c	; 108	'l'
      000196 6C                     543 	.db #0x6c	; 108	'l'
      000197 00                     544 	.db #0x00	; 0
      000198 30                     545 	.db #0x30	; 48	'0'
      000199 7C                     546 	.db #0x7c	; 124
      00019A C0                     547 	.db #0xc0	; 192
      00019B 78                     548 	.db #0x78	; 120	'x'
      00019C 0C                     549 	.db #0x0c	; 12
      00019D F8                     550 	.db #0xf8	; 248
      00019E 30                     551 	.db #0x30	; 48	'0'
      00019F 00                     552 	.db #0x00	; 0
      0001A0 00                     553 	.db #0x00	; 0
      0001A1 C6                     554 	.db #0xc6	; 198
      0001A2 CC                     555 	.db #0xcc	; 204
      0001A3 18                     556 	.db #0x18	; 24
      0001A4 30                     557 	.db #0x30	; 48	'0'
      0001A5 66                     558 	.db #0x66	; 102	'f'
      0001A6 C6                     559 	.db #0xc6	; 198
      0001A7 00                     560 	.db #0x00	; 0
      0001A8 38                     561 	.db #0x38	; 56	'8'
      0001A9 6C                     562 	.db #0x6c	; 108	'l'
      0001AA 38                     563 	.db #0x38	; 56	'8'
      0001AB 76                     564 	.db #0x76	; 118	'v'
      0001AC DC                     565 	.db #0xdc	; 220
      0001AD CC                     566 	.db #0xcc	; 204
      0001AE 76                     567 	.db #0x76	; 118	'v'
      0001AF 00                     568 	.db #0x00	; 0
      0001B0 60                     569 	.db #0x60	; 96
      0001B1 60                     570 	.db #0x60	; 96
      0001B2 C0                     571 	.db #0xc0	; 192
      0001B3 00                     572 	.db #0x00	; 0
      0001B4 00                     573 	.db #0x00	; 0
      0001B5 00                     574 	.db #0x00	; 0
      0001B6 00                     575 	.db #0x00	; 0
      0001B7 00                     576 	.db #0x00	; 0
      0001B8 18                     577 	.db #0x18	; 24
      0001B9 30                     578 	.db #0x30	; 48	'0'
      0001BA 60                     579 	.db #0x60	; 96
      0001BB 60                     580 	.db #0x60	; 96
      0001BC 60                     581 	.db #0x60	; 96
      0001BD 30                     582 	.db #0x30	; 48	'0'
      0001BE 18                     583 	.db #0x18	; 24
      0001BF 00                     584 	.db #0x00	; 0
      0001C0 60                     585 	.db #0x60	; 96
      0001C1 30                     586 	.db #0x30	; 48	'0'
      0001C2 18                     587 	.db #0x18	; 24
      0001C3 18                     588 	.db #0x18	; 24
      0001C4 18                     589 	.db #0x18	; 24
      0001C5 30                     590 	.db #0x30	; 48	'0'
      0001C6 60                     591 	.db #0x60	; 96
      0001C7 00                     592 	.db #0x00	; 0
      0001C8 00                     593 	.db #0x00	; 0
      0001C9 66                     594 	.db #0x66	; 102	'f'
      0001CA 3C                     595 	.db #0x3c	; 60
      0001CB FF                     596 	.db #0xff	; 255
      0001CC 3C                     597 	.db #0x3c	; 60
      0001CD 66                     598 	.db #0x66	; 102	'f'
      0001CE 00                     599 	.db #0x00	; 0
      0001CF 00                     600 	.db #0x00	; 0
      0001D0 00                     601 	.db #0x00	; 0
      0001D1 30                     602 	.db #0x30	; 48	'0'
      0001D2 30                     603 	.db #0x30	; 48	'0'
      0001D3 FC                     604 	.db #0xfc	; 252
      0001D4 30                     605 	.db #0x30	; 48	'0'
      0001D5 30                     606 	.db #0x30	; 48	'0'
      0001D6 00                     607 	.db #0x00	; 0
      0001D7 00                     608 	.db #0x00	; 0
      0001D8 00                     609 	.db #0x00	; 0
      0001D9 00                     610 	.db #0x00	; 0
      0001DA 00                     611 	.db #0x00	; 0
      0001DB 00                     612 	.db #0x00	; 0
      0001DC 00                     613 	.db #0x00	; 0
      0001DD 30                     614 	.db #0x30	; 48	'0'
      0001DE 30                     615 	.db #0x30	; 48	'0'
      0001DF 60                     616 	.db #0x60	; 96
      0001E0 00                     617 	.db #0x00	; 0
      0001E1 00                     618 	.db #0x00	; 0
      0001E2 00                     619 	.db #0x00	; 0
      0001E3 FC                     620 	.db #0xfc	; 252
      0001E4 00                     621 	.db #0x00	; 0
      0001E5 00                     622 	.db #0x00	; 0
      0001E6 00                     623 	.db #0x00	; 0
      0001E7 00                     624 	.db #0x00	; 0
      0001E8 00                     625 	.db #0x00	; 0
      0001E9 00                     626 	.db #0x00	; 0
      0001EA 00                     627 	.db #0x00	; 0
      0001EB 00                     628 	.db #0x00	; 0
      0001EC 00                     629 	.db #0x00	; 0
      0001ED 30                     630 	.db #0x30	; 48	'0'
      0001EE 30                     631 	.db #0x30	; 48	'0'
      0001EF 00                     632 	.db #0x00	; 0
      0001F0 06                     633 	.db #0x06	; 6
      0001F1 0C                     634 	.db #0x0c	; 12
      0001F2 18                     635 	.db #0x18	; 24
      0001F3 30                     636 	.db #0x30	; 48	'0'
      0001F4 60                     637 	.db #0x60	; 96
      0001F5 C0                     638 	.db #0xc0	; 192
      0001F6 80                     639 	.db #0x80	; 128
      0001F7 00                     640 	.db #0x00	; 0
      0001F8 7C                     641 	.db #0x7c	; 124
      0001F9 C6                     642 	.db #0xc6	; 198
      0001FA CE                     643 	.db #0xce	; 206
      0001FB DE                     644 	.db #0xde	; 222
      0001FC F6                     645 	.db #0xf6	; 246
      0001FD E6                     646 	.db #0xe6	; 230
      0001FE 7C                     647 	.db #0x7c	; 124
      0001FF 00                     648 	.db #0x00	; 0
      000200 30                     649 	.db #0x30	; 48	'0'
      000201 70                     650 	.db #0x70	; 112	'p'
      000202 30                     651 	.db #0x30	; 48	'0'
      000203 30                     652 	.db #0x30	; 48	'0'
      000204 30                     653 	.db #0x30	; 48	'0'
      000205 30                     654 	.db #0x30	; 48	'0'
      000206 FC                     655 	.db #0xfc	; 252
      000207 00                     656 	.db #0x00	; 0
      000208 78                     657 	.db #0x78	; 120	'x'
      000209 CC                     658 	.db #0xcc	; 204
      00020A 0C                     659 	.db #0x0c	; 12
      00020B 38                     660 	.db #0x38	; 56	'8'
      00020C 60                     661 	.db #0x60	; 96
      00020D C4                     662 	.db #0xc4	; 196
      00020E FC                     663 	.db #0xfc	; 252
      00020F 00                     664 	.db #0x00	; 0
      000210 78                     665 	.db #0x78	; 120	'x'
      000211 CC                     666 	.db #0xcc	; 204
      000212 0C                     667 	.db #0x0c	; 12
      000213 38                     668 	.db #0x38	; 56	'8'
      000214 0C                     669 	.db #0x0c	; 12
      000215 CC                     670 	.db #0xcc	; 204
      000216 78                     671 	.db #0x78	; 120	'x'
      000217 00                     672 	.db #0x00	; 0
      000218 1C                     673 	.db #0x1c	; 28
      000219 3C                     674 	.db #0x3c	; 60
      00021A 6C                     675 	.db #0x6c	; 108	'l'
      00021B CC                     676 	.db #0xcc	; 204
      00021C FE                     677 	.db #0xfe	; 254
      00021D 0C                     678 	.db #0x0c	; 12
      00021E 1E                     679 	.db #0x1e	; 30
      00021F 00                     680 	.db #0x00	; 0
      000220 FC                     681 	.db #0xfc	; 252
      000221 C0                     682 	.db #0xc0	; 192
      000222 F8                     683 	.db #0xf8	; 248
      000223 0C                     684 	.db #0x0c	; 12
      000224 0C                     685 	.db #0x0c	; 12
      000225 CC                     686 	.db #0xcc	; 204
      000226 78                     687 	.db #0x78	; 120	'x'
      000227 00                     688 	.db #0x00	; 0
      000228 38                     689 	.db #0x38	; 56	'8'
      000229 60                     690 	.db #0x60	; 96
      00022A C0                     691 	.db #0xc0	; 192
      00022B F8                     692 	.db #0xf8	; 248
      00022C CC                     693 	.db #0xcc	; 204
      00022D CC                     694 	.db #0xcc	; 204
      00022E 78                     695 	.db #0x78	; 120	'x'
      00022F 00                     696 	.db #0x00	; 0
      000230 FC                     697 	.db #0xfc	; 252
      000231 CC                     698 	.db #0xcc	; 204
      000232 0C                     699 	.db #0x0c	; 12
      000233 18                     700 	.db #0x18	; 24
      000234 30                     701 	.db #0x30	; 48	'0'
      000235 30                     702 	.db #0x30	; 48	'0'
      000236 30                     703 	.db #0x30	; 48	'0'
      000237 00                     704 	.db #0x00	; 0
      000238 78                     705 	.db #0x78	; 120	'x'
      000239 CC                     706 	.db #0xcc	; 204
      00023A CC                     707 	.db #0xcc	; 204
      00023B 78                     708 	.db #0x78	; 120	'x'
      00023C CC                     709 	.db #0xcc	; 204
      00023D CC                     710 	.db #0xcc	; 204
      00023E 78                     711 	.db #0x78	; 120	'x'
      00023F 00                     712 	.db #0x00	; 0
      000240 78                     713 	.db #0x78	; 120	'x'
      000241 CC                     714 	.db #0xcc	; 204
      000242 CC                     715 	.db #0xcc	; 204
      000243 7C                     716 	.db #0x7c	; 124
      000244 0C                     717 	.db #0x0c	; 12
      000245 18                     718 	.db #0x18	; 24
      000246 70                     719 	.db #0x70	; 112	'p'
      000247 00                     720 	.db #0x00	; 0
      000248 00                     721 	.db #0x00	; 0
      000249 30                     722 	.db #0x30	; 48	'0'
      00024A 30                     723 	.db #0x30	; 48	'0'
      00024B 00                     724 	.db #0x00	; 0
      00024C 00                     725 	.db #0x00	; 0
      00024D 30                     726 	.db #0x30	; 48	'0'
      00024E 30                     727 	.db #0x30	; 48	'0'
      00024F 00                     728 	.db #0x00	; 0
      000250 00                     729 	.db #0x00	; 0
      000251 30                     730 	.db #0x30	; 48	'0'
      000252 30                     731 	.db #0x30	; 48	'0'
      000253 00                     732 	.db #0x00	; 0
      000254 30                     733 	.db #0x30	; 48	'0'
      000255 30                     734 	.db #0x30	; 48	'0'
      000256 60                     735 	.db #0x60	; 96
      000257 00                     736 	.db #0x00	; 0
      000258 18                     737 	.db #0x18	; 24
      000259 30                     738 	.db #0x30	; 48	'0'
      00025A 60                     739 	.db #0x60	; 96
      00025B C0                     740 	.db #0xc0	; 192
      00025C 60                     741 	.db #0x60	; 96
      00025D 30                     742 	.db #0x30	; 48	'0'
      00025E 18                     743 	.db #0x18	; 24
      00025F 00                     744 	.db #0x00	; 0
      000260 00                     745 	.db #0x00	; 0
      000261 00                     746 	.db #0x00	; 0
      000262 FC                     747 	.db #0xfc	; 252
      000263 00                     748 	.db #0x00	; 0
      000264 00                     749 	.db #0x00	; 0
      000265 FC                     750 	.db #0xfc	; 252
      000266 00                     751 	.db #0x00	; 0
      000267 00                     752 	.db #0x00	; 0
      000268 60                     753 	.db #0x60	; 96
      000269 30                     754 	.db #0x30	; 48	'0'
      00026A 18                     755 	.db #0x18	; 24
      00026B 0C                     756 	.db #0x0c	; 12
      00026C 18                     757 	.db #0x18	; 24
      00026D 30                     758 	.db #0x30	; 48	'0'
      00026E 60                     759 	.db #0x60	; 96
      00026F 00                     760 	.db #0x00	; 0
      000270 78                     761 	.db #0x78	; 120	'x'
      000271 CC                     762 	.db #0xcc	; 204
      000272 0C                     763 	.db #0x0c	; 12
      000273 18                     764 	.db #0x18	; 24
      000274 30                     765 	.db #0x30	; 48	'0'
      000275 00                     766 	.db #0x00	; 0
      000276 30                     767 	.db #0x30	; 48	'0'
      000277 00                     768 	.db #0x00	; 0
      000278 7C                     769 	.db #0x7c	; 124
      000279 C6                     770 	.db #0xc6	; 198
      00027A DE                     771 	.db #0xde	; 222
      00027B DE                     772 	.db #0xde	; 222
      00027C DE                     773 	.db #0xde	; 222
      00027D C0                     774 	.db #0xc0	; 192
      00027E 78                     775 	.db #0x78	; 120	'x'
      00027F 00                     776 	.db #0x00	; 0
      000280 30                     777 	.db #0x30	; 48	'0'
      000281 78                     778 	.db #0x78	; 120	'x'
      000282 CC                     779 	.db #0xcc	; 204
      000283 CC                     780 	.db #0xcc	; 204
      000284 FC                     781 	.db #0xfc	; 252
      000285 CC                     782 	.db #0xcc	; 204
      000286 CC                     783 	.db #0xcc	; 204
      000287 00                     784 	.db #0x00	; 0
      000288 FC                     785 	.db #0xfc	; 252
      000289 66                     786 	.db #0x66	; 102	'f'
      00028A 66                     787 	.db #0x66	; 102	'f'
      00028B 7C                     788 	.db #0x7c	; 124
      00028C 66                     789 	.db #0x66	; 102	'f'
      00028D 66                     790 	.db #0x66	; 102	'f'
      00028E FC                     791 	.db #0xfc	; 252
      00028F 00                     792 	.db #0x00	; 0
      000290 3C                     793 	.db #0x3c	; 60
      000291 66                     794 	.db #0x66	; 102	'f'
      000292 C0                     795 	.db #0xc0	; 192
      000293 C0                     796 	.db #0xc0	; 192
      000294 C0                     797 	.db #0xc0	; 192
      000295 66                     798 	.db #0x66	; 102	'f'
      000296 3C                     799 	.db #0x3c	; 60
      000297 00                     800 	.db #0x00	; 0
      000298 F8                     801 	.db #0xf8	; 248
      000299 6C                     802 	.db #0x6c	; 108	'l'
      00029A 66                     803 	.db #0x66	; 102	'f'
      00029B 66                     804 	.db #0x66	; 102	'f'
      00029C 66                     805 	.db #0x66	; 102	'f'
      00029D 6C                     806 	.db #0x6c	; 108	'l'
      00029E F8                     807 	.db #0xf8	; 248
      00029F 00                     808 	.db #0x00	; 0
      0002A0 FE                     809 	.db #0xfe	; 254
      0002A1 62                     810 	.db #0x62	; 98	'b'
      0002A2 68                     811 	.db #0x68	; 104	'h'
      0002A3 78                     812 	.db #0x78	; 120	'x'
      0002A4 68                     813 	.db #0x68	; 104	'h'
      0002A5 62                     814 	.db #0x62	; 98	'b'
      0002A6 FE                     815 	.db #0xfe	; 254
      0002A7 00                     816 	.db #0x00	; 0
      0002A8 FE                     817 	.db #0xfe	; 254
      0002A9 62                     818 	.db #0x62	; 98	'b'
      0002AA 68                     819 	.db #0x68	; 104	'h'
      0002AB 78                     820 	.db #0x78	; 120	'x'
      0002AC 68                     821 	.db #0x68	; 104	'h'
      0002AD 60                     822 	.db #0x60	; 96
      0002AE F0                     823 	.db #0xf0	; 240
      0002AF 00                     824 	.db #0x00	; 0
      0002B0 3C                     825 	.db #0x3c	; 60
      0002B1 66                     826 	.db #0x66	; 102	'f'
      0002B2 C0                     827 	.db #0xc0	; 192
      0002B3 C0                     828 	.db #0xc0	; 192
      0002B4 CE                     829 	.db #0xce	; 206
      0002B5 66                     830 	.db #0x66	; 102	'f'
      0002B6 3E                     831 	.db #0x3e	; 62
      0002B7 00                     832 	.db #0x00	; 0
      0002B8 CC                     833 	.db #0xcc	; 204
      0002B9 CC                     834 	.db #0xcc	; 204
      0002BA CC                     835 	.db #0xcc	; 204
      0002BB FC                     836 	.db #0xfc	; 252
      0002BC CC                     837 	.db #0xcc	; 204
      0002BD CC                     838 	.db #0xcc	; 204
      0002BE CC                     839 	.db #0xcc	; 204
      0002BF 00                     840 	.db #0x00	; 0
      0002C0 78                     841 	.db #0x78	; 120	'x'
      0002C1 30                     842 	.db #0x30	; 48	'0'
      0002C2 30                     843 	.db #0x30	; 48	'0'
      0002C3 30                     844 	.db #0x30	; 48	'0'
      0002C4 30                     845 	.db #0x30	; 48	'0'
      0002C5 30                     846 	.db #0x30	; 48	'0'
      0002C6 78                     847 	.db #0x78	; 120	'x'
      0002C7 00                     848 	.db #0x00	; 0
      0002C8 1E                     849 	.db #0x1e	; 30
      0002C9 0C                     850 	.db #0x0c	; 12
      0002CA 0C                     851 	.db #0x0c	; 12
      0002CB 0C                     852 	.db #0x0c	; 12
      0002CC CC                     853 	.db #0xcc	; 204
      0002CD CC                     854 	.db #0xcc	; 204
      0002CE 78                     855 	.db #0x78	; 120	'x'
      0002CF 00                     856 	.db #0x00	; 0
      0002D0 E6                     857 	.db #0xe6	; 230
      0002D1 66                     858 	.db #0x66	; 102	'f'
      0002D2 6C                     859 	.db #0x6c	; 108	'l'
      0002D3 78                     860 	.db #0x78	; 120	'x'
      0002D4 6C                     861 	.db #0x6c	; 108	'l'
      0002D5 66                     862 	.db #0x66	; 102	'f'
      0002D6 E6                     863 	.db #0xe6	; 230
      0002D7 00                     864 	.db #0x00	; 0
      0002D8 F0                     865 	.db #0xf0	; 240
      0002D9 60                     866 	.db #0x60	; 96
      0002DA 60                     867 	.db #0x60	; 96
      0002DB 60                     868 	.db #0x60	; 96
      0002DC 62                     869 	.db #0x62	; 98	'b'
      0002DD 66                     870 	.db #0x66	; 102	'f'
      0002DE FE                     871 	.db #0xfe	; 254
      0002DF 00                     872 	.db #0x00	; 0
      0002E0 C6                     873 	.db #0xc6	; 198
      0002E1 EE                     874 	.db #0xee	; 238
      0002E2 FE                     875 	.db #0xfe	; 254
      0002E3 FE                     876 	.db #0xfe	; 254
      0002E4 D6                     877 	.db #0xd6	; 214
      0002E5 C6                     878 	.db #0xc6	; 198
      0002E6 C6                     879 	.db #0xc6	; 198
      0002E7 00                     880 	.db #0x00	; 0
      0002E8 C6                     881 	.db #0xc6	; 198
      0002E9 E6                     882 	.db #0xe6	; 230
      0002EA F6                     883 	.db #0xf6	; 246
      0002EB DE                     884 	.db #0xde	; 222
      0002EC CE                     885 	.db #0xce	; 206
      0002ED C6                     886 	.db #0xc6	; 198
      0002EE C6                     887 	.db #0xc6	; 198
      0002EF 00                     888 	.db #0x00	; 0
      0002F0 38                     889 	.db #0x38	; 56	'8'
      0002F1 6C                     890 	.db #0x6c	; 108	'l'
      0002F2 C6                     891 	.db #0xc6	; 198
      0002F3 C6                     892 	.db #0xc6	; 198
      0002F4 C6                     893 	.db #0xc6	; 198
      0002F5 6C                     894 	.db #0x6c	; 108	'l'
      0002F6 38                     895 	.db #0x38	; 56	'8'
      0002F7 00                     896 	.db #0x00	; 0
      0002F8 FC                     897 	.db #0xfc	; 252
      0002F9 66                     898 	.db #0x66	; 102	'f'
      0002FA 66                     899 	.db #0x66	; 102	'f'
      0002FB 7C                     900 	.db #0x7c	; 124
      0002FC 60                     901 	.db #0x60	; 96
      0002FD 60                     902 	.db #0x60	; 96
      0002FE F0                     903 	.db #0xf0	; 240
      0002FF 00                     904 	.db #0x00	; 0
      000300 78                     905 	.db #0x78	; 120	'x'
      000301 CC                     906 	.db #0xcc	; 204
      000302 CC                     907 	.db #0xcc	; 204
      000303 CC                     908 	.db #0xcc	; 204
      000304 DC                     909 	.db #0xdc	; 220
      000305 78                     910 	.db #0x78	; 120	'x'
      000306 1C                     911 	.db #0x1c	; 28
      000307 00                     912 	.db #0x00	; 0
      000308 FC                     913 	.db #0xfc	; 252
      000309 66                     914 	.db #0x66	; 102	'f'
      00030A 66                     915 	.db #0x66	; 102	'f'
      00030B 7C                     916 	.db #0x7c	; 124
      00030C 6C                     917 	.db #0x6c	; 108	'l'
      00030D 66                     918 	.db #0x66	; 102	'f'
      00030E E6                     919 	.db #0xe6	; 230
      00030F 00                     920 	.db #0x00	; 0
      000310 78                     921 	.db #0x78	; 120	'x'
      000311 CC                     922 	.db #0xcc	; 204
      000312 E0                     923 	.db #0xe0	; 224
      000313 70                     924 	.db #0x70	; 112	'p'
      000314 1C                     925 	.db #0x1c	; 28
      000315 CC                     926 	.db #0xcc	; 204
      000316 78                     927 	.db #0x78	; 120	'x'
      000317 00                     928 	.db #0x00	; 0
      000318 FC                     929 	.db #0xfc	; 252
      000319 B4                     930 	.db #0xb4	; 180
      00031A 30                     931 	.db #0x30	; 48	'0'
      00031B 30                     932 	.db #0x30	; 48	'0'
      00031C 30                     933 	.db #0x30	; 48	'0'
      00031D 30                     934 	.db #0x30	; 48	'0'
      00031E 78                     935 	.db #0x78	; 120	'x'
      00031F 00                     936 	.db #0x00	; 0
      000320 CC                     937 	.db #0xcc	; 204
      000321 CC                     938 	.db #0xcc	; 204
      000322 CC                     939 	.db #0xcc	; 204
      000323 CC                     940 	.db #0xcc	; 204
      000324 CC                     941 	.db #0xcc	; 204
      000325 CC                     942 	.db #0xcc	; 204
      000326 FC                     943 	.db #0xfc	; 252
      000327 00                     944 	.db #0x00	; 0
      000328 CC                     945 	.db #0xcc	; 204
      000329 CC                     946 	.db #0xcc	; 204
      00032A CC                     947 	.db #0xcc	; 204
      00032B CC                     948 	.db #0xcc	; 204
      00032C CC                     949 	.db #0xcc	; 204
      00032D 78                     950 	.db #0x78	; 120	'x'
      00032E 30                     951 	.db #0x30	; 48	'0'
      00032F 00                     952 	.db #0x00	; 0
      000330 C6                     953 	.db #0xc6	; 198
      000331 C6                     954 	.db #0xc6	; 198
      000332 C6                     955 	.db #0xc6	; 198
      000333 D6                     956 	.db #0xd6	; 214
      000334 FE                     957 	.db #0xfe	; 254
      000335 EE                     958 	.db #0xee	; 238
      000336 C6                     959 	.db #0xc6	; 198
      000337 00                     960 	.db #0x00	; 0
      000338 C6                     961 	.db #0xc6	; 198
      000339 C6                     962 	.db #0xc6	; 198
      00033A 6C                     963 	.db #0x6c	; 108	'l'
      00033B 38                     964 	.db #0x38	; 56	'8'
      00033C 38                     965 	.db #0x38	; 56	'8'
      00033D 6C                     966 	.db #0x6c	; 108	'l'
      00033E C6                     967 	.db #0xc6	; 198
      00033F 00                     968 	.db #0x00	; 0
      000340 CC                     969 	.db #0xcc	; 204
      000341 CC                     970 	.db #0xcc	; 204
      000342 CC                     971 	.db #0xcc	; 204
      000343 78                     972 	.db #0x78	; 120	'x'
      000344 30                     973 	.db #0x30	; 48	'0'
      000345 30                     974 	.db #0x30	; 48	'0'
      000346 78                     975 	.db #0x78	; 120	'x'
      000347 00                     976 	.db #0x00	; 0
      000348 FE                     977 	.db #0xfe	; 254
      000349 C6                     978 	.db #0xc6	; 198
      00034A 8C                     979 	.db #0x8c	; 140
      00034B 18                     980 	.db #0x18	; 24
      00034C 32                     981 	.db #0x32	; 50	'2'
      00034D 66                     982 	.db #0x66	; 102	'f'
      00034E FE                     983 	.db #0xfe	; 254
      00034F 00                     984 	.db #0x00	; 0
      000350 78                     985 	.db #0x78	; 120	'x'
      000351 60                     986 	.db #0x60	; 96
      000352 60                     987 	.db #0x60	; 96
      000353 60                     988 	.db #0x60	; 96
      000354 60                     989 	.db #0x60	; 96
      000355 60                     990 	.db #0x60	; 96
      000356 78                     991 	.db #0x78	; 120	'x'
      000357 00                     992 	.db #0x00	; 0
      000358 C0                     993 	.db #0xc0	; 192
      000359 60                     994 	.db #0x60	; 96
      00035A 30                     995 	.db #0x30	; 48	'0'
      00035B 18                     996 	.db #0x18	; 24
      00035C 0C                     997 	.db #0x0c	; 12
      00035D 06                     998 	.db #0x06	; 6
      00035E 02                     999 	.db #0x02	; 2
      00035F 00                    1000 	.db #0x00	; 0
      000360 78                    1001 	.db #0x78	; 120	'x'
      000361 18                    1002 	.db #0x18	; 24
      000362 18                    1003 	.db #0x18	; 24
      000363 18                    1004 	.db #0x18	; 24
      000364 18                    1005 	.db #0x18	; 24
      000365 18                    1006 	.db #0x18	; 24
      000366 78                    1007 	.db #0x78	; 120	'x'
      000367 00                    1008 	.db #0x00	; 0
      000368 10                    1009 	.db #0x10	; 16
      000369 38                    1010 	.db #0x38	; 56	'8'
      00036A 6C                    1011 	.db #0x6c	; 108	'l'
      00036B C6                    1012 	.db #0xc6	; 198
      00036C 00                    1013 	.db #0x00	; 0
      00036D 00                    1014 	.db #0x00	; 0
      00036E 00                    1015 	.db #0x00	; 0
      00036F 00                    1016 	.db #0x00	; 0
      000370 00                    1017 	.db #0x00	; 0
      000371 00                    1018 	.db #0x00	; 0
      000372 00                    1019 	.db #0x00	; 0
      000373 00                    1020 	.db #0x00	; 0
      000374 00                    1021 	.db #0x00	; 0
      000375 00                    1022 	.db #0x00	; 0
      000376 00                    1023 	.db #0x00	; 0
      000377 FF                    1024 	.db #0xff	; 255
      000378 30                    1025 	.db #0x30	; 48	'0'
      000379 30                    1026 	.db #0x30	; 48	'0'
      00037A 18                    1027 	.db #0x18	; 24
      00037B 00                    1028 	.db #0x00	; 0
      00037C 00                    1029 	.db #0x00	; 0
      00037D 00                    1030 	.db #0x00	; 0
      00037E 00                    1031 	.db #0x00	; 0
      00037F 00                    1032 	.db #0x00	; 0
      000380 00                    1033 	.db #0x00	; 0
      000381 00                    1034 	.db #0x00	; 0
      000382 78                    1035 	.db #0x78	; 120	'x'
      000383 0C                    1036 	.db #0x0c	; 12
      000384 7C                    1037 	.db #0x7c	; 124
      000385 CC                    1038 	.db #0xcc	; 204
      000386 76                    1039 	.db #0x76	; 118	'v'
      000387 00                    1040 	.db #0x00	; 0
      000388 E0                    1041 	.db #0xe0	; 224
      000389 60                    1042 	.db #0x60	; 96
      00038A 60                    1043 	.db #0x60	; 96
      00038B 7C                    1044 	.db #0x7c	; 124
      00038C 66                    1045 	.db #0x66	; 102	'f'
      00038D 66                    1046 	.db #0x66	; 102	'f'
      00038E DC                    1047 	.db #0xdc	; 220
      00038F 00                    1048 	.db #0x00	; 0
      000390 00                    1049 	.db #0x00	; 0
      000391 00                    1050 	.db #0x00	; 0
      000392 78                    1051 	.db #0x78	; 120	'x'
      000393 CC                    1052 	.db #0xcc	; 204
      000394 C0                    1053 	.db #0xc0	; 192
      000395 CC                    1054 	.db #0xcc	; 204
      000396 78                    1055 	.db #0x78	; 120	'x'
      000397 00                    1056 	.db #0x00	; 0
      000398 1C                    1057 	.db #0x1c	; 28
      000399 0C                    1058 	.db #0x0c	; 12
      00039A 0C                    1059 	.db #0x0c	; 12
      00039B 7C                    1060 	.db #0x7c	; 124
      00039C CC                    1061 	.db #0xcc	; 204
      00039D CC                    1062 	.db #0xcc	; 204
      00039E 76                    1063 	.db #0x76	; 118	'v'
      00039F 00                    1064 	.db #0x00	; 0
      0003A0 00                    1065 	.db #0x00	; 0
      0003A1 00                    1066 	.db #0x00	; 0
      0003A2 78                    1067 	.db #0x78	; 120	'x'
      0003A3 CC                    1068 	.db #0xcc	; 204
      0003A4 FC                    1069 	.db #0xfc	; 252
      0003A5 C0                    1070 	.db #0xc0	; 192
      0003A6 78                    1071 	.db #0x78	; 120	'x'
      0003A7 00                    1072 	.db #0x00	; 0
      0003A8 38                    1073 	.db #0x38	; 56	'8'
      0003A9 6C                    1074 	.db #0x6c	; 108	'l'
      0003AA 60                    1075 	.db #0x60	; 96
      0003AB F0                    1076 	.db #0xf0	; 240
      0003AC 60                    1077 	.db #0x60	; 96
      0003AD 60                    1078 	.db #0x60	; 96
      0003AE F0                    1079 	.db #0xf0	; 240
      0003AF 00                    1080 	.db #0x00	; 0
      0003B0 00                    1081 	.db #0x00	; 0
      0003B1 00                    1082 	.db #0x00	; 0
      0003B2 76                    1083 	.db #0x76	; 118	'v'
      0003B3 CC                    1084 	.db #0xcc	; 204
      0003B4 CC                    1085 	.db #0xcc	; 204
      0003B5 7C                    1086 	.db #0x7c	; 124
      0003B6 0C                    1087 	.db #0x0c	; 12
      0003B7 F8                    1088 	.db #0xf8	; 248
      0003B8 E0                    1089 	.db #0xe0	; 224
      0003B9 60                    1090 	.db #0x60	; 96
      0003BA 6C                    1091 	.db #0x6c	; 108	'l'
      0003BB 76                    1092 	.db #0x76	; 118	'v'
      0003BC 66                    1093 	.db #0x66	; 102	'f'
      0003BD 66                    1094 	.db #0x66	; 102	'f'
      0003BE E6                    1095 	.db #0xe6	; 230
      0003BF 00                    1096 	.db #0x00	; 0
      0003C0 30                    1097 	.db #0x30	; 48	'0'
      0003C1 00                    1098 	.db #0x00	; 0
      0003C2 70                    1099 	.db #0x70	; 112	'p'
      0003C3 30                    1100 	.db #0x30	; 48	'0'
      0003C4 30                    1101 	.db #0x30	; 48	'0'
      0003C5 30                    1102 	.db #0x30	; 48	'0'
      0003C6 78                    1103 	.db #0x78	; 120	'x'
      0003C7 00                    1104 	.db #0x00	; 0
      0003C8 0C                    1105 	.db #0x0c	; 12
      0003C9 00                    1106 	.db #0x00	; 0
      0003CA 0C                    1107 	.db #0x0c	; 12
      0003CB 0C                    1108 	.db #0x0c	; 12
      0003CC 0C                    1109 	.db #0x0c	; 12
      0003CD CC                    1110 	.db #0xcc	; 204
      0003CE CC                    1111 	.db #0xcc	; 204
      0003CF 78                    1112 	.db #0x78	; 120	'x'
      0003D0 E0                    1113 	.db #0xe0	; 224
      0003D1 60                    1114 	.db #0x60	; 96
      0003D2 66                    1115 	.db #0x66	; 102	'f'
      0003D3 6C                    1116 	.db #0x6c	; 108	'l'
      0003D4 78                    1117 	.db #0x78	; 120	'x'
      0003D5 6C                    1118 	.db #0x6c	; 108	'l'
      0003D6 E6                    1119 	.db #0xe6	; 230
      0003D7 00                    1120 	.db #0x00	; 0
      0003D8 70                    1121 	.db #0x70	; 112	'p'
      0003D9 30                    1122 	.db #0x30	; 48	'0'
      0003DA 30                    1123 	.db #0x30	; 48	'0'
      0003DB 30                    1124 	.db #0x30	; 48	'0'
      0003DC 30                    1125 	.db #0x30	; 48	'0'
      0003DD 30                    1126 	.db #0x30	; 48	'0'
      0003DE 78                    1127 	.db #0x78	; 120	'x'
      0003DF 00                    1128 	.db #0x00	; 0
      0003E0 00                    1129 	.db #0x00	; 0
      0003E1 00                    1130 	.db #0x00	; 0
      0003E2 CC                    1131 	.db #0xcc	; 204
      0003E3 FE                    1132 	.db #0xfe	; 254
      0003E4 FE                    1133 	.db #0xfe	; 254
      0003E5 D6                    1134 	.db #0xd6	; 214
      0003E6 C6                    1135 	.db #0xc6	; 198
      0003E7 00                    1136 	.db #0x00	; 0
      0003E8 00                    1137 	.db #0x00	; 0
      0003E9 00                    1138 	.db #0x00	; 0
      0003EA F8                    1139 	.db #0xf8	; 248
      0003EB CC                    1140 	.db #0xcc	; 204
      0003EC CC                    1141 	.db #0xcc	; 204
      0003ED CC                    1142 	.db #0xcc	; 204
      0003EE CC                    1143 	.db #0xcc	; 204
      0003EF 00                    1144 	.db #0x00	; 0
      0003F0 00                    1145 	.db #0x00	; 0
      0003F1 00                    1146 	.db #0x00	; 0
      0003F2 78                    1147 	.db #0x78	; 120	'x'
      0003F3 CC                    1148 	.db #0xcc	; 204
      0003F4 CC                    1149 	.db #0xcc	; 204
      0003F5 CC                    1150 	.db #0xcc	; 204
      0003F6 78                    1151 	.db #0x78	; 120	'x'
      0003F7 00                    1152 	.db #0x00	; 0
      0003F8 00                    1153 	.db #0x00	; 0
      0003F9 00                    1154 	.db #0x00	; 0
      0003FA DC                    1155 	.db #0xdc	; 220
      0003FB 66                    1156 	.db #0x66	; 102	'f'
      0003FC 66                    1157 	.db #0x66	; 102	'f'
      0003FD 7C                    1158 	.db #0x7c	; 124
      0003FE 60                    1159 	.db #0x60	; 96
      0003FF F0                    1160 	.db #0xf0	; 240
      000400 00                    1161 	.db #0x00	; 0
      000401 00                    1162 	.db #0x00	; 0
      000402 76                    1163 	.db #0x76	; 118	'v'
      000403 CC                    1164 	.db #0xcc	; 204
      000404 CC                    1165 	.db #0xcc	; 204
      000405 7C                    1166 	.db #0x7c	; 124
      000406 0C                    1167 	.db #0x0c	; 12
      000407 1E                    1168 	.db #0x1e	; 30
      000408 00                    1169 	.db #0x00	; 0
      000409 00                    1170 	.db #0x00	; 0
      00040A DC                    1171 	.db #0xdc	; 220
      00040B 76                    1172 	.db #0x76	; 118	'v'
      00040C 66                    1173 	.db #0x66	; 102	'f'
      00040D 60                    1174 	.db #0x60	; 96
      00040E F0                    1175 	.db #0xf0	; 240
      00040F 00                    1176 	.db #0x00	; 0
      000410 00                    1177 	.db #0x00	; 0
      000411 00                    1178 	.db #0x00	; 0
      000412 7C                    1179 	.db #0x7c	; 124
      000413 C0                    1180 	.db #0xc0	; 192
      000414 78                    1181 	.db #0x78	; 120	'x'
      000415 0C                    1182 	.db #0x0c	; 12
      000416 F8                    1183 	.db #0xf8	; 248
      000417 00                    1184 	.db #0x00	; 0
      000418 10                    1185 	.db #0x10	; 16
      000419 30                    1186 	.db #0x30	; 48	'0'
      00041A 7C                    1187 	.db #0x7c	; 124
      00041B 30                    1188 	.db #0x30	; 48	'0'
      00041C 30                    1189 	.db #0x30	; 48	'0'
      00041D 34                    1190 	.db #0x34	; 52	'4'
      00041E 18                    1191 	.db #0x18	; 24
      00041F 00                    1192 	.db #0x00	; 0
      000420 00                    1193 	.db #0x00	; 0
      000421 00                    1194 	.db #0x00	; 0
      000422 CC                    1195 	.db #0xcc	; 204
      000423 CC                    1196 	.db #0xcc	; 204
      000424 CC                    1197 	.db #0xcc	; 204
      000425 CC                    1198 	.db #0xcc	; 204
      000426 76                    1199 	.db #0x76	; 118	'v'
      000427 00                    1200 	.db #0x00	; 0
      000428 00                    1201 	.db #0x00	; 0
      000429 00                    1202 	.db #0x00	; 0
      00042A CC                    1203 	.db #0xcc	; 204
      00042B CC                    1204 	.db #0xcc	; 204
      00042C CC                    1205 	.db #0xcc	; 204
      00042D 78                    1206 	.db #0x78	; 120	'x'
      00042E 30                    1207 	.db #0x30	; 48	'0'
      00042F 00                    1208 	.db #0x00	; 0
      000430 00                    1209 	.db #0x00	; 0
      000431 00                    1210 	.db #0x00	; 0
      000432 C6                    1211 	.db #0xc6	; 198
      000433 D6                    1212 	.db #0xd6	; 214
      000434 FE                    1213 	.db #0xfe	; 254
      000435 FE                    1214 	.db #0xfe	; 254
      000436 6C                    1215 	.db #0x6c	; 108	'l'
      000437 00                    1216 	.db #0x00	; 0
      000438 00                    1217 	.db #0x00	; 0
      000439 00                    1218 	.db #0x00	; 0
      00043A C6                    1219 	.db #0xc6	; 198
      00043B 6C                    1220 	.db #0x6c	; 108	'l'
      00043C 38                    1221 	.db #0x38	; 56	'8'
      00043D 6C                    1222 	.db #0x6c	; 108	'l'
      00043E C6                    1223 	.db #0xc6	; 198
      00043F 00                    1224 	.db #0x00	; 0
      000440 00                    1225 	.db #0x00	; 0
      000441 00                    1226 	.db #0x00	; 0
      000442 CC                    1227 	.db #0xcc	; 204
      000443 CC                    1228 	.db #0xcc	; 204
      000444 CC                    1229 	.db #0xcc	; 204
      000445 7C                    1230 	.db #0x7c	; 124
      000446 0C                    1231 	.db #0x0c	; 12
      000447 F8                    1232 	.db #0xf8	; 248
      000448 00                    1233 	.db #0x00	; 0
      000449 00                    1234 	.db #0x00	; 0
      00044A FC                    1235 	.db #0xfc	; 252
      00044B 98                    1236 	.db #0x98	; 152
      00044C 30                    1237 	.db #0x30	; 48	'0'
      00044D 64                    1238 	.db #0x64	; 100	'd'
      00044E FC                    1239 	.db #0xfc	; 252
      00044F 00                    1240 	.db #0x00	; 0
      000450 1C                    1241 	.db #0x1c	; 28
      000451 30                    1242 	.db #0x30	; 48	'0'
      000452 30                    1243 	.db #0x30	; 48	'0'
      000453 E0                    1244 	.db #0xe0	; 224
      000454 30                    1245 	.db #0x30	; 48	'0'
      000455 30                    1246 	.db #0x30	; 48	'0'
      000456 1C                    1247 	.db #0x1c	; 28
      000457 00                    1248 	.db #0x00	; 0
      000458 18                    1249 	.db #0x18	; 24
      000459 18                    1250 	.db #0x18	; 24
      00045A 18                    1251 	.db #0x18	; 24
      00045B 00                    1252 	.db #0x00	; 0
      00045C 18                    1253 	.db #0x18	; 24
      00045D 18                    1254 	.db #0x18	; 24
      00045E 18                    1255 	.db #0x18	; 24
      00045F 00                    1256 	.db #0x00	; 0
      000460 E0                    1257 	.db #0xe0	; 224
      000461 30                    1258 	.db #0x30	; 48	'0'
      000462 30                    1259 	.db #0x30	; 48	'0'
      000463 1C                    1260 	.db #0x1c	; 28
      000464 30                    1261 	.db #0x30	; 48	'0'
      000465 30                    1262 	.db #0x30	; 48	'0'
      000466 E0                    1263 	.db #0xe0	; 224
      000467 00                    1264 	.db #0x00	; 0
      000468 76                    1265 	.db #0x76	; 118	'v'
      000469 DC                    1266 	.db #0xdc	; 220
      00046A 00                    1267 	.db #0x00	; 0
      00046B 00                    1268 	.db #0x00	; 0
      00046C 00                    1269 	.db #0x00	; 0
      00046D 00                    1270 	.db #0x00	; 0
      00046E 00                    1271 	.db #0x00	; 0
      00046F 00                    1272 	.db #0x00	; 0
      000470 00                    1273 	.db #0x00	; 0
      000471 10                    1274 	.db #0x10	; 16
      000472 38                    1275 	.db #0x38	; 56	'8'
      000473 6C                    1276 	.db #0x6c	; 108	'l'
      000474 C6                    1277 	.db #0xc6	; 198
      000475 C6                    1278 	.db #0xc6	; 198
      000476 FE                    1279 	.db #0xfe	; 254
      000477 00                    1280 	.db #0x00	; 0
      000478                       1281 _pattern_black_0:
      000478 FF                    1282 	.db #0xff	; 255
      000479 FF                    1283 	.db #0xff	; 255
      00047A FF                    1284 	.db #0xff	; 255
      00047B FF                    1285 	.db #0xff	; 255
      00047C FF                    1286 	.db #0xff	; 255
      00047D FF                    1287 	.db #0xff	; 255
      00047E FF                    1288 	.db #0xff	; 255
      00047F FF                    1289 	.db #0xff	; 255
      000480                       1290 _pattern_black_1:
      000480 FE                    1291 	.db #0xfe	; 254
      000481 FF                    1292 	.db #0xff	; 255
      000482 FF                    1293 	.db #0xff	; 255
      000483 FF                    1294 	.db #0xff	; 255
      000484 FE                    1295 	.db #0xfe	; 254
      000485 FF                    1296 	.db #0xff	; 255
      000486 FF                    1297 	.db #0xff	; 255
      000487 FE                    1298 	.db #0xfe	; 254
      000488                       1299 _pattern_black_2:
      000488 FF                    1300 	.db #0xff	; 255
      000489 FF                    1301 	.db #0xff	; 255
      00048A FF                    1302 	.db #0xff	; 255
      00048B FF                    1303 	.db #0xff	; 255
      00048C FF                    1304 	.db #0xff	; 255
      00048D FB                    1305 	.db #0xfb	; 251
      00048E FF                    1306 	.db #0xff	; 255
      00048F BB                    1307 	.db #0xbb	; 187
      000490                       1308 _pattern_black_3:
      000490 FB                    1309 	.db #0xfb	; 251
      000491 FE                    1310 	.db #0xfe	; 254
      000492 FD                    1311 	.db #0xfd	; 253
      000493 FE                    1312 	.db #0xfe	; 254
      000494 F7                    1313 	.db #0xf7	; 247
      000495 FA                    1314 	.db #0xfa	; 250
      000496 AF                    1315 	.db #0xaf	; 175
      000497 55                    1316 	.db #0x55	; 85	'U'
      000498                       1317 _pattern_0:
      000498 9F                    1318 	.db #0x9f	; 159
      000499 90                    1319 	.db #0x90	; 144
      00049A 90                    1320 	.db #0x90	; 144
      00049B 93                    1321 	.db #0x93	; 147
      00049C 92                    1322 	.db #0x92	; 146
      00049D 92                    1323 	.db #0x92	; 146
      00049E 92                    1324 	.db #0x92	; 146
      00049F 92                    1325 	.db #0x92	; 146
      0004A0                       1326 _pattern_1:
      0004A0 FF                    1327 	.db #0xff	; 255
      0004A1 01                    1328 	.db #0x01	; 1
      0004A2 01                    1329 	.db #0x01	; 1
      0004A3 F9                    1330 	.db #0xf9	; 249
      0004A4 09                    1331 	.db #0x09	; 9
      0004A5 09                    1332 	.db #0x09	; 9
      0004A6 49                    1333 	.db #0x49	; 73	'I'
      0004A7 49                    1334 	.db #0x49	; 73	'I'
      0004A8                       1335 _pattern_2:
      0004A8 92                    1336 	.db #0x92	; 146
      0004A9 93                    1337 	.db #0x93	; 147
      0004AA 90                    1338 	.db #0x90	; 144
      0004AB 90                    1339 	.db #0x90	; 144
      0004AC 9F                    1340 	.db #0x9f	; 159
      0004AD 80                    1341 	.db #0x80	; 128
      0004AE 80                    1342 	.db #0x80	; 128
      0004AF FF                    1343 	.db #0xff	; 255
      0004B0                       1344 _pattern_3:
      0004B0 49                    1345 	.db #0x49	; 73	'I'
      0004B1 C9                    1346 	.db #0xc9	; 201
      0004B2 09                    1347 	.db #0x09	; 9
      0004B3 09                    1348 	.db #0x09	; 9
      0004B4 F9                    1349 	.db #0xf9	; 249
      0004B5 01                    1350 	.db #0x01	; 1
      0004B6 01                    1351 	.db #0x01	; 1
      0004B7 FF                    1352 	.db #0xff	; 255
      0004B8                       1353 _pattern_4:
      0004B8 7F                    1354 	.db #0x7f	; 127
      0004B9 81                    1355 	.db #0x81	; 129
      0004BA 83                    1356 	.db #0x83	; 131
      0004BB 87                    1357 	.db #0x87	; 135
      0004BC 8F                    1358 	.db #0x8f	; 143
      0004BD 9F                    1359 	.db #0x9f	; 159
      0004BE BF                    1360 	.db #0xbf	; 191
      0004BF FF                    1361 	.db #0xff	; 255
      0004C0                       1362 _pattern_5:
      0004C0 FE                    1363 	.db #0xfe	; 254
      0004C1 81                    1364 	.db #0x81	; 129
      0004C2 C1                    1365 	.db #0xc1	; 193
      0004C3 E1                    1366 	.db #0xe1	; 225
      0004C4 F1                    1367 	.db #0xf1	; 241
      0004C5 F9                    1368 	.db #0xf9	; 249
      0004C6 FD                    1369 	.db #0xfd	; 253
      0004C7 FF                    1370 	.db #0xff	; 255
      0004C8                       1371 _pattern_6:
      0004C8 FF                    1372 	.db #0xff	; 255
      0004C9 BF                    1373 	.db #0xbf	; 191
      0004CA 9F                    1374 	.db #0x9f	; 159
      0004CB 8F                    1375 	.db #0x8f	; 143
      0004CC 87                    1376 	.db #0x87	; 135
      0004CD 83                    1377 	.db #0x83	; 131
      0004CE 81                    1378 	.db #0x81	; 129
      0004CF 7F                    1379 	.db #0x7f	; 127
      0004D0                       1380 _pattern_7:
      0004D0 FF                    1381 	.db #0xff	; 255
      0004D1 FD                    1382 	.db #0xfd	; 253
      0004D2 F9                    1383 	.db #0xf9	; 249
      0004D3 F1                    1384 	.db #0xf1	; 241
      0004D4 E1                    1385 	.db #0xe1	; 225
      0004D5 C1                    1386 	.db #0xc1	; 193
      0004D6 81                    1387 	.db #0x81	; 129
      0004D7 FE                    1388 	.db #0xfe	; 254
      0004D8                       1389 _pattern_8:
      0004D8 7F                    1390 	.db #0x7f	; 127
      0004D9 AE                    1391 	.db #0xae	; 174
      0004DA FF                    1392 	.db #0xff	; 255
      0004DB 5B                    1393 	.db #0x5b	; 91
      0004DC FF                    1394 	.db #0xff	; 255
      0004DD AE                    1395 	.db #0xae	; 174
      0004DE FF                    1396 	.db #0xff	; 255
      0004DF DF                    1397 	.db #0xdf	; 223
      0004E0                       1398 _pattern_9:
      0004E0 FE                    1399 	.db #0xfe	; 254
      0004E1 BD                    1400 	.db #0xbd	; 189
      0004E2 DF                    1401 	.db #0xdf	; 223
      0004E3 7F                    1402 	.db #0x7f	; 127
      0004E4 FB                    1403 	.db #0xfb	; 251
      0004E5 DF                    1404 	.db #0xdf	; 223
      0004E6 FE                    1405 	.db #0xfe	; 254
      0004E7 EF                    1406 	.db #0xef	; 239
      0004E8                       1407 _pattern_10:
      0004E8 7F                    1408 	.db #0x7f	; 127
      0004E9 FF                    1409 	.db #0xff	; 255
      0004EA ED                    1410 	.db #0xed	; 237
      0004EB FF                    1411 	.db #0xff	; 255
      0004EC B6                    1412 	.db #0xb6	; 182
      0004ED FE                    1413 	.db #0xfe	; 254
      0004EE DB                    1414 	.db #0xdb	; 219
      0004EF 7D                    1415 	.db #0x7d	; 125
      0004F0                       1416 _pattern_11:
      0004F0 FE                    1417 	.db #0xfe	; 254
      0004F1 FF                    1418 	.db #0xff	; 255
      0004F2 FE                    1419 	.db #0xfe	; 254
      0004F3 77                    1420 	.db #0x77	; 119	'w'
      0004F4 FE                    1421 	.db #0xfe	; 254
      0004F5 DD                    1422 	.db #0xdd	; 221
      0004F6 EF                    1423 	.db #0xef	; 239
      0004F7 5A                    1424 	.db #0x5a	; 90	'Z'
      0004F8                       1425 _pattern_12:
      0004F8 7F                    1426 	.db #0x7f	; 127
      0004F9 D5                    1427 	.db #0xd5	; 213
      0004FA BF                    1428 	.db #0xbf	; 191
      0004FB ED                    1429 	.db #0xed	; 237
      0004FC BF                    1430 	.db #0xbf	; 191
      0004FD F5                    1431 	.db #0xf5	; 245
      0004FE BF                    1432 	.db #0xbf	; 191
      0004FF FF                    1433 	.db #0xff	; 255
      000500                       1434 _pattern_13:
      000500 FE                    1435 	.db #0xfe	; 254
      000501 5F                    1436 	.db #0x5f	; 95
      000502 F5                    1437 	.db #0xf5	; 245
      000503 DF                    1438 	.db #0xdf	; 223
      000504 FF                    1439 	.db #0xff	; 255
      000505 FF                    1440 	.db #0xff	; 255
      000506 FF                    1441 	.db #0xff	; 255
      000507 FF                    1442 	.db #0xff	; 255
      000508                       1443 _pattern_14:
      000508 EF                    1444 	.db #0xef	; 239
      000509 BF                    1445 	.db #0xbf	; 191
      00050A 7F                    1446 	.db #0x7f	; 127
      00050B FF                    1447 	.db #0xff	; 255
      00050C FF                    1448 	.db #0xff	; 255
      00050D FF                    1449 	.db #0xff	; 255
      00050E DB                    1450 	.db #0xdb	; 219
      00050F 7F                    1451 	.db #0x7f	; 127
      000510                       1452 _pattern_15:
      000510 FF                    1453 	.db #0xff	; 255
      000511 FD                    1454 	.db #0xfd	; 253
      000512 FF                    1455 	.db #0xff	; 255
      000513 DB                    1456 	.db #0xdb	; 219
      000514 FD                    1457 	.db #0xfd	; 253
      000515 7B                    1458 	.db #0x7b	; 123
      000516 D7                    1459 	.db #0xd7	; 215
      000517 FE                    1460 	.db #0xfe	; 254
      000518                       1461 _pattern_16:
      000518 7F                    1462 	.db #0x7f	; 127
      000519 FF                    1463 	.db #0xff	; 255
      00051A EA                    1464 	.db #0xea	; 234
      00051B DF                    1465 	.db #0xdf	; 223
      00051C FF                    1466 	.db #0xff	; 255
      00051D DF                    1467 	.db #0xdf	; 223
      00051E FF                    1468 	.db #0xff	; 255
      00051F DF                    1469 	.db #0xdf	; 223
      000520                       1470 _pattern_17:
      000520 FE                    1471 	.db #0xfe	; 254
      000521 FF                    1472 	.db #0xff	; 255
      000522 AF                    1473 	.db #0xaf	; 175
      000523 FA                    1474 	.db #0xfa	; 250
      000524 FF                    1475 	.db #0xff	; 255
      000525 FA                    1476 	.db #0xfa	; 250
      000526 FF                    1477 	.db #0xff	; 255
      000527 FA                    1478 	.db #0xfa	; 250
      000528                       1479 _pattern_18:
      000528 FF                    1480 	.db #0xff	; 255
      000529 DF                    1481 	.db #0xdf	; 223
      00052A FF                    1482 	.db #0xff	; 255
      00052B DF                    1483 	.db #0xdf	; 223
      00052C FF                    1484 	.db #0xff	; 255
      00052D EA                    1485 	.db #0xea	; 234
      00052E FF                    1486 	.db #0xff	; 255
      00052F 55                    1487 	.db #0x55	; 85	'U'
      000530                       1488 _pattern_19:
      000530 FF                    1489 	.db #0xff	; 255
      000531 FA                    1490 	.db #0xfa	; 250
      000532 FF                    1491 	.db #0xff	; 255
      000533 FA                    1492 	.db #0xfa	; 250
      000534 F7                    1493 	.db #0xf7	; 247
      000535 AA                    1494 	.db #0xaa	; 170
      000536 FF                    1495 	.db #0xff	; 255
      000537 56                    1496 	.db #0x56	; 86	'V'
      000538                       1497 _pattern_20:
      000538 3F                    1498 	.db #0x3f	; 63
      000539 7F                    1499 	.db #0x7f	; 127
      00053A E0                    1500 	.db #0xe0	; 224
      00053B CE                    1501 	.db #0xce	; 206
      00053C E6                    1502 	.db #0xe6	; 230
      00053D 7C                    1503 	.db #0x7c	; 124
      00053E 39                    1504 	.db #0x39	; 57	'9'
      00053F 03                    1505 	.db #0x03	; 3
      000540                       1506 _pattern_21:
      000540 FF                    1507 	.db #0xff	; 255
      000541 FF                    1508 	.db #0xff	; 255
      000542 00                    1509 	.db #0x00	; 0
      000543 DB                    1510 	.db #0xdb	; 219
      000544 DB                    1511 	.db #0xdb	; 219
      000545 00                    1512 	.db #0x00	; 0
      000546 FF                    1513 	.db #0xff	; 255
      000547 FF                    1514 	.db #0xff	; 255
      000548                       1515 _pattern_22:
      000548 FC                    1516 	.db #0xfc	; 252
      000549 FE                    1517 	.db #0xfe	; 254
      00054A 07                    1518 	.db #0x07	; 7
      00054B 73                    1519 	.db #0x73	; 115	's'
      00054C 67                    1520 	.db #0x67	; 103	'g'
      00054D 3E                    1521 	.db #0x3e	; 62
      00054E 9C                    1522 	.db #0x9c	; 156
      00054F C0                    1523 	.db #0xc0	; 192
      000550                       1524 _pattern_23:
      000550 06                    1525 	.db #0x06	; 6
      000551 00                    1526 	.db #0x00	; 0
      000552 03                    1527 	.db #0x03	; 3
      000553 04                    1528 	.db #0x04	; 4
      000554 05                    1529 	.db #0x05	; 5
      000555 05                    1530 	.db #0x05	; 5
      000556 05                    1531 	.db #0x05	; 5
      000557 05                    1532 	.db #0x05	; 5
      000558                       1533 _pattern_24:
      000558 00                    1534 	.db #0x00	; 0
      000559 00                    1535 	.db #0x00	; 0
      00055A 33                    1536 	.db #0x33	; 51	'3'
      00055B 44                    1537 	.db #0x44	; 68	'D'
      00055C 55                    1538 	.db #0x55	; 85	'U'
      00055D 55                    1539 	.db #0x55	; 85	'U'
      00055E 55                    1540 	.db #0x55	; 85	'U'
      00055F 55                    1541 	.db #0x55	; 85	'U'
      000560                       1542 _pattern_25:
      000560 60                    1543 	.db #0x60	; 96
      000561 00                    1544 	.db #0x00	; 0
      000562 40                    1545 	.db #0x40	; 64
      000563 20                    1546 	.db #0x20	; 32
      000564 20                    1547 	.db #0x20	; 32
      000565 20                    1548 	.db #0x20	; 32
      000566 20                    1549 	.db #0x20	; 32
      000567 20                    1550 	.db #0x20	; 32
      000568                       1551 _pattern_26:
      000568 05                    1552 	.db #0x05	; 5
      000569 05                    1553 	.db #0x05	; 5
      00056A 05                    1554 	.db #0x05	; 5
      00056B 05                    1555 	.db #0x05	; 5
      00056C 05                    1556 	.db #0x05	; 5
      00056D 05                    1557 	.db #0x05	; 5
      00056E 05                    1558 	.db #0x05	; 5
      00056F 05                    1559 	.db #0x05	; 5
      000570                       1560 _pattern_27:
      000570 55                    1561 	.db #0x55	; 85	'U'
      000571 55                    1562 	.db #0x55	; 85	'U'
      000572 55                    1563 	.db #0x55	; 85	'U'
      000573 55                    1564 	.db #0x55	; 85	'U'
      000574 55                    1565 	.db #0x55	; 85	'U'
      000575 55                    1566 	.db #0x55	; 85	'U'
      000576 55                    1567 	.db #0x55	; 85	'U'
      000577 55                    1568 	.db #0x55	; 85	'U'
      000578                       1569 _pattern_28:
      000578 20                    1570 	.db #0x20	; 32
      000579 20                    1571 	.db #0x20	; 32
      00057A 20                    1572 	.db #0x20	; 32
      00057B 20                    1573 	.db #0x20	; 32
      00057C 20                    1574 	.db #0x20	; 32
      00057D 20                    1575 	.db #0x20	; 32
      00057E 20                    1576 	.db #0x20	; 32
      00057F 20                    1577 	.db #0x20	; 32
      000580                       1578 _pattern_29:
      000580 05                    1579 	.db #0x05	; 5
      000581 05                    1580 	.db #0x05	; 5
      000582 07                    1581 	.db #0x07	; 7
      000583 07                    1582 	.db #0x07	; 7
      000584 07                    1583 	.db #0x07	; 7
      000585 05                    1584 	.db #0x05	; 5
      000586 05                    1585 	.db #0x05	; 5
      000587 05                    1586 	.db #0x05	; 5
      000588                       1587 _pattern_30:
      000588 55                    1588 	.db #0x55	; 85	'U'
      000589 55                    1589 	.db #0x55	; 85	'U'
      00058A FF                    1590 	.db #0xff	; 255
      00058B FF                    1591 	.db #0xff	; 255
      00058C FF                    1592 	.db #0xff	; 255
      00058D 55                    1593 	.db #0x55	; 85	'U'
      00058E 55                    1594 	.db #0x55	; 85	'U'
      00058F 55                    1595 	.db #0x55	; 85	'U'
      000590                       1596 _pattern_31:
      000590 20                    1597 	.db #0x20	; 32
      000591 20                    1598 	.db #0x20	; 32
      000592 E0                    1599 	.db #0xe0	; 224
      000593 E0                    1600 	.db #0xe0	; 224
      000594 E0                    1601 	.db #0xe0	; 224
      000595 20                    1602 	.db #0x20	; 32
      000596 20                    1603 	.db #0x20	; 32
      000597 20                    1604 	.db #0x20	; 32
      000598                       1605 _pattern_37:
      000598 05                    1606 	.db #0x05	; 5
      000599 05                    1607 	.db #0x05	; 5
      00059A 05                    1608 	.db #0x05	; 5
      00059B 05                    1609 	.db #0x05	; 5
      00059C 04                    1610 	.db #0x04	; 4
      00059D 03                    1611 	.db #0x03	; 3
      00059E 00                    1612 	.db #0x00	; 0
      00059F 06                    1613 	.db #0x06	; 6
      0005A0                       1614 _pattern_38:
      0005A0 55                    1615 	.db #0x55	; 85	'U'
      0005A1 55                    1616 	.db #0x55	; 85	'U'
      0005A2 55                    1617 	.db #0x55	; 85	'U'
      0005A3 55                    1618 	.db #0x55	; 85	'U'
      0005A4 44                    1619 	.db #0x44	; 68	'D'
      0005A5 33                    1620 	.db #0x33	; 51	'3'
      0005A6 00                    1621 	.db #0x00	; 0
      0005A7 00                    1622 	.db #0x00	; 0
      0005A8                       1623 _pattern_39:
      0005A8 20                    1624 	.db #0x20	; 32
      0005A9 20                    1625 	.db #0x20	; 32
      0005AA 20                    1626 	.db #0x20	; 32
      0005AB 20                    1627 	.db #0x20	; 32
      0005AC 20                    1628 	.db #0x20	; 32
      0005AD 40                    1629 	.db #0x40	; 64
      0005AE 00                    1630 	.db #0x00	; 0
      0005AF 60                    1631 	.db #0x60	; 96
      0005B0                       1632 _pattern_32:
      0005B0 03                    1633 	.db #0x03	; 3
      0005B1 39                    1634 	.db #0x39	; 57	'9'
      0005B2 7C                    1635 	.db #0x7c	; 124
      0005B3 E6                    1636 	.db #0xe6	; 230
      0005B4 CE                    1637 	.db #0xce	; 206
      0005B5 E0                    1638 	.db #0xe0	; 224
      0005B6 7F                    1639 	.db #0x7f	; 127
      0005B7 3F                    1640 	.db #0x3f	; 63
      0005B8                       1641 _pattern_33:
      0005B8 FF                    1642 	.db #0xff	; 255
      0005B9 FF                    1643 	.db #0xff	; 255
      0005BA 00                    1644 	.db #0x00	; 0
      0005BB DB                    1645 	.db #0xdb	; 219
      0005BC DB                    1646 	.db #0xdb	; 219
      0005BD 00                    1647 	.db #0x00	; 0
      0005BE FF                    1648 	.db #0xff	; 255
      0005BF FF                    1649 	.db #0xff	; 255
      0005C0                       1650 _pattern_34:
      0005C0 C0                    1651 	.db #0xc0	; 192
      0005C1 9C                    1652 	.db #0x9c	; 156
      0005C2 3E                    1653 	.db #0x3e	; 62
      0005C3 67                    1654 	.db #0x67	; 103	'g'
      0005C4 73                    1655 	.db #0x73	; 115	's'
      0005C5 07                    1656 	.db #0x07	; 7
      0005C6 FE                    1657 	.db #0xfe	; 254
      0005C7 FC                    1658 	.db #0xfc	; 252
      0005C8                       1659 _sprite_dust_0:
      0005C8 10                    1660 	.db #0x10	; 16
      0005C9 42                    1661 	.db #0x42	; 66	'B'
      0005CA 10                    1662 	.db #0x10	; 16
      0005CB 45                    1663 	.db #0x45	; 69	'E'
      0005CC 20                    1664 	.db #0x20	; 32
      0005CD 89                    1665 	.db #0x89	; 137
      0005CE 20                    1666 	.db #0x20	; 32
      0005CF 88                    1667 	.db #0x88	; 136
      0005D0                       1668 _sprite_dust_1:
      0005D0 10                    1669 	.db #0x10	; 16
      0005D1 42                    1670 	.db #0x42	; 66	'B'
      0005D2 00                    1671 	.db #0x00	; 0
      0005D3 04                    1672 	.db #0x04	; 4
      0005D4 20                    1673 	.db #0x20	; 32
      0005D5 81                    1674 	.db #0x81	; 129
      0005D6 20                    1675 	.db #0x20	; 32
      0005D7 08                    1676 	.db #0x08	; 8
      0005D8                       1677 _sprite_dust_2:
      0005D8 10                    1678 	.db #0x10	; 16
      0005D9 00                    1679 	.db #0x00	; 0
      0005DA 00                    1680 	.db #0x00	; 0
      0005DB 04                    1681 	.db #0x04	; 4
      0005DC 20                    1682 	.db #0x20	; 32
      0005DD 80                    1683 	.db #0x80	; 128
      0005DE 20                    1684 	.db #0x20	; 32
      0005DF 00                    1685 	.db #0x00	; 0
      0005E0                       1686 _sprite_dust_3:
      0005E0 10                    1687 	.db #0x10	; 16
      0005E1 00                    1688 	.db #0x00	; 0
      0005E2 00                    1689 	.db #0x00	; 0
      0005E3 04                    1690 	.db #0x04	; 4
      0005E4 00                    1691 	.db #0x00	; 0
      0005E5 00                    1692 	.db #0x00	; 0
      0005E6 20                    1693 	.db #0x20	; 32
      0005E7 00                    1694 	.db #0x00	; 0
      0005E8                       1695 _pattern_title:
      0005E8 FE                    1696 	.db #0xfe	; 254
      0005E9 FE                    1697 	.db #0xfe	; 254
      0005EA FE                    1698 	.db #0xfe	; 254
      0005EB FE                    1699 	.db #0xfe	; 254
      0005EC FE                    1700 	.db #0xfe	; 254
      0005ED FE                    1701 	.db #0xfe	; 254
      0005EE FE                    1702 	.db #0xfe	; 254
      0005EF 00                    1703 	.db #0x00	; 0
      0005F0                       1704 _color_black_0:
      0005F0 14                    1705 	.db #0x14	; 20
      0005F1 14                    1706 	.db #0x14	; 20
      0005F2 14                    1707 	.db #0x14	; 20
      0005F3 14                    1708 	.db #0x14	; 20
      0005F4 14                    1709 	.db #0x14	; 20
      0005F5 14                    1710 	.db #0x14	; 20
      0005F6 14                    1711 	.db #0x14	; 20
      0005F7 14                    1712 	.db #0x14	; 20
      0005F8                       1713 _color_black_1:
      0005F8 14                    1714 	.db #0x14	; 20
      0005F9 14                    1715 	.db #0x14	; 20
      0005FA 14                    1716 	.db #0x14	; 20
      0005FB 14                    1717 	.db #0x14	; 20
      0005FC 14                    1718 	.db #0x14	; 20
      0005FD 14                    1719 	.db #0x14	; 20
      0005FE 14                    1720 	.db #0x14	; 20
      0005FF 14                    1721 	.db #0x14	; 20
      000600                       1722 _color_black_2:
      000600 14                    1723 	.db #0x14	; 20
      000601 14                    1724 	.db #0x14	; 20
      000602 14                    1725 	.db #0x14	; 20
      000603 14                    1726 	.db #0x14	; 20
      000604 14                    1727 	.db #0x14	; 20
      000605 14                    1728 	.db #0x14	; 20
      000606 14                    1729 	.db #0x14	; 20
      000607 14                    1730 	.db #0x14	; 20
      000608                       1731 _color_black_3:
      000608 14                    1732 	.db #0x14	; 20
      000609 14                    1733 	.db #0x14	; 20
      00060A 14                    1734 	.db #0x14	; 20
      00060B 14                    1735 	.db #0x14	; 20
      00060C 14                    1736 	.db #0x14	; 20
      00060D 14                    1737 	.db #0x14	; 20
      00060E 14                    1738 	.db #0x14	; 20
      00060F 14                    1739 	.db #0x14	; 20
      000610                       1740 _color_0:
      000610 13                    1741 	.db #0x13	; 19
      000611 13                    1742 	.db #0x13	; 19
      000612 13                    1743 	.db #0x13	; 19
      000613 13                    1744 	.db #0x13	; 19
      000614 13                    1745 	.db #0x13	; 19
      000615 13                    1746 	.db #0x13	; 19
      000616 13                    1747 	.db #0x13	; 19
      000617 13                    1748 	.db #0x13	; 19
      000618                       1749 _color_1:
      000618 12                    1750 	.db #0x12	; 18
      000619 12                    1751 	.db #0x12	; 18
      00061A 12                    1752 	.db #0x12	; 18
      00061B 12                    1753 	.db #0x12	; 18
      00061C 12                    1754 	.db #0x12	; 18
      00061D 12                    1755 	.db #0x12	; 18
      00061E 12                    1756 	.db #0x12	; 18
      00061F 12                    1757 	.db #0x12	; 18
      000620                       1758 _color_2:
      000620 12                    1759 	.db #0x12	; 18
      000621 12                    1760 	.db #0x12	; 18
      000622 12                    1761 	.db #0x12	; 18
      000623 12                    1762 	.db #0x12	; 18
      000624 12                    1763 	.db #0x12	; 18
      000625 12                    1764 	.db #0x12	; 18
      000626 12                    1765 	.db #0x12	; 18
      000627 12                    1766 	.db #0x12	; 18
      000628                       1767 _color_3:
      000628 1C                    1768 	.db #0x1c	; 28
      000629 1C                    1769 	.db #0x1c	; 28
      00062A 1C                    1770 	.db #0x1c	; 28
      00062B 1C                    1771 	.db #0x1c	; 28
      00062C 1C                    1772 	.db #0x1c	; 28
      00062D 1C                    1773 	.db #0x1c	; 28
      00062E 1C                    1774 	.db #0x1c	; 28
      00062F 1C                    1775 	.db #0x1c	; 28
      000630                       1776 _color_4:
      000630 96                    1777 	.db #0x96	; 150
      000631 96                    1778 	.db #0x96	; 150
      000632 96                    1779 	.db #0x96	; 150
      000633 96                    1780 	.db #0x96	; 150
      000634 96                    1781 	.db #0x96	; 150
      000635 96                    1782 	.db #0x96	; 150
      000636 96                    1783 	.db #0x96	; 150
      000637 96                    1784 	.db #0x96	; 150
      000638                       1785 _color_5:
      000638 98                    1786 	.db #0x98	; 152
      000639 68                    1787 	.db #0x68	; 104	'h'
      00063A 68                    1788 	.db #0x68	; 104	'h'
      00063B 68                    1789 	.db #0x68	; 104	'h'
      00063C 68                    1790 	.db #0x68	; 104	'h'
      00063D 68                    1791 	.db #0x68	; 104	'h'
      00063E 68                    1792 	.db #0x68	; 104	'h'
      00063F 68                    1793 	.db #0x68	; 104	'h'
      000640                       1794 _color_6:
      000640 68                    1795 	.db #0x68	; 104	'h'
      000641 68                    1796 	.db #0x68	; 104	'h'
      000642 68                    1797 	.db #0x68	; 104	'h'
      000643 68                    1798 	.db #0x68	; 104	'h'
      000644 68                    1799 	.db #0x68	; 104	'h'
      000645 68                    1800 	.db #0x68	; 104	'h'
      000646 68                    1801 	.db #0x68	; 104	'h'
      000647 68                    1802 	.db #0x68	; 104	'h'
      000648                       1803 _color_7:
      000648 89                    1804 	.db #0x89	; 137
      000649 89                    1805 	.db #0x89	; 137
      00064A 89                    1806 	.db #0x89	; 137
      00064B 89                    1807 	.db #0x89	; 137
      00064C 89                    1808 	.db #0x89	; 137
      00064D 89                    1809 	.db #0x89	; 137
      00064E 89                    1810 	.db #0x89	; 137
      00064F 86                    1811 	.db #0x86	; 134
      000650                       1812 _color_8:
      000650 41                    1813 	.db #0x41	; 65	'A'
      000651 47                    1814 	.db #0x47	; 71	'G'
      000652 47                    1815 	.db #0x47	; 71	'G'
      000653 47                    1816 	.db #0x47	; 71	'G'
      000654 47                    1817 	.db #0x47	; 71	'G'
      000655 47                    1818 	.db #0x47	; 71	'G'
      000656 47                    1819 	.db #0x47	; 71	'G'
      000657 47                    1820 	.db #0x47	; 71	'G'
      000658                       1821 _color_9:
      000658 41                    1822 	.db #0x41	; 65	'A'
      000659 45                    1823 	.db #0x45	; 69	'E'
      00065A 47                    1824 	.db #0x47	; 71	'G'
      00065B 47                    1825 	.db #0x47	; 71	'G'
      00065C 45                    1826 	.db #0x45	; 69	'E'
      00065D 45                    1827 	.db #0x45	; 69	'E'
      00065E 41                    1828 	.db #0x41	; 65	'A'
      00065F 45                    1829 	.db #0x45	; 69	'E'
      000660                       1830 _color_10:
      000660 47                    1831 	.db #0x47	; 71	'G'
      000661 45                    1832 	.db #0x45	; 69	'E'
      000662 45                    1833 	.db #0x45	; 69	'E'
      000663 45                    1834 	.db #0x45	; 69	'E'
      000664 45                    1835 	.db #0x45	; 69	'E'
      000665 41                    1836 	.db #0x41	; 65	'A'
      000666 45                    1837 	.db #0x45	; 69	'E'
      000667 41                    1838 	.db #0x41	; 65	'A'
      000668                       1839 _color_11:
      000668 41                    1840 	.db #0x41	; 65	'A'
      000669 41                    1841 	.db #0x41	; 65	'A'
      00066A 41                    1842 	.db #0x41	; 65	'A'
      00066B 41                    1843 	.db #0x41	; 65	'A'
      00066C 41                    1844 	.db #0x41	; 65	'A'
      00066D 41                    1845 	.db #0x41	; 65	'A'
      00066E 41                    1846 	.db #0x41	; 65	'A'
      00066F 41                    1847 	.db #0x41	; 65	'A'
      000670                       1848 _color_12:
      000670 D1                    1849 	.db #0xd1	; 209
      000671 DF                    1850 	.db #0xdf	; 223
      000672 DF                    1851 	.db #0xdf	; 223
      000673 DF                    1852 	.db #0xdf	; 223
      000674 DF                    1853 	.db #0xdf	; 223
      000675 DF                    1854 	.db #0xdf	; 223
      000676 DF                    1855 	.db #0xdf	; 223
      000677 DF                    1856 	.db #0xdf	; 223
      000678                       1857 _color_13:
      000678 D1                    1858 	.db #0xd1	; 209
      000679 DF                    1859 	.db #0xdf	; 223
      00067A DF                    1860 	.db #0xdf	; 223
      00067B DF                    1861 	.db #0xdf	; 223
      00067C DF                    1862 	.db #0xdf	; 223
      00067D DF                    1863 	.db #0xdf	; 223
      00067E DF                    1864 	.db #0xdf	; 223
      00067F DF                    1865 	.db #0xdf	; 223
      000680                       1866 _color_14:
      000680 DF                    1867 	.db #0xdf	; 223
      000681 DF                    1868 	.db #0xdf	; 223
      000682 DF                    1869 	.db #0xdf	; 223
      000683 D1                    1870 	.db #0xd1	; 209
      000684 D1                    1871 	.db #0xd1	; 209
      000685 D1                    1872 	.db #0xd1	; 209
      000686 D1                    1873 	.db #0xd1	; 209
      000687 D1                    1874 	.db #0xd1	; 209
      000688                       1875 _color_15:
      000688 D1                    1876 	.db #0xd1	; 209
      000689 D1                    1877 	.db #0xd1	; 209
      00068A D1                    1878 	.db #0xd1	; 209
      00068B D1                    1879 	.db #0xd1	; 209
      00068C D1                    1880 	.db #0xd1	; 209
      00068D D1                    1881 	.db #0xd1	; 209
      00068E D1                    1882 	.db #0xd1	; 209
      00068F D1                    1883 	.db #0xd1	; 209
      000690                       1884 _color_16:
      000690 A1                    1885 	.db #0xa1	; 161
      000691 BF                    1886 	.db #0xbf	; 191
      000692 BF                    1887 	.db #0xbf	; 191
      000693 BF                    1888 	.db #0xbf	; 191
      000694 BF                    1889 	.db #0xbf	; 191
      000695 BF                    1890 	.db #0xbf	; 191
      000696 BF                    1891 	.db #0xbf	; 191
      000697 BF                    1892 	.db #0xbf	; 191
      000698                       1893 _color_17:
      000698 A1                    1894 	.db #0xa1	; 161
      000699 AF                    1895 	.db #0xaf	; 175
      00069A AF                    1896 	.db #0xaf	; 175
      00069B A1                    1897 	.db #0xa1	; 161
      00069C A1                    1898 	.db #0xa1	; 161
      00069D A1                    1899 	.db #0xa1	; 161
      00069E A1                    1900 	.db #0xa1	; 161
      00069F A1                    1901 	.db #0xa1	; 161
      0006A0                       1902 _color_18:
      0006A0 AF                    1903 	.db #0xaf	; 175
      0006A1 AF                    1904 	.db #0xaf	; 175
      0006A2 AF                    1905 	.db #0xaf	; 175
      0006A3 AF                    1906 	.db #0xaf	; 175
      0006A4 A1                    1907 	.db #0xa1	; 161
      0006A5 A1                    1908 	.db #0xa1	; 161
      0006A6 A1                    1909 	.db #0xa1	; 161
      0006A7 A1                    1910 	.db #0xa1	; 161
      0006A8                       1911 _color_19:
      0006A8 B1                    1912 	.db #0xb1	; 177
      0006A9 B1                    1913 	.db #0xb1	; 177
      0006AA B1                    1914 	.db #0xb1	; 177
      0006AB B1                    1915 	.db #0xb1	; 177
      0006AC B1                    1916 	.db #0xb1	; 177
      0006AD B1                    1917 	.db #0xb1	; 177
      0006AE B1                    1918 	.db #0xb1	; 177
      0006AF B1                    1919 	.db #0xb1	; 177
      0006B0                       1920 _color_column_1:
      0006B0 F1                    1921 	.db #0xf1	; 241
      0006B1 E1                    1922 	.db #0xe1	; 225
      0006B2 E1                    1923 	.db #0xe1	; 225
      0006B3 E1                    1924 	.db #0xe1	; 225
      0006B4 E1                    1925 	.db #0xe1	; 225
      0006B5 E1                    1926 	.db #0xe1	; 225
      0006B6 E1                    1927 	.db #0xe1	; 225
      0006B7 E1                    1928 	.db #0xe1	; 225
      0006B8                       1929 _color_column_2:
      0006B8 F1                    1930 	.db #0xf1	; 241
      0006B9 E1                    1931 	.db #0xe1	; 225
      0006BA E1                    1932 	.db #0xe1	; 225
      0006BB E1                    1933 	.db #0xe1	; 225
      0006BC E1                    1934 	.db #0xe1	; 225
      0006BD E1                    1935 	.db #0xe1	; 225
      0006BE E1                    1936 	.db #0xe1	; 225
      0006BF E1                    1937 	.db #0xe1	; 225
      0006C0                       1938 _color_column_3:
      0006C0 F1                    1939 	.db #0xf1	; 241
      0006C1 E1                    1940 	.db #0xe1	; 225
      0006C2 E1                    1941 	.db #0xe1	; 225
      0006C3 E1                    1942 	.db #0xe1	; 225
      0006C4 E1                    1943 	.db #0xe1	; 225
      0006C5 E1                    1944 	.db #0xe1	; 225
      0006C6 E1                    1945 	.db #0xe1	; 225
      0006C7 E1                    1946 	.db #0xe1	; 225
      0006C8                       1947 _color_column_4:
      0006C8 F1                    1948 	.db #0xf1	; 241
      0006C9 F1                    1949 	.db #0xf1	; 241
      0006CA F1                    1950 	.db #0xf1	; 241
      0006CB F1                    1951 	.db #0xf1	; 241
      0006CC F1                    1952 	.db #0xf1	; 241
      0006CD F1                    1953 	.db #0xf1	; 241
      0006CE F1                    1954 	.db #0xf1	; 241
      0006CF F1                    1955 	.db #0xf1	; 241
      0006D0                       1956 _color_column_5:
      0006D0 E1                    1957 	.db #0xe1	; 225
      0006D1 E1                    1958 	.db #0xe1	; 225
      0006D2 E1                    1959 	.db #0xe1	; 225
      0006D3 E1                    1960 	.db #0xe1	; 225
      0006D4 E1                    1961 	.db #0xe1	; 225
      0006D5 E1                    1962 	.db #0xe1	; 225
      0006D6 E1                    1963 	.db #0xe1	; 225
      0006D7 E1                    1964 	.db #0xe1	; 225
      0006D8                       1965 _color_column_6:
      0006D8 E1                    1966 	.db #0xe1	; 225
      0006D9 E1                    1967 	.db #0xe1	; 225
      0006DA E1                    1968 	.db #0xe1	; 225
      0006DB 41                    1969 	.db #0x41	; 65	'A'
      0006DC 41                    1970 	.db #0x41	; 65	'A'
      0006DD 41                    1971 	.db #0x41	; 65	'A'
      0006DE 41                    1972 	.db #0x41	; 65	'A'
      0006DF 41                    1973 	.db #0x41	; 65	'A'
      0006E0                       1974 _color_column_7:
      0006E0 F1                    1975 	.db #0xf1	; 241
      0006E1 F1                    1976 	.db #0xf1	; 241
      0006E2 F1                    1977 	.db #0xf1	; 241
      0006E3 F1                    1978 	.db #0xf1	; 241
      0006E4 F1                    1979 	.db #0xf1	; 241
      0006E5 F1                    1980 	.db #0xf1	; 241
      0006E6 F1                    1981 	.db #0xf1	; 241
      0006E7 F1                    1982 	.db #0xf1	; 241
      0006E8                       1983 _color_column_8:
      0006E8 E1                    1984 	.db #0xe1	; 225
      0006E9 E1                    1985 	.db #0xe1	; 225
      0006EA E1                    1986 	.db #0xe1	; 225
      0006EB F1                    1987 	.db #0xf1	; 241
      0006EC E1                    1988 	.db #0xe1	; 225
      0006ED E1                    1989 	.db #0xe1	; 225
      0006EE E1                    1990 	.db #0xe1	; 225
      0006EF E1                    1991 	.db #0xe1	; 225
      0006F0                       1992 _color_column_9:
      0006F0 41                    1993 	.db #0x41	; 65	'A'
      0006F1 41                    1994 	.db #0x41	; 65	'A'
      0006F2 41                    1995 	.db #0x41	; 65	'A'
      0006F3 F1                    1996 	.db #0xf1	; 241
      0006F4 41                    1997 	.db #0x41	; 65	'A'
      0006F5 41                    1998 	.db #0x41	; 65	'A'
      0006F6 41                    1999 	.db #0x41	; 65	'A'
      0006F7 41                    2000 	.db #0x41	; 65	'A'
      0006F8                       2001 _color_column_10:
      0006F8 F1                    2002 	.db #0xf1	; 241
      0006F9 F1                    2003 	.db #0xf1	; 241
      0006FA F1                    2004 	.db #0xf1	; 241
      0006FB F1                    2005 	.db #0xf1	; 241
      0006FC F1                    2006 	.db #0xf1	; 241
      0006FD F1                    2007 	.db #0xf1	; 241
      0006FE F1                    2008 	.db #0xf1	; 241
      0006FF F1                    2009 	.db #0xf1	; 241
      000700                       2010 _color_column_11:
      000700 E1                    2011 	.db #0xe1	; 225
      000701 E1                    2012 	.db #0xe1	; 225
      000702 E1                    2013 	.db #0xe1	; 225
      000703 E1                    2014 	.db #0xe1	; 225
      000704 E1                    2015 	.db #0xe1	; 225
      000705 E1                    2016 	.db #0xe1	; 225
      000706 E1                    2017 	.db #0xe1	; 225
      000707 E1                    2018 	.db #0xe1	; 225
      000708                       2019 _color_column_12:
      000708 41                    2020 	.db #0x41	; 65	'A'
      000709 41                    2021 	.db #0x41	; 65	'A'
      00070A 41                    2022 	.db #0x41	; 65	'A'
      00070B 41                    2023 	.db #0x41	; 65	'A'
      00070C 41                    2024 	.db #0x41	; 65	'A'
      00070D 41                    2025 	.db #0x41	; 65	'A'
      00070E 41                    2026 	.db #0x41	; 65	'A'
      00070F 41                    2027 	.db #0x41	; 65	'A'
      000710                       2028 _color_column_16:
      000710 F1                    2029 	.db #0xf1	; 241
      000711 F1                    2030 	.db #0xf1	; 241
      000712 F1                    2031 	.db #0xf1	; 241
      000713 F1                    2032 	.db #0xf1	; 241
      000714 F1                    2033 	.db #0xf1	; 241
      000715 F1                    2034 	.db #0xf1	; 241
      000716 F1                    2035 	.db #0xf1	; 241
      000717 F1                    2036 	.db #0xf1	; 241
      000718                       2037 _color_column_17:
      000718 E1                    2038 	.db #0xe1	; 225
      000719 E1                    2039 	.db #0xe1	; 225
      00071A E1                    2040 	.db #0xe1	; 225
      00071B E1                    2041 	.db #0xe1	; 225
      00071C E1                    2042 	.db #0xe1	; 225
      00071D E1                    2043 	.db #0xe1	; 225
      00071E E1                    2044 	.db #0xe1	; 225
      00071F E1                    2045 	.db #0xe1	; 225
      000720                       2046 _color_column_18:
      000720 41                    2047 	.db #0x41	; 65	'A'
      000721 41                    2048 	.db #0x41	; 65	'A'
      000722 41                    2049 	.db #0x41	; 65	'A'
      000723 41                    2050 	.db #0x41	; 65	'A'
      000724 41                    2051 	.db #0x41	; 65	'A'
      000725 E1                    2052 	.db #0xe1	; 225
      000726 E1                    2053 	.db #0xe1	; 225
      000727 E1                    2054 	.db #0xe1	; 225
      000728                       2055 _color_column_13:
      000728 E1                    2056 	.db #0xe1	; 225
      000729 E1                    2057 	.db #0xe1	; 225
      00072A E1                    2058 	.db #0xe1	; 225
      00072B E1                    2059 	.db #0xe1	; 225
      00072C E1                    2060 	.db #0xe1	; 225
      00072D E1                    2061 	.db #0xe1	; 225
      00072E E1                    2062 	.db #0xe1	; 225
      00072F F1                    2063 	.db #0xf1	; 241
      000730                       2064 _color_column_14:
      000730 E1                    2065 	.db #0xe1	; 225
      000731 E1                    2066 	.db #0xe1	; 225
      000732 E1                    2067 	.db #0xe1	; 225
      000733 E1                    2068 	.db #0xe1	; 225
      000734 E1                    2069 	.db #0xe1	; 225
      000735 E1                    2070 	.db #0xe1	; 225
      000736 E1                    2071 	.db #0xe1	; 225
      000737 F1                    2072 	.db #0xf1	; 241
      000738                       2073 _color_column_15:
      000738 E1                    2074 	.db #0xe1	; 225
      000739 E1                    2075 	.db #0xe1	; 225
      00073A E1                    2076 	.db #0xe1	; 225
      00073B E1                    2077 	.db #0xe1	; 225
      00073C E1                    2078 	.db #0xe1	; 225
      00073D E1                    2079 	.db #0xe1	; 225
      00073E E1                    2080 	.db #0xe1	; 225
      00073F F1                    2081 	.db #0xf1	; 241
      000740                       2082 _color_dust_0:
      000740 F1                    2083 	.db #0xf1	; 241
      000741 F1                    2084 	.db #0xf1	; 241
      000742 F1                    2085 	.db #0xf1	; 241
      000743 F1                    2086 	.db #0xf1	; 241
      000744 F1                    2087 	.db #0xf1	; 241
      000745 F1                    2088 	.db #0xf1	; 241
      000746 F1                    2089 	.db #0xf1	; 241
      000747 F1                    2090 	.db #0xf1	; 241
      000748                       2091 _color_dust_1:
      000748 F1                    2092 	.db #0xf1	; 241
      000749 F1                    2093 	.db #0xf1	; 241
      00074A F1                    2094 	.db #0xf1	; 241
      00074B F1                    2095 	.db #0xf1	; 241
      00074C F1                    2096 	.db #0xf1	; 241
      00074D F1                    2097 	.db #0xf1	; 241
      00074E F1                    2098 	.db #0xf1	; 241
      00074F F1                    2099 	.db #0xf1	; 241
      000750                       2100 _color_dust_2:
      000750 F1                    2101 	.db #0xf1	; 241
      000751 F1                    2102 	.db #0xf1	; 241
      000752 F1                    2103 	.db #0xf1	; 241
      000753 F1                    2104 	.db #0xf1	; 241
      000754 F1                    2105 	.db #0xf1	; 241
      000755 F1                    2106 	.db #0xf1	; 241
      000756 F1                    2107 	.db #0xf1	; 241
      000757 F1                    2108 	.db #0xf1	; 241
      000758                       2109 _color_dust_3:
      000758 F1                    2110 	.db #0xf1	; 241
      000759 F1                    2111 	.db #0xf1	; 241
      00075A F1                    2112 	.db #0xf1	; 241
      00075B F1                    2113 	.db #0xf1	; 241
      00075C F1                    2114 	.db #0xf1	; 241
      00075D F1                    2115 	.db #0xf1	; 241
      00075E F1                    2116 	.db #0xf1	; 241
      00075F F1                    2117 	.db #0xf1	; 241
      000760                       2118 _color_font_1:
      000760 F1                    2119 	.db #0xf1	; 241
      000761 F1                    2120 	.db #0xf1	; 241
      000762 E1                    2121 	.db #0xe1	; 225
      000763 71                    2122 	.db #0x71	; 113	'q'
      000764 71                    2123 	.db #0x71	; 113	'q'
      000765 51                    2124 	.db #0x51	; 81	'Q'
      000766 51                    2125 	.db #0x51	; 81	'Q'
      000767 41                    2126 	.db #0x41	; 65	'A'
      000768                       2127 _color_font_2:
      000768 61                    2128 	.db #0x61	; 97	'a'
      000769 61                    2129 	.db #0x61	; 97	'a'
      00076A 81                    2130 	.db #0x81	; 129
      00076B 81                    2131 	.db #0x81	; 129
      00076C 91                    2132 	.db #0x91	; 145
      00076D 91                    2133 	.db #0x91	; 145
      00076E E1                    2134 	.db #0xe1	; 225
      00076F E1                    2135 	.db #0xe1	; 225
      000770                       2136 _color_title_1:
      000770 A1                    2137 	.db #0xa1	; 161
      000771 A1                    2138 	.db #0xa1	; 161
      000772 A1                    2139 	.db #0xa1	; 161
      000773 A1                    2140 	.db #0xa1	; 161
      000774 A1                    2141 	.db #0xa1	; 161
      000775 A1                    2142 	.db #0xa1	; 161
      000776 A1                    2143 	.db #0xa1	; 161
      000777 A1                    2144 	.db #0xa1	; 161
      000778                       2145 _color_title_2:
      000778 B1                    2146 	.db #0xb1	; 177
      000779 B1                    2147 	.db #0xb1	; 177
      00077A B1                    2148 	.db #0xb1	; 177
      00077B B1                    2149 	.db #0xb1	; 177
      00077C B1                    2150 	.db #0xb1	; 177
      00077D B1                    2151 	.db #0xb1	; 177
      00077E B1                    2152 	.db #0xb1	; 177
      00077F B1                    2153 	.db #0xb1	; 177
      000780                       2154 _color_title_3:
      000780 D1                    2155 	.db #0xd1	; 209
      000781 D1                    2156 	.db #0xd1	; 209
      000782 D1                    2157 	.db #0xd1	; 209
      000783 D1                    2158 	.db #0xd1	; 209
      000784 D1                    2159 	.db #0xd1	; 209
      000785 D1                    2160 	.db #0xd1	; 209
      000786 D1                    2161 	.db #0xd1	; 209
      000787 D1                    2162 	.db #0xd1	; 209
      000788                       2163 _color_title_4:
      000788 F1                    2164 	.db #0xf1	; 241
      000789 F1                    2165 	.db #0xf1	; 241
      00078A F1                    2166 	.db #0xf1	; 241
      00078B F1                    2167 	.db #0xf1	; 241
      00078C F1                    2168 	.db #0xf1	; 241
      00078D F1                    2169 	.db #0xf1	; 241
      00078E F1                    2170 	.db #0xf1	; 241
      00078F F1                    2171 	.db #0xf1	; 241
      000790                       2172 _color_title_5:
      000790 71                    2173 	.db #0x71	; 113	'q'
      000791 71                    2174 	.db #0x71	; 113	'q'
      000792 71                    2175 	.db #0x71	; 113	'q'
      000793 71                    2176 	.db #0x71	; 113	'q'
      000794 71                    2177 	.db #0x71	; 113	'q'
      000795 71                    2178 	.db #0x71	; 113	'q'
      000796 71                    2179 	.db #0x71	; 113	'q'
      000797 71                    2180 	.db #0x71	; 113	'q'
      000798                       2181 _color_title_6:
      000798 51                    2182 	.db #0x51	; 81	'Q'
      000799 51                    2183 	.db #0x51	; 81	'Q'
      00079A 51                    2184 	.db #0x51	; 81	'Q'
      00079B 51                    2185 	.db #0x51	; 81	'Q'
      00079C 51                    2186 	.db #0x51	; 81	'Q'
      00079D 51                    2187 	.db #0x51	; 81	'Q'
      00079E 51                    2188 	.db #0x51	; 81	'Q'
      00079F 51                    2189 	.db #0x51	; 81	'Q'
      0007A0                       2190 _color_title_7:
      0007A0 41                    2191 	.db #0x41	; 65	'A'
      0007A1 41                    2192 	.db #0x41	; 65	'A'
      0007A2 41                    2193 	.db #0x41	; 65	'A'
      0007A3 41                    2194 	.db #0x41	; 65	'A'
      0007A4 41                    2195 	.db #0x41	; 65	'A'
      0007A5 41                    2196 	.db #0x41	; 65	'A'
      0007A6 41                    2197 	.db #0x41	; 65	'A'
      0007A7 41                    2198 	.db #0x41	; 65	'A'
      0007A8                       2199 _sprite_arrow_0:
      0007A8 00                    2200 	.db #0x00	; 0
      0007A9 00                    2201 	.db #0x00	; 0
      0007AA 00                    2202 	.db #0x00	; 0
      0007AB 00                    2203 	.db #0x00	; 0
      0007AC 00                    2204 	.db #0x00	; 0
      0007AD 00                    2205 	.db #0x00	; 0
      0007AE 00                    2206 	.db #0x00	; 0
      0007AF 00                    2207 	.db #0x00	; 0
      0007B0                       2208 _sprite_arrow_1:
      0007B0 FF                    2209 	.db #0xff	; 255
      0007B1 00                    2210 	.db #0x00	; 0
      0007B2 3F                    2211 	.db #0x3f	; 63
      0007B3 00                    2212 	.db #0x00	; 0
      0007B4 0F                    2213 	.db #0x0f	; 15
      0007B5 00                    2214 	.db #0x00	; 0
      0007B6 03                    2215 	.db #0x03	; 3
      0007B7 00                    2216 	.db #0x00	; 0
      0007B8                       2217 _sprite_arrow_2:
      0007B8 00                    2218 	.db #0x00	; 0
      0007B9 00                    2219 	.db #0x00	; 0
      0007BA 00                    2220 	.db #0x00	; 0
      0007BB 00                    2221 	.db #0x00	; 0
      0007BC 00                    2222 	.db #0x00	; 0
      0007BD 00                    2223 	.db #0x00	; 0
      0007BE 00                    2224 	.db #0x00	; 0
      0007BF 00                    2225 	.db #0x00	; 0
      0007C0                       2226 _sprite_arrow_3:
      0007C0 FF                    2227 	.db #0xff	; 255
      0007C1 00                    2228 	.db #0x00	; 0
      0007C2 FC                    2229 	.db #0xfc	; 252
      0007C3 00                    2230 	.db #0x00	; 0
      0007C4 F0                    2231 	.db #0xf0	; 240
      0007C5 00                    2232 	.db #0x00	; 0
      0007C6 C0                    2233 	.db #0xc0	; 192
      0007C7 00                    2234 	.db #0x00	; 0
      0007C8                       2235 _sprite_hit_1:
      0007C8 00                    2236 	.db #0x00	; 0
      0007C9 77                    2237 	.db #0x77	; 119	'w'
      0007CA 22                    2238 	.db #0x22	; 34
      0007CB 22                    2239 	.db #0x22	; 34
      0007CC 22                    2240 	.db #0x22	; 34
      0007CD 3E                    2241 	.db #0x3e	; 62
      0007CE 22                    2242 	.db #0x22	; 34
      0007CF 22                    2243 	.db #0x22	; 34
      0007D0 22                    2244 	.db #0x22	; 34
      0007D1 77                    2245 	.db #0x77	; 119	'w'
      0007D2 00                    2246 	.db #0x00	; 0
      0007D3 00                    2247 	.db #0x00	; 0
      0007D4 00                    2248 	.db #0x00	; 0
      0007D5 00                    2249 	.db #0x00	; 0
      0007D6 00                    2250 	.db #0x00	; 0
      0007D7 00                    2251 	.db #0x00	; 0
      0007D8 00                    2252 	.db #0x00	; 0
      0007D9 77                    2253 	.db #0x77	; 119	'w'
      0007DA 25                    2254 	.db #0x25	; 37
      0007DB 21                    2255 	.db #0x21	; 33
      0007DC 21                    2256 	.db #0x21	; 33
      0007DD 21                    2257 	.db #0x21	; 33
      0007DE 21                    2258 	.db #0x21	; 33
      0007DF 21                    2259 	.db #0x21	; 33
      0007E0 21                    2260 	.db #0x21	; 33
      0007E1 73                    2261 	.db #0x73	; 115	's'
      0007E2 00                    2262 	.db #0x00	; 0
      0007E3 00                    2263 	.db #0x00	; 0
      0007E4 00                    2264 	.db #0x00	; 0
      0007E5 00                    2265 	.db #0x00	; 0
      0007E6 00                    2266 	.db #0x00	; 0
      0007E7 00                    2267 	.db #0x00	; 0
      0007E8                       2268 _sprite_hit_2:
      0007E8 00                    2269 	.db #0x00	; 0
      0007E9 C0                    2270 	.db #0xc0	; 192
      0007EA 40                    2271 	.db #0x40	; 64
      0007EB 00                    2272 	.db #0x00	; 0
      0007EC 00                    2273 	.db #0x00	; 0
      0007ED 00                    2274 	.db #0x00	; 0
      0007EE 00                    2275 	.db #0x00	; 0
      0007EF 00                    2276 	.db #0x00	; 0
      0007F0 00                    2277 	.db #0x00	; 0
      0007F1 80                    2278 	.db #0x80	; 128
      0007F2 00                    2279 	.db #0x00	; 0
      0007F3 00                    2280 	.db #0x00	; 0
      0007F4 00                    2281 	.db #0x00	; 0
      0007F5 00                    2282 	.db #0x00	; 0
      0007F6 00                    2283 	.db #0x00	; 0
      0007F7 00                    2284 	.db #0x00	; 0
      0007F8 00                    2285 	.db #0x00	; 0
      0007F9 00                    2286 	.db #0x00	; 0
      0007FA 00                    2287 	.db #0x00	; 0
      0007FB 00                    2288 	.db #0x00	; 0
      0007FC 00                    2289 	.db #0x00	; 0
      0007FD 00                    2290 	.db #0x00	; 0
      0007FE 00                    2291 	.db #0x00	; 0
      0007FF 00                    2292 	.db #0x00	; 0
      000800 00                    2293 	.db #0x00	; 0
      000801 00                    2294 	.db #0x00	; 0
      000802 00                    2295 	.db #0x00	; 0
      000803 00                    2296 	.db #0x00	; 0
      000804 00                    2297 	.db #0x00	; 0
      000805 00                    2298 	.db #0x00	; 0
      000806 00                    2299 	.db #0x00	; 0
      000807 00                    2300 	.db #0x00	; 0
      000808                       2301 _sprite_combo_1:
      000808 00                    2302 	.db #0x00	; 0
      000809 38                    2303 	.db #0x38	; 56	'8'
      00080A 65                    2304 	.db #0x65	; 101	'e'
      00080B 61                    2305 	.db #0x61	; 97	'a'
      00080C 61                    2306 	.db #0x61	; 97	'a'
      00080D 61                    2307 	.db #0x61	; 97	'a'
      00080E 61                    2308 	.db #0x61	; 97	'a'
      00080F 61                    2309 	.db #0x61	; 97	'a'
      000810 65                    2310 	.db #0x65	; 101	'e'
      000811 38                    2311 	.db #0x38	; 56	'8'
      000812 00                    2312 	.db #0x00	; 0
      000813 00                    2313 	.db #0x00	; 0
      000814 00                    2314 	.db #0x00	; 0
      000815 00                    2315 	.db #0x00	; 0
      000816 00                    2316 	.db #0x00	; 0
      000817 00                    2317 	.db #0x00	; 0
      000818 00                    2318 	.db #0x00	; 0
      000819 E6                    2319 	.db #0xe6	; 230
      00081A 13                    2320 	.db #0x13	; 19
      00081B 12                    2321 	.db #0x12	; 18
      00081C 12                    2322 	.db #0x12	; 18
      00081D 12                    2323 	.db #0x12	; 18
      00081E 12                    2324 	.db #0x12	; 18
      00081F 12                    2325 	.db #0x12	; 18
      000820 12                    2326 	.db #0x12	; 18
      000821 E7                    2327 	.db #0xe7	; 231
      000822 00                    2328 	.db #0x00	; 0
      000823 00                    2329 	.db #0x00	; 0
      000824 00                    2330 	.db #0x00	; 0
      000825 00                    2331 	.db #0x00	; 0
      000826 00                    2332 	.db #0x00	; 0
      000827 00                    2333 	.db #0x00	; 0
      000828                       2334 _sprite_combo_2:
      000828 00                    2335 	.db #0x00	; 0
      000829 37                    2336 	.db #0x37	; 55	'7'
      00082A 62                    2337 	.db #0x62	; 98	'b'
      00082B A2                    2338 	.db #0xa2	; 162
      00082C 22                    2339 	.db #0x22	; 34
      00082D 23                    2340 	.db #0x23	; 35
      00082E 22                    2341 	.db #0x22	; 34
      00082F 22                    2342 	.db #0x22	; 34
      000830 22                    2343 	.db #0x22	; 34
      000831 77                    2344 	.db #0x77	; 119	'w'
      000832 00                    2345 	.db #0x00	; 0
      000833 00                    2346 	.db #0x00	; 0
      000834 00                    2347 	.db #0x00	; 0
      000835 00                    2348 	.db #0x00	; 0
      000836 00                    2349 	.db #0x00	; 0
      000837 00                    2350 	.db #0x00	; 0
      000838 00                    2351 	.db #0x00	; 0
      000839 8E                    2352 	.db #0x8e	; 142
      00083A 51                    2353 	.db #0x51	; 81	'Q'
      00083B 51                    2354 	.db #0x51	; 81	'Q'
      00083C 51                    2355 	.db #0x51	; 81	'Q'
      00083D 91                    2356 	.db #0x91	; 145
      00083E 51                    2357 	.db #0x51	; 81	'Q'
      00083F 51                    2358 	.db #0x51	; 81	'Q'
      000840 51                    2359 	.db #0x51	; 81	'Q'
      000841 8E                    2360 	.db #0x8e	; 142
      000842 00                    2361 	.db #0x00	; 0
      000843 00                    2362 	.db #0x00	; 0
      000844 00                    2363 	.db #0x00	; 0
      000845 00                    2364 	.db #0x00	; 0
      000846 00                    2365 	.db #0x00	; 0
      000847 00                    2366 	.db #0x00	; 0
      000848                       2367 _sprite_2x:
      000848 00                    2368 	.db #0x00	; 0
      000849 3E                    2369 	.db #0x3e	; 62
      00084A 63                    2370 	.db #0x63	; 99	'c'
      00084B 03                    2371 	.db #0x03	; 3
      00084C 03                    2372 	.db #0x03	; 3
      00084D 1E                    2373 	.db #0x1e	; 30
      00084E 30                    2374 	.db #0x30	; 48	'0'
      00084F 60                    2375 	.db #0x60	; 96
      000850 60                    2376 	.db #0x60	; 96
      000851 7F                    2377 	.db #0x7f	; 127
      000852 00                    2378 	.db #0x00	; 0
      000853 00                    2379 	.db #0x00	; 0
      000854 00                    2380 	.db #0x00	; 0
      000855 00                    2381 	.db #0x00	; 0
      000856 00                    2382 	.db #0x00	; 0
      000857 00                    2383 	.db #0x00	; 0
      000858 00                    2384 	.db #0x00	; 0
      000859 00                    2385 	.db #0x00	; 0
      00085A 00                    2386 	.db #0x00	; 0
      00085B 63                    2387 	.db #0x63	; 99	'c'
      00085C 36                    2388 	.db #0x36	; 54	'6'
      00085D 1C                    2389 	.db #0x1c	; 28
      00085E 08                    2390 	.db #0x08	; 8
      00085F 1C                    2391 	.db #0x1c	; 28
      000860 36                    2392 	.db #0x36	; 54	'6'
      000861 63                    2393 	.db #0x63	; 99	'c'
      000862 00                    2394 	.db #0x00	; 0
      000863 00                    2395 	.db #0x00	; 0
      000864 00                    2396 	.db #0x00	; 0
      000865 00                    2397 	.db #0x00	; 0
      000866 00                    2398 	.db #0x00	; 0
      000867 00                    2399 	.db #0x00	; 0
      000868                       2400 _sprite_3x:
      000868 00                    2401 	.db #0x00	; 0
      000869 3E                    2402 	.db #0x3e	; 62
      00086A 63                    2403 	.db #0x63	; 99	'c'
      00086B 03                    2404 	.db #0x03	; 3
      00086C 03                    2405 	.db #0x03	; 3
      00086D 1E                    2406 	.db #0x1e	; 30
      00086E 03                    2407 	.db #0x03	; 3
      00086F 03                    2408 	.db #0x03	; 3
      000870 63                    2409 	.db #0x63	; 99	'c'
      000871 3E                    2410 	.db #0x3e	; 62
      000872 00                    2411 	.db #0x00	; 0
      000873 00                    2412 	.db #0x00	; 0
      000874 00                    2413 	.db #0x00	; 0
      000875 00                    2414 	.db #0x00	; 0
      000876 00                    2415 	.db #0x00	; 0
      000877 00                    2416 	.db #0x00	; 0
      000878 00                    2417 	.db #0x00	; 0
      000879 00                    2418 	.db #0x00	; 0
      00087A 00                    2419 	.db #0x00	; 0
      00087B 63                    2420 	.db #0x63	; 99	'c'
      00087C 36                    2421 	.db #0x36	; 54	'6'
      00087D 1C                    2422 	.db #0x1c	; 28
      00087E 08                    2423 	.db #0x08	; 8
      00087F 1C                    2424 	.db #0x1c	; 28
      000880 36                    2425 	.db #0x36	; 54	'6'
      000881 63                    2426 	.db #0x63	; 99	'c'
      000882 00                    2427 	.db #0x00	; 0
      000883 00                    2428 	.db #0x00	; 0
      000884 00                    2429 	.db #0x00	; 0
      000885 00                    2430 	.db #0x00	; 0
      000886 00                    2431 	.db #0x00	; 0
      000887 00                    2432 	.db #0x00	; 0
      000888                       2433 _sprite_4x:
      000888 00                    2434 	.db #0x00	; 0
      000889 02                    2435 	.db #0x02	; 2
      00088A 06                    2436 	.db #0x06	; 6
      00088B 0E                    2437 	.db #0x0e	; 14
      00088C 16                    2438 	.db #0x16	; 22
      00088D 26                    2439 	.db #0x26	; 38
      00088E 7F                    2440 	.db #0x7f	; 127
      00088F 06                    2441 	.db #0x06	; 6
      000890 06                    2442 	.db #0x06	; 6
      000891 0F                    2443 	.db #0x0f	; 15
      000892 00                    2444 	.db #0x00	; 0
      000893 00                    2445 	.db #0x00	; 0
      000894 00                    2446 	.db #0x00	; 0
      000895 00                    2447 	.db #0x00	; 0
      000896 00                    2448 	.db #0x00	; 0
      000897 00                    2449 	.db #0x00	; 0
      000898 00                    2450 	.db #0x00	; 0
      000899 00                    2451 	.db #0x00	; 0
      00089A 00                    2452 	.db #0x00	; 0
      00089B 63                    2453 	.db #0x63	; 99	'c'
      00089C 36                    2454 	.db #0x36	; 54	'6'
      00089D 1C                    2455 	.db #0x1c	; 28
      00089E 08                    2456 	.db #0x08	; 8
      00089F 1C                    2457 	.db #0x1c	; 28
      0008A0 36                    2458 	.db #0x36	; 54	'6'
      0008A1 63                    2459 	.db #0x63	; 99	'c'
      0008A2 00                    2460 	.db #0x00	; 0
      0008A3 00                    2461 	.db #0x00	; 0
      0008A4 00                    2462 	.db #0x00	; 0
      0008A5 00                    2463 	.db #0x00	; 0
      0008A6 00                    2464 	.db #0x00	; 0
      0008A7 00                    2465 	.db #0x00	; 0
      0008A8                       2466 _sprite_5x:
      0008A8 00                    2467 	.db #0x00	; 0
      0008A9 7E                    2468 	.db #0x7e	; 126
      0008AA 60                    2469 	.db #0x60	; 96
      0008AB 60                    2470 	.db #0x60	; 96
      0008AC 7E                    2471 	.db #0x7e	; 126
      0008AD 03                    2472 	.db #0x03	; 3
      0008AE 03                    2473 	.db #0x03	; 3
      0008AF 03                    2474 	.db #0x03	; 3
      0008B0 63                    2475 	.db #0x63	; 99	'c'
      0008B1 3E                    2476 	.db #0x3e	; 62
      0008B2 00                    2477 	.db #0x00	; 0
      0008B3 00                    2478 	.db #0x00	; 0
      0008B4 00                    2479 	.db #0x00	; 0
      0008B5 00                    2480 	.db #0x00	; 0
      0008B6 00                    2481 	.db #0x00	; 0
      0008B7 00                    2482 	.db #0x00	; 0
      0008B8 00                    2483 	.db #0x00	; 0
      0008B9 00                    2484 	.db #0x00	; 0
      0008BA 00                    2485 	.db #0x00	; 0
      0008BB 63                    2486 	.db #0x63	; 99	'c'
      0008BC 36                    2487 	.db #0x36	; 54	'6'
      0008BD 1C                    2488 	.db #0x1c	; 28
      0008BE 08                    2489 	.db #0x08	; 8
      0008BF 1C                    2490 	.db #0x1c	; 28
      0008C0 36                    2491 	.db #0x36	; 54	'6'
      0008C1 63                    2492 	.db #0x63	; 99	'c'
      0008C2 00                    2493 	.db #0x00	; 0
      0008C3 00                    2494 	.db #0x00	; 0
      0008C4 00                    2495 	.db #0x00	; 0
      0008C5 00                    2496 	.db #0x00	; 0
      0008C6 00                    2497 	.db #0x00	; 0
      0008C7 00                    2498 	.db #0x00	; 0
      0008C8                       2499 _sprite_6x:
      0008C8 00                    2500 	.db #0x00	; 0
      0008C9 3E                    2501 	.db #0x3e	; 62
      0008CA 61                    2502 	.db #0x61	; 97	'a'
      0008CB 60                    2503 	.db #0x60	; 96
      0008CC 7E                    2504 	.db #0x7e	; 126
      0008CD 63                    2505 	.db #0x63	; 99	'c'
      0008CE 63                    2506 	.db #0x63	; 99	'c'
      0008CF 63                    2507 	.db #0x63	; 99	'c'
      0008D0 63                    2508 	.db #0x63	; 99	'c'
      0008D1 3E                    2509 	.db #0x3e	; 62
      0008D2 00                    2510 	.db #0x00	; 0
      0008D3 00                    2511 	.db #0x00	; 0
      0008D4 00                    2512 	.db #0x00	; 0
      0008D5 00                    2513 	.db #0x00	; 0
      0008D6 00                    2514 	.db #0x00	; 0
      0008D7 00                    2515 	.db #0x00	; 0
      0008D8 00                    2516 	.db #0x00	; 0
      0008D9 00                    2517 	.db #0x00	; 0
      0008DA 00                    2518 	.db #0x00	; 0
      0008DB 63                    2519 	.db #0x63	; 99	'c'
      0008DC 36                    2520 	.db #0x36	; 54	'6'
      0008DD 1C                    2521 	.db #0x1c	; 28
      0008DE 08                    2522 	.db #0x08	; 8
      0008DF 1C                    2523 	.db #0x1c	; 28
      0008E0 36                    2524 	.db #0x36	; 54	'6'
      0008E1 63                    2525 	.db #0x63	; 99	'c'
      0008E2 00                    2526 	.db #0x00	; 0
      0008E3 00                    2527 	.db #0x00	; 0
      0008E4 00                    2528 	.db #0x00	; 0
      0008E5 00                    2529 	.db #0x00	; 0
      0008E6 00                    2530 	.db #0x00	; 0
      0008E7 00                    2531 	.db #0x00	; 0
      0008E8                       2532 _sprite_mega_hit:
      0008E8 04                    2533 	.db #0x04	; 4
      0008E9 06                    2534 	.db #0x06	; 6
      0008EA 05                    2535 	.db #0x05	; 5
      0008EB 04                    2536 	.db #0x04	; 4
      0008EC 04                    2537 	.db #0x04	; 4
      0008ED 00                    2538 	.db #0x00	; 0
      0008EE 03                    2539 	.db #0x03	; 3
      0008EF 04                    2540 	.db #0x04	; 4
      0008F0 05                    2541 	.db #0x05	; 5
      0008F1 04                    2542 	.db #0x04	; 4
      0008F2 03                    2543 	.db #0x03	; 3
      0008F3 00                    2544 	.db #0x00	; 0
      0008F4 00                    2545 	.db #0x00	; 0
      0008F5 00                    2546 	.db #0x00	; 0
      0008F6 00                    2547 	.db #0x00	; 0
      0008F7 00                    2548 	.db #0x00	; 0
      0008F8 5C                    2549 	.db #0x5c	; 92
      0008F9 D0                    2550 	.db #0xd0	; 208
      0008FA 5C                    2551 	.db #0x5c	; 92
      0008FB 50                    2552 	.db #0x50	; 80	'P'
      0008FC 5C                    2553 	.db #0x5c	; 92
      0008FD 00                    2554 	.db #0x00	; 0
      0008FE 98                    2555 	.db #0x98	; 152
      0008FF 24                    2556 	.db #0x24	; 36
      000900 A4                    2557 	.db #0xa4	; 164
      000901 BC                    2558 	.db #0xbc	; 188
      000902 A4                    2559 	.db #0xa4	; 164
      000903 00                    2560 	.db #0x00	; 0
      000904 00                    2561 	.db #0x00	; 0
      000905 00                    2562 	.db #0x00	; 0
      000906 00                    2563 	.db #0x00	; 0
      000907 00                    2564 	.db #0x00	; 0
      000908                       2565 _sprite_explosion_0:
      000908 00                    2566 	.db #0x00	; 0
      000909 00                    2567 	.db #0x00	; 0
      00090A 00                    2568 	.db #0x00	; 0
      00090B 00                    2569 	.db #0x00	; 0
      00090C 00                    2570 	.db #0x00	; 0
      00090D 00                    2571 	.db #0x00	; 0
      00090E 01                    2572 	.db #0x01	; 1
      00090F 02                    2573 	.db #0x02	; 2
      000910 01                    2574 	.db #0x01	; 1
      000911 00                    2575 	.db #0x00	; 0
      000912 00                    2576 	.db #0x00	; 0
      000913 00                    2577 	.db #0x00	; 0
      000914 00                    2578 	.db #0x00	; 0
      000915 00                    2579 	.db #0x00	; 0
      000916 00                    2580 	.db #0x00	; 0
      000917 00                    2581 	.db #0x00	; 0
      000918 00                    2582 	.db #0x00	; 0
      000919 00                    2583 	.db #0x00	; 0
      00091A 00                    2584 	.db #0x00	; 0
      00091B 00                    2585 	.db #0x00	; 0
      00091C 00                    2586 	.db #0x00	; 0
      00091D 00                    2587 	.db #0x00	; 0
      00091E 00                    2588 	.db #0x00	; 0
      00091F 80                    2589 	.db #0x80	; 128
      000920 00                    2590 	.db #0x00	; 0
      000921 00                    2591 	.db #0x00	; 0
      000922 00                    2592 	.db #0x00	; 0
      000923 00                    2593 	.db #0x00	; 0
      000924 00                    2594 	.db #0x00	; 0
      000925 00                    2595 	.db #0x00	; 0
      000926 00                    2596 	.db #0x00	; 0
      000927 00                    2597 	.db #0x00	; 0
      000928                       2598 _sprite_explosion_1:
      000928 00                    2599 	.db #0x00	; 0
      000929 00                    2600 	.db #0x00	; 0
      00092A 00                    2601 	.db #0x00	; 0
      00092B 00                    2602 	.db #0x00	; 0
      00092C 00                    2603 	.db #0x00	; 0
      00092D 01                    2604 	.db #0x01	; 1
      00092E 00                    2605 	.db #0x00	; 0
      00092F 04                    2606 	.db #0x04	; 4
      000930 00                    2607 	.db #0x00	; 0
      000931 01                    2608 	.db #0x01	; 1
      000932 00                    2609 	.db #0x00	; 0
      000933 00                    2610 	.db #0x00	; 0
      000934 00                    2611 	.db #0x00	; 0
      000935 00                    2612 	.db #0x00	; 0
      000936 00                    2613 	.db #0x00	; 0
      000937 00                    2614 	.db #0x00	; 0
      000938 00                    2615 	.db #0x00	; 0
      000939 00                    2616 	.db #0x00	; 0
      00093A 00                    2617 	.db #0x00	; 0
      00093B 00                    2618 	.db #0x00	; 0
      00093C 00                    2619 	.db #0x00	; 0
      00093D 00                    2620 	.db #0x00	; 0
      00093E 00                    2621 	.db #0x00	; 0
      00093F 40                    2622 	.db #0x40	; 64
      000940 00                    2623 	.db #0x00	; 0
      000941 00                    2624 	.db #0x00	; 0
      000942 00                    2625 	.db #0x00	; 0
      000943 00                    2626 	.db #0x00	; 0
      000944 00                    2627 	.db #0x00	; 0
      000945 00                    2628 	.db #0x00	; 0
      000946 00                    2629 	.db #0x00	; 0
      000947 00                    2630 	.db #0x00	; 0
      000948                       2631 _sprite_explosion_2:
      000948 00                    2632 	.db #0x00	; 0
      000949 00                    2633 	.db #0x00	; 0
      00094A 00                    2634 	.db #0x00	; 0
      00094B 00                    2635 	.db #0x00	; 0
      00094C 01                    2636 	.db #0x01	; 1
      00094D 04                    2637 	.db #0x04	; 4
      00094E 00                    2638 	.db #0x00	; 0
      00094F 08                    2639 	.db #0x08	; 8
      000950 00                    2640 	.db #0x00	; 0
      000951 04                    2641 	.db #0x04	; 4
      000952 01                    2642 	.db #0x01	; 1
      000953 00                    2643 	.db #0x00	; 0
      000954 00                    2644 	.db #0x00	; 0
      000955 00                    2645 	.db #0x00	; 0
      000956 00                    2646 	.db #0x00	; 0
      000957 00                    2647 	.db #0x00	; 0
      000958 00                    2648 	.db #0x00	; 0
      000959 00                    2649 	.db #0x00	; 0
      00095A 00                    2650 	.db #0x00	; 0
      00095B 00                    2651 	.db #0x00	; 0
      00095C 00                    2652 	.db #0x00	; 0
      00095D 40                    2653 	.db #0x40	; 64
      00095E 00                    2654 	.db #0x00	; 0
      00095F 20                    2655 	.db #0x20	; 32
      000960 00                    2656 	.db #0x00	; 0
      000961 40                    2657 	.db #0x40	; 64
      000962 00                    2658 	.db #0x00	; 0
      000963 00                    2659 	.db #0x00	; 0
      000964 00                    2660 	.db #0x00	; 0
      000965 00                    2661 	.db #0x00	; 0
      000966 00                    2662 	.db #0x00	; 0
      000967 00                    2663 	.db #0x00	; 0
      000968                       2664 _sprite_explosion_3:
      000968 00                    2665 	.db #0x00	; 0
      000969 00                    2666 	.db #0x00	; 0
      00096A 00                    2667 	.db #0x00	; 0
      00096B 01                    2668 	.db #0x01	; 1
      00096C 08                    2669 	.db #0x08	; 8
      00096D 00                    2670 	.db #0x00	; 0
      00096E 00                    2671 	.db #0x00	; 0
      00096F 10                    2672 	.db #0x10	; 16
      000970 00                    2673 	.db #0x00	; 0
      000971 00                    2674 	.db #0x00	; 0
      000972 08                    2675 	.db #0x08	; 8
      000973 01                    2676 	.db #0x01	; 1
      000974 00                    2677 	.db #0x00	; 0
      000975 00                    2678 	.db #0x00	; 0
      000976 00                    2679 	.db #0x00	; 0
      000977 00                    2680 	.db #0x00	; 0
      000978 00                    2681 	.db #0x00	; 0
      000979 00                    2682 	.db #0x00	; 0
      00097A 00                    2683 	.db #0x00	; 0
      00097B 00                    2684 	.db #0x00	; 0
      00097C 20                    2685 	.db #0x20	; 32
      00097D 00                    2686 	.db #0x00	; 0
      00097E 00                    2687 	.db #0x00	; 0
      00097F 10                    2688 	.db #0x10	; 16
      000980 00                    2689 	.db #0x00	; 0
      000981 00                    2690 	.db #0x00	; 0
      000982 20                    2691 	.db #0x20	; 32
      000983 00                    2692 	.db #0x00	; 0
      000984 00                    2693 	.db #0x00	; 0
      000985 00                    2694 	.db #0x00	; 0
      000986 00                    2695 	.db #0x00	; 0
      000987 00                    2696 	.db #0x00	; 0
      000988                       2697 _sprite_explosion_4:
      000988 00                    2698 	.db #0x00	; 0
      000989 00                    2699 	.db #0x00	; 0
      00098A 01                    2700 	.db #0x01	; 1
      00098B 10                    2701 	.db #0x10	; 16
      00098C 00                    2702 	.db #0x00	; 0
      00098D 00                    2703 	.db #0x00	; 0
      00098E 00                    2704 	.db #0x00	; 0
      00098F 20                    2705 	.db #0x20	; 32
      000990 00                    2706 	.db #0x00	; 0
      000991 00                    2707 	.db #0x00	; 0
      000992 00                    2708 	.db #0x00	; 0
      000993 10                    2709 	.db #0x10	; 16
      000994 01                    2710 	.db #0x01	; 1
      000995 00                    2711 	.db #0x00	; 0
      000996 00                    2712 	.db #0x00	; 0
      000997 00                    2713 	.db #0x00	; 0
      000998 00                    2714 	.db #0x00	; 0
      000999 00                    2715 	.db #0x00	; 0
      00099A 00                    2716 	.db #0x00	; 0
      00099B 10                    2717 	.db #0x10	; 16
      00099C 00                    2718 	.db #0x00	; 0
      00099D 00                    2719 	.db #0x00	; 0
      00099E 00                    2720 	.db #0x00	; 0
      00099F 08                    2721 	.db #0x08	; 8
      0009A0 00                    2722 	.db #0x00	; 0
      0009A1 00                    2723 	.db #0x00	; 0
      0009A2 00                    2724 	.db #0x00	; 0
      0009A3 10                    2725 	.db #0x10	; 16
      0009A4 00                    2726 	.db #0x00	; 0
      0009A5 00                    2727 	.db #0x00	; 0
      0009A6 00                    2728 	.db #0x00	; 0
      0009A7 00                    2729 	.db #0x00	; 0
      0009A8                       2730 _sprite_explosion_5:
      0009A8 01                    2731 	.db #0x01	; 1
      0009A9 00                    2732 	.db #0x00	; 0
      0009AA 20                    2733 	.db #0x20	; 32
      0009AB 00                    2734 	.db #0x00	; 0
      0009AC 00                    2735 	.db #0x00	; 0
      0009AD 00                    2736 	.db #0x00	; 0
      0009AE 00                    2737 	.db #0x00	; 0
      0009AF 80                    2738 	.db #0x80	; 128
      0009B0 00                    2739 	.db #0x00	; 0
      0009B1 00                    2740 	.db #0x00	; 0
      0009B2 00                    2741 	.db #0x00	; 0
      0009B3 00                    2742 	.db #0x00	; 0
      0009B4 20                    2743 	.db #0x20	; 32
      0009B5 00                    2744 	.db #0x00	; 0
      0009B6 01                    2745 	.db #0x01	; 1
      0009B7 00                    2746 	.db #0x00	; 0
      0009B8 00                    2747 	.db #0x00	; 0
      0009B9 00                    2748 	.db #0x00	; 0
      0009BA 08                    2749 	.db #0x08	; 8
      0009BB 00                    2750 	.db #0x00	; 0
      0009BC 00                    2751 	.db #0x00	; 0
      0009BD 00                    2752 	.db #0x00	; 0
      0009BE 00                    2753 	.db #0x00	; 0
      0009BF 02                    2754 	.db #0x02	; 2
      0009C0 00                    2755 	.db #0x00	; 0
      0009C1 00                    2756 	.db #0x00	; 0
      0009C2 00                    2757 	.db #0x00	; 0
      0009C3 00                    2758 	.db #0x00	; 0
      0009C4 08                    2759 	.db #0x08	; 8
      0009C5 00                    2760 	.db #0x00	; 0
      0009C6 00                    2761 	.db #0x00	; 0
      0009C7 00                    2762 	.db #0x00	; 0
      0009C8                       2763 _sprite_explosion_6:
      0009C8 00                    2764 	.db #0x00	; 0
      0009C9 01                    2765 	.db #0x01	; 1
      0009CA 00                    2766 	.db #0x00	; 0
      0009CB 20                    2767 	.db #0x20	; 32
      0009CC 00                    2768 	.db #0x00	; 0
      0009CD 00                    2769 	.db #0x00	; 0
      0009CE 00                    2770 	.db #0x00	; 0
      0009CF 00                    2771 	.db #0x00	; 0
      0009D0 80                    2772 	.db #0x80	; 128
      0009D1 00                    2773 	.db #0x00	; 0
      0009D2 00                    2774 	.db #0x00	; 0
      0009D3 00                    2775 	.db #0x00	; 0
      0009D4 00                    2776 	.db #0x00	; 0
      0009D5 20                    2777 	.db #0x20	; 32
      0009D6 00                    2778 	.db #0x00	; 0
      0009D7 01                    2779 	.db #0x01	; 1
      0009D8 00                    2780 	.db #0x00	; 0
      0009D9 00                    2781 	.db #0x00	; 0
      0009DA 00                    2782 	.db #0x00	; 0
      0009DB 08                    2783 	.db #0x08	; 8
      0009DC 00                    2784 	.db #0x00	; 0
      0009DD 00                    2785 	.db #0x00	; 0
      0009DE 00                    2786 	.db #0x00	; 0
      0009DF 00                    2787 	.db #0x00	; 0
      0009E0 02                    2788 	.db #0x02	; 2
      0009E1 00                    2789 	.db #0x00	; 0
      0009E2 00                    2790 	.db #0x00	; 0
      0009E3 00                    2791 	.db #0x00	; 0
      0009E4 00                    2792 	.db #0x00	; 0
      0009E5 08                    2793 	.db #0x08	; 8
      0009E6 00                    2794 	.db #0x00	; 0
      0009E7 00                    2795 	.db #0x00	; 0
      0009E8                       2796 _sprite_explosion_7:
      0009E8 00                    2797 	.db #0x00	; 0
      0009E9 00                    2798 	.db #0x00	; 0
      0009EA 01                    2799 	.db #0x01	; 1
      0009EB 00                    2800 	.db #0x00	; 0
      0009EC 20                    2801 	.db #0x20	; 32
      0009ED 00                    2802 	.db #0x00	; 0
      0009EE 00                    2803 	.db #0x00	; 0
      0009EF 00                    2804 	.db #0x00	; 0
      0009F0 00                    2805 	.db #0x00	; 0
      0009F1 80                    2806 	.db #0x80	; 128
      0009F2 00                    2807 	.db #0x00	; 0
      0009F3 00                    2808 	.db #0x00	; 0
      0009F4 00                    2809 	.db #0x00	; 0
      0009F5 00                    2810 	.db #0x00	; 0
      0009F6 20                    2811 	.db #0x20	; 32
      0009F7 00                    2812 	.db #0x00	; 0
      0009F8 00                    2813 	.db #0x00	; 0
      0009F9 00                    2814 	.db #0x00	; 0
      0009FA 00                    2815 	.db #0x00	; 0
      0009FB 00                    2816 	.db #0x00	; 0
      0009FC 08                    2817 	.db #0x08	; 8
      0009FD 00                    2818 	.db #0x00	; 0
      0009FE 00                    2819 	.db #0x00	; 0
      0009FF 00                    2820 	.db #0x00	; 0
      000A00 00                    2821 	.db #0x00	; 0
      000A01 02                    2822 	.db #0x02	; 2
      000A02 00                    2823 	.db #0x00	; 0
      000A03 00                    2824 	.db #0x00	; 0
      000A04 00                    2825 	.db #0x00	; 0
      000A05 00                    2826 	.db #0x00	; 0
      000A06 08                    2827 	.db #0x08	; 8
      000A07 00                    2828 	.db #0x00	; 0
      000A08                       2829 _sprite_block_small_0:
      000A08 5A                    2830 	.db #0x5a	; 90	'Z'
      000A09 24                    2831 	.db #0x24	; 36
      000A0A 80                    2832 	.db #0x80	; 128
      000A0B 10                    2833 	.db #0x10	; 16
      000A0C 80                    2834 	.db #0x80	; 128
      000A0D 20                    2835 	.db #0x20	; 32
      000A0E 00                    2836 	.db #0x00	; 0
      000A0F 00                    2837 	.db #0x00	; 0
      000A10 00                    2838 	.db #0x00	; 0
      000A11 00                    2839 	.db #0x00	; 0
      000A12 00                    2840 	.db #0x00	; 0
      000A13 00                    2841 	.db #0x00	; 0
      000A14 00                    2842 	.db #0x00	; 0
      000A15 00                    2843 	.db #0x00	; 0
      000A16 00                    2844 	.db #0x00	; 0
      000A17 00                    2845 	.db #0x00	; 0
      000A18 00                    2846 	.db #0x00	; 0
      000A19 00                    2847 	.db #0x00	; 0
      000A1A 00                    2848 	.db #0x00	; 0
      000A1B 00                    2849 	.db #0x00	; 0
      000A1C 00                    2850 	.db #0x00	; 0
      000A1D 00                    2851 	.db #0x00	; 0
      000A1E 00                    2852 	.db #0x00	; 0
      000A1F 00                    2853 	.db #0x00	; 0
      000A20 00                    2854 	.db #0x00	; 0
      000A21 00                    2855 	.db #0x00	; 0
      000A22 00                    2856 	.db #0x00	; 0
      000A23 00                    2857 	.db #0x00	; 0
      000A24 00                    2858 	.db #0x00	; 0
      000A25 00                    2859 	.db #0x00	; 0
      000A26 00                    2860 	.db #0x00	; 0
      000A27 00                    2861 	.db #0x00	; 0
      000A28                       2862 _sprite_block_small_1:
      000A28 FF                    2863 	.db #0xff	; 255
      000A29 FF                    2864 	.db #0xff	; 255
      000A2A FF                    2865 	.db #0xff	; 255
      000A2B FF                    2866 	.db #0xff	; 255
      000A2C FF                    2867 	.db #0xff	; 255
      000A2D FF                    2868 	.db #0xff	; 255
      000A2E FF                    2869 	.db #0xff	; 255
      000A2F 7E                    2870 	.db #0x7e	; 126
      000A30 00                    2871 	.db #0x00	; 0
      000A31 00                    2872 	.db #0x00	; 0
      000A32 00                    2873 	.db #0x00	; 0
      000A33 00                    2874 	.db #0x00	; 0
      000A34 00                    2875 	.db #0x00	; 0
      000A35 00                    2876 	.db #0x00	; 0
      000A36 00                    2877 	.db #0x00	; 0
      000A37 00                    2878 	.db #0x00	; 0
      000A38 00                    2879 	.db #0x00	; 0
      000A39 00                    2880 	.db #0x00	; 0
      000A3A 00                    2881 	.db #0x00	; 0
      000A3B 00                    2882 	.db #0x00	; 0
      000A3C 00                    2883 	.db #0x00	; 0
      000A3D 00                    2884 	.db #0x00	; 0
      000A3E 00                    2885 	.db #0x00	; 0
      000A3F 00                    2886 	.db #0x00	; 0
      000A40 00                    2887 	.db #0x00	; 0
      000A41 00                    2888 	.db #0x00	; 0
      000A42 00                    2889 	.db #0x00	; 0
      000A43 00                    2890 	.db #0x00	; 0
      000A44 00                    2891 	.db #0x00	; 0
      000A45 00                    2892 	.db #0x00	; 0
      000A46 00                    2893 	.db #0x00	; 0
      000A47 00                    2894 	.db #0x00	; 0
      000A48                       2895 _sprite_number_3_32x32:
      000A48 00                    2896 	.db #0x00	; 0
      000A49 01                    2897 	.db #0x01	; 1
      000A4A 02                    2898 	.db #0x02	; 2
      000A4B 04                    2899 	.db #0x04	; 4
      000A4C 08                    2900 	.db #0x08	; 8
      000A4D 08                    2901 	.db #0x08	; 8
      000A4E 08                    2902 	.db #0x08	; 8
      000A4F 08                    2903 	.db #0x08	; 8
      000A50 0F                    2904 	.db #0x0f	; 15
      000A51 00                    2905 	.db #0x00	; 0
      000A52 00                    2906 	.db #0x00	; 0
      000A53 00                    2907 	.db #0x00	; 0
      000A54 00                    2908 	.db #0x00	; 0
      000A55 00                    2909 	.db #0x00	; 0
      000A56 00                    2910 	.db #0x00	; 0
      000A57 00                    2911 	.db #0x00	; 0
      000A58 FF                    2912 	.db #0xff	; 255
      000A59 00                    2913 	.db #0x00	; 0
      000A5A 00                    2914 	.db #0x00	; 0
      000A5B 00                    2915 	.db #0x00	; 0
      000A5C 00                    2916 	.db #0x00	; 0
      000A5D 00                    2917 	.db #0x00	; 0
      000A5E 1F                    2918 	.db #0x1f	; 31
      000A5F 20                    2919 	.db #0x20	; 32
      000A60 C0                    2920 	.db #0xc0	; 192
      000A61 00                    2921 	.db #0x00	; 0
      000A62 00                    2922 	.db #0x00	; 0
      000A63 00                    2923 	.db #0x00	; 0
      000A64 00                    2924 	.db #0x00	; 0
      000A65 3F                    2925 	.db #0x3f	; 63
      000A66 20                    2926 	.db #0x20	; 32
      000A67 20                    2927 	.db #0x20	; 32
      000A68 FF                    2928 	.db #0xff	; 255
      000A69 00                    2929 	.db #0x00	; 0
      000A6A 00                    2930 	.db #0x00	; 0
      000A6B 00                    2931 	.db #0x00	; 0
      000A6C 00                    2932 	.db #0x00	; 0
      000A6D 00                    2933 	.db #0x00	; 0
      000A6E F0                    2934 	.db #0xf0	; 240
      000A6F 08                    2935 	.db #0x08	; 8
      000A70 04                    2936 	.db #0x04	; 4
      000A71 04                    2937 	.db #0x04	; 4
      000A72 04                    2938 	.db #0x04	; 4
      000A73 04                    2939 	.db #0x04	; 4
      000A74 08                    2940 	.db #0x08	; 8
      000A75 F0                    2941 	.db #0xf0	; 240
      000A76 00                    2942 	.db #0x00	; 0
      000A77 00                    2943 	.db #0x00	; 0
      000A78 00                    2944 	.db #0x00	; 0
      000A79 80                    2945 	.db #0x80	; 128
      000A7A 40                    2946 	.db #0x40	; 64
      000A7B 20                    2947 	.db #0x20	; 32
      000A7C 10                    2948 	.db #0x10	; 16
      000A7D 10                    2949 	.db #0x10	; 16
      000A7E 10                    2950 	.db #0x10	; 16
      000A7F 10                    2951 	.db #0x10	; 16
      000A80 10                    2952 	.db #0x10	; 16
      000A81 10                    2953 	.db #0x10	; 16
      000A82 10                    2954 	.db #0x10	; 16
      000A83 10                    2955 	.db #0x10	; 16
      000A84 10                    2956 	.db #0x10	; 16
      000A85 20                    2957 	.db #0x20	; 32
      000A86 40                    2958 	.db #0x40	; 64
      000A87 80                    2959 	.db #0x80	; 128
      000A88 00                    2960 	.db #0x00	; 0
      000A89 00                    2961 	.db #0x00	; 0
      000A8A 00                    2962 	.db #0x00	; 0
      000A8B 00                    2963 	.db #0x00	; 0
      000A8C 00                    2964 	.db #0x00	; 0
      000A8D 00                    2965 	.db #0x00	; 0
      000A8E 00                    2966 	.db #0x00	; 0
      000A8F 0F                    2967 	.db #0x0f	; 15
      000A90 08                    2968 	.db #0x08	; 8
      000A91 08                    2969 	.db #0x08	; 8
      000A92 08                    2970 	.db #0x08	; 8
      000A93 08                    2971 	.db #0x08	; 8
      000A94 04                    2972 	.db #0x04	; 4
      000A95 02                    2973 	.db #0x02	; 2
      000A96 01                    2974 	.db #0x01	; 1
      000A97 00                    2975 	.db #0x00	; 0
      000A98 20                    2976 	.db #0x20	; 32
      000A99 20                    2977 	.db #0x20	; 32
      000A9A 3F                    2978 	.db #0x3f	; 63
      000A9B 00                    2979 	.db #0x00	; 0
      000A9C 00                    2980 	.db #0x00	; 0
      000A9D 00                    2981 	.db #0x00	; 0
      000A9E 00                    2982 	.db #0x00	; 0
      000A9F C0                    2983 	.db #0xc0	; 192
      000AA0 20                    2984 	.db #0x20	; 32
      000AA1 1F                    2985 	.db #0x1f	; 31
      000AA2 00                    2986 	.db #0x00	; 0
      000AA3 00                    2987 	.db #0x00	; 0
      000AA4 00                    2988 	.db #0x00	; 0
      000AA5 00                    2989 	.db #0x00	; 0
      000AA6 00                    2990 	.db #0x00	; 0
      000AA7 FF                    2991 	.db #0xff	; 255
      000AA8 00                    2992 	.db #0x00	; 0
      000AA9 00                    2993 	.db #0x00	; 0
      000AAA F0                    2994 	.db #0xf0	; 240
      000AAB 08                    2995 	.db #0x08	; 8
      000AAC 04                    2996 	.db #0x04	; 4
      000AAD 04                    2997 	.db #0x04	; 4
      000AAE 04                    2998 	.db #0x04	; 4
      000AAF 04                    2999 	.db #0x04	; 4
      000AB0 08                    3000 	.db #0x08	; 8
      000AB1 F0                    3001 	.db #0xf0	; 240
      000AB2 00                    3002 	.db #0x00	; 0
      000AB3 00                    3003 	.db #0x00	; 0
      000AB4 00                    3004 	.db #0x00	; 0
      000AB5 00                    3005 	.db #0x00	; 0
      000AB6 00                    3006 	.db #0x00	; 0
      000AB7 FF                    3007 	.db #0xff	; 255
      000AB8 80                    3008 	.db #0x80	; 128
      000AB9 40                    3009 	.db #0x40	; 64
      000ABA 20                    3010 	.db #0x20	; 32
      000ABB 10                    3011 	.db #0x10	; 16
      000ABC 10                    3012 	.db #0x10	; 16
      000ABD 10                    3013 	.db #0x10	; 16
      000ABE 10                    3014 	.db #0x10	; 16
      000ABF 10                    3015 	.db #0x10	; 16
      000AC0 10                    3016 	.db #0x10	; 16
      000AC1 10                    3017 	.db #0x10	; 16
      000AC2 10                    3018 	.db #0x10	; 16
      000AC3 10                    3019 	.db #0x10	; 16
      000AC4 20                    3020 	.db #0x20	; 32
      000AC5 40                    3021 	.db #0x40	; 64
      000AC6 80                    3022 	.db #0x80	; 128
      000AC7 00                    3023 	.db #0x00	; 0
      000AC8                       3024 _sprite_number_2_32x32:
      000AC8 00                    3025 	.db #0x00	; 0
      000AC9 01                    3026 	.db #0x01	; 1
      000ACA 02                    3027 	.db #0x02	; 2
      000ACB 04                    3028 	.db #0x04	; 4
      000ACC 08                    3029 	.db #0x08	; 8
      000ACD 08                    3030 	.db #0x08	; 8
      000ACE 08                    3031 	.db #0x08	; 8
      000ACF 08                    3032 	.db #0x08	; 8
      000AD0 0F                    3033 	.db #0x0f	; 15
      000AD1 00                    3034 	.db #0x00	; 0
      000AD2 00                    3035 	.db #0x00	; 0
      000AD3 00                    3036 	.db #0x00	; 0
      000AD4 00                    3037 	.db #0x00	; 0
      000AD5 00                    3038 	.db #0x00	; 0
      000AD6 00                    3039 	.db #0x00	; 0
      000AD7 00                    3040 	.db #0x00	; 0
      000AD8 FF                    3041 	.db #0xff	; 255
      000AD9 00                    3042 	.db #0x00	; 0
      000ADA 00                    3043 	.db #0x00	; 0
      000ADB 00                    3044 	.db #0x00	; 0
      000ADC 00                    3045 	.db #0x00	; 0
      000ADD 00                    3046 	.db #0x00	; 0
      000ADE 1F                    3047 	.db #0x1f	; 31
      000ADF 20                    3048 	.db #0x20	; 32
      000AE0 C0                    3049 	.db #0xc0	; 192
      000AE1 00                    3050 	.db #0x00	; 0
      000AE2 00                    3051 	.db #0x00	; 0
      000AE3 00                    3052 	.db #0x00	; 0
      000AE4 00                    3053 	.db #0x00	; 0
      000AE5 3F                    3054 	.db #0x3f	; 63
      000AE6 40                    3055 	.db #0x40	; 64
      000AE7 80                    3056 	.db #0x80	; 128
      000AE8 FF                    3057 	.db #0xff	; 255
      000AE9 00                    3058 	.db #0x00	; 0
      000AEA 00                    3059 	.db #0x00	; 0
      000AEB 00                    3060 	.db #0x00	; 0
      000AEC 00                    3061 	.db #0x00	; 0
      000AED 00                    3062 	.db #0x00	; 0
      000AEE F0                    3063 	.db #0xf0	; 240
      000AEF 08                    3064 	.db #0x08	; 8
      000AF0 04                    3065 	.db #0x04	; 4
      000AF1 04                    3066 	.db #0x04	; 4
      000AF2 04                    3067 	.db #0x04	; 4
      000AF3 04                    3068 	.db #0x04	; 4
      000AF4 08                    3069 	.db #0x08	; 8
      000AF5 F0                    3070 	.db #0xf0	; 240
      000AF6 00                    3071 	.db #0x00	; 0
      000AF7 00                    3072 	.db #0x00	; 0
      000AF8 00                    3073 	.db #0x00	; 0
      000AF9 80                    3074 	.db #0x80	; 128
      000AFA 40                    3075 	.db #0x40	; 64
      000AFB 20                    3076 	.db #0x20	; 32
      000AFC 10                    3077 	.db #0x10	; 16
      000AFD 10                    3078 	.db #0x10	; 16
      000AFE 10                    3079 	.db #0x10	; 16
      000AFF 10                    3080 	.db #0x10	; 16
      000B00 10                    3081 	.db #0x10	; 16
      000B01 10                    3082 	.db #0x10	; 16
      000B02 10                    3083 	.db #0x10	; 16
      000B03 10                    3084 	.db #0x10	; 16
      000B04 10                    3085 	.db #0x10	; 16
      000B05 10                    3086 	.db #0x10	; 16
      000B06 20                    3087 	.db #0x20	; 32
      000B07 40                    3088 	.db #0x40	; 64
      000B08 01                    3089 	.db #0x01	; 1
      000B09 02                    3090 	.db #0x02	; 2
      000B0A 04                    3091 	.db #0x04	; 4
      000B0B 08                    3092 	.db #0x08	; 8
      000B0C 08                    3093 	.db #0x08	; 8
      000B0D 08                    3094 	.db #0x08	; 8
      000B0E 08                    3095 	.db #0x08	; 8
      000B0F 08                    3096 	.db #0x08	; 8
      000B10 08                    3097 	.db #0x08	; 8
      000B11 08                    3098 	.db #0x08	; 8
      000B12 08                    3099 	.db #0x08	; 8
      000B13 08                    3100 	.db #0x08	; 8
      000B14 08                    3101 	.db #0x08	; 8
      000B15 08                    3102 	.db #0x08	; 8
      000B16 08                    3103 	.db #0x08	; 8
      000B17 0F                    3104 	.db #0x0f	; 15
      000B18 00                    3105 	.db #0x00	; 0
      000B19 00                    3106 	.db #0x00	; 0
      000B1A 07                    3107 	.db #0x07	; 7
      000B1B 08                    3108 	.db #0x08	; 8
      000B1C 10                    3109 	.db #0x10	; 16
      000B1D 20                    3110 	.db #0x20	; 32
      000B1E 20                    3111 	.db #0x20	; 32
      000B1F 20                    3112 	.db #0x20	; 32
      000B20 20                    3113 	.db #0x20	; 32
      000B21 3F                    3114 	.db #0x3f	; 63
      000B22 00                    3115 	.db #0x00	; 0
      000B23 00                    3116 	.db #0x00	; 0
      000B24 00                    3117 	.db #0x00	; 0
      000B25 00                    3118 	.db #0x00	; 0
      000B26 00                    3119 	.db #0x00	; 0
      000B27 FF                    3120 	.db #0xff	; 255
      000B28 00                    3121 	.db #0x00	; 0
      000B29 01                    3122 	.db #0x01	; 1
      000B2A FE                    3123 	.db #0xfe	; 254
      000B2B 00                    3124 	.db #0x00	; 0
      000B2C 00                    3125 	.db #0x00	; 0
      000B2D 00                    3126 	.db #0x00	; 0
      000B2E 00                    3127 	.db #0x00	; 0
      000B2F 07                    3128 	.db #0x07	; 7
      000B30 08                    3129 	.db #0x08	; 8
      000B31 F0                    3130 	.db #0xf0	; 240
      000B32 00                    3131 	.db #0x00	; 0
      000B33 00                    3132 	.db #0x00	; 0
      000B34 00                    3133 	.db #0x00	; 0
      000B35 00                    3134 	.db #0x00	; 0
      000B36 00                    3135 	.db #0x00	; 0
      000B37 FF                    3136 	.db #0xff	; 255
      000B38 80                    3137 	.db #0x80	; 128
      000B39 00                    3138 	.db #0x00	; 0
      000B3A 00                    3139 	.db #0x00	; 0
      000B3B 00                    3140 	.db #0x00	; 0
      000B3C 00                    3141 	.db #0x00	; 0
      000B3D 00                    3142 	.db #0x00	; 0
      000B3E 00                    3143 	.db #0x00	; 0
      000B3F F0                    3144 	.db #0xf0	; 240
      000B40 10                    3145 	.db #0x10	; 16
      000B41 10                    3146 	.db #0x10	; 16
      000B42 10                    3147 	.db #0x10	; 16
      000B43 10                    3148 	.db #0x10	; 16
      000B44 10                    3149 	.db #0x10	; 16
      000B45 10                    3150 	.db #0x10	; 16
      000B46 10                    3151 	.db #0x10	; 16
      000B47 F0                    3152 	.db #0xf0	; 240
      000B48                       3153 _sprite_number_1_32x32:
      000B48 00                    3154 	.db #0x00	; 0
      000B49 00                    3155 	.db #0x00	; 0
      000B4A 00                    3156 	.db #0x00	; 0
      000B4B 00                    3157 	.db #0x00	; 0
      000B4C 00                    3158 	.db #0x00	; 0
      000B4D 00                    3159 	.db #0x00	; 0
      000B4E 01                    3160 	.db #0x01	; 1
      000B4F 01                    3161 	.db #0x01	; 1
      000B50 01                    3162 	.db #0x01	; 1
      000B51 01                    3163 	.db #0x01	; 1
      000B52 00                    3164 	.db #0x00	; 0
      000B53 00                    3165 	.db #0x00	; 0
      000B54 00                    3166 	.db #0x00	; 0
      000B55 00                    3167 	.db #0x00	; 0
      000B56 00                    3168 	.db #0x00	; 0
      000B57 00                    3169 	.db #0x00	; 0
      000B58 07                    3170 	.db #0x07	; 7
      000B59 08                    3171 	.db #0x08	; 8
      000B5A 10                    3172 	.db #0x10	; 16
      000B5B 20                    3173 	.db #0x20	; 32
      000B5C 40                    3174 	.db #0x40	; 64
      000B5D 80                    3175 	.db #0x80	; 128
      000B5E 00                    3176 	.db #0x00	; 0
      000B5F 00                    3177 	.db #0x00	; 0
      000B60 00                    3178 	.db #0x00	; 0
      000B61 F8                    3179 	.db #0xf8	; 248
      000B62 08                    3180 	.db #0x08	; 8
      000B63 08                    3181 	.db #0x08	; 8
      000B64 08                    3182 	.db #0x08	; 8
      000B65 08                    3183 	.db #0x08	; 8
      000B66 08                    3184 	.db #0x08	; 8
      000B67 08                    3185 	.db #0x08	; 8
      000B68 F0                    3186 	.db #0xf0	; 240
      000B69 10                    3187 	.db #0x10	; 16
      000B6A 10                    3188 	.db #0x10	; 16
      000B6B 10                    3189 	.db #0x10	; 16
      000B6C 10                    3190 	.db #0x10	; 16
      000B6D 10                    3191 	.db #0x10	; 16
      000B6E 10                    3192 	.db #0x10	; 16
      000B6F 10                    3193 	.db #0x10	; 16
      000B70 10                    3194 	.db #0x10	; 16
      000B71 10                    3195 	.db #0x10	; 16
      000B72 10                    3196 	.db #0x10	; 16
      000B73 10                    3197 	.db #0x10	; 16
      000B74 10                    3198 	.db #0x10	; 16
      000B75 10                    3199 	.db #0x10	; 16
      000B76 10                    3200 	.db #0x10	; 16
      000B77 10                    3201 	.db #0x10	; 16
      000B78 00                    3202 	.db #0x00	; 0
      000B79 00                    3203 	.db #0x00	; 0
      000B7A 00                    3204 	.db #0x00	; 0
      000B7B 00                    3205 	.db #0x00	; 0
      000B7C 00                    3206 	.db #0x00	; 0
      000B7D 00                    3207 	.db #0x00	; 0
      000B7E 00                    3208 	.db #0x00	; 0
      000B7F 00                    3209 	.db #0x00	; 0
      000B80 00                    3210 	.db #0x00	; 0
      000B81 00                    3211 	.db #0x00	; 0
      000B82 00                    3212 	.db #0x00	; 0
      000B83 00                    3213 	.db #0x00	; 0
      000B84 00                    3214 	.db #0x00	; 0
      000B85 00                    3215 	.db #0x00	; 0
      000B86 00                    3216 	.db #0x00	; 0
      000B87 00                    3217 	.db #0x00	; 0
      000B88 00                    3218 	.db #0x00	; 0
      000B89 00                    3219 	.db #0x00	; 0
      000B8A 00                    3220 	.db #0x00	; 0
      000B8B 00                    3221 	.db #0x00	; 0
      000B8C 00                    3222 	.db #0x00	; 0
      000B8D 00                    3223 	.db #0x00	; 0
      000B8E 00                    3224 	.db #0x00	; 0
      000B8F 00                    3225 	.db #0x00	; 0
      000B90 00                    3226 	.db #0x00	; 0
      000B91 00                    3227 	.db #0x00	; 0
      000B92 00                    3228 	.db #0x00	; 0
      000B93 00                    3229 	.db #0x00	; 0
      000B94 00                    3230 	.db #0x00	; 0
      000B95 00                    3231 	.db #0x00	; 0
      000B96 00                    3232 	.db #0x00	; 0
      000B97 00                    3233 	.db #0x00	; 0
      000B98 08                    3234 	.db #0x08	; 8
      000B99 08                    3235 	.db #0x08	; 8
      000B9A 08                    3236 	.db #0x08	; 8
      000B9B 08                    3237 	.db #0x08	; 8
      000B9C 08                    3238 	.db #0x08	; 8
      000B9D 08                    3239 	.db #0x08	; 8
      000B9E 08                    3240 	.db #0x08	; 8
      000B9F 08                    3241 	.db #0x08	; 8
      000BA0 08                    3242 	.db #0x08	; 8
      000BA1 F8                    3243 	.db #0xf8	; 248
      000BA2 80                    3244 	.db #0x80	; 128
      000BA3 80                    3245 	.db #0x80	; 128
      000BA4 80                    3246 	.db #0x80	; 128
      000BA5 80                    3247 	.db #0x80	; 128
      000BA6 80                    3248 	.db #0x80	; 128
      000BA7 FF                    3249 	.db #0xff	; 255
      000BA8 10                    3250 	.db #0x10	; 16
      000BA9 10                    3251 	.db #0x10	; 16
      000BAA 10                    3252 	.db #0x10	; 16
      000BAB 10                    3253 	.db #0x10	; 16
      000BAC 10                    3254 	.db #0x10	; 16
      000BAD 10                    3255 	.db #0x10	; 16
      000BAE 10                    3256 	.db #0x10	; 16
      000BAF 10                    3257 	.db #0x10	; 16
      000BB0 10                    3258 	.db #0x10	; 16
      000BB1 1F                    3259 	.db #0x1f	; 31
      000BB2 01                    3260 	.db #0x01	; 1
      000BB3 01                    3261 	.db #0x01	; 1
      000BB4 01                    3262 	.db #0x01	; 1
      000BB5 01                    3263 	.db #0x01	; 1
      000BB6 01                    3264 	.db #0x01	; 1
      000BB7 FF                    3265 	.db #0xff	; 255
      000BB8 00                    3266 	.db #0x00	; 0
      000BB9 00                    3267 	.db #0x00	; 0
      000BBA 00                    3268 	.db #0x00	; 0
      000BBB 00                    3269 	.db #0x00	; 0
      000BBC 00                    3270 	.db #0x00	; 0
      000BBD 00                    3271 	.db #0x00	; 0
      000BBE 00                    3272 	.db #0x00	; 0
      000BBF 00                    3273 	.db #0x00	; 0
      000BC0 00                    3274 	.db #0x00	; 0
      000BC1 00                    3275 	.db #0x00	; 0
      000BC2 00                    3276 	.db #0x00	; 0
      000BC3 00                    3277 	.db #0x00	; 0
      000BC4 00                    3278 	.db #0x00	; 0
      000BC5 00                    3279 	.db #0x00	; 0
      000BC6 00                    3280 	.db #0x00	; 0
      000BC7 00                    3281 	.db #0x00	; 0
      000BC8                       3282 _sprite_go_32x32:
      000BC8 00                    3283 	.db #0x00	; 0
      000BC9 00                    3284 	.db #0x00	; 0
      000BCA 00                    3285 	.db #0x00	; 0
      000BCB 00                    3286 	.db #0x00	; 0
      000BCC 00                    3287 	.db #0x00	; 0
      000BCD 00                    3288 	.db #0x00	; 0
      000BCE 00                    3289 	.db #0x00	; 0
      000BCF 3F                    3290 	.db #0x3f	; 63
      000BD0 40                    3291 	.db #0x40	; 64
      000BD1 80                    3292 	.db #0x80	; 128
      000BD2 87                    3293 	.db #0x87	; 135
      000BD3 88                    3294 	.db #0x88	; 136
      000BD4 88                    3295 	.db #0x88	; 136
      000BD5 88                    3296 	.db #0x88	; 136
      000BD6 88                    3297 	.db #0x88	; 136
      000BD7 88                    3298 	.db #0x88	; 136
      000BD8 00                    3299 	.db #0x00	; 0
      000BD9 00                    3300 	.db #0x00	; 0
      000BDA 00                    3301 	.db #0x00	; 0
      000BDB 00                    3302 	.db #0x00	; 0
      000BDC 00                    3303 	.db #0x00	; 0
      000BDD 00                    3304 	.db #0x00	; 0
      000BDE 00                    3305 	.db #0x00	; 0
      000BDF C1                    3306 	.db #0xc1	; 193
      000BE0 22                    3307 	.db #0x22	; 34
      000BE1 14                    3308 	.db #0x14	; 20
      000BE2 14                    3309 	.db #0x14	; 20
      000BE3 94                    3310 	.db #0x94	; 148
      000BE4 F4                    3311 	.db #0xf4	; 244
      000BE5 04                    3312 	.db #0x04	; 4
      000BE6 04                    3313 	.db #0x04	; 4
      000BE7 04                    3314 	.db #0x04	; 4
      000BE8 00                    3315 	.db #0x00	; 0
      000BE9 00                    3316 	.db #0x00	; 0
      000BEA 00                    3317 	.db #0x00	; 0
      000BEB 00                    3318 	.db #0x00	; 0
      000BEC 00                    3319 	.db #0x00	; 0
      000BED 00                    3320 	.db #0x00	; 0
      000BEE 00                    3321 	.db #0x00	; 0
      000BEF FE                    3322 	.db #0xfe	; 254
      000BF0 01                    3323 	.db #0x01	; 1
      000BF1 00                    3324 	.db #0x00	; 0
      000BF2 00                    3325 	.db #0x00	; 0
      000BF3 30                    3326 	.db #0x30	; 48	'0'
      000BF4 48                    3327 	.db #0x48	; 72	'H'
      000BF5 48                    3328 	.db #0x48	; 72	'H'
      000BF6 48                    3329 	.db #0x48	; 72	'H'
      000BF7 48                    3330 	.db #0x48	; 72	'H'
      000BF8 00                    3331 	.db #0x00	; 0
      000BF9 00                    3332 	.db #0x00	; 0
      000BFA 00                    3333 	.db #0x00	; 0
      000BFB 00                    3334 	.db #0x00	; 0
      000BFC 00                    3335 	.db #0x00	; 0
      000BFD 00                    3336 	.db #0x00	; 0
      000BFE 00                    3337 	.db #0x00	; 0
      000BFF 3F                    3338 	.db #0x3f	; 63
      000C00 21                    3339 	.db #0x21	; 33
      000C01 A1                    3340 	.db #0xa1	; 161
      000C02 A1                    3341 	.db #0xa1	; 161
      000C03 A1                    3342 	.db #0xa1	; 161
      000C04 A1                    3343 	.db #0xa1	; 161
      000C05 A1                    3344 	.db #0xa1	; 161
      000C06 A1                    3345 	.db #0xa1	; 161
      000C07 A1                    3346 	.db #0xa1	; 161
      000C08 8B                    3347 	.db #0x8b	; 139
      000C09 8A                    3348 	.db #0x8a	; 138
      000C0A 8A                    3349 	.db #0x8a	; 138
      000C0B 8B                    3350 	.db #0x8b	; 139
      000C0C 89                    3351 	.db #0x89	; 137
      000C0D 86                    3352 	.db #0x86	; 134
      000C0E 80                    3353 	.db #0x80	; 128
      000C0F 40                    3354 	.db #0x40	; 64
      000C10 3F                    3355 	.db #0x3f	; 63
      000C11 00                    3356 	.db #0x00	; 0
      000C12 00                    3357 	.db #0x00	; 0
      000C13 00                    3358 	.db #0x00	; 0
      000C14 00                    3359 	.db #0x00	; 0
      000C15 00                    3360 	.db #0x00	; 0
      000C16 00                    3361 	.db #0x00	; 0
      000C17 00                    3362 	.db #0x00	; 0
      000C18 F4                    3363 	.db #0xf4	; 244
      000C19 14                    3364 	.db #0x14	; 20
      000C1A 14                    3365 	.db #0x14	; 20
      000C1B 14                    3366 	.db #0x14	; 20
      000C1C 14                    3367 	.db #0x14	; 20
      000C1D 14                    3368 	.db #0x14	; 20
      000C1E 14                    3369 	.db #0x14	; 20
      000C1F 22                    3370 	.db #0x22	; 34
      000C20 C1                    3371 	.db #0xc1	; 193
      000C21 00                    3372 	.db #0x00	; 0
      000C22 00                    3373 	.db #0x00	; 0
      000C23 00                    3374 	.db #0x00	; 0
      000C24 00                    3375 	.db #0x00	; 0
      000C25 00                    3376 	.db #0x00	; 0
      000C26 00                    3377 	.db #0x00	; 0
      000C27 00                    3378 	.db #0x00	; 0
      000C28 48                    3379 	.db #0x48	; 72	'H'
      000C29 48                    3380 	.db #0x48	; 72	'H'
      000C2A 48                    3381 	.db #0x48	; 72	'H'
      000C2B 48                    3382 	.db #0x48	; 72	'H'
      000C2C 30                    3383 	.db #0x30	; 48	'0'
      000C2D 00                    3384 	.db #0x00	; 0
      000C2E 00                    3385 	.db #0x00	; 0
      000C2F 01                    3386 	.db #0x01	; 1
      000C30 FE                    3387 	.db #0xfe	; 254
      000C31 00                    3388 	.db #0x00	; 0
      000C32 00                    3389 	.db #0x00	; 0
      000C33 00                    3390 	.db #0x00	; 0
      000C34 00                    3391 	.db #0x00	; 0
      000C35 00                    3392 	.db #0x00	; 0
      000C36 00                    3393 	.db #0x00	; 0
      000C37 00                    3394 	.db #0x00	; 0
      000C38 A1                    3395 	.db #0xa1	; 161
      000C39 A1                    3396 	.db #0xa1	; 161
      000C3A A1                    3397 	.db #0xa1	; 161
      000C3B BF                    3398 	.db #0xbf	; 191
      000C3C 80                    3399 	.db #0x80	; 128
      000C3D BF                    3400 	.db #0xbf	; 191
      000C3E A1                    3401 	.db #0xa1	; 161
      000C3F 21                    3402 	.db #0x21	; 33
      000C40 3F                    3403 	.db #0x3f	; 63
      000C41 00                    3404 	.db #0x00	; 0
      000C42 00                    3405 	.db #0x00	; 0
      000C43 00                    3406 	.db #0x00	; 0
      000C44 00                    3407 	.db #0x00	; 0
      000C45 00                    3408 	.db #0x00	; 0
      000C46 00                    3409 	.db #0x00	; 0
      000C47 00                    3410 	.db #0x00	; 0
                                   3411 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3412 ;	---------------------------------
                                   3413 ; Function HideArrowSprite
                                   3414 ; ---------------------------------
      000C48                       3415 _HideArrowSprite::
                                   3416 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3417 	ld	a, #0xc0
      000C4A F5               [11] 3418 	push	af
      000C4B 33               [ 6] 3419 	inc	sp
      000C4C 21 00 1B         [10] 3420 	ld	hl, #0x1b00
      000C4F E5               [11] 3421 	push	hl
      000C50 CDr00r00         [17] 3422 	call	_WRTVRM
      000C53 F1               [10] 3423 	pop	af
      000C54 33               [ 6] 3424 	inc	sp
                                   3425 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3426 	ret
                                   3427 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3428 ;	---------------------------------
                                   3429 ; Function DrawHitSprite
                                   3430 ; ---------------------------------
      000C56                       3431 _DrawHitSprite::
      000C56 DD E5            [15] 3432 	push	ix
      000C58 DD 21 00 00      [14] 3433 	ld	ix,#0
      000C5C DD 39            [15] 3434 	add	ix,sp
      000C5E 21 EC FF         [10] 3435 	ld	hl, #-20
      000C61 39               [11] 3436 	add	hl, sp
      000C62 F9               [ 6] 3437 	ld	sp, hl
                                   3438 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3439 	ld	hl, #0
      000C66 39               [11] 3440 	add	hl, sp
      000C67 EB               [ 4] 3441 	ex	de, hl
      000C68 3E 0F            [ 7] 3442 	ld	a, #0x0f
      000C6A 12               [ 7] 3443 	ld	(de), a
      000C6B 6B               [ 4] 3444 	ld	l, e
      000C6C 62               [ 4] 3445 	ld	h, d
      000C6D 23               [ 6] 3446 	inc	hl
      000C6E 36 0E            [10] 3447 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3448 	ld	l, e
      000C71 62               [ 4] 3449 	ld	h, d
      000C72 23               [ 6] 3450 	inc	hl
      000C73 23               [ 6] 3451 	inc	hl
      000C74 36 09            [10] 3452 	ld	(hl), #0x09
      000C76 6B               [ 4] 3453 	ld	l, e
      000C77 62               [ 4] 3454 	ld	h, d
      000C78 23               [ 6] 3455 	inc	hl
      000C79 23               [ 6] 3456 	inc	hl
      000C7A 23               [ 6] 3457 	inc	hl
      000C7B 36 06            [10] 3458 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3459 	ld	hl, #0x0004
      000C80 19               [11] 3460 	add	hl, de
      000C81 36 06            [10] 3461 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3462 	ld	hl, #0x0005
      000C86 19               [11] 3463 	add	hl, de
      000C87 36 09            [10] 3464 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3465 	ld	hl, #0x0006
      000C8C 19               [11] 3466 	add	hl, de
      000C8D 36 0E            [10] 3467 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3468 	ld	hl, #0x0007
      000C92 19               [11] 3469 	add	hl, de
      000C93 36 0F            [10] 3470 	ld	(hl), #0x0f
                                   3471 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3472 	ld	hl, #8
      000C98 39               [11] 3473 	add	hl, sp
      000C99 4D               [ 4] 3474 	ld	c, l
      000C9A 44               [ 4] 3475 	ld	b, h
      000C9B 36 0F            [10] 3476 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3477 	ld	l, c
      000C9E 60               [ 4] 3478 	ld	h, b
      000C9F 23               [ 6] 3479 	inc	hl
      000CA0 36 0E            [10] 3480 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3481 	ld	l, c
      000CA3 60               [ 4] 3482 	ld	h, b
      000CA4 23               [ 6] 3483 	inc	hl
      000CA5 23               [ 6] 3484 	inc	hl
      000CA6 36 03            [10] 3485 	ld	(hl), #0x03
      000CA8 69               [ 4] 3486 	ld	l, c
      000CA9 60               [ 4] 3487 	ld	h, b
      000CAA 23               [ 6] 3488 	inc	hl
      000CAB 23               [ 6] 3489 	inc	hl
      000CAC 23               [ 6] 3490 	inc	hl
      000CAD 36 0C            [10] 3491 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3492 	ld	hl, #0x0004
      000CB2 09               [11] 3493 	add	hl, bc
      000CB3 36 0C            [10] 3494 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3495 	ld	hl, #0x0005
      000CB8 09               [11] 3496 	add	hl, bc
      000CB9 36 03            [10] 3497 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3498 	ld	hl, #0x0006
      000CBE 09               [11] 3499 	add	hl, bc
      000CBF 36 0E            [10] 3500 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3501 	ld	hl, #0x0007
      000CC4 09               [11] 3502 	add	hl, bc
      000CC5 36 0F            [10] 3503 	ld	(hl), #0x0f
                                   3504 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3505 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3506 	and	a, #0x07
                                   3507 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3508 	ld	l, a
      000CCD 83               [ 4] 3509 	add	a,e
      000CCE 5F               [ 4] 3510 	ld	e, a
      000CCF 30 01            [12] 3511 	jr	NC, 00124$
      000CD1 14               [ 4] 3512 	inc	d
      000CD2                       3513 00124$:
      000CD2 1A               [ 7] 3514 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3515 	ld	-4 (ix), a
                                   3516 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3517 	ld	h, #0x00
      000CD8 09               [11] 3518 	add	hl, bc
      000CD9 7E               [ 7] 3519 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3520 	ld	-3 (ix), a
                                   3521 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3522 	ld	a, #0x01
      000CDF DD 96 05         [19] 3523 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3524 	ld	a, #0x00
      000CE4 17               [ 4] 3525 	rla
      000CE5 DD 77 FE         [19] 3526 	ld	-2 (ix), a
                                   3527 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3528 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3529 	or	a, a
      000CEC CArB7r0D         [10] 3530 	jp	Z, 00104$
                                   3531 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3532 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3533 	ld	a, c
      000CF3 C6 F8            [ 7] 3534 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3535 	ld	-1 (ix), a
      000CF8 C5               [11] 3536 	push	bc
      000CF9 F5               [11] 3537 	push	af
      000CFA 33               [ 6] 3538 	inc	sp
      000CFB 21 05 1B         [10] 3539 	ld	hl, #0x1b05
      000CFE E5               [11] 3540 	push	hl
      000CFF CDr00r00         [17] 3541 	call	_WRTVRM
      000D02 F1               [10] 3542 	pop	af
      000D03 33               [ 6] 3543 	inc	sp
      000D04 C1               [10] 3544 	pop	bc
                                   3545 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3546 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3547 	add	a, #0xfd
      000D0A 87               [ 4] 3548 	add	a, a
      000D0B 87               [ 4] 3549 	add	a, a
      000D0C C6 18            [ 7] 3550 	add	a, #0x18
      000D0E C5               [11] 3551 	push	bc
      000D0F F5               [11] 3552 	push	af
      000D10 33               [ 6] 3553 	inc	sp
      000D11 21 06 1B         [10] 3554 	ld	hl, #0x1b06
      000D14 E5               [11] 3555 	push	hl
      000D15 CDr00r00         [17] 3556 	call	_WRTVRM
      000D18 F1               [10] 3557 	pop	af
      000D19 33               [ 6] 3558 	inc	sp
      000D1A C1               [10] 3559 	pop	bc
                                   3560 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3561 	ld	a, c
      000D1C C6 08            [ 7] 3562 	add	a, #0x08
      000D1E 47               [ 4] 3563 	ld	b, a
      000D1F C5               [11] 3564 	push	bc
      000D20 C5               [11] 3565 	push	bc
      000D21 33               [ 6] 3566 	inc	sp
      000D22 21 09 1B         [10] 3567 	ld	hl, #0x1b09
      000D25 E5               [11] 3568 	push	hl
      000D26 CDr00r00         [17] 3569 	call	_WRTVRM
      000D29 F1               [10] 3570 	pop	af
      000D2A 33               [ 6] 3571 	inc	sp
      000D2B 3E 04            [ 7] 3572 	ld	a, #0x04
      000D2D F5               [11] 3573 	push	af
      000D2E 33               [ 6] 3574 	inc	sp
      000D2F 21 0A 1B         [10] 3575 	ld	hl, #0x1b0a
      000D32 E5               [11] 3576 	push	hl
      000D33 CDr00r00         [17] 3577 	call	_WRTVRM
      000D36 F1               [10] 3578 	pop	af
      000D37 33               [ 6] 3579 	inc	sp
      000D38 C1               [10] 3580 	pop	bc
                                   3581 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3582 	ld	a, c
      000D3A C6 18            [ 7] 3583 	add	a, #0x18
      000D3C 4F               [ 4] 3584 	ld	c, a
      000D3D C5               [11] 3585 	push	bc
      000D3E 79               [ 4] 3586 	ld	a, c
      000D3F F5               [11] 3587 	push	af
      000D40 33               [ 6] 3588 	inc	sp
      000D41 21 0D 1B         [10] 3589 	ld	hl, #0x1b0d
      000D44 E5               [11] 3590 	push	hl
      000D45 CDr00r00         [17] 3591 	call	_WRTVRM
      000D48 F1               [10] 3592 	pop	af
      000D49 33               [ 6] 3593 	inc	sp
      000D4A 3E 08            [ 7] 3594 	ld	a, #0x08
      000D4C F5               [11] 3595 	push	af
      000D4D 33               [ 6] 3596 	inc	sp
      000D4E 21 0E 1B         [10] 3597 	ld	hl, #0x1b0e
      000D51 E5               [11] 3598 	push	hl
      000D52 CDr00r00         [17] 3599 	call	_WRTVRM
      000D55 F1               [10] 3600 	pop	af
      000D56 33               [ 6] 3601 	inc	sp
      000D57 C1               [10] 3602 	pop	bc
                                   3603 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3604 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3605 	or	a, a
      000D5C 28 59            [12] 3606 	jr	Z, 00104$
                                   3607 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3608 	push	bc
      000D5F DD 7E FF         [19] 3609 	ld	a, -1 (ix)
      000D62 F5               [11] 3610 	push	af
      000D63 33               [ 6] 3611 	inc	sp
      000D64 21 11 1B         [10] 3612 	ld	hl, #0x1b11
      000D67 E5               [11] 3613 	push	hl
      000D68 CDr00r00         [17] 3614 	call	_WRTVRM
      000D6B F1               [10] 3615 	pop	af
      000D6C 33               [ 6] 3616 	inc	sp
      000D6D C1               [10] 3617 	pop	bc
                                   3618 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3619 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3620 	dec	a
      000D72 3D               [ 4] 3621 	dec	a
      000D73 87               [ 4] 3622 	add	a, a
      000D74 87               [ 4] 3623 	add	a, a
      000D75 C6 14            [ 7] 3624 	add	a, #0x14
      000D77 C5               [11] 3625 	push	bc
      000D78 F5               [11] 3626 	push	af
      000D79 33               [ 6] 3627 	inc	sp
      000D7A 21 12 1B         [10] 3628 	ld	hl, #0x1b12
      000D7D E5               [11] 3629 	push	hl
      000D7E CDr00r00         [17] 3630 	call	_WRTVRM
      000D81 F1               [10] 3631 	pop	af
      000D82 33               [ 6] 3632 	inc	sp
      000D83 C1               [10] 3633 	pop	bc
                                   3634 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3635 	push	bc
      000D85 C5               [11] 3636 	push	bc
      000D86 33               [ 6] 3637 	inc	sp
      000D87 21 15 1B         [10] 3638 	ld	hl, #0x1b15
      000D8A E5               [11] 3639 	push	hl
      000D8B CDr00r00         [17] 3640 	call	_WRTVRM
      000D8E F1               [10] 3641 	pop	af
      000D8F 33               [ 6] 3642 	inc	sp
      000D90 3E 0C            [ 7] 3643 	ld	a, #0x0c
      000D92 F5               [11] 3644 	push	af
      000D93 33               [ 6] 3645 	inc	sp
      000D94 21 16 1B         [10] 3646 	ld	hl, #0x1b16
      000D97 E5               [11] 3647 	push	hl
      000D98 CDr00r00         [17] 3648 	call	_WRTVRM
      000D9B F1               [10] 3649 	pop	af
      000D9C 33               [ 6] 3650 	inc	sp
      000D9D C1               [10] 3651 	pop	bc
                                   3652 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3653 	ld	a, c
      000D9F F5               [11] 3654 	push	af
      000DA0 33               [ 6] 3655 	inc	sp
      000DA1 21 19 1B         [10] 3656 	ld	hl, #0x1b19
      000DA4 E5               [11] 3657 	push	hl
      000DA5 CDr00r00         [17] 3658 	call	_WRTVRM
      000DA8 F1               [10] 3659 	pop	af
      000DA9 33               [ 6] 3660 	inc	sp
                                   3661 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3662 	ld	a, #0x10
      000DAC F5               [11] 3663 	push	af
      000DAD 33               [ 6] 3664 	inc	sp
      000DAE 21 1A 1B         [10] 3665 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3666 	push	hl
      000DB2 CDr00r00         [17] 3667 	call	_WRTVRM
      000DB5 F1               [10] 3668 	pop	af
      000DB6 33               [ 6] 3669 	inc	sp
      000DB7                       3670 00104$:
                                   3671 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3672 	ld	a, 7 (ix)
      000DBA F5               [11] 3673 	push	af
      000DBB 33               [ 6] 3674 	inc	sp
      000DBC 21 04 1B         [10] 3675 	ld	hl, #0x1b04
      000DBF E5               [11] 3676 	push	hl
      000DC0 CDr00r00         [17] 3677 	call	_WRTVRM
      000DC3 F1               [10] 3678 	pop	af
      000DC4 33               [ 6] 3679 	inc	sp
                                   3680 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3681 	ld	a, -4 (ix)
      000DC8 F5               [11] 3682 	push	af
      000DC9 33               [ 6] 3683 	inc	sp
      000DCA 21 07 1B         [10] 3684 	ld	hl, #0x1b07
      000DCD E5               [11] 3685 	push	hl
      000DCE CDr00r00         [17] 3686 	call	_WRTVRM
      000DD1 F1               [10] 3687 	pop	af
      000DD2 33               [ 6] 3688 	inc	sp
                                   3689 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3690 	ld	a, 7 (ix)
      000DD6 F5               [11] 3691 	push	af
      000DD7 33               [ 6] 3692 	inc	sp
      000DD8 21 08 1B         [10] 3693 	ld	hl, #0x1b08
      000DDB E5               [11] 3694 	push	hl
      000DDC CDr00r00         [17] 3695 	call	_WRTVRM
      000DDF F1               [10] 3696 	pop	af
      000DE0 33               [ 6] 3697 	inc	sp
                                   3698 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3699 	ld	a, -4 (ix)
      000DE4 F5               [11] 3700 	push	af
      000DE5 33               [ 6] 3701 	inc	sp
      000DE6 21 0B 1B         [10] 3702 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3703 	push	hl
      000DEA CDr00r00         [17] 3704 	call	_WRTVRM
      000DED F1               [10] 3705 	pop	af
      000DEE 33               [ 6] 3706 	inc	sp
                                   3707 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3708 	ld	a, 7 (ix)
      000DF2 F5               [11] 3709 	push	af
      000DF3 33               [ 6] 3710 	inc	sp
      000DF4 21 0C 1B         [10] 3711 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3712 	push	hl
      000DF8 CDr00r00         [17] 3713 	call	_WRTVRM
      000DFB F1               [10] 3714 	pop	af
      000DFC 33               [ 6] 3715 	inc	sp
                                   3716 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3717 	ld	a, -4 (ix)
      000E00 F5               [11] 3718 	push	af
      000E01 33               [ 6] 3719 	inc	sp
      000E02 21 0F 1B         [10] 3720 	ld	hl, #0x1b0f
      000E05 E5               [11] 3721 	push	hl
      000E06 CDr00r00         [17] 3722 	call	_WRTVRM
      000E09 F1               [10] 3723 	pop	af
      000E0A 33               [ 6] 3724 	inc	sp
                                   3725 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3726 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3727 	or	a, a
      000E0F 28 52            [12] 3728 	jr	Z, 00107$
                                   3729 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3730 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3731 	add	a, #0x10
      000E16 47               [ 4] 3732 	ld	b, a
      000E17 C5               [11] 3733 	push	bc
      000E18 C5               [11] 3734 	push	bc
      000E19 33               [ 6] 3735 	inc	sp
      000E1A 21 10 1B         [10] 3736 	ld	hl, #0x1b10
      000E1D E5               [11] 3737 	push	hl
      000E1E CDr00r00         [17] 3738 	call	_WRTVRM
      000E21 F1               [10] 3739 	pop	af
      000E22 33               [ 6] 3740 	inc	sp
      000E23 DD 7E FD         [19] 3741 	ld	a, -3 (ix)
      000E26 F5               [11] 3742 	push	af
      000E27 33               [ 6] 3743 	inc	sp
      000E28 21 13 1B         [10] 3744 	ld	hl, #0x1b13
      000E2B E5               [11] 3745 	push	hl
      000E2C CDr00r00         [17] 3746 	call	_WRTVRM
      000E2F F1               [10] 3747 	pop	af
      000E30 33               [ 6] 3748 	inc	sp
      000E31 C1               [10] 3749 	pop	bc
                                   3750 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3751 	push	bc
      000E33 C5               [11] 3752 	push	bc
      000E34 33               [ 6] 3753 	inc	sp
      000E35 21 14 1B         [10] 3754 	ld	hl, #0x1b14
      000E38 E5               [11] 3755 	push	hl
      000E39 CDr00r00         [17] 3756 	call	_WRTVRM
      000E3C F1               [10] 3757 	pop	af
      000E3D 33               [ 6] 3758 	inc	sp
      000E3E DD 7E FD         [19] 3759 	ld	a, -3 (ix)
      000E41 F5               [11] 3760 	push	af
      000E42 33               [ 6] 3761 	inc	sp
      000E43 21 17 1B         [10] 3762 	ld	hl, #0x1b17
      000E46 E5               [11] 3763 	push	hl
      000E47 CDr00r00         [17] 3764 	call	_WRTVRM
      000E4A F1               [10] 3765 	pop	af
      000E4B 33               [ 6] 3766 	inc	sp
      000E4C 33               [ 6] 3767 	inc	sp
      000E4D 21 18 1B         [10] 3768 	ld	hl, #0x1b18
      000E50 E5               [11] 3769 	push	hl
      000E51 CDr00r00         [17] 3770 	call	_WRTVRM
      000E54 F1               [10] 3771 	pop	af
      000E55 33               [ 6] 3772 	inc	sp
                                   3773 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3774 	ld	a, -3 (ix)
      000E59 F5               [11] 3775 	push	af
      000E5A 33               [ 6] 3776 	inc	sp
      000E5B 21 1B 1B         [10] 3777 	ld	hl, #0x1b1b
      000E5E E5               [11] 3778 	push	hl
      000E5F CDr00r00         [17] 3779 	call	_WRTVRM
      000E62 F1               [10] 3780 	pop	af
      000E63                       3781 00107$:
                                   3782 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3783 	ld	sp, ix
      000E65 DD E1            [14] 3784 	pop	ix
      000E67 C9               [10] 3785 	ret
                                   3786 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3787 ;	---------------------------------
                                   3788 ; Function HideHitSprite
                                   3789 ; ---------------------------------
      000E68                       3790 _HideHitSprite::
                                   3791 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3792 	ld	a, #0xc0
      000E6A F5               [11] 3793 	push	af
      000E6B 33               [ 6] 3794 	inc	sp
      000E6C 21 04 1B         [10] 3795 	ld	hl, #0x1b04
      000E6F E5               [11] 3796 	push	hl
      000E70 CDr00r00         [17] 3797 	call	_WRTVRM
      000E73 F1               [10] 3798 	pop	af
      000E74 33               [ 6] 3799 	inc	sp
                                   3800 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3801 	ld	a, #0xc0
      000E77 F5               [11] 3802 	push	af
      000E78 33               [ 6] 3803 	inc	sp
      000E79 21 08 1B         [10] 3804 	ld	hl, #0x1b08
      000E7C E5               [11] 3805 	push	hl
      000E7D CDr00r00         [17] 3806 	call	_WRTVRM
      000E80 F1               [10] 3807 	pop	af
      000E81 33               [ 6] 3808 	inc	sp
                                   3809 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3810 	ld	a, #0xc0
      000E84 F5               [11] 3811 	push	af
      000E85 33               [ 6] 3812 	inc	sp
      000E86 21 0C 1B         [10] 3813 	ld	hl, #0x1b0c
      000E89 E5               [11] 3814 	push	hl
      000E8A CDr00r00         [17] 3815 	call	_WRTVRM
      000E8D F1               [10] 3816 	pop	af
      000E8E 33               [ 6] 3817 	inc	sp
                                   3818 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3819 	ld	a, #0xc0
      000E91 F5               [11] 3820 	push	af
      000E92 33               [ 6] 3821 	inc	sp
      000E93 21 10 1B         [10] 3822 	ld	hl, #0x1b10
      000E96 E5               [11] 3823 	push	hl
      000E97 CDr00r00         [17] 3824 	call	_WRTVRM
      000E9A F1               [10] 3825 	pop	af
      000E9B 33               [ 6] 3826 	inc	sp
                                   3827 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3828 	ld	a, #0xc0
      000E9E F5               [11] 3829 	push	af
      000E9F 33               [ 6] 3830 	inc	sp
      000EA0 21 14 1B         [10] 3831 	ld	hl, #0x1b14
      000EA3 E5               [11] 3832 	push	hl
      000EA4 CDr00r00         [17] 3833 	call	_WRTVRM
      000EA7 F1               [10] 3834 	pop	af
      000EA8 33               [ 6] 3835 	inc	sp
                                   3836 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3837 	ld	a, #0xc0
      000EAB F5               [11] 3838 	push	af
      000EAC 33               [ 6] 3839 	inc	sp
      000EAD 21 18 1B         [10] 3840 	ld	hl, #0x1b18
      000EB0 E5               [11] 3841 	push	hl
      000EB1 CDr00r00         [17] 3842 	call	_WRTVRM
      000EB4 F1               [10] 3843 	pop	af
      000EB5 33               [ 6] 3844 	inc	sp
                                   3845 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3846 	ret
                                   3847 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3848 ;	---------------------------------
                                   3849 ; Function HideExplosionSprite
                                   3850 ; ---------------------------------
      000EB7                       3851 _HideExplosionSprite::
                                   3852 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3853 	ld	a, #0xc0
      000EB9 F5               [11] 3854 	push	af
      000EBA 33               [ 6] 3855 	inc	sp
      000EBB 21 1C 1B         [10] 3856 	ld	hl, #0x1b1c
      000EBE E5               [11] 3857 	push	hl
      000EBF CDr00r00         [17] 3858 	call	_WRTVRM
      000EC2 F1               [10] 3859 	pop	af
      000EC3 33               [ 6] 3860 	inc	sp
                                   3861 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3862 	ld	a, #0xc0
      000EC6 F5               [11] 3863 	push	af
      000EC7 33               [ 6] 3864 	inc	sp
      000EC8 21 20 1B         [10] 3865 	ld	hl, #0x1b20
      000ECB E5               [11] 3866 	push	hl
      000ECC CDr00r00         [17] 3867 	call	_WRTVRM
      000ECF F1               [10] 3868 	pop	af
      000ED0 33               [ 6] 3869 	inc	sp
                                   3870 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3871 	ld	a, #0xc0
      000ED3 F5               [11] 3872 	push	af
      000ED4 33               [ 6] 3873 	inc	sp
      000ED5 21 24 1B         [10] 3874 	ld	hl, #0x1b24
      000ED8 E5               [11] 3875 	push	hl
      000ED9 CDr00r00         [17] 3876 	call	_WRTVRM
      000EDC F1               [10] 3877 	pop	af
      000EDD 33               [ 6] 3878 	inc	sp
                                   3879 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3880 	ret
                                   3881 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3882 ;	---------------------------------
                                   3883 ; Function DrawExplosionSprite
                                   3884 ; ---------------------------------
      000EDF                       3885 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3886 	dec	sp
                                   3887 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3888 	ld	iy, #5
      000EE4 FD 39            [15] 3889 	add	iy, sp
      000EE6 FD 6E 00         [19] 3890 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3891 	srl	l
      000EEB CB 3D            [ 8] 3892 	srl	l
                                   3893 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3894 	ld	a, #0x07
      000EEF 95               [ 4] 3895 	sub	a, l
      000EF0 30 07            [12] 3896 	jr	NC, 00102$
                                   3897 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3898 	inc	sp
      000EF3 C3rB7r0E         [10] 3899 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3900 	jp	00104$
      000EF9                       3901 00102$:
                                   3902 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3903 	add	hl, hl
      000EFA 29               [11] 3904 	add	hl, hl
                                   3905 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3906 	ld	iy, #4
      000EFF FD 39            [15] 3907 	add	iy, sp
      000F01 FD 7E 00         [19] 3908 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3909 	add	a, #0xf0
      000F06 67               [ 4] 3910 	ld	h, a
      000F07 E5               [11] 3911 	push	hl
      000F08 E5               [11] 3912 	push	hl
      000F09 33               [ 6] 3913 	inc	sp
      000F0A 11 1C 1B         [10] 3914 	ld	de, #0x1b1c
      000F0D D5               [11] 3915 	push	de
      000F0E CDr00r00         [17] 3916 	call	_WRTVRM
      000F11 F1               [10] 3917 	pop	af
      000F12 33               [ 6] 3918 	inc	sp
      000F13 21 05 00         [10] 3919 	ld	hl, #5
      000F16 39               [11] 3920 	add	hl, sp
      000F17 7E               [ 7] 3921 	ld	a, (hl)
      000F18 F5               [11] 3922 	push	af
      000F19 33               [ 6] 3923 	inc	sp
      000F1A 11 1D 1B         [10] 3924 	ld	de, #0x1b1d
      000F1D D5               [11] 3925 	push	de
      000F1E CDr00r00         [17] 3926 	call	_WRTVRM
      000F21 F1               [10] 3927 	pop	af
      000F22 33               [ 6] 3928 	inc	sp
      000F23 E1               [10] 3929 	pop	hl
                                   3930 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3931 	ld	a, l
      000F25 C6 2C            [ 7] 3932 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3933 	ld	iy, #0
      000F2B FD 39            [15] 3934 	add	iy, sp
      000F2D FD 77 00         [19] 3935 	ld	0 (iy), a
      000F30 E5               [11] 3936 	push	hl
      000F31 F5               [11] 3937 	push	af
      000F32 33               [ 6] 3938 	inc	sp
      000F33 11 1E 1B         [10] 3939 	ld	de, #0x1b1e
      000F36 D5               [11] 3940 	push	de
      000F37 CDr00r00         [17] 3941 	call	_WRTVRM
      000F3A F1               [10] 3942 	pop	af
      000F3B 33               [ 6] 3943 	inc	sp
      000F3C 3E 0F            [ 7] 3944 	ld	a, #0x0f
      000F3E F5               [11] 3945 	push	af
      000F3F 33               [ 6] 3946 	inc	sp
      000F40 11 1F 1B         [10] 3947 	ld	de, #0x1b1f
      000F43 D5               [11] 3948 	push	de
      000F44 CDr00r00         [17] 3949 	call	_WRTVRM
      000F47 F1               [10] 3950 	pop	af
      000F48 33               [ 6] 3951 	inc	sp
      000F49 E1               [10] 3952 	pop	hl
                                   3953 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3954 	push	hl
      000F4B E5               [11] 3955 	push	hl
      000F4C 33               [ 6] 3956 	inc	sp
      000F4D 11 20 1B         [10] 3957 	ld	de, #0x1b20
      000F50 D5               [11] 3958 	push	de
      000F51 CDr00r00         [17] 3959 	call	_WRTVRM
      000F54 F1               [10] 3960 	pop	af
      000F55 33               [ 6] 3961 	inc	sp
      000F56 E1               [10] 3962 	pop	hl
                                   3963 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3964 	ld	iy, #3
      000F5B FD 39            [15] 3965 	add	iy, sp
      000F5D FD 6E 00         [19] 3966 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3967 	ld	a, l
      000F61 C6 10            [ 7] 3968 	add	a, #0x10
      000F63 E5               [11] 3969 	push	hl
      000F64 F5               [11] 3970 	push	af
      000F65 33               [ 6] 3971 	inc	sp
      000F66 11 21 1B         [10] 3972 	ld	de, #0x1b21
      000F69 D5               [11] 3973 	push	de
      000F6A CDr00r00         [17] 3974 	call	_WRTVRM
      000F6D F1               [10] 3975 	pop	af
      000F6E 33               [ 6] 3976 	inc	sp
      000F6F 21 02 00         [10] 3977 	ld	hl, #2
      000F72 39               [11] 3978 	add	hl, sp
      000F73 7E               [ 7] 3979 	ld	a, (hl)
      000F74 F5               [11] 3980 	push	af
      000F75 33               [ 6] 3981 	inc	sp
      000F76 11 22 1B         [10] 3982 	ld	de, #0x1b22
      000F79 D5               [11] 3983 	push	de
      000F7A CDr00r00         [17] 3984 	call	_WRTVRM
      000F7D F1               [10] 3985 	pop	af
      000F7E 33               [ 6] 3986 	inc	sp
      000F7F 3E 0A            [ 7] 3987 	ld	a, #0x0a
      000F81 F5               [11] 3988 	push	af
      000F82 33               [ 6] 3989 	inc	sp
      000F83 11 23 1B         [10] 3990 	ld	de, #0x1b23
      000F86 D5               [11] 3991 	push	de
      000F87 CDr00r00         [17] 3992 	call	_WRTVRM
      000F8A F1               [10] 3993 	pop	af
      000F8B 33               [ 6] 3994 	inc	sp
      000F8C E1               [10] 3995 	pop	hl
                                   3996 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 3997 	push	hl
      000F8E E5               [11] 3998 	push	hl
      000F8F 33               [ 6] 3999 	inc	sp
      000F90 11 24 1B         [10] 4000 	ld	de, #0x1b24
      000F93 D5               [11] 4001 	push	de
      000F94 CDr00r00         [17] 4002 	call	_WRTVRM
      000F97 F1               [10] 4003 	pop	af
      000F98 33               [ 6] 4004 	inc	sp
      000F99 E1               [10] 4005 	pop	hl
                                   4006 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4007 	ld	a, l
      000F9B C6 20            [ 7] 4008 	add	a, #0x20
      000F9D F5               [11] 4009 	push	af
      000F9E 33               [ 6] 4010 	inc	sp
      000F9F 21 25 1B         [10] 4011 	ld	hl, #0x1b25
      000FA2 E5               [11] 4012 	push	hl
      000FA3 CDr00r00         [17] 4013 	call	_WRTVRM
      000FA6 F1               [10] 4014 	pop	af
      000FA7 33               [ 6] 4015 	inc	sp
                                   4016 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4017 	ld	hl, #0
      000FAB 39               [11] 4018 	add	hl, sp
      000FAC 7E               [ 7] 4019 	ld	a, (hl)
      000FAD F5               [11] 4020 	push	af
      000FAE 33               [ 6] 4021 	inc	sp
      000FAF 21 26 1B         [10] 4022 	ld	hl, #0x1b26
      000FB2 E5               [11] 4023 	push	hl
      000FB3 CDr00r00         [17] 4024 	call	_WRTVRM
      000FB6 F1               [10] 4025 	pop	af
      000FB7 33               [ 6] 4026 	inc	sp
                                   4027 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4028 	ld	a, #0x03
      000FBA F5               [11] 4029 	push	af
      000FBB 33               [ 6] 4030 	inc	sp
      000FBC 21 27 1B         [10] 4031 	ld	hl, #0x1b27
      000FBF E5               [11] 4032 	push	hl
      000FC0 CDr00r00         [17] 4033 	call	_WRTVRM
      000FC3 F1               [10] 4034 	pop	af
      000FC4 33               [ 6] 4035 	inc	sp
      000FC5                       4036 00104$:
                                   4037 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4038 	inc	sp
      000FC6 C9               [10] 4039 	ret
                                   4040 ;src\/Graphics\Countdown.h:1: void ShowCountdown() {
                                   4041 ;	---------------------------------
                                   4042 ; Function ShowCountdown
                                   4043 ; ---------------------------------
      000FC7                       4044 _ShowCountdown::
      000FC7 DD E5            [15] 4045 	push	ix
      000FC9 DD 21 00 00      [14] 4046 	ld	ix,#0
      000FCD DD 39            [15] 4047 	add	ix,sp
      000FCF 21 F9 FF         [10] 4048 	ld	hl, #-7
      000FD2 39               [11] 4049 	add	hl, sp
      000FD3 F9               [ 6] 4050 	ld	sp, hl
                                   4051 ;src\/Graphics\Countdown.h:3: byte x = 128-80, y = 0;
      000FD4 DD 36 F9 30      [19] 4052 	ld	-7 (ix), #0x30
      000FD8 DD 36 FA 00      [19] 4053 	ld	-6 (ix), #0
                                   4054 ;src\/Graphics\Countdown.h:5: while(counter-- > 0) {
      000FDC DD 36 FF 3C      [19] 4055 	ld	-1 (ix), #0x3c
      000FE0                       4056 00108$:
      000FE0 DD 7E FF         [19] 4057 	ld	a, -1 (ix)
      000FE3 DD 77 FE         [19] 4058 	ld	-2 (ix), a
      000FE6 DD 35 FF         [23] 4059 	dec	-1 (ix)
      000FE9 DD 7E FE         [19] 4060 	ld	a, -2 (ix)
      000FEC B7               [ 4] 4061 	or	a, a
      000FED CAr0Cr11         [10] 4062 	jp	Z, 00112$
                                   4063 ;src\/Graphics\Countdown.h:15: word lastJiffy = JIFFY;
      000FF0 ED 4B 9E FC      [20] 4064 	ld	bc, (_JIFFY)
                                   4065 ;src\/Graphics\Countdown.h:16: while (lastJiffy == JIFFY) {
      000FF4                       4066 00101$:
      000FF4 2A 9E FC         [16] 4067 	ld	hl, (_JIFFY)
      000FF7 BF               [ 4] 4068 	cp	a, a
      000FF8 ED 42            [15] 4069 	sbc	hl, bc
      000FFA 28 F8            [12] 4070 	jr	Z, 00101$
                                   4071 ;src\/Graphics\Countdown.h:21: WRTVRM(SPRATT, 	y); //96-16);
      000FFC DD 7E FA         [19] 4072 	ld	a, -6 (ix)
      000FFF F5               [11] 4073 	push	af
      001000 33               [ 6] 4074 	inc	sp
      001001 21 00 1B         [10] 4075 	ld	hl, #0x1b00
      001004 E5               [11] 4076 	push	hl
      001005 CDr00r00         [17] 4077 	call	_WRTVRM
      001008 F1               [10] 4078 	pop	af
      001009 33               [ 6] 4079 	inc	sp
                                   4080 ;src\/Graphics\Countdown.h:22: WRTVRM(SPRATT + 1, 	256-x-16); //128-16);
      00100A DD 7E F9         [19] 4081 	ld	a, -7 (ix)
      00100D DD 77 FB         [19] 4082 	ld	-5 (ix), a
      001010 3E F0            [ 7] 4083 	ld	a, #0xf0
      001012 DD 96 FB         [19] 4084 	sub	a, -5 (ix)
      001015 DD 77 FC         [19] 4085 	ld	-4 (ix), a
      001018 F5               [11] 4086 	push	af
      001019 33               [ 6] 4087 	inc	sp
      00101A 21 01 1B         [10] 4088 	ld	hl, #0x1b01
      00101D E5               [11] 4089 	push	hl
      00101E CDr00r00         [17] 4090 	call	_WRTVRM
      001021 F1               [10] 4091 	pop	af
      001022 33               [ 6] 4092 	inc	sp
                                   4093 ;src\/Graphics\Countdown.h:23: WRTVRM(SPRATT + 2, 	SPRITE_PATTERN_NUMBER_3_32X32);
      001023 3E 54            [ 7] 4094 	ld	a, #0x54
      001025 F5               [11] 4095 	push	af
      001026 33               [ 6] 4096 	inc	sp
      001027 21 02 1B         [10] 4097 	ld	hl, #0x1b02
      00102A E5               [11] 4098 	push	hl
      00102B CDr00r00         [17] 4099 	call	_WRTVRM
      00102E F1               [10] 4100 	pop	af
      00102F 33               [ 6] 4101 	inc	sp
                                   4102 ;src\/Graphics\Countdown.h:24: WRTVRM(SPRATT + 3, 	10);
      001030 3E 0A            [ 7] 4103 	ld	a, #0x0a
      001032 F5               [11] 4104 	push	af
      001033 33               [ 6] 4105 	inc	sp
      001034 21 03 1B         [10] 4106 	ld	hl, #0x1b03
      001037 E5               [11] 4107 	push	hl
      001038 CDr00r00         [17] 4108 	call	_WRTVRM
      00103B F1               [10] 4109 	pop	af
      00103C 33               [ 6] 4110 	inc	sp
                                   4111 ;src\/Graphics\Countdown.h:27: WRTVRM(SPRATT + 4, 	y); //96-16);
      00103D DD 7E FA         [19] 4112 	ld	a, -6 (ix)
      001040 F5               [11] 4113 	push	af
      001041 33               [ 6] 4114 	inc	sp
      001042 21 04 1B         [10] 4115 	ld	hl, #0x1b04
      001045 E5               [11] 4116 	push	hl
      001046 CDr00r00         [17] 4117 	call	_WRTVRM
      001049 F1               [10] 4118 	pop	af
      00104A 33               [ 6] 4119 	inc	sp
                                   4120 ;src\/Graphics\Countdown.h:28: WRTVRM(SPRATT + 5, 	x);
      00104B DD 7E F9         [19] 4121 	ld	a, -7 (ix)
      00104E F5               [11] 4122 	push	af
      00104F 33               [ 6] 4123 	inc	sp
      001050 21 05 1B         [10] 4124 	ld	hl, #0x1b05
      001053 E5               [11] 4125 	push	hl
      001054 CDr00r00         [17] 4126 	call	_WRTVRM
      001057 F1               [10] 4127 	pop	af
      001058 33               [ 6] 4128 	inc	sp
                                   4129 ;src\/Graphics\Countdown.h:29: WRTVRM(SPRATT + 6, SPRITE_PATTERN_NUMBER_3_32X32 + 4);
      001059 3E 58            [ 7] 4130 	ld	a, #0x58
      00105B F5               [11] 4131 	push	af
      00105C 33               [ 6] 4132 	inc	sp
      00105D 21 06 1B         [10] 4133 	ld	hl, #0x1b06
      001060 E5               [11] 4134 	push	hl
      001061 CDr00r00         [17] 4135 	call	_WRTVRM
      001064 F1               [10] 4136 	pop	af
      001065 33               [ 6] 4137 	inc	sp
                                   4138 ;src\/Graphics\Countdown.h:30: WRTVRM(SPRATT + 7, 10);
      001066 3E 0A            [ 7] 4139 	ld	a, #0x0a
      001068 F5               [11] 4140 	push	af
      001069 33               [ 6] 4141 	inc	sp
      00106A 21 07 1B         [10] 4142 	ld	hl, #0x1b07
      00106D E5               [11] 4143 	push	hl
      00106E CDr00r00         [17] 4144 	call	_WRTVRM
      001071 F1               [10] 4145 	pop	af
      001072 33               [ 6] 4146 	inc	sp
                                   4147 ;src\/Graphics\Countdown.h:33: WRTVRM(SPRATT + 8, 	192-y-16); //96);
      001073 DD 7E FA         [19] 4148 	ld	a, -6 (ix)
      001076 DD 77 FD         [19] 4149 	ld	-3 (ix), a
      001079 3E B0            [ 7] 4150 	ld	a, #0xb0
      00107B DD 96 FD         [19] 4151 	sub	a, -3 (ix)
      00107E DD 77 FE         [19] 4152 	ld	-2 (ix), a
      001081 F5               [11] 4153 	push	af
      001082 33               [ 6] 4154 	inc	sp
      001083 21 08 1B         [10] 4155 	ld	hl, #0x1b08
      001086 E5               [11] 4156 	push	hl
      001087 CDr00r00         [17] 4157 	call	_WRTVRM
      00108A F1               [10] 4158 	pop	af
      00108B 33               [ 6] 4159 	inc	sp
                                   4160 ;src\/Graphics\Countdown.h:34: WRTVRM(SPRATT + 9, 	256-x-16);
      00108C DD 7E FC         [19] 4161 	ld	a, -4 (ix)
      00108F F5               [11] 4162 	push	af
      001090 33               [ 6] 4163 	inc	sp
      001091 21 09 1B         [10] 4164 	ld	hl, #0x1b09
      001094 E5               [11] 4165 	push	hl
      001095 CDr00r00         [17] 4166 	call	_WRTVRM
      001098 F1               [10] 4167 	pop	af
      001099 33               [ 6] 4168 	inc	sp
                                   4169 ;src\/Graphics\Countdown.h:35: WRTVRM(SPRATT + 10,	SPRITE_PATTERN_NUMBER_3_32X32 + 8);
      00109A 3E 5C            [ 7] 4170 	ld	a, #0x5c
      00109C F5               [11] 4171 	push	af
      00109D 33               [ 6] 4172 	inc	sp
      00109E 21 0A 1B         [10] 4173 	ld	hl, #0x1b0a
      0010A1 E5               [11] 4174 	push	hl
      0010A2 CDr00r00         [17] 4175 	call	_WRTVRM
      0010A5 F1               [10] 4176 	pop	af
      0010A6 33               [ 6] 4177 	inc	sp
                                   4178 ;src\/Graphics\Countdown.h:36: WRTVRM(SPRATT + 11,	10);
      0010A7 3E 0A            [ 7] 4179 	ld	a, #0x0a
      0010A9 F5               [11] 4180 	push	af
      0010AA 33               [ 6] 4181 	inc	sp
      0010AB 21 0B 1B         [10] 4182 	ld	hl, #0x1b0b
      0010AE E5               [11] 4183 	push	hl
      0010AF CDr00r00         [17] 4184 	call	_WRTVRM
      0010B2 F1               [10] 4185 	pop	af
      0010B3 33               [ 6] 4186 	inc	sp
                                   4187 ;src\/Graphics\Countdown.h:39: WRTVRM(SPRATT + 12,	192-y-16); //96);
      0010B4 DD 7E FE         [19] 4188 	ld	a, -2 (ix)
      0010B7 F5               [11] 4189 	push	af
      0010B8 33               [ 6] 4190 	inc	sp
      0010B9 21 0C 1B         [10] 4191 	ld	hl, #0x1b0c
      0010BC E5               [11] 4192 	push	hl
      0010BD CDr00r00         [17] 4193 	call	_WRTVRM
      0010C0 F1               [10] 4194 	pop	af
      0010C1 33               [ 6] 4195 	inc	sp
                                   4196 ;src\/Graphics\Countdown.h:40: WRTVRM(SPRATT + 13,	x);
      0010C2 DD 7E F9         [19] 4197 	ld	a, -7 (ix)
      0010C5 F5               [11] 4198 	push	af
      0010C6 33               [ 6] 4199 	inc	sp
      0010C7 21 0D 1B         [10] 4200 	ld	hl, #0x1b0d
      0010CA E5               [11] 4201 	push	hl
      0010CB CDr00r00         [17] 4202 	call	_WRTVRM
      0010CE F1               [10] 4203 	pop	af
      0010CF 33               [ 6] 4204 	inc	sp
                                   4205 ;src\/Graphics\Countdown.h:41: WRTVRM(SPRATT + 14,	SPRITE_PATTERN_NUMBER_3_32X32 + 12);
      0010D0 3E 60            [ 7] 4206 	ld	a, #0x60
      0010D2 F5               [11] 4207 	push	af
      0010D3 33               [ 6] 4208 	inc	sp
      0010D4 21 0E 1B         [10] 4209 	ld	hl, #0x1b0e
      0010D7 E5               [11] 4210 	push	hl
      0010D8 CDr00r00         [17] 4211 	call	_WRTVRM
      0010DB F1               [10] 4212 	pop	af
      0010DC 33               [ 6] 4213 	inc	sp
                                   4214 ;src\/Graphics\Countdown.h:42: WRTVRM(SPRATT + 15,	10);
      0010DD 3E 0A            [ 7] 4215 	ld	a, #0x0a
      0010DF F5               [11] 4216 	push	af
      0010E0 33               [ 6] 4217 	inc	sp
      0010E1 21 0F 1B         [10] 4218 	ld	hl, #0x1b0f
      0010E4 E5               [11] 4219 	push	hl
      0010E5 CDr00r00         [17] 4220 	call	_WRTVRM
      0010E8 F1               [10] 4221 	pop	af
      0010E9 33               [ 6] 4222 	inc	sp
                                   4223 ;src\/Graphics\Countdown.h:44: if(x < 128) x += 4;
      0010EA DD 7E F9         [19] 4224 	ld	a, -7 (ix)
      0010ED D6 80            [ 7] 4225 	sub	a, #0x80
      0010EF 30 08            [12] 4226 	jr	NC, 00105$
      0010F1 DD 7E FB         [19] 4227 	ld	a, -5 (ix)
      0010F4 C6 04            [ 7] 4228 	add	a, #0x04
      0010F6 DD 77 F9         [19] 4229 	ld	-7 (ix), a
      0010F9                       4230 00105$:
                                   4231 ;src\/Graphics\Countdown.h:45: if(y < 80) y += 4;
      0010F9 DD 7E FA         [19] 4232 	ld	a, -6 (ix)
      0010FC D6 50            [ 7] 4233 	sub	a, #0x50
      0010FE D2rE0r0F         [10] 4234 	jp	NC, 00108$
      001101 DD 7E FD         [19] 4235 	ld	a, -3 (ix)
      001104 C6 04            [ 7] 4236 	add	a, #0x04
      001106 DD 77 FA         [19] 4237 	ld	-6 (ix), a
      001109 C3rE0r0F         [10] 4238 	jp	00108$
                                   4239 ;src\/Graphics\Countdown.h:49: while(1) {}
      00110C                       4240 00112$:
                                   4241 ;src\/Graphics\Countdown.h:50: }
      00110C 18 FE            [12] 4242 	jr	00112$
                                   4243 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   4244 ;	---------------------------------
                                   4245 ; Function DrawChar
                                   4246 ; ---------------------------------
      00110E                       4247 _DrawChar::
      00110E DD E5            [15] 4248 	push	ix
      001110 DD 21 00 00      [14] 4249 	ld	ix,#0
      001114 DD 39            [15] 4250 	add	ix,sp
                                   4251 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      001116 DD 6E 06         [19] 4252 	ld	l, 6 (ix)
      001119 26 00            [ 7] 4253 	ld	h, #0x00
      00111B 29               [11] 4254 	add	hl, hl
      00111C 29               [11] 4255 	add	hl, hl
      00111D 29               [11] 4256 	add	hl, hl
      00111E 29               [11] 4257 	add	hl, hl
      00111F 29               [11] 4258 	add	hl, hl
      001120 01 00 18         [10] 4259 	ld	bc, #0x1800
      001123 09               [11] 4260 	add	hl, bc
      001124 DD 4E 05         [19] 4261 	ld	c, 5 (ix)
      001127 06 00            [ 7] 4262 	ld	b, #0x00
      001129 09               [11] 4263 	add	hl, bc
      00112A DD 7E 04         [19] 4264 	ld	a, 4 (ix)
      00112D F5               [11] 4265 	push	af
      00112E 33               [ 6] 4266 	inc	sp
      00112F E5               [11] 4267 	push	hl
      001130 CDr00r00         [17] 4268 	call	_WRTVRM
      001133 F1               [10] 4269 	pop	af
      001134 33               [ 6] 4270 	inc	sp
                                   4271 ;src\/Graphics\Graphics.h:3: }
      001135 DD E1            [14] 4272 	pop	ix
      001137 C9               [10] 4273 	ret
                                   4274 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   4275 ;	---------------------------------
                                   4276 ; Function DrawString
                                   4277 ; ---------------------------------
      001138                       4278 _DrawString::
      001138 DD E5            [15] 4279 	push	ix
      00113A DD 21 00 00      [14] 4280 	ld	ix,#0
      00113E DD 39            [15] 4281 	add	ix,sp
                                   4282 ;src\/Graphics\Graphics.h:6: while (*str) {
      001140 DD 6E 06         [19] 4283 	ld	l, 6 (ix)
      001143 DD 4E 04         [19] 4284 	ld	c, 4 (ix)
      001146 DD 46 05         [19] 4285 	ld	b, 5 (ix)
      001149                       4286 00101$:
      001149 0A               [ 7] 4287 	ld	a, (bc)
      00114A B7               [ 4] 4288 	or	a, a
      00114B 28 1A            [12] 4289 	jr	Z, 00104$
                                   4290 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      00114D 55               [ 4] 4291 	ld	d, l
      00114E 2C               [ 4] 4292 	inc	l
      00114F DD 75 06         [19] 4293 	ld	6 (ix), l
      001152 03               [ 6] 4294 	inc	bc
      001153 C6 0F            [ 7] 4295 	add	a, #0x0f
      001155 E5               [11] 4296 	push	hl
      001156 C5               [11] 4297 	push	bc
      001157 DD 66 07         [19] 4298 	ld	h, 7 (ix)
      00115A 6A               [ 4] 4299 	ld	l, d
      00115B E5               [11] 4300 	push	hl
      00115C F5               [11] 4301 	push	af
      00115D 33               [ 6] 4302 	inc	sp
      00115E CDr0Er11         [17] 4303 	call	_DrawChar
      001161 F1               [10] 4304 	pop	af
      001162 33               [ 6] 4305 	inc	sp
      001163 C1               [10] 4306 	pop	bc
      001164 E1               [10] 4307 	pop	hl
      001165 18 E2            [12] 4308 	jr	00101$
      001167                       4309 00104$:
                                   4310 ;src\/Graphics\Graphics.h:9: }
      001167 DD E1            [14] 4311 	pop	ix
      001169 C9               [10] 4312 	ret
                                   4313 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   4314 ;	---------------------------------
                                   4315 ; Function DrawNumber
                                   4316 ; ---------------------------------
      00116A                       4317 _DrawNumber::
      00116A DD E5            [15] 4318 	push	ix
      00116C DD 21 00 00      [14] 4319 	ld	ix,#0
      001170 DD 39            [15] 4320 	add	ix,sp
      001172 21 FA FF         [10] 4321 	ld	hl, #-6
      001175 39               [11] 4322 	add	hl, sp
      001176 F9               [ 6] 4323 	ld	sp, hl
                                   4324 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      001177 DD 36 FA 01      [19] 4325 	ld	-6 (ix), #0x01
                                   4326 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      00117B DD 66 07         [19] 4327 	ld	h, 7 (ix)
      00117E DD 6E 06         [19] 4328 	ld	l, 6 (ix)
      001181 E5               [11] 4329 	push	hl
      001182 21r1Er12         [10] 4330 	ld	hl, #___str_0
      001185 E5               [11] 4331 	push	hl
      001186 CDr38r11         [17] 4332 	call	_DrawString
      001189 F1               [10] 4333 	pop	af
      00118A F1               [10] 4334 	pop	af
                                   4335 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00118B DD 7E 06         [19] 4336 	ld	a, 6 (ix)
      00118E DD 77 FF         [19] 4337 	ld	-1 (ix), a
      001191 1E 06            [ 7] 4338 	ld	e, #0x06
      001193                       4339 00109$:
      001193 7B               [ 4] 4340 	ld	a, e
      001194 B7               [ 4] 4341 	or	a, a
      001195 CAr19r12         [10] 4342 	jp	Z, 00111$
                                   4343 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      001198 7B               [ 4] 4344 	ld	a, e
      001199 3D               [ 4] 4345 	dec	a
      00119A D5               [11] 4346 	push	de
      00119B 57               [ 4] 4347 	ld	d,a
      00119C 1E 0A            [ 7] 4348 	ld	e,#0x0a
      00119E D5               [11] 4349 	push	de
      00119F CDr1Dr00         [17] 4350 	call	_Power
      0011A2 F1               [10] 4351 	pop	af
      0011A3 D1               [10] 4352 	pop	de
      0011A4 DD 75 FB         [19] 4353 	ld	-5 (ix), l
      0011A7 DD 74 FC         [19] 4354 	ld	-4 (ix), h
                                   4355 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      0011AA D5               [11] 4356 	push	de
      0011AB DD 6E FB         [19] 4357 	ld	l, -5 (ix)
      0011AE DD 66 FC         [19] 4358 	ld	h, -4 (ix)
      0011B1 E5               [11] 4359 	push	hl
      0011B2 DD 6E 04         [19] 4360 	ld	l, 4 (ix)
      0011B5 DD 66 05         [19] 4361 	ld	h, 5 (ix)
      0011B8 E5               [11] 4362 	push	hl
      0011B9 CDr00r00         [17] 4363 	call	__divuint
      0011BC F1               [10] 4364 	pop	af
      0011BD F1               [10] 4365 	pop	af
      0011BE DD 75 FD         [19] 4366 	ld	-3 (ix), l
      0011C1 DD 74 FE         [19] 4367 	ld	-2 (ix), h
      0011C4 D1               [10] 4368 	pop	de
      0011C5 DD 7E FA         [19] 4369 	ld	a, -6 (ix)
      0011C8 B7               [ 4] 4370 	or	a, a
      0011C9 28 0C            [12] 4371 	jr	Z, 00102$
      0011CB DD 7E FE         [19] 4372 	ld	a, -2 (ix)
      0011CE DD B6 FD         [19] 4373 	or	a, -3 (ix)
      0011D1 28 04            [12] 4374 	jr	Z, 00102$
      0011D3 DD 36 FA 00      [19] 4375 	ld	-6 (ix), #0
      0011D7                       4376 00102$:
                                   4377 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      0011D7 DD 7E FA         [19] 4378 	ld	a, -6 (ix)
      0011DA B7               [ 4] 4379 	or	a, a
      0011DB 28 04            [12] 4380 	jr	Z, 00104$
      0011DD 7B               [ 4] 4381 	ld	a, e
      0011DE 3D               [ 4] 4382 	dec	a
      0011DF 20 31            [12] 4383 	jr	NZ, 00105$
      0011E1                       4384 00104$:
                                   4385 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      0011E1 DD 7E FD         [19] 4386 	ld	a, -3 (ix)
      0011E4 C6 3F            [ 7] 4387 	add	a, #0x3f
      0011E6 D5               [11] 4388 	push	de
      0011E7 DD 66 07         [19] 4389 	ld	h, 7 (ix)
      0011EA E5               [11] 4390 	push	hl
      0011EB 33               [ 6] 4391 	inc	sp
      0011EC DD 66 FF         [19] 4392 	ld	h, -1 (ix)
      0011EF E5               [11] 4393 	push	hl
      0011F0 33               [ 6] 4394 	inc	sp
      0011F1 F5               [11] 4395 	push	af
      0011F2 33               [ 6] 4396 	inc	sp
      0011F3 CDr0Er11         [17] 4397 	call	_DrawChar
      0011F6 F1               [10] 4398 	pop	af
      0011F7 33               [ 6] 4399 	inc	sp
      0011F8 DD 6E FB         [19] 4400 	ld	l, -5 (ix)
      0011FB DD 66 FC         [19] 4401 	ld	h, -4 (ix)
      0011FE E5               [11] 4402 	push	hl
      0011FF DD 6E 04         [19] 4403 	ld	l, 4 (ix)
      001202 DD 66 05         [19] 4404 	ld	h, 5 (ix)
      001205 E5               [11] 4405 	push	hl
      001206 CDr00r00         [17] 4406 	call	__moduint
      001209 F1               [10] 4407 	pop	af
      00120A F1               [10] 4408 	pop	af
      00120B D1               [10] 4409 	pop	de
      00120C DD 75 04         [19] 4410 	ld	4 (ix), l
      00120F DD 74 05         [19] 4411 	ld	5 (ix), h
      001212                       4412 00105$:
                                   4413 ;src\/Graphics\Graphics.h:29: col++;
      001212 DD 34 FF         [23] 4414 	inc	-1 (ix)
                                   4415 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      001215 1D               [ 4] 4416 	dec	e
      001216 C3r93r11         [10] 4417 	jp	00109$
      001219                       4418 00111$:
                                   4419 ;src\/Graphics\Graphics.h:34: }
      001219 DD F9            [10] 4420 	ld	sp, ix
      00121B DD E1            [14] 4421 	pop	ix
      00121D C9               [10] 4422 	ret
      00121E                       4423 ___str_0:
      00121E 20 20 20 20 20 20     4424 	.ascii "      "
      001224 00                    4425 	.db 0x00
                                   4426 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   4427 ;	---------------------------------
                                   4428 ; Function DrawColumn
                                   4429 ; ---------------------------------
      001225                       4430 _DrawColumn::
      001225 DD E5            [15] 4431 	push	ix
      001227 DD 21 00 00      [14] 4432 	ld	ix,#0
      00122B DD 39            [15] 4433 	add	ix,sp
      00122D 21 F9 FF         [10] 4434 	ld	hl, #-7
      001230 39               [11] 4435 	add	hl, sp
      001231 F9               [ 6] 4436 	ld	sp, hl
                                   4437 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      001232 DD 4E 04         [19] 4438 	ld	c, 4 (ix)
      001235 06 00            [ 7] 4439 	ld	b, #0x00
      001237 21 00 18         [10] 4440 	ld	hl, #0x1800
      00123A 09               [11] 4441 	add	hl, bc
      00123B C5               [11] 4442 	push	bc
      00123C 3E 18            [ 7] 4443 	ld	a, #0x18
      00123E F5               [11] 4444 	push	af
      00123F 33               [ 6] 4445 	inc	sp
      001240 E5               [11] 4446 	push	hl
      001241 CDr00r00         [17] 4447 	call	_WRTVRM
      001244 F1               [10] 4448 	pop	af
      001245 33               [ 6] 4449 	inc	sp
      001246 C1               [10] 4450 	pop	bc
                                   4451 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      001247 21 01 18         [10] 4452 	ld	hl, #0x1801
      00124A 09               [11] 4453 	add	hl, bc
      00124B C5               [11] 4454 	push	bc
      00124C 3E 19            [ 7] 4455 	ld	a, #0x19
      00124E F5               [11] 4456 	push	af
      00124F 33               [ 6] 4457 	inc	sp
      001250 E5               [11] 4458 	push	hl
      001251 CDr00r00         [17] 4459 	call	_WRTVRM
      001254 F1               [10] 4460 	pop	af
      001255 33               [ 6] 4461 	inc	sp
      001256 C1               [10] 4462 	pop	bc
                                   4463 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      001257 21 02 18         [10] 4464 	ld	hl, #0x1802
      00125A 09               [11] 4465 	add	hl, bc
      00125B C5               [11] 4466 	push	bc
      00125C 3E 1A            [ 7] 4467 	ld	a, #0x1a
      00125E F5               [11] 4468 	push	af
      00125F 33               [ 6] 4469 	inc	sp
      001260 E5               [11] 4470 	push	hl
      001261 CDr00r00         [17] 4471 	call	_WRTVRM
      001264 F1               [10] 4472 	pop	af
      001265 33               [ 6] 4473 	inc	sp
      001266 C1               [10] 4474 	pop	bc
                                   4475 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      001267 21 20 18         [10] 4476 	ld	hl, #0x1820
      00126A 09               [11] 4477 	add	hl, bc
      00126B C5               [11] 4478 	push	bc
      00126C 3E 1B            [ 7] 4479 	ld	a, #0x1b
      00126E F5               [11] 4480 	push	af
      00126F 33               [ 6] 4481 	inc	sp
      001270 E5               [11] 4482 	push	hl
      001271 CDr00r00         [17] 4483 	call	_WRTVRM
      001274 F1               [10] 4484 	pop	af
      001275 33               [ 6] 4485 	inc	sp
      001276 C1               [10] 4486 	pop	bc
                                   4487 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      001277 21 21 18         [10] 4488 	ld	hl, #0x1821
      00127A 09               [11] 4489 	add	hl, bc
      00127B C5               [11] 4490 	push	bc
      00127C 3E 1C            [ 7] 4491 	ld	a, #0x1c
      00127E F5               [11] 4492 	push	af
      00127F 33               [ 6] 4493 	inc	sp
      001280 E5               [11] 4494 	push	hl
      001281 CDr00r00         [17] 4495 	call	_WRTVRM
      001284 F1               [10] 4496 	pop	af
      001285 33               [ 6] 4497 	inc	sp
      001286 C1               [10] 4498 	pop	bc
                                   4499 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      001287 21 22 18         [10] 4500 	ld	hl, #0x1822
      00128A 09               [11] 4501 	add	hl, bc
      00128B C5               [11] 4502 	push	bc
      00128C 3E 1D            [ 7] 4503 	ld	a, #0x1d
      00128E F5               [11] 4504 	push	af
      00128F 33               [ 6] 4505 	inc	sp
      001290 E5               [11] 4506 	push	hl
      001291 CDr00r00         [17] 4507 	call	_WRTVRM
      001294 F1               [10] 4508 	pop	af
      001295 33               [ 6] 4509 	inc	sp
      001296 C1               [10] 4510 	pop	bc
                                   4511 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001297 21 40 18         [10] 4512 	ld	hl, #0x1840
      00129A 09               [11] 4513 	add	hl, bc
      00129B E3               [19] 4514 	ex	(sp), hl
      00129C 21 41 18         [10] 4515 	ld	hl, #0x1841
      00129F 09               [11] 4516 	add	hl, bc
      0012A0 DD 75 FB         [19] 4517 	ld	-5 (ix), l
      0012A3 DD 74 FC         [19] 4518 	ld	-4 (ix), h
      0012A6 21 42 18         [10] 4519 	ld	hl, #0x1842
      0012A9 09               [11] 4520 	add	hl, bc
      0012AA DD 75 FD         [19] 4521 	ld	-3 (ix), l
      0012AD DD 74 FE         [19] 4522 	ld	-2 (ix), h
      0012B0 DD 36 FF 00      [19] 4523 	ld	-1 (ix), #0
      0012B4                       4524 00103$:
      0012B4 DD 7E FF         [19] 4525 	ld	a, -1 (ix)
      0012B7 D6 14            [ 7] 4526 	sub	a, #0x14
      0012B9 30 4A            [12] 4527 	jr	NC, 00101$
                                   4528 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      0012BB DD 5E FF         [19] 4529 	ld	e, -1 (ix)
      0012BE 16 00            [ 7] 4530 	ld	d, #0x00
      0012C0 EB               [ 4] 4531 	ex	de, hl
      0012C1 29               [11] 4532 	add	hl, hl
      0012C2 29               [11] 4533 	add	hl, hl
      0012C3 29               [11] 4534 	add	hl, hl
      0012C4 29               [11] 4535 	add	hl, hl
      0012C5 29               [11] 4536 	add	hl, hl
      0012C6 EB               [ 4] 4537 	ex	de, hl
      0012C7 E1               [10] 4538 	pop	hl
      0012C8 E5               [11] 4539 	push	hl
      0012C9 19               [11] 4540 	add	hl, de
      0012CA C5               [11] 4541 	push	bc
      0012CB D5               [11] 4542 	push	de
      0012CC 3E 1E            [ 7] 4543 	ld	a, #0x1e
      0012CE F5               [11] 4544 	push	af
      0012CF 33               [ 6] 4545 	inc	sp
      0012D0 E5               [11] 4546 	push	hl
      0012D1 CDr00r00         [17] 4547 	call	_WRTVRM
      0012D4 F1               [10] 4548 	pop	af
      0012D5 33               [ 6] 4549 	inc	sp
      0012D6 D1               [10] 4550 	pop	de
      0012D7 C1               [10] 4551 	pop	bc
                                   4552 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      0012D8 DD 6E FB         [19] 4553 	ld	l, -5 (ix)
      0012DB DD 66 FC         [19] 4554 	ld	h, -4 (ix)
      0012DE 19               [11] 4555 	add	hl, de
      0012DF C5               [11] 4556 	push	bc
      0012E0 D5               [11] 4557 	push	de
      0012E1 3E 1F            [ 7] 4558 	ld	a, #0x1f
      0012E3 F5               [11] 4559 	push	af
      0012E4 33               [ 6] 4560 	inc	sp
      0012E5 E5               [11] 4561 	push	hl
      0012E6 CDr00r00         [17] 4562 	call	_WRTVRM
      0012E9 F1               [10] 4563 	pop	af
      0012EA 33               [ 6] 4564 	inc	sp
      0012EB D1               [10] 4565 	pop	de
      0012EC C1               [10] 4566 	pop	bc
                                   4567 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      0012ED DD 6E FD         [19] 4568 	ld	l, -3 (ix)
      0012F0 DD 66 FE         [19] 4569 	ld	h, -2 (ix)
      0012F3 19               [11] 4570 	add	hl, de
      0012F4 C5               [11] 4571 	push	bc
      0012F5 3E 20            [ 7] 4572 	ld	a, #0x20
      0012F7 F5               [11] 4573 	push	af
      0012F8 33               [ 6] 4574 	inc	sp
      0012F9 E5               [11] 4575 	push	hl
      0012FA CDr00r00         [17] 4576 	call	_WRTVRM
      0012FD F1               [10] 4577 	pop	af
      0012FE 33               [ 6] 4578 	inc	sp
      0012FF C1               [10] 4579 	pop	bc
                                   4580 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001300 DD 34 FF         [23] 4581 	inc	-1 (ix)
      001303 18 AF            [12] 4582 	jr	00103$
      001305                       4583 00101$:
                                   4584 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      001305 21 00 19         [10] 4585 	ld	hl, #0x1900
      001308 09               [11] 4586 	add	hl, bc
      001309 C5               [11] 4587 	push	bc
      00130A 3E 21            [ 7] 4588 	ld	a, #0x21
      00130C F5               [11] 4589 	push	af
      00130D 33               [ 6] 4590 	inc	sp
      00130E E5               [11] 4591 	push	hl
      00130F CDr00r00         [17] 4592 	call	_WRTVRM
      001312 F1               [10] 4593 	pop	af
      001313 33               [ 6] 4594 	inc	sp
      001314 C1               [10] 4595 	pop	bc
                                   4596 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      001315 21 01 19         [10] 4597 	ld	hl, #0x1901
      001318 09               [11] 4598 	add	hl, bc
      001319 C5               [11] 4599 	push	bc
      00131A 3E 22            [ 7] 4600 	ld	a, #0x22
      00131C F5               [11] 4601 	push	af
      00131D 33               [ 6] 4602 	inc	sp
      00131E E5               [11] 4603 	push	hl
      00131F CDr00r00         [17] 4604 	call	_WRTVRM
      001322 F1               [10] 4605 	pop	af
      001323 33               [ 6] 4606 	inc	sp
      001324 C1               [10] 4607 	pop	bc
                                   4608 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      001325 21 02 19         [10] 4609 	ld	hl, #0x1902
      001328 09               [11] 4610 	add	hl, bc
      001329 C5               [11] 4611 	push	bc
      00132A 3E 23            [ 7] 4612 	ld	a, #0x23
      00132C F5               [11] 4613 	push	af
      00132D 33               [ 6] 4614 	inc	sp
      00132E E5               [11] 4615 	push	hl
      00132F CDr00r00         [17] 4616 	call	_WRTVRM
      001332 F1               [10] 4617 	pop	af
      001333 33               [ 6] 4618 	inc	sp
      001334 C1               [10] 4619 	pop	bc
                                   4620 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      001335 21 00 1A         [10] 4621 	ld	hl, #0x1a00
      001338 09               [11] 4622 	add	hl, bc
      001339 C5               [11] 4623 	push	bc
      00133A 3E 21            [ 7] 4624 	ld	a, #0x21
      00133C F5               [11] 4625 	push	af
      00133D 33               [ 6] 4626 	inc	sp
      00133E E5               [11] 4627 	push	hl
      00133F CDr00r00         [17] 4628 	call	_WRTVRM
      001342 F1               [10] 4629 	pop	af
      001343 33               [ 6] 4630 	inc	sp
      001344 C1               [10] 4631 	pop	bc
                                   4632 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      001345 21 01 1A         [10] 4633 	ld	hl, #0x1a01
      001348 09               [11] 4634 	add	hl, bc
      001349 C5               [11] 4635 	push	bc
      00134A 3E 22            [ 7] 4636 	ld	a, #0x22
      00134C F5               [11] 4637 	push	af
      00134D 33               [ 6] 4638 	inc	sp
      00134E E5               [11] 4639 	push	hl
      00134F CDr00r00         [17] 4640 	call	_WRTVRM
      001352 F1               [10] 4641 	pop	af
      001353 33               [ 6] 4642 	inc	sp
      001354 C1               [10] 4643 	pop	bc
                                   4644 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      001355 21 02 1A         [10] 4645 	ld	hl, #0x1a02
      001358 09               [11] 4646 	add	hl, bc
      001359 C5               [11] 4647 	push	bc
      00135A 3E 23            [ 7] 4648 	ld	a, #0x23
      00135C F5               [11] 4649 	push	af
      00135D 33               [ 6] 4650 	inc	sp
      00135E E5               [11] 4651 	push	hl
      00135F CDr00r00         [17] 4652 	call	_WRTVRM
      001362 F1               [10] 4653 	pop	af
      001363 33               [ 6] 4654 	inc	sp
      001364 C1               [10] 4655 	pop	bc
                                   4656 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      001365 21 C0 1A         [10] 4657 	ld	hl, #0x1ac0
      001368 09               [11] 4658 	add	hl, bc
      001369 C5               [11] 4659 	push	bc
      00136A 3E 24            [ 7] 4660 	ld	a, #0x24
      00136C F5               [11] 4661 	push	af
      00136D 33               [ 6] 4662 	inc	sp
      00136E E5               [11] 4663 	push	hl
      00136F CDr00r00         [17] 4664 	call	_WRTVRM
      001372 F1               [10] 4665 	pop	af
      001373 33               [ 6] 4666 	inc	sp
      001374 C1               [10] 4667 	pop	bc
                                   4668 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      001375 21 C1 1A         [10] 4669 	ld	hl, #0x1ac1
      001378 09               [11] 4670 	add	hl, bc
      001379 C5               [11] 4671 	push	bc
      00137A 3E 25            [ 7] 4672 	ld	a, #0x25
      00137C F5               [11] 4673 	push	af
      00137D 33               [ 6] 4674 	inc	sp
      00137E E5               [11] 4675 	push	hl
      00137F CDr00r00         [17] 4676 	call	_WRTVRM
      001382 F1               [10] 4677 	pop	af
      001383 33               [ 6] 4678 	inc	sp
      001384 C1               [10] 4679 	pop	bc
                                   4680 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      001385 21 C2 1A         [10] 4681 	ld	hl, #0x1ac2
      001388 09               [11] 4682 	add	hl, bc
      001389 C5               [11] 4683 	push	bc
      00138A 3E 26            [ 7] 4684 	ld	a, #0x26
      00138C F5               [11] 4685 	push	af
      00138D 33               [ 6] 4686 	inc	sp
      00138E E5               [11] 4687 	push	hl
      00138F CDr00r00         [17] 4688 	call	_WRTVRM
      001392 F1               [10] 4689 	pop	af
      001393 33               [ 6] 4690 	inc	sp
      001394 C1               [10] 4691 	pop	bc
                                   4692 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      001395 21 E0 1A         [10] 4693 	ld	hl, #0x1ae0
      001398 09               [11] 4694 	add	hl, bc
      001399 C5               [11] 4695 	push	bc
      00139A 3E 27            [ 7] 4696 	ld	a, #0x27
      00139C F5               [11] 4697 	push	af
      00139D 33               [ 6] 4698 	inc	sp
      00139E E5               [11] 4699 	push	hl
      00139F CDr00r00         [17] 4700 	call	_WRTVRM
      0013A2 F1               [10] 4701 	pop	af
      0013A3 33               [ 6] 4702 	inc	sp
      0013A4 C1               [10] 4703 	pop	bc
                                   4704 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      0013A5 21 E1 1A         [10] 4705 	ld	hl, #0x1ae1
      0013A8 09               [11] 4706 	add	hl, bc
      0013A9 C5               [11] 4707 	push	bc
      0013AA 3E 28            [ 7] 4708 	ld	a, #0x28
      0013AC F5               [11] 4709 	push	af
      0013AD 33               [ 6] 4710 	inc	sp
      0013AE E5               [11] 4711 	push	hl
      0013AF CDr00r00         [17] 4712 	call	_WRTVRM
      0013B2 F1               [10] 4713 	pop	af
      0013B3 33               [ 6] 4714 	inc	sp
      0013B4 C1               [10] 4715 	pop	bc
                                   4716 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      0013B5 21 E2 1A         [10] 4717 	ld	hl, #0x1ae2
      0013B8 09               [11] 4718 	add	hl, bc
      0013B9 3E 29            [ 7] 4719 	ld	a, #0x29
      0013BB F5               [11] 4720 	push	af
      0013BC 33               [ 6] 4721 	inc	sp
      0013BD E5               [11] 4722 	push	hl
      0013BE CDr00r00         [17] 4723 	call	_WRTVRM
                                   4724 ;src\/Graphics\Graphics.h:64: }
      0013C1 DD F9            [10] 4725 	ld	sp,ix
      0013C3 DD E1            [14] 4726 	pop	ix
      0013C5 C9               [10] 4727 	ret
                                   4728 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   4729 ;	---------------------------------
                                   4730 ; Function GetNextPieceColors
                                   4731 ; ---------------------------------
      0013C6                       4732 _GetNextPieceColors::
                                   4733 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      0013C6 FD 21 02 00      [14] 4734 	ld	iy, #2
      0013CA FD 39            [15] 4735 	add	iy, sp
      0013CC FD 7E 00         [19] 4736 	ld	a, 0 (iy)
      0013CF D6 04            [ 7] 4737 	sub	a, #0x04
      0013D1 28 22            [12] 4738 	jr	Z, 00102$
      0013D3 FD 7E 00         [19] 4739 	ld	a, 0 (iy)
      0013D6 D6 08            [ 7] 4740 	sub	a, #0x08
      0013D8 28 26            [12] 4741 	jr	Z, 00103$
      0013DA FD 7E 00         [19] 4742 	ld	a, 0 (iy)
      0013DD D6 0C            [ 7] 4743 	sub	a, #0x0c
      0013DF 28 09            [12] 4744 	jr	Z, 00101$
      0013E1 FD 7E 00         [19] 4745 	ld	a, 0 (iy)
      0013E4 D6 14            [ 7] 4746 	sub	a, #0x14
      0013E6 28 23            [12] 4747 	jr	Z, 00104$
      0013E8 18 2C            [12] 4748 	jr	00105$
                                   4749 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      0013EA                       4750 00101$:
                                   4751 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      0013EA 3E 07            [ 7] 4752 	ld	a, #0x07
      0013EC 32r9Br00         [13] 4753 	ld	(#_nextPieceColor_Front), a
                                   4754 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      0013EF 3E 04            [ 7] 4755 	ld	a, #0x04
      0013F1 32r9Cr00         [13] 4756 	ld	(#_nextPieceColor_Back), a
                                   4757 ;src\/Graphics\Graphics.h:73: break;
      0013F4 C9               [10] 4758 	ret
                                   4759 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      0013F5                       4760 00102$:
                                   4761 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      0013F5 3E 03            [ 7] 4762 	ld	a, #0x03
      0013F7 32r9Br00         [13] 4763 	ld	(#_nextPieceColor_Front), a
                                   4764 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      0013FA 3E 0C            [ 7] 4765 	ld	a, #0x0c
      0013FC 32r9Cr00         [13] 4766 	ld	(#_nextPieceColor_Back), a
                                   4767 ;src\/Graphics\Graphics.h:77: break;
      0013FF C9               [10] 4768 	ret
                                   4769 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      001400                       4770 00103$:
                                   4771 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      001400 3E 09            [ 7] 4772 	ld	a, #0x09
      001402 32r9Br00         [13] 4773 	ld	(#_nextPieceColor_Front), a
                                   4774 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      001405 3E 06            [ 7] 4775 	ld	a, #0x06
      001407 32r9Cr00         [13] 4776 	ld	(#_nextPieceColor_Back), a
                                   4777 ;src\/Graphics\Graphics.h:81: break;
      00140A C9               [10] 4778 	ret
                                   4779 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      00140B                       4780 00104$:
                                   4781 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      00140B 3E 0B            [ 7] 4782 	ld	a, #0x0b
      00140D 32r9Br00         [13] 4783 	ld	(#_nextPieceColor_Front), a
                                   4784 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      001410 3E 0A            [ 7] 4785 	ld	a, #0x0a
      001412 32r9Cr00         [13] 4786 	ld	(#_nextPieceColor_Back), a
                                   4787 ;src\/Graphics\Graphics.h:85: break;
      001415 C9               [10] 4788 	ret
                                   4789 ;src\/Graphics\Graphics.h:86: default:
      001416                       4790 00105$:
                                   4791 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      001416 3E 0F            [ 7] 4792 	ld	a, #0x0f
      001418 32r9Br00         [13] 4793 	ld	(#_nextPieceColor_Front), a
                                   4794 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      00141B 3E 0D            [ 7] 4795 	ld	a, #0x0d
      00141D 32r9Cr00         [13] 4796 	ld	(#_nextPieceColor_Back), a
                                   4797 ;src\/Graphics\Graphics.h:89: }  
                                   4798 ;src\/Graphics\Graphics.h:90: }
      001420 C9               [10] 4799 	ret
                                   4800 ;src\/Graphics\Graphics.h:92: void DrawNextPiece() {
                                   4801 ;	---------------------------------
                                   4802 ; Function DrawNextPiece
                                   4803 ; ---------------------------------
      001421                       4804 _DrawNextPiece::
                                   4805 ;src\/Graphics\Graphics.h:94: GetNextPieceColors(nextTopPiece);
      001421 3Ar93r00         [13] 4806 	ld	a,(#_nextTopPiece + 0)
      001424 F5               [11] 4807 	push	af
      001425 33               [ 6] 4808 	inc	sp
      001426 CDrC6r13         [17] 4809 	call	_GetNextPieceColors
      001429 33               [ 6] 4810 	inc	sp
                                   4811 ;src\/Graphics\Graphics.h:95: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      00142A 3E 20            [ 7] 4812 	ld	a, #0x20
      00142C F5               [11] 4813 	push	af
      00142D 33               [ 6] 4814 	inc	sp
      00142E 21 28 1B         [10] 4815 	ld	hl, #0x1b28
      001431 E5               [11] 4816 	push	hl
      001432 CDr00r00         [17] 4817 	call	_WRTVRM
      001435 F1               [10] 4818 	pop	af
      001436 33               [ 6] 4819 	inc	sp
                                   4820 ;src\/Graphics\Graphics.h:96: WRTVRM(SPRATT + 41, 	(4 * 8)-4);
      001437 3E 1C            [ 7] 4821 	ld	a, #0x1c
      001439 F5               [11] 4822 	push	af
      00143A 33               [ 6] 4823 	inc	sp
      00143B 21 29 1B         [10] 4824 	ld	hl, #0x1b29
      00143E E5               [11] 4825 	push	hl
      00143F CDr00r00         [17] 4826 	call	_WRTVRM
      001442 F1               [10] 4827 	pop	af
      001443 33               [ 6] 4828 	inc	sp
                                   4829 ;src\/Graphics\Graphics.h:97: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      001444 3E 4C            [ 7] 4830 	ld	a, #0x4c
      001446 F5               [11] 4831 	push	af
      001447 33               [ 6] 4832 	inc	sp
      001448 21 2A 1B         [10] 4833 	ld	hl, #0x1b2a
      00144B E5               [11] 4834 	push	hl
      00144C CDr00r00         [17] 4835 	call	_WRTVRM
      00144F F1               [10] 4836 	pop	af
      001450 33               [ 6] 4837 	inc	sp
                                   4838 ;src\/Graphics\Graphics.h:98: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      001451 3Ar9Br00         [13] 4839 	ld	a,(#_nextPieceColor_Front + 0)
      001454 F5               [11] 4840 	push	af
      001455 33               [ 6] 4841 	inc	sp
      001456 21 2B 1B         [10] 4842 	ld	hl, #0x1b2b
      001459 E5               [11] 4843 	push	hl
      00145A CDr00r00         [17] 4844 	call	_WRTVRM
      00145D F1               [10] 4845 	pop	af
      00145E 33               [ 6] 4846 	inc	sp
                                   4847 ;src\/Graphics\Graphics.h:99: WRTVRM(SPRATT + 44, 	(4 * 8));
      00145F 3E 20            [ 7] 4848 	ld	a, #0x20
      001461 F5               [11] 4849 	push	af
      001462 33               [ 6] 4850 	inc	sp
      001463 21 2C 1B         [10] 4851 	ld	hl, #0x1b2c
      001466 E5               [11] 4852 	push	hl
      001467 CDr00r00         [17] 4853 	call	_WRTVRM
      00146A F1               [10] 4854 	pop	af
      00146B 33               [ 6] 4855 	inc	sp
                                   4856 ;src\/Graphics\Graphics.h:100: WRTVRM(SPRATT + 45, 	(4 * 8)-4);
      00146C 3E 1C            [ 7] 4857 	ld	a, #0x1c
      00146E F5               [11] 4858 	push	af
      00146F 33               [ 6] 4859 	inc	sp
      001470 21 2D 1B         [10] 4860 	ld	hl, #0x1b2d
      001473 E5               [11] 4861 	push	hl
      001474 CDr00r00         [17] 4862 	call	_WRTVRM
      001477 F1               [10] 4863 	pop	af
      001478 33               [ 6] 4864 	inc	sp
                                   4865 ;src\/Graphics\Graphics.h:101: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001479 3E 50            [ 7] 4866 	ld	a, #0x50
      00147B F5               [11] 4867 	push	af
      00147C 33               [ 6] 4868 	inc	sp
      00147D 21 2E 1B         [10] 4869 	ld	hl, #0x1b2e
      001480 E5               [11] 4870 	push	hl
      001481 CDr00r00         [17] 4871 	call	_WRTVRM
      001484 F1               [10] 4872 	pop	af
      001485 33               [ 6] 4873 	inc	sp
                                   4874 ;src\/Graphics\Graphics.h:102: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      001486 3Ar9Cr00         [13] 4875 	ld	a,(#_nextPieceColor_Back + 0)
      001489 F5               [11] 4876 	push	af
      00148A 33               [ 6] 4877 	inc	sp
      00148B 21 2F 1B         [10] 4878 	ld	hl, #0x1b2f
      00148E E5               [11] 4879 	push	hl
      00148F CDr00r00         [17] 4880 	call	_WRTVRM
      001492 F1               [10] 4881 	pop	af
      001493 33               [ 6] 4882 	inc	sp
                                   4883 ;src\/Graphics\Graphics.h:104: GetNextPieceColors(nextMidPiece);
      001494 3Ar94r00         [13] 4884 	ld	a,(#_nextMidPiece + 0)
      001497 F5               [11] 4885 	push	af
      001498 33               [ 6] 4886 	inc	sp
      001499 CDrC6r13         [17] 4887 	call	_GetNextPieceColors
      00149C 33               [ 6] 4888 	inc	sp
                                   4889 ;src\/Graphics\Graphics.h:105: WRTVRM(SPRATT + 48, 	(5 * 8));
      00149D 3E 28            [ 7] 4890 	ld	a, #0x28
      00149F F5               [11] 4891 	push	af
      0014A0 33               [ 6] 4892 	inc	sp
      0014A1 21 30 1B         [10] 4893 	ld	hl, #0x1b30
      0014A4 E5               [11] 4894 	push	hl
      0014A5 CDr00r00         [17] 4895 	call	_WRTVRM
      0014A8 F1               [10] 4896 	pop	af
      0014A9 33               [ 6] 4897 	inc	sp
                                   4898 ;src\/Graphics\Graphics.h:106: WRTVRM(SPRATT + 49, 	(4 * 8)-4);
      0014AA 3E 1C            [ 7] 4899 	ld	a, #0x1c
      0014AC F5               [11] 4900 	push	af
      0014AD 33               [ 6] 4901 	inc	sp
      0014AE 21 31 1B         [10] 4902 	ld	hl, #0x1b31
      0014B1 E5               [11] 4903 	push	hl
      0014B2 CDr00r00         [17] 4904 	call	_WRTVRM
      0014B5 F1               [10] 4905 	pop	af
      0014B6 33               [ 6] 4906 	inc	sp
                                   4907 ;src\/Graphics\Graphics.h:107: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      0014B7 3E 4C            [ 7] 4908 	ld	a, #0x4c
      0014B9 F5               [11] 4909 	push	af
      0014BA 33               [ 6] 4910 	inc	sp
      0014BB 21 32 1B         [10] 4911 	ld	hl, #0x1b32
      0014BE E5               [11] 4912 	push	hl
      0014BF CDr00r00         [17] 4913 	call	_WRTVRM
      0014C2 F1               [10] 4914 	pop	af
      0014C3 33               [ 6] 4915 	inc	sp
                                   4916 ;src\/Graphics\Graphics.h:108: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      0014C4 3Ar9Br00         [13] 4917 	ld	a,(#_nextPieceColor_Front + 0)
      0014C7 F5               [11] 4918 	push	af
      0014C8 33               [ 6] 4919 	inc	sp
      0014C9 21 33 1B         [10] 4920 	ld	hl, #0x1b33
      0014CC E5               [11] 4921 	push	hl
      0014CD CDr00r00         [17] 4922 	call	_WRTVRM
      0014D0 F1               [10] 4923 	pop	af
      0014D1 33               [ 6] 4924 	inc	sp
                                   4925 ;src\/Graphics\Graphics.h:109: WRTVRM(SPRATT + 52, 	(5 * 8));
      0014D2 3E 28            [ 7] 4926 	ld	a, #0x28
      0014D4 F5               [11] 4927 	push	af
      0014D5 33               [ 6] 4928 	inc	sp
      0014D6 21 34 1B         [10] 4929 	ld	hl, #0x1b34
      0014D9 E5               [11] 4930 	push	hl
      0014DA CDr00r00         [17] 4931 	call	_WRTVRM
      0014DD F1               [10] 4932 	pop	af
      0014DE 33               [ 6] 4933 	inc	sp
                                   4934 ;src\/Graphics\Graphics.h:110: WRTVRM(SPRATT + 53, 	(4 * 8)-4);
      0014DF 3E 1C            [ 7] 4935 	ld	a, #0x1c
      0014E1 F5               [11] 4936 	push	af
      0014E2 33               [ 6] 4937 	inc	sp
      0014E3 21 35 1B         [10] 4938 	ld	hl, #0x1b35
      0014E6 E5               [11] 4939 	push	hl
      0014E7 CDr00r00         [17] 4940 	call	_WRTVRM
      0014EA F1               [10] 4941 	pop	af
      0014EB 33               [ 6] 4942 	inc	sp
                                   4943 ;src\/Graphics\Graphics.h:111: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0014EC 3E 50            [ 7] 4944 	ld	a, #0x50
      0014EE F5               [11] 4945 	push	af
      0014EF 33               [ 6] 4946 	inc	sp
      0014F0 21 36 1B         [10] 4947 	ld	hl, #0x1b36
      0014F3 E5               [11] 4948 	push	hl
      0014F4 CDr00r00         [17] 4949 	call	_WRTVRM
      0014F7 F1               [10] 4950 	pop	af
      0014F8 33               [ 6] 4951 	inc	sp
                                   4952 ;src\/Graphics\Graphics.h:112: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      0014F9 3Ar9Cr00         [13] 4953 	ld	a,(#_nextPieceColor_Back + 0)
      0014FC F5               [11] 4954 	push	af
      0014FD 33               [ 6] 4955 	inc	sp
      0014FE 21 37 1B         [10] 4956 	ld	hl, #0x1b37
      001501 E5               [11] 4957 	push	hl
      001502 CDr00r00         [17] 4958 	call	_WRTVRM
      001505 F1               [10] 4959 	pop	af
      001506 33               [ 6] 4960 	inc	sp
                                   4961 ;src\/Graphics\Graphics.h:114: GetNextPieceColors(nextBottomPiece);
      001507 3Ar95r00         [13] 4962 	ld	a,(#_nextBottomPiece + 0)
      00150A F5               [11] 4963 	push	af
      00150B 33               [ 6] 4964 	inc	sp
      00150C CDrC6r13         [17] 4965 	call	_GetNextPieceColors
      00150F 33               [ 6] 4966 	inc	sp
                                   4967 ;src\/Graphics\Graphics.h:115: WRTVRM(SPRATT + 56, 	(6 * 8));
      001510 3E 30            [ 7] 4968 	ld	a, #0x30
      001512 F5               [11] 4969 	push	af
      001513 33               [ 6] 4970 	inc	sp
      001514 21 38 1B         [10] 4971 	ld	hl, #0x1b38
      001517 E5               [11] 4972 	push	hl
      001518 CDr00r00         [17] 4973 	call	_WRTVRM
      00151B F1               [10] 4974 	pop	af
      00151C 33               [ 6] 4975 	inc	sp
                                   4976 ;src\/Graphics\Graphics.h:116: WRTVRM(SPRATT + 57, 	(4 * 8)-4);
      00151D 3E 1C            [ 7] 4977 	ld	a, #0x1c
      00151F F5               [11] 4978 	push	af
      001520 33               [ 6] 4979 	inc	sp
      001521 21 39 1B         [10] 4980 	ld	hl, #0x1b39
      001524 E5               [11] 4981 	push	hl
      001525 CDr00r00         [17] 4982 	call	_WRTVRM
      001528 F1               [10] 4983 	pop	af
      001529 33               [ 6] 4984 	inc	sp
                                   4985 ;src\/Graphics\Graphics.h:117: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      00152A 3E 4C            [ 7] 4986 	ld	a, #0x4c
      00152C F5               [11] 4987 	push	af
      00152D 33               [ 6] 4988 	inc	sp
      00152E 21 3A 1B         [10] 4989 	ld	hl, #0x1b3a
      001531 E5               [11] 4990 	push	hl
      001532 CDr00r00         [17] 4991 	call	_WRTVRM
      001535 F1               [10] 4992 	pop	af
      001536 33               [ 6] 4993 	inc	sp
                                   4994 ;src\/Graphics\Graphics.h:118: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      001537 3Ar9Br00         [13] 4995 	ld	a,(#_nextPieceColor_Front + 0)
      00153A F5               [11] 4996 	push	af
      00153B 33               [ 6] 4997 	inc	sp
      00153C 21 3B 1B         [10] 4998 	ld	hl, #0x1b3b
      00153F E5               [11] 4999 	push	hl
      001540 CDr00r00         [17] 5000 	call	_WRTVRM
      001543 F1               [10] 5001 	pop	af
      001544 33               [ 6] 5002 	inc	sp
                                   5003 ;src\/Graphics\Graphics.h:119: WRTVRM(SPRATT + 60, 	(6 * 8));
      001545 3E 30            [ 7] 5004 	ld	a, #0x30
      001547 F5               [11] 5005 	push	af
      001548 33               [ 6] 5006 	inc	sp
      001549 21 3C 1B         [10] 5007 	ld	hl, #0x1b3c
      00154C E5               [11] 5008 	push	hl
      00154D CDr00r00         [17] 5009 	call	_WRTVRM
      001550 F1               [10] 5010 	pop	af
      001551 33               [ 6] 5011 	inc	sp
                                   5012 ;src\/Graphics\Graphics.h:120: WRTVRM(SPRATT + 61, 	(4 * 8)-4);
      001552 3E 1C            [ 7] 5013 	ld	a, #0x1c
      001554 F5               [11] 5014 	push	af
      001555 33               [ 6] 5015 	inc	sp
      001556 21 3D 1B         [10] 5016 	ld	hl, #0x1b3d
      001559 E5               [11] 5017 	push	hl
      00155A CDr00r00         [17] 5018 	call	_WRTVRM
      00155D F1               [10] 5019 	pop	af
      00155E 33               [ 6] 5020 	inc	sp
                                   5021 ;src\/Graphics\Graphics.h:121: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      00155F 3E 50            [ 7] 5022 	ld	a, #0x50
      001561 F5               [11] 5023 	push	af
      001562 33               [ 6] 5024 	inc	sp
      001563 21 3E 1B         [10] 5025 	ld	hl, #0x1b3e
      001566 E5               [11] 5026 	push	hl
      001567 CDr00r00         [17] 5027 	call	_WRTVRM
      00156A F1               [10] 5028 	pop	af
      00156B 33               [ 6] 5029 	inc	sp
                                   5030 ;src\/Graphics\Graphics.h:122: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      00156C 3Ar9Cr00         [13] 5031 	ld	a,(#_nextPieceColor_Back + 0)
      00156F F5               [11] 5032 	push	af
      001570 33               [ 6] 5033 	inc	sp
      001571 21 3F 1B         [10] 5034 	ld	hl, #0x1b3f
      001574 E5               [11] 5035 	push	hl
      001575 CDr00r00         [17] 5036 	call	_WRTVRM
      001578 F1               [10] 5037 	pop	af
      001579 33               [ 6] 5038 	inc	sp
                                   5039 ;src\/Graphics\Graphics.h:133: }
      00157A C9               [10] 5040 	ret
                                   5041 ;src\/Graphics\Graphics.h:135: void DrawScore() {
                                   5042 ;	---------------------------------
                                   5043 ; Function DrawScore
                                   5044 ; ---------------------------------
      00157B                       5045 _DrawScore::
      00157B DD E5            [15] 5046 	push	ix
      00157D DD 21 00 00      [14] 5047 	ld	ix,#0
      001581 DD 39            [15] 5048 	add	ix,sp
      001583 F5               [11] 5049 	push	af
                                   5050 ;src\/Graphics\Graphics.h:136: byte bgCounter = 0, bgColor;
      001584 DD 36 FE 00      [19] 5051 	ld	-2 (ix), #0
                                   5052 ;src\/Graphics\Graphics.h:140: if(newLevel) {
      001588 3Ar07r00         [13] 5053 	ld	a,(#_newLevel + 0)
      00158B B7               [ 4] 5054 	or	a, a
      00158C CAr87r16         [10] 5055 	jp	Z, 00119$
                                   5056 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      00158F DD 36 FF 00      [19] 5057 	ld	-1 (ix), #0
      001593                       5058 00121$:
      001593 DD 7E FF         [19] 5059 	ld	a, -1 (ix)
      001596 D6 3C            [ 7] 5060 	sub	a, #0x3c
      001598 D2r87r16         [10] 5061 	jp	NC, 00119$
                                   5062 ;src\/Graphics\Graphics.h:142: lastJiffy = JIFFY;
      00159B ED 4B 9E FC      [20] 5063 	ld	bc, (_JIFFY)
                                   5064 ;src\/Graphics\Graphics.h:143: while(lastJiffy == JIFFY) { }
      00159F                       5065 00101$:
      00159F 2A 9E FC         [16] 5066 	ld	hl, (_JIFFY)
      0015A2 BF               [ 4] 5067 	cp	a, a
      0015A3 ED 42            [15] 5068 	sbc	hl, bc
      0015A5 28 F8            [12] 5069 	jr	Z, 00101$
                                   5070 ;src\/Graphics\Graphics.h:145: DrawExplosionSprite(26 * 8, 10 * 8, i);
      0015A7 DD 56 FF         [19] 5071 	ld	d, -1 (ix)
      0015AA 1E 50            [ 7] 5072 	ld	e,#0x50
      0015AC D5               [11] 5073 	push	de
      0015AD 3E D0            [ 7] 5074 	ld	a, #0xd0
      0015AF F5               [11] 5075 	push	af
      0015B0 33               [ 6] 5076 	inc	sp
      0015B1 CDrDFr0E         [17] 5077 	call	_DrawExplosionSprite
      0015B4 F1               [10] 5078 	pop	af
      0015B5 33               [ 6] 5079 	inc	sp
                                   5080 ;src\/Graphics\Graphics.h:147: if(JIFFY & 0b00000110) {
      0015B6 2A 9E FC         [16] 5081 	ld	hl, (_JIFFY)
      0015B9 7D               [ 4] 5082 	ld	a, l
      0015BA E6 06            [ 7] 5083 	and	a, #0x06
      0015BC CAr67r16         [10] 5084 	jp	Z,00115$
                                   5085 ;src\/Graphics\Graphics.h:149: DrawString(" LEVEL", 26, 10);
      0015BF 11 1A 0A         [10] 5086 	ld	de, #0x0a1a
      0015C2 D5               [11] 5087 	push	de
      0015C3 21r09r17         [10] 5088 	ld	hl, #___str_1
      0015C6 E5               [11] 5089 	push	hl
      0015C7 CDr38r11         [17] 5090 	call	_DrawString
      0015CA F1               [10] 5091 	pop	af
      0015CB F1               [10] 5092 	pop	af
                                   5093 ;src\/Graphics\Graphics.h:150: DrawNumber(level, 26, 11);
      0015CC 3Ar06r00         [13] 5094 	ld	a, (#_level + 0)
      0015CF 4F               [ 4] 5095 	ld	c, a
      0015D0 06 00            [ 7] 5096 	ld	b, #0x00
      0015D2 11 1A 0B         [10] 5097 	ld	de, #0x0b1a
      0015D5 D5               [11] 5098 	push	de
      0015D6 C5               [11] 5099 	push	bc
      0015D7 CDr6Ar11         [17] 5100 	call	_DrawNumber
      0015DA F1               [10] 5101 	pop	af
      0015DB F1               [10] 5102 	pop	af
                                   5103 ;src\/Graphics\Graphics.h:156: switch(bgCounter++) {
      0015DC DD 4E FE         [19] 5104 	ld	c, -2 (ix)
      0015DF DD 34 FE         [23] 5105 	inc	-2 (ix)
      0015E2 3E 07            [ 7] 5106 	ld	a, #0x07
      0015E4 91               [ 4] 5107 	sub	a, c
      0015E5 38 45            [12] 5108 	jr	C, 00112$
      0015E7 06 00            [ 7] 5109 	ld	b, #0x00
      0015E9 21rF0r15         [10] 5110 	ld	hl, #00163$
      0015EC 09               [11] 5111 	add	hl, bc
      0015ED 09               [11] 5112 	add	hl, bc
      0015EE 09               [11] 5113 	add	hl, bc
      0015EF E9               [ 4] 5114 	jp	(hl)
      0015F0                       5115 00163$:
      0015F0 C3r08r16         [10] 5116 	jp	00104$
      0015F3 C3r0Cr16         [10] 5117 	jp	00105$
      0015F6 C3r10r16         [10] 5118 	jp	00106$
      0015F9 C3r14r16         [10] 5119 	jp	00107$
      0015FC C3r18r16         [10] 5120 	jp	00108$
      0015FF C3r1Cr16         [10] 5121 	jp	00109$
      001602 C3r20r16         [10] 5122 	jp	00110$
      001605 C3r24r16         [10] 5123 	jp	00111$
                                   5124 ;src\/Graphics\Graphics.h:157: case 0:
      001608                       5125 00104$:
                                   5126 ;src\/Graphics\Graphics.h:158: bgColor = 0x14;
      001608 0E 14            [ 7] 5127 	ld	c, #0x14
                                   5128 ;src\/Graphics\Graphics.h:159: break;
      00160A 18 22            [12] 5129 	jr	00113$
                                   5130 ;src\/Graphics\Graphics.h:160: case 1:
      00160C                       5131 00105$:
                                   5132 ;src\/Graphics\Graphics.h:161: bgColor = 0x15;
      00160C 0E 15            [ 7] 5133 	ld	c, #0x15
                                   5134 ;src\/Graphics\Graphics.h:162: break;
      00160E 18 1E            [12] 5135 	jr	00113$
                                   5136 ;src\/Graphics\Graphics.h:163: case 2:
      001610                       5137 00106$:
                                   5138 ;src\/Graphics\Graphics.h:164: bgColor = 0x17;
      001610 0E 17            [ 7] 5139 	ld	c, #0x17
                                   5140 ;src\/Graphics\Graphics.h:165: break;
      001612 18 1A            [12] 5141 	jr	00113$
                                   5142 ;src\/Graphics\Graphics.h:166: case 3:
      001614                       5143 00107$:
                                   5144 ;src\/Graphics\Graphics.h:167: bgColor = 0x1e;
      001614 0E 1E            [ 7] 5145 	ld	c, #0x1e
                                   5146 ;src\/Graphics\Graphics.h:168: break;
      001616 18 16            [12] 5147 	jr	00113$
                                   5148 ;src\/Graphics\Graphics.h:169: case 4:
      001618                       5149 00108$:
                                   5150 ;src\/Graphics\Graphics.h:170: bgColor = 0x1f;
      001618 0E 1F            [ 7] 5151 	ld	c, #0x1f
                                   5152 ;src\/Graphics\Graphics.h:171: break;
      00161A 18 12            [12] 5153 	jr	00113$
                                   5154 ;src\/Graphics\Graphics.h:172: case 5:
      00161C                       5155 00109$:
                                   5156 ;src\/Graphics\Graphics.h:173: bgColor = 0x1e;
      00161C 0E 1E            [ 7] 5157 	ld	c, #0x1e
                                   5158 ;src\/Graphics\Graphics.h:174: break;
      00161E 18 0E            [12] 5159 	jr	00113$
                                   5160 ;src\/Graphics\Graphics.h:175: case 6:
      001620                       5161 00110$:
                                   5162 ;src\/Graphics\Graphics.h:176: bgColor = 0x17;
      001620 0E 17            [ 7] 5163 	ld	c, #0x17
                                   5164 ;src\/Graphics\Graphics.h:177: break;
      001622 18 0A            [12] 5165 	jr	00113$
                                   5166 ;src\/Graphics\Graphics.h:178: case 7:
      001624                       5167 00111$:
                                   5168 ;src\/Graphics\Graphics.h:179: bgColor = 0x15;
      001624 0E 15            [ 7] 5169 	ld	c, #0x15
                                   5170 ;src\/Graphics\Graphics.h:180: bgCounter = 0;
      001626 DD 36 FE 00      [19] 5171 	ld	-2 (ix), #0
                                   5172 ;src\/Graphics\Graphics.h:181: break;
      00162A 18 02            [12] 5173 	jr	00113$
                                   5174 ;src\/Graphics\Graphics.h:182: default:
      00162C                       5175 00112$:
                                   5176 ;src\/Graphics\Graphics.h:183: bgColor = 0x11;
      00162C 0E 11            [ 7] 5177 	ld	c, #0x11
                                   5178 ;src\/Graphics\Graphics.h:185: }
      00162E                       5179 00113$:
                                   5180 ;src\/Graphics\Graphics.h:186: FILVRM(CLRTBL, 8 * 4, bgColor);
      00162E C5               [11] 5181 	push	bc
      00162F 79               [ 4] 5182 	ld	a, c
      001630 F5               [11] 5183 	push	af
      001631 33               [ 6] 5184 	inc	sp
      001632 21 20 00         [10] 5185 	ld	hl, #0x0020
      001635 E5               [11] 5186 	push	hl
      001636 21 00 20         [10] 5187 	ld	hl, #0x2000
      001639 E5               [11] 5188 	push	hl
      00163A CDr00r00         [17] 5189 	call	_FILVRM
      00163D F1               [10] 5190 	pop	af
      00163E F1               [10] 5191 	pop	af
      00163F 33               [ 6] 5192 	inc	sp
      001640 C1               [10] 5193 	pop	bc
                                   5194 ;src\/Graphics\Graphics.h:187: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001641 C5               [11] 5195 	push	bc
      001642 79               [ 4] 5196 	ld	a, c
      001643 F5               [11] 5197 	push	af
      001644 33               [ 6] 5198 	inc	sp
      001645 21 20 00         [10] 5199 	ld	hl, #0x0020
      001648 E5               [11] 5200 	push	hl
      001649 21 00 28         [10] 5201 	ld	hl, #0x2800
      00164C E5               [11] 5202 	push	hl
      00164D CDr00r00         [17] 5203 	call	_FILVRM
      001650 F1               [10] 5204 	pop	af
      001651 F1               [10] 5205 	pop	af
      001652 33               [ 6] 5206 	inc	sp
      001653 C1               [10] 5207 	pop	bc
                                   5208 ;src\/Graphics\Graphics.h:188: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001654 79               [ 4] 5209 	ld	a, c
      001655 F5               [11] 5210 	push	af
      001656 33               [ 6] 5211 	inc	sp
      001657 21 20 00         [10] 5212 	ld	hl, #0x0020
      00165A E5               [11] 5213 	push	hl
      00165B 21 00 30         [10] 5214 	ld	hl, #0x3000
      00165E E5               [11] 5215 	push	hl
      00165F CDr00r00         [17] 5216 	call	_FILVRM
      001662 F1               [10] 5217 	pop	af
      001663 F1               [10] 5218 	pop	af
      001664 33               [ 6] 5219 	inc	sp
      001665 18 1A            [12] 5220 	jr	00122$
      001667                       5221 00115$:
                                   5222 ;src\/Graphics\Graphics.h:193: DrawString("      ", 26, 10);
      001667 11 1A 0A         [10] 5223 	ld	de, #0x0a1a
      00166A D5               [11] 5224 	push	de
      00166B 21r10r17         [10] 5225 	ld	hl, #___str_2
      00166E E5               [11] 5226 	push	hl
      00166F CDr38r11         [17] 5227 	call	_DrawString
      001672 F1               [10] 5228 	pop	af
      001673 F1               [10] 5229 	pop	af
                                   5230 ;src\/Graphics\Graphics.h:194: DrawString("      ", 26, 11);
      001674 11 1A 0B         [10] 5231 	ld	de, #0x0b1a
      001677 D5               [11] 5232 	push	de
      001678 21r10r17         [10] 5233 	ld	hl, #___str_2
      00167B E5               [11] 5234 	push	hl
      00167C CDr38r11         [17] 5235 	call	_DrawString
      00167F F1               [10] 5236 	pop	af
      001680 F1               [10] 5237 	pop	af
      001681                       5238 00122$:
                                   5239 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      001681 DD 34 FF         [23] 5240 	inc	-1 (ix)
      001684 C3r93r15         [10] 5241 	jp	00121$
      001687                       5242 00119$:
                                   5243 ;src\/Graphics\Graphics.h:200: newLevel = FALSE;
      001687 21r07r00         [10] 5244 	ld	hl, #_newLevel
      00168A 36 00            [10] 5245 	ld	(hl), #0x00
                                   5246 ;src\/Graphics\Graphics.h:203: FILVRM(CLRTBL, 8 * 4, 0x14);
      00168C 3E 14            [ 7] 5247 	ld	a, #0x14
      00168E F5               [11] 5248 	push	af
      00168F 33               [ 6] 5249 	inc	sp
      001690 21 20 00         [10] 5250 	ld	hl, #0x0020
      001693 E5               [11] 5251 	push	hl
      001694 21 00 20         [10] 5252 	ld	hl, #0x2000
      001697 E5               [11] 5253 	push	hl
      001698 CDr00r00         [17] 5254 	call	_FILVRM
      00169B F1               [10] 5255 	pop	af
      00169C F1               [10] 5256 	pop	af
      00169D 33               [ 6] 5257 	inc	sp
                                   5258 ;src\/Graphics\Graphics.h:204: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      00169E 3E 14            [ 7] 5259 	ld	a, #0x14
      0016A0 F5               [11] 5260 	push	af
      0016A1 33               [ 6] 5261 	inc	sp
      0016A2 21 20 00         [10] 5262 	ld	hl, #0x0020
      0016A5 E5               [11] 5263 	push	hl
      0016A6 21 00 28         [10] 5264 	ld	hl, #0x2800
      0016A9 E5               [11] 5265 	push	hl
      0016AA CDr00r00         [17] 5266 	call	_FILVRM
      0016AD F1               [10] 5267 	pop	af
      0016AE F1               [10] 5268 	pop	af
      0016AF 33               [ 6] 5269 	inc	sp
                                   5270 ;src\/Graphics\Graphics.h:205: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      0016B0 3E 14            [ 7] 5271 	ld	a, #0x14
      0016B2 F5               [11] 5272 	push	af
      0016B3 33               [ 6] 5273 	inc	sp
      0016B4 21 20 00         [10] 5274 	ld	hl, #0x0020
      0016B7 E5               [11] 5275 	push	hl
      0016B8 21 00 30         [10] 5276 	ld	hl, #0x3000
      0016BB E5               [11] 5277 	push	hl
      0016BC CDr00r00         [17] 5278 	call	_FILVRM
      0016BF F1               [10] 5279 	pop	af
      0016C0 F1               [10] 5280 	pop	af
      0016C1 33               [ 6] 5281 	inc	sp
                                   5282 ;src\/Graphics\Graphics.h:207: DrawString("NEXT", 2, 2);
      0016C2 11 02 02         [10] 5283 	ld	de, #0x0202
      0016C5 D5               [11] 5284 	push	de
      0016C6 21r17r17         [10] 5285 	ld	hl, #___str_3
      0016C9 E5               [11] 5286 	push	hl
      0016CA CDr38r11         [17] 5287 	call	_DrawString
      0016CD F1               [10] 5288 	pop	af
      0016CE F1               [10] 5289 	pop	af
                                   5290 ;src\/Graphics\Graphics.h:209: DrawString(" LEVEL", 26, 10);
      0016CF 11 1A 0A         [10] 5291 	ld	de, #0x0a1a
      0016D2 D5               [11] 5292 	push	de
      0016D3 21r09r17         [10] 5293 	ld	hl, #___str_1
      0016D6 E5               [11] 5294 	push	hl
      0016D7 CDr38r11         [17] 5295 	call	_DrawString
      0016DA F1               [10] 5296 	pop	af
      0016DB F1               [10] 5297 	pop	af
                                   5298 ;src\/Graphics\Graphics.h:210: DrawString("BLOCKS", 26, 18);
      0016DC 11 1A 12         [10] 5299 	ld	de, #0x121a
      0016DF D5               [11] 5300 	push	de
      0016E0 21r1Cr17         [10] 5301 	ld	hl, #___str_4
      0016E3 E5               [11] 5302 	push	hl
      0016E4 CDr38r11         [17] 5303 	call	_DrawString
      0016E7 F1               [10] 5304 	pop	af
      0016E8 F1               [10] 5305 	pop	af
                                   5306 ;src\/Graphics\Graphics.h:213: DrawNumber(level, 26, 11);
      0016E9 3Ar06r00         [13] 5307 	ld	a, (#_level + 0)
      0016EC 4F               [ 4] 5308 	ld	c, a
      0016ED 06 00            [ 7] 5309 	ld	b, #0x00
      0016EF 11 1A 0B         [10] 5310 	ld	de, #0x0b1a
      0016F2 D5               [11] 5311 	push	de
      0016F3 C5               [11] 5312 	push	bc
      0016F4 CDr6Ar11         [17] 5313 	call	_DrawNumber
      0016F7 F1               [10] 5314 	pop	af
      0016F8 F1               [10] 5315 	pop	af
                                   5316 ;src\/Graphics\Graphics.h:214: DrawNumber(blocksRemoved, 26, 19);
      0016F9 11 1A 13         [10] 5317 	ld	de, #0x131a
      0016FC D5               [11] 5318 	push	de
      0016FD 2Ar04r00         [16] 5319 	ld	hl, (_blocksRemoved)
      001700 E5               [11] 5320 	push	hl
      001701 CDr6Ar11         [17] 5321 	call	_DrawNumber
                                   5322 ;src\/Graphics\Graphics.h:217: }
      001704 DD F9            [10] 5323 	ld	sp,ix
      001706 DD E1            [14] 5324 	pop	ix
      001708 C9               [10] 5325 	ret
      001709                       5326 ___str_1:
      001709 20 4C 45 56 45 4C     5327 	.ascii " LEVEL"
      00170F 00                    5328 	.db 0x00
      001710                       5329 ___str_2:
      001710 20 20 20 20 20 20     5330 	.ascii "      "
      001716 00                    5331 	.db 0x00
      001717                       5332 ___str_3:
      001717 4E 45 58 54           5333 	.ascii "NEXT"
      00171B 00                    5334 	.db 0x00
      00171C                       5335 ___str_4:
      00171C 42 4C 4F 43 4B 53     5336 	.ascii "BLOCKS"
      001722 00                    5337 	.db 0x00
                                   5338 ;src\/Graphics\Graphics.h:219: void DrawBackground() {
                                   5339 ;	---------------------------------
                                   5340 ; Function DrawBackground
                                   5341 ; ---------------------------------
      001723                       5342 _DrawBackground::
                                   5343 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      001723 01 00 00         [10] 5344 	ld	bc, #0x0000
      001726                       5345 00103$:
      001726 78               [ 4] 5346 	ld	a, b
      001727 EE 80            [ 7] 5347 	xor	a, #0x80
      001729 D6 83            [ 7] 5348 	sub	a, #0x83
      00172B 30 12            [12] 5349 	jr	NC, 00101$
                                   5350 ;src\/Graphics\Graphics.h:222: WRTVRM(NAMTBL + i, EMPTY); // test
      00172D 21 00 18         [10] 5351 	ld	hl, #0x1800
      001730 09               [11] 5352 	add	hl, bc
      001731 C5               [11] 5353 	push	bc
      001732 AF               [ 4] 5354 	xor	a, a
      001733 F5               [11] 5355 	push	af
      001734 33               [ 6] 5356 	inc	sp
      001735 E5               [11] 5357 	push	hl
      001736 CDr00r00         [17] 5358 	call	_WRTVRM
      001739 F1               [10] 5359 	pop	af
      00173A 33               [ 6] 5360 	inc	sp
      00173B C1               [10] 5361 	pop	bc
                                   5362 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      00173C 03               [ 6] 5363 	inc	bc
      00173D 18 E7            [12] 5364 	jr	00103$
      00173F                       5365 00101$:
                                   5366 ;src\/Graphics\Graphics.h:225: DrawColumn(7);
      00173F 3E 07            [ 7] 5367 	ld	a, #0x07
      001741 F5               [11] 5368 	push	af
      001742 33               [ 6] 5369 	inc	sp
      001743 CDr25r12         [17] 5370 	call	_DrawColumn
      001746 33               [ 6] 5371 	inc	sp
                                   5372 ;src\/Graphics\Graphics.h:226: DrawColumn(22);
      001747 3E 16            [ 7] 5373 	ld	a, #0x16
      001749 F5               [11] 5374 	push	af
      00174A 33               [ 6] 5375 	inc	sp
      00174B CDr25r12         [17] 5376 	call	_DrawColumn
      00174E 33               [ 6] 5377 	inc	sp
                                   5378 ;src\/Graphics\Graphics.h:228: DrawScore();
                                   5379 ;src\/Graphics\Graphics.h:264: }
      00174F C3r7Br15         [10] 5380 	jp	_DrawScore
                                   5381 ;src\/Graphics\Graphics.h:266: void InitVRAM() {
                                   5382 ;	---------------------------------
                                   5383 ; Function InitVRAM
                                   5384 ; ---------------------------------
      001752                       5385 _InitVRAM::
      001752 DD E5            [15] 5386 	push	ix
      001754 DD 21 00 00      [14] 5387 	ld	ix,#0
      001758 DD 39            [15] 5388 	add	ix,sp
      00175A 3B               [ 6] 5389 	dec	sp
                                   5390 ;src\/Graphics\Graphics.h:271: CLIKSW = 0;	// disable keyboard sound
      00175B 21 00 00         [10] 5391 	ld	hl, #0x0000
      00175E 22 DB F3         [16] 5392 	ld	(_CLIKSW), hl
                                   5393 ;src\/Graphics\Graphics.h:272: SCNCNT = 1; 	// set keyboard scan counter
      001761 21 F6 F3         [10] 5394 	ld	hl, #_SCNCNT
      001764 36 01            [10] 5395 	ld	(hl), #0x01
                                   5396 ;src\/Graphics\Graphics.h:274: FORCLR = COLOR_WHITE;
      001766 21 E9 F3         [10] 5397 	ld	hl, #_FORCLR
      001769 36 0F            [10] 5398 	ld	(hl), #0x0f
                                   5399 ;src\/Graphics\Graphics.h:275: BAKCLR = COLOR_BLACK;
      00176B 21 EA F3         [10] 5400 	ld	hl, #_BAKCLR
      00176E 36 01            [10] 5401 	ld	(hl), #0x01
                                   5402 ;src\/Graphics\Graphics.h:276: BDRCLR = COLOR_BLACK;
      001770 21 EB F3         [10] 5403 	ld	hl, #_BDRCLR
      001773 36 01            [10] 5404 	ld	(hl), #0x01
                                   5405 ;src\/Graphics\Graphics.h:304: WRTVDP(0b0000000111100010);
      001775 21 E2 01         [10] 5406 	ld	hl, #0x01e2
      001778 CDr00r00         [17] 5407 	call	_WRTVDP
                                   5408 ;src\/Graphics\Graphics.h:306: INIGRP();	// Set screen 2
      00177B CDr00r00         [17] 5409 	call	_INIGRP
                                   5410 ;src\/Graphics\Graphics.h:308: DISSCR();	// Disable screen (faster to write)
      00177E CDr00r00         [17] 5411 	call	_DISSCR
                                   5412 ;src\/Graphics\Graphics.h:312: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001781 AF               [ 4] 5413 	xor	a, a
      001782 F5               [11] 5414 	push	af
      001783 33               [ 6] 5415 	inc	sp
      001784 21 00 40         [10] 5416 	ld	hl, #0x4000
      001787 E5               [11] 5417 	push	hl
      001788 65               [ 4] 5418 	ld	h, l
      001789 E5               [11] 5419 	push	hl
      00178A CDr00r00         [17] 5420 	call	_FILVRM
      00178D F1               [10] 5421 	pop	af
                                   5422 ;src\/Graphics\Graphics.h:321: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      00178E 33               [ 6] 5423 	inc	sp
      00178F 21 80 03         [10] 5424 	ld	hl,#0x0380
      001792 E3               [19] 5425 	ex	(sp),hl
      001793 21rA8r07         [10] 5426 	ld	hl, #_sprite_arrow_0
      001796 E5               [11] 5427 	push	hl
      001797 21 00 38         [10] 5428 	ld	hl, #0x3800
      00179A E5               [11] 5429 	push	hl
      00179B CDr00r00         [17] 5430 	call	_LDIRVM
      00179E 21 06 00         [10] 5431 	ld	hl, #6
      0017A1 39               [11] 5432 	add	hl, sp
      0017A2 F9               [ 6] 5433 	ld	sp, hl
                                   5434 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      0017A3 0E 00            [ 7] 5435 	ld	c, #0x00
      0017A5                       5436 00110$:
                                   5437 ;src\/Graphics\Graphics.h:328: WRTVRM(SPRATT + (i * 4), 	192);
      0017A5 79               [ 4] 5438 	ld	a,c
      0017A6 FE 20            [ 7] 5439 	cp	a,#0x20
      0017A8 30 18            [12] 5440 	jr	NC, 00101$
      0017AA 26 00            [ 7] 5441 	ld	h, #0x00
      0017AC 6F               [ 4] 5442 	ld	l, a
      0017AD 29               [11] 5443 	add	hl, hl
      0017AE 29               [11] 5444 	add	hl, hl
      0017AF 7C               [ 4] 5445 	ld	a, h
      0017B0 C6 1B            [ 7] 5446 	add	a, #0x1b
      0017B2 67               [ 4] 5447 	ld	h, a
      0017B3 C5               [11] 5448 	push	bc
      0017B4 3E C0            [ 7] 5449 	ld	a, #0xc0
      0017B6 F5               [11] 5450 	push	af
      0017B7 33               [ 6] 5451 	inc	sp
      0017B8 E5               [11] 5452 	push	hl
      0017B9 CDr00r00         [17] 5453 	call	_WRTVRM
      0017BC F1               [10] 5454 	pop	af
      0017BD 33               [ 6] 5455 	inc	sp
      0017BE C1               [10] 5456 	pop	bc
                                   5457 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      0017BF 0C               [ 4] 5458 	inc	c
      0017C0 18 E3            [12] 5459 	jr	00110$
      0017C2                       5460 00101$:
                                   5461 ;src\/Graphics\Graphics.h:337: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0017C2 21 78 01         [10] 5462 	ld	hl, #0x0178
      0017C5 E5               [11] 5463 	push	hl
      0017C6 21r78r04         [10] 5464 	ld	hl, #_pattern_black_0
      0017C9 E5               [11] 5465 	push	hl
      0017CA 21 00 00         [10] 5466 	ld	hl, #0x0000
      0017CD E5               [11] 5467 	push	hl
      0017CE CDr00r00         [17] 5468 	call	_LDIRVM
      0017D1 21 06 00         [10] 5469 	ld	hl, #6
      0017D4 39               [11] 5470 	add	hl, sp
      0017D5 F9               [ 6] 5471 	ld	sp, hl
                                   5472 ;src\/Graphics\Graphics.h:340: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0017D6 21 78 01         [10] 5473 	ld	hl, #0x0178
      0017D9 E5               [11] 5474 	push	hl
      0017DA 21r78r04         [10] 5475 	ld	hl, #_pattern_black_0
      0017DD E5               [11] 5476 	push	hl
      0017DE 21 00 08         [10] 5477 	ld	hl, #0x0800
      0017E1 E5               [11] 5478 	push	hl
      0017E2 CDr00r00         [17] 5479 	call	_LDIRVM
      0017E5 21 06 00         [10] 5480 	ld	hl, #6
      0017E8 39               [11] 5481 	add	hl, sp
      0017E9 F9               [ 6] 5482 	ld	sp, hl
                                   5483 ;src\/Graphics\Graphics.h:343: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0017EA 21 78 01         [10] 5484 	ld	hl, #0x0178
      0017ED E5               [11] 5485 	push	hl
      0017EE 21r78r04         [10] 5486 	ld	hl, #_pattern_black_0
      0017F1 E5               [11] 5487 	push	hl
      0017F2 21 00 10         [10] 5488 	ld	hl, #0x1000
      0017F5 E5               [11] 5489 	push	hl
      0017F6 CDr00r00         [17] 5490 	call	_LDIRVM
      0017F9 21 06 00         [10] 5491 	ld	hl, #6
      0017FC 39               [11] 5492 	add	hl, sp
      0017FD F9               [ 6] 5493 	ld	sp, hl
                                   5494 ;src\/Graphics\Graphics.h:346: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0017FE 21 00 03         [10] 5495 	ld	hl, #0x0300
      001801 E5               [11] 5496 	push	hl
      001802 21r78r01         [10] 5497 	ld	hl, #_FONT
      001805 E5               [11] 5498 	push	hl
      001806 21 78 01         [10] 5499 	ld	hl, #0x0178
      001809 E5               [11] 5500 	push	hl
      00180A CDr00r00         [17] 5501 	call	_LDIRVM
      00180D 21 06 00         [10] 5502 	ld	hl, #6
      001810 39               [11] 5503 	add	hl, sp
      001811 F9               [ 6] 5504 	ld	sp, hl
                                   5505 ;src\/Graphics\Graphics.h:349: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001812 21 00 03         [10] 5506 	ld	hl, #0x0300
      001815 E5               [11] 5507 	push	hl
      001816 21r78r01         [10] 5508 	ld	hl, #_FONT
      001819 E5               [11] 5509 	push	hl
      00181A 21 78 09         [10] 5510 	ld	hl, #0x0978
      00181D E5               [11] 5511 	push	hl
      00181E CDr00r00         [17] 5512 	call	_LDIRVM
      001821 21 06 00         [10] 5513 	ld	hl, #6
      001824 39               [11] 5514 	add	hl, sp
      001825 F9               [ 6] 5515 	ld	sp, hl
                                   5516 ;src\/Graphics\Graphics.h:352: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001826 21 00 03         [10] 5517 	ld	hl, #0x0300
      001829 E5               [11] 5518 	push	hl
      00182A 21r78r01         [10] 5519 	ld	hl, #_FONT
      00182D E5               [11] 5520 	push	hl
      00182E 21 78 11         [10] 5521 	ld	hl, #0x1178
      001831 E5               [11] 5522 	push	hl
      001832 CDr00r00         [17] 5523 	call	_LDIRVM
      001835 21 06 00         [10] 5524 	ld	hl, #6
      001838 39               [11] 5525 	add	hl, sp
      001839 F9               [ 6] 5526 	ld	sp, hl
                                   5527 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      00183A 0E 00            [ 7] 5528 	ld	c, #0x00
      00183C                       5529 00113$:
                                   5530 ;src\/Graphics\Graphics.h:357: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      00183C 79               [ 4] 5531 	ld	a,c
      00183D FE 07            [ 7] 5532 	cp	a,#0x07
      00183F 30 20            [12] 5533 	jr	NC, 00102$
      001841 26 00            [ 7] 5534 	ld	h, #0x00
      001843 6F               [ 4] 5535 	ld	l, a
      001844 29               [11] 5536 	add	hl, hl
      001845 29               [11] 5537 	add	hl, hl
      001846 29               [11] 5538 	add	hl, hl
      001847 11 70 04         [10] 5539 	ld	de, #0x0470
      00184A 19               [11] 5540 	add	hl, de
      00184B C5               [11] 5541 	push	bc
      00184C 11 38 00         [10] 5542 	ld	de, #0x0038
      00184F D5               [11] 5543 	push	de
      001850 11rE8r05         [10] 5544 	ld	de, #_pattern_title
      001853 D5               [11] 5545 	push	de
      001854 E5               [11] 5546 	push	hl
      001855 CDr00r00         [17] 5547 	call	_LDIRVM
      001858 21 06 00         [10] 5548 	ld	hl, #6
      00185B 39               [11] 5549 	add	hl, sp
      00185C F9               [ 6] 5550 	ld	sp, hl
      00185D C1               [10] 5551 	pop	bc
                                   5552 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      00185E 0C               [ 4] 5553 	inc	c
      00185F 18 DB            [12] 5554 	jr	00113$
      001861                       5555 00102$:
                                   5556 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001861 21 78 01         [10] 5557 	ld	hl, #0x0178
      001864 E5               [11] 5558 	push	hl
      001865 21rF0r05         [10] 5559 	ld	hl, #_color_black_0
      001868 E5               [11] 5560 	push	hl
      001869 21 00 20         [10] 5561 	ld	hl, #0x2000
      00186C E5               [11] 5562 	push	hl
      00186D CDr00r00         [17] 5563 	call	_LDIRVM
      001870 21 06 00         [10] 5564 	ld	hl, #6
      001873 39               [11] 5565 	add	hl, sp
      001874 F9               [ 6] 5566 	ld	sp, hl
                                   5567 ;src\/Graphics\Graphics.h:365: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001875 21 78 01         [10] 5568 	ld	hl, #0x0178
      001878 E5               [11] 5569 	push	hl
      001879 21rF0r05         [10] 5570 	ld	hl, #_color_black_0
      00187C E5               [11] 5571 	push	hl
      00187D 21 00 28         [10] 5572 	ld	hl, #0x2800
      001880 E5               [11] 5573 	push	hl
      001881 CDr00r00         [17] 5574 	call	_LDIRVM
      001884 21 06 00         [10] 5575 	ld	hl, #6
      001887 39               [11] 5576 	add	hl, sp
      001888 F9               [ 6] 5577 	ld	sp, hl
                                   5578 ;src\/Graphics\Graphics.h:367: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001889 21 78 01         [10] 5579 	ld	hl, #0x0178
      00188C E5               [11] 5580 	push	hl
      00188D 21rF0r05         [10] 5581 	ld	hl, #_color_black_0
      001890 E5               [11] 5582 	push	hl
      001891 21 00 30         [10] 5583 	ld	hl, #0x3000
      001894 E5               [11] 5584 	push	hl
      001895 CDr00r00         [17] 5585 	call	_LDIRVM
      001898 21 06 00         [10] 5586 	ld	hl, #6
      00189B 39               [11] 5587 	add	hl, sp
      00189C F9               [ 6] 5588 	ld	sp, hl
                                   5589 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00189D 0E 00            [ 7] 5590 	ld	c, #0x00
      00189F                       5591 00116$:
                                   5592 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00189F 79               [ 4] 5593 	ld	a,c
      0018A0 FE 60            [ 7] 5594 	cp	a,#0x60
      0018A2 30 20            [12] 5595 	jr	NC, 00103$
      0018A4 26 00            [ 7] 5596 	ld	h, #0x00
      0018A6 6F               [ 4] 5597 	ld	l, a
      0018A7 29               [11] 5598 	add	hl, hl
      0018A8 29               [11] 5599 	add	hl, hl
      0018A9 29               [11] 5600 	add	hl, hl
      0018AA 11 78 21         [10] 5601 	ld	de, #0x2178
      0018AD 19               [11] 5602 	add	hl, de
      0018AE C5               [11] 5603 	push	bc
      0018AF 11 08 00         [10] 5604 	ld	de, #0x0008
      0018B2 D5               [11] 5605 	push	de
      0018B3 11r68r07         [10] 5606 	ld	de, #_color_font_2
      0018B6 D5               [11] 5607 	push	de
      0018B7 E5               [11] 5608 	push	hl
      0018B8 CDr00r00         [17] 5609 	call	_LDIRVM
      0018BB 21 06 00         [10] 5610 	ld	hl, #6
      0018BE 39               [11] 5611 	add	hl, sp
      0018BF F9               [ 6] 5612 	ld	sp, hl
      0018C0 C1               [10] 5613 	pop	bc
                                   5614 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0018C1 0C               [ 4] 5615 	inc	c
      0018C2 18 DB            [12] 5616 	jr	00116$
      0018C4                       5617 00103$:
                                   5618 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0018C4 0E 00            [ 7] 5619 	ld	c, #0x00
      0018C6                       5620 00119$:
                                   5621 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0018C6 79               [ 4] 5622 	ld	a,c
      0018C7 FE 60            [ 7] 5623 	cp	a,#0x60
      0018C9 30 20            [12] 5624 	jr	NC, 00104$
      0018CB 26 00            [ 7] 5625 	ld	h, #0x00
      0018CD 6F               [ 4] 5626 	ld	l, a
      0018CE 29               [11] 5627 	add	hl, hl
      0018CF 29               [11] 5628 	add	hl, hl
      0018D0 29               [11] 5629 	add	hl, hl
      0018D1 11 78 29         [10] 5630 	ld	de, #0x2978
      0018D4 19               [11] 5631 	add	hl, de
      0018D5 C5               [11] 5632 	push	bc
      0018D6 11 08 00         [10] 5633 	ld	de, #0x0008
      0018D9 D5               [11] 5634 	push	de
      0018DA 11r68r07         [10] 5635 	ld	de, #_color_font_2
      0018DD D5               [11] 5636 	push	de
      0018DE E5               [11] 5637 	push	hl
      0018DF CDr00r00         [17] 5638 	call	_LDIRVM
      0018E2 21 06 00         [10] 5639 	ld	hl, #6
      0018E5 39               [11] 5640 	add	hl, sp
      0018E6 F9               [ 6] 5641 	ld	sp, hl
      0018E7 C1               [10] 5642 	pop	bc
                                   5643 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0018E8 0C               [ 4] 5644 	inc	c
      0018E9 18 DB            [12] 5645 	jr	00119$
      0018EB                       5646 00104$:
                                   5647 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0018EB 0E 00            [ 7] 5648 	ld	c, #0x00
      0018ED                       5649 00122$:
                                   5650 ;src\/Graphics\Graphics.h:383: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0018ED 79               [ 4] 5651 	ld	a,c
      0018EE FE 60            [ 7] 5652 	cp	a,#0x60
      0018F0 30 20            [12] 5653 	jr	NC, 00105$
      0018F2 26 00            [ 7] 5654 	ld	h, #0x00
      0018F4 6F               [ 4] 5655 	ld	l, a
      0018F5 29               [11] 5656 	add	hl, hl
      0018F6 29               [11] 5657 	add	hl, hl
      0018F7 29               [11] 5658 	add	hl, hl
      0018F8 11 78 31         [10] 5659 	ld	de, #0x3178
      0018FB 19               [11] 5660 	add	hl, de
      0018FC C5               [11] 5661 	push	bc
      0018FD 11 08 00         [10] 5662 	ld	de, #0x0008
      001900 D5               [11] 5663 	push	de
      001901 11r68r07         [10] 5664 	ld	de, #_color_font_2
      001904 D5               [11] 5665 	push	de
      001905 E5               [11] 5666 	push	hl
      001906 CDr00r00         [17] 5667 	call	_LDIRVM
      001909 21 06 00         [10] 5668 	ld	hl, #6
      00190C 39               [11] 5669 	add	hl, sp
      00190D F9               [ 6] 5670 	ld	sp, hl
      00190E C1               [10] 5671 	pop	bc
                                   5672 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00190F 0C               [ 4] 5673 	inc	c
      001910 18 DB            [12] 5674 	jr	00122$
      001912                       5675 00105$:
                                   5676 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      001912 0E 00            [ 7] 5677 	ld	c, #0x00
      001914                       5678 00125$:
                                   5679 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001914 79               [ 4] 5680 	ld	a,c
      001915 FE 0A            [ 7] 5681 	cp	a,#0x0a
      001917 30 20            [12] 5682 	jr	NC, 00106$
      001919 26 00            [ 7] 5683 	ld	h, #0x00
      00191B 6F               [ 4] 5684 	ld	l, a
      00191C 29               [11] 5685 	add	hl, hl
      00191D 29               [11] 5686 	add	hl, hl
      00191E 29               [11] 5687 	add	hl, hl
      00191F 11 F8 21         [10] 5688 	ld	de, #0x21f8
      001922 19               [11] 5689 	add	hl, de
      001923 C5               [11] 5690 	push	bc
      001924 11 08 00         [10] 5691 	ld	de, #0x0008
      001927 D5               [11] 5692 	push	de
      001928 11r60r07         [10] 5693 	ld	de, #_color_font_1
      00192B D5               [11] 5694 	push	de
      00192C E5               [11] 5695 	push	hl
      00192D CDr00r00         [17] 5696 	call	_LDIRVM
      001930 21 06 00         [10] 5697 	ld	hl, #6
      001933 39               [11] 5698 	add	hl, sp
      001934 F9               [ 6] 5699 	ld	sp, hl
      001935 C1               [10] 5700 	pop	bc
                                   5701 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      001936 0C               [ 4] 5702 	inc	c
      001937 18 DB            [12] 5703 	jr	00125$
      001939                       5704 00106$:
                                   5705 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001939 0E 00            [ 7] 5706 	ld	c, #0x00
      00193B                       5707 00128$:
                                   5708 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00193B 79               [ 4] 5709 	ld	a,c
      00193C FE 0A            [ 7] 5710 	cp	a,#0x0a
      00193E 30 20            [12] 5711 	jr	NC, 00107$
      001940 26 00            [ 7] 5712 	ld	h, #0x00
      001942 6F               [ 4] 5713 	ld	l, a
      001943 29               [11] 5714 	add	hl, hl
      001944 29               [11] 5715 	add	hl, hl
      001945 29               [11] 5716 	add	hl, hl
      001946 11 F8 29         [10] 5717 	ld	de, #0x29f8
      001949 19               [11] 5718 	add	hl, de
      00194A C5               [11] 5719 	push	bc
      00194B 11 08 00         [10] 5720 	ld	de, #0x0008
      00194E D5               [11] 5721 	push	de
      00194F 11r60r07         [10] 5722 	ld	de, #_color_font_1
      001952 D5               [11] 5723 	push	de
      001953 E5               [11] 5724 	push	hl
      001954 CDr00r00         [17] 5725 	call	_LDIRVM
      001957 21 06 00         [10] 5726 	ld	hl, #6
      00195A 39               [11] 5727 	add	hl, sp
      00195B F9               [ 6] 5728 	ld	sp, hl
      00195C C1               [10] 5729 	pop	bc
                                   5730 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      00195D 0C               [ 4] 5731 	inc	c
      00195E 18 DB            [12] 5732 	jr	00128$
      001960                       5733 00107$:
                                   5734 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001960 DD 36 FF 00      [19] 5735 	ld	-1 (ix), #0
      001964                       5736 00131$:
      001964 DD 7E FF         [19] 5737 	ld	a, -1 (ix)
      001967 D6 0A            [ 7] 5738 	sub	a, #0x0a
      001969 30 22            [12] 5739 	jr	NC, 00108$
                                   5740 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00196B 01r60r07         [10] 5741 	ld	bc, #_color_font_1
      00196E DD 6E FF         [19] 5742 	ld	l, -1 (ix)
      001971 26 00            [ 7] 5743 	ld	h, #0x00
      001973 29               [11] 5744 	add	hl, hl
      001974 29               [11] 5745 	add	hl, hl
      001975 29               [11] 5746 	add	hl, hl
      001976 11 F8 31         [10] 5747 	ld	de, #0x31f8
      001979 19               [11] 5748 	add	hl, de
      00197A 11 08 00         [10] 5749 	ld	de, #0x0008
      00197D D5               [11] 5750 	push	de
      00197E C5               [11] 5751 	push	bc
      00197F E5               [11] 5752 	push	hl
      001980 CDr00r00         [17] 5753 	call	_LDIRVM
      001983 21 06 00         [10] 5754 	ld	hl, #6
      001986 39               [11] 5755 	add	hl, sp
      001987 F9               [ 6] 5756 	ld	sp, hl
                                   5757 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001988 DD 34 FF         [23] 5758 	inc	-1 (ix)
      00198B 18 D7            [12] 5759 	jr	00131$
      00198D                       5760 00108$:
                                   5761 ;src\/Graphics\Graphics.h:404: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      00198D 21 38 00         [10] 5762 	ld	hl, #0x0038
      001990 E5               [11] 5763 	push	hl
      001991 21r70r07         [10] 5764 	ld	hl, #_color_title_1
      001994 E5               [11] 5765 	push	hl
      001995 21 70 24         [10] 5766 	ld	hl, #0x2470
      001998 E5               [11] 5767 	push	hl
      001999 CDr00r00         [17] 5768 	call	_LDIRVM
      00199C 21 06 00         [10] 5769 	ld	hl, #6
      00199F 39               [11] 5770 	add	hl, sp
      0019A0 F9               [ 6] 5771 	ld	sp, hl
                                   5772 ;src\/Graphics\Graphics.h:412: ENASCR();	// Enable screen
      0019A1 CDr00r00         [17] 5773 	call	_ENASCR
                                   5774 ;src\/Graphics\Graphics.h:413: }
      0019A4 33               [ 6] 5775 	inc	sp
      0019A5 DD E1            [14] 5776 	pop	ix
      0019A7 C9               [10] 5777 	ret
                                   5778 ;src\/Graphics\Graphics.h:415: void DrawBlock(byte col, byte line, byte tile) {
                                   5779 ;	---------------------------------
                                   5780 ; Function DrawBlock
                                   5781 ; ---------------------------------
      0019A8                       5782 _DrawBlock::
      0019A8 DD E5            [15] 5783 	push	ix
      0019AA DD 21 00 00      [14] 5784 	ld	ix,#0
      0019AE DD 39            [15] 5785 	add	ix,sp
                                   5786 ;src\/Graphics\Graphics.h:417: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0019B0 DD 6E 04         [19] 5787 	ld	l, 4 (ix)
      0019B3 26 00            [ 7] 5788 	ld	h, #0x00
      0019B5 29               [11] 5789 	add	hl, hl
      0019B6 4D               [ 4] 5790 	ld	c, l
      0019B7 44               [ 4] 5791 	ld	b, h
      0019B8 DD 6E 05         [19] 5792 	ld	l, 5 (ix)
      0019BB 26 00            [ 7] 5793 	ld	h, #0x00
      0019BD 29               [11] 5794 	add	hl, hl
      0019BE 29               [11] 5795 	add	hl, hl
      0019BF 29               [11] 5796 	add	hl, hl
      0019C0 29               [11] 5797 	add	hl, hl
      0019C1 29               [11] 5798 	add	hl, hl
      0019C2 29               [11] 5799 	add	hl, hl
      0019C3 11 0A 18         [10] 5800 	ld	de, #0x180a
      0019C6 19               [11] 5801 	add	hl, de
      0019C7 09               [11] 5802 	add	hl, bc
      0019C8 EB               [ 4] 5803 	ex	de, hl
                                   5804 ;src\/Graphics\Graphics.h:419: WRTVRM(baseAddr, tile);
      0019C9 D5               [11] 5805 	push	de
      0019CA DD 7E 06         [19] 5806 	ld	a, 6 (ix)
      0019CD F5               [11] 5807 	push	af
      0019CE 33               [ 6] 5808 	inc	sp
      0019CF D5               [11] 5809 	push	de
      0019D0 CDr00r00         [17] 5810 	call	_WRTVRM
      0019D3 F1               [10] 5811 	pop	af
      0019D4 33               [ 6] 5812 	inc	sp
      0019D5 D1               [10] 5813 	pop	de
                                   5814 ;src\/Graphics\Graphics.h:420: WRTVRM(baseAddr + 1, tile + 1);
      0019D6 DD 4E 06         [19] 5815 	ld	c, 6 (ix)
      0019D9 79               [ 4] 5816 	ld	a, c
      0019DA 3C               [ 4] 5817 	inc	a
      0019DB 6B               [ 4] 5818 	ld	l, e
      0019DC 62               [ 4] 5819 	ld	h, d
      0019DD 23               [ 6] 5820 	inc	hl
      0019DE C5               [11] 5821 	push	bc
      0019DF D5               [11] 5822 	push	de
      0019E0 F5               [11] 5823 	push	af
      0019E1 33               [ 6] 5824 	inc	sp
      0019E2 E5               [11] 5825 	push	hl
      0019E3 CDr00r00         [17] 5826 	call	_WRTVRM
      0019E6 F1               [10] 5827 	pop	af
      0019E7 33               [ 6] 5828 	inc	sp
      0019E8 D1               [10] 5829 	pop	de
      0019E9 C1               [10] 5830 	pop	bc
                                   5831 ;src\/Graphics\Graphics.h:421: WRTVRM(baseAddr + 32, tile + 2);
      0019EA 41               [ 4] 5832 	ld	b, c
      0019EB 04               [ 4] 5833 	inc	b
      0019EC 04               [ 4] 5834 	inc	b
      0019ED 21 20 00         [10] 5835 	ld	hl, #0x0020
      0019F0 19               [11] 5836 	add	hl, de
      0019F1 C5               [11] 5837 	push	bc
      0019F2 D5               [11] 5838 	push	de
      0019F3 C5               [11] 5839 	push	bc
      0019F4 33               [ 6] 5840 	inc	sp
      0019F5 E5               [11] 5841 	push	hl
      0019F6 CDr00r00         [17] 5842 	call	_WRTVRM
      0019F9 F1               [10] 5843 	pop	af
      0019FA 33               [ 6] 5844 	inc	sp
      0019FB D1               [10] 5845 	pop	de
      0019FC C1               [10] 5846 	pop	bc
                                   5847 ;src\/Graphics\Graphics.h:422: WRTVRM(baseAddr + 33, tile + 3);
      0019FD 0C               [ 4] 5848 	inc	c
      0019FE 0C               [ 4] 5849 	inc	c
      0019FF 0C               [ 4] 5850 	inc	c
      001A00 21 21 00         [10] 5851 	ld	hl, #0x0021
      001A03 19               [11] 5852 	add	hl, de
      001A04 79               [ 4] 5853 	ld	a, c
      001A05 F5               [11] 5854 	push	af
      001A06 33               [ 6] 5855 	inc	sp
      001A07 E5               [11] 5856 	push	hl
      001A08 CDr00r00         [17] 5857 	call	_WRTVRM
      001A0B F1               [10] 5858 	pop	af
      001A0C 33               [ 6] 5859 	inc	sp
                                   5860 ;src\/Graphics\Graphics.h:423: }
      001A0D DD E1            [14] 5861 	pop	ix
      001A0F C9               [10] 5862 	ret
                                   5863 ;src\/Graphics\Graphics.h:425: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   5864 ;	---------------------------------
                                   5865 ; Function DrawBlock_SameTile
                                   5866 ; ---------------------------------
      001A10                       5867 _DrawBlock_SameTile::
      001A10 DD E5            [15] 5868 	push	ix
      001A12 DD 21 00 00      [14] 5869 	ld	ix,#0
      001A16 DD 39            [15] 5870 	add	ix,sp
                                   5871 ;src\/Graphics\Graphics.h:427: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001A18 DD 6E 04         [19] 5872 	ld	l, 4 (ix)
      001A1B 26 00            [ 7] 5873 	ld	h, #0x00
      001A1D 29               [11] 5874 	add	hl, hl
      001A1E 4D               [ 4] 5875 	ld	c, l
      001A1F 44               [ 4] 5876 	ld	b, h
      001A20 DD 6E 05         [19] 5877 	ld	l, 5 (ix)
      001A23 26 00            [ 7] 5878 	ld	h, #0x00
      001A25 29               [11] 5879 	add	hl, hl
      001A26 29               [11] 5880 	add	hl, hl
      001A27 29               [11] 5881 	add	hl, hl
      001A28 29               [11] 5882 	add	hl, hl
      001A29 29               [11] 5883 	add	hl, hl
      001A2A 29               [11] 5884 	add	hl, hl
      001A2B 11 0A 18         [10] 5885 	ld	de, #0x180a
      001A2E 19               [11] 5886 	add	hl, de
      001A2F 09               [11] 5887 	add	hl, bc
      001A30 EB               [ 4] 5888 	ex	de, hl
                                   5889 ;src\/Graphics\Graphics.h:429: WRTVRM(baseAddr, tile);
      001A31 D5               [11] 5890 	push	de
      001A32 DD 7E 06         [19] 5891 	ld	a, 6 (ix)
      001A35 F5               [11] 5892 	push	af
      001A36 33               [ 6] 5893 	inc	sp
      001A37 D5               [11] 5894 	push	de
      001A38 CDr00r00         [17] 5895 	call	_WRTVRM
      001A3B F1               [10] 5896 	pop	af
      001A3C 33               [ 6] 5897 	inc	sp
      001A3D D1               [10] 5898 	pop	de
                                   5899 ;src\/Graphics\Graphics.h:430: WRTVRM(baseAddr + 1, tile);
      001A3E 4B               [ 4] 5900 	ld	c, e
      001A3F 42               [ 4] 5901 	ld	b, d
      001A40 03               [ 6] 5902 	inc	bc
      001A41 D5               [11] 5903 	push	de
      001A42 DD 7E 06         [19] 5904 	ld	a, 6 (ix)
      001A45 F5               [11] 5905 	push	af
      001A46 33               [ 6] 5906 	inc	sp
      001A47 C5               [11] 5907 	push	bc
      001A48 CDr00r00         [17] 5908 	call	_WRTVRM
      001A4B F1               [10] 5909 	pop	af
      001A4C 33               [ 6] 5910 	inc	sp
      001A4D D1               [10] 5911 	pop	de
                                   5912 ;src\/Graphics\Graphics.h:431: WRTVRM(baseAddr + 32, tile);
      001A4E 21 20 00         [10] 5913 	ld	hl, #0x0020
      001A51 19               [11] 5914 	add	hl, de
      001A52 D5               [11] 5915 	push	de
      001A53 DD 7E 06         [19] 5916 	ld	a, 6 (ix)
      001A56 F5               [11] 5917 	push	af
      001A57 33               [ 6] 5918 	inc	sp
      001A58 E5               [11] 5919 	push	hl
      001A59 CDr00r00         [17] 5920 	call	_WRTVRM
      001A5C F1               [10] 5921 	pop	af
      001A5D 33               [ 6] 5922 	inc	sp
      001A5E D1               [10] 5923 	pop	de
                                   5924 ;src\/Graphics\Graphics.h:432: WRTVRM(baseAddr + 33, tile);
      001A5F 21 21 00         [10] 5925 	ld	hl, #0x0021
      001A62 19               [11] 5926 	add	hl, de
      001A63 DD 7E 06         [19] 5927 	ld	a, 6 (ix)
      001A66 F5               [11] 5928 	push	af
      001A67 33               [ 6] 5929 	inc	sp
      001A68 E5               [11] 5930 	push	hl
      001A69 CDr00r00         [17] 5931 	call	_WRTVRM
      001A6C F1               [10] 5932 	pop	af
      001A6D 33               [ 6] 5933 	inc	sp
                                   5934 ;src\/Graphics\Graphics.h:433: }
      001A6E DD E1            [14] 5935 	pop	ix
      001A70 C9               [10] 5936 	ret
                                   5937 ;src\/Graphics\Graphics.h:435: void DrawLine(byte line) {
                                   5938 ;	---------------------------------
                                   5939 ; Function DrawLine
                                   5940 ; ---------------------------------
      001A71                       5941 _DrawLine::
      001A71 DD E5            [15] 5942 	push	ix
      001A73 DD 21 00 00      [14] 5943 	ld	ix,#0
      001A77 DD 39            [15] 5944 	add	ix,sp
                                   5945 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A79 DD 4E 04         [19] 5946 	ld	c, 4 (ix)
      001A7C 06 00            [ 7] 5947 	ld	b, #0x00
      001A7E                       5948 00103$:
      001A7E 78               [ 4] 5949 	ld	a, b
      001A7F D6 06            [ 7] 5950 	sub	a, #0x06
      001A81 30 23            [12] 5951 	jr	NC, 00105$
                                   5952 ;src\/Graphics\Graphics.h:437: DrawBlock(col, line, playfield[col][line]);
      001A83 58               [ 4] 5953 	ld	e, b
      001A84 16 00            [ 7] 5954 	ld	d, #0x00
      001A86 6B               [ 4] 5955 	ld	l, e
      001A87 62               [ 4] 5956 	ld	h, d
      001A88 29               [11] 5957 	add	hl, hl
      001A89 19               [11] 5958 	add	hl, de
      001A8A 29               [11] 5959 	add	hl, hl
      001A8B 29               [11] 5960 	add	hl, hl
      001A8C 11r00r00         [10] 5961 	ld	de, #_playfield
      001A8F 19               [11] 5962 	add	hl, de
      001A90 59               [ 4] 5963 	ld	e, c
      001A91 16 00            [ 7] 5964 	ld	d, #0x00
      001A93 19               [11] 5965 	add	hl, de
      001A94 7E               [ 7] 5966 	ld	a, (hl)
      001A95 C5               [11] 5967 	push	bc
      001A96 F5               [11] 5968 	push	af
      001A97 33               [ 6] 5969 	inc	sp
      001A98 79               [ 4] 5970 	ld	a, c
      001A99 F5               [11] 5971 	push	af
      001A9A 33               [ 6] 5972 	inc	sp
      001A9B C5               [11] 5973 	push	bc
      001A9C 33               [ 6] 5974 	inc	sp
      001A9D CDrA8r19         [17] 5975 	call	_DrawBlock
      001AA0 F1               [10] 5976 	pop	af
      001AA1 33               [ 6] 5977 	inc	sp
      001AA2 C1               [10] 5978 	pop	bc
                                   5979 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001AA3 04               [ 4] 5980 	inc	b
      001AA4 18 D8            [12] 5981 	jr	00103$
      001AA6                       5982 00105$:
                                   5983 ;src\/Graphics\Graphics.h:439: }
      001AA6 DD E1            [14] 5984 	pop	ix
      001AA8 C9               [10] 5985 	ret
                                   5986 ;src\/Graphics\Graphics.h:441: void DrawPiece(byte line) {
                                   5987 ;	---------------------------------
                                   5988 ; Function DrawPiece
                                   5989 ; ---------------------------------
      001AA9                       5990 _DrawPiece::
                                   5991 ;src\/Graphics\Graphics.h:442: DrawLine(line);
      001AA9 21 02 00         [10] 5992 	ld	hl, #2
      001AAC 39               [11] 5993 	add	hl, sp
      001AAD 7E               [ 7] 5994 	ld	a, (hl)
      001AAE F5               [11] 5995 	push	af
      001AAF 33               [ 6] 5996 	inc	sp
      001AB0 CDr71r1A         [17] 5997 	call	_DrawLine
      001AB3 33               [ 6] 5998 	inc	sp
                                   5999 ;src\/Graphics\Graphics.h:443: DrawLine(line + 1);
      001AB4 21 02 00         [10] 6000 	ld	hl, #2
      001AB7 39               [11] 6001 	add	hl, sp
      001AB8 46               [ 7] 6002 	ld	b, (hl)
      001AB9 78               [ 4] 6003 	ld	a, b
      001ABA 3C               [ 4] 6004 	inc	a
      001ABB C5               [11] 6005 	push	bc
      001ABC F5               [11] 6006 	push	af
      001ABD 33               [ 6] 6007 	inc	sp
      001ABE CDr71r1A         [17] 6008 	call	_DrawLine
      001AC1 33               [ 6] 6009 	inc	sp
      001AC2 C1               [10] 6010 	pop	bc
                                   6011 ;src\/Graphics\Graphics.h:444: DrawLine(line + 2);
      001AC3 04               [ 4] 6012 	inc	b
      001AC4 04               [ 4] 6013 	inc	b
      001AC5 C5               [11] 6014 	push	bc
      001AC6 33               [ 6] 6015 	inc	sp
      001AC7 CDr71r1A         [17] 6016 	call	_DrawLine
      001ACA 33               [ 6] 6017 	inc	sp
                                   6018 ;src\/Graphics\Graphics.h:445: }
      001ACB C9               [10] 6019 	ret
                                   6020 ;src\/Graphics\Graphics.h:447: void DrawPlayfield() {
                                   6021 ;	---------------------------------
                                   6022 ; Function DrawPlayfield
                                   6023 ; ---------------------------------
      001ACC                       6024 _DrawPlayfield::
                                   6025 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001ACC 06 00            [ 7] 6026 	ld	b, #0x00
      001ACE                       6027 00103$:
      001ACE 78               [ 4] 6028 	ld	a, b
      001ACF D6 0C            [ 7] 6029 	sub	a, #0x0c
      001AD1 D0               [11] 6030 	ret	NC
                                   6031 ;src\/Graphics\Graphics.h:449: DrawLine(line);
      001AD2 C5               [11] 6032 	push	bc
      001AD3 C5               [11] 6033 	push	bc
      001AD4 33               [ 6] 6034 	inc	sp
      001AD5 CDr71r1A         [17] 6035 	call	_DrawLine
      001AD8 33               [ 6] 6036 	inc	sp
      001AD9 C1               [10] 6037 	pop	bc
                                   6038 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001ADA 04               [ 4] 6039 	inc	b
                                   6040 ;src\/Graphics\Graphics.h:451: }
      001ADB 18 F1            [12] 6041 	jr	00103$
                                   6042 ;src\/Sound.h:1: void SoundFx_2() {
                                   6043 ;	---------------------------------
                                   6044 ; Function SoundFx_2
                                   6045 ; ---------------------------------
      001ADD                       6046 _SoundFx_2::
                                   6047 ;src\/Sound.h:2: GICINI();
      001ADD CDr00r00         [17] 6048 	call	_GICINI
                                   6049 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001AE0 21 08 0F         [10] 6050 	ld	hl, #0x0f08
      001AE3 CDr00r00         [17] 6051 	call	_WRTPSG
                                   6052 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001AE6 0E 00            [ 7] 6053 	ld	c, #0x00
      001AE8                       6054 00104$:
      001AE8 79               [ 4] 6055 	ld	a, c
      001AE9 D6 FF            [ 7] 6056 	sub	a, #0xff
      001AEB 30 11            [12] 6057 	jr	NC, 00101$
                                   6058 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001AED C5               [11] 6059 	push	bc
      001AEE 21 00 5D         [10] 6060 	ld	hl, #0x5d00
      001AF1 CDr00r00         [17] 6061 	call	_WRTPSG
      001AF4 21 01 00         [10] 6062 	ld	hl, #0x0001
      001AF7 CDr00r00         [17] 6063 	call	_WRTPSG
      001AFA C1               [10] 6064 	pop	bc
                                   6065 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001AFB 0C               [ 4] 6066 	inc	c
      001AFC 18 EA            [12] 6067 	jr	00104$
      001AFE                       6068 00101$:
                                   6069 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001AFE 0E 00            [ 7] 6070 	ld	c, #0x00
      001B00                       6071 00107$:
      001B00 79               [ 4] 6072 	ld	a, c
      001B01 D6 FF            [ 7] 6073 	sub	a, #0xff
      001B03 30 11            [12] 6074 	jr	NC, 00102$
                                   6075 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001B05 C5               [11] 6076 	push	bc
      001B06 21 00 2D         [10] 6077 	ld	hl, #0x2d00
      001B09 CDr00r00         [17] 6078 	call	_WRTPSG
      001B0C 21 01 00         [10] 6079 	ld	hl, #0x0001
      001B0F CDr00r00         [17] 6080 	call	_WRTPSG
      001B12 C1               [10] 6081 	pop	bc
                                   6082 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001B13 0C               [ 4] 6083 	inc	c
      001B14 18 EA            [12] 6084 	jr	00107$
      001B16                       6085 00102$:
                                   6086 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001B16 21 08 00         [10] 6087 	ld	hl, #0x0008
                                   6088 ;src\/Sound.h:30: }
      001B19 C3r00r00         [10] 6089 	jp	_WRTPSG
                                   6090 ;src\/Sound.h:32: void SoundFx_1() {
                                   6091 ;	---------------------------------
                                   6092 ; Function SoundFx_1
                                   6093 ; ---------------------------------
      001B1C                       6094 _SoundFx_1::
                                   6095 ;src\/Sound.h:34: GICINI();
      001B1C CDr00r00         [17] 6096 	call	_GICINI
                                   6097 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001B1F 21 06 97         [10] 6098 	ld	hl, #0x9706
      001B22 CDr00r00         [17] 6099 	call	_WRTPSG
                                   6100 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      001B25 21 07 81         [10] 6101 	ld	hl, #0x8107
      001B28 CDr00r00         [17] 6102 	call	_WRTPSG
                                   6103 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001B2B 21 08 10         [10] 6104 	ld	hl, #0x1008
      001B2E CDr00r00         [17] 6105 	call	_WRTPSG
                                   6106 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001B31 21 0C 13         [10] 6107 	ld	hl, #0x130c
      001B34 CDr00r00         [17] 6108 	call	_WRTPSG
                                   6109 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001B37 21 0D 01         [10] 6110 	ld	hl, #0x010d
                                   6111 ;src\/Sound.h:49: }
      001B3A C3r00r00         [10] 6112 	jp	_WRTPSG
                                   6113 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   6114 ;	---------------------------------
                                   6115 ; Function CheckPlayfield
                                   6116 ; ---------------------------------
      001B3D                       6117 _CheckPlayfield::
      001B3D DD E5            [15] 6118 	push	ix
      001B3F DD 21 00 00      [14] 6119 	ld	ix,#0
      001B43 DD 39            [15] 6120 	add	ix,sp
      001B45 21 EF FF         [10] 6121 	ld	hl, #-17
      001B48 39               [11] 6122 	add	hl, sp
      001B49 F9               [ 6] 6123 	ld	sp, hl
                                   6124 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001B4A DD 36 EF 00      [19] 6125 	ld	-17 (ix), #0
                                   6126 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B4E 0E 00            [ 7] 6127 	ld	c, #0x00
      001B50                       6128 00196$:
      001B50 79               [ 4] 6129 	ld	a, c
      001B51 D6 0C            [ 7] 6130 	sub	a, #0x0c
      001B53 30 36            [12] 6131 	jr	NC, 00102$
                                   6132 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B55 DD 36 FF 00      [19] 6133 	ld	-1 (ix), #0
      001B59                       6134 00193$:
      001B59 DD 7E FF         [19] 6135 	ld	a, -1 (ix)
      001B5C D6 06            [ 7] 6136 	sub	a, #0x06
      001B5E 30 28            [12] 6137 	jr	NC, 00197$
                                   6138 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001B60 DD 5E FF         [19] 6139 	ld	e, -1 (ix)
      001B63 16 00            [ 7] 6140 	ld	d, #0x00
      001B65 6B               [ 4] 6141 	ld	l, e
      001B66 62               [ 4] 6142 	ld	h, d
      001B67 29               [11] 6143 	add	hl, hl
      001B68 19               [11] 6144 	add	hl, de
      001B69 29               [11] 6145 	add	hl, hl
      001B6A 29               [11] 6146 	add	hl, hl
      001B6B EB               [ 4] 6147 	ex	de, hl
      001B6C 21r48r00         [10] 6148 	ld	hl, #_playfieldTemp
      001B6F 19               [11] 6149 	add	hl, de
      001B70 06 00            [ 7] 6150 	ld	b, #0x00
      001B72 09               [11] 6151 	add	hl, bc
      001B73 3Er00            [ 7] 6152 	ld	a, #<(_playfield)
      001B75 83               [ 4] 6153 	add	a, e
      001B76 5F               [ 4] 6154 	ld	e, a
      001B77 3Es00            [ 7] 6155 	ld	a, #>(_playfield)
      001B79 8A               [ 4] 6156 	adc	a, d
      001B7A 57               [ 4] 6157 	ld	d, a
      001B7B 7B               [ 4] 6158 	ld	a, e
      001B7C 81               [ 4] 6159 	add	a, c
      001B7D 5F               [ 4] 6160 	ld	e, a
      001B7E 30 01            [12] 6161 	jr	NC, 00615$
      001B80 14               [ 4] 6162 	inc	d
      001B81                       6163 00615$:
      001B81 1A               [ 7] 6164 	ld	a, (de)
      001B82 77               [ 7] 6165 	ld	(hl), a
                                   6166 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B83 DD 34 FF         [23] 6167 	inc	-1 (ix)
      001B86 18 D1            [12] 6168 	jr	00193$
      001B88                       6169 00197$:
                                   6170 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B88 0C               [ 4] 6171 	inc	c
      001B89 18 C5            [12] 6172 	jr	00196$
      001B8B                       6173 00102$:
                                   6174 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B8B DD 36 FE 00      [19] 6175 	ld	-2 (ix), #0
      001B8F                       6176 00202$:
      001B8F DD 7E FE         [19] 6177 	ld	a, -2 (ix)
      001B92 D6 0C            [ 7] 6178 	sub	a, #0x0c
      001B94 D2r93r1C         [10] 6179 	jp	NC, 00108$
                                   6180 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001B97 DD 36 FF 02      [19] 6181 	ld	-1 (ix), #0x02
      001B9B                       6182 00199$:
      001B9B DD 7E FF         [19] 6183 	ld	a, -1 (ix)
      001B9E D6 06            [ 7] 6184 	sub	a, #0x06
      001BA0 D2r8Dr1C         [10] 6185 	jp	NC, 00203$
                                   6186 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      001BA3 DD 4E FF         [19] 6187 	ld	c, -1 (ix)
      001BA6 06 00            [ 7] 6188 	ld	b, #0x00
      001BA8 69               [ 4] 6189 	ld	l, c
      001BA9 60               [ 4] 6190 	ld	h, b
      001BAA 29               [11] 6191 	add	hl, hl
      001BAB 09               [11] 6192 	add	hl, bc
      001BAC 29               [11] 6193 	add	hl, hl
      001BAD 29               [11] 6194 	add	hl, hl
      001BAE DD 75 F5         [19] 6195 	ld	-11 (ix), l
      001BB1 DD 74 F6         [19] 6196 	ld	-10 (ix), h
      001BB4 3Er48            [ 7] 6197 	ld	a, #<(_playfieldTemp)
      001BB6 DD 86 F5         [19] 6198 	add	a, -11 (ix)
      001BB9 4F               [ 4] 6199 	ld	c, a
      001BBA 3Es00            [ 7] 6200 	ld	a, #>(_playfieldTemp)
      001BBC DD 8E F6         [19] 6201 	adc	a, -10 (ix)
      001BBF 47               [ 4] 6202 	ld	b, a
      001BC0 79               [ 4] 6203 	ld	a, c
      001BC1 DD 86 FE         [19] 6204 	add	a, -2 (ix)
      001BC4 DD 77 F7         [19] 6205 	ld	-9 (ix), a
      001BC7 78               [ 4] 6206 	ld	a, b
      001BC8 CE 00            [ 7] 6207 	adc	a, #0x00
      001BCA DD 77 F8         [19] 6208 	ld	-8 (ix), a
      001BCD DD 6E F7         [19] 6209 	ld	l, -9 (ix)
      001BD0 DD 66 F8         [19] 6210 	ld	h, -8 (ix)
      001BD3 7E               [ 7] 6211 	ld	a, (hl)
      001BD4 DD 77 F9         [19] 6212 	ld	-7 (ix), a
      001BD7 B7               [ 4] 6213 	or	a, a
      001BD8 CAr87r1C         [10] 6214 	jp	Z, 00200$
                                   6215 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001BDB DD 7E FF         [19] 6216 	ld	a, -1 (ix)
      001BDE DD 77 FD         [19] 6217 	ld	-3 (ix), a
      001BE1 4F               [ 4] 6218 	ld	c, a
      001BE2 0D               [ 4] 6219 	dec	c
      001BE3 0D               [ 4] 6220 	dec	c
      001BE4 79               [ 4] 6221 	ld	a, c
      001BE5 07               [ 4] 6222 	rlca
      001BE6 9F               [ 4] 6223 	sbc	a, a
      001BE7 47               [ 4] 6224 	ld	b, a
      001BE8 69               [ 4] 6225 	ld	l, c
      001BE9 60               [ 4] 6226 	ld	h, b
      001BEA 29               [11] 6227 	add	hl, hl
      001BEB 09               [11] 6228 	add	hl, bc
      001BEC 29               [11] 6229 	add	hl, hl
      001BED 29               [11] 6230 	add	hl, hl
      001BEE EB               [ 4] 6231 	ex	de, hl
      001BEF 21r48r00         [10] 6232 	ld	hl, #_playfieldTemp
      001BF2 19               [11] 6233 	add	hl, de
      001BF3 7D               [ 4] 6234 	ld	a, l
      001BF4 DD 86 FE         [19] 6235 	add	a, -2 (ix)
      001BF7 DD 77 FA         [19] 6236 	ld	-6 (ix), a
      001BFA 7C               [ 4] 6237 	ld	a, h
      001BFB CE 00            [ 7] 6238 	adc	a, #0x00
      001BFD DD 77 FB         [19] 6239 	ld	-5 (ix), a
      001C00 DD 4E FD         [19] 6240 	ld	c, -3 (ix)
      001C03 0D               [ 4] 6241 	dec	c
      001C04 79               [ 4] 6242 	ld	a, c
      001C05 07               [ 4] 6243 	rlca
      001C06 9F               [ 4] 6244 	sbc	a, a
      001C07 47               [ 4] 6245 	ld	b, a
      001C08 69               [ 4] 6246 	ld	l, c
      001C09 60               [ 4] 6247 	ld	h, b
      001C0A 29               [11] 6248 	add	hl, hl
      001C0B 09               [11] 6249 	add	hl, bc
      001C0C 29               [11] 6250 	add	hl, hl
      001C0D 29               [11] 6251 	add	hl, hl
      001C0E DD 75 FC         [19] 6252 	ld	-4 (ix), l
      001C11 DD 74 FD         [19] 6253 	ld	-3 (ix), h
      001C14 3Er48            [ 7] 6254 	ld	a, #<(_playfieldTemp)
      001C16 DD 86 FC         [19] 6255 	add	a, -4 (ix)
      001C19 4F               [ 4] 6256 	ld	c, a
      001C1A 3Es00            [ 7] 6257 	ld	a, #>(_playfieldTemp)
      001C1C DD 8E FD         [19] 6258 	adc	a, -3 (ix)
      001C1F 47               [ 4] 6259 	ld	b, a
      001C20 79               [ 4] 6260 	ld	a, c
      001C21 DD 86 FE         [19] 6261 	add	a, -2 (ix)
      001C24 4F               [ 4] 6262 	ld	c, a
      001C25 30 01            [12] 6263 	jr	NC, 00616$
      001C27 04               [ 4] 6264 	inc	b
      001C28                       6265 00616$:
      001C28 DD 6E FA         [19] 6266 	ld	l, -6 (ix)
      001C2B DD 66 FB         [19] 6267 	ld	h, -5 (ix)
      001C2E 6E               [ 7] 6268 	ld	l, (hl)
      001C2F 0A               [ 7] 6269 	ld	a, (bc)
      001C30 67               [ 4] 6270 	ld	h, a
      001C31 7D               [ 4] 6271 	ld	a, l
      001C32 94               [ 4] 6272 	sub	a, h
      001C33 20 52            [12] 6273 	jr	NZ, 00200$
                                   6274 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      001C35 DD 7E F9         [19] 6275 	ld	a, -7 (ix)
      001C38 94               [ 4] 6276 	sub	a, h
      001C39 20 4C            [12] 6277 	jr	NZ, 00200$
                                   6278 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      001C3B DD 36 EF 01      [19] 6279 	ld	-17 (ix), #0x01
                                   6280 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001C3F 3Er00            [ 7] 6281 	ld	a, #<(_playfield)
      001C41 83               [ 4] 6282 	add	a, e
      001C42 5F               [ 4] 6283 	ld	e, a
      001C43 3Es00            [ 7] 6284 	ld	a, #>(_playfield)
      001C45 8A               [ 4] 6285 	adc	a, d
      001C46 57               [ 4] 6286 	ld	d, a
      001C47 7B               [ 4] 6287 	ld	a, e
      001C48 DD 86 FE         [19] 6288 	add	a, -2 (ix)
      001C4B 5F               [ 4] 6289 	ld	e, a
      001C4C 30 01            [12] 6290 	jr	NC, 00621$
      001C4E 14               [ 4] 6291 	inc	d
      001C4F                       6292 00621$:
      001C4F 7D               [ 4] 6293 	ld	a, l
      001C50 CB FF            [ 8] 6294 	set	7, a
      001C52 12               [ 7] 6295 	ld	(de), a
                                   6296 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001C53 3Er00            [ 7] 6297 	ld	a, #<(_playfield)
      001C55 DD 86 FC         [19] 6298 	add	a, -4 (ix)
      001C58 5F               [ 4] 6299 	ld	e, a
      001C59 3Es00            [ 7] 6300 	ld	a, #>(_playfield)
      001C5B DD 8E FD         [19] 6301 	adc	a, -3 (ix)
      001C5E 57               [ 4] 6302 	ld	d, a
      001C5F DD 6E FE         [19] 6303 	ld	l, -2 (ix)
      001C62 26 00            [ 7] 6304 	ld	h, #0x00
      001C64 19               [11] 6305 	add	hl, de
      001C65 0A               [ 7] 6306 	ld	a, (bc)
      001C66 CB FF            [ 8] 6307 	set	7, a
      001C68 77               [ 7] 6308 	ld	(hl), a
                                   6309 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001C69 3Er00            [ 7] 6310 	ld	a, #<(_playfield)
      001C6B DD 86 F5         [19] 6311 	add	a, -11 (ix)
      001C6E 4F               [ 4] 6312 	ld	c, a
      001C6F 3Es00            [ 7] 6313 	ld	a, #>(_playfield)
      001C71 DD 8E F6         [19] 6314 	adc	a, -10 (ix)
      001C74 47               [ 4] 6315 	ld	b, a
      001C75 79               [ 4] 6316 	ld	a, c
      001C76 DD 86 FE         [19] 6317 	add	a, -2 (ix)
      001C79 4F               [ 4] 6318 	ld	c, a
      001C7A 30 01            [12] 6319 	jr	NC, 00622$
      001C7C 04               [ 4] 6320 	inc	b
      001C7D                       6321 00622$:
      001C7D DD 6E F7         [19] 6322 	ld	l, -9 (ix)
      001C80 DD 66 F8         [19] 6323 	ld	h, -8 (ix)
      001C83 7E               [ 7] 6324 	ld	a, (hl)
      001C84 CB FF            [ 8] 6325 	set	7, a
      001C86 02               [ 7] 6326 	ld	(bc), a
      001C87                       6327 00200$:
                                   6328 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001C87 DD 34 FF         [23] 6329 	inc	-1 (ix)
      001C8A C3r9Br1B         [10] 6330 	jp	00199$
      001C8D                       6331 00203$:
                                   6332 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C8D DD 34 FE         [23] 6333 	inc	-2 (ix)
      001C90 C3r8Fr1B         [10] 6334 	jp	00202$
      001C93                       6335 00108$:
                                   6336 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001C93 0E 02            [ 7] 6337 	ld	c, #0x02
      001C95                       6338 00208$:
      001C95 79               [ 4] 6339 	ld	a, c
      001C96 D6 0C            [ 7] 6340 	sub	a, #0x0c
      001C98 D2r5Ar1D         [10] 6341 	jp	NC, 00114$
                                   6342 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C9B DD 36 FF 00      [19] 6343 	ld	-1 (ix), #0
      001C9F                       6344 00205$:
      001C9F DD 7E FF         [19] 6345 	ld	a, -1 (ix)
      001CA2 D6 06            [ 7] 6346 	sub	a, #0x06
      001CA4 D2r56r1D         [10] 6347 	jp	NC, 00209$
                                   6348 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      001CA7 DD 5E FF         [19] 6349 	ld	e, -1 (ix)
      001CAA 16 00            [ 7] 6350 	ld	d, #0x00
      001CAC 6B               [ 4] 6351 	ld	l, e
      001CAD 62               [ 4] 6352 	ld	h, d
      001CAE 29               [11] 6353 	add	hl, hl
      001CAF 19               [11] 6354 	add	hl, de
      001CB0 29               [11] 6355 	add	hl, hl
      001CB1 29               [11] 6356 	add	hl, hl
      001CB2 DD 75 F7         [19] 6357 	ld	-9 (ix), l
      001CB5 DD 74 F8         [19] 6358 	ld	-8 (ix), h
      001CB8 3Er48            [ 7] 6359 	ld	a, #<(_playfieldTemp)
      001CBA DD 86 F7         [19] 6360 	add	a, -9 (ix)
      001CBD 5F               [ 4] 6361 	ld	e, a
      001CBE 3Es00            [ 7] 6362 	ld	a, #>(_playfieldTemp)
      001CC0 DD 8E F8         [19] 6363 	adc	a, -8 (ix)
      001CC3 57               [ 4] 6364 	ld	d, a
      001CC4 7B               [ 4] 6365 	ld	a, e
      001CC5 81               [ 4] 6366 	add	a, c
      001CC6 DD 77 F9         [19] 6367 	ld	-7 (ix), a
      001CC9 7A               [ 4] 6368 	ld	a, d
      001CCA CE 00            [ 7] 6369 	adc	a, #0x00
      001CCC DD 77 FA         [19] 6370 	ld	-6 (ix), a
      001CCF DD 6E F9         [19] 6371 	ld	l, -7 (ix)
      001CD2 DD 66 FA         [19] 6372 	ld	h, -6 (ix)
      001CD5 7E               [ 7] 6373 	ld	a, (hl)
      001CD6 DD 77 FE         [19] 6374 	ld	-2 (ix), a
      001CD9 B7               [ 4] 6375 	or	a, a
      001CDA 28 74            [12] 6376 	jr	Z, 00206$
                                   6377 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001CDC DD 71 FD         [19] 6378 	ld	-3 (ix), c
      001CDF 79               [ 4] 6379 	ld	a, c
      001CE0 C6 FE            [ 7] 6380 	add	a, #0xfe
      001CE2 DD 77 FB         [19] 6381 	ld	-5 (ix), a
      001CE5 6F               [ 4] 6382 	ld	l, a
      001CE6 26 00            [ 7] 6383 	ld	h, #0x00
      001CE8 19               [11] 6384 	add	hl, de
      001CE9 DD 46 FD         [19] 6385 	ld	b, -3 (ix)
      001CEC 05               [ 4] 6386 	dec	b
      001CED 7B               [ 4] 6387 	ld	a, e
      001CEE 80               [ 4] 6388 	add	a, b
      001CEF 5F               [ 4] 6389 	ld	e, a
      001CF0 30 01            [12] 6390 	jr	NC, 00623$
      001CF2 14               [ 4] 6391 	inc	d
      001CF3                       6392 00623$:
      001CF3 7E               [ 7] 6393 	ld	a, (hl)
      001CF4 DD 77 FC         [19] 6394 	ld	-4 (ix), a
      001CF7 1A               [ 7] 6395 	ld	a, (de)
      001CF8 6F               [ 4] 6396 	ld	l, a
      001CF9 DD 7E FC         [19] 6397 	ld	a, -4 (ix)
      001CFC 95               [ 4] 6398 	sub	a, l
      001CFD 20 51            [12] 6399 	jr	NZ, 00206$
                                   6400 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001CFF DD 7E FE         [19] 6401 	ld	a, -2 (ix)
      001D02 95               [ 4] 6402 	sub	a, l
      001D03 20 4B            [12] 6403 	jr	NZ, 00206$
                                   6404 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      001D05 DD 36 EF 01      [19] 6405 	ld	-17 (ix), #0x01
                                   6406 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001D09 3Er00            [ 7] 6407 	ld	a, #<(_playfield)
      001D0B DD 86 F7         [19] 6408 	add	a, -9 (ix)
      001D0E DD 77 FD         [19] 6409 	ld	-3 (ix), a
      001D11 3Es00            [ 7] 6410 	ld	a, #>(_playfield)
      001D13 DD 8E F8         [19] 6411 	adc	a, -8 (ix)
      001D16 DD 77 FE         [19] 6412 	ld	-2 (ix), a
      001D19 DD 7E FD         [19] 6413 	ld	a, -3 (ix)
      001D1C DD 86 FB         [19] 6414 	add	a, -5 (ix)
      001D1F 6F               [ 4] 6415 	ld	l, a
      001D20 DD 7E FE         [19] 6416 	ld	a, -2 (ix)
      001D23 CE 00            [ 7] 6417 	adc	a, #0x00
      001D25 67               [ 4] 6418 	ld	h, a
      001D26 DD 7E FC         [19] 6419 	ld	a, -4 (ix)
      001D29 CB FF            [ 8] 6420 	set	7, a
      001D2B 77               [ 7] 6421 	ld	(hl), a
                                   6422 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001D2C DD 7E FD         [19] 6423 	ld	a, -3 (ix)
      001D2F 80               [ 4] 6424 	add	a, b
      001D30 6F               [ 4] 6425 	ld	l, a
      001D31 DD 7E FE         [19] 6426 	ld	a, -2 (ix)
      001D34 CE 00            [ 7] 6427 	adc	a, #0x00
      001D36 67               [ 4] 6428 	ld	h, a
      001D37 1A               [ 7] 6429 	ld	a, (de)
      001D38 CB FF            [ 8] 6430 	set	7, a
      001D3A 77               [ 7] 6431 	ld	(hl), a
                                   6432 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001D3B DD 7E FD         [19] 6433 	ld	a, -3 (ix)
      001D3E 81               [ 4] 6434 	add	a, c
      001D3F 5F               [ 4] 6435 	ld	e, a
      001D40 DD 7E FE         [19] 6436 	ld	a, -2 (ix)
      001D43 CE 00            [ 7] 6437 	adc	a, #0x00
      001D45 57               [ 4] 6438 	ld	d, a
      001D46 DD 6E F9         [19] 6439 	ld	l, -7 (ix)
      001D49 DD 66 FA         [19] 6440 	ld	h, -6 (ix)
      001D4C 7E               [ 7] 6441 	ld	a, (hl)
      001D4D CB FF            [ 8] 6442 	set	7, a
      001D4F 12               [ 7] 6443 	ld	(de), a
      001D50                       6444 00206$:
                                   6445 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D50 DD 34 FF         [23] 6446 	inc	-1 (ix)
      001D53 C3r9Fr1C         [10] 6447 	jp	00205$
      001D56                       6448 00209$:
                                   6449 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001D56 0C               [ 4] 6450 	inc	c
      001D57 C3r95r1C         [10] 6451 	jp	00208$
      001D5A                       6452 00114$:
                                   6453 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001D5A DD 36 FE 02      [19] 6454 	ld	-2 (ix), #0x02
      001D5E                       6455 00214$:
      001D5E DD 7E FE         [19] 6456 	ld	a, -2 (ix)
      001D61 D6 0C            [ 7] 6457 	sub	a, #0x0c
      001D63 D2r01r1F         [10] 6458 	jp	NC, 00124$
                                   6459 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001D66 DD 36 FF 02      [19] 6460 	ld	-1 (ix), #0x02
      001D6A                       6461 00211$:
      001D6A DD 7E FF         [19] 6462 	ld	a, -1 (ix)
      001D6D D6 06            [ 7] 6463 	sub	a, #0x06
      001D6F D2rFBr1E         [10] 6464 	jp	NC, 00215$
                                   6465 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001D72 DD 4E FF         [19] 6466 	ld	c, -1 (ix)
      001D75 06 00            [ 7] 6467 	ld	b, #0x00
      001D77 69               [ 4] 6468 	ld	l, c
      001D78 60               [ 4] 6469 	ld	h, b
      001D79 29               [11] 6470 	add	hl, hl
      001D7A 09               [11] 6471 	add	hl, bc
      001D7B 29               [11] 6472 	add	hl, hl
      001D7C 29               [11] 6473 	add	hl, hl
      001D7D DD 75 F0         [19] 6474 	ld	-16 (ix), l
      001D80 DD 74 F1         [19] 6475 	ld	-15 (ix), h
      001D83 3Er48            [ 7] 6476 	ld	a, #<(_playfieldTemp)
      001D85 DD 86 F0         [19] 6477 	add	a, -16 (ix)
      001D88 4F               [ 4] 6478 	ld	c, a
      001D89 3Es00            [ 7] 6479 	ld	a, #>(_playfieldTemp)
      001D8B DD 8E F1         [19] 6480 	adc	a, -15 (ix)
      001D8E 47               [ 4] 6481 	ld	b, a
      001D8F 79               [ 4] 6482 	ld	a, c
      001D90 DD 86 FE         [19] 6483 	add	a, -2 (ix)
      001D93 DD 77 F2         [19] 6484 	ld	-14 (ix), a
      001D96 78               [ 4] 6485 	ld	a, b
      001D97 CE 00            [ 7] 6486 	adc	a, #0x00
      001D99 DD 77 F3         [19] 6487 	ld	-13 (ix), a
      001D9C DD 6E F2         [19] 6488 	ld	l, -14 (ix)
      001D9F DD 66 F3         [19] 6489 	ld	h, -13 (ix)
      001DA2 5E               [ 7] 6490 	ld	e, (hl)
                                   6491 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001DA3 DD 56 FF         [19] 6492 	ld	d, -1 (ix)
      001DA6 DD 66 FE         [19] 6493 	ld	h, -2 (ix)
      001DA9 6A               [ 4] 6494 	ld	l, d
      001DAA 2D               [ 4] 6495 	dec	l
      001DAB 2D               [ 4] 6496 	dec	l
      001DAC 7C               [ 4] 6497 	ld	a, h
      001DAD C6 FE            [ 7] 6498 	add	a, #0xfe
      001DAF DD 77 F4         [19] 6499 	ld	-12 (ix), a
      001DB2 15               [ 4] 6500 	dec	d
      001DB3 7C               [ 4] 6501 	ld	a, h
      001DB4 C6 FF            [ 7] 6502 	add	a, #0xff
      001DB6 DD 77 F5         [19] 6503 	ld	-11 (ix), a
      001DB9 D5               [11] 6504 	push	de
      001DBA 5D               [ 4] 6505 	ld	e, l
      001DBB 7B               [ 4] 6506 	ld	a, e
      001DBC 07               [ 4] 6507 	rlca
      001DBD 9F               [ 4] 6508 	sbc	a, a
      001DBE 57               [ 4] 6509 	ld	d, a
      001DBF 6B               [ 4] 6510 	ld	l, e
      001DC0 62               [ 4] 6511 	ld	h, d
      001DC1 29               [11] 6512 	add	hl, hl
      001DC2 19               [11] 6513 	add	hl, de
      001DC3 29               [11] 6514 	add	hl, hl
      001DC4 29               [11] 6515 	add	hl, hl
      001DC5 D1               [10] 6516 	pop	de
      001DC6 DD 75 F6         [19] 6517 	ld	-10 (ix), l
      001DC9 DD 74 F7         [19] 6518 	ld	-9 (ix), h
      001DCC D5               [11] 6519 	push	de
      001DCD 5A               [ 4] 6520 	ld	e, d
      001DCE 7B               [ 4] 6521 	ld	a, e
      001DCF 07               [ 4] 6522 	rlca
      001DD0 9F               [ 4] 6523 	sbc	a, a
      001DD1 57               [ 4] 6524 	ld	d, a
      001DD2 6B               [ 4] 6525 	ld	l, e
      001DD3 62               [ 4] 6526 	ld	h, d
      001DD4 29               [11] 6527 	add	hl, hl
      001DD5 19               [11] 6528 	add	hl, de
      001DD6 29               [11] 6529 	add	hl, hl
      001DD7 29               [11] 6530 	add	hl, hl
      001DD8 D1               [10] 6531 	pop	de
      001DD9 DD 75 F8         [19] 6532 	ld	-8 (ix), l
      001DDC DD 74 F9         [19] 6533 	ld	-7 (ix), h
      001DDF 3Er48            [ 7] 6534 	ld	a, #<(_playfieldTemp)
      001DE1 DD 86 F6         [19] 6535 	add	a, -10 (ix)
      001DE4 DD 77 FA         [19] 6536 	ld	-6 (ix), a
      001DE7 3Es00            [ 7] 6537 	ld	a, #>(_playfieldTemp)
      001DE9 DD 8E F7         [19] 6538 	adc	a, -9 (ix)
      001DEC DD 77 FB         [19] 6539 	ld	-5 (ix), a
      001DEF 3Er48            [ 7] 6540 	ld	a, #<(_playfieldTemp)
      001DF1 DD 86 F8         [19] 6541 	add	a, -8 (ix)
      001DF4 57               [ 4] 6542 	ld	d, a
      001DF5 3Es00            [ 7] 6543 	ld	a, #>(_playfieldTemp)
      001DF7 DD 8E F9         [19] 6544 	adc	a, -7 (ix)
      001DFA 6F               [ 4] 6545 	ld	l, a
      001DFB 7A               [ 4] 6546 	ld	a, d
      001DFC DD 86 F5         [19] 6547 	add	a, -11 (ix)
      001DFF DD 77 FC         [19] 6548 	ld	-4 (ix), a
      001E02 7D               [ 4] 6549 	ld	a, l
      001E03 CE 00            [ 7] 6550 	adc	a, #0x00
      001E05 DD 77 FD         [19] 6551 	ld	-3 (ix), a
                                   6552 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001E08 7B               [ 4] 6553 	ld	a, e
      001E09 B7               [ 4] 6554 	or	a, a
      001E0A 28 74            [12] 6555 	jr	Z, 00116$
                                   6556 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001E0C DD 7E FA         [19] 6557 	ld	a, -6 (ix)
      001E0F DD 86 F4         [19] 6558 	add	a, -12 (ix)
      001E12 6F               [ 4] 6559 	ld	l, a
      001E13 DD 7E FB         [19] 6560 	ld	a, -5 (ix)
      001E16 CE 00            [ 7] 6561 	adc	a, #0x00
      001E18 67               [ 4] 6562 	ld	h, a
      001E19 56               [ 7] 6563 	ld	d, (hl)
      001E1A DD 6E FC         [19] 6564 	ld	l, -4 (ix)
      001E1D DD 66 FD         [19] 6565 	ld	h, -3 (ix)
      001E20 6E               [ 7] 6566 	ld	l, (hl)
      001E21 7A               [ 4] 6567 	ld	a, d
      001E22 95               [ 4] 6568 	sub	a, l
      001E23 20 5B            [12] 6569 	jr	NZ, 00116$
                                   6570 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001E25 7B               [ 4] 6571 	ld	a, e
      001E26 95               [ 4] 6572 	sub	a, l
      001E27 20 57            [12] 6573 	jr	NZ, 00116$
                                   6574 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001E29 DD 36 EF 01      [19] 6575 	ld	-17 (ix), #0x01
                                   6576 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001E2D 3Er00            [ 7] 6577 	ld	a, #<(_playfield)
      001E2F DD 86 F6         [19] 6578 	add	a, -10 (ix)
      001E32 5F               [ 4] 6579 	ld	e, a
      001E33 3Es00            [ 7] 6580 	ld	a, #>(_playfield)
      001E35 DD 8E F7         [19] 6581 	adc	a, -9 (ix)
      001E38 67               [ 4] 6582 	ld	h, a
      001E39 7B               [ 4] 6583 	ld	a, e
      001E3A DD 86 F4         [19] 6584 	add	a, -12 (ix)
      001E3D 6F               [ 4] 6585 	ld	l, a
      001E3E 30 01            [12] 6586 	jr	NC, 00632$
      001E40 24               [ 4] 6587 	inc	h
      001E41                       6588 00632$:
      001E41 CB FA            [ 8] 6589 	set	7, d
      001E43 72               [ 7] 6590 	ld	(hl), d
                                   6591 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001E44 3Er00            [ 7] 6592 	ld	a, #<(_playfield)
      001E46 DD 86 F8         [19] 6593 	add	a, -8 (ix)
      001E49 5F               [ 4] 6594 	ld	e, a
      001E4A 3Es00            [ 7] 6595 	ld	a, #>(_playfield)
      001E4C DD 8E F9         [19] 6596 	adc	a, -7 (ix)
      001E4F 57               [ 4] 6597 	ld	d, a
      001E50 7B               [ 4] 6598 	ld	a, e
      001E51 DD 86 F5         [19] 6599 	add	a, -11 (ix)
      001E54 5F               [ 4] 6600 	ld	e, a
      001E55 30 01            [12] 6601 	jr	NC, 00633$
      001E57 14               [ 4] 6602 	inc	d
      001E58                       6603 00633$:
      001E58 DD 6E FC         [19] 6604 	ld	l, -4 (ix)
      001E5B DD 66 FD         [19] 6605 	ld	h, -3 (ix)
      001E5E 7E               [ 7] 6606 	ld	a, (hl)
      001E5F CB FF            [ 8] 6607 	set	7, a
      001E61 12               [ 7] 6608 	ld	(de), a
                                   6609 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001E62 3Er00            [ 7] 6610 	ld	a, #<(_playfield)
      001E64 DD 86 F0         [19] 6611 	add	a, -16 (ix)
      001E67 5F               [ 4] 6612 	ld	e, a
      001E68 3Es00            [ 7] 6613 	ld	a, #>(_playfield)
      001E6A DD 8E F1         [19] 6614 	adc	a, -15 (ix)
      001E6D 57               [ 4] 6615 	ld	d, a
      001E6E 7B               [ 4] 6616 	ld	a, e
      001E6F DD 86 FE         [19] 6617 	add	a, -2 (ix)
      001E72 5F               [ 4] 6618 	ld	e, a
      001E73 30 01            [12] 6619 	jr	NC, 00634$
      001E75 14               [ 4] 6620 	inc	d
      001E76                       6621 00634$:
      001E76 DD 6E F2         [19] 6622 	ld	l, -14 (ix)
      001E79 DD 66 F3         [19] 6623 	ld	h, -13 (ix)
      001E7C 7E               [ 7] 6624 	ld	a, (hl)
      001E7D CB FF            [ 8] 6625 	set	7, a
      001E7F 12               [ 7] 6626 	ld	(de), a
      001E80                       6627 00116$:
                                   6628 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001E80 DD 6E F4         [19] 6629 	ld	l, -12 (ix)
      001E83 26 00            [ 7] 6630 	ld	h, #0x00
      001E85 09               [11] 6631 	add	hl, bc
      001E86 4E               [ 7] 6632 	ld	c, (hl)
      001E87 79               [ 4] 6633 	ld	a, c
      001E88 B7               [ 4] 6634 	or	a, a
      001E89 28 6A            [12] 6635 	jr	Z, 00212$
                                   6636 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001E8B DD 7E FA         [19] 6637 	ld	a, -6 (ix)
      001E8E DD 86 FE         [19] 6638 	add	a, -2 (ix)
      001E91 5F               [ 4] 6639 	ld	e, a
      001E92 DD 7E FB         [19] 6640 	ld	a, -5 (ix)
      001E95 CE 00            [ 7] 6641 	adc	a, #0x00
      001E97 57               [ 4] 6642 	ld	d, a
      001E98 DD 6E FC         [19] 6643 	ld	l, -4 (ix)
      001E9B DD 66 FD         [19] 6644 	ld	h, -3 (ix)
      001E9E 46               [ 7] 6645 	ld	b, (hl)
      001E9F 1A               [ 7] 6646 	ld	a, (de)
      001EA0 B8               [ 4] 6647 	cp	a, b
      001EA1 20 52            [12] 6648 	jr	NZ, 00212$
                                   6649 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001EA3 91               [ 4] 6650 	sub	a, c
      001EA4 20 4F            [12] 6651 	jr	NZ, 00212$
                                   6652 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001EA6 DD 36 EF 01      [19] 6653 	ld	-17 (ix), #0x01
                                   6654 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001EAA 3Er00            [ 7] 6655 	ld	a, #<(_playfield)
      001EAC DD 86 F0         [19] 6656 	add	a, -16 (ix)
      001EAF 47               [ 4] 6657 	ld	b, a
      001EB0 3Es00            [ 7] 6658 	ld	a, #>(_playfield)
      001EB2 DD 8E F1         [19] 6659 	adc	a, -15 (ix)
      001EB5 67               [ 4] 6660 	ld	h, a
      001EB6 78               [ 4] 6661 	ld	a, b
      001EB7 DD 86 F4         [19] 6662 	add	a, -12 (ix)
      001EBA 6F               [ 4] 6663 	ld	l, a
      001EBB 30 01            [12] 6664 	jr	NC, 00639$
      001EBD 24               [ 4] 6665 	inc	h
      001EBE                       6666 00639$:
      001EBE CB F9            [ 8] 6667 	set	7, c
      001EC0 71               [ 7] 6668 	ld	(hl), c
                                   6669 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001EC1 3Er00            [ 7] 6670 	ld	a, #<(_playfield)
      001EC3 DD 86 F8         [19] 6671 	add	a, -8 (ix)
      001EC6 4F               [ 4] 6672 	ld	c, a
      001EC7 3Es00            [ 7] 6673 	ld	a, #>(_playfield)
      001EC9 DD 8E F9         [19] 6674 	adc	a, -7 (ix)
      001ECC 47               [ 4] 6675 	ld	b, a
      001ECD 79               [ 4] 6676 	ld	a, c
      001ECE DD 86 F5         [19] 6677 	add	a, -11 (ix)
      001ED1 4F               [ 4] 6678 	ld	c, a
      001ED2 30 01            [12] 6679 	jr	NC, 00640$
      001ED4 04               [ 4] 6680 	inc	b
      001ED5                       6681 00640$:
      001ED5 DD 6E FC         [19] 6682 	ld	l, -4 (ix)
      001ED8 DD 66 FD         [19] 6683 	ld	h, -3 (ix)
      001EDB 7E               [ 7] 6684 	ld	a, (hl)
      001EDC CB FF            [ 8] 6685 	set	7, a
      001EDE 02               [ 7] 6686 	ld	(bc), a
                                   6687 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001EDF 3Er00            [ 7] 6688 	ld	a, #<(_playfield)
      001EE1 DD 86 F6         [19] 6689 	add	a, -10 (ix)
      001EE4 4F               [ 4] 6690 	ld	c, a
      001EE5 3Es00            [ 7] 6691 	ld	a, #>(_playfield)
      001EE7 DD 8E F7         [19] 6692 	adc	a, -9 (ix)
      001EEA 47               [ 4] 6693 	ld	b, a
      001EEB DD 6E FE         [19] 6694 	ld	l, -2 (ix)
      001EEE 26 00            [ 7] 6695 	ld	h, #0x00
      001EF0 09               [11] 6696 	add	hl, bc
      001EF1 1A               [ 7] 6697 	ld	a, (de)
      001EF2 CB FF            [ 8] 6698 	set	7, a
      001EF4 77               [ 7] 6699 	ld	(hl), a
      001EF5                       6700 00212$:
                                   6701 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001EF5 DD 34 FF         [23] 6702 	inc	-1 (ix)
      001EF8 C3r6Ar1D         [10] 6703 	jp	00211$
      001EFB                       6704 00215$:
                                   6705 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001EFB DD 34 FE         [23] 6706 	inc	-2 (ix)
      001EFE C3r5Er1D         [10] 6707 	jp	00214$
      001F01                       6708 00124$:
                                   6709 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001F01 DD 7E EF         [19] 6710 	ld	a, -17 (ix)
      001F04 B7               [ 4] 6711 	or	a, a
      001F05 CArADr22         [10] 6712 	jp	Z, 00190$
                                   6713 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001F08 DD 36 F5 FF      [19] 6714 	ld	-11 (ix), #0xff
      001F0C DD 36 F6 00      [19] 6715 	ld	-10 (ix), #0
                                   6716 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001F10 DD 36 F7 05      [19] 6717 	ld	-9 (ix), #0x05
      001F14 DD 36 F8 00      [19] 6718 	ld	-8 (ix), #0
                                   6719 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001F18 DD 36 F9 0B      [19] 6720 	ld	-7 (ix), #0x0b
      001F1C DD 36 FA 00      [19] 6721 	ld	-6 (ix), #0
                                   6722 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001F20 CDr48r0C         [17] 6723 	call	_HideArrowSprite
                                   6724 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001F23 CDrDDr1A         [17] 6725 	call	_SoundFx_2
                                   6726 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001F26 DD 36 FB 00      [19] 6727 	ld	-5 (ix), #0
                                   6728 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F2A DD 36 FF 00      [19] 6729 	ld	-1 (ix), #0
      001F2E                       6730 00220$:
      001F2E DD 7E FF         [19] 6731 	ld	a, -1 (ix)
      001F31 D6 0C            [ 7] 6732 	sub	a, #0x0c
      001F33 30 5F            [12] 6733 	jr	NC, 00291$
                                   6734 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F35 DD 5E FB         [19] 6735 	ld	e, -5 (ix)
      001F38 06 00            [ 7] 6736 	ld	b, #0x00
      001F3A                       6737 00217$:
      001F3A 78               [ 4] 6738 	ld	a, b
      001F3B D6 06            [ 7] 6739 	sub	a, #0x06
      001F3D 30 4D            [12] 6740 	jr	NC, 00320$
                                   6741 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001F3F D5               [11] 6742 	push	de
      001F40 58               [ 4] 6743 	ld	e, b
      001F41 16 00            [ 7] 6744 	ld	d, #0x00
      001F43 6B               [ 4] 6745 	ld	l, e
      001F44 62               [ 4] 6746 	ld	h, d
      001F45 29               [11] 6747 	add	hl, hl
      001F46 19               [11] 6748 	add	hl, de
      001F47 29               [11] 6749 	add	hl, hl
      001F48 29               [11] 6750 	add	hl, hl
      001F49 11r00r00         [10] 6751 	ld	de, #_playfield
      001F4C 19               [11] 6752 	add	hl, de
      001F4D D1               [10] 6753 	pop	de
      001F4E 7D               [ 4] 6754 	ld	a, l
      001F4F DD 86 FF         [19] 6755 	add	a, -1 (ix)
      001F52 6F               [ 4] 6756 	ld	l, a
      001F53 30 01            [12] 6757 	jr	NC, 00641$
      001F55 24               [ 4] 6758 	inc	h
      001F56                       6759 00641$:
      001F56 7E               [ 7] 6760 	ld	a, (hl)
      001F57 07               [ 4] 6761 	rlca
      001F58 30 2F            [12] 6762 	jr	NC, 00218$
                                   6763 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001F5A 1C               [ 4] 6764 	inc	e
                                   6765 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001F5B 78               [ 4] 6766 	ld	a, b
      001F5C DD 96 F7         [19] 6767 	sub	a, -9 (ix)
      001F5F 30 03            [12] 6768 	jr	NC, 00126$
      001F61 DD 70 F7         [19] 6769 	ld	-9 (ix), b
      001F64                       6770 00126$:
                                   6771 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001F64 DD 7E F8         [19] 6772 	ld	a, -8 (ix)
      001F67 90               [ 4] 6773 	sub	a, b
      001F68 30 03            [12] 6774 	jr	NC, 00128$
      001F6A DD 70 F8         [19] 6775 	ld	-8 (ix), b
      001F6D                       6776 00128$:
                                   6777 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001F6D DD 7E FF         [19] 6778 	ld	a, -1 (ix)
      001F70 DD 96 F9         [19] 6779 	sub	a, -7 (ix)
      001F73 30 06            [12] 6780 	jr	NC, 00130$
      001F75 DD 7E FF         [19] 6781 	ld	a, -1 (ix)
      001F78 DD 77 F9         [19] 6782 	ld	-7 (ix), a
      001F7B                       6783 00130$:
                                   6784 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001F7B DD 7E FA         [19] 6785 	ld	a, -6 (ix)
      001F7E DD 96 FF         [19] 6786 	sub	a, -1 (ix)
      001F81 30 06            [12] 6787 	jr	NC, 00218$
      001F83 DD 7E FF         [19] 6788 	ld	a, -1 (ix)
      001F86 DD 77 FA         [19] 6789 	ld	-6 (ix), a
      001F89                       6790 00218$:
                                   6791 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F89 04               [ 4] 6792 	inc	b
      001F8A 18 AE            [12] 6793 	jr	00217$
      001F8C                       6794 00320$:
      001F8C DD 73 FB         [19] 6795 	ld	-5 (ix), e
                                   6796 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F8F DD 34 FF         [23] 6797 	inc	-1 (ix)
      001F92 18 9A            [12] 6798 	jr	00220$
                                   6799 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001F94                       6800 00291$:
      001F94 DD 36 FF 48      [19] 6801 	ld	-1 (ix), #0x48
      001F98                       6802 00166$:
      001F98 DD 4E FF         [19] 6803 	ld	c, -1 (ix)
      001F9B DD 35 FF         [23] 6804 	dec	-1 (ix)
      001F9E 79               [ 4] 6805 	ld	a, c
      001F9F B7               [ 4] 6806 	or	a, a
      001FA0 CAr48r21         [10] 6807 	jp	Z, 00168$
                                   6808 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001FA3 ED 5B 9E FC      [20] 6809 	ld	de, (_JIFFY)
                                   6810 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001FA7                       6811 00137$:
      001FA7 2A 9E FC         [16] 6812 	ld	hl, (_JIFFY)
      001FAA BF               [ 4] 6813 	cp	a, a
      001FAB ED 52            [15] 6814 	sbc	hl, de
      001FAD 28 F8            [12] 6815 	jr	Z, 00137$
                                   6816 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001FAF DD 7E FB         [19] 6817 	ld	a, -5 (ix)
      001FB2 D6 03            [ 7] 6818 	sub	a, #0x03
      001FB4 DAr66r20         [10] 6819 	jp	C, 00301$
                                   6820 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001FB7 DD 7E FB         [19] 6821 	ld	a, -5 (ix)
      001FBA D6 07            [ 7] 6822 	sub	a, #0x07
      001FBC 38 04            [12] 6823 	jr	C, 00141$
      001FBE DD 36 FB 07      [19] 6824 	ld	-5 (ix), #0x07
      001FC2                       6825 00141$:
                                   6826 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001FC2 DD 7E F5         [19] 6827 	ld	a, -11 (ix)
      001FC5 3C               [ 4] 6828 	inc	a
      001FC6 20 7B            [12] 6829 	jr	NZ, 00143$
                                   6830 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001FC8 DD 6E F8         [19] 6831 	ld	l, -8 (ix)
      001FCB 26 00            [ 7] 6832 	ld	h, #0x00
      001FCD 29               [11] 6833 	add	hl, hl
      001FCE 29               [11] 6834 	add	hl, hl
      001FCF 29               [11] 6835 	add	hl, hl
      001FD0 29               [11] 6836 	add	hl, hl
      001FD1 DD 5E F7         [19] 6837 	ld	e, -9 (ix)
      001FD4 16 00            [ 7] 6838 	ld	d, #0x00
      001FD6 EB               [ 4] 6839 	ex	de, hl
      001FD7 29               [11] 6840 	add	hl, hl
      001FD8 29               [11] 6841 	add	hl, hl
      001FD9 29               [11] 6842 	add	hl, hl
      001FDA 29               [11] 6843 	add	hl, hl
      001FDB EB               [ 4] 6844 	ex	de, hl
      001FDC BF               [ 4] 6845 	cp	a, a
      001FDD ED 52            [15] 6846 	sbc	hl, de
      001FDF 4D               [ 4] 6847 	ld	c, l
      001FE0 44               [ 4] 6848 	ld	b, h
      001FE1 CB 7C            [ 8] 6849 	bit	7, h
      001FE3 28 03            [12] 6850 	jr	Z, 00239$
      001FE5 4D               [ 4] 6851 	ld	c, l
      001FE6 44               [ 4] 6852 	ld	b, h
      001FE7 03               [ 6] 6853 	inc	bc
      001FE8                       6854 00239$:
      001FE8 CB 28            [ 8] 6855 	sra	b
      001FEA CB 19            [ 8] 6856 	rr	c
      001FEC 79               [ 4] 6857 	ld	a, c
      001FED C6 50            [ 7] 6858 	add	a, #0x50
      001FEF DD 6E F7         [19] 6859 	ld	l, -9 (ix)
      001FF2 29               [11] 6860 	add	hl, hl
      001FF3 29               [11] 6861 	add	hl, hl
      001FF4 29               [11] 6862 	add	hl, hl
      001FF5 29               [11] 6863 	add	hl, hl
      001FF6 85               [ 4] 6864 	add	a, l
      001FF7 DD 77 F5         [19] 6865 	ld	-11 (ix), a
                                   6866 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001FFA DD 6E F9         [19] 6867 	ld	l, -7 (ix)
      001FFD 26 00            [ 7] 6868 	ld	h, #0x00
      001FFF 29               [11] 6869 	add	hl, hl
      002000 29               [11] 6870 	add	hl, hl
      002001 29               [11] 6871 	add	hl, hl
      002002 29               [11] 6872 	add	hl, hl
      002003 DD 5E FA         [19] 6873 	ld	e, -6 (ix)
      002006 16 00            [ 7] 6874 	ld	d, #0x00
      002008 EB               [ 4] 6875 	ex	de, hl
      002009 29               [11] 6876 	add	hl, hl
      00200A 29               [11] 6877 	add	hl, hl
      00200B 29               [11] 6878 	add	hl, hl
      00200C 29               [11] 6879 	add	hl, hl
      00200D EB               [ 4] 6880 	ex	de, hl
      00200E BF               [ 4] 6881 	cp	a, a
      00200F ED 52            [15] 6882 	sbc	hl, de
      002011 4D               [ 4] 6883 	ld	c, l
      002012 44               [ 4] 6884 	ld	b, h
      002013 CB 7C            [ 8] 6885 	bit	7, h
      002015 28 03            [12] 6886 	jr	Z, 00240$
      002017 23               [ 6] 6887 	inc	hl
      002018 4D               [ 4] 6888 	ld	c, l
      002019 44               [ 4] 6889 	ld	b, h
      00201A                       6890 00240$:
      00201A CB 28            [ 8] 6891 	sra	b
      00201C CB 19            [ 8] 6892 	rr	c
      00201E DD 7E FA         [19] 6893 	ld	a, -6 (ix)
      002021 87               [ 4] 6894 	add	a, a
      002022 87               [ 4] 6895 	add	a, a
      002023 87               [ 4] 6896 	add	a, a
      002024 87               [ 4] 6897 	add	a, a
      002025 81               [ 4] 6898 	add	a, c
      002026 DD 77 F6         [19] 6899 	ld	-10 (ix), a
                                   6900 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      002029 26 01            [ 7] 6901 	ld	h, #0x01
      00202B DD 6E F6         [19] 6902 	ld	l, -10 (ix)
      00202E E5               [11] 6903 	push	hl
      00202F DD 66 F5         [19] 6904 	ld	h, -11 (ix)
      002032 DD 6E 04         [19] 6905 	ld	l, 4 (ix)
      002035 E5               [11] 6906 	push	hl
      002036 DD 7E FB         [19] 6907 	ld	a, -5 (ix)
      002039 F5               [11] 6908 	push	af
      00203A 33               [ 6] 6909 	inc	sp
      00203B CDr56r0C         [17] 6910 	call	_DrawHitSprite
      00203E F1               [10] 6911 	pop	af
      00203F F1               [10] 6912 	pop	af
      002040 33               [ 6] 6913 	inc	sp
      002041 18 23            [12] 6914 	jr	00301$
      002043                       6915 00143$:
                                   6916 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      002043 DD 4E FF         [19] 6917 	ld	c, -1 (ix)
      002046 3E 48            [ 7] 6918 	ld	a, #0x48
      002048 91               [ 4] 6919 	sub	a, c
      002049 4F               [ 4] 6920 	ld	c, a
      00204A DD 7E F6         [19] 6921 	ld	a, -10 (ix)
      00204D 91               [ 4] 6922 	sub	a, c
      00204E 26 00            [ 7] 6923 	ld	h, #0x00
      002050 E5               [11] 6924 	push	hl
      002051 33               [ 6] 6925 	inc	sp
      002052 F5               [11] 6926 	push	af
      002053 33               [ 6] 6927 	inc	sp
      002054 DD 66 F5         [19] 6928 	ld	h, -11 (ix)
      002057 DD 6E 04         [19] 6929 	ld	l, 4 (ix)
      00205A E5               [11] 6930 	push	hl
      00205B DD 7E FB         [19] 6931 	ld	a, -5 (ix)
      00205E F5               [11] 6932 	push	af
      00205F 33               [ 6] 6933 	inc	sp
      002060 CDr56r0C         [17] 6934 	call	_DrawHitSprite
      002063 F1               [10] 6935 	pop	af
      002064 F1               [10] 6936 	pop	af
      002065 33               [ 6] 6937 	inc	sp
                                   6938 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002066                       6939 00301$:
      002066 3E 0C            [ 7] 6940 	ld	a, #0x0c
      002068 DD 96 FF         [19] 6941 	sub	a, -1 (ix)
      00206B 3E 00            [ 7] 6942 	ld	a, #0x00
      00206D 17               [ 4] 6943 	rla
      00206E 5F               [ 4] 6944 	ld	e, a
      00206F 3E 09            [ 7] 6945 	ld	a, #0x09
      002071 DD 96 FF         [19] 6946 	sub	a, -1 (ix)
      002074 3E 00            [ 7] 6947 	ld	a, #0x00
      002076 17               [ 4] 6948 	rla
      002077 4F               [ 4] 6949 	ld	c, a
      002078 3E 06            [ 7] 6950 	ld	a, #0x06
      00207A DD 96 FF         [19] 6951 	sub	a, -1 (ix)
      00207D 3E 00            [ 7] 6952 	ld	a, #0x00
      00207F 17               [ 4] 6953 	rla
      002080 DD 77 FC         [19] 6954 	ld	-4 (ix), a
      002083 3E 03            [ 7] 6955 	ld	a, #0x03
      002085 DD 96 FF         [19] 6956 	sub	a, -1 (ix)
      002088 3E 00            [ 7] 6957 	ld	a, #0x00
      00208A 17               [ 4] 6958 	rla
      00208B DD 77 FD         [19] 6959 	ld	-3 (ix), a
      00208E 06 00            [ 7] 6960 	ld	b, #0x00
      002090                       6961 00226$:
      002090 78               [ 4] 6962 	ld	a, b
      002091 D6 0C            [ 7] 6963 	sub	a, #0x0c
      002093 D2r98r1F         [10] 6964 	jp	NC, 00166$
                                   6965 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002096 16 00            [ 7] 6966 	ld	d, #0x00
      002098                       6967 00223$:
      002098 7A               [ 4] 6968 	ld	a, d
      002099 D6 06            [ 7] 6969 	sub	a, #0x06
      00209B D2r44r21         [10] 6970 	jp	NC, 00227$
                                   6971 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00209E D5               [11] 6972 	push	de
      00209F 5A               [ 4] 6973 	ld	e, d
      0020A0 16 00            [ 7] 6974 	ld	d, #0x00
      0020A2 6B               [ 4] 6975 	ld	l, e
      0020A3 62               [ 4] 6976 	ld	h, d
      0020A4 29               [11] 6977 	add	hl, hl
      0020A5 19               [11] 6978 	add	hl, de
      0020A6 29               [11] 6979 	add	hl, hl
      0020A7 29               [11] 6980 	add	hl, hl
      0020A8 11r00r00         [10] 6981 	ld	de, #_playfield
      0020AB 19               [11] 6982 	add	hl, de
      0020AC D1               [10] 6983 	pop	de
      0020AD 7D               [ 4] 6984 	ld	a, l
      0020AE 80               [ 4] 6985 	add	a, b
      0020AF 6F               [ 4] 6986 	ld	l, a
      0020B0 30 01            [12] 6987 	jr	NC, 00646$
      0020B2 24               [ 4] 6988 	inc	h
      0020B3                       6989 00646$:
      0020B3 7E               [ 7] 6990 	ld	a, (hl)
      0020B4 DD 77 FE         [19] 6991 	ld	-2 (ix), a
      0020B7 DD CB FE 7E      [20] 6992 	bit	7, -2 (ix)
      0020BB CAr40r21         [10] 6993 	jp	Z,00224$
                                   6994 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      0020BE 7B               [ 4] 6995 	ld	a, e
      0020BF B7               [ 4] 6996 	or	a, a
      0020C0 28 2C            [12] 6997 	jr	Z, 00160$
                                   6998 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      0020C2 2A 9E FC         [16] 6999 	ld	hl, (_JIFFY)
      0020C5 7D               [ 4] 7000 	ld	a, l
      0020C6 E6 03            [ 7] 7001 	and	a, #0x03
      0020C8 28 14            [12] 7002 	jr	Z, 00148$
                                   7003 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0020CA DD 7E FE         [19] 7004 	ld	a, -2 (ix)
      0020CD CB BF            [ 8] 7005 	res	7, a
      0020CF C5               [11] 7006 	push	bc
      0020D0 D5               [11] 7007 	push	de
      0020D1 F5               [11] 7008 	push	af
      0020D2 33               [ 6] 7009 	inc	sp
      0020D3 4A               [ 4] 7010 	ld	c, d
      0020D4 C5               [11] 7011 	push	bc
      0020D5 CDrA8r19         [17] 7012 	call	_DrawBlock
      0020D8 F1               [10] 7013 	pop	af
      0020D9 33               [ 6] 7014 	inc	sp
      0020DA D1               [10] 7015 	pop	de
      0020DB C1               [10] 7016 	pop	bc
      0020DC 18 62            [12] 7017 	jr	00224$
      0020DE                       7018 00148$:
                                   7019 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      0020DE C5               [11] 7020 	push	bc
      0020DF D5               [11] 7021 	push	de
      0020E0 AF               [ 4] 7022 	xor	a, a
      0020E1 F5               [11] 7023 	push	af
      0020E2 33               [ 6] 7024 	inc	sp
      0020E3 4A               [ 4] 7025 	ld	c, d
      0020E4 C5               [11] 7026 	push	bc
      0020E5 CDrA8r19         [17] 7027 	call	_DrawBlock
      0020E8 F1               [10] 7028 	pop	af
      0020E9 33               [ 6] 7029 	inc	sp
      0020EA D1               [10] 7030 	pop	de
      0020EB C1               [10] 7031 	pop	bc
      0020EC 18 52            [12] 7032 	jr	00224$
      0020EE                       7033 00160$:
                                   7034 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      0020EE 79               [ 4] 7035 	ld	a, c
      0020EF B7               [ 4] 7036 	or	a, a
      0020F0 28 11            [12] 7037 	jr	Z, 00157$
      0020F2 C5               [11] 7038 	push	bc
      0020F3 D5               [11] 7039 	push	de
      0020F4 3E 2A            [ 7] 7040 	ld	a, #0x2a
      0020F6 F5               [11] 7041 	push	af
      0020F7 33               [ 6] 7042 	inc	sp
      0020F8 4A               [ 4] 7043 	ld	c, d
      0020F9 C5               [11] 7044 	push	bc
      0020FA CDr10r1A         [17] 7045 	call	_DrawBlock_SameTile
      0020FD F1               [10] 7046 	pop	af
      0020FE 33               [ 6] 7047 	inc	sp
      0020FF D1               [10] 7048 	pop	de
      002100 C1               [10] 7049 	pop	bc
      002101 18 3D            [12] 7050 	jr	00224$
      002103                       7051 00157$:
                                   7052 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      002103 DD 7E FC         [19] 7053 	ld	a, -4 (ix)
      002106 B7               [ 4] 7054 	or	a, a
      002107 28 11            [12] 7055 	jr	Z, 00154$
      002109 C5               [11] 7056 	push	bc
      00210A D5               [11] 7057 	push	de
      00210B 3E 2B            [ 7] 7058 	ld	a, #0x2b
      00210D F5               [11] 7059 	push	af
      00210E 33               [ 6] 7060 	inc	sp
      00210F 4A               [ 4] 7061 	ld	c, d
      002110 C5               [11] 7062 	push	bc
      002111 CDr10r1A         [17] 7063 	call	_DrawBlock_SameTile
      002114 F1               [10] 7064 	pop	af
      002115 33               [ 6] 7065 	inc	sp
      002116 D1               [10] 7066 	pop	de
      002117 C1               [10] 7067 	pop	bc
      002118 18 26            [12] 7068 	jr	00224$
      00211A                       7069 00154$:
                                   7070 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00211A DD 7E FD         [19] 7071 	ld	a, -3 (ix)
      00211D B7               [ 4] 7072 	or	a, a
      00211E 28 11            [12] 7073 	jr	Z, 00151$
      002120 C5               [11] 7074 	push	bc
      002121 D5               [11] 7075 	push	de
      002122 3E 2C            [ 7] 7076 	ld	a, #0x2c
      002124 F5               [11] 7077 	push	af
      002125 33               [ 6] 7078 	inc	sp
      002126 4A               [ 4] 7079 	ld	c, d
      002127 C5               [11] 7080 	push	bc
      002128 CDr10r1A         [17] 7081 	call	_DrawBlock_SameTile
      00212B F1               [10] 7082 	pop	af
      00212C 33               [ 6] 7083 	inc	sp
      00212D D1               [10] 7084 	pop	de
      00212E C1               [10] 7085 	pop	bc
      00212F 18 0F            [12] 7086 	jr	00224$
      002131                       7087 00151$:
                                   7088 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      002131 C5               [11] 7089 	push	bc
      002132 D5               [11] 7090 	push	de
      002133 3E 2D            [ 7] 7091 	ld	a, #0x2d
      002135 F5               [11] 7092 	push	af
      002136 33               [ 6] 7093 	inc	sp
      002137 4A               [ 4] 7094 	ld	c, d
      002138 C5               [11] 7095 	push	bc
      002139 CDr10r1A         [17] 7096 	call	_DrawBlock_SameTile
      00213C F1               [10] 7097 	pop	af
      00213D 33               [ 6] 7098 	inc	sp
      00213E D1               [10] 7099 	pop	de
      00213F C1               [10] 7100 	pop	bc
      002140                       7101 00224$:
                                   7102 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002140 14               [ 4] 7103 	inc	d
      002141 C3r98r20         [10] 7104 	jp	00223$
      002144                       7105 00227$:
                                   7106 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002144 04               [ 4] 7107 	inc	b
      002145 C3r90r20         [10] 7108 	jp	00226$
      002148                       7109 00168$:
                                   7110 ;src\/CheckPlayfield.h:196: HideHitSprite();
      002148 CDr68r0E         [17] 7111 	call	_HideHitSprite
                                   7112 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00214B DD 36 FD 00      [19] 7113 	ld	-3 (ix), #0
      00214F                       7114 00235$:
      00214F DD 7E FD         [19] 7115 	ld	a, -3 (ix)
      002152 D6 0C            [ 7] 7116 	sub	a, #0x0c
      002154 D2r32r22         [10] 7117 	jp	NC, 00177$
                                   7118 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002157 DD 36 FE 00      [19] 7119 	ld	-2 (ix), #0
      00215B                       7120 00232$:
      00215B DD 7E FE         [19] 7121 	ld	a, -2 (ix)
      00215E D6 06            [ 7] 7122 	sub	a, #0x06
      002160 D2r2Cr22         [10] 7123 	jp	NC, 00236$
                                   7124 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002163 DD 4E FE         [19] 7125 	ld	c, -2 (ix)
      002166 06 00            [ 7] 7126 	ld	b, #0x00
      002168 69               [ 4] 7127 	ld	l, c
      002169 60               [ 4] 7128 	ld	h, b
      00216A 29               [11] 7129 	add	hl, hl
      00216B 09               [11] 7130 	add	hl, bc
      00216C 29               [11] 7131 	add	hl, hl
      00216D 29               [11] 7132 	add	hl, hl
      00216E EB               [ 4] 7133 	ex	de, hl
      00216F 21r00r00         [10] 7134 	ld	hl, #_playfield
      002172 19               [11] 7135 	add	hl, de
      002173 DD 75 FB         [19] 7136 	ld	-5 (ix), l
      002176 DD 74 FC         [19] 7137 	ld	-4 (ix), h
      002179 DD 7E FB         [19] 7138 	ld	a, -5 (ix)
      00217C DD 86 FD         [19] 7139 	add	a, -3 (ix)
      00217F 4F               [ 4] 7140 	ld	c, a
      002180 DD 7E FC         [19] 7141 	ld	a, -4 (ix)
      002183 CE 00            [ 7] 7142 	adc	a, #0x00
      002185 47               [ 4] 7143 	ld	b, a
      002186 0A               [ 7] 7144 	ld	a, (bc)
      002187 07               [ 4] 7145 	rlca
      002188 D2r26r22         [10] 7146 	jp	NC,00233$
                                   7147 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      00218B 2Ar04r00         [16] 7148 	ld	hl, (_blocksRemoved)
      00218E 23               [ 6] 7149 	inc	hl
      00218F 22r04r00         [16] 7150 	ld	(_blocksRemoved), hl
                                   7151 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002192 DD 7E FB         [19] 7152 	ld	a, -5 (ix)
      002195 DD 77 F7         [19] 7153 	ld	-9 (ix), a
      002198 DD 7E FC         [19] 7154 	ld	a, -4 (ix)
      00219B DD 77 F8         [19] 7155 	ld	-8 (ix), a
      00219E DD 7E FD         [19] 7156 	ld	a, -3 (ix)
      0021A1 DD 77 FF         [19] 7157 	ld	-1 (ix), a
      0021A4                       7158 00229$:
      0021A4 DD 7E FF         [19] 7159 	ld	a, -1 (ix)
      0021A7 B7               [ 4] 7160 	or	a, a
      0021A8 28 7C            [12] 7161 	jr	Z, 00233$
                                   7162 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      0021AA 0E 01            [ 7] 7163 	ld	c, #0x01
                                   7164 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0021AC DD 7E FF         [19] 7165 	ld	a, -1 (ix)
      0021AF DD 77 FC         [19] 7166 	ld	-4 (ix), a
      0021B2 3D               [ 4] 7167 	dec	a
      0021B3 DD 86 F7         [19] 7168 	add	a, -9 (ix)
      0021B6 5F               [ 4] 7169 	ld	e, a
      0021B7 3E 00            [ 7] 7170 	ld	a, #0x00
      0021B9 DD 8E F8         [19] 7171 	adc	a, -8 (ix)
      0021BC 57               [ 4] 7172 	ld	d, a
      0021BD 1A               [ 7] 7173 	ld	a, (de)
      0021BE 07               [ 4] 7174 	rlca
      0021BF 30 02            [12] 7175 	jr	NC, 00170$
      0021C1 0E 02            [ 7] 7176 	ld	c, #0x02
      0021C3                       7177 00170$:
                                   7178 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0021C3 DD 7E FC         [19] 7179 	ld	a, -4 (ix)
      0021C6 3D               [ 4] 7180 	dec	a
      0021C7 3D               [ 4] 7181 	dec	a
      0021C8 DD 86 F7         [19] 7182 	add	a, -9 (ix)
      0021CB 5F               [ 4] 7183 	ld	e, a
      0021CC 3E 00            [ 7] 7184 	ld	a, #0x00
      0021CE DD 8E F8         [19] 7185 	adc	a, -8 (ix)
      0021D1 57               [ 4] 7186 	ld	d, a
      0021D2 1A               [ 7] 7187 	ld	a, (de)
      0021D3 07               [ 4] 7188 	rlca
      0021D4 30 01            [12] 7189 	jr	NC, 00172$
      0021D6 0C               [ 4] 7190 	inc	c
      0021D7                       7191 00172$:
                                   7192 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      0021D7 DD 7E F7         [19] 7193 	ld	a, -9 (ix)
      0021DA DD 86 FF         [19] 7194 	add	a, -1 (ix)
      0021DD DD 77 F9         [19] 7195 	ld	-7 (ix), a
      0021E0 DD 7E F8         [19] 7196 	ld	a, -8 (ix)
      0021E3 CE 00            [ 7] 7197 	adc	a, #0x00
      0021E5 DD 77 FA         [19] 7198 	ld	-6 (ix), a
      0021E8 DD 6E FF         [19] 7199 	ld	l, -1 (ix)
      0021EB 26 00            [ 7] 7200 	ld	h, #0x00
      0021ED 59               [ 4] 7201 	ld	e, c
      0021EE 16 00            [ 7] 7202 	ld	d, #0x00
      0021F0 BF               [ 4] 7203 	cp	a, a
      0021F1 ED 52            [15] 7204 	sbc	hl, de
      0021F3 CB 7C            [ 8] 7205 	bit	7, h
      0021F5 20 18            [12] 7206 	jr	NZ, 00243$
      0021F7 DD 7E FF         [19] 7207 	ld	a, -1 (ix)
      0021FA 91               [ 4] 7208 	sub	a, c
      0021FB DD 86 F7         [19] 7209 	add	a, -9 (ix)
      0021FE 4F               [ 4] 7210 	ld	c, a
      0021FF 3E 00            [ 7] 7211 	ld	a, #0x00
      002201 DD 8E F8         [19] 7212 	adc	a, -8 (ix)
      002204 47               [ 4] 7213 	ld	b, a
      002205 0A               [ 7] 7214 	ld	a, (bc)
      002206 DD 77 FB         [19] 7215 	ld	-5 (ix), a
      002209 DD 36 FC 00      [19] 7216 	ld	-4 (ix), #0
      00220D 18 07            [12] 7217 	jr	00244$
      00220F                       7218 00243$:
      00220F AF               [ 4] 7219 	xor	a, a
      002210 DD 77 FB         [19] 7220 	ld	-5 (ix), a
      002213 DD 77 FC         [19] 7221 	ld	-4 (ix), a
      002216                       7222 00244$:
      002216 DD 7E FB         [19] 7223 	ld	a, -5 (ix)
      002219 DD 6E F9         [19] 7224 	ld	l, -7 (ix)
      00221C DD 66 FA         [19] 7225 	ld	h, -6 (ix)
      00221F 77               [ 7] 7226 	ld	(hl), a
                                   7227 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002220 DD 35 FF         [23] 7228 	dec	-1 (ix)
      002223 C3rA4r21         [10] 7229 	jp	00229$
      002226                       7230 00233$:
                                   7231 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002226 DD 34 FE         [23] 7232 	inc	-2 (ix)
      002229 C3r5Br21         [10] 7233 	jp	00232$
      00222C                       7234 00236$:
                                   7235 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00222C DD 34 FD         [23] 7236 	inc	-3 (ix)
      00222F C3r4Fr21         [10] 7237 	jp	00235$
      002232                       7238 00177$:
                                   7239 ;src\/CheckPlayfield.h:227: oldLevel = level;
      002232 3Ar06r00         [13] 7240 	ld	a, (#_level + 0)
      002235 4F               [ 4] 7241 	ld	c, a
                                   7242 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      002236 21r04r00         [10] 7243 	ld	hl, #_blocksRemoved
      002239 46               [ 7] 7244 	ld	b, (hl)
      00223A 23               [ 6] 7245 	inc	hl
      00223B 56               [ 7] 7246 	ld	d, (hl)
      00223C 78               [ 4] 7247 	ld	a, b
      00223D D6 5A            [ 7] 7248 	sub	a, #0x5a
      00223F 7A               [ 4] 7249 	ld	a, d
      002240 DE 00            [ 7] 7250 	sbc	a, #0x00
      002242 38 19            [12] 7251 	jr	C, 00185$
                                   7252 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      002244 C5               [11] 7253 	push	bc
      002245 21 1E 00         [10] 7254 	ld	hl, #0x001e
      002248 E5               [11] 7255 	push	hl
      002249 58               [ 4] 7256 	ld	e, b
      00224A D5               [11] 7257 	push	de
      00224B CDr00r00         [17] 7258 	call	__divuint
      00224E F1               [10] 7259 	pop	af
      00224F F1               [10] 7260 	pop	af
      002250 C1               [10] 7261 	pop	bc
      002251 7D               [ 4] 7262 	ld	a, l
      002252 3C               [ 4] 7263 	inc	a
      002253 32r06r00         [13] 7264 	ld	(_level+0), a
                                   7265 ;src\/CheckPlayfield.h:230: speed = 15;
      002256 21r96r00         [10] 7266 	ld	hl, #_speed
      002259 36 0F            [10] 7267 	ld	(hl), #0x0f
      00225B 18 32            [12] 7268 	jr	00186$
      00225D                       7269 00185$:
                                   7270 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      00225D 78               [ 4] 7271 	ld	a, b
      00225E D6 3C            [ 7] 7272 	sub	a, #0x3c
      002260 7A               [ 4] 7273 	ld	a, d
      002261 DE 00            [ 7] 7274 	sbc	a, #0x00
      002263 38 0C            [12] 7275 	jr	C, 00182$
                                   7276 ;src\/CheckPlayfield.h:234: level = 3;
      002265 21r06r00         [10] 7277 	ld	hl, #_level
      002268 36 03            [10] 7278 	ld	(hl), #0x03
                                   7279 ;src\/CheckPlayfield.h:235: speed = 30;
      00226A 21r96r00         [10] 7280 	ld	hl, #_speed
      00226D 36 1E            [10] 7281 	ld	(hl), #0x1e
      00226F 18 1E            [12] 7282 	jr	00186$
      002271                       7283 00182$:
                                   7284 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      002271 78               [ 4] 7285 	ld	a, b
      002272 D6 1E            [ 7] 7286 	sub	a, #0x1e
      002274 7A               [ 4] 7287 	ld	a, d
      002275 DE 00            [ 7] 7288 	sbc	a, #0x00
      002277 38 0C            [12] 7289 	jr	C, 00179$
                                   7290 ;src\/CheckPlayfield.h:238: level = 2;
      002279 21r06r00         [10] 7291 	ld	hl, #_level
      00227C 36 02            [10] 7292 	ld	(hl), #0x02
                                   7293 ;src\/CheckPlayfield.h:239: speed = 45;
      00227E 21r96r00         [10] 7294 	ld	hl, #_speed
      002281 36 2D            [10] 7295 	ld	(hl), #0x2d
      002283 18 0A            [12] 7296 	jr	00186$
      002285                       7297 00179$:
                                   7298 ;src\/CheckPlayfield.h:242: level = 1;
      002285 21r06r00         [10] 7299 	ld	hl, #_level
      002288 36 01            [10] 7300 	ld	(hl), #0x01
                                   7301 ;src\/CheckPlayfield.h:243: speed = 60;
      00228A 21r96r00         [10] 7302 	ld	hl, #_speed
      00228D 36 3C            [10] 7303 	ld	(hl), #0x3c
      00228F                       7304 00186$:
                                   7305 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      00228F 3Ar06r00         [13] 7306 	ld	a,(#_level + 0)
      002292 91               [ 4] 7307 	sub	a, c
      002293 28 05            [12] 7308 	jr	Z, 00188$
                                   7309 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      002295 21r07r00         [10] 7310 	ld	hl, #_newLevel
      002298 36 01            [10] 7311 	ld	(hl), #0x01
      00229A                       7312 00188$:
                                   7313 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      00229A CDrCCr1A         [17] 7314 	call	_DrawPlayfield
                                   7315 ;src\/CheckPlayfield.h:257: DrawScore();
      00229D CDr7Br15         [17] 7316 	call	_DrawScore
                                   7317 ;src\/CheckPlayfield.h:259: iteration++;
      0022A0 DD 34 04         [23] 7318 	inc	4 (ix)
                                   7319 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      0022A3 DD 7E 04         [19] 7320 	ld	a, 4 (ix)
      0022A6 F5               [11] 7321 	push	af
      0022A7 33               [ 6] 7322 	inc	sp
      0022A8 CDr3Dr1B         [17] 7323 	call	_CheckPlayfield
      0022AB 18 03            [12] 7324 	jr	00237$
      0022AD                       7325 00190$:
                                   7326 ;src\/CheckPlayfield.h:264: DrawScore();
      0022AD CDr7Br15         [17] 7327 	call	_DrawScore
      0022B0                       7328 00237$:
                                   7329 ;src\/CheckPlayfield.h:266: }
      0022B0 DD F9            [10] 7330 	ld	sp, ix
      0022B2 DD E1            [14] 7331 	pop	ix
      0022B4 C9               [10] 7332 	ret
                                   7333 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   7334 ;	---------------------------------
                                   7335 ; Function RandomIndex
                                   7336 ; ---------------------------------
      0022B5                       7337 _RandomIndex::
                                   7338 ;src\/GameLogic.h:5: do {
      0022B5                       7339 00101$:
                                   7340 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      0022B5 CDrA3r00         [17] 7341 	call	_GetRandom
      0022B8 7D               [ 4] 7342 	ld	a, l
      0022B9 E6 07            [ 7] 7343 	and	a, #0x07
      0022BB 6F               [ 4] 7344 	ld	l, a
                                   7345 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      0022BC 3E 04            [ 7] 7346 	ld	a, #0x04
      0022BE 95               [ 4] 7347 	sub	a, l
      0022BF 38 F4            [12] 7348 	jr	C, 00101$
                                   7349 ;src\/GameLogic.h:10: return random;
                                   7350 ;src\/GameLogic.h:11: }
      0022C1 C9               [10] 7351 	ret
                                   7352 ;src\/GameLogic.h:13: void RandomPiece() {
                                   7353 ;	---------------------------------
                                   7354 ; Function RandomPiece
                                   7355 ; ---------------------------------
      0022C2                       7356 _RandomPiece::
                                   7357 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      0022C2 3Ar93r00         [13] 7358 	ld	a,(#_nextTopPiece + 0)
      0022C5 32r90r00         [13] 7359 	ld	(#_topPiece),a
                                   7360 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      0022C8 3Ar94r00         [13] 7361 	ld	a,(#_nextMidPiece + 0)
      0022CB 32r91r00         [13] 7362 	ld	(#_midPiece),a
                                   7363 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      0022CE 3Ar95r00         [13] 7364 	ld	a,(#_nextBottomPiece + 0)
      0022D1 32r92r00         [13] 7365 	ld	(#_bottomPiece),a
                                   7366 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      0022D4 01r18r00         [10] 7367 	ld	bc, #_pieces+0
      0022D7 C5               [11] 7368 	push	bc
      0022D8 CDrB5r22         [17] 7369 	call	_RandomIndex
      0022DB C1               [10] 7370 	pop	bc
      0022DC 26 00            [ 7] 7371 	ld	h, #0x00
      0022DE 09               [11] 7372 	add	hl, bc
      0022DF 7E               [ 7] 7373 	ld	a, (hl)
      0022E0 32r93r00         [13] 7374 	ld	(_nextTopPiece+0), a
                                   7375 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      0022E3 C5               [11] 7376 	push	bc
      0022E4 CDrB5r22         [17] 7377 	call	_RandomIndex
      0022E7 C1               [10] 7378 	pop	bc
      0022E8 26 00            [ 7] 7379 	ld	h, #0x00
      0022EA 09               [11] 7380 	add	hl, bc
      0022EB 7E               [ 7] 7381 	ld	a, (hl)
      0022EC 32r94r00         [13] 7382 	ld	(_nextMidPiece+0), a
                                   7383 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      0022EF C5               [11] 7384 	push	bc
      0022F0 CDrB5r22         [17] 7385 	call	_RandomIndex
      0022F3 C1               [10] 7386 	pop	bc
      0022F4 26 00            [ 7] 7387 	ld	h, #0x00
      0022F6 09               [11] 7388 	add	hl, bc
      0022F7 7E               [ 7] 7389 	ld	a, (hl)
      0022F8 32r95r00         [13] 7390 	ld	(_nextBottomPiece+0), a
                                   7391 ;src\/GameLogic.h:21: }
      0022FB C9               [10] 7392 	ret
                                   7393 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   7394 ;	---------------------------------
                                   7395 ; Function UpdateAndDrawPieceStatic
                                   7396 ; ---------------------------------
      0022FC                       7397 _UpdateAndDrawPieceStatic::
                                   7398 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      0022FC 01r00r00         [10] 7399 	ld	bc, #_playfield+0
      0022FF ED 5Br01r00      [20] 7400 	ld	de, (_col)
      002303 16 00            [ 7] 7401 	ld	d, #0x00
      002305 6B               [ 4] 7402 	ld	l, e
      002306 62               [ 4] 7403 	ld	h, d
      002307 29               [11] 7404 	add	hl, hl
      002308 19               [11] 7405 	add	hl, de
      002309 29               [11] 7406 	add	hl, hl
      00230A 29               [11] 7407 	add	hl, hl
      00230B 09               [11] 7408 	add	hl, bc
      00230C EB               [ 4] 7409 	ex	de, hl
      00230D 3Ar02r00         [13] 7410 	ld	a, (#_line + 0)
      002310 6F               [ 4] 7411 	ld	l, a
      002311 26 00            [ 7] 7412 	ld	h, #0x00
      002313 19               [11] 7413 	add	hl, de
      002314 3Ar90r00         [13] 7414 	ld	a,(#_topPiece + 0)
      002317 77               [ 7] 7415 	ld	(hl), a
                                   7416 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      002318 ED 5Br01r00      [20] 7417 	ld	de, (_col)
      00231C 16 00            [ 7] 7418 	ld	d, #0x00
      00231E 6B               [ 4] 7419 	ld	l, e
      00231F 62               [ 4] 7420 	ld	h, d
      002320 29               [11] 7421 	add	hl, hl
      002321 19               [11] 7422 	add	hl, de
      002322 29               [11] 7423 	add	hl, hl
      002323 29               [11] 7424 	add	hl, hl
      002324 09               [11] 7425 	add	hl, bc
      002325 EB               [ 4] 7426 	ex	de, hl
      002326 3Ar02r00         [13] 7427 	ld	a, (#_line + 0)
      002329 6F               [ 4] 7428 	ld	l, a
      00232A 2C               [ 4] 7429 	inc	l
      00232B 26 00            [ 7] 7430 	ld	h, #0x00
      00232D 19               [11] 7431 	add	hl, de
      00232E 3Ar91r00         [13] 7432 	ld	a,(#_midPiece + 0)
      002331 77               [ 7] 7433 	ld	(hl), a
                                   7434 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      002332 ED 5Br01r00      [20] 7435 	ld	de, (_col)
      002336 16 00            [ 7] 7436 	ld	d, #0x00
      002338 6B               [ 4] 7437 	ld	l, e
      002339 62               [ 4] 7438 	ld	h, d
      00233A 29               [11] 7439 	add	hl, hl
      00233B 19               [11] 7440 	add	hl, de
      00233C 29               [11] 7441 	add	hl, hl
      00233D 29               [11] 7442 	add	hl, hl
      00233E 09               [11] 7443 	add	hl, bc
      00233F EB               [ 4] 7444 	ex	de, hl
      002340 3Ar02r00         [13] 7445 	ld	a, (#_line + 0)
      002343 6F               [ 4] 7446 	ld	l, a
      002344 2C               [ 4] 7447 	inc	l
      002345 2C               [ 4] 7448 	inc	l
      002346 26 00            [ 7] 7449 	ld	h, #0x00
      002348 19               [11] 7450 	add	hl, de
      002349 3Ar92r00         [13] 7451 	ld	a,(#_bottomPiece + 0)
      00234C 77               [ 7] 7452 	ld	(hl), a
                                   7453 ;src\/GameLogic.h:29: DrawPiece(line);
      00234D C5               [11] 7454 	push	bc
      00234E 3Ar02r00         [13] 7455 	ld	a,(#_line + 0)
      002351 F5               [11] 7456 	push	af
      002352 33               [ 6] 7457 	inc	sp
      002353 CDrA9r1A         [17] 7458 	call	_DrawPiece
      002356 33               [ 6] 7459 	inc	sp
      002357 C1               [10] 7460 	pop	bc
                                   7461 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002358 3E 02            [ 7] 7462 	ld	a, #0x02
      00235A 32r01r00         [13] 7463 	ld	(#_col), a
                                   7464 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   7465 ;src\/GameLogic.h:35: counter = 0;
      00235D 3E 00            [ 7] 7466 	ld	a,#0x00
      00235F 32r02r00         [13] 7467 	ld	(#_line),a
      002362 32r03r00         [13] 7468 	ld	(#_counter), a
                                   7469 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      002365 3Ar18r00         [13] 7470 	ld	a, (#_playfield + 24)
      002368 B7               [ 4] 7471 	or	a, a
      002369 20 0C            [12] 7472 	jr	NZ, 00101$
                                   7473 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      00236B 3Ar19r00         [13] 7474 	ld	a, (#_playfield + 25)
      00236E B7               [ 4] 7475 	or	a, a
      00236F 20 06            [12] 7476 	jr	NZ, 00101$
                                   7477 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      002371 3Ar1Ar00         [13] 7478 	ld	a, (#_playfield + 26)
      002374 B7               [ 4] 7479 	or	a, a
      002375 28 0B            [12] 7480 	jr	Z, 00102$
      002377                       7481 00101$:
                                   7482 ;src\/GameLogic.h:41: gameOver = TRUE;
      002377 FD 21r00r00      [14] 7483 	ld	iy, #_gameOver
      00237B FD 36 00 01      [19] 7484 	ld	0 (iy), #0x01
      00237F C3rCCr1A         [10] 7485 	jp	_DrawPlayfield
      002382                       7486 00102$:
                                   7487 ;src\/GameLogic.h:44: RandomPiece();
      002382 CDrC2r22         [17] 7488 	call	_RandomPiece
                                   7489 ;src\/GameLogic.h:46: CheckPlayfield(1);
      002385 3E 01            [ 7] 7490 	ld	a, #0x01
      002387 F5               [11] 7491 	push	af
      002388 33               [ 6] 7492 	inc	sp
      002389 CDr3Dr1B         [17] 7493 	call	_CheckPlayfield
      00238C 33               [ 6] 7494 	inc	sp
                                   7495 ;src\/GameLogic.h:48: DrawNextPiece();
      00238D CDr21r14         [17] 7496 	call	_DrawNextPiece
                                   7497 ;src\/GameLogic.h:51: DrawPlayfield();
                                   7498 ;src\/GameLogic.h:52: }
      002390 C3rCCr1A         [10] 7499 	jp	_DrawPlayfield
                                   7500 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   7501 ;	---------------------------------
                                   7502 ; Function BlinkPauseText
                                   7503 ; ---------------------------------
      002393                       7504 _BlinkPauseText::
                                   7505 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      002393 2A 9E FC         [16] 7506 	ld	hl, (_JIFFY)
      002396 CB 5D            [ 8] 7507 	bit	3, l
      002398 28 0E            [12] 7508 	jr	Z, 00102$
                                   7509 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      00239A 11 0D 0C         [10] 7510 	ld	de, #0x0c0d
      00239D D5               [11] 7511 	push	de
      00239E 21rB1r23         [10] 7512 	ld	hl, #___str_5
      0023A1 E5               [11] 7513 	push	hl
      0023A2 CDr38r11         [17] 7514 	call	_DrawString
      0023A5 F1               [10] 7515 	pop	af
      0023A6 F1               [10] 7516 	pop	af
      0023A7 C9               [10] 7517 	ret
      0023A8                       7518 00102$:
                                   7519 ;src\/GameLogic.h:61: DrawLine(6);
      0023A8 3E 06            [ 7] 7520 	ld	a, #0x06
      0023AA F5               [11] 7521 	push	af
      0023AB 33               [ 6] 7522 	inc	sp
      0023AC CDr71r1A         [17] 7523 	call	_DrawLine
      0023AF 33               [ 6] 7524 	inc	sp
                                   7525 ;src\/GameLogic.h:64: }
      0023B0 C9               [10] 7526 	ret
      0023B1                       7527 ___str_5:
      0023B1 50 41 55 53 45        7528 	.ascii "PAUSE"
      0023B6 00                    7529 	.db 0x00
                                   7530 ;src\/GameLogic.h:66: void Pause() {
                                   7531 ;	---------------------------------
                                   7532 ; Function Pause
                                   7533 ; ---------------------------------
      0023B7                       7534 _Pause::
                                   7535 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      0023B7 11 0D 0C         [10] 7536 	ld	de, #0x0c0d
      0023BA D5               [11] 7537 	push	de
      0023BB 21rF1r23         [10] 7538 	ld	hl, #___str_6
      0023BE E5               [11] 7539 	push	hl
      0023BF CDr38r11         [17] 7540 	call	_DrawString
      0023C2 F1               [10] 7541 	pop	af
      0023C3 F1               [10] 7542 	pop	af
                                   7543 ;src\/GameLogic.h:71: while(TRUE) {
      0023C4                       7544 00114$:
                                   7545 ;src\/GameLogic.h:73: BlinkPauseText();
      0023C4 CDr93r23         [17] 7546 	call	_BlinkPauseText
                                   7547 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      0023C7 2E 07            [ 7] 7548 	ld	l, #0x07
      0023C9 CDr00r00         [17] 7549 	call	_SNSMAT
                                   7550 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      0023CC CB 55            [ 8] 7551 	bit	2, l
      0023CE 28 F4            [12] 7552 	jr	Z, 00114$
                                   7553 ;src\/GameLogic.h:79: while(TRUE) {
      0023D0                       7554 00109$:
                                   7555 ;src\/GameLogic.h:81: BlinkPauseText();
      0023D0 CDr93r23         [17] 7556 	call	_BlinkPauseText
                                   7557 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      0023D3 2E 07            [ 7] 7558 	ld	l, #0x07
      0023D5 CDr00r00         [17] 7559 	call	_SNSMAT
                                   7560 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      0023D8 CB 55            [ 8] 7561 	bit	2, l
      0023DA 20 F4            [12] 7562 	jr	NZ, 00109$
                                   7563 ;src\/GameLogic.h:87: while(TRUE) {
      0023DC                       7564 00104$:
                                   7565 ;src\/GameLogic.h:89: BlinkPauseText();
      0023DC CDr93r23         [17] 7566 	call	_BlinkPauseText
                                   7567 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      0023DF 2E 07            [ 7] 7568 	ld	l, #0x07
      0023E1 CDr00r00         [17] 7569 	call	_SNSMAT
                                   7570 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      0023E4 CB 55            [ 8] 7571 	bit	2, l
      0023E6 28 F4            [12] 7572 	jr	Z, 00104$
                                   7573 ;src\/GameLogic.h:95: DrawLine(6);
      0023E8 3E 06            [ 7] 7574 	ld	a, #0x06
      0023EA F5               [11] 7575 	push	af
      0023EB 33               [ 6] 7576 	inc	sp
      0023EC CDr71r1A         [17] 7577 	call	_DrawLine
      0023EF 33               [ 6] 7578 	inc	sp
                                   7579 ;src\/GameLogic.h:96: return;
                                   7580 ;src\/GameLogic.h:106: }
      0023F0 C9               [10] 7581 	ret
      0023F1                       7582 ___str_6:
      0023F1 50 41 55 53 45        7583 	.ascii "PAUSE"
      0023F6 00                    7584 	.db 0x00
                                   7585 ;src\/GameLogic.h:108: void GameLoop() {
                                   7586 ;	---------------------------------
                                   7587 ; Function GameLoop
                                   7588 ; ---------------------------------
      0023F7                       7589 _GameLoop::
      0023F7 DD E5            [15] 7590 	push	ix
      0023F9 DD 21 00 00      [14] 7591 	ld	ix,#0
      0023FD DD 39            [15] 7592 	add	ix,sp
      0023FF 21 F3 FF         [10] 7593 	ld	hl, #-13
      002402 39               [11] 7594 	add	hl, sp
      002403 F9               [ 6] 7595 	ld	sp, hl
                                   7596 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      002404 DD 36 FF 00      [19] 7597 	ld	-1 (ix), #0
      002408 DD 36 F3 00      [19] 7598 	ld	-13 (ix), #0
                                   7599 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      00240C DD 36 F4 00      [19] 7600 	ld	-12 (ix), #0
      002410 DD 36 F5 00      [19] 7601 	ld	-11 (ix), #0
                                   7602 ;src\/GameLogic.h:115: while(!gameOver) {
      002414                       7603 00150$:
      002414 3Ar00r00         [13] 7604 	ld	a,(#_gameOver + 0)
      002417 B7               [ 4] 7605 	or	a, a
      002418 C2rAFr27         [10] 7606 	jp	NZ, 00152$
                                   7607 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      00241B ED 4B 9E FC      [20] 7608 	ld	bc, (_JIFFY)
                                   7609 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      00241F                       7610 00101$:
      00241F 2A 9E FC         [16] 7611 	ld	hl, (_JIFFY)
      002422 BF               [ 4] 7612 	cp	a, a
      002423 ED 42            [15] 7613 	sbc	hl, bc
      002425 28 F8            [12] 7614 	jr	Z, 00101$
                                   7615 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002427 ED 4Br01r00      [20] 7616 	ld	bc, (_col)
      00242B 06 00            [ 7] 7617 	ld	b, #0x00
      00242D 69               [ 4] 7618 	ld	l, c
      00242E 60               [ 4] 7619 	ld	h, b
      00242F 29               [11] 7620 	add	hl, hl
      002430 09               [11] 7621 	add	hl, bc
      002431 29               [11] 7622 	add	hl, hl
      002432 29               [11] 7623 	add	hl, hl
      002433 EB               [ 4] 7624 	ex	de, hl
      002434 21r00r00         [10] 7625 	ld	hl, #_playfield
      002437 19               [11] 7626 	add	hl, de
      002438 EB               [ 4] 7627 	ex	de, hl
      002439 FD 21r02r00      [14] 7628 	ld	iy, #_line
      00243D FD 6E 00         [19] 7629 	ld	l, 0 (iy)
      002440 26 00            [ 7] 7630 	ld	h, #0x00
      002442 19               [11] 7631 	add	hl, de
      002443 36 00            [10] 7632 	ld	(hl), #0x00
                                   7633 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      002445 ED 4Br01r00      [20] 7634 	ld	bc, (_col)
      002449 06 00            [ 7] 7635 	ld	b, #0x00
      00244B 69               [ 4] 7636 	ld	l, c
      00244C 60               [ 4] 7637 	ld	h, b
      00244D 29               [11] 7638 	add	hl, hl
      00244E 09               [11] 7639 	add	hl, bc
      00244F 29               [11] 7640 	add	hl, hl
      002450 29               [11] 7641 	add	hl, hl
      002451 EB               [ 4] 7642 	ex	de, hl
      002452 21r00r00         [10] 7643 	ld	hl, #_playfield
      002455 19               [11] 7644 	add	hl, de
      002456 EB               [ 4] 7645 	ex	de, hl
      002457 FD 6E 00         [19] 7646 	ld	l, 0 (iy)
      00245A 2C               [ 4] 7647 	inc	l
      00245B 26 00            [ 7] 7648 	ld	h, #0x00
      00245D 19               [11] 7649 	add	hl, de
      00245E 36 00            [10] 7650 	ld	(hl), #0x00
                                   7651 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002460 ED 4Br01r00      [20] 7652 	ld	bc, (_col)
      002464 06 00            [ 7] 7653 	ld	b, #0x00
      002466 69               [ 4] 7654 	ld	l, c
      002467 60               [ 4] 7655 	ld	h, b
      002468 29               [11] 7656 	add	hl, hl
      002469 09               [11] 7657 	add	hl, bc
      00246A 29               [11] 7658 	add	hl, hl
      00246B 29               [11] 7659 	add	hl, hl
      00246C EB               [ 4] 7660 	ex	de, hl
      00246D 21r00r00         [10] 7661 	ld	hl, #_playfield
      002470 19               [11] 7662 	add	hl, de
      002471 EB               [ 4] 7663 	ex	de, hl
      002472 FD 6E 00         [19] 7664 	ld	l, 0 (iy)
      002475 2C               [ 4] 7665 	inc	l
      002476 2C               [ 4] 7666 	inc	l
      002477 26 00            [ 7] 7667 	ld	h, #0x00
      002479 19               [11] 7668 	add	hl, de
      00247A 36 00            [10] 7669 	ld	(hl), #0x00
                                   7670 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      00247C 2E 01            [ 7] 7671 	ld	l, #0x01
      00247E CDr00r00         [17] 7672 	call	_GTSTCK
      002481 DD 75 F6         [19] 7673 	ld	-10 (ix), l
                                   7674 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      002484 2E 01            [ 7] 7675 	ld	l, #0x01
      002486 CDr00r00         [17] 7676 	call	_GTTRIG
      002489 DD 75 F7         [19] 7677 	ld	-9 (ix), l
                                   7678 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      00248C 2E 03            [ 7] 7679 	ld	l, #0x03
      00248E CDr00r00         [17] 7680 	call	_GTTRIG
      002491 DD 75 F8         [19] 7681 	ld	-8 (ix), l
                                   7682 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      002494 DD 7E F6         [19] 7683 	ld	a, -10 (ix)
                                   7684 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      002497 B7               [ 4] 7685 	or	a,a
      002498 20 07            [12] 7686 	jr	NZ, 00105$
      00249A 6F               [ 4] 7687 	ld	l,a
      00249B CDr00r00         [17] 7688 	call	_GTSTCK
      00249E DD 75 F6         [19] 7689 	ld	-10 (ix), l
      0024A1                       7690 00105$:
                                   7691 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0024A1 FD 21r02r00      [14] 7692 	ld	iy, #_line
      0024A5 FD 7E 00         [19] 7693 	ld	a, 0 (iy)
      0024A8 DD 77 F9         [19] 7694 	ld	-7 (ix), a
                                   7695 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      0024AB DD 7E FF         [19] 7696 	ld	a, -1 (ix)
      0024AE B7               [ 4] 7697 	or	a, a
      0024AF C2r98r25         [10] 7698 	jp	NZ, 00118$
                                   7699 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0024B2 FD 7E 00         [19] 7700 	ld	a, 0 (iy)
      0024B5 DD 77 FF         [19] 7701 	ld	-1 (ix), a
                                   7702 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0024B8 FD 21r01r00      [14] 7703 	ld	iy, #_col
      0024BC FD 7E 00         [19] 7704 	ld	a, 0 (iy)
      0024BF DD 77 FA         [19] 7705 	ld	-6 (ix), a
                                   7706 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0024C2 DD 7E FF         [19] 7707 	ld	a, -1 (ix)
      0024C5 C6 02            [ 7] 7708 	add	a, #0x02
      0024C7 DD 77 FB         [19] 7709 	ld	-5 (ix), a
                                   7710 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      0024CA DD 7E F6         [19] 7711 	ld	a, -10 (ix)
      0024CD D6 07            [ 7] 7712 	sub	a, #0x07
      0024CF 20 5F            [12] 7713 	jr	NZ, 00112$
                                   7714 ;src\/GameLogic.h:145: col > 0 && 
      0024D1 FD 7E 00         [19] 7715 	ld	a, 0 (iy)
      0024D4 B7               [ 4] 7716 	or	a, a
      0024D5 28 59            [12] 7717 	jr	Z, 00112$
                                   7718 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0024D7 DD 7E FA         [19] 7719 	ld	a, -6 (ix)
      0024DA C6 FF            [ 7] 7720 	add	a, #0xff
      0024DC DD 77 FF         [19] 7721 	ld	-1 (ix), a
      0024DF 4F               [ 4] 7722 	ld	c, a
      0024E0 07               [ 4] 7723 	rlca
      0024E1 9F               [ 4] 7724 	sbc	a, a
      0024E2 47               [ 4] 7725 	ld	b, a
      0024E3 69               [ 4] 7726 	ld	l, c
      0024E4 60               [ 4] 7727 	ld	h, b
      0024E5 29               [11] 7728 	add	hl, hl
      0024E6 09               [11] 7729 	add	hl, bc
      0024E7 29               [11] 7730 	add	hl, hl
      0024E8 29               [11] 7731 	add	hl, hl
      0024E9 DD 75 FE         [19] 7732 	ld	-2 (ix), l
      0024EC DD 74 FF         [19] 7733 	ld	-1 (ix), h
      0024EF 3Er00            [ 7] 7734 	ld	a, #<(_playfield)
      0024F1 DD 86 FE         [19] 7735 	add	a, -2 (ix)
      0024F4 DD 77 FC         [19] 7736 	ld	-4 (ix), a
      0024F7 3Es00            [ 7] 7737 	ld	a, #>(_playfield)
      0024F9 DD 8E FF         [19] 7738 	adc	a, -1 (ix)
      0024FC DD 77 FD         [19] 7739 	ld	-3 (ix), a
      0024FF DD 7E FC         [19] 7740 	ld	a, -4 (ix)
      002502 DD 86 F9         [19] 7741 	add	a, -7 (ix)
      002505 DD 77 FE         [19] 7742 	ld	-2 (ix), a
      002508 DD 7E FD         [19] 7743 	ld	a, -3 (ix)
      00250B CE 00            [ 7] 7744 	adc	a, #0x00
      00250D DD 77 FF         [19] 7745 	ld	-1 (ix), a
      002510 DD 6E FE         [19] 7746 	ld	l, -2 (ix)
      002513 DD 66 FF         [19] 7747 	ld	h, -1 (ix)
      002516 7E               [ 7] 7748 	ld	a, (hl)
      002517 B7               [ 4] 7749 	or	a, a
      002518 20 16            [12] 7750 	jr	NZ, 00112$
                                   7751 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      00251A DD 7E FC         [19] 7752 	ld	a, -4 (ix)
      00251D DD 86 FB         [19] 7753 	add	a, -5 (ix)
      002520 4F               [ 4] 7754 	ld	c, a
      002521 DD 7E FD         [19] 7755 	ld	a, -3 (ix)
      002524 CE 00            [ 7] 7756 	adc	a, #0x00
      002526 47               [ 4] 7757 	ld	b, a
      002527 0A               [ 7] 7758 	ld	a, (bc)
      002528 B7               [ 4] 7759 	or	a, a
      002529 20 05            [12] 7760 	jr	NZ, 00112$
                                   7761 ;src\/GameLogic.h:148: col--;
      00252B FD 35 00         [23] 7762 	dec	0 (iy)
      00252E 18 68            [12] 7763 	jr	00118$
      002530                       7764 00112$:
                                   7765 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      002530 DD 7E F6         [19] 7766 	ld	a, -10 (ix)
      002533 D6 03            [ 7] 7767 	sub	a, #0x03
      002535 20 61            [12] 7768 	jr	NZ, 00118$
                                   7769 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      002537 FD 21r01r00      [14] 7770 	ld	iy, #_col
      00253B FD 7E 00         [19] 7771 	ld	a, 0 (iy)
      00253E D6 05            [ 7] 7772 	sub	a, #0x05
      002540 30 56            [12] 7773 	jr	NC, 00118$
                                   7774 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      002542 DD 7E FA         [19] 7775 	ld	a, -6 (ix)
      002545 3C               [ 4] 7776 	inc	a
      002546 DD 77 FF         [19] 7777 	ld	-1 (ix), a
      002549 4F               [ 4] 7778 	ld	c, a
      00254A 07               [ 4] 7779 	rlca
      00254B 9F               [ 4] 7780 	sbc	a, a
      00254C 47               [ 4] 7781 	ld	b, a
      00254D 69               [ 4] 7782 	ld	l, c
      00254E 60               [ 4] 7783 	ld	h, b
      00254F 29               [11] 7784 	add	hl, hl
      002550 09               [11] 7785 	add	hl, bc
      002551 29               [11] 7786 	add	hl, hl
      002552 29               [11] 7787 	add	hl, hl
      002553 DD 75 FE         [19] 7788 	ld	-2 (ix), l
      002556 DD 74 FF         [19] 7789 	ld	-1 (ix), h
      002559 3Er00            [ 7] 7790 	ld	a, #<(_playfield)
      00255B DD 86 FE         [19] 7791 	add	a, -2 (ix)
      00255E DD 77 FC         [19] 7792 	ld	-4 (ix), a
      002561 3Es00            [ 7] 7793 	ld	a, #>(_playfield)
      002563 DD 8E FF         [19] 7794 	adc	a, -1 (ix)
      002566 DD 77 FD         [19] 7795 	ld	-3 (ix), a
      002569 DD 7E FC         [19] 7796 	ld	a, -4 (ix)
      00256C DD 86 F9         [19] 7797 	add	a, -7 (ix)
      00256F DD 77 FE         [19] 7798 	ld	-2 (ix), a
      002572 DD 7E FD         [19] 7799 	ld	a, -3 (ix)
      002575 CE 00            [ 7] 7800 	adc	a, #0x00
      002577 DD 77 FF         [19] 7801 	ld	-1 (ix), a
      00257A DD 6E FE         [19] 7802 	ld	l, -2 (ix)
      00257D DD 66 FF         [19] 7803 	ld	h, -1 (ix)
      002580 7E               [ 7] 7804 	ld	a, (hl)
      002581 B7               [ 4] 7805 	or	a, a
      002582 20 14            [12] 7806 	jr	NZ, 00118$
                                   7807 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      002584 DD 7E FC         [19] 7808 	ld	a, -4 (ix)
      002587 DD 86 FB         [19] 7809 	add	a, -5 (ix)
      00258A 4F               [ 4] 7810 	ld	c, a
      00258B DD 7E FD         [19] 7811 	ld	a, -3 (ix)
      00258E CE 00            [ 7] 7812 	adc	a, #0x00
      002590 47               [ 4] 7813 	ld	b, a
      002591 0A               [ 7] 7814 	ld	a, (bc)
      002592 B7               [ 4] 7815 	or	a, a
      002593 20 03            [12] 7816 	jr	NZ, 00118$
                                   7817 ;src\/GameLogic.h:154: col++;
      002595 FD 34 00         [23] 7818 	inc	0 (iy)
      002598                       7819 00118$:
                                   7820 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      002598 DD 7E F3         [19] 7821 	ld	a, -13 (ix)
      00259B B7               [ 4] 7822 	or	a, a
      00259C C2r5Er26         [10] 7823 	jp	NZ, 00132$
                                   7824 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      00259F DD 7E F6         [19] 7825 	ld	a, -10 (ix)
      0025A2 3D               [ 4] 7826 	dec	a
      0025A3 28 18            [12] 7827 	jr	Z, 00119$
      0025A5 DD 7E F4         [19] 7828 	ld	a, -12 (ix)
      0025A8 B7               [ 4] 7829 	or	a, a
      0025A9 20 06            [12] 7830 	jr	NZ, 00124$
      0025AB DD 7E F7         [19] 7831 	ld	a, -9 (ix)
      0025AE 3C               [ 4] 7832 	inc	a
      0025AF 28 0C            [12] 7833 	jr	Z, 00119$
      0025B1                       7834 00124$:
      0025B1 DD 7E F5         [19] 7835 	ld	a, -11 (ix)
      0025B4 B7               [ 4] 7836 	or	a, a
      0025B5 20 1A            [12] 7837 	jr	NZ, 00120$
      0025B7 DD 7E F8         [19] 7838 	ld	a, -8 (ix)
      0025BA 3C               [ 4] 7839 	inc	a
      0025BB 20 14            [12] 7840 	jr	NZ, 00120$
      0025BD                       7841 00119$:
                                   7842 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      0025BD 3Ar92r00         [13] 7843 	ld	a, (#_bottomPiece + 0)
      0025C0 4F               [ 4] 7844 	ld	c, a
                                   7845 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      0025C1 3Ar91r00         [13] 7846 	ld	a,(#_midPiece + 0)
      0025C4 32r92r00         [13] 7847 	ld	(#_bottomPiece),a
                                   7848 ;src\/GameLogic.h:166: midPiece = topPiece;
      0025C7 3Ar90r00         [13] 7849 	ld	a,(#_topPiece + 0)
      0025CA 32r91r00         [13] 7850 	ld	(#_midPiece),a
                                   7851 ;src\/GameLogic.h:167: topPiece = temp;
      0025CD 21r90r00         [10] 7852 	ld	hl, #_topPiece
      0025D0 71               [ 7] 7853 	ld	(hl), c
      0025D1                       7854 00120$:
                                   7855 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      0025D1 DD 7E F6         [19] 7856 	ld	a, -10 (ix)
      0025D4 D6 05            [ 7] 7857 	sub	a, #0x05
      0025D6 C2r5Er26         [10] 7858 	jp	NZ,00132$
                                   7859 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      0025D9 DD 7E F9         [19] 7860 	ld	a, -7 (ix)
      0025DC DD 77 FE         [19] 7861 	ld	-2 (ix), a
      0025DF DD 7E F9         [19] 7862 	ld	a, -7 (ix)
      0025E2 DD 77 FF         [19] 7863 	ld	-1 (ix), a
      0025E5                       7864 00154$:
      0025E5 DD 7E FF         [19] 7865 	ld	a, -1 (ix)
      0025E8 D6 0C            [ 7] 7866 	sub	a, #0x0c
      0025EA 30 72            [12] 7867 	jr	NC, 00132$
                                   7868 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0025EC DD 7E FF         [19] 7869 	ld	a, -1 (ix)
      0025EF D6 09            [ 7] 7870 	sub	a, #0x09
      0025F1 28 4C            [12] 7871 	jr	Z, 00125$
      0025F3 ED 4Br01r00      [20] 7872 	ld	bc, (_col)
      0025F7 06 00            [ 7] 7873 	ld	b, #0x00
      0025F9 69               [ 4] 7874 	ld	l, c
      0025FA 60               [ 4] 7875 	ld	h, b
      0025FB 29               [11] 7876 	add	hl, hl
      0025FC 09               [11] 7877 	add	hl, bc
      0025FD 29               [11] 7878 	add	hl, hl
      0025FE 29               [11] 7879 	add	hl, hl
      0025FF DD 75 FC         [19] 7880 	ld	-4 (ix), l
      002602 DD 74 FD         [19] 7881 	ld	-3 (ix), h
      002605 3Er00            [ 7] 7882 	ld	a, #<(_playfield)
      002607 DD 86 FC         [19] 7883 	add	a, -4 (ix)
      00260A DD 77 FA         [19] 7884 	ld	-6 (ix), a
      00260D 3Es00            [ 7] 7885 	ld	a, #>(_playfield)
      00260F DD 8E FD         [19] 7886 	adc	a, -3 (ix)
      002612 DD 77 FB         [19] 7887 	ld	-5 (ix), a
      002615 DD 7E FF         [19] 7888 	ld	a, -1 (ix)
      002618 DD 77 FD         [19] 7889 	ld	-3 (ix), a
      00261B DD 34 FD         [23] 7890 	inc	-3 (ix)
      00261E DD 34 FD         [23] 7891 	inc	-3 (ix)
      002621 DD 34 FD         [23] 7892 	inc	-3 (ix)
      002624 DD 7E FD         [19] 7893 	ld	a, -3 (ix)
      002627 DD 86 FA         [19] 7894 	add	a, -6 (ix)
      00262A DD 77 FC         [19] 7895 	ld	-4 (ix), a
      00262D 3E 00            [ 7] 7896 	ld	a, #0x00
      00262F DD 8E FB         [19] 7897 	adc	a, -5 (ix)
      002632 DD 77 FD         [19] 7898 	ld	-3 (ix), a
      002635 DD 6E FC         [19] 7899 	ld	l, -4 (ix)
      002638 DD 66 FD         [19] 7900 	ld	h, -3 (ix)
      00263B 7E               [ 7] 7901 	ld	a, (hl)
      00263C B7               [ 4] 7902 	or	a, a
      00263D 28 14            [12] 7903 	jr	Z, 00155$
      00263F                       7904 00125$:
                                   7905 ;src\/GameLogic.h:176: DrawPiece(line);
      00263F 3Ar02r00         [13] 7906 	ld	a,(#_line + 0)
      002642 F5               [11] 7907 	push	af
      002643 33               [ 6] 7908 	inc	sp
      002644 CDrA9r1A         [17] 7909 	call	_DrawPiece
      002647 33               [ 6] 7910 	inc	sp
                                   7911 ;src\/GameLogic.h:178: line = i;
      002648 DD 7E FE         [19] 7912 	ld	a, -2 (ix)
      00264B 32r02r00         [13] 7913 	ld	(#_line),a
                                   7914 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      00264E CDrFCr22         [17] 7915 	call	_UpdateAndDrawPieceStatic
                                   7916 ;src\/GameLogic.h:181: break;
      002651 18 0B            [12] 7917 	jr	00132$
      002653                       7918 00155$:
                                   7919 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002653 DD 34 FF         [23] 7920 	inc	-1 (ix)
      002656 DD 7E FF         [19] 7921 	ld	a, -1 (ix)
      002659 DD 77 FE         [19] 7922 	ld	-2 (ix), a
      00265C 18 87            [12] 7923 	jr	00154$
      00265E                       7924 00132$:
                                   7925 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      00265E DD 7E F6         [19] 7926 	ld	a, -10 (ix)
      002661 DD 77 FF         [19] 7927 	ld	-1 (ix), a
                                   7928 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      002664 DD 7E F6         [19] 7929 	ld	a, -10 (ix)
      002667 DD 77 F3         [19] 7930 	ld	-13 (ix), a
                                   7931 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      00266A DD 7E F7         [19] 7932 	ld	a, -9 (ix)
      00266D DD 77 F4         [19] 7933 	ld	-12 (ix), a
                                   7934 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002670 DD 7E F8         [19] 7935 	ld	a, -8 (ix)
      002673 DD 77 F5         [19] 7936 	ld	-11 (ix), a
                                   7937 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      002676 2E 07            [ 7] 7938 	ld	l, #0x07
      002678 CDr00r00         [17] 7939 	call	_SNSMAT
                                   7940 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      00267B CB 55            [ 8] 7941 	bit	2, l
      00267D 20 03            [12] 7942 	jr	NZ, 00134$
                                   7943 ;src\/GameLogic.h:220: Pause();
      00267F CDrB7r23         [17] 7944 	call	_Pause
      002682                       7945 00134$:
                                   7946 ;src\/GameLogic.h:225: counter++;
      002682 FD 21r03r00      [14] 7947 	ld	iy, #_counter
      002686 FD 34 00         [23] 7948 	inc	0 (iy)
                                   7949 ;src\/GameLogic.h:226: if(counter == speed) {
      002689 FD 7E 00         [19] 7950 	ld	a, 0 (iy)
      00268C 21r96r00         [10] 7951 	ld	hl, #_speed
      00268F 96               [ 7] 7952 	sub	a, (hl)
      002690 20 3F            [12] 7953 	jr	NZ, 00139$
                                   7954 ;src\/GameLogic.h:228: counter = 0;
      002692 21r03r00         [10] 7955 	ld	hl, #_counter
      002695 36 00            [10] 7956 	ld	(hl), #0x00
                                   7957 ;src\/GameLogic.h:231: DrawPiece(line);
      002697 3Ar02r00         [13] 7958 	ld	a,(#_line + 0)
      00269A F5               [11] 7959 	push	af
      00269B 33               [ 6] 7960 	inc	sp
      00269C CDrA9r1A         [17] 7961 	call	_DrawPiece
      00269F 33               [ 6] 7962 	inc	sp
                                   7963 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      0026A0 FD 21r02r00      [14] 7964 	ld	iy, #_line
      0026A4 FD 7E 00         [19] 7965 	ld	a, 0 (iy)
      0026A7 D6 09            [ 7] 7966 	sub	a, #0x09
      0026A9 28 1F            [12] 7967 	jr	Z, 00135$
      0026AB ED 4Br01r00      [20] 7968 	ld	bc, (_col)
      0026AF 06 00            [ 7] 7969 	ld	b, #0x00
      0026B1 69               [ 4] 7970 	ld	l, c
      0026B2 60               [ 4] 7971 	ld	h, b
      0026B3 29               [11] 7972 	add	hl, hl
      0026B4 09               [11] 7973 	add	hl, bc
      0026B5 29               [11] 7974 	add	hl, hl
      0026B6 29               [11] 7975 	add	hl, hl
      0026B7 EB               [ 4] 7976 	ex	de, hl
      0026B8 21r00r00         [10] 7977 	ld	hl, #_playfield
      0026BB 19               [11] 7978 	add	hl, de
      0026BC EB               [ 4] 7979 	ex	de, hl
      0026BD FD 7E 00         [19] 7980 	ld	a, 0 (iy)
      0026C0 C6 03            [ 7] 7981 	add	a, #0x03
      0026C2 6F               [ 4] 7982 	ld	l, a
      0026C3 26 00            [ 7] 7983 	ld	h, #0x00
      0026C5 19               [11] 7984 	add	hl, de
      0026C6 7E               [ 7] 7985 	ld	a, (hl)
      0026C7 B7               [ 4] 7986 	or	a, a
      0026C8 28 03            [12] 7987 	jr	Z, 00136$
      0026CA                       7988 00135$:
                                   7989 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      0026CA CDrFCr22         [17] 7990 	call	_UpdateAndDrawPieceStatic
      0026CD                       7991 00136$:
                                   7992 ;src\/GameLogic.h:240: line++;
      0026CD 21r02r00         [10] 7993 	ld	hl, #_line
      0026D0 34               [11] 7994 	inc	(hl)
      0026D1                       7995 00139$:
                                   7996 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      0026D1 ED 4Br01r00      [20] 7997 	ld	bc, (_col)
      0026D5 06 00            [ 7] 7998 	ld	b, #0x00
      0026D7 69               [ 4] 7999 	ld	l, c
      0026D8 60               [ 4] 8000 	ld	h, b
      0026D9 29               [11] 8001 	add	hl, hl
      0026DA 09               [11] 8002 	add	hl, bc
      0026DB 29               [11] 8003 	add	hl, hl
      0026DC 29               [11] 8004 	add	hl, hl
      0026DD EB               [ 4] 8005 	ex	de, hl
      0026DE 21r00r00         [10] 8006 	ld	hl, #_playfield
      0026E1 19               [11] 8007 	add	hl, de
      0026E2 EB               [ 4] 8008 	ex	de, hl
      0026E3 3Ar02r00         [13] 8009 	ld	a, (#_line + 0)
      0026E6 6F               [ 4] 8010 	ld	l, a
      0026E7 26 00            [ 7] 8011 	ld	h, #0x00
      0026E9 19               [11] 8012 	add	hl, de
      0026EA 3Ar90r00         [13] 8013 	ld	a,(#_topPiece + 0)
      0026ED 77               [ 7] 8014 	ld	(hl), a
                                   8015 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      0026EE ED 4Br01r00      [20] 8016 	ld	bc, (_col)
      0026F2 06 00            [ 7] 8017 	ld	b, #0x00
      0026F4 69               [ 4] 8018 	ld	l, c
      0026F5 60               [ 4] 8019 	ld	h, b
      0026F6 29               [11] 8020 	add	hl, hl
      0026F7 09               [11] 8021 	add	hl, bc
      0026F8 29               [11] 8022 	add	hl, hl
      0026F9 29               [11] 8023 	add	hl, hl
      0026FA EB               [ 4] 8024 	ex	de, hl
      0026FB 21r00r00         [10] 8025 	ld	hl, #_playfield
      0026FE 19               [11] 8026 	add	hl, de
      0026FF EB               [ 4] 8027 	ex	de, hl
      002700 3Ar02r00         [13] 8028 	ld	a, (#_line + 0)
      002703 6F               [ 4] 8029 	ld	l, a
      002704 2C               [ 4] 8030 	inc	l
      002705 26 00            [ 7] 8031 	ld	h, #0x00
      002707 19               [11] 8032 	add	hl, de
      002708 3Ar91r00         [13] 8033 	ld	a,(#_midPiece + 0)
      00270B 77               [ 7] 8034 	ld	(hl), a
                                   8035 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      00270C ED 4Br01r00      [20] 8036 	ld	bc, (_col)
      002710 06 00            [ 7] 8037 	ld	b, #0x00
      002712 69               [ 4] 8038 	ld	l, c
      002713 60               [ 4] 8039 	ld	h, b
      002714 29               [11] 8040 	add	hl, hl
      002715 09               [11] 8041 	add	hl, bc
      002716 29               [11] 8042 	add	hl, hl
      002717 29               [11] 8043 	add	hl, hl
      002718 EB               [ 4] 8044 	ex	de, hl
      002719 21r00r00         [10] 8045 	ld	hl, #_playfield
      00271C 19               [11] 8046 	add	hl, de
      00271D EB               [ 4] 8047 	ex	de, hl
      00271E 3Ar02r00         [13] 8048 	ld	a, (#_line + 0)
      002721 6F               [ 4] 8049 	ld	l, a
      002722 2C               [ 4] 8050 	inc	l
      002723 2C               [ 4] 8051 	inc	l
      002724 26 00            [ 7] 8052 	ld	h, #0x00
      002726 19               [11] 8053 	add	hl, de
      002727 3Ar92r00         [13] 8054 	ld	a,(#_bottomPiece + 0)
      00272A 77               [ 7] 8055 	ld	(hl), a
                                   8056 ;src\/GameLogic.h:254: DrawPiece(line);
      00272B 3Ar02r00         [13] 8057 	ld	a,(#_line + 0)
      00272E F5               [11] 8058 	push	af
      00272F 33               [ 6] 8059 	inc	sp
      002730 CDrA9r1A         [17] 8060 	call	_DrawPiece
      002733 33               [ 6] 8061 	inc	sp
                                   8062 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002734 ED 4Br01r00      [20] 8063 	ld	bc, (_col)
      002738 06 00            [ 7] 8064 	ld	b, #0x00
      00273A 69               [ 4] 8065 	ld	l, c
      00273B 60               [ 4] 8066 	ld	h, b
      00273C 29               [11] 8067 	add	hl, hl
      00273D 09               [11] 8068 	add	hl, bc
      00273E 29               [11] 8069 	add	hl, hl
      00273F 29               [11] 8070 	add	hl, hl
      002740 EB               [ 4] 8071 	ex	de, hl
                                   8072 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      002741 21r00r00         [10] 8073 	ld	hl, #_playfield
      002744 19               [11] 8074 	add	hl, de
      002745 EB               [ 4] 8075 	ex	de, hl
      002746 3Ar02r00         [13] 8076 	ld	a,(#_line + 0)
      002749 C6 03            [ 7] 8077 	add	a, #0x03
      00274B 4F               [ 4] 8078 	ld	c, a
      00274C 69               [ 4] 8079 	ld	l, c
      00274D 26 00            [ 7] 8080 	ld	h, #0x00
      00274F 19               [11] 8081 	add	hl, de
      002750 7E               [ 7] 8082 	ld	a, (hl)
      002751 B7               [ 4] 8083 	or	a, a
      002752 28 06            [12] 8084 	jr	Z, 00148$
                                   8085 ;src\/GameLogic.h:260: HideArrowSprite();
      002754 CDr48r0C         [17] 8086 	call	_HideArrowSprite
      002757 C3r14r24         [10] 8087 	jp	00150$
      00275A                       8088 00148$:
                                   8089 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      00275A 41               [ 4] 8090 	ld	b, c
      00275B                       8091 00157$:
      00275B 78               [ 4] 8092 	ld	a, b
      00275C D6 0C            [ 7] 8093 	sub	a, #0x0c
      00275E D2r14r24         [10] 8094 	jp	NC, 00150$
                                   8095 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002761 3Ar01r00         [13] 8096 	ld	a,(#_col + 0)
      002764 87               [ 4] 8097 	add	a, a
      002765 87               [ 4] 8098 	add	a, a
      002766 87               [ 4] 8099 	add	a, a
      002767 87               [ 4] 8100 	add	a, a
      002768 DD 77 FE         [19] 8101 	ld	-2 (ix), a
                                   8102 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      00276B 68               [ 4] 8103 	ld	l, b
      00276C 26 00            [ 7] 8104 	ld	h, #0x00
      00276E 19               [11] 8105 	add	hl, de
                                   8106 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00276F DD 7E FE         [19] 8107 	ld	a, -2 (ix)
      002772 C6 50            [ 7] 8108 	add	a, #0x50
      002774 DD 77 FE         [19] 8109 	ld	-2 (ix), a
                                   8110 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002777 6E               [ 7] 8111 	ld	l, (hl)
      002778 78               [ 4] 8112 	ld	a, b
      002779 D6 0B            [ 7] 8113 	sub	a,#0x0b
      00277B 20 16            [12] 8114 	jr	NZ, 00143$
      00277D B5               [ 4] 8115 	or	a,l
      00277E 20 13            [12] 8116 	jr	NZ, 00143$
                                   8117 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002780 79               [ 4] 8118 	ld	a, c
      002781 87               [ 4] 8119 	add	a, a
      002782 87               [ 4] 8120 	add	a, a
      002783 87               [ 4] 8121 	add	a, a
      002784 87               [ 4] 8122 	add	a, a
      002785 F5               [11] 8123 	push	af
      002786 33               [ 6] 8124 	inc	sp
      002787 DD 7E FE         [19] 8125 	ld	a, -2 (ix)
      00278A F5               [11] 8126 	push	af
      00278B 33               [ 6] 8127 	inc	sp
      00278C CDrEDr00         [17] 8128 	call	_DrawArrowSprite
      00278F F1               [10] 8129 	pop	af
                                   8130 ;src\/GameLogic.h:266: break;
      002790 C3r14r24         [10] 8131 	jp	00150$
      002793                       8132 00143$:
                                   8133 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      002793 7D               [ 4] 8134 	ld	a, l
      002794 B7               [ 4] 8135 	or	a, a
      002795 28 14            [12] 8136 	jr	Z, 00158$
                                   8137 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002797 79               [ 4] 8138 	ld	a, c
      002798 3D               [ 4] 8139 	dec	a
      002799 87               [ 4] 8140 	add	a, a
      00279A 87               [ 4] 8141 	add	a, a
      00279B 87               [ 4] 8142 	add	a, a
      00279C 87               [ 4] 8143 	add	a, a
      00279D F5               [11] 8144 	push	af
      00279E 33               [ 6] 8145 	inc	sp
      00279F DD 7E FE         [19] 8146 	ld	a, -2 (ix)
      0027A2 F5               [11] 8147 	push	af
      0027A3 33               [ 6] 8148 	inc	sp
      0027A4 CDrEDr00         [17] 8149 	call	_DrawArrowSprite
      0027A7 F1               [10] 8150 	pop	af
                                   8151 ;src\/GameLogic.h:270: break;
      0027A8 C3r14r24         [10] 8152 	jp	00150$
      0027AB                       8153 00158$:
                                   8154 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0027AB 04               [ 4] 8155 	inc	b
      0027AC 48               [ 4] 8156 	ld	c, b
      0027AD 18 AC            [12] 8157 	jr	00157$
      0027AF                       8158 00152$:
                                   8159 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      0027AF 11 0C 0C         [10] 8160 	ld	de, #0x0c0c
      0027B2 D5               [11] 8161 	push	de
      0027B3 21rC7r27         [10] 8162 	ld	hl, #___str_7
      0027B6 E5               [11] 8163 	push	hl
      0027B7 CDr38r11         [17] 8164 	call	_DrawString
      0027BA F1               [10] 8165 	pop	af
                                   8166 ;src\/GameLogic.h:282: Wait(60 * 5);
      0027BB 21 2C 01         [10] 8167 	ld	hl, #0x012c
      0027BE E3               [19] 8168 	ex	(sp),hl
      0027BF CDr00r00         [17] 8169 	call	_Wait
                                   8170 ;src\/GameLogic.h:284: }
      0027C2 DD F9            [10] 8171 	ld	sp,ix
      0027C4 DD E1            [14] 8172 	pop	ix
      0027C6 C9               [10] 8173 	ret
      0027C7                       8174 ___str_7:
      0027C7 47 41 4D 45 20 4F 56  8175 	.ascii "GAME OVER"
             45 52
      0027D0 00                    8176 	.db 0x00
                                   8177 ;src\/GameLogic.h:286: void TestCase() {
                                   8178 ;	---------------------------------
                                   8179 ; Function TestCase
                                   8180 ; ---------------------------------
      0027D1                       8181 _TestCase::
                                   8182 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      0027D1 21r20r00         [10] 8183 	ld	hl, #(_playfield + 0x0020)
      0027D4 36 04            [10] 8184 	ld	(hl), #0x04
                                   8185 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      0027D6 21r21r00         [10] 8186 	ld	hl, #(_playfield + 0x0021)
      0027D9 36 0C            [10] 8187 	ld	(hl), #0x0c
                                   8188 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      0027DB 21r0Ar00         [10] 8189 	ld	hl, #(_playfield + 0x000a)
      0027DE 36 0C            [10] 8190 	ld	(hl), #0x0c
                                   8191 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      0027E0 21r16r00         [10] 8192 	ld	hl, #(_playfield + 0x0016)
      0027E3 36 0C            [10] 8193 	ld	(hl), #0x0c
                                   8194 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      0027E5 21r22r00         [10] 8195 	ld	hl, #(_playfield + 0x0022)
      0027E8 36 08            [10] 8196 	ld	(hl), #0x08
                                   8197 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      0027EA 21r3Ar00         [10] 8198 	ld	hl, #(_playfield + 0x003a)
      0027ED 36 08            [10] 8199 	ld	(hl), #0x08
                                   8200 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      0027EF 21r46r00         [10] 8201 	ld	hl, #(_playfield + 0x0046)
      0027F2 36 0C            [10] 8202 	ld	(hl), #0x0c
                                   8203 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      0027F4 21r0Br00         [10] 8204 	ld	hl, #(_playfield + 0x000b)
      0027F7 36 04            [10] 8205 	ld	(hl), #0x04
                                   8206 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      0027F9 21r17r00         [10] 8207 	ld	hl, #(_playfield + 0x0017)
      0027FC 36 04            [10] 8208 	ld	(hl), #0x04
                                   8209 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      0027FE 21r23r00         [10] 8210 	ld	hl, #(_playfield + 0x0023)
      002801 36 08            [10] 8211 	ld	(hl), #0x08
                                   8212 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      002803 21r2Fr00         [10] 8213 	ld	hl, #(_playfield + 0x002f)
      002806 36 00            [10] 8214 	ld	(hl), #0x00
                                   8215 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      002808 21r3Br00         [10] 8216 	ld	hl, #(_playfield + 0x003b)
      00280B 36 08            [10] 8217 	ld	(hl), #0x08
                                   8218 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      00280D 21r47r00         [10] 8219 	ld	hl, #(_playfield + 0x0047)
      002810 36 08            [10] 8220 	ld	(hl), #0x08
                                   8221 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      002812 3E 0C            [ 7] 8222 	ld	a, #0x0c
      002814 32r90r00         [13] 8223 	ld	(#_topPiece), a
                                   8224 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   8225 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      002817 3E 08            [ 7] 8226 	ld	a,#0x08
      002819 32r91r00         [13] 8227 	ld	(#_midPiece),a
      00281C 32r92r00         [13] 8228 	ld	(#_bottomPiece), a
                                   8229 ;src\/GameLogic.h:326: }
      00281F C9               [10] 8230 	ret
                                   8231 ;src\/GameLogic.h:328: void InitGame() {
                                   8232 ;	---------------------------------
                                   8233 ; Function InitGame
                                   8234 ; ---------------------------------
      002820                       8235 _InitGame::
                                   8236 ;src\/GameLogic.h:330: gameOver = FALSE;
      002820 21r00r00         [10] 8237 	ld	hl, #_gameOver
      002823 36 00            [10] 8238 	ld	(hl), #0x00
                                   8239 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      002825 21r02r00         [10] 8240 	ld	hl, #_line
      002828 36 00            [10] 8241 	ld	(hl), #0x00
                                   8242 ;src\/GameLogic.h:332: col = INITIAL_COL;
      00282A 21r01r00         [10] 8243 	ld	hl, #_col
      00282D 36 02            [10] 8244 	ld	(hl), #0x02
                                   8245 ;src\/GameLogic.h:334: blocksRemoved = 0;
      00282F 21 00 00         [10] 8246 	ld	hl, #0x0000
      002832 22r04r00         [16] 8247 	ld	(_blocksRemoved), hl
                                   8248 ;src\/GameLogic.h:335: level = 1;
      002835 21r06r00         [10] 8249 	ld	hl, #_level
      002838 36 01            [10] 8250 	ld	(hl), #0x01
                                   8251 ;src\/GameLogic.h:336: newLevel = FALSE;
      00283A 21r07r00         [10] 8252 	ld	hl, #_newLevel
      00283D 36 00            [10] 8253 	ld	(hl), #0x00
                                   8254 ;src\/GameLogic.h:337: speed = 60;
      00283F 21r96r00         [10] 8255 	ld	hl, #_speed
      002842 36 3C            [10] 8256 	ld	(hl), #0x3c
                                   8257 ;src\/GameLogic.h:339: InitVRAM();
      002844 CDr52r17         [17] 8258 	call	_InitVRAM
                                   8259 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002847 3Ar08r00         [13] 8260 	ld	a, (#_rndSeed + 0)
      00284A 5F               [ 4] 8261 	ld	e, a
      00284B 3A 9E FC         [13] 8262 	ld	a, (#_JIFFY + 0)
      00284E 67               [ 4] 8263 	ld	h, a
      00284F 2E 00            [ 7] 8264 	ld	l, #0x00
      002851 55               [ 4] 8265 	ld	d, l
      002852 06 08            [ 7] 8266 	ld	b, #0x08
      002854                       8267 00133$:
      002854 29               [11] 8268 	add	hl, hl
      002855 30 01            [12] 8269 	jr	NC, 00134$
      002857 19               [11] 8270 	add	hl, de
      002858                       8271 00134$:
      002858 10 FA            [13] 8272 	djnz	00133$
      00285A 7D               [ 4] 8273 	ld	a, l
      00285B C6 63            [ 7] 8274 	add	a, #0x63
      00285D 4F               [ 4] 8275 	ld	c, a
      00285E 3Ar08r00         [13] 8276 	ld	a, (#_rndSeed + 0)
      002861 5F               [ 4] 8277 	ld	e, a
      002862 3A 9E FC         [13] 8278 	ld	a, (#_JIFFY + 0)
      002865 67               [ 4] 8279 	ld	h, a
      002866 2E 00            [ 7] 8280 	ld	l, #0x00
      002868 55               [ 4] 8281 	ld	d, l
      002869 06 08            [ 7] 8282 	ld	b, #0x08
      00286B                       8283 00135$:
      00286B 29               [11] 8284 	add	hl, hl
      00286C 30 01            [12] 8285 	jr	NC, 00136$
      00286E 19               [11] 8286 	add	hl, de
      00286F                       8287 00136$:
      00286F 10 FA            [13] 8288 	djnz	00135$
      002871 79               [ 4] 8289 	ld	a, c
      002872 F5               [11] 8290 	push	af
      002873 7D               [ 4] 8291 	ld	a, l
      002874 33               [ 6] 8292 	inc	sp
      002875 F5               [11] 8293 	push	af
      002876 33               [ 6] 8294 	inc	sp
      002877 3Ar08r00         [13] 8295 	ld	a,(#_rndSeed + 0)
      00287A F5               [11] 8296 	push	af
      00287B 33               [ 6] 8297 	inc	sp
      00287C CDr50r00         [17] 8298 	call	_InitRnd
      00287F F1               [10] 8299 	pop	af
      002880 33               [ 6] 8300 	inc	sp
                                   8301 ;src\/GameLogic.h:345: RandomPiece();
      002881 CDrC2r22         [17] 8302 	call	_RandomPiece
                                   8303 ;src\/GameLogic.h:346: RandomPiece();
      002884 CDrC2r22         [17] 8304 	call	_RandomPiece
                                   8305 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002887 0E 00            [ 7] 8306 	ld	c, #0x00
      002889                       8307 00107$:
      002889 79               [ 4] 8308 	ld	a, c
      00288A D6 0C            [ 7] 8309 	sub	a, #0x0c
      00288C 30 20            [12] 8310 	jr	NC, 00102$
                                   8311 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00288E 06 00            [ 7] 8312 	ld	b, #0x00
      002890                       8313 00104$:
      002890 78               [ 4] 8314 	ld	a, b
      002891 D6 06            [ 7] 8315 	sub	a, #0x06
      002893 30 16            [12] 8316 	jr	NC, 00108$
                                   8317 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      002895 58               [ 4] 8318 	ld	e, b
      002896 16 00            [ 7] 8319 	ld	d, #0x00
      002898 6B               [ 4] 8320 	ld	l, e
      002899 62               [ 4] 8321 	ld	h, d
      00289A 29               [11] 8322 	add	hl, hl
      00289B 19               [11] 8323 	add	hl, de
      00289C 29               [11] 8324 	add	hl, hl
      00289D 29               [11] 8325 	add	hl, hl
      00289E 11r00r00         [10] 8326 	ld	de, #_playfield
      0028A1 19               [11] 8327 	add	hl, de
      0028A2 59               [ 4] 8328 	ld	e, c
      0028A3 16 00            [ 7] 8329 	ld	d, #0x00
      0028A5 19               [11] 8330 	add	hl, de
      0028A6 36 00            [10] 8331 	ld	(hl), #0x00
                                   8332 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0028A8 04               [ 4] 8333 	inc	b
      0028A9 18 E5            [12] 8334 	jr	00104$
      0028AB                       8335 00108$:
                                   8336 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0028AB 0C               [ 4] 8337 	inc	c
      0028AC 18 DB            [12] 8338 	jr	00107$
      0028AE                       8339 00102$:
                                   8340 ;src\/GameLogic.h:356: TestCase();
      0028AE CDrD1r27         [17] 8341 	call	_TestCase
                                   8342 ;src\/GameLogic.h:360: DrawBackground();
      0028B1 CDr23r17         [17] 8343 	call	_DrawBackground
                                   8344 ;src\/GameLogic.h:362: DrawPlayfield();
      0028B4 CDrCCr1A         [17] 8345 	call	_DrawPlayfield
                                   8346 ;src\/GameLogic.h:364: DrawScore();
      0028B7 CDr7Br15         [17] 8347 	call	_DrawScore
                                   8348 ;src\/GameLogic.h:366: DrawNextPiece();
      0028BA CDr21r14         [17] 8349 	call	_DrawNextPiece
                                   8350 ;src\/GameLogic.h:368: ShowCountdown();
      0028BD CDrC7r0F         [17] 8351 	call	_ShowCountdown
                                   8352 ;src\/GameLogic.h:370: GameLoop();
                                   8353 ;src\/GameLogic.h:371: }
      0028C0 C3rF7r23         [10] 8354 	jp	_GameLoop
                                   8355 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   8356 ;	---------------------------------
                                   8357 ; Function ChangeFontColor
                                   8358 ; ---------------------------------
      0028C3                       8359 _ChangeFontColor::
                                   8360 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0028C3 21 02 00         [10] 8361 	ld	hl, #2
      0028C6 39               [11] 8362 	add	hl, sp
      0028C7 7E               [ 7] 8363 	ld	a, (hl)
      0028C8 F5               [11] 8364 	push	af
      0028C9 33               [ 6] 8365 	inc	sp
      0028CA 21 00 03         [10] 8366 	ld	hl, #0x0300
      0028CD E5               [11] 8367 	push	hl
      0028CE 21 78 21         [10] 8368 	ld	hl, #0x2178
      0028D1 E5               [11] 8369 	push	hl
      0028D2 CDr00r00         [17] 8370 	call	_FILVRM
      0028D5 F1               [10] 8371 	pop	af
      0028D6 F1               [10] 8372 	pop	af
      0028D7 33               [ 6] 8373 	inc	sp
                                   8374 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0028D8 21 02 00         [10] 8375 	ld	hl, #2
      0028DB 39               [11] 8376 	add	hl, sp
      0028DC 7E               [ 7] 8377 	ld	a, (hl)
      0028DD F5               [11] 8378 	push	af
      0028DE 33               [ 6] 8379 	inc	sp
      0028DF 21 00 03         [10] 8380 	ld	hl, #0x0300
      0028E2 E5               [11] 8381 	push	hl
      0028E3 21 78 29         [10] 8382 	ld	hl, #0x2978
      0028E6 E5               [11] 8383 	push	hl
      0028E7 CDr00r00         [17] 8384 	call	_FILVRM
      0028EA F1               [10] 8385 	pop	af
      0028EB F1               [10] 8386 	pop	af
      0028EC 33               [ 6] 8387 	inc	sp
                                   8388 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0028ED 21 02 00         [10] 8389 	ld	hl, #2
      0028F0 39               [11] 8390 	add	hl, sp
      0028F1 7E               [ 7] 8391 	ld	a, (hl)
      0028F2 F5               [11] 8392 	push	af
      0028F3 33               [ 6] 8393 	inc	sp
      0028F4 21 00 03         [10] 8394 	ld	hl, #0x0300
      0028F7 E5               [11] 8395 	push	hl
      0028F8 21 78 31         [10] 8396 	ld	hl, #0x3178
      0028FB E5               [11] 8397 	push	hl
      0028FC CDr00r00         [17] 8398 	call	_FILVRM
      0028FF F1               [10] 8399 	pop	af
      002900 F1               [10] 8400 	pop	af
      002901 33               [ 6] 8401 	inc	sp
                                   8402 ;src\/Intro.h:7: }
      002902 C9               [10] 8403 	ret
                                   8404 ;src\/Intro.h:9: void ScrollDownFont() {
                                   8405 ;	---------------------------------
                                   8406 ; Function ScrollDownFont
                                   8407 ; ---------------------------------
      002903                       8408 _ScrollDownFont::
      002903 DD E5            [15] 8409 	push	ix
      002905 DD 21 00 00      [14] 8410 	ld	ix,#0
      002909 DD 39            [15] 8411 	add	ix,sp
      00290B F5               [11] 8412 	push	af
                                   8413 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00290C 11 78 09         [10] 8414 	ld	de, #0x0978
      00290F                       8415 00107$:
      00290F 7B               [ 4] 8416 	ld	a, e
      002910 D6 78            [ 7] 8417 	sub	a, #0x78
      002912 7A               [ 4] 8418 	ld	a, d
      002913 DE 0C            [ 7] 8419 	sbc	a, #0x0c
      002915 30 44            [12] 8420 	jr	NC, 00109$
                                   8421 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002917 33               [ 6] 8422 	inc	sp
      002918 33               [ 6] 8423 	inc	sp
      002919 D5               [11] 8424 	push	de
      00291A DD 7E FE         [19] 8425 	ld	a, -2 (ix)
      00291D C6 07            [ 7] 8426 	add	a, #0x07
      00291F 4F               [ 4] 8427 	ld	c, a
      002920 DD 7E FF         [19] 8428 	ld	a, -1 (ix)
      002923 CE 00            [ 7] 8429 	adc	a, #0x00
      002925 47               [ 4] 8430 	ld	b, a
      002926                       8431 00104$:
      002926 78               [ 4] 8432 	ld	a, b
      002927 B1               [ 4] 8433 	or	a, c
      002928 28 1A            [12] 8434 	jr	Z, 00101$
                                   8435 ;src\/Intro.h:27: value = RDVRM(j-1);
      00292A 69               [ 4] 8436 	ld	l, c
      00292B 60               [ 4] 8437 	ld	h, b
      00292C 2B               [ 6] 8438 	dec	hl
      00292D C5               [11] 8439 	push	bc
      00292E D5               [11] 8440 	push	de
      00292F CDr00r00         [17] 8441 	call	_RDVRM
      002932 D1               [10] 8442 	pop	de
      002933 C1               [10] 8443 	pop	bc
                                   8444 ;src\/Intro.h:29: WRTVRM(j, 0);
      002934 C5               [11] 8445 	push	bc
      002935 D5               [11] 8446 	push	de
      002936 AF               [ 4] 8447 	xor	a, a
      002937 F5               [11] 8448 	push	af
      002938 33               [ 6] 8449 	inc	sp
      002939 C5               [11] 8450 	push	bc
      00293A CDr00r00         [17] 8451 	call	_WRTVRM
      00293D F1               [10] 8452 	pop	af
      00293E 33               [ 6] 8453 	inc	sp
      00293F D1               [10] 8454 	pop	de
      002940 C1               [10] 8455 	pop	bc
                                   8456 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002941 0B               [ 6] 8457 	dec	bc
      002942 18 E2            [12] 8458 	jr	00104$
      002944                       8459 00101$:
                                   8460 ;src\/Intro.h:31: WRTVRM(i, 0);
      002944 AF               [ 4] 8461 	xor	a, a
      002945 F5               [11] 8462 	push	af
      002946 33               [ 6] 8463 	inc	sp
      002947 D5               [11] 8464 	push	de
      002948 CDr00r00         [17] 8465 	call	_WRTVRM
      00294B F1               [10] 8466 	pop	af
      00294C 33               [ 6] 8467 	inc	sp
                                   8468 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00294D DD 7E FE         [19] 8469 	ld	a, -2 (ix)
      002950 C6 08            [ 7] 8470 	add	a, #0x08
      002952 5F               [ 4] 8471 	ld	e, a
      002953 DD 7E FF         [19] 8472 	ld	a, -1 (ix)
      002956 CE 00            [ 7] 8473 	adc	a, #0x00
      002958 57               [ 4] 8474 	ld	d, a
      002959 18 B4            [12] 8475 	jr	00107$
      00295B                       8476 00109$:
                                   8477 ;src\/Intro.h:35: }
      00295B DD F9            [10] 8478 	ld	sp, ix
      00295D DD E1            [14] 8479 	pop	ix
      00295F C9               [10] 8480 	ret
                                   8481 ;src\/Intro.h:37: void Intro() {
                                   8482 ;	---------------------------------
                                   8483 ; Function Intro
                                   8484 ; ---------------------------------
      002960                       8485 _Intro::
                                   8486 ;src\/Intro.h:41: InitVRAM();
      002960 CDr52r17         [17] 8487 	call	_InitVRAM
                                   8488 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002963 11 0B 0B         [10] 8489 	ld	de, #0x0b0b
      002966 D5               [11] 8490 	push	de
      002967 21rD5r29         [10] 8491 	ld	hl, #___str_8
      00296A E5               [11] 8492 	push	hl
      00296B CDr38r11         [17] 8493 	call	_DrawString
      00296E F1               [10] 8494 	pop	af
      00296F F1               [10] 8495 	pop	af
                                   8496 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002970 11 09 0D         [10] 8497 	ld	de, #0x0d09
      002973 D5               [11] 8498 	push	de
      002974 21rDFr29         [10] 8499 	ld	hl, #___str_9
      002977 E5               [11] 8500 	push	hl
      002978 CDr38r11         [17] 8501 	call	_DrawString
      00297B F1               [10] 8502 	pop	af
                                   8503 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00297C 26 F0            [ 7] 8504 	ld	h,#0xf0
      00297E E3               [19] 8505 	ex	(sp),hl
      00297F 33               [ 6] 8506 	inc	sp
      002980 CDrC3r28         [17] 8507 	call	_ChangeFontColor
      002983 33               [ 6] 8508 	inc	sp
                                   8509 ;src\/Intro.h:56: Wait(2 * 60);
      002984 21 78 00         [10] 8510 	ld	hl, #0x0078
      002987 E5               [11] 8511 	push	hl
      002988 CDr00r00         [17] 8512 	call	_Wait
      00298B F1               [10] 8513 	pop	af
                                   8514 ;src\/Intro.h:58: while(counter++ < 20) {
      00298C 0E 00            [ 7] 8515 	ld	c, #0x00
      00298E                       8516 00112$:
      00298E 79               [ 4] 8517 	ld	a, c
      00298F D6 14            [ 7] 8518 	sub	a, #0x14
      002991 D0               [11] 8519 	ret	NC
      002992 0C               [ 4] 8520 	inc	c
                                   8521 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002993 21 9E FC         [10] 8522 	ld	hl, #_JIFFY
      002996 46               [ 7] 8523 	ld	b, (hl)
                                   8524 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002997                       8525 00101$:
      002997 58               [ 4] 8526 	ld	e, b
      002998 16 00            [ 7] 8527 	ld	d, #0x00
      00299A 2A 9E FC         [16] 8528 	ld	hl, (_JIFFY)
      00299D BF               [ 4] 8529 	cp	a, a
      00299E ED 52            [15] 8530 	sbc	hl, de
      0029A0 28 F5            [12] 8531 	jr	Z, 00101$
                                   8532 ;src\/Intro.h:63: if(counter == 15) {
      0029A2 79               [ 4] 8533 	ld	a, c
      0029A3 D6 0F            [ 7] 8534 	sub	a, #0x0f
      0029A5 20 0C            [12] 8535 	jr	NZ, 00110$
                                   8536 ;src\/Intro.h:64: ChangeFontColor(0x40);
      0029A7 C5               [11] 8537 	push	bc
      0029A8 3E 40            [ 7] 8538 	ld	a, #0x40
      0029AA F5               [11] 8539 	push	af
      0029AB 33               [ 6] 8540 	inc	sp
      0029AC CDrC3r28         [17] 8541 	call	_ChangeFontColor
      0029AF 33               [ 6] 8542 	inc	sp
      0029B0 C1               [10] 8543 	pop	bc
      0029B1 18 DB            [12] 8544 	jr	00112$
      0029B3                       8545 00110$:
                                   8546 ;src\/Intro.h:66: else if(counter == 10) {
      0029B3 79               [ 4] 8547 	ld	a, c
      0029B4 D6 0A            [ 7] 8548 	sub	a, #0x0a
      0029B6 20 0C            [12] 8549 	jr	NZ, 00107$
                                   8550 ;src\/Intro.h:67: ChangeFontColor(0x50);
      0029B8 C5               [11] 8551 	push	bc
      0029B9 3E 50            [ 7] 8552 	ld	a, #0x50
      0029BB F5               [11] 8553 	push	af
      0029BC 33               [ 6] 8554 	inc	sp
      0029BD CDrC3r28         [17] 8555 	call	_ChangeFontColor
      0029C0 33               [ 6] 8556 	inc	sp
      0029C1 C1               [10] 8557 	pop	bc
      0029C2 18 CA            [12] 8558 	jr	00112$
      0029C4                       8559 00107$:
                                   8560 ;src\/Intro.h:69: else if(counter == 5) {
      0029C4 79               [ 4] 8561 	ld	a, c
      0029C5 D6 05            [ 7] 8562 	sub	a, #0x05
      0029C7 20 C5            [12] 8563 	jr	NZ, 00112$
                                   8564 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      0029C9 C5               [11] 8565 	push	bc
      0029CA 3E E0            [ 7] 8566 	ld	a, #0xe0
      0029CC F5               [11] 8567 	push	af
      0029CD 33               [ 6] 8568 	inc	sp
      0029CE CDrC3r28         [17] 8569 	call	_ChangeFontColor
      0029D1 33               [ 6] 8570 	inc	sp
      0029D2 C1               [10] 8571 	pop	bc
                                   8572 ;src\/Intro.h:140: }
      0029D3 18 B9            [12] 8573 	jr	00112$
      0029D5                       8574 ___str_8:
      0029D5 41 20 47 41 4D 45 20  8575 	.ascii "A GAME BY"
             42 59
      0029DE 00                    8576 	.db 0x00
      0029DF                       8577 ___str_9:
      0029DF 41 4E 44 52 45 20 42  8578 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0029ED 00                    8579 	.db 0x00
                                   8580 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   8581 ;	---------------------------------
                                   8582 ; Function SetBlock
                                   8583 ; ---------------------------------
      0029EE                       8584 _SetBlock::
      0029EE DD E5            [15] 8585 	push	ix
      0029F0 DD 21 00 00      [14] 8586 	ld	ix,#0
      0029F4 DD 39            [15] 8587 	add	ix,sp
                                   8588 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0029F6 DD 7E 04         [19] 8589 	ld	a, 4 (ix)
      0029F9 06 00            [ 7] 8590 	ld	b, #0x00
      0029FB 4F               [ 4] 8591 	ld	c, a
      0029FC 78               [ 4] 8592 	ld	a, b
      0029FD C6 18            [ 7] 8593 	add	a, #0x18
      0029FF 47               [ 4] 8594 	ld	b, a
      002A00 DD 6E 05         [19] 8595 	ld	l, 5 (ix)
      002A03 26 00            [ 7] 8596 	ld	h, #0x00
      002A05 29               [11] 8597 	add	hl, hl
      002A06 29               [11] 8598 	add	hl, hl
      002A07 29               [11] 8599 	add	hl, hl
      002A08 29               [11] 8600 	add	hl, hl
      002A09 29               [11] 8601 	add	hl, hl
      002A0A 09               [11] 8602 	add	hl, bc
      002A0B DD 7E 06         [19] 8603 	ld	a, 6 (ix)
      002A0E F5               [11] 8604 	push	af
      002A0F 33               [ 6] 8605 	inc	sp
      002A10 E5               [11] 8606 	push	hl
      002A11 CDr00r00         [17] 8607 	call	_WRTVRM
      002A14 F1               [10] 8608 	pop	af
      002A15 33               [ 6] 8609 	inc	sp
                                   8610 ;src\/Title.h:16: }
      002A16 DD E1            [14] 8611 	pop	ix
      002A18 C9               [10] 8612 	ret
                                   8613 ;src\/Title.h:18: void TitleScreen() {
                                   8614 ;	---------------------------------
                                   8615 ; Function TitleScreen
                                   8616 ; ---------------------------------
      002A19                       8617 _TitleScreen::
      002A19 DD E5            [15] 8618 	push	ix
      002A1B DD 21 00 00      [14] 8619 	ld	ix,#0
      002A1F DD 39            [15] 8620 	add	ix,sp
      002A21 21 EB FF         [10] 8621 	ld	hl, #-21
      002A24 39               [11] 8622 	add	hl, sp
      002A25 F9               [ 6] 8623 	ld	sp, hl
                                   8624 ;src\/Title.h:19: byte colorIndex = 0;
      002A26 0E 00            [ 7] 8625 	ld	c, #0x00
                                   8626 ;src\/Title.h:52: const char blocks[] = {
      002A28 21 00 00         [10] 8627 	ld	hl, #0
      002A2B 39               [11] 8628 	add	hl, sp
      002A2C EB               [ 4] 8629 	ex	de, hl
      002A2D 3E 8E            [ 7] 8630 	ld	a, #0x8e
      002A2F 12               [ 7] 8631 	ld	(de), a
      002A30 6B               [ 4] 8632 	ld	l, e
      002A31 62               [ 4] 8633 	ld	h, d
      002A32 23               [ 6] 8634 	inc	hl
      002A33 36 8F            [10] 8635 	ld	(hl), #0x8f
      002A35 6B               [ 4] 8636 	ld	l, e
      002A36 62               [ 4] 8637 	ld	h, d
      002A37 23               [ 6] 8638 	inc	hl
      002A38 23               [ 6] 8639 	inc	hl
      002A39 36 90            [10] 8640 	ld	(hl), #0x90
      002A3B 6B               [ 4] 8641 	ld	l, e
      002A3C 62               [ 4] 8642 	ld	h, d
      002A3D 23               [ 6] 8643 	inc	hl
      002A3E 23               [ 6] 8644 	inc	hl
      002A3F 23               [ 6] 8645 	inc	hl
      002A40 36 91            [10] 8646 	ld	(hl), #0x91
      002A42 21 04 00         [10] 8647 	ld	hl, #0x0004
      002A45 19               [11] 8648 	add	hl, de
      002A46 36 92            [10] 8649 	ld	(hl), #0x92
      002A48 21 05 00         [10] 8650 	ld	hl, #0x0005
      002A4B 19               [11] 8651 	add	hl, de
      002A4C 36 93            [10] 8652 	ld	(hl), #0x93
      002A4E 21 06 00         [10] 8653 	ld	hl, #0x0006
      002A51 19               [11] 8654 	add	hl, de
      002A52 36 94            [10] 8655 	ld	(hl), #0x94
                                   8656 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002A54 21 07 00         [10] 8657 	ld	hl, #7
      002A57 39               [11] 8658 	add	hl, sp
      002A58 DD 75 F6         [19] 8659 	ld	-10 (ix), l
      002A5B DD 74 F7         [19] 8660 	ld	-9 (ix), h
      002A5E 36 8E            [10] 8661 	ld	(hl), #0x8e
      002A60 DD 6E F6         [19] 8662 	ld	l, -10 (ix)
      002A63 DD 66 F7         [19] 8663 	ld	h, -9 (ix)
      002A66 23               [ 6] 8664 	inc	hl
      002A67 36 90            [10] 8665 	ld	(hl), #0x90
      002A69 DD 6E F6         [19] 8666 	ld	l, -10 (ix)
      002A6C DD 66 F7         [19] 8667 	ld	h, -9 (ix)
      002A6F 23               [ 6] 8668 	inc	hl
      002A70 23               [ 6] 8669 	inc	hl
      002A71 36 92            [10] 8670 	ld	(hl), #0x92
      002A73 DD 6E F6         [19] 8671 	ld	l, -10 (ix)
      002A76 DD 66 F7         [19] 8672 	ld	h, -9 (ix)
      002A79 23               [ 6] 8673 	inc	hl
      002A7A 23               [ 6] 8674 	inc	hl
      002A7B 23               [ 6] 8675 	inc	hl
      002A7C 36 94            [10] 8676 	ld	(hl), #0x94
                                   8677 ;src\/Title.h:65: InitVRAM();
      002A7E C5               [11] 8678 	push	bc
      002A7F D5               [11] 8679 	push	de
      002A80 CDr52r17         [17] 8680 	call	_InitVRAM
      002A83 21 00 01         [10] 8681 	ld	hl, #0x0100
      002A86 E5               [11] 8682 	push	hl
      002A87 21r00r2C         [10] 8683 	ld	hl, #_TitleScreen_title_65536_284
      002A8A E5               [11] 8684 	push	hl
      002A8B 21 00 18         [10] 8685 	ld	hl, #0x1800
      002A8E E5               [11] 8686 	push	hl
      002A8F CDr00r00         [17] 8687 	call	_LDIRVM
      002A92 21 06 00         [10] 8688 	ld	hl, #6
      002A95 39               [11] 8689 	add	hl, sp
      002A96 F9               [ 6] 8690 	ld	sp, hl
      002A97 11 05 0D         [10] 8691 	ld	de, #0x0d05
      002A9A D5               [11] 8692 	push	de
      002A9B 21r00r2D         [10] 8693 	ld	hl, #___str_10
      002A9E E5               [11] 8694 	push	hl
      002A9F CDr38r11         [17] 8695 	call	_DrawString
      002AA2 F1               [10] 8696 	pop	af
      002AA3 26 17            [ 7] 8697 	ld	h,#0x17
      002AA5 E3               [19] 8698 	ex	(sp),hl
      002AA6 33               [ 6] 8699 	inc	sp
      002AA7 AF               [ 4] 8700 	xor	a, a
      002AA8 F5               [11] 8701 	push	af
      002AA9 33               [ 6] 8702 	inc	sp
      002AAA 21r17r2D         [10] 8703 	ld	hl, #___str_11
      002AAD E5               [11] 8704 	push	hl
      002AAE CDr38r11         [17] 8705 	call	_DrawString
      002AB1 F1               [10] 8706 	pop	af
      002AB2 F1               [10] 8707 	pop	af
      002AB3 11 19 17         [10] 8708 	ld	de, #0x1719
      002AB6 D5               [11] 8709 	push	de
      002AB7 21r2Cr2D         [10] 8710 	ld	hl, #___str_12
      002ABA E5               [11] 8711 	push	hl
      002ABB CDr38r11         [17] 8712 	call	_DrawString
      002ABE F1               [10] 8713 	pop	af
      002ABF F1               [10] 8714 	pop	af
      002AC0 D1               [10] 8715 	pop	de
      002AC1 C1               [10] 8716 	pop	bc
                                   8717 ;src\/Title.h:73: while(TRUE) {
      002AC2                       8718 00120$:
                                   8719 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002AC2 DD 36 FD 00      [19] 8720 	ld	-3 (ix), #0
                                   8721 ;src\/Title.h:78: word counter = 0;
      002AC6 AF               [ 4] 8722 	xor	a, a
      002AC7 DD 77 FE         [19] 8723 	ld	-2 (ix), a
      002ACA DD 77 FF         [19] 8724 	ld	-1 (ix), a
                                   8725 ;src\/Title.h:88: do {
      002ACD                       8726 00106$:
                                   8727 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002ACD C5               [11] 8728 	push	bc
      002ACE D5               [11] 8729 	push	de
      002ACF 11 1F 1F         [10] 8730 	ld	de, #0x1f1f
      002AD2 D5               [11] 8731 	push	de
      002AD3 CDrD9r00         [17] 8732 	call	_GetRandomInInterval
      002AD6 F1               [10] 8733 	pop	af
                                   8734 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002AD7 DD 75 F8         [19] 8735 	ld	-8 (ix), l
      002ADA 11 07 07         [10] 8736 	ld	de, #0x0707
      002ADD D5               [11] 8737 	push	de
      002ADE CDrD9r00         [17] 8738 	call	_GetRandomInInterval
      002AE1 F1               [10] 8739 	pop	af
      002AE2 D1               [10] 8740 	pop	de
      002AE3 C1               [10] 8741 	pop	bc
      002AE4 DD 75 F9         [19] 8742 	ld	-7 (ix), l
                                   8743 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002AE7 DD 6E F8         [19] 8744 	ld	l, -8 (ix)
      002AEA 3E 00            [ 7] 8745 	ld	a, #0x00
      002AEC C6 18            [ 7] 8746 	add	a, #0x18
      002AEE 67               [ 4] 8747 	ld	h, a
      002AEF DD 7E F9         [19] 8748 	ld	a, -7 (ix)
      002AF2 06 00            [ 7] 8749 	ld	b, #0x00
      002AF4 87               [ 4] 8750 	add	a, a
      002AF5 CB 10            [ 8] 8751 	rl	b
      002AF7 87               [ 4] 8752 	add	a, a
      002AF8 CB 10            [ 8] 8753 	rl	b
      002AFA 87               [ 4] 8754 	add	a, a
      002AFB CB 10            [ 8] 8755 	rl	b
      002AFD 87               [ 4] 8756 	add	a, a
      002AFE CB 10            [ 8] 8757 	rl	b
      002B00 87               [ 4] 8758 	add	a, a
      002B01 CB 10            [ 8] 8759 	rl	b
      002B03 85               [ 4] 8760 	add	a, l
      002B04 6F               [ 4] 8761 	ld	l, a
      002B05 78               [ 4] 8762 	ld	a, b
      002B06 8C               [ 4] 8763 	adc	a, h
      002B07 67               [ 4] 8764 	ld	h, a
      002B08 C5               [11] 8765 	push	bc
      002B09 D5               [11] 8766 	push	de
      002B0A CDr00r00         [17] 8767 	call	_RDVRM
      002B0D D1               [10] 8768 	pop	de
      002B0E C1               [10] 8769 	pop	bc
      002B0F DD 75 FA         [19] 8770 	ld	-6 (ix), l
                                   8771 ;src\/Title.h:102: if(counter++ > 1000) {
      002B12 DD 46 FE         [19] 8772 	ld	b, -2 (ix)
      002B15 DD 6E FF         [19] 8773 	ld	l, -1 (ix)
      002B18 DD 34 FE         [23] 8774 	inc	-2 (ix)
      002B1B 20 03            [12] 8775 	jr	NZ, 00193$
      002B1D DD 34 FF         [23] 8776 	inc	-1 (ix)
      002B20                       8777 00193$:
      002B20 3E E8            [ 7] 8778 	ld	a, #0xe8
      002B22 B8               [ 4] 8779 	cp	a, b
      002B23 3E 03            [ 7] 8780 	ld	a, #0x03
      002B25 9D               [ 4] 8781 	sbc	a, l
      002B26 30 0F            [12] 8782 	jr	NC, 00107$
                                   8783 ;src\/Title.h:103: colorIndex++;
      002B28 0C               [ 4] 8784 	inc	c
                                   8785 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002B29 79               [ 4] 8786 	ld	a, c
      002B2A D6 03            [ 7] 8787 	sub	a, #0x03
      002B2C 38 02            [12] 8788 	jr	C, 00102$
      002B2E 0E 00            [ 7] 8789 	ld	c, #0x00
      002B30                       8790 00102$:
                                   8791 ;src\/Title.h:119: counter = 0;
      002B30 AF               [ 4] 8792 	xor	a, a
      002B31 DD 77 FE         [19] 8793 	ld	-2 (ix), a
      002B34 DD 77 FF         [19] 8794 	ld	-1 (ix), a
      002B37                       8795 00107$:
                                   8796 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      002B37 DD 7E FA         [19] 8797 	ld	a, -6 (ix)
      002B3A B7               [ 4] 8798 	or	a, a
      002B3B 28 90            [12] 8799 	jr	Z, 00106$
      002B3D 79               [ 4] 8800 	ld	a, c
      002B3E 3C               [ 4] 8801 	inc	a
      002B3F F5               [11] 8802 	push	af
      002B40 17               [ 4] 8803 	rla
      002B41 9F               [ 4] 8804 	sbc	a, a
      002B42 47               [ 4] 8805 	ld	b, a
      002B43 F1               [10] 8806 	pop	af
      002B44 DD 86 F6         [19] 8807 	add	a, -10 (ix)
      002B47 DD 77 FB         [19] 8808 	ld	-5 (ix), a
      002B4A 78               [ 4] 8809 	ld	a, b
      002B4B DD 8E F7         [19] 8810 	adc	a, -9 (ix)
      002B4E DD 77 FC         [19] 8811 	ld	-4 (ix), a
      002B51 DD 6E FB         [19] 8812 	ld	l, -5 (ix)
      002B54 DD 66 FC         [19] 8813 	ld	h, -4 (ix)
      002B57 46               [ 7] 8814 	ld	b, (hl)
      002B58 DD 7E FA         [19] 8815 	ld	a, -6 (ix)
      002B5B 90               [ 4] 8816 	sub	a, b
      002B5C CArCDr2A         [10] 8817 	jp	Z,00106$
                                   8818 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002B5F 06 00            [ 7] 8819 	ld	b, #0x00
      002B61                       8820 00123$:
      002B61 78               [ 4] 8821 	ld	a, b
      002B62 D6 0A            [ 7] 8822 	sub	a, #0x0a
      002B64 30 79            [12] 8823 	jr	NC, 00118$
                                   8824 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002B66 2A 9E FC         [16] 8825 	ld	hl, (_JIFFY)
      002B69 DD 75 FE         [19] 8826 	ld	-2 (ix), l
      002B6C DD 74 FF         [19] 8827 	ld	-1 (ix), h
                                   8828 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002B6F                       8829 00109$:
      002B6F FD 21 9E FC      [14] 8830 	ld	iy, #_JIFFY
      002B73 FD 7E 00         [19] 8831 	ld	a, 0 (iy)
      002B76 DD 96 FE         [19] 8832 	sub	a, -2 (ix)
      002B79 20 08            [12] 8833 	jr	NZ, 00195$
      002B7B FD 7E 01         [19] 8834 	ld	a, 1 (iy)
      002B7E DD 96 FF         [19] 8835 	sub	a, -1 (ix)
      002B81 28 EC            [12] 8836 	jr	Z, 00109$
      002B83                       8837 00195$:
                                   8838 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002B83 DD 6E FD         [19] 8839 	ld	l, -3 (ix)
      002B86 26 00            [ 7] 8840 	ld	h, #0x00
      002B88 19               [11] 8841 	add	hl, de
      002B89 7E               [ 7] 8842 	ld	a, (hl)
      002B8A C5               [11] 8843 	push	bc
      002B8B D5               [11] 8844 	push	de
      002B8C F5               [11] 8845 	push	af
      002B8D 33               [ 6] 8846 	inc	sp
      002B8E DD 66 F9         [19] 8847 	ld	h, -7 (ix)
      002B91 DD 6E F8         [19] 8848 	ld	l, -8 (ix)
      002B94 E5               [11] 8849 	push	hl
      002B95 CDrEEr29         [17] 8850 	call	_SetBlock
      002B98 F1               [10] 8851 	pop	af
      002B99 33               [ 6] 8852 	inc	sp
      002B9A D1               [10] 8853 	pop	de
      002B9B C1               [10] 8854 	pop	bc
                                   8855 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002B9C DD 7E FD         [19] 8856 	ld	a, -3 (ix)
      002B9F DD 34 FD         [23] 8857 	inc	-3 (ix)
      002BA2 D6 07            [ 7] 8858 	sub	a, #0x07
      002BA4 38 04            [12] 8859 	jr	C, 00113$
      002BA6 DD 36 FD 00      [19] 8860 	ld	-3 (ix), #0
      002BAA                       8861 00113$:
                                   8862 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002BAA C5               [11] 8863 	push	bc
      002BAB D5               [11] 8864 	push	de
      002BAC 2E 00            [ 7] 8865 	ld	l, #0x00
      002BAE CDr00r00         [17] 8866 	call	_GTTRIG
                                   8867 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002BB1 DD 75 FF         [19] 8868 	ld	-1 (ix), l
      002BB4 2E 01            [ 7] 8869 	ld	l, #0x01
      002BB6 CDr00r00         [17] 8870 	call	_GTTRIG
      002BB9 D1               [10] 8871 	pop	de
      002BBA C1               [10] 8872 	pop	bc
                                   8873 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      002BBB E5               [11] 8874 	push	hl
      002BBC C5               [11] 8875 	push	bc
      002BBD D5               [11] 8876 	push	de
      002BBE 2E 03            [ 7] 8877 	ld	l, #0x03
      002BC0 CDr00r00         [17] 8878 	call	_GTTRIG
      002BC3 7D               [ 4] 8879 	ld	a, l
      002BC4 D1               [10] 8880 	pop	de
      002BC5 C1               [10] 8881 	pop	bc
      002BC6 E1               [10] 8882 	pop	hl
      002BC7 67               [ 4] 8883 	ld	h, a
                                   8884 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002BC8 DD 7E FF         [19] 8885 	ld	a, -1 (ix)
      002BCB 3C               [ 4] 8886 	inc	a
      002BCC 28 06            [12] 8887 	jr	Z, 00114$
      002BCE 2C               [ 4] 8888 	inc	l
      002BCF 28 03            [12] 8889 	jr	Z, 00114$
      002BD1 24               [ 4] 8890 	inc	h
      002BD2 20 08            [12] 8891 	jr	NZ, 00124$
      002BD4                       8892 00114$:
                                   8893 ;src\/Title.h:168: rndSeed = JIFFY;
      002BD4 3A 9E FC         [13] 8894 	ld	a,(#_JIFFY + 0)
      002BD7 32r08r00         [13] 8895 	ld	(#_rndSeed), a
                                   8896 ;src\/Title.h:169: return;
      002BDA 18 1F            [12] 8897 	jr	00125$
      002BDC                       8898 00124$:
                                   8899 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002BDC 04               [ 4] 8900 	inc	b
      002BDD 18 82            [12] 8901 	jr	00123$
      002BDF                       8902 00118$:
                                   8903 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002BDF DD 6E FB         [19] 8904 	ld	l, -5 (ix)
      002BE2 DD 66 FC         [19] 8905 	ld	h, -4 (ix)
      002BE5 7E               [ 7] 8906 	ld	a, (hl)
      002BE6 C5               [11] 8907 	push	bc
      002BE7 D5               [11] 8908 	push	de
      002BE8 F5               [11] 8909 	push	af
      002BE9 33               [ 6] 8910 	inc	sp
      002BEA DD 66 F9         [19] 8911 	ld	h, -7 (ix)
      002BED DD 6E F8         [19] 8912 	ld	l, -8 (ix)
      002BF0 E5               [11] 8913 	push	hl
      002BF1 CDrEEr29         [17] 8914 	call	_SetBlock
      002BF4 F1               [10] 8915 	pop	af
      002BF5 33               [ 6] 8916 	inc	sp
      002BF6 D1               [10] 8917 	pop	de
      002BF7 C1               [10] 8918 	pop	bc
      002BF8 C3rC2r2A         [10] 8919 	jp	00120$
      002BFB                       8920 00125$:
                                   8921 ;src\/Title.h:176: }
      002BFB DD F9            [10] 8922 	ld	sp, ix
      002BFD DD E1            [14] 8923 	pop	ix
      002BFF C9               [10] 8924 	ret
      002C00                       8925 _TitleScreen_title_65536_284:
      002C00 00                    8926 	.db #0x00	; 0
      002C01 00                    8927 	.db #0x00	; 0
      002C02 00                    8928 	.db #0x00	; 0
      002C03 00                    8929 	.db #0x00	; 0
      002C04 8E                    8930 	.db #0x8e	; 142
      002C05 8E                    8931 	.db #0x8e	; 142
      002C06 8E                    8932 	.db #0x8e	; 142
      002C07 8E                    8933 	.db #0x8e	; 142
      002C08 00                    8934 	.db #0x00	; 0
      002C09 8E                    8935 	.db #0x8e	; 142
      002C0A 8E                    8936 	.db #0x8e	; 142
      002C0B 8E                    8937 	.db #0x8e	; 142
      002C0C 8E                    8938 	.db #0x8e	; 142
      002C0D 8E                    8939 	.db #0x8e	; 142
      002C0E 8E                    8940 	.db #0x8e	; 142
      002C0F 00                    8941 	.db #0x00	; 0
      002C10 00                    8942 	.db #0x00	; 0
      002C11 8E                    8943 	.db #0x8e	; 142
      002C12 8E                    8944 	.db #0x8e	; 142
      002C13 00                    8945 	.db #0x00	; 0
      002C14 00                    8946 	.db #0x00	; 0
      002C15 00                    8947 	.db #0x00	; 0
      002C16 8E                    8948 	.db #0x8e	; 142
      002C17 8E                    8949 	.db #0x8e	; 142
      002C18 00                    8950 	.db #0x00	; 0
      002C19 00                    8951 	.db #0x00	; 0
      002C1A 00                    8952 	.db #0x00	; 0
      002C1B 00                    8953 	.db #0x00	; 0
      002C1C 8E                    8954 	.db #0x8e	; 142
      002C1D 8E                    8955 	.db #0x8e	; 142
      002C1E 8E                    8956 	.db #0x8e	; 142
      002C1F 8E                    8957 	.db #0x8e	; 142
      002C20 00                    8958 	.db #0x00	; 0
      002C21 00                    8959 	.db #0x00	; 0
      002C22 00                    8960 	.db #0x00	; 0
      002C23 8E                    8961 	.db #0x8e	; 142
      002C24 8E                    8962 	.db #0x8e	; 142
      002C25 8E                    8963 	.db #0x8e	; 142
      002C26 8E                    8964 	.db #0x8e	; 142
      002C27 8E                    8965 	.db #0x8e	; 142
      002C28 00                    8966 	.db #0x00	; 0
      002C29 8E                    8967 	.db #0x8e	; 142
      002C2A 8E                    8968 	.db #0x8e	; 142
      002C2B 00                    8969 	.db #0x00	; 0
      002C2C 00                    8970 	.db #0x00	; 0
      002C2D 00                    8971 	.db #0x00	; 0
      002C2E 8E                    8972 	.db #0x8e	; 142
      002C2F 8E                    8973 	.db #0x8e	; 142
      002C30 00                    8974 	.db #0x00	; 0
      002C31 00                    8975 	.db #0x00	; 0
      002C32 8E                    8976 	.db #0x8e	; 142
      002C33 8E                    8977 	.db #0x8e	; 142
      002C34 00                    8978 	.db #0x00	; 0
      002C35 00                    8979 	.db #0x00	; 0
      002C36 8E                    8980 	.db #0x8e	; 142
      002C37 8E                    8981 	.db #0x8e	; 142
      002C38 00                    8982 	.db #0x00	; 0
      002C39 00                    8983 	.db #0x00	; 0
      002C3A 00                    8984 	.db #0x00	; 0
      002C3B 8E                    8985 	.db #0x8e	; 142
      002C3C 8E                    8986 	.db #0x8e	; 142
      002C3D 8E                    8987 	.db #0x8e	; 142
      002C3E 8E                    8988 	.db #0x8e	; 142
      002C3F 8E                    8989 	.db #0x8e	; 142
      002C40 00                    8990 	.db #0x00	; 0
      002C41 00                    8991 	.db #0x00	; 0
      002C42 8E                    8992 	.db #0x8e	; 142
      002C43 8E                    8993 	.db #0x8e	; 142
      002C44 8E                    8994 	.db #0x8e	; 142
      002C45 00                    8995 	.db #0x00	; 0
      002C46 8E                    8996 	.db #0x8e	; 142
      002C47 8E                    8997 	.db #0x8e	; 142
      002C48 00                    8998 	.db #0x00	; 0
      002C49 8E                    8999 	.db #0x8e	; 142
      002C4A 8E                    9000 	.db #0x8e	; 142
      002C4B 00                    9001 	.db #0x00	; 0
      002C4C 00                    9002 	.db #0x00	; 0
      002C4D 00                    9003 	.db #0x00	; 0
      002C4E 8E                    9004 	.db #0x8e	; 142
      002C4F 8E                    9005 	.db #0x8e	; 142
      002C50 00                    9006 	.db #0x00	; 0
      002C51 00                    9007 	.db #0x00	; 0
      002C52 00                    9008 	.db #0x00	; 0
      002C53 8E                    9009 	.db #0x8e	; 142
      002C54 8E                    9010 	.db #0x8e	; 142
      002C55 00                    9011 	.db #0x00	; 0
      002C56 8E                    9012 	.db #0x8e	; 142
      002C57 8E                    9013 	.db #0x8e	; 142
      002C58 00                    9014 	.db #0x00	; 0
      002C59 00                    9015 	.db #0x00	; 0
      002C5A 8E                    9016 	.db #0x8e	; 142
      002C5B 8E                    9017 	.db #0x8e	; 142
      002C5C 8E                    9018 	.db #0x8e	; 142
      002C5D 00                    9019 	.db #0x00	; 0
      002C5E 8E                    9020 	.db #0x8e	; 142
      002C5F 8E                    9021 	.db #0x8e	; 142
      002C60 00                    9022 	.db #0x00	; 0
      002C61 8E                    9023 	.db #0x8e	; 142
      002C62 8E                    9024 	.db #0x8e	; 142
      002C63 8E                    9025 	.db #0x8e	; 142
      002C64 00                    9026 	.db #0x00	; 0
      002C65 00                    9027 	.db #0x00	; 0
      002C66 8E                    9028 	.db #0x8e	; 142
      002C67 8E                    9029 	.db #0x8e	; 142
      002C68 00                    9030 	.db #0x00	; 0
      002C69 8E                    9031 	.db #0x8e	; 142
      002C6A 8E                    9032 	.db #0x8e	; 142
      002C6B 00                    9033 	.db #0x00	; 0
      002C6C 00                    9034 	.db #0x00	; 0
      002C6D 8E                    9035 	.db #0x8e	; 142
      002C6E 8E                    9036 	.db #0x8e	; 142
      002C6F 00                    9037 	.db #0x00	; 0
      002C70 00                    9038 	.db #0x00	; 0
      002C71 00                    9039 	.db #0x00	; 0
      002C72 00                    9040 	.db #0x00	; 0
      002C73 00                    9041 	.db #0x00	; 0
      002C74 8E                    9042 	.db #0x8e	; 142
      002C75 8E                    9043 	.db #0x8e	; 142
      002C76 8E                    9044 	.db #0x8e	; 142
      002C77 00                    9045 	.db #0x00	; 0
      002C78 00                    9046 	.db #0x00	; 0
      002C79 8E                    9047 	.db #0x8e	; 142
      002C7A 8E                    9048 	.db #0x8e	; 142
      002C7B 8E                    9049 	.db #0x8e	; 142
      002C7C 00                    9050 	.db #0x00	; 0
      002C7D 00                    9051 	.db #0x00	; 0
      002C7E 8E                    9052 	.db #0x8e	; 142
      002C7F 8E                    9053 	.db #0x8e	; 142
      002C80 00                    9054 	.db #0x00	; 0
      002C81 8E                    9055 	.db #0x8e	; 142
      002C82 8E                    9056 	.db #0x8e	; 142
      002C83 00                    9057 	.db #0x00	; 0
      002C84 00                    9058 	.db #0x00	; 0
      002C85 00                    9059 	.db #0x00	; 0
      002C86 8E                    9060 	.db #0x8e	; 142
      002C87 8E                    9061 	.db #0x8e	; 142
      002C88 00                    9062 	.db #0x00	; 0
      002C89 8E                    9063 	.db #0x8e	; 142
      002C8A 8E                    9064 	.db #0x8e	; 142
      002C8B 8E                    9065 	.db #0x8e	; 142
      002C8C 8E                    9066 	.db #0x8e	; 142
      002C8D 8E                    9067 	.db #0x8e	; 142
      002C8E 00                    9068 	.db #0x00	; 0
      002C8F 00                    9069 	.db #0x00	; 0
      002C90 00                    9070 	.db #0x00	; 0
      002C91 00                    9071 	.db #0x00	; 0
      002C92 00                    9072 	.db #0x00	; 0
      002C93 00                    9073 	.db #0x00	; 0
      002C94 8E                    9074 	.db #0x8e	; 142
      002C95 8E                    9075 	.db #0x8e	; 142
      002C96 00                    9076 	.db #0x00	; 0
      002C97 00                    9077 	.db #0x00	; 0
      002C98 00                    9078 	.db #0x00	; 0
      002C99 8E                    9079 	.db #0x8e	; 142
      002C9A 8E                    9080 	.db #0x8e	; 142
      002C9B 00                    9081 	.db #0x00	; 0
      002C9C 00                    9082 	.db #0x00	; 0
      002C9D 00                    9083 	.db #0x00	; 0
      002C9E 8E                    9084 	.db #0x8e	; 142
      002C9F 8E                    9085 	.db #0x8e	; 142
      002CA0 00                    9086 	.db #0x00	; 0
      002CA1 8E                    9087 	.db #0x8e	; 142
      002CA2 8E                    9088 	.db #0x8e	; 142
      002CA3 00                    9089 	.db #0x00	; 0
      002CA4 00                    9090 	.db #0x00	; 0
      002CA5 00                    9091 	.db #0x00	; 0
      002CA6 8E                    9092 	.db #0x8e	; 142
      002CA7 8E                    9093 	.db #0x8e	; 142
      002CA8 00                    9094 	.db #0x00	; 0
      002CA9 8E                    9095 	.db #0x8e	; 142
      002CAA 8E                    9096 	.db #0x8e	; 142
      002CAB 8E                    9097 	.db #0x8e	; 142
      002CAC 8E                    9098 	.db #0x8e	; 142
      002CAD 8E                    9099 	.db #0x8e	; 142
      002CAE 00                    9100 	.db #0x00	; 0
      002CAF 00                    9101 	.db #0x00	; 0
      002CB0 00                    9102 	.db #0x00	; 0
      002CB1 00                    9103 	.db #0x00	; 0
      002CB2 00                    9104 	.db #0x00	; 0
      002CB3 00                    9105 	.db #0x00	; 0
      002CB4 8E                    9106 	.db #0x8e	; 142
      002CB5 8E                    9107 	.db #0x8e	; 142
      002CB6 00                    9108 	.db #0x00	; 0
      002CB7 00                    9109 	.db #0x00	; 0
      002CB8 00                    9110 	.db #0x00	; 0
      002CB9 8E                    9111 	.db #0x8e	; 142
      002CBA 8E                    9112 	.db #0x8e	; 142
      002CBB 00                    9113 	.db #0x00	; 0
      002CBC 00                    9114 	.db #0x00	; 0
      002CBD 00                    9115 	.db #0x00	; 0
      002CBE 8E                    9116 	.db #0x8e	; 142
      002CBF 8E                    9117 	.db #0x8e	; 142
      002CC0 00                    9118 	.db #0x00	; 0
      002CC1 8E                    9119 	.db #0x8e	; 142
      002CC2 8E                    9120 	.db #0x8e	; 142
      002CC3 8E                    9121 	.db #0x8e	; 142
      002CC4 8E                    9122 	.db #0x8e	; 142
      002CC5 8E                    9123 	.db #0x8e	; 142
      002CC6 8E                    9124 	.db #0x8e	; 142
      002CC7 8E                    9125 	.db #0x8e	; 142
      002CC8 00                    9126 	.db #0x00	; 0
      002CC9 8E                    9127 	.db #0x8e	; 142
      002CCA 8E                    9128 	.db #0x8e	; 142
      002CCB 00                    9129 	.db #0x00	; 0
      002CCC 00                    9130 	.db #0x00	; 0
      002CCD 00                    9131 	.db #0x00	; 0
      002CCE 8E                    9132 	.db #0x8e	; 142
      002CCF 00                    9133 	.db #0x00	; 0
      002CD0 00                    9134 	.db #0x00	; 0
      002CD1 00                    9135 	.db #0x00	; 0
      002CD2 00                    9136 	.db #0x00	; 0
      002CD3 00                    9137 	.db #0x00	; 0
      002CD4 8E                    9138 	.db #0x8e	; 142
      002CD5 8E                    9139 	.db #0x8e	; 142
      002CD6 00                    9140 	.db #0x00	; 0
      002CD7 00                    9141 	.db #0x00	; 0
      002CD8 00                    9142 	.db #0x00	; 0
      002CD9 8E                    9143 	.db #0x8e	; 142
      002CDA 8E                    9144 	.db #0x8e	; 142
      002CDB 8E                    9145 	.db #0x8e	; 142
      002CDC 8E                    9146 	.db #0x8e	; 142
      002CDD 8E                    9147 	.db #0x8e	; 142
      002CDE 8E                    9148 	.db #0x8e	; 142
      002CDF 8E                    9149 	.db #0x8e	; 142
      002CE0 00                    9150 	.db #0x00	; 0
      002CE1 8E                    9151 	.db #0x8e	; 142
      002CE2 8E                    9152 	.db #0x8e	; 142
      002CE3 00                    9153 	.db #0x00	; 0
      002CE4 00                    9154 	.db #0x00	; 0
      002CE5 00                    9155 	.db #0x00	; 0
      002CE6 8E                    9156 	.db #0x8e	; 142
      002CE7 8E                    9157 	.db #0x8e	; 142
      002CE8 00                    9158 	.db #0x00	; 0
      002CE9 8E                    9159 	.db #0x8e	; 142
      002CEA 8E                    9160 	.db #0x8e	; 142
      002CEB 00                    9161 	.db #0x00	; 0
      002CEC 00                    9162 	.db #0x00	; 0
      002CED 00                    9163 	.db #0x00	; 0
      002CEE 8E                    9164 	.db #0x8e	; 142
      002CEF 00                    9165 	.db #0x00	; 0
      002CF0 00                    9166 	.db #0x00	; 0
      002CF1 00                    9167 	.db #0x00	; 0
      002CF2 00                    9168 	.db #0x00	; 0
      002CF3 00                    9169 	.db #0x00	; 0
      002CF4 8E                    9170 	.db #0x8e	; 142
      002CF5 8E                    9171 	.db #0x8e	; 142
      002CF6 00                    9172 	.db #0x00	; 0
      002CF7 00                    9173 	.db #0x00	; 0
      002CF8 00                    9174 	.db #0x00	; 0
      002CF9 8E                    9175 	.db #0x8e	; 142
      002CFA 8E                    9176 	.db #0x8e	; 142
      002CFB 00                    9177 	.db #0x00	; 0
      002CFC 00                    9178 	.db #0x00	; 0
      002CFD 00                    9179 	.db #0x00	; 0
      002CFE 8E                    9180 	.db #0x8e	; 142
      002CFF 8E                    9181 	.db #0x8e	; 142
      002D00                       9182 ___str_10:
      002D00 50 52 45 53 53 20 54  9183 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002D16 00                    9184 	.db 0x00
      002D17                       9185 ___str_11:
      002D17 41 4E 44 52 45 42 41  9186 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002D2B 00                    9187 	.db 0x00
      002D2C                       9188 ___str_12:
      002D2C 76 2E 3F 2E 3F 2E 3F  9189 	.ascii "v.?.?.?"
      002D33 00                    9190 	.db 0x00
                                   9191 ;src\main.c:91: void main() {
                                   9192 ;	---------------------------------
                                   9193 ; Function main
                                   9194 ; ---------------------------------
      002D34                       9195 _main::
                                   9196 ;src\main.c:93: while(TRUE) {
      002D34                       9197 00102$:
                                   9198 ;src\main.c:99: InitGame();
      002D34 CDr20r28         [17] 9199 	call	_InitGame
                                   9200 ;src\main.c:102: }
      002D37 18 FB            [12] 9201 	jr	00102$
                                   9202 	.area _CODE
                                   9203 	.area _INITIALIZER
      000000                       9204 __xinit__gameOver:
      000000 00                    9205 	.db #0x00	; 0
      000001                       9206 __xinit__col:
      000001 00                    9207 	.db #0x00	; 0
      000002                       9208 __xinit__line:
      000002 00                    9209 	.db #0x00	; 0
      000003                       9210 __xinit__counter:
      000003 00                    9211 	.db #0x00	; 0
      000004                       9212 __xinit__blocksRemoved:
      000004 00 00                 9213 	.dw #0x0000
      000006                       9214 __xinit__level:
      000006 01                    9215 	.db #0x01	; 1
      000007                       9216 __xinit__newLevel:
      000007 00                    9217 	.db #0x00	; 0
      000008                       9218 __xinit__rndSeed:
      000008 00                    9219 	.db #0x00	; 0
                                   9220 	.area _CABS (ABS)
