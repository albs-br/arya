                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _DrawBackground
                                     36 	.globl _DrawScore
                                     37 	.globl _DrawColumn
                                     38 	.globl _DrawNumber
                                     39 	.globl _DrawString
                                     40 	.globl _DrawChar
                                     41 	.globl _DrawExplosionSprite
                                     42 	.globl _HideExplosionSprite
                                     43 	.globl _HideHitSprite
                                     44 	.globl _DrawHitSprite
                                     45 	.globl _HideArrowSprite
                                     46 	.globl _DrawArrowSprite
                                     47 	.globl _GetRandomInInterval
                                     48 	.globl _GetRandom
                                     49 	.globl _InitRnd
                                     50 	.globl _Power
                                     51 	.globl _Wait
                                     52 	.globl _SNSMAT
                                     53 	.globl _GTTRIG
                                     54 	.globl _GTSTCK
                                     55 	.globl _BEEP
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _d_value
                                     67 	.globl _d_line
                                     68 	.globl _d_col
                                     69 	.globl _rndSeed
                                     70 	.globl _newLevel
                                     71 	.globl _level
                                     72 	.globl _blocksRemoved
                                     73 	.globl _counter
                                     74 	.globl _line
                                     75 	.globl _col
                                     76 	.globl _gameOver
                                     77 	.globl _Rand_x
                                     78 	.globl _Rand_c
                                     79 	.globl _Rand_b
                                     80 	.globl _Rand_a
                                     81 	.globl _speed
                                     82 	.globl _bottomPiece
                                     83 	.globl _midPiece
                                     84 	.globl _topPiece
                                     85 	.globl _playfieldTemp
                                     86 	.globl _playfield
                                     87 	.globl _GETPNT
                                     88 	.globl _PUTPNT
                                     89 	.globl _REPCNT
                                     90 	.globl _SCNCNT
                                     91 	.globl _ATRBYT
                                     92 	.globl _CMASK
                                     93 	.globl _CLOC
                                     94 	.globl _BDRCLR
                                     95 	.globl _BAKCLR
                                     96 	.globl _FORCLR
                                     97 	.globl _TRGFLG
                                     98 	.globl _STATFL
                                     99 	.globl _MSX_vdp_regs
                                    100 	.globl _CNSDFG
                                    101 	.globl _CSRX
                                    102 	.globl _CSRY
                                    103 	.globl _MSX_modedata_screen3
                                    104 	.globl _MSX_modedata_screen2
                                    105 	.globl _MSX_modedata_screen1
                                    106 	.globl _MSX_modedata_screen0
                                    107 	.globl _CLIKSW
                                    108 	.globl _JIFFY
                                    109 	.globl _CLMLST
                                    110 	.globl _CRTCNT
                                    111 	.globl _LINLEN
                                    112 	.globl _LINL32
                                    113 	.globl _LINL40
                                    114 	.globl _MSX_charset
                                    115 	.globl _FONT
                                    116 	.globl _pieces
                                    117 	.globl _MSX_version
                                    118 	.globl _MSX_vdp_port_write
                                    119 	.globl _MSX_vdp_port_read
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 ;--------------------------------------------------------
                                    124 ; ram data
                                    125 ;--------------------------------------------------------
                                    126 	.area _DATA
                           000004   127 _MSX_charset	=	0x0004
                           00F3AE   128 _LINL40	=	0xf3ae
                           00F3AF   129 _LINL32	=	0xf3af
                           00F3B0   130 _LINLEN	=	0xf3b0
                           00F3B1   131 _CRTCNT	=	0xf3b1
                           00F3B1   132 _CLMLST	=	0xf3b1
                           00FC9E   133 _JIFFY	=	0xfc9e
                           00F3DB   134 _CLIKSW	=	0xf3db
                           00F3B3   135 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   136 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   137 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   138 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   139 _CSRY	=	0xf3dc
                           00F3DD   140 _CSRX	=	0xf3dd
                           00F3DE   141 _CNSDFG	=	0xf3de
                           00F3DF   142 _MSX_vdp_regs	=	0xf3df
                           00F3E7   143 _STATFL	=	0xf3e7
                           00F3E8   144 _TRGFLG	=	0xf3e8
                           00F3E9   145 _FORCLR	=	0xf3e9
                           00F3EA   146 _BAKCLR	=	0xf3ea
                           00F3EB   147 _BDRCLR	=	0xf3eb
                           00F92A   148 _CLOC	=	0xf92a
                           00F92C   149 _CMASK	=	0xf92c
                           00F3F2   150 _ATRBYT	=	0xf3f2
                           00F3F6   151 _SCNCNT	=	0xf3f6
                           00F3F7   152 _REPCNT	=	0xf3f7
                           00F3F8   153 _PUTPNT	=	0xf3f8
                           00F3FA   154 _GETPNT	=	0xf3fa
      000000                        155 _playfield::
      000000                        156 	.ds 72
      000048                        157 _playfieldTemp::
      000048                        158 	.ds 72
      000090                        159 _topPiece::
      000090                        160 	.ds 1
      000091                        161 _midPiece::
      000091                        162 	.ds 1
      000092                        163 _bottomPiece::
      000092                        164 	.ds 1
      000093                        165 _speed::
      000093                        166 	.ds 1
      000094                        167 _Rand_a::
      000094                        168 	.ds 1
      000095                        169 _Rand_b::
      000095                        170 	.ds 1
      000096                        171 _Rand_c::
      000096                        172 	.ds 1
      000097                        173 _Rand_x::
      000097                        174 	.ds 1
                                    175 ;--------------------------------------------------------
                                    176 ; ram data
                                    177 ;--------------------------------------------------------
                                    178 	.area _INITIALIZED
      000000                        179 _gameOver::
      000000                        180 	.ds 1
      000001                        181 _col::
      000001                        182 	.ds 1
      000002                        183 _line::
      000002                        184 	.ds 1
      000003                        185 _counter::
      000003                        186 	.ds 1
      000004                        187 _blocksRemoved::
      000004                        188 	.ds 2
      000006                        189 _level::
      000006                        190 	.ds 1
      000007                        191 _newLevel::
      000007                        192 	.ds 1
      000008                        193 _rndSeed::
      000008                        194 	.ds 1
      000009                        195 _d_col::
      000009                        196 	.ds 1
      00000A                        197 _d_line::
      00000A                        198 	.ds 1
      00000B                        199 _d_value::
      00000B                        200 	.ds 1
                                    201 ;--------------------------------------------------------
                                    202 ; absolute external ram data
                                    203 ;--------------------------------------------------------
                                    204 	.area _DABS (ABS)
                                    205 ;--------------------------------------------------------
                                    206 ; global & static initialisations
                                    207 ;--------------------------------------------------------
                                    208 	.area _HOME
                                    209 	.area _GSINIT
                                    210 	.area _GSFINAL
                                    211 	.area _GSINIT
                                    212 ;--------------------------------------------------------
                                    213 ; Home
                                    214 ;--------------------------------------------------------
                                    215 	.area _HOME
                                    216 	.area _HOME
                                    217 ;--------------------------------------------------------
                                    218 ; code
                                    219 ;--------------------------------------------------------
                                    220 	.area _CODE
                                    221 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    222 ;	---------------------------------
                                    223 ; Function Wait
                                    224 ; ---------------------------------
      000000                        225 _Wait::
                                    226 ;src\/Common.h:2: do {
      000000 D1               [10]  227 	pop	de
      000001 C1               [10]  228 	pop	bc
      000002 C5               [11]  229 	push	bc
      000003 D5               [11]  230 	push	de
      000004                        231 00104$:
                                    232 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  233 	ld	de, (_JIFFY)
                                    234 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        235 00101$:
      000008 2A 9E FC         [16]  236 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  237 	cp	a, a
      00000C ED 52            [15]  238 	sbc	hl, de
      00000E 28 F8            [12]  239 	jr	Z, 00101$
                                    240 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  241 	ld	e, c
      000011 50               [ 4]  242 	ld	d, b
      000012 0B               [ 6]  243 	dec	bc
      000013 7A               [ 4]  244 	ld	a, d
      000014 B3               [ 4]  245 	or	a, e
      000015 20 ED            [12]  246 	jr	NZ, 00104$
                                    247 ;src\/Common.h:8: }
      000017 C9               [10]  248 	ret
                           000006   249 _MSX_vdp_port_read	=	0x0006
                           000007   250 _MSX_vdp_port_write	=	0x0007
                           00002D   251 _MSX_version	=	0x002d
      000018                        252 _pieces:
      000018 04                     253 	.db #0x04	; 4
      000019 08                     254 	.db #0x08	; 8
      00001A 0C                     255 	.db #0x0c	; 12
      00001B 10                     256 	.db #0x10	; 16
      00001C 14                     257 	.db #0x14	; 20
                                    258 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    259 ;	---------------------------------
                                    260 ; Function Power
                                    261 ; ---------------------------------
      00001D                        262 _Power::
      00001D DD E5            [15]  263 	push	ix
      00001F DD 21 00 00      [14]  264 	ld	ix,#0
      000023 DD 39            [15]  265 	add	ix,sp
                                    266 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  267 	ld	c, 4 (ix)
      000028 06 00            [ 7]  268 	ld	b, #0x00
      00002A 69               [ 4]  269 	ld	l, c
      00002B 60               [ 4]  270 	ld	h, b
                                    271 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  272 	ld	a, 5 (ix)
      00002F B7               [ 4]  273 	or	a, a
      000030 20 05            [12]  274 	jr	NZ, 00111$
      000032 21 01 00         [10]  275 	ld	hl, #0x0001
      000035 18 16            [12]  276 	jr	00107$
                                    277 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        278 00111$:
      000037 1E 01            [ 7]  279 	ld	e, #0x01
      000039                        280 00105$:
      000039 7B               [ 4]  281 	ld	a, e
      00003A DD 96 05         [19]  282 	sub	a, 5 (ix)
      00003D 30 0E            [12]  283 	jr	NC, 00103$
                                    284 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  285 	push	bc
      000040 D5               [11]  286 	push	de
      000041 C5               [11]  287 	push	bc
      000042 E5               [11]  288 	push	hl
      000043 CDr00r00         [17]  289 	call	__mulint
      000046 F1               [10]  290 	pop	af
      000047 F1               [10]  291 	pop	af
      000048 D1               [10]  292 	pop	de
      000049 C1               [10]  293 	pop	bc
                                    294 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  295 	inc	e
      00004B 18 EC            [12]  296 	jr	00105$
      00004D                        297 00103$:
                                    298 ;src\/Math.h:10: return power;
      00004D                        299 00107$:
                                    300 ;src\/Math.h:11: }
      00004D DD E1            [14]  301 	pop	ix
      00004F C9               [10]  302 	ret
                                    303 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    304 ;	---------------------------------
                                    305 ; Function InitRnd
                                    306 ; ---------------------------------
      000050                        307 _InitRnd::
                                    308 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  309 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  310 	ld	hl, #2
      000056 39               [11]  311 	add	hl, sp
      000057 AE               [ 7]  312 	xor	a, (hl)
      000058 32r94r00         [13]  313 	ld	(_Rand_a+0), a
                                    314 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  315 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  316 	ld	hl, #3
      000061 39               [11]  317 	add	hl, sp
      000062 AE               [ 7]  318 	xor	a, (hl)
      000063 32r95r00         [13]  319 	ld	(_Rand_b+0), a
                                    320 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  321 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  322 	ld	hl, #4
      00006C 39               [11]  323 	add	hl, sp
      00006D AE               [ 7]  324 	xor	a, (hl)
      00006E 32r96r00         [13]  325 	ld	(_Rand_c+0), a
                                    326 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  327 	ld	hl, #_Rand_x
      000074 34               [11]  328 	inc	(hl)
                                    329 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  330 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  331 	ld	hl, #_Rand_c
      00007B AE               [ 7]  332 	xor	a, (hl)
      00007C 21r97r00         [10]  333 	ld	hl, #_Rand_x
      00007F AE               [ 7]  334 	xor	a, (hl)
      000080 32r94r00         [13]  335 	ld	(_Rand_a+0), a
                                    336 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  337 	ld	hl, #_Rand_b
      000086 7E               [ 7]  338 	ld	a, (hl)
      000087 FD 21r94r00      [14]  339 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  340 	add	a, 0 (iy)
      00008E 77               [ 7]  341 	ld	(hl), a
                                    342 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  343 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  344 	srl	a
      000094 21r96r00         [10]  345 	ld	hl, #_Rand_c
      000097 86               [ 7]  346 	add	a, (hl)
      000098 FD 21r94r00      [14]  347 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  348 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  349 	ld	(_Rand_c+0), a
                                    350 ;src\/Random.h:38: }
      0000A2 C9               [10]  351 	ret
                                    352 ;src\/Random.h:40: unsigned char GetRandom() {
                                    353 ;	---------------------------------
                                    354 ; Function GetRandom
                                    355 ; ---------------------------------
      0000A3                        356 _GetRandom::
                                    357 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  358 	ld	hl, #_Rand_x
      0000A6 34               [11]  359 	inc	(hl)
                                    360 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  361 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  362 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  363 	xor	a, (hl)
      0000AE 21r97r00         [10]  364 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  365 	xor	a, (hl)
      0000B2 32r94r00         [13]  366 	ld	(_Rand_a+0), a
                                    367 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  368 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  369 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  370 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  371 	add	a, 0 (iy)
      0000C0 77               [ 7]  372 	ld	(hl), a
                                    373 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  374 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  375 	srl	a
      0000C6 21r96r00         [10]  376 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  377 	add	a, (hl)
      0000CA FD 21r94r00      [14]  378 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  379 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  380 	ld	(_Rand_c+0), a
                                    381 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  382 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  383 	ld	l, a
                                    384 ;src\/Random.h:47: }
      0000D8 C9               [10]  385 	ret
                                    386 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    387 ;	---------------------------------
                                    388 ; Function GetRandomInInterval
                                    389 ; ---------------------------------
      0000D9                        390 _GetRandomInInterval::
                                    391 ;src\/Random.h:53: do {
      0000D9                        392 00101$:
                                    393 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  394 	call	_GetRandom
      0000DC 7D               [ 4]  395 	ld	a, l
      0000DD 21 03 00         [10]  396 	ld	hl, #3
      0000E0 39               [11]  397 	add	hl, sp
      0000E1 A6               [ 7]  398 	and	a, (hl)
      0000E2 4F               [ 4]  399 	ld	c, a
                                    400 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  401 	ld	hl, #2
      0000E6 39               [11]  402 	add	hl, sp
      0000E7 7E               [ 7]  403 	ld	a, (hl)
      0000E8 91               [ 4]  404 	sub	a, c
      0000E9 38 EE            [12]  405 	jr	C, 00101$
                                    406 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  407 	ld	l, c
                                    408 ;src\/Random.h:59: }
      0000EC C9               [10]  409 	ret
                                    410 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    411 ;	---------------------------------
                                    412 ; Function DrawArrowSprite
                                    413 ; ---------------------------------
      0000ED                        414 _DrawArrowSprite::
      0000ED DD E5            [15]  415 	push	ix
      0000EF DD 21 00 00      [14]  416 	ld	ix,#0
      0000F3 DD 39            [15]  417 	add	ix,sp
      0000F5 21 F8 FF         [10]  418 	ld	hl, #-8
      0000F8 39               [11]  419 	add	hl, sp
      0000F9 F9               [ 6]  420 	ld	sp, hl
                                    421 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  422 	ld	hl, #0
      0000FD 39               [11]  423 	add	hl, sp
      0000FE EB               [ 4]  424 	ex	de, hl
      0000FF 3E 0F            [ 7]  425 	ld	a, #0x0f
      000101 12               [ 7]  426 	ld	(de), a
      000102 6B               [ 4]  427 	ld	l, e
      000103 62               [ 4]  428 	ld	h, d
      000104 23               [ 6]  429 	inc	hl
      000105 36 0E            [10]  430 	ld	(hl), #0x0e
      000107 6B               [ 4]  431 	ld	l, e
      000108 62               [ 4]  432 	ld	h, d
      000109 23               [ 6]  433 	inc	hl
      00010A 23               [ 6]  434 	inc	hl
      00010B 36 05            [10]  435 	ld	(hl), #0x05
      00010D 6B               [ 4]  436 	ld	l, e
      00010E 62               [ 4]  437 	ld	h, d
      00010F 23               [ 6]  438 	inc	hl
      000110 23               [ 6]  439 	inc	hl
      000111 23               [ 6]  440 	inc	hl
      000112 36 04            [10]  441 	ld	(hl), #0x04
      000114 21 04 00         [10]  442 	ld	hl, #0x0004
      000117 19               [11]  443 	add	hl, de
      000118 36 04            [10]  444 	ld	(hl), #0x04
      00011A 21 05 00         [10]  445 	ld	hl, #0x0005
      00011D 19               [11]  446 	add	hl, de
      00011E 36 05            [10]  447 	ld	(hl), #0x05
      000120 21 06 00         [10]  448 	ld	hl, #0x0006
      000123 19               [11]  449 	add	hl, de
      000124 36 0E            [10]  450 	ld	(hl), #0x0e
      000126 21 07 00         [10]  451 	ld	hl, #0x0007
      000129 19               [11]  452 	add	hl, de
      00012A 36 0F            [10]  453 	ld	(hl), #0x0f
                                    454 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  455 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  456 	ld	a, l
      000130 E6 0E            [ 7]  457 	and	a, #0x0e
      000132 6F               [ 4]  458 	ld	l, a
      000133 26 00            [ 7]  459 	ld	h, #0x00
      000135 CB 3C            [ 8]  460 	srl	h
      000137 CB 1D            [ 8]  461 	rr	l
                                    462 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  463 	ld	a, 5 (ix)
      00013C 3D               [ 4]  464 	dec	a
      00013D E5               [11]  465 	push	hl
      00013E D5               [11]  466 	push	de
      00013F F5               [11]  467 	push	af
      000140 33               [ 6]  468 	inc	sp
      000141 01 00 1B         [10]  469 	ld	bc, #0x1b00
      000144 C5               [11]  470 	push	bc
      000145 CDr00r00         [17]  471 	call	_WRTVRM
      000148 F1               [10]  472 	pop	af
      000149 33               [ 6]  473 	inc	sp
      00014A DD 7E 04         [19]  474 	ld	a, 4 (ix)
      00014D F5               [11]  475 	push	af
      00014E 33               [ 6]  476 	inc	sp
      00014F 01 01 1B         [10]  477 	ld	bc, #0x1b01
      000152 C5               [11]  478 	push	bc
      000153 CDr00r00         [17]  479 	call	_WRTVRM
      000156 F1               [10]  480 	pop	af
      000157 33               [ 6]  481 	inc	sp
      000158 AF               [ 4]  482 	xor	a, a
      000159 F5               [11]  483 	push	af
      00015A 33               [ 6]  484 	inc	sp
      00015B 01 02 1B         [10]  485 	ld	bc, #0x1b02
      00015E C5               [11]  486 	push	bc
      00015F CDr00r00         [17]  487 	call	_WRTVRM
      000162 F1               [10]  488 	pop	af
      000163 33               [ 6]  489 	inc	sp
      000164 D1               [10]  490 	pop	de
      000165 E1               [10]  491 	pop	hl
                                    492 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  493 	ld	h, #0x00
      000168 19               [11]  494 	add	hl, de
      000169 7E               [ 7]  495 	ld	a, (hl)
      00016A F5               [11]  496 	push	af
      00016B 33               [ 6]  497 	inc	sp
      00016C 21 03 1B         [10]  498 	ld	hl, #0x1b03
      00016F E5               [11]  499 	push	hl
      000170 CDr00r00         [17]  500 	call	_WRTVRM
                                    501 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  502 	ld	sp,ix
      000175 DD E1            [14]  503 	pop	ix
      000177 C9               [10]  504 	ret
      000178                        505 _FONT:
      000178 00                     506 	.db #0x00	; 0
      000179 00                     507 	.db #0x00	; 0
      00017A 00                     508 	.db #0x00	; 0
      00017B 00                     509 	.db #0x00	; 0
      00017C 00                     510 	.db #0x00	; 0
      00017D 00                     511 	.db #0x00	; 0
      00017E 00                     512 	.db #0x00	; 0
      00017F 00                     513 	.db #0x00	; 0
      000180 30                     514 	.db #0x30	; 48	'0'
      000181 78                     515 	.db #0x78	; 120	'x'
      000182 78                     516 	.db #0x78	; 120	'x'
      000183 30                     517 	.db #0x30	; 48	'0'
      000184 30                     518 	.db #0x30	; 48	'0'
      000185 00                     519 	.db #0x00	; 0
      000186 30                     520 	.db #0x30	; 48	'0'
      000187 00                     521 	.db #0x00	; 0
      000188 6C                     522 	.db #0x6c	; 108	'l'
      000189 6C                     523 	.db #0x6c	; 108	'l'
      00018A 6C                     524 	.db #0x6c	; 108	'l'
      00018B 00                     525 	.db #0x00	; 0
      00018C 00                     526 	.db #0x00	; 0
      00018D 00                     527 	.db #0x00	; 0
      00018E 00                     528 	.db #0x00	; 0
      00018F 00                     529 	.db #0x00	; 0
      000190 6C                     530 	.db #0x6c	; 108	'l'
      000191 6C                     531 	.db #0x6c	; 108	'l'
      000192 FE                     532 	.db #0xfe	; 254
      000193 6C                     533 	.db #0x6c	; 108	'l'
      000194 FE                     534 	.db #0xfe	; 254
      000195 6C                     535 	.db #0x6c	; 108	'l'
      000196 6C                     536 	.db #0x6c	; 108	'l'
      000197 00                     537 	.db #0x00	; 0
      000198 30                     538 	.db #0x30	; 48	'0'
      000199 7C                     539 	.db #0x7c	; 124
      00019A C0                     540 	.db #0xc0	; 192
      00019B 78                     541 	.db #0x78	; 120	'x'
      00019C 0C                     542 	.db #0x0c	; 12
      00019D F8                     543 	.db #0xf8	; 248
      00019E 30                     544 	.db #0x30	; 48	'0'
      00019F 00                     545 	.db #0x00	; 0
      0001A0 00                     546 	.db #0x00	; 0
      0001A1 C6                     547 	.db #0xc6	; 198
      0001A2 CC                     548 	.db #0xcc	; 204
      0001A3 18                     549 	.db #0x18	; 24
      0001A4 30                     550 	.db #0x30	; 48	'0'
      0001A5 66                     551 	.db #0x66	; 102	'f'
      0001A6 C6                     552 	.db #0xc6	; 198
      0001A7 00                     553 	.db #0x00	; 0
      0001A8 38                     554 	.db #0x38	; 56	'8'
      0001A9 6C                     555 	.db #0x6c	; 108	'l'
      0001AA 38                     556 	.db #0x38	; 56	'8'
      0001AB 76                     557 	.db #0x76	; 118	'v'
      0001AC DC                     558 	.db #0xdc	; 220
      0001AD CC                     559 	.db #0xcc	; 204
      0001AE 76                     560 	.db #0x76	; 118	'v'
      0001AF 00                     561 	.db #0x00	; 0
      0001B0 60                     562 	.db #0x60	; 96
      0001B1 60                     563 	.db #0x60	; 96
      0001B2 C0                     564 	.db #0xc0	; 192
      0001B3 00                     565 	.db #0x00	; 0
      0001B4 00                     566 	.db #0x00	; 0
      0001B5 00                     567 	.db #0x00	; 0
      0001B6 00                     568 	.db #0x00	; 0
      0001B7 00                     569 	.db #0x00	; 0
      0001B8 18                     570 	.db #0x18	; 24
      0001B9 30                     571 	.db #0x30	; 48	'0'
      0001BA 60                     572 	.db #0x60	; 96
      0001BB 60                     573 	.db #0x60	; 96
      0001BC 60                     574 	.db #0x60	; 96
      0001BD 30                     575 	.db #0x30	; 48	'0'
      0001BE 18                     576 	.db #0x18	; 24
      0001BF 00                     577 	.db #0x00	; 0
      0001C0 60                     578 	.db #0x60	; 96
      0001C1 30                     579 	.db #0x30	; 48	'0'
      0001C2 18                     580 	.db #0x18	; 24
      0001C3 18                     581 	.db #0x18	; 24
      0001C4 18                     582 	.db #0x18	; 24
      0001C5 30                     583 	.db #0x30	; 48	'0'
      0001C6 60                     584 	.db #0x60	; 96
      0001C7 00                     585 	.db #0x00	; 0
      0001C8 00                     586 	.db #0x00	; 0
      0001C9 66                     587 	.db #0x66	; 102	'f'
      0001CA 3C                     588 	.db #0x3c	; 60
      0001CB FF                     589 	.db #0xff	; 255
      0001CC 3C                     590 	.db #0x3c	; 60
      0001CD 66                     591 	.db #0x66	; 102	'f'
      0001CE 00                     592 	.db #0x00	; 0
      0001CF 00                     593 	.db #0x00	; 0
      0001D0 00                     594 	.db #0x00	; 0
      0001D1 30                     595 	.db #0x30	; 48	'0'
      0001D2 30                     596 	.db #0x30	; 48	'0'
      0001D3 FC                     597 	.db #0xfc	; 252
      0001D4 30                     598 	.db #0x30	; 48	'0'
      0001D5 30                     599 	.db #0x30	; 48	'0'
      0001D6 00                     600 	.db #0x00	; 0
      0001D7 00                     601 	.db #0x00	; 0
      0001D8 00                     602 	.db #0x00	; 0
      0001D9 00                     603 	.db #0x00	; 0
      0001DA 00                     604 	.db #0x00	; 0
      0001DB 00                     605 	.db #0x00	; 0
      0001DC 00                     606 	.db #0x00	; 0
      0001DD 30                     607 	.db #0x30	; 48	'0'
      0001DE 30                     608 	.db #0x30	; 48	'0'
      0001DF 60                     609 	.db #0x60	; 96
      0001E0 00                     610 	.db #0x00	; 0
      0001E1 00                     611 	.db #0x00	; 0
      0001E2 00                     612 	.db #0x00	; 0
      0001E3 FC                     613 	.db #0xfc	; 252
      0001E4 00                     614 	.db #0x00	; 0
      0001E5 00                     615 	.db #0x00	; 0
      0001E6 00                     616 	.db #0x00	; 0
      0001E7 00                     617 	.db #0x00	; 0
      0001E8 00                     618 	.db #0x00	; 0
      0001E9 00                     619 	.db #0x00	; 0
      0001EA 00                     620 	.db #0x00	; 0
      0001EB 00                     621 	.db #0x00	; 0
      0001EC 00                     622 	.db #0x00	; 0
      0001ED 30                     623 	.db #0x30	; 48	'0'
      0001EE 30                     624 	.db #0x30	; 48	'0'
      0001EF 00                     625 	.db #0x00	; 0
      0001F0 06                     626 	.db #0x06	; 6
      0001F1 0C                     627 	.db #0x0c	; 12
      0001F2 18                     628 	.db #0x18	; 24
      0001F3 30                     629 	.db #0x30	; 48	'0'
      0001F4 60                     630 	.db #0x60	; 96
      0001F5 C0                     631 	.db #0xc0	; 192
      0001F6 80                     632 	.db #0x80	; 128
      0001F7 00                     633 	.db #0x00	; 0
      0001F8 7C                     634 	.db #0x7c	; 124
      0001F9 C6                     635 	.db #0xc6	; 198
      0001FA CE                     636 	.db #0xce	; 206
      0001FB DE                     637 	.db #0xde	; 222
      0001FC F6                     638 	.db #0xf6	; 246
      0001FD E6                     639 	.db #0xe6	; 230
      0001FE 7C                     640 	.db #0x7c	; 124
      0001FF 00                     641 	.db #0x00	; 0
      000200 30                     642 	.db #0x30	; 48	'0'
      000201 70                     643 	.db #0x70	; 112	'p'
      000202 30                     644 	.db #0x30	; 48	'0'
      000203 30                     645 	.db #0x30	; 48	'0'
      000204 30                     646 	.db #0x30	; 48	'0'
      000205 30                     647 	.db #0x30	; 48	'0'
      000206 FC                     648 	.db #0xfc	; 252
      000207 00                     649 	.db #0x00	; 0
      000208 78                     650 	.db #0x78	; 120	'x'
      000209 CC                     651 	.db #0xcc	; 204
      00020A 0C                     652 	.db #0x0c	; 12
      00020B 38                     653 	.db #0x38	; 56	'8'
      00020C 60                     654 	.db #0x60	; 96
      00020D C4                     655 	.db #0xc4	; 196
      00020E FC                     656 	.db #0xfc	; 252
      00020F 00                     657 	.db #0x00	; 0
      000210 78                     658 	.db #0x78	; 120	'x'
      000211 CC                     659 	.db #0xcc	; 204
      000212 0C                     660 	.db #0x0c	; 12
      000213 38                     661 	.db #0x38	; 56	'8'
      000214 0C                     662 	.db #0x0c	; 12
      000215 CC                     663 	.db #0xcc	; 204
      000216 78                     664 	.db #0x78	; 120	'x'
      000217 00                     665 	.db #0x00	; 0
      000218 1C                     666 	.db #0x1c	; 28
      000219 3C                     667 	.db #0x3c	; 60
      00021A 6C                     668 	.db #0x6c	; 108	'l'
      00021B CC                     669 	.db #0xcc	; 204
      00021C FE                     670 	.db #0xfe	; 254
      00021D 0C                     671 	.db #0x0c	; 12
      00021E 1E                     672 	.db #0x1e	; 30
      00021F 00                     673 	.db #0x00	; 0
      000220 FC                     674 	.db #0xfc	; 252
      000221 C0                     675 	.db #0xc0	; 192
      000222 F8                     676 	.db #0xf8	; 248
      000223 0C                     677 	.db #0x0c	; 12
      000224 0C                     678 	.db #0x0c	; 12
      000225 CC                     679 	.db #0xcc	; 204
      000226 78                     680 	.db #0x78	; 120	'x'
      000227 00                     681 	.db #0x00	; 0
      000228 38                     682 	.db #0x38	; 56	'8'
      000229 60                     683 	.db #0x60	; 96
      00022A C0                     684 	.db #0xc0	; 192
      00022B F8                     685 	.db #0xf8	; 248
      00022C CC                     686 	.db #0xcc	; 204
      00022D CC                     687 	.db #0xcc	; 204
      00022E 78                     688 	.db #0x78	; 120	'x'
      00022F 00                     689 	.db #0x00	; 0
      000230 FC                     690 	.db #0xfc	; 252
      000231 CC                     691 	.db #0xcc	; 204
      000232 0C                     692 	.db #0x0c	; 12
      000233 18                     693 	.db #0x18	; 24
      000234 30                     694 	.db #0x30	; 48	'0'
      000235 30                     695 	.db #0x30	; 48	'0'
      000236 30                     696 	.db #0x30	; 48	'0'
      000237 00                     697 	.db #0x00	; 0
      000238 78                     698 	.db #0x78	; 120	'x'
      000239 CC                     699 	.db #0xcc	; 204
      00023A CC                     700 	.db #0xcc	; 204
      00023B 78                     701 	.db #0x78	; 120	'x'
      00023C CC                     702 	.db #0xcc	; 204
      00023D CC                     703 	.db #0xcc	; 204
      00023E 78                     704 	.db #0x78	; 120	'x'
      00023F 00                     705 	.db #0x00	; 0
      000240 78                     706 	.db #0x78	; 120	'x'
      000241 CC                     707 	.db #0xcc	; 204
      000242 CC                     708 	.db #0xcc	; 204
      000243 7C                     709 	.db #0x7c	; 124
      000244 0C                     710 	.db #0x0c	; 12
      000245 18                     711 	.db #0x18	; 24
      000246 70                     712 	.db #0x70	; 112	'p'
      000247 00                     713 	.db #0x00	; 0
      000248 00                     714 	.db #0x00	; 0
      000249 30                     715 	.db #0x30	; 48	'0'
      00024A 30                     716 	.db #0x30	; 48	'0'
      00024B 00                     717 	.db #0x00	; 0
      00024C 00                     718 	.db #0x00	; 0
      00024D 30                     719 	.db #0x30	; 48	'0'
      00024E 30                     720 	.db #0x30	; 48	'0'
      00024F 00                     721 	.db #0x00	; 0
      000250 00                     722 	.db #0x00	; 0
      000251 30                     723 	.db #0x30	; 48	'0'
      000252 30                     724 	.db #0x30	; 48	'0'
      000253 00                     725 	.db #0x00	; 0
      000254 30                     726 	.db #0x30	; 48	'0'
      000255 30                     727 	.db #0x30	; 48	'0'
      000256 60                     728 	.db #0x60	; 96
      000257 00                     729 	.db #0x00	; 0
      000258 18                     730 	.db #0x18	; 24
      000259 30                     731 	.db #0x30	; 48	'0'
      00025A 60                     732 	.db #0x60	; 96
      00025B C0                     733 	.db #0xc0	; 192
      00025C 60                     734 	.db #0x60	; 96
      00025D 30                     735 	.db #0x30	; 48	'0'
      00025E 18                     736 	.db #0x18	; 24
      00025F 00                     737 	.db #0x00	; 0
      000260 00                     738 	.db #0x00	; 0
      000261 00                     739 	.db #0x00	; 0
      000262 FC                     740 	.db #0xfc	; 252
      000263 00                     741 	.db #0x00	; 0
      000264 00                     742 	.db #0x00	; 0
      000265 FC                     743 	.db #0xfc	; 252
      000266 00                     744 	.db #0x00	; 0
      000267 00                     745 	.db #0x00	; 0
      000268 60                     746 	.db #0x60	; 96
      000269 30                     747 	.db #0x30	; 48	'0'
      00026A 18                     748 	.db #0x18	; 24
      00026B 0C                     749 	.db #0x0c	; 12
      00026C 18                     750 	.db #0x18	; 24
      00026D 30                     751 	.db #0x30	; 48	'0'
      00026E 60                     752 	.db #0x60	; 96
      00026F 00                     753 	.db #0x00	; 0
      000270 78                     754 	.db #0x78	; 120	'x'
      000271 CC                     755 	.db #0xcc	; 204
      000272 0C                     756 	.db #0x0c	; 12
      000273 18                     757 	.db #0x18	; 24
      000274 30                     758 	.db #0x30	; 48	'0'
      000275 00                     759 	.db #0x00	; 0
      000276 30                     760 	.db #0x30	; 48	'0'
      000277 00                     761 	.db #0x00	; 0
      000278 7C                     762 	.db #0x7c	; 124
      000279 C6                     763 	.db #0xc6	; 198
      00027A DE                     764 	.db #0xde	; 222
      00027B DE                     765 	.db #0xde	; 222
      00027C DE                     766 	.db #0xde	; 222
      00027D C0                     767 	.db #0xc0	; 192
      00027E 78                     768 	.db #0x78	; 120	'x'
      00027F 00                     769 	.db #0x00	; 0
      000280 30                     770 	.db #0x30	; 48	'0'
      000281 78                     771 	.db #0x78	; 120	'x'
      000282 CC                     772 	.db #0xcc	; 204
      000283 CC                     773 	.db #0xcc	; 204
      000284 FC                     774 	.db #0xfc	; 252
      000285 CC                     775 	.db #0xcc	; 204
      000286 CC                     776 	.db #0xcc	; 204
      000287 00                     777 	.db #0x00	; 0
      000288 FC                     778 	.db #0xfc	; 252
      000289 66                     779 	.db #0x66	; 102	'f'
      00028A 66                     780 	.db #0x66	; 102	'f'
      00028B 7C                     781 	.db #0x7c	; 124
      00028C 66                     782 	.db #0x66	; 102	'f'
      00028D 66                     783 	.db #0x66	; 102	'f'
      00028E FC                     784 	.db #0xfc	; 252
      00028F 00                     785 	.db #0x00	; 0
      000290 3C                     786 	.db #0x3c	; 60
      000291 66                     787 	.db #0x66	; 102	'f'
      000292 C0                     788 	.db #0xc0	; 192
      000293 C0                     789 	.db #0xc0	; 192
      000294 C0                     790 	.db #0xc0	; 192
      000295 66                     791 	.db #0x66	; 102	'f'
      000296 3C                     792 	.db #0x3c	; 60
      000297 00                     793 	.db #0x00	; 0
      000298 F8                     794 	.db #0xf8	; 248
      000299 6C                     795 	.db #0x6c	; 108	'l'
      00029A 66                     796 	.db #0x66	; 102	'f'
      00029B 66                     797 	.db #0x66	; 102	'f'
      00029C 66                     798 	.db #0x66	; 102	'f'
      00029D 6C                     799 	.db #0x6c	; 108	'l'
      00029E F8                     800 	.db #0xf8	; 248
      00029F 00                     801 	.db #0x00	; 0
      0002A0 FE                     802 	.db #0xfe	; 254
      0002A1 62                     803 	.db #0x62	; 98	'b'
      0002A2 68                     804 	.db #0x68	; 104	'h'
      0002A3 78                     805 	.db #0x78	; 120	'x'
      0002A4 68                     806 	.db #0x68	; 104	'h'
      0002A5 62                     807 	.db #0x62	; 98	'b'
      0002A6 FE                     808 	.db #0xfe	; 254
      0002A7 00                     809 	.db #0x00	; 0
      0002A8 FE                     810 	.db #0xfe	; 254
      0002A9 62                     811 	.db #0x62	; 98	'b'
      0002AA 68                     812 	.db #0x68	; 104	'h'
      0002AB 78                     813 	.db #0x78	; 120	'x'
      0002AC 68                     814 	.db #0x68	; 104	'h'
      0002AD 60                     815 	.db #0x60	; 96
      0002AE F0                     816 	.db #0xf0	; 240
      0002AF 00                     817 	.db #0x00	; 0
      0002B0 3C                     818 	.db #0x3c	; 60
      0002B1 66                     819 	.db #0x66	; 102	'f'
      0002B2 C0                     820 	.db #0xc0	; 192
      0002B3 C0                     821 	.db #0xc0	; 192
      0002B4 CE                     822 	.db #0xce	; 206
      0002B5 66                     823 	.db #0x66	; 102	'f'
      0002B6 3E                     824 	.db #0x3e	; 62
      0002B7 00                     825 	.db #0x00	; 0
      0002B8 CC                     826 	.db #0xcc	; 204
      0002B9 CC                     827 	.db #0xcc	; 204
      0002BA CC                     828 	.db #0xcc	; 204
      0002BB FC                     829 	.db #0xfc	; 252
      0002BC CC                     830 	.db #0xcc	; 204
      0002BD CC                     831 	.db #0xcc	; 204
      0002BE CC                     832 	.db #0xcc	; 204
      0002BF 00                     833 	.db #0x00	; 0
      0002C0 78                     834 	.db #0x78	; 120	'x'
      0002C1 30                     835 	.db #0x30	; 48	'0'
      0002C2 30                     836 	.db #0x30	; 48	'0'
      0002C3 30                     837 	.db #0x30	; 48	'0'
      0002C4 30                     838 	.db #0x30	; 48	'0'
      0002C5 30                     839 	.db #0x30	; 48	'0'
      0002C6 78                     840 	.db #0x78	; 120	'x'
      0002C7 00                     841 	.db #0x00	; 0
      0002C8 1E                     842 	.db #0x1e	; 30
      0002C9 0C                     843 	.db #0x0c	; 12
      0002CA 0C                     844 	.db #0x0c	; 12
      0002CB 0C                     845 	.db #0x0c	; 12
      0002CC CC                     846 	.db #0xcc	; 204
      0002CD CC                     847 	.db #0xcc	; 204
      0002CE 78                     848 	.db #0x78	; 120	'x'
      0002CF 00                     849 	.db #0x00	; 0
      0002D0 E6                     850 	.db #0xe6	; 230
      0002D1 66                     851 	.db #0x66	; 102	'f'
      0002D2 6C                     852 	.db #0x6c	; 108	'l'
      0002D3 78                     853 	.db #0x78	; 120	'x'
      0002D4 6C                     854 	.db #0x6c	; 108	'l'
      0002D5 66                     855 	.db #0x66	; 102	'f'
      0002D6 E6                     856 	.db #0xe6	; 230
      0002D7 00                     857 	.db #0x00	; 0
      0002D8 F0                     858 	.db #0xf0	; 240
      0002D9 60                     859 	.db #0x60	; 96
      0002DA 60                     860 	.db #0x60	; 96
      0002DB 60                     861 	.db #0x60	; 96
      0002DC 62                     862 	.db #0x62	; 98	'b'
      0002DD 66                     863 	.db #0x66	; 102	'f'
      0002DE FE                     864 	.db #0xfe	; 254
      0002DF 00                     865 	.db #0x00	; 0
      0002E0 C6                     866 	.db #0xc6	; 198
      0002E1 EE                     867 	.db #0xee	; 238
      0002E2 FE                     868 	.db #0xfe	; 254
      0002E3 FE                     869 	.db #0xfe	; 254
      0002E4 D6                     870 	.db #0xd6	; 214
      0002E5 C6                     871 	.db #0xc6	; 198
      0002E6 C6                     872 	.db #0xc6	; 198
      0002E7 00                     873 	.db #0x00	; 0
      0002E8 C6                     874 	.db #0xc6	; 198
      0002E9 E6                     875 	.db #0xe6	; 230
      0002EA F6                     876 	.db #0xf6	; 246
      0002EB DE                     877 	.db #0xde	; 222
      0002EC CE                     878 	.db #0xce	; 206
      0002ED C6                     879 	.db #0xc6	; 198
      0002EE C6                     880 	.db #0xc6	; 198
      0002EF 00                     881 	.db #0x00	; 0
      0002F0 38                     882 	.db #0x38	; 56	'8'
      0002F1 6C                     883 	.db #0x6c	; 108	'l'
      0002F2 C6                     884 	.db #0xc6	; 198
      0002F3 C6                     885 	.db #0xc6	; 198
      0002F4 C6                     886 	.db #0xc6	; 198
      0002F5 6C                     887 	.db #0x6c	; 108	'l'
      0002F6 38                     888 	.db #0x38	; 56	'8'
      0002F7 00                     889 	.db #0x00	; 0
      0002F8 FC                     890 	.db #0xfc	; 252
      0002F9 66                     891 	.db #0x66	; 102	'f'
      0002FA 66                     892 	.db #0x66	; 102	'f'
      0002FB 7C                     893 	.db #0x7c	; 124
      0002FC 60                     894 	.db #0x60	; 96
      0002FD 60                     895 	.db #0x60	; 96
      0002FE F0                     896 	.db #0xf0	; 240
      0002FF 00                     897 	.db #0x00	; 0
      000300 78                     898 	.db #0x78	; 120	'x'
      000301 CC                     899 	.db #0xcc	; 204
      000302 CC                     900 	.db #0xcc	; 204
      000303 CC                     901 	.db #0xcc	; 204
      000304 DC                     902 	.db #0xdc	; 220
      000305 78                     903 	.db #0x78	; 120	'x'
      000306 1C                     904 	.db #0x1c	; 28
      000307 00                     905 	.db #0x00	; 0
      000308 FC                     906 	.db #0xfc	; 252
      000309 66                     907 	.db #0x66	; 102	'f'
      00030A 66                     908 	.db #0x66	; 102	'f'
      00030B 7C                     909 	.db #0x7c	; 124
      00030C 6C                     910 	.db #0x6c	; 108	'l'
      00030D 66                     911 	.db #0x66	; 102	'f'
      00030E E6                     912 	.db #0xe6	; 230
      00030F 00                     913 	.db #0x00	; 0
      000310 78                     914 	.db #0x78	; 120	'x'
      000311 CC                     915 	.db #0xcc	; 204
      000312 E0                     916 	.db #0xe0	; 224
      000313 70                     917 	.db #0x70	; 112	'p'
      000314 1C                     918 	.db #0x1c	; 28
      000315 CC                     919 	.db #0xcc	; 204
      000316 78                     920 	.db #0x78	; 120	'x'
      000317 00                     921 	.db #0x00	; 0
      000318 FC                     922 	.db #0xfc	; 252
      000319 B4                     923 	.db #0xb4	; 180
      00031A 30                     924 	.db #0x30	; 48	'0'
      00031B 30                     925 	.db #0x30	; 48	'0'
      00031C 30                     926 	.db #0x30	; 48	'0'
      00031D 30                     927 	.db #0x30	; 48	'0'
      00031E 78                     928 	.db #0x78	; 120	'x'
      00031F 00                     929 	.db #0x00	; 0
      000320 CC                     930 	.db #0xcc	; 204
      000321 CC                     931 	.db #0xcc	; 204
      000322 CC                     932 	.db #0xcc	; 204
      000323 CC                     933 	.db #0xcc	; 204
      000324 CC                     934 	.db #0xcc	; 204
      000325 CC                     935 	.db #0xcc	; 204
      000326 FC                     936 	.db #0xfc	; 252
      000327 00                     937 	.db #0x00	; 0
      000328 CC                     938 	.db #0xcc	; 204
      000329 CC                     939 	.db #0xcc	; 204
      00032A CC                     940 	.db #0xcc	; 204
      00032B CC                     941 	.db #0xcc	; 204
      00032C CC                     942 	.db #0xcc	; 204
      00032D 78                     943 	.db #0x78	; 120	'x'
      00032E 30                     944 	.db #0x30	; 48	'0'
      00032F 00                     945 	.db #0x00	; 0
      000330 C6                     946 	.db #0xc6	; 198
      000331 C6                     947 	.db #0xc6	; 198
      000332 C6                     948 	.db #0xc6	; 198
      000333 D6                     949 	.db #0xd6	; 214
      000334 FE                     950 	.db #0xfe	; 254
      000335 EE                     951 	.db #0xee	; 238
      000336 C6                     952 	.db #0xc6	; 198
      000337 00                     953 	.db #0x00	; 0
      000338 C6                     954 	.db #0xc6	; 198
      000339 C6                     955 	.db #0xc6	; 198
      00033A 6C                     956 	.db #0x6c	; 108	'l'
      00033B 38                     957 	.db #0x38	; 56	'8'
      00033C 38                     958 	.db #0x38	; 56	'8'
      00033D 6C                     959 	.db #0x6c	; 108	'l'
      00033E C6                     960 	.db #0xc6	; 198
      00033F 00                     961 	.db #0x00	; 0
      000340 CC                     962 	.db #0xcc	; 204
      000341 CC                     963 	.db #0xcc	; 204
      000342 CC                     964 	.db #0xcc	; 204
      000343 78                     965 	.db #0x78	; 120	'x'
      000344 30                     966 	.db #0x30	; 48	'0'
      000345 30                     967 	.db #0x30	; 48	'0'
      000346 78                     968 	.db #0x78	; 120	'x'
      000347 00                     969 	.db #0x00	; 0
      000348 FE                     970 	.db #0xfe	; 254
      000349 C6                     971 	.db #0xc6	; 198
      00034A 8C                     972 	.db #0x8c	; 140
      00034B 18                     973 	.db #0x18	; 24
      00034C 32                     974 	.db #0x32	; 50	'2'
      00034D 66                     975 	.db #0x66	; 102	'f'
      00034E FE                     976 	.db #0xfe	; 254
      00034F 00                     977 	.db #0x00	; 0
      000350 78                     978 	.db #0x78	; 120	'x'
      000351 60                     979 	.db #0x60	; 96
      000352 60                     980 	.db #0x60	; 96
      000353 60                     981 	.db #0x60	; 96
      000354 60                     982 	.db #0x60	; 96
      000355 60                     983 	.db #0x60	; 96
      000356 78                     984 	.db #0x78	; 120	'x'
      000357 00                     985 	.db #0x00	; 0
      000358 C0                     986 	.db #0xc0	; 192
      000359 60                     987 	.db #0x60	; 96
      00035A 30                     988 	.db #0x30	; 48	'0'
      00035B 18                     989 	.db #0x18	; 24
      00035C 0C                     990 	.db #0x0c	; 12
      00035D 06                     991 	.db #0x06	; 6
      00035E 02                     992 	.db #0x02	; 2
      00035F 00                     993 	.db #0x00	; 0
      000360 78                     994 	.db #0x78	; 120	'x'
      000361 18                     995 	.db #0x18	; 24
      000362 18                     996 	.db #0x18	; 24
      000363 18                     997 	.db #0x18	; 24
      000364 18                     998 	.db #0x18	; 24
      000365 18                     999 	.db #0x18	; 24
      000366 78                    1000 	.db #0x78	; 120	'x'
      000367 00                    1001 	.db #0x00	; 0
      000368 10                    1002 	.db #0x10	; 16
      000369 38                    1003 	.db #0x38	; 56	'8'
      00036A 6C                    1004 	.db #0x6c	; 108	'l'
      00036B C6                    1005 	.db #0xc6	; 198
      00036C 00                    1006 	.db #0x00	; 0
      00036D 00                    1007 	.db #0x00	; 0
      00036E 00                    1008 	.db #0x00	; 0
      00036F 00                    1009 	.db #0x00	; 0
      000370 00                    1010 	.db #0x00	; 0
      000371 00                    1011 	.db #0x00	; 0
      000372 00                    1012 	.db #0x00	; 0
      000373 00                    1013 	.db #0x00	; 0
      000374 00                    1014 	.db #0x00	; 0
      000375 00                    1015 	.db #0x00	; 0
      000376 00                    1016 	.db #0x00	; 0
      000377 FF                    1017 	.db #0xff	; 255
      000378 30                    1018 	.db #0x30	; 48	'0'
      000379 30                    1019 	.db #0x30	; 48	'0'
      00037A 18                    1020 	.db #0x18	; 24
      00037B 00                    1021 	.db #0x00	; 0
      00037C 00                    1022 	.db #0x00	; 0
      00037D 00                    1023 	.db #0x00	; 0
      00037E 00                    1024 	.db #0x00	; 0
      00037F 00                    1025 	.db #0x00	; 0
      000380 00                    1026 	.db #0x00	; 0
      000381 00                    1027 	.db #0x00	; 0
      000382 78                    1028 	.db #0x78	; 120	'x'
      000383 0C                    1029 	.db #0x0c	; 12
      000384 7C                    1030 	.db #0x7c	; 124
      000385 CC                    1031 	.db #0xcc	; 204
      000386 76                    1032 	.db #0x76	; 118	'v'
      000387 00                    1033 	.db #0x00	; 0
      000388 E0                    1034 	.db #0xe0	; 224
      000389 60                    1035 	.db #0x60	; 96
      00038A 60                    1036 	.db #0x60	; 96
      00038B 7C                    1037 	.db #0x7c	; 124
      00038C 66                    1038 	.db #0x66	; 102	'f'
      00038D 66                    1039 	.db #0x66	; 102	'f'
      00038E DC                    1040 	.db #0xdc	; 220
      00038F 00                    1041 	.db #0x00	; 0
      000390 00                    1042 	.db #0x00	; 0
      000391 00                    1043 	.db #0x00	; 0
      000392 78                    1044 	.db #0x78	; 120	'x'
      000393 CC                    1045 	.db #0xcc	; 204
      000394 C0                    1046 	.db #0xc0	; 192
      000395 CC                    1047 	.db #0xcc	; 204
      000396 78                    1048 	.db #0x78	; 120	'x'
      000397 00                    1049 	.db #0x00	; 0
      000398 1C                    1050 	.db #0x1c	; 28
      000399 0C                    1051 	.db #0x0c	; 12
      00039A 0C                    1052 	.db #0x0c	; 12
      00039B 7C                    1053 	.db #0x7c	; 124
      00039C CC                    1054 	.db #0xcc	; 204
      00039D CC                    1055 	.db #0xcc	; 204
      00039E 76                    1056 	.db #0x76	; 118	'v'
      00039F 00                    1057 	.db #0x00	; 0
      0003A0 00                    1058 	.db #0x00	; 0
      0003A1 00                    1059 	.db #0x00	; 0
      0003A2 78                    1060 	.db #0x78	; 120	'x'
      0003A3 CC                    1061 	.db #0xcc	; 204
      0003A4 FC                    1062 	.db #0xfc	; 252
      0003A5 C0                    1063 	.db #0xc0	; 192
      0003A6 78                    1064 	.db #0x78	; 120	'x'
      0003A7 00                    1065 	.db #0x00	; 0
      0003A8 38                    1066 	.db #0x38	; 56	'8'
      0003A9 6C                    1067 	.db #0x6c	; 108	'l'
      0003AA 60                    1068 	.db #0x60	; 96
      0003AB F0                    1069 	.db #0xf0	; 240
      0003AC 60                    1070 	.db #0x60	; 96
      0003AD 60                    1071 	.db #0x60	; 96
      0003AE F0                    1072 	.db #0xf0	; 240
      0003AF 00                    1073 	.db #0x00	; 0
      0003B0 00                    1074 	.db #0x00	; 0
      0003B1 00                    1075 	.db #0x00	; 0
      0003B2 76                    1076 	.db #0x76	; 118	'v'
      0003B3 CC                    1077 	.db #0xcc	; 204
      0003B4 CC                    1078 	.db #0xcc	; 204
      0003B5 7C                    1079 	.db #0x7c	; 124
      0003B6 0C                    1080 	.db #0x0c	; 12
      0003B7 F8                    1081 	.db #0xf8	; 248
      0003B8 E0                    1082 	.db #0xe0	; 224
      0003B9 60                    1083 	.db #0x60	; 96
      0003BA 6C                    1084 	.db #0x6c	; 108	'l'
      0003BB 76                    1085 	.db #0x76	; 118	'v'
      0003BC 66                    1086 	.db #0x66	; 102	'f'
      0003BD 66                    1087 	.db #0x66	; 102	'f'
      0003BE E6                    1088 	.db #0xe6	; 230
      0003BF 00                    1089 	.db #0x00	; 0
      0003C0 30                    1090 	.db #0x30	; 48	'0'
      0003C1 00                    1091 	.db #0x00	; 0
      0003C2 70                    1092 	.db #0x70	; 112	'p'
      0003C3 30                    1093 	.db #0x30	; 48	'0'
      0003C4 30                    1094 	.db #0x30	; 48	'0'
      0003C5 30                    1095 	.db #0x30	; 48	'0'
      0003C6 78                    1096 	.db #0x78	; 120	'x'
      0003C7 00                    1097 	.db #0x00	; 0
      0003C8 0C                    1098 	.db #0x0c	; 12
      0003C9 00                    1099 	.db #0x00	; 0
      0003CA 0C                    1100 	.db #0x0c	; 12
      0003CB 0C                    1101 	.db #0x0c	; 12
      0003CC 0C                    1102 	.db #0x0c	; 12
      0003CD CC                    1103 	.db #0xcc	; 204
      0003CE CC                    1104 	.db #0xcc	; 204
      0003CF 78                    1105 	.db #0x78	; 120	'x'
      0003D0 E0                    1106 	.db #0xe0	; 224
      0003D1 60                    1107 	.db #0x60	; 96
      0003D2 66                    1108 	.db #0x66	; 102	'f'
      0003D3 6C                    1109 	.db #0x6c	; 108	'l'
      0003D4 78                    1110 	.db #0x78	; 120	'x'
      0003D5 6C                    1111 	.db #0x6c	; 108	'l'
      0003D6 E6                    1112 	.db #0xe6	; 230
      0003D7 00                    1113 	.db #0x00	; 0
      0003D8 70                    1114 	.db #0x70	; 112	'p'
      0003D9 30                    1115 	.db #0x30	; 48	'0'
      0003DA 30                    1116 	.db #0x30	; 48	'0'
      0003DB 30                    1117 	.db #0x30	; 48	'0'
      0003DC 30                    1118 	.db #0x30	; 48	'0'
      0003DD 30                    1119 	.db #0x30	; 48	'0'
      0003DE 78                    1120 	.db #0x78	; 120	'x'
      0003DF 00                    1121 	.db #0x00	; 0
      0003E0 00                    1122 	.db #0x00	; 0
      0003E1 00                    1123 	.db #0x00	; 0
      0003E2 CC                    1124 	.db #0xcc	; 204
      0003E3 FE                    1125 	.db #0xfe	; 254
      0003E4 FE                    1126 	.db #0xfe	; 254
      0003E5 D6                    1127 	.db #0xd6	; 214
      0003E6 C6                    1128 	.db #0xc6	; 198
      0003E7 00                    1129 	.db #0x00	; 0
      0003E8 00                    1130 	.db #0x00	; 0
      0003E9 00                    1131 	.db #0x00	; 0
      0003EA F8                    1132 	.db #0xf8	; 248
      0003EB CC                    1133 	.db #0xcc	; 204
      0003EC CC                    1134 	.db #0xcc	; 204
      0003ED CC                    1135 	.db #0xcc	; 204
      0003EE CC                    1136 	.db #0xcc	; 204
      0003EF 00                    1137 	.db #0x00	; 0
      0003F0 00                    1138 	.db #0x00	; 0
      0003F1 00                    1139 	.db #0x00	; 0
      0003F2 78                    1140 	.db #0x78	; 120	'x'
      0003F3 CC                    1141 	.db #0xcc	; 204
      0003F4 CC                    1142 	.db #0xcc	; 204
      0003F5 CC                    1143 	.db #0xcc	; 204
      0003F6 78                    1144 	.db #0x78	; 120	'x'
      0003F7 00                    1145 	.db #0x00	; 0
      0003F8 00                    1146 	.db #0x00	; 0
      0003F9 00                    1147 	.db #0x00	; 0
      0003FA DC                    1148 	.db #0xdc	; 220
      0003FB 66                    1149 	.db #0x66	; 102	'f'
      0003FC 66                    1150 	.db #0x66	; 102	'f'
      0003FD 7C                    1151 	.db #0x7c	; 124
      0003FE 60                    1152 	.db #0x60	; 96
      0003FF F0                    1153 	.db #0xf0	; 240
      000400 00                    1154 	.db #0x00	; 0
      000401 00                    1155 	.db #0x00	; 0
      000402 76                    1156 	.db #0x76	; 118	'v'
      000403 CC                    1157 	.db #0xcc	; 204
      000404 CC                    1158 	.db #0xcc	; 204
      000405 7C                    1159 	.db #0x7c	; 124
      000406 0C                    1160 	.db #0x0c	; 12
      000407 1E                    1161 	.db #0x1e	; 30
      000408 00                    1162 	.db #0x00	; 0
      000409 00                    1163 	.db #0x00	; 0
      00040A DC                    1164 	.db #0xdc	; 220
      00040B 76                    1165 	.db #0x76	; 118	'v'
      00040C 66                    1166 	.db #0x66	; 102	'f'
      00040D 60                    1167 	.db #0x60	; 96
      00040E F0                    1168 	.db #0xf0	; 240
      00040F 00                    1169 	.db #0x00	; 0
      000410 00                    1170 	.db #0x00	; 0
      000411 00                    1171 	.db #0x00	; 0
      000412 7C                    1172 	.db #0x7c	; 124
      000413 C0                    1173 	.db #0xc0	; 192
      000414 78                    1174 	.db #0x78	; 120	'x'
      000415 0C                    1175 	.db #0x0c	; 12
      000416 F8                    1176 	.db #0xf8	; 248
      000417 00                    1177 	.db #0x00	; 0
      000418 10                    1178 	.db #0x10	; 16
      000419 30                    1179 	.db #0x30	; 48	'0'
      00041A 7C                    1180 	.db #0x7c	; 124
      00041B 30                    1181 	.db #0x30	; 48	'0'
      00041C 30                    1182 	.db #0x30	; 48	'0'
      00041D 34                    1183 	.db #0x34	; 52	'4'
      00041E 18                    1184 	.db #0x18	; 24
      00041F 00                    1185 	.db #0x00	; 0
      000420 00                    1186 	.db #0x00	; 0
      000421 00                    1187 	.db #0x00	; 0
      000422 CC                    1188 	.db #0xcc	; 204
      000423 CC                    1189 	.db #0xcc	; 204
      000424 CC                    1190 	.db #0xcc	; 204
      000425 CC                    1191 	.db #0xcc	; 204
      000426 76                    1192 	.db #0x76	; 118	'v'
      000427 00                    1193 	.db #0x00	; 0
      000428 00                    1194 	.db #0x00	; 0
      000429 00                    1195 	.db #0x00	; 0
      00042A CC                    1196 	.db #0xcc	; 204
      00042B CC                    1197 	.db #0xcc	; 204
      00042C CC                    1198 	.db #0xcc	; 204
      00042D 78                    1199 	.db #0x78	; 120	'x'
      00042E 30                    1200 	.db #0x30	; 48	'0'
      00042F 00                    1201 	.db #0x00	; 0
      000430 00                    1202 	.db #0x00	; 0
      000431 00                    1203 	.db #0x00	; 0
      000432 C6                    1204 	.db #0xc6	; 198
      000433 D6                    1205 	.db #0xd6	; 214
      000434 FE                    1206 	.db #0xfe	; 254
      000435 FE                    1207 	.db #0xfe	; 254
      000436 6C                    1208 	.db #0x6c	; 108	'l'
      000437 00                    1209 	.db #0x00	; 0
      000438 00                    1210 	.db #0x00	; 0
      000439 00                    1211 	.db #0x00	; 0
      00043A C6                    1212 	.db #0xc6	; 198
      00043B 6C                    1213 	.db #0x6c	; 108	'l'
      00043C 38                    1214 	.db #0x38	; 56	'8'
      00043D 6C                    1215 	.db #0x6c	; 108	'l'
      00043E C6                    1216 	.db #0xc6	; 198
      00043F 00                    1217 	.db #0x00	; 0
      000440 00                    1218 	.db #0x00	; 0
      000441 00                    1219 	.db #0x00	; 0
      000442 CC                    1220 	.db #0xcc	; 204
      000443 CC                    1221 	.db #0xcc	; 204
      000444 CC                    1222 	.db #0xcc	; 204
      000445 7C                    1223 	.db #0x7c	; 124
      000446 0C                    1224 	.db #0x0c	; 12
      000447 F8                    1225 	.db #0xf8	; 248
      000448 00                    1226 	.db #0x00	; 0
      000449 00                    1227 	.db #0x00	; 0
      00044A FC                    1228 	.db #0xfc	; 252
      00044B 98                    1229 	.db #0x98	; 152
      00044C 30                    1230 	.db #0x30	; 48	'0'
      00044D 64                    1231 	.db #0x64	; 100	'd'
      00044E FC                    1232 	.db #0xfc	; 252
      00044F 00                    1233 	.db #0x00	; 0
      000450 1C                    1234 	.db #0x1c	; 28
      000451 30                    1235 	.db #0x30	; 48	'0'
      000452 30                    1236 	.db #0x30	; 48	'0'
      000453 E0                    1237 	.db #0xe0	; 224
      000454 30                    1238 	.db #0x30	; 48	'0'
      000455 30                    1239 	.db #0x30	; 48	'0'
      000456 1C                    1240 	.db #0x1c	; 28
      000457 00                    1241 	.db #0x00	; 0
      000458 18                    1242 	.db #0x18	; 24
      000459 18                    1243 	.db #0x18	; 24
      00045A 18                    1244 	.db #0x18	; 24
      00045B 00                    1245 	.db #0x00	; 0
      00045C 18                    1246 	.db #0x18	; 24
      00045D 18                    1247 	.db #0x18	; 24
      00045E 18                    1248 	.db #0x18	; 24
      00045F 00                    1249 	.db #0x00	; 0
      000460 E0                    1250 	.db #0xe0	; 224
      000461 30                    1251 	.db #0x30	; 48	'0'
      000462 30                    1252 	.db #0x30	; 48	'0'
      000463 1C                    1253 	.db #0x1c	; 28
      000464 30                    1254 	.db #0x30	; 48	'0'
      000465 30                    1255 	.db #0x30	; 48	'0'
      000466 E0                    1256 	.db #0xe0	; 224
      000467 00                    1257 	.db #0x00	; 0
      000468 76                    1258 	.db #0x76	; 118	'v'
      000469 DC                    1259 	.db #0xdc	; 220
      00046A 00                    1260 	.db #0x00	; 0
      00046B 00                    1261 	.db #0x00	; 0
      00046C 00                    1262 	.db #0x00	; 0
      00046D 00                    1263 	.db #0x00	; 0
      00046E 00                    1264 	.db #0x00	; 0
      00046F 00                    1265 	.db #0x00	; 0
      000470 00                    1266 	.db #0x00	; 0
      000471 10                    1267 	.db #0x10	; 16
      000472 38                    1268 	.db #0x38	; 56	'8'
      000473 6C                    1269 	.db #0x6c	; 108	'l'
      000474 C6                    1270 	.db #0xc6	; 198
      000475 C6                    1271 	.db #0xc6	; 198
      000476 FE                    1272 	.db #0xfe	; 254
      000477 00                    1273 	.db #0x00	; 0
      000478                       1274 _pattern_black_0:
      000478 FF                    1275 	.db #0xff	; 255
      000479 FF                    1276 	.db #0xff	; 255
      00047A FF                    1277 	.db #0xff	; 255
      00047B FF                    1278 	.db #0xff	; 255
      00047C FF                    1279 	.db #0xff	; 255
      00047D FF                    1280 	.db #0xff	; 255
      00047E FF                    1281 	.db #0xff	; 255
      00047F FF                    1282 	.db #0xff	; 255
      000480                       1283 _pattern_black_1:
      000480 FE                    1284 	.db #0xfe	; 254
      000481 FF                    1285 	.db #0xff	; 255
      000482 FF                    1286 	.db #0xff	; 255
      000483 FF                    1287 	.db #0xff	; 255
      000484 FE                    1288 	.db #0xfe	; 254
      000485 FF                    1289 	.db #0xff	; 255
      000486 FF                    1290 	.db #0xff	; 255
      000487 FE                    1291 	.db #0xfe	; 254
      000488                       1292 _pattern_black_2:
      000488 FF                    1293 	.db #0xff	; 255
      000489 FF                    1294 	.db #0xff	; 255
      00048A FF                    1295 	.db #0xff	; 255
      00048B FF                    1296 	.db #0xff	; 255
      00048C FF                    1297 	.db #0xff	; 255
      00048D FB                    1298 	.db #0xfb	; 251
      00048E FF                    1299 	.db #0xff	; 255
      00048F BB                    1300 	.db #0xbb	; 187
      000490                       1301 _pattern_black_3:
      000490 FB                    1302 	.db #0xfb	; 251
      000491 FE                    1303 	.db #0xfe	; 254
      000492 FD                    1304 	.db #0xfd	; 253
      000493 FE                    1305 	.db #0xfe	; 254
      000494 F7                    1306 	.db #0xf7	; 247
      000495 FA                    1307 	.db #0xfa	; 250
      000496 AF                    1308 	.db #0xaf	; 175
      000497 55                    1309 	.db #0x55	; 85	'U'
      000498                       1310 _pattern_0:
      000498 9F                    1311 	.db #0x9f	; 159
      000499 90                    1312 	.db #0x90	; 144
      00049A 90                    1313 	.db #0x90	; 144
      00049B 93                    1314 	.db #0x93	; 147
      00049C 92                    1315 	.db #0x92	; 146
      00049D 92                    1316 	.db #0x92	; 146
      00049E 92                    1317 	.db #0x92	; 146
      00049F 92                    1318 	.db #0x92	; 146
      0004A0                       1319 _pattern_1:
      0004A0 FF                    1320 	.db #0xff	; 255
      0004A1 01                    1321 	.db #0x01	; 1
      0004A2 01                    1322 	.db #0x01	; 1
      0004A3 F9                    1323 	.db #0xf9	; 249
      0004A4 09                    1324 	.db #0x09	; 9
      0004A5 09                    1325 	.db #0x09	; 9
      0004A6 49                    1326 	.db #0x49	; 73	'I'
      0004A7 49                    1327 	.db #0x49	; 73	'I'
      0004A8                       1328 _pattern_2:
      0004A8 92                    1329 	.db #0x92	; 146
      0004A9 93                    1330 	.db #0x93	; 147
      0004AA 90                    1331 	.db #0x90	; 144
      0004AB 90                    1332 	.db #0x90	; 144
      0004AC 9F                    1333 	.db #0x9f	; 159
      0004AD 80                    1334 	.db #0x80	; 128
      0004AE 80                    1335 	.db #0x80	; 128
      0004AF FF                    1336 	.db #0xff	; 255
      0004B0                       1337 _pattern_3:
      0004B0 49                    1338 	.db #0x49	; 73	'I'
      0004B1 C9                    1339 	.db #0xc9	; 201
      0004B2 09                    1340 	.db #0x09	; 9
      0004B3 09                    1341 	.db #0x09	; 9
      0004B4 F9                    1342 	.db #0xf9	; 249
      0004B5 01                    1343 	.db #0x01	; 1
      0004B6 01                    1344 	.db #0x01	; 1
      0004B7 FF                    1345 	.db #0xff	; 255
      0004B8                       1346 _pattern_4:
      0004B8 7F                    1347 	.db #0x7f	; 127
      0004B9 81                    1348 	.db #0x81	; 129
      0004BA 83                    1349 	.db #0x83	; 131
      0004BB 87                    1350 	.db #0x87	; 135
      0004BC 8F                    1351 	.db #0x8f	; 143
      0004BD 9F                    1352 	.db #0x9f	; 159
      0004BE BF                    1353 	.db #0xbf	; 191
      0004BF FF                    1354 	.db #0xff	; 255
      0004C0                       1355 _pattern_5:
      0004C0 FE                    1356 	.db #0xfe	; 254
      0004C1 81                    1357 	.db #0x81	; 129
      0004C2 C1                    1358 	.db #0xc1	; 193
      0004C3 E1                    1359 	.db #0xe1	; 225
      0004C4 F1                    1360 	.db #0xf1	; 241
      0004C5 F9                    1361 	.db #0xf9	; 249
      0004C6 FD                    1362 	.db #0xfd	; 253
      0004C7 FF                    1363 	.db #0xff	; 255
      0004C8                       1364 _pattern_6:
      0004C8 FF                    1365 	.db #0xff	; 255
      0004C9 BF                    1366 	.db #0xbf	; 191
      0004CA 9F                    1367 	.db #0x9f	; 159
      0004CB 8F                    1368 	.db #0x8f	; 143
      0004CC 87                    1369 	.db #0x87	; 135
      0004CD 83                    1370 	.db #0x83	; 131
      0004CE 81                    1371 	.db #0x81	; 129
      0004CF 7F                    1372 	.db #0x7f	; 127
      0004D0                       1373 _pattern_7:
      0004D0 FF                    1374 	.db #0xff	; 255
      0004D1 FD                    1375 	.db #0xfd	; 253
      0004D2 F9                    1376 	.db #0xf9	; 249
      0004D3 F1                    1377 	.db #0xf1	; 241
      0004D4 E1                    1378 	.db #0xe1	; 225
      0004D5 C1                    1379 	.db #0xc1	; 193
      0004D6 81                    1380 	.db #0x81	; 129
      0004D7 FE                    1381 	.db #0xfe	; 254
      0004D8                       1382 _pattern_8:
      0004D8 7F                    1383 	.db #0x7f	; 127
      0004D9 AE                    1384 	.db #0xae	; 174
      0004DA FF                    1385 	.db #0xff	; 255
      0004DB 5B                    1386 	.db #0x5b	; 91
      0004DC FF                    1387 	.db #0xff	; 255
      0004DD AE                    1388 	.db #0xae	; 174
      0004DE FF                    1389 	.db #0xff	; 255
      0004DF DF                    1390 	.db #0xdf	; 223
      0004E0                       1391 _pattern_9:
      0004E0 FE                    1392 	.db #0xfe	; 254
      0004E1 BD                    1393 	.db #0xbd	; 189
      0004E2 DF                    1394 	.db #0xdf	; 223
      0004E3 7F                    1395 	.db #0x7f	; 127
      0004E4 FB                    1396 	.db #0xfb	; 251
      0004E5 DF                    1397 	.db #0xdf	; 223
      0004E6 FE                    1398 	.db #0xfe	; 254
      0004E7 EF                    1399 	.db #0xef	; 239
      0004E8                       1400 _pattern_10:
      0004E8 7F                    1401 	.db #0x7f	; 127
      0004E9 FF                    1402 	.db #0xff	; 255
      0004EA ED                    1403 	.db #0xed	; 237
      0004EB FF                    1404 	.db #0xff	; 255
      0004EC B6                    1405 	.db #0xb6	; 182
      0004ED FE                    1406 	.db #0xfe	; 254
      0004EE DB                    1407 	.db #0xdb	; 219
      0004EF 7D                    1408 	.db #0x7d	; 125
      0004F0                       1409 _pattern_11:
      0004F0 FE                    1410 	.db #0xfe	; 254
      0004F1 FF                    1411 	.db #0xff	; 255
      0004F2 FE                    1412 	.db #0xfe	; 254
      0004F3 77                    1413 	.db #0x77	; 119	'w'
      0004F4 FE                    1414 	.db #0xfe	; 254
      0004F5 DD                    1415 	.db #0xdd	; 221
      0004F6 EF                    1416 	.db #0xef	; 239
      0004F7 5A                    1417 	.db #0x5a	; 90	'Z'
      0004F8                       1418 _pattern_12:
      0004F8 7F                    1419 	.db #0x7f	; 127
      0004F9 D5                    1420 	.db #0xd5	; 213
      0004FA BF                    1421 	.db #0xbf	; 191
      0004FB ED                    1422 	.db #0xed	; 237
      0004FC BF                    1423 	.db #0xbf	; 191
      0004FD F5                    1424 	.db #0xf5	; 245
      0004FE BF                    1425 	.db #0xbf	; 191
      0004FF FF                    1426 	.db #0xff	; 255
      000500                       1427 _pattern_13:
      000500 FE                    1428 	.db #0xfe	; 254
      000501 5F                    1429 	.db #0x5f	; 95
      000502 F5                    1430 	.db #0xf5	; 245
      000503 DF                    1431 	.db #0xdf	; 223
      000504 FF                    1432 	.db #0xff	; 255
      000505 FF                    1433 	.db #0xff	; 255
      000506 FF                    1434 	.db #0xff	; 255
      000507 FF                    1435 	.db #0xff	; 255
      000508                       1436 _pattern_14:
      000508 EF                    1437 	.db #0xef	; 239
      000509 BF                    1438 	.db #0xbf	; 191
      00050A 7F                    1439 	.db #0x7f	; 127
      00050B FF                    1440 	.db #0xff	; 255
      00050C FF                    1441 	.db #0xff	; 255
      00050D FF                    1442 	.db #0xff	; 255
      00050E DB                    1443 	.db #0xdb	; 219
      00050F 7F                    1444 	.db #0x7f	; 127
      000510                       1445 _pattern_15:
      000510 FF                    1446 	.db #0xff	; 255
      000511 FD                    1447 	.db #0xfd	; 253
      000512 FF                    1448 	.db #0xff	; 255
      000513 DB                    1449 	.db #0xdb	; 219
      000514 FD                    1450 	.db #0xfd	; 253
      000515 7B                    1451 	.db #0x7b	; 123
      000516 D7                    1452 	.db #0xd7	; 215
      000517 FE                    1453 	.db #0xfe	; 254
      000518                       1454 _pattern_16:
      000518 7F                    1455 	.db #0x7f	; 127
      000519 FF                    1456 	.db #0xff	; 255
      00051A EA                    1457 	.db #0xea	; 234
      00051B DF                    1458 	.db #0xdf	; 223
      00051C FF                    1459 	.db #0xff	; 255
      00051D DF                    1460 	.db #0xdf	; 223
      00051E FF                    1461 	.db #0xff	; 255
      00051F DF                    1462 	.db #0xdf	; 223
      000520                       1463 _pattern_17:
      000520 FE                    1464 	.db #0xfe	; 254
      000521 FF                    1465 	.db #0xff	; 255
      000522 AF                    1466 	.db #0xaf	; 175
      000523 FA                    1467 	.db #0xfa	; 250
      000524 FF                    1468 	.db #0xff	; 255
      000525 FA                    1469 	.db #0xfa	; 250
      000526 FF                    1470 	.db #0xff	; 255
      000527 FA                    1471 	.db #0xfa	; 250
      000528                       1472 _pattern_18:
      000528 FF                    1473 	.db #0xff	; 255
      000529 DF                    1474 	.db #0xdf	; 223
      00052A FF                    1475 	.db #0xff	; 255
      00052B DF                    1476 	.db #0xdf	; 223
      00052C FF                    1477 	.db #0xff	; 255
      00052D EA                    1478 	.db #0xea	; 234
      00052E FF                    1479 	.db #0xff	; 255
      00052F 55                    1480 	.db #0x55	; 85	'U'
      000530                       1481 _pattern_19:
      000530 FF                    1482 	.db #0xff	; 255
      000531 FA                    1483 	.db #0xfa	; 250
      000532 FF                    1484 	.db #0xff	; 255
      000533 FA                    1485 	.db #0xfa	; 250
      000534 F7                    1486 	.db #0xf7	; 247
      000535 AA                    1487 	.db #0xaa	; 170
      000536 FF                    1488 	.db #0xff	; 255
      000537 56                    1489 	.db #0x56	; 86	'V'
      000538                       1490 _pattern_20:
      000538 3F                    1491 	.db #0x3f	; 63
      000539 7F                    1492 	.db #0x7f	; 127
      00053A E0                    1493 	.db #0xe0	; 224
      00053B CE                    1494 	.db #0xce	; 206
      00053C E6                    1495 	.db #0xe6	; 230
      00053D 7C                    1496 	.db #0x7c	; 124
      00053E 39                    1497 	.db #0x39	; 57	'9'
      00053F 03                    1498 	.db #0x03	; 3
      000540                       1499 _pattern_21:
      000540 FF                    1500 	.db #0xff	; 255
      000541 FF                    1501 	.db #0xff	; 255
      000542 00                    1502 	.db #0x00	; 0
      000543 DB                    1503 	.db #0xdb	; 219
      000544 DB                    1504 	.db #0xdb	; 219
      000545 00                    1505 	.db #0x00	; 0
      000546 FF                    1506 	.db #0xff	; 255
      000547 FF                    1507 	.db #0xff	; 255
      000548                       1508 _pattern_22:
      000548 FC                    1509 	.db #0xfc	; 252
      000549 FE                    1510 	.db #0xfe	; 254
      00054A 07                    1511 	.db #0x07	; 7
      00054B 73                    1512 	.db #0x73	; 115	's'
      00054C 67                    1513 	.db #0x67	; 103	'g'
      00054D 3E                    1514 	.db #0x3e	; 62
      00054E 9C                    1515 	.db #0x9c	; 156
      00054F C0                    1516 	.db #0xc0	; 192
      000550                       1517 _pattern_23:
      000550 06                    1518 	.db #0x06	; 6
      000551 00                    1519 	.db #0x00	; 0
      000552 03                    1520 	.db #0x03	; 3
      000553 04                    1521 	.db #0x04	; 4
      000554 05                    1522 	.db #0x05	; 5
      000555 05                    1523 	.db #0x05	; 5
      000556 05                    1524 	.db #0x05	; 5
      000557 05                    1525 	.db #0x05	; 5
      000558                       1526 _pattern_24:
      000558 00                    1527 	.db #0x00	; 0
      000559 00                    1528 	.db #0x00	; 0
      00055A 33                    1529 	.db #0x33	; 51	'3'
      00055B 44                    1530 	.db #0x44	; 68	'D'
      00055C 55                    1531 	.db #0x55	; 85	'U'
      00055D 55                    1532 	.db #0x55	; 85	'U'
      00055E 55                    1533 	.db #0x55	; 85	'U'
      00055F 55                    1534 	.db #0x55	; 85	'U'
      000560                       1535 _pattern_25:
      000560 60                    1536 	.db #0x60	; 96
      000561 00                    1537 	.db #0x00	; 0
      000562 40                    1538 	.db #0x40	; 64
      000563 20                    1539 	.db #0x20	; 32
      000564 20                    1540 	.db #0x20	; 32
      000565 20                    1541 	.db #0x20	; 32
      000566 20                    1542 	.db #0x20	; 32
      000567 20                    1543 	.db #0x20	; 32
      000568                       1544 _pattern_26:
      000568 05                    1545 	.db #0x05	; 5
      000569 05                    1546 	.db #0x05	; 5
      00056A 05                    1547 	.db #0x05	; 5
      00056B 05                    1548 	.db #0x05	; 5
      00056C 05                    1549 	.db #0x05	; 5
      00056D 05                    1550 	.db #0x05	; 5
      00056E 05                    1551 	.db #0x05	; 5
      00056F 05                    1552 	.db #0x05	; 5
      000570                       1553 _pattern_27:
      000570 55                    1554 	.db #0x55	; 85	'U'
      000571 55                    1555 	.db #0x55	; 85	'U'
      000572 55                    1556 	.db #0x55	; 85	'U'
      000573 55                    1557 	.db #0x55	; 85	'U'
      000574 55                    1558 	.db #0x55	; 85	'U'
      000575 55                    1559 	.db #0x55	; 85	'U'
      000576 55                    1560 	.db #0x55	; 85	'U'
      000577 55                    1561 	.db #0x55	; 85	'U'
      000578                       1562 _pattern_28:
      000578 20                    1563 	.db #0x20	; 32
      000579 20                    1564 	.db #0x20	; 32
      00057A 20                    1565 	.db #0x20	; 32
      00057B 20                    1566 	.db #0x20	; 32
      00057C 20                    1567 	.db #0x20	; 32
      00057D 20                    1568 	.db #0x20	; 32
      00057E 20                    1569 	.db #0x20	; 32
      00057F 20                    1570 	.db #0x20	; 32
      000580                       1571 _pattern_29:
      000580 05                    1572 	.db #0x05	; 5
      000581 05                    1573 	.db #0x05	; 5
      000582 07                    1574 	.db #0x07	; 7
      000583 07                    1575 	.db #0x07	; 7
      000584 07                    1576 	.db #0x07	; 7
      000585 05                    1577 	.db #0x05	; 5
      000586 05                    1578 	.db #0x05	; 5
      000587 05                    1579 	.db #0x05	; 5
      000588                       1580 _pattern_30:
      000588 55                    1581 	.db #0x55	; 85	'U'
      000589 55                    1582 	.db #0x55	; 85	'U'
      00058A FF                    1583 	.db #0xff	; 255
      00058B FF                    1584 	.db #0xff	; 255
      00058C FF                    1585 	.db #0xff	; 255
      00058D 55                    1586 	.db #0x55	; 85	'U'
      00058E 55                    1587 	.db #0x55	; 85	'U'
      00058F 55                    1588 	.db #0x55	; 85	'U'
      000590                       1589 _pattern_31:
      000590 20                    1590 	.db #0x20	; 32
      000591 20                    1591 	.db #0x20	; 32
      000592 E0                    1592 	.db #0xe0	; 224
      000593 E0                    1593 	.db #0xe0	; 224
      000594 E0                    1594 	.db #0xe0	; 224
      000595 20                    1595 	.db #0x20	; 32
      000596 20                    1596 	.db #0x20	; 32
      000597 20                    1597 	.db #0x20	; 32
      000598                       1598 _pattern_37:
      000598 05                    1599 	.db #0x05	; 5
      000599 05                    1600 	.db #0x05	; 5
      00059A 05                    1601 	.db #0x05	; 5
      00059B 05                    1602 	.db #0x05	; 5
      00059C 04                    1603 	.db #0x04	; 4
      00059D 03                    1604 	.db #0x03	; 3
      00059E 00                    1605 	.db #0x00	; 0
      00059F 06                    1606 	.db #0x06	; 6
      0005A0                       1607 _pattern_38:
      0005A0 55                    1608 	.db #0x55	; 85	'U'
      0005A1 55                    1609 	.db #0x55	; 85	'U'
      0005A2 55                    1610 	.db #0x55	; 85	'U'
      0005A3 55                    1611 	.db #0x55	; 85	'U'
      0005A4 44                    1612 	.db #0x44	; 68	'D'
      0005A5 33                    1613 	.db #0x33	; 51	'3'
      0005A6 00                    1614 	.db #0x00	; 0
      0005A7 00                    1615 	.db #0x00	; 0
      0005A8                       1616 _pattern_39:
      0005A8 20                    1617 	.db #0x20	; 32
      0005A9 20                    1618 	.db #0x20	; 32
      0005AA 20                    1619 	.db #0x20	; 32
      0005AB 20                    1620 	.db #0x20	; 32
      0005AC 20                    1621 	.db #0x20	; 32
      0005AD 40                    1622 	.db #0x40	; 64
      0005AE 00                    1623 	.db #0x00	; 0
      0005AF 60                    1624 	.db #0x60	; 96
      0005B0                       1625 _pattern_32:
      0005B0 03                    1626 	.db #0x03	; 3
      0005B1 39                    1627 	.db #0x39	; 57	'9'
      0005B2 7C                    1628 	.db #0x7c	; 124
      0005B3 E6                    1629 	.db #0xe6	; 230
      0005B4 CE                    1630 	.db #0xce	; 206
      0005B5 E0                    1631 	.db #0xe0	; 224
      0005B6 7F                    1632 	.db #0x7f	; 127
      0005B7 3F                    1633 	.db #0x3f	; 63
      0005B8                       1634 _pattern_33:
      0005B8 FF                    1635 	.db #0xff	; 255
      0005B9 FF                    1636 	.db #0xff	; 255
      0005BA 00                    1637 	.db #0x00	; 0
      0005BB DB                    1638 	.db #0xdb	; 219
      0005BC DB                    1639 	.db #0xdb	; 219
      0005BD 00                    1640 	.db #0x00	; 0
      0005BE FF                    1641 	.db #0xff	; 255
      0005BF FF                    1642 	.db #0xff	; 255
      0005C0                       1643 _pattern_34:
      0005C0 C0                    1644 	.db #0xc0	; 192
      0005C1 9C                    1645 	.db #0x9c	; 156
      0005C2 3E                    1646 	.db #0x3e	; 62
      0005C3 67                    1647 	.db #0x67	; 103	'g'
      0005C4 73                    1648 	.db #0x73	; 115	's'
      0005C5 07                    1649 	.db #0x07	; 7
      0005C6 FE                    1650 	.db #0xfe	; 254
      0005C7 FC                    1651 	.db #0xfc	; 252
      0005C8                       1652 _sprite_dust_0:
      0005C8 10                    1653 	.db #0x10	; 16
      0005C9 42                    1654 	.db #0x42	; 66	'B'
      0005CA 10                    1655 	.db #0x10	; 16
      0005CB 45                    1656 	.db #0x45	; 69	'E'
      0005CC 20                    1657 	.db #0x20	; 32
      0005CD 89                    1658 	.db #0x89	; 137
      0005CE 20                    1659 	.db #0x20	; 32
      0005CF 88                    1660 	.db #0x88	; 136
      0005D0                       1661 _sprite_dust_1:
      0005D0 10                    1662 	.db #0x10	; 16
      0005D1 42                    1663 	.db #0x42	; 66	'B'
      0005D2 00                    1664 	.db #0x00	; 0
      0005D3 04                    1665 	.db #0x04	; 4
      0005D4 20                    1666 	.db #0x20	; 32
      0005D5 81                    1667 	.db #0x81	; 129
      0005D6 20                    1668 	.db #0x20	; 32
      0005D7 08                    1669 	.db #0x08	; 8
      0005D8                       1670 _sprite_dust_2:
      0005D8 10                    1671 	.db #0x10	; 16
      0005D9 00                    1672 	.db #0x00	; 0
      0005DA 00                    1673 	.db #0x00	; 0
      0005DB 04                    1674 	.db #0x04	; 4
      0005DC 20                    1675 	.db #0x20	; 32
      0005DD 80                    1676 	.db #0x80	; 128
      0005DE 20                    1677 	.db #0x20	; 32
      0005DF 00                    1678 	.db #0x00	; 0
      0005E0                       1679 _sprite_dust_3:
      0005E0 10                    1680 	.db #0x10	; 16
      0005E1 00                    1681 	.db #0x00	; 0
      0005E2 00                    1682 	.db #0x00	; 0
      0005E3 04                    1683 	.db #0x04	; 4
      0005E4 00                    1684 	.db #0x00	; 0
      0005E5 00                    1685 	.db #0x00	; 0
      0005E6 20                    1686 	.db #0x20	; 32
      0005E7 00                    1687 	.db #0x00	; 0
      0005E8                       1688 _pattern_title:
      0005E8 FE                    1689 	.db #0xfe	; 254
      0005E9 FE                    1690 	.db #0xfe	; 254
      0005EA FE                    1691 	.db #0xfe	; 254
      0005EB FE                    1692 	.db #0xfe	; 254
      0005EC FE                    1693 	.db #0xfe	; 254
      0005ED FE                    1694 	.db #0xfe	; 254
      0005EE FE                    1695 	.db #0xfe	; 254
      0005EF 00                    1696 	.db #0x00	; 0
      0005F0                       1697 _color_black_0:
      0005F0 14                    1698 	.db #0x14	; 20
      0005F1 14                    1699 	.db #0x14	; 20
      0005F2 14                    1700 	.db #0x14	; 20
      0005F3 14                    1701 	.db #0x14	; 20
      0005F4 14                    1702 	.db #0x14	; 20
      0005F5 14                    1703 	.db #0x14	; 20
      0005F6 14                    1704 	.db #0x14	; 20
      0005F7 14                    1705 	.db #0x14	; 20
      0005F8                       1706 _color_black_1:
      0005F8 14                    1707 	.db #0x14	; 20
      0005F9 14                    1708 	.db #0x14	; 20
      0005FA 14                    1709 	.db #0x14	; 20
      0005FB 14                    1710 	.db #0x14	; 20
      0005FC 14                    1711 	.db #0x14	; 20
      0005FD 14                    1712 	.db #0x14	; 20
      0005FE 14                    1713 	.db #0x14	; 20
      0005FF 14                    1714 	.db #0x14	; 20
      000600                       1715 _color_black_2:
      000600 14                    1716 	.db #0x14	; 20
      000601 14                    1717 	.db #0x14	; 20
      000602 14                    1718 	.db #0x14	; 20
      000603 14                    1719 	.db #0x14	; 20
      000604 14                    1720 	.db #0x14	; 20
      000605 14                    1721 	.db #0x14	; 20
      000606 14                    1722 	.db #0x14	; 20
      000607 14                    1723 	.db #0x14	; 20
      000608                       1724 _color_black_3:
      000608 14                    1725 	.db #0x14	; 20
      000609 14                    1726 	.db #0x14	; 20
      00060A 14                    1727 	.db #0x14	; 20
      00060B 14                    1728 	.db #0x14	; 20
      00060C 14                    1729 	.db #0x14	; 20
      00060D 14                    1730 	.db #0x14	; 20
      00060E 14                    1731 	.db #0x14	; 20
      00060F 14                    1732 	.db #0x14	; 20
      000610                       1733 _color_0:
      000610 13                    1734 	.db #0x13	; 19
      000611 13                    1735 	.db #0x13	; 19
      000612 13                    1736 	.db #0x13	; 19
      000613 13                    1737 	.db #0x13	; 19
      000614 13                    1738 	.db #0x13	; 19
      000615 13                    1739 	.db #0x13	; 19
      000616 13                    1740 	.db #0x13	; 19
      000617 13                    1741 	.db #0x13	; 19
      000618                       1742 _color_1:
      000618 12                    1743 	.db #0x12	; 18
      000619 12                    1744 	.db #0x12	; 18
      00061A 12                    1745 	.db #0x12	; 18
      00061B 12                    1746 	.db #0x12	; 18
      00061C 12                    1747 	.db #0x12	; 18
      00061D 12                    1748 	.db #0x12	; 18
      00061E 12                    1749 	.db #0x12	; 18
      00061F 12                    1750 	.db #0x12	; 18
      000620                       1751 _color_2:
      000620 12                    1752 	.db #0x12	; 18
      000621 12                    1753 	.db #0x12	; 18
      000622 12                    1754 	.db #0x12	; 18
      000623 12                    1755 	.db #0x12	; 18
      000624 12                    1756 	.db #0x12	; 18
      000625 12                    1757 	.db #0x12	; 18
      000626 12                    1758 	.db #0x12	; 18
      000627 12                    1759 	.db #0x12	; 18
      000628                       1760 _color_3:
      000628 1C                    1761 	.db #0x1c	; 28
      000629 1C                    1762 	.db #0x1c	; 28
      00062A 1C                    1763 	.db #0x1c	; 28
      00062B 1C                    1764 	.db #0x1c	; 28
      00062C 1C                    1765 	.db #0x1c	; 28
      00062D 1C                    1766 	.db #0x1c	; 28
      00062E 1C                    1767 	.db #0x1c	; 28
      00062F 1C                    1768 	.db #0x1c	; 28
      000630                       1769 _color_4:
      000630 96                    1770 	.db #0x96	; 150
      000631 96                    1771 	.db #0x96	; 150
      000632 96                    1772 	.db #0x96	; 150
      000633 96                    1773 	.db #0x96	; 150
      000634 96                    1774 	.db #0x96	; 150
      000635 96                    1775 	.db #0x96	; 150
      000636 96                    1776 	.db #0x96	; 150
      000637 96                    1777 	.db #0x96	; 150
      000638                       1778 _color_5:
      000638 98                    1779 	.db #0x98	; 152
      000639 68                    1780 	.db #0x68	; 104	'h'
      00063A 68                    1781 	.db #0x68	; 104	'h'
      00063B 68                    1782 	.db #0x68	; 104	'h'
      00063C 68                    1783 	.db #0x68	; 104	'h'
      00063D 68                    1784 	.db #0x68	; 104	'h'
      00063E 68                    1785 	.db #0x68	; 104	'h'
      00063F 68                    1786 	.db #0x68	; 104	'h'
      000640                       1787 _color_6:
      000640 68                    1788 	.db #0x68	; 104	'h'
      000641 68                    1789 	.db #0x68	; 104	'h'
      000642 68                    1790 	.db #0x68	; 104	'h'
      000643 68                    1791 	.db #0x68	; 104	'h'
      000644 68                    1792 	.db #0x68	; 104	'h'
      000645 68                    1793 	.db #0x68	; 104	'h'
      000646 68                    1794 	.db #0x68	; 104	'h'
      000647 68                    1795 	.db #0x68	; 104	'h'
      000648                       1796 _color_7:
      000648 89                    1797 	.db #0x89	; 137
      000649 89                    1798 	.db #0x89	; 137
      00064A 89                    1799 	.db #0x89	; 137
      00064B 89                    1800 	.db #0x89	; 137
      00064C 89                    1801 	.db #0x89	; 137
      00064D 89                    1802 	.db #0x89	; 137
      00064E 89                    1803 	.db #0x89	; 137
      00064F 86                    1804 	.db #0x86	; 134
      000650                       1805 _color_8:
      000650 41                    1806 	.db #0x41	; 65	'A'
      000651 47                    1807 	.db #0x47	; 71	'G'
      000652 47                    1808 	.db #0x47	; 71	'G'
      000653 47                    1809 	.db #0x47	; 71	'G'
      000654 47                    1810 	.db #0x47	; 71	'G'
      000655 47                    1811 	.db #0x47	; 71	'G'
      000656 47                    1812 	.db #0x47	; 71	'G'
      000657 47                    1813 	.db #0x47	; 71	'G'
      000658                       1814 _color_9:
      000658 41                    1815 	.db #0x41	; 65	'A'
      000659 45                    1816 	.db #0x45	; 69	'E'
      00065A 47                    1817 	.db #0x47	; 71	'G'
      00065B 47                    1818 	.db #0x47	; 71	'G'
      00065C 45                    1819 	.db #0x45	; 69	'E'
      00065D 45                    1820 	.db #0x45	; 69	'E'
      00065E 41                    1821 	.db #0x41	; 65	'A'
      00065F 45                    1822 	.db #0x45	; 69	'E'
      000660                       1823 _color_10:
      000660 47                    1824 	.db #0x47	; 71	'G'
      000661 45                    1825 	.db #0x45	; 69	'E'
      000662 45                    1826 	.db #0x45	; 69	'E'
      000663 45                    1827 	.db #0x45	; 69	'E'
      000664 45                    1828 	.db #0x45	; 69	'E'
      000665 41                    1829 	.db #0x41	; 65	'A'
      000666 45                    1830 	.db #0x45	; 69	'E'
      000667 41                    1831 	.db #0x41	; 65	'A'
      000668                       1832 _color_11:
      000668 41                    1833 	.db #0x41	; 65	'A'
      000669 41                    1834 	.db #0x41	; 65	'A'
      00066A 41                    1835 	.db #0x41	; 65	'A'
      00066B 41                    1836 	.db #0x41	; 65	'A'
      00066C 41                    1837 	.db #0x41	; 65	'A'
      00066D 41                    1838 	.db #0x41	; 65	'A'
      00066E 41                    1839 	.db #0x41	; 65	'A'
      00066F 41                    1840 	.db #0x41	; 65	'A'
      000670                       1841 _color_12:
      000670 D1                    1842 	.db #0xd1	; 209
      000671 DF                    1843 	.db #0xdf	; 223
      000672 DF                    1844 	.db #0xdf	; 223
      000673 DF                    1845 	.db #0xdf	; 223
      000674 DF                    1846 	.db #0xdf	; 223
      000675 DF                    1847 	.db #0xdf	; 223
      000676 DF                    1848 	.db #0xdf	; 223
      000677 DF                    1849 	.db #0xdf	; 223
      000678                       1850 _color_13:
      000678 D1                    1851 	.db #0xd1	; 209
      000679 DF                    1852 	.db #0xdf	; 223
      00067A DF                    1853 	.db #0xdf	; 223
      00067B DF                    1854 	.db #0xdf	; 223
      00067C DF                    1855 	.db #0xdf	; 223
      00067D DF                    1856 	.db #0xdf	; 223
      00067E DF                    1857 	.db #0xdf	; 223
      00067F DF                    1858 	.db #0xdf	; 223
      000680                       1859 _color_14:
      000680 DF                    1860 	.db #0xdf	; 223
      000681 DF                    1861 	.db #0xdf	; 223
      000682 DF                    1862 	.db #0xdf	; 223
      000683 D1                    1863 	.db #0xd1	; 209
      000684 D1                    1864 	.db #0xd1	; 209
      000685 D1                    1865 	.db #0xd1	; 209
      000686 D1                    1866 	.db #0xd1	; 209
      000687 D1                    1867 	.db #0xd1	; 209
      000688                       1868 _color_15:
      000688 D1                    1869 	.db #0xd1	; 209
      000689 D1                    1870 	.db #0xd1	; 209
      00068A D1                    1871 	.db #0xd1	; 209
      00068B D1                    1872 	.db #0xd1	; 209
      00068C D1                    1873 	.db #0xd1	; 209
      00068D D1                    1874 	.db #0xd1	; 209
      00068E D1                    1875 	.db #0xd1	; 209
      00068F D1                    1876 	.db #0xd1	; 209
      000690                       1877 _color_16:
      000690 A1                    1878 	.db #0xa1	; 161
      000691 BF                    1879 	.db #0xbf	; 191
      000692 BF                    1880 	.db #0xbf	; 191
      000693 BF                    1881 	.db #0xbf	; 191
      000694 BF                    1882 	.db #0xbf	; 191
      000695 BF                    1883 	.db #0xbf	; 191
      000696 BF                    1884 	.db #0xbf	; 191
      000697 BF                    1885 	.db #0xbf	; 191
      000698                       1886 _color_17:
      000698 A1                    1887 	.db #0xa1	; 161
      000699 AF                    1888 	.db #0xaf	; 175
      00069A AF                    1889 	.db #0xaf	; 175
      00069B A1                    1890 	.db #0xa1	; 161
      00069C A1                    1891 	.db #0xa1	; 161
      00069D A1                    1892 	.db #0xa1	; 161
      00069E A1                    1893 	.db #0xa1	; 161
      00069F A1                    1894 	.db #0xa1	; 161
      0006A0                       1895 _color_18:
      0006A0 AF                    1896 	.db #0xaf	; 175
      0006A1 AF                    1897 	.db #0xaf	; 175
      0006A2 AF                    1898 	.db #0xaf	; 175
      0006A3 AF                    1899 	.db #0xaf	; 175
      0006A4 A1                    1900 	.db #0xa1	; 161
      0006A5 A1                    1901 	.db #0xa1	; 161
      0006A6 A1                    1902 	.db #0xa1	; 161
      0006A7 A1                    1903 	.db #0xa1	; 161
      0006A8                       1904 _color_19:
      0006A8 B1                    1905 	.db #0xb1	; 177
      0006A9 B1                    1906 	.db #0xb1	; 177
      0006AA B1                    1907 	.db #0xb1	; 177
      0006AB B1                    1908 	.db #0xb1	; 177
      0006AC B1                    1909 	.db #0xb1	; 177
      0006AD B1                    1910 	.db #0xb1	; 177
      0006AE B1                    1911 	.db #0xb1	; 177
      0006AF B1                    1912 	.db #0xb1	; 177
      0006B0                       1913 _color_column_1:
      0006B0 F1                    1914 	.db #0xf1	; 241
      0006B1 E1                    1915 	.db #0xe1	; 225
      0006B2 E1                    1916 	.db #0xe1	; 225
      0006B3 E1                    1917 	.db #0xe1	; 225
      0006B4 E1                    1918 	.db #0xe1	; 225
      0006B5 E1                    1919 	.db #0xe1	; 225
      0006B6 E1                    1920 	.db #0xe1	; 225
      0006B7 E1                    1921 	.db #0xe1	; 225
      0006B8                       1922 _color_column_2:
      0006B8 F1                    1923 	.db #0xf1	; 241
      0006B9 E1                    1924 	.db #0xe1	; 225
      0006BA E1                    1925 	.db #0xe1	; 225
      0006BB E1                    1926 	.db #0xe1	; 225
      0006BC E1                    1927 	.db #0xe1	; 225
      0006BD E1                    1928 	.db #0xe1	; 225
      0006BE E1                    1929 	.db #0xe1	; 225
      0006BF E1                    1930 	.db #0xe1	; 225
      0006C0                       1931 _color_column_3:
      0006C0 F1                    1932 	.db #0xf1	; 241
      0006C1 E1                    1933 	.db #0xe1	; 225
      0006C2 E1                    1934 	.db #0xe1	; 225
      0006C3 E1                    1935 	.db #0xe1	; 225
      0006C4 E1                    1936 	.db #0xe1	; 225
      0006C5 E1                    1937 	.db #0xe1	; 225
      0006C6 E1                    1938 	.db #0xe1	; 225
      0006C7 E1                    1939 	.db #0xe1	; 225
      0006C8                       1940 _color_column_4:
      0006C8 F1                    1941 	.db #0xf1	; 241
      0006C9 F1                    1942 	.db #0xf1	; 241
      0006CA F1                    1943 	.db #0xf1	; 241
      0006CB F1                    1944 	.db #0xf1	; 241
      0006CC F1                    1945 	.db #0xf1	; 241
      0006CD F1                    1946 	.db #0xf1	; 241
      0006CE F1                    1947 	.db #0xf1	; 241
      0006CF F1                    1948 	.db #0xf1	; 241
      0006D0                       1949 _color_column_5:
      0006D0 E1                    1950 	.db #0xe1	; 225
      0006D1 E1                    1951 	.db #0xe1	; 225
      0006D2 E1                    1952 	.db #0xe1	; 225
      0006D3 E1                    1953 	.db #0xe1	; 225
      0006D4 E1                    1954 	.db #0xe1	; 225
      0006D5 E1                    1955 	.db #0xe1	; 225
      0006D6 E1                    1956 	.db #0xe1	; 225
      0006D7 E1                    1957 	.db #0xe1	; 225
      0006D8                       1958 _color_column_6:
      0006D8 E1                    1959 	.db #0xe1	; 225
      0006D9 E1                    1960 	.db #0xe1	; 225
      0006DA E1                    1961 	.db #0xe1	; 225
      0006DB 41                    1962 	.db #0x41	; 65	'A'
      0006DC 41                    1963 	.db #0x41	; 65	'A'
      0006DD 41                    1964 	.db #0x41	; 65	'A'
      0006DE 41                    1965 	.db #0x41	; 65	'A'
      0006DF 41                    1966 	.db #0x41	; 65	'A'
      0006E0                       1967 _color_column_7:
      0006E0 F1                    1968 	.db #0xf1	; 241
      0006E1 F1                    1969 	.db #0xf1	; 241
      0006E2 F1                    1970 	.db #0xf1	; 241
      0006E3 F1                    1971 	.db #0xf1	; 241
      0006E4 F1                    1972 	.db #0xf1	; 241
      0006E5 F1                    1973 	.db #0xf1	; 241
      0006E6 F1                    1974 	.db #0xf1	; 241
      0006E7 F1                    1975 	.db #0xf1	; 241
      0006E8                       1976 _color_column_8:
      0006E8 E1                    1977 	.db #0xe1	; 225
      0006E9 E1                    1978 	.db #0xe1	; 225
      0006EA E1                    1979 	.db #0xe1	; 225
      0006EB F1                    1980 	.db #0xf1	; 241
      0006EC E1                    1981 	.db #0xe1	; 225
      0006ED E1                    1982 	.db #0xe1	; 225
      0006EE E1                    1983 	.db #0xe1	; 225
      0006EF E1                    1984 	.db #0xe1	; 225
      0006F0                       1985 _color_column_9:
      0006F0 41                    1986 	.db #0x41	; 65	'A'
      0006F1 41                    1987 	.db #0x41	; 65	'A'
      0006F2 41                    1988 	.db #0x41	; 65	'A'
      0006F3 F1                    1989 	.db #0xf1	; 241
      0006F4 41                    1990 	.db #0x41	; 65	'A'
      0006F5 41                    1991 	.db #0x41	; 65	'A'
      0006F6 41                    1992 	.db #0x41	; 65	'A'
      0006F7 41                    1993 	.db #0x41	; 65	'A'
      0006F8                       1994 _color_column_10:
      0006F8 F1                    1995 	.db #0xf1	; 241
      0006F9 F1                    1996 	.db #0xf1	; 241
      0006FA F1                    1997 	.db #0xf1	; 241
      0006FB F1                    1998 	.db #0xf1	; 241
      0006FC F1                    1999 	.db #0xf1	; 241
      0006FD F1                    2000 	.db #0xf1	; 241
      0006FE F1                    2001 	.db #0xf1	; 241
      0006FF F1                    2002 	.db #0xf1	; 241
      000700                       2003 _color_column_11:
      000700 E1                    2004 	.db #0xe1	; 225
      000701 E1                    2005 	.db #0xe1	; 225
      000702 E1                    2006 	.db #0xe1	; 225
      000703 E1                    2007 	.db #0xe1	; 225
      000704 E1                    2008 	.db #0xe1	; 225
      000705 E1                    2009 	.db #0xe1	; 225
      000706 E1                    2010 	.db #0xe1	; 225
      000707 E1                    2011 	.db #0xe1	; 225
      000708                       2012 _color_column_12:
      000708 41                    2013 	.db #0x41	; 65	'A'
      000709 41                    2014 	.db #0x41	; 65	'A'
      00070A 41                    2015 	.db #0x41	; 65	'A'
      00070B 41                    2016 	.db #0x41	; 65	'A'
      00070C 41                    2017 	.db #0x41	; 65	'A'
      00070D 41                    2018 	.db #0x41	; 65	'A'
      00070E 41                    2019 	.db #0x41	; 65	'A'
      00070F 41                    2020 	.db #0x41	; 65	'A'
      000710                       2021 _color_column_16:
      000710 F1                    2022 	.db #0xf1	; 241
      000711 F1                    2023 	.db #0xf1	; 241
      000712 F1                    2024 	.db #0xf1	; 241
      000713 F1                    2025 	.db #0xf1	; 241
      000714 F1                    2026 	.db #0xf1	; 241
      000715 F1                    2027 	.db #0xf1	; 241
      000716 F1                    2028 	.db #0xf1	; 241
      000717 F1                    2029 	.db #0xf1	; 241
      000718                       2030 _color_column_17:
      000718 E1                    2031 	.db #0xe1	; 225
      000719 E1                    2032 	.db #0xe1	; 225
      00071A E1                    2033 	.db #0xe1	; 225
      00071B E1                    2034 	.db #0xe1	; 225
      00071C E1                    2035 	.db #0xe1	; 225
      00071D E1                    2036 	.db #0xe1	; 225
      00071E E1                    2037 	.db #0xe1	; 225
      00071F E1                    2038 	.db #0xe1	; 225
      000720                       2039 _color_column_18:
      000720 41                    2040 	.db #0x41	; 65	'A'
      000721 41                    2041 	.db #0x41	; 65	'A'
      000722 41                    2042 	.db #0x41	; 65	'A'
      000723 41                    2043 	.db #0x41	; 65	'A'
      000724 41                    2044 	.db #0x41	; 65	'A'
      000725 E1                    2045 	.db #0xe1	; 225
      000726 E1                    2046 	.db #0xe1	; 225
      000727 E1                    2047 	.db #0xe1	; 225
      000728                       2048 _color_column_13:
      000728 E1                    2049 	.db #0xe1	; 225
      000729 E1                    2050 	.db #0xe1	; 225
      00072A E1                    2051 	.db #0xe1	; 225
      00072B E1                    2052 	.db #0xe1	; 225
      00072C E1                    2053 	.db #0xe1	; 225
      00072D E1                    2054 	.db #0xe1	; 225
      00072E E1                    2055 	.db #0xe1	; 225
      00072F F1                    2056 	.db #0xf1	; 241
      000730                       2057 _color_column_14:
      000730 E1                    2058 	.db #0xe1	; 225
      000731 E1                    2059 	.db #0xe1	; 225
      000732 E1                    2060 	.db #0xe1	; 225
      000733 E1                    2061 	.db #0xe1	; 225
      000734 E1                    2062 	.db #0xe1	; 225
      000735 E1                    2063 	.db #0xe1	; 225
      000736 E1                    2064 	.db #0xe1	; 225
      000737 F1                    2065 	.db #0xf1	; 241
      000738                       2066 _color_column_15:
      000738 E1                    2067 	.db #0xe1	; 225
      000739 E1                    2068 	.db #0xe1	; 225
      00073A E1                    2069 	.db #0xe1	; 225
      00073B E1                    2070 	.db #0xe1	; 225
      00073C E1                    2071 	.db #0xe1	; 225
      00073D E1                    2072 	.db #0xe1	; 225
      00073E E1                    2073 	.db #0xe1	; 225
      00073F F1                    2074 	.db #0xf1	; 241
      000740                       2075 _color_dust_0:
      000740 F1                    2076 	.db #0xf1	; 241
      000741 F1                    2077 	.db #0xf1	; 241
      000742 F1                    2078 	.db #0xf1	; 241
      000743 F1                    2079 	.db #0xf1	; 241
      000744 F1                    2080 	.db #0xf1	; 241
      000745 F1                    2081 	.db #0xf1	; 241
      000746 F1                    2082 	.db #0xf1	; 241
      000747 F1                    2083 	.db #0xf1	; 241
      000748                       2084 _color_dust_1:
      000748 F1                    2085 	.db #0xf1	; 241
      000749 F1                    2086 	.db #0xf1	; 241
      00074A F1                    2087 	.db #0xf1	; 241
      00074B F1                    2088 	.db #0xf1	; 241
      00074C F1                    2089 	.db #0xf1	; 241
      00074D F1                    2090 	.db #0xf1	; 241
      00074E F1                    2091 	.db #0xf1	; 241
      00074F F1                    2092 	.db #0xf1	; 241
      000750                       2093 _color_dust_2:
      000750 F1                    2094 	.db #0xf1	; 241
      000751 F1                    2095 	.db #0xf1	; 241
      000752 F1                    2096 	.db #0xf1	; 241
      000753 F1                    2097 	.db #0xf1	; 241
      000754 F1                    2098 	.db #0xf1	; 241
      000755 F1                    2099 	.db #0xf1	; 241
      000756 F1                    2100 	.db #0xf1	; 241
      000757 F1                    2101 	.db #0xf1	; 241
      000758                       2102 _color_dust_3:
      000758 F1                    2103 	.db #0xf1	; 241
      000759 F1                    2104 	.db #0xf1	; 241
      00075A F1                    2105 	.db #0xf1	; 241
      00075B F1                    2106 	.db #0xf1	; 241
      00075C F1                    2107 	.db #0xf1	; 241
      00075D F1                    2108 	.db #0xf1	; 241
      00075E F1                    2109 	.db #0xf1	; 241
      00075F F1                    2110 	.db #0xf1	; 241
      000760                       2111 _color_font_1:
      000760 F1                    2112 	.db #0xf1	; 241
      000761 F1                    2113 	.db #0xf1	; 241
      000762 E1                    2114 	.db #0xe1	; 225
      000763 71                    2115 	.db #0x71	; 113	'q'
      000764 71                    2116 	.db #0x71	; 113	'q'
      000765 51                    2117 	.db #0x51	; 81	'Q'
      000766 51                    2118 	.db #0x51	; 81	'Q'
      000767 41                    2119 	.db #0x41	; 65	'A'
      000768                       2120 _color_font_2:
      000768 61                    2121 	.db #0x61	; 97	'a'
      000769 61                    2122 	.db #0x61	; 97	'a'
      00076A 81                    2123 	.db #0x81	; 129
      00076B 81                    2124 	.db #0x81	; 129
      00076C 91                    2125 	.db #0x91	; 145
      00076D 91                    2126 	.db #0x91	; 145
      00076E E1                    2127 	.db #0xe1	; 225
      00076F E1                    2128 	.db #0xe1	; 225
      000770                       2129 _color_title_1:
      000770 A1                    2130 	.db #0xa1	; 161
      000771 A1                    2131 	.db #0xa1	; 161
      000772 A1                    2132 	.db #0xa1	; 161
      000773 A1                    2133 	.db #0xa1	; 161
      000774 A1                    2134 	.db #0xa1	; 161
      000775 A1                    2135 	.db #0xa1	; 161
      000776 A1                    2136 	.db #0xa1	; 161
      000777 A1                    2137 	.db #0xa1	; 161
      000778                       2138 _color_title_2:
      000778 B1                    2139 	.db #0xb1	; 177
      000779 B1                    2140 	.db #0xb1	; 177
      00077A B1                    2141 	.db #0xb1	; 177
      00077B B1                    2142 	.db #0xb1	; 177
      00077C B1                    2143 	.db #0xb1	; 177
      00077D B1                    2144 	.db #0xb1	; 177
      00077E B1                    2145 	.db #0xb1	; 177
      00077F B1                    2146 	.db #0xb1	; 177
      000780                       2147 _color_title_3:
      000780 D1                    2148 	.db #0xd1	; 209
      000781 D1                    2149 	.db #0xd1	; 209
      000782 D1                    2150 	.db #0xd1	; 209
      000783 D1                    2151 	.db #0xd1	; 209
      000784 D1                    2152 	.db #0xd1	; 209
      000785 D1                    2153 	.db #0xd1	; 209
      000786 D1                    2154 	.db #0xd1	; 209
      000787 D1                    2155 	.db #0xd1	; 209
      000788                       2156 _color_title_4:
      000788 F1                    2157 	.db #0xf1	; 241
      000789 F1                    2158 	.db #0xf1	; 241
      00078A F1                    2159 	.db #0xf1	; 241
      00078B F1                    2160 	.db #0xf1	; 241
      00078C F1                    2161 	.db #0xf1	; 241
      00078D F1                    2162 	.db #0xf1	; 241
      00078E F1                    2163 	.db #0xf1	; 241
      00078F F1                    2164 	.db #0xf1	; 241
      000790                       2165 _color_title_5:
      000790 71                    2166 	.db #0x71	; 113	'q'
      000791 71                    2167 	.db #0x71	; 113	'q'
      000792 71                    2168 	.db #0x71	; 113	'q'
      000793 71                    2169 	.db #0x71	; 113	'q'
      000794 71                    2170 	.db #0x71	; 113	'q'
      000795 71                    2171 	.db #0x71	; 113	'q'
      000796 71                    2172 	.db #0x71	; 113	'q'
      000797 71                    2173 	.db #0x71	; 113	'q'
      000798                       2174 _color_title_6:
      000798 51                    2175 	.db #0x51	; 81	'Q'
      000799 51                    2176 	.db #0x51	; 81	'Q'
      00079A 51                    2177 	.db #0x51	; 81	'Q'
      00079B 51                    2178 	.db #0x51	; 81	'Q'
      00079C 51                    2179 	.db #0x51	; 81	'Q'
      00079D 51                    2180 	.db #0x51	; 81	'Q'
      00079E 51                    2181 	.db #0x51	; 81	'Q'
      00079F 51                    2182 	.db #0x51	; 81	'Q'
      0007A0                       2183 _color_title_7:
      0007A0 41                    2184 	.db #0x41	; 65	'A'
      0007A1 41                    2185 	.db #0x41	; 65	'A'
      0007A2 41                    2186 	.db #0x41	; 65	'A'
      0007A3 41                    2187 	.db #0x41	; 65	'A'
      0007A4 41                    2188 	.db #0x41	; 65	'A'
      0007A5 41                    2189 	.db #0x41	; 65	'A'
      0007A6 41                    2190 	.db #0x41	; 65	'A'
      0007A7 41                    2191 	.db #0x41	; 65	'A'
      0007A8                       2192 _sprite_arrow_0:
      0007A8 00                    2193 	.db #0x00	; 0
      0007A9 00                    2194 	.db #0x00	; 0
      0007AA 00                    2195 	.db #0x00	; 0
      0007AB 00                    2196 	.db #0x00	; 0
      0007AC 00                    2197 	.db #0x00	; 0
      0007AD 00                    2198 	.db #0x00	; 0
      0007AE 00                    2199 	.db #0x00	; 0
      0007AF 00                    2200 	.db #0x00	; 0
      0007B0                       2201 _sprite_arrow_1:
      0007B0 FF                    2202 	.db #0xff	; 255
      0007B1 00                    2203 	.db #0x00	; 0
      0007B2 3F                    2204 	.db #0x3f	; 63
      0007B3 00                    2205 	.db #0x00	; 0
      0007B4 0F                    2206 	.db #0x0f	; 15
      0007B5 00                    2207 	.db #0x00	; 0
      0007B6 03                    2208 	.db #0x03	; 3
      0007B7 00                    2209 	.db #0x00	; 0
      0007B8                       2210 _sprite_arrow_2:
      0007B8 00                    2211 	.db #0x00	; 0
      0007B9 00                    2212 	.db #0x00	; 0
      0007BA 00                    2213 	.db #0x00	; 0
      0007BB 00                    2214 	.db #0x00	; 0
      0007BC 00                    2215 	.db #0x00	; 0
      0007BD 00                    2216 	.db #0x00	; 0
      0007BE 00                    2217 	.db #0x00	; 0
      0007BF 00                    2218 	.db #0x00	; 0
      0007C0                       2219 _sprite_arrow_3:
      0007C0 FF                    2220 	.db #0xff	; 255
      0007C1 00                    2221 	.db #0x00	; 0
      0007C2 FC                    2222 	.db #0xfc	; 252
      0007C3 00                    2223 	.db #0x00	; 0
      0007C4 F0                    2224 	.db #0xf0	; 240
      0007C5 00                    2225 	.db #0x00	; 0
      0007C6 C0                    2226 	.db #0xc0	; 192
      0007C7 00                    2227 	.db #0x00	; 0
      0007C8                       2228 _sprite_hit_1:
      0007C8 00                    2229 	.db #0x00	; 0
      0007C9 77                    2230 	.db #0x77	; 119	'w'
      0007CA 22                    2231 	.db #0x22	; 34
      0007CB 22                    2232 	.db #0x22	; 34
      0007CC 22                    2233 	.db #0x22	; 34
      0007CD 3E                    2234 	.db #0x3e	; 62
      0007CE 22                    2235 	.db #0x22	; 34
      0007CF 22                    2236 	.db #0x22	; 34
      0007D0 22                    2237 	.db #0x22	; 34
      0007D1 77                    2238 	.db #0x77	; 119	'w'
      0007D2 00                    2239 	.db #0x00	; 0
      0007D3 00                    2240 	.db #0x00	; 0
      0007D4 00                    2241 	.db #0x00	; 0
      0007D5 00                    2242 	.db #0x00	; 0
      0007D6 00                    2243 	.db #0x00	; 0
      0007D7 00                    2244 	.db #0x00	; 0
      0007D8 00                    2245 	.db #0x00	; 0
      0007D9 77                    2246 	.db #0x77	; 119	'w'
      0007DA 25                    2247 	.db #0x25	; 37
      0007DB 21                    2248 	.db #0x21	; 33
      0007DC 21                    2249 	.db #0x21	; 33
      0007DD 21                    2250 	.db #0x21	; 33
      0007DE 21                    2251 	.db #0x21	; 33
      0007DF 21                    2252 	.db #0x21	; 33
      0007E0 21                    2253 	.db #0x21	; 33
      0007E1 73                    2254 	.db #0x73	; 115	's'
      0007E2 00                    2255 	.db #0x00	; 0
      0007E3 00                    2256 	.db #0x00	; 0
      0007E4 00                    2257 	.db #0x00	; 0
      0007E5 00                    2258 	.db #0x00	; 0
      0007E6 00                    2259 	.db #0x00	; 0
      0007E7 00                    2260 	.db #0x00	; 0
      0007E8                       2261 _sprite_hit_2:
      0007E8 00                    2262 	.db #0x00	; 0
      0007E9 C0                    2263 	.db #0xc0	; 192
      0007EA 40                    2264 	.db #0x40	; 64
      0007EB 00                    2265 	.db #0x00	; 0
      0007EC 00                    2266 	.db #0x00	; 0
      0007ED 00                    2267 	.db #0x00	; 0
      0007EE 00                    2268 	.db #0x00	; 0
      0007EF 00                    2269 	.db #0x00	; 0
      0007F0 00                    2270 	.db #0x00	; 0
      0007F1 80                    2271 	.db #0x80	; 128
      0007F2 00                    2272 	.db #0x00	; 0
      0007F3 00                    2273 	.db #0x00	; 0
      0007F4 00                    2274 	.db #0x00	; 0
      0007F5 00                    2275 	.db #0x00	; 0
      0007F6 00                    2276 	.db #0x00	; 0
      0007F7 00                    2277 	.db #0x00	; 0
      0007F8 00                    2278 	.db #0x00	; 0
      0007F9 00                    2279 	.db #0x00	; 0
      0007FA 00                    2280 	.db #0x00	; 0
      0007FB 00                    2281 	.db #0x00	; 0
      0007FC 00                    2282 	.db #0x00	; 0
      0007FD 00                    2283 	.db #0x00	; 0
      0007FE 00                    2284 	.db #0x00	; 0
      0007FF 00                    2285 	.db #0x00	; 0
      000800 00                    2286 	.db #0x00	; 0
      000801 00                    2287 	.db #0x00	; 0
      000802 00                    2288 	.db #0x00	; 0
      000803 00                    2289 	.db #0x00	; 0
      000804 00                    2290 	.db #0x00	; 0
      000805 00                    2291 	.db #0x00	; 0
      000806 00                    2292 	.db #0x00	; 0
      000807 00                    2293 	.db #0x00	; 0
      000808                       2294 _sprite_combo_1:
      000808 00                    2295 	.db #0x00	; 0
      000809 38                    2296 	.db #0x38	; 56	'8'
      00080A 65                    2297 	.db #0x65	; 101	'e'
      00080B 61                    2298 	.db #0x61	; 97	'a'
      00080C 61                    2299 	.db #0x61	; 97	'a'
      00080D 61                    2300 	.db #0x61	; 97	'a'
      00080E 61                    2301 	.db #0x61	; 97	'a'
      00080F 61                    2302 	.db #0x61	; 97	'a'
      000810 65                    2303 	.db #0x65	; 101	'e'
      000811 38                    2304 	.db #0x38	; 56	'8'
      000812 00                    2305 	.db #0x00	; 0
      000813 00                    2306 	.db #0x00	; 0
      000814 00                    2307 	.db #0x00	; 0
      000815 00                    2308 	.db #0x00	; 0
      000816 00                    2309 	.db #0x00	; 0
      000817 00                    2310 	.db #0x00	; 0
      000818 00                    2311 	.db #0x00	; 0
      000819 E6                    2312 	.db #0xe6	; 230
      00081A 13                    2313 	.db #0x13	; 19
      00081B 12                    2314 	.db #0x12	; 18
      00081C 12                    2315 	.db #0x12	; 18
      00081D 12                    2316 	.db #0x12	; 18
      00081E 12                    2317 	.db #0x12	; 18
      00081F 12                    2318 	.db #0x12	; 18
      000820 12                    2319 	.db #0x12	; 18
      000821 E7                    2320 	.db #0xe7	; 231
      000822 00                    2321 	.db #0x00	; 0
      000823 00                    2322 	.db #0x00	; 0
      000824 00                    2323 	.db #0x00	; 0
      000825 00                    2324 	.db #0x00	; 0
      000826 00                    2325 	.db #0x00	; 0
      000827 00                    2326 	.db #0x00	; 0
      000828                       2327 _sprite_combo_2:
      000828 00                    2328 	.db #0x00	; 0
      000829 37                    2329 	.db #0x37	; 55	'7'
      00082A 62                    2330 	.db #0x62	; 98	'b'
      00082B A2                    2331 	.db #0xa2	; 162
      00082C 22                    2332 	.db #0x22	; 34
      00082D 23                    2333 	.db #0x23	; 35
      00082E 22                    2334 	.db #0x22	; 34
      00082F 22                    2335 	.db #0x22	; 34
      000830 22                    2336 	.db #0x22	; 34
      000831 77                    2337 	.db #0x77	; 119	'w'
      000832 00                    2338 	.db #0x00	; 0
      000833 00                    2339 	.db #0x00	; 0
      000834 00                    2340 	.db #0x00	; 0
      000835 00                    2341 	.db #0x00	; 0
      000836 00                    2342 	.db #0x00	; 0
      000837 00                    2343 	.db #0x00	; 0
      000838 00                    2344 	.db #0x00	; 0
      000839 8E                    2345 	.db #0x8e	; 142
      00083A 51                    2346 	.db #0x51	; 81	'Q'
      00083B 51                    2347 	.db #0x51	; 81	'Q'
      00083C 51                    2348 	.db #0x51	; 81	'Q'
      00083D 91                    2349 	.db #0x91	; 145
      00083E 51                    2350 	.db #0x51	; 81	'Q'
      00083F 51                    2351 	.db #0x51	; 81	'Q'
      000840 51                    2352 	.db #0x51	; 81	'Q'
      000841 8E                    2353 	.db #0x8e	; 142
      000842 00                    2354 	.db #0x00	; 0
      000843 00                    2355 	.db #0x00	; 0
      000844 00                    2356 	.db #0x00	; 0
      000845 00                    2357 	.db #0x00	; 0
      000846 00                    2358 	.db #0x00	; 0
      000847 00                    2359 	.db #0x00	; 0
      000848                       2360 _sprite_2x:
      000848 00                    2361 	.db #0x00	; 0
      000849 3E                    2362 	.db #0x3e	; 62
      00084A 63                    2363 	.db #0x63	; 99	'c'
      00084B 03                    2364 	.db #0x03	; 3
      00084C 03                    2365 	.db #0x03	; 3
      00084D 1E                    2366 	.db #0x1e	; 30
      00084E 30                    2367 	.db #0x30	; 48	'0'
      00084F 60                    2368 	.db #0x60	; 96
      000850 60                    2369 	.db #0x60	; 96
      000851 7F                    2370 	.db #0x7f	; 127
      000852 00                    2371 	.db #0x00	; 0
      000853 00                    2372 	.db #0x00	; 0
      000854 00                    2373 	.db #0x00	; 0
      000855 00                    2374 	.db #0x00	; 0
      000856 00                    2375 	.db #0x00	; 0
      000857 00                    2376 	.db #0x00	; 0
      000858 00                    2377 	.db #0x00	; 0
      000859 00                    2378 	.db #0x00	; 0
      00085A 00                    2379 	.db #0x00	; 0
      00085B 63                    2380 	.db #0x63	; 99	'c'
      00085C 36                    2381 	.db #0x36	; 54	'6'
      00085D 1C                    2382 	.db #0x1c	; 28
      00085E 08                    2383 	.db #0x08	; 8
      00085F 1C                    2384 	.db #0x1c	; 28
      000860 36                    2385 	.db #0x36	; 54	'6'
      000861 63                    2386 	.db #0x63	; 99	'c'
      000862 00                    2387 	.db #0x00	; 0
      000863 00                    2388 	.db #0x00	; 0
      000864 00                    2389 	.db #0x00	; 0
      000865 00                    2390 	.db #0x00	; 0
      000866 00                    2391 	.db #0x00	; 0
      000867 00                    2392 	.db #0x00	; 0
      000868                       2393 _sprite_3x:
      000868 00                    2394 	.db #0x00	; 0
      000869 3E                    2395 	.db #0x3e	; 62
      00086A 63                    2396 	.db #0x63	; 99	'c'
      00086B 03                    2397 	.db #0x03	; 3
      00086C 03                    2398 	.db #0x03	; 3
      00086D 1E                    2399 	.db #0x1e	; 30
      00086E 03                    2400 	.db #0x03	; 3
      00086F 03                    2401 	.db #0x03	; 3
      000870 63                    2402 	.db #0x63	; 99	'c'
      000871 3E                    2403 	.db #0x3e	; 62
      000872 00                    2404 	.db #0x00	; 0
      000873 00                    2405 	.db #0x00	; 0
      000874 00                    2406 	.db #0x00	; 0
      000875 00                    2407 	.db #0x00	; 0
      000876 00                    2408 	.db #0x00	; 0
      000877 00                    2409 	.db #0x00	; 0
      000878 00                    2410 	.db #0x00	; 0
      000879 00                    2411 	.db #0x00	; 0
      00087A 00                    2412 	.db #0x00	; 0
      00087B 63                    2413 	.db #0x63	; 99	'c'
      00087C 36                    2414 	.db #0x36	; 54	'6'
      00087D 1C                    2415 	.db #0x1c	; 28
      00087E 08                    2416 	.db #0x08	; 8
      00087F 1C                    2417 	.db #0x1c	; 28
      000880 36                    2418 	.db #0x36	; 54	'6'
      000881 63                    2419 	.db #0x63	; 99	'c'
      000882 00                    2420 	.db #0x00	; 0
      000883 00                    2421 	.db #0x00	; 0
      000884 00                    2422 	.db #0x00	; 0
      000885 00                    2423 	.db #0x00	; 0
      000886 00                    2424 	.db #0x00	; 0
      000887 00                    2425 	.db #0x00	; 0
      000888                       2426 _sprite_4x:
      000888 00                    2427 	.db #0x00	; 0
      000889 02                    2428 	.db #0x02	; 2
      00088A 06                    2429 	.db #0x06	; 6
      00088B 0E                    2430 	.db #0x0e	; 14
      00088C 16                    2431 	.db #0x16	; 22
      00088D 26                    2432 	.db #0x26	; 38
      00088E 7F                    2433 	.db #0x7f	; 127
      00088F 06                    2434 	.db #0x06	; 6
      000890 06                    2435 	.db #0x06	; 6
      000891 0F                    2436 	.db #0x0f	; 15
      000892 00                    2437 	.db #0x00	; 0
      000893 00                    2438 	.db #0x00	; 0
      000894 00                    2439 	.db #0x00	; 0
      000895 00                    2440 	.db #0x00	; 0
      000896 00                    2441 	.db #0x00	; 0
      000897 00                    2442 	.db #0x00	; 0
      000898 00                    2443 	.db #0x00	; 0
      000899 00                    2444 	.db #0x00	; 0
      00089A 00                    2445 	.db #0x00	; 0
      00089B 63                    2446 	.db #0x63	; 99	'c'
      00089C 36                    2447 	.db #0x36	; 54	'6'
      00089D 1C                    2448 	.db #0x1c	; 28
      00089E 08                    2449 	.db #0x08	; 8
      00089F 1C                    2450 	.db #0x1c	; 28
      0008A0 36                    2451 	.db #0x36	; 54	'6'
      0008A1 63                    2452 	.db #0x63	; 99	'c'
      0008A2 00                    2453 	.db #0x00	; 0
      0008A3 00                    2454 	.db #0x00	; 0
      0008A4 00                    2455 	.db #0x00	; 0
      0008A5 00                    2456 	.db #0x00	; 0
      0008A6 00                    2457 	.db #0x00	; 0
      0008A7 00                    2458 	.db #0x00	; 0
      0008A8                       2459 _sprite_5x:
      0008A8 00                    2460 	.db #0x00	; 0
      0008A9 7E                    2461 	.db #0x7e	; 126
      0008AA 60                    2462 	.db #0x60	; 96
      0008AB 60                    2463 	.db #0x60	; 96
      0008AC 7E                    2464 	.db #0x7e	; 126
      0008AD 03                    2465 	.db #0x03	; 3
      0008AE 03                    2466 	.db #0x03	; 3
      0008AF 03                    2467 	.db #0x03	; 3
      0008B0 63                    2468 	.db #0x63	; 99	'c'
      0008B1 3E                    2469 	.db #0x3e	; 62
      0008B2 00                    2470 	.db #0x00	; 0
      0008B3 00                    2471 	.db #0x00	; 0
      0008B4 00                    2472 	.db #0x00	; 0
      0008B5 00                    2473 	.db #0x00	; 0
      0008B6 00                    2474 	.db #0x00	; 0
      0008B7 00                    2475 	.db #0x00	; 0
      0008B8 00                    2476 	.db #0x00	; 0
      0008B9 00                    2477 	.db #0x00	; 0
      0008BA 00                    2478 	.db #0x00	; 0
      0008BB 63                    2479 	.db #0x63	; 99	'c'
      0008BC 36                    2480 	.db #0x36	; 54	'6'
      0008BD 1C                    2481 	.db #0x1c	; 28
      0008BE 08                    2482 	.db #0x08	; 8
      0008BF 1C                    2483 	.db #0x1c	; 28
      0008C0 36                    2484 	.db #0x36	; 54	'6'
      0008C1 63                    2485 	.db #0x63	; 99	'c'
      0008C2 00                    2486 	.db #0x00	; 0
      0008C3 00                    2487 	.db #0x00	; 0
      0008C4 00                    2488 	.db #0x00	; 0
      0008C5 00                    2489 	.db #0x00	; 0
      0008C6 00                    2490 	.db #0x00	; 0
      0008C7 00                    2491 	.db #0x00	; 0
      0008C8                       2492 _sprite_6x:
      0008C8 00                    2493 	.db #0x00	; 0
      0008C9 3E                    2494 	.db #0x3e	; 62
      0008CA 61                    2495 	.db #0x61	; 97	'a'
      0008CB 60                    2496 	.db #0x60	; 96
      0008CC 7E                    2497 	.db #0x7e	; 126
      0008CD 63                    2498 	.db #0x63	; 99	'c'
      0008CE 63                    2499 	.db #0x63	; 99	'c'
      0008CF 63                    2500 	.db #0x63	; 99	'c'
      0008D0 63                    2501 	.db #0x63	; 99	'c'
      0008D1 3E                    2502 	.db #0x3e	; 62
      0008D2 00                    2503 	.db #0x00	; 0
      0008D3 00                    2504 	.db #0x00	; 0
      0008D4 00                    2505 	.db #0x00	; 0
      0008D5 00                    2506 	.db #0x00	; 0
      0008D6 00                    2507 	.db #0x00	; 0
      0008D7 00                    2508 	.db #0x00	; 0
      0008D8 00                    2509 	.db #0x00	; 0
      0008D9 00                    2510 	.db #0x00	; 0
      0008DA 00                    2511 	.db #0x00	; 0
      0008DB 63                    2512 	.db #0x63	; 99	'c'
      0008DC 36                    2513 	.db #0x36	; 54	'6'
      0008DD 1C                    2514 	.db #0x1c	; 28
      0008DE 08                    2515 	.db #0x08	; 8
      0008DF 1C                    2516 	.db #0x1c	; 28
      0008E0 36                    2517 	.db #0x36	; 54	'6'
      0008E1 63                    2518 	.db #0x63	; 99	'c'
      0008E2 00                    2519 	.db #0x00	; 0
      0008E3 00                    2520 	.db #0x00	; 0
      0008E4 00                    2521 	.db #0x00	; 0
      0008E5 00                    2522 	.db #0x00	; 0
      0008E6 00                    2523 	.db #0x00	; 0
      0008E7 00                    2524 	.db #0x00	; 0
      0008E8                       2525 _sprite_mega_hit:
      0008E8 04                    2526 	.db #0x04	; 4
      0008E9 06                    2527 	.db #0x06	; 6
      0008EA 05                    2528 	.db #0x05	; 5
      0008EB 04                    2529 	.db #0x04	; 4
      0008EC 04                    2530 	.db #0x04	; 4
      0008ED 00                    2531 	.db #0x00	; 0
      0008EE 03                    2532 	.db #0x03	; 3
      0008EF 04                    2533 	.db #0x04	; 4
      0008F0 05                    2534 	.db #0x05	; 5
      0008F1 04                    2535 	.db #0x04	; 4
      0008F2 03                    2536 	.db #0x03	; 3
      0008F3 00                    2537 	.db #0x00	; 0
      0008F4 00                    2538 	.db #0x00	; 0
      0008F5 00                    2539 	.db #0x00	; 0
      0008F6 00                    2540 	.db #0x00	; 0
      0008F7 00                    2541 	.db #0x00	; 0
      0008F8 5C                    2542 	.db #0x5c	; 92
      0008F9 D0                    2543 	.db #0xd0	; 208
      0008FA 5C                    2544 	.db #0x5c	; 92
      0008FB 50                    2545 	.db #0x50	; 80	'P'
      0008FC 5C                    2546 	.db #0x5c	; 92
      0008FD 00                    2547 	.db #0x00	; 0
      0008FE 98                    2548 	.db #0x98	; 152
      0008FF 24                    2549 	.db #0x24	; 36
      000900 A4                    2550 	.db #0xa4	; 164
      000901 BC                    2551 	.db #0xbc	; 188
      000902 A4                    2552 	.db #0xa4	; 164
      000903 00                    2553 	.db #0x00	; 0
      000904 00                    2554 	.db #0x00	; 0
      000905 00                    2555 	.db #0x00	; 0
      000906 00                    2556 	.db #0x00	; 0
      000907 00                    2557 	.db #0x00	; 0
      000908                       2558 _sprite_explosion_0:
      000908 00                    2559 	.db #0x00	; 0
      000909 00                    2560 	.db #0x00	; 0
      00090A 00                    2561 	.db #0x00	; 0
      00090B 00                    2562 	.db #0x00	; 0
      00090C 00                    2563 	.db #0x00	; 0
      00090D 00                    2564 	.db #0x00	; 0
      00090E 01                    2565 	.db #0x01	; 1
      00090F 02                    2566 	.db #0x02	; 2
      000910 01                    2567 	.db #0x01	; 1
      000911 00                    2568 	.db #0x00	; 0
      000912 00                    2569 	.db #0x00	; 0
      000913 00                    2570 	.db #0x00	; 0
      000914 00                    2571 	.db #0x00	; 0
      000915 00                    2572 	.db #0x00	; 0
      000916 00                    2573 	.db #0x00	; 0
      000917 00                    2574 	.db #0x00	; 0
      000918 00                    2575 	.db #0x00	; 0
      000919 00                    2576 	.db #0x00	; 0
      00091A 00                    2577 	.db #0x00	; 0
      00091B 00                    2578 	.db #0x00	; 0
      00091C 00                    2579 	.db #0x00	; 0
      00091D 00                    2580 	.db #0x00	; 0
      00091E 00                    2581 	.db #0x00	; 0
      00091F 80                    2582 	.db #0x80	; 128
      000920 00                    2583 	.db #0x00	; 0
      000921 00                    2584 	.db #0x00	; 0
      000922 00                    2585 	.db #0x00	; 0
      000923 00                    2586 	.db #0x00	; 0
      000924 00                    2587 	.db #0x00	; 0
      000925 00                    2588 	.db #0x00	; 0
      000926 00                    2589 	.db #0x00	; 0
      000927 00                    2590 	.db #0x00	; 0
      000928                       2591 _sprite_explosion_1:
      000928 00                    2592 	.db #0x00	; 0
      000929 00                    2593 	.db #0x00	; 0
      00092A 00                    2594 	.db #0x00	; 0
      00092B 00                    2595 	.db #0x00	; 0
      00092C 00                    2596 	.db #0x00	; 0
      00092D 01                    2597 	.db #0x01	; 1
      00092E 00                    2598 	.db #0x00	; 0
      00092F 04                    2599 	.db #0x04	; 4
      000930 00                    2600 	.db #0x00	; 0
      000931 01                    2601 	.db #0x01	; 1
      000932 00                    2602 	.db #0x00	; 0
      000933 00                    2603 	.db #0x00	; 0
      000934 00                    2604 	.db #0x00	; 0
      000935 00                    2605 	.db #0x00	; 0
      000936 00                    2606 	.db #0x00	; 0
      000937 00                    2607 	.db #0x00	; 0
      000938 00                    2608 	.db #0x00	; 0
      000939 00                    2609 	.db #0x00	; 0
      00093A 00                    2610 	.db #0x00	; 0
      00093B 00                    2611 	.db #0x00	; 0
      00093C 00                    2612 	.db #0x00	; 0
      00093D 00                    2613 	.db #0x00	; 0
      00093E 00                    2614 	.db #0x00	; 0
      00093F 40                    2615 	.db #0x40	; 64
      000940 00                    2616 	.db #0x00	; 0
      000941 00                    2617 	.db #0x00	; 0
      000942 00                    2618 	.db #0x00	; 0
      000943 00                    2619 	.db #0x00	; 0
      000944 00                    2620 	.db #0x00	; 0
      000945 00                    2621 	.db #0x00	; 0
      000946 00                    2622 	.db #0x00	; 0
      000947 00                    2623 	.db #0x00	; 0
      000948                       2624 _sprite_explosion_2:
      000948 00                    2625 	.db #0x00	; 0
      000949 00                    2626 	.db #0x00	; 0
      00094A 00                    2627 	.db #0x00	; 0
      00094B 00                    2628 	.db #0x00	; 0
      00094C 01                    2629 	.db #0x01	; 1
      00094D 04                    2630 	.db #0x04	; 4
      00094E 00                    2631 	.db #0x00	; 0
      00094F 08                    2632 	.db #0x08	; 8
      000950 00                    2633 	.db #0x00	; 0
      000951 04                    2634 	.db #0x04	; 4
      000952 01                    2635 	.db #0x01	; 1
      000953 00                    2636 	.db #0x00	; 0
      000954 00                    2637 	.db #0x00	; 0
      000955 00                    2638 	.db #0x00	; 0
      000956 00                    2639 	.db #0x00	; 0
      000957 00                    2640 	.db #0x00	; 0
      000958 00                    2641 	.db #0x00	; 0
      000959 00                    2642 	.db #0x00	; 0
      00095A 00                    2643 	.db #0x00	; 0
      00095B 00                    2644 	.db #0x00	; 0
      00095C 00                    2645 	.db #0x00	; 0
      00095D 40                    2646 	.db #0x40	; 64
      00095E 00                    2647 	.db #0x00	; 0
      00095F 20                    2648 	.db #0x20	; 32
      000960 00                    2649 	.db #0x00	; 0
      000961 40                    2650 	.db #0x40	; 64
      000962 00                    2651 	.db #0x00	; 0
      000963 00                    2652 	.db #0x00	; 0
      000964 00                    2653 	.db #0x00	; 0
      000965 00                    2654 	.db #0x00	; 0
      000966 00                    2655 	.db #0x00	; 0
      000967 00                    2656 	.db #0x00	; 0
      000968                       2657 _sprite_explosion_3:
      000968 00                    2658 	.db #0x00	; 0
      000969 00                    2659 	.db #0x00	; 0
      00096A 00                    2660 	.db #0x00	; 0
      00096B 01                    2661 	.db #0x01	; 1
      00096C 08                    2662 	.db #0x08	; 8
      00096D 00                    2663 	.db #0x00	; 0
      00096E 00                    2664 	.db #0x00	; 0
      00096F 10                    2665 	.db #0x10	; 16
      000970 00                    2666 	.db #0x00	; 0
      000971 00                    2667 	.db #0x00	; 0
      000972 08                    2668 	.db #0x08	; 8
      000973 01                    2669 	.db #0x01	; 1
      000974 00                    2670 	.db #0x00	; 0
      000975 00                    2671 	.db #0x00	; 0
      000976 00                    2672 	.db #0x00	; 0
      000977 00                    2673 	.db #0x00	; 0
      000978 00                    2674 	.db #0x00	; 0
      000979 00                    2675 	.db #0x00	; 0
      00097A 00                    2676 	.db #0x00	; 0
      00097B 00                    2677 	.db #0x00	; 0
      00097C 20                    2678 	.db #0x20	; 32
      00097D 00                    2679 	.db #0x00	; 0
      00097E 00                    2680 	.db #0x00	; 0
      00097F 10                    2681 	.db #0x10	; 16
      000980 00                    2682 	.db #0x00	; 0
      000981 00                    2683 	.db #0x00	; 0
      000982 20                    2684 	.db #0x20	; 32
      000983 00                    2685 	.db #0x00	; 0
      000984 00                    2686 	.db #0x00	; 0
      000985 00                    2687 	.db #0x00	; 0
      000986 00                    2688 	.db #0x00	; 0
      000987 00                    2689 	.db #0x00	; 0
      000988                       2690 _sprite_explosion_4:
      000988 00                    2691 	.db #0x00	; 0
      000989 00                    2692 	.db #0x00	; 0
      00098A 01                    2693 	.db #0x01	; 1
      00098B 10                    2694 	.db #0x10	; 16
      00098C 00                    2695 	.db #0x00	; 0
      00098D 00                    2696 	.db #0x00	; 0
      00098E 00                    2697 	.db #0x00	; 0
      00098F 20                    2698 	.db #0x20	; 32
      000990 00                    2699 	.db #0x00	; 0
      000991 00                    2700 	.db #0x00	; 0
      000992 00                    2701 	.db #0x00	; 0
      000993 10                    2702 	.db #0x10	; 16
      000994 01                    2703 	.db #0x01	; 1
      000995 00                    2704 	.db #0x00	; 0
      000996 00                    2705 	.db #0x00	; 0
      000997 00                    2706 	.db #0x00	; 0
      000998 00                    2707 	.db #0x00	; 0
      000999 00                    2708 	.db #0x00	; 0
      00099A 00                    2709 	.db #0x00	; 0
      00099B 10                    2710 	.db #0x10	; 16
      00099C 00                    2711 	.db #0x00	; 0
      00099D 00                    2712 	.db #0x00	; 0
      00099E 00                    2713 	.db #0x00	; 0
      00099F 08                    2714 	.db #0x08	; 8
      0009A0 00                    2715 	.db #0x00	; 0
      0009A1 00                    2716 	.db #0x00	; 0
      0009A2 00                    2717 	.db #0x00	; 0
      0009A3 10                    2718 	.db #0x10	; 16
      0009A4 00                    2719 	.db #0x00	; 0
      0009A5 00                    2720 	.db #0x00	; 0
      0009A6 00                    2721 	.db #0x00	; 0
      0009A7 00                    2722 	.db #0x00	; 0
      0009A8                       2723 _sprite_explosion_5:
      0009A8 01                    2724 	.db #0x01	; 1
      0009A9 00                    2725 	.db #0x00	; 0
      0009AA 20                    2726 	.db #0x20	; 32
      0009AB 00                    2727 	.db #0x00	; 0
      0009AC 00                    2728 	.db #0x00	; 0
      0009AD 00                    2729 	.db #0x00	; 0
      0009AE 00                    2730 	.db #0x00	; 0
      0009AF 80                    2731 	.db #0x80	; 128
      0009B0 00                    2732 	.db #0x00	; 0
      0009B1 00                    2733 	.db #0x00	; 0
      0009B2 00                    2734 	.db #0x00	; 0
      0009B3 00                    2735 	.db #0x00	; 0
      0009B4 20                    2736 	.db #0x20	; 32
      0009B5 00                    2737 	.db #0x00	; 0
      0009B6 01                    2738 	.db #0x01	; 1
      0009B7 00                    2739 	.db #0x00	; 0
      0009B8 00                    2740 	.db #0x00	; 0
      0009B9 00                    2741 	.db #0x00	; 0
      0009BA 08                    2742 	.db #0x08	; 8
      0009BB 00                    2743 	.db #0x00	; 0
      0009BC 00                    2744 	.db #0x00	; 0
      0009BD 00                    2745 	.db #0x00	; 0
      0009BE 00                    2746 	.db #0x00	; 0
      0009BF 02                    2747 	.db #0x02	; 2
      0009C0 00                    2748 	.db #0x00	; 0
      0009C1 00                    2749 	.db #0x00	; 0
      0009C2 00                    2750 	.db #0x00	; 0
      0009C3 00                    2751 	.db #0x00	; 0
      0009C4 08                    2752 	.db #0x08	; 8
      0009C5 00                    2753 	.db #0x00	; 0
      0009C6 00                    2754 	.db #0x00	; 0
      0009C7 00                    2755 	.db #0x00	; 0
      0009C8                       2756 _sprite_explosion_6:
      0009C8 00                    2757 	.db #0x00	; 0
      0009C9 01                    2758 	.db #0x01	; 1
      0009CA 00                    2759 	.db #0x00	; 0
      0009CB 20                    2760 	.db #0x20	; 32
      0009CC 00                    2761 	.db #0x00	; 0
      0009CD 00                    2762 	.db #0x00	; 0
      0009CE 00                    2763 	.db #0x00	; 0
      0009CF 00                    2764 	.db #0x00	; 0
      0009D0 80                    2765 	.db #0x80	; 128
      0009D1 00                    2766 	.db #0x00	; 0
      0009D2 00                    2767 	.db #0x00	; 0
      0009D3 00                    2768 	.db #0x00	; 0
      0009D4 00                    2769 	.db #0x00	; 0
      0009D5 20                    2770 	.db #0x20	; 32
      0009D6 00                    2771 	.db #0x00	; 0
      0009D7 01                    2772 	.db #0x01	; 1
      0009D8 00                    2773 	.db #0x00	; 0
      0009D9 00                    2774 	.db #0x00	; 0
      0009DA 00                    2775 	.db #0x00	; 0
      0009DB 08                    2776 	.db #0x08	; 8
      0009DC 00                    2777 	.db #0x00	; 0
      0009DD 00                    2778 	.db #0x00	; 0
      0009DE 00                    2779 	.db #0x00	; 0
      0009DF 00                    2780 	.db #0x00	; 0
      0009E0 02                    2781 	.db #0x02	; 2
      0009E1 00                    2782 	.db #0x00	; 0
      0009E2 00                    2783 	.db #0x00	; 0
      0009E3 00                    2784 	.db #0x00	; 0
      0009E4 00                    2785 	.db #0x00	; 0
      0009E5 08                    2786 	.db #0x08	; 8
      0009E6 00                    2787 	.db #0x00	; 0
      0009E7 00                    2788 	.db #0x00	; 0
      0009E8                       2789 _sprite_explosion_7:
      0009E8 00                    2790 	.db #0x00	; 0
      0009E9 00                    2791 	.db #0x00	; 0
      0009EA 01                    2792 	.db #0x01	; 1
      0009EB 00                    2793 	.db #0x00	; 0
      0009EC 20                    2794 	.db #0x20	; 32
      0009ED 00                    2795 	.db #0x00	; 0
      0009EE 00                    2796 	.db #0x00	; 0
      0009EF 00                    2797 	.db #0x00	; 0
      0009F0 00                    2798 	.db #0x00	; 0
      0009F1 80                    2799 	.db #0x80	; 128
      0009F2 00                    2800 	.db #0x00	; 0
      0009F3 00                    2801 	.db #0x00	; 0
      0009F4 00                    2802 	.db #0x00	; 0
      0009F5 00                    2803 	.db #0x00	; 0
      0009F6 20                    2804 	.db #0x20	; 32
      0009F7 00                    2805 	.db #0x00	; 0
      0009F8 00                    2806 	.db #0x00	; 0
      0009F9 00                    2807 	.db #0x00	; 0
      0009FA 00                    2808 	.db #0x00	; 0
      0009FB 00                    2809 	.db #0x00	; 0
      0009FC 08                    2810 	.db #0x08	; 8
      0009FD 00                    2811 	.db #0x00	; 0
      0009FE 00                    2812 	.db #0x00	; 0
      0009FF 00                    2813 	.db #0x00	; 0
      000A00 00                    2814 	.db #0x00	; 0
      000A01 02                    2815 	.db #0x02	; 2
      000A02 00                    2816 	.db #0x00	; 0
      000A03 00                    2817 	.db #0x00	; 0
      000A04 00                    2818 	.db #0x00	; 0
      000A05 00                    2819 	.db #0x00	; 0
      000A06 08                    2820 	.db #0x08	; 8
      000A07 00                    2821 	.db #0x00	; 0
                                   2822 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   2823 ;	---------------------------------
                                   2824 ; Function HideArrowSprite
                                   2825 ; ---------------------------------
      000A08                       2826 _HideArrowSprite::
                                   2827 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000A08 3E C0            [ 7] 2828 	ld	a, #0xc0
      000A0A F5               [11] 2829 	push	af
      000A0B 33               [ 6] 2830 	inc	sp
      000A0C 21 00 1B         [10] 2831 	ld	hl, #0x1b00
      000A0F E5               [11] 2832 	push	hl
      000A10 CDr00r00         [17] 2833 	call	_WRTVRM
      000A13 F1               [10] 2834 	pop	af
      000A14 33               [ 6] 2835 	inc	sp
                                   2836 ;src\/Graphics\SpritesLogic.h:36: }
      000A15 C9               [10] 2837 	ret
                                   2838 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   2839 ;	---------------------------------
                                   2840 ; Function DrawHitSprite
                                   2841 ; ---------------------------------
      000A16                       2842 _DrawHitSprite::
      000A16 DD E5            [15] 2843 	push	ix
      000A18 DD 21 00 00      [14] 2844 	ld	ix,#0
      000A1C DD 39            [15] 2845 	add	ix,sp
      000A1E 21 EC FF         [10] 2846 	ld	hl, #-20
      000A21 39               [11] 2847 	add	hl, sp
      000A22 F9               [ 6] 2848 	ld	sp, hl
                                   2849 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000A23 21 00 00         [10] 2850 	ld	hl, #0
      000A26 39               [11] 2851 	add	hl, sp
      000A27 EB               [ 4] 2852 	ex	de, hl
      000A28 3E 0F            [ 7] 2853 	ld	a, #0x0f
      000A2A 12               [ 7] 2854 	ld	(de), a
      000A2B 6B               [ 4] 2855 	ld	l, e
      000A2C 62               [ 4] 2856 	ld	h, d
      000A2D 23               [ 6] 2857 	inc	hl
      000A2E 36 0E            [10] 2858 	ld	(hl), #0x0e
      000A30 6B               [ 4] 2859 	ld	l, e
      000A31 62               [ 4] 2860 	ld	h, d
      000A32 23               [ 6] 2861 	inc	hl
      000A33 23               [ 6] 2862 	inc	hl
      000A34 36 09            [10] 2863 	ld	(hl), #0x09
      000A36 6B               [ 4] 2864 	ld	l, e
      000A37 62               [ 4] 2865 	ld	h, d
      000A38 23               [ 6] 2866 	inc	hl
      000A39 23               [ 6] 2867 	inc	hl
      000A3A 23               [ 6] 2868 	inc	hl
      000A3B 36 06            [10] 2869 	ld	(hl), #0x06
      000A3D 21 04 00         [10] 2870 	ld	hl, #0x0004
      000A40 19               [11] 2871 	add	hl, de
      000A41 36 06            [10] 2872 	ld	(hl), #0x06
      000A43 21 05 00         [10] 2873 	ld	hl, #0x0005
      000A46 19               [11] 2874 	add	hl, de
      000A47 36 09            [10] 2875 	ld	(hl), #0x09
      000A49 21 06 00         [10] 2876 	ld	hl, #0x0006
      000A4C 19               [11] 2877 	add	hl, de
      000A4D 36 0E            [10] 2878 	ld	(hl), #0x0e
      000A4F 21 07 00         [10] 2879 	ld	hl, #0x0007
      000A52 19               [11] 2880 	add	hl, de
      000A53 36 0F            [10] 2881 	ld	(hl), #0x0f
                                   2882 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000A55 21 08 00         [10] 2883 	ld	hl, #8
      000A58 39               [11] 2884 	add	hl, sp
      000A59 4D               [ 4] 2885 	ld	c, l
      000A5A 44               [ 4] 2886 	ld	b, h
      000A5B 36 0F            [10] 2887 	ld	(hl), #0x0f
      000A5D 69               [ 4] 2888 	ld	l, c
      000A5E 60               [ 4] 2889 	ld	h, b
      000A5F 23               [ 6] 2890 	inc	hl
      000A60 36 0E            [10] 2891 	ld	(hl), #0x0e
      000A62 69               [ 4] 2892 	ld	l, c
      000A63 60               [ 4] 2893 	ld	h, b
      000A64 23               [ 6] 2894 	inc	hl
      000A65 23               [ 6] 2895 	inc	hl
      000A66 36 03            [10] 2896 	ld	(hl), #0x03
      000A68 69               [ 4] 2897 	ld	l, c
      000A69 60               [ 4] 2898 	ld	h, b
      000A6A 23               [ 6] 2899 	inc	hl
      000A6B 23               [ 6] 2900 	inc	hl
      000A6C 23               [ 6] 2901 	inc	hl
      000A6D 36 0C            [10] 2902 	ld	(hl), #0x0c
      000A6F 21 04 00         [10] 2903 	ld	hl, #0x0004
      000A72 09               [11] 2904 	add	hl, bc
      000A73 36 0C            [10] 2905 	ld	(hl), #0x0c
      000A75 21 05 00         [10] 2906 	ld	hl, #0x0005
      000A78 09               [11] 2907 	add	hl, bc
      000A79 36 03            [10] 2908 	ld	(hl), #0x03
      000A7B 21 06 00         [10] 2909 	ld	hl, #0x0006
      000A7E 09               [11] 2910 	add	hl, bc
      000A7F 36 0E            [10] 2911 	ld	(hl), #0x0e
      000A81 21 07 00         [10] 2912 	ld	hl, #0x0007
      000A84 09               [11] 2913 	add	hl, bc
      000A85 36 0F            [10] 2914 	ld	(hl), #0x0f
                                   2915 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000A87 3A 9E FC         [13] 2916 	ld	a,(#_JIFFY + 0)
      000A8A E6 07            [ 7] 2917 	and	a, #0x07
                                   2918 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000A8C 6F               [ 4] 2919 	ld	l, a
      000A8D 83               [ 4] 2920 	add	a,e
      000A8E 5F               [ 4] 2921 	ld	e, a
      000A8F 30 01            [12] 2922 	jr	NC, 00124$
      000A91 14               [ 4] 2923 	inc	d
      000A92                       2924 00124$:
      000A92 1A               [ 7] 2925 	ld	a, (de)
      000A93 DD 77 FC         [19] 2926 	ld	-4 (ix), a
                                   2927 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000A96 26 00            [ 7] 2928 	ld	h, #0x00
      000A98 09               [11] 2929 	add	hl, bc
      000A99 7E               [ 7] 2930 	ld	a, (hl)
      000A9A DD 77 FD         [19] 2931 	ld	-3 (ix), a
                                   2932 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000A9D 3E 01            [ 7] 2933 	ld	a, #0x01
      000A9F DD 96 05         [19] 2934 	sub	a, 5 (ix)
      000AA2 3E 00            [ 7] 2935 	ld	a, #0x00
      000AA4 17               [ 4] 2936 	rla
      000AA5 DD 77 FE         [19] 2937 	ld	-2 (ix), a
                                   2938 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000AA8 DD 7E 08         [19] 2939 	ld	a, 8 (ix)
      000AAB B7               [ 4] 2940 	or	a, a
      000AAC CAr77r0B         [10] 2941 	jp	Z, 00104$
                                   2942 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000AAF DD 4E 06         [19] 2943 	ld	c, 6 (ix)
      000AB2 79               [ 4] 2944 	ld	a, c
      000AB3 C6 F8            [ 7] 2945 	add	a, #0xf8
      000AB5 DD 77 FF         [19] 2946 	ld	-1 (ix), a
      000AB8 C5               [11] 2947 	push	bc
      000AB9 F5               [11] 2948 	push	af
      000ABA 33               [ 6] 2949 	inc	sp
      000ABB 21 05 1B         [10] 2950 	ld	hl, #0x1b05
      000ABE E5               [11] 2951 	push	hl
      000ABF CDr00r00         [17] 2952 	call	_WRTVRM
      000AC2 F1               [10] 2953 	pop	af
      000AC3 33               [ 6] 2954 	inc	sp
      000AC4 C1               [10] 2955 	pop	bc
                                   2956 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000AC5 DD 7E 04         [19] 2957 	ld	a, 4 (ix)
      000AC8 C6 FD            [ 7] 2958 	add	a, #0xfd
      000ACA 87               [ 4] 2959 	add	a, a
      000ACB 87               [ 4] 2960 	add	a, a
      000ACC C6 18            [ 7] 2961 	add	a, #0x18
      000ACE C5               [11] 2962 	push	bc
      000ACF F5               [11] 2963 	push	af
      000AD0 33               [ 6] 2964 	inc	sp
      000AD1 21 06 1B         [10] 2965 	ld	hl, #0x1b06
      000AD4 E5               [11] 2966 	push	hl
      000AD5 CDr00r00         [17] 2967 	call	_WRTVRM
      000AD8 F1               [10] 2968 	pop	af
      000AD9 33               [ 6] 2969 	inc	sp
      000ADA C1               [10] 2970 	pop	bc
                                   2971 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000ADB 79               [ 4] 2972 	ld	a, c
      000ADC C6 08            [ 7] 2973 	add	a, #0x08
      000ADE 47               [ 4] 2974 	ld	b, a
      000ADF C5               [11] 2975 	push	bc
      000AE0 C5               [11] 2976 	push	bc
      000AE1 33               [ 6] 2977 	inc	sp
      000AE2 21 09 1B         [10] 2978 	ld	hl, #0x1b09
      000AE5 E5               [11] 2979 	push	hl
      000AE6 CDr00r00         [17] 2980 	call	_WRTVRM
      000AE9 F1               [10] 2981 	pop	af
      000AEA 33               [ 6] 2982 	inc	sp
      000AEB 3E 04            [ 7] 2983 	ld	a, #0x04
      000AED F5               [11] 2984 	push	af
      000AEE 33               [ 6] 2985 	inc	sp
      000AEF 21 0A 1B         [10] 2986 	ld	hl, #0x1b0a
      000AF2 E5               [11] 2987 	push	hl
      000AF3 CDr00r00         [17] 2988 	call	_WRTVRM
      000AF6 F1               [10] 2989 	pop	af
      000AF7 33               [ 6] 2990 	inc	sp
      000AF8 C1               [10] 2991 	pop	bc
                                   2992 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000AF9 79               [ 4] 2993 	ld	a, c
      000AFA C6 18            [ 7] 2994 	add	a, #0x18
      000AFC 4F               [ 4] 2995 	ld	c, a
      000AFD C5               [11] 2996 	push	bc
      000AFE 79               [ 4] 2997 	ld	a, c
      000AFF F5               [11] 2998 	push	af
      000B00 33               [ 6] 2999 	inc	sp
      000B01 21 0D 1B         [10] 3000 	ld	hl, #0x1b0d
      000B04 E5               [11] 3001 	push	hl
      000B05 CDr00r00         [17] 3002 	call	_WRTVRM
      000B08 F1               [10] 3003 	pop	af
      000B09 33               [ 6] 3004 	inc	sp
      000B0A 3E 08            [ 7] 3005 	ld	a, #0x08
      000B0C F5               [11] 3006 	push	af
      000B0D 33               [ 6] 3007 	inc	sp
      000B0E 21 0E 1B         [10] 3008 	ld	hl, #0x1b0e
      000B11 E5               [11] 3009 	push	hl
      000B12 CDr00r00         [17] 3010 	call	_WRTVRM
      000B15 F1               [10] 3011 	pop	af
      000B16 33               [ 6] 3012 	inc	sp
      000B17 C1               [10] 3013 	pop	bc
                                   3014 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B18 DD 7E FE         [19] 3015 	ld	a, -2 (ix)
      000B1B B7               [ 4] 3016 	or	a, a
      000B1C 28 59            [12] 3017 	jr	Z, 00104$
                                   3018 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000B1E C5               [11] 3019 	push	bc
      000B1F DD 7E FF         [19] 3020 	ld	a, -1 (ix)
      000B22 F5               [11] 3021 	push	af
      000B23 33               [ 6] 3022 	inc	sp
      000B24 21 11 1B         [10] 3023 	ld	hl, #0x1b11
      000B27 E5               [11] 3024 	push	hl
      000B28 CDr00r00         [17] 3025 	call	_WRTVRM
      000B2B F1               [10] 3026 	pop	af
      000B2C 33               [ 6] 3027 	inc	sp
      000B2D C1               [10] 3028 	pop	bc
                                   3029 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000B2E DD 7E 05         [19] 3030 	ld	a, 5 (ix)
      000B31 3D               [ 4] 3031 	dec	a
      000B32 3D               [ 4] 3032 	dec	a
      000B33 87               [ 4] 3033 	add	a, a
      000B34 87               [ 4] 3034 	add	a, a
      000B35 C6 14            [ 7] 3035 	add	a, #0x14
      000B37 C5               [11] 3036 	push	bc
      000B38 F5               [11] 3037 	push	af
      000B39 33               [ 6] 3038 	inc	sp
      000B3A 21 12 1B         [10] 3039 	ld	hl, #0x1b12
      000B3D E5               [11] 3040 	push	hl
      000B3E CDr00r00         [17] 3041 	call	_WRTVRM
      000B41 F1               [10] 3042 	pop	af
      000B42 33               [ 6] 3043 	inc	sp
      000B43 C1               [10] 3044 	pop	bc
                                   3045 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000B44 C5               [11] 3046 	push	bc
      000B45 C5               [11] 3047 	push	bc
      000B46 33               [ 6] 3048 	inc	sp
      000B47 21 15 1B         [10] 3049 	ld	hl, #0x1b15
      000B4A E5               [11] 3050 	push	hl
      000B4B CDr00r00         [17] 3051 	call	_WRTVRM
      000B4E F1               [10] 3052 	pop	af
      000B4F 33               [ 6] 3053 	inc	sp
      000B50 3E 0C            [ 7] 3054 	ld	a, #0x0c
      000B52 F5               [11] 3055 	push	af
      000B53 33               [ 6] 3056 	inc	sp
      000B54 21 16 1B         [10] 3057 	ld	hl, #0x1b16
      000B57 E5               [11] 3058 	push	hl
      000B58 CDr00r00         [17] 3059 	call	_WRTVRM
      000B5B F1               [10] 3060 	pop	af
      000B5C 33               [ 6] 3061 	inc	sp
      000B5D C1               [10] 3062 	pop	bc
                                   3063 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000B5E 79               [ 4] 3064 	ld	a, c
      000B5F F5               [11] 3065 	push	af
      000B60 33               [ 6] 3066 	inc	sp
      000B61 21 19 1B         [10] 3067 	ld	hl, #0x1b19
      000B64 E5               [11] 3068 	push	hl
      000B65 CDr00r00         [17] 3069 	call	_WRTVRM
      000B68 F1               [10] 3070 	pop	af
      000B69 33               [ 6] 3071 	inc	sp
                                   3072 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000B6A 3E 10            [ 7] 3073 	ld	a, #0x10
      000B6C F5               [11] 3074 	push	af
      000B6D 33               [ 6] 3075 	inc	sp
      000B6E 21 1A 1B         [10] 3076 	ld	hl, #0x1b1a
      000B71 E5               [11] 3077 	push	hl
      000B72 CDr00r00         [17] 3078 	call	_WRTVRM
      000B75 F1               [10] 3079 	pop	af
      000B76 33               [ 6] 3080 	inc	sp
      000B77                       3081 00104$:
                                   3082 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000B77 DD 7E 07         [19] 3083 	ld	a, 7 (ix)
      000B7A F5               [11] 3084 	push	af
      000B7B 33               [ 6] 3085 	inc	sp
      000B7C 21 04 1B         [10] 3086 	ld	hl, #0x1b04
      000B7F E5               [11] 3087 	push	hl
      000B80 CDr00r00         [17] 3088 	call	_WRTVRM
      000B83 F1               [10] 3089 	pop	af
      000B84 33               [ 6] 3090 	inc	sp
                                   3091 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000B85 DD 7E FC         [19] 3092 	ld	a, -4 (ix)
      000B88 F5               [11] 3093 	push	af
      000B89 33               [ 6] 3094 	inc	sp
      000B8A 21 07 1B         [10] 3095 	ld	hl, #0x1b07
      000B8D E5               [11] 3096 	push	hl
      000B8E CDr00r00         [17] 3097 	call	_WRTVRM
      000B91 F1               [10] 3098 	pop	af
      000B92 33               [ 6] 3099 	inc	sp
                                   3100 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000B93 DD 7E 07         [19] 3101 	ld	a, 7 (ix)
      000B96 F5               [11] 3102 	push	af
      000B97 33               [ 6] 3103 	inc	sp
      000B98 21 08 1B         [10] 3104 	ld	hl, #0x1b08
      000B9B E5               [11] 3105 	push	hl
      000B9C CDr00r00         [17] 3106 	call	_WRTVRM
      000B9F F1               [10] 3107 	pop	af
      000BA0 33               [ 6] 3108 	inc	sp
                                   3109 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000BA1 DD 7E FC         [19] 3110 	ld	a, -4 (ix)
      000BA4 F5               [11] 3111 	push	af
      000BA5 33               [ 6] 3112 	inc	sp
      000BA6 21 0B 1B         [10] 3113 	ld	hl, #0x1b0b
      000BA9 E5               [11] 3114 	push	hl
      000BAA CDr00r00         [17] 3115 	call	_WRTVRM
      000BAD F1               [10] 3116 	pop	af
      000BAE 33               [ 6] 3117 	inc	sp
                                   3118 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000BAF DD 7E 07         [19] 3119 	ld	a, 7 (ix)
      000BB2 F5               [11] 3120 	push	af
      000BB3 33               [ 6] 3121 	inc	sp
      000BB4 21 0C 1B         [10] 3122 	ld	hl, #0x1b0c
      000BB7 E5               [11] 3123 	push	hl
      000BB8 CDr00r00         [17] 3124 	call	_WRTVRM
      000BBB F1               [10] 3125 	pop	af
      000BBC 33               [ 6] 3126 	inc	sp
                                   3127 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000BBD DD 7E FC         [19] 3128 	ld	a, -4 (ix)
      000BC0 F5               [11] 3129 	push	af
      000BC1 33               [ 6] 3130 	inc	sp
      000BC2 21 0F 1B         [10] 3131 	ld	hl, #0x1b0f
      000BC5 E5               [11] 3132 	push	hl
      000BC6 CDr00r00         [17] 3133 	call	_WRTVRM
      000BC9 F1               [10] 3134 	pop	af
      000BCA 33               [ 6] 3135 	inc	sp
                                   3136 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000BCB DD 7E FE         [19] 3137 	ld	a, -2 (ix)
      000BCE B7               [ 4] 3138 	or	a, a
      000BCF 28 52            [12] 3139 	jr	Z, 00107$
                                   3140 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000BD1 DD 7E 07         [19] 3141 	ld	a, 7 (ix)
      000BD4 C6 10            [ 7] 3142 	add	a, #0x10
      000BD6 47               [ 4] 3143 	ld	b, a
      000BD7 C5               [11] 3144 	push	bc
      000BD8 C5               [11] 3145 	push	bc
      000BD9 33               [ 6] 3146 	inc	sp
      000BDA 21 10 1B         [10] 3147 	ld	hl, #0x1b10
      000BDD E5               [11] 3148 	push	hl
      000BDE CDr00r00         [17] 3149 	call	_WRTVRM
      000BE1 F1               [10] 3150 	pop	af
      000BE2 33               [ 6] 3151 	inc	sp
      000BE3 DD 7E FD         [19] 3152 	ld	a, -3 (ix)
      000BE6 F5               [11] 3153 	push	af
      000BE7 33               [ 6] 3154 	inc	sp
      000BE8 21 13 1B         [10] 3155 	ld	hl, #0x1b13
      000BEB E5               [11] 3156 	push	hl
      000BEC CDr00r00         [17] 3157 	call	_WRTVRM
      000BEF F1               [10] 3158 	pop	af
      000BF0 33               [ 6] 3159 	inc	sp
      000BF1 C1               [10] 3160 	pop	bc
                                   3161 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000BF2 C5               [11] 3162 	push	bc
      000BF3 C5               [11] 3163 	push	bc
      000BF4 33               [ 6] 3164 	inc	sp
      000BF5 21 14 1B         [10] 3165 	ld	hl, #0x1b14
      000BF8 E5               [11] 3166 	push	hl
      000BF9 CDr00r00         [17] 3167 	call	_WRTVRM
      000BFC F1               [10] 3168 	pop	af
      000BFD 33               [ 6] 3169 	inc	sp
      000BFE DD 7E FD         [19] 3170 	ld	a, -3 (ix)
      000C01 F5               [11] 3171 	push	af
      000C02 33               [ 6] 3172 	inc	sp
      000C03 21 17 1B         [10] 3173 	ld	hl, #0x1b17
      000C06 E5               [11] 3174 	push	hl
      000C07 CDr00r00         [17] 3175 	call	_WRTVRM
      000C0A F1               [10] 3176 	pop	af
      000C0B 33               [ 6] 3177 	inc	sp
      000C0C 33               [ 6] 3178 	inc	sp
      000C0D 21 18 1B         [10] 3179 	ld	hl, #0x1b18
      000C10 E5               [11] 3180 	push	hl
      000C11 CDr00r00         [17] 3181 	call	_WRTVRM
      000C14 F1               [10] 3182 	pop	af
      000C15 33               [ 6] 3183 	inc	sp
                                   3184 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000C16 DD 7E FD         [19] 3185 	ld	a, -3 (ix)
      000C19 F5               [11] 3186 	push	af
      000C1A 33               [ 6] 3187 	inc	sp
      000C1B 21 1B 1B         [10] 3188 	ld	hl, #0x1b1b
      000C1E E5               [11] 3189 	push	hl
      000C1F CDr00r00         [17] 3190 	call	_WRTVRM
      000C22 F1               [10] 3191 	pop	af
      000C23                       3192 00107$:
                                   3193 ;src\/Graphics\SpritesLogic.h:119: }
      000C23 DD F9            [10] 3194 	ld	sp, ix
      000C25 DD E1            [14] 3195 	pop	ix
      000C27 C9               [10] 3196 	ret
                                   3197 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3198 ;	---------------------------------
                                   3199 ; Function HideHitSprite
                                   3200 ; ---------------------------------
      000C28                       3201 _HideHitSprite::
                                   3202 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000C28 3E C0            [ 7] 3203 	ld	a, #0xc0
      000C2A F5               [11] 3204 	push	af
      000C2B 33               [ 6] 3205 	inc	sp
      000C2C 21 04 1B         [10] 3206 	ld	hl, #0x1b04
      000C2F E5               [11] 3207 	push	hl
      000C30 CDr00r00         [17] 3208 	call	_WRTVRM
      000C33 F1               [10] 3209 	pop	af
      000C34 33               [ 6] 3210 	inc	sp
                                   3211 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000C35 3E C0            [ 7] 3212 	ld	a, #0xc0
      000C37 F5               [11] 3213 	push	af
      000C38 33               [ 6] 3214 	inc	sp
      000C39 21 08 1B         [10] 3215 	ld	hl, #0x1b08
      000C3C E5               [11] 3216 	push	hl
      000C3D CDr00r00         [17] 3217 	call	_WRTVRM
      000C40 F1               [10] 3218 	pop	af
      000C41 33               [ 6] 3219 	inc	sp
                                   3220 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000C42 3E C0            [ 7] 3221 	ld	a, #0xc0
      000C44 F5               [11] 3222 	push	af
      000C45 33               [ 6] 3223 	inc	sp
      000C46 21 0C 1B         [10] 3224 	ld	hl, #0x1b0c
      000C49 E5               [11] 3225 	push	hl
      000C4A CDr00r00         [17] 3226 	call	_WRTVRM
      000C4D F1               [10] 3227 	pop	af
      000C4E 33               [ 6] 3228 	inc	sp
                                   3229 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000C4F 3E C0            [ 7] 3230 	ld	a, #0xc0
      000C51 F5               [11] 3231 	push	af
      000C52 33               [ 6] 3232 	inc	sp
      000C53 21 10 1B         [10] 3233 	ld	hl, #0x1b10
      000C56 E5               [11] 3234 	push	hl
      000C57 CDr00r00         [17] 3235 	call	_WRTVRM
      000C5A F1               [10] 3236 	pop	af
      000C5B 33               [ 6] 3237 	inc	sp
                                   3238 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000C5C 3E C0            [ 7] 3239 	ld	a, #0xc0
      000C5E F5               [11] 3240 	push	af
      000C5F 33               [ 6] 3241 	inc	sp
      000C60 21 14 1B         [10] 3242 	ld	hl, #0x1b14
      000C63 E5               [11] 3243 	push	hl
      000C64 CDr00r00         [17] 3244 	call	_WRTVRM
      000C67 F1               [10] 3245 	pop	af
      000C68 33               [ 6] 3246 	inc	sp
                                   3247 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000C69 3E C0            [ 7] 3248 	ld	a, #0xc0
      000C6B F5               [11] 3249 	push	af
      000C6C 33               [ 6] 3250 	inc	sp
      000C6D 21 18 1B         [10] 3251 	ld	hl, #0x1b18
      000C70 E5               [11] 3252 	push	hl
      000C71 CDr00r00         [17] 3253 	call	_WRTVRM
      000C74 F1               [10] 3254 	pop	af
      000C75 33               [ 6] 3255 	inc	sp
                                   3256 ;src\/Graphics\SpritesLogic.h:131: }
      000C76 C9               [10] 3257 	ret
                                   3258 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3259 ;	---------------------------------
                                   3260 ; Function HideExplosionSprite
                                   3261 ; ---------------------------------
      000C77                       3262 _HideExplosionSprite::
                                   3263 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000C77 3E C0            [ 7] 3264 	ld	a, #0xc0
      000C79 F5               [11] 3265 	push	af
      000C7A 33               [ 6] 3266 	inc	sp
      000C7B 21 1C 1B         [10] 3267 	ld	hl, #0x1b1c
      000C7E E5               [11] 3268 	push	hl
      000C7F CDr00r00         [17] 3269 	call	_WRTVRM
      000C82 F1               [10] 3270 	pop	af
      000C83 33               [ 6] 3271 	inc	sp
                                   3272 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000C84 3E C0            [ 7] 3273 	ld	a, #0xc0
      000C86 F5               [11] 3274 	push	af
      000C87 33               [ 6] 3275 	inc	sp
      000C88 21 20 1B         [10] 3276 	ld	hl, #0x1b20
      000C8B E5               [11] 3277 	push	hl
      000C8C CDr00r00         [17] 3278 	call	_WRTVRM
      000C8F F1               [10] 3279 	pop	af
      000C90 33               [ 6] 3280 	inc	sp
                                   3281 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000C91 3E C0            [ 7] 3282 	ld	a, #0xc0
      000C93 F5               [11] 3283 	push	af
      000C94 33               [ 6] 3284 	inc	sp
      000C95 21 24 1B         [10] 3285 	ld	hl, #0x1b24
      000C98 E5               [11] 3286 	push	hl
      000C99 CDr00r00         [17] 3287 	call	_WRTVRM
      000C9C F1               [10] 3288 	pop	af
      000C9D 33               [ 6] 3289 	inc	sp
                                   3290 ;src\/Graphics\SpritesLogic.h:137: }
      000C9E C9               [10] 3291 	ret
                                   3292 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3293 ;	---------------------------------
                                   3294 ; Function DrawExplosionSprite
                                   3295 ; ---------------------------------
      000C9F                       3296 _DrawExplosionSprite::
      000C9F 3B               [ 6] 3297 	dec	sp
                                   3298 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000CA0 FD 21 05 00      [14] 3299 	ld	iy, #5
      000CA4 FD 39            [15] 3300 	add	iy, sp
      000CA6 FD 6E 00         [19] 3301 	ld	l, 0 (iy)
      000CA9 CB 3D            [ 8] 3302 	srl	l
      000CAB CB 3D            [ 8] 3303 	srl	l
                                   3304 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000CAD 3E 07            [ 7] 3305 	ld	a, #0x07
      000CAF 95               [ 4] 3306 	sub	a, l
      000CB0 30 07            [12] 3307 	jr	NC, 00102$
                                   3308 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000CB2 33               [ 6] 3309 	inc	sp
      000CB3 C3r77r0C         [10] 3310 	jp	_HideExplosionSprite
      000CB6 C3r85r0D         [10] 3311 	jp	00104$
      000CB9                       3312 00102$:
                                   3313 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000CB9 29               [11] 3314 	add	hl, hl
      000CBA 29               [11] 3315 	add	hl, hl
                                   3316 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000CBB FD 21 04 00      [14] 3317 	ld	iy, #4
      000CBF FD 39            [15] 3318 	add	iy, sp
      000CC1 FD 7E 00         [19] 3319 	ld	a, 0 (iy)
      000CC4 C6 F0            [ 7] 3320 	add	a, #0xf0
      000CC6 67               [ 4] 3321 	ld	h, a
      000CC7 E5               [11] 3322 	push	hl
      000CC8 E5               [11] 3323 	push	hl
      000CC9 33               [ 6] 3324 	inc	sp
      000CCA 11 1C 1B         [10] 3325 	ld	de, #0x1b1c
      000CCD D5               [11] 3326 	push	de
      000CCE CDr00r00         [17] 3327 	call	_WRTVRM
      000CD1 F1               [10] 3328 	pop	af
      000CD2 33               [ 6] 3329 	inc	sp
      000CD3 21 05 00         [10] 3330 	ld	hl, #5
      000CD6 39               [11] 3331 	add	hl, sp
      000CD7 7E               [ 7] 3332 	ld	a, (hl)
      000CD8 F5               [11] 3333 	push	af
      000CD9 33               [ 6] 3334 	inc	sp
      000CDA 11 1D 1B         [10] 3335 	ld	de, #0x1b1d
      000CDD D5               [11] 3336 	push	de
      000CDE CDr00r00         [17] 3337 	call	_WRTVRM
      000CE1 F1               [10] 3338 	pop	af
      000CE2 33               [ 6] 3339 	inc	sp
      000CE3 E1               [10] 3340 	pop	hl
                                   3341 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000CE4 7D               [ 4] 3342 	ld	a, l
      000CE5 C6 2C            [ 7] 3343 	add	a, #0x2c
      000CE7 FD 21 00 00      [14] 3344 	ld	iy, #0
      000CEB FD 39            [15] 3345 	add	iy, sp
      000CED FD 77 00         [19] 3346 	ld	0 (iy), a
      000CF0 E5               [11] 3347 	push	hl
      000CF1 F5               [11] 3348 	push	af
      000CF2 33               [ 6] 3349 	inc	sp
      000CF3 11 1E 1B         [10] 3350 	ld	de, #0x1b1e
      000CF6 D5               [11] 3351 	push	de
      000CF7 CDr00r00         [17] 3352 	call	_WRTVRM
      000CFA F1               [10] 3353 	pop	af
      000CFB 33               [ 6] 3354 	inc	sp
      000CFC 3E 0F            [ 7] 3355 	ld	a, #0x0f
      000CFE F5               [11] 3356 	push	af
      000CFF 33               [ 6] 3357 	inc	sp
      000D00 11 1F 1B         [10] 3358 	ld	de, #0x1b1f
      000D03 D5               [11] 3359 	push	de
      000D04 CDr00r00         [17] 3360 	call	_WRTVRM
      000D07 F1               [10] 3361 	pop	af
      000D08 33               [ 6] 3362 	inc	sp
      000D09 E1               [10] 3363 	pop	hl
                                   3364 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000D0A E5               [11] 3365 	push	hl
      000D0B E5               [11] 3366 	push	hl
      000D0C 33               [ 6] 3367 	inc	sp
      000D0D 11 20 1B         [10] 3368 	ld	de, #0x1b20
      000D10 D5               [11] 3369 	push	de
      000D11 CDr00r00         [17] 3370 	call	_WRTVRM
      000D14 F1               [10] 3371 	pop	af
      000D15 33               [ 6] 3372 	inc	sp
      000D16 E1               [10] 3373 	pop	hl
                                   3374 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000D17 FD 21 03 00      [14] 3375 	ld	iy, #3
      000D1B FD 39            [15] 3376 	add	iy, sp
      000D1D FD 6E 00         [19] 3377 	ld	l, 0 (iy)
      000D20 7D               [ 4] 3378 	ld	a, l
      000D21 C6 10            [ 7] 3379 	add	a, #0x10
      000D23 E5               [11] 3380 	push	hl
      000D24 F5               [11] 3381 	push	af
      000D25 33               [ 6] 3382 	inc	sp
      000D26 11 21 1B         [10] 3383 	ld	de, #0x1b21
      000D29 D5               [11] 3384 	push	de
      000D2A CDr00r00         [17] 3385 	call	_WRTVRM
      000D2D F1               [10] 3386 	pop	af
      000D2E 33               [ 6] 3387 	inc	sp
      000D2F 21 02 00         [10] 3388 	ld	hl, #2
      000D32 39               [11] 3389 	add	hl, sp
      000D33 7E               [ 7] 3390 	ld	a, (hl)
      000D34 F5               [11] 3391 	push	af
      000D35 33               [ 6] 3392 	inc	sp
      000D36 11 22 1B         [10] 3393 	ld	de, #0x1b22
      000D39 D5               [11] 3394 	push	de
      000D3A CDr00r00         [17] 3395 	call	_WRTVRM
      000D3D F1               [10] 3396 	pop	af
      000D3E 33               [ 6] 3397 	inc	sp
      000D3F 3E 0A            [ 7] 3398 	ld	a, #0x0a
      000D41 F5               [11] 3399 	push	af
      000D42 33               [ 6] 3400 	inc	sp
      000D43 11 23 1B         [10] 3401 	ld	de, #0x1b23
      000D46 D5               [11] 3402 	push	de
      000D47 CDr00r00         [17] 3403 	call	_WRTVRM
      000D4A F1               [10] 3404 	pop	af
      000D4B 33               [ 6] 3405 	inc	sp
      000D4C E1               [10] 3406 	pop	hl
                                   3407 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000D4D E5               [11] 3408 	push	hl
      000D4E E5               [11] 3409 	push	hl
      000D4F 33               [ 6] 3410 	inc	sp
      000D50 11 24 1B         [10] 3411 	ld	de, #0x1b24
      000D53 D5               [11] 3412 	push	de
      000D54 CDr00r00         [17] 3413 	call	_WRTVRM
      000D57 F1               [10] 3414 	pop	af
      000D58 33               [ 6] 3415 	inc	sp
      000D59 E1               [10] 3416 	pop	hl
                                   3417 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000D5A 7D               [ 4] 3418 	ld	a, l
      000D5B C6 20            [ 7] 3419 	add	a, #0x20
      000D5D F5               [11] 3420 	push	af
      000D5E 33               [ 6] 3421 	inc	sp
      000D5F 21 25 1B         [10] 3422 	ld	hl, #0x1b25
      000D62 E5               [11] 3423 	push	hl
      000D63 CDr00r00         [17] 3424 	call	_WRTVRM
      000D66 F1               [10] 3425 	pop	af
      000D67 33               [ 6] 3426 	inc	sp
                                   3427 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000D68 21 00 00         [10] 3428 	ld	hl, #0
      000D6B 39               [11] 3429 	add	hl, sp
      000D6C 7E               [ 7] 3430 	ld	a, (hl)
      000D6D F5               [11] 3431 	push	af
      000D6E 33               [ 6] 3432 	inc	sp
      000D6F 21 26 1B         [10] 3433 	ld	hl, #0x1b26
      000D72 E5               [11] 3434 	push	hl
      000D73 CDr00r00         [17] 3435 	call	_WRTVRM
      000D76 F1               [10] 3436 	pop	af
      000D77 33               [ 6] 3437 	inc	sp
                                   3438 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000D78 3E 03            [ 7] 3439 	ld	a, #0x03
      000D7A F5               [11] 3440 	push	af
      000D7B 33               [ 6] 3441 	inc	sp
      000D7C 21 27 1B         [10] 3442 	ld	hl, #0x1b27
      000D7F E5               [11] 3443 	push	hl
      000D80 CDr00r00         [17] 3444 	call	_WRTVRM
      000D83 F1               [10] 3445 	pop	af
      000D84 33               [ 6] 3446 	inc	sp
      000D85                       3447 00104$:
                                   3448 ;src\/Graphics\SpritesLogic.h:164: }
      000D85 33               [ 6] 3449 	inc	sp
      000D86 C9               [10] 3450 	ret
                                   3451 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3452 ;	---------------------------------
                                   3453 ; Function DrawChar
                                   3454 ; ---------------------------------
      000D87                       3455 _DrawChar::
      000D87 DD E5            [15] 3456 	push	ix
      000D89 DD 21 00 00      [14] 3457 	ld	ix,#0
      000D8D DD 39            [15] 3458 	add	ix,sp
                                   3459 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000D8F DD 6E 06         [19] 3460 	ld	l, 6 (ix)
      000D92 26 00            [ 7] 3461 	ld	h, #0x00
      000D94 29               [11] 3462 	add	hl, hl
      000D95 29               [11] 3463 	add	hl, hl
      000D96 29               [11] 3464 	add	hl, hl
      000D97 29               [11] 3465 	add	hl, hl
      000D98 29               [11] 3466 	add	hl, hl
      000D99 01 00 18         [10] 3467 	ld	bc, #0x1800
      000D9C 09               [11] 3468 	add	hl, bc
      000D9D DD 4E 05         [19] 3469 	ld	c, 5 (ix)
      000DA0 06 00            [ 7] 3470 	ld	b, #0x00
      000DA2 09               [11] 3471 	add	hl, bc
      000DA3 DD 7E 04         [19] 3472 	ld	a, 4 (ix)
      000DA6 F5               [11] 3473 	push	af
      000DA7 33               [ 6] 3474 	inc	sp
      000DA8 E5               [11] 3475 	push	hl
      000DA9 CDr00r00         [17] 3476 	call	_WRTVRM
      000DAC F1               [10] 3477 	pop	af
      000DAD 33               [ 6] 3478 	inc	sp
                                   3479 ;src\/Graphics\Graphics.h:3: }
      000DAE DD E1            [14] 3480 	pop	ix
      000DB0 C9               [10] 3481 	ret
                                   3482 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3483 ;	---------------------------------
                                   3484 ; Function DrawString
                                   3485 ; ---------------------------------
      000DB1                       3486 _DrawString::
      000DB1 DD E5            [15] 3487 	push	ix
      000DB3 DD 21 00 00      [14] 3488 	ld	ix,#0
      000DB7 DD 39            [15] 3489 	add	ix,sp
                                   3490 ;src\/Graphics\Graphics.h:6: while (*str) {
      000DB9 DD 6E 06         [19] 3491 	ld	l, 6 (ix)
      000DBC DD 4E 04         [19] 3492 	ld	c, 4 (ix)
      000DBF DD 46 05         [19] 3493 	ld	b, 5 (ix)
      000DC2                       3494 00101$:
      000DC2 0A               [ 7] 3495 	ld	a, (bc)
      000DC3 B7               [ 4] 3496 	or	a, a
      000DC4 28 1A            [12] 3497 	jr	Z, 00104$
                                   3498 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000DC6 55               [ 4] 3499 	ld	d, l
      000DC7 2C               [ 4] 3500 	inc	l
      000DC8 DD 75 06         [19] 3501 	ld	6 (ix), l
      000DCB 03               [ 6] 3502 	inc	bc
      000DCC C6 0F            [ 7] 3503 	add	a, #0x0f
      000DCE E5               [11] 3504 	push	hl
      000DCF C5               [11] 3505 	push	bc
      000DD0 DD 66 07         [19] 3506 	ld	h, 7 (ix)
      000DD3 6A               [ 4] 3507 	ld	l, d
      000DD4 E5               [11] 3508 	push	hl
      000DD5 F5               [11] 3509 	push	af
      000DD6 33               [ 6] 3510 	inc	sp
      000DD7 CDr87r0D         [17] 3511 	call	_DrawChar
      000DDA F1               [10] 3512 	pop	af
      000DDB 33               [ 6] 3513 	inc	sp
      000DDC C1               [10] 3514 	pop	bc
      000DDD E1               [10] 3515 	pop	hl
      000DDE 18 E2            [12] 3516 	jr	00101$
      000DE0                       3517 00104$:
                                   3518 ;src\/Graphics\Graphics.h:9: }
      000DE0 DD E1            [14] 3519 	pop	ix
      000DE2 C9               [10] 3520 	ret
                                   3521 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3522 ;	---------------------------------
                                   3523 ; Function DrawNumber
                                   3524 ; ---------------------------------
      000DE3                       3525 _DrawNumber::
      000DE3 DD E5            [15] 3526 	push	ix
      000DE5 DD 21 00 00      [14] 3527 	ld	ix,#0
      000DE9 DD 39            [15] 3528 	add	ix,sp
      000DEB 21 FA FF         [10] 3529 	ld	hl, #-6
      000DEE 39               [11] 3530 	add	hl, sp
      000DEF F9               [ 6] 3531 	ld	sp, hl
                                   3532 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000DF0 DD 36 FA 01      [19] 3533 	ld	-6 (ix), #0x01
                                   3534 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000DF4 DD 66 07         [19] 3535 	ld	h, 7 (ix)
      000DF7 DD 6E 06         [19] 3536 	ld	l, 6 (ix)
      000DFA E5               [11] 3537 	push	hl
      000DFB 21r97r0E         [10] 3538 	ld	hl, #___str_0
      000DFE E5               [11] 3539 	push	hl
      000DFF CDrB1r0D         [17] 3540 	call	_DrawString
      000E02 F1               [10] 3541 	pop	af
      000E03 F1               [10] 3542 	pop	af
                                   3543 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E04 DD 7E 06         [19] 3544 	ld	a, 6 (ix)
      000E07 DD 77 FF         [19] 3545 	ld	-1 (ix), a
      000E0A 1E 06            [ 7] 3546 	ld	e, #0x06
      000E0C                       3547 00109$:
      000E0C 7B               [ 4] 3548 	ld	a, e
      000E0D B7               [ 4] 3549 	or	a, a
      000E0E CAr92r0E         [10] 3550 	jp	Z, 00111$
                                   3551 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000E11 7B               [ 4] 3552 	ld	a, e
      000E12 3D               [ 4] 3553 	dec	a
      000E13 D5               [11] 3554 	push	de
      000E14 57               [ 4] 3555 	ld	d,a
      000E15 1E 0A            [ 7] 3556 	ld	e,#0x0a
      000E17 D5               [11] 3557 	push	de
      000E18 CDr1Dr00         [17] 3558 	call	_Power
      000E1B F1               [10] 3559 	pop	af
      000E1C D1               [10] 3560 	pop	de
      000E1D DD 75 FB         [19] 3561 	ld	-5 (ix), l
      000E20 DD 74 FC         [19] 3562 	ld	-4 (ix), h
                                   3563 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000E23 D5               [11] 3564 	push	de
      000E24 DD 6E FB         [19] 3565 	ld	l, -5 (ix)
      000E27 DD 66 FC         [19] 3566 	ld	h, -4 (ix)
      000E2A E5               [11] 3567 	push	hl
      000E2B DD 6E 04         [19] 3568 	ld	l, 4 (ix)
      000E2E DD 66 05         [19] 3569 	ld	h, 5 (ix)
      000E31 E5               [11] 3570 	push	hl
      000E32 CDr00r00         [17] 3571 	call	__divuint
      000E35 F1               [10] 3572 	pop	af
      000E36 F1               [10] 3573 	pop	af
      000E37 DD 75 FD         [19] 3574 	ld	-3 (ix), l
      000E3A DD 74 FE         [19] 3575 	ld	-2 (ix), h
      000E3D D1               [10] 3576 	pop	de
      000E3E DD 7E FA         [19] 3577 	ld	a, -6 (ix)
      000E41 B7               [ 4] 3578 	or	a, a
      000E42 28 0C            [12] 3579 	jr	Z, 00102$
      000E44 DD 7E FE         [19] 3580 	ld	a, -2 (ix)
      000E47 DD B6 FD         [19] 3581 	or	a, -3 (ix)
      000E4A 28 04            [12] 3582 	jr	Z, 00102$
      000E4C DD 36 FA 00      [19] 3583 	ld	-6 (ix), #0
      000E50                       3584 00102$:
                                   3585 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000E50 DD 7E FA         [19] 3586 	ld	a, -6 (ix)
      000E53 B7               [ 4] 3587 	or	a, a
      000E54 28 04            [12] 3588 	jr	Z, 00104$
      000E56 7B               [ 4] 3589 	ld	a, e
      000E57 3D               [ 4] 3590 	dec	a
      000E58 20 31            [12] 3591 	jr	NZ, 00105$
      000E5A                       3592 00104$:
                                   3593 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000E5A DD 7E FD         [19] 3594 	ld	a, -3 (ix)
      000E5D C6 3F            [ 7] 3595 	add	a, #0x3f
      000E5F D5               [11] 3596 	push	de
      000E60 DD 66 07         [19] 3597 	ld	h, 7 (ix)
      000E63 E5               [11] 3598 	push	hl
      000E64 33               [ 6] 3599 	inc	sp
      000E65 DD 66 FF         [19] 3600 	ld	h, -1 (ix)
      000E68 E5               [11] 3601 	push	hl
      000E69 33               [ 6] 3602 	inc	sp
      000E6A F5               [11] 3603 	push	af
      000E6B 33               [ 6] 3604 	inc	sp
      000E6C CDr87r0D         [17] 3605 	call	_DrawChar
      000E6F F1               [10] 3606 	pop	af
      000E70 33               [ 6] 3607 	inc	sp
      000E71 DD 6E FB         [19] 3608 	ld	l, -5 (ix)
      000E74 DD 66 FC         [19] 3609 	ld	h, -4 (ix)
      000E77 E5               [11] 3610 	push	hl
      000E78 DD 6E 04         [19] 3611 	ld	l, 4 (ix)
      000E7B DD 66 05         [19] 3612 	ld	h, 5 (ix)
      000E7E E5               [11] 3613 	push	hl
      000E7F CDr00r00         [17] 3614 	call	__moduint
      000E82 F1               [10] 3615 	pop	af
      000E83 F1               [10] 3616 	pop	af
      000E84 D1               [10] 3617 	pop	de
      000E85 DD 75 04         [19] 3618 	ld	4 (ix), l
      000E88 DD 74 05         [19] 3619 	ld	5 (ix), h
      000E8B                       3620 00105$:
                                   3621 ;src\/Graphics\Graphics.h:29: col++;
      000E8B DD 34 FF         [23] 3622 	inc	-1 (ix)
                                   3623 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E8E 1D               [ 4] 3624 	dec	e
      000E8F C3r0Cr0E         [10] 3625 	jp	00109$
      000E92                       3626 00111$:
                                   3627 ;src\/Graphics\Graphics.h:34: }
      000E92 DD F9            [10] 3628 	ld	sp, ix
      000E94 DD E1            [14] 3629 	pop	ix
      000E96 C9               [10] 3630 	ret
      000E97                       3631 ___str_0:
      000E97 20 20 20 20 20 20     3632 	.ascii "      "
      000E9D 00                    3633 	.db 0x00
                                   3634 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3635 ;	---------------------------------
                                   3636 ; Function DrawColumn
                                   3637 ; ---------------------------------
      000E9E                       3638 _DrawColumn::
      000E9E DD E5            [15] 3639 	push	ix
      000EA0 DD 21 00 00      [14] 3640 	ld	ix,#0
      000EA4 DD 39            [15] 3641 	add	ix,sp
      000EA6 21 F9 FF         [10] 3642 	ld	hl, #-7
      000EA9 39               [11] 3643 	add	hl, sp
      000EAA F9               [ 6] 3644 	ld	sp, hl
                                   3645 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000EAB DD 4E 04         [19] 3646 	ld	c, 4 (ix)
      000EAE 06 00            [ 7] 3647 	ld	b, #0x00
      000EB0 21 00 18         [10] 3648 	ld	hl, #0x1800
      000EB3 09               [11] 3649 	add	hl, bc
      000EB4 C5               [11] 3650 	push	bc
      000EB5 3E 18            [ 7] 3651 	ld	a, #0x18
      000EB7 F5               [11] 3652 	push	af
      000EB8 33               [ 6] 3653 	inc	sp
      000EB9 E5               [11] 3654 	push	hl
      000EBA CDr00r00         [17] 3655 	call	_WRTVRM
      000EBD F1               [10] 3656 	pop	af
      000EBE 33               [ 6] 3657 	inc	sp
      000EBF C1               [10] 3658 	pop	bc
                                   3659 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000EC0 21 01 18         [10] 3660 	ld	hl, #0x1801
      000EC3 09               [11] 3661 	add	hl, bc
      000EC4 C5               [11] 3662 	push	bc
      000EC5 3E 19            [ 7] 3663 	ld	a, #0x19
      000EC7 F5               [11] 3664 	push	af
      000EC8 33               [ 6] 3665 	inc	sp
      000EC9 E5               [11] 3666 	push	hl
      000ECA CDr00r00         [17] 3667 	call	_WRTVRM
      000ECD F1               [10] 3668 	pop	af
      000ECE 33               [ 6] 3669 	inc	sp
      000ECF C1               [10] 3670 	pop	bc
                                   3671 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000ED0 21 02 18         [10] 3672 	ld	hl, #0x1802
      000ED3 09               [11] 3673 	add	hl, bc
      000ED4 C5               [11] 3674 	push	bc
      000ED5 3E 1A            [ 7] 3675 	ld	a, #0x1a
      000ED7 F5               [11] 3676 	push	af
      000ED8 33               [ 6] 3677 	inc	sp
      000ED9 E5               [11] 3678 	push	hl
      000EDA CDr00r00         [17] 3679 	call	_WRTVRM
      000EDD F1               [10] 3680 	pop	af
      000EDE 33               [ 6] 3681 	inc	sp
      000EDF C1               [10] 3682 	pop	bc
                                   3683 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000EE0 21 20 18         [10] 3684 	ld	hl, #0x1820
      000EE3 09               [11] 3685 	add	hl, bc
      000EE4 C5               [11] 3686 	push	bc
      000EE5 3E 1B            [ 7] 3687 	ld	a, #0x1b
      000EE7 F5               [11] 3688 	push	af
      000EE8 33               [ 6] 3689 	inc	sp
      000EE9 E5               [11] 3690 	push	hl
      000EEA CDr00r00         [17] 3691 	call	_WRTVRM
      000EED F1               [10] 3692 	pop	af
      000EEE 33               [ 6] 3693 	inc	sp
      000EEF C1               [10] 3694 	pop	bc
                                   3695 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000EF0 21 21 18         [10] 3696 	ld	hl, #0x1821
      000EF3 09               [11] 3697 	add	hl, bc
      000EF4 C5               [11] 3698 	push	bc
      000EF5 3E 1C            [ 7] 3699 	ld	a, #0x1c
      000EF7 F5               [11] 3700 	push	af
      000EF8 33               [ 6] 3701 	inc	sp
      000EF9 E5               [11] 3702 	push	hl
      000EFA CDr00r00         [17] 3703 	call	_WRTVRM
      000EFD F1               [10] 3704 	pop	af
      000EFE 33               [ 6] 3705 	inc	sp
      000EFF C1               [10] 3706 	pop	bc
                                   3707 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000F00 21 22 18         [10] 3708 	ld	hl, #0x1822
      000F03 09               [11] 3709 	add	hl, bc
      000F04 C5               [11] 3710 	push	bc
      000F05 3E 1D            [ 7] 3711 	ld	a, #0x1d
      000F07 F5               [11] 3712 	push	af
      000F08 33               [ 6] 3713 	inc	sp
      000F09 E5               [11] 3714 	push	hl
      000F0A CDr00r00         [17] 3715 	call	_WRTVRM
      000F0D F1               [10] 3716 	pop	af
      000F0E 33               [ 6] 3717 	inc	sp
      000F0F C1               [10] 3718 	pop	bc
                                   3719 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F10 21 40 18         [10] 3720 	ld	hl, #0x1840
      000F13 09               [11] 3721 	add	hl, bc
      000F14 E3               [19] 3722 	ex	(sp), hl
      000F15 21 41 18         [10] 3723 	ld	hl, #0x1841
      000F18 09               [11] 3724 	add	hl, bc
      000F19 DD 75 FB         [19] 3725 	ld	-5 (ix), l
      000F1C DD 74 FC         [19] 3726 	ld	-4 (ix), h
      000F1F 21 42 18         [10] 3727 	ld	hl, #0x1842
      000F22 09               [11] 3728 	add	hl, bc
      000F23 DD 75 FD         [19] 3729 	ld	-3 (ix), l
      000F26 DD 74 FE         [19] 3730 	ld	-2 (ix), h
      000F29 DD 36 FF 00      [19] 3731 	ld	-1 (ix), #0
      000F2D                       3732 00103$:
      000F2D DD 7E FF         [19] 3733 	ld	a, -1 (ix)
      000F30 D6 14            [ 7] 3734 	sub	a, #0x14
      000F32 30 4A            [12] 3735 	jr	NC, 00101$
                                   3736 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000F34 DD 5E FF         [19] 3737 	ld	e, -1 (ix)
      000F37 16 00            [ 7] 3738 	ld	d, #0x00
      000F39 EB               [ 4] 3739 	ex	de, hl
      000F3A 29               [11] 3740 	add	hl, hl
      000F3B 29               [11] 3741 	add	hl, hl
      000F3C 29               [11] 3742 	add	hl, hl
      000F3D 29               [11] 3743 	add	hl, hl
      000F3E 29               [11] 3744 	add	hl, hl
      000F3F EB               [ 4] 3745 	ex	de, hl
      000F40 E1               [10] 3746 	pop	hl
      000F41 E5               [11] 3747 	push	hl
      000F42 19               [11] 3748 	add	hl, de
      000F43 C5               [11] 3749 	push	bc
      000F44 D5               [11] 3750 	push	de
      000F45 3E 1E            [ 7] 3751 	ld	a, #0x1e
      000F47 F5               [11] 3752 	push	af
      000F48 33               [ 6] 3753 	inc	sp
      000F49 E5               [11] 3754 	push	hl
      000F4A CDr00r00         [17] 3755 	call	_WRTVRM
      000F4D F1               [10] 3756 	pop	af
      000F4E 33               [ 6] 3757 	inc	sp
      000F4F D1               [10] 3758 	pop	de
      000F50 C1               [10] 3759 	pop	bc
                                   3760 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000F51 DD 6E FB         [19] 3761 	ld	l, -5 (ix)
      000F54 DD 66 FC         [19] 3762 	ld	h, -4 (ix)
      000F57 19               [11] 3763 	add	hl, de
      000F58 C5               [11] 3764 	push	bc
      000F59 D5               [11] 3765 	push	de
      000F5A 3E 1F            [ 7] 3766 	ld	a, #0x1f
      000F5C F5               [11] 3767 	push	af
      000F5D 33               [ 6] 3768 	inc	sp
      000F5E E5               [11] 3769 	push	hl
      000F5F CDr00r00         [17] 3770 	call	_WRTVRM
      000F62 F1               [10] 3771 	pop	af
      000F63 33               [ 6] 3772 	inc	sp
      000F64 D1               [10] 3773 	pop	de
      000F65 C1               [10] 3774 	pop	bc
                                   3775 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000F66 DD 6E FD         [19] 3776 	ld	l, -3 (ix)
      000F69 DD 66 FE         [19] 3777 	ld	h, -2 (ix)
      000F6C 19               [11] 3778 	add	hl, de
      000F6D C5               [11] 3779 	push	bc
      000F6E 3E 20            [ 7] 3780 	ld	a, #0x20
      000F70 F5               [11] 3781 	push	af
      000F71 33               [ 6] 3782 	inc	sp
      000F72 E5               [11] 3783 	push	hl
      000F73 CDr00r00         [17] 3784 	call	_WRTVRM
      000F76 F1               [10] 3785 	pop	af
      000F77 33               [ 6] 3786 	inc	sp
      000F78 C1               [10] 3787 	pop	bc
                                   3788 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F79 DD 34 FF         [23] 3789 	inc	-1 (ix)
      000F7C 18 AF            [12] 3790 	jr	00103$
      000F7E                       3791 00101$:
                                   3792 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000F7E 21 00 19         [10] 3793 	ld	hl, #0x1900
      000F81 09               [11] 3794 	add	hl, bc
      000F82 C5               [11] 3795 	push	bc
      000F83 3E 21            [ 7] 3796 	ld	a, #0x21
      000F85 F5               [11] 3797 	push	af
      000F86 33               [ 6] 3798 	inc	sp
      000F87 E5               [11] 3799 	push	hl
      000F88 CDr00r00         [17] 3800 	call	_WRTVRM
      000F8B F1               [10] 3801 	pop	af
      000F8C 33               [ 6] 3802 	inc	sp
      000F8D C1               [10] 3803 	pop	bc
                                   3804 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000F8E 21 01 19         [10] 3805 	ld	hl, #0x1901
      000F91 09               [11] 3806 	add	hl, bc
      000F92 C5               [11] 3807 	push	bc
      000F93 3E 22            [ 7] 3808 	ld	a, #0x22
      000F95 F5               [11] 3809 	push	af
      000F96 33               [ 6] 3810 	inc	sp
      000F97 E5               [11] 3811 	push	hl
      000F98 CDr00r00         [17] 3812 	call	_WRTVRM
      000F9B F1               [10] 3813 	pop	af
      000F9C 33               [ 6] 3814 	inc	sp
      000F9D C1               [10] 3815 	pop	bc
                                   3816 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000F9E 21 02 19         [10] 3817 	ld	hl, #0x1902
      000FA1 09               [11] 3818 	add	hl, bc
      000FA2 C5               [11] 3819 	push	bc
      000FA3 3E 23            [ 7] 3820 	ld	a, #0x23
      000FA5 F5               [11] 3821 	push	af
      000FA6 33               [ 6] 3822 	inc	sp
      000FA7 E5               [11] 3823 	push	hl
      000FA8 CDr00r00         [17] 3824 	call	_WRTVRM
      000FAB F1               [10] 3825 	pop	af
      000FAC 33               [ 6] 3826 	inc	sp
      000FAD C1               [10] 3827 	pop	bc
                                   3828 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000FAE 21 00 1A         [10] 3829 	ld	hl, #0x1a00
      000FB1 09               [11] 3830 	add	hl, bc
      000FB2 C5               [11] 3831 	push	bc
      000FB3 3E 21            [ 7] 3832 	ld	a, #0x21
      000FB5 F5               [11] 3833 	push	af
      000FB6 33               [ 6] 3834 	inc	sp
      000FB7 E5               [11] 3835 	push	hl
      000FB8 CDr00r00         [17] 3836 	call	_WRTVRM
      000FBB F1               [10] 3837 	pop	af
      000FBC 33               [ 6] 3838 	inc	sp
      000FBD C1               [10] 3839 	pop	bc
                                   3840 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000FBE 21 01 1A         [10] 3841 	ld	hl, #0x1a01
      000FC1 09               [11] 3842 	add	hl, bc
      000FC2 C5               [11] 3843 	push	bc
      000FC3 3E 22            [ 7] 3844 	ld	a, #0x22
      000FC5 F5               [11] 3845 	push	af
      000FC6 33               [ 6] 3846 	inc	sp
      000FC7 E5               [11] 3847 	push	hl
      000FC8 CDr00r00         [17] 3848 	call	_WRTVRM
      000FCB F1               [10] 3849 	pop	af
      000FCC 33               [ 6] 3850 	inc	sp
      000FCD C1               [10] 3851 	pop	bc
                                   3852 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      000FCE 21 02 1A         [10] 3853 	ld	hl, #0x1a02
      000FD1 09               [11] 3854 	add	hl, bc
      000FD2 C5               [11] 3855 	push	bc
      000FD3 3E 23            [ 7] 3856 	ld	a, #0x23
      000FD5 F5               [11] 3857 	push	af
      000FD6 33               [ 6] 3858 	inc	sp
      000FD7 E5               [11] 3859 	push	hl
      000FD8 CDr00r00         [17] 3860 	call	_WRTVRM
      000FDB F1               [10] 3861 	pop	af
      000FDC 33               [ 6] 3862 	inc	sp
      000FDD C1               [10] 3863 	pop	bc
                                   3864 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000FDE 21 C0 1A         [10] 3865 	ld	hl, #0x1ac0
      000FE1 09               [11] 3866 	add	hl, bc
      000FE2 C5               [11] 3867 	push	bc
      000FE3 3E 24            [ 7] 3868 	ld	a, #0x24
      000FE5 F5               [11] 3869 	push	af
      000FE6 33               [ 6] 3870 	inc	sp
      000FE7 E5               [11] 3871 	push	hl
      000FE8 CDr00r00         [17] 3872 	call	_WRTVRM
      000FEB F1               [10] 3873 	pop	af
      000FEC 33               [ 6] 3874 	inc	sp
      000FED C1               [10] 3875 	pop	bc
                                   3876 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000FEE 21 C1 1A         [10] 3877 	ld	hl, #0x1ac1
      000FF1 09               [11] 3878 	add	hl, bc
      000FF2 C5               [11] 3879 	push	bc
      000FF3 3E 25            [ 7] 3880 	ld	a, #0x25
      000FF5 F5               [11] 3881 	push	af
      000FF6 33               [ 6] 3882 	inc	sp
      000FF7 E5               [11] 3883 	push	hl
      000FF8 CDr00r00         [17] 3884 	call	_WRTVRM
      000FFB F1               [10] 3885 	pop	af
      000FFC 33               [ 6] 3886 	inc	sp
      000FFD C1               [10] 3887 	pop	bc
                                   3888 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000FFE 21 C2 1A         [10] 3889 	ld	hl, #0x1ac2
      001001 09               [11] 3890 	add	hl, bc
      001002 C5               [11] 3891 	push	bc
      001003 3E 26            [ 7] 3892 	ld	a, #0x26
      001005 F5               [11] 3893 	push	af
      001006 33               [ 6] 3894 	inc	sp
      001007 E5               [11] 3895 	push	hl
      001008 CDr00r00         [17] 3896 	call	_WRTVRM
      00100B F1               [10] 3897 	pop	af
      00100C 33               [ 6] 3898 	inc	sp
      00100D C1               [10] 3899 	pop	bc
                                   3900 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00100E 21 E0 1A         [10] 3901 	ld	hl, #0x1ae0
      001011 09               [11] 3902 	add	hl, bc
      001012 C5               [11] 3903 	push	bc
      001013 3E 27            [ 7] 3904 	ld	a, #0x27
      001015 F5               [11] 3905 	push	af
      001016 33               [ 6] 3906 	inc	sp
      001017 E5               [11] 3907 	push	hl
      001018 CDr00r00         [17] 3908 	call	_WRTVRM
      00101B F1               [10] 3909 	pop	af
      00101C 33               [ 6] 3910 	inc	sp
      00101D C1               [10] 3911 	pop	bc
                                   3912 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00101E 21 E1 1A         [10] 3913 	ld	hl, #0x1ae1
      001021 09               [11] 3914 	add	hl, bc
      001022 C5               [11] 3915 	push	bc
      001023 3E 28            [ 7] 3916 	ld	a, #0x28
      001025 F5               [11] 3917 	push	af
      001026 33               [ 6] 3918 	inc	sp
      001027 E5               [11] 3919 	push	hl
      001028 CDr00r00         [17] 3920 	call	_WRTVRM
      00102B F1               [10] 3921 	pop	af
      00102C 33               [ 6] 3922 	inc	sp
      00102D C1               [10] 3923 	pop	bc
                                   3924 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00102E 21 E2 1A         [10] 3925 	ld	hl, #0x1ae2
      001031 09               [11] 3926 	add	hl, bc
      001032 3E 29            [ 7] 3927 	ld	a, #0x29
      001034 F5               [11] 3928 	push	af
      001035 33               [ 6] 3929 	inc	sp
      001036 E5               [11] 3930 	push	hl
      001037 CDr00r00         [17] 3931 	call	_WRTVRM
                                   3932 ;src\/Graphics\Graphics.h:64: }
      00103A DD F9            [10] 3933 	ld	sp,ix
      00103C DD E1            [14] 3934 	pop	ix
      00103E C9               [10] 3935 	ret
                                   3936 ;src\/Graphics\Graphics.h:66: void DrawScore() {
                                   3937 ;	---------------------------------
                                   3938 ; Function DrawScore
                                   3939 ; ---------------------------------
      00103F                       3940 _DrawScore::
      00103F DD E5            [15] 3941 	push	ix
      001041 DD 21 00 00      [14] 3942 	ld	ix,#0
      001045 DD 39            [15] 3943 	add	ix,sp
      001047 F5               [11] 3944 	push	af
                                   3945 ;src\/Graphics\Graphics.h:67: byte bgCounter = 0, bgColor;
      001048 DD 36 FE 00      [19] 3946 	ld	-2 (ix), #0
                                   3947 ;src\/Graphics\Graphics.h:71: if(newLevel) {
      00104C 3Ar07r00         [13] 3948 	ld	a,(#_newLevel + 0)
      00104F B7               [ 4] 3949 	or	a, a
      001050 CAr4Br11         [10] 3950 	jp	Z, 00119$
                                   3951 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001053 DD 36 FF 00      [19] 3952 	ld	-1 (ix), #0
      001057                       3953 00121$:
      001057 DD 7E FF         [19] 3954 	ld	a, -1 (ix)
      00105A D6 3C            [ 7] 3955 	sub	a, #0x3c
      00105C D2r4Br11         [10] 3956 	jp	NC, 00119$
                                   3957 ;src\/Graphics\Graphics.h:73: lastJiffy = JIFFY;
      00105F ED 4B 9E FC      [20] 3958 	ld	bc, (_JIFFY)
                                   3959 ;src\/Graphics\Graphics.h:74: while(lastJiffy == JIFFY) { }
      001063                       3960 00101$:
      001063 2A 9E FC         [16] 3961 	ld	hl, (_JIFFY)
      001066 BF               [ 4] 3962 	cp	a, a
      001067 ED 42            [15] 3963 	sbc	hl, bc
      001069 28 F8            [12] 3964 	jr	Z, 00101$
                                   3965 ;src\/Graphics\Graphics.h:76: DrawExplosionSprite(26 * 8, 4 * 8, i);
      00106B DD 56 FF         [19] 3966 	ld	d, -1 (ix)
      00106E 1E 20            [ 7] 3967 	ld	e,#0x20
      001070 D5               [11] 3968 	push	de
      001071 3E D0            [ 7] 3969 	ld	a, #0xd0
      001073 F5               [11] 3970 	push	af
      001074 33               [ 6] 3971 	inc	sp
      001075 CDr9Fr0C         [17] 3972 	call	_DrawExplosionSprite
      001078 F1               [10] 3973 	pop	af
      001079 33               [ 6] 3974 	inc	sp
                                   3975 ;src\/Graphics\Graphics.h:78: if(JIFFY & 0b00000110) {
      00107A 2A 9E FC         [16] 3976 	ld	hl, (_JIFFY)
      00107D 7D               [ 4] 3977 	ld	a, l
      00107E E6 06            [ 7] 3978 	and	a, #0x06
      001080 CAr2Br11         [10] 3979 	jp	Z,00115$
                                   3980 ;src\/Graphics\Graphics.h:79: DrawString(" LEVEL", 26, 4);
      001083 11 1A 04         [10] 3981 	ld	de, #0x041a
      001086 D5               [11] 3982 	push	de
      001087 21rC0r11         [10] 3983 	ld	hl, #___str_1
      00108A E5               [11] 3984 	push	hl
      00108B CDrB1r0D         [17] 3985 	call	_DrawString
      00108E F1               [10] 3986 	pop	af
      00108F F1               [10] 3987 	pop	af
                                   3988 ;src\/Graphics\Graphics.h:80: DrawNumber(level, 26, 5); //TODO: fix bug (new level not blinking)
      001090 3Ar06r00         [13] 3989 	ld	a, (#_level + 0)
      001093 4F               [ 4] 3990 	ld	c, a
      001094 06 00            [ 7] 3991 	ld	b, #0x00
      001096 11 1A 05         [10] 3992 	ld	de, #0x051a
      001099 D5               [11] 3993 	push	de
      00109A C5               [11] 3994 	push	bc
      00109B CDrE3r0D         [17] 3995 	call	_DrawNumber
      00109E F1               [10] 3996 	pop	af
      00109F F1               [10] 3997 	pop	af
                                   3998 ;src\/Graphics\Graphics.h:86: switch(bgCounter++) {
      0010A0 DD 4E FE         [19] 3999 	ld	c, -2 (ix)
      0010A3 DD 34 FE         [23] 4000 	inc	-2 (ix)
      0010A6 3E 07            [ 7] 4001 	ld	a, #0x07
      0010A8 91               [ 4] 4002 	sub	a, c
      0010A9 38 45            [12] 4003 	jr	C, 00112$
      0010AB 06 00            [ 7] 4004 	ld	b, #0x00
      0010AD 21rB4r10         [10] 4005 	ld	hl, #00163$
      0010B0 09               [11] 4006 	add	hl, bc
      0010B1 09               [11] 4007 	add	hl, bc
      0010B2 09               [11] 4008 	add	hl, bc
      0010B3 E9               [ 4] 4009 	jp	(hl)
      0010B4                       4010 00163$:
      0010B4 C3rCCr10         [10] 4011 	jp	00104$
      0010B7 C3rD0r10         [10] 4012 	jp	00105$
      0010BA C3rD4r10         [10] 4013 	jp	00106$
      0010BD C3rD8r10         [10] 4014 	jp	00107$
      0010C0 C3rDCr10         [10] 4015 	jp	00108$
      0010C3 C3rE0r10         [10] 4016 	jp	00109$
      0010C6 C3rE4r10         [10] 4017 	jp	00110$
      0010C9 C3rE8r10         [10] 4018 	jp	00111$
                                   4019 ;src\/Graphics\Graphics.h:87: case 0:
      0010CC                       4020 00104$:
                                   4021 ;src\/Graphics\Graphics.h:88: bgColor = 0x14;
      0010CC 0E 14            [ 7] 4022 	ld	c, #0x14
                                   4023 ;src\/Graphics\Graphics.h:89: break;
      0010CE 18 22            [12] 4024 	jr	00113$
                                   4025 ;src\/Graphics\Graphics.h:90: case 1:
      0010D0                       4026 00105$:
                                   4027 ;src\/Graphics\Graphics.h:91: bgColor = 0x15;
      0010D0 0E 15            [ 7] 4028 	ld	c, #0x15
                                   4029 ;src\/Graphics\Graphics.h:92: break;
      0010D2 18 1E            [12] 4030 	jr	00113$
                                   4031 ;src\/Graphics\Graphics.h:93: case 2:
      0010D4                       4032 00106$:
                                   4033 ;src\/Graphics\Graphics.h:94: bgColor = 0x17;
      0010D4 0E 17            [ 7] 4034 	ld	c, #0x17
                                   4035 ;src\/Graphics\Graphics.h:95: break;
      0010D6 18 1A            [12] 4036 	jr	00113$
                                   4037 ;src\/Graphics\Graphics.h:96: case 3:
      0010D8                       4038 00107$:
                                   4039 ;src\/Graphics\Graphics.h:97: bgColor = 0x1e;
      0010D8 0E 1E            [ 7] 4040 	ld	c, #0x1e
                                   4041 ;src\/Graphics\Graphics.h:98: break;
      0010DA 18 16            [12] 4042 	jr	00113$
                                   4043 ;src\/Graphics\Graphics.h:99: case 4:
      0010DC                       4044 00108$:
                                   4045 ;src\/Graphics\Graphics.h:100: bgColor = 0x1f;
      0010DC 0E 1F            [ 7] 4046 	ld	c, #0x1f
                                   4047 ;src\/Graphics\Graphics.h:101: break;
      0010DE 18 12            [12] 4048 	jr	00113$
                                   4049 ;src\/Graphics\Graphics.h:102: case 5:
      0010E0                       4050 00109$:
                                   4051 ;src\/Graphics\Graphics.h:103: bgColor = 0x1e;
      0010E0 0E 1E            [ 7] 4052 	ld	c, #0x1e
                                   4053 ;src\/Graphics\Graphics.h:104: break;
      0010E2 18 0E            [12] 4054 	jr	00113$
                                   4055 ;src\/Graphics\Graphics.h:105: case 6:
      0010E4                       4056 00110$:
                                   4057 ;src\/Graphics\Graphics.h:106: bgColor = 0x17;
      0010E4 0E 17            [ 7] 4058 	ld	c, #0x17
                                   4059 ;src\/Graphics\Graphics.h:107: break;
      0010E6 18 0A            [12] 4060 	jr	00113$
                                   4061 ;src\/Graphics\Graphics.h:108: case 7:
      0010E8                       4062 00111$:
                                   4063 ;src\/Graphics\Graphics.h:109: bgColor = 0x15;
      0010E8 0E 15            [ 7] 4064 	ld	c, #0x15
                                   4065 ;src\/Graphics\Graphics.h:110: bgCounter = 0;
      0010EA DD 36 FE 00      [19] 4066 	ld	-2 (ix), #0
                                   4067 ;src\/Graphics\Graphics.h:111: break;
      0010EE 18 02            [12] 4068 	jr	00113$
                                   4069 ;src\/Graphics\Graphics.h:112: default:
      0010F0                       4070 00112$:
                                   4071 ;src\/Graphics\Graphics.h:113: bgColor = 0x11;
      0010F0 0E 11            [ 7] 4072 	ld	c, #0x11
                                   4073 ;src\/Graphics\Graphics.h:115: }
      0010F2                       4074 00113$:
                                   4075 ;src\/Graphics\Graphics.h:116: FILVRM(CLRTBL, 8 * 4, bgColor);
      0010F2 C5               [11] 4076 	push	bc
      0010F3 79               [ 4] 4077 	ld	a, c
      0010F4 F5               [11] 4078 	push	af
      0010F5 33               [ 6] 4079 	inc	sp
      0010F6 21 20 00         [10] 4080 	ld	hl, #0x0020
      0010F9 E5               [11] 4081 	push	hl
      0010FA 21 00 20         [10] 4082 	ld	hl, #0x2000
      0010FD E5               [11] 4083 	push	hl
      0010FE CDr00r00         [17] 4084 	call	_FILVRM
      001101 F1               [10] 4085 	pop	af
      001102 F1               [10] 4086 	pop	af
      001103 33               [ 6] 4087 	inc	sp
      001104 C1               [10] 4088 	pop	bc
                                   4089 ;src\/Graphics\Graphics.h:117: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001105 C5               [11] 4090 	push	bc
      001106 79               [ 4] 4091 	ld	a, c
      001107 F5               [11] 4092 	push	af
      001108 33               [ 6] 4093 	inc	sp
      001109 21 20 00         [10] 4094 	ld	hl, #0x0020
      00110C E5               [11] 4095 	push	hl
      00110D 21 00 28         [10] 4096 	ld	hl, #0x2800
      001110 E5               [11] 4097 	push	hl
      001111 CDr00r00         [17] 4098 	call	_FILVRM
      001114 F1               [10] 4099 	pop	af
      001115 F1               [10] 4100 	pop	af
      001116 33               [ 6] 4101 	inc	sp
      001117 C1               [10] 4102 	pop	bc
                                   4103 ;src\/Graphics\Graphics.h:118: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001118 79               [ 4] 4104 	ld	a, c
      001119 F5               [11] 4105 	push	af
      00111A 33               [ 6] 4106 	inc	sp
      00111B 21 20 00         [10] 4107 	ld	hl, #0x0020
      00111E E5               [11] 4108 	push	hl
      00111F 21 00 30         [10] 4109 	ld	hl, #0x3000
      001122 E5               [11] 4110 	push	hl
      001123 CDr00r00         [17] 4111 	call	_FILVRM
      001126 F1               [10] 4112 	pop	af
      001127 F1               [10] 4113 	pop	af
      001128 33               [ 6] 4114 	inc	sp
      001129 18 1A            [12] 4115 	jr	00122$
      00112B                       4116 00115$:
                                   4117 ;src\/Graphics\Graphics.h:123: DrawString("      ", 26, 4);
      00112B 11 1A 04         [10] 4118 	ld	de, #0x041a
      00112E D5               [11] 4119 	push	de
      00112F 21rC7r11         [10] 4120 	ld	hl, #___str_2
      001132 E5               [11] 4121 	push	hl
      001133 CDrB1r0D         [17] 4122 	call	_DrawString
      001136 F1               [10] 4123 	pop	af
      001137 F1               [10] 4124 	pop	af
                                   4125 ;src\/Graphics\Graphics.h:124: DrawString("      ", 26, 5);
      001138 11 1A 05         [10] 4126 	ld	de, #0x051a
      00113B D5               [11] 4127 	push	de
      00113C 21rC7r11         [10] 4128 	ld	hl, #___str_2
      00113F E5               [11] 4129 	push	hl
      001140 CDrB1r0D         [17] 4130 	call	_DrawString
      001143 F1               [10] 4131 	pop	af
      001144 F1               [10] 4132 	pop	af
      001145                       4133 00122$:
                                   4134 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001145 DD 34 FF         [23] 4135 	inc	-1 (ix)
      001148 C3r57r10         [10] 4136 	jp	00121$
      00114B                       4137 00119$:
                                   4138 ;src\/Graphics\Graphics.h:130: newLevel = FALSE;
      00114B 21r07r00         [10] 4139 	ld	hl, #_newLevel
      00114E 36 00            [10] 4140 	ld	(hl), #0x00
                                   4141 ;src\/Graphics\Graphics.h:133: FILVRM(CLRTBL, 8 * 4, 0x14);
      001150 3E 14            [ 7] 4142 	ld	a, #0x14
      001152 F5               [11] 4143 	push	af
      001153 33               [ 6] 4144 	inc	sp
      001154 21 20 00         [10] 4145 	ld	hl, #0x0020
      001157 E5               [11] 4146 	push	hl
      001158 21 00 20         [10] 4147 	ld	hl, #0x2000
      00115B E5               [11] 4148 	push	hl
      00115C CDr00r00         [17] 4149 	call	_FILVRM
      00115F F1               [10] 4150 	pop	af
      001160 F1               [10] 4151 	pop	af
      001161 33               [ 6] 4152 	inc	sp
                                   4153 ;src\/Graphics\Graphics.h:134: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001162 3E 14            [ 7] 4154 	ld	a, #0x14
      001164 F5               [11] 4155 	push	af
      001165 33               [ 6] 4156 	inc	sp
      001166 21 20 00         [10] 4157 	ld	hl, #0x0020
      001169 E5               [11] 4158 	push	hl
      00116A 21 00 28         [10] 4159 	ld	hl, #0x2800
      00116D E5               [11] 4160 	push	hl
      00116E CDr00r00         [17] 4161 	call	_FILVRM
      001171 F1               [10] 4162 	pop	af
      001172 F1               [10] 4163 	pop	af
      001173 33               [ 6] 4164 	inc	sp
                                   4165 ;src\/Graphics\Graphics.h:135: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001174 3E 14            [ 7] 4166 	ld	a, #0x14
      001176 F5               [11] 4167 	push	af
      001177 33               [ 6] 4168 	inc	sp
      001178 21 20 00         [10] 4169 	ld	hl, #0x0020
      00117B E5               [11] 4170 	push	hl
      00117C 21 00 30         [10] 4171 	ld	hl, #0x3000
      00117F E5               [11] 4172 	push	hl
      001180 CDr00r00         [17] 4173 	call	_FILVRM
      001183 F1               [10] 4174 	pop	af
      001184 F1               [10] 4175 	pop	af
      001185 33               [ 6] 4176 	inc	sp
                                   4177 ;src\/Graphics\Graphics.h:137: DrawString(" LEVEL", 26, 4);
      001186 11 1A 04         [10] 4178 	ld	de, #0x041a
      001189 D5               [11] 4179 	push	de
      00118A 21rC0r11         [10] 4180 	ld	hl, #___str_1
      00118D E5               [11] 4181 	push	hl
      00118E CDrB1r0D         [17] 4182 	call	_DrawString
      001191 F1               [10] 4183 	pop	af
      001192 F1               [10] 4184 	pop	af
                                   4185 ;src\/Graphics\Graphics.h:138: DrawString("BLOCKS", 26, 9);
      001193 11 1A 09         [10] 4186 	ld	de, #0x091a
      001196 D5               [11] 4187 	push	de
      001197 21rCEr11         [10] 4188 	ld	hl, #___str_3
      00119A E5               [11] 4189 	push	hl
      00119B CDrB1r0D         [17] 4190 	call	_DrawString
      00119E F1               [10] 4191 	pop	af
      00119F F1               [10] 4192 	pop	af
                                   4193 ;src\/Graphics\Graphics.h:140: DrawNumber(blocksRemoved, 26, 10);
      0011A0 11 1A 0A         [10] 4194 	ld	de, #0x0a1a
      0011A3 D5               [11] 4195 	push	de
      0011A4 2Ar04r00         [16] 4196 	ld	hl, (_blocksRemoved)
      0011A7 E5               [11] 4197 	push	hl
      0011A8 CDrE3r0D         [17] 4198 	call	_DrawNumber
      0011AB F1               [10] 4199 	pop	af
      0011AC F1               [10] 4200 	pop	af
                                   4201 ;src\/Graphics\Graphics.h:141: DrawNumber(level, 26, 5);
      0011AD 3Ar06r00         [13] 4202 	ld	a, (#_level + 0)
      0011B0 4F               [ 4] 4203 	ld	c, a
      0011B1 06 00            [ 7] 4204 	ld	b, #0x00
      0011B3 11 1A 05         [10] 4205 	ld	de, #0x051a
      0011B6 D5               [11] 4206 	push	de
      0011B7 C5               [11] 4207 	push	bc
      0011B8 CDrE3r0D         [17] 4208 	call	_DrawNumber
                                   4209 ;src\/Graphics\Graphics.h:143: }
      0011BB DD F9            [10] 4210 	ld	sp,ix
      0011BD DD E1            [14] 4211 	pop	ix
      0011BF C9               [10] 4212 	ret
      0011C0                       4213 ___str_1:
      0011C0 20 4C 45 56 45 4C     4214 	.ascii " LEVEL"
      0011C6 00                    4215 	.db 0x00
      0011C7                       4216 ___str_2:
      0011C7 20 20 20 20 20 20     4217 	.ascii "      "
      0011CD 00                    4218 	.db 0x00
      0011CE                       4219 ___str_3:
      0011CE 42 4C 4F 43 4B 53     4220 	.ascii "BLOCKS"
      0011D4 00                    4221 	.db 0x00
                                   4222 ;src\/Graphics\Graphics.h:145: void DrawBackground() {
                                   4223 ;	---------------------------------
                                   4224 ; Function DrawBackground
                                   4225 ; ---------------------------------
      0011D5                       4226 _DrawBackground::
                                   4227 ;src\/Graphics\Graphics.h:147: for(int i = 0; i < 256 * 3; i++) {
      0011D5 01 00 00         [10] 4228 	ld	bc, #0x0000
      0011D8                       4229 00103$:
      0011D8 78               [ 4] 4230 	ld	a, b
      0011D9 EE 80            [ 7] 4231 	xor	a, #0x80
      0011DB D6 83            [ 7] 4232 	sub	a, #0x83
      0011DD 30 12            [12] 4233 	jr	NC, 00101$
                                   4234 ;src\/Graphics\Graphics.h:148: WRTVRM(NAMTBL + i, 0); // test
      0011DF 21 00 18         [10] 4235 	ld	hl, #0x1800
      0011E2 09               [11] 4236 	add	hl, bc
      0011E3 C5               [11] 4237 	push	bc
      0011E4 AF               [ 4] 4238 	xor	a, a
      0011E5 F5               [11] 4239 	push	af
      0011E6 33               [ 6] 4240 	inc	sp
      0011E7 E5               [11] 4241 	push	hl
      0011E8 CDr00r00         [17] 4242 	call	_WRTVRM
      0011EB F1               [10] 4243 	pop	af
      0011EC 33               [ 6] 4244 	inc	sp
      0011ED C1               [10] 4245 	pop	bc
                                   4246 ;src\/Graphics\Graphics.h:147: for(int i = 0; i < 256 * 3; i++) {
      0011EE 03               [ 6] 4247 	inc	bc
      0011EF 18 E7            [12] 4248 	jr	00103$
      0011F1                       4249 00101$:
                                   4250 ;src\/Graphics\Graphics.h:151: DrawColumn(7);
      0011F1 3E 07            [ 7] 4251 	ld	a, #0x07
      0011F3 F5               [11] 4252 	push	af
      0011F4 33               [ 6] 4253 	inc	sp
      0011F5 CDr9Er0E         [17] 4254 	call	_DrawColumn
      0011F8 33               [ 6] 4255 	inc	sp
                                   4256 ;src\/Graphics\Graphics.h:152: DrawColumn(22);
      0011F9 3E 16            [ 7] 4257 	ld	a, #0x16
      0011FB F5               [11] 4258 	push	af
      0011FC 33               [ 6] 4259 	inc	sp
      0011FD CDr9Er0E         [17] 4260 	call	_DrawColumn
      001200 33               [ 6] 4261 	inc	sp
                                   4262 ;src\/Graphics\Graphics.h:154: DrawScore();
                                   4263 ;src\/Graphics\Graphics.h:190: }
      001201 C3r3Fr10         [10] 4264 	jp	_DrawScore
                                   4265 ;src\/Graphics\Graphics.h:192: void InitVRAM() {
                                   4266 ;	---------------------------------
                                   4267 ; Function InitVRAM
                                   4268 ; ---------------------------------
      001204                       4269 _InitVRAM::
      001204 DD E5            [15] 4270 	push	ix
      001206 DD 21 00 00      [14] 4271 	ld	ix,#0
      00120A DD 39            [15] 4272 	add	ix,sp
      00120C 3B               [ 6] 4273 	dec	sp
                                   4274 ;src\/Graphics\Graphics.h:197: CLIKSW = 0;	// disable keyboard sound
      00120D 21 00 00         [10] 4275 	ld	hl, #0x0000
      001210 22 DB F3         [16] 4276 	ld	(_CLIKSW), hl
                                   4277 ;src\/Graphics\Graphics.h:198: SCNCNT = 1; 	// set keyboard scan counter
      001213 21 F6 F3         [10] 4278 	ld	hl, #_SCNCNT
      001216 36 01            [10] 4279 	ld	(hl), #0x01
                                   4280 ;src\/Graphics\Graphics.h:200: FORCLR = COLOR_WHITE;
      001218 21 E9 F3         [10] 4281 	ld	hl, #_FORCLR
      00121B 36 0F            [10] 4282 	ld	(hl), #0x0f
                                   4283 ;src\/Graphics\Graphics.h:201: BAKCLR = COLOR_BLACK;
      00121D 21 EA F3         [10] 4284 	ld	hl, #_BAKCLR
      001220 36 01            [10] 4285 	ld	(hl), #0x01
                                   4286 ;src\/Graphics\Graphics.h:202: BDRCLR = COLOR_BLACK;
      001222 21 EB F3         [10] 4287 	ld	hl, #_BDRCLR
      001225 36 01            [10] 4288 	ld	(hl), #0x01
                                   4289 ;src\/Graphics\Graphics.h:230: WRTVDP(0b0000000111100010);
      001227 21 E2 01         [10] 4290 	ld	hl, #0x01e2
      00122A CDr00r00         [17] 4291 	call	_WRTVDP
                                   4292 ;src\/Graphics\Graphics.h:232: INIGRP();	// Set screen 2
      00122D CDr00r00         [17] 4293 	call	_INIGRP
                                   4294 ;src\/Graphics\Graphics.h:234: DISSCR();	// Disable screen (faster to write)
      001230 CDr00r00         [17] 4295 	call	_DISSCR
                                   4296 ;src\/Graphics\Graphics.h:238: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001233 AF               [ 4] 4297 	xor	a, a
      001234 F5               [11] 4298 	push	af
      001235 33               [ 6] 4299 	inc	sp
      001236 21 00 40         [10] 4300 	ld	hl, #0x4000
      001239 E5               [11] 4301 	push	hl
      00123A 65               [ 4] 4302 	ld	h, l
      00123B E5               [11] 4303 	push	hl
      00123C CDr00r00         [17] 4304 	call	_FILVRM
      00123F F1               [10] 4305 	pop	af
                                   4306 ;src\/Graphics\Graphics.h:247: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001240 33               [ 6] 4307 	inc	sp
      001241 21 60 02         [10] 4308 	ld	hl,#0x0260
      001244 E3               [19] 4309 	ex	(sp),hl
      001245 21rA8r07         [10] 4310 	ld	hl, #_sprite_arrow_0
      001248 E5               [11] 4311 	push	hl
      001249 21 00 38         [10] 4312 	ld	hl, #0x3800
      00124C E5               [11] 4313 	push	hl
      00124D CDr00r00         [17] 4314 	call	_LDIRVM
      001250 21 06 00         [10] 4315 	ld	hl, #6
      001253 39               [11] 4316 	add	hl, sp
      001254 F9               [ 6] 4317 	ld	sp, hl
                                   4318 ;src\/Graphics\Graphics.h:253: for(byte i=0; i<32; i++) {
      001255 0E 00            [ 7] 4319 	ld	c, #0x00
      001257                       4320 00110$:
                                   4321 ;src\/Graphics\Graphics.h:254: WRTVRM(SPRATT + (i * 4), 	192);
      001257 79               [ 4] 4322 	ld	a,c
      001258 FE 20            [ 7] 4323 	cp	a,#0x20
      00125A 30 18            [12] 4324 	jr	NC, 00101$
      00125C 26 00            [ 7] 4325 	ld	h, #0x00
      00125E 6F               [ 4] 4326 	ld	l, a
      00125F 29               [11] 4327 	add	hl, hl
      001260 29               [11] 4328 	add	hl, hl
      001261 7C               [ 4] 4329 	ld	a, h
      001262 C6 1B            [ 7] 4330 	add	a, #0x1b
      001264 67               [ 4] 4331 	ld	h, a
      001265 C5               [11] 4332 	push	bc
      001266 3E C0            [ 7] 4333 	ld	a, #0xc0
      001268 F5               [11] 4334 	push	af
      001269 33               [ 6] 4335 	inc	sp
      00126A E5               [11] 4336 	push	hl
      00126B CDr00r00         [17] 4337 	call	_WRTVRM
      00126E F1               [10] 4338 	pop	af
      00126F 33               [ 6] 4339 	inc	sp
      001270 C1               [10] 4340 	pop	bc
                                   4341 ;src\/Graphics\Graphics.h:253: for(byte i=0; i<32; i++) {
      001271 0C               [ 4] 4342 	inc	c
      001272 18 E3            [12] 4343 	jr	00110$
      001274                       4344 00101$:
                                   4345 ;src\/Graphics\Graphics.h:263: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001274 21 78 01         [10] 4346 	ld	hl, #0x0178
      001277 E5               [11] 4347 	push	hl
      001278 21r78r04         [10] 4348 	ld	hl, #_pattern_black_0
      00127B E5               [11] 4349 	push	hl
      00127C 21 00 00         [10] 4350 	ld	hl, #0x0000
      00127F E5               [11] 4351 	push	hl
      001280 CDr00r00         [17] 4352 	call	_LDIRVM
      001283 21 06 00         [10] 4353 	ld	hl, #6
      001286 39               [11] 4354 	add	hl, sp
      001287 F9               [ 6] 4355 	ld	sp, hl
                                   4356 ;src\/Graphics\Graphics.h:266: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001288 21 78 01         [10] 4357 	ld	hl, #0x0178
      00128B E5               [11] 4358 	push	hl
      00128C 21r78r04         [10] 4359 	ld	hl, #_pattern_black_0
      00128F E5               [11] 4360 	push	hl
      001290 21 00 08         [10] 4361 	ld	hl, #0x0800
      001293 E5               [11] 4362 	push	hl
      001294 CDr00r00         [17] 4363 	call	_LDIRVM
      001297 21 06 00         [10] 4364 	ld	hl, #6
      00129A 39               [11] 4365 	add	hl, sp
      00129B F9               [ 6] 4366 	ld	sp, hl
                                   4367 ;src\/Graphics\Graphics.h:269: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00129C 21 78 01         [10] 4368 	ld	hl, #0x0178
      00129F E5               [11] 4369 	push	hl
      0012A0 21r78r04         [10] 4370 	ld	hl, #_pattern_black_0
      0012A3 E5               [11] 4371 	push	hl
      0012A4 21 00 10         [10] 4372 	ld	hl, #0x1000
      0012A7 E5               [11] 4373 	push	hl
      0012A8 CDr00r00         [17] 4374 	call	_LDIRVM
      0012AB 21 06 00         [10] 4375 	ld	hl, #6
      0012AE 39               [11] 4376 	add	hl, sp
      0012AF F9               [ 6] 4377 	ld	sp, hl
                                   4378 ;src\/Graphics\Graphics.h:272: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012B0 21 00 03         [10] 4379 	ld	hl, #0x0300
      0012B3 E5               [11] 4380 	push	hl
      0012B4 21r78r01         [10] 4381 	ld	hl, #_FONT
      0012B7 E5               [11] 4382 	push	hl
      0012B8 21 78 01         [10] 4383 	ld	hl, #0x0178
      0012BB E5               [11] 4384 	push	hl
      0012BC CDr00r00         [17] 4385 	call	_LDIRVM
      0012BF 21 06 00         [10] 4386 	ld	hl, #6
      0012C2 39               [11] 4387 	add	hl, sp
      0012C3 F9               [ 6] 4388 	ld	sp, hl
                                   4389 ;src\/Graphics\Graphics.h:275: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012C4 21 00 03         [10] 4390 	ld	hl, #0x0300
      0012C7 E5               [11] 4391 	push	hl
      0012C8 21r78r01         [10] 4392 	ld	hl, #_FONT
      0012CB E5               [11] 4393 	push	hl
      0012CC 21 78 09         [10] 4394 	ld	hl, #0x0978
      0012CF E5               [11] 4395 	push	hl
      0012D0 CDr00r00         [17] 4396 	call	_LDIRVM
      0012D3 21 06 00         [10] 4397 	ld	hl, #6
      0012D6 39               [11] 4398 	add	hl, sp
      0012D7 F9               [ 6] 4399 	ld	sp, hl
                                   4400 ;src\/Graphics\Graphics.h:278: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012D8 21 00 03         [10] 4401 	ld	hl, #0x0300
      0012DB E5               [11] 4402 	push	hl
      0012DC 21r78r01         [10] 4403 	ld	hl, #_FONT
      0012DF E5               [11] 4404 	push	hl
      0012E0 21 78 11         [10] 4405 	ld	hl, #0x1178
      0012E3 E5               [11] 4406 	push	hl
      0012E4 CDr00r00         [17] 4407 	call	_LDIRVM
      0012E7 21 06 00         [10] 4408 	ld	hl, #6
      0012EA 39               [11] 4409 	add	hl, sp
      0012EB F9               [ 6] 4410 	ld	sp, hl
                                   4411 ;src\/Graphics\Graphics.h:282: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0012EC 0E 00            [ 7] 4412 	ld	c, #0x00
      0012EE                       4413 00113$:
                                   4414 ;src\/Graphics\Graphics.h:283: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0012EE 79               [ 4] 4415 	ld	a,c
      0012EF FE 07            [ 7] 4416 	cp	a,#0x07
      0012F1 30 20            [12] 4417 	jr	NC, 00102$
      0012F3 26 00            [ 7] 4418 	ld	h, #0x00
      0012F5 6F               [ 4] 4419 	ld	l, a
      0012F6 29               [11] 4420 	add	hl, hl
      0012F7 29               [11] 4421 	add	hl, hl
      0012F8 29               [11] 4422 	add	hl, hl
      0012F9 11 70 04         [10] 4423 	ld	de, #0x0470
      0012FC 19               [11] 4424 	add	hl, de
      0012FD C5               [11] 4425 	push	bc
      0012FE 11 38 00         [10] 4426 	ld	de, #0x0038
      001301 D5               [11] 4427 	push	de
      001302 11rE8r05         [10] 4428 	ld	de, #_pattern_title
      001305 D5               [11] 4429 	push	de
      001306 E5               [11] 4430 	push	hl
      001307 CDr00r00         [17] 4431 	call	_LDIRVM
      00130A 21 06 00         [10] 4432 	ld	hl, #6
      00130D 39               [11] 4433 	add	hl, sp
      00130E F9               [ 6] 4434 	ld	sp, hl
      00130F C1               [10] 4435 	pop	bc
                                   4436 ;src\/Graphics\Graphics.h:282: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001310 0C               [ 4] 4437 	inc	c
      001311 18 DB            [12] 4438 	jr	00113$
      001313                       4439 00102$:
                                   4440 ;src\/Graphics\Graphics.h:289: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001313 21 78 01         [10] 4441 	ld	hl, #0x0178
      001316 E5               [11] 4442 	push	hl
      001317 21rF0r05         [10] 4443 	ld	hl, #_color_black_0
      00131A E5               [11] 4444 	push	hl
      00131B 21 00 20         [10] 4445 	ld	hl, #0x2000
      00131E E5               [11] 4446 	push	hl
      00131F CDr00r00         [17] 4447 	call	_LDIRVM
      001322 21 06 00         [10] 4448 	ld	hl, #6
      001325 39               [11] 4449 	add	hl, sp
      001326 F9               [ 6] 4450 	ld	sp, hl
                                   4451 ;src\/Graphics\Graphics.h:291: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001327 21 78 01         [10] 4452 	ld	hl, #0x0178
      00132A E5               [11] 4453 	push	hl
      00132B 21rF0r05         [10] 4454 	ld	hl, #_color_black_0
      00132E E5               [11] 4455 	push	hl
      00132F 21 00 28         [10] 4456 	ld	hl, #0x2800
      001332 E5               [11] 4457 	push	hl
      001333 CDr00r00         [17] 4458 	call	_LDIRVM
      001336 21 06 00         [10] 4459 	ld	hl, #6
      001339 39               [11] 4460 	add	hl, sp
      00133A F9               [ 6] 4461 	ld	sp, hl
                                   4462 ;src\/Graphics\Graphics.h:293: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00133B 21 78 01         [10] 4463 	ld	hl, #0x0178
      00133E E5               [11] 4464 	push	hl
      00133F 21rF0r05         [10] 4465 	ld	hl, #_color_black_0
      001342 E5               [11] 4466 	push	hl
      001343 21 00 30         [10] 4467 	ld	hl, #0x3000
      001346 E5               [11] 4468 	push	hl
      001347 CDr00r00         [17] 4469 	call	_LDIRVM
      00134A 21 06 00         [10] 4470 	ld	hl, #6
      00134D 39               [11] 4471 	add	hl, sp
      00134E F9               [ 6] 4472 	ld	sp, hl
                                   4473 ;src\/Graphics\Graphics.h:300: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00134F 0E 00            [ 7] 4474 	ld	c, #0x00
      001351                       4475 00116$:
                                   4476 ;src\/Graphics\Graphics.h:301: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001351 79               [ 4] 4477 	ld	a,c
      001352 FE 60            [ 7] 4478 	cp	a,#0x60
      001354 30 20            [12] 4479 	jr	NC, 00103$
      001356 26 00            [ 7] 4480 	ld	h, #0x00
      001358 6F               [ 4] 4481 	ld	l, a
      001359 29               [11] 4482 	add	hl, hl
      00135A 29               [11] 4483 	add	hl, hl
      00135B 29               [11] 4484 	add	hl, hl
      00135C 11 78 21         [10] 4485 	ld	de, #0x2178
      00135F 19               [11] 4486 	add	hl, de
      001360 C5               [11] 4487 	push	bc
      001361 11 08 00         [10] 4488 	ld	de, #0x0008
      001364 D5               [11] 4489 	push	de
      001365 11r68r07         [10] 4490 	ld	de, #_color_font_2
      001368 D5               [11] 4491 	push	de
      001369 E5               [11] 4492 	push	hl
      00136A CDr00r00         [17] 4493 	call	_LDIRVM
      00136D 21 06 00         [10] 4494 	ld	hl, #6
      001370 39               [11] 4495 	add	hl, sp
      001371 F9               [ 6] 4496 	ld	sp, hl
      001372 C1               [10] 4497 	pop	bc
                                   4498 ;src\/Graphics\Graphics.h:300: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001373 0C               [ 4] 4499 	inc	c
      001374 18 DB            [12] 4500 	jr	00116$
      001376                       4501 00103$:
                                   4502 ;src\/Graphics\Graphics.h:304: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001376 0E 00            [ 7] 4503 	ld	c, #0x00
      001378                       4504 00119$:
                                   4505 ;src\/Graphics\Graphics.h:305: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001378 79               [ 4] 4506 	ld	a,c
      001379 FE 60            [ 7] 4507 	cp	a,#0x60
      00137B 30 20            [12] 4508 	jr	NC, 00104$
      00137D 26 00            [ 7] 4509 	ld	h, #0x00
      00137F 6F               [ 4] 4510 	ld	l, a
      001380 29               [11] 4511 	add	hl, hl
      001381 29               [11] 4512 	add	hl, hl
      001382 29               [11] 4513 	add	hl, hl
      001383 11 78 29         [10] 4514 	ld	de, #0x2978
      001386 19               [11] 4515 	add	hl, de
      001387 C5               [11] 4516 	push	bc
      001388 11 08 00         [10] 4517 	ld	de, #0x0008
      00138B D5               [11] 4518 	push	de
      00138C 11r68r07         [10] 4519 	ld	de, #_color_font_2
      00138F D5               [11] 4520 	push	de
      001390 E5               [11] 4521 	push	hl
      001391 CDr00r00         [17] 4522 	call	_LDIRVM
      001394 21 06 00         [10] 4523 	ld	hl, #6
      001397 39               [11] 4524 	add	hl, sp
      001398 F9               [ 6] 4525 	ld	sp, hl
      001399 C1               [10] 4526 	pop	bc
                                   4527 ;src\/Graphics\Graphics.h:304: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00139A 0C               [ 4] 4528 	inc	c
      00139B 18 DB            [12] 4529 	jr	00119$
      00139D                       4530 00104$:
                                   4531 ;src\/Graphics\Graphics.h:308: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00139D 0E 00            [ 7] 4532 	ld	c, #0x00
      00139F                       4533 00122$:
                                   4534 ;src\/Graphics\Graphics.h:309: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00139F 79               [ 4] 4535 	ld	a,c
      0013A0 FE 60            [ 7] 4536 	cp	a,#0x60
      0013A2 30 20            [12] 4537 	jr	NC, 00105$
      0013A4 26 00            [ 7] 4538 	ld	h, #0x00
      0013A6 6F               [ 4] 4539 	ld	l, a
      0013A7 29               [11] 4540 	add	hl, hl
      0013A8 29               [11] 4541 	add	hl, hl
      0013A9 29               [11] 4542 	add	hl, hl
      0013AA 11 78 31         [10] 4543 	ld	de, #0x3178
      0013AD 19               [11] 4544 	add	hl, de
      0013AE C5               [11] 4545 	push	bc
      0013AF 11 08 00         [10] 4546 	ld	de, #0x0008
      0013B2 D5               [11] 4547 	push	de
      0013B3 11r68r07         [10] 4548 	ld	de, #_color_font_2
      0013B6 D5               [11] 4549 	push	de
      0013B7 E5               [11] 4550 	push	hl
      0013B8 CDr00r00         [17] 4551 	call	_LDIRVM
      0013BB 21 06 00         [10] 4552 	ld	hl, #6
      0013BE 39               [11] 4553 	add	hl, sp
      0013BF F9               [ 6] 4554 	ld	sp, hl
      0013C0 C1               [10] 4555 	pop	bc
                                   4556 ;src\/Graphics\Graphics.h:308: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0013C1 0C               [ 4] 4557 	inc	c
      0013C2 18 DB            [12] 4558 	jr	00122$
      0013C4                       4559 00105$:
                                   4560 ;src\/Graphics\Graphics.h:317: for(byte i = 0; i < 10; i++) {
      0013C4 0E 00            [ 7] 4561 	ld	c, #0x00
      0013C6                       4562 00125$:
                                   4563 ;src\/Graphics\Graphics.h:318: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0013C6 79               [ 4] 4564 	ld	a,c
      0013C7 FE 0A            [ 7] 4565 	cp	a,#0x0a
      0013C9 30 20            [12] 4566 	jr	NC, 00106$
      0013CB 26 00            [ 7] 4567 	ld	h, #0x00
      0013CD 6F               [ 4] 4568 	ld	l, a
      0013CE 29               [11] 4569 	add	hl, hl
      0013CF 29               [11] 4570 	add	hl, hl
      0013D0 29               [11] 4571 	add	hl, hl
      0013D1 11 F8 21         [10] 4572 	ld	de, #0x21f8
      0013D4 19               [11] 4573 	add	hl, de
      0013D5 C5               [11] 4574 	push	bc
      0013D6 11 08 00         [10] 4575 	ld	de, #0x0008
      0013D9 D5               [11] 4576 	push	de
      0013DA 11r60r07         [10] 4577 	ld	de, #_color_font_1
      0013DD D5               [11] 4578 	push	de
      0013DE E5               [11] 4579 	push	hl
      0013DF CDr00r00         [17] 4580 	call	_LDIRVM
      0013E2 21 06 00         [10] 4581 	ld	hl, #6
      0013E5 39               [11] 4582 	add	hl, sp
      0013E6 F9               [ 6] 4583 	ld	sp, hl
      0013E7 C1               [10] 4584 	pop	bc
                                   4585 ;src\/Graphics\Graphics.h:317: for(byte i = 0; i < 10; i++) {
      0013E8 0C               [ 4] 4586 	inc	c
      0013E9 18 DB            [12] 4587 	jr	00125$
      0013EB                       4588 00106$:
                                   4589 ;src\/Graphics\Graphics.h:321: for(byte i = 0; i < 10; i++) {
      0013EB 0E 00            [ 7] 4590 	ld	c, #0x00
      0013ED                       4591 00128$:
                                   4592 ;src\/Graphics\Graphics.h:322: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0013ED 79               [ 4] 4593 	ld	a,c
      0013EE FE 0A            [ 7] 4594 	cp	a,#0x0a
      0013F0 30 20            [12] 4595 	jr	NC, 00107$
      0013F2 26 00            [ 7] 4596 	ld	h, #0x00
      0013F4 6F               [ 4] 4597 	ld	l, a
      0013F5 29               [11] 4598 	add	hl, hl
      0013F6 29               [11] 4599 	add	hl, hl
      0013F7 29               [11] 4600 	add	hl, hl
      0013F8 11 F8 29         [10] 4601 	ld	de, #0x29f8
      0013FB 19               [11] 4602 	add	hl, de
      0013FC C5               [11] 4603 	push	bc
      0013FD 11 08 00         [10] 4604 	ld	de, #0x0008
      001400 D5               [11] 4605 	push	de
      001401 11r60r07         [10] 4606 	ld	de, #_color_font_1
      001404 D5               [11] 4607 	push	de
      001405 E5               [11] 4608 	push	hl
      001406 CDr00r00         [17] 4609 	call	_LDIRVM
      001409 21 06 00         [10] 4610 	ld	hl, #6
      00140C 39               [11] 4611 	add	hl, sp
      00140D F9               [ 6] 4612 	ld	sp, hl
      00140E C1               [10] 4613 	pop	bc
                                   4614 ;src\/Graphics\Graphics.h:321: for(byte i = 0; i < 10; i++) {
      00140F 0C               [ 4] 4615 	inc	c
      001410 18 DB            [12] 4616 	jr	00128$
      001412                       4617 00107$:
                                   4618 ;src\/Graphics\Graphics.h:325: for(byte i = 0; i < 10; i++) {
      001412 DD 36 FF 00      [19] 4619 	ld	-1 (ix), #0
      001416                       4620 00131$:
      001416 DD 7E FF         [19] 4621 	ld	a, -1 (ix)
      001419 D6 0A            [ 7] 4622 	sub	a, #0x0a
      00141B 30 22            [12] 4623 	jr	NC, 00108$
                                   4624 ;src\/Graphics\Graphics.h:326: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00141D 01r60r07         [10] 4625 	ld	bc, #_color_font_1
      001420 DD 6E FF         [19] 4626 	ld	l, -1 (ix)
      001423 26 00            [ 7] 4627 	ld	h, #0x00
      001425 29               [11] 4628 	add	hl, hl
      001426 29               [11] 4629 	add	hl, hl
      001427 29               [11] 4630 	add	hl, hl
      001428 11 F8 31         [10] 4631 	ld	de, #0x31f8
      00142B 19               [11] 4632 	add	hl, de
      00142C 11 08 00         [10] 4633 	ld	de, #0x0008
      00142F D5               [11] 4634 	push	de
      001430 C5               [11] 4635 	push	bc
      001431 E5               [11] 4636 	push	hl
      001432 CDr00r00         [17] 4637 	call	_LDIRVM
      001435 21 06 00         [10] 4638 	ld	hl, #6
      001438 39               [11] 4639 	add	hl, sp
      001439 F9               [ 6] 4640 	ld	sp, hl
                                   4641 ;src\/Graphics\Graphics.h:325: for(byte i = 0; i < 10; i++) {
      00143A DD 34 FF         [23] 4642 	inc	-1 (ix)
      00143D 18 D7            [12] 4643 	jr	00131$
      00143F                       4644 00108$:
                                   4645 ;src\/Graphics\Graphics.h:330: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      00143F 21 38 00         [10] 4646 	ld	hl, #0x0038
      001442 E5               [11] 4647 	push	hl
      001443 21r70r07         [10] 4648 	ld	hl, #_color_title_1
      001446 E5               [11] 4649 	push	hl
      001447 21 70 24         [10] 4650 	ld	hl, #0x2470
      00144A E5               [11] 4651 	push	hl
      00144B CDr00r00         [17] 4652 	call	_LDIRVM
      00144E 21 06 00         [10] 4653 	ld	hl, #6
      001451 39               [11] 4654 	add	hl, sp
      001452 F9               [ 6] 4655 	ld	sp, hl
                                   4656 ;src\/Graphics\Graphics.h:338: ENASCR();	// Enable screen
      001453 CDr00r00         [17] 4657 	call	_ENASCR
                                   4658 ;src\/Graphics\Graphics.h:339: }
      001456 33               [ 6] 4659 	inc	sp
      001457 DD E1            [14] 4660 	pop	ix
      001459 C9               [10] 4661 	ret
                                   4662 ;src\/Graphics\Graphics.h:341: void DrawBlock(byte col, byte line, byte tile) {
                                   4663 ;	---------------------------------
                                   4664 ; Function DrawBlock
                                   4665 ; ---------------------------------
      00145A                       4666 _DrawBlock::
      00145A DD E5            [15] 4667 	push	ix
      00145C DD 21 00 00      [14] 4668 	ld	ix,#0
      001460 DD 39            [15] 4669 	add	ix,sp
                                   4670 ;src\/Graphics\Graphics.h:343: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001462 DD 6E 04         [19] 4671 	ld	l, 4 (ix)
      001465 26 00            [ 7] 4672 	ld	h, #0x00
      001467 29               [11] 4673 	add	hl, hl
      001468 4D               [ 4] 4674 	ld	c, l
      001469 44               [ 4] 4675 	ld	b, h
      00146A DD 6E 05         [19] 4676 	ld	l, 5 (ix)
      00146D 26 00            [ 7] 4677 	ld	h, #0x00
      00146F 29               [11] 4678 	add	hl, hl
      001470 29               [11] 4679 	add	hl, hl
      001471 29               [11] 4680 	add	hl, hl
      001472 29               [11] 4681 	add	hl, hl
      001473 29               [11] 4682 	add	hl, hl
      001474 29               [11] 4683 	add	hl, hl
      001475 11 0A 18         [10] 4684 	ld	de, #0x180a
      001478 19               [11] 4685 	add	hl, de
      001479 09               [11] 4686 	add	hl, bc
      00147A EB               [ 4] 4687 	ex	de, hl
                                   4688 ;src\/Graphics\Graphics.h:345: WRTVRM(baseAddr, tile);
      00147B D5               [11] 4689 	push	de
      00147C DD 7E 06         [19] 4690 	ld	a, 6 (ix)
      00147F F5               [11] 4691 	push	af
      001480 33               [ 6] 4692 	inc	sp
      001481 D5               [11] 4693 	push	de
      001482 CDr00r00         [17] 4694 	call	_WRTVRM
      001485 F1               [10] 4695 	pop	af
      001486 33               [ 6] 4696 	inc	sp
      001487 D1               [10] 4697 	pop	de
                                   4698 ;src\/Graphics\Graphics.h:346: WRTVRM(baseAddr + 1, tile + 1);
      001488 DD 4E 06         [19] 4699 	ld	c, 6 (ix)
      00148B 79               [ 4] 4700 	ld	a, c
      00148C 3C               [ 4] 4701 	inc	a
      00148D 6B               [ 4] 4702 	ld	l, e
      00148E 62               [ 4] 4703 	ld	h, d
      00148F 23               [ 6] 4704 	inc	hl
      001490 C5               [11] 4705 	push	bc
      001491 D5               [11] 4706 	push	de
      001492 F5               [11] 4707 	push	af
      001493 33               [ 6] 4708 	inc	sp
      001494 E5               [11] 4709 	push	hl
      001495 CDr00r00         [17] 4710 	call	_WRTVRM
      001498 F1               [10] 4711 	pop	af
      001499 33               [ 6] 4712 	inc	sp
      00149A D1               [10] 4713 	pop	de
      00149B C1               [10] 4714 	pop	bc
                                   4715 ;src\/Graphics\Graphics.h:347: WRTVRM(baseAddr + 32, tile + 2);
      00149C 41               [ 4] 4716 	ld	b, c
      00149D 04               [ 4] 4717 	inc	b
      00149E 04               [ 4] 4718 	inc	b
      00149F 21 20 00         [10] 4719 	ld	hl, #0x0020
      0014A2 19               [11] 4720 	add	hl, de
      0014A3 C5               [11] 4721 	push	bc
      0014A4 D5               [11] 4722 	push	de
      0014A5 C5               [11] 4723 	push	bc
      0014A6 33               [ 6] 4724 	inc	sp
      0014A7 E5               [11] 4725 	push	hl
      0014A8 CDr00r00         [17] 4726 	call	_WRTVRM
      0014AB F1               [10] 4727 	pop	af
      0014AC 33               [ 6] 4728 	inc	sp
      0014AD D1               [10] 4729 	pop	de
      0014AE C1               [10] 4730 	pop	bc
                                   4731 ;src\/Graphics\Graphics.h:348: WRTVRM(baseAddr + 33, tile + 3);
      0014AF 0C               [ 4] 4732 	inc	c
      0014B0 0C               [ 4] 4733 	inc	c
      0014B1 0C               [ 4] 4734 	inc	c
      0014B2 21 21 00         [10] 4735 	ld	hl, #0x0021
      0014B5 19               [11] 4736 	add	hl, de
      0014B6 79               [ 4] 4737 	ld	a, c
      0014B7 F5               [11] 4738 	push	af
      0014B8 33               [ 6] 4739 	inc	sp
      0014B9 E5               [11] 4740 	push	hl
      0014BA CDr00r00         [17] 4741 	call	_WRTVRM
      0014BD F1               [10] 4742 	pop	af
      0014BE 33               [ 6] 4743 	inc	sp
                                   4744 ;src\/Graphics\Graphics.h:349: }
      0014BF DD E1            [14] 4745 	pop	ix
      0014C1 C9               [10] 4746 	ret
                                   4747 ;src\/Graphics\Graphics.h:351: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   4748 ;	---------------------------------
                                   4749 ; Function DrawBlock_SameTile
                                   4750 ; ---------------------------------
      0014C2                       4751 _DrawBlock_SameTile::
      0014C2 DD E5            [15] 4752 	push	ix
      0014C4 DD 21 00 00      [14] 4753 	ld	ix,#0
      0014C8 DD 39            [15] 4754 	add	ix,sp
                                   4755 ;src\/Graphics\Graphics.h:353: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0014CA DD 6E 04         [19] 4756 	ld	l, 4 (ix)
      0014CD 26 00            [ 7] 4757 	ld	h, #0x00
      0014CF 29               [11] 4758 	add	hl, hl
      0014D0 4D               [ 4] 4759 	ld	c, l
      0014D1 44               [ 4] 4760 	ld	b, h
      0014D2 DD 6E 05         [19] 4761 	ld	l, 5 (ix)
      0014D5 26 00            [ 7] 4762 	ld	h, #0x00
      0014D7 29               [11] 4763 	add	hl, hl
      0014D8 29               [11] 4764 	add	hl, hl
      0014D9 29               [11] 4765 	add	hl, hl
      0014DA 29               [11] 4766 	add	hl, hl
      0014DB 29               [11] 4767 	add	hl, hl
      0014DC 29               [11] 4768 	add	hl, hl
      0014DD 11 0A 18         [10] 4769 	ld	de, #0x180a
      0014E0 19               [11] 4770 	add	hl, de
      0014E1 09               [11] 4771 	add	hl, bc
      0014E2 EB               [ 4] 4772 	ex	de, hl
                                   4773 ;src\/Graphics\Graphics.h:355: WRTVRM(baseAddr, tile);
      0014E3 D5               [11] 4774 	push	de
      0014E4 DD 7E 06         [19] 4775 	ld	a, 6 (ix)
      0014E7 F5               [11] 4776 	push	af
      0014E8 33               [ 6] 4777 	inc	sp
      0014E9 D5               [11] 4778 	push	de
      0014EA CDr00r00         [17] 4779 	call	_WRTVRM
      0014ED F1               [10] 4780 	pop	af
      0014EE 33               [ 6] 4781 	inc	sp
      0014EF D1               [10] 4782 	pop	de
                                   4783 ;src\/Graphics\Graphics.h:356: WRTVRM(baseAddr + 1, tile);
      0014F0 4B               [ 4] 4784 	ld	c, e
      0014F1 42               [ 4] 4785 	ld	b, d
      0014F2 03               [ 6] 4786 	inc	bc
      0014F3 D5               [11] 4787 	push	de
      0014F4 DD 7E 06         [19] 4788 	ld	a, 6 (ix)
      0014F7 F5               [11] 4789 	push	af
      0014F8 33               [ 6] 4790 	inc	sp
      0014F9 C5               [11] 4791 	push	bc
      0014FA CDr00r00         [17] 4792 	call	_WRTVRM
      0014FD F1               [10] 4793 	pop	af
      0014FE 33               [ 6] 4794 	inc	sp
      0014FF D1               [10] 4795 	pop	de
                                   4796 ;src\/Graphics\Graphics.h:357: WRTVRM(baseAddr + 32, tile);
      001500 21 20 00         [10] 4797 	ld	hl, #0x0020
      001503 19               [11] 4798 	add	hl, de
      001504 D5               [11] 4799 	push	de
      001505 DD 7E 06         [19] 4800 	ld	a, 6 (ix)
      001508 F5               [11] 4801 	push	af
      001509 33               [ 6] 4802 	inc	sp
      00150A E5               [11] 4803 	push	hl
      00150B CDr00r00         [17] 4804 	call	_WRTVRM
      00150E F1               [10] 4805 	pop	af
      00150F 33               [ 6] 4806 	inc	sp
      001510 D1               [10] 4807 	pop	de
                                   4808 ;src\/Graphics\Graphics.h:358: WRTVRM(baseAddr + 33, tile);
      001511 21 21 00         [10] 4809 	ld	hl, #0x0021
      001514 19               [11] 4810 	add	hl, de
      001515 DD 7E 06         [19] 4811 	ld	a, 6 (ix)
      001518 F5               [11] 4812 	push	af
      001519 33               [ 6] 4813 	inc	sp
      00151A E5               [11] 4814 	push	hl
      00151B CDr00r00         [17] 4815 	call	_WRTVRM
      00151E F1               [10] 4816 	pop	af
      00151F 33               [ 6] 4817 	inc	sp
                                   4818 ;src\/Graphics\Graphics.h:359: }
      001520 DD E1            [14] 4819 	pop	ix
      001522 C9               [10] 4820 	ret
                                   4821 ;src\/Graphics\Graphics.h:361: void DrawLine(byte line) {
                                   4822 ;	---------------------------------
                                   4823 ; Function DrawLine
                                   4824 ; ---------------------------------
      001523                       4825 _DrawLine::
      001523 DD E5            [15] 4826 	push	ix
      001525 DD 21 00 00      [14] 4827 	ld	ix,#0
      001529 DD 39            [15] 4828 	add	ix,sp
                                   4829 ;src\/Graphics\Graphics.h:362: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00152B DD 4E 04         [19] 4830 	ld	c, 4 (ix)
      00152E 06 00            [ 7] 4831 	ld	b, #0x00
      001530                       4832 00103$:
      001530 78               [ 4] 4833 	ld	a, b
      001531 D6 06            [ 7] 4834 	sub	a, #0x06
      001533 30 23            [12] 4835 	jr	NC, 00105$
                                   4836 ;src\/Graphics\Graphics.h:363: DrawBlock(col, line, playfield[col][line]);
      001535 58               [ 4] 4837 	ld	e, b
      001536 16 00            [ 7] 4838 	ld	d, #0x00
      001538 6B               [ 4] 4839 	ld	l, e
      001539 62               [ 4] 4840 	ld	h, d
      00153A 29               [11] 4841 	add	hl, hl
      00153B 19               [11] 4842 	add	hl, de
      00153C 29               [11] 4843 	add	hl, hl
      00153D 29               [11] 4844 	add	hl, hl
      00153E 11r00r00         [10] 4845 	ld	de, #_playfield
      001541 19               [11] 4846 	add	hl, de
      001542 59               [ 4] 4847 	ld	e, c
      001543 16 00            [ 7] 4848 	ld	d, #0x00
      001545 19               [11] 4849 	add	hl, de
      001546 7E               [ 7] 4850 	ld	a, (hl)
      001547 C5               [11] 4851 	push	bc
      001548 F5               [11] 4852 	push	af
      001549 33               [ 6] 4853 	inc	sp
      00154A 79               [ 4] 4854 	ld	a, c
      00154B F5               [11] 4855 	push	af
      00154C 33               [ 6] 4856 	inc	sp
      00154D C5               [11] 4857 	push	bc
      00154E 33               [ 6] 4858 	inc	sp
      00154F CDr5Ar14         [17] 4859 	call	_DrawBlock
      001552 F1               [10] 4860 	pop	af
      001553 33               [ 6] 4861 	inc	sp
      001554 C1               [10] 4862 	pop	bc
                                   4863 ;src\/Graphics\Graphics.h:362: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001555 04               [ 4] 4864 	inc	b
      001556 18 D8            [12] 4865 	jr	00103$
      001558                       4866 00105$:
                                   4867 ;src\/Graphics\Graphics.h:365: }
      001558 DD E1            [14] 4868 	pop	ix
      00155A C9               [10] 4869 	ret
                                   4870 ;src\/Graphics\Graphics.h:367: void DrawPiece(byte line) {
                                   4871 ;	---------------------------------
                                   4872 ; Function DrawPiece
                                   4873 ; ---------------------------------
      00155B                       4874 _DrawPiece::
                                   4875 ;src\/Graphics\Graphics.h:368: DrawLine(line);
      00155B 21 02 00         [10] 4876 	ld	hl, #2
      00155E 39               [11] 4877 	add	hl, sp
      00155F 7E               [ 7] 4878 	ld	a, (hl)
      001560 F5               [11] 4879 	push	af
      001561 33               [ 6] 4880 	inc	sp
      001562 CDr23r15         [17] 4881 	call	_DrawLine
      001565 33               [ 6] 4882 	inc	sp
                                   4883 ;src\/Graphics\Graphics.h:369: DrawLine(line + 1);
      001566 21 02 00         [10] 4884 	ld	hl, #2
      001569 39               [11] 4885 	add	hl, sp
      00156A 46               [ 7] 4886 	ld	b, (hl)
      00156B 78               [ 4] 4887 	ld	a, b
      00156C 3C               [ 4] 4888 	inc	a
      00156D C5               [11] 4889 	push	bc
      00156E F5               [11] 4890 	push	af
      00156F 33               [ 6] 4891 	inc	sp
      001570 CDr23r15         [17] 4892 	call	_DrawLine
      001573 33               [ 6] 4893 	inc	sp
      001574 C1               [10] 4894 	pop	bc
                                   4895 ;src\/Graphics\Graphics.h:370: DrawLine(line + 2);
      001575 04               [ 4] 4896 	inc	b
      001576 04               [ 4] 4897 	inc	b
      001577 C5               [11] 4898 	push	bc
      001578 33               [ 6] 4899 	inc	sp
      001579 CDr23r15         [17] 4900 	call	_DrawLine
      00157C 33               [ 6] 4901 	inc	sp
                                   4902 ;src\/Graphics\Graphics.h:371: }
      00157D C9               [10] 4903 	ret
                                   4904 ;src\/Graphics\Graphics.h:373: void DrawPlayfield() {
                                   4905 ;	---------------------------------
                                   4906 ; Function DrawPlayfield
                                   4907 ; ---------------------------------
      00157E                       4908 _DrawPlayfield::
                                   4909 ;src\/Graphics\Graphics.h:374: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00157E 06 00            [ 7] 4910 	ld	b, #0x00
      001580                       4911 00103$:
      001580 78               [ 4] 4912 	ld	a, b
      001581 D6 0C            [ 7] 4913 	sub	a, #0x0c
      001583 D0               [11] 4914 	ret	NC
                                   4915 ;src\/Graphics\Graphics.h:375: DrawLine(line);
      001584 C5               [11] 4916 	push	bc
      001585 C5               [11] 4917 	push	bc
      001586 33               [ 6] 4918 	inc	sp
      001587 CDr23r15         [17] 4919 	call	_DrawLine
      00158A 33               [ 6] 4920 	inc	sp
      00158B C1               [10] 4921 	pop	bc
                                   4922 ;src\/Graphics\Graphics.h:374: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00158C 04               [ 4] 4923 	inc	b
                                   4924 ;src\/Graphics\Graphics.h:377: }
      00158D 18 F1            [12] 4925 	jr	00103$
                                   4926 ;src\/Sound.h:1: void SoundFx_2() {
                                   4927 ;	---------------------------------
                                   4928 ; Function SoundFx_2
                                   4929 ; ---------------------------------
      00158F                       4930 _SoundFx_2::
                                   4931 ;src\/Sound.h:2: GICINI();
      00158F CDr00r00         [17] 4932 	call	_GICINI
                                   4933 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001592 21 08 0F         [10] 4934 	ld	hl, #0x0f08
      001595 CDr00r00         [17] 4935 	call	_WRTPSG
                                   4936 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001598 0E 00            [ 7] 4937 	ld	c, #0x00
      00159A                       4938 00104$:
      00159A 79               [ 4] 4939 	ld	a, c
      00159B D6 FF            [ 7] 4940 	sub	a, #0xff
      00159D 30 11            [12] 4941 	jr	NC, 00101$
                                   4942 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      00159F C5               [11] 4943 	push	bc
      0015A0 21 00 5D         [10] 4944 	ld	hl, #0x5d00
      0015A3 CDr00r00         [17] 4945 	call	_WRTPSG
      0015A6 21 01 00         [10] 4946 	ld	hl, #0x0001
      0015A9 CDr00r00         [17] 4947 	call	_WRTPSG
      0015AC C1               [10] 4948 	pop	bc
                                   4949 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0015AD 0C               [ 4] 4950 	inc	c
      0015AE 18 EA            [12] 4951 	jr	00104$
      0015B0                       4952 00101$:
                                   4953 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0015B0 0E 00            [ 7] 4954 	ld	c, #0x00
      0015B2                       4955 00107$:
      0015B2 79               [ 4] 4956 	ld	a, c
      0015B3 D6 FF            [ 7] 4957 	sub	a, #0xff
      0015B5 30 11            [12] 4958 	jr	NC, 00102$
                                   4959 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0015B7 C5               [11] 4960 	push	bc
      0015B8 21 00 2D         [10] 4961 	ld	hl, #0x2d00
      0015BB CDr00r00         [17] 4962 	call	_WRTPSG
      0015BE 21 01 00         [10] 4963 	ld	hl, #0x0001
      0015C1 CDr00r00         [17] 4964 	call	_WRTPSG
      0015C4 C1               [10] 4965 	pop	bc
                                   4966 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0015C5 0C               [ 4] 4967 	inc	c
      0015C6 18 EA            [12] 4968 	jr	00107$
      0015C8                       4969 00102$:
                                   4970 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0015C8 21 08 00         [10] 4971 	ld	hl, #0x0008
                                   4972 ;src\/Sound.h:30: }
      0015CB C3r00r00         [10] 4973 	jp	_WRTPSG
                                   4974 ;src\/Sound.h:32: void SoundFx_1() {
                                   4975 ;	---------------------------------
                                   4976 ; Function SoundFx_1
                                   4977 ; ---------------------------------
      0015CE                       4978 _SoundFx_1::
                                   4979 ;src\/Sound.h:34: GICINI();
      0015CE CDr00r00         [17] 4980 	call	_GICINI
                                   4981 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0015D1 21 06 97         [10] 4982 	ld	hl, #0x9706
      0015D4 CDr00r00         [17] 4983 	call	_WRTPSG
                                   4984 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0015D7 21 07 81         [10] 4985 	ld	hl, #0x8107
      0015DA CDr00r00         [17] 4986 	call	_WRTPSG
                                   4987 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0015DD 21 08 10         [10] 4988 	ld	hl, #0x1008
      0015E0 CDr00r00         [17] 4989 	call	_WRTPSG
                                   4990 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0015E3 21 0C 13         [10] 4991 	ld	hl, #0x130c
      0015E6 CDr00r00         [17] 4992 	call	_WRTPSG
                                   4993 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0015E9 21 0D 01         [10] 4994 	ld	hl, #0x010d
                                   4995 ;src\/Sound.h:49: }
      0015EC C3r00r00         [10] 4996 	jp	_WRTPSG
                                   4997 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4998 ;	---------------------------------
                                   4999 ; Function CheckIfPlayfieldIsValid
                                   5000 ; ---------------------------------
      0015EF                       5001 _CheckIfPlayfieldIsValid::
      0015EF DD E5            [15] 5002 	push	ix
      0015F1 DD 21 00 00      [14] 5003 	ld	ix,#0
      0015F5 DD 39            [15] 5004 	add	ix,sp
      0015F7 F5               [11] 5005 	push	af
      0015F8 F5               [11] 5006 	push	af
      0015F9 3B               [ 6] 5007 	dec	sp
                                   5008 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      0015FA DD 36 FB 00      [19] 5009 	ld	-5 (ix), #0
                                   5010 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0015FE DD 36 FC 00      [19] 5011 	ld	-4 (ix), #0
      001602 DD 36 FE 00      [19] 5012 	ld	-2 (ix), #0
      001606                       5013 00119$:
      001606 DD 7E FE         [19] 5014 	ld	a, -2 (ix)
      001609 D6 0C            [ 7] 5015 	sub	a, #0x0c
      00160B D2r9Er16         [10] 5016 	jp	NC, 00121$
                                   5017 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00160E DD 36 FD 00      [19] 5018 	ld	-3 (ix), #0
      001612 DD 36 FF 00      [19] 5019 	ld	-1 (ix), #0
      001616                       5020 00116$:
      001616 DD 7E FF         [19] 5021 	ld	a, -1 (ix)
      001619 D6 06            [ 7] 5022 	sub	a, #0x06
      00161B 30 75            [12] 5023 	jr	NC, 00120$
                                   5024 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      00161D 0E 00            [ 7] 5025 	ld	c, #0x00
      00161F                       5026 00113$:
      00161F 79               [ 4] 5027 	ld	a, c
      001620 D6 05            [ 7] 5028 	sub	a, #0x05
      001622 30 33            [12] 5029 	jr	NC, 00104$
                                   5030 ;src\/CheckPlayfield.h:7: found = FALSE;
      001624 DD 36 FB 00      [19] 5031 	ld	-5 (ix), #0
                                   5032 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001628 DD 5E FF         [19] 5033 	ld	e, -1 (ix)
      00162B 16 00            [ 7] 5034 	ld	d, #0x00
      00162D 6B               [ 4] 5035 	ld	l, e
      00162E 62               [ 4] 5036 	ld	h, d
      00162F 29               [11] 5037 	add	hl, hl
      001630 19               [11] 5038 	add	hl, de
      001631 29               [11] 5039 	add	hl, hl
      001632 29               [11] 5040 	add	hl, hl
      001633 11r48r00         [10] 5041 	ld	de, #_playfieldTemp
      001636 19               [11] 5042 	add	hl, de
      001637 7D               [ 4] 5043 	ld	a, l
      001638 DD 86 FE         [19] 5044 	add	a, -2 (ix)
      00163B 5F               [ 4] 5045 	ld	e, a
      00163C 7C               [ 4] 5046 	ld	a, h
      00163D CE 00            [ 7] 5047 	adc	a, #0x00
      00163F 57               [ 4] 5048 	ld	d, a
      001640 21r18r00         [10] 5049 	ld	hl, #_pieces
      001643 06 00            [ 7] 5050 	ld	b, #0x00
      001645 09               [11] 5051 	add	hl, bc
      001646 46               [ 7] 5052 	ld	b, (hl)
      001647 1A               [ 7] 5053 	ld	a, (de)
      001648 B8               [ 4] 5054 	cp	a, b
      001649 28 03            [12] 5055 	jr	Z, 00101$
      00164B B7               [ 4] 5056 	or	a, a
      00164C 20 06            [12] 5057 	jr	NZ, 00114$
      00164E                       5058 00101$:
                                   5059 ;src\/CheckPlayfield.h:9: found = TRUE;
      00164E DD 36 FB 01      [19] 5060 	ld	-5 (ix), #0x01
                                   5061 ;src\/CheckPlayfield.h:10: break;
      001652 18 03            [12] 5062 	jr	00104$
      001654                       5063 00114$:
                                   5064 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001654 0C               [ 4] 5065 	inc	c
      001655 18 C8            [12] 5066 	jr	00113$
      001657                       5067 00104$:
                                   5068 ;src\/CheckPlayfield.h:13: if(!found) {
      001657 DD 7E FB         [19] 5069 	ld	a, -5 (ix)
      00165A B7               [ 4] 5070 	or	a, a
      00165B 20 2A            [12] 5071 	jr	NZ, 00117$
                                   5072 ;src\/CheckPlayfield.h:14: d_col = col;
      00165D DD 7E FD         [19] 5073 	ld	a, -3 (ix)
      001660 32r09r00         [13] 5074 	ld	(#_d_col),a
                                   5075 ;src\/CheckPlayfield.h:15: d_line = line;
      001663 DD 7E FC         [19] 5076 	ld	a, -4 (ix)
      001666 32r0Ar00         [13] 5077 	ld	(#_d_line),a
                                   5078 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      001669 DD 4E FD         [19] 5079 	ld	c, -3 (ix)
      00166C 06 00            [ 7] 5080 	ld	b, #0x00
      00166E 69               [ 4] 5081 	ld	l, c
      00166F 60               [ 4] 5082 	ld	h, b
      001670 29               [11] 5083 	add	hl, hl
      001671 09               [11] 5084 	add	hl, bc
      001672 29               [11] 5085 	add	hl, hl
      001673 29               [11] 5086 	add	hl, hl
      001674 11r48r00         [10] 5087 	ld	de, #_playfieldTemp
      001677 19               [11] 5088 	add	hl, de
      001678 DD 5E FC         [19] 5089 	ld	e, -4 (ix)
      00167B 16 00            [ 7] 5090 	ld	d, #0x00
      00167D 19               [11] 5091 	add	hl, de
      00167E 7E               [ 7] 5092 	ld	a, (hl)
      00167F 32r0Br00         [13] 5093 	ld	(_d_value+0), a
                                   5094 ;src\/CheckPlayfield.h:18: while(1) { 
      001682                       5095 00106$:
                                   5096 ;src\/CheckPlayfield.h:19: BEEP();
      001682 CDr00r00         [17] 5097 	call	_BEEP
      001685 18 FB            [12] 5098 	jr	00106$
      001687                       5099 00117$:
                                   5100 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001687 DD 34 FF         [23] 5101 	inc	-1 (ix)
      00168A DD 7E FF         [19] 5102 	ld	a, -1 (ix)
      00168D DD 77 FD         [19] 5103 	ld	-3 (ix), a
      001690 18 84            [12] 5104 	jr	00116$
      001692                       5105 00120$:
                                   5106 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001692 DD 34 FE         [23] 5107 	inc	-2 (ix)
      001695 DD 7E FE         [19] 5108 	ld	a, -2 (ix)
      001698 DD 77 FC         [19] 5109 	ld	-4 (ix), a
      00169B C3r06r16         [10] 5110 	jp	00119$
      00169E                       5111 00121$:
                                   5112 ;src\/CheckPlayfield.h:25: }
      00169E DD F9            [10] 5113 	ld	sp, ix
      0016A0 DD E1            [14] 5114 	pop	ix
      0016A2 C9               [10] 5115 	ret
                                   5116 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   5117 ;	---------------------------------
                                   5118 ; Function CheckPlayfield
                                   5119 ; ---------------------------------
      0016A3                       5120 _CheckPlayfield::
      0016A3 DD E5            [15] 5121 	push	ix
      0016A5 DD 21 00 00      [14] 5122 	ld	ix,#0
      0016A9 DD 39            [15] 5123 	add	ix,sp
      0016AB 21 EF FF         [10] 5124 	ld	hl, #-17
      0016AE 39               [11] 5125 	add	hl, sp
      0016AF F9               [ 6] 5126 	ld	sp, hl
                                   5127 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      0016B0 DD 36 EF 00      [19] 5128 	ld	-17 (ix), #0
                                   5129 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016B4 0E 00            [ 7] 5130 	ld	c, #0x00
      0016B6                       5131 00195$:
      0016B6 79               [ 4] 5132 	ld	a, c
      0016B7 D6 0C            [ 7] 5133 	sub	a, #0x0c
      0016B9 30 36            [12] 5134 	jr	NC, 00102$
                                   5135 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016BB DD 36 FF 00      [19] 5136 	ld	-1 (ix), #0
      0016BF                       5137 00192$:
      0016BF DD 7E FF         [19] 5138 	ld	a, -1 (ix)
      0016C2 D6 06            [ 7] 5139 	sub	a, #0x06
      0016C4 30 28            [12] 5140 	jr	NC, 00196$
                                   5141 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      0016C6 DD 5E FF         [19] 5142 	ld	e, -1 (ix)
      0016C9 16 00            [ 7] 5143 	ld	d, #0x00
      0016CB 6B               [ 4] 5144 	ld	l, e
      0016CC 62               [ 4] 5145 	ld	h, d
      0016CD 29               [11] 5146 	add	hl, hl
      0016CE 19               [11] 5147 	add	hl, de
      0016CF 29               [11] 5148 	add	hl, hl
      0016D0 29               [11] 5149 	add	hl, hl
      0016D1 EB               [ 4] 5150 	ex	de, hl
      0016D2 21r48r00         [10] 5151 	ld	hl, #_playfieldTemp
      0016D5 19               [11] 5152 	add	hl, de
      0016D6 06 00            [ 7] 5153 	ld	b, #0x00
      0016D8 09               [11] 5154 	add	hl, bc
      0016D9 3Er00            [ 7] 5155 	ld	a, #<(_playfield)
      0016DB 83               [ 4] 5156 	add	a, e
      0016DC 5F               [ 4] 5157 	ld	e, a
      0016DD 3Es00            [ 7] 5158 	ld	a, #>(_playfield)
      0016DF 8A               [ 4] 5159 	adc	a, d
      0016E0 57               [ 4] 5160 	ld	d, a
      0016E1 7B               [ 4] 5161 	ld	a, e
      0016E2 81               [ 4] 5162 	add	a, c
      0016E3 5F               [ 4] 5163 	ld	e, a
      0016E4 30 01            [12] 5164 	jr	NC, 00614$
      0016E6 14               [ 4] 5165 	inc	d
      0016E7                       5166 00614$:
      0016E7 1A               [ 7] 5167 	ld	a, (de)
      0016E8 77               [ 7] 5168 	ld	(hl), a
                                   5169 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016E9 DD 34 FF         [23] 5170 	inc	-1 (ix)
      0016EC 18 D1            [12] 5171 	jr	00192$
      0016EE                       5172 00196$:
                                   5173 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016EE 0C               [ 4] 5174 	inc	c
      0016EF 18 C5            [12] 5175 	jr	00195$
      0016F1                       5176 00102$:
                                   5177 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016F1 DD 36 FE 00      [19] 5178 	ld	-2 (ix), #0
      0016F5                       5179 00201$:
      0016F5 DD 7E FE         [19] 5180 	ld	a, -2 (ix)
      0016F8 D6 0C            [ 7] 5181 	sub	a, #0x0c
      0016FA D2rF9r17         [10] 5182 	jp	NC, 00108$
                                   5183 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0016FD DD 36 FF 02      [19] 5184 	ld	-1 (ix), #0x02
      001701                       5185 00198$:
      001701 DD 7E FF         [19] 5186 	ld	a, -1 (ix)
      001704 D6 06            [ 7] 5187 	sub	a, #0x06
      001706 D2rF3r17         [10] 5188 	jp	NC, 00202$
                                   5189 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      001709 DD 4E FF         [19] 5190 	ld	c, -1 (ix)
      00170C 06 00            [ 7] 5191 	ld	b, #0x00
      00170E 69               [ 4] 5192 	ld	l, c
      00170F 60               [ 4] 5193 	ld	h, b
      001710 29               [11] 5194 	add	hl, hl
      001711 09               [11] 5195 	add	hl, bc
      001712 29               [11] 5196 	add	hl, hl
      001713 29               [11] 5197 	add	hl, hl
      001714 DD 75 F5         [19] 5198 	ld	-11 (ix), l
      001717 DD 74 F6         [19] 5199 	ld	-10 (ix), h
      00171A 3Er48            [ 7] 5200 	ld	a, #<(_playfieldTemp)
      00171C DD 86 F5         [19] 5201 	add	a, -11 (ix)
      00171F 4F               [ 4] 5202 	ld	c, a
      001720 3Es00            [ 7] 5203 	ld	a, #>(_playfieldTemp)
      001722 DD 8E F6         [19] 5204 	adc	a, -10 (ix)
      001725 47               [ 4] 5205 	ld	b, a
      001726 79               [ 4] 5206 	ld	a, c
      001727 DD 86 FE         [19] 5207 	add	a, -2 (ix)
      00172A DD 77 F7         [19] 5208 	ld	-9 (ix), a
      00172D 78               [ 4] 5209 	ld	a, b
      00172E CE 00            [ 7] 5210 	adc	a, #0x00
      001730 DD 77 F8         [19] 5211 	ld	-8 (ix), a
      001733 DD 6E F7         [19] 5212 	ld	l, -9 (ix)
      001736 DD 66 F8         [19] 5213 	ld	h, -8 (ix)
      001739 7E               [ 7] 5214 	ld	a, (hl)
      00173A DD 77 F9         [19] 5215 	ld	-7 (ix), a
      00173D B7               [ 4] 5216 	or	a, a
      00173E CArEDr17         [10] 5217 	jp	Z, 00199$
                                   5218 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001741 DD 7E FF         [19] 5219 	ld	a, -1 (ix)
      001744 DD 77 FD         [19] 5220 	ld	-3 (ix), a
      001747 4F               [ 4] 5221 	ld	c, a
      001748 0D               [ 4] 5222 	dec	c
      001749 0D               [ 4] 5223 	dec	c
      00174A 79               [ 4] 5224 	ld	a, c
      00174B 07               [ 4] 5225 	rlca
      00174C 9F               [ 4] 5226 	sbc	a, a
      00174D 47               [ 4] 5227 	ld	b, a
      00174E 69               [ 4] 5228 	ld	l, c
      00174F 60               [ 4] 5229 	ld	h, b
      001750 29               [11] 5230 	add	hl, hl
      001751 09               [11] 5231 	add	hl, bc
      001752 29               [11] 5232 	add	hl, hl
      001753 29               [11] 5233 	add	hl, hl
      001754 EB               [ 4] 5234 	ex	de, hl
      001755 21r48r00         [10] 5235 	ld	hl, #_playfieldTemp
      001758 19               [11] 5236 	add	hl, de
      001759 7D               [ 4] 5237 	ld	a, l
      00175A DD 86 FE         [19] 5238 	add	a, -2 (ix)
      00175D DD 77 FA         [19] 5239 	ld	-6 (ix), a
      001760 7C               [ 4] 5240 	ld	a, h
      001761 CE 00            [ 7] 5241 	adc	a, #0x00
      001763 DD 77 FB         [19] 5242 	ld	-5 (ix), a
      001766 DD 4E FD         [19] 5243 	ld	c, -3 (ix)
      001769 0D               [ 4] 5244 	dec	c
      00176A 79               [ 4] 5245 	ld	a, c
      00176B 07               [ 4] 5246 	rlca
      00176C 9F               [ 4] 5247 	sbc	a, a
      00176D 47               [ 4] 5248 	ld	b, a
      00176E 69               [ 4] 5249 	ld	l, c
      00176F 60               [ 4] 5250 	ld	h, b
      001770 29               [11] 5251 	add	hl, hl
      001771 09               [11] 5252 	add	hl, bc
      001772 29               [11] 5253 	add	hl, hl
      001773 29               [11] 5254 	add	hl, hl
      001774 DD 75 FC         [19] 5255 	ld	-4 (ix), l
      001777 DD 74 FD         [19] 5256 	ld	-3 (ix), h
      00177A 3Er48            [ 7] 5257 	ld	a, #<(_playfieldTemp)
      00177C DD 86 FC         [19] 5258 	add	a, -4 (ix)
      00177F 4F               [ 4] 5259 	ld	c, a
      001780 3Es00            [ 7] 5260 	ld	a, #>(_playfieldTemp)
      001782 DD 8E FD         [19] 5261 	adc	a, -3 (ix)
      001785 47               [ 4] 5262 	ld	b, a
      001786 79               [ 4] 5263 	ld	a, c
      001787 DD 86 FE         [19] 5264 	add	a, -2 (ix)
      00178A 4F               [ 4] 5265 	ld	c, a
      00178B 30 01            [12] 5266 	jr	NC, 00615$
      00178D 04               [ 4] 5267 	inc	b
      00178E                       5268 00615$:
      00178E DD 6E FA         [19] 5269 	ld	l, -6 (ix)
      001791 DD 66 FB         [19] 5270 	ld	h, -5 (ix)
      001794 6E               [ 7] 5271 	ld	l, (hl)
      001795 0A               [ 7] 5272 	ld	a, (bc)
      001796 67               [ 4] 5273 	ld	h, a
      001797 7D               [ 4] 5274 	ld	a, l
      001798 94               [ 4] 5275 	sub	a, h
      001799 20 52            [12] 5276 	jr	NZ, 00199$
                                   5277 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00179B DD 7E F9         [19] 5278 	ld	a, -7 (ix)
      00179E 94               [ 4] 5279 	sub	a, h
      00179F 20 4C            [12] 5280 	jr	NZ, 00199$
                                   5281 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      0017A1 DD 36 EF 01      [19] 5282 	ld	-17 (ix), #0x01
                                   5283 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0017A5 3Er00            [ 7] 5284 	ld	a, #<(_playfield)
      0017A7 83               [ 4] 5285 	add	a, e
      0017A8 5F               [ 4] 5286 	ld	e, a
      0017A9 3Es00            [ 7] 5287 	ld	a, #>(_playfield)
      0017AB 8A               [ 4] 5288 	adc	a, d
      0017AC 57               [ 4] 5289 	ld	d, a
      0017AD 7B               [ 4] 5290 	ld	a, e
      0017AE DD 86 FE         [19] 5291 	add	a, -2 (ix)
      0017B1 5F               [ 4] 5292 	ld	e, a
      0017B2 30 01            [12] 5293 	jr	NC, 00620$
      0017B4 14               [ 4] 5294 	inc	d
      0017B5                       5295 00620$:
      0017B5 7D               [ 4] 5296 	ld	a, l
      0017B6 CB FF            [ 8] 5297 	set	7, a
      0017B8 12               [ 7] 5298 	ld	(de), a
                                   5299 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      0017B9 3Er00            [ 7] 5300 	ld	a, #<(_playfield)
      0017BB DD 86 FC         [19] 5301 	add	a, -4 (ix)
      0017BE 5F               [ 4] 5302 	ld	e, a
      0017BF 3Es00            [ 7] 5303 	ld	a, #>(_playfield)
      0017C1 DD 8E FD         [19] 5304 	adc	a, -3 (ix)
      0017C4 57               [ 4] 5305 	ld	d, a
      0017C5 DD 6E FE         [19] 5306 	ld	l, -2 (ix)
      0017C8 26 00            [ 7] 5307 	ld	h, #0x00
      0017CA 19               [11] 5308 	add	hl, de
      0017CB 0A               [ 7] 5309 	ld	a, (bc)
      0017CC CB FF            [ 8] 5310 	set	7, a
      0017CE 77               [ 7] 5311 	ld	(hl), a
                                   5312 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0017CF 3Er00            [ 7] 5313 	ld	a, #<(_playfield)
      0017D1 DD 86 F5         [19] 5314 	add	a, -11 (ix)
      0017D4 4F               [ 4] 5315 	ld	c, a
      0017D5 3Es00            [ 7] 5316 	ld	a, #>(_playfield)
      0017D7 DD 8E F6         [19] 5317 	adc	a, -10 (ix)
      0017DA 47               [ 4] 5318 	ld	b, a
      0017DB 79               [ 4] 5319 	ld	a, c
      0017DC DD 86 FE         [19] 5320 	add	a, -2 (ix)
      0017DF 4F               [ 4] 5321 	ld	c, a
      0017E0 30 01            [12] 5322 	jr	NC, 00621$
      0017E2 04               [ 4] 5323 	inc	b
      0017E3                       5324 00621$:
      0017E3 DD 6E F7         [19] 5325 	ld	l, -9 (ix)
      0017E6 DD 66 F8         [19] 5326 	ld	h, -8 (ix)
      0017E9 7E               [ 7] 5327 	ld	a, (hl)
      0017EA CB FF            [ 8] 5328 	set	7, a
      0017EC 02               [ 7] 5329 	ld	(bc), a
      0017ED                       5330 00199$:
                                   5331 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0017ED DD 34 FF         [23] 5332 	inc	-1 (ix)
      0017F0 C3r01r17         [10] 5333 	jp	00198$
      0017F3                       5334 00202$:
                                   5335 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0017F3 DD 34 FE         [23] 5336 	inc	-2 (ix)
      0017F6 C3rF5r16         [10] 5337 	jp	00201$
      0017F9                       5338 00108$:
                                   5339 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0017F9 0E 02            [ 7] 5340 	ld	c, #0x02
      0017FB                       5341 00207$:
      0017FB 79               [ 4] 5342 	ld	a, c
      0017FC D6 0C            [ 7] 5343 	sub	a, #0x0c
      0017FE D2rC0r18         [10] 5344 	jp	NC, 00114$
                                   5345 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001801 DD 36 FF 00      [19] 5346 	ld	-1 (ix), #0
      001805                       5347 00204$:
      001805 DD 7E FF         [19] 5348 	ld	a, -1 (ix)
      001808 D6 06            [ 7] 5349 	sub	a, #0x06
      00180A D2rBCr18         [10] 5350 	jp	NC, 00208$
                                   5351 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      00180D DD 5E FF         [19] 5352 	ld	e, -1 (ix)
      001810 16 00            [ 7] 5353 	ld	d, #0x00
      001812 6B               [ 4] 5354 	ld	l, e
      001813 62               [ 4] 5355 	ld	h, d
      001814 29               [11] 5356 	add	hl, hl
      001815 19               [11] 5357 	add	hl, de
      001816 29               [11] 5358 	add	hl, hl
      001817 29               [11] 5359 	add	hl, hl
      001818 DD 75 F7         [19] 5360 	ld	-9 (ix), l
      00181B DD 74 F8         [19] 5361 	ld	-8 (ix), h
      00181E 3Er48            [ 7] 5362 	ld	a, #<(_playfieldTemp)
      001820 DD 86 F7         [19] 5363 	add	a, -9 (ix)
      001823 5F               [ 4] 5364 	ld	e, a
      001824 3Es00            [ 7] 5365 	ld	a, #>(_playfieldTemp)
      001826 DD 8E F8         [19] 5366 	adc	a, -8 (ix)
      001829 57               [ 4] 5367 	ld	d, a
      00182A 7B               [ 4] 5368 	ld	a, e
      00182B 81               [ 4] 5369 	add	a, c
      00182C DD 77 F9         [19] 5370 	ld	-7 (ix), a
      00182F 7A               [ 4] 5371 	ld	a, d
      001830 CE 00            [ 7] 5372 	adc	a, #0x00
      001832 DD 77 FA         [19] 5373 	ld	-6 (ix), a
      001835 DD 6E F9         [19] 5374 	ld	l, -7 (ix)
      001838 DD 66 FA         [19] 5375 	ld	h, -6 (ix)
      00183B 7E               [ 7] 5376 	ld	a, (hl)
      00183C DD 77 FE         [19] 5377 	ld	-2 (ix), a
      00183F B7               [ 4] 5378 	or	a, a
      001840 28 74            [12] 5379 	jr	Z, 00205$
                                   5380 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001842 DD 71 FD         [19] 5381 	ld	-3 (ix), c
      001845 79               [ 4] 5382 	ld	a, c
      001846 C6 FE            [ 7] 5383 	add	a, #0xfe
      001848 DD 77 FB         [19] 5384 	ld	-5 (ix), a
      00184B 6F               [ 4] 5385 	ld	l, a
      00184C 26 00            [ 7] 5386 	ld	h, #0x00
      00184E 19               [11] 5387 	add	hl, de
      00184F DD 46 FD         [19] 5388 	ld	b, -3 (ix)
      001852 05               [ 4] 5389 	dec	b
      001853 7B               [ 4] 5390 	ld	a, e
      001854 80               [ 4] 5391 	add	a, b
      001855 5F               [ 4] 5392 	ld	e, a
      001856 30 01            [12] 5393 	jr	NC, 00622$
      001858 14               [ 4] 5394 	inc	d
      001859                       5395 00622$:
      001859 7E               [ 7] 5396 	ld	a, (hl)
      00185A DD 77 FC         [19] 5397 	ld	-4 (ix), a
      00185D 1A               [ 7] 5398 	ld	a, (de)
      00185E 6F               [ 4] 5399 	ld	l, a
      00185F DD 7E FC         [19] 5400 	ld	a, -4 (ix)
      001862 95               [ 4] 5401 	sub	a, l
      001863 20 51            [12] 5402 	jr	NZ, 00205$
                                   5403 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001865 DD 7E FE         [19] 5404 	ld	a, -2 (ix)
      001868 95               [ 4] 5405 	sub	a, l
      001869 20 4B            [12] 5406 	jr	NZ, 00205$
                                   5407 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      00186B DD 36 EF 01      [19] 5408 	ld	-17 (ix), #0x01
                                   5409 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00186F 3Er00            [ 7] 5410 	ld	a, #<(_playfield)
      001871 DD 86 F7         [19] 5411 	add	a, -9 (ix)
      001874 DD 77 FD         [19] 5412 	ld	-3 (ix), a
      001877 3Es00            [ 7] 5413 	ld	a, #>(_playfield)
      001879 DD 8E F8         [19] 5414 	adc	a, -8 (ix)
      00187C DD 77 FE         [19] 5415 	ld	-2 (ix), a
      00187F DD 7E FD         [19] 5416 	ld	a, -3 (ix)
      001882 DD 86 FB         [19] 5417 	add	a, -5 (ix)
      001885 6F               [ 4] 5418 	ld	l, a
      001886 DD 7E FE         [19] 5419 	ld	a, -2 (ix)
      001889 CE 00            [ 7] 5420 	adc	a, #0x00
      00188B 67               [ 4] 5421 	ld	h, a
      00188C DD 7E FC         [19] 5422 	ld	a, -4 (ix)
      00188F CB FF            [ 8] 5423 	set	7, a
      001891 77               [ 7] 5424 	ld	(hl), a
                                   5425 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001892 DD 7E FD         [19] 5426 	ld	a, -3 (ix)
      001895 80               [ 4] 5427 	add	a, b
      001896 6F               [ 4] 5428 	ld	l, a
      001897 DD 7E FE         [19] 5429 	ld	a, -2 (ix)
      00189A CE 00            [ 7] 5430 	adc	a, #0x00
      00189C 67               [ 4] 5431 	ld	h, a
      00189D 1A               [ 7] 5432 	ld	a, (de)
      00189E CB FF            [ 8] 5433 	set	7, a
      0018A0 77               [ 7] 5434 	ld	(hl), a
                                   5435 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0018A1 DD 7E FD         [19] 5436 	ld	a, -3 (ix)
      0018A4 81               [ 4] 5437 	add	a, c
      0018A5 5F               [ 4] 5438 	ld	e, a
      0018A6 DD 7E FE         [19] 5439 	ld	a, -2 (ix)
      0018A9 CE 00            [ 7] 5440 	adc	a, #0x00
      0018AB 57               [ 4] 5441 	ld	d, a
      0018AC DD 6E F9         [19] 5442 	ld	l, -7 (ix)
      0018AF DD 66 FA         [19] 5443 	ld	h, -6 (ix)
      0018B2 7E               [ 7] 5444 	ld	a, (hl)
      0018B3 CB FF            [ 8] 5445 	set	7, a
      0018B5 12               [ 7] 5446 	ld	(de), a
      0018B6                       5447 00205$:
                                   5448 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018B6 DD 34 FF         [23] 5449 	inc	-1 (ix)
      0018B9 C3r05r18         [10] 5450 	jp	00204$
      0018BC                       5451 00208$:
                                   5452 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0018BC 0C               [ 4] 5453 	inc	c
      0018BD C3rFBr17         [10] 5454 	jp	00207$
      0018C0                       5455 00114$:
                                   5456 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0018C0 DD 36 FE 02      [19] 5457 	ld	-2 (ix), #0x02
      0018C4                       5458 00213$:
      0018C4 DD 7E FE         [19] 5459 	ld	a, -2 (ix)
      0018C7 D6 0C            [ 7] 5460 	sub	a, #0x0c
      0018C9 D2r67r1A         [10] 5461 	jp	NC, 00124$
                                   5462 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0018CC DD 36 FF 02      [19] 5463 	ld	-1 (ix), #0x02
      0018D0                       5464 00210$:
      0018D0 DD 7E FF         [19] 5465 	ld	a, -1 (ix)
      0018D3 D6 06            [ 7] 5466 	sub	a, #0x06
      0018D5 D2r61r1A         [10] 5467 	jp	NC, 00214$
                                   5468 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0018D8 DD 4E FF         [19] 5469 	ld	c, -1 (ix)
      0018DB 06 00            [ 7] 5470 	ld	b, #0x00
      0018DD 69               [ 4] 5471 	ld	l, c
      0018DE 60               [ 4] 5472 	ld	h, b
      0018DF 29               [11] 5473 	add	hl, hl
      0018E0 09               [11] 5474 	add	hl, bc
      0018E1 29               [11] 5475 	add	hl, hl
      0018E2 29               [11] 5476 	add	hl, hl
      0018E3 DD 75 F0         [19] 5477 	ld	-16 (ix), l
      0018E6 DD 74 F1         [19] 5478 	ld	-15 (ix), h
      0018E9 3Er48            [ 7] 5479 	ld	a, #<(_playfieldTemp)
      0018EB DD 86 F0         [19] 5480 	add	a, -16 (ix)
      0018EE 4F               [ 4] 5481 	ld	c, a
      0018EF 3Es00            [ 7] 5482 	ld	a, #>(_playfieldTemp)
      0018F1 DD 8E F1         [19] 5483 	adc	a, -15 (ix)
      0018F4 47               [ 4] 5484 	ld	b, a
      0018F5 79               [ 4] 5485 	ld	a, c
      0018F6 DD 86 FE         [19] 5486 	add	a, -2 (ix)
      0018F9 DD 77 F2         [19] 5487 	ld	-14 (ix), a
      0018FC 78               [ 4] 5488 	ld	a, b
      0018FD CE 00            [ 7] 5489 	adc	a, #0x00
      0018FF DD 77 F3         [19] 5490 	ld	-13 (ix), a
      001902 DD 6E F2         [19] 5491 	ld	l, -14 (ix)
      001905 DD 66 F3         [19] 5492 	ld	h, -13 (ix)
      001908 5E               [ 7] 5493 	ld	e, (hl)
                                   5494 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001909 DD 56 FF         [19] 5495 	ld	d, -1 (ix)
      00190C DD 66 FE         [19] 5496 	ld	h, -2 (ix)
      00190F 6A               [ 4] 5497 	ld	l, d
      001910 2D               [ 4] 5498 	dec	l
      001911 2D               [ 4] 5499 	dec	l
      001912 7C               [ 4] 5500 	ld	a, h
      001913 C6 FE            [ 7] 5501 	add	a, #0xfe
      001915 DD 77 F4         [19] 5502 	ld	-12 (ix), a
      001918 15               [ 4] 5503 	dec	d
      001919 7C               [ 4] 5504 	ld	a, h
      00191A C6 FF            [ 7] 5505 	add	a, #0xff
      00191C DD 77 F5         [19] 5506 	ld	-11 (ix), a
      00191F D5               [11] 5507 	push	de
      001920 5D               [ 4] 5508 	ld	e, l
      001921 7B               [ 4] 5509 	ld	a, e
      001922 07               [ 4] 5510 	rlca
      001923 9F               [ 4] 5511 	sbc	a, a
      001924 57               [ 4] 5512 	ld	d, a
      001925 6B               [ 4] 5513 	ld	l, e
      001926 62               [ 4] 5514 	ld	h, d
      001927 29               [11] 5515 	add	hl, hl
      001928 19               [11] 5516 	add	hl, de
      001929 29               [11] 5517 	add	hl, hl
      00192A 29               [11] 5518 	add	hl, hl
      00192B D1               [10] 5519 	pop	de
      00192C DD 75 F6         [19] 5520 	ld	-10 (ix), l
      00192F DD 74 F7         [19] 5521 	ld	-9 (ix), h
      001932 D5               [11] 5522 	push	de
      001933 5A               [ 4] 5523 	ld	e, d
      001934 7B               [ 4] 5524 	ld	a, e
      001935 07               [ 4] 5525 	rlca
      001936 9F               [ 4] 5526 	sbc	a, a
      001937 57               [ 4] 5527 	ld	d, a
      001938 6B               [ 4] 5528 	ld	l, e
      001939 62               [ 4] 5529 	ld	h, d
      00193A 29               [11] 5530 	add	hl, hl
      00193B 19               [11] 5531 	add	hl, de
      00193C 29               [11] 5532 	add	hl, hl
      00193D 29               [11] 5533 	add	hl, hl
      00193E D1               [10] 5534 	pop	de
      00193F DD 75 F8         [19] 5535 	ld	-8 (ix), l
      001942 DD 74 F9         [19] 5536 	ld	-7 (ix), h
      001945 3Er48            [ 7] 5537 	ld	a, #<(_playfieldTemp)
      001947 DD 86 F6         [19] 5538 	add	a, -10 (ix)
      00194A DD 77 FA         [19] 5539 	ld	-6 (ix), a
      00194D 3Es00            [ 7] 5540 	ld	a, #>(_playfieldTemp)
      00194F DD 8E F7         [19] 5541 	adc	a, -9 (ix)
      001952 DD 77 FB         [19] 5542 	ld	-5 (ix), a
      001955 3Er48            [ 7] 5543 	ld	a, #<(_playfieldTemp)
      001957 DD 86 F8         [19] 5544 	add	a, -8 (ix)
      00195A 57               [ 4] 5545 	ld	d, a
      00195B 3Es00            [ 7] 5546 	ld	a, #>(_playfieldTemp)
      00195D DD 8E F9         [19] 5547 	adc	a, -7 (ix)
      001960 6F               [ 4] 5548 	ld	l, a
      001961 7A               [ 4] 5549 	ld	a, d
      001962 DD 86 F5         [19] 5550 	add	a, -11 (ix)
      001965 DD 77 FC         [19] 5551 	ld	-4 (ix), a
      001968 7D               [ 4] 5552 	ld	a, l
      001969 CE 00            [ 7] 5553 	adc	a, #0x00
      00196B DD 77 FD         [19] 5554 	ld	-3 (ix), a
                                   5555 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      00196E 7B               [ 4] 5556 	ld	a, e
      00196F B7               [ 4] 5557 	or	a, a
      001970 28 74            [12] 5558 	jr	Z, 00116$
                                   5559 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001972 DD 7E FA         [19] 5560 	ld	a, -6 (ix)
      001975 DD 86 F4         [19] 5561 	add	a, -12 (ix)
      001978 6F               [ 4] 5562 	ld	l, a
      001979 DD 7E FB         [19] 5563 	ld	a, -5 (ix)
      00197C CE 00            [ 7] 5564 	adc	a, #0x00
      00197E 67               [ 4] 5565 	ld	h, a
      00197F 56               [ 7] 5566 	ld	d, (hl)
      001980 DD 6E FC         [19] 5567 	ld	l, -4 (ix)
      001983 DD 66 FD         [19] 5568 	ld	h, -3 (ix)
      001986 6E               [ 7] 5569 	ld	l, (hl)
      001987 7A               [ 4] 5570 	ld	a, d
      001988 95               [ 4] 5571 	sub	a, l
      001989 20 5B            [12] 5572 	jr	NZ, 00116$
                                   5573 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      00198B 7B               [ 4] 5574 	ld	a, e
      00198C 95               [ 4] 5575 	sub	a, l
      00198D 20 57            [12] 5576 	jr	NZ, 00116$
                                   5577 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      00198F DD 36 EF 01      [19] 5578 	ld	-17 (ix), #0x01
                                   5579 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001993 3Er00            [ 7] 5580 	ld	a, #<(_playfield)
      001995 DD 86 F6         [19] 5581 	add	a, -10 (ix)
      001998 5F               [ 4] 5582 	ld	e, a
      001999 3Es00            [ 7] 5583 	ld	a, #>(_playfield)
      00199B DD 8E F7         [19] 5584 	adc	a, -9 (ix)
      00199E 67               [ 4] 5585 	ld	h, a
      00199F 7B               [ 4] 5586 	ld	a, e
      0019A0 DD 86 F4         [19] 5587 	add	a, -12 (ix)
      0019A3 6F               [ 4] 5588 	ld	l, a
      0019A4 30 01            [12] 5589 	jr	NC, 00631$
      0019A6 24               [ 4] 5590 	inc	h
      0019A7                       5591 00631$:
      0019A7 CB FA            [ 8] 5592 	set	7, d
      0019A9 72               [ 7] 5593 	ld	(hl), d
                                   5594 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0019AA 3Er00            [ 7] 5595 	ld	a, #<(_playfield)
      0019AC DD 86 F8         [19] 5596 	add	a, -8 (ix)
      0019AF 5F               [ 4] 5597 	ld	e, a
      0019B0 3Es00            [ 7] 5598 	ld	a, #>(_playfield)
      0019B2 DD 8E F9         [19] 5599 	adc	a, -7 (ix)
      0019B5 57               [ 4] 5600 	ld	d, a
      0019B6 7B               [ 4] 5601 	ld	a, e
      0019B7 DD 86 F5         [19] 5602 	add	a, -11 (ix)
      0019BA 5F               [ 4] 5603 	ld	e, a
      0019BB 30 01            [12] 5604 	jr	NC, 00632$
      0019BD 14               [ 4] 5605 	inc	d
      0019BE                       5606 00632$:
      0019BE DD 6E FC         [19] 5607 	ld	l, -4 (ix)
      0019C1 DD 66 FD         [19] 5608 	ld	h, -3 (ix)
      0019C4 7E               [ 7] 5609 	ld	a, (hl)
      0019C5 CB FF            [ 8] 5610 	set	7, a
      0019C7 12               [ 7] 5611 	ld	(de), a
                                   5612 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      0019C8 3Er00            [ 7] 5613 	ld	a, #<(_playfield)
      0019CA DD 86 F0         [19] 5614 	add	a, -16 (ix)
      0019CD 5F               [ 4] 5615 	ld	e, a
      0019CE 3Es00            [ 7] 5616 	ld	a, #>(_playfield)
      0019D0 DD 8E F1         [19] 5617 	adc	a, -15 (ix)
      0019D3 57               [ 4] 5618 	ld	d, a
      0019D4 7B               [ 4] 5619 	ld	a, e
      0019D5 DD 86 FE         [19] 5620 	add	a, -2 (ix)
      0019D8 5F               [ 4] 5621 	ld	e, a
      0019D9 30 01            [12] 5622 	jr	NC, 00633$
      0019DB 14               [ 4] 5623 	inc	d
      0019DC                       5624 00633$:
      0019DC DD 6E F2         [19] 5625 	ld	l, -14 (ix)
      0019DF DD 66 F3         [19] 5626 	ld	h, -13 (ix)
      0019E2 7E               [ 7] 5627 	ld	a, (hl)
      0019E3 CB FF            [ 8] 5628 	set	7, a
      0019E5 12               [ 7] 5629 	ld	(de), a
      0019E6                       5630 00116$:
                                   5631 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      0019E6 DD 6E F4         [19] 5632 	ld	l, -12 (ix)
      0019E9 26 00            [ 7] 5633 	ld	h, #0x00
      0019EB 09               [11] 5634 	add	hl, bc
      0019EC 4E               [ 7] 5635 	ld	c, (hl)
      0019ED 79               [ 4] 5636 	ld	a, c
      0019EE B7               [ 4] 5637 	or	a, a
      0019EF 28 6A            [12] 5638 	jr	Z, 00211$
                                   5639 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      0019F1 DD 7E FA         [19] 5640 	ld	a, -6 (ix)
      0019F4 DD 86 FE         [19] 5641 	add	a, -2 (ix)
      0019F7 5F               [ 4] 5642 	ld	e, a
      0019F8 DD 7E FB         [19] 5643 	ld	a, -5 (ix)
      0019FB CE 00            [ 7] 5644 	adc	a, #0x00
      0019FD 57               [ 4] 5645 	ld	d, a
      0019FE DD 6E FC         [19] 5646 	ld	l, -4 (ix)
      001A01 DD 66 FD         [19] 5647 	ld	h, -3 (ix)
      001A04 46               [ 7] 5648 	ld	b, (hl)
      001A05 1A               [ 7] 5649 	ld	a, (de)
      001A06 B8               [ 4] 5650 	cp	a, b
      001A07 20 52            [12] 5651 	jr	NZ, 00211$
                                   5652 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001A09 91               [ 4] 5653 	sub	a, c
      001A0A 20 4F            [12] 5654 	jr	NZ, 00211$
                                   5655 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      001A0C DD 36 EF 01      [19] 5656 	ld	-17 (ix), #0x01
                                   5657 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001A10 3Er00            [ 7] 5658 	ld	a, #<(_playfield)
      001A12 DD 86 F0         [19] 5659 	add	a, -16 (ix)
      001A15 47               [ 4] 5660 	ld	b, a
      001A16 3Es00            [ 7] 5661 	ld	a, #>(_playfield)
      001A18 DD 8E F1         [19] 5662 	adc	a, -15 (ix)
      001A1B 67               [ 4] 5663 	ld	h, a
      001A1C 78               [ 4] 5664 	ld	a, b
      001A1D DD 86 F4         [19] 5665 	add	a, -12 (ix)
      001A20 6F               [ 4] 5666 	ld	l, a
      001A21 30 01            [12] 5667 	jr	NC, 00638$
      001A23 24               [ 4] 5668 	inc	h
      001A24                       5669 00638$:
      001A24 CB F9            [ 8] 5670 	set	7, c
      001A26 71               [ 7] 5671 	ld	(hl), c
                                   5672 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001A27 3Er00            [ 7] 5673 	ld	a, #<(_playfield)
      001A29 DD 86 F8         [19] 5674 	add	a, -8 (ix)
      001A2C 4F               [ 4] 5675 	ld	c, a
      001A2D 3Es00            [ 7] 5676 	ld	a, #>(_playfield)
      001A2F DD 8E F9         [19] 5677 	adc	a, -7 (ix)
      001A32 47               [ 4] 5678 	ld	b, a
      001A33 79               [ 4] 5679 	ld	a, c
      001A34 DD 86 F5         [19] 5680 	add	a, -11 (ix)
      001A37 4F               [ 4] 5681 	ld	c, a
      001A38 30 01            [12] 5682 	jr	NC, 00639$
      001A3A 04               [ 4] 5683 	inc	b
      001A3B                       5684 00639$:
      001A3B DD 6E FC         [19] 5685 	ld	l, -4 (ix)
      001A3E DD 66 FD         [19] 5686 	ld	h, -3 (ix)
      001A41 7E               [ 7] 5687 	ld	a, (hl)
      001A42 CB FF            [ 8] 5688 	set	7, a
      001A44 02               [ 7] 5689 	ld	(bc), a
                                   5690 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001A45 3Er00            [ 7] 5691 	ld	a, #<(_playfield)
      001A47 DD 86 F6         [19] 5692 	add	a, -10 (ix)
      001A4A 4F               [ 4] 5693 	ld	c, a
      001A4B 3Es00            [ 7] 5694 	ld	a, #>(_playfield)
      001A4D DD 8E F7         [19] 5695 	adc	a, -9 (ix)
      001A50 47               [ 4] 5696 	ld	b, a
      001A51 DD 6E FE         [19] 5697 	ld	l, -2 (ix)
      001A54 26 00            [ 7] 5698 	ld	h, #0x00
      001A56 09               [11] 5699 	add	hl, bc
      001A57 1A               [ 7] 5700 	ld	a, (de)
      001A58 CB FF            [ 8] 5701 	set	7, a
      001A5A 77               [ 7] 5702 	ld	(hl), a
      001A5B                       5703 00211$:
                                   5704 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A5B DD 34 FF         [23] 5705 	inc	-1 (ix)
      001A5E C3rD0r18         [10] 5706 	jp	00210$
      001A61                       5707 00214$:
                                   5708 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A61 DD 34 FE         [23] 5709 	inc	-2 (ix)
      001A64 C3rC4r18         [10] 5710 	jp	00213$
      001A67                       5711 00124$:
                                   5712 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      001A67 DD 7E EF         [19] 5713 	ld	a, -17 (ix)
      001A6A B7               [ 4] 5714 	or	a, a
      001A6B CAr7Fr1E         [10] 5715 	jp	Z, 00236$
                                   5716 ;src\/CheckPlayfield.h:106: byte x = 255, y = 0;
      001A6E DD 36 F5 FF      [19] 5717 	ld	-11 (ix), #0xff
      001A72 DD 36 F6 00      [19] 5718 	ld	-10 (ix), #0
                                   5719 ;src\/CheckPlayfield.h:108: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001A76 DD 36 F7 05      [19] 5720 	ld	-9 (ix), #0x05
      001A7A DD 36 F8 00      [19] 5721 	ld	-8 (ix), #0
                                   5722 ;src\/CheckPlayfield.h:109: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001A7E DD 36 F9 0B      [19] 5723 	ld	-7 (ix), #0x0b
      001A82 DD 36 FA 00      [19] 5724 	ld	-6 (ix), #0
                                   5725 ;src\/CheckPlayfield.h:111: HideArrowSprite();
      001A86 CDr08r0A         [17] 5726 	call	_HideArrowSprite
                                   5727 ;src\/CheckPlayfield.h:113: SoundFx_2();
      001A89 CDr8Fr15         [17] 5728 	call	_SoundFx_2
                                   5729 ;src\/CheckPlayfield.h:116: numberPiecesRemoved = 0;
      001A8C DD 36 FB 00      [19] 5730 	ld	-5 (ix), #0
                                   5731 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A90 DD 36 FF 00      [19] 5732 	ld	-1 (ix), #0
      001A94                       5733 00219$:
      001A94 DD 7E FF         [19] 5734 	ld	a, -1 (ix)
      001A97 D6 0C            [ 7] 5735 	sub	a, #0x0c
      001A99 30 5F            [12] 5736 	jr	NC, 00136$
                                   5737 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A9B DD 5E FB         [19] 5738 	ld	e, -5 (ix)
      001A9E 06 00            [ 7] 5739 	ld	b, #0x00
      001AA0                       5740 00216$:
      001AA0 78               [ 4] 5741 	ld	a, b
      001AA1 D6 06            [ 7] 5742 	sub	a, #0x06
      001AA3 30 4D            [12] 5743 	jr	NC, 00319$
                                   5744 ;src\/CheckPlayfield.h:119: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001AA5 D5               [11] 5745 	push	de
      001AA6 58               [ 4] 5746 	ld	e, b
      001AA7 16 00            [ 7] 5747 	ld	d, #0x00
      001AA9 6B               [ 4] 5748 	ld	l, e
      001AAA 62               [ 4] 5749 	ld	h, d
      001AAB 29               [11] 5750 	add	hl, hl
      001AAC 19               [11] 5751 	add	hl, de
      001AAD 29               [11] 5752 	add	hl, hl
      001AAE 29               [11] 5753 	add	hl, hl
      001AAF 11r00r00         [10] 5754 	ld	de, #_playfield
      001AB2 19               [11] 5755 	add	hl, de
      001AB3 D1               [10] 5756 	pop	de
      001AB4 7D               [ 4] 5757 	ld	a, l
      001AB5 DD 86 FF         [19] 5758 	add	a, -1 (ix)
      001AB8 6F               [ 4] 5759 	ld	l, a
      001AB9 30 01            [12] 5760 	jr	NC, 00640$
      001ABB 24               [ 4] 5761 	inc	h
      001ABC                       5762 00640$:
      001ABC 7E               [ 7] 5763 	ld	a, (hl)
      001ABD 07               [ 4] 5764 	rlca
      001ABE 30 2F            [12] 5765 	jr	NC, 00217$
                                   5766 ;src\/CheckPlayfield.h:120: numberPiecesRemoved++;
      001AC0 1C               [ 4] 5767 	inc	e
                                   5768 ;src\/CheckPlayfield.h:122: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001AC1 78               [ 4] 5769 	ld	a, b
      001AC2 DD 96 F7         [19] 5770 	sub	a, -9 (ix)
      001AC5 30 03            [12] 5771 	jr	NC, 00126$
      001AC7 DD 70 F7         [19] 5772 	ld	-9 (ix), b
      001ACA                       5773 00126$:
                                   5774 ;src\/CheckPlayfield.h:123: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001ACA DD 7E F8         [19] 5775 	ld	a, -8 (ix)
      001ACD 90               [ 4] 5776 	sub	a, b
      001ACE 30 03            [12] 5777 	jr	NC, 00128$
      001AD0 DD 70 F8         [19] 5778 	ld	-8 (ix), b
      001AD3                       5779 00128$:
                                   5780 ;src\/CheckPlayfield.h:124: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001AD3 DD 7E FF         [19] 5781 	ld	a, -1 (ix)
      001AD6 DD 96 F9         [19] 5782 	sub	a, -7 (ix)
      001AD9 30 06            [12] 5783 	jr	NC, 00130$
      001ADB DD 7E FF         [19] 5784 	ld	a, -1 (ix)
      001ADE DD 77 F9         [19] 5785 	ld	-7 (ix), a
      001AE1                       5786 00130$:
                                   5787 ;src\/CheckPlayfield.h:125: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001AE1 DD 7E FA         [19] 5788 	ld	a, -6 (ix)
      001AE4 DD 96 FF         [19] 5789 	sub	a, -1 (ix)
      001AE7 30 06            [12] 5790 	jr	NC, 00217$
      001AE9 DD 7E FF         [19] 5791 	ld	a, -1 (ix)
      001AEC DD 77 FA         [19] 5792 	ld	-6 (ix), a
      001AEF                       5793 00217$:
                                   5794 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001AEF 04               [ 4] 5795 	inc	b
      001AF0 18 AE            [12] 5796 	jr	00216$
      001AF2                       5797 00319$:
      001AF2 DD 73 FB         [19] 5798 	ld	-5 (ix), e
                                   5799 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001AF5 DD 34 FF         [23] 5800 	inc	-1 (ix)
      001AF8 18 9A            [12] 5801 	jr	00219$
      001AFA                       5802 00136$:
                                   5803 ;src\/CheckPlayfield.h:131: DrawNumber(numberPiecesRemoved, 0, 0);//test
      001AFA DD 4E FB         [19] 5804 	ld	c, -5 (ix)
      001AFD 06 00            [ 7] 5805 	ld	b, #0x00
      001AFF AF               [ 4] 5806 	xor	a, a
      001B00 F5               [11] 5807 	push	af
      001B01 33               [ 6] 5808 	inc	sp
      001B02 AF               [ 4] 5809 	xor	a, a
      001B03 F5               [11] 5810 	push	af
      001B04 33               [ 6] 5811 	inc	sp
      001B05 C5               [11] 5812 	push	bc
      001B06 CDrE3r0D         [17] 5813 	call	_DrawNumber
      001B09 F1               [10] 5814 	pop	af
      001B0A F1               [10] 5815 	pop	af
                                   5816 ;src\/CheckPlayfield.h:132: DrawNumber(iteration, 0, 1);//test
      001B0B DD 4E 04         [19] 5817 	ld	c, 4 (ix)
      001B0E 06 00            [ 7] 5818 	ld	b, #0x00
      001B10 3E 01            [ 7] 5819 	ld	a, #0x01
      001B12 F5               [11] 5820 	push	af
      001B13 33               [ 6] 5821 	inc	sp
      001B14 AF               [ 4] 5822 	xor	a, a
      001B15 F5               [11] 5823 	push	af
      001B16 33               [ 6] 5824 	inc	sp
      001B17 C5               [11] 5825 	push	bc
      001B18 CDrE3r0D         [17] 5826 	call	_DrawNumber
      001B1B F1               [10] 5827 	pop	af
      001B1C F1               [10] 5828 	pop	af
                                   5829 ;src\/CheckPlayfield.h:133: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      001B1D DD 4E F7         [19] 5830 	ld	c, -9 (ix)
      001B20 06 00            [ 7] 5831 	ld	b, #0x00
      001B22 3E 0D            [ 7] 5832 	ld	a, #0x0d
      001B24 F5               [11] 5833 	push	af
      001B25 33               [ 6] 5834 	inc	sp
      001B26 AF               [ 4] 5835 	xor	a, a
      001B27 F5               [11] 5836 	push	af
      001B28 33               [ 6] 5837 	inc	sp
      001B29 C5               [11] 5838 	push	bc
      001B2A CDrE3r0D         [17] 5839 	call	_DrawNumber
      001B2D F1               [10] 5840 	pop	af
      001B2E F1               [10] 5841 	pop	af
                                   5842 ;src\/CheckPlayfield.h:134: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      001B2F DD 4E F8         [19] 5843 	ld	c, -8 (ix)
      001B32 06 00            [ 7] 5844 	ld	b, #0x00
      001B34 3E 0E            [ 7] 5845 	ld	a, #0x0e
      001B36 F5               [11] 5846 	push	af
      001B37 33               [ 6] 5847 	inc	sp
      001B38 AF               [ 4] 5848 	xor	a, a
      001B39 F5               [11] 5849 	push	af
      001B3A 33               [ 6] 5850 	inc	sp
      001B3B C5               [11] 5851 	push	bc
      001B3C CDrE3r0D         [17] 5852 	call	_DrawNumber
      001B3F F1               [10] 5853 	pop	af
      001B40 F1               [10] 5854 	pop	af
                                   5855 ;src\/CheckPlayfield.h:135: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      001B41 DD 4E F9         [19] 5856 	ld	c, -7 (ix)
      001B44 06 00            [ 7] 5857 	ld	b, #0x00
      001B46 3E 10            [ 7] 5858 	ld	a, #0x10
      001B48 F5               [11] 5859 	push	af
      001B49 33               [ 6] 5860 	inc	sp
      001B4A AF               [ 4] 5861 	xor	a, a
      001B4B F5               [11] 5862 	push	af
      001B4C 33               [ 6] 5863 	inc	sp
      001B4D C5               [11] 5864 	push	bc
      001B4E CDrE3r0D         [17] 5865 	call	_DrawNumber
      001B51 F1               [10] 5866 	pop	af
      001B52 F1               [10] 5867 	pop	af
                                   5868 ;src\/CheckPlayfield.h:136: DrawNumber(upmostPieceRemoved, 0, 17);//test
      001B53 DD 4E FA         [19] 5869 	ld	c, -6 (ix)
      001B56 06 00            [ 7] 5870 	ld	b, #0x00
      001B58 3E 11            [ 7] 5871 	ld	a, #0x11
      001B5A F5               [11] 5872 	push	af
      001B5B 33               [ 6] 5873 	inc	sp
      001B5C AF               [ 4] 5874 	xor	a, a
      001B5D F5               [11] 5875 	push	af
      001B5E 33               [ 6] 5876 	inc	sp
      001B5F C5               [11] 5877 	push	bc
      001B60 CDrE3r0D         [17] 5878 	call	_DrawNumber
      001B63 F1               [10] 5879 	pop	af
      001B64 F1               [10] 5880 	pop	af
                                   5881 ;src\/CheckPlayfield.h:139: while(counter-- > 0) {
      001B65 DD 36 FF 48      [19] 5882 	ld	-1 (ix), #0x48
      001B69                       5883 00166$:
      001B69 DD 4E FF         [19] 5884 	ld	c, -1 (ix)
      001B6C DD 35 FF         [23] 5885 	dec	-1 (ix)
      001B6F 79               [ 4] 5886 	ld	a, c
      001B70 B7               [ 4] 5887 	or	a, a
      001B71 CAr19r1D         [10] 5888 	jp	Z, 00168$
                                   5889 ;src\/CheckPlayfield.h:141: word lastJiffy = JIFFY;
      001B74 ED 5B 9E FC      [20] 5890 	ld	de, (_JIFFY)
                                   5891 ;src\/CheckPlayfield.h:142: while (lastJiffy == JIFFY) {
      001B78                       5892 00137$:
      001B78 2A 9E FC         [16] 5893 	ld	hl, (_JIFFY)
      001B7B BF               [ 4] 5894 	cp	a, a
      001B7C ED 52            [15] 5895 	sbc	hl, de
      001B7E 28 F8            [12] 5896 	jr	Z, 00137$
                                   5897 ;src\/CheckPlayfield.h:148: if(numberPiecesRemoved >= 3) {
      001B80 DD 7E FB         [19] 5898 	ld	a, -5 (ix)
      001B83 D6 03            [ 7] 5899 	sub	a, #0x03
      001B85 DAr37r1C         [10] 5900 	jp	C, 00300$
                                   5901 ;src\/CheckPlayfield.h:150: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001B88 DD 7E FB         [19] 5902 	ld	a, -5 (ix)
      001B8B D6 07            [ 7] 5903 	sub	a, #0x07
      001B8D 38 04            [12] 5904 	jr	C, 00141$
      001B8F DD 36 FB 07      [19] 5905 	ld	-5 (ix), #0x07
      001B93                       5906 00141$:
                                   5907 ;src\/CheckPlayfield.h:152: if(x == 255) { // do this expensive calculation only once
      001B93 DD 7E F5         [19] 5908 	ld	a, -11 (ix)
      001B96 3C               [ 4] 5909 	inc	a
      001B97 20 7B            [12] 5910 	jr	NZ, 00143$
                                   5911 ;src\/CheckPlayfield.h:153: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001B99 DD 6E F8         [19] 5912 	ld	l, -8 (ix)
      001B9C 26 00            [ 7] 5913 	ld	h, #0x00
      001B9E 29               [11] 5914 	add	hl, hl
      001B9F 29               [11] 5915 	add	hl, hl
      001BA0 29               [11] 5916 	add	hl, hl
      001BA1 29               [11] 5917 	add	hl, hl
      001BA2 DD 5E F7         [19] 5918 	ld	e, -9 (ix)
      001BA5 16 00            [ 7] 5919 	ld	d, #0x00
      001BA7 EB               [ 4] 5920 	ex	de, hl
      001BA8 29               [11] 5921 	add	hl, hl
      001BA9 29               [11] 5922 	add	hl, hl
      001BAA 29               [11] 5923 	add	hl, hl
      001BAB 29               [11] 5924 	add	hl, hl
      001BAC EB               [ 4] 5925 	ex	de, hl
      001BAD BF               [ 4] 5926 	cp	a, a
      001BAE ED 52            [15] 5927 	sbc	hl, de
      001BB0 4D               [ 4] 5928 	ld	c, l
      001BB1 44               [ 4] 5929 	ld	b, h
      001BB2 CB 7C            [ 8] 5930 	bit	7, h
      001BB4 28 03            [12] 5931 	jr	Z, 00238$
      001BB6 4D               [ 4] 5932 	ld	c, l
      001BB7 44               [ 4] 5933 	ld	b, h
      001BB8 03               [ 6] 5934 	inc	bc
      001BB9                       5935 00238$:
      001BB9 CB 28            [ 8] 5936 	sra	b
      001BBB CB 19            [ 8] 5937 	rr	c
      001BBD 79               [ 4] 5938 	ld	a, c
      001BBE C6 50            [ 7] 5939 	add	a, #0x50
      001BC0 DD 6E F7         [19] 5940 	ld	l, -9 (ix)
      001BC3 29               [11] 5941 	add	hl, hl
      001BC4 29               [11] 5942 	add	hl, hl
      001BC5 29               [11] 5943 	add	hl, hl
      001BC6 29               [11] 5944 	add	hl, hl
      001BC7 85               [ 4] 5945 	add	a, l
      001BC8 DD 77 F5         [19] 5946 	ld	-11 (ix), a
                                   5947 ;src\/CheckPlayfield.h:155: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001BCB DD 6E F9         [19] 5948 	ld	l, -7 (ix)
      001BCE 26 00            [ 7] 5949 	ld	h, #0x00
      001BD0 29               [11] 5950 	add	hl, hl
      001BD1 29               [11] 5951 	add	hl, hl
      001BD2 29               [11] 5952 	add	hl, hl
      001BD3 29               [11] 5953 	add	hl, hl
      001BD4 DD 5E FA         [19] 5954 	ld	e, -6 (ix)
      001BD7 16 00            [ 7] 5955 	ld	d, #0x00
      001BD9 EB               [ 4] 5956 	ex	de, hl
      001BDA 29               [11] 5957 	add	hl, hl
      001BDB 29               [11] 5958 	add	hl, hl
      001BDC 29               [11] 5959 	add	hl, hl
      001BDD 29               [11] 5960 	add	hl, hl
      001BDE EB               [ 4] 5961 	ex	de, hl
      001BDF BF               [ 4] 5962 	cp	a, a
      001BE0 ED 52            [15] 5963 	sbc	hl, de
      001BE2 4D               [ 4] 5964 	ld	c, l
      001BE3 44               [ 4] 5965 	ld	b, h
      001BE4 CB 7C            [ 8] 5966 	bit	7, h
      001BE6 28 03            [12] 5967 	jr	Z, 00239$
      001BE8 23               [ 6] 5968 	inc	hl
      001BE9 4D               [ 4] 5969 	ld	c, l
      001BEA 44               [ 4] 5970 	ld	b, h
      001BEB                       5971 00239$:
      001BEB CB 28            [ 8] 5972 	sra	b
      001BED CB 19            [ 8] 5973 	rr	c
      001BEF DD 7E FA         [19] 5974 	ld	a, -6 (ix)
      001BF2 87               [ 4] 5975 	add	a, a
      001BF3 87               [ 4] 5976 	add	a, a
      001BF4 87               [ 4] 5977 	add	a, a
      001BF5 87               [ 4] 5978 	add	a, a
      001BF6 81               [ 4] 5979 	add	a, c
      001BF7 DD 77 F6         [19] 5980 	ld	-10 (ix), a
                                   5981 ;src\/CheckPlayfield.h:156: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001BFA 26 01            [ 7] 5982 	ld	h, #0x01
      001BFC DD 6E F6         [19] 5983 	ld	l, -10 (ix)
      001BFF E5               [11] 5984 	push	hl
      001C00 DD 66 F5         [19] 5985 	ld	h, -11 (ix)
      001C03 DD 6E 04         [19] 5986 	ld	l, 4 (ix)
      001C06 E5               [11] 5987 	push	hl
      001C07 DD 7E FB         [19] 5988 	ld	a, -5 (ix)
      001C0A F5               [11] 5989 	push	af
      001C0B 33               [ 6] 5990 	inc	sp
      001C0C CDr16r0A         [17] 5991 	call	_DrawHitSprite
      001C0F F1               [10] 5992 	pop	af
      001C10 F1               [10] 5993 	pop	af
      001C11 33               [ 6] 5994 	inc	sp
      001C12 18 23            [12] 5995 	jr	00300$
      001C14                       5996 00143$:
                                   5997 ;src\/CheckPlayfield.h:162: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001C14 DD 4E FF         [19] 5998 	ld	c, -1 (ix)
      001C17 3E 48            [ 7] 5999 	ld	a, #0x48
      001C19 91               [ 4] 6000 	sub	a, c
      001C1A 4F               [ 4] 6001 	ld	c, a
      001C1B DD 7E F6         [19] 6002 	ld	a, -10 (ix)
      001C1E 91               [ 4] 6003 	sub	a, c
      001C1F 26 00            [ 7] 6004 	ld	h, #0x00
      001C21 E5               [11] 6005 	push	hl
      001C22 33               [ 6] 6006 	inc	sp
      001C23 F5               [11] 6007 	push	af
      001C24 33               [ 6] 6008 	inc	sp
      001C25 DD 66 F5         [19] 6009 	ld	h, -11 (ix)
      001C28 DD 6E 04         [19] 6010 	ld	l, 4 (ix)
      001C2B E5               [11] 6011 	push	hl
      001C2C DD 7E FB         [19] 6012 	ld	a, -5 (ix)
      001C2F F5               [11] 6013 	push	af
      001C30 33               [ 6] 6014 	inc	sp
      001C31 CDr16r0A         [17] 6015 	call	_DrawHitSprite
      001C34 F1               [10] 6016 	pop	af
      001C35 F1               [10] 6017 	pop	af
      001C36 33               [ 6] 6018 	inc	sp
                                   6019 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C37                       6020 00300$:
      001C37 3E 0C            [ 7] 6021 	ld	a, #0x0c
      001C39 DD 96 FF         [19] 6022 	sub	a, -1 (ix)
      001C3C 3E 00            [ 7] 6023 	ld	a, #0x00
      001C3E 17               [ 4] 6024 	rla
      001C3F 5F               [ 4] 6025 	ld	e, a
      001C40 3E 09            [ 7] 6026 	ld	a, #0x09
      001C42 DD 96 FF         [19] 6027 	sub	a, -1 (ix)
      001C45 3E 00            [ 7] 6028 	ld	a, #0x00
      001C47 17               [ 4] 6029 	rla
      001C48 4F               [ 4] 6030 	ld	c, a
      001C49 3E 06            [ 7] 6031 	ld	a, #0x06
      001C4B DD 96 FF         [19] 6032 	sub	a, -1 (ix)
      001C4E 3E 00            [ 7] 6033 	ld	a, #0x00
      001C50 17               [ 4] 6034 	rla
      001C51 DD 77 FC         [19] 6035 	ld	-4 (ix), a
      001C54 3E 03            [ 7] 6036 	ld	a, #0x03
      001C56 DD 96 FF         [19] 6037 	sub	a, -1 (ix)
      001C59 3E 00            [ 7] 6038 	ld	a, #0x00
      001C5B 17               [ 4] 6039 	rla
      001C5C DD 77 FD         [19] 6040 	ld	-3 (ix), a
      001C5F 06 00            [ 7] 6041 	ld	b, #0x00
      001C61                       6042 00225$:
      001C61 78               [ 4] 6043 	ld	a, b
      001C62 D6 0C            [ 7] 6044 	sub	a, #0x0c
      001C64 D2r69r1B         [10] 6045 	jp	NC, 00166$
                                   6046 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C67 16 00            [ 7] 6047 	ld	d, #0x00
      001C69                       6048 00222$:
      001C69 7A               [ 4] 6049 	ld	a, d
      001C6A D6 06            [ 7] 6050 	sub	a, #0x06
      001C6C D2r15r1D         [10] 6051 	jp	NC, 00226$
                                   6052 ;src\/CheckPlayfield.h:169: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001C6F D5               [11] 6053 	push	de
      001C70 5A               [ 4] 6054 	ld	e, d
      001C71 16 00            [ 7] 6055 	ld	d, #0x00
      001C73 6B               [ 4] 6056 	ld	l, e
      001C74 62               [ 4] 6057 	ld	h, d
      001C75 29               [11] 6058 	add	hl, hl
      001C76 19               [11] 6059 	add	hl, de
      001C77 29               [11] 6060 	add	hl, hl
      001C78 29               [11] 6061 	add	hl, hl
      001C79 11r00r00         [10] 6062 	ld	de, #_playfield
      001C7C 19               [11] 6063 	add	hl, de
      001C7D D1               [10] 6064 	pop	de
      001C7E 7D               [ 4] 6065 	ld	a, l
      001C7F 80               [ 4] 6066 	add	a, b
      001C80 6F               [ 4] 6067 	ld	l, a
      001C81 30 01            [12] 6068 	jr	NC, 00645$
      001C83 24               [ 4] 6069 	inc	h
      001C84                       6070 00645$:
      001C84 7E               [ 7] 6071 	ld	a, (hl)
      001C85 DD 77 FE         [19] 6072 	ld	-2 (ix), a
      001C88 DD CB FE 7E      [20] 6073 	bit	7, -2 (ix)
      001C8C CAr11r1D         [10] 6074 	jp	Z,00223$
                                   6075 ;src\/CheckPlayfield.h:172: if(counter > 12) {
      001C8F 7B               [ 4] 6076 	ld	a, e
      001C90 B7               [ 4] 6077 	or	a, a
      001C91 28 2C            [12] 6078 	jr	Z, 00160$
                                   6079 ;src\/CheckPlayfield.h:173: if(JIFFY & 0b00000011) {
      001C93 2A 9E FC         [16] 6080 	ld	hl, (_JIFFY)
      001C96 7D               [ 4] 6081 	ld	a, l
      001C97 E6 03            [ 7] 6082 	and	a, #0x03
      001C99 28 14            [12] 6083 	jr	Z, 00148$
                                   6084 ;src\/CheckPlayfield.h:174: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001C9B DD 7E FE         [19] 6085 	ld	a, -2 (ix)
      001C9E CB BF            [ 8] 6086 	res	7, a
      001CA0 C5               [11] 6087 	push	bc
      001CA1 D5               [11] 6088 	push	de
      001CA2 F5               [11] 6089 	push	af
      001CA3 33               [ 6] 6090 	inc	sp
      001CA4 4A               [ 4] 6091 	ld	c, d
      001CA5 C5               [11] 6092 	push	bc
      001CA6 CDr5Ar14         [17] 6093 	call	_DrawBlock
      001CA9 F1               [10] 6094 	pop	af
      001CAA 33               [ 6] 6095 	inc	sp
      001CAB D1               [10] 6096 	pop	de
      001CAC C1               [10] 6097 	pop	bc
      001CAD 18 62            [12] 6098 	jr	00223$
      001CAF                       6099 00148$:
                                   6100 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, EMPTY);
      001CAF C5               [11] 6101 	push	bc
      001CB0 D5               [11] 6102 	push	de
      001CB1 AF               [ 4] 6103 	xor	a, a
      001CB2 F5               [11] 6104 	push	af
      001CB3 33               [ 6] 6105 	inc	sp
      001CB4 4A               [ 4] 6106 	ld	c, d
      001CB5 C5               [11] 6107 	push	bc
      001CB6 CDr5Ar14         [17] 6108 	call	_DrawBlock
      001CB9 F1               [10] 6109 	pop	af
      001CBA 33               [ 6] 6110 	inc	sp
      001CBB D1               [10] 6111 	pop	de
      001CBC C1               [10] 6112 	pop	bc
      001CBD 18 52            [12] 6113 	jr	00223$
      001CBF                       6114 00160$:
                                   6115 ;src\/CheckPlayfield.h:182: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001CBF 79               [ 4] 6116 	ld	a, c
      001CC0 B7               [ 4] 6117 	or	a, a
      001CC1 28 11            [12] 6118 	jr	Z, 00157$
      001CC3 C5               [11] 6119 	push	bc
      001CC4 D5               [11] 6120 	push	de
      001CC5 3E 2A            [ 7] 6121 	ld	a, #0x2a
      001CC7 F5               [11] 6122 	push	af
      001CC8 33               [ 6] 6123 	inc	sp
      001CC9 4A               [ 4] 6124 	ld	c, d
      001CCA C5               [11] 6125 	push	bc
      001CCB CDrC2r14         [17] 6126 	call	_DrawBlock_SameTile
      001CCE F1               [10] 6127 	pop	af
      001CCF 33               [ 6] 6128 	inc	sp
      001CD0 D1               [10] 6129 	pop	de
      001CD1 C1               [10] 6130 	pop	bc
      001CD2 18 3D            [12] 6131 	jr	00223$
      001CD4                       6132 00157$:
                                   6133 ;src\/CheckPlayfield.h:183: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001CD4 DD 7E FC         [19] 6134 	ld	a, -4 (ix)
      001CD7 B7               [ 4] 6135 	or	a, a
      001CD8 28 11            [12] 6136 	jr	Z, 00154$
      001CDA C5               [11] 6137 	push	bc
      001CDB D5               [11] 6138 	push	de
      001CDC 3E 2B            [ 7] 6139 	ld	a, #0x2b
      001CDE F5               [11] 6140 	push	af
      001CDF 33               [ 6] 6141 	inc	sp
      001CE0 4A               [ 4] 6142 	ld	c, d
      001CE1 C5               [11] 6143 	push	bc
      001CE2 CDrC2r14         [17] 6144 	call	_DrawBlock_SameTile
      001CE5 F1               [10] 6145 	pop	af
      001CE6 33               [ 6] 6146 	inc	sp
      001CE7 D1               [10] 6147 	pop	de
      001CE8 C1               [10] 6148 	pop	bc
      001CE9 18 26            [12] 6149 	jr	00223$
      001CEB                       6150 00154$:
                                   6151 ;src\/CheckPlayfield.h:184: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001CEB DD 7E FD         [19] 6152 	ld	a, -3 (ix)
      001CEE B7               [ 4] 6153 	or	a, a
      001CEF 28 11            [12] 6154 	jr	Z, 00151$
      001CF1 C5               [11] 6155 	push	bc
      001CF2 D5               [11] 6156 	push	de
      001CF3 3E 2C            [ 7] 6157 	ld	a, #0x2c
      001CF5 F5               [11] 6158 	push	af
      001CF6 33               [ 6] 6159 	inc	sp
      001CF7 4A               [ 4] 6160 	ld	c, d
      001CF8 C5               [11] 6161 	push	bc
      001CF9 CDrC2r14         [17] 6162 	call	_DrawBlock_SameTile
      001CFC F1               [10] 6163 	pop	af
      001CFD 33               [ 6] 6164 	inc	sp
      001CFE D1               [10] 6165 	pop	de
      001CFF C1               [10] 6166 	pop	bc
      001D00 18 0F            [12] 6167 	jr	00223$
      001D02                       6168 00151$:
                                   6169 ;src\/CheckPlayfield.h:185: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001D02 C5               [11] 6170 	push	bc
      001D03 D5               [11] 6171 	push	de
      001D04 3E 2D            [ 7] 6172 	ld	a, #0x2d
      001D06 F5               [11] 6173 	push	af
      001D07 33               [ 6] 6174 	inc	sp
      001D08 4A               [ 4] 6175 	ld	c, d
      001D09 C5               [11] 6176 	push	bc
      001D0A CDrC2r14         [17] 6177 	call	_DrawBlock_SameTile
      001D0D F1               [10] 6178 	pop	af
      001D0E 33               [ 6] 6179 	inc	sp
      001D0F D1               [10] 6180 	pop	de
      001D10 C1               [10] 6181 	pop	bc
      001D11                       6182 00223$:
                                   6183 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D11 14               [ 4] 6184 	inc	d
      001D12 C3r69r1C         [10] 6185 	jp	00222$
      001D15                       6186 00226$:
                                   6187 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D15 04               [ 4] 6188 	inc	b
      001D16 C3r61r1C         [10] 6189 	jp	00225$
      001D19                       6190 00168$:
                                   6191 ;src\/CheckPlayfield.h:193: HideHitSprite();
      001D19 CDr28r0C         [17] 6192 	call	_HideHitSprite
                                   6193 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D1C DD 36 FD 00      [19] 6194 	ld	-3 (ix), #0
      001D20                       6195 00234$:
      001D20 DD 7E FD         [19] 6196 	ld	a, -3 (ix)
      001D23 D6 0C            [ 7] 6197 	sub	a, #0x0c
      001D25 D2r03r1E         [10] 6198 	jp	NC, 00177$
                                   6199 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D28 DD 36 FE 00      [19] 6200 	ld	-2 (ix), #0
      001D2C                       6201 00231$:
      001D2C DD 7E FE         [19] 6202 	ld	a, -2 (ix)
      001D2F D6 06            [ 7] 6203 	sub	a, #0x06
      001D31 D2rFDr1D         [10] 6204 	jp	NC, 00235$
                                   6205 ;src\/CheckPlayfield.h:201: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001D34 DD 4E FE         [19] 6206 	ld	c, -2 (ix)
      001D37 06 00            [ 7] 6207 	ld	b, #0x00
      001D39 69               [ 4] 6208 	ld	l, c
      001D3A 60               [ 4] 6209 	ld	h, b
      001D3B 29               [11] 6210 	add	hl, hl
      001D3C 09               [11] 6211 	add	hl, bc
      001D3D 29               [11] 6212 	add	hl, hl
      001D3E 29               [11] 6213 	add	hl, hl
      001D3F EB               [ 4] 6214 	ex	de, hl
      001D40 21r00r00         [10] 6215 	ld	hl, #_playfield
      001D43 19               [11] 6216 	add	hl, de
      001D44 DD 75 FB         [19] 6217 	ld	-5 (ix), l
      001D47 DD 74 FC         [19] 6218 	ld	-4 (ix), h
      001D4A DD 7E FB         [19] 6219 	ld	a, -5 (ix)
      001D4D DD 86 FD         [19] 6220 	add	a, -3 (ix)
      001D50 4F               [ 4] 6221 	ld	c, a
      001D51 DD 7E FC         [19] 6222 	ld	a, -4 (ix)
      001D54 CE 00            [ 7] 6223 	adc	a, #0x00
      001D56 47               [ 4] 6224 	ld	b, a
      001D57 0A               [ 7] 6225 	ld	a, (bc)
      001D58 07               [ 4] 6226 	rlca
      001D59 D2rF7r1D         [10] 6227 	jp	NC,00232$
                                   6228 ;src\/CheckPlayfield.h:203: blocksRemoved++;
      001D5C 2Ar04r00         [16] 6229 	ld	hl, (_blocksRemoved)
      001D5F 23               [ 6] 6230 	inc	hl
      001D60 22r04r00         [16] 6231 	ld	(_blocksRemoved), hl
                                   6232 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      001D63 DD 7E FB         [19] 6233 	ld	a, -5 (ix)
      001D66 DD 77 F7         [19] 6234 	ld	-9 (ix), a
      001D69 DD 7E FC         [19] 6235 	ld	a, -4 (ix)
      001D6C DD 77 F8         [19] 6236 	ld	-8 (ix), a
      001D6F DD 7E FD         [19] 6237 	ld	a, -3 (ix)
      001D72 DD 77 FF         [19] 6238 	ld	-1 (ix), a
      001D75                       6239 00228$:
      001D75 DD 7E FF         [19] 6240 	ld	a, -1 (ix)
      001D78 B7               [ 4] 6241 	or	a, a
      001D79 28 7C            [12] 6242 	jr	Z, 00232$
                                   6243 ;src\/CheckPlayfield.h:207: byte linesToBeRemoved = 1;
      001D7B 0E 01            [ 7] 6244 	ld	c, #0x01
                                   6245 ;src\/CheckPlayfield.h:208: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001D7D DD 7E FF         [19] 6246 	ld	a, -1 (ix)
      001D80 DD 77 FC         [19] 6247 	ld	-4 (ix), a
      001D83 3D               [ 4] 6248 	dec	a
      001D84 DD 86 F7         [19] 6249 	add	a, -9 (ix)
      001D87 5F               [ 4] 6250 	ld	e, a
      001D88 3E 00            [ 7] 6251 	ld	a, #0x00
      001D8A DD 8E F8         [19] 6252 	adc	a, -8 (ix)
      001D8D 57               [ 4] 6253 	ld	d, a
      001D8E 1A               [ 7] 6254 	ld	a, (de)
      001D8F 07               [ 4] 6255 	rlca
      001D90 30 02            [12] 6256 	jr	NC, 00170$
      001D92 0E 02            [ 7] 6257 	ld	c, #0x02
      001D94                       6258 00170$:
                                   6259 ;src\/CheckPlayfield.h:209: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001D94 DD 7E FC         [19] 6260 	ld	a, -4 (ix)
      001D97 3D               [ 4] 6261 	dec	a
      001D98 3D               [ 4] 6262 	dec	a
      001D99 DD 86 F7         [19] 6263 	add	a, -9 (ix)
      001D9C 5F               [ 4] 6264 	ld	e, a
      001D9D 3E 00            [ 7] 6265 	ld	a, #0x00
      001D9F DD 8E F8         [19] 6266 	adc	a, -8 (ix)
      001DA2 57               [ 4] 6267 	ld	d, a
      001DA3 1A               [ 7] 6268 	ld	a, (de)
      001DA4 07               [ 4] 6269 	rlca
      001DA5 30 01            [12] 6270 	jr	NC, 00172$
      001DA7 0C               [ 4] 6271 	inc	c
      001DA8                       6272 00172$:
                                   6273 ;src\/CheckPlayfield.h:213: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001DA8 DD 7E F7         [19] 6274 	ld	a, -9 (ix)
      001DAB DD 86 FF         [19] 6275 	add	a, -1 (ix)
      001DAE DD 77 F9         [19] 6276 	ld	-7 (ix), a
      001DB1 DD 7E F8         [19] 6277 	ld	a, -8 (ix)
      001DB4 CE 00            [ 7] 6278 	adc	a, #0x00
      001DB6 DD 77 FA         [19] 6279 	ld	-6 (ix), a
      001DB9 DD 6E FF         [19] 6280 	ld	l, -1 (ix)
      001DBC 26 00            [ 7] 6281 	ld	h, #0x00
      001DBE 59               [ 4] 6282 	ld	e, c
      001DBF 16 00            [ 7] 6283 	ld	d, #0x00
      001DC1 BF               [ 4] 6284 	cp	a, a
      001DC2 ED 52            [15] 6285 	sbc	hl, de
      001DC4 CB 7C            [ 8] 6286 	bit	7, h
      001DC6 20 18            [12] 6287 	jr	NZ, 00242$
      001DC8 DD 7E FF         [19] 6288 	ld	a, -1 (ix)
      001DCB 91               [ 4] 6289 	sub	a, c
      001DCC DD 86 F7         [19] 6290 	add	a, -9 (ix)
      001DCF 4F               [ 4] 6291 	ld	c, a
      001DD0 3E 00            [ 7] 6292 	ld	a, #0x00
      001DD2 DD 8E F8         [19] 6293 	adc	a, -8 (ix)
      001DD5 47               [ 4] 6294 	ld	b, a
      001DD6 0A               [ 7] 6295 	ld	a, (bc)
      001DD7 DD 77 FB         [19] 6296 	ld	-5 (ix), a
      001DDA DD 36 FC 00      [19] 6297 	ld	-4 (ix), #0
      001DDE 18 07            [12] 6298 	jr	00243$
      001DE0                       6299 00242$:
      001DE0 AF               [ 4] 6300 	xor	a, a
      001DE1 DD 77 FB         [19] 6301 	ld	-5 (ix), a
      001DE4 DD 77 FC         [19] 6302 	ld	-4 (ix), a
      001DE7                       6303 00243$:
      001DE7 DD 7E FB         [19] 6304 	ld	a, -5 (ix)
      001DEA DD 6E F9         [19] 6305 	ld	l, -7 (ix)
      001DED DD 66 FA         [19] 6306 	ld	h, -6 (ix)
      001DF0 77               [ 7] 6307 	ld	(hl), a
                                   6308 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      001DF1 DD 35 FF         [23] 6309 	dec	-1 (ix)
      001DF4 C3r75r1D         [10] 6310 	jp	00228$
      001DF7                       6311 00232$:
                                   6312 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DF7 DD 34 FE         [23] 6313 	inc	-2 (ix)
      001DFA C3r2Cr1D         [10] 6314 	jp	00231$
      001DFD                       6315 00235$:
                                   6316 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001DFD DD 34 FD         [23] 6317 	inc	-3 (ix)
      001E00 C3r20r1D         [10] 6318 	jp	00234$
      001E03                       6319 00177$:
                                   6320 ;src\/CheckPlayfield.h:220: oldLevel = level;
      001E03 3Ar06r00         [13] 6321 	ld	a, (#_level + 0)
      001E06 4F               [ 4] 6322 	ld	c, a
                                   6323 ;src\/CheckPlayfield.h:221: if(blocksRemoved >= 90) {
      001E07 21r04r00         [10] 6324 	ld	hl, #_blocksRemoved
      001E0A 46               [ 7] 6325 	ld	b, (hl)
      001E0B 23               [ 6] 6326 	inc	hl
      001E0C 56               [ 7] 6327 	ld	d, (hl)
      001E0D 78               [ 4] 6328 	ld	a, b
      001E0E D6 5A            [ 7] 6329 	sub	a, #0x5a
      001E10 7A               [ 4] 6330 	ld	a, d
      001E11 DE 00            [ 7] 6331 	sbc	a, #0x00
      001E13 38 19            [12] 6332 	jr	C, 00185$
                                   6333 ;src\/CheckPlayfield.h:222: level = (blocksRemoved / 30) + 1;
      001E15 C5               [11] 6334 	push	bc
      001E16 21 1E 00         [10] 6335 	ld	hl, #0x001e
      001E19 E5               [11] 6336 	push	hl
      001E1A 58               [ 4] 6337 	ld	e, b
      001E1B D5               [11] 6338 	push	de
      001E1C CDr00r00         [17] 6339 	call	__divuint
      001E1F F1               [10] 6340 	pop	af
      001E20 F1               [10] 6341 	pop	af
      001E21 C1               [10] 6342 	pop	bc
      001E22 7D               [ 4] 6343 	ld	a, l
      001E23 3C               [ 4] 6344 	inc	a
      001E24 32r06r00         [13] 6345 	ld	(_level+0), a
                                   6346 ;src\/CheckPlayfield.h:223: speed = 15;
      001E27 21r93r00         [10] 6347 	ld	hl, #_speed
      001E2A 36 0F            [10] 6348 	ld	(hl), #0x0f
      001E2C 18 32            [12] 6349 	jr	00186$
      001E2E                       6350 00185$:
                                   6351 ;src\/CheckPlayfield.h:226: else if(blocksRemoved >= 60) { 
      001E2E 78               [ 4] 6352 	ld	a, b
      001E2F D6 3C            [ 7] 6353 	sub	a, #0x3c
      001E31 7A               [ 4] 6354 	ld	a, d
      001E32 DE 00            [ 7] 6355 	sbc	a, #0x00
      001E34 38 0C            [12] 6356 	jr	C, 00182$
                                   6357 ;src\/CheckPlayfield.h:227: level = 3;
      001E36 21r06r00         [10] 6358 	ld	hl, #_level
      001E39 36 03            [10] 6359 	ld	(hl), #0x03
                                   6360 ;src\/CheckPlayfield.h:228: speed = 30;
      001E3B 21r93r00         [10] 6361 	ld	hl, #_speed
      001E3E 36 1E            [10] 6362 	ld	(hl), #0x1e
      001E40 18 1E            [12] 6363 	jr	00186$
      001E42                       6364 00182$:
                                   6365 ;src\/CheckPlayfield.h:230: else if(blocksRemoved >= 30) { 
      001E42 78               [ 4] 6366 	ld	a, b
      001E43 D6 1E            [ 7] 6367 	sub	a, #0x1e
      001E45 7A               [ 4] 6368 	ld	a, d
      001E46 DE 00            [ 7] 6369 	sbc	a, #0x00
      001E48 38 0C            [12] 6370 	jr	C, 00179$
                                   6371 ;src\/CheckPlayfield.h:231: level = 2;
      001E4A 21r06r00         [10] 6372 	ld	hl, #_level
      001E4D 36 02            [10] 6373 	ld	(hl), #0x02
                                   6374 ;src\/CheckPlayfield.h:232: speed = 45;
      001E4F 21r93r00         [10] 6375 	ld	hl, #_speed
      001E52 36 2D            [10] 6376 	ld	(hl), #0x2d
      001E54 18 0A            [12] 6377 	jr	00186$
      001E56                       6378 00179$:
                                   6379 ;src\/CheckPlayfield.h:235: level = 1;
      001E56 21r06r00         [10] 6380 	ld	hl, #_level
      001E59 36 01            [10] 6381 	ld	(hl), #0x01
                                   6382 ;src\/CheckPlayfield.h:236: speed = 60;
      001E5B 21r93r00         [10] 6383 	ld	hl, #_speed
      001E5E 36 3C            [10] 6384 	ld	(hl), #0x3c
      001E60                       6385 00186$:
                                   6386 ;src\/CheckPlayfield.h:239: if(oldLevel != level) {
      001E60 3Ar06r00         [13] 6387 	ld	a,(#_level + 0)
      001E63 91               [ 4] 6388 	sub	a, c
      001E64 28 05            [12] 6389 	jr	Z, 00188$
                                   6390 ;src\/CheckPlayfield.h:240: newLevel = TRUE;
      001E66 21r07r00         [10] 6391 	ld	hl, #_newLevel
      001E69 36 01            [10] 6392 	ld	(hl), #0x01
      001E6B                       6393 00188$:
                                   6394 ;src\/CheckPlayfield.h:244: DrawPlayfield();
      001E6B CDr7Er15         [17] 6395 	call	_DrawPlayfield
                                   6396 ;src\/CheckPlayfield.h:248: CheckIfPlayfieldIsValid(); // test
      001E6E CDrEFr15         [17] 6397 	call	_CheckIfPlayfieldIsValid
                                   6398 ;src\/CheckPlayfield.h:250: DrawScore();
      001E71 CDr3Fr10         [17] 6399 	call	_DrawScore
                                   6400 ;src\/CheckPlayfield.h:252: iteration++;
      001E74 DD 34 04         [23] 6401 	inc	4 (ix)
                                   6402 ;src\/CheckPlayfield.h:253: CheckPlayfield(iteration);  
      001E77 DD 7E 04         [19] 6403 	ld	a, 4 (ix)
      001E7A F5               [11] 6404 	push	af
      001E7B 33               [ 6] 6405 	inc	sp
      001E7C CDrA3r16         [17] 6406 	call	_CheckPlayfield
      001E7F                       6407 00236$:
                                   6408 ;src\/CheckPlayfield.h:258: }
      001E7F DD F9            [10] 6409 	ld	sp, ix
      001E81 DD E1            [14] 6410 	pop	ix
      001E83 C9               [10] 6411 	ret
                                   6412 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6413 ;	---------------------------------
                                   6414 ; Function RandomIndex
                                   6415 ; ---------------------------------
      001E84                       6416 _RandomIndex::
                                   6417 ;src\/GameLogic.h:5: do {
      001E84                       6418 00101$:
                                   6419 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001E84 CDrA3r00         [17] 6420 	call	_GetRandom
      001E87 7D               [ 4] 6421 	ld	a, l
      001E88 E6 07            [ 7] 6422 	and	a, #0x07
      001E8A 6F               [ 4] 6423 	ld	l, a
                                   6424 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001E8B 3E 04            [ 7] 6425 	ld	a, #0x04
      001E8D 95               [ 4] 6426 	sub	a, l
      001E8E 38 F4            [12] 6427 	jr	C, 00101$
                                   6428 ;src\/GameLogic.h:10: return random;
                                   6429 ;src\/GameLogic.h:11: }
      001E90 C9               [10] 6430 	ret
                                   6431 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6432 ;	---------------------------------
                                   6433 ; Function RandomPiece
                                   6434 ; ---------------------------------
      001E91                       6435 _RandomPiece::
                                   6436 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001E91 01r18r00         [10] 6437 	ld	bc, #_pieces+0
      001E94 C5               [11] 6438 	push	bc
      001E95 CDr84r1E         [17] 6439 	call	_RandomIndex
      001E98 C1               [10] 6440 	pop	bc
      001E99 26 00            [ 7] 6441 	ld	h, #0x00
      001E9B 09               [11] 6442 	add	hl, bc
      001E9C 7E               [ 7] 6443 	ld	a, (hl)
      001E9D 32r90r00         [13] 6444 	ld	(_topPiece+0), a
                                   6445 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001EA0 C5               [11] 6446 	push	bc
      001EA1 CDr84r1E         [17] 6447 	call	_RandomIndex
      001EA4 C1               [10] 6448 	pop	bc
      001EA5 26 00            [ 7] 6449 	ld	h, #0x00
      001EA7 09               [11] 6450 	add	hl, bc
      001EA8 7E               [ 7] 6451 	ld	a, (hl)
      001EA9 32r91r00         [13] 6452 	ld	(_midPiece+0), a
                                   6453 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001EAC C5               [11] 6454 	push	bc
      001EAD CDr84r1E         [17] 6455 	call	_RandomIndex
      001EB0 C1               [10] 6456 	pop	bc
      001EB1 26 00            [ 7] 6457 	ld	h, #0x00
      001EB3 09               [11] 6458 	add	hl, bc
      001EB4 7E               [ 7] 6459 	ld	a, (hl)
      001EB5 32r92r00         [13] 6460 	ld	(_bottomPiece+0), a
                                   6461 ;src\/GameLogic.h:17: }
      001EB8 C9               [10] 6462 	ret
                                   6463 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   6464 ;	---------------------------------
                                   6465 ; Function UpdateAndDrawPieceStatic
                                   6466 ; ---------------------------------
      001EB9                       6467 _UpdateAndDrawPieceStatic::
                                   6468 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001EB9 01r00r00         [10] 6469 	ld	bc, #_playfield+0
      001EBC ED 5Br01r00      [20] 6470 	ld	de, (_col)
      001EC0 16 00            [ 7] 6471 	ld	d, #0x00
      001EC2 6B               [ 4] 6472 	ld	l, e
      001EC3 62               [ 4] 6473 	ld	h, d
      001EC4 29               [11] 6474 	add	hl, hl
      001EC5 19               [11] 6475 	add	hl, de
      001EC6 29               [11] 6476 	add	hl, hl
      001EC7 29               [11] 6477 	add	hl, hl
      001EC8 09               [11] 6478 	add	hl, bc
      001EC9 EB               [ 4] 6479 	ex	de, hl
      001ECA 3Ar02r00         [13] 6480 	ld	a, (#_line + 0)
      001ECD 6F               [ 4] 6481 	ld	l, a
      001ECE 26 00            [ 7] 6482 	ld	h, #0x00
      001ED0 19               [11] 6483 	add	hl, de
      001ED1 3Ar90r00         [13] 6484 	ld	a,(#_topPiece + 0)
      001ED4 77               [ 7] 6485 	ld	(hl), a
                                   6486 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001ED5 ED 5Br01r00      [20] 6487 	ld	de, (_col)
      001ED9 16 00            [ 7] 6488 	ld	d, #0x00
      001EDB 6B               [ 4] 6489 	ld	l, e
      001EDC 62               [ 4] 6490 	ld	h, d
      001EDD 29               [11] 6491 	add	hl, hl
      001EDE 19               [11] 6492 	add	hl, de
      001EDF 29               [11] 6493 	add	hl, hl
      001EE0 29               [11] 6494 	add	hl, hl
      001EE1 09               [11] 6495 	add	hl, bc
      001EE2 EB               [ 4] 6496 	ex	de, hl
      001EE3 3Ar02r00         [13] 6497 	ld	a, (#_line + 0)
      001EE6 6F               [ 4] 6498 	ld	l, a
      001EE7 2C               [ 4] 6499 	inc	l
      001EE8 26 00            [ 7] 6500 	ld	h, #0x00
      001EEA 19               [11] 6501 	add	hl, de
      001EEB 3Ar91r00         [13] 6502 	ld	a,(#_midPiece + 0)
      001EEE 77               [ 7] 6503 	ld	(hl), a
                                   6504 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001EEF ED 5Br01r00      [20] 6505 	ld	de, (_col)
      001EF3 16 00            [ 7] 6506 	ld	d, #0x00
      001EF5 6B               [ 4] 6507 	ld	l, e
      001EF6 62               [ 4] 6508 	ld	h, d
      001EF7 29               [11] 6509 	add	hl, hl
      001EF8 19               [11] 6510 	add	hl, de
      001EF9 29               [11] 6511 	add	hl, hl
      001EFA 29               [11] 6512 	add	hl, hl
      001EFB 09               [11] 6513 	add	hl, bc
      001EFC EB               [ 4] 6514 	ex	de, hl
      001EFD 3Ar02r00         [13] 6515 	ld	a, (#_line + 0)
      001F00 6F               [ 4] 6516 	ld	l, a
      001F01 2C               [ 4] 6517 	inc	l
      001F02 2C               [ 4] 6518 	inc	l
      001F03 26 00            [ 7] 6519 	ld	h, #0x00
      001F05 19               [11] 6520 	add	hl, de
      001F06 3Ar92r00         [13] 6521 	ld	a,(#_bottomPiece + 0)
      001F09 77               [ 7] 6522 	ld	(hl), a
                                   6523 ;src\/GameLogic.h:25: DrawPiece(line);
      001F0A C5               [11] 6524 	push	bc
      001F0B 3Ar02r00         [13] 6525 	ld	a,(#_line + 0)
      001F0E F5               [11] 6526 	push	af
      001F0F 33               [ 6] 6527 	inc	sp
      001F10 CDr5Br15         [17] 6528 	call	_DrawPiece
      001F13 33               [ 6] 6529 	inc	sp
      001F14 C1               [10] 6530 	pop	bc
                                   6531 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001F15 3E 02            [ 7] 6532 	ld	a, #0x02
      001F17 32r01r00         [13] 6533 	ld	(#_col), a
                                   6534 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   6535 ;src\/GameLogic.h:31: counter = 0;
      001F1A 3E 00            [ 7] 6536 	ld	a,#0x00
      001F1C 32r02r00         [13] 6537 	ld	(#_line),a
      001F1F 32r03r00         [13] 6538 	ld	(#_counter), a
                                   6539 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001F22 3Ar18r00         [13] 6540 	ld	a, (#_playfield + 24)
      001F25 B7               [ 4] 6541 	or	a, a
      001F26 20 0C            [12] 6542 	jr	NZ, 00101$
                                   6543 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001F28 3Ar19r00         [13] 6544 	ld	a, (#_playfield + 25)
      001F2B B7               [ 4] 6545 	or	a, a
      001F2C 20 06            [12] 6546 	jr	NZ, 00101$
                                   6547 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001F2E 3Ar1Ar00         [13] 6548 	ld	a, (#_playfield + 26)
      001F31 B7               [ 4] 6549 	or	a, a
      001F32 28 0B            [12] 6550 	jr	Z, 00102$
      001F34                       6551 00101$:
                                   6552 ;src\/GameLogic.h:37: gameOver = TRUE;
      001F34 FD 21r00r00      [14] 6553 	ld	iy, #_gameOver
      001F38 FD 36 00 01      [19] 6554 	ld	0 (iy), #0x01
      001F3C C3r7Er15         [10] 6555 	jp	_DrawPlayfield
      001F3F                       6556 00102$:
                                   6557 ;src\/GameLogic.h:40: RandomPiece();
      001F3F CDr91r1E         [17] 6558 	call	_RandomPiece
                                   6559 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001F42 3E 01            [ 7] 6560 	ld	a, #0x01
      001F44 F5               [11] 6561 	push	af
      001F45 33               [ 6] 6562 	inc	sp
      001F46 CDrA3r16         [17] 6563 	call	_CheckPlayfield
      001F49 33               [ 6] 6564 	inc	sp
                                   6565 ;src\/GameLogic.h:45: DrawPlayfield();
                                   6566 ;src\/GameLogic.h:46: }
      001F4A C3r7Er15         [10] 6567 	jp	_DrawPlayfield
                                   6568 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   6569 ;	---------------------------------
                                   6570 ; Function BlinkPauseText
                                   6571 ; ---------------------------------
      001F4D                       6572 _BlinkPauseText::
                                   6573 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001F4D 2A 9E FC         [16] 6574 	ld	hl, (_JIFFY)
      001F50 CB 5D            [ 8] 6575 	bit	3, l
      001F52 28 0E            [12] 6576 	jr	Z, 00102$
                                   6577 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001F54 11 0D 0C         [10] 6578 	ld	de, #0x0c0d
      001F57 D5               [11] 6579 	push	de
      001F58 21r6Br1F         [10] 6580 	ld	hl, #___str_4
      001F5B E5               [11] 6581 	push	hl
      001F5C CDrB1r0D         [17] 6582 	call	_DrawString
      001F5F F1               [10] 6583 	pop	af
      001F60 F1               [10] 6584 	pop	af
      001F61 C9               [10] 6585 	ret
      001F62                       6586 00102$:
                                   6587 ;src\/GameLogic.h:55: DrawLine(6);
      001F62 3E 06            [ 7] 6588 	ld	a, #0x06
      001F64 F5               [11] 6589 	push	af
      001F65 33               [ 6] 6590 	inc	sp
      001F66 CDr23r15         [17] 6591 	call	_DrawLine
      001F69 33               [ 6] 6592 	inc	sp
                                   6593 ;src\/GameLogic.h:58: }
      001F6A C9               [10] 6594 	ret
      001F6B                       6595 ___str_4:
      001F6B 50 41 55 53 45        6596 	.ascii "PAUSE"
      001F70 00                    6597 	.db 0x00
                                   6598 ;src\/GameLogic.h:60: void Pause() {
                                   6599 ;	---------------------------------
                                   6600 ; Function Pause
                                   6601 ; ---------------------------------
      001F71                       6602 _Pause::
                                   6603 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001F71 11 0D 0C         [10] 6604 	ld	de, #0x0c0d
      001F74 D5               [11] 6605 	push	de
      001F75 21rABr1F         [10] 6606 	ld	hl, #___str_5
      001F78 E5               [11] 6607 	push	hl
      001F79 CDrB1r0D         [17] 6608 	call	_DrawString
      001F7C F1               [10] 6609 	pop	af
      001F7D F1               [10] 6610 	pop	af
                                   6611 ;src\/GameLogic.h:65: while(TRUE) {
      001F7E                       6612 00114$:
                                   6613 ;src\/GameLogic.h:67: BlinkPauseText();
      001F7E CDr4Dr1F         [17] 6614 	call	_BlinkPauseText
                                   6615 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001F81 2E 07            [ 7] 6616 	ld	l, #0x07
      001F83 CDr00r00         [17] 6617 	call	_SNSMAT
                                   6618 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001F86 CB 55            [ 8] 6619 	bit	2, l
      001F88 28 F4            [12] 6620 	jr	Z, 00114$
                                   6621 ;src\/GameLogic.h:73: while(TRUE) {
      001F8A                       6622 00109$:
                                   6623 ;src\/GameLogic.h:75: BlinkPauseText();
      001F8A CDr4Dr1F         [17] 6624 	call	_BlinkPauseText
                                   6625 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001F8D 2E 07            [ 7] 6626 	ld	l, #0x07
      001F8F CDr00r00         [17] 6627 	call	_SNSMAT
                                   6628 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001F92 CB 55            [ 8] 6629 	bit	2, l
      001F94 20 F4            [12] 6630 	jr	NZ, 00109$
                                   6631 ;src\/GameLogic.h:81: while(TRUE) {
      001F96                       6632 00104$:
                                   6633 ;src\/GameLogic.h:83: BlinkPauseText();
      001F96 CDr4Dr1F         [17] 6634 	call	_BlinkPauseText
                                   6635 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001F99 2E 07            [ 7] 6636 	ld	l, #0x07
      001F9B CDr00r00         [17] 6637 	call	_SNSMAT
                                   6638 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001F9E CB 55            [ 8] 6639 	bit	2, l
      001FA0 28 F4            [12] 6640 	jr	Z, 00104$
                                   6641 ;src\/GameLogic.h:89: DrawLine(6);
      001FA2 3E 06            [ 7] 6642 	ld	a, #0x06
      001FA4 F5               [11] 6643 	push	af
      001FA5 33               [ 6] 6644 	inc	sp
      001FA6 CDr23r15         [17] 6645 	call	_DrawLine
      001FA9 33               [ 6] 6646 	inc	sp
                                   6647 ;src\/GameLogic.h:90: return;
                                   6648 ;src\/GameLogic.h:100: }
      001FAA C9               [10] 6649 	ret
      001FAB                       6650 ___str_5:
      001FAB 50 41 55 53 45        6651 	.ascii "PAUSE"
      001FB0 00                    6652 	.db 0x00
                                   6653 ;src\/GameLogic.h:102: void GameLoop() {
                                   6654 ;	---------------------------------
                                   6655 ; Function GameLoop
                                   6656 ; ---------------------------------
      001FB1                       6657 _GameLoop::
      001FB1 DD E5            [15] 6658 	push	ix
      001FB3 DD 21 00 00      [14] 6659 	ld	ix,#0
      001FB7 DD 39            [15] 6660 	add	ix,sp
      001FB9 21 F3 FF         [10] 6661 	ld	hl, #-13
      001FBC 39               [11] 6662 	add	hl, sp
      001FBD F9               [ 6] 6663 	ld	sp, hl
                                   6664 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001FBE DD 36 FF 00      [19] 6665 	ld	-1 (ix), #0
      001FC2 DD 36 F3 00      [19] 6666 	ld	-13 (ix), #0
                                   6667 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001FC6 DD 36 F4 00      [19] 6668 	ld	-12 (ix), #0
      001FCA DD 36 F5 00      [19] 6669 	ld	-11 (ix), #0
                                   6670 ;src\/GameLogic.h:109: while(!gameOver) {
      001FCE                       6671 00150$:
      001FCE 3Ar00r00         [13] 6672 	ld	a,(#_gameOver + 0)
      001FD1 B7               [ 4] 6673 	or	a, a
      001FD2 C2r69r23         [10] 6674 	jp	NZ, 00152$
                                   6675 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001FD5 ED 4B 9E FC      [20] 6676 	ld	bc, (_JIFFY)
                                   6677 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001FD9                       6678 00101$:
      001FD9 2A 9E FC         [16] 6679 	ld	hl, (_JIFFY)
      001FDC BF               [ 4] 6680 	cp	a, a
      001FDD ED 42            [15] 6681 	sbc	hl, bc
      001FDF 28 F8            [12] 6682 	jr	Z, 00101$
                                   6683 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001FE1 ED 4Br01r00      [20] 6684 	ld	bc, (_col)
      001FE5 06 00            [ 7] 6685 	ld	b, #0x00
      001FE7 69               [ 4] 6686 	ld	l, c
      001FE8 60               [ 4] 6687 	ld	h, b
      001FE9 29               [11] 6688 	add	hl, hl
      001FEA 09               [11] 6689 	add	hl, bc
      001FEB 29               [11] 6690 	add	hl, hl
      001FEC 29               [11] 6691 	add	hl, hl
      001FED EB               [ 4] 6692 	ex	de, hl
      001FEE 21r00r00         [10] 6693 	ld	hl, #_playfield
      001FF1 19               [11] 6694 	add	hl, de
      001FF2 EB               [ 4] 6695 	ex	de, hl
      001FF3 FD 21r02r00      [14] 6696 	ld	iy, #_line
      001FF7 FD 6E 00         [19] 6697 	ld	l, 0 (iy)
      001FFA 26 00            [ 7] 6698 	ld	h, #0x00
      001FFC 19               [11] 6699 	add	hl, de
      001FFD 36 00            [10] 6700 	ld	(hl), #0x00
                                   6701 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001FFF ED 4Br01r00      [20] 6702 	ld	bc, (_col)
      002003 06 00            [ 7] 6703 	ld	b, #0x00
      002005 69               [ 4] 6704 	ld	l, c
      002006 60               [ 4] 6705 	ld	h, b
      002007 29               [11] 6706 	add	hl, hl
      002008 09               [11] 6707 	add	hl, bc
      002009 29               [11] 6708 	add	hl, hl
      00200A 29               [11] 6709 	add	hl, hl
      00200B EB               [ 4] 6710 	ex	de, hl
      00200C 21r00r00         [10] 6711 	ld	hl, #_playfield
      00200F 19               [11] 6712 	add	hl, de
      002010 EB               [ 4] 6713 	ex	de, hl
      002011 FD 6E 00         [19] 6714 	ld	l, 0 (iy)
      002014 2C               [ 4] 6715 	inc	l
      002015 26 00            [ 7] 6716 	ld	h, #0x00
      002017 19               [11] 6717 	add	hl, de
      002018 36 00            [10] 6718 	ld	(hl), #0x00
                                   6719 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      00201A ED 4Br01r00      [20] 6720 	ld	bc, (_col)
      00201E 06 00            [ 7] 6721 	ld	b, #0x00
      002020 69               [ 4] 6722 	ld	l, c
      002021 60               [ 4] 6723 	ld	h, b
      002022 29               [11] 6724 	add	hl, hl
      002023 09               [11] 6725 	add	hl, bc
      002024 29               [11] 6726 	add	hl, hl
      002025 29               [11] 6727 	add	hl, hl
      002026 EB               [ 4] 6728 	ex	de, hl
      002027 21r00r00         [10] 6729 	ld	hl, #_playfield
      00202A 19               [11] 6730 	add	hl, de
      00202B EB               [ 4] 6731 	ex	de, hl
      00202C FD 6E 00         [19] 6732 	ld	l, 0 (iy)
      00202F 2C               [ 4] 6733 	inc	l
      002030 2C               [ 4] 6734 	inc	l
      002031 26 00            [ 7] 6735 	ld	h, #0x00
      002033 19               [11] 6736 	add	hl, de
      002034 36 00            [10] 6737 	ld	(hl), #0x00
                                   6738 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      002036 2E 01            [ 7] 6739 	ld	l, #0x01
      002038 CDr00r00         [17] 6740 	call	_GTSTCK
      00203B DD 75 F6         [19] 6741 	ld	-10 (ix), l
                                   6742 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      00203E 2E 01            [ 7] 6743 	ld	l, #0x01
      002040 CDr00r00         [17] 6744 	call	_GTTRIG
      002043 DD 75 F7         [19] 6745 	ld	-9 (ix), l
                                   6746 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      002046 2E 03            [ 7] 6747 	ld	l, #0x03
      002048 CDr00r00         [17] 6748 	call	_GTTRIG
      00204B DD 75 F8         [19] 6749 	ld	-8 (ix), l
                                   6750 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      00204E DD 7E F6         [19] 6751 	ld	a, -10 (ix)
                                   6752 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      002051 B7               [ 4] 6753 	or	a,a
      002052 20 07            [12] 6754 	jr	NZ, 00105$
      002054 6F               [ 4] 6755 	ld	l,a
      002055 CDr00r00         [17] 6756 	call	_GTSTCK
      002058 DD 75 F6         [19] 6757 	ld	-10 (ix), l
      00205B                       6758 00105$:
                                   6759 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      00205B FD 21r02r00      [14] 6760 	ld	iy, #_line
      00205F FD 7E 00         [19] 6761 	ld	a, 0 (iy)
      002062 DD 77 F9         [19] 6762 	ld	-7 (ix), a
                                   6763 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      002065 DD 7E FF         [19] 6764 	ld	a, -1 (ix)
      002068 B7               [ 4] 6765 	or	a, a
      002069 C2r52r21         [10] 6766 	jp	NZ, 00118$
                                   6767 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      00206C FD 7E 00         [19] 6768 	ld	a, 0 (iy)
      00206F DD 77 FF         [19] 6769 	ld	-1 (ix), a
                                   6770 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      002072 FD 21r01r00      [14] 6771 	ld	iy, #_col
      002076 FD 7E 00         [19] 6772 	ld	a, 0 (iy)
      002079 DD 77 FA         [19] 6773 	ld	-6 (ix), a
                                   6774 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      00207C DD 7E FF         [19] 6775 	ld	a, -1 (ix)
      00207F C6 02            [ 7] 6776 	add	a, #0x02
      002081 DD 77 FB         [19] 6777 	ld	-5 (ix), a
                                   6778 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      002084 DD 7E F6         [19] 6779 	ld	a, -10 (ix)
      002087 D6 07            [ 7] 6780 	sub	a, #0x07
      002089 20 5F            [12] 6781 	jr	NZ, 00112$
                                   6782 ;src\/GameLogic.h:139: col > 0 && 
      00208B FD 7E 00         [19] 6783 	ld	a, 0 (iy)
      00208E B7               [ 4] 6784 	or	a, a
      00208F 28 59            [12] 6785 	jr	Z, 00112$
                                   6786 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      002091 DD 7E FA         [19] 6787 	ld	a, -6 (ix)
      002094 C6 FF            [ 7] 6788 	add	a, #0xff
      002096 DD 77 FF         [19] 6789 	ld	-1 (ix), a
      002099 4F               [ 4] 6790 	ld	c, a
      00209A 07               [ 4] 6791 	rlca
      00209B 9F               [ 4] 6792 	sbc	a, a
      00209C 47               [ 4] 6793 	ld	b, a
      00209D 69               [ 4] 6794 	ld	l, c
      00209E 60               [ 4] 6795 	ld	h, b
      00209F 29               [11] 6796 	add	hl, hl
      0020A0 09               [11] 6797 	add	hl, bc
      0020A1 29               [11] 6798 	add	hl, hl
      0020A2 29               [11] 6799 	add	hl, hl
      0020A3 DD 75 FE         [19] 6800 	ld	-2 (ix), l
      0020A6 DD 74 FF         [19] 6801 	ld	-1 (ix), h
      0020A9 3Er00            [ 7] 6802 	ld	a, #<(_playfield)
      0020AB DD 86 FE         [19] 6803 	add	a, -2 (ix)
      0020AE DD 77 FC         [19] 6804 	ld	-4 (ix), a
      0020B1 3Es00            [ 7] 6805 	ld	a, #>(_playfield)
      0020B3 DD 8E FF         [19] 6806 	adc	a, -1 (ix)
      0020B6 DD 77 FD         [19] 6807 	ld	-3 (ix), a
      0020B9 DD 7E FC         [19] 6808 	ld	a, -4 (ix)
      0020BC DD 86 F9         [19] 6809 	add	a, -7 (ix)
      0020BF DD 77 FE         [19] 6810 	ld	-2 (ix), a
      0020C2 DD 7E FD         [19] 6811 	ld	a, -3 (ix)
      0020C5 CE 00            [ 7] 6812 	adc	a, #0x00
      0020C7 DD 77 FF         [19] 6813 	ld	-1 (ix), a
      0020CA DD 6E FE         [19] 6814 	ld	l, -2 (ix)
      0020CD DD 66 FF         [19] 6815 	ld	h, -1 (ix)
      0020D0 7E               [ 7] 6816 	ld	a, (hl)
      0020D1 B7               [ 4] 6817 	or	a, a
      0020D2 20 16            [12] 6818 	jr	NZ, 00112$
                                   6819 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      0020D4 DD 7E FC         [19] 6820 	ld	a, -4 (ix)
      0020D7 DD 86 FB         [19] 6821 	add	a, -5 (ix)
      0020DA 4F               [ 4] 6822 	ld	c, a
      0020DB DD 7E FD         [19] 6823 	ld	a, -3 (ix)
      0020DE CE 00            [ 7] 6824 	adc	a, #0x00
      0020E0 47               [ 4] 6825 	ld	b, a
      0020E1 0A               [ 7] 6826 	ld	a, (bc)
      0020E2 B7               [ 4] 6827 	or	a, a
      0020E3 20 05            [12] 6828 	jr	NZ, 00112$
                                   6829 ;src\/GameLogic.h:142: col--;
      0020E5 FD 35 00         [23] 6830 	dec	0 (iy)
      0020E8 18 68            [12] 6831 	jr	00118$
      0020EA                       6832 00112$:
                                   6833 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      0020EA DD 7E F6         [19] 6834 	ld	a, -10 (ix)
      0020ED D6 03            [ 7] 6835 	sub	a, #0x03
      0020EF 20 61            [12] 6836 	jr	NZ, 00118$
                                   6837 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      0020F1 FD 21r01r00      [14] 6838 	ld	iy, #_col
      0020F5 FD 7E 00         [19] 6839 	ld	a, 0 (iy)
      0020F8 D6 05            [ 7] 6840 	sub	a, #0x05
      0020FA 30 56            [12] 6841 	jr	NC, 00118$
                                   6842 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      0020FC DD 7E FA         [19] 6843 	ld	a, -6 (ix)
      0020FF 3C               [ 4] 6844 	inc	a
      002100 DD 77 FF         [19] 6845 	ld	-1 (ix), a
      002103 4F               [ 4] 6846 	ld	c, a
      002104 07               [ 4] 6847 	rlca
      002105 9F               [ 4] 6848 	sbc	a, a
      002106 47               [ 4] 6849 	ld	b, a
      002107 69               [ 4] 6850 	ld	l, c
      002108 60               [ 4] 6851 	ld	h, b
      002109 29               [11] 6852 	add	hl, hl
      00210A 09               [11] 6853 	add	hl, bc
      00210B 29               [11] 6854 	add	hl, hl
      00210C 29               [11] 6855 	add	hl, hl
      00210D DD 75 FE         [19] 6856 	ld	-2 (ix), l
      002110 DD 74 FF         [19] 6857 	ld	-1 (ix), h
      002113 3Er00            [ 7] 6858 	ld	a, #<(_playfield)
      002115 DD 86 FE         [19] 6859 	add	a, -2 (ix)
      002118 DD 77 FC         [19] 6860 	ld	-4 (ix), a
      00211B 3Es00            [ 7] 6861 	ld	a, #>(_playfield)
      00211D DD 8E FF         [19] 6862 	adc	a, -1 (ix)
      002120 DD 77 FD         [19] 6863 	ld	-3 (ix), a
      002123 DD 7E FC         [19] 6864 	ld	a, -4 (ix)
      002126 DD 86 F9         [19] 6865 	add	a, -7 (ix)
      002129 DD 77 FE         [19] 6866 	ld	-2 (ix), a
      00212C DD 7E FD         [19] 6867 	ld	a, -3 (ix)
      00212F CE 00            [ 7] 6868 	adc	a, #0x00
      002131 DD 77 FF         [19] 6869 	ld	-1 (ix), a
      002134 DD 6E FE         [19] 6870 	ld	l, -2 (ix)
      002137 DD 66 FF         [19] 6871 	ld	h, -1 (ix)
      00213A 7E               [ 7] 6872 	ld	a, (hl)
      00213B B7               [ 4] 6873 	or	a, a
      00213C 20 14            [12] 6874 	jr	NZ, 00118$
                                   6875 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      00213E DD 7E FC         [19] 6876 	ld	a, -4 (ix)
      002141 DD 86 FB         [19] 6877 	add	a, -5 (ix)
      002144 4F               [ 4] 6878 	ld	c, a
      002145 DD 7E FD         [19] 6879 	ld	a, -3 (ix)
      002148 CE 00            [ 7] 6880 	adc	a, #0x00
      00214A 47               [ 4] 6881 	ld	b, a
      00214B 0A               [ 7] 6882 	ld	a, (bc)
      00214C B7               [ 4] 6883 	or	a, a
      00214D 20 03            [12] 6884 	jr	NZ, 00118$
                                   6885 ;src\/GameLogic.h:148: col++;
      00214F FD 34 00         [23] 6886 	inc	0 (iy)
      002152                       6887 00118$:
                                   6888 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      002152 DD 7E F3         [19] 6889 	ld	a, -13 (ix)
      002155 B7               [ 4] 6890 	or	a, a
      002156 C2r18r22         [10] 6891 	jp	NZ, 00132$
                                   6892 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002159 DD 7E F6         [19] 6893 	ld	a, -10 (ix)
      00215C 3D               [ 4] 6894 	dec	a
      00215D 28 18            [12] 6895 	jr	Z, 00119$
      00215F DD 7E F4         [19] 6896 	ld	a, -12 (ix)
      002162 B7               [ 4] 6897 	or	a, a
      002163 20 06            [12] 6898 	jr	NZ, 00124$
      002165 DD 7E F7         [19] 6899 	ld	a, -9 (ix)
      002168 3C               [ 4] 6900 	inc	a
      002169 28 0C            [12] 6901 	jr	Z, 00119$
      00216B                       6902 00124$:
      00216B DD 7E F5         [19] 6903 	ld	a, -11 (ix)
      00216E B7               [ 4] 6904 	or	a, a
      00216F 20 1A            [12] 6905 	jr	NZ, 00120$
      002171 DD 7E F8         [19] 6906 	ld	a, -8 (ix)
      002174 3C               [ 4] 6907 	inc	a
      002175 20 14            [12] 6908 	jr	NZ, 00120$
      002177                       6909 00119$:
                                   6910 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      002177 3Ar92r00         [13] 6911 	ld	a, (#_bottomPiece + 0)
      00217A 4F               [ 4] 6912 	ld	c, a
                                   6913 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      00217B 3Ar91r00         [13] 6914 	ld	a,(#_midPiece + 0)
      00217E 32r92r00         [13] 6915 	ld	(#_bottomPiece),a
                                   6916 ;src\/GameLogic.h:160: midPiece = topPiece;
      002181 3Ar90r00         [13] 6917 	ld	a,(#_topPiece + 0)
      002184 32r91r00         [13] 6918 	ld	(#_midPiece),a
                                   6919 ;src\/GameLogic.h:161: topPiece = temp;
      002187 21r90r00         [10] 6920 	ld	hl, #_topPiece
      00218A 71               [ 7] 6921 	ld	(hl), c
      00218B                       6922 00120$:
                                   6923 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      00218B DD 7E F6         [19] 6924 	ld	a, -10 (ix)
      00218E D6 05            [ 7] 6925 	sub	a, #0x05
      002190 C2r18r22         [10] 6926 	jp	NZ,00132$
                                   6927 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002193 DD 7E F9         [19] 6928 	ld	a, -7 (ix)
      002196 DD 77 FE         [19] 6929 	ld	-2 (ix), a
      002199 DD 7E F9         [19] 6930 	ld	a, -7 (ix)
      00219C DD 77 FF         [19] 6931 	ld	-1 (ix), a
      00219F                       6932 00154$:
      00219F DD 7E FF         [19] 6933 	ld	a, -1 (ix)
      0021A2 D6 0C            [ 7] 6934 	sub	a, #0x0c
      0021A4 30 72            [12] 6935 	jr	NC, 00132$
                                   6936 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0021A6 DD 7E FF         [19] 6937 	ld	a, -1 (ix)
      0021A9 D6 09            [ 7] 6938 	sub	a, #0x09
      0021AB 28 4C            [12] 6939 	jr	Z, 00125$
      0021AD ED 4Br01r00      [20] 6940 	ld	bc, (_col)
      0021B1 06 00            [ 7] 6941 	ld	b, #0x00
      0021B3 69               [ 4] 6942 	ld	l, c
      0021B4 60               [ 4] 6943 	ld	h, b
      0021B5 29               [11] 6944 	add	hl, hl
      0021B6 09               [11] 6945 	add	hl, bc
      0021B7 29               [11] 6946 	add	hl, hl
      0021B8 29               [11] 6947 	add	hl, hl
      0021B9 DD 75 FC         [19] 6948 	ld	-4 (ix), l
      0021BC DD 74 FD         [19] 6949 	ld	-3 (ix), h
      0021BF 3Er00            [ 7] 6950 	ld	a, #<(_playfield)
      0021C1 DD 86 FC         [19] 6951 	add	a, -4 (ix)
      0021C4 DD 77 FA         [19] 6952 	ld	-6 (ix), a
      0021C7 3Es00            [ 7] 6953 	ld	a, #>(_playfield)
      0021C9 DD 8E FD         [19] 6954 	adc	a, -3 (ix)
      0021CC DD 77 FB         [19] 6955 	ld	-5 (ix), a
      0021CF DD 7E FF         [19] 6956 	ld	a, -1 (ix)
      0021D2 DD 77 FD         [19] 6957 	ld	-3 (ix), a
      0021D5 DD 34 FD         [23] 6958 	inc	-3 (ix)
      0021D8 DD 34 FD         [23] 6959 	inc	-3 (ix)
      0021DB DD 34 FD         [23] 6960 	inc	-3 (ix)
      0021DE DD 7E FD         [19] 6961 	ld	a, -3 (ix)
      0021E1 DD 86 FA         [19] 6962 	add	a, -6 (ix)
      0021E4 DD 77 FC         [19] 6963 	ld	-4 (ix), a
      0021E7 3E 00            [ 7] 6964 	ld	a, #0x00
      0021E9 DD 8E FB         [19] 6965 	adc	a, -5 (ix)
      0021EC DD 77 FD         [19] 6966 	ld	-3 (ix), a
      0021EF DD 6E FC         [19] 6967 	ld	l, -4 (ix)
      0021F2 DD 66 FD         [19] 6968 	ld	h, -3 (ix)
      0021F5 7E               [ 7] 6969 	ld	a, (hl)
      0021F6 B7               [ 4] 6970 	or	a, a
      0021F7 28 14            [12] 6971 	jr	Z, 00155$
      0021F9                       6972 00125$:
                                   6973 ;src\/GameLogic.h:170: DrawPiece(line);
      0021F9 3Ar02r00         [13] 6974 	ld	a,(#_line + 0)
      0021FC F5               [11] 6975 	push	af
      0021FD 33               [ 6] 6976 	inc	sp
      0021FE CDr5Br15         [17] 6977 	call	_DrawPiece
      002201 33               [ 6] 6978 	inc	sp
                                   6979 ;src\/GameLogic.h:172: line = i;
      002202 DD 7E FE         [19] 6980 	ld	a, -2 (ix)
      002205 32r02r00         [13] 6981 	ld	(#_line),a
                                   6982 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      002208 CDrB9r1E         [17] 6983 	call	_UpdateAndDrawPieceStatic
                                   6984 ;src\/GameLogic.h:175: break;
      00220B 18 0B            [12] 6985 	jr	00132$
      00220D                       6986 00155$:
                                   6987 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00220D DD 34 FF         [23] 6988 	inc	-1 (ix)
      002210 DD 7E FF         [19] 6989 	ld	a, -1 (ix)
      002213 DD 77 FE         [19] 6990 	ld	-2 (ix), a
      002216 18 87            [12] 6991 	jr	00154$
      002218                       6992 00132$:
                                   6993 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      002218 DD 7E F6         [19] 6994 	ld	a, -10 (ix)
      00221B DD 77 FF         [19] 6995 	ld	-1 (ix), a
                                   6996 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      00221E DD 7E F6         [19] 6997 	ld	a, -10 (ix)
      002221 DD 77 F3         [19] 6998 	ld	-13 (ix), a
                                   6999 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      002224 DD 7E F7         [19] 7000 	ld	a, -9 (ix)
      002227 DD 77 F4         [19] 7001 	ld	-12 (ix), a
                                   7002 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      00222A DD 7E F8         [19] 7003 	ld	a, -8 (ix)
      00222D DD 77 F5         [19] 7004 	ld	-11 (ix), a
                                   7005 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      002230 2E 07            [ 7] 7006 	ld	l, #0x07
      002232 CDr00r00         [17] 7007 	call	_SNSMAT
                                   7008 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      002235 CB 55            [ 8] 7009 	bit	2, l
      002237 20 03            [12] 7010 	jr	NZ, 00134$
                                   7011 ;src\/GameLogic.h:214: Pause();
      002239 CDr71r1F         [17] 7012 	call	_Pause
      00223C                       7013 00134$:
                                   7014 ;src\/GameLogic.h:219: counter++;
      00223C FD 21r03r00      [14] 7015 	ld	iy, #_counter
      002240 FD 34 00         [23] 7016 	inc	0 (iy)
                                   7017 ;src\/GameLogic.h:220: if(counter == speed) {
      002243 FD 7E 00         [19] 7018 	ld	a, 0 (iy)
      002246 21r93r00         [10] 7019 	ld	hl, #_speed
      002249 96               [ 7] 7020 	sub	a, (hl)
      00224A 20 3F            [12] 7021 	jr	NZ, 00139$
                                   7022 ;src\/GameLogic.h:222: counter = 0;
      00224C 21r03r00         [10] 7023 	ld	hl, #_counter
      00224F 36 00            [10] 7024 	ld	(hl), #0x00
                                   7025 ;src\/GameLogic.h:225: DrawPiece(line);
      002251 3Ar02r00         [13] 7026 	ld	a,(#_line + 0)
      002254 F5               [11] 7027 	push	af
      002255 33               [ 6] 7028 	inc	sp
      002256 CDr5Br15         [17] 7029 	call	_DrawPiece
      002259 33               [ 6] 7030 	inc	sp
                                   7031 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      00225A FD 21r02r00      [14] 7032 	ld	iy, #_line
      00225E FD 7E 00         [19] 7033 	ld	a, 0 (iy)
      002261 D6 09            [ 7] 7034 	sub	a, #0x09
      002263 28 1F            [12] 7035 	jr	Z, 00135$
      002265 ED 4Br01r00      [20] 7036 	ld	bc, (_col)
      002269 06 00            [ 7] 7037 	ld	b, #0x00
      00226B 69               [ 4] 7038 	ld	l, c
      00226C 60               [ 4] 7039 	ld	h, b
      00226D 29               [11] 7040 	add	hl, hl
      00226E 09               [11] 7041 	add	hl, bc
      00226F 29               [11] 7042 	add	hl, hl
      002270 29               [11] 7043 	add	hl, hl
      002271 EB               [ 4] 7044 	ex	de, hl
      002272 21r00r00         [10] 7045 	ld	hl, #_playfield
      002275 19               [11] 7046 	add	hl, de
      002276 EB               [ 4] 7047 	ex	de, hl
      002277 FD 7E 00         [19] 7048 	ld	a, 0 (iy)
      00227A C6 03            [ 7] 7049 	add	a, #0x03
      00227C 6F               [ 4] 7050 	ld	l, a
      00227D 26 00            [ 7] 7051 	ld	h, #0x00
      00227F 19               [11] 7052 	add	hl, de
      002280 7E               [ 7] 7053 	ld	a, (hl)
      002281 B7               [ 4] 7054 	or	a, a
      002282 28 03            [12] 7055 	jr	Z, 00136$
      002284                       7056 00135$:
                                   7057 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      002284 CDrB9r1E         [17] 7058 	call	_UpdateAndDrawPieceStatic
      002287                       7059 00136$:
                                   7060 ;src\/GameLogic.h:234: line++;
      002287 21r02r00         [10] 7061 	ld	hl, #_line
      00228A 34               [11] 7062 	inc	(hl)
      00228B                       7063 00139$:
                                   7064 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      00228B ED 4Br01r00      [20] 7065 	ld	bc, (_col)
      00228F 06 00            [ 7] 7066 	ld	b, #0x00
      002291 69               [ 4] 7067 	ld	l, c
      002292 60               [ 4] 7068 	ld	h, b
      002293 29               [11] 7069 	add	hl, hl
      002294 09               [11] 7070 	add	hl, bc
      002295 29               [11] 7071 	add	hl, hl
      002296 29               [11] 7072 	add	hl, hl
      002297 EB               [ 4] 7073 	ex	de, hl
      002298 21r00r00         [10] 7074 	ld	hl, #_playfield
      00229B 19               [11] 7075 	add	hl, de
      00229C EB               [ 4] 7076 	ex	de, hl
      00229D 3Ar02r00         [13] 7077 	ld	a, (#_line + 0)
      0022A0 6F               [ 4] 7078 	ld	l, a
      0022A1 26 00            [ 7] 7079 	ld	h, #0x00
      0022A3 19               [11] 7080 	add	hl, de
      0022A4 3Ar90r00         [13] 7081 	ld	a,(#_topPiece + 0)
      0022A7 77               [ 7] 7082 	ld	(hl), a
                                   7083 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      0022A8 ED 4Br01r00      [20] 7084 	ld	bc, (_col)
      0022AC 06 00            [ 7] 7085 	ld	b, #0x00
      0022AE 69               [ 4] 7086 	ld	l, c
      0022AF 60               [ 4] 7087 	ld	h, b
      0022B0 29               [11] 7088 	add	hl, hl
      0022B1 09               [11] 7089 	add	hl, bc
      0022B2 29               [11] 7090 	add	hl, hl
      0022B3 29               [11] 7091 	add	hl, hl
      0022B4 EB               [ 4] 7092 	ex	de, hl
      0022B5 21r00r00         [10] 7093 	ld	hl, #_playfield
      0022B8 19               [11] 7094 	add	hl, de
      0022B9 EB               [ 4] 7095 	ex	de, hl
      0022BA 3Ar02r00         [13] 7096 	ld	a, (#_line + 0)
      0022BD 6F               [ 4] 7097 	ld	l, a
      0022BE 2C               [ 4] 7098 	inc	l
      0022BF 26 00            [ 7] 7099 	ld	h, #0x00
      0022C1 19               [11] 7100 	add	hl, de
      0022C2 3Ar91r00         [13] 7101 	ld	a,(#_midPiece + 0)
      0022C5 77               [ 7] 7102 	ld	(hl), a
                                   7103 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      0022C6 ED 4Br01r00      [20] 7104 	ld	bc, (_col)
      0022CA 06 00            [ 7] 7105 	ld	b, #0x00
      0022CC 69               [ 4] 7106 	ld	l, c
      0022CD 60               [ 4] 7107 	ld	h, b
      0022CE 29               [11] 7108 	add	hl, hl
      0022CF 09               [11] 7109 	add	hl, bc
      0022D0 29               [11] 7110 	add	hl, hl
      0022D1 29               [11] 7111 	add	hl, hl
      0022D2 EB               [ 4] 7112 	ex	de, hl
      0022D3 21r00r00         [10] 7113 	ld	hl, #_playfield
      0022D6 19               [11] 7114 	add	hl, de
      0022D7 EB               [ 4] 7115 	ex	de, hl
      0022D8 3Ar02r00         [13] 7116 	ld	a, (#_line + 0)
      0022DB 6F               [ 4] 7117 	ld	l, a
      0022DC 2C               [ 4] 7118 	inc	l
      0022DD 2C               [ 4] 7119 	inc	l
      0022DE 26 00            [ 7] 7120 	ld	h, #0x00
      0022E0 19               [11] 7121 	add	hl, de
      0022E1 3Ar92r00         [13] 7122 	ld	a,(#_bottomPiece + 0)
      0022E4 77               [ 7] 7123 	ld	(hl), a
                                   7124 ;src\/GameLogic.h:248: DrawPiece(line);
      0022E5 3Ar02r00         [13] 7125 	ld	a,(#_line + 0)
      0022E8 F5               [11] 7126 	push	af
      0022E9 33               [ 6] 7127 	inc	sp
      0022EA CDr5Br15         [17] 7128 	call	_DrawPiece
      0022ED 33               [ 6] 7129 	inc	sp
                                   7130 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      0022EE ED 4Br01r00      [20] 7131 	ld	bc, (_col)
      0022F2 06 00            [ 7] 7132 	ld	b, #0x00
      0022F4 69               [ 4] 7133 	ld	l, c
      0022F5 60               [ 4] 7134 	ld	h, b
      0022F6 29               [11] 7135 	add	hl, hl
      0022F7 09               [11] 7136 	add	hl, bc
      0022F8 29               [11] 7137 	add	hl, hl
      0022F9 29               [11] 7138 	add	hl, hl
      0022FA EB               [ 4] 7139 	ex	de, hl
                                   7140 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      0022FB 21r00r00         [10] 7141 	ld	hl, #_playfield
      0022FE 19               [11] 7142 	add	hl, de
      0022FF EB               [ 4] 7143 	ex	de, hl
      002300 3Ar02r00         [13] 7144 	ld	a,(#_line + 0)
      002303 C6 03            [ 7] 7145 	add	a, #0x03
      002305 4F               [ 4] 7146 	ld	c, a
      002306 69               [ 4] 7147 	ld	l, c
      002307 26 00            [ 7] 7148 	ld	h, #0x00
      002309 19               [11] 7149 	add	hl, de
      00230A 7E               [ 7] 7150 	ld	a, (hl)
      00230B B7               [ 4] 7151 	or	a, a
      00230C 28 06            [12] 7152 	jr	Z, 00148$
                                   7153 ;src\/GameLogic.h:254: HideArrowSprite();
      00230E CDr08r0A         [17] 7154 	call	_HideArrowSprite
      002311 C3rCEr1F         [10] 7155 	jp	00150$
      002314                       7156 00148$:
                                   7157 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002314 41               [ 4] 7158 	ld	b, c
      002315                       7159 00157$:
      002315 78               [ 4] 7160 	ld	a, b
      002316 D6 0C            [ 7] 7161 	sub	a, #0x0c
      002318 D2rCEr1F         [10] 7162 	jp	NC, 00150$
                                   7163 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00231B 3Ar01r00         [13] 7164 	ld	a,(#_col + 0)
      00231E 87               [ 4] 7165 	add	a, a
      00231F 87               [ 4] 7166 	add	a, a
      002320 87               [ 4] 7167 	add	a, a
      002321 87               [ 4] 7168 	add	a, a
      002322 DD 77 FE         [19] 7169 	ld	-2 (ix), a
                                   7170 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002325 68               [ 4] 7171 	ld	l, b
      002326 26 00            [ 7] 7172 	ld	h, #0x00
      002328 19               [11] 7173 	add	hl, de
                                   7174 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002329 DD 7E FE         [19] 7175 	ld	a, -2 (ix)
      00232C C6 50            [ 7] 7176 	add	a, #0x50
      00232E DD 77 FE         [19] 7177 	ld	-2 (ix), a
                                   7178 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002331 6E               [ 7] 7179 	ld	l, (hl)
      002332 78               [ 4] 7180 	ld	a, b
      002333 D6 0B            [ 7] 7181 	sub	a,#0x0b
      002335 20 16            [12] 7182 	jr	NZ, 00143$
      002337 B5               [ 4] 7183 	or	a,l
      002338 20 13            [12] 7184 	jr	NZ, 00143$
                                   7185 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00233A 79               [ 4] 7186 	ld	a, c
      00233B 87               [ 4] 7187 	add	a, a
      00233C 87               [ 4] 7188 	add	a, a
      00233D 87               [ 4] 7189 	add	a, a
      00233E 87               [ 4] 7190 	add	a, a
      00233F F5               [11] 7191 	push	af
      002340 33               [ 6] 7192 	inc	sp
      002341 DD 7E FE         [19] 7193 	ld	a, -2 (ix)
      002344 F5               [11] 7194 	push	af
      002345 33               [ 6] 7195 	inc	sp
      002346 CDrEDr00         [17] 7196 	call	_DrawArrowSprite
      002349 F1               [10] 7197 	pop	af
                                   7198 ;src\/GameLogic.h:260: break;
      00234A C3rCEr1F         [10] 7199 	jp	00150$
      00234D                       7200 00143$:
                                   7201 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      00234D 7D               [ 4] 7202 	ld	a, l
      00234E B7               [ 4] 7203 	or	a, a
      00234F 28 14            [12] 7204 	jr	Z, 00158$
                                   7205 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002351 79               [ 4] 7206 	ld	a, c
      002352 3D               [ 4] 7207 	dec	a
      002353 87               [ 4] 7208 	add	a, a
      002354 87               [ 4] 7209 	add	a, a
      002355 87               [ 4] 7210 	add	a, a
      002356 87               [ 4] 7211 	add	a, a
      002357 F5               [11] 7212 	push	af
      002358 33               [ 6] 7213 	inc	sp
      002359 DD 7E FE         [19] 7214 	ld	a, -2 (ix)
      00235C F5               [11] 7215 	push	af
      00235D 33               [ 6] 7216 	inc	sp
      00235E CDrEDr00         [17] 7217 	call	_DrawArrowSprite
      002361 F1               [10] 7218 	pop	af
                                   7219 ;src\/GameLogic.h:264: break;
      002362 C3rCEr1F         [10] 7220 	jp	00150$
      002365                       7221 00158$:
                                   7222 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002365 04               [ 4] 7223 	inc	b
      002366 48               [ 4] 7224 	ld	c, b
      002367 18 AC            [12] 7225 	jr	00157$
      002369                       7226 00152$:
                                   7227 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      002369 11 0C 0C         [10] 7228 	ld	de, #0x0c0c
      00236C D5               [11] 7229 	push	de
      00236D 21r81r23         [10] 7230 	ld	hl, #___str_6
      002370 E5               [11] 7231 	push	hl
      002371 CDrB1r0D         [17] 7232 	call	_DrawString
      002374 F1               [10] 7233 	pop	af
                                   7234 ;src\/GameLogic.h:276: Wait(60 * 3);
      002375 21 B4 00         [10] 7235 	ld	hl, #0x00b4
      002378 E3               [19] 7236 	ex	(sp),hl
      002379 CDr00r00         [17] 7237 	call	_Wait
                                   7238 ;src\/GameLogic.h:278: }
      00237C DD F9            [10] 7239 	ld	sp,ix
      00237E DD E1            [14] 7240 	pop	ix
      002380 C9               [10] 7241 	ret
      002381                       7242 ___str_6:
      002381 47 41 4D 45 20 4F 56  7243 	.ascii "GAME OVER"
             45 52
      00238A 00                    7244 	.db 0x00
                                   7245 ;src\/GameLogic.h:280: void TestCase() {
                                   7246 ;	---------------------------------
                                   7247 ; Function TestCase
                                   7248 ; ---------------------------------
      00238B                       7249 _TestCase::
                                   7250 ;src\/GameLogic.h:301: playfield[2][ 8] = TILE_GREEN;
      00238B 21r20r00         [10] 7251 	ld	hl, #(_playfield + 0x0020)
      00238E 36 04            [10] 7252 	ld	(hl), #0x04
                                   7253 ;src\/GameLogic.h:302: playfield[2][ 9] = TILE_BLUE;
      002390 21r21r00         [10] 7254 	ld	hl, #(_playfield + 0x0021)
      002393 36 0C            [10] 7255 	ld	(hl), #0x0c
                                   7256 ;src\/GameLogic.h:304: playfield[0][10] = TILE_BLUE;
      002395 21r0Ar00         [10] 7257 	ld	hl, #(_playfield + 0x000a)
      002398 36 0C            [10] 7258 	ld	(hl), #0x0c
                                   7259 ;src\/GameLogic.h:305: playfield[1][10] = TILE_BLUE;
      00239A 21r16r00         [10] 7260 	ld	hl, #(_playfield + 0x0016)
      00239D 36 0C            [10] 7261 	ld	(hl), #0x0c
                                   7262 ;src\/GameLogic.h:306: playfield[2][10] = TILE_RED;
      00239F 21r22r00         [10] 7263 	ld	hl, #(_playfield + 0x0022)
      0023A2 36 08            [10] 7264 	ld	(hl), #0x08
                                   7265 ;src\/GameLogic.h:307: playfield[4][10] = TILE_RED;
      0023A4 21r3Ar00         [10] 7266 	ld	hl, #(_playfield + 0x003a)
      0023A7 36 08            [10] 7267 	ld	(hl), #0x08
                                   7268 ;src\/GameLogic.h:308: playfield[5][10] = TILE_BLUE;
      0023A9 21r46r00         [10] 7269 	ld	hl, #(_playfield + 0x0046)
      0023AC 36 0C            [10] 7270 	ld	(hl), #0x0c
                                   7271 ;src\/GameLogic.h:310: playfield[0][11] = TILE_GREEN;
      0023AE 21r0Br00         [10] 7272 	ld	hl, #(_playfield + 0x000b)
      0023B1 36 04            [10] 7273 	ld	(hl), #0x04
                                   7274 ;src\/GameLogic.h:311: playfield[1][11] = TILE_GREEN;
      0023B3 21r17r00         [10] 7275 	ld	hl, #(_playfield + 0x0017)
      0023B6 36 04            [10] 7276 	ld	(hl), #0x04
                                   7277 ;src\/GameLogic.h:312: playfield[2][11] = TILE_RED;
      0023B8 21r23r00         [10] 7278 	ld	hl, #(_playfield + 0x0023)
      0023BB 36 08            [10] 7279 	ld	(hl), #0x08
                                   7280 ;src\/GameLogic.h:313: playfield[3][11] = EMPTY;
      0023BD 21r2Fr00         [10] 7281 	ld	hl, #(_playfield + 0x002f)
      0023C0 36 00            [10] 7282 	ld	(hl), #0x00
                                   7283 ;src\/GameLogic.h:314: playfield[4][11] = TILE_RED;
      0023C2 21r3Br00         [10] 7284 	ld	hl, #(_playfield + 0x003b)
      0023C5 36 08            [10] 7285 	ld	(hl), #0x08
                                   7286 ;src\/GameLogic.h:315: playfield[5][11] = TILE_RED;
      0023C7 21r47r00         [10] 7287 	ld	hl, #(_playfield + 0x0047)
      0023CA 36 08            [10] 7288 	ld	(hl), #0x08
                                   7289 ;src\/GameLogic.h:317: topPiece = TILE_BLUE;
      0023CC 3E 0C            [ 7] 7290 	ld	a, #0x0c
      0023CE 32r90r00         [13] 7291 	ld	(#_topPiece), a
                                   7292 ;src\/GameLogic.h:318: midPiece = TILE_RED;
                                   7293 ;src\/GameLogic.h:319: bottomPiece = TILE_RED;
      0023D1 3E 08            [ 7] 7294 	ld	a,#0x08
      0023D3 32r91r00         [13] 7295 	ld	(#_midPiece),a
      0023D6 32r92r00         [13] 7296 	ld	(#_bottomPiece), a
                                   7297 ;src\/GameLogic.h:320: }
      0023D9 C9               [10] 7298 	ret
                                   7299 ;src\/GameLogic.h:322: void InitGame() {
                                   7300 ;	---------------------------------
                                   7301 ; Function InitGame
                                   7302 ; ---------------------------------
      0023DA                       7303 _InitGame::
                                   7304 ;src\/GameLogic.h:324: gameOver = FALSE;
      0023DA 21r00r00         [10] 7305 	ld	hl, #_gameOver
      0023DD 36 00            [10] 7306 	ld	(hl), #0x00
                                   7307 ;src\/GameLogic.h:325: line = INITIAL_LINE;
      0023DF 21r02r00         [10] 7308 	ld	hl, #_line
      0023E2 36 00            [10] 7309 	ld	(hl), #0x00
                                   7310 ;src\/GameLogic.h:326: col = INITIAL_COL;
      0023E4 21r01r00         [10] 7311 	ld	hl, #_col
      0023E7 36 02            [10] 7312 	ld	(hl), #0x02
                                   7313 ;src\/GameLogic.h:327: blocksRemoved = 0;
      0023E9 21 00 00         [10] 7314 	ld	hl, #0x0000
      0023EC 22r04r00         [16] 7315 	ld	(_blocksRemoved), hl
                                   7316 ;src\/GameLogic.h:328: level = 1;
      0023EF 21r06r00         [10] 7317 	ld	hl, #_level
      0023F2 36 01            [10] 7318 	ld	(hl), #0x01
                                   7319 ;src\/GameLogic.h:329: newLevel = FALSE;
      0023F4 21r07r00         [10] 7320 	ld	hl, #_newLevel
      0023F7 36 00            [10] 7321 	ld	(hl), #0x00
                                   7322 ;src\/GameLogic.h:330: speed = 60;
      0023F9 21r93r00         [10] 7323 	ld	hl, #_speed
      0023FC 36 3C            [10] 7324 	ld	(hl), #0x3c
                                   7325 ;src\/GameLogic.h:332: InitVRAM();
      0023FE CDr04r12         [17] 7326 	call	_InitVRAM
                                   7327 ;src\/GameLogic.h:335: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002401 3Ar08r00         [13] 7328 	ld	a, (#_rndSeed + 0)
      002404 5F               [ 4] 7329 	ld	e, a
      002405 3A 9E FC         [13] 7330 	ld	a, (#_JIFFY + 0)
      002408 67               [ 4] 7331 	ld	h, a
      002409 2E 00            [ 7] 7332 	ld	l, #0x00
      00240B 55               [ 4] 7333 	ld	d, l
      00240C 06 08            [ 7] 7334 	ld	b, #0x08
      00240E                       7335 00133$:
      00240E 29               [11] 7336 	add	hl, hl
      00240F 30 01            [12] 7337 	jr	NC, 00134$
      002411 19               [11] 7338 	add	hl, de
      002412                       7339 00134$:
      002412 10 FA            [13] 7340 	djnz	00133$
      002414 7D               [ 4] 7341 	ld	a, l
      002415 C6 63            [ 7] 7342 	add	a, #0x63
      002417 4F               [ 4] 7343 	ld	c, a
      002418 3Ar08r00         [13] 7344 	ld	a, (#_rndSeed + 0)
      00241B 5F               [ 4] 7345 	ld	e, a
      00241C 3A 9E FC         [13] 7346 	ld	a, (#_JIFFY + 0)
      00241F 67               [ 4] 7347 	ld	h, a
      002420 2E 00            [ 7] 7348 	ld	l, #0x00
      002422 55               [ 4] 7349 	ld	d, l
      002423 06 08            [ 7] 7350 	ld	b, #0x08
      002425                       7351 00135$:
      002425 29               [11] 7352 	add	hl, hl
      002426 30 01            [12] 7353 	jr	NC, 00136$
      002428 19               [11] 7354 	add	hl, de
      002429                       7355 00136$:
      002429 10 FA            [13] 7356 	djnz	00135$
      00242B 79               [ 4] 7357 	ld	a, c
      00242C F5               [11] 7358 	push	af
      00242D 7D               [ 4] 7359 	ld	a, l
      00242E 33               [ 6] 7360 	inc	sp
      00242F F5               [11] 7361 	push	af
      002430 33               [ 6] 7362 	inc	sp
      002431 3Ar08r00         [13] 7363 	ld	a,(#_rndSeed + 0)
      002434 F5               [11] 7364 	push	af
      002435 33               [ 6] 7365 	inc	sp
      002436 CDr50r00         [17] 7366 	call	_InitRnd
      002439 F1               [10] 7367 	pop	af
      00243A 33               [ 6] 7368 	inc	sp
                                   7369 ;src\/GameLogic.h:338: RandomPiece();
      00243B CDr91r1E         [17] 7370 	call	_RandomPiece
                                   7371 ;src\/GameLogic.h:341: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00243E 0E 00            [ 7] 7372 	ld	c, #0x00
      002440                       7373 00107$:
      002440 79               [ 4] 7374 	ld	a, c
      002441 D6 0C            [ 7] 7375 	sub	a, #0x0c
      002443 30 20            [12] 7376 	jr	NC, 00102$
                                   7377 ;src\/GameLogic.h:342: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002445 06 00            [ 7] 7378 	ld	b, #0x00
      002447                       7379 00104$:
      002447 78               [ 4] 7380 	ld	a, b
      002448 D6 06            [ 7] 7381 	sub	a, #0x06
      00244A 30 16            [12] 7382 	jr	NC, 00108$
                                   7383 ;src\/GameLogic.h:343: playfield[col][line] = EMPTY;
      00244C 58               [ 4] 7384 	ld	e, b
      00244D 16 00            [ 7] 7385 	ld	d, #0x00
      00244F 6B               [ 4] 7386 	ld	l, e
      002450 62               [ 4] 7387 	ld	h, d
      002451 29               [11] 7388 	add	hl, hl
      002452 19               [11] 7389 	add	hl, de
      002453 29               [11] 7390 	add	hl, hl
      002454 29               [11] 7391 	add	hl, hl
      002455 11r00r00         [10] 7392 	ld	de, #_playfield
      002458 19               [11] 7393 	add	hl, de
      002459 59               [ 4] 7394 	ld	e, c
      00245A 16 00            [ 7] 7395 	ld	d, #0x00
      00245C 19               [11] 7396 	add	hl, de
      00245D 36 00            [10] 7397 	ld	(hl), #0x00
                                   7398 ;src\/GameLogic.h:342: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00245F 04               [ 4] 7399 	inc	b
      002460 18 E5            [12] 7400 	jr	00104$
      002462                       7401 00108$:
                                   7402 ;src\/GameLogic.h:341: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002462 0C               [ 4] 7403 	inc	c
      002463 18 DB            [12] 7404 	jr	00107$
      002465                       7405 00102$:
                                   7406 ;src\/GameLogic.h:348: TestCase();
      002465 CDr8Br23         [17] 7407 	call	_TestCase
                                   7408 ;src\/GameLogic.h:352: DrawBackground();
      002468 CDrD5r11         [17] 7409 	call	_DrawBackground
                                   7410 ;src\/GameLogic.h:354: DrawPlayfield();
      00246B CDr7Er15         [17] 7411 	call	_DrawPlayfield
                                   7412 ;src\/GameLogic.h:356: DrawScore();
      00246E CDr3Fr10         [17] 7413 	call	_DrawScore
                                   7414 ;src\/GameLogic.h:358: GameLoop();
                                   7415 ;src\/GameLogic.h:359: }
      002471 C3rB1r1F         [10] 7416 	jp	_GameLoop
                                   7417 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7418 ;	---------------------------------
                                   7419 ; Function ChangeFontColor
                                   7420 ; ---------------------------------
      002474                       7421 _ChangeFontColor::
                                   7422 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002474 21 02 00         [10] 7423 	ld	hl, #2
      002477 39               [11] 7424 	add	hl, sp
      002478 7E               [ 7] 7425 	ld	a, (hl)
      002479 F5               [11] 7426 	push	af
      00247A 33               [ 6] 7427 	inc	sp
      00247B 21 00 03         [10] 7428 	ld	hl, #0x0300
      00247E E5               [11] 7429 	push	hl
      00247F 21 78 21         [10] 7430 	ld	hl, #0x2178
      002482 E5               [11] 7431 	push	hl
      002483 CDr00r00         [17] 7432 	call	_FILVRM
      002486 F1               [10] 7433 	pop	af
      002487 F1               [10] 7434 	pop	af
      002488 33               [ 6] 7435 	inc	sp
                                   7436 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002489 21 02 00         [10] 7437 	ld	hl, #2
      00248C 39               [11] 7438 	add	hl, sp
      00248D 7E               [ 7] 7439 	ld	a, (hl)
      00248E F5               [11] 7440 	push	af
      00248F 33               [ 6] 7441 	inc	sp
      002490 21 00 03         [10] 7442 	ld	hl, #0x0300
      002493 E5               [11] 7443 	push	hl
      002494 21 78 29         [10] 7444 	ld	hl, #0x2978
      002497 E5               [11] 7445 	push	hl
      002498 CDr00r00         [17] 7446 	call	_FILVRM
      00249B F1               [10] 7447 	pop	af
      00249C F1               [10] 7448 	pop	af
      00249D 33               [ 6] 7449 	inc	sp
                                   7450 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00249E 21 02 00         [10] 7451 	ld	hl, #2
      0024A1 39               [11] 7452 	add	hl, sp
      0024A2 7E               [ 7] 7453 	ld	a, (hl)
      0024A3 F5               [11] 7454 	push	af
      0024A4 33               [ 6] 7455 	inc	sp
      0024A5 21 00 03         [10] 7456 	ld	hl, #0x0300
      0024A8 E5               [11] 7457 	push	hl
      0024A9 21 78 31         [10] 7458 	ld	hl, #0x3178
      0024AC E5               [11] 7459 	push	hl
      0024AD CDr00r00         [17] 7460 	call	_FILVRM
      0024B0 F1               [10] 7461 	pop	af
      0024B1 F1               [10] 7462 	pop	af
      0024B2 33               [ 6] 7463 	inc	sp
                                   7464 ;src\/Intro.h:7: }
      0024B3 C9               [10] 7465 	ret
                                   7466 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7467 ;	---------------------------------
                                   7468 ; Function ScrollDownFont
                                   7469 ; ---------------------------------
      0024B4                       7470 _ScrollDownFont::
      0024B4 DD E5            [15] 7471 	push	ix
      0024B6 DD 21 00 00      [14] 7472 	ld	ix,#0
      0024BA DD 39            [15] 7473 	add	ix,sp
      0024BC F5               [11] 7474 	push	af
                                   7475 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0024BD 11 78 09         [10] 7476 	ld	de, #0x0978
      0024C0                       7477 00107$:
      0024C0 7B               [ 4] 7478 	ld	a, e
      0024C1 D6 78            [ 7] 7479 	sub	a, #0x78
      0024C3 7A               [ 4] 7480 	ld	a, d
      0024C4 DE 0C            [ 7] 7481 	sbc	a, #0x0c
      0024C6 30 44            [12] 7482 	jr	NC, 00109$
                                   7483 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0024C8 33               [ 6] 7484 	inc	sp
      0024C9 33               [ 6] 7485 	inc	sp
      0024CA D5               [11] 7486 	push	de
      0024CB DD 7E FE         [19] 7487 	ld	a, -2 (ix)
      0024CE C6 07            [ 7] 7488 	add	a, #0x07
      0024D0 4F               [ 4] 7489 	ld	c, a
      0024D1 DD 7E FF         [19] 7490 	ld	a, -1 (ix)
      0024D4 CE 00            [ 7] 7491 	adc	a, #0x00
      0024D6 47               [ 4] 7492 	ld	b, a
      0024D7                       7493 00104$:
      0024D7 78               [ 4] 7494 	ld	a, b
      0024D8 B1               [ 4] 7495 	or	a, c
      0024D9 28 1A            [12] 7496 	jr	Z, 00101$
                                   7497 ;src\/Intro.h:27: value = RDVRM(j-1);
      0024DB 69               [ 4] 7498 	ld	l, c
      0024DC 60               [ 4] 7499 	ld	h, b
      0024DD 2B               [ 6] 7500 	dec	hl
      0024DE C5               [11] 7501 	push	bc
      0024DF D5               [11] 7502 	push	de
      0024E0 CDr00r00         [17] 7503 	call	_RDVRM
      0024E3 D1               [10] 7504 	pop	de
      0024E4 C1               [10] 7505 	pop	bc
                                   7506 ;src\/Intro.h:29: WRTVRM(j, 0);
      0024E5 C5               [11] 7507 	push	bc
      0024E6 D5               [11] 7508 	push	de
      0024E7 AF               [ 4] 7509 	xor	a, a
      0024E8 F5               [11] 7510 	push	af
      0024E9 33               [ 6] 7511 	inc	sp
      0024EA C5               [11] 7512 	push	bc
      0024EB CDr00r00         [17] 7513 	call	_WRTVRM
      0024EE F1               [10] 7514 	pop	af
      0024EF 33               [ 6] 7515 	inc	sp
      0024F0 D1               [10] 7516 	pop	de
      0024F1 C1               [10] 7517 	pop	bc
                                   7518 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0024F2 0B               [ 6] 7519 	dec	bc
      0024F3 18 E2            [12] 7520 	jr	00104$
      0024F5                       7521 00101$:
                                   7522 ;src\/Intro.h:31: WRTVRM(i, 0);
      0024F5 AF               [ 4] 7523 	xor	a, a
      0024F6 F5               [11] 7524 	push	af
      0024F7 33               [ 6] 7525 	inc	sp
      0024F8 D5               [11] 7526 	push	de
      0024F9 CDr00r00         [17] 7527 	call	_WRTVRM
      0024FC F1               [10] 7528 	pop	af
      0024FD 33               [ 6] 7529 	inc	sp
                                   7530 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0024FE DD 7E FE         [19] 7531 	ld	a, -2 (ix)
      002501 C6 08            [ 7] 7532 	add	a, #0x08
      002503 5F               [ 4] 7533 	ld	e, a
      002504 DD 7E FF         [19] 7534 	ld	a, -1 (ix)
      002507 CE 00            [ 7] 7535 	adc	a, #0x00
      002509 57               [ 4] 7536 	ld	d, a
      00250A 18 B4            [12] 7537 	jr	00107$
      00250C                       7538 00109$:
                                   7539 ;src\/Intro.h:35: }
      00250C DD F9            [10] 7540 	ld	sp, ix
      00250E DD E1            [14] 7541 	pop	ix
      002510 C9               [10] 7542 	ret
                                   7543 ;src\/Intro.h:37: void Intro() {
                                   7544 ;	---------------------------------
                                   7545 ; Function Intro
                                   7546 ; ---------------------------------
      002511                       7547 _Intro::
                                   7548 ;src\/Intro.h:41: InitVRAM();
      002511 CDr04r12         [17] 7549 	call	_InitVRAM
                                   7550 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002514 11 0B 0B         [10] 7551 	ld	de, #0x0b0b
      002517 D5               [11] 7552 	push	de
      002518 21r86r25         [10] 7553 	ld	hl, #___str_7
      00251B E5               [11] 7554 	push	hl
      00251C CDrB1r0D         [17] 7555 	call	_DrawString
      00251F F1               [10] 7556 	pop	af
      002520 F1               [10] 7557 	pop	af
                                   7558 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002521 11 09 0D         [10] 7559 	ld	de, #0x0d09
      002524 D5               [11] 7560 	push	de
      002525 21r90r25         [10] 7561 	ld	hl, #___str_8
      002528 E5               [11] 7562 	push	hl
      002529 CDrB1r0D         [17] 7563 	call	_DrawString
      00252C F1               [10] 7564 	pop	af
                                   7565 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00252D 26 F0            [ 7] 7566 	ld	h,#0xf0
      00252F E3               [19] 7567 	ex	(sp),hl
      002530 33               [ 6] 7568 	inc	sp
      002531 CDr74r24         [17] 7569 	call	_ChangeFontColor
      002534 33               [ 6] 7570 	inc	sp
                                   7571 ;src\/Intro.h:56: Wait(2 * 60);
      002535 21 78 00         [10] 7572 	ld	hl, #0x0078
      002538 E5               [11] 7573 	push	hl
      002539 CDr00r00         [17] 7574 	call	_Wait
      00253C F1               [10] 7575 	pop	af
                                   7576 ;src\/Intro.h:58: while(counter++ < 20) {
      00253D 0E 00            [ 7] 7577 	ld	c, #0x00
      00253F                       7578 00112$:
      00253F 79               [ 4] 7579 	ld	a, c
      002540 D6 14            [ 7] 7580 	sub	a, #0x14
      002542 D0               [11] 7581 	ret	NC
      002543 0C               [ 4] 7582 	inc	c
                                   7583 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002544 21 9E FC         [10] 7584 	ld	hl, #_JIFFY
      002547 46               [ 7] 7585 	ld	b, (hl)
                                   7586 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002548                       7587 00101$:
      002548 58               [ 4] 7588 	ld	e, b
      002549 16 00            [ 7] 7589 	ld	d, #0x00
      00254B 2A 9E FC         [16] 7590 	ld	hl, (_JIFFY)
      00254E BF               [ 4] 7591 	cp	a, a
      00254F ED 52            [15] 7592 	sbc	hl, de
      002551 28 F5            [12] 7593 	jr	Z, 00101$
                                   7594 ;src\/Intro.h:63: if(counter == 15) {
      002553 79               [ 4] 7595 	ld	a, c
      002554 D6 0F            [ 7] 7596 	sub	a, #0x0f
      002556 20 0C            [12] 7597 	jr	NZ, 00110$
                                   7598 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002558 C5               [11] 7599 	push	bc
      002559 3E 40            [ 7] 7600 	ld	a, #0x40
      00255B F5               [11] 7601 	push	af
      00255C 33               [ 6] 7602 	inc	sp
      00255D CDr74r24         [17] 7603 	call	_ChangeFontColor
      002560 33               [ 6] 7604 	inc	sp
      002561 C1               [10] 7605 	pop	bc
      002562 18 DB            [12] 7606 	jr	00112$
      002564                       7607 00110$:
                                   7608 ;src\/Intro.h:66: else if(counter == 10) {
      002564 79               [ 4] 7609 	ld	a, c
      002565 D6 0A            [ 7] 7610 	sub	a, #0x0a
      002567 20 0C            [12] 7611 	jr	NZ, 00107$
                                   7612 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002569 C5               [11] 7613 	push	bc
      00256A 3E 50            [ 7] 7614 	ld	a, #0x50
      00256C F5               [11] 7615 	push	af
      00256D 33               [ 6] 7616 	inc	sp
      00256E CDr74r24         [17] 7617 	call	_ChangeFontColor
      002571 33               [ 6] 7618 	inc	sp
      002572 C1               [10] 7619 	pop	bc
      002573 18 CA            [12] 7620 	jr	00112$
      002575                       7621 00107$:
                                   7622 ;src\/Intro.h:69: else if(counter == 5) {
      002575 79               [ 4] 7623 	ld	a, c
      002576 D6 05            [ 7] 7624 	sub	a, #0x05
      002578 20 C5            [12] 7625 	jr	NZ, 00112$
                                   7626 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      00257A C5               [11] 7627 	push	bc
      00257B 3E E0            [ 7] 7628 	ld	a, #0xe0
      00257D F5               [11] 7629 	push	af
      00257E 33               [ 6] 7630 	inc	sp
      00257F CDr74r24         [17] 7631 	call	_ChangeFontColor
      002582 33               [ 6] 7632 	inc	sp
      002583 C1               [10] 7633 	pop	bc
                                   7634 ;src\/Intro.h:140: }
      002584 18 B9            [12] 7635 	jr	00112$
      002586                       7636 ___str_7:
      002586 41 20 47 41 4D 45 20  7637 	.ascii "A GAME BY"
             42 59
      00258F 00                    7638 	.db 0x00
      002590                       7639 ___str_8:
      002590 41 4E 44 52 45 20 42  7640 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      00259E 00                    7641 	.db 0x00
                                   7642 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7643 ;	---------------------------------
                                   7644 ; Function SetBlock
                                   7645 ; ---------------------------------
      00259F                       7646 _SetBlock::
      00259F DD E5            [15] 7647 	push	ix
      0025A1 DD 21 00 00      [14] 7648 	ld	ix,#0
      0025A5 DD 39            [15] 7649 	add	ix,sp
                                   7650 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0025A7 DD 7E 04         [19] 7651 	ld	a, 4 (ix)
      0025AA 06 00            [ 7] 7652 	ld	b, #0x00
      0025AC 4F               [ 4] 7653 	ld	c, a
      0025AD 78               [ 4] 7654 	ld	a, b
      0025AE C6 18            [ 7] 7655 	add	a, #0x18
      0025B0 47               [ 4] 7656 	ld	b, a
      0025B1 DD 6E 05         [19] 7657 	ld	l, 5 (ix)
      0025B4 26 00            [ 7] 7658 	ld	h, #0x00
      0025B6 29               [11] 7659 	add	hl, hl
      0025B7 29               [11] 7660 	add	hl, hl
      0025B8 29               [11] 7661 	add	hl, hl
      0025B9 29               [11] 7662 	add	hl, hl
      0025BA 29               [11] 7663 	add	hl, hl
      0025BB 09               [11] 7664 	add	hl, bc
      0025BC DD 7E 06         [19] 7665 	ld	a, 6 (ix)
      0025BF F5               [11] 7666 	push	af
      0025C0 33               [ 6] 7667 	inc	sp
      0025C1 E5               [11] 7668 	push	hl
      0025C2 CDr00r00         [17] 7669 	call	_WRTVRM
      0025C5 F1               [10] 7670 	pop	af
      0025C6 33               [ 6] 7671 	inc	sp
                                   7672 ;src\/Title.h:16: }
      0025C7 DD E1            [14] 7673 	pop	ix
      0025C9 C9               [10] 7674 	ret
                                   7675 ;src\/Title.h:18: void TitleScreen() {
                                   7676 ;	---------------------------------
                                   7677 ; Function TitleScreen
                                   7678 ; ---------------------------------
      0025CA                       7679 _TitleScreen::
      0025CA DD E5            [15] 7680 	push	ix
      0025CC DD 21 00 00      [14] 7681 	ld	ix,#0
      0025D0 DD 39            [15] 7682 	add	ix,sp
      0025D2 21 EB FF         [10] 7683 	ld	hl, #-21
      0025D5 39               [11] 7684 	add	hl, sp
      0025D6 F9               [ 6] 7685 	ld	sp, hl
                                   7686 ;src\/Title.h:19: byte colorIndex = 0;
      0025D7 0E 00            [ 7] 7687 	ld	c, #0x00
                                   7688 ;src\/Title.h:52: const char blocks[] = {
      0025D9 21 00 00         [10] 7689 	ld	hl, #0
      0025DC 39               [11] 7690 	add	hl, sp
      0025DD EB               [ 4] 7691 	ex	de, hl
      0025DE 3E 8E            [ 7] 7692 	ld	a, #0x8e
      0025E0 12               [ 7] 7693 	ld	(de), a
      0025E1 6B               [ 4] 7694 	ld	l, e
      0025E2 62               [ 4] 7695 	ld	h, d
      0025E3 23               [ 6] 7696 	inc	hl
      0025E4 36 8F            [10] 7697 	ld	(hl), #0x8f
      0025E6 6B               [ 4] 7698 	ld	l, e
      0025E7 62               [ 4] 7699 	ld	h, d
      0025E8 23               [ 6] 7700 	inc	hl
      0025E9 23               [ 6] 7701 	inc	hl
      0025EA 36 90            [10] 7702 	ld	(hl), #0x90
      0025EC 6B               [ 4] 7703 	ld	l, e
      0025ED 62               [ 4] 7704 	ld	h, d
      0025EE 23               [ 6] 7705 	inc	hl
      0025EF 23               [ 6] 7706 	inc	hl
      0025F0 23               [ 6] 7707 	inc	hl
      0025F1 36 91            [10] 7708 	ld	(hl), #0x91
      0025F3 21 04 00         [10] 7709 	ld	hl, #0x0004
      0025F6 19               [11] 7710 	add	hl, de
      0025F7 36 92            [10] 7711 	ld	(hl), #0x92
      0025F9 21 05 00         [10] 7712 	ld	hl, #0x0005
      0025FC 19               [11] 7713 	add	hl, de
      0025FD 36 93            [10] 7714 	ld	(hl), #0x93
      0025FF 21 06 00         [10] 7715 	ld	hl, #0x0006
      002602 19               [11] 7716 	add	hl, de
      002603 36 94            [10] 7717 	ld	(hl), #0x94
                                   7718 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002605 21 07 00         [10] 7719 	ld	hl, #7
      002608 39               [11] 7720 	add	hl, sp
      002609 DD 75 F6         [19] 7721 	ld	-10 (ix), l
      00260C DD 74 F7         [19] 7722 	ld	-9 (ix), h
      00260F 36 8E            [10] 7723 	ld	(hl), #0x8e
      002611 DD 6E F6         [19] 7724 	ld	l, -10 (ix)
      002614 DD 66 F7         [19] 7725 	ld	h, -9 (ix)
      002617 23               [ 6] 7726 	inc	hl
      002618 36 90            [10] 7727 	ld	(hl), #0x90
      00261A DD 6E F6         [19] 7728 	ld	l, -10 (ix)
      00261D DD 66 F7         [19] 7729 	ld	h, -9 (ix)
      002620 23               [ 6] 7730 	inc	hl
      002621 23               [ 6] 7731 	inc	hl
      002622 36 92            [10] 7732 	ld	(hl), #0x92
      002624 DD 6E F6         [19] 7733 	ld	l, -10 (ix)
      002627 DD 66 F7         [19] 7734 	ld	h, -9 (ix)
      00262A 23               [ 6] 7735 	inc	hl
      00262B 23               [ 6] 7736 	inc	hl
      00262C 23               [ 6] 7737 	inc	hl
      00262D 36 94            [10] 7738 	ld	(hl), #0x94
                                   7739 ;src\/Title.h:65: InitVRAM();
      00262F C5               [11] 7740 	push	bc
      002630 D5               [11] 7741 	push	de
      002631 CDr04r12         [17] 7742 	call	_InitVRAM
      002634 21 00 01         [10] 7743 	ld	hl, #0x0100
      002637 E5               [11] 7744 	push	hl
      002638 21rB1r27         [10] 7745 	ld	hl, #_TitleScreen_title_65536_285
      00263B E5               [11] 7746 	push	hl
      00263C 21 00 18         [10] 7747 	ld	hl, #0x1800
      00263F E5               [11] 7748 	push	hl
      002640 CDr00r00         [17] 7749 	call	_LDIRVM
      002643 21 06 00         [10] 7750 	ld	hl, #6
      002646 39               [11] 7751 	add	hl, sp
      002647 F9               [ 6] 7752 	ld	sp, hl
      002648 11 05 0D         [10] 7753 	ld	de, #0x0d05
      00264B D5               [11] 7754 	push	de
      00264C 21rB1r28         [10] 7755 	ld	hl, #___str_9
      00264F E5               [11] 7756 	push	hl
      002650 CDrB1r0D         [17] 7757 	call	_DrawString
      002653 F1               [10] 7758 	pop	af
      002654 26 17            [ 7] 7759 	ld	h,#0x17
      002656 E3               [19] 7760 	ex	(sp),hl
      002657 33               [ 6] 7761 	inc	sp
      002658 AF               [ 4] 7762 	xor	a, a
      002659 F5               [11] 7763 	push	af
      00265A 33               [ 6] 7764 	inc	sp
      00265B 21rC8r28         [10] 7765 	ld	hl, #___str_10
      00265E E5               [11] 7766 	push	hl
      00265F CDrB1r0D         [17] 7767 	call	_DrawString
      002662 F1               [10] 7768 	pop	af
      002663 F1               [10] 7769 	pop	af
      002664 11 19 17         [10] 7770 	ld	de, #0x1719
      002667 D5               [11] 7771 	push	de
      002668 21rDDr28         [10] 7772 	ld	hl, #___str_11
      00266B E5               [11] 7773 	push	hl
      00266C CDrB1r0D         [17] 7774 	call	_DrawString
      00266F F1               [10] 7775 	pop	af
      002670 F1               [10] 7776 	pop	af
      002671 D1               [10] 7777 	pop	de
      002672 C1               [10] 7778 	pop	bc
                                   7779 ;src\/Title.h:73: while(TRUE) {
      002673                       7780 00120$:
                                   7781 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002673 DD 36 FD 00      [19] 7782 	ld	-3 (ix), #0
                                   7783 ;src\/Title.h:78: word counter = 0;
      002677 AF               [ 4] 7784 	xor	a, a
      002678 DD 77 FE         [19] 7785 	ld	-2 (ix), a
      00267B DD 77 FF         [19] 7786 	ld	-1 (ix), a
                                   7787 ;src\/Title.h:88: do {
      00267E                       7788 00106$:
                                   7789 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      00267E C5               [11] 7790 	push	bc
      00267F D5               [11] 7791 	push	de
      002680 11 1F 1F         [10] 7792 	ld	de, #0x1f1f
      002683 D5               [11] 7793 	push	de
      002684 CDrD9r00         [17] 7794 	call	_GetRandomInInterval
      002687 F1               [10] 7795 	pop	af
                                   7796 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002688 DD 75 F8         [19] 7797 	ld	-8 (ix), l
      00268B 11 07 07         [10] 7798 	ld	de, #0x0707
      00268E D5               [11] 7799 	push	de
      00268F CDrD9r00         [17] 7800 	call	_GetRandomInInterval
      002692 F1               [10] 7801 	pop	af
      002693 D1               [10] 7802 	pop	de
      002694 C1               [10] 7803 	pop	bc
      002695 DD 75 F9         [19] 7804 	ld	-7 (ix), l
                                   7805 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002698 DD 6E F8         [19] 7806 	ld	l, -8 (ix)
      00269B 3E 00            [ 7] 7807 	ld	a, #0x00
      00269D C6 18            [ 7] 7808 	add	a, #0x18
      00269F 67               [ 4] 7809 	ld	h, a
      0026A0 DD 7E F9         [19] 7810 	ld	a, -7 (ix)
      0026A3 06 00            [ 7] 7811 	ld	b, #0x00
      0026A5 87               [ 4] 7812 	add	a, a
      0026A6 CB 10            [ 8] 7813 	rl	b
      0026A8 87               [ 4] 7814 	add	a, a
      0026A9 CB 10            [ 8] 7815 	rl	b
      0026AB 87               [ 4] 7816 	add	a, a
      0026AC CB 10            [ 8] 7817 	rl	b
      0026AE 87               [ 4] 7818 	add	a, a
      0026AF CB 10            [ 8] 7819 	rl	b
      0026B1 87               [ 4] 7820 	add	a, a
      0026B2 CB 10            [ 8] 7821 	rl	b
      0026B4 85               [ 4] 7822 	add	a, l
      0026B5 6F               [ 4] 7823 	ld	l, a
      0026B6 78               [ 4] 7824 	ld	a, b
      0026B7 8C               [ 4] 7825 	adc	a, h
      0026B8 67               [ 4] 7826 	ld	h, a
      0026B9 C5               [11] 7827 	push	bc
      0026BA D5               [11] 7828 	push	de
      0026BB CDr00r00         [17] 7829 	call	_RDVRM
      0026BE D1               [10] 7830 	pop	de
      0026BF C1               [10] 7831 	pop	bc
      0026C0 DD 75 FA         [19] 7832 	ld	-6 (ix), l
                                   7833 ;src\/Title.h:102: if(counter++ > 1000) {
      0026C3 DD 46 FE         [19] 7834 	ld	b, -2 (ix)
      0026C6 DD 6E FF         [19] 7835 	ld	l, -1 (ix)
      0026C9 DD 34 FE         [23] 7836 	inc	-2 (ix)
      0026CC 20 03            [12] 7837 	jr	NZ, 00193$
      0026CE DD 34 FF         [23] 7838 	inc	-1 (ix)
      0026D1                       7839 00193$:
      0026D1 3E E8            [ 7] 7840 	ld	a, #0xe8
      0026D3 B8               [ 4] 7841 	cp	a, b
      0026D4 3E 03            [ 7] 7842 	ld	a, #0x03
      0026D6 9D               [ 4] 7843 	sbc	a, l
      0026D7 30 0F            [12] 7844 	jr	NC, 00107$
                                   7845 ;src\/Title.h:103: colorIndex++;
      0026D9 0C               [ 4] 7846 	inc	c
                                   7847 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0026DA 79               [ 4] 7848 	ld	a, c
      0026DB D6 03            [ 7] 7849 	sub	a, #0x03
      0026DD 38 02            [12] 7850 	jr	C, 00102$
      0026DF 0E 00            [ 7] 7851 	ld	c, #0x00
      0026E1                       7852 00102$:
                                   7853 ;src\/Title.h:119: counter = 0;
      0026E1 AF               [ 4] 7854 	xor	a, a
      0026E2 DD 77 FE         [19] 7855 	ld	-2 (ix), a
      0026E5 DD 77 FF         [19] 7856 	ld	-1 (ix), a
      0026E8                       7857 00107$:
                                   7858 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0026E8 DD 7E FA         [19] 7859 	ld	a, -6 (ix)
      0026EB B7               [ 4] 7860 	or	a, a
      0026EC 28 90            [12] 7861 	jr	Z, 00106$
      0026EE 79               [ 4] 7862 	ld	a, c
      0026EF 3C               [ 4] 7863 	inc	a
      0026F0 F5               [11] 7864 	push	af
      0026F1 17               [ 4] 7865 	rla
      0026F2 9F               [ 4] 7866 	sbc	a, a
      0026F3 47               [ 4] 7867 	ld	b, a
      0026F4 F1               [10] 7868 	pop	af
      0026F5 DD 86 F6         [19] 7869 	add	a, -10 (ix)
      0026F8 DD 77 FB         [19] 7870 	ld	-5 (ix), a
      0026FB 78               [ 4] 7871 	ld	a, b
      0026FC DD 8E F7         [19] 7872 	adc	a, -9 (ix)
      0026FF DD 77 FC         [19] 7873 	ld	-4 (ix), a
      002702 DD 6E FB         [19] 7874 	ld	l, -5 (ix)
      002705 DD 66 FC         [19] 7875 	ld	h, -4 (ix)
      002708 46               [ 7] 7876 	ld	b, (hl)
      002709 DD 7E FA         [19] 7877 	ld	a, -6 (ix)
      00270C 90               [ 4] 7878 	sub	a, b
      00270D CAr7Er26         [10] 7879 	jp	Z,00106$
                                   7880 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002710 06 00            [ 7] 7881 	ld	b, #0x00
      002712                       7882 00123$:
      002712 78               [ 4] 7883 	ld	a, b
      002713 D6 0A            [ 7] 7884 	sub	a, #0x0a
      002715 30 79            [12] 7885 	jr	NC, 00118$
                                   7886 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002717 2A 9E FC         [16] 7887 	ld	hl, (_JIFFY)
      00271A DD 75 FE         [19] 7888 	ld	-2 (ix), l
      00271D DD 74 FF         [19] 7889 	ld	-1 (ix), h
                                   7890 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002720                       7891 00109$:
      002720 FD 21 9E FC      [14] 7892 	ld	iy, #_JIFFY
      002724 FD 7E 00         [19] 7893 	ld	a, 0 (iy)
      002727 DD 96 FE         [19] 7894 	sub	a, -2 (ix)
      00272A 20 08            [12] 7895 	jr	NZ, 00195$
      00272C FD 7E 01         [19] 7896 	ld	a, 1 (iy)
      00272F DD 96 FF         [19] 7897 	sub	a, -1 (ix)
      002732 28 EC            [12] 7898 	jr	Z, 00109$
      002734                       7899 00195$:
                                   7900 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002734 DD 6E FD         [19] 7901 	ld	l, -3 (ix)
      002737 26 00            [ 7] 7902 	ld	h, #0x00
      002739 19               [11] 7903 	add	hl, de
      00273A 7E               [ 7] 7904 	ld	a, (hl)
      00273B C5               [11] 7905 	push	bc
      00273C D5               [11] 7906 	push	de
      00273D F5               [11] 7907 	push	af
      00273E 33               [ 6] 7908 	inc	sp
      00273F DD 66 F9         [19] 7909 	ld	h, -7 (ix)
      002742 DD 6E F8         [19] 7910 	ld	l, -8 (ix)
      002745 E5               [11] 7911 	push	hl
      002746 CDr9Fr25         [17] 7912 	call	_SetBlock
      002749 F1               [10] 7913 	pop	af
      00274A 33               [ 6] 7914 	inc	sp
      00274B D1               [10] 7915 	pop	de
      00274C C1               [10] 7916 	pop	bc
                                   7917 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00274D DD 7E FD         [19] 7918 	ld	a, -3 (ix)
      002750 DD 34 FD         [23] 7919 	inc	-3 (ix)
      002753 D6 07            [ 7] 7920 	sub	a, #0x07
      002755 38 04            [12] 7921 	jr	C, 00113$
      002757 DD 36 FD 00      [19] 7922 	ld	-3 (ix), #0
      00275B                       7923 00113$:
                                   7924 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      00275B C5               [11] 7925 	push	bc
      00275C D5               [11] 7926 	push	de
      00275D 2E 00            [ 7] 7927 	ld	l, #0x00
      00275F CDr00r00         [17] 7928 	call	_GTTRIG
                                   7929 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002762 DD 75 FF         [19] 7930 	ld	-1 (ix), l
      002765 2E 01            [ 7] 7931 	ld	l, #0x01
      002767 CDr00r00         [17] 7932 	call	_GTTRIG
      00276A D1               [10] 7933 	pop	de
      00276B C1               [10] 7934 	pop	bc
                                   7935 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      00276C E5               [11] 7936 	push	hl
      00276D C5               [11] 7937 	push	bc
      00276E D5               [11] 7938 	push	de
      00276F 2E 03            [ 7] 7939 	ld	l, #0x03
      002771 CDr00r00         [17] 7940 	call	_GTTRIG
      002774 7D               [ 4] 7941 	ld	a, l
      002775 D1               [10] 7942 	pop	de
      002776 C1               [10] 7943 	pop	bc
      002777 E1               [10] 7944 	pop	hl
      002778 67               [ 4] 7945 	ld	h, a
                                   7946 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002779 DD 7E FF         [19] 7947 	ld	a, -1 (ix)
      00277C 3C               [ 4] 7948 	inc	a
      00277D 28 06            [12] 7949 	jr	Z, 00114$
      00277F 2C               [ 4] 7950 	inc	l
      002780 28 03            [12] 7951 	jr	Z, 00114$
      002782 24               [ 4] 7952 	inc	h
      002783 20 08            [12] 7953 	jr	NZ, 00124$
      002785                       7954 00114$:
                                   7955 ;src\/Title.h:168: rndSeed = JIFFY;
      002785 3A 9E FC         [13] 7956 	ld	a,(#_JIFFY + 0)
      002788 32r08r00         [13] 7957 	ld	(#_rndSeed), a
                                   7958 ;src\/Title.h:169: return;
      00278B 18 1F            [12] 7959 	jr	00125$
      00278D                       7960 00124$:
                                   7961 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00278D 04               [ 4] 7962 	inc	b
      00278E 18 82            [12] 7963 	jr	00123$
      002790                       7964 00118$:
                                   7965 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002790 DD 6E FB         [19] 7966 	ld	l, -5 (ix)
      002793 DD 66 FC         [19] 7967 	ld	h, -4 (ix)
      002796 7E               [ 7] 7968 	ld	a, (hl)
      002797 C5               [11] 7969 	push	bc
      002798 D5               [11] 7970 	push	de
      002799 F5               [11] 7971 	push	af
      00279A 33               [ 6] 7972 	inc	sp
      00279B DD 66 F9         [19] 7973 	ld	h, -7 (ix)
      00279E DD 6E F8         [19] 7974 	ld	l, -8 (ix)
      0027A1 E5               [11] 7975 	push	hl
      0027A2 CDr9Fr25         [17] 7976 	call	_SetBlock
      0027A5 F1               [10] 7977 	pop	af
      0027A6 33               [ 6] 7978 	inc	sp
      0027A7 D1               [10] 7979 	pop	de
      0027A8 C1               [10] 7980 	pop	bc
      0027A9 C3r73r26         [10] 7981 	jp	00120$
      0027AC                       7982 00125$:
                                   7983 ;src\/Title.h:176: }
      0027AC DD F9            [10] 7984 	ld	sp, ix
      0027AE DD E1            [14] 7985 	pop	ix
      0027B0 C9               [10] 7986 	ret
      0027B1                       7987 _TitleScreen_title_65536_285:
      0027B1 00                    7988 	.db #0x00	; 0
      0027B2 00                    7989 	.db #0x00	; 0
      0027B3 00                    7990 	.db #0x00	; 0
      0027B4 00                    7991 	.db #0x00	; 0
      0027B5 8E                    7992 	.db #0x8e	; 142
      0027B6 8E                    7993 	.db #0x8e	; 142
      0027B7 8E                    7994 	.db #0x8e	; 142
      0027B8 8E                    7995 	.db #0x8e	; 142
      0027B9 00                    7996 	.db #0x00	; 0
      0027BA 8E                    7997 	.db #0x8e	; 142
      0027BB 8E                    7998 	.db #0x8e	; 142
      0027BC 8E                    7999 	.db #0x8e	; 142
      0027BD 8E                    8000 	.db #0x8e	; 142
      0027BE 8E                    8001 	.db #0x8e	; 142
      0027BF 8E                    8002 	.db #0x8e	; 142
      0027C0 00                    8003 	.db #0x00	; 0
      0027C1 00                    8004 	.db #0x00	; 0
      0027C2 8E                    8005 	.db #0x8e	; 142
      0027C3 8E                    8006 	.db #0x8e	; 142
      0027C4 00                    8007 	.db #0x00	; 0
      0027C5 00                    8008 	.db #0x00	; 0
      0027C6 00                    8009 	.db #0x00	; 0
      0027C7 8E                    8010 	.db #0x8e	; 142
      0027C8 8E                    8011 	.db #0x8e	; 142
      0027C9 00                    8012 	.db #0x00	; 0
      0027CA 00                    8013 	.db #0x00	; 0
      0027CB 00                    8014 	.db #0x00	; 0
      0027CC 00                    8015 	.db #0x00	; 0
      0027CD 8E                    8016 	.db #0x8e	; 142
      0027CE 8E                    8017 	.db #0x8e	; 142
      0027CF 8E                    8018 	.db #0x8e	; 142
      0027D0 8E                    8019 	.db #0x8e	; 142
      0027D1 00                    8020 	.db #0x00	; 0
      0027D2 00                    8021 	.db #0x00	; 0
      0027D3 00                    8022 	.db #0x00	; 0
      0027D4 8E                    8023 	.db #0x8e	; 142
      0027D5 8E                    8024 	.db #0x8e	; 142
      0027D6 8E                    8025 	.db #0x8e	; 142
      0027D7 8E                    8026 	.db #0x8e	; 142
      0027D8 8E                    8027 	.db #0x8e	; 142
      0027D9 00                    8028 	.db #0x00	; 0
      0027DA 8E                    8029 	.db #0x8e	; 142
      0027DB 8E                    8030 	.db #0x8e	; 142
      0027DC 00                    8031 	.db #0x00	; 0
      0027DD 00                    8032 	.db #0x00	; 0
      0027DE 00                    8033 	.db #0x00	; 0
      0027DF 8E                    8034 	.db #0x8e	; 142
      0027E0 8E                    8035 	.db #0x8e	; 142
      0027E1 00                    8036 	.db #0x00	; 0
      0027E2 00                    8037 	.db #0x00	; 0
      0027E3 8E                    8038 	.db #0x8e	; 142
      0027E4 8E                    8039 	.db #0x8e	; 142
      0027E5 00                    8040 	.db #0x00	; 0
      0027E6 00                    8041 	.db #0x00	; 0
      0027E7 8E                    8042 	.db #0x8e	; 142
      0027E8 8E                    8043 	.db #0x8e	; 142
      0027E9 00                    8044 	.db #0x00	; 0
      0027EA 00                    8045 	.db #0x00	; 0
      0027EB 00                    8046 	.db #0x00	; 0
      0027EC 8E                    8047 	.db #0x8e	; 142
      0027ED 8E                    8048 	.db #0x8e	; 142
      0027EE 8E                    8049 	.db #0x8e	; 142
      0027EF 8E                    8050 	.db #0x8e	; 142
      0027F0 8E                    8051 	.db #0x8e	; 142
      0027F1 00                    8052 	.db #0x00	; 0
      0027F2 00                    8053 	.db #0x00	; 0
      0027F3 8E                    8054 	.db #0x8e	; 142
      0027F4 8E                    8055 	.db #0x8e	; 142
      0027F5 8E                    8056 	.db #0x8e	; 142
      0027F6 00                    8057 	.db #0x00	; 0
      0027F7 8E                    8058 	.db #0x8e	; 142
      0027F8 8E                    8059 	.db #0x8e	; 142
      0027F9 00                    8060 	.db #0x00	; 0
      0027FA 8E                    8061 	.db #0x8e	; 142
      0027FB 8E                    8062 	.db #0x8e	; 142
      0027FC 00                    8063 	.db #0x00	; 0
      0027FD 00                    8064 	.db #0x00	; 0
      0027FE 00                    8065 	.db #0x00	; 0
      0027FF 8E                    8066 	.db #0x8e	; 142
      002800 8E                    8067 	.db #0x8e	; 142
      002801 00                    8068 	.db #0x00	; 0
      002802 00                    8069 	.db #0x00	; 0
      002803 00                    8070 	.db #0x00	; 0
      002804 8E                    8071 	.db #0x8e	; 142
      002805 8E                    8072 	.db #0x8e	; 142
      002806 00                    8073 	.db #0x00	; 0
      002807 8E                    8074 	.db #0x8e	; 142
      002808 8E                    8075 	.db #0x8e	; 142
      002809 00                    8076 	.db #0x00	; 0
      00280A 00                    8077 	.db #0x00	; 0
      00280B 8E                    8078 	.db #0x8e	; 142
      00280C 8E                    8079 	.db #0x8e	; 142
      00280D 8E                    8080 	.db #0x8e	; 142
      00280E 00                    8081 	.db #0x00	; 0
      00280F 8E                    8082 	.db #0x8e	; 142
      002810 8E                    8083 	.db #0x8e	; 142
      002811 00                    8084 	.db #0x00	; 0
      002812 8E                    8085 	.db #0x8e	; 142
      002813 8E                    8086 	.db #0x8e	; 142
      002814 8E                    8087 	.db #0x8e	; 142
      002815 00                    8088 	.db #0x00	; 0
      002816 00                    8089 	.db #0x00	; 0
      002817 8E                    8090 	.db #0x8e	; 142
      002818 8E                    8091 	.db #0x8e	; 142
      002819 00                    8092 	.db #0x00	; 0
      00281A 8E                    8093 	.db #0x8e	; 142
      00281B 8E                    8094 	.db #0x8e	; 142
      00281C 00                    8095 	.db #0x00	; 0
      00281D 00                    8096 	.db #0x00	; 0
      00281E 8E                    8097 	.db #0x8e	; 142
      00281F 8E                    8098 	.db #0x8e	; 142
      002820 00                    8099 	.db #0x00	; 0
      002821 00                    8100 	.db #0x00	; 0
      002822 00                    8101 	.db #0x00	; 0
      002823 00                    8102 	.db #0x00	; 0
      002824 00                    8103 	.db #0x00	; 0
      002825 8E                    8104 	.db #0x8e	; 142
      002826 8E                    8105 	.db #0x8e	; 142
      002827 8E                    8106 	.db #0x8e	; 142
      002828 00                    8107 	.db #0x00	; 0
      002829 00                    8108 	.db #0x00	; 0
      00282A 8E                    8109 	.db #0x8e	; 142
      00282B 8E                    8110 	.db #0x8e	; 142
      00282C 8E                    8111 	.db #0x8e	; 142
      00282D 00                    8112 	.db #0x00	; 0
      00282E 00                    8113 	.db #0x00	; 0
      00282F 8E                    8114 	.db #0x8e	; 142
      002830 8E                    8115 	.db #0x8e	; 142
      002831 00                    8116 	.db #0x00	; 0
      002832 8E                    8117 	.db #0x8e	; 142
      002833 8E                    8118 	.db #0x8e	; 142
      002834 00                    8119 	.db #0x00	; 0
      002835 00                    8120 	.db #0x00	; 0
      002836 00                    8121 	.db #0x00	; 0
      002837 8E                    8122 	.db #0x8e	; 142
      002838 8E                    8123 	.db #0x8e	; 142
      002839 00                    8124 	.db #0x00	; 0
      00283A 8E                    8125 	.db #0x8e	; 142
      00283B 8E                    8126 	.db #0x8e	; 142
      00283C 8E                    8127 	.db #0x8e	; 142
      00283D 8E                    8128 	.db #0x8e	; 142
      00283E 8E                    8129 	.db #0x8e	; 142
      00283F 00                    8130 	.db #0x00	; 0
      002840 00                    8131 	.db #0x00	; 0
      002841 00                    8132 	.db #0x00	; 0
      002842 00                    8133 	.db #0x00	; 0
      002843 00                    8134 	.db #0x00	; 0
      002844 00                    8135 	.db #0x00	; 0
      002845 8E                    8136 	.db #0x8e	; 142
      002846 8E                    8137 	.db #0x8e	; 142
      002847 00                    8138 	.db #0x00	; 0
      002848 00                    8139 	.db #0x00	; 0
      002849 00                    8140 	.db #0x00	; 0
      00284A 8E                    8141 	.db #0x8e	; 142
      00284B 8E                    8142 	.db #0x8e	; 142
      00284C 00                    8143 	.db #0x00	; 0
      00284D 00                    8144 	.db #0x00	; 0
      00284E 00                    8145 	.db #0x00	; 0
      00284F 8E                    8146 	.db #0x8e	; 142
      002850 8E                    8147 	.db #0x8e	; 142
      002851 00                    8148 	.db #0x00	; 0
      002852 8E                    8149 	.db #0x8e	; 142
      002853 8E                    8150 	.db #0x8e	; 142
      002854 00                    8151 	.db #0x00	; 0
      002855 00                    8152 	.db #0x00	; 0
      002856 00                    8153 	.db #0x00	; 0
      002857 8E                    8154 	.db #0x8e	; 142
      002858 8E                    8155 	.db #0x8e	; 142
      002859 00                    8156 	.db #0x00	; 0
      00285A 8E                    8157 	.db #0x8e	; 142
      00285B 8E                    8158 	.db #0x8e	; 142
      00285C 8E                    8159 	.db #0x8e	; 142
      00285D 8E                    8160 	.db #0x8e	; 142
      00285E 8E                    8161 	.db #0x8e	; 142
      00285F 00                    8162 	.db #0x00	; 0
      002860 00                    8163 	.db #0x00	; 0
      002861 00                    8164 	.db #0x00	; 0
      002862 00                    8165 	.db #0x00	; 0
      002863 00                    8166 	.db #0x00	; 0
      002864 00                    8167 	.db #0x00	; 0
      002865 8E                    8168 	.db #0x8e	; 142
      002866 8E                    8169 	.db #0x8e	; 142
      002867 00                    8170 	.db #0x00	; 0
      002868 00                    8171 	.db #0x00	; 0
      002869 00                    8172 	.db #0x00	; 0
      00286A 8E                    8173 	.db #0x8e	; 142
      00286B 8E                    8174 	.db #0x8e	; 142
      00286C 00                    8175 	.db #0x00	; 0
      00286D 00                    8176 	.db #0x00	; 0
      00286E 00                    8177 	.db #0x00	; 0
      00286F 8E                    8178 	.db #0x8e	; 142
      002870 8E                    8179 	.db #0x8e	; 142
      002871 00                    8180 	.db #0x00	; 0
      002872 8E                    8181 	.db #0x8e	; 142
      002873 8E                    8182 	.db #0x8e	; 142
      002874 8E                    8183 	.db #0x8e	; 142
      002875 8E                    8184 	.db #0x8e	; 142
      002876 8E                    8185 	.db #0x8e	; 142
      002877 8E                    8186 	.db #0x8e	; 142
      002878 8E                    8187 	.db #0x8e	; 142
      002879 00                    8188 	.db #0x00	; 0
      00287A 8E                    8189 	.db #0x8e	; 142
      00287B 8E                    8190 	.db #0x8e	; 142
      00287C 00                    8191 	.db #0x00	; 0
      00287D 00                    8192 	.db #0x00	; 0
      00287E 00                    8193 	.db #0x00	; 0
      00287F 8E                    8194 	.db #0x8e	; 142
      002880 00                    8195 	.db #0x00	; 0
      002881 00                    8196 	.db #0x00	; 0
      002882 00                    8197 	.db #0x00	; 0
      002883 00                    8198 	.db #0x00	; 0
      002884 00                    8199 	.db #0x00	; 0
      002885 8E                    8200 	.db #0x8e	; 142
      002886 8E                    8201 	.db #0x8e	; 142
      002887 00                    8202 	.db #0x00	; 0
      002888 00                    8203 	.db #0x00	; 0
      002889 00                    8204 	.db #0x00	; 0
      00288A 8E                    8205 	.db #0x8e	; 142
      00288B 8E                    8206 	.db #0x8e	; 142
      00288C 8E                    8207 	.db #0x8e	; 142
      00288D 8E                    8208 	.db #0x8e	; 142
      00288E 8E                    8209 	.db #0x8e	; 142
      00288F 8E                    8210 	.db #0x8e	; 142
      002890 8E                    8211 	.db #0x8e	; 142
      002891 00                    8212 	.db #0x00	; 0
      002892 8E                    8213 	.db #0x8e	; 142
      002893 8E                    8214 	.db #0x8e	; 142
      002894 00                    8215 	.db #0x00	; 0
      002895 00                    8216 	.db #0x00	; 0
      002896 00                    8217 	.db #0x00	; 0
      002897 8E                    8218 	.db #0x8e	; 142
      002898 8E                    8219 	.db #0x8e	; 142
      002899 00                    8220 	.db #0x00	; 0
      00289A 8E                    8221 	.db #0x8e	; 142
      00289B 8E                    8222 	.db #0x8e	; 142
      00289C 00                    8223 	.db #0x00	; 0
      00289D 00                    8224 	.db #0x00	; 0
      00289E 00                    8225 	.db #0x00	; 0
      00289F 8E                    8226 	.db #0x8e	; 142
      0028A0 00                    8227 	.db #0x00	; 0
      0028A1 00                    8228 	.db #0x00	; 0
      0028A2 00                    8229 	.db #0x00	; 0
      0028A3 00                    8230 	.db #0x00	; 0
      0028A4 00                    8231 	.db #0x00	; 0
      0028A5 8E                    8232 	.db #0x8e	; 142
      0028A6 8E                    8233 	.db #0x8e	; 142
      0028A7 00                    8234 	.db #0x00	; 0
      0028A8 00                    8235 	.db #0x00	; 0
      0028A9 00                    8236 	.db #0x00	; 0
      0028AA 8E                    8237 	.db #0x8e	; 142
      0028AB 8E                    8238 	.db #0x8e	; 142
      0028AC 00                    8239 	.db #0x00	; 0
      0028AD 00                    8240 	.db #0x00	; 0
      0028AE 00                    8241 	.db #0x00	; 0
      0028AF 8E                    8242 	.db #0x8e	; 142
      0028B0 8E                    8243 	.db #0x8e	; 142
      0028B1                       8244 ___str_9:
      0028B1 50 52 45 53 53 20 54  8245 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0028C7 00                    8246 	.db 0x00
      0028C8                       8247 ___str_10:
      0028C8 41 4E 44 52 45 42 41  8248 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0028DC 00                    8249 	.db 0x00
      0028DD                       8250 ___str_11:
      0028DD 76 2E 3F 2E 3F 2E 3F  8251 	.ascii "v.?.?.?"
      0028E4 00                    8252 	.db 0x00
                                   8253 ;src\main.c:88: void main() {
                                   8254 ;	---------------------------------
                                   8255 ; Function main
                                   8256 ; ---------------------------------
      0028E5                       8257 _main::
                                   8258 ;src\main.c:90: while(TRUE) {
      0028E5                       8259 00102$:
                                   8260 ;src\main.c:96: InitGame();
      0028E5 CDrDAr23         [17] 8261 	call	_InitGame
                                   8262 ;src\main.c:99: }
      0028E8 18 FB            [12] 8263 	jr	00102$
                                   8264 	.area _CODE
                                   8265 	.area _INITIALIZER
      000000                       8266 __xinit__gameOver:
      000000 00                    8267 	.db #0x00	; 0
      000001                       8268 __xinit__col:
      000001 00                    8269 	.db #0x00	; 0
      000002                       8270 __xinit__line:
      000002 00                    8271 	.db #0x00	; 0
      000003                       8272 __xinit__counter:
      000003 00                    8273 	.db #0x00	; 0
      000004                       8274 __xinit__blocksRemoved:
      000004 00 00                 8275 	.dw #0x0000
      000006                       8276 __xinit__level:
      000006 01                    8277 	.db #0x01	; 1
      000007                       8278 __xinit__newLevel:
      000007 00                    8279 	.db #0x00	; 0
      000008                       8280 __xinit__rndSeed:
      000008 00                    8281 	.db #0x00	; 0
      000009                       8282 __xinit__d_col:
      000009 00                    8283 	.db #0x00	; 0
      00000A                       8284 __xinit__d_line:
      00000A 00                    8285 	.db #0x00	; 0
      00000B                       8286 __xinit__d_value:
      00000B 00                    8287 	.db #0x00	; 0
                                   8288 	.area _CABS (ABS)
