                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _GetNextPieceColors
                                     38 	.globl _DrawColumn
                                     39 	.globl _DrawNumber
                                     40 	.globl _DrawString
                                     41 	.globl _DrawChar
                                     42 	.globl _DrawExplosionSprite
                                     43 	.globl _HideExplosionSprite
                                     44 	.globl _HideHitSprite
                                     45 	.globl _DrawHitSprite
                                     46 	.globl _HideArrowSprite
                                     47 	.globl _DrawArrowSprite
                                     48 	.globl _GetRandomInInterval
                                     49 	.globl _GetRandom
                                     50 	.globl _InitRnd
                                     51 	.globl _Power
                                     52 	.globl _Wait
                                     53 	.globl _SNSMAT
                                     54 	.globl _GTTRIG
                                     55 	.globl _GTSTCK
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _rndSeed
                                     67 	.globl _newLevel
                                     68 	.globl _level
                                     69 	.globl _blocksRemoved
                                     70 	.globl _counter
                                     71 	.globl _line
                                     72 	.globl _col
                                     73 	.globl _gameOver
                                     74 	.globl _nextPieceColor_Back
                                     75 	.globl _nextPieceColor_Front
                                     76 	.globl _Rand_x
                                     77 	.globl _Rand_c
                                     78 	.globl _Rand_b
                                     79 	.globl _Rand_a
                                     80 	.globl _speed
                                     81 	.globl _nextBottomPiece
                                     82 	.globl _nextMidPiece
                                     83 	.globl _nextTopPiece
                                     84 	.globl _bottomPiece
                                     85 	.globl _midPiece
                                     86 	.globl _topPiece
                                     87 	.globl _playfieldTemp
                                     88 	.globl _playfield
                                     89 	.globl _GETPNT
                                     90 	.globl _PUTPNT
                                     91 	.globl _REPCNT
                                     92 	.globl _SCNCNT
                                     93 	.globl _ATRBYT
                                     94 	.globl _CMASK
                                     95 	.globl _CLOC
                                     96 	.globl _BDRCLR
                                     97 	.globl _BAKCLR
                                     98 	.globl _FORCLR
                                     99 	.globl _TRGFLG
                                    100 	.globl _STATFL
                                    101 	.globl _MSX_vdp_regs
                                    102 	.globl _CNSDFG
                                    103 	.globl _CSRX
                                    104 	.globl _CSRY
                                    105 	.globl _MSX_modedata_screen3
                                    106 	.globl _MSX_modedata_screen2
                                    107 	.globl _MSX_modedata_screen1
                                    108 	.globl _MSX_modedata_screen0
                                    109 	.globl _CLIKSW
                                    110 	.globl _JIFFY
                                    111 	.globl _CLMLST
                                    112 	.globl _CRTCNT
                                    113 	.globl _LINLEN
                                    114 	.globl _LINL32
                                    115 	.globl _LINL40
                                    116 	.globl _MSX_charset
                                    117 	.globl _FONT
                                    118 	.globl _pieces
                                    119 	.globl _MSX_version
                                    120 	.globl _MSX_vdp_port_write
                                    121 	.globl _MSX_vdp_port_read
                                    122 ;--------------------------------------------------------
                                    123 ; special function registers
                                    124 ;--------------------------------------------------------
                                    125 ;--------------------------------------------------------
                                    126 ; ram data
                                    127 ;--------------------------------------------------------
                                    128 	.area _DATA
                           000004   129 _MSX_charset	=	0x0004
                           00F3AE   130 _LINL40	=	0xf3ae
                           00F3AF   131 _LINL32	=	0xf3af
                           00F3B0   132 _LINLEN	=	0xf3b0
                           00F3B1   133 _CRTCNT	=	0xf3b1
                           00F3B1   134 _CLMLST	=	0xf3b1
                           00FC9E   135 _JIFFY	=	0xfc9e
                           00F3DB   136 _CLIKSW	=	0xf3db
                           00F3B3   137 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   138 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   139 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   140 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   141 _CSRY	=	0xf3dc
                           00F3DD   142 _CSRX	=	0xf3dd
                           00F3DE   143 _CNSDFG	=	0xf3de
                           00F3DF   144 _MSX_vdp_regs	=	0xf3df
                           00F3E7   145 _STATFL	=	0xf3e7
                           00F3E8   146 _TRGFLG	=	0xf3e8
                           00F3E9   147 _FORCLR	=	0xf3e9
                           00F3EA   148 _BAKCLR	=	0xf3ea
                           00F3EB   149 _BDRCLR	=	0xf3eb
                           00F92A   150 _CLOC	=	0xf92a
                           00F92C   151 _CMASK	=	0xf92c
                           00F3F2   152 _ATRBYT	=	0xf3f2
                           00F3F6   153 _SCNCNT	=	0xf3f6
                           00F3F7   154 _REPCNT	=	0xf3f7
                           00F3F8   155 _PUTPNT	=	0xf3f8
                           00F3FA   156 _GETPNT	=	0xf3fa
      000000                        157 _playfield::
      000000                        158 	.ds 72
      000048                        159 _playfieldTemp::
      000048                        160 	.ds 72
      000090                        161 _topPiece::
      000090                        162 	.ds 1
      000091                        163 _midPiece::
      000091                        164 	.ds 1
      000092                        165 _bottomPiece::
      000092                        166 	.ds 1
      000093                        167 _nextTopPiece::
      000093                        168 	.ds 1
      000094                        169 _nextMidPiece::
      000094                        170 	.ds 1
      000095                        171 _nextBottomPiece::
      000095                        172 	.ds 1
      000096                        173 _speed::
      000096                        174 	.ds 1
      000097                        175 _Rand_a::
      000097                        176 	.ds 1
      000098                        177 _Rand_b::
      000098                        178 	.ds 1
      000099                        179 _Rand_c::
      000099                        180 	.ds 1
      00009A                        181 _Rand_x::
      00009A                        182 	.ds 1
      00009B                        183 _nextPieceColor_Front::
      00009B                        184 	.ds 1
      00009C                        185 _nextPieceColor_Back::
      00009C                        186 	.ds 1
                                    187 ;--------------------------------------------------------
                                    188 ; ram data
                                    189 ;--------------------------------------------------------
                                    190 	.area _INITIALIZED
      000000                        191 _gameOver::
      000000                        192 	.ds 1
      000001                        193 _col::
      000001                        194 	.ds 1
      000002                        195 _line::
      000002                        196 	.ds 1
      000003                        197 _counter::
      000003                        198 	.ds 1
      000004                        199 _blocksRemoved::
      000004                        200 	.ds 2
      000006                        201 _level::
      000006                        202 	.ds 1
      000007                        203 _newLevel::
      000007                        204 	.ds 1
      000008                        205 _rndSeed::
      000008                        206 	.ds 1
                                    207 ;--------------------------------------------------------
                                    208 ; absolute external ram data
                                    209 ;--------------------------------------------------------
                                    210 	.area _DABS (ABS)
                                    211 ;--------------------------------------------------------
                                    212 ; global & static initialisations
                                    213 ;--------------------------------------------------------
                                    214 	.area _HOME
                                    215 	.area _GSINIT
                                    216 	.area _GSFINAL
                                    217 	.area _GSINIT
                                    218 ;--------------------------------------------------------
                                    219 ; Home
                                    220 ;--------------------------------------------------------
                                    221 	.area _HOME
                                    222 	.area _HOME
                                    223 ;--------------------------------------------------------
                                    224 ; code
                                    225 ;--------------------------------------------------------
                                    226 	.area _CODE
                                    227 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    228 ;	---------------------------------
                                    229 ; Function Wait
                                    230 ; ---------------------------------
      000000                        231 _Wait::
                                    232 ;src\/Common.h:2: do {
      000000 D1               [10]  233 	pop	de
      000001 C1               [10]  234 	pop	bc
      000002 C5               [11]  235 	push	bc
      000003 D5               [11]  236 	push	de
      000004                        237 00104$:
                                    238 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  239 	ld	de, (_JIFFY)
                                    240 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        241 00101$:
      000008 2A 9E FC         [16]  242 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  243 	cp	a, a
      00000C ED 52            [15]  244 	sbc	hl, de
      00000E 28 F8            [12]  245 	jr	Z, 00101$
                                    246 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  247 	ld	e, c
      000011 50               [ 4]  248 	ld	d, b
      000012 0B               [ 6]  249 	dec	bc
      000013 7A               [ 4]  250 	ld	a, d
      000014 B3               [ 4]  251 	or	a, e
      000015 20 ED            [12]  252 	jr	NZ, 00104$
                                    253 ;src\/Common.h:8: }
      000017 C9               [10]  254 	ret
                           000006   255 _MSX_vdp_port_read	=	0x0006
                           000007   256 _MSX_vdp_port_write	=	0x0007
                           00002D   257 _MSX_version	=	0x002d
      000018                        258 _pieces:
      000018 04                     259 	.db #0x04	; 4
      000019 08                     260 	.db #0x08	; 8
      00001A 0C                     261 	.db #0x0c	; 12
      00001B 10                     262 	.db #0x10	; 16
      00001C 14                     263 	.db #0x14	; 20
                                    264 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    265 ;	---------------------------------
                                    266 ; Function Power
                                    267 ; ---------------------------------
      00001D                        268 _Power::
      00001D DD E5            [15]  269 	push	ix
      00001F DD 21 00 00      [14]  270 	ld	ix,#0
      000023 DD 39            [15]  271 	add	ix,sp
                                    272 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  273 	ld	c, 4 (ix)
      000028 06 00            [ 7]  274 	ld	b, #0x00
      00002A 69               [ 4]  275 	ld	l, c
      00002B 60               [ 4]  276 	ld	h, b
                                    277 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  278 	ld	a, 5 (ix)
      00002F B7               [ 4]  279 	or	a, a
      000030 20 05            [12]  280 	jr	NZ, 00111$
      000032 21 01 00         [10]  281 	ld	hl, #0x0001
      000035 18 16            [12]  282 	jr	00107$
                                    283 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        284 00111$:
      000037 1E 01            [ 7]  285 	ld	e, #0x01
      000039                        286 00105$:
      000039 7B               [ 4]  287 	ld	a, e
      00003A DD 96 05         [19]  288 	sub	a, 5 (ix)
      00003D 30 0E            [12]  289 	jr	NC, 00103$
                                    290 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  291 	push	bc
      000040 D5               [11]  292 	push	de
      000041 C5               [11]  293 	push	bc
      000042 E5               [11]  294 	push	hl
      000043 CDr00r00         [17]  295 	call	__mulint
      000046 F1               [10]  296 	pop	af
      000047 F1               [10]  297 	pop	af
      000048 D1               [10]  298 	pop	de
      000049 C1               [10]  299 	pop	bc
                                    300 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  301 	inc	e
      00004B 18 EC            [12]  302 	jr	00105$
      00004D                        303 00103$:
                                    304 ;src\/Math.h:10: return power;
      00004D                        305 00107$:
                                    306 ;src\/Math.h:11: }
      00004D DD E1            [14]  307 	pop	ix
      00004F C9               [10]  308 	ret
                                    309 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    310 ;	---------------------------------
                                    311 ; Function InitRnd
                                    312 ; ---------------------------------
      000050                        313 _InitRnd::
                                    314 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  315 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  316 	ld	hl, #2
      000056 39               [11]  317 	add	hl, sp
      000057 AE               [ 7]  318 	xor	a, (hl)
      000058 32r97r00         [13]  319 	ld	(_Rand_a+0), a
                                    320 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  321 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  322 	ld	hl, #3
      000061 39               [11]  323 	add	hl, sp
      000062 AE               [ 7]  324 	xor	a, (hl)
      000063 32r98r00         [13]  325 	ld	(_Rand_b+0), a
                                    326 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  327 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  328 	ld	hl, #4
      00006C 39               [11]  329 	add	hl, sp
      00006D AE               [ 7]  330 	xor	a, (hl)
      00006E 32r99r00         [13]  331 	ld	(_Rand_c+0), a
                                    332 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  333 	ld	hl, #_Rand_x
      000074 34               [11]  334 	inc	(hl)
                                    335 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  336 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  337 	ld	hl, #_Rand_c
      00007B AE               [ 7]  338 	xor	a, (hl)
      00007C 21r9Ar00         [10]  339 	ld	hl, #_Rand_x
      00007F AE               [ 7]  340 	xor	a, (hl)
      000080 32r97r00         [13]  341 	ld	(_Rand_a+0), a
                                    342 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  343 	ld	hl, #_Rand_b
      000086 7E               [ 7]  344 	ld	a, (hl)
      000087 FD 21r97r00      [14]  345 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  346 	add	a, 0 (iy)
      00008E 77               [ 7]  347 	ld	(hl), a
                                    348 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  349 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  350 	srl	a
      000094 21r99r00         [10]  351 	ld	hl, #_Rand_c
      000097 86               [ 7]  352 	add	a, (hl)
      000098 FD 21r97r00      [14]  353 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  354 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  355 	ld	(_Rand_c+0), a
                                    356 ;src\/Random.h:38: }
      0000A2 C9               [10]  357 	ret
                                    358 ;src\/Random.h:40: unsigned char GetRandom() {
                                    359 ;	---------------------------------
                                    360 ; Function GetRandom
                                    361 ; ---------------------------------
      0000A3                        362 _GetRandom::
                                    363 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  364 	ld	hl, #_Rand_x
      0000A6 34               [11]  365 	inc	(hl)
                                    366 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  367 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  368 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  369 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  370 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  371 	xor	a, (hl)
      0000B2 32r97r00         [13]  372 	ld	(_Rand_a+0), a
                                    373 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  374 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  375 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  376 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  377 	add	a, 0 (iy)
      0000C0 77               [ 7]  378 	ld	(hl), a
                                    379 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  380 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  381 	srl	a
      0000C6 21r99r00         [10]  382 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  383 	add	a, (hl)
      0000CA FD 21r97r00      [14]  384 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  385 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  386 	ld	(_Rand_c+0), a
                                    387 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  388 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  389 	ld	l, a
                                    390 ;src\/Random.h:47: }
      0000D8 C9               [10]  391 	ret
                                    392 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    393 ;	---------------------------------
                                    394 ; Function GetRandomInInterval
                                    395 ; ---------------------------------
      0000D9                        396 _GetRandomInInterval::
                                    397 ;src\/Random.h:53: do {
      0000D9                        398 00101$:
                                    399 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  400 	call	_GetRandom
      0000DC 7D               [ 4]  401 	ld	a, l
      0000DD 21 03 00         [10]  402 	ld	hl, #3
      0000E0 39               [11]  403 	add	hl, sp
      0000E1 A6               [ 7]  404 	and	a, (hl)
      0000E2 4F               [ 4]  405 	ld	c, a
                                    406 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  407 	ld	hl, #2
      0000E6 39               [11]  408 	add	hl, sp
      0000E7 7E               [ 7]  409 	ld	a, (hl)
      0000E8 91               [ 4]  410 	sub	a, c
      0000E9 38 EE            [12]  411 	jr	C, 00101$
                                    412 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  413 	ld	l, c
                                    414 ;src\/Random.h:59: }
      0000EC C9               [10]  415 	ret
                                    416 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    417 ;	---------------------------------
                                    418 ; Function DrawArrowSprite
                                    419 ; ---------------------------------
      0000ED                        420 _DrawArrowSprite::
      0000ED DD E5            [15]  421 	push	ix
      0000EF DD 21 00 00      [14]  422 	ld	ix,#0
      0000F3 DD 39            [15]  423 	add	ix,sp
      0000F5 21 F8 FF         [10]  424 	ld	hl, #-8
      0000F8 39               [11]  425 	add	hl, sp
      0000F9 F9               [ 6]  426 	ld	sp, hl
                                    427 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  428 	ld	hl, #0
      0000FD 39               [11]  429 	add	hl, sp
      0000FE EB               [ 4]  430 	ex	de, hl
      0000FF 3E 0F            [ 7]  431 	ld	a, #0x0f
      000101 12               [ 7]  432 	ld	(de), a
      000102 6B               [ 4]  433 	ld	l, e
      000103 62               [ 4]  434 	ld	h, d
      000104 23               [ 6]  435 	inc	hl
      000105 36 0E            [10]  436 	ld	(hl), #0x0e
      000107 6B               [ 4]  437 	ld	l, e
      000108 62               [ 4]  438 	ld	h, d
      000109 23               [ 6]  439 	inc	hl
      00010A 23               [ 6]  440 	inc	hl
      00010B 36 05            [10]  441 	ld	(hl), #0x05
      00010D 6B               [ 4]  442 	ld	l, e
      00010E 62               [ 4]  443 	ld	h, d
      00010F 23               [ 6]  444 	inc	hl
      000110 23               [ 6]  445 	inc	hl
      000111 23               [ 6]  446 	inc	hl
      000112 36 04            [10]  447 	ld	(hl), #0x04
      000114 21 04 00         [10]  448 	ld	hl, #0x0004
      000117 19               [11]  449 	add	hl, de
      000118 36 04            [10]  450 	ld	(hl), #0x04
      00011A 21 05 00         [10]  451 	ld	hl, #0x0005
      00011D 19               [11]  452 	add	hl, de
      00011E 36 05            [10]  453 	ld	(hl), #0x05
      000120 21 06 00         [10]  454 	ld	hl, #0x0006
      000123 19               [11]  455 	add	hl, de
      000124 36 0E            [10]  456 	ld	(hl), #0x0e
      000126 21 07 00         [10]  457 	ld	hl, #0x0007
      000129 19               [11]  458 	add	hl, de
      00012A 36 0F            [10]  459 	ld	(hl), #0x0f
                                    460 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  461 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  462 	ld	a, l
      000130 E6 0E            [ 7]  463 	and	a, #0x0e
      000132 6F               [ 4]  464 	ld	l, a
      000133 26 00            [ 7]  465 	ld	h, #0x00
      000135 CB 3C            [ 8]  466 	srl	h
      000137 CB 1D            [ 8]  467 	rr	l
                                    468 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  469 	ld	a, 5 (ix)
      00013C 3D               [ 4]  470 	dec	a
      00013D E5               [11]  471 	push	hl
      00013E D5               [11]  472 	push	de
      00013F F5               [11]  473 	push	af
      000140 33               [ 6]  474 	inc	sp
      000141 01 00 1B         [10]  475 	ld	bc, #0x1b00
      000144 C5               [11]  476 	push	bc
      000145 CDr00r00         [17]  477 	call	_WRTVRM
      000148 F1               [10]  478 	pop	af
      000149 33               [ 6]  479 	inc	sp
      00014A DD 7E 04         [19]  480 	ld	a, 4 (ix)
      00014D F5               [11]  481 	push	af
      00014E 33               [ 6]  482 	inc	sp
      00014F 01 01 1B         [10]  483 	ld	bc, #0x1b01
      000152 C5               [11]  484 	push	bc
      000153 CDr00r00         [17]  485 	call	_WRTVRM
      000156 F1               [10]  486 	pop	af
      000157 33               [ 6]  487 	inc	sp
      000158 AF               [ 4]  488 	xor	a, a
      000159 F5               [11]  489 	push	af
      00015A 33               [ 6]  490 	inc	sp
      00015B 01 02 1B         [10]  491 	ld	bc, #0x1b02
      00015E C5               [11]  492 	push	bc
      00015F CDr00r00         [17]  493 	call	_WRTVRM
      000162 F1               [10]  494 	pop	af
      000163 33               [ 6]  495 	inc	sp
      000164 D1               [10]  496 	pop	de
      000165 E1               [10]  497 	pop	hl
                                    498 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  499 	ld	h, #0x00
      000168 19               [11]  500 	add	hl, de
      000169 7E               [ 7]  501 	ld	a, (hl)
      00016A F5               [11]  502 	push	af
      00016B 33               [ 6]  503 	inc	sp
      00016C 21 03 1B         [10]  504 	ld	hl, #0x1b03
      00016F E5               [11]  505 	push	hl
      000170 CDr00r00         [17]  506 	call	_WRTVRM
                                    507 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  508 	ld	sp,ix
      000175 DD E1            [14]  509 	pop	ix
      000177 C9               [10]  510 	ret
      000178                        511 _FONT:
      000178 00                     512 	.db #0x00	; 0
      000179 00                     513 	.db #0x00	; 0
      00017A 00                     514 	.db #0x00	; 0
      00017B 00                     515 	.db #0x00	; 0
      00017C 00                     516 	.db #0x00	; 0
      00017D 00                     517 	.db #0x00	; 0
      00017E 00                     518 	.db #0x00	; 0
      00017F 00                     519 	.db #0x00	; 0
      000180 30                     520 	.db #0x30	; 48	'0'
      000181 78                     521 	.db #0x78	; 120	'x'
      000182 78                     522 	.db #0x78	; 120	'x'
      000183 30                     523 	.db #0x30	; 48	'0'
      000184 30                     524 	.db #0x30	; 48	'0'
      000185 00                     525 	.db #0x00	; 0
      000186 30                     526 	.db #0x30	; 48	'0'
      000187 00                     527 	.db #0x00	; 0
      000188 6C                     528 	.db #0x6c	; 108	'l'
      000189 6C                     529 	.db #0x6c	; 108	'l'
      00018A 6C                     530 	.db #0x6c	; 108	'l'
      00018B 00                     531 	.db #0x00	; 0
      00018C 00                     532 	.db #0x00	; 0
      00018D 00                     533 	.db #0x00	; 0
      00018E 00                     534 	.db #0x00	; 0
      00018F 00                     535 	.db #0x00	; 0
      000190 6C                     536 	.db #0x6c	; 108	'l'
      000191 6C                     537 	.db #0x6c	; 108	'l'
      000192 FE                     538 	.db #0xfe	; 254
      000193 6C                     539 	.db #0x6c	; 108	'l'
      000194 FE                     540 	.db #0xfe	; 254
      000195 6C                     541 	.db #0x6c	; 108	'l'
      000196 6C                     542 	.db #0x6c	; 108	'l'
      000197 00                     543 	.db #0x00	; 0
      000198 30                     544 	.db #0x30	; 48	'0'
      000199 7C                     545 	.db #0x7c	; 124
      00019A C0                     546 	.db #0xc0	; 192
      00019B 78                     547 	.db #0x78	; 120	'x'
      00019C 0C                     548 	.db #0x0c	; 12
      00019D F8                     549 	.db #0xf8	; 248
      00019E 30                     550 	.db #0x30	; 48	'0'
      00019F 00                     551 	.db #0x00	; 0
      0001A0 00                     552 	.db #0x00	; 0
      0001A1 C6                     553 	.db #0xc6	; 198
      0001A2 CC                     554 	.db #0xcc	; 204
      0001A3 18                     555 	.db #0x18	; 24
      0001A4 30                     556 	.db #0x30	; 48	'0'
      0001A5 66                     557 	.db #0x66	; 102	'f'
      0001A6 C6                     558 	.db #0xc6	; 198
      0001A7 00                     559 	.db #0x00	; 0
      0001A8 38                     560 	.db #0x38	; 56	'8'
      0001A9 6C                     561 	.db #0x6c	; 108	'l'
      0001AA 38                     562 	.db #0x38	; 56	'8'
      0001AB 76                     563 	.db #0x76	; 118	'v'
      0001AC DC                     564 	.db #0xdc	; 220
      0001AD CC                     565 	.db #0xcc	; 204
      0001AE 76                     566 	.db #0x76	; 118	'v'
      0001AF 00                     567 	.db #0x00	; 0
      0001B0 60                     568 	.db #0x60	; 96
      0001B1 60                     569 	.db #0x60	; 96
      0001B2 C0                     570 	.db #0xc0	; 192
      0001B3 00                     571 	.db #0x00	; 0
      0001B4 00                     572 	.db #0x00	; 0
      0001B5 00                     573 	.db #0x00	; 0
      0001B6 00                     574 	.db #0x00	; 0
      0001B7 00                     575 	.db #0x00	; 0
      0001B8 18                     576 	.db #0x18	; 24
      0001B9 30                     577 	.db #0x30	; 48	'0'
      0001BA 60                     578 	.db #0x60	; 96
      0001BB 60                     579 	.db #0x60	; 96
      0001BC 60                     580 	.db #0x60	; 96
      0001BD 30                     581 	.db #0x30	; 48	'0'
      0001BE 18                     582 	.db #0x18	; 24
      0001BF 00                     583 	.db #0x00	; 0
      0001C0 60                     584 	.db #0x60	; 96
      0001C1 30                     585 	.db #0x30	; 48	'0'
      0001C2 18                     586 	.db #0x18	; 24
      0001C3 18                     587 	.db #0x18	; 24
      0001C4 18                     588 	.db #0x18	; 24
      0001C5 30                     589 	.db #0x30	; 48	'0'
      0001C6 60                     590 	.db #0x60	; 96
      0001C7 00                     591 	.db #0x00	; 0
      0001C8 00                     592 	.db #0x00	; 0
      0001C9 66                     593 	.db #0x66	; 102	'f'
      0001CA 3C                     594 	.db #0x3c	; 60
      0001CB FF                     595 	.db #0xff	; 255
      0001CC 3C                     596 	.db #0x3c	; 60
      0001CD 66                     597 	.db #0x66	; 102	'f'
      0001CE 00                     598 	.db #0x00	; 0
      0001CF 00                     599 	.db #0x00	; 0
      0001D0 00                     600 	.db #0x00	; 0
      0001D1 30                     601 	.db #0x30	; 48	'0'
      0001D2 30                     602 	.db #0x30	; 48	'0'
      0001D3 FC                     603 	.db #0xfc	; 252
      0001D4 30                     604 	.db #0x30	; 48	'0'
      0001D5 30                     605 	.db #0x30	; 48	'0'
      0001D6 00                     606 	.db #0x00	; 0
      0001D7 00                     607 	.db #0x00	; 0
      0001D8 00                     608 	.db #0x00	; 0
      0001D9 00                     609 	.db #0x00	; 0
      0001DA 00                     610 	.db #0x00	; 0
      0001DB 00                     611 	.db #0x00	; 0
      0001DC 00                     612 	.db #0x00	; 0
      0001DD 30                     613 	.db #0x30	; 48	'0'
      0001DE 30                     614 	.db #0x30	; 48	'0'
      0001DF 60                     615 	.db #0x60	; 96
      0001E0 00                     616 	.db #0x00	; 0
      0001E1 00                     617 	.db #0x00	; 0
      0001E2 00                     618 	.db #0x00	; 0
      0001E3 FC                     619 	.db #0xfc	; 252
      0001E4 00                     620 	.db #0x00	; 0
      0001E5 00                     621 	.db #0x00	; 0
      0001E6 00                     622 	.db #0x00	; 0
      0001E7 00                     623 	.db #0x00	; 0
      0001E8 00                     624 	.db #0x00	; 0
      0001E9 00                     625 	.db #0x00	; 0
      0001EA 00                     626 	.db #0x00	; 0
      0001EB 00                     627 	.db #0x00	; 0
      0001EC 00                     628 	.db #0x00	; 0
      0001ED 30                     629 	.db #0x30	; 48	'0'
      0001EE 30                     630 	.db #0x30	; 48	'0'
      0001EF 00                     631 	.db #0x00	; 0
      0001F0 06                     632 	.db #0x06	; 6
      0001F1 0C                     633 	.db #0x0c	; 12
      0001F2 18                     634 	.db #0x18	; 24
      0001F3 30                     635 	.db #0x30	; 48	'0'
      0001F4 60                     636 	.db #0x60	; 96
      0001F5 C0                     637 	.db #0xc0	; 192
      0001F6 80                     638 	.db #0x80	; 128
      0001F7 00                     639 	.db #0x00	; 0
      0001F8 7C                     640 	.db #0x7c	; 124
      0001F9 C6                     641 	.db #0xc6	; 198
      0001FA CE                     642 	.db #0xce	; 206
      0001FB DE                     643 	.db #0xde	; 222
      0001FC F6                     644 	.db #0xf6	; 246
      0001FD E6                     645 	.db #0xe6	; 230
      0001FE 7C                     646 	.db #0x7c	; 124
      0001FF 00                     647 	.db #0x00	; 0
      000200 30                     648 	.db #0x30	; 48	'0'
      000201 70                     649 	.db #0x70	; 112	'p'
      000202 30                     650 	.db #0x30	; 48	'0'
      000203 30                     651 	.db #0x30	; 48	'0'
      000204 30                     652 	.db #0x30	; 48	'0'
      000205 30                     653 	.db #0x30	; 48	'0'
      000206 FC                     654 	.db #0xfc	; 252
      000207 00                     655 	.db #0x00	; 0
      000208 78                     656 	.db #0x78	; 120	'x'
      000209 CC                     657 	.db #0xcc	; 204
      00020A 0C                     658 	.db #0x0c	; 12
      00020B 38                     659 	.db #0x38	; 56	'8'
      00020C 60                     660 	.db #0x60	; 96
      00020D C4                     661 	.db #0xc4	; 196
      00020E FC                     662 	.db #0xfc	; 252
      00020F 00                     663 	.db #0x00	; 0
      000210 78                     664 	.db #0x78	; 120	'x'
      000211 CC                     665 	.db #0xcc	; 204
      000212 0C                     666 	.db #0x0c	; 12
      000213 38                     667 	.db #0x38	; 56	'8'
      000214 0C                     668 	.db #0x0c	; 12
      000215 CC                     669 	.db #0xcc	; 204
      000216 78                     670 	.db #0x78	; 120	'x'
      000217 00                     671 	.db #0x00	; 0
      000218 1C                     672 	.db #0x1c	; 28
      000219 3C                     673 	.db #0x3c	; 60
      00021A 6C                     674 	.db #0x6c	; 108	'l'
      00021B CC                     675 	.db #0xcc	; 204
      00021C FE                     676 	.db #0xfe	; 254
      00021D 0C                     677 	.db #0x0c	; 12
      00021E 1E                     678 	.db #0x1e	; 30
      00021F 00                     679 	.db #0x00	; 0
      000220 FC                     680 	.db #0xfc	; 252
      000221 C0                     681 	.db #0xc0	; 192
      000222 F8                     682 	.db #0xf8	; 248
      000223 0C                     683 	.db #0x0c	; 12
      000224 0C                     684 	.db #0x0c	; 12
      000225 CC                     685 	.db #0xcc	; 204
      000226 78                     686 	.db #0x78	; 120	'x'
      000227 00                     687 	.db #0x00	; 0
      000228 38                     688 	.db #0x38	; 56	'8'
      000229 60                     689 	.db #0x60	; 96
      00022A C0                     690 	.db #0xc0	; 192
      00022B F8                     691 	.db #0xf8	; 248
      00022C CC                     692 	.db #0xcc	; 204
      00022D CC                     693 	.db #0xcc	; 204
      00022E 78                     694 	.db #0x78	; 120	'x'
      00022F 00                     695 	.db #0x00	; 0
      000230 FC                     696 	.db #0xfc	; 252
      000231 CC                     697 	.db #0xcc	; 204
      000232 0C                     698 	.db #0x0c	; 12
      000233 18                     699 	.db #0x18	; 24
      000234 30                     700 	.db #0x30	; 48	'0'
      000235 30                     701 	.db #0x30	; 48	'0'
      000236 30                     702 	.db #0x30	; 48	'0'
      000237 00                     703 	.db #0x00	; 0
      000238 78                     704 	.db #0x78	; 120	'x'
      000239 CC                     705 	.db #0xcc	; 204
      00023A CC                     706 	.db #0xcc	; 204
      00023B 78                     707 	.db #0x78	; 120	'x'
      00023C CC                     708 	.db #0xcc	; 204
      00023D CC                     709 	.db #0xcc	; 204
      00023E 78                     710 	.db #0x78	; 120	'x'
      00023F 00                     711 	.db #0x00	; 0
      000240 78                     712 	.db #0x78	; 120	'x'
      000241 CC                     713 	.db #0xcc	; 204
      000242 CC                     714 	.db #0xcc	; 204
      000243 7C                     715 	.db #0x7c	; 124
      000244 0C                     716 	.db #0x0c	; 12
      000245 18                     717 	.db #0x18	; 24
      000246 70                     718 	.db #0x70	; 112	'p'
      000247 00                     719 	.db #0x00	; 0
      000248 00                     720 	.db #0x00	; 0
      000249 30                     721 	.db #0x30	; 48	'0'
      00024A 30                     722 	.db #0x30	; 48	'0'
      00024B 00                     723 	.db #0x00	; 0
      00024C 00                     724 	.db #0x00	; 0
      00024D 30                     725 	.db #0x30	; 48	'0'
      00024E 30                     726 	.db #0x30	; 48	'0'
      00024F 00                     727 	.db #0x00	; 0
      000250 00                     728 	.db #0x00	; 0
      000251 30                     729 	.db #0x30	; 48	'0'
      000252 30                     730 	.db #0x30	; 48	'0'
      000253 00                     731 	.db #0x00	; 0
      000254 30                     732 	.db #0x30	; 48	'0'
      000255 30                     733 	.db #0x30	; 48	'0'
      000256 60                     734 	.db #0x60	; 96
      000257 00                     735 	.db #0x00	; 0
      000258 18                     736 	.db #0x18	; 24
      000259 30                     737 	.db #0x30	; 48	'0'
      00025A 60                     738 	.db #0x60	; 96
      00025B C0                     739 	.db #0xc0	; 192
      00025C 60                     740 	.db #0x60	; 96
      00025D 30                     741 	.db #0x30	; 48	'0'
      00025E 18                     742 	.db #0x18	; 24
      00025F 00                     743 	.db #0x00	; 0
      000260 00                     744 	.db #0x00	; 0
      000261 00                     745 	.db #0x00	; 0
      000262 FC                     746 	.db #0xfc	; 252
      000263 00                     747 	.db #0x00	; 0
      000264 00                     748 	.db #0x00	; 0
      000265 FC                     749 	.db #0xfc	; 252
      000266 00                     750 	.db #0x00	; 0
      000267 00                     751 	.db #0x00	; 0
      000268 60                     752 	.db #0x60	; 96
      000269 30                     753 	.db #0x30	; 48	'0'
      00026A 18                     754 	.db #0x18	; 24
      00026B 0C                     755 	.db #0x0c	; 12
      00026C 18                     756 	.db #0x18	; 24
      00026D 30                     757 	.db #0x30	; 48	'0'
      00026E 60                     758 	.db #0x60	; 96
      00026F 00                     759 	.db #0x00	; 0
      000270 78                     760 	.db #0x78	; 120	'x'
      000271 CC                     761 	.db #0xcc	; 204
      000272 0C                     762 	.db #0x0c	; 12
      000273 18                     763 	.db #0x18	; 24
      000274 30                     764 	.db #0x30	; 48	'0'
      000275 00                     765 	.db #0x00	; 0
      000276 30                     766 	.db #0x30	; 48	'0'
      000277 00                     767 	.db #0x00	; 0
      000278 7C                     768 	.db #0x7c	; 124
      000279 C6                     769 	.db #0xc6	; 198
      00027A DE                     770 	.db #0xde	; 222
      00027B DE                     771 	.db #0xde	; 222
      00027C DE                     772 	.db #0xde	; 222
      00027D C0                     773 	.db #0xc0	; 192
      00027E 78                     774 	.db #0x78	; 120	'x'
      00027F 00                     775 	.db #0x00	; 0
      000280 30                     776 	.db #0x30	; 48	'0'
      000281 78                     777 	.db #0x78	; 120	'x'
      000282 CC                     778 	.db #0xcc	; 204
      000283 CC                     779 	.db #0xcc	; 204
      000284 FC                     780 	.db #0xfc	; 252
      000285 CC                     781 	.db #0xcc	; 204
      000286 CC                     782 	.db #0xcc	; 204
      000287 00                     783 	.db #0x00	; 0
      000288 FC                     784 	.db #0xfc	; 252
      000289 66                     785 	.db #0x66	; 102	'f'
      00028A 66                     786 	.db #0x66	; 102	'f'
      00028B 7C                     787 	.db #0x7c	; 124
      00028C 66                     788 	.db #0x66	; 102	'f'
      00028D 66                     789 	.db #0x66	; 102	'f'
      00028E FC                     790 	.db #0xfc	; 252
      00028F 00                     791 	.db #0x00	; 0
      000290 3C                     792 	.db #0x3c	; 60
      000291 66                     793 	.db #0x66	; 102	'f'
      000292 C0                     794 	.db #0xc0	; 192
      000293 C0                     795 	.db #0xc0	; 192
      000294 C0                     796 	.db #0xc0	; 192
      000295 66                     797 	.db #0x66	; 102	'f'
      000296 3C                     798 	.db #0x3c	; 60
      000297 00                     799 	.db #0x00	; 0
      000298 F8                     800 	.db #0xf8	; 248
      000299 6C                     801 	.db #0x6c	; 108	'l'
      00029A 66                     802 	.db #0x66	; 102	'f'
      00029B 66                     803 	.db #0x66	; 102	'f'
      00029C 66                     804 	.db #0x66	; 102	'f'
      00029D 6C                     805 	.db #0x6c	; 108	'l'
      00029E F8                     806 	.db #0xf8	; 248
      00029F 00                     807 	.db #0x00	; 0
      0002A0 FE                     808 	.db #0xfe	; 254
      0002A1 62                     809 	.db #0x62	; 98	'b'
      0002A2 68                     810 	.db #0x68	; 104	'h'
      0002A3 78                     811 	.db #0x78	; 120	'x'
      0002A4 68                     812 	.db #0x68	; 104	'h'
      0002A5 62                     813 	.db #0x62	; 98	'b'
      0002A6 FE                     814 	.db #0xfe	; 254
      0002A7 00                     815 	.db #0x00	; 0
      0002A8 FE                     816 	.db #0xfe	; 254
      0002A9 62                     817 	.db #0x62	; 98	'b'
      0002AA 68                     818 	.db #0x68	; 104	'h'
      0002AB 78                     819 	.db #0x78	; 120	'x'
      0002AC 68                     820 	.db #0x68	; 104	'h'
      0002AD 60                     821 	.db #0x60	; 96
      0002AE F0                     822 	.db #0xf0	; 240
      0002AF 00                     823 	.db #0x00	; 0
      0002B0 3C                     824 	.db #0x3c	; 60
      0002B1 66                     825 	.db #0x66	; 102	'f'
      0002B2 C0                     826 	.db #0xc0	; 192
      0002B3 C0                     827 	.db #0xc0	; 192
      0002B4 CE                     828 	.db #0xce	; 206
      0002B5 66                     829 	.db #0x66	; 102	'f'
      0002B6 3E                     830 	.db #0x3e	; 62
      0002B7 00                     831 	.db #0x00	; 0
      0002B8 CC                     832 	.db #0xcc	; 204
      0002B9 CC                     833 	.db #0xcc	; 204
      0002BA CC                     834 	.db #0xcc	; 204
      0002BB FC                     835 	.db #0xfc	; 252
      0002BC CC                     836 	.db #0xcc	; 204
      0002BD CC                     837 	.db #0xcc	; 204
      0002BE CC                     838 	.db #0xcc	; 204
      0002BF 00                     839 	.db #0x00	; 0
      0002C0 78                     840 	.db #0x78	; 120	'x'
      0002C1 30                     841 	.db #0x30	; 48	'0'
      0002C2 30                     842 	.db #0x30	; 48	'0'
      0002C3 30                     843 	.db #0x30	; 48	'0'
      0002C4 30                     844 	.db #0x30	; 48	'0'
      0002C5 30                     845 	.db #0x30	; 48	'0'
      0002C6 78                     846 	.db #0x78	; 120	'x'
      0002C7 00                     847 	.db #0x00	; 0
      0002C8 1E                     848 	.db #0x1e	; 30
      0002C9 0C                     849 	.db #0x0c	; 12
      0002CA 0C                     850 	.db #0x0c	; 12
      0002CB 0C                     851 	.db #0x0c	; 12
      0002CC CC                     852 	.db #0xcc	; 204
      0002CD CC                     853 	.db #0xcc	; 204
      0002CE 78                     854 	.db #0x78	; 120	'x'
      0002CF 00                     855 	.db #0x00	; 0
      0002D0 E6                     856 	.db #0xe6	; 230
      0002D1 66                     857 	.db #0x66	; 102	'f'
      0002D2 6C                     858 	.db #0x6c	; 108	'l'
      0002D3 78                     859 	.db #0x78	; 120	'x'
      0002D4 6C                     860 	.db #0x6c	; 108	'l'
      0002D5 66                     861 	.db #0x66	; 102	'f'
      0002D6 E6                     862 	.db #0xe6	; 230
      0002D7 00                     863 	.db #0x00	; 0
      0002D8 F0                     864 	.db #0xf0	; 240
      0002D9 60                     865 	.db #0x60	; 96
      0002DA 60                     866 	.db #0x60	; 96
      0002DB 60                     867 	.db #0x60	; 96
      0002DC 62                     868 	.db #0x62	; 98	'b'
      0002DD 66                     869 	.db #0x66	; 102	'f'
      0002DE FE                     870 	.db #0xfe	; 254
      0002DF 00                     871 	.db #0x00	; 0
      0002E0 C6                     872 	.db #0xc6	; 198
      0002E1 EE                     873 	.db #0xee	; 238
      0002E2 FE                     874 	.db #0xfe	; 254
      0002E3 FE                     875 	.db #0xfe	; 254
      0002E4 D6                     876 	.db #0xd6	; 214
      0002E5 C6                     877 	.db #0xc6	; 198
      0002E6 C6                     878 	.db #0xc6	; 198
      0002E7 00                     879 	.db #0x00	; 0
      0002E8 C6                     880 	.db #0xc6	; 198
      0002E9 E6                     881 	.db #0xe6	; 230
      0002EA F6                     882 	.db #0xf6	; 246
      0002EB DE                     883 	.db #0xde	; 222
      0002EC CE                     884 	.db #0xce	; 206
      0002ED C6                     885 	.db #0xc6	; 198
      0002EE C6                     886 	.db #0xc6	; 198
      0002EF 00                     887 	.db #0x00	; 0
      0002F0 38                     888 	.db #0x38	; 56	'8'
      0002F1 6C                     889 	.db #0x6c	; 108	'l'
      0002F2 C6                     890 	.db #0xc6	; 198
      0002F3 C6                     891 	.db #0xc6	; 198
      0002F4 C6                     892 	.db #0xc6	; 198
      0002F5 6C                     893 	.db #0x6c	; 108	'l'
      0002F6 38                     894 	.db #0x38	; 56	'8'
      0002F7 00                     895 	.db #0x00	; 0
      0002F8 FC                     896 	.db #0xfc	; 252
      0002F9 66                     897 	.db #0x66	; 102	'f'
      0002FA 66                     898 	.db #0x66	; 102	'f'
      0002FB 7C                     899 	.db #0x7c	; 124
      0002FC 60                     900 	.db #0x60	; 96
      0002FD 60                     901 	.db #0x60	; 96
      0002FE F0                     902 	.db #0xf0	; 240
      0002FF 00                     903 	.db #0x00	; 0
      000300 78                     904 	.db #0x78	; 120	'x'
      000301 CC                     905 	.db #0xcc	; 204
      000302 CC                     906 	.db #0xcc	; 204
      000303 CC                     907 	.db #0xcc	; 204
      000304 DC                     908 	.db #0xdc	; 220
      000305 78                     909 	.db #0x78	; 120	'x'
      000306 1C                     910 	.db #0x1c	; 28
      000307 00                     911 	.db #0x00	; 0
      000308 FC                     912 	.db #0xfc	; 252
      000309 66                     913 	.db #0x66	; 102	'f'
      00030A 66                     914 	.db #0x66	; 102	'f'
      00030B 7C                     915 	.db #0x7c	; 124
      00030C 6C                     916 	.db #0x6c	; 108	'l'
      00030D 66                     917 	.db #0x66	; 102	'f'
      00030E E6                     918 	.db #0xe6	; 230
      00030F 00                     919 	.db #0x00	; 0
      000310 78                     920 	.db #0x78	; 120	'x'
      000311 CC                     921 	.db #0xcc	; 204
      000312 E0                     922 	.db #0xe0	; 224
      000313 70                     923 	.db #0x70	; 112	'p'
      000314 1C                     924 	.db #0x1c	; 28
      000315 CC                     925 	.db #0xcc	; 204
      000316 78                     926 	.db #0x78	; 120	'x'
      000317 00                     927 	.db #0x00	; 0
      000318 FC                     928 	.db #0xfc	; 252
      000319 B4                     929 	.db #0xb4	; 180
      00031A 30                     930 	.db #0x30	; 48	'0'
      00031B 30                     931 	.db #0x30	; 48	'0'
      00031C 30                     932 	.db #0x30	; 48	'0'
      00031D 30                     933 	.db #0x30	; 48	'0'
      00031E 78                     934 	.db #0x78	; 120	'x'
      00031F 00                     935 	.db #0x00	; 0
      000320 CC                     936 	.db #0xcc	; 204
      000321 CC                     937 	.db #0xcc	; 204
      000322 CC                     938 	.db #0xcc	; 204
      000323 CC                     939 	.db #0xcc	; 204
      000324 CC                     940 	.db #0xcc	; 204
      000325 CC                     941 	.db #0xcc	; 204
      000326 FC                     942 	.db #0xfc	; 252
      000327 00                     943 	.db #0x00	; 0
      000328 CC                     944 	.db #0xcc	; 204
      000329 CC                     945 	.db #0xcc	; 204
      00032A CC                     946 	.db #0xcc	; 204
      00032B CC                     947 	.db #0xcc	; 204
      00032C CC                     948 	.db #0xcc	; 204
      00032D 78                     949 	.db #0x78	; 120	'x'
      00032E 30                     950 	.db #0x30	; 48	'0'
      00032F 00                     951 	.db #0x00	; 0
      000330 C6                     952 	.db #0xc6	; 198
      000331 C6                     953 	.db #0xc6	; 198
      000332 C6                     954 	.db #0xc6	; 198
      000333 D6                     955 	.db #0xd6	; 214
      000334 FE                     956 	.db #0xfe	; 254
      000335 EE                     957 	.db #0xee	; 238
      000336 C6                     958 	.db #0xc6	; 198
      000337 00                     959 	.db #0x00	; 0
      000338 C6                     960 	.db #0xc6	; 198
      000339 C6                     961 	.db #0xc6	; 198
      00033A 6C                     962 	.db #0x6c	; 108	'l'
      00033B 38                     963 	.db #0x38	; 56	'8'
      00033C 38                     964 	.db #0x38	; 56	'8'
      00033D 6C                     965 	.db #0x6c	; 108	'l'
      00033E C6                     966 	.db #0xc6	; 198
      00033F 00                     967 	.db #0x00	; 0
      000340 CC                     968 	.db #0xcc	; 204
      000341 CC                     969 	.db #0xcc	; 204
      000342 CC                     970 	.db #0xcc	; 204
      000343 78                     971 	.db #0x78	; 120	'x'
      000344 30                     972 	.db #0x30	; 48	'0'
      000345 30                     973 	.db #0x30	; 48	'0'
      000346 78                     974 	.db #0x78	; 120	'x'
      000347 00                     975 	.db #0x00	; 0
      000348 FE                     976 	.db #0xfe	; 254
      000349 C6                     977 	.db #0xc6	; 198
      00034A 8C                     978 	.db #0x8c	; 140
      00034B 18                     979 	.db #0x18	; 24
      00034C 32                     980 	.db #0x32	; 50	'2'
      00034D 66                     981 	.db #0x66	; 102	'f'
      00034E FE                     982 	.db #0xfe	; 254
      00034F 00                     983 	.db #0x00	; 0
      000350 78                     984 	.db #0x78	; 120	'x'
      000351 60                     985 	.db #0x60	; 96
      000352 60                     986 	.db #0x60	; 96
      000353 60                     987 	.db #0x60	; 96
      000354 60                     988 	.db #0x60	; 96
      000355 60                     989 	.db #0x60	; 96
      000356 78                     990 	.db #0x78	; 120	'x'
      000357 00                     991 	.db #0x00	; 0
      000358 C0                     992 	.db #0xc0	; 192
      000359 60                     993 	.db #0x60	; 96
      00035A 30                     994 	.db #0x30	; 48	'0'
      00035B 18                     995 	.db #0x18	; 24
      00035C 0C                     996 	.db #0x0c	; 12
      00035D 06                     997 	.db #0x06	; 6
      00035E 02                     998 	.db #0x02	; 2
      00035F 00                     999 	.db #0x00	; 0
      000360 78                    1000 	.db #0x78	; 120	'x'
      000361 18                    1001 	.db #0x18	; 24
      000362 18                    1002 	.db #0x18	; 24
      000363 18                    1003 	.db #0x18	; 24
      000364 18                    1004 	.db #0x18	; 24
      000365 18                    1005 	.db #0x18	; 24
      000366 78                    1006 	.db #0x78	; 120	'x'
      000367 00                    1007 	.db #0x00	; 0
      000368 10                    1008 	.db #0x10	; 16
      000369 38                    1009 	.db #0x38	; 56	'8'
      00036A 6C                    1010 	.db #0x6c	; 108	'l'
      00036B C6                    1011 	.db #0xc6	; 198
      00036C 00                    1012 	.db #0x00	; 0
      00036D 00                    1013 	.db #0x00	; 0
      00036E 00                    1014 	.db #0x00	; 0
      00036F 00                    1015 	.db #0x00	; 0
      000370 00                    1016 	.db #0x00	; 0
      000371 00                    1017 	.db #0x00	; 0
      000372 00                    1018 	.db #0x00	; 0
      000373 00                    1019 	.db #0x00	; 0
      000374 00                    1020 	.db #0x00	; 0
      000375 00                    1021 	.db #0x00	; 0
      000376 00                    1022 	.db #0x00	; 0
      000377 FF                    1023 	.db #0xff	; 255
      000378 30                    1024 	.db #0x30	; 48	'0'
      000379 30                    1025 	.db #0x30	; 48	'0'
      00037A 18                    1026 	.db #0x18	; 24
      00037B 00                    1027 	.db #0x00	; 0
      00037C 00                    1028 	.db #0x00	; 0
      00037D 00                    1029 	.db #0x00	; 0
      00037E 00                    1030 	.db #0x00	; 0
      00037F 00                    1031 	.db #0x00	; 0
      000380 00                    1032 	.db #0x00	; 0
      000381 00                    1033 	.db #0x00	; 0
      000382 78                    1034 	.db #0x78	; 120	'x'
      000383 0C                    1035 	.db #0x0c	; 12
      000384 7C                    1036 	.db #0x7c	; 124
      000385 CC                    1037 	.db #0xcc	; 204
      000386 76                    1038 	.db #0x76	; 118	'v'
      000387 00                    1039 	.db #0x00	; 0
      000388 E0                    1040 	.db #0xe0	; 224
      000389 60                    1041 	.db #0x60	; 96
      00038A 60                    1042 	.db #0x60	; 96
      00038B 7C                    1043 	.db #0x7c	; 124
      00038C 66                    1044 	.db #0x66	; 102	'f'
      00038D 66                    1045 	.db #0x66	; 102	'f'
      00038E DC                    1046 	.db #0xdc	; 220
      00038F 00                    1047 	.db #0x00	; 0
      000390 00                    1048 	.db #0x00	; 0
      000391 00                    1049 	.db #0x00	; 0
      000392 78                    1050 	.db #0x78	; 120	'x'
      000393 CC                    1051 	.db #0xcc	; 204
      000394 C0                    1052 	.db #0xc0	; 192
      000395 CC                    1053 	.db #0xcc	; 204
      000396 78                    1054 	.db #0x78	; 120	'x'
      000397 00                    1055 	.db #0x00	; 0
      000398 1C                    1056 	.db #0x1c	; 28
      000399 0C                    1057 	.db #0x0c	; 12
      00039A 0C                    1058 	.db #0x0c	; 12
      00039B 7C                    1059 	.db #0x7c	; 124
      00039C CC                    1060 	.db #0xcc	; 204
      00039D CC                    1061 	.db #0xcc	; 204
      00039E 76                    1062 	.db #0x76	; 118	'v'
      00039F 00                    1063 	.db #0x00	; 0
      0003A0 00                    1064 	.db #0x00	; 0
      0003A1 00                    1065 	.db #0x00	; 0
      0003A2 78                    1066 	.db #0x78	; 120	'x'
      0003A3 CC                    1067 	.db #0xcc	; 204
      0003A4 FC                    1068 	.db #0xfc	; 252
      0003A5 C0                    1069 	.db #0xc0	; 192
      0003A6 78                    1070 	.db #0x78	; 120	'x'
      0003A7 00                    1071 	.db #0x00	; 0
      0003A8 38                    1072 	.db #0x38	; 56	'8'
      0003A9 6C                    1073 	.db #0x6c	; 108	'l'
      0003AA 60                    1074 	.db #0x60	; 96
      0003AB F0                    1075 	.db #0xf0	; 240
      0003AC 60                    1076 	.db #0x60	; 96
      0003AD 60                    1077 	.db #0x60	; 96
      0003AE F0                    1078 	.db #0xf0	; 240
      0003AF 00                    1079 	.db #0x00	; 0
      0003B0 00                    1080 	.db #0x00	; 0
      0003B1 00                    1081 	.db #0x00	; 0
      0003B2 76                    1082 	.db #0x76	; 118	'v'
      0003B3 CC                    1083 	.db #0xcc	; 204
      0003B4 CC                    1084 	.db #0xcc	; 204
      0003B5 7C                    1085 	.db #0x7c	; 124
      0003B6 0C                    1086 	.db #0x0c	; 12
      0003B7 F8                    1087 	.db #0xf8	; 248
      0003B8 E0                    1088 	.db #0xe0	; 224
      0003B9 60                    1089 	.db #0x60	; 96
      0003BA 6C                    1090 	.db #0x6c	; 108	'l'
      0003BB 76                    1091 	.db #0x76	; 118	'v'
      0003BC 66                    1092 	.db #0x66	; 102	'f'
      0003BD 66                    1093 	.db #0x66	; 102	'f'
      0003BE E6                    1094 	.db #0xe6	; 230
      0003BF 00                    1095 	.db #0x00	; 0
      0003C0 30                    1096 	.db #0x30	; 48	'0'
      0003C1 00                    1097 	.db #0x00	; 0
      0003C2 70                    1098 	.db #0x70	; 112	'p'
      0003C3 30                    1099 	.db #0x30	; 48	'0'
      0003C4 30                    1100 	.db #0x30	; 48	'0'
      0003C5 30                    1101 	.db #0x30	; 48	'0'
      0003C6 78                    1102 	.db #0x78	; 120	'x'
      0003C7 00                    1103 	.db #0x00	; 0
      0003C8 0C                    1104 	.db #0x0c	; 12
      0003C9 00                    1105 	.db #0x00	; 0
      0003CA 0C                    1106 	.db #0x0c	; 12
      0003CB 0C                    1107 	.db #0x0c	; 12
      0003CC 0C                    1108 	.db #0x0c	; 12
      0003CD CC                    1109 	.db #0xcc	; 204
      0003CE CC                    1110 	.db #0xcc	; 204
      0003CF 78                    1111 	.db #0x78	; 120	'x'
      0003D0 E0                    1112 	.db #0xe0	; 224
      0003D1 60                    1113 	.db #0x60	; 96
      0003D2 66                    1114 	.db #0x66	; 102	'f'
      0003D3 6C                    1115 	.db #0x6c	; 108	'l'
      0003D4 78                    1116 	.db #0x78	; 120	'x'
      0003D5 6C                    1117 	.db #0x6c	; 108	'l'
      0003D6 E6                    1118 	.db #0xe6	; 230
      0003D7 00                    1119 	.db #0x00	; 0
      0003D8 70                    1120 	.db #0x70	; 112	'p'
      0003D9 30                    1121 	.db #0x30	; 48	'0'
      0003DA 30                    1122 	.db #0x30	; 48	'0'
      0003DB 30                    1123 	.db #0x30	; 48	'0'
      0003DC 30                    1124 	.db #0x30	; 48	'0'
      0003DD 30                    1125 	.db #0x30	; 48	'0'
      0003DE 78                    1126 	.db #0x78	; 120	'x'
      0003DF 00                    1127 	.db #0x00	; 0
      0003E0 00                    1128 	.db #0x00	; 0
      0003E1 00                    1129 	.db #0x00	; 0
      0003E2 CC                    1130 	.db #0xcc	; 204
      0003E3 FE                    1131 	.db #0xfe	; 254
      0003E4 FE                    1132 	.db #0xfe	; 254
      0003E5 D6                    1133 	.db #0xd6	; 214
      0003E6 C6                    1134 	.db #0xc6	; 198
      0003E7 00                    1135 	.db #0x00	; 0
      0003E8 00                    1136 	.db #0x00	; 0
      0003E9 00                    1137 	.db #0x00	; 0
      0003EA F8                    1138 	.db #0xf8	; 248
      0003EB CC                    1139 	.db #0xcc	; 204
      0003EC CC                    1140 	.db #0xcc	; 204
      0003ED CC                    1141 	.db #0xcc	; 204
      0003EE CC                    1142 	.db #0xcc	; 204
      0003EF 00                    1143 	.db #0x00	; 0
      0003F0 00                    1144 	.db #0x00	; 0
      0003F1 00                    1145 	.db #0x00	; 0
      0003F2 78                    1146 	.db #0x78	; 120	'x'
      0003F3 CC                    1147 	.db #0xcc	; 204
      0003F4 CC                    1148 	.db #0xcc	; 204
      0003F5 CC                    1149 	.db #0xcc	; 204
      0003F6 78                    1150 	.db #0x78	; 120	'x'
      0003F7 00                    1151 	.db #0x00	; 0
      0003F8 00                    1152 	.db #0x00	; 0
      0003F9 00                    1153 	.db #0x00	; 0
      0003FA DC                    1154 	.db #0xdc	; 220
      0003FB 66                    1155 	.db #0x66	; 102	'f'
      0003FC 66                    1156 	.db #0x66	; 102	'f'
      0003FD 7C                    1157 	.db #0x7c	; 124
      0003FE 60                    1158 	.db #0x60	; 96
      0003FF F0                    1159 	.db #0xf0	; 240
      000400 00                    1160 	.db #0x00	; 0
      000401 00                    1161 	.db #0x00	; 0
      000402 76                    1162 	.db #0x76	; 118	'v'
      000403 CC                    1163 	.db #0xcc	; 204
      000404 CC                    1164 	.db #0xcc	; 204
      000405 7C                    1165 	.db #0x7c	; 124
      000406 0C                    1166 	.db #0x0c	; 12
      000407 1E                    1167 	.db #0x1e	; 30
      000408 00                    1168 	.db #0x00	; 0
      000409 00                    1169 	.db #0x00	; 0
      00040A DC                    1170 	.db #0xdc	; 220
      00040B 76                    1171 	.db #0x76	; 118	'v'
      00040C 66                    1172 	.db #0x66	; 102	'f'
      00040D 60                    1173 	.db #0x60	; 96
      00040E F0                    1174 	.db #0xf0	; 240
      00040F 00                    1175 	.db #0x00	; 0
      000410 00                    1176 	.db #0x00	; 0
      000411 00                    1177 	.db #0x00	; 0
      000412 7C                    1178 	.db #0x7c	; 124
      000413 C0                    1179 	.db #0xc0	; 192
      000414 78                    1180 	.db #0x78	; 120	'x'
      000415 0C                    1181 	.db #0x0c	; 12
      000416 F8                    1182 	.db #0xf8	; 248
      000417 00                    1183 	.db #0x00	; 0
      000418 10                    1184 	.db #0x10	; 16
      000419 30                    1185 	.db #0x30	; 48	'0'
      00041A 7C                    1186 	.db #0x7c	; 124
      00041B 30                    1187 	.db #0x30	; 48	'0'
      00041C 30                    1188 	.db #0x30	; 48	'0'
      00041D 34                    1189 	.db #0x34	; 52	'4'
      00041E 18                    1190 	.db #0x18	; 24
      00041F 00                    1191 	.db #0x00	; 0
      000420 00                    1192 	.db #0x00	; 0
      000421 00                    1193 	.db #0x00	; 0
      000422 CC                    1194 	.db #0xcc	; 204
      000423 CC                    1195 	.db #0xcc	; 204
      000424 CC                    1196 	.db #0xcc	; 204
      000425 CC                    1197 	.db #0xcc	; 204
      000426 76                    1198 	.db #0x76	; 118	'v'
      000427 00                    1199 	.db #0x00	; 0
      000428 00                    1200 	.db #0x00	; 0
      000429 00                    1201 	.db #0x00	; 0
      00042A CC                    1202 	.db #0xcc	; 204
      00042B CC                    1203 	.db #0xcc	; 204
      00042C CC                    1204 	.db #0xcc	; 204
      00042D 78                    1205 	.db #0x78	; 120	'x'
      00042E 30                    1206 	.db #0x30	; 48	'0'
      00042F 00                    1207 	.db #0x00	; 0
      000430 00                    1208 	.db #0x00	; 0
      000431 00                    1209 	.db #0x00	; 0
      000432 C6                    1210 	.db #0xc6	; 198
      000433 D6                    1211 	.db #0xd6	; 214
      000434 FE                    1212 	.db #0xfe	; 254
      000435 FE                    1213 	.db #0xfe	; 254
      000436 6C                    1214 	.db #0x6c	; 108	'l'
      000437 00                    1215 	.db #0x00	; 0
      000438 00                    1216 	.db #0x00	; 0
      000439 00                    1217 	.db #0x00	; 0
      00043A C6                    1218 	.db #0xc6	; 198
      00043B 6C                    1219 	.db #0x6c	; 108	'l'
      00043C 38                    1220 	.db #0x38	; 56	'8'
      00043D 6C                    1221 	.db #0x6c	; 108	'l'
      00043E C6                    1222 	.db #0xc6	; 198
      00043F 00                    1223 	.db #0x00	; 0
      000440 00                    1224 	.db #0x00	; 0
      000441 00                    1225 	.db #0x00	; 0
      000442 CC                    1226 	.db #0xcc	; 204
      000443 CC                    1227 	.db #0xcc	; 204
      000444 CC                    1228 	.db #0xcc	; 204
      000445 7C                    1229 	.db #0x7c	; 124
      000446 0C                    1230 	.db #0x0c	; 12
      000447 F8                    1231 	.db #0xf8	; 248
      000448 00                    1232 	.db #0x00	; 0
      000449 00                    1233 	.db #0x00	; 0
      00044A FC                    1234 	.db #0xfc	; 252
      00044B 98                    1235 	.db #0x98	; 152
      00044C 30                    1236 	.db #0x30	; 48	'0'
      00044D 64                    1237 	.db #0x64	; 100	'd'
      00044E FC                    1238 	.db #0xfc	; 252
      00044F 00                    1239 	.db #0x00	; 0
      000450 1C                    1240 	.db #0x1c	; 28
      000451 30                    1241 	.db #0x30	; 48	'0'
      000452 30                    1242 	.db #0x30	; 48	'0'
      000453 E0                    1243 	.db #0xe0	; 224
      000454 30                    1244 	.db #0x30	; 48	'0'
      000455 30                    1245 	.db #0x30	; 48	'0'
      000456 1C                    1246 	.db #0x1c	; 28
      000457 00                    1247 	.db #0x00	; 0
      000458 18                    1248 	.db #0x18	; 24
      000459 18                    1249 	.db #0x18	; 24
      00045A 18                    1250 	.db #0x18	; 24
      00045B 00                    1251 	.db #0x00	; 0
      00045C 18                    1252 	.db #0x18	; 24
      00045D 18                    1253 	.db #0x18	; 24
      00045E 18                    1254 	.db #0x18	; 24
      00045F 00                    1255 	.db #0x00	; 0
      000460 E0                    1256 	.db #0xe0	; 224
      000461 30                    1257 	.db #0x30	; 48	'0'
      000462 30                    1258 	.db #0x30	; 48	'0'
      000463 1C                    1259 	.db #0x1c	; 28
      000464 30                    1260 	.db #0x30	; 48	'0'
      000465 30                    1261 	.db #0x30	; 48	'0'
      000466 E0                    1262 	.db #0xe0	; 224
      000467 00                    1263 	.db #0x00	; 0
      000468 76                    1264 	.db #0x76	; 118	'v'
      000469 DC                    1265 	.db #0xdc	; 220
      00046A 00                    1266 	.db #0x00	; 0
      00046B 00                    1267 	.db #0x00	; 0
      00046C 00                    1268 	.db #0x00	; 0
      00046D 00                    1269 	.db #0x00	; 0
      00046E 00                    1270 	.db #0x00	; 0
      00046F 00                    1271 	.db #0x00	; 0
      000470 00                    1272 	.db #0x00	; 0
      000471 10                    1273 	.db #0x10	; 16
      000472 38                    1274 	.db #0x38	; 56	'8'
      000473 6C                    1275 	.db #0x6c	; 108	'l'
      000474 C6                    1276 	.db #0xc6	; 198
      000475 C6                    1277 	.db #0xc6	; 198
      000476 FE                    1278 	.db #0xfe	; 254
      000477 00                    1279 	.db #0x00	; 0
      000478                       1280 _pattern_black_0:
      000478 FF                    1281 	.db #0xff	; 255
      000479 FF                    1282 	.db #0xff	; 255
      00047A FF                    1283 	.db #0xff	; 255
      00047B FF                    1284 	.db #0xff	; 255
      00047C FF                    1285 	.db #0xff	; 255
      00047D FF                    1286 	.db #0xff	; 255
      00047E FF                    1287 	.db #0xff	; 255
      00047F FF                    1288 	.db #0xff	; 255
      000480                       1289 _pattern_black_1:
      000480 FE                    1290 	.db #0xfe	; 254
      000481 FF                    1291 	.db #0xff	; 255
      000482 FF                    1292 	.db #0xff	; 255
      000483 FF                    1293 	.db #0xff	; 255
      000484 FE                    1294 	.db #0xfe	; 254
      000485 FF                    1295 	.db #0xff	; 255
      000486 FF                    1296 	.db #0xff	; 255
      000487 FE                    1297 	.db #0xfe	; 254
      000488                       1298 _pattern_black_2:
      000488 FF                    1299 	.db #0xff	; 255
      000489 FF                    1300 	.db #0xff	; 255
      00048A FF                    1301 	.db #0xff	; 255
      00048B FF                    1302 	.db #0xff	; 255
      00048C FF                    1303 	.db #0xff	; 255
      00048D FB                    1304 	.db #0xfb	; 251
      00048E FF                    1305 	.db #0xff	; 255
      00048F BB                    1306 	.db #0xbb	; 187
      000490                       1307 _pattern_black_3:
      000490 FB                    1308 	.db #0xfb	; 251
      000491 FE                    1309 	.db #0xfe	; 254
      000492 FD                    1310 	.db #0xfd	; 253
      000493 FE                    1311 	.db #0xfe	; 254
      000494 F7                    1312 	.db #0xf7	; 247
      000495 FA                    1313 	.db #0xfa	; 250
      000496 AF                    1314 	.db #0xaf	; 175
      000497 55                    1315 	.db #0x55	; 85	'U'
      000498                       1316 _pattern_0:
      000498 9F                    1317 	.db #0x9f	; 159
      000499 90                    1318 	.db #0x90	; 144
      00049A 90                    1319 	.db #0x90	; 144
      00049B 93                    1320 	.db #0x93	; 147
      00049C 92                    1321 	.db #0x92	; 146
      00049D 92                    1322 	.db #0x92	; 146
      00049E 92                    1323 	.db #0x92	; 146
      00049F 92                    1324 	.db #0x92	; 146
      0004A0                       1325 _pattern_1:
      0004A0 FF                    1326 	.db #0xff	; 255
      0004A1 01                    1327 	.db #0x01	; 1
      0004A2 01                    1328 	.db #0x01	; 1
      0004A3 F9                    1329 	.db #0xf9	; 249
      0004A4 09                    1330 	.db #0x09	; 9
      0004A5 09                    1331 	.db #0x09	; 9
      0004A6 49                    1332 	.db #0x49	; 73	'I'
      0004A7 49                    1333 	.db #0x49	; 73	'I'
      0004A8                       1334 _pattern_2:
      0004A8 92                    1335 	.db #0x92	; 146
      0004A9 93                    1336 	.db #0x93	; 147
      0004AA 90                    1337 	.db #0x90	; 144
      0004AB 90                    1338 	.db #0x90	; 144
      0004AC 9F                    1339 	.db #0x9f	; 159
      0004AD 80                    1340 	.db #0x80	; 128
      0004AE 80                    1341 	.db #0x80	; 128
      0004AF FF                    1342 	.db #0xff	; 255
      0004B0                       1343 _pattern_3:
      0004B0 49                    1344 	.db #0x49	; 73	'I'
      0004B1 C9                    1345 	.db #0xc9	; 201
      0004B2 09                    1346 	.db #0x09	; 9
      0004B3 09                    1347 	.db #0x09	; 9
      0004B4 F9                    1348 	.db #0xf9	; 249
      0004B5 01                    1349 	.db #0x01	; 1
      0004B6 01                    1350 	.db #0x01	; 1
      0004B7 FF                    1351 	.db #0xff	; 255
      0004B8                       1352 _pattern_4:
      0004B8 7F                    1353 	.db #0x7f	; 127
      0004B9 81                    1354 	.db #0x81	; 129
      0004BA 83                    1355 	.db #0x83	; 131
      0004BB 87                    1356 	.db #0x87	; 135
      0004BC 8F                    1357 	.db #0x8f	; 143
      0004BD 9F                    1358 	.db #0x9f	; 159
      0004BE BF                    1359 	.db #0xbf	; 191
      0004BF FF                    1360 	.db #0xff	; 255
      0004C0                       1361 _pattern_5:
      0004C0 FE                    1362 	.db #0xfe	; 254
      0004C1 81                    1363 	.db #0x81	; 129
      0004C2 C1                    1364 	.db #0xc1	; 193
      0004C3 E1                    1365 	.db #0xe1	; 225
      0004C4 F1                    1366 	.db #0xf1	; 241
      0004C5 F9                    1367 	.db #0xf9	; 249
      0004C6 FD                    1368 	.db #0xfd	; 253
      0004C7 FF                    1369 	.db #0xff	; 255
      0004C8                       1370 _pattern_6:
      0004C8 FF                    1371 	.db #0xff	; 255
      0004C9 BF                    1372 	.db #0xbf	; 191
      0004CA 9F                    1373 	.db #0x9f	; 159
      0004CB 8F                    1374 	.db #0x8f	; 143
      0004CC 87                    1375 	.db #0x87	; 135
      0004CD 83                    1376 	.db #0x83	; 131
      0004CE 81                    1377 	.db #0x81	; 129
      0004CF 7F                    1378 	.db #0x7f	; 127
      0004D0                       1379 _pattern_7:
      0004D0 FF                    1380 	.db #0xff	; 255
      0004D1 FD                    1381 	.db #0xfd	; 253
      0004D2 F9                    1382 	.db #0xf9	; 249
      0004D3 F1                    1383 	.db #0xf1	; 241
      0004D4 E1                    1384 	.db #0xe1	; 225
      0004D5 C1                    1385 	.db #0xc1	; 193
      0004D6 81                    1386 	.db #0x81	; 129
      0004D7 FE                    1387 	.db #0xfe	; 254
      0004D8                       1388 _pattern_8:
      0004D8 7F                    1389 	.db #0x7f	; 127
      0004D9 AE                    1390 	.db #0xae	; 174
      0004DA FF                    1391 	.db #0xff	; 255
      0004DB 5B                    1392 	.db #0x5b	; 91
      0004DC FF                    1393 	.db #0xff	; 255
      0004DD AE                    1394 	.db #0xae	; 174
      0004DE FF                    1395 	.db #0xff	; 255
      0004DF DF                    1396 	.db #0xdf	; 223
      0004E0                       1397 _pattern_9:
      0004E0 FE                    1398 	.db #0xfe	; 254
      0004E1 BD                    1399 	.db #0xbd	; 189
      0004E2 DF                    1400 	.db #0xdf	; 223
      0004E3 7F                    1401 	.db #0x7f	; 127
      0004E4 FB                    1402 	.db #0xfb	; 251
      0004E5 DF                    1403 	.db #0xdf	; 223
      0004E6 FE                    1404 	.db #0xfe	; 254
      0004E7 EF                    1405 	.db #0xef	; 239
      0004E8                       1406 _pattern_10:
      0004E8 7F                    1407 	.db #0x7f	; 127
      0004E9 FF                    1408 	.db #0xff	; 255
      0004EA ED                    1409 	.db #0xed	; 237
      0004EB FF                    1410 	.db #0xff	; 255
      0004EC B6                    1411 	.db #0xb6	; 182
      0004ED FE                    1412 	.db #0xfe	; 254
      0004EE DB                    1413 	.db #0xdb	; 219
      0004EF 7D                    1414 	.db #0x7d	; 125
      0004F0                       1415 _pattern_11:
      0004F0 FE                    1416 	.db #0xfe	; 254
      0004F1 FF                    1417 	.db #0xff	; 255
      0004F2 FE                    1418 	.db #0xfe	; 254
      0004F3 77                    1419 	.db #0x77	; 119	'w'
      0004F4 FE                    1420 	.db #0xfe	; 254
      0004F5 DD                    1421 	.db #0xdd	; 221
      0004F6 EF                    1422 	.db #0xef	; 239
      0004F7 5A                    1423 	.db #0x5a	; 90	'Z'
      0004F8                       1424 _pattern_12:
      0004F8 7F                    1425 	.db #0x7f	; 127
      0004F9 D5                    1426 	.db #0xd5	; 213
      0004FA BF                    1427 	.db #0xbf	; 191
      0004FB ED                    1428 	.db #0xed	; 237
      0004FC BF                    1429 	.db #0xbf	; 191
      0004FD F5                    1430 	.db #0xf5	; 245
      0004FE BF                    1431 	.db #0xbf	; 191
      0004FF FF                    1432 	.db #0xff	; 255
      000500                       1433 _pattern_13:
      000500 FE                    1434 	.db #0xfe	; 254
      000501 5F                    1435 	.db #0x5f	; 95
      000502 F5                    1436 	.db #0xf5	; 245
      000503 DF                    1437 	.db #0xdf	; 223
      000504 FF                    1438 	.db #0xff	; 255
      000505 FF                    1439 	.db #0xff	; 255
      000506 FF                    1440 	.db #0xff	; 255
      000507 FF                    1441 	.db #0xff	; 255
      000508                       1442 _pattern_14:
      000508 EF                    1443 	.db #0xef	; 239
      000509 BF                    1444 	.db #0xbf	; 191
      00050A 7F                    1445 	.db #0x7f	; 127
      00050B FF                    1446 	.db #0xff	; 255
      00050C FF                    1447 	.db #0xff	; 255
      00050D FF                    1448 	.db #0xff	; 255
      00050E DB                    1449 	.db #0xdb	; 219
      00050F 7F                    1450 	.db #0x7f	; 127
      000510                       1451 _pattern_15:
      000510 FF                    1452 	.db #0xff	; 255
      000511 FD                    1453 	.db #0xfd	; 253
      000512 FF                    1454 	.db #0xff	; 255
      000513 DB                    1455 	.db #0xdb	; 219
      000514 FD                    1456 	.db #0xfd	; 253
      000515 7B                    1457 	.db #0x7b	; 123
      000516 D7                    1458 	.db #0xd7	; 215
      000517 FE                    1459 	.db #0xfe	; 254
      000518                       1460 _pattern_16:
      000518 7F                    1461 	.db #0x7f	; 127
      000519 FF                    1462 	.db #0xff	; 255
      00051A EA                    1463 	.db #0xea	; 234
      00051B DF                    1464 	.db #0xdf	; 223
      00051C FF                    1465 	.db #0xff	; 255
      00051D DF                    1466 	.db #0xdf	; 223
      00051E FF                    1467 	.db #0xff	; 255
      00051F DF                    1468 	.db #0xdf	; 223
      000520                       1469 _pattern_17:
      000520 FE                    1470 	.db #0xfe	; 254
      000521 FF                    1471 	.db #0xff	; 255
      000522 AF                    1472 	.db #0xaf	; 175
      000523 FA                    1473 	.db #0xfa	; 250
      000524 FF                    1474 	.db #0xff	; 255
      000525 FA                    1475 	.db #0xfa	; 250
      000526 FF                    1476 	.db #0xff	; 255
      000527 FA                    1477 	.db #0xfa	; 250
      000528                       1478 _pattern_18:
      000528 FF                    1479 	.db #0xff	; 255
      000529 DF                    1480 	.db #0xdf	; 223
      00052A FF                    1481 	.db #0xff	; 255
      00052B DF                    1482 	.db #0xdf	; 223
      00052C FF                    1483 	.db #0xff	; 255
      00052D EA                    1484 	.db #0xea	; 234
      00052E FF                    1485 	.db #0xff	; 255
      00052F 55                    1486 	.db #0x55	; 85	'U'
      000530                       1487 _pattern_19:
      000530 FF                    1488 	.db #0xff	; 255
      000531 FA                    1489 	.db #0xfa	; 250
      000532 FF                    1490 	.db #0xff	; 255
      000533 FA                    1491 	.db #0xfa	; 250
      000534 F7                    1492 	.db #0xf7	; 247
      000535 AA                    1493 	.db #0xaa	; 170
      000536 FF                    1494 	.db #0xff	; 255
      000537 56                    1495 	.db #0x56	; 86	'V'
      000538                       1496 _pattern_20:
      000538 3F                    1497 	.db #0x3f	; 63
      000539 7F                    1498 	.db #0x7f	; 127
      00053A E0                    1499 	.db #0xe0	; 224
      00053B CE                    1500 	.db #0xce	; 206
      00053C E6                    1501 	.db #0xe6	; 230
      00053D 7C                    1502 	.db #0x7c	; 124
      00053E 39                    1503 	.db #0x39	; 57	'9'
      00053F 03                    1504 	.db #0x03	; 3
      000540                       1505 _pattern_21:
      000540 FF                    1506 	.db #0xff	; 255
      000541 FF                    1507 	.db #0xff	; 255
      000542 00                    1508 	.db #0x00	; 0
      000543 DB                    1509 	.db #0xdb	; 219
      000544 DB                    1510 	.db #0xdb	; 219
      000545 00                    1511 	.db #0x00	; 0
      000546 FF                    1512 	.db #0xff	; 255
      000547 FF                    1513 	.db #0xff	; 255
      000548                       1514 _pattern_22:
      000548 FC                    1515 	.db #0xfc	; 252
      000549 FE                    1516 	.db #0xfe	; 254
      00054A 07                    1517 	.db #0x07	; 7
      00054B 73                    1518 	.db #0x73	; 115	's'
      00054C 67                    1519 	.db #0x67	; 103	'g'
      00054D 3E                    1520 	.db #0x3e	; 62
      00054E 9C                    1521 	.db #0x9c	; 156
      00054F C0                    1522 	.db #0xc0	; 192
      000550                       1523 _pattern_23:
      000550 06                    1524 	.db #0x06	; 6
      000551 00                    1525 	.db #0x00	; 0
      000552 03                    1526 	.db #0x03	; 3
      000553 04                    1527 	.db #0x04	; 4
      000554 05                    1528 	.db #0x05	; 5
      000555 05                    1529 	.db #0x05	; 5
      000556 05                    1530 	.db #0x05	; 5
      000557 05                    1531 	.db #0x05	; 5
      000558                       1532 _pattern_24:
      000558 00                    1533 	.db #0x00	; 0
      000559 00                    1534 	.db #0x00	; 0
      00055A 33                    1535 	.db #0x33	; 51	'3'
      00055B 44                    1536 	.db #0x44	; 68	'D'
      00055C 55                    1537 	.db #0x55	; 85	'U'
      00055D 55                    1538 	.db #0x55	; 85	'U'
      00055E 55                    1539 	.db #0x55	; 85	'U'
      00055F 55                    1540 	.db #0x55	; 85	'U'
      000560                       1541 _pattern_25:
      000560 60                    1542 	.db #0x60	; 96
      000561 00                    1543 	.db #0x00	; 0
      000562 40                    1544 	.db #0x40	; 64
      000563 20                    1545 	.db #0x20	; 32
      000564 20                    1546 	.db #0x20	; 32
      000565 20                    1547 	.db #0x20	; 32
      000566 20                    1548 	.db #0x20	; 32
      000567 20                    1549 	.db #0x20	; 32
      000568                       1550 _pattern_26:
      000568 05                    1551 	.db #0x05	; 5
      000569 05                    1552 	.db #0x05	; 5
      00056A 05                    1553 	.db #0x05	; 5
      00056B 05                    1554 	.db #0x05	; 5
      00056C 05                    1555 	.db #0x05	; 5
      00056D 05                    1556 	.db #0x05	; 5
      00056E 05                    1557 	.db #0x05	; 5
      00056F 05                    1558 	.db #0x05	; 5
      000570                       1559 _pattern_27:
      000570 55                    1560 	.db #0x55	; 85	'U'
      000571 55                    1561 	.db #0x55	; 85	'U'
      000572 55                    1562 	.db #0x55	; 85	'U'
      000573 55                    1563 	.db #0x55	; 85	'U'
      000574 55                    1564 	.db #0x55	; 85	'U'
      000575 55                    1565 	.db #0x55	; 85	'U'
      000576 55                    1566 	.db #0x55	; 85	'U'
      000577 55                    1567 	.db #0x55	; 85	'U'
      000578                       1568 _pattern_28:
      000578 20                    1569 	.db #0x20	; 32
      000579 20                    1570 	.db #0x20	; 32
      00057A 20                    1571 	.db #0x20	; 32
      00057B 20                    1572 	.db #0x20	; 32
      00057C 20                    1573 	.db #0x20	; 32
      00057D 20                    1574 	.db #0x20	; 32
      00057E 20                    1575 	.db #0x20	; 32
      00057F 20                    1576 	.db #0x20	; 32
      000580                       1577 _pattern_29:
      000580 05                    1578 	.db #0x05	; 5
      000581 05                    1579 	.db #0x05	; 5
      000582 07                    1580 	.db #0x07	; 7
      000583 07                    1581 	.db #0x07	; 7
      000584 07                    1582 	.db #0x07	; 7
      000585 05                    1583 	.db #0x05	; 5
      000586 05                    1584 	.db #0x05	; 5
      000587 05                    1585 	.db #0x05	; 5
      000588                       1586 _pattern_30:
      000588 55                    1587 	.db #0x55	; 85	'U'
      000589 55                    1588 	.db #0x55	; 85	'U'
      00058A FF                    1589 	.db #0xff	; 255
      00058B FF                    1590 	.db #0xff	; 255
      00058C FF                    1591 	.db #0xff	; 255
      00058D 55                    1592 	.db #0x55	; 85	'U'
      00058E 55                    1593 	.db #0x55	; 85	'U'
      00058F 55                    1594 	.db #0x55	; 85	'U'
      000590                       1595 _pattern_31:
      000590 20                    1596 	.db #0x20	; 32
      000591 20                    1597 	.db #0x20	; 32
      000592 E0                    1598 	.db #0xe0	; 224
      000593 E0                    1599 	.db #0xe0	; 224
      000594 E0                    1600 	.db #0xe0	; 224
      000595 20                    1601 	.db #0x20	; 32
      000596 20                    1602 	.db #0x20	; 32
      000597 20                    1603 	.db #0x20	; 32
      000598                       1604 _pattern_37:
      000598 05                    1605 	.db #0x05	; 5
      000599 05                    1606 	.db #0x05	; 5
      00059A 05                    1607 	.db #0x05	; 5
      00059B 05                    1608 	.db #0x05	; 5
      00059C 04                    1609 	.db #0x04	; 4
      00059D 03                    1610 	.db #0x03	; 3
      00059E 00                    1611 	.db #0x00	; 0
      00059F 06                    1612 	.db #0x06	; 6
      0005A0                       1613 _pattern_38:
      0005A0 55                    1614 	.db #0x55	; 85	'U'
      0005A1 55                    1615 	.db #0x55	; 85	'U'
      0005A2 55                    1616 	.db #0x55	; 85	'U'
      0005A3 55                    1617 	.db #0x55	; 85	'U'
      0005A4 44                    1618 	.db #0x44	; 68	'D'
      0005A5 33                    1619 	.db #0x33	; 51	'3'
      0005A6 00                    1620 	.db #0x00	; 0
      0005A7 00                    1621 	.db #0x00	; 0
      0005A8                       1622 _pattern_39:
      0005A8 20                    1623 	.db #0x20	; 32
      0005A9 20                    1624 	.db #0x20	; 32
      0005AA 20                    1625 	.db #0x20	; 32
      0005AB 20                    1626 	.db #0x20	; 32
      0005AC 20                    1627 	.db #0x20	; 32
      0005AD 40                    1628 	.db #0x40	; 64
      0005AE 00                    1629 	.db #0x00	; 0
      0005AF 60                    1630 	.db #0x60	; 96
      0005B0                       1631 _pattern_32:
      0005B0 03                    1632 	.db #0x03	; 3
      0005B1 39                    1633 	.db #0x39	; 57	'9'
      0005B2 7C                    1634 	.db #0x7c	; 124
      0005B3 E6                    1635 	.db #0xe6	; 230
      0005B4 CE                    1636 	.db #0xce	; 206
      0005B5 E0                    1637 	.db #0xe0	; 224
      0005B6 7F                    1638 	.db #0x7f	; 127
      0005B7 3F                    1639 	.db #0x3f	; 63
      0005B8                       1640 _pattern_33:
      0005B8 FF                    1641 	.db #0xff	; 255
      0005B9 FF                    1642 	.db #0xff	; 255
      0005BA 00                    1643 	.db #0x00	; 0
      0005BB DB                    1644 	.db #0xdb	; 219
      0005BC DB                    1645 	.db #0xdb	; 219
      0005BD 00                    1646 	.db #0x00	; 0
      0005BE FF                    1647 	.db #0xff	; 255
      0005BF FF                    1648 	.db #0xff	; 255
      0005C0                       1649 _pattern_34:
      0005C0 C0                    1650 	.db #0xc0	; 192
      0005C1 9C                    1651 	.db #0x9c	; 156
      0005C2 3E                    1652 	.db #0x3e	; 62
      0005C3 67                    1653 	.db #0x67	; 103	'g'
      0005C4 73                    1654 	.db #0x73	; 115	's'
      0005C5 07                    1655 	.db #0x07	; 7
      0005C6 FE                    1656 	.db #0xfe	; 254
      0005C7 FC                    1657 	.db #0xfc	; 252
      0005C8                       1658 _sprite_dust_0:
      0005C8 10                    1659 	.db #0x10	; 16
      0005C9 42                    1660 	.db #0x42	; 66	'B'
      0005CA 10                    1661 	.db #0x10	; 16
      0005CB 45                    1662 	.db #0x45	; 69	'E'
      0005CC 20                    1663 	.db #0x20	; 32
      0005CD 89                    1664 	.db #0x89	; 137
      0005CE 20                    1665 	.db #0x20	; 32
      0005CF 88                    1666 	.db #0x88	; 136
      0005D0                       1667 _sprite_dust_1:
      0005D0 10                    1668 	.db #0x10	; 16
      0005D1 42                    1669 	.db #0x42	; 66	'B'
      0005D2 00                    1670 	.db #0x00	; 0
      0005D3 04                    1671 	.db #0x04	; 4
      0005D4 20                    1672 	.db #0x20	; 32
      0005D5 81                    1673 	.db #0x81	; 129
      0005D6 20                    1674 	.db #0x20	; 32
      0005D7 08                    1675 	.db #0x08	; 8
      0005D8                       1676 _sprite_dust_2:
      0005D8 10                    1677 	.db #0x10	; 16
      0005D9 00                    1678 	.db #0x00	; 0
      0005DA 00                    1679 	.db #0x00	; 0
      0005DB 04                    1680 	.db #0x04	; 4
      0005DC 20                    1681 	.db #0x20	; 32
      0005DD 80                    1682 	.db #0x80	; 128
      0005DE 20                    1683 	.db #0x20	; 32
      0005DF 00                    1684 	.db #0x00	; 0
      0005E0                       1685 _sprite_dust_3:
      0005E0 10                    1686 	.db #0x10	; 16
      0005E1 00                    1687 	.db #0x00	; 0
      0005E2 00                    1688 	.db #0x00	; 0
      0005E3 04                    1689 	.db #0x04	; 4
      0005E4 00                    1690 	.db #0x00	; 0
      0005E5 00                    1691 	.db #0x00	; 0
      0005E6 20                    1692 	.db #0x20	; 32
      0005E7 00                    1693 	.db #0x00	; 0
      0005E8                       1694 _pattern_title:
      0005E8 FE                    1695 	.db #0xfe	; 254
      0005E9 FE                    1696 	.db #0xfe	; 254
      0005EA FE                    1697 	.db #0xfe	; 254
      0005EB FE                    1698 	.db #0xfe	; 254
      0005EC FE                    1699 	.db #0xfe	; 254
      0005ED FE                    1700 	.db #0xfe	; 254
      0005EE FE                    1701 	.db #0xfe	; 254
      0005EF 00                    1702 	.db #0x00	; 0
      0005F0                       1703 _color_black_0:
      0005F0 14                    1704 	.db #0x14	; 20
      0005F1 14                    1705 	.db #0x14	; 20
      0005F2 14                    1706 	.db #0x14	; 20
      0005F3 14                    1707 	.db #0x14	; 20
      0005F4 14                    1708 	.db #0x14	; 20
      0005F5 14                    1709 	.db #0x14	; 20
      0005F6 14                    1710 	.db #0x14	; 20
      0005F7 14                    1711 	.db #0x14	; 20
      0005F8                       1712 _color_black_1:
      0005F8 14                    1713 	.db #0x14	; 20
      0005F9 14                    1714 	.db #0x14	; 20
      0005FA 14                    1715 	.db #0x14	; 20
      0005FB 14                    1716 	.db #0x14	; 20
      0005FC 14                    1717 	.db #0x14	; 20
      0005FD 14                    1718 	.db #0x14	; 20
      0005FE 14                    1719 	.db #0x14	; 20
      0005FF 14                    1720 	.db #0x14	; 20
      000600                       1721 _color_black_2:
      000600 14                    1722 	.db #0x14	; 20
      000601 14                    1723 	.db #0x14	; 20
      000602 14                    1724 	.db #0x14	; 20
      000603 14                    1725 	.db #0x14	; 20
      000604 14                    1726 	.db #0x14	; 20
      000605 14                    1727 	.db #0x14	; 20
      000606 14                    1728 	.db #0x14	; 20
      000607 14                    1729 	.db #0x14	; 20
      000608                       1730 _color_black_3:
      000608 14                    1731 	.db #0x14	; 20
      000609 14                    1732 	.db #0x14	; 20
      00060A 14                    1733 	.db #0x14	; 20
      00060B 14                    1734 	.db #0x14	; 20
      00060C 14                    1735 	.db #0x14	; 20
      00060D 14                    1736 	.db #0x14	; 20
      00060E 14                    1737 	.db #0x14	; 20
      00060F 14                    1738 	.db #0x14	; 20
      000610                       1739 _color_0:
      000610 13                    1740 	.db #0x13	; 19
      000611 13                    1741 	.db #0x13	; 19
      000612 13                    1742 	.db #0x13	; 19
      000613 13                    1743 	.db #0x13	; 19
      000614 13                    1744 	.db #0x13	; 19
      000615 13                    1745 	.db #0x13	; 19
      000616 13                    1746 	.db #0x13	; 19
      000617 13                    1747 	.db #0x13	; 19
      000618                       1748 _color_1:
      000618 12                    1749 	.db #0x12	; 18
      000619 12                    1750 	.db #0x12	; 18
      00061A 12                    1751 	.db #0x12	; 18
      00061B 12                    1752 	.db #0x12	; 18
      00061C 12                    1753 	.db #0x12	; 18
      00061D 12                    1754 	.db #0x12	; 18
      00061E 12                    1755 	.db #0x12	; 18
      00061F 12                    1756 	.db #0x12	; 18
      000620                       1757 _color_2:
      000620 12                    1758 	.db #0x12	; 18
      000621 12                    1759 	.db #0x12	; 18
      000622 12                    1760 	.db #0x12	; 18
      000623 12                    1761 	.db #0x12	; 18
      000624 12                    1762 	.db #0x12	; 18
      000625 12                    1763 	.db #0x12	; 18
      000626 12                    1764 	.db #0x12	; 18
      000627 12                    1765 	.db #0x12	; 18
      000628                       1766 _color_3:
      000628 1C                    1767 	.db #0x1c	; 28
      000629 1C                    1768 	.db #0x1c	; 28
      00062A 1C                    1769 	.db #0x1c	; 28
      00062B 1C                    1770 	.db #0x1c	; 28
      00062C 1C                    1771 	.db #0x1c	; 28
      00062D 1C                    1772 	.db #0x1c	; 28
      00062E 1C                    1773 	.db #0x1c	; 28
      00062F 1C                    1774 	.db #0x1c	; 28
      000630                       1775 _color_4:
      000630 96                    1776 	.db #0x96	; 150
      000631 96                    1777 	.db #0x96	; 150
      000632 96                    1778 	.db #0x96	; 150
      000633 96                    1779 	.db #0x96	; 150
      000634 96                    1780 	.db #0x96	; 150
      000635 96                    1781 	.db #0x96	; 150
      000636 96                    1782 	.db #0x96	; 150
      000637 96                    1783 	.db #0x96	; 150
      000638                       1784 _color_5:
      000638 98                    1785 	.db #0x98	; 152
      000639 68                    1786 	.db #0x68	; 104	'h'
      00063A 68                    1787 	.db #0x68	; 104	'h'
      00063B 68                    1788 	.db #0x68	; 104	'h'
      00063C 68                    1789 	.db #0x68	; 104	'h'
      00063D 68                    1790 	.db #0x68	; 104	'h'
      00063E 68                    1791 	.db #0x68	; 104	'h'
      00063F 68                    1792 	.db #0x68	; 104	'h'
      000640                       1793 _color_6:
      000640 68                    1794 	.db #0x68	; 104	'h'
      000641 68                    1795 	.db #0x68	; 104	'h'
      000642 68                    1796 	.db #0x68	; 104	'h'
      000643 68                    1797 	.db #0x68	; 104	'h'
      000644 68                    1798 	.db #0x68	; 104	'h'
      000645 68                    1799 	.db #0x68	; 104	'h'
      000646 68                    1800 	.db #0x68	; 104	'h'
      000647 68                    1801 	.db #0x68	; 104	'h'
      000648                       1802 _color_7:
      000648 89                    1803 	.db #0x89	; 137
      000649 89                    1804 	.db #0x89	; 137
      00064A 89                    1805 	.db #0x89	; 137
      00064B 89                    1806 	.db #0x89	; 137
      00064C 89                    1807 	.db #0x89	; 137
      00064D 89                    1808 	.db #0x89	; 137
      00064E 89                    1809 	.db #0x89	; 137
      00064F 86                    1810 	.db #0x86	; 134
      000650                       1811 _color_8:
      000650 41                    1812 	.db #0x41	; 65	'A'
      000651 47                    1813 	.db #0x47	; 71	'G'
      000652 47                    1814 	.db #0x47	; 71	'G'
      000653 47                    1815 	.db #0x47	; 71	'G'
      000654 47                    1816 	.db #0x47	; 71	'G'
      000655 47                    1817 	.db #0x47	; 71	'G'
      000656 47                    1818 	.db #0x47	; 71	'G'
      000657 47                    1819 	.db #0x47	; 71	'G'
      000658                       1820 _color_9:
      000658 41                    1821 	.db #0x41	; 65	'A'
      000659 45                    1822 	.db #0x45	; 69	'E'
      00065A 47                    1823 	.db #0x47	; 71	'G'
      00065B 47                    1824 	.db #0x47	; 71	'G'
      00065C 45                    1825 	.db #0x45	; 69	'E'
      00065D 45                    1826 	.db #0x45	; 69	'E'
      00065E 41                    1827 	.db #0x41	; 65	'A'
      00065F 45                    1828 	.db #0x45	; 69	'E'
      000660                       1829 _color_10:
      000660 47                    1830 	.db #0x47	; 71	'G'
      000661 45                    1831 	.db #0x45	; 69	'E'
      000662 45                    1832 	.db #0x45	; 69	'E'
      000663 45                    1833 	.db #0x45	; 69	'E'
      000664 45                    1834 	.db #0x45	; 69	'E'
      000665 41                    1835 	.db #0x41	; 65	'A'
      000666 45                    1836 	.db #0x45	; 69	'E'
      000667 41                    1837 	.db #0x41	; 65	'A'
      000668                       1838 _color_11:
      000668 41                    1839 	.db #0x41	; 65	'A'
      000669 41                    1840 	.db #0x41	; 65	'A'
      00066A 41                    1841 	.db #0x41	; 65	'A'
      00066B 41                    1842 	.db #0x41	; 65	'A'
      00066C 41                    1843 	.db #0x41	; 65	'A'
      00066D 41                    1844 	.db #0x41	; 65	'A'
      00066E 41                    1845 	.db #0x41	; 65	'A'
      00066F 41                    1846 	.db #0x41	; 65	'A'
      000670                       1847 _color_12:
      000670 D1                    1848 	.db #0xd1	; 209
      000671 DF                    1849 	.db #0xdf	; 223
      000672 DF                    1850 	.db #0xdf	; 223
      000673 DF                    1851 	.db #0xdf	; 223
      000674 DF                    1852 	.db #0xdf	; 223
      000675 DF                    1853 	.db #0xdf	; 223
      000676 DF                    1854 	.db #0xdf	; 223
      000677 DF                    1855 	.db #0xdf	; 223
      000678                       1856 _color_13:
      000678 D1                    1857 	.db #0xd1	; 209
      000679 DF                    1858 	.db #0xdf	; 223
      00067A DF                    1859 	.db #0xdf	; 223
      00067B DF                    1860 	.db #0xdf	; 223
      00067C DF                    1861 	.db #0xdf	; 223
      00067D DF                    1862 	.db #0xdf	; 223
      00067E DF                    1863 	.db #0xdf	; 223
      00067F DF                    1864 	.db #0xdf	; 223
      000680                       1865 _color_14:
      000680 DF                    1866 	.db #0xdf	; 223
      000681 DF                    1867 	.db #0xdf	; 223
      000682 DF                    1868 	.db #0xdf	; 223
      000683 D1                    1869 	.db #0xd1	; 209
      000684 D1                    1870 	.db #0xd1	; 209
      000685 D1                    1871 	.db #0xd1	; 209
      000686 D1                    1872 	.db #0xd1	; 209
      000687 D1                    1873 	.db #0xd1	; 209
      000688                       1874 _color_15:
      000688 D1                    1875 	.db #0xd1	; 209
      000689 D1                    1876 	.db #0xd1	; 209
      00068A D1                    1877 	.db #0xd1	; 209
      00068B D1                    1878 	.db #0xd1	; 209
      00068C D1                    1879 	.db #0xd1	; 209
      00068D D1                    1880 	.db #0xd1	; 209
      00068E D1                    1881 	.db #0xd1	; 209
      00068F D1                    1882 	.db #0xd1	; 209
      000690                       1883 _color_16:
      000690 A1                    1884 	.db #0xa1	; 161
      000691 BF                    1885 	.db #0xbf	; 191
      000692 BF                    1886 	.db #0xbf	; 191
      000693 BF                    1887 	.db #0xbf	; 191
      000694 BF                    1888 	.db #0xbf	; 191
      000695 BF                    1889 	.db #0xbf	; 191
      000696 BF                    1890 	.db #0xbf	; 191
      000697 BF                    1891 	.db #0xbf	; 191
      000698                       1892 _color_17:
      000698 A1                    1893 	.db #0xa1	; 161
      000699 AF                    1894 	.db #0xaf	; 175
      00069A AF                    1895 	.db #0xaf	; 175
      00069B A1                    1896 	.db #0xa1	; 161
      00069C A1                    1897 	.db #0xa1	; 161
      00069D A1                    1898 	.db #0xa1	; 161
      00069E A1                    1899 	.db #0xa1	; 161
      00069F A1                    1900 	.db #0xa1	; 161
      0006A0                       1901 _color_18:
      0006A0 AF                    1902 	.db #0xaf	; 175
      0006A1 AF                    1903 	.db #0xaf	; 175
      0006A2 AF                    1904 	.db #0xaf	; 175
      0006A3 AF                    1905 	.db #0xaf	; 175
      0006A4 A1                    1906 	.db #0xa1	; 161
      0006A5 A1                    1907 	.db #0xa1	; 161
      0006A6 A1                    1908 	.db #0xa1	; 161
      0006A7 A1                    1909 	.db #0xa1	; 161
      0006A8                       1910 _color_19:
      0006A8 B1                    1911 	.db #0xb1	; 177
      0006A9 B1                    1912 	.db #0xb1	; 177
      0006AA B1                    1913 	.db #0xb1	; 177
      0006AB B1                    1914 	.db #0xb1	; 177
      0006AC B1                    1915 	.db #0xb1	; 177
      0006AD B1                    1916 	.db #0xb1	; 177
      0006AE B1                    1917 	.db #0xb1	; 177
      0006AF B1                    1918 	.db #0xb1	; 177
      0006B0                       1919 _color_column_1:
      0006B0 F1                    1920 	.db #0xf1	; 241
      0006B1 E1                    1921 	.db #0xe1	; 225
      0006B2 E1                    1922 	.db #0xe1	; 225
      0006B3 E1                    1923 	.db #0xe1	; 225
      0006B4 E1                    1924 	.db #0xe1	; 225
      0006B5 E1                    1925 	.db #0xe1	; 225
      0006B6 E1                    1926 	.db #0xe1	; 225
      0006B7 E1                    1927 	.db #0xe1	; 225
      0006B8                       1928 _color_column_2:
      0006B8 F1                    1929 	.db #0xf1	; 241
      0006B9 E1                    1930 	.db #0xe1	; 225
      0006BA E1                    1931 	.db #0xe1	; 225
      0006BB E1                    1932 	.db #0xe1	; 225
      0006BC E1                    1933 	.db #0xe1	; 225
      0006BD E1                    1934 	.db #0xe1	; 225
      0006BE E1                    1935 	.db #0xe1	; 225
      0006BF E1                    1936 	.db #0xe1	; 225
      0006C0                       1937 _color_column_3:
      0006C0 F1                    1938 	.db #0xf1	; 241
      0006C1 E1                    1939 	.db #0xe1	; 225
      0006C2 E1                    1940 	.db #0xe1	; 225
      0006C3 E1                    1941 	.db #0xe1	; 225
      0006C4 E1                    1942 	.db #0xe1	; 225
      0006C5 E1                    1943 	.db #0xe1	; 225
      0006C6 E1                    1944 	.db #0xe1	; 225
      0006C7 E1                    1945 	.db #0xe1	; 225
      0006C8                       1946 _color_column_4:
      0006C8 F1                    1947 	.db #0xf1	; 241
      0006C9 F1                    1948 	.db #0xf1	; 241
      0006CA F1                    1949 	.db #0xf1	; 241
      0006CB F1                    1950 	.db #0xf1	; 241
      0006CC F1                    1951 	.db #0xf1	; 241
      0006CD F1                    1952 	.db #0xf1	; 241
      0006CE F1                    1953 	.db #0xf1	; 241
      0006CF F1                    1954 	.db #0xf1	; 241
      0006D0                       1955 _color_column_5:
      0006D0 E1                    1956 	.db #0xe1	; 225
      0006D1 E1                    1957 	.db #0xe1	; 225
      0006D2 E1                    1958 	.db #0xe1	; 225
      0006D3 E1                    1959 	.db #0xe1	; 225
      0006D4 E1                    1960 	.db #0xe1	; 225
      0006D5 E1                    1961 	.db #0xe1	; 225
      0006D6 E1                    1962 	.db #0xe1	; 225
      0006D7 E1                    1963 	.db #0xe1	; 225
      0006D8                       1964 _color_column_6:
      0006D8 E1                    1965 	.db #0xe1	; 225
      0006D9 E1                    1966 	.db #0xe1	; 225
      0006DA E1                    1967 	.db #0xe1	; 225
      0006DB 41                    1968 	.db #0x41	; 65	'A'
      0006DC 41                    1969 	.db #0x41	; 65	'A'
      0006DD 41                    1970 	.db #0x41	; 65	'A'
      0006DE 41                    1971 	.db #0x41	; 65	'A'
      0006DF 41                    1972 	.db #0x41	; 65	'A'
      0006E0                       1973 _color_column_7:
      0006E0 F1                    1974 	.db #0xf1	; 241
      0006E1 F1                    1975 	.db #0xf1	; 241
      0006E2 F1                    1976 	.db #0xf1	; 241
      0006E3 F1                    1977 	.db #0xf1	; 241
      0006E4 F1                    1978 	.db #0xf1	; 241
      0006E5 F1                    1979 	.db #0xf1	; 241
      0006E6 F1                    1980 	.db #0xf1	; 241
      0006E7 F1                    1981 	.db #0xf1	; 241
      0006E8                       1982 _color_column_8:
      0006E8 E1                    1983 	.db #0xe1	; 225
      0006E9 E1                    1984 	.db #0xe1	; 225
      0006EA E1                    1985 	.db #0xe1	; 225
      0006EB F1                    1986 	.db #0xf1	; 241
      0006EC E1                    1987 	.db #0xe1	; 225
      0006ED E1                    1988 	.db #0xe1	; 225
      0006EE E1                    1989 	.db #0xe1	; 225
      0006EF E1                    1990 	.db #0xe1	; 225
      0006F0                       1991 _color_column_9:
      0006F0 41                    1992 	.db #0x41	; 65	'A'
      0006F1 41                    1993 	.db #0x41	; 65	'A'
      0006F2 41                    1994 	.db #0x41	; 65	'A'
      0006F3 F1                    1995 	.db #0xf1	; 241
      0006F4 41                    1996 	.db #0x41	; 65	'A'
      0006F5 41                    1997 	.db #0x41	; 65	'A'
      0006F6 41                    1998 	.db #0x41	; 65	'A'
      0006F7 41                    1999 	.db #0x41	; 65	'A'
      0006F8                       2000 _color_column_10:
      0006F8 F1                    2001 	.db #0xf1	; 241
      0006F9 F1                    2002 	.db #0xf1	; 241
      0006FA F1                    2003 	.db #0xf1	; 241
      0006FB F1                    2004 	.db #0xf1	; 241
      0006FC F1                    2005 	.db #0xf1	; 241
      0006FD F1                    2006 	.db #0xf1	; 241
      0006FE F1                    2007 	.db #0xf1	; 241
      0006FF F1                    2008 	.db #0xf1	; 241
      000700                       2009 _color_column_11:
      000700 E1                    2010 	.db #0xe1	; 225
      000701 E1                    2011 	.db #0xe1	; 225
      000702 E1                    2012 	.db #0xe1	; 225
      000703 E1                    2013 	.db #0xe1	; 225
      000704 E1                    2014 	.db #0xe1	; 225
      000705 E1                    2015 	.db #0xe1	; 225
      000706 E1                    2016 	.db #0xe1	; 225
      000707 E1                    2017 	.db #0xe1	; 225
      000708                       2018 _color_column_12:
      000708 41                    2019 	.db #0x41	; 65	'A'
      000709 41                    2020 	.db #0x41	; 65	'A'
      00070A 41                    2021 	.db #0x41	; 65	'A'
      00070B 41                    2022 	.db #0x41	; 65	'A'
      00070C 41                    2023 	.db #0x41	; 65	'A'
      00070D 41                    2024 	.db #0x41	; 65	'A'
      00070E 41                    2025 	.db #0x41	; 65	'A'
      00070F 41                    2026 	.db #0x41	; 65	'A'
      000710                       2027 _color_column_16:
      000710 F1                    2028 	.db #0xf1	; 241
      000711 F1                    2029 	.db #0xf1	; 241
      000712 F1                    2030 	.db #0xf1	; 241
      000713 F1                    2031 	.db #0xf1	; 241
      000714 F1                    2032 	.db #0xf1	; 241
      000715 F1                    2033 	.db #0xf1	; 241
      000716 F1                    2034 	.db #0xf1	; 241
      000717 F1                    2035 	.db #0xf1	; 241
      000718                       2036 _color_column_17:
      000718 E1                    2037 	.db #0xe1	; 225
      000719 E1                    2038 	.db #0xe1	; 225
      00071A E1                    2039 	.db #0xe1	; 225
      00071B E1                    2040 	.db #0xe1	; 225
      00071C E1                    2041 	.db #0xe1	; 225
      00071D E1                    2042 	.db #0xe1	; 225
      00071E E1                    2043 	.db #0xe1	; 225
      00071F E1                    2044 	.db #0xe1	; 225
      000720                       2045 _color_column_18:
      000720 41                    2046 	.db #0x41	; 65	'A'
      000721 41                    2047 	.db #0x41	; 65	'A'
      000722 41                    2048 	.db #0x41	; 65	'A'
      000723 41                    2049 	.db #0x41	; 65	'A'
      000724 41                    2050 	.db #0x41	; 65	'A'
      000725 E1                    2051 	.db #0xe1	; 225
      000726 E1                    2052 	.db #0xe1	; 225
      000727 E1                    2053 	.db #0xe1	; 225
      000728                       2054 _color_column_13:
      000728 E1                    2055 	.db #0xe1	; 225
      000729 E1                    2056 	.db #0xe1	; 225
      00072A E1                    2057 	.db #0xe1	; 225
      00072B E1                    2058 	.db #0xe1	; 225
      00072C E1                    2059 	.db #0xe1	; 225
      00072D E1                    2060 	.db #0xe1	; 225
      00072E E1                    2061 	.db #0xe1	; 225
      00072F F1                    2062 	.db #0xf1	; 241
      000730                       2063 _color_column_14:
      000730 E1                    2064 	.db #0xe1	; 225
      000731 E1                    2065 	.db #0xe1	; 225
      000732 E1                    2066 	.db #0xe1	; 225
      000733 E1                    2067 	.db #0xe1	; 225
      000734 E1                    2068 	.db #0xe1	; 225
      000735 E1                    2069 	.db #0xe1	; 225
      000736 E1                    2070 	.db #0xe1	; 225
      000737 F1                    2071 	.db #0xf1	; 241
      000738                       2072 _color_column_15:
      000738 E1                    2073 	.db #0xe1	; 225
      000739 E1                    2074 	.db #0xe1	; 225
      00073A E1                    2075 	.db #0xe1	; 225
      00073B E1                    2076 	.db #0xe1	; 225
      00073C E1                    2077 	.db #0xe1	; 225
      00073D E1                    2078 	.db #0xe1	; 225
      00073E E1                    2079 	.db #0xe1	; 225
      00073F F1                    2080 	.db #0xf1	; 241
      000740                       2081 _color_dust_0:
      000740 F1                    2082 	.db #0xf1	; 241
      000741 F1                    2083 	.db #0xf1	; 241
      000742 F1                    2084 	.db #0xf1	; 241
      000743 F1                    2085 	.db #0xf1	; 241
      000744 F1                    2086 	.db #0xf1	; 241
      000745 F1                    2087 	.db #0xf1	; 241
      000746 F1                    2088 	.db #0xf1	; 241
      000747 F1                    2089 	.db #0xf1	; 241
      000748                       2090 _color_dust_1:
      000748 F1                    2091 	.db #0xf1	; 241
      000749 F1                    2092 	.db #0xf1	; 241
      00074A F1                    2093 	.db #0xf1	; 241
      00074B F1                    2094 	.db #0xf1	; 241
      00074C F1                    2095 	.db #0xf1	; 241
      00074D F1                    2096 	.db #0xf1	; 241
      00074E F1                    2097 	.db #0xf1	; 241
      00074F F1                    2098 	.db #0xf1	; 241
      000750                       2099 _color_dust_2:
      000750 F1                    2100 	.db #0xf1	; 241
      000751 F1                    2101 	.db #0xf1	; 241
      000752 F1                    2102 	.db #0xf1	; 241
      000753 F1                    2103 	.db #0xf1	; 241
      000754 F1                    2104 	.db #0xf1	; 241
      000755 F1                    2105 	.db #0xf1	; 241
      000756 F1                    2106 	.db #0xf1	; 241
      000757 F1                    2107 	.db #0xf1	; 241
      000758                       2108 _color_dust_3:
      000758 F1                    2109 	.db #0xf1	; 241
      000759 F1                    2110 	.db #0xf1	; 241
      00075A F1                    2111 	.db #0xf1	; 241
      00075B F1                    2112 	.db #0xf1	; 241
      00075C F1                    2113 	.db #0xf1	; 241
      00075D F1                    2114 	.db #0xf1	; 241
      00075E F1                    2115 	.db #0xf1	; 241
      00075F F1                    2116 	.db #0xf1	; 241
      000760                       2117 _color_font_1:
      000760 F1                    2118 	.db #0xf1	; 241
      000761 F1                    2119 	.db #0xf1	; 241
      000762 E1                    2120 	.db #0xe1	; 225
      000763 71                    2121 	.db #0x71	; 113	'q'
      000764 71                    2122 	.db #0x71	; 113	'q'
      000765 51                    2123 	.db #0x51	; 81	'Q'
      000766 51                    2124 	.db #0x51	; 81	'Q'
      000767 41                    2125 	.db #0x41	; 65	'A'
      000768                       2126 _color_font_2:
      000768 61                    2127 	.db #0x61	; 97	'a'
      000769 61                    2128 	.db #0x61	; 97	'a'
      00076A 81                    2129 	.db #0x81	; 129
      00076B 81                    2130 	.db #0x81	; 129
      00076C 91                    2131 	.db #0x91	; 145
      00076D 91                    2132 	.db #0x91	; 145
      00076E E1                    2133 	.db #0xe1	; 225
      00076F E1                    2134 	.db #0xe1	; 225
      000770                       2135 _color_title_1:
      000770 A1                    2136 	.db #0xa1	; 161
      000771 A1                    2137 	.db #0xa1	; 161
      000772 A1                    2138 	.db #0xa1	; 161
      000773 A1                    2139 	.db #0xa1	; 161
      000774 A1                    2140 	.db #0xa1	; 161
      000775 A1                    2141 	.db #0xa1	; 161
      000776 A1                    2142 	.db #0xa1	; 161
      000777 A1                    2143 	.db #0xa1	; 161
      000778                       2144 _color_title_2:
      000778 B1                    2145 	.db #0xb1	; 177
      000779 B1                    2146 	.db #0xb1	; 177
      00077A B1                    2147 	.db #0xb1	; 177
      00077B B1                    2148 	.db #0xb1	; 177
      00077C B1                    2149 	.db #0xb1	; 177
      00077D B1                    2150 	.db #0xb1	; 177
      00077E B1                    2151 	.db #0xb1	; 177
      00077F B1                    2152 	.db #0xb1	; 177
      000780                       2153 _color_title_3:
      000780 D1                    2154 	.db #0xd1	; 209
      000781 D1                    2155 	.db #0xd1	; 209
      000782 D1                    2156 	.db #0xd1	; 209
      000783 D1                    2157 	.db #0xd1	; 209
      000784 D1                    2158 	.db #0xd1	; 209
      000785 D1                    2159 	.db #0xd1	; 209
      000786 D1                    2160 	.db #0xd1	; 209
      000787 D1                    2161 	.db #0xd1	; 209
      000788                       2162 _color_title_4:
      000788 F1                    2163 	.db #0xf1	; 241
      000789 F1                    2164 	.db #0xf1	; 241
      00078A F1                    2165 	.db #0xf1	; 241
      00078B F1                    2166 	.db #0xf1	; 241
      00078C F1                    2167 	.db #0xf1	; 241
      00078D F1                    2168 	.db #0xf1	; 241
      00078E F1                    2169 	.db #0xf1	; 241
      00078F F1                    2170 	.db #0xf1	; 241
      000790                       2171 _color_title_5:
      000790 71                    2172 	.db #0x71	; 113	'q'
      000791 71                    2173 	.db #0x71	; 113	'q'
      000792 71                    2174 	.db #0x71	; 113	'q'
      000793 71                    2175 	.db #0x71	; 113	'q'
      000794 71                    2176 	.db #0x71	; 113	'q'
      000795 71                    2177 	.db #0x71	; 113	'q'
      000796 71                    2178 	.db #0x71	; 113	'q'
      000797 71                    2179 	.db #0x71	; 113	'q'
      000798                       2180 _color_title_6:
      000798 51                    2181 	.db #0x51	; 81	'Q'
      000799 51                    2182 	.db #0x51	; 81	'Q'
      00079A 51                    2183 	.db #0x51	; 81	'Q'
      00079B 51                    2184 	.db #0x51	; 81	'Q'
      00079C 51                    2185 	.db #0x51	; 81	'Q'
      00079D 51                    2186 	.db #0x51	; 81	'Q'
      00079E 51                    2187 	.db #0x51	; 81	'Q'
      00079F 51                    2188 	.db #0x51	; 81	'Q'
      0007A0                       2189 _color_title_7:
      0007A0 41                    2190 	.db #0x41	; 65	'A'
      0007A1 41                    2191 	.db #0x41	; 65	'A'
      0007A2 41                    2192 	.db #0x41	; 65	'A'
      0007A3 41                    2193 	.db #0x41	; 65	'A'
      0007A4 41                    2194 	.db #0x41	; 65	'A'
      0007A5 41                    2195 	.db #0x41	; 65	'A'
      0007A6 41                    2196 	.db #0x41	; 65	'A'
      0007A7 41                    2197 	.db #0x41	; 65	'A'
      0007A8                       2198 _sprite_arrow_0:
      0007A8 00                    2199 	.db #0x00	; 0
      0007A9 00                    2200 	.db #0x00	; 0
      0007AA 00                    2201 	.db #0x00	; 0
      0007AB 00                    2202 	.db #0x00	; 0
      0007AC 00                    2203 	.db #0x00	; 0
      0007AD 00                    2204 	.db #0x00	; 0
      0007AE 00                    2205 	.db #0x00	; 0
      0007AF 00                    2206 	.db #0x00	; 0
      0007B0                       2207 _sprite_arrow_1:
      0007B0 FF                    2208 	.db #0xff	; 255
      0007B1 00                    2209 	.db #0x00	; 0
      0007B2 3F                    2210 	.db #0x3f	; 63
      0007B3 00                    2211 	.db #0x00	; 0
      0007B4 0F                    2212 	.db #0x0f	; 15
      0007B5 00                    2213 	.db #0x00	; 0
      0007B6 03                    2214 	.db #0x03	; 3
      0007B7 00                    2215 	.db #0x00	; 0
      0007B8                       2216 _sprite_arrow_2:
      0007B8 00                    2217 	.db #0x00	; 0
      0007B9 00                    2218 	.db #0x00	; 0
      0007BA 00                    2219 	.db #0x00	; 0
      0007BB 00                    2220 	.db #0x00	; 0
      0007BC 00                    2221 	.db #0x00	; 0
      0007BD 00                    2222 	.db #0x00	; 0
      0007BE 00                    2223 	.db #0x00	; 0
      0007BF 00                    2224 	.db #0x00	; 0
      0007C0                       2225 _sprite_arrow_3:
      0007C0 FF                    2226 	.db #0xff	; 255
      0007C1 00                    2227 	.db #0x00	; 0
      0007C2 FC                    2228 	.db #0xfc	; 252
      0007C3 00                    2229 	.db #0x00	; 0
      0007C4 F0                    2230 	.db #0xf0	; 240
      0007C5 00                    2231 	.db #0x00	; 0
      0007C6 C0                    2232 	.db #0xc0	; 192
      0007C7 00                    2233 	.db #0x00	; 0
      0007C8                       2234 _sprite_hit_1:
      0007C8 00                    2235 	.db #0x00	; 0
      0007C9 77                    2236 	.db #0x77	; 119	'w'
      0007CA 22                    2237 	.db #0x22	; 34
      0007CB 22                    2238 	.db #0x22	; 34
      0007CC 22                    2239 	.db #0x22	; 34
      0007CD 3E                    2240 	.db #0x3e	; 62
      0007CE 22                    2241 	.db #0x22	; 34
      0007CF 22                    2242 	.db #0x22	; 34
      0007D0 22                    2243 	.db #0x22	; 34
      0007D1 77                    2244 	.db #0x77	; 119	'w'
      0007D2 00                    2245 	.db #0x00	; 0
      0007D3 00                    2246 	.db #0x00	; 0
      0007D4 00                    2247 	.db #0x00	; 0
      0007D5 00                    2248 	.db #0x00	; 0
      0007D6 00                    2249 	.db #0x00	; 0
      0007D7 00                    2250 	.db #0x00	; 0
      0007D8 00                    2251 	.db #0x00	; 0
      0007D9 77                    2252 	.db #0x77	; 119	'w'
      0007DA 25                    2253 	.db #0x25	; 37
      0007DB 21                    2254 	.db #0x21	; 33
      0007DC 21                    2255 	.db #0x21	; 33
      0007DD 21                    2256 	.db #0x21	; 33
      0007DE 21                    2257 	.db #0x21	; 33
      0007DF 21                    2258 	.db #0x21	; 33
      0007E0 21                    2259 	.db #0x21	; 33
      0007E1 73                    2260 	.db #0x73	; 115	's'
      0007E2 00                    2261 	.db #0x00	; 0
      0007E3 00                    2262 	.db #0x00	; 0
      0007E4 00                    2263 	.db #0x00	; 0
      0007E5 00                    2264 	.db #0x00	; 0
      0007E6 00                    2265 	.db #0x00	; 0
      0007E7 00                    2266 	.db #0x00	; 0
      0007E8                       2267 _sprite_hit_2:
      0007E8 00                    2268 	.db #0x00	; 0
      0007E9 C0                    2269 	.db #0xc0	; 192
      0007EA 40                    2270 	.db #0x40	; 64
      0007EB 00                    2271 	.db #0x00	; 0
      0007EC 00                    2272 	.db #0x00	; 0
      0007ED 00                    2273 	.db #0x00	; 0
      0007EE 00                    2274 	.db #0x00	; 0
      0007EF 00                    2275 	.db #0x00	; 0
      0007F0 00                    2276 	.db #0x00	; 0
      0007F1 80                    2277 	.db #0x80	; 128
      0007F2 00                    2278 	.db #0x00	; 0
      0007F3 00                    2279 	.db #0x00	; 0
      0007F4 00                    2280 	.db #0x00	; 0
      0007F5 00                    2281 	.db #0x00	; 0
      0007F6 00                    2282 	.db #0x00	; 0
      0007F7 00                    2283 	.db #0x00	; 0
      0007F8 00                    2284 	.db #0x00	; 0
      0007F9 00                    2285 	.db #0x00	; 0
      0007FA 00                    2286 	.db #0x00	; 0
      0007FB 00                    2287 	.db #0x00	; 0
      0007FC 00                    2288 	.db #0x00	; 0
      0007FD 00                    2289 	.db #0x00	; 0
      0007FE 00                    2290 	.db #0x00	; 0
      0007FF 00                    2291 	.db #0x00	; 0
      000800 00                    2292 	.db #0x00	; 0
      000801 00                    2293 	.db #0x00	; 0
      000802 00                    2294 	.db #0x00	; 0
      000803 00                    2295 	.db #0x00	; 0
      000804 00                    2296 	.db #0x00	; 0
      000805 00                    2297 	.db #0x00	; 0
      000806 00                    2298 	.db #0x00	; 0
      000807 00                    2299 	.db #0x00	; 0
      000808                       2300 _sprite_combo_1:
      000808 00                    2301 	.db #0x00	; 0
      000809 38                    2302 	.db #0x38	; 56	'8'
      00080A 65                    2303 	.db #0x65	; 101	'e'
      00080B 61                    2304 	.db #0x61	; 97	'a'
      00080C 61                    2305 	.db #0x61	; 97	'a'
      00080D 61                    2306 	.db #0x61	; 97	'a'
      00080E 61                    2307 	.db #0x61	; 97	'a'
      00080F 61                    2308 	.db #0x61	; 97	'a'
      000810 65                    2309 	.db #0x65	; 101	'e'
      000811 38                    2310 	.db #0x38	; 56	'8'
      000812 00                    2311 	.db #0x00	; 0
      000813 00                    2312 	.db #0x00	; 0
      000814 00                    2313 	.db #0x00	; 0
      000815 00                    2314 	.db #0x00	; 0
      000816 00                    2315 	.db #0x00	; 0
      000817 00                    2316 	.db #0x00	; 0
      000818 00                    2317 	.db #0x00	; 0
      000819 E6                    2318 	.db #0xe6	; 230
      00081A 13                    2319 	.db #0x13	; 19
      00081B 12                    2320 	.db #0x12	; 18
      00081C 12                    2321 	.db #0x12	; 18
      00081D 12                    2322 	.db #0x12	; 18
      00081E 12                    2323 	.db #0x12	; 18
      00081F 12                    2324 	.db #0x12	; 18
      000820 12                    2325 	.db #0x12	; 18
      000821 E7                    2326 	.db #0xe7	; 231
      000822 00                    2327 	.db #0x00	; 0
      000823 00                    2328 	.db #0x00	; 0
      000824 00                    2329 	.db #0x00	; 0
      000825 00                    2330 	.db #0x00	; 0
      000826 00                    2331 	.db #0x00	; 0
      000827 00                    2332 	.db #0x00	; 0
      000828                       2333 _sprite_combo_2:
      000828 00                    2334 	.db #0x00	; 0
      000829 37                    2335 	.db #0x37	; 55	'7'
      00082A 62                    2336 	.db #0x62	; 98	'b'
      00082B A2                    2337 	.db #0xa2	; 162
      00082C 22                    2338 	.db #0x22	; 34
      00082D 23                    2339 	.db #0x23	; 35
      00082E 22                    2340 	.db #0x22	; 34
      00082F 22                    2341 	.db #0x22	; 34
      000830 22                    2342 	.db #0x22	; 34
      000831 77                    2343 	.db #0x77	; 119	'w'
      000832 00                    2344 	.db #0x00	; 0
      000833 00                    2345 	.db #0x00	; 0
      000834 00                    2346 	.db #0x00	; 0
      000835 00                    2347 	.db #0x00	; 0
      000836 00                    2348 	.db #0x00	; 0
      000837 00                    2349 	.db #0x00	; 0
      000838 00                    2350 	.db #0x00	; 0
      000839 8E                    2351 	.db #0x8e	; 142
      00083A 51                    2352 	.db #0x51	; 81	'Q'
      00083B 51                    2353 	.db #0x51	; 81	'Q'
      00083C 51                    2354 	.db #0x51	; 81	'Q'
      00083D 91                    2355 	.db #0x91	; 145
      00083E 51                    2356 	.db #0x51	; 81	'Q'
      00083F 51                    2357 	.db #0x51	; 81	'Q'
      000840 51                    2358 	.db #0x51	; 81	'Q'
      000841 8E                    2359 	.db #0x8e	; 142
      000842 00                    2360 	.db #0x00	; 0
      000843 00                    2361 	.db #0x00	; 0
      000844 00                    2362 	.db #0x00	; 0
      000845 00                    2363 	.db #0x00	; 0
      000846 00                    2364 	.db #0x00	; 0
      000847 00                    2365 	.db #0x00	; 0
      000848                       2366 _sprite_2x:
      000848 00                    2367 	.db #0x00	; 0
      000849 3E                    2368 	.db #0x3e	; 62
      00084A 63                    2369 	.db #0x63	; 99	'c'
      00084B 03                    2370 	.db #0x03	; 3
      00084C 03                    2371 	.db #0x03	; 3
      00084D 1E                    2372 	.db #0x1e	; 30
      00084E 30                    2373 	.db #0x30	; 48	'0'
      00084F 60                    2374 	.db #0x60	; 96
      000850 60                    2375 	.db #0x60	; 96
      000851 7F                    2376 	.db #0x7f	; 127
      000852 00                    2377 	.db #0x00	; 0
      000853 00                    2378 	.db #0x00	; 0
      000854 00                    2379 	.db #0x00	; 0
      000855 00                    2380 	.db #0x00	; 0
      000856 00                    2381 	.db #0x00	; 0
      000857 00                    2382 	.db #0x00	; 0
      000858 00                    2383 	.db #0x00	; 0
      000859 00                    2384 	.db #0x00	; 0
      00085A 00                    2385 	.db #0x00	; 0
      00085B 63                    2386 	.db #0x63	; 99	'c'
      00085C 36                    2387 	.db #0x36	; 54	'6'
      00085D 1C                    2388 	.db #0x1c	; 28
      00085E 08                    2389 	.db #0x08	; 8
      00085F 1C                    2390 	.db #0x1c	; 28
      000860 36                    2391 	.db #0x36	; 54	'6'
      000861 63                    2392 	.db #0x63	; 99	'c'
      000862 00                    2393 	.db #0x00	; 0
      000863 00                    2394 	.db #0x00	; 0
      000864 00                    2395 	.db #0x00	; 0
      000865 00                    2396 	.db #0x00	; 0
      000866 00                    2397 	.db #0x00	; 0
      000867 00                    2398 	.db #0x00	; 0
      000868                       2399 _sprite_3x:
      000868 00                    2400 	.db #0x00	; 0
      000869 3E                    2401 	.db #0x3e	; 62
      00086A 63                    2402 	.db #0x63	; 99	'c'
      00086B 03                    2403 	.db #0x03	; 3
      00086C 03                    2404 	.db #0x03	; 3
      00086D 1E                    2405 	.db #0x1e	; 30
      00086E 03                    2406 	.db #0x03	; 3
      00086F 03                    2407 	.db #0x03	; 3
      000870 63                    2408 	.db #0x63	; 99	'c'
      000871 3E                    2409 	.db #0x3e	; 62
      000872 00                    2410 	.db #0x00	; 0
      000873 00                    2411 	.db #0x00	; 0
      000874 00                    2412 	.db #0x00	; 0
      000875 00                    2413 	.db #0x00	; 0
      000876 00                    2414 	.db #0x00	; 0
      000877 00                    2415 	.db #0x00	; 0
      000878 00                    2416 	.db #0x00	; 0
      000879 00                    2417 	.db #0x00	; 0
      00087A 00                    2418 	.db #0x00	; 0
      00087B 63                    2419 	.db #0x63	; 99	'c'
      00087C 36                    2420 	.db #0x36	; 54	'6'
      00087D 1C                    2421 	.db #0x1c	; 28
      00087E 08                    2422 	.db #0x08	; 8
      00087F 1C                    2423 	.db #0x1c	; 28
      000880 36                    2424 	.db #0x36	; 54	'6'
      000881 63                    2425 	.db #0x63	; 99	'c'
      000882 00                    2426 	.db #0x00	; 0
      000883 00                    2427 	.db #0x00	; 0
      000884 00                    2428 	.db #0x00	; 0
      000885 00                    2429 	.db #0x00	; 0
      000886 00                    2430 	.db #0x00	; 0
      000887 00                    2431 	.db #0x00	; 0
      000888                       2432 _sprite_4x:
      000888 00                    2433 	.db #0x00	; 0
      000889 02                    2434 	.db #0x02	; 2
      00088A 06                    2435 	.db #0x06	; 6
      00088B 0E                    2436 	.db #0x0e	; 14
      00088C 16                    2437 	.db #0x16	; 22
      00088D 26                    2438 	.db #0x26	; 38
      00088E 7F                    2439 	.db #0x7f	; 127
      00088F 06                    2440 	.db #0x06	; 6
      000890 06                    2441 	.db #0x06	; 6
      000891 0F                    2442 	.db #0x0f	; 15
      000892 00                    2443 	.db #0x00	; 0
      000893 00                    2444 	.db #0x00	; 0
      000894 00                    2445 	.db #0x00	; 0
      000895 00                    2446 	.db #0x00	; 0
      000896 00                    2447 	.db #0x00	; 0
      000897 00                    2448 	.db #0x00	; 0
      000898 00                    2449 	.db #0x00	; 0
      000899 00                    2450 	.db #0x00	; 0
      00089A 00                    2451 	.db #0x00	; 0
      00089B 63                    2452 	.db #0x63	; 99	'c'
      00089C 36                    2453 	.db #0x36	; 54	'6'
      00089D 1C                    2454 	.db #0x1c	; 28
      00089E 08                    2455 	.db #0x08	; 8
      00089F 1C                    2456 	.db #0x1c	; 28
      0008A0 36                    2457 	.db #0x36	; 54	'6'
      0008A1 63                    2458 	.db #0x63	; 99	'c'
      0008A2 00                    2459 	.db #0x00	; 0
      0008A3 00                    2460 	.db #0x00	; 0
      0008A4 00                    2461 	.db #0x00	; 0
      0008A5 00                    2462 	.db #0x00	; 0
      0008A6 00                    2463 	.db #0x00	; 0
      0008A7 00                    2464 	.db #0x00	; 0
      0008A8                       2465 _sprite_5x:
      0008A8 00                    2466 	.db #0x00	; 0
      0008A9 7E                    2467 	.db #0x7e	; 126
      0008AA 60                    2468 	.db #0x60	; 96
      0008AB 60                    2469 	.db #0x60	; 96
      0008AC 7E                    2470 	.db #0x7e	; 126
      0008AD 03                    2471 	.db #0x03	; 3
      0008AE 03                    2472 	.db #0x03	; 3
      0008AF 03                    2473 	.db #0x03	; 3
      0008B0 63                    2474 	.db #0x63	; 99	'c'
      0008B1 3E                    2475 	.db #0x3e	; 62
      0008B2 00                    2476 	.db #0x00	; 0
      0008B3 00                    2477 	.db #0x00	; 0
      0008B4 00                    2478 	.db #0x00	; 0
      0008B5 00                    2479 	.db #0x00	; 0
      0008B6 00                    2480 	.db #0x00	; 0
      0008B7 00                    2481 	.db #0x00	; 0
      0008B8 00                    2482 	.db #0x00	; 0
      0008B9 00                    2483 	.db #0x00	; 0
      0008BA 00                    2484 	.db #0x00	; 0
      0008BB 63                    2485 	.db #0x63	; 99	'c'
      0008BC 36                    2486 	.db #0x36	; 54	'6'
      0008BD 1C                    2487 	.db #0x1c	; 28
      0008BE 08                    2488 	.db #0x08	; 8
      0008BF 1C                    2489 	.db #0x1c	; 28
      0008C0 36                    2490 	.db #0x36	; 54	'6'
      0008C1 63                    2491 	.db #0x63	; 99	'c'
      0008C2 00                    2492 	.db #0x00	; 0
      0008C3 00                    2493 	.db #0x00	; 0
      0008C4 00                    2494 	.db #0x00	; 0
      0008C5 00                    2495 	.db #0x00	; 0
      0008C6 00                    2496 	.db #0x00	; 0
      0008C7 00                    2497 	.db #0x00	; 0
      0008C8                       2498 _sprite_6x:
      0008C8 00                    2499 	.db #0x00	; 0
      0008C9 3E                    2500 	.db #0x3e	; 62
      0008CA 61                    2501 	.db #0x61	; 97	'a'
      0008CB 60                    2502 	.db #0x60	; 96
      0008CC 7E                    2503 	.db #0x7e	; 126
      0008CD 63                    2504 	.db #0x63	; 99	'c'
      0008CE 63                    2505 	.db #0x63	; 99	'c'
      0008CF 63                    2506 	.db #0x63	; 99	'c'
      0008D0 63                    2507 	.db #0x63	; 99	'c'
      0008D1 3E                    2508 	.db #0x3e	; 62
      0008D2 00                    2509 	.db #0x00	; 0
      0008D3 00                    2510 	.db #0x00	; 0
      0008D4 00                    2511 	.db #0x00	; 0
      0008D5 00                    2512 	.db #0x00	; 0
      0008D6 00                    2513 	.db #0x00	; 0
      0008D7 00                    2514 	.db #0x00	; 0
      0008D8 00                    2515 	.db #0x00	; 0
      0008D9 00                    2516 	.db #0x00	; 0
      0008DA 00                    2517 	.db #0x00	; 0
      0008DB 63                    2518 	.db #0x63	; 99	'c'
      0008DC 36                    2519 	.db #0x36	; 54	'6'
      0008DD 1C                    2520 	.db #0x1c	; 28
      0008DE 08                    2521 	.db #0x08	; 8
      0008DF 1C                    2522 	.db #0x1c	; 28
      0008E0 36                    2523 	.db #0x36	; 54	'6'
      0008E1 63                    2524 	.db #0x63	; 99	'c'
      0008E2 00                    2525 	.db #0x00	; 0
      0008E3 00                    2526 	.db #0x00	; 0
      0008E4 00                    2527 	.db #0x00	; 0
      0008E5 00                    2528 	.db #0x00	; 0
      0008E6 00                    2529 	.db #0x00	; 0
      0008E7 00                    2530 	.db #0x00	; 0
      0008E8                       2531 _sprite_mega_hit:
      0008E8 04                    2532 	.db #0x04	; 4
      0008E9 06                    2533 	.db #0x06	; 6
      0008EA 05                    2534 	.db #0x05	; 5
      0008EB 04                    2535 	.db #0x04	; 4
      0008EC 04                    2536 	.db #0x04	; 4
      0008ED 00                    2537 	.db #0x00	; 0
      0008EE 03                    2538 	.db #0x03	; 3
      0008EF 04                    2539 	.db #0x04	; 4
      0008F0 05                    2540 	.db #0x05	; 5
      0008F1 04                    2541 	.db #0x04	; 4
      0008F2 03                    2542 	.db #0x03	; 3
      0008F3 00                    2543 	.db #0x00	; 0
      0008F4 00                    2544 	.db #0x00	; 0
      0008F5 00                    2545 	.db #0x00	; 0
      0008F6 00                    2546 	.db #0x00	; 0
      0008F7 00                    2547 	.db #0x00	; 0
      0008F8 5C                    2548 	.db #0x5c	; 92
      0008F9 D0                    2549 	.db #0xd0	; 208
      0008FA 5C                    2550 	.db #0x5c	; 92
      0008FB 50                    2551 	.db #0x50	; 80	'P'
      0008FC 5C                    2552 	.db #0x5c	; 92
      0008FD 00                    2553 	.db #0x00	; 0
      0008FE 98                    2554 	.db #0x98	; 152
      0008FF 24                    2555 	.db #0x24	; 36
      000900 A4                    2556 	.db #0xa4	; 164
      000901 BC                    2557 	.db #0xbc	; 188
      000902 A4                    2558 	.db #0xa4	; 164
      000903 00                    2559 	.db #0x00	; 0
      000904 00                    2560 	.db #0x00	; 0
      000905 00                    2561 	.db #0x00	; 0
      000906 00                    2562 	.db #0x00	; 0
      000907 00                    2563 	.db #0x00	; 0
      000908                       2564 _sprite_explosion_0:
      000908 00                    2565 	.db #0x00	; 0
      000909 00                    2566 	.db #0x00	; 0
      00090A 00                    2567 	.db #0x00	; 0
      00090B 00                    2568 	.db #0x00	; 0
      00090C 00                    2569 	.db #0x00	; 0
      00090D 00                    2570 	.db #0x00	; 0
      00090E 01                    2571 	.db #0x01	; 1
      00090F 02                    2572 	.db #0x02	; 2
      000910 01                    2573 	.db #0x01	; 1
      000911 00                    2574 	.db #0x00	; 0
      000912 00                    2575 	.db #0x00	; 0
      000913 00                    2576 	.db #0x00	; 0
      000914 00                    2577 	.db #0x00	; 0
      000915 00                    2578 	.db #0x00	; 0
      000916 00                    2579 	.db #0x00	; 0
      000917 00                    2580 	.db #0x00	; 0
      000918 00                    2581 	.db #0x00	; 0
      000919 00                    2582 	.db #0x00	; 0
      00091A 00                    2583 	.db #0x00	; 0
      00091B 00                    2584 	.db #0x00	; 0
      00091C 00                    2585 	.db #0x00	; 0
      00091D 00                    2586 	.db #0x00	; 0
      00091E 00                    2587 	.db #0x00	; 0
      00091F 80                    2588 	.db #0x80	; 128
      000920 00                    2589 	.db #0x00	; 0
      000921 00                    2590 	.db #0x00	; 0
      000922 00                    2591 	.db #0x00	; 0
      000923 00                    2592 	.db #0x00	; 0
      000924 00                    2593 	.db #0x00	; 0
      000925 00                    2594 	.db #0x00	; 0
      000926 00                    2595 	.db #0x00	; 0
      000927 00                    2596 	.db #0x00	; 0
      000928                       2597 _sprite_explosion_1:
      000928 00                    2598 	.db #0x00	; 0
      000929 00                    2599 	.db #0x00	; 0
      00092A 00                    2600 	.db #0x00	; 0
      00092B 00                    2601 	.db #0x00	; 0
      00092C 00                    2602 	.db #0x00	; 0
      00092D 01                    2603 	.db #0x01	; 1
      00092E 00                    2604 	.db #0x00	; 0
      00092F 04                    2605 	.db #0x04	; 4
      000930 00                    2606 	.db #0x00	; 0
      000931 01                    2607 	.db #0x01	; 1
      000932 00                    2608 	.db #0x00	; 0
      000933 00                    2609 	.db #0x00	; 0
      000934 00                    2610 	.db #0x00	; 0
      000935 00                    2611 	.db #0x00	; 0
      000936 00                    2612 	.db #0x00	; 0
      000937 00                    2613 	.db #0x00	; 0
      000938 00                    2614 	.db #0x00	; 0
      000939 00                    2615 	.db #0x00	; 0
      00093A 00                    2616 	.db #0x00	; 0
      00093B 00                    2617 	.db #0x00	; 0
      00093C 00                    2618 	.db #0x00	; 0
      00093D 00                    2619 	.db #0x00	; 0
      00093E 00                    2620 	.db #0x00	; 0
      00093F 40                    2621 	.db #0x40	; 64
      000940 00                    2622 	.db #0x00	; 0
      000941 00                    2623 	.db #0x00	; 0
      000942 00                    2624 	.db #0x00	; 0
      000943 00                    2625 	.db #0x00	; 0
      000944 00                    2626 	.db #0x00	; 0
      000945 00                    2627 	.db #0x00	; 0
      000946 00                    2628 	.db #0x00	; 0
      000947 00                    2629 	.db #0x00	; 0
      000948                       2630 _sprite_explosion_2:
      000948 00                    2631 	.db #0x00	; 0
      000949 00                    2632 	.db #0x00	; 0
      00094A 00                    2633 	.db #0x00	; 0
      00094B 00                    2634 	.db #0x00	; 0
      00094C 01                    2635 	.db #0x01	; 1
      00094D 04                    2636 	.db #0x04	; 4
      00094E 00                    2637 	.db #0x00	; 0
      00094F 08                    2638 	.db #0x08	; 8
      000950 00                    2639 	.db #0x00	; 0
      000951 04                    2640 	.db #0x04	; 4
      000952 01                    2641 	.db #0x01	; 1
      000953 00                    2642 	.db #0x00	; 0
      000954 00                    2643 	.db #0x00	; 0
      000955 00                    2644 	.db #0x00	; 0
      000956 00                    2645 	.db #0x00	; 0
      000957 00                    2646 	.db #0x00	; 0
      000958 00                    2647 	.db #0x00	; 0
      000959 00                    2648 	.db #0x00	; 0
      00095A 00                    2649 	.db #0x00	; 0
      00095B 00                    2650 	.db #0x00	; 0
      00095C 00                    2651 	.db #0x00	; 0
      00095D 40                    2652 	.db #0x40	; 64
      00095E 00                    2653 	.db #0x00	; 0
      00095F 20                    2654 	.db #0x20	; 32
      000960 00                    2655 	.db #0x00	; 0
      000961 40                    2656 	.db #0x40	; 64
      000962 00                    2657 	.db #0x00	; 0
      000963 00                    2658 	.db #0x00	; 0
      000964 00                    2659 	.db #0x00	; 0
      000965 00                    2660 	.db #0x00	; 0
      000966 00                    2661 	.db #0x00	; 0
      000967 00                    2662 	.db #0x00	; 0
      000968                       2663 _sprite_explosion_3:
      000968 00                    2664 	.db #0x00	; 0
      000969 00                    2665 	.db #0x00	; 0
      00096A 00                    2666 	.db #0x00	; 0
      00096B 01                    2667 	.db #0x01	; 1
      00096C 08                    2668 	.db #0x08	; 8
      00096D 00                    2669 	.db #0x00	; 0
      00096E 00                    2670 	.db #0x00	; 0
      00096F 10                    2671 	.db #0x10	; 16
      000970 00                    2672 	.db #0x00	; 0
      000971 00                    2673 	.db #0x00	; 0
      000972 08                    2674 	.db #0x08	; 8
      000973 01                    2675 	.db #0x01	; 1
      000974 00                    2676 	.db #0x00	; 0
      000975 00                    2677 	.db #0x00	; 0
      000976 00                    2678 	.db #0x00	; 0
      000977 00                    2679 	.db #0x00	; 0
      000978 00                    2680 	.db #0x00	; 0
      000979 00                    2681 	.db #0x00	; 0
      00097A 00                    2682 	.db #0x00	; 0
      00097B 00                    2683 	.db #0x00	; 0
      00097C 20                    2684 	.db #0x20	; 32
      00097D 00                    2685 	.db #0x00	; 0
      00097E 00                    2686 	.db #0x00	; 0
      00097F 10                    2687 	.db #0x10	; 16
      000980 00                    2688 	.db #0x00	; 0
      000981 00                    2689 	.db #0x00	; 0
      000982 20                    2690 	.db #0x20	; 32
      000983 00                    2691 	.db #0x00	; 0
      000984 00                    2692 	.db #0x00	; 0
      000985 00                    2693 	.db #0x00	; 0
      000986 00                    2694 	.db #0x00	; 0
      000987 00                    2695 	.db #0x00	; 0
      000988                       2696 _sprite_explosion_4:
      000988 00                    2697 	.db #0x00	; 0
      000989 00                    2698 	.db #0x00	; 0
      00098A 01                    2699 	.db #0x01	; 1
      00098B 10                    2700 	.db #0x10	; 16
      00098C 00                    2701 	.db #0x00	; 0
      00098D 00                    2702 	.db #0x00	; 0
      00098E 00                    2703 	.db #0x00	; 0
      00098F 20                    2704 	.db #0x20	; 32
      000990 00                    2705 	.db #0x00	; 0
      000991 00                    2706 	.db #0x00	; 0
      000992 00                    2707 	.db #0x00	; 0
      000993 10                    2708 	.db #0x10	; 16
      000994 01                    2709 	.db #0x01	; 1
      000995 00                    2710 	.db #0x00	; 0
      000996 00                    2711 	.db #0x00	; 0
      000997 00                    2712 	.db #0x00	; 0
      000998 00                    2713 	.db #0x00	; 0
      000999 00                    2714 	.db #0x00	; 0
      00099A 00                    2715 	.db #0x00	; 0
      00099B 10                    2716 	.db #0x10	; 16
      00099C 00                    2717 	.db #0x00	; 0
      00099D 00                    2718 	.db #0x00	; 0
      00099E 00                    2719 	.db #0x00	; 0
      00099F 08                    2720 	.db #0x08	; 8
      0009A0 00                    2721 	.db #0x00	; 0
      0009A1 00                    2722 	.db #0x00	; 0
      0009A2 00                    2723 	.db #0x00	; 0
      0009A3 10                    2724 	.db #0x10	; 16
      0009A4 00                    2725 	.db #0x00	; 0
      0009A5 00                    2726 	.db #0x00	; 0
      0009A6 00                    2727 	.db #0x00	; 0
      0009A7 00                    2728 	.db #0x00	; 0
      0009A8                       2729 _sprite_explosion_5:
      0009A8 01                    2730 	.db #0x01	; 1
      0009A9 00                    2731 	.db #0x00	; 0
      0009AA 20                    2732 	.db #0x20	; 32
      0009AB 00                    2733 	.db #0x00	; 0
      0009AC 00                    2734 	.db #0x00	; 0
      0009AD 00                    2735 	.db #0x00	; 0
      0009AE 00                    2736 	.db #0x00	; 0
      0009AF 80                    2737 	.db #0x80	; 128
      0009B0 00                    2738 	.db #0x00	; 0
      0009B1 00                    2739 	.db #0x00	; 0
      0009B2 00                    2740 	.db #0x00	; 0
      0009B3 00                    2741 	.db #0x00	; 0
      0009B4 20                    2742 	.db #0x20	; 32
      0009B5 00                    2743 	.db #0x00	; 0
      0009B6 01                    2744 	.db #0x01	; 1
      0009B7 00                    2745 	.db #0x00	; 0
      0009B8 00                    2746 	.db #0x00	; 0
      0009B9 00                    2747 	.db #0x00	; 0
      0009BA 08                    2748 	.db #0x08	; 8
      0009BB 00                    2749 	.db #0x00	; 0
      0009BC 00                    2750 	.db #0x00	; 0
      0009BD 00                    2751 	.db #0x00	; 0
      0009BE 00                    2752 	.db #0x00	; 0
      0009BF 02                    2753 	.db #0x02	; 2
      0009C0 00                    2754 	.db #0x00	; 0
      0009C1 00                    2755 	.db #0x00	; 0
      0009C2 00                    2756 	.db #0x00	; 0
      0009C3 00                    2757 	.db #0x00	; 0
      0009C4 08                    2758 	.db #0x08	; 8
      0009C5 00                    2759 	.db #0x00	; 0
      0009C6 00                    2760 	.db #0x00	; 0
      0009C7 00                    2761 	.db #0x00	; 0
      0009C8                       2762 _sprite_explosion_6:
      0009C8 00                    2763 	.db #0x00	; 0
      0009C9 01                    2764 	.db #0x01	; 1
      0009CA 00                    2765 	.db #0x00	; 0
      0009CB 20                    2766 	.db #0x20	; 32
      0009CC 00                    2767 	.db #0x00	; 0
      0009CD 00                    2768 	.db #0x00	; 0
      0009CE 00                    2769 	.db #0x00	; 0
      0009CF 00                    2770 	.db #0x00	; 0
      0009D0 80                    2771 	.db #0x80	; 128
      0009D1 00                    2772 	.db #0x00	; 0
      0009D2 00                    2773 	.db #0x00	; 0
      0009D3 00                    2774 	.db #0x00	; 0
      0009D4 00                    2775 	.db #0x00	; 0
      0009D5 20                    2776 	.db #0x20	; 32
      0009D6 00                    2777 	.db #0x00	; 0
      0009D7 01                    2778 	.db #0x01	; 1
      0009D8 00                    2779 	.db #0x00	; 0
      0009D9 00                    2780 	.db #0x00	; 0
      0009DA 00                    2781 	.db #0x00	; 0
      0009DB 08                    2782 	.db #0x08	; 8
      0009DC 00                    2783 	.db #0x00	; 0
      0009DD 00                    2784 	.db #0x00	; 0
      0009DE 00                    2785 	.db #0x00	; 0
      0009DF 00                    2786 	.db #0x00	; 0
      0009E0 02                    2787 	.db #0x02	; 2
      0009E1 00                    2788 	.db #0x00	; 0
      0009E2 00                    2789 	.db #0x00	; 0
      0009E3 00                    2790 	.db #0x00	; 0
      0009E4 00                    2791 	.db #0x00	; 0
      0009E5 08                    2792 	.db #0x08	; 8
      0009E6 00                    2793 	.db #0x00	; 0
      0009E7 00                    2794 	.db #0x00	; 0
      0009E8                       2795 _sprite_explosion_7:
      0009E8 00                    2796 	.db #0x00	; 0
      0009E9 00                    2797 	.db #0x00	; 0
      0009EA 01                    2798 	.db #0x01	; 1
      0009EB 00                    2799 	.db #0x00	; 0
      0009EC 20                    2800 	.db #0x20	; 32
      0009ED 00                    2801 	.db #0x00	; 0
      0009EE 00                    2802 	.db #0x00	; 0
      0009EF 00                    2803 	.db #0x00	; 0
      0009F0 00                    2804 	.db #0x00	; 0
      0009F1 80                    2805 	.db #0x80	; 128
      0009F2 00                    2806 	.db #0x00	; 0
      0009F3 00                    2807 	.db #0x00	; 0
      0009F4 00                    2808 	.db #0x00	; 0
      0009F5 00                    2809 	.db #0x00	; 0
      0009F6 20                    2810 	.db #0x20	; 32
      0009F7 00                    2811 	.db #0x00	; 0
      0009F8 00                    2812 	.db #0x00	; 0
      0009F9 00                    2813 	.db #0x00	; 0
      0009FA 00                    2814 	.db #0x00	; 0
      0009FB 00                    2815 	.db #0x00	; 0
      0009FC 08                    2816 	.db #0x08	; 8
      0009FD 00                    2817 	.db #0x00	; 0
      0009FE 00                    2818 	.db #0x00	; 0
      0009FF 00                    2819 	.db #0x00	; 0
      000A00 00                    2820 	.db #0x00	; 0
      000A01 02                    2821 	.db #0x02	; 2
      000A02 00                    2822 	.db #0x00	; 0
      000A03 00                    2823 	.db #0x00	; 0
      000A04 00                    2824 	.db #0x00	; 0
      000A05 00                    2825 	.db #0x00	; 0
      000A06 08                    2826 	.db #0x08	; 8
      000A07 00                    2827 	.db #0x00	; 0
      000A08                       2828 _sprite_block_small_0:
      000A08 5A                    2829 	.db #0x5a	; 90	'Z'
      000A09 24                    2830 	.db #0x24	; 36
      000A0A 80                    2831 	.db #0x80	; 128
      000A0B 10                    2832 	.db #0x10	; 16
      000A0C 80                    2833 	.db #0x80	; 128
      000A0D 20                    2834 	.db #0x20	; 32
      000A0E 00                    2835 	.db #0x00	; 0
      000A0F 00                    2836 	.db #0x00	; 0
      000A10 00                    2837 	.db #0x00	; 0
      000A11 00                    2838 	.db #0x00	; 0
      000A12 00                    2839 	.db #0x00	; 0
      000A13 00                    2840 	.db #0x00	; 0
      000A14 00                    2841 	.db #0x00	; 0
      000A15 00                    2842 	.db #0x00	; 0
      000A16 00                    2843 	.db #0x00	; 0
      000A17 00                    2844 	.db #0x00	; 0
      000A18 00                    2845 	.db #0x00	; 0
      000A19 00                    2846 	.db #0x00	; 0
      000A1A 00                    2847 	.db #0x00	; 0
      000A1B 00                    2848 	.db #0x00	; 0
      000A1C 00                    2849 	.db #0x00	; 0
      000A1D 00                    2850 	.db #0x00	; 0
      000A1E 00                    2851 	.db #0x00	; 0
      000A1F 00                    2852 	.db #0x00	; 0
      000A20 00                    2853 	.db #0x00	; 0
      000A21 00                    2854 	.db #0x00	; 0
      000A22 00                    2855 	.db #0x00	; 0
      000A23 00                    2856 	.db #0x00	; 0
      000A24 00                    2857 	.db #0x00	; 0
      000A25 00                    2858 	.db #0x00	; 0
      000A26 00                    2859 	.db #0x00	; 0
      000A27 00                    2860 	.db #0x00	; 0
      000A28                       2861 _sprite_block_small_1:
      000A28 FF                    2862 	.db #0xff	; 255
      000A29 FF                    2863 	.db #0xff	; 255
      000A2A FF                    2864 	.db #0xff	; 255
      000A2B FF                    2865 	.db #0xff	; 255
      000A2C FF                    2866 	.db #0xff	; 255
      000A2D FF                    2867 	.db #0xff	; 255
      000A2E FF                    2868 	.db #0xff	; 255
      000A2F 7E                    2869 	.db #0x7e	; 126
      000A30 00                    2870 	.db #0x00	; 0
      000A31 00                    2871 	.db #0x00	; 0
      000A32 00                    2872 	.db #0x00	; 0
      000A33 00                    2873 	.db #0x00	; 0
      000A34 00                    2874 	.db #0x00	; 0
      000A35 00                    2875 	.db #0x00	; 0
      000A36 00                    2876 	.db #0x00	; 0
      000A37 00                    2877 	.db #0x00	; 0
      000A38 00                    2878 	.db #0x00	; 0
      000A39 00                    2879 	.db #0x00	; 0
      000A3A 00                    2880 	.db #0x00	; 0
      000A3B 00                    2881 	.db #0x00	; 0
      000A3C 00                    2882 	.db #0x00	; 0
      000A3D 00                    2883 	.db #0x00	; 0
      000A3E 00                    2884 	.db #0x00	; 0
      000A3F 00                    2885 	.db #0x00	; 0
      000A40 00                    2886 	.db #0x00	; 0
      000A41 00                    2887 	.db #0x00	; 0
      000A42 00                    2888 	.db #0x00	; 0
      000A43 00                    2889 	.db #0x00	; 0
      000A44 00                    2890 	.db #0x00	; 0
      000A45 00                    2891 	.db #0x00	; 0
      000A46 00                    2892 	.db #0x00	; 0
      000A47 00                    2893 	.db #0x00	; 0
      000A48                       2894 _sprite_number_3_32x32:
      000A48 00                    2895 	.db #0x00	; 0
      000A49 01                    2896 	.db #0x01	; 1
      000A4A 02                    2897 	.db #0x02	; 2
      000A4B 04                    2898 	.db #0x04	; 4
      000A4C 08                    2899 	.db #0x08	; 8
      000A4D 08                    2900 	.db #0x08	; 8
      000A4E 08                    2901 	.db #0x08	; 8
      000A4F 08                    2902 	.db #0x08	; 8
      000A50 0F                    2903 	.db #0x0f	; 15
      000A51 00                    2904 	.db #0x00	; 0
      000A52 00                    2905 	.db #0x00	; 0
      000A53 00                    2906 	.db #0x00	; 0
      000A54 00                    2907 	.db #0x00	; 0
      000A55 00                    2908 	.db #0x00	; 0
      000A56 00                    2909 	.db #0x00	; 0
      000A57 00                    2910 	.db #0x00	; 0
      000A58 FF                    2911 	.db #0xff	; 255
      000A59 00                    2912 	.db #0x00	; 0
      000A5A 00                    2913 	.db #0x00	; 0
      000A5B 00                    2914 	.db #0x00	; 0
      000A5C 00                    2915 	.db #0x00	; 0
      000A5D 00                    2916 	.db #0x00	; 0
      000A5E 1F                    2917 	.db #0x1f	; 31
      000A5F 20                    2918 	.db #0x20	; 32
      000A60 C0                    2919 	.db #0xc0	; 192
      000A61 00                    2920 	.db #0x00	; 0
      000A62 00                    2921 	.db #0x00	; 0
      000A63 00                    2922 	.db #0x00	; 0
      000A64 00                    2923 	.db #0x00	; 0
      000A65 3F                    2924 	.db #0x3f	; 63
      000A66 20                    2925 	.db #0x20	; 32
      000A67 20                    2926 	.db #0x20	; 32
      000A68 FF                    2927 	.db #0xff	; 255
      000A69 00                    2928 	.db #0x00	; 0
      000A6A 00                    2929 	.db #0x00	; 0
      000A6B 00                    2930 	.db #0x00	; 0
      000A6C 00                    2931 	.db #0x00	; 0
      000A6D 00                    2932 	.db #0x00	; 0
      000A6E F0                    2933 	.db #0xf0	; 240
      000A6F 08                    2934 	.db #0x08	; 8
      000A70 04                    2935 	.db #0x04	; 4
      000A71 04                    2936 	.db #0x04	; 4
      000A72 04                    2937 	.db #0x04	; 4
      000A73 04                    2938 	.db #0x04	; 4
      000A74 08                    2939 	.db #0x08	; 8
      000A75 F0                    2940 	.db #0xf0	; 240
      000A76 00                    2941 	.db #0x00	; 0
      000A77 00                    2942 	.db #0x00	; 0
      000A78 00                    2943 	.db #0x00	; 0
      000A79 80                    2944 	.db #0x80	; 128
      000A7A 40                    2945 	.db #0x40	; 64
      000A7B 20                    2946 	.db #0x20	; 32
      000A7C 10                    2947 	.db #0x10	; 16
      000A7D 10                    2948 	.db #0x10	; 16
      000A7E 10                    2949 	.db #0x10	; 16
      000A7F 10                    2950 	.db #0x10	; 16
      000A80 10                    2951 	.db #0x10	; 16
      000A81 10                    2952 	.db #0x10	; 16
      000A82 10                    2953 	.db #0x10	; 16
      000A83 10                    2954 	.db #0x10	; 16
      000A84 10                    2955 	.db #0x10	; 16
      000A85 20                    2956 	.db #0x20	; 32
      000A86 40                    2957 	.db #0x40	; 64
      000A87 80                    2958 	.db #0x80	; 128
      000A88 00                    2959 	.db #0x00	; 0
      000A89 00                    2960 	.db #0x00	; 0
      000A8A 00                    2961 	.db #0x00	; 0
      000A8B 00                    2962 	.db #0x00	; 0
      000A8C 00                    2963 	.db #0x00	; 0
      000A8D 00                    2964 	.db #0x00	; 0
      000A8E 00                    2965 	.db #0x00	; 0
      000A8F 0F                    2966 	.db #0x0f	; 15
      000A90 08                    2967 	.db #0x08	; 8
      000A91 08                    2968 	.db #0x08	; 8
      000A92 08                    2969 	.db #0x08	; 8
      000A93 08                    2970 	.db #0x08	; 8
      000A94 04                    2971 	.db #0x04	; 4
      000A95 02                    2972 	.db #0x02	; 2
      000A96 01                    2973 	.db #0x01	; 1
      000A97 00                    2974 	.db #0x00	; 0
      000A98 20                    2975 	.db #0x20	; 32
      000A99 20                    2976 	.db #0x20	; 32
      000A9A 3F                    2977 	.db #0x3f	; 63
      000A9B 00                    2978 	.db #0x00	; 0
      000A9C 00                    2979 	.db #0x00	; 0
      000A9D 00                    2980 	.db #0x00	; 0
      000A9E 00                    2981 	.db #0x00	; 0
      000A9F C0                    2982 	.db #0xc0	; 192
      000AA0 20                    2983 	.db #0x20	; 32
      000AA1 1F                    2984 	.db #0x1f	; 31
      000AA2 00                    2985 	.db #0x00	; 0
      000AA3 00                    2986 	.db #0x00	; 0
      000AA4 00                    2987 	.db #0x00	; 0
      000AA5 00                    2988 	.db #0x00	; 0
      000AA6 00                    2989 	.db #0x00	; 0
      000AA7 FF                    2990 	.db #0xff	; 255
      000AA8 00                    2991 	.db #0x00	; 0
      000AA9 00                    2992 	.db #0x00	; 0
      000AAA F0                    2993 	.db #0xf0	; 240
      000AAB 08                    2994 	.db #0x08	; 8
      000AAC 04                    2995 	.db #0x04	; 4
      000AAD 04                    2996 	.db #0x04	; 4
      000AAE 04                    2997 	.db #0x04	; 4
      000AAF 04                    2998 	.db #0x04	; 4
      000AB0 08                    2999 	.db #0x08	; 8
      000AB1 F0                    3000 	.db #0xf0	; 240
      000AB2 00                    3001 	.db #0x00	; 0
      000AB3 00                    3002 	.db #0x00	; 0
      000AB4 00                    3003 	.db #0x00	; 0
      000AB5 00                    3004 	.db #0x00	; 0
      000AB6 00                    3005 	.db #0x00	; 0
      000AB7 FF                    3006 	.db #0xff	; 255
      000AB8 80                    3007 	.db #0x80	; 128
      000AB9 40                    3008 	.db #0x40	; 64
      000ABA 20                    3009 	.db #0x20	; 32
      000ABB 10                    3010 	.db #0x10	; 16
      000ABC 10                    3011 	.db #0x10	; 16
      000ABD 10                    3012 	.db #0x10	; 16
      000ABE 10                    3013 	.db #0x10	; 16
      000ABF 10                    3014 	.db #0x10	; 16
      000AC0 10                    3015 	.db #0x10	; 16
      000AC1 10                    3016 	.db #0x10	; 16
      000AC2 10                    3017 	.db #0x10	; 16
      000AC3 10                    3018 	.db #0x10	; 16
      000AC4 20                    3019 	.db #0x20	; 32
      000AC5 40                    3020 	.db #0x40	; 64
      000AC6 80                    3021 	.db #0x80	; 128
      000AC7 00                    3022 	.db #0x00	; 0
      000AC8                       3023 _sprite_number_2_32x32:
      000AC8 00                    3024 	.db #0x00	; 0
      000AC9 01                    3025 	.db #0x01	; 1
      000ACA 02                    3026 	.db #0x02	; 2
      000ACB 04                    3027 	.db #0x04	; 4
      000ACC 08                    3028 	.db #0x08	; 8
      000ACD 08                    3029 	.db #0x08	; 8
      000ACE 08                    3030 	.db #0x08	; 8
      000ACF 08                    3031 	.db #0x08	; 8
      000AD0 0F                    3032 	.db #0x0f	; 15
      000AD1 00                    3033 	.db #0x00	; 0
      000AD2 00                    3034 	.db #0x00	; 0
      000AD3 00                    3035 	.db #0x00	; 0
      000AD4 00                    3036 	.db #0x00	; 0
      000AD5 00                    3037 	.db #0x00	; 0
      000AD6 00                    3038 	.db #0x00	; 0
      000AD7 00                    3039 	.db #0x00	; 0
      000AD8 FF                    3040 	.db #0xff	; 255
      000AD9 00                    3041 	.db #0x00	; 0
      000ADA 00                    3042 	.db #0x00	; 0
      000ADB 00                    3043 	.db #0x00	; 0
      000ADC 00                    3044 	.db #0x00	; 0
      000ADD 00                    3045 	.db #0x00	; 0
      000ADE 1F                    3046 	.db #0x1f	; 31
      000ADF 20                    3047 	.db #0x20	; 32
      000AE0 C0                    3048 	.db #0xc0	; 192
      000AE1 00                    3049 	.db #0x00	; 0
      000AE2 00                    3050 	.db #0x00	; 0
      000AE3 00                    3051 	.db #0x00	; 0
      000AE4 00                    3052 	.db #0x00	; 0
      000AE5 3F                    3053 	.db #0x3f	; 63
      000AE6 40                    3054 	.db #0x40	; 64
      000AE7 80                    3055 	.db #0x80	; 128
      000AE8 FF                    3056 	.db #0xff	; 255
      000AE9 00                    3057 	.db #0x00	; 0
      000AEA 00                    3058 	.db #0x00	; 0
      000AEB 00                    3059 	.db #0x00	; 0
      000AEC 00                    3060 	.db #0x00	; 0
      000AED 00                    3061 	.db #0x00	; 0
      000AEE F0                    3062 	.db #0xf0	; 240
      000AEF 08                    3063 	.db #0x08	; 8
      000AF0 04                    3064 	.db #0x04	; 4
      000AF1 04                    3065 	.db #0x04	; 4
      000AF2 04                    3066 	.db #0x04	; 4
      000AF3 04                    3067 	.db #0x04	; 4
      000AF4 08                    3068 	.db #0x08	; 8
      000AF5 F0                    3069 	.db #0xf0	; 240
      000AF6 00                    3070 	.db #0x00	; 0
      000AF7 00                    3071 	.db #0x00	; 0
      000AF8 00                    3072 	.db #0x00	; 0
      000AF9 80                    3073 	.db #0x80	; 128
      000AFA 40                    3074 	.db #0x40	; 64
      000AFB 20                    3075 	.db #0x20	; 32
      000AFC 10                    3076 	.db #0x10	; 16
      000AFD 10                    3077 	.db #0x10	; 16
      000AFE 10                    3078 	.db #0x10	; 16
      000AFF 10                    3079 	.db #0x10	; 16
      000B00 10                    3080 	.db #0x10	; 16
      000B01 10                    3081 	.db #0x10	; 16
      000B02 10                    3082 	.db #0x10	; 16
      000B03 10                    3083 	.db #0x10	; 16
      000B04 10                    3084 	.db #0x10	; 16
      000B05 10                    3085 	.db #0x10	; 16
      000B06 20                    3086 	.db #0x20	; 32
      000B07 40                    3087 	.db #0x40	; 64
      000B08 01                    3088 	.db #0x01	; 1
      000B09 02                    3089 	.db #0x02	; 2
      000B0A 04                    3090 	.db #0x04	; 4
      000B0B 08                    3091 	.db #0x08	; 8
      000B0C 08                    3092 	.db #0x08	; 8
      000B0D 08                    3093 	.db #0x08	; 8
      000B0E 08                    3094 	.db #0x08	; 8
      000B0F 08                    3095 	.db #0x08	; 8
      000B10 08                    3096 	.db #0x08	; 8
      000B11 08                    3097 	.db #0x08	; 8
      000B12 08                    3098 	.db #0x08	; 8
      000B13 08                    3099 	.db #0x08	; 8
      000B14 08                    3100 	.db #0x08	; 8
      000B15 08                    3101 	.db #0x08	; 8
      000B16 08                    3102 	.db #0x08	; 8
      000B17 0F                    3103 	.db #0x0f	; 15
      000B18 00                    3104 	.db #0x00	; 0
      000B19 00                    3105 	.db #0x00	; 0
      000B1A 07                    3106 	.db #0x07	; 7
      000B1B 08                    3107 	.db #0x08	; 8
      000B1C 10                    3108 	.db #0x10	; 16
      000B1D 20                    3109 	.db #0x20	; 32
      000B1E 20                    3110 	.db #0x20	; 32
      000B1F 20                    3111 	.db #0x20	; 32
      000B20 20                    3112 	.db #0x20	; 32
      000B21 3F                    3113 	.db #0x3f	; 63
      000B22 00                    3114 	.db #0x00	; 0
      000B23 00                    3115 	.db #0x00	; 0
      000B24 00                    3116 	.db #0x00	; 0
      000B25 00                    3117 	.db #0x00	; 0
      000B26 00                    3118 	.db #0x00	; 0
      000B27 FF                    3119 	.db #0xff	; 255
      000B28 00                    3120 	.db #0x00	; 0
      000B29 01                    3121 	.db #0x01	; 1
      000B2A FE                    3122 	.db #0xfe	; 254
      000B2B 00                    3123 	.db #0x00	; 0
      000B2C 00                    3124 	.db #0x00	; 0
      000B2D 00                    3125 	.db #0x00	; 0
      000B2E 00                    3126 	.db #0x00	; 0
      000B2F 07                    3127 	.db #0x07	; 7
      000B30 08                    3128 	.db #0x08	; 8
      000B31 F0                    3129 	.db #0xf0	; 240
      000B32 00                    3130 	.db #0x00	; 0
      000B33 00                    3131 	.db #0x00	; 0
      000B34 00                    3132 	.db #0x00	; 0
      000B35 00                    3133 	.db #0x00	; 0
      000B36 00                    3134 	.db #0x00	; 0
      000B37 FF                    3135 	.db #0xff	; 255
      000B38 80                    3136 	.db #0x80	; 128
      000B39 00                    3137 	.db #0x00	; 0
      000B3A 00                    3138 	.db #0x00	; 0
      000B3B 00                    3139 	.db #0x00	; 0
      000B3C 00                    3140 	.db #0x00	; 0
      000B3D 00                    3141 	.db #0x00	; 0
      000B3E 00                    3142 	.db #0x00	; 0
      000B3F F0                    3143 	.db #0xf0	; 240
      000B40 10                    3144 	.db #0x10	; 16
      000B41 10                    3145 	.db #0x10	; 16
      000B42 10                    3146 	.db #0x10	; 16
      000B43 10                    3147 	.db #0x10	; 16
      000B44 10                    3148 	.db #0x10	; 16
      000B45 10                    3149 	.db #0x10	; 16
      000B46 10                    3150 	.db #0x10	; 16
      000B47 F0                    3151 	.db #0xf0	; 240
      000B48                       3152 _sprite_number_1_32x32:
      000B48 00                    3153 	.db #0x00	; 0
      000B49 00                    3154 	.db #0x00	; 0
      000B4A 00                    3155 	.db #0x00	; 0
      000B4B 00                    3156 	.db #0x00	; 0
      000B4C 00                    3157 	.db #0x00	; 0
      000B4D 00                    3158 	.db #0x00	; 0
      000B4E 01                    3159 	.db #0x01	; 1
      000B4F 01                    3160 	.db #0x01	; 1
      000B50 01                    3161 	.db #0x01	; 1
      000B51 01                    3162 	.db #0x01	; 1
      000B52 00                    3163 	.db #0x00	; 0
      000B53 00                    3164 	.db #0x00	; 0
      000B54 00                    3165 	.db #0x00	; 0
      000B55 00                    3166 	.db #0x00	; 0
      000B56 00                    3167 	.db #0x00	; 0
      000B57 00                    3168 	.db #0x00	; 0
      000B58 07                    3169 	.db #0x07	; 7
      000B59 08                    3170 	.db #0x08	; 8
      000B5A 10                    3171 	.db #0x10	; 16
      000B5B 20                    3172 	.db #0x20	; 32
      000B5C 40                    3173 	.db #0x40	; 64
      000B5D 80                    3174 	.db #0x80	; 128
      000B5E 00                    3175 	.db #0x00	; 0
      000B5F 00                    3176 	.db #0x00	; 0
      000B60 00                    3177 	.db #0x00	; 0
      000B61 F8                    3178 	.db #0xf8	; 248
      000B62 08                    3179 	.db #0x08	; 8
      000B63 08                    3180 	.db #0x08	; 8
      000B64 08                    3181 	.db #0x08	; 8
      000B65 08                    3182 	.db #0x08	; 8
      000B66 08                    3183 	.db #0x08	; 8
      000B67 08                    3184 	.db #0x08	; 8
      000B68 F0                    3185 	.db #0xf0	; 240
      000B69 10                    3186 	.db #0x10	; 16
      000B6A 10                    3187 	.db #0x10	; 16
      000B6B 10                    3188 	.db #0x10	; 16
      000B6C 10                    3189 	.db #0x10	; 16
      000B6D 10                    3190 	.db #0x10	; 16
      000B6E 10                    3191 	.db #0x10	; 16
      000B6F 10                    3192 	.db #0x10	; 16
      000B70 10                    3193 	.db #0x10	; 16
      000B71 10                    3194 	.db #0x10	; 16
      000B72 10                    3195 	.db #0x10	; 16
      000B73 10                    3196 	.db #0x10	; 16
      000B74 10                    3197 	.db #0x10	; 16
      000B75 10                    3198 	.db #0x10	; 16
      000B76 10                    3199 	.db #0x10	; 16
      000B77 10                    3200 	.db #0x10	; 16
      000B78 00                    3201 	.db #0x00	; 0
      000B79 00                    3202 	.db #0x00	; 0
      000B7A 00                    3203 	.db #0x00	; 0
      000B7B 00                    3204 	.db #0x00	; 0
      000B7C 00                    3205 	.db #0x00	; 0
      000B7D 00                    3206 	.db #0x00	; 0
      000B7E 00                    3207 	.db #0x00	; 0
      000B7F 00                    3208 	.db #0x00	; 0
      000B80 00                    3209 	.db #0x00	; 0
      000B81 00                    3210 	.db #0x00	; 0
      000B82 00                    3211 	.db #0x00	; 0
      000B83 00                    3212 	.db #0x00	; 0
      000B84 00                    3213 	.db #0x00	; 0
      000B85 00                    3214 	.db #0x00	; 0
      000B86 00                    3215 	.db #0x00	; 0
      000B87 00                    3216 	.db #0x00	; 0
      000B88 00                    3217 	.db #0x00	; 0
      000B89 00                    3218 	.db #0x00	; 0
      000B8A 00                    3219 	.db #0x00	; 0
      000B8B 00                    3220 	.db #0x00	; 0
      000B8C 00                    3221 	.db #0x00	; 0
      000B8D 00                    3222 	.db #0x00	; 0
      000B8E 00                    3223 	.db #0x00	; 0
      000B8F 00                    3224 	.db #0x00	; 0
      000B90 00                    3225 	.db #0x00	; 0
      000B91 00                    3226 	.db #0x00	; 0
      000B92 00                    3227 	.db #0x00	; 0
      000B93 00                    3228 	.db #0x00	; 0
      000B94 00                    3229 	.db #0x00	; 0
      000B95 00                    3230 	.db #0x00	; 0
      000B96 00                    3231 	.db #0x00	; 0
      000B97 00                    3232 	.db #0x00	; 0
      000B98 08                    3233 	.db #0x08	; 8
      000B99 08                    3234 	.db #0x08	; 8
      000B9A 08                    3235 	.db #0x08	; 8
      000B9B 08                    3236 	.db #0x08	; 8
      000B9C 08                    3237 	.db #0x08	; 8
      000B9D 08                    3238 	.db #0x08	; 8
      000B9E 08                    3239 	.db #0x08	; 8
      000B9F 08                    3240 	.db #0x08	; 8
      000BA0 08                    3241 	.db #0x08	; 8
      000BA1 F8                    3242 	.db #0xf8	; 248
      000BA2 80                    3243 	.db #0x80	; 128
      000BA3 80                    3244 	.db #0x80	; 128
      000BA4 80                    3245 	.db #0x80	; 128
      000BA5 80                    3246 	.db #0x80	; 128
      000BA6 80                    3247 	.db #0x80	; 128
      000BA7 FF                    3248 	.db #0xff	; 255
      000BA8 10                    3249 	.db #0x10	; 16
      000BA9 10                    3250 	.db #0x10	; 16
      000BAA 10                    3251 	.db #0x10	; 16
      000BAB 10                    3252 	.db #0x10	; 16
      000BAC 10                    3253 	.db #0x10	; 16
      000BAD 10                    3254 	.db #0x10	; 16
      000BAE 10                    3255 	.db #0x10	; 16
      000BAF 10                    3256 	.db #0x10	; 16
      000BB0 10                    3257 	.db #0x10	; 16
      000BB1 1F                    3258 	.db #0x1f	; 31
      000BB2 01                    3259 	.db #0x01	; 1
      000BB3 01                    3260 	.db #0x01	; 1
      000BB4 01                    3261 	.db #0x01	; 1
      000BB5 01                    3262 	.db #0x01	; 1
      000BB6 01                    3263 	.db #0x01	; 1
      000BB7 FF                    3264 	.db #0xff	; 255
      000BB8 00                    3265 	.db #0x00	; 0
      000BB9 00                    3266 	.db #0x00	; 0
      000BBA 00                    3267 	.db #0x00	; 0
      000BBB 00                    3268 	.db #0x00	; 0
      000BBC 00                    3269 	.db #0x00	; 0
      000BBD 00                    3270 	.db #0x00	; 0
      000BBE 00                    3271 	.db #0x00	; 0
      000BBF 00                    3272 	.db #0x00	; 0
      000BC0 00                    3273 	.db #0x00	; 0
      000BC1 00                    3274 	.db #0x00	; 0
      000BC2 00                    3275 	.db #0x00	; 0
      000BC3 00                    3276 	.db #0x00	; 0
      000BC4 00                    3277 	.db #0x00	; 0
      000BC5 00                    3278 	.db #0x00	; 0
      000BC6 00                    3279 	.db #0x00	; 0
      000BC7 00                    3280 	.db #0x00	; 0
      000BC8                       3281 _sprite_go_32x32:
      000BC8 00                    3282 	.db #0x00	; 0
      000BC9 00                    3283 	.db #0x00	; 0
      000BCA 00                    3284 	.db #0x00	; 0
      000BCB 00                    3285 	.db #0x00	; 0
      000BCC 00                    3286 	.db #0x00	; 0
      000BCD 00                    3287 	.db #0x00	; 0
      000BCE 00                    3288 	.db #0x00	; 0
      000BCF 3F                    3289 	.db #0x3f	; 63
      000BD0 40                    3290 	.db #0x40	; 64
      000BD1 80                    3291 	.db #0x80	; 128
      000BD2 87                    3292 	.db #0x87	; 135
      000BD3 88                    3293 	.db #0x88	; 136
      000BD4 88                    3294 	.db #0x88	; 136
      000BD5 88                    3295 	.db #0x88	; 136
      000BD6 88                    3296 	.db #0x88	; 136
      000BD7 88                    3297 	.db #0x88	; 136
      000BD8 00                    3298 	.db #0x00	; 0
      000BD9 00                    3299 	.db #0x00	; 0
      000BDA 00                    3300 	.db #0x00	; 0
      000BDB 00                    3301 	.db #0x00	; 0
      000BDC 00                    3302 	.db #0x00	; 0
      000BDD 00                    3303 	.db #0x00	; 0
      000BDE 00                    3304 	.db #0x00	; 0
      000BDF C1                    3305 	.db #0xc1	; 193
      000BE0 22                    3306 	.db #0x22	; 34
      000BE1 14                    3307 	.db #0x14	; 20
      000BE2 14                    3308 	.db #0x14	; 20
      000BE3 94                    3309 	.db #0x94	; 148
      000BE4 F4                    3310 	.db #0xf4	; 244
      000BE5 04                    3311 	.db #0x04	; 4
      000BE6 04                    3312 	.db #0x04	; 4
      000BE7 04                    3313 	.db #0x04	; 4
      000BE8 00                    3314 	.db #0x00	; 0
      000BE9 00                    3315 	.db #0x00	; 0
      000BEA 00                    3316 	.db #0x00	; 0
      000BEB 00                    3317 	.db #0x00	; 0
      000BEC 00                    3318 	.db #0x00	; 0
      000BED 00                    3319 	.db #0x00	; 0
      000BEE 00                    3320 	.db #0x00	; 0
      000BEF FE                    3321 	.db #0xfe	; 254
      000BF0 01                    3322 	.db #0x01	; 1
      000BF1 00                    3323 	.db #0x00	; 0
      000BF2 00                    3324 	.db #0x00	; 0
      000BF3 30                    3325 	.db #0x30	; 48	'0'
      000BF4 48                    3326 	.db #0x48	; 72	'H'
      000BF5 48                    3327 	.db #0x48	; 72	'H'
      000BF6 48                    3328 	.db #0x48	; 72	'H'
      000BF7 48                    3329 	.db #0x48	; 72	'H'
      000BF8 00                    3330 	.db #0x00	; 0
      000BF9 00                    3331 	.db #0x00	; 0
      000BFA 00                    3332 	.db #0x00	; 0
      000BFB 00                    3333 	.db #0x00	; 0
      000BFC 00                    3334 	.db #0x00	; 0
      000BFD 00                    3335 	.db #0x00	; 0
      000BFE 00                    3336 	.db #0x00	; 0
      000BFF 3F                    3337 	.db #0x3f	; 63
      000C00 21                    3338 	.db #0x21	; 33
      000C01 A1                    3339 	.db #0xa1	; 161
      000C02 A1                    3340 	.db #0xa1	; 161
      000C03 A1                    3341 	.db #0xa1	; 161
      000C04 A1                    3342 	.db #0xa1	; 161
      000C05 A1                    3343 	.db #0xa1	; 161
      000C06 A1                    3344 	.db #0xa1	; 161
      000C07 A1                    3345 	.db #0xa1	; 161
      000C08 8B                    3346 	.db #0x8b	; 139
      000C09 8A                    3347 	.db #0x8a	; 138
      000C0A 8A                    3348 	.db #0x8a	; 138
      000C0B 8B                    3349 	.db #0x8b	; 139
      000C0C 89                    3350 	.db #0x89	; 137
      000C0D 86                    3351 	.db #0x86	; 134
      000C0E 80                    3352 	.db #0x80	; 128
      000C0F 40                    3353 	.db #0x40	; 64
      000C10 3F                    3354 	.db #0x3f	; 63
      000C11 00                    3355 	.db #0x00	; 0
      000C12 00                    3356 	.db #0x00	; 0
      000C13 00                    3357 	.db #0x00	; 0
      000C14 00                    3358 	.db #0x00	; 0
      000C15 00                    3359 	.db #0x00	; 0
      000C16 00                    3360 	.db #0x00	; 0
      000C17 00                    3361 	.db #0x00	; 0
      000C18 F4                    3362 	.db #0xf4	; 244
      000C19 14                    3363 	.db #0x14	; 20
      000C1A 14                    3364 	.db #0x14	; 20
      000C1B 14                    3365 	.db #0x14	; 20
      000C1C 14                    3366 	.db #0x14	; 20
      000C1D 14                    3367 	.db #0x14	; 20
      000C1E 14                    3368 	.db #0x14	; 20
      000C1F 22                    3369 	.db #0x22	; 34
      000C20 C1                    3370 	.db #0xc1	; 193
      000C21 00                    3371 	.db #0x00	; 0
      000C22 00                    3372 	.db #0x00	; 0
      000C23 00                    3373 	.db #0x00	; 0
      000C24 00                    3374 	.db #0x00	; 0
      000C25 00                    3375 	.db #0x00	; 0
      000C26 00                    3376 	.db #0x00	; 0
      000C27 00                    3377 	.db #0x00	; 0
      000C28 48                    3378 	.db #0x48	; 72	'H'
      000C29 48                    3379 	.db #0x48	; 72	'H'
      000C2A 48                    3380 	.db #0x48	; 72	'H'
      000C2B 48                    3381 	.db #0x48	; 72	'H'
      000C2C 30                    3382 	.db #0x30	; 48	'0'
      000C2D 00                    3383 	.db #0x00	; 0
      000C2E 00                    3384 	.db #0x00	; 0
      000C2F 01                    3385 	.db #0x01	; 1
      000C30 FE                    3386 	.db #0xfe	; 254
      000C31 00                    3387 	.db #0x00	; 0
      000C32 00                    3388 	.db #0x00	; 0
      000C33 00                    3389 	.db #0x00	; 0
      000C34 00                    3390 	.db #0x00	; 0
      000C35 00                    3391 	.db #0x00	; 0
      000C36 00                    3392 	.db #0x00	; 0
      000C37 00                    3393 	.db #0x00	; 0
      000C38 A1                    3394 	.db #0xa1	; 161
      000C39 A1                    3395 	.db #0xa1	; 161
      000C3A A1                    3396 	.db #0xa1	; 161
      000C3B BF                    3397 	.db #0xbf	; 191
      000C3C 80                    3398 	.db #0x80	; 128
      000C3D BF                    3399 	.db #0xbf	; 191
      000C3E A1                    3400 	.db #0xa1	; 161
      000C3F 21                    3401 	.db #0x21	; 33
      000C40 3F                    3402 	.db #0x3f	; 63
      000C41 00                    3403 	.db #0x00	; 0
      000C42 00                    3404 	.db #0x00	; 0
      000C43 00                    3405 	.db #0x00	; 0
      000C44 00                    3406 	.db #0x00	; 0
      000C45 00                    3407 	.db #0x00	; 0
      000C46 00                    3408 	.db #0x00	; 0
      000C47 00                    3409 	.db #0x00	; 0
                                   3410 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3411 ;	---------------------------------
                                   3412 ; Function HideArrowSprite
                                   3413 ; ---------------------------------
      000C48                       3414 _HideArrowSprite::
                                   3415 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3416 	ld	a, #0xc0
      000C4A F5               [11] 3417 	push	af
      000C4B 33               [ 6] 3418 	inc	sp
      000C4C 21 00 1B         [10] 3419 	ld	hl, #0x1b00
      000C4F E5               [11] 3420 	push	hl
      000C50 CDr00r00         [17] 3421 	call	_WRTVRM
      000C53 F1               [10] 3422 	pop	af
      000C54 33               [ 6] 3423 	inc	sp
                                   3424 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3425 	ret
                                   3426 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3427 ;	---------------------------------
                                   3428 ; Function DrawHitSprite
                                   3429 ; ---------------------------------
      000C56                       3430 _DrawHitSprite::
      000C56 DD E5            [15] 3431 	push	ix
      000C58 DD 21 00 00      [14] 3432 	ld	ix,#0
      000C5C DD 39            [15] 3433 	add	ix,sp
      000C5E 21 EC FF         [10] 3434 	ld	hl, #-20
      000C61 39               [11] 3435 	add	hl, sp
      000C62 F9               [ 6] 3436 	ld	sp, hl
                                   3437 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3438 	ld	hl, #0
      000C66 39               [11] 3439 	add	hl, sp
      000C67 EB               [ 4] 3440 	ex	de, hl
      000C68 3E 0F            [ 7] 3441 	ld	a, #0x0f
      000C6A 12               [ 7] 3442 	ld	(de), a
      000C6B 6B               [ 4] 3443 	ld	l, e
      000C6C 62               [ 4] 3444 	ld	h, d
      000C6D 23               [ 6] 3445 	inc	hl
      000C6E 36 0E            [10] 3446 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3447 	ld	l, e
      000C71 62               [ 4] 3448 	ld	h, d
      000C72 23               [ 6] 3449 	inc	hl
      000C73 23               [ 6] 3450 	inc	hl
      000C74 36 09            [10] 3451 	ld	(hl), #0x09
      000C76 6B               [ 4] 3452 	ld	l, e
      000C77 62               [ 4] 3453 	ld	h, d
      000C78 23               [ 6] 3454 	inc	hl
      000C79 23               [ 6] 3455 	inc	hl
      000C7A 23               [ 6] 3456 	inc	hl
      000C7B 36 06            [10] 3457 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3458 	ld	hl, #0x0004
      000C80 19               [11] 3459 	add	hl, de
      000C81 36 06            [10] 3460 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3461 	ld	hl, #0x0005
      000C86 19               [11] 3462 	add	hl, de
      000C87 36 09            [10] 3463 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3464 	ld	hl, #0x0006
      000C8C 19               [11] 3465 	add	hl, de
      000C8D 36 0E            [10] 3466 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3467 	ld	hl, #0x0007
      000C92 19               [11] 3468 	add	hl, de
      000C93 36 0F            [10] 3469 	ld	(hl), #0x0f
                                   3470 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3471 	ld	hl, #8
      000C98 39               [11] 3472 	add	hl, sp
      000C99 4D               [ 4] 3473 	ld	c, l
      000C9A 44               [ 4] 3474 	ld	b, h
      000C9B 36 0F            [10] 3475 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3476 	ld	l, c
      000C9E 60               [ 4] 3477 	ld	h, b
      000C9F 23               [ 6] 3478 	inc	hl
      000CA0 36 0E            [10] 3479 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3480 	ld	l, c
      000CA3 60               [ 4] 3481 	ld	h, b
      000CA4 23               [ 6] 3482 	inc	hl
      000CA5 23               [ 6] 3483 	inc	hl
      000CA6 36 03            [10] 3484 	ld	(hl), #0x03
      000CA8 69               [ 4] 3485 	ld	l, c
      000CA9 60               [ 4] 3486 	ld	h, b
      000CAA 23               [ 6] 3487 	inc	hl
      000CAB 23               [ 6] 3488 	inc	hl
      000CAC 23               [ 6] 3489 	inc	hl
      000CAD 36 0C            [10] 3490 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3491 	ld	hl, #0x0004
      000CB2 09               [11] 3492 	add	hl, bc
      000CB3 36 0C            [10] 3493 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3494 	ld	hl, #0x0005
      000CB8 09               [11] 3495 	add	hl, bc
      000CB9 36 03            [10] 3496 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3497 	ld	hl, #0x0006
      000CBE 09               [11] 3498 	add	hl, bc
      000CBF 36 0E            [10] 3499 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3500 	ld	hl, #0x0007
      000CC4 09               [11] 3501 	add	hl, bc
      000CC5 36 0F            [10] 3502 	ld	(hl), #0x0f
                                   3503 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3504 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3505 	and	a, #0x07
                                   3506 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3507 	ld	l, a
      000CCD 83               [ 4] 3508 	add	a,e
      000CCE 5F               [ 4] 3509 	ld	e, a
      000CCF 30 01            [12] 3510 	jr	NC, 00124$
      000CD1 14               [ 4] 3511 	inc	d
      000CD2                       3512 00124$:
      000CD2 1A               [ 7] 3513 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3514 	ld	-4 (ix), a
                                   3515 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3516 	ld	h, #0x00
      000CD8 09               [11] 3517 	add	hl, bc
      000CD9 7E               [ 7] 3518 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3519 	ld	-3 (ix), a
                                   3520 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3521 	ld	a, #0x01
      000CDF DD 96 05         [19] 3522 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3523 	ld	a, #0x00
      000CE4 17               [ 4] 3524 	rla
      000CE5 DD 77 FE         [19] 3525 	ld	-2 (ix), a
                                   3526 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3527 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3528 	or	a, a
      000CEC CArB7r0D         [10] 3529 	jp	Z, 00104$
                                   3530 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3531 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3532 	ld	a, c
      000CF3 C6 F8            [ 7] 3533 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3534 	ld	-1 (ix), a
      000CF8 C5               [11] 3535 	push	bc
      000CF9 F5               [11] 3536 	push	af
      000CFA 33               [ 6] 3537 	inc	sp
      000CFB 21 05 1B         [10] 3538 	ld	hl, #0x1b05
      000CFE E5               [11] 3539 	push	hl
      000CFF CDr00r00         [17] 3540 	call	_WRTVRM
      000D02 F1               [10] 3541 	pop	af
      000D03 33               [ 6] 3542 	inc	sp
      000D04 C1               [10] 3543 	pop	bc
                                   3544 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3545 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3546 	add	a, #0xfd
      000D0A 87               [ 4] 3547 	add	a, a
      000D0B 87               [ 4] 3548 	add	a, a
      000D0C C6 18            [ 7] 3549 	add	a, #0x18
      000D0E C5               [11] 3550 	push	bc
      000D0F F5               [11] 3551 	push	af
      000D10 33               [ 6] 3552 	inc	sp
      000D11 21 06 1B         [10] 3553 	ld	hl, #0x1b06
      000D14 E5               [11] 3554 	push	hl
      000D15 CDr00r00         [17] 3555 	call	_WRTVRM
      000D18 F1               [10] 3556 	pop	af
      000D19 33               [ 6] 3557 	inc	sp
      000D1A C1               [10] 3558 	pop	bc
                                   3559 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3560 	ld	a, c
      000D1C C6 08            [ 7] 3561 	add	a, #0x08
      000D1E 47               [ 4] 3562 	ld	b, a
      000D1F C5               [11] 3563 	push	bc
      000D20 C5               [11] 3564 	push	bc
      000D21 33               [ 6] 3565 	inc	sp
      000D22 21 09 1B         [10] 3566 	ld	hl, #0x1b09
      000D25 E5               [11] 3567 	push	hl
      000D26 CDr00r00         [17] 3568 	call	_WRTVRM
      000D29 F1               [10] 3569 	pop	af
      000D2A 33               [ 6] 3570 	inc	sp
      000D2B 3E 04            [ 7] 3571 	ld	a, #0x04
      000D2D F5               [11] 3572 	push	af
      000D2E 33               [ 6] 3573 	inc	sp
      000D2F 21 0A 1B         [10] 3574 	ld	hl, #0x1b0a
      000D32 E5               [11] 3575 	push	hl
      000D33 CDr00r00         [17] 3576 	call	_WRTVRM
      000D36 F1               [10] 3577 	pop	af
      000D37 33               [ 6] 3578 	inc	sp
      000D38 C1               [10] 3579 	pop	bc
                                   3580 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3581 	ld	a, c
      000D3A C6 18            [ 7] 3582 	add	a, #0x18
      000D3C 4F               [ 4] 3583 	ld	c, a
      000D3D C5               [11] 3584 	push	bc
      000D3E 79               [ 4] 3585 	ld	a, c
      000D3F F5               [11] 3586 	push	af
      000D40 33               [ 6] 3587 	inc	sp
      000D41 21 0D 1B         [10] 3588 	ld	hl, #0x1b0d
      000D44 E5               [11] 3589 	push	hl
      000D45 CDr00r00         [17] 3590 	call	_WRTVRM
      000D48 F1               [10] 3591 	pop	af
      000D49 33               [ 6] 3592 	inc	sp
      000D4A 3E 08            [ 7] 3593 	ld	a, #0x08
      000D4C F5               [11] 3594 	push	af
      000D4D 33               [ 6] 3595 	inc	sp
      000D4E 21 0E 1B         [10] 3596 	ld	hl, #0x1b0e
      000D51 E5               [11] 3597 	push	hl
      000D52 CDr00r00         [17] 3598 	call	_WRTVRM
      000D55 F1               [10] 3599 	pop	af
      000D56 33               [ 6] 3600 	inc	sp
      000D57 C1               [10] 3601 	pop	bc
                                   3602 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3603 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3604 	or	a, a
      000D5C 28 59            [12] 3605 	jr	Z, 00104$
                                   3606 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3607 	push	bc
      000D5F DD 7E FF         [19] 3608 	ld	a, -1 (ix)
      000D62 F5               [11] 3609 	push	af
      000D63 33               [ 6] 3610 	inc	sp
      000D64 21 11 1B         [10] 3611 	ld	hl, #0x1b11
      000D67 E5               [11] 3612 	push	hl
      000D68 CDr00r00         [17] 3613 	call	_WRTVRM
      000D6B F1               [10] 3614 	pop	af
      000D6C 33               [ 6] 3615 	inc	sp
      000D6D C1               [10] 3616 	pop	bc
                                   3617 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3618 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3619 	dec	a
      000D72 3D               [ 4] 3620 	dec	a
      000D73 87               [ 4] 3621 	add	a, a
      000D74 87               [ 4] 3622 	add	a, a
      000D75 C6 14            [ 7] 3623 	add	a, #0x14
      000D77 C5               [11] 3624 	push	bc
      000D78 F5               [11] 3625 	push	af
      000D79 33               [ 6] 3626 	inc	sp
      000D7A 21 12 1B         [10] 3627 	ld	hl, #0x1b12
      000D7D E5               [11] 3628 	push	hl
      000D7E CDr00r00         [17] 3629 	call	_WRTVRM
      000D81 F1               [10] 3630 	pop	af
      000D82 33               [ 6] 3631 	inc	sp
      000D83 C1               [10] 3632 	pop	bc
                                   3633 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3634 	push	bc
      000D85 C5               [11] 3635 	push	bc
      000D86 33               [ 6] 3636 	inc	sp
      000D87 21 15 1B         [10] 3637 	ld	hl, #0x1b15
      000D8A E5               [11] 3638 	push	hl
      000D8B CDr00r00         [17] 3639 	call	_WRTVRM
      000D8E F1               [10] 3640 	pop	af
      000D8F 33               [ 6] 3641 	inc	sp
      000D90 3E 0C            [ 7] 3642 	ld	a, #0x0c
      000D92 F5               [11] 3643 	push	af
      000D93 33               [ 6] 3644 	inc	sp
      000D94 21 16 1B         [10] 3645 	ld	hl, #0x1b16
      000D97 E5               [11] 3646 	push	hl
      000D98 CDr00r00         [17] 3647 	call	_WRTVRM
      000D9B F1               [10] 3648 	pop	af
      000D9C 33               [ 6] 3649 	inc	sp
      000D9D C1               [10] 3650 	pop	bc
                                   3651 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3652 	ld	a, c
      000D9F F5               [11] 3653 	push	af
      000DA0 33               [ 6] 3654 	inc	sp
      000DA1 21 19 1B         [10] 3655 	ld	hl, #0x1b19
      000DA4 E5               [11] 3656 	push	hl
      000DA5 CDr00r00         [17] 3657 	call	_WRTVRM
      000DA8 F1               [10] 3658 	pop	af
      000DA9 33               [ 6] 3659 	inc	sp
                                   3660 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3661 	ld	a, #0x10
      000DAC F5               [11] 3662 	push	af
      000DAD 33               [ 6] 3663 	inc	sp
      000DAE 21 1A 1B         [10] 3664 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3665 	push	hl
      000DB2 CDr00r00         [17] 3666 	call	_WRTVRM
      000DB5 F1               [10] 3667 	pop	af
      000DB6 33               [ 6] 3668 	inc	sp
      000DB7                       3669 00104$:
                                   3670 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3671 	ld	a, 7 (ix)
      000DBA F5               [11] 3672 	push	af
      000DBB 33               [ 6] 3673 	inc	sp
      000DBC 21 04 1B         [10] 3674 	ld	hl, #0x1b04
      000DBF E5               [11] 3675 	push	hl
      000DC0 CDr00r00         [17] 3676 	call	_WRTVRM
      000DC3 F1               [10] 3677 	pop	af
      000DC4 33               [ 6] 3678 	inc	sp
                                   3679 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3680 	ld	a, -4 (ix)
      000DC8 F5               [11] 3681 	push	af
      000DC9 33               [ 6] 3682 	inc	sp
      000DCA 21 07 1B         [10] 3683 	ld	hl, #0x1b07
      000DCD E5               [11] 3684 	push	hl
      000DCE CDr00r00         [17] 3685 	call	_WRTVRM
      000DD1 F1               [10] 3686 	pop	af
      000DD2 33               [ 6] 3687 	inc	sp
                                   3688 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3689 	ld	a, 7 (ix)
      000DD6 F5               [11] 3690 	push	af
      000DD7 33               [ 6] 3691 	inc	sp
      000DD8 21 08 1B         [10] 3692 	ld	hl, #0x1b08
      000DDB E5               [11] 3693 	push	hl
      000DDC CDr00r00         [17] 3694 	call	_WRTVRM
      000DDF F1               [10] 3695 	pop	af
      000DE0 33               [ 6] 3696 	inc	sp
                                   3697 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3698 	ld	a, -4 (ix)
      000DE4 F5               [11] 3699 	push	af
      000DE5 33               [ 6] 3700 	inc	sp
      000DE6 21 0B 1B         [10] 3701 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3702 	push	hl
      000DEA CDr00r00         [17] 3703 	call	_WRTVRM
      000DED F1               [10] 3704 	pop	af
      000DEE 33               [ 6] 3705 	inc	sp
                                   3706 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3707 	ld	a, 7 (ix)
      000DF2 F5               [11] 3708 	push	af
      000DF3 33               [ 6] 3709 	inc	sp
      000DF4 21 0C 1B         [10] 3710 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3711 	push	hl
      000DF8 CDr00r00         [17] 3712 	call	_WRTVRM
      000DFB F1               [10] 3713 	pop	af
      000DFC 33               [ 6] 3714 	inc	sp
                                   3715 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3716 	ld	a, -4 (ix)
      000E00 F5               [11] 3717 	push	af
      000E01 33               [ 6] 3718 	inc	sp
      000E02 21 0F 1B         [10] 3719 	ld	hl, #0x1b0f
      000E05 E5               [11] 3720 	push	hl
      000E06 CDr00r00         [17] 3721 	call	_WRTVRM
      000E09 F1               [10] 3722 	pop	af
      000E0A 33               [ 6] 3723 	inc	sp
                                   3724 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3725 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3726 	or	a, a
      000E0F 28 52            [12] 3727 	jr	Z, 00107$
                                   3728 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3729 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3730 	add	a, #0x10
      000E16 47               [ 4] 3731 	ld	b, a
      000E17 C5               [11] 3732 	push	bc
      000E18 C5               [11] 3733 	push	bc
      000E19 33               [ 6] 3734 	inc	sp
      000E1A 21 10 1B         [10] 3735 	ld	hl, #0x1b10
      000E1D E5               [11] 3736 	push	hl
      000E1E CDr00r00         [17] 3737 	call	_WRTVRM
      000E21 F1               [10] 3738 	pop	af
      000E22 33               [ 6] 3739 	inc	sp
      000E23 DD 7E FD         [19] 3740 	ld	a, -3 (ix)
      000E26 F5               [11] 3741 	push	af
      000E27 33               [ 6] 3742 	inc	sp
      000E28 21 13 1B         [10] 3743 	ld	hl, #0x1b13
      000E2B E5               [11] 3744 	push	hl
      000E2C CDr00r00         [17] 3745 	call	_WRTVRM
      000E2F F1               [10] 3746 	pop	af
      000E30 33               [ 6] 3747 	inc	sp
      000E31 C1               [10] 3748 	pop	bc
                                   3749 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3750 	push	bc
      000E33 C5               [11] 3751 	push	bc
      000E34 33               [ 6] 3752 	inc	sp
      000E35 21 14 1B         [10] 3753 	ld	hl, #0x1b14
      000E38 E5               [11] 3754 	push	hl
      000E39 CDr00r00         [17] 3755 	call	_WRTVRM
      000E3C F1               [10] 3756 	pop	af
      000E3D 33               [ 6] 3757 	inc	sp
      000E3E DD 7E FD         [19] 3758 	ld	a, -3 (ix)
      000E41 F5               [11] 3759 	push	af
      000E42 33               [ 6] 3760 	inc	sp
      000E43 21 17 1B         [10] 3761 	ld	hl, #0x1b17
      000E46 E5               [11] 3762 	push	hl
      000E47 CDr00r00         [17] 3763 	call	_WRTVRM
      000E4A F1               [10] 3764 	pop	af
      000E4B 33               [ 6] 3765 	inc	sp
      000E4C 33               [ 6] 3766 	inc	sp
      000E4D 21 18 1B         [10] 3767 	ld	hl, #0x1b18
      000E50 E5               [11] 3768 	push	hl
      000E51 CDr00r00         [17] 3769 	call	_WRTVRM
      000E54 F1               [10] 3770 	pop	af
      000E55 33               [ 6] 3771 	inc	sp
                                   3772 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3773 	ld	a, -3 (ix)
      000E59 F5               [11] 3774 	push	af
      000E5A 33               [ 6] 3775 	inc	sp
      000E5B 21 1B 1B         [10] 3776 	ld	hl, #0x1b1b
      000E5E E5               [11] 3777 	push	hl
      000E5F CDr00r00         [17] 3778 	call	_WRTVRM
      000E62 F1               [10] 3779 	pop	af
      000E63                       3780 00107$:
                                   3781 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3782 	ld	sp, ix
      000E65 DD E1            [14] 3783 	pop	ix
      000E67 C9               [10] 3784 	ret
                                   3785 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3786 ;	---------------------------------
                                   3787 ; Function HideHitSprite
                                   3788 ; ---------------------------------
      000E68                       3789 _HideHitSprite::
                                   3790 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3791 	ld	a, #0xc0
      000E6A F5               [11] 3792 	push	af
      000E6B 33               [ 6] 3793 	inc	sp
      000E6C 21 04 1B         [10] 3794 	ld	hl, #0x1b04
      000E6F E5               [11] 3795 	push	hl
      000E70 CDr00r00         [17] 3796 	call	_WRTVRM
      000E73 F1               [10] 3797 	pop	af
      000E74 33               [ 6] 3798 	inc	sp
                                   3799 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3800 	ld	a, #0xc0
      000E77 F5               [11] 3801 	push	af
      000E78 33               [ 6] 3802 	inc	sp
      000E79 21 08 1B         [10] 3803 	ld	hl, #0x1b08
      000E7C E5               [11] 3804 	push	hl
      000E7D CDr00r00         [17] 3805 	call	_WRTVRM
      000E80 F1               [10] 3806 	pop	af
      000E81 33               [ 6] 3807 	inc	sp
                                   3808 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3809 	ld	a, #0xc0
      000E84 F5               [11] 3810 	push	af
      000E85 33               [ 6] 3811 	inc	sp
      000E86 21 0C 1B         [10] 3812 	ld	hl, #0x1b0c
      000E89 E5               [11] 3813 	push	hl
      000E8A CDr00r00         [17] 3814 	call	_WRTVRM
      000E8D F1               [10] 3815 	pop	af
      000E8E 33               [ 6] 3816 	inc	sp
                                   3817 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3818 	ld	a, #0xc0
      000E91 F5               [11] 3819 	push	af
      000E92 33               [ 6] 3820 	inc	sp
      000E93 21 10 1B         [10] 3821 	ld	hl, #0x1b10
      000E96 E5               [11] 3822 	push	hl
      000E97 CDr00r00         [17] 3823 	call	_WRTVRM
      000E9A F1               [10] 3824 	pop	af
      000E9B 33               [ 6] 3825 	inc	sp
                                   3826 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3827 	ld	a, #0xc0
      000E9E F5               [11] 3828 	push	af
      000E9F 33               [ 6] 3829 	inc	sp
      000EA0 21 14 1B         [10] 3830 	ld	hl, #0x1b14
      000EA3 E5               [11] 3831 	push	hl
      000EA4 CDr00r00         [17] 3832 	call	_WRTVRM
      000EA7 F1               [10] 3833 	pop	af
      000EA8 33               [ 6] 3834 	inc	sp
                                   3835 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3836 	ld	a, #0xc0
      000EAB F5               [11] 3837 	push	af
      000EAC 33               [ 6] 3838 	inc	sp
      000EAD 21 18 1B         [10] 3839 	ld	hl, #0x1b18
      000EB0 E5               [11] 3840 	push	hl
      000EB1 CDr00r00         [17] 3841 	call	_WRTVRM
      000EB4 F1               [10] 3842 	pop	af
      000EB5 33               [ 6] 3843 	inc	sp
                                   3844 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3845 	ret
                                   3846 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3847 ;	---------------------------------
                                   3848 ; Function HideExplosionSprite
                                   3849 ; ---------------------------------
      000EB7                       3850 _HideExplosionSprite::
                                   3851 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3852 	ld	a, #0xc0
      000EB9 F5               [11] 3853 	push	af
      000EBA 33               [ 6] 3854 	inc	sp
      000EBB 21 1C 1B         [10] 3855 	ld	hl, #0x1b1c
      000EBE E5               [11] 3856 	push	hl
      000EBF CDr00r00         [17] 3857 	call	_WRTVRM
      000EC2 F1               [10] 3858 	pop	af
      000EC3 33               [ 6] 3859 	inc	sp
                                   3860 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3861 	ld	a, #0xc0
      000EC6 F5               [11] 3862 	push	af
      000EC7 33               [ 6] 3863 	inc	sp
      000EC8 21 20 1B         [10] 3864 	ld	hl, #0x1b20
      000ECB E5               [11] 3865 	push	hl
      000ECC CDr00r00         [17] 3866 	call	_WRTVRM
      000ECF F1               [10] 3867 	pop	af
      000ED0 33               [ 6] 3868 	inc	sp
                                   3869 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3870 	ld	a, #0xc0
      000ED3 F5               [11] 3871 	push	af
      000ED4 33               [ 6] 3872 	inc	sp
      000ED5 21 24 1B         [10] 3873 	ld	hl, #0x1b24
      000ED8 E5               [11] 3874 	push	hl
      000ED9 CDr00r00         [17] 3875 	call	_WRTVRM
      000EDC F1               [10] 3876 	pop	af
      000EDD 33               [ 6] 3877 	inc	sp
                                   3878 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3879 	ret
                                   3880 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3881 ;	---------------------------------
                                   3882 ; Function DrawExplosionSprite
                                   3883 ; ---------------------------------
      000EDF                       3884 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3885 	dec	sp
                                   3886 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3887 	ld	iy, #5
      000EE4 FD 39            [15] 3888 	add	iy, sp
      000EE6 FD 6E 00         [19] 3889 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3890 	srl	l
      000EEB CB 3D            [ 8] 3891 	srl	l
                                   3892 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3893 	ld	a, #0x07
      000EEF 95               [ 4] 3894 	sub	a, l
      000EF0 30 07            [12] 3895 	jr	NC, 00102$
                                   3896 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3897 	inc	sp
      000EF3 C3rB7r0E         [10] 3898 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3899 	jp	00104$
      000EF9                       3900 00102$:
                                   3901 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3902 	add	hl, hl
      000EFA 29               [11] 3903 	add	hl, hl
                                   3904 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3905 	ld	iy, #4
      000EFF FD 39            [15] 3906 	add	iy, sp
      000F01 FD 7E 00         [19] 3907 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3908 	add	a, #0xf0
      000F06 67               [ 4] 3909 	ld	h, a
      000F07 E5               [11] 3910 	push	hl
      000F08 E5               [11] 3911 	push	hl
      000F09 33               [ 6] 3912 	inc	sp
      000F0A 11 1C 1B         [10] 3913 	ld	de, #0x1b1c
      000F0D D5               [11] 3914 	push	de
      000F0E CDr00r00         [17] 3915 	call	_WRTVRM
      000F11 F1               [10] 3916 	pop	af
      000F12 33               [ 6] 3917 	inc	sp
      000F13 21 05 00         [10] 3918 	ld	hl, #5
      000F16 39               [11] 3919 	add	hl, sp
      000F17 7E               [ 7] 3920 	ld	a, (hl)
      000F18 F5               [11] 3921 	push	af
      000F19 33               [ 6] 3922 	inc	sp
      000F1A 11 1D 1B         [10] 3923 	ld	de, #0x1b1d
      000F1D D5               [11] 3924 	push	de
      000F1E CDr00r00         [17] 3925 	call	_WRTVRM
      000F21 F1               [10] 3926 	pop	af
      000F22 33               [ 6] 3927 	inc	sp
      000F23 E1               [10] 3928 	pop	hl
                                   3929 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3930 	ld	a, l
      000F25 C6 2C            [ 7] 3931 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3932 	ld	iy, #0
      000F2B FD 39            [15] 3933 	add	iy, sp
      000F2D FD 77 00         [19] 3934 	ld	0 (iy), a
      000F30 E5               [11] 3935 	push	hl
      000F31 F5               [11] 3936 	push	af
      000F32 33               [ 6] 3937 	inc	sp
      000F33 11 1E 1B         [10] 3938 	ld	de, #0x1b1e
      000F36 D5               [11] 3939 	push	de
      000F37 CDr00r00         [17] 3940 	call	_WRTVRM
      000F3A F1               [10] 3941 	pop	af
      000F3B 33               [ 6] 3942 	inc	sp
      000F3C 3E 0F            [ 7] 3943 	ld	a, #0x0f
      000F3E F5               [11] 3944 	push	af
      000F3F 33               [ 6] 3945 	inc	sp
      000F40 11 1F 1B         [10] 3946 	ld	de, #0x1b1f
      000F43 D5               [11] 3947 	push	de
      000F44 CDr00r00         [17] 3948 	call	_WRTVRM
      000F47 F1               [10] 3949 	pop	af
      000F48 33               [ 6] 3950 	inc	sp
      000F49 E1               [10] 3951 	pop	hl
                                   3952 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3953 	push	hl
      000F4B E5               [11] 3954 	push	hl
      000F4C 33               [ 6] 3955 	inc	sp
      000F4D 11 20 1B         [10] 3956 	ld	de, #0x1b20
      000F50 D5               [11] 3957 	push	de
      000F51 CDr00r00         [17] 3958 	call	_WRTVRM
      000F54 F1               [10] 3959 	pop	af
      000F55 33               [ 6] 3960 	inc	sp
      000F56 E1               [10] 3961 	pop	hl
                                   3962 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3963 	ld	iy, #3
      000F5B FD 39            [15] 3964 	add	iy, sp
      000F5D FD 6E 00         [19] 3965 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3966 	ld	a, l
      000F61 C6 10            [ 7] 3967 	add	a, #0x10
      000F63 E5               [11] 3968 	push	hl
      000F64 F5               [11] 3969 	push	af
      000F65 33               [ 6] 3970 	inc	sp
      000F66 11 21 1B         [10] 3971 	ld	de, #0x1b21
      000F69 D5               [11] 3972 	push	de
      000F6A CDr00r00         [17] 3973 	call	_WRTVRM
      000F6D F1               [10] 3974 	pop	af
      000F6E 33               [ 6] 3975 	inc	sp
      000F6F 21 02 00         [10] 3976 	ld	hl, #2
      000F72 39               [11] 3977 	add	hl, sp
      000F73 7E               [ 7] 3978 	ld	a, (hl)
      000F74 F5               [11] 3979 	push	af
      000F75 33               [ 6] 3980 	inc	sp
      000F76 11 22 1B         [10] 3981 	ld	de, #0x1b22
      000F79 D5               [11] 3982 	push	de
      000F7A CDr00r00         [17] 3983 	call	_WRTVRM
      000F7D F1               [10] 3984 	pop	af
      000F7E 33               [ 6] 3985 	inc	sp
      000F7F 3E 0A            [ 7] 3986 	ld	a, #0x0a
      000F81 F5               [11] 3987 	push	af
      000F82 33               [ 6] 3988 	inc	sp
      000F83 11 23 1B         [10] 3989 	ld	de, #0x1b23
      000F86 D5               [11] 3990 	push	de
      000F87 CDr00r00         [17] 3991 	call	_WRTVRM
      000F8A F1               [10] 3992 	pop	af
      000F8B 33               [ 6] 3993 	inc	sp
      000F8C E1               [10] 3994 	pop	hl
                                   3995 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 3996 	push	hl
      000F8E E5               [11] 3997 	push	hl
      000F8F 33               [ 6] 3998 	inc	sp
      000F90 11 24 1B         [10] 3999 	ld	de, #0x1b24
      000F93 D5               [11] 4000 	push	de
      000F94 CDr00r00         [17] 4001 	call	_WRTVRM
      000F97 F1               [10] 4002 	pop	af
      000F98 33               [ 6] 4003 	inc	sp
      000F99 E1               [10] 4004 	pop	hl
                                   4005 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4006 	ld	a, l
      000F9B C6 20            [ 7] 4007 	add	a, #0x20
      000F9D F5               [11] 4008 	push	af
      000F9E 33               [ 6] 4009 	inc	sp
      000F9F 21 25 1B         [10] 4010 	ld	hl, #0x1b25
      000FA2 E5               [11] 4011 	push	hl
      000FA3 CDr00r00         [17] 4012 	call	_WRTVRM
      000FA6 F1               [10] 4013 	pop	af
      000FA7 33               [ 6] 4014 	inc	sp
                                   4015 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4016 	ld	hl, #0
      000FAB 39               [11] 4017 	add	hl, sp
      000FAC 7E               [ 7] 4018 	ld	a, (hl)
      000FAD F5               [11] 4019 	push	af
      000FAE 33               [ 6] 4020 	inc	sp
      000FAF 21 26 1B         [10] 4021 	ld	hl, #0x1b26
      000FB2 E5               [11] 4022 	push	hl
      000FB3 CDr00r00         [17] 4023 	call	_WRTVRM
      000FB6 F1               [10] 4024 	pop	af
      000FB7 33               [ 6] 4025 	inc	sp
                                   4026 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4027 	ld	a, #0x03
      000FBA F5               [11] 4028 	push	af
      000FBB 33               [ 6] 4029 	inc	sp
      000FBC 21 27 1B         [10] 4030 	ld	hl, #0x1b27
      000FBF E5               [11] 4031 	push	hl
      000FC0 CDr00r00         [17] 4032 	call	_WRTVRM
      000FC3 F1               [10] 4033 	pop	af
      000FC4 33               [ 6] 4034 	inc	sp
      000FC5                       4035 00104$:
                                   4036 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4037 	inc	sp
      000FC6 C9               [10] 4038 	ret
                                   4039 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   4040 ;	---------------------------------
                                   4041 ; Function DrawChar
                                   4042 ; ---------------------------------
      000FC7                       4043 _DrawChar::
      000FC7 DD E5            [15] 4044 	push	ix
      000FC9 DD 21 00 00      [14] 4045 	ld	ix,#0
      000FCD DD 39            [15] 4046 	add	ix,sp
                                   4047 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000FCF DD 6E 06         [19] 4048 	ld	l, 6 (ix)
      000FD2 26 00            [ 7] 4049 	ld	h, #0x00
      000FD4 29               [11] 4050 	add	hl, hl
      000FD5 29               [11] 4051 	add	hl, hl
      000FD6 29               [11] 4052 	add	hl, hl
      000FD7 29               [11] 4053 	add	hl, hl
      000FD8 29               [11] 4054 	add	hl, hl
      000FD9 01 00 18         [10] 4055 	ld	bc, #0x1800
      000FDC 09               [11] 4056 	add	hl, bc
      000FDD DD 4E 05         [19] 4057 	ld	c, 5 (ix)
      000FE0 06 00            [ 7] 4058 	ld	b, #0x00
      000FE2 09               [11] 4059 	add	hl, bc
      000FE3 DD 7E 04         [19] 4060 	ld	a, 4 (ix)
      000FE6 F5               [11] 4061 	push	af
      000FE7 33               [ 6] 4062 	inc	sp
      000FE8 E5               [11] 4063 	push	hl
      000FE9 CDr00r00         [17] 4064 	call	_WRTVRM
      000FEC F1               [10] 4065 	pop	af
      000FED 33               [ 6] 4066 	inc	sp
                                   4067 ;src\/Graphics\Graphics.h:3: }
      000FEE DD E1            [14] 4068 	pop	ix
      000FF0 C9               [10] 4069 	ret
                                   4070 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   4071 ;	---------------------------------
                                   4072 ; Function DrawString
                                   4073 ; ---------------------------------
      000FF1                       4074 _DrawString::
      000FF1 DD E5            [15] 4075 	push	ix
      000FF3 DD 21 00 00      [14] 4076 	ld	ix,#0
      000FF7 DD 39            [15] 4077 	add	ix,sp
                                   4078 ;src\/Graphics\Graphics.h:6: while (*str) {
      000FF9 DD 6E 06         [19] 4079 	ld	l, 6 (ix)
      000FFC DD 4E 04         [19] 4080 	ld	c, 4 (ix)
      000FFF DD 46 05         [19] 4081 	ld	b, 5 (ix)
      001002                       4082 00101$:
      001002 0A               [ 7] 4083 	ld	a, (bc)
      001003 B7               [ 4] 4084 	or	a, a
      001004 28 1A            [12] 4085 	jr	Z, 00104$
                                   4086 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      001006 55               [ 4] 4087 	ld	d, l
      001007 2C               [ 4] 4088 	inc	l
      001008 DD 75 06         [19] 4089 	ld	6 (ix), l
      00100B 03               [ 6] 4090 	inc	bc
      00100C C6 0F            [ 7] 4091 	add	a, #0x0f
      00100E E5               [11] 4092 	push	hl
      00100F C5               [11] 4093 	push	bc
      001010 DD 66 07         [19] 4094 	ld	h, 7 (ix)
      001013 6A               [ 4] 4095 	ld	l, d
      001014 E5               [11] 4096 	push	hl
      001015 F5               [11] 4097 	push	af
      001016 33               [ 6] 4098 	inc	sp
      001017 CDrC7r0F         [17] 4099 	call	_DrawChar
      00101A F1               [10] 4100 	pop	af
      00101B 33               [ 6] 4101 	inc	sp
      00101C C1               [10] 4102 	pop	bc
      00101D E1               [10] 4103 	pop	hl
      00101E 18 E2            [12] 4104 	jr	00101$
      001020                       4105 00104$:
                                   4106 ;src\/Graphics\Graphics.h:9: }
      001020 DD E1            [14] 4107 	pop	ix
      001022 C9               [10] 4108 	ret
                                   4109 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   4110 ;	---------------------------------
                                   4111 ; Function DrawNumber
                                   4112 ; ---------------------------------
      001023                       4113 _DrawNumber::
      001023 DD E5            [15] 4114 	push	ix
      001025 DD 21 00 00      [14] 4115 	ld	ix,#0
      001029 DD 39            [15] 4116 	add	ix,sp
      00102B 21 FA FF         [10] 4117 	ld	hl, #-6
      00102E 39               [11] 4118 	add	hl, sp
      00102F F9               [ 6] 4119 	ld	sp, hl
                                   4120 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      001030 DD 36 FA 01      [19] 4121 	ld	-6 (ix), #0x01
                                   4122 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      001034 DD 66 07         [19] 4123 	ld	h, 7 (ix)
      001037 DD 6E 06         [19] 4124 	ld	l, 6 (ix)
      00103A E5               [11] 4125 	push	hl
      00103B 21rD7r10         [10] 4126 	ld	hl, #___str_0
      00103E E5               [11] 4127 	push	hl
      00103F CDrF1r0F         [17] 4128 	call	_DrawString
      001042 F1               [10] 4129 	pop	af
      001043 F1               [10] 4130 	pop	af
                                   4131 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      001044 DD 7E 06         [19] 4132 	ld	a, 6 (ix)
      001047 DD 77 FF         [19] 4133 	ld	-1 (ix), a
      00104A 1E 06            [ 7] 4134 	ld	e, #0x06
      00104C                       4135 00109$:
      00104C 7B               [ 4] 4136 	ld	a, e
      00104D B7               [ 4] 4137 	or	a, a
      00104E CArD2r10         [10] 4138 	jp	Z, 00111$
                                   4139 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      001051 7B               [ 4] 4140 	ld	a, e
      001052 3D               [ 4] 4141 	dec	a
      001053 D5               [11] 4142 	push	de
      001054 57               [ 4] 4143 	ld	d,a
      001055 1E 0A            [ 7] 4144 	ld	e,#0x0a
      001057 D5               [11] 4145 	push	de
      001058 CDr1Dr00         [17] 4146 	call	_Power
      00105B F1               [10] 4147 	pop	af
      00105C D1               [10] 4148 	pop	de
      00105D DD 75 FB         [19] 4149 	ld	-5 (ix), l
      001060 DD 74 FC         [19] 4150 	ld	-4 (ix), h
                                   4151 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      001063 D5               [11] 4152 	push	de
      001064 DD 6E FB         [19] 4153 	ld	l, -5 (ix)
      001067 DD 66 FC         [19] 4154 	ld	h, -4 (ix)
      00106A E5               [11] 4155 	push	hl
      00106B DD 6E 04         [19] 4156 	ld	l, 4 (ix)
      00106E DD 66 05         [19] 4157 	ld	h, 5 (ix)
      001071 E5               [11] 4158 	push	hl
      001072 CDr00r00         [17] 4159 	call	__divuint
      001075 F1               [10] 4160 	pop	af
      001076 F1               [10] 4161 	pop	af
      001077 DD 75 FD         [19] 4162 	ld	-3 (ix), l
      00107A DD 74 FE         [19] 4163 	ld	-2 (ix), h
      00107D D1               [10] 4164 	pop	de
      00107E DD 7E FA         [19] 4165 	ld	a, -6 (ix)
      001081 B7               [ 4] 4166 	or	a, a
      001082 28 0C            [12] 4167 	jr	Z, 00102$
      001084 DD 7E FE         [19] 4168 	ld	a, -2 (ix)
      001087 DD B6 FD         [19] 4169 	or	a, -3 (ix)
      00108A 28 04            [12] 4170 	jr	Z, 00102$
      00108C DD 36 FA 00      [19] 4171 	ld	-6 (ix), #0
      001090                       4172 00102$:
                                   4173 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      001090 DD 7E FA         [19] 4174 	ld	a, -6 (ix)
      001093 B7               [ 4] 4175 	or	a, a
      001094 28 04            [12] 4176 	jr	Z, 00104$
      001096 7B               [ 4] 4177 	ld	a, e
      001097 3D               [ 4] 4178 	dec	a
      001098 20 31            [12] 4179 	jr	NZ, 00105$
      00109A                       4180 00104$:
                                   4181 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      00109A DD 7E FD         [19] 4182 	ld	a, -3 (ix)
      00109D C6 3F            [ 7] 4183 	add	a, #0x3f
      00109F D5               [11] 4184 	push	de
      0010A0 DD 66 07         [19] 4185 	ld	h, 7 (ix)
      0010A3 E5               [11] 4186 	push	hl
      0010A4 33               [ 6] 4187 	inc	sp
      0010A5 DD 66 FF         [19] 4188 	ld	h, -1 (ix)
      0010A8 E5               [11] 4189 	push	hl
      0010A9 33               [ 6] 4190 	inc	sp
      0010AA F5               [11] 4191 	push	af
      0010AB 33               [ 6] 4192 	inc	sp
      0010AC CDrC7r0F         [17] 4193 	call	_DrawChar
      0010AF F1               [10] 4194 	pop	af
      0010B0 33               [ 6] 4195 	inc	sp
      0010B1 DD 6E FB         [19] 4196 	ld	l, -5 (ix)
      0010B4 DD 66 FC         [19] 4197 	ld	h, -4 (ix)
      0010B7 E5               [11] 4198 	push	hl
      0010B8 DD 6E 04         [19] 4199 	ld	l, 4 (ix)
      0010BB DD 66 05         [19] 4200 	ld	h, 5 (ix)
      0010BE E5               [11] 4201 	push	hl
      0010BF CDr00r00         [17] 4202 	call	__moduint
      0010C2 F1               [10] 4203 	pop	af
      0010C3 F1               [10] 4204 	pop	af
      0010C4 D1               [10] 4205 	pop	de
      0010C5 DD 75 04         [19] 4206 	ld	4 (ix), l
      0010C8 DD 74 05         [19] 4207 	ld	5 (ix), h
      0010CB                       4208 00105$:
                                   4209 ;src\/Graphics\Graphics.h:29: col++;
      0010CB DD 34 FF         [23] 4210 	inc	-1 (ix)
                                   4211 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0010CE 1D               [ 4] 4212 	dec	e
      0010CF C3r4Cr10         [10] 4213 	jp	00109$
      0010D2                       4214 00111$:
                                   4215 ;src\/Graphics\Graphics.h:34: }
      0010D2 DD F9            [10] 4216 	ld	sp, ix
      0010D4 DD E1            [14] 4217 	pop	ix
      0010D6 C9               [10] 4218 	ret
      0010D7                       4219 ___str_0:
      0010D7 20 20 20 20 20 20     4220 	.ascii "      "
      0010DD 00                    4221 	.db 0x00
                                   4222 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   4223 ;	---------------------------------
                                   4224 ; Function DrawColumn
                                   4225 ; ---------------------------------
      0010DE                       4226 _DrawColumn::
      0010DE DD E5            [15] 4227 	push	ix
      0010E0 DD 21 00 00      [14] 4228 	ld	ix,#0
      0010E4 DD 39            [15] 4229 	add	ix,sp
      0010E6 21 F9 FF         [10] 4230 	ld	hl, #-7
      0010E9 39               [11] 4231 	add	hl, sp
      0010EA F9               [ 6] 4232 	ld	sp, hl
                                   4233 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0010EB DD 4E 04         [19] 4234 	ld	c, 4 (ix)
      0010EE 06 00            [ 7] 4235 	ld	b, #0x00
      0010F0 21 00 18         [10] 4236 	ld	hl, #0x1800
      0010F3 09               [11] 4237 	add	hl, bc
      0010F4 C5               [11] 4238 	push	bc
      0010F5 3E 18            [ 7] 4239 	ld	a, #0x18
      0010F7 F5               [11] 4240 	push	af
      0010F8 33               [ 6] 4241 	inc	sp
      0010F9 E5               [11] 4242 	push	hl
      0010FA CDr00r00         [17] 4243 	call	_WRTVRM
      0010FD F1               [10] 4244 	pop	af
      0010FE 33               [ 6] 4245 	inc	sp
      0010FF C1               [10] 4246 	pop	bc
                                   4247 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      001100 21 01 18         [10] 4248 	ld	hl, #0x1801
      001103 09               [11] 4249 	add	hl, bc
      001104 C5               [11] 4250 	push	bc
      001105 3E 19            [ 7] 4251 	ld	a, #0x19
      001107 F5               [11] 4252 	push	af
      001108 33               [ 6] 4253 	inc	sp
      001109 E5               [11] 4254 	push	hl
      00110A CDr00r00         [17] 4255 	call	_WRTVRM
      00110D F1               [10] 4256 	pop	af
      00110E 33               [ 6] 4257 	inc	sp
      00110F C1               [10] 4258 	pop	bc
                                   4259 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      001110 21 02 18         [10] 4260 	ld	hl, #0x1802
      001113 09               [11] 4261 	add	hl, bc
      001114 C5               [11] 4262 	push	bc
      001115 3E 1A            [ 7] 4263 	ld	a, #0x1a
      001117 F5               [11] 4264 	push	af
      001118 33               [ 6] 4265 	inc	sp
      001119 E5               [11] 4266 	push	hl
      00111A CDr00r00         [17] 4267 	call	_WRTVRM
      00111D F1               [10] 4268 	pop	af
      00111E 33               [ 6] 4269 	inc	sp
      00111F C1               [10] 4270 	pop	bc
                                   4271 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      001120 21 20 18         [10] 4272 	ld	hl, #0x1820
      001123 09               [11] 4273 	add	hl, bc
      001124 C5               [11] 4274 	push	bc
      001125 3E 1B            [ 7] 4275 	ld	a, #0x1b
      001127 F5               [11] 4276 	push	af
      001128 33               [ 6] 4277 	inc	sp
      001129 E5               [11] 4278 	push	hl
      00112A CDr00r00         [17] 4279 	call	_WRTVRM
      00112D F1               [10] 4280 	pop	af
      00112E 33               [ 6] 4281 	inc	sp
      00112F C1               [10] 4282 	pop	bc
                                   4283 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      001130 21 21 18         [10] 4284 	ld	hl, #0x1821
      001133 09               [11] 4285 	add	hl, bc
      001134 C5               [11] 4286 	push	bc
      001135 3E 1C            [ 7] 4287 	ld	a, #0x1c
      001137 F5               [11] 4288 	push	af
      001138 33               [ 6] 4289 	inc	sp
      001139 E5               [11] 4290 	push	hl
      00113A CDr00r00         [17] 4291 	call	_WRTVRM
      00113D F1               [10] 4292 	pop	af
      00113E 33               [ 6] 4293 	inc	sp
      00113F C1               [10] 4294 	pop	bc
                                   4295 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      001140 21 22 18         [10] 4296 	ld	hl, #0x1822
      001143 09               [11] 4297 	add	hl, bc
      001144 C5               [11] 4298 	push	bc
      001145 3E 1D            [ 7] 4299 	ld	a, #0x1d
      001147 F5               [11] 4300 	push	af
      001148 33               [ 6] 4301 	inc	sp
      001149 E5               [11] 4302 	push	hl
      00114A CDr00r00         [17] 4303 	call	_WRTVRM
      00114D F1               [10] 4304 	pop	af
      00114E 33               [ 6] 4305 	inc	sp
      00114F C1               [10] 4306 	pop	bc
                                   4307 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001150 21 40 18         [10] 4308 	ld	hl, #0x1840
      001153 09               [11] 4309 	add	hl, bc
      001154 E3               [19] 4310 	ex	(sp), hl
      001155 21 41 18         [10] 4311 	ld	hl, #0x1841
      001158 09               [11] 4312 	add	hl, bc
      001159 DD 75 FB         [19] 4313 	ld	-5 (ix), l
      00115C DD 74 FC         [19] 4314 	ld	-4 (ix), h
      00115F 21 42 18         [10] 4315 	ld	hl, #0x1842
      001162 09               [11] 4316 	add	hl, bc
      001163 DD 75 FD         [19] 4317 	ld	-3 (ix), l
      001166 DD 74 FE         [19] 4318 	ld	-2 (ix), h
      001169 DD 36 FF 00      [19] 4319 	ld	-1 (ix), #0
      00116D                       4320 00103$:
      00116D DD 7E FF         [19] 4321 	ld	a, -1 (ix)
      001170 D6 14            [ 7] 4322 	sub	a, #0x14
      001172 30 4A            [12] 4323 	jr	NC, 00101$
                                   4324 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      001174 DD 5E FF         [19] 4325 	ld	e, -1 (ix)
      001177 16 00            [ 7] 4326 	ld	d, #0x00
      001179 EB               [ 4] 4327 	ex	de, hl
      00117A 29               [11] 4328 	add	hl, hl
      00117B 29               [11] 4329 	add	hl, hl
      00117C 29               [11] 4330 	add	hl, hl
      00117D 29               [11] 4331 	add	hl, hl
      00117E 29               [11] 4332 	add	hl, hl
      00117F EB               [ 4] 4333 	ex	de, hl
      001180 E1               [10] 4334 	pop	hl
      001181 E5               [11] 4335 	push	hl
      001182 19               [11] 4336 	add	hl, de
      001183 C5               [11] 4337 	push	bc
      001184 D5               [11] 4338 	push	de
      001185 3E 1E            [ 7] 4339 	ld	a, #0x1e
      001187 F5               [11] 4340 	push	af
      001188 33               [ 6] 4341 	inc	sp
      001189 E5               [11] 4342 	push	hl
      00118A CDr00r00         [17] 4343 	call	_WRTVRM
      00118D F1               [10] 4344 	pop	af
      00118E 33               [ 6] 4345 	inc	sp
      00118F D1               [10] 4346 	pop	de
      001190 C1               [10] 4347 	pop	bc
                                   4348 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      001191 DD 6E FB         [19] 4349 	ld	l, -5 (ix)
      001194 DD 66 FC         [19] 4350 	ld	h, -4 (ix)
      001197 19               [11] 4351 	add	hl, de
      001198 C5               [11] 4352 	push	bc
      001199 D5               [11] 4353 	push	de
      00119A 3E 1F            [ 7] 4354 	ld	a, #0x1f
      00119C F5               [11] 4355 	push	af
      00119D 33               [ 6] 4356 	inc	sp
      00119E E5               [11] 4357 	push	hl
      00119F CDr00r00         [17] 4358 	call	_WRTVRM
      0011A2 F1               [10] 4359 	pop	af
      0011A3 33               [ 6] 4360 	inc	sp
      0011A4 D1               [10] 4361 	pop	de
      0011A5 C1               [10] 4362 	pop	bc
                                   4363 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      0011A6 DD 6E FD         [19] 4364 	ld	l, -3 (ix)
      0011A9 DD 66 FE         [19] 4365 	ld	h, -2 (ix)
      0011AC 19               [11] 4366 	add	hl, de
      0011AD C5               [11] 4367 	push	bc
      0011AE 3E 20            [ 7] 4368 	ld	a, #0x20
      0011B0 F5               [11] 4369 	push	af
      0011B1 33               [ 6] 4370 	inc	sp
      0011B2 E5               [11] 4371 	push	hl
      0011B3 CDr00r00         [17] 4372 	call	_WRTVRM
      0011B6 F1               [10] 4373 	pop	af
      0011B7 33               [ 6] 4374 	inc	sp
      0011B8 C1               [10] 4375 	pop	bc
                                   4376 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      0011B9 DD 34 FF         [23] 4377 	inc	-1 (ix)
      0011BC 18 AF            [12] 4378 	jr	00103$
      0011BE                       4379 00101$:
                                   4380 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      0011BE 21 00 19         [10] 4381 	ld	hl, #0x1900
      0011C1 09               [11] 4382 	add	hl, bc
      0011C2 C5               [11] 4383 	push	bc
      0011C3 3E 21            [ 7] 4384 	ld	a, #0x21
      0011C5 F5               [11] 4385 	push	af
      0011C6 33               [ 6] 4386 	inc	sp
      0011C7 E5               [11] 4387 	push	hl
      0011C8 CDr00r00         [17] 4388 	call	_WRTVRM
      0011CB F1               [10] 4389 	pop	af
      0011CC 33               [ 6] 4390 	inc	sp
      0011CD C1               [10] 4391 	pop	bc
                                   4392 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      0011CE 21 01 19         [10] 4393 	ld	hl, #0x1901
      0011D1 09               [11] 4394 	add	hl, bc
      0011D2 C5               [11] 4395 	push	bc
      0011D3 3E 22            [ 7] 4396 	ld	a, #0x22
      0011D5 F5               [11] 4397 	push	af
      0011D6 33               [ 6] 4398 	inc	sp
      0011D7 E5               [11] 4399 	push	hl
      0011D8 CDr00r00         [17] 4400 	call	_WRTVRM
      0011DB F1               [10] 4401 	pop	af
      0011DC 33               [ 6] 4402 	inc	sp
      0011DD C1               [10] 4403 	pop	bc
                                   4404 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0011DE 21 02 19         [10] 4405 	ld	hl, #0x1902
      0011E1 09               [11] 4406 	add	hl, bc
      0011E2 C5               [11] 4407 	push	bc
      0011E3 3E 23            [ 7] 4408 	ld	a, #0x23
      0011E5 F5               [11] 4409 	push	af
      0011E6 33               [ 6] 4410 	inc	sp
      0011E7 E5               [11] 4411 	push	hl
      0011E8 CDr00r00         [17] 4412 	call	_WRTVRM
      0011EB F1               [10] 4413 	pop	af
      0011EC 33               [ 6] 4414 	inc	sp
      0011ED C1               [10] 4415 	pop	bc
                                   4416 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      0011EE 21 00 1A         [10] 4417 	ld	hl, #0x1a00
      0011F1 09               [11] 4418 	add	hl, bc
      0011F2 C5               [11] 4419 	push	bc
      0011F3 3E 21            [ 7] 4420 	ld	a, #0x21
      0011F5 F5               [11] 4421 	push	af
      0011F6 33               [ 6] 4422 	inc	sp
      0011F7 E5               [11] 4423 	push	hl
      0011F8 CDr00r00         [17] 4424 	call	_WRTVRM
      0011FB F1               [10] 4425 	pop	af
      0011FC 33               [ 6] 4426 	inc	sp
      0011FD C1               [10] 4427 	pop	bc
                                   4428 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0011FE 21 01 1A         [10] 4429 	ld	hl, #0x1a01
      001201 09               [11] 4430 	add	hl, bc
      001202 C5               [11] 4431 	push	bc
      001203 3E 22            [ 7] 4432 	ld	a, #0x22
      001205 F5               [11] 4433 	push	af
      001206 33               [ 6] 4434 	inc	sp
      001207 E5               [11] 4435 	push	hl
      001208 CDr00r00         [17] 4436 	call	_WRTVRM
      00120B F1               [10] 4437 	pop	af
      00120C 33               [ 6] 4438 	inc	sp
      00120D C1               [10] 4439 	pop	bc
                                   4440 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      00120E 21 02 1A         [10] 4441 	ld	hl, #0x1a02
      001211 09               [11] 4442 	add	hl, bc
      001212 C5               [11] 4443 	push	bc
      001213 3E 23            [ 7] 4444 	ld	a, #0x23
      001215 F5               [11] 4445 	push	af
      001216 33               [ 6] 4446 	inc	sp
      001217 E5               [11] 4447 	push	hl
      001218 CDr00r00         [17] 4448 	call	_WRTVRM
      00121B F1               [10] 4449 	pop	af
      00121C 33               [ 6] 4450 	inc	sp
      00121D C1               [10] 4451 	pop	bc
                                   4452 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      00121E 21 C0 1A         [10] 4453 	ld	hl, #0x1ac0
      001221 09               [11] 4454 	add	hl, bc
      001222 C5               [11] 4455 	push	bc
      001223 3E 24            [ 7] 4456 	ld	a, #0x24
      001225 F5               [11] 4457 	push	af
      001226 33               [ 6] 4458 	inc	sp
      001227 E5               [11] 4459 	push	hl
      001228 CDr00r00         [17] 4460 	call	_WRTVRM
      00122B F1               [10] 4461 	pop	af
      00122C 33               [ 6] 4462 	inc	sp
      00122D C1               [10] 4463 	pop	bc
                                   4464 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      00122E 21 C1 1A         [10] 4465 	ld	hl, #0x1ac1
      001231 09               [11] 4466 	add	hl, bc
      001232 C5               [11] 4467 	push	bc
      001233 3E 25            [ 7] 4468 	ld	a, #0x25
      001235 F5               [11] 4469 	push	af
      001236 33               [ 6] 4470 	inc	sp
      001237 E5               [11] 4471 	push	hl
      001238 CDr00r00         [17] 4472 	call	_WRTVRM
      00123B F1               [10] 4473 	pop	af
      00123C 33               [ 6] 4474 	inc	sp
      00123D C1               [10] 4475 	pop	bc
                                   4476 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      00123E 21 C2 1A         [10] 4477 	ld	hl, #0x1ac2
      001241 09               [11] 4478 	add	hl, bc
      001242 C5               [11] 4479 	push	bc
      001243 3E 26            [ 7] 4480 	ld	a, #0x26
      001245 F5               [11] 4481 	push	af
      001246 33               [ 6] 4482 	inc	sp
      001247 E5               [11] 4483 	push	hl
      001248 CDr00r00         [17] 4484 	call	_WRTVRM
      00124B F1               [10] 4485 	pop	af
      00124C 33               [ 6] 4486 	inc	sp
      00124D C1               [10] 4487 	pop	bc
                                   4488 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00124E 21 E0 1A         [10] 4489 	ld	hl, #0x1ae0
      001251 09               [11] 4490 	add	hl, bc
      001252 C5               [11] 4491 	push	bc
      001253 3E 27            [ 7] 4492 	ld	a, #0x27
      001255 F5               [11] 4493 	push	af
      001256 33               [ 6] 4494 	inc	sp
      001257 E5               [11] 4495 	push	hl
      001258 CDr00r00         [17] 4496 	call	_WRTVRM
      00125B F1               [10] 4497 	pop	af
      00125C 33               [ 6] 4498 	inc	sp
      00125D C1               [10] 4499 	pop	bc
                                   4500 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00125E 21 E1 1A         [10] 4501 	ld	hl, #0x1ae1
      001261 09               [11] 4502 	add	hl, bc
      001262 C5               [11] 4503 	push	bc
      001263 3E 28            [ 7] 4504 	ld	a, #0x28
      001265 F5               [11] 4505 	push	af
      001266 33               [ 6] 4506 	inc	sp
      001267 E5               [11] 4507 	push	hl
      001268 CDr00r00         [17] 4508 	call	_WRTVRM
      00126B F1               [10] 4509 	pop	af
      00126C 33               [ 6] 4510 	inc	sp
      00126D C1               [10] 4511 	pop	bc
                                   4512 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00126E 21 E2 1A         [10] 4513 	ld	hl, #0x1ae2
      001271 09               [11] 4514 	add	hl, bc
      001272 3E 29            [ 7] 4515 	ld	a, #0x29
      001274 F5               [11] 4516 	push	af
      001275 33               [ 6] 4517 	inc	sp
      001276 E5               [11] 4518 	push	hl
      001277 CDr00r00         [17] 4519 	call	_WRTVRM
                                   4520 ;src\/Graphics\Graphics.h:64: }
      00127A DD F9            [10] 4521 	ld	sp,ix
      00127C DD E1            [14] 4522 	pop	ix
      00127E C9               [10] 4523 	ret
                                   4524 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   4525 ;	---------------------------------
                                   4526 ; Function GetNextPieceColors
                                   4527 ; ---------------------------------
      00127F                       4528 _GetNextPieceColors::
                                   4529 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      00127F FD 21 02 00      [14] 4530 	ld	iy, #2
      001283 FD 39            [15] 4531 	add	iy, sp
      001285 FD 7E 00         [19] 4532 	ld	a, 0 (iy)
      001288 D6 04            [ 7] 4533 	sub	a, #0x04
      00128A 28 22            [12] 4534 	jr	Z, 00102$
      00128C FD 7E 00         [19] 4535 	ld	a, 0 (iy)
      00128F D6 08            [ 7] 4536 	sub	a, #0x08
      001291 28 26            [12] 4537 	jr	Z, 00103$
      001293 FD 7E 00         [19] 4538 	ld	a, 0 (iy)
      001296 D6 0C            [ 7] 4539 	sub	a, #0x0c
      001298 28 09            [12] 4540 	jr	Z, 00101$
      00129A FD 7E 00         [19] 4541 	ld	a, 0 (iy)
      00129D D6 14            [ 7] 4542 	sub	a, #0x14
      00129F 28 23            [12] 4543 	jr	Z, 00104$
      0012A1 18 2C            [12] 4544 	jr	00105$
                                   4545 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      0012A3                       4546 00101$:
                                   4547 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      0012A3 3E 07            [ 7] 4548 	ld	a, #0x07
      0012A5 32r9Br00         [13] 4549 	ld	(#_nextPieceColor_Front), a
                                   4550 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      0012A8 3E 04            [ 7] 4551 	ld	a, #0x04
      0012AA 32r9Cr00         [13] 4552 	ld	(#_nextPieceColor_Back), a
                                   4553 ;src\/Graphics\Graphics.h:73: break;
      0012AD C9               [10] 4554 	ret
                                   4555 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      0012AE                       4556 00102$:
                                   4557 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      0012AE 3E 03            [ 7] 4558 	ld	a, #0x03
      0012B0 32r9Br00         [13] 4559 	ld	(#_nextPieceColor_Front), a
                                   4560 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      0012B3 3E 0C            [ 7] 4561 	ld	a, #0x0c
      0012B5 32r9Cr00         [13] 4562 	ld	(#_nextPieceColor_Back), a
                                   4563 ;src\/Graphics\Graphics.h:77: break;
      0012B8 C9               [10] 4564 	ret
                                   4565 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      0012B9                       4566 00103$:
                                   4567 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      0012B9 3E 09            [ 7] 4568 	ld	a, #0x09
      0012BB 32r9Br00         [13] 4569 	ld	(#_nextPieceColor_Front), a
                                   4570 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      0012BE 3E 06            [ 7] 4571 	ld	a, #0x06
      0012C0 32r9Cr00         [13] 4572 	ld	(#_nextPieceColor_Back), a
                                   4573 ;src\/Graphics\Graphics.h:81: break;
      0012C3 C9               [10] 4574 	ret
                                   4575 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      0012C4                       4576 00104$:
                                   4577 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      0012C4 3E 0B            [ 7] 4578 	ld	a, #0x0b
      0012C6 32r9Br00         [13] 4579 	ld	(#_nextPieceColor_Front), a
                                   4580 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      0012C9 3E 0A            [ 7] 4581 	ld	a, #0x0a
      0012CB 32r9Cr00         [13] 4582 	ld	(#_nextPieceColor_Back), a
                                   4583 ;src\/Graphics\Graphics.h:85: break;
      0012CE C9               [10] 4584 	ret
                                   4585 ;src\/Graphics\Graphics.h:86: default:
      0012CF                       4586 00105$:
                                   4587 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      0012CF 3E 0F            [ 7] 4588 	ld	a, #0x0f
      0012D1 32r9Br00         [13] 4589 	ld	(#_nextPieceColor_Front), a
                                   4590 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      0012D4 3E 0D            [ 7] 4591 	ld	a, #0x0d
      0012D6 32r9Cr00         [13] 4592 	ld	(#_nextPieceColor_Back), a
                                   4593 ;src\/Graphics\Graphics.h:89: }  
                                   4594 ;src\/Graphics\Graphics.h:90: }
      0012D9 C9               [10] 4595 	ret
                                   4596 ;src\/Graphics\Graphics.h:92: void DrawNextPiece() {
                                   4597 ;	---------------------------------
                                   4598 ; Function DrawNextPiece
                                   4599 ; ---------------------------------
      0012DA                       4600 _DrawNextPiece::
                                   4601 ;src\/Graphics\Graphics.h:94: GetNextPieceColors(nextTopPiece);
      0012DA 3Ar93r00         [13] 4602 	ld	a,(#_nextTopPiece + 0)
      0012DD F5               [11] 4603 	push	af
      0012DE 33               [ 6] 4604 	inc	sp
      0012DF CDr7Fr12         [17] 4605 	call	_GetNextPieceColors
      0012E2 33               [ 6] 4606 	inc	sp
                                   4607 ;src\/Graphics\Graphics.h:95: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      0012E3 3E 20            [ 7] 4608 	ld	a, #0x20
      0012E5 F5               [11] 4609 	push	af
      0012E6 33               [ 6] 4610 	inc	sp
      0012E7 21 28 1B         [10] 4611 	ld	hl, #0x1b28
      0012EA E5               [11] 4612 	push	hl
      0012EB CDr00r00         [17] 4613 	call	_WRTVRM
      0012EE F1               [10] 4614 	pop	af
      0012EF 33               [ 6] 4615 	inc	sp
                                   4616 ;src\/Graphics\Graphics.h:96: WRTVRM(SPRATT + 41, 	(4 * 8)-4);
      0012F0 3E 1C            [ 7] 4617 	ld	a, #0x1c
      0012F2 F5               [11] 4618 	push	af
      0012F3 33               [ 6] 4619 	inc	sp
      0012F4 21 29 1B         [10] 4620 	ld	hl, #0x1b29
      0012F7 E5               [11] 4621 	push	hl
      0012F8 CDr00r00         [17] 4622 	call	_WRTVRM
      0012FB F1               [10] 4623 	pop	af
      0012FC 33               [ 6] 4624 	inc	sp
                                   4625 ;src\/Graphics\Graphics.h:97: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      0012FD 3E 4C            [ 7] 4626 	ld	a, #0x4c
      0012FF F5               [11] 4627 	push	af
      001300 33               [ 6] 4628 	inc	sp
      001301 21 2A 1B         [10] 4629 	ld	hl, #0x1b2a
      001304 E5               [11] 4630 	push	hl
      001305 CDr00r00         [17] 4631 	call	_WRTVRM
      001308 F1               [10] 4632 	pop	af
      001309 33               [ 6] 4633 	inc	sp
                                   4634 ;src\/Graphics\Graphics.h:98: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      00130A 3Ar9Br00         [13] 4635 	ld	a,(#_nextPieceColor_Front + 0)
      00130D F5               [11] 4636 	push	af
      00130E 33               [ 6] 4637 	inc	sp
      00130F 21 2B 1B         [10] 4638 	ld	hl, #0x1b2b
      001312 E5               [11] 4639 	push	hl
      001313 CDr00r00         [17] 4640 	call	_WRTVRM
      001316 F1               [10] 4641 	pop	af
      001317 33               [ 6] 4642 	inc	sp
                                   4643 ;src\/Graphics\Graphics.h:99: WRTVRM(SPRATT + 44, 	(4 * 8));
      001318 3E 20            [ 7] 4644 	ld	a, #0x20
      00131A F5               [11] 4645 	push	af
      00131B 33               [ 6] 4646 	inc	sp
      00131C 21 2C 1B         [10] 4647 	ld	hl, #0x1b2c
      00131F E5               [11] 4648 	push	hl
      001320 CDr00r00         [17] 4649 	call	_WRTVRM
      001323 F1               [10] 4650 	pop	af
      001324 33               [ 6] 4651 	inc	sp
                                   4652 ;src\/Graphics\Graphics.h:100: WRTVRM(SPRATT + 45, 	(4 * 8)-4);
      001325 3E 1C            [ 7] 4653 	ld	a, #0x1c
      001327 F5               [11] 4654 	push	af
      001328 33               [ 6] 4655 	inc	sp
      001329 21 2D 1B         [10] 4656 	ld	hl, #0x1b2d
      00132C E5               [11] 4657 	push	hl
      00132D CDr00r00         [17] 4658 	call	_WRTVRM
      001330 F1               [10] 4659 	pop	af
      001331 33               [ 6] 4660 	inc	sp
                                   4661 ;src\/Graphics\Graphics.h:101: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001332 3E 50            [ 7] 4662 	ld	a, #0x50
      001334 F5               [11] 4663 	push	af
      001335 33               [ 6] 4664 	inc	sp
      001336 21 2E 1B         [10] 4665 	ld	hl, #0x1b2e
      001339 E5               [11] 4666 	push	hl
      00133A CDr00r00         [17] 4667 	call	_WRTVRM
      00133D F1               [10] 4668 	pop	af
      00133E 33               [ 6] 4669 	inc	sp
                                   4670 ;src\/Graphics\Graphics.h:102: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      00133F 3Ar9Cr00         [13] 4671 	ld	a,(#_nextPieceColor_Back + 0)
      001342 F5               [11] 4672 	push	af
      001343 33               [ 6] 4673 	inc	sp
      001344 21 2F 1B         [10] 4674 	ld	hl, #0x1b2f
      001347 E5               [11] 4675 	push	hl
      001348 CDr00r00         [17] 4676 	call	_WRTVRM
      00134B F1               [10] 4677 	pop	af
      00134C 33               [ 6] 4678 	inc	sp
                                   4679 ;src\/Graphics\Graphics.h:104: GetNextPieceColors(nextMidPiece);
      00134D 3Ar94r00         [13] 4680 	ld	a,(#_nextMidPiece + 0)
      001350 F5               [11] 4681 	push	af
      001351 33               [ 6] 4682 	inc	sp
      001352 CDr7Fr12         [17] 4683 	call	_GetNextPieceColors
      001355 33               [ 6] 4684 	inc	sp
                                   4685 ;src\/Graphics\Graphics.h:105: WRTVRM(SPRATT + 48, 	(5 * 8));
      001356 3E 28            [ 7] 4686 	ld	a, #0x28
      001358 F5               [11] 4687 	push	af
      001359 33               [ 6] 4688 	inc	sp
      00135A 21 30 1B         [10] 4689 	ld	hl, #0x1b30
      00135D E5               [11] 4690 	push	hl
      00135E CDr00r00         [17] 4691 	call	_WRTVRM
      001361 F1               [10] 4692 	pop	af
      001362 33               [ 6] 4693 	inc	sp
                                   4694 ;src\/Graphics\Graphics.h:106: WRTVRM(SPRATT + 49, 	(4 * 8)-4);
      001363 3E 1C            [ 7] 4695 	ld	a, #0x1c
      001365 F5               [11] 4696 	push	af
      001366 33               [ 6] 4697 	inc	sp
      001367 21 31 1B         [10] 4698 	ld	hl, #0x1b31
      00136A E5               [11] 4699 	push	hl
      00136B CDr00r00         [17] 4700 	call	_WRTVRM
      00136E F1               [10] 4701 	pop	af
      00136F 33               [ 6] 4702 	inc	sp
                                   4703 ;src\/Graphics\Graphics.h:107: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      001370 3E 4C            [ 7] 4704 	ld	a, #0x4c
      001372 F5               [11] 4705 	push	af
      001373 33               [ 6] 4706 	inc	sp
      001374 21 32 1B         [10] 4707 	ld	hl, #0x1b32
      001377 E5               [11] 4708 	push	hl
      001378 CDr00r00         [17] 4709 	call	_WRTVRM
      00137B F1               [10] 4710 	pop	af
      00137C 33               [ 6] 4711 	inc	sp
                                   4712 ;src\/Graphics\Graphics.h:108: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      00137D 3Ar9Br00         [13] 4713 	ld	a,(#_nextPieceColor_Front + 0)
      001380 F5               [11] 4714 	push	af
      001381 33               [ 6] 4715 	inc	sp
      001382 21 33 1B         [10] 4716 	ld	hl, #0x1b33
      001385 E5               [11] 4717 	push	hl
      001386 CDr00r00         [17] 4718 	call	_WRTVRM
      001389 F1               [10] 4719 	pop	af
      00138A 33               [ 6] 4720 	inc	sp
                                   4721 ;src\/Graphics\Graphics.h:109: WRTVRM(SPRATT + 52, 	(5 * 8));
      00138B 3E 28            [ 7] 4722 	ld	a, #0x28
      00138D F5               [11] 4723 	push	af
      00138E 33               [ 6] 4724 	inc	sp
      00138F 21 34 1B         [10] 4725 	ld	hl, #0x1b34
      001392 E5               [11] 4726 	push	hl
      001393 CDr00r00         [17] 4727 	call	_WRTVRM
      001396 F1               [10] 4728 	pop	af
      001397 33               [ 6] 4729 	inc	sp
                                   4730 ;src\/Graphics\Graphics.h:110: WRTVRM(SPRATT + 53, 	(4 * 8)-4);
      001398 3E 1C            [ 7] 4731 	ld	a, #0x1c
      00139A F5               [11] 4732 	push	af
      00139B 33               [ 6] 4733 	inc	sp
      00139C 21 35 1B         [10] 4734 	ld	hl, #0x1b35
      00139F E5               [11] 4735 	push	hl
      0013A0 CDr00r00         [17] 4736 	call	_WRTVRM
      0013A3 F1               [10] 4737 	pop	af
      0013A4 33               [ 6] 4738 	inc	sp
                                   4739 ;src\/Graphics\Graphics.h:111: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0013A5 3E 50            [ 7] 4740 	ld	a, #0x50
      0013A7 F5               [11] 4741 	push	af
      0013A8 33               [ 6] 4742 	inc	sp
      0013A9 21 36 1B         [10] 4743 	ld	hl, #0x1b36
      0013AC E5               [11] 4744 	push	hl
      0013AD CDr00r00         [17] 4745 	call	_WRTVRM
      0013B0 F1               [10] 4746 	pop	af
      0013B1 33               [ 6] 4747 	inc	sp
                                   4748 ;src\/Graphics\Graphics.h:112: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      0013B2 3Ar9Cr00         [13] 4749 	ld	a,(#_nextPieceColor_Back + 0)
      0013B5 F5               [11] 4750 	push	af
      0013B6 33               [ 6] 4751 	inc	sp
      0013B7 21 37 1B         [10] 4752 	ld	hl, #0x1b37
      0013BA E5               [11] 4753 	push	hl
      0013BB CDr00r00         [17] 4754 	call	_WRTVRM
      0013BE F1               [10] 4755 	pop	af
      0013BF 33               [ 6] 4756 	inc	sp
                                   4757 ;src\/Graphics\Graphics.h:114: GetNextPieceColors(nextBottomPiece);
      0013C0 3Ar95r00         [13] 4758 	ld	a,(#_nextBottomPiece + 0)
      0013C3 F5               [11] 4759 	push	af
      0013C4 33               [ 6] 4760 	inc	sp
      0013C5 CDr7Fr12         [17] 4761 	call	_GetNextPieceColors
      0013C8 33               [ 6] 4762 	inc	sp
                                   4763 ;src\/Graphics\Graphics.h:115: WRTVRM(SPRATT + 56, 	(6 * 8));
      0013C9 3E 30            [ 7] 4764 	ld	a, #0x30
      0013CB F5               [11] 4765 	push	af
      0013CC 33               [ 6] 4766 	inc	sp
      0013CD 21 38 1B         [10] 4767 	ld	hl, #0x1b38
      0013D0 E5               [11] 4768 	push	hl
      0013D1 CDr00r00         [17] 4769 	call	_WRTVRM
      0013D4 F1               [10] 4770 	pop	af
      0013D5 33               [ 6] 4771 	inc	sp
                                   4772 ;src\/Graphics\Graphics.h:116: WRTVRM(SPRATT + 57, 	(4 * 8)-4);
      0013D6 3E 1C            [ 7] 4773 	ld	a, #0x1c
      0013D8 F5               [11] 4774 	push	af
      0013D9 33               [ 6] 4775 	inc	sp
      0013DA 21 39 1B         [10] 4776 	ld	hl, #0x1b39
      0013DD E5               [11] 4777 	push	hl
      0013DE CDr00r00         [17] 4778 	call	_WRTVRM
      0013E1 F1               [10] 4779 	pop	af
      0013E2 33               [ 6] 4780 	inc	sp
                                   4781 ;src\/Graphics\Graphics.h:117: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      0013E3 3E 4C            [ 7] 4782 	ld	a, #0x4c
      0013E5 F5               [11] 4783 	push	af
      0013E6 33               [ 6] 4784 	inc	sp
      0013E7 21 3A 1B         [10] 4785 	ld	hl, #0x1b3a
      0013EA E5               [11] 4786 	push	hl
      0013EB CDr00r00         [17] 4787 	call	_WRTVRM
      0013EE F1               [10] 4788 	pop	af
      0013EF 33               [ 6] 4789 	inc	sp
                                   4790 ;src\/Graphics\Graphics.h:118: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      0013F0 3Ar9Br00         [13] 4791 	ld	a,(#_nextPieceColor_Front + 0)
      0013F3 F5               [11] 4792 	push	af
      0013F4 33               [ 6] 4793 	inc	sp
      0013F5 21 3B 1B         [10] 4794 	ld	hl, #0x1b3b
      0013F8 E5               [11] 4795 	push	hl
      0013F9 CDr00r00         [17] 4796 	call	_WRTVRM
      0013FC F1               [10] 4797 	pop	af
      0013FD 33               [ 6] 4798 	inc	sp
                                   4799 ;src\/Graphics\Graphics.h:119: WRTVRM(SPRATT + 60, 	(6 * 8));
      0013FE 3E 30            [ 7] 4800 	ld	a, #0x30
      001400 F5               [11] 4801 	push	af
      001401 33               [ 6] 4802 	inc	sp
      001402 21 3C 1B         [10] 4803 	ld	hl, #0x1b3c
      001405 E5               [11] 4804 	push	hl
      001406 CDr00r00         [17] 4805 	call	_WRTVRM
      001409 F1               [10] 4806 	pop	af
      00140A 33               [ 6] 4807 	inc	sp
                                   4808 ;src\/Graphics\Graphics.h:120: WRTVRM(SPRATT + 61, 	(4 * 8)-4);
      00140B 3E 1C            [ 7] 4809 	ld	a, #0x1c
      00140D F5               [11] 4810 	push	af
      00140E 33               [ 6] 4811 	inc	sp
      00140F 21 3D 1B         [10] 4812 	ld	hl, #0x1b3d
      001412 E5               [11] 4813 	push	hl
      001413 CDr00r00         [17] 4814 	call	_WRTVRM
      001416 F1               [10] 4815 	pop	af
      001417 33               [ 6] 4816 	inc	sp
                                   4817 ;src\/Graphics\Graphics.h:121: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001418 3E 50            [ 7] 4818 	ld	a, #0x50
      00141A F5               [11] 4819 	push	af
      00141B 33               [ 6] 4820 	inc	sp
      00141C 21 3E 1B         [10] 4821 	ld	hl, #0x1b3e
      00141F E5               [11] 4822 	push	hl
      001420 CDr00r00         [17] 4823 	call	_WRTVRM
      001423 F1               [10] 4824 	pop	af
      001424 33               [ 6] 4825 	inc	sp
                                   4826 ;src\/Graphics\Graphics.h:122: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      001425 3Ar9Cr00         [13] 4827 	ld	a,(#_nextPieceColor_Back + 0)
      001428 F5               [11] 4828 	push	af
      001429 33               [ 6] 4829 	inc	sp
      00142A 21 3F 1B         [10] 4830 	ld	hl, #0x1b3f
      00142D E5               [11] 4831 	push	hl
      00142E CDr00r00         [17] 4832 	call	_WRTVRM
      001431 F1               [10] 4833 	pop	af
      001432 33               [ 6] 4834 	inc	sp
                                   4835 ;src\/Graphics\Graphics.h:133: }
      001433 C9               [10] 4836 	ret
                                   4837 ;src\/Graphics\Graphics.h:135: void DrawScore() {
                                   4838 ;	---------------------------------
                                   4839 ; Function DrawScore
                                   4840 ; ---------------------------------
      001434                       4841 _DrawScore::
      001434 DD E5            [15] 4842 	push	ix
      001436 DD 21 00 00      [14] 4843 	ld	ix,#0
      00143A DD 39            [15] 4844 	add	ix,sp
      00143C F5               [11] 4845 	push	af
                                   4846 ;src\/Graphics\Graphics.h:136: byte bgCounter = 0, bgColor;
      00143D DD 36 FE 00      [19] 4847 	ld	-2 (ix), #0
                                   4848 ;src\/Graphics\Graphics.h:140: if(newLevel) {
      001441 3Ar07r00         [13] 4849 	ld	a,(#_newLevel + 0)
      001444 B7               [ 4] 4850 	or	a, a
      001445 CAr40r15         [10] 4851 	jp	Z, 00119$
                                   4852 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      001448 DD 36 FF 00      [19] 4853 	ld	-1 (ix), #0
      00144C                       4854 00121$:
      00144C DD 7E FF         [19] 4855 	ld	a, -1 (ix)
      00144F D6 3C            [ 7] 4856 	sub	a, #0x3c
      001451 D2r40r15         [10] 4857 	jp	NC, 00119$
                                   4858 ;src\/Graphics\Graphics.h:142: lastJiffy = JIFFY;
      001454 ED 4B 9E FC      [20] 4859 	ld	bc, (_JIFFY)
                                   4860 ;src\/Graphics\Graphics.h:143: while(lastJiffy == JIFFY) { }
      001458                       4861 00101$:
      001458 2A 9E FC         [16] 4862 	ld	hl, (_JIFFY)
      00145B BF               [ 4] 4863 	cp	a, a
      00145C ED 42            [15] 4864 	sbc	hl, bc
      00145E 28 F8            [12] 4865 	jr	Z, 00101$
                                   4866 ;src\/Graphics\Graphics.h:145: DrawExplosionSprite(26 * 8, 10 * 8, i);
      001460 DD 56 FF         [19] 4867 	ld	d, -1 (ix)
      001463 1E 50            [ 7] 4868 	ld	e,#0x50
      001465 D5               [11] 4869 	push	de
      001466 3E D0            [ 7] 4870 	ld	a, #0xd0
      001468 F5               [11] 4871 	push	af
      001469 33               [ 6] 4872 	inc	sp
      00146A CDrDFr0E         [17] 4873 	call	_DrawExplosionSprite
      00146D F1               [10] 4874 	pop	af
      00146E 33               [ 6] 4875 	inc	sp
                                   4876 ;src\/Graphics\Graphics.h:147: if(JIFFY & 0b00000110) {
      00146F 2A 9E FC         [16] 4877 	ld	hl, (_JIFFY)
      001472 7D               [ 4] 4878 	ld	a, l
      001473 E6 06            [ 7] 4879 	and	a, #0x06
      001475 CAr20r15         [10] 4880 	jp	Z,00115$
                                   4881 ;src\/Graphics\Graphics.h:149: DrawString(" LEVEL", 26, 10);
      001478 11 1A 0A         [10] 4882 	ld	de, #0x0a1a
      00147B D5               [11] 4883 	push	de
      00147C 21rC2r15         [10] 4884 	ld	hl, #___str_1
      00147F E5               [11] 4885 	push	hl
      001480 CDrF1r0F         [17] 4886 	call	_DrawString
      001483 F1               [10] 4887 	pop	af
      001484 F1               [10] 4888 	pop	af
                                   4889 ;src\/Graphics\Graphics.h:150: DrawNumber(level, 26, 11);
      001485 3Ar06r00         [13] 4890 	ld	a, (#_level + 0)
      001488 4F               [ 4] 4891 	ld	c, a
      001489 06 00            [ 7] 4892 	ld	b, #0x00
      00148B 11 1A 0B         [10] 4893 	ld	de, #0x0b1a
      00148E D5               [11] 4894 	push	de
      00148F C5               [11] 4895 	push	bc
      001490 CDr23r10         [17] 4896 	call	_DrawNumber
      001493 F1               [10] 4897 	pop	af
      001494 F1               [10] 4898 	pop	af
                                   4899 ;src\/Graphics\Graphics.h:156: switch(bgCounter++) {
      001495 DD 4E FE         [19] 4900 	ld	c, -2 (ix)
      001498 DD 34 FE         [23] 4901 	inc	-2 (ix)
      00149B 3E 07            [ 7] 4902 	ld	a, #0x07
      00149D 91               [ 4] 4903 	sub	a, c
      00149E 38 45            [12] 4904 	jr	C, 00112$
      0014A0 06 00            [ 7] 4905 	ld	b, #0x00
      0014A2 21rA9r14         [10] 4906 	ld	hl, #00163$
      0014A5 09               [11] 4907 	add	hl, bc
      0014A6 09               [11] 4908 	add	hl, bc
      0014A7 09               [11] 4909 	add	hl, bc
      0014A8 E9               [ 4] 4910 	jp	(hl)
      0014A9                       4911 00163$:
      0014A9 C3rC1r14         [10] 4912 	jp	00104$
      0014AC C3rC5r14         [10] 4913 	jp	00105$
      0014AF C3rC9r14         [10] 4914 	jp	00106$
      0014B2 C3rCDr14         [10] 4915 	jp	00107$
      0014B5 C3rD1r14         [10] 4916 	jp	00108$
      0014B8 C3rD5r14         [10] 4917 	jp	00109$
      0014BB C3rD9r14         [10] 4918 	jp	00110$
      0014BE C3rDDr14         [10] 4919 	jp	00111$
                                   4920 ;src\/Graphics\Graphics.h:157: case 0:
      0014C1                       4921 00104$:
                                   4922 ;src\/Graphics\Graphics.h:158: bgColor = 0x14;
      0014C1 0E 14            [ 7] 4923 	ld	c, #0x14
                                   4924 ;src\/Graphics\Graphics.h:159: break;
      0014C3 18 22            [12] 4925 	jr	00113$
                                   4926 ;src\/Graphics\Graphics.h:160: case 1:
      0014C5                       4927 00105$:
                                   4928 ;src\/Graphics\Graphics.h:161: bgColor = 0x15;
      0014C5 0E 15            [ 7] 4929 	ld	c, #0x15
                                   4930 ;src\/Graphics\Graphics.h:162: break;
      0014C7 18 1E            [12] 4931 	jr	00113$
                                   4932 ;src\/Graphics\Graphics.h:163: case 2:
      0014C9                       4933 00106$:
                                   4934 ;src\/Graphics\Graphics.h:164: bgColor = 0x17;
      0014C9 0E 17            [ 7] 4935 	ld	c, #0x17
                                   4936 ;src\/Graphics\Graphics.h:165: break;
      0014CB 18 1A            [12] 4937 	jr	00113$
                                   4938 ;src\/Graphics\Graphics.h:166: case 3:
      0014CD                       4939 00107$:
                                   4940 ;src\/Graphics\Graphics.h:167: bgColor = 0x1e;
      0014CD 0E 1E            [ 7] 4941 	ld	c, #0x1e
                                   4942 ;src\/Graphics\Graphics.h:168: break;
      0014CF 18 16            [12] 4943 	jr	00113$
                                   4944 ;src\/Graphics\Graphics.h:169: case 4:
      0014D1                       4945 00108$:
                                   4946 ;src\/Graphics\Graphics.h:170: bgColor = 0x1f;
      0014D1 0E 1F            [ 7] 4947 	ld	c, #0x1f
                                   4948 ;src\/Graphics\Graphics.h:171: break;
      0014D3 18 12            [12] 4949 	jr	00113$
                                   4950 ;src\/Graphics\Graphics.h:172: case 5:
      0014D5                       4951 00109$:
                                   4952 ;src\/Graphics\Graphics.h:173: bgColor = 0x1e;
      0014D5 0E 1E            [ 7] 4953 	ld	c, #0x1e
                                   4954 ;src\/Graphics\Graphics.h:174: break;
      0014D7 18 0E            [12] 4955 	jr	00113$
                                   4956 ;src\/Graphics\Graphics.h:175: case 6:
      0014D9                       4957 00110$:
                                   4958 ;src\/Graphics\Graphics.h:176: bgColor = 0x17;
      0014D9 0E 17            [ 7] 4959 	ld	c, #0x17
                                   4960 ;src\/Graphics\Graphics.h:177: break;
      0014DB 18 0A            [12] 4961 	jr	00113$
                                   4962 ;src\/Graphics\Graphics.h:178: case 7:
      0014DD                       4963 00111$:
                                   4964 ;src\/Graphics\Graphics.h:179: bgColor = 0x15;
      0014DD 0E 15            [ 7] 4965 	ld	c, #0x15
                                   4966 ;src\/Graphics\Graphics.h:180: bgCounter = 0;
      0014DF DD 36 FE 00      [19] 4967 	ld	-2 (ix), #0
                                   4968 ;src\/Graphics\Graphics.h:181: break;
      0014E3 18 02            [12] 4969 	jr	00113$
                                   4970 ;src\/Graphics\Graphics.h:182: default:
      0014E5                       4971 00112$:
                                   4972 ;src\/Graphics\Graphics.h:183: bgColor = 0x11;
      0014E5 0E 11            [ 7] 4973 	ld	c, #0x11
                                   4974 ;src\/Graphics\Graphics.h:185: }
      0014E7                       4975 00113$:
                                   4976 ;src\/Graphics\Graphics.h:186: FILVRM(CLRTBL, 8 * 4, bgColor);
      0014E7 C5               [11] 4977 	push	bc
      0014E8 79               [ 4] 4978 	ld	a, c
      0014E9 F5               [11] 4979 	push	af
      0014EA 33               [ 6] 4980 	inc	sp
      0014EB 21 20 00         [10] 4981 	ld	hl, #0x0020
      0014EE E5               [11] 4982 	push	hl
      0014EF 21 00 20         [10] 4983 	ld	hl, #0x2000
      0014F2 E5               [11] 4984 	push	hl
      0014F3 CDr00r00         [17] 4985 	call	_FILVRM
      0014F6 F1               [10] 4986 	pop	af
      0014F7 F1               [10] 4987 	pop	af
      0014F8 33               [ 6] 4988 	inc	sp
      0014F9 C1               [10] 4989 	pop	bc
                                   4990 ;src\/Graphics\Graphics.h:187: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      0014FA C5               [11] 4991 	push	bc
      0014FB 79               [ 4] 4992 	ld	a, c
      0014FC F5               [11] 4993 	push	af
      0014FD 33               [ 6] 4994 	inc	sp
      0014FE 21 20 00         [10] 4995 	ld	hl, #0x0020
      001501 E5               [11] 4996 	push	hl
      001502 21 00 28         [10] 4997 	ld	hl, #0x2800
      001505 E5               [11] 4998 	push	hl
      001506 CDr00r00         [17] 4999 	call	_FILVRM
      001509 F1               [10] 5000 	pop	af
      00150A F1               [10] 5001 	pop	af
      00150B 33               [ 6] 5002 	inc	sp
      00150C C1               [10] 5003 	pop	bc
                                   5004 ;src\/Graphics\Graphics.h:188: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      00150D 79               [ 4] 5005 	ld	a, c
      00150E F5               [11] 5006 	push	af
      00150F 33               [ 6] 5007 	inc	sp
      001510 21 20 00         [10] 5008 	ld	hl, #0x0020
      001513 E5               [11] 5009 	push	hl
      001514 21 00 30         [10] 5010 	ld	hl, #0x3000
      001517 E5               [11] 5011 	push	hl
      001518 CDr00r00         [17] 5012 	call	_FILVRM
      00151B F1               [10] 5013 	pop	af
      00151C F1               [10] 5014 	pop	af
      00151D 33               [ 6] 5015 	inc	sp
      00151E 18 1A            [12] 5016 	jr	00122$
      001520                       5017 00115$:
                                   5018 ;src\/Graphics\Graphics.h:193: DrawString("      ", 26, 10);
      001520 11 1A 0A         [10] 5019 	ld	de, #0x0a1a
      001523 D5               [11] 5020 	push	de
      001524 21rC9r15         [10] 5021 	ld	hl, #___str_2
      001527 E5               [11] 5022 	push	hl
      001528 CDrF1r0F         [17] 5023 	call	_DrawString
      00152B F1               [10] 5024 	pop	af
      00152C F1               [10] 5025 	pop	af
                                   5026 ;src\/Graphics\Graphics.h:194: DrawString("      ", 26, 11);
      00152D 11 1A 0B         [10] 5027 	ld	de, #0x0b1a
      001530 D5               [11] 5028 	push	de
      001531 21rC9r15         [10] 5029 	ld	hl, #___str_2
      001534 E5               [11] 5030 	push	hl
      001535 CDrF1r0F         [17] 5031 	call	_DrawString
      001538 F1               [10] 5032 	pop	af
      001539 F1               [10] 5033 	pop	af
      00153A                       5034 00122$:
                                   5035 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      00153A DD 34 FF         [23] 5036 	inc	-1 (ix)
      00153D C3r4Cr14         [10] 5037 	jp	00121$
      001540                       5038 00119$:
                                   5039 ;src\/Graphics\Graphics.h:200: newLevel = FALSE;
      001540 21r07r00         [10] 5040 	ld	hl, #_newLevel
      001543 36 00            [10] 5041 	ld	(hl), #0x00
                                   5042 ;src\/Graphics\Graphics.h:203: FILVRM(CLRTBL, 8 * 4, 0x14);
      001545 3E 14            [ 7] 5043 	ld	a, #0x14
      001547 F5               [11] 5044 	push	af
      001548 33               [ 6] 5045 	inc	sp
      001549 21 20 00         [10] 5046 	ld	hl, #0x0020
      00154C E5               [11] 5047 	push	hl
      00154D 21 00 20         [10] 5048 	ld	hl, #0x2000
      001550 E5               [11] 5049 	push	hl
      001551 CDr00r00         [17] 5050 	call	_FILVRM
      001554 F1               [10] 5051 	pop	af
      001555 F1               [10] 5052 	pop	af
      001556 33               [ 6] 5053 	inc	sp
                                   5054 ;src\/Graphics\Graphics.h:204: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001557 3E 14            [ 7] 5055 	ld	a, #0x14
      001559 F5               [11] 5056 	push	af
      00155A 33               [ 6] 5057 	inc	sp
      00155B 21 20 00         [10] 5058 	ld	hl, #0x0020
      00155E E5               [11] 5059 	push	hl
      00155F 21 00 28         [10] 5060 	ld	hl, #0x2800
      001562 E5               [11] 5061 	push	hl
      001563 CDr00r00         [17] 5062 	call	_FILVRM
      001566 F1               [10] 5063 	pop	af
      001567 F1               [10] 5064 	pop	af
      001568 33               [ 6] 5065 	inc	sp
                                   5066 ;src\/Graphics\Graphics.h:205: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001569 3E 14            [ 7] 5067 	ld	a, #0x14
      00156B F5               [11] 5068 	push	af
      00156C 33               [ 6] 5069 	inc	sp
      00156D 21 20 00         [10] 5070 	ld	hl, #0x0020
      001570 E5               [11] 5071 	push	hl
      001571 21 00 30         [10] 5072 	ld	hl, #0x3000
      001574 E5               [11] 5073 	push	hl
      001575 CDr00r00         [17] 5074 	call	_FILVRM
      001578 F1               [10] 5075 	pop	af
      001579 F1               [10] 5076 	pop	af
      00157A 33               [ 6] 5077 	inc	sp
                                   5078 ;src\/Graphics\Graphics.h:207: DrawString("NEXT", 2, 2);
      00157B 11 02 02         [10] 5079 	ld	de, #0x0202
      00157E D5               [11] 5080 	push	de
      00157F 21rD0r15         [10] 5081 	ld	hl, #___str_3
      001582 E5               [11] 5082 	push	hl
      001583 CDrF1r0F         [17] 5083 	call	_DrawString
      001586 F1               [10] 5084 	pop	af
      001587 F1               [10] 5085 	pop	af
                                   5086 ;src\/Graphics\Graphics.h:209: DrawString(" LEVEL", 26, 10);
      001588 11 1A 0A         [10] 5087 	ld	de, #0x0a1a
      00158B D5               [11] 5088 	push	de
      00158C 21rC2r15         [10] 5089 	ld	hl, #___str_1
      00158F E5               [11] 5090 	push	hl
      001590 CDrF1r0F         [17] 5091 	call	_DrawString
      001593 F1               [10] 5092 	pop	af
      001594 F1               [10] 5093 	pop	af
                                   5094 ;src\/Graphics\Graphics.h:210: DrawString("BLOCKS", 26, 18);
      001595 11 1A 12         [10] 5095 	ld	de, #0x121a
      001598 D5               [11] 5096 	push	de
      001599 21rD5r15         [10] 5097 	ld	hl, #___str_4
      00159C E5               [11] 5098 	push	hl
      00159D CDrF1r0F         [17] 5099 	call	_DrawString
      0015A0 F1               [10] 5100 	pop	af
      0015A1 F1               [10] 5101 	pop	af
                                   5102 ;src\/Graphics\Graphics.h:213: DrawNumber(level, 26, 11);
      0015A2 3Ar06r00         [13] 5103 	ld	a, (#_level + 0)
      0015A5 4F               [ 4] 5104 	ld	c, a
      0015A6 06 00            [ 7] 5105 	ld	b, #0x00
      0015A8 11 1A 0B         [10] 5106 	ld	de, #0x0b1a
      0015AB D5               [11] 5107 	push	de
      0015AC C5               [11] 5108 	push	bc
      0015AD CDr23r10         [17] 5109 	call	_DrawNumber
      0015B0 F1               [10] 5110 	pop	af
      0015B1 F1               [10] 5111 	pop	af
                                   5112 ;src\/Graphics\Graphics.h:214: DrawNumber(blocksRemoved, 26, 19);
      0015B2 11 1A 13         [10] 5113 	ld	de, #0x131a
      0015B5 D5               [11] 5114 	push	de
      0015B6 2Ar04r00         [16] 5115 	ld	hl, (_blocksRemoved)
      0015B9 E5               [11] 5116 	push	hl
      0015BA CDr23r10         [17] 5117 	call	_DrawNumber
                                   5118 ;src\/Graphics\Graphics.h:217: }
      0015BD DD F9            [10] 5119 	ld	sp,ix
      0015BF DD E1            [14] 5120 	pop	ix
      0015C1 C9               [10] 5121 	ret
      0015C2                       5122 ___str_1:
      0015C2 20 4C 45 56 45 4C     5123 	.ascii " LEVEL"
      0015C8 00                    5124 	.db 0x00
      0015C9                       5125 ___str_2:
      0015C9 20 20 20 20 20 20     5126 	.ascii "      "
      0015CF 00                    5127 	.db 0x00
      0015D0                       5128 ___str_3:
      0015D0 4E 45 58 54           5129 	.ascii "NEXT"
      0015D4 00                    5130 	.db 0x00
      0015D5                       5131 ___str_4:
      0015D5 42 4C 4F 43 4B 53     5132 	.ascii "BLOCKS"
      0015DB 00                    5133 	.db 0x00
                                   5134 ;src\/Graphics\Graphics.h:219: void DrawBackground() {
                                   5135 ;	---------------------------------
                                   5136 ; Function DrawBackground
                                   5137 ; ---------------------------------
      0015DC                       5138 _DrawBackground::
                                   5139 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0015DC 01 00 00         [10] 5140 	ld	bc, #0x0000
      0015DF                       5141 00103$:
      0015DF 78               [ 4] 5142 	ld	a, b
      0015E0 EE 80            [ 7] 5143 	xor	a, #0x80
      0015E2 D6 83            [ 7] 5144 	sub	a, #0x83
      0015E4 30 12            [12] 5145 	jr	NC, 00101$
                                   5146 ;src\/Graphics\Graphics.h:222: WRTVRM(NAMTBL + i, EMPTY); // test
      0015E6 21 00 18         [10] 5147 	ld	hl, #0x1800
      0015E9 09               [11] 5148 	add	hl, bc
      0015EA C5               [11] 5149 	push	bc
      0015EB AF               [ 4] 5150 	xor	a, a
      0015EC F5               [11] 5151 	push	af
      0015ED 33               [ 6] 5152 	inc	sp
      0015EE E5               [11] 5153 	push	hl
      0015EF CDr00r00         [17] 5154 	call	_WRTVRM
      0015F2 F1               [10] 5155 	pop	af
      0015F3 33               [ 6] 5156 	inc	sp
      0015F4 C1               [10] 5157 	pop	bc
                                   5158 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0015F5 03               [ 6] 5159 	inc	bc
      0015F6 18 E7            [12] 5160 	jr	00103$
      0015F8                       5161 00101$:
                                   5162 ;src\/Graphics\Graphics.h:225: DrawColumn(7);
      0015F8 3E 07            [ 7] 5163 	ld	a, #0x07
      0015FA F5               [11] 5164 	push	af
      0015FB 33               [ 6] 5165 	inc	sp
      0015FC CDrDEr10         [17] 5166 	call	_DrawColumn
      0015FF 33               [ 6] 5167 	inc	sp
                                   5168 ;src\/Graphics\Graphics.h:226: DrawColumn(22);
      001600 3E 16            [ 7] 5169 	ld	a, #0x16
      001602 F5               [11] 5170 	push	af
      001603 33               [ 6] 5171 	inc	sp
      001604 CDrDEr10         [17] 5172 	call	_DrawColumn
      001607 33               [ 6] 5173 	inc	sp
                                   5174 ;src\/Graphics\Graphics.h:228: DrawScore();
                                   5175 ;src\/Graphics\Graphics.h:264: }
      001608 C3r34r14         [10] 5176 	jp	_DrawScore
                                   5177 ;src\/Graphics\Graphics.h:266: void InitVRAM() {
                                   5178 ;	---------------------------------
                                   5179 ; Function InitVRAM
                                   5180 ; ---------------------------------
      00160B                       5181 _InitVRAM::
      00160B DD E5            [15] 5182 	push	ix
      00160D DD 21 00 00      [14] 5183 	ld	ix,#0
      001611 DD 39            [15] 5184 	add	ix,sp
      001613 3B               [ 6] 5185 	dec	sp
                                   5186 ;src\/Graphics\Graphics.h:271: CLIKSW = 0;	// disable keyboard sound
      001614 21 00 00         [10] 5187 	ld	hl, #0x0000
      001617 22 DB F3         [16] 5188 	ld	(_CLIKSW), hl
                                   5189 ;src\/Graphics\Graphics.h:272: SCNCNT = 1; 	// set keyboard scan counter
      00161A 21 F6 F3         [10] 5190 	ld	hl, #_SCNCNT
      00161D 36 01            [10] 5191 	ld	(hl), #0x01
                                   5192 ;src\/Graphics\Graphics.h:274: FORCLR = COLOR_WHITE;
      00161F 21 E9 F3         [10] 5193 	ld	hl, #_FORCLR
      001622 36 0F            [10] 5194 	ld	(hl), #0x0f
                                   5195 ;src\/Graphics\Graphics.h:275: BAKCLR = COLOR_BLACK;
      001624 21 EA F3         [10] 5196 	ld	hl, #_BAKCLR
      001627 36 01            [10] 5197 	ld	(hl), #0x01
                                   5198 ;src\/Graphics\Graphics.h:276: BDRCLR = COLOR_BLACK;
      001629 21 EB F3         [10] 5199 	ld	hl, #_BDRCLR
      00162C 36 01            [10] 5200 	ld	(hl), #0x01
                                   5201 ;src\/Graphics\Graphics.h:304: WRTVDP(0b0000000111100010);
      00162E 21 E2 01         [10] 5202 	ld	hl, #0x01e2
      001631 CDr00r00         [17] 5203 	call	_WRTVDP
                                   5204 ;src\/Graphics\Graphics.h:306: INIGRP();	// Set screen 2
      001634 CDr00r00         [17] 5205 	call	_INIGRP
                                   5206 ;src\/Graphics\Graphics.h:308: DISSCR();	// Disable screen (faster to write)
      001637 CDr00r00         [17] 5207 	call	_DISSCR
                                   5208 ;src\/Graphics\Graphics.h:312: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      00163A AF               [ 4] 5209 	xor	a, a
      00163B F5               [11] 5210 	push	af
      00163C 33               [ 6] 5211 	inc	sp
      00163D 21 00 40         [10] 5212 	ld	hl, #0x4000
      001640 E5               [11] 5213 	push	hl
      001641 65               [ 4] 5214 	ld	h, l
      001642 E5               [11] 5215 	push	hl
      001643 CDr00r00         [17] 5216 	call	_FILVRM
      001646 F1               [10] 5217 	pop	af
                                   5218 ;src\/Graphics\Graphics.h:321: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001647 33               [ 6] 5219 	inc	sp
      001648 21 80 03         [10] 5220 	ld	hl,#0x0380
      00164B E3               [19] 5221 	ex	(sp),hl
      00164C 21rA8r07         [10] 5222 	ld	hl, #_sprite_arrow_0
      00164F E5               [11] 5223 	push	hl
      001650 21 00 38         [10] 5224 	ld	hl, #0x3800
      001653 E5               [11] 5225 	push	hl
      001654 CDr00r00         [17] 5226 	call	_LDIRVM
      001657 21 06 00         [10] 5227 	ld	hl, #6
      00165A 39               [11] 5228 	add	hl, sp
      00165B F9               [ 6] 5229 	ld	sp, hl
                                   5230 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      00165C 0E 00            [ 7] 5231 	ld	c, #0x00
      00165E                       5232 00110$:
                                   5233 ;src\/Graphics\Graphics.h:328: WRTVRM(SPRATT + (i * 4), 	192);
      00165E 79               [ 4] 5234 	ld	a,c
      00165F FE 20            [ 7] 5235 	cp	a,#0x20
      001661 30 18            [12] 5236 	jr	NC, 00101$
      001663 26 00            [ 7] 5237 	ld	h, #0x00
      001665 6F               [ 4] 5238 	ld	l, a
      001666 29               [11] 5239 	add	hl, hl
      001667 29               [11] 5240 	add	hl, hl
      001668 7C               [ 4] 5241 	ld	a, h
      001669 C6 1B            [ 7] 5242 	add	a, #0x1b
      00166B 67               [ 4] 5243 	ld	h, a
      00166C C5               [11] 5244 	push	bc
      00166D 3E C0            [ 7] 5245 	ld	a, #0xc0
      00166F F5               [11] 5246 	push	af
      001670 33               [ 6] 5247 	inc	sp
      001671 E5               [11] 5248 	push	hl
      001672 CDr00r00         [17] 5249 	call	_WRTVRM
      001675 F1               [10] 5250 	pop	af
      001676 33               [ 6] 5251 	inc	sp
      001677 C1               [10] 5252 	pop	bc
                                   5253 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      001678 0C               [ 4] 5254 	inc	c
      001679 18 E3            [12] 5255 	jr	00110$
      00167B                       5256 00101$:
                                   5257 ;src\/Graphics\Graphics.h:337: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00167B 21 78 01         [10] 5258 	ld	hl, #0x0178
      00167E E5               [11] 5259 	push	hl
      00167F 21r78r04         [10] 5260 	ld	hl, #_pattern_black_0
      001682 E5               [11] 5261 	push	hl
      001683 21 00 00         [10] 5262 	ld	hl, #0x0000
      001686 E5               [11] 5263 	push	hl
      001687 CDr00r00         [17] 5264 	call	_LDIRVM
      00168A 21 06 00         [10] 5265 	ld	hl, #6
      00168D 39               [11] 5266 	add	hl, sp
      00168E F9               [ 6] 5267 	ld	sp, hl
                                   5268 ;src\/Graphics\Graphics.h:340: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00168F 21 78 01         [10] 5269 	ld	hl, #0x0178
      001692 E5               [11] 5270 	push	hl
      001693 21r78r04         [10] 5271 	ld	hl, #_pattern_black_0
      001696 E5               [11] 5272 	push	hl
      001697 21 00 08         [10] 5273 	ld	hl, #0x0800
      00169A E5               [11] 5274 	push	hl
      00169B CDr00r00         [17] 5275 	call	_LDIRVM
      00169E 21 06 00         [10] 5276 	ld	hl, #6
      0016A1 39               [11] 5277 	add	hl, sp
      0016A2 F9               [ 6] 5278 	ld	sp, hl
                                   5279 ;src\/Graphics\Graphics.h:343: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0016A3 21 78 01         [10] 5280 	ld	hl, #0x0178
      0016A6 E5               [11] 5281 	push	hl
      0016A7 21r78r04         [10] 5282 	ld	hl, #_pattern_black_0
      0016AA E5               [11] 5283 	push	hl
      0016AB 21 00 10         [10] 5284 	ld	hl, #0x1000
      0016AE E5               [11] 5285 	push	hl
      0016AF CDr00r00         [17] 5286 	call	_LDIRVM
      0016B2 21 06 00         [10] 5287 	ld	hl, #6
      0016B5 39               [11] 5288 	add	hl, sp
      0016B6 F9               [ 6] 5289 	ld	sp, hl
                                   5290 ;src\/Graphics\Graphics.h:346: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0016B7 21 00 03         [10] 5291 	ld	hl, #0x0300
      0016BA E5               [11] 5292 	push	hl
      0016BB 21r78r01         [10] 5293 	ld	hl, #_FONT
      0016BE E5               [11] 5294 	push	hl
      0016BF 21 78 01         [10] 5295 	ld	hl, #0x0178
      0016C2 E5               [11] 5296 	push	hl
      0016C3 CDr00r00         [17] 5297 	call	_LDIRVM
      0016C6 21 06 00         [10] 5298 	ld	hl, #6
      0016C9 39               [11] 5299 	add	hl, sp
      0016CA F9               [ 6] 5300 	ld	sp, hl
                                   5301 ;src\/Graphics\Graphics.h:349: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0016CB 21 00 03         [10] 5302 	ld	hl, #0x0300
      0016CE E5               [11] 5303 	push	hl
      0016CF 21r78r01         [10] 5304 	ld	hl, #_FONT
      0016D2 E5               [11] 5305 	push	hl
      0016D3 21 78 09         [10] 5306 	ld	hl, #0x0978
      0016D6 E5               [11] 5307 	push	hl
      0016D7 CDr00r00         [17] 5308 	call	_LDIRVM
      0016DA 21 06 00         [10] 5309 	ld	hl, #6
      0016DD 39               [11] 5310 	add	hl, sp
      0016DE F9               [ 6] 5311 	ld	sp, hl
                                   5312 ;src\/Graphics\Graphics.h:352: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0016DF 21 00 03         [10] 5313 	ld	hl, #0x0300
      0016E2 E5               [11] 5314 	push	hl
      0016E3 21r78r01         [10] 5315 	ld	hl, #_FONT
      0016E6 E5               [11] 5316 	push	hl
      0016E7 21 78 11         [10] 5317 	ld	hl, #0x1178
      0016EA E5               [11] 5318 	push	hl
      0016EB CDr00r00         [17] 5319 	call	_LDIRVM
      0016EE 21 06 00         [10] 5320 	ld	hl, #6
      0016F1 39               [11] 5321 	add	hl, sp
      0016F2 F9               [ 6] 5322 	ld	sp, hl
                                   5323 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0016F3 0E 00            [ 7] 5324 	ld	c, #0x00
      0016F5                       5325 00113$:
                                   5326 ;src\/Graphics\Graphics.h:357: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0016F5 79               [ 4] 5327 	ld	a,c
      0016F6 FE 07            [ 7] 5328 	cp	a,#0x07
      0016F8 30 20            [12] 5329 	jr	NC, 00102$
      0016FA 26 00            [ 7] 5330 	ld	h, #0x00
      0016FC 6F               [ 4] 5331 	ld	l, a
      0016FD 29               [11] 5332 	add	hl, hl
      0016FE 29               [11] 5333 	add	hl, hl
      0016FF 29               [11] 5334 	add	hl, hl
      001700 11 70 04         [10] 5335 	ld	de, #0x0470
      001703 19               [11] 5336 	add	hl, de
      001704 C5               [11] 5337 	push	bc
      001705 11 38 00         [10] 5338 	ld	de, #0x0038
      001708 D5               [11] 5339 	push	de
      001709 11rE8r05         [10] 5340 	ld	de, #_pattern_title
      00170C D5               [11] 5341 	push	de
      00170D E5               [11] 5342 	push	hl
      00170E CDr00r00         [17] 5343 	call	_LDIRVM
      001711 21 06 00         [10] 5344 	ld	hl, #6
      001714 39               [11] 5345 	add	hl, sp
      001715 F9               [ 6] 5346 	ld	sp, hl
      001716 C1               [10] 5347 	pop	bc
                                   5348 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001717 0C               [ 4] 5349 	inc	c
      001718 18 DB            [12] 5350 	jr	00113$
      00171A                       5351 00102$:
                                   5352 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      00171A 21 78 01         [10] 5353 	ld	hl, #0x0178
      00171D E5               [11] 5354 	push	hl
      00171E 21rF0r05         [10] 5355 	ld	hl, #_color_black_0
      001721 E5               [11] 5356 	push	hl
      001722 21 00 20         [10] 5357 	ld	hl, #0x2000
      001725 E5               [11] 5358 	push	hl
      001726 CDr00r00         [17] 5359 	call	_LDIRVM
      001729 21 06 00         [10] 5360 	ld	hl, #6
      00172C 39               [11] 5361 	add	hl, sp
      00172D F9               [ 6] 5362 	ld	sp, hl
                                   5363 ;src\/Graphics\Graphics.h:365: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00172E 21 78 01         [10] 5364 	ld	hl, #0x0178
      001731 E5               [11] 5365 	push	hl
      001732 21rF0r05         [10] 5366 	ld	hl, #_color_black_0
      001735 E5               [11] 5367 	push	hl
      001736 21 00 28         [10] 5368 	ld	hl, #0x2800
      001739 E5               [11] 5369 	push	hl
      00173A CDr00r00         [17] 5370 	call	_LDIRVM
      00173D 21 06 00         [10] 5371 	ld	hl, #6
      001740 39               [11] 5372 	add	hl, sp
      001741 F9               [ 6] 5373 	ld	sp, hl
                                   5374 ;src\/Graphics\Graphics.h:367: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001742 21 78 01         [10] 5375 	ld	hl, #0x0178
      001745 E5               [11] 5376 	push	hl
      001746 21rF0r05         [10] 5377 	ld	hl, #_color_black_0
      001749 E5               [11] 5378 	push	hl
      00174A 21 00 30         [10] 5379 	ld	hl, #0x3000
      00174D E5               [11] 5380 	push	hl
      00174E CDr00r00         [17] 5381 	call	_LDIRVM
      001751 21 06 00         [10] 5382 	ld	hl, #6
      001754 39               [11] 5383 	add	hl, sp
      001755 F9               [ 6] 5384 	ld	sp, hl
                                   5385 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001756 0E 00            [ 7] 5386 	ld	c, #0x00
      001758                       5387 00116$:
                                   5388 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001758 79               [ 4] 5389 	ld	a,c
      001759 FE 60            [ 7] 5390 	cp	a,#0x60
      00175B 30 20            [12] 5391 	jr	NC, 00103$
      00175D 26 00            [ 7] 5392 	ld	h, #0x00
      00175F 6F               [ 4] 5393 	ld	l, a
      001760 29               [11] 5394 	add	hl, hl
      001761 29               [11] 5395 	add	hl, hl
      001762 29               [11] 5396 	add	hl, hl
      001763 11 78 21         [10] 5397 	ld	de, #0x2178
      001766 19               [11] 5398 	add	hl, de
      001767 C5               [11] 5399 	push	bc
      001768 11 08 00         [10] 5400 	ld	de, #0x0008
      00176B D5               [11] 5401 	push	de
      00176C 11r68r07         [10] 5402 	ld	de, #_color_font_2
      00176F D5               [11] 5403 	push	de
      001770 E5               [11] 5404 	push	hl
      001771 CDr00r00         [17] 5405 	call	_LDIRVM
      001774 21 06 00         [10] 5406 	ld	hl, #6
      001777 39               [11] 5407 	add	hl, sp
      001778 F9               [ 6] 5408 	ld	sp, hl
      001779 C1               [10] 5409 	pop	bc
                                   5410 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00177A 0C               [ 4] 5411 	inc	c
      00177B 18 DB            [12] 5412 	jr	00116$
      00177D                       5413 00103$:
                                   5414 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00177D 0E 00            [ 7] 5415 	ld	c, #0x00
      00177F                       5416 00119$:
                                   5417 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      00177F 79               [ 4] 5418 	ld	a,c
      001780 FE 60            [ 7] 5419 	cp	a,#0x60
      001782 30 20            [12] 5420 	jr	NC, 00104$
      001784 26 00            [ 7] 5421 	ld	h, #0x00
      001786 6F               [ 4] 5422 	ld	l, a
      001787 29               [11] 5423 	add	hl, hl
      001788 29               [11] 5424 	add	hl, hl
      001789 29               [11] 5425 	add	hl, hl
      00178A 11 78 29         [10] 5426 	ld	de, #0x2978
      00178D 19               [11] 5427 	add	hl, de
      00178E C5               [11] 5428 	push	bc
      00178F 11 08 00         [10] 5429 	ld	de, #0x0008
      001792 D5               [11] 5430 	push	de
      001793 11r68r07         [10] 5431 	ld	de, #_color_font_2
      001796 D5               [11] 5432 	push	de
      001797 E5               [11] 5433 	push	hl
      001798 CDr00r00         [17] 5434 	call	_LDIRVM
      00179B 21 06 00         [10] 5435 	ld	hl, #6
      00179E 39               [11] 5436 	add	hl, sp
      00179F F9               [ 6] 5437 	ld	sp, hl
      0017A0 C1               [10] 5438 	pop	bc
                                   5439 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0017A1 0C               [ 4] 5440 	inc	c
      0017A2 18 DB            [12] 5441 	jr	00119$
      0017A4                       5442 00104$:
                                   5443 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0017A4 0E 00            [ 7] 5444 	ld	c, #0x00
      0017A6                       5445 00122$:
                                   5446 ;src\/Graphics\Graphics.h:383: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0017A6 79               [ 4] 5447 	ld	a,c
      0017A7 FE 60            [ 7] 5448 	cp	a,#0x60
      0017A9 30 20            [12] 5449 	jr	NC, 00105$
      0017AB 26 00            [ 7] 5450 	ld	h, #0x00
      0017AD 6F               [ 4] 5451 	ld	l, a
      0017AE 29               [11] 5452 	add	hl, hl
      0017AF 29               [11] 5453 	add	hl, hl
      0017B0 29               [11] 5454 	add	hl, hl
      0017B1 11 78 31         [10] 5455 	ld	de, #0x3178
      0017B4 19               [11] 5456 	add	hl, de
      0017B5 C5               [11] 5457 	push	bc
      0017B6 11 08 00         [10] 5458 	ld	de, #0x0008
      0017B9 D5               [11] 5459 	push	de
      0017BA 11r68r07         [10] 5460 	ld	de, #_color_font_2
      0017BD D5               [11] 5461 	push	de
      0017BE E5               [11] 5462 	push	hl
      0017BF CDr00r00         [17] 5463 	call	_LDIRVM
      0017C2 21 06 00         [10] 5464 	ld	hl, #6
      0017C5 39               [11] 5465 	add	hl, sp
      0017C6 F9               [ 6] 5466 	ld	sp, hl
      0017C7 C1               [10] 5467 	pop	bc
                                   5468 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0017C8 0C               [ 4] 5469 	inc	c
      0017C9 18 DB            [12] 5470 	jr	00122$
      0017CB                       5471 00105$:
                                   5472 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      0017CB 0E 00            [ 7] 5473 	ld	c, #0x00
      0017CD                       5474 00125$:
                                   5475 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0017CD 79               [ 4] 5476 	ld	a,c
      0017CE FE 0A            [ 7] 5477 	cp	a,#0x0a
      0017D0 30 20            [12] 5478 	jr	NC, 00106$
      0017D2 26 00            [ 7] 5479 	ld	h, #0x00
      0017D4 6F               [ 4] 5480 	ld	l, a
      0017D5 29               [11] 5481 	add	hl, hl
      0017D6 29               [11] 5482 	add	hl, hl
      0017D7 29               [11] 5483 	add	hl, hl
      0017D8 11 F8 21         [10] 5484 	ld	de, #0x21f8
      0017DB 19               [11] 5485 	add	hl, de
      0017DC C5               [11] 5486 	push	bc
      0017DD 11 08 00         [10] 5487 	ld	de, #0x0008
      0017E0 D5               [11] 5488 	push	de
      0017E1 11r60r07         [10] 5489 	ld	de, #_color_font_1
      0017E4 D5               [11] 5490 	push	de
      0017E5 E5               [11] 5491 	push	hl
      0017E6 CDr00r00         [17] 5492 	call	_LDIRVM
      0017E9 21 06 00         [10] 5493 	ld	hl, #6
      0017EC 39               [11] 5494 	add	hl, sp
      0017ED F9               [ 6] 5495 	ld	sp, hl
      0017EE C1               [10] 5496 	pop	bc
                                   5497 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      0017EF 0C               [ 4] 5498 	inc	c
      0017F0 18 DB            [12] 5499 	jr	00125$
      0017F2                       5500 00106$:
                                   5501 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      0017F2 0E 00            [ 7] 5502 	ld	c, #0x00
      0017F4                       5503 00128$:
                                   5504 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0017F4 79               [ 4] 5505 	ld	a,c
      0017F5 FE 0A            [ 7] 5506 	cp	a,#0x0a
      0017F7 30 20            [12] 5507 	jr	NC, 00107$
      0017F9 26 00            [ 7] 5508 	ld	h, #0x00
      0017FB 6F               [ 4] 5509 	ld	l, a
      0017FC 29               [11] 5510 	add	hl, hl
      0017FD 29               [11] 5511 	add	hl, hl
      0017FE 29               [11] 5512 	add	hl, hl
      0017FF 11 F8 29         [10] 5513 	ld	de, #0x29f8
      001802 19               [11] 5514 	add	hl, de
      001803 C5               [11] 5515 	push	bc
      001804 11 08 00         [10] 5516 	ld	de, #0x0008
      001807 D5               [11] 5517 	push	de
      001808 11r60r07         [10] 5518 	ld	de, #_color_font_1
      00180B D5               [11] 5519 	push	de
      00180C E5               [11] 5520 	push	hl
      00180D CDr00r00         [17] 5521 	call	_LDIRVM
      001810 21 06 00         [10] 5522 	ld	hl, #6
      001813 39               [11] 5523 	add	hl, sp
      001814 F9               [ 6] 5524 	ld	sp, hl
      001815 C1               [10] 5525 	pop	bc
                                   5526 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001816 0C               [ 4] 5527 	inc	c
      001817 18 DB            [12] 5528 	jr	00128$
      001819                       5529 00107$:
                                   5530 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001819 DD 36 FF 00      [19] 5531 	ld	-1 (ix), #0
      00181D                       5532 00131$:
      00181D DD 7E FF         [19] 5533 	ld	a, -1 (ix)
      001820 D6 0A            [ 7] 5534 	sub	a, #0x0a
      001822 30 22            [12] 5535 	jr	NC, 00108$
                                   5536 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001824 01r60r07         [10] 5537 	ld	bc, #_color_font_1
      001827 DD 6E FF         [19] 5538 	ld	l, -1 (ix)
      00182A 26 00            [ 7] 5539 	ld	h, #0x00
      00182C 29               [11] 5540 	add	hl, hl
      00182D 29               [11] 5541 	add	hl, hl
      00182E 29               [11] 5542 	add	hl, hl
      00182F 11 F8 31         [10] 5543 	ld	de, #0x31f8
      001832 19               [11] 5544 	add	hl, de
      001833 11 08 00         [10] 5545 	ld	de, #0x0008
      001836 D5               [11] 5546 	push	de
      001837 C5               [11] 5547 	push	bc
      001838 E5               [11] 5548 	push	hl
      001839 CDr00r00         [17] 5549 	call	_LDIRVM
      00183C 21 06 00         [10] 5550 	ld	hl, #6
      00183F 39               [11] 5551 	add	hl, sp
      001840 F9               [ 6] 5552 	ld	sp, hl
                                   5553 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001841 DD 34 FF         [23] 5554 	inc	-1 (ix)
      001844 18 D7            [12] 5555 	jr	00131$
      001846                       5556 00108$:
                                   5557 ;src\/Graphics\Graphics.h:404: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001846 21 38 00         [10] 5558 	ld	hl, #0x0038
      001849 E5               [11] 5559 	push	hl
      00184A 21r70r07         [10] 5560 	ld	hl, #_color_title_1
      00184D E5               [11] 5561 	push	hl
      00184E 21 70 24         [10] 5562 	ld	hl, #0x2470
      001851 E5               [11] 5563 	push	hl
      001852 CDr00r00         [17] 5564 	call	_LDIRVM
      001855 21 06 00         [10] 5565 	ld	hl, #6
      001858 39               [11] 5566 	add	hl, sp
      001859 F9               [ 6] 5567 	ld	sp, hl
                                   5568 ;src\/Graphics\Graphics.h:412: ENASCR();	// Enable screen
      00185A CDr00r00         [17] 5569 	call	_ENASCR
                                   5570 ;src\/Graphics\Graphics.h:413: }
      00185D 33               [ 6] 5571 	inc	sp
      00185E DD E1            [14] 5572 	pop	ix
      001860 C9               [10] 5573 	ret
                                   5574 ;src\/Graphics\Graphics.h:415: void DrawBlock(byte col, byte line, byte tile) {
                                   5575 ;	---------------------------------
                                   5576 ; Function DrawBlock
                                   5577 ; ---------------------------------
      001861                       5578 _DrawBlock::
      001861 DD E5            [15] 5579 	push	ix
      001863 DD 21 00 00      [14] 5580 	ld	ix,#0
      001867 DD 39            [15] 5581 	add	ix,sp
                                   5582 ;src\/Graphics\Graphics.h:417: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001869 DD 6E 04         [19] 5583 	ld	l, 4 (ix)
      00186C 26 00            [ 7] 5584 	ld	h, #0x00
      00186E 29               [11] 5585 	add	hl, hl
      00186F 4D               [ 4] 5586 	ld	c, l
      001870 44               [ 4] 5587 	ld	b, h
      001871 DD 6E 05         [19] 5588 	ld	l, 5 (ix)
      001874 26 00            [ 7] 5589 	ld	h, #0x00
      001876 29               [11] 5590 	add	hl, hl
      001877 29               [11] 5591 	add	hl, hl
      001878 29               [11] 5592 	add	hl, hl
      001879 29               [11] 5593 	add	hl, hl
      00187A 29               [11] 5594 	add	hl, hl
      00187B 29               [11] 5595 	add	hl, hl
      00187C 11 0A 18         [10] 5596 	ld	de, #0x180a
      00187F 19               [11] 5597 	add	hl, de
      001880 09               [11] 5598 	add	hl, bc
      001881 EB               [ 4] 5599 	ex	de, hl
                                   5600 ;src\/Graphics\Graphics.h:419: WRTVRM(baseAddr, tile);
      001882 D5               [11] 5601 	push	de
      001883 DD 7E 06         [19] 5602 	ld	a, 6 (ix)
      001886 F5               [11] 5603 	push	af
      001887 33               [ 6] 5604 	inc	sp
      001888 D5               [11] 5605 	push	de
      001889 CDr00r00         [17] 5606 	call	_WRTVRM
      00188C F1               [10] 5607 	pop	af
      00188D 33               [ 6] 5608 	inc	sp
      00188E D1               [10] 5609 	pop	de
                                   5610 ;src\/Graphics\Graphics.h:420: WRTVRM(baseAddr + 1, tile + 1);
      00188F DD 4E 06         [19] 5611 	ld	c, 6 (ix)
      001892 79               [ 4] 5612 	ld	a, c
      001893 3C               [ 4] 5613 	inc	a
      001894 6B               [ 4] 5614 	ld	l, e
      001895 62               [ 4] 5615 	ld	h, d
      001896 23               [ 6] 5616 	inc	hl
      001897 C5               [11] 5617 	push	bc
      001898 D5               [11] 5618 	push	de
      001899 F5               [11] 5619 	push	af
      00189A 33               [ 6] 5620 	inc	sp
      00189B E5               [11] 5621 	push	hl
      00189C CDr00r00         [17] 5622 	call	_WRTVRM
      00189F F1               [10] 5623 	pop	af
      0018A0 33               [ 6] 5624 	inc	sp
      0018A1 D1               [10] 5625 	pop	de
      0018A2 C1               [10] 5626 	pop	bc
                                   5627 ;src\/Graphics\Graphics.h:421: WRTVRM(baseAddr + 32, tile + 2);
      0018A3 41               [ 4] 5628 	ld	b, c
      0018A4 04               [ 4] 5629 	inc	b
      0018A5 04               [ 4] 5630 	inc	b
      0018A6 21 20 00         [10] 5631 	ld	hl, #0x0020
      0018A9 19               [11] 5632 	add	hl, de
      0018AA C5               [11] 5633 	push	bc
      0018AB D5               [11] 5634 	push	de
      0018AC C5               [11] 5635 	push	bc
      0018AD 33               [ 6] 5636 	inc	sp
      0018AE E5               [11] 5637 	push	hl
      0018AF CDr00r00         [17] 5638 	call	_WRTVRM
      0018B2 F1               [10] 5639 	pop	af
      0018B3 33               [ 6] 5640 	inc	sp
      0018B4 D1               [10] 5641 	pop	de
      0018B5 C1               [10] 5642 	pop	bc
                                   5643 ;src\/Graphics\Graphics.h:422: WRTVRM(baseAddr + 33, tile + 3);
      0018B6 0C               [ 4] 5644 	inc	c
      0018B7 0C               [ 4] 5645 	inc	c
      0018B8 0C               [ 4] 5646 	inc	c
      0018B9 21 21 00         [10] 5647 	ld	hl, #0x0021
      0018BC 19               [11] 5648 	add	hl, de
      0018BD 79               [ 4] 5649 	ld	a, c
      0018BE F5               [11] 5650 	push	af
      0018BF 33               [ 6] 5651 	inc	sp
      0018C0 E5               [11] 5652 	push	hl
      0018C1 CDr00r00         [17] 5653 	call	_WRTVRM
      0018C4 F1               [10] 5654 	pop	af
      0018C5 33               [ 6] 5655 	inc	sp
                                   5656 ;src\/Graphics\Graphics.h:423: }
      0018C6 DD E1            [14] 5657 	pop	ix
      0018C8 C9               [10] 5658 	ret
                                   5659 ;src\/Graphics\Graphics.h:425: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   5660 ;	---------------------------------
                                   5661 ; Function DrawBlock_SameTile
                                   5662 ; ---------------------------------
      0018C9                       5663 _DrawBlock_SameTile::
      0018C9 DD E5            [15] 5664 	push	ix
      0018CB DD 21 00 00      [14] 5665 	ld	ix,#0
      0018CF DD 39            [15] 5666 	add	ix,sp
                                   5667 ;src\/Graphics\Graphics.h:427: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0018D1 DD 6E 04         [19] 5668 	ld	l, 4 (ix)
      0018D4 26 00            [ 7] 5669 	ld	h, #0x00
      0018D6 29               [11] 5670 	add	hl, hl
      0018D7 4D               [ 4] 5671 	ld	c, l
      0018D8 44               [ 4] 5672 	ld	b, h
      0018D9 DD 6E 05         [19] 5673 	ld	l, 5 (ix)
      0018DC 26 00            [ 7] 5674 	ld	h, #0x00
      0018DE 29               [11] 5675 	add	hl, hl
      0018DF 29               [11] 5676 	add	hl, hl
      0018E0 29               [11] 5677 	add	hl, hl
      0018E1 29               [11] 5678 	add	hl, hl
      0018E2 29               [11] 5679 	add	hl, hl
      0018E3 29               [11] 5680 	add	hl, hl
      0018E4 11 0A 18         [10] 5681 	ld	de, #0x180a
      0018E7 19               [11] 5682 	add	hl, de
      0018E8 09               [11] 5683 	add	hl, bc
      0018E9 EB               [ 4] 5684 	ex	de, hl
                                   5685 ;src\/Graphics\Graphics.h:429: WRTVRM(baseAddr, tile);
      0018EA D5               [11] 5686 	push	de
      0018EB DD 7E 06         [19] 5687 	ld	a, 6 (ix)
      0018EE F5               [11] 5688 	push	af
      0018EF 33               [ 6] 5689 	inc	sp
      0018F0 D5               [11] 5690 	push	de
      0018F1 CDr00r00         [17] 5691 	call	_WRTVRM
      0018F4 F1               [10] 5692 	pop	af
      0018F5 33               [ 6] 5693 	inc	sp
      0018F6 D1               [10] 5694 	pop	de
                                   5695 ;src\/Graphics\Graphics.h:430: WRTVRM(baseAddr + 1, tile);
      0018F7 4B               [ 4] 5696 	ld	c, e
      0018F8 42               [ 4] 5697 	ld	b, d
      0018F9 03               [ 6] 5698 	inc	bc
      0018FA D5               [11] 5699 	push	de
      0018FB DD 7E 06         [19] 5700 	ld	a, 6 (ix)
      0018FE F5               [11] 5701 	push	af
      0018FF 33               [ 6] 5702 	inc	sp
      001900 C5               [11] 5703 	push	bc
      001901 CDr00r00         [17] 5704 	call	_WRTVRM
      001904 F1               [10] 5705 	pop	af
      001905 33               [ 6] 5706 	inc	sp
      001906 D1               [10] 5707 	pop	de
                                   5708 ;src\/Graphics\Graphics.h:431: WRTVRM(baseAddr + 32, tile);
      001907 21 20 00         [10] 5709 	ld	hl, #0x0020
      00190A 19               [11] 5710 	add	hl, de
      00190B D5               [11] 5711 	push	de
      00190C DD 7E 06         [19] 5712 	ld	a, 6 (ix)
      00190F F5               [11] 5713 	push	af
      001910 33               [ 6] 5714 	inc	sp
      001911 E5               [11] 5715 	push	hl
      001912 CDr00r00         [17] 5716 	call	_WRTVRM
      001915 F1               [10] 5717 	pop	af
      001916 33               [ 6] 5718 	inc	sp
      001917 D1               [10] 5719 	pop	de
                                   5720 ;src\/Graphics\Graphics.h:432: WRTVRM(baseAddr + 33, tile);
      001918 21 21 00         [10] 5721 	ld	hl, #0x0021
      00191B 19               [11] 5722 	add	hl, de
      00191C DD 7E 06         [19] 5723 	ld	a, 6 (ix)
      00191F F5               [11] 5724 	push	af
      001920 33               [ 6] 5725 	inc	sp
      001921 E5               [11] 5726 	push	hl
      001922 CDr00r00         [17] 5727 	call	_WRTVRM
      001925 F1               [10] 5728 	pop	af
      001926 33               [ 6] 5729 	inc	sp
                                   5730 ;src\/Graphics\Graphics.h:433: }
      001927 DD E1            [14] 5731 	pop	ix
      001929 C9               [10] 5732 	ret
                                   5733 ;src\/Graphics\Graphics.h:435: void DrawLine(byte line) {
                                   5734 ;	---------------------------------
                                   5735 ; Function DrawLine
                                   5736 ; ---------------------------------
      00192A                       5737 _DrawLine::
      00192A DD E5            [15] 5738 	push	ix
      00192C DD 21 00 00      [14] 5739 	ld	ix,#0
      001930 DD 39            [15] 5740 	add	ix,sp
                                   5741 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001932 DD 4E 04         [19] 5742 	ld	c, 4 (ix)
      001935 06 00            [ 7] 5743 	ld	b, #0x00
      001937                       5744 00103$:
      001937 78               [ 4] 5745 	ld	a, b
      001938 D6 06            [ 7] 5746 	sub	a, #0x06
      00193A 30 23            [12] 5747 	jr	NC, 00105$
                                   5748 ;src\/Graphics\Graphics.h:437: DrawBlock(col, line, playfield[col][line]);
      00193C 58               [ 4] 5749 	ld	e, b
      00193D 16 00            [ 7] 5750 	ld	d, #0x00
      00193F 6B               [ 4] 5751 	ld	l, e
      001940 62               [ 4] 5752 	ld	h, d
      001941 29               [11] 5753 	add	hl, hl
      001942 19               [11] 5754 	add	hl, de
      001943 29               [11] 5755 	add	hl, hl
      001944 29               [11] 5756 	add	hl, hl
      001945 11r00r00         [10] 5757 	ld	de, #_playfield
      001948 19               [11] 5758 	add	hl, de
      001949 59               [ 4] 5759 	ld	e, c
      00194A 16 00            [ 7] 5760 	ld	d, #0x00
      00194C 19               [11] 5761 	add	hl, de
      00194D 7E               [ 7] 5762 	ld	a, (hl)
      00194E C5               [11] 5763 	push	bc
      00194F F5               [11] 5764 	push	af
      001950 33               [ 6] 5765 	inc	sp
      001951 79               [ 4] 5766 	ld	a, c
      001952 F5               [11] 5767 	push	af
      001953 33               [ 6] 5768 	inc	sp
      001954 C5               [11] 5769 	push	bc
      001955 33               [ 6] 5770 	inc	sp
      001956 CDr61r18         [17] 5771 	call	_DrawBlock
      001959 F1               [10] 5772 	pop	af
      00195A 33               [ 6] 5773 	inc	sp
      00195B C1               [10] 5774 	pop	bc
                                   5775 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00195C 04               [ 4] 5776 	inc	b
      00195D 18 D8            [12] 5777 	jr	00103$
      00195F                       5778 00105$:
                                   5779 ;src\/Graphics\Graphics.h:439: }
      00195F DD E1            [14] 5780 	pop	ix
      001961 C9               [10] 5781 	ret
                                   5782 ;src\/Graphics\Graphics.h:441: void DrawPiece(byte line) {
                                   5783 ;	---------------------------------
                                   5784 ; Function DrawPiece
                                   5785 ; ---------------------------------
      001962                       5786 _DrawPiece::
                                   5787 ;src\/Graphics\Graphics.h:442: DrawLine(line);
      001962 21 02 00         [10] 5788 	ld	hl, #2
      001965 39               [11] 5789 	add	hl, sp
      001966 7E               [ 7] 5790 	ld	a, (hl)
      001967 F5               [11] 5791 	push	af
      001968 33               [ 6] 5792 	inc	sp
      001969 CDr2Ar19         [17] 5793 	call	_DrawLine
      00196C 33               [ 6] 5794 	inc	sp
                                   5795 ;src\/Graphics\Graphics.h:443: DrawLine(line + 1);
      00196D 21 02 00         [10] 5796 	ld	hl, #2
      001970 39               [11] 5797 	add	hl, sp
      001971 46               [ 7] 5798 	ld	b, (hl)
      001972 78               [ 4] 5799 	ld	a, b
      001973 3C               [ 4] 5800 	inc	a
      001974 C5               [11] 5801 	push	bc
      001975 F5               [11] 5802 	push	af
      001976 33               [ 6] 5803 	inc	sp
      001977 CDr2Ar19         [17] 5804 	call	_DrawLine
      00197A 33               [ 6] 5805 	inc	sp
      00197B C1               [10] 5806 	pop	bc
                                   5807 ;src\/Graphics\Graphics.h:444: DrawLine(line + 2);
      00197C 04               [ 4] 5808 	inc	b
      00197D 04               [ 4] 5809 	inc	b
      00197E C5               [11] 5810 	push	bc
      00197F 33               [ 6] 5811 	inc	sp
      001980 CDr2Ar19         [17] 5812 	call	_DrawLine
      001983 33               [ 6] 5813 	inc	sp
                                   5814 ;src\/Graphics\Graphics.h:445: }
      001984 C9               [10] 5815 	ret
                                   5816 ;src\/Graphics\Graphics.h:447: void DrawPlayfield() {
                                   5817 ;	---------------------------------
                                   5818 ; Function DrawPlayfield
                                   5819 ; ---------------------------------
      001985                       5820 _DrawPlayfield::
                                   5821 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001985 06 00            [ 7] 5822 	ld	b, #0x00
      001987                       5823 00103$:
      001987 78               [ 4] 5824 	ld	a, b
      001988 D6 0C            [ 7] 5825 	sub	a, #0x0c
      00198A D0               [11] 5826 	ret	NC
                                   5827 ;src\/Graphics\Graphics.h:449: DrawLine(line);
      00198B C5               [11] 5828 	push	bc
      00198C C5               [11] 5829 	push	bc
      00198D 33               [ 6] 5830 	inc	sp
      00198E CDr2Ar19         [17] 5831 	call	_DrawLine
      001991 33               [ 6] 5832 	inc	sp
      001992 C1               [10] 5833 	pop	bc
                                   5834 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001993 04               [ 4] 5835 	inc	b
                                   5836 ;src\/Graphics\Graphics.h:451: }
      001994 18 F1            [12] 5837 	jr	00103$
                                   5838 ;src\/Sound.h:1: void SoundFx_2() {
                                   5839 ;	---------------------------------
                                   5840 ; Function SoundFx_2
                                   5841 ; ---------------------------------
      001996                       5842 _SoundFx_2::
                                   5843 ;src\/Sound.h:2: GICINI();
      001996 CDr00r00         [17] 5844 	call	_GICINI
                                   5845 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001999 21 08 0F         [10] 5846 	ld	hl, #0x0f08
      00199C CDr00r00         [17] 5847 	call	_WRTPSG
                                   5848 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00199F 0E 00            [ 7] 5849 	ld	c, #0x00
      0019A1                       5850 00104$:
      0019A1 79               [ 4] 5851 	ld	a, c
      0019A2 D6 FF            [ 7] 5852 	sub	a, #0xff
      0019A4 30 11            [12] 5853 	jr	NC, 00101$
                                   5854 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0019A6 C5               [11] 5855 	push	bc
      0019A7 21 00 5D         [10] 5856 	ld	hl, #0x5d00
      0019AA CDr00r00         [17] 5857 	call	_WRTPSG
      0019AD 21 01 00         [10] 5858 	ld	hl, #0x0001
      0019B0 CDr00r00         [17] 5859 	call	_WRTPSG
      0019B3 C1               [10] 5860 	pop	bc
                                   5861 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0019B4 0C               [ 4] 5862 	inc	c
      0019B5 18 EA            [12] 5863 	jr	00104$
      0019B7                       5864 00101$:
                                   5865 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0019B7 0E 00            [ 7] 5866 	ld	c, #0x00
      0019B9                       5867 00107$:
      0019B9 79               [ 4] 5868 	ld	a, c
      0019BA D6 FF            [ 7] 5869 	sub	a, #0xff
      0019BC 30 11            [12] 5870 	jr	NC, 00102$
                                   5871 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0019BE C5               [11] 5872 	push	bc
      0019BF 21 00 2D         [10] 5873 	ld	hl, #0x2d00
      0019C2 CDr00r00         [17] 5874 	call	_WRTPSG
      0019C5 21 01 00         [10] 5875 	ld	hl, #0x0001
      0019C8 CDr00r00         [17] 5876 	call	_WRTPSG
      0019CB C1               [10] 5877 	pop	bc
                                   5878 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0019CC 0C               [ 4] 5879 	inc	c
      0019CD 18 EA            [12] 5880 	jr	00107$
      0019CF                       5881 00102$:
                                   5882 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0019CF 21 08 00         [10] 5883 	ld	hl, #0x0008
                                   5884 ;src\/Sound.h:30: }
      0019D2 C3r00r00         [10] 5885 	jp	_WRTPSG
                                   5886 ;src\/Sound.h:32: void SoundFx_1() {
                                   5887 ;	---------------------------------
                                   5888 ; Function SoundFx_1
                                   5889 ; ---------------------------------
      0019D5                       5890 _SoundFx_1::
                                   5891 ;src\/Sound.h:34: GICINI();
      0019D5 CDr00r00         [17] 5892 	call	_GICINI
                                   5893 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0019D8 21 06 97         [10] 5894 	ld	hl, #0x9706
      0019DB CDr00r00         [17] 5895 	call	_WRTPSG
                                   5896 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0019DE 21 07 81         [10] 5897 	ld	hl, #0x8107
      0019E1 CDr00r00         [17] 5898 	call	_WRTPSG
                                   5899 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0019E4 21 08 10         [10] 5900 	ld	hl, #0x1008
      0019E7 CDr00r00         [17] 5901 	call	_WRTPSG
                                   5902 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      0019EA 21 0C 13         [10] 5903 	ld	hl, #0x130c
      0019ED CDr00r00         [17] 5904 	call	_WRTPSG
                                   5905 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      0019F0 21 0D 01         [10] 5906 	ld	hl, #0x010d
                                   5907 ;src\/Sound.h:49: }
      0019F3 C3r00r00         [10] 5908 	jp	_WRTPSG
                                   5909 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5910 ;	---------------------------------
                                   5911 ; Function CheckPlayfield
                                   5912 ; ---------------------------------
      0019F6                       5913 _CheckPlayfield::
      0019F6 DD E5            [15] 5914 	push	ix
      0019F8 DD 21 00 00      [14] 5915 	ld	ix,#0
      0019FC DD 39            [15] 5916 	add	ix,sp
      0019FE 21 EF FF         [10] 5917 	ld	hl, #-17
      001A01 39               [11] 5918 	add	hl, sp
      001A02 F9               [ 6] 5919 	ld	sp, hl
                                   5920 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001A03 DD 36 EF 00      [19] 5921 	ld	-17 (ix), #0
                                   5922 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A07 0E 00            [ 7] 5923 	ld	c, #0x00
      001A09                       5924 00196$:
      001A09 79               [ 4] 5925 	ld	a, c
      001A0A D6 0C            [ 7] 5926 	sub	a, #0x0c
      001A0C 30 36            [12] 5927 	jr	NC, 00102$
                                   5928 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A0E DD 36 FF 00      [19] 5929 	ld	-1 (ix), #0
      001A12                       5930 00193$:
      001A12 DD 7E FF         [19] 5931 	ld	a, -1 (ix)
      001A15 D6 06            [ 7] 5932 	sub	a, #0x06
      001A17 30 28            [12] 5933 	jr	NC, 00197$
                                   5934 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001A19 DD 5E FF         [19] 5935 	ld	e, -1 (ix)
      001A1C 16 00            [ 7] 5936 	ld	d, #0x00
      001A1E 6B               [ 4] 5937 	ld	l, e
      001A1F 62               [ 4] 5938 	ld	h, d
      001A20 29               [11] 5939 	add	hl, hl
      001A21 19               [11] 5940 	add	hl, de
      001A22 29               [11] 5941 	add	hl, hl
      001A23 29               [11] 5942 	add	hl, hl
      001A24 EB               [ 4] 5943 	ex	de, hl
      001A25 21r48r00         [10] 5944 	ld	hl, #_playfieldTemp
      001A28 19               [11] 5945 	add	hl, de
      001A29 06 00            [ 7] 5946 	ld	b, #0x00
      001A2B 09               [11] 5947 	add	hl, bc
      001A2C 3Er00            [ 7] 5948 	ld	a, #<(_playfield)
      001A2E 83               [ 4] 5949 	add	a, e
      001A2F 5F               [ 4] 5950 	ld	e, a
      001A30 3Es00            [ 7] 5951 	ld	a, #>(_playfield)
      001A32 8A               [ 4] 5952 	adc	a, d
      001A33 57               [ 4] 5953 	ld	d, a
      001A34 7B               [ 4] 5954 	ld	a, e
      001A35 81               [ 4] 5955 	add	a, c
      001A36 5F               [ 4] 5956 	ld	e, a
      001A37 30 01            [12] 5957 	jr	NC, 00615$
      001A39 14               [ 4] 5958 	inc	d
      001A3A                       5959 00615$:
      001A3A 1A               [ 7] 5960 	ld	a, (de)
      001A3B 77               [ 7] 5961 	ld	(hl), a
                                   5962 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A3C DD 34 FF         [23] 5963 	inc	-1 (ix)
      001A3F 18 D1            [12] 5964 	jr	00193$
      001A41                       5965 00197$:
                                   5966 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A41 0C               [ 4] 5967 	inc	c
      001A42 18 C5            [12] 5968 	jr	00196$
      001A44                       5969 00102$:
                                   5970 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A44 DD 36 FE 00      [19] 5971 	ld	-2 (ix), #0
      001A48                       5972 00202$:
      001A48 DD 7E FE         [19] 5973 	ld	a, -2 (ix)
      001A4B D6 0C            [ 7] 5974 	sub	a, #0x0c
      001A4D D2r4Cr1B         [10] 5975 	jp	NC, 00108$
                                   5976 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A50 DD 36 FF 02      [19] 5977 	ld	-1 (ix), #0x02
      001A54                       5978 00199$:
      001A54 DD 7E FF         [19] 5979 	ld	a, -1 (ix)
      001A57 D6 06            [ 7] 5980 	sub	a, #0x06
      001A59 D2r46r1B         [10] 5981 	jp	NC, 00203$
                                   5982 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      001A5C DD 4E FF         [19] 5983 	ld	c, -1 (ix)
      001A5F 06 00            [ 7] 5984 	ld	b, #0x00
      001A61 69               [ 4] 5985 	ld	l, c
      001A62 60               [ 4] 5986 	ld	h, b
      001A63 29               [11] 5987 	add	hl, hl
      001A64 09               [11] 5988 	add	hl, bc
      001A65 29               [11] 5989 	add	hl, hl
      001A66 29               [11] 5990 	add	hl, hl
      001A67 DD 75 F5         [19] 5991 	ld	-11 (ix), l
      001A6A DD 74 F6         [19] 5992 	ld	-10 (ix), h
      001A6D 3Er48            [ 7] 5993 	ld	a, #<(_playfieldTemp)
      001A6F DD 86 F5         [19] 5994 	add	a, -11 (ix)
      001A72 4F               [ 4] 5995 	ld	c, a
      001A73 3Es00            [ 7] 5996 	ld	a, #>(_playfieldTemp)
      001A75 DD 8E F6         [19] 5997 	adc	a, -10 (ix)
      001A78 47               [ 4] 5998 	ld	b, a
      001A79 79               [ 4] 5999 	ld	a, c
      001A7A DD 86 FE         [19] 6000 	add	a, -2 (ix)
      001A7D DD 77 F7         [19] 6001 	ld	-9 (ix), a
      001A80 78               [ 4] 6002 	ld	a, b
      001A81 CE 00            [ 7] 6003 	adc	a, #0x00
      001A83 DD 77 F8         [19] 6004 	ld	-8 (ix), a
      001A86 DD 6E F7         [19] 6005 	ld	l, -9 (ix)
      001A89 DD 66 F8         [19] 6006 	ld	h, -8 (ix)
      001A8C 7E               [ 7] 6007 	ld	a, (hl)
      001A8D DD 77 F9         [19] 6008 	ld	-7 (ix), a
      001A90 B7               [ 4] 6009 	or	a, a
      001A91 CAr40r1B         [10] 6010 	jp	Z, 00200$
                                   6011 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001A94 DD 7E FF         [19] 6012 	ld	a, -1 (ix)
      001A97 DD 77 FD         [19] 6013 	ld	-3 (ix), a
      001A9A 4F               [ 4] 6014 	ld	c, a
      001A9B 0D               [ 4] 6015 	dec	c
      001A9C 0D               [ 4] 6016 	dec	c
      001A9D 79               [ 4] 6017 	ld	a, c
      001A9E 07               [ 4] 6018 	rlca
      001A9F 9F               [ 4] 6019 	sbc	a, a
      001AA0 47               [ 4] 6020 	ld	b, a
      001AA1 69               [ 4] 6021 	ld	l, c
      001AA2 60               [ 4] 6022 	ld	h, b
      001AA3 29               [11] 6023 	add	hl, hl
      001AA4 09               [11] 6024 	add	hl, bc
      001AA5 29               [11] 6025 	add	hl, hl
      001AA6 29               [11] 6026 	add	hl, hl
      001AA7 EB               [ 4] 6027 	ex	de, hl
      001AA8 21r48r00         [10] 6028 	ld	hl, #_playfieldTemp
      001AAB 19               [11] 6029 	add	hl, de
      001AAC 7D               [ 4] 6030 	ld	a, l
      001AAD DD 86 FE         [19] 6031 	add	a, -2 (ix)
      001AB0 DD 77 FA         [19] 6032 	ld	-6 (ix), a
      001AB3 7C               [ 4] 6033 	ld	a, h
      001AB4 CE 00            [ 7] 6034 	adc	a, #0x00
      001AB6 DD 77 FB         [19] 6035 	ld	-5 (ix), a
      001AB9 DD 4E FD         [19] 6036 	ld	c, -3 (ix)
      001ABC 0D               [ 4] 6037 	dec	c
      001ABD 79               [ 4] 6038 	ld	a, c
      001ABE 07               [ 4] 6039 	rlca
      001ABF 9F               [ 4] 6040 	sbc	a, a
      001AC0 47               [ 4] 6041 	ld	b, a
      001AC1 69               [ 4] 6042 	ld	l, c
      001AC2 60               [ 4] 6043 	ld	h, b
      001AC3 29               [11] 6044 	add	hl, hl
      001AC4 09               [11] 6045 	add	hl, bc
      001AC5 29               [11] 6046 	add	hl, hl
      001AC6 29               [11] 6047 	add	hl, hl
      001AC7 DD 75 FC         [19] 6048 	ld	-4 (ix), l
      001ACA DD 74 FD         [19] 6049 	ld	-3 (ix), h
      001ACD 3Er48            [ 7] 6050 	ld	a, #<(_playfieldTemp)
      001ACF DD 86 FC         [19] 6051 	add	a, -4 (ix)
      001AD2 4F               [ 4] 6052 	ld	c, a
      001AD3 3Es00            [ 7] 6053 	ld	a, #>(_playfieldTemp)
      001AD5 DD 8E FD         [19] 6054 	adc	a, -3 (ix)
      001AD8 47               [ 4] 6055 	ld	b, a
      001AD9 79               [ 4] 6056 	ld	a, c
      001ADA DD 86 FE         [19] 6057 	add	a, -2 (ix)
      001ADD 4F               [ 4] 6058 	ld	c, a
      001ADE 30 01            [12] 6059 	jr	NC, 00616$
      001AE0 04               [ 4] 6060 	inc	b
      001AE1                       6061 00616$:
      001AE1 DD 6E FA         [19] 6062 	ld	l, -6 (ix)
      001AE4 DD 66 FB         [19] 6063 	ld	h, -5 (ix)
      001AE7 6E               [ 7] 6064 	ld	l, (hl)
      001AE8 0A               [ 7] 6065 	ld	a, (bc)
      001AE9 67               [ 4] 6066 	ld	h, a
      001AEA 7D               [ 4] 6067 	ld	a, l
      001AEB 94               [ 4] 6068 	sub	a, h
      001AEC 20 52            [12] 6069 	jr	NZ, 00200$
                                   6070 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      001AEE DD 7E F9         [19] 6071 	ld	a, -7 (ix)
      001AF1 94               [ 4] 6072 	sub	a, h
      001AF2 20 4C            [12] 6073 	jr	NZ, 00200$
                                   6074 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      001AF4 DD 36 EF 01      [19] 6075 	ld	-17 (ix), #0x01
                                   6076 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001AF8 3Er00            [ 7] 6077 	ld	a, #<(_playfield)
      001AFA 83               [ 4] 6078 	add	a, e
      001AFB 5F               [ 4] 6079 	ld	e, a
      001AFC 3Es00            [ 7] 6080 	ld	a, #>(_playfield)
      001AFE 8A               [ 4] 6081 	adc	a, d
      001AFF 57               [ 4] 6082 	ld	d, a
      001B00 7B               [ 4] 6083 	ld	a, e
      001B01 DD 86 FE         [19] 6084 	add	a, -2 (ix)
      001B04 5F               [ 4] 6085 	ld	e, a
      001B05 30 01            [12] 6086 	jr	NC, 00621$
      001B07 14               [ 4] 6087 	inc	d
      001B08                       6088 00621$:
      001B08 7D               [ 4] 6089 	ld	a, l
      001B09 CB FF            [ 8] 6090 	set	7, a
      001B0B 12               [ 7] 6091 	ld	(de), a
                                   6092 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001B0C 3Er00            [ 7] 6093 	ld	a, #<(_playfield)
      001B0E DD 86 FC         [19] 6094 	add	a, -4 (ix)
      001B11 5F               [ 4] 6095 	ld	e, a
      001B12 3Es00            [ 7] 6096 	ld	a, #>(_playfield)
      001B14 DD 8E FD         [19] 6097 	adc	a, -3 (ix)
      001B17 57               [ 4] 6098 	ld	d, a
      001B18 DD 6E FE         [19] 6099 	ld	l, -2 (ix)
      001B1B 26 00            [ 7] 6100 	ld	h, #0x00
      001B1D 19               [11] 6101 	add	hl, de
      001B1E 0A               [ 7] 6102 	ld	a, (bc)
      001B1F CB FF            [ 8] 6103 	set	7, a
      001B21 77               [ 7] 6104 	ld	(hl), a
                                   6105 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001B22 3Er00            [ 7] 6106 	ld	a, #<(_playfield)
      001B24 DD 86 F5         [19] 6107 	add	a, -11 (ix)
      001B27 4F               [ 4] 6108 	ld	c, a
      001B28 3Es00            [ 7] 6109 	ld	a, #>(_playfield)
      001B2A DD 8E F6         [19] 6110 	adc	a, -10 (ix)
      001B2D 47               [ 4] 6111 	ld	b, a
      001B2E 79               [ 4] 6112 	ld	a, c
      001B2F DD 86 FE         [19] 6113 	add	a, -2 (ix)
      001B32 4F               [ 4] 6114 	ld	c, a
      001B33 30 01            [12] 6115 	jr	NC, 00622$
      001B35 04               [ 4] 6116 	inc	b
      001B36                       6117 00622$:
      001B36 DD 6E F7         [19] 6118 	ld	l, -9 (ix)
      001B39 DD 66 F8         [19] 6119 	ld	h, -8 (ix)
      001B3C 7E               [ 7] 6120 	ld	a, (hl)
      001B3D CB FF            [ 8] 6121 	set	7, a
      001B3F 02               [ 7] 6122 	ld	(bc), a
      001B40                       6123 00200$:
                                   6124 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001B40 DD 34 FF         [23] 6125 	inc	-1 (ix)
      001B43 C3r54r1A         [10] 6126 	jp	00199$
      001B46                       6127 00203$:
                                   6128 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B46 DD 34 FE         [23] 6129 	inc	-2 (ix)
      001B49 C3r48r1A         [10] 6130 	jp	00202$
      001B4C                       6131 00108$:
                                   6132 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001B4C 0E 02            [ 7] 6133 	ld	c, #0x02
      001B4E                       6134 00208$:
      001B4E 79               [ 4] 6135 	ld	a, c
      001B4F D6 0C            [ 7] 6136 	sub	a, #0x0c
      001B51 D2r13r1C         [10] 6137 	jp	NC, 00114$
                                   6138 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B54 DD 36 FF 00      [19] 6139 	ld	-1 (ix), #0
      001B58                       6140 00205$:
      001B58 DD 7E FF         [19] 6141 	ld	a, -1 (ix)
      001B5B D6 06            [ 7] 6142 	sub	a, #0x06
      001B5D D2r0Fr1C         [10] 6143 	jp	NC, 00209$
                                   6144 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      001B60 DD 5E FF         [19] 6145 	ld	e, -1 (ix)
      001B63 16 00            [ 7] 6146 	ld	d, #0x00
      001B65 6B               [ 4] 6147 	ld	l, e
      001B66 62               [ 4] 6148 	ld	h, d
      001B67 29               [11] 6149 	add	hl, hl
      001B68 19               [11] 6150 	add	hl, de
      001B69 29               [11] 6151 	add	hl, hl
      001B6A 29               [11] 6152 	add	hl, hl
      001B6B DD 75 F7         [19] 6153 	ld	-9 (ix), l
      001B6E DD 74 F8         [19] 6154 	ld	-8 (ix), h
      001B71 3Er48            [ 7] 6155 	ld	a, #<(_playfieldTemp)
      001B73 DD 86 F7         [19] 6156 	add	a, -9 (ix)
      001B76 5F               [ 4] 6157 	ld	e, a
      001B77 3Es00            [ 7] 6158 	ld	a, #>(_playfieldTemp)
      001B79 DD 8E F8         [19] 6159 	adc	a, -8 (ix)
      001B7C 57               [ 4] 6160 	ld	d, a
      001B7D 7B               [ 4] 6161 	ld	a, e
      001B7E 81               [ 4] 6162 	add	a, c
      001B7F DD 77 F9         [19] 6163 	ld	-7 (ix), a
      001B82 7A               [ 4] 6164 	ld	a, d
      001B83 CE 00            [ 7] 6165 	adc	a, #0x00
      001B85 DD 77 FA         [19] 6166 	ld	-6 (ix), a
      001B88 DD 6E F9         [19] 6167 	ld	l, -7 (ix)
      001B8B DD 66 FA         [19] 6168 	ld	h, -6 (ix)
      001B8E 7E               [ 7] 6169 	ld	a, (hl)
      001B8F DD 77 FE         [19] 6170 	ld	-2 (ix), a
      001B92 B7               [ 4] 6171 	or	a, a
      001B93 28 74            [12] 6172 	jr	Z, 00206$
                                   6173 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001B95 DD 71 FD         [19] 6174 	ld	-3 (ix), c
      001B98 79               [ 4] 6175 	ld	a, c
      001B99 C6 FE            [ 7] 6176 	add	a, #0xfe
      001B9B DD 77 FB         [19] 6177 	ld	-5 (ix), a
      001B9E 6F               [ 4] 6178 	ld	l, a
      001B9F 26 00            [ 7] 6179 	ld	h, #0x00
      001BA1 19               [11] 6180 	add	hl, de
      001BA2 DD 46 FD         [19] 6181 	ld	b, -3 (ix)
      001BA5 05               [ 4] 6182 	dec	b
      001BA6 7B               [ 4] 6183 	ld	a, e
      001BA7 80               [ 4] 6184 	add	a, b
      001BA8 5F               [ 4] 6185 	ld	e, a
      001BA9 30 01            [12] 6186 	jr	NC, 00623$
      001BAB 14               [ 4] 6187 	inc	d
      001BAC                       6188 00623$:
      001BAC 7E               [ 7] 6189 	ld	a, (hl)
      001BAD DD 77 FC         [19] 6190 	ld	-4 (ix), a
      001BB0 1A               [ 7] 6191 	ld	a, (de)
      001BB1 6F               [ 4] 6192 	ld	l, a
      001BB2 DD 7E FC         [19] 6193 	ld	a, -4 (ix)
      001BB5 95               [ 4] 6194 	sub	a, l
      001BB6 20 51            [12] 6195 	jr	NZ, 00206$
                                   6196 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001BB8 DD 7E FE         [19] 6197 	ld	a, -2 (ix)
      001BBB 95               [ 4] 6198 	sub	a, l
      001BBC 20 4B            [12] 6199 	jr	NZ, 00206$
                                   6200 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      001BBE DD 36 EF 01      [19] 6201 	ld	-17 (ix), #0x01
                                   6202 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001BC2 3Er00            [ 7] 6203 	ld	a, #<(_playfield)
      001BC4 DD 86 F7         [19] 6204 	add	a, -9 (ix)
      001BC7 DD 77 FD         [19] 6205 	ld	-3 (ix), a
      001BCA 3Es00            [ 7] 6206 	ld	a, #>(_playfield)
      001BCC DD 8E F8         [19] 6207 	adc	a, -8 (ix)
      001BCF DD 77 FE         [19] 6208 	ld	-2 (ix), a
      001BD2 DD 7E FD         [19] 6209 	ld	a, -3 (ix)
      001BD5 DD 86 FB         [19] 6210 	add	a, -5 (ix)
      001BD8 6F               [ 4] 6211 	ld	l, a
      001BD9 DD 7E FE         [19] 6212 	ld	a, -2 (ix)
      001BDC CE 00            [ 7] 6213 	adc	a, #0x00
      001BDE 67               [ 4] 6214 	ld	h, a
      001BDF DD 7E FC         [19] 6215 	ld	a, -4 (ix)
      001BE2 CB FF            [ 8] 6216 	set	7, a
      001BE4 77               [ 7] 6217 	ld	(hl), a
                                   6218 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001BE5 DD 7E FD         [19] 6219 	ld	a, -3 (ix)
      001BE8 80               [ 4] 6220 	add	a, b
      001BE9 6F               [ 4] 6221 	ld	l, a
      001BEA DD 7E FE         [19] 6222 	ld	a, -2 (ix)
      001BED CE 00            [ 7] 6223 	adc	a, #0x00
      001BEF 67               [ 4] 6224 	ld	h, a
      001BF0 1A               [ 7] 6225 	ld	a, (de)
      001BF1 CB FF            [ 8] 6226 	set	7, a
      001BF3 77               [ 7] 6227 	ld	(hl), a
                                   6228 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001BF4 DD 7E FD         [19] 6229 	ld	a, -3 (ix)
      001BF7 81               [ 4] 6230 	add	a, c
      001BF8 5F               [ 4] 6231 	ld	e, a
      001BF9 DD 7E FE         [19] 6232 	ld	a, -2 (ix)
      001BFC CE 00            [ 7] 6233 	adc	a, #0x00
      001BFE 57               [ 4] 6234 	ld	d, a
      001BFF DD 6E F9         [19] 6235 	ld	l, -7 (ix)
      001C02 DD 66 FA         [19] 6236 	ld	h, -6 (ix)
      001C05 7E               [ 7] 6237 	ld	a, (hl)
      001C06 CB FF            [ 8] 6238 	set	7, a
      001C08 12               [ 7] 6239 	ld	(de), a
      001C09                       6240 00206$:
                                   6241 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C09 DD 34 FF         [23] 6242 	inc	-1 (ix)
      001C0C C3r58r1B         [10] 6243 	jp	00205$
      001C0F                       6244 00209$:
                                   6245 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001C0F 0C               [ 4] 6246 	inc	c
      001C10 C3r4Er1B         [10] 6247 	jp	00208$
      001C13                       6248 00114$:
                                   6249 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001C13 DD 36 FE 02      [19] 6250 	ld	-2 (ix), #0x02
      001C17                       6251 00214$:
      001C17 DD 7E FE         [19] 6252 	ld	a, -2 (ix)
      001C1A D6 0C            [ 7] 6253 	sub	a, #0x0c
      001C1C D2rBAr1D         [10] 6254 	jp	NC, 00124$
                                   6255 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001C1F DD 36 FF 02      [19] 6256 	ld	-1 (ix), #0x02
      001C23                       6257 00211$:
      001C23 DD 7E FF         [19] 6258 	ld	a, -1 (ix)
      001C26 D6 06            [ 7] 6259 	sub	a, #0x06
      001C28 D2rB4r1D         [10] 6260 	jp	NC, 00215$
                                   6261 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001C2B DD 4E FF         [19] 6262 	ld	c, -1 (ix)
      001C2E 06 00            [ 7] 6263 	ld	b, #0x00
      001C30 69               [ 4] 6264 	ld	l, c
      001C31 60               [ 4] 6265 	ld	h, b
      001C32 29               [11] 6266 	add	hl, hl
      001C33 09               [11] 6267 	add	hl, bc
      001C34 29               [11] 6268 	add	hl, hl
      001C35 29               [11] 6269 	add	hl, hl
      001C36 DD 75 F0         [19] 6270 	ld	-16 (ix), l
      001C39 DD 74 F1         [19] 6271 	ld	-15 (ix), h
      001C3C 3Er48            [ 7] 6272 	ld	a, #<(_playfieldTemp)
      001C3E DD 86 F0         [19] 6273 	add	a, -16 (ix)
      001C41 4F               [ 4] 6274 	ld	c, a
      001C42 3Es00            [ 7] 6275 	ld	a, #>(_playfieldTemp)
      001C44 DD 8E F1         [19] 6276 	adc	a, -15 (ix)
      001C47 47               [ 4] 6277 	ld	b, a
      001C48 79               [ 4] 6278 	ld	a, c
      001C49 DD 86 FE         [19] 6279 	add	a, -2 (ix)
      001C4C DD 77 F2         [19] 6280 	ld	-14 (ix), a
      001C4F 78               [ 4] 6281 	ld	a, b
      001C50 CE 00            [ 7] 6282 	adc	a, #0x00
      001C52 DD 77 F3         [19] 6283 	ld	-13 (ix), a
      001C55 DD 6E F2         [19] 6284 	ld	l, -14 (ix)
      001C58 DD 66 F3         [19] 6285 	ld	h, -13 (ix)
      001C5B 5E               [ 7] 6286 	ld	e, (hl)
                                   6287 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001C5C DD 56 FF         [19] 6288 	ld	d, -1 (ix)
      001C5F DD 66 FE         [19] 6289 	ld	h, -2 (ix)
      001C62 6A               [ 4] 6290 	ld	l, d
      001C63 2D               [ 4] 6291 	dec	l
      001C64 2D               [ 4] 6292 	dec	l
      001C65 7C               [ 4] 6293 	ld	a, h
      001C66 C6 FE            [ 7] 6294 	add	a, #0xfe
      001C68 DD 77 F4         [19] 6295 	ld	-12 (ix), a
      001C6B 15               [ 4] 6296 	dec	d
      001C6C 7C               [ 4] 6297 	ld	a, h
      001C6D C6 FF            [ 7] 6298 	add	a, #0xff
      001C6F DD 77 F5         [19] 6299 	ld	-11 (ix), a
      001C72 D5               [11] 6300 	push	de
      001C73 5D               [ 4] 6301 	ld	e, l
      001C74 7B               [ 4] 6302 	ld	a, e
      001C75 07               [ 4] 6303 	rlca
      001C76 9F               [ 4] 6304 	sbc	a, a
      001C77 57               [ 4] 6305 	ld	d, a
      001C78 6B               [ 4] 6306 	ld	l, e
      001C79 62               [ 4] 6307 	ld	h, d
      001C7A 29               [11] 6308 	add	hl, hl
      001C7B 19               [11] 6309 	add	hl, de
      001C7C 29               [11] 6310 	add	hl, hl
      001C7D 29               [11] 6311 	add	hl, hl
      001C7E D1               [10] 6312 	pop	de
      001C7F DD 75 F6         [19] 6313 	ld	-10 (ix), l
      001C82 DD 74 F7         [19] 6314 	ld	-9 (ix), h
      001C85 D5               [11] 6315 	push	de
      001C86 5A               [ 4] 6316 	ld	e, d
      001C87 7B               [ 4] 6317 	ld	a, e
      001C88 07               [ 4] 6318 	rlca
      001C89 9F               [ 4] 6319 	sbc	a, a
      001C8A 57               [ 4] 6320 	ld	d, a
      001C8B 6B               [ 4] 6321 	ld	l, e
      001C8C 62               [ 4] 6322 	ld	h, d
      001C8D 29               [11] 6323 	add	hl, hl
      001C8E 19               [11] 6324 	add	hl, de
      001C8F 29               [11] 6325 	add	hl, hl
      001C90 29               [11] 6326 	add	hl, hl
      001C91 D1               [10] 6327 	pop	de
      001C92 DD 75 F8         [19] 6328 	ld	-8 (ix), l
      001C95 DD 74 F9         [19] 6329 	ld	-7 (ix), h
      001C98 3Er48            [ 7] 6330 	ld	a, #<(_playfieldTemp)
      001C9A DD 86 F6         [19] 6331 	add	a, -10 (ix)
      001C9D DD 77 FA         [19] 6332 	ld	-6 (ix), a
      001CA0 3Es00            [ 7] 6333 	ld	a, #>(_playfieldTemp)
      001CA2 DD 8E F7         [19] 6334 	adc	a, -9 (ix)
      001CA5 DD 77 FB         [19] 6335 	ld	-5 (ix), a
      001CA8 3Er48            [ 7] 6336 	ld	a, #<(_playfieldTemp)
      001CAA DD 86 F8         [19] 6337 	add	a, -8 (ix)
      001CAD 57               [ 4] 6338 	ld	d, a
      001CAE 3Es00            [ 7] 6339 	ld	a, #>(_playfieldTemp)
      001CB0 DD 8E F9         [19] 6340 	adc	a, -7 (ix)
      001CB3 6F               [ 4] 6341 	ld	l, a
      001CB4 7A               [ 4] 6342 	ld	a, d
      001CB5 DD 86 F5         [19] 6343 	add	a, -11 (ix)
      001CB8 DD 77 FC         [19] 6344 	ld	-4 (ix), a
      001CBB 7D               [ 4] 6345 	ld	a, l
      001CBC CE 00            [ 7] 6346 	adc	a, #0x00
      001CBE DD 77 FD         [19] 6347 	ld	-3 (ix), a
                                   6348 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001CC1 7B               [ 4] 6349 	ld	a, e
      001CC2 B7               [ 4] 6350 	or	a, a
      001CC3 28 74            [12] 6351 	jr	Z, 00116$
                                   6352 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001CC5 DD 7E FA         [19] 6353 	ld	a, -6 (ix)
      001CC8 DD 86 F4         [19] 6354 	add	a, -12 (ix)
      001CCB 6F               [ 4] 6355 	ld	l, a
      001CCC DD 7E FB         [19] 6356 	ld	a, -5 (ix)
      001CCF CE 00            [ 7] 6357 	adc	a, #0x00
      001CD1 67               [ 4] 6358 	ld	h, a
      001CD2 56               [ 7] 6359 	ld	d, (hl)
      001CD3 DD 6E FC         [19] 6360 	ld	l, -4 (ix)
      001CD6 DD 66 FD         [19] 6361 	ld	h, -3 (ix)
      001CD9 6E               [ 7] 6362 	ld	l, (hl)
      001CDA 7A               [ 4] 6363 	ld	a, d
      001CDB 95               [ 4] 6364 	sub	a, l
      001CDC 20 5B            [12] 6365 	jr	NZ, 00116$
                                   6366 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001CDE 7B               [ 4] 6367 	ld	a, e
      001CDF 95               [ 4] 6368 	sub	a, l
      001CE0 20 57            [12] 6369 	jr	NZ, 00116$
                                   6370 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001CE2 DD 36 EF 01      [19] 6371 	ld	-17 (ix), #0x01
                                   6372 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001CE6 3Er00            [ 7] 6373 	ld	a, #<(_playfield)
      001CE8 DD 86 F6         [19] 6374 	add	a, -10 (ix)
      001CEB 5F               [ 4] 6375 	ld	e, a
      001CEC 3Es00            [ 7] 6376 	ld	a, #>(_playfield)
      001CEE DD 8E F7         [19] 6377 	adc	a, -9 (ix)
      001CF1 67               [ 4] 6378 	ld	h, a
      001CF2 7B               [ 4] 6379 	ld	a, e
      001CF3 DD 86 F4         [19] 6380 	add	a, -12 (ix)
      001CF6 6F               [ 4] 6381 	ld	l, a
      001CF7 30 01            [12] 6382 	jr	NC, 00632$
      001CF9 24               [ 4] 6383 	inc	h
      001CFA                       6384 00632$:
      001CFA CB FA            [ 8] 6385 	set	7, d
      001CFC 72               [ 7] 6386 	ld	(hl), d
                                   6387 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001CFD 3Er00            [ 7] 6388 	ld	a, #<(_playfield)
      001CFF DD 86 F8         [19] 6389 	add	a, -8 (ix)
      001D02 5F               [ 4] 6390 	ld	e, a
      001D03 3Es00            [ 7] 6391 	ld	a, #>(_playfield)
      001D05 DD 8E F9         [19] 6392 	adc	a, -7 (ix)
      001D08 57               [ 4] 6393 	ld	d, a
      001D09 7B               [ 4] 6394 	ld	a, e
      001D0A DD 86 F5         [19] 6395 	add	a, -11 (ix)
      001D0D 5F               [ 4] 6396 	ld	e, a
      001D0E 30 01            [12] 6397 	jr	NC, 00633$
      001D10 14               [ 4] 6398 	inc	d
      001D11                       6399 00633$:
      001D11 DD 6E FC         [19] 6400 	ld	l, -4 (ix)
      001D14 DD 66 FD         [19] 6401 	ld	h, -3 (ix)
      001D17 7E               [ 7] 6402 	ld	a, (hl)
      001D18 CB FF            [ 8] 6403 	set	7, a
      001D1A 12               [ 7] 6404 	ld	(de), a
                                   6405 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001D1B 3Er00            [ 7] 6406 	ld	a, #<(_playfield)
      001D1D DD 86 F0         [19] 6407 	add	a, -16 (ix)
      001D20 5F               [ 4] 6408 	ld	e, a
      001D21 3Es00            [ 7] 6409 	ld	a, #>(_playfield)
      001D23 DD 8E F1         [19] 6410 	adc	a, -15 (ix)
      001D26 57               [ 4] 6411 	ld	d, a
      001D27 7B               [ 4] 6412 	ld	a, e
      001D28 DD 86 FE         [19] 6413 	add	a, -2 (ix)
      001D2B 5F               [ 4] 6414 	ld	e, a
      001D2C 30 01            [12] 6415 	jr	NC, 00634$
      001D2E 14               [ 4] 6416 	inc	d
      001D2F                       6417 00634$:
      001D2F DD 6E F2         [19] 6418 	ld	l, -14 (ix)
      001D32 DD 66 F3         [19] 6419 	ld	h, -13 (ix)
      001D35 7E               [ 7] 6420 	ld	a, (hl)
      001D36 CB FF            [ 8] 6421 	set	7, a
      001D38 12               [ 7] 6422 	ld	(de), a
      001D39                       6423 00116$:
                                   6424 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001D39 DD 6E F4         [19] 6425 	ld	l, -12 (ix)
      001D3C 26 00            [ 7] 6426 	ld	h, #0x00
      001D3E 09               [11] 6427 	add	hl, bc
      001D3F 4E               [ 7] 6428 	ld	c, (hl)
      001D40 79               [ 4] 6429 	ld	a, c
      001D41 B7               [ 4] 6430 	or	a, a
      001D42 28 6A            [12] 6431 	jr	Z, 00212$
                                   6432 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001D44 DD 7E FA         [19] 6433 	ld	a, -6 (ix)
      001D47 DD 86 FE         [19] 6434 	add	a, -2 (ix)
      001D4A 5F               [ 4] 6435 	ld	e, a
      001D4B DD 7E FB         [19] 6436 	ld	a, -5 (ix)
      001D4E CE 00            [ 7] 6437 	adc	a, #0x00
      001D50 57               [ 4] 6438 	ld	d, a
      001D51 DD 6E FC         [19] 6439 	ld	l, -4 (ix)
      001D54 DD 66 FD         [19] 6440 	ld	h, -3 (ix)
      001D57 46               [ 7] 6441 	ld	b, (hl)
      001D58 1A               [ 7] 6442 	ld	a, (de)
      001D59 B8               [ 4] 6443 	cp	a, b
      001D5A 20 52            [12] 6444 	jr	NZ, 00212$
                                   6445 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001D5C 91               [ 4] 6446 	sub	a, c
      001D5D 20 4F            [12] 6447 	jr	NZ, 00212$
                                   6448 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001D5F DD 36 EF 01      [19] 6449 	ld	-17 (ix), #0x01
                                   6450 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001D63 3Er00            [ 7] 6451 	ld	a, #<(_playfield)
      001D65 DD 86 F0         [19] 6452 	add	a, -16 (ix)
      001D68 47               [ 4] 6453 	ld	b, a
      001D69 3Es00            [ 7] 6454 	ld	a, #>(_playfield)
      001D6B DD 8E F1         [19] 6455 	adc	a, -15 (ix)
      001D6E 67               [ 4] 6456 	ld	h, a
      001D6F 78               [ 4] 6457 	ld	a, b
      001D70 DD 86 F4         [19] 6458 	add	a, -12 (ix)
      001D73 6F               [ 4] 6459 	ld	l, a
      001D74 30 01            [12] 6460 	jr	NC, 00639$
      001D76 24               [ 4] 6461 	inc	h
      001D77                       6462 00639$:
      001D77 CB F9            [ 8] 6463 	set	7, c
      001D79 71               [ 7] 6464 	ld	(hl), c
                                   6465 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001D7A 3Er00            [ 7] 6466 	ld	a, #<(_playfield)
      001D7C DD 86 F8         [19] 6467 	add	a, -8 (ix)
      001D7F 4F               [ 4] 6468 	ld	c, a
      001D80 3Es00            [ 7] 6469 	ld	a, #>(_playfield)
      001D82 DD 8E F9         [19] 6470 	adc	a, -7 (ix)
      001D85 47               [ 4] 6471 	ld	b, a
      001D86 79               [ 4] 6472 	ld	a, c
      001D87 DD 86 F5         [19] 6473 	add	a, -11 (ix)
      001D8A 4F               [ 4] 6474 	ld	c, a
      001D8B 30 01            [12] 6475 	jr	NC, 00640$
      001D8D 04               [ 4] 6476 	inc	b
      001D8E                       6477 00640$:
      001D8E DD 6E FC         [19] 6478 	ld	l, -4 (ix)
      001D91 DD 66 FD         [19] 6479 	ld	h, -3 (ix)
      001D94 7E               [ 7] 6480 	ld	a, (hl)
      001D95 CB FF            [ 8] 6481 	set	7, a
      001D97 02               [ 7] 6482 	ld	(bc), a
                                   6483 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001D98 3Er00            [ 7] 6484 	ld	a, #<(_playfield)
      001D9A DD 86 F6         [19] 6485 	add	a, -10 (ix)
      001D9D 4F               [ 4] 6486 	ld	c, a
      001D9E 3Es00            [ 7] 6487 	ld	a, #>(_playfield)
      001DA0 DD 8E F7         [19] 6488 	adc	a, -9 (ix)
      001DA3 47               [ 4] 6489 	ld	b, a
      001DA4 DD 6E FE         [19] 6490 	ld	l, -2 (ix)
      001DA7 26 00            [ 7] 6491 	ld	h, #0x00
      001DA9 09               [11] 6492 	add	hl, bc
      001DAA 1A               [ 7] 6493 	ld	a, (de)
      001DAB CB FF            [ 8] 6494 	set	7, a
      001DAD 77               [ 7] 6495 	ld	(hl), a
      001DAE                       6496 00212$:
                                   6497 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001DAE DD 34 FF         [23] 6498 	inc	-1 (ix)
      001DB1 C3r23r1C         [10] 6499 	jp	00211$
      001DB4                       6500 00215$:
                                   6501 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001DB4 DD 34 FE         [23] 6502 	inc	-2 (ix)
      001DB7 C3r17r1C         [10] 6503 	jp	00214$
      001DBA                       6504 00124$:
                                   6505 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001DBA DD 7E EF         [19] 6506 	ld	a, -17 (ix)
      001DBD B7               [ 4] 6507 	or	a, a
      001DBE CAr66r21         [10] 6508 	jp	Z, 00190$
                                   6509 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001DC1 DD 36 F5 FF      [19] 6510 	ld	-11 (ix), #0xff
      001DC5 DD 36 F6 00      [19] 6511 	ld	-10 (ix), #0
                                   6512 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001DC9 DD 36 F7 05      [19] 6513 	ld	-9 (ix), #0x05
      001DCD DD 36 F8 00      [19] 6514 	ld	-8 (ix), #0
                                   6515 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001DD1 DD 36 F9 0B      [19] 6516 	ld	-7 (ix), #0x0b
      001DD5 DD 36 FA 00      [19] 6517 	ld	-6 (ix), #0
                                   6518 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001DD9 CDr48r0C         [17] 6519 	call	_HideArrowSprite
                                   6520 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001DDC CDr96r19         [17] 6521 	call	_SoundFx_2
                                   6522 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001DDF DD 36 FB 00      [19] 6523 	ld	-5 (ix), #0
                                   6524 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001DE3 DD 36 FF 00      [19] 6525 	ld	-1 (ix), #0
      001DE7                       6526 00220$:
      001DE7 DD 7E FF         [19] 6527 	ld	a, -1 (ix)
      001DEA D6 0C            [ 7] 6528 	sub	a, #0x0c
      001DEC 30 5F            [12] 6529 	jr	NC, 00291$
                                   6530 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DEE DD 5E FB         [19] 6531 	ld	e, -5 (ix)
      001DF1 06 00            [ 7] 6532 	ld	b, #0x00
      001DF3                       6533 00217$:
      001DF3 78               [ 4] 6534 	ld	a, b
      001DF4 D6 06            [ 7] 6535 	sub	a, #0x06
      001DF6 30 4D            [12] 6536 	jr	NC, 00320$
                                   6537 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001DF8 D5               [11] 6538 	push	de
      001DF9 58               [ 4] 6539 	ld	e, b
      001DFA 16 00            [ 7] 6540 	ld	d, #0x00
      001DFC 6B               [ 4] 6541 	ld	l, e
      001DFD 62               [ 4] 6542 	ld	h, d
      001DFE 29               [11] 6543 	add	hl, hl
      001DFF 19               [11] 6544 	add	hl, de
      001E00 29               [11] 6545 	add	hl, hl
      001E01 29               [11] 6546 	add	hl, hl
      001E02 11r00r00         [10] 6547 	ld	de, #_playfield
      001E05 19               [11] 6548 	add	hl, de
      001E06 D1               [10] 6549 	pop	de
      001E07 7D               [ 4] 6550 	ld	a, l
      001E08 DD 86 FF         [19] 6551 	add	a, -1 (ix)
      001E0B 6F               [ 4] 6552 	ld	l, a
      001E0C 30 01            [12] 6553 	jr	NC, 00641$
      001E0E 24               [ 4] 6554 	inc	h
      001E0F                       6555 00641$:
      001E0F 7E               [ 7] 6556 	ld	a, (hl)
      001E10 07               [ 4] 6557 	rlca
      001E11 30 2F            [12] 6558 	jr	NC, 00218$
                                   6559 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001E13 1C               [ 4] 6560 	inc	e
                                   6561 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001E14 78               [ 4] 6562 	ld	a, b
      001E15 DD 96 F7         [19] 6563 	sub	a, -9 (ix)
      001E18 30 03            [12] 6564 	jr	NC, 00126$
      001E1A DD 70 F7         [19] 6565 	ld	-9 (ix), b
      001E1D                       6566 00126$:
                                   6567 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001E1D DD 7E F8         [19] 6568 	ld	a, -8 (ix)
      001E20 90               [ 4] 6569 	sub	a, b
      001E21 30 03            [12] 6570 	jr	NC, 00128$
      001E23 DD 70 F8         [19] 6571 	ld	-8 (ix), b
      001E26                       6572 00128$:
                                   6573 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001E26 DD 7E FF         [19] 6574 	ld	a, -1 (ix)
      001E29 DD 96 F9         [19] 6575 	sub	a, -7 (ix)
      001E2C 30 06            [12] 6576 	jr	NC, 00130$
      001E2E DD 7E FF         [19] 6577 	ld	a, -1 (ix)
      001E31 DD 77 F9         [19] 6578 	ld	-7 (ix), a
      001E34                       6579 00130$:
                                   6580 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001E34 DD 7E FA         [19] 6581 	ld	a, -6 (ix)
      001E37 DD 96 FF         [19] 6582 	sub	a, -1 (ix)
      001E3A 30 06            [12] 6583 	jr	NC, 00218$
      001E3C DD 7E FF         [19] 6584 	ld	a, -1 (ix)
      001E3F DD 77 FA         [19] 6585 	ld	-6 (ix), a
      001E42                       6586 00218$:
                                   6587 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E42 04               [ 4] 6588 	inc	b
      001E43 18 AE            [12] 6589 	jr	00217$
      001E45                       6590 00320$:
      001E45 DD 73 FB         [19] 6591 	ld	-5 (ix), e
                                   6592 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E48 DD 34 FF         [23] 6593 	inc	-1 (ix)
      001E4B 18 9A            [12] 6594 	jr	00220$
                                   6595 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001E4D                       6596 00291$:
      001E4D DD 36 FF 48      [19] 6597 	ld	-1 (ix), #0x48
      001E51                       6598 00166$:
      001E51 DD 4E FF         [19] 6599 	ld	c, -1 (ix)
      001E54 DD 35 FF         [23] 6600 	dec	-1 (ix)
      001E57 79               [ 4] 6601 	ld	a, c
      001E58 B7               [ 4] 6602 	or	a, a
      001E59 CAr01r20         [10] 6603 	jp	Z, 00168$
                                   6604 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001E5C ED 5B 9E FC      [20] 6605 	ld	de, (_JIFFY)
                                   6606 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001E60                       6607 00137$:
      001E60 2A 9E FC         [16] 6608 	ld	hl, (_JIFFY)
      001E63 BF               [ 4] 6609 	cp	a, a
      001E64 ED 52            [15] 6610 	sbc	hl, de
      001E66 28 F8            [12] 6611 	jr	Z, 00137$
                                   6612 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001E68 DD 7E FB         [19] 6613 	ld	a, -5 (ix)
      001E6B D6 03            [ 7] 6614 	sub	a, #0x03
      001E6D DAr1Fr1F         [10] 6615 	jp	C, 00301$
                                   6616 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001E70 DD 7E FB         [19] 6617 	ld	a, -5 (ix)
      001E73 D6 07            [ 7] 6618 	sub	a, #0x07
      001E75 38 04            [12] 6619 	jr	C, 00141$
      001E77 DD 36 FB 07      [19] 6620 	ld	-5 (ix), #0x07
      001E7B                       6621 00141$:
                                   6622 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001E7B DD 7E F5         [19] 6623 	ld	a, -11 (ix)
      001E7E 3C               [ 4] 6624 	inc	a
      001E7F 20 7B            [12] 6625 	jr	NZ, 00143$
                                   6626 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001E81 DD 6E F8         [19] 6627 	ld	l, -8 (ix)
      001E84 26 00            [ 7] 6628 	ld	h, #0x00
      001E86 29               [11] 6629 	add	hl, hl
      001E87 29               [11] 6630 	add	hl, hl
      001E88 29               [11] 6631 	add	hl, hl
      001E89 29               [11] 6632 	add	hl, hl
      001E8A DD 5E F7         [19] 6633 	ld	e, -9 (ix)
      001E8D 16 00            [ 7] 6634 	ld	d, #0x00
      001E8F EB               [ 4] 6635 	ex	de, hl
      001E90 29               [11] 6636 	add	hl, hl
      001E91 29               [11] 6637 	add	hl, hl
      001E92 29               [11] 6638 	add	hl, hl
      001E93 29               [11] 6639 	add	hl, hl
      001E94 EB               [ 4] 6640 	ex	de, hl
      001E95 BF               [ 4] 6641 	cp	a, a
      001E96 ED 52            [15] 6642 	sbc	hl, de
      001E98 4D               [ 4] 6643 	ld	c, l
      001E99 44               [ 4] 6644 	ld	b, h
      001E9A CB 7C            [ 8] 6645 	bit	7, h
      001E9C 28 03            [12] 6646 	jr	Z, 00239$
      001E9E 4D               [ 4] 6647 	ld	c, l
      001E9F 44               [ 4] 6648 	ld	b, h
      001EA0 03               [ 6] 6649 	inc	bc
      001EA1                       6650 00239$:
      001EA1 CB 28            [ 8] 6651 	sra	b
      001EA3 CB 19            [ 8] 6652 	rr	c
      001EA5 79               [ 4] 6653 	ld	a, c
      001EA6 C6 50            [ 7] 6654 	add	a, #0x50
      001EA8 DD 6E F7         [19] 6655 	ld	l, -9 (ix)
      001EAB 29               [11] 6656 	add	hl, hl
      001EAC 29               [11] 6657 	add	hl, hl
      001EAD 29               [11] 6658 	add	hl, hl
      001EAE 29               [11] 6659 	add	hl, hl
      001EAF 85               [ 4] 6660 	add	a, l
      001EB0 DD 77 F5         [19] 6661 	ld	-11 (ix), a
                                   6662 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001EB3 DD 6E F9         [19] 6663 	ld	l, -7 (ix)
      001EB6 26 00            [ 7] 6664 	ld	h, #0x00
      001EB8 29               [11] 6665 	add	hl, hl
      001EB9 29               [11] 6666 	add	hl, hl
      001EBA 29               [11] 6667 	add	hl, hl
      001EBB 29               [11] 6668 	add	hl, hl
      001EBC DD 5E FA         [19] 6669 	ld	e, -6 (ix)
      001EBF 16 00            [ 7] 6670 	ld	d, #0x00
      001EC1 EB               [ 4] 6671 	ex	de, hl
      001EC2 29               [11] 6672 	add	hl, hl
      001EC3 29               [11] 6673 	add	hl, hl
      001EC4 29               [11] 6674 	add	hl, hl
      001EC5 29               [11] 6675 	add	hl, hl
      001EC6 EB               [ 4] 6676 	ex	de, hl
      001EC7 BF               [ 4] 6677 	cp	a, a
      001EC8 ED 52            [15] 6678 	sbc	hl, de
      001ECA 4D               [ 4] 6679 	ld	c, l
      001ECB 44               [ 4] 6680 	ld	b, h
      001ECC CB 7C            [ 8] 6681 	bit	7, h
      001ECE 28 03            [12] 6682 	jr	Z, 00240$
      001ED0 23               [ 6] 6683 	inc	hl
      001ED1 4D               [ 4] 6684 	ld	c, l
      001ED2 44               [ 4] 6685 	ld	b, h
      001ED3                       6686 00240$:
      001ED3 CB 28            [ 8] 6687 	sra	b
      001ED5 CB 19            [ 8] 6688 	rr	c
      001ED7 DD 7E FA         [19] 6689 	ld	a, -6 (ix)
      001EDA 87               [ 4] 6690 	add	a, a
      001EDB 87               [ 4] 6691 	add	a, a
      001EDC 87               [ 4] 6692 	add	a, a
      001EDD 87               [ 4] 6693 	add	a, a
      001EDE 81               [ 4] 6694 	add	a, c
      001EDF DD 77 F6         [19] 6695 	ld	-10 (ix), a
                                   6696 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001EE2 26 01            [ 7] 6697 	ld	h, #0x01
      001EE4 DD 6E F6         [19] 6698 	ld	l, -10 (ix)
      001EE7 E5               [11] 6699 	push	hl
      001EE8 DD 66 F5         [19] 6700 	ld	h, -11 (ix)
      001EEB DD 6E 04         [19] 6701 	ld	l, 4 (ix)
      001EEE E5               [11] 6702 	push	hl
      001EEF DD 7E FB         [19] 6703 	ld	a, -5 (ix)
      001EF2 F5               [11] 6704 	push	af
      001EF3 33               [ 6] 6705 	inc	sp
      001EF4 CDr56r0C         [17] 6706 	call	_DrawHitSprite
      001EF7 F1               [10] 6707 	pop	af
      001EF8 F1               [10] 6708 	pop	af
      001EF9 33               [ 6] 6709 	inc	sp
      001EFA 18 23            [12] 6710 	jr	00301$
      001EFC                       6711 00143$:
                                   6712 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001EFC DD 4E FF         [19] 6713 	ld	c, -1 (ix)
      001EFF 3E 48            [ 7] 6714 	ld	a, #0x48
      001F01 91               [ 4] 6715 	sub	a, c
      001F02 4F               [ 4] 6716 	ld	c, a
      001F03 DD 7E F6         [19] 6717 	ld	a, -10 (ix)
      001F06 91               [ 4] 6718 	sub	a, c
      001F07 26 00            [ 7] 6719 	ld	h, #0x00
      001F09 E5               [11] 6720 	push	hl
      001F0A 33               [ 6] 6721 	inc	sp
      001F0B F5               [11] 6722 	push	af
      001F0C 33               [ 6] 6723 	inc	sp
      001F0D DD 66 F5         [19] 6724 	ld	h, -11 (ix)
      001F10 DD 6E 04         [19] 6725 	ld	l, 4 (ix)
      001F13 E5               [11] 6726 	push	hl
      001F14 DD 7E FB         [19] 6727 	ld	a, -5 (ix)
      001F17 F5               [11] 6728 	push	af
      001F18 33               [ 6] 6729 	inc	sp
      001F19 CDr56r0C         [17] 6730 	call	_DrawHitSprite
      001F1C F1               [10] 6731 	pop	af
      001F1D F1               [10] 6732 	pop	af
      001F1E 33               [ 6] 6733 	inc	sp
                                   6734 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F1F                       6735 00301$:
      001F1F 3E 0C            [ 7] 6736 	ld	a, #0x0c
      001F21 DD 96 FF         [19] 6737 	sub	a, -1 (ix)
      001F24 3E 00            [ 7] 6738 	ld	a, #0x00
      001F26 17               [ 4] 6739 	rla
      001F27 5F               [ 4] 6740 	ld	e, a
      001F28 3E 09            [ 7] 6741 	ld	a, #0x09
      001F2A DD 96 FF         [19] 6742 	sub	a, -1 (ix)
      001F2D 3E 00            [ 7] 6743 	ld	a, #0x00
      001F2F 17               [ 4] 6744 	rla
      001F30 4F               [ 4] 6745 	ld	c, a
      001F31 3E 06            [ 7] 6746 	ld	a, #0x06
      001F33 DD 96 FF         [19] 6747 	sub	a, -1 (ix)
      001F36 3E 00            [ 7] 6748 	ld	a, #0x00
      001F38 17               [ 4] 6749 	rla
      001F39 DD 77 FC         [19] 6750 	ld	-4 (ix), a
      001F3C 3E 03            [ 7] 6751 	ld	a, #0x03
      001F3E DD 96 FF         [19] 6752 	sub	a, -1 (ix)
      001F41 3E 00            [ 7] 6753 	ld	a, #0x00
      001F43 17               [ 4] 6754 	rla
      001F44 DD 77 FD         [19] 6755 	ld	-3 (ix), a
      001F47 06 00            [ 7] 6756 	ld	b, #0x00
      001F49                       6757 00226$:
      001F49 78               [ 4] 6758 	ld	a, b
      001F4A D6 0C            [ 7] 6759 	sub	a, #0x0c
      001F4C D2r51r1E         [10] 6760 	jp	NC, 00166$
                                   6761 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F4F 16 00            [ 7] 6762 	ld	d, #0x00
      001F51                       6763 00223$:
      001F51 7A               [ 4] 6764 	ld	a, d
      001F52 D6 06            [ 7] 6765 	sub	a, #0x06
      001F54 D2rFDr1F         [10] 6766 	jp	NC, 00227$
                                   6767 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001F57 D5               [11] 6768 	push	de
      001F58 5A               [ 4] 6769 	ld	e, d
      001F59 16 00            [ 7] 6770 	ld	d, #0x00
      001F5B 6B               [ 4] 6771 	ld	l, e
      001F5C 62               [ 4] 6772 	ld	h, d
      001F5D 29               [11] 6773 	add	hl, hl
      001F5E 19               [11] 6774 	add	hl, de
      001F5F 29               [11] 6775 	add	hl, hl
      001F60 29               [11] 6776 	add	hl, hl
      001F61 11r00r00         [10] 6777 	ld	de, #_playfield
      001F64 19               [11] 6778 	add	hl, de
      001F65 D1               [10] 6779 	pop	de
      001F66 7D               [ 4] 6780 	ld	a, l
      001F67 80               [ 4] 6781 	add	a, b
      001F68 6F               [ 4] 6782 	ld	l, a
      001F69 30 01            [12] 6783 	jr	NC, 00646$
      001F6B 24               [ 4] 6784 	inc	h
      001F6C                       6785 00646$:
      001F6C 7E               [ 7] 6786 	ld	a, (hl)
      001F6D DD 77 FE         [19] 6787 	ld	-2 (ix), a
      001F70 DD CB FE 7E      [20] 6788 	bit	7, -2 (ix)
      001F74 CArF9r1F         [10] 6789 	jp	Z,00224$
                                   6790 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001F77 7B               [ 4] 6791 	ld	a, e
      001F78 B7               [ 4] 6792 	or	a, a
      001F79 28 2C            [12] 6793 	jr	Z, 00160$
                                   6794 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001F7B 2A 9E FC         [16] 6795 	ld	hl, (_JIFFY)
      001F7E 7D               [ 4] 6796 	ld	a, l
      001F7F E6 03            [ 7] 6797 	and	a, #0x03
      001F81 28 14            [12] 6798 	jr	Z, 00148$
                                   6799 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001F83 DD 7E FE         [19] 6800 	ld	a, -2 (ix)
      001F86 CB BF            [ 8] 6801 	res	7, a
      001F88 C5               [11] 6802 	push	bc
      001F89 D5               [11] 6803 	push	de
      001F8A F5               [11] 6804 	push	af
      001F8B 33               [ 6] 6805 	inc	sp
      001F8C 4A               [ 4] 6806 	ld	c, d
      001F8D C5               [11] 6807 	push	bc
      001F8E CDr61r18         [17] 6808 	call	_DrawBlock
      001F91 F1               [10] 6809 	pop	af
      001F92 33               [ 6] 6810 	inc	sp
      001F93 D1               [10] 6811 	pop	de
      001F94 C1               [10] 6812 	pop	bc
      001F95 18 62            [12] 6813 	jr	00224$
      001F97                       6814 00148$:
                                   6815 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001F97 C5               [11] 6816 	push	bc
      001F98 D5               [11] 6817 	push	de
      001F99 AF               [ 4] 6818 	xor	a, a
      001F9A F5               [11] 6819 	push	af
      001F9B 33               [ 6] 6820 	inc	sp
      001F9C 4A               [ 4] 6821 	ld	c, d
      001F9D C5               [11] 6822 	push	bc
      001F9E CDr61r18         [17] 6823 	call	_DrawBlock
      001FA1 F1               [10] 6824 	pop	af
      001FA2 33               [ 6] 6825 	inc	sp
      001FA3 D1               [10] 6826 	pop	de
      001FA4 C1               [10] 6827 	pop	bc
      001FA5 18 52            [12] 6828 	jr	00224$
      001FA7                       6829 00160$:
                                   6830 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001FA7 79               [ 4] 6831 	ld	a, c
      001FA8 B7               [ 4] 6832 	or	a, a
      001FA9 28 11            [12] 6833 	jr	Z, 00157$
      001FAB C5               [11] 6834 	push	bc
      001FAC D5               [11] 6835 	push	de
      001FAD 3E 2A            [ 7] 6836 	ld	a, #0x2a
      001FAF F5               [11] 6837 	push	af
      001FB0 33               [ 6] 6838 	inc	sp
      001FB1 4A               [ 4] 6839 	ld	c, d
      001FB2 C5               [11] 6840 	push	bc
      001FB3 CDrC9r18         [17] 6841 	call	_DrawBlock_SameTile
      001FB6 F1               [10] 6842 	pop	af
      001FB7 33               [ 6] 6843 	inc	sp
      001FB8 D1               [10] 6844 	pop	de
      001FB9 C1               [10] 6845 	pop	bc
      001FBA 18 3D            [12] 6846 	jr	00224$
      001FBC                       6847 00157$:
                                   6848 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001FBC DD 7E FC         [19] 6849 	ld	a, -4 (ix)
      001FBF B7               [ 4] 6850 	or	a, a
      001FC0 28 11            [12] 6851 	jr	Z, 00154$
      001FC2 C5               [11] 6852 	push	bc
      001FC3 D5               [11] 6853 	push	de
      001FC4 3E 2B            [ 7] 6854 	ld	a, #0x2b
      001FC6 F5               [11] 6855 	push	af
      001FC7 33               [ 6] 6856 	inc	sp
      001FC8 4A               [ 4] 6857 	ld	c, d
      001FC9 C5               [11] 6858 	push	bc
      001FCA CDrC9r18         [17] 6859 	call	_DrawBlock_SameTile
      001FCD F1               [10] 6860 	pop	af
      001FCE 33               [ 6] 6861 	inc	sp
      001FCF D1               [10] 6862 	pop	de
      001FD0 C1               [10] 6863 	pop	bc
      001FD1 18 26            [12] 6864 	jr	00224$
      001FD3                       6865 00154$:
                                   6866 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001FD3 DD 7E FD         [19] 6867 	ld	a, -3 (ix)
      001FD6 B7               [ 4] 6868 	or	a, a
      001FD7 28 11            [12] 6869 	jr	Z, 00151$
      001FD9 C5               [11] 6870 	push	bc
      001FDA D5               [11] 6871 	push	de
      001FDB 3E 2C            [ 7] 6872 	ld	a, #0x2c
      001FDD F5               [11] 6873 	push	af
      001FDE 33               [ 6] 6874 	inc	sp
      001FDF 4A               [ 4] 6875 	ld	c, d
      001FE0 C5               [11] 6876 	push	bc
      001FE1 CDrC9r18         [17] 6877 	call	_DrawBlock_SameTile
      001FE4 F1               [10] 6878 	pop	af
      001FE5 33               [ 6] 6879 	inc	sp
      001FE6 D1               [10] 6880 	pop	de
      001FE7 C1               [10] 6881 	pop	bc
      001FE8 18 0F            [12] 6882 	jr	00224$
      001FEA                       6883 00151$:
                                   6884 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001FEA C5               [11] 6885 	push	bc
      001FEB D5               [11] 6886 	push	de
      001FEC 3E 2D            [ 7] 6887 	ld	a, #0x2d
      001FEE F5               [11] 6888 	push	af
      001FEF 33               [ 6] 6889 	inc	sp
      001FF0 4A               [ 4] 6890 	ld	c, d
      001FF1 C5               [11] 6891 	push	bc
      001FF2 CDrC9r18         [17] 6892 	call	_DrawBlock_SameTile
      001FF5 F1               [10] 6893 	pop	af
      001FF6 33               [ 6] 6894 	inc	sp
      001FF7 D1               [10] 6895 	pop	de
      001FF8 C1               [10] 6896 	pop	bc
      001FF9                       6897 00224$:
                                   6898 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001FF9 14               [ 4] 6899 	inc	d
      001FFA C3r51r1F         [10] 6900 	jp	00223$
      001FFD                       6901 00227$:
                                   6902 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FFD 04               [ 4] 6903 	inc	b
      001FFE C3r49r1F         [10] 6904 	jp	00226$
      002001                       6905 00168$:
                                   6906 ;src\/CheckPlayfield.h:196: HideHitSprite();
      002001 CDr68r0E         [17] 6907 	call	_HideHitSprite
                                   6908 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002004 DD 36 FD 00      [19] 6909 	ld	-3 (ix), #0
      002008                       6910 00235$:
      002008 DD 7E FD         [19] 6911 	ld	a, -3 (ix)
      00200B D6 0C            [ 7] 6912 	sub	a, #0x0c
      00200D D2rEBr20         [10] 6913 	jp	NC, 00177$
                                   6914 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002010 DD 36 FE 00      [19] 6915 	ld	-2 (ix), #0
      002014                       6916 00232$:
      002014 DD 7E FE         [19] 6917 	ld	a, -2 (ix)
      002017 D6 06            [ 7] 6918 	sub	a, #0x06
      002019 D2rE5r20         [10] 6919 	jp	NC, 00236$
                                   6920 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00201C DD 4E FE         [19] 6921 	ld	c, -2 (ix)
      00201F 06 00            [ 7] 6922 	ld	b, #0x00
      002021 69               [ 4] 6923 	ld	l, c
      002022 60               [ 4] 6924 	ld	h, b
      002023 29               [11] 6925 	add	hl, hl
      002024 09               [11] 6926 	add	hl, bc
      002025 29               [11] 6927 	add	hl, hl
      002026 29               [11] 6928 	add	hl, hl
      002027 EB               [ 4] 6929 	ex	de, hl
      002028 21r00r00         [10] 6930 	ld	hl, #_playfield
      00202B 19               [11] 6931 	add	hl, de
      00202C DD 75 FB         [19] 6932 	ld	-5 (ix), l
      00202F DD 74 FC         [19] 6933 	ld	-4 (ix), h
      002032 DD 7E FB         [19] 6934 	ld	a, -5 (ix)
      002035 DD 86 FD         [19] 6935 	add	a, -3 (ix)
      002038 4F               [ 4] 6936 	ld	c, a
      002039 DD 7E FC         [19] 6937 	ld	a, -4 (ix)
      00203C CE 00            [ 7] 6938 	adc	a, #0x00
      00203E 47               [ 4] 6939 	ld	b, a
      00203F 0A               [ 7] 6940 	ld	a, (bc)
      002040 07               [ 4] 6941 	rlca
      002041 D2rDFr20         [10] 6942 	jp	NC,00233$
                                   6943 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      002044 2Ar04r00         [16] 6944 	ld	hl, (_blocksRemoved)
      002047 23               [ 6] 6945 	inc	hl
      002048 22r04r00         [16] 6946 	ld	(_blocksRemoved), hl
                                   6947 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      00204B DD 7E FB         [19] 6948 	ld	a, -5 (ix)
      00204E DD 77 F7         [19] 6949 	ld	-9 (ix), a
      002051 DD 7E FC         [19] 6950 	ld	a, -4 (ix)
      002054 DD 77 F8         [19] 6951 	ld	-8 (ix), a
      002057 DD 7E FD         [19] 6952 	ld	a, -3 (ix)
      00205A DD 77 FF         [19] 6953 	ld	-1 (ix), a
      00205D                       6954 00229$:
      00205D DD 7E FF         [19] 6955 	ld	a, -1 (ix)
      002060 B7               [ 4] 6956 	or	a, a
      002061 28 7C            [12] 6957 	jr	Z, 00233$
                                   6958 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      002063 0E 01            [ 7] 6959 	ld	c, #0x01
                                   6960 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      002065 DD 7E FF         [19] 6961 	ld	a, -1 (ix)
      002068 DD 77 FC         [19] 6962 	ld	-4 (ix), a
      00206B 3D               [ 4] 6963 	dec	a
      00206C DD 86 F7         [19] 6964 	add	a, -9 (ix)
      00206F 5F               [ 4] 6965 	ld	e, a
      002070 3E 00            [ 7] 6966 	ld	a, #0x00
      002072 DD 8E F8         [19] 6967 	adc	a, -8 (ix)
      002075 57               [ 4] 6968 	ld	d, a
      002076 1A               [ 7] 6969 	ld	a, (de)
      002077 07               [ 4] 6970 	rlca
      002078 30 02            [12] 6971 	jr	NC, 00170$
      00207A 0E 02            [ 7] 6972 	ld	c, #0x02
      00207C                       6973 00170$:
                                   6974 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      00207C DD 7E FC         [19] 6975 	ld	a, -4 (ix)
      00207F 3D               [ 4] 6976 	dec	a
      002080 3D               [ 4] 6977 	dec	a
      002081 DD 86 F7         [19] 6978 	add	a, -9 (ix)
      002084 5F               [ 4] 6979 	ld	e, a
      002085 3E 00            [ 7] 6980 	ld	a, #0x00
      002087 DD 8E F8         [19] 6981 	adc	a, -8 (ix)
      00208A 57               [ 4] 6982 	ld	d, a
      00208B 1A               [ 7] 6983 	ld	a, (de)
      00208C 07               [ 4] 6984 	rlca
      00208D 30 01            [12] 6985 	jr	NC, 00172$
      00208F 0C               [ 4] 6986 	inc	c
      002090                       6987 00172$:
                                   6988 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      002090 DD 7E F7         [19] 6989 	ld	a, -9 (ix)
      002093 DD 86 FF         [19] 6990 	add	a, -1 (ix)
      002096 DD 77 F9         [19] 6991 	ld	-7 (ix), a
      002099 DD 7E F8         [19] 6992 	ld	a, -8 (ix)
      00209C CE 00            [ 7] 6993 	adc	a, #0x00
      00209E DD 77 FA         [19] 6994 	ld	-6 (ix), a
      0020A1 DD 6E FF         [19] 6995 	ld	l, -1 (ix)
      0020A4 26 00            [ 7] 6996 	ld	h, #0x00
      0020A6 59               [ 4] 6997 	ld	e, c
      0020A7 16 00            [ 7] 6998 	ld	d, #0x00
      0020A9 BF               [ 4] 6999 	cp	a, a
      0020AA ED 52            [15] 7000 	sbc	hl, de
      0020AC CB 7C            [ 8] 7001 	bit	7, h
      0020AE 20 18            [12] 7002 	jr	NZ, 00243$
      0020B0 DD 7E FF         [19] 7003 	ld	a, -1 (ix)
      0020B3 91               [ 4] 7004 	sub	a, c
      0020B4 DD 86 F7         [19] 7005 	add	a, -9 (ix)
      0020B7 4F               [ 4] 7006 	ld	c, a
      0020B8 3E 00            [ 7] 7007 	ld	a, #0x00
      0020BA DD 8E F8         [19] 7008 	adc	a, -8 (ix)
      0020BD 47               [ 4] 7009 	ld	b, a
      0020BE 0A               [ 7] 7010 	ld	a, (bc)
      0020BF DD 77 FB         [19] 7011 	ld	-5 (ix), a
      0020C2 DD 36 FC 00      [19] 7012 	ld	-4 (ix), #0
      0020C6 18 07            [12] 7013 	jr	00244$
      0020C8                       7014 00243$:
      0020C8 AF               [ 4] 7015 	xor	a, a
      0020C9 DD 77 FB         [19] 7016 	ld	-5 (ix), a
      0020CC DD 77 FC         [19] 7017 	ld	-4 (ix), a
      0020CF                       7018 00244$:
      0020CF DD 7E FB         [19] 7019 	ld	a, -5 (ix)
      0020D2 DD 6E F9         [19] 7020 	ld	l, -7 (ix)
      0020D5 DD 66 FA         [19] 7021 	ld	h, -6 (ix)
      0020D8 77               [ 7] 7022 	ld	(hl), a
                                   7023 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      0020D9 DD 35 FF         [23] 7024 	dec	-1 (ix)
      0020DC C3r5Dr20         [10] 7025 	jp	00229$
      0020DF                       7026 00233$:
                                   7027 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020DF DD 34 FE         [23] 7028 	inc	-2 (ix)
      0020E2 C3r14r20         [10] 7029 	jp	00232$
      0020E5                       7030 00236$:
                                   7031 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020E5 DD 34 FD         [23] 7032 	inc	-3 (ix)
      0020E8 C3r08r20         [10] 7033 	jp	00235$
      0020EB                       7034 00177$:
                                   7035 ;src\/CheckPlayfield.h:227: oldLevel = level;
      0020EB 3Ar06r00         [13] 7036 	ld	a, (#_level + 0)
      0020EE 4F               [ 4] 7037 	ld	c, a
                                   7038 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      0020EF 21r04r00         [10] 7039 	ld	hl, #_blocksRemoved
      0020F2 46               [ 7] 7040 	ld	b, (hl)
      0020F3 23               [ 6] 7041 	inc	hl
      0020F4 56               [ 7] 7042 	ld	d, (hl)
      0020F5 78               [ 4] 7043 	ld	a, b
      0020F6 D6 5A            [ 7] 7044 	sub	a, #0x5a
      0020F8 7A               [ 4] 7045 	ld	a, d
      0020F9 DE 00            [ 7] 7046 	sbc	a, #0x00
      0020FB 38 19            [12] 7047 	jr	C, 00185$
                                   7048 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      0020FD C5               [11] 7049 	push	bc
      0020FE 21 1E 00         [10] 7050 	ld	hl, #0x001e
      002101 E5               [11] 7051 	push	hl
      002102 58               [ 4] 7052 	ld	e, b
      002103 D5               [11] 7053 	push	de
      002104 CDr00r00         [17] 7054 	call	__divuint
      002107 F1               [10] 7055 	pop	af
      002108 F1               [10] 7056 	pop	af
      002109 C1               [10] 7057 	pop	bc
      00210A 7D               [ 4] 7058 	ld	a, l
      00210B 3C               [ 4] 7059 	inc	a
      00210C 32r06r00         [13] 7060 	ld	(_level+0), a
                                   7061 ;src\/CheckPlayfield.h:230: speed = 15;
      00210F 21r96r00         [10] 7062 	ld	hl, #_speed
      002112 36 0F            [10] 7063 	ld	(hl), #0x0f
      002114 18 32            [12] 7064 	jr	00186$
      002116                       7065 00185$:
                                   7066 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      002116 78               [ 4] 7067 	ld	a, b
      002117 D6 3C            [ 7] 7068 	sub	a, #0x3c
      002119 7A               [ 4] 7069 	ld	a, d
      00211A DE 00            [ 7] 7070 	sbc	a, #0x00
      00211C 38 0C            [12] 7071 	jr	C, 00182$
                                   7072 ;src\/CheckPlayfield.h:234: level = 3;
      00211E 21r06r00         [10] 7073 	ld	hl, #_level
      002121 36 03            [10] 7074 	ld	(hl), #0x03
                                   7075 ;src\/CheckPlayfield.h:235: speed = 30;
      002123 21r96r00         [10] 7076 	ld	hl, #_speed
      002126 36 1E            [10] 7077 	ld	(hl), #0x1e
      002128 18 1E            [12] 7078 	jr	00186$
      00212A                       7079 00182$:
                                   7080 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      00212A 78               [ 4] 7081 	ld	a, b
      00212B D6 1E            [ 7] 7082 	sub	a, #0x1e
      00212D 7A               [ 4] 7083 	ld	a, d
      00212E DE 00            [ 7] 7084 	sbc	a, #0x00
      002130 38 0C            [12] 7085 	jr	C, 00179$
                                   7086 ;src\/CheckPlayfield.h:238: level = 2;
      002132 21r06r00         [10] 7087 	ld	hl, #_level
      002135 36 02            [10] 7088 	ld	(hl), #0x02
                                   7089 ;src\/CheckPlayfield.h:239: speed = 45;
      002137 21r96r00         [10] 7090 	ld	hl, #_speed
      00213A 36 2D            [10] 7091 	ld	(hl), #0x2d
      00213C 18 0A            [12] 7092 	jr	00186$
      00213E                       7093 00179$:
                                   7094 ;src\/CheckPlayfield.h:242: level = 1;
      00213E 21r06r00         [10] 7095 	ld	hl, #_level
      002141 36 01            [10] 7096 	ld	(hl), #0x01
                                   7097 ;src\/CheckPlayfield.h:243: speed = 60;
      002143 21r96r00         [10] 7098 	ld	hl, #_speed
      002146 36 3C            [10] 7099 	ld	(hl), #0x3c
      002148                       7100 00186$:
                                   7101 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      002148 3Ar06r00         [13] 7102 	ld	a,(#_level + 0)
      00214B 91               [ 4] 7103 	sub	a, c
      00214C 28 05            [12] 7104 	jr	Z, 00188$
                                   7105 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      00214E 21r07r00         [10] 7106 	ld	hl, #_newLevel
      002151 36 01            [10] 7107 	ld	(hl), #0x01
      002153                       7108 00188$:
                                   7109 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      002153 CDr85r19         [17] 7110 	call	_DrawPlayfield
                                   7111 ;src\/CheckPlayfield.h:257: DrawScore();
      002156 CDr34r14         [17] 7112 	call	_DrawScore
                                   7113 ;src\/CheckPlayfield.h:259: iteration++;
      002159 DD 34 04         [23] 7114 	inc	4 (ix)
                                   7115 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      00215C DD 7E 04         [19] 7116 	ld	a, 4 (ix)
      00215F F5               [11] 7117 	push	af
      002160 33               [ 6] 7118 	inc	sp
      002161 CDrF6r19         [17] 7119 	call	_CheckPlayfield
      002164 18 03            [12] 7120 	jr	00237$
      002166                       7121 00190$:
                                   7122 ;src\/CheckPlayfield.h:264: DrawScore();
      002166 CDr34r14         [17] 7123 	call	_DrawScore
      002169                       7124 00237$:
                                   7125 ;src\/CheckPlayfield.h:266: }
      002169 DD F9            [10] 7126 	ld	sp, ix
      00216B DD E1            [14] 7127 	pop	ix
      00216D C9               [10] 7128 	ret
                                   7129 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   7130 ;	---------------------------------
                                   7131 ; Function RandomIndex
                                   7132 ; ---------------------------------
      00216E                       7133 _RandomIndex::
                                   7134 ;src\/GameLogic.h:5: do {
      00216E                       7135 00101$:
                                   7136 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      00216E CDrA3r00         [17] 7137 	call	_GetRandom
      002171 7D               [ 4] 7138 	ld	a, l
      002172 E6 07            [ 7] 7139 	and	a, #0x07
      002174 6F               [ 4] 7140 	ld	l, a
                                   7141 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      002175 3E 04            [ 7] 7142 	ld	a, #0x04
      002177 95               [ 4] 7143 	sub	a, l
      002178 38 F4            [12] 7144 	jr	C, 00101$
                                   7145 ;src\/GameLogic.h:10: return random;
                                   7146 ;src\/GameLogic.h:11: }
      00217A C9               [10] 7147 	ret
                                   7148 ;src\/GameLogic.h:13: void RandomPiece() {
                                   7149 ;	---------------------------------
                                   7150 ; Function RandomPiece
                                   7151 ; ---------------------------------
      00217B                       7152 _RandomPiece::
                                   7153 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      00217B 3Ar93r00         [13] 7154 	ld	a,(#_nextTopPiece + 0)
      00217E 32r90r00         [13] 7155 	ld	(#_topPiece),a
                                   7156 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      002181 3Ar94r00         [13] 7157 	ld	a,(#_nextMidPiece + 0)
      002184 32r91r00         [13] 7158 	ld	(#_midPiece),a
                                   7159 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      002187 3Ar95r00         [13] 7160 	ld	a,(#_nextBottomPiece + 0)
      00218A 32r92r00         [13] 7161 	ld	(#_bottomPiece),a
                                   7162 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      00218D 01r18r00         [10] 7163 	ld	bc, #_pieces+0
      002190 C5               [11] 7164 	push	bc
      002191 CDr6Er21         [17] 7165 	call	_RandomIndex
      002194 C1               [10] 7166 	pop	bc
      002195 26 00            [ 7] 7167 	ld	h, #0x00
      002197 09               [11] 7168 	add	hl, bc
      002198 7E               [ 7] 7169 	ld	a, (hl)
      002199 32r93r00         [13] 7170 	ld	(_nextTopPiece+0), a
                                   7171 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      00219C C5               [11] 7172 	push	bc
      00219D CDr6Er21         [17] 7173 	call	_RandomIndex
      0021A0 C1               [10] 7174 	pop	bc
      0021A1 26 00            [ 7] 7175 	ld	h, #0x00
      0021A3 09               [11] 7176 	add	hl, bc
      0021A4 7E               [ 7] 7177 	ld	a, (hl)
      0021A5 32r94r00         [13] 7178 	ld	(_nextMidPiece+0), a
                                   7179 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      0021A8 C5               [11] 7180 	push	bc
      0021A9 CDr6Er21         [17] 7181 	call	_RandomIndex
      0021AC C1               [10] 7182 	pop	bc
      0021AD 26 00            [ 7] 7183 	ld	h, #0x00
      0021AF 09               [11] 7184 	add	hl, bc
      0021B0 7E               [ 7] 7185 	ld	a, (hl)
      0021B1 32r95r00         [13] 7186 	ld	(_nextBottomPiece+0), a
                                   7187 ;src\/GameLogic.h:21: }
      0021B4 C9               [10] 7188 	ret
                                   7189 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   7190 ;	---------------------------------
                                   7191 ; Function UpdateAndDrawPieceStatic
                                   7192 ; ---------------------------------
      0021B5                       7193 _UpdateAndDrawPieceStatic::
                                   7194 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      0021B5 01r00r00         [10] 7195 	ld	bc, #_playfield+0
      0021B8 ED 5Br01r00      [20] 7196 	ld	de, (_col)
      0021BC 16 00            [ 7] 7197 	ld	d, #0x00
      0021BE 6B               [ 4] 7198 	ld	l, e
      0021BF 62               [ 4] 7199 	ld	h, d
      0021C0 29               [11] 7200 	add	hl, hl
      0021C1 19               [11] 7201 	add	hl, de
      0021C2 29               [11] 7202 	add	hl, hl
      0021C3 29               [11] 7203 	add	hl, hl
      0021C4 09               [11] 7204 	add	hl, bc
      0021C5 EB               [ 4] 7205 	ex	de, hl
      0021C6 3Ar02r00         [13] 7206 	ld	a, (#_line + 0)
      0021C9 6F               [ 4] 7207 	ld	l, a
      0021CA 26 00            [ 7] 7208 	ld	h, #0x00
      0021CC 19               [11] 7209 	add	hl, de
      0021CD 3Ar90r00         [13] 7210 	ld	a,(#_topPiece + 0)
      0021D0 77               [ 7] 7211 	ld	(hl), a
                                   7212 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      0021D1 ED 5Br01r00      [20] 7213 	ld	de, (_col)
      0021D5 16 00            [ 7] 7214 	ld	d, #0x00
      0021D7 6B               [ 4] 7215 	ld	l, e
      0021D8 62               [ 4] 7216 	ld	h, d
      0021D9 29               [11] 7217 	add	hl, hl
      0021DA 19               [11] 7218 	add	hl, de
      0021DB 29               [11] 7219 	add	hl, hl
      0021DC 29               [11] 7220 	add	hl, hl
      0021DD 09               [11] 7221 	add	hl, bc
      0021DE EB               [ 4] 7222 	ex	de, hl
      0021DF 3Ar02r00         [13] 7223 	ld	a, (#_line + 0)
      0021E2 6F               [ 4] 7224 	ld	l, a
      0021E3 2C               [ 4] 7225 	inc	l
      0021E4 26 00            [ 7] 7226 	ld	h, #0x00
      0021E6 19               [11] 7227 	add	hl, de
      0021E7 3Ar91r00         [13] 7228 	ld	a,(#_midPiece + 0)
      0021EA 77               [ 7] 7229 	ld	(hl), a
                                   7230 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      0021EB ED 5Br01r00      [20] 7231 	ld	de, (_col)
      0021EF 16 00            [ 7] 7232 	ld	d, #0x00
      0021F1 6B               [ 4] 7233 	ld	l, e
      0021F2 62               [ 4] 7234 	ld	h, d
      0021F3 29               [11] 7235 	add	hl, hl
      0021F4 19               [11] 7236 	add	hl, de
      0021F5 29               [11] 7237 	add	hl, hl
      0021F6 29               [11] 7238 	add	hl, hl
      0021F7 09               [11] 7239 	add	hl, bc
      0021F8 EB               [ 4] 7240 	ex	de, hl
      0021F9 3Ar02r00         [13] 7241 	ld	a, (#_line + 0)
      0021FC 6F               [ 4] 7242 	ld	l, a
      0021FD 2C               [ 4] 7243 	inc	l
      0021FE 2C               [ 4] 7244 	inc	l
      0021FF 26 00            [ 7] 7245 	ld	h, #0x00
      002201 19               [11] 7246 	add	hl, de
      002202 3Ar92r00         [13] 7247 	ld	a,(#_bottomPiece + 0)
      002205 77               [ 7] 7248 	ld	(hl), a
                                   7249 ;src\/GameLogic.h:29: DrawPiece(line);
      002206 C5               [11] 7250 	push	bc
      002207 3Ar02r00         [13] 7251 	ld	a,(#_line + 0)
      00220A F5               [11] 7252 	push	af
      00220B 33               [ 6] 7253 	inc	sp
      00220C CDr62r19         [17] 7254 	call	_DrawPiece
      00220F 33               [ 6] 7255 	inc	sp
      002210 C1               [10] 7256 	pop	bc
                                   7257 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002211 3E 02            [ 7] 7258 	ld	a, #0x02
      002213 32r01r00         [13] 7259 	ld	(#_col), a
                                   7260 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   7261 ;src\/GameLogic.h:35: counter = 0;
      002216 3E 00            [ 7] 7262 	ld	a,#0x00
      002218 32r02r00         [13] 7263 	ld	(#_line),a
      00221B 32r03r00         [13] 7264 	ld	(#_counter), a
                                   7265 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      00221E 3Ar18r00         [13] 7266 	ld	a, (#_playfield + 24)
      002221 B7               [ 4] 7267 	or	a, a
      002222 20 0C            [12] 7268 	jr	NZ, 00101$
                                   7269 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      002224 3Ar19r00         [13] 7270 	ld	a, (#_playfield + 25)
      002227 B7               [ 4] 7271 	or	a, a
      002228 20 06            [12] 7272 	jr	NZ, 00101$
                                   7273 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      00222A 3Ar1Ar00         [13] 7274 	ld	a, (#_playfield + 26)
      00222D B7               [ 4] 7275 	or	a, a
      00222E 28 0B            [12] 7276 	jr	Z, 00102$
      002230                       7277 00101$:
                                   7278 ;src\/GameLogic.h:41: gameOver = TRUE;
      002230 FD 21r00r00      [14] 7279 	ld	iy, #_gameOver
      002234 FD 36 00 01      [19] 7280 	ld	0 (iy), #0x01
      002238 C3r85r19         [10] 7281 	jp	_DrawPlayfield
      00223B                       7282 00102$:
                                   7283 ;src\/GameLogic.h:44: RandomPiece();
      00223B CDr7Br21         [17] 7284 	call	_RandomPiece
                                   7285 ;src\/GameLogic.h:46: CheckPlayfield(1);
      00223E 3E 01            [ 7] 7286 	ld	a, #0x01
      002240 F5               [11] 7287 	push	af
      002241 33               [ 6] 7288 	inc	sp
      002242 CDrF6r19         [17] 7289 	call	_CheckPlayfield
      002245 33               [ 6] 7290 	inc	sp
                                   7291 ;src\/GameLogic.h:48: DrawNextPiece();
      002246 CDrDAr12         [17] 7292 	call	_DrawNextPiece
                                   7293 ;src\/GameLogic.h:51: DrawPlayfield();
                                   7294 ;src\/GameLogic.h:52: }
      002249 C3r85r19         [10] 7295 	jp	_DrawPlayfield
                                   7296 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   7297 ;	---------------------------------
                                   7298 ; Function BlinkPauseText
                                   7299 ; ---------------------------------
      00224C                       7300 _BlinkPauseText::
                                   7301 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      00224C 2A 9E FC         [16] 7302 	ld	hl, (_JIFFY)
      00224F CB 5D            [ 8] 7303 	bit	3, l
      002251 28 0E            [12] 7304 	jr	Z, 00102$
                                   7305 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      002253 11 0D 0C         [10] 7306 	ld	de, #0x0c0d
      002256 D5               [11] 7307 	push	de
      002257 21r6Ar22         [10] 7308 	ld	hl, #___str_5
      00225A E5               [11] 7309 	push	hl
      00225B CDrF1r0F         [17] 7310 	call	_DrawString
      00225E F1               [10] 7311 	pop	af
      00225F F1               [10] 7312 	pop	af
      002260 C9               [10] 7313 	ret
      002261                       7314 00102$:
                                   7315 ;src\/GameLogic.h:61: DrawLine(6);
      002261 3E 06            [ 7] 7316 	ld	a, #0x06
      002263 F5               [11] 7317 	push	af
      002264 33               [ 6] 7318 	inc	sp
      002265 CDr2Ar19         [17] 7319 	call	_DrawLine
      002268 33               [ 6] 7320 	inc	sp
                                   7321 ;src\/GameLogic.h:64: }
      002269 C9               [10] 7322 	ret
      00226A                       7323 ___str_5:
      00226A 50 41 55 53 45        7324 	.ascii "PAUSE"
      00226F 00                    7325 	.db 0x00
                                   7326 ;src\/GameLogic.h:66: void Pause() {
                                   7327 ;	---------------------------------
                                   7328 ; Function Pause
                                   7329 ; ---------------------------------
      002270                       7330 _Pause::
                                   7331 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      002270 11 0D 0C         [10] 7332 	ld	de, #0x0c0d
      002273 D5               [11] 7333 	push	de
      002274 21rAAr22         [10] 7334 	ld	hl, #___str_6
      002277 E5               [11] 7335 	push	hl
      002278 CDrF1r0F         [17] 7336 	call	_DrawString
      00227B F1               [10] 7337 	pop	af
      00227C F1               [10] 7338 	pop	af
                                   7339 ;src\/GameLogic.h:71: while(TRUE) {
      00227D                       7340 00114$:
                                   7341 ;src\/GameLogic.h:73: BlinkPauseText();
      00227D CDr4Cr22         [17] 7342 	call	_BlinkPauseText
                                   7343 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      002280 2E 07            [ 7] 7344 	ld	l, #0x07
      002282 CDr00r00         [17] 7345 	call	_SNSMAT
                                   7346 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      002285 CB 55            [ 8] 7347 	bit	2, l
      002287 28 F4            [12] 7348 	jr	Z, 00114$
                                   7349 ;src\/GameLogic.h:79: while(TRUE) {
      002289                       7350 00109$:
                                   7351 ;src\/GameLogic.h:81: BlinkPauseText();
      002289 CDr4Cr22         [17] 7352 	call	_BlinkPauseText
                                   7353 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      00228C 2E 07            [ 7] 7354 	ld	l, #0x07
      00228E CDr00r00         [17] 7355 	call	_SNSMAT
                                   7356 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      002291 CB 55            [ 8] 7357 	bit	2, l
      002293 20 F4            [12] 7358 	jr	NZ, 00109$
                                   7359 ;src\/GameLogic.h:87: while(TRUE) {
      002295                       7360 00104$:
                                   7361 ;src\/GameLogic.h:89: BlinkPauseText();
      002295 CDr4Cr22         [17] 7362 	call	_BlinkPauseText
                                   7363 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      002298 2E 07            [ 7] 7364 	ld	l, #0x07
      00229A CDr00r00         [17] 7365 	call	_SNSMAT
                                   7366 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      00229D CB 55            [ 8] 7367 	bit	2, l
      00229F 28 F4            [12] 7368 	jr	Z, 00104$
                                   7369 ;src\/GameLogic.h:95: DrawLine(6);
      0022A1 3E 06            [ 7] 7370 	ld	a, #0x06
      0022A3 F5               [11] 7371 	push	af
      0022A4 33               [ 6] 7372 	inc	sp
      0022A5 CDr2Ar19         [17] 7373 	call	_DrawLine
      0022A8 33               [ 6] 7374 	inc	sp
                                   7375 ;src\/GameLogic.h:96: return;
                                   7376 ;src\/GameLogic.h:106: }
      0022A9 C9               [10] 7377 	ret
      0022AA                       7378 ___str_6:
      0022AA 50 41 55 53 45        7379 	.ascii "PAUSE"
      0022AF 00                    7380 	.db 0x00
                                   7381 ;src\/GameLogic.h:108: void GameLoop() {
                                   7382 ;	---------------------------------
                                   7383 ; Function GameLoop
                                   7384 ; ---------------------------------
      0022B0                       7385 _GameLoop::
      0022B0 DD E5            [15] 7386 	push	ix
      0022B2 DD 21 00 00      [14] 7387 	ld	ix,#0
      0022B6 DD 39            [15] 7388 	add	ix,sp
      0022B8 21 F3 FF         [10] 7389 	ld	hl, #-13
      0022BB 39               [11] 7390 	add	hl, sp
      0022BC F9               [ 6] 7391 	ld	sp, hl
                                   7392 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      0022BD DD 36 FF 00      [19] 7393 	ld	-1 (ix), #0
      0022C1 DD 36 F3 00      [19] 7394 	ld	-13 (ix), #0
                                   7395 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      0022C5 DD 36 F4 00      [19] 7396 	ld	-12 (ix), #0
      0022C9 DD 36 F5 00      [19] 7397 	ld	-11 (ix), #0
                                   7398 ;src\/GameLogic.h:115: while(!gameOver) {
      0022CD                       7399 00150$:
      0022CD 3Ar00r00         [13] 7400 	ld	a,(#_gameOver + 0)
      0022D0 B7               [ 4] 7401 	or	a, a
      0022D1 C2r68r26         [10] 7402 	jp	NZ, 00152$
                                   7403 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      0022D4 ED 4B 9E FC      [20] 7404 	ld	bc, (_JIFFY)
                                   7405 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      0022D8                       7406 00101$:
      0022D8 2A 9E FC         [16] 7407 	ld	hl, (_JIFFY)
      0022DB BF               [ 4] 7408 	cp	a, a
      0022DC ED 42            [15] 7409 	sbc	hl, bc
      0022DE 28 F8            [12] 7410 	jr	Z, 00101$
                                   7411 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0022E0 ED 4Br01r00      [20] 7412 	ld	bc, (_col)
      0022E4 06 00            [ 7] 7413 	ld	b, #0x00
      0022E6 69               [ 4] 7414 	ld	l, c
      0022E7 60               [ 4] 7415 	ld	h, b
      0022E8 29               [11] 7416 	add	hl, hl
      0022E9 09               [11] 7417 	add	hl, bc
      0022EA 29               [11] 7418 	add	hl, hl
      0022EB 29               [11] 7419 	add	hl, hl
      0022EC EB               [ 4] 7420 	ex	de, hl
      0022ED 21r00r00         [10] 7421 	ld	hl, #_playfield
      0022F0 19               [11] 7422 	add	hl, de
      0022F1 EB               [ 4] 7423 	ex	de, hl
      0022F2 FD 21r02r00      [14] 7424 	ld	iy, #_line
      0022F6 FD 6E 00         [19] 7425 	ld	l, 0 (iy)
      0022F9 26 00            [ 7] 7426 	ld	h, #0x00
      0022FB 19               [11] 7427 	add	hl, de
      0022FC 36 00            [10] 7428 	ld	(hl), #0x00
                                   7429 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0022FE ED 4Br01r00      [20] 7430 	ld	bc, (_col)
      002302 06 00            [ 7] 7431 	ld	b, #0x00
      002304 69               [ 4] 7432 	ld	l, c
      002305 60               [ 4] 7433 	ld	h, b
      002306 29               [11] 7434 	add	hl, hl
      002307 09               [11] 7435 	add	hl, bc
      002308 29               [11] 7436 	add	hl, hl
      002309 29               [11] 7437 	add	hl, hl
      00230A EB               [ 4] 7438 	ex	de, hl
      00230B 21r00r00         [10] 7439 	ld	hl, #_playfield
      00230E 19               [11] 7440 	add	hl, de
      00230F EB               [ 4] 7441 	ex	de, hl
      002310 FD 6E 00         [19] 7442 	ld	l, 0 (iy)
      002313 2C               [ 4] 7443 	inc	l
      002314 26 00            [ 7] 7444 	ld	h, #0x00
      002316 19               [11] 7445 	add	hl, de
      002317 36 00            [10] 7446 	ld	(hl), #0x00
                                   7447 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002319 ED 4Br01r00      [20] 7448 	ld	bc, (_col)
      00231D 06 00            [ 7] 7449 	ld	b, #0x00
      00231F 69               [ 4] 7450 	ld	l, c
      002320 60               [ 4] 7451 	ld	h, b
      002321 29               [11] 7452 	add	hl, hl
      002322 09               [11] 7453 	add	hl, bc
      002323 29               [11] 7454 	add	hl, hl
      002324 29               [11] 7455 	add	hl, hl
      002325 EB               [ 4] 7456 	ex	de, hl
      002326 21r00r00         [10] 7457 	ld	hl, #_playfield
      002329 19               [11] 7458 	add	hl, de
      00232A EB               [ 4] 7459 	ex	de, hl
      00232B FD 6E 00         [19] 7460 	ld	l, 0 (iy)
      00232E 2C               [ 4] 7461 	inc	l
      00232F 2C               [ 4] 7462 	inc	l
      002330 26 00            [ 7] 7463 	ld	h, #0x00
      002332 19               [11] 7464 	add	hl, de
      002333 36 00            [10] 7465 	ld	(hl), #0x00
                                   7466 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      002335 2E 01            [ 7] 7467 	ld	l, #0x01
      002337 CDr00r00         [17] 7468 	call	_GTSTCK
      00233A DD 75 F6         [19] 7469 	ld	-10 (ix), l
                                   7470 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      00233D 2E 01            [ 7] 7471 	ld	l, #0x01
      00233F CDr00r00         [17] 7472 	call	_GTTRIG
      002342 DD 75 F7         [19] 7473 	ld	-9 (ix), l
                                   7474 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      002345 2E 03            [ 7] 7475 	ld	l, #0x03
      002347 CDr00r00         [17] 7476 	call	_GTTRIG
      00234A DD 75 F8         [19] 7477 	ld	-8 (ix), l
                                   7478 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      00234D DD 7E F6         [19] 7479 	ld	a, -10 (ix)
                                   7480 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      002350 B7               [ 4] 7481 	or	a,a
      002351 20 07            [12] 7482 	jr	NZ, 00105$
      002353 6F               [ 4] 7483 	ld	l,a
      002354 CDr00r00         [17] 7484 	call	_GTSTCK
      002357 DD 75 F6         [19] 7485 	ld	-10 (ix), l
      00235A                       7486 00105$:
                                   7487 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      00235A FD 21r02r00      [14] 7488 	ld	iy, #_line
      00235E FD 7E 00         [19] 7489 	ld	a, 0 (iy)
      002361 DD 77 F9         [19] 7490 	ld	-7 (ix), a
                                   7491 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      002364 DD 7E FF         [19] 7492 	ld	a, -1 (ix)
      002367 B7               [ 4] 7493 	or	a, a
      002368 C2r51r24         [10] 7494 	jp	NZ, 00118$
                                   7495 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      00236B FD 7E 00         [19] 7496 	ld	a, 0 (iy)
      00236E DD 77 FF         [19] 7497 	ld	-1 (ix), a
                                   7498 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002371 FD 21r01r00      [14] 7499 	ld	iy, #_col
      002375 FD 7E 00         [19] 7500 	ld	a, 0 (iy)
      002378 DD 77 FA         [19] 7501 	ld	-6 (ix), a
                                   7502 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      00237B DD 7E FF         [19] 7503 	ld	a, -1 (ix)
      00237E C6 02            [ 7] 7504 	add	a, #0x02
      002380 DD 77 FB         [19] 7505 	ld	-5 (ix), a
                                   7506 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      002383 DD 7E F6         [19] 7507 	ld	a, -10 (ix)
      002386 D6 07            [ 7] 7508 	sub	a, #0x07
      002388 20 5F            [12] 7509 	jr	NZ, 00112$
                                   7510 ;src\/GameLogic.h:145: col > 0 && 
      00238A FD 7E 00         [19] 7511 	ld	a, 0 (iy)
      00238D B7               [ 4] 7512 	or	a, a
      00238E 28 59            [12] 7513 	jr	Z, 00112$
                                   7514 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002390 DD 7E FA         [19] 7515 	ld	a, -6 (ix)
      002393 C6 FF            [ 7] 7516 	add	a, #0xff
      002395 DD 77 FF         [19] 7517 	ld	-1 (ix), a
      002398 4F               [ 4] 7518 	ld	c, a
      002399 07               [ 4] 7519 	rlca
      00239A 9F               [ 4] 7520 	sbc	a, a
      00239B 47               [ 4] 7521 	ld	b, a
      00239C 69               [ 4] 7522 	ld	l, c
      00239D 60               [ 4] 7523 	ld	h, b
      00239E 29               [11] 7524 	add	hl, hl
      00239F 09               [11] 7525 	add	hl, bc
      0023A0 29               [11] 7526 	add	hl, hl
      0023A1 29               [11] 7527 	add	hl, hl
      0023A2 DD 75 FE         [19] 7528 	ld	-2 (ix), l
      0023A5 DD 74 FF         [19] 7529 	ld	-1 (ix), h
      0023A8 3Er00            [ 7] 7530 	ld	a, #<(_playfield)
      0023AA DD 86 FE         [19] 7531 	add	a, -2 (ix)
      0023AD DD 77 FC         [19] 7532 	ld	-4 (ix), a
      0023B0 3Es00            [ 7] 7533 	ld	a, #>(_playfield)
      0023B2 DD 8E FF         [19] 7534 	adc	a, -1 (ix)
      0023B5 DD 77 FD         [19] 7535 	ld	-3 (ix), a
      0023B8 DD 7E FC         [19] 7536 	ld	a, -4 (ix)
      0023BB DD 86 F9         [19] 7537 	add	a, -7 (ix)
      0023BE DD 77 FE         [19] 7538 	ld	-2 (ix), a
      0023C1 DD 7E FD         [19] 7539 	ld	a, -3 (ix)
      0023C4 CE 00            [ 7] 7540 	adc	a, #0x00
      0023C6 DD 77 FF         [19] 7541 	ld	-1 (ix), a
      0023C9 DD 6E FE         [19] 7542 	ld	l, -2 (ix)
      0023CC DD 66 FF         [19] 7543 	ld	h, -1 (ix)
      0023CF 7E               [ 7] 7544 	ld	a, (hl)
      0023D0 B7               [ 4] 7545 	or	a, a
      0023D1 20 16            [12] 7546 	jr	NZ, 00112$
                                   7547 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0023D3 DD 7E FC         [19] 7548 	ld	a, -4 (ix)
      0023D6 DD 86 FB         [19] 7549 	add	a, -5 (ix)
      0023D9 4F               [ 4] 7550 	ld	c, a
      0023DA DD 7E FD         [19] 7551 	ld	a, -3 (ix)
      0023DD CE 00            [ 7] 7552 	adc	a, #0x00
      0023DF 47               [ 4] 7553 	ld	b, a
      0023E0 0A               [ 7] 7554 	ld	a, (bc)
      0023E1 B7               [ 4] 7555 	or	a, a
      0023E2 20 05            [12] 7556 	jr	NZ, 00112$
                                   7557 ;src\/GameLogic.h:148: col--;
      0023E4 FD 35 00         [23] 7558 	dec	0 (iy)
      0023E7 18 68            [12] 7559 	jr	00118$
      0023E9                       7560 00112$:
                                   7561 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      0023E9 DD 7E F6         [19] 7562 	ld	a, -10 (ix)
      0023EC D6 03            [ 7] 7563 	sub	a, #0x03
      0023EE 20 61            [12] 7564 	jr	NZ, 00118$
                                   7565 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      0023F0 FD 21r01r00      [14] 7566 	ld	iy, #_col
      0023F4 FD 7E 00         [19] 7567 	ld	a, 0 (iy)
      0023F7 D6 05            [ 7] 7568 	sub	a, #0x05
      0023F9 30 56            [12] 7569 	jr	NC, 00118$
                                   7570 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      0023FB DD 7E FA         [19] 7571 	ld	a, -6 (ix)
      0023FE 3C               [ 4] 7572 	inc	a
      0023FF DD 77 FF         [19] 7573 	ld	-1 (ix), a
      002402 4F               [ 4] 7574 	ld	c, a
      002403 07               [ 4] 7575 	rlca
      002404 9F               [ 4] 7576 	sbc	a, a
      002405 47               [ 4] 7577 	ld	b, a
      002406 69               [ 4] 7578 	ld	l, c
      002407 60               [ 4] 7579 	ld	h, b
      002408 29               [11] 7580 	add	hl, hl
      002409 09               [11] 7581 	add	hl, bc
      00240A 29               [11] 7582 	add	hl, hl
      00240B 29               [11] 7583 	add	hl, hl
      00240C DD 75 FE         [19] 7584 	ld	-2 (ix), l
      00240F DD 74 FF         [19] 7585 	ld	-1 (ix), h
      002412 3Er00            [ 7] 7586 	ld	a, #<(_playfield)
      002414 DD 86 FE         [19] 7587 	add	a, -2 (ix)
      002417 DD 77 FC         [19] 7588 	ld	-4 (ix), a
      00241A 3Es00            [ 7] 7589 	ld	a, #>(_playfield)
      00241C DD 8E FF         [19] 7590 	adc	a, -1 (ix)
      00241F DD 77 FD         [19] 7591 	ld	-3 (ix), a
      002422 DD 7E FC         [19] 7592 	ld	a, -4 (ix)
      002425 DD 86 F9         [19] 7593 	add	a, -7 (ix)
      002428 DD 77 FE         [19] 7594 	ld	-2 (ix), a
      00242B DD 7E FD         [19] 7595 	ld	a, -3 (ix)
      00242E CE 00            [ 7] 7596 	adc	a, #0x00
      002430 DD 77 FF         [19] 7597 	ld	-1 (ix), a
      002433 DD 6E FE         [19] 7598 	ld	l, -2 (ix)
      002436 DD 66 FF         [19] 7599 	ld	h, -1 (ix)
      002439 7E               [ 7] 7600 	ld	a, (hl)
      00243A B7               [ 4] 7601 	or	a, a
      00243B 20 14            [12] 7602 	jr	NZ, 00118$
                                   7603 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      00243D DD 7E FC         [19] 7604 	ld	a, -4 (ix)
      002440 DD 86 FB         [19] 7605 	add	a, -5 (ix)
      002443 4F               [ 4] 7606 	ld	c, a
      002444 DD 7E FD         [19] 7607 	ld	a, -3 (ix)
      002447 CE 00            [ 7] 7608 	adc	a, #0x00
      002449 47               [ 4] 7609 	ld	b, a
      00244A 0A               [ 7] 7610 	ld	a, (bc)
      00244B B7               [ 4] 7611 	or	a, a
      00244C 20 03            [12] 7612 	jr	NZ, 00118$
                                   7613 ;src\/GameLogic.h:154: col++;
      00244E FD 34 00         [23] 7614 	inc	0 (iy)
      002451                       7615 00118$:
                                   7616 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      002451 DD 7E F3         [19] 7617 	ld	a, -13 (ix)
      002454 B7               [ 4] 7618 	or	a, a
      002455 C2r17r25         [10] 7619 	jp	NZ, 00132$
                                   7620 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002458 DD 7E F6         [19] 7621 	ld	a, -10 (ix)
      00245B 3D               [ 4] 7622 	dec	a
      00245C 28 18            [12] 7623 	jr	Z, 00119$
      00245E DD 7E F4         [19] 7624 	ld	a, -12 (ix)
      002461 B7               [ 4] 7625 	or	a, a
      002462 20 06            [12] 7626 	jr	NZ, 00124$
      002464 DD 7E F7         [19] 7627 	ld	a, -9 (ix)
      002467 3C               [ 4] 7628 	inc	a
      002468 28 0C            [12] 7629 	jr	Z, 00119$
      00246A                       7630 00124$:
      00246A DD 7E F5         [19] 7631 	ld	a, -11 (ix)
      00246D B7               [ 4] 7632 	or	a, a
      00246E 20 1A            [12] 7633 	jr	NZ, 00120$
      002470 DD 7E F8         [19] 7634 	ld	a, -8 (ix)
      002473 3C               [ 4] 7635 	inc	a
      002474 20 14            [12] 7636 	jr	NZ, 00120$
      002476                       7637 00119$:
                                   7638 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      002476 3Ar92r00         [13] 7639 	ld	a, (#_bottomPiece + 0)
      002479 4F               [ 4] 7640 	ld	c, a
                                   7641 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      00247A 3Ar91r00         [13] 7642 	ld	a,(#_midPiece + 0)
      00247D 32r92r00         [13] 7643 	ld	(#_bottomPiece),a
                                   7644 ;src\/GameLogic.h:166: midPiece = topPiece;
      002480 3Ar90r00         [13] 7645 	ld	a,(#_topPiece + 0)
      002483 32r91r00         [13] 7646 	ld	(#_midPiece),a
                                   7647 ;src\/GameLogic.h:167: topPiece = temp;
      002486 21r90r00         [10] 7648 	ld	hl, #_topPiece
      002489 71               [ 7] 7649 	ld	(hl), c
      00248A                       7650 00120$:
                                   7651 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      00248A DD 7E F6         [19] 7652 	ld	a, -10 (ix)
      00248D D6 05            [ 7] 7653 	sub	a, #0x05
      00248F C2r17r25         [10] 7654 	jp	NZ,00132$
                                   7655 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002492 DD 7E F9         [19] 7656 	ld	a, -7 (ix)
      002495 DD 77 FE         [19] 7657 	ld	-2 (ix), a
      002498 DD 7E F9         [19] 7658 	ld	a, -7 (ix)
      00249B DD 77 FF         [19] 7659 	ld	-1 (ix), a
      00249E                       7660 00154$:
      00249E DD 7E FF         [19] 7661 	ld	a, -1 (ix)
      0024A1 D6 0C            [ 7] 7662 	sub	a, #0x0c
      0024A3 30 72            [12] 7663 	jr	NC, 00132$
                                   7664 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      0024A5 DD 7E FF         [19] 7665 	ld	a, -1 (ix)
      0024A8 D6 09            [ 7] 7666 	sub	a, #0x09
      0024AA 28 4C            [12] 7667 	jr	Z, 00125$
      0024AC ED 4Br01r00      [20] 7668 	ld	bc, (_col)
      0024B0 06 00            [ 7] 7669 	ld	b, #0x00
      0024B2 69               [ 4] 7670 	ld	l, c
      0024B3 60               [ 4] 7671 	ld	h, b
      0024B4 29               [11] 7672 	add	hl, hl
      0024B5 09               [11] 7673 	add	hl, bc
      0024B6 29               [11] 7674 	add	hl, hl
      0024B7 29               [11] 7675 	add	hl, hl
      0024B8 DD 75 FC         [19] 7676 	ld	-4 (ix), l
      0024BB DD 74 FD         [19] 7677 	ld	-3 (ix), h
      0024BE 3Er00            [ 7] 7678 	ld	a, #<(_playfield)
      0024C0 DD 86 FC         [19] 7679 	add	a, -4 (ix)
      0024C3 DD 77 FA         [19] 7680 	ld	-6 (ix), a
      0024C6 3Es00            [ 7] 7681 	ld	a, #>(_playfield)
      0024C8 DD 8E FD         [19] 7682 	adc	a, -3 (ix)
      0024CB DD 77 FB         [19] 7683 	ld	-5 (ix), a
      0024CE DD 7E FF         [19] 7684 	ld	a, -1 (ix)
      0024D1 DD 77 FD         [19] 7685 	ld	-3 (ix), a
      0024D4 DD 34 FD         [23] 7686 	inc	-3 (ix)
      0024D7 DD 34 FD         [23] 7687 	inc	-3 (ix)
      0024DA DD 34 FD         [23] 7688 	inc	-3 (ix)
      0024DD DD 7E FD         [19] 7689 	ld	a, -3 (ix)
      0024E0 DD 86 FA         [19] 7690 	add	a, -6 (ix)
      0024E3 DD 77 FC         [19] 7691 	ld	-4 (ix), a
      0024E6 3E 00            [ 7] 7692 	ld	a, #0x00
      0024E8 DD 8E FB         [19] 7693 	adc	a, -5 (ix)
      0024EB DD 77 FD         [19] 7694 	ld	-3 (ix), a
      0024EE DD 6E FC         [19] 7695 	ld	l, -4 (ix)
      0024F1 DD 66 FD         [19] 7696 	ld	h, -3 (ix)
      0024F4 7E               [ 7] 7697 	ld	a, (hl)
      0024F5 B7               [ 4] 7698 	or	a, a
      0024F6 28 14            [12] 7699 	jr	Z, 00155$
      0024F8                       7700 00125$:
                                   7701 ;src\/GameLogic.h:176: DrawPiece(line);
      0024F8 3Ar02r00         [13] 7702 	ld	a,(#_line + 0)
      0024FB F5               [11] 7703 	push	af
      0024FC 33               [ 6] 7704 	inc	sp
      0024FD CDr62r19         [17] 7705 	call	_DrawPiece
      002500 33               [ 6] 7706 	inc	sp
                                   7707 ;src\/GameLogic.h:178: line = i;
      002501 DD 7E FE         [19] 7708 	ld	a, -2 (ix)
      002504 32r02r00         [13] 7709 	ld	(#_line),a
                                   7710 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002507 CDrB5r21         [17] 7711 	call	_UpdateAndDrawPieceStatic
                                   7712 ;src\/GameLogic.h:181: break;
      00250A 18 0B            [12] 7713 	jr	00132$
      00250C                       7714 00155$:
                                   7715 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00250C DD 34 FF         [23] 7716 	inc	-1 (ix)
      00250F DD 7E FF         [19] 7717 	ld	a, -1 (ix)
      002512 DD 77 FE         [19] 7718 	ld	-2 (ix), a
      002515 18 87            [12] 7719 	jr	00154$
      002517                       7720 00132$:
                                   7721 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002517 DD 7E F6         [19] 7722 	ld	a, -10 (ix)
      00251A DD 77 FF         [19] 7723 	ld	-1 (ix), a
                                   7724 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      00251D DD 7E F6         [19] 7725 	ld	a, -10 (ix)
      002520 DD 77 F3         [19] 7726 	ld	-13 (ix), a
                                   7727 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      002523 DD 7E F7         [19] 7728 	ld	a, -9 (ix)
      002526 DD 77 F4         [19] 7729 	ld	-12 (ix), a
                                   7730 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002529 DD 7E F8         [19] 7731 	ld	a, -8 (ix)
      00252C DD 77 F5         [19] 7732 	ld	-11 (ix), a
                                   7733 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      00252F 2E 07            [ 7] 7734 	ld	l, #0x07
      002531 CDr00r00         [17] 7735 	call	_SNSMAT
                                   7736 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      002534 CB 55            [ 8] 7737 	bit	2, l
      002536 20 03            [12] 7738 	jr	NZ, 00134$
                                   7739 ;src\/GameLogic.h:220: Pause();
      002538 CDr70r22         [17] 7740 	call	_Pause
      00253B                       7741 00134$:
                                   7742 ;src\/GameLogic.h:225: counter++;
      00253B FD 21r03r00      [14] 7743 	ld	iy, #_counter
      00253F FD 34 00         [23] 7744 	inc	0 (iy)
                                   7745 ;src\/GameLogic.h:226: if(counter == speed) {
      002542 FD 7E 00         [19] 7746 	ld	a, 0 (iy)
      002545 21r96r00         [10] 7747 	ld	hl, #_speed
      002548 96               [ 7] 7748 	sub	a, (hl)
      002549 20 3F            [12] 7749 	jr	NZ, 00139$
                                   7750 ;src\/GameLogic.h:228: counter = 0;
      00254B 21r03r00         [10] 7751 	ld	hl, #_counter
      00254E 36 00            [10] 7752 	ld	(hl), #0x00
                                   7753 ;src\/GameLogic.h:231: DrawPiece(line);
      002550 3Ar02r00         [13] 7754 	ld	a,(#_line + 0)
      002553 F5               [11] 7755 	push	af
      002554 33               [ 6] 7756 	inc	sp
      002555 CDr62r19         [17] 7757 	call	_DrawPiece
      002558 33               [ 6] 7758 	inc	sp
                                   7759 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002559 FD 21r02r00      [14] 7760 	ld	iy, #_line
      00255D FD 7E 00         [19] 7761 	ld	a, 0 (iy)
      002560 D6 09            [ 7] 7762 	sub	a, #0x09
      002562 28 1F            [12] 7763 	jr	Z, 00135$
      002564 ED 4Br01r00      [20] 7764 	ld	bc, (_col)
      002568 06 00            [ 7] 7765 	ld	b, #0x00
      00256A 69               [ 4] 7766 	ld	l, c
      00256B 60               [ 4] 7767 	ld	h, b
      00256C 29               [11] 7768 	add	hl, hl
      00256D 09               [11] 7769 	add	hl, bc
      00256E 29               [11] 7770 	add	hl, hl
      00256F 29               [11] 7771 	add	hl, hl
      002570 EB               [ 4] 7772 	ex	de, hl
      002571 21r00r00         [10] 7773 	ld	hl, #_playfield
      002574 19               [11] 7774 	add	hl, de
      002575 EB               [ 4] 7775 	ex	de, hl
      002576 FD 7E 00         [19] 7776 	ld	a, 0 (iy)
      002579 C6 03            [ 7] 7777 	add	a, #0x03
      00257B 6F               [ 4] 7778 	ld	l, a
      00257C 26 00            [ 7] 7779 	ld	h, #0x00
      00257E 19               [11] 7780 	add	hl, de
      00257F 7E               [ 7] 7781 	ld	a, (hl)
      002580 B7               [ 4] 7782 	or	a, a
      002581 28 03            [12] 7783 	jr	Z, 00136$
      002583                       7784 00135$:
                                   7785 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002583 CDrB5r21         [17] 7786 	call	_UpdateAndDrawPieceStatic
      002586                       7787 00136$:
                                   7788 ;src\/GameLogic.h:240: line++;
      002586 21r02r00         [10] 7789 	ld	hl, #_line
      002589 34               [11] 7790 	inc	(hl)
      00258A                       7791 00139$:
                                   7792 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      00258A ED 4Br01r00      [20] 7793 	ld	bc, (_col)
      00258E 06 00            [ 7] 7794 	ld	b, #0x00
      002590 69               [ 4] 7795 	ld	l, c
      002591 60               [ 4] 7796 	ld	h, b
      002592 29               [11] 7797 	add	hl, hl
      002593 09               [11] 7798 	add	hl, bc
      002594 29               [11] 7799 	add	hl, hl
      002595 29               [11] 7800 	add	hl, hl
      002596 EB               [ 4] 7801 	ex	de, hl
      002597 21r00r00         [10] 7802 	ld	hl, #_playfield
      00259A 19               [11] 7803 	add	hl, de
      00259B EB               [ 4] 7804 	ex	de, hl
      00259C 3Ar02r00         [13] 7805 	ld	a, (#_line + 0)
      00259F 6F               [ 4] 7806 	ld	l, a
      0025A0 26 00            [ 7] 7807 	ld	h, #0x00
      0025A2 19               [11] 7808 	add	hl, de
      0025A3 3Ar90r00         [13] 7809 	ld	a,(#_topPiece + 0)
      0025A6 77               [ 7] 7810 	ld	(hl), a
                                   7811 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      0025A7 ED 4Br01r00      [20] 7812 	ld	bc, (_col)
      0025AB 06 00            [ 7] 7813 	ld	b, #0x00
      0025AD 69               [ 4] 7814 	ld	l, c
      0025AE 60               [ 4] 7815 	ld	h, b
      0025AF 29               [11] 7816 	add	hl, hl
      0025B0 09               [11] 7817 	add	hl, bc
      0025B1 29               [11] 7818 	add	hl, hl
      0025B2 29               [11] 7819 	add	hl, hl
      0025B3 EB               [ 4] 7820 	ex	de, hl
      0025B4 21r00r00         [10] 7821 	ld	hl, #_playfield
      0025B7 19               [11] 7822 	add	hl, de
      0025B8 EB               [ 4] 7823 	ex	de, hl
      0025B9 3Ar02r00         [13] 7824 	ld	a, (#_line + 0)
      0025BC 6F               [ 4] 7825 	ld	l, a
      0025BD 2C               [ 4] 7826 	inc	l
      0025BE 26 00            [ 7] 7827 	ld	h, #0x00
      0025C0 19               [11] 7828 	add	hl, de
      0025C1 3Ar91r00         [13] 7829 	ld	a,(#_midPiece + 0)
      0025C4 77               [ 7] 7830 	ld	(hl), a
                                   7831 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      0025C5 ED 4Br01r00      [20] 7832 	ld	bc, (_col)
      0025C9 06 00            [ 7] 7833 	ld	b, #0x00
      0025CB 69               [ 4] 7834 	ld	l, c
      0025CC 60               [ 4] 7835 	ld	h, b
      0025CD 29               [11] 7836 	add	hl, hl
      0025CE 09               [11] 7837 	add	hl, bc
      0025CF 29               [11] 7838 	add	hl, hl
      0025D0 29               [11] 7839 	add	hl, hl
      0025D1 EB               [ 4] 7840 	ex	de, hl
      0025D2 21r00r00         [10] 7841 	ld	hl, #_playfield
      0025D5 19               [11] 7842 	add	hl, de
      0025D6 EB               [ 4] 7843 	ex	de, hl
      0025D7 3Ar02r00         [13] 7844 	ld	a, (#_line + 0)
      0025DA 6F               [ 4] 7845 	ld	l, a
      0025DB 2C               [ 4] 7846 	inc	l
      0025DC 2C               [ 4] 7847 	inc	l
      0025DD 26 00            [ 7] 7848 	ld	h, #0x00
      0025DF 19               [11] 7849 	add	hl, de
      0025E0 3Ar92r00         [13] 7850 	ld	a,(#_bottomPiece + 0)
      0025E3 77               [ 7] 7851 	ld	(hl), a
                                   7852 ;src\/GameLogic.h:254: DrawPiece(line);
      0025E4 3Ar02r00         [13] 7853 	ld	a,(#_line + 0)
      0025E7 F5               [11] 7854 	push	af
      0025E8 33               [ 6] 7855 	inc	sp
      0025E9 CDr62r19         [17] 7856 	call	_DrawPiece
      0025EC 33               [ 6] 7857 	inc	sp
                                   7858 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0025ED ED 4Br01r00      [20] 7859 	ld	bc, (_col)
      0025F1 06 00            [ 7] 7860 	ld	b, #0x00
      0025F3 69               [ 4] 7861 	ld	l, c
      0025F4 60               [ 4] 7862 	ld	h, b
      0025F5 29               [11] 7863 	add	hl, hl
      0025F6 09               [11] 7864 	add	hl, bc
      0025F7 29               [11] 7865 	add	hl, hl
      0025F8 29               [11] 7866 	add	hl, hl
      0025F9 EB               [ 4] 7867 	ex	de, hl
                                   7868 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      0025FA 21r00r00         [10] 7869 	ld	hl, #_playfield
      0025FD 19               [11] 7870 	add	hl, de
      0025FE EB               [ 4] 7871 	ex	de, hl
      0025FF 3Ar02r00         [13] 7872 	ld	a,(#_line + 0)
      002602 C6 03            [ 7] 7873 	add	a, #0x03
      002604 4F               [ 4] 7874 	ld	c, a
      002605 69               [ 4] 7875 	ld	l, c
      002606 26 00            [ 7] 7876 	ld	h, #0x00
      002608 19               [11] 7877 	add	hl, de
      002609 7E               [ 7] 7878 	ld	a, (hl)
      00260A B7               [ 4] 7879 	or	a, a
      00260B 28 06            [12] 7880 	jr	Z, 00148$
                                   7881 ;src\/GameLogic.h:260: HideArrowSprite();
      00260D CDr48r0C         [17] 7882 	call	_HideArrowSprite
      002610 C3rCDr22         [10] 7883 	jp	00150$
      002613                       7884 00148$:
                                   7885 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002613 41               [ 4] 7886 	ld	b, c
      002614                       7887 00157$:
      002614 78               [ 4] 7888 	ld	a, b
      002615 D6 0C            [ 7] 7889 	sub	a, #0x0c
      002617 D2rCDr22         [10] 7890 	jp	NC, 00150$
                                   7891 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      00261A 3Ar01r00         [13] 7892 	ld	a,(#_col + 0)
      00261D 87               [ 4] 7893 	add	a, a
      00261E 87               [ 4] 7894 	add	a, a
      00261F 87               [ 4] 7895 	add	a, a
      002620 87               [ 4] 7896 	add	a, a
      002621 DD 77 FE         [19] 7897 	ld	-2 (ix), a
                                   7898 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002624 68               [ 4] 7899 	ld	l, b
      002625 26 00            [ 7] 7900 	ld	h, #0x00
      002627 19               [11] 7901 	add	hl, de
                                   7902 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002628 DD 7E FE         [19] 7903 	ld	a, -2 (ix)
      00262B C6 50            [ 7] 7904 	add	a, #0x50
      00262D DD 77 FE         [19] 7905 	ld	-2 (ix), a
                                   7906 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002630 6E               [ 7] 7907 	ld	l, (hl)
      002631 78               [ 4] 7908 	ld	a, b
      002632 D6 0B            [ 7] 7909 	sub	a,#0x0b
      002634 20 16            [12] 7910 	jr	NZ, 00143$
      002636 B5               [ 4] 7911 	or	a,l
      002637 20 13            [12] 7912 	jr	NZ, 00143$
                                   7913 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002639 79               [ 4] 7914 	ld	a, c
      00263A 87               [ 4] 7915 	add	a, a
      00263B 87               [ 4] 7916 	add	a, a
      00263C 87               [ 4] 7917 	add	a, a
      00263D 87               [ 4] 7918 	add	a, a
      00263E F5               [11] 7919 	push	af
      00263F 33               [ 6] 7920 	inc	sp
      002640 DD 7E FE         [19] 7921 	ld	a, -2 (ix)
      002643 F5               [11] 7922 	push	af
      002644 33               [ 6] 7923 	inc	sp
      002645 CDrEDr00         [17] 7924 	call	_DrawArrowSprite
      002648 F1               [10] 7925 	pop	af
                                   7926 ;src\/GameLogic.h:266: break;
      002649 C3rCDr22         [10] 7927 	jp	00150$
      00264C                       7928 00143$:
                                   7929 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      00264C 7D               [ 4] 7930 	ld	a, l
      00264D B7               [ 4] 7931 	or	a, a
      00264E 28 14            [12] 7932 	jr	Z, 00158$
                                   7933 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002650 79               [ 4] 7934 	ld	a, c
      002651 3D               [ 4] 7935 	dec	a
      002652 87               [ 4] 7936 	add	a, a
      002653 87               [ 4] 7937 	add	a, a
      002654 87               [ 4] 7938 	add	a, a
      002655 87               [ 4] 7939 	add	a, a
      002656 F5               [11] 7940 	push	af
      002657 33               [ 6] 7941 	inc	sp
      002658 DD 7E FE         [19] 7942 	ld	a, -2 (ix)
      00265B F5               [11] 7943 	push	af
      00265C 33               [ 6] 7944 	inc	sp
      00265D CDrEDr00         [17] 7945 	call	_DrawArrowSprite
      002660 F1               [10] 7946 	pop	af
                                   7947 ;src\/GameLogic.h:270: break;
      002661 C3rCDr22         [10] 7948 	jp	00150$
      002664                       7949 00158$:
                                   7950 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002664 04               [ 4] 7951 	inc	b
      002665 48               [ 4] 7952 	ld	c, b
      002666 18 AC            [12] 7953 	jr	00157$
      002668                       7954 00152$:
                                   7955 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002668 11 0C 0C         [10] 7956 	ld	de, #0x0c0c
      00266B D5               [11] 7957 	push	de
      00266C 21r80r26         [10] 7958 	ld	hl, #___str_7
      00266F E5               [11] 7959 	push	hl
      002670 CDrF1r0F         [17] 7960 	call	_DrawString
      002673 F1               [10] 7961 	pop	af
                                   7962 ;src\/GameLogic.h:282: Wait(60 * 5);
      002674 21 2C 01         [10] 7963 	ld	hl, #0x012c
      002677 E3               [19] 7964 	ex	(sp),hl
      002678 CDr00r00         [17] 7965 	call	_Wait
                                   7966 ;src\/GameLogic.h:284: }
      00267B DD F9            [10] 7967 	ld	sp,ix
      00267D DD E1            [14] 7968 	pop	ix
      00267F C9               [10] 7969 	ret
      002680                       7970 ___str_7:
      002680 47 41 4D 45 20 4F 56  7971 	.ascii "GAME OVER"
             45 52
      002689 00                    7972 	.db 0x00
                                   7973 ;src\/GameLogic.h:286: void TestCase() {
                                   7974 ;	---------------------------------
                                   7975 ; Function TestCase
                                   7976 ; ---------------------------------
      00268A                       7977 _TestCase::
                                   7978 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      00268A 21r20r00         [10] 7979 	ld	hl, #(_playfield + 0x0020)
      00268D 36 04            [10] 7980 	ld	(hl), #0x04
                                   7981 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      00268F 21r21r00         [10] 7982 	ld	hl, #(_playfield + 0x0021)
      002692 36 0C            [10] 7983 	ld	(hl), #0x0c
                                   7984 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002694 21r0Ar00         [10] 7985 	ld	hl, #(_playfield + 0x000a)
      002697 36 0C            [10] 7986 	ld	(hl), #0x0c
                                   7987 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002699 21r16r00         [10] 7988 	ld	hl, #(_playfield + 0x0016)
      00269C 36 0C            [10] 7989 	ld	(hl), #0x0c
                                   7990 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      00269E 21r22r00         [10] 7991 	ld	hl, #(_playfield + 0x0022)
      0026A1 36 08            [10] 7992 	ld	(hl), #0x08
                                   7993 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      0026A3 21r3Ar00         [10] 7994 	ld	hl, #(_playfield + 0x003a)
      0026A6 36 08            [10] 7995 	ld	(hl), #0x08
                                   7996 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      0026A8 21r46r00         [10] 7997 	ld	hl, #(_playfield + 0x0046)
      0026AB 36 0C            [10] 7998 	ld	(hl), #0x0c
                                   7999 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      0026AD 21r0Br00         [10] 8000 	ld	hl, #(_playfield + 0x000b)
      0026B0 36 04            [10] 8001 	ld	(hl), #0x04
                                   8002 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      0026B2 21r17r00         [10] 8003 	ld	hl, #(_playfield + 0x0017)
      0026B5 36 04            [10] 8004 	ld	(hl), #0x04
                                   8005 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      0026B7 21r23r00         [10] 8006 	ld	hl, #(_playfield + 0x0023)
      0026BA 36 08            [10] 8007 	ld	(hl), #0x08
                                   8008 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      0026BC 21r2Fr00         [10] 8009 	ld	hl, #(_playfield + 0x002f)
      0026BF 36 00            [10] 8010 	ld	(hl), #0x00
                                   8011 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      0026C1 21r3Br00         [10] 8012 	ld	hl, #(_playfield + 0x003b)
      0026C4 36 08            [10] 8013 	ld	(hl), #0x08
                                   8014 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      0026C6 21r47r00         [10] 8015 	ld	hl, #(_playfield + 0x0047)
      0026C9 36 08            [10] 8016 	ld	(hl), #0x08
                                   8017 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      0026CB 3E 0C            [ 7] 8018 	ld	a, #0x0c
      0026CD 32r90r00         [13] 8019 	ld	(#_topPiece), a
                                   8020 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   8021 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      0026D0 3E 08            [ 7] 8022 	ld	a,#0x08
      0026D2 32r91r00         [13] 8023 	ld	(#_midPiece),a
      0026D5 32r92r00         [13] 8024 	ld	(#_bottomPiece), a
                                   8025 ;src\/GameLogic.h:326: }
      0026D8 C9               [10] 8026 	ret
                                   8027 ;src\/GameLogic.h:328: void InitGame() {
                                   8028 ;	---------------------------------
                                   8029 ; Function InitGame
                                   8030 ; ---------------------------------
      0026D9                       8031 _InitGame::
                                   8032 ;src\/GameLogic.h:330: gameOver = FALSE;
      0026D9 21r00r00         [10] 8033 	ld	hl, #_gameOver
      0026DC 36 00            [10] 8034 	ld	(hl), #0x00
                                   8035 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      0026DE 21r02r00         [10] 8036 	ld	hl, #_line
      0026E1 36 00            [10] 8037 	ld	(hl), #0x00
                                   8038 ;src\/GameLogic.h:332: col = INITIAL_COL;
      0026E3 21r01r00         [10] 8039 	ld	hl, #_col
      0026E6 36 02            [10] 8040 	ld	(hl), #0x02
                                   8041 ;src\/GameLogic.h:334: blocksRemoved = 0;
      0026E8 21 00 00         [10] 8042 	ld	hl, #0x0000
      0026EB 22r04r00         [16] 8043 	ld	(_blocksRemoved), hl
                                   8044 ;src\/GameLogic.h:335: level = 1;
      0026EE 21r06r00         [10] 8045 	ld	hl, #_level
      0026F1 36 01            [10] 8046 	ld	(hl), #0x01
                                   8047 ;src\/GameLogic.h:336: newLevel = FALSE;
      0026F3 21r07r00         [10] 8048 	ld	hl, #_newLevel
      0026F6 36 00            [10] 8049 	ld	(hl), #0x00
                                   8050 ;src\/GameLogic.h:337: speed = 60;
      0026F8 21r96r00         [10] 8051 	ld	hl, #_speed
      0026FB 36 3C            [10] 8052 	ld	(hl), #0x3c
                                   8053 ;src\/GameLogic.h:339: InitVRAM();
      0026FD CDr0Br16         [17] 8054 	call	_InitVRAM
                                   8055 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002700 3Ar08r00         [13] 8056 	ld	a, (#_rndSeed + 0)
      002703 5F               [ 4] 8057 	ld	e, a
      002704 3A 9E FC         [13] 8058 	ld	a, (#_JIFFY + 0)
      002707 67               [ 4] 8059 	ld	h, a
      002708 2E 00            [ 7] 8060 	ld	l, #0x00
      00270A 55               [ 4] 8061 	ld	d, l
      00270B 06 08            [ 7] 8062 	ld	b, #0x08
      00270D                       8063 00133$:
      00270D 29               [11] 8064 	add	hl, hl
      00270E 30 01            [12] 8065 	jr	NC, 00134$
      002710 19               [11] 8066 	add	hl, de
      002711                       8067 00134$:
      002711 10 FA            [13] 8068 	djnz	00133$
      002713 7D               [ 4] 8069 	ld	a, l
      002714 C6 63            [ 7] 8070 	add	a, #0x63
      002716 4F               [ 4] 8071 	ld	c, a
      002717 3Ar08r00         [13] 8072 	ld	a, (#_rndSeed + 0)
      00271A 5F               [ 4] 8073 	ld	e, a
      00271B 3A 9E FC         [13] 8074 	ld	a, (#_JIFFY + 0)
      00271E 67               [ 4] 8075 	ld	h, a
      00271F 2E 00            [ 7] 8076 	ld	l, #0x00
      002721 55               [ 4] 8077 	ld	d, l
      002722 06 08            [ 7] 8078 	ld	b, #0x08
      002724                       8079 00135$:
      002724 29               [11] 8080 	add	hl, hl
      002725 30 01            [12] 8081 	jr	NC, 00136$
      002727 19               [11] 8082 	add	hl, de
      002728                       8083 00136$:
      002728 10 FA            [13] 8084 	djnz	00135$
      00272A 79               [ 4] 8085 	ld	a, c
      00272B F5               [11] 8086 	push	af
      00272C 7D               [ 4] 8087 	ld	a, l
      00272D 33               [ 6] 8088 	inc	sp
      00272E F5               [11] 8089 	push	af
      00272F 33               [ 6] 8090 	inc	sp
      002730 3Ar08r00         [13] 8091 	ld	a,(#_rndSeed + 0)
      002733 F5               [11] 8092 	push	af
      002734 33               [ 6] 8093 	inc	sp
      002735 CDr50r00         [17] 8094 	call	_InitRnd
      002738 F1               [10] 8095 	pop	af
      002739 33               [ 6] 8096 	inc	sp
                                   8097 ;src\/GameLogic.h:345: RandomPiece();
      00273A CDr7Br21         [17] 8098 	call	_RandomPiece
                                   8099 ;src\/GameLogic.h:346: RandomPiece();
      00273D CDr7Br21         [17] 8100 	call	_RandomPiece
                                   8101 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002740 0E 00            [ 7] 8102 	ld	c, #0x00
      002742                       8103 00107$:
      002742 79               [ 4] 8104 	ld	a, c
      002743 D6 0C            [ 7] 8105 	sub	a, #0x0c
      002745 30 20            [12] 8106 	jr	NC, 00102$
                                   8107 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002747 06 00            [ 7] 8108 	ld	b, #0x00
      002749                       8109 00104$:
      002749 78               [ 4] 8110 	ld	a, b
      00274A D6 06            [ 7] 8111 	sub	a, #0x06
      00274C 30 16            [12] 8112 	jr	NC, 00108$
                                   8113 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      00274E 58               [ 4] 8114 	ld	e, b
      00274F 16 00            [ 7] 8115 	ld	d, #0x00
      002751 6B               [ 4] 8116 	ld	l, e
      002752 62               [ 4] 8117 	ld	h, d
      002753 29               [11] 8118 	add	hl, hl
      002754 19               [11] 8119 	add	hl, de
      002755 29               [11] 8120 	add	hl, hl
      002756 29               [11] 8121 	add	hl, hl
      002757 11r00r00         [10] 8122 	ld	de, #_playfield
      00275A 19               [11] 8123 	add	hl, de
      00275B 59               [ 4] 8124 	ld	e, c
      00275C 16 00            [ 7] 8125 	ld	d, #0x00
      00275E 19               [11] 8126 	add	hl, de
      00275F 36 00            [10] 8127 	ld	(hl), #0x00
                                   8128 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002761 04               [ 4] 8129 	inc	b
      002762 18 E5            [12] 8130 	jr	00104$
      002764                       8131 00108$:
                                   8132 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002764 0C               [ 4] 8133 	inc	c
      002765 18 DB            [12] 8134 	jr	00107$
      002767                       8135 00102$:
                                   8136 ;src\/GameLogic.h:356: TestCase();
      002767 CDr8Ar26         [17] 8137 	call	_TestCase
                                   8138 ;src\/GameLogic.h:360: DrawBackground();
      00276A CDrDCr15         [17] 8139 	call	_DrawBackground
                                   8140 ;src\/GameLogic.h:362: DrawPlayfield();
      00276D CDr85r19         [17] 8141 	call	_DrawPlayfield
                                   8142 ;src\/GameLogic.h:364: DrawScore();
      002770 CDr34r14         [17] 8143 	call	_DrawScore
                                   8144 ;src\/GameLogic.h:366: DrawNextPiece();
      002773 CDrDAr12         [17] 8145 	call	_DrawNextPiece
                                   8146 ;src\/GameLogic.h:368: GameLoop();
                                   8147 ;src\/GameLogic.h:369: }
      002776 C3rB0r22         [10] 8148 	jp	_GameLoop
                                   8149 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   8150 ;	---------------------------------
                                   8151 ; Function ChangeFontColor
                                   8152 ; ---------------------------------
      002779                       8153 _ChangeFontColor::
                                   8154 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002779 21 02 00         [10] 8155 	ld	hl, #2
      00277C 39               [11] 8156 	add	hl, sp
      00277D 7E               [ 7] 8157 	ld	a, (hl)
      00277E F5               [11] 8158 	push	af
      00277F 33               [ 6] 8159 	inc	sp
      002780 21 00 03         [10] 8160 	ld	hl, #0x0300
      002783 E5               [11] 8161 	push	hl
      002784 21 78 21         [10] 8162 	ld	hl, #0x2178
      002787 E5               [11] 8163 	push	hl
      002788 CDr00r00         [17] 8164 	call	_FILVRM
      00278B F1               [10] 8165 	pop	af
      00278C F1               [10] 8166 	pop	af
      00278D 33               [ 6] 8167 	inc	sp
                                   8168 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00278E 21 02 00         [10] 8169 	ld	hl, #2
      002791 39               [11] 8170 	add	hl, sp
      002792 7E               [ 7] 8171 	ld	a, (hl)
      002793 F5               [11] 8172 	push	af
      002794 33               [ 6] 8173 	inc	sp
      002795 21 00 03         [10] 8174 	ld	hl, #0x0300
      002798 E5               [11] 8175 	push	hl
      002799 21 78 29         [10] 8176 	ld	hl, #0x2978
      00279C E5               [11] 8177 	push	hl
      00279D CDr00r00         [17] 8178 	call	_FILVRM
      0027A0 F1               [10] 8179 	pop	af
      0027A1 F1               [10] 8180 	pop	af
      0027A2 33               [ 6] 8181 	inc	sp
                                   8182 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0027A3 21 02 00         [10] 8183 	ld	hl, #2
      0027A6 39               [11] 8184 	add	hl, sp
      0027A7 7E               [ 7] 8185 	ld	a, (hl)
      0027A8 F5               [11] 8186 	push	af
      0027A9 33               [ 6] 8187 	inc	sp
      0027AA 21 00 03         [10] 8188 	ld	hl, #0x0300
      0027AD E5               [11] 8189 	push	hl
      0027AE 21 78 31         [10] 8190 	ld	hl, #0x3178
      0027B1 E5               [11] 8191 	push	hl
      0027B2 CDr00r00         [17] 8192 	call	_FILVRM
      0027B5 F1               [10] 8193 	pop	af
      0027B6 F1               [10] 8194 	pop	af
      0027B7 33               [ 6] 8195 	inc	sp
                                   8196 ;src\/Intro.h:7: }
      0027B8 C9               [10] 8197 	ret
                                   8198 ;src\/Intro.h:9: void ScrollDownFont() {
                                   8199 ;	---------------------------------
                                   8200 ; Function ScrollDownFont
                                   8201 ; ---------------------------------
      0027B9                       8202 _ScrollDownFont::
      0027B9 DD E5            [15] 8203 	push	ix
      0027BB DD 21 00 00      [14] 8204 	ld	ix,#0
      0027BF DD 39            [15] 8205 	add	ix,sp
      0027C1 F5               [11] 8206 	push	af
                                   8207 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0027C2 11 78 09         [10] 8208 	ld	de, #0x0978
      0027C5                       8209 00107$:
      0027C5 7B               [ 4] 8210 	ld	a, e
      0027C6 D6 78            [ 7] 8211 	sub	a, #0x78
      0027C8 7A               [ 4] 8212 	ld	a, d
      0027C9 DE 0C            [ 7] 8213 	sbc	a, #0x0c
      0027CB 30 44            [12] 8214 	jr	NC, 00109$
                                   8215 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0027CD 33               [ 6] 8216 	inc	sp
      0027CE 33               [ 6] 8217 	inc	sp
      0027CF D5               [11] 8218 	push	de
      0027D0 DD 7E FE         [19] 8219 	ld	a, -2 (ix)
      0027D3 C6 07            [ 7] 8220 	add	a, #0x07
      0027D5 4F               [ 4] 8221 	ld	c, a
      0027D6 DD 7E FF         [19] 8222 	ld	a, -1 (ix)
      0027D9 CE 00            [ 7] 8223 	adc	a, #0x00
      0027DB 47               [ 4] 8224 	ld	b, a
      0027DC                       8225 00104$:
      0027DC 78               [ 4] 8226 	ld	a, b
      0027DD B1               [ 4] 8227 	or	a, c
      0027DE 28 1A            [12] 8228 	jr	Z, 00101$
                                   8229 ;src\/Intro.h:27: value = RDVRM(j-1);
      0027E0 69               [ 4] 8230 	ld	l, c
      0027E1 60               [ 4] 8231 	ld	h, b
      0027E2 2B               [ 6] 8232 	dec	hl
      0027E3 C5               [11] 8233 	push	bc
      0027E4 D5               [11] 8234 	push	de
      0027E5 CDr00r00         [17] 8235 	call	_RDVRM
      0027E8 D1               [10] 8236 	pop	de
      0027E9 C1               [10] 8237 	pop	bc
                                   8238 ;src\/Intro.h:29: WRTVRM(j, 0);
      0027EA C5               [11] 8239 	push	bc
      0027EB D5               [11] 8240 	push	de
      0027EC AF               [ 4] 8241 	xor	a, a
      0027ED F5               [11] 8242 	push	af
      0027EE 33               [ 6] 8243 	inc	sp
      0027EF C5               [11] 8244 	push	bc
      0027F0 CDr00r00         [17] 8245 	call	_WRTVRM
      0027F3 F1               [10] 8246 	pop	af
      0027F4 33               [ 6] 8247 	inc	sp
      0027F5 D1               [10] 8248 	pop	de
      0027F6 C1               [10] 8249 	pop	bc
                                   8250 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0027F7 0B               [ 6] 8251 	dec	bc
      0027F8 18 E2            [12] 8252 	jr	00104$
      0027FA                       8253 00101$:
                                   8254 ;src\/Intro.h:31: WRTVRM(i, 0);
      0027FA AF               [ 4] 8255 	xor	a, a
      0027FB F5               [11] 8256 	push	af
      0027FC 33               [ 6] 8257 	inc	sp
      0027FD D5               [11] 8258 	push	de
      0027FE CDr00r00         [17] 8259 	call	_WRTVRM
      002801 F1               [10] 8260 	pop	af
      002802 33               [ 6] 8261 	inc	sp
                                   8262 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002803 DD 7E FE         [19] 8263 	ld	a, -2 (ix)
      002806 C6 08            [ 7] 8264 	add	a, #0x08
      002808 5F               [ 4] 8265 	ld	e, a
      002809 DD 7E FF         [19] 8266 	ld	a, -1 (ix)
      00280C CE 00            [ 7] 8267 	adc	a, #0x00
      00280E 57               [ 4] 8268 	ld	d, a
      00280F 18 B4            [12] 8269 	jr	00107$
      002811                       8270 00109$:
                                   8271 ;src\/Intro.h:35: }
      002811 DD F9            [10] 8272 	ld	sp, ix
      002813 DD E1            [14] 8273 	pop	ix
      002815 C9               [10] 8274 	ret
                                   8275 ;src\/Intro.h:37: void Intro() {
                                   8276 ;	---------------------------------
                                   8277 ; Function Intro
                                   8278 ; ---------------------------------
      002816                       8279 _Intro::
                                   8280 ;src\/Intro.h:41: InitVRAM();
      002816 CDr0Br16         [17] 8281 	call	_InitVRAM
                                   8282 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002819 11 0B 0B         [10] 8283 	ld	de, #0x0b0b
      00281C D5               [11] 8284 	push	de
      00281D 21r8Br28         [10] 8285 	ld	hl, #___str_8
      002820 E5               [11] 8286 	push	hl
      002821 CDrF1r0F         [17] 8287 	call	_DrawString
      002824 F1               [10] 8288 	pop	af
      002825 F1               [10] 8289 	pop	af
                                   8290 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002826 11 09 0D         [10] 8291 	ld	de, #0x0d09
      002829 D5               [11] 8292 	push	de
      00282A 21r95r28         [10] 8293 	ld	hl, #___str_9
      00282D E5               [11] 8294 	push	hl
      00282E CDrF1r0F         [17] 8295 	call	_DrawString
      002831 F1               [10] 8296 	pop	af
                                   8297 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002832 26 F0            [ 7] 8298 	ld	h,#0xf0
      002834 E3               [19] 8299 	ex	(sp),hl
      002835 33               [ 6] 8300 	inc	sp
      002836 CDr79r27         [17] 8301 	call	_ChangeFontColor
      002839 33               [ 6] 8302 	inc	sp
                                   8303 ;src\/Intro.h:56: Wait(2 * 60);
      00283A 21 78 00         [10] 8304 	ld	hl, #0x0078
      00283D E5               [11] 8305 	push	hl
      00283E CDr00r00         [17] 8306 	call	_Wait
      002841 F1               [10] 8307 	pop	af
                                   8308 ;src\/Intro.h:58: while(counter++ < 20) {
      002842 0E 00            [ 7] 8309 	ld	c, #0x00
      002844                       8310 00112$:
      002844 79               [ 4] 8311 	ld	a, c
      002845 D6 14            [ 7] 8312 	sub	a, #0x14
      002847 D0               [11] 8313 	ret	NC
      002848 0C               [ 4] 8314 	inc	c
                                   8315 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002849 21 9E FC         [10] 8316 	ld	hl, #_JIFFY
      00284C 46               [ 7] 8317 	ld	b, (hl)
                                   8318 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      00284D                       8319 00101$:
      00284D 58               [ 4] 8320 	ld	e, b
      00284E 16 00            [ 7] 8321 	ld	d, #0x00
      002850 2A 9E FC         [16] 8322 	ld	hl, (_JIFFY)
      002853 BF               [ 4] 8323 	cp	a, a
      002854 ED 52            [15] 8324 	sbc	hl, de
      002856 28 F5            [12] 8325 	jr	Z, 00101$
                                   8326 ;src\/Intro.h:63: if(counter == 15) {
      002858 79               [ 4] 8327 	ld	a, c
      002859 D6 0F            [ 7] 8328 	sub	a, #0x0f
      00285B 20 0C            [12] 8329 	jr	NZ, 00110$
                                   8330 ;src\/Intro.h:64: ChangeFontColor(0x40);
      00285D C5               [11] 8331 	push	bc
      00285E 3E 40            [ 7] 8332 	ld	a, #0x40
      002860 F5               [11] 8333 	push	af
      002861 33               [ 6] 8334 	inc	sp
      002862 CDr79r27         [17] 8335 	call	_ChangeFontColor
      002865 33               [ 6] 8336 	inc	sp
      002866 C1               [10] 8337 	pop	bc
      002867 18 DB            [12] 8338 	jr	00112$
      002869                       8339 00110$:
                                   8340 ;src\/Intro.h:66: else if(counter == 10) {
      002869 79               [ 4] 8341 	ld	a, c
      00286A D6 0A            [ 7] 8342 	sub	a, #0x0a
      00286C 20 0C            [12] 8343 	jr	NZ, 00107$
                                   8344 ;src\/Intro.h:67: ChangeFontColor(0x50);
      00286E C5               [11] 8345 	push	bc
      00286F 3E 50            [ 7] 8346 	ld	a, #0x50
      002871 F5               [11] 8347 	push	af
      002872 33               [ 6] 8348 	inc	sp
      002873 CDr79r27         [17] 8349 	call	_ChangeFontColor
      002876 33               [ 6] 8350 	inc	sp
      002877 C1               [10] 8351 	pop	bc
      002878 18 CA            [12] 8352 	jr	00112$
      00287A                       8353 00107$:
                                   8354 ;src\/Intro.h:69: else if(counter == 5) {
      00287A 79               [ 4] 8355 	ld	a, c
      00287B D6 05            [ 7] 8356 	sub	a, #0x05
      00287D 20 C5            [12] 8357 	jr	NZ, 00112$
                                   8358 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      00287F C5               [11] 8359 	push	bc
      002880 3E E0            [ 7] 8360 	ld	a, #0xe0
      002882 F5               [11] 8361 	push	af
      002883 33               [ 6] 8362 	inc	sp
      002884 CDr79r27         [17] 8363 	call	_ChangeFontColor
      002887 33               [ 6] 8364 	inc	sp
      002888 C1               [10] 8365 	pop	bc
                                   8366 ;src\/Intro.h:140: }
      002889 18 B9            [12] 8367 	jr	00112$
      00288B                       8368 ___str_8:
      00288B 41 20 47 41 4D 45 20  8369 	.ascii "A GAME BY"
             42 59
      002894 00                    8370 	.db 0x00
      002895                       8371 ___str_9:
      002895 41 4E 44 52 45 20 42  8372 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0028A3 00                    8373 	.db 0x00
                                   8374 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   8375 ;	---------------------------------
                                   8376 ; Function SetBlock
                                   8377 ; ---------------------------------
      0028A4                       8378 _SetBlock::
      0028A4 DD E5            [15] 8379 	push	ix
      0028A6 DD 21 00 00      [14] 8380 	ld	ix,#0
      0028AA DD 39            [15] 8381 	add	ix,sp
                                   8382 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0028AC DD 7E 04         [19] 8383 	ld	a, 4 (ix)
      0028AF 06 00            [ 7] 8384 	ld	b, #0x00
      0028B1 4F               [ 4] 8385 	ld	c, a
      0028B2 78               [ 4] 8386 	ld	a, b
      0028B3 C6 18            [ 7] 8387 	add	a, #0x18
      0028B5 47               [ 4] 8388 	ld	b, a
      0028B6 DD 6E 05         [19] 8389 	ld	l, 5 (ix)
      0028B9 26 00            [ 7] 8390 	ld	h, #0x00
      0028BB 29               [11] 8391 	add	hl, hl
      0028BC 29               [11] 8392 	add	hl, hl
      0028BD 29               [11] 8393 	add	hl, hl
      0028BE 29               [11] 8394 	add	hl, hl
      0028BF 29               [11] 8395 	add	hl, hl
      0028C0 09               [11] 8396 	add	hl, bc
      0028C1 DD 7E 06         [19] 8397 	ld	a, 6 (ix)
      0028C4 F5               [11] 8398 	push	af
      0028C5 33               [ 6] 8399 	inc	sp
      0028C6 E5               [11] 8400 	push	hl
      0028C7 CDr00r00         [17] 8401 	call	_WRTVRM
      0028CA F1               [10] 8402 	pop	af
      0028CB 33               [ 6] 8403 	inc	sp
                                   8404 ;src\/Title.h:16: }
      0028CC DD E1            [14] 8405 	pop	ix
      0028CE C9               [10] 8406 	ret
                                   8407 ;src\/Title.h:18: void TitleScreen() {
                                   8408 ;	---------------------------------
                                   8409 ; Function TitleScreen
                                   8410 ; ---------------------------------
      0028CF                       8411 _TitleScreen::
      0028CF DD E5            [15] 8412 	push	ix
      0028D1 DD 21 00 00      [14] 8413 	ld	ix,#0
      0028D5 DD 39            [15] 8414 	add	ix,sp
      0028D7 21 EB FF         [10] 8415 	ld	hl, #-21
      0028DA 39               [11] 8416 	add	hl, sp
      0028DB F9               [ 6] 8417 	ld	sp, hl
                                   8418 ;src\/Title.h:19: byte colorIndex = 0;
      0028DC 0E 00            [ 7] 8419 	ld	c, #0x00
                                   8420 ;src\/Title.h:52: const char blocks[] = {
      0028DE 21 00 00         [10] 8421 	ld	hl, #0
      0028E1 39               [11] 8422 	add	hl, sp
      0028E2 EB               [ 4] 8423 	ex	de, hl
      0028E3 3E 8E            [ 7] 8424 	ld	a, #0x8e
      0028E5 12               [ 7] 8425 	ld	(de), a
      0028E6 6B               [ 4] 8426 	ld	l, e
      0028E7 62               [ 4] 8427 	ld	h, d
      0028E8 23               [ 6] 8428 	inc	hl
      0028E9 36 8F            [10] 8429 	ld	(hl), #0x8f
      0028EB 6B               [ 4] 8430 	ld	l, e
      0028EC 62               [ 4] 8431 	ld	h, d
      0028ED 23               [ 6] 8432 	inc	hl
      0028EE 23               [ 6] 8433 	inc	hl
      0028EF 36 90            [10] 8434 	ld	(hl), #0x90
      0028F1 6B               [ 4] 8435 	ld	l, e
      0028F2 62               [ 4] 8436 	ld	h, d
      0028F3 23               [ 6] 8437 	inc	hl
      0028F4 23               [ 6] 8438 	inc	hl
      0028F5 23               [ 6] 8439 	inc	hl
      0028F6 36 91            [10] 8440 	ld	(hl), #0x91
      0028F8 21 04 00         [10] 8441 	ld	hl, #0x0004
      0028FB 19               [11] 8442 	add	hl, de
      0028FC 36 92            [10] 8443 	ld	(hl), #0x92
      0028FE 21 05 00         [10] 8444 	ld	hl, #0x0005
      002901 19               [11] 8445 	add	hl, de
      002902 36 93            [10] 8446 	ld	(hl), #0x93
      002904 21 06 00         [10] 8447 	ld	hl, #0x0006
      002907 19               [11] 8448 	add	hl, de
      002908 36 94            [10] 8449 	ld	(hl), #0x94
                                   8450 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      00290A 21 07 00         [10] 8451 	ld	hl, #7
      00290D 39               [11] 8452 	add	hl, sp
      00290E DD 75 F6         [19] 8453 	ld	-10 (ix), l
      002911 DD 74 F7         [19] 8454 	ld	-9 (ix), h
      002914 36 8E            [10] 8455 	ld	(hl), #0x8e
      002916 DD 6E F6         [19] 8456 	ld	l, -10 (ix)
      002919 DD 66 F7         [19] 8457 	ld	h, -9 (ix)
      00291C 23               [ 6] 8458 	inc	hl
      00291D 36 90            [10] 8459 	ld	(hl), #0x90
      00291F DD 6E F6         [19] 8460 	ld	l, -10 (ix)
      002922 DD 66 F7         [19] 8461 	ld	h, -9 (ix)
      002925 23               [ 6] 8462 	inc	hl
      002926 23               [ 6] 8463 	inc	hl
      002927 36 92            [10] 8464 	ld	(hl), #0x92
      002929 DD 6E F6         [19] 8465 	ld	l, -10 (ix)
      00292C DD 66 F7         [19] 8466 	ld	h, -9 (ix)
      00292F 23               [ 6] 8467 	inc	hl
      002930 23               [ 6] 8468 	inc	hl
      002931 23               [ 6] 8469 	inc	hl
      002932 36 94            [10] 8470 	ld	(hl), #0x94
                                   8471 ;src\/Title.h:65: InitVRAM();
      002934 C5               [11] 8472 	push	bc
      002935 D5               [11] 8473 	push	de
      002936 CDr0Br16         [17] 8474 	call	_InitVRAM
      002939 21 00 01         [10] 8475 	ld	hl, #0x0100
      00293C E5               [11] 8476 	push	hl
      00293D 21rB6r2A         [10] 8477 	ld	hl, #_TitleScreen_title_65536_280
      002940 E5               [11] 8478 	push	hl
      002941 21 00 18         [10] 8479 	ld	hl, #0x1800
      002944 E5               [11] 8480 	push	hl
      002945 CDr00r00         [17] 8481 	call	_LDIRVM
      002948 21 06 00         [10] 8482 	ld	hl, #6
      00294B 39               [11] 8483 	add	hl, sp
      00294C F9               [ 6] 8484 	ld	sp, hl
      00294D 11 05 0D         [10] 8485 	ld	de, #0x0d05
      002950 D5               [11] 8486 	push	de
      002951 21rB6r2B         [10] 8487 	ld	hl, #___str_10
      002954 E5               [11] 8488 	push	hl
      002955 CDrF1r0F         [17] 8489 	call	_DrawString
      002958 F1               [10] 8490 	pop	af
      002959 26 17            [ 7] 8491 	ld	h,#0x17
      00295B E3               [19] 8492 	ex	(sp),hl
      00295C 33               [ 6] 8493 	inc	sp
      00295D AF               [ 4] 8494 	xor	a, a
      00295E F5               [11] 8495 	push	af
      00295F 33               [ 6] 8496 	inc	sp
      002960 21rCDr2B         [10] 8497 	ld	hl, #___str_11
      002963 E5               [11] 8498 	push	hl
      002964 CDrF1r0F         [17] 8499 	call	_DrawString
      002967 F1               [10] 8500 	pop	af
      002968 F1               [10] 8501 	pop	af
      002969 11 19 17         [10] 8502 	ld	de, #0x1719
      00296C D5               [11] 8503 	push	de
      00296D 21rE2r2B         [10] 8504 	ld	hl, #___str_12
      002970 E5               [11] 8505 	push	hl
      002971 CDrF1r0F         [17] 8506 	call	_DrawString
      002974 F1               [10] 8507 	pop	af
      002975 F1               [10] 8508 	pop	af
      002976 D1               [10] 8509 	pop	de
      002977 C1               [10] 8510 	pop	bc
                                   8511 ;src\/Title.h:73: while(TRUE) {
      002978                       8512 00120$:
                                   8513 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002978 DD 36 FD 00      [19] 8514 	ld	-3 (ix), #0
                                   8515 ;src\/Title.h:78: word counter = 0;
      00297C AF               [ 4] 8516 	xor	a, a
      00297D DD 77 FE         [19] 8517 	ld	-2 (ix), a
      002980 DD 77 FF         [19] 8518 	ld	-1 (ix), a
                                   8519 ;src\/Title.h:88: do {
      002983                       8520 00106$:
                                   8521 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002983 C5               [11] 8522 	push	bc
      002984 D5               [11] 8523 	push	de
      002985 11 1F 1F         [10] 8524 	ld	de, #0x1f1f
      002988 D5               [11] 8525 	push	de
      002989 CDrD9r00         [17] 8526 	call	_GetRandomInInterval
      00298C F1               [10] 8527 	pop	af
                                   8528 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      00298D DD 75 F8         [19] 8529 	ld	-8 (ix), l
      002990 11 07 07         [10] 8530 	ld	de, #0x0707
      002993 D5               [11] 8531 	push	de
      002994 CDrD9r00         [17] 8532 	call	_GetRandomInInterval
      002997 F1               [10] 8533 	pop	af
      002998 D1               [10] 8534 	pop	de
      002999 C1               [10] 8535 	pop	bc
      00299A DD 75 F9         [19] 8536 	ld	-7 (ix), l
                                   8537 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      00299D DD 6E F8         [19] 8538 	ld	l, -8 (ix)
      0029A0 3E 00            [ 7] 8539 	ld	a, #0x00
      0029A2 C6 18            [ 7] 8540 	add	a, #0x18
      0029A4 67               [ 4] 8541 	ld	h, a
      0029A5 DD 7E F9         [19] 8542 	ld	a, -7 (ix)
      0029A8 06 00            [ 7] 8543 	ld	b, #0x00
      0029AA 87               [ 4] 8544 	add	a, a
      0029AB CB 10            [ 8] 8545 	rl	b
      0029AD 87               [ 4] 8546 	add	a, a
      0029AE CB 10            [ 8] 8547 	rl	b
      0029B0 87               [ 4] 8548 	add	a, a
      0029B1 CB 10            [ 8] 8549 	rl	b
      0029B3 87               [ 4] 8550 	add	a, a
      0029B4 CB 10            [ 8] 8551 	rl	b
      0029B6 87               [ 4] 8552 	add	a, a
      0029B7 CB 10            [ 8] 8553 	rl	b
      0029B9 85               [ 4] 8554 	add	a, l
      0029BA 6F               [ 4] 8555 	ld	l, a
      0029BB 78               [ 4] 8556 	ld	a, b
      0029BC 8C               [ 4] 8557 	adc	a, h
      0029BD 67               [ 4] 8558 	ld	h, a
      0029BE C5               [11] 8559 	push	bc
      0029BF D5               [11] 8560 	push	de
      0029C0 CDr00r00         [17] 8561 	call	_RDVRM
      0029C3 D1               [10] 8562 	pop	de
      0029C4 C1               [10] 8563 	pop	bc
      0029C5 DD 75 FA         [19] 8564 	ld	-6 (ix), l
                                   8565 ;src\/Title.h:102: if(counter++ > 1000) {
      0029C8 DD 46 FE         [19] 8566 	ld	b, -2 (ix)
      0029CB DD 6E FF         [19] 8567 	ld	l, -1 (ix)
      0029CE DD 34 FE         [23] 8568 	inc	-2 (ix)
      0029D1 20 03            [12] 8569 	jr	NZ, 00193$
      0029D3 DD 34 FF         [23] 8570 	inc	-1 (ix)
      0029D6                       8571 00193$:
      0029D6 3E E8            [ 7] 8572 	ld	a, #0xe8
      0029D8 B8               [ 4] 8573 	cp	a, b
      0029D9 3E 03            [ 7] 8574 	ld	a, #0x03
      0029DB 9D               [ 4] 8575 	sbc	a, l
      0029DC 30 0F            [12] 8576 	jr	NC, 00107$
                                   8577 ;src\/Title.h:103: colorIndex++;
      0029DE 0C               [ 4] 8578 	inc	c
                                   8579 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0029DF 79               [ 4] 8580 	ld	a, c
      0029E0 D6 03            [ 7] 8581 	sub	a, #0x03
      0029E2 38 02            [12] 8582 	jr	C, 00102$
      0029E4 0E 00            [ 7] 8583 	ld	c, #0x00
      0029E6                       8584 00102$:
                                   8585 ;src\/Title.h:119: counter = 0;
      0029E6 AF               [ 4] 8586 	xor	a, a
      0029E7 DD 77 FE         [19] 8587 	ld	-2 (ix), a
      0029EA DD 77 FF         [19] 8588 	ld	-1 (ix), a
      0029ED                       8589 00107$:
                                   8590 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0029ED DD 7E FA         [19] 8591 	ld	a, -6 (ix)
      0029F0 B7               [ 4] 8592 	or	a, a
      0029F1 28 90            [12] 8593 	jr	Z, 00106$
      0029F3 79               [ 4] 8594 	ld	a, c
      0029F4 3C               [ 4] 8595 	inc	a
      0029F5 F5               [11] 8596 	push	af
      0029F6 17               [ 4] 8597 	rla
      0029F7 9F               [ 4] 8598 	sbc	a, a
      0029F8 47               [ 4] 8599 	ld	b, a
      0029F9 F1               [10] 8600 	pop	af
      0029FA DD 86 F6         [19] 8601 	add	a, -10 (ix)
      0029FD DD 77 FB         [19] 8602 	ld	-5 (ix), a
      002A00 78               [ 4] 8603 	ld	a, b
      002A01 DD 8E F7         [19] 8604 	adc	a, -9 (ix)
      002A04 DD 77 FC         [19] 8605 	ld	-4 (ix), a
      002A07 DD 6E FB         [19] 8606 	ld	l, -5 (ix)
      002A0A DD 66 FC         [19] 8607 	ld	h, -4 (ix)
      002A0D 46               [ 7] 8608 	ld	b, (hl)
      002A0E DD 7E FA         [19] 8609 	ld	a, -6 (ix)
      002A11 90               [ 4] 8610 	sub	a, b
      002A12 CAr83r29         [10] 8611 	jp	Z,00106$
                                   8612 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002A15 06 00            [ 7] 8613 	ld	b, #0x00
      002A17                       8614 00123$:
      002A17 78               [ 4] 8615 	ld	a, b
      002A18 D6 0A            [ 7] 8616 	sub	a, #0x0a
      002A1A 30 79            [12] 8617 	jr	NC, 00118$
                                   8618 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002A1C 2A 9E FC         [16] 8619 	ld	hl, (_JIFFY)
      002A1F DD 75 FE         [19] 8620 	ld	-2 (ix), l
      002A22 DD 74 FF         [19] 8621 	ld	-1 (ix), h
                                   8622 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002A25                       8623 00109$:
      002A25 FD 21 9E FC      [14] 8624 	ld	iy, #_JIFFY
      002A29 FD 7E 00         [19] 8625 	ld	a, 0 (iy)
      002A2C DD 96 FE         [19] 8626 	sub	a, -2 (ix)
      002A2F 20 08            [12] 8627 	jr	NZ, 00195$
      002A31 FD 7E 01         [19] 8628 	ld	a, 1 (iy)
      002A34 DD 96 FF         [19] 8629 	sub	a, -1 (ix)
      002A37 28 EC            [12] 8630 	jr	Z, 00109$
      002A39                       8631 00195$:
                                   8632 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002A39 DD 6E FD         [19] 8633 	ld	l, -3 (ix)
      002A3C 26 00            [ 7] 8634 	ld	h, #0x00
      002A3E 19               [11] 8635 	add	hl, de
      002A3F 7E               [ 7] 8636 	ld	a, (hl)
      002A40 C5               [11] 8637 	push	bc
      002A41 D5               [11] 8638 	push	de
      002A42 F5               [11] 8639 	push	af
      002A43 33               [ 6] 8640 	inc	sp
      002A44 DD 66 F9         [19] 8641 	ld	h, -7 (ix)
      002A47 DD 6E F8         [19] 8642 	ld	l, -8 (ix)
      002A4A E5               [11] 8643 	push	hl
      002A4B CDrA4r28         [17] 8644 	call	_SetBlock
      002A4E F1               [10] 8645 	pop	af
      002A4F 33               [ 6] 8646 	inc	sp
      002A50 D1               [10] 8647 	pop	de
      002A51 C1               [10] 8648 	pop	bc
                                   8649 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002A52 DD 7E FD         [19] 8650 	ld	a, -3 (ix)
      002A55 DD 34 FD         [23] 8651 	inc	-3 (ix)
      002A58 D6 07            [ 7] 8652 	sub	a, #0x07
      002A5A 38 04            [12] 8653 	jr	C, 00113$
      002A5C DD 36 FD 00      [19] 8654 	ld	-3 (ix), #0
      002A60                       8655 00113$:
                                   8656 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002A60 C5               [11] 8657 	push	bc
      002A61 D5               [11] 8658 	push	de
      002A62 2E 00            [ 7] 8659 	ld	l, #0x00
      002A64 CDr00r00         [17] 8660 	call	_GTTRIG
                                   8661 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002A67 DD 75 FF         [19] 8662 	ld	-1 (ix), l
      002A6A 2E 01            [ 7] 8663 	ld	l, #0x01
      002A6C CDr00r00         [17] 8664 	call	_GTTRIG
      002A6F D1               [10] 8665 	pop	de
      002A70 C1               [10] 8666 	pop	bc
                                   8667 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      002A71 E5               [11] 8668 	push	hl
      002A72 C5               [11] 8669 	push	bc
      002A73 D5               [11] 8670 	push	de
      002A74 2E 03            [ 7] 8671 	ld	l, #0x03
      002A76 CDr00r00         [17] 8672 	call	_GTTRIG
      002A79 7D               [ 4] 8673 	ld	a, l
      002A7A D1               [10] 8674 	pop	de
      002A7B C1               [10] 8675 	pop	bc
      002A7C E1               [10] 8676 	pop	hl
      002A7D 67               [ 4] 8677 	ld	h, a
                                   8678 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002A7E DD 7E FF         [19] 8679 	ld	a, -1 (ix)
      002A81 3C               [ 4] 8680 	inc	a
      002A82 28 06            [12] 8681 	jr	Z, 00114$
      002A84 2C               [ 4] 8682 	inc	l
      002A85 28 03            [12] 8683 	jr	Z, 00114$
      002A87 24               [ 4] 8684 	inc	h
      002A88 20 08            [12] 8685 	jr	NZ, 00124$
      002A8A                       8686 00114$:
                                   8687 ;src\/Title.h:168: rndSeed = JIFFY;
      002A8A 3A 9E FC         [13] 8688 	ld	a,(#_JIFFY + 0)
      002A8D 32r08r00         [13] 8689 	ld	(#_rndSeed), a
                                   8690 ;src\/Title.h:169: return;
      002A90 18 1F            [12] 8691 	jr	00125$
      002A92                       8692 00124$:
                                   8693 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002A92 04               [ 4] 8694 	inc	b
      002A93 18 82            [12] 8695 	jr	00123$
      002A95                       8696 00118$:
                                   8697 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002A95 DD 6E FB         [19] 8698 	ld	l, -5 (ix)
      002A98 DD 66 FC         [19] 8699 	ld	h, -4 (ix)
      002A9B 7E               [ 7] 8700 	ld	a, (hl)
      002A9C C5               [11] 8701 	push	bc
      002A9D D5               [11] 8702 	push	de
      002A9E F5               [11] 8703 	push	af
      002A9F 33               [ 6] 8704 	inc	sp
      002AA0 DD 66 F9         [19] 8705 	ld	h, -7 (ix)
      002AA3 DD 6E F8         [19] 8706 	ld	l, -8 (ix)
      002AA6 E5               [11] 8707 	push	hl
      002AA7 CDrA4r28         [17] 8708 	call	_SetBlock
      002AAA F1               [10] 8709 	pop	af
      002AAB 33               [ 6] 8710 	inc	sp
      002AAC D1               [10] 8711 	pop	de
      002AAD C1               [10] 8712 	pop	bc
      002AAE C3r78r29         [10] 8713 	jp	00120$
      002AB1                       8714 00125$:
                                   8715 ;src\/Title.h:176: }
      002AB1 DD F9            [10] 8716 	ld	sp, ix
      002AB3 DD E1            [14] 8717 	pop	ix
      002AB5 C9               [10] 8718 	ret
      002AB6                       8719 _TitleScreen_title_65536_280:
      002AB6 00                    8720 	.db #0x00	; 0
      002AB7 00                    8721 	.db #0x00	; 0
      002AB8 00                    8722 	.db #0x00	; 0
      002AB9 00                    8723 	.db #0x00	; 0
      002ABA 8E                    8724 	.db #0x8e	; 142
      002ABB 8E                    8725 	.db #0x8e	; 142
      002ABC 8E                    8726 	.db #0x8e	; 142
      002ABD 8E                    8727 	.db #0x8e	; 142
      002ABE 00                    8728 	.db #0x00	; 0
      002ABF 8E                    8729 	.db #0x8e	; 142
      002AC0 8E                    8730 	.db #0x8e	; 142
      002AC1 8E                    8731 	.db #0x8e	; 142
      002AC2 8E                    8732 	.db #0x8e	; 142
      002AC3 8E                    8733 	.db #0x8e	; 142
      002AC4 8E                    8734 	.db #0x8e	; 142
      002AC5 00                    8735 	.db #0x00	; 0
      002AC6 00                    8736 	.db #0x00	; 0
      002AC7 8E                    8737 	.db #0x8e	; 142
      002AC8 8E                    8738 	.db #0x8e	; 142
      002AC9 00                    8739 	.db #0x00	; 0
      002ACA 00                    8740 	.db #0x00	; 0
      002ACB 00                    8741 	.db #0x00	; 0
      002ACC 8E                    8742 	.db #0x8e	; 142
      002ACD 8E                    8743 	.db #0x8e	; 142
      002ACE 00                    8744 	.db #0x00	; 0
      002ACF 00                    8745 	.db #0x00	; 0
      002AD0 00                    8746 	.db #0x00	; 0
      002AD1 00                    8747 	.db #0x00	; 0
      002AD2 8E                    8748 	.db #0x8e	; 142
      002AD3 8E                    8749 	.db #0x8e	; 142
      002AD4 8E                    8750 	.db #0x8e	; 142
      002AD5 8E                    8751 	.db #0x8e	; 142
      002AD6 00                    8752 	.db #0x00	; 0
      002AD7 00                    8753 	.db #0x00	; 0
      002AD8 00                    8754 	.db #0x00	; 0
      002AD9 8E                    8755 	.db #0x8e	; 142
      002ADA 8E                    8756 	.db #0x8e	; 142
      002ADB 8E                    8757 	.db #0x8e	; 142
      002ADC 8E                    8758 	.db #0x8e	; 142
      002ADD 8E                    8759 	.db #0x8e	; 142
      002ADE 00                    8760 	.db #0x00	; 0
      002ADF 8E                    8761 	.db #0x8e	; 142
      002AE0 8E                    8762 	.db #0x8e	; 142
      002AE1 00                    8763 	.db #0x00	; 0
      002AE2 00                    8764 	.db #0x00	; 0
      002AE3 00                    8765 	.db #0x00	; 0
      002AE4 8E                    8766 	.db #0x8e	; 142
      002AE5 8E                    8767 	.db #0x8e	; 142
      002AE6 00                    8768 	.db #0x00	; 0
      002AE7 00                    8769 	.db #0x00	; 0
      002AE8 8E                    8770 	.db #0x8e	; 142
      002AE9 8E                    8771 	.db #0x8e	; 142
      002AEA 00                    8772 	.db #0x00	; 0
      002AEB 00                    8773 	.db #0x00	; 0
      002AEC 8E                    8774 	.db #0x8e	; 142
      002AED 8E                    8775 	.db #0x8e	; 142
      002AEE 00                    8776 	.db #0x00	; 0
      002AEF 00                    8777 	.db #0x00	; 0
      002AF0 00                    8778 	.db #0x00	; 0
      002AF1 8E                    8779 	.db #0x8e	; 142
      002AF2 8E                    8780 	.db #0x8e	; 142
      002AF3 8E                    8781 	.db #0x8e	; 142
      002AF4 8E                    8782 	.db #0x8e	; 142
      002AF5 8E                    8783 	.db #0x8e	; 142
      002AF6 00                    8784 	.db #0x00	; 0
      002AF7 00                    8785 	.db #0x00	; 0
      002AF8 8E                    8786 	.db #0x8e	; 142
      002AF9 8E                    8787 	.db #0x8e	; 142
      002AFA 8E                    8788 	.db #0x8e	; 142
      002AFB 00                    8789 	.db #0x00	; 0
      002AFC 8E                    8790 	.db #0x8e	; 142
      002AFD 8E                    8791 	.db #0x8e	; 142
      002AFE 00                    8792 	.db #0x00	; 0
      002AFF 8E                    8793 	.db #0x8e	; 142
      002B00 8E                    8794 	.db #0x8e	; 142
      002B01 00                    8795 	.db #0x00	; 0
      002B02 00                    8796 	.db #0x00	; 0
      002B03 00                    8797 	.db #0x00	; 0
      002B04 8E                    8798 	.db #0x8e	; 142
      002B05 8E                    8799 	.db #0x8e	; 142
      002B06 00                    8800 	.db #0x00	; 0
      002B07 00                    8801 	.db #0x00	; 0
      002B08 00                    8802 	.db #0x00	; 0
      002B09 8E                    8803 	.db #0x8e	; 142
      002B0A 8E                    8804 	.db #0x8e	; 142
      002B0B 00                    8805 	.db #0x00	; 0
      002B0C 8E                    8806 	.db #0x8e	; 142
      002B0D 8E                    8807 	.db #0x8e	; 142
      002B0E 00                    8808 	.db #0x00	; 0
      002B0F 00                    8809 	.db #0x00	; 0
      002B10 8E                    8810 	.db #0x8e	; 142
      002B11 8E                    8811 	.db #0x8e	; 142
      002B12 8E                    8812 	.db #0x8e	; 142
      002B13 00                    8813 	.db #0x00	; 0
      002B14 8E                    8814 	.db #0x8e	; 142
      002B15 8E                    8815 	.db #0x8e	; 142
      002B16 00                    8816 	.db #0x00	; 0
      002B17 8E                    8817 	.db #0x8e	; 142
      002B18 8E                    8818 	.db #0x8e	; 142
      002B19 8E                    8819 	.db #0x8e	; 142
      002B1A 00                    8820 	.db #0x00	; 0
      002B1B 00                    8821 	.db #0x00	; 0
      002B1C 8E                    8822 	.db #0x8e	; 142
      002B1D 8E                    8823 	.db #0x8e	; 142
      002B1E 00                    8824 	.db #0x00	; 0
      002B1F 8E                    8825 	.db #0x8e	; 142
      002B20 8E                    8826 	.db #0x8e	; 142
      002B21 00                    8827 	.db #0x00	; 0
      002B22 00                    8828 	.db #0x00	; 0
      002B23 8E                    8829 	.db #0x8e	; 142
      002B24 8E                    8830 	.db #0x8e	; 142
      002B25 00                    8831 	.db #0x00	; 0
      002B26 00                    8832 	.db #0x00	; 0
      002B27 00                    8833 	.db #0x00	; 0
      002B28 00                    8834 	.db #0x00	; 0
      002B29 00                    8835 	.db #0x00	; 0
      002B2A 8E                    8836 	.db #0x8e	; 142
      002B2B 8E                    8837 	.db #0x8e	; 142
      002B2C 8E                    8838 	.db #0x8e	; 142
      002B2D 00                    8839 	.db #0x00	; 0
      002B2E 00                    8840 	.db #0x00	; 0
      002B2F 8E                    8841 	.db #0x8e	; 142
      002B30 8E                    8842 	.db #0x8e	; 142
      002B31 8E                    8843 	.db #0x8e	; 142
      002B32 00                    8844 	.db #0x00	; 0
      002B33 00                    8845 	.db #0x00	; 0
      002B34 8E                    8846 	.db #0x8e	; 142
      002B35 8E                    8847 	.db #0x8e	; 142
      002B36 00                    8848 	.db #0x00	; 0
      002B37 8E                    8849 	.db #0x8e	; 142
      002B38 8E                    8850 	.db #0x8e	; 142
      002B39 00                    8851 	.db #0x00	; 0
      002B3A 00                    8852 	.db #0x00	; 0
      002B3B 00                    8853 	.db #0x00	; 0
      002B3C 8E                    8854 	.db #0x8e	; 142
      002B3D 8E                    8855 	.db #0x8e	; 142
      002B3E 00                    8856 	.db #0x00	; 0
      002B3F 8E                    8857 	.db #0x8e	; 142
      002B40 8E                    8858 	.db #0x8e	; 142
      002B41 8E                    8859 	.db #0x8e	; 142
      002B42 8E                    8860 	.db #0x8e	; 142
      002B43 8E                    8861 	.db #0x8e	; 142
      002B44 00                    8862 	.db #0x00	; 0
      002B45 00                    8863 	.db #0x00	; 0
      002B46 00                    8864 	.db #0x00	; 0
      002B47 00                    8865 	.db #0x00	; 0
      002B48 00                    8866 	.db #0x00	; 0
      002B49 00                    8867 	.db #0x00	; 0
      002B4A 8E                    8868 	.db #0x8e	; 142
      002B4B 8E                    8869 	.db #0x8e	; 142
      002B4C 00                    8870 	.db #0x00	; 0
      002B4D 00                    8871 	.db #0x00	; 0
      002B4E 00                    8872 	.db #0x00	; 0
      002B4F 8E                    8873 	.db #0x8e	; 142
      002B50 8E                    8874 	.db #0x8e	; 142
      002B51 00                    8875 	.db #0x00	; 0
      002B52 00                    8876 	.db #0x00	; 0
      002B53 00                    8877 	.db #0x00	; 0
      002B54 8E                    8878 	.db #0x8e	; 142
      002B55 8E                    8879 	.db #0x8e	; 142
      002B56 00                    8880 	.db #0x00	; 0
      002B57 8E                    8881 	.db #0x8e	; 142
      002B58 8E                    8882 	.db #0x8e	; 142
      002B59 00                    8883 	.db #0x00	; 0
      002B5A 00                    8884 	.db #0x00	; 0
      002B5B 00                    8885 	.db #0x00	; 0
      002B5C 8E                    8886 	.db #0x8e	; 142
      002B5D 8E                    8887 	.db #0x8e	; 142
      002B5E 00                    8888 	.db #0x00	; 0
      002B5F 8E                    8889 	.db #0x8e	; 142
      002B60 8E                    8890 	.db #0x8e	; 142
      002B61 8E                    8891 	.db #0x8e	; 142
      002B62 8E                    8892 	.db #0x8e	; 142
      002B63 8E                    8893 	.db #0x8e	; 142
      002B64 00                    8894 	.db #0x00	; 0
      002B65 00                    8895 	.db #0x00	; 0
      002B66 00                    8896 	.db #0x00	; 0
      002B67 00                    8897 	.db #0x00	; 0
      002B68 00                    8898 	.db #0x00	; 0
      002B69 00                    8899 	.db #0x00	; 0
      002B6A 8E                    8900 	.db #0x8e	; 142
      002B6B 8E                    8901 	.db #0x8e	; 142
      002B6C 00                    8902 	.db #0x00	; 0
      002B6D 00                    8903 	.db #0x00	; 0
      002B6E 00                    8904 	.db #0x00	; 0
      002B6F 8E                    8905 	.db #0x8e	; 142
      002B70 8E                    8906 	.db #0x8e	; 142
      002B71 00                    8907 	.db #0x00	; 0
      002B72 00                    8908 	.db #0x00	; 0
      002B73 00                    8909 	.db #0x00	; 0
      002B74 8E                    8910 	.db #0x8e	; 142
      002B75 8E                    8911 	.db #0x8e	; 142
      002B76 00                    8912 	.db #0x00	; 0
      002B77 8E                    8913 	.db #0x8e	; 142
      002B78 8E                    8914 	.db #0x8e	; 142
      002B79 8E                    8915 	.db #0x8e	; 142
      002B7A 8E                    8916 	.db #0x8e	; 142
      002B7B 8E                    8917 	.db #0x8e	; 142
      002B7C 8E                    8918 	.db #0x8e	; 142
      002B7D 8E                    8919 	.db #0x8e	; 142
      002B7E 00                    8920 	.db #0x00	; 0
      002B7F 8E                    8921 	.db #0x8e	; 142
      002B80 8E                    8922 	.db #0x8e	; 142
      002B81 00                    8923 	.db #0x00	; 0
      002B82 00                    8924 	.db #0x00	; 0
      002B83 00                    8925 	.db #0x00	; 0
      002B84 8E                    8926 	.db #0x8e	; 142
      002B85 00                    8927 	.db #0x00	; 0
      002B86 00                    8928 	.db #0x00	; 0
      002B87 00                    8929 	.db #0x00	; 0
      002B88 00                    8930 	.db #0x00	; 0
      002B89 00                    8931 	.db #0x00	; 0
      002B8A 8E                    8932 	.db #0x8e	; 142
      002B8B 8E                    8933 	.db #0x8e	; 142
      002B8C 00                    8934 	.db #0x00	; 0
      002B8D 00                    8935 	.db #0x00	; 0
      002B8E 00                    8936 	.db #0x00	; 0
      002B8F 8E                    8937 	.db #0x8e	; 142
      002B90 8E                    8938 	.db #0x8e	; 142
      002B91 8E                    8939 	.db #0x8e	; 142
      002B92 8E                    8940 	.db #0x8e	; 142
      002B93 8E                    8941 	.db #0x8e	; 142
      002B94 8E                    8942 	.db #0x8e	; 142
      002B95 8E                    8943 	.db #0x8e	; 142
      002B96 00                    8944 	.db #0x00	; 0
      002B97 8E                    8945 	.db #0x8e	; 142
      002B98 8E                    8946 	.db #0x8e	; 142
      002B99 00                    8947 	.db #0x00	; 0
      002B9A 00                    8948 	.db #0x00	; 0
      002B9B 00                    8949 	.db #0x00	; 0
      002B9C 8E                    8950 	.db #0x8e	; 142
      002B9D 8E                    8951 	.db #0x8e	; 142
      002B9E 00                    8952 	.db #0x00	; 0
      002B9F 8E                    8953 	.db #0x8e	; 142
      002BA0 8E                    8954 	.db #0x8e	; 142
      002BA1 00                    8955 	.db #0x00	; 0
      002BA2 00                    8956 	.db #0x00	; 0
      002BA3 00                    8957 	.db #0x00	; 0
      002BA4 8E                    8958 	.db #0x8e	; 142
      002BA5 00                    8959 	.db #0x00	; 0
      002BA6 00                    8960 	.db #0x00	; 0
      002BA7 00                    8961 	.db #0x00	; 0
      002BA8 00                    8962 	.db #0x00	; 0
      002BA9 00                    8963 	.db #0x00	; 0
      002BAA 8E                    8964 	.db #0x8e	; 142
      002BAB 8E                    8965 	.db #0x8e	; 142
      002BAC 00                    8966 	.db #0x00	; 0
      002BAD 00                    8967 	.db #0x00	; 0
      002BAE 00                    8968 	.db #0x00	; 0
      002BAF 8E                    8969 	.db #0x8e	; 142
      002BB0 8E                    8970 	.db #0x8e	; 142
      002BB1 00                    8971 	.db #0x00	; 0
      002BB2 00                    8972 	.db #0x00	; 0
      002BB3 00                    8973 	.db #0x00	; 0
      002BB4 8E                    8974 	.db #0x8e	; 142
      002BB5 8E                    8975 	.db #0x8e	; 142
      002BB6                       8976 ___str_10:
      002BB6 50 52 45 53 53 20 54  8977 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002BCC 00                    8978 	.db 0x00
      002BCD                       8979 ___str_11:
      002BCD 41 4E 44 52 45 42 41  8980 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002BE1 00                    8981 	.db 0x00
      002BE2                       8982 ___str_12:
      002BE2 76 2E 3F 2E 3F 2E 3F  8983 	.ascii "v.?.?.?"
      002BE9 00                    8984 	.db 0x00
                                   8985 ;src\main.c:90: void main() {
                                   8986 ;	---------------------------------
                                   8987 ; Function main
                                   8988 ; ---------------------------------
      002BEA                       8989 _main::
                                   8990 ;src\main.c:92: while(TRUE) {
      002BEA                       8991 00102$:
                                   8992 ;src\main.c:98: InitGame();
      002BEA CDrD9r26         [17] 8993 	call	_InitGame
                                   8994 ;src\main.c:101: }
      002BED 18 FB            [12] 8995 	jr	00102$
                                   8996 	.area _CODE
                                   8997 	.area _INITIALIZER
      000000                       8998 __xinit__gameOver:
      000000 00                    8999 	.db #0x00	; 0
      000001                       9000 __xinit__col:
      000001 00                    9001 	.db #0x00	; 0
      000002                       9002 __xinit__line:
      000002 00                    9003 	.db #0x00	; 0
      000003                       9004 __xinit__counter:
      000003 00                    9005 	.db #0x00	; 0
      000004                       9006 __xinit__blocksRemoved:
      000004 00 00                 9007 	.dw #0x0000
      000006                       9008 __xinit__level:
      000006 01                    9009 	.db #0x01	; 1
      000007                       9010 __xinit__newLevel:
      000007 00                    9011 	.db #0x00	; 0
      000008                       9012 __xinit__rndSeed:
      000008 00                    9013 	.db #0x00	; 0
                                   9014 	.area _CABS (ABS)
