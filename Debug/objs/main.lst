                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideHitSprite
                                     36 	.globl _DrawHitSprite
                                     37 	.globl _HideArrow
                                     38 	.globl _DrawArrow
                                     39 	.globl _DrawBackground
                                     40 	.globl _DrawScore
                                     41 	.globl _DrawColumn
                                     42 	.globl _DrawNumber
                                     43 	.globl _DrawString
                                     44 	.globl _DrawChar
                                     45 	.globl _GetRandomInInterval
                                     46 	.globl _GetRandom
                                     47 	.globl _InitRnd
                                     48 	.globl _Power
                                     49 	.globl _Wait
                                     50 	.globl _SNSMAT
                                     51 	.globl _GTTRIG
                                     52 	.globl _GTSTCK
                                     53 	.globl _BEEP
                                     54 	.globl _WRTPSG
                                     55 	.globl _GICINI
                                     56 	.globl _INIGRP
                                     57 	.globl _LDIRVM
                                     58 	.globl _FILVRM
                                     59 	.globl _WRTVRM
                                     60 	.globl _RDVRM
                                     61 	.globl _WRTVDP
                                     62 	.globl _ENASCR
                                     63 	.globl _DISSCR
                                     64 	.globl _d_value
                                     65 	.globl _d_line
                                     66 	.globl _d_col
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _bottomPiece
                                     81 	.globl _midPiece
                                     82 	.globl _topPiece
                                     83 	.globl _playfieldTemp
                                     84 	.globl _playfield
                                     85 	.globl _GETPNT
                                     86 	.globl _PUTPNT
                                     87 	.globl _REPCNT
                                     88 	.globl _SCNCNT
                                     89 	.globl _ATRBYT
                                     90 	.globl _CMASK
                                     91 	.globl _CLOC
                                     92 	.globl _BDRCLR
                                     93 	.globl _BAKCLR
                                     94 	.globl _FORCLR
                                     95 	.globl _TRGFLG
                                     96 	.globl _STATFL
                                     97 	.globl _MSX_vdp_regs
                                     98 	.globl _CNSDFG
                                     99 	.globl _CSRX
                                    100 	.globl _CSRY
                                    101 	.globl _MSX_modedata_screen3
                                    102 	.globl _MSX_modedata_screen2
                                    103 	.globl _MSX_modedata_screen1
                                    104 	.globl _MSX_modedata_screen0
                                    105 	.globl _CLIKSW
                                    106 	.globl _JIFFY
                                    107 	.globl _CLMLST
                                    108 	.globl _CRTCNT
                                    109 	.globl _LINLEN
                                    110 	.globl _LINL32
                                    111 	.globl _LINL40
                                    112 	.globl _MSX_charset
                                    113 	.globl _FONT
                                    114 	.globl _pieces
                                    115 	.globl _MSX_version
                                    116 	.globl _MSX_vdp_port_write
                                    117 	.globl _MSX_vdp_port_read
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 ;--------------------------------------------------------
                                    122 ; ram data
                                    123 ;--------------------------------------------------------
                                    124 	.area _DATA
                           000004   125 _MSX_charset	=	0x0004
                           00F3AE   126 _LINL40	=	0xf3ae
                           00F3AF   127 _LINL32	=	0xf3af
                           00F3B0   128 _LINLEN	=	0xf3b0
                           00F3B1   129 _CRTCNT	=	0xf3b1
                           00F3B1   130 _CLMLST	=	0xf3b1
                           00FC9E   131 _JIFFY	=	0xfc9e
                           00F3DB   132 _CLIKSW	=	0xf3db
                           00F3B3   133 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   134 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   135 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   136 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   137 _CSRY	=	0xf3dc
                           00F3DD   138 _CSRX	=	0xf3dd
                           00F3DE   139 _CNSDFG	=	0xf3de
                           00F3DF   140 _MSX_vdp_regs	=	0xf3df
                           00F3E7   141 _STATFL	=	0xf3e7
                           00F3E8   142 _TRGFLG	=	0xf3e8
                           00F3E9   143 _FORCLR	=	0xf3e9
                           00F3EA   144 _BAKCLR	=	0xf3ea
                           00F3EB   145 _BDRCLR	=	0xf3eb
                           00F92A   146 _CLOC	=	0xf92a
                           00F92C   147 _CMASK	=	0xf92c
                           00F3F2   148 _ATRBYT	=	0xf3f2
                           00F3F6   149 _SCNCNT	=	0xf3f6
                           00F3F7   150 _REPCNT	=	0xf3f7
                           00F3F8   151 _PUTPNT	=	0xf3f8
                           00F3FA   152 _GETPNT	=	0xf3fa
      000000                        153 _playfield::
      000000                        154 	.ds 72
      000048                        155 _playfieldTemp::
      000048                        156 	.ds 72
      000090                        157 _topPiece::
      000090                        158 	.ds 1
      000091                        159 _midPiece::
      000091                        160 	.ds 1
      000092                        161 _bottomPiece::
      000092                        162 	.ds 1
      000093                        163 _speed::
      000093                        164 	.ds 1
      000094                        165 _Rand_a::
      000094                        166 	.ds 1
      000095                        167 _Rand_b::
      000095                        168 	.ds 1
      000096                        169 _Rand_c::
      000096                        170 	.ds 1
      000097                        171 _Rand_x::
      000097                        172 	.ds 1
                                    173 ;--------------------------------------------------------
                                    174 ; ram data
                                    175 ;--------------------------------------------------------
                                    176 	.area _INITIALIZED
      000000                        177 _gameOver::
      000000                        178 	.ds 1
      000001                        179 _col::
      000001                        180 	.ds 1
      000002                        181 _line::
      000002                        182 	.ds 1
      000003                        183 _counter::
      000003                        184 	.ds 1
      000004                        185 _blocksRemoved::
      000004                        186 	.ds 2
      000006                        187 _level::
      000006                        188 	.ds 1
      000007                        189 _newLevel::
      000007                        190 	.ds 1
      000008                        191 _rndSeed::
      000008                        192 	.ds 1
      000009                        193 _d_col::
      000009                        194 	.ds 1
      00000A                        195 _d_line::
      00000A                        196 	.ds 1
      00000B                        197 _d_value::
      00000B                        198 	.ds 1
                                    199 ;--------------------------------------------------------
                                    200 ; absolute external ram data
                                    201 ;--------------------------------------------------------
                                    202 	.area _DABS (ABS)
                                    203 ;--------------------------------------------------------
                                    204 ; global & static initialisations
                                    205 ;--------------------------------------------------------
                                    206 	.area _HOME
                                    207 	.area _GSINIT
                                    208 	.area _GSFINAL
                                    209 	.area _GSINIT
                                    210 ;--------------------------------------------------------
                                    211 ; Home
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _HOME
                                    215 ;--------------------------------------------------------
                                    216 ; code
                                    217 ;--------------------------------------------------------
                                    218 	.area _CODE
                                    219 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    220 ;	---------------------------------
                                    221 ; Function Wait
                                    222 ; ---------------------------------
      000000                        223 _Wait::
                                    224 ;src\/Common.h:2: do {
      000000 D1               [10]  225 	pop	de
      000001 C1               [10]  226 	pop	bc
      000002 C5               [11]  227 	push	bc
      000003 D5               [11]  228 	push	de
      000004                        229 00104$:
                                    230 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  231 	ld	de, (_JIFFY)
                                    232 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        233 00101$:
      000008 2A 9E FC         [16]  234 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  235 	cp	a, a
      00000C ED 52            [15]  236 	sbc	hl, de
      00000E 28 F8            [12]  237 	jr	Z, 00101$
                                    238 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  239 	ld	e, c
      000011 50               [ 4]  240 	ld	d, b
      000012 0B               [ 6]  241 	dec	bc
      000013 7A               [ 4]  242 	ld	a, d
      000014 B3               [ 4]  243 	or	a, e
      000015 20 ED            [12]  244 	jr	NZ, 00104$
                                    245 ;src\/Common.h:8: }
      000017 C9               [10]  246 	ret
                           000006   247 _MSX_vdp_port_read	=	0x0006
                           000007   248 _MSX_vdp_port_write	=	0x0007
                           00002D   249 _MSX_version	=	0x002d
      000018                        250 _pieces:
      000018 04                     251 	.db #0x04	; 4
      000019 08                     252 	.db #0x08	; 8
      00001A 0C                     253 	.db #0x0c	; 12
      00001B 10                     254 	.db #0x10	; 16
      00001C 14                     255 	.db #0x14	; 20
                                    256 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    257 ;	---------------------------------
                                    258 ; Function Power
                                    259 ; ---------------------------------
      00001D                        260 _Power::
      00001D DD E5            [15]  261 	push	ix
      00001F DD 21 00 00      [14]  262 	ld	ix,#0
      000023 DD 39            [15]  263 	add	ix,sp
                                    264 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  265 	ld	c, 4 (ix)
      000028 06 00            [ 7]  266 	ld	b, #0x00
      00002A 69               [ 4]  267 	ld	l, c
      00002B 60               [ 4]  268 	ld	h, b
                                    269 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  270 	ld	a, 5 (ix)
      00002F B7               [ 4]  271 	or	a, a
      000030 20 05            [12]  272 	jr	NZ, 00111$
      000032 21 01 00         [10]  273 	ld	hl, #0x0001
      000035 18 16            [12]  274 	jr	00107$
                                    275 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        276 00111$:
      000037 1E 01            [ 7]  277 	ld	e, #0x01
      000039                        278 00105$:
      000039 7B               [ 4]  279 	ld	a, e
      00003A DD 96 05         [19]  280 	sub	a, 5 (ix)
      00003D 30 0E            [12]  281 	jr	NC, 00103$
                                    282 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  283 	push	bc
      000040 D5               [11]  284 	push	de
      000041 C5               [11]  285 	push	bc
      000042 E5               [11]  286 	push	hl
      000043 CDr00r00         [17]  287 	call	__mulint
      000046 F1               [10]  288 	pop	af
      000047 F1               [10]  289 	pop	af
      000048 D1               [10]  290 	pop	de
      000049 C1               [10]  291 	pop	bc
                                    292 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  293 	inc	e
      00004B 18 EC            [12]  294 	jr	00105$
      00004D                        295 00103$:
                                    296 ;src\/Math.h:10: return power;
      00004D                        297 00107$:
                                    298 ;src\/Math.h:11: }
      00004D DD E1            [14]  299 	pop	ix
      00004F C9               [10]  300 	ret
                                    301 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    302 ;	---------------------------------
                                    303 ; Function InitRnd
                                    304 ; ---------------------------------
      000050                        305 _InitRnd::
                                    306 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  307 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  308 	ld	hl, #2
      000056 39               [11]  309 	add	hl, sp
      000057 AE               [ 7]  310 	xor	a, (hl)
      000058 32r94r00         [13]  311 	ld	(_Rand_a+0), a
                                    312 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  313 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  314 	ld	hl, #3
      000061 39               [11]  315 	add	hl, sp
      000062 AE               [ 7]  316 	xor	a, (hl)
      000063 32r95r00         [13]  317 	ld	(_Rand_b+0), a
                                    318 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  319 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  320 	ld	hl, #4
      00006C 39               [11]  321 	add	hl, sp
      00006D AE               [ 7]  322 	xor	a, (hl)
      00006E 32r96r00         [13]  323 	ld	(_Rand_c+0), a
                                    324 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  325 	ld	hl, #_Rand_x
      000074 34               [11]  326 	inc	(hl)
                                    327 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  328 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  329 	ld	hl, #_Rand_c
      00007B AE               [ 7]  330 	xor	a, (hl)
      00007C 21r97r00         [10]  331 	ld	hl, #_Rand_x
      00007F AE               [ 7]  332 	xor	a, (hl)
      000080 32r94r00         [13]  333 	ld	(_Rand_a+0), a
                                    334 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  335 	ld	hl, #_Rand_b
      000086 7E               [ 7]  336 	ld	a, (hl)
      000087 FD 21r94r00      [14]  337 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  338 	add	a, 0 (iy)
      00008E 77               [ 7]  339 	ld	(hl), a
                                    340 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  341 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  342 	srl	a
      000094 21r96r00         [10]  343 	ld	hl, #_Rand_c
      000097 86               [ 7]  344 	add	a, (hl)
      000098 FD 21r94r00      [14]  345 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  346 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  347 	ld	(_Rand_c+0), a
                                    348 ;src\/Random.h:38: }
      0000A2 C9               [10]  349 	ret
                                    350 ;src\/Random.h:40: unsigned char GetRandom() {
                                    351 ;	---------------------------------
                                    352 ; Function GetRandom
                                    353 ; ---------------------------------
      0000A3                        354 _GetRandom::
                                    355 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  356 	ld	hl, #_Rand_x
      0000A6 34               [11]  357 	inc	(hl)
                                    358 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  359 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  360 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  361 	xor	a, (hl)
      0000AE 21r97r00         [10]  362 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  363 	xor	a, (hl)
      0000B2 32r94r00         [13]  364 	ld	(_Rand_a+0), a
                                    365 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  366 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  367 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  368 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  369 	add	a, 0 (iy)
      0000C0 77               [ 7]  370 	ld	(hl), a
                                    371 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  372 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  373 	srl	a
      0000C6 21r96r00         [10]  374 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  375 	add	a, (hl)
      0000CA FD 21r94r00      [14]  376 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  377 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  378 	ld	(_Rand_c+0), a
                                    379 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  380 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  381 	ld	l, a
                                    382 ;src\/Random.h:47: }
      0000D8 C9               [10]  383 	ret
                                    384 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    385 ;	---------------------------------
                                    386 ; Function GetRandomInInterval
                                    387 ; ---------------------------------
      0000D9                        388 _GetRandomInInterval::
                                    389 ;src\/Random.h:53: do {
      0000D9                        390 00101$:
                                    391 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  392 	call	_GetRandom
      0000DC 7D               [ 4]  393 	ld	a, l
      0000DD 21 03 00         [10]  394 	ld	hl, #3
      0000E0 39               [11]  395 	add	hl, sp
      0000E1 A6               [ 7]  396 	and	a, (hl)
      0000E2 4F               [ 4]  397 	ld	c, a
                                    398 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  399 	ld	hl, #2
      0000E6 39               [11]  400 	add	hl, sp
      0000E7 7E               [ 7]  401 	ld	a, (hl)
      0000E8 91               [ 4]  402 	sub	a, c
      0000E9 38 EE            [12]  403 	jr	C, 00101$
                                    404 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  405 	ld	l, c
                                    406 ;src\/Random.h:59: }
      0000EC C9               [10]  407 	ret
                                    408 ;src\/Graphics.h:4: void DrawChar(byte character, byte col, byte line) {
                                    409 ;	---------------------------------
                                    410 ; Function DrawChar
                                    411 ; ---------------------------------
      0000ED                        412 _DrawChar::
      0000ED DD E5            [15]  413 	push	ix
      0000EF DD 21 00 00      [14]  414 	ld	ix,#0
      0000F3 DD 39            [15]  415 	add	ix,sp
                                    416 ;src\/Graphics.h:5: WRTVRM(MSX_modedata_screen2.name + (line * 32) + col, character);
      0000F5 ED 4B C7 F3      [20]  417 	ld	bc, (#_MSX_modedata_screen2 + 0)
      0000F9 DD 6E 06         [19]  418 	ld	l, 6 (ix)
      0000FC 26 00            [ 7]  419 	ld	h, #0x00
      0000FE 29               [11]  420 	add	hl, hl
      0000FF 29               [11]  421 	add	hl, hl
      000100 29               [11]  422 	add	hl, hl
      000101 29               [11]  423 	add	hl, hl
      000102 29               [11]  424 	add	hl, hl
      000103 09               [11]  425 	add	hl, bc
      000104 DD 4E 05         [19]  426 	ld	c, 5 (ix)
      000107 06 00            [ 7]  427 	ld	b, #0x00
      000109 09               [11]  428 	add	hl, bc
      00010A DD 7E 04         [19]  429 	ld	a, 4 (ix)
      00010D F5               [11]  430 	push	af
      00010E 33               [ 6]  431 	inc	sp
      00010F E5               [11]  432 	push	hl
      000110 CDr00r00         [17]  433 	call	_WRTVRM
      000113 F1               [10]  434 	pop	af
      000114 33               [ 6]  435 	inc	sp
                                    436 ;src\/Graphics.h:6: }
      000115 DD E1            [14]  437 	pop	ix
      000117 C9               [10]  438 	ret
      000118                        439 _FONT:
      000118 00                     440 	.db #0x00	; 0
      000119 00                     441 	.db #0x00	; 0
      00011A 00                     442 	.db #0x00	; 0
      00011B 00                     443 	.db #0x00	; 0
      00011C 00                     444 	.db #0x00	; 0
      00011D 00                     445 	.db #0x00	; 0
      00011E 00                     446 	.db #0x00	; 0
      00011F 00                     447 	.db #0x00	; 0
      000120 30                     448 	.db #0x30	; 48	'0'
      000121 78                     449 	.db #0x78	; 120	'x'
      000122 78                     450 	.db #0x78	; 120	'x'
      000123 30                     451 	.db #0x30	; 48	'0'
      000124 30                     452 	.db #0x30	; 48	'0'
      000125 00                     453 	.db #0x00	; 0
      000126 30                     454 	.db #0x30	; 48	'0'
      000127 00                     455 	.db #0x00	; 0
      000128 6C                     456 	.db #0x6c	; 108	'l'
      000129 6C                     457 	.db #0x6c	; 108	'l'
      00012A 6C                     458 	.db #0x6c	; 108	'l'
      00012B 00                     459 	.db #0x00	; 0
      00012C 00                     460 	.db #0x00	; 0
      00012D 00                     461 	.db #0x00	; 0
      00012E 00                     462 	.db #0x00	; 0
      00012F 00                     463 	.db #0x00	; 0
      000130 6C                     464 	.db #0x6c	; 108	'l'
      000131 6C                     465 	.db #0x6c	; 108	'l'
      000132 FE                     466 	.db #0xfe	; 254
      000133 6C                     467 	.db #0x6c	; 108	'l'
      000134 FE                     468 	.db #0xfe	; 254
      000135 6C                     469 	.db #0x6c	; 108	'l'
      000136 6C                     470 	.db #0x6c	; 108	'l'
      000137 00                     471 	.db #0x00	; 0
      000138 30                     472 	.db #0x30	; 48	'0'
      000139 7C                     473 	.db #0x7c	; 124
      00013A C0                     474 	.db #0xc0	; 192
      00013B 78                     475 	.db #0x78	; 120	'x'
      00013C 0C                     476 	.db #0x0c	; 12
      00013D F8                     477 	.db #0xf8	; 248
      00013E 30                     478 	.db #0x30	; 48	'0'
      00013F 00                     479 	.db #0x00	; 0
      000140 00                     480 	.db #0x00	; 0
      000141 C6                     481 	.db #0xc6	; 198
      000142 CC                     482 	.db #0xcc	; 204
      000143 18                     483 	.db #0x18	; 24
      000144 30                     484 	.db #0x30	; 48	'0'
      000145 66                     485 	.db #0x66	; 102	'f'
      000146 C6                     486 	.db #0xc6	; 198
      000147 00                     487 	.db #0x00	; 0
      000148 38                     488 	.db #0x38	; 56	'8'
      000149 6C                     489 	.db #0x6c	; 108	'l'
      00014A 38                     490 	.db #0x38	; 56	'8'
      00014B 76                     491 	.db #0x76	; 118	'v'
      00014C DC                     492 	.db #0xdc	; 220
      00014D CC                     493 	.db #0xcc	; 204
      00014E 76                     494 	.db #0x76	; 118	'v'
      00014F 00                     495 	.db #0x00	; 0
      000150 60                     496 	.db #0x60	; 96
      000151 60                     497 	.db #0x60	; 96
      000152 C0                     498 	.db #0xc0	; 192
      000153 00                     499 	.db #0x00	; 0
      000154 00                     500 	.db #0x00	; 0
      000155 00                     501 	.db #0x00	; 0
      000156 00                     502 	.db #0x00	; 0
      000157 00                     503 	.db #0x00	; 0
      000158 18                     504 	.db #0x18	; 24
      000159 30                     505 	.db #0x30	; 48	'0'
      00015A 60                     506 	.db #0x60	; 96
      00015B 60                     507 	.db #0x60	; 96
      00015C 60                     508 	.db #0x60	; 96
      00015D 30                     509 	.db #0x30	; 48	'0'
      00015E 18                     510 	.db #0x18	; 24
      00015F 00                     511 	.db #0x00	; 0
      000160 60                     512 	.db #0x60	; 96
      000161 30                     513 	.db #0x30	; 48	'0'
      000162 18                     514 	.db #0x18	; 24
      000163 18                     515 	.db #0x18	; 24
      000164 18                     516 	.db #0x18	; 24
      000165 30                     517 	.db #0x30	; 48	'0'
      000166 60                     518 	.db #0x60	; 96
      000167 00                     519 	.db #0x00	; 0
      000168 00                     520 	.db #0x00	; 0
      000169 66                     521 	.db #0x66	; 102	'f'
      00016A 3C                     522 	.db #0x3c	; 60
      00016B FF                     523 	.db #0xff	; 255
      00016C 3C                     524 	.db #0x3c	; 60
      00016D 66                     525 	.db #0x66	; 102	'f'
      00016E 00                     526 	.db #0x00	; 0
      00016F 00                     527 	.db #0x00	; 0
      000170 00                     528 	.db #0x00	; 0
      000171 30                     529 	.db #0x30	; 48	'0'
      000172 30                     530 	.db #0x30	; 48	'0'
      000173 FC                     531 	.db #0xfc	; 252
      000174 30                     532 	.db #0x30	; 48	'0'
      000175 30                     533 	.db #0x30	; 48	'0'
      000176 00                     534 	.db #0x00	; 0
      000177 00                     535 	.db #0x00	; 0
      000178 00                     536 	.db #0x00	; 0
      000179 00                     537 	.db #0x00	; 0
      00017A 00                     538 	.db #0x00	; 0
      00017B 00                     539 	.db #0x00	; 0
      00017C 00                     540 	.db #0x00	; 0
      00017D 30                     541 	.db #0x30	; 48	'0'
      00017E 30                     542 	.db #0x30	; 48	'0'
      00017F 60                     543 	.db #0x60	; 96
      000180 00                     544 	.db #0x00	; 0
      000181 00                     545 	.db #0x00	; 0
      000182 00                     546 	.db #0x00	; 0
      000183 FC                     547 	.db #0xfc	; 252
      000184 00                     548 	.db #0x00	; 0
      000185 00                     549 	.db #0x00	; 0
      000186 00                     550 	.db #0x00	; 0
      000187 00                     551 	.db #0x00	; 0
      000188 00                     552 	.db #0x00	; 0
      000189 00                     553 	.db #0x00	; 0
      00018A 00                     554 	.db #0x00	; 0
      00018B 00                     555 	.db #0x00	; 0
      00018C 00                     556 	.db #0x00	; 0
      00018D 30                     557 	.db #0x30	; 48	'0'
      00018E 30                     558 	.db #0x30	; 48	'0'
      00018F 00                     559 	.db #0x00	; 0
      000190 06                     560 	.db #0x06	; 6
      000191 0C                     561 	.db #0x0c	; 12
      000192 18                     562 	.db #0x18	; 24
      000193 30                     563 	.db #0x30	; 48	'0'
      000194 60                     564 	.db #0x60	; 96
      000195 C0                     565 	.db #0xc0	; 192
      000196 80                     566 	.db #0x80	; 128
      000197 00                     567 	.db #0x00	; 0
      000198 7C                     568 	.db #0x7c	; 124
      000199 C6                     569 	.db #0xc6	; 198
      00019A CE                     570 	.db #0xce	; 206
      00019B DE                     571 	.db #0xde	; 222
      00019C F6                     572 	.db #0xf6	; 246
      00019D E6                     573 	.db #0xe6	; 230
      00019E 7C                     574 	.db #0x7c	; 124
      00019F 00                     575 	.db #0x00	; 0
      0001A0 30                     576 	.db #0x30	; 48	'0'
      0001A1 70                     577 	.db #0x70	; 112	'p'
      0001A2 30                     578 	.db #0x30	; 48	'0'
      0001A3 30                     579 	.db #0x30	; 48	'0'
      0001A4 30                     580 	.db #0x30	; 48	'0'
      0001A5 30                     581 	.db #0x30	; 48	'0'
      0001A6 FC                     582 	.db #0xfc	; 252
      0001A7 00                     583 	.db #0x00	; 0
      0001A8 78                     584 	.db #0x78	; 120	'x'
      0001A9 CC                     585 	.db #0xcc	; 204
      0001AA 0C                     586 	.db #0x0c	; 12
      0001AB 38                     587 	.db #0x38	; 56	'8'
      0001AC 60                     588 	.db #0x60	; 96
      0001AD C4                     589 	.db #0xc4	; 196
      0001AE FC                     590 	.db #0xfc	; 252
      0001AF 00                     591 	.db #0x00	; 0
      0001B0 78                     592 	.db #0x78	; 120	'x'
      0001B1 CC                     593 	.db #0xcc	; 204
      0001B2 0C                     594 	.db #0x0c	; 12
      0001B3 38                     595 	.db #0x38	; 56	'8'
      0001B4 0C                     596 	.db #0x0c	; 12
      0001B5 CC                     597 	.db #0xcc	; 204
      0001B6 78                     598 	.db #0x78	; 120	'x'
      0001B7 00                     599 	.db #0x00	; 0
      0001B8 1C                     600 	.db #0x1c	; 28
      0001B9 3C                     601 	.db #0x3c	; 60
      0001BA 6C                     602 	.db #0x6c	; 108	'l'
      0001BB CC                     603 	.db #0xcc	; 204
      0001BC FE                     604 	.db #0xfe	; 254
      0001BD 0C                     605 	.db #0x0c	; 12
      0001BE 1E                     606 	.db #0x1e	; 30
      0001BF 00                     607 	.db #0x00	; 0
      0001C0 FC                     608 	.db #0xfc	; 252
      0001C1 C0                     609 	.db #0xc0	; 192
      0001C2 F8                     610 	.db #0xf8	; 248
      0001C3 0C                     611 	.db #0x0c	; 12
      0001C4 0C                     612 	.db #0x0c	; 12
      0001C5 CC                     613 	.db #0xcc	; 204
      0001C6 78                     614 	.db #0x78	; 120	'x'
      0001C7 00                     615 	.db #0x00	; 0
      0001C8 38                     616 	.db #0x38	; 56	'8'
      0001C9 60                     617 	.db #0x60	; 96
      0001CA C0                     618 	.db #0xc0	; 192
      0001CB F8                     619 	.db #0xf8	; 248
      0001CC CC                     620 	.db #0xcc	; 204
      0001CD CC                     621 	.db #0xcc	; 204
      0001CE 78                     622 	.db #0x78	; 120	'x'
      0001CF 00                     623 	.db #0x00	; 0
      0001D0 FC                     624 	.db #0xfc	; 252
      0001D1 CC                     625 	.db #0xcc	; 204
      0001D2 0C                     626 	.db #0x0c	; 12
      0001D3 18                     627 	.db #0x18	; 24
      0001D4 30                     628 	.db #0x30	; 48	'0'
      0001D5 30                     629 	.db #0x30	; 48	'0'
      0001D6 30                     630 	.db #0x30	; 48	'0'
      0001D7 00                     631 	.db #0x00	; 0
      0001D8 78                     632 	.db #0x78	; 120	'x'
      0001D9 CC                     633 	.db #0xcc	; 204
      0001DA CC                     634 	.db #0xcc	; 204
      0001DB 78                     635 	.db #0x78	; 120	'x'
      0001DC CC                     636 	.db #0xcc	; 204
      0001DD CC                     637 	.db #0xcc	; 204
      0001DE 78                     638 	.db #0x78	; 120	'x'
      0001DF 00                     639 	.db #0x00	; 0
      0001E0 78                     640 	.db #0x78	; 120	'x'
      0001E1 CC                     641 	.db #0xcc	; 204
      0001E2 CC                     642 	.db #0xcc	; 204
      0001E3 7C                     643 	.db #0x7c	; 124
      0001E4 0C                     644 	.db #0x0c	; 12
      0001E5 18                     645 	.db #0x18	; 24
      0001E6 70                     646 	.db #0x70	; 112	'p'
      0001E7 00                     647 	.db #0x00	; 0
      0001E8 00                     648 	.db #0x00	; 0
      0001E9 30                     649 	.db #0x30	; 48	'0'
      0001EA 30                     650 	.db #0x30	; 48	'0'
      0001EB 00                     651 	.db #0x00	; 0
      0001EC 00                     652 	.db #0x00	; 0
      0001ED 30                     653 	.db #0x30	; 48	'0'
      0001EE 30                     654 	.db #0x30	; 48	'0'
      0001EF 00                     655 	.db #0x00	; 0
      0001F0 00                     656 	.db #0x00	; 0
      0001F1 30                     657 	.db #0x30	; 48	'0'
      0001F2 30                     658 	.db #0x30	; 48	'0'
      0001F3 00                     659 	.db #0x00	; 0
      0001F4 30                     660 	.db #0x30	; 48	'0'
      0001F5 30                     661 	.db #0x30	; 48	'0'
      0001F6 60                     662 	.db #0x60	; 96
      0001F7 00                     663 	.db #0x00	; 0
      0001F8 18                     664 	.db #0x18	; 24
      0001F9 30                     665 	.db #0x30	; 48	'0'
      0001FA 60                     666 	.db #0x60	; 96
      0001FB C0                     667 	.db #0xc0	; 192
      0001FC 60                     668 	.db #0x60	; 96
      0001FD 30                     669 	.db #0x30	; 48	'0'
      0001FE 18                     670 	.db #0x18	; 24
      0001FF 00                     671 	.db #0x00	; 0
      000200 00                     672 	.db #0x00	; 0
      000201 00                     673 	.db #0x00	; 0
      000202 FC                     674 	.db #0xfc	; 252
      000203 00                     675 	.db #0x00	; 0
      000204 00                     676 	.db #0x00	; 0
      000205 FC                     677 	.db #0xfc	; 252
      000206 00                     678 	.db #0x00	; 0
      000207 00                     679 	.db #0x00	; 0
      000208 60                     680 	.db #0x60	; 96
      000209 30                     681 	.db #0x30	; 48	'0'
      00020A 18                     682 	.db #0x18	; 24
      00020B 0C                     683 	.db #0x0c	; 12
      00020C 18                     684 	.db #0x18	; 24
      00020D 30                     685 	.db #0x30	; 48	'0'
      00020E 60                     686 	.db #0x60	; 96
      00020F 00                     687 	.db #0x00	; 0
      000210 78                     688 	.db #0x78	; 120	'x'
      000211 CC                     689 	.db #0xcc	; 204
      000212 0C                     690 	.db #0x0c	; 12
      000213 18                     691 	.db #0x18	; 24
      000214 30                     692 	.db #0x30	; 48	'0'
      000215 00                     693 	.db #0x00	; 0
      000216 30                     694 	.db #0x30	; 48	'0'
      000217 00                     695 	.db #0x00	; 0
      000218 7C                     696 	.db #0x7c	; 124
      000219 C6                     697 	.db #0xc6	; 198
      00021A DE                     698 	.db #0xde	; 222
      00021B DE                     699 	.db #0xde	; 222
      00021C DE                     700 	.db #0xde	; 222
      00021D C0                     701 	.db #0xc0	; 192
      00021E 78                     702 	.db #0x78	; 120	'x'
      00021F 00                     703 	.db #0x00	; 0
      000220 30                     704 	.db #0x30	; 48	'0'
      000221 78                     705 	.db #0x78	; 120	'x'
      000222 CC                     706 	.db #0xcc	; 204
      000223 CC                     707 	.db #0xcc	; 204
      000224 FC                     708 	.db #0xfc	; 252
      000225 CC                     709 	.db #0xcc	; 204
      000226 CC                     710 	.db #0xcc	; 204
      000227 00                     711 	.db #0x00	; 0
      000228 FC                     712 	.db #0xfc	; 252
      000229 66                     713 	.db #0x66	; 102	'f'
      00022A 66                     714 	.db #0x66	; 102	'f'
      00022B 7C                     715 	.db #0x7c	; 124
      00022C 66                     716 	.db #0x66	; 102	'f'
      00022D 66                     717 	.db #0x66	; 102	'f'
      00022E FC                     718 	.db #0xfc	; 252
      00022F 00                     719 	.db #0x00	; 0
      000230 3C                     720 	.db #0x3c	; 60
      000231 66                     721 	.db #0x66	; 102	'f'
      000232 C0                     722 	.db #0xc0	; 192
      000233 C0                     723 	.db #0xc0	; 192
      000234 C0                     724 	.db #0xc0	; 192
      000235 66                     725 	.db #0x66	; 102	'f'
      000236 3C                     726 	.db #0x3c	; 60
      000237 00                     727 	.db #0x00	; 0
      000238 F8                     728 	.db #0xf8	; 248
      000239 6C                     729 	.db #0x6c	; 108	'l'
      00023A 66                     730 	.db #0x66	; 102	'f'
      00023B 66                     731 	.db #0x66	; 102	'f'
      00023C 66                     732 	.db #0x66	; 102	'f'
      00023D 6C                     733 	.db #0x6c	; 108	'l'
      00023E F8                     734 	.db #0xf8	; 248
      00023F 00                     735 	.db #0x00	; 0
      000240 FE                     736 	.db #0xfe	; 254
      000241 62                     737 	.db #0x62	; 98	'b'
      000242 68                     738 	.db #0x68	; 104	'h'
      000243 78                     739 	.db #0x78	; 120	'x'
      000244 68                     740 	.db #0x68	; 104	'h'
      000245 62                     741 	.db #0x62	; 98	'b'
      000246 FE                     742 	.db #0xfe	; 254
      000247 00                     743 	.db #0x00	; 0
      000248 FE                     744 	.db #0xfe	; 254
      000249 62                     745 	.db #0x62	; 98	'b'
      00024A 68                     746 	.db #0x68	; 104	'h'
      00024B 78                     747 	.db #0x78	; 120	'x'
      00024C 68                     748 	.db #0x68	; 104	'h'
      00024D 60                     749 	.db #0x60	; 96
      00024E F0                     750 	.db #0xf0	; 240
      00024F 00                     751 	.db #0x00	; 0
      000250 3C                     752 	.db #0x3c	; 60
      000251 66                     753 	.db #0x66	; 102	'f'
      000252 C0                     754 	.db #0xc0	; 192
      000253 C0                     755 	.db #0xc0	; 192
      000254 CE                     756 	.db #0xce	; 206
      000255 66                     757 	.db #0x66	; 102	'f'
      000256 3E                     758 	.db #0x3e	; 62
      000257 00                     759 	.db #0x00	; 0
      000258 CC                     760 	.db #0xcc	; 204
      000259 CC                     761 	.db #0xcc	; 204
      00025A CC                     762 	.db #0xcc	; 204
      00025B FC                     763 	.db #0xfc	; 252
      00025C CC                     764 	.db #0xcc	; 204
      00025D CC                     765 	.db #0xcc	; 204
      00025E CC                     766 	.db #0xcc	; 204
      00025F 00                     767 	.db #0x00	; 0
      000260 78                     768 	.db #0x78	; 120	'x'
      000261 30                     769 	.db #0x30	; 48	'0'
      000262 30                     770 	.db #0x30	; 48	'0'
      000263 30                     771 	.db #0x30	; 48	'0'
      000264 30                     772 	.db #0x30	; 48	'0'
      000265 30                     773 	.db #0x30	; 48	'0'
      000266 78                     774 	.db #0x78	; 120	'x'
      000267 00                     775 	.db #0x00	; 0
      000268 1E                     776 	.db #0x1e	; 30
      000269 0C                     777 	.db #0x0c	; 12
      00026A 0C                     778 	.db #0x0c	; 12
      00026B 0C                     779 	.db #0x0c	; 12
      00026C CC                     780 	.db #0xcc	; 204
      00026D CC                     781 	.db #0xcc	; 204
      00026E 78                     782 	.db #0x78	; 120	'x'
      00026F 00                     783 	.db #0x00	; 0
      000270 E6                     784 	.db #0xe6	; 230
      000271 66                     785 	.db #0x66	; 102	'f'
      000272 6C                     786 	.db #0x6c	; 108	'l'
      000273 78                     787 	.db #0x78	; 120	'x'
      000274 6C                     788 	.db #0x6c	; 108	'l'
      000275 66                     789 	.db #0x66	; 102	'f'
      000276 E6                     790 	.db #0xe6	; 230
      000277 00                     791 	.db #0x00	; 0
      000278 F0                     792 	.db #0xf0	; 240
      000279 60                     793 	.db #0x60	; 96
      00027A 60                     794 	.db #0x60	; 96
      00027B 60                     795 	.db #0x60	; 96
      00027C 62                     796 	.db #0x62	; 98	'b'
      00027D 66                     797 	.db #0x66	; 102	'f'
      00027E FE                     798 	.db #0xfe	; 254
      00027F 00                     799 	.db #0x00	; 0
      000280 C6                     800 	.db #0xc6	; 198
      000281 EE                     801 	.db #0xee	; 238
      000282 FE                     802 	.db #0xfe	; 254
      000283 FE                     803 	.db #0xfe	; 254
      000284 D6                     804 	.db #0xd6	; 214
      000285 C6                     805 	.db #0xc6	; 198
      000286 C6                     806 	.db #0xc6	; 198
      000287 00                     807 	.db #0x00	; 0
      000288 C6                     808 	.db #0xc6	; 198
      000289 E6                     809 	.db #0xe6	; 230
      00028A F6                     810 	.db #0xf6	; 246
      00028B DE                     811 	.db #0xde	; 222
      00028C CE                     812 	.db #0xce	; 206
      00028D C6                     813 	.db #0xc6	; 198
      00028E C6                     814 	.db #0xc6	; 198
      00028F 00                     815 	.db #0x00	; 0
      000290 38                     816 	.db #0x38	; 56	'8'
      000291 6C                     817 	.db #0x6c	; 108	'l'
      000292 C6                     818 	.db #0xc6	; 198
      000293 C6                     819 	.db #0xc6	; 198
      000294 C6                     820 	.db #0xc6	; 198
      000295 6C                     821 	.db #0x6c	; 108	'l'
      000296 38                     822 	.db #0x38	; 56	'8'
      000297 00                     823 	.db #0x00	; 0
      000298 FC                     824 	.db #0xfc	; 252
      000299 66                     825 	.db #0x66	; 102	'f'
      00029A 66                     826 	.db #0x66	; 102	'f'
      00029B 7C                     827 	.db #0x7c	; 124
      00029C 60                     828 	.db #0x60	; 96
      00029D 60                     829 	.db #0x60	; 96
      00029E F0                     830 	.db #0xf0	; 240
      00029F 00                     831 	.db #0x00	; 0
      0002A0 78                     832 	.db #0x78	; 120	'x'
      0002A1 CC                     833 	.db #0xcc	; 204
      0002A2 CC                     834 	.db #0xcc	; 204
      0002A3 CC                     835 	.db #0xcc	; 204
      0002A4 DC                     836 	.db #0xdc	; 220
      0002A5 78                     837 	.db #0x78	; 120	'x'
      0002A6 1C                     838 	.db #0x1c	; 28
      0002A7 00                     839 	.db #0x00	; 0
      0002A8 FC                     840 	.db #0xfc	; 252
      0002A9 66                     841 	.db #0x66	; 102	'f'
      0002AA 66                     842 	.db #0x66	; 102	'f'
      0002AB 7C                     843 	.db #0x7c	; 124
      0002AC 6C                     844 	.db #0x6c	; 108	'l'
      0002AD 66                     845 	.db #0x66	; 102	'f'
      0002AE E6                     846 	.db #0xe6	; 230
      0002AF 00                     847 	.db #0x00	; 0
      0002B0 78                     848 	.db #0x78	; 120	'x'
      0002B1 CC                     849 	.db #0xcc	; 204
      0002B2 E0                     850 	.db #0xe0	; 224
      0002B3 70                     851 	.db #0x70	; 112	'p'
      0002B4 1C                     852 	.db #0x1c	; 28
      0002B5 CC                     853 	.db #0xcc	; 204
      0002B6 78                     854 	.db #0x78	; 120	'x'
      0002B7 00                     855 	.db #0x00	; 0
      0002B8 FC                     856 	.db #0xfc	; 252
      0002B9 B4                     857 	.db #0xb4	; 180
      0002BA 30                     858 	.db #0x30	; 48	'0'
      0002BB 30                     859 	.db #0x30	; 48	'0'
      0002BC 30                     860 	.db #0x30	; 48	'0'
      0002BD 30                     861 	.db #0x30	; 48	'0'
      0002BE 78                     862 	.db #0x78	; 120	'x'
      0002BF 00                     863 	.db #0x00	; 0
      0002C0 CC                     864 	.db #0xcc	; 204
      0002C1 CC                     865 	.db #0xcc	; 204
      0002C2 CC                     866 	.db #0xcc	; 204
      0002C3 CC                     867 	.db #0xcc	; 204
      0002C4 CC                     868 	.db #0xcc	; 204
      0002C5 CC                     869 	.db #0xcc	; 204
      0002C6 FC                     870 	.db #0xfc	; 252
      0002C7 00                     871 	.db #0x00	; 0
      0002C8 CC                     872 	.db #0xcc	; 204
      0002C9 CC                     873 	.db #0xcc	; 204
      0002CA CC                     874 	.db #0xcc	; 204
      0002CB CC                     875 	.db #0xcc	; 204
      0002CC CC                     876 	.db #0xcc	; 204
      0002CD 78                     877 	.db #0x78	; 120	'x'
      0002CE 30                     878 	.db #0x30	; 48	'0'
      0002CF 00                     879 	.db #0x00	; 0
      0002D0 C6                     880 	.db #0xc6	; 198
      0002D1 C6                     881 	.db #0xc6	; 198
      0002D2 C6                     882 	.db #0xc6	; 198
      0002D3 D6                     883 	.db #0xd6	; 214
      0002D4 FE                     884 	.db #0xfe	; 254
      0002D5 EE                     885 	.db #0xee	; 238
      0002D6 C6                     886 	.db #0xc6	; 198
      0002D7 00                     887 	.db #0x00	; 0
      0002D8 C6                     888 	.db #0xc6	; 198
      0002D9 C6                     889 	.db #0xc6	; 198
      0002DA 6C                     890 	.db #0x6c	; 108	'l'
      0002DB 38                     891 	.db #0x38	; 56	'8'
      0002DC 38                     892 	.db #0x38	; 56	'8'
      0002DD 6C                     893 	.db #0x6c	; 108	'l'
      0002DE C6                     894 	.db #0xc6	; 198
      0002DF 00                     895 	.db #0x00	; 0
      0002E0 CC                     896 	.db #0xcc	; 204
      0002E1 CC                     897 	.db #0xcc	; 204
      0002E2 CC                     898 	.db #0xcc	; 204
      0002E3 78                     899 	.db #0x78	; 120	'x'
      0002E4 30                     900 	.db #0x30	; 48	'0'
      0002E5 30                     901 	.db #0x30	; 48	'0'
      0002E6 78                     902 	.db #0x78	; 120	'x'
      0002E7 00                     903 	.db #0x00	; 0
      0002E8 FE                     904 	.db #0xfe	; 254
      0002E9 C6                     905 	.db #0xc6	; 198
      0002EA 8C                     906 	.db #0x8c	; 140
      0002EB 18                     907 	.db #0x18	; 24
      0002EC 32                     908 	.db #0x32	; 50	'2'
      0002ED 66                     909 	.db #0x66	; 102	'f'
      0002EE FE                     910 	.db #0xfe	; 254
      0002EF 00                     911 	.db #0x00	; 0
      0002F0 78                     912 	.db #0x78	; 120	'x'
      0002F1 60                     913 	.db #0x60	; 96
      0002F2 60                     914 	.db #0x60	; 96
      0002F3 60                     915 	.db #0x60	; 96
      0002F4 60                     916 	.db #0x60	; 96
      0002F5 60                     917 	.db #0x60	; 96
      0002F6 78                     918 	.db #0x78	; 120	'x'
      0002F7 00                     919 	.db #0x00	; 0
      0002F8 C0                     920 	.db #0xc0	; 192
      0002F9 60                     921 	.db #0x60	; 96
      0002FA 30                     922 	.db #0x30	; 48	'0'
      0002FB 18                     923 	.db #0x18	; 24
      0002FC 0C                     924 	.db #0x0c	; 12
      0002FD 06                     925 	.db #0x06	; 6
      0002FE 02                     926 	.db #0x02	; 2
      0002FF 00                     927 	.db #0x00	; 0
      000300 78                     928 	.db #0x78	; 120	'x'
      000301 18                     929 	.db #0x18	; 24
      000302 18                     930 	.db #0x18	; 24
      000303 18                     931 	.db #0x18	; 24
      000304 18                     932 	.db #0x18	; 24
      000305 18                     933 	.db #0x18	; 24
      000306 78                     934 	.db #0x78	; 120	'x'
      000307 00                     935 	.db #0x00	; 0
      000308 10                     936 	.db #0x10	; 16
      000309 38                     937 	.db #0x38	; 56	'8'
      00030A 6C                     938 	.db #0x6c	; 108	'l'
      00030B C6                     939 	.db #0xc6	; 198
      00030C 00                     940 	.db #0x00	; 0
      00030D 00                     941 	.db #0x00	; 0
      00030E 00                     942 	.db #0x00	; 0
      00030F 00                     943 	.db #0x00	; 0
      000310 00                     944 	.db #0x00	; 0
      000311 00                     945 	.db #0x00	; 0
      000312 00                     946 	.db #0x00	; 0
      000313 00                     947 	.db #0x00	; 0
      000314 00                     948 	.db #0x00	; 0
      000315 00                     949 	.db #0x00	; 0
      000316 00                     950 	.db #0x00	; 0
      000317 FF                     951 	.db #0xff	; 255
      000318 30                     952 	.db #0x30	; 48	'0'
      000319 30                     953 	.db #0x30	; 48	'0'
      00031A 18                     954 	.db #0x18	; 24
      00031B 00                     955 	.db #0x00	; 0
      00031C 00                     956 	.db #0x00	; 0
      00031D 00                     957 	.db #0x00	; 0
      00031E 00                     958 	.db #0x00	; 0
      00031F 00                     959 	.db #0x00	; 0
      000320 00                     960 	.db #0x00	; 0
      000321 00                     961 	.db #0x00	; 0
      000322 78                     962 	.db #0x78	; 120	'x'
      000323 0C                     963 	.db #0x0c	; 12
      000324 7C                     964 	.db #0x7c	; 124
      000325 CC                     965 	.db #0xcc	; 204
      000326 76                     966 	.db #0x76	; 118	'v'
      000327 00                     967 	.db #0x00	; 0
      000328 E0                     968 	.db #0xe0	; 224
      000329 60                     969 	.db #0x60	; 96
      00032A 60                     970 	.db #0x60	; 96
      00032B 7C                     971 	.db #0x7c	; 124
      00032C 66                     972 	.db #0x66	; 102	'f'
      00032D 66                     973 	.db #0x66	; 102	'f'
      00032E DC                     974 	.db #0xdc	; 220
      00032F 00                     975 	.db #0x00	; 0
      000330 00                     976 	.db #0x00	; 0
      000331 00                     977 	.db #0x00	; 0
      000332 78                     978 	.db #0x78	; 120	'x'
      000333 CC                     979 	.db #0xcc	; 204
      000334 C0                     980 	.db #0xc0	; 192
      000335 CC                     981 	.db #0xcc	; 204
      000336 78                     982 	.db #0x78	; 120	'x'
      000337 00                     983 	.db #0x00	; 0
      000338 1C                     984 	.db #0x1c	; 28
      000339 0C                     985 	.db #0x0c	; 12
      00033A 0C                     986 	.db #0x0c	; 12
      00033B 7C                     987 	.db #0x7c	; 124
      00033C CC                     988 	.db #0xcc	; 204
      00033D CC                     989 	.db #0xcc	; 204
      00033E 76                     990 	.db #0x76	; 118	'v'
      00033F 00                     991 	.db #0x00	; 0
      000340 00                     992 	.db #0x00	; 0
      000341 00                     993 	.db #0x00	; 0
      000342 78                     994 	.db #0x78	; 120	'x'
      000343 CC                     995 	.db #0xcc	; 204
      000344 FC                     996 	.db #0xfc	; 252
      000345 C0                     997 	.db #0xc0	; 192
      000346 78                     998 	.db #0x78	; 120	'x'
      000347 00                     999 	.db #0x00	; 0
      000348 38                    1000 	.db #0x38	; 56	'8'
      000349 6C                    1001 	.db #0x6c	; 108	'l'
      00034A 60                    1002 	.db #0x60	; 96
      00034B F0                    1003 	.db #0xf0	; 240
      00034C 60                    1004 	.db #0x60	; 96
      00034D 60                    1005 	.db #0x60	; 96
      00034E F0                    1006 	.db #0xf0	; 240
      00034F 00                    1007 	.db #0x00	; 0
      000350 00                    1008 	.db #0x00	; 0
      000351 00                    1009 	.db #0x00	; 0
      000352 76                    1010 	.db #0x76	; 118	'v'
      000353 CC                    1011 	.db #0xcc	; 204
      000354 CC                    1012 	.db #0xcc	; 204
      000355 7C                    1013 	.db #0x7c	; 124
      000356 0C                    1014 	.db #0x0c	; 12
      000357 F8                    1015 	.db #0xf8	; 248
      000358 E0                    1016 	.db #0xe0	; 224
      000359 60                    1017 	.db #0x60	; 96
      00035A 6C                    1018 	.db #0x6c	; 108	'l'
      00035B 76                    1019 	.db #0x76	; 118	'v'
      00035C 66                    1020 	.db #0x66	; 102	'f'
      00035D 66                    1021 	.db #0x66	; 102	'f'
      00035E E6                    1022 	.db #0xe6	; 230
      00035F 00                    1023 	.db #0x00	; 0
      000360 30                    1024 	.db #0x30	; 48	'0'
      000361 00                    1025 	.db #0x00	; 0
      000362 70                    1026 	.db #0x70	; 112	'p'
      000363 30                    1027 	.db #0x30	; 48	'0'
      000364 30                    1028 	.db #0x30	; 48	'0'
      000365 30                    1029 	.db #0x30	; 48	'0'
      000366 78                    1030 	.db #0x78	; 120	'x'
      000367 00                    1031 	.db #0x00	; 0
      000368 0C                    1032 	.db #0x0c	; 12
      000369 00                    1033 	.db #0x00	; 0
      00036A 0C                    1034 	.db #0x0c	; 12
      00036B 0C                    1035 	.db #0x0c	; 12
      00036C 0C                    1036 	.db #0x0c	; 12
      00036D CC                    1037 	.db #0xcc	; 204
      00036E CC                    1038 	.db #0xcc	; 204
      00036F 78                    1039 	.db #0x78	; 120	'x'
      000370 E0                    1040 	.db #0xe0	; 224
      000371 60                    1041 	.db #0x60	; 96
      000372 66                    1042 	.db #0x66	; 102	'f'
      000373 6C                    1043 	.db #0x6c	; 108	'l'
      000374 78                    1044 	.db #0x78	; 120	'x'
      000375 6C                    1045 	.db #0x6c	; 108	'l'
      000376 E6                    1046 	.db #0xe6	; 230
      000377 00                    1047 	.db #0x00	; 0
      000378 70                    1048 	.db #0x70	; 112	'p'
      000379 30                    1049 	.db #0x30	; 48	'0'
      00037A 30                    1050 	.db #0x30	; 48	'0'
      00037B 30                    1051 	.db #0x30	; 48	'0'
      00037C 30                    1052 	.db #0x30	; 48	'0'
      00037D 30                    1053 	.db #0x30	; 48	'0'
      00037E 78                    1054 	.db #0x78	; 120	'x'
      00037F 00                    1055 	.db #0x00	; 0
      000380 00                    1056 	.db #0x00	; 0
      000381 00                    1057 	.db #0x00	; 0
      000382 CC                    1058 	.db #0xcc	; 204
      000383 FE                    1059 	.db #0xfe	; 254
      000384 FE                    1060 	.db #0xfe	; 254
      000385 D6                    1061 	.db #0xd6	; 214
      000386 C6                    1062 	.db #0xc6	; 198
      000387 00                    1063 	.db #0x00	; 0
      000388 00                    1064 	.db #0x00	; 0
      000389 00                    1065 	.db #0x00	; 0
      00038A F8                    1066 	.db #0xf8	; 248
      00038B CC                    1067 	.db #0xcc	; 204
      00038C CC                    1068 	.db #0xcc	; 204
      00038D CC                    1069 	.db #0xcc	; 204
      00038E CC                    1070 	.db #0xcc	; 204
      00038F 00                    1071 	.db #0x00	; 0
      000390 00                    1072 	.db #0x00	; 0
      000391 00                    1073 	.db #0x00	; 0
      000392 78                    1074 	.db #0x78	; 120	'x'
      000393 CC                    1075 	.db #0xcc	; 204
      000394 CC                    1076 	.db #0xcc	; 204
      000395 CC                    1077 	.db #0xcc	; 204
      000396 78                    1078 	.db #0x78	; 120	'x'
      000397 00                    1079 	.db #0x00	; 0
      000398 00                    1080 	.db #0x00	; 0
      000399 00                    1081 	.db #0x00	; 0
      00039A DC                    1082 	.db #0xdc	; 220
      00039B 66                    1083 	.db #0x66	; 102	'f'
      00039C 66                    1084 	.db #0x66	; 102	'f'
      00039D 7C                    1085 	.db #0x7c	; 124
      00039E 60                    1086 	.db #0x60	; 96
      00039F F0                    1087 	.db #0xf0	; 240
      0003A0 00                    1088 	.db #0x00	; 0
      0003A1 00                    1089 	.db #0x00	; 0
      0003A2 76                    1090 	.db #0x76	; 118	'v'
      0003A3 CC                    1091 	.db #0xcc	; 204
      0003A4 CC                    1092 	.db #0xcc	; 204
      0003A5 7C                    1093 	.db #0x7c	; 124
      0003A6 0C                    1094 	.db #0x0c	; 12
      0003A7 1E                    1095 	.db #0x1e	; 30
      0003A8 00                    1096 	.db #0x00	; 0
      0003A9 00                    1097 	.db #0x00	; 0
      0003AA DC                    1098 	.db #0xdc	; 220
      0003AB 76                    1099 	.db #0x76	; 118	'v'
      0003AC 66                    1100 	.db #0x66	; 102	'f'
      0003AD 60                    1101 	.db #0x60	; 96
      0003AE F0                    1102 	.db #0xf0	; 240
      0003AF 00                    1103 	.db #0x00	; 0
      0003B0 00                    1104 	.db #0x00	; 0
      0003B1 00                    1105 	.db #0x00	; 0
      0003B2 7C                    1106 	.db #0x7c	; 124
      0003B3 C0                    1107 	.db #0xc0	; 192
      0003B4 78                    1108 	.db #0x78	; 120	'x'
      0003B5 0C                    1109 	.db #0x0c	; 12
      0003B6 F8                    1110 	.db #0xf8	; 248
      0003B7 00                    1111 	.db #0x00	; 0
      0003B8 10                    1112 	.db #0x10	; 16
      0003B9 30                    1113 	.db #0x30	; 48	'0'
      0003BA 7C                    1114 	.db #0x7c	; 124
      0003BB 30                    1115 	.db #0x30	; 48	'0'
      0003BC 30                    1116 	.db #0x30	; 48	'0'
      0003BD 34                    1117 	.db #0x34	; 52	'4'
      0003BE 18                    1118 	.db #0x18	; 24
      0003BF 00                    1119 	.db #0x00	; 0
      0003C0 00                    1120 	.db #0x00	; 0
      0003C1 00                    1121 	.db #0x00	; 0
      0003C2 CC                    1122 	.db #0xcc	; 204
      0003C3 CC                    1123 	.db #0xcc	; 204
      0003C4 CC                    1124 	.db #0xcc	; 204
      0003C5 CC                    1125 	.db #0xcc	; 204
      0003C6 76                    1126 	.db #0x76	; 118	'v'
      0003C7 00                    1127 	.db #0x00	; 0
      0003C8 00                    1128 	.db #0x00	; 0
      0003C9 00                    1129 	.db #0x00	; 0
      0003CA CC                    1130 	.db #0xcc	; 204
      0003CB CC                    1131 	.db #0xcc	; 204
      0003CC CC                    1132 	.db #0xcc	; 204
      0003CD 78                    1133 	.db #0x78	; 120	'x'
      0003CE 30                    1134 	.db #0x30	; 48	'0'
      0003CF 00                    1135 	.db #0x00	; 0
      0003D0 00                    1136 	.db #0x00	; 0
      0003D1 00                    1137 	.db #0x00	; 0
      0003D2 C6                    1138 	.db #0xc6	; 198
      0003D3 D6                    1139 	.db #0xd6	; 214
      0003D4 FE                    1140 	.db #0xfe	; 254
      0003D5 FE                    1141 	.db #0xfe	; 254
      0003D6 6C                    1142 	.db #0x6c	; 108	'l'
      0003D7 00                    1143 	.db #0x00	; 0
      0003D8 00                    1144 	.db #0x00	; 0
      0003D9 00                    1145 	.db #0x00	; 0
      0003DA C6                    1146 	.db #0xc6	; 198
      0003DB 6C                    1147 	.db #0x6c	; 108	'l'
      0003DC 38                    1148 	.db #0x38	; 56	'8'
      0003DD 6C                    1149 	.db #0x6c	; 108	'l'
      0003DE C6                    1150 	.db #0xc6	; 198
      0003DF 00                    1151 	.db #0x00	; 0
      0003E0 00                    1152 	.db #0x00	; 0
      0003E1 00                    1153 	.db #0x00	; 0
      0003E2 CC                    1154 	.db #0xcc	; 204
      0003E3 CC                    1155 	.db #0xcc	; 204
      0003E4 CC                    1156 	.db #0xcc	; 204
      0003E5 7C                    1157 	.db #0x7c	; 124
      0003E6 0C                    1158 	.db #0x0c	; 12
      0003E7 F8                    1159 	.db #0xf8	; 248
      0003E8 00                    1160 	.db #0x00	; 0
      0003E9 00                    1161 	.db #0x00	; 0
      0003EA FC                    1162 	.db #0xfc	; 252
      0003EB 98                    1163 	.db #0x98	; 152
      0003EC 30                    1164 	.db #0x30	; 48	'0'
      0003ED 64                    1165 	.db #0x64	; 100	'd'
      0003EE FC                    1166 	.db #0xfc	; 252
      0003EF 00                    1167 	.db #0x00	; 0
      0003F0 1C                    1168 	.db #0x1c	; 28
      0003F1 30                    1169 	.db #0x30	; 48	'0'
      0003F2 30                    1170 	.db #0x30	; 48	'0'
      0003F3 E0                    1171 	.db #0xe0	; 224
      0003F4 30                    1172 	.db #0x30	; 48	'0'
      0003F5 30                    1173 	.db #0x30	; 48	'0'
      0003F6 1C                    1174 	.db #0x1c	; 28
      0003F7 00                    1175 	.db #0x00	; 0
      0003F8 18                    1176 	.db #0x18	; 24
      0003F9 18                    1177 	.db #0x18	; 24
      0003FA 18                    1178 	.db #0x18	; 24
      0003FB 00                    1179 	.db #0x00	; 0
      0003FC 18                    1180 	.db #0x18	; 24
      0003FD 18                    1181 	.db #0x18	; 24
      0003FE 18                    1182 	.db #0x18	; 24
      0003FF 00                    1183 	.db #0x00	; 0
      000400 E0                    1184 	.db #0xe0	; 224
      000401 30                    1185 	.db #0x30	; 48	'0'
      000402 30                    1186 	.db #0x30	; 48	'0'
      000403 1C                    1187 	.db #0x1c	; 28
      000404 30                    1188 	.db #0x30	; 48	'0'
      000405 30                    1189 	.db #0x30	; 48	'0'
      000406 E0                    1190 	.db #0xe0	; 224
      000407 00                    1191 	.db #0x00	; 0
      000408 76                    1192 	.db #0x76	; 118	'v'
      000409 DC                    1193 	.db #0xdc	; 220
      00040A 00                    1194 	.db #0x00	; 0
      00040B 00                    1195 	.db #0x00	; 0
      00040C 00                    1196 	.db #0x00	; 0
      00040D 00                    1197 	.db #0x00	; 0
      00040E 00                    1198 	.db #0x00	; 0
      00040F 00                    1199 	.db #0x00	; 0
      000410 00                    1200 	.db #0x00	; 0
      000411 10                    1201 	.db #0x10	; 16
      000412 38                    1202 	.db #0x38	; 56	'8'
      000413 6C                    1203 	.db #0x6c	; 108	'l'
      000414 C6                    1204 	.db #0xc6	; 198
      000415 C6                    1205 	.db #0xc6	; 198
      000416 FE                    1206 	.db #0xfe	; 254
      000417 00                    1207 	.db #0x00	; 0
      000418                       1208 _pattern_black_0:
      000418 FF                    1209 	.db #0xff	; 255
      000419 FF                    1210 	.db #0xff	; 255
      00041A FF                    1211 	.db #0xff	; 255
      00041B FF                    1212 	.db #0xff	; 255
      00041C FF                    1213 	.db #0xff	; 255
      00041D FF                    1214 	.db #0xff	; 255
      00041E FF                    1215 	.db #0xff	; 255
      00041F FF                    1216 	.db #0xff	; 255
      000420                       1217 _pattern_black_1:
      000420 FE                    1218 	.db #0xfe	; 254
      000421 FF                    1219 	.db #0xff	; 255
      000422 FF                    1220 	.db #0xff	; 255
      000423 FF                    1221 	.db #0xff	; 255
      000424 FE                    1222 	.db #0xfe	; 254
      000425 FF                    1223 	.db #0xff	; 255
      000426 FF                    1224 	.db #0xff	; 255
      000427 FE                    1225 	.db #0xfe	; 254
      000428                       1226 _pattern_black_2:
      000428 FF                    1227 	.db #0xff	; 255
      000429 FF                    1228 	.db #0xff	; 255
      00042A FF                    1229 	.db #0xff	; 255
      00042B FF                    1230 	.db #0xff	; 255
      00042C FF                    1231 	.db #0xff	; 255
      00042D FB                    1232 	.db #0xfb	; 251
      00042E FF                    1233 	.db #0xff	; 255
      00042F BB                    1234 	.db #0xbb	; 187
      000430                       1235 _pattern_black_3:
      000430 FB                    1236 	.db #0xfb	; 251
      000431 FE                    1237 	.db #0xfe	; 254
      000432 FD                    1238 	.db #0xfd	; 253
      000433 FE                    1239 	.db #0xfe	; 254
      000434 F7                    1240 	.db #0xf7	; 247
      000435 FA                    1241 	.db #0xfa	; 250
      000436 AF                    1242 	.db #0xaf	; 175
      000437 55                    1243 	.db #0x55	; 85	'U'
      000438                       1244 _pattern_0:
      000438 9F                    1245 	.db #0x9f	; 159
      000439 90                    1246 	.db #0x90	; 144
      00043A 90                    1247 	.db #0x90	; 144
      00043B 93                    1248 	.db #0x93	; 147
      00043C 92                    1249 	.db #0x92	; 146
      00043D 92                    1250 	.db #0x92	; 146
      00043E 92                    1251 	.db #0x92	; 146
      00043F 92                    1252 	.db #0x92	; 146
      000440                       1253 _pattern_1:
      000440 FF                    1254 	.db #0xff	; 255
      000441 01                    1255 	.db #0x01	; 1
      000442 01                    1256 	.db #0x01	; 1
      000443 F9                    1257 	.db #0xf9	; 249
      000444 09                    1258 	.db #0x09	; 9
      000445 09                    1259 	.db #0x09	; 9
      000446 49                    1260 	.db #0x49	; 73	'I'
      000447 49                    1261 	.db #0x49	; 73	'I'
      000448                       1262 _pattern_2:
      000448 92                    1263 	.db #0x92	; 146
      000449 93                    1264 	.db #0x93	; 147
      00044A 90                    1265 	.db #0x90	; 144
      00044B 90                    1266 	.db #0x90	; 144
      00044C 9F                    1267 	.db #0x9f	; 159
      00044D 80                    1268 	.db #0x80	; 128
      00044E 80                    1269 	.db #0x80	; 128
      00044F FF                    1270 	.db #0xff	; 255
      000450                       1271 _pattern_3:
      000450 49                    1272 	.db #0x49	; 73	'I'
      000451 C9                    1273 	.db #0xc9	; 201
      000452 09                    1274 	.db #0x09	; 9
      000453 09                    1275 	.db #0x09	; 9
      000454 F9                    1276 	.db #0xf9	; 249
      000455 01                    1277 	.db #0x01	; 1
      000456 01                    1278 	.db #0x01	; 1
      000457 FF                    1279 	.db #0xff	; 255
      000458                       1280 _pattern_4:
      000458 7F                    1281 	.db #0x7f	; 127
      000459 81                    1282 	.db #0x81	; 129
      00045A 83                    1283 	.db #0x83	; 131
      00045B 87                    1284 	.db #0x87	; 135
      00045C 8F                    1285 	.db #0x8f	; 143
      00045D 9F                    1286 	.db #0x9f	; 159
      00045E BF                    1287 	.db #0xbf	; 191
      00045F FF                    1288 	.db #0xff	; 255
      000460                       1289 _pattern_5:
      000460 FE                    1290 	.db #0xfe	; 254
      000461 81                    1291 	.db #0x81	; 129
      000462 C1                    1292 	.db #0xc1	; 193
      000463 E1                    1293 	.db #0xe1	; 225
      000464 F1                    1294 	.db #0xf1	; 241
      000465 F9                    1295 	.db #0xf9	; 249
      000466 FD                    1296 	.db #0xfd	; 253
      000467 FF                    1297 	.db #0xff	; 255
      000468                       1298 _pattern_6:
      000468 FF                    1299 	.db #0xff	; 255
      000469 BF                    1300 	.db #0xbf	; 191
      00046A 9F                    1301 	.db #0x9f	; 159
      00046B 8F                    1302 	.db #0x8f	; 143
      00046C 87                    1303 	.db #0x87	; 135
      00046D 83                    1304 	.db #0x83	; 131
      00046E 81                    1305 	.db #0x81	; 129
      00046F 7F                    1306 	.db #0x7f	; 127
      000470                       1307 _pattern_7:
      000470 FF                    1308 	.db #0xff	; 255
      000471 FD                    1309 	.db #0xfd	; 253
      000472 F9                    1310 	.db #0xf9	; 249
      000473 F1                    1311 	.db #0xf1	; 241
      000474 E1                    1312 	.db #0xe1	; 225
      000475 C1                    1313 	.db #0xc1	; 193
      000476 81                    1314 	.db #0x81	; 129
      000477 FE                    1315 	.db #0xfe	; 254
      000478                       1316 _pattern_8:
      000478 7F                    1317 	.db #0x7f	; 127
      000479 AE                    1318 	.db #0xae	; 174
      00047A FF                    1319 	.db #0xff	; 255
      00047B 5B                    1320 	.db #0x5b	; 91
      00047C FF                    1321 	.db #0xff	; 255
      00047D AE                    1322 	.db #0xae	; 174
      00047E FF                    1323 	.db #0xff	; 255
      00047F DF                    1324 	.db #0xdf	; 223
      000480                       1325 _pattern_9:
      000480 FE                    1326 	.db #0xfe	; 254
      000481 BD                    1327 	.db #0xbd	; 189
      000482 DF                    1328 	.db #0xdf	; 223
      000483 7F                    1329 	.db #0x7f	; 127
      000484 FB                    1330 	.db #0xfb	; 251
      000485 DF                    1331 	.db #0xdf	; 223
      000486 FE                    1332 	.db #0xfe	; 254
      000487 EF                    1333 	.db #0xef	; 239
      000488                       1334 _pattern_10:
      000488 7F                    1335 	.db #0x7f	; 127
      000489 FF                    1336 	.db #0xff	; 255
      00048A ED                    1337 	.db #0xed	; 237
      00048B FF                    1338 	.db #0xff	; 255
      00048C B6                    1339 	.db #0xb6	; 182
      00048D FE                    1340 	.db #0xfe	; 254
      00048E DB                    1341 	.db #0xdb	; 219
      00048F 7D                    1342 	.db #0x7d	; 125
      000490                       1343 _pattern_11:
      000490 FE                    1344 	.db #0xfe	; 254
      000491 FF                    1345 	.db #0xff	; 255
      000492 FE                    1346 	.db #0xfe	; 254
      000493 77                    1347 	.db #0x77	; 119	'w'
      000494 FE                    1348 	.db #0xfe	; 254
      000495 DD                    1349 	.db #0xdd	; 221
      000496 EF                    1350 	.db #0xef	; 239
      000497 5A                    1351 	.db #0x5a	; 90	'Z'
      000498                       1352 _pattern_12:
      000498 7F                    1353 	.db #0x7f	; 127
      000499 D5                    1354 	.db #0xd5	; 213
      00049A BF                    1355 	.db #0xbf	; 191
      00049B ED                    1356 	.db #0xed	; 237
      00049C BF                    1357 	.db #0xbf	; 191
      00049D F5                    1358 	.db #0xf5	; 245
      00049E BF                    1359 	.db #0xbf	; 191
      00049F FF                    1360 	.db #0xff	; 255
      0004A0                       1361 _pattern_13:
      0004A0 FE                    1362 	.db #0xfe	; 254
      0004A1 5F                    1363 	.db #0x5f	; 95
      0004A2 F5                    1364 	.db #0xf5	; 245
      0004A3 DF                    1365 	.db #0xdf	; 223
      0004A4 FF                    1366 	.db #0xff	; 255
      0004A5 FF                    1367 	.db #0xff	; 255
      0004A6 FF                    1368 	.db #0xff	; 255
      0004A7 FF                    1369 	.db #0xff	; 255
      0004A8                       1370 _pattern_14:
      0004A8 EF                    1371 	.db #0xef	; 239
      0004A9 BF                    1372 	.db #0xbf	; 191
      0004AA 7F                    1373 	.db #0x7f	; 127
      0004AB FF                    1374 	.db #0xff	; 255
      0004AC FF                    1375 	.db #0xff	; 255
      0004AD FF                    1376 	.db #0xff	; 255
      0004AE DB                    1377 	.db #0xdb	; 219
      0004AF 7F                    1378 	.db #0x7f	; 127
      0004B0                       1379 _pattern_15:
      0004B0 FF                    1380 	.db #0xff	; 255
      0004B1 FD                    1381 	.db #0xfd	; 253
      0004B2 FF                    1382 	.db #0xff	; 255
      0004B3 DB                    1383 	.db #0xdb	; 219
      0004B4 FD                    1384 	.db #0xfd	; 253
      0004B5 7B                    1385 	.db #0x7b	; 123
      0004B6 D7                    1386 	.db #0xd7	; 215
      0004B7 FE                    1387 	.db #0xfe	; 254
      0004B8                       1388 _pattern_16:
      0004B8 7F                    1389 	.db #0x7f	; 127
      0004B9 FF                    1390 	.db #0xff	; 255
      0004BA EA                    1391 	.db #0xea	; 234
      0004BB DF                    1392 	.db #0xdf	; 223
      0004BC FF                    1393 	.db #0xff	; 255
      0004BD DF                    1394 	.db #0xdf	; 223
      0004BE FF                    1395 	.db #0xff	; 255
      0004BF DF                    1396 	.db #0xdf	; 223
      0004C0                       1397 _pattern_17:
      0004C0 FE                    1398 	.db #0xfe	; 254
      0004C1 FF                    1399 	.db #0xff	; 255
      0004C2 AF                    1400 	.db #0xaf	; 175
      0004C3 FA                    1401 	.db #0xfa	; 250
      0004C4 FF                    1402 	.db #0xff	; 255
      0004C5 FA                    1403 	.db #0xfa	; 250
      0004C6 FF                    1404 	.db #0xff	; 255
      0004C7 FA                    1405 	.db #0xfa	; 250
      0004C8                       1406 _pattern_18:
      0004C8 FF                    1407 	.db #0xff	; 255
      0004C9 DF                    1408 	.db #0xdf	; 223
      0004CA FF                    1409 	.db #0xff	; 255
      0004CB DF                    1410 	.db #0xdf	; 223
      0004CC FF                    1411 	.db #0xff	; 255
      0004CD EA                    1412 	.db #0xea	; 234
      0004CE FF                    1413 	.db #0xff	; 255
      0004CF 55                    1414 	.db #0x55	; 85	'U'
      0004D0                       1415 _pattern_19:
      0004D0 FF                    1416 	.db #0xff	; 255
      0004D1 FA                    1417 	.db #0xfa	; 250
      0004D2 FF                    1418 	.db #0xff	; 255
      0004D3 FA                    1419 	.db #0xfa	; 250
      0004D4 F7                    1420 	.db #0xf7	; 247
      0004D5 AA                    1421 	.db #0xaa	; 170
      0004D6 FF                    1422 	.db #0xff	; 255
      0004D7 56                    1423 	.db #0x56	; 86	'V'
      0004D8                       1424 _pattern_20:
      0004D8 3F                    1425 	.db #0x3f	; 63
      0004D9 7F                    1426 	.db #0x7f	; 127
      0004DA E0                    1427 	.db #0xe0	; 224
      0004DB CE                    1428 	.db #0xce	; 206
      0004DC E6                    1429 	.db #0xe6	; 230
      0004DD 7C                    1430 	.db #0x7c	; 124
      0004DE 39                    1431 	.db #0x39	; 57	'9'
      0004DF 03                    1432 	.db #0x03	; 3
      0004E0                       1433 _pattern_21:
      0004E0 FF                    1434 	.db #0xff	; 255
      0004E1 FF                    1435 	.db #0xff	; 255
      0004E2 00                    1436 	.db #0x00	; 0
      0004E3 DB                    1437 	.db #0xdb	; 219
      0004E4 DB                    1438 	.db #0xdb	; 219
      0004E5 00                    1439 	.db #0x00	; 0
      0004E6 FF                    1440 	.db #0xff	; 255
      0004E7 FF                    1441 	.db #0xff	; 255
      0004E8                       1442 _pattern_22:
      0004E8 FC                    1443 	.db #0xfc	; 252
      0004E9 FE                    1444 	.db #0xfe	; 254
      0004EA 07                    1445 	.db #0x07	; 7
      0004EB 73                    1446 	.db #0x73	; 115	's'
      0004EC 67                    1447 	.db #0x67	; 103	'g'
      0004ED 3E                    1448 	.db #0x3e	; 62
      0004EE 9C                    1449 	.db #0x9c	; 156
      0004EF C0                    1450 	.db #0xc0	; 192
      0004F0                       1451 _pattern_23:
      0004F0 06                    1452 	.db #0x06	; 6
      0004F1 00                    1453 	.db #0x00	; 0
      0004F2 03                    1454 	.db #0x03	; 3
      0004F3 04                    1455 	.db #0x04	; 4
      0004F4 05                    1456 	.db #0x05	; 5
      0004F5 05                    1457 	.db #0x05	; 5
      0004F6 05                    1458 	.db #0x05	; 5
      0004F7 05                    1459 	.db #0x05	; 5
      0004F8                       1460 _pattern_24:
      0004F8 00                    1461 	.db #0x00	; 0
      0004F9 00                    1462 	.db #0x00	; 0
      0004FA 33                    1463 	.db #0x33	; 51	'3'
      0004FB 44                    1464 	.db #0x44	; 68	'D'
      0004FC 55                    1465 	.db #0x55	; 85	'U'
      0004FD 55                    1466 	.db #0x55	; 85	'U'
      0004FE 55                    1467 	.db #0x55	; 85	'U'
      0004FF 55                    1468 	.db #0x55	; 85	'U'
      000500                       1469 _pattern_25:
      000500 60                    1470 	.db #0x60	; 96
      000501 00                    1471 	.db #0x00	; 0
      000502 40                    1472 	.db #0x40	; 64
      000503 20                    1473 	.db #0x20	; 32
      000504 20                    1474 	.db #0x20	; 32
      000505 20                    1475 	.db #0x20	; 32
      000506 20                    1476 	.db #0x20	; 32
      000507 20                    1477 	.db #0x20	; 32
      000508                       1478 _pattern_26:
      000508 05                    1479 	.db #0x05	; 5
      000509 05                    1480 	.db #0x05	; 5
      00050A 05                    1481 	.db #0x05	; 5
      00050B 05                    1482 	.db #0x05	; 5
      00050C 05                    1483 	.db #0x05	; 5
      00050D 05                    1484 	.db #0x05	; 5
      00050E 05                    1485 	.db #0x05	; 5
      00050F 05                    1486 	.db #0x05	; 5
      000510                       1487 _pattern_27:
      000510 55                    1488 	.db #0x55	; 85	'U'
      000511 55                    1489 	.db #0x55	; 85	'U'
      000512 55                    1490 	.db #0x55	; 85	'U'
      000513 55                    1491 	.db #0x55	; 85	'U'
      000514 55                    1492 	.db #0x55	; 85	'U'
      000515 55                    1493 	.db #0x55	; 85	'U'
      000516 55                    1494 	.db #0x55	; 85	'U'
      000517 55                    1495 	.db #0x55	; 85	'U'
      000518                       1496 _pattern_28:
      000518 20                    1497 	.db #0x20	; 32
      000519 20                    1498 	.db #0x20	; 32
      00051A 20                    1499 	.db #0x20	; 32
      00051B 20                    1500 	.db #0x20	; 32
      00051C 20                    1501 	.db #0x20	; 32
      00051D 20                    1502 	.db #0x20	; 32
      00051E 20                    1503 	.db #0x20	; 32
      00051F 20                    1504 	.db #0x20	; 32
      000520                       1505 _pattern_29:
      000520 05                    1506 	.db #0x05	; 5
      000521 05                    1507 	.db #0x05	; 5
      000522 07                    1508 	.db #0x07	; 7
      000523 07                    1509 	.db #0x07	; 7
      000524 07                    1510 	.db #0x07	; 7
      000525 05                    1511 	.db #0x05	; 5
      000526 05                    1512 	.db #0x05	; 5
      000527 05                    1513 	.db #0x05	; 5
      000528                       1514 _pattern_30:
      000528 55                    1515 	.db #0x55	; 85	'U'
      000529 55                    1516 	.db #0x55	; 85	'U'
      00052A FF                    1517 	.db #0xff	; 255
      00052B FF                    1518 	.db #0xff	; 255
      00052C FF                    1519 	.db #0xff	; 255
      00052D 55                    1520 	.db #0x55	; 85	'U'
      00052E 55                    1521 	.db #0x55	; 85	'U'
      00052F 55                    1522 	.db #0x55	; 85	'U'
      000530                       1523 _pattern_31:
      000530 20                    1524 	.db #0x20	; 32
      000531 20                    1525 	.db #0x20	; 32
      000532 E0                    1526 	.db #0xe0	; 224
      000533 E0                    1527 	.db #0xe0	; 224
      000534 E0                    1528 	.db #0xe0	; 224
      000535 20                    1529 	.db #0x20	; 32
      000536 20                    1530 	.db #0x20	; 32
      000537 20                    1531 	.db #0x20	; 32
      000538                       1532 _pattern_37:
      000538 05                    1533 	.db #0x05	; 5
      000539 05                    1534 	.db #0x05	; 5
      00053A 05                    1535 	.db #0x05	; 5
      00053B 05                    1536 	.db #0x05	; 5
      00053C 04                    1537 	.db #0x04	; 4
      00053D 03                    1538 	.db #0x03	; 3
      00053E 00                    1539 	.db #0x00	; 0
      00053F 06                    1540 	.db #0x06	; 6
      000540                       1541 _pattern_38:
      000540 55                    1542 	.db #0x55	; 85	'U'
      000541 55                    1543 	.db #0x55	; 85	'U'
      000542 55                    1544 	.db #0x55	; 85	'U'
      000543 55                    1545 	.db #0x55	; 85	'U'
      000544 44                    1546 	.db #0x44	; 68	'D'
      000545 33                    1547 	.db #0x33	; 51	'3'
      000546 00                    1548 	.db #0x00	; 0
      000547 00                    1549 	.db #0x00	; 0
      000548                       1550 _pattern_39:
      000548 20                    1551 	.db #0x20	; 32
      000549 20                    1552 	.db #0x20	; 32
      00054A 20                    1553 	.db #0x20	; 32
      00054B 20                    1554 	.db #0x20	; 32
      00054C 20                    1555 	.db #0x20	; 32
      00054D 40                    1556 	.db #0x40	; 64
      00054E 00                    1557 	.db #0x00	; 0
      00054F 60                    1558 	.db #0x60	; 96
      000550                       1559 _pattern_32:
      000550 03                    1560 	.db #0x03	; 3
      000551 39                    1561 	.db #0x39	; 57	'9'
      000552 7C                    1562 	.db #0x7c	; 124
      000553 E6                    1563 	.db #0xe6	; 230
      000554 CE                    1564 	.db #0xce	; 206
      000555 E0                    1565 	.db #0xe0	; 224
      000556 7F                    1566 	.db #0x7f	; 127
      000557 3F                    1567 	.db #0x3f	; 63
      000558                       1568 _pattern_33:
      000558 FF                    1569 	.db #0xff	; 255
      000559 FF                    1570 	.db #0xff	; 255
      00055A 00                    1571 	.db #0x00	; 0
      00055B DB                    1572 	.db #0xdb	; 219
      00055C DB                    1573 	.db #0xdb	; 219
      00055D 00                    1574 	.db #0x00	; 0
      00055E FF                    1575 	.db #0xff	; 255
      00055F FF                    1576 	.db #0xff	; 255
      000560                       1577 _pattern_34:
      000560 C0                    1578 	.db #0xc0	; 192
      000561 9C                    1579 	.db #0x9c	; 156
      000562 3E                    1580 	.db #0x3e	; 62
      000563 67                    1581 	.db #0x67	; 103	'g'
      000564 73                    1582 	.db #0x73	; 115	's'
      000565 07                    1583 	.db #0x07	; 7
      000566 FE                    1584 	.db #0xfe	; 254
      000567 FC                    1585 	.db #0xfc	; 252
      000568                       1586 _sprite_dust_0:
      000568 10                    1587 	.db #0x10	; 16
      000569 42                    1588 	.db #0x42	; 66	'B'
      00056A 10                    1589 	.db #0x10	; 16
      00056B 45                    1590 	.db #0x45	; 69	'E'
      00056C 20                    1591 	.db #0x20	; 32
      00056D 89                    1592 	.db #0x89	; 137
      00056E 20                    1593 	.db #0x20	; 32
      00056F 88                    1594 	.db #0x88	; 136
      000570                       1595 _sprite_dust_1:
      000570 10                    1596 	.db #0x10	; 16
      000571 42                    1597 	.db #0x42	; 66	'B'
      000572 00                    1598 	.db #0x00	; 0
      000573 04                    1599 	.db #0x04	; 4
      000574 20                    1600 	.db #0x20	; 32
      000575 81                    1601 	.db #0x81	; 129
      000576 20                    1602 	.db #0x20	; 32
      000577 08                    1603 	.db #0x08	; 8
      000578                       1604 _sprite_dust_2:
      000578 10                    1605 	.db #0x10	; 16
      000579 00                    1606 	.db #0x00	; 0
      00057A 00                    1607 	.db #0x00	; 0
      00057B 04                    1608 	.db #0x04	; 4
      00057C 20                    1609 	.db #0x20	; 32
      00057D 80                    1610 	.db #0x80	; 128
      00057E 20                    1611 	.db #0x20	; 32
      00057F 00                    1612 	.db #0x00	; 0
      000580                       1613 _sprite_dust_3:
      000580 10                    1614 	.db #0x10	; 16
      000581 00                    1615 	.db #0x00	; 0
      000582 00                    1616 	.db #0x00	; 0
      000583 04                    1617 	.db #0x04	; 4
      000584 00                    1618 	.db #0x00	; 0
      000585 00                    1619 	.db #0x00	; 0
      000586 20                    1620 	.db #0x20	; 32
      000587 00                    1621 	.db #0x00	; 0
      000588                       1622 _pattern_title:
      000588 FE                    1623 	.db #0xfe	; 254
      000589 FE                    1624 	.db #0xfe	; 254
      00058A FE                    1625 	.db #0xfe	; 254
      00058B FE                    1626 	.db #0xfe	; 254
      00058C FE                    1627 	.db #0xfe	; 254
      00058D FE                    1628 	.db #0xfe	; 254
      00058E FE                    1629 	.db #0xfe	; 254
      00058F 00                    1630 	.db #0x00	; 0
      000590                       1631 _color_black_0:
      000590 14                    1632 	.db #0x14	; 20
      000591 14                    1633 	.db #0x14	; 20
      000592 14                    1634 	.db #0x14	; 20
      000593 14                    1635 	.db #0x14	; 20
      000594 14                    1636 	.db #0x14	; 20
      000595 14                    1637 	.db #0x14	; 20
      000596 14                    1638 	.db #0x14	; 20
      000597 14                    1639 	.db #0x14	; 20
      000598                       1640 _color_black_1:
      000598 14                    1641 	.db #0x14	; 20
      000599 14                    1642 	.db #0x14	; 20
      00059A 14                    1643 	.db #0x14	; 20
      00059B 14                    1644 	.db #0x14	; 20
      00059C 14                    1645 	.db #0x14	; 20
      00059D 14                    1646 	.db #0x14	; 20
      00059E 14                    1647 	.db #0x14	; 20
      00059F 14                    1648 	.db #0x14	; 20
      0005A0                       1649 _color_black_2:
      0005A0 14                    1650 	.db #0x14	; 20
      0005A1 14                    1651 	.db #0x14	; 20
      0005A2 14                    1652 	.db #0x14	; 20
      0005A3 14                    1653 	.db #0x14	; 20
      0005A4 14                    1654 	.db #0x14	; 20
      0005A5 14                    1655 	.db #0x14	; 20
      0005A6 14                    1656 	.db #0x14	; 20
      0005A7 14                    1657 	.db #0x14	; 20
      0005A8                       1658 _color_black_3:
      0005A8 14                    1659 	.db #0x14	; 20
      0005A9 14                    1660 	.db #0x14	; 20
      0005AA 14                    1661 	.db #0x14	; 20
      0005AB 14                    1662 	.db #0x14	; 20
      0005AC 14                    1663 	.db #0x14	; 20
      0005AD 14                    1664 	.db #0x14	; 20
      0005AE 14                    1665 	.db #0x14	; 20
      0005AF 14                    1666 	.db #0x14	; 20
      0005B0                       1667 _color_0:
      0005B0 13                    1668 	.db #0x13	; 19
      0005B1 13                    1669 	.db #0x13	; 19
      0005B2 13                    1670 	.db #0x13	; 19
      0005B3 13                    1671 	.db #0x13	; 19
      0005B4 13                    1672 	.db #0x13	; 19
      0005B5 13                    1673 	.db #0x13	; 19
      0005B6 13                    1674 	.db #0x13	; 19
      0005B7 13                    1675 	.db #0x13	; 19
      0005B8                       1676 _color_1:
      0005B8 12                    1677 	.db #0x12	; 18
      0005B9 12                    1678 	.db #0x12	; 18
      0005BA 12                    1679 	.db #0x12	; 18
      0005BB 12                    1680 	.db #0x12	; 18
      0005BC 12                    1681 	.db #0x12	; 18
      0005BD 12                    1682 	.db #0x12	; 18
      0005BE 12                    1683 	.db #0x12	; 18
      0005BF 12                    1684 	.db #0x12	; 18
      0005C0                       1685 _color_2:
      0005C0 12                    1686 	.db #0x12	; 18
      0005C1 12                    1687 	.db #0x12	; 18
      0005C2 12                    1688 	.db #0x12	; 18
      0005C3 12                    1689 	.db #0x12	; 18
      0005C4 12                    1690 	.db #0x12	; 18
      0005C5 12                    1691 	.db #0x12	; 18
      0005C6 12                    1692 	.db #0x12	; 18
      0005C7 12                    1693 	.db #0x12	; 18
      0005C8                       1694 _color_3:
      0005C8 1C                    1695 	.db #0x1c	; 28
      0005C9 1C                    1696 	.db #0x1c	; 28
      0005CA 1C                    1697 	.db #0x1c	; 28
      0005CB 1C                    1698 	.db #0x1c	; 28
      0005CC 1C                    1699 	.db #0x1c	; 28
      0005CD 1C                    1700 	.db #0x1c	; 28
      0005CE 1C                    1701 	.db #0x1c	; 28
      0005CF 1C                    1702 	.db #0x1c	; 28
      0005D0                       1703 _color_4:
      0005D0 96                    1704 	.db #0x96	; 150
      0005D1 96                    1705 	.db #0x96	; 150
      0005D2 96                    1706 	.db #0x96	; 150
      0005D3 96                    1707 	.db #0x96	; 150
      0005D4 96                    1708 	.db #0x96	; 150
      0005D5 96                    1709 	.db #0x96	; 150
      0005D6 96                    1710 	.db #0x96	; 150
      0005D7 96                    1711 	.db #0x96	; 150
      0005D8                       1712 _color_5:
      0005D8 98                    1713 	.db #0x98	; 152
      0005D9 68                    1714 	.db #0x68	; 104	'h'
      0005DA 68                    1715 	.db #0x68	; 104	'h'
      0005DB 68                    1716 	.db #0x68	; 104	'h'
      0005DC 68                    1717 	.db #0x68	; 104	'h'
      0005DD 68                    1718 	.db #0x68	; 104	'h'
      0005DE 68                    1719 	.db #0x68	; 104	'h'
      0005DF 68                    1720 	.db #0x68	; 104	'h'
      0005E0                       1721 _color_6:
      0005E0 68                    1722 	.db #0x68	; 104	'h'
      0005E1 68                    1723 	.db #0x68	; 104	'h'
      0005E2 68                    1724 	.db #0x68	; 104	'h'
      0005E3 68                    1725 	.db #0x68	; 104	'h'
      0005E4 68                    1726 	.db #0x68	; 104	'h'
      0005E5 68                    1727 	.db #0x68	; 104	'h'
      0005E6 68                    1728 	.db #0x68	; 104	'h'
      0005E7 68                    1729 	.db #0x68	; 104	'h'
      0005E8                       1730 _color_7:
      0005E8 89                    1731 	.db #0x89	; 137
      0005E9 89                    1732 	.db #0x89	; 137
      0005EA 89                    1733 	.db #0x89	; 137
      0005EB 89                    1734 	.db #0x89	; 137
      0005EC 89                    1735 	.db #0x89	; 137
      0005ED 89                    1736 	.db #0x89	; 137
      0005EE 89                    1737 	.db #0x89	; 137
      0005EF 86                    1738 	.db #0x86	; 134
      0005F0                       1739 _color_8:
      0005F0 41                    1740 	.db #0x41	; 65	'A'
      0005F1 47                    1741 	.db #0x47	; 71	'G'
      0005F2 47                    1742 	.db #0x47	; 71	'G'
      0005F3 47                    1743 	.db #0x47	; 71	'G'
      0005F4 47                    1744 	.db #0x47	; 71	'G'
      0005F5 47                    1745 	.db #0x47	; 71	'G'
      0005F6 47                    1746 	.db #0x47	; 71	'G'
      0005F7 47                    1747 	.db #0x47	; 71	'G'
      0005F8                       1748 _color_9:
      0005F8 41                    1749 	.db #0x41	; 65	'A'
      0005F9 45                    1750 	.db #0x45	; 69	'E'
      0005FA 47                    1751 	.db #0x47	; 71	'G'
      0005FB 47                    1752 	.db #0x47	; 71	'G'
      0005FC 45                    1753 	.db #0x45	; 69	'E'
      0005FD 45                    1754 	.db #0x45	; 69	'E'
      0005FE 41                    1755 	.db #0x41	; 65	'A'
      0005FF 45                    1756 	.db #0x45	; 69	'E'
      000600                       1757 _color_10:
      000600 47                    1758 	.db #0x47	; 71	'G'
      000601 45                    1759 	.db #0x45	; 69	'E'
      000602 45                    1760 	.db #0x45	; 69	'E'
      000603 45                    1761 	.db #0x45	; 69	'E'
      000604 45                    1762 	.db #0x45	; 69	'E'
      000605 41                    1763 	.db #0x41	; 65	'A'
      000606 45                    1764 	.db #0x45	; 69	'E'
      000607 41                    1765 	.db #0x41	; 65	'A'
      000608                       1766 _color_11:
      000608 41                    1767 	.db #0x41	; 65	'A'
      000609 41                    1768 	.db #0x41	; 65	'A'
      00060A 41                    1769 	.db #0x41	; 65	'A'
      00060B 41                    1770 	.db #0x41	; 65	'A'
      00060C 41                    1771 	.db #0x41	; 65	'A'
      00060D 41                    1772 	.db #0x41	; 65	'A'
      00060E 41                    1773 	.db #0x41	; 65	'A'
      00060F 41                    1774 	.db #0x41	; 65	'A'
      000610                       1775 _color_12:
      000610 D1                    1776 	.db #0xd1	; 209
      000611 DF                    1777 	.db #0xdf	; 223
      000612 DF                    1778 	.db #0xdf	; 223
      000613 DF                    1779 	.db #0xdf	; 223
      000614 DF                    1780 	.db #0xdf	; 223
      000615 DF                    1781 	.db #0xdf	; 223
      000616 DF                    1782 	.db #0xdf	; 223
      000617 DF                    1783 	.db #0xdf	; 223
      000618                       1784 _color_13:
      000618 D1                    1785 	.db #0xd1	; 209
      000619 DF                    1786 	.db #0xdf	; 223
      00061A DF                    1787 	.db #0xdf	; 223
      00061B DF                    1788 	.db #0xdf	; 223
      00061C DF                    1789 	.db #0xdf	; 223
      00061D DF                    1790 	.db #0xdf	; 223
      00061E DF                    1791 	.db #0xdf	; 223
      00061F DF                    1792 	.db #0xdf	; 223
      000620                       1793 _color_14:
      000620 DF                    1794 	.db #0xdf	; 223
      000621 DF                    1795 	.db #0xdf	; 223
      000622 DF                    1796 	.db #0xdf	; 223
      000623 D1                    1797 	.db #0xd1	; 209
      000624 D1                    1798 	.db #0xd1	; 209
      000625 D1                    1799 	.db #0xd1	; 209
      000626 D1                    1800 	.db #0xd1	; 209
      000627 D1                    1801 	.db #0xd1	; 209
      000628                       1802 _color_15:
      000628 D1                    1803 	.db #0xd1	; 209
      000629 D1                    1804 	.db #0xd1	; 209
      00062A D1                    1805 	.db #0xd1	; 209
      00062B D1                    1806 	.db #0xd1	; 209
      00062C D1                    1807 	.db #0xd1	; 209
      00062D D1                    1808 	.db #0xd1	; 209
      00062E D1                    1809 	.db #0xd1	; 209
      00062F D1                    1810 	.db #0xd1	; 209
      000630                       1811 _color_16:
      000630 A1                    1812 	.db #0xa1	; 161
      000631 BF                    1813 	.db #0xbf	; 191
      000632 BF                    1814 	.db #0xbf	; 191
      000633 BF                    1815 	.db #0xbf	; 191
      000634 BF                    1816 	.db #0xbf	; 191
      000635 BF                    1817 	.db #0xbf	; 191
      000636 BF                    1818 	.db #0xbf	; 191
      000637 BF                    1819 	.db #0xbf	; 191
      000638                       1820 _color_17:
      000638 A1                    1821 	.db #0xa1	; 161
      000639 AF                    1822 	.db #0xaf	; 175
      00063A AF                    1823 	.db #0xaf	; 175
      00063B A1                    1824 	.db #0xa1	; 161
      00063C A1                    1825 	.db #0xa1	; 161
      00063D A1                    1826 	.db #0xa1	; 161
      00063E A1                    1827 	.db #0xa1	; 161
      00063F A1                    1828 	.db #0xa1	; 161
      000640                       1829 _color_18:
      000640 AF                    1830 	.db #0xaf	; 175
      000641 AF                    1831 	.db #0xaf	; 175
      000642 AF                    1832 	.db #0xaf	; 175
      000643 AF                    1833 	.db #0xaf	; 175
      000644 A1                    1834 	.db #0xa1	; 161
      000645 A1                    1835 	.db #0xa1	; 161
      000646 A1                    1836 	.db #0xa1	; 161
      000647 A1                    1837 	.db #0xa1	; 161
      000648                       1838 _color_19:
      000648 B1                    1839 	.db #0xb1	; 177
      000649 B1                    1840 	.db #0xb1	; 177
      00064A B1                    1841 	.db #0xb1	; 177
      00064B B1                    1842 	.db #0xb1	; 177
      00064C B1                    1843 	.db #0xb1	; 177
      00064D B1                    1844 	.db #0xb1	; 177
      00064E B1                    1845 	.db #0xb1	; 177
      00064F B1                    1846 	.db #0xb1	; 177
      000650                       1847 _color_column_1:
      000650 F1                    1848 	.db #0xf1	; 241
      000651 E1                    1849 	.db #0xe1	; 225
      000652 E1                    1850 	.db #0xe1	; 225
      000653 E1                    1851 	.db #0xe1	; 225
      000654 E1                    1852 	.db #0xe1	; 225
      000655 E1                    1853 	.db #0xe1	; 225
      000656 E1                    1854 	.db #0xe1	; 225
      000657 E1                    1855 	.db #0xe1	; 225
      000658                       1856 _color_column_2:
      000658 F1                    1857 	.db #0xf1	; 241
      000659 E1                    1858 	.db #0xe1	; 225
      00065A E1                    1859 	.db #0xe1	; 225
      00065B E1                    1860 	.db #0xe1	; 225
      00065C E1                    1861 	.db #0xe1	; 225
      00065D E1                    1862 	.db #0xe1	; 225
      00065E E1                    1863 	.db #0xe1	; 225
      00065F E1                    1864 	.db #0xe1	; 225
      000660                       1865 _color_column_3:
      000660 F1                    1866 	.db #0xf1	; 241
      000661 E1                    1867 	.db #0xe1	; 225
      000662 E1                    1868 	.db #0xe1	; 225
      000663 E1                    1869 	.db #0xe1	; 225
      000664 E1                    1870 	.db #0xe1	; 225
      000665 E1                    1871 	.db #0xe1	; 225
      000666 E1                    1872 	.db #0xe1	; 225
      000667 E1                    1873 	.db #0xe1	; 225
      000668                       1874 _color_column_4:
      000668 F1                    1875 	.db #0xf1	; 241
      000669 F1                    1876 	.db #0xf1	; 241
      00066A F1                    1877 	.db #0xf1	; 241
      00066B F1                    1878 	.db #0xf1	; 241
      00066C F1                    1879 	.db #0xf1	; 241
      00066D F1                    1880 	.db #0xf1	; 241
      00066E F1                    1881 	.db #0xf1	; 241
      00066F F1                    1882 	.db #0xf1	; 241
      000670                       1883 _color_column_5:
      000670 E1                    1884 	.db #0xe1	; 225
      000671 E1                    1885 	.db #0xe1	; 225
      000672 E1                    1886 	.db #0xe1	; 225
      000673 E1                    1887 	.db #0xe1	; 225
      000674 E1                    1888 	.db #0xe1	; 225
      000675 E1                    1889 	.db #0xe1	; 225
      000676 E1                    1890 	.db #0xe1	; 225
      000677 E1                    1891 	.db #0xe1	; 225
      000678                       1892 _color_column_6:
      000678 E1                    1893 	.db #0xe1	; 225
      000679 E1                    1894 	.db #0xe1	; 225
      00067A E1                    1895 	.db #0xe1	; 225
      00067B 41                    1896 	.db #0x41	; 65	'A'
      00067C 41                    1897 	.db #0x41	; 65	'A'
      00067D 41                    1898 	.db #0x41	; 65	'A'
      00067E 41                    1899 	.db #0x41	; 65	'A'
      00067F 41                    1900 	.db #0x41	; 65	'A'
      000680                       1901 _color_column_7:
      000680 F1                    1902 	.db #0xf1	; 241
      000681 F1                    1903 	.db #0xf1	; 241
      000682 F1                    1904 	.db #0xf1	; 241
      000683 F1                    1905 	.db #0xf1	; 241
      000684 F1                    1906 	.db #0xf1	; 241
      000685 F1                    1907 	.db #0xf1	; 241
      000686 F1                    1908 	.db #0xf1	; 241
      000687 F1                    1909 	.db #0xf1	; 241
      000688                       1910 _color_column_8:
      000688 E1                    1911 	.db #0xe1	; 225
      000689 E1                    1912 	.db #0xe1	; 225
      00068A E1                    1913 	.db #0xe1	; 225
      00068B F1                    1914 	.db #0xf1	; 241
      00068C E1                    1915 	.db #0xe1	; 225
      00068D E1                    1916 	.db #0xe1	; 225
      00068E E1                    1917 	.db #0xe1	; 225
      00068F E1                    1918 	.db #0xe1	; 225
      000690                       1919 _color_column_9:
      000690 41                    1920 	.db #0x41	; 65	'A'
      000691 41                    1921 	.db #0x41	; 65	'A'
      000692 41                    1922 	.db #0x41	; 65	'A'
      000693 F1                    1923 	.db #0xf1	; 241
      000694 41                    1924 	.db #0x41	; 65	'A'
      000695 41                    1925 	.db #0x41	; 65	'A'
      000696 41                    1926 	.db #0x41	; 65	'A'
      000697 41                    1927 	.db #0x41	; 65	'A'
      000698                       1928 _color_column_10:
      000698 F1                    1929 	.db #0xf1	; 241
      000699 F1                    1930 	.db #0xf1	; 241
      00069A F1                    1931 	.db #0xf1	; 241
      00069B F1                    1932 	.db #0xf1	; 241
      00069C F1                    1933 	.db #0xf1	; 241
      00069D F1                    1934 	.db #0xf1	; 241
      00069E F1                    1935 	.db #0xf1	; 241
      00069F F1                    1936 	.db #0xf1	; 241
      0006A0                       1937 _color_column_11:
      0006A0 E1                    1938 	.db #0xe1	; 225
      0006A1 E1                    1939 	.db #0xe1	; 225
      0006A2 E1                    1940 	.db #0xe1	; 225
      0006A3 E1                    1941 	.db #0xe1	; 225
      0006A4 E1                    1942 	.db #0xe1	; 225
      0006A5 E1                    1943 	.db #0xe1	; 225
      0006A6 E1                    1944 	.db #0xe1	; 225
      0006A7 E1                    1945 	.db #0xe1	; 225
      0006A8                       1946 _color_column_12:
      0006A8 41                    1947 	.db #0x41	; 65	'A'
      0006A9 41                    1948 	.db #0x41	; 65	'A'
      0006AA 41                    1949 	.db #0x41	; 65	'A'
      0006AB 41                    1950 	.db #0x41	; 65	'A'
      0006AC 41                    1951 	.db #0x41	; 65	'A'
      0006AD 41                    1952 	.db #0x41	; 65	'A'
      0006AE 41                    1953 	.db #0x41	; 65	'A'
      0006AF 41                    1954 	.db #0x41	; 65	'A'
      0006B0                       1955 _color_column_16:
      0006B0 F1                    1956 	.db #0xf1	; 241
      0006B1 F1                    1957 	.db #0xf1	; 241
      0006B2 F1                    1958 	.db #0xf1	; 241
      0006B3 F1                    1959 	.db #0xf1	; 241
      0006B4 F1                    1960 	.db #0xf1	; 241
      0006B5 F1                    1961 	.db #0xf1	; 241
      0006B6 F1                    1962 	.db #0xf1	; 241
      0006B7 F1                    1963 	.db #0xf1	; 241
      0006B8                       1964 _color_column_17:
      0006B8 E1                    1965 	.db #0xe1	; 225
      0006B9 E1                    1966 	.db #0xe1	; 225
      0006BA E1                    1967 	.db #0xe1	; 225
      0006BB E1                    1968 	.db #0xe1	; 225
      0006BC E1                    1969 	.db #0xe1	; 225
      0006BD E1                    1970 	.db #0xe1	; 225
      0006BE E1                    1971 	.db #0xe1	; 225
      0006BF E1                    1972 	.db #0xe1	; 225
      0006C0                       1973 _color_column_18:
      0006C0 41                    1974 	.db #0x41	; 65	'A'
      0006C1 41                    1975 	.db #0x41	; 65	'A'
      0006C2 41                    1976 	.db #0x41	; 65	'A'
      0006C3 41                    1977 	.db #0x41	; 65	'A'
      0006C4 41                    1978 	.db #0x41	; 65	'A'
      0006C5 E1                    1979 	.db #0xe1	; 225
      0006C6 E1                    1980 	.db #0xe1	; 225
      0006C7 E1                    1981 	.db #0xe1	; 225
      0006C8                       1982 _color_column_13:
      0006C8 E1                    1983 	.db #0xe1	; 225
      0006C9 E1                    1984 	.db #0xe1	; 225
      0006CA E1                    1985 	.db #0xe1	; 225
      0006CB E1                    1986 	.db #0xe1	; 225
      0006CC E1                    1987 	.db #0xe1	; 225
      0006CD E1                    1988 	.db #0xe1	; 225
      0006CE E1                    1989 	.db #0xe1	; 225
      0006CF F1                    1990 	.db #0xf1	; 241
      0006D0                       1991 _color_column_14:
      0006D0 E1                    1992 	.db #0xe1	; 225
      0006D1 E1                    1993 	.db #0xe1	; 225
      0006D2 E1                    1994 	.db #0xe1	; 225
      0006D3 E1                    1995 	.db #0xe1	; 225
      0006D4 E1                    1996 	.db #0xe1	; 225
      0006D5 E1                    1997 	.db #0xe1	; 225
      0006D6 E1                    1998 	.db #0xe1	; 225
      0006D7 F1                    1999 	.db #0xf1	; 241
      0006D8                       2000 _color_column_15:
      0006D8 E1                    2001 	.db #0xe1	; 225
      0006D9 E1                    2002 	.db #0xe1	; 225
      0006DA E1                    2003 	.db #0xe1	; 225
      0006DB E1                    2004 	.db #0xe1	; 225
      0006DC E1                    2005 	.db #0xe1	; 225
      0006DD E1                    2006 	.db #0xe1	; 225
      0006DE E1                    2007 	.db #0xe1	; 225
      0006DF F1                    2008 	.db #0xf1	; 241
      0006E0                       2009 _color_dust_0:
      0006E0 F1                    2010 	.db #0xf1	; 241
      0006E1 F1                    2011 	.db #0xf1	; 241
      0006E2 F1                    2012 	.db #0xf1	; 241
      0006E3 F1                    2013 	.db #0xf1	; 241
      0006E4 F1                    2014 	.db #0xf1	; 241
      0006E5 F1                    2015 	.db #0xf1	; 241
      0006E6 F1                    2016 	.db #0xf1	; 241
      0006E7 F1                    2017 	.db #0xf1	; 241
      0006E8                       2018 _color_dust_1:
      0006E8 F1                    2019 	.db #0xf1	; 241
      0006E9 F1                    2020 	.db #0xf1	; 241
      0006EA F1                    2021 	.db #0xf1	; 241
      0006EB F1                    2022 	.db #0xf1	; 241
      0006EC F1                    2023 	.db #0xf1	; 241
      0006ED F1                    2024 	.db #0xf1	; 241
      0006EE F1                    2025 	.db #0xf1	; 241
      0006EF F1                    2026 	.db #0xf1	; 241
      0006F0                       2027 _color_dust_2:
      0006F0 F1                    2028 	.db #0xf1	; 241
      0006F1 F1                    2029 	.db #0xf1	; 241
      0006F2 F1                    2030 	.db #0xf1	; 241
      0006F3 F1                    2031 	.db #0xf1	; 241
      0006F4 F1                    2032 	.db #0xf1	; 241
      0006F5 F1                    2033 	.db #0xf1	; 241
      0006F6 F1                    2034 	.db #0xf1	; 241
      0006F7 F1                    2035 	.db #0xf1	; 241
      0006F8                       2036 _color_dust_3:
      0006F8 F1                    2037 	.db #0xf1	; 241
      0006F9 F1                    2038 	.db #0xf1	; 241
      0006FA F1                    2039 	.db #0xf1	; 241
      0006FB F1                    2040 	.db #0xf1	; 241
      0006FC F1                    2041 	.db #0xf1	; 241
      0006FD F1                    2042 	.db #0xf1	; 241
      0006FE F1                    2043 	.db #0xf1	; 241
      0006FF F1                    2044 	.db #0xf1	; 241
      000700                       2045 _color_font_1:
      000700 F1                    2046 	.db #0xf1	; 241
      000701 F1                    2047 	.db #0xf1	; 241
      000702 E1                    2048 	.db #0xe1	; 225
      000703 71                    2049 	.db #0x71	; 113	'q'
      000704 71                    2050 	.db #0x71	; 113	'q'
      000705 51                    2051 	.db #0x51	; 81	'Q'
      000706 51                    2052 	.db #0x51	; 81	'Q'
      000707 41                    2053 	.db #0x41	; 65	'A'
      000708                       2054 _color_font_2:
      000708 61                    2055 	.db #0x61	; 97	'a'
      000709 61                    2056 	.db #0x61	; 97	'a'
      00070A 81                    2057 	.db #0x81	; 129
      00070B 81                    2058 	.db #0x81	; 129
      00070C 91                    2059 	.db #0x91	; 145
      00070D 91                    2060 	.db #0x91	; 145
      00070E E1                    2061 	.db #0xe1	; 225
      00070F E1                    2062 	.db #0xe1	; 225
      000710                       2063 _color_title_1:
      000710 A1                    2064 	.db #0xa1	; 161
      000711 A1                    2065 	.db #0xa1	; 161
      000712 A1                    2066 	.db #0xa1	; 161
      000713 A1                    2067 	.db #0xa1	; 161
      000714 A1                    2068 	.db #0xa1	; 161
      000715 A1                    2069 	.db #0xa1	; 161
      000716 A1                    2070 	.db #0xa1	; 161
      000717 A1                    2071 	.db #0xa1	; 161
      000718                       2072 _color_title_2:
      000718 B1                    2073 	.db #0xb1	; 177
      000719 B1                    2074 	.db #0xb1	; 177
      00071A B1                    2075 	.db #0xb1	; 177
      00071B B1                    2076 	.db #0xb1	; 177
      00071C B1                    2077 	.db #0xb1	; 177
      00071D B1                    2078 	.db #0xb1	; 177
      00071E B1                    2079 	.db #0xb1	; 177
      00071F B1                    2080 	.db #0xb1	; 177
      000720                       2081 _color_title_3:
      000720 D1                    2082 	.db #0xd1	; 209
      000721 D1                    2083 	.db #0xd1	; 209
      000722 D1                    2084 	.db #0xd1	; 209
      000723 D1                    2085 	.db #0xd1	; 209
      000724 D1                    2086 	.db #0xd1	; 209
      000725 D1                    2087 	.db #0xd1	; 209
      000726 D1                    2088 	.db #0xd1	; 209
      000727 D1                    2089 	.db #0xd1	; 209
      000728                       2090 _color_title_4:
      000728 F1                    2091 	.db #0xf1	; 241
      000729 F1                    2092 	.db #0xf1	; 241
      00072A F1                    2093 	.db #0xf1	; 241
      00072B F1                    2094 	.db #0xf1	; 241
      00072C F1                    2095 	.db #0xf1	; 241
      00072D F1                    2096 	.db #0xf1	; 241
      00072E F1                    2097 	.db #0xf1	; 241
      00072F F1                    2098 	.db #0xf1	; 241
      000730                       2099 _color_title_5:
      000730 71                    2100 	.db #0x71	; 113	'q'
      000731 71                    2101 	.db #0x71	; 113	'q'
      000732 71                    2102 	.db #0x71	; 113	'q'
      000733 71                    2103 	.db #0x71	; 113	'q'
      000734 71                    2104 	.db #0x71	; 113	'q'
      000735 71                    2105 	.db #0x71	; 113	'q'
      000736 71                    2106 	.db #0x71	; 113	'q'
      000737 71                    2107 	.db #0x71	; 113	'q'
      000738                       2108 _color_title_6:
      000738 51                    2109 	.db #0x51	; 81	'Q'
      000739 51                    2110 	.db #0x51	; 81	'Q'
      00073A 51                    2111 	.db #0x51	; 81	'Q'
      00073B 51                    2112 	.db #0x51	; 81	'Q'
      00073C 51                    2113 	.db #0x51	; 81	'Q'
      00073D 51                    2114 	.db #0x51	; 81	'Q'
      00073E 51                    2115 	.db #0x51	; 81	'Q'
      00073F 51                    2116 	.db #0x51	; 81	'Q'
      000740                       2117 _color_title_7:
      000740 41                    2118 	.db #0x41	; 65	'A'
      000741 41                    2119 	.db #0x41	; 65	'A'
      000742 41                    2120 	.db #0x41	; 65	'A'
      000743 41                    2121 	.db #0x41	; 65	'A'
      000744 41                    2122 	.db #0x41	; 65	'A'
      000745 41                    2123 	.db #0x41	; 65	'A'
      000746 41                    2124 	.db #0x41	; 65	'A'
      000747 41                    2125 	.db #0x41	; 65	'A'
      000748                       2126 _sprite_arrow_0:
      000748 00                    2127 	.db #0x00	; 0
      000749 00                    2128 	.db #0x00	; 0
      00074A 00                    2129 	.db #0x00	; 0
      00074B 00                    2130 	.db #0x00	; 0
      00074C 00                    2131 	.db #0x00	; 0
      00074D 00                    2132 	.db #0x00	; 0
      00074E 00                    2133 	.db #0x00	; 0
      00074F 00                    2134 	.db #0x00	; 0
      000750                       2135 _sprite_arrow_1:
      000750 FF                    2136 	.db #0xff	; 255
      000751 00                    2137 	.db #0x00	; 0
      000752 3F                    2138 	.db #0x3f	; 63
      000753 00                    2139 	.db #0x00	; 0
      000754 0F                    2140 	.db #0x0f	; 15
      000755 00                    2141 	.db #0x00	; 0
      000756 03                    2142 	.db #0x03	; 3
      000757 00                    2143 	.db #0x00	; 0
      000758                       2144 _sprite_arrow_2:
      000758 00                    2145 	.db #0x00	; 0
      000759 00                    2146 	.db #0x00	; 0
      00075A 00                    2147 	.db #0x00	; 0
      00075B 00                    2148 	.db #0x00	; 0
      00075C 00                    2149 	.db #0x00	; 0
      00075D 00                    2150 	.db #0x00	; 0
      00075E 00                    2151 	.db #0x00	; 0
      00075F 00                    2152 	.db #0x00	; 0
      000760                       2153 _sprite_arrow_3:
      000760 FF                    2154 	.db #0xff	; 255
      000761 00                    2155 	.db #0x00	; 0
      000762 FC                    2156 	.db #0xfc	; 252
      000763 00                    2157 	.db #0x00	; 0
      000764 F0                    2158 	.db #0xf0	; 240
      000765 00                    2159 	.db #0x00	; 0
      000766 C0                    2160 	.db #0xc0	; 192
      000767 00                    2161 	.db #0x00	; 0
      000768                       2162 _sprite_3x_hit_1:
      000768 00                    2163 	.db #0x00	; 0
      000769 3E                    2164 	.db #0x3e	; 62
      00076A 63                    2165 	.db #0x63	; 99	'c'
      00076B 03                    2166 	.db #0x03	; 3
      00076C 03                    2167 	.db #0x03	; 3
      00076D 1E                    2168 	.db #0x1e	; 30
      00076E 03                    2169 	.db #0x03	; 3
      00076F 03                    2170 	.db #0x03	; 3
      000770 63                    2171 	.db #0x63	; 99	'c'
      000771 3E                    2172 	.db #0x3e	; 62
      000772 00                    2173 	.db #0x00	; 0
      000773 00                    2174 	.db #0x00	; 0
      000774 00                    2175 	.db #0x00	; 0
      000775 00                    2176 	.db #0x00	; 0
      000776 00                    2177 	.db #0x00	; 0
      000777 00                    2178 	.db #0x00	; 0
      000778 00                    2179 	.db #0x00	; 0
      000779 00                    2180 	.db #0x00	; 0
      00077A 00                    2181 	.db #0x00	; 0
      00077B 63                    2182 	.db #0x63	; 99	'c'
      00077C 36                    2183 	.db #0x36	; 54	'6'
      00077D 1C                    2184 	.db #0x1c	; 28
      00077E 08                    2185 	.db #0x08	; 8
      00077F 1C                    2186 	.db #0x1c	; 28
      000780 36                    2187 	.db #0x36	; 54	'6'
      000781 63                    2188 	.db #0x63	; 99	'c'
      000782 00                    2189 	.db #0x00	; 0
      000783 00                    2190 	.db #0x00	; 0
      000784 00                    2191 	.db #0x00	; 0
      000785 00                    2192 	.db #0x00	; 0
      000786 00                    2193 	.db #0x00	; 0
      000787 00                    2194 	.db #0x00	; 0
      000788                       2195 _sprite_3x_hit_2:
      000788 00                    2196 	.db #0x00	; 0
      000789 77                    2197 	.db #0x77	; 119	'w'
      00078A 22                    2198 	.db #0x22	; 34
      00078B 22                    2199 	.db #0x22	; 34
      00078C 22                    2200 	.db #0x22	; 34
      00078D 3E                    2201 	.db #0x3e	; 62
      00078E 22                    2202 	.db #0x22	; 34
      00078F 22                    2203 	.db #0x22	; 34
      000790 22                    2204 	.db #0x22	; 34
      000791 77                    2205 	.db #0x77	; 119	'w'
      000792 00                    2206 	.db #0x00	; 0
      000793 00                    2207 	.db #0x00	; 0
      000794 00                    2208 	.db #0x00	; 0
      000795 00                    2209 	.db #0x00	; 0
      000796 00                    2210 	.db #0x00	; 0
      000797 00                    2211 	.db #0x00	; 0
      000798 00                    2212 	.db #0x00	; 0
      000799 77                    2213 	.db #0x77	; 119	'w'
      00079A 25                    2214 	.db #0x25	; 37
      00079B 21                    2215 	.db #0x21	; 33
      00079C 21                    2216 	.db #0x21	; 33
      00079D 21                    2217 	.db #0x21	; 33
      00079E 21                    2218 	.db #0x21	; 33
      00079F 21                    2219 	.db #0x21	; 33
      0007A0 21                    2220 	.db #0x21	; 33
      0007A1 73                    2221 	.db #0x73	; 115	's'
      0007A2 00                    2222 	.db #0x00	; 0
      0007A3 00                    2223 	.db #0x00	; 0
      0007A4 00                    2224 	.db #0x00	; 0
      0007A5 00                    2225 	.db #0x00	; 0
      0007A6 00                    2226 	.db #0x00	; 0
      0007A7 00                    2227 	.db #0x00	; 0
      0007A8                       2228 _sprite_3x_hit_3:
      0007A8 00                    2229 	.db #0x00	; 0
      0007A9 C0                    2230 	.db #0xc0	; 192
      0007AA 40                    2231 	.db #0x40	; 64
      0007AB 00                    2232 	.db #0x00	; 0
      0007AC 00                    2233 	.db #0x00	; 0
      0007AD 00                    2234 	.db #0x00	; 0
      0007AE 00                    2235 	.db #0x00	; 0
      0007AF 00                    2236 	.db #0x00	; 0
      0007B0 00                    2237 	.db #0x00	; 0
      0007B1 80                    2238 	.db #0x80	; 128
      0007B2 00                    2239 	.db #0x00	; 0
      0007B3 00                    2240 	.db #0x00	; 0
      0007B4 00                    2241 	.db #0x00	; 0
      0007B5 00                    2242 	.db #0x00	; 0
      0007B6 00                    2243 	.db #0x00	; 0
      0007B7 00                    2244 	.db #0x00	; 0
      0007B8 00                    2245 	.db #0x00	; 0
      0007B9 00                    2246 	.db #0x00	; 0
      0007BA 00                    2247 	.db #0x00	; 0
      0007BB 00                    2248 	.db #0x00	; 0
      0007BC 00                    2249 	.db #0x00	; 0
      0007BD 00                    2250 	.db #0x00	; 0
      0007BE 00                    2251 	.db #0x00	; 0
      0007BF 00                    2252 	.db #0x00	; 0
      0007C0 00                    2253 	.db #0x00	; 0
      0007C1 00                    2254 	.db #0x00	; 0
      0007C2 00                    2255 	.db #0x00	; 0
      0007C3 00                    2256 	.db #0x00	; 0
      0007C4 00                    2257 	.db #0x00	; 0
      0007C5 00                    2258 	.db #0x00	; 0
      0007C6 00                    2259 	.db #0x00	; 0
      0007C7 00                    2260 	.db #0x00	; 0
                                   2261 ;src\/Graphics.h:8: void DrawString(const char* str, byte col, byte line) {
                                   2262 ;	---------------------------------
                                   2263 ; Function DrawString
                                   2264 ; ---------------------------------
      0007C8                       2265 _DrawString::
      0007C8 DD E5            [15] 2266 	push	ix
      0007CA DD 21 00 00      [14] 2267 	ld	ix,#0
      0007CE DD 39            [15] 2268 	add	ix,sp
                                   2269 ;src\/Graphics.h:9: while (*str) {
      0007D0 DD 6E 06         [19] 2270 	ld	l, 6 (ix)
      0007D3 DD 4E 04         [19] 2271 	ld	c, 4 (ix)
      0007D6 DD 46 05         [19] 2272 	ld	b, 5 (ix)
      0007D9                       2273 00101$:
      0007D9 0A               [ 7] 2274 	ld	a, (bc)
      0007DA B7               [ 4] 2275 	or	a, a
      0007DB 28 1A            [12] 2276 	jr	Z, 00104$
                                   2277 ;src\/Graphics.h:10: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0007DD 55               [ 4] 2278 	ld	d, l
      0007DE 2C               [ 4] 2279 	inc	l
      0007DF DD 75 06         [19] 2280 	ld	6 (ix), l
      0007E2 03               [ 6] 2281 	inc	bc
      0007E3 C6 0F            [ 7] 2282 	add	a, #0x0f
      0007E5 E5               [11] 2283 	push	hl
      0007E6 C5               [11] 2284 	push	bc
      0007E7 DD 66 07         [19] 2285 	ld	h, 7 (ix)
      0007EA 6A               [ 4] 2286 	ld	l, d
      0007EB E5               [11] 2287 	push	hl
      0007EC F5               [11] 2288 	push	af
      0007ED 33               [ 6] 2289 	inc	sp
      0007EE CDrEDr00         [17] 2290 	call	_DrawChar
      0007F1 F1               [10] 2291 	pop	af
      0007F2 33               [ 6] 2292 	inc	sp
      0007F3 C1               [10] 2293 	pop	bc
      0007F4 E1               [10] 2294 	pop	hl
      0007F5 18 E2            [12] 2295 	jr	00101$
      0007F7                       2296 00104$:
                                   2297 ;src\/Graphics.h:12: }
      0007F7 DD E1            [14] 2298 	pop	ix
      0007F9 C9               [10] 2299 	ret
                                   2300 ;src\/Graphics.h:14: void DrawNumber(word number, byte col, byte line) {
                                   2301 ;	---------------------------------
                                   2302 ; Function DrawNumber
                                   2303 ; ---------------------------------
      0007FA                       2304 _DrawNumber::
      0007FA DD E5            [15] 2305 	push	ix
      0007FC DD 21 00 00      [14] 2306 	ld	ix,#0
      000800 DD 39            [15] 2307 	add	ix,sp
      000802 21 FA FF         [10] 2308 	ld	hl, #-6
      000805 39               [11] 2309 	add	hl, sp
      000806 F9               [ 6] 2310 	ld	sp, hl
                                   2311 ;src\/Graphics.h:17: bool trailingZero = TRUE;
      000807 DD 36 FA 01      [19] 2312 	ld	-6 (ix), #0x01
                                   2313 ;src\/Graphics.h:19: DrawString("      ", col, line); // Clear space for number (6 digits)
      00080B DD 66 07         [19] 2314 	ld	h, 7 (ix)
      00080E DD 6E 06         [19] 2315 	ld	l, 6 (ix)
      000811 E5               [11] 2316 	push	hl
      000812 21rAEr08         [10] 2317 	ld	hl, #___str_0
      000815 E5               [11] 2318 	push	hl
      000816 CDrC8r07         [17] 2319 	call	_DrawString
      000819 F1               [10] 2320 	pop	af
      00081A F1               [10] 2321 	pop	af
                                   2322 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00081B DD 7E 06         [19] 2323 	ld	a, 6 (ix)
      00081E DD 77 FF         [19] 2324 	ld	-1 (ix), a
      000821 1E 06            [ 7] 2325 	ld	e, #0x06
      000823                       2326 00109$:
      000823 7B               [ 4] 2327 	ld	a, e
      000824 B7               [ 4] 2328 	or	a, a
      000825 CArA9r08         [10] 2329 	jp	Z, 00111$
                                   2330 ;src\/Graphics.h:23: power = Power(10, i - 1);
      000828 7B               [ 4] 2331 	ld	a, e
      000829 3D               [ 4] 2332 	dec	a
      00082A D5               [11] 2333 	push	de
      00082B 57               [ 4] 2334 	ld	d,a
      00082C 1E 0A            [ 7] 2335 	ld	e,#0x0a
      00082E D5               [11] 2336 	push	de
      00082F CDr1Dr00         [17] 2337 	call	_Power
      000832 F1               [10] 2338 	pop	af
      000833 D1               [10] 2339 	pop	de
      000834 DD 75 FB         [19] 2340 	ld	-5 (ix), l
      000837 DD 74 FC         [19] 2341 	ld	-4 (ix), h
                                   2342 ;src\/Graphics.h:25: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00083A D5               [11] 2343 	push	de
      00083B DD 6E FB         [19] 2344 	ld	l, -5 (ix)
      00083E DD 66 FC         [19] 2345 	ld	h, -4 (ix)
      000841 E5               [11] 2346 	push	hl
      000842 DD 6E 04         [19] 2347 	ld	l, 4 (ix)
      000845 DD 66 05         [19] 2348 	ld	h, 5 (ix)
      000848 E5               [11] 2349 	push	hl
      000849 CDr00r00         [17] 2350 	call	__divuint
      00084C F1               [10] 2351 	pop	af
      00084D F1               [10] 2352 	pop	af
      00084E DD 75 FD         [19] 2353 	ld	-3 (ix), l
      000851 DD 74 FE         [19] 2354 	ld	-2 (ix), h
      000854 D1               [10] 2355 	pop	de
      000855 DD 7E FA         [19] 2356 	ld	a, -6 (ix)
      000858 B7               [ 4] 2357 	or	a, a
      000859 28 0C            [12] 2358 	jr	Z, 00102$
      00085B DD 7E FE         [19] 2359 	ld	a, -2 (ix)
      00085E DD B6 FD         [19] 2360 	or	a, -3 (ix)
      000861 28 04            [12] 2361 	jr	Z, 00102$
      000863 DD 36 FA 00      [19] 2362 	ld	-6 (ix), #0
      000867                       2363 00102$:
                                   2364 ;src\/Graphics.h:27: if(!trailingZero || i == 1) {
      000867 DD 7E FA         [19] 2365 	ld	a, -6 (ix)
      00086A B7               [ 4] 2366 	or	a, a
      00086B 28 04            [12] 2367 	jr	Z, 00104$
      00086D 7B               [ 4] 2368 	ld	a, e
      00086E 3D               [ 4] 2369 	dec	a
      00086F 20 31            [12] 2370 	jr	NZ, 00105$
      000871                       2371 00104$:
                                   2372 ;src\/Graphics.h:28: DrawChar((number / power) + CHAR_0, col, line);
      000871 DD 7E FD         [19] 2373 	ld	a, -3 (ix)
      000874 C6 3F            [ 7] 2374 	add	a, #0x3f
      000876 D5               [11] 2375 	push	de
      000877 DD 66 07         [19] 2376 	ld	h, 7 (ix)
      00087A E5               [11] 2377 	push	hl
      00087B 33               [ 6] 2378 	inc	sp
      00087C DD 66 FF         [19] 2379 	ld	h, -1 (ix)
      00087F E5               [11] 2380 	push	hl
      000880 33               [ 6] 2381 	inc	sp
      000881 F5               [11] 2382 	push	af
      000882 33               [ 6] 2383 	inc	sp
      000883 CDrEDr00         [17] 2384 	call	_DrawChar
      000886 F1               [10] 2385 	pop	af
      000887 33               [ 6] 2386 	inc	sp
      000888 DD 6E FB         [19] 2387 	ld	l, -5 (ix)
      00088B DD 66 FC         [19] 2388 	ld	h, -4 (ix)
      00088E E5               [11] 2389 	push	hl
      00088F DD 6E 04         [19] 2390 	ld	l, 4 (ix)
      000892 DD 66 05         [19] 2391 	ld	h, 5 (ix)
      000895 E5               [11] 2392 	push	hl
      000896 CDr00r00         [17] 2393 	call	__moduint
      000899 F1               [10] 2394 	pop	af
      00089A F1               [10] 2395 	pop	af
      00089B D1               [10] 2396 	pop	de
      00089C DD 75 04         [19] 2397 	ld	4 (ix), l
      00089F DD 74 05         [19] 2398 	ld	5 (ix), h
      0008A2                       2399 00105$:
                                   2400 ;src\/Graphics.h:32: col++;
      0008A2 DD 34 FF         [23] 2401 	inc	-1 (ix)
                                   2402 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0008A5 1D               [ 4] 2403 	dec	e
      0008A6 C3r23r08         [10] 2404 	jp	00109$
      0008A9                       2405 00111$:
                                   2406 ;src\/Graphics.h:37: }
      0008A9 DD F9            [10] 2407 	ld	sp, ix
      0008AB DD E1            [14] 2408 	pop	ix
      0008AD C9               [10] 2409 	ret
      0008AE                       2410 ___str_0:
      0008AE 20 20 20 20 20 20     2411 	.ascii "      "
      0008B4 00                    2412 	.db 0x00
                                   2413 ;src\/Graphics.h:39: void DrawColumn(byte col) {
                                   2414 ;	---------------------------------
                                   2415 ; Function DrawColumn
                                   2416 ; ---------------------------------
      0008B5                       2417 _DrawColumn::
      0008B5 DD E5            [15] 2418 	push	ix
      0008B7 DD 21 00 00      [14] 2419 	ld	ix,#0
      0008BB DD 39            [15] 2420 	add	ix,sp
      0008BD 3B               [ 6] 2421 	dec	sp
                                   2422 ;src\/Graphics.h:40: WRTVRM(MSX_modedata_screen2.name + col + 0, COLUMN_TOP_1);
      0008BE 2A C7 F3         [16] 2423 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008C1 DD 4E 04         [19] 2424 	ld	c, 4 (ix)
      0008C4 06 00            [ 7] 2425 	ld	b, #0x00
      0008C6 09               [11] 2426 	add	hl, bc
      0008C7 C5               [11] 2427 	push	bc
      0008C8 3E 18            [ 7] 2428 	ld	a, #0x18
      0008CA F5               [11] 2429 	push	af
      0008CB 33               [ 6] 2430 	inc	sp
      0008CC E5               [11] 2431 	push	hl
      0008CD CDr00r00         [17] 2432 	call	_WRTVRM
      0008D0 F1               [10] 2433 	pop	af
      0008D1 33               [ 6] 2434 	inc	sp
      0008D2 C1               [10] 2435 	pop	bc
                                   2436 ;src\/Graphics.h:41: WRTVRM(MSX_modedata_screen2.name + col + 1, COLUMN_TOP_1 + 1);
      0008D3 2A C7 F3         [16] 2437 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008D6 09               [11] 2438 	add	hl, bc
      0008D7 23               [ 6] 2439 	inc	hl
      0008D8 C5               [11] 2440 	push	bc
      0008D9 3E 19            [ 7] 2441 	ld	a, #0x19
      0008DB F5               [11] 2442 	push	af
      0008DC 33               [ 6] 2443 	inc	sp
      0008DD E5               [11] 2444 	push	hl
      0008DE CDr00r00         [17] 2445 	call	_WRTVRM
      0008E1 F1               [10] 2446 	pop	af
      0008E2 33               [ 6] 2447 	inc	sp
      0008E3 C1               [10] 2448 	pop	bc
                                   2449 ;src\/Graphics.h:42: WRTVRM(MSX_modedata_screen2.name + col + 2, COLUMN_TOP_1 + 2);
      0008E4 2A C7 F3         [16] 2450 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008E7 09               [11] 2451 	add	hl, bc
      0008E8 23               [ 6] 2452 	inc	hl
      0008E9 23               [ 6] 2453 	inc	hl
      0008EA C5               [11] 2454 	push	bc
      0008EB 3E 1A            [ 7] 2455 	ld	a, #0x1a
      0008ED F5               [11] 2456 	push	af
      0008EE 33               [ 6] 2457 	inc	sp
      0008EF E5               [11] 2458 	push	hl
      0008F0 CDr00r00         [17] 2459 	call	_WRTVRM
      0008F3 F1               [10] 2460 	pop	af
      0008F4 33               [ 6] 2461 	inc	sp
      0008F5 C1               [10] 2462 	pop	bc
                                   2463 ;src\/Graphics.h:43: WRTVRM(MSX_modedata_screen2.name + col + 32, COLUMN_TOP_1 + 3);
      0008F6 2A C7 F3         [16] 2464 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008F9 09               [11] 2465 	add	hl, bc
      0008FA 11 20 00         [10] 2466 	ld	de, #0x0020
      0008FD 19               [11] 2467 	add	hl, de
      0008FE C5               [11] 2468 	push	bc
      0008FF 3E 1B            [ 7] 2469 	ld	a, #0x1b
      000901 F5               [11] 2470 	push	af
      000902 33               [ 6] 2471 	inc	sp
      000903 E5               [11] 2472 	push	hl
      000904 CDr00r00         [17] 2473 	call	_WRTVRM
      000907 F1               [10] 2474 	pop	af
      000908 33               [ 6] 2475 	inc	sp
      000909 C1               [10] 2476 	pop	bc
                                   2477 ;src\/Graphics.h:44: WRTVRM(MSX_modedata_screen2.name + col + 33, COLUMN_TOP_1 + 4);
      00090A 2A C7 F3         [16] 2478 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00090D 09               [11] 2479 	add	hl, bc
      00090E 11 21 00         [10] 2480 	ld	de, #0x0021
      000911 19               [11] 2481 	add	hl, de
      000912 C5               [11] 2482 	push	bc
      000913 3E 1C            [ 7] 2483 	ld	a, #0x1c
      000915 F5               [11] 2484 	push	af
      000916 33               [ 6] 2485 	inc	sp
      000917 E5               [11] 2486 	push	hl
      000918 CDr00r00         [17] 2487 	call	_WRTVRM
      00091B F1               [10] 2488 	pop	af
      00091C 33               [ 6] 2489 	inc	sp
      00091D C1               [10] 2490 	pop	bc
                                   2491 ;src\/Graphics.h:45: WRTVRM(MSX_modedata_screen2.name + col + 34, COLUMN_TOP_1 + 5);
      00091E 2A C7 F3         [16] 2492 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000921 09               [11] 2493 	add	hl, bc
      000922 11 22 00         [10] 2494 	ld	de, #0x0022
      000925 19               [11] 2495 	add	hl, de
      000926 C5               [11] 2496 	push	bc
      000927 3E 1D            [ 7] 2497 	ld	a, #0x1d
      000929 F5               [11] 2498 	push	af
      00092A 33               [ 6] 2499 	inc	sp
      00092B E5               [11] 2500 	push	hl
      00092C CDr00r00         [17] 2501 	call	_WRTVRM
      00092F F1               [10] 2502 	pop	af
                                   2503 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000930 DD 36 FF 00      [19] 2504 	ld	-1 (ix), #0
      000934 33               [ 6] 2505 	inc	sp
      000935 C1               [10] 2506 	pop	bc
      000936                       2507 00103$:
      000936 DD 7E FF         [19] 2508 	ld	a, -1 (ix)
      000939 D6 14            [ 7] 2509 	sub	a, #0x14
      00093B 30 58            [12] 2510 	jr	NC, 00101$
                                   2511 ;src\/Graphics.h:48: WRTVRM(MSX_modedata_screen2.name + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00093D 2A C7 F3         [16] 2512 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000940 09               [11] 2513 	add	hl, bc
      000941 11 40 00         [10] 2514 	ld	de, #0x0040
      000944 19               [11] 2515 	add	hl, de
      000945 DD 5E FF         [19] 2516 	ld	e, -1 (ix)
      000948 16 00            [ 7] 2517 	ld	d, #0x00
      00094A EB               [ 4] 2518 	ex	de, hl
      00094B 29               [11] 2519 	add	hl, hl
      00094C 29               [11] 2520 	add	hl, hl
      00094D 29               [11] 2521 	add	hl, hl
      00094E 29               [11] 2522 	add	hl, hl
      00094F 29               [11] 2523 	add	hl, hl
      000950 EB               [ 4] 2524 	ex	de, hl
      000951 19               [11] 2525 	add	hl, de
      000952 C5               [11] 2526 	push	bc
      000953 D5               [11] 2527 	push	de
      000954 3E 1E            [ 7] 2528 	ld	a, #0x1e
      000956 F5               [11] 2529 	push	af
      000957 33               [ 6] 2530 	inc	sp
      000958 E5               [11] 2531 	push	hl
      000959 CDr00r00         [17] 2532 	call	_WRTVRM
      00095C F1               [10] 2533 	pop	af
      00095D 33               [ 6] 2534 	inc	sp
      00095E D1               [10] 2535 	pop	de
      00095F C1               [10] 2536 	pop	bc
                                   2537 ;src\/Graphics.h:49: WRTVRM(MSX_modedata_screen2.name + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000960 2A C7 F3         [16] 2538 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000963 09               [11] 2539 	add	hl, bc
      000964 D5               [11] 2540 	push	de
      000965 11 41 00         [10] 2541 	ld	de, #0x0041
      000968 19               [11] 2542 	add	hl, de
      000969 D1               [10] 2543 	pop	de
      00096A 19               [11] 2544 	add	hl, de
      00096B C5               [11] 2545 	push	bc
      00096C D5               [11] 2546 	push	de
      00096D 3E 1F            [ 7] 2547 	ld	a, #0x1f
      00096F F5               [11] 2548 	push	af
      000970 33               [ 6] 2549 	inc	sp
      000971 E5               [11] 2550 	push	hl
      000972 CDr00r00         [17] 2551 	call	_WRTVRM
      000975 F1               [10] 2552 	pop	af
      000976 33               [ 6] 2553 	inc	sp
      000977 D1               [10] 2554 	pop	de
      000978 C1               [10] 2555 	pop	bc
                                   2556 ;src\/Graphics.h:50: WRTVRM(MSX_modedata_screen2.name + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000979 2A C7 F3         [16] 2557 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00097C 09               [11] 2558 	add	hl, bc
      00097D D5               [11] 2559 	push	de
      00097E 11 42 00         [10] 2560 	ld	de, #0x0042
      000981 19               [11] 2561 	add	hl, de
      000982 D1               [10] 2562 	pop	de
      000983 19               [11] 2563 	add	hl, de
      000984 C5               [11] 2564 	push	bc
      000985 3E 20            [ 7] 2565 	ld	a, #0x20
      000987 F5               [11] 2566 	push	af
      000988 33               [ 6] 2567 	inc	sp
      000989 E5               [11] 2568 	push	hl
      00098A CDr00r00         [17] 2569 	call	_WRTVRM
      00098D F1               [10] 2570 	pop	af
      00098E 33               [ 6] 2571 	inc	sp
      00098F C1               [10] 2572 	pop	bc
                                   2573 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000990 DD 34 FF         [23] 2574 	inc	-1 (ix)
      000993 18 A1            [12] 2575 	jr	00103$
      000995                       2576 00101$:
                                   2577 ;src\/Graphics.h:53: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8), COLUMN_MIDDLE_2);
      000995 2A C7 F3         [16] 2578 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000998 09               [11] 2579 	add	hl, bc
      000999 7C               [ 4] 2580 	ld	a, h
      00099A 3C               [ 4] 2581 	inc	a
      00099B 67               [ 4] 2582 	ld	h, a
      00099C C5               [11] 2583 	push	bc
      00099D 3E 21            [ 7] 2584 	ld	a, #0x21
      00099F F5               [11] 2585 	push	af
      0009A0 33               [ 6] 2586 	inc	sp
      0009A1 E5               [11] 2587 	push	hl
      0009A2 CDr00r00         [17] 2588 	call	_WRTVRM
      0009A5 F1               [10] 2589 	pop	af
      0009A6 33               [ 6] 2590 	inc	sp
      0009A7 C1               [10] 2591 	pop	bc
                                   2592 ;src\/Graphics.h:54: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      0009A8 2A C7 F3         [16] 2593 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009AB 09               [11] 2594 	add	hl, bc
      0009AC 11 01 01         [10] 2595 	ld	de, #0x0101
      0009AF 19               [11] 2596 	add	hl, de
      0009B0 C5               [11] 2597 	push	bc
      0009B1 3E 22            [ 7] 2598 	ld	a, #0x22
      0009B3 F5               [11] 2599 	push	af
      0009B4 33               [ 6] 2600 	inc	sp
      0009B5 E5               [11] 2601 	push	hl
      0009B6 CDr00r00         [17] 2602 	call	_WRTVRM
      0009B9 F1               [10] 2603 	pop	af
      0009BA 33               [ 6] 2604 	inc	sp
      0009BB C1               [10] 2605 	pop	bc
                                   2606 ;src\/Graphics.h:55: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0009BC 2A C7 F3         [16] 2607 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009BF 09               [11] 2608 	add	hl, bc
      0009C0 11 02 01         [10] 2609 	ld	de, #0x0102
      0009C3 19               [11] 2610 	add	hl, de
      0009C4 C5               [11] 2611 	push	bc
      0009C5 3E 23            [ 7] 2612 	ld	a, #0x23
      0009C7 F5               [11] 2613 	push	af
      0009C8 33               [ 6] 2614 	inc	sp
      0009C9 E5               [11] 2615 	push	hl
      0009CA CDr00r00         [17] 2616 	call	_WRTVRM
      0009CD F1               [10] 2617 	pop	af
      0009CE 33               [ 6] 2618 	inc	sp
      0009CF C1               [10] 2619 	pop	bc
                                   2620 ;src\/Graphics.h:57: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16), COLUMN_MIDDLE_2);
      0009D0 2A C7 F3         [16] 2621 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009D3 09               [11] 2622 	add	hl, bc
      0009D4 7C               [ 4] 2623 	ld	a, h
      0009D5 C6 02            [ 7] 2624 	add	a, #0x02
      0009D7 67               [ 4] 2625 	ld	h, a
      0009D8 C5               [11] 2626 	push	bc
      0009D9 3E 21            [ 7] 2627 	ld	a, #0x21
      0009DB F5               [11] 2628 	push	af
      0009DC 33               [ 6] 2629 	inc	sp
      0009DD E5               [11] 2630 	push	hl
      0009DE CDr00r00         [17] 2631 	call	_WRTVRM
      0009E1 F1               [10] 2632 	pop	af
      0009E2 33               [ 6] 2633 	inc	sp
      0009E3 C1               [10] 2634 	pop	bc
                                   2635 ;src\/Graphics.h:58: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0009E4 2A C7 F3         [16] 2636 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009E7 09               [11] 2637 	add	hl, bc
      0009E8 11 01 02         [10] 2638 	ld	de, #0x0201
      0009EB 19               [11] 2639 	add	hl, de
      0009EC C5               [11] 2640 	push	bc
      0009ED 3E 22            [ 7] 2641 	ld	a, #0x22
      0009EF F5               [11] 2642 	push	af
      0009F0 33               [ 6] 2643 	inc	sp
      0009F1 E5               [11] 2644 	push	hl
      0009F2 CDr00r00         [17] 2645 	call	_WRTVRM
      0009F5 F1               [10] 2646 	pop	af
      0009F6 33               [ 6] 2647 	inc	sp
      0009F7 C1               [10] 2648 	pop	bc
                                   2649 ;src\/Graphics.h:59: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0009F8 2A C7 F3         [16] 2650 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009FB 09               [11] 2651 	add	hl, bc
      0009FC 11 02 02         [10] 2652 	ld	de, #0x0202
      0009FF 19               [11] 2653 	add	hl, de
      000A00 C5               [11] 2654 	push	bc
      000A01 3E 23            [ 7] 2655 	ld	a, #0x23
      000A03 F5               [11] 2656 	push	af
      000A04 33               [ 6] 2657 	inc	sp
      000A05 E5               [11] 2658 	push	hl
      000A06 CDr00r00         [17] 2659 	call	_WRTVRM
      000A09 F1               [10] 2660 	pop	af
      000A0A 33               [ 6] 2661 	inc	sp
      000A0B C1               [10] 2662 	pop	bc
                                   2663 ;src\/Graphics.h:61: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000A0C 2A C7 F3         [16] 2664 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A0F 09               [11] 2665 	add	hl, bc
      000A10 11 C0 02         [10] 2666 	ld	de, #0x02c0
      000A13 19               [11] 2667 	add	hl, de
      000A14 C5               [11] 2668 	push	bc
      000A15 3E 24            [ 7] 2669 	ld	a, #0x24
      000A17 F5               [11] 2670 	push	af
      000A18 33               [ 6] 2671 	inc	sp
      000A19 E5               [11] 2672 	push	hl
      000A1A CDr00r00         [17] 2673 	call	_WRTVRM
      000A1D F1               [10] 2674 	pop	af
      000A1E 33               [ 6] 2675 	inc	sp
      000A1F C1               [10] 2676 	pop	bc
                                   2677 ;src\/Graphics.h:62: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000A20 2A C7 F3         [16] 2678 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A23 09               [11] 2679 	add	hl, bc
      000A24 11 C1 02         [10] 2680 	ld	de, #0x02c1
      000A27 19               [11] 2681 	add	hl, de
      000A28 C5               [11] 2682 	push	bc
      000A29 3E 25            [ 7] 2683 	ld	a, #0x25
      000A2B F5               [11] 2684 	push	af
      000A2C 33               [ 6] 2685 	inc	sp
      000A2D E5               [11] 2686 	push	hl
      000A2E CDr00r00         [17] 2687 	call	_WRTVRM
      000A31 F1               [10] 2688 	pop	af
      000A32 33               [ 6] 2689 	inc	sp
      000A33 C1               [10] 2690 	pop	bc
                                   2691 ;src\/Graphics.h:63: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000A34 2A C7 F3         [16] 2692 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A37 09               [11] 2693 	add	hl, bc
      000A38 11 C2 02         [10] 2694 	ld	de, #0x02c2
      000A3B 19               [11] 2695 	add	hl, de
      000A3C C5               [11] 2696 	push	bc
      000A3D 3E 26            [ 7] 2697 	ld	a, #0x26
      000A3F F5               [11] 2698 	push	af
      000A40 33               [ 6] 2699 	inc	sp
      000A41 E5               [11] 2700 	push	hl
      000A42 CDr00r00         [17] 2701 	call	_WRTVRM
      000A45 F1               [10] 2702 	pop	af
      000A46 33               [ 6] 2703 	inc	sp
      000A47 C1               [10] 2704 	pop	bc
                                   2705 ;src\/Graphics.h:64: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000A48 2A C7 F3         [16] 2706 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A4B 09               [11] 2707 	add	hl, bc
      000A4C 11 E0 02         [10] 2708 	ld	de, #0x02e0
      000A4F 19               [11] 2709 	add	hl, de
      000A50 C5               [11] 2710 	push	bc
      000A51 3E 27            [ 7] 2711 	ld	a, #0x27
      000A53 F5               [11] 2712 	push	af
      000A54 33               [ 6] 2713 	inc	sp
      000A55 E5               [11] 2714 	push	hl
      000A56 CDr00r00         [17] 2715 	call	_WRTVRM
      000A59 F1               [10] 2716 	pop	af
      000A5A 33               [ 6] 2717 	inc	sp
      000A5B C1               [10] 2718 	pop	bc
                                   2719 ;src\/Graphics.h:65: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000A5C 2A C7 F3         [16] 2720 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A5F 09               [11] 2721 	add	hl, bc
      000A60 11 E1 02         [10] 2722 	ld	de, #0x02e1
      000A63 19               [11] 2723 	add	hl, de
      000A64 C5               [11] 2724 	push	bc
      000A65 3E 28            [ 7] 2725 	ld	a, #0x28
      000A67 F5               [11] 2726 	push	af
      000A68 33               [ 6] 2727 	inc	sp
      000A69 E5               [11] 2728 	push	hl
      000A6A CDr00r00         [17] 2729 	call	_WRTVRM
      000A6D F1               [10] 2730 	pop	af
      000A6E 33               [ 6] 2731 	inc	sp
      000A6F C1               [10] 2732 	pop	bc
                                   2733 ;src\/Graphics.h:66: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000A70 2A C7 F3         [16] 2734 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A73 09               [11] 2735 	add	hl, bc
      000A74 01 E2 02         [10] 2736 	ld	bc, #0x02e2
      000A77 09               [11] 2737 	add	hl, bc
      000A78 3E 29            [ 7] 2738 	ld	a, #0x29
      000A7A F5               [11] 2739 	push	af
      000A7B 33               [ 6] 2740 	inc	sp
      000A7C E5               [11] 2741 	push	hl
      000A7D CDr00r00         [17] 2742 	call	_WRTVRM
      000A80 F1               [10] 2743 	pop	af
      000A81 33               [ 6] 2744 	inc	sp
                                   2745 ;src\/Graphics.h:67: }
      000A82 33               [ 6] 2746 	inc	sp
      000A83 DD E1            [14] 2747 	pop	ix
      000A85 C9               [10] 2748 	ret
                                   2749 ;src\/Graphics.h:69: void DrawScore() {
                                   2750 ;	---------------------------------
                                   2751 ; Function DrawScore
                                   2752 ; ---------------------------------
      000A86                       2753 _DrawScore::
      000A86 DD E5            [15] 2754 	push	ix
      000A88 DD 21 00 00      [14] 2755 	ld	ix,#0
      000A8C DD 39            [15] 2756 	add	ix,sp
      000A8E F5               [11] 2757 	push	af
                                   2758 ;src\/Graphics.h:70: byte bgCounter = 0, bgColor;
      000A8F DD 36 FE 00      [19] 2759 	ld	-2 (ix), #0
                                   2760 ;src\/Graphics.h:74: if(newLevel) {
      000A93 3Ar07r00         [13] 2761 	ld	a,(#_newLevel + 0)
      000A96 B7               [ 4] 2762 	or	a, a
      000A97 CAr8Br0B         [10] 2763 	jp	Z, 00119$
                                   2764 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000A9A DD 36 FF 00      [19] 2765 	ld	-1 (ix), #0
      000A9E                       2766 00121$:
      000A9E DD 7E FF         [19] 2767 	ld	a, -1 (ix)
      000AA1 D6 3C            [ 7] 2768 	sub	a, #0x3c
      000AA3 D2r8Br0B         [10] 2769 	jp	NC, 00119$
                                   2770 ;src\/Graphics.h:76: lastJiffy = JIFFY;
      000AA6 ED 4B 9E FC      [20] 2771 	ld	bc, (_JIFFY)
                                   2772 ;src\/Graphics.h:77: while(lastJiffy == JIFFY) { }
      000AAA                       2773 00101$:
      000AAA 2A 9E FC         [16] 2774 	ld	hl, (_JIFFY)
      000AAD BF               [ 4] 2775 	cp	a, a
      000AAE ED 42            [15] 2776 	sbc	hl, bc
      000AB0 28 F8            [12] 2777 	jr	Z, 00101$
                                   2778 ;src\/Graphics.h:80: if(JIFFY & 0b00000110) {
      000AB2 2A 9E FC         [16] 2779 	ld	hl, (_JIFFY)
      000AB5 7D               [ 4] 2780 	ld	a, l
      000AB6 E6 06            [ 7] 2781 	and	a, #0x06
      000AB8 CAr6Br0B         [10] 2782 	jp	Z,00115$
                                   2783 ;src\/Graphics.h:81: DrawString(" LEVEL", 26, 4);
      000ABB 11 1A 04         [10] 2784 	ld	de, #0x041a
      000ABE D5               [11] 2785 	push	de
      000ABF 21r08r0C         [10] 2786 	ld	hl, #___str_1
      000AC2 E5               [11] 2787 	push	hl
      000AC3 CDrC8r07         [17] 2788 	call	_DrawString
      000AC6 F1               [10] 2789 	pop	af
      000AC7 F1               [10] 2790 	pop	af
                                   2791 ;src\/Graphics.h:82: DrawNumber(level, 26, 5);
      000AC8 3Ar06r00         [13] 2792 	ld	a, (#_level + 0)
      000ACB 4F               [ 4] 2793 	ld	c, a
      000ACC 06 00            [ 7] 2794 	ld	b, #0x00
      000ACE 11 1A 05         [10] 2795 	ld	de, #0x051a
      000AD1 D5               [11] 2796 	push	de
      000AD2 C5               [11] 2797 	push	bc
      000AD3 CDrFAr07         [17] 2798 	call	_DrawNumber
      000AD6 F1               [10] 2799 	pop	af
      000AD7 F1               [10] 2800 	pop	af
                                   2801 ;src\/Graphics.h:88: switch(bgCounter++) {
      000AD8 DD 4E FE         [19] 2802 	ld	c, -2 (ix)
      000ADB DD 34 FE         [23] 2803 	inc	-2 (ix)
      000ADE 3E 07            [ 7] 2804 	ld	a, #0x07
      000AE0 91               [ 4] 2805 	sub	a, c
      000AE1 38 45            [12] 2806 	jr	C, 00112$
      000AE3 06 00            [ 7] 2807 	ld	b, #0x00
      000AE5 21rECr0A         [10] 2808 	ld	hl, #00163$
      000AE8 09               [11] 2809 	add	hl, bc
      000AE9 09               [11] 2810 	add	hl, bc
      000AEA 09               [11] 2811 	add	hl, bc
      000AEB E9               [ 4] 2812 	jp	(hl)
      000AEC                       2813 00163$:
      000AEC C3r04r0B         [10] 2814 	jp	00104$
      000AEF C3r08r0B         [10] 2815 	jp	00105$
      000AF2 C3r0Cr0B         [10] 2816 	jp	00106$
      000AF5 C3r10r0B         [10] 2817 	jp	00107$
      000AF8 C3r14r0B         [10] 2818 	jp	00108$
      000AFB C3r18r0B         [10] 2819 	jp	00109$
      000AFE C3r1Cr0B         [10] 2820 	jp	00110$
      000B01 C3r20r0B         [10] 2821 	jp	00111$
                                   2822 ;src\/Graphics.h:89: case 0:
      000B04                       2823 00104$:
                                   2824 ;src\/Graphics.h:90: bgColor = 0x14;
      000B04 0E 14            [ 7] 2825 	ld	c, #0x14
                                   2826 ;src\/Graphics.h:91: break;
      000B06 18 22            [12] 2827 	jr	00113$
                                   2828 ;src\/Graphics.h:92: case 1:
      000B08                       2829 00105$:
                                   2830 ;src\/Graphics.h:93: bgColor = 0x15;
      000B08 0E 15            [ 7] 2831 	ld	c, #0x15
                                   2832 ;src\/Graphics.h:94: break;
      000B0A 18 1E            [12] 2833 	jr	00113$
                                   2834 ;src\/Graphics.h:95: case 2:
      000B0C                       2835 00106$:
                                   2836 ;src\/Graphics.h:96: bgColor = 0x17;
      000B0C 0E 17            [ 7] 2837 	ld	c, #0x17
                                   2838 ;src\/Graphics.h:97: break;
      000B0E 18 1A            [12] 2839 	jr	00113$
                                   2840 ;src\/Graphics.h:98: case 3:
      000B10                       2841 00107$:
                                   2842 ;src\/Graphics.h:99: bgColor = 0x1e;
      000B10 0E 1E            [ 7] 2843 	ld	c, #0x1e
                                   2844 ;src\/Graphics.h:100: break;
      000B12 18 16            [12] 2845 	jr	00113$
                                   2846 ;src\/Graphics.h:101: case 4:
      000B14                       2847 00108$:
                                   2848 ;src\/Graphics.h:102: bgColor = 0x1f;
      000B14 0E 1F            [ 7] 2849 	ld	c, #0x1f
                                   2850 ;src\/Graphics.h:103: break;
      000B16 18 12            [12] 2851 	jr	00113$
                                   2852 ;src\/Graphics.h:104: case 5:
      000B18                       2853 00109$:
                                   2854 ;src\/Graphics.h:105: bgColor = 0x1e;
      000B18 0E 1E            [ 7] 2855 	ld	c, #0x1e
                                   2856 ;src\/Graphics.h:106: break;
      000B1A 18 0E            [12] 2857 	jr	00113$
                                   2858 ;src\/Graphics.h:107: case 6:
      000B1C                       2859 00110$:
                                   2860 ;src\/Graphics.h:108: bgColor = 0x17;
      000B1C 0E 17            [ 7] 2861 	ld	c, #0x17
                                   2862 ;src\/Graphics.h:109: break;
      000B1E 18 0A            [12] 2863 	jr	00113$
                                   2864 ;src\/Graphics.h:110: case 7:
      000B20                       2865 00111$:
                                   2866 ;src\/Graphics.h:111: bgColor = 0x15;
      000B20 0E 15            [ 7] 2867 	ld	c, #0x15
                                   2868 ;src\/Graphics.h:112: bgCounter = 0;
      000B22 DD 36 FE 00      [19] 2869 	ld	-2 (ix), #0
                                   2870 ;src\/Graphics.h:113: break;
      000B26 18 02            [12] 2871 	jr	00113$
                                   2872 ;src\/Graphics.h:114: default:
      000B28                       2873 00112$:
                                   2874 ;src\/Graphics.h:115: bgColor = 0x11;
      000B28 0E 11            [ 7] 2875 	ld	c, #0x11
                                   2876 ;src\/Graphics.h:117: }
      000B2A                       2877 00113$:
                                   2878 ;src\/Graphics.h:118: FILVRM(MSX_modedata_screen2.color, 8 * 4, bgColor);
      000B2A 2A C9 F3         [16] 2879 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B2D C5               [11] 2880 	push	bc
      000B2E 79               [ 4] 2881 	ld	a, c
      000B2F F5               [11] 2882 	push	af
      000B30 33               [ 6] 2883 	inc	sp
      000B31 11 20 00         [10] 2884 	ld	de, #0x0020
      000B34 D5               [11] 2885 	push	de
      000B35 E5               [11] 2886 	push	hl
      000B36 CDr00r00         [17] 2887 	call	_FILVRM
      000B39 F1               [10] 2888 	pop	af
      000B3A F1               [10] 2889 	pop	af
      000B3B 33               [ 6] 2890 	inc	sp
      000B3C C1               [10] 2891 	pop	bc
                                   2892 ;src\/Graphics.h:119: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, bgColor);
      000B3D 2A C9 F3         [16] 2893 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B40 7C               [ 4] 2894 	ld	a, h
      000B41 C6 08            [ 7] 2895 	add	a, #0x08
      000B43 67               [ 4] 2896 	ld	h, a
      000B44 C5               [11] 2897 	push	bc
      000B45 79               [ 4] 2898 	ld	a, c
      000B46 F5               [11] 2899 	push	af
      000B47 33               [ 6] 2900 	inc	sp
      000B48 11 20 00         [10] 2901 	ld	de, #0x0020
      000B4B D5               [11] 2902 	push	de
      000B4C E5               [11] 2903 	push	hl
      000B4D CDr00r00         [17] 2904 	call	_FILVRM
      000B50 F1               [10] 2905 	pop	af
      000B51 F1               [10] 2906 	pop	af
      000B52 33               [ 6] 2907 	inc	sp
      000B53 C1               [10] 2908 	pop	bc
                                   2909 ;src\/Graphics.h:120: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, bgColor);
      000B54 2A C9 F3         [16] 2910 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B57 7C               [ 4] 2911 	ld	a, h
      000B58 C6 10            [ 7] 2912 	add	a, #0x10
      000B5A 67               [ 4] 2913 	ld	h, a
      000B5B 79               [ 4] 2914 	ld	a, c
      000B5C F5               [11] 2915 	push	af
      000B5D 33               [ 6] 2916 	inc	sp
      000B5E 11 20 00         [10] 2917 	ld	de, #0x0020
      000B61 D5               [11] 2918 	push	de
      000B62 E5               [11] 2919 	push	hl
      000B63 CDr00r00         [17] 2920 	call	_FILVRM
      000B66 F1               [10] 2921 	pop	af
      000B67 F1               [10] 2922 	pop	af
      000B68 33               [ 6] 2923 	inc	sp
      000B69 18 1A            [12] 2924 	jr	00122$
      000B6B                       2925 00115$:
                                   2926 ;src\/Graphics.h:125: DrawString("      ", 26, 4);
      000B6B 11 1A 04         [10] 2927 	ld	de, #0x041a
      000B6E D5               [11] 2928 	push	de
      000B6F 21r0Fr0C         [10] 2929 	ld	hl, #___str_2
      000B72 E5               [11] 2930 	push	hl
      000B73 CDrC8r07         [17] 2931 	call	_DrawString
      000B76 F1               [10] 2932 	pop	af
      000B77 F1               [10] 2933 	pop	af
                                   2934 ;src\/Graphics.h:126: DrawString("      ", 26, 5);
      000B78 11 1A 05         [10] 2935 	ld	de, #0x051a
      000B7B D5               [11] 2936 	push	de
      000B7C 21r0Fr0C         [10] 2937 	ld	hl, #___str_2
      000B7F E5               [11] 2938 	push	hl
      000B80 CDrC8r07         [17] 2939 	call	_DrawString
      000B83 F1               [10] 2940 	pop	af
      000B84 F1               [10] 2941 	pop	af
      000B85                       2942 00122$:
                                   2943 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000B85 DD 34 FF         [23] 2944 	inc	-1 (ix)
      000B88 C3r9Er0A         [10] 2945 	jp	00121$
      000B8B                       2946 00119$:
                                   2947 ;src\/Graphics.h:132: newLevel = FALSE;
      000B8B 21r07r00         [10] 2948 	ld	hl, #_newLevel
      000B8E 36 00            [10] 2949 	ld	(hl), #0x00
                                   2950 ;src\/Graphics.h:135: FILVRM(MSX_modedata_screen2.color, 8 * 4, 0x14);
      000B90 2A C9 F3         [16] 2951 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B93 3E 14            [ 7] 2952 	ld	a, #0x14
      000B95 F5               [11] 2953 	push	af
      000B96 33               [ 6] 2954 	inc	sp
      000B97 11 20 00         [10] 2955 	ld	de, #0x0020
      000B9A D5               [11] 2956 	push	de
      000B9B E5               [11] 2957 	push	hl
      000B9C CDr00r00         [17] 2958 	call	_FILVRM
      000B9F F1               [10] 2959 	pop	af
      000BA0 F1               [10] 2960 	pop	af
      000BA1 33               [ 6] 2961 	inc	sp
                                   2962 ;src\/Graphics.h:136: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, 0x14);
      000BA2 2A C9 F3         [16] 2963 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000BA5 7C               [ 4] 2964 	ld	a, h
      000BA6 C6 08            [ 7] 2965 	add	a, #0x08
      000BA8 67               [ 4] 2966 	ld	h, a
      000BA9 3E 14            [ 7] 2967 	ld	a, #0x14
      000BAB F5               [11] 2968 	push	af
      000BAC 33               [ 6] 2969 	inc	sp
      000BAD 11 20 00         [10] 2970 	ld	de, #0x0020
      000BB0 D5               [11] 2971 	push	de
      000BB1 E5               [11] 2972 	push	hl
      000BB2 CDr00r00         [17] 2973 	call	_FILVRM
      000BB5 F1               [10] 2974 	pop	af
      000BB6 F1               [10] 2975 	pop	af
      000BB7 33               [ 6] 2976 	inc	sp
                                   2977 ;src\/Graphics.h:137: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, 0x14);
      000BB8 2A C9 F3         [16] 2978 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000BBB 7C               [ 4] 2979 	ld	a, h
      000BBC C6 10            [ 7] 2980 	add	a, #0x10
      000BBE 67               [ 4] 2981 	ld	h, a
      000BBF 3E 14            [ 7] 2982 	ld	a, #0x14
      000BC1 F5               [11] 2983 	push	af
      000BC2 33               [ 6] 2984 	inc	sp
      000BC3 11 20 00         [10] 2985 	ld	de, #0x0020
      000BC6 D5               [11] 2986 	push	de
      000BC7 E5               [11] 2987 	push	hl
      000BC8 CDr00r00         [17] 2988 	call	_FILVRM
      000BCB F1               [10] 2989 	pop	af
      000BCC F1               [10] 2990 	pop	af
      000BCD 33               [ 6] 2991 	inc	sp
                                   2992 ;src\/Graphics.h:139: DrawString(" LEVEL", 26, 4);
      000BCE 11 1A 04         [10] 2993 	ld	de, #0x041a
      000BD1 D5               [11] 2994 	push	de
      000BD2 21r08r0C         [10] 2995 	ld	hl, #___str_1
      000BD5 E5               [11] 2996 	push	hl
      000BD6 CDrC8r07         [17] 2997 	call	_DrawString
      000BD9 F1               [10] 2998 	pop	af
      000BDA F1               [10] 2999 	pop	af
                                   3000 ;src\/Graphics.h:140: DrawString("BLOCKS", 26, 9);
      000BDB 11 1A 09         [10] 3001 	ld	de, #0x091a
      000BDE D5               [11] 3002 	push	de
      000BDF 21r16r0C         [10] 3003 	ld	hl, #___str_3
      000BE2 E5               [11] 3004 	push	hl
      000BE3 CDrC8r07         [17] 3005 	call	_DrawString
      000BE6 F1               [10] 3006 	pop	af
      000BE7 F1               [10] 3007 	pop	af
                                   3008 ;src\/Graphics.h:142: DrawNumber(blocksRemoved, 26, 10);
      000BE8 11 1A 0A         [10] 3009 	ld	de, #0x0a1a
      000BEB D5               [11] 3010 	push	de
      000BEC 2Ar04r00         [16] 3011 	ld	hl, (_blocksRemoved)
      000BEF E5               [11] 3012 	push	hl
      000BF0 CDrFAr07         [17] 3013 	call	_DrawNumber
      000BF3 F1               [10] 3014 	pop	af
      000BF4 F1               [10] 3015 	pop	af
                                   3016 ;src\/Graphics.h:143: DrawNumber(level, 26, 5);
      000BF5 3Ar06r00         [13] 3017 	ld	a, (#_level + 0)
      000BF8 4F               [ 4] 3018 	ld	c, a
      000BF9 06 00            [ 7] 3019 	ld	b, #0x00
      000BFB 11 1A 05         [10] 3020 	ld	de, #0x051a
      000BFE D5               [11] 3021 	push	de
      000BFF C5               [11] 3022 	push	bc
      000C00 CDrFAr07         [17] 3023 	call	_DrawNumber
                                   3024 ;src\/Graphics.h:145: }
      000C03 DD F9            [10] 3025 	ld	sp,ix
      000C05 DD E1            [14] 3026 	pop	ix
      000C07 C9               [10] 3027 	ret
      000C08                       3028 ___str_1:
      000C08 20 4C 45 56 45 4C     3029 	.ascii " LEVEL"
      000C0E 00                    3030 	.db 0x00
      000C0F                       3031 ___str_2:
      000C0F 20 20 20 20 20 20     3032 	.ascii "      "
      000C15 00                    3033 	.db 0x00
      000C16                       3034 ___str_3:
      000C16 42 4C 4F 43 4B 53     3035 	.ascii "BLOCKS"
      000C1C 00                    3036 	.db 0x00
                                   3037 ;src\/Graphics.h:147: void DrawBackground() {
                                   3038 ;	---------------------------------
                                   3039 ; Function DrawBackground
                                   3040 ; ---------------------------------
      000C1D                       3041 _DrawBackground::
                                   3042 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C1D 01 00 00         [10] 3043 	ld	bc, #0x0000
      000C20                       3044 00103$:
      000C20 78               [ 4] 3045 	ld	a, b
      000C21 EE 80            [ 7] 3046 	xor	a, #0x80
      000C23 D6 83            [ 7] 3047 	sub	a, #0x83
      000C25 30 14            [12] 3048 	jr	NC, 00101$
                                   3049 ;src\/Graphics.h:150: WRTVRM(MSX_modedata_screen2.name + i, 0); // test
      000C27 2A C7 F3         [16] 3050 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000C2A 59               [ 4] 3051 	ld	e, c
      000C2B 50               [ 4] 3052 	ld	d, b
      000C2C 19               [11] 3053 	add	hl, de
      000C2D C5               [11] 3054 	push	bc
      000C2E AF               [ 4] 3055 	xor	a, a
      000C2F F5               [11] 3056 	push	af
      000C30 33               [ 6] 3057 	inc	sp
      000C31 E5               [11] 3058 	push	hl
      000C32 CDr00r00         [17] 3059 	call	_WRTVRM
      000C35 F1               [10] 3060 	pop	af
      000C36 33               [ 6] 3061 	inc	sp
      000C37 C1               [10] 3062 	pop	bc
                                   3063 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C38 03               [ 6] 3064 	inc	bc
      000C39 18 E5            [12] 3065 	jr	00103$
      000C3B                       3066 00101$:
                                   3067 ;src\/Graphics.h:153: DrawColumn(7);
      000C3B 3E 07            [ 7] 3068 	ld	a, #0x07
      000C3D F5               [11] 3069 	push	af
      000C3E 33               [ 6] 3070 	inc	sp
      000C3F CDrB5r08         [17] 3071 	call	_DrawColumn
      000C42 33               [ 6] 3072 	inc	sp
                                   3073 ;src\/Graphics.h:154: DrawColumn(22);
      000C43 3E 16            [ 7] 3074 	ld	a, #0x16
      000C45 F5               [11] 3075 	push	af
      000C46 33               [ 6] 3076 	inc	sp
      000C47 CDrB5r08         [17] 3077 	call	_DrawColumn
      000C4A 33               [ 6] 3078 	inc	sp
                                   3079 ;src\/Graphics.h:156: DrawScore();
                                   3080 ;src\/Graphics.h:192: }
      000C4B C3r86r0A         [10] 3081 	jp	_DrawScore
                                   3082 ;src\/Graphics.h:194: void DrawArrow(byte x, byte y) {
                                   3083 ;	---------------------------------
                                   3084 ; Function DrawArrow
                                   3085 ; ---------------------------------
      000C4E                       3086 _DrawArrow::
      000C4E DD E5            [15] 3087 	push	ix
      000C50 DD 21 00 00      [14] 3088 	ld	ix,#0
      000C54 DD 39            [15] 3089 	add	ix,sp
      000C56 21 F8 FF         [10] 3090 	ld	hl, #-8
      000C59 39               [11] 3091 	add	hl, sp
      000C5A F9               [ 6] 3092 	ld	sp, hl
                                   3093 ;src\/Graphics.h:195: const byte colors[] = {
      000C5B 21 00 00         [10] 3094 	ld	hl, #0
      000C5E 39               [11] 3095 	add	hl, sp
      000C5F EB               [ 4] 3096 	ex	de, hl
      000C60 3E 0F            [ 7] 3097 	ld	a, #0x0f
      000C62 12               [ 7] 3098 	ld	(de), a
      000C63 6B               [ 4] 3099 	ld	l, e
      000C64 62               [ 4] 3100 	ld	h, d
      000C65 23               [ 6] 3101 	inc	hl
      000C66 36 0E            [10] 3102 	ld	(hl), #0x0e
      000C68 6B               [ 4] 3103 	ld	l, e
      000C69 62               [ 4] 3104 	ld	h, d
      000C6A 23               [ 6] 3105 	inc	hl
      000C6B 23               [ 6] 3106 	inc	hl
      000C6C 36 05            [10] 3107 	ld	(hl), #0x05
      000C6E 6B               [ 4] 3108 	ld	l, e
      000C6F 62               [ 4] 3109 	ld	h, d
      000C70 23               [ 6] 3110 	inc	hl
      000C71 23               [ 6] 3111 	inc	hl
      000C72 23               [ 6] 3112 	inc	hl
      000C73 36 04            [10] 3113 	ld	(hl), #0x04
      000C75 21 04 00         [10] 3114 	ld	hl, #0x0004
      000C78 19               [11] 3115 	add	hl, de
      000C79 36 04            [10] 3116 	ld	(hl), #0x04
      000C7B 21 05 00         [10] 3117 	ld	hl, #0x0005
      000C7E 19               [11] 3118 	add	hl, de
      000C7F 36 05            [10] 3119 	ld	(hl), #0x05
      000C81 21 06 00         [10] 3120 	ld	hl, #0x0006
      000C84 19               [11] 3121 	add	hl, de
      000C85 36 0E            [10] 3122 	ld	(hl), #0x0e
      000C87 21 07 00         [10] 3123 	ld	hl, #0x0007
      000C8A 19               [11] 3124 	add	hl, de
      000C8B 36 0F            [10] 3125 	ld	(hl), #0x0f
                                   3126 ;src\/Graphics.h:206: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000C8D 2A 9E FC         [16] 3127 	ld	hl, (_JIFFY)
      000C90 7D               [ 4] 3128 	ld	a, l
      000C91 E6 0E            [ 7] 3129 	and	a, #0x0e
      000C93 4F               [ 4] 3130 	ld	c, a
      000C94 06 00            [ 7] 3131 	ld	b, #0x00
      000C96 CB 38            [ 8] 3132 	srl	b
      000C98 CB 19            [ 8] 3133 	rr	c
                                   3134 ;src\/Graphics.h:213: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	y - 1);
      000C9A DD 46 05         [19] 3135 	ld	b, 5 (ix)
      000C9D 05               [ 4] 3136 	dec	b
      000C9E 2A CD F3         [16] 3137 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CA1 C5               [11] 3138 	push	bc
      000CA2 D5               [11] 3139 	push	de
      000CA3 C5               [11] 3140 	push	bc
      000CA4 33               [ 6] 3141 	inc	sp
      000CA5 E5               [11] 3142 	push	hl
      000CA6 CDr00r00         [17] 3143 	call	_WRTVRM
      000CA9 F1               [10] 3144 	pop	af
      000CAA 33               [ 6] 3145 	inc	sp
      000CAB D1               [10] 3146 	pop	de
      000CAC C1               [10] 3147 	pop	bc
                                   3148 ;src\/Graphics.h:214: WRTVRM(MSX_modedata_screen2.sprite_attribute + 1, 	x);
      000CAD 2A CD F3         [16] 3149 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CB0 23               [ 6] 3150 	inc	hl
      000CB1 C5               [11] 3151 	push	bc
      000CB2 D5               [11] 3152 	push	de
      000CB3 DD 7E 04         [19] 3153 	ld	a, 4 (ix)
      000CB6 F5               [11] 3154 	push	af
      000CB7 33               [ 6] 3155 	inc	sp
      000CB8 E5               [11] 3156 	push	hl
      000CB9 CDr00r00         [17] 3157 	call	_WRTVRM
      000CBC F1               [10] 3158 	pop	af
      000CBD 33               [ 6] 3159 	inc	sp
      000CBE D1               [10] 3160 	pop	de
      000CBF C1               [10] 3161 	pop	bc
                                   3162 ;src\/Graphics.h:215: WRTVRM(MSX_modedata_screen2.sprite_attribute + 2, 	SPRITE_PATTERN_DOWN_ARROW);
      000CC0 2A CD F3         [16] 3163 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CC3 23               [ 6] 3164 	inc	hl
      000CC4 23               [ 6] 3165 	inc	hl
      000CC5 C5               [11] 3166 	push	bc
      000CC6 D5               [11] 3167 	push	de
      000CC7 AF               [ 4] 3168 	xor	a, a
      000CC8 F5               [11] 3169 	push	af
      000CC9 33               [ 6] 3170 	inc	sp
      000CCA E5               [11] 3171 	push	hl
      000CCB CDr00r00         [17] 3172 	call	_WRTVRM
      000CCE F1               [10] 3173 	pop	af
      000CCF 33               [ 6] 3174 	inc	sp
      000CD0 D1               [10] 3175 	pop	de
      000CD1 C1               [10] 3176 	pop	bc
                                   3177 ;src\/Graphics.h:216: WRTVRM(MSX_modedata_screen2.sprite_attribute + 3, 	colors[colorIndex]);
      000CD2 69               [ 4] 3178 	ld	l, c
      000CD3 26 00            [ 7] 3179 	ld	h, #0x00
      000CD5 19               [11] 3180 	add	hl, de
      000CD6 4E               [ 7] 3181 	ld	c, (hl)
      000CD7 2A CD F3         [16] 3182 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CDA 23               [ 6] 3183 	inc	hl
      000CDB 23               [ 6] 3184 	inc	hl
      000CDC 23               [ 6] 3185 	inc	hl
      000CDD 79               [ 4] 3186 	ld	a, c
      000CDE F5               [11] 3187 	push	af
      000CDF 33               [ 6] 3188 	inc	sp
      000CE0 E5               [11] 3189 	push	hl
      000CE1 CDr00r00         [17] 3190 	call	_WRTVRM
                                   3191 ;src\/Graphics.h:225: }
      000CE4 DD F9            [10] 3192 	ld	sp,ix
      000CE6 DD E1            [14] 3193 	pop	ix
      000CE8 C9               [10] 3194 	ret
                                   3195 ;src\/Graphics.h:227: void HideArrow() {
                                   3196 ;	---------------------------------
                                   3197 ; Function HideArrow
                                   3198 ; ---------------------------------
      000CE9                       3199 _HideArrow::
                                   3200 ;src\/Graphics.h:228: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	192);
      000CE9 2A CD F3         [16] 3201 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CEC 3E C0            [ 7] 3202 	ld	a, #0xc0
      000CEE F5               [11] 3203 	push	af
      000CEF 33               [ 6] 3204 	inc	sp
      000CF0 E5               [11] 3205 	push	hl
      000CF1 CDr00r00         [17] 3206 	call	_WRTVRM
      000CF4 F1               [10] 3207 	pop	af
      000CF5 33               [ 6] 3208 	inc	sp
                                   3209 ;src\/Graphics.h:229: }
      000CF6 C9               [10] 3210 	ret
                                   3211 ;src\/Graphics.h:231: void DrawHitSprite(byte x, byte y) {
                                   3212 ;	---------------------------------
                                   3213 ; Function DrawHitSprite
                                   3214 ; ---------------------------------
      000CF7                       3215 _DrawHitSprite::
      000CF7 DD E5            [15] 3216 	push	ix
      000CF9 DD 21 00 00      [14] 3217 	ld	ix,#0
      000CFD DD 39            [15] 3218 	add	ix,sp
      000CFF 21 F6 FF         [10] 3219 	ld	hl, #-10
      000D02 39               [11] 3220 	add	hl, sp
      000D03 F9               [ 6] 3221 	ld	sp, hl
                                   3222 ;src\/Graphics.h:233: const byte colors[] = {
      000D04 21 00 00         [10] 3223 	ld	hl, #0
      000D07 39               [11] 3224 	add	hl, sp
      000D08 EB               [ 4] 3225 	ex	de, hl
      000D09 3E 0F            [ 7] 3226 	ld	a, #0x0f
      000D0B 12               [ 7] 3227 	ld	(de), a
      000D0C 6B               [ 4] 3228 	ld	l, e
      000D0D 62               [ 4] 3229 	ld	h, d
      000D0E 23               [ 6] 3230 	inc	hl
      000D0F 36 0E            [10] 3231 	ld	(hl), #0x0e
      000D11 6B               [ 4] 3232 	ld	l, e
      000D12 62               [ 4] 3233 	ld	h, d
      000D13 23               [ 6] 3234 	inc	hl
      000D14 23               [ 6] 3235 	inc	hl
      000D15 36 05            [10] 3236 	ld	(hl), #0x05
      000D17 6B               [ 4] 3237 	ld	l, e
      000D18 62               [ 4] 3238 	ld	h, d
      000D19 23               [ 6] 3239 	inc	hl
      000D1A 23               [ 6] 3240 	inc	hl
      000D1B 23               [ 6] 3241 	inc	hl
      000D1C 36 04            [10] 3242 	ld	(hl), #0x04
      000D1E 21 04 00         [10] 3243 	ld	hl, #0x0004
      000D21 19               [11] 3244 	add	hl, de
      000D22 36 04            [10] 3245 	ld	(hl), #0x04
      000D24 21 05 00         [10] 3246 	ld	hl, #0x0005
      000D27 19               [11] 3247 	add	hl, de
      000D28 36 05            [10] 3248 	ld	(hl), #0x05
      000D2A 21 06 00         [10] 3249 	ld	hl, #0x0006
      000D2D 19               [11] 3250 	add	hl, de
      000D2E 36 0E            [10] 3251 	ld	(hl), #0x0e
      000D30 21 07 00         [10] 3252 	ld	hl, #0x0007
      000D33 19               [11] 3253 	add	hl, de
      000D34 36 0F            [10] 3254 	ld	(hl), #0x0f
                                   3255 ;src\/Graphics.h:244: byte colorIndex = (JIFFY & 0b00000111) >> 1;
      000D36 2A 9E FC         [16] 3256 	ld	hl, (_JIFFY)
      000D39 7D               [ 4] 3257 	ld	a, l
      000D3A E6 07            [ 7] 3258 	and	a, #0x07
      000D3C 4F               [ 4] 3259 	ld	c, a
      000D3D 06 00            [ 7] 3260 	ld	b, #0x00
      000D3F CB 38            [ 8] 3261 	srl	b
      000D41 CB 19            [ 8] 3262 	rr	c
      000D43 DD 71 FE         [19] 3263 	ld	-2 (ix), c
                                   3264 ;src\/Graphics.h:246: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	y - 1);
      000D46 DD 7E 05         [19] 3265 	ld	a, 5 (ix)
      000D49 C6 FF            [ 7] 3266 	add	a, #0xff
      000D4B DD 77 FF         [19] 3267 	ld	-1 (ix), a
      000D4E 2A CD F3         [16] 3268 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D51 01 04 00         [10] 3269 	ld	bc, #0x0004
      000D54 09               [11] 3270 	add	hl, bc
      000D55 D5               [11] 3271 	push	de
      000D56 DD 7E FF         [19] 3272 	ld	a, -1 (ix)
      000D59 F5               [11] 3273 	push	af
      000D5A 33               [ 6] 3274 	inc	sp
      000D5B E5               [11] 3275 	push	hl
      000D5C CDr00r00         [17] 3276 	call	_WRTVRM
      000D5F F1               [10] 3277 	pop	af
      000D60 33               [ 6] 3278 	inc	sp
      000D61 D1               [10] 3279 	pop	de
                                   3280 ;src\/Graphics.h:247: WRTVRM(MSX_modedata_screen2.sprite_attribute + 5, 	x - 16);
      000D62 DD 7E 04         [19] 3281 	ld	a, 4 (ix)
      000D65 C6 F0            [ 7] 3282 	add	a, #0xf0
      000D67 47               [ 4] 3283 	ld	b, a
      000D68 2A CD F3         [16] 3284 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D6B 23               [ 6] 3285 	inc	hl
      000D6C 23               [ 6] 3286 	inc	hl
      000D6D 23               [ 6] 3287 	inc	hl
      000D6E 23               [ 6] 3288 	inc	hl
      000D6F 23               [ 6] 3289 	inc	hl
      000D70 D5               [11] 3290 	push	de
      000D71 C5               [11] 3291 	push	bc
      000D72 33               [ 6] 3292 	inc	sp
      000D73 E5               [11] 3293 	push	hl
      000D74 CDr00r00         [17] 3294 	call	_WRTVRM
      000D77 F1               [10] 3295 	pop	af
      000D78 33               [ 6] 3296 	inc	sp
      000D79 D1               [10] 3297 	pop	de
                                   3298 ;src\/Graphics.h:248: WRTVRM(MSX_modedata_screen2.sprite_attribute + 6, 	SPRITE_PATTERN_3X_HIT);
      000D7A 2A CD F3         [16] 3299 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D7D 01 06 00         [10] 3300 	ld	bc, #0x0006
      000D80 09               [11] 3301 	add	hl, bc
      000D81 D5               [11] 3302 	push	de
      000D82 3E 04            [ 7] 3303 	ld	a, #0x04
      000D84 F5               [11] 3304 	push	af
      000D85 33               [ 6] 3305 	inc	sp
      000D86 E5               [11] 3306 	push	hl
      000D87 CDr00r00         [17] 3307 	call	_WRTVRM
      000D8A F1               [10] 3308 	pop	af
      000D8B 33               [ 6] 3309 	inc	sp
      000D8C D1               [10] 3310 	pop	de
                                   3311 ;src\/Graphics.h:249: WRTVRM(MSX_modedata_screen2.sprite_attribute + 7, 	colors[colorIndex]);
      000D8D 7B               [ 4] 3312 	ld	a, e
      000D8E DD 86 FE         [19] 3313 	add	a, -2 (ix)
      000D91 5F               [ 4] 3314 	ld	e, a
      000D92 30 01            [12] 3315 	jr	NC, 00103$
      000D94 14               [ 4] 3316 	inc	d
      000D95                       3317 00103$:
      000D95 1A               [ 7] 3318 	ld	a, (de)
      000D96 47               [ 4] 3319 	ld	b, a
      000D97 2A CD F3         [16] 3320 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D9A D5               [11] 3321 	push	de
      000D9B 11 07 00         [10] 3322 	ld	de, #0x0007
      000D9E 19               [11] 3323 	add	hl, de
      000D9F C5               [11] 3324 	push	bc
      000DA0 33               [ 6] 3325 	inc	sp
      000DA1 E5               [11] 3326 	push	hl
      000DA2 CDr00r00         [17] 3327 	call	_WRTVRM
      000DA5 F1               [10] 3328 	pop	af
      000DA6 33               [ 6] 3329 	inc	sp
      000DA7 D1               [10] 3330 	pop	de
                                   3331 ;src\/Graphics.h:251: WRTVRM(MSX_modedata_screen2.sprite_attribute + 8, 	y - 1);
      000DA8 2A CD F3         [16] 3332 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DAB 01 08 00         [10] 3333 	ld	bc, #0x0008
      000DAE 09               [11] 3334 	add	hl, bc
      000DAF D5               [11] 3335 	push	de
      000DB0 DD 7E FF         [19] 3336 	ld	a, -1 (ix)
      000DB3 F5               [11] 3337 	push	af
      000DB4 33               [ 6] 3338 	inc	sp
      000DB5 E5               [11] 3339 	push	hl
      000DB6 CDr00r00         [17] 3340 	call	_WRTVRM
      000DB9 F1               [10] 3341 	pop	af
      000DBA 33               [ 6] 3342 	inc	sp
      000DBB D1               [10] 3343 	pop	de
                                   3344 ;src\/Graphics.h:252: WRTVRM(MSX_modedata_screen2.sprite_attribute + 9, 	x);
      000DBC 2A CD F3         [16] 3345 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DBF 01 09 00         [10] 3346 	ld	bc, #0x0009
      000DC2 09               [11] 3347 	add	hl, bc
      000DC3 D5               [11] 3348 	push	de
      000DC4 DD 7E 04         [19] 3349 	ld	a, 4 (ix)
      000DC7 F5               [11] 3350 	push	af
      000DC8 33               [ 6] 3351 	inc	sp
      000DC9 E5               [11] 3352 	push	hl
      000DCA CDr00r00         [17] 3353 	call	_WRTVRM
      000DCD F1               [10] 3354 	pop	af
      000DCE 33               [ 6] 3355 	inc	sp
      000DCF D1               [10] 3356 	pop	de
                                   3357 ;src\/Graphics.h:253: WRTVRM(MSX_modedata_screen2.sprite_attribute + 10, 	SPRITE_PATTERN_3X_HIT + 4);
      000DD0 2A CD F3         [16] 3358 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DD3 01 0A 00         [10] 3359 	ld	bc, #0x000a
      000DD6 09               [11] 3360 	add	hl, bc
      000DD7 D5               [11] 3361 	push	de
      000DD8 3E 08            [ 7] 3362 	ld	a, #0x08
      000DDA F5               [11] 3363 	push	af
      000DDB 33               [ 6] 3364 	inc	sp
      000DDC E5               [11] 3365 	push	hl
      000DDD CDr00r00         [17] 3366 	call	_WRTVRM
      000DE0 F1               [10] 3367 	pop	af
      000DE1 33               [ 6] 3368 	inc	sp
      000DE2 D1               [10] 3369 	pop	de
                                   3370 ;src\/Graphics.h:254: WRTVRM(MSX_modedata_screen2.sprite_attribute + 11, 	colors[colorIndex]);
      000DE3 1A               [ 7] 3371 	ld	a, (de)
      000DE4 47               [ 4] 3372 	ld	b, a
      000DE5 2A CD F3         [16] 3373 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DE8 11 0B 00         [10] 3374 	ld	de, #0x000b
      000DEB 19               [11] 3375 	add	hl, de
      000DEC C5               [11] 3376 	push	bc
      000DED 33               [ 6] 3377 	inc	sp
      000DEE E5               [11] 3378 	push	hl
      000DEF CDr00r00         [17] 3379 	call	_WRTVRM
                                   3380 ;src\/Graphics.h:260: }
      000DF2 DD F9            [10] 3381 	ld	sp,ix
      000DF4 DD E1            [14] 3382 	pop	ix
      000DF6 C9               [10] 3383 	ret
                                   3384 ;src\/Graphics.h:262: void HideHitSprite() {
                                   3385 ;	---------------------------------
                                   3386 ; Function HideHitSprite
                                   3387 ; ---------------------------------
      000DF7                       3388 _HideHitSprite::
                                   3389 ;src\/Graphics.h:263: WRTVRM(MSX_modedata_screen2.sprite_attribute + 4, 	192);
      000DF7 2A CD F3         [16] 3390 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000DFA 01 04 00         [10] 3391 	ld	bc, #0x0004
      000DFD 09               [11] 3392 	add	hl, bc
      000DFE 3E C0            [ 7] 3393 	ld	a, #0xc0
      000E00 F5               [11] 3394 	push	af
      000E01 33               [ 6] 3395 	inc	sp
      000E02 E5               [11] 3396 	push	hl
      000E03 CDr00r00         [17] 3397 	call	_WRTVRM
      000E06 F1               [10] 3398 	pop	af
      000E07 33               [ 6] 3399 	inc	sp
                                   3400 ;src\/Graphics.h:264: WRTVRM(MSX_modedata_screen2.sprite_attribute + 8, 	192);
      000E08 2A CD F3         [16] 3401 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E0B 01 08 00         [10] 3402 	ld	bc, #0x0008
      000E0E 09               [11] 3403 	add	hl, bc
      000E0F 3E C0            [ 7] 3404 	ld	a, #0xc0
      000E11 F5               [11] 3405 	push	af
      000E12 33               [ 6] 3406 	inc	sp
      000E13 E5               [11] 3407 	push	hl
      000E14 CDr00r00         [17] 3408 	call	_WRTVRM
      000E17 F1               [10] 3409 	pop	af
      000E18 33               [ 6] 3410 	inc	sp
                                   3411 ;src\/Graphics.h:265: WRTVRM(MSX_modedata_screen2.sprite_attribute + 12, 	192);
      000E19 2A CD F3         [16] 3412 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E1C 01 0C 00         [10] 3413 	ld	bc, #0x000c
      000E1F 09               [11] 3414 	add	hl, bc
      000E20 3E C0            [ 7] 3415 	ld	a, #0xc0
      000E22 F5               [11] 3416 	push	af
      000E23 33               [ 6] 3417 	inc	sp
      000E24 E5               [11] 3418 	push	hl
      000E25 CDr00r00         [17] 3419 	call	_WRTVRM
      000E28 F1               [10] 3420 	pop	af
      000E29 33               [ 6] 3421 	inc	sp
                                   3422 ;src\/Graphics.h:266: }
      000E2A C9               [10] 3423 	ret
                                   3424 ;src\/Graphics.h:268: void InitVRAM() {
                                   3425 ;	---------------------------------
                                   3426 ; Function InitVRAM
                                   3427 ; ---------------------------------
      000E2B                       3428 _InitVRAM::
                                   3429 ;src\/Graphics.h:273: CLIKSW = 0;	// disable keyboard sound
      000E2B 21 00 00         [10] 3430 	ld	hl, #0x0000
      000E2E 22 DB F3         [16] 3431 	ld	(_CLIKSW), hl
                                   3432 ;src\/Graphics.h:274: SCNCNT = 1; 	// set keyboard scan counter
      000E31 21 F6 F3         [10] 3433 	ld	hl, #_SCNCNT
      000E34 36 01            [10] 3434 	ld	(hl), #0x01
                                   3435 ;src\/Graphics.h:276: FORCLR = COLOR_WHITE;
      000E36 21 E9 F3         [10] 3436 	ld	hl, #_FORCLR
      000E39 36 0F            [10] 3437 	ld	(hl), #0x0f
                                   3438 ;src\/Graphics.h:277: BAKCLR = COLOR_BLACK;
      000E3B 21 EA F3         [10] 3439 	ld	hl, #_BAKCLR
      000E3E 36 01            [10] 3440 	ld	(hl), #0x01
                                   3441 ;src\/Graphics.h:278: BDRCLR = COLOR_BLACK;
      000E40 21 EB F3         [10] 3442 	ld	hl, #_BDRCLR
      000E43 36 01            [10] 3443 	ld	(hl), #0x01
                                   3444 ;src\/Graphics.h:306: WRTVDP(0b0000000111100010);
      000E45 21 E2 01         [10] 3445 	ld	hl, #0x01e2
      000E48 CDr00r00         [17] 3446 	call	_WRTVDP
                                   3447 ;src\/Graphics.h:308: INIGRP();	// Set screen 2
      000E4B CDr00r00         [17] 3448 	call	_INIGRP
                                   3449 ;src\/Graphics.h:310: DISSCR();	// Disable screen (faster to write)
      000E4E CDr00r00         [17] 3450 	call	_DISSCR
                                   3451 ;src\/Graphics.h:314: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      000E51 AF               [ 4] 3452 	xor	a, a
      000E52 F5               [11] 3453 	push	af
      000E53 33               [ 6] 3454 	inc	sp
      000E54 21 00 40         [10] 3455 	ld	hl, #0x4000
      000E57 E5               [11] 3456 	push	hl
      000E58 65               [ 4] 3457 	ld	h, l
      000E59 E5               [11] 3458 	push	hl
      000E5A CDr00r00         [17] 3459 	call	_FILVRM
      000E5D F1               [10] 3460 	pop	af
      000E5E F1               [10] 3461 	pop	af
      000E5F 33               [ 6] 3462 	inc	sp
                                   3463 ;src\/Graphics.h:323: LDIRVM(MSX_modedata_screen2.sprite_pattern, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      000E60 01r48r07         [10] 3464 	ld	bc, #_sprite_arrow_0+0
      000E63 2A CF F3         [16] 3465 	ld	hl, (#(_MSX_modedata_screen2 + 0x0008) + 0)
      000E66 11 80 00         [10] 3466 	ld	de, #0x0080
      000E69 D5               [11] 3467 	push	de
      000E6A C5               [11] 3468 	push	bc
      000E6B E5               [11] 3469 	push	hl
      000E6C CDr00r00         [17] 3470 	call	_LDIRVM
      000E6F 21 06 00         [10] 3471 	ld	hl, #6
      000E72 39               [11] 3472 	add	hl, sp
      000E73 F9               [ 6] 3473 	ld	sp, hl
                                   3474 ;src\/Graphics.h:329: for(byte i=0; i<32; i++) {
      000E74 0E 00            [ 7] 3475 	ld	c, #0x00
      000E76                       3476 00110$:
      000E76 79               [ 4] 3477 	ld	a, c
      000E77 D6 20            [ 7] 3478 	sub	a, #0x20
      000E79 30 1A            [12] 3479 	jr	NC, 00101$
                                   3480 ;src\/Graphics.h:330: WRTVRM(MSX_modedata_screen2.sprite_attribute + (i * 4), 	192);
      000E7B ED 5B CD F3      [20] 3481 	ld	de, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000E7F 79               [ 4] 3482 	ld	a, c
      000E80 26 00            [ 7] 3483 	ld	h, #0x00
      000E82 6F               [ 4] 3484 	ld	l, a
      000E83 29               [11] 3485 	add	hl, hl
      000E84 29               [11] 3486 	add	hl, hl
      000E85 19               [11] 3487 	add	hl, de
      000E86 C5               [11] 3488 	push	bc
      000E87 3E C0            [ 7] 3489 	ld	a, #0xc0
      000E89 F5               [11] 3490 	push	af
      000E8A 33               [ 6] 3491 	inc	sp
      000E8B E5               [11] 3492 	push	hl
      000E8C CDr00r00         [17] 3493 	call	_WRTVRM
      000E8F F1               [10] 3494 	pop	af
      000E90 33               [ 6] 3495 	inc	sp
      000E91 C1               [10] 3496 	pop	bc
                                   3497 ;src\/Graphics.h:329: for(byte i=0; i<32; i++) {
      000E92 0C               [ 4] 3498 	inc	c
      000E93 18 E1            [12] 3499 	jr	00110$
      000E95                       3500 00101$:
                                   3501 ;src\/Graphics.h:339: LDIRVM(MSX_modedata_screen2.pattern, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000E95 01r18r04         [10] 3502 	ld	bc, #_pattern_black_0
      000E98 2A CB F3         [16] 3503 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000E9B 11 78 01         [10] 3504 	ld	de, #0x0178
      000E9E D5               [11] 3505 	push	de
      000E9F C5               [11] 3506 	push	bc
      000EA0 E5               [11] 3507 	push	hl
      000EA1 CDr00r00         [17] 3508 	call	_LDIRVM
      000EA4 21 06 00         [10] 3509 	ld	hl, #6
      000EA7 39               [11] 3510 	add	hl, sp
      000EA8 F9               [ 6] 3511 	ld	sp, hl
                                   3512 ;src\/Graphics.h:342: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EA9 01r18r04         [10] 3513 	ld	bc, #_pattern_black_0
      000EAC 2A CB F3         [16] 3514 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000EAF 7C               [ 4] 3515 	ld	a, h
      000EB0 C6 08            [ 7] 3516 	add	a, #0x08
      000EB2 67               [ 4] 3517 	ld	h, a
      000EB3 11 78 01         [10] 3518 	ld	de, #0x0178
      000EB6 D5               [11] 3519 	push	de
      000EB7 C5               [11] 3520 	push	bc
      000EB8 E5               [11] 3521 	push	hl
      000EB9 CDr00r00         [17] 3522 	call	_LDIRVM
      000EBC 21 06 00         [10] 3523 	ld	hl, #6
      000EBF 39               [11] 3524 	add	hl, sp
      000EC0 F9               [ 6] 3525 	ld	sp, hl
                                   3526 ;src\/Graphics.h:345: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EC1 01r18r04         [10] 3527 	ld	bc, #_pattern_black_0
      000EC4 2A CB F3         [16] 3528 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000EC7 7C               [ 4] 3529 	ld	a, h
      000EC8 C6 10            [ 7] 3530 	add	a, #0x10
      000ECA 67               [ 4] 3531 	ld	h, a
      000ECB 11 78 01         [10] 3532 	ld	de, #0x0178
      000ECE D5               [11] 3533 	push	de
      000ECF C5               [11] 3534 	push	bc
      000ED0 E5               [11] 3535 	push	hl
      000ED1 CDr00r00         [17] 3536 	call	_LDIRVM
      000ED4 21 06 00         [10] 3537 	ld	hl, #6
      000ED7 39               [11] 3538 	add	hl, sp
      000ED8 F9               [ 6] 3539 	ld	sp, hl
                                   3540 ;src\/Graphics.h:348: LDIRVM(MSX_modedata_screen2.pattern + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000ED9 01r18r01         [10] 3541 	ld	bc, #_FONT
      000EDC 2A CB F3         [16] 3542 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000EDF 11 78 01         [10] 3543 	ld	de, #0x0178
      000EE2 19               [11] 3544 	add	hl, de
      000EE3 11 00 03         [10] 3545 	ld	de, #0x0300
      000EE6 D5               [11] 3546 	push	de
      000EE7 C5               [11] 3547 	push	bc
      000EE8 E5               [11] 3548 	push	hl
      000EE9 CDr00r00         [17] 3549 	call	_LDIRVM
      000EEC 21 06 00         [10] 3550 	ld	hl, #6
      000EEF 39               [11] 3551 	add	hl, sp
      000EF0 F9               [ 6] 3552 	ld	sp, hl
                                   3553 ;src\/Graphics.h:351: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EF1 01r18r01         [10] 3554 	ld	bc, #_FONT
      000EF4 2A CB F3         [16] 3555 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000EF7 11 78 09         [10] 3556 	ld	de, #0x0978
      000EFA 19               [11] 3557 	add	hl, de
      000EFB 11 00 03         [10] 3558 	ld	de, #0x0300
      000EFE D5               [11] 3559 	push	de
      000EFF C5               [11] 3560 	push	bc
      000F00 E5               [11] 3561 	push	hl
      000F01 CDr00r00         [17] 3562 	call	_LDIRVM
      000F04 21 06 00         [10] 3563 	ld	hl, #6
      000F07 39               [11] 3564 	add	hl, sp
      000F08 F9               [ 6] 3565 	ld	sp, hl
                                   3566 ;src\/Graphics.h:354: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F09 01r18r01         [10] 3567 	ld	bc, #_FONT
      000F0C 2A CB F3         [16] 3568 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F0F 11 78 11         [10] 3569 	ld	de, #0x1178
      000F12 19               [11] 3570 	add	hl, de
      000F13 11 00 03         [10] 3571 	ld	de, #0x0300
      000F16 D5               [11] 3572 	push	de
      000F17 C5               [11] 3573 	push	bc
      000F18 E5               [11] 3574 	push	hl
      000F19 CDr00r00         [17] 3575 	call	_LDIRVM
      000F1C 21 06 00         [10] 3576 	ld	hl, #6
      000F1F 39               [11] 3577 	add	hl, sp
      000F20 F9               [ 6] 3578 	ld	sp, hl
                                   3579 ;src\/Graphics.h:358: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000F21 0E 00            [ 7] 3580 	ld	c, #0x00
      000F23                       3581 00113$:
      000F23 79               [ 4] 3582 	ld	a, c
      000F24 D6 07            [ 7] 3583 	sub	a, #0x07
      000F26 30 27            [12] 3584 	jr	NC, 00102$
                                   3585 ;src\/Graphics.h:359: LDIRVM(MSX_modedata_screen2.pattern + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      000F28 ED 5B CB F3      [20] 3586 	ld	de, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000F2C 21 70 04         [10] 3587 	ld	hl, #0x0470
      000F2F 19               [11] 3588 	add	hl, de
      000F30 EB               [ 4] 3589 	ex	de, hl
      000F31 79               [ 4] 3590 	ld	a, c
      000F32 26 00            [ 7] 3591 	ld	h, #0x00
      000F34 6F               [ 4] 3592 	ld	l, a
      000F35 29               [11] 3593 	add	hl, hl
      000F36 29               [11] 3594 	add	hl, hl
      000F37 29               [11] 3595 	add	hl, hl
      000F38 19               [11] 3596 	add	hl, de
      000F39 C5               [11] 3597 	push	bc
      000F3A 11 38 00         [10] 3598 	ld	de, #0x0038
      000F3D D5               [11] 3599 	push	de
      000F3E 11r88r05         [10] 3600 	ld	de, #_pattern_title
      000F41 D5               [11] 3601 	push	de
      000F42 E5               [11] 3602 	push	hl
      000F43 CDr00r00         [17] 3603 	call	_LDIRVM
      000F46 21 06 00         [10] 3604 	ld	hl, #6
      000F49 39               [11] 3605 	add	hl, sp
      000F4A F9               [ 6] 3606 	ld	sp, hl
      000F4B C1               [10] 3607 	pop	bc
                                   3608 ;src\/Graphics.h:358: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000F4C 0C               [ 4] 3609 	inc	c
      000F4D 18 D4            [12] 3610 	jr	00113$
      000F4F                       3611 00102$:
                                   3612 ;src\/Graphics.h:369: LDIRVM(MSX_modedata_screen2.color, color_black_0, NUMBER_OF_PATTERNS * 8);
      000F4F 01r90r05         [10] 3613 	ld	bc, #_color_black_0
      000F52 2A C9 F3         [16] 3614 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F55 11 78 01         [10] 3615 	ld	de, #0x0178
      000F58 D5               [11] 3616 	push	de
      000F59 C5               [11] 3617 	push	bc
      000F5A E5               [11] 3618 	push	hl
      000F5B CDr00r00         [17] 3619 	call	_LDIRVM
      000F5E 21 06 00         [10] 3620 	ld	hl, #6
      000F61 39               [11] 3621 	add	hl, sp
      000F62 F9               [ 6] 3622 	ld	sp, hl
                                   3623 ;src\/Graphics.h:371: LDIRVM(MSX_modedata_screen2.color + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000F63 01r90r05         [10] 3624 	ld	bc, #_color_black_0
      000F66 2A C9 F3         [16] 3625 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F69 7C               [ 4] 3626 	ld	a, h
      000F6A C6 08            [ 7] 3627 	add	a, #0x08
      000F6C 67               [ 4] 3628 	ld	h, a
      000F6D 11 78 01         [10] 3629 	ld	de, #0x0178
      000F70 D5               [11] 3630 	push	de
      000F71 C5               [11] 3631 	push	bc
      000F72 E5               [11] 3632 	push	hl
      000F73 CDr00r00         [17] 3633 	call	_LDIRVM
      000F76 21 06 00         [10] 3634 	ld	hl, #6
      000F79 39               [11] 3635 	add	hl, sp
      000F7A F9               [ 6] 3636 	ld	sp, hl
                                   3637 ;src\/Graphics.h:373: LDIRVM(MSX_modedata_screen2.color + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000F7B 01r90r05         [10] 3638 	ld	bc, #_color_black_0
      000F7E 2A C9 F3         [16] 3639 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F81 7C               [ 4] 3640 	ld	a, h
      000F82 C6 10            [ 7] 3641 	add	a, #0x10
      000F84 67               [ 4] 3642 	ld	h, a
      000F85 11 78 01         [10] 3643 	ld	de, #0x0178
      000F88 D5               [11] 3644 	push	de
      000F89 C5               [11] 3645 	push	bc
      000F8A E5               [11] 3646 	push	hl
      000F8B CDr00r00         [17] 3647 	call	_LDIRVM
      000F8E 21 06 00         [10] 3648 	ld	hl, #6
      000F91 39               [11] 3649 	add	hl, sp
      000F92 F9               [ 6] 3650 	ld	sp, hl
                                   3651 ;src\/Graphics.h:380: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000F93 0E 00            [ 7] 3652 	ld	c, #0x00
      000F95                       3653 00116$:
      000F95 79               [ 4] 3654 	ld	a, c
      000F96 D6 60            [ 7] 3655 	sub	a, #0x60
      000F98 30 27            [12] 3656 	jr	NC, 00103$
                                   3657 ;src\/Graphics.h:381: LDIRVM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000F9A ED 5B C9 F3      [20] 3658 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F9E 21 78 01         [10] 3659 	ld	hl, #0x0178
      000FA1 19               [11] 3660 	add	hl, de
      000FA2 EB               [ 4] 3661 	ex	de, hl
      000FA3 79               [ 4] 3662 	ld	a, c
      000FA4 26 00            [ 7] 3663 	ld	h, #0x00
      000FA6 6F               [ 4] 3664 	ld	l, a
      000FA7 29               [11] 3665 	add	hl, hl
      000FA8 29               [11] 3666 	add	hl, hl
      000FA9 29               [11] 3667 	add	hl, hl
      000FAA 19               [11] 3668 	add	hl, de
      000FAB C5               [11] 3669 	push	bc
      000FAC 11 08 00         [10] 3670 	ld	de, #0x0008
      000FAF D5               [11] 3671 	push	de
      000FB0 11r08r07         [10] 3672 	ld	de, #_color_font_2
      000FB3 D5               [11] 3673 	push	de
      000FB4 E5               [11] 3674 	push	hl
      000FB5 CDr00r00         [17] 3675 	call	_LDIRVM
      000FB8 21 06 00         [10] 3676 	ld	hl, #6
      000FBB 39               [11] 3677 	add	hl, sp
      000FBC F9               [ 6] 3678 	ld	sp, hl
      000FBD C1               [10] 3679 	pop	bc
                                   3680 ;src\/Graphics.h:380: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FBE 0C               [ 4] 3681 	inc	c
      000FBF 18 D4            [12] 3682 	jr	00116$
      000FC1                       3683 00103$:
                                   3684 ;src\/Graphics.h:384: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FC1 0E 00            [ 7] 3685 	ld	c, #0x00
      000FC3                       3686 00119$:
      000FC3 79               [ 4] 3687 	ld	a, c
      000FC4 D6 60            [ 7] 3688 	sub	a, #0x60
      000FC6 30 27            [12] 3689 	jr	NC, 00104$
                                   3690 ;src\/Graphics.h:385: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FC8 ED 5B C9 F3      [20] 3691 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FCC 21 78 09         [10] 3692 	ld	hl, #0x0978
      000FCF 19               [11] 3693 	add	hl, de
      000FD0 EB               [ 4] 3694 	ex	de, hl
      000FD1 79               [ 4] 3695 	ld	a, c
      000FD2 26 00            [ 7] 3696 	ld	h, #0x00
      000FD4 6F               [ 4] 3697 	ld	l, a
      000FD5 29               [11] 3698 	add	hl, hl
      000FD6 29               [11] 3699 	add	hl, hl
      000FD7 29               [11] 3700 	add	hl, hl
      000FD8 19               [11] 3701 	add	hl, de
      000FD9 C5               [11] 3702 	push	bc
      000FDA 11 08 00         [10] 3703 	ld	de, #0x0008
      000FDD D5               [11] 3704 	push	de
      000FDE 11r08r07         [10] 3705 	ld	de, #_color_font_2
      000FE1 D5               [11] 3706 	push	de
      000FE2 E5               [11] 3707 	push	hl
      000FE3 CDr00r00         [17] 3708 	call	_LDIRVM
      000FE6 21 06 00         [10] 3709 	ld	hl, #6
      000FE9 39               [11] 3710 	add	hl, sp
      000FEA F9               [ 6] 3711 	ld	sp, hl
      000FEB C1               [10] 3712 	pop	bc
                                   3713 ;src\/Graphics.h:384: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FEC 0C               [ 4] 3714 	inc	c
      000FED 18 D4            [12] 3715 	jr	00119$
      000FEF                       3716 00104$:
                                   3717 ;src\/Graphics.h:388: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FEF 0E 00            [ 7] 3718 	ld	c, #0x00
      000FF1                       3719 00122$:
      000FF1 79               [ 4] 3720 	ld	a, c
      000FF2 D6 60            [ 7] 3721 	sub	a, #0x60
      000FF4 30 27            [12] 3722 	jr	NC, 00105$
                                   3723 ;src\/Graphics.h:389: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FF6 ED 5B C9 F3      [20] 3724 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000FFA 21 78 11         [10] 3725 	ld	hl, #0x1178
      000FFD 19               [11] 3726 	add	hl, de
      000FFE EB               [ 4] 3727 	ex	de, hl
      000FFF 79               [ 4] 3728 	ld	a, c
      001000 26 00            [ 7] 3729 	ld	h, #0x00
      001002 6F               [ 4] 3730 	ld	l, a
      001003 29               [11] 3731 	add	hl, hl
      001004 29               [11] 3732 	add	hl, hl
      001005 29               [11] 3733 	add	hl, hl
      001006 19               [11] 3734 	add	hl, de
      001007 C5               [11] 3735 	push	bc
      001008 11 08 00         [10] 3736 	ld	de, #0x0008
      00100B D5               [11] 3737 	push	de
      00100C 11r08r07         [10] 3738 	ld	de, #_color_font_2
      00100F D5               [11] 3739 	push	de
      001010 E5               [11] 3740 	push	hl
      001011 CDr00r00         [17] 3741 	call	_LDIRVM
      001014 21 06 00         [10] 3742 	ld	hl, #6
      001017 39               [11] 3743 	add	hl, sp
      001018 F9               [ 6] 3744 	ld	sp, hl
      001019 C1               [10] 3745 	pop	bc
                                   3746 ;src\/Graphics.h:388: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00101A 0C               [ 4] 3747 	inc	c
      00101B 18 D4            [12] 3748 	jr	00122$
      00101D                       3749 00105$:
                                   3750 ;src\/Graphics.h:397: for(byte i = 0; i < 10; i++) {
      00101D 0E 00            [ 7] 3751 	ld	c, #0x00
      00101F                       3752 00125$:
      00101F 79               [ 4] 3753 	ld	a, c
      001020 D6 0A            [ 7] 3754 	sub	a, #0x0a
      001022 30 27            [12] 3755 	jr	NC, 00106$
                                   3756 ;src\/Graphics.h:398: LDIRVM(MSX_modedata_screen2.color + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001024 ED 5B C9 F3      [20] 3757 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001028 21 F8 01         [10] 3758 	ld	hl, #0x01f8
      00102B 19               [11] 3759 	add	hl, de
      00102C EB               [ 4] 3760 	ex	de, hl
      00102D 79               [ 4] 3761 	ld	a, c
      00102E 26 00            [ 7] 3762 	ld	h, #0x00
      001030 6F               [ 4] 3763 	ld	l, a
      001031 29               [11] 3764 	add	hl, hl
      001032 29               [11] 3765 	add	hl, hl
      001033 29               [11] 3766 	add	hl, hl
      001034 19               [11] 3767 	add	hl, de
      001035 C5               [11] 3768 	push	bc
      001036 11 08 00         [10] 3769 	ld	de, #0x0008
      001039 D5               [11] 3770 	push	de
      00103A 11r00r07         [10] 3771 	ld	de, #_color_font_1
      00103D D5               [11] 3772 	push	de
      00103E E5               [11] 3773 	push	hl
      00103F CDr00r00         [17] 3774 	call	_LDIRVM
      001042 21 06 00         [10] 3775 	ld	hl, #6
      001045 39               [11] 3776 	add	hl, sp
      001046 F9               [ 6] 3777 	ld	sp, hl
      001047 C1               [10] 3778 	pop	bc
                                   3779 ;src\/Graphics.h:397: for(byte i = 0; i < 10; i++) {
      001048 0C               [ 4] 3780 	inc	c
      001049 18 D4            [12] 3781 	jr	00125$
      00104B                       3782 00106$:
                                   3783 ;src\/Graphics.h:401: for(byte i = 0; i < 10; i++) {
      00104B 0E 00            [ 7] 3784 	ld	c, #0x00
      00104D                       3785 00128$:
      00104D 79               [ 4] 3786 	ld	a, c
      00104E D6 0A            [ 7] 3787 	sub	a, #0x0a
      001050 30 27            [12] 3788 	jr	NC, 00107$
                                   3789 ;src\/Graphics.h:402: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001052 ED 5B C9 F3      [20] 3790 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001056 21 F8 09         [10] 3791 	ld	hl, #0x09f8
      001059 19               [11] 3792 	add	hl, de
      00105A EB               [ 4] 3793 	ex	de, hl
      00105B 79               [ 4] 3794 	ld	a, c
      00105C 26 00            [ 7] 3795 	ld	h, #0x00
      00105E 6F               [ 4] 3796 	ld	l, a
      00105F 29               [11] 3797 	add	hl, hl
      001060 29               [11] 3798 	add	hl, hl
      001061 29               [11] 3799 	add	hl, hl
      001062 19               [11] 3800 	add	hl, de
      001063 C5               [11] 3801 	push	bc
      001064 11 08 00         [10] 3802 	ld	de, #0x0008
      001067 D5               [11] 3803 	push	de
      001068 11r00r07         [10] 3804 	ld	de, #_color_font_1
      00106B D5               [11] 3805 	push	de
      00106C E5               [11] 3806 	push	hl
      00106D CDr00r00         [17] 3807 	call	_LDIRVM
      001070 21 06 00         [10] 3808 	ld	hl, #6
      001073 39               [11] 3809 	add	hl, sp
      001074 F9               [ 6] 3810 	ld	sp, hl
      001075 C1               [10] 3811 	pop	bc
                                   3812 ;src\/Graphics.h:401: for(byte i = 0; i < 10; i++) {
      001076 0C               [ 4] 3813 	inc	c
      001077 18 D4            [12] 3814 	jr	00128$
      001079                       3815 00107$:
                                   3816 ;src\/Graphics.h:405: for(byte i = 0; i < 10; i++) {
      001079 0E 00            [ 7] 3817 	ld	c, #0x00
      00107B                       3818 00131$:
      00107B 79               [ 4] 3819 	ld	a, c
      00107C D6 0A            [ 7] 3820 	sub	a, #0x0a
      00107E 30 26            [12] 3821 	jr	NC, 00108$
                                   3822 ;src\/Graphics.h:406: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001080 ED 5B C9 F3      [20] 3823 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001084 21 F8 11         [10] 3824 	ld	hl, #0x11f8
      001087 19               [11] 3825 	add	hl, de
      001088 EB               [ 4] 3826 	ex	de, hl
      001089 69               [ 4] 3827 	ld	l, c
      00108A 26 00            [ 7] 3828 	ld	h, #0x00
      00108C 29               [11] 3829 	add	hl, hl
      00108D 29               [11] 3830 	add	hl, hl
      00108E 29               [11] 3831 	add	hl, hl
      00108F 19               [11] 3832 	add	hl, de
      001090 C5               [11] 3833 	push	bc
      001091 11 08 00         [10] 3834 	ld	de, #0x0008
      001094 D5               [11] 3835 	push	de
      001095 11r00r07         [10] 3836 	ld	de, #_color_font_1
      001098 D5               [11] 3837 	push	de
      001099 E5               [11] 3838 	push	hl
      00109A CDr00r00         [17] 3839 	call	_LDIRVM
      00109D 21 06 00         [10] 3840 	ld	hl, #6
      0010A0 39               [11] 3841 	add	hl, sp
      0010A1 F9               [ 6] 3842 	ld	sp, hl
      0010A2 C1               [10] 3843 	pop	bc
                                   3844 ;src\/Graphics.h:405: for(byte i = 0; i < 10; i++) {
      0010A3 0C               [ 4] 3845 	inc	c
      0010A4 18 D5            [12] 3846 	jr	00131$
      0010A6                       3847 00108$:
                                   3848 ;src\/Graphics.h:410: LDIRVM(MSX_modedata_screen2.color + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      0010A6 2A C9 F3         [16] 3849 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      0010A9 01 70 04         [10] 3850 	ld	bc, #0x0470
      0010AC 09               [11] 3851 	add	hl, bc
      0010AD 11 38 00         [10] 3852 	ld	de, #0x0038
      0010B0 D5               [11] 3853 	push	de
      0010B1 11r10r07         [10] 3854 	ld	de, #_color_title_1
      0010B4 D5               [11] 3855 	push	de
      0010B5 E5               [11] 3856 	push	hl
      0010B6 CDr00r00         [17] 3857 	call	_LDIRVM
      0010B9 21 06 00         [10] 3858 	ld	hl, #6
      0010BC 39               [11] 3859 	add	hl, sp
      0010BD F9               [ 6] 3860 	ld	sp, hl
                                   3861 ;src\/Graphics.h:418: ENASCR();	// Enable screen
                                   3862 ;src\/Graphics.h:419: }
      0010BE C3r00r00         [10] 3863 	jp	_ENASCR
                                   3864 ;src\/Graphics.h:421: void DrawBlock(byte col, byte line, byte tile) {
                                   3865 ;	---------------------------------
                                   3866 ; Function DrawBlock
                                   3867 ; ---------------------------------
      0010C1                       3868 _DrawBlock::
      0010C1 DD E5            [15] 3869 	push	ix
      0010C3 DD 21 00 00      [14] 3870 	ld	ix,#0
      0010C7 DD 39            [15] 3871 	add	ix,sp
                                   3872 ;src\/Graphics.h:423: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0010C9 ED 4B C7 F3      [20] 3873 	ld	bc, (#_MSX_modedata_screen2 + 0)
      0010CD DD 6E 04         [19] 3874 	ld	l, 4 (ix)
      0010D0 26 00            [ 7] 3875 	ld	h, #0x00
      0010D2 29               [11] 3876 	add	hl, hl
      0010D3 09               [11] 3877 	add	hl, bc
      0010D4 EB               [ 4] 3878 	ex	de, hl
      0010D5 DD 6E 05         [19] 3879 	ld	l, 5 (ix)
      0010D8 26 00            [ 7] 3880 	ld	h, #0x00
      0010DA 29               [11] 3881 	add	hl, hl
      0010DB 29               [11] 3882 	add	hl, hl
      0010DC 29               [11] 3883 	add	hl, hl
      0010DD 29               [11] 3884 	add	hl, hl
      0010DE 29               [11] 3885 	add	hl, hl
      0010DF 29               [11] 3886 	add	hl, hl
      0010E0 19               [11] 3887 	add	hl, de
      0010E1 EB               [ 4] 3888 	ex	de, hl
      0010E2 21 0A 00         [10] 3889 	ld	hl, #0x000a
      0010E5 19               [11] 3890 	add	hl, de
      0010E6 EB               [ 4] 3891 	ex	de, hl
                                   3892 ;src\/Graphics.h:425: WRTVRM(baseAddr, tile);
      0010E7 D5               [11] 3893 	push	de
      0010E8 DD 7E 06         [19] 3894 	ld	a, 6 (ix)
      0010EB F5               [11] 3895 	push	af
      0010EC 33               [ 6] 3896 	inc	sp
      0010ED D5               [11] 3897 	push	de
      0010EE CDr00r00         [17] 3898 	call	_WRTVRM
      0010F1 F1               [10] 3899 	pop	af
      0010F2 33               [ 6] 3900 	inc	sp
      0010F3 D1               [10] 3901 	pop	de
                                   3902 ;src\/Graphics.h:426: WRTVRM(baseAddr + 1, tile + 1);
      0010F4 DD 4E 06         [19] 3903 	ld	c, 6 (ix)
      0010F7 79               [ 4] 3904 	ld	a, c
      0010F8 3C               [ 4] 3905 	inc	a
      0010F9 6B               [ 4] 3906 	ld	l, e
      0010FA 62               [ 4] 3907 	ld	h, d
      0010FB 23               [ 6] 3908 	inc	hl
      0010FC C5               [11] 3909 	push	bc
      0010FD D5               [11] 3910 	push	de
      0010FE F5               [11] 3911 	push	af
      0010FF 33               [ 6] 3912 	inc	sp
      001100 E5               [11] 3913 	push	hl
      001101 CDr00r00         [17] 3914 	call	_WRTVRM
      001104 F1               [10] 3915 	pop	af
      001105 33               [ 6] 3916 	inc	sp
      001106 D1               [10] 3917 	pop	de
      001107 C1               [10] 3918 	pop	bc
                                   3919 ;src\/Graphics.h:427: WRTVRM(baseAddr + 32, tile + 2);
      001108 41               [ 4] 3920 	ld	b, c
      001109 04               [ 4] 3921 	inc	b
      00110A 04               [ 4] 3922 	inc	b
      00110B 21 20 00         [10] 3923 	ld	hl, #0x0020
      00110E 19               [11] 3924 	add	hl, de
      00110F C5               [11] 3925 	push	bc
      001110 D5               [11] 3926 	push	de
      001111 C5               [11] 3927 	push	bc
      001112 33               [ 6] 3928 	inc	sp
      001113 E5               [11] 3929 	push	hl
      001114 CDr00r00         [17] 3930 	call	_WRTVRM
      001117 F1               [10] 3931 	pop	af
      001118 33               [ 6] 3932 	inc	sp
      001119 D1               [10] 3933 	pop	de
      00111A C1               [10] 3934 	pop	bc
                                   3935 ;src\/Graphics.h:428: WRTVRM(baseAddr + 33, tile + 3);
      00111B 0C               [ 4] 3936 	inc	c
      00111C 0C               [ 4] 3937 	inc	c
      00111D 0C               [ 4] 3938 	inc	c
      00111E 21 21 00         [10] 3939 	ld	hl, #0x0021
      001121 19               [11] 3940 	add	hl, de
      001122 79               [ 4] 3941 	ld	a, c
      001123 F5               [11] 3942 	push	af
      001124 33               [ 6] 3943 	inc	sp
      001125 E5               [11] 3944 	push	hl
      001126 CDr00r00         [17] 3945 	call	_WRTVRM
      001129 F1               [10] 3946 	pop	af
      00112A 33               [ 6] 3947 	inc	sp
                                   3948 ;src\/Graphics.h:429: }
      00112B DD E1            [14] 3949 	pop	ix
      00112D C9               [10] 3950 	ret
                                   3951 ;src\/Graphics.h:431: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   3952 ;	---------------------------------
                                   3953 ; Function DrawBlock_SameTile
                                   3954 ; ---------------------------------
      00112E                       3955 _DrawBlock_SameTile::
      00112E DD E5            [15] 3956 	push	ix
      001130 DD 21 00 00      [14] 3957 	ld	ix,#0
      001134 DD 39            [15] 3958 	add	ix,sp
                                   3959 ;src\/Graphics.h:433: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001136 ED 4B C7 F3      [20] 3960 	ld	bc, (#_MSX_modedata_screen2 + 0)
      00113A DD 6E 04         [19] 3961 	ld	l, 4 (ix)
      00113D 26 00            [ 7] 3962 	ld	h, #0x00
      00113F 29               [11] 3963 	add	hl, hl
      001140 09               [11] 3964 	add	hl, bc
      001141 EB               [ 4] 3965 	ex	de, hl
      001142 DD 6E 05         [19] 3966 	ld	l, 5 (ix)
      001145 26 00            [ 7] 3967 	ld	h, #0x00
      001147 29               [11] 3968 	add	hl, hl
      001148 29               [11] 3969 	add	hl, hl
      001149 29               [11] 3970 	add	hl, hl
      00114A 29               [11] 3971 	add	hl, hl
      00114B 29               [11] 3972 	add	hl, hl
      00114C 29               [11] 3973 	add	hl, hl
      00114D 19               [11] 3974 	add	hl, de
      00114E 01 0A 00         [10] 3975 	ld	bc, #0x000a
      001151 09               [11] 3976 	add	hl, bc
      001152 4D               [ 4] 3977 	ld	c, l
      001153 44               [ 4] 3978 	ld	b, h
                                   3979 ;src\/Graphics.h:435: WRTVRM(baseAddr, tile);
      001154 C5               [11] 3980 	push	bc
      001155 DD 7E 06         [19] 3981 	ld	a, 6 (ix)
      001158 F5               [11] 3982 	push	af
      001159 33               [ 6] 3983 	inc	sp
      00115A C5               [11] 3984 	push	bc
      00115B CDr00r00         [17] 3985 	call	_WRTVRM
      00115E F1               [10] 3986 	pop	af
      00115F 33               [ 6] 3987 	inc	sp
      001160 C1               [10] 3988 	pop	bc
                                   3989 ;src\/Graphics.h:436: WRTVRM(baseAddr + 1, tile);
      001161 59               [ 4] 3990 	ld	e, c
      001162 50               [ 4] 3991 	ld	d, b
      001163 13               [ 6] 3992 	inc	de
      001164 C5               [11] 3993 	push	bc
      001165 DD 7E 06         [19] 3994 	ld	a, 6 (ix)
      001168 F5               [11] 3995 	push	af
      001169 33               [ 6] 3996 	inc	sp
      00116A D5               [11] 3997 	push	de
      00116B CDr00r00         [17] 3998 	call	_WRTVRM
      00116E F1               [10] 3999 	pop	af
      00116F 33               [ 6] 4000 	inc	sp
      001170 C1               [10] 4001 	pop	bc
                                   4002 ;src\/Graphics.h:437: WRTVRM(baseAddr + 32, tile);
      001171 21 20 00         [10] 4003 	ld	hl, #0x0020
      001174 09               [11] 4004 	add	hl, bc
      001175 C5               [11] 4005 	push	bc
      001176 DD 7E 06         [19] 4006 	ld	a, 6 (ix)
      001179 F5               [11] 4007 	push	af
      00117A 33               [ 6] 4008 	inc	sp
      00117B E5               [11] 4009 	push	hl
      00117C CDr00r00         [17] 4010 	call	_WRTVRM
      00117F F1               [10] 4011 	pop	af
      001180 33               [ 6] 4012 	inc	sp
      001181 C1               [10] 4013 	pop	bc
                                   4014 ;src\/Graphics.h:438: WRTVRM(baseAddr + 33, tile);
      001182 21 21 00         [10] 4015 	ld	hl, #0x0021
      001185 09               [11] 4016 	add	hl, bc
      001186 DD 7E 06         [19] 4017 	ld	a, 6 (ix)
      001189 F5               [11] 4018 	push	af
      00118A 33               [ 6] 4019 	inc	sp
      00118B E5               [11] 4020 	push	hl
      00118C CDr00r00         [17] 4021 	call	_WRTVRM
      00118F F1               [10] 4022 	pop	af
      001190 33               [ 6] 4023 	inc	sp
                                   4024 ;src\/Graphics.h:439: }
      001191 DD E1            [14] 4025 	pop	ix
      001193 C9               [10] 4026 	ret
                                   4027 ;src\/Graphics.h:441: void DrawLine(byte line) {
                                   4028 ;	---------------------------------
                                   4029 ; Function DrawLine
                                   4030 ; ---------------------------------
      001194                       4031 _DrawLine::
      001194 DD E5            [15] 4032 	push	ix
      001196 DD 21 00 00      [14] 4033 	ld	ix,#0
      00119A DD 39            [15] 4034 	add	ix,sp
                                   4035 ;src\/Graphics.h:442: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00119C DD 4E 04         [19] 4036 	ld	c, 4 (ix)
      00119F 06 00            [ 7] 4037 	ld	b, #0x00
      0011A1                       4038 00103$:
      0011A1 78               [ 4] 4039 	ld	a, b
      0011A2 D6 06            [ 7] 4040 	sub	a, #0x06
      0011A4 30 23            [12] 4041 	jr	NC, 00105$
                                   4042 ;src\/Graphics.h:443: DrawBlock(col, line, playfield[col][line]);
      0011A6 58               [ 4] 4043 	ld	e, b
      0011A7 16 00            [ 7] 4044 	ld	d, #0x00
      0011A9 6B               [ 4] 4045 	ld	l, e
      0011AA 62               [ 4] 4046 	ld	h, d
      0011AB 29               [11] 4047 	add	hl, hl
      0011AC 19               [11] 4048 	add	hl, de
      0011AD 29               [11] 4049 	add	hl, hl
      0011AE 29               [11] 4050 	add	hl, hl
      0011AF 11r00r00         [10] 4051 	ld	de, #_playfield
      0011B2 19               [11] 4052 	add	hl, de
      0011B3 59               [ 4] 4053 	ld	e, c
      0011B4 16 00            [ 7] 4054 	ld	d, #0x00
      0011B6 19               [11] 4055 	add	hl, de
      0011B7 7E               [ 7] 4056 	ld	a, (hl)
      0011B8 C5               [11] 4057 	push	bc
      0011B9 F5               [11] 4058 	push	af
      0011BA 33               [ 6] 4059 	inc	sp
      0011BB 79               [ 4] 4060 	ld	a, c
      0011BC F5               [11] 4061 	push	af
      0011BD 33               [ 6] 4062 	inc	sp
      0011BE C5               [11] 4063 	push	bc
      0011BF 33               [ 6] 4064 	inc	sp
      0011C0 CDrC1r10         [17] 4065 	call	_DrawBlock
      0011C3 F1               [10] 4066 	pop	af
      0011C4 33               [ 6] 4067 	inc	sp
      0011C5 C1               [10] 4068 	pop	bc
                                   4069 ;src\/Graphics.h:442: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011C6 04               [ 4] 4070 	inc	b
      0011C7 18 D8            [12] 4071 	jr	00103$
      0011C9                       4072 00105$:
                                   4073 ;src\/Graphics.h:445: }
      0011C9 DD E1            [14] 4074 	pop	ix
      0011CB C9               [10] 4075 	ret
                                   4076 ;src\/Graphics.h:447: void DrawPiece(byte line) {
                                   4077 ;	---------------------------------
                                   4078 ; Function DrawPiece
                                   4079 ; ---------------------------------
      0011CC                       4080 _DrawPiece::
                                   4081 ;src\/Graphics.h:448: DrawLine(line);
      0011CC 21 02 00         [10] 4082 	ld	hl, #2
      0011CF 39               [11] 4083 	add	hl, sp
      0011D0 7E               [ 7] 4084 	ld	a, (hl)
      0011D1 F5               [11] 4085 	push	af
      0011D2 33               [ 6] 4086 	inc	sp
      0011D3 CDr94r11         [17] 4087 	call	_DrawLine
      0011D6 33               [ 6] 4088 	inc	sp
                                   4089 ;src\/Graphics.h:449: DrawLine(line + 1);
      0011D7 21 02 00         [10] 4090 	ld	hl, #2
      0011DA 39               [11] 4091 	add	hl, sp
      0011DB 46               [ 7] 4092 	ld	b, (hl)
      0011DC 78               [ 4] 4093 	ld	a, b
      0011DD 3C               [ 4] 4094 	inc	a
      0011DE C5               [11] 4095 	push	bc
      0011DF F5               [11] 4096 	push	af
      0011E0 33               [ 6] 4097 	inc	sp
      0011E1 CDr94r11         [17] 4098 	call	_DrawLine
      0011E4 33               [ 6] 4099 	inc	sp
      0011E5 C1               [10] 4100 	pop	bc
                                   4101 ;src\/Graphics.h:450: DrawLine(line + 2);
      0011E6 04               [ 4] 4102 	inc	b
      0011E7 04               [ 4] 4103 	inc	b
      0011E8 C5               [11] 4104 	push	bc
      0011E9 33               [ 6] 4105 	inc	sp
      0011EA CDr94r11         [17] 4106 	call	_DrawLine
      0011ED 33               [ 6] 4107 	inc	sp
                                   4108 ;src\/Graphics.h:451: }
      0011EE C9               [10] 4109 	ret
                                   4110 ;src\/Graphics.h:453: void DrawPlayfield() {
                                   4111 ;	---------------------------------
                                   4112 ; Function DrawPlayfield
                                   4113 ; ---------------------------------
      0011EF                       4114 _DrawPlayfield::
                                   4115 ;src\/Graphics.h:454: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011EF 06 00            [ 7] 4116 	ld	b, #0x00
      0011F1                       4117 00103$:
      0011F1 78               [ 4] 4118 	ld	a, b
      0011F2 D6 0C            [ 7] 4119 	sub	a, #0x0c
      0011F4 D0               [11] 4120 	ret	NC
                                   4121 ;src\/Graphics.h:455: DrawLine(line);
      0011F5 C5               [11] 4122 	push	bc
      0011F6 C5               [11] 4123 	push	bc
      0011F7 33               [ 6] 4124 	inc	sp
      0011F8 CDr94r11         [17] 4125 	call	_DrawLine
      0011FB 33               [ 6] 4126 	inc	sp
      0011FC C1               [10] 4127 	pop	bc
                                   4128 ;src\/Graphics.h:454: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011FD 04               [ 4] 4129 	inc	b
                                   4130 ;src\/Graphics.h:457: }
      0011FE 18 F1            [12] 4131 	jr	00103$
                                   4132 ;src\/Sound.h:1: void SoundFx_2() {
                                   4133 ;	---------------------------------
                                   4134 ; Function SoundFx_2
                                   4135 ; ---------------------------------
      001200                       4136 _SoundFx_2::
                                   4137 ;src\/Sound.h:2: GICINI();
      001200 CDr00r00         [17] 4138 	call	_GICINI
                                   4139 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001203 21 08 0F         [10] 4140 	ld	hl, #0x0f08
      001206 CDr00r00         [17] 4141 	call	_WRTPSG
                                   4142 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001209 0E 00            [ 7] 4143 	ld	c, #0x00
      00120B                       4144 00104$:
      00120B 79               [ 4] 4145 	ld	a, c
      00120C D6 FF            [ 7] 4146 	sub	a, #0xff
      00120E 30 11            [12] 4147 	jr	NC, 00101$
                                   4148 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001210 C5               [11] 4149 	push	bc
      001211 21 00 5D         [10] 4150 	ld	hl, #0x5d00
      001214 CDr00r00         [17] 4151 	call	_WRTPSG
      001217 21 01 00         [10] 4152 	ld	hl, #0x0001
      00121A CDr00r00         [17] 4153 	call	_WRTPSG
      00121D C1               [10] 4154 	pop	bc
                                   4155 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00121E 0C               [ 4] 4156 	inc	c
      00121F 18 EA            [12] 4157 	jr	00104$
      001221                       4158 00101$:
                                   4159 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001221 0E 00            [ 7] 4160 	ld	c, #0x00
      001223                       4161 00107$:
      001223 79               [ 4] 4162 	ld	a, c
      001224 D6 FF            [ 7] 4163 	sub	a, #0xff
      001226 30 11            [12] 4164 	jr	NC, 00102$
                                   4165 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001228 C5               [11] 4166 	push	bc
      001229 21 00 2D         [10] 4167 	ld	hl, #0x2d00
      00122C CDr00r00         [17] 4168 	call	_WRTPSG
      00122F 21 01 00         [10] 4169 	ld	hl, #0x0001
      001232 CDr00r00         [17] 4170 	call	_WRTPSG
      001235 C1               [10] 4171 	pop	bc
                                   4172 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001236 0C               [ 4] 4173 	inc	c
      001237 18 EA            [12] 4174 	jr	00107$
      001239                       4175 00102$:
                                   4176 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001239 21 08 00         [10] 4177 	ld	hl, #0x0008
                                   4178 ;src\/Sound.h:30: }
      00123C C3r00r00         [10] 4179 	jp	_WRTPSG
                                   4180 ;src\/Sound.h:32: void SoundFx_1() {
                                   4181 ;	---------------------------------
                                   4182 ; Function SoundFx_1
                                   4183 ; ---------------------------------
      00123F                       4184 _SoundFx_1::
                                   4185 ;src\/Sound.h:34: GICINI();
      00123F CDr00r00         [17] 4186 	call	_GICINI
                                   4187 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001242 21 06 97         [10] 4188 	ld	hl, #0x9706
      001245 CDr00r00         [17] 4189 	call	_WRTPSG
                                   4190 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      001248 21 07 81         [10] 4191 	ld	hl, #0x8107
      00124B CDr00r00         [17] 4192 	call	_WRTPSG
                                   4193 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      00124E 21 08 10         [10] 4194 	ld	hl, #0x1008
      001251 CDr00r00         [17] 4195 	call	_WRTPSG
                                   4196 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001254 21 0C 13         [10] 4197 	ld	hl, #0x130c
      001257 CDr00r00         [17] 4198 	call	_WRTPSG
                                   4199 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      00125A 21 0D 01         [10] 4200 	ld	hl, #0x010d
                                   4201 ;src\/Sound.h:49: }
      00125D C3r00r00         [10] 4202 	jp	_WRTPSG
                                   4203 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4204 ;	---------------------------------
                                   4205 ; Function CheckIfPlayfieldIsValid
                                   4206 ; ---------------------------------
      001260                       4207 _CheckIfPlayfieldIsValid::
      001260 DD E5            [15] 4208 	push	ix
      001262 DD 21 00 00      [14] 4209 	ld	ix,#0
      001266 DD 39            [15] 4210 	add	ix,sp
      001268 F5               [11] 4211 	push	af
      001269 F5               [11] 4212 	push	af
      00126A 3B               [ 6] 4213 	dec	sp
                                   4214 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      00126B DD 36 FB 00      [19] 4215 	ld	-5 (ix), #0
                                   4216 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00126F DD 36 FC 00      [19] 4217 	ld	-4 (ix), #0
      001273 DD 36 FE 00      [19] 4218 	ld	-2 (ix), #0
      001277                       4219 00119$:
      001277 DD 7E FE         [19] 4220 	ld	a, -2 (ix)
      00127A D6 0C            [ 7] 4221 	sub	a, #0x0c
      00127C D2r0Fr13         [10] 4222 	jp	NC, 00121$
                                   4223 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00127F DD 36 FD 00      [19] 4224 	ld	-3 (ix), #0
      001283 DD 36 FF 00      [19] 4225 	ld	-1 (ix), #0
      001287                       4226 00116$:
      001287 DD 7E FF         [19] 4227 	ld	a, -1 (ix)
      00128A D6 06            [ 7] 4228 	sub	a, #0x06
      00128C 30 75            [12] 4229 	jr	NC, 00120$
                                   4230 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      00128E 0E 00            [ 7] 4231 	ld	c, #0x00
      001290                       4232 00113$:
      001290 79               [ 4] 4233 	ld	a, c
      001291 D6 05            [ 7] 4234 	sub	a, #0x05
      001293 30 33            [12] 4235 	jr	NC, 00104$
                                   4236 ;src\/CheckPlayfield.h:7: found = FALSE;
      001295 DD 36 FB 00      [19] 4237 	ld	-5 (ix), #0
                                   4238 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001299 DD 5E FF         [19] 4239 	ld	e, -1 (ix)
      00129C 16 00            [ 7] 4240 	ld	d, #0x00
      00129E 6B               [ 4] 4241 	ld	l, e
      00129F 62               [ 4] 4242 	ld	h, d
      0012A0 29               [11] 4243 	add	hl, hl
      0012A1 19               [11] 4244 	add	hl, de
      0012A2 29               [11] 4245 	add	hl, hl
      0012A3 29               [11] 4246 	add	hl, hl
      0012A4 11r48r00         [10] 4247 	ld	de, #_playfieldTemp
      0012A7 19               [11] 4248 	add	hl, de
      0012A8 7D               [ 4] 4249 	ld	a, l
      0012A9 DD 86 FE         [19] 4250 	add	a, -2 (ix)
      0012AC 5F               [ 4] 4251 	ld	e, a
      0012AD 7C               [ 4] 4252 	ld	a, h
      0012AE CE 00            [ 7] 4253 	adc	a, #0x00
      0012B0 57               [ 4] 4254 	ld	d, a
      0012B1 21r18r00         [10] 4255 	ld	hl, #_pieces
      0012B4 06 00            [ 7] 4256 	ld	b, #0x00
      0012B6 09               [11] 4257 	add	hl, bc
      0012B7 46               [ 7] 4258 	ld	b, (hl)
      0012B8 1A               [ 7] 4259 	ld	a, (de)
      0012B9 B8               [ 4] 4260 	cp	a, b
      0012BA 28 03            [12] 4261 	jr	Z, 00101$
      0012BC B7               [ 4] 4262 	or	a, a
      0012BD 20 06            [12] 4263 	jr	NZ, 00114$
      0012BF                       4264 00101$:
                                   4265 ;src\/CheckPlayfield.h:9: found = TRUE;
      0012BF DD 36 FB 01      [19] 4266 	ld	-5 (ix), #0x01
                                   4267 ;src\/CheckPlayfield.h:10: break;
      0012C3 18 03            [12] 4268 	jr	00104$
      0012C5                       4269 00114$:
                                   4270 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      0012C5 0C               [ 4] 4271 	inc	c
      0012C6 18 C8            [12] 4272 	jr	00113$
      0012C8                       4273 00104$:
                                   4274 ;src\/CheckPlayfield.h:13: if(!found) {
      0012C8 DD 7E FB         [19] 4275 	ld	a, -5 (ix)
      0012CB B7               [ 4] 4276 	or	a, a
      0012CC 20 2A            [12] 4277 	jr	NZ, 00117$
                                   4278 ;src\/CheckPlayfield.h:14: d_col = col;
      0012CE DD 7E FD         [19] 4279 	ld	a, -3 (ix)
      0012D1 32r09r00         [13] 4280 	ld	(#_d_col),a
                                   4281 ;src\/CheckPlayfield.h:15: d_line = line;
      0012D4 DD 7E FC         [19] 4282 	ld	a, -4 (ix)
      0012D7 32r0Ar00         [13] 4283 	ld	(#_d_line),a
                                   4284 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      0012DA DD 4E FD         [19] 4285 	ld	c, -3 (ix)
      0012DD 06 00            [ 7] 4286 	ld	b, #0x00
      0012DF 69               [ 4] 4287 	ld	l, c
      0012E0 60               [ 4] 4288 	ld	h, b
      0012E1 29               [11] 4289 	add	hl, hl
      0012E2 09               [11] 4290 	add	hl, bc
      0012E3 29               [11] 4291 	add	hl, hl
      0012E4 29               [11] 4292 	add	hl, hl
      0012E5 11r48r00         [10] 4293 	ld	de, #_playfieldTemp
      0012E8 19               [11] 4294 	add	hl, de
      0012E9 DD 5E FC         [19] 4295 	ld	e, -4 (ix)
      0012EC 16 00            [ 7] 4296 	ld	d, #0x00
      0012EE 19               [11] 4297 	add	hl, de
      0012EF 7E               [ 7] 4298 	ld	a, (hl)
      0012F0 32r0Br00         [13] 4299 	ld	(_d_value+0), a
                                   4300 ;src\/CheckPlayfield.h:18: while(1) { 
      0012F3                       4301 00106$:
                                   4302 ;src\/CheckPlayfield.h:19: BEEP();
      0012F3 CDr00r00         [17] 4303 	call	_BEEP
      0012F6 18 FB            [12] 4304 	jr	00106$
      0012F8                       4305 00117$:
                                   4306 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0012F8 DD 34 FF         [23] 4307 	inc	-1 (ix)
      0012FB DD 7E FF         [19] 4308 	ld	a, -1 (ix)
      0012FE DD 77 FD         [19] 4309 	ld	-3 (ix), a
      001301 18 84            [12] 4310 	jr	00116$
      001303                       4311 00120$:
                                   4312 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001303 DD 34 FE         [23] 4313 	inc	-2 (ix)
      001306 DD 7E FE         [19] 4314 	ld	a, -2 (ix)
      001309 DD 77 FC         [19] 4315 	ld	-4 (ix), a
      00130C C3r77r12         [10] 4316 	jp	00119$
      00130F                       4317 00121$:
                                   4318 ;src\/CheckPlayfield.h:25: }
      00130F DD F9            [10] 4319 	ld	sp, ix
      001311 DD E1            [14] 4320 	pop	ix
      001313 C9               [10] 4321 	ret
                                   4322 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4323 ;	---------------------------------
                                   4324 ; Function CheckPlayfield
                                   4325 ; ---------------------------------
      001314                       4326 _CheckPlayfield::
      001314 DD E5            [15] 4327 	push	ix
      001316 DD 21 00 00      [14] 4328 	ld	ix,#0
      00131A DD 39            [15] 4329 	add	ix,sp
      00131C 21 EF FF         [10] 4330 	ld	hl, #-17
      00131F 39               [11] 4331 	add	hl, sp
      001320 F9               [ 6] 4332 	ld	sp, hl
                                   4333 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      001321 DD 36 EF 00      [19] 4334 	ld	-17 (ix), #0
                                   4335 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001325 0E 00            [ 7] 4336 	ld	c, #0x00
      001327                       4337 00190$:
      001327 79               [ 4] 4338 	ld	a, c
      001328 D6 0C            [ 7] 4339 	sub	a, #0x0c
      00132A 30 36            [12] 4340 	jr	NC, 00102$
                                   4341 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00132C DD 36 FF 00      [19] 4342 	ld	-1 (ix), #0
      001330                       4343 00187$:
      001330 DD 7E FF         [19] 4344 	ld	a, -1 (ix)
      001333 D6 06            [ 7] 4345 	sub	a, #0x06
      001335 30 28            [12] 4346 	jr	NC, 00191$
                                   4347 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      001337 DD 5E FF         [19] 4348 	ld	e, -1 (ix)
      00133A 16 00            [ 7] 4349 	ld	d, #0x00
      00133C 6B               [ 4] 4350 	ld	l, e
      00133D 62               [ 4] 4351 	ld	h, d
      00133E 29               [11] 4352 	add	hl, hl
      00133F 19               [11] 4353 	add	hl, de
      001340 29               [11] 4354 	add	hl, hl
      001341 29               [11] 4355 	add	hl, hl
      001342 EB               [ 4] 4356 	ex	de, hl
      001343 21r48r00         [10] 4357 	ld	hl, #_playfieldTemp
      001346 19               [11] 4358 	add	hl, de
      001347 06 00            [ 7] 4359 	ld	b, #0x00
      001349 09               [11] 4360 	add	hl, bc
      00134A 3Er00            [ 7] 4361 	ld	a, #<(_playfield)
      00134C 83               [ 4] 4362 	add	a, e
      00134D 5F               [ 4] 4363 	ld	e, a
      00134E 3Es00            [ 7] 4364 	ld	a, #>(_playfield)
      001350 8A               [ 4] 4365 	adc	a, d
      001351 57               [ 4] 4366 	ld	d, a
      001352 7B               [ 4] 4367 	ld	a, e
      001353 81               [ 4] 4368 	add	a, c
      001354 5F               [ 4] 4369 	ld	e, a
      001355 30 01            [12] 4370 	jr	NC, 00599$
      001357 14               [ 4] 4371 	inc	d
      001358                       4372 00599$:
      001358 1A               [ 7] 4373 	ld	a, (de)
      001359 77               [ 7] 4374 	ld	(hl), a
                                   4375 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00135A DD 34 FF         [23] 4376 	inc	-1 (ix)
      00135D 18 D1            [12] 4377 	jr	00187$
      00135F                       4378 00191$:
                                   4379 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00135F 0C               [ 4] 4380 	inc	c
      001360 18 C5            [12] 4381 	jr	00190$
      001362                       4382 00102$:
                                   4383 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001362 DD 36 FE 00      [19] 4384 	ld	-2 (ix), #0
      001366                       4385 00196$:
      001366 DD 7E FE         [19] 4386 	ld	a, -2 (ix)
      001369 D6 0C            [ 7] 4387 	sub	a, #0x0c
      00136B D2r6Ar14         [10] 4388 	jp	NC, 00108$
                                   4389 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00136E DD 36 FF 02      [19] 4390 	ld	-1 (ix), #0x02
      001372                       4391 00193$:
      001372 DD 7E FF         [19] 4392 	ld	a, -1 (ix)
      001375 D6 06            [ 7] 4393 	sub	a, #0x06
      001377 D2r64r14         [10] 4394 	jp	NC, 00197$
                                   4395 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      00137A DD 4E FF         [19] 4396 	ld	c, -1 (ix)
      00137D 06 00            [ 7] 4397 	ld	b, #0x00
      00137F 69               [ 4] 4398 	ld	l, c
      001380 60               [ 4] 4399 	ld	h, b
      001381 29               [11] 4400 	add	hl, hl
      001382 09               [11] 4401 	add	hl, bc
      001383 29               [11] 4402 	add	hl, hl
      001384 29               [11] 4403 	add	hl, hl
      001385 DD 75 F5         [19] 4404 	ld	-11 (ix), l
      001388 DD 74 F6         [19] 4405 	ld	-10 (ix), h
      00138B 3Er48            [ 7] 4406 	ld	a, #<(_playfieldTemp)
      00138D DD 86 F5         [19] 4407 	add	a, -11 (ix)
      001390 4F               [ 4] 4408 	ld	c, a
      001391 3Es00            [ 7] 4409 	ld	a, #>(_playfieldTemp)
      001393 DD 8E F6         [19] 4410 	adc	a, -10 (ix)
      001396 47               [ 4] 4411 	ld	b, a
      001397 79               [ 4] 4412 	ld	a, c
      001398 DD 86 FE         [19] 4413 	add	a, -2 (ix)
      00139B DD 77 F7         [19] 4414 	ld	-9 (ix), a
      00139E 78               [ 4] 4415 	ld	a, b
      00139F CE 00            [ 7] 4416 	adc	a, #0x00
      0013A1 DD 77 F8         [19] 4417 	ld	-8 (ix), a
      0013A4 DD 6E F7         [19] 4418 	ld	l, -9 (ix)
      0013A7 DD 66 F8         [19] 4419 	ld	h, -8 (ix)
      0013AA 7E               [ 7] 4420 	ld	a, (hl)
      0013AB DD 77 F9         [19] 4421 	ld	-7 (ix), a
      0013AE B7               [ 4] 4422 	or	a, a
      0013AF CAr5Er14         [10] 4423 	jp	Z, 00194$
                                   4424 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      0013B2 DD 7E FF         [19] 4425 	ld	a, -1 (ix)
      0013B5 DD 77 FD         [19] 4426 	ld	-3 (ix), a
      0013B8 4F               [ 4] 4427 	ld	c, a
      0013B9 0D               [ 4] 4428 	dec	c
      0013BA 0D               [ 4] 4429 	dec	c
      0013BB 79               [ 4] 4430 	ld	a, c
      0013BC 07               [ 4] 4431 	rlca
      0013BD 9F               [ 4] 4432 	sbc	a, a
      0013BE 47               [ 4] 4433 	ld	b, a
      0013BF 69               [ 4] 4434 	ld	l, c
      0013C0 60               [ 4] 4435 	ld	h, b
      0013C1 29               [11] 4436 	add	hl, hl
      0013C2 09               [11] 4437 	add	hl, bc
      0013C3 29               [11] 4438 	add	hl, hl
      0013C4 29               [11] 4439 	add	hl, hl
      0013C5 EB               [ 4] 4440 	ex	de, hl
      0013C6 21r48r00         [10] 4441 	ld	hl, #_playfieldTemp
      0013C9 19               [11] 4442 	add	hl, de
      0013CA 7D               [ 4] 4443 	ld	a, l
      0013CB DD 86 FE         [19] 4444 	add	a, -2 (ix)
      0013CE DD 77 FA         [19] 4445 	ld	-6 (ix), a
      0013D1 7C               [ 4] 4446 	ld	a, h
      0013D2 CE 00            [ 7] 4447 	adc	a, #0x00
      0013D4 DD 77 FB         [19] 4448 	ld	-5 (ix), a
      0013D7 DD 4E FD         [19] 4449 	ld	c, -3 (ix)
      0013DA 0D               [ 4] 4450 	dec	c
      0013DB 79               [ 4] 4451 	ld	a, c
      0013DC 07               [ 4] 4452 	rlca
      0013DD 9F               [ 4] 4453 	sbc	a, a
      0013DE 47               [ 4] 4454 	ld	b, a
      0013DF 69               [ 4] 4455 	ld	l, c
      0013E0 60               [ 4] 4456 	ld	h, b
      0013E1 29               [11] 4457 	add	hl, hl
      0013E2 09               [11] 4458 	add	hl, bc
      0013E3 29               [11] 4459 	add	hl, hl
      0013E4 29               [11] 4460 	add	hl, hl
      0013E5 DD 75 FC         [19] 4461 	ld	-4 (ix), l
      0013E8 DD 74 FD         [19] 4462 	ld	-3 (ix), h
      0013EB 3Er48            [ 7] 4463 	ld	a, #<(_playfieldTemp)
      0013ED DD 86 FC         [19] 4464 	add	a, -4 (ix)
      0013F0 4F               [ 4] 4465 	ld	c, a
      0013F1 3Es00            [ 7] 4466 	ld	a, #>(_playfieldTemp)
      0013F3 DD 8E FD         [19] 4467 	adc	a, -3 (ix)
      0013F6 47               [ 4] 4468 	ld	b, a
      0013F7 79               [ 4] 4469 	ld	a, c
      0013F8 DD 86 FE         [19] 4470 	add	a, -2 (ix)
      0013FB 4F               [ 4] 4471 	ld	c, a
      0013FC 30 01            [12] 4472 	jr	NC, 00600$
      0013FE 04               [ 4] 4473 	inc	b
      0013FF                       4474 00600$:
      0013FF DD 6E FA         [19] 4475 	ld	l, -6 (ix)
      001402 DD 66 FB         [19] 4476 	ld	h, -5 (ix)
      001405 6E               [ 7] 4477 	ld	l, (hl)
      001406 0A               [ 7] 4478 	ld	a, (bc)
      001407 67               [ 4] 4479 	ld	h, a
      001408 7D               [ 4] 4480 	ld	a, l
      001409 94               [ 4] 4481 	sub	a, h
      00140A 20 52            [12] 4482 	jr	NZ, 00194$
                                   4483 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      00140C DD 7E F9         [19] 4484 	ld	a, -7 (ix)
      00140F 94               [ 4] 4485 	sub	a, h
      001410 20 4C            [12] 4486 	jr	NZ, 00194$
                                   4487 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      001412 DD 36 EF 01      [19] 4488 	ld	-17 (ix), #0x01
                                   4489 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001416 3Er00            [ 7] 4490 	ld	a, #<(_playfield)
      001418 83               [ 4] 4491 	add	a, e
      001419 5F               [ 4] 4492 	ld	e, a
      00141A 3Es00            [ 7] 4493 	ld	a, #>(_playfield)
      00141C 8A               [ 4] 4494 	adc	a, d
      00141D 57               [ 4] 4495 	ld	d, a
      00141E 7B               [ 4] 4496 	ld	a, e
      00141F DD 86 FE         [19] 4497 	add	a, -2 (ix)
      001422 5F               [ 4] 4498 	ld	e, a
      001423 30 01            [12] 4499 	jr	NC, 00605$
      001425 14               [ 4] 4500 	inc	d
      001426                       4501 00605$:
      001426 7D               [ 4] 4502 	ld	a, l
      001427 CB FF            [ 8] 4503 	set	7, a
      001429 12               [ 7] 4504 	ld	(de), a
                                   4505 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      00142A 3Er00            [ 7] 4506 	ld	a, #<(_playfield)
      00142C DD 86 FC         [19] 4507 	add	a, -4 (ix)
      00142F 5F               [ 4] 4508 	ld	e, a
      001430 3Es00            [ 7] 4509 	ld	a, #>(_playfield)
      001432 DD 8E FD         [19] 4510 	adc	a, -3 (ix)
      001435 57               [ 4] 4511 	ld	d, a
      001436 DD 6E FE         [19] 4512 	ld	l, -2 (ix)
      001439 26 00            [ 7] 4513 	ld	h, #0x00
      00143B 19               [11] 4514 	add	hl, de
      00143C 0A               [ 7] 4515 	ld	a, (bc)
      00143D CB FF            [ 8] 4516 	set	7, a
      00143F 77               [ 7] 4517 	ld	(hl), a
                                   4518 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001440 3Er00            [ 7] 4519 	ld	a, #<(_playfield)
      001442 DD 86 F5         [19] 4520 	add	a, -11 (ix)
      001445 4F               [ 4] 4521 	ld	c, a
      001446 3Es00            [ 7] 4522 	ld	a, #>(_playfield)
      001448 DD 8E F6         [19] 4523 	adc	a, -10 (ix)
      00144B 47               [ 4] 4524 	ld	b, a
      00144C 79               [ 4] 4525 	ld	a, c
      00144D DD 86 FE         [19] 4526 	add	a, -2 (ix)
      001450 4F               [ 4] 4527 	ld	c, a
      001451 30 01            [12] 4528 	jr	NC, 00606$
      001453 04               [ 4] 4529 	inc	b
      001454                       4530 00606$:
      001454 DD 6E F7         [19] 4531 	ld	l, -9 (ix)
      001457 DD 66 F8         [19] 4532 	ld	h, -8 (ix)
      00145A 7E               [ 7] 4533 	ld	a, (hl)
      00145B CB FF            [ 8] 4534 	set	7, a
      00145D 02               [ 7] 4535 	ld	(bc), a
      00145E                       4536 00194$:
                                   4537 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00145E DD 34 FF         [23] 4538 	inc	-1 (ix)
      001461 C3r72r13         [10] 4539 	jp	00193$
      001464                       4540 00197$:
                                   4541 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001464 DD 34 FE         [23] 4542 	inc	-2 (ix)
      001467 C3r66r13         [10] 4543 	jp	00196$
      00146A                       4544 00108$:
                                   4545 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00146A 0E 02            [ 7] 4546 	ld	c, #0x02
      00146C                       4547 00202$:
      00146C 79               [ 4] 4548 	ld	a, c
      00146D D6 0C            [ 7] 4549 	sub	a, #0x0c
      00146F D2r31r15         [10] 4550 	jp	NC, 00114$
                                   4551 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001472 DD 36 FF 00      [19] 4552 	ld	-1 (ix), #0
      001476                       4553 00199$:
      001476 DD 7E FF         [19] 4554 	ld	a, -1 (ix)
      001479 D6 06            [ 7] 4555 	sub	a, #0x06
      00147B D2r2Dr15         [10] 4556 	jp	NC, 00203$
                                   4557 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      00147E DD 5E FF         [19] 4558 	ld	e, -1 (ix)
      001481 16 00            [ 7] 4559 	ld	d, #0x00
      001483 6B               [ 4] 4560 	ld	l, e
      001484 62               [ 4] 4561 	ld	h, d
      001485 29               [11] 4562 	add	hl, hl
      001486 19               [11] 4563 	add	hl, de
      001487 29               [11] 4564 	add	hl, hl
      001488 29               [11] 4565 	add	hl, hl
      001489 DD 75 F7         [19] 4566 	ld	-9 (ix), l
      00148C DD 74 F8         [19] 4567 	ld	-8 (ix), h
      00148F 3Er48            [ 7] 4568 	ld	a, #<(_playfieldTemp)
      001491 DD 86 F7         [19] 4569 	add	a, -9 (ix)
      001494 5F               [ 4] 4570 	ld	e, a
      001495 3Es00            [ 7] 4571 	ld	a, #>(_playfieldTemp)
      001497 DD 8E F8         [19] 4572 	adc	a, -8 (ix)
      00149A 57               [ 4] 4573 	ld	d, a
      00149B 7B               [ 4] 4574 	ld	a, e
      00149C 81               [ 4] 4575 	add	a, c
      00149D DD 77 F9         [19] 4576 	ld	-7 (ix), a
      0014A0 7A               [ 4] 4577 	ld	a, d
      0014A1 CE 00            [ 7] 4578 	adc	a, #0x00
      0014A3 DD 77 FA         [19] 4579 	ld	-6 (ix), a
      0014A6 DD 6E F9         [19] 4580 	ld	l, -7 (ix)
      0014A9 DD 66 FA         [19] 4581 	ld	h, -6 (ix)
      0014AC 7E               [ 7] 4582 	ld	a, (hl)
      0014AD DD 77 FE         [19] 4583 	ld	-2 (ix), a
      0014B0 B7               [ 4] 4584 	or	a, a
      0014B1 28 74            [12] 4585 	jr	Z, 00200$
                                   4586 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      0014B3 DD 71 FD         [19] 4587 	ld	-3 (ix), c
      0014B6 79               [ 4] 4588 	ld	a, c
      0014B7 C6 FE            [ 7] 4589 	add	a, #0xfe
      0014B9 DD 77 FB         [19] 4590 	ld	-5 (ix), a
      0014BC 6F               [ 4] 4591 	ld	l, a
      0014BD 26 00            [ 7] 4592 	ld	h, #0x00
      0014BF 19               [11] 4593 	add	hl, de
      0014C0 DD 46 FD         [19] 4594 	ld	b, -3 (ix)
      0014C3 05               [ 4] 4595 	dec	b
      0014C4 7B               [ 4] 4596 	ld	a, e
      0014C5 80               [ 4] 4597 	add	a, b
      0014C6 5F               [ 4] 4598 	ld	e, a
      0014C7 30 01            [12] 4599 	jr	NC, 00607$
      0014C9 14               [ 4] 4600 	inc	d
      0014CA                       4601 00607$:
      0014CA 7E               [ 7] 4602 	ld	a, (hl)
      0014CB DD 77 FC         [19] 4603 	ld	-4 (ix), a
      0014CE 1A               [ 7] 4604 	ld	a, (de)
      0014CF 6F               [ 4] 4605 	ld	l, a
      0014D0 DD 7E FC         [19] 4606 	ld	a, -4 (ix)
      0014D3 95               [ 4] 4607 	sub	a, l
      0014D4 20 51            [12] 4608 	jr	NZ, 00200$
                                   4609 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      0014D6 DD 7E FE         [19] 4610 	ld	a, -2 (ix)
      0014D9 95               [ 4] 4611 	sub	a, l
      0014DA 20 4B            [12] 4612 	jr	NZ, 00200$
                                   4613 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      0014DC DD 36 EF 01      [19] 4614 	ld	-17 (ix), #0x01
                                   4615 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0014E0 3Er00            [ 7] 4616 	ld	a, #<(_playfield)
      0014E2 DD 86 F7         [19] 4617 	add	a, -9 (ix)
      0014E5 DD 77 FD         [19] 4618 	ld	-3 (ix), a
      0014E8 3Es00            [ 7] 4619 	ld	a, #>(_playfield)
      0014EA DD 8E F8         [19] 4620 	adc	a, -8 (ix)
      0014ED DD 77 FE         [19] 4621 	ld	-2 (ix), a
      0014F0 DD 7E FD         [19] 4622 	ld	a, -3 (ix)
      0014F3 DD 86 FB         [19] 4623 	add	a, -5 (ix)
      0014F6 6F               [ 4] 4624 	ld	l, a
      0014F7 DD 7E FE         [19] 4625 	ld	a, -2 (ix)
      0014FA CE 00            [ 7] 4626 	adc	a, #0x00
      0014FC 67               [ 4] 4627 	ld	h, a
      0014FD DD 7E FC         [19] 4628 	ld	a, -4 (ix)
      001500 CB FF            [ 8] 4629 	set	7, a
      001502 77               [ 7] 4630 	ld	(hl), a
                                   4631 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001503 DD 7E FD         [19] 4632 	ld	a, -3 (ix)
      001506 80               [ 4] 4633 	add	a, b
      001507 6F               [ 4] 4634 	ld	l, a
      001508 DD 7E FE         [19] 4635 	ld	a, -2 (ix)
      00150B CE 00            [ 7] 4636 	adc	a, #0x00
      00150D 67               [ 4] 4637 	ld	h, a
      00150E 1A               [ 7] 4638 	ld	a, (de)
      00150F CB FF            [ 8] 4639 	set	7, a
      001511 77               [ 7] 4640 	ld	(hl), a
                                   4641 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001512 DD 7E FD         [19] 4642 	ld	a, -3 (ix)
      001515 81               [ 4] 4643 	add	a, c
      001516 5F               [ 4] 4644 	ld	e, a
      001517 DD 7E FE         [19] 4645 	ld	a, -2 (ix)
      00151A CE 00            [ 7] 4646 	adc	a, #0x00
      00151C 57               [ 4] 4647 	ld	d, a
      00151D DD 6E F9         [19] 4648 	ld	l, -7 (ix)
      001520 DD 66 FA         [19] 4649 	ld	h, -6 (ix)
      001523 7E               [ 7] 4650 	ld	a, (hl)
      001524 CB FF            [ 8] 4651 	set	7, a
      001526 12               [ 7] 4652 	ld	(de), a
      001527                       4653 00200$:
                                   4654 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001527 DD 34 FF         [23] 4655 	inc	-1 (ix)
      00152A C3r76r14         [10] 4656 	jp	00199$
      00152D                       4657 00203$:
                                   4658 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00152D 0C               [ 4] 4659 	inc	c
      00152E C3r6Cr14         [10] 4660 	jp	00202$
      001531                       4661 00114$:
                                   4662 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001531 DD 36 FE 02      [19] 4663 	ld	-2 (ix), #0x02
      001535                       4664 00208$:
      001535 DD 7E FE         [19] 4665 	ld	a, -2 (ix)
      001538 D6 0C            [ 7] 4666 	sub	a, #0x0c
      00153A D2rD8r16         [10] 4667 	jp	NC, 00124$
                                   4668 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00153D DD 36 FF 02      [19] 4669 	ld	-1 (ix), #0x02
      001541                       4670 00205$:
      001541 DD 7E FF         [19] 4671 	ld	a, -1 (ix)
      001544 D6 06            [ 7] 4672 	sub	a, #0x06
      001546 D2rD2r16         [10] 4673 	jp	NC, 00209$
                                   4674 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      001549 DD 4E FF         [19] 4675 	ld	c, -1 (ix)
      00154C 06 00            [ 7] 4676 	ld	b, #0x00
      00154E 69               [ 4] 4677 	ld	l, c
      00154F 60               [ 4] 4678 	ld	h, b
      001550 29               [11] 4679 	add	hl, hl
      001551 09               [11] 4680 	add	hl, bc
      001552 29               [11] 4681 	add	hl, hl
      001553 29               [11] 4682 	add	hl, hl
      001554 DD 75 F0         [19] 4683 	ld	-16 (ix), l
      001557 DD 74 F1         [19] 4684 	ld	-15 (ix), h
      00155A 3Er48            [ 7] 4685 	ld	a, #<(_playfieldTemp)
      00155C DD 86 F0         [19] 4686 	add	a, -16 (ix)
      00155F 4F               [ 4] 4687 	ld	c, a
      001560 3Es00            [ 7] 4688 	ld	a, #>(_playfieldTemp)
      001562 DD 8E F1         [19] 4689 	adc	a, -15 (ix)
      001565 47               [ 4] 4690 	ld	b, a
      001566 79               [ 4] 4691 	ld	a, c
      001567 DD 86 FE         [19] 4692 	add	a, -2 (ix)
      00156A DD 77 F2         [19] 4693 	ld	-14 (ix), a
      00156D 78               [ 4] 4694 	ld	a, b
      00156E CE 00            [ 7] 4695 	adc	a, #0x00
      001570 DD 77 F3         [19] 4696 	ld	-13 (ix), a
      001573 DD 6E F2         [19] 4697 	ld	l, -14 (ix)
      001576 DD 66 F3         [19] 4698 	ld	h, -13 (ix)
      001579 5E               [ 7] 4699 	ld	e, (hl)
                                   4700 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      00157A DD 56 FF         [19] 4701 	ld	d, -1 (ix)
      00157D DD 66 FE         [19] 4702 	ld	h, -2 (ix)
      001580 6A               [ 4] 4703 	ld	l, d
      001581 2D               [ 4] 4704 	dec	l
      001582 2D               [ 4] 4705 	dec	l
      001583 7C               [ 4] 4706 	ld	a, h
      001584 C6 FE            [ 7] 4707 	add	a, #0xfe
      001586 DD 77 F4         [19] 4708 	ld	-12 (ix), a
      001589 15               [ 4] 4709 	dec	d
      00158A 7C               [ 4] 4710 	ld	a, h
      00158B C6 FF            [ 7] 4711 	add	a, #0xff
      00158D DD 77 F5         [19] 4712 	ld	-11 (ix), a
      001590 D5               [11] 4713 	push	de
      001591 5D               [ 4] 4714 	ld	e, l
      001592 7B               [ 4] 4715 	ld	a, e
      001593 07               [ 4] 4716 	rlca
      001594 9F               [ 4] 4717 	sbc	a, a
      001595 57               [ 4] 4718 	ld	d, a
      001596 6B               [ 4] 4719 	ld	l, e
      001597 62               [ 4] 4720 	ld	h, d
      001598 29               [11] 4721 	add	hl, hl
      001599 19               [11] 4722 	add	hl, de
      00159A 29               [11] 4723 	add	hl, hl
      00159B 29               [11] 4724 	add	hl, hl
      00159C D1               [10] 4725 	pop	de
      00159D DD 75 F6         [19] 4726 	ld	-10 (ix), l
      0015A0 DD 74 F7         [19] 4727 	ld	-9 (ix), h
      0015A3 D5               [11] 4728 	push	de
      0015A4 5A               [ 4] 4729 	ld	e, d
      0015A5 7B               [ 4] 4730 	ld	a, e
      0015A6 07               [ 4] 4731 	rlca
      0015A7 9F               [ 4] 4732 	sbc	a, a
      0015A8 57               [ 4] 4733 	ld	d, a
      0015A9 6B               [ 4] 4734 	ld	l, e
      0015AA 62               [ 4] 4735 	ld	h, d
      0015AB 29               [11] 4736 	add	hl, hl
      0015AC 19               [11] 4737 	add	hl, de
      0015AD 29               [11] 4738 	add	hl, hl
      0015AE 29               [11] 4739 	add	hl, hl
      0015AF D1               [10] 4740 	pop	de
      0015B0 DD 75 F8         [19] 4741 	ld	-8 (ix), l
      0015B3 DD 74 F9         [19] 4742 	ld	-7 (ix), h
      0015B6 3Er48            [ 7] 4743 	ld	a, #<(_playfieldTemp)
      0015B8 DD 86 F6         [19] 4744 	add	a, -10 (ix)
      0015BB DD 77 FA         [19] 4745 	ld	-6 (ix), a
      0015BE 3Es00            [ 7] 4746 	ld	a, #>(_playfieldTemp)
      0015C0 DD 8E F7         [19] 4747 	adc	a, -9 (ix)
      0015C3 DD 77 FB         [19] 4748 	ld	-5 (ix), a
      0015C6 3Er48            [ 7] 4749 	ld	a, #<(_playfieldTemp)
      0015C8 DD 86 F8         [19] 4750 	add	a, -8 (ix)
      0015CB 57               [ 4] 4751 	ld	d, a
      0015CC 3Es00            [ 7] 4752 	ld	a, #>(_playfieldTemp)
      0015CE DD 8E F9         [19] 4753 	adc	a, -7 (ix)
      0015D1 6F               [ 4] 4754 	ld	l, a
      0015D2 7A               [ 4] 4755 	ld	a, d
      0015D3 DD 86 F5         [19] 4756 	add	a, -11 (ix)
      0015D6 DD 77 FC         [19] 4757 	ld	-4 (ix), a
      0015D9 7D               [ 4] 4758 	ld	a, l
      0015DA CE 00            [ 7] 4759 	adc	a, #0x00
      0015DC DD 77 FD         [19] 4760 	ld	-3 (ix), a
                                   4761 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0015DF 7B               [ 4] 4762 	ld	a, e
      0015E0 B7               [ 4] 4763 	or	a, a
      0015E1 28 74            [12] 4764 	jr	Z, 00116$
                                   4765 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0015E3 DD 7E FA         [19] 4766 	ld	a, -6 (ix)
      0015E6 DD 86 F4         [19] 4767 	add	a, -12 (ix)
      0015E9 6F               [ 4] 4768 	ld	l, a
      0015EA DD 7E FB         [19] 4769 	ld	a, -5 (ix)
      0015ED CE 00            [ 7] 4770 	adc	a, #0x00
      0015EF 67               [ 4] 4771 	ld	h, a
      0015F0 56               [ 7] 4772 	ld	d, (hl)
      0015F1 DD 6E FC         [19] 4773 	ld	l, -4 (ix)
      0015F4 DD 66 FD         [19] 4774 	ld	h, -3 (ix)
      0015F7 6E               [ 7] 4775 	ld	l, (hl)
      0015F8 7A               [ 4] 4776 	ld	a, d
      0015F9 95               [ 4] 4777 	sub	a, l
      0015FA 20 5B            [12] 4778 	jr	NZ, 00116$
                                   4779 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      0015FC 7B               [ 4] 4780 	ld	a, e
      0015FD 95               [ 4] 4781 	sub	a, l
      0015FE 20 57            [12] 4782 	jr	NZ, 00116$
                                   4783 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      001600 DD 36 EF 01      [19] 4784 	ld	-17 (ix), #0x01
                                   4785 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001604 3Er00            [ 7] 4786 	ld	a, #<(_playfield)
      001606 DD 86 F6         [19] 4787 	add	a, -10 (ix)
      001609 5F               [ 4] 4788 	ld	e, a
      00160A 3Es00            [ 7] 4789 	ld	a, #>(_playfield)
      00160C DD 8E F7         [19] 4790 	adc	a, -9 (ix)
      00160F 67               [ 4] 4791 	ld	h, a
      001610 7B               [ 4] 4792 	ld	a, e
      001611 DD 86 F4         [19] 4793 	add	a, -12 (ix)
      001614 6F               [ 4] 4794 	ld	l, a
      001615 30 01            [12] 4795 	jr	NC, 00616$
      001617 24               [ 4] 4796 	inc	h
      001618                       4797 00616$:
      001618 CB FA            [ 8] 4798 	set	7, d
      00161A 72               [ 7] 4799 	ld	(hl), d
                                   4800 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      00161B 3Er00            [ 7] 4801 	ld	a, #<(_playfield)
      00161D DD 86 F8         [19] 4802 	add	a, -8 (ix)
      001620 5F               [ 4] 4803 	ld	e, a
      001621 3Es00            [ 7] 4804 	ld	a, #>(_playfield)
      001623 DD 8E F9         [19] 4805 	adc	a, -7 (ix)
      001626 57               [ 4] 4806 	ld	d, a
      001627 7B               [ 4] 4807 	ld	a, e
      001628 DD 86 F5         [19] 4808 	add	a, -11 (ix)
      00162B 5F               [ 4] 4809 	ld	e, a
      00162C 30 01            [12] 4810 	jr	NC, 00617$
      00162E 14               [ 4] 4811 	inc	d
      00162F                       4812 00617$:
      00162F DD 6E FC         [19] 4813 	ld	l, -4 (ix)
      001632 DD 66 FD         [19] 4814 	ld	h, -3 (ix)
      001635 7E               [ 7] 4815 	ld	a, (hl)
      001636 CB FF            [ 8] 4816 	set	7, a
      001638 12               [ 7] 4817 	ld	(de), a
                                   4818 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001639 3Er00            [ 7] 4819 	ld	a, #<(_playfield)
      00163B DD 86 F0         [19] 4820 	add	a, -16 (ix)
      00163E 5F               [ 4] 4821 	ld	e, a
      00163F 3Es00            [ 7] 4822 	ld	a, #>(_playfield)
      001641 DD 8E F1         [19] 4823 	adc	a, -15 (ix)
      001644 57               [ 4] 4824 	ld	d, a
      001645 7B               [ 4] 4825 	ld	a, e
      001646 DD 86 FE         [19] 4826 	add	a, -2 (ix)
      001649 5F               [ 4] 4827 	ld	e, a
      00164A 30 01            [12] 4828 	jr	NC, 00618$
      00164C 14               [ 4] 4829 	inc	d
      00164D                       4830 00618$:
      00164D DD 6E F2         [19] 4831 	ld	l, -14 (ix)
      001650 DD 66 F3         [19] 4832 	ld	h, -13 (ix)
      001653 7E               [ 7] 4833 	ld	a, (hl)
      001654 CB FF            [ 8] 4834 	set	7, a
      001656 12               [ 7] 4835 	ld	(de), a
      001657                       4836 00116$:
                                   4837 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      001657 DD 6E F4         [19] 4838 	ld	l, -12 (ix)
      00165A 26 00            [ 7] 4839 	ld	h, #0x00
      00165C 09               [11] 4840 	add	hl, bc
      00165D 4E               [ 7] 4841 	ld	c, (hl)
      00165E 79               [ 4] 4842 	ld	a, c
      00165F B7               [ 4] 4843 	or	a, a
      001660 28 6A            [12] 4844 	jr	Z, 00206$
                                   4845 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001662 DD 7E FA         [19] 4846 	ld	a, -6 (ix)
      001665 DD 86 FE         [19] 4847 	add	a, -2 (ix)
      001668 5F               [ 4] 4848 	ld	e, a
      001669 DD 7E FB         [19] 4849 	ld	a, -5 (ix)
      00166C CE 00            [ 7] 4850 	adc	a, #0x00
      00166E 57               [ 4] 4851 	ld	d, a
      00166F DD 6E FC         [19] 4852 	ld	l, -4 (ix)
      001672 DD 66 FD         [19] 4853 	ld	h, -3 (ix)
      001675 46               [ 7] 4854 	ld	b, (hl)
      001676 1A               [ 7] 4855 	ld	a, (de)
      001677 B8               [ 4] 4856 	cp	a, b
      001678 20 52            [12] 4857 	jr	NZ, 00206$
                                   4858 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      00167A 91               [ 4] 4859 	sub	a, c
      00167B 20 4F            [12] 4860 	jr	NZ, 00206$
                                   4861 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      00167D DD 36 EF 01      [19] 4862 	ld	-17 (ix), #0x01
                                   4863 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001681 3Er00            [ 7] 4864 	ld	a, #<(_playfield)
      001683 DD 86 F0         [19] 4865 	add	a, -16 (ix)
      001686 47               [ 4] 4866 	ld	b, a
      001687 3Es00            [ 7] 4867 	ld	a, #>(_playfield)
      001689 DD 8E F1         [19] 4868 	adc	a, -15 (ix)
      00168C 67               [ 4] 4869 	ld	h, a
      00168D 78               [ 4] 4870 	ld	a, b
      00168E DD 86 F4         [19] 4871 	add	a, -12 (ix)
      001691 6F               [ 4] 4872 	ld	l, a
      001692 30 01            [12] 4873 	jr	NC, 00623$
      001694 24               [ 4] 4874 	inc	h
      001695                       4875 00623$:
      001695 CB F9            [ 8] 4876 	set	7, c
      001697 71               [ 7] 4877 	ld	(hl), c
                                   4878 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001698 3Er00            [ 7] 4879 	ld	a, #<(_playfield)
      00169A DD 86 F8         [19] 4880 	add	a, -8 (ix)
      00169D 4F               [ 4] 4881 	ld	c, a
      00169E 3Es00            [ 7] 4882 	ld	a, #>(_playfield)
      0016A0 DD 8E F9         [19] 4883 	adc	a, -7 (ix)
      0016A3 47               [ 4] 4884 	ld	b, a
      0016A4 79               [ 4] 4885 	ld	a, c
      0016A5 DD 86 F5         [19] 4886 	add	a, -11 (ix)
      0016A8 4F               [ 4] 4887 	ld	c, a
      0016A9 30 01            [12] 4888 	jr	NC, 00624$
      0016AB 04               [ 4] 4889 	inc	b
      0016AC                       4890 00624$:
      0016AC DD 6E FC         [19] 4891 	ld	l, -4 (ix)
      0016AF DD 66 FD         [19] 4892 	ld	h, -3 (ix)
      0016B2 7E               [ 7] 4893 	ld	a, (hl)
      0016B3 CB FF            [ 8] 4894 	set	7, a
      0016B5 02               [ 7] 4895 	ld	(bc), a
                                   4896 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0016B6 3Er00            [ 7] 4897 	ld	a, #<(_playfield)
      0016B8 DD 86 F6         [19] 4898 	add	a, -10 (ix)
      0016BB 4F               [ 4] 4899 	ld	c, a
      0016BC 3Es00            [ 7] 4900 	ld	a, #>(_playfield)
      0016BE DD 8E F7         [19] 4901 	adc	a, -9 (ix)
      0016C1 47               [ 4] 4902 	ld	b, a
      0016C2 DD 6E FE         [19] 4903 	ld	l, -2 (ix)
      0016C5 26 00            [ 7] 4904 	ld	h, #0x00
      0016C7 09               [11] 4905 	add	hl, bc
      0016C8 1A               [ 7] 4906 	ld	a, (de)
      0016C9 CB FF            [ 8] 4907 	set	7, a
      0016CB 77               [ 7] 4908 	ld	(hl), a
      0016CC                       4909 00206$:
                                   4910 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0016CC DD 34 FF         [23] 4911 	inc	-1 (ix)
      0016CF C3r41r15         [10] 4912 	jp	00205$
      0016D2                       4913 00209$:
                                   4914 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0016D2 DD 34 FE         [23] 4915 	inc	-2 (ix)
      0016D5 C3r35r15         [10] 4916 	jp	00208$
      0016D8                       4917 00124$:
                                   4918 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      0016D8 DD 7E EF         [19] 4919 	ld	a, -17 (ix)
      0016DB B7               [ 4] 4920 	or	a, a
      0016DC CArFDr1A         [10] 4921 	jp	Z, 00231$
                                   4922 ;src\/CheckPlayfield.h:107: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      0016DF DD 36 F0 05      [19] 4923 	ld	-16 (ix), #0x05
      0016E3 DD 36 F1 00      [19] 4924 	ld	-15 (ix), #0
                                   4925 ;src\/CheckPlayfield.h:108: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      0016E7 DD 36 F2 0B      [19] 4926 	ld	-14 (ix), #0x0b
      0016EB DD 36 F3 00      [19] 4927 	ld	-13 (ix), #0
                                   4928 ;src\/CheckPlayfield.h:110: HideArrow();
      0016EF CDrE9r0C         [17] 4929 	call	_HideArrow
                                   4930 ;src\/CheckPlayfield.h:112: SoundFx_2();
      0016F2 CDr00r12         [17] 4931 	call	_SoundFx_2
                                   4932 ;src\/CheckPlayfield.h:115: numberPiecesRemoved = 0;
      0016F5 DD 36 FE 00      [19] 4933 	ld	-2 (ix), #0
                                   4934 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016F9 DD 36 FF 00      [19] 4935 	ld	-1 (ix), #0
      0016FD                       4936 00214$:
      0016FD DD 7E FF         [19] 4937 	ld	a, -1 (ix)
      001700 D6 0C            [ 7] 4938 	sub	a, #0x0c
      001702 30 5E            [12] 4939 	jr	NC, 00136$
                                   4940 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001704 DD 46 FE         [19] 4941 	ld	b, -2 (ix)
      001707 1E 00            [ 7] 4942 	ld	e, #0x00
      001709                       4943 00211$:
      001709 7B               [ 4] 4944 	ld	a, e
      00170A D6 06            [ 7] 4945 	sub	a, #0x06
      00170C 30 4C            [12] 4946 	jr	NC, 00312$
                                   4947 ;src\/CheckPlayfield.h:118: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00170E D5               [11] 4948 	push	de
      00170F 16 00            [ 7] 4949 	ld	d, #0x00
      001711 6B               [ 4] 4950 	ld	l, e
      001712 62               [ 4] 4951 	ld	h, d
      001713 29               [11] 4952 	add	hl, hl
      001714 19               [11] 4953 	add	hl, de
      001715 29               [11] 4954 	add	hl, hl
      001716 29               [11] 4955 	add	hl, hl
      001717 11r00r00         [10] 4956 	ld	de, #_playfield
      00171A 19               [11] 4957 	add	hl, de
      00171B D1               [10] 4958 	pop	de
      00171C 7D               [ 4] 4959 	ld	a, l
      00171D DD 86 FF         [19] 4960 	add	a, -1 (ix)
      001720 6F               [ 4] 4961 	ld	l, a
      001721 30 01            [12] 4962 	jr	NC, 00625$
      001723 24               [ 4] 4963 	inc	h
      001724                       4964 00625$:
      001724 7E               [ 7] 4965 	ld	a, (hl)
      001725 07               [ 4] 4966 	rlca
      001726 30 2F            [12] 4967 	jr	NC, 00212$
                                   4968 ;src\/CheckPlayfield.h:119: numberPiecesRemoved++;
      001728 04               [ 4] 4969 	inc	b
                                   4970 ;src\/CheckPlayfield.h:121: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001729 7B               [ 4] 4971 	ld	a, e
      00172A DD 96 F0         [19] 4972 	sub	a, -16 (ix)
      00172D 30 03            [12] 4973 	jr	NC, 00126$
      00172F DD 73 F0         [19] 4974 	ld	-16 (ix), e
      001732                       4975 00126$:
                                   4976 ;src\/CheckPlayfield.h:122: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001732 DD 7E F1         [19] 4977 	ld	a, -15 (ix)
      001735 93               [ 4] 4978 	sub	a, e
      001736 30 03            [12] 4979 	jr	NC, 00128$
      001738 DD 73 F1         [19] 4980 	ld	-15 (ix), e
      00173B                       4981 00128$:
                                   4982 ;src\/CheckPlayfield.h:123: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      00173B DD 7E FF         [19] 4983 	ld	a, -1 (ix)
      00173E DD 96 F2         [19] 4984 	sub	a, -14 (ix)
      001741 30 06            [12] 4985 	jr	NC, 00130$
      001743 DD 7E FF         [19] 4986 	ld	a, -1 (ix)
      001746 DD 77 F2         [19] 4987 	ld	-14 (ix), a
      001749                       4988 00130$:
                                   4989 ;src\/CheckPlayfield.h:124: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001749 DD 7E F3         [19] 4990 	ld	a, -13 (ix)
      00174C DD 96 FF         [19] 4991 	sub	a, -1 (ix)
      00174F 30 06            [12] 4992 	jr	NC, 00212$
      001751 DD 7E FF         [19] 4993 	ld	a, -1 (ix)
      001754 DD 77 F3         [19] 4994 	ld	-13 (ix), a
      001757                       4995 00212$:
                                   4996 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001757 1C               [ 4] 4997 	inc	e
      001758 18 AF            [12] 4998 	jr	00211$
      00175A                       4999 00312$:
      00175A DD 70 FE         [19] 5000 	ld	-2 (ix), b
                                   5001 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00175D DD 34 FF         [23] 5002 	inc	-1 (ix)
      001760 18 9B            [12] 5003 	jr	00214$
      001762                       5004 00136$:
                                   5005 ;src\/CheckPlayfield.h:130: DrawNumber(numberPiecesRemoved, 0, 0);//test
      001762 DD 4E FE         [19] 5006 	ld	c, -2 (ix)
      001765 06 00            [ 7] 5007 	ld	b, #0x00
      001767 AF               [ 4] 5008 	xor	a, a
      001768 F5               [11] 5009 	push	af
      001769 33               [ 6] 5010 	inc	sp
      00176A AF               [ 4] 5011 	xor	a, a
      00176B F5               [11] 5012 	push	af
      00176C 33               [ 6] 5013 	inc	sp
      00176D C5               [11] 5014 	push	bc
      00176E CDrFAr07         [17] 5015 	call	_DrawNumber
      001771 F1               [10] 5016 	pop	af
      001772 F1               [10] 5017 	pop	af
                                   5018 ;src\/CheckPlayfield.h:131: DrawNumber(iteration, 0, 1);//test
      001773 DD 4E 04         [19] 5019 	ld	c, 4 (ix)
      001776 06 00            [ 7] 5020 	ld	b, #0x00
      001778 3E 01            [ 7] 5021 	ld	a, #0x01
      00177A F5               [11] 5022 	push	af
      00177B 33               [ 6] 5023 	inc	sp
      00177C AF               [ 4] 5024 	xor	a, a
      00177D F5               [11] 5025 	push	af
      00177E 33               [ 6] 5026 	inc	sp
      00177F C5               [11] 5027 	push	bc
      001780 CDrFAr07         [17] 5028 	call	_DrawNumber
      001783 F1               [10] 5029 	pop	af
      001784 F1               [10] 5030 	pop	af
                                   5031 ;src\/CheckPlayfield.h:132: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      001785 DD 4E F0         [19] 5032 	ld	c, -16 (ix)
      001788 06 00            [ 7] 5033 	ld	b, #0x00
      00178A 3E 0D            [ 7] 5034 	ld	a, #0x0d
      00178C F5               [11] 5035 	push	af
      00178D 33               [ 6] 5036 	inc	sp
      00178E AF               [ 4] 5037 	xor	a, a
      00178F F5               [11] 5038 	push	af
      001790 33               [ 6] 5039 	inc	sp
      001791 C5               [11] 5040 	push	bc
      001792 CDrFAr07         [17] 5041 	call	_DrawNumber
      001795 F1               [10] 5042 	pop	af
      001796 F1               [10] 5043 	pop	af
                                   5044 ;src\/CheckPlayfield.h:133: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      001797 DD 4E F1         [19] 5045 	ld	c, -15 (ix)
      00179A 06 00            [ 7] 5046 	ld	b, #0x00
      00179C 3E 0E            [ 7] 5047 	ld	a, #0x0e
      00179E F5               [11] 5048 	push	af
      00179F 33               [ 6] 5049 	inc	sp
      0017A0 AF               [ 4] 5050 	xor	a, a
      0017A1 F5               [11] 5051 	push	af
      0017A2 33               [ 6] 5052 	inc	sp
      0017A3 C5               [11] 5053 	push	bc
      0017A4 CDrFAr07         [17] 5054 	call	_DrawNumber
      0017A7 F1               [10] 5055 	pop	af
      0017A8 F1               [10] 5056 	pop	af
                                   5057 ;src\/CheckPlayfield.h:134: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      0017A9 DD 4E F2         [19] 5058 	ld	c, -14 (ix)
      0017AC 06 00            [ 7] 5059 	ld	b, #0x00
      0017AE 3E 10            [ 7] 5060 	ld	a, #0x10
      0017B0 F5               [11] 5061 	push	af
      0017B1 33               [ 6] 5062 	inc	sp
      0017B2 AF               [ 4] 5063 	xor	a, a
      0017B3 F5               [11] 5064 	push	af
      0017B4 33               [ 6] 5065 	inc	sp
      0017B5 C5               [11] 5066 	push	bc
      0017B6 CDrFAr07         [17] 5067 	call	_DrawNumber
      0017B9 F1               [10] 5068 	pop	af
      0017BA F1               [10] 5069 	pop	af
                                   5070 ;src\/CheckPlayfield.h:135: DrawNumber(upmostPieceRemoved, 0, 17);//test
      0017BB DD 4E F3         [19] 5071 	ld	c, -13 (ix)
      0017BE 06 00            [ 7] 5072 	ld	b, #0x00
      0017C0 3E 11            [ 7] 5073 	ld	a, #0x11
      0017C2 F5               [11] 5074 	push	af
      0017C3 33               [ 6] 5075 	inc	sp
      0017C4 AF               [ 4] 5076 	xor	a, a
      0017C5 F5               [11] 5077 	push	af
      0017C6 33               [ 6] 5078 	inc	sp
      0017C7 C5               [11] 5079 	push	bc
      0017C8 CDrFAr07         [17] 5080 	call	_DrawNumber
      0017CB F1               [10] 5081 	pop	af
      0017CC F1               [10] 5082 	pop	af
                                   5083 ;src\/CheckPlayfield.h:138: while(counter-- > 0) {
      0017CD DD 7E FE         [19] 5084 	ld	a, -2 (ix)
      0017D0 D6 03            [ 7] 5085 	sub	a, #0x03
      0017D2 3E 01            [ 7] 5086 	ld	a, #0x01
      0017D4 28 01            [12] 5087 	jr	Z, 00628$
      0017D6 AF               [ 4] 5088 	xor	a, a
      0017D7                       5089 00628$:
      0017D7 DD 77 F4         [19] 5090 	ld	-12 (ix), a
      0017DA DD 36 FD 48      [19] 5091 	ld	-3 (ix), #0x48
      0017DE                       5092 00161$:
      0017DE DD 4E FD         [19] 5093 	ld	c, -3 (ix)
      0017E1 DD 35 FD         [23] 5094 	dec	-3 (ix)
      0017E4 79               [ 4] 5095 	ld	a, c
      0017E5 B7               [ 4] 5096 	or	a, a
      0017E6 CAr97r19         [10] 5097 	jp	Z, 00163$
                                   5098 ;src\/CheckPlayfield.h:139: word lastJiffy = JIFFY;
      0017E9 ED 4B 9E FC      [20] 5099 	ld	bc, (_JIFFY)
                                   5100 ;src\/CheckPlayfield.h:140: while (lastJiffy == JIFFY) {
      0017ED                       5101 00137$:
      0017ED 2A 9E FC         [16] 5102 	ld	hl, (_JIFFY)
      0017F0 BF               [ 4] 5103 	cp	a, a
      0017F1 ED 42            [15] 5104 	sbc	hl, bc
      0017F3 28 F8            [12] 5105 	jr	Z, 00137$
                                   5106 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0017F5 3E 0C            [ 7] 5107 	ld	a, #0x0c
      0017F7 DD 96 FD         [19] 5108 	sub	a, -3 (ix)
      0017FA 3E 00            [ 7] 5109 	ld	a, #0x00
      0017FC 17               [ 4] 5110 	rla
      0017FD DD 77 F5         [19] 5111 	ld	-11 (ix), a
      001800 3E 09            [ 7] 5112 	ld	a, #0x09
      001802 DD 96 FD         [19] 5113 	sub	a, -3 (ix)
      001805 3E 00            [ 7] 5114 	ld	a, #0x00
      001807 17               [ 4] 5115 	rla
      001808 DD 77 F6         [19] 5116 	ld	-10 (ix), a
      00180B 3E 06            [ 7] 5117 	ld	a, #0x06
      00180D DD 96 FD         [19] 5118 	sub	a, -3 (ix)
      001810 3E 00            [ 7] 5119 	ld	a, #0x00
      001812 17               [ 4] 5120 	rla
      001813 DD 77 F7         [19] 5121 	ld	-9 (ix), a
      001816 3E 03            [ 7] 5122 	ld	a, #0x03
      001818 DD 96 FD         [19] 5123 	sub	a, -3 (ix)
      00181B 3E 00            [ 7] 5124 	ld	a, #0x00
      00181D 17               [ 4] 5125 	rla
      00181E DD 77 F8         [19] 5126 	ld	-8 (ix), a
      001821 DD 36 FE 00      [19] 5127 	ld	-2 (ix), #0
      001825                       5128 00220$:
      001825 DD 7E FE         [19] 5129 	ld	a, -2 (ix)
      001828 D6 0C            [ 7] 5130 	sub	a, #0x0c
      00182A 30 B2            [12] 5131 	jr	NC, 00161$
                                   5132 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00182C DD 36 FF 00      [19] 5133 	ld	-1 (ix), #0
      001830                       5134 00217$:
      001830 DD 7E FF         [19] 5135 	ld	a, -1 (ix)
      001833 D6 06            [ 7] 5136 	sub	a, #0x06
      001835 D2r91r19         [10] 5137 	jp	NC, 00221$
                                   5138 ;src\/CheckPlayfield.h:148: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001838 DD 4E FF         [19] 5139 	ld	c, -1 (ix)
      00183B 06 00            [ 7] 5140 	ld	b, #0x00
      00183D 69               [ 4] 5141 	ld	l, c
      00183E 60               [ 4] 5142 	ld	h, b
      00183F 29               [11] 5143 	add	hl, hl
      001840 09               [11] 5144 	add	hl, bc
      001841 29               [11] 5145 	add	hl, hl
      001842 29               [11] 5146 	add	hl, hl
      001843 11r00r00         [10] 5147 	ld	de, #_playfield
      001846 19               [11] 5148 	add	hl, de
      001847 DD 5E FE         [19] 5149 	ld	e, -2 (ix)
      00184A 16 00            [ 7] 5150 	ld	d, #0x00
      00184C 19               [11] 5151 	add	hl, de
      00184D 7E               [ 7] 5152 	ld	a, (hl)
      00184E 07               [ 4] 5153 	rlca
      00184F D2r8Br19         [10] 5154 	jp	NC,00218$
                                   5155 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved == 3) {
      001852 DD 7E F4         [19] 5156 	ld	a, -12 (ix)
      001855 B7               [ 4] 5157 	or	a, a
      001856 CArECr18         [10] 5158 	jp	Z, 00141$
                                   5159 ;src\/CheckPlayfield.h:154: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001859 DD 6E F1         [19] 5160 	ld	l, -15 (ix)
      00185C 26 00            [ 7] 5161 	ld	h, #0x00
      00185E 29               [11] 5162 	add	hl, hl
      00185F 29               [11] 5163 	add	hl, hl
      001860 29               [11] 5164 	add	hl, hl
      001861 29               [11] 5165 	add	hl, hl
      001862 7D               [ 4] 5166 	ld	a, l
      001863 4C               [ 4] 5167 	ld	c, h
      001864 DD 6E F0         [19] 5168 	ld	l, -16 (ix)
      001867 26 00            [ 7] 5169 	ld	h, #0x00
      001869 29               [11] 5170 	add	hl, hl
      00186A 29               [11] 5171 	add	hl, hl
      00186B 29               [11] 5172 	add	hl, hl
      00186C 29               [11] 5173 	add	hl, hl
      00186D 95               [ 4] 5174 	sub	a, l
      00186E DD 77 F9         [19] 5175 	ld	-7 (ix), a
      001871 79               [ 4] 5176 	ld	a, c
      001872 9C               [ 4] 5177 	sbc	a, h
      001873 DD 77 FA         [19] 5178 	ld	-6 (ix), a
      001876 DD 7E F9         [19] 5179 	ld	a, -7 (ix)
      001879 DD 77 FB         [19] 5180 	ld	-5 (ix), a
      00187C DD 7E FA         [19] 5181 	ld	a, -6 (ix)
      00187F DD 77 FC         [19] 5182 	ld	-4 (ix), a
      001882 DD CB FA 7E      [20] 5183 	bit	7, -6 (ix)
      001886 28 10            [12] 5184 	jr	Z, 00233$
      001888 DD 7E F9         [19] 5185 	ld	a, -7 (ix)
      00188B C6 01            [ 7] 5186 	add	a, #0x01
      00188D DD 77 FB         [19] 5187 	ld	-5 (ix), a
      001890 DD 7E FA         [19] 5188 	ld	a, -6 (ix)
      001893 CE 00            [ 7] 5189 	adc	a, #0x00
      001895 DD 77 FC         [19] 5190 	ld	-4 (ix), a
      001898                       5191 00233$:
      001898 DD 4E FB         [19] 5192 	ld	c, -5 (ix)
      00189B DD 46 FC         [19] 5193 	ld	b, -4 (ix)
      00189E CB 28            [ 8] 5194 	sra	b
      0018A0 CB 19            [ 8] 5195 	rr	c
      0018A2 79               [ 4] 5196 	ld	a, c
      0018A3 C6 50            [ 7] 5197 	add	a, #0x50
      0018A5 DD 6E F0         [19] 5198 	ld	l, -16 (ix)
      0018A8 29               [11] 5199 	add	hl, hl
      0018A9 29               [11] 5200 	add	hl, hl
      0018AA 29               [11] 5201 	add	hl, hl
      0018AB 29               [11] 5202 	add	hl, hl
      0018AC 85               [ 4] 5203 	add	a, l
      0018AD 5F               [ 4] 5204 	ld	e, a
                                   5205 ;src\/CheckPlayfield.h:155: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16) - (72 - counter);
      0018AE DD 6E F2         [19] 5206 	ld	l, -14 (ix)
      0018B1 26 00            [ 7] 5207 	ld	h, #0x00
      0018B3 29               [11] 5208 	add	hl, hl
      0018B4 29               [11] 5209 	add	hl, hl
      0018B5 29               [11] 5210 	add	hl, hl
      0018B6 29               [11] 5211 	add	hl, hl
      0018B7 4D               [ 4] 5212 	ld	c, l
      0018B8 44               [ 4] 5213 	ld	b, h
      0018B9 DD 6E F3         [19] 5214 	ld	l, -13 (ix)
      0018BC 26 00            [ 7] 5215 	ld	h, #0x00
      0018BE 29               [11] 5216 	add	hl, hl
      0018BF 29               [11] 5217 	add	hl, hl
      0018C0 29               [11] 5218 	add	hl, hl
      0018C1 29               [11] 5219 	add	hl, hl
      0018C2 79               [ 4] 5220 	ld	a, c
      0018C3 95               [ 4] 5221 	sub	a, l
      0018C4 6F               [ 4] 5222 	ld	l, a
      0018C5 78               [ 4] 5223 	ld	a, b
      0018C6 9C               [ 4] 5224 	sbc	a, h
      0018C7 67               [ 4] 5225 	ld	h, a
      0018C8 4D               [ 4] 5226 	ld	c, l
      0018C9 44               [ 4] 5227 	ld	b, h
      0018CA CB 7C            [ 8] 5228 	bit	7, h
      0018CC 28 03            [12] 5229 	jr	Z, 00234$
      0018CE 4D               [ 4] 5230 	ld	c, l
      0018CF 44               [ 4] 5231 	ld	b, h
      0018D0 03               [ 6] 5232 	inc	bc
      0018D1                       5233 00234$:
      0018D1 CB 28            [ 8] 5234 	sra	b
      0018D3 CB 19            [ 8] 5235 	rr	c
      0018D5 DD 6E F3         [19] 5236 	ld	l, -13 (ix)
      0018D8 29               [11] 5237 	add	hl, hl
      0018D9 29               [11] 5238 	add	hl, hl
      0018DA 29               [11] 5239 	add	hl, hl
      0018DB 29               [11] 5240 	add	hl, hl
      0018DC 09               [11] 5241 	add	hl, bc
      0018DD DD 4E FD         [19] 5242 	ld	c, -3 (ix)
      0018E0 3E 48            [ 7] 5243 	ld	a, #0x48
      0018E2 91               [ 4] 5244 	sub	a, c
      0018E3 4F               [ 4] 5245 	ld	c, a
      0018E4 7D               [ 4] 5246 	ld	a, l
      0018E5 91               [ 4] 5247 	sub	a, c
                                   5248 ;src\/CheckPlayfield.h:156: DrawHitSprite(x, y);
      0018E6 57               [ 4] 5249 	ld	d,a
      0018E7 D5               [11] 5250 	push	de
      0018E8 CDrF7r0C         [17] 5251 	call	_DrawHitSprite
      0018EB F1               [10] 5252 	pop	af
      0018EC                       5253 00141$:
                                   5254 ;src\/CheckPlayfield.h:160: if(counter > 12) {
      0018EC DD 7E F5         [19] 5255 	ld	a, -11 (ix)
      0018EF B7               [ 4] 5256 	or	a, a
      0018F0 28 41            [12] 5257 	jr	Z, 00155$
                                   5258 ;src\/CheckPlayfield.h:161: if(JIFFY & 0b00000011) {
      0018F2 2A 9E FC         [16] 5259 	ld	hl, (_JIFFY)
      0018F5 7D               [ 4] 5260 	ld	a, l
      0018F6 E6 03            [ 7] 5261 	and	a, #0x03
      0018F8 28 28            [12] 5262 	jr	Z, 00143$
                                   5263 ;src\/CheckPlayfield.h:162: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0018FA DD 4E FF         [19] 5264 	ld	c, -1 (ix)
      0018FD 06 00            [ 7] 5265 	ld	b, #0x00
      0018FF 69               [ 4] 5266 	ld	l, c
      001900 60               [ 4] 5267 	ld	h, b
      001901 29               [11] 5268 	add	hl, hl
      001902 09               [11] 5269 	add	hl, bc
      001903 29               [11] 5270 	add	hl, hl
      001904 29               [11] 5271 	add	hl, hl
      001905 11r00r00         [10] 5272 	ld	de, #_playfield
      001908 19               [11] 5273 	add	hl, de
      001909 DD 5E FE         [19] 5274 	ld	e, -2 (ix)
      00190C 16 00            [ 7] 5275 	ld	d, #0x00
      00190E 19               [11] 5276 	add	hl, de
      00190F 7E               [ 7] 5277 	ld	a, (hl)
      001910 CB BF            [ 8] 5278 	res	7, a
      001912 F5               [11] 5279 	push	af
      001913 33               [ 6] 5280 	inc	sp
      001914 DD 66 FE         [19] 5281 	ld	h, -2 (ix)
      001917 DD 6E FF         [19] 5282 	ld	l, -1 (ix)
      00191A E5               [11] 5283 	push	hl
      00191B CDrC1r10         [17] 5284 	call	_DrawBlock
      00191E F1               [10] 5285 	pop	af
      00191F 33               [ 6] 5286 	inc	sp
      001920 18 69            [12] 5287 	jr	00218$
      001922                       5288 00143$:
                                   5289 ;src\/CheckPlayfield.h:165: DrawBlock(col, line, EMPTY);
      001922 AF               [ 4] 5290 	xor	a, a
      001923 F5               [11] 5291 	push	af
      001924 33               [ 6] 5292 	inc	sp
      001925 DD 66 FE         [19] 5293 	ld	h, -2 (ix)
      001928 DD 6E FF         [19] 5294 	ld	l, -1 (ix)
      00192B E5               [11] 5295 	push	hl
      00192C CDrC1r10         [17] 5296 	call	_DrawBlock
      00192F F1               [10] 5297 	pop	af
      001930 33               [ 6] 5298 	inc	sp
      001931 18 58            [12] 5299 	jr	00218$
      001933                       5300 00155$:
                                   5301 ;src\/CheckPlayfield.h:170: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001933 DD 7E F6         [19] 5302 	ld	a, -10 (ix)
      001936 B7               [ 4] 5303 	or	a, a
      001937 28 12            [12] 5304 	jr	Z, 00152$
      001939 26 2A            [ 7] 5305 	ld	h, #0x2a
      00193B DD 6E FE         [19] 5306 	ld	l, -2 (ix)
      00193E E5               [11] 5307 	push	hl
      00193F DD 7E FF         [19] 5308 	ld	a, -1 (ix)
      001942 F5               [11] 5309 	push	af
      001943 33               [ 6] 5310 	inc	sp
      001944 CDr2Er11         [17] 5311 	call	_DrawBlock_SameTile
      001947 F1               [10] 5312 	pop	af
      001948 33               [ 6] 5313 	inc	sp
      001949 18 40            [12] 5314 	jr	00218$
      00194B                       5315 00152$:
                                   5316 ;src\/CheckPlayfield.h:171: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      00194B DD 7E F7         [19] 5317 	ld	a, -9 (ix)
      00194E B7               [ 4] 5318 	or	a, a
      00194F 28 12            [12] 5319 	jr	Z, 00149$
      001951 26 2B            [ 7] 5320 	ld	h, #0x2b
      001953 DD 6E FE         [19] 5321 	ld	l, -2 (ix)
      001956 E5               [11] 5322 	push	hl
      001957 DD 7E FF         [19] 5323 	ld	a, -1 (ix)
      00195A F5               [11] 5324 	push	af
      00195B 33               [ 6] 5325 	inc	sp
      00195C CDr2Er11         [17] 5326 	call	_DrawBlock_SameTile
      00195F F1               [10] 5327 	pop	af
      001960 33               [ 6] 5328 	inc	sp
      001961 18 28            [12] 5329 	jr	00218$
      001963                       5330 00149$:
                                   5331 ;src\/CheckPlayfield.h:172: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001963 DD 7E F8         [19] 5332 	ld	a, -8 (ix)
      001966 B7               [ 4] 5333 	or	a, a
      001967 28 12            [12] 5334 	jr	Z, 00146$
      001969 26 2C            [ 7] 5335 	ld	h, #0x2c
      00196B DD 6E FE         [19] 5336 	ld	l, -2 (ix)
      00196E E5               [11] 5337 	push	hl
      00196F DD 7E FF         [19] 5338 	ld	a, -1 (ix)
      001972 F5               [11] 5339 	push	af
      001973 33               [ 6] 5340 	inc	sp
      001974 CDr2Er11         [17] 5341 	call	_DrawBlock_SameTile
      001977 F1               [10] 5342 	pop	af
      001978 33               [ 6] 5343 	inc	sp
      001979 18 10            [12] 5344 	jr	00218$
      00197B                       5345 00146$:
                                   5346 ;src\/CheckPlayfield.h:173: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      00197B 26 2D            [ 7] 5347 	ld	h, #0x2d
      00197D DD 6E FE         [19] 5348 	ld	l, -2 (ix)
      001980 E5               [11] 5349 	push	hl
      001981 DD 7E FF         [19] 5350 	ld	a, -1 (ix)
      001984 F5               [11] 5351 	push	af
      001985 33               [ 6] 5352 	inc	sp
      001986 CDr2Er11         [17] 5353 	call	_DrawBlock_SameTile
      001989 F1               [10] 5354 	pop	af
      00198A 33               [ 6] 5355 	inc	sp
      00198B                       5356 00218$:
                                   5357 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00198B DD 34 FF         [23] 5358 	inc	-1 (ix)
      00198E C3r30r18         [10] 5359 	jp	00217$
      001991                       5360 00221$:
                                   5361 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001991 DD 34 FE         [23] 5362 	inc	-2 (ix)
      001994 C3r25r18         [10] 5363 	jp	00220$
      001997                       5364 00163$:
                                   5365 ;src\/CheckPlayfield.h:181: HideHitSprite();
      001997 CDrF7r0D         [17] 5366 	call	_HideHitSprite
                                   5367 ;src\/CheckPlayfield.h:186: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00199A DD 36 FD 00      [19] 5368 	ld	-3 (ix), #0
      00199E                       5369 00229$:
      00199E DD 7E FD         [19] 5370 	ld	a, -3 (ix)
      0019A1 D6 0C            [ 7] 5371 	sub	a, #0x0c
      0019A3 D2r81r1A         [10] 5372 	jp	NC, 00172$
                                   5373 ;src\/CheckPlayfield.h:187: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0019A6 DD 36 FE 00      [19] 5374 	ld	-2 (ix), #0
      0019AA                       5375 00226$:
      0019AA DD 7E FE         [19] 5376 	ld	a, -2 (ix)
      0019AD D6 06            [ 7] 5377 	sub	a, #0x06
      0019AF D2r7Br1A         [10] 5378 	jp	NC, 00230$
                                   5379 ;src\/CheckPlayfield.h:189: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0019B2 DD 4E FE         [19] 5380 	ld	c, -2 (ix)
      0019B5 06 00            [ 7] 5381 	ld	b, #0x00
      0019B7 69               [ 4] 5382 	ld	l, c
      0019B8 60               [ 4] 5383 	ld	h, b
      0019B9 29               [11] 5384 	add	hl, hl
      0019BA 09               [11] 5385 	add	hl, bc
      0019BB 29               [11] 5386 	add	hl, hl
      0019BC 29               [11] 5387 	add	hl, hl
      0019BD EB               [ 4] 5388 	ex	de, hl
      0019BE 21r00r00         [10] 5389 	ld	hl, #_playfield
      0019C1 19               [11] 5390 	add	hl, de
      0019C2 DD 75 FB         [19] 5391 	ld	-5 (ix), l
      0019C5 DD 74 FC         [19] 5392 	ld	-4 (ix), h
      0019C8 DD 7E FB         [19] 5393 	ld	a, -5 (ix)
      0019CB DD 86 FD         [19] 5394 	add	a, -3 (ix)
      0019CE 4F               [ 4] 5395 	ld	c, a
      0019CF DD 7E FC         [19] 5396 	ld	a, -4 (ix)
      0019D2 CE 00            [ 7] 5397 	adc	a, #0x00
      0019D4 47               [ 4] 5398 	ld	b, a
      0019D5 0A               [ 7] 5399 	ld	a, (bc)
      0019D6 07               [ 4] 5400 	rlca
      0019D7 D2r75r1A         [10] 5401 	jp	NC,00227$
                                   5402 ;src\/CheckPlayfield.h:191: blocksRemoved++;
      0019DA 2Ar04r00         [16] 5403 	ld	hl, (_blocksRemoved)
      0019DD 23               [ 6] 5404 	inc	hl
      0019DE 22r04r00         [16] 5405 	ld	(_blocksRemoved), hl
                                   5406 ;src\/CheckPlayfield.h:194: for(byte line1 = line; line1 > 0; line1--) {
      0019E1 DD 7E FB         [19] 5407 	ld	a, -5 (ix)
      0019E4 DD 77 F7         [19] 5408 	ld	-9 (ix), a
      0019E7 DD 7E FC         [19] 5409 	ld	a, -4 (ix)
      0019EA DD 77 F8         [19] 5410 	ld	-8 (ix), a
      0019ED DD 7E FD         [19] 5411 	ld	a, -3 (ix)
      0019F0 DD 77 FF         [19] 5412 	ld	-1 (ix), a
      0019F3                       5413 00223$:
      0019F3 DD 7E FF         [19] 5414 	ld	a, -1 (ix)
      0019F6 B7               [ 4] 5415 	or	a, a
      0019F7 28 7C            [12] 5416 	jr	Z, 00227$
                                   5417 ;src\/CheckPlayfield.h:195: byte linesToBeRemoved = 1;
      0019F9 0E 01            [ 7] 5418 	ld	c, #0x01
                                   5419 ;src\/CheckPlayfield.h:196: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0019FB DD 7E FF         [19] 5420 	ld	a, -1 (ix)
      0019FE DD 77 FC         [19] 5421 	ld	-4 (ix), a
      001A01 3D               [ 4] 5422 	dec	a
      001A02 DD 86 F7         [19] 5423 	add	a, -9 (ix)
      001A05 5F               [ 4] 5424 	ld	e, a
      001A06 3E 00            [ 7] 5425 	ld	a, #0x00
      001A08 DD 8E F8         [19] 5426 	adc	a, -8 (ix)
      001A0B 57               [ 4] 5427 	ld	d, a
      001A0C 1A               [ 7] 5428 	ld	a, (de)
      001A0D 07               [ 4] 5429 	rlca
      001A0E 30 02            [12] 5430 	jr	NC, 00165$
      001A10 0E 02            [ 7] 5431 	ld	c, #0x02
      001A12                       5432 00165$:
                                   5433 ;src\/CheckPlayfield.h:197: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001A12 DD 7E FC         [19] 5434 	ld	a, -4 (ix)
      001A15 3D               [ 4] 5435 	dec	a
      001A16 3D               [ 4] 5436 	dec	a
      001A17 DD 86 F7         [19] 5437 	add	a, -9 (ix)
      001A1A 5F               [ 4] 5438 	ld	e, a
      001A1B 3E 00            [ 7] 5439 	ld	a, #0x00
      001A1D DD 8E F8         [19] 5440 	adc	a, -8 (ix)
      001A20 57               [ 4] 5441 	ld	d, a
      001A21 1A               [ 7] 5442 	ld	a, (de)
      001A22 07               [ 4] 5443 	rlca
      001A23 30 01            [12] 5444 	jr	NC, 00167$
      001A25 0C               [ 4] 5445 	inc	c
      001A26                       5446 00167$:
                                   5447 ;src\/CheckPlayfield.h:201: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001A26 DD 7E F7         [19] 5448 	ld	a, -9 (ix)
      001A29 DD 86 FF         [19] 5449 	add	a, -1 (ix)
      001A2C DD 77 F9         [19] 5450 	ld	-7 (ix), a
      001A2F DD 7E F8         [19] 5451 	ld	a, -8 (ix)
      001A32 CE 00            [ 7] 5452 	adc	a, #0x00
      001A34 DD 77 FA         [19] 5453 	ld	-6 (ix), a
      001A37 DD 6E FF         [19] 5454 	ld	l, -1 (ix)
      001A3A 26 00            [ 7] 5455 	ld	h, #0x00
      001A3C 59               [ 4] 5456 	ld	e, c
      001A3D 16 00            [ 7] 5457 	ld	d, #0x00
      001A3F BF               [ 4] 5458 	cp	a, a
      001A40 ED 52            [15] 5459 	sbc	hl, de
      001A42 CB 7C            [ 8] 5460 	bit	7, h
      001A44 20 18            [12] 5461 	jr	NZ, 00237$
      001A46 DD 7E FF         [19] 5462 	ld	a, -1 (ix)
      001A49 91               [ 4] 5463 	sub	a, c
      001A4A DD 86 F7         [19] 5464 	add	a, -9 (ix)
      001A4D 4F               [ 4] 5465 	ld	c, a
      001A4E 3E 00            [ 7] 5466 	ld	a, #0x00
      001A50 DD 8E F8         [19] 5467 	adc	a, -8 (ix)
      001A53 47               [ 4] 5468 	ld	b, a
      001A54 0A               [ 7] 5469 	ld	a, (bc)
      001A55 DD 77 FB         [19] 5470 	ld	-5 (ix), a
      001A58 DD 36 FC 00      [19] 5471 	ld	-4 (ix), #0
      001A5C 18 07            [12] 5472 	jr	00238$
      001A5E                       5473 00237$:
      001A5E AF               [ 4] 5474 	xor	a, a
      001A5F DD 77 FB         [19] 5475 	ld	-5 (ix), a
      001A62 DD 77 FC         [19] 5476 	ld	-4 (ix), a
      001A65                       5477 00238$:
      001A65 DD 7E FB         [19] 5478 	ld	a, -5 (ix)
      001A68 DD 6E F9         [19] 5479 	ld	l, -7 (ix)
      001A6B DD 66 FA         [19] 5480 	ld	h, -6 (ix)
      001A6E 77               [ 7] 5481 	ld	(hl), a
                                   5482 ;src\/CheckPlayfield.h:194: for(byte line1 = line; line1 > 0; line1--) {
      001A6F DD 35 FF         [23] 5483 	dec	-1 (ix)
      001A72 C3rF3r19         [10] 5484 	jp	00223$
      001A75                       5485 00227$:
                                   5486 ;src\/CheckPlayfield.h:187: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A75 DD 34 FE         [23] 5487 	inc	-2 (ix)
      001A78 C3rAAr19         [10] 5488 	jp	00226$
      001A7B                       5489 00230$:
                                   5490 ;src\/CheckPlayfield.h:186: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A7B DD 34 FD         [23] 5491 	inc	-3 (ix)
      001A7E C3r9Er19         [10] 5492 	jp	00229$
      001A81                       5493 00172$:
                                   5494 ;src\/CheckPlayfield.h:208: oldLevel = level;
      001A81 3Ar06r00         [13] 5495 	ld	a, (#_level + 0)
      001A84 4F               [ 4] 5496 	ld	c, a
                                   5497 ;src\/CheckPlayfield.h:209: if(blocksRemoved >= 90) {
      001A85 21r04r00         [10] 5498 	ld	hl, #_blocksRemoved
      001A88 46               [ 7] 5499 	ld	b, (hl)
      001A89 23               [ 6] 5500 	inc	hl
      001A8A 56               [ 7] 5501 	ld	d, (hl)
      001A8B 78               [ 4] 5502 	ld	a, b
      001A8C D6 5A            [ 7] 5503 	sub	a, #0x5a
      001A8E 7A               [ 4] 5504 	ld	a, d
      001A8F DE 00            [ 7] 5505 	sbc	a, #0x00
      001A91 38 19            [12] 5506 	jr	C, 00180$
                                   5507 ;src\/CheckPlayfield.h:210: level = (blocksRemoved / 30) + 1;
      001A93 C5               [11] 5508 	push	bc
      001A94 21 1E 00         [10] 5509 	ld	hl, #0x001e
      001A97 E5               [11] 5510 	push	hl
      001A98 58               [ 4] 5511 	ld	e, b
      001A99 D5               [11] 5512 	push	de
      001A9A CDr00r00         [17] 5513 	call	__divuint
      001A9D F1               [10] 5514 	pop	af
      001A9E F1               [10] 5515 	pop	af
      001A9F C1               [10] 5516 	pop	bc
      001AA0 7D               [ 4] 5517 	ld	a, l
      001AA1 3C               [ 4] 5518 	inc	a
      001AA2 32r06r00         [13] 5519 	ld	(_level+0), a
                                   5520 ;src\/CheckPlayfield.h:211: speed = 15;
      001AA5 21r93r00         [10] 5521 	ld	hl, #_speed
      001AA8 36 0F            [10] 5522 	ld	(hl), #0x0f
      001AAA 18 32            [12] 5523 	jr	00181$
      001AAC                       5524 00180$:
                                   5525 ;src\/CheckPlayfield.h:214: else if(blocksRemoved >= 60) { 
      001AAC 78               [ 4] 5526 	ld	a, b
      001AAD D6 3C            [ 7] 5527 	sub	a, #0x3c
      001AAF 7A               [ 4] 5528 	ld	a, d
      001AB0 DE 00            [ 7] 5529 	sbc	a, #0x00
      001AB2 38 0C            [12] 5530 	jr	C, 00177$
                                   5531 ;src\/CheckPlayfield.h:215: level = 3;
      001AB4 21r06r00         [10] 5532 	ld	hl, #_level
      001AB7 36 03            [10] 5533 	ld	(hl), #0x03
                                   5534 ;src\/CheckPlayfield.h:216: speed = 30;
      001AB9 21r93r00         [10] 5535 	ld	hl, #_speed
      001ABC 36 1E            [10] 5536 	ld	(hl), #0x1e
      001ABE 18 1E            [12] 5537 	jr	00181$
      001AC0                       5538 00177$:
                                   5539 ;src\/CheckPlayfield.h:218: else if(blocksRemoved >= 30) { 
      001AC0 78               [ 4] 5540 	ld	a, b
      001AC1 D6 1E            [ 7] 5541 	sub	a, #0x1e
      001AC3 7A               [ 4] 5542 	ld	a, d
      001AC4 DE 00            [ 7] 5543 	sbc	a, #0x00
      001AC6 38 0C            [12] 5544 	jr	C, 00174$
                                   5545 ;src\/CheckPlayfield.h:219: level = 2;
      001AC8 21r06r00         [10] 5546 	ld	hl, #_level
      001ACB 36 02            [10] 5547 	ld	(hl), #0x02
                                   5548 ;src\/CheckPlayfield.h:220: speed = 45;
      001ACD 21r93r00         [10] 5549 	ld	hl, #_speed
      001AD0 36 2D            [10] 5550 	ld	(hl), #0x2d
      001AD2 18 0A            [12] 5551 	jr	00181$
      001AD4                       5552 00174$:
                                   5553 ;src\/CheckPlayfield.h:223: level = 1;
      001AD4 21r06r00         [10] 5554 	ld	hl, #_level
      001AD7 36 01            [10] 5555 	ld	(hl), #0x01
                                   5556 ;src\/CheckPlayfield.h:224: speed = 60;
      001AD9 21r93r00         [10] 5557 	ld	hl, #_speed
      001ADC 36 3C            [10] 5558 	ld	(hl), #0x3c
      001ADE                       5559 00181$:
                                   5560 ;src\/CheckPlayfield.h:227: if(oldLevel != level) {
      001ADE 3Ar06r00         [13] 5561 	ld	a,(#_level + 0)
      001AE1 91               [ 4] 5562 	sub	a, c
      001AE2 28 05            [12] 5563 	jr	Z, 00183$
                                   5564 ;src\/CheckPlayfield.h:228: newLevel = TRUE;
      001AE4 21r07r00         [10] 5565 	ld	hl, #_newLevel
      001AE7 36 01            [10] 5566 	ld	(hl), #0x01
      001AE9                       5567 00183$:
                                   5568 ;src\/CheckPlayfield.h:232: DrawPlayfield();
      001AE9 CDrEFr11         [17] 5569 	call	_DrawPlayfield
                                   5570 ;src\/CheckPlayfield.h:236: CheckIfPlayfieldIsValid(); // test
      001AEC CDr60r12         [17] 5571 	call	_CheckIfPlayfieldIsValid
                                   5572 ;src\/CheckPlayfield.h:238: DrawScore();
      001AEF CDr86r0A         [17] 5573 	call	_DrawScore
                                   5574 ;src\/CheckPlayfield.h:240: iteration++;
      001AF2 DD 34 04         [23] 5575 	inc	4 (ix)
                                   5576 ;src\/CheckPlayfield.h:241: CheckPlayfield(iteration);  
      001AF5 DD 7E 04         [19] 5577 	ld	a, 4 (ix)
      001AF8 F5               [11] 5578 	push	af
      001AF9 33               [ 6] 5579 	inc	sp
      001AFA CDr14r13         [17] 5580 	call	_CheckPlayfield
      001AFD                       5581 00231$:
                                   5582 ;src\/CheckPlayfield.h:246: }
      001AFD DD F9            [10] 5583 	ld	sp, ix
      001AFF DD E1            [14] 5584 	pop	ix
      001B01 C9               [10] 5585 	ret
                                   5586 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5587 ;	---------------------------------
                                   5588 ; Function RandomIndex
                                   5589 ; ---------------------------------
      001B02                       5590 _RandomIndex::
                                   5591 ;src\/GameLogic.h:5: do {
      001B02                       5592 00101$:
                                   5593 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001B02 CDrA3r00         [17] 5594 	call	_GetRandom
      001B05 7D               [ 4] 5595 	ld	a, l
      001B06 E6 07            [ 7] 5596 	and	a, #0x07
      001B08 6F               [ 4] 5597 	ld	l, a
                                   5598 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001B09 3E 04            [ 7] 5599 	ld	a, #0x04
      001B0B 95               [ 4] 5600 	sub	a, l
      001B0C 38 F4            [12] 5601 	jr	C, 00101$
                                   5602 ;src\/GameLogic.h:10: return random;
                                   5603 ;src\/GameLogic.h:11: }
      001B0E C9               [10] 5604 	ret
                                   5605 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5606 ;	---------------------------------
                                   5607 ; Function RandomPiece
                                   5608 ; ---------------------------------
      001B0F                       5609 _RandomPiece::
                                   5610 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001B0F 01r18r00         [10] 5611 	ld	bc, #_pieces+0
      001B12 C5               [11] 5612 	push	bc
      001B13 CDr02r1B         [17] 5613 	call	_RandomIndex
      001B16 C1               [10] 5614 	pop	bc
      001B17 26 00            [ 7] 5615 	ld	h, #0x00
      001B19 09               [11] 5616 	add	hl, bc
      001B1A 7E               [ 7] 5617 	ld	a, (hl)
      001B1B 32r90r00         [13] 5618 	ld	(_topPiece+0), a
                                   5619 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001B1E C5               [11] 5620 	push	bc
      001B1F CDr02r1B         [17] 5621 	call	_RandomIndex
      001B22 C1               [10] 5622 	pop	bc
      001B23 26 00            [ 7] 5623 	ld	h, #0x00
      001B25 09               [11] 5624 	add	hl, bc
      001B26 7E               [ 7] 5625 	ld	a, (hl)
      001B27 32r91r00         [13] 5626 	ld	(_midPiece+0), a
                                   5627 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001B2A C5               [11] 5628 	push	bc
      001B2B CDr02r1B         [17] 5629 	call	_RandomIndex
      001B2E C1               [10] 5630 	pop	bc
      001B2F 26 00            [ 7] 5631 	ld	h, #0x00
      001B31 09               [11] 5632 	add	hl, bc
      001B32 7E               [ 7] 5633 	ld	a, (hl)
      001B33 32r92r00         [13] 5634 	ld	(_bottomPiece+0), a
                                   5635 ;src\/GameLogic.h:17: }
      001B36 C9               [10] 5636 	ret
                                   5637 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5638 ;	---------------------------------
                                   5639 ; Function UpdateAndDrawPieceStatic
                                   5640 ; ---------------------------------
      001B37                       5641 _UpdateAndDrawPieceStatic::
                                   5642 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001B37 01r00r00         [10] 5643 	ld	bc, #_playfield+0
      001B3A ED 5Br01r00      [20] 5644 	ld	de, (_col)
      001B3E 16 00            [ 7] 5645 	ld	d, #0x00
      001B40 6B               [ 4] 5646 	ld	l, e
      001B41 62               [ 4] 5647 	ld	h, d
      001B42 29               [11] 5648 	add	hl, hl
      001B43 19               [11] 5649 	add	hl, de
      001B44 29               [11] 5650 	add	hl, hl
      001B45 29               [11] 5651 	add	hl, hl
      001B46 09               [11] 5652 	add	hl, bc
      001B47 EB               [ 4] 5653 	ex	de, hl
      001B48 3Ar02r00         [13] 5654 	ld	a, (#_line + 0)
      001B4B 6F               [ 4] 5655 	ld	l, a
      001B4C 26 00            [ 7] 5656 	ld	h, #0x00
      001B4E 19               [11] 5657 	add	hl, de
      001B4F 3Ar90r00         [13] 5658 	ld	a,(#_topPiece + 0)
      001B52 77               [ 7] 5659 	ld	(hl), a
                                   5660 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001B53 ED 5Br01r00      [20] 5661 	ld	de, (_col)
      001B57 16 00            [ 7] 5662 	ld	d, #0x00
      001B59 6B               [ 4] 5663 	ld	l, e
      001B5A 62               [ 4] 5664 	ld	h, d
      001B5B 29               [11] 5665 	add	hl, hl
      001B5C 19               [11] 5666 	add	hl, de
      001B5D 29               [11] 5667 	add	hl, hl
      001B5E 29               [11] 5668 	add	hl, hl
      001B5F 09               [11] 5669 	add	hl, bc
      001B60 EB               [ 4] 5670 	ex	de, hl
      001B61 3Ar02r00         [13] 5671 	ld	a, (#_line + 0)
      001B64 6F               [ 4] 5672 	ld	l, a
      001B65 2C               [ 4] 5673 	inc	l
      001B66 26 00            [ 7] 5674 	ld	h, #0x00
      001B68 19               [11] 5675 	add	hl, de
      001B69 3Ar91r00         [13] 5676 	ld	a,(#_midPiece + 0)
      001B6C 77               [ 7] 5677 	ld	(hl), a
                                   5678 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001B6D ED 5Br01r00      [20] 5679 	ld	de, (_col)
      001B71 16 00            [ 7] 5680 	ld	d, #0x00
      001B73 6B               [ 4] 5681 	ld	l, e
      001B74 62               [ 4] 5682 	ld	h, d
      001B75 29               [11] 5683 	add	hl, hl
      001B76 19               [11] 5684 	add	hl, de
      001B77 29               [11] 5685 	add	hl, hl
      001B78 29               [11] 5686 	add	hl, hl
      001B79 09               [11] 5687 	add	hl, bc
      001B7A EB               [ 4] 5688 	ex	de, hl
      001B7B 3Ar02r00         [13] 5689 	ld	a, (#_line + 0)
      001B7E 6F               [ 4] 5690 	ld	l, a
      001B7F 2C               [ 4] 5691 	inc	l
      001B80 2C               [ 4] 5692 	inc	l
      001B81 26 00            [ 7] 5693 	ld	h, #0x00
      001B83 19               [11] 5694 	add	hl, de
      001B84 3Ar92r00         [13] 5695 	ld	a,(#_bottomPiece + 0)
      001B87 77               [ 7] 5696 	ld	(hl), a
                                   5697 ;src\/GameLogic.h:25: DrawPiece(line);
      001B88 C5               [11] 5698 	push	bc
      001B89 3Ar02r00         [13] 5699 	ld	a,(#_line + 0)
      001B8C F5               [11] 5700 	push	af
      001B8D 33               [ 6] 5701 	inc	sp
      001B8E CDrCCr11         [17] 5702 	call	_DrawPiece
      001B91 33               [ 6] 5703 	inc	sp
      001B92 C1               [10] 5704 	pop	bc
                                   5705 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001B93 3E 02            [ 7] 5706 	ld	a, #0x02
      001B95 32r01r00         [13] 5707 	ld	(#_col), a
                                   5708 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   5709 ;src\/GameLogic.h:31: counter = 0;
      001B98 3E 00            [ 7] 5710 	ld	a,#0x00
      001B9A 32r02r00         [13] 5711 	ld	(#_line),a
      001B9D 32r03r00         [13] 5712 	ld	(#_counter), a
                                   5713 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001BA0 3Ar18r00         [13] 5714 	ld	a, (#_playfield + 24)
      001BA3 B7               [ 4] 5715 	or	a, a
      001BA4 20 0C            [12] 5716 	jr	NZ, 00101$
                                   5717 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001BA6 3Ar19r00         [13] 5718 	ld	a, (#_playfield + 25)
      001BA9 B7               [ 4] 5719 	or	a, a
      001BAA 20 06            [12] 5720 	jr	NZ, 00101$
                                   5721 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001BAC 3Ar1Ar00         [13] 5722 	ld	a, (#_playfield + 26)
      001BAF B7               [ 4] 5723 	or	a, a
      001BB0 28 0B            [12] 5724 	jr	Z, 00102$
      001BB2                       5725 00101$:
                                   5726 ;src\/GameLogic.h:37: gameOver = TRUE;
      001BB2 FD 21r00r00      [14] 5727 	ld	iy, #_gameOver
      001BB6 FD 36 00 01      [19] 5728 	ld	0 (iy), #0x01
      001BBA C3rEFr11         [10] 5729 	jp	_DrawPlayfield
      001BBD                       5730 00102$:
                                   5731 ;src\/GameLogic.h:40: RandomPiece();
      001BBD CDr0Fr1B         [17] 5732 	call	_RandomPiece
                                   5733 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001BC0 3E 01            [ 7] 5734 	ld	a, #0x01
      001BC2 F5               [11] 5735 	push	af
      001BC3 33               [ 6] 5736 	inc	sp
      001BC4 CDr14r13         [17] 5737 	call	_CheckPlayfield
      001BC7 33               [ 6] 5738 	inc	sp
                                   5739 ;src\/GameLogic.h:45: DrawPlayfield();
                                   5740 ;src\/GameLogic.h:46: }
      001BC8 C3rEFr11         [10] 5741 	jp	_DrawPlayfield
                                   5742 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   5743 ;	---------------------------------
                                   5744 ; Function BlinkPauseText
                                   5745 ; ---------------------------------
      001BCB                       5746 _BlinkPauseText::
                                   5747 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001BCB 2A 9E FC         [16] 5748 	ld	hl, (_JIFFY)
      001BCE CB 5D            [ 8] 5749 	bit	3, l
      001BD0 28 0E            [12] 5750 	jr	Z, 00102$
                                   5751 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001BD2 11 0D 0C         [10] 5752 	ld	de, #0x0c0d
      001BD5 D5               [11] 5753 	push	de
      001BD6 21rE9r1B         [10] 5754 	ld	hl, #___str_4
      001BD9 E5               [11] 5755 	push	hl
      001BDA CDrC8r07         [17] 5756 	call	_DrawString
      001BDD F1               [10] 5757 	pop	af
      001BDE F1               [10] 5758 	pop	af
      001BDF C9               [10] 5759 	ret
      001BE0                       5760 00102$:
                                   5761 ;src\/GameLogic.h:55: DrawLine(6);
      001BE0 3E 06            [ 7] 5762 	ld	a, #0x06
      001BE2 F5               [11] 5763 	push	af
      001BE3 33               [ 6] 5764 	inc	sp
      001BE4 CDr94r11         [17] 5765 	call	_DrawLine
      001BE7 33               [ 6] 5766 	inc	sp
                                   5767 ;src\/GameLogic.h:58: }
      001BE8 C9               [10] 5768 	ret
      001BE9                       5769 ___str_4:
      001BE9 50 41 55 53 45        5770 	.ascii "PAUSE"
      001BEE 00                    5771 	.db 0x00
                                   5772 ;src\/GameLogic.h:60: void Pause() {
                                   5773 ;	---------------------------------
                                   5774 ; Function Pause
                                   5775 ; ---------------------------------
      001BEF                       5776 _Pause::
                                   5777 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001BEF 11 0D 0C         [10] 5778 	ld	de, #0x0c0d
      001BF2 D5               [11] 5779 	push	de
      001BF3 21r29r1C         [10] 5780 	ld	hl, #___str_5
      001BF6 E5               [11] 5781 	push	hl
      001BF7 CDrC8r07         [17] 5782 	call	_DrawString
      001BFA F1               [10] 5783 	pop	af
      001BFB F1               [10] 5784 	pop	af
                                   5785 ;src\/GameLogic.h:65: while(TRUE) {
      001BFC                       5786 00114$:
                                   5787 ;src\/GameLogic.h:67: BlinkPauseText();
      001BFC CDrCBr1B         [17] 5788 	call	_BlinkPauseText
                                   5789 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001BFF 2E 07            [ 7] 5790 	ld	l, #0x07
      001C01 CDr00r00         [17] 5791 	call	_SNSMAT
                                   5792 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001C04 CB 55            [ 8] 5793 	bit	2, l
      001C06 28 F4            [12] 5794 	jr	Z, 00114$
                                   5795 ;src\/GameLogic.h:73: while(TRUE) {
      001C08                       5796 00109$:
                                   5797 ;src\/GameLogic.h:75: BlinkPauseText();
      001C08 CDrCBr1B         [17] 5798 	call	_BlinkPauseText
                                   5799 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001C0B 2E 07            [ 7] 5800 	ld	l, #0x07
      001C0D CDr00r00         [17] 5801 	call	_SNSMAT
                                   5802 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001C10 CB 55            [ 8] 5803 	bit	2, l
      001C12 20 F4            [12] 5804 	jr	NZ, 00109$
                                   5805 ;src\/GameLogic.h:81: while(TRUE) {
      001C14                       5806 00104$:
                                   5807 ;src\/GameLogic.h:83: BlinkPauseText();
      001C14 CDrCBr1B         [17] 5808 	call	_BlinkPauseText
                                   5809 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001C17 2E 07            [ 7] 5810 	ld	l, #0x07
      001C19 CDr00r00         [17] 5811 	call	_SNSMAT
                                   5812 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001C1C CB 55            [ 8] 5813 	bit	2, l
      001C1E 28 F4            [12] 5814 	jr	Z, 00104$
                                   5815 ;src\/GameLogic.h:89: DrawLine(6);
      001C20 3E 06            [ 7] 5816 	ld	a, #0x06
      001C22 F5               [11] 5817 	push	af
      001C23 33               [ 6] 5818 	inc	sp
      001C24 CDr94r11         [17] 5819 	call	_DrawLine
      001C27 33               [ 6] 5820 	inc	sp
                                   5821 ;src\/GameLogic.h:90: return;
                                   5822 ;src\/GameLogic.h:100: }
      001C28 C9               [10] 5823 	ret
      001C29                       5824 ___str_5:
      001C29 50 41 55 53 45        5825 	.ascii "PAUSE"
      001C2E 00                    5826 	.db 0x00
                                   5827 ;src\/GameLogic.h:102: void GameLoop() {
                                   5828 ;	---------------------------------
                                   5829 ; Function GameLoop
                                   5830 ; ---------------------------------
      001C2F                       5831 _GameLoop::
      001C2F DD E5            [15] 5832 	push	ix
      001C31 DD 21 00 00      [14] 5833 	ld	ix,#0
      001C35 DD 39            [15] 5834 	add	ix,sp
      001C37 21 F3 FF         [10] 5835 	ld	hl, #-13
      001C3A 39               [11] 5836 	add	hl, sp
      001C3B F9               [ 6] 5837 	ld	sp, hl
                                   5838 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001C3C DD 36 FF 00      [19] 5839 	ld	-1 (ix), #0
      001C40 DD 36 F3 00      [19] 5840 	ld	-13 (ix), #0
                                   5841 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001C44 DD 36 F4 00      [19] 5842 	ld	-12 (ix), #0
      001C48 DD 36 F5 00      [19] 5843 	ld	-11 (ix), #0
                                   5844 ;src\/GameLogic.h:109: while(!gameOver) {
      001C4C                       5845 00150$:
      001C4C 3Ar00r00         [13] 5846 	ld	a,(#_gameOver + 0)
      001C4F B7               [ 4] 5847 	or	a, a
      001C50 C2rE7r1F         [10] 5848 	jp	NZ, 00152$
                                   5849 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001C53 ED 4B 9E FC      [20] 5850 	ld	bc, (_JIFFY)
                                   5851 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001C57                       5852 00101$:
      001C57 2A 9E FC         [16] 5853 	ld	hl, (_JIFFY)
      001C5A BF               [ 4] 5854 	cp	a, a
      001C5B ED 42            [15] 5855 	sbc	hl, bc
      001C5D 28 F8            [12] 5856 	jr	Z, 00101$
                                   5857 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001C5F ED 4Br01r00      [20] 5858 	ld	bc, (_col)
      001C63 06 00            [ 7] 5859 	ld	b, #0x00
      001C65 69               [ 4] 5860 	ld	l, c
      001C66 60               [ 4] 5861 	ld	h, b
      001C67 29               [11] 5862 	add	hl, hl
      001C68 09               [11] 5863 	add	hl, bc
      001C69 29               [11] 5864 	add	hl, hl
      001C6A 29               [11] 5865 	add	hl, hl
      001C6B EB               [ 4] 5866 	ex	de, hl
      001C6C 21r00r00         [10] 5867 	ld	hl, #_playfield
      001C6F 19               [11] 5868 	add	hl, de
      001C70 EB               [ 4] 5869 	ex	de, hl
      001C71 FD 21r02r00      [14] 5870 	ld	iy, #_line
      001C75 FD 6E 00         [19] 5871 	ld	l, 0 (iy)
      001C78 26 00            [ 7] 5872 	ld	h, #0x00
      001C7A 19               [11] 5873 	add	hl, de
      001C7B 36 00            [10] 5874 	ld	(hl), #0x00
                                   5875 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001C7D ED 4Br01r00      [20] 5876 	ld	bc, (_col)
      001C81 06 00            [ 7] 5877 	ld	b, #0x00
      001C83 69               [ 4] 5878 	ld	l, c
      001C84 60               [ 4] 5879 	ld	h, b
      001C85 29               [11] 5880 	add	hl, hl
      001C86 09               [11] 5881 	add	hl, bc
      001C87 29               [11] 5882 	add	hl, hl
      001C88 29               [11] 5883 	add	hl, hl
      001C89 EB               [ 4] 5884 	ex	de, hl
      001C8A 21r00r00         [10] 5885 	ld	hl, #_playfield
      001C8D 19               [11] 5886 	add	hl, de
      001C8E EB               [ 4] 5887 	ex	de, hl
      001C8F FD 6E 00         [19] 5888 	ld	l, 0 (iy)
      001C92 2C               [ 4] 5889 	inc	l
      001C93 26 00            [ 7] 5890 	ld	h, #0x00
      001C95 19               [11] 5891 	add	hl, de
      001C96 36 00            [10] 5892 	ld	(hl), #0x00
                                   5893 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001C98 ED 4Br01r00      [20] 5894 	ld	bc, (_col)
      001C9C 06 00            [ 7] 5895 	ld	b, #0x00
      001C9E 69               [ 4] 5896 	ld	l, c
      001C9F 60               [ 4] 5897 	ld	h, b
      001CA0 29               [11] 5898 	add	hl, hl
      001CA1 09               [11] 5899 	add	hl, bc
      001CA2 29               [11] 5900 	add	hl, hl
      001CA3 29               [11] 5901 	add	hl, hl
      001CA4 EB               [ 4] 5902 	ex	de, hl
      001CA5 21r00r00         [10] 5903 	ld	hl, #_playfield
      001CA8 19               [11] 5904 	add	hl, de
      001CA9 EB               [ 4] 5905 	ex	de, hl
      001CAA FD 6E 00         [19] 5906 	ld	l, 0 (iy)
      001CAD 2C               [ 4] 5907 	inc	l
      001CAE 2C               [ 4] 5908 	inc	l
      001CAF 26 00            [ 7] 5909 	ld	h, #0x00
      001CB1 19               [11] 5910 	add	hl, de
      001CB2 36 00            [10] 5911 	ld	(hl), #0x00
                                   5912 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001CB4 2E 01            [ 7] 5913 	ld	l, #0x01
      001CB6 CDr00r00         [17] 5914 	call	_GTSTCK
      001CB9 DD 75 F6         [19] 5915 	ld	-10 (ix), l
                                   5916 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001CBC 2E 01            [ 7] 5917 	ld	l, #0x01
      001CBE CDr00r00         [17] 5918 	call	_GTTRIG
      001CC1 DD 75 F7         [19] 5919 	ld	-9 (ix), l
                                   5920 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001CC4 2E 03            [ 7] 5921 	ld	l, #0x03
      001CC6 CDr00r00         [17] 5922 	call	_GTTRIG
      001CC9 DD 75 F8         [19] 5923 	ld	-8 (ix), l
                                   5924 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001CCC DD 7E F6         [19] 5925 	ld	a, -10 (ix)
                                   5926 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001CCF B7               [ 4] 5927 	or	a,a
      001CD0 20 07            [12] 5928 	jr	NZ, 00105$
      001CD2 6F               [ 4] 5929 	ld	l,a
      001CD3 CDr00r00         [17] 5930 	call	_GTSTCK
      001CD6 DD 75 F6         [19] 5931 	ld	-10 (ix), l
      001CD9                       5932 00105$:
                                   5933 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001CD9 FD 21r02r00      [14] 5934 	ld	iy, #_line
      001CDD FD 7E 00         [19] 5935 	ld	a, 0 (iy)
      001CE0 DD 77 F9         [19] 5936 	ld	-7 (ix), a
                                   5937 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001CE3 DD 7E FF         [19] 5938 	ld	a, -1 (ix)
      001CE6 B7               [ 4] 5939 	or	a, a
      001CE7 C2rD0r1D         [10] 5940 	jp	NZ, 00118$
                                   5941 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001CEA FD 7E 00         [19] 5942 	ld	a, 0 (iy)
      001CED DD 77 FF         [19] 5943 	ld	-1 (ix), a
                                   5944 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001CF0 FD 21r01r00      [14] 5945 	ld	iy, #_col
      001CF4 FD 7E 00         [19] 5946 	ld	a, 0 (iy)
      001CF7 DD 77 FA         [19] 5947 	ld	-6 (ix), a
                                   5948 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001CFA DD 7E FF         [19] 5949 	ld	a, -1 (ix)
      001CFD C6 02            [ 7] 5950 	add	a, #0x02
      001CFF DD 77 FB         [19] 5951 	ld	-5 (ix), a
                                   5952 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001D02 DD 7E F6         [19] 5953 	ld	a, -10 (ix)
      001D05 D6 07            [ 7] 5954 	sub	a, #0x07
      001D07 20 5F            [12] 5955 	jr	NZ, 00112$
                                   5956 ;src\/GameLogic.h:139: col > 0 && 
      001D09 FD 7E 00         [19] 5957 	ld	a, 0 (iy)
      001D0C B7               [ 4] 5958 	or	a, a
      001D0D 28 59            [12] 5959 	jr	Z, 00112$
                                   5960 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001D0F DD 7E FA         [19] 5961 	ld	a, -6 (ix)
      001D12 C6 FF            [ 7] 5962 	add	a, #0xff
      001D14 DD 77 FF         [19] 5963 	ld	-1 (ix), a
      001D17 4F               [ 4] 5964 	ld	c, a
      001D18 07               [ 4] 5965 	rlca
      001D19 9F               [ 4] 5966 	sbc	a, a
      001D1A 47               [ 4] 5967 	ld	b, a
      001D1B 69               [ 4] 5968 	ld	l, c
      001D1C 60               [ 4] 5969 	ld	h, b
      001D1D 29               [11] 5970 	add	hl, hl
      001D1E 09               [11] 5971 	add	hl, bc
      001D1F 29               [11] 5972 	add	hl, hl
      001D20 29               [11] 5973 	add	hl, hl
      001D21 DD 75 FE         [19] 5974 	ld	-2 (ix), l
      001D24 DD 74 FF         [19] 5975 	ld	-1 (ix), h
      001D27 3Er00            [ 7] 5976 	ld	a, #<(_playfield)
      001D29 DD 86 FE         [19] 5977 	add	a, -2 (ix)
      001D2C DD 77 FC         [19] 5978 	ld	-4 (ix), a
      001D2F 3Es00            [ 7] 5979 	ld	a, #>(_playfield)
      001D31 DD 8E FF         [19] 5980 	adc	a, -1 (ix)
      001D34 DD 77 FD         [19] 5981 	ld	-3 (ix), a
      001D37 DD 7E FC         [19] 5982 	ld	a, -4 (ix)
      001D3A DD 86 F9         [19] 5983 	add	a, -7 (ix)
      001D3D DD 77 FE         [19] 5984 	ld	-2 (ix), a
      001D40 DD 7E FD         [19] 5985 	ld	a, -3 (ix)
      001D43 CE 00            [ 7] 5986 	adc	a, #0x00
      001D45 DD 77 FF         [19] 5987 	ld	-1 (ix), a
      001D48 DD 6E FE         [19] 5988 	ld	l, -2 (ix)
      001D4B DD 66 FF         [19] 5989 	ld	h, -1 (ix)
      001D4E 7E               [ 7] 5990 	ld	a, (hl)
      001D4F B7               [ 4] 5991 	or	a, a
      001D50 20 16            [12] 5992 	jr	NZ, 00112$
                                   5993 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001D52 DD 7E FC         [19] 5994 	ld	a, -4 (ix)
      001D55 DD 86 FB         [19] 5995 	add	a, -5 (ix)
      001D58 4F               [ 4] 5996 	ld	c, a
      001D59 DD 7E FD         [19] 5997 	ld	a, -3 (ix)
      001D5C CE 00            [ 7] 5998 	adc	a, #0x00
      001D5E 47               [ 4] 5999 	ld	b, a
      001D5F 0A               [ 7] 6000 	ld	a, (bc)
      001D60 B7               [ 4] 6001 	or	a, a
      001D61 20 05            [12] 6002 	jr	NZ, 00112$
                                   6003 ;src\/GameLogic.h:142: col--;
      001D63 FD 35 00         [23] 6004 	dec	0 (iy)
      001D66 18 68            [12] 6005 	jr	00118$
      001D68                       6006 00112$:
                                   6007 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001D68 DD 7E F6         [19] 6008 	ld	a, -10 (ix)
      001D6B D6 03            [ 7] 6009 	sub	a, #0x03
      001D6D 20 61            [12] 6010 	jr	NZ, 00118$
                                   6011 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001D6F FD 21r01r00      [14] 6012 	ld	iy, #_col
      001D73 FD 7E 00         [19] 6013 	ld	a, 0 (iy)
      001D76 D6 05            [ 7] 6014 	sub	a, #0x05
      001D78 30 56            [12] 6015 	jr	NC, 00118$
                                   6016 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001D7A DD 7E FA         [19] 6017 	ld	a, -6 (ix)
      001D7D 3C               [ 4] 6018 	inc	a
      001D7E DD 77 FF         [19] 6019 	ld	-1 (ix), a
      001D81 4F               [ 4] 6020 	ld	c, a
      001D82 07               [ 4] 6021 	rlca
      001D83 9F               [ 4] 6022 	sbc	a, a
      001D84 47               [ 4] 6023 	ld	b, a
      001D85 69               [ 4] 6024 	ld	l, c
      001D86 60               [ 4] 6025 	ld	h, b
      001D87 29               [11] 6026 	add	hl, hl
      001D88 09               [11] 6027 	add	hl, bc
      001D89 29               [11] 6028 	add	hl, hl
      001D8A 29               [11] 6029 	add	hl, hl
      001D8B DD 75 FE         [19] 6030 	ld	-2 (ix), l
      001D8E DD 74 FF         [19] 6031 	ld	-1 (ix), h
      001D91 3Er00            [ 7] 6032 	ld	a, #<(_playfield)
      001D93 DD 86 FE         [19] 6033 	add	a, -2 (ix)
      001D96 DD 77 FC         [19] 6034 	ld	-4 (ix), a
      001D99 3Es00            [ 7] 6035 	ld	a, #>(_playfield)
      001D9B DD 8E FF         [19] 6036 	adc	a, -1 (ix)
      001D9E DD 77 FD         [19] 6037 	ld	-3 (ix), a
      001DA1 DD 7E FC         [19] 6038 	ld	a, -4 (ix)
      001DA4 DD 86 F9         [19] 6039 	add	a, -7 (ix)
      001DA7 DD 77 FE         [19] 6040 	ld	-2 (ix), a
      001DAA DD 7E FD         [19] 6041 	ld	a, -3 (ix)
      001DAD CE 00            [ 7] 6042 	adc	a, #0x00
      001DAF DD 77 FF         [19] 6043 	ld	-1 (ix), a
      001DB2 DD 6E FE         [19] 6044 	ld	l, -2 (ix)
      001DB5 DD 66 FF         [19] 6045 	ld	h, -1 (ix)
      001DB8 7E               [ 7] 6046 	ld	a, (hl)
      001DB9 B7               [ 4] 6047 	or	a, a
      001DBA 20 14            [12] 6048 	jr	NZ, 00118$
                                   6049 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001DBC DD 7E FC         [19] 6050 	ld	a, -4 (ix)
      001DBF DD 86 FB         [19] 6051 	add	a, -5 (ix)
      001DC2 4F               [ 4] 6052 	ld	c, a
      001DC3 DD 7E FD         [19] 6053 	ld	a, -3 (ix)
      001DC6 CE 00            [ 7] 6054 	adc	a, #0x00
      001DC8 47               [ 4] 6055 	ld	b, a
      001DC9 0A               [ 7] 6056 	ld	a, (bc)
      001DCA B7               [ 4] 6057 	or	a, a
      001DCB 20 03            [12] 6058 	jr	NZ, 00118$
                                   6059 ;src\/GameLogic.h:148: col++;
      001DCD FD 34 00         [23] 6060 	inc	0 (iy)
      001DD0                       6061 00118$:
                                   6062 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001DD0 DD 7E F3         [19] 6063 	ld	a, -13 (ix)
      001DD3 B7               [ 4] 6064 	or	a, a
      001DD4 C2r96r1E         [10] 6065 	jp	NZ, 00132$
                                   6066 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001DD7 DD 7E F6         [19] 6067 	ld	a, -10 (ix)
      001DDA 3D               [ 4] 6068 	dec	a
      001DDB 28 18            [12] 6069 	jr	Z, 00119$
      001DDD DD 7E F4         [19] 6070 	ld	a, -12 (ix)
      001DE0 B7               [ 4] 6071 	or	a, a
      001DE1 20 06            [12] 6072 	jr	NZ, 00124$
      001DE3 DD 7E F7         [19] 6073 	ld	a, -9 (ix)
      001DE6 3C               [ 4] 6074 	inc	a
      001DE7 28 0C            [12] 6075 	jr	Z, 00119$
      001DE9                       6076 00124$:
      001DE9 DD 7E F5         [19] 6077 	ld	a, -11 (ix)
      001DEC B7               [ 4] 6078 	or	a, a
      001DED 20 1A            [12] 6079 	jr	NZ, 00120$
      001DEF DD 7E F8         [19] 6080 	ld	a, -8 (ix)
      001DF2 3C               [ 4] 6081 	inc	a
      001DF3 20 14            [12] 6082 	jr	NZ, 00120$
      001DF5                       6083 00119$:
                                   6084 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001DF5 3Ar92r00         [13] 6085 	ld	a, (#_bottomPiece + 0)
      001DF8 4F               [ 4] 6086 	ld	c, a
                                   6087 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001DF9 3Ar91r00         [13] 6088 	ld	a,(#_midPiece + 0)
      001DFC 32r92r00         [13] 6089 	ld	(#_bottomPiece),a
                                   6090 ;src\/GameLogic.h:160: midPiece = topPiece;
      001DFF 3Ar90r00         [13] 6091 	ld	a,(#_topPiece + 0)
      001E02 32r91r00         [13] 6092 	ld	(#_midPiece),a
                                   6093 ;src\/GameLogic.h:161: topPiece = temp;
      001E05 21r90r00         [10] 6094 	ld	hl, #_topPiece
      001E08 71               [ 7] 6095 	ld	(hl), c
      001E09                       6096 00120$:
                                   6097 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001E09 DD 7E F6         [19] 6098 	ld	a, -10 (ix)
      001E0C D6 05            [ 7] 6099 	sub	a, #0x05
      001E0E C2r96r1E         [10] 6100 	jp	NZ,00132$
                                   6101 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001E11 DD 7E F9         [19] 6102 	ld	a, -7 (ix)
      001E14 DD 77 FE         [19] 6103 	ld	-2 (ix), a
      001E17 DD 7E F9         [19] 6104 	ld	a, -7 (ix)
      001E1A DD 77 FF         [19] 6105 	ld	-1 (ix), a
      001E1D                       6106 00154$:
      001E1D DD 7E FF         [19] 6107 	ld	a, -1 (ix)
      001E20 D6 0C            [ 7] 6108 	sub	a, #0x0c
      001E22 30 72            [12] 6109 	jr	NC, 00132$
                                   6110 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001E24 DD 7E FF         [19] 6111 	ld	a, -1 (ix)
      001E27 D6 09            [ 7] 6112 	sub	a, #0x09
      001E29 28 4C            [12] 6113 	jr	Z, 00125$
      001E2B ED 4Br01r00      [20] 6114 	ld	bc, (_col)
      001E2F 06 00            [ 7] 6115 	ld	b, #0x00
      001E31 69               [ 4] 6116 	ld	l, c
      001E32 60               [ 4] 6117 	ld	h, b
      001E33 29               [11] 6118 	add	hl, hl
      001E34 09               [11] 6119 	add	hl, bc
      001E35 29               [11] 6120 	add	hl, hl
      001E36 29               [11] 6121 	add	hl, hl
      001E37 DD 75 FC         [19] 6122 	ld	-4 (ix), l
      001E3A DD 74 FD         [19] 6123 	ld	-3 (ix), h
      001E3D 3Er00            [ 7] 6124 	ld	a, #<(_playfield)
      001E3F DD 86 FC         [19] 6125 	add	a, -4 (ix)
      001E42 DD 77 FA         [19] 6126 	ld	-6 (ix), a
      001E45 3Es00            [ 7] 6127 	ld	a, #>(_playfield)
      001E47 DD 8E FD         [19] 6128 	adc	a, -3 (ix)
      001E4A DD 77 FB         [19] 6129 	ld	-5 (ix), a
      001E4D DD 7E FF         [19] 6130 	ld	a, -1 (ix)
      001E50 DD 77 FD         [19] 6131 	ld	-3 (ix), a
      001E53 DD 34 FD         [23] 6132 	inc	-3 (ix)
      001E56 DD 34 FD         [23] 6133 	inc	-3 (ix)
      001E59 DD 34 FD         [23] 6134 	inc	-3 (ix)
      001E5C DD 7E FD         [19] 6135 	ld	a, -3 (ix)
      001E5F DD 86 FA         [19] 6136 	add	a, -6 (ix)
      001E62 DD 77 FC         [19] 6137 	ld	-4 (ix), a
      001E65 3E 00            [ 7] 6138 	ld	a, #0x00
      001E67 DD 8E FB         [19] 6139 	adc	a, -5 (ix)
      001E6A DD 77 FD         [19] 6140 	ld	-3 (ix), a
      001E6D DD 6E FC         [19] 6141 	ld	l, -4 (ix)
      001E70 DD 66 FD         [19] 6142 	ld	h, -3 (ix)
      001E73 7E               [ 7] 6143 	ld	a, (hl)
      001E74 B7               [ 4] 6144 	or	a, a
      001E75 28 14            [12] 6145 	jr	Z, 00155$
      001E77                       6146 00125$:
                                   6147 ;src\/GameLogic.h:170: DrawPiece(line);
      001E77 3Ar02r00         [13] 6148 	ld	a,(#_line + 0)
      001E7A F5               [11] 6149 	push	af
      001E7B 33               [ 6] 6150 	inc	sp
      001E7C CDrCCr11         [17] 6151 	call	_DrawPiece
      001E7F 33               [ 6] 6152 	inc	sp
                                   6153 ;src\/GameLogic.h:172: line = i;
      001E80 DD 7E FE         [19] 6154 	ld	a, -2 (ix)
      001E83 32r02r00         [13] 6155 	ld	(#_line),a
                                   6156 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001E86 CDr37r1B         [17] 6157 	call	_UpdateAndDrawPieceStatic
                                   6158 ;src\/GameLogic.h:175: break;
      001E89 18 0B            [12] 6159 	jr	00132$
      001E8B                       6160 00155$:
                                   6161 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001E8B DD 34 FF         [23] 6162 	inc	-1 (ix)
      001E8E DD 7E FF         [19] 6163 	ld	a, -1 (ix)
      001E91 DD 77 FE         [19] 6164 	ld	-2 (ix), a
      001E94 18 87            [12] 6165 	jr	00154$
      001E96                       6166 00132$:
                                   6167 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001E96 DD 7E F6         [19] 6168 	ld	a, -10 (ix)
      001E99 DD 77 FF         [19] 6169 	ld	-1 (ix), a
                                   6170 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001E9C DD 7E F6         [19] 6171 	ld	a, -10 (ix)
      001E9F DD 77 F3         [19] 6172 	ld	-13 (ix), a
                                   6173 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      001EA2 DD 7E F7         [19] 6174 	ld	a, -9 (ix)
      001EA5 DD 77 F4         [19] 6175 	ld	-12 (ix), a
                                   6176 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      001EA8 DD 7E F8         [19] 6177 	ld	a, -8 (ix)
      001EAB DD 77 F5         [19] 6178 	ld	-11 (ix), a
                                   6179 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      001EAE 2E 07            [ 7] 6180 	ld	l, #0x07
      001EB0 CDr00r00         [17] 6181 	call	_SNSMAT
                                   6182 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      001EB3 CB 55            [ 8] 6183 	bit	2, l
      001EB5 20 03            [12] 6184 	jr	NZ, 00134$
                                   6185 ;src\/GameLogic.h:214: Pause();
      001EB7 CDrEFr1B         [17] 6186 	call	_Pause
      001EBA                       6187 00134$:
                                   6188 ;src\/GameLogic.h:219: counter++;
      001EBA FD 21r03r00      [14] 6189 	ld	iy, #_counter
      001EBE FD 34 00         [23] 6190 	inc	0 (iy)
                                   6191 ;src\/GameLogic.h:220: if(counter == speed) {
      001EC1 FD 7E 00         [19] 6192 	ld	a, 0 (iy)
      001EC4 21r93r00         [10] 6193 	ld	hl, #_speed
      001EC7 96               [ 7] 6194 	sub	a, (hl)
      001EC8 20 3F            [12] 6195 	jr	NZ, 00139$
                                   6196 ;src\/GameLogic.h:222: counter = 0;
      001ECA 21r03r00         [10] 6197 	ld	hl, #_counter
      001ECD 36 00            [10] 6198 	ld	(hl), #0x00
                                   6199 ;src\/GameLogic.h:225: DrawPiece(line);
      001ECF 3Ar02r00         [13] 6200 	ld	a,(#_line + 0)
      001ED2 F5               [11] 6201 	push	af
      001ED3 33               [ 6] 6202 	inc	sp
      001ED4 CDrCCr11         [17] 6203 	call	_DrawPiece
      001ED7 33               [ 6] 6204 	inc	sp
                                   6205 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      001ED8 FD 21r02r00      [14] 6206 	ld	iy, #_line
      001EDC FD 7E 00         [19] 6207 	ld	a, 0 (iy)
      001EDF D6 09            [ 7] 6208 	sub	a, #0x09
      001EE1 28 1F            [12] 6209 	jr	Z, 00135$
      001EE3 ED 4Br01r00      [20] 6210 	ld	bc, (_col)
      001EE7 06 00            [ 7] 6211 	ld	b, #0x00
      001EE9 69               [ 4] 6212 	ld	l, c
      001EEA 60               [ 4] 6213 	ld	h, b
      001EEB 29               [11] 6214 	add	hl, hl
      001EEC 09               [11] 6215 	add	hl, bc
      001EED 29               [11] 6216 	add	hl, hl
      001EEE 29               [11] 6217 	add	hl, hl
      001EEF EB               [ 4] 6218 	ex	de, hl
      001EF0 21r00r00         [10] 6219 	ld	hl, #_playfield
      001EF3 19               [11] 6220 	add	hl, de
      001EF4 EB               [ 4] 6221 	ex	de, hl
      001EF5 FD 7E 00         [19] 6222 	ld	a, 0 (iy)
      001EF8 C6 03            [ 7] 6223 	add	a, #0x03
      001EFA 6F               [ 4] 6224 	ld	l, a
      001EFB 26 00            [ 7] 6225 	ld	h, #0x00
      001EFD 19               [11] 6226 	add	hl, de
      001EFE 7E               [ 7] 6227 	ld	a, (hl)
      001EFF B7               [ 4] 6228 	or	a, a
      001F00 28 03            [12] 6229 	jr	Z, 00136$
      001F02                       6230 00135$:
                                   6231 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      001F02 CDr37r1B         [17] 6232 	call	_UpdateAndDrawPieceStatic
      001F05                       6233 00136$:
                                   6234 ;src\/GameLogic.h:234: line++;
      001F05 21r02r00         [10] 6235 	ld	hl, #_line
      001F08 34               [11] 6236 	inc	(hl)
      001F09                       6237 00139$:
                                   6238 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      001F09 ED 4Br01r00      [20] 6239 	ld	bc, (_col)
      001F0D 06 00            [ 7] 6240 	ld	b, #0x00
      001F0F 69               [ 4] 6241 	ld	l, c
      001F10 60               [ 4] 6242 	ld	h, b
      001F11 29               [11] 6243 	add	hl, hl
      001F12 09               [11] 6244 	add	hl, bc
      001F13 29               [11] 6245 	add	hl, hl
      001F14 29               [11] 6246 	add	hl, hl
      001F15 EB               [ 4] 6247 	ex	de, hl
      001F16 21r00r00         [10] 6248 	ld	hl, #_playfield
      001F19 19               [11] 6249 	add	hl, de
      001F1A EB               [ 4] 6250 	ex	de, hl
      001F1B 3Ar02r00         [13] 6251 	ld	a, (#_line + 0)
      001F1E 6F               [ 4] 6252 	ld	l, a
      001F1F 26 00            [ 7] 6253 	ld	h, #0x00
      001F21 19               [11] 6254 	add	hl, de
      001F22 3Ar90r00         [13] 6255 	ld	a,(#_topPiece + 0)
      001F25 77               [ 7] 6256 	ld	(hl), a
                                   6257 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      001F26 ED 4Br01r00      [20] 6258 	ld	bc, (_col)
      001F2A 06 00            [ 7] 6259 	ld	b, #0x00
      001F2C 69               [ 4] 6260 	ld	l, c
      001F2D 60               [ 4] 6261 	ld	h, b
      001F2E 29               [11] 6262 	add	hl, hl
      001F2F 09               [11] 6263 	add	hl, bc
      001F30 29               [11] 6264 	add	hl, hl
      001F31 29               [11] 6265 	add	hl, hl
      001F32 EB               [ 4] 6266 	ex	de, hl
      001F33 21r00r00         [10] 6267 	ld	hl, #_playfield
      001F36 19               [11] 6268 	add	hl, de
      001F37 EB               [ 4] 6269 	ex	de, hl
      001F38 3Ar02r00         [13] 6270 	ld	a, (#_line + 0)
      001F3B 6F               [ 4] 6271 	ld	l, a
      001F3C 2C               [ 4] 6272 	inc	l
      001F3D 26 00            [ 7] 6273 	ld	h, #0x00
      001F3F 19               [11] 6274 	add	hl, de
      001F40 3Ar91r00         [13] 6275 	ld	a,(#_midPiece + 0)
      001F43 77               [ 7] 6276 	ld	(hl), a
                                   6277 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      001F44 ED 4Br01r00      [20] 6278 	ld	bc, (_col)
      001F48 06 00            [ 7] 6279 	ld	b, #0x00
      001F4A 69               [ 4] 6280 	ld	l, c
      001F4B 60               [ 4] 6281 	ld	h, b
      001F4C 29               [11] 6282 	add	hl, hl
      001F4D 09               [11] 6283 	add	hl, bc
      001F4E 29               [11] 6284 	add	hl, hl
      001F4F 29               [11] 6285 	add	hl, hl
      001F50 EB               [ 4] 6286 	ex	de, hl
      001F51 21r00r00         [10] 6287 	ld	hl, #_playfield
      001F54 19               [11] 6288 	add	hl, de
      001F55 EB               [ 4] 6289 	ex	de, hl
      001F56 3Ar02r00         [13] 6290 	ld	a, (#_line + 0)
      001F59 6F               [ 4] 6291 	ld	l, a
      001F5A 2C               [ 4] 6292 	inc	l
      001F5B 2C               [ 4] 6293 	inc	l
      001F5C 26 00            [ 7] 6294 	ld	h, #0x00
      001F5E 19               [11] 6295 	add	hl, de
      001F5F 3Ar92r00         [13] 6296 	ld	a,(#_bottomPiece + 0)
      001F62 77               [ 7] 6297 	ld	(hl), a
                                   6298 ;src\/GameLogic.h:248: DrawPiece(line);
      001F63 3Ar02r00         [13] 6299 	ld	a,(#_line + 0)
      001F66 F5               [11] 6300 	push	af
      001F67 33               [ 6] 6301 	inc	sp
      001F68 CDrCCr11         [17] 6302 	call	_DrawPiece
      001F6B 33               [ 6] 6303 	inc	sp
                                   6304 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001F6C ED 4Br01r00      [20] 6305 	ld	bc, (_col)
      001F70 06 00            [ 7] 6306 	ld	b, #0x00
      001F72 69               [ 4] 6307 	ld	l, c
      001F73 60               [ 4] 6308 	ld	h, b
      001F74 29               [11] 6309 	add	hl, hl
      001F75 09               [11] 6310 	add	hl, bc
      001F76 29               [11] 6311 	add	hl, hl
      001F77 29               [11] 6312 	add	hl, hl
      001F78 EB               [ 4] 6313 	ex	de, hl
                                   6314 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      001F79 21r00r00         [10] 6315 	ld	hl, #_playfield
      001F7C 19               [11] 6316 	add	hl, de
      001F7D EB               [ 4] 6317 	ex	de, hl
      001F7E 3Ar02r00         [13] 6318 	ld	a,(#_line + 0)
      001F81 C6 03            [ 7] 6319 	add	a, #0x03
      001F83 4F               [ 4] 6320 	ld	c, a
      001F84 69               [ 4] 6321 	ld	l, c
      001F85 26 00            [ 7] 6322 	ld	h, #0x00
      001F87 19               [11] 6323 	add	hl, de
      001F88 7E               [ 7] 6324 	ld	a, (hl)
      001F89 B7               [ 4] 6325 	or	a, a
      001F8A 28 06            [12] 6326 	jr	Z, 00148$
                                   6327 ;src\/GameLogic.h:254: HideArrow();
      001F8C CDrE9r0C         [17] 6328 	call	_HideArrow
      001F8F C3r4Cr1C         [10] 6329 	jp	00150$
      001F92                       6330 00148$:
                                   6331 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001F92 41               [ 4] 6332 	ld	b, c
      001F93                       6333 00157$:
      001F93 78               [ 4] 6334 	ld	a, b
      001F94 D6 0C            [ 7] 6335 	sub	a, #0x0c
      001F96 D2r4Cr1C         [10] 6336 	jp	NC, 00150$
                                   6337 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F99 3Ar01r00         [13] 6338 	ld	a,(#_col + 0)
      001F9C 87               [ 4] 6339 	add	a, a
      001F9D 87               [ 4] 6340 	add	a, a
      001F9E 87               [ 4] 6341 	add	a, a
      001F9F 87               [ 4] 6342 	add	a, a
      001FA0 DD 77 FE         [19] 6343 	ld	-2 (ix), a
                                   6344 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001FA3 68               [ 4] 6345 	ld	l, b
      001FA4 26 00            [ 7] 6346 	ld	h, #0x00
      001FA6 19               [11] 6347 	add	hl, de
                                   6348 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001FA7 DD 7E FE         [19] 6349 	ld	a, -2 (ix)
      001FAA C6 50            [ 7] 6350 	add	a, #0x50
      001FAC DD 77 FE         [19] 6351 	ld	-2 (ix), a
                                   6352 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001FAF 6E               [ 7] 6353 	ld	l, (hl)
      001FB0 78               [ 4] 6354 	ld	a, b
      001FB1 D6 0B            [ 7] 6355 	sub	a,#0x0b
      001FB3 20 16            [12] 6356 	jr	NZ, 00143$
      001FB5 B5               [ 4] 6357 	or	a,l
      001FB6 20 13            [12] 6358 	jr	NZ, 00143$
                                   6359 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001FB8 79               [ 4] 6360 	ld	a, c
      001FB9 87               [ 4] 6361 	add	a, a
      001FBA 87               [ 4] 6362 	add	a, a
      001FBB 87               [ 4] 6363 	add	a, a
      001FBC 87               [ 4] 6364 	add	a, a
      001FBD F5               [11] 6365 	push	af
      001FBE 33               [ 6] 6366 	inc	sp
      001FBF DD 7E FE         [19] 6367 	ld	a, -2 (ix)
      001FC2 F5               [11] 6368 	push	af
      001FC3 33               [ 6] 6369 	inc	sp
      001FC4 CDr4Er0C         [17] 6370 	call	_DrawArrow
      001FC7 F1               [10] 6371 	pop	af
                                   6372 ;src\/GameLogic.h:260: break;
      001FC8 C3r4Cr1C         [10] 6373 	jp	00150$
      001FCB                       6374 00143$:
                                   6375 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      001FCB 7D               [ 4] 6376 	ld	a, l
      001FCC B7               [ 4] 6377 	or	a, a
      001FCD 28 14            [12] 6378 	jr	Z, 00158$
                                   6379 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      001FCF 79               [ 4] 6380 	ld	a, c
      001FD0 3D               [ 4] 6381 	dec	a
      001FD1 87               [ 4] 6382 	add	a, a
      001FD2 87               [ 4] 6383 	add	a, a
      001FD3 87               [ 4] 6384 	add	a, a
      001FD4 87               [ 4] 6385 	add	a, a
      001FD5 F5               [11] 6386 	push	af
      001FD6 33               [ 6] 6387 	inc	sp
      001FD7 DD 7E FE         [19] 6388 	ld	a, -2 (ix)
      001FDA F5               [11] 6389 	push	af
      001FDB 33               [ 6] 6390 	inc	sp
      001FDC CDr4Er0C         [17] 6391 	call	_DrawArrow
      001FDF F1               [10] 6392 	pop	af
                                   6393 ;src\/GameLogic.h:264: break;
      001FE0 C3r4Cr1C         [10] 6394 	jp	00150$
      001FE3                       6395 00158$:
                                   6396 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001FE3 04               [ 4] 6397 	inc	b
      001FE4 48               [ 4] 6398 	ld	c, b
      001FE5 18 AC            [12] 6399 	jr	00157$
      001FE7                       6400 00152$:
                                   6401 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      001FE7 11 0C 0C         [10] 6402 	ld	de, #0x0c0c
      001FEA D5               [11] 6403 	push	de
      001FEB 21rFFr1F         [10] 6404 	ld	hl, #___str_6
      001FEE E5               [11] 6405 	push	hl
      001FEF CDrC8r07         [17] 6406 	call	_DrawString
      001FF2 F1               [10] 6407 	pop	af
                                   6408 ;src\/GameLogic.h:276: Wait(60 * 3);
      001FF3 21 B4 00         [10] 6409 	ld	hl, #0x00b4
      001FF6 E3               [19] 6410 	ex	(sp),hl
      001FF7 CDr00r00         [17] 6411 	call	_Wait
                                   6412 ;src\/GameLogic.h:278: }
      001FFA DD F9            [10] 6413 	ld	sp,ix
      001FFC DD E1            [14] 6414 	pop	ix
      001FFE C9               [10] 6415 	ret
      001FFF                       6416 ___str_6:
      001FFF 47 41 4D 45 20 4F 56  6417 	.ascii "GAME OVER"
             45 52
      002008 00                    6418 	.db 0x00
                                   6419 ;src\/GameLogic.h:280: void TestCase() {
                                   6420 ;	---------------------------------
                                   6421 ; Function TestCase
                                   6422 ; ---------------------------------
      002009                       6423 _TestCase::
                                   6424 ;src\/GameLogic.h:281: playfield[2][ 8] = TILE_GREEN;
      002009 21r20r00         [10] 6425 	ld	hl, #(_playfield + 0x0020)
      00200C 36 04            [10] 6426 	ld	(hl), #0x04
                                   6427 ;src\/GameLogic.h:282: playfield[2][ 9] = TILE_BLUE;
      00200E 21r21r00         [10] 6428 	ld	hl, #(_playfield + 0x0021)
      002011 36 0C            [10] 6429 	ld	(hl), #0x0c
                                   6430 ;src\/GameLogic.h:284: playfield[0][10] = TILE_BLUE;
      002013 21r0Ar00         [10] 6431 	ld	hl, #(_playfield + 0x000a)
      002016 36 0C            [10] 6432 	ld	(hl), #0x0c
                                   6433 ;src\/GameLogic.h:285: playfield[1][10] = TILE_BLUE;
      002018 21r16r00         [10] 6434 	ld	hl, #(_playfield + 0x0016)
      00201B 36 0C            [10] 6435 	ld	(hl), #0x0c
                                   6436 ;src\/GameLogic.h:286: playfield[2][10] = TILE_RED;
      00201D 21r22r00         [10] 6437 	ld	hl, #(_playfield + 0x0022)
      002020 36 08            [10] 6438 	ld	(hl), #0x08
                                   6439 ;src\/GameLogic.h:287: playfield[4][10] = TILE_RED;
      002022 21r3Ar00         [10] 6440 	ld	hl, #(_playfield + 0x003a)
      002025 36 08            [10] 6441 	ld	(hl), #0x08
                                   6442 ;src\/GameLogic.h:288: playfield[5][10] = TILE_BLUE;
      002027 21r46r00         [10] 6443 	ld	hl, #(_playfield + 0x0046)
      00202A 36 0C            [10] 6444 	ld	(hl), #0x0c
                                   6445 ;src\/GameLogic.h:290: playfield[0][11] = TILE_GREEN;
      00202C 21r0Br00         [10] 6446 	ld	hl, #(_playfield + 0x000b)
      00202F 36 04            [10] 6447 	ld	(hl), #0x04
                                   6448 ;src\/GameLogic.h:291: playfield[1][11] = TILE_GREEN;
      002031 21r17r00         [10] 6449 	ld	hl, #(_playfield + 0x0017)
      002034 36 04            [10] 6450 	ld	(hl), #0x04
                                   6451 ;src\/GameLogic.h:292: playfield[2][11] = TILE_RED;
      002036 21r23r00         [10] 6452 	ld	hl, #(_playfield + 0x0023)
      002039 36 08            [10] 6453 	ld	(hl), #0x08
                                   6454 ;src\/GameLogic.h:293: playfield[3][11] = TILE_BLUE;
      00203B 21r2Fr00         [10] 6455 	ld	hl, #(_playfield + 0x002f)
      00203E 36 0C            [10] 6456 	ld	(hl), #0x0c
                                   6457 ;src\/GameLogic.h:294: playfield[4][11] = TILE_RED;
      002040 21r3Br00         [10] 6458 	ld	hl, #(_playfield + 0x003b)
      002043 36 08            [10] 6459 	ld	(hl), #0x08
                                   6460 ;src\/GameLogic.h:295: playfield[5][11] = TILE_RED;
      002045 21r47r00         [10] 6461 	ld	hl, #(_playfield + 0x0047)
      002048 36 08            [10] 6462 	ld	(hl), #0x08
                                   6463 ;src\/GameLogic.h:297: topPiece = TILE_BLUE;
      00204A 3E 0C            [ 7] 6464 	ld	a, #0x0c
      00204C 32r90r00         [13] 6465 	ld	(#_topPiece), a
                                   6466 ;src\/GameLogic.h:298: midPiece = TILE_RED;
      00204F 3E 08            [ 7] 6467 	ld	a, #0x08
      002051 32r91r00         [13] 6468 	ld	(#_midPiece), a
                                   6469 ;src\/GameLogic.h:299: bottomPiece = TILE_YELLOW;
      002054 3E 14            [ 7] 6470 	ld	a, #0x14
      002056 32r92r00         [13] 6471 	ld	(#_bottomPiece), a
                                   6472 ;src\/GameLogic.h:300: }
      002059 C9               [10] 6473 	ret
                                   6474 ;src\/GameLogic.h:302: void InitGame() {
                                   6475 ;	---------------------------------
                                   6476 ; Function InitGame
                                   6477 ; ---------------------------------
      00205A                       6478 _InitGame::
                                   6479 ;src\/GameLogic.h:304: gameOver = FALSE;
      00205A 21r00r00         [10] 6480 	ld	hl, #_gameOver
      00205D 36 00            [10] 6481 	ld	(hl), #0x00
                                   6482 ;src\/GameLogic.h:305: line = INITIAL_LINE;
      00205F 21r02r00         [10] 6483 	ld	hl, #_line
      002062 36 00            [10] 6484 	ld	(hl), #0x00
                                   6485 ;src\/GameLogic.h:306: col = INITIAL_COL;
      002064 21r01r00         [10] 6486 	ld	hl, #_col
      002067 36 02            [10] 6487 	ld	(hl), #0x02
                                   6488 ;src\/GameLogic.h:307: blocksRemoved = 0;
      002069 21 00 00         [10] 6489 	ld	hl, #0x0000
      00206C 22r04r00         [16] 6490 	ld	(_blocksRemoved), hl
                                   6491 ;src\/GameLogic.h:308: level = 1;
      00206F 21r06r00         [10] 6492 	ld	hl, #_level
      002072 36 01            [10] 6493 	ld	(hl), #0x01
                                   6494 ;src\/GameLogic.h:309: newLevel = FALSE;
      002074 21r07r00         [10] 6495 	ld	hl, #_newLevel
      002077 36 00            [10] 6496 	ld	(hl), #0x00
                                   6497 ;src\/GameLogic.h:310: speed = 60;
      002079 21r93r00         [10] 6498 	ld	hl, #_speed
      00207C 36 3C            [10] 6499 	ld	(hl), #0x3c
                                   6500 ;src\/GameLogic.h:312: InitVRAM();
      00207E CDr2Br0E         [17] 6501 	call	_InitVRAM
                                   6502 ;src\/GameLogic.h:315: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002081 3Ar08r00         [13] 6503 	ld	a, (#_rndSeed + 0)
      002084 5F               [ 4] 6504 	ld	e, a
      002085 3A 9E FC         [13] 6505 	ld	a, (#_JIFFY + 0)
      002088 67               [ 4] 6506 	ld	h, a
      002089 2E 00            [ 7] 6507 	ld	l, #0x00
      00208B 55               [ 4] 6508 	ld	d, l
      00208C 06 08            [ 7] 6509 	ld	b, #0x08
      00208E                       6510 00133$:
      00208E 29               [11] 6511 	add	hl, hl
      00208F 30 01            [12] 6512 	jr	NC, 00134$
      002091 19               [11] 6513 	add	hl, de
      002092                       6514 00134$:
      002092 10 FA            [13] 6515 	djnz	00133$
      002094 7D               [ 4] 6516 	ld	a, l
      002095 C6 63            [ 7] 6517 	add	a, #0x63
      002097 4F               [ 4] 6518 	ld	c, a
      002098 3Ar08r00         [13] 6519 	ld	a, (#_rndSeed + 0)
      00209B 5F               [ 4] 6520 	ld	e, a
      00209C 3A 9E FC         [13] 6521 	ld	a, (#_JIFFY + 0)
      00209F 67               [ 4] 6522 	ld	h, a
      0020A0 2E 00            [ 7] 6523 	ld	l, #0x00
      0020A2 55               [ 4] 6524 	ld	d, l
      0020A3 06 08            [ 7] 6525 	ld	b, #0x08
      0020A5                       6526 00135$:
      0020A5 29               [11] 6527 	add	hl, hl
      0020A6 30 01            [12] 6528 	jr	NC, 00136$
      0020A8 19               [11] 6529 	add	hl, de
      0020A9                       6530 00136$:
      0020A9 10 FA            [13] 6531 	djnz	00135$
      0020AB 79               [ 4] 6532 	ld	a, c
      0020AC F5               [11] 6533 	push	af
      0020AD 7D               [ 4] 6534 	ld	a, l
      0020AE 33               [ 6] 6535 	inc	sp
      0020AF F5               [11] 6536 	push	af
      0020B0 33               [ 6] 6537 	inc	sp
      0020B1 3Ar08r00         [13] 6538 	ld	a,(#_rndSeed + 0)
      0020B4 F5               [11] 6539 	push	af
      0020B5 33               [ 6] 6540 	inc	sp
      0020B6 CDr50r00         [17] 6541 	call	_InitRnd
      0020B9 F1               [10] 6542 	pop	af
      0020BA 33               [ 6] 6543 	inc	sp
                                   6544 ;src\/GameLogic.h:318: RandomPiece();
      0020BB CDr0Fr1B         [17] 6545 	call	_RandomPiece
                                   6546 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020BE 0E 00            [ 7] 6547 	ld	c, #0x00
      0020C0                       6548 00107$:
      0020C0 79               [ 4] 6549 	ld	a, c
      0020C1 D6 0C            [ 7] 6550 	sub	a, #0x0c
      0020C3 30 20            [12] 6551 	jr	NC, 00102$
                                   6552 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020C5 06 00            [ 7] 6553 	ld	b, #0x00
      0020C7                       6554 00104$:
      0020C7 78               [ 4] 6555 	ld	a, b
      0020C8 D6 06            [ 7] 6556 	sub	a, #0x06
      0020CA 30 16            [12] 6557 	jr	NC, 00108$
                                   6558 ;src\/GameLogic.h:323: playfield[col][line] = EMPTY;
      0020CC 58               [ 4] 6559 	ld	e, b
      0020CD 16 00            [ 7] 6560 	ld	d, #0x00
      0020CF 6B               [ 4] 6561 	ld	l, e
      0020D0 62               [ 4] 6562 	ld	h, d
      0020D1 29               [11] 6563 	add	hl, hl
      0020D2 19               [11] 6564 	add	hl, de
      0020D3 29               [11] 6565 	add	hl, hl
      0020D4 29               [11] 6566 	add	hl, hl
      0020D5 11r00r00         [10] 6567 	ld	de, #_playfield
      0020D8 19               [11] 6568 	add	hl, de
      0020D9 59               [ 4] 6569 	ld	e, c
      0020DA 16 00            [ 7] 6570 	ld	d, #0x00
      0020DC 19               [11] 6571 	add	hl, de
      0020DD 36 00            [10] 6572 	ld	(hl), #0x00
                                   6573 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020DF 04               [ 4] 6574 	inc	b
      0020E0 18 E5            [12] 6575 	jr	00104$
      0020E2                       6576 00108$:
                                   6577 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020E2 0C               [ 4] 6578 	inc	c
      0020E3 18 DB            [12] 6579 	jr	00107$
      0020E5                       6580 00102$:
                                   6581 ;src\/GameLogic.h:328: TestCase();
      0020E5 CDr09r20         [17] 6582 	call	_TestCase
                                   6583 ;src\/GameLogic.h:330: DrawBackground();
      0020E8 CDr1Dr0C         [17] 6584 	call	_DrawBackground
                                   6585 ;src\/GameLogic.h:332: DrawPlayfield();
      0020EB CDrEFr11         [17] 6586 	call	_DrawPlayfield
                                   6587 ;src\/GameLogic.h:334: DrawScore();
      0020EE CDr86r0A         [17] 6588 	call	_DrawScore
                                   6589 ;src\/GameLogic.h:336: GameLoop();
                                   6590 ;src\/GameLogic.h:337: }
      0020F1 C3r2Fr1C         [10] 6591 	jp	_GameLoop
                                   6592 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6593 ;	---------------------------------
                                   6594 ; Function ChangeFontColor
                                   6595 ; ---------------------------------
      0020F4                       6596 _ChangeFontColor::
                                   6597 ;src\/Intro.h:4: FILVRM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0020F4 2A C9 F3         [16] 6598 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      0020F7 01 78 01         [10] 6599 	ld	bc, #0x0178
      0020FA 09               [11] 6600 	add	hl, bc
      0020FB FD 21 02 00      [14] 6601 	ld	iy, #2
      0020FF FD 39            [15] 6602 	add	iy, sp
      002101 FD 7E 00         [19] 6603 	ld	a, 0 (iy)
      002104 F5               [11] 6604 	push	af
      002105 33               [ 6] 6605 	inc	sp
      002106 11 00 03         [10] 6606 	ld	de, #0x0300
      002109 D5               [11] 6607 	push	de
      00210A E5               [11] 6608 	push	hl
      00210B CDr00r00         [17] 6609 	call	_FILVRM
      00210E F1               [10] 6610 	pop	af
      00210F F1               [10] 6611 	pop	af
      002110 33               [ 6] 6612 	inc	sp
                                   6613 ;src\/Intro.h:5: FILVRM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002111 2A C9 F3         [16] 6614 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      002114 01 78 09         [10] 6615 	ld	bc, #0x0978
      002117 09               [11] 6616 	add	hl, bc
      002118 FD 21 02 00      [14] 6617 	ld	iy, #2
      00211C FD 39            [15] 6618 	add	iy, sp
      00211E FD 7E 00         [19] 6619 	ld	a, 0 (iy)
      002121 F5               [11] 6620 	push	af
      002122 33               [ 6] 6621 	inc	sp
      002123 11 00 03         [10] 6622 	ld	de, #0x0300
      002126 D5               [11] 6623 	push	de
      002127 E5               [11] 6624 	push	hl
      002128 CDr00r00         [17] 6625 	call	_FILVRM
      00212B F1               [10] 6626 	pop	af
      00212C F1               [10] 6627 	pop	af
      00212D 33               [ 6] 6628 	inc	sp
                                   6629 ;src\/Intro.h:6: FILVRM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00212E 2A C9 F3         [16] 6630 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      002131 01 78 11         [10] 6631 	ld	bc, #0x1178
      002134 09               [11] 6632 	add	hl, bc
      002135 FD 21 02 00      [14] 6633 	ld	iy, #2
      002139 FD 39            [15] 6634 	add	iy, sp
      00213B FD 7E 00         [19] 6635 	ld	a, 0 (iy)
      00213E F5               [11] 6636 	push	af
      00213F 33               [ 6] 6637 	inc	sp
      002140 11 00 03         [10] 6638 	ld	de, #0x0300
      002143 D5               [11] 6639 	push	de
      002144 E5               [11] 6640 	push	hl
      002145 CDr00r00         [17] 6641 	call	_FILVRM
      002148 F1               [10] 6642 	pop	af
      002149 F1               [10] 6643 	pop	af
      00214A 33               [ 6] 6644 	inc	sp
                                   6645 ;src\/Intro.h:7: }
      00214B C9               [10] 6646 	ret
                                   6647 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6648 ;	---------------------------------
                                   6649 ; Function ScrollDownFont
                                   6650 ; ---------------------------------
      00214C                       6651 _ScrollDownFont::
      00214C DD E5            [15] 6652 	push	ix
      00214E DD 21 00 00      [14] 6653 	ld	ix,#0
      002152 DD 39            [15] 6654 	add	ix,sp
      002154 F5               [11] 6655 	push	af
      002155 F5               [11] 6656 	push	af
                                   6657 ;src\/Intro.h:10: word startVRAMAddr = MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8);
      002156 2A CB F3         [16] 6658 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      002159 01 78 09         [10] 6659 	ld	bc, #0x0978
      00215C 09               [11] 6660 	add	hl, bc
                                   6661 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00215D 4D               [ 4] 6662 	ld	c, l
      00215E 44               [ 4] 6663 	ld	b, h
      00215F 5D               [ 4] 6664 	ld	e, l
      002160 7C               [ 4] 6665 	ld	a, h
      002161 C6 03            [ 7] 6666 	add	a, #0x03
      002163 57               [ 4] 6667 	ld	d, a
      002164                       6668 00107$:
      002164 79               [ 4] 6669 	ld	a, c
      002165 93               [ 4] 6670 	sub	a, e
      002166 78               [ 4] 6671 	ld	a, b
      002167 9A               [ 4] 6672 	sbc	a, d
      002168 30 61            [12] 6673 	jr	NC, 00109$
                                   6674 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      00216A 33               [ 6] 6675 	inc	sp
      00216B 33               [ 6] 6676 	inc	sp
      00216C C5               [11] 6677 	push	bc
      00216D DD 7E FC         [19] 6678 	ld	a, -4 (ix)
      002170 C6 07            [ 7] 6679 	add	a, #0x07
      002172 6F               [ 4] 6680 	ld	l, a
      002173 DD 7E FD         [19] 6681 	ld	a, -3 (ix)
      002176 CE 00            [ 7] 6682 	adc	a, #0x00
      002178 DD 75 FE         [19] 6683 	ld	-2 (ix), l
      00217B DD 77 FF         [19] 6684 	ld	-1 (ix), a
      00217E                       6685 00104$:
      00217E DD 7E FF         [19] 6686 	ld	a, -1 (ix)
      002181 DD B6 FE         [19] 6687 	or	a, -2 (ix)
      002184 28 2C            [12] 6688 	jr	Z, 00101$
                                   6689 ;src\/Intro.h:27: value = RDVRM(j-1);
      002186 DD 6E FE         [19] 6690 	ld	l, -2 (ix)
      002189 DD 66 FF         [19] 6691 	ld	h, -1 (ix)
      00218C 2B               [ 6] 6692 	dec	hl
      00218D C5               [11] 6693 	push	bc
      00218E D5               [11] 6694 	push	de
      00218F CDr00r00         [17] 6695 	call	_RDVRM
      002192 AF               [ 4] 6696 	xor	a, a
      002193 F5               [11] 6697 	push	af
      002194 33               [ 6] 6698 	inc	sp
      002195 DD 6E FE         [19] 6699 	ld	l, -2 (ix)
      002198 DD 66 FF         [19] 6700 	ld	h, -1 (ix)
      00219B E5               [11] 6701 	push	hl
      00219C CDr00r00         [17] 6702 	call	_WRTVRM
      00219F F1               [10] 6703 	pop	af
      0021A0 33               [ 6] 6704 	inc	sp
      0021A1 D1               [10] 6705 	pop	de
      0021A2 C1               [10] 6706 	pop	bc
                                   6707 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0021A3 DD 6E FE         [19] 6708 	ld	l, -2 (ix)
      0021A6 DD 66 FF         [19] 6709 	ld	h, -1 (ix)
      0021A9 2B               [ 6] 6710 	dec	hl
      0021AA DD 75 FE         [19] 6711 	ld	-2 (ix), l
      0021AD DD 74 FF         [19] 6712 	ld	-1 (ix), h
      0021B0 18 CC            [12] 6713 	jr	00104$
      0021B2                       6714 00101$:
                                   6715 ;src\/Intro.h:31: WRTVRM(i, 0);
      0021B2 D5               [11] 6716 	push	de
      0021B3 AF               [ 4] 6717 	xor	a, a
      0021B4 F5               [11] 6718 	push	af
      0021B5 33               [ 6] 6719 	inc	sp
      0021B6 C5               [11] 6720 	push	bc
      0021B7 CDr00r00         [17] 6721 	call	_WRTVRM
      0021BA F1               [10] 6722 	pop	af
      0021BB 33               [ 6] 6723 	inc	sp
      0021BC D1               [10] 6724 	pop	de
                                   6725 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0021BD DD 7E FC         [19] 6726 	ld	a, -4 (ix)
      0021C0 C6 08            [ 7] 6727 	add	a, #0x08
      0021C2 4F               [ 4] 6728 	ld	c, a
      0021C3 DD 7E FD         [19] 6729 	ld	a, -3 (ix)
      0021C6 CE 00            [ 7] 6730 	adc	a, #0x00
      0021C8 47               [ 4] 6731 	ld	b, a
      0021C9 18 99            [12] 6732 	jr	00107$
      0021CB                       6733 00109$:
                                   6734 ;src\/Intro.h:35: }
      0021CB DD F9            [10] 6735 	ld	sp, ix
      0021CD DD E1            [14] 6736 	pop	ix
      0021CF C9               [10] 6737 	ret
                                   6738 ;src\/Intro.h:37: void Intro() {
                                   6739 ;	---------------------------------
                                   6740 ; Function Intro
                                   6741 ; ---------------------------------
      0021D0                       6742 _Intro::
                                   6743 ;src\/Intro.h:41: InitVRAM();
      0021D0 CDr2Br0E         [17] 6744 	call	_InitVRAM
                                   6745 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      0021D3 11 0B 0B         [10] 6746 	ld	de, #0x0b0b
      0021D6 D5               [11] 6747 	push	de
      0021D7 21r45r22         [10] 6748 	ld	hl, #___str_7
      0021DA E5               [11] 6749 	push	hl
      0021DB CDrC8r07         [17] 6750 	call	_DrawString
      0021DE F1               [10] 6751 	pop	af
      0021DF F1               [10] 6752 	pop	af
                                   6753 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      0021E0 11 09 0D         [10] 6754 	ld	de, #0x0d09
      0021E3 D5               [11] 6755 	push	de
      0021E4 21r4Fr22         [10] 6756 	ld	hl, #___str_8
      0021E7 E5               [11] 6757 	push	hl
      0021E8 CDrC8r07         [17] 6758 	call	_DrawString
      0021EB F1               [10] 6759 	pop	af
                                   6760 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      0021EC 26 F0            [ 7] 6761 	ld	h,#0xf0
      0021EE E3               [19] 6762 	ex	(sp),hl
      0021EF 33               [ 6] 6763 	inc	sp
      0021F0 CDrF4r20         [17] 6764 	call	_ChangeFontColor
      0021F3 33               [ 6] 6765 	inc	sp
                                   6766 ;src\/Intro.h:56: Wait(2 * 60);
      0021F4 21 78 00         [10] 6767 	ld	hl, #0x0078
      0021F7 E5               [11] 6768 	push	hl
      0021F8 CDr00r00         [17] 6769 	call	_Wait
      0021FB F1               [10] 6770 	pop	af
                                   6771 ;src\/Intro.h:58: while(counter++ < 20) {
      0021FC 0E 00            [ 7] 6772 	ld	c, #0x00
      0021FE                       6773 00112$:
      0021FE 79               [ 4] 6774 	ld	a, c
      0021FF D6 14            [ 7] 6775 	sub	a, #0x14
      002201 D0               [11] 6776 	ret	NC
      002202 0C               [ 4] 6777 	inc	c
                                   6778 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002203 21 9E FC         [10] 6779 	ld	hl, #_JIFFY
      002206 46               [ 7] 6780 	ld	b, (hl)
                                   6781 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002207                       6782 00101$:
      002207 58               [ 4] 6783 	ld	e, b
      002208 16 00            [ 7] 6784 	ld	d, #0x00
      00220A 2A 9E FC         [16] 6785 	ld	hl, (_JIFFY)
      00220D BF               [ 4] 6786 	cp	a, a
      00220E ED 52            [15] 6787 	sbc	hl, de
      002210 28 F5            [12] 6788 	jr	Z, 00101$
                                   6789 ;src\/Intro.h:63: if(counter == 15) {
      002212 79               [ 4] 6790 	ld	a, c
      002213 D6 0F            [ 7] 6791 	sub	a, #0x0f
      002215 20 0C            [12] 6792 	jr	NZ, 00110$
                                   6793 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002217 C5               [11] 6794 	push	bc
      002218 3E 40            [ 7] 6795 	ld	a, #0x40
      00221A F5               [11] 6796 	push	af
      00221B 33               [ 6] 6797 	inc	sp
      00221C CDrF4r20         [17] 6798 	call	_ChangeFontColor
      00221F 33               [ 6] 6799 	inc	sp
      002220 C1               [10] 6800 	pop	bc
      002221 18 DB            [12] 6801 	jr	00112$
      002223                       6802 00110$:
                                   6803 ;src\/Intro.h:66: else if(counter == 10) {
      002223 79               [ 4] 6804 	ld	a, c
      002224 D6 0A            [ 7] 6805 	sub	a, #0x0a
      002226 20 0C            [12] 6806 	jr	NZ, 00107$
                                   6807 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002228 C5               [11] 6808 	push	bc
      002229 3E 50            [ 7] 6809 	ld	a, #0x50
      00222B F5               [11] 6810 	push	af
      00222C 33               [ 6] 6811 	inc	sp
      00222D CDrF4r20         [17] 6812 	call	_ChangeFontColor
      002230 33               [ 6] 6813 	inc	sp
      002231 C1               [10] 6814 	pop	bc
      002232 18 CA            [12] 6815 	jr	00112$
      002234                       6816 00107$:
                                   6817 ;src\/Intro.h:69: else if(counter == 5) {
      002234 79               [ 4] 6818 	ld	a, c
      002235 D6 05            [ 7] 6819 	sub	a, #0x05
      002237 20 C5            [12] 6820 	jr	NZ, 00112$
                                   6821 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002239 C5               [11] 6822 	push	bc
      00223A 3E E0            [ 7] 6823 	ld	a, #0xe0
      00223C F5               [11] 6824 	push	af
      00223D 33               [ 6] 6825 	inc	sp
      00223E CDrF4r20         [17] 6826 	call	_ChangeFontColor
      002241 33               [ 6] 6827 	inc	sp
      002242 C1               [10] 6828 	pop	bc
                                   6829 ;src\/Intro.h:140: }
      002243 18 B9            [12] 6830 	jr	00112$
      002245                       6831 ___str_7:
      002245 41 20 47 41 4D 45 20  6832 	.ascii "A GAME BY"
             42 59
      00224E 00                    6833 	.db 0x00
      00224F                       6834 ___str_8:
      00224F 41 4E 44 52 45 20 42  6835 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      00225D 00                    6836 	.db 0x00
                                   6837 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   6838 ;	---------------------------------
                                   6839 ; Function SetBlock
                                   6840 ; ---------------------------------
      00225E                       6841 _SetBlock::
      00225E DD E5            [15] 6842 	push	ix
      002260 DD 21 00 00      [14] 6843 	ld	ix,#0
      002264 DD 39            [15] 6844 	add	ix,sp
                                   6845 ;src\/Title.h:15: WRTVRM(MSX_modedata_screen2.name + col + (line * 32), tileNumber);
      002266 2A C7 F3         [16] 6846 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002269 DD 4E 04         [19] 6847 	ld	c, 4 (ix)
      00226C 06 00            [ 7] 6848 	ld	b, #0x00
      00226E 09               [11] 6849 	add	hl, bc
      00226F EB               [ 4] 6850 	ex	de, hl
      002270 DD 6E 05         [19] 6851 	ld	l, 5 (ix)
      002273 26 00            [ 7] 6852 	ld	h, #0x00
      002275 29               [11] 6853 	add	hl, hl
      002276 29               [11] 6854 	add	hl, hl
      002277 29               [11] 6855 	add	hl, hl
      002278 29               [11] 6856 	add	hl, hl
      002279 29               [11] 6857 	add	hl, hl
      00227A 19               [11] 6858 	add	hl, de
      00227B DD 7E 06         [19] 6859 	ld	a, 6 (ix)
      00227E F5               [11] 6860 	push	af
      00227F 33               [ 6] 6861 	inc	sp
      002280 E5               [11] 6862 	push	hl
      002281 CDr00r00         [17] 6863 	call	_WRTVRM
      002284 F1               [10] 6864 	pop	af
      002285 33               [ 6] 6865 	inc	sp
                                   6866 ;src\/Title.h:16: }
      002286 DD E1            [14] 6867 	pop	ix
      002288 C9               [10] 6868 	ret
                                   6869 ;src\/Title.h:18: void TitleScreen() {
                                   6870 ;	---------------------------------
                                   6871 ; Function TitleScreen
                                   6872 ; ---------------------------------
      002289                       6873 _TitleScreen::
      002289 DD E5            [15] 6874 	push	ix
      00228B DD 21 00 00      [14] 6875 	ld	ix,#0
      00228F DD 39            [15] 6876 	add	ix,sp
      002291 21 EB FF         [10] 6877 	ld	hl, #-21
      002294 39               [11] 6878 	add	hl, sp
      002295 F9               [ 6] 6879 	ld	sp, hl
                                   6880 ;src\/Title.h:19: byte colorIndex = 0;
      002296 0E 00            [ 7] 6881 	ld	c, #0x00
                                   6882 ;src\/Title.h:50: const char blocks[] = {
      002298 21 00 00         [10] 6883 	ld	hl, #0
      00229B 39               [11] 6884 	add	hl, sp
      00229C EB               [ 4] 6885 	ex	de, hl
      00229D 3E 8E            [ 7] 6886 	ld	a, #0x8e
      00229F 12               [ 7] 6887 	ld	(de), a
      0022A0 6B               [ 4] 6888 	ld	l, e
      0022A1 62               [ 4] 6889 	ld	h, d
      0022A2 23               [ 6] 6890 	inc	hl
      0022A3 36 8F            [10] 6891 	ld	(hl), #0x8f
      0022A5 6B               [ 4] 6892 	ld	l, e
      0022A6 62               [ 4] 6893 	ld	h, d
      0022A7 23               [ 6] 6894 	inc	hl
      0022A8 23               [ 6] 6895 	inc	hl
      0022A9 36 90            [10] 6896 	ld	(hl), #0x90
      0022AB 6B               [ 4] 6897 	ld	l, e
      0022AC 62               [ 4] 6898 	ld	h, d
      0022AD 23               [ 6] 6899 	inc	hl
      0022AE 23               [ 6] 6900 	inc	hl
      0022AF 23               [ 6] 6901 	inc	hl
      0022B0 36 91            [10] 6902 	ld	(hl), #0x91
      0022B2 21 04 00         [10] 6903 	ld	hl, #0x0004
      0022B5 19               [11] 6904 	add	hl, de
      0022B6 36 92            [10] 6905 	ld	(hl), #0x92
      0022B8 21 05 00         [10] 6906 	ld	hl, #0x0005
      0022BB 19               [11] 6907 	add	hl, de
      0022BC 36 93            [10] 6908 	ld	(hl), #0x93
      0022BE 21 06 00         [10] 6909 	ld	hl, #0x0006
      0022C1 19               [11] 6910 	add	hl, de
      0022C2 36 94            [10] 6911 	ld	(hl), #0x94
                                   6912 ;src\/Title.h:60: const char colors[] = { A, C, E, G }; // last item will be ignored
      0022C4 21 07 00         [10] 6913 	ld	hl, #7
      0022C7 39               [11] 6914 	add	hl, sp
      0022C8 DD 75 F6         [19] 6915 	ld	-10 (ix), l
      0022CB DD 74 F7         [19] 6916 	ld	-9 (ix), h
      0022CE 36 8E            [10] 6917 	ld	(hl), #0x8e
      0022D0 DD 6E F6         [19] 6918 	ld	l, -10 (ix)
      0022D3 DD 66 F7         [19] 6919 	ld	h, -9 (ix)
      0022D6 23               [ 6] 6920 	inc	hl
      0022D7 36 90            [10] 6921 	ld	(hl), #0x90
      0022D9 DD 6E F6         [19] 6922 	ld	l, -10 (ix)
      0022DC DD 66 F7         [19] 6923 	ld	h, -9 (ix)
      0022DF 23               [ 6] 6924 	inc	hl
      0022E0 23               [ 6] 6925 	inc	hl
      0022E1 36 92            [10] 6926 	ld	(hl), #0x92
      0022E3 DD 6E F6         [19] 6927 	ld	l, -10 (ix)
      0022E6 DD 66 F7         [19] 6928 	ld	h, -9 (ix)
      0022E9 23               [ 6] 6929 	inc	hl
      0022EA 23               [ 6] 6930 	inc	hl
      0022EB 23               [ 6] 6931 	inc	hl
      0022EC 36 94            [10] 6932 	ld	(hl), #0x94
                                   6933 ;src\/Title.h:63: InitVRAM();
      0022EE C5               [11] 6934 	push	bc
      0022EF D5               [11] 6935 	push	de
      0022F0 CDr2Br0E         [17] 6936 	call	_InitVRAM
      0022F3 D1               [10] 6937 	pop	de
      0022F4 C1               [10] 6938 	pop	bc
                                   6939 ;src\/Title.h:65: LDIRVM(MSX_modedata_screen2.name, title, 32 * 24);
      0022F5 2A C7 F3         [16] 6940 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0022F8 C5               [11] 6941 	push	bc
      0022F9 D5               [11] 6942 	push	de
      0022FA 11 00 03         [10] 6943 	ld	de, #0x0300
      0022FD D5               [11] 6944 	push	de
      0022FE 11r78r24         [10] 6945 	ld	de, #_TitleScreen_title_65536_275
      002301 D5               [11] 6946 	push	de
      002302 E5               [11] 6947 	push	hl
      002303 CDr00r00         [17] 6948 	call	_LDIRVM
      002306 21 06 00         [10] 6949 	ld	hl, #6
      002309 39               [11] 6950 	add	hl, sp
      00230A F9               [ 6] 6951 	ld	sp, hl
      00230B 11 05 0D         [10] 6952 	ld	de, #0x0d05
      00230E D5               [11] 6953 	push	de
      00230F 21r78r27         [10] 6954 	ld	hl, #___str_9
      002312 E5               [11] 6955 	push	hl
      002313 CDrC8r07         [17] 6956 	call	_DrawString
      002316 F1               [10] 6957 	pop	af
      002317 26 17            [ 7] 6958 	ld	h,#0x17
      002319 E3               [19] 6959 	ex	(sp),hl
      00231A 33               [ 6] 6960 	inc	sp
      00231B AF               [ 4] 6961 	xor	a, a
      00231C F5               [11] 6962 	push	af
      00231D 33               [ 6] 6963 	inc	sp
      00231E 21r8Fr27         [10] 6964 	ld	hl, #___str_10
      002321 E5               [11] 6965 	push	hl
      002322 CDrC8r07         [17] 6966 	call	_DrawString
      002325 F1               [10] 6967 	pop	af
      002326 F1               [10] 6968 	pop	af
      002327 11 19 17         [10] 6969 	ld	de, #0x1719
      00232A D5               [11] 6970 	push	de
      00232B 21rA4r27         [10] 6971 	ld	hl, #___str_11
      00232E E5               [11] 6972 	push	hl
      00232F CDrC8r07         [17] 6973 	call	_DrawString
      002332 F1               [10] 6974 	pop	af
      002333 F1               [10] 6975 	pop	af
      002334 D1               [10] 6976 	pop	de
      002335 C1               [10] 6977 	pop	bc
                                   6978 ;src\/Title.h:71: while(TRUE) {
      002336                       6979 00120$:
                                   6980 ;src\/Title.h:72: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002336 DD 36 FD 00      [19] 6981 	ld	-3 (ix), #0
                                   6982 ;src\/Title.h:76: word counter = 0;
      00233A AF               [ 4] 6983 	xor	a, a
      00233B DD 77 FE         [19] 6984 	ld	-2 (ix), a
      00233E DD 77 FF         [19] 6985 	ld	-1 (ix), a
                                   6986 ;src\/Title.h:86: do {
      002341                       6987 00106$:
                                   6988 ;src\/Title.h:93: col_1 = GetRandomInInterval(31, 0b00011111);
      002341 C5               [11] 6989 	push	bc
      002342 D5               [11] 6990 	push	de
      002343 11 1F 1F         [10] 6991 	ld	de, #0x1f1f
      002346 D5               [11] 6992 	push	de
      002347 CDrD9r00         [17] 6993 	call	_GetRandomInInterval
      00234A F1               [10] 6994 	pop	af
                                   6995 ;src\/Title.h:94: line_1 = GetRandomInInterval(7, 0b00000111);
      00234B DD 75 F8         [19] 6996 	ld	-8 (ix), l
      00234E 11 07 07         [10] 6997 	ld	de, #0x0707
      002351 D5               [11] 6998 	push	de
      002352 CDrD9r00         [17] 6999 	call	_GetRandomInInterval
      002355 F1               [10] 7000 	pop	af
      002356 D1               [10] 7001 	pop	de
      002357 C1               [10] 7002 	pop	bc
      002358 DD 75 F9         [19] 7003 	ld	-7 (ix), l
                                   7004 ;src\/Title.h:97: value = RDVRM(MSX_modedata_screen2.name + col_1 + (line_1 * 32));
      00235B 2A C7 F3         [16] 7005 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00235E DD 7E F8         [19] 7006 	ld	a, -8 (ix)
      002361 06 00            [ 7] 7007 	ld	b, #0x00
      002363 85               [ 4] 7008 	add	a, l
      002364 DD 77 FB         [19] 7009 	ld	-5 (ix), a
      002367 78               [ 4] 7010 	ld	a, b
      002368 8C               [ 4] 7011 	adc	a, h
      002369 DD 77 FC         [19] 7012 	ld	-4 (ix), a
      00236C DD 6E F9         [19] 7013 	ld	l, -7 (ix)
      00236F 26 00            [ 7] 7014 	ld	h, #0x00
      002371 29               [11] 7015 	add	hl, hl
      002372 29               [11] 7016 	add	hl, hl
      002373 29               [11] 7017 	add	hl, hl
      002374 29               [11] 7018 	add	hl, hl
      002375 29               [11] 7019 	add	hl, hl
      002376 7D               [ 4] 7020 	ld	a, l
      002377 DD 86 FB         [19] 7021 	add	a, -5 (ix)
      00237A 6F               [ 4] 7022 	ld	l, a
      00237B 7C               [ 4] 7023 	ld	a, h
      00237C DD 8E FC         [19] 7024 	adc	a, -4 (ix)
      00237F 67               [ 4] 7025 	ld	h, a
      002380 C5               [11] 7026 	push	bc
      002381 D5               [11] 7027 	push	de
      002382 CDr00r00         [17] 7028 	call	_RDVRM
      002385 D1               [10] 7029 	pop	de
      002386 C1               [10] 7030 	pop	bc
      002387 DD 75 FA         [19] 7031 	ld	-6 (ix), l
                                   7032 ;src\/Title.h:100: if(counter++ > 1000) {
      00238A DD 46 FE         [19] 7033 	ld	b, -2 (ix)
      00238D DD 6E FF         [19] 7034 	ld	l, -1 (ix)
      002390 DD 34 FE         [23] 7035 	inc	-2 (ix)
      002393 20 03            [12] 7036 	jr	NZ, 00192$
      002395 DD 34 FF         [23] 7037 	inc	-1 (ix)
      002398                       7038 00192$:
      002398 3E E8            [ 7] 7039 	ld	a, #0xe8
      00239A B8               [ 4] 7040 	cp	a, b
      00239B 3E 03            [ 7] 7041 	ld	a, #0x03
      00239D 9D               [ 4] 7042 	sbc	a, l
      00239E 30 0F            [12] 7043 	jr	NC, 00107$
                                   7044 ;src\/Title.h:101: colorIndex++;
      0023A0 0C               [ 4] 7045 	inc	c
                                   7046 ;src\/Title.h:102: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0023A1 79               [ 4] 7047 	ld	a, c
      0023A2 D6 03            [ 7] 7048 	sub	a, #0x03
      0023A4 38 02            [12] 7049 	jr	C, 00102$
      0023A6 0E 00            [ 7] 7050 	ld	c, #0x00
      0023A8                       7051 00102$:
                                   7052 ;src\/Title.h:117: counter = 0;
      0023A8 AF               [ 4] 7053 	xor	a, a
      0023A9 DD 77 FE         [19] 7054 	ld	-2 (ix), a
      0023AC DD 77 FF         [19] 7055 	ld	-1 (ix), a
      0023AF                       7056 00107$:
                                   7057 ;src\/Title.h:120: while (value == EMPTY || value == colors[colorIndex + 1]);
      0023AF DD 7E FA         [19] 7058 	ld	a, -6 (ix)
      0023B2 B7               [ 4] 7059 	or	a, a
      0023B3 28 8C            [12] 7060 	jr	Z, 00106$
      0023B5 79               [ 4] 7061 	ld	a, c
      0023B6 3C               [ 4] 7062 	inc	a
      0023B7 F5               [11] 7063 	push	af
      0023B8 17               [ 4] 7064 	rla
      0023B9 9F               [ 4] 7065 	sbc	a, a
      0023BA 47               [ 4] 7066 	ld	b, a
      0023BB F1               [10] 7067 	pop	af
      0023BC DD 86 F6         [19] 7068 	add	a, -10 (ix)
      0023BF DD 77 FB         [19] 7069 	ld	-5 (ix), a
      0023C2 78               [ 4] 7070 	ld	a, b
      0023C3 DD 8E F7         [19] 7071 	adc	a, -9 (ix)
      0023C6 DD 77 FC         [19] 7072 	ld	-4 (ix), a
      0023C9 DD 6E FB         [19] 7073 	ld	l, -5 (ix)
      0023CC DD 66 FC         [19] 7074 	ld	h, -4 (ix)
      0023CF 46               [ 7] 7075 	ld	b, (hl)
      0023D0 DD 7E FA         [19] 7076 	ld	a, -6 (ix)
      0023D3 90               [ 4] 7077 	sub	a, b
      0023D4 CAr41r23         [10] 7078 	jp	Z,00106$
                                   7079 ;src\/Title.h:136: for(byte i=0; i < 10 + 0; i++) {
      0023D7 06 00            [ 7] 7080 	ld	b, #0x00
      0023D9                       7081 00123$:
      0023D9 78               [ 4] 7082 	ld	a, b
      0023DA D6 0A            [ 7] 7083 	sub	a, #0x0a
      0023DC 30 79            [12] 7084 	jr	NC, 00118$
                                   7085 ;src\/Title.h:138: word lastJiffy = JIFFY;
      0023DE 2A 9E FC         [16] 7086 	ld	hl, (_JIFFY)
      0023E1 DD 75 FE         [19] 7087 	ld	-2 (ix), l
      0023E4 DD 74 FF         [19] 7088 	ld	-1 (ix), h
                                   7089 ;src\/Title.h:139: while (JIFFY == lastJiffy) {
      0023E7                       7090 00109$:
      0023E7 FD 21 9E FC      [14] 7091 	ld	iy, #_JIFFY
      0023EB FD 7E 00         [19] 7092 	ld	a, 0 (iy)
      0023EE DD 96 FE         [19] 7093 	sub	a, -2 (ix)
      0023F1 20 08            [12] 7094 	jr	NZ, 00194$
      0023F3 FD 7E 01         [19] 7095 	ld	a, 1 (iy)
      0023F6 DD 96 FF         [19] 7096 	sub	a, -1 (ix)
      0023F9 28 EC            [12] 7097 	jr	Z, 00109$
      0023FB                       7098 00194$:
                                   7099 ;src\/Title.h:144: SetBlock(col_1, line_1, blocks[index]);
      0023FB DD 6E FD         [19] 7100 	ld	l, -3 (ix)
      0023FE 26 00            [ 7] 7101 	ld	h, #0x00
      002400 19               [11] 7102 	add	hl, de
      002401 7E               [ 7] 7103 	ld	a, (hl)
      002402 C5               [11] 7104 	push	bc
      002403 D5               [11] 7105 	push	de
      002404 F5               [11] 7106 	push	af
      002405 33               [ 6] 7107 	inc	sp
      002406 DD 66 F9         [19] 7108 	ld	h, -7 (ix)
      002409 DD 6E F8         [19] 7109 	ld	l, -8 (ix)
      00240C E5               [11] 7110 	push	hl
      00240D CDr5Er22         [17] 7111 	call	_SetBlock
      002410 F1               [10] 7112 	pop	af
      002411 33               [ 6] 7113 	inc	sp
      002412 D1               [10] 7114 	pop	de
      002413 C1               [10] 7115 	pop	bc
                                   7116 ;src\/Title.h:148: if(index++ >= sizeof(blocks)) index = 0;
      002414 DD 7E FD         [19] 7117 	ld	a, -3 (ix)
      002417 DD 34 FD         [23] 7118 	inc	-3 (ix)
      00241A D6 07            [ 7] 7119 	sub	a, #0x07
      00241C 38 04            [12] 7120 	jr	C, 00113$
      00241E DD 36 FD 00      [19] 7121 	ld	-3 (ix), #0
      002422                       7122 00113$:
                                   7123 ;src\/Title.h:161: spaceBar = GTTRIG(TRIG_Spacebar);
      002422 C5               [11] 7124 	push	bc
      002423 D5               [11] 7125 	push	de
      002424 2E 00            [ 7] 7126 	ld	l, #0x00
      002426 CDr00r00         [17] 7127 	call	_GTTRIG
                                   7128 ;src\/Title.h:162: btn1 = GTTRIG(TRIG_Joy1_A);
      002429 DD 75 FF         [19] 7129 	ld	-1 (ix), l
      00242C 2E 01            [ 7] 7130 	ld	l, #0x01
      00242E CDr00r00         [17] 7131 	call	_GTTRIG
      002431 D1               [10] 7132 	pop	de
      002432 C1               [10] 7133 	pop	bc
                                   7134 ;src\/Title.h:163: btn2 = GTTRIG(TRIG_Joy1_B);
      002433 E5               [11] 7135 	push	hl
      002434 C5               [11] 7136 	push	bc
      002435 D5               [11] 7137 	push	de
      002436 2E 03            [ 7] 7138 	ld	l, #0x03
      002438 CDr00r00         [17] 7139 	call	_GTTRIG
      00243B 7D               [ 4] 7140 	ld	a, l
      00243C D1               [10] 7141 	pop	de
      00243D C1               [10] 7142 	pop	bc
      00243E E1               [10] 7143 	pop	hl
      00243F 67               [ 4] 7144 	ld	h, a
                                   7145 ;src\/Title.h:165: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002440 DD 7E FF         [19] 7146 	ld	a, -1 (ix)
      002443 3C               [ 4] 7147 	inc	a
      002444 28 06            [12] 7148 	jr	Z, 00114$
      002446 2C               [ 4] 7149 	inc	l
      002447 28 03            [12] 7150 	jr	Z, 00114$
      002449 24               [ 4] 7151 	inc	h
      00244A 20 08            [12] 7152 	jr	NZ, 00124$
      00244C                       7153 00114$:
                                   7154 ;src\/Title.h:166: rndSeed = JIFFY;
      00244C 3A 9E FC         [13] 7155 	ld	a,(#_JIFFY + 0)
      00244F 32r08r00         [13] 7156 	ld	(#_rndSeed), a
                                   7157 ;src\/Title.h:167: return;
      002452 18 1F            [12] 7158 	jr	00125$
      002454                       7159 00124$:
                                   7160 ;src\/Title.h:136: for(byte i=0; i < 10 + 0; i++) {
      002454 04               [ 4] 7161 	inc	b
      002455 18 82            [12] 7162 	jr	00123$
      002457                       7163 00118$:
                                   7164 ;src\/Title.h:171: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002457 DD 6E FB         [19] 7165 	ld	l, -5 (ix)
      00245A DD 66 FC         [19] 7166 	ld	h, -4 (ix)
      00245D 7E               [ 7] 7167 	ld	a, (hl)
      00245E C5               [11] 7168 	push	bc
      00245F D5               [11] 7169 	push	de
      002460 F5               [11] 7170 	push	af
      002461 33               [ 6] 7171 	inc	sp
      002462 DD 66 F9         [19] 7172 	ld	h, -7 (ix)
      002465 DD 6E F8         [19] 7173 	ld	l, -8 (ix)
      002468 E5               [11] 7174 	push	hl
      002469 CDr5Er22         [17] 7175 	call	_SetBlock
      00246C F1               [10] 7176 	pop	af
      00246D 33               [ 6] 7177 	inc	sp
      00246E D1               [10] 7178 	pop	de
      00246F C1               [10] 7179 	pop	bc
      002470 C3r36r23         [10] 7180 	jp	00120$
      002473                       7181 00125$:
                                   7182 ;src\/Title.h:174: }
      002473 DD F9            [10] 7183 	ld	sp, ix
      002475 DD E1            [14] 7184 	pop	ix
      002477 C9               [10] 7185 	ret
      002478                       7186 _TitleScreen_title_65536_275:
      002478 00                    7187 	.db #0x00	; 0
      002479 00                    7188 	.db #0x00	; 0
      00247A 00                    7189 	.db #0x00	; 0
      00247B 00                    7190 	.db #0x00	; 0
      00247C 8E                    7191 	.db #0x8e	; 142
      00247D 8E                    7192 	.db #0x8e	; 142
      00247E 8E                    7193 	.db #0x8e	; 142
      00247F 8E                    7194 	.db #0x8e	; 142
      002480 00                    7195 	.db #0x00	; 0
      002481 8E                    7196 	.db #0x8e	; 142
      002482 8E                    7197 	.db #0x8e	; 142
      002483 8E                    7198 	.db #0x8e	; 142
      002484 8E                    7199 	.db #0x8e	; 142
      002485 8E                    7200 	.db #0x8e	; 142
      002486 8E                    7201 	.db #0x8e	; 142
      002487 00                    7202 	.db #0x00	; 0
      002488 00                    7203 	.db #0x00	; 0
      002489 8E                    7204 	.db #0x8e	; 142
      00248A 8E                    7205 	.db #0x8e	; 142
      00248B 00                    7206 	.db #0x00	; 0
      00248C 00                    7207 	.db #0x00	; 0
      00248D 00                    7208 	.db #0x00	; 0
      00248E 8E                    7209 	.db #0x8e	; 142
      00248F 8E                    7210 	.db #0x8e	; 142
      002490 00                    7211 	.db #0x00	; 0
      002491 00                    7212 	.db #0x00	; 0
      002492 00                    7213 	.db #0x00	; 0
      002493 00                    7214 	.db #0x00	; 0
      002494 8E                    7215 	.db #0x8e	; 142
      002495 8E                    7216 	.db #0x8e	; 142
      002496 8E                    7217 	.db #0x8e	; 142
      002497 8E                    7218 	.db #0x8e	; 142
      002498 00                    7219 	.db #0x00	; 0
      002499 00                    7220 	.db #0x00	; 0
      00249A 00                    7221 	.db #0x00	; 0
      00249B 8E                    7222 	.db #0x8e	; 142
      00249C 8E                    7223 	.db #0x8e	; 142
      00249D 8E                    7224 	.db #0x8e	; 142
      00249E 8E                    7225 	.db #0x8e	; 142
      00249F 8E                    7226 	.db #0x8e	; 142
      0024A0 00                    7227 	.db #0x00	; 0
      0024A1 8E                    7228 	.db #0x8e	; 142
      0024A2 8E                    7229 	.db #0x8e	; 142
      0024A3 00                    7230 	.db #0x00	; 0
      0024A4 00                    7231 	.db #0x00	; 0
      0024A5 00                    7232 	.db #0x00	; 0
      0024A6 8E                    7233 	.db #0x8e	; 142
      0024A7 8E                    7234 	.db #0x8e	; 142
      0024A8 00                    7235 	.db #0x00	; 0
      0024A9 00                    7236 	.db #0x00	; 0
      0024AA 8E                    7237 	.db #0x8e	; 142
      0024AB 8E                    7238 	.db #0x8e	; 142
      0024AC 00                    7239 	.db #0x00	; 0
      0024AD 00                    7240 	.db #0x00	; 0
      0024AE 8E                    7241 	.db #0x8e	; 142
      0024AF 8E                    7242 	.db #0x8e	; 142
      0024B0 00                    7243 	.db #0x00	; 0
      0024B1 00                    7244 	.db #0x00	; 0
      0024B2 00                    7245 	.db #0x00	; 0
      0024B3 8E                    7246 	.db #0x8e	; 142
      0024B4 8E                    7247 	.db #0x8e	; 142
      0024B5 8E                    7248 	.db #0x8e	; 142
      0024B6 8E                    7249 	.db #0x8e	; 142
      0024B7 8E                    7250 	.db #0x8e	; 142
      0024B8 00                    7251 	.db #0x00	; 0
      0024B9 00                    7252 	.db #0x00	; 0
      0024BA 8E                    7253 	.db #0x8e	; 142
      0024BB 8E                    7254 	.db #0x8e	; 142
      0024BC 8E                    7255 	.db #0x8e	; 142
      0024BD 00                    7256 	.db #0x00	; 0
      0024BE 8E                    7257 	.db #0x8e	; 142
      0024BF 8E                    7258 	.db #0x8e	; 142
      0024C0 00                    7259 	.db #0x00	; 0
      0024C1 8E                    7260 	.db #0x8e	; 142
      0024C2 8E                    7261 	.db #0x8e	; 142
      0024C3 00                    7262 	.db #0x00	; 0
      0024C4 00                    7263 	.db #0x00	; 0
      0024C5 00                    7264 	.db #0x00	; 0
      0024C6 8E                    7265 	.db #0x8e	; 142
      0024C7 8E                    7266 	.db #0x8e	; 142
      0024C8 00                    7267 	.db #0x00	; 0
      0024C9 00                    7268 	.db #0x00	; 0
      0024CA 00                    7269 	.db #0x00	; 0
      0024CB 8E                    7270 	.db #0x8e	; 142
      0024CC 8E                    7271 	.db #0x8e	; 142
      0024CD 00                    7272 	.db #0x00	; 0
      0024CE 8E                    7273 	.db #0x8e	; 142
      0024CF 8E                    7274 	.db #0x8e	; 142
      0024D0 00                    7275 	.db #0x00	; 0
      0024D1 00                    7276 	.db #0x00	; 0
      0024D2 8E                    7277 	.db #0x8e	; 142
      0024D3 8E                    7278 	.db #0x8e	; 142
      0024D4 8E                    7279 	.db #0x8e	; 142
      0024D5 00                    7280 	.db #0x00	; 0
      0024D6 8E                    7281 	.db #0x8e	; 142
      0024D7 8E                    7282 	.db #0x8e	; 142
      0024D8 00                    7283 	.db #0x00	; 0
      0024D9 8E                    7284 	.db #0x8e	; 142
      0024DA 8E                    7285 	.db #0x8e	; 142
      0024DB 8E                    7286 	.db #0x8e	; 142
      0024DC 00                    7287 	.db #0x00	; 0
      0024DD 00                    7288 	.db #0x00	; 0
      0024DE 8E                    7289 	.db #0x8e	; 142
      0024DF 8E                    7290 	.db #0x8e	; 142
      0024E0 00                    7291 	.db #0x00	; 0
      0024E1 8E                    7292 	.db #0x8e	; 142
      0024E2 8E                    7293 	.db #0x8e	; 142
      0024E3 00                    7294 	.db #0x00	; 0
      0024E4 00                    7295 	.db #0x00	; 0
      0024E5 8E                    7296 	.db #0x8e	; 142
      0024E6 8E                    7297 	.db #0x8e	; 142
      0024E7 00                    7298 	.db #0x00	; 0
      0024E8 00                    7299 	.db #0x00	; 0
      0024E9 00                    7300 	.db #0x00	; 0
      0024EA 00                    7301 	.db #0x00	; 0
      0024EB 00                    7302 	.db #0x00	; 0
      0024EC 8E                    7303 	.db #0x8e	; 142
      0024ED 8E                    7304 	.db #0x8e	; 142
      0024EE 8E                    7305 	.db #0x8e	; 142
      0024EF 00                    7306 	.db #0x00	; 0
      0024F0 00                    7307 	.db #0x00	; 0
      0024F1 8E                    7308 	.db #0x8e	; 142
      0024F2 8E                    7309 	.db #0x8e	; 142
      0024F3 8E                    7310 	.db #0x8e	; 142
      0024F4 00                    7311 	.db #0x00	; 0
      0024F5 00                    7312 	.db #0x00	; 0
      0024F6 8E                    7313 	.db #0x8e	; 142
      0024F7 8E                    7314 	.db #0x8e	; 142
      0024F8 00                    7315 	.db #0x00	; 0
      0024F9 8E                    7316 	.db #0x8e	; 142
      0024FA 8E                    7317 	.db #0x8e	; 142
      0024FB 00                    7318 	.db #0x00	; 0
      0024FC 00                    7319 	.db #0x00	; 0
      0024FD 00                    7320 	.db #0x00	; 0
      0024FE 8E                    7321 	.db #0x8e	; 142
      0024FF 8E                    7322 	.db #0x8e	; 142
      002500 00                    7323 	.db #0x00	; 0
      002501 8E                    7324 	.db #0x8e	; 142
      002502 8E                    7325 	.db #0x8e	; 142
      002503 8E                    7326 	.db #0x8e	; 142
      002504 8E                    7327 	.db #0x8e	; 142
      002505 8E                    7328 	.db #0x8e	; 142
      002506 00                    7329 	.db #0x00	; 0
      002507 00                    7330 	.db #0x00	; 0
      002508 00                    7331 	.db #0x00	; 0
      002509 00                    7332 	.db #0x00	; 0
      00250A 00                    7333 	.db #0x00	; 0
      00250B 00                    7334 	.db #0x00	; 0
      00250C 8E                    7335 	.db #0x8e	; 142
      00250D 8E                    7336 	.db #0x8e	; 142
      00250E 00                    7337 	.db #0x00	; 0
      00250F 00                    7338 	.db #0x00	; 0
      002510 00                    7339 	.db #0x00	; 0
      002511 8E                    7340 	.db #0x8e	; 142
      002512 8E                    7341 	.db #0x8e	; 142
      002513 00                    7342 	.db #0x00	; 0
      002514 00                    7343 	.db #0x00	; 0
      002515 00                    7344 	.db #0x00	; 0
      002516 8E                    7345 	.db #0x8e	; 142
      002517 8E                    7346 	.db #0x8e	; 142
      002518 00                    7347 	.db #0x00	; 0
      002519 8E                    7348 	.db #0x8e	; 142
      00251A 8E                    7349 	.db #0x8e	; 142
      00251B 00                    7350 	.db #0x00	; 0
      00251C 00                    7351 	.db #0x00	; 0
      00251D 00                    7352 	.db #0x00	; 0
      00251E 8E                    7353 	.db #0x8e	; 142
      00251F 8E                    7354 	.db #0x8e	; 142
      002520 00                    7355 	.db #0x00	; 0
      002521 8E                    7356 	.db #0x8e	; 142
      002522 8E                    7357 	.db #0x8e	; 142
      002523 8E                    7358 	.db #0x8e	; 142
      002524 8E                    7359 	.db #0x8e	; 142
      002525 8E                    7360 	.db #0x8e	; 142
      002526 00                    7361 	.db #0x00	; 0
      002527 00                    7362 	.db #0x00	; 0
      002528 00                    7363 	.db #0x00	; 0
      002529 00                    7364 	.db #0x00	; 0
      00252A 00                    7365 	.db #0x00	; 0
      00252B 00                    7366 	.db #0x00	; 0
      00252C 8E                    7367 	.db #0x8e	; 142
      00252D 8E                    7368 	.db #0x8e	; 142
      00252E 00                    7369 	.db #0x00	; 0
      00252F 00                    7370 	.db #0x00	; 0
      002530 00                    7371 	.db #0x00	; 0
      002531 8E                    7372 	.db #0x8e	; 142
      002532 8E                    7373 	.db #0x8e	; 142
      002533 00                    7374 	.db #0x00	; 0
      002534 00                    7375 	.db #0x00	; 0
      002535 00                    7376 	.db #0x00	; 0
      002536 8E                    7377 	.db #0x8e	; 142
      002537 8E                    7378 	.db #0x8e	; 142
      002538 00                    7379 	.db #0x00	; 0
      002539 8E                    7380 	.db #0x8e	; 142
      00253A 8E                    7381 	.db #0x8e	; 142
      00253B 8E                    7382 	.db #0x8e	; 142
      00253C 8E                    7383 	.db #0x8e	; 142
      00253D 8E                    7384 	.db #0x8e	; 142
      00253E 8E                    7385 	.db #0x8e	; 142
      00253F 8E                    7386 	.db #0x8e	; 142
      002540 00                    7387 	.db #0x00	; 0
      002541 8E                    7388 	.db #0x8e	; 142
      002542 8E                    7389 	.db #0x8e	; 142
      002543 00                    7390 	.db #0x00	; 0
      002544 00                    7391 	.db #0x00	; 0
      002545 00                    7392 	.db #0x00	; 0
      002546 8E                    7393 	.db #0x8e	; 142
      002547 00                    7394 	.db #0x00	; 0
      002548 00                    7395 	.db #0x00	; 0
      002549 00                    7396 	.db #0x00	; 0
      00254A 00                    7397 	.db #0x00	; 0
      00254B 00                    7398 	.db #0x00	; 0
      00254C 8E                    7399 	.db #0x8e	; 142
      00254D 8E                    7400 	.db #0x8e	; 142
      00254E 00                    7401 	.db #0x00	; 0
      00254F 00                    7402 	.db #0x00	; 0
      002550 00                    7403 	.db #0x00	; 0
      002551 8E                    7404 	.db #0x8e	; 142
      002552 8E                    7405 	.db #0x8e	; 142
      002553 8E                    7406 	.db #0x8e	; 142
      002554 8E                    7407 	.db #0x8e	; 142
      002555 8E                    7408 	.db #0x8e	; 142
      002556 8E                    7409 	.db #0x8e	; 142
      002557 8E                    7410 	.db #0x8e	; 142
      002558 00                    7411 	.db #0x00	; 0
      002559 8E                    7412 	.db #0x8e	; 142
      00255A 8E                    7413 	.db #0x8e	; 142
      00255B 00                    7414 	.db #0x00	; 0
      00255C 00                    7415 	.db #0x00	; 0
      00255D 00                    7416 	.db #0x00	; 0
      00255E 8E                    7417 	.db #0x8e	; 142
      00255F 8E                    7418 	.db #0x8e	; 142
      002560 00                    7419 	.db #0x00	; 0
      002561 8E                    7420 	.db #0x8e	; 142
      002562 8E                    7421 	.db #0x8e	; 142
      002563 00                    7422 	.db #0x00	; 0
      002564 00                    7423 	.db #0x00	; 0
      002565 00                    7424 	.db #0x00	; 0
      002566 8E                    7425 	.db #0x8e	; 142
      002567 00                    7426 	.db #0x00	; 0
      002568 00                    7427 	.db #0x00	; 0
      002569 00                    7428 	.db #0x00	; 0
      00256A 00                    7429 	.db #0x00	; 0
      00256B 00                    7430 	.db #0x00	; 0
      00256C 8E                    7431 	.db #0x8e	; 142
      00256D 8E                    7432 	.db #0x8e	; 142
      00256E 00                    7433 	.db #0x00	; 0
      00256F 00                    7434 	.db #0x00	; 0
      002570 00                    7435 	.db #0x00	; 0
      002571 8E                    7436 	.db #0x8e	; 142
      002572 8E                    7437 	.db #0x8e	; 142
      002573 00                    7438 	.db #0x00	; 0
      002574 00                    7439 	.db #0x00	; 0
      002575 00                    7440 	.db #0x00	; 0
      002576 8E                    7441 	.db #0x8e	; 142
      002577 8E                    7442 	.db #0x8e	; 142
      002578 00                    7443 	.db #0x00	; 0
      002579 00                    7444 	.db #0x00	; 0
      00257A 00                    7445 	.db #0x00	; 0
      00257B 00                    7446 	.db #0x00	; 0
      00257C 00                    7447 	.db #0x00	; 0
      00257D 00                    7448 	.db #0x00	; 0
      00257E 00                    7449 	.db #0x00	; 0
      00257F 00                    7450 	.db #0x00	; 0
      002580 00                    7451 	.db #0x00	; 0
      002581 00                    7452 	.db #0x00	; 0
      002582 00                    7453 	.db #0x00	; 0
      002583 00                    7454 	.db #0x00	; 0
      002584 00                    7455 	.db #0x00	; 0
      002585 00                    7456 	.db #0x00	; 0
      002586 00                    7457 	.db #0x00	; 0
      002587 00                    7458 	.db #0x00	; 0
      002588 00                    7459 	.db #0x00	; 0
      002589 00                    7460 	.db #0x00	; 0
      00258A 00                    7461 	.db #0x00	; 0
      00258B 00                    7462 	.db #0x00	; 0
      00258C 00                    7463 	.db #0x00	; 0
      00258D 00                    7464 	.db #0x00	; 0
      00258E 00                    7465 	.db #0x00	; 0
      00258F 00                    7466 	.db #0x00	; 0
      002590 00                    7467 	.db #0x00	; 0
      002591 00                    7468 	.db #0x00	; 0
      002592 00                    7469 	.db #0x00	; 0
      002593 00                    7470 	.db #0x00	; 0
      002594 00                    7471 	.db #0x00	; 0
      002595 00                    7472 	.db #0x00	; 0
      002596 00                    7473 	.db #0x00	; 0
      002597 00                    7474 	.db #0x00	; 0
      002598 00                    7475 	.db #0x00	; 0
      002599 00                    7476 	.db #0x00	; 0
      00259A 00                    7477 	.db #0x00	; 0
      00259B 00                    7478 	.db #0x00	; 0
      00259C 00                    7479 	.db #0x00	; 0
      00259D 00                    7480 	.db #0x00	; 0
      00259E 00                    7481 	.db #0x00	; 0
      00259F 00                    7482 	.db #0x00	; 0
      0025A0 00                    7483 	.db #0x00	; 0
      0025A1 00                    7484 	.db #0x00	; 0
      0025A2 00                    7485 	.db #0x00	; 0
      0025A3 00                    7486 	.db #0x00	; 0
      0025A4 00                    7487 	.db #0x00	; 0
      0025A5 00                    7488 	.db #0x00	; 0
      0025A6 00                    7489 	.db #0x00	; 0
      0025A7 00                    7490 	.db #0x00	; 0
      0025A8 00                    7491 	.db #0x00	; 0
      0025A9 00                    7492 	.db #0x00	; 0
      0025AA 00                    7493 	.db #0x00	; 0
      0025AB 00                    7494 	.db #0x00	; 0
      0025AC 00                    7495 	.db #0x00	; 0
      0025AD 00                    7496 	.db #0x00	; 0
      0025AE 00                    7497 	.db #0x00	; 0
      0025AF 00                    7498 	.db #0x00	; 0
      0025B0 00                    7499 	.db #0x00	; 0
      0025B1 00                    7500 	.db #0x00	; 0
      0025B2 00                    7501 	.db #0x00	; 0
      0025B3 00                    7502 	.db #0x00	; 0
      0025B4 00                    7503 	.db #0x00	; 0
      0025B5 00                    7504 	.db #0x00	; 0
      0025B6 00                    7505 	.db #0x00	; 0
      0025B7 00                    7506 	.db #0x00	; 0
      0025B8 00                    7507 	.db #0x00	; 0
      0025B9 00                    7508 	.db #0x00	; 0
      0025BA 00                    7509 	.db #0x00	; 0
      0025BB 00                    7510 	.db #0x00	; 0
      0025BC 00                    7511 	.db #0x00	; 0
      0025BD 00                    7512 	.db #0x00	; 0
      0025BE 00                    7513 	.db #0x00	; 0
      0025BF 00                    7514 	.db #0x00	; 0
      0025C0 00                    7515 	.db #0x00	; 0
      0025C1 00                    7516 	.db #0x00	; 0
      0025C2 00                    7517 	.db #0x00	; 0
      0025C3 00                    7518 	.db #0x00	; 0
      0025C4 00                    7519 	.db #0x00	; 0
      0025C5 00                    7520 	.db #0x00	; 0
      0025C6 00                    7521 	.db #0x00	; 0
      0025C7 00                    7522 	.db #0x00	; 0
      0025C8 00                    7523 	.db #0x00	; 0
      0025C9 00                    7524 	.db #0x00	; 0
      0025CA 00                    7525 	.db #0x00	; 0
      0025CB 00                    7526 	.db #0x00	; 0
      0025CC 00                    7527 	.db #0x00	; 0
      0025CD 00                    7528 	.db #0x00	; 0
      0025CE 00                    7529 	.db #0x00	; 0
      0025CF 00                    7530 	.db #0x00	; 0
      0025D0 00                    7531 	.db #0x00	; 0
      0025D1 00                    7532 	.db #0x00	; 0
      0025D2 00                    7533 	.db #0x00	; 0
      0025D3 00                    7534 	.db #0x00	; 0
      0025D4 00                    7535 	.db #0x00	; 0
      0025D5 00                    7536 	.db #0x00	; 0
      0025D6 00                    7537 	.db #0x00	; 0
      0025D7 00                    7538 	.db #0x00	; 0
      0025D8 00                    7539 	.db #0x00	; 0
      0025D9 00                    7540 	.db #0x00	; 0
      0025DA 00                    7541 	.db #0x00	; 0
      0025DB 00                    7542 	.db #0x00	; 0
      0025DC 00                    7543 	.db #0x00	; 0
      0025DD 00                    7544 	.db #0x00	; 0
      0025DE 00                    7545 	.db #0x00	; 0
      0025DF 00                    7546 	.db #0x00	; 0
      0025E0 00                    7547 	.db #0x00	; 0
      0025E1 00                    7548 	.db #0x00	; 0
      0025E2 00                    7549 	.db #0x00	; 0
      0025E3 00                    7550 	.db #0x00	; 0
      0025E4 00                    7551 	.db #0x00	; 0
      0025E5 00                    7552 	.db #0x00	; 0
      0025E6 00                    7553 	.db #0x00	; 0
      0025E7 00                    7554 	.db #0x00	; 0
      0025E8 00                    7555 	.db #0x00	; 0
      0025E9 00                    7556 	.db #0x00	; 0
      0025EA 00                    7557 	.db #0x00	; 0
      0025EB 00                    7558 	.db #0x00	; 0
      0025EC 00                    7559 	.db #0x00	; 0
      0025ED 00                    7560 	.db #0x00	; 0
      0025EE 00                    7561 	.db #0x00	; 0
      0025EF 00                    7562 	.db #0x00	; 0
      0025F0 00                    7563 	.db #0x00	; 0
      0025F1 00                    7564 	.db #0x00	; 0
      0025F2 00                    7565 	.db #0x00	; 0
      0025F3 00                    7566 	.db #0x00	; 0
      0025F4 00                    7567 	.db #0x00	; 0
      0025F5 00                    7568 	.db #0x00	; 0
      0025F6 00                    7569 	.db #0x00	; 0
      0025F7 00                    7570 	.db #0x00	; 0
      0025F8 00                    7571 	.db #0x00	; 0
      0025F9 00                    7572 	.db #0x00	; 0
      0025FA 00                    7573 	.db #0x00	; 0
      0025FB 00                    7574 	.db #0x00	; 0
      0025FC 00                    7575 	.db #0x00	; 0
      0025FD 00                    7576 	.db #0x00	; 0
      0025FE 00                    7577 	.db #0x00	; 0
      0025FF 00                    7578 	.db #0x00	; 0
      002600 00                    7579 	.db #0x00	; 0
      002601 00                    7580 	.db #0x00	; 0
      002602 00                    7581 	.db #0x00	; 0
      002603 00                    7582 	.db #0x00	; 0
      002604 00                    7583 	.db #0x00	; 0
      002605 00                    7584 	.db #0x00	; 0
      002606 00                    7585 	.db #0x00	; 0
      002607 00                    7586 	.db #0x00	; 0
      002608 00                    7587 	.db #0x00	; 0
      002609 00                    7588 	.db #0x00	; 0
      00260A 00                    7589 	.db #0x00	; 0
      00260B 00                    7590 	.db #0x00	; 0
      00260C 00                    7591 	.db #0x00	; 0
      00260D 00                    7592 	.db #0x00	; 0
      00260E 00                    7593 	.db #0x00	; 0
      00260F 00                    7594 	.db #0x00	; 0
      002610 00                    7595 	.db #0x00	; 0
      002611 00                    7596 	.db #0x00	; 0
      002612 00                    7597 	.db #0x00	; 0
      002613 00                    7598 	.db #0x00	; 0
      002614 00                    7599 	.db #0x00	; 0
      002615 00                    7600 	.db #0x00	; 0
      002616 00                    7601 	.db #0x00	; 0
      002617 00                    7602 	.db #0x00	; 0
      002618 00                    7603 	.db #0x00	; 0
      002619 00                    7604 	.db #0x00	; 0
      00261A 00                    7605 	.db #0x00	; 0
      00261B 00                    7606 	.db #0x00	; 0
      00261C 00                    7607 	.db #0x00	; 0
      00261D 00                    7608 	.db #0x00	; 0
      00261E 00                    7609 	.db #0x00	; 0
      00261F 00                    7610 	.db #0x00	; 0
      002620 00                    7611 	.db #0x00	; 0
      002621 00                    7612 	.db #0x00	; 0
      002622 00                    7613 	.db #0x00	; 0
      002623 00                    7614 	.db #0x00	; 0
      002624 00                    7615 	.db #0x00	; 0
      002625 00                    7616 	.db #0x00	; 0
      002626 00                    7617 	.db #0x00	; 0
      002627 00                    7618 	.db #0x00	; 0
      002628 00                    7619 	.db #0x00	; 0
      002629 00                    7620 	.db #0x00	; 0
      00262A 00                    7621 	.db #0x00	; 0
      00262B 00                    7622 	.db #0x00	; 0
      00262C 00                    7623 	.db #0x00	; 0
      00262D 00                    7624 	.db #0x00	; 0
      00262E 00                    7625 	.db #0x00	; 0
      00262F 00                    7626 	.db #0x00	; 0
      002630 00                    7627 	.db #0x00	; 0
      002631 00                    7628 	.db #0x00	; 0
      002632 00                    7629 	.db #0x00	; 0
      002633 00                    7630 	.db #0x00	; 0
      002634 00                    7631 	.db #0x00	; 0
      002635 00                    7632 	.db #0x00	; 0
      002636 00                    7633 	.db #0x00	; 0
      002637 00                    7634 	.db #0x00	; 0
      002638 00                    7635 	.db #0x00	; 0
      002639 00                    7636 	.db #0x00	; 0
      00263A 00                    7637 	.db #0x00	; 0
      00263B 00                    7638 	.db #0x00	; 0
      00263C 00                    7639 	.db #0x00	; 0
      00263D 00                    7640 	.db #0x00	; 0
      00263E 00                    7641 	.db #0x00	; 0
      00263F 00                    7642 	.db #0x00	; 0
      002640 00                    7643 	.db #0x00	; 0
      002641 00                    7644 	.db #0x00	; 0
      002642 00                    7645 	.db #0x00	; 0
      002643 00                    7646 	.db #0x00	; 0
      002644 00                    7647 	.db #0x00	; 0
      002645 00                    7648 	.db #0x00	; 0
      002646 00                    7649 	.db #0x00	; 0
      002647 00                    7650 	.db #0x00	; 0
      002648 00                    7651 	.db #0x00	; 0
      002649 00                    7652 	.db #0x00	; 0
      00264A 00                    7653 	.db #0x00	; 0
      00264B 00                    7654 	.db #0x00	; 0
      00264C 00                    7655 	.db #0x00	; 0
      00264D 00                    7656 	.db #0x00	; 0
      00264E 00                    7657 	.db #0x00	; 0
      00264F 00                    7658 	.db #0x00	; 0
      002650 00                    7659 	.db #0x00	; 0
      002651 00                    7660 	.db #0x00	; 0
      002652 00                    7661 	.db #0x00	; 0
      002653 00                    7662 	.db #0x00	; 0
      002654 00                    7663 	.db #0x00	; 0
      002655 00                    7664 	.db #0x00	; 0
      002656 00                    7665 	.db #0x00	; 0
      002657 00                    7666 	.db #0x00	; 0
      002658 00                    7667 	.db #0x00	; 0
      002659 00                    7668 	.db #0x00	; 0
      00265A 00                    7669 	.db #0x00	; 0
      00265B 00                    7670 	.db #0x00	; 0
      00265C 00                    7671 	.db #0x00	; 0
      00265D 00                    7672 	.db #0x00	; 0
      00265E 00                    7673 	.db #0x00	; 0
      00265F 00                    7674 	.db #0x00	; 0
      002660 00                    7675 	.db #0x00	; 0
      002661 00                    7676 	.db #0x00	; 0
      002662 00                    7677 	.db #0x00	; 0
      002663 00                    7678 	.db #0x00	; 0
      002664 00                    7679 	.db #0x00	; 0
      002665 00                    7680 	.db #0x00	; 0
      002666 00                    7681 	.db #0x00	; 0
      002667 00                    7682 	.db #0x00	; 0
      002668 00                    7683 	.db #0x00	; 0
      002669 00                    7684 	.db #0x00	; 0
      00266A 00                    7685 	.db #0x00	; 0
      00266B 00                    7686 	.db #0x00	; 0
      00266C 00                    7687 	.db #0x00	; 0
      00266D 00                    7688 	.db #0x00	; 0
      00266E 00                    7689 	.db #0x00	; 0
      00266F 00                    7690 	.db #0x00	; 0
      002670 00                    7691 	.db #0x00	; 0
      002671 00                    7692 	.db #0x00	; 0
      002672 00                    7693 	.db #0x00	; 0
      002673 00                    7694 	.db #0x00	; 0
      002674 00                    7695 	.db #0x00	; 0
      002675 00                    7696 	.db #0x00	; 0
      002676 00                    7697 	.db #0x00	; 0
      002677 00                    7698 	.db #0x00	; 0
      002678 00                    7699 	.db #0x00	; 0
      002679 00                    7700 	.db #0x00	; 0
      00267A 00                    7701 	.db #0x00	; 0
      00267B 00                    7702 	.db #0x00	; 0
      00267C 00                    7703 	.db #0x00	; 0
      00267D 00                    7704 	.db #0x00	; 0
      00267E 00                    7705 	.db #0x00	; 0
      00267F 00                    7706 	.db #0x00	; 0
      002680 00                    7707 	.db #0x00	; 0
      002681 00                    7708 	.db #0x00	; 0
      002682 00                    7709 	.db #0x00	; 0
      002683 00                    7710 	.db #0x00	; 0
      002684 00                    7711 	.db #0x00	; 0
      002685 00                    7712 	.db #0x00	; 0
      002686 00                    7713 	.db #0x00	; 0
      002687 00                    7714 	.db #0x00	; 0
      002688 00                    7715 	.db #0x00	; 0
      002689 00                    7716 	.db #0x00	; 0
      00268A 00                    7717 	.db #0x00	; 0
      00268B 00                    7718 	.db #0x00	; 0
      00268C 00                    7719 	.db #0x00	; 0
      00268D 00                    7720 	.db #0x00	; 0
      00268E 00                    7721 	.db #0x00	; 0
      00268F 00                    7722 	.db #0x00	; 0
      002690 00                    7723 	.db #0x00	; 0
      002691 00                    7724 	.db #0x00	; 0
      002692 00                    7725 	.db #0x00	; 0
      002693 00                    7726 	.db #0x00	; 0
      002694 00                    7727 	.db #0x00	; 0
      002695 00                    7728 	.db #0x00	; 0
      002696 00                    7729 	.db #0x00	; 0
      002697 00                    7730 	.db #0x00	; 0
      002698 00                    7731 	.db #0x00	; 0
      002699 00                    7732 	.db #0x00	; 0
      00269A 00                    7733 	.db #0x00	; 0
      00269B 00                    7734 	.db #0x00	; 0
      00269C 00                    7735 	.db #0x00	; 0
      00269D 00                    7736 	.db #0x00	; 0
      00269E 00                    7737 	.db #0x00	; 0
      00269F 00                    7738 	.db #0x00	; 0
      0026A0 00                    7739 	.db #0x00	; 0
      0026A1 00                    7740 	.db #0x00	; 0
      0026A2 00                    7741 	.db #0x00	; 0
      0026A3 00                    7742 	.db #0x00	; 0
      0026A4 00                    7743 	.db #0x00	; 0
      0026A5 00                    7744 	.db #0x00	; 0
      0026A6 00                    7745 	.db #0x00	; 0
      0026A7 00                    7746 	.db #0x00	; 0
      0026A8 00                    7747 	.db #0x00	; 0
      0026A9 00                    7748 	.db #0x00	; 0
      0026AA 00                    7749 	.db #0x00	; 0
      0026AB 00                    7750 	.db #0x00	; 0
      0026AC 00                    7751 	.db #0x00	; 0
      0026AD 00                    7752 	.db #0x00	; 0
      0026AE 00                    7753 	.db #0x00	; 0
      0026AF 00                    7754 	.db #0x00	; 0
      0026B0 00                    7755 	.db #0x00	; 0
      0026B1 00                    7756 	.db #0x00	; 0
      0026B2 00                    7757 	.db #0x00	; 0
      0026B3 00                    7758 	.db #0x00	; 0
      0026B4 00                    7759 	.db #0x00	; 0
      0026B5 00                    7760 	.db #0x00	; 0
      0026B6 00                    7761 	.db #0x00	; 0
      0026B7 00                    7762 	.db #0x00	; 0
      0026B8 00                    7763 	.db #0x00	; 0
      0026B9 00                    7764 	.db #0x00	; 0
      0026BA 00                    7765 	.db #0x00	; 0
      0026BB 00                    7766 	.db #0x00	; 0
      0026BC 00                    7767 	.db #0x00	; 0
      0026BD 00                    7768 	.db #0x00	; 0
      0026BE 00                    7769 	.db #0x00	; 0
      0026BF 00                    7770 	.db #0x00	; 0
      0026C0 00                    7771 	.db #0x00	; 0
      0026C1 00                    7772 	.db #0x00	; 0
      0026C2 00                    7773 	.db #0x00	; 0
      0026C3 00                    7774 	.db #0x00	; 0
      0026C4 00                    7775 	.db #0x00	; 0
      0026C5 00                    7776 	.db #0x00	; 0
      0026C6 00                    7777 	.db #0x00	; 0
      0026C7 00                    7778 	.db #0x00	; 0
      0026C8 00                    7779 	.db #0x00	; 0
      0026C9 00                    7780 	.db #0x00	; 0
      0026CA 00                    7781 	.db #0x00	; 0
      0026CB 00                    7782 	.db #0x00	; 0
      0026CC 00                    7783 	.db #0x00	; 0
      0026CD 00                    7784 	.db #0x00	; 0
      0026CE 00                    7785 	.db #0x00	; 0
      0026CF 00                    7786 	.db #0x00	; 0
      0026D0 00                    7787 	.db #0x00	; 0
      0026D1 00                    7788 	.db #0x00	; 0
      0026D2 00                    7789 	.db #0x00	; 0
      0026D3 00                    7790 	.db #0x00	; 0
      0026D4 00                    7791 	.db #0x00	; 0
      0026D5 00                    7792 	.db #0x00	; 0
      0026D6 00                    7793 	.db #0x00	; 0
      0026D7 00                    7794 	.db #0x00	; 0
      0026D8 00                    7795 	.db #0x00	; 0
      0026D9 00                    7796 	.db #0x00	; 0
      0026DA 00                    7797 	.db #0x00	; 0
      0026DB 00                    7798 	.db #0x00	; 0
      0026DC 00                    7799 	.db #0x00	; 0
      0026DD 00                    7800 	.db #0x00	; 0
      0026DE 00                    7801 	.db #0x00	; 0
      0026DF 00                    7802 	.db #0x00	; 0
      0026E0 00                    7803 	.db #0x00	; 0
      0026E1 00                    7804 	.db #0x00	; 0
      0026E2 00                    7805 	.db #0x00	; 0
      0026E3 00                    7806 	.db #0x00	; 0
      0026E4 00                    7807 	.db #0x00	; 0
      0026E5 00                    7808 	.db #0x00	; 0
      0026E6 00                    7809 	.db #0x00	; 0
      0026E7 00                    7810 	.db #0x00	; 0
      0026E8 00                    7811 	.db #0x00	; 0
      0026E9 00                    7812 	.db #0x00	; 0
      0026EA 00                    7813 	.db #0x00	; 0
      0026EB 00                    7814 	.db #0x00	; 0
      0026EC 00                    7815 	.db #0x00	; 0
      0026ED 00                    7816 	.db #0x00	; 0
      0026EE 00                    7817 	.db #0x00	; 0
      0026EF 00                    7818 	.db #0x00	; 0
      0026F0 00                    7819 	.db #0x00	; 0
      0026F1 00                    7820 	.db #0x00	; 0
      0026F2 00                    7821 	.db #0x00	; 0
      0026F3 00                    7822 	.db #0x00	; 0
      0026F4 00                    7823 	.db #0x00	; 0
      0026F5 00                    7824 	.db #0x00	; 0
      0026F6 00                    7825 	.db #0x00	; 0
      0026F7 00                    7826 	.db #0x00	; 0
      0026F8 00                    7827 	.db #0x00	; 0
      0026F9 00                    7828 	.db #0x00	; 0
      0026FA 00                    7829 	.db #0x00	; 0
      0026FB 00                    7830 	.db #0x00	; 0
      0026FC 00                    7831 	.db #0x00	; 0
      0026FD 00                    7832 	.db #0x00	; 0
      0026FE 00                    7833 	.db #0x00	; 0
      0026FF 00                    7834 	.db #0x00	; 0
      002700 00                    7835 	.db #0x00	; 0
      002701 00                    7836 	.db #0x00	; 0
      002702 00                    7837 	.db #0x00	; 0
      002703 00                    7838 	.db #0x00	; 0
      002704 00                    7839 	.db #0x00	; 0
      002705 00                    7840 	.db #0x00	; 0
      002706 00                    7841 	.db #0x00	; 0
      002707 00                    7842 	.db #0x00	; 0
      002708 00                    7843 	.db #0x00	; 0
      002709 00                    7844 	.db #0x00	; 0
      00270A 00                    7845 	.db #0x00	; 0
      00270B 00                    7846 	.db #0x00	; 0
      00270C 00                    7847 	.db #0x00	; 0
      00270D 00                    7848 	.db #0x00	; 0
      00270E 00                    7849 	.db #0x00	; 0
      00270F 00                    7850 	.db #0x00	; 0
      002710 00                    7851 	.db #0x00	; 0
      002711 00                    7852 	.db #0x00	; 0
      002712 00                    7853 	.db #0x00	; 0
      002713 00                    7854 	.db #0x00	; 0
      002714 00                    7855 	.db #0x00	; 0
      002715 00                    7856 	.db #0x00	; 0
      002716 00                    7857 	.db #0x00	; 0
      002717 00                    7858 	.db #0x00	; 0
      002718 00                    7859 	.db #0x00	; 0
      002719 00                    7860 	.db #0x00	; 0
      00271A 00                    7861 	.db #0x00	; 0
      00271B 00                    7862 	.db #0x00	; 0
      00271C 00                    7863 	.db #0x00	; 0
      00271D 00                    7864 	.db #0x00	; 0
      00271E 00                    7865 	.db #0x00	; 0
      00271F 00                    7866 	.db #0x00	; 0
      002720 00                    7867 	.db #0x00	; 0
      002721 00                    7868 	.db #0x00	; 0
      002722 00                    7869 	.db #0x00	; 0
      002723 00                    7870 	.db #0x00	; 0
      002724 00                    7871 	.db #0x00	; 0
      002725 00                    7872 	.db #0x00	; 0
      002726 00                    7873 	.db #0x00	; 0
      002727 00                    7874 	.db #0x00	; 0
      002728 00                    7875 	.db #0x00	; 0
      002729 00                    7876 	.db #0x00	; 0
      00272A 00                    7877 	.db #0x00	; 0
      00272B 00                    7878 	.db #0x00	; 0
      00272C 00                    7879 	.db #0x00	; 0
      00272D 00                    7880 	.db #0x00	; 0
      00272E 00                    7881 	.db #0x00	; 0
      00272F 00                    7882 	.db #0x00	; 0
      002730 00                    7883 	.db #0x00	; 0
      002731 00                    7884 	.db #0x00	; 0
      002732 00                    7885 	.db #0x00	; 0
      002733 00                    7886 	.db #0x00	; 0
      002734 00                    7887 	.db #0x00	; 0
      002735 00                    7888 	.db #0x00	; 0
      002736 00                    7889 	.db #0x00	; 0
      002737 00                    7890 	.db #0x00	; 0
      002738 00                    7891 	.db #0x00	; 0
      002739 00                    7892 	.db #0x00	; 0
      00273A 00                    7893 	.db #0x00	; 0
      00273B 00                    7894 	.db #0x00	; 0
      00273C 00                    7895 	.db #0x00	; 0
      00273D 00                    7896 	.db #0x00	; 0
      00273E 00                    7897 	.db #0x00	; 0
      00273F 00                    7898 	.db #0x00	; 0
      002740 00                    7899 	.db #0x00	; 0
      002741 00                    7900 	.db #0x00	; 0
      002742 00                    7901 	.db #0x00	; 0
      002743 00                    7902 	.db #0x00	; 0
      002744 00                    7903 	.db #0x00	; 0
      002745 00                    7904 	.db #0x00	; 0
      002746 00                    7905 	.db #0x00	; 0
      002747 00                    7906 	.db #0x00	; 0
      002748 00                    7907 	.db #0x00	; 0
      002749 00                    7908 	.db #0x00	; 0
      00274A 00                    7909 	.db #0x00	; 0
      00274B 00                    7910 	.db #0x00	; 0
      00274C 00                    7911 	.db #0x00	; 0
      00274D 00                    7912 	.db #0x00	; 0
      00274E 00                    7913 	.db #0x00	; 0
      00274F 00                    7914 	.db #0x00	; 0
      002750 00                    7915 	.db #0x00	; 0
      002751 00                    7916 	.db #0x00	; 0
      002752 00                    7917 	.db #0x00	; 0
      002753 00                    7918 	.db #0x00	; 0
      002754 00                    7919 	.db #0x00	; 0
      002755 00                    7920 	.db #0x00	; 0
      002756 00                    7921 	.db #0x00	; 0
      002757 00                    7922 	.db #0x00	; 0
      002758 00                    7923 	.db #0x00	; 0
      002759 00                    7924 	.db #0x00	; 0
      00275A 00                    7925 	.db #0x00	; 0
      00275B 00                    7926 	.db #0x00	; 0
      00275C 00                    7927 	.db #0x00	; 0
      00275D 00                    7928 	.db #0x00	; 0
      00275E 00                    7929 	.db #0x00	; 0
      00275F 00                    7930 	.db #0x00	; 0
      002760 00                    7931 	.db #0x00	; 0
      002761 00                    7932 	.db #0x00	; 0
      002762 00                    7933 	.db #0x00	; 0
      002763 00                    7934 	.db #0x00	; 0
      002764 00                    7935 	.db #0x00	; 0
      002765 00                    7936 	.db #0x00	; 0
      002766 00                    7937 	.db #0x00	; 0
      002767 00                    7938 	.db #0x00	; 0
      002768 00                    7939 	.db #0x00	; 0
      002769 00                    7940 	.db #0x00	; 0
      00276A 00                    7941 	.db #0x00	; 0
      00276B 00                    7942 	.db #0x00	; 0
      00276C 00                    7943 	.db #0x00	; 0
      00276D 00                    7944 	.db #0x00	; 0
      00276E 00                    7945 	.db #0x00	; 0
      00276F 00                    7946 	.db #0x00	; 0
      002770 00                    7947 	.db #0x00	; 0
      002771 00                    7948 	.db #0x00	; 0
      002772 00                    7949 	.db #0x00	; 0
      002773 00                    7950 	.db #0x00	; 0
      002774 00                    7951 	.db #0x00	; 0
      002775 00                    7952 	.db #0x00	; 0
      002776 00                    7953 	.db #0x00	; 0
      002777 00                    7954 	.db #0x00	; 0
      002778                       7955 ___str_9:
      002778 50 52 45 53 53 20 54  7956 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      00278E 00                    7957 	.db 0x00
      00278F                       7958 ___str_10:
      00278F 41 4E 44 52 45 42 41  7959 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0027A3 00                    7960 	.db 0x00
      0027A4                       7961 ___str_11:
      0027A4 76 2E 3F 2E 3F 2E 3F  7962 	.ascii "v.?.?.?"
      0027AB 00                    7963 	.db 0x00
                                   7964 ;src\main.c:85: void main() {
                                   7965 ;	---------------------------------
                                   7966 ; Function main
                                   7967 ; ---------------------------------
      0027AC                       7968 _main::
                                   7969 ;src\main.c:87: while(TRUE) {
      0027AC                       7970 00102$:
                                   7971 ;src\main.c:89: Intro();
      0027AC CDrD0r21         [17] 7972 	call	_Intro
                                   7973 ;src\main.c:91: TitleScreen();
      0027AF CDr89r22         [17] 7974 	call	_TitleScreen
                                   7975 ;src\main.c:93: InitGame();
      0027B2 CDr5Ar20         [17] 7976 	call	_InitGame
                                   7977 ;src\main.c:96: }
      0027B5 18 F5            [12] 7978 	jr	00102$
                                   7979 	.area _CODE
                                   7980 	.area _INITIALIZER
      000000                       7981 __xinit__gameOver:
      000000 00                    7982 	.db #0x00	; 0
      000001                       7983 __xinit__col:
      000001 00                    7984 	.db #0x00	; 0
      000002                       7985 __xinit__line:
      000002 00                    7986 	.db #0x00	; 0
      000003                       7987 __xinit__counter:
      000003 00                    7988 	.db #0x00	; 0
      000004                       7989 __xinit__blocksRemoved:
      000004 00 00                 7990 	.dw #0x0000
      000006                       7991 __xinit__level:
      000006 01                    7992 	.db #0x01	; 1
      000007                       7993 __xinit__newLevel:
      000007 00                    7994 	.db #0x00	; 0
      000008                       7995 __xinit__rndSeed:
      000008 00                    7996 	.db #0x00	; 0
      000009                       7997 __xinit__d_col:
      000009 00                    7998 	.db #0x00	; 0
      00000A                       7999 __xinit__d_line:
      00000A 00                    8000 	.db #0x00	; 0
      00000B                       8001 __xinit__d_value:
      00000B 00                    8002 	.db #0x00	; 0
                                   8003 	.area _CABS (ABS)
