                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _FadeOut
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _PosMaskSprites
                                     38 	.globl _GetNextPieceColors
                                     39 	.globl _DrawColumn
                                     40 	.globl _DrawNumber
                                     41 	.globl _DrawString
                                     42 	.globl _DrawChar
                                     43 	.globl _ClearNamesTable
                                     44 	.globl _ShowCountdown
                                     45 	.globl _BlinkNumber
                                     46 	.globl _AnimateSprites
                                     47 	.globl _DrawExplosionSprite
                                     48 	.globl _HideExplosionSprite
                                     49 	.globl _HideHitSprite
                                     50 	.globl _DrawHitSprite
                                     51 	.globl _HideArrowSprite
                                     52 	.globl _DrawArrowSprite
                                     53 	.globl _GetRandomInInterval
                                     54 	.globl _GetRandom
                                     55 	.globl _InitRnd
                                     56 	.globl _Power
                                     57 	.globl _Wait
                                     58 	.globl _SNSMAT
                                     59 	.globl _GTTRIG
                                     60 	.globl _GTSTCK
                                     61 	.globl _WRTPSG
                                     62 	.globl _GICINI
                                     63 	.globl _INIGRP
                                     64 	.globl _LDIRVM
                                     65 	.globl _FILVRM
                                     66 	.globl _WRTVRM
                                     67 	.globl _RDVRM
                                     68 	.globl _WRTVDP
                                     69 	.globl _ENASCR
                                     70 	.globl _DISSCR
                                     71 	.globl _rndSeed
                                     72 	.globl _newLevel
                                     73 	.globl _level
                                     74 	.globl _blocksRemoved
                                     75 	.globl _counter
                                     76 	.globl _line
                                     77 	.globl _col
                                     78 	.globl _gameOver
                                     79 	.globl _nextPieceColor_Back
                                     80 	.globl _nextPieceColor_Front
                                     81 	.globl _Rand_x
                                     82 	.globl _Rand_c
                                     83 	.globl _Rand_b
                                     84 	.globl _Rand_a
                                     85 	.globl _speed
                                     86 	.globl _nextBottomPiece
                                     87 	.globl _nextMidPiece
                                     88 	.globl _nextTopPiece
                                     89 	.globl _bottomPiece
                                     90 	.globl _midPiece
                                     91 	.globl _topPiece
                                     92 	.globl _playfieldTemp
                                     93 	.globl _playfield
                                     94 	.globl _GETPNT
                                     95 	.globl _PUTPNT
                                     96 	.globl _REPCNT
                                     97 	.globl _SCNCNT
                                     98 	.globl _ATRBYT
                                     99 	.globl _CMASK
                                    100 	.globl _CLOC
                                    101 	.globl _BDRCLR
                                    102 	.globl _BAKCLR
                                    103 	.globl _FORCLR
                                    104 	.globl _TRGFLG
                                    105 	.globl _STATFL
                                    106 	.globl _MSX_vdp_regs
                                    107 	.globl _CNSDFG
                                    108 	.globl _CSRX
                                    109 	.globl _CSRY
                                    110 	.globl _MSX_modedata_screen3
                                    111 	.globl _MSX_modedata_screen2
                                    112 	.globl _MSX_modedata_screen1
                                    113 	.globl _MSX_modedata_screen0
                                    114 	.globl _CLIKSW
                                    115 	.globl _JIFFY
                                    116 	.globl _CLMLST
                                    117 	.globl _CRTCNT
                                    118 	.globl _LINLEN
                                    119 	.globl _LINL32
                                    120 	.globl _LINL40
                                    121 	.globl _MSX_charset
                                    122 	.globl _colors
                                    123 	.globl _FONT
                                    124 	.globl _pieces
                                    125 	.globl _MSX_version
                                    126 	.globl _MSX_vdp_port_write
                                    127 	.globl _MSX_vdp_port_read
                                    128 ;--------------------------------------------------------
                                    129 ; special function registers
                                    130 ;--------------------------------------------------------
                                    131 ;--------------------------------------------------------
                                    132 ; ram data
                                    133 ;--------------------------------------------------------
                                    134 	.area _DATA
                           000004   135 _MSX_charset	=	0x0004
                           00F3AE   136 _LINL40	=	0xf3ae
                           00F3AF   137 _LINL32	=	0xf3af
                           00F3B0   138 _LINLEN	=	0xf3b0
                           00F3B1   139 _CRTCNT	=	0xf3b1
                           00F3B1   140 _CLMLST	=	0xf3b1
                           00FC9E   141 _JIFFY	=	0xfc9e
                           00F3DB   142 _CLIKSW	=	0xf3db
                           00F3B3   143 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   144 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   145 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   146 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   147 _CSRY	=	0xf3dc
                           00F3DD   148 _CSRX	=	0xf3dd
                           00F3DE   149 _CNSDFG	=	0xf3de
                           00F3DF   150 _MSX_vdp_regs	=	0xf3df
                           00F3E7   151 _STATFL	=	0xf3e7
                           00F3E8   152 _TRGFLG	=	0xf3e8
                           00F3E9   153 _FORCLR	=	0xf3e9
                           00F3EA   154 _BAKCLR	=	0xf3ea
                           00F3EB   155 _BDRCLR	=	0xf3eb
                           00F92A   156 _CLOC	=	0xf92a
                           00F92C   157 _CMASK	=	0xf92c
                           00F3F2   158 _ATRBYT	=	0xf3f2
                           00F3F6   159 _SCNCNT	=	0xf3f6
                           00F3F7   160 _REPCNT	=	0xf3f7
                           00F3F8   161 _PUTPNT	=	0xf3f8
                           00F3FA   162 _GETPNT	=	0xf3fa
      000000                        163 _playfield::
      000000                        164 	.ds 72
      000048                        165 _playfieldTemp::
      000048                        166 	.ds 72
      000090                        167 _topPiece::
      000090                        168 	.ds 1
      000091                        169 _midPiece::
      000091                        170 	.ds 1
      000092                        171 _bottomPiece::
      000092                        172 	.ds 1
      000093                        173 _nextTopPiece::
      000093                        174 	.ds 1
      000094                        175 _nextMidPiece::
      000094                        176 	.ds 1
      000095                        177 _nextBottomPiece::
      000095                        178 	.ds 1
      000096                        179 _speed::
      000096                        180 	.ds 1
      000097                        181 _Rand_a::
      000097                        182 	.ds 1
      000098                        183 _Rand_b::
      000098                        184 	.ds 1
      000099                        185 _Rand_c::
      000099                        186 	.ds 1
      00009A                        187 _Rand_x::
      00009A                        188 	.ds 1
      00009B                        189 _nextPieceColor_Front::
      00009B                        190 	.ds 1
      00009C                        191 _nextPieceColor_Back::
      00009C                        192 	.ds 1
                                    193 ;--------------------------------------------------------
                                    194 ; ram data
                                    195 ;--------------------------------------------------------
                                    196 	.area _INITIALIZED
      000000                        197 _gameOver::
      000000                        198 	.ds 1
      000001                        199 _col::
      000001                        200 	.ds 1
      000002                        201 _line::
      000002                        202 	.ds 1
      000003                        203 _counter::
      000003                        204 	.ds 1
      000004                        205 _blocksRemoved::
      000004                        206 	.ds 2
      000006                        207 _level::
      000006                        208 	.ds 1
      000007                        209 _newLevel::
      000007                        210 	.ds 1
      000008                        211 _rndSeed::
      000008                        212 	.ds 1
                                    213 ;--------------------------------------------------------
                                    214 ; absolute external ram data
                                    215 ;--------------------------------------------------------
                                    216 	.area _DABS (ABS)
                                    217 ;--------------------------------------------------------
                                    218 ; global & static initialisations
                                    219 ;--------------------------------------------------------
                                    220 	.area _HOME
                                    221 	.area _GSINIT
                                    222 	.area _GSFINAL
                                    223 	.area _GSINIT
                                    224 ;--------------------------------------------------------
                                    225 ; Home
                                    226 ;--------------------------------------------------------
                                    227 	.area _HOME
                                    228 	.area _HOME
                                    229 ;--------------------------------------------------------
                                    230 ; code
                                    231 ;--------------------------------------------------------
                                    232 	.area _CODE
                                    233 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    234 ;	---------------------------------
                                    235 ; Function Wait
                                    236 ; ---------------------------------
      000000                        237 _Wait::
                                    238 ;src\/Common.h:2: do {
      000000 D1               [10]  239 	pop	de
      000001 C1               [10]  240 	pop	bc
      000002 C5               [11]  241 	push	bc
      000003 D5               [11]  242 	push	de
      000004                        243 00104$:
                                    244 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  245 	ld	de, (_JIFFY)
                                    246 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        247 00101$:
      000008 2A 9E FC         [16]  248 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  249 	cp	a, a
      00000C ED 52            [15]  250 	sbc	hl, de
      00000E 28 F8            [12]  251 	jr	Z, 00101$
                                    252 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  253 	ld	e, c
      000011 50               [ 4]  254 	ld	d, b
      000012 0B               [ 6]  255 	dec	bc
      000013 7A               [ 4]  256 	ld	a, d
      000014 B3               [ 4]  257 	or	a, e
      000015 20 ED            [12]  258 	jr	NZ, 00104$
                                    259 ;src\/Common.h:8: }
      000017 C9               [10]  260 	ret
                           000006   261 _MSX_vdp_port_read	=	0x0006
                           000007   262 _MSX_vdp_port_write	=	0x0007
                           00002D   263 _MSX_version	=	0x002d
      000018                        264 _pieces:
      000018 04                     265 	.db #0x04	; 4
      000019 08                     266 	.db #0x08	; 8
      00001A 0C                     267 	.db #0x0c	; 12
      00001B 10                     268 	.db #0x10	; 16
      00001C 14                     269 	.db #0x14	; 20
                                    270 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    271 ;	---------------------------------
                                    272 ; Function Power
                                    273 ; ---------------------------------
      00001D                        274 _Power::
      00001D DD E5            [15]  275 	push	ix
      00001F DD 21 00 00      [14]  276 	ld	ix,#0
      000023 DD 39            [15]  277 	add	ix,sp
                                    278 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  279 	ld	c, 4 (ix)
      000028 06 00            [ 7]  280 	ld	b, #0x00
      00002A 69               [ 4]  281 	ld	l, c
      00002B 60               [ 4]  282 	ld	h, b
                                    283 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  284 	ld	a, 5 (ix)
      00002F B7               [ 4]  285 	or	a, a
      000030 20 05            [12]  286 	jr	NZ, 00111$
      000032 21 01 00         [10]  287 	ld	hl, #0x0001
      000035 18 16            [12]  288 	jr	00107$
                                    289 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        290 00111$:
      000037 1E 01            [ 7]  291 	ld	e, #0x01
      000039                        292 00105$:
      000039 7B               [ 4]  293 	ld	a, e
      00003A DD 96 05         [19]  294 	sub	a, 5 (ix)
      00003D 30 0E            [12]  295 	jr	NC, 00103$
                                    296 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  297 	push	bc
      000040 D5               [11]  298 	push	de
      000041 C5               [11]  299 	push	bc
      000042 E5               [11]  300 	push	hl
      000043 CDr00r00         [17]  301 	call	__mulint
      000046 F1               [10]  302 	pop	af
      000047 F1               [10]  303 	pop	af
      000048 D1               [10]  304 	pop	de
      000049 C1               [10]  305 	pop	bc
                                    306 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  307 	inc	e
      00004B 18 EC            [12]  308 	jr	00105$
      00004D                        309 00103$:
                                    310 ;src\/Math.h:10: return power;
      00004D                        311 00107$:
                                    312 ;src\/Math.h:11: }
      00004D DD E1            [14]  313 	pop	ix
      00004F C9               [10]  314 	ret
                                    315 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    316 ;	---------------------------------
                                    317 ; Function InitRnd
                                    318 ; ---------------------------------
      000050                        319 _InitRnd::
                                    320 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  321 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  322 	ld	hl, #2
      000056 39               [11]  323 	add	hl, sp
      000057 AE               [ 7]  324 	xor	a, (hl)
      000058 32r97r00         [13]  325 	ld	(_Rand_a+0), a
                                    326 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  327 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  328 	ld	hl, #3
      000061 39               [11]  329 	add	hl, sp
      000062 AE               [ 7]  330 	xor	a, (hl)
      000063 32r98r00         [13]  331 	ld	(_Rand_b+0), a
                                    332 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  333 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  334 	ld	hl, #4
      00006C 39               [11]  335 	add	hl, sp
      00006D AE               [ 7]  336 	xor	a, (hl)
      00006E 32r99r00         [13]  337 	ld	(_Rand_c+0), a
                                    338 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  339 	ld	hl, #_Rand_x
      000074 34               [11]  340 	inc	(hl)
                                    341 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  342 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  343 	ld	hl, #_Rand_c
      00007B AE               [ 7]  344 	xor	a, (hl)
      00007C 21r9Ar00         [10]  345 	ld	hl, #_Rand_x
      00007F AE               [ 7]  346 	xor	a, (hl)
      000080 32r97r00         [13]  347 	ld	(_Rand_a+0), a
                                    348 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  349 	ld	hl, #_Rand_b
      000086 7E               [ 7]  350 	ld	a, (hl)
      000087 FD 21r97r00      [14]  351 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  352 	add	a, 0 (iy)
      00008E 77               [ 7]  353 	ld	(hl), a
                                    354 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  355 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  356 	srl	a
      000094 21r99r00         [10]  357 	ld	hl, #_Rand_c
      000097 86               [ 7]  358 	add	a, (hl)
      000098 FD 21r97r00      [14]  359 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  360 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  361 	ld	(_Rand_c+0), a
                                    362 ;src\/Random.h:38: }
      0000A2 C9               [10]  363 	ret
                                    364 ;src\/Random.h:40: unsigned char GetRandom() {
                                    365 ;	---------------------------------
                                    366 ; Function GetRandom
                                    367 ; ---------------------------------
      0000A3                        368 _GetRandom::
                                    369 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  370 	ld	hl, #_Rand_x
      0000A6 34               [11]  371 	inc	(hl)
                                    372 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  373 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  374 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  375 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  376 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  377 	xor	a, (hl)
      0000B2 32r97r00         [13]  378 	ld	(_Rand_a+0), a
                                    379 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  380 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  381 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  382 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  383 	add	a, 0 (iy)
      0000C0 77               [ 7]  384 	ld	(hl), a
                                    385 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  386 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  387 	srl	a
      0000C6 21r99r00         [10]  388 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  389 	add	a, (hl)
      0000CA FD 21r97r00      [14]  390 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  391 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  392 	ld	(_Rand_c+0), a
                                    393 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  394 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  395 	ld	l, a
                                    396 ;src\/Random.h:47: }
      0000D8 C9               [10]  397 	ret
                                    398 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    399 ;	---------------------------------
                                    400 ; Function GetRandomInInterval
                                    401 ; ---------------------------------
      0000D9                        402 _GetRandomInInterval::
                                    403 ;src\/Random.h:53: do {
      0000D9                        404 00101$:
                                    405 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  406 	call	_GetRandom
      0000DC 7D               [ 4]  407 	ld	a, l
      0000DD 21 03 00         [10]  408 	ld	hl, #3
      0000E0 39               [11]  409 	add	hl, sp
      0000E1 A6               [ 7]  410 	and	a, (hl)
      0000E2 4F               [ 4]  411 	ld	c, a
                                    412 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  413 	ld	hl, #2
      0000E6 39               [11]  414 	add	hl, sp
      0000E7 7E               [ 7]  415 	ld	a, (hl)
      0000E8 91               [ 4]  416 	sub	a, c
      0000E9 38 EE            [12]  417 	jr	C, 00101$
                                    418 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  419 	ld	l, c
                                    420 ;src\/Random.h:59: }
      0000EC C9               [10]  421 	ret
                                    422 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    423 ;	---------------------------------
                                    424 ; Function DrawArrowSprite
                                    425 ; ---------------------------------
      0000ED                        426 _DrawArrowSprite::
      0000ED DD E5            [15]  427 	push	ix
      0000EF DD 21 00 00      [14]  428 	ld	ix,#0
      0000F3 DD 39            [15]  429 	add	ix,sp
      0000F5 21 F8 FF         [10]  430 	ld	hl, #-8
      0000F8 39               [11]  431 	add	hl, sp
      0000F9 F9               [ 6]  432 	ld	sp, hl
                                    433 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  434 	ld	hl, #0
      0000FD 39               [11]  435 	add	hl, sp
      0000FE EB               [ 4]  436 	ex	de, hl
      0000FF 3E 0F            [ 7]  437 	ld	a, #0x0f
      000101 12               [ 7]  438 	ld	(de), a
      000102 6B               [ 4]  439 	ld	l, e
      000103 62               [ 4]  440 	ld	h, d
      000104 23               [ 6]  441 	inc	hl
      000105 36 0E            [10]  442 	ld	(hl), #0x0e
      000107 6B               [ 4]  443 	ld	l, e
      000108 62               [ 4]  444 	ld	h, d
      000109 23               [ 6]  445 	inc	hl
      00010A 23               [ 6]  446 	inc	hl
      00010B 36 05            [10]  447 	ld	(hl), #0x05
      00010D 6B               [ 4]  448 	ld	l, e
      00010E 62               [ 4]  449 	ld	h, d
      00010F 23               [ 6]  450 	inc	hl
      000110 23               [ 6]  451 	inc	hl
      000111 23               [ 6]  452 	inc	hl
      000112 36 04            [10]  453 	ld	(hl), #0x04
      000114 21 04 00         [10]  454 	ld	hl, #0x0004
      000117 19               [11]  455 	add	hl, de
      000118 36 04            [10]  456 	ld	(hl), #0x04
      00011A 21 05 00         [10]  457 	ld	hl, #0x0005
      00011D 19               [11]  458 	add	hl, de
      00011E 36 05            [10]  459 	ld	(hl), #0x05
      000120 21 06 00         [10]  460 	ld	hl, #0x0006
      000123 19               [11]  461 	add	hl, de
      000124 36 0E            [10]  462 	ld	(hl), #0x0e
      000126 21 07 00         [10]  463 	ld	hl, #0x0007
      000129 19               [11]  464 	add	hl, de
      00012A 36 0F            [10]  465 	ld	(hl), #0x0f
                                    466 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  467 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  468 	ld	a, l
      000130 E6 0E            [ 7]  469 	and	a, #0x0e
      000132 6F               [ 4]  470 	ld	l, a
      000133 26 00            [ 7]  471 	ld	h, #0x00
      000135 CB 3C            [ 8]  472 	srl	h
      000137 CB 1D            [ 8]  473 	rr	l
                                    474 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  475 	ld	a, 5 (ix)
      00013C 3D               [ 4]  476 	dec	a
      00013D E5               [11]  477 	push	hl
      00013E D5               [11]  478 	push	de
      00013F F5               [11]  479 	push	af
      000140 33               [ 6]  480 	inc	sp
      000141 01 00 1B         [10]  481 	ld	bc, #0x1b00
      000144 C5               [11]  482 	push	bc
      000145 CDr00r00         [17]  483 	call	_WRTVRM
      000148 F1               [10]  484 	pop	af
      000149 33               [ 6]  485 	inc	sp
      00014A DD 7E 04         [19]  486 	ld	a, 4 (ix)
      00014D F5               [11]  487 	push	af
      00014E 33               [ 6]  488 	inc	sp
      00014F 01 01 1B         [10]  489 	ld	bc, #0x1b01
      000152 C5               [11]  490 	push	bc
      000153 CDr00r00         [17]  491 	call	_WRTVRM
      000156 F1               [10]  492 	pop	af
      000157 33               [ 6]  493 	inc	sp
      000158 AF               [ 4]  494 	xor	a, a
      000159 F5               [11]  495 	push	af
      00015A 33               [ 6]  496 	inc	sp
      00015B 01 02 1B         [10]  497 	ld	bc, #0x1b02
      00015E C5               [11]  498 	push	bc
      00015F CDr00r00         [17]  499 	call	_WRTVRM
      000162 F1               [10]  500 	pop	af
      000163 33               [ 6]  501 	inc	sp
      000164 D1               [10]  502 	pop	de
      000165 E1               [10]  503 	pop	hl
                                    504 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  505 	ld	h, #0x00
      000168 19               [11]  506 	add	hl, de
      000169 7E               [ 7]  507 	ld	a, (hl)
      00016A F5               [11]  508 	push	af
      00016B 33               [ 6]  509 	inc	sp
      00016C 21 03 1B         [10]  510 	ld	hl, #0x1b03
      00016F E5               [11]  511 	push	hl
      000170 CDr00r00         [17]  512 	call	_WRTVRM
                                    513 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  514 	ld	sp,ix
      000175 DD E1            [14]  515 	pop	ix
      000177 C9               [10]  516 	ret
      000178                        517 _FONT:
      000178 00                     518 	.db #0x00	; 0
      000179 00                     519 	.db #0x00	; 0
      00017A 00                     520 	.db #0x00	; 0
      00017B 00                     521 	.db #0x00	; 0
      00017C 00                     522 	.db #0x00	; 0
      00017D 00                     523 	.db #0x00	; 0
      00017E 00                     524 	.db #0x00	; 0
      00017F 00                     525 	.db #0x00	; 0
      000180 30                     526 	.db #0x30	; 48	'0'
      000181 78                     527 	.db #0x78	; 120	'x'
      000182 78                     528 	.db #0x78	; 120	'x'
      000183 30                     529 	.db #0x30	; 48	'0'
      000184 30                     530 	.db #0x30	; 48	'0'
      000185 00                     531 	.db #0x00	; 0
      000186 30                     532 	.db #0x30	; 48	'0'
      000187 00                     533 	.db #0x00	; 0
      000188 6C                     534 	.db #0x6c	; 108	'l'
      000189 6C                     535 	.db #0x6c	; 108	'l'
      00018A 6C                     536 	.db #0x6c	; 108	'l'
      00018B 00                     537 	.db #0x00	; 0
      00018C 00                     538 	.db #0x00	; 0
      00018D 00                     539 	.db #0x00	; 0
      00018E 00                     540 	.db #0x00	; 0
      00018F 00                     541 	.db #0x00	; 0
      000190 6C                     542 	.db #0x6c	; 108	'l'
      000191 6C                     543 	.db #0x6c	; 108	'l'
      000192 FE                     544 	.db #0xfe	; 254
      000193 6C                     545 	.db #0x6c	; 108	'l'
      000194 FE                     546 	.db #0xfe	; 254
      000195 6C                     547 	.db #0x6c	; 108	'l'
      000196 6C                     548 	.db #0x6c	; 108	'l'
      000197 00                     549 	.db #0x00	; 0
      000198 30                     550 	.db #0x30	; 48	'0'
      000199 7C                     551 	.db #0x7c	; 124
      00019A C0                     552 	.db #0xc0	; 192
      00019B 78                     553 	.db #0x78	; 120	'x'
      00019C 0C                     554 	.db #0x0c	; 12
      00019D F8                     555 	.db #0xf8	; 248
      00019E 30                     556 	.db #0x30	; 48	'0'
      00019F 00                     557 	.db #0x00	; 0
      0001A0 00                     558 	.db #0x00	; 0
      0001A1 C6                     559 	.db #0xc6	; 198
      0001A2 CC                     560 	.db #0xcc	; 204
      0001A3 18                     561 	.db #0x18	; 24
      0001A4 30                     562 	.db #0x30	; 48	'0'
      0001A5 66                     563 	.db #0x66	; 102	'f'
      0001A6 C6                     564 	.db #0xc6	; 198
      0001A7 00                     565 	.db #0x00	; 0
      0001A8 38                     566 	.db #0x38	; 56	'8'
      0001A9 6C                     567 	.db #0x6c	; 108	'l'
      0001AA 38                     568 	.db #0x38	; 56	'8'
      0001AB 76                     569 	.db #0x76	; 118	'v'
      0001AC DC                     570 	.db #0xdc	; 220
      0001AD CC                     571 	.db #0xcc	; 204
      0001AE 76                     572 	.db #0x76	; 118	'v'
      0001AF 00                     573 	.db #0x00	; 0
      0001B0 60                     574 	.db #0x60	; 96
      0001B1 60                     575 	.db #0x60	; 96
      0001B2 C0                     576 	.db #0xc0	; 192
      0001B3 00                     577 	.db #0x00	; 0
      0001B4 00                     578 	.db #0x00	; 0
      0001B5 00                     579 	.db #0x00	; 0
      0001B6 00                     580 	.db #0x00	; 0
      0001B7 00                     581 	.db #0x00	; 0
      0001B8 18                     582 	.db #0x18	; 24
      0001B9 30                     583 	.db #0x30	; 48	'0'
      0001BA 60                     584 	.db #0x60	; 96
      0001BB 60                     585 	.db #0x60	; 96
      0001BC 60                     586 	.db #0x60	; 96
      0001BD 30                     587 	.db #0x30	; 48	'0'
      0001BE 18                     588 	.db #0x18	; 24
      0001BF 00                     589 	.db #0x00	; 0
      0001C0 60                     590 	.db #0x60	; 96
      0001C1 30                     591 	.db #0x30	; 48	'0'
      0001C2 18                     592 	.db #0x18	; 24
      0001C3 18                     593 	.db #0x18	; 24
      0001C4 18                     594 	.db #0x18	; 24
      0001C5 30                     595 	.db #0x30	; 48	'0'
      0001C6 60                     596 	.db #0x60	; 96
      0001C7 00                     597 	.db #0x00	; 0
      0001C8 00                     598 	.db #0x00	; 0
      0001C9 66                     599 	.db #0x66	; 102	'f'
      0001CA 3C                     600 	.db #0x3c	; 60
      0001CB FF                     601 	.db #0xff	; 255
      0001CC 3C                     602 	.db #0x3c	; 60
      0001CD 66                     603 	.db #0x66	; 102	'f'
      0001CE 00                     604 	.db #0x00	; 0
      0001CF 00                     605 	.db #0x00	; 0
      0001D0 00                     606 	.db #0x00	; 0
      0001D1 30                     607 	.db #0x30	; 48	'0'
      0001D2 30                     608 	.db #0x30	; 48	'0'
      0001D3 FC                     609 	.db #0xfc	; 252
      0001D4 30                     610 	.db #0x30	; 48	'0'
      0001D5 30                     611 	.db #0x30	; 48	'0'
      0001D6 00                     612 	.db #0x00	; 0
      0001D7 00                     613 	.db #0x00	; 0
      0001D8 00                     614 	.db #0x00	; 0
      0001D9 00                     615 	.db #0x00	; 0
      0001DA 00                     616 	.db #0x00	; 0
      0001DB 00                     617 	.db #0x00	; 0
      0001DC 00                     618 	.db #0x00	; 0
      0001DD 30                     619 	.db #0x30	; 48	'0'
      0001DE 30                     620 	.db #0x30	; 48	'0'
      0001DF 60                     621 	.db #0x60	; 96
      0001E0 00                     622 	.db #0x00	; 0
      0001E1 00                     623 	.db #0x00	; 0
      0001E2 00                     624 	.db #0x00	; 0
      0001E3 FC                     625 	.db #0xfc	; 252
      0001E4 00                     626 	.db #0x00	; 0
      0001E5 00                     627 	.db #0x00	; 0
      0001E6 00                     628 	.db #0x00	; 0
      0001E7 00                     629 	.db #0x00	; 0
      0001E8 00                     630 	.db #0x00	; 0
      0001E9 00                     631 	.db #0x00	; 0
      0001EA 00                     632 	.db #0x00	; 0
      0001EB 00                     633 	.db #0x00	; 0
      0001EC 00                     634 	.db #0x00	; 0
      0001ED 30                     635 	.db #0x30	; 48	'0'
      0001EE 30                     636 	.db #0x30	; 48	'0'
      0001EF 00                     637 	.db #0x00	; 0
      0001F0 06                     638 	.db #0x06	; 6
      0001F1 0C                     639 	.db #0x0c	; 12
      0001F2 18                     640 	.db #0x18	; 24
      0001F3 30                     641 	.db #0x30	; 48	'0'
      0001F4 60                     642 	.db #0x60	; 96
      0001F5 C0                     643 	.db #0xc0	; 192
      0001F6 80                     644 	.db #0x80	; 128
      0001F7 00                     645 	.db #0x00	; 0
      0001F8 7C                     646 	.db #0x7c	; 124
      0001F9 C6                     647 	.db #0xc6	; 198
      0001FA CE                     648 	.db #0xce	; 206
      0001FB DE                     649 	.db #0xde	; 222
      0001FC F6                     650 	.db #0xf6	; 246
      0001FD E6                     651 	.db #0xe6	; 230
      0001FE 7C                     652 	.db #0x7c	; 124
      0001FF 00                     653 	.db #0x00	; 0
      000200 30                     654 	.db #0x30	; 48	'0'
      000201 70                     655 	.db #0x70	; 112	'p'
      000202 30                     656 	.db #0x30	; 48	'0'
      000203 30                     657 	.db #0x30	; 48	'0'
      000204 30                     658 	.db #0x30	; 48	'0'
      000205 30                     659 	.db #0x30	; 48	'0'
      000206 FC                     660 	.db #0xfc	; 252
      000207 00                     661 	.db #0x00	; 0
      000208 78                     662 	.db #0x78	; 120	'x'
      000209 CC                     663 	.db #0xcc	; 204
      00020A 0C                     664 	.db #0x0c	; 12
      00020B 38                     665 	.db #0x38	; 56	'8'
      00020C 60                     666 	.db #0x60	; 96
      00020D C4                     667 	.db #0xc4	; 196
      00020E FC                     668 	.db #0xfc	; 252
      00020F 00                     669 	.db #0x00	; 0
      000210 78                     670 	.db #0x78	; 120	'x'
      000211 CC                     671 	.db #0xcc	; 204
      000212 0C                     672 	.db #0x0c	; 12
      000213 38                     673 	.db #0x38	; 56	'8'
      000214 0C                     674 	.db #0x0c	; 12
      000215 CC                     675 	.db #0xcc	; 204
      000216 78                     676 	.db #0x78	; 120	'x'
      000217 00                     677 	.db #0x00	; 0
      000218 1C                     678 	.db #0x1c	; 28
      000219 3C                     679 	.db #0x3c	; 60
      00021A 6C                     680 	.db #0x6c	; 108	'l'
      00021B CC                     681 	.db #0xcc	; 204
      00021C FE                     682 	.db #0xfe	; 254
      00021D 0C                     683 	.db #0x0c	; 12
      00021E 1E                     684 	.db #0x1e	; 30
      00021F 00                     685 	.db #0x00	; 0
      000220 FC                     686 	.db #0xfc	; 252
      000221 C0                     687 	.db #0xc0	; 192
      000222 F8                     688 	.db #0xf8	; 248
      000223 0C                     689 	.db #0x0c	; 12
      000224 0C                     690 	.db #0x0c	; 12
      000225 CC                     691 	.db #0xcc	; 204
      000226 78                     692 	.db #0x78	; 120	'x'
      000227 00                     693 	.db #0x00	; 0
      000228 38                     694 	.db #0x38	; 56	'8'
      000229 60                     695 	.db #0x60	; 96
      00022A C0                     696 	.db #0xc0	; 192
      00022B F8                     697 	.db #0xf8	; 248
      00022C CC                     698 	.db #0xcc	; 204
      00022D CC                     699 	.db #0xcc	; 204
      00022E 78                     700 	.db #0x78	; 120	'x'
      00022F 00                     701 	.db #0x00	; 0
      000230 FC                     702 	.db #0xfc	; 252
      000231 CC                     703 	.db #0xcc	; 204
      000232 0C                     704 	.db #0x0c	; 12
      000233 18                     705 	.db #0x18	; 24
      000234 30                     706 	.db #0x30	; 48	'0'
      000235 30                     707 	.db #0x30	; 48	'0'
      000236 30                     708 	.db #0x30	; 48	'0'
      000237 00                     709 	.db #0x00	; 0
      000238 78                     710 	.db #0x78	; 120	'x'
      000239 CC                     711 	.db #0xcc	; 204
      00023A CC                     712 	.db #0xcc	; 204
      00023B 78                     713 	.db #0x78	; 120	'x'
      00023C CC                     714 	.db #0xcc	; 204
      00023D CC                     715 	.db #0xcc	; 204
      00023E 78                     716 	.db #0x78	; 120	'x'
      00023F 00                     717 	.db #0x00	; 0
      000240 78                     718 	.db #0x78	; 120	'x'
      000241 CC                     719 	.db #0xcc	; 204
      000242 CC                     720 	.db #0xcc	; 204
      000243 7C                     721 	.db #0x7c	; 124
      000244 0C                     722 	.db #0x0c	; 12
      000245 18                     723 	.db #0x18	; 24
      000246 70                     724 	.db #0x70	; 112	'p'
      000247 00                     725 	.db #0x00	; 0
      000248 00                     726 	.db #0x00	; 0
      000249 30                     727 	.db #0x30	; 48	'0'
      00024A 30                     728 	.db #0x30	; 48	'0'
      00024B 00                     729 	.db #0x00	; 0
      00024C 00                     730 	.db #0x00	; 0
      00024D 30                     731 	.db #0x30	; 48	'0'
      00024E 30                     732 	.db #0x30	; 48	'0'
      00024F 00                     733 	.db #0x00	; 0
      000250 00                     734 	.db #0x00	; 0
      000251 30                     735 	.db #0x30	; 48	'0'
      000252 30                     736 	.db #0x30	; 48	'0'
      000253 00                     737 	.db #0x00	; 0
      000254 30                     738 	.db #0x30	; 48	'0'
      000255 30                     739 	.db #0x30	; 48	'0'
      000256 60                     740 	.db #0x60	; 96
      000257 00                     741 	.db #0x00	; 0
      000258 18                     742 	.db #0x18	; 24
      000259 30                     743 	.db #0x30	; 48	'0'
      00025A 60                     744 	.db #0x60	; 96
      00025B C0                     745 	.db #0xc0	; 192
      00025C 60                     746 	.db #0x60	; 96
      00025D 30                     747 	.db #0x30	; 48	'0'
      00025E 18                     748 	.db #0x18	; 24
      00025F 00                     749 	.db #0x00	; 0
      000260 00                     750 	.db #0x00	; 0
      000261 00                     751 	.db #0x00	; 0
      000262 FC                     752 	.db #0xfc	; 252
      000263 00                     753 	.db #0x00	; 0
      000264 00                     754 	.db #0x00	; 0
      000265 FC                     755 	.db #0xfc	; 252
      000266 00                     756 	.db #0x00	; 0
      000267 00                     757 	.db #0x00	; 0
      000268 60                     758 	.db #0x60	; 96
      000269 30                     759 	.db #0x30	; 48	'0'
      00026A 18                     760 	.db #0x18	; 24
      00026B 0C                     761 	.db #0x0c	; 12
      00026C 18                     762 	.db #0x18	; 24
      00026D 30                     763 	.db #0x30	; 48	'0'
      00026E 60                     764 	.db #0x60	; 96
      00026F 00                     765 	.db #0x00	; 0
      000270 78                     766 	.db #0x78	; 120	'x'
      000271 CC                     767 	.db #0xcc	; 204
      000272 0C                     768 	.db #0x0c	; 12
      000273 18                     769 	.db #0x18	; 24
      000274 30                     770 	.db #0x30	; 48	'0'
      000275 00                     771 	.db #0x00	; 0
      000276 30                     772 	.db #0x30	; 48	'0'
      000277 00                     773 	.db #0x00	; 0
      000278 7C                     774 	.db #0x7c	; 124
      000279 C6                     775 	.db #0xc6	; 198
      00027A DE                     776 	.db #0xde	; 222
      00027B DE                     777 	.db #0xde	; 222
      00027C DE                     778 	.db #0xde	; 222
      00027D C0                     779 	.db #0xc0	; 192
      00027E 78                     780 	.db #0x78	; 120	'x'
      00027F 00                     781 	.db #0x00	; 0
      000280 30                     782 	.db #0x30	; 48	'0'
      000281 78                     783 	.db #0x78	; 120	'x'
      000282 CC                     784 	.db #0xcc	; 204
      000283 CC                     785 	.db #0xcc	; 204
      000284 FC                     786 	.db #0xfc	; 252
      000285 CC                     787 	.db #0xcc	; 204
      000286 CC                     788 	.db #0xcc	; 204
      000287 00                     789 	.db #0x00	; 0
      000288 FC                     790 	.db #0xfc	; 252
      000289 66                     791 	.db #0x66	; 102	'f'
      00028A 66                     792 	.db #0x66	; 102	'f'
      00028B 7C                     793 	.db #0x7c	; 124
      00028C 66                     794 	.db #0x66	; 102	'f'
      00028D 66                     795 	.db #0x66	; 102	'f'
      00028E FC                     796 	.db #0xfc	; 252
      00028F 00                     797 	.db #0x00	; 0
      000290 3C                     798 	.db #0x3c	; 60
      000291 66                     799 	.db #0x66	; 102	'f'
      000292 C0                     800 	.db #0xc0	; 192
      000293 C0                     801 	.db #0xc0	; 192
      000294 C0                     802 	.db #0xc0	; 192
      000295 66                     803 	.db #0x66	; 102	'f'
      000296 3C                     804 	.db #0x3c	; 60
      000297 00                     805 	.db #0x00	; 0
      000298 F8                     806 	.db #0xf8	; 248
      000299 6C                     807 	.db #0x6c	; 108	'l'
      00029A 66                     808 	.db #0x66	; 102	'f'
      00029B 66                     809 	.db #0x66	; 102	'f'
      00029C 66                     810 	.db #0x66	; 102	'f'
      00029D 6C                     811 	.db #0x6c	; 108	'l'
      00029E F8                     812 	.db #0xf8	; 248
      00029F 00                     813 	.db #0x00	; 0
      0002A0 FE                     814 	.db #0xfe	; 254
      0002A1 62                     815 	.db #0x62	; 98	'b'
      0002A2 68                     816 	.db #0x68	; 104	'h'
      0002A3 78                     817 	.db #0x78	; 120	'x'
      0002A4 68                     818 	.db #0x68	; 104	'h'
      0002A5 62                     819 	.db #0x62	; 98	'b'
      0002A6 FE                     820 	.db #0xfe	; 254
      0002A7 00                     821 	.db #0x00	; 0
      0002A8 FE                     822 	.db #0xfe	; 254
      0002A9 62                     823 	.db #0x62	; 98	'b'
      0002AA 68                     824 	.db #0x68	; 104	'h'
      0002AB 78                     825 	.db #0x78	; 120	'x'
      0002AC 68                     826 	.db #0x68	; 104	'h'
      0002AD 60                     827 	.db #0x60	; 96
      0002AE F0                     828 	.db #0xf0	; 240
      0002AF 00                     829 	.db #0x00	; 0
      0002B0 3C                     830 	.db #0x3c	; 60
      0002B1 66                     831 	.db #0x66	; 102	'f'
      0002B2 C0                     832 	.db #0xc0	; 192
      0002B3 C0                     833 	.db #0xc0	; 192
      0002B4 CE                     834 	.db #0xce	; 206
      0002B5 66                     835 	.db #0x66	; 102	'f'
      0002B6 3E                     836 	.db #0x3e	; 62
      0002B7 00                     837 	.db #0x00	; 0
      0002B8 CC                     838 	.db #0xcc	; 204
      0002B9 CC                     839 	.db #0xcc	; 204
      0002BA CC                     840 	.db #0xcc	; 204
      0002BB FC                     841 	.db #0xfc	; 252
      0002BC CC                     842 	.db #0xcc	; 204
      0002BD CC                     843 	.db #0xcc	; 204
      0002BE CC                     844 	.db #0xcc	; 204
      0002BF 00                     845 	.db #0x00	; 0
      0002C0 78                     846 	.db #0x78	; 120	'x'
      0002C1 30                     847 	.db #0x30	; 48	'0'
      0002C2 30                     848 	.db #0x30	; 48	'0'
      0002C3 30                     849 	.db #0x30	; 48	'0'
      0002C4 30                     850 	.db #0x30	; 48	'0'
      0002C5 30                     851 	.db #0x30	; 48	'0'
      0002C6 78                     852 	.db #0x78	; 120	'x'
      0002C7 00                     853 	.db #0x00	; 0
      0002C8 1E                     854 	.db #0x1e	; 30
      0002C9 0C                     855 	.db #0x0c	; 12
      0002CA 0C                     856 	.db #0x0c	; 12
      0002CB 0C                     857 	.db #0x0c	; 12
      0002CC CC                     858 	.db #0xcc	; 204
      0002CD CC                     859 	.db #0xcc	; 204
      0002CE 78                     860 	.db #0x78	; 120	'x'
      0002CF 00                     861 	.db #0x00	; 0
      0002D0 E6                     862 	.db #0xe6	; 230
      0002D1 66                     863 	.db #0x66	; 102	'f'
      0002D2 6C                     864 	.db #0x6c	; 108	'l'
      0002D3 78                     865 	.db #0x78	; 120	'x'
      0002D4 6C                     866 	.db #0x6c	; 108	'l'
      0002D5 66                     867 	.db #0x66	; 102	'f'
      0002D6 E6                     868 	.db #0xe6	; 230
      0002D7 00                     869 	.db #0x00	; 0
      0002D8 F0                     870 	.db #0xf0	; 240
      0002D9 60                     871 	.db #0x60	; 96
      0002DA 60                     872 	.db #0x60	; 96
      0002DB 60                     873 	.db #0x60	; 96
      0002DC 62                     874 	.db #0x62	; 98	'b'
      0002DD 66                     875 	.db #0x66	; 102	'f'
      0002DE FE                     876 	.db #0xfe	; 254
      0002DF 00                     877 	.db #0x00	; 0
      0002E0 C6                     878 	.db #0xc6	; 198
      0002E1 EE                     879 	.db #0xee	; 238
      0002E2 FE                     880 	.db #0xfe	; 254
      0002E3 FE                     881 	.db #0xfe	; 254
      0002E4 D6                     882 	.db #0xd6	; 214
      0002E5 C6                     883 	.db #0xc6	; 198
      0002E6 C6                     884 	.db #0xc6	; 198
      0002E7 00                     885 	.db #0x00	; 0
      0002E8 C6                     886 	.db #0xc6	; 198
      0002E9 E6                     887 	.db #0xe6	; 230
      0002EA F6                     888 	.db #0xf6	; 246
      0002EB DE                     889 	.db #0xde	; 222
      0002EC CE                     890 	.db #0xce	; 206
      0002ED C6                     891 	.db #0xc6	; 198
      0002EE C6                     892 	.db #0xc6	; 198
      0002EF 00                     893 	.db #0x00	; 0
      0002F0 38                     894 	.db #0x38	; 56	'8'
      0002F1 6C                     895 	.db #0x6c	; 108	'l'
      0002F2 C6                     896 	.db #0xc6	; 198
      0002F3 C6                     897 	.db #0xc6	; 198
      0002F4 C6                     898 	.db #0xc6	; 198
      0002F5 6C                     899 	.db #0x6c	; 108	'l'
      0002F6 38                     900 	.db #0x38	; 56	'8'
      0002F7 00                     901 	.db #0x00	; 0
      0002F8 FC                     902 	.db #0xfc	; 252
      0002F9 66                     903 	.db #0x66	; 102	'f'
      0002FA 66                     904 	.db #0x66	; 102	'f'
      0002FB 7C                     905 	.db #0x7c	; 124
      0002FC 60                     906 	.db #0x60	; 96
      0002FD 60                     907 	.db #0x60	; 96
      0002FE F0                     908 	.db #0xf0	; 240
      0002FF 00                     909 	.db #0x00	; 0
      000300 78                     910 	.db #0x78	; 120	'x'
      000301 CC                     911 	.db #0xcc	; 204
      000302 CC                     912 	.db #0xcc	; 204
      000303 CC                     913 	.db #0xcc	; 204
      000304 DC                     914 	.db #0xdc	; 220
      000305 78                     915 	.db #0x78	; 120	'x'
      000306 1C                     916 	.db #0x1c	; 28
      000307 00                     917 	.db #0x00	; 0
      000308 FC                     918 	.db #0xfc	; 252
      000309 66                     919 	.db #0x66	; 102	'f'
      00030A 66                     920 	.db #0x66	; 102	'f'
      00030B 7C                     921 	.db #0x7c	; 124
      00030C 6C                     922 	.db #0x6c	; 108	'l'
      00030D 66                     923 	.db #0x66	; 102	'f'
      00030E E6                     924 	.db #0xe6	; 230
      00030F 00                     925 	.db #0x00	; 0
      000310 78                     926 	.db #0x78	; 120	'x'
      000311 CC                     927 	.db #0xcc	; 204
      000312 E0                     928 	.db #0xe0	; 224
      000313 70                     929 	.db #0x70	; 112	'p'
      000314 1C                     930 	.db #0x1c	; 28
      000315 CC                     931 	.db #0xcc	; 204
      000316 78                     932 	.db #0x78	; 120	'x'
      000317 00                     933 	.db #0x00	; 0
      000318 FC                     934 	.db #0xfc	; 252
      000319 B4                     935 	.db #0xb4	; 180
      00031A 30                     936 	.db #0x30	; 48	'0'
      00031B 30                     937 	.db #0x30	; 48	'0'
      00031C 30                     938 	.db #0x30	; 48	'0'
      00031D 30                     939 	.db #0x30	; 48	'0'
      00031E 78                     940 	.db #0x78	; 120	'x'
      00031F 00                     941 	.db #0x00	; 0
      000320 CC                     942 	.db #0xcc	; 204
      000321 CC                     943 	.db #0xcc	; 204
      000322 CC                     944 	.db #0xcc	; 204
      000323 CC                     945 	.db #0xcc	; 204
      000324 CC                     946 	.db #0xcc	; 204
      000325 CC                     947 	.db #0xcc	; 204
      000326 FC                     948 	.db #0xfc	; 252
      000327 00                     949 	.db #0x00	; 0
      000328 CC                     950 	.db #0xcc	; 204
      000329 CC                     951 	.db #0xcc	; 204
      00032A CC                     952 	.db #0xcc	; 204
      00032B CC                     953 	.db #0xcc	; 204
      00032C CC                     954 	.db #0xcc	; 204
      00032D 78                     955 	.db #0x78	; 120	'x'
      00032E 30                     956 	.db #0x30	; 48	'0'
      00032F 00                     957 	.db #0x00	; 0
      000330 C6                     958 	.db #0xc6	; 198
      000331 C6                     959 	.db #0xc6	; 198
      000332 C6                     960 	.db #0xc6	; 198
      000333 D6                     961 	.db #0xd6	; 214
      000334 FE                     962 	.db #0xfe	; 254
      000335 EE                     963 	.db #0xee	; 238
      000336 C6                     964 	.db #0xc6	; 198
      000337 00                     965 	.db #0x00	; 0
      000338 C6                     966 	.db #0xc6	; 198
      000339 C6                     967 	.db #0xc6	; 198
      00033A 6C                     968 	.db #0x6c	; 108	'l'
      00033B 38                     969 	.db #0x38	; 56	'8'
      00033C 38                     970 	.db #0x38	; 56	'8'
      00033D 6C                     971 	.db #0x6c	; 108	'l'
      00033E C6                     972 	.db #0xc6	; 198
      00033F 00                     973 	.db #0x00	; 0
      000340 CC                     974 	.db #0xcc	; 204
      000341 CC                     975 	.db #0xcc	; 204
      000342 CC                     976 	.db #0xcc	; 204
      000343 78                     977 	.db #0x78	; 120	'x'
      000344 30                     978 	.db #0x30	; 48	'0'
      000345 30                     979 	.db #0x30	; 48	'0'
      000346 78                     980 	.db #0x78	; 120	'x'
      000347 00                     981 	.db #0x00	; 0
      000348 FE                     982 	.db #0xfe	; 254
      000349 C6                     983 	.db #0xc6	; 198
      00034A 8C                     984 	.db #0x8c	; 140
      00034B 18                     985 	.db #0x18	; 24
      00034C 32                     986 	.db #0x32	; 50	'2'
      00034D 66                     987 	.db #0x66	; 102	'f'
      00034E FE                     988 	.db #0xfe	; 254
      00034F 00                     989 	.db #0x00	; 0
      000350 78                     990 	.db #0x78	; 120	'x'
      000351 60                     991 	.db #0x60	; 96
      000352 60                     992 	.db #0x60	; 96
      000353 60                     993 	.db #0x60	; 96
      000354 60                     994 	.db #0x60	; 96
      000355 60                     995 	.db #0x60	; 96
      000356 78                     996 	.db #0x78	; 120	'x'
      000357 00                     997 	.db #0x00	; 0
      000358 C0                     998 	.db #0xc0	; 192
      000359 60                     999 	.db #0x60	; 96
      00035A 30                    1000 	.db #0x30	; 48	'0'
      00035B 18                    1001 	.db #0x18	; 24
      00035C 0C                    1002 	.db #0x0c	; 12
      00035D 06                    1003 	.db #0x06	; 6
      00035E 02                    1004 	.db #0x02	; 2
      00035F 00                    1005 	.db #0x00	; 0
      000360 78                    1006 	.db #0x78	; 120	'x'
      000361 18                    1007 	.db #0x18	; 24
      000362 18                    1008 	.db #0x18	; 24
      000363 18                    1009 	.db #0x18	; 24
      000364 18                    1010 	.db #0x18	; 24
      000365 18                    1011 	.db #0x18	; 24
      000366 78                    1012 	.db #0x78	; 120	'x'
      000367 00                    1013 	.db #0x00	; 0
      000368 10                    1014 	.db #0x10	; 16
      000369 38                    1015 	.db #0x38	; 56	'8'
      00036A 6C                    1016 	.db #0x6c	; 108	'l'
      00036B C6                    1017 	.db #0xc6	; 198
      00036C 00                    1018 	.db #0x00	; 0
      00036D 00                    1019 	.db #0x00	; 0
      00036E 00                    1020 	.db #0x00	; 0
      00036F 00                    1021 	.db #0x00	; 0
      000370 00                    1022 	.db #0x00	; 0
      000371 00                    1023 	.db #0x00	; 0
      000372 00                    1024 	.db #0x00	; 0
      000373 00                    1025 	.db #0x00	; 0
      000374 00                    1026 	.db #0x00	; 0
      000375 00                    1027 	.db #0x00	; 0
      000376 00                    1028 	.db #0x00	; 0
      000377 FF                    1029 	.db #0xff	; 255
      000378 30                    1030 	.db #0x30	; 48	'0'
      000379 30                    1031 	.db #0x30	; 48	'0'
      00037A 18                    1032 	.db #0x18	; 24
      00037B 00                    1033 	.db #0x00	; 0
      00037C 00                    1034 	.db #0x00	; 0
      00037D 00                    1035 	.db #0x00	; 0
      00037E 00                    1036 	.db #0x00	; 0
      00037F 00                    1037 	.db #0x00	; 0
      000380 00                    1038 	.db #0x00	; 0
      000381 00                    1039 	.db #0x00	; 0
      000382 78                    1040 	.db #0x78	; 120	'x'
      000383 0C                    1041 	.db #0x0c	; 12
      000384 7C                    1042 	.db #0x7c	; 124
      000385 CC                    1043 	.db #0xcc	; 204
      000386 76                    1044 	.db #0x76	; 118	'v'
      000387 00                    1045 	.db #0x00	; 0
      000388 E0                    1046 	.db #0xe0	; 224
      000389 60                    1047 	.db #0x60	; 96
      00038A 60                    1048 	.db #0x60	; 96
      00038B 7C                    1049 	.db #0x7c	; 124
      00038C 66                    1050 	.db #0x66	; 102	'f'
      00038D 66                    1051 	.db #0x66	; 102	'f'
      00038E DC                    1052 	.db #0xdc	; 220
      00038F 00                    1053 	.db #0x00	; 0
      000390 00                    1054 	.db #0x00	; 0
      000391 00                    1055 	.db #0x00	; 0
      000392 78                    1056 	.db #0x78	; 120	'x'
      000393 CC                    1057 	.db #0xcc	; 204
      000394 C0                    1058 	.db #0xc0	; 192
      000395 CC                    1059 	.db #0xcc	; 204
      000396 78                    1060 	.db #0x78	; 120	'x'
      000397 00                    1061 	.db #0x00	; 0
      000398 1C                    1062 	.db #0x1c	; 28
      000399 0C                    1063 	.db #0x0c	; 12
      00039A 0C                    1064 	.db #0x0c	; 12
      00039B 7C                    1065 	.db #0x7c	; 124
      00039C CC                    1066 	.db #0xcc	; 204
      00039D CC                    1067 	.db #0xcc	; 204
      00039E 76                    1068 	.db #0x76	; 118	'v'
      00039F 00                    1069 	.db #0x00	; 0
      0003A0 00                    1070 	.db #0x00	; 0
      0003A1 00                    1071 	.db #0x00	; 0
      0003A2 78                    1072 	.db #0x78	; 120	'x'
      0003A3 CC                    1073 	.db #0xcc	; 204
      0003A4 FC                    1074 	.db #0xfc	; 252
      0003A5 C0                    1075 	.db #0xc0	; 192
      0003A6 78                    1076 	.db #0x78	; 120	'x'
      0003A7 00                    1077 	.db #0x00	; 0
      0003A8 38                    1078 	.db #0x38	; 56	'8'
      0003A9 6C                    1079 	.db #0x6c	; 108	'l'
      0003AA 60                    1080 	.db #0x60	; 96
      0003AB F0                    1081 	.db #0xf0	; 240
      0003AC 60                    1082 	.db #0x60	; 96
      0003AD 60                    1083 	.db #0x60	; 96
      0003AE F0                    1084 	.db #0xf0	; 240
      0003AF 00                    1085 	.db #0x00	; 0
      0003B0 00                    1086 	.db #0x00	; 0
      0003B1 00                    1087 	.db #0x00	; 0
      0003B2 76                    1088 	.db #0x76	; 118	'v'
      0003B3 CC                    1089 	.db #0xcc	; 204
      0003B4 CC                    1090 	.db #0xcc	; 204
      0003B5 7C                    1091 	.db #0x7c	; 124
      0003B6 0C                    1092 	.db #0x0c	; 12
      0003B7 F8                    1093 	.db #0xf8	; 248
      0003B8 E0                    1094 	.db #0xe0	; 224
      0003B9 60                    1095 	.db #0x60	; 96
      0003BA 6C                    1096 	.db #0x6c	; 108	'l'
      0003BB 76                    1097 	.db #0x76	; 118	'v'
      0003BC 66                    1098 	.db #0x66	; 102	'f'
      0003BD 66                    1099 	.db #0x66	; 102	'f'
      0003BE E6                    1100 	.db #0xe6	; 230
      0003BF 00                    1101 	.db #0x00	; 0
      0003C0 30                    1102 	.db #0x30	; 48	'0'
      0003C1 00                    1103 	.db #0x00	; 0
      0003C2 70                    1104 	.db #0x70	; 112	'p'
      0003C3 30                    1105 	.db #0x30	; 48	'0'
      0003C4 30                    1106 	.db #0x30	; 48	'0'
      0003C5 30                    1107 	.db #0x30	; 48	'0'
      0003C6 78                    1108 	.db #0x78	; 120	'x'
      0003C7 00                    1109 	.db #0x00	; 0
      0003C8 0C                    1110 	.db #0x0c	; 12
      0003C9 00                    1111 	.db #0x00	; 0
      0003CA 0C                    1112 	.db #0x0c	; 12
      0003CB 0C                    1113 	.db #0x0c	; 12
      0003CC 0C                    1114 	.db #0x0c	; 12
      0003CD CC                    1115 	.db #0xcc	; 204
      0003CE CC                    1116 	.db #0xcc	; 204
      0003CF 78                    1117 	.db #0x78	; 120	'x'
      0003D0 E0                    1118 	.db #0xe0	; 224
      0003D1 60                    1119 	.db #0x60	; 96
      0003D2 66                    1120 	.db #0x66	; 102	'f'
      0003D3 6C                    1121 	.db #0x6c	; 108	'l'
      0003D4 78                    1122 	.db #0x78	; 120	'x'
      0003D5 6C                    1123 	.db #0x6c	; 108	'l'
      0003D6 E6                    1124 	.db #0xe6	; 230
      0003D7 00                    1125 	.db #0x00	; 0
      0003D8 70                    1126 	.db #0x70	; 112	'p'
      0003D9 30                    1127 	.db #0x30	; 48	'0'
      0003DA 30                    1128 	.db #0x30	; 48	'0'
      0003DB 30                    1129 	.db #0x30	; 48	'0'
      0003DC 30                    1130 	.db #0x30	; 48	'0'
      0003DD 30                    1131 	.db #0x30	; 48	'0'
      0003DE 78                    1132 	.db #0x78	; 120	'x'
      0003DF 00                    1133 	.db #0x00	; 0
      0003E0 00                    1134 	.db #0x00	; 0
      0003E1 00                    1135 	.db #0x00	; 0
      0003E2 CC                    1136 	.db #0xcc	; 204
      0003E3 FE                    1137 	.db #0xfe	; 254
      0003E4 FE                    1138 	.db #0xfe	; 254
      0003E5 D6                    1139 	.db #0xd6	; 214
      0003E6 C6                    1140 	.db #0xc6	; 198
      0003E7 00                    1141 	.db #0x00	; 0
      0003E8 00                    1142 	.db #0x00	; 0
      0003E9 00                    1143 	.db #0x00	; 0
      0003EA F8                    1144 	.db #0xf8	; 248
      0003EB CC                    1145 	.db #0xcc	; 204
      0003EC CC                    1146 	.db #0xcc	; 204
      0003ED CC                    1147 	.db #0xcc	; 204
      0003EE CC                    1148 	.db #0xcc	; 204
      0003EF 00                    1149 	.db #0x00	; 0
      0003F0 00                    1150 	.db #0x00	; 0
      0003F1 00                    1151 	.db #0x00	; 0
      0003F2 78                    1152 	.db #0x78	; 120	'x'
      0003F3 CC                    1153 	.db #0xcc	; 204
      0003F4 CC                    1154 	.db #0xcc	; 204
      0003F5 CC                    1155 	.db #0xcc	; 204
      0003F6 78                    1156 	.db #0x78	; 120	'x'
      0003F7 00                    1157 	.db #0x00	; 0
      0003F8 00                    1158 	.db #0x00	; 0
      0003F9 00                    1159 	.db #0x00	; 0
      0003FA DC                    1160 	.db #0xdc	; 220
      0003FB 66                    1161 	.db #0x66	; 102	'f'
      0003FC 66                    1162 	.db #0x66	; 102	'f'
      0003FD 7C                    1163 	.db #0x7c	; 124
      0003FE 60                    1164 	.db #0x60	; 96
      0003FF F0                    1165 	.db #0xf0	; 240
      000400 00                    1166 	.db #0x00	; 0
      000401 00                    1167 	.db #0x00	; 0
      000402 76                    1168 	.db #0x76	; 118	'v'
      000403 CC                    1169 	.db #0xcc	; 204
      000404 CC                    1170 	.db #0xcc	; 204
      000405 7C                    1171 	.db #0x7c	; 124
      000406 0C                    1172 	.db #0x0c	; 12
      000407 1E                    1173 	.db #0x1e	; 30
      000408 00                    1174 	.db #0x00	; 0
      000409 00                    1175 	.db #0x00	; 0
      00040A DC                    1176 	.db #0xdc	; 220
      00040B 76                    1177 	.db #0x76	; 118	'v'
      00040C 66                    1178 	.db #0x66	; 102	'f'
      00040D 60                    1179 	.db #0x60	; 96
      00040E F0                    1180 	.db #0xf0	; 240
      00040F 00                    1181 	.db #0x00	; 0
      000410 00                    1182 	.db #0x00	; 0
      000411 00                    1183 	.db #0x00	; 0
      000412 7C                    1184 	.db #0x7c	; 124
      000413 C0                    1185 	.db #0xc0	; 192
      000414 78                    1186 	.db #0x78	; 120	'x'
      000415 0C                    1187 	.db #0x0c	; 12
      000416 F8                    1188 	.db #0xf8	; 248
      000417 00                    1189 	.db #0x00	; 0
      000418 10                    1190 	.db #0x10	; 16
      000419 30                    1191 	.db #0x30	; 48	'0'
      00041A 7C                    1192 	.db #0x7c	; 124
      00041B 30                    1193 	.db #0x30	; 48	'0'
      00041C 30                    1194 	.db #0x30	; 48	'0'
      00041D 34                    1195 	.db #0x34	; 52	'4'
      00041E 18                    1196 	.db #0x18	; 24
      00041F 00                    1197 	.db #0x00	; 0
      000420 00                    1198 	.db #0x00	; 0
      000421 00                    1199 	.db #0x00	; 0
      000422 CC                    1200 	.db #0xcc	; 204
      000423 CC                    1201 	.db #0xcc	; 204
      000424 CC                    1202 	.db #0xcc	; 204
      000425 CC                    1203 	.db #0xcc	; 204
      000426 76                    1204 	.db #0x76	; 118	'v'
      000427 00                    1205 	.db #0x00	; 0
      000428 00                    1206 	.db #0x00	; 0
      000429 00                    1207 	.db #0x00	; 0
      00042A CC                    1208 	.db #0xcc	; 204
      00042B CC                    1209 	.db #0xcc	; 204
      00042C CC                    1210 	.db #0xcc	; 204
      00042D 78                    1211 	.db #0x78	; 120	'x'
      00042E 30                    1212 	.db #0x30	; 48	'0'
      00042F 00                    1213 	.db #0x00	; 0
      000430 00                    1214 	.db #0x00	; 0
      000431 00                    1215 	.db #0x00	; 0
      000432 C6                    1216 	.db #0xc6	; 198
      000433 D6                    1217 	.db #0xd6	; 214
      000434 FE                    1218 	.db #0xfe	; 254
      000435 FE                    1219 	.db #0xfe	; 254
      000436 6C                    1220 	.db #0x6c	; 108	'l'
      000437 00                    1221 	.db #0x00	; 0
      000438 00                    1222 	.db #0x00	; 0
      000439 00                    1223 	.db #0x00	; 0
      00043A C6                    1224 	.db #0xc6	; 198
      00043B 6C                    1225 	.db #0x6c	; 108	'l'
      00043C 38                    1226 	.db #0x38	; 56	'8'
      00043D 6C                    1227 	.db #0x6c	; 108	'l'
      00043E C6                    1228 	.db #0xc6	; 198
      00043F 00                    1229 	.db #0x00	; 0
      000440 00                    1230 	.db #0x00	; 0
      000441 00                    1231 	.db #0x00	; 0
      000442 CC                    1232 	.db #0xcc	; 204
      000443 CC                    1233 	.db #0xcc	; 204
      000444 CC                    1234 	.db #0xcc	; 204
      000445 7C                    1235 	.db #0x7c	; 124
      000446 0C                    1236 	.db #0x0c	; 12
      000447 F8                    1237 	.db #0xf8	; 248
      000448 00                    1238 	.db #0x00	; 0
      000449 00                    1239 	.db #0x00	; 0
      00044A FC                    1240 	.db #0xfc	; 252
      00044B 98                    1241 	.db #0x98	; 152
      00044C 30                    1242 	.db #0x30	; 48	'0'
      00044D 64                    1243 	.db #0x64	; 100	'd'
      00044E FC                    1244 	.db #0xfc	; 252
      00044F 00                    1245 	.db #0x00	; 0
      000450 1C                    1246 	.db #0x1c	; 28
      000451 30                    1247 	.db #0x30	; 48	'0'
      000452 30                    1248 	.db #0x30	; 48	'0'
      000453 E0                    1249 	.db #0xe0	; 224
      000454 30                    1250 	.db #0x30	; 48	'0'
      000455 30                    1251 	.db #0x30	; 48	'0'
      000456 1C                    1252 	.db #0x1c	; 28
      000457 00                    1253 	.db #0x00	; 0
      000458 18                    1254 	.db #0x18	; 24
      000459 18                    1255 	.db #0x18	; 24
      00045A 18                    1256 	.db #0x18	; 24
      00045B 00                    1257 	.db #0x00	; 0
      00045C 18                    1258 	.db #0x18	; 24
      00045D 18                    1259 	.db #0x18	; 24
      00045E 18                    1260 	.db #0x18	; 24
      00045F 00                    1261 	.db #0x00	; 0
      000460 E0                    1262 	.db #0xe0	; 224
      000461 30                    1263 	.db #0x30	; 48	'0'
      000462 30                    1264 	.db #0x30	; 48	'0'
      000463 1C                    1265 	.db #0x1c	; 28
      000464 30                    1266 	.db #0x30	; 48	'0'
      000465 30                    1267 	.db #0x30	; 48	'0'
      000466 E0                    1268 	.db #0xe0	; 224
      000467 00                    1269 	.db #0x00	; 0
      000468 76                    1270 	.db #0x76	; 118	'v'
      000469 DC                    1271 	.db #0xdc	; 220
      00046A 00                    1272 	.db #0x00	; 0
      00046B 00                    1273 	.db #0x00	; 0
      00046C 00                    1274 	.db #0x00	; 0
      00046D 00                    1275 	.db #0x00	; 0
      00046E 00                    1276 	.db #0x00	; 0
      00046F 00                    1277 	.db #0x00	; 0
      000470 00                    1278 	.db #0x00	; 0
      000471 10                    1279 	.db #0x10	; 16
      000472 38                    1280 	.db #0x38	; 56	'8'
      000473 6C                    1281 	.db #0x6c	; 108	'l'
      000474 C6                    1282 	.db #0xc6	; 198
      000475 C6                    1283 	.db #0xc6	; 198
      000476 FE                    1284 	.db #0xfe	; 254
      000477 00                    1285 	.db #0x00	; 0
      000478                       1286 _pattern_black_0:
      000478 FF                    1287 	.db #0xff	; 255
      000479 FF                    1288 	.db #0xff	; 255
      00047A FF                    1289 	.db #0xff	; 255
      00047B FF                    1290 	.db #0xff	; 255
      00047C FF                    1291 	.db #0xff	; 255
      00047D FF                    1292 	.db #0xff	; 255
      00047E FF                    1293 	.db #0xff	; 255
      00047F FF                    1294 	.db #0xff	; 255
      000480                       1295 _pattern_black_1:
      000480 FE                    1296 	.db #0xfe	; 254
      000481 FF                    1297 	.db #0xff	; 255
      000482 FF                    1298 	.db #0xff	; 255
      000483 FF                    1299 	.db #0xff	; 255
      000484 FE                    1300 	.db #0xfe	; 254
      000485 FF                    1301 	.db #0xff	; 255
      000486 FF                    1302 	.db #0xff	; 255
      000487 FE                    1303 	.db #0xfe	; 254
      000488                       1304 _pattern_black_2:
      000488 FF                    1305 	.db #0xff	; 255
      000489 FF                    1306 	.db #0xff	; 255
      00048A FF                    1307 	.db #0xff	; 255
      00048B FF                    1308 	.db #0xff	; 255
      00048C FF                    1309 	.db #0xff	; 255
      00048D FB                    1310 	.db #0xfb	; 251
      00048E FF                    1311 	.db #0xff	; 255
      00048F BB                    1312 	.db #0xbb	; 187
      000490                       1313 _pattern_black_3:
      000490 FB                    1314 	.db #0xfb	; 251
      000491 FE                    1315 	.db #0xfe	; 254
      000492 FD                    1316 	.db #0xfd	; 253
      000493 FE                    1317 	.db #0xfe	; 254
      000494 F7                    1318 	.db #0xf7	; 247
      000495 FA                    1319 	.db #0xfa	; 250
      000496 AF                    1320 	.db #0xaf	; 175
      000497 55                    1321 	.db #0x55	; 85	'U'
      000498                       1322 _pattern_0:
      000498 9F                    1323 	.db #0x9f	; 159
      000499 90                    1324 	.db #0x90	; 144
      00049A 90                    1325 	.db #0x90	; 144
      00049B 93                    1326 	.db #0x93	; 147
      00049C 92                    1327 	.db #0x92	; 146
      00049D 92                    1328 	.db #0x92	; 146
      00049E 92                    1329 	.db #0x92	; 146
      00049F 92                    1330 	.db #0x92	; 146
      0004A0                       1331 _pattern_1:
      0004A0 FF                    1332 	.db #0xff	; 255
      0004A1 01                    1333 	.db #0x01	; 1
      0004A2 01                    1334 	.db #0x01	; 1
      0004A3 F9                    1335 	.db #0xf9	; 249
      0004A4 09                    1336 	.db #0x09	; 9
      0004A5 09                    1337 	.db #0x09	; 9
      0004A6 49                    1338 	.db #0x49	; 73	'I'
      0004A7 49                    1339 	.db #0x49	; 73	'I'
      0004A8                       1340 _pattern_2:
      0004A8 92                    1341 	.db #0x92	; 146
      0004A9 93                    1342 	.db #0x93	; 147
      0004AA 90                    1343 	.db #0x90	; 144
      0004AB 90                    1344 	.db #0x90	; 144
      0004AC 9F                    1345 	.db #0x9f	; 159
      0004AD 80                    1346 	.db #0x80	; 128
      0004AE 80                    1347 	.db #0x80	; 128
      0004AF FF                    1348 	.db #0xff	; 255
      0004B0                       1349 _pattern_3:
      0004B0 49                    1350 	.db #0x49	; 73	'I'
      0004B1 C9                    1351 	.db #0xc9	; 201
      0004B2 09                    1352 	.db #0x09	; 9
      0004B3 09                    1353 	.db #0x09	; 9
      0004B4 F9                    1354 	.db #0xf9	; 249
      0004B5 01                    1355 	.db #0x01	; 1
      0004B6 01                    1356 	.db #0x01	; 1
      0004B7 FF                    1357 	.db #0xff	; 255
      0004B8                       1358 _pattern_4:
      0004B8 7F                    1359 	.db #0x7f	; 127
      0004B9 81                    1360 	.db #0x81	; 129
      0004BA 83                    1361 	.db #0x83	; 131
      0004BB 87                    1362 	.db #0x87	; 135
      0004BC 8F                    1363 	.db #0x8f	; 143
      0004BD 9F                    1364 	.db #0x9f	; 159
      0004BE BF                    1365 	.db #0xbf	; 191
      0004BF FF                    1366 	.db #0xff	; 255
      0004C0                       1367 _pattern_5:
      0004C0 FE                    1368 	.db #0xfe	; 254
      0004C1 81                    1369 	.db #0x81	; 129
      0004C2 C1                    1370 	.db #0xc1	; 193
      0004C3 E1                    1371 	.db #0xe1	; 225
      0004C4 F1                    1372 	.db #0xf1	; 241
      0004C5 F9                    1373 	.db #0xf9	; 249
      0004C6 FD                    1374 	.db #0xfd	; 253
      0004C7 FF                    1375 	.db #0xff	; 255
      0004C8                       1376 _pattern_6:
      0004C8 FF                    1377 	.db #0xff	; 255
      0004C9 BF                    1378 	.db #0xbf	; 191
      0004CA 9F                    1379 	.db #0x9f	; 159
      0004CB 8F                    1380 	.db #0x8f	; 143
      0004CC 87                    1381 	.db #0x87	; 135
      0004CD 83                    1382 	.db #0x83	; 131
      0004CE 81                    1383 	.db #0x81	; 129
      0004CF 7F                    1384 	.db #0x7f	; 127
      0004D0                       1385 _pattern_7:
      0004D0 FF                    1386 	.db #0xff	; 255
      0004D1 FD                    1387 	.db #0xfd	; 253
      0004D2 F9                    1388 	.db #0xf9	; 249
      0004D3 F1                    1389 	.db #0xf1	; 241
      0004D4 E1                    1390 	.db #0xe1	; 225
      0004D5 C1                    1391 	.db #0xc1	; 193
      0004D6 81                    1392 	.db #0x81	; 129
      0004D7 FE                    1393 	.db #0xfe	; 254
      0004D8                       1394 _pattern_8:
      0004D8 7F                    1395 	.db #0x7f	; 127
      0004D9 AE                    1396 	.db #0xae	; 174
      0004DA FF                    1397 	.db #0xff	; 255
      0004DB 5B                    1398 	.db #0x5b	; 91
      0004DC FF                    1399 	.db #0xff	; 255
      0004DD AE                    1400 	.db #0xae	; 174
      0004DE FF                    1401 	.db #0xff	; 255
      0004DF DF                    1402 	.db #0xdf	; 223
      0004E0                       1403 _pattern_9:
      0004E0 FE                    1404 	.db #0xfe	; 254
      0004E1 BD                    1405 	.db #0xbd	; 189
      0004E2 DF                    1406 	.db #0xdf	; 223
      0004E3 7F                    1407 	.db #0x7f	; 127
      0004E4 FB                    1408 	.db #0xfb	; 251
      0004E5 DF                    1409 	.db #0xdf	; 223
      0004E6 FE                    1410 	.db #0xfe	; 254
      0004E7 EF                    1411 	.db #0xef	; 239
      0004E8                       1412 _pattern_10:
      0004E8 7F                    1413 	.db #0x7f	; 127
      0004E9 FF                    1414 	.db #0xff	; 255
      0004EA ED                    1415 	.db #0xed	; 237
      0004EB FF                    1416 	.db #0xff	; 255
      0004EC B6                    1417 	.db #0xb6	; 182
      0004ED FE                    1418 	.db #0xfe	; 254
      0004EE DB                    1419 	.db #0xdb	; 219
      0004EF 7D                    1420 	.db #0x7d	; 125
      0004F0                       1421 _pattern_11:
      0004F0 FE                    1422 	.db #0xfe	; 254
      0004F1 FF                    1423 	.db #0xff	; 255
      0004F2 FE                    1424 	.db #0xfe	; 254
      0004F3 77                    1425 	.db #0x77	; 119	'w'
      0004F4 FE                    1426 	.db #0xfe	; 254
      0004F5 DD                    1427 	.db #0xdd	; 221
      0004F6 EF                    1428 	.db #0xef	; 239
      0004F7 5A                    1429 	.db #0x5a	; 90	'Z'
      0004F8                       1430 _pattern_12:
      0004F8 7F                    1431 	.db #0x7f	; 127
      0004F9 D5                    1432 	.db #0xd5	; 213
      0004FA BF                    1433 	.db #0xbf	; 191
      0004FB ED                    1434 	.db #0xed	; 237
      0004FC BF                    1435 	.db #0xbf	; 191
      0004FD F5                    1436 	.db #0xf5	; 245
      0004FE BF                    1437 	.db #0xbf	; 191
      0004FF FF                    1438 	.db #0xff	; 255
      000500                       1439 _pattern_13:
      000500 FE                    1440 	.db #0xfe	; 254
      000501 5F                    1441 	.db #0x5f	; 95
      000502 F5                    1442 	.db #0xf5	; 245
      000503 DF                    1443 	.db #0xdf	; 223
      000504 FF                    1444 	.db #0xff	; 255
      000505 FF                    1445 	.db #0xff	; 255
      000506 FF                    1446 	.db #0xff	; 255
      000507 FF                    1447 	.db #0xff	; 255
      000508                       1448 _pattern_14:
      000508 EF                    1449 	.db #0xef	; 239
      000509 BF                    1450 	.db #0xbf	; 191
      00050A 7F                    1451 	.db #0x7f	; 127
      00050B FF                    1452 	.db #0xff	; 255
      00050C FF                    1453 	.db #0xff	; 255
      00050D FF                    1454 	.db #0xff	; 255
      00050E DB                    1455 	.db #0xdb	; 219
      00050F 7F                    1456 	.db #0x7f	; 127
      000510                       1457 _pattern_15:
      000510 FF                    1458 	.db #0xff	; 255
      000511 FD                    1459 	.db #0xfd	; 253
      000512 FF                    1460 	.db #0xff	; 255
      000513 DB                    1461 	.db #0xdb	; 219
      000514 FD                    1462 	.db #0xfd	; 253
      000515 7B                    1463 	.db #0x7b	; 123
      000516 D7                    1464 	.db #0xd7	; 215
      000517 FE                    1465 	.db #0xfe	; 254
      000518                       1466 _pattern_16:
      000518 7F                    1467 	.db #0x7f	; 127
      000519 FF                    1468 	.db #0xff	; 255
      00051A EA                    1469 	.db #0xea	; 234
      00051B DF                    1470 	.db #0xdf	; 223
      00051C FF                    1471 	.db #0xff	; 255
      00051D DF                    1472 	.db #0xdf	; 223
      00051E FF                    1473 	.db #0xff	; 255
      00051F DF                    1474 	.db #0xdf	; 223
      000520                       1475 _pattern_17:
      000520 FE                    1476 	.db #0xfe	; 254
      000521 FF                    1477 	.db #0xff	; 255
      000522 AF                    1478 	.db #0xaf	; 175
      000523 FA                    1479 	.db #0xfa	; 250
      000524 FF                    1480 	.db #0xff	; 255
      000525 FA                    1481 	.db #0xfa	; 250
      000526 FF                    1482 	.db #0xff	; 255
      000527 FA                    1483 	.db #0xfa	; 250
      000528                       1484 _pattern_18:
      000528 FF                    1485 	.db #0xff	; 255
      000529 DF                    1486 	.db #0xdf	; 223
      00052A FF                    1487 	.db #0xff	; 255
      00052B DF                    1488 	.db #0xdf	; 223
      00052C FF                    1489 	.db #0xff	; 255
      00052D EA                    1490 	.db #0xea	; 234
      00052E FF                    1491 	.db #0xff	; 255
      00052F 55                    1492 	.db #0x55	; 85	'U'
      000530                       1493 _pattern_19:
      000530 FF                    1494 	.db #0xff	; 255
      000531 FA                    1495 	.db #0xfa	; 250
      000532 FF                    1496 	.db #0xff	; 255
      000533 FA                    1497 	.db #0xfa	; 250
      000534 F7                    1498 	.db #0xf7	; 247
      000535 AA                    1499 	.db #0xaa	; 170
      000536 FF                    1500 	.db #0xff	; 255
      000537 56                    1501 	.db #0x56	; 86	'V'
      000538                       1502 _pattern_20:
      000538 3F                    1503 	.db #0x3f	; 63
      000539 7F                    1504 	.db #0x7f	; 127
      00053A E0                    1505 	.db #0xe0	; 224
      00053B CE                    1506 	.db #0xce	; 206
      00053C E6                    1507 	.db #0xe6	; 230
      00053D 7C                    1508 	.db #0x7c	; 124
      00053E 39                    1509 	.db #0x39	; 57	'9'
      00053F 03                    1510 	.db #0x03	; 3
      000540                       1511 _pattern_21:
      000540 FF                    1512 	.db #0xff	; 255
      000541 FF                    1513 	.db #0xff	; 255
      000542 00                    1514 	.db #0x00	; 0
      000543 DB                    1515 	.db #0xdb	; 219
      000544 DB                    1516 	.db #0xdb	; 219
      000545 00                    1517 	.db #0x00	; 0
      000546 FF                    1518 	.db #0xff	; 255
      000547 FF                    1519 	.db #0xff	; 255
      000548                       1520 _pattern_22:
      000548 FC                    1521 	.db #0xfc	; 252
      000549 FE                    1522 	.db #0xfe	; 254
      00054A 07                    1523 	.db #0x07	; 7
      00054B 73                    1524 	.db #0x73	; 115	's'
      00054C 67                    1525 	.db #0x67	; 103	'g'
      00054D 3E                    1526 	.db #0x3e	; 62
      00054E 9C                    1527 	.db #0x9c	; 156
      00054F C0                    1528 	.db #0xc0	; 192
      000550                       1529 _pattern_23:
      000550 06                    1530 	.db #0x06	; 6
      000551 00                    1531 	.db #0x00	; 0
      000552 03                    1532 	.db #0x03	; 3
      000553 04                    1533 	.db #0x04	; 4
      000554 05                    1534 	.db #0x05	; 5
      000555 05                    1535 	.db #0x05	; 5
      000556 05                    1536 	.db #0x05	; 5
      000557 05                    1537 	.db #0x05	; 5
      000558                       1538 _pattern_24:
      000558 00                    1539 	.db #0x00	; 0
      000559 00                    1540 	.db #0x00	; 0
      00055A 33                    1541 	.db #0x33	; 51	'3'
      00055B 44                    1542 	.db #0x44	; 68	'D'
      00055C 55                    1543 	.db #0x55	; 85	'U'
      00055D 55                    1544 	.db #0x55	; 85	'U'
      00055E 55                    1545 	.db #0x55	; 85	'U'
      00055F 55                    1546 	.db #0x55	; 85	'U'
      000560                       1547 _pattern_25:
      000560 60                    1548 	.db #0x60	; 96
      000561 00                    1549 	.db #0x00	; 0
      000562 40                    1550 	.db #0x40	; 64
      000563 20                    1551 	.db #0x20	; 32
      000564 20                    1552 	.db #0x20	; 32
      000565 20                    1553 	.db #0x20	; 32
      000566 20                    1554 	.db #0x20	; 32
      000567 20                    1555 	.db #0x20	; 32
      000568                       1556 _pattern_26:
      000568 05                    1557 	.db #0x05	; 5
      000569 05                    1558 	.db #0x05	; 5
      00056A 05                    1559 	.db #0x05	; 5
      00056B 05                    1560 	.db #0x05	; 5
      00056C 05                    1561 	.db #0x05	; 5
      00056D 05                    1562 	.db #0x05	; 5
      00056E 05                    1563 	.db #0x05	; 5
      00056F 05                    1564 	.db #0x05	; 5
      000570                       1565 _pattern_27:
      000570 55                    1566 	.db #0x55	; 85	'U'
      000571 55                    1567 	.db #0x55	; 85	'U'
      000572 55                    1568 	.db #0x55	; 85	'U'
      000573 55                    1569 	.db #0x55	; 85	'U'
      000574 55                    1570 	.db #0x55	; 85	'U'
      000575 55                    1571 	.db #0x55	; 85	'U'
      000576 55                    1572 	.db #0x55	; 85	'U'
      000577 55                    1573 	.db #0x55	; 85	'U'
      000578                       1574 _pattern_28:
      000578 20                    1575 	.db #0x20	; 32
      000579 20                    1576 	.db #0x20	; 32
      00057A 20                    1577 	.db #0x20	; 32
      00057B 20                    1578 	.db #0x20	; 32
      00057C 20                    1579 	.db #0x20	; 32
      00057D 20                    1580 	.db #0x20	; 32
      00057E 20                    1581 	.db #0x20	; 32
      00057F 20                    1582 	.db #0x20	; 32
      000580                       1583 _pattern_29:
      000580 05                    1584 	.db #0x05	; 5
      000581 05                    1585 	.db #0x05	; 5
      000582 07                    1586 	.db #0x07	; 7
      000583 07                    1587 	.db #0x07	; 7
      000584 07                    1588 	.db #0x07	; 7
      000585 05                    1589 	.db #0x05	; 5
      000586 05                    1590 	.db #0x05	; 5
      000587 05                    1591 	.db #0x05	; 5
      000588                       1592 _pattern_30:
      000588 55                    1593 	.db #0x55	; 85	'U'
      000589 55                    1594 	.db #0x55	; 85	'U'
      00058A FF                    1595 	.db #0xff	; 255
      00058B FF                    1596 	.db #0xff	; 255
      00058C FF                    1597 	.db #0xff	; 255
      00058D 55                    1598 	.db #0x55	; 85	'U'
      00058E 55                    1599 	.db #0x55	; 85	'U'
      00058F 55                    1600 	.db #0x55	; 85	'U'
      000590                       1601 _pattern_31:
      000590 20                    1602 	.db #0x20	; 32
      000591 20                    1603 	.db #0x20	; 32
      000592 E0                    1604 	.db #0xe0	; 224
      000593 E0                    1605 	.db #0xe0	; 224
      000594 E0                    1606 	.db #0xe0	; 224
      000595 20                    1607 	.db #0x20	; 32
      000596 20                    1608 	.db #0x20	; 32
      000597 20                    1609 	.db #0x20	; 32
      000598                       1610 _pattern_37:
      000598 05                    1611 	.db #0x05	; 5
      000599 05                    1612 	.db #0x05	; 5
      00059A 05                    1613 	.db #0x05	; 5
      00059B 05                    1614 	.db #0x05	; 5
      00059C 04                    1615 	.db #0x04	; 4
      00059D 03                    1616 	.db #0x03	; 3
      00059E 00                    1617 	.db #0x00	; 0
      00059F 06                    1618 	.db #0x06	; 6
      0005A0                       1619 _pattern_38:
      0005A0 55                    1620 	.db #0x55	; 85	'U'
      0005A1 55                    1621 	.db #0x55	; 85	'U'
      0005A2 55                    1622 	.db #0x55	; 85	'U'
      0005A3 55                    1623 	.db #0x55	; 85	'U'
      0005A4 44                    1624 	.db #0x44	; 68	'D'
      0005A5 33                    1625 	.db #0x33	; 51	'3'
      0005A6 00                    1626 	.db #0x00	; 0
      0005A7 00                    1627 	.db #0x00	; 0
      0005A8                       1628 _pattern_39:
      0005A8 20                    1629 	.db #0x20	; 32
      0005A9 20                    1630 	.db #0x20	; 32
      0005AA 20                    1631 	.db #0x20	; 32
      0005AB 20                    1632 	.db #0x20	; 32
      0005AC 20                    1633 	.db #0x20	; 32
      0005AD 40                    1634 	.db #0x40	; 64
      0005AE 00                    1635 	.db #0x00	; 0
      0005AF 60                    1636 	.db #0x60	; 96
      0005B0                       1637 _pattern_32:
      0005B0 03                    1638 	.db #0x03	; 3
      0005B1 39                    1639 	.db #0x39	; 57	'9'
      0005B2 7C                    1640 	.db #0x7c	; 124
      0005B3 E6                    1641 	.db #0xe6	; 230
      0005B4 CE                    1642 	.db #0xce	; 206
      0005B5 E0                    1643 	.db #0xe0	; 224
      0005B6 7F                    1644 	.db #0x7f	; 127
      0005B7 3F                    1645 	.db #0x3f	; 63
      0005B8                       1646 _pattern_33:
      0005B8 FF                    1647 	.db #0xff	; 255
      0005B9 FF                    1648 	.db #0xff	; 255
      0005BA 00                    1649 	.db #0x00	; 0
      0005BB DB                    1650 	.db #0xdb	; 219
      0005BC DB                    1651 	.db #0xdb	; 219
      0005BD 00                    1652 	.db #0x00	; 0
      0005BE FF                    1653 	.db #0xff	; 255
      0005BF FF                    1654 	.db #0xff	; 255
      0005C0                       1655 _pattern_34:
      0005C0 C0                    1656 	.db #0xc0	; 192
      0005C1 9C                    1657 	.db #0x9c	; 156
      0005C2 3E                    1658 	.db #0x3e	; 62
      0005C3 67                    1659 	.db #0x67	; 103	'g'
      0005C4 73                    1660 	.db #0x73	; 115	's'
      0005C5 07                    1661 	.db #0x07	; 7
      0005C6 FE                    1662 	.db #0xfe	; 254
      0005C7 FC                    1663 	.db #0xfc	; 252
      0005C8                       1664 _sprite_dust_0:
      0005C8 10                    1665 	.db #0x10	; 16
      0005C9 42                    1666 	.db #0x42	; 66	'B'
      0005CA 10                    1667 	.db #0x10	; 16
      0005CB 45                    1668 	.db #0x45	; 69	'E'
      0005CC 20                    1669 	.db #0x20	; 32
      0005CD 89                    1670 	.db #0x89	; 137
      0005CE 20                    1671 	.db #0x20	; 32
      0005CF 88                    1672 	.db #0x88	; 136
      0005D0                       1673 _sprite_dust_1:
      0005D0 10                    1674 	.db #0x10	; 16
      0005D1 42                    1675 	.db #0x42	; 66	'B'
      0005D2 00                    1676 	.db #0x00	; 0
      0005D3 04                    1677 	.db #0x04	; 4
      0005D4 20                    1678 	.db #0x20	; 32
      0005D5 81                    1679 	.db #0x81	; 129
      0005D6 20                    1680 	.db #0x20	; 32
      0005D7 08                    1681 	.db #0x08	; 8
      0005D8                       1682 _sprite_dust_2:
      0005D8 10                    1683 	.db #0x10	; 16
      0005D9 00                    1684 	.db #0x00	; 0
      0005DA 00                    1685 	.db #0x00	; 0
      0005DB 04                    1686 	.db #0x04	; 4
      0005DC 20                    1687 	.db #0x20	; 32
      0005DD 80                    1688 	.db #0x80	; 128
      0005DE 20                    1689 	.db #0x20	; 32
      0005DF 00                    1690 	.db #0x00	; 0
      0005E0                       1691 _sprite_dust_3:
      0005E0 10                    1692 	.db #0x10	; 16
      0005E1 00                    1693 	.db #0x00	; 0
      0005E2 00                    1694 	.db #0x00	; 0
      0005E3 04                    1695 	.db #0x04	; 4
      0005E4 00                    1696 	.db #0x00	; 0
      0005E5 00                    1697 	.db #0x00	; 0
      0005E6 20                    1698 	.db #0x20	; 32
      0005E7 00                    1699 	.db #0x00	; 0
      0005E8                       1700 _pattern_title:
      0005E8 FE                    1701 	.db #0xfe	; 254
      0005E9 FE                    1702 	.db #0xfe	; 254
      0005EA FE                    1703 	.db #0xfe	; 254
      0005EB FE                    1704 	.db #0xfe	; 254
      0005EC FE                    1705 	.db #0xfe	; 254
      0005ED FE                    1706 	.db #0xfe	; 254
      0005EE FE                    1707 	.db #0xfe	; 254
      0005EF 00                    1708 	.db #0x00	; 0
      0005F0                       1709 _color_black_0:
      0005F0 14                    1710 	.db #0x14	; 20
      0005F1 14                    1711 	.db #0x14	; 20
      0005F2 14                    1712 	.db #0x14	; 20
      0005F3 14                    1713 	.db #0x14	; 20
      0005F4 14                    1714 	.db #0x14	; 20
      0005F5 14                    1715 	.db #0x14	; 20
      0005F6 14                    1716 	.db #0x14	; 20
      0005F7 14                    1717 	.db #0x14	; 20
      0005F8                       1718 _color_black_1:
      0005F8 14                    1719 	.db #0x14	; 20
      0005F9 14                    1720 	.db #0x14	; 20
      0005FA 14                    1721 	.db #0x14	; 20
      0005FB 14                    1722 	.db #0x14	; 20
      0005FC 14                    1723 	.db #0x14	; 20
      0005FD 14                    1724 	.db #0x14	; 20
      0005FE 14                    1725 	.db #0x14	; 20
      0005FF 14                    1726 	.db #0x14	; 20
      000600                       1727 _color_black_2:
      000600 14                    1728 	.db #0x14	; 20
      000601 14                    1729 	.db #0x14	; 20
      000602 14                    1730 	.db #0x14	; 20
      000603 14                    1731 	.db #0x14	; 20
      000604 14                    1732 	.db #0x14	; 20
      000605 14                    1733 	.db #0x14	; 20
      000606 14                    1734 	.db #0x14	; 20
      000607 14                    1735 	.db #0x14	; 20
      000608                       1736 _color_black_3:
      000608 14                    1737 	.db #0x14	; 20
      000609 14                    1738 	.db #0x14	; 20
      00060A 14                    1739 	.db #0x14	; 20
      00060B 14                    1740 	.db #0x14	; 20
      00060C 14                    1741 	.db #0x14	; 20
      00060D 14                    1742 	.db #0x14	; 20
      00060E 14                    1743 	.db #0x14	; 20
      00060F 14                    1744 	.db #0x14	; 20
      000610                       1745 _color_0:
      000610 13                    1746 	.db #0x13	; 19
      000611 13                    1747 	.db #0x13	; 19
      000612 13                    1748 	.db #0x13	; 19
      000613 13                    1749 	.db #0x13	; 19
      000614 13                    1750 	.db #0x13	; 19
      000615 13                    1751 	.db #0x13	; 19
      000616 13                    1752 	.db #0x13	; 19
      000617 13                    1753 	.db #0x13	; 19
      000618                       1754 _color_1:
      000618 12                    1755 	.db #0x12	; 18
      000619 12                    1756 	.db #0x12	; 18
      00061A 12                    1757 	.db #0x12	; 18
      00061B 12                    1758 	.db #0x12	; 18
      00061C 12                    1759 	.db #0x12	; 18
      00061D 12                    1760 	.db #0x12	; 18
      00061E 12                    1761 	.db #0x12	; 18
      00061F 12                    1762 	.db #0x12	; 18
      000620                       1763 _color_2:
      000620 12                    1764 	.db #0x12	; 18
      000621 12                    1765 	.db #0x12	; 18
      000622 12                    1766 	.db #0x12	; 18
      000623 12                    1767 	.db #0x12	; 18
      000624 12                    1768 	.db #0x12	; 18
      000625 12                    1769 	.db #0x12	; 18
      000626 12                    1770 	.db #0x12	; 18
      000627 12                    1771 	.db #0x12	; 18
      000628                       1772 _color_3:
      000628 1C                    1773 	.db #0x1c	; 28
      000629 1C                    1774 	.db #0x1c	; 28
      00062A 1C                    1775 	.db #0x1c	; 28
      00062B 1C                    1776 	.db #0x1c	; 28
      00062C 1C                    1777 	.db #0x1c	; 28
      00062D 1C                    1778 	.db #0x1c	; 28
      00062E 1C                    1779 	.db #0x1c	; 28
      00062F 1C                    1780 	.db #0x1c	; 28
      000630                       1781 _color_4:
      000630 96                    1782 	.db #0x96	; 150
      000631 96                    1783 	.db #0x96	; 150
      000632 96                    1784 	.db #0x96	; 150
      000633 96                    1785 	.db #0x96	; 150
      000634 96                    1786 	.db #0x96	; 150
      000635 96                    1787 	.db #0x96	; 150
      000636 96                    1788 	.db #0x96	; 150
      000637 96                    1789 	.db #0x96	; 150
      000638                       1790 _color_5:
      000638 98                    1791 	.db #0x98	; 152
      000639 68                    1792 	.db #0x68	; 104	'h'
      00063A 68                    1793 	.db #0x68	; 104	'h'
      00063B 68                    1794 	.db #0x68	; 104	'h'
      00063C 68                    1795 	.db #0x68	; 104	'h'
      00063D 68                    1796 	.db #0x68	; 104	'h'
      00063E 68                    1797 	.db #0x68	; 104	'h'
      00063F 68                    1798 	.db #0x68	; 104	'h'
      000640                       1799 _color_6:
      000640 68                    1800 	.db #0x68	; 104	'h'
      000641 68                    1801 	.db #0x68	; 104	'h'
      000642 68                    1802 	.db #0x68	; 104	'h'
      000643 68                    1803 	.db #0x68	; 104	'h'
      000644 68                    1804 	.db #0x68	; 104	'h'
      000645 68                    1805 	.db #0x68	; 104	'h'
      000646 68                    1806 	.db #0x68	; 104	'h'
      000647 68                    1807 	.db #0x68	; 104	'h'
      000648                       1808 _color_7:
      000648 89                    1809 	.db #0x89	; 137
      000649 89                    1810 	.db #0x89	; 137
      00064A 89                    1811 	.db #0x89	; 137
      00064B 89                    1812 	.db #0x89	; 137
      00064C 89                    1813 	.db #0x89	; 137
      00064D 89                    1814 	.db #0x89	; 137
      00064E 89                    1815 	.db #0x89	; 137
      00064F 86                    1816 	.db #0x86	; 134
      000650                       1817 _color_8:
      000650 41                    1818 	.db #0x41	; 65	'A'
      000651 47                    1819 	.db #0x47	; 71	'G'
      000652 47                    1820 	.db #0x47	; 71	'G'
      000653 47                    1821 	.db #0x47	; 71	'G'
      000654 47                    1822 	.db #0x47	; 71	'G'
      000655 47                    1823 	.db #0x47	; 71	'G'
      000656 47                    1824 	.db #0x47	; 71	'G'
      000657 47                    1825 	.db #0x47	; 71	'G'
      000658                       1826 _color_9:
      000658 41                    1827 	.db #0x41	; 65	'A'
      000659 45                    1828 	.db #0x45	; 69	'E'
      00065A 47                    1829 	.db #0x47	; 71	'G'
      00065B 47                    1830 	.db #0x47	; 71	'G'
      00065C 45                    1831 	.db #0x45	; 69	'E'
      00065D 45                    1832 	.db #0x45	; 69	'E'
      00065E 41                    1833 	.db #0x41	; 65	'A'
      00065F 45                    1834 	.db #0x45	; 69	'E'
      000660                       1835 _color_10:
      000660 47                    1836 	.db #0x47	; 71	'G'
      000661 45                    1837 	.db #0x45	; 69	'E'
      000662 45                    1838 	.db #0x45	; 69	'E'
      000663 45                    1839 	.db #0x45	; 69	'E'
      000664 45                    1840 	.db #0x45	; 69	'E'
      000665 41                    1841 	.db #0x41	; 65	'A'
      000666 45                    1842 	.db #0x45	; 69	'E'
      000667 41                    1843 	.db #0x41	; 65	'A'
      000668                       1844 _color_11:
      000668 41                    1845 	.db #0x41	; 65	'A'
      000669 41                    1846 	.db #0x41	; 65	'A'
      00066A 41                    1847 	.db #0x41	; 65	'A'
      00066B 41                    1848 	.db #0x41	; 65	'A'
      00066C 41                    1849 	.db #0x41	; 65	'A'
      00066D 41                    1850 	.db #0x41	; 65	'A'
      00066E 41                    1851 	.db #0x41	; 65	'A'
      00066F 41                    1852 	.db #0x41	; 65	'A'
      000670                       1853 _color_12:
      000670 D1                    1854 	.db #0xd1	; 209
      000671 DF                    1855 	.db #0xdf	; 223
      000672 DF                    1856 	.db #0xdf	; 223
      000673 DF                    1857 	.db #0xdf	; 223
      000674 DF                    1858 	.db #0xdf	; 223
      000675 DF                    1859 	.db #0xdf	; 223
      000676 DF                    1860 	.db #0xdf	; 223
      000677 DF                    1861 	.db #0xdf	; 223
      000678                       1862 _color_13:
      000678 D1                    1863 	.db #0xd1	; 209
      000679 DF                    1864 	.db #0xdf	; 223
      00067A DF                    1865 	.db #0xdf	; 223
      00067B DF                    1866 	.db #0xdf	; 223
      00067C DF                    1867 	.db #0xdf	; 223
      00067D DF                    1868 	.db #0xdf	; 223
      00067E DF                    1869 	.db #0xdf	; 223
      00067F DF                    1870 	.db #0xdf	; 223
      000680                       1871 _color_14:
      000680 DF                    1872 	.db #0xdf	; 223
      000681 DF                    1873 	.db #0xdf	; 223
      000682 DF                    1874 	.db #0xdf	; 223
      000683 D1                    1875 	.db #0xd1	; 209
      000684 D1                    1876 	.db #0xd1	; 209
      000685 D1                    1877 	.db #0xd1	; 209
      000686 D1                    1878 	.db #0xd1	; 209
      000687 D1                    1879 	.db #0xd1	; 209
      000688                       1880 _color_15:
      000688 D1                    1881 	.db #0xd1	; 209
      000689 D1                    1882 	.db #0xd1	; 209
      00068A D1                    1883 	.db #0xd1	; 209
      00068B D1                    1884 	.db #0xd1	; 209
      00068C D1                    1885 	.db #0xd1	; 209
      00068D D1                    1886 	.db #0xd1	; 209
      00068E D1                    1887 	.db #0xd1	; 209
      00068F D1                    1888 	.db #0xd1	; 209
      000690                       1889 _color_16:
      000690 A1                    1890 	.db #0xa1	; 161
      000691 BF                    1891 	.db #0xbf	; 191
      000692 BF                    1892 	.db #0xbf	; 191
      000693 BF                    1893 	.db #0xbf	; 191
      000694 BF                    1894 	.db #0xbf	; 191
      000695 BF                    1895 	.db #0xbf	; 191
      000696 BF                    1896 	.db #0xbf	; 191
      000697 BF                    1897 	.db #0xbf	; 191
      000698                       1898 _color_17:
      000698 A1                    1899 	.db #0xa1	; 161
      000699 AF                    1900 	.db #0xaf	; 175
      00069A AF                    1901 	.db #0xaf	; 175
      00069B A1                    1902 	.db #0xa1	; 161
      00069C A1                    1903 	.db #0xa1	; 161
      00069D A1                    1904 	.db #0xa1	; 161
      00069E A1                    1905 	.db #0xa1	; 161
      00069F A1                    1906 	.db #0xa1	; 161
      0006A0                       1907 _color_18:
      0006A0 AF                    1908 	.db #0xaf	; 175
      0006A1 AF                    1909 	.db #0xaf	; 175
      0006A2 AF                    1910 	.db #0xaf	; 175
      0006A3 AF                    1911 	.db #0xaf	; 175
      0006A4 A1                    1912 	.db #0xa1	; 161
      0006A5 A1                    1913 	.db #0xa1	; 161
      0006A6 A1                    1914 	.db #0xa1	; 161
      0006A7 A1                    1915 	.db #0xa1	; 161
      0006A8                       1916 _color_19:
      0006A8 B1                    1917 	.db #0xb1	; 177
      0006A9 B1                    1918 	.db #0xb1	; 177
      0006AA B1                    1919 	.db #0xb1	; 177
      0006AB B1                    1920 	.db #0xb1	; 177
      0006AC B1                    1921 	.db #0xb1	; 177
      0006AD B1                    1922 	.db #0xb1	; 177
      0006AE B1                    1923 	.db #0xb1	; 177
      0006AF B1                    1924 	.db #0xb1	; 177
      0006B0                       1925 _color_column_1:
      0006B0 F1                    1926 	.db #0xf1	; 241
      0006B1 E1                    1927 	.db #0xe1	; 225
      0006B2 E1                    1928 	.db #0xe1	; 225
      0006B3 E1                    1929 	.db #0xe1	; 225
      0006B4 E1                    1930 	.db #0xe1	; 225
      0006B5 E1                    1931 	.db #0xe1	; 225
      0006B6 E1                    1932 	.db #0xe1	; 225
      0006B7 E1                    1933 	.db #0xe1	; 225
      0006B8                       1934 _color_column_2:
      0006B8 F1                    1935 	.db #0xf1	; 241
      0006B9 E1                    1936 	.db #0xe1	; 225
      0006BA E1                    1937 	.db #0xe1	; 225
      0006BB E1                    1938 	.db #0xe1	; 225
      0006BC E1                    1939 	.db #0xe1	; 225
      0006BD E1                    1940 	.db #0xe1	; 225
      0006BE E1                    1941 	.db #0xe1	; 225
      0006BF E1                    1942 	.db #0xe1	; 225
      0006C0                       1943 _color_column_3:
      0006C0 F1                    1944 	.db #0xf1	; 241
      0006C1 E1                    1945 	.db #0xe1	; 225
      0006C2 E1                    1946 	.db #0xe1	; 225
      0006C3 E1                    1947 	.db #0xe1	; 225
      0006C4 E1                    1948 	.db #0xe1	; 225
      0006C5 E1                    1949 	.db #0xe1	; 225
      0006C6 E1                    1950 	.db #0xe1	; 225
      0006C7 E1                    1951 	.db #0xe1	; 225
      0006C8                       1952 _color_column_4:
      0006C8 F1                    1953 	.db #0xf1	; 241
      0006C9 F1                    1954 	.db #0xf1	; 241
      0006CA F1                    1955 	.db #0xf1	; 241
      0006CB F1                    1956 	.db #0xf1	; 241
      0006CC F1                    1957 	.db #0xf1	; 241
      0006CD F1                    1958 	.db #0xf1	; 241
      0006CE F1                    1959 	.db #0xf1	; 241
      0006CF F1                    1960 	.db #0xf1	; 241
      0006D0                       1961 _color_column_5:
      0006D0 E1                    1962 	.db #0xe1	; 225
      0006D1 E1                    1963 	.db #0xe1	; 225
      0006D2 E1                    1964 	.db #0xe1	; 225
      0006D3 E1                    1965 	.db #0xe1	; 225
      0006D4 E1                    1966 	.db #0xe1	; 225
      0006D5 E1                    1967 	.db #0xe1	; 225
      0006D6 E1                    1968 	.db #0xe1	; 225
      0006D7 E1                    1969 	.db #0xe1	; 225
      0006D8                       1970 _color_column_6:
      0006D8 E1                    1971 	.db #0xe1	; 225
      0006D9 E1                    1972 	.db #0xe1	; 225
      0006DA E1                    1973 	.db #0xe1	; 225
      0006DB 41                    1974 	.db #0x41	; 65	'A'
      0006DC 41                    1975 	.db #0x41	; 65	'A'
      0006DD 41                    1976 	.db #0x41	; 65	'A'
      0006DE 41                    1977 	.db #0x41	; 65	'A'
      0006DF 41                    1978 	.db #0x41	; 65	'A'
      0006E0                       1979 _color_column_7:
      0006E0 F1                    1980 	.db #0xf1	; 241
      0006E1 F1                    1981 	.db #0xf1	; 241
      0006E2 F1                    1982 	.db #0xf1	; 241
      0006E3 F1                    1983 	.db #0xf1	; 241
      0006E4 F1                    1984 	.db #0xf1	; 241
      0006E5 F1                    1985 	.db #0xf1	; 241
      0006E6 F1                    1986 	.db #0xf1	; 241
      0006E7 F1                    1987 	.db #0xf1	; 241
      0006E8                       1988 _color_column_8:
      0006E8 E1                    1989 	.db #0xe1	; 225
      0006E9 E1                    1990 	.db #0xe1	; 225
      0006EA E1                    1991 	.db #0xe1	; 225
      0006EB F1                    1992 	.db #0xf1	; 241
      0006EC E1                    1993 	.db #0xe1	; 225
      0006ED E1                    1994 	.db #0xe1	; 225
      0006EE E1                    1995 	.db #0xe1	; 225
      0006EF E1                    1996 	.db #0xe1	; 225
      0006F0                       1997 _color_column_9:
      0006F0 41                    1998 	.db #0x41	; 65	'A'
      0006F1 41                    1999 	.db #0x41	; 65	'A'
      0006F2 41                    2000 	.db #0x41	; 65	'A'
      0006F3 F1                    2001 	.db #0xf1	; 241
      0006F4 41                    2002 	.db #0x41	; 65	'A'
      0006F5 41                    2003 	.db #0x41	; 65	'A'
      0006F6 41                    2004 	.db #0x41	; 65	'A'
      0006F7 41                    2005 	.db #0x41	; 65	'A'
      0006F8                       2006 _color_column_10:
      0006F8 F1                    2007 	.db #0xf1	; 241
      0006F9 F1                    2008 	.db #0xf1	; 241
      0006FA F1                    2009 	.db #0xf1	; 241
      0006FB F1                    2010 	.db #0xf1	; 241
      0006FC F1                    2011 	.db #0xf1	; 241
      0006FD F1                    2012 	.db #0xf1	; 241
      0006FE F1                    2013 	.db #0xf1	; 241
      0006FF F1                    2014 	.db #0xf1	; 241
      000700                       2015 _color_column_11:
      000700 E1                    2016 	.db #0xe1	; 225
      000701 E1                    2017 	.db #0xe1	; 225
      000702 E1                    2018 	.db #0xe1	; 225
      000703 E1                    2019 	.db #0xe1	; 225
      000704 E1                    2020 	.db #0xe1	; 225
      000705 E1                    2021 	.db #0xe1	; 225
      000706 E1                    2022 	.db #0xe1	; 225
      000707 E1                    2023 	.db #0xe1	; 225
      000708                       2024 _color_column_12:
      000708 41                    2025 	.db #0x41	; 65	'A'
      000709 41                    2026 	.db #0x41	; 65	'A'
      00070A 41                    2027 	.db #0x41	; 65	'A'
      00070B 41                    2028 	.db #0x41	; 65	'A'
      00070C 41                    2029 	.db #0x41	; 65	'A'
      00070D 41                    2030 	.db #0x41	; 65	'A'
      00070E 41                    2031 	.db #0x41	; 65	'A'
      00070F 41                    2032 	.db #0x41	; 65	'A'
      000710                       2033 _color_column_16:
      000710 F1                    2034 	.db #0xf1	; 241
      000711 F1                    2035 	.db #0xf1	; 241
      000712 F1                    2036 	.db #0xf1	; 241
      000713 F1                    2037 	.db #0xf1	; 241
      000714 F1                    2038 	.db #0xf1	; 241
      000715 F1                    2039 	.db #0xf1	; 241
      000716 F1                    2040 	.db #0xf1	; 241
      000717 F1                    2041 	.db #0xf1	; 241
      000718                       2042 _color_column_17:
      000718 E1                    2043 	.db #0xe1	; 225
      000719 E1                    2044 	.db #0xe1	; 225
      00071A E1                    2045 	.db #0xe1	; 225
      00071B E1                    2046 	.db #0xe1	; 225
      00071C E1                    2047 	.db #0xe1	; 225
      00071D E1                    2048 	.db #0xe1	; 225
      00071E E1                    2049 	.db #0xe1	; 225
      00071F E1                    2050 	.db #0xe1	; 225
      000720                       2051 _color_column_18:
      000720 41                    2052 	.db #0x41	; 65	'A'
      000721 41                    2053 	.db #0x41	; 65	'A'
      000722 41                    2054 	.db #0x41	; 65	'A'
      000723 41                    2055 	.db #0x41	; 65	'A'
      000724 41                    2056 	.db #0x41	; 65	'A'
      000725 E1                    2057 	.db #0xe1	; 225
      000726 E1                    2058 	.db #0xe1	; 225
      000727 E1                    2059 	.db #0xe1	; 225
      000728                       2060 _color_column_13:
      000728 E1                    2061 	.db #0xe1	; 225
      000729 E1                    2062 	.db #0xe1	; 225
      00072A E1                    2063 	.db #0xe1	; 225
      00072B E1                    2064 	.db #0xe1	; 225
      00072C E1                    2065 	.db #0xe1	; 225
      00072D E1                    2066 	.db #0xe1	; 225
      00072E E1                    2067 	.db #0xe1	; 225
      00072F F1                    2068 	.db #0xf1	; 241
      000730                       2069 _color_column_14:
      000730 E1                    2070 	.db #0xe1	; 225
      000731 E1                    2071 	.db #0xe1	; 225
      000732 E1                    2072 	.db #0xe1	; 225
      000733 E1                    2073 	.db #0xe1	; 225
      000734 E1                    2074 	.db #0xe1	; 225
      000735 E1                    2075 	.db #0xe1	; 225
      000736 E1                    2076 	.db #0xe1	; 225
      000737 F1                    2077 	.db #0xf1	; 241
      000738                       2078 _color_column_15:
      000738 E1                    2079 	.db #0xe1	; 225
      000739 E1                    2080 	.db #0xe1	; 225
      00073A E1                    2081 	.db #0xe1	; 225
      00073B E1                    2082 	.db #0xe1	; 225
      00073C E1                    2083 	.db #0xe1	; 225
      00073D E1                    2084 	.db #0xe1	; 225
      00073E E1                    2085 	.db #0xe1	; 225
      00073F F1                    2086 	.db #0xf1	; 241
      000740                       2087 _color_dust_0:
      000740 F1                    2088 	.db #0xf1	; 241
      000741 F1                    2089 	.db #0xf1	; 241
      000742 F1                    2090 	.db #0xf1	; 241
      000743 F1                    2091 	.db #0xf1	; 241
      000744 F1                    2092 	.db #0xf1	; 241
      000745 F1                    2093 	.db #0xf1	; 241
      000746 F1                    2094 	.db #0xf1	; 241
      000747 F1                    2095 	.db #0xf1	; 241
      000748                       2096 _color_dust_1:
      000748 F1                    2097 	.db #0xf1	; 241
      000749 F1                    2098 	.db #0xf1	; 241
      00074A F1                    2099 	.db #0xf1	; 241
      00074B F1                    2100 	.db #0xf1	; 241
      00074C F1                    2101 	.db #0xf1	; 241
      00074D F1                    2102 	.db #0xf1	; 241
      00074E F1                    2103 	.db #0xf1	; 241
      00074F F1                    2104 	.db #0xf1	; 241
      000750                       2105 _color_dust_2:
      000750 F1                    2106 	.db #0xf1	; 241
      000751 F1                    2107 	.db #0xf1	; 241
      000752 F1                    2108 	.db #0xf1	; 241
      000753 F1                    2109 	.db #0xf1	; 241
      000754 F1                    2110 	.db #0xf1	; 241
      000755 F1                    2111 	.db #0xf1	; 241
      000756 F1                    2112 	.db #0xf1	; 241
      000757 F1                    2113 	.db #0xf1	; 241
      000758                       2114 _color_dust_3:
      000758 F1                    2115 	.db #0xf1	; 241
      000759 F1                    2116 	.db #0xf1	; 241
      00075A F1                    2117 	.db #0xf1	; 241
      00075B F1                    2118 	.db #0xf1	; 241
      00075C F1                    2119 	.db #0xf1	; 241
      00075D F1                    2120 	.db #0xf1	; 241
      00075E F1                    2121 	.db #0xf1	; 241
      00075F F1                    2122 	.db #0xf1	; 241
      000760                       2123 _color_font_1:
      000760 F1                    2124 	.db #0xf1	; 241
      000761 F1                    2125 	.db #0xf1	; 241
      000762 E1                    2126 	.db #0xe1	; 225
      000763 71                    2127 	.db #0x71	; 113	'q'
      000764 71                    2128 	.db #0x71	; 113	'q'
      000765 51                    2129 	.db #0x51	; 81	'Q'
      000766 51                    2130 	.db #0x51	; 81	'Q'
      000767 41                    2131 	.db #0x41	; 65	'A'
      000768                       2132 _color_font_2:
      000768 61                    2133 	.db #0x61	; 97	'a'
      000769 61                    2134 	.db #0x61	; 97	'a'
      00076A 81                    2135 	.db #0x81	; 129
      00076B 81                    2136 	.db #0x81	; 129
      00076C 91                    2137 	.db #0x91	; 145
      00076D 91                    2138 	.db #0x91	; 145
      00076E E1                    2139 	.db #0xe1	; 225
      00076F E1                    2140 	.db #0xe1	; 225
      000770                       2141 _color_title_1:
      000770 A1                    2142 	.db #0xa1	; 161
      000771 A1                    2143 	.db #0xa1	; 161
      000772 A1                    2144 	.db #0xa1	; 161
      000773 A1                    2145 	.db #0xa1	; 161
      000774 A1                    2146 	.db #0xa1	; 161
      000775 A1                    2147 	.db #0xa1	; 161
      000776 A1                    2148 	.db #0xa1	; 161
      000777 A1                    2149 	.db #0xa1	; 161
      000778                       2150 _color_title_2:
      000778 B1                    2151 	.db #0xb1	; 177
      000779 B1                    2152 	.db #0xb1	; 177
      00077A B1                    2153 	.db #0xb1	; 177
      00077B B1                    2154 	.db #0xb1	; 177
      00077C B1                    2155 	.db #0xb1	; 177
      00077D B1                    2156 	.db #0xb1	; 177
      00077E B1                    2157 	.db #0xb1	; 177
      00077F B1                    2158 	.db #0xb1	; 177
      000780                       2159 _color_title_3:
      000780 D1                    2160 	.db #0xd1	; 209
      000781 D1                    2161 	.db #0xd1	; 209
      000782 D1                    2162 	.db #0xd1	; 209
      000783 D1                    2163 	.db #0xd1	; 209
      000784 D1                    2164 	.db #0xd1	; 209
      000785 D1                    2165 	.db #0xd1	; 209
      000786 D1                    2166 	.db #0xd1	; 209
      000787 D1                    2167 	.db #0xd1	; 209
      000788                       2168 _color_title_4:
      000788 F1                    2169 	.db #0xf1	; 241
      000789 F1                    2170 	.db #0xf1	; 241
      00078A F1                    2171 	.db #0xf1	; 241
      00078B F1                    2172 	.db #0xf1	; 241
      00078C F1                    2173 	.db #0xf1	; 241
      00078D F1                    2174 	.db #0xf1	; 241
      00078E F1                    2175 	.db #0xf1	; 241
      00078F F1                    2176 	.db #0xf1	; 241
      000790                       2177 _color_title_5:
      000790 71                    2178 	.db #0x71	; 113	'q'
      000791 71                    2179 	.db #0x71	; 113	'q'
      000792 71                    2180 	.db #0x71	; 113	'q'
      000793 71                    2181 	.db #0x71	; 113	'q'
      000794 71                    2182 	.db #0x71	; 113	'q'
      000795 71                    2183 	.db #0x71	; 113	'q'
      000796 71                    2184 	.db #0x71	; 113	'q'
      000797 71                    2185 	.db #0x71	; 113	'q'
      000798                       2186 _color_title_6:
      000798 51                    2187 	.db #0x51	; 81	'Q'
      000799 51                    2188 	.db #0x51	; 81	'Q'
      00079A 51                    2189 	.db #0x51	; 81	'Q'
      00079B 51                    2190 	.db #0x51	; 81	'Q'
      00079C 51                    2191 	.db #0x51	; 81	'Q'
      00079D 51                    2192 	.db #0x51	; 81	'Q'
      00079E 51                    2193 	.db #0x51	; 81	'Q'
      00079F 51                    2194 	.db #0x51	; 81	'Q'
      0007A0                       2195 _color_title_7:
      0007A0 41                    2196 	.db #0x41	; 65	'A'
      0007A1 41                    2197 	.db #0x41	; 65	'A'
      0007A2 41                    2198 	.db #0x41	; 65	'A'
      0007A3 41                    2199 	.db #0x41	; 65	'A'
      0007A4 41                    2200 	.db #0x41	; 65	'A'
      0007A5 41                    2201 	.db #0x41	; 65	'A'
      0007A6 41                    2202 	.db #0x41	; 65	'A'
      0007A7 41                    2203 	.db #0x41	; 65	'A'
      0007A8                       2204 _sprite_arrow_0:
      0007A8 00                    2205 	.db #0x00	; 0
      0007A9 00                    2206 	.db #0x00	; 0
      0007AA 00                    2207 	.db #0x00	; 0
      0007AB 00                    2208 	.db #0x00	; 0
      0007AC 00                    2209 	.db #0x00	; 0
      0007AD 00                    2210 	.db #0x00	; 0
      0007AE 00                    2211 	.db #0x00	; 0
      0007AF 00                    2212 	.db #0x00	; 0
      0007B0                       2213 _sprite_arrow_1:
      0007B0 FF                    2214 	.db #0xff	; 255
      0007B1 00                    2215 	.db #0x00	; 0
      0007B2 3F                    2216 	.db #0x3f	; 63
      0007B3 00                    2217 	.db #0x00	; 0
      0007B4 0F                    2218 	.db #0x0f	; 15
      0007B5 00                    2219 	.db #0x00	; 0
      0007B6 03                    2220 	.db #0x03	; 3
      0007B7 00                    2221 	.db #0x00	; 0
      0007B8                       2222 _sprite_arrow_2:
      0007B8 00                    2223 	.db #0x00	; 0
      0007B9 00                    2224 	.db #0x00	; 0
      0007BA 00                    2225 	.db #0x00	; 0
      0007BB 00                    2226 	.db #0x00	; 0
      0007BC 00                    2227 	.db #0x00	; 0
      0007BD 00                    2228 	.db #0x00	; 0
      0007BE 00                    2229 	.db #0x00	; 0
      0007BF 00                    2230 	.db #0x00	; 0
      0007C0                       2231 _sprite_arrow_3:
      0007C0 FF                    2232 	.db #0xff	; 255
      0007C1 00                    2233 	.db #0x00	; 0
      0007C2 FC                    2234 	.db #0xfc	; 252
      0007C3 00                    2235 	.db #0x00	; 0
      0007C4 F0                    2236 	.db #0xf0	; 240
      0007C5 00                    2237 	.db #0x00	; 0
      0007C6 C0                    2238 	.db #0xc0	; 192
      0007C7 00                    2239 	.db #0x00	; 0
      0007C8                       2240 _sprite_hit_1:
      0007C8 00                    2241 	.db #0x00	; 0
      0007C9 77                    2242 	.db #0x77	; 119	'w'
      0007CA 22                    2243 	.db #0x22	; 34
      0007CB 22                    2244 	.db #0x22	; 34
      0007CC 22                    2245 	.db #0x22	; 34
      0007CD 3E                    2246 	.db #0x3e	; 62
      0007CE 22                    2247 	.db #0x22	; 34
      0007CF 22                    2248 	.db #0x22	; 34
      0007D0 22                    2249 	.db #0x22	; 34
      0007D1 77                    2250 	.db #0x77	; 119	'w'
      0007D2 00                    2251 	.db #0x00	; 0
      0007D3 00                    2252 	.db #0x00	; 0
      0007D4 00                    2253 	.db #0x00	; 0
      0007D5 00                    2254 	.db #0x00	; 0
      0007D6 00                    2255 	.db #0x00	; 0
      0007D7 00                    2256 	.db #0x00	; 0
      0007D8 00                    2257 	.db #0x00	; 0
      0007D9 77                    2258 	.db #0x77	; 119	'w'
      0007DA 25                    2259 	.db #0x25	; 37
      0007DB 21                    2260 	.db #0x21	; 33
      0007DC 21                    2261 	.db #0x21	; 33
      0007DD 21                    2262 	.db #0x21	; 33
      0007DE 21                    2263 	.db #0x21	; 33
      0007DF 21                    2264 	.db #0x21	; 33
      0007E0 21                    2265 	.db #0x21	; 33
      0007E1 73                    2266 	.db #0x73	; 115	's'
      0007E2 00                    2267 	.db #0x00	; 0
      0007E3 00                    2268 	.db #0x00	; 0
      0007E4 00                    2269 	.db #0x00	; 0
      0007E5 00                    2270 	.db #0x00	; 0
      0007E6 00                    2271 	.db #0x00	; 0
      0007E7 00                    2272 	.db #0x00	; 0
      0007E8                       2273 _sprite_hit_2:
      0007E8 00                    2274 	.db #0x00	; 0
      0007E9 C0                    2275 	.db #0xc0	; 192
      0007EA 40                    2276 	.db #0x40	; 64
      0007EB 00                    2277 	.db #0x00	; 0
      0007EC 00                    2278 	.db #0x00	; 0
      0007ED 00                    2279 	.db #0x00	; 0
      0007EE 00                    2280 	.db #0x00	; 0
      0007EF 00                    2281 	.db #0x00	; 0
      0007F0 00                    2282 	.db #0x00	; 0
      0007F1 80                    2283 	.db #0x80	; 128
      0007F2 00                    2284 	.db #0x00	; 0
      0007F3 00                    2285 	.db #0x00	; 0
      0007F4 00                    2286 	.db #0x00	; 0
      0007F5 00                    2287 	.db #0x00	; 0
      0007F6 00                    2288 	.db #0x00	; 0
      0007F7 00                    2289 	.db #0x00	; 0
      0007F8 00                    2290 	.db #0x00	; 0
      0007F9 00                    2291 	.db #0x00	; 0
      0007FA 00                    2292 	.db #0x00	; 0
      0007FB 00                    2293 	.db #0x00	; 0
      0007FC 00                    2294 	.db #0x00	; 0
      0007FD 00                    2295 	.db #0x00	; 0
      0007FE 00                    2296 	.db #0x00	; 0
      0007FF 00                    2297 	.db #0x00	; 0
      000800 00                    2298 	.db #0x00	; 0
      000801 00                    2299 	.db #0x00	; 0
      000802 00                    2300 	.db #0x00	; 0
      000803 00                    2301 	.db #0x00	; 0
      000804 00                    2302 	.db #0x00	; 0
      000805 00                    2303 	.db #0x00	; 0
      000806 00                    2304 	.db #0x00	; 0
      000807 00                    2305 	.db #0x00	; 0
      000808                       2306 _sprite_combo_1:
      000808 00                    2307 	.db #0x00	; 0
      000809 38                    2308 	.db #0x38	; 56	'8'
      00080A 65                    2309 	.db #0x65	; 101	'e'
      00080B 61                    2310 	.db #0x61	; 97	'a'
      00080C 61                    2311 	.db #0x61	; 97	'a'
      00080D 61                    2312 	.db #0x61	; 97	'a'
      00080E 61                    2313 	.db #0x61	; 97	'a'
      00080F 61                    2314 	.db #0x61	; 97	'a'
      000810 65                    2315 	.db #0x65	; 101	'e'
      000811 38                    2316 	.db #0x38	; 56	'8'
      000812 00                    2317 	.db #0x00	; 0
      000813 00                    2318 	.db #0x00	; 0
      000814 00                    2319 	.db #0x00	; 0
      000815 00                    2320 	.db #0x00	; 0
      000816 00                    2321 	.db #0x00	; 0
      000817 00                    2322 	.db #0x00	; 0
      000818 00                    2323 	.db #0x00	; 0
      000819 E6                    2324 	.db #0xe6	; 230
      00081A 13                    2325 	.db #0x13	; 19
      00081B 12                    2326 	.db #0x12	; 18
      00081C 12                    2327 	.db #0x12	; 18
      00081D 12                    2328 	.db #0x12	; 18
      00081E 12                    2329 	.db #0x12	; 18
      00081F 12                    2330 	.db #0x12	; 18
      000820 12                    2331 	.db #0x12	; 18
      000821 E7                    2332 	.db #0xe7	; 231
      000822 00                    2333 	.db #0x00	; 0
      000823 00                    2334 	.db #0x00	; 0
      000824 00                    2335 	.db #0x00	; 0
      000825 00                    2336 	.db #0x00	; 0
      000826 00                    2337 	.db #0x00	; 0
      000827 00                    2338 	.db #0x00	; 0
      000828                       2339 _sprite_combo_2:
      000828 00                    2340 	.db #0x00	; 0
      000829 37                    2341 	.db #0x37	; 55	'7'
      00082A 62                    2342 	.db #0x62	; 98	'b'
      00082B A2                    2343 	.db #0xa2	; 162
      00082C 22                    2344 	.db #0x22	; 34
      00082D 23                    2345 	.db #0x23	; 35
      00082E 22                    2346 	.db #0x22	; 34
      00082F 22                    2347 	.db #0x22	; 34
      000830 22                    2348 	.db #0x22	; 34
      000831 77                    2349 	.db #0x77	; 119	'w'
      000832 00                    2350 	.db #0x00	; 0
      000833 00                    2351 	.db #0x00	; 0
      000834 00                    2352 	.db #0x00	; 0
      000835 00                    2353 	.db #0x00	; 0
      000836 00                    2354 	.db #0x00	; 0
      000837 00                    2355 	.db #0x00	; 0
      000838 00                    2356 	.db #0x00	; 0
      000839 8E                    2357 	.db #0x8e	; 142
      00083A 51                    2358 	.db #0x51	; 81	'Q'
      00083B 51                    2359 	.db #0x51	; 81	'Q'
      00083C 51                    2360 	.db #0x51	; 81	'Q'
      00083D 91                    2361 	.db #0x91	; 145
      00083E 51                    2362 	.db #0x51	; 81	'Q'
      00083F 51                    2363 	.db #0x51	; 81	'Q'
      000840 51                    2364 	.db #0x51	; 81	'Q'
      000841 8E                    2365 	.db #0x8e	; 142
      000842 00                    2366 	.db #0x00	; 0
      000843 00                    2367 	.db #0x00	; 0
      000844 00                    2368 	.db #0x00	; 0
      000845 00                    2369 	.db #0x00	; 0
      000846 00                    2370 	.db #0x00	; 0
      000847 00                    2371 	.db #0x00	; 0
      000848                       2372 _sprite_2x:
      000848 00                    2373 	.db #0x00	; 0
      000849 3E                    2374 	.db #0x3e	; 62
      00084A 63                    2375 	.db #0x63	; 99	'c'
      00084B 03                    2376 	.db #0x03	; 3
      00084C 03                    2377 	.db #0x03	; 3
      00084D 1E                    2378 	.db #0x1e	; 30
      00084E 30                    2379 	.db #0x30	; 48	'0'
      00084F 60                    2380 	.db #0x60	; 96
      000850 60                    2381 	.db #0x60	; 96
      000851 7F                    2382 	.db #0x7f	; 127
      000852 00                    2383 	.db #0x00	; 0
      000853 00                    2384 	.db #0x00	; 0
      000854 00                    2385 	.db #0x00	; 0
      000855 00                    2386 	.db #0x00	; 0
      000856 00                    2387 	.db #0x00	; 0
      000857 00                    2388 	.db #0x00	; 0
      000858 00                    2389 	.db #0x00	; 0
      000859 00                    2390 	.db #0x00	; 0
      00085A 00                    2391 	.db #0x00	; 0
      00085B 63                    2392 	.db #0x63	; 99	'c'
      00085C 36                    2393 	.db #0x36	; 54	'6'
      00085D 1C                    2394 	.db #0x1c	; 28
      00085E 08                    2395 	.db #0x08	; 8
      00085F 1C                    2396 	.db #0x1c	; 28
      000860 36                    2397 	.db #0x36	; 54	'6'
      000861 63                    2398 	.db #0x63	; 99	'c'
      000862 00                    2399 	.db #0x00	; 0
      000863 00                    2400 	.db #0x00	; 0
      000864 00                    2401 	.db #0x00	; 0
      000865 00                    2402 	.db #0x00	; 0
      000866 00                    2403 	.db #0x00	; 0
      000867 00                    2404 	.db #0x00	; 0
      000868                       2405 _sprite_3x:
      000868 00                    2406 	.db #0x00	; 0
      000869 3E                    2407 	.db #0x3e	; 62
      00086A 63                    2408 	.db #0x63	; 99	'c'
      00086B 03                    2409 	.db #0x03	; 3
      00086C 03                    2410 	.db #0x03	; 3
      00086D 1E                    2411 	.db #0x1e	; 30
      00086E 03                    2412 	.db #0x03	; 3
      00086F 03                    2413 	.db #0x03	; 3
      000870 63                    2414 	.db #0x63	; 99	'c'
      000871 3E                    2415 	.db #0x3e	; 62
      000872 00                    2416 	.db #0x00	; 0
      000873 00                    2417 	.db #0x00	; 0
      000874 00                    2418 	.db #0x00	; 0
      000875 00                    2419 	.db #0x00	; 0
      000876 00                    2420 	.db #0x00	; 0
      000877 00                    2421 	.db #0x00	; 0
      000878 00                    2422 	.db #0x00	; 0
      000879 00                    2423 	.db #0x00	; 0
      00087A 00                    2424 	.db #0x00	; 0
      00087B 63                    2425 	.db #0x63	; 99	'c'
      00087C 36                    2426 	.db #0x36	; 54	'6'
      00087D 1C                    2427 	.db #0x1c	; 28
      00087E 08                    2428 	.db #0x08	; 8
      00087F 1C                    2429 	.db #0x1c	; 28
      000880 36                    2430 	.db #0x36	; 54	'6'
      000881 63                    2431 	.db #0x63	; 99	'c'
      000882 00                    2432 	.db #0x00	; 0
      000883 00                    2433 	.db #0x00	; 0
      000884 00                    2434 	.db #0x00	; 0
      000885 00                    2435 	.db #0x00	; 0
      000886 00                    2436 	.db #0x00	; 0
      000887 00                    2437 	.db #0x00	; 0
      000888                       2438 _sprite_4x:
      000888 00                    2439 	.db #0x00	; 0
      000889 02                    2440 	.db #0x02	; 2
      00088A 06                    2441 	.db #0x06	; 6
      00088B 0E                    2442 	.db #0x0e	; 14
      00088C 16                    2443 	.db #0x16	; 22
      00088D 26                    2444 	.db #0x26	; 38
      00088E 7F                    2445 	.db #0x7f	; 127
      00088F 06                    2446 	.db #0x06	; 6
      000890 06                    2447 	.db #0x06	; 6
      000891 0F                    2448 	.db #0x0f	; 15
      000892 00                    2449 	.db #0x00	; 0
      000893 00                    2450 	.db #0x00	; 0
      000894 00                    2451 	.db #0x00	; 0
      000895 00                    2452 	.db #0x00	; 0
      000896 00                    2453 	.db #0x00	; 0
      000897 00                    2454 	.db #0x00	; 0
      000898 00                    2455 	.db #0x00	; 0
      000899 00                    2456 	.db #0x00	; 0
      00089A 00                    2457 	.db #0x00	; 0
      00089B 63                    2458 	.db #0x63	; 99	'c'
      00089C 36                    2459 	.db #0x36	; 54	'6'
      00089D 1C                    2460 	.db #0x1c	; 28
      00089E 08                    2461 	.db #0x08	; 8
      00089F 1C                    2462 	.db #0x1c	; 28
      0008A0 36                    2463 	.db #0x36	; 54	'6'
      0008A1 63                    2464 	.db #0x63	; 99	'c'
      0008A2 00                    2465 	.db #0x00	; 0
      0008A3 00                    2466 	.db #0x00	; 0
      0008A4 00                    2467 	.db #0x00	; 0
      0008A5 00                    2468 	.db #0x00	; 0
      0008A6 00                    2469 	.db #0x00	; 0
      0008A7 00                    2470 	.db #0x00	; 0
      0008A8                       2471 _sprite_5x:
      0008A8 00                    2472 	.db #0x00	; 0
      0008A9 7E                    2473 	.db #0x7e	; 126
      0008AA 60                    2474 	.db #0x60	; 96
      0008AB 60                    2475 	.db #0x60	; 96
      0008AC 7E                    2476 	.db #0x7e	; 126
      0008AD 03                    2477 	.db #0x03	; 3
      0008AE 03                    2478 	.db #0x03	; 3
      0008AF 03                    2479 	.db #0x03	; 3
      0008B0 63                    2480 	.db #0x63	; 99	'c'
      0008B1 3E                    2481 	.db #0x3e	; 62
      0008B2 00                    2482 	.db #0x00	; 0
      0008B3 00                    2483 	.db #0x00	; 0
      0008B4 00                    2484 	.db #0x00	; 0
      0008B5 00                    2485 	.db #0x00	; 0
      0008B6 00                    2486 	.db #0x00	; 0
      0008B7 00                    2487 	.db #0x00	; 0
      0008B8 00                    2488 	.db #0x00	; 0
      0008B9 00                    2489 	.db #0x00	; 0
      0008BA 00                    2490 	.db #0x00	; 0
      0008BB 63                    2491 	.db #0x63	; 99	'c'
      0008BC 36                    2492 	.db #0x36	; 54	'6'
      0008BD 1C                    2493 	.db #0x1c	; 28
      0008BE 08                    2494 	.db #0x08	; 8
      0008BF 1C                    2495 	.db #0x1c	; 28
      0008C0 36                    2496 	.db #0x36	; 54	'6'
      0008C1 63                    2497 	.db #0x63	; 99	'c'
      0008C2 00                    2498 	.db #0x00	; 0
      0008C3 00                    2499 	.db #0x00	; 0
      0008C4 00                    2500 	.db #0x00	; 0
      0008C5 00                    2501 	.db #0x00	; 0
      0008C6 00                    2502 	.db #0x00	; 0
      0008C7 00                    2503 	.db #0x00	; 0
      0008C8                       2504 _sprite_6x:
      0008C8 00                    2505 	.db #0x00	; 0
      0008C9 3E                    2506 	.db #0x3e	; 62
      0008CA 61                    2507 	.db #0x61	; 97	'a'
      0008CB 60                    2508 	.db #0x60	; 96
      0008CC 7E                    2509 	.db #0x7e	; 126
      0008CD 63                    2510 	.db #0x63	; 99	'c'
      0008CE 63                    2511 	.db #0x63	; 99	'c'
      0008CF 63                    2512 	.db #0x63	; 99	'c'
      0008D0 63                    2513 	.db #0x63	; 99	'c'
      0008D1 3E                    2514 	.db #0x3e	; 62
      0008D2 00                    2515 	.db #0x00	; 0
      0008D3 00                    2516 	.db #0x00	; 0
      0008D4 00                    2517 	.db #0x00	; 0
      0008D5 00                    2518 	.db #0x00	; 0
      0008D6 00                    2519 	.db #0x00	; 0
      0008D7 00                    2520 	.db #0x00	; 0
      0008D8 00                    2521 	.db #0x00	; 0
      0008D9 00                    2522 	.db #0x00	; 0
      0008DA 00                    2523 	.db #0x00	; 0
      0008DB 63                    2524 	.db #0x63	; 99	'c'
      0008DC 36                    2525 	.db #0x36	; 54	'6'
      0008DD 1C                    2526 	.db #0x1c	; 28
      0008DE 08                    2527 	.db #0x08	; 8
      0008DF 1C                    2528 	.db #0x1c	; 28
      0008E0 36                    2529 	.db #0x36	; 54	'6'
      0008E1 63                    2530 	.db #0x63	; 99	'c'
      0008E2 00                    2531 	.db #0x00	; 0
      0008E3 00                    2532 	.db #0x00	; 0
      0008E4 00                    2533 	.db #0x00	; 0
      0008E5 00                    2534 	.db #0x00	; 0
      0008E6 00                    2535 	.db #0x00	; 0
      0008E7 00                    2536 	.db #0x00	; 0
      0008E8                       2537 _sprite_mega_hit:
      0008E8 04                    2538 	.db #0x04	; 4
      0008E9 06                    2539 	.db #0x06	; 6
      0008EA 05                    2540 	.db #0x05	; 5
      0008EB 04                    2541 	.db #0x04	; 4
      0008EC 04                    2542 	.db #0x04	; 4
      0008ED 00                    2543 	.db #0x00	; 0
      0008EE 03                    2544 	.db #0x03	; 3
      0008EF 04                    2545 	.db #0x04	; 4
      0008F0 05                    2546 	.db #0x05	; 5
      0008F1 04                    2547 	.db #0x04	; 4
      0008F2 03                    2548 	.db #0x03	; 3
      0008F3 00                    2549 	.db #0x00	; 0
      0008F4 00                    2550 	.db #0x00	; 0
      0008F5 00                    2551 	.db #0x00	; 0
      0008F6 00                    2552 	.db #0x00	; 0
      0008F7 00                    2553 	.db #0x00	; 0
      0008F8 5C                    2554 	.db #0x5c	; 92
      0008F9 D0                    2555 	.db #0xd0	; 208
      0008FA 5C                    2556 	.db #0x5c	; 92
      0008FB 50                    2557 	.db #0x50	; 80	'P'
      0008FC 5C                    2558 	.db #0x5c	; 92
      0008FD 00                    2559 	.db #0x00	; 0
      0008FE 98                    2560 	.db #0x98	; 152
      0008FF 24                    2561 	.db #0x24	; 36
      000900 A4                    2562 	.db #0xa4	; 164
      000901 BC                    2563 	.db #0xbc	; 188
      000902 A4                    2564 	.db #0xa4	; 164
      000903 00                    2565 	.db #0x00	; 0
      000904 00                    2566 	.db #0x00	; 0
      000905 00                    2567 	.db #0x00	; 0
      000906 00                    2568 	.db #0x00	; 0
      000907 00                    2569 	.db #0x00	; 0
      000908                       2570 _sprite_explosion_0:
      000908 00                    2571 	.db #0x00	; 0
      000909 00                    2572 	.db #0x00	; 0
      00090A 00                    2573 	.db #0x00	; 0
      00090B 00                    2574 	.db #0x00	; 0
      00090C 00                    2575 	.db #0x00	; 0
      00090D 00                    2576 	.db #0x00	; 0
      00090E 01                    2577 	.db #0x01	; 1
      00090F 02                    2578 	.db #0x02	; 2
      000910 01                    2579 	.db #0x01	; 1
      000911 00                    2580 	.db #0x00	; 0
      000912 00                    2581 	.db #0x00	; 0
      000913 00                    2582 	.db #0x00	; 0
      000914 00                    2583 	.db #0x00	; 0
      000915 00                    2584 	.db #0x00	; 0
      000916 00                    2585 	.db #0x00	; 0
      000917 00                    2586 	.db #0x00	; 0
      000918 00                    2587 	.db #0x00	; 0
      000919 00                    2588 	.db #0x00	; 0
      00091A 00                    2589 	.db #0x00	; 0
      00091B 00                    2590 	.db #0x00	; 0
      00091C 00                    2591 	.db #0x00	; 0
      00091D 00                    2592 	.db #0x00	; 0
      00091E 00                    2593 	.db #0x00	; 0
      00091F 80                    2594 	.db #0x80	; 128
      000920 00                    2595 	.db #0x00	; 0
      000921 00                    2596 	.db #0x00	; 0
      000922 00                    2597 	.db #0x00	; 0
      000923 00                    2598 	.db #0x00	; 0
      000924 00                    2599 	.db #0x00	; 0
      000925 00                    2600 	.db #0x00	; 0
      000926 00                    2601 	.db #0x00	; 0
      000927 00                    2602 	.db #0x00	; 0
      000928                       2603 _sprite_explosion_1:
      000928 00                    2604 	.db #0x00	; 0
      000929 00                    2605 	.db #0x00	; 0
      00092A 00                    2606 	.db #0x00	; 0
      00092B 00                    2607 	.db #0x00	; 0
      00092C 00                    2608 	.db #0x00	; 0
      00092D 01                    2609 	.db #0x01	; 1
      00092E 00                    2610 	.db #0x00	; 0
      00092F 04                    2611 	.db #0x04	; 4
      000930 00                    2612 	.db #0x00	; 0
      000931 01                    2613 	.db #0x01	; 1
      000932 00                    2614 	.db #0x00	; 0
      000933 00                    2615 	.db #0x00	; 0
      000934 00                    2616 	.db #0x00	; 0
      000935 00                    2617 	.db #0x00	; 0
      000936 00                    2618 	.db #0x00	; 0
      000937 00                    2619 	.db #0x00	; 0
      000938 00                    2620 	.db #0x00	; 0
      000939 00                    2621 	.db #0x00	; 0
      00093A 00                    2622 	.db #0x00	; 0
      00093B 00                    2623 	.db #0x00	; 0
      00093C 00                    2624 	.db #0x00	; 0
      00093D 00                    2625 	.db #0x00	; 0
      00093E 00                    2626 	.db #0x00	; 0
      00093F 40                    2627 	.db #0x40	; 64
      000940 00                    2628 	.db #0x00	; 0
      000941 00                    2629 	.db #0x00	; 0
      000942 00                    2630 	.db #0x00	; 0
      000943 00                    2631 	.db #0x00	; 0
      000944 00                    2632 	.db #0x00	; 0
      000945 00                    2633 	.db #0x00	; 0
      000946 00                    2634 	.db #0x00	; 0
      000947 00                    2635 	.db #0x00	; 0
      000948                       2636 _sprite_explosion_2:
      000948 00                    2637 	.db #0x00	; 0
      000949 00                    2638 	.db #0x00	; 0
      00094A 00                    2639 	.db #0x00	; 0
      00094B 00                    2640 	.db #0x00	; 0
      00094C 01                    2641 	.db #0x01	; 1
      00094D 04                    2642 	.db #0x04	; 4
      00094E 00                    2643 	.db #0x00	; 0
      00094F 08                    2644 	.db #0x08	; 8
      000950 00                    2645 	.db #0x00	; 0
      000951 04                    2646 	.db #0x04	; 4
      000952 01                    2647 	.db #0x01	; 1
      000953 00                    2648 	.db #0x00	; 0
      000954 00                    2649 	.db #0x00	; 0
      000955 00                    2650 	.db #0x00	; 0
      000956 00                    2651 	.db #0x00	; 0
      000957 00                    2652 	.db #0x00	; 0
      000958 00                    2653 	.db #0x00	; 0
      000959 00                    2654 	.db #0x00	; 0
      00095A 00                    2655 	.db #0x00	; 0
      00095B 00                    2656 	.db #0x00	; 0
      00095C 00                    2657 	.db #0x00	; 0
      00095D 40                    2658 	.db #0x40	; 64
      00095E 00                    2659 	.db #0x00	; 0
      00095F 20                    2660 	.db #0x20	; 32
      000960 00                    2661 	.db #0x00	; 0
      000961 40                    2662 	.db #0x40	; 64
      000962 00                    2663 	.db #0x00	; 0
      000963 00                    2664 	.db #0x00	; 0
      000964 00                    2665 	.db #0x00	; 0
      000965 00                    2666 	.db #0x00	; 0
      000966 00                    2667 	.db #0x00	; 0
      000967 00                    2668 	.db #0x00	; 0
      000968                       2669 _sprite_explosion_3:
      000968 00                    2670 	.db #0x00	; 0
      000969 00                    2671 	.db #0x00	; 0
      00096A 00                    2672 	.db #0x00	; 0
      00096B 01                    2673 	.db #0x01	; 1
      00096C 08                    2674 	.db #0x08	; 8
      00096D 00                    2675 	.db #0x00	; 0
      00096E 00                    2676 	.db #0x00	; 0
      00096F 10                    2677 	.db #0x10	; 16
      000970 00                    2678 	.db #0x00	; 0
      000971 00                    2679 	.db #0x00	; 0
      000972 08                    2680 	.db #0x08	; 8
      000973 01                    2681 	.db #0x01	; 1
      000974 00                    2682 	.db #0x00	; 0
      000975 00                    2683 	.db #0x00	; 0
      000976 00                    2684 	.db #0x00	; 0
      000977 00                    2685 	.db #0x00	; 0
      000978 00                    2686 	.db #0x00	; 0
      000979 00                    2687 	.db #0x00	; 0
      00097A 00                    2688 	.db #0x00	; 0
      00097B 00                    2689 	.db #0x00	; 0
      00097C 20                    2690 	.db #0x20	; 32
      00097D 00                    2691 	.db #0x00	; 0
      00097E 00                    2692 	.db #0x00	; 0
      00097F 10                    2693 	.db #0x10	; 16
      000980 00                    2694 	.db #0x00	; 0
      000981 00                    2695 	.db #0x00	; 0
      000982 20                    2696 	.db #0x20	; 32
      000983 00                    2697 	.db #0x00	; 0
      000984 00                    2698 	.db #0x00	; 0
      000985 00                    2699 	.db #0x00	; 0
      000986 00                    2700 	.db #0x00	; 0
      000987 00                    2701 	.db #0x00	; 0
      000988                       2702 _sprite_explosion_4:
      000988 00                    2703 	.db #0x00	; 0
      000989 00                    2704 	.db #0x00	; 0
      00098A 01                    2705 	.db #0x01	; 1
      00098B 10                    2706 	.db #0x10	; 16
      00098C 00                    2707 	.db #0x00	; 0
      00098D 00                    2708 	.db #0x00	; 0
      00098E 00                    2709 	.db #0x00	; 0
      00098F 20                    2710 	.db #0x20	; 32
      000990 00                    2711 	.db #0x00	; 0
      000991 00                    2712 	.db #0x00	; 0
      000992 00                    2713 	.db #0x00	; 0
      000993 10                    2714 	.db #0x10	; 16
      000994 01                    2715 	.db #0x01	; 1
      000995 00                    2716 	.db #0x00	; 0
      000996 00                    2717 	.db #0x00	; 0
      000997 00                    2718 	.db #0x00	; 0
      000998 00                    2719 	.db #0x00	; 0
      000999 00                    2720 	.db #0x00	; 0
      00099A 00                    2721 	.db #0x00	; 0
      00099B 10                    2722 	.db #0x10	; 16
      00099C 00                    2723 	.db #0x00	; 0
      00099D 00                    2724 	.db #0x00	; 0
      00099E 00                    2725 	.db #0x00	; 0
      00099F 08                    2726 	.db #0x08	; 8
      0009A0 00                    2727 	.db #0x00	; 0
      0009A1 00                    2728 	.db #0x00	; 0
      0009A2 00                    2729 	.db #0x00	; 0
      0009A3 10                    2730 	.db #0x10	; 16
      0009A4 00                    2731 	.db #0x00	; 0
      0009A5 00                    2732 	.db #0x00	; 0
      0009A6 00                    2733 	.db #0x00	; 0
      0009A7 00                    2734 	.db #0x00	; 0
      0009A8                       2735 _sprite_explosion_5:
      0009A8 01                    2736 	.db #0x01	; 1
      0009A9 00                    2737 	.db #0x00	; 0
      0009AA 20                    2738 	.db #0x20	; 32
      0009AB 00                    2739 	.db #0x00	; 0
      0009AC 00                    2740 	.db #0x00	; 0
      0009AD 00                    2741 	.db #0x00	; 0
      0009AE 00                    2742 	.db #0x00	; 0
      0009AF 80                    2743 	.db #0x80	; 128
      0009B0 00                    2744 	.db #0x00	; 0
      0009B1 00                    2745 	.db #0x00	; 0
      0009B2 00                    2746 	.db #0x00	; 0
      0009B3 00                    2747 	.db #0x00	; 0
      0009B4 20                    2748 	.db #0x20	; 32
      0009B5 00                    2749 	.db #0x00	; 0
      0009B6 01                    2750 	.db #0x01	; 1
      0009B7 00                    2751 	.db #0x00	; 0
      0009B8 00                    2752 	.db #0x00	; 0
      0009B9 00                    2753 	.db #0x00	; 0
      0009BA 08                    2754 	.db #0x08	; 8
      0009BB 00                    2755 	.db #0x00	; 0
      0009BC 00                    2756 	.db #0x00	; 0
      0009BD 00                    2757 	.db #0x00	; 0
      0009BE 00                    2758 	.db #0x00	; 0
      0009BF 02                    2759 	.db #0x02	; 2
      0009C0 00                    2760 	.db #0x00	; 0
      0009C1 00                    2761 	.db #0x00	; 0
      0009C2 00                    2762 	.db #0x00	; 0
      0009C3 00                    2763 	.db #0x00	; 0
      0009C4 08                    2764 	.db #0x08	; 8
      0009C5 00                    2765 	.db #0x00	; 0
      0009C6 00                    2766 	.db #0x00	; 0
      0009C7 00                    2767 	.db #0x00	; 0
      0009C8                       2768 _sprite_explosion_6:
      0009C8 00                    2769 	.db #0x00	; 0
      0009C9 01                    2770 	.db #0x01	; 1
      0009CA 00                    2771 	.db #0x00	; 0
      0009CB 20                    2772 	.db #0x20	; 32
      0009CC 00                    2773 	.db #0x00	; 0
      0009CD 00                    2774 	.db #0x00	; 0
      0009CE 00                    2775 	.db #0x00	; 0
      0009CF 00                    2776 	.db #0x00	; 0
      0009D0 80                    2777 	.db #0x80	; 128
      0009D1 00                    2778 	.db #0x00	; 0
      0009D2 00                    2779 	.db #0x00	; 0
      0009D3 00                    2780 	.db #0x00	; 0
      0009D4 00                    2781 	.db #0x00	; 0
      0009D5 20                    2782 	.db #0x20	; 32
      0009D6 00                    2783 	.db #0x00	; 0
      0009D7 01                    2784 	.db #0x01	; 1
      0009D8 00                    2785 	.db #0x00	; 0
      0009D9 00                    2786 	.db #0x00	; 0
      0009DA 00                    2787 	.db #0x00	; 0
      0009DB 08                    2788 	.db #0x08	; 8
      0009DC 00                    2789 	.db #0x00	; 0
      0009DD 00                    2790 	.db #0x00	; 0
      0009DE 00                    2791 	.db #0x00	; 0
      0009DF 00                    2792 	.db #0x00	; 0
      0009E0 02                    2793 	.db #0x02	; 2
      0009E1 00                    2794 	.db #0x00	; 0
      0009E2 00                    2795 	.db #0x00	; 0
      0009E3 00                    2796 	.db #0x00	; 0
      0009E4 00                    2797 	.db #0x00	; 0
      0009E5 08                    2798 	.db #0x08	; 8
      0009E6 00                    2799 	.db #0x00	; 0
      0009E7 00                    2800 	.db #0x00	; 0
      0009E8                       2801 _sprite_explosion_7:
      0009E8 00                    2802 	.db #0x00	; 0
      0009E9 00                    2803 	.db #0x00	; 0
      0009EA 01                    2804 	.db #0x01	; 1
      0009EB 00                    2805 	.db #0x00	; 0
      0009EC 20                    2806 	.db #0x20	; 32
      0009ED 00                    2807 	.db #0x00	; 0
      0009EE 00                    2808 	.db #0x00	; 0
      0009EF 00                    2809 	.db #0x00	; 0
      0009F0 00                    2810 	.db #0x00	; 0
      0009F1 80                    2811 	.db #0x80	; 128
      0009F2 00                    2812 	.db #0x00	; 0
      0009F3 00                    2813 	.db #0x00	; 0
      0009F4 00                    2814 	.db #0x00	; 0
      0009F5 00                    2815 	.db #0x00	; 0
      0009F6 20                    2816 	.db #0x20	; 32
      0009F7 00                    2817 	.db #0x00	; 0
      0009F8 00                    2818 	.db #0x00	; 0
      0009F9 00                    2819 	.db #0x00	; 0
      0009FA 00                    2820 	.db #0x00	; 0
      0009FB 00                    2821 	.db #0x00	; 0
      0009FC 08                    2822 	.db #0x08	; 8
      0009FD 00                    2823 	.db #0x00	; 0
      0009FE 00                    2824 	.db #0x00	; 0
      0009FF 00                    2825 	.db #0x00	; 0
      000A00 00                    2826 	.db #0x00	; 0
      000A01 02                    2827 	.db #0x02	; 2
      000A02 00                    2828 	.db #0x00	; 0
      000A03 00                    2829 	.db #0x00	; 0
      000A04 00                    2830 	.db #0x00	; 0
      000A05 00                    2831 	.db #0x00	; 0
      000A06 08                    2832 	.db #0x08	; 8
      000A07 00                    2833 	.db #0x00	; 0
      000A08                       2834 _sprite_block_small_0:
      000A08 5A                    2835 	.db #0x5a	; 90	'Z'
      000A09 24                    2836 	.db #0x24	; 36
      000A0A 80                    2837 	.db #0x80	; 128
      000A0B 10                    2838 	.db #0x10	; 16
      000A0C 80                    2839 	.db #0x80	; 128
      000A0D 20                    2840 	.db #0x20	; 32
      000A0E 00                    2841 	.db #0x00	; 0
      000A0F 00                    2842 	.db #0x00	; 0
      000A10 00                    2843 	.db #0x00	; 0
      000A11 00                    2844 	.db #0x00	; 0
      000A12 00                    2845 	.db #0x00	; 0
      000A13 00                    2846 	.db #0x00	; 0
      000A14 00                    2847 	.db #0x00	; 0
      000A15 00                    2848 	.db #0x00	; 0
      000A16 00                    2849 	.db #0x00	; 0
      000A17 00                    2850 	.db #0x00	; 0
      000A18 00                    2851 	.db #0x00	; 0
      000A19 00                    2852 	.db #0x00	; 0
      000A1A 00                    2853 	.db #0x00	; 0
      000A1B 00                    2854 	.db #0x00	; 0
      000A1C 00                    2855 	.db #0x00	; 0
      000A1D 00                    2856 	.db #0x00	; 0
      000A1E 00                    2857 	.db #0x00	; 0
      000A1F 00                    2858 	.db #0x00	; 0
      000A20 00                    2859 	.db #0x00	; 0
      000A21 00                    2860 	.db #0x00	; 0
      000A22 00                    2861 	.db #0x00	; 0
      000A23 00                    2862 	.db #0x00	; 0
      000A24 00                    2863 	.db #0x00	; 0
      000A25 00                    2864 	.db #0x00	; 0
      000A26 00                    2865 	.db #0x00	; 0
      000A27 00                    2866 	.db #0x00	; 0
      000A28                       2867 _sprite_block_small_1:
      000A28 FF                    2868 	.db #0xff	; 255
      000A29 FF                    2869 	.db #0xff	; 255
      000A2A FF                    2870 	.db #0xff	; 255
      000A2B FF                    2871 	.db #0xff	; 255
      000A2C FF                    2872 	.db #0xff	; 255
      000A2D FF                    2873 	.db #0xff	; 255
      000A2E FF                    2874 	.db #0xff	; 255
      000A2F 7E                    2875 	.db #0x7e	; 126
      000A30 00                    2876 	.db #0x00	; 0
      000A31 00                    2877 	.db #0x00	; 0
      000A32 00                    2878 	.db #0x00	; 0
      000A33 00                    2879 	.db #0x00	; 0
      000A34 00                    2880 	.db #0x00	; 0
      000A35 00                    2881 	.db #0x00	; 0
      000A36 00                    2882 	.db #0x00	; 0
      000A37 00                    2883 	.db #0x00	; 0
      000A38 00                    2884 	.db #0x00	; 0
      000A39 00                    2885 	.db #0x00	; 0
      000A3A 00                    2886 	.db #0x00	; 0
      000A3B 00                    2887 	.db #0x00	; 0
      000A3C 00                    2888 	.db #0x00	; 0
      000A3D 00                    2889 	.db #0x00	; 0
      000A3E 00                    2890 	.db #0x00	; 0
      000A3F 00                    2891 	.db #0x00	; 0
      000A40 00                    2892 	.db #0x00	; 0
      000A41 00                    2893 	.db #0x00	; 0
      000A42 00                    2894 	.db #0x00	; 0
      000A43 00                    2895 	.db #0x00	; 0
      000A44 00                    2896 	.db #0x00	; 0
      000A45 00                    2897 	.db #0x00	; 0
      000A46 00                    2898 	.db #0x00	; 0
      000A47 00                    2899 	.db #0x00	; 0
      000A48                       2900 _sprite_number_3_32x32:
      000A48 00                    2901 	.db #0x00	; 0
      000A49 01                    2902 	.db #0x01	; 1
      000A4A 02                    2903 	.db #0x02	; 2
      000A4B 04                    2904 	.db #0x04	; 4
      000A4C 08                    2905 	.db #0x08	; 8
      000A4D 08                    2906 	.db #0x08	; 8
      000A4E 08                    2907 	.db #0x08	; 8
      000A4F 08                    2908 	.db #0x08	; 8
      000A50 0F                    2909 	.db #0x0f	; 15
      000A51 00                    2910 	.db #0x00	; 0
      000A52 00                    2911 	.db #0x00	; 0
      000A53 00                    2912 	.db #0x00	; 0
      000A54 00                    2913 	.db #0x00	; 0
      000A55 00                    2914 	.db #0x00	; 0
      000A56 00                    2915 	.db #0x00	; 0
      000A57 00                    2916 	.db #0x00	; 0
      000A58 FF                    2917 	.db #0xff	; 255
      000A59 00                    2918 	.db #0x00	; 0
      000A5A 00                    2919 	.db #0x00	; 0
      000A5B 00                    2920 	.db #0x00	; 0
      000A5C 00                    2921 	.db #0x00	; 0
      000A5D 00                    2922 	.db #0x00	; 0
      000A5E 1F                    2923 	.db #0x1f	; 31
      000A5F 20                    2924 	.db #0x20	; 32
      000A60 C0                    2925 	.db #0xc0	; 192
      000A61 00                    2926 	.db #0x00	; 0
      000A62 00                    2927 	.db #0x00	; 0
      000A63 00                    2928 	.db #0x00	; 0
      000A64 00                    2929 	.db #0x00	; 0
      000A65 3F                    2930 	.db #0x3f	; 63
      000A66 20                    2931 	.db #0x20	; 32
      000A67 20                    2932 	.db #0x20	; 32
      000A68 FF                    2933 	.db #0xff	; 255
      000A69 00                    2934 	.db #0x00	; 0
      000A6A 00                    2935 	.db #0x00	; 0
      000A6B 00                    2936 	.db #0x00	; 0
      000A6C 00                    2937 	.db #0x00	; 0
      000A6D 00                    2938 	.db #0x00	; 0
      000A6E F0                    2939 	.db #0xf0	; 240
      000A6F 08                    2940 	.db #0x08	; 8
      000A70 04                    2941 	.db #0x04	; 4
      000A71 04                    2942 	.db #0x04	; 4
      000A72 04                    2943 	.db #0x04	; 4
      000A73 04                    2944 	.db #0x04	; 4
      000A74 08                    2945 	.db #0x08	; 8
      000A75 F0                    2946 	.db #0xf0	; 240
      000A76 00                    2947 	.db #0x00	; 0
      000A77 00                    2948 	.db #0x00	; 0
      000A78 00                    2949 	.db #0x00	; 0
      000A79 80                    2950 	.db #0x80	; 128
      000A7A 40                    2951 	.db #0x40	; 64
      000A7B 20                    2952 	.db #0x20	; 32
      000A7C 10                    2953 	.db #0x10	; 16
      000A7D 10                    2954 	.db #0x10	; 16
      000A7E 10                    2955 	.db #0x10	; 16
      000A7F 10                    2956 	.db #0x10	; 16
      000A80 10                    2957 	.db #0x10	; 16
      000A81 10                    2958 	.db #0x10	; 16
      000A82 10                    2959 	.db #0x10	; 16
      000A83 10                    2960 	.db #0x10	; 16
      000A84 10                    2961 	.db #0x10	; 16
      000A85 20                    2962 	.db #0x20	; 32
      000A86 40                    2963 	.db #0x40	; 64
      000A87 80                    2964 	.db #0x80	; 128
      000A88 00                    2965 	.db #0x00	; 0
      000A89 00                    2966 	.db #0x00	; 0
      000A8A 00                    2967 	.db #0x00	; 0
      000A8B 00                    2968 	.db #0x00	; 0
      000A8C 00                    2969 	.db #0x00	; 0
      000A8D 00                    2970 	.db #0x00	; 0
      000A8E 00                    2971 	.db #0x00	; 0
      000A8F 0F                    2972 	.db #0x0f	; 15
      000A90 08                    2973 	.db #0x08	; 8
      000A91 08                    2974 	.db #0x08	; 8
      000A92 08                    2975 	.db #0x08	; 8
      000A93 08                    2976 	.db #0x08	; 8
      000A94 04                    2977 	.db #0x04	; 4
      000A95 02                    2978 	.db #0x02	; 2
      000A96 01                    2979 	.db #0x01	; 1
      000A97 00                    2980 	.db #0x00	; 0
      000A98 20                    2981 	.db #0x20	; 32
      000A99 20                    2982 	.db #0x20	; 32
      000A9A 3F                    2983 	.db #0x3f	; 63
      000A9B 00                    2984 	.db #0x00	; 0
      000A9C 00                    2985 	.db #0x00	; 0
      000A9D 00                    2986 	.db #0x00	; 0
      000A9E 00                    2987 	.db #0x00	; 0
      000A9F C0                    2988 	.db #0xc0	; 192
      000AA0 20                    2989 	.db #0x20	; 32
      000AA1 1F                    2990 	.db #0x1f	; 31
      000AA2 00                    2991 	.db #0x00	; 0
      000AA3 00                    2992 	.db #0x00	; 0
      000AA4 00                    2993 	.db #0x00	; 0
      000AA5 00                    2994 	.db #0x00	; 0
      000AA6 00                    2995 	.db #0x00	; 0
      000AA7 FF                    2996 	.db #0xff	; 255
      000AA8 00                    2997 	.db #0x00	; 0
      000AA9 00                    2998 	.db #0x00	; 0
      000AAA F0                    2999 	.db #0xf0	; 240
      000AAB 08                    3000 	.db #0x08	; 8
      000AAC 04                    3001 	.db #0x04	; 4
      000AAD 04                    3002 	.db #0x04	; 4
      000AAE 04                    3003 	.db #0x04	; 4
      000AAF 04                    3004 	.db #0x04	; 4
      000AB0 08                    3005 	.db #0x08	; 8
      000AB1 F0                    3006 	.db #0xf0	; 240
      000AB2 00                    3007 	.db #0x00	; 0
      000AB3 00                    3008 	.db #0x00	; 0
      000AB4 00                    3009 	.db #0x00	; 0
      000AB5 00                    3010 	.db #0x00	; 0
      000AB6 00                    3011 	.db #0x00	; 0
      000AB7 FF                    3012 	.db #0xff	; 255
      000AB8 80                    3013 	.db #0x80	; 128
      000AB9 40                    3014 	.db #0x40	; 64
      000ABA 20                    3015 	.db #0x20	; 32
      000ABB 10                    3016 	.db #0x10	; 16
      000ABC 10                    3017 	.db #0x10	; 16
      000ABD 10                    3018 	.db #0x10	; 16
      000ABE 10                    3019 	.db #0x10	; 16
      000ABF 10                    3020 	.db #0x10	; 16
      000AC0 10                    3021 	.db #0x10	; 16
      000AC1 10                    3022 	.db #0x10	; 16
      000AC2 10                    3023 	.db #0x10	; 16
      000AC3 10                    3024 	.db #0x10	; 16
      000AC4 20                    3025 	.db #0x20	; 32
      000AC5 40                    3026 	.db #0x40	; 64
      000AC6 80                    3027 	.db #0x80	; 128
      000AC7 00                    3028 	.db #0x00	; 0
      000AC8                       3029 _sprite_number_2_32x32:
      000AC8 00                    3030 	.db #0x00	; 0
      000AC9 01                    3031 	.db #0x01	; 1
      000ACA 02                    3032 	.db #0x02	; 2
      000ACB 04                    3033 	.db #0x04	; 4
      000ACC 08                    3034 	.db #0x08	; 8
      000ACD 08                    3035 	.db #0x08	; 8
      000ACE 08                    3036 	.db #0x08	; 8
      000ACF 08                    3037 	.db #0x08	; 8
      000AD0 0F                    3038 	.db #0x0f	; 15
      000AD1 00                    3039 	.db #0x00	; 0
      000AD2 00                    3040 	.db #0x00	; 0
      000AD3 00                    3041 	.db #0x00	; 0
      000AD4 00                    3042 	.db #0x00	; 0
      000AD5 00                    3043 	.db #0x00	; 0
      000AD6 00                    3044 	.db #0x00	; 0
      000AD7 00                    3045 	.db #0x00	; 0
      000AD8 FF                    3046 	.db #0xff	; 255
      000AD9 00                    3047 	.db #0x00	; 0
      000ADA 00                    3048 	.db #0x00	; 0
      000ADB 00                    3049 	.db #0x00	; 0
      000ADC 00                    3050 	.db #0x00	; 0
      000ADD 00                    3051 	.db #0x00	; 0
      000ADE 1F                    3052 	.db #0x1f	; 31
      000ADF 20                    3053 	.db #0x20	; 32
      000AE0 C0                    3054 	.db #0xc0	; 192
      000AE1 00                    3055 	.db #0x00	; 0
      000AE2 00                    3056 	.db #0x00	; 0
      000AE3 00                    3057 	.db #0x00	; 0
      000AE4 00                    3058 	.db #0x00	; 0
      000AE5 3F                    3059 	.db #0x3f	; 63
      000AE6 40                    3060 	.db #0x40	; 64
      000AE7 80                    3061 	.db #0x80	; 128
      000AE8 FF                    3062 	.db #0xff	; 255
      000AE9 00                    3063 	.db #0x00	; 0
      000AEA 00                    3064 	.db #0x00	; 0
      000AEB 00                    3065 	.db #0x00	; 0
      000AEC 00                    3066 	.db #0x00	; 0
      000AED 00                    3067 	.db #0x00	; 0
      000AEE F0                    3068 	.db #0xf0	; 240
      000AEF 08                    3069 	.db #0x08	; 8
      000AF0 04                    3070 	.db #0x04	; 4
      000AF1 04                    3071 	.db #0x04	; 4
      000AF2 04                    3072 	.db #0x04	; 4
      000AF3 04                    3073 	.db #0x04	; 4
      000AF4 08                    3074 	.db #0x08	; 8
      000AF5 F0                    3075 	.db #0xf0	; 240
      000AF6 00                    3076 	.db #0x00	; 0
      000AF7 00                    3077 	.db #0x00	; 0
      000AF8 00                    3078 	.db #0x00	; 0
      000AF9 80                    3079 	.db #0x80	; 128
      000AFA 40                    3080 	.db #0x40	; 64
      000AFB 20                    3081 	.db #0x20	; 32
      000AFC 10                    3082 	.db #0x10	; 16
      000AFD 10                    3083 	.db #0x10	; 16
      000AFE 10                    3084 	.db #0x10	; 16
      000AFF 10                    3085 	.db #0x10	; 16
      000B00 10                    3086 	.db #0x10	; 16
      000B01 10                    3087 	.db #0x10	; 16
      000B02 10                    3088 	.db #0x10	; 16
      000B03 10                    3089 	.db #0x10	; 16
      000B04 10                    3090 	.db #0x10	; 16
      000B05 10                    3091 	.db #0x10	; 16
      000B06 20                    3092 	.db #0x20	; 32
      000B07 40                    3093 	.db #0x40	; 64
      000B08 01                    3094 	.db #0x01	; 1
      000B09 02                    3095 	.db #0x02	; 2
      000B0A 04                    3096 	.db #0x04	; 4
      000B0B 08                    3097 	.db #0x08	; 8
      000B0C 08                    3098 	.db #0x08	; 8
      000B0D 08                    3099 	.db #0x08	; 8
      000B0E 08                    3100 	.db #0x08	; 8
      000B0F 08                    3101 	.db #0x08	; 8
      000B10 08                    3102 	.db #0x08	; 8
      000B11 08                    3103 	.db #0x08	; 8
      000B12 08                    3104 	.db #0x08	; 8
      000B13 08                    3105 	.db #0x08	; 8
      000B14 08                    3106 	.db #0x08	; 8
      000B15 08                    3107 	.db #0x08	; 8
      000B16 08                    3108 	.db #0x08	; 8
      000B17 0F                    3109 	.db #0x0f	; 15
      000B18 00                    3110 	.db #0x00	; 0
      000B19 00                    3111 	.db #0x00	; 0
      000B1A 07                    3112 	.db #0x07	; 7
      000B1B 08                    3113 	.db #0x08	; 8
      000B1C 10                    3114 	.db #0x10	; 16
      000B1D 20                    3115 	.db #0x20	; 32
      000B1E 20                    3116 	.db #0x20	; 32
      000B1F 20                    3117 	.db #0x20	; 32
      000B20 20                    3118 	.db #0x20	; 32
      000B21 3F                    3119 	.db #0x3f	; 63
      000B22 00                    3120 	.db #0x00	; 0
      000B23 00                    3121 	.db #0x00	; 0
      000B24 00                    3122 	.db #0x00	; 0
      000B25 00                    3123 	.db #0x00	; 0
      000B26 00                    3124 	.db #0x00	; 0
      000B27 FF                    3125 	.db #0xff	; 255
      000B28 00                    3126 	.db #0x00	; 0
      000B29 01                    3127 	.db #0x01	; 1
      000B2A FE                    3128 	.db #0xfe	; 254
      000B2B 00                    3129 	.db #0x00	; 0
      000B2C 00                    3130 	.db #0x00	; 0
      000B2D 00                    3131 	.db #0x00	; 0
      000B2E 00                    3132 	.db #0x00	; 0
      000B2F 07                    3133 	.db #0x07	; 7
      000B30 08                    3134 	.db #0x08	; 8
      000B31 F0                    3135 	.db #0xf0	; 240
      000B32 00                    3136 	.db #0x00	; 0
      000B33 00                    3137 	.db #0x00	; 0
      000B34 00                    3138 	.db #0x00	; 0
      000B35 00                    3139 	.db #0x00	; 0
      000B36 00                    3140 	.db #0x00	; 0
      000B37 FF                    3141 	.db #0xff	; 255
      000B38 80                    3142 	.db #0x80	; 128
      000B39 00                    3143 	.db #0x00	; 0
      000B3A 00                    3144 	.db #0x00	; 0
      000B3B 00                    3145 	.db #0x00	; 0
      000B3C 00                    3146 	.db #0x00	; 0
      000B3D 00                    3147 	.db #0x00	; 0
      000B3E 00                    3148 	.db #0x00	; 0
      000B3F F0                    3149 	.db #0xf0	; 240
      000B40 10                    3150 	.db #0x10	; 16
      000B41 10                    3151 	.db #0x10	; 16
      000B42 10                    3152 	.db #0x10	; 16
      000B43 10                    3153 	.db #0x10	; 16
      000B44 10                    3154 	.db #0x10	; 16
      000B45 10                    3155 	.db #0x10	; 16
      000B46 10                    3156 	.db #0x10	; 16
      000B47 F0                    3157 	.db #0xf0	; 240
      000B48                       3158 _sprite_number_1_32x32:
      000B48 00                    3159 	.db #0x00	; 0
      000B49 00                    3160 	.db #0x00	; 0
      000B4A 00                    3161 	.db #0x00	; 0
      000B4B 00                    3162 	.db #0x00	; 0
      000B4C 00                    3163 	.db #0x00	; 0
      000B4D 00                    3164 	.db #0x00	; 0
      000B4E 01                    3165 	.db #0x01	; 1
      000B4F 01                    3166 	.db #0x01	; 1
      000B50 01                    3167 	.db #0x01	; 1
      000B51 01                    3168 	.db #0x01	; 1
      000B52 00                    3169 	.db #0x00	; 0
      000B53 00                    3170 	.db #0x00	; 0
      000B54 00                    3171 	.db #0x00	; 0
      000B55 00                    3172 	.db #0x00	; 0
      000B56 00                    3173 	.db #0x00	; 0
      000B57 00                    3174 	.db #0x00	; 0
      000B58 07                    3175 	.db #0x07	; 7
      000B59 08                    3176 	.db #0x08	; 8
      000B5A 10                    3177 	.db #0x10	; 16
      000B5B 20                    3178 	.db #0x20	; 32
      000B5C 40                    3179 	.db #0x40	; 64
      000B5D 80                    3180 	.db #0x80	; 128
      000B5E 00                    3181 	.db #0x00	; 0
      000B5F 00                    3182 	.db #0x00	; 0
      000B60 00                    3183 	.db #0x00	; 0
      000B61 F8                    3184 	.db #0xf8	; 248
      000B62 08                    3185 	.db #0x08	; 8
      000B63 08                    3186 	.db #0x08	; 8
      000B64 08                    3187 	.db #0x08	; 8
      000B65 08                    3188 	.db #0x08	; 8
      000B66 08                    3189 	.db #0x08	; 8
      000B67 08                    3190 	.db #0x08	; 8
      000B68 F0                    3191 	.db #0xf0	; 240
      000B69 10                    3192 	.db #0x10	; 16
      000B6A 10                    3193 	.db #0x10	; 16
      000B6B 10                    3194 	.db #0x10	; 16
      000B6C 10                    3195 	.db #0x10	; 16
      000B6D 10                    3196 	.db #0x10	; 16
      000B6E 10                    3197 	.db #0x10	; 16
      000B6F 10                    3198 	.db #0x10	; 16
      000B70 10                    3199 	.db #0x10	; 16
      000B71 10                    3200 	.db #0x10	; 16
      000B72 10                    3201 	.db #0x10	; 16
      000B73 10                    3202 	.db #0x10	; 16
      000B74 10                    3203 	.db #0x10	; 16
      000B75 10                    3204 	.db #0x10	; 16
      000B76 10                    3205 	.db #0x10	; 16
      000B77 10                    3206 	.db #0x10	; 16
      000B78 00                    3207 	.db #0x00	; 0
      000B79 00                    3208 	.db #0x00	; 0
      000B7A 00                    3209 	.db #0x00	; 0
      000B7B 00                    3210 	.db #0x00	; 0
      000B7C 00                    3211 	.db #0x00	; 0
      000B7D 00                    3212 	.db #0x00	; 0
      000B7E 00                    3213 	.db #0x00	; 0
      000B7F 00                    3214 	.db #0x00	; 0
      000B80 00                    3215 	.db #0x00	; 0
      000B81 00                    3216 	.db #0x00	; 0
      000B82 00                    3217 	.db #0x00	; 0
      000B83 00                    3218 	.db #0x00	; 0
      000B84 00                    3219 	.db #0x00	; 0
      000B85 00                    3220 	.db #0x00	; 0
      000B86 00                    3221 	.db #0x00	; 0
      000B87 00                    3222 	.db #0x00	; 0
      000B88 00                    3223 	.db #0x00	; 0
      000B89 00                    3224 	.db #0x00	; 0
      000B8A 00                    3225 	.db #0x00	; 0
      000B8B 00                    3226 	.db #0x00	; 0
      000B8C 00                    3227 	.db #0x00	; 0
      000B8D 00                    3228 	.db #0x00	; 0
      000B8E 00                    3229 	.db #0x00	; 0
      000B8F 00                    3230 	.db #0x00	; 0
      000B90 00                    3231 	.db #0x00	; 0
      000B91 00                    3232 	.db #0x00	; 0
      000B92 00                    3233 	.db #0x00	; 0
      000B93 00                    3234 	.db #0x00	; 0
      000B94 00                    3235 	.db #0x00	; 0
      000B95 00                    3236 	.db #0x00	; 0
      000B96 00                    3237 	.db #0x00	; 0
      000B97 00                    3238 	.db #0x00	; 0
      000B98 08                    3239 	.db #0x08	; 8
      000B99 08                    3240 	.db #0x08	; 8
      000B9A 08                    3241 	.db #0x08	; 8
      000B9B 08                    3242 	.db #0x08	; 8
      000B9C 08                    3243 	.db #0x08	; 8
      000B9D 08                    3244 	.db #0x08	; 8
      000B9E 08                    3245 	.db #0x08	; 8
      000B9F 08                    3246 	.db #0x08	; 8
      000BA0 08                    3247 	.db #0x08	; 8
      000BA1 F8                    3248 	.db #0xf8	; 248
      000BA2 80                    3249 	.db #0x80	; 128
      000BA3 80                    3250 	.db #0x80	; 128
      000BA4 80                    3251 	.db #0x80	; 128
      000BA5 80                    3252 	.db #0x80	; 128
      000BA6 80                    3253 	.db #0x80	; 128
      000BA7 FF                    3254 	.db #0xff	; 255
      000BA8 10                    3255 	.db #0x10	; 16
      000BA9 10                    3256 	.db #0x10	; 16
      000BAA 10                    3257 	.db #0x10	; 16
      000BAB 10                    3258 	.db #0x10	; 16
      000BAC 10                    3259 	.db #0x10	; 16
      000BAD 10                    3260 	.db #0x10	; 16
      000BAE 10                    3261 	.db #0x10	; 16
      000BAF 10                    3262 	.db #0x10	; 16
      000BB0 10                    3263 	.db #0x10	; 16
      000BB1 1F                    3264 	.db #0x1f	; 31
      000BB2 01                    3265 	.db #0x01	; 1
      000BB3 01                    3266 	.db #0x01	; 1
      000BB4 01                    3267 	.db #0x01	; 1
      000BB5 01                    3268 	.db #0x01	; 1
      000BB6 01                    3269 	.db #0x01	; 1
      000BB7 FF                    3270 	.db #0xff	; 255
      000BB8 00                    3271 	.db #0x00	; 0
      000BB9 00                    3272 	.db #0x00	; 0
      000BBA 00                    3273 	.db #0x00	; 0
      000BBB 00                    3274 	.db #0x00	; 0
      000BBC 00                    3275 	.db #0x00	; 0
      000BBD 00                    3276 	.db #0x00	; 0
      000BBE 00                    3277 	.db #0x00	; 0
      000BBF 00                    3278 	.db #0x00	; 0
      000BC0 00                    3279 	.db #0x00	; 0
      000BC1 00                    3280 	.db #0x00	; 0
      000BC2 00                    3281 	.db #0x00	; 0
      000BC3 00                    3282 	.db #0x00	; 0
      000BC4 00                    3283 	.db #0x00	; 0
      000BC5 00                    3284 	.db #0x00	; 0
      000BC6 00                    3285 	.db #0x00	; 0
      000BC7 00                    3286 	.db #0x00	; 0
      000BC8                       3287 _sprite_go_32x32:
      000BC8 00                    3288 	.db #0x00	; 0
      000BC9 00                    3289 	.db #0x00	; 0
      000BCA 00                    3290 	.db #0x00	; 0
      000BCB 00                    3291 	.db #0x00	; 0
      000BCC 00                    3292 	.db #0x00	; 0
      000BCD 00                    3293 	.db #0x00	; 0
      000BCE 00                    3294 	.db #0x00	; 0
      000BCF 3F                    3295 	.db #0x3f	; 63
      000BD0 40                    3296 	.db #0x40	; 64
      000BD1 80                    3297 	.db #0x80	; 128
      000BD2 87                    3298 	.db #0x87	; 135
      000BD3 88                    3299 	.db #0x88	; 136
      000BD4 88                    3300 	.db #0x88	; 136
      000BD5 88                    3301 	.db #0x88	; 136
      000BD6 88                    3302 	.db #0x88	; 136
      000BD7 88                    3303 	.db #0x88	; 136
      000BD8 00                    3304 	.db #0x00	; 0
      000BD9 00                    3305 	.db #0x00	; 0
      000BDA 00                    3306 	.db #0x00	; 0
      000BDB 00                    3307 	.db #0x00	; 0
      000BDC 00                    3308 	.db #0x00	; 0
      000BDD 00                    3309 	.db #0x00	; 0
      000BDE 00                    3310 	.db #0x00	; 0
      000BDF C1                    3311 	.db #0xc1	; 193
      000BE0 22                    3312 	.db #0x22	; 34
      000BE1 14                    3313 	.db #0x14	; 20
      000BE2 14                    3314 	.db #0x14	; 20
      000BE3 94                    3315 	.db #0x94	; 148
      000BE4 F4                    3316 	.db #0xf4	; 244
      000BE5 04                    3317 	.db #0x04	; 4
      000BE6 04                    3318 	.db #0x04	; 4
      000BE7 04                    3319 	.db #0x04	; 4
      000BE8 00                    3320 	.db #0x00	; 0
      000BE9 00                    3321 	.db #0x00	; 0
      000BEA 00                    3322 	.db #0x00	; 0
      000BEB 00                    3323 	.db #0x00	; 0
      000BEC 00                    3324 	.db #0x00	; 0
      000BED 00                    3325 	.db #0x00	; 0
      000BEE 00                    3326 	.db #0x00	; 0
      000BEF FE                    3327 	.db #0xfe	; 254
      000BF0 01                    3328 	.db #0x01	; 1
      000BF1 00                    3329 	.db #0x00	; 0
      000BF2 00                    3330 	.db #0x00	; 0
      000BF3 30                    3331 	.db #0x30	; 48	'0'
      000BF4 48                    3332 	.db #0x48	; 72	'H'
      000BF5 48                    3333 	.db #0x48	; 72	'H'
      000BF6 48                    3334 	.db #0x48	; 72	'H'
      000BF7 48                    3335 	.db #0x48	; 72	'H'
      000BF8 00                    3336 	.db #0x00	; 0
      000BF9 00                    3337 	.db #0x00	; 0
      000BFA 00                    3338 	.db #0x00	; 0
      000BFB 00                    3339 	.db #0x00	; 0
      000BFC 00                    3340 	.db #0x00	; 0
      000BFD 00                    3341 	.db #0x00	; 0
      000BFE 00                    3342 	.db #0x00	; 0
      000BFF 3F                    3343 	.db #0x3f	; 63
      000C00 21                    3344 	.db #0x21	; 33
      000C01 A1                    3345 	.db #0xa1	; 161
      000C02 A1                    3346 	.db #0xa1	; 161
      000C03 A1                    3347 	.db #0xa1	; 161
      000C04 A1                    3348 	.db #0xa1	; 161
      000C05 A1                    3349 	.db #0xa1	; 161
      000C06 A1                    3350 	.db #0xa1	; 161
      000C07 A1                    3351 	.db #0xa1	; 161
      000C08 8B                    3352 	.db #0x8b	; 139
      000C09 8A                    3353 	.db #0x8a	; 138
      000C0A 8A                    3354 	.db #0x8a	; 138
      000C0B 8B                    3355 	.db #0x8b	; 139
      000C0C 89                    3356 	.db #0x89	; 137
      000C0D 86                    3357 	.db #0x86	; 134
      000C0E 80                    3358 	.db #0x80	; 128
      000C0F 40                    3359 	.db #0x40	; 64
      000C10 3F                    3360 	.db #0x3f	; 63
      000C11 00                    3361 	.db #0x00	; 0
      000C12 00                    3362 	.db #0x00	; 0
      000C13 00                    3363 	.db #0x00	; 0
      000C14 00                    3364 	.db #0x00	; 0
      000C15 00                    3365 	.db #0x00	; 0
      000C16 00                    3366 	.db #0x00	; 0
      000C17 00                    3367 	.db #0x00	; 0
      000C18 F4                    3368 	.db #0xf4	; 244
      000C19 14                    3369 	.db #0x14	; 20
      000C1A 14                    3370 	.db #0x14	; 20
      000C1B 14                    3371 	.db #0x14	; 20
      000C1C 14                    3372 	.db #0x14	; 20
      000C1D 14                    3373 	.db #0x14	; 20
      000C1E 14                    3374 	.db #0x14	; 20
      000C1F 22                    3375 	.db #0x22	; 34
      000C20 C1                    3376 	.db #0xc1	; 193
      000C21 00                    3377 	.db #0x00	; 0
      000C22 00                    3378 	.db #0x00	; 0
      000C23 00                    3379 	.db #0x00	; 0
      000C24 00                    3380 	.db #0x00	; 0
      000C25 00                    3381 	.db #0x00	; 0
      000C26 00                    3382 	.db #0x00	; 0
      000C27 00                    3383 	.db #0x00	; 0
      000C28 48                    3384 	.db #0x48	; 72	'H'
      000C29 48                    3385 	.db #0x48	; 72	'H'
      000C2A 48                    3386 	.db #0x48	; 72	'H'
      000C2B 48                    3387 	.db #0x48	; 72	'H'
      000C2C 30                    3388 	.db #0x30	; 48	'0'
      000C2D 00                    3389 	.db #0x00	; 0
      000C2E 00                    3390 	.db #0x00	; 0
      000C2F 01                    3391 	.db #0x01	; 1
      000C30 FE                    3392 	.db #0xfe	; 254
      000C31 00                    3393 	.db #0x00	; 0
      000C32 00                    3394 	.db #0x00	; 0
      000C33 00                    3395 	.db #0x00	; 0
      000C34 00                    3396 	.db #0x00	; 0
      000C35 00                    3397 	.db #0x00	; 0
      000C36 00                    3398 	.db #0x00	; 0
      000C37 00                    3399 	.db #0x00	; 0
      000C38 A1                    3400 	.db #0xa1	; 161
      000C39 A1                    3401 	.db #0xa1	; 161
      000C3A A1                    3402 	.db #0xa1	; 161
      000C3B BF                    3403 	.db #0xbf	; 191
      000C3C 80                    3404 	.db #0x80	; 128
      000C3D BF                    3405 	.db #0xbf	; 191
      000C3E A1                    3406 	.db #0xa1	; 161
      000C3F 21                    3407 	.db #0x21	; 33
      000C40 3F                    3408 	.db #0x3f	; 63
      000C41 00                    3409 	.db #0x00	; 0
      000C42 00                    3410 	.db #0x00	; 0
      000C43 00                    3411 	.db #0x00	; 0
      000C44 00                    3412 	.db #0x00	; 0
      000C45 00                    3413 	.db #0x00	; 0
      000C46 00                    3414 	.db #0x00	; 0
      000C47 00                    3415 	.db #0x00	; 0
                                   3416 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3417 ;	---------------------------------
                                   3418 ; Function HideArrowSprite
                                   3419 ; ---------------------------------
      000C48                       3420 _HideArrowSprite::
                                   3421 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3422 	ld	a, #0xc0
      000C4A F5               [11] 3423 	push	af
      000C4B 33               [ 6] 3424 	inc	sp
      000C4C 21 00 1B         [10] 3425 	ld	hl, #0x1b00
      000C4F E5               [11] 3426 	push	hl
      000C50 CDr00r00         [17] 3427 	call	_WRTVRM
      000C53 F1               [10] 3428 	pop	af
      000C54 33               [ 6] 3429 	inc	sp
                                   3430 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3431 	ret
                                   3432 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3433 ;	---------------------------------
                                   3434 ; Function DrawHitSprite
                                   3435 ; ---------------------------------
      000C56                       3436 _DrawHitSprite::
      000C56 DD E5            [15] 3437 	push	ix
      000C58 DD 21 00 00      [14] 3438 	ld	ix,#0
      000C5C DD 39            [15] 3439 	add	ix,sp
      000C5E 21 EC FF         [10] 3440 	ld	hl, #-20
      000C61 39               [11] 3441 	add	hl, sp
      000C62 F9               [ 6] 3442 	ld	sp, hl
                                   3443 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3444 	ld	hl, #0
      000C66 39               [11] 3445 	add	hl, sp
      000C67 EB               [ 4] 3446 	ex	de, hl
      000C68 3E 0F            [ 7] 3447 	ld	a, #0x0f
      000C6A 12               [ 7] 3448 	ld	(de), a
      000C6B 6B               [ 4] 3449 	ld	l, e
      000C6C 62               [ 4] 3450 	ld	h, d
      000C6D 23               [ 6] 3451 	inc	hl
      000C6E 36 0E            [10] 3452 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3453 	ld	l, e
      000C71 62               [ 4] 3454 	ld	h, d
      000C72 23               [ 6] 3455 	inc	hl
      000C73 23               [ 6] 3456 	inc	hl
      000C74 36 09            [10] 3457 	ld	(hl), #0x09
      000C76 6B               [ 4] 3458 	ld	l, e
      000C77 62               [ 4] 3459 	ld	h, d
      000C78 23               [ 6] 3460 	inc	hl
      000C79 23               [ 6] 3461 	inc	hl
      000C7A 23               [ 6] 3462 	inc	hl
      000C7B 36 06            [10] 3463 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3464 	ld	hl, #0x0004
      000C80 19               [11] 3465 	add	hl, de
      000C81 36 06            [10] 3466 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3467 	ld	hl, #0x0005
      000C86 19               [11] 3468 	add	hl, de
      000C87 36 09            [10] 3469 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3470 	ld	hl, #0x0006
      000C8C 19               [11] 3471 	add	hl, de
      000C8D 36 0E            [10] 3472 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3473 	ld	hl, #0x0007
      000C92 19               [11] 3474 	add	hl, de
      000C93 36 0F            [10] 3475 	ld	(hl), #0x0f
                                   3476 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3477 	ld	hl, #8
      000C98 39               [11] 3478 	add	hl, sp
      000C99 4D               [ 4] 3479 	ld	c, l
      000C9A 44               [ 4] 3480 	ld	b, h
      000C9B 36 0F            [10] 3481 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3482 	ld	l, c
      000C9E 60               [ 4] 3483 	ld	h, b
      000C9F 23               [ 6] 3484 	inc	hl
      000CA0 36 0E            [10] 3485 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3486 	ld	l, c
      000CA3 60               [ 4] 3487 	ld	h, b
      000CA4 23               [ 6] 3488 	inc	hl
      000CA5 23               [ 6] 3489 	inc	hl
      000CA6 36 03            [10] 3490 	ld	(hl), #0x03
      000CA8 69               [ 4] 3491 	ld	l, c
      000CA9 60               [ 4] 3492 	ld	h, b
      000CAA 23               [ 6] 3493 	inc	hl
      000CAB 23               [ 6] 3494 	inc	hl
      000CAC 23               [ 6] 3495 	inc	hl
      000CAD 36 0C            [10] 3496 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3497 	ld	hl, #0x0004
      000CB2 09               [11] 3498 	add	hl, bc
      000CB3 36 0C            [10] 3499 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3500 	ld	hl, #0x0005
      000CB8 09               [11] 3501 	add	hl, bc
      000CB9 36 03            [10] 3502 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3503 	ld	hl, #0x0006
      000CBE 09               [11] 3504 	add	hl, bc
      000CBF 36 0E            [10] 3505 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3506 	ld	hl, #0x0007
      000CC4 09               [11] 3507 	add	hl, bc
      000CC5 36 0F            [10] 3508 	ld	(hl), #0x0f
                                   3509 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3510 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3511 	and	a, #0x07
                                   3512 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3513 	ld	l, a
      000CCD 83               [ 4] 3514 	add	a,e
      000CCE 5F               [ 4] 3515 	ld	e, a
      000CCF 30 01            [12] 3516 	jr	NC, 00124$
      000CD1 14               [ 4] 3517 	inc	d
      000CD2                       3518 00124$:
      000CD2 1A               [ 7] 3519 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3520 	ld	-4 (ix), a
                                   3521 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3522 	ld	h, #0x00
      000CD8 09               [11] 3523 	add	hl, bc
      000CD9 7E               [ 7] 3524 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3525 	ld	-3 (ix), a
                                   3526 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3527 	ld	a, #0x01
      000CDF DD 96 05         [19] 3528 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3529 	ld	a, #0x00
      000CE4 17               [ 4] 3530 	rla
      000CE5 DD 77 FE         [19] 3531 	ld	-2 (ix), a
                                   3532 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3533 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3534 	or	a, a
      000CEC CArB7r0D         [10] 3535 	jp	Z, 00104$
                                   3536 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3537 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3538 	ld	a, c
      000CF3 C6 F8            [ 7] 3539 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3540 	ld	-1 (ix), a
      000CF8 C5               [11] 3541 	push	bc
      000CF9 F5               [11] 3542 	push	af
      000CFA 33               [ 6] 3543 	inc	sp
      000CFB 21 05 1B         [10] 3544 	ld	hl, #0x1b05
      000CFE E5               [11] 3545 	push	hl
      000CFF CDr00r00         [17] 3546 	call	_WRTVRM
      000D02 F1               [10] 3547 	pop	af
      000D03 33               [ 6] 3548 	inc	sp
      000D04 C1               [10] 3549 	pop	bc
                                   3550 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3551 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3552 	add	a, #0xfd
      000D0A 87               [ 4] 3553 	add	a, a
      000D0B 87               [ 4] 3554 	add	a, a
      000D0C C6 18            [ 7] 3555 	add	a, #0x18
      000D0E C5               [11] 3556 	push	bc
      000D0F F5               [11] 3557 	push	af
      000D10 33               [ 6] 3558 	inc	sp
      000D11 21 06 1B         [10] 3559 	ld	hl, #0x1b06
      000D14 E5               [11] 3560 	push	hl
      000D15 CDr00r00         [17] 3561 	call	_WRTVRM
      000D18 F1               [10] 3562 	pop	af
      000D19 33               [ 6] 3563 	inc	sp
      000D1A C1               [10] 3564 	pop	bc
                                   3565 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3566 	ld	a, c
      000D1C C6 08            [ 7] 3567 	add	a, #0x08
      000D1E 47               [ 4] 3568 	ld	b, a
      000D1F C5               [11] 3569 	push	bc
      000D20 C5               [11] 3570 	push	bc
      000D21 33               [ 6] 3571 	inc	sp
      000D22 21 09 1B         [10] 3572 	ld	hl, #0x1b09
      000D25 E5               [11] 3573 	push	hl
      000D26 CDr00r00         [17] 3574 	call	_WRTVRM
      000D29 F1               [10] 3575 	pop	af
      000D2A 33               [ 6] 3576 	inc	sp
      000D2B 3E 04            [ 7] 3577 	ld	a, #0x04
      000D2D F5               [11] 3578 	push	af
      000D2E 33               [ 6] 3579 	inc	sp
      000D2F 21 0A 1B         [10] 3580 	ld	hl, #0x1b0a
      000D32 E5               [11] 3581 	push	hl
      000D33 CDr00r00         [17] 3582 	call	_WRTVRM
      000D36 F1               [10] 3583 	pop	af
      000D37 33               [ 6] 3584 	inc	sp
      000D38 C1               [10] 3585 	pop	bc
                                   3586 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3587 	ld	a, c
      000D3A C6 18            [ 7] 3588 	add	a, #0x18
      000D3C 4F               [ 4] 3589 	ld	c, a
      000D3D C5               [11] 3590 	push	bc
      000D3E 79               [ 4] 3591 	ld	a, c
      000D3F F5               [11] 3592 	push	af
      000D40 33               [ 6] 3593 	inc	sp
      000D41 21 0D 1B         [10] 3594 	ld	hl, #0x1b0d
      000D44 E5               [11] 3595 	push	hl
      000D45 CDr00r00         [17] 3596 	call	_WRTVRM
      000D48 F1               [10] 3597 	pop	af
      000D49 33               [ 6] 3598 	inc	sp
      000D4A 3E 08            [ 7] 3599 	ld	a, #0x08
      000D4C F5               [11] 3600 	push	af
      000D4D 33               [ 6] 3601 	inc	sp
      000D4E 21 0E 1B         [10] 3602 	ld	hl, #0x1b0e
      000D51 E5               [11] 3603 	push	hl
      000D52 CDr00r00         [17] 3604 	call	_WRTVRM
      000D55 F1               [10] 3605 	pop	af
      000D56 33               [ 6] 3606 	inc	sp
      000D57 C1               [10] 3607 	pop	bc
                                   3608 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3609 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3610 	or	a, a
      000D5C 28 59            [12] 3611 	jr	Z, 00104$
                                   3612 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3613 	push	bc
      000D5F DD 7E FF         [19] 3614 	ld	a, -1 (ix)
      000D62 F5               [11] 3615 	push	af
      000D63 33               [ 6] 3616 	inc	sp
      000D64 21 11 1B         [10] 3617 	ld	hl, #0x1b11
      000D67 E5               [11] 3618 	push	hl
      000D68 CDr00r00         [17] 3619 	call	_WRTVRM
      000D6B F1               [10] 3620 	pop	af
      000D6C 33               [ 6] 3621 	inc	sp
      000D6D C1               [10] 3622 	pop	bc
                                   3623 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3624 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3625 	dec	a
      000D72 3D               [ 4] 3626 	dec	a
      000D73 87               [ 4] 3627 	add	a, a
      000D74 87               [ 4] 3628 	add	a, a
      000D75 C6 14            [ 7] 3629 	add	a, #0x14
      000D77 C5               [11] 3630 	push	bc
      000D78 F5               [11] 3631 	push	af
      000D79 33               [ 6] 3632 	inc	sp
      000D7A 21 12 1B         [10] 3633 	ld	hl, #0x1b12
      000D7D E5               [11] 3634 	push	hl
      000D7E CDr00r00         [17] 3635 	call	_WRTVRM
      000D81 F1               [10] 3636 	pop	af
      000D82 33               [ 6] 3637 	inc	sp
      000D83 C1               [10] 3638 	pop	bc
                                   3639 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3640 	push	bc
      000D85 C5               [11] 3641 	push	bc
      000D86 33               [ 6] 3642 	inc	sp
      000D87 21 15 1B         [10] 3643 	ld	hl, #0x1b15
      000D8A E5               [11] 3644 	push	hl
      000D8B CDr00r00         [17] 3645 	call	_WRTVRM
      000D8E F1               [10] 3646 	pop	af
      000D8F 33               [ 6] 3647 	inc	sp
      000D90 3E 0C            [ 7] 3648 	ld	a, #0x0c
      000D92 F5               [11] 3649 	push	af
      000D93 33               [ 6] 3650 	inc	sp
      000D94 21 16 1B         [10] 3651 	ld	hl, #0x1b16
      000D97 E5               [11] 3652 	push	hl
      000D98 CDr00r00         [17] 3653 	call	_WRTVRM
      000D9B F1               [10] 3654 	pop	af
      000D9C 33               [ 6] 3655 	inc	sp
      000D9D C1               [10] 3656 	pop	bc
                                   3657 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3658 	ld	a, c
      000D9F F5               [11] 3659 	push	af
      000DA0 33               [ 6] 3660 	inc	sp
      000DA1 21 19 1B         [10] 3661 	ld	hl, #0x1b19
      000DA4 E5               [11] 3662 	push	hl
      000DA5 CDr00r00         [17] 3663 	call	_WRTVRM
      000DA8 F1               [10] 3664 	pop	af
      000DA9 33               [ 6] 3665 	inc	sp
                                   3666 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3667 	ld	a, #0x10
      000DAC F5               [11] 3668 	push	af
      000DAD 33               [ 6] 3669 	inc	sp
      000DAE 21 1A 1B         [10] 3670 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3671 	push	hl
      000DB2 CDr00r00         [17] 3672 	call	_WRTVRM
      000DB5 F1               [10] 3673 	pop	af
      000DB6 33               [ 6] 3674 	inc	sp
      000DB7                       3675 00104$:
                                   3676 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3677 	ld	a, 7 (ix)
      000DBA F5               [11] 3678 	push	af
      000DBB 33               [ 6] 3679 	inc	sp
      000DBC 21 04 1B         [10] 3680 	ld	hl, #0x1b04
      000DBF E5               [11] 3681 	push	hl
      000DC0 CDr00r00         [17] 3682 	call	_WRTVRM
      000DC3 F1               [10] 3683 	pop	af
      000DC4 33               [ 6] 3684 	inc	sp
                                   3685 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3686 	ld	a, -4 (ix)
      000DC8 F5               [11] 3687 	push	af
      000DC9 33               [ 6] 3688 	inc	sp
      000DCA 21 07 1B         [10] 3689 	ld	hl, #0x1b07
      000DCD E5               [11] 3690 	push	hl
      000DCE CDr00r00         [17] 3691 	call	_WRTVRM
      000DD1 F1               [10] 3692 	pop	af
      000DD2 33               [ 6] 3693 	inc	sp
                                   3694 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3695 	ld	a, 7 (ix)
      000DD6 F5               [11] 3696 	push	af
      000DD7 33               [ 6] 3697 	inc	sp
      000DD8 21 08 1B         [10] 3698 	ld	hl, #0x1b08
      000DDB E5               [11] 3699 	push	hl
      000DDC CDr00r00         [17] 3700 	call	_WRTVRM
      000DDF F1               [10] 3701 	pop	af
      000DE0 33               [ 6] 3702 	inc	sp
                                   3703 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3704 	ld	a, -4 (ix)
      000DE4 F5               [11] 3705 	push	af
      000DE5 33               [ 6] 3706 	inc	sp
      000DE6 21 0B 1B         [10] 3707 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3708 	push	hl
      000DEA CDr00r00         [17] 3709 	call	_WRTVRM
      000DED F1               [10] 3710 	pop	af
      000DEE 33               [ 6] 3711 	inc	sp
                                   3712 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3713 	ld	a, 7 (ix)
      000DF2 F5               [11] 3714 	push	af
      000DF3 33               [ 6] 3715 	inc	sp
      000DF4 21 0C 1B         [10] 3716 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3717 	push	hl
      000DF8 CDr00r00         [17] 3718 	call	_WRTVRM
      000DFB F1               [10] 3719 	pop	af
      000DFC 33               [ 6] 3720 	inc	sp
                                   3721 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3722 	ld	a, -4 (ix)
      000E00 F5               [11] 3723 	push	af
      000E01 33               [ 6] 3724 	inc	sp
      000E02 21 0F 1B         [10] 3725 	ld	hl, #0x1b0f
      000E05 E5               [11] 3726 	push	hl
      000E06 CDr00r00         [17] 3727 	call	_WRTVRM
      000E09 F1               [10] 3728 	pop	af
      000E0A 33               [ 6] 3729 	inc	sp
                                   3730 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3731 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3732 	or	a, a
      000E0F 28 52            [12] 3733 	jr	Z, 00107$
                                   3734 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3735 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3736 	add	a, #0x10
      000E16 47               [ 4] 3737 	ld	b, a
      000E17 C5               [11] 3738 	push	bc
      000E18 C5               [11] 3739 	push	bc
      000E19 33               [ 6] 3740 	inc	sp
      000E1A 21 10 1B         [10] 3741 	ld	hl, #0x1b10
      000E1D E5               [11] 3742 	push	hl
      000E1E CDr00r00         [17] 3743 	call	_WRTVRM
      000E21 F1               [10] 3744 	pop	af
      000E22 33               [ 6] 3745 	inc	sp
      000E23 DD 7E FD         [19] 3746 	ld	a, -3 (ix)
      000E26 F5               [11] 3747 	push	af
      000E27 33               [ 6] 3748 	inc	sp
      000E28 21 13 1B         [10] 3749 	ld	hl, #0x1b13
      000E2B E5               [11] 3750 	push	hl
      000E2C CDr00r00         [17] 3751 	call	_WRTVRM
      000E2F F1               [10] 3752 	pop	af
      000E30 33               [ 6] 3753 	inc	sp
      000E31 C1               [10] 3754 	pop	bc
                                   3755 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3756 	push	bc
      000E33 C5               [11] 3757 	push	bc
      000E34 33               [ 6] 3758 	inc	sp
      000E35 21 14 1B         [10] 3759 	ld	hl, #0x1b14
      000E38 E5               [11] 3760 	push	hl
      000E39 CDr00r00         [17] 3761 	call	_WRTVRM
      000E3C F1               [10] 3762 	pop	af
      000E3D 33               [ 6] 3763 	inc	sp
      000E3E DD 7E FD         [19] 3764 	ld	a, -3 (ix)
      000E41 F5               [11] 3765 	push	af
      000E42 33               [ 6] 3766 	inc	sp
      000E43 21 17 1B         [10] 3767 	ld	hl, #0x1b17
      000E46 E5               [11] 3768 	push	hl
      000E47 CDr00r00         [17] 3769 	call	_WRTVRM
      000E4A F1               [10] 3770 	pop	af
      000E4B 33               [ 6] 3771 	inc	sp
      000E4C 33               [ 6] 3772 	inc	sp
      000E4D 21 18 1B         [10] 3773 	ld	hl, #0x1b18
      000E50 E5               [11] 3774 	push	hl
      000E51 CDr00r00         [17] 3775 	call	_WRTVRM
      000E54 F1               [10] 3776 	pop	af
      000E55 33               [ 6] 3777 	inc	sp
                                   3778 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3779 	ld	a, -3 (ix)
      000E59 F5               [11] 3780 	push	af
      000E5A 33               [ 6] 3781 	inc	sp
      000E5B 21 1B 1B         [10] 3782 	ld	hl, #0x1b1b
      000E5E E5               [11] 3783 	push	hl
      000E5F CDr00r00         [17] 3784 	call	_WRTVRM
      000E62 F1               [10] 3785 	pop	af
      000E63                       3786 00107$:
                                   3787 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3788 	ld	sp, ix
      000E65 DD E1            [14] 3789 	pop	ix
      000E67 C9               [10] 3790 	ret
                                   3791 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3792 ;	---------------------------------
                                   3793 ; Function HideHitSprite
                                   3794 ; ---------------------------------
      000E68                       3795 _HideHitSprite::
                                   3796 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3797 	ld	a, #0xc0
      000E6A F5               [11] 3798 	push	af
      000E6B 33               [ 6] 3799 	inc	sp
      000E6C 21 04 1B         [10] 3800 	ld	hl, #0x1b04
      000E6F E5               [11] 3801 	push	hl
      000E70 CDr00r00         [17] 3802 	call	_WRTVRM
      000E73 F1               [10] 3803 	pop	af
      000E74 33               [ 6] 3804 	inc	sp
                                   3805 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3806 	ld	a, #0xc0
      000E77 F5               [11] 3807 	push	af
      000E78 33               [ 6] 3808 	inc	sp
      000E79 21 08 1B         [10] 3809 	ld	hl, #0x1b08
      000E7C E5               [11] 3810 	push	hl
      000E7D CDr00r00         [17] 3811 	call	_WRTVRM
      000E80 F1               [10] 3812 	pop	af
      000E81 33               [ 6] 3813 	inc	sp
                                   3814 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3815 	ld	a, #0xc0
      000E84 F5               [11] 3816 	push	af
      000E85 33               [ 6] 3817 	inc	sp
      000E86 21 0C 1B         [10] 3818 	ld	hl, #0x1b0c
      000E89 E5               [11] 3819 	push	hl
      000E8A CDr00r00         [17] 3820 	call	_WRTVRM
      000E8D F1               [10] 3821 	pop	af
      000E8E 33               [ 6] 3822 	inc	sp
                                   3823 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3824 	ld	a, #0xc0
      000E91 F5               [11] 3825 	push	af
      000E92 33               [ 6] 3826 	inc	sp
      000E93 21 10 1B         [10] 3827 	ld	hl, #0x1b10
      000E96 E5               [11] 3828 	push	hl
      000E97 CDr00r00         [17] 3829 	call	_WRTVRM
      000E9A F1               [10] 3830 	pop	af
      000E9B 33               [ 6] 3831 	inc	sp
                                   3832 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3833 	ld	a, #0xc0
      000E9E F5               [11] 3834 	push	af
      000E9F 33               [ 6] 3835 	inc	sp
      000EA0 21 14 1B         [10] 3836 	ld	hl, #0x1b14
      000EA3 E5               [11] 3837 	push	hl
      000EA4 CDr00r00         [17] 3838 	call	_WRTVRM
      000EA7 F1               [10] 3839 	pop	af
      000EA8 33               [ 6] 3840 	inc	sp
                                   3841 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3842 	ld	a, #0xc0
      000EAB F5               [11] 3843 	push	af
      000EAC 33               [ 6] 3844 	inc	sp
      000EAD 21 18 1B         [10] 3845 	ld	hl, #0x1b18
      000EB0 E5               [11] 3846 	push	hl
      000EB1 CDr00r00         [17] 3847 	call	_WRTVRM
      000EB4 F1               [10] 3848 	pop	af
      000EB5 33               [ 6] 3849 	inc	sp
                                   3850 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3851 	ret
                                   3852 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3853 ;	---------------------------------
                                   3854 ; Function HideExplosionSprite
                                   3855 ; ---------------------------------
      000EB7                       3856 _HideExplosionSprite::
                                   3857 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3858 	ld	a, #0xc0
      000EB9 F5               [11] 3859 	push	af
      000EBA 33               [ 6] 3860 	inc	sp
      000EBB 21 1C 1B         [10] 3861 	ld	hl, #0x1b1c
      000EBE E5               [11] 3862 	push	hl
      000EBF CDr00r00         [17] 3863 	call	_WRTVRM
      000EC2 F1               [10] 3864 	pop	af
      000EC3 33               [ 6] 3865 	inc	sp
                                   3866 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3867 	ld	a, #0xc0
      000EC6 F5               [11] 3868 	push	af
      000EC7 33               [ 6] 3869 	inc	sp
      000EC8 21 20 1B         [10] 3870 	ld	hl, #0x1b20
      000ECB E5               [11] 3871 	push	hl
      000ECC CDr00r00         [17] 3872 	call	_WRTVRM
      000ECF F1               [10] 3873 	pop	af
      000ED0 33               [ 6] 3874 	inc	sp
                                   3875 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3876 	ld	a, #0xc0
      000ED3 F5               [11] 3877 	push	af
      000ED4 33               [ 6] 3878 	inc	sp
      000ED5 21 24 1B         [10] 3879 	ld	hl, #0x1b24
      000ED8 E5               [11] 3880 	push	hl
      000ED9 CDr00r00         [17] 3881 	call	_WRTVRM
      000EDC F1               [10] 3882 	pop	af
      000EDD 33               [ 6] 3883 	inc	sp
                                   3884 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3885 	ret
                                   3886 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3887 ;	---------------------------------
                                   3888 ; Function DrawExplosionSprite
                                   3889 ; ---------------------------------
      000EDF                       3890 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3891 	dec	sp
                                   3892 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3893 	ld	iy, #5
      000EE4 FD 39            [15] 3894 	add	iy, sp
      000EE6 FD 6E 00         [19] 3895 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3896 	srl	l
      000EEB CB 3D            [ 8] 3897 	srl	l
                                   3898 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3899 	ld	a, #0x07
      000EEF 95               [ 4] 3900 	sub	a, l
      000EF0 30 07            [12] 3901 	jr	NC, 00102$
                                   3902 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3903 	inc	sp
      000EF3 C3rB7r0E         [10] 3904 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3905 	jp	00104$
      000EF9                       3906 00102$:
                                   3907 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3908 	add	hl, hl
      000EFA 29               [11] 3909 	add	hl, hl
                                   3910 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3911 	ld	iy, #4
      000EFF FD 39            [15] 3912 	add	iy, sp
      000F01 FD 7E 00         [19] 3913 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3914 	add	a, #0xf0
      000F06 67               [ 4] 3915 	ld	h, a
      000F07 E5               [11] 3916 	push	hl
      000F08 E5               [11] 3917 	push	hl
      000F09 33               [ 6] 3918 	inc	sp
      000F0A 11 1C 1B         [10] 3919 	ld	de, #0x1b1c
      000F0D D5               [11] 3920 	push	de
      000F0E CDr00r00         [17] 3921 	call	_WRTVRM
      000F11 F1               [10] 3922 	pop	af
      000F12 33               [ 6] 3923 	inc	sp
      000F13 21 05 00         [10] 3924 	ld	hl, #5
      000F16 39               [11] 3925 	add	hl, sp
      000F17 7E               [ 7] 3926 	ld	a, (hl)
      000F18 F5               [11] 3927 	push	af
      000F19 33               [ 6] 3928 	inc	sp
      000F1A 11 1D 1B         [10] 3929 	ld	de, #0x1b1d
      000F1D D5               [11] 3930 	push	de
      000F1E CDr00r00         [17] 3931 	call	_WRTVRM
      000F21 F1               [10] 3932 	pop	af
      000F22 33               [ 6] 3933 	inc	sp
      000F23 E1               [10] 3934 	pop	hl
                                   3935 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3936 	ld	a, l
      000F25 C6 2C            [ 7] 3937 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3938 	ld	iy, #0
      000F2B FD 39            [15] 3939 	add	iy, sp
      000F2D FD 77 00         [19] 3940 	ld	0 (iy), a
      000F30 E5               [11] 3941 	push	hl
      000F31 F5               [11] 3942 	push	af
      000F32 33               [ 6] 3943 	inc	sp
      000F33 11 1E 1B         [10] 3944 	ld	de, #0x1b1e
      000F36 D5               [11] 3945 	push	de
      000F37 CDr00r00         [17] 3946 	call	_WRTVRM
      000F3A F1               [10] 3947 	pop	af
      000F3B 33               [ 6] 3948 	inc	sp
      000F3C 3E 0F            [ 7] 3949 	ld	a, #0x0f
      000F3E F5               [11] 3950 	push	af
      000F3F 33               [ 6] 3951 	inc	sp
      000F40 11 1F 1B         [10] 3952 	ld	de, #0x1b1f
      000F43 D5               [11] 3953 	push	de
      000F44 CDr00r00         [17] 3954 	call	_WRTVRM
      000F47 F1               [10] 3955 	pop	af
      000F48 33               [ 6] 3956 	inc	sp
      000F49 E1               [10] 3957 	pop	hl
                                   3958 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3959 	push	hl
      000F4B E5               [11] 3960 	push	hl
      000F4C 33               [ 6] 3961 	inc	sp
      000F4D 11 20 1B         [10] 3962 	ld	de, #0x1b20
      000F50 D5               [11] 3963 	push	de
      000F51 CDr00r00         [17] 3964 	call	_WRTVRM
      000F54 F1               [10] 3965 	pop	af
      000F55 33               [ 6] 3966 	inc	sp
      000F56 E1               [10] 3967 	pop	hl
                                   3968 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3969 	ld	iy, #3
      000F5B FD 39            [15] 3970 	add	iy, sp
      000F5D FD 6E 00         [19] 3971 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3972 	ld	a, l
      000F61 C6 10            [ 7] 3973 	add	a, #0x10
      000F63 E5               [11] 3974 	push	hl
      000F64 F5               [11] 3975 	push	af
      000F65 33               [ 6] 3976 	inc	sp
      000F66 11 21 1B         [10] 3977 	ld	de, #0x1b21
      000F69 D5               [11] 3978 	push	de
      000F6A CDr00r00         [17] 3979 	call	_WRTVRM
      000F6D F1               [10] 3980 	pop	af
      000F6E 33               [ 6] 3981 	inc	sp
      000F6F 21 02 00         [10] 3982 	ld	hl, #2
      000F72 39               [11] 3983 	add	hl, sp
      000F73 7E               [ 7] 3984 	ld	a, (hl)
      000F74 F5               [11] 3985 	push	af
      000F75 33               [ 6] 3986 	inc	sp
      000F76 11 22 1B         [10] 3987 	ld	de, #0x1b22
      000F79 D5               [11] 3988 	push	de
      000F7A CDr00r00         [17] 3989 	call	_WRTVRM
      000F7D F1               [10] 3990 	pop	af
      000F7E 33               [ 6] 3991 	inc	sp
      000F7F 3E 0A            [ 7] 3992 	ld	a, #0x0a
      000F81 F5               [11] 3993 	push	af
      000F82 33               [ 6] 3994 	inc	sp
      000F83 11 23 1B         [10] 3995 	ld	de, #0x1b23
      000F86 D5               [11] 3996 	push	de
      000F87 CDr00r00         [17] 3997 	call	_WRTVRM
      000F8A F1               [10] 3998 	pop	af
      000F8B 33               [ 6] 3999 	inc	sp
      000F8C E1               [10] 4000 	pop	hl
                                   4001 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 4002 	push	hl
      000F8E E5               [11] 4003 	push	hl
      000F8F 33               [ 6] 4004 	inc	sp
      000F90 11 24 1B         [10] 4005 	ld	de, #0x1b24
      000F93 D5               [11] 4006 	push	de
      000F94 CDr00r00         [17] 4007 	call	_WRTVRM
      000F97 F1               [10] 4008 	pop	af
      000F98 33               [ 6] 4009 	inc	sp
      000F99 E1               [10] 4010 	pop	hl
                                   4011 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4012 	ld	a, l
      000F9B C6 20            [ 7] 4013 	add	a, #0x20
      000F9D F5               [11] 4014 	push	af
      000F9E 33               [ 6] 4015 	inc	sp
      000F9F 21 25 1B         [10] 4016 	ld	hl, #0x1b25
      000FA2 E5               [11] 4017 	push	hl
      000FA3 CDr00r00         [17] 4018 	call	_WRTVRM
      000FA6 F1               [10] 4019 	pop	af
      000FA7 33               [ 6] 4020 	inc	sp
                                   4021 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4022 	ld	hl, #0
      000FAB 39               [11] 4023 	add	hl, sp
      000FAC 7E               [ 7] 4024 	ld	a, (hl)
      000FAD F5               [11] 4025 	push	af
      000FAE 33               [ 6] 4026 	inc	sp
      000FAF 21 26 1B         [10] 4027 	ld	hl, #0x1b26
      000FB2 E5               [11] 4028 	push	hl
      000FB3 CDr00r00         [17] 4029 	call	_WRTVRM
      000FB6 F1               [10] 4030 	pop	af
      000FB7 33               [ 6] 4031 	inc	sp
                                   4032 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4033 	ld	a, #0x03
      000FBA F5               [11] 4034 	push	af
      000FBB 33               [ 6] 4035 	inc	sp
      000FBC 21 27 1B         [10] 4036 	ld	hl, #0x1b27
      000FBF E5               [11] 4037 	push	hl
      000FC0 CDr00r00         [17] 4038 	call	_WRTVRM
      000FC3 F1               [10] 4039 	pop	af
      000FC4 33               [ 6] 4040 	inc	sp
      000FC5                       4041 00104$:
                                   4042 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4043 	inc	sp
      000FC6 C9               [10] 4044 	ret
                                   4045 ;src\/Graphics\Countdown.h:12: void AnimateSprites(byte x, byte y, byte pattern) {
                                   4046 ;	---------------------------------
                                   4047 ; Function AnimateSprites
                                   4048 ; ---------------------------------
      000FC7                       4049 _AnimateSprites::
      000FC7 DD E5            [15] 4050 	push	ix
      000FC9 DD 21 00 00      [14] 4051 	ld	ix,#0
      000FCD DD 39            [15] 4052 	add	ix,sp
      000FCF 3B               [ 6] 4053 	dec	sp
                                   4054 ;src\/Graphics\Countdown.h:14: WRTVRM(SPRATT, 	    y); //96-16);
      000FD0 DD 7E 05         [19] 4055 	ld	a, 5 (ix)
      000FD3 F5               [11] 4056 	push	af
      000FD4 33               [ 6] 4057 	inc	sp
      000FD5 21 00 1B         [10] 4058 	ld	hl, #0x1b00
      000FD8 E5               [11] 4059 	push	hl
      000FD9 CDr00r00         [17] 4060 	call	_WRTVRM
      000FDC F1               [10] 4061 	pop	af
      000FDD 33               [ 6] 4062 	inc	sp
                                   4063 ;src\/Graphics\Countdown.h:15: WRTVRM(SPRATT + 1, 	256-x-16); //128-16);
      000FDE DD 4E 04         [19] 4064 	ld	c, 4 (ix)
      000FE1 3E F0            [ 7] 4065 	ld	a, #0xf0
      000FE3 91               [ 4] 4066 	sub	a, c
      000FE4 DD 77 FF         [19] 4067 	ld	-1 (ix), a
      000FE7 F5               [11] 4068 	push	af
      000FE8 33               [ 6] 4069 	inc	sp
      000FE9 21 01 1B         [10] 4070 	ld	hl, #0x1b01
      000FEC E5               [11] 4071 	push	hl
      000FED CDr00r00         [17] 4072 	call	_WRTVRM
      000FF0 F1               [10] 4073 	pop	af
      000FF1 33               [ 6] 4074 	inc	sp
                                   4075 ;src\/Graphics\Countdown.h:16: WRTVRM(SPRATT + 2, 	pattern);
      000FF2 DD 7E 06         [19] 4076 	ld	a, 6 (ix)
      000FF5 F5               [11] 4077 	push	af
      000FF6 33               [ 6] 4078 	inc	sp
      000FF7 21 02 1B         [10] 4079 	ld	hl, #0x1b02
      000FFA E5               [11] 4080 	push	hl
      000FFB CDr00r00         [17] 4081 	call	_WRTVRM
      000FFE F1               [10] 4082 	pop	af
      000FFF 33               [ 6] 4083 	inc	sp
                                   4084 ;src\/Graphics\Countdown.h:17: WRTVRM(SPRATT + 3, 	10);
      001000 3E 0A            [ 7] 4085 	ld	a, #0x0a
      001002 F5               [11] 4086 	push	af
      001003 33               [ 6] 4087 	inc	sp
      001004 21 03 1B         [10] 4088 	ld	hl, #0x1b03
      001007 E5               [11] 4089 	push	hl
      001008 CDr00r00         [17] 4090 	call	_WRTVRM
      00100B F1               [10] 4091 	pop	af
      00100C 33               [ 6] 4092 	inc	sp
                                   4093 ;src\/Graphics\Countdown.h:20: WRTVRM(SPRATT + 4, 	y); //96-16);
      00100D DD 7E 05         [19] 4094 	ld	a, 5 (ix)
      001010 F5               [11] 4095 	push	af
      001011 33               [ 6] 4096 	inc	sp
      001012 21 04 1B         [10] 4097 	ld	hl, #0x1b04
      001015 E5               [11] 4098 	push	hl
      001016 CDr00r00         [17] 4099 	call	_WRTVRM
      001019 F1               [10] 4100 	pop	af
      00101A 33               [ 6] 4101 	inc	sp
                                   4102 ;src\/Graphics\Countdown.h:21: WRTVRM(SPRATT + 5, 	x);
      00101B DD 7E 04         [19] 4103 	ld	a, 4 (ix)
      00101E F5               [11] 4104 	push	af
      00101F 33               [ 6] 4105 	inc	sp
      001020 21 05 1B         [10] 4106 	ld	hl, #0x1b05
      001023 E5               [11] 4107 	push	hl
      001024 CDr00r00         [17] 4108 	call	_WRTVRM
      001027 F1               [10] 4109 	pop	af
      001028 33               [ 6] 4110 	inc	sp
                                   4111 ;src\/Graphics\Countdown.h:22: WRTVRM(SPRATT + 6,  pattern + 4);
      001029 DD 4E 06         [19] 4112 	ld	c, 6 (ix)
      00102C 79               [ 4] 4113 	ld	a, c
      00102D 3C               [ 4] 4114 	inc	a
      00102E 3C               [ 4] 4115 	inc	a
      00102F 3C               [ 4] 4116 	inc	a
      001030 3C               [ 4] 4117 	inc	a
      001031 C5               [11] 4118 	push	bc
      001032 F5               [11] 4119 	push	af
      001033 33               [ 6] 4120 	inc	sp
      001034 21 06 1B         [10] 4121 	ld	hl, #0x1b06
      001037 E5               [11] 4122 	push	hl
      001038 CDr00r00         [17] 4123 	call	_WRTVRM
      00103B F1               [10] 4124 	pop	af
      00103C 33               [ 6] 4125 	inc	sp
      00103D 3E 0A            [ 7] 4126 	ld	a, #0x0a
      00103F F5               [11] 4127 	push	af
      001040 33               [ 6] 4128 	inc	sp
      001041 21 07 1B         [10] 4129 	ld	hl, #0x1b07
      001044 E5               [11] 4130 	push	hl
      001045 CDr00r00         [17] 4131 	call	_WRTVRM
      001048 F1               [10] 4132 	pop	af
      001049 33               [ 6] 4133 	inc	sp
      00104A C1               [10] 4134 	pop	bc
                                   4135 ;src\/Graphics\Countdown.h:26: WRTVRM(SPRATT + 8, 	192-y-16); //96);
      00104B DD 46 05         [19] 4136 	ld	b, 5 (ix)
      00104E 3E B0            [ 7] 4137 	ld	a, #0xb0
      001050 90               [ 4] 4138 	sub	a, b
      001051 47               [ 4] 4139 	ld	b, a
      001052 C5               [11] 4140 	push	bc
      001053 C5               [11] 4141 	push	bc
      001054 33               [ 6] 4142 	inc	sp
      001055 21 08 1B         [10] 4143 	ld	hl, #0x1b08
      001058 E5               [11] 4144 	push	hl
      001059 CDr00r00         [17] 4145 	call	_WRTVRM
      00105C F1               [10] 4146 	pop	af
      00105D 33               [ 6] 4147 	inc	sp
      00105E DD 7E FF         [19] 4148 	ld	a, -1 (ix)
      001061 F5               [11] 4149 	push	af
      001062 33               [ 6] 4150 	inc	sp
      001063 21 09 1B         [10] 4151 	ld	hl, #0x1b09
      001066 E5               [11] 4152 	push	hl
      001067 CDr00r00         [17] 4153 	call	_WRTVRM
      00106A F1               [10] 4154 	pop	af
      00106B 33               [ 6] 4155 	inc	sp
      00106C C1               [10] 4156 	pop	bc
                                   4157 ;src\/Graphics\Countdown.h:28: WRTVRM(SPRATT + 10,	pattern + 8);
      00106D 79               [ 4] 4158 	ld	a, c
      00106E C6 08            [ 7] 4159 	add	a, #0x08
      001070 C5               [11] 4160 	push	bc
      001071 F5               [11] 4161 	push	af
      001072 33               [ 6] 4162 	inc	sp
      001073 21 0A 1B         [10] 4163 	ld	hl, #0x1b0a
      001076 E5               [11] 4164 	push	hl
      001077 CDr00r00         [17] 4165 	call	_WRTVRM
      00107A F1               [10] 4166 	pop	af
      00107B 33               [ 6] 4167 	inc	sp
      00107C 3E 0A            [ 7] 4168 	ld	a, #0x0a
      00107E F5               [11] 4169 	push	af
      00107F 33               [ 6] 4170 	inc	sp
      001080 21 0B 1B         [10] 4171 	ld	hl, #0x1b0b
      001083 E5               [11] 4172 	push	hl
      001084 CDr00r00         [17] 4173 	call	_WRTVRM
      001087 F1               [10] 4174 	pop	af
      001088 33               [ 6] 4175 	inc	sp
      001089 C1               [10] 4176 	pop	bc
                                   4177 ;src\/Graphics\Countdown.h:32: WRTVRM(SPRATT + 12,	192-y-16); //96);
      00108A C5               [11] 4178 	push	bc
      00108B C5               [11] 4179 	push	bc
      00108C 33               [ 6] 4180 	inc	sp
      00108D 21 0C 1B         [10] 4181 	ld	hl, #0x1b0c
      001090 E5               [11] 4182 	push	hl
      001091 CDr00r00         [17] 4183 	call	_WRTVRM
      001094 F1               [10] 4184 	pop	af
      001095 33               [ 6] 4185 	inc	sp
      001096 DD 7E 04         [19] 4186 	ld	a, 4 (ix)
      001099 F5               [11] 4187 	push	af
      00109A 33               [ 6] 4188 	inc	sp
      00109B 21 0D 1B         [10] 4189 	ld	hl, #0x1b0d
      00109E E5               [11] 4190 	push	hl
      00109F CDr00r00         [17] 4191 	call	_WRTVRM
      0010A2 F1               [10] 4192 	pop	af
      0010A3 33               [ 6] 4193 	inc	sp
      0010A4 C1               [10] 4194 	pop	bc
                                   4195 ;src\/Graphics\Countdown.h:34: WRTVRM(SPRATT + 14,	pattern + 12);
      0010A5 79               [ 4] 4196 	ld	a, c
      0010A6 C6 0C            [ 7] 4197 	add	a, #0x0c
      0010A8 F5               [11] 4198 	push	af
      0010A9 33               [ 6] 4199 	inc	sp
      0010AA 21 0E 1B         [10] 4200 	ld	hl, #0x1b0e
      0010AD E5               [11] 4201 	push	hl
      0010AE CDr00r00         [17] 4202 	call	_WRTVRM
      0010B1 F1               [10] 4203 	pop	af
      0010B2 33               [ 6] 4204 	inc	sp
                                   4205 ;src\/Graphics\Countdown.h:35: WRTVRM(SPRATT + 15,	10);
      0010B3 3E 0A            [ 7] 4206 	ld	a, #0x0a
      0010B5 F5               [11] 4207 	push	af
      0010B6 33               [ 6] 4208 	inc	sp
      0010B7 21 0F 1B         [10] 4209 	ld	hl, #0x1b0f
      0010BA E5               [11] 4210 	push	hl
      0010BB CDr00r00         [17] 4211 	call	_WRTVRM
      0010BE F1               [10] 4212 	pop	af
      0010BF 33               [ 6] 4213 	inc	sp
                                   4214 ;src\/Graphics\Countdown.h:36: }
      0010C0 33               [ 6] 4215 	inc	sp
      0010C1 DD E1            [14] 4216 	pop	ix
      0010C3 C9               [10] 4217 	ret
      0010C4                       4218 _colors:
      0010C4 0F                    4219 	.db #0x0f	; 15
      0010C5 0E                    4220 	.db #0x0e	; 14
      0010C6 05                    4221 	.db #0x05	; 5
      0010C7 04                    4222 	.db #0x04	; 4
      0010C8 04                    4223 	.db #0x04	; 4
      0010C9 05                    4224 	.db #0x05	; 5
      0010CA 0E                    4225 	.db #0x0e	; 14
      0010CB 0F                    4226 	.db #0x0f	; 15
                                   4227 ;src\/Graphics\Countdown.h:38: void BlinkNumber(byte colorIndex) {
                                   4228 ;	---------------------------------
                                   4229 ; Function BlinkNumber
                                   4230 ; ---------------------------------
      0010CC                       4231 _BlinkNumber::
                                   4232 ;src\/Graphics\Countdown.h:41: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      0010CC 3ErC4            [ 7] 4233 	ld	a, #<(_colors)
      0010CE 21 02 00         [10] 4234 	ld	hl, #2
      0010D1 39               [11] 4235 	add	hl, sp
      0010D2 86               [ 7] 4236 	add	a, (hl)
      0010D3 4F               [ 4] 4237 	ld	c, a
      0010D4 3Es10            [ 7] 4238 	ld	a, #>(_colors)
      0010D6 CE 00            [ 7] 4239 	adc	a, #0x00
      0010D8 47               [ 4] 4240 	ld	b, a
      0010D9 0A               [ 7] 4241 	ld	a, (bc)
      0010DA C5               [11] 4242 	push	bc
      0010DB F5               [11] 4243 	push	af
      0010DC 33               [ 6] 4244 	inc	sp
      0010DD 21 03 1B         [10] 4245 	ld	hl, #0x1b03
      0010E0 E5               [11] 4246 	push	hl
      0010E1 CDr00r00         [17] 4247 	call	_WRTVRM
      0010E4 F1               [10] 4248 	pop	af
      0010E5 33               [ 6] 4249 	inc	sp
      0010E6 C1               [10] 4250 	pop	bc
                                   4251 ;src\/Graphics\Countdown.h:42: WRTVRM(SPRATT + 7, 	colors[colorIndex]);
      0010E7 0A               [ 7] 4252 	ld	a, (bc)
      0010E8 C5               [11] 4253 	push	bc
      0010E9 F5               [11] 4254 	push	af
      0010EA 33               [ 6] 4255 	inc	sp
      0010EB 21 07 1B         [10] 4256 	ld	hl, #0x1b07
      0010EE E5               [11] 4257 	push	hl
      0010EF CDr00r00         [17] 4258 	call	_WRTVRM
      0010F2 F1               [10] 4259 	pop	af
      0010F3 33               [ 6] 4260 	inc	sp
      0010F4 C1               [10] 4261 	pop	bc
                                   4262 ;src\/Graphics\Countdown.h:43: WRTVRM(SPRATT + 11,	colors[colorIndex]);
      0010F5 0A               [ 7] 4263 	ld	a, (bc)
      0010F6 C5               [11] 4264 	push	bc
      0010F7 F5               [11] 4265 	push	af
      0010F8 33               [ 6] 4266 	inc	sp
      0010F9 21 0B 1B         [10] 4267 	ld	hl, #0x1b0b
      0010FC E5               [11] 4268 	push	hl
      0010FD CDr00r00         [17] 4269 	call	_WRTVRM
      001100 F1               [10] 4270 	pop	af
      001101 33               [ 6] 4271 	inc	sp
      001102 C1               [10] 4272 	pop	bc
                                   4273 ;src\/Graphics\Countdown.h:44: WRTVRM(SPRATT + 15, colors[colorIndex]);    
      001103 0A               [ 7] 4274 	ld	a, (bc)
      001104 F5               [11] 4275 	push	af
      001105 33               [ 6] 4276 	inc	sp
      001106 21 0F 1B         [10] 4277 	ld	hl, #0x1b0f
      001109 E5               [11] 4278 	push	hl
      00110A CDr00r00         [17] 4279 	call	_WRTVRM
      00110D F1               [10] 4280 	pop	af
      00110E 33               [ 6] 4281 	inc	sp
                                   4282 ;src\/Graphics\Countdown.h:45: }
      00110F C9               [10] 4283 	ret
                                   4284 ;src\/Graphics\Countdown.h:47: void ShowCountdown() {
                                   4285 ;	---------------------------------
                                   4286 ; Function ShowCountdown
                                   4287 ; ---------------------------------
      001110                       4288 _ShowCountdown::
      001110 DD E5            [15] 4289 	push	ix
      001112 DD 21 00 00      [14] 4290 	ld	ix,#0
      001116 DD 39            [15] 4291 	add	ix,sp
      001118 F5               [11] 4292 	push	af
      001119 F5               [11] 4293 	push	af
      00111A 3B               [ 6] 4294 	dec	sp
                                   4295 ;src\/Graphics\Countdown.h:49: byte x = 128-80, y = 0, colorIndex = 0;
      00111B 0E 30            [ 7] 4296 	ld	c, #0x30
      00111D DD 36 FB 00      [19] 4297 	ld	-5 (ix), #0
      001121 DD 36 FE 00      [19] 4298 	ld	-2 (ix), #0
                                   4299 ;src\/Graphics\Countdown.h:51: while(counter++ < 240) {
      001125 DD 36 FF 00      [19] 4300 	ld	-1 (ix), #0
      001129                       4301 00137$:
      001129 DD 7E FF         [19] 4302 	ld	a, -1 (ix)
      00112C D6 F0            [ 7] 4303 	sub	a, #0xf0
      00112E D2r5Ar12         [10] 4304 	jp	NC, 00139$
      001131 DD 34 FF         [23] 4305 	inc	-1 (ix)
                                   4306 ;src\/Graphics\Countdown.h:61: word lastJiffy = JIFFY;
      001134 ED 5B 9E FC      [20] 4307 	ld	de, (_JIFFY)
                                   4308 ;src\/Graphics\Countdown.h:62: while (lastJiffy == JIFFY) {
      001138                       4309 00101$:
      001138 2A 9E FC         [16] 4310 	ld	hl, (_JIFFY)
      00113B BF               [ 4] 4311 	cp	a, a
      00113C ED 52            [15] 4312 	sbc	hl, de
      00113E 28 F8            [12] 4313 	jr	Z, 00101$
                                   4314 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001140 79               [ 4] 4315 	ld	a, c
      001141 D6 80            [ 7] 4316 	sub	a, #0x80
      001143 3E 00            [ 7] 4317 	ld	a, #0x00
      001145 17               [ 4] 4318 	rla
      001146 47               [ 4] 4319 	ld	b, a
      001147 59               [ 4] 4320 	ld	e, c
                                   4321 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001148 DD 7E FB         [19] 4322 	ld	a, -5 (ix)
      00114B D6 50            [ 7] 4323 	sub	a, #0x50
      00114D 3E 00            [ 7] 4324 	ld	a, #0x00
      00114F 17               [ 4] 4325 	rla
      001150 DD 77 FC         [19] 4326 	ld	-4 (ix), a
      001153 DD 56 FB         [19] 4327 	ld	d, -5 (ix)
                                   4328 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001156 1C               [ 4] 4329 	inc	e
      001157 1C               [ 4] 4330 	inc	e
      001158 1C               [ 4] 4331 	inc	e
      001159 1C               [ 4] 4332 	inc	e
                                   4333 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      00115A 7A               [ 4] 4334 	ld	a, d
      00115B C6 04            [ 7] 4335 	add	a, #0x04
      00115D DD 77 FD         [19] 4336 	ld	-3 (ix), a
                                   4337 ;src\/Graphics\Countdown.h:66: if(counter < 30) {
      001160 DD 7E FF         [19] 4338 	ld	a, -1 (ix)
      001163 D6 1E            [ 7] 4339 	sub	a, #0x1e
      001165 30 28            [12] 4340 	jr	NC, 00135$
                                   4341 ;src\/Graphics\Countdown.h:67: colorIndex = 0;
      001167 DD 36 FE 00      [19] 4342 	ld	-2 (ix), #0
                                   4343 ;src\/Graphics\Countdown.h:69: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_3_32X32);
      00116B C5               [11] 4344 	push	bc
      00116C D5               [11] 4345 	push	de
      00116D 3E 54            [ 7] 4346 	ld	a, #0x54
      00116F F5               [11] 4347 	push	af
      001170 33               [ 6] 4348 	inc	sp
      001171 DD 46 FB         [19] 4349 	ld	b, -5 (ix)
      001174 C5               [11] 4350 	push	bc
      001175 CDrC7r0F         [17] 4351 	call	_AnimateSprites
      001178 F1               [10] 4352 	pop	af
      001179 33               [ 6] 4353 	inc	sp
      00117A D1               [10] 4354 	pop	de
      00117B C1               [10] 4355 	pop	bc
                                   4356 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      00117C 78               [ 4] 4357 	ld	a, b
      00117D B7               [ 4] 4358 	or	a, a
      00117E 28 01            [12] 4359 	jr	Z, 00105$
      001180 4B               [ 4] 4360 	ld	c, e
      001181                       4361 00105$:
                                   4362 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001181 DD 7E FC         [19] 4363 	ld	a, -4 (ix)
      001184 B7               [ 4] 4364 	or	a, a
      001185 28 A2            [12] 4365 	jr	Z, 00137$
      001187 DD 7E FD         [19] 4366 	ld	a, -3 (ix)
      00118A DD 77 FB         [19] 4367 	ld	-5 (ix), a
      00118D 18 9A            [12] 4368 	jr	00137$
      00118F                       4369 00135$:
                                   4370 ;src\/Graphics\Countdown.h:74: else if(counter >= 60 && counter < 90) {
      00118F DD 7E FF         [19] 4371 	ld	a, -1 (ix)
      001192 D6 3C            [ 7] 4372 	sub	a, #0x3c
      001194 38 31            [12] 4373 	jr	C, 00131$
      001196 DD 7E FF         [19] 4374 	ld	a, -1 (ix)
      001199 D6 5A            [ 7] 4375 	sub	a, #0x5a
      00119B 30 2A            [12] 4376 	jr	NC, 00131$
                                   4377 ;src\/Graphics\Countdown.h:75: colorIndex = 0;
      00119D DD 36 FE 00      [19] 4378 	ld	-2 (ix), #0
                                   4379 ;src\/Graphics\Countdown.h:77: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_2_32X32);
      0011A1 C5               [11] 4380 	push	bc
      0011A2 D5               [11] 4381 	push	de
      0011A3 3E 64            [ 7] 4382 	ld	a, #0x64
      0011A5 F5               [11] 4383 	push	af
      0011A6 33               [ 6] 4384 	inc	sp
      0011A7 DD 46 FB         [19] 4385 	ld	b, -5 (ix)
      0011AA C5               [11] 4386 	push	bc
      0011AB CDrC7r0F         [17] 4387 	call	_AnimateSprites
      0011AE F1               [10] 4388 	pop	af
      0011AF 33               [ 6] 4389 	inc	sp
      0011B0 D1               [10] 4390 	pop	de
      0011B1 C1               [10] 4391 	pop	bc
                                   4392 ;src\/Graphics\Countdown.h:79: if(x < 128) x += 4;
      0011B2 78               [ 4] 4393 	ld	a, b
      0011B3 B7               [ 4] 4394 	or	a, a
      0011B4 28 01            [12] 4395 	jr	Z, 00109$
      0011B6 4B               [ 4] 4396 	ld	c, e
      0011B7                       4397 00109$:
                                   4398 ;src\/Graphics\Countdown.h:80: if(y < 80) y += 4;
      0011B7 DD 7E FC         [19] 4399 	ld	a, -4 (ix)
      0011BA B7               [ 4] 4400 	or	a, a
      0011BB CAr29r11         [10] 4401 	jp	Z, 00137$
      0011BE DD 7E FD         [19] 4402 	ld	a, -3 (ix)
      0011C1 DD 77 FB         [19] 4403 	ld	-5 (ix), a
      0011C4 C3r29r11         [10] 4404 	jp	00137$
      0011C7                       4405 00131$:
                                   4406 ;src\/Graphics\Countdown.h:82: else if(counter >= 120 && counter < 150) {
      0011C7 DD 7E FF         [19] 4407 	ld	a, -1 (ix)
      0011CA D6 78            [ 7] 4408 	sub	a, #0x78
      0011CC 38 31            [12] 4409 	jr	C, 00127$
      0011CE DD 7E FF         [19] 4410 	ld	a, -1 (ix)
      0011D1 D6 96            [ 7] 4411 	sub	a, #0x96
      0011D3 30 2A            [12] 4412 	jr	NC, 00127$
                                   4413 ;src\/Graphics\Countdown.h:83: colorIndex = 0;
      0011D5 DD 36 FE 00      [19] 4414 	ld	-2 (ix), #0
                                   4415 ;src\/Graphics\Countdown.h:85: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_1_32X32);
      0011D9 C5               [11] 4416 	push	bc
      0011DA D5               [11] 4417 	push	de
      0011DB 3E 74            [ 7] 4418 	ld	a, #0x74
      0011DD F5               [11] 4419 	push	af
      0011DE 33               [ 6] 4420 	inc	sp
      0011DF DD 46 FB         [19] 4421 	ld	b, -5 (ix)
      0011E2 C5               [11] 4422 	push	bc
      0011E3 CDrC7r0F         [17] 4423 	call	_AnimateSprites
      0011E6 F1               [10] 4424 	pop	af
      0011E7 33               [ 6] 4425 	inc	sp
      0011E8 D1               [10] 4426 	pop	de
      0011E9 C1               [10] 4427 	pop	bc
                                   4428 ;src\/Graphics\Countdown.h:87: if(x < 128) x += 4;
      0011EA 78               [ 4] 4429 	ld	a, b
      0011EB B7               [ 4] 4430 	or	a, a
      0011EC 28 01            [12] 4431 	jr	Z, 00113$
      0011EE 4B               [ 4] 4432 	ld	c, e
      0011EF                       4433 00113$:
                                   4434 ;src\/Graphics\Countdown.h:88: if(y < 80) y += 4;
      0011EF DD 7E FC         [19] 4435 	ld	a, -4 (ix)
      0011F2 B7               [ 4] 4436 	or	a, a
      0011F3 CAr29r11         [10] 4437 	jp	Z, 00137$
      0011F6 DD 7E FD         [19] 4438 	ld	a, -3 (ix)
      0011F9 DD 77 FB         [19] 4439 	ld	-5 (ix), a
      0011FC C3r29r11         [10] 4440 	jp	00137$
      0011FF                       4441 00127$:
                                   4442 ;src\/Graphics\Countdown.h:90: else if(counter >= 180 && counter < 210) {
      0011FF DD 7E FF         [19] 4443 	ld	a, -1 (ix)
      001202 D6 B4            [ 7] 4444 	sub	a, #0xb4
      001204 38 31            [12] 4445 	jr	C, 00123$
      001206 DD 7E FF         [19] 4446 	ld	a, -1 (ix)
      001209 D6 D2            [ 7] 4447 	sub	a, #0xd2
      00120B 30 2A            [12] 4448 	jr	NC, 00123$
                                   4449 ;src\/Graphics\Countdown.h:91: colorIndex = 0;
      00120D DD 36 FE 00      [19] 4450 	ld	-2 (ix), #0
                                   4451 ;src\/Graphics\Countdown.h:93: AnimateSprites(x, y, SPRITE_PATTERN_GO_32X32);
      001211 C5               [11] 4452 	push	bc
      001212 D5               [11] 4453 	push	de
      001213 3E 84            [ 7] 4454 	ld	a, #0x84
      001215 F5               [11] 4455 	push	af
      001216 33               [ 6] 4456 	inc	sp
      001217 DD 46 FB         [19] 4457 	ld	b, -5 (ix)
      00121A C5               [11] 4458 	push	bc
      00121B CDrC7r0F         [17] 4459 	call	_AnimateSprites
      00121E F1               [10] 4460 	pop	af
      00121F 33               [ 6] 4461 	inc	sp
      001220 D1               [10] 4462 	pop	de
      001221 C1               [10] 4463 	pop	bc
                                   4464 ;src\/Graphics\Countdown.h:95: if(x < 128) x += 4;
      001222 78               [ 4] 4465 	ld	a, b
      001223 B7               [ 4] 4466 	or	a, a
      001224 28 01            [12] 4467 	jr	Z, 00117$
      001226 4B               [ 4] 4468 	ld	c, e
      001227                       4469 00117$:
                                   4470 ;src\/Graphics\Countdown.h:96: if(y < 80) y += 4;
      001227 DD 7E FC         [19] 4471 	ld	a, -4 (ix)
      00122A B7               [ 4] 4472 	or	a, a
      00122B CAr29r11         [10] 4473 	jp	Z, 00137$
      00122E DD 7E FD         [19] 4474 	ld	a, -3 (ix)
      001231 DD 77 FB         [19] 4475 	ld	-5 (ix), a
      001234 C3r29r11         [10] 4476 	jp	00137$
      001237                       4477 00123$:
                                   4478 ;src\/Graphics\Countdown.h:99: x = 128-80;
      001237 0E 30            [ 7] 4479 	ld	c, #0x30
                                   4480 ;src\/Graphics\Countdown.h:100: y = 0;
      001239 DD 36 FB 00      [19] 4481 	ld	-5 (ix), #0
                                   4482 ;src\/Graphics\Countdown.h:102: BlinkNumber(colorIndex);
      00123D C5               [11] 4483 	push	bc
      00123E DD 7E FE         [19] 4484 	ld	a, -2 (ix)
      001241 F5               [11] 4485 	push	af
      001242 33               [ 6] 4486 	inc	sp
      001243 CDrCCr10         [17] 4487 	call	_BlinkNumber
      001246 33               [ 6] 4488 	inc	sp
      001247 C1               [10] 4489 	pop	bc
                                   4490 ;src\/Graphics\Countdown.h:104: colorIndex++;
      001248 DD 34 FE         [23] 4491 	inc	-2 (ix)
                                   4492 ;src\/Graphics\Countdown.h:105: if(colorIndex >= sizeof(colors)) colorIndex = 0;
      00124B DD 7E FE         [19] 4493 	ld	a, -2 (ix)
      00124E D6 08            [ 7] 4494 	sub	a, #0x08
      001250 DAr29r11         [10] 4495 	jp	C, 00137$
      001253 DD 36 FE 00      [19] 4496 	ld	-2 (ix), #0
      001257 C3r29r11         [10] 4497 	jp	00137$
      00125A                       4498 00139$:
                                   4499 ;src\/Graphics\Countdown.h:110: WRTVRM(SPRATT, 	        192);
      00125A 3E C0            [ 7] 4500 	ld	a, #0xc0
      00125C F5               [11] 4501 	push	af
      00125D 33               [ 6] 4502 	inc	sp
      00125E 21 00 1B         [10] 4503 	ld	hl, #0x1b00
      001261 E5               [11] 4504 	push	hl
      001262 CDr00r00         [17] 4505 	call	_WRTVRM
      001265 F1               [10] 4506 	pop	af
      001266 33               [ 6] 4507 	inc	sp
                                   4508 ;src\/Graphics\Countdown.h:111: WRTVRM(SPRATT + 4, 	    192);
      001267 3E C0            [ 7] 4509 	ld	a, #0xc0
      001269 F5               [11] 4510 	push	af
      00126A 33               [ 6] 4511 	inc	sp
      00126B 21 04 1B         [10] 4512 	ld	hl, #0x1b04
      00126E E5               [11] 4513 	push	hl
      00126F CDr00r00         [17] 4514 	call	_WRTVRM
      001272 F1               [10] 4515 	pop	af
      001273 33               [ 6] 4516 	inc	sp
                                   4517 ;src\/Graphics\Countdown.h:112: WRTVRM(SPRATT + 8, 	    192);
      001274 3E C0            [ 7] 4518 	ld	a, #0xc0
      001276 F5               [11] 4519 	push	af
      001277 33               [ 6] 4520 	inc	sp
      001278 21 08 1B         [10] 4521 	ld	hl, #0x1b08
      00127B E5               [11] 4522 	push	hl
      00127C CDr00r00         [17] 4523 	call	_WRTVRM
      00127F F1               [10] 4524 	pop	af
      001280 33               [ 6] 4525 	inc	sp
                                   4526 ;src\/Graphics\Countdown.h:113: WRTVRM(SPRATT + 12,	    192);
      001281 3E C0            [ 7] 4527 	ld	a, #0xc0
      001283 F5               [11] 4528 	push	af
      001284 33               [ 6] 4529 	inc	sp
      001285 21 0C 1B         [10] 4530 	ld	hl, #0x1b0c
      001288 E5               [11] 4531 	push	hl
      001289 CDr00r00         [17] 4532 	call	_WRTVRM
                                   4533 ;src\/Graphics\Countdown.h:114: }
      00128C DD F9            [10] 4534 	ld	sp,ix
      00128E DD E1            [14] 4535 	pop	ix
      001290 C9               [10] 4536 	ret
                                   4537 ;src\/Graphics\Graphics.h:1: void ClearNamesTable() {
                                   4538 ;	---------------------------------
                                   4539 ; Function ClearNamesTable
                                   4540 ; ---------------------------------
      001291                       4541 _ClearNamesTable::
                                   4542 ;src\/Graphics\Graphics.h:2: FILVRM(NAMTBL, 768, 0);
      001291 AF               [ 4] 4543 	xor	a, a
      001292 F5               [11] 4544 	push	af
      001293 33               [ 6] 4545 	inc	sp
      001294 21 00 03         [10] 4546 	ld	hl, #0x0300
      001297 E5               [11] 4547 	push	hl
      001298 26 18            [ 7] 4548 	ld	h, #0x18
      00129A E5               [11] 4549 	push	hl
      00129B CDr00r00         [17] 4550 	call	_FILVRM
      00129E F1               [10] 4551 	pop	af
      00129F F1               [10] 4552 	pop	af
      0012A0 33               [ 6] 4553 	inc	sp
                                   4554 ;src\/Graphics\Graphics.h:3: }
      0012A1 C9               [10] 4555 	ret
                                   4556 ;src\/Graphics\Graphics.h:5: void DrawChar(byte character, byte col, byte line) {
                                   4557 ;	---------------------------------
                                   4558 ; Function DrawChar
                                   4559 ; ---------------------------------
      0012A2                       4560 _DrawChar::
      0012A2 DD E5            [15] 4561 	push	ix
      0012A4 DD 21 00 00      [14] 4562 	ld	ix,#0
      0012A8 DD 39            [15] 4563 	add	ix,sp
                                   4564 ;src\/Graphics\Graphics.h:6: WRTVRM(NAMTBL + (line * 32) + col, character);
      0012AA DD 6E 06         [19] 4565 	ld	l, 6 (ix)
      0012AD 26 00            [ 7] 4566 	ld	h, #0x00
      0012AF 29               [11] 4567 	add	hl, hl
      0012B0 29               [11] 4568 	add	hl, hl
      0012B1 29               [11] 4569 	add	hl, hl
      0012B2 29               [11] 4570 	add	hl, hl
      0012B3 29               [11] 4571 	add	hl, hl
      0012B4 01 00 18         [10] 4572 	ld	bc, #0x1800
      0012B7 09               [11] 4573 	add	hl, bc
      0012B8 DD 4E 05         [19] 4574 	ld	c, 5 (ix)
      0012BB 06 00            [ 7] 4575 	ld	b, #0x00
      0012BD 09               [11] 4576 	add	hl, bc
      0012BE DD 7E 04         [19] 4577 	ld	a, 4 (ix)
      0012C1 F5               [11] 4578 	push	af
      0012C2 33               [ 6] 4579 	inc	sp
      0012C3 E5               [11] 4580 	push	hl
      0012C4 CDr00r00         [17] 4581 	call	_WRTVRM
      0012C7 F1               [10] 4582 	pop	af
      0012C8 33               [ 6] 4583 	inc	sp
                                   4584 ;src\/Graphics\Graphics.h:7: }
      0012C9 DD E1            [14] 4585 	pop	ix
      0012CB C9               [10] 4586 	ret
                                   4587 ;src\/Graphics\Graphics.h:9: void DrawString(const char* str, byte col, byte line) {
                                   4588 ;	---------------------------------
                                   4589 ; Function DrawString
                                   4590 ; ---------------------------------
      0012CC                       4591 _DrawString::
      0012CC DD E5            [15] 4592 	push	ix
      0012CE DD 21 00 00      [14] 4593 	ld	ix,#0
      0012D2 DD 39            [15] 4594 	add	ix,sp
                                   4595 ;src\/Graphics\Graphics.h:10: while (*str) {
      0012D4 DD 6E 06         [19] 4596 	ld	l, 6 (ix)
      0012D7 DD 4E 04         [19] 4597 	ld	c, 4 (ix)
      0012DA DD 46 05         [19] 4598 	ld	b, 5 (ix)
      0012DD                       4599 00101$:
      0012DD 0A               [ 7] 4600 	ld	a, (bc)
      0012DE B7               [ 4] 4601 	or	a, a
      0012DF 28 1A            [12] 4602 	jr	Z, 00104$
                                   4603 ;src\/Graphics\Graphics.h:11: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0012E1 55               [ 4] 4604 	ld	d, l
      0012E2 2C               [ 4] 4605 	inc	l
      0012E3 DD 75 06         [19] 4606 	ld	6 (ix), l
      0012E6 03               [ 6] 4607 	inc	bc
      0012E7 C6 0F            [ 7] 4608 	add	a, #0x0f
      0012E9 E5               [11] 4609 	push	hl
      0012EA C5               [11] 4610 	push	bc
      0012EB DD 66 07         [19] 4611 	ld	h, 7 (ix)
      0012EE 6A               [ 4] 4612 	ld	l, d
      0012EF E5               [11] 4613 	push	hl
      0012F0 F5               [11] 4614 	push	af
      0012F1 33               [ 6] 4615 	inc	sp
      0012F2 CDrA2r12         [17] 4616 	call	_DrawChar
      0012F5 F1               [10] 4617 	pop	af
      0012F6 33               [ 6] 4618 	inc	sp
      0012F7 C1               [10] 4619 	pop	bc
      0012F8 E1               [10] 4620 	pop	hl
      0012F9 18 E2            [12] 4621 	jr	00101$
      0012FB                       4622 00104$:
                                   4623 ;src\/Graphics\Graphics.h:13: }
      0012FB DD E1            [14] 4624 	pop	ix
      0012FD C9               [10] 4625 	ret
                                   4626 ;src\/Graphics\Graphics.h:15: void DrawNumber(word number, byte col, byte line) {
                                   4627 ;	---------------------------------
                                   4628 ; Function DrawNumber
                                   4629 ; ---------------------------------
      0012FE                       4630 _DrawNumber::
      0012FE DD E5            [15] 4631 	push	ix
      001300 DD 21 00 00      [14] 4632 	ld	ix,#0
      001304 DD 39            [15] 4633 	add	ix,sp
      001306 21 FA FF         [10] 4634 	ld	hl, #-6
      001309 39               [11] 4635 	add	hl, sp
      00130A F9               [ 6] 4636 	ld	sp, hl
                                   4637 ;src\/Graphics\Graphics.h:18: bool trailingZero = TRUE;
      00130B DD 36 FA 01      [19] 4638 	ld	-6 (ix), #0x01
                                   4639 ;src\/Graphics\Graphics.h:20: DrawString("      ", col, line); // Clear space for number (6 digits)
      00130F DD 66 07         [19] 4640 	ld	h, 7 (ix)
      001312 DD 6E 06         [19] 4641 	ld	l, 6 (ix)
      001315 E5               [11] 4642 	push	hl
      001316 21rB2r13         [10] 4643 	ld	hl, #___str_0
      001319 E5               [11] 4644 	push	hl
      00131A CDrCCr12         [17] 4645 	call	_DrawString
      00131D F1               [10] 4646 	pop	af
      00131E F1               [10] 4647 	pop	af
                                   4648 ;src\/Graphics\Graphics.h:22: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00131F DD 7E 06         [19] 4649 	ld	a, 6 (ix)
      001322 DD 77 FF         [19] 4650 	ld	-1 (ix), a
      001325 1E 06            [ 7] 4651 	ld	e, #0x06
      001327                       4652 00109$:
      001327 7B               [ 4] 4653 	ld	a, e
      001328 B7               [ 4] 4654 	or	a, a
      001329 CArADr13         [10] 4655 	jp	Z, 00111$
                                   4656 ;src\/Graphics\Graphics.h:24: power = Power(10, i - 1);
      00132C 7B               [ 4] 4657 	ld	a, e
      00132D 3D               [ 4] 4658 	dec	a
      00132E D5               [11] 4659 	push	de
      00132F 57               [ 4] 4660 	ld	d,a
      001330 1E 0A            [ 7] 4661 	ld	e,#0x0a
      001332 D5               [11] 4662 	push	de
      001333 CDr1Dr00         [17] 4663 	call	_Power
      001336 F1               [10] 4664 	pop	af
      001337 D1               [10] 4665 	pop	de
      001338 DD 75 FB         [19] 4666 	ld	-5 (ix), l
      00133B DD 74 FC         [19] 4667 	ld	-4 (ix), h
                                   4668 ;src\/Graphics\Graphics.h:26: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00133E D5               [11] 4669 	push	de
      00133F DD 6E FB         [19] 4670 	ld	l, -5 (ix)
      001342 DD 66 FC         [19] 4671 	ld	h, -4 (ix)
      001345 E5               [11] 4672 	push	hl
      001346 DD 6E 04         [19] 4673 	ld	l, 4 (ix)
      001349 DD 66 05         [19] 4674 	ld	h, 5 (ix)
      00134C E5               [11] 4675 	push	hl
      00134D CDr00r00         [17] 4676 	call	__divuint
      001350 F1               [10] 4677 	pop	af
      001351 F1               [10] 4678 	pop	af
      001352 DD 75 FD         [19] 4679 	ld	-3 (ix), l
      001355 DD 74 FE         [19] 4680 	ld	-2 (ix), h
      001358 D1               [10] 4681 	pop	de
      001359 DD 7E FA         [19] 4682 	ld	a, -6 (ix)
      00135C B7               [ 4] 4683 	or	a, a
      00135D 28 0C            [12] 4684 	jr	Z, 00102$
      00135F DD 7E FE         [19] 4685 	ld	a, -2 (ix)
      001362 DD B6 FD         [19] 4686 	or	a, -3 (ix)
      001365 28 04            [12] 4687 	jr	Z, 00102$
      001367 DD 36 FA 00      [19] 4688 	ld	-6 (ix), #0
      00136B                       4689 00102$:
                                   4690 ;src\/Graphics\Graphics.h:28: if(!trailingZero || i == 1) {
      00136B DD 7E FA         [19] 4691 	ld	a, -6 (ix)
      00136E B7               [ 4] 4692 	or	a, a
      00136F 28 04            [12] 4693 	jr	Z, 00104$
      001371 7B               [ 4] 4694 	ld	a, e
      001372 3D               [ 4] 4695 	dec	a
      001373 20 31            [12] 4696 	jr	NZ, 00105$
      001375                       4697 00104$:
                                   4698 ;src\/Graphics\Graphics.h:29: DrawChar((number / power) + CHAR_0, col, line);
      001375 DD 7E FD         [19] 4699 	ld	a, -3 (ix)
      001378 C6 3F            [ 7] 4700 	add	a, #0x3f
      00137A D5               [11] 4701 	push	de
      00137B DD 66 07         [19] 4702 	ld	h, 7 (ix)
      00137E E5               [11] 4703 	push	hl
      00137F 33               [ 6] 4704 	inc	sp
      001380 DD 66 FF         [19] 4705 	ld	h, -1 (ix)
      001383 E5               [11] 4706 	push	hl
      001384 33               [ 6] 4707 	inc	sp
      001385 F5               [11] 4708 	push	af
      001386 33               [ 6] 4709 	inc	sp
      001387 CDrA2r12         [17] 4710 	call	_DrawChar
      00138A F1               [10] 4711 	pop	af
      00138B 33               [ 6] 4712 	inc	sp
      00138C DD 6E FB         [19] 4713 	ld	l, -5 (ix)
      00138F DD 66 FC         [19] 4714 	ld	h, -4 (ix)
      001392 E5               [11] 4715 	push	hl
      001393 DD 6E 04         [19] 4716 	ld	l, 4 (ix)
      001396 DD 66 05         [19] 4717 	ld	h, 5 (ix)
      001399 E5               [11] 4718 	push	hl
      00139A CDr00r00         [17] 4719 	call	__moduint
      00139D F1               [10] 4720 	pop	af
      00139E F1               [10] 4721 	pop	af
      00139F D1               [10] 4722 	pop	de
      0013A0 DD 75 04         [19] 4723 	ld	4 (ix), l
      0013A3 DD 74 05         [19] 4724 	ld	5 (ix), h
      0013A6                       4725 00105$:
                                   4726 ;src\/Graphics\Graphics.h:33: col++;
      0013A6 DD 34 FF         [23] 4727 	inc	-1 (ix)
                                   4728 ;src\/Graphics\Graphics.h:22: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0013A9 1D               [ 4] 4729 	dec	e
      0013AA C3r27r13         [10] 4730 	jp	00109$
      0013AD                       4731 00111$:
                                   4732 ;src\/Graphics\Graphics.h:38: }
      0013AD DD F9            [10] 4733 	ld	sp, ix
      0013AF DD E1            [14] 4734 	pop	ix
      0013B1 C9               [10] 4735 	ret
      0013B2                       4736 ___str_0:
      0013B2 20 20 20 20 20 20     4737 	.ascii "      "
      0013B8 00                    4738 	.db 0x00
                                   4739 ;src\/Graphics\Graphics.h:40: void DrawColumn(byte col) {
                                   4740 ;	---------------------------------
                                   4741 ; Function DrawColumn
                                   4742 ; ---------------------------------
      0013B9                       4743 _DrawColumn::
      0013B9 DD E5            [15] 4744 	push	ix
      0013BB DD 21 00 00      [14] 4745 	ld	ix,#0
      0013BF DD 39            [15] 4746 	add	ix,sp
      0013C1 21 F9 FF         [10] 4747 	ld	hl, #-7
      0013C4 39               [11] 4748 	add	hl, sp
      0013C5 F9               [ 6] 4749 	ld	sp, hl
                                   4750 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0013C6 DD 4E 04         [19] 4751 	ld	c, 4 (ix)
      0013C9 06 00            [ 7] 4752 	ld	b, #0x00
      0013CB 21 00 18         [10] 4753 	ld	hl, #0x1800
      0013CE 09               [11] 4754 	add	hl, bc
      0013CF C5               [11] 4755 	push	bc
      0013D0 3E 18            [ 7] 4756 	ld	a, #0x18
      0013D2 F5               [11] 4757 	push	af
      0013D3 33               [ 6] 4758 	inc	sp
      0013D4 E5               [11] 4759 	push	hl
      0013D5 CDr00r00         [17] 4760 	call	_WRTVRM
      0013D8 F1               [10] 4761 	pop	af
      0013D9 33               [ 6] 4762 	inc	sp
      0013DA C1               [10] 4763 	pop	bc
                                   4764 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      0013DB 21 01 18         [10] 4765 	ld	hl, #0x1801
      0013DE 09               [11] 4766 	add	hl, bc
      0013DF C5               [11] 4767 	push	bc
      0013E0 3E 19            [ 7] 4768 	ld	a, #0x19
      0013E2 F5               [11] 4769 	push	af
      0013E3 33               [ 6] 4770 	inc	sp
      0013E4 E5               [11] 4771 	push	hl
      0013E5 CDr00r00         [17] 4772 	call	_WRTVRM
      0013E8 F1               [10] 4773 	pop	af
      0013E9 33               [ 6] 4774 	inc	sp
      0013EA C1               [10] 4775 	pop	bc
                                   4776 ;src\/Graphics\Graphics.h:43: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      0013EB 21 02 18         [10] 4777 	ld	hl, #0x1802
      0013EE 09               [11] 4778 	add	hl, bc
      0013EF C5               [11] 4779 	push	bc
      0013F0 3E 1A            [ 7] 4780 	ld	a, #0x1a
      0013F2 F5               [11] 4781 	push	af
      0013F3 33               [ 6] 4782 	inc	sp
      0013F4 E5               [11] 4783 	push	hl
      0013F5 CDr00r00         [17] 4784 	call	_WRTVRM
      0013F8 F1               [10] 4785 	pop	af
      0013F9 33               [ 6] 4786 	inc	sp
      0013FA C1               [10] 4787 	pop	bc
                                   4788 ;src\/Graphics\Graphics.h:44: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      0013FB 21 20 18         [10] 4789 	ld	hl, #0x1820
      0013FE 09               [11] 4790 	add	hl, bc
      0013FF C5               [11] 4791 	push	bc
      001400 3E 1B            [ 7] 4792 	ld	a, #0x1b
      001402 F5               [11] 4793 	push	af
      001403 33               [ 6] 4794 	inc	sp
      001404 E5               [11] 4795 	push	hl
      001405 CDr00r00         [17] 4796 	call	_WRTVRM
      001408 F1               [10] 4797 	pop	af
      001409 33               [ 6] 4798 	inc	sp
      00140A C1               [10] 4799 	pop	bc
                                   4800 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      00140B 21 21 18         [10] 4801 	ld	hl, #0x1821
      00140E 09               [11] 4802 	add	hl, bc
      00140F C5               [11] 4803 	push	bc
      001410 3E 1C            [ 7] 4804 	ld	a, #0x1c
      001412 F5               [11] 4805 	push	af
      001413 33               [ 6] 4806 	inc	sp
      001414 E5               [11] 4807 	push	hl
      001415 CDr00r00         [17] 4808 	call	_WRTVRM
      001418 F1               [10] 4809 	pop	af
      001419 33               [ 6] 4810 	inc	sp
      00141A C1               [10] 4811 	pop	bc
                                   4812 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      00141B 21 22 18         [10] 4813 	ld	hl, #0x1822
      00141E 09               [11] 4814 	add	hl, bc
      00141F C5               [11] 4815 	push	bc
      001420 3E 1D            [ 7] 4816 	ld	a, #0x1d
      001422 F5               [11] 4817 	push	af
      001423 33               [ 6] 4818 	inc	sp
      001424 E5               [11] 4819 	push	hl
      001425 CDr00r00         [17] 4820 	call	_WRTVRM
      001428 F1               [10] 4821 	pop	af
      001429 33               [ 6] 4822 	inc	sp
      00142A C1               [10] 4823 	pop	bc
                                   4824 ;src\/Graphics\Graphics.h:48: for(byte i=0; i<20; i++) {
      00142B 21 40 18         [10] 4825 	ld	hl, #0x1840
      00142E 09               [11] 4826 	add	hl, bc
      00142F E3               [19] 4827 	ex	(sp), hl
      001430 21 41 18         [10] 4828 	ld	hl, #0x1841
      001433 09               [11] 4829 	add	hl, bc
      001434 DD 75 FB         [19] 4830 	ld	-5 (ix), l
      001437 DD 74 FC         [19] 4831 	ld	-4 (ix), h
      00143A 21 42 18         [10] 4832 	ld	hl, #0x1842
      00143D 09               [11] 4833 	add	hl, bc
      00143E DD 75 FD         [19] 4834 	ld	-3 (ix), l
      001441 DD 74 FE         [19] 4835 	ld	-2 (ix), h
      001444 DD 36 FF 00      [19] 4836 	ld	-1 (ix), #0
      001448                       4837 00103$:
      001448 DD 7E FF         [19] 4838 	ld	a, -1 (ix)
      00144B D6 14            [ 7] 4839 	sub	a, #0x14
      00144D 30 4A            [12] 4840 	jr	NC, 00101$
                                   4841 ;src\/Graphics\Graphics.h:49: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00144F DD 5E FF         [19] 4842 	ld	e, -1 (ix)
      001452 16 00            [ 7] 4843 	ld	d, #0x00
      001454 EB               [ 4] 4844 	ex	de, hl
      001455 29               [11] 4845 	add	hl, hl
      001456 29               [11] 4846 	add	hl, hl
      001457 29               [11] 4847 	add	hl, hl
      001458 29               [11] 4848 	add	hl, hl
      001459 29               [11] 4849 	add	hl, hl
      00145A EB               [ 4] 4850 	ex	de, hl
      00145B E1               [10] 4851 	pop	hl
      00145C E5               [11] 4852 	push	hl
      00145D 19               [11] 4853 	add	hl, de
      00145E C5               [11] 4854 	push	bc
      00145F D5               [11] 4855 	push	de
      001460 3E 1E            [ 7] 4856 	ld	a, #0x1e
      001462 F5               [11] 4857 	push	af
      001463 33               [ 6] 4858 	inc	sp
      001464 E5               [11] 4859 	push	hl
      001465 CDr00r00         [17] 4860 	call	_WRTVRM
      001468 F1               [10] 4861 	pop	af
      001469 33               [ 6] 4862 	inc	sp
      00146A D1               [10] 4863 	pop	de
      00146B C1               [10] 4864 	pop	bc
                                   4865 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      00146C DD 6E FB         [19] 4866 	ld	l, -5 (ix)
      00146F DD 66 FC         [19] 4867 	ld	h, -4 (ix)
      001472 19               [11] 4868 	add	hl, de
      001473 C5               [11] 4869 	push	bc
      001474 D5               [11] 4870 	push	de
      001475 3E 1F            [ 7] 4871 	ld	a, #0x1f
      001477 F5               [11] 4872 	push	af
      001478 33               [ 6] 4873 	inc	sp
      001479 E5               [11] 4874 	push	hl
      00147A CDr00r00         [17] 4875 	call	_WRTVRM
      00147D F1               [10] 4876 	pop	af
      00147E 33               [ 6] 4877 	inc	sp
      00147F D1               [10] 4878 	pop	de
      001480 C1               [10] 4879 	pop	bc
                                   4880 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      001481 DD 6E FD         [19] 4881 	ld	l, -3 (ix)
      001484 DD 66 FE         [19] 4882 	ld	h, -2 (ix)
      001487 19               [11] 4883 	add	hl, de
      001488 C5               [11] 4884 	push	bc
      001489 3E 20            [ 7] 4885 	ld	a, #0x20
      00148B F5               [11] 4886 	push	af
      00148C 33               [ 6] 4887 	inc	sp
      00148D E5               [11] 4888 	push	hl
      00148E CDr00r00         [17] 4889 	call	_WRTVRM
      001491 F1               [10] 4890 	pop	af
      001492 33               [ 6] 4891 	inc	sp
      001493 C1               [10] 4892 	pop	bc
                                   4893 ;src\/Graphics\Graphics.h:48: for(byte i=0; i<20; i++) {
      001494 DD 34 FF         [23] 4894 	inc	-1 (ix)
      001497 18 AF            [12] 4895 	jr	00103$
      001499                       4896 00101$:
                                   4897 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      001499 21 00 19         [10] 4898 	ld	hl, #0x1900
      00149C 09               [11] 4899 	add	hl, bc
      00149D C5               [11] 4900 	push	bc
      00149E 3E 21            [ 7] 4901 	ld	a, #0x21
      0014A0 F5               [11] 4902 	push	af
      0014A1 33               [ 6] 4903 	inc	sp
      0014A2 E5               [11] 4904 	push	hl
      0014A3 CDr00r00         [17] 4905 	call	_WRTVRM
      0014A6 F1               [10] 4906 	pop	af
      0014A7 33               [ 6] 4907 	inc	sp
      0014A8 C1               [10] 4908 	pop	bc
                                   4909 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      0014A9 21 01 19         [10] 4910 	ld	hl, #0x1901
      0014AC 09               [11] 4911 	add	hl, bc
      0014AD C5               [11] 4912 	push	bc
      0014AE 3E 22            [ 7] 4913 	ld	a, #0x22
      0014B0 F5               [11] 4914 	push	af
      0014B1 33               [ 6] 4915 	inc	sp
      0014B2 E5               [11] 4916 	push	hl
      0014B3 CDr00r00         [17] 4917 	call	_WRTVRM
      0014B6 F1               [10] 4918 	pop	af
      0014B7 33               [ 6] 4919 	inc	sp
      0014B8 C1               [10] 4920 	pop	bc
                                   4921 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0014B9 21 02 19         [10] 4922 	ld	hl, #0x1902
      0014BC 09               [11] 4923 	add	hl, bc
      0014BD C5               [11] 4924 	push	bc
      0014BE 3E 23            [ 7] 4925 	ld	a, #0x23
      0014C0 F5               [11] 4926 	push	af
      0014C1 33               [ 6] 4927 	inc	sp
      0014C2 E5               [11] 4928 	push	hl
      0014C3 CDr00r00         [17] 4929 	call	_WRTVRM
      0014C6 F1               [10] 4930 	pop	af
      0014C7 33               [ 6] 4931 	inc	sp
      0014C8 C1               [10] 4932 	pop	bc
                                   4933 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      0014C9 21 00 1A         [10] 4934 	ld	hl, #0x1a00
      0014CC 09               [11] 4935 	add	hl, bc
      0014CD C5               [11] 4936 	push	bc
      0014CE 3E 21            [ 7] 4937 	ld	a, #0x21
      0014D0 F5               [11] 4938 	push	af
      0014D1 33               [ 6] 4939 	inc	sp
      0014D2 E5               [11] 4940 	push	hl
      0014D3 CDr00r00         [17] 4941 	call	_WRTVRM
      0014D6 F1               [10] 4942 	pop	af
      0014D7 33               [ 6] 4943 	inc	sp
      0014D8 C1               [10] 4944 	pop	bc
                                   4945 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0014D9 21 01 1A         [10] 4946 	ld	hl, #0x1a01
      0014DC 09               [11] 4947 	add	hl, bc
      0014DD C5               [11] 4948 	push	bc
      0014DE 3E 22            [ 7] 4949 	ld	a, #0x22
      0014E0 F5               [11] 4950 	push	af
      0014E1 33               [ 6] 4951 	inc	sp
      0014E2 E5               [11] 4952 	push	hl
      0014E3 CDr00r00         [17] 4953 	call	_WRTVRM
      0014E6 F1               [10] 4954 	pop	af
      0014E7 33               [ 6] 4955 	inc	sp
      0014E8 C1               [10] 4956 	pop	bc
                                   4957 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0014E9 21 02 1A         [10] 4958 	ld	hl, #0x1a02
      0014EC 09               [11] 4959 	add	hl, bc
      0014ED C5               [11] 4960 	push	bc
      0014EE 3E 23            [ 7] 4961 	ld	a, #0x23
      0014F0 F5               [11] 4962 	push	af
      0014F1 33               [ 6] 4963 	inc	sp
      0014F2 E5               [11] 4964 	push	hl
      0014F3 CDr00r00         [17] 4965 	call	_WRTVRM
      0014F6 F1               [10] 4966 	pop	af
      0014F7 33               [ 6] 4967 	inc	sp
      0014F8 C1               [10] 4968 	pop	bc
                                   4969 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0014F9 21 C0 1A         [10] 4970 	ld	hl, #0x1ac0
      0014FC 09               [11] 4971 	add	hl, bc
      0014FD C5               [11] 4972 	push	bc
      0014FE 3E 24            [ 7] 4973 	ld	a, #0x24
      001500 F5               [11] 4974 	push	af
      001501 33               [ 6] 4975 	inc	sp
      001502 E5               [11] 4976 	push	hl
      001503 CDr00r00         [17] 4977 	call	_WRTVRM
      001506 F1               [10] 4978 	pop	af
      001507 33               [ 6] 4979 	inc	sp
      001508 C1               [10] 4980 	pop	bc
                                   4981 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      001509 21 C1 1A         [10] 4982 	ld	hl, #0x1ac1
      00150C 09               [11] 4983 	add	hl, bc
      00150D C5               [11] 4984 	push	bc
      00150E 3E 25            [ 7] 4985 	ld	a, #0x25
      001510 F5               [11] 4986 	push	af
      001511 33               [ 6] 4987 	inc	sp
      001512 E5               [11] 4988 	push	hl
      001513 CDr00r00         [17] 4989 	call	_WRTVRM
      001516 F1               [10] 4990 	pop	af
      001517 33               [ 6] 4991 	inc	sp
      001518 C1               [10] 4992 	pop	bc
                                   4993 ;src\/Graphics\Graphics.h:64: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      001519 21 C2 1A         [10] 4994 	ld	hl, #0x1ac2
      00151C 09               [11] 4995 	add	hl, bc
      00151D C5               [11] 4996 	push	bc
      00151E 3E 26            [ 7] 4997 	ld	a, #0x26
      001520 F5               [11] 4998 	push	af
      001521 33               [ 6] 4999 	inc	sp
      001522 E5               [11] 5000 	push	hl
      001523 CDr00r00         [17] 5001 	call	_WRTVRM
      001526 F1               [10] 5002 	pop	af
      001527 33               [ 6] 5003 	inc	sp
      001528 C1               [10] 5004 	pop	bc
                                   5005 ;src\/Graphics\Graphics.h:65: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      001529 21 E0 1A         [10] 5006 	ld	hl, #0x1ae0
      00152C 09               [11] 5007 	add	hl, bc
      00152D C5               [11] 5008 	push	bc
      00152E 3E 27            [ 7] 5009 	ld	a, #0x27
      001530 F5               [11] 5010 	push	af
      001531 33               [ 6] 5011 	inc	sp
      001532 E5               [11] 5012 	push	hl
      001533 CDr00r00         [17] 5013 	call	_WRTVRM
      001536 F1               [10] 5014 	pop	af
      001537 33               [ 6] 5015 	inc	sp
      001538 C1               [10] 5016 	pop	bc
                                   5017 ;src\/Graphics\Graphics.h:66: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      001539 21 E1 1A         [10] 5018 	ld	hl, #0x1ae1
      00153C 09               [11] 5019 	add	hl, bc
      00153D C5               [11] 5020 	push	bc
      00153E 3E 28            [ 7] 5021 	ld	a, #0x28
      001540 F5               [11] 5022 	push	af
      001541 33               [ 6] 5023 	inc	sp
      001542 E5               [11] 5024 	push	hl
      001543 CDr00r00         [17] 5025 	call	_WRTVRM
      001546 F1               [10] 5026 	pop	af
      001547 33               [ 6] 5027 	inc	sp
      001548 C1               [10] 5028 	pop	bc
                                   5029 ;src\/Graphics\Graphics.h:67: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      001549 21 E2 1A         [10] 5030 	ld	hl, #0x1ae2
      00154C 09               [11] 5031 	add	hl, bc
      00154D 3E 29            [ 7] 5032 	ld	a, #0x29
      00154F F5               [11] 5033 	push	af
      001550 33               [ 6] 5034 	inc	sp
      001551 E5               [11] 5035 	push	hl
      001552 CDr00r00         [17] 5036 	call	_WRTVRM
                                   5037 ;src\/Graphics\Graphics.h:68: }
      001555 DD F9            [10] 5038 	ld	sp,ix
      001557 DD E1            [14] 5039 	pop	ix
      001559 C9               [10] 5040 	ret
                                   5041 ;src\/Graphics\Graphics.h:73: void GetNextPieceColors(byte sourcePiece) {
                                   5042 ;	---------------------------------
                                   5043 ; Function GetNextPieceColors
                                   5044 ; ---------------------------------
      00155A                       5045 _GetNextPieceColors::
                                   5046 ;src\/Graphics\Graphics.h:74: switch(sourcePiece) {
      00155A FD 21 02 00      [14] 5047 	ld	iy, #2
      00155E FD 39            [15] 5048 	add	iy, sp
      001560 FD 7E 00         [19] 5049 	ld	a, 0 (iy)
      001563 D6 04            [ 7] 5050 	sub	a, #0x04
      001565 28 22            [12] 5051 	jr	Z, 00102$
      001567 FD 7E 00         [19] 5052 	ld	a, 0 (iy)
      00156A D6 08            [ 7] 5053 	sub	a, #0x08
      00156C 28 26            [12] 5054 	jr	Z, 00103$
      00156E FD 7E 00         [19] 5055 	ld	a, 0 (iy)
      001571 D6 0C            [ 7] 5056 	sub	a, #0x0c
      001573 28 09            [12] 5057 	jr	Z, 00101$
      001575 FD 7E 00         [19] 5058 	ld	a, 0 (iy)
      001578 D6 14            [ 7] 5059 	sub	a, #0x14
      00157A 28 23            [12] 5060 	jr	Z, 00104$
      00157C 18 2C            [12] 5061 	jr	00105$
                                   5062 ;src\/Graphics\Graphics.h:75: case TILE_BLUE:
      00157E                       5063 00101$:
                                   5064 ;src\/Graphics\Graphics.h:76: nextPieceColor_Front = 7;
      00157E 3E 07            [ 7] 5065 	ld	a, #0x07
      001580 32r9Br00         [13] 5066 	ld	(#_nextPieceColor_Front), a
                                   5067 ;src\/Graphics\Graphics.h:77: nextPieceColor_Back = 4;
      001583 3E 04            [ 7] 5068 	ld	a, #0x04
      001585 32r9Cr00         [13] 5069 	ld	(#_nextPieceColor_Back), a
                                   5070 ;src\/Graphics\Graphics.h:78: break;
      001588 C9               [10] 5071 	ret
                                   5072 ;src\/Graphics\Graphics.h:79: case TILE_GREEN:
      001589                       5073 00102$:
                                   5074 ;src\/Graphics\Graphics.h:80: nextPieceColor_Front = 3;
      001589 3E 03            [ 7] 5075 	ld	a, #0x03
      00158B 32r9Br00         [13] 5076 	ld	(#_nextPieceColor_Front), a
                                   5077 ;src\/Graphics\Graphics.h:81: nextPieceColor_Back = 12;
      00158E 3E 0C            [ 7] 5078 	ld	a, #0x0c
      001590 32r9Cr00         [13] 5079 	ld	(#_nextPieceColor_Back), a
                                   5080 ;src\/Graphics\Graphics.h:82: break;
      001593 C9               [10] 5081 	ret
                                   5082 ;src\/Graphics\Graphics.h:83: case TILE_RED:
      001594                       5083 00103$:
                                   5084 ;src\/Graphics\Graphics.h:84: nextPieceColor_Front = 9;
      001594 3E 09            [ 7] 5085 	ld	a, #0x09
      001596 32r9Br00         [13] 5086 	ld	(#_nextPieceColor_Front), a
                                   5087 ;src\/Graphics\Graphics.h:85: nextPieceColor_Back = 6;
      001599 3E 06            [ 7] 5088 	ld	a, #0x06
      00159B 32r9Cr00         [13] 5089 	ld	(#_nextPieceColor_Back), a
                                   5090 ;src\/Graphics\Graphics.h:86: break;
      00159E C9               [10] 5091 	ret
                                   5092 ;src\/Graphics\Graphics.h:87: case TILE_YELLOW:
      00159F                       5093 00104$:
                                   5094 ;src\/Graphics\Graphics.h:88: nextPieceColor_Front = 11;
      00159F 3E 0B            [ 7] 5095 	ld	a, #0x0b
      0015A1 32r9Br00         [13] 5096 	ld	(#_nextPieceColor_Front), a
                                   5097 ;src\/Graphics\Graphics.h:89: nextPieceColor_Back = 10;
      0015A4 3E 0A            [ 7] 5098 	ld	a, #0x0a
      0015A6 32r9Cr00         [13] 5099 	ld	(#_nextPieceColor_Back), a
                                   5100 ;src\/Graphics\Graphics.h:90: break;
      0015A9 C9               [10] 5101 	ret
                                   5102 ;src\/Graphics\Graphics.h:91: default:
      0015AA                       5103 00105$:
                                   5104 ;src\/Graphics\Graphics.h:92: nextPieceColor_Front = 15;
      0015AA 3E 0F            [ 7] 5105 	ld	a, #0x0f
      0015AC 32r9Br00         [13] 5106 	ld	(#_nextPieceColor_Front), a
                                   5107 ;src\/Graphics\Graphics.h:93: nextPieceColor_Back = 13;
      0015AF 3E 0D            [ 7] 5108 	ld	a, #0x0d
      0015B1 32r9Cr00         [13] 5109 	ld	(#_nextPieceColor_Back), a
                                   5110 ;src\/Graphics\Graphics.h:94: }  
                                   5111 ;src\/Graphics\Graphics.h:95: }
      0015B4 C9               [10] 5112 	ret
                                   5113 ;src\/Graphics\Graphics.h:97: void PosMaskSprites(word VRAMaddress, byte y) {
                                   5114 ;	---------------------------------
                                   5115 ; Function PosMaskSprites
                                   5116 ; ---------------------------------
      0015B5                       5117 _PosMaskSprites::
      0015B5 DD E5            [15] 5118 	push	ix
      0015B7 DD 21 00 00      [14] 5119 	ld	ix,#0
      0015BB DD 39            [15] 5120 	add	ix,sp
                                   5121 ;src\/Graphics\Graphics.h:99: WRTVRM(VRAMaddress, 	    y);
      0015BD DD 7E 06         [19] 5122 	ld	a, 6 (ix)
      0015C0 F5               [11] 5123 	push	af
      0015C1 33               [ 6] 5124 	inc	sp
      0015C2 DD 6E 04         [19] 5125 	ld	l, 4 (ix)
      0015C5 DD 66 05         [19] 5126 	ld	h, 5 (ix)
      0015C8 E5               [11] 5127 	push	hl
      0015C9 CDr00r00         [17] 5128 	call	_WRTVRM
      0015CC F1               [10] 5129 	pop	af
      0015CD 33               [ 6] 5130 	inc	sp
                                   5131 ;src\/Graphics\Graphics.h:100: WRTVRM(VRAMaddress + 1, 	0);
      0015CE DD 4E 04         [19] 5132 	ld	c, 4 (ix)
      0015D1 DD 46 05         [19] 5133 	ld	b, 5 (ix)
      0015D4 59               [ 4] 5134 	ld	e, c
      0015D5 50               [ 4] 5135 	ld	d, b
      0015D6 13               [ 6] 5136 	inc	de
      0015D7 C5               [11] 5137 	push	bc
      0015D8 AF               [ 4] 5138 	xor	a, a
      0015D9 F5               [11] 5139 	push	af
      0015DA 33               [ 6] 5140 	inc	sp
      0015DB D5               [11] 5141 	push	de
      0015DC CDr00r00         [17] 5142 	call	_WRTVRM
      0015DF F1               [10] 5143 	pop	af
      0015E0 33               [ 6] 5144 	inc	sp
      0015E1 C1               [10] 5145 	pop	bc
                                   5146 ;src\/Graphics\Graphics.h:101: WRTVRM(VRAMaddress + 2, 	0); // Pattern don't matter
      0015E2 59               [ 4] 5147 	ld	e, c
      0015E3 50               [ 4] 5148 	ld	d, b
      0015E4 13               [ 6] 5149 	inc	de
      0015E5 13               [ 6] 5150 	inc	de
      0015E6 C5               [11] 5151 	push	bc
      0015E7 AF               [ 4] 5152 	xor	a, a
      0015E8 F5               [11] 5153 	push	af
      0015E9 33               [ 6] 5154 	inc	sp
      0015EA D5               [11] 5155 	push	de
      0015EB CDr00r00         [17] 5156 	call	_WRTVRM
      0015EE F1               [10] 5157 	pop	af
      0015EF 33               [ 6] 5158 	inc	sp
      0015F0 C1               [10] 5159 	pop	bc
                                   5160 ;src\/Graphics\Graphics.h:102: WRTVRM(VRAMaddress + 3, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      0015F1 59               [ 4] 5161 	ld	e, c
      0015F2 50               [ 4] 5162 	ld	d, b
      0015F3 13               [ 6] 5163 	inc	de
      0015F4 13               [ 6] 5164 	inc	de
      0015F5 13               [ 6] 5165 	inc	de
      0015F6 C5               [11] 5166 	push	bc
      0015F7 3E 40            [ 7] 5167 	ld	a, #0x40
      0015F9 F5               [11] 5168 	push	af
      0015FA 33               [ 6] 5169 	inc	sp
      0015FB D5               [11] 5170 	push	de
      0015FC CDr00r00         [17] 5171 	call	_WRTVRM
      0015FF F1               [10] 5172 	pop	af
      001600 33               [ 6] 5173 	inc	sp
      001601 C1               [10] 5174 	pop	bc
                                   5175 ;src\/Graphics\Graphics.h:104: WRTVRM(VRAMaddress + 4,   y);
      001602 21 04 00         [10] 5176 	ld	hl, #0x0004
      001605 09               [11] 5177 	add	hl, bc
      001606 C5               [11] 5178 	push	bc
      001607 DD 7E 06         [19] 5179 	ld	a, 6 (ix)
      00160A F5               [11] 5180 	push	af
      00160B 33               [ 6] 5181 	inc	sp
      00160C E5               [11] 5182 	push	hl
      00160D CDr00r00         [17] 5183 	call	_WRTVRM
      001610 F1               [10] 5184 	pop	af
      001611 33               [ 6] 5185 	inc	sp
      001612 C1               [10] 5186 	pop	bc
                                   5187 ;src\/Graphics\Graphics.h:105: WRTVRM(VRAMaddress + 5, 	0);
      001613 21 05 00         [10] 5188 	ld	hl, #0x0005
      001616 09               [11] 5189 	add	hl, bc
      001617 C5               [11] 5190 	push	bc
      001618 AF               [ 4] 5191 	xor	a, a
      001619 F5               [11] 5192 	push	af
      00161A 33               [ 6] 5193 	inc	sp
      00161B E5               [11] 5194 	push	hl
      00161C CDr00r00         [17] 5195 	call	_WRTVRM
      00161F F1               [10] 5196 	pop	af
      001620 33               [ 6] 5197 	inc	sp
      001621 C1               [10] 5198 	pop	bc
                                   5199 ;src\/Graphics\Graphics.h:106: WRTVRM(VRAMaddress + 6, 	0); // Pattern don't matter
      001622 21 06 00         [10] 5200 	ld	hl, #0x0006
      001625 09               [11] 5201 	add	hl, bc
      001626 C5               [11] 5202 	push	bc
      001627 AF               [ 4] 5203 	xor	a, a
      001628 F5               [11] 5204 	push	af
      001629 33               [ 6] 5205 	inc	sp
      00162A E5               [11] 5206 	push	hl
      00162B CDr00r00         [17] 5207 	call	_WRTVRM
      00162E F1               [10] 5208 	pop	af
      00162F 33               [ 6] 5209 	inc	sp
      001630 C1               [10] 5210 	pop	bc
                                   5211 ;src\/Graphics\Graphics.h:107: WRTVRM(VRAMaddress + 7, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      001631 21 07 00         [10] 5212 	ld	hl, #0x0007
      001634 09               [11] 5213 	add	hl, bc
      001635 C5               [11] 5214 	push	bc
      001636 3E 40            [ 7] 5215 	ld	a, #0x40
      001638 F5               [11] 5216 	push	af
      001639 33               [ 6] 5217 	inc	sp
      00163A E5               [11] 5218 	push	hl
      00163B CDr00r00         [17] 5219 	call	_WRTVRM
      00163E F1               [10] 5220 	pop	af
      00163F 33               [ 6] 5221 	inc	sp
      001640 C1               [10] 5222 	pop	bc
                                   5223 ;src\/Graphics\Graphics.h:109: WRTVRM(VRAMaddress + 8,   y);
      001641 21 08 00         [10] 5224 	ld	hl, #0x0008
      001644 09               [11] 5225 	add	hl, bc
      001645 C5               [11] 5226 	push	bc
      001646 DD 7E 06         [19] 5227 	ld	a, 6 (ix)
      001649 F5               [11] 5228 	push	af
      00164A 33               [ 6] 5229 	inc	sp
      00164B E5               [11] 5230 	push	hl
      00164C CDr00r00         [17] 5231 	call	_WRTVRM
      00164F F1               [10] 5232 	pop	af
      001650 33               [ 6] 5233 	inc	sp
      001651 C1               [10] 5234 	pop	bc
                                   5235 ;src\/Graphics\Graphics.h:110: WRTVRM(VRAMaddress + 9, 	0);
      001652 21 09 00         [10] 5236 	ld	hl, #0x0009
      001655 09               [11] 5237 	add	hl, bc
      001656 C5               [11] 5238 	push	bc
      001657 AF               [ 4] 5239 	xor	a, a
      001658 F5               [11] 5240 	push	af
      001659 33               [ 6] 5241 	inc	sp
      00165A E5               [11] 5242 	push	hl
      00165B CDr00r00         [17] 5243 	call	_WRTVRM
      00165E F1               [10] 5244 	pop	af
      00165F 33               [ 6] 5245 	inc	sp
      001660 C1               [10] 5246 	pop	bc
                                   5247 ;src\/Graphics\Graphics.h:111: WRTVRM(VRAMaddress + 10,	0); // Pattern don't matter
      001661 21 0A 00         [10] 5248 	ld	hl, #0x000a
      001664 09               [11] 5249 	add	hl, bc
      001665 C5               [11] 5250 	push	bc
      001666 AF               [ 4] 5251 	xor	a, a
      001667 F5               [11] 5252 	push	af
      001668 33               [ 6] 5253 	inc	sp
      001669 E5               [11] 5254 	push	hl
      00166A CDr00r00         [17] 5255 	call	_WRTVRM
      00166D F1               [10] 5256 	pop	af
      00166E 33               [ 6] 5257 	inc	sp
      00166F C1               [10] 5258 	pop	bc
                                   5259 ;src\/Graphics\Graphics.h:112: WRTVRM(VRAMaddress + 11,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      001670 21 0B 00         [10] 5260 	ld	hl, #0x000b
      001673 09               [11] 5261 	add	hl, bc
      001674 C5               [11] 5262 	push	bc
      001675 3E 40            [ 7] 5263 	ld	a, #0x40
      001677 F5               [11] 5264 	push	af
      001678 33               [ 6] 5265 	inc	sp
      001679 E5               [11] 5266 	push	hl
      00167A CDr00r00         [17] 5267 	call	_WRTVRM
      00167D F1               [10] 5268 	pop	af
      00167E 33               [ 6] 5269 	inc	sp
      00167F C1               [10] 5270 	pop	bc
                                   5271 ;src\/Graphics\Graphics.h:114: WRTVRM(VRAMaddress + 12,  y);
      001680 21 0C 00         [10] 5272 	ld	hl, #0x000c
      001683 09               [11] 5273 	add	hl, bc
      001684 C5               [11] 5274 	push	bc
      001685 DD 7E 06         [19] 5275 	ld	a, 6 (ix)
      001688 F5               [11] 5276 	push	af
      001689 33               [ 6] 5277 	inc	sp
      00168A E5               [11] 5278 	push	hl
      00168B CDr00r00         [17] 5279 	call	_WRTVRM
      00168E F1               [10] 5280 	pop	af
      00168F 33               [ 6] 5281 	inc	sp
      001690 C1               [10] 5282 	pop	bc
                                   5283 ;src\/Graphics\Graphics.h:115: WRTVRM(VRAMaddress + 13,	0);
      001691 21 0D 00         [10] 5284 	ld	hl, #0x000d
      001694 09               [11] 5285 	add	hl, bc
      001695 C5               [11] 5286 	push	bc
      001696 AF               [ 4] 5287 	xor	a, a
      001697 F5               [11] 5288 	push	af
      001698 33               [ 6] 5289 	inc	sp
      001699 E5               [11] 5290 	push	hl
      00169A CDr00r00         [17] 5291 	call	_WRTVRM
      00169D F1               [10] 5292 	pop	af
      00169E 33               [ 6] 5293 	inc	sp
      00169F C1               [10] 5294 	pop	bc
                                   5295 ;src\/Graphics\Graphics.h:116: WRTVRM(VRAMaddress + 14,	0); // Pattern don't matter
      0016A0 21 0E 00         [10] 5296 	ld	hl, #0x000e
      0016A3 09               [11] 5297 	add	hl, bc
      0016A4 C5               [11] 5298 	push	bc
      0016A5 AF               [ 4] 5299 	xor	a, a
      0016A6 F5               [11] 5300 	push	af
      0016A7 33               [ 6] 5301 	inc	sp
      0016A8 E5               [11] 5302 	push	hl
      0016A9 CDr00r00         [17] 5303 	call	_WRTVRM
      0016AC F1               [10] 5304 	pop	af
      0016AD 33               [ 6] 5305 	inc	sp
      0016AE C1               [10] 5306 	pop	bc
                                   5307 ;src\/Graphics\Graphics.h:117: WRTVRM(VRAMaddress + 15,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)  
      0016AF 21 0F 00         [10] 5308 	ld	hl, #0x000f
      0016B2 09               [11] 5309 	add	hl, bc
      0016B3 3E 40            [ 7] 5310 	ld	a, #0x40
      0016B5 F5               [11] 5311 	push	af
      0016B6 33               [ 6] 5312 	inc	sp
      0016B7 E5               [11] 5313 	push	hl
      0016B8 CDr00r00         [17] 5314 	call	_WRTVRM
      0016BB F1               [10] 5315 	pop	af
      0016BC 33               [ 6] 5316 	inc	sp
                                   5317 ;src\/Graphics\Graphics.h:118: }
      0016BD DD E1            [14] 5318 	pop	ix
      0016BF C9               [10] 5319 	ret
                                   5320 ;src\/Graphics\Graphics.h:120: void DrawNextPiece() {
                                   5321 ;	---------------------------------
                                   5322 ; Function DrawNextPiece
                                   5323 ; ---------------------------------
      0016C0                       5324 _DrawNextPiece::
      0016C0 F5               [11] 5325 	push	af
      0016C1 F5               [11] 5326 	push	af
                                   5327 ;src\/Graphics\Graphics.h:124: PosMaskSprites(SPRATT, 24+24);
      0016C2 3E 30            [ 7] 5328 	ld	a, #0x30
      0016C4 F5               [11] 5329 	push	af
      0016C5 33               [ 6] 5330 	inc	sp
      0016C6 21 00 1B         [10] 5331 	ld	hl, #0x1b00
      0016C9 E5               [11] 5332 	push	hl
      0016CA CDrB5r15         [17] 5333 	call	_PosMaskSprites
      0016CD F1               [10] 5334 	pop	af
      0016CE 33               [ 6] 5335 	inc	sp
                                   5336 ;src\/Graphics\Graphics.h:125: PosMaskSprites(SPRATT + 16, 24+24+16);
      0016CF 3E 40            [ 7] 5337 	ld	a, #0x40
      0016D1 F5               [11] 5338 	push	af
      0016D2 33               [ 6] 5339 	inc	sp
      0016D3 21 10 1B         [10] 5340 	ld	hl, #0x1b10
      0016D6 E5               [11] 5341 	push	hl
      0016D7 CDrB5r15         [17] 5342 	call	_PosMaskSprites
      0016DA F1               [10] 5343 	pop	af
      0016DB 33               [ 6] 5344 	inc	sp
                                   5345 ;src\/Graphics\Graphics.h:128: PosMaskSprites(SPRATT + 32, 255); // first line
      0016DC 3E FF            [ 7] 5346 	ld	a, #0xff
      0016DE F5               [11] 5347 	push	af
      0016DF 33               [ 6] 5348 	inc	sp
      0016E0 21 20 1B         [10] 5349 	ld	hl, #0x1b20
      0016E3 E5               [11] 5350 	push	hl
      0016E4 CDrB5r15         [17] 5351 	call	_PosMaskSprites
      0016E7 F1               [10] 5352 	pop	af
      0016E8 33               [ 6] 5353 	inc	sp
                                   5354 ;src\/Graphics\Graphics.h:130: while(counter++ < 25) {
      0016E9 FD 21 02 00      [14] 5355 	ld	iy, #2
      0016ED FD 39            [15] 5356 	add	iy, sp
      0016EF FD 36 00 30      [19] 5357 	ld	0 (iy), #0x30
      0016F3 AF               [ 4] 5358 	xor	a, a
      0016F4 FD 23            [10] 5359 	inc	iy
      0016F6 FD 77 00         [19] 5360 	ld	0 (iy), a
      0016F9                       5361 00104$:
      0016F9 FD 21 03 00      [14] 5362 	ld	iy, #3
      0016FD FD 39            [15] 5363 	add	iy, sp
      0016FF FD 7E 00         [19] 5364 	ld	a, 0 (iy)
      001702 D6 19            [ 7] 5365 	sub	a, #0x19
      001704 D2r3Er1A         [10] 5366 	jp	NC, 00106$
      001707 FD 34 00         [23] 5367 	inc	0 (iy)
                                   5368 ;src\/Graphics\Graphics.h:132: word lastJiffy = JIFFY;
      00170A ED 4B 9E FC      [20] 5369 	ld	bc, (_JIFFY)
                                   5370 ;src\/Graphics\Graphics.h:133: while (lastJiffy == JIFFY) {
      00170E                       5371 00101$:
      00170E 2A 9E FC         [16] 5372 	ld	hl, (_JIFFY)
      001711 BF               [ 4] 5373 	cp	a, a
      001712 ED 42            [15] 5374 	sbc	hl, bc
      001714 28 F8            [12] 5375 	jr	Z, 00101$
                                   5376 ;src\/Graphics\Graphics.h:138: GetNextPieceColors(topPiece);
      001716 3Ar90r00         [13] 5377 	ld	a,(#_topPiece + 0)
      001719 F5               [11] 5378 	push	af
      00171A 33               [ 6] 5379 	inc	sp
      00171B CDr5Ar15         [17] 5380 	call	_GetNextPieceColors
      00171E 33               [ 6] 5381 	inc	sp
                                   5382 ;src\/Graphics\Graphics.h:139: WRTVRM(SPRATT + 64, 	y - 32);                       // Code repeated for performance reasons
      00171F FD 21 02 00      [14] 5383 	ld	iy, #2
      001723 FD 39            [15] 5384 	add	iy, sp
      001725 FD 7E 00         [19] 5385 	ld	a, 0 (iy)
      001728 FD 2B            [10] 5386 	dec	iy
      00172A FD 77 00         [19] 5387 	ld	0 (iy), a
      00172D 21 00 00         [10] 5388 	ld	hl, #0
      001730 39               [11] 5389 	add	hl, sp
      001731 FD 7E 00         [19] 5390 	ld	a, 0 (iy)
      001734 C6 E0            [ 7] 5391 	add	a, #0xe0
      001736 77               [ 7] 5392 	ld	(hl), a
      001737 FD 7E FF         [19] 5393 	ld	a, -1 (iy)
      00173A F5               [11] 5394 	push	af
      00173B 33               [ 6] 5395 	inc	sp
      00173C 21 40 1B         [10] 5396 	ld	hl, #0x1b40
      00173F E5               [11] 5397 	push	hl
      001740 CDr00r00         [17] 5398 	call	_WRTVRM
      001743 F1               [10] 5399 	pop	af
      001744 33               [ 6] 5400 	inc	sp
                                   5401 ;src\/Graphics\Graphics.h:140: WRTVRM(SPRATT + 65, 	(4 * 8)-4);
      001745 3E 1C            [ 7] 5402 	ld	a, #0x1c
      001747 F5               [11] 5403 	push	af
      001748 33               [ 6] 5404 	inc	sp
      001749 21 41 1B         [10] 5405 	ld	hl, #0x1b41
      00174C E5               [11] 5406 	push	hl
      00174D CDr00r00         [17] 5407 	call	_WRTVRM
      001750 F1               [10] 5408 	pop	af
      001751 33               [ 6] 5409 	inc	sp
                                   5410 ;src\/Graphics\Graphics.h:141: WRTVRM(SPRATT + 66, 	SPRITE_PATTERN_SMALL_BLOCK);
      001752 3E 4C            [ 7] 5411 	ld	a, #0x4c
      001754 F5               [11] 5412 	push	af
      001755 33               [ 6] 5413 	inc	sp
      001756 21 42 1B         [10] 5414 	ld	hl, #0x1b42
      001759 E5               [11] 5415 	push	hl
      00175A CDr00r00         [17] 5416 	call	_WRTVRM
      00175D F1               [10] 5417 	pop	af
      00175E 33               [ 6] 5418 	inc	sp
                                   5419 ;src\/Graphics\Graphics.h:142: WRTVRM(SPRATT + 67, 	nextPieceColor_Front);
      00175F 3Ar9Br00         [13] 5420 	ld	a,(#_nextPieceColor_Front + 0)
      001762 F5               [11] 5421 	push	af
      001763 33               [ 6] 5422 	inc	sp
      001764 21 43 1B         [10] 5423 	ld	hl, #0x1b43
      001767 E5               [11] 5424 	push	hl
      001768 CDr00r00         [17] 5425 	call	_WRTVRM
      00176B F1               [10] 5426 	pop	af
      00176C 33               [ 6] 5427 	inc	sp
                                   5428 ;src\/Graphics\Graphics.h:143: WRTVRM(SPRATT + 68, 	y - 32);
      00176D 21 00 00         [10] 5429 	ld	hl, #0
      001770 39               [11] 5430 	add	hl, sp
      001771 7E               [ 7] 5431 	ld	a, (hl)
      001772 F5               [11] 5432 	push	af
      001773 33               [ 6] 5433 	inc	sp
      001774 21 44 1B         [10] 5434 	ld	hl, #0x1b44
      001777 E5               [11] 5435 	push	hl
      001778 CDr00r00         [17] 5436 	call	_WRTVRM
      00177B F1               [10] 5437 	pop	af
      00177C 33               [ 6] 5438 	inc	sp
                                   5439 ;src\/Graphics\Graphics.h:144: WRTVRM(SPRATT + 69, 	(4 * 8)-4);
      00177D 3E 1C            [ 7] 5440 	ld	a, #0x1c
      00177F F5               [11] 5441 	push	af
      001780 33               [ 6] 5442 	inc	sp
      001781 21 45 1B         [10] 5443 	ld	hl, #0x1b45
      001784 E5               [11] 5444 	push	hl
      001785 CDr00r00         [17] 5445 	call	_WRTVRM
      001788 F1               [10] 5446 	pop	af
      001789 33               [ 6] 5447 	inc	sp
                                   5448 ;src\/Graphics\Graphics.h:145: WRTVRM(SPRATT + 70, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      00178A 3E 50            [ 7] 5449 	ld	a, #0x50
      00178C F5               [11] 5450 	push	af
      00178D 33               [ 6] 5451 	inc	sp
      00178E 21 46 1B         [10] 5452 	ld	hl, #0x1b46
      001791 E5               [11] 5453 	push	hl
      001792 CDr00r00         [17] 5454 	call	_WRTVRM
      001795 F1               [10] 5455 	pop	af
      001796 33               [ 6] 5456 	inc	sp
                                   5457 ;src\/Graphics\Graphics.h:146: WRTVRM(SPRATT + 71, 	nextPieceColor_Back);
      001797 3Ar9Cr00         [13] 5458 	ld	a,(#_nextPieceColor_Back + 0)
      00179A F5               [11] 5459 	push	af
      00179B 33               [ 6] 5460 	inc	sp
      00179C 21 47 1B         [10] 5461 	ld	hl, #0x1b47
      00179F E5               [11] 5462 	push	hl
      0017A0 CDr00r00         [17] 5463 	call	_WRTVRM
      0017A3 F1               [10] 5464 	pop	af
      0017A4 33               [ 6] 5465 	inc	sp
                                   5466 ;src\/Graphics\Graphics.h:148: GetNextPieceColors(midPiece);
      0017A5 3Ar91r00         [13] 5467 	ld	a,(#_midPiece + 0)
      0017A8 F5               [11] 5468 	push	af
      0017A9 33               [ 6] 5469 	inc	sp
      0017AA CDr5Ar15         [17] 5470 	call	_GetNextPieceColors
      0017AD 33               [ 6] 5471 	inc	sp
                                   5472 ;src\/Graphics\Graphics.h:149: WRTVRM(SPRATT + 72, 	y - 24);
      0017AE 21 00 00         [10] 5473 	ld	hl, #0
      0017B1 39               [11] 5474 	add	hl, sp
      0017B2 FD 21 01 00      [14] 5475 	ld	iy, #1
      0017B6 FD 39            [15] 5476 	add	iy, sp
      0017B8 FD 7E 00         [19] 5477 	ld	a, 0 (iy)
      0017BB C6 E8            [ 7] 5478 	add	a, #0xe8
      0017BD 77               [ 7] 5479 	ld	(hl), a
      0017BE FD 7E FF         [19] 5480 	ld	a, -1 (iy)
      0017C1 F5               [11] 5481 	push	af
      0017C2 33               [ 6] 5482 	inc	sp
      0017C3 21 48 1B         [10] 5483 	ld	hl, #0x1b48
      0017C6 E5               [11] 5484 	push	hl
      0017C7 CDr00r00         [17] 5485 	call	_WRTVRM
      0017CA F1               [10] 5486 	pop	af
      0017CB 33               [ 6] 5487 	inc	sp
                                   5488 ;src\/Graphics\Graphics.h:150: WRTVRM(SPRATT + 73, 	(4 * 8)-4);
      0017CC 3E 1C            [ 7] 5489 	ld	a, #0x1c
      0017CE F5               [11] 5490 	push	af
      0017CF 33               [ 6] 5491 	inc	sp
      0017D0 21 49 1B         [10] 5492 	ld	hl, #0x1b49
      0017D3 E5               [11] 5493 	push	hl
      0017D4 CDr00r00         [17] 5494 	call	_WRTVRM
      0017D7 F1               [10] 5495 	pop	af
      0017D8 33               [ 6] 5496 	inc	sp
                                   5497 ;src\/Graphics\Graphics.h:151: WRTVRM(SPRATT + 74, 	SPRITE_PATTERN_SMALL_BLOCK);
      0017D9 3E 4C            [ 7] 5498 	ld	a, #0x4c
      0017DB F5               [11] 5499 	push	af
      0017DC 33               [ 6] 5500 	inc	sp
      0017DD 21 4A 1B         [10] 5501 	ld	hl, #0x1b4a
      0017E0 E5               [11] 5502 	push	hl
      0017E1 CDr00r00         [17] 5503 	call	_WRTVRM
      0017E4 F1               [10] 5504 	pop	af
      0017E5 33               [ 6] 5505 	inc	sp
                                   5506 ;src\/Graphics\Graphics.h:152: WRTVRM(SPRATT + 75, 	nextPieceColor_Front);
      0017E6 3Ar9Br00         [13] 5507 	ld	a,(#_nextPieceColor_Front + 0)
      0017E9 F5               [11] 5508 	push	af
      0017EA 33               [ 6] 5509 	inc	sp
      0017EB 21 4B 1B         [10] 5510 	ld	hl, #0x1b4b
      0017EE E5               [11] 5511 	push	hl
      0017EF CDr00r00         [17] 5512 	call	_WRTVRM
      0017F2 F1               [10] 5513 	pop	af
      0017F3 33               [ 6] 5514 	inc	sp
                                   5515 ;src\/Graphics\Graphics.h:153: WRTVRM(SPRATT + 76, 	y - 24);
      0017F4 21 00 00         [10] 5516 	ld	hl, #0
      0017F7 39               [11] 5517 	add	hl, sp
      0017F8 7E               [ 7] 5518 	ld	a, (hl)
      0017F9 F5               [11] 5519 	push	af
      0017FA 33               [ 6] 5520 	inc	sp
      0017FB 21 4C 1B         [10] 5521 	ld	hl, #0x1b4c
      0017FE E5               [11] 5522 	push	hl
      0017FF CDr00r00         [17] 5523 	call	_WRTVRM
      001802 F1               [10] 5524 	pop	af
      001803 33               [ 6] 5525 	inc	sp
                                   5526 ;src\/Graphics\Graphics.h:154: WRTVRM(SPRATT + 77, 	(4 * 8)-4);
      001804 3E 1C            [ 7] 5527 	ld	a, #0x1c
      001806 F5               [11] 5528 	push	af
      001807 33               [ 6] 5529 	inc	sp
      001808 21 4D 1B         [10] 5530 	ld	hl, #0x1b4d
      00180B E5               [11] 5531 	push	hl
      00180C CDr00r00         [17] 5532 	call	_WRTVRM
      00180F F1               [10] 5533 	pop	af
      001810 33               [ 6] 5534 	inc	sp
                                   5535 ;src\/Graphics\Graphics.h:155: WRTVRM(SPRATT + 78, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001811 3E 50            [ 7] 5536 	ld	a, #0x50
      001813 F5               [11] 5537 	push	af
      001814 33               [ 6] 5538 	inc	sp
      001815 21 4E 1B         [10] 5539 	ld	hl, #0x1b4e
      001818 E5               [11] 5540 	push	hl
      001819 CDr00r00         [17] 5541 	call	_WRTVRM
      00181C F1               [10] 5542 	pop	af
      00181D 33               [ 6] 5543 	inc	sp
                                   5544 ;src\/Graphics\Graphics.h:156: WRTVRM(SPRATT + 79, 	nextPieceColor_Back);    
      00181E 3Ar9Cr00         [13] 5545 	ld	a,(#_nextPieceColor_Back + 0)
      001821 F5               [11] 5546 	push	af
      001822 33               [ 6] 5547 	inc	sp
      001823 21 4F 1B         [10] 5548 	ld	hl, #0x1b4f
      001826 E5               [11] 5549 	push	hl
      001827 CDr00r00         [17] 5550 	call	_WRTVRM
      00182A F1               [10] 5551 	pop	af
      00182B 33               [ 6] 5552 	inc	sp
                                   5553 ;src\/Graphics\Graphics.h:158: GetNextPieceColors(bottomPiece);
      00182C 3Ar92r00         [13] 5554 	ld	a,(#_bottomPiece + 0)
      00182F F5               [11] 5555 	push	af
      001830 33               [ 6] 5556 	inc	sp
      001831 CDr5Ar15         [17] 5557 	call	_GetNextPieceColors
      001834 33               [ 6] 5558 	inc	sp
                                   5559 ;src\/Graphics\Graphics.h:159: WRTVRM(SPRATT + 80, 	y - 16);
      001835 21 00 00         [10] 5560 	ld	hl, #0
      001838 39               [11] 5561 	add	hl, sp
      001839 FD 21 01 00      [14] 5562 	ld	iy, #1
      00183D FD 39            [15] 5563 	add	iy, sp
      00183F FD 7E 00         [19] 5564 	ld	a, 0 (iy)
      001842 C6 F0            [ 7] 5565 	add	a, #0xf0
      001844 77               [ 7] 5566 	ld	(hl), a
      001845 FD 7E FF         [19] 5567 	ld	a, -1 (iy)
      001848 F5               [11] 5568 	push	af
      001849 33               [ 6] 5569 	inc	sp
      00184A 21 50 1B         [10] 5570 	ld	hl, #0x1b50
      00184D E5               [11] 5571 	push	hl
      00184E CDr00r00         [17] 5572 	call	_WRTVRM
      001851 F1               [10] 5573 	pop	af
      001852 33               [ 6] 5574 	inc	sp
                                   5575 ;src\/Graphics\Graphics.h:160: WRTVRM(SPRATT + 81, 	(4 * 8)-4);
      001853 3E 1C            [ 7] 5576 	ld	a, #0x1c
      001855 F5               [11] 5577 	push	af
      001856 33               [ 6] 5578 	inc	sp
      001857 21 51 1B         [10] 5579 	ld	hl, #0x1b51
      00185A E5               [11] 5580 	push	hl
      00185B CDr00r00         [17] 5581 	call	_WRTVRM
      00185E F1               [10] 5582 	pop	af
      00185F 33               [ 6] 5583 	inc	sp
                                   5584 ;src\/Graphics\Graphics.h:161: WRTVRM(SPRATT + 82, 	SPRITE_PATTERN_SMALL_BLOCK);
      001860 3E 4C            [ 7] 5585 	ld	a, #0x4c
      001862 F5               [11] 5586 	push	af
      001863 33               [ 6] 5587 	inc	sp
      001864 21 52 1B         [10] 5588 	ld	hl, #0x1b52
      001867 E5               [11] 5589 	push	hl
      001868 CDr00r00         [17] 5590 	call	_WRTVRM
      00186B F1               [10] 5591 	pop	af
      00186C 33               [ 6] 5592 	inc	sp
                                   5593 ;src\/Graphics\Graphics.h:162: WRTVRM(SPRATT + 83, 	nextPieceColor_Front);
      00186D 3Ar9Br00         [13] 5594 	ld	a,(#_nextPieceColor_Front + 0)
      001870 F5               [11] 5595 	push	af
      001871 33               [ 6] 5596 	inc	sp
      001872 21 53 1B         [10] 5597 	ld	hl, #0x1b53
      001875 E5               [11] 5598 	push	hl
      001876 CDr00r00         [17] 5599 	call	_WRTVRM
      001879 F1               [10] 5600 	pop	af
      00187A 33               [ 6] 5601 	inc	sp
                                   5602 ;src\/Graphics\Graphics.h:163: WRTVRM(SPRATT + 84, 	y - 16);
      00187B 21 00 00         [10] 5603 	ld	hl, #0
      00187E 39               [11] 5604 	add	hl, sp
      00187F 7E               [ 7] 5605 	ld	a, (hl)
      001880 F5               [11] 5606 	push	af
      001881 33               [ 6] 5607 	inc	sp
      001882 21 54 1B         [10] 5608 	ld	hl, #0x1b54
      001885 E5               [11] 5609 	push	hl
      001886 CDr00r00         [17] 5610 	call	_WRTVRM
      001889 F1               [10] 5611 	pop	af
      00188A 33               [ 6] 5612 	inc	sp
                                   5613 ;src\/Graphics\Graphics.h:164: WRTVRM(SPRATT + 85, 	(4 * 8)-4);
      00188B 3E 1C            [ 7] 5614 	ld	a, #0x1c
      00188D F5               [11] 5615 	push	af
      00188E 33               [ 6] 5616 	inc	sp
      00188F 21 55 1B         [10] 5617 	ld	hl, #0x1b55
      001892 E5               [11] 5618 	push	hl
      001893 CDr00r00         [17] 5619 	call	_WRTVRM
      001896 F1               [10] 5620 	pop	af
      001897 33               [ 6] 5621 	inc	sp
                                   5622 ;src\/Graphics\Graphics.h:165: WRTVRM(SPRATT + 86, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001898 3E 50            [ 7] 5623 	ld	a, #0x50
      00189A F5               [11] 5624 	push	af
      00189B 33               [ 6] 5625 	inc	sp
      00189C 21 56 1B         [10] 5626 	ld	hl, #0x1b56
      00189F E5               [11] 5627 	push	hl
      0018A0 CDr00r00         [17] 5628 	call	_WRTVRM
      0018A3 F1               [10] 5629 	pop	af
      0018A4 33               [ 6] 5630 	inc	sp
                                   5631 ;src\/Graphics\Graphics.h:166: WRTVRM(SPRATT + 87, 	nextPieceColor_Back);    
      0018A5 3Ar9Cr00         [13] 5632 	ld	a,(#_nextPieceColor_Back + 0)
      0018A8 F5               [11] 5633 	push	af
      0018A9 33               [ 6] 5634 	inc	sp
      0018AA 21 57 1B         [10] 5635 	ld	hl, #0x1b57
      0018AD E5               [11] 5636 	push	hl
      0018AE CDr00r00         [17] 5637 	call	_WRTVRM
      0018B1 F1               [10] 5638 	pop	af
      0018B2 33               [ 6] 5639 	inc	sp
                                   5640 ;src\/Graphics\Graphics.h:169: GetNextPieceColors(nextTopPiece);
      0018B3 3Ar93r00         [13] 5641 	ld	a,(#_nextTopPiece + 0)
      0018B6 F5               [11] 5642 	push	af
      0018B7 33               [ 6] 5643 	inc	sp
      0018B8 CDr5Ar15         [17] 5644 	call	_GetNextPieceColors
      0018BB 33               [ 6] 5645 	inc	sp
                                   5646 ;src\/Graphics\Graphics.h:170: WRTVRM(SPRATT + 88, 	y);                       // Code repeated for performance reasons
      0018BC 21 02 00         [10] 5647 	ld	hl, #2
      0018BF 39               [11] 5648 	add	hl, sp
      0018C0 7E               [ 7] 5649 	ld	a, (hl)
      0018C1 F5               [11] 5650 	push	af
      0018C2 33               [ 6] 5651 	inc	sp
      0018C3 21 58 1B         [10] 5652 	ld	hl, #0x1b58
      0018C6 E5               [11] 5653 	push	hl
      0018C7 CDr00r00         [17] 5654 	call	_WRTVRM
      0018CA F1               [10] 5655 	pop	af
      0018CB 33               [ 6] 5656 	inc	sp
                                   5657 ;src\/Graphics\Graphics.h:171: WRTVRM(SPRATT + 89, 	(4 * 8)-4);
      0018CC 3E 1C            [ 7] 5658 	ld	a, #0x1c
      0018CE F5               [11] 5659 	push	af
      0018CF 33               [ 6] 5660 	inc	sp
      0018D0 21 59 1B         [10] 5661 	ld	hl, #0x1b59
      0018D3 E5               [11] 5662 	push	hl
      0018D4 CDr00r00         [17] 5663 	call	_WRTVRM
      0018D7 F1               [10] 5664 	pop	af
      0018D8 33               [ 6] 5665 	inc	sp
                                   5666 ;src\/Graphics\Graphics.h:172: WRTVRM(SPRATT + 90, 	SPRITE_PATTERN_SMALL_BLOCK);
      0018D9 3E 4C            [ 7] 5667 	ld	a, #0x4c
      0018DB F5               [11] 5668 	push	af
      0018DC 33               [ 6] 5669 	inc	sp
      0018DD 21 5A 1B         [10] 5670 	ld	hl, #0x1b5a
      0018E0 E5               [11] 5671 	push	hl
      0018E1 CDr00r00         [17] 5672 	call	_WRTVRM
      0018E4 F1               [10] 5673 	pop	af
      0018E5 33               [ 6] 5674 	inc	sp
                                   5675 ;src\/Graphics\Graphics.h:173: WRTVRM(SPRATT + 91, 	nextPieceColor_Front);
      0018E6 3Ar9Br00         [13] 5676 	ld	a,(#_nextPieceColor_Front + 0)
      0018E9 F5               [11] 5677 	push	af
      0018EA 33               [ 6] 5678 	inc	sp
      0018EB 21 5B 1B         [10] 5679 	ld	hl, #0x1b5b
      0018EE E5               [11] 5680 	push	hl
      0018EF CDr00r00         [17] 5681 	call	_WRTVRM
      0018F2 F1               [10] 5682 	pop	af
      0018F3 33               [ 6] 5683 	inc	sp
                                   5684 ;src\/Graphics\Graphics.h:174: WRTVRM(SPRATT + 92, 	y);
      0018F4 21 02 00         [10] 5685 	ld	hl, #2
      0018F7 39               [11] 5686 	add	hl, sp
      0018F8 7E               [ 7] 5687 	ld	a, (hl)
      0018F9 F5               [11] 5688 	push	af
      0018FA 33               [ 6] 5689 	inc	sp
      0018FB 21 5C 1B         [10] 5690 	ld	hl, #0x1b5c
      0018FE E5               [11] 5691 	push	hl
      0018FF CDr00r00         [17] 5692 	call	_WRTVRM
      001902 F1               [10] 5693 	pop	af
      001903 33               [ 6] 5694 	inc	sp
                                   5695 ;src\/Graphics\Graphics.h:175: WRTVRM(SPRATT + 93, 	(4 * 8)-4);
      001904 3E 1C            [ 7] 5696 	ld	a, #0x1c
      001906 F5               [11] 5697 	push	af
      001907 33               [ 6] 5698 	inc	sp
      001908 21 5D 1B         [10] 5699 	ld	hl, #0x1b5d
      00190B E5               [11] 5700 	push	hl
      00190C CDr00r00         [17] 5701 	call	_WRTVRM
      00190F F1               [10] 5702 	pop	af
      001910 33               [ 6] 5703 	inc	sp
                                   5704 ;src\/Graphics\Graphics.h:176: WRTVRM(SPRATT + 94, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001911 3E 50            [ 7] 5705 	ld	a, #0x50
      001913 F5               [11] 5706 	push	af
      001914 33               [ 6] 5707 	inc	sp
      001915 21 5E 1B         [10] 5708 	ld	hl, #0x1b5e
      001918 E5               [11] 5709 	push	hl
      001919 CDr00r00         [17] 5710 	call	_WRTVRM
      00191C F1               [10] 5711 	pop	af
      00191D 33               [ 6] 5712 	inc	sp
                                   5713 ;src\/Graphics\Graphics.h:177: WRTVRM(SPRATT + 95, 	nextPieceColor_Back);
      00191E 3Ar9Cr00         [13] 5714 	ld	a,(#_nextPieceColor_Back + 0)
      001921 F5               [11] 5715 	push	af
      001922 33               [ 6] 5716 	inc	sp
      001923 21 5F 1B         [10] 5717 	ld	hl, #0x1b5f
      001926 E5               [11] 5718 	push	hl
      001927 CDr00r00         [17] 5719 	call	_WRTVRM
      00192A F1               [10] 5720 	pop	af
      00192B 33               [ 6] 5721 	inc	sp
                                   5722 ;src\/Graphics\Graphics.h:179: GetNextPieceColors(nextMidPiece);
      00192C 3Ar94r00         [13] 5723 	ld	a,(#_nextMidPiece + 0)
      00192F F5               [11] 5724 	push	af
      001930 33               [ 6] 5725 	inc	sp
      001931 CDr5Ar15         [17] 5726 	call	_GetNextPieceColors
      001934 33               [ 6] 5727 	inc	sp
                                   5728 ;src\/Graphics\Graphics.h:180: WRTVRM(SPRATT + 96, 	y + 8);
      001935 FD 21 01 00      [14] 5729 	ld	iy, #1
      001939 FD 39            [15] 5730 	add	iy, sp
      00193B FD 7E 00         [19] 5731 	ld	a, 0 (iy)
      00193E C6 08            [ 7] 5732 	add	a, #0x08
      001940 FD 2B            [10] 5733 	dec	iy
      001942 FD 77 00         [19] 5734 	ld	0 (iy), a
      001945 F5               [11] 5735 	push	af
      001946 33               [ 6] 5736 	inc	sp
      001947 21 60 1B         [10] 5737 	ld	hl, #0x1b60
      00194A E5               [11] 5738 	push	hl
      00194B CDr00r00         [17] 5739 	call	_WRTVRM
      00194E F1               [10] 5740 	pop	af
      00194F 33               [ 6] 5741 	inc	sp
                                   5742 ;src\/Graphics\Graphics.h:181: WRTVRM(SPRATT + 97, 	(4 * 8)-4);
      001950 3E 1C            [ 7] 5743 	ld	a, #0x1c
      001952 F5               [11] 5744 	push	af
      001953 33               [ 6] 5745 	inc	sp
      001954 21 61 1B         [10] 5746 	ld	hl, #0x1b61
      001957 E5               [11] 5747 	push	hl
      001958 CDr00r00         [17] 5748 	call	_WRTVRM
      00195B F1               [10] 5749 	pop	af
      00195C 33               [ 6] 5750 	inc	sp
                                   5751 ;src\/Graphics\Graphics.h:182: WRTVRM(SPRATT + 98, 	SPRITE_PATTERN_SMALL_BLOCK);
      00195D 3E 4C            [ 7] 5752 	ld	a, #0x4c
      00195F F5               [11] 5753 	push	af
      001960 33               [ 6] 5754 	inc	sp
      001961 21 62 1B         [10] 5755 	ld	hl, #0x1b62
      001964 E5               [11] 5756 	push	hl
      001965 CDr00r00         [17] 5757 	call	_WRTVRM
      001968 F1               [10] 5758 	pop	af
      001969 33               [ 6] 5759 	inc	sp
                                   5760 ;src\/Graphics\Graphics.h:183: WRTVRM(SPRATT + 99, 	nextPieceColor_Front);
      00196A 3Ar9Br00         [13] 5761 	ld	a,(#_nextPieceColor_Front + 0)
      00196D F5               [11] 5762 	push	af
      00196E 33               [ 6] 5763 	inc	sp
      00196F 21 63 1B         [10] 5764 	ld	hl, #0x1b63
      001972 E5               [11] 5765 	push	hl
      001973 CDr00r00         [17] 5766 	call	_WRTVRM
      001976 F1               [10] 5767 	pop	af
      001977 33               [ 6] 5768 	inc	sp
                                   5769 ;src\/Graphics\Graphics.h:184: WRTVRM(SPRATT + 100, 	y + 8);
      001978 21 00 00         [10] 5770 	ld	hl, #0
      00197B 39               [11] 5771 	add	hl, sp
      00197C 7E               [ 7] 5772 	ld	a, (hl)
      00197D F5               [11] 5773 	push	af
      00197E 33               [ 6] 5774 	inc	sp
      00197F 21 64 1B         [10] 5775 	ld	hl, #0x1b64
      001982 E5               [11] 5776 	push	hl
      001983 CDr00r00         [17] 5777 	call	_WRTVRM
      001986 F1               [10] 5778 	pop	af
      001987 33               [ 6] 5779 	inc	sp
                                   5780 ;src\/Graphics\Graphics.h:185: WRTVRM(SPRATT + 101, 	(4 * 8)-4);
      001988 3E 1C            [ 7] 5781 	ld	a, #0x1c
      00198A F5               [11] 5782 	push	af
      00198B 33               [ 6] 5783 	inc	sp
      00198C 21 65 1B         [10] 5784 	ld	hl, #0x1b65
      00198F E5               [11] 5785 	push	hl
      001990 CDr00r00         [17] 5786 	call	_WRTVRM
      001993 F1               [10] 5787 	pop	af
      001994 33               [ 6] 5788 	inc	sp
                                   5789 ;src\/Graphics\Graphics.h:186: WRTVRM(SPRATT + 102, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001995 3E 50            [ 7] 5790 	ld	a, #0x50
      001997 F5               [11] 5791 	push	af
      001998 33               [ 6] 5792 	inc	sp
      001999 21 66 1B         [10] 5793 	ld	hl, #0x1b66
      00199C E5               [11] 5794 	push	hl
      00199D CDr00r00         [17] 5795 	call	_WRTVRM
      0019A0 F1               [10] 5796 	pop	af
      0019A1 33               [ 6] 5797 	inc	sp
                                   5798 ;src\/Graphics\Graphics.h:187: WRTVRM(SPRATT + 103, 	nextPieceColor_Back);
      0019A2 3Ar9Cr00         [13] 5799 	ld	a,(#_nextPieceColor_Back + 0)
      0019A5 F5               [11] 5800 	push	af
      0019A6 33               [ 6] 5801 	inc	sp
      0019A7 21 67 1B         [10] 5802 	ld	hl, #0x1b67
      0019AA E5               [11] 5803 	push	hl
      0019AB CDr00r00         [17] 5804 	call	_WRTVRM
      0019AE F1               [10] 5805 	pop	af
      0019AF 33               [ 6] 5806 	inc	sp
                                   5807 ;src\/Graphics\Graphics.h:189: GetNextPieceColors(nextBottomPiece);
      0019B0 3Ar95r00         [13] 5808 	ld	a,(#_nextBottomPiece + 0)
      0019B3 F5               [11] 5809 	push	af
      0019B4 33               [ 6] 5810 	inc	sp
      0019B5 CDr5Ar15         [17] 5811 	call	_GetNextPieceColors
      0019B8 33               [ 6] 5812 	inc	sp
                                   5813 ;src\/Graphics\Graphics.h:190: WRTVRM(SPRATT + 104, 	y + 16);
      0019B9 FD 21 01 00      [14] 5814 	ld	iy, #1
      0019BD FD 39            [15] 5815 	add	iy, sp
      0019BF FD 7E 00         [19] 5816 	ld	a, 0 (iy)
      0019C2 C6 10            [ 7] 5817 	add	a, #0x10
      0019C4 FD 77 00         [19] 5818 	ld	0 (iy), a
      0019C7 F5               [11] 5819 	push	af
      0019C8 33               [ 6] 5820 	inc	sp
      0019C9 21 68 1B         [10] 5821 	ld	hl, #0x1b68
      0019CC E5               [11] 5822 	push	hl
      0019CD CDr00r00         [17] 5823 	call	_WRTVRM
      0019D0 F1               [10] 5824 	pop	af
      0019D1 33               [ 6] 5825 	inc	sp
                                   5826 ;src\/Graphics\Graphics.h:191: WRTVRM(SPRATT + 105, 	(4 * 8)-4);
      0019D2 3E 1C            [ 7] 5827 	ld	a, #0x1c
      0019D4 F5               [11] 5828 	push	af
      0019D5 33               [ 6] 5829 	inc	sp
      0019D6 21 69 1B         [10] 5830 	ld	hl, #0x1b69
      0019D9 E5               [11] 5831 	push	hl
      0019DA CDr00r00         [17] 5832 	call	_WRTVRM
      0019DD F1               [10] 5833 	pop	af
      0019DE 33               [ 6] 5834 	inc	sp
                                   5835 ;src\/Graphics\Graphics.h:192: WRTVRM(SPRATT + 106, 	SPRITE_PATTERN_SMALL_BLOCK);
      0019DF 3E 4C            [ 7] 5836 	ld	a, #0x4c
      0019E1 F5               [11] 5837 	push	af
      0019E2 33               [ 6] 5838 	inc	sp
      0019E3 21 6A 1B         [10] 5839 	ld	hl, #0x1b6a
      0019E6 E5               [11] 5840 	push	hl
      0019E7 CDr00r00         [17] 5841 	call	_WRTVRM
      0019EA F1               [10] 5842 	pop	af
      0019EB 33               [ 6] 5843 	inc	sp
                                   5844 ;src\/Graphics\Graphics.h:193: WRTVRM(SPRATT + 107, 	nextPieceColor_Front);
      0019EC 3Ar9Br00         [13] 5845 	ld	a,(#_nextPieceColor_Front + 0)
      0019EF F5               [11] 5846 	push	af
      0019F0 33               [ 6] 5847 	inc	sp
      0019F1 21 6B 1B         [10] 5848 	ld	hl, #0x1b6b
      0019F4 E5               [11] 5849 	push	hl
      0019F5 CDr00r00         [17] 5850 	call	_WRTVRM
      0019F8 F1               [10] 5851 	pop	af
      0019F9 33               [ 6] 5852 	inc	sp
                                   5853 ;src\/Graphics\Graphics.h:194: WRTVRM(SPRATT + 108, 	y + 16);
      0019FA 21 01 00         [10] 5854 	ld	hl, #1
      0019FD 39               [11] 5855 	add	hl, sp
      0019FE 7E               [ 7] 5856 	ld	a, (hl)
      0019FF F5               [11] 5857 	push	af
      001A00 33               [ 6] 5858 	inc	sp
      001A01 21 6C 1B         [10] 5859 	ld	hl, #0x1b6c
      001A04 E5               [11] 5860 	push	hl
      001A05 CDr00r00         [17] 5861 	call	_WRTVRM
      001A08 F1               [10] 5862 	pop	af
      001A09 33               [ 6] 5863 	inc	sp
                                   5864 ;src\/Graphics\Graphics.h:195: WRTVRM(SPRATT + 109, 	(4 * 8)-4);
      001A0A 3E 1C            [ 7] 5865 	ld	a, #0x1c
      001A0C F5               [11] 5866 	push	af
      001A0D 33               [ 6] 5867 	inc	sp
      001A0E 21 6D 1B         [10] 5868 	ld	hl, #0x1b6d
      001A11 E5               [11] 5869 	push	hl
      001A12 CDr00r00         [17] 5870 	call	_WRTVRM
      001A15 F1               [10] 5871 	pop	af
      001A16 33               [ 6] 5872 	inc	sp
                                   5873 ;src\/Graphics\Graphics.h:196: WRTVRM(SPRATT + 110, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001A17 3E 50            [ 7] 5874 	ld	a, #0x50
      001A19 F5               [11] 5875 	push	af
      001A1A 33               [ 6] 5876 	inc	sp
      001A1B 21 6E 1B         [10] 5877 	ld	hl, #0x1b6e
      001A1E E5               [11] 5878 	push	hl
      001A1F CDr00r00         [17] 5879 	call	_WRTVRM
      001A22 F1               [10] 5880 	pop	af
      001A23 33               [ 6] 5881 	inc	sp
                                   5882 ;src\/Graphics\Graphics.h:197: WRTVRM(SPRATT + 111, 	nextPieceColor_Back);
      001A24 3Ar9Cr00         [13] 5883 	ld	a,(#_nextPieceColor_Back + 0)
      001A27 F5               [11] 5884 	push	af
      001A28 33               [ 6] 5885 	inc	sp
      001A29 21 6F 1B         [10] 5886 	ld	hl, #0x1b6f
      001A2C E5               [11] 5887 	push	hl
      001A2D CDr00r00         [17] 5888 	call	_WRTVRM
      001A30 F1               [10] 5889 	pop	af
      001A31 33               [ 6] 5890 	inc	sp
                                   5891 ;src\/Graphics\Graphics.h:199: y--;
      001A32 FD 21 02 00      [14] 5892 	ld	iy, #2
      001A36 FD 39            [15] 5893 	add	iy, sp
      001A38 FD 35 00         [23] 5894 	dec	0 (iy)
      001A3B C3rF9r16         [10] 5895 	jp	00104$
      001A3E                       5896 00106$:
                                   5897 ;src\/Graphics\Graphics.h:203: WRTVRM(SPRATT + 64, 	192);
      001A3E 3E C0            [ 7] 5898 	ld	a, #0xc0
      001A40 F5               [11] 5899 	push	af
      001A41 33               [ 6] 5900 	inc	sp
      001A42 21 40 1B         [10] 5901 	ld	hl, #0x1b40
      001A45 E5               [11] 5902 	push	hl
      001A46 CDr00r00         [17] 5903 	call	_WRTVRM
      001A49 F1               [10] 5904 	pop	af
      001A4A 33               [ 6] 5905 	inc	sp
                                   5906 ;src\/Graphics\Graphics.h:204: WRTVRM(SPRATT + 68, 	192);
      001A4B 3E C0            [ 7] 5907 	ld	a, #0xc0
      001A4D F5               [11] 5908 	push	af
      001A4E 33               [ 6] 5909 	inc	sp
      001A4F 21 44 1B         [10] 5910 	ld	hl, #0x1b44
      001A52 E5               [11] 5911 	push	hl
      001A53 CDr00r00         [17] 5912 	call	_WRTVRM
      001A56 F1               [10] 5913 	pop	af
      001A57 33               [ 6] 5914 	inc	sp
                                   5915 ;src\/Graphics\Graphics.h:205: WRTVRM(SPRATT + 72, 	192);
      001A58 3E C0            [ 7] 5916 	ld	a, #0xc0
      001A5A F5               [11] 5917 	push	af
      001A5B 33               [ 6] 5918 	inc	sp
      001A5C 21 48 1B         [10] 5919 	ld	hl, #0x1b48
      001A5F E5               [11] 5920 	push	hl
      001A60 CDr00r00         [17] 5921 	call	_WRTVRM
      001A63 F1               [10] 5922 	pop	af
      001A64 33               [ 6] 5923 	inc	sp
                                   5924 ;src\/Graphics\Graphics.h:206: WRTVRM(SPRATT + 76, 	192);
      001A65 3E C0            [ 7] 5925 	ld	a, #0xc0
      001A67 F5               [11] 5926 	push	af
      001A68 33               [ 6] 5927 	inc	sp
      001A69 21 4C 1B         [10] 5928 	ld	hl, #0x1b4c
      001A6C E5               [11] 5929 	push	hl
      001A6D CDr00r00         [17] 5930 	call	_WRTVRM
      001A70 F1               [10] 5931 	pop	af
      001A71 33               [ 6] 5932 	inc	sp
                                   5933 ;src\/Graphics\Graphics.h:207: WRTVRM(SPRATT + 80, 	192);
      001A72 3E C0            [ 7] 5934 	ld	a, #0xc0
      001A74 F5               [11] 5935 	push	af
      001A75 33               [ 6] 5936 	inc	sp
      001A76 21 50 1B         [10] 5937 	ld	hl, #0x1b50
      001A79 E5               [11] 5938 	push	hl
      001A7A CDr00r00         [17] 5939 	call	_WRTVRM
      001A7D F1               [10] 5940 	pop	af
      001A7E 33               [ 6] 5941 	inc	sp
                                   5942 ;src\/Graphics\Graphics.h:208: WRTVRM(SPRATT + 84, 	192);
      001A7F 3E C0            [ 7] 5943 	ld	a, #0xc0
      001A81 F5               [11] 5944 	push	af
      001A82 33               [ 6] 5945 	inc	sp
      001A83 21 54 1B         [10] 5946 	ld	hl, #0x1b54
      001A86 E5               [11] 5947 	push	hl
      001A87 CDr00r00         [17] 5948 	call	_WRTVRM
      001A8A F1               [10] 5949 	pop	af
      001A8B 33               [ 6] 5950 	inc	sp
                                   5951 ;src\/Graphics\Graphics.h:209: }
      001A8C F1               [10] 5952 	pop	af
      001A8D F1               [10] 5953 	pop	af
      001A8E C9               [10] 5954 	ret
                                   5955 ;src\/Graphics\Graphics.h:211: void DrawScore() {
                                   5956 ;	---------------------------------
                                   5957 ; Function DrawScore
                                   5958 ; ---------------------------------
      001A8F                       5959 _DrawScore::
      001A8F DD E5            [15] 5960 	push	ix
      001A91 DD 21 00 00      [14] 5961 	ld	ix,#0
      001A95 DD 39            [15] 5962 	add	ix,sp
      001A97 F5               [11] 5963 	push	af
                                   5964 ;src\/Graphics\Graphics.h:212: byte bgCounter = 0, bgColor;
      001A98 DD 36 FE 00      [19] 5965 	ld	-2 (ix), #0
                                   5966 ;src\/Graphics\Graphics.h:216: if(newLevel) {
      001A9C 3Ar07r00         [13] 5967 	ld	a,(#_newLevel + 0)
      001A9F B7               [ 4] 5968 	or	a, a
      001AA0 CAr9Br1B         [10] 5969 	jp	Z, 00119$
                                   5970 ;src\/Graphics\Graphics.h:217: for(byte i=0; i < 60; i++) {
      001AA3 DD 36 FF 00      [19] 5971 	ld	-1 (ix), #0
      001AA7                       5972 00121$:
      001AA7 DD 7E FF         [19] 5973 	ld	a, -1 (ix)
      001AAA D6 3C            [ 7] 5974 	sub	a, #0x3c
      001AAC D2r9Br1B         [10] 5975 	jp	NC, 00119$
                                   5976 ;src\/Graphics\Graphics.h:218: lastJiffy = JIFFY;
      001AAF ED 4B 9E FC      [20] 5977 	ld	bc, (_JIFFY)
                                   5978 ;src\/Graphics\Graphics.h:219: while(lastJiffy == JIFFY) { }
      001AB3                       5979 00101$:
      001AB3 2A 9E FC         [16] 5980 	ld	hl, (_JIFFY)
      001AB6 BF               [ 4] 5981 	cp	a, a
      001AB7 ED 42            [15] 5982 	sbc	hl, bc
      001AB9 28 F8            [12] 5983 	jr	Z, 00101$
                                   5984 ;src\/Graphics\Graphics.h:221: DrawExplosionSprite(26 * 8, 10 * 8, i);
      001ABB DD 56 FF         [19] 5985 	ld	d, -1 (ix)
      001ABE 1E 50            [ 7] 5986 	ld	e,#0x50
      001AC0 D5               [11] 5987 	push	de
      001AC1 3E D0            [ 7] 5988 	ld	a, #0xd0
      001AC3 F5               [11] 5989 	push	af
      001AC4 33               [ 6] 5990 	inc	sp
      001AC5 CDrDFr0E         [17] 5991 	call	_DrawExplosionSprite
      001AC8 F1               [10] 5992 	pop	af
      001AC9 33               [ 6] 5993 	inc	sp
                                   5994 ;src\/Graphics\Graphics.h:223: if(JIFFY & 0b00000110) {
      001ACA 2A 9E FC         [16] 5995 	ld	hl, (_JIFFY)
      001ACD 7D               [ 4] 5996 	ld	a, l
      001ACE E6 06            [ 7] 5997 	and	a, #0x06
      001AD0 CAr7Br1B         [10] 5998 	jp	Z,00115$
                                   5999 ;src\/Graphics\Graphics.h:225: DrawString(" LEVEL", 26, 10);
      001AD3 11 1A 0A         [10] 6000 	ld	de, #0x0a1a
      001AD6 D5               [11] 6001 	push	de
      001AD7 21r1Dr1C         [10] 6002 	ld	hl, #___str_1
      001ADA E5               [11] 6003 	push	hl
      001ADB CDrCCr12         [17] 6004 	call	_DrawString
      001ADE F1               [10] 6005 	pop	af
      001ADF F1               [10] 6006 	pop	af
                                   6007 ;src\/Graphics\Graphics.h:226: DrawNumber(level, 26, 11);
      001AE0 3Ar06r00         [13] 6008 	ld	a, (#_level + 0)
      001AE3 4F               [ 4] 6009 	ld	c, a
      001AE4 06 00            [ 7] 6010 	ld	b, #0x00
      001AE6 11 1A 0B         [10] 6011 	ld	de, #0x0b1a
      001AE9 D5               [11] 6012 	push	de
      001AEA C5               [11] 6013 	push	bc
      001AEB CDrFEr12         [17] 6014 	call	_DrawNumber
      001AEE F1               [10] 6015 	pop	af
      001AEF F1               [10] 6016 	pop	af
                                   6017 ;src\/Graphics\Graphics.h:232: switch(bgCounter++) {
      001AF0 DD 4E FE         [19] 6018 	ld	c, -2 (ix)
      001AF3 DD 34 FE         [23] 6019 	inc	-2 (ix)
      001AF6 3E 07            [ 7] 6020 	ld	a, #0x07
      001AF8 91               [ 4] 6021 	sub	a, c
      001AF9 38 45            [12] 6022 	jr	C, 00112$
      001AFB 06 00            [ 7] 6023 	ld	b, #0x00
      001AFD 21r04r1B         [10] 6024 	ld	hl, #00163$
      001B00 09               [11] 6025 	add	hl, bc
      001B01 09               [11] 6026 	add	hl, bc
      001B02 09               [11] 6027 	add	hl, bc
      001B03 E9               [ 4] 6028 	jp	(hl)
      001B04                       6029 00163$:
      001B04 C3r1Cr1B         [10] 6030 	jp	00104$
      001B07 C3r20r1B         [10] 6031 	jp	00105$
      001B0A C3r24r1B         [10] 6032 	jp	00106$
      001B0D C3r28r1B         [10] 6033 	jp	00107$
      001B10 C3r2Cr1B         [10] 6034 	jp	00108$
      001B13 C3r30r1B         [10] 6035 	jp	00109$
      001B16 C3r34r1B         [10] 6036 	jp	00110$
      001B19 C3r38r1B         [10] 6037 	jp	00111$
                                   6038 ;src\/Graphics\Graphics.h:233: case 0:
      001B1C                       6039 00104$:
                                   6040 ;src\/Graphics\Graphics.h:234: bgColor = 0x14;
      001B1C 0E 14            [ 7] 6041 	ld	c, #0x14
                                   6042 ;src\/Graphics\Graphics.h:235: break;
      001B1E 18 22            [12] 6043 	jr	00113$
                                   6044 ;src\/Graphics\Graphics.h:236: case 1:
      001B20                       6045 00105$:
                                   6046 ;src\/Graphics\Graphics.h:237: bgColor = 0x15;
      001B20 0E 15            [ 7] 6047 	ld	c, #0x15
                                   6048 ;src\/Graphics\Graphics.h:238: break;
      001B22 18 1E            [12] 6049 	jr	00113$
                                   6050 ;src\/Graphics\Graphics.h:239: case 2:
      001B24                       6051 00106$:
                                   6052 ;src\/Graphics\Graphics.h:240: bgColor = 0x17;
      001B24 0E 17            [ 7] 6053 	ld	c, #0x17
                                   6054 ;src\/Graphics\Graphics.h:241: break;
      001B26 18 1A            [12] 6055 	jr	00113$
                                   6056 ;src\/Graphics\Graphics.h:242: case 3:
      001B28                       6057 00107$:
                                   6058 ;src\/Graphics\Graphics.h:243: bgColor = 0x1e;
      001B28 0E 1E            [ 7] 6059 	ld	c, #0x1e
                                   6060 ;src\/Graphics\Graphics.h:244: break;
      001B2A 18 16            [12] 6061 	jr	00113$
                                   6062 ;src\/Graphics\Graphics.h:245: case 4:
      001B2C                       6063 00108$:
                                   6064 ;src\/Graphics\Graphics.h:246: bgColor = 0x1f;
      001B2C 0E 1F            [ 7] 6065 	ld	c, #0x1f
                                   6066 ;src\/Graphics\Graphics.h:247: break;
      001B2E 18 12            [12] 6067 	jr	00113$
                                   6068 ;src\/Graphics\Graphics.h:248: case 5:
      001B30                       6069 00109$:
                                   6070 ;src\/Graphics\Graphics.h:249: bgColor = 0x1e;
      001B30 0E 1E            [ 7] 6071 	ld	c, #0x1e
                                   6072 ;src\/Graphics\Graphics.h:250: break;
      001B32 18 0E            [12] 6073 	jr	00113$
                                   6074 ;src\/Graphics\Graphics.h:251: case 6:
      001B34                       6075 00110$:
                                   6076 ;src\/Graphics\Graphics.h:252: bgColor = 0x17;
      001B34 0E 17            [ 7] 6077 	ld	c, #0x17
                                   6078 ;src\/Graphics\Graphics.h:253: break;
      001B36 18 0A            [12] 6079 	jr	00113$
                                   6080 ;src\/Graphics\Graphics.h:254: case 7:
      001B38                       6081 00111$:
                                   6082 ;src\/Graphics\Graphics.h:255: bgColor = 0x15;
      001B38 0E 15            [ 7] 6083 	ld	c, #0x15
                                   6084 ;src\/Graphics\Graphics.h:256: bgCounter = 0;
      001B3A DD 36 FE 00      [19] 6085 	ld	-2 (ix), #0
                                   6086 ;src\/Graphics\Graphics.h:257: break;
      001B3E 18 02            [12] 6087 	jr	00113$
                                   6088 ;src\/Graphics\Graphics.h:258: default:
      001B40                       6089 00112$:
                                   6090 ;src\/Graphics\Graphics.h:259: bgColor = 0x11;
      001B40 0E 11            [ 7] 6091 	ld	c, #0x11
                                   6092 ;src\/Graphics\Graphics.h:261: }
      001B42                       6093 00113$:
                                   6094 ;src\/Graphics\Graphics.h:262: FILVRM(CLRTBL, 8 * 4, bgColor);
      001B42 C5               [11] 6095 	push	bc
      001B43 79               [ 4] 6096 	ld	a, c
      001B44 F5               [11] 6097 	push	af
      001B45 33               [ 6] 6098 	inc	sp
      001B46 21 20 00         [10] 6099 	ld	hl, #0x0020
      001B49 E5               [11] 6100 	push	hl
      001B4A 21 00 20         [10] 6101 	ld	hl, #0x2000
      001B4D E5               [11] 6102 	push	hl
      001B4E CDr00r00         [17] 6103 	call	_FILVRM
      001B51 F1               [10] 6104 	pop	af
      001B52 F1               [10] 6105 	pop	af
      001B53 33               [ 6] 6106 	inc	sp
      001B54 C1               [10] 6107 	pop	bc
                                   6108 ;src\/Graphics\Graphics.h:263: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001B55 C5               [11] 6109 	push	bc
      001B56 79               [ 4] 6110 	ld	a, c
      001B57 F5               [11] 6111 	push	af
      001B58 33               [ 6] 6112 	inc	sp
      001B59 21 20 00         [10] 6113 	ld	hl, #0x0020
      001B5C E5               [11] 6114 	push	hl
      001B5D 21 00 28         [10] 6115 	ld	hl, #0x2800
      001B60 E5               [11] 6116 	push	hl
      001B61 CDr00r00         [17] 6117 	call	_FILVRM
      001B64 F1               [10] 6118 	pop	af
      001B65 F1               [10] 6119 	pop	af
      001B66 33               [ 6] 6120 	inc	sp
      001B67 C1               [10] 6121 	pop	bc
                                   6122 ;src\/Graphics\Graphics.h:264: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001B68 79               [ 4] 6123 	ld	a, c
      001B69 F5               [11] 6124 	push	af
      001B6A 33               [ 6] 6125 	inc	sp
      001B6B 21 20 00         [10] 6126 	ld	hl, #0x0020
      001B6E E5               [11] 6127 	push	hl
      001B6F 21 00 30         [10] 6128 	ld	hl, #0x3000
      001B72 E5               [11] 6129 	push	hl
      001B73 CDr00r00         [17] 6130 	call	_FILVRM
      001B76 F1               [10] 6131 	pop	af
      001B77 F1               [10] 6132 	pop	af
      001B78 33               [ 6] 6133 	inc	sp
      001B79 18 1A            [12] 6134 	jr	00122$
      001B7B                       6135 00115$:
                                   6136 ;src\/Graphics\Graphics.h:269: DrawString("      ", 26, 10);
      001B7B 11 1A 0A         [10] 6137 	ld	de, #0x0a1a
      001B7E D5               [11] 6138 	push	de
      001B7F 21r24r1C         [10] 6139 	ld	hl, #___str_2
      001B82 E5               [11] 6140 	push	hl
      001B83 CDrCCr12         [17] 6141 	call	_DrawString
      001B86 F1               [10] 6142 	pop	af
      001B87 F1               [10] 6143 	pop	af
                                   6144 ;src\/Graphics\Graphics.h:270: DrawString("      ", 26, 11);
      001B88 11 1A 0B         [10] 6145 	ld	de, #0x0b1a
      001B8B D5               [11] 6146 	push	de
      001B8C 21r24r1C         [10] 6147 	ld	hl, #___str_2
      001B8F E5               [11] 6148 	push	hl
      001B90 CDrCCr12         [17] 6149 	call	_DrawString
      001B93 F1               [10] 6150 	pop	af
      001B94 F1               [10] 6151 	pop	af
      001B95                       6152 00122$:
                                   6153 ;src\/Graphics\Graphics.h:217: for(byte i=0; i < 60; i++) {
      001B95 DD 34 FF         [23] 6154 	inc	-1 (ix)
      001B98 C3rA7r1A         [10] 6155 	jp	00121$
      001B9B                       6156 00119$:
                                   6157 ;src\/Graphics\Graphics.h:276: newLevel = FALSE;
      001B9B 21r07r00         [10] 6158 	ld	hl, #_newLevel
      001B9E 36 00            [10] 6159 	ld	(hl), #0x00
                                   6160 ;src\/Graphics\Graphics.h:279: FILVRM(CLRTBL, 8 * 4, 0x14);
      001BA0 3E 14            [ 7] 6161 	ld	a, #0x14
      001BA2 F5               [11] 6162 	push	af
      001BA3 33               [ 6] 6163 	inc	sp
      001BA4 21 20 00         [10] 6164 	ld	hl, #0x0020
      001BA7 E5               [11] 6165 	push	hl
      001BA8 21 00 20         [10] 6166 	ld	hl, #0x2000
      001BAB E5               [11] 6167 	push	hl
      001BAC CDr00r00         [17] 6168 	call	_FILVRM
      001BAF F1               [10] 6169 	pop	af
      001BB0 F1               [10] 6170 	pop	af
      001BB1 33               [ 6] 6171 	inc	sp
                                   6172 ;src\/Graphics\Graphics.h:280: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001BB2 3E 14            [ 7] 6173 	ld	a, #0x14
      001BB4 F5               [11] 6174 	push	af
      001BB5 33               [ 6] 6175 	inc	sp
      001BB6 21 20 00         [10] 6176 	ld	hl, #0x0020
      001BB9 E5               [11] 6177 	push	hl
      001BBA 21 00 28         [10] 6178 	ld	hl, #0x2800
      001BBD E5               [11] 6179 	push	hl
      001BBE CDr00r00         [17] 6180 	call	_FILVRM
      001BC1 F1               [10] 6181 	pop	af
      001BC2 F1               [10] 6182 	pop	af
      001BC3 33               [ 6] 6183 	inc	sp
                                   6184 ;src\/Graphics\Graphics.h:281: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001BC4 3E 14            [ 7] 6185 	ld	a, #0x14
      001BC6 F5               [11] 6186 	push	af
      001BC7 33               [ 6] 6187 	inc	sp
      001BC8 21 20 00         [10] 6188 	ld	hl, #0x0020
      001BCB E5               [11] 6189 	push	hl
      001BCC 21 00 30         [10] 6190 	ld	hl, #0x3000
      001BCF E5               [11] 6191 	push	hl
      001BD0 CDr00r00         [17] 6192 	call	_FILVRM
      001BD3 F1               [10] 6193 	pop	af
      001BD4 F1               [10] 6194 	pop	af
      001BD5 33               [ 6] 6195 	inc	sp
                                   6196 ;src\/Graphics\Graphics.h:283: DrawString("NEXT", 2, 1);
      001BD6 11 02 01         [10] 6197 	ld	de, #0x0102
      001BD9 D5               [11] 6198 	push	de
      001BDA 21r2Br1C         [10] 6199 	ld	hl, #___str_3
      001BDD E5               [11] 6200 	push	hl
      001BDE CDrCCr12         [17] 6201 	call	_DrawString
      001BE1 F1               [10] 6202 	pop	af
      001BE2 F1               [10] 6203 	pop	af
                                   6204 ;src\/Graphics\Graphics.h:285: DrawString(" LEVEL", 26, 10);
      001BE3 11 1A 0A         [10] 6205 	ld	de, #0x0a1a
      001BE6 D5               [11] 6206 	push	de
      001BE7 21r1Dr1C         [10] 6207 	ld	hl, #___str_1
      001BEA E5               [11] 6208 	push	hl
      001BEB CDrCCr12         [17] 6209 	call	_DrawString
      001BEE F1               [10] 6210 	pop	af
      001BEF F1               [10] 6211 	pop	af
                                   6212 ;src\/Graphics\Graphics.h:286: DrawString("BLOCKS", 26, 18);
      001BF0 11 1A 12         [10] 6213 	ld	de, #0x121a
      001BF3 D5               [11] 6214 	push	de
      001BF4 21r30r1C         [10] 6215 	ld	hl, #___str_4
      001BF7 E5               [11] 6216 	push	hl
      001BF8 CDrCCr12         [17] 6217 	call	_DrawString
      001BFB F1               [10] 6218 	pop	af
      001BFC F1               [10] 6219 	pop	af
                                   6220 ;src\/Graphics\Graphics.h:289: DrawNumber(level, 26, 11);
      001BFD 3Ar06r00         [13] 6221 	ld	a, (#_level + 0)
      001C00 4F               [ 4] 6222 	ld	c, a
      001C01 06 00            [ 7] 6223 	ld	b, #0x00
      001C03 11 1A 0B         [10] 6224 	ld	de, #0x0b1a
      001C06 D5               [11] 6225 	push	de
      001C07 C5               [11] 6226 	push	bc
      001C08 CDrFEr12         [17] 6227 	call	_DrawNumber
      001C0B F1               [10] 6228 	pop	af
      001C0C F1               [10] 6229 	pop	af
                                   6230 ;src\/Graphics\Graphics.h:290: DrawNumber(blocksRemoved, 26, 19);
      001C0D 11 1A 13         [10] 6231 	ld	de, #0x131a
      001C10 D5               [11] 6232 	push	de
      001C11 2Ar04r00         [16] 6233 	ld	hl, (_blocksRemoved)
      001C14 E5               [11] 6234 	push	hl
      001C15 CDrFEr12         [17] 6235 	call	_DrawNumber
                                   6236 ;src\/Graphics\Graphics.h:293: }
      001C18 DD F9            [10] 6237 	ld	sp,ix
      001C1A DD E1            [14] 6238 	pop	ix
      001C1C C9               [10] 6239 	ret
      001C1D                       6240 ___str_1:
      001C1D 20 4C 45 56 45 4C     6241 	.ascii " LEVEL"
      001C23 00                    6242 	.db 0x00
      001C24                       6243 ___str_2:
      001C24 20 20 20 20 20 20     6244 	.ascii "      "
      001C2A 00                    6245 	.db 0x00
      001C2B                       6246 ___str_3:
      001C2B 4E 45 58 54           6247 	.ascii "NEXT"
      001C2F 00                    6248 	.db 0x00
      001C30                       6249 ___str_4:
      001C30 42 4C 4F 43 4B 53     6250 	.ascii "BLOCKS"
      001C36 00                    6251 	.db 0x00
                                   6252 ;src\/Graphics\Graphics.h:295: void DrawBackground() {
                                   6253 ;	---------------------------------
                                   6254 ; Function DrawBackground
                                   6255 ; ---------------------------------
      001C37                       6256 _DrawBackground::
                                   6257 ;src\/Graphics\Graphics.h:297: for(int i = 0; i < 256 * 3; i++) {
      001C37 01 00 00         [10] 6258 	ld	bc, #0x0000
      001C3A                       6259 00103$:
      001C3A 78               [ 4] 6260 	ld	a, b
      001C3B EE 80            [ 7] 6261 	xor	a, #0x80
      001C3D D6 83            [ 7] 6262 	sub	a, #0x83
      001C3F 30 12            [12] 6263 	jr	NC, 00101$
                                   6264 ;src\/Graphics\Graphics.h:298: WRTVRM(NAMTBL + i, EMPTY); // test
      001C41 21 00 18         [10] 6265 	ld	hl, #0x1800
      001C44 09               [11] 6266 	add	hl, bc
      001C45 C5               [11] 6267 	push	bc
      001C46 AF               [ 4] 6268 	xor	a, a
      001C47 F5               [11] 6269 	push	af
      001C48 33               [ 6] 6270 	inc	sp
      001C49 E5               [11] 6271 	push	hl
      001C4A CDr00r00         [17] 6272 	call	_WRTVRM
      001C4D F1               [10] 6273 	pop	af
      001C4E 33               [ 6] 6274 	inc	sp
      001C4F C1               [10] 6275 	pop	bc
                                   6276 ;src\/Graphics\Graphics.h:297: for(int i = 0; i < 256 * 3; i++) {
      001C50 03               [ 6] 6277 	inc	bc
      001C51 18 E7            [12] 6278 	jr	00103$
      001C53                       6279 00101$:
                                   6280 ;src\/Graphics\Graphics.h:301: DrawColumn(7);
      001C53 3E 07            [ 7] 6281 	ld	a, #0x07
      001C55 F5               [11] 6282 	push	af
      001C56 33               [ 6] 6283 	inc	sp
      001C57 CDrB9r13         [17] 6284 	call	_DrawColumn
      001C5A 33               [ 6] 6285 	inc	sp
                                   6286 ;src\/Graphics\Graphics.h:302: DrawColumn(22);
      001C5B 3E 16            [ 7] 6287 	ld	a, #0x16
      001C5D F5               [11] 6288 	push	af
      001C5E 33               [ 6] 6289 	inc	sp
      001C5F CDrB9r13         [17] 6290 	call	_DrawColumn
      001C62 33               [ 6] 6291 	inc	sp
                                   6292 ;src\/Graphics\Graphics.h:304: DrawScore();
                                   6293 ;src\/Graphics\Graphics.h:340: }
      001C63 C3r8Fr1A         [10] 6294 	jp	_DrawScore
                                   6295 ;src\/Graphics\Graphics.h:342: void InitVRAM() {
                                   6296 ;	---------------------------------
                                   6297 ; Function InitVRAM
                                   6298 ; ---------------------------------
      001C66                       6299 _InitVRAM::
      001C66 DD E5            [15] 6300 	push	ix
      001C68 DD 21 00 00      [14] 6301 	ld	ix,#0
      001C6C DD 39            [15] 6302 	add	ix,sp
      001C6E 3B               [ 6] 6303 	dec	sp
                                   6304 ;src\/Graphics\Graphics.h:347: CLIKSW = 0;	// disable keyboard sound
      001C6F 21 00 00         [10] 6305 	ld	hl, #0x0000
      001C72 22 DB F3         [16] 6306 	ld	(_CLIKSW), hl
                                   6307 ;src\/Graphics\Graphics.h:348: SCNCNT = 1; 	// set keyboard scan counter
      001C75 21 F6 F3         [10] 6308 	ld	hl, #_SCNCNT
      001C78 36 01            [10] 6309 	ld	(hl), #0x01
                                   6310 ;src\/Graphics\Graphics.h:350: FORCLR = COLOR_WHITE;
      001C7A 21 E9 F3         [10] 6311 	ld	hl, #_FORCLR
      001C7D 36 0F            [10] 6312 	ld	(hl), #0x0f
                                   6313 ;src\/Graphics\Graphics.h:351: BAKCLR = COLOR_BLACK;
      001C7F 21 EA F3         [10] 6314 	ld	hl, #_BAKCLR
      001C82 36 01            [10] 6315 	ld	(hl), #0x01
                                   6316 ;src\/Graphics\Graphics.h:352: BDRCLR = COLOR_BLACK;
      001C84 21 EB F3         [10] 6317 	ld	hl, #_BDRCLR
      001C87 36 01            [10] 6318 	ld	(hl), #0x01
                                   6319 ;src\/Graphics\Graphics.h:380: WRTVDP(0b0000000111100010);
      001C89 21 E2 01         [10] 6320 	ld	hl, #0x01e2
      001C8C CDr00r00         [17] 6321 	call	_WRTVDP
                                   6322 ;src\/Graphics\Graphics.h:382: INIGRP();	// Set screen 2
      001C8F CDr00r00         [17] 6323 	call	_INIGRP
                                   6324 ;src\/Graphics\Graphics.h:384: DISSCR();	// Disable screen (faster to write)
      001C92 CDr00r00         [17] 6325 	call	_DISSCR
                                   6326 ;src\/Graphics\Graphics.h:388: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001C95 AF               [ 4] 6327 	xor	a, a
      001C96 F5               [11] 6328 	push	af
      001C97 33               [ 6] 6329 	inc	sp
      001C98 21 00 40         [10] 6330 	ld	hl, #0x4000
      001C9B E5               [11] 6331 	push	hl
      001C9C 65               [ 4] 6332 	ld	h, l
      001C9D E5               [11] 6333 	push	hl
      001C9E CDr00r00         [17] 6334 	call	_FILVRM
      001CA1 F1               [10] 6335 	pop	af
                                   6336 ;src\/Graphics\Graphics.h:397: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001CA2 33               [ 6] 6337 	inc	sp
      001CA3 21 A0 04         [10] 6338 	ld	hl,#0x04a0
      001CA6 E3               [19] 6339 	ex	(sp),hl
      001CA7 21rA8r07         [10] 6340 	ld	hl, #_sprite_arrow_0
      001CAA E5               [11] 6341 	push	hl
      001CAB 21 00 38         [10] 6342 	ld	hl, #0x3800
      001CAE E5               [11] 6343 	push	hl
      001CAF CDr00r00         [17] 6344 	call	_LDIRVM
      001CB2 21 06 00         [10] 6345 	ld	hl, #6
      001CB5 39               [11] 6346 	add	hl, sp
      001CB6 F9               [ 6] 6347 	ld	sp, hl
                                   6348 ;src\/Graphics\Graphics.h:403: for(byte i=0; i<32; i++) {
      001CB7 0E 00            [ 7] 6349 	ld	c, #0x00
      001CB9                       6350 00110$:
                                   6351 ;src\/Graphics\Graphics.h:404: WRTVRM(SPRATT + (i * 4), 	192);
      001CB9 79               [ 4] 6352 	ld	a,c
      001CBA FE 20            [ 7] 6353 	cp	a,#0x20
      001CBC 30 18            [12] 6354 	jr	NC, 00101$
      001CBE 26 00            [ 7] 6355 	ld	h, #0x00
      001CC0 6F               [ 4] 6356 	ld	l, a
      001CC1 29               [11] 6357 	add	hl, hl
      001CC2 29               [11] 6358 	add	hl, hl
      001CC3 7C               [ 4] 6359 	ld	a, h
      001CC4 C6 1B            [ 7] 6360 	add	a, #0x1b
      001CC6 67               [ 4] 6361 	ld	h, a
      001CC7 C5               [11] 6362 	push	bc
      001CC8 3E C0            [ 7] 6363 	ld	a, #0xc0
      001CCA F5               [11] 6364 	push	af
      001CCB 33               [ 6] 6365 	inc	sp
      001CCC E5               [11] 6366 	push	hl
      001CCD CDr00r00         [17] 6367 	call	_WRTVRM
      001CD0 F1               [10] 6368 	pop	af
      001CD1 33               [ 6] 6369 	inc	sp
      001CD2 C1               [10] 6370 	pop	bc
                                   6371 ;src\/Graphics\Graphics.h:403: for(byte i=0; i<32; i++) {
      001CD3 0C               [ 4] 6372 	inc	c
      001CD4 18 E3            [12] 6373 	jr	00110$
      001CD6                       6374 00101$:
                                   6375 ;src\/Graphics\Graphics.h:413: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CD6 21 78 01         [10] 6376 	ld	hl, #0x0178
      001CD9 E5               [11] 6377 	push	hl
      001CDA 21r78r04         [10] 6378 	ld	hl, #_pattern_black_0
      001CDD E5               [11] 6379 	push	hl
      001CDE 21 00 00         [10] 6380 	ld	hl, #0x0000
      001CE1 E5               [11] 6381 	push	hl
      001CE2 CDr00r00         [17] 6382 	call	_LDIRVM
      001CE5 21 06 00         [10] 6383 	ld	hl, #6
      001CE8 39               [11] 6384 	add	hl, sp
      001CE9 F9               [ 6] 6385 	ld	sp, hl
                                   6386 ;src\/Graphics\Graphics.h:416: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CEA 21 78 01         [10] 6387 	ld	hl, #0x0178
      001CED E5               [11] 6388 	push	hl
      001CEE 21r78r04         [10] 6389 	ld	hl, #_pattern_black_0
      001CF1 E5               [11] 6390 	push	hl
      001CF2 21 00 08         [10] 6391 	ld	hl, #0x0800
      001CF5 E5               [11] 6392 	push	hl
      001CF6 CDr00r00         [17] 6393 	call	_LDIRVM
      001CF9 21 06 00         [10] 6394 	ld	hl, #6
      001CFC 39               [11] 6395 	add	hl, sp
      001CFD F9               [ 6] 6396 	ld	sp, hl
                                   6397 ;src\/Graphics\Graphics.h:419: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CFE 21 78 01         [10] 6398 	ld	hl, #0x0178
      001D01 E5               [11] 6399 	push	hl
      001D02 21r78r04         [10] 6400 	ld	hl, #_pattern_black_0
      001D05 E5               [11] 6401 	push	hl
      001D06 21 00 10         [10] 6402 	ld	hl, #0x1000
      001D09 E5               [11] 6403 	push	hl
      001D0A CDr00r00         [17] 6404 	call	_LDIRVM
      001D0D 21 06 00         [10] 6405 	ld	hl, #6
      001D10 39               [11] 6406 	add	hl, sp
      001D11 F9               [ 6] 6407 	ld	sp, hl
                                   6408 ;src\/Graphics\Graphics.h:422: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D12 21 00 03         [10] 6409 	ld	hl, #0x0300
      001D15 E5               [11] 6410 	push	hl
      001D16 21r78r01         [10] 6411 	ld	hl, #_FONT
      001D19 E5               [11] 6412 	push	hl
      001D1A 21 78 01         [10] 6413 	ld	hl, #0x0178
      001D1D E5               [11] 6414 	push	hl
      001D1E CDr00r00         [17] 6415 	call	_LDIRVM
      001D21 21 06 00         [10] 6416 	ld	hl, #6
      001D24 39               [11] 6417 	add	hl, sp
      001D25 F9               [ 6] 6418 	ld	sp, hl
                                   6419 ;src\/Graphics\Graphics.h:425: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D26 21 00 03         [10] 6420 	ld	hl, #0x0300
      001D29 E5               [11] 6421 	push	hl
      001D2A 21r78r01         [10] 6422 	ld	hl, #_FONT
      001D2D E5               [11] 6423 	push	hl
      001D2E 21 78 09         [10] 6424 	ld	hl, #0x0978
      001D31 E5               [11] 6425 	push	hl
      001D32 CDr00r00         [17] 6426 	call	_LDIRVM
      001D35 21 06 00         [10] 6427 	ld	hl, #6
      001D38 39               [11] 6428 	add	hl, sp
      001D39 F9               [ 6] 6429 	ld	sp, hl
                                   6430 ;src\/Graphics\Graphics.h:428: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D3A 21 00 03         [10] 6431 	ld	hl, #0x0300
      001D3D E5               [11] 6432 	push	hl
      001D3E 21r78r01         [10] 6433 	ld	hl, #_FONT
      001D41 E5               [11] 6434 	push	hl
      001D42 21 78 11         [10] 6435 	ld	hl, #0x1178
      001D45 E5               [11] 6436 	push	hl
      001D46 CDr00r00         [17] 6437 	call	_LDIRVM
      001D49 21 06 00         [10] 6438 	ld	hl, #6
      001D4C 39               [11] 6439 	add	hl, sp
      001D4D F9               [ 6] 6440 	ld	sp, hl
                                   6441 ;src\/Graphics\Graphics.h:432: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001D4E 0E 00            [ 7] 6442 	ld	c, #0x00
      001D50                       6443 00113$:
                                   6444 ;src\/Graphics\Graphics.h:433: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      001D50 79               [ 4] 6445 	ld	a,c
      001D51 FE 07            [ 7] 6446 	cp	a,#0x07
      001D53 30 20            [12] 6447 	jr	NC, 00102$
      001D55 26 00            [ 7] 6448 	ld	h, #0x00
      001D57 6F               [ 4] 6449 	ld	l, a
      001D58 29               [11] 6450 	add	hl, hl
      001D59 29               [11] 6451 	add	hl, hl
      001D5A 29               [11] 6452 	add	hl, hl
      001D5B 11 70 04         [10] 6453 	ld	de, #0x0470
      001D5E 19               [11] 6454 	add	hl, de
      001D5F C5               [11] 6455 	push	bc
      001D60 11 38 00         [10] 6456 	ld	de, #0x0038
      001D63 D5               [11] 6457 	push	de
      001D64 11rE8r05         [10] 6458 	ld	de, #_pattern_title
      001D67 D5               [11] 6459 	push	de
      001D68 E5               [11] 6460 	push	hl
      001D69 CDr00r00         [17] 6461 	call	_LDIRVM
      001D6C 21 06 00         [10] 6462 	ld	hl, #6
      001D6F 39               [11] 6463 	add	hl, sp
      001D70 F9               [ 6] 6464 	ld	sp, hl
      001D71 C1               [10] 6465 	pop	bc
                                   6466 ;src\/Graphics\Graphics.h:432: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001D72 0C               [ 4] 6467 	inc	c
      001D73 18 DB            [12] 6468 	jr	00113$
      001D75                       6469 00102$:
                                   6470 ;src\/Graphics\Graphics.h:439: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001D75 21 78 01         [10] 6471 	ld	hl, #0x0178
      001D78 E5               [11] 6472 	push	hl
      001D79 21rF0r05         [10] 6473 	ld	hl, #_color_black_0
      001D7C E5               [11] 6474 	push	hl
      001D7D 21 00 20         [10] 6475 	ld	hl, #0x2000
      001D80 E5               [11] 6476 	push	hl
      001D81 CDr00r00         [17] 6477 	call	_LDIRVM
      001D84 21 06 00         [10] 6478 	ld	hl, #6
      001D87 39               [11] 6479 	add	hl, sp
      001D88 F9               [ 6] 6480 	ld	sp, hl
                                   6481 ;src\/Graphics\Graphics.h:441: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001D89 21 78 01         [10] 6482 	ld	hl, #0x0178
      001D8C E5               [11] 6483 	push	hl
      001D8D 21rF0r05         [10] 6484 	ld	hl, #_color_black_0
      001D90 E5               [11] 6485 	push	hl
      001D91 21 00 28         [10] 6486 	ld	hl, #0x2800
      001D94 E5               [11] 6487 	push	hl
      001D95 CDr00r00         [17] 6488 	call	_LDIRVM
      001D98 21 06 00         [10] 6489 	ld	hl, #6
      001D9B 39               [11] 6490 	add	hl, sp
      001D9C F9               [ 6] 6491 	ld	sp, hl
                                   6492 ;src\/Graphics\Graphics.h:443: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001D9D 21 78 01         [10] 6493 	ld	hl, #0x0178
      001DA0 E5               [11] 6494 	push	hl
      001DA1 21rF0r05         [10] 6495 	ld	hl, #_color_black_0
      001DA4 E5               [11] 6496 	push	hl
      001DA5 21 00 30         [10] 6497 	ld	hl, #0x3000
      001DA8 E5               [11] 6498 	push	hl
      001DA9 CDr00r00         [17] 6499 	call	_LDIRVM
      001DAC 21 06 00         [10] 6500 	ld	hl, #6
      001DAF 39               [11] 6501 	add	hl, sp
      001DB0 F9               [ 6] 6502 	ld	sp, hl
                                   6503 ;src\/Graphics\Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DB1 0E 00            [ 7] 6504 	ld	c, #0x00
      001DB3                       6505 00116$:
                                   6506 ;src\/Graphics\Graphics.h:451: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001DB3 79               [ 4] 6507 	ld	a,c
      001DB4 FE 60            [ 7] 6508 	cp	a,#0x60
      001DB6 30 20            [12] 6509 	jr	NC, 00103$
      001DB8 26 00            [ 7] 6510 	ld	h, #0x00
      001DBA 6F               [ 4] 6511 	ld	l, a
      001DBB 29               [11] 6512 	add	hl, hl
      001DBC 29               [11] 6513 	add	hl, hl
      001DBD 29               [11] 6514 	add	hl, hl
      001DBE 11 78 21         [10] 6515 	ld	de, #0x2178
      001DC1 19               [11] 6516 	add	hl, de
      001DC2 C5               [11] 6517 	push	bc
      001DC3 11 08 00         [10] 6518 	ld	de, #0x0008
      001DC6 D5               [11] 6519 	push	de
      001DC7 11r68r07         [10] 6520 	ld	de, #_color_font_2
      001DCA D5               [11] 6521 	push	de
      001DCB E5               [11] 6522 	push	hl
      001DCC CDr00r00         [17] 6523 	call	_LDIRVM
      001DCF 21 06 00         [10] 6524 	ld	hl, #6
      001DD2 39               [11] 6525 	add	hl, sp
      001DD3 F9               [ 6] 6526 	ld	sp, hl
      001DD4 C1               [10] 6527 	pop	bc
                                   6528 ;src\/Graphics\Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DD5 0C               [ 4] 6529 	inc	c
      001DD6 18 DB            [12] 6530 	jr	00116$
      001DD8                       6531 00103$:
                                   6532 ;src\/Graphics\Graphics.h:454: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DD8 0E 00            [ 7] 6533 	ld	c, #0x00
      001DDA                       6534 00119$:
                                   6535 ;src\/Graphics\Graphics.h:455: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001DDA 79               [ 4] 6536 	ld	a,c
      001DDB FE 60            [ 7] 6537 	cp	a,#0x60
      001DDD 30 20            [12] 6538 	jr	NC, 00104$
      001DDF 26 00            [ 7] 6539 	ld	h, #0x00
      001DE1 6F               [ 4] 6540 	ld	l, a
      001DE2 29               [11] 6541 	add	hl, hl
      001DE3 29               [11] 6542 	add	hl, hl
      001DE4 29               [11] 6543 	add	hl, hl
      001DE5 11 78 29         [10] 6544 	ld	de, #0x2978
      001DE8 19               [11] 6545 	add	hl, de
      001DE9 C5               [11] 6546 	push	bc
      001DEA 11 08 00         [10] 6547 	ld	de, #0x0008
      001DED D5               [11] 6548 	push	de
      001DEE 11r68r07         [10] 6549 	ld	de, #_color_font_2
      001DF1 D5               [11] 6550 	push	de
      001DF2 E5               [11] 6551 	push	hl
      001DF3 CDr00r00         [17] 6552 	call	_LDIRVM
      001DF6 21 06 00         [10] 6553 	ld	hl, #6
      001DF9 39               [11] 6554 	add	hl, sp
      001DFA F9               [ 6] 6555 	ld	sp, hl
      001DFB C1               [10] 6556 	pop	bc
                                   6557 ;src\/Graphics\Graphics.h:454: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DFC 0C               [ 4] 6558 	inc	c
      001DFD 18 DB            [12] 6559 	jr	00119$
      001DFF                       6560 00104$:
                                   6561 ;src\/Graphics\Graphics.h:458: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DFF 0E 00            [ 7] 6562 	ld	c, #0x00
      001E01                       6563 00122$:
                                   6564 ;src\/Graphics\Graphics.h:459: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001E01 79               [ 4] 6565 	ld	a,c
      001E02 FE 60            [ 7] 6566 	cp	a,#0x60
      001E04 30 20            [12] 6567 	jr	NC, 00105$
      001E06 26 00            [ 7] 6568 	ld	h, #0x00
      001E08 6F               [ 4] 6569 	ld	l, a
      001E09 29               [11] 6570 	add	hl, hl
      001E0A 29               [11] 6571 	add	hl, hl
      001E0B 29               [11] 6572 	add	hl, hl
      001E0C 11 78 31         [10] 6573 	ld	de, #0x3178
      001E0F 19               [11] 6574 	add	hl, de
      001E10 C5               [11] 6575 	push	bc
      001E11 11 08 00         [10] 6576 	ld	de, #0x0008
      001E14 D5               [11] 6577 	push	de
      001E15 11r68r07         [10] 6578 	ld	de, #_color_font_2
      001E18 D5               [11] 6579 	push	de
      001E19 E5               [11] 6580 	push	hl
      001E1A CDr00r00         [17] 6581 	call	_LDIRVM
      001E1D 21 06 00         [10] 6582 	ld	hl, #6
      001E20 39               [11] 6583 	add	hl, sp
      001E21 F9               [ 6] 6584 	ld	sp, hl
      001E22 C1               [10] 6585 	pop	bc
                                   6586 ;src\/Graphics\Graphics.h:458: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001E23 0C               [ 4] 6587 	inc	c
      001E24 18 DB            [12] 6588 	jr	00122$
      001E26                       6589 00105$:
                                   6590 ;src\/Graphics\Graphics.h:467: for(byte i = 0; i < 10; i++) {
      001E26 0E 00            [ 7] 6591 	ld	c, #0x00
      001E28                       6592 00125$:
                                   6593 ;src\/Graphics\Graphics.h:468: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E28 79               [ 4] 6594 	ld	a,c
      001E29 FE 0A            [ 7] 6595 	cp	a,#0x0a
      001E2B 30 20            [12] 6596 	jr	NC, 00106$
      001E2D 26 00            [ 7] 6597 	ld	h, #0x00
      001E2F 6F               [ 4] 6598 	ld	l, a
      001E30 29               [11] 6599 	add	hl, hl
      001E31 29               [11] 6600 	add	hl, hl
      001E32 29               [11] 6601 	add	hl, hl
      001E33 11 F8 21         [10] 6602 	ld	de, #0x21f8
      001E36 19               [11] 6603 	add	hl, de
      001E37 C5               [11] 6604 	push	bc
      001E38 11 08 00         [10] 6605 	ld	de, #0x0008
      001E3B D5               [11] 6606 	push	de
      001E3C 11r60r07         [10] 6607 	ld	de, #_color_font_1
      001E3F D5               [11] 6608 	push	de
      001E40 E5               [11] 6609 	push	hl
      001E41 CDr00r00         [17] 6610 	call	_LDIRVM
      001E44 21 06 00         [10] 6611 	ld	hl, #6
      001E47 39               [11] 6612 	add	hl, sp
      001E48 F9               [ 6] 6613 	ld	sp, hl
      001E49 C1               [10] 6614 	pop	bc
                                   6615 ;src\/Graphics\Graphics.h:467: for(byte i = 0; i < 10; i++) {
      001E4A 0C               [ 4] 6616 	inc	c
      001E4B 18 DB            [12] 6617 	jr	00125$
      001E4D                       6618 00106$:
                                   6619 ;src\/Graphics\Graphics.h:471: for(byte i = 0; i < 10; i++) {
      001E4D 0E 00            [ 7] 6620 	ld	c, #0x00
      001E4F                       6621 00128$:
                                   6622 ;src\/Graphics\Graphics.h:472: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E4F 79               [ 4] 6623 	ld	a,c
      001E50 FE 0A            [ 7] 6624 	cp	a,#0x0a
      001E52 30 20            [12] 6625 	jr	NC, 00107$
      001E54 26 00            [ 7] 6626 	ld	h, #0x00
      001E56 6F               [ 4] 6627 	ld	l, a
      001E57 29               [11] 6628 	add	hl, hl
      001E58 29               [11] 6629 	add	hl, hl
      001E59 29               [11] 6630 	add	hl, hl
      001E5A 11 F8 29         [10] 6631 	ld	de, #0x29f8
      001E5D 19               [11] 6632 	add	hl, de
      001E5E C5               [11] 6633 	push	bc
      001E5F 11 08 00         [10] 6634 	ld	de, #0x0008
      001E62 D5               [11] 6635 	push	de
      001E63 11r60r07         [10] 6636 	ld	de, #_color_font_1
      001E66 D5               [11] 6637 	push	de
      001E67 E5               [11] 6638 	push	hl
      001E68 CDr00r00         [17] 6639 	call	_LDIRVM
      001E6B 21 06 00         [10] 6640 	ld	hl, #6
      001E6E 39               [11] 6641 	add	hl, sp
      001E6F F9               [ 6] 6642 	ld	sp, hl
      001E70 C1               [10] 6643 	pop	bc
                                   6644 ;src\/Graphics\Graphics.h:471: for(byte i = 0; i < 10; i++) {
      001E71 0C               [ 4] 6645 	inc	c
      001E72 18 DB            [12] 6646 	jr	00128$
      001E74                       6647 00107$:
                                   6648 ;src\/Graphics\Graphics.h:475: for(byte i = 0; i < 10; i++) {
      001E74 DD 36 FF 00      [19] 6649 	ld	-1 (ix), #0
      001E78                       6650 00131$:
      001E78 DD 7E FF         [19] 6651 	ld	a, -1 (ix)
      001E7B D6 0A            [ 7] 6652 	sub	a, #0x0a
      001E7D 30 22            [12] 6653 	jr	NC, 00108$
                                   6654 ;src\/Graphics\Graphics.h:476: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E7F 01r60r07         [10] 6655 	ld	bc, #_color_font_1
      001E82 DD 6E FF         [19] 6656 	ld	l, -1 (ix)
      001E85 26 00            [ 7] 6657 	ld	h, #0x00
      001E87 29               [11] 6658 	add	hl, hl
      001E88 29               [11] 6659 	add	hl, hl
      001E89 29               [11] 6660 	add	hl, hl
      001E8A 11 F8 31         [10] 6661 	ld	de, #0x31f8
      001E8D 19               [11] 6662 	add	hl, de
      001E8E 11 08 00         [10] 6663 	ld	de, #0x0008
      001E91 D5               [11] 6664 	push	de
      001E92 C5               [11] 6665 	push	bc
      001E93 E5               [11] 6666 	push	hl
      001E94 CDr00r00         [17] 6667 	call	_LDIRVM
      001E97 21 06 00         [10] 6668 	ld	hl, #6
      001E9A 39               [11] 6669 	add	hl, sp
      001E9B F9               [ 6] 6670 	ld	sp, hl
                                   6671 ;src\/Graphics\Graphics.h:475: for(byte i = 0; i < 10; i++) {
      001E9C DD 34 FF         [23] 6672 	inc	-1 (ix)
      001E9F 18 D7            [12] 6673 	jr	00131$
      001EA1                       6674 00108$:
                                   6675 ;src\/Graphics\Graphics.h:480: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001EA1 21 38 00         [10] 6676 	ld	hl, #0x0038
      001EA4 E5               [11] 6677 	push	hl
      001EA5 21r70r07         [10] 6678 	ld	hl, #_color_title_1
      001EA8 E5               [11] 6679 	push	hl
      001EA9 21 70 24         [10] 6680 	ld	hl, #0x2470
      001EAC E5               [11] 6681 	push	hl
      001EAD CDr00r00         [17] 6682 	call	_LDIRVM
      001EB0 21 06 00         [10] 6683 	ld	hl, #6
      001EB3 39               [11] 6684 	add	hl, sp
      001EB4 F9               [ 6] 6685 	ld	sp, hl
                                   6686 ;src\/Graphics\Graphics.h:488: ENASCR();	// Enable screen
      001EB5 CDr00r00         [17] 6687 	call	_ENASCR
                                   6688 ;src\/Graphics\Graphics.h:489: }
      001EB8 33               [ 6] 6689 	inc	sp
      001EB9 DD E1            [14] 6690 	pop	ix
      001EBB C9               [10] 6691 	ret
                                   6692 ;src\/Graphics\Graphics.h:491: void DrawBlock(byte col, byte line, byte tile) {
                                   6693 ;	---------------------------------
                                   6694 ; Function DrawBlock
                                   6695 ; ---------------------------------
      001EBC                       6696 _DrawBlock::
      001EBC DD E5            [15] 6697 	push	ix
      001EBE DD 21 00 00      [14] 6698 	ld	ix,#0
      001EC2 DD 39            [15] 6699 	add	ix,sp
                                   6700 ;src\/Graphics\Graphics.h:493: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001EC4 DD 6E 04         [19] 6701 	ld	l, 4 (ix)
      001EC7 26 00            [ 7] 6702 	ld	h, #0x00
      001EC9 29               [11] 6703 	add	hl, hl
      001ECA 4D               [ 4] 6704 	ld	c, l
      001ECB 44               [ 4] 6705 	ld	b, h
      001ECC DD 6E 05         [19] 6706 	ld	l, 5 (ix)
      001ECF 26 00            [ 7] 6707 	ld	h, #0x00
      001ED1 29               [11] 6708 	add	hl, hl
      001ED2 29               [11] 6709 	add	hl, hl
      001ED3 29               [11] 6710 	add	hl, hl
      001ED4 29               [11] 6711 	add	hl, hl
      001ED5 29               [11] 6712 	add	hl, hl
      001ED6 29               [11] 6713 	add	hl, hl
      001ED7 11 0A 18         [10] 6714 	ld	de, #0x180a
      001EDA 19               [11] 6715 	add	hl, de
      001EDB 09               [11] 6716 	add	hl, bc
      001EDC EB               [ 4] 6717 	ex	de, hl
                                   6718 ;src\/Graphics\Graphics.h:495: WRTVRM(baseAddr, tile);
      001EDD D5               [11] 6719 	push	de
      001EDE DD 7E 06         [19] 6720 	ld	a, 6 (ix)
      001EE1 F5               [11] 6721 	push	af
      001EE2 33               [ 6] 6722 	inc	sp
      001EE3 D5               [11] 6723 	push	de
      001EE4 CDr00r00         [17] 6724 	call	_WRTVRM
      001EE7 F1               [10] 6725 	pop	af
      001EE8 33               [ 6] 6726 	inc	sp
      001EE9 D1               [10] 6727 	pop	de
                                   6728 ;src\/Graphics\Graphics.h:496: WRTVRM(baseAddr + 1, tile + 1);
      001EEA DD 4E 06         [19] 6729 	ld	c, 6 (ix)
      001EED 79               [ 4] 6730 	ld	a, c
      001EEE 3C               [ 4] 6731 	inc	a
      001EEF 6B               [ 4] 6732 	ld	l, e
      001EF0 62               [ 4] 6733 	ld	h, d
      001EF1 23               [ 6] 6734 	inc	hl
      001EF2 C5               [11] 6735 	push	bc
      001EF3 D5               [11] 6736 	push	de
      001EF4 F5               [11] 6737 	push	af
      001EF5 33               [ 6] 6738 	inc	sp
      001EF6 E5               [11] 6739 	push	hl
      001EF7 CDr00r00         [17] 6740 	call	_WRTVRM
      001EFA F1               [10] 6741 	pop	af
      001EFB 33               [ 6] 6742 	inc	sp
      001EFC D1               [10] 6743 	pop	de
      001EFD C1               [10] 6744 	pop	bc
                                   6745 ;src\/Graphics\Graphics.h:497: WRTVRM(baseAddr + 32, tile + 2);
      001EFE 41               [ 4] 6746 	ld	b, c
      001EFF 04               [ 4] 6747 	inc	b
      001F00 04               [ 4] 6748 	inc	b
      001F01 21 20 00         [10] 6749 	ld	hl, #0x0020
      001F04 19               [11] 6750 	add	hl, de
      001F05 C5               [11] 6751 	push	bc
      001F06 D5               [11] 6752 	push	de
      001F07 C5               [11] 6753 	push	bc
      001F08 33               [ 6] 6754 	inc	sp
      001F09 E5               [11] 6755 	push	hl
      001F0A CDr00r00         [17] 6756 	call	_WRTVRM
      001F0D F1               [10] 6757 	pop	af
      001F0E 33               [ 6] 6758 	inc	sp
      001F0F D1               [10] 6759 	pop	de
      001F10 C1               [10] 6760 	pop	bc
                                   6761 ;src\/Graphics\Graphics.h:498: WRTVRM(baseAddr + 33, tile + 3);
      001F11 0C               [ 4] 6762 	inc	c
      001F12 0C               [ 4] 6763 	inc	c
      001F13 0C               [ 4] 6764 	inc	c
      001F14 21 21 00         [10] 6765 	ld	hl, #0x0021
      001F17 19               [11] 6766 	add	hl, de
      001F18 79               [ 4] 6767 	ld	a, c
      001F19 F5               [11] 6768 	push	af
      001F1A 33               [ 6] 6769 	inc	sp
      001F1B E5               [11] 6770 	push	hl
      001F1C CDr00r00         [17] 6771 	call	_WRTVRM
      001F1F F1               [10] 6772 	pop	af
      001F20 33               [ 6] 6773 	inc	sp
                                   6774 ;src\/Graphics\Graphics.h:499: }
      001F21 DD E1            [14] 6775 	pop	ix
      001F23 C9               [10] 6776 	ret
                                   6777 ;src\/Graphics\Graphics.h:501: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   6778 ;	---------------------------------
                                   6779 ; Function DrawBlock_SameTile
                                   6780 ; ---------------------------------
      001F24                       6781 _DrawBlock_SameTile::
      001F24 DD E5            [15] 6782 	push	ix
      001F26 DD 21 00 00      [14] 6783 	ld	ix,#0
      001F2A DD 39            [15] 6784 	add	ix,sp
                                   6785 ;src\/Graphics\Graphics.h:503: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001F2C DD 6E 04         [19] 6786 	ld	l, 4 (ix)
      001F2F 26 00            [ 7] 6787 	ld	h, #0x00
      001F31 29               [11] 6788 	add	hl, hl
      001F32 4D               [ 4] 6789 	ld	c, l
      001F33 44               [ 4] 6790 	ld	b, h
      001F34 DD 6E 05         [19] 6791 	ld	l, 5 (ix)
      001F37 26 00            [ 7] 6792 	ld	h, #0x00
      001F39 29               [11] 6793 	add	hl, hl
      001F3A 29               [11] 6794 	add	hl, hl
      001F3B 29               [11] 6795 	add	hl, hl
      001F3C 29               [11] 6796 	add	hl, hl
      001F3D 29               [11] 6797 	add	hl, hl
      001F3E 29               [11] 6798 	add	hl, hl
      001F3F 11 0A 18         [10] 6799 	ld	de, #0x180a
      001F42 19               [11] 6800 	add	hl, de
      001F43 09               [11] 6801 	add	hl, bc
      001F44 EB               [ 4] 6802 	ex	de, hl
                                   6803 ;src\/Graphics\Graphics.h:505: WRTVRM(baseAddr, tile);
      001F45 D5               [11] 6804 	push	de
      001F46 DD 7E 06         [19] 6805 	ld	a, 6 (ix)
      001F49 F5               [11] 6806 	push	af
      001F4A 33               [ 6] 6807 	inc	sp
      001F4B D5               [11] 6808 	push	de
      001F4C CDr00r00         [17] 6809 	call	_WRTVRM
      001F4F F1               [10] 6810 	pop	af
      001F50 33               [ 6] 6811 	inc	sp
      001F51 D1               [10] 6812 	pop	de
                                   6813 ;src\/Graphics\Graphics.h:506: WRTVRM(baseAddr + 1, tile);
      001F52 4B               [ 4] 6814 	ld	c, e
      001F53 42               [ 4] 6815 	ld	b, d
      001F54 03               [ 6] 6816 	inc	bc
      001F55 D5               [11] 6817 	push	de
      001F56 DD 7E 06         [19] 6818 	ld	a, 6 (ix)
      001F59 F5               [11] 6819 	push	af
      001F5A 33               [ 6] 6820 	inc	sp
      001F5B C5               [11] 6821 	push	bc
      001F5C CDr00r00         [17] 6822 	call	_WRTVRM
      001F5F F1               [10] 6823 	pop	af
      001F60 33               [ 6] 6824 	inc	sp
      001F61 D1               [10] 6825 	pop	de
                                   6826 ;src\/Graphics\Graphics.h:507: WRTVRM(baseAddr + 32, tile);
      001F62 21 20 00         [10] 6827 	ld	hl, #0x0020
      001F65 19               [11] 6828 	add	hl, de
      001F66 D5               [11] 6829 	push	de
      001F67 DD 7E 06         [19] 6830 	ld	a, 6 (ix)
      001F6A F5               [11] 6831 	push	af
      001F6B 33               [ 6] 6832 	inc	sp
      001F6C E5               [11] 6833 	push	hl
      001F6D CDr00r00         [17] 6834 	call	_WRTVRM
      001F70 F1               [10] 6835 	pop	af
      001F71 33               [ 6] 6836 	inc	sp
      001F72 D1               [10] 6837 	pop	de
                                   6838 ;src\/Graphics\Graphics.h:508: WRTVRM(baseAddr + 33, tile);
      001F73 21 21 00         [10] 6839 	ld	hl, #0x0021
      001F76 19               [11] 6840 	add	hl, de
      001F77 DD 7E 06         [19] 6841 	ld	a, 6 (ix)
      001F7A F5               [11] 6842 	push	af
      001F7B 33               [ 6] 6843 	inc	sp
      001F7C E5               [11] 6844 	push	hl
      001F7D CDr00r00         [17] 6845 	call	_WRTVRM
      001F80 F1               [10] 6846 	pop	af
      001F81 33               [ 6] 6847 	inc	sp
                                   6848 ;src\/Graphics\Graphics.h:509: }
      001F82 DD E1            [14] 6849 	pop	ix
      001F84 C9               [10] 6850 	ret
                                   6851 ;src\/Graphics\Graphics.h:511: void DrawLine(byte line) {
                                   6852 ;	---------------------------------
                                   6853 ; Function DrawLine
                                   6854 ; ---------------------------------
      001F85                       6855 _DrawLine::
      001F85 DD E5            [15] 6856 	push	ix
      001F87 DD 21 00 00      [14] 6857 	ld	ix,#0
      001F8B DD 39            [15] 6858 	add	ix,sp
                                   6859 ;src\/Graphics\Graphics.h:512: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F8D DD 4E 04         [19] 6860 	ld	c, 4 (ix)
      001F90 06 00            [ 7] 6861 	ld	b, #0x00
      001F92                       6862 00103$:
      001F92 78               [ 4] 6863 	ld	a, b
      001F93 D6 06            [ 7] 6864 	sub	a, #0x06
      001F95 30 23            [12] 6865 	jr	NC, 00105$
                                   6866 ;src\/Graphics\Graphics.h:513: DrawBlock(col, line, playfield[col][line]);
      001F97 58               [ 4] 6867 	ld	e, b
      001F98 16 00            [ 7] 6868 	ld	d, #0x00
      001F9A 6B               [ 4] 6869 	ld	l, e
      001F9B 62               [ 4] 6870 	ld	h, d
      001F9C 29               [11] 6871 	add	hl, hl
      001F9D 19               [11] 6872 	add	hl, de
      001F9E 29               [11] 6873 	add	hl, hl
      001F9F 29               [11] 6874 	add	hl, hl
      001FA0 11r00r00         [10] 6875 	ld	de, #_playfield
      001FA3 19               [11] 6876 	add	hl, de
      001FA4 59               [ 4] 6877 	ld	e, c
      001FA5 16 00            [ 7] 6878 	ld	d, #0x00
      001FA7 19               [11] 6879 	add	hl, de
      001FA8 7E               [ 7] 6880 	ld	a, (hl)
      001FA9 C5               [11] 6881 	push	bc
      001FAA F5               [11] 6882 	push	af
      001FAB 33               [ 6] 6883 	inc	sp
      001FAC 79               [ 4] 6884 	ld	a, c
      001FAD F5               [11] 6885 	push	af
      001FAE 33               [ 6] 6886 	inc	sp
      001FAF C5               [11] 6887 	push	bc
      001FB0 33               [ 6] 6888 	inc	sp
      001FB1 CDrBCr1E         [17] 6889 	call	_DrawBlock
      001FB4 F1               [10] 6890 	pop	af
      001FB5 33               [ 6] 6891 	inc	sp
      001FB6 C1               [10] 6892 	pop	bc
                                   6893 ;src\/Graphics\Graphics.h:512: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001FB7 04               [ 4] 6894 	inc	b
      001FB8 18 D8            [12] 6895 	jr	00103$
      001FBA                       6896 00105$:
                                   6897 ;src\/Graphics\Graphics.h:515: }
      001FBA DD E1            [14] 6898 	pop	ix
      001FBC C9               [10] 6899 	ret
                                   6900 ;src\/Graphics\Graphics.h:517: void DrawPiece(byte line) {
                                   6901 ;	---------------------------------
                                   6902 ; Function DrawPiece
                                   6903 ; ---------------------------------
      001FBD                       6904 _DrawPiece::
                                   6905 ;src\/Graphics\Graphics.h:518: DrawLine(line);
      001FBD 21 02 00         [10] 6906 	ld	hl, #2
      001FC0 39               [11] 6907 	add	hl, sp
      001FC1 7E               [ 7] 6908 	ld	a, (hl)
      001FC2 F5               [11] 6909 	push	af
      001FC3 33               [ 6] 6910 	inc	sp
      001FC4 CDr85r1F         [17] 6911 	call	_DrawLine
      001FC7 33               [ 6] 6912 	inc	sp
                                   6913 ;src\/Graphics\Graphics.h:519: DrawLine(line + 1);
      001FC8 21 02 00         [10] 6914 	ld	hl, #2
      001FCB 39               [11] 6915 	add	hl, sp
      001FCC 46               [ 7] 6916 	ld	b, (hl)
      001FCD 78               [ 4] 6917 	ld	a, b
      001FCE 3C               [ 4] 6918 	inc	a
      001FCF C5               [11] 6919 	push	bc
      001FD0 F5               [11] 6920 	push	af
      001FD1 33               [ 6] 6921 	inc	sp
      001FD2 CDr85r1F         [17] 6922 	call	_DrawLine
      001FD5 33               [ 6] 6923 	inc	sp
      001FD6 C1               [10] 6924 	pop	bc
                                   6925 ;src\/Graphics\Graphics.h:520: DrawLine(line + 2);
      001FD7 04               [ 4] 6926 	inc	b
      001FD8 04               [ 4] 6927 	inc	b
      001FD9 C5               [11] 6928 	push	bc
      001FDA 33               [ 6] 6929 	inc	sp
      001FDB CDr85r1F         [17] 6930 	call	_DrawLine
      001FDE 33               [ 6] 6931 	inc	sp
                                   6932 ;src\/Graphics\Graphics.h:521: }
      001FDF C9               [10] 6933 	ret
                                   6934 ;src\/Graphics\Graphics.h:523: void DrawPlayfield() {
                                   6935 ;	---------------------------------
                                   6936 ; Function DrawPlayfield
                                   6937 ; ---------------------------------
      001FE0                       6938 _DrawPlayfield::
                                   6939 ;src\/Graphics\Graphics.h:524: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FE0 06 00            [ 7] 6940 	ld	b, #0x00
      001FE2                       6941 00103$:
      001FE2 78               [ 4] 6942 	ld	a, b
      001FE3 D6 0C            [ 7] 6943 	sub	a, #0x0c
      001FE5 D0               [11] 6944 	ret	NC
                                   6945 ;src\/Graphics\Graphics.h:525: DrawLine(line);
      001FE6 C5               [11] 6946 	push	bc
      001FE7 C5               [11] 6947 	push	bc
      001FE8 33               [ 6] 6948 	inc	sp
      001FE9 CDr85r1F         [17] 6949 	call	_DrawLine
      001FEC 33               [ 6] 6950 	inc	sp
      001FED C1               [10] 6951 	pop	bc
                                   6952 ;src\/Graphics\Graphics.h:524: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FEE 04               [ 4] 6953 	inc	b
                                   6954 ;src\/Graphics\Graphics.h:527: }
      001FEF 18 F1            [12] 6955 	jr	00103$
                                   6956 ;src\/Sound.h:1: void SoundFx_2() {
                                   6957 ;	---------------------------------
                                   6958 ; Function SoundFx_2
                                   6959 ; ---------------------------------
      001FF1                       6960 _SoundFx_2::
                                   6961 ;src\/Sound.h:2: GICINI();
      001FF1 CDr00r00         [17] 6962 	call	_GICINI
                                   6963 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001FF4 21 08 0F         [10] 6964 	ld	hl, #0x0f08
      001FF7 CDr00r00         [17] 6965 	call	_WRTPSG
                                   6966 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001FFA 0E 00            [ 7] 6967 	ld	c, #0x00
      001FFC                       6968 00104$:
      001FFC 79               [ 4] 6969 	ld	a, c
      001FFD D6 FF            [ 7] 6970 	sub	a, #0xff
      001FFF 30 11            [12] 6971 	jr	NC, 00101$
                                   6972 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      002001 C5               [11] 6973 	push	bc
      002002 21 00 5D         [10] 6974 	ld	hl, #0x5d00
      002005 CDr00r00         [17] 6975 	call	_WRTPSG
      002008 21 01 00         [10] 6976 	ld	hl, #0x0001
      00200B CDr00r00         [17] 6977 	call	_WRTPSG
      00200E C1               [10] 6978 	pop	bc
                                   6979 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      00200F 0C               [ 4] 6980 	inc	c
      002010 18 EA            [12] 6981 	jr	00104$
      002012                       6982 00101$:
                                   6983 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      002012 0E 00            [ 7] 6984 	ld	c, #0x00
      002014                       6985 00107$:
      002014 79               [ 4] 6986 	ld	a, c
      002015 D6 FF            [ 7] 6987 	sub	a, #0xff
      002017 30 11            [12] 6988 	jr	NC, 00102$
                                   6989 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      002019 C5               [11] 6990 	push	bc
      00201A 21 00 2D         [10] 6991 	ld	hl, #0x2d00
      00201D CDr00r00         [17] 6992 	call	_WRTPSG
      002020 21 01 00         [10] 6993 	ld	hl, #0x0001
      002023 CDr00r00         [17] 6994 	call	_WRTPSG
      002026 C1               [10] 6995 	pop	bc
                                   6996 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      002027 0C               [ 4] 6997 	inc	c
      002028 18 EA            [12] 6998 	jr	00107$
      00202A                       6999 00102$:
                                   7000 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      00202A 21 08 00         [10] 7001 	ld	hl, #0x0008
                                   7002 ;src\/Sound.h:30: }
      00202D C3r00r00         [10] 7003 	jp	_WRTPSG
                                   7004 ;src\/Sound.h:32: void SoundFx_1() {
                                   7005 ;	---------------------------------
                                   7006 ; Function SoundFx_1
                                   7007 ; ---------------------------------
      002030                       7008 _SoundFx_1::
                                   7009 ;src\/Sound.h:34: GICINI();
      002030 CDr00r00         [17] 7010 	call	_GICINI
                                   7011 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      002033 21 06 97         [10] 7012 	ld	hl, #0x9706
      002036 CDr00r00         [17] 7013 	call	_WRTPSG
                                   7014 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      002039 21 07 81         [10] 7015 	ld	hl, #0x8107
      00203C CDr00r00         [17] 7016 	call	_WRTPSG
                                   7017 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      00203F 21 08 10         [10] 7018 	ld	hl, #0x1008
      002042 CDr00r00         [17] 7019 	call	_WRTPSG
                                   7020 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      002045 21 0C 13         [10] 7021 	ld	hl, #0x130c
      002048 CDr00r00         [17] 7022 	call	_WRTPSG
                                   7023 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      00204B 21 0D 01         [10] 7024 	ld	hl, #0x010d
                                   7025 ;src\/Sound.h:49: }
      00204E C3r00r00         [10] 7026 	jp	_WRTPSG
                                   7027 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   7028 ;	---------------------------------
                                   7029 ; Function CheckPlayfield
                                   7030 ; ---------------------------------
      002051                       7031 _CheckPlayfield::
      002051 DD E5            [15] 7032 	push	ix
      002053 DD 21 00 00      [14] 7033 	ld	ix,#0
      002057 DD 39            [15] 7034 	add	ix,sp
      002059 21 EF FF         [10] 7035 	ld	hl, #-17
      00205C 39               [11] 7036 	add	hl, sp
      00205D F9               [ 6] 7037 	ld	sp, hl
                                   7038 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      00205E DD 36 EF 00      [19] 7039 	ld	-17 (ix), #0
                                   7040 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002062 0E 00            [ 7] 7041 	ld	c, #0x00
      002064                       7042 00196$:
      002064 79               [ 4] 7043 	ld	a, c
      002065 D6 0C            [ 7] 7044 	sub	a, #0x0c
      002067 30 36            [12] 7045 	jr	NC, 00102$
                                   7046 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002069 DD 36 FF 00      [19] 7047 	ld	-1 (ix), #0
      00206D                       7048 00193$:
      00206D DD 7E FF         [19] 7049 	ld	a, -1 (ix)
      002070 D6 06            [ 7] 7050 	sub	a, #0x06
      002072 30 28            [12] 7051 	jr	NC, 00197$
                                   7052 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      002074 DD 5E FF         [19] 7053 	ld	e, -1 (ix)
      002077 16 00            [ 7] 7054 	ld	d, #0x00
      002079 6B               [ 4] 7055 	ld	l, e
      00207A 62               [ 4] 7056 	ld	h, d
      00207B 29               [11] 7057 	add	hl, hl
      00207C 19               [11] 7058 	add	hl, de
      00207D 29               [11] 7059 	add	hl, hl
      00207E 29               [11] 7060 	add	hl, hl
      00207F EB               [ 4] 7061 	ex	de, hl
      002080 21r48r00         [10] 7062 	ld	hl, #_playfieldTemp
      002083 19               [11] 7063 	add	hl, de
      002084 06 00            [ 7] 7064 	ld	b, #0x00
      002086 09               [11] 7065 	add	hl, bc
      002087 3Er00            [ 7] 7066 	ld	a, #<(_playfield)
      002089 83               [ 4] 7067 	add	a, e
      00208A 5F               [ 4] 7068 	ld	e, a
      00208B 3Es00            [ 7] 7069 	ld	a, #>(_playfield)
      00208D 8A               [ 4] 7070 	adc	a, d
      00208E 57               [ 4] 7071 	ld	d, a
      00208F 7B               [ 4] 7072 	ld	a, e
      002090 81               [ 4] 7073 	add	a, c
      002091 5F               [ 4] 7074 	ld	e, a
      002092 30 01            [12] 7075 	jr	NC, 00615$
      002094 14               [ 4] 7076 	inc	d
      002095                       7077 00615$:
      002095 1A               [ 7] 7078 	ld	a, (de)
      002096 77               [ 7] 7079 	ld	(hl), a
                                   7080 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002097 DD 34 FF         [23] 7081 	inc	-1 (ix)
      00209A 18 D1            [12] 7082 	jr	00193$
      00209C                       7083 00197$:
                                   7084 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00209C 0C               [ 4] 7085 	inc	c
      00209D 18 C5            [12] 7086 	jr	00196$
      00209F                       7087 00102$:
                                   7088 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00209F DD 36 FE 00      [19] 7089 	ld	-2 (ix), #0
      0020A3                       7090 00202$:
      0020A3 DD 7E FE         [19] 7091 	ld	a, -2 (ix)
      0020A6 D6 0C            [ 7] 7092 	sub	a, #0x0c
      0020A8 D2rA7r21         [10] 7093 	jp	NC, 00108$
                                   7094 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0020AB DD 36 FF 02      [19] 7095 	ld	-1 (ix), #0x02
      0020AF                       7096 00199$:
      0020AF DD 7E FF         [19] 7097 	ld	a, -1 (ix)
      0020B2 D6 06            [ 7] 7098 	sub	a, #0x06
      0020B4 D2rA1r21         [10] 7099 	jp	NC, 00203$
                                   7100 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      0020B7 DD 4E FF         [19] 7101 	ld	c, -1 (ix)
      0020BA 06 00            [ 7] 7102 	ld	b, #0x00
      0020BC 69               [ 4] 7103 	ld	l, c
      0020BD 60               [ 4] 7104 	ld	h, b
      0020BE 29               [11] 7105 	add	hl, hl
      0020BF 09               [11] 7106 	add	hl, bc
      0020C0 29               [11] 7107 	add	hl, hl
      0020C1 29               [11] 7108 	add	hl, hl
      0020C2 DD 75 F5         [19] 7109 	ld	-11 (ix), l
      0020C5 DD 74 F6         [19] 7110 	ld	-10 (ix), h
      0020C8 3Er48            [ 7] 7111 	ld	a, #<(_playfieldTemp)
      0020CA DD 86 F5         [19] 7112 	add	a, -11 (ix)
      0020CD 4F               [ 4] 7113 	ld	c, a
      0020CE 3Es00            [ 7] 7114 	ld	a, #>(_playfieldTemp)
      0020D0 DD 8E F6         [19] 7115 	adc	a, -10 (ix)
      0020D3 47               [ 4] 7116 	ld	b, a
      0020D4 79               [ 4] 7117 	ld	a, c
      0020D5 DD 86 FE         [19] 7118 	add	a, -2 (ix)
      0020D8 DD 77 F7         [19] 7119 	ld	-9 (ix), a
      0020DB 78               [ 4] 7120 	ld	a, b
      0020DC CE 00            [ 7] 7121 	adc	a, #0x00
      0020DE DD 77 F8         [19] 7122 	ld	-8 (ix), a
      0020E1 DD 6E F7         [19] 7123 	ld	l, -9 (ix)
      0020E4 DD 66 F8         [19] 7124 	ld	h, -8 (ix)
      0020E7 7E               [ 7] 7125 	ld	a, (hl)
      0020E8 DD 77 F9         [19] 7126 	ld	-7 (ix), a
      0020EB B7               [ 4] 7127 	or	a, a
      0020EC CAr9Br21         [10] 7128 	jp	Z, 00200$
                                   7129 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      0020EF DD 7E FF         [19] 7130 	ld	a, -1 (ix)
      0020F2 DD 77 FD         [19] 7131 	ld	-3 (ix), a
      0020F5 4F               [ 4] 7132 	ld	c, a
      0020F6 0D               [ 4] 7133 	dec	c
      0020F7 0D               [ 4] 7134 	dec	c
      0020F8 79               [ 4] 7135 	ld	a, c
      0020F9 07               [ 4] 7136 	rlca
      0020FA 9F               [ 4] 7137 	sbc	a, a
      0020FB 47               [ 4] 7138 	ld	b, a
      0020FC 69               [ 4] 7139 	ld	l, c
      0020FD 60               [ 4] 7140 	ld	h, b
      0020FE 29               [11] 7141 	add	hl, hl
      0020FF 09               [11] 7142 	add	hl, bc
      002100 29               [11] 7143 	add	hl, hl
      002101 29               [11] 7144 	add	hl, hl
      002102 EB               [ 4] 7145 	ex	de, hl
      002103 21r48r00         [10] 7146 	ld	hl, #_playfieldTemp
      002106 19               [11] 7147 	add	hl, de
      002107 7D               [ 4] 7148 	ld	a, l
      002108 DD 86 FE         [19] 7149 	add	a, -2 (ix)
      00210B DD 77 FA         [19] 7150 	ld	-6 (ix), a
      00210E 7C               [ 4] 7151 	ld	a, h
      00210F CE 00            [ 7] 7152 	adc	a, #0x00
      002111 DD 77 FB         [19] 7153 	ld	-5 (ix), a
      002114 DD 4E FD         [19] 7154 	ld	c, -3 (ix)
      002117 0D               [ 4] 7155 	dec	c
      002118 79               [ 4] 7156 	ld	a, c
      002119 07               [ 4] 7157 	rlca
      00211A 9F               [ 4] 7158 	sbc	a, a
      00211B 47               [ 4] 7159 	ld	b, a
      00211C 69               [ 4] 7160 	ld	l, c
      00211D 60               [ 4] 7161 	ld	h, b
      00211E 29               [11] 7162 	add	hl, hl
      00211F 09               [11] 7163 	add	hl, bc
      002120 29               [11] 7164 	add	hl, hl
      002121 29               [11] 7165 	add	hl, hl
      002122 DD 75 FC         [19] 7166 	ld	-4 (ix), l
      002125 DD 74 FD         [19] 7167 	ld	-3 (ix), h
      002128 3Er48            [ 7] 7168 	ld	a, #<(_playfieldTemp)
      00212A DD 86 FC         [19] 7169 	add	a, -4 (ix)
      00212D 4F               [ 4] 7170 	ld	c, a
      00212E 3Es00            [ 7] 7171 	ld	a, #>(_playfieldTemp)
      002130 DD 8E FD         [19] 7172 	adc	a, -3 (ix)
      002133 47               [ 4] 7173 	ld	b, a
      002134 79               [ 4] 7174 	ld	a, c
      002135 DD 86 FE         [19] 7175 	add	a, -2 (ix)
      002138 4F               [ 4] 7176 	ld	c, a
      002139 30 01            [12] 7177 	jr	NC, 00616$
      00213B 04               [ 4] 7178 	inc	b
      00213C                       7179 00616$:
      00213C DD 6E FA         [19] 7180 	ld	l, -6 (ix)
      00213F DD 66 FB         [19] 7181 	ld	h, -5 (ix)
      002142 6E               [ 7] 7182 	ld	l, (hl)
      002143 0A               [ 7] 7183 	ld	a, (bc)
      002144 67               [ 4] 7184 	ld	h, a
      002145 7D               [ 4] 7185 	ld	a, l
      002146 94               [ 4] 7186 	sub	a, h
      002147 20 52            [12] 7187 	jr	NZ, 00200$
                                   7188 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      002149 DD 7E F9         [19] 7189 	ld	a, -7 (ix)
      00214C 94               [ 4] 7190 	sub	a, h
      00214D 20 4C            [12] 7191 	jr	NZ, 00200$
                                   7192 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      00214F DD 36 EF 01      [19] 7193 	ld	-17 (ix), #0x01
                                   7194 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      002153 3Er00            [ 7] 7195 	ld	a, #<(_playfield)
      002155 83               [ 4] 7196 	add	a, e
      002156 5F               [ 4] 7197 	ld	e, a
      002157 3Es00            [ 7] 7198 	ld	a, #>(_playfield)
      002159 8A               [ 4] 7199 	adc	a, d
      00215A 57               [ 4] 7200 	ld	d, a
      00215B 7B               [ 4] 7201 	ld	a, e
      00215C DD 86 FE         [19] 7202 	add	a, -2 (ix)
      00215F 5F               [ 4] 7203 	ld	e, a
      002160 30 01            [12] 7204 	jr	NC, 00621$
      002162 14               [ 4] 7205 	inc	d
      002163                       7206 00621$:
      002163 7D               [ 4] 7207 	ld	a, l
      002164 CB FF            [ 8] 7208 	set	7, a
      002166 12               [ 7] 7209 	ld	(de), a
                                   7210 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      002167 3Er00            [ 7] 7211 	ld	a, #<(_playfield)
      002169 DD 86 FC         [19] 7212 	add	a, -4 (ix)
      00216C 5F               [ 4] 7213 	ld	e, a
      00216D 3Es00            [ 7] 7214 	ld	a, #>(_playfield)
      00216F DD 8E FD         [19] 7215 	adc	a, -3 (ix)
      002172 57               [ 4] 7216 	ld	d, a
      002173 DD 6E FE         [19] 7217 	ld	l, -2 (ix)
      002176 26 00            [ 7] 7218 	ld	h, #0x00
      002178 19               [11] 7219 	add	hl, de
      002179 0A               [ 7] 7220 	ld	a, (bc)
      00217A CB FF            [ 8] 7221 	set	7, a
      00217C 77               [ 7] 7222 	ld	(hl), a
                                   7223 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00217D 3Er00            [ 7] 7224 	ld	a, #<(_playfield)
      00217F DD 86 F5         [19] 7225 	add	a, -11 (ix)
      002182 4F               [ 4] 7226 	ld	c, a
      002183 3Es00            [ 7] 7227 	ld	a, #>(_playfield)
      002185 DD 8E F6         [19] 7228 	adc	a, -10 (ix)
      002188 47               [ 4] 7229 	ld	b, a
      002189 79               [ 4] 7230 	ld	a, c
      00218A DD 86 FE         [19] 7231 	add	a, -2 (ix)
      00218D 4F               [ 4] 7232 	ld	c, a
      00218E 30 01            [12] 7233 	jr	NC, 00622$
      002190 04               [ 4] 7234 	inc	b
      002191                       7235 00622$:
      002191 DD 6E F7         [19] 7236 	ld	l, -9 (ix)
      002194 DD 66 F8         [19] 7237 	ld	h, -8 (ix)
      002197 7E               [ 7] 7238 	ld	a, (hl)
      002198 CB FF            [ 8] 7239 	set	7, a
      00219A 02               [ 7] 7240 	ld	(bc), a
      00219B                       7241 00200$:
                                   7242 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00219B DD 34 FF         [23] 7243 	inc	-1 (ix)
      00219E C3rAFr20         [10] 7244 	jp	00199$
      0021A1                       7245 00203$:
                                   7246 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0021A1 DD 34 FE         [23] 7247 	inc	-2 (ix)
      0021A4 C3rA3r20         [10] 7248 	jp	00202$
      0021A7                       7249 00108$:
                                   7250 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0021A7 0E 02            [ 7] 7251 	ld	c, #0x02
      0021A9                       7252 00208$:
      0021A9 79               [ 4] 7253 	ld	a, c
      0021AA D6 0C            [ 7] 7254 	sub	a, #0x0c
      0021AC D2r6Er22         [10] 7255 	jp	NC, 00114$
                                   7256 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0021AF DD 36 FF 00      [19] 7257 	ld	-1 (ix), #0
      0021B3                       7258 00205$:
      0021B3 DD 7E FF         [19] 7259 	ld	a, -1 (ix)
      0021B6 D6 06            [ 7] 7260 	sub	a, #0x06
      0021B8 D2r6Ar22         [10] 7261 	jp	NC, 00209$
                                   7262 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      0021BB DD 5E FF         [19] 7263 	ld	e, -1 (ix)
      0021BE 16 00            [ 7] 7264 	ld	d, #0x00
      0021C0 6B               [ 4] 7265 	ld	l, e
      0021C1 62               [ 4] 7266 	ld	h, d
      0021C2 29               [11] 7267 	add	hl, hl
      0021C3 19               [11] 7268 	add	hl, de
      0021C4 29               [11] 7269 	add	hl, hl
      0021C5 29               [11] 7270 	add	hl, hl
      0021C6 DD 75 F7         [19] 7271 	ld	-9 (ix), l
      0021C9 DD 74 F8         [19] 7272 	ld	-8 (ix), h
      0021CC 3Er48            [ 7] 7273 	ld	a, #<(_playfieldTemp)
      0021CE DD 86 F7         [19] 7274 	add	a, -9 (ix)
      0021D1 5F               [ 4] 7275 	ld	e, a
      0021D2 3Es00            [ 7] 7276 	ld	a, #>(_playfieldTemp)
      0021D4 DD 8E F8         [19] 7277 	adc	a, -8 (ix)
      0021D7 57               [ 4] 7278 	ld	d, a
      0021D8 7B               [ 4] 7279 	ld	a, e
      0021D9 81               [ 4] 7280 	add	a, c
      0021DA DD 77 F9         [19] 7281 	ld	-7 (ix), a
      0021DD 7A               [ 4] 7282 	ld	a, d
      0021DE CE 00            [ 7] 7283 	adc	a, #0x00
      0021E0 DD 77 FA         [19] 7284 	ld	-6 (ix), a
      0021E3 DD 6E F9         [19] 7285 	ld	l, -7 (ix)
      0021E6 DD 66 FA         [19] 7286 	ld	h, -6 (ix)
      0021E9 7E               [ 7] 7287 	ld	a, (hl)
      0021EA DD 77 FE         [19] 7288 	ld	-2 (ix), a
      0021ED B7               [ 4] 7289 	or	a, a
      0021EE 28 74            [12] 7290 	jr	Z, 00206$
                                   7291 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      0021F0 DD 71 FD         [19] 7292 	ld	-3 (ix), c
      0021F3 79               [ 4] 7293 	ld	a, c
      0021F4 C6 FE            [ 7] 7294 	add	a, #0xfe
      0021F6 DD 77 FB         [19] 7295 	ld	-5 (ix), a
      0021F9 6F               [ 4] 7296 	ld	l, a
      0021FA 26 00            [ 7] 7297 	ld	h, #0x00
      0021FC 19               [11] 7298 	add	hl, de
      0021FD DD 46 FD         [19] 7299 	ld	b, -3 (ix)
      002200 05               [ 4] 7300 	dec	b
      002201 7B               [ 4] 7301 	ld	a, e
      002202 80               [ 4] 7302 	add	a, b
      002203 5F               [ 4] 7303 	ld	e, a
      002204 30 01            [12] 7304 	jr	NC, 00623$
      002206 14               [ 4] 7305 	inc	d
      002207                       7306 00623$:
      002207 7E               [ 7] 7307 	ld	a, (hl)
      002208 DD 77 FC         [19] 7308 	ld	-4 (ix), a
      00220B 1A               [ 7] 7309 	ld	a, (de)
      00220C 6F               [ 4] 7310 	ld	l, a
      00220D DD 7E FC         [19] 7311 	ld	a, -4 (ix)
      002210 95               [ 4] 7312 	sub	a, l
      002211 20 51            [12] 7313 	jr	NZ, 00206$
                                   7314 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      002213 DD 7E FE         [19] 7315 	ld	a, -2 (ix)
      002216 95               [ 4] 7316 	sub	a, l
      002217 20 4B            [12] 7317 	jr	NZ, 00206$
                                   7318 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      002219 DD 36 EF 01      [19] 7319 	ld	-17 (ix), #0x01
                                   7320 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00221D 3Er00            [ 7] 7321 	ld	a, #<(_playfield)
      00221F DD 86 F7         [19] 7322 	add	a, -9 (ix)
      002222 DD 77 FD         [19] 7323 	ld	-3 (ix), a
      002225 3Es00            [ 7] 7324 	ld	a, #>(_playfield)
      002227 DD 8E F8         [19] 7325 	adc	a, -8 (ix)
      00222A DD 77 FE         [19] 7326 	ld	-2 (ix), a
      00222D DD 7E FD         [19] 7327 	ld	a, -3 (ix)
      002230 DD 86 FB         [19] 7328 	add	a, -5 (ix)
      002233 6F               [ 4] 7329 	ld	l, a
      002234 DD 7E FE         [19] 7330 	ld	a, -2 (ix)
      002237 CE 00            [ 7] 7331 	adc	a, #0x00
      002239 67               [ 4] 7332 	ld	h, a
      00223A DD 7E FC         [19] 7333 	ld	a, -4 (ix)
      00223D CB FF            [ 8] 7334 	set	7, a
      00223F 77               [ 7] 7335 	ld	(hl), a
                                   7336 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      002240 DD 7E FD         [19] 7337 	ld	a, -3 (ix)
      002243 80               [ 4] 7338 	add	a, b
      002244 6F               [ 4] 7339 	ld	l, a
      002245 DD 7E FE         [19] 7340 	ld	a, -2 (ix)
      002248 CE 00            [ 7] 7341 	adc	a, #0x00
      00224A 67               [ 4] 7342 	ld	h, a
      00224B 1A               [ 7] 7343 	ld	a, (de)
      00224C CB FF            [ 8] 7344 	set	7, a
      00224E 77               [ 7] 7345 	ld	(hl), a
                                   7346 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00224F DD 7E FD         [19] 7347 	ld	a, -3 (ix)
      002252 81               [ 4] 7348 	add	a, c
      002253 5F               [ 4] 7349 	ld	e, a
      002254 DD 7E FE         [19] 7350 	ld	a, -2 (ix)
      002257 CE 00            [ 7] 7351 	adc	a, #0x00
      002259 57               [ 4] 7352 	ld	d, a
      00225A DD 6E F9         [19] 7353 	ld	l, -7 (ix)
      00225D DD 66 FA         [19] 7354 	ld	h, -6 (ix)
      002260 7E               [ 7] 7355 	ld	a, (hl)
      002261 CB FF            [ 8] 7356 	set	7, a
      002263 12               [ 7] 7357 	ld	(de), a
      002264                       7358 00206$:
                                   7359 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002264 DD 34 FF         [23] 7360 	inc	-1 (ix)
      002267 C3rB3r21         [10] 7361 	jp	00205$
      00226A                       7362 00209$:
                                   7363 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00226A 0C               [ 4] 7364 	inc	c
      00226B C3rA9r21         [10] 7365 	jp	00208$
      00226E                       7366 00114$:
                                   7367 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00226E DD 36 FE 02      [19] 7368 	ld	-2 (ix), #0x02
      002272                       7369 00214$:
      002272 DD 7E FE         [19] 7370 	ld	a, -2 (ix)
      002275 D6 0C            [ 7] 7371 	sub	a, #0x0c
      002277 D2r15r24         [10] 7372 	jp	NC, 00124$
                                   7373 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00227A DD 36 FF 02      [19] 7374 	ld	-1 (ix), #0x02
      00227E                       7375 00211$:
      00227E DD 7E FF         [19] 7376 	ld	a, -1 (ix)
      002281 D6 06            [ 7] 7377 	sub	a, #0x06
      002283 D2r0Fr24         [10] 7378 	jp	NC, 00215$
                                   7379 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      002286 DD 4E FF         [19] 7380 	ld	c, -1 (ix)
      002289 06 00            [ 7] 7381 	ld	b, #0x00
      00228B 69               [ 4] 7382 	ld	l, c
      00228C 60               [ 4] 7383 	ld	h, b
      00228D 29               [11] 7384 	add	hl, hl
      00228E 09               [11] 7385 	add	hl, bc
      00228F 29               [11] 7386 	add	hl, hl
      002290 29               [11] 7387 	add	hl, hl
      002291 DD 75 F0         [19] 7388 	ld	-16 (ix), l
      002294 DD 74 F1         [19] 7389 	ld	-15 (ix), h
      002297 3Er48            [ 7] 7390 	ld	a, #<(_playfieldTemp)
      002299 DD 86 F0         [19] 7391 	add	a, -16 (ix)
      00229C 4F               [ 4] 7392 	ld	c, a
      00229D 3Es00            [ 7] 7393 	ld	a, #>(_playfieldTemp)
      00229F DD 8E F1         [19] 7394 	adc	a, -15 (ix)
      0022A2 47               [ 4] 7395 	ld	b, a
      0022A3 79               [ 4] 7396 	ld	a, c
      0022A4 DD 86 FE         [19] 7397 	add	a, -2 (ix)
      0022A7 DD 77 F2         [19] 7398 	ld	-14 (ix), a
      0022AA 78               [ 4] 7399 	ld	a, b
      0022AB CE 00            [ 7] 7400 	adc	a, #0x00
      0022AD DD 77 F3         [19] 7401 	ld	-13 (ix), a
      0022B0 DD 6E F2         [19] 7402 	ld	l, -14 (ix)
      0022B3 DD 66 F3         [19] 7403 	ld	h, -13 (ix)
      0022B6 5E               [ 7] 7404 	ld	e, (hl)
                                   7405 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0022B7 DD 56 FF         [19] 7406 	ld	d, -1 (ix)
      0022BA DD 66 FE         [19] 7407 	ld	h, -2 (ix)
      0022BD 6A               [ 4] 7408 	ld	l, d
      0022BE 2D               [ 4] 7409 	dec	l
      0022BF 2D               [ 4] 7410 	dec	l
      0022C0 7C               [ 4] 7411 	ld	a, h
      0022C1 C6 FE            [ 7] 7412 	add	a, #0xfe
      0022C3 DD 77 F4         [19] 7413 	ld	-12 (ix), a
      0022C6 15               [ 4] 7414 	dec	d
      0022C7 7C               [ 4] 7415 	ld	a, h
      0022C8 C6 FF            [ 7] 7416 	add	a, #0xff
      0022CA DD 77 F5         [19] 7417 	ld	-11 (ix), a
      0022CD D5               [11] 7418 	push	de
      0022CE 5D               [ 4] 7419 	ld	e, l
      0022CF 7B               [ 4] 7420 	ld	a, e
      0022D0 07               [ 4] 7421 	rlca
      0022D1 9F               [ 4] 7422 	sbc	a, a
      0022D2 57               [ 4] 7423 	ld	d, a
      0022D3 6B               [ 4] 7424 	ld	l, e
      0022D4 62               [ 4] 7425 	ld	h, d
      0022D5 29               [11] 7426 	add	hl, hl
      0022D6 19               [11] 7427 	add	hl, de
      0022D7 29               [11] 7428 	add	hl, hl
      0022D8 29               [11] 7429 	add	hl, hl
      0022D9 D1               [10] 7430 	pop	de
      0022DA DD 75 F6         [19] 7431 	ld	-10 (ix), l
      0022DD DD 74 F7         [19] 7432 	ld	-9 (ix), h
      0022E0 D5               [11] 7433 	push	de
      0022E1 5A               [ 4] 7434 	ld	e, d
      0022E2 7B               [ 4] 7435 	ld	a, e
      0022E3 07               [ 4] 7436 	rlca
      0022E4 9F               [ 4] 7437 	sbc	a, a
      0022E5 57               [ 4] 7438 	ld	d, a
      0022E6 6B               [ 4] 7439 	ld	l, e
      0022E7 62               [ 4] 7440 	ld	h, d
      0022E8 29               [11] 7441 	add	hl, hl
      0022E9 19               [11] 7442 	add	hl, de
      0022EA 29               [11] 7443 	add	hl, hl
      0022EB 29               [11] 7444 	add	hl, hl
      0022EC D1               [10] 7445 	pop	de
      0022ED DD 75 F8         [19] 7446 	ld	-8 (ix), l
      0022F0 DD 74 F9         [19] 7447 	ld	-7 (ix), h
      0022F3 3Er48            [ 7] 7448 	ld	a, #<(_playfieldTemp)
      0022F5 DD 86 F6         [19] 7449 	add	a, -10 (ix)
      0022F8 DD 77 FA         [19] 7450 	ld	-6 (ix), a
      0022FB 3Es00            [ 7] 7451 	ld	a, #>(_playfieldTemp)
      0022FD DD 8E F7         [19] 7452 	adc	a, -9 (ix)
      002300 DD 77 FB         [19] 7453 	ld	-5 (ix), a
      002303 3Er48            [ 7] 7454 	ld	a, #<(_playfieldTemp)
      002305 DD 86 F8         [19] 7455 	add	a, -8 (ix)
      002308 57               [ 4] 7456 	ld	d, a
      002309 3Es00            [ 7] 7457 	ld	a, #>(_playfieldTemp)
      00230B DD 8E F9         [19] 7458 	adc	a, -7 (ix)
      00230E 6F               [ 4] 7459 	ld	l, a
      00230F 7A               [ 4] 7460 	ld	a, d
      002310 DD 86 F5         [19] 7461 	add	a, -11 (ix)
      002313 DD 77 FC         [19] 7462 	ld	-4 (ix), a
      002316 7D               [ 4] 7463 	ld	a, l
      002317 CE 00            [ 7] 7464 	adc	a, #0x00
      002319 DD 77 FD         [19] 7465 	ld	-3 (ix), a
                                   7466 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      00231C 7B               [ 4] 7467 	ld	a, e
      00231D B7               [ 4] 7468 	or	a, a
      00231E 28 74            [12] 7469 	jr	Z, 00116$
                                   7470 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      002320 DD 7E FA         [19] 7471 	ld	a, -6 (ix)
      002323 DD 86 F4         [19] 7472 	add	a, -12 (ix)
      002326 6F               [ 4] 7473 	ld	l, a
      002327 DD 7E FB         [19] 7474 	ld	a, -5 (ix)
      00232A CE 00            [ 7] 7475 	adc	a, #0x00
      00232C 67               [ 4] 7476 	ld	h, a
      00232D 56               [ 7] 7477 	ld	d, (hl)
      00232E DD 6E FC         [19] 7478 	ld	l, -4 (ix)
      002331 DD 66 FD         [19] 7479 	ld	h, -3 (ix)
      002334 6E               [ 7] 7480 	ld	l, (hl)
      002335 7A               [ 4] 7481 	ld	a, d
      002336 95               [ 4] 7482 	sub	a, l
      002337 20 5B            [12] 7483 	jr	NZ, 00116$
                                   7484 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      002339 7B               [ 4] 7485 	ld	a, e
      00233A 95               [ 4] 7486 	sub	a, l
      00233B 20 57            [12] 7487 	jr	NZ, 00116$
                                   7488 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      00233D DD 36 EF 01      [19] 7489 	ld	-17 (ix), #0x01
                                   7490 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      002341 3Er00            [ 7] 7491 	ld	a, #<(_playfield)
      002343 DD 86 F6         [19] 7492 	add	a, -10 (ix)
      002346 5F               [ 4] 7493 	ld	e, a
      002347 3Es00            [ 7] 7494 	ld	a, #>(_playfield)
      002349 DD 8E F7         [19] 7495 	adc	a, -9 (ix)
      00234C 67               [ 4] 7496 	ld	h, a
      00234D 7B               [ 4] 7497 	ld	a, e
      00234E DD 86 F4         [19] 7498 	add	a, -12 (ix)
      002351 6F               [ 4] 7499 	ld	l, a
      002352 30 01            [12] 7500 	jr	NC, 00632$
      002354 24               [ 4] 7501 	inc	h
      002355                       7502 00632$:
      002355 CB FA            [ 8] 7503 	set	7, d
      002357 72               [ 7] 7504 	ld	(hl), d
                                   7505 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      002358 3Er00            [ 7] 7506 	ld	a, #<(_playfield)
      00235A DD 86 F8         [19] 7507 	add	a, -8 (ix)
      00235D 5F               [ 4] 7508 	ld	e, a
      00235E 3Es00            [ 7] 7509 	ld	a, #>(_playfield)
      002360 DD 8E F9         [19] 7510 	adc	a, -7 (ix)
      002363 57               [ 4] 7511 	ld	d, a
      002364 7B               [ 4] 7512 	ld	a, e
      002365 DD 86 F5         [19] 7513 	add	a, -11 (ix)
      002368 5F               [ 4] 7514 	ld	e, a
      002369 30 01            [12] 7515 	jr	NC, 00633$
      00236B 14               [ 4] 7516 	inc	d
      00236C                       7517 00633$:
      00236C DD 6E FC         [19] 7518 	ld	l, -4 (ix)
      00236F DD 66 FD         [19] 7519 	ld	h, -3 (ix)
      002372 7E               [ 7] 7520 	ld	a, (hl)
      002373 CB FF            [ 8] 7521 	set	7, a
      002375 12               [ 7] 7522 	ld	(de), a
                                   7523 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      002376 3Er00            [ 7] 7524 	ld	a, #<(_playfield)
      002378 DD 86 F0         [19] 7525 	add	a, -16 (ix)
      00237B 5F               [ 4] 7526 	ld	e, a
      00237C 3Es00            [ 7] 7527 	ld	a, #>(_playfield)
      00237E DD 8E F1         [19] 7528 	adc	a, -15 (ix)
      002381 57               [ 4] 7529 	ld	d, a
      002382 7B               [ 4] 7530 	ld	a, e
      002383 DD 86 FE         [19] 7531 	add	a, -2 (ix)
      002386 5F               [ 4] 7532 	ld	e, a
      002387 30 01            [12] 7533 	jr	NC, 00634$
      002389 14               [ 4] 7534 	inc	d
      00238A                       7535 00634$:
      00238A DD 6E F2         [19] 7536 	ld	l, -14 (ix)
      00238D DD 66 F3         [19] 7537 	ld	h, -13 (ix)
      002390 7E               [ 7] 7538 	ld	a, (hl)
      002391 CB FF            [ 8] 7539 	set	7, a
      002393 12               [ 7] 7540 	ld	(de), a
      002394                       7541 00116$:
                                   7542 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      002394 DD 6E F4         [19] 7543 	ld	l, -12 (ix)
      002397 26 00            [ 7] 7544 	ld	h, #0x00
      002399 09               [11] 7545 	add	hl, bc
      00239A 4E               [ 7] 7546 	ld	c, (hl)
      00239B 79               [ 4] 7547 	ld	a, c
      00239C B7               [ 4] 7548 	or	a, a
      00239D 28 6A            [12] 7549 	jr	Z, 00212$
                                   7550 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      00239F DD 7E FA         [19] 7551 	ld	a, -6 (ix)
      0023A2 DD 86 FE         [19] 7552 	add	a, -2 (ix)
      0023A5 5F               [ 4] 7553 	ld	e, a
      0023A6 DD 7E FB         [19] 7554 	ld	a, -5 (ix)
      0023A9 CE 00            [ 7] 7555 	adc	a, #0x00
      0023AB 57               [ 4] 7556 	ld	d, a
      0023AC DD 6E FC         [19] 7557 	ld	l, -4 (ix)
      0023AF DD 66 FD         [19] 7558 	ld	h, -3 (ix)
      0023B2 46               [ 7] 7559 	ld	b, (hl)
      0023B3 1A               [ 7] 7560 	ld	a, (de)
      0023B4 B8               [ 4] 7561 	cp	a, b
      0023B5 20 52            [12] 7562 	jr	NZ, 00212$
                                   7563 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0023B7 91               [ 4] 7564 	sub	a, c
      0023B8 20 4F            [12] 7565 	jr	NZ, 00212$
                                   7566 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      0023BA DD 36 EF 01      [19] 7567 	ld	-17 (ix), #0x01
                                   7568 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0023BE 3Er00            [ 7] 7569 	ld	a, #<(_playfield)
      0023C0 DD 86 F0         [19] 7570 	add	a, -16 (ix)
      0023C3 47               [ 4] 7571 	ld	b, a
      0023C4 3Es00            [ 7] 7572 	ld	a, #>(_playfield)
      0023C6 DD 8E F1         [19] 7573 	adc	a, -15 (ix)
      0023C9 67               [ 4] 7574 	ld	h, a
      0023CA 78               [ 4] 7575 	ld	a, b
      0023CB DD 86 F4         [19] 7576 	add	a, -12 (ix)
      0023CE 6F               [ 4] 7577 	ld	l, a
      0023CF 30 01            [12] 7578 	jr	NC, 00639$
      0023D1 24               [ 4] 7579 	inc	h
      0023D2                       7580 00639$:
      0023D2 CB F9            [ 8] 7581 	set	7, c
      0023D4 71               [ 7] 7582 	ld	(hl), c
                                   7583 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0023D5 3Er00            [ 7] 7584 	ld	a, #<(_playfield)
      0023D7 DD 86 F8         [19] 7585 	add	a, -8 (ix)
      0023DA 4F               [ 4] 7586 	ld	c, a
      0023DB 3Es00            [ 7] 7587 	ld	a, #>(_playfield)
      0023DD DD 8E F9         [19] 7588 	adc	a, -7 (ix)
      0023E0 47               [ 4] 7589 	ld	b, a
      0023E1 79               [ 4] 7590 	ld	a, c
      0023E2 DD 86 F5         [19] 7591 	add	a, -11 (ix)
      0023E5 4F               [ 4] 7592 	ld	c, a
      0023E6 30 01            [12] 7593 	jr	NC, 00640$
      0023E8 04               [ 4] 7594 	inc	b
      0023E9                       7595 00640$:
      0023E9 DD 6E FC         [19] 7596 	ld	l, -4 (ix)
      0023EC DD 66 FD         [19] 7597 	ld	h, -3 (ix)
      0023EF 7E               [ 7] 7598 	ld	a, (hl)
      0023F0 CB FF            [ 8] 7599 	set	7, a
      0023F2 02               [ 7] 7600 	ld	(bc), a
                                   7601 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0023F3 3Er00            [ 7] 7602 	ld	a, #<(_playfield)
      0023F5 DD 86 F6         [19] 7603 	add	a, -10 (ix)
      0023F8 4F               [ 4] 7604 	ld	c, a
      0023F9 3Es00            [ 7] 7605 	ld	a, #>(_playfield)
      0023FB DD 8E F7         [19] 7606 	adc	a, -9 (ix)
      0023FE 47               [ 4] 7607 	ld	b, a
      0023FF DD 6E FE         [19] 7608 	ld	l, -2 (ix)
      002402 26 00            [ 7] 7609 	ld	h, #0x00
      002404 09               [11] 7610 	add	hl, bc
      002405 1A               [ 7] 7611 	ld	a, (de)
      002406 CB FF            [ 8] 7612 	set	7, a
      002408 77               [ 7] 7613 	ld	(hl), a
      002409                       7614 00212$:
                                   7615 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      002409 DD 34 FF         [23] 7616 	inc	-1 (ix)
      00240C C3r7Er22         [10] 7617 	jp	00211$
      00240F                       7618 00215$:
                                   7619 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00240F DD 34 FE         [23] 7620 	inc	-2 (ix)
      002412 C3r72r22         [10] 7621 	jp	00214$
      002415                       7622 00124$:
                                   7623 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      002415 DD 7E EF         [19] 7624 	ld	a, -17 (ix)
      002418 B7               [ 4] 7625 	or	a, a
      002419 CArC1r27         [10] 7626 	jp	Z, 00190$
                                   7627 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      00241C DD 36 F5 FF      [19] 7628 	ld	-11 (ix), #0xff
      002420 DD 36 F6 00      [19] 7629 	ld	-10 (ix), #0
                                   7630 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      002424 DD 36 F7 05      [19] 7631 	ld	-9 (ix), #0x05
      002428 DD 36 F8 00      [19] 7632 	ld	-8 (ix), #0
                                   7633 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      00242C DD 36 F9 0B      [19] 7634 	ld	-7 (ix), #0x0b
      002430 DD 36 FA 00      [19] 7635 	ld	-6 (ix), #0
                                   7636 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      002434 CDr48r0C         [17] 7637 	call	_HideArrowSprite
                                   7638 ;src\/CheckPlayfield.h:116: SoundFx_2();
      002437 CDrF1r1F         [17] 7639 	call	_SoundFx_2
                                   7640 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      00243A DD 36 FB 00      [19] 7641 	ld	-5 (ix), #0
                                   7642 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00243E DD 36 FF 00      [19] 7643 	ld	-1 (ix), #0
      002442                       7644 00220$:
      002442 DD 7E FF         [19] 7645 	ld	a, -1 (ix)
      002445 D6 0C            [ 7] 7646 	sub	a, #0x0c
      002447 30 5F            [12] 7647 	jr	NC, 00291$
                                   7648 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002449 DD 5E FB         [19] 7649 	ld	e, -5 (ix)
      00244C 06 00            [ 7] 7650 	ld	b, #0x00
      00244E                       7651 00217$:
      00244E 78               [ 4] 7652 	ld	a, b
      00244F D6 06            [ 7] 7653 	sub	a, #0x06
      002451 30 4D            [12] 7654 	jr	NC, 00320$
                                   7655 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002453 D5               [11] 7656 	push	de
      002454 58               [ 4] 7657 	ld	e, b
      002455 16 00            [ 7] 7658 	ld	d, #0x00
      002457 6B               [ 4] 7659 	ld	l, e
      002458 62               [ 4] 7660 	ld	h, d
      002459 29               [11] 7661 	add	hl, hl
      00245A 19               [11] 7662 	add	hl, de
      00245B 29               [11] 7663 	add	hl, hl
      00245C 29               [11] 7664 	add	hl, hl
      00245D 11r00r00         [10] 7665 	ld	de, #_playfield
      002460 19               [11] 7666 	add	hl, de
      002461 D1               [10] 7667 	pop	de
      002462 7D               [ 4] 7668 	ld	a, l
      002463 DD 86 FF         [19] 7669 	add	a, -1 (ix)
      002466 6F               [ 4] 7670 	ld	l, a
      002467 30 01            [12] 7671 	jr	NC, 00641$
      002469 24               [ 4] 7672 	inc	h
      00246A                       7673 00641$:
      00246A 7E               [ 7] 7674 	ld	a, (hl)
      00246B 07               [ 4] 7675 	rlca
      00246C 30 2F            [12] 7676 	jr	NC, 00218$
                                   7677 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      00246E 1C               [ 4] 7678 	inc	e
                                   7679 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      00246F 78               [ 4] 7680 	ld	a, b
      002470 DD 96 F7         [19] 7681 	sub	a, -9 (ix)
      002473 30 03            [12] 7682 	jr	NC, 00126$
      002475 DD 70 F7         [19] 7683 	ld	-9 (ix), b
      002478                       7684 00126$:
                                   7685 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      002478 DD 7E F8         [19] 7686 	ld	a, -8 (ix)
      00247B 90               [ 4] 7687 	sub	a, b
      00247C 30 03            [12] 7688 	jr	NC, 00128$
      00247E DD 70 F8         [19] 7689 	ld	-8 (ix), b
      002481                       7690 00128$:
                                   7691 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      002481 DD 7E FF         [19] 7692 	ld	a, -1 (ix)
      002484 DD 96 F9         [19] 7693 	sub	a, -7 (ix)
      002487 30 06            [12] 7694 	jr	NC, 00130$
      002489 DD 7E FF         [19] 7695 	ld	a, -1 (ix)
      00248C DD 77 F9         [19] 7696 	ld	-7 (ix), a
      00248F                       7697 00130$:
                                   7698 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      00248F DD 7E FA         [19] 7699 	ld	a, -6 (ix)
      002492 DD 96 FF         [19] 7700 	sub	a, -1 (ix)
      002495 30 06            [12] 7701 	jr	NC, 00218$
      002497 DD 7E FF         [19] 7702 	ld	a, -1 (ix)
      00249A DD 77 FA         [19] 7703 	ld	-6 (ix), a
      00249D                       7704 00218$:
                                   7705 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00249D 04               [ 4] 7706 	inc	b
      00249E 18 AE            [12] 7707 	jr	00217$
      0024A0                       7708 00320$:
      0024A0 DD 73 FB         [19] 7709 	ld	-5 (ix), e
                                   7710 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0024A3 DD 34 FF         [23] 7711 	inc	-1 (ix)
      0024A6 18 9A            [12] 7712 	jr	00220$
                                   7713 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      0024A8                       7714 00291$:
      0024A8 DD 36 FF 48      [19] 7715 	ld	-1 (ix), #0x48
      0024AC                       7716 00166$:
      0024AC DD 4E FF         [19] 7717 	ld	c, -1 (ix)
      0024AF DD 35 FF         [23] 7718 	dec	-1 (ix)
      0024B2 79               [ 4] 7719 	ld	a, c
      0024B3 B7               [ 4] 7720 	or	a, a
      0024B4 CAr5Cr26         [10] 7721 	jp	Z, 00168$
                                   7722 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      0024B7 ED 5B 9E FC      [20] 7723 	ld	de, (_JIFFY)
                                   7724 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      0024BB                       7725 00137$:
      0024BB 2A 9E FC         [16] 7726 	ld	hl, (_JIFFY)
      0024BE BF               [ 4] 7727 	cp	a, a
      0024BF ED 52            [15] 7728 	sbc	hl, de
      0024C1 28 F8            [12] 7729 	jr	Z, 00137$
                                   7730 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      0024C3 DD 7E FB         [19] 7731 	ld	a, -5 (ix)
      0024C6 D6 03            [ 7] 7732 	sub	a, #0x03
      0024C8 DAr7Ar25         [10] 7733 	jp	C, 00301$
                                   7734 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      0024CB DD 7E FB         [19] 7735 	ld	a, -5 (ix)
      0024CE D6 07            [ 7] 7736 	sub	a, #0x07
      0024D0 38 04            [12] 7737 	jr	C, 00141$
      0024D2 DD 36 FB 07      [19] 7738 	ld	-5 (ix), #0x07
      0024D6                       7739 00141$:
                                   7740 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      0024D6 DD 7E F5         [19] 7741 	ld	a, -11 (ix)
      0024D9 3C               [ 4] 7742 	inc	a
      0024DA 20 7B            [12] 7743 	jr	NZ, 00143$
                                   7744 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      0024DC DD 6E F8         [19] 7745 	ld	l, -8 (ix)
      0024DF 26 00            [ 7] 7746 	ld	h, #0x00
      0024E1 29               [11] 7747 	add	hl, hl
      0024E2 29               [11] 7748 	add	hl, hl
      0024E3 29               [11] 7749 	add	hl, hl
      0024E4 29               [11] 7750 	add	hl, hl
      0024E5 DD 5E F7         [19] 7751 	ld	e, -9 (ix)
      0024E8 16 00            [ 7] 7752 	ld	d, #0x00
      0024EA EB               [ 4] 7753 	ex	de, hl
      0024EB 29               [11] 7754 	add	hl, hl
      0024EC 29               [11] 7755 	add	hl, hl
      0024ED 29               [11] 7756 	add	hl, hl
      0024EE 29               [11] 7757 	add	hl, hl
      0024EF EB               [ 4] 7758 	ex	de, hl
      0024F0 BF               [ 4] 7759 	cp	a, a
      0024F1 ED 52            [15] 7760 	sbc	hl, de
      0024F3 4D               [ 4] 7761 	ld	c, l
      0024F4 44               [ 4] 7762 	ld	b, h
      0024F5 CB 7C            [ 8] 7763 	bit	7, h
      0024F7 28 03            [12] 7764 	jr	Z, 00239$
      0024F9 4D               [ 4] 7765 	ld	c, l
      0024FA 44               [ 4] 7766 	ld	b, h
      0024FB 03               [ 6] 7767 	inc	bc
      0024FC                       7768 00239$:
      0024FC CB 28            [ 8] 7769 	sra	b
      0024FE CB 19            [ 8] 7770 	rr	c
      002500 79               [ 4] 7771 	ld	a, c
      002501 C6 50            [ 7] 7772 	add	a, #0x50
      002503 DD 6E F7         [19] 7773 	ld	l, -9 (ix)
      002506 29               [11] 7774 	add	hl, hl
      002507 29               [11] 7775 	add	hl, hl
      002508 29               [11] 7776 	add	hl, hl
      002509 29               [11] 7777 	add	hl, hl
      00250A 85               [ 4] 7778 	add	a, l
      00250B DD 77 F5         [19] 7779 	ld	-11 (ix), a
                                   7780 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      00250E DD 6E F9         [19] 7781 	ld	l, -7 (ix)
      002511 26 00            [ 7] 7782 	ld	h, #0x00
      002513 29               [11] 7783 	add	hl, hl
      002514 29               [11] 7784 	add	hl, hl
      002515 29               [11] 7785 	add	hl, hl
      002516 29               [11] 7786 	add	hl, hl
      002517 DD 5E FA         [19] 7787 	ld	e, -6 (ix)
      00251A 16 00            [ 7] 7788 	ld	d, #0x00
      00251C EB               [ 4] 7789 	ex	de, hl
      00251D 29               [11] 7790 	add	hl, hl
      00251E 29               [11] 7791 	add	hl, hl
      00251F 29               [11] 7792 	add	hl, hl
      002520 29               [11] 7793 	add	hl, hl
      002521 EB               [ 4] 7794 	ex	de, hl
      002522 BF               [ 4] 7795 	cp	a, a
      002523 ED 52            [15] 7796 	sbc	hl, de
      002525 4D               [ 4] 7797 	ld	c, l
      002526 44               [ 4] 7798 	ld	b, h
      002527 CB 7C            [ 8] 7799 	bit	7, h
      002529 28 03            [12] 7800 	jr	Z, 00240$
      00252B 23               [ 6] 7801 	inc	hl
      00252C 4D               [ 4] 7802 	ld	c, l
      00252D 44               [ 4] 7803 	ld	b, h
      00252E                       7804 00240$:
      00252E CB 28            [ 8] 7805 	sra	b
      002530 CB 19            [ 8] 7806 	rr	c
      002532 DD 7E FA         [19] 7807 	ld	a, -6 (ix)
      002535 87               [ 4] 7808 	add	a, a
      002536 87               [ 4] 7809 	add	a, a
      002537 87               [ 4] 7810 	add	a, a
      002538 87               [ 4] 7811 	add	a, a
      002539 81               [ 4] 7812 	add	a, c
      00253A DD 77 F6         [19] 7813 	ld	-10 (ix), a
                                   7814 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      00253D 26 01            [ 7] 7815 	ld	h, #0x01
      00253F DD 6E F6         [19] 7816 	ld	l, -10 (ix)
      002542 E5               [11] 7817 	push	hl
      002543 DD 66 F5         [19] 7818 	ld	h, -11 (ix)
      002546 DD 6E 04         [19] 7819 	ld	l, 4 (ix)
      002549 E5               [11] 7820 	push	hl
      00254A DD 7E FB         [19] 7821 	ld	a, -5 (ix)
      00254D F5               [11] 7822 	push	af
      00254E 33               [ 6] 7823 	inc	sp
      00254F CDr56r0C         [17] 7824 	call	_DrawHitSprite
      002552 F1               [10] 7825 	pop	af
      002553 F1               [10] 7826 	pop	af
      002554 33               [ 6] 7827 	inc	sp
      002555 18 23            [12] 7828 	jr	00301$
      002557                       7829 00143$:
                                   7830 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      002557 DD 4E FF         [19] 7831 	ld	c, -1 (ix)
      00255A 3E 48            [ 7] 7832 	ld	a, #0x48
      00255C 91               [ 4] 7833 	sub	a, c
      00255D 4F               [ 4] 7834 	ld	c, a
      00255E DD 7E F6         [19] 7835 	ld	a, -10 (ix)
      002561 91               [ 4] 7836 	sub	a, c
      002562 26 00            [ 7] 7837 	ld	h, #0x00
      002564 E5               [11] 7838 	push	hl
      002565 33               [ 6] 7839 	inc	sp
      002566 F5               [11] 7840 	push	af
      002567 33               [ 6] 7841 	inc	sp
      002568 DD 66 F5         [19] 7842 	ld	h, -11 (ix)
      00256B DD 6E 04         [19] 7843 	ld	l, 4 (ix)
      00256E E5               [11] 7844 	push	hl
      00256F DD 7E FB         [19] 7845 	ld	a, -5 (ix)
      002572 F5               [11] 7846 	push	af
      002573 33               [ 6] 7847 	inc	sp
      002574 CDr56r0C         [17] 7848 	call	_DrawHitSprite
      002577 F1               [10] 7849 	pop	af
      002578 F1               [10] 7850 	pop	af
      002579 33               [ 6] 7851 	inc	sp
                                   7852 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00257A                       7853 00301$:
      00257A 3E 0C            [ 7] 7854 	ld	a, #0x0c
      00257C DD 96 FF         [19] 7855 	sub	a, -1 (ix)
      00257F 3E 00            [ 7] 7856 	ld	a, #0x00
      002581 17               [ 4] 7857 	rla
      002582 5F               [ 4] 7858 	ld	e, a
      002583 3E 09            [ 7] 7859 	ld	a, #0x09
      002585 DD 96 FF         [19] 7860 	sub	a, -1 (ix)
      002588 3E 00            [ 7] 7861 	ld	a, #0x00
      00258A 17               [ 4] 7862 	rla
      00258B 4F               [ 4] 7863 	ld	c, a
      00258C 3E 06            [ 7] 7864 	ld	a, #0x06
      00258E DD 96 FF         [19] 7865 	sub	a, -1 (ix)
      002591 3E 00            [ 7] 7866 	ld	a, #0x00
      002593 17               [ 4] 7867 	rla
      002594 DD 77 FC         [19] 7868 	ld	-4 (ix), a
      002597 3E 03            [ 7] 7869 	ld	a, #0x03
      002599 DD 96 FF         [19] 7870 	sub	a, -1 (ix)
      00259C 3E 00            [ 7] 7871 	ld	a, #0x00
      00259E 17               [ 4] 7872 	rla
      00259F DD 77 FD         [19] 7873 	ld	-3 (ix), a
      0025A2 06 00            [ 7] 7874 	ld	b, #0x00
      0025A4                       7875 00226$:
      0025A4 78               [ 4] 7876 	ld	a, b
      0025A5 D6 0C            [ 7] 7877 	sub	a, #0x0c
      0025A7 D2rACr24         [10] 7878 	jp	NC, 00166$
                                   7879 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0025AA 16 00            [ 7] 7880 	ld	d, #0x00
      0025AC                       7881 00223$:
      0025AC 7A               [ 4] 7882 	ld	a, d
      0025AD D6 06            [ 7] 7883 	sub	a, #0x06
      0025AF D2r58r26         [10] 7884 	jp	NC, 00227$
                                   7885 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0025B2 D5               [11] 7886 	push	de
      0025B3 5A               [ 4] 7887 	ld	e, d
      0025B4 16 00            [ 7] 7888 	ld	d, #0x00
      0025B6 6B               [ 4] 7889 	ld	l, e
      0025B7 62               [ 4] 7890 	ld	h, d
      0025B8 29               [11] 7891 	add	hl, hl
      0025B9 19               [11] 7892 	add	hl, de
      0025BA 29               [11] 7893 	add	hl, hl
      0025BB 29               [11] 7894 	add	hl, hl
      0025BC 11r00r00         [10] 7895 	ld	de, #_playfield
      0025BF 19               [11] 7896 	add	hl, de
      0025C0 D1               [10] 7897 	pop	de
      0025C1 7D               [ 4] 7898 	ld	a, l
      0025C2 80               [ 4] 7899 	add	a, b
      0025C3 6F               [ 4] 7900 	ld	l, a
      0025C4 30 01            [12] 7901 	jr	NC, 00646$
      0025C6 24               [ 4] 7902 	inc	h
      0025C7                       7903 00646$:
      0025C7 7E               [ 7] 7904 	ld	a, (hl)
      0025C8 DD 77 FE         [19] 7905 	ld	-2 (ix), a
      0025CB DD CB FE 7E      [20] 7906 	bit	7, -2 (ix)
      0025CF CAr54r26         [10] 7907 	jp	Z,00224$
                                   7908 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      0025D2 7B               [ 4] 7909 	ld	a, e
      0025D3 B7               [ 4] 7910 	or	a, a
      0025D4 28 2C            [12] 7911 	jr	Z, 00160$
                                   7912 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      0025D6 2A 9E FC         [16] 7913 	ld	hl, (_JIFFY)
      0025D9 7D               [ 4] 7914 	ld	a, l
      0025DA E6 03            [ 7] 7915 	and	a, #0x03
      0025DC 28 14            [12] 7916 	jr	Z, 00148$
                                   7917 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0025DE DD 7E FE         [19] 7918 	ld	a, -2 (ix)
      0025E1 CB BF            [ 8] 7919 	res	7, a
      0025E3 C5               [11] 7920 	push	bc
      0025E4 D5               [11] 7921 	push	de
      0025E5 F5               [11] 7922 	push	af
      0025E6 33               [ 6] 7923 	inc	sp
      0025E7 4A               [ 4] 7924 	ld	c, d
      0025E8 C5               [11] 7925 	push	bc
      0025E9 CDrBCr1E         [17] 7926 	call	_DrawBlock
      0025EC F1               [10] 7927 	pop	af
      0025ED 33               [ 6] 7928 	inc	sp
      0025EE D1               [10] 7929 	pop	de
      0025EF C1               [10] 7930 	pop	bc
      0025F0 18 62            [12] 7931 	jr	00224$
      0025F2                       7932 00148$:
                                   7933 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      0025F2 C5               [11] 7934 	push	bc
      0025F3 D5               [11] 7935 	push	de
      0025F4 AF               [ 4] 7936 	xor	a, a
      0025F5 F5               [11] 7937 	push	af
      0025F6 33               [ 6] 7938 	inc	sp
      0025F7 4A               [ 4] 7939 	ld	c, d
      0025F8 C5               [11] 7940 	push	bc
      0025F9 CDrBCr1E         [17] 7941 	call	_DrawBlock
      0025FC F1               [10] 7942 	pop	af
      0025FD 33               [ 6] 7943 	inc	sp
      0025FE D1               [10] 7944 	pop	de
      0025FF C1               [10] 7945 	pop	bc
      002600 18 52            [12] 7946 	jr	00224$
      002602                       7947 00160$:
                                   7948 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      002602 79               [ 4] 7949 	ld	a, c
      002603 B7               [ 4] 7950 	or	a, a
      002604 28 11            [12] 7951 	jr	Z, 00157$
      002606 C5               [11] 7952 	push	bc
      002607 D5               [11] 7953 	push	de
      002608 3E 2A            [ 7] 7954 	ld	a, #0x2a
      00260A F5               [11] 7955 	push	af
      00260B 33               [ 6] 7956 	inc	sp
      00260C 4A               [ 4] 7957 	ld	c, d
      00260D C5               [11] 7958 	push	bc
      00260E CDr24r1F         [17] 7959 	call	_DrawBlock_SameTile
      002611 F1               [10] 7960 	pop	af
      002612 33               [ 6] 7961 	inc	sp
      002613 D1               [10] 7962 	pop	de
      002614 C1               [10] 7963 	pop	bc
      002615 18 3D            [12] 7964 	jr	00224$
      002617                       7965 00157$:
                                   7966 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      002617 DD 7E FC         [19] 7967 	ld	a, -4 (ix)
      00261A B7               [ 4] 7968 	or	a, a
      00261B 28 11            [12] 7969 	jr	Z, 00154$
      00261D C5               [11] 7970 	push	bc
      00261E D5               [11] 7971 	push	de
      00261F 3E 2B            [ 7] 7972 	ld	a, #0x2b
      002621 F5               [11] 7973 	push	af
      002622 33               [ 6] 7974 	inc	sp
      002623 4A               [ 4] 7975 	ld	c, d
      002624 C5               [11] 7976 	push	bc
      002625 CDr24r1F         [17] 7977 	call	_DrawBlock_SameTile
      002628 F1               [10] 7978 	pop	af
      002629 33               [ 6] 7979 	inc	sp
      00262A D1               [10] 7980 	pop	de
      00262B C1               [10] 7981 	pop	bc
      00262C 18 26            [12] 7982 	jr	00224$
      00262E                       7983 00154$:
                                   7984 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00262E DD 7E FD         [19] 7985 	ld	a, -3 (ix)
      002631 B7               [ 4] 7986 	or	a, a
      002632 28 11            [12] 7987 	jr	Z, 00151$
      002634 C5               [11] 7988 	push	bc
      002635 D5               [11] 7989 	push	de
      002636 3E 2C            [ 7] 7990 	ld	a, #0x2c
      002638 F5               [11] 7991 	push	af
      002639 33               [ 6] 7992 	inc	sp
      00263A 4A               [ 4] 7993 	ld	c, d
      00263B C5               [11] 7994 	push	bc
      00263C CDr24r1F         [17] 7995 	call	_DrawBlock_SameTile
      00263F F1               [10] 7996 	pop	af
      002640 33               [ 6] 7997 	inc	sp
      002641 D1               [10] 7998 	pop	de
      002642 C1               [10] 7999 	pop	bc
      002643 18 0F            [12] 8000 	jr	00224$
      002645                       8001 00151$:
                                   8002 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      002645 C5               [11] 8003 	push	bc
      002646 D5               [11] 8004 	push	de
      002647 3E 2D            [ 7] 8005 	ld	a, #0x2d
      002649 F5               [11] 8006 	push	af
      00264A 33               [ 6] 8007 	inc	sp
      00264B 4A               [ 4] 8008 	ld	c, d
      00264C C5               [11] 8009 	push	bc
      00264D CDr24r1F         [17] 8010 	call	_DrawBlock_SameTile
      002650 F1               [10] 8011 	pop	af
      002651 33               [ 6] 8012 	inc	sp
      002652 D1               [10] 8013 	pop	de
      002653 C1               [10] 8014 	pop	bc
      002654                       8015 00224$:
                                   8016 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002654 14               [ 4] 8017 	inc	d
      002655 C3rACr25         [10] 8018 	jp	00223$
      002658                       8019 00227$:
                                   8020 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002658 04               [ 4] 8021 	inc	b
      002659 C3rA4r25         [10] 8022 	jp	00226$
      00265C                       8023 00168$:
                                   8024 ;src\/CheckPlayfield.h:196: HideHitSprite();
      00265C CDr68r0E         [17] 8025 	call	_HideHitSprite
                                   8026 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00265F DD 36 FD 00      [19] 8027 	ld	-3 (ix), #0
      002663                       8028 00235$:
      002663 DD 7E FD         [19] 8029 	ld	a, -3 (ix)
      002666 D6 0C            [ 7] 8030 	sub	a, #0x0c
      002668 D2r46r27         [10] 8031 	jp	NC, 00177$
                                   8032 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00266B DD 36 FE 00      [19] 8033 	ld	-2 (ix), #0
      00266F                       8034 00232$:
      00266F DD 7E FE         [19] 8035 	ld	a, -2 (ix)
      002672 D6 06            [ 7] 8036 	sub	a, #0x06
      002674 D2r40r27         [10] 8037 	jp	NC, 00236$
                                   8038 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002677 DD 4E FE         [19] 8039 	ld	c, -2 (ix)
      00267A 06 00            [ 7] 8040 	ld	b, #0x00
      00267C 69               [ 4] 8041 	ld	l, c
      00267D 60               [ 4] 8042 	ld	h, b
      00267E 29               [11] 8043 	add	hl, hl
      00267F 09               [11] 8044 	add	hl, bc
      002680 29               [11] 8045 	add	hl, hl
      002681 29               [11] 8046 	add	hl, hl
      002682 EB               [ 4] 8047 	ex	de, hl
      002683 21r00r00         [10] 8048 	ld	hl, #_playfield
      002686 19               [11] 8049 	add	hl, de
      002687 DD 75 FB         [19] 8050 	ld	-5 (ix), l
      00268A DD 74 FC         [19] 8051 	ld	-4 (ix), h
      00268D DD 7E FB         [19] 8052 	ld	a, -5 (ix)
      002690 DD 86 FD         [19] 8053 	add	a, -3 (ix)
      002693 4F               [ 4] 8054 	ld	c, a
      002694 DD 7E FC         [19] 8055 	ld	a, -4 (ix)
      002697 CE 00            [ 7] 8056 	adc	a, #0x00
      002699 47               [ 4] 8057 	ld	b, a
      00269A 0A               [ 7] 8058 	ld	a, (bc)
      00269B 07               [ 4] 8059 	rlca
      00269C D2r3Ar27         [10] 8060 	jp	NC,00233$
                                   8061 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      00269F 2Ar04r00         [16] 8062 	ld	hl, (_blocksRemoved)
      0026A2 23               [ 6] 8063 	inc	hl
      0026A3 22r04r00         [16] 8064 	ld	(_blocksRemoved), hl
                                   8065 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      0026A6 DD 7E FB         [19] 8066 	ld	a, -5 (ix)
      0026A9 DD 77 F7         [19] 8067 	ld	-9 (ix), a
      0026AC DD 7E FC         [19] 8068 	ld	a, -4 (ix)
      0026AF DD 77 F8         [19] 8069 	ld	-8 (ix), a
      0026B2 DD 7E FD         [19] 8070 	ld	a, -3 (ix)
      0026B5 DD 77 FF         [19] 8071 	ld	-1 (ix), a
      0026B8                       8072 00229$:
      0026B8 DD 7E FF         [19] 8073 	ld	a, -1 (ix)
      0026BB B7               [ 4] 8074 	or	a, a
      0026BC 28 7C            [12] 8075 	jr	Z, 00233$
                                   8076 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      0026BE 0E 01            [ 7] 8077 	ld	c, #0x01
                                   8078 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0026C0 DD 7E FF         [19] 8079 	ld	a, -1 (ix)
      0026C3 DD 77 FC         [19] 8080 	ld	-4 (ix), a
      0026C6 3D               [ 4] 8081 	dec	a
      0026C7 DD 86 F7         [19] 8082 	add	a, -9 (ix)
      0026CA 5F               [ 4] 8083 	ld	e, a
      0026CB 3E 00            [ 7] 8084 	ld	a, #0x00
      0026CD DD 8E F8         [19] 8085 	adc	a, -8 (ix)
      0026D0 57               [ 4] 8086 	ld	d, a
      0026D1 1A               [ 7] 8087 	ld	a, (de)
      0026D2 07               [ 4] 8088 	rlca
      0026D3 30 02            [12] 8089 	jr	NC, 00170$
      0026D5 0E 02            [ 7] 8090 	ld	c, #0x02
      0026D7                       8091 00170$:
                                   8092 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0026D7 DD 7E FC         [19] 8093 	ld	a, -4 (ix)
      0026DA 3D               [ 4] 8094 	dec	a
      0026DB 3D               [ 4] 8095 	dec	a
      0026DC DD 86 F7         [19] 8096 	add	a, -9 (ix)
      0026DF 5F               [ 4] 8097 	ld	e, a
      0026E0 3E 00            [ 7] 8098 	ld	a, #0x00
      0026E2 DD 8E F8         [19] 8099 	adc	a, -8 (ix)
      0026E5 57               [ 4] 8100 	ld	d, a
      0026E6 1A               [ 7] 8101 	ld	a, (de)
      0026E7 07               [ 4] 8102 	rlca
      0026E8 30 01            [12] 8103 	jr	NC, 00172$
      0026EA 0C               [ 4] 8104 	inc	c
      0026EB                       8105 00172$:
                                   8106 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      0026EB DD 7E F7         [19] 8107 	ld	a, -9 (ix)
      0026EE DD 86 FF         [19] 8108 	add	a, -1 (ix)
      0026F1 DD 77 F9         [19] 8109 	ld	-7 (ix), a
      0026F4 DD 7E F8         [19] 8110 	ld	a, -8 (ix)
      0026F7 CE 00            [ 7] 8111 	adc	a, #0x00
      0026F9 DD 77 FA         [19] 8112 	ld	-6 (ix), a
      0026FC DD 6E FF         [19] 8113 	ld	l, -1 (ix)
      0026FF 26 00            [ 7] 8114 	ld	h, #0x00
      002701 59               [ 4] 8115 	ld	e, c
      002702 16 00            [ 7] 8116 	ld	d, #0x00
      002704 BF               [ 4] 8117 	cp	a, a
      002705 ED 52            [15] 8118 	sbc	hl, de
      002707 CB 7C            [ 8] 8119 	bit	7, h
      002709 20 18            [12] 8120 	jr	NZ, 00243$
      00270B DD 7E FF         [19] 8121 	ld	a, -1 (ix)
      00270E 91               [ 4] 8122 	sub	a, c
      00270F DD 86 F7         [19] 8123 	add	a, -9 (ix)
      002712 4F               [ 4] 8124 	ld	c, a
      002713 3E 00            [ 7] 8125 	ld	a, #0x00
      002715 DD 8E F8         [19] 8126 	adc	a, -8 (ix)
      002718 47               [ 4] 8127 	ld	b, a
      002719 0A               [ 7] 8128 	ld	a, (bc)
      00271A DD 77 FB         [19] 8129 	ld	-5 (ix), a
      00271D DD 36 FC 00      [19] 8130 	ld	-4 (ix), #0
      002721 18 07            [12] 8131 	jr	00244$
      002723                       8132 00243$:
      002723 AF               [ 4] 8133 	xor	a, a
      002724 DD 77 FB         [19] 8134 	ld	-5 (ix), a
      002727 DD 77 FC         [19] 8135 	ld	-4 (ix), a
      00272A                       8136 00244$:
      00272A DD 7E FB         [19] 8137 	ld	a, -5 (ix)
      00272D DD 6E F9         [19] 8138 	ld	l, -7 (ix)
      002730 DD 66 FA         [19] 8139 	ld	h, -6 (ix)
      002733 77               [ 7] 8140 	ld	(hl), a
                                   8141 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002734 DD 35 FF         [23] 8142 	dec	-1 (ix)
      002737 C3rB8r26         [10] 8143 	jp	00229$
      00273A                       8144 00233$:
                                   8145 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00273A DD 34 FE         [23] 8146 	inc	-2 (ix)
      00273D C3r6Fr26         [10] 8147 	jp	00232$
      002740                       8148 00236$:
                                   8149 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002740 DD 34 FD         [23] 8150 	inc	-3 (ix)
      002743 C3r63r26         [10] 8151 	jp	00235$
      002746                       8152 00177$:
                                   8153 ;src\/CheckPlayfield.h:227: oldLevel = level;
      002746 3Ar06r00         [13] 8154 	ld	a, (#_level + 0)
      002749 4F               [ 4] 8155 	ld	c, a
                                   8156 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      00274A 21r04r00         [10] 8157 	ld	hl, #_blocksRemoved
      00274D 46               [ 7] 8158 	ld	b, (hl)
      00274E 23               [ 6] 8159 	inc	hl
      00274F 56               [ 7] 8160 	ld	d, (hl)
      002750 78               [ 4] 8161 	ld	a, b
      002751 D6 5A            [ 7] 8162 	sub	a, #0x5a
      002753 7A               [ 4] 8163 	ld	a, d
      002754 DE 00            [ 7] 8164 	sbc	a, #0x00
      002756 38 19            [12] 8165 	jr	C, 00185$
                                   8166 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      002758 C5               [11] 8167 	push	bc
      002759 21 1E 00         [10] 8168 	ld	hl, #0x001e
      00275C E5               [11] 8169 	push	hl
      00275D 58               [ 4] 8170 	ld	e, b
      00275E D5               [11] 8171 	push	de
      00275F CDr00r00         [17] 8172 	call	__divuint
      002762 F1               [10] 8173 	pop	af
      002763 F1               [10] 8174 	pop	af
      002764 C1               [10] 8175 	pop	bc
      002765 7D               [ 4] 8176 	ld	a, l
      002766 3C               [ 4] 8177 	inc	a
      002767 32r06r00         [13] 8178 	ld	(_level+0), a
                                   8179 ;src\/CheckPlayfield.h:230: speed = 15;
      00276A 21r96r00         [10] 8180 	ld	hl, #_speed
      00276D 36 0F            [10] 8181 	ld	(hl), #0x0f
      00276F 18 32            [12] 8182 	jr	00186$
      002771                       8183 00185$:
                                   8184 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      002771 78               [ 4] 8185 	ld	a, b
      002772 D6 3C            [ 7] 8186 	sub	a, #0x3c
      002774 7A               [ 4] 8187 	ld	a, d
      002775 DE 00            [ 7] 8188 	sbc	a, #0x00
      002777 38 0C            [12] 8189 	jr	C, 00182$
                                   8190 ;src\/CheckPlayfield.h:234: level = 3;
      002779 21r06r00         [10] 8191 	ld	hl, #_level
      00277C 36 03            [10] 8192 	ld	(hl), #0x03
                                   8193 ;src\/CheckPlayfield.h:235: speed = 30;
      00277E 21r96r00         [10] 8194 	ld	hl, #_speed
      002781 36 1E            [10] 8195 	ld	(hl), #0x1e
      002783 18 1E            [12] 8196 	jr	00186$
      002785                       8197 00182$:
                                   8198 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      002785 78               [ 4] 8199 	ld	a, b
      002786 D6 1E            [ 7] 8200 	sub	a, #0x1e
      002788 7A               [ 4] 8201 	ld	a, d
      002789 DE 00            [ 7] 8202 	sbc	a, #0x00
      00278B 38 0C            [12] 8203 	jr	C, 00179$
                                   8204 ;src\/CheckPlayfield.h:238: level = 2;
      00278D 21r06r00         [10] 8205 	ld	hl, #_level
      002790 36 02            [10] 8206 	ld	(hl), #0x02
                                   8207 ;src\/CheckPlayfield.h:239: speed = 45;
      002792 21r96r00         [10] 8208 	ld	hl, #_speed
      002795 36 2D            [10] 8209 	ld	(hl), #0x2d
      002797 18 0A            [12] 8210 	jr	00186$
      002799                       8211 00179$:
                                   8212 ;src\/CheckPlayfield.h:242: level = 1;
      002799 21r06r00         [10] 8213 	ld	hl, #_level
      00279C 36 01            [10] 8214 	ld	(hl), #0x01
                                   8215 ;src\/CheckPlayfield.h:243: speed = 60;
      00279E 21r96r00         [10] 8216 	ld	hl, #_speed
      0027A1 36 3C            [10] 8217 	ld	(hl), #0x3c
      0027A3                       8218 00186$:
                                   8219 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      0027A3 3Ar06r00         [13] 8220 	ld	a,(#_level + 0)
      0027A6 91               [ 4] 8221 	sub	a, c
      0027A7 28 05            [12] 8222 	jr	Z, 00188$
                                   8223 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      0027A9 21r07r00         [10] 8224 	ld	hl, #_newLevel
      0027AC 36 01            [10] 8225 	ld	(hl), #0x01
      0027AE                       8226 00188$:
                                   8227 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      0027AE CDrE0r1F         [17] 8228 	call	_DrawPlayfield
                                   8229 ;src\/CheckPlayfield.h:257: DrawScore();
      0027B1 CDr8Fr1A         [17] 8230 	call	_DrawScore
                                   8231 ;src\/CheckPlayfield.h:259: iteration++;
      0027B4 DD 34 04         [23] 8232 	inc	4 (ix)
                                   8233 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      0027B7 DD 7E 04         [19] 8234 	ld	a, 4 (ix)
      0027BA F5               [11] 8235 	push	af
      0027BB 33               [ 6] 8236 	inc	sp
      0027BC CDr51r20         [17] 8237 	call	_CheckPlayfield
      0027BF 18 03            [12] 8238 	jr	00237$
      0027C1                       8239 00190$:
                                   8240 ;src\/CheckPlayfield.h:264: DrawScore();
      0027C1 CDr8Fr1A         [17] 8241 	call	_DrawScore
      0027C4                       8242 00237$:
                                   8243 ;src\/CheckPlayfield.h:266: }
      0027C4 DD F9            [10] 8244 	ld	sp, ix
      0027C6 DD E1            [14] 8245 	pop	ix
      0027C8 C9               [10] 8246 	ret
                                   8247 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   8248 ;	---------------------------------
                                   8249 ; Function RandomIndex
                                   8250 ; ---------------------------------
      0027C9                       8251 _RandomIndex::
                                   8252 ;src\/GameLogic.h:5: do {
      0027C9                       8253 00101$:
                                   8254 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      0027C9 CDrA3r00         [17] 8255 	call	_GetRandom
      0027CC 7D               [ 4] 8256 	ld	a, l
      0027CD E6 07            [ 7] 8257 	and	a, #0x07
      0027CF 6F               [ 4] 8258 	ld	l, a
                                   8259 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      0027D0 3E 04            [ 7] 8260 	ld	a, #0x04
      0027D2 95               [ 4] 8261 	sub	a, l
      0027D3 38 F4            [12] 8262 	jr	C, 00101$
                                   8263 ;src\/GameLogic.h:10: return random;
                                   8264 ;src\/GameLogic.h:11: }
      0027D5 C9               [10] 8265 	ret
                                   8266 ;src\/GameLogic.h:13: void RandomPiece() {
                                   8267 ;	---------------------------------
                                   8268 ; Function RandomPiece
                                   8269 ; ---------------------------------
      0027D6                       8270 _RandomPiece::
                                   8271 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      0027D6 3Ar93r00         [13] 8272 	ld	a,(#_nextTopPiece + 0)
      0027D9 32r90r00         [13] 8273 	ld	(#_topPiece),a
                                   8274 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      0027DC 3Ar94r00         [13] 8275 	ld	a,(#_nextMidPiece + 0)
      0027DF 32r91r00         [13] 8276 	ld	(#_midPiece),a
                                   8277 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      0027E2 3Ar95r00         [13] 8278 	ld	a,(#_nextBottomPiece + 0)
      0027E5 32r92r00         [13] 8279 	ld	(#_bottomPiece),a
                                   8280 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      0027E8 01r18r00         [10] 8281 	ld	bc, #_pieces+0
      0027EB C5               [11] 8282 	push	bc
      0027EC CDrC9r27         [17] 8283 	call	_RandomIndex
      0027EF C1               [10] 8284 	pop	bc
      0027F0 26 00            [ 7] 8285 	ld	h, #0x00
      0027F2 09               [11] 8286 	add	hl, bc
      0027F3 7E               [ 7] 8287 	ld	a, (hl)
      0027F4 32r93r00         [13] 8288 	ld	(_nextTopPiece+0), a
                                   8289 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      0027F7 C5               [11] 8290 	push	bc
      0027F8 CDrC9r27         [17] 8291 	call	_RandomIndex
      0027FB C1               [10] 8292 	pop	bc
      0027FC 26 00            [ 7] 8293 	ld	h, #0x00
      0027FE 09               [11] 8294 	add	hl, bc
      0027FF 7E               [ 7] 8295 	ld	a, (hl)
      002800 32r94r00         [13] 8296 	ld	(_nextMidPiece+0), a
                                   8297 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      002803 C5               [11] 8298 	push	bc
      002804 CDrC9r27         [17] 8299 	call	_RandomIndex
      002807 C1               [10] 8300 	pop	bc
      002808 26 00            [ 7] 8301 	ld	h, #0x00
      00280A 09               [11] 8302 	add	hl, bc
      00280B 7E               [ 7] 8303 	ld	a, (hl)
      00280C 32r95r00         [13] 8304 	ld	(_nextBottomPiece+0), a
                                   8305 ;src\/GameLogic.h:21: }
      00280F C9               [10] 8306 	ret
                                   8307 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   8308 ;	---------------------------------
                                   8309 ; Function UpdateAndDrawPieceStatic
                                   8310 ; ---------------------------------
      002810                       8311 _UpdateAndDrawPieceStatic::
                                   8312 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      002810 01r00r00         [10] 8313 	ld	bc, #_playfield+0
      002813 ED 5Br01r00      [20] 8314 	ld	de, (_col)
      002817 16 00            [ 7] 8315 	ld	d, #0x00
      002819 6B               [ 4] 8316 	ld	l, e
      00281A 62               [ 4] 8317 	ld	h, d
      00281B 29               [11] 8318 	add	hl, hl
      00281C 19               [11] 8319 	add	hl, de
      00281D 29               [11] 8320 	add	hl, hl
      00281E 29               [11] 8321 	add	hl, hl
      00281F 09               [11] 8322 	add	hl, bc
      002820 EB               [ 4] 8323 	ex	de, hl
      002821 3Ar02r00         [13] 8324 	ld	a, (#_line + 0)
      002824 6F               [ 4] 8325 	ld	l, a
      002825 26 00            [ 7] 8326 	ld	h, #0x00
      002827 19               [11] 8327 	add	hl, de
      002828 3Ar90r00         [13] 8328 	ld	a,(#_topPiece + 0)
      00282B 77               [ 7] 8329 	ld	(hl), a
                                   8330 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      00282C ED 5Br01r00      [20] 8331 	ld	de, (_col)
      002830 16 00            [ 7] 8332 	ld	d, #0x00
      002832 6B               [ 4] 8333 	ld	l, e
      002833 62               [ 4] 8334 	ld	h, d
      002834 29               [11] 8335 	add	hl, hl
      002835 19               [11] 8336 	add	hl, de
      002836 29               [11] 8337 	add	hl, hl
      002837 29               [11] 8338 	add	hl, hl
      002838 09               [11] 8339 	add	hl, bc
      002839 EB               [ 4] 8340 	ex	de, hl
      00283A 3Ar02r00         [13] 8341 	ld	a, (#_line + 0)
      00283D 6F               [ 4] 8342 	ld	l, a
      00283E 2C               [ 4] 8343 	inc	l
      00283F 26 00            [ 7] 8344 	ld	h, #0x00
      002841 19               [11] 8345 	add	hl, de
      002842 3Ar91r00         [13] 8346 	ld	a,(#_midPiece + 0)
      002845 77               [ 7] 8347 	ld	(hl), a
                                   8348 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      002846 ED 5Br01r00      [20] 8349 	ld	de, (_col)
      00284A 16 00            [ 7] 8350 	ld	d, #0x00
      00284C 6B               [ 4] 8351 	ld	l, e
      00284D 62               [ 4] 8352 	ld	h, d
      00284E 29               [11] 8353 	add	hl, hl
      00284F 19               [11] 8354 	add	hl, de
      002850 29               [11] 8355 	add	hl, hl
      002851 29               [11] 8356 	add	hl, hl
      002852 09               [11] 8357 	add	hl, bc
      002853 EB               [ 4] 8358 	ex	de, hl
      002854 3Ar02r00         [13] 8359 	ld	a, (#_line + 0)
      002857 6F               [ 4] 8360 	ld	l, a
      002858 2C               [ 4] 8361 	inc	l
      002859 2C               [ 4] 8362 	inc	l
      00285A 26 00            [ 7] 8363 	ld	h, #0x00
      00285C 19               [11] 8364 	add	hl, de
      00285D 3Ar92r00         [13] 8365 	ld	a,(#_bottomPiece + 0)
      002860 77               [ 7] 8366 	ld	(hl), a
                                   8367 ;src\/GameLogic.h:29: DrawPiece(line);
      002861 C5               [11] 8368 	push	bc
      002862 3Ar02r00         [13] 8369 	ld	a,(#_line + 0)
      002865 F5               [11] 8370 	push	af
      002866 33               [ 6] 8371 	inc	sp
      002867 CDrBDr1F         [17] 8372 	call	_DrawPiece
      00286A 33               [ 6] 8373 	inc	sp
      00286B C1               [10] 8374 	pop	bc
                                   8375 ;src\/GameLogic.h:32: col = INITIAL_COL;
      00286C 3E 02            [ 7] 8376 	ld	a, #0x02
      00286E 32r01r00         [13] 8377 	ld	(#_col), a
                                   8378 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   8379 ;src\/GameLogic.h:35: counter = 0;
      002871 3E 00            [ 7] 8380 	ld	a,#0x00
      002873 32r02r00         [13] 8381 	ld	(#_line),a
      002876 32r03r00         [13] 8382 	ld	(#_counter), a
                                   8383 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      002879 3Ar18r00         [13] 8384 	ld	a, (#_playfield + 24)
      00287C B7               [ 4] 8385 	or	a, a
      00287D 20 0C            [12] 8386 	jr	NZ, 00101$
                                   8387 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      00287F 3Ar19r00         [13] 8388 	ld	a, (#_playfield + 25)
      002882 B7               [ 4] 8389 	or	a, a
      002883 20 06            [12] 8390 	jr	NZ, 00101$
                                   8391 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      002885 3Ar1Ar00         [13] 8392 	ld	a, (#_playfield + 26)
      002888 B7               [ 4] 8393 	or	a, a
      002889 28 0B            [12] 8394 	jr	Z, 00102$
      00288B                       8395 00101$:
                                   8396 ;src\/GameLogic.h:41: gameOver = TRUE;
      00288B FD 21r00r00      [14] 8397 	ld	iy, #_gameOver
      00288F FD 36 00 01      [19] 8398 	ld	0 (iy), #0x01
      002893 C3rE0r1F         [10] 8399 	jp	_DrawPlayfield
      002896                       8400 00102$:
                                   8401 ;src\/GameLogic.h:44: RandomPiece();
      002896 CDrD6r27         [17] 8402 	call	_RandomPiece
                                   8403 ;src\/GameLogic.h:46: CheckPlayfield(1);
      002899 3E 01            [ 7] 8404 	ld	a, #0x01
      00289B F5               [11] 8405 	push	af
      00289C 33               [ 6] 8406 	inc	sp
      00289D CDr51r20         [17] 8407 	call	_CheckPlayfield
      0028A0 33               [ 6] 8408 	inc	sp
                                   8409 ;src\/GameLogic.h:48: DrawNextPiece();
      0028A1 CDrC0r16         [17] 8410 	call	_DrawNextPiece
                                   8411 ;src\/GameLogic.h:51: DrawPlayfield();
                                   8412 ;src\/GameLogic.h:52: }
      0028A4 C3rE0r1F         [10] 8413 	jp	_DrawPlayfield
                                   8414 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   8415 ;	---------------------------------
                                   8416 ; Function BlinkPauseText
                                   8417 ; ---------------------------------
      0028A7                       8418 _BlinkPauseText::
                                   8419 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      0028A7 2A 9E FC         [16] 8420 	ld	hl, (_JIFFY)
      0028AA CB 5D            [ 8] 8421 	bit	3, l
      0028AC 28 0E            [12] 8422 	jr	Z, 00102$
                                   8423 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      0028AE 11 0D 0C         [10] 8424 	ld	de, #0x0c0d
      0028B1 D5               [11] 8425 	push	de
      0028B2 21rC5r28         [10] 8426 	ld	hl, #___str_5
      0028B5 E5               [11] 8427 	push	hl
      0028B6 CDrCCr12         [17] 8428 	call	_DrawString
      0028B9 F1               [10] 8429 	pop	af
      0028BA F1               [10] 8430 	pop	af
      0028BB C9               [10] 8431 	ret
      0028BC                       8432 00102$:
                                   8433 ;src\/GameLogic.h:61: DrawLine(6);
      0028BC 3E 06            [ 7] 8434 	ld	a, #0x06
      0028BE F5               [11] 8435 	push	af
      0028BF 33               [ 6] 8436 	inc	sp
      0028C0 CDr85r1F         [17] 8437 	call	_DrawLine
      0028C3 33               [ 6] 8438 	inc	sp
                                   8439 ;src\/GameLogic.h:64: }
      0028C4 C9               [10] 8440 	ret
      0028C5                       8441 ___str_5:
      0028C5 50 41 55 53 45        8442 	.ascii "PAUSE"
      0028CA 00                    8443 	.db 0x00
                                   8444 ;src\/GameLogic.h:66: void Pause() {
                                   8445 ;	---------------------------------
                                   8446 ; Function Pause
                                   8447 ; ---------------------------------
      0028CB                       8448 _Pause::
                                   8449 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      0028CB 11 0D 0C         [10] 8450 	ld	de, #0x0c0d
      0028CE D5               [11] 8451 	push	de
      0028CF 21r05r29         [10] 8452 	ld	hl, #___str_6
      0028D2 E5               [11] 8453 	push	hl
      0028D3 CDrCCr12         [17] 8454 	call	_DrawString
      0028D6 F1               [10] 8455 	pop	af
      0028D7 F1               [10] 8456 	pop	af
                                   8457 ;src\/GameLogic.h:71: while(TRUE) {
      0028D8                       8458 00114$:
                                   8459 ;src\/GameLogic.h:73: BlinkPauseText();
      0028D8 CDrA7r28         [17] 8460 	call	_BlinkPauseText
                                   8461 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      0028DB 2E 07            [ 7] 8462 	ld	l, #0x07
      0028DD CDr00r00         [17] 8463 	call	_SNSMAT
                                   8464 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      0028E0 CB 55            [ 8] 8465 	bit	2, l
      0028E2 28 F4            [12] 8466 	jr	Z, 00114$
                                   8467 ;src\/GameLogic.h:79: while(TRUE) {
      0028E4                       8468 00109$:
                                   8469 ;src\/GameLogic.h:81: BlinkPauseText();
      0028E4 CDrA7r28         [17] 8470 	call	_BlinkPauseText
                                   8471 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      0028E7 2E 07            [ 7] 8472 	ld	l, #0x07
      0028E9 CDr00r00         [17] 8473 	call	_SNSMAT
                                   8474 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      0028EC CB 55            [ 8] 8475 	bit	2, l
      0028EE 20 F4            [12] 8476 	jr	NZ, 00109$
                                   8477 ;src\/GameLogic.h:87: while(TRUE) {
      0028F0                       8478 00104$:
                                   8479 ;src\/GameLogic.h:89: BlinkPauseText();
      0028F0 CDrA7r28         [17] 8480 	call	_BlinkPauseText
                                   8481 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      0028F3 2E 07            [ 7] 8482 	ld	l, #0x07
      0028F5 CDr00r00         [17] 8483 	call	_SNSMAT
                                   8484 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      0028F8 CB 55            [ 8] 8485 	bit	2, l
      0028FA 28 F4            [12] 8486 	jr	Z, 00104$
                                   8487 ;src\/GameLogic.h:95: DrawLine(6);
      0028FC 3E 06            [ 7] 8488 	ld	a, #0x06
      0028FE F5               [11] 8489 	push	af
      0028FF 33               [ 6] 8490 	inc	sp
      002900 CDr85r1F         [17] 8491 	call	_DrawLine
      002903 33               [ 6] 8492 	inc	sp
                                   8493 ;src\/GameLogic.h:96: return;
                                   8494 ;src\/GameLogic.h:106: }
      002904 C9               [10] 8495 	ret
      002905                       8496 ___str_6:
      002905 50 41 55 53 45        8497 	.ascii "PAUSE"
      00290A 00                    8498 	.db 0x00
                                   8499 ;src\/GameLogic.h:108: void GameLoop() {
                                   8500 ;	---------------------------------
                                   8501 ; Function GameLoop
                                   8502 ; ---------------------------------
      00290B                       8503 _GameLoop::
      00290B DD E5            [15] 8504 	push	ix
      00290D DD 21 00 00      [14] 8505 	ld	ix,#0
      002911 DD 39            [15] 8506 	add	ix,sp
      002913 21 F3 FF         [10] 8507 	ld	hl, #-13
      002916 39               [11] 8508 	add	hl, sp
      002917 F9               [ 6] 8509 	ld	sp, hl
                                   8510 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      002918 DD 36 FF 00      [19] 8511 	ld	-1 (ix), #0
      00291C DD 36 F3 00      [19] 8512 	ld	-13 (ix), #0
                                   8513 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      002920 DD 36 F4 00      [19] 8514 	ld	-12 (ix), #0
      002924 DD 36 F5 00      [19] 8515 	ld	-11 (ix), #0
                                   8516 ;src\/GameLogic.h:115: while(!gameOver) {
      002928                       8517 00150$:
      002928 3Ar00r00         [13] 8518 	ld	a,(#_gameOver + 0)
      00292B B7               [ 4] 8519 	or	a, a
      00292C C2rC3r2C         [10] 8520 	jp	NZ, 00152$
                                   8521 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      00292F ED 4B 9E FC      [20] 8522 	ld	bc, (_JIFFY)
                                   8523 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      002933                       8524 00101$:
      002933 2A 9E FC         [16] 8525 	ld	hl, (_JIFFY)
      002936 BF               [ 4] 8526 	cp	a, a
      002937 ED 42            [15] 8527 	sbc	hl, bc
      002939 28 F8            [12] 8528 	jr	Z, 00101$
                                   8529 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      00293B ED 4Br01r00      [20] 8530 	ld	bc, (_col)
      00293F 06 00            [ 7] 8531 	ld	b, #0x00
      002941 69               [ 4] 8532 	ld	l, c
      002942 60               [ 4] 8533 	ld	h, b
      002943 29               [11] 8534 	add	hl, hl
      002944 09               [11] 8535 	add	hl, bc
      002945 29               [11] 8536 	add	hl, hl
      002946 29               [11] 8537 	add	hl, hl
      002947 EB               [ 4] 8538 	ex	de, hl
      002948 21r00r00         [10] 8539 	ld	hl, #_playfield
      00294B 19               [11] 8540 	add	hl, de
      00294C EB               [ 4] 8541 	ex	de, hl
      00294D FD 21r02r00      [14] 8542 	ld	iy, #_line
      002951 FD 6E 00         [19] 8543 	ld	l, 0 (iy)
      002954 26 00            [ 7] 8544 	ld	h, #0x00
      002956 19               [11] 8545 	add	hl, de
      002957 36 00            [10] 8546 	ld	(hl), #0x00
                                   8547 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      002959 ED 4Br01r00      [20] 8548 	ld	bc, (_col)
      00295D 06 00            [ 7] 8549 	ld	b, #0x00
      00295F 69               [ 4] 8550 	ld	l, c
      002960 60               [ 4] 8551 	ld	h, b
      002961 29               [11] 8552 	add	hl, hl
      002962 09               [11] 8553 	add	hl, bc
      002963 29               [11] 8554 	add	hl, hl
      002964 29               [11] 8555 	add	hl, hl
      002965 EB               [ 4] 8556 	ex	de, hl
      002966 21r00r00         [10] 8557 	ld	hl, #_playfield
      002969 19               [11] 8558 	add	hl, de
      00296A EB               [ 4] 8559 	ex	de, hl
      00296B FD 6E 00         [19] 8560 	ld	l, 0 (iy)
      00296E 2C               [ 4] 8561 	inc	l
      00296F 26 00            [ 7] 8562 	ld	h, #0x00
      002971 19               [11] 8563 	add	hl, de
      002972 36 00            [10] 8564 	ld	(hl), #0x00
                                   8565 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002974 ED 4Br01r00      [20] 8566 	ld	bc, (_col)
      002978 06 00            [ 7] 8567 	ld	b, #0x00
      00297A 69               [ 4] 8568 	ld	l, c
      00297B 60               [ 4] 8569 	ld	h, b
      00297C 29               [11] 8570 	add	hl, hl
      00297D 09               [11] 8571 	add	hl, bc
      00297E 29               [11] 8572 	add	hl, hl
      00297F 29               [11] 8573 	add	hl, hl
      002980 EB               [ 4] 8574 	ex	de, hl
      002981 21r00r00         [10] 8575 	ld	hl, #_playfield
      002984 19               [11] 8576 	add	hl, de
      002985 EB               [ 4] 8577 	ex	de, hl
      002986 FD 6E 00         [19] 8578 	ld	l, 0 (iy)
      002989 2C               [ 4] 8579 	inc	l
      00298A 2C               [ 4] 8580 	inc	l
      00298B 26 00            [ 7] 8581 	ld	h, #0x00
      00298D 19               [11] 8582 	add	hl, de
      00298E 36 00            [10] 8583 	ld	(hl), #0x00
                                   8584 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      002990 2E 01            [ 7] 8585 	ld	l, #0x01
      002992 CDr00r00         [17] 8586 	call	_GTSTCK
      002995 DD 75 F6         [19] 8587 	ld	-10 (ix), l
                                   8588 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      002998 2E 01            [ 7] 8589 	ld	l, #0x01
      00299A CDr00r00         [17] 8590 	call	_GTTRIG
      00299D DD 75 F7         [19] 8591 	ld	-9 (ix), l
                                   8592 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      0029A0 2E 03            [ 7] 8593 	ld	l, #0x03
      0029A2 CDr00r00         [17] 8594 	call	_GTTRIG
      0029A5 DD 75 F8         [19] 8595 	ld	-8 (ix), l
                                   8596 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      0029A8 DD 7E F6         [19] 8597 	ld	a, -10 (ix)
                                   8598 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      0029AB B7               [ 4] 8599 	or	a,a
      0029AC 20 07            [12] 8600 	jr	NZ, 00105$
      0029AE 6F               [ 4] 8601 	ld	l,a
      0029AF CDr00r00         [17] 8602 	call	_GTSTCK
      0029B2 DD 75 F6         [19] 8603 	ld	-10 (ix), l
      0029B5                       8604 00105$:
                                   8605 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0029B5 FD 21r02r00      [14] 8606 	ld	iy, #_line
      0029B9 FD 7E 00         [19] 8607 	ld	a, 0 (iy)
      0029BC DD 77 F9         [19] 8608 	ld	-7 (ix), a
                                   8609 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      0029BF DD 7E FF         [19] 8610 	ld	a, -1 (ix)
      0029C2 B7               [ 4] 8611 	or	a, a
      0029C3 C2rACr2A         [10] 8612 	jp	NZ, 00118$
                                   8613 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0029C6 FD 7E 00         [19] 8614 	ld	a, 0 (iy)
      0029C9 DD 77 FF         [19] 8615 	ld	-1 (ix), a
                                   8616 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0029CC FD 21r01r00      [14] 8617 	ld	iy, #_col
      0029D0 FD 7E 00         [19] 8618 	ld	a, 0 (iy)
      0029D3 DD 77 FA         [19] 8619 	ld	-6 (ix), a
                                   8620 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0029D6 DD 7E FF         [19] 8621 	ld	a, -1 (ix)
      0029D9 C6 02            [ 7] 8622 	add	a, #0x02
      0029DB DD 77 FB         [19] 8623 	ld	-5 (ix), a
                                   8624 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      0029DE DD 7E F6         [19] 8625 	ld	a, -10 (ix)
      0029E1 D6 07            [ 7] 8626 	sub	a, #0x07
      0029E3 20 5F            [12] 8627 	jr	NZ, 00112$
                                   8628 ;src\/GameLogic.h:145: col > 0 && 
      0029E5 FD 7E 00         [19] 8629 	ld	a, 0 (iy)
      0029E8 B7               [ 4] 8630 	or	a, a
      0029E9 28 59            [12] 8631 	jr	Z, 00112$
                                   8632 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0029EB DD 7E FA         [19] 8633 	ld	a, -6 (ix)
      0029EE C6 FF            [ 7] 8634 	add	a, #0xff
      0029F0 DD 77 FF         [19] 8635 	ld	-1 (ix), a
      0029F3 4F               [ 4] 8636 	ld	c, a
      0029F4 07               [ 4] 8637 	rlca
      0029F5 9F               [ 4] 8638 	sbc	a, a
      0029F6 47               [ 4] 8639 	ld	b, a
      0029F7 69               [ 4] 8640 	ld	l, c
      0029F8 60               [ 4] 8641 	ld	h, b
      0029F9 29               [11] 8642 	add	hl, hl
      0029FA 09               [11] 8643 	add	hl, bc
      0029FB 29               [11] 8644 	add	hl, hl
      0029FC 29               [11] 8645 	add	hl, hl
      0029FD DD 75 FE         [19] 8646 	ld	-2 (ix), l
      002A00 DD 74 FF         [19] 8647 	ld	-1 (ix), h
      002A03 3Er00            [ 7] 8648 	ld	a, #<(_playfield)
      002A05 DD 86 FE         [19] 8649 	add	a, -2 (ix)
      002A08 DD 77 FC         [19] 8650 	ld	-4 (ix), a
      002A0B 3Es00            [ 7] 8651 	ld	a, #>(_playfield)
      002A0D DD 8E FF         [19] 8652 	adc	a, -1 (ix)
      002A10 DD 77 FD         [19] 8653 	ld	-3 (ix), a
      002A13 DD 7E FC         [19] 8654 	ld	a, -4 (ix)
      002A16 DD 86 F9         [19] 8655 	add	a, -7 (ix)
      002A19 DD 77 FE         [19] 8656 	ld	-2 (ix), a
      002A1C DD 7E FD         [19] 8657 	ld	a, -3 (ix)
      002A1F CE 00            [ 7] 8658 	adc	a, #0x00
      002A21 DD 77 FF         [19] 8659 	ld	-1 (ix), a
      002A24 DD 6E FE         [19] 8660 	ld	l, -2 (ix)
      002A27 DD 66 FF         [19] 8661 	ld	h, -1 (ix)
      002A2A 7E               [ 7] 8662 	ld	a, (hl)
      002A2B B7               [ 4] 8663 	or	a, a
      002A2C 20 16            [12] 8664 	jr	NZ, 00112$
                                   8665 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      002A2E DD 7E FC         [19] 8666 	ld	a, -4 (ix)
      002A31 DD 86 FB         [19] 8667 	add	a, -5 (ix)
      002A34 4F               [ 4] 8668 	ld	c, a
      002A35 DD 7E FD         [19] 8669 	ld	a, -3 (ix)
      002A38 CE 00            [ 7] 8670 	adc	a, #0x00
      002A3A 47               [ 4] 8671 	ld	b, a
      002A3B 0A               [ 7] 8672 	ld	a, (bc)
      002A3C B7               [ 4] 8673 	or	a, a
      002A3D 20 05            [12] 8674 	jr	NZ, 00112$
                                   8675 ;src\/GameLogic.h:148: col--;
      002A3F FD 35 00         [23] 8676 	dec	0 (iy)
      002A42 18 68            [12] 8677 	jr	00118$
      002A44                       8678 00112$:
                                   8679 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      002A44 DD 7E F6         [19] 8680 	ld	a, -10 (ix)
      002A47 D6 03            [ 7] 8681 	sub	a, #0x03
      002A49 20 61            [12] 8682 	jr	NZ, 00118$
                                   8683 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      002A4B FD 21r01r00      [14] 8684 	ld	iy, #_col
      002A4F FD 7E 00         [19] 8685 	ld	a, 0 (iy)
      002A52 D6 05            [ 7] 8686 	sub	a, #0x05
      002A54 30 56            [12] 8687 	jr	NC, 00118$
                                   8688 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      002A56 DD 7E FA         [19] 8689 	ld	a, -6 (ix)
      002A59 3C               [ 4] 8690 	inc	a
      002A5A DD 77 FF         [19] 8691 	ld	-1 (ix), a
      002A5D 4F               [ 4] 8692 	ld	c, a
      002A5E 07               [ 4] 8693 	rlca
      002A5F 9F               [ 4] 8694 	sbc	a, a
      002A60 47               [ 4] 8695 	ld	b, a
      002A61 69               [ 4] 8696 	ld	l, c
      002A62 60               [ 4] 8697 	ld	h, b
      002A63 29               [11] 8698 	add	hl, hl
      002A64 09               [11] 8699 	add	hl, bc
      002A65 29               [11] 8700 	add	hl, hl
      002A66 29               [11] 8701 	add	hl, hl
      002A67 DD 75 FE         [19] 8702 	ld	-2 (ix), l
      002A6A DD 74 FF         [19] 8703 	ld	-1 (ix), h
      002A6D 3Er00            [ 7] 8704 	ld	a, #<(_playfield)
      002A6F DD 86 FE         [19] 8705 	add	a, -2 (ix)
      002A72 DD 77 FC         [19] 8706 	ld	-4 (ix), a
      002A75 3Es00            [ 7] 8707 	ld	a, #>(_playfield)
      002A77 DD 8E FF         [19] 8708 	adc	a, -1 (ix)
      002A7A DD 77 FD         [19] 8709 	ld	-3 (ix), a
      002A7D DD 7E FC         [19] 8710 	ld	a, -4 (ix)
      002A80 DD 86 F9         [19] 8711 	add	a, -7 (ix)
      002A83 DD 77 FE         [19] 8712 	ld	-2 (ix), a
      002A86 DD 7E FD         [19] 8713 	ld	a, -3 (ix)
      002A89 CE 00            [ 7] 8714 	adc	a, #0x00
      002A8B DD 77 FF         [19] 8715 	ld	-1 (ix), a
      002A8E DD 6E FE         [19] 8716 	ld	l, -2 (ix)
      002A91 DD 66 FF         [19] 8717 	ld	h, -1 (ix)
      002A94 7E               [ 7] 8718 	ld	a, (hl)
      002A95 B7               [ 4] 8719 	or	a, a
      002A96 20 14            [12] 8720 	jr	NZ, 00118$
                                   8721 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      002A98 DD 7E FC         [19] 8722 	ld	a, -4 (ix)
      002A9B DD 86 FB         [19] 8723 	add	a, -5 (ix)
      002A9E 4F               [ 4] 8724 	ld	c, a
      002A9F DD 7E FD         [19] 8725 	ld	a, -3 (ix)
      002AA2 CE 00            [ 7] 8726 	adc	a, #0x00
      002AA4 47               [ 4] 8727 	ld	b, a
      002AA5 0A               [ 7] 8728 	ld	a, (bc)
      002AA6 B7               [ 4] 8729 	or	a, a
      002AA7 20 03            [12] 8730 	jr	NZ, 00118$
                                   8731 ;src\/GameLogic.h:154: col++;
      002AA9 FD 34 00         [23] 8732 	inc	0 (iy)
      002AAC                       8733 00118$:
                                   8734 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      002AAC DD 7E F3         [19] 8735 	ld	a, -13 (ix)
      002AAF B7               [ 4] 8736 	or	a, a
      002AB0 C2r72r2B         [10] 8737 	jp	NZ, 00132$
                                   8738 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002AB3 DD 7E F6         [19] 8739 	ld	a, -10 (ix)
      002AB6 3D               [ 4] 8740 	dec	a
      002AB7 28 18            [12] 8741 	jr	Z, 00119$
      002AB9 DD 7E F4         [19] 8742 	ld	a, -12 (ix)
      002ABC B7               [ 4] 8743 	or	a, a
      002ABD 20 06            [12] 8744 	jr	NZ, 00124$
      002ABF DD 7E F7         [19] 8745 	ld	a, -9 (ix)
      002AC2 3C               [ 4] 8746 	inc	a
      002AC3 28 0C            [12] 8747 	jr	Z, 00119$
      002AC5                       8748 00124$:
      002AC5 DD 7E F5         [19] 8749 	ld	a, -11 (ix)
      002AC8 B7               [ 4] 8750 	or	a, a
      002AC9 20 1A            [12] 8751 	jr	NZ, 00120$
      002ACB DD 7E F8         [19] 8752 	ld	a, -8 (ix)
      002ACE 3C               [ 4] 8753 	inc	a
      002ACF 20 14            [12] 8754 	jr	NZ, 00120$
      002AD1                       8755 00119$:
                                   8756 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      002AD1 3Ar92r00         [13] 8757 	ld	a, (#_bottomPiece + 0)
      002AD4 4F               [ 4] 8758 	ld	c, a
                                   8759 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      002AD5 3Ar91r00         [13] 8760 	ld	a,(#_midPiece + 0)
      002AD8 32r92r00         [13] 8761 	ld	(#_bottomPiece),a
                                   8762 ;src\/GameLogic.h:166: midPiece = topPiece;
      002ADB 3Ar90r00         [13] 8763 	ld	a,(#_topPiece + 0)
      002ADE 32r91r00         [13] 8764 	ld	(#_midPiece),a
                                   8765 ;src\/GameLogic.h:167: topPiece = temp;
      002AE1 21r90r00         [10] 8766 	ld	hl, #_topPiece
      002AE4 71               [ 7] 8767 	ld	(hl), c
      002AE5                       8768 00120$:
                                   8769 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      002AE5 DD 7E F6         [19] 8770 	ld	a, -10 (ix)
      002AE8 D6 05            [ 7] 8771 	sub	a, #0x05
      002AEA C2r72r2B         [10] 8772 	jp	NZ,00132$
                                   8773 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002AED DD 7E F9         [19] 8774 	ld	a, -7 (ix)
      002AF0 DD 77 FE         [19] 8775 	ld	-2 (ix), a
      002AF3 DD 7E F9         [19] 8776 	ld	a, -7 (ix)
      002AF6 DD 77 FF         [19] 8777 	ld	-1 (ix), a
      002AF9                       8778 00154$:
      002AF9 DD 7E FF         [19] 8779 	ld	a, -1 (ix)
      002AFC D6 0C            [ 7] 8780 	sub	a, #0x0c
      002AFE 30 72            [12] 8781 	jr	NC, 00132$
                                   8782 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      002B00 DD 7E FF         [19] 8783 	ld	a, -1 (ix)
      002B03 D6 09            [ 7] 8784 	sub	a, #0x09
      002B05 28 4C            [12] 8785 	jr	Z, 00125$
      002B07 ED 4Br01r00      [20] 8786 	ld	bc, (_col)
      002B0B 06 00            [ 7] 8787 	ld	b, #0x00
      002B0D 69               [ 4] 8788 	ld	l, c
      002B0E 60               [ 4] 8789 	ld	h, b
      002B0F 29               [11] 8790 	add	hl, hl
      002B10 09               [11] 8791 	add	hl, bc
      002B11 29               [11] 8792 	add	hl, hl
      002B12 29               [11] 8793 	add	hl, hl
      002B13 DD 75 FC         [19] 8794 	ld	-4 (ix), l
      002B16 DD 74 FD         [19] 8795 	ld	-3 (ix), h
      002B19 3Er00            [ 7] 8796 	ld	a, #<(_playfield)
      002B1B DD 86 FC         [19] 8797 	add	a, -4 (ix)
      002B1E DD 77 FA         [19] 8798 	ld	-6 (ix), a
      002B21 3Es00            [ 7] 8799 	ld	a, #>(_playfield)
      002B23 DD 8E FD         [19] 8800 	adc	a, -3 (ix)
      002B26 DD 77 FB         [19] 8801 	ld	-5 (ix), a
      002B29 DD 7E FF         [19] 8802 	ld	a, -1 (ix)
      002B2C DD 77 FD         [19] 8803 	ld	-3 (ix), a
      002B2F DD 34 FD         [23] 8804 	inc	-3 (ix)
      002B32 DD 34 FD         [23] 8805 	inc	-3 (ix)
      002B35 DD 34 FD         [23] 8806 	inc	-3 (ix)
      002B38 DD 7E FD         [19] 8807 	ld	a, -3 (ix)
      002B3B DD 86 FA         [19] 8808 	add	a, -6 (ix)
      002B3E DD 77 FC         [19] 8809 	ld	-4 (ix), a
      002B41 3E 00            [ 7] 8810 	ld	a, #0x00
      002B43 DD 8E FB         [19] 8811 	adc	a, -5 (ix)
      002B46 DD 77 FD         [19] 8812 	ld	-3 (ix), a
      002B49 DD 6E FC         [19] 8813 	ld	l, -4 (ix)
      002B4C DD 66 FD         [19] 8814 	ld	h, -3 (ix)
      002B4F 7E               [ 7] 8815 	ld	a, (hl)
      002B50 B7               [ 4] 8816 	or	a, a
      002B51 28 14            [12] 8817 	jr	Z, 00155$
      002B53                       8818 00125$:
                                   8819 ;src\/GameLogic.h:176: DrawPiece(line);
      002B53 3Ar02r00         [13] 8820 	ld	a,(#_line + 0)
      002B56 F5               [11] 8821 	push	af
      002B57 33               [ 6] 8822 	inc	sp
      002B58 CDrBDr1F         [17] 8823 	call	_DrawPiece
      002B5B 33               [ 6] 8824 	inc	sp
                                   8825 ;src\/GameLogic.h:178: line = i;
      002B5C DD 7E FE         [19] 8826 	ld	a, -2 (ix)
      002B5F 32r02r00         [13] 8827 	ld	(#_line),a
                                   8828 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002B62 CDr10r28         [17] 8829 	call	_UpdateAndDrawPieceStatic
                                   8830 ;src\/GameLogic.h:181: break;
      002B65 18 0B            [12] 8831 	jr	00132$
      002B67                       8832 00155$:
                                   8833 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002B67 DD 34 FF         [23] 8834 	inc	-1 (ix)
      002B6A DD 7E FF         [19] 8835 	ld	a, -1 (ix)
      002B6D DD 77 FE         [19] 8836 	ld	-2 (ix), a
      002B70 18 87            [12] 8837 	jr	00154$
      002B72                       8838 00132$:
                                   8839 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002B72 DD 7E F6         [19] 8840 	ld	a, -10 (ix)
      002B75 DD 77 FF         [19] 8841 	ld	-1 (ix), a
                                   8842 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      002B78 DD 7E F6         [19] 8843 	ld	a, -10 (ix)
      002B7B DD 77 F3         [19] 8844 	ld	-13 (ix), a
                                   8845 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      002B7E DD 7E F7         [19] 8846 	ld	a, -9 (ix)
      002B81 DD 77 F4         [19] 8847 	ld	-12 (ix), a
                                   8848 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002B84 DD 7E F8         [19] 8849 	ld	a, -8 (ix)
      002B87 DD 77 F5         [19] 8850 	ld	-11 (ix), a
                                   8851 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      002B8A 2E 07            [ 7] 8852 	ld	l, #0x07
      002B8C CDr00r00         [17] 8853 	call	_SNSMAT
                                   8854 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      002B8F CB 55            [ 8] 8855 	bit	2, l
      002B91 20 03            [12] 8856 	jr	NZ, 00134$
                                   8857 ;src\/GameLogic.h:220: Pause();
      002B93 CDrCBr28         [17] 8858 	call	_Pause
      002B96                       8859 00134$:
                                   8860 ;src\/GameLogic.h:225: counter++;
      002B96 FD 21r03r00      [14] 8861 	ld	iy, #_counter
      002B9A FD 34 00         [23] 8862 	inc	0 (iy)
                                   8863 ;src\/GameLogic.h:226: if(counter == speed) {
      002B9D FD 7E 00         [19] 8864 	ld	a, 0 (iy)
      002BA0 21r96r00         [10] 8865 	ld	hl, #_speed
      002BA3 96               [ 7] 8866 	sub	a, (hl)
      002BA4 20 3F            [12] 8867 	jr	NZ, 00139$
                                   8868 ;src\/GameLogic.h:228: counter = 0;
      002BA6 21r03r00         [10] 8869 	ld	hl, #_counter
      002BA9 36 00            [10] 8870 	ld	(hl), #0x00
                                   8871 ;src\/GameLogic.h:231: DrawPiece(line);
      002BAB 3Ar02r00         [13] 8872 	ld	a,(#_line + 0)
      002BAE F5               [11] 8873 	push	af
      002BAF 33               [ 6] 8874 	inc	sp
      002BB0 CDrBDr1F         [17] 8875 	call	_DrawPiece
      002BB3 33               [ 6] 8876 	inc	sp
                                   8877 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002BB4 FD 21r02r00      [14] 8878 	ld	iy, #_line
      002BB8 FD 7E 00         [19] 8879 	ld	a, 0 (iy)
      002BBB D6 09            [ 7] 8880 	sub	a, #0x09
      002BBD 28 1F            [12] 8881 	jr	Z, 00135$
      002BBF ED 4Br01r00      [20] 8882 	ld	bc, (_col)
      002BC3 06 00            [ 7] 8883 	ld	b, #0x00
      002BC5 69               [ 4] 8884 	ld	l, c
      002BC6 60               [ 4] 8885 	ld	h, b
      002BC7 29               [11] 8886 	add	hl, hl
      002BC8 09               [11] 8887 	add	hl, bc
      002BC9 29               [11] 8888 	add	hl, hl
      002BCA 29               [11] 8889 	add	hl, hl
      002BCB EB               [ 4] 8890 	ex	de, hl
      002BCC 21r00r00         [10] 8891 	ld	hl, #_playfield
      002BCF 19               [11] 8892 	add	hl, de
      002BD0 EB               [ 4] 8893 	ex	de, hl
      002BD1 FD 7E 00         [19] 8894 	ld	a, 0 (iy)
      002BD4 C6 03            [ 7] 8895 	add	a, #0x03
      002BD6 6F               [ 4] 8896 	ld	l, a
      002BD7 26 00            [ 7] 8897 	ld	h, #0x00
      002BD9 19               [11] 8898 	add	hl, de
      002BDA 7E               [ 7] 8899 	ld	a, (hl)
      002BDB B7               [ 4] 8900 	or	a, a
      002BDC 28 03            [12] 8901 	jr	Z, 00136$
      002BDE                       8902 00135$:
                                   8903 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002BDE CDr10r28         [17] 8904 	call	_UpdateAndDrawPieceStatic
      002BE1                       8905 00136$:
                                   8906 ;src\/GameLogic.h:240: line++;
      002BE1 21r02r00         [10] 8907 	ld	hl, #_line
      002BE4 34               [11] 8908 	inc	(hl)
      002BE5                       8909 00139$:
                                   8910 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      002BE5 ED 4Br01r00      [20] 8911 	ld	bc, (_col)
      002BE9 06 00            [ 7] 8912 	ld	b, #0x00
      002BEB 69               [ 4] 8913 	ld	l, c
      002BEC 60               [ 4] 8914 	ld	h, b
      002BED 29               [11] 8915 	add	hl, hl
      002BEE 09               [11] 8916 	add	hl, bc
      002BEF 29               [11] 8917 	add	hl, hl
      002BF0 29               [11] 8918 	add	hl, hl
      002BF1 EB               [ 4] 8919 	ex	de, hl
      002BF2 21r00r00         [10] 8920 	ld	hl, #_playfield
      002BF5 19               [11] 8921 	add	hl, de
      002BF6 EB               [ 4] 8922 	ex	de, hl
      002BF7 3Ar02r00         [13] 8923 	ld	a, (#_line + 0)
      002BFA 6F               [ 4] 8924 	ld	l, a
      002BFB 26 00            [ 7] 8925 	ld	h, #0x00
      002BFD 19               [11] 8926 	add	hl, de
      002BFE 3Ar90r00         [13] 8927 	ld	a,(#_topPiece + 0)
      002C01 77               [ 7] 8928 	ld	(hl), a
                                   8929 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      002C02 ED 4Br01r00      [20] 8930 	ld	bc, (_col)
      002C06 06 00            [ 7] 8931 	ld	b, #0x00
      002C08 69               [ 4] 8932 	ld	l, c
      002C09 60               [ 4] 8933 	ld	h, b
      002C0A 29               [11] 8934 	add	hl, hl
      002C0B 09               [11] 8935 	add	hl, bc
      002C0C 29               [11] 8936 	add	hl, hl
      002C0D 29               [11] 8937 	add	hl, hl
      002C0E EB               [ 4] 8938 	ex	de, hl
      002C0F 21r00r00         [10] 8939 	ld	hl, #_playfield
      002C12 19               [11] 8940 	add	hl, de
      002C13 EB               [ 4] 8941 	ex	de, hl
      002C14 3Ar02r00         [13] 8942 	ld	a, (#_line + 0)
      002C17 6F               [ 4] 8943 	ld	l, a
      002C18 2C               [ 4] 8944 	inc	l
      002C19 26 00            [ 7] 8945 	ld	h, #0x00
      002C1B 19               [11] 8946 	add	hl, de
      002C1C 3Ar91r00         [13] 8947 	ld	a,(#_midPiece + 0)
      002C1F 77               [ 7] 8948 	ld	(hl), a
                                   8949 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      002C20 ED 4Br01r00      [20] 8950 	ld	bc, (_col)
      002C24 06 00            [ 7] 8951 	ld	b, #0x00
      002C26 69               [ 4] 8952 	ld	l, c
      002C27 60               [ 4] 8953 	ld	h, b
      002C28 29               [11] 8954 	add	hl, hl
      002C29 09               [11] 8955 	add	hl, bc
      002C2A 29               [11] 8956 	add	hl, hl
      002C2B 29               [11] 8957 	add	hl, hl
      002C2C EB               [ 4] 8958 	ex	de, hl
      002C2D 21r00r00         [10] 8959 	ld	hl, #_playfield
      002C30 19               [11] 8960 	add	hl, de
      002C31 EB               [ 4] 8961 	ex	de, hl
      002C32 3Ar02r00         [13] 8962 	ld	a, (#_line + 0)
      002C35 6F               [ 4] 8963 	ld	l, a
      002C36 2C               [ 4] 8964 	inc	l
      002C37 2C               [ 4] 8965 	inc	l
      002C38 26 00            [ 7] 8966 	ld	h, #0x00
      002C3A 19               [11] 8967 	add	hl, de
      002C3B 3Ar92r00         [13] 8968 	ld	a,(#_bottomPiece + 0)
      002C3E 77               [ 7] 8969 	ld	(hl), a
                                   8970 ;src\/GameLogic.h:254: DrawPiece(line);
      002C3F 3Ar02r00         [13] 8971 	ld	a,(#_line + 0)
      002C42 F5               [11] 8972 	push	af
      002C43 33               [ 6] 8973 	inc	sp
      002C44 CDrBDr1F         [17] 8974 	call	_DrawPiece
      002C47 33               [ 6] 8975 	inc	sp
                                   8976 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002C48 ED 4Br01r00      [20] 8977 	ld	bc, (_col)
      002C4C 06 00            [ 7] 8978 	ld	b, #0x00
      002C4E 69               [ 4] 8979 	ld	l, c
      002C4F 60               [ 4] 8980 	ld	h, b
      002C50 29               [11] 8981 	add	hl, hl
      002C51 09               [11] 8982 	add	hl, bc
      002C52 29               [11] 8983 	add	hl, hl
      002C53 29               [11] 8984 	add	hl, hl
      002C54 EB               [ 4] 8985 	ex	de, hl
                                   8986 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      002C55 21r00r00         [10] 8987 	ld	hl, #_playfield
      002C58 19               [11] 8988 	add	hl, de
      002C59 EB               [ 4] 8989 	ex	de, hl
      002C5A 3Ar02r00         [13] 8990 	ld	a,(#_line + 0)
      002C5D C6 03            [ 7] 8991 	add	a, #0x03
      002C5F 4F               [ 4] 8992 	ld	c, a
      002C60 69               [ 4] 8993 	ld	l, c
      002C61 26 00            [ 7] 8994 	ld	h, #0x00
      002C63 19               [11] 8995 	add	hl, de
      002C64 7E               [ 7] 8996 	ld	a, (hl)
      002C65 B7               [ 4] 8997 	or	a, a
      002C66 28 06            [12] 8998 	jr	Z, 00148$
                                   8999 ;src\/GameLogic.h:260: HideArrowSprite();
      002C68 CDr48r0C         [17] 9000 	call	_HideArrowSprite
      002C6B C3r28r29         [10] 9001 	jp	00150$
      002C6E                       9002 00148$:
                                   9003 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002C6E 41               [ 4] 9004 	ld	b, c
      002C6F                       9005 00157$:
      002C6F 78               [ 4] 9006 	ld	a, b
      002C70 D6 0C            [ 7] 9007 	sub	a, #0x0c
      002C72 D2r28r29         [10] 9008 	jp	NC, 00150$
                                   9009 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C75 3Ar01r00         [13] 9010 	ld	a,(#_col + 0)
      002C78 87               [ 4] 9011 	add	a, a
      002C79 87               [ 4] 9012 	add	a, a
      002C7A 87               [ 4] 9013 	add	a, a
      002C7B 87               [ 4] 9014 	add	a, a
      002C7C DD 77 FE         [19] 9015 	ld	-2 (ix), a
                                   9016 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002C7F 68               [ 4] 9017 	ld	l, b
      002C80 26 00            [ 7] 9018 	ld	h, #0x00
      002C82 19               [11] 9019 	add	hl, de
                                   9020 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C83 DD 7E FE         [19] 9021 	ld	a, -2 (ix)
      002C86 C6 50            [ 7] 9022 	add	a, #0x50
      002C88 DD 77 FE         [19] 9023 	ld	-2 (ix), a
                                   9024 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002C8B 6E               [ 7] 9025 	ld	l, (hl)
      002C8C 78               [ 4] 9026 	ld	a, b
      002C8D D6 0B            [ 7] 9027 	sub	a,#0x0b
      002C8F 20 16            [12] 9028 	jr	NZ, 00143$
      002C91 B5               [ 4] 9029 	or	a,l
      002C92 20 13            [12] 9030 	jr	NZ, 00143$
                                   9031 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C94 79               [ 4] 9032 	ld	a, c
      002C95 87               [ 4] 9033 	add	a, a
      002C96 87               [ 4] 9034 	add	a, a
      002C97 87               [ 4] 9035 	add	a, a
      002C98 87               [ 4] 9036 	add	a, a
      002C99 F5               [11] 9037 	push	af
      002C9A 33               [ 6] 9038 	inc	sp
      002C9B DD 7E FE         [19] 9039 	ld	a, -2 (ix)
      002C9E F5               [11] 9040 	push	af
      002C9F 33               [ 6] 9041 	inc	sp
      002CA0 CDrEDr00         [17] 9042 	call	_DrawArrowSprite
      002CA3 F1               [10] 9043 	pop	af
                                   9044 ;src\/GameLogic.h:266: break;
      002CA4 C3r28r29         [10] 9045 	jp	00150$
      002CA7                       9046 00143$:
                                   9047 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      002CA7 7D               [ 4] 9048 	ld	a, l
      002CA8 B7               [ 4] 9049 	or	a, a
      002CA9 28 14            [12] 9050 	jr	Z, 00158$
                                   9051 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002CAB 79               [ 4] 9052 	ld	a, c
      002CAC 3D               [ 4] 9053 	dec	a
      002CAD 87               [ 4] 9054 	add	a, a
      002CAE 87               [ 4] 9055 	add	a, a
      002CAF 87               [ 4] 9056 	add	a, a
      002CB0 87               [ 4] 9057 	add	a, a
      002CB1 F5               [11] 9058 	push	af
      002CB2 33               [ 6] 9059 	inc	sp
      002CB3 DD 7E FE         [19] 9060 	ld	a, -2 (ix)
      002CB6 F5               [11] 9061 	push	af
      002CB7 33               [ 6] 9062 	inc	sp
      002CB8 CDrEDr00         [17] 9063 	call	_DrawArrowSprite
      002CBB F1               [10] 9064 	pop	af
                                   9065 ;src\/GameLogic.h:270: break;
      002CBC C3r28r29         [10] 9066 	jp	00150$
      002CBF                       9067 00158$:
                                   9068 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002CBF 04               [ 4] 9069 	inc	b
      002CC0 48               [ 4] 9070 	ld	c, b
      002CC1 18 AC            [12] 9071 	jr	00157$
      002CC3                       9072 00152$:
                                   9073 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002CC3 11 0C 0C         [10] 9074 	ld	de, #0x0c0c
      002CC6 D5               [11] 9075 	push	de
      002CC7 21rDBr2C         [10] 9076 	ld	hl, #___str_7
      002CCA E5               [11] 9077 	push	hl
      002CCB CDrCCr12         [17] 9078 	call	_DrawString
      002CCE F1               [10] 9079 	pop	af
                                   9080 ;src\/GameLogic.h:282: Wait(60 * 5);
      002CCF 21 2C 01         [10] 9081 	ld	hl, #0x012c
      002CD2 E3               [19] 9082 	ex	(sp),hl
      002CD3 CDr00r00         [17] 9083 	call	_Wait
                                   9084 ;src\/GameLogic.h:284: }
      002CD6 DD F9            [10] 9085 	ld	sp,ix
      002CD8 DD E1            [14] 9086 	pop	ix
      002CDA C9               [10] 9087 	ret
      002CDB                       9088 ___str_7:
      002CDB 47 41 4D 45 20 4F 56  9089 	.ascii "GAME OVER"
             45 52
      002CE4 00                    9090 	.db 0x00
                                   9091 ;src\/GameLogic.h:286: void TestCase() {
                                   9092 ;	---------------------------------
                                   9093 ; Function TestCase
                                   9094 ; ---------------------------------
      002CE5                       9095 _TestCase::
                                   9096 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      002CE5 21r20r00         [10] 9097 	ld	hl, #(_playfield + 0x0020)
      002CE8 36 04            [10] 9098 	ld	(hl), #0x04
                                   9099 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      002CEA 21r21r00         [10] 9100 	ld	hl, #(_playfield + 0x0021)
      002CED 36 0C            [10] 9101 	ld	(hl), #0x0c
                                   9102 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002CEF 21r0Ar00         [10] 9103 	ld	hl, #(_playfield + 0x000a)
      002CF2 36 0C            [10] 9104 	ld	(hl), #0x0c
                                   9105 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002CF4 21r16r00         [10] 9106 	ld	hl, #(_playfield + 0x0016)
      002CF7 36 0C            [10] 9107 	ld	(hl), #0x0c
                                   9108 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      002CF9 21r22r00         [10] 9109 	ld	hl, #(_playfield + 0x0022)
      002CFC 36 08            [10] 9110 	ld	(hl), #0x08
                                   9111 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      002CFE 21r3Ar00         [10] 9112 	ld	hl, #(_playfield + 0x003a)
      002D01 36 08            [10] 9113 	ld	(hl), #0x08
                                   9114 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      002D03 21r46r00         [10] 9115 	ld	hl, #(_playfield + 0x0046)
      002D06 36 0C            [10] 9116 	ld	(hl), #0x0c
                                   9117 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      002D08 21r0Br00         [10] 9118 	ld	hl, #(_playfield + 0x000b)
      002D0B 36 04            [10] 9119 	ld	(hl), #0x04
                                   9120 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      002D0D 21r17r00         [10] 9121 	ld	hl, #(_playfield + 0x0017)
      002D10 36 04            [10] 9122 	ld	(hl), #0x04
                                   9123 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      002D12 21r23r00         [10] 9124 	ld	hl, #(_playfield + 0x0023)
      002D15 36 08            [10] 9125 	ld	(hl), #0x08
                                   9126 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      002D17 21r2Fr00         [10] 9127 	ld	hl, #(_playfield + 0x002f)
      002D1A 36 00            [10] 9128 	ld	(hl), #0x00
                                   9129 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      002D1C 21r3Br00         [10] 9130 	ld	hl, #(_playfield + 0x003b)
      002D1F 36 08            [10] 9131 	ld	(hl), #0x08
                                   9132 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      002D21 21r47r00         [10] 9133 	ld	hl, #(_playfield + 0x0047)
      002D24 36 08            [10] 9134 	ld	(hl), #0x08
                                   9135 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      002D26 3E 0C            [ 7] 9136 	ld	a, #0x0c
      002D28 32r90r00         [13] 9137 	ld	(#_topPiece), a
                                   9138 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   9139 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      002D2B 3E 08            [ 7] 9140 	ld	a,#0x08
      002D2D 32r91r00         [13] 9141 	ld	(#_midPiece),a
      002D30 32r92r00         [13] 9142 	ld	(#_bottomPiece), a
                                   9143 ;src\/GameLogic.h:326: }
      002D33 C9               [10] 9144 	ret
                                   9145 ;src\/GameLogic.h:328: void InitGame() {
                                   9146 ;	---------------------------------
                                   9147 ; Function InitGame
                                   9148 ; ---------------------------------
      002D34                       9149 _InitGame::
                                   9150 ;src\/GameLogic.h:330: gameOver = FALSE;
      002D34 21r00r00         [10] 9151 	ld	hl, #_gameOver
      002D37 36 00            [10] 9152 	ld	(hl), #0x00
                                   9153 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      002D39 21r02r00         [10] 9154 	ld	hl, #_line
      002D3C 36 00            [10] 9155 	ld	(hl), #0x00
                                   9156 ;src\/GameLogic.h:332: col = INITIAL_COL;
      002D3E 21r01r00         [10] 9157 	ld	hl, #_col
      002D41 36 02            [10] 9158 	ld	(hl), #0x02
                                   9159 ;src\/GameLogic.h:334: blocksRemoved = 0;
      002D43 21 00 00         [10] 9160 	ld	hl, #0x0000
      002D46 22r04r00         [16] 9161 	ld	(_blocksRemoved), hl
                                   9162 ;src\/GameLogic.h:335: level = 1;
      002D49 21r06r00         [10] 9163 	ld	hl, #_level
      002D4C 36 01            [10] 9164 	ld	(hl), #0x01
                                   9165 ;src\/GameLogic.h:336: newLevel = FALSE;
      002D4E 21r07r00         [10] 9166 	ld	hl, #_newLevel
      002D51 36 00            [10] 9167 	ld	(hl), #0x00
                                   9168 ;src\/GameLogic.h:337: speed = 60;
      002D53 21r96r00         [10] 9169 	ld	hl, #_speed
      002D56 36 3C            [10] 9170 	ld	(hl), #0x3c
                                   9171 ;src\/GameLogic.h:339: InitVRAM();
      002D58 CDr66r1C         [17] 9172 	call	_InitVRAM
                                   9173 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002D5B 3Ar08r00         [13] 9174 	ld	a, (#_rndSeed + 0)
      002D5E 5F               [ 4] 9175 	ld	e, a
      002D5F 3A 9E FC         [13] 9176 	ld	a, (#_JIFFY + 0)
      002D62 67               [ 4] 9177 	ld	h, a
      002D63 2E 00            [ 7] 9178 	ld	l, #0x00
      002D65 55               [ 4] 9179 	ld	d, l
      002D66 06 08            [ 7] 9180 	ld	b, #0x08
      002D68                       9181 00133$:
      002D68 29               [11] 9182 	add	hl, hl
      002D69 30 01            [12] 9183 	jr	NC, 00134$
      002D6B 19               [11] 9184 	add	hl, de
      002D6C                       9185 00134$:
      002D6C 10 FA            [13] 9186 	djnz	00133$
      002D6E 7D               [ 4] 9187 	ld	a, l
      002D6F C6 63            [ 7] 9188 	add	a, #0x63
      002D71 4F               [ 4] 9189 	ld	c, a
      002D72 3Ar08r00         [13] 9190 	ld	a, (#_rndSeed + 0)
      002D75 5F               [ 4] 9191 	ld	e, a
      002D76 3A 9E FC         [13] 9192 	ld	a, (#_JIFFY + 0)
      002D79 67               [ 4] 9193 	ld	h, a
      002D7A 2E 00            [ 7] 9194 	ld	l, #0x00
      002D7C 55               [ 4] 9195 	ld	d, l
      002D7D 06 08            [ 7] 9196 	ld	b, #0x08
      002D7F                       9197 00135$:
      002D7F 29               [11] 9198 	add	hl, hl
      002D80 30 01            [12] 9199 	jr	NC, 00136$
      002D82 19               [11] 9200 	add	hl, de
      002D83                       9201 00136$:
      002D83 10 FA            [13] 9202 	djnz	00135$
      002D85 79               [ 4] 9203 	ld	a, c
      002D86 F5               [11] 9204 	push	af
      002D87 7D               [ 4] 9205 	ld	a, l
      002D88 33               [ 6] 9206 	inc	sp
      002D89 F5               [11] 9207 	push	af
      002D8A 33               [ 6] 9208 	inc	sp
      002D8B 3Ar08r00         [13] 9209 	ld	a,(#_rndSeed + 0)
      002D8E F5               [11] 9210 	push	af
      002D8F 33               [ 6] 9211 	inc	sp
      002D90 CDr50r00         [17] 9212 	call	_InitRnd
      002D93 F1               [10] 9213 	pop	af
      002D94 33               [ 6] 9214 	inc	sp
                                   9215 ;src\/GameLogic.h:345: RandomPiece();
      002D95 CDrD6r27         [17] 9216 	call	_RandomPiece
                                   9217 ;src\/GameLogic.h:346: RandomPiece();
      002D98 CDrD6r27         [17] 9218 	call	_RandomPiece
                                   9219 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002D9B 0E 00            [ 7] 9220 	ld	c, #0x00
      002D9D                       9221 00107$:
      002D9D 79               [ 4] 9222 	ld	a, c
      002D9E D6 0C            [ 7] 9223 	sub	a, #0x0c
      002DA0 30 20            [12] 9224 	jr	NC, 00102$
                                   9225 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002DA2 06 00            [ 7] 9226 	ld	b, #0x00
      002DA4                       9227 00104$:
      002DA4 78               [ 4] 9228 	ld	a, b
      002DA5 D6 06            [ 7] 9229 	sub	a, #0x06
      002DA7 30 16            [12] 9230 	jr	NC, 00108$
                                   9231 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      002DA9 58               [ 4] 9232 	ld	e, b
      002DAA 16 00            [ 7] 9233 	ld	d, #0x00
      002DAC 6B               [ 4] 9234 	ld	l, e
      002DAD 62               [ 4] 9235 	ld	h, d
      002DAE 29               [11] 9236 	add	hl, hl
      002DAF 19               [11] 9237 	add	hl, de
      002DB0 29               [11] 9238 	add	hl, hl
      002DB1 29               [11] 9239 	add	hl, hl
      002DB2 11r00r00         [10] 9240 	ld	de, #_playfield
      002DB5 19               [11] 9241 	add	hl, de
      002DB6 59               [ 4] 9242 	ld	e, c
      002DB7 16 00            [ 7] 9243 	ld	d, #0x00
      002DB9 19               [11] 9244 	add	hl, de
      002DBA 36 00            [10] 9245 	ld	(hl), #0x00
                                   9246 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002DBC 04               [ 4] 9247 	inc	b
      002DBD 18 E5            [12] 9248 	jr	00104$
      002DBF                       9249 00108$:
                                   9250 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002DBF 0C               [ 4] 9251 	inc	c
      002DC0 18 DB            [12] 9252 	jr	00107$
      002DC2                       9253 00102$:
                                   9254 ;src\/GameLogic.h:360: DrawBackground();
      002DC2 CDr37r1C         [17] 9255 	call	_DrawBackground
                                   9256 ;src\/GameLogic.h:362: DrawPlayfield();
      002DC5 CDrE0r1F         [17] 9257 	call	_DrawPlayfield
                                   9258 ;src\/GameLogic.h:364: DrawScore();
      002DC8 CDr8Fr1A         [17] 9259 	call	_DrawScore
                                   9260 ;src\/GameLogic.h:366: ShowCountdown();
      002DCB CDr10r11         [17] 9261 	call	_ShowCountdown
                                   9262 ;src\/GameLogic.h:368: DrawNextPiece();
      002DCE CDrC0r16         [17] 9263 	call	_DrawNextPiece
                                   9264 ;src\/GameLogic.h:370: GameLoop();
                                   9265 ;src\/GameLogic.h:371: }
      002DD1 C3r0Br29         [10] 9266 	jp	_GameLoop
                                   9267 ;src\/Intro.h:1: void ChangeFontColor(byte color) {
                                   9268 ;	---------------------------------
                                   9269 ; Function ChangeFontColor
                                   9270 ; ---------------------------------
      002DD4                       9271 _ChangeFontColor::
                                   9272 ;src\/Intro.h:3: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002DD4 21 02 00         [10] 9273 	ld	hl, #2
      002DD7 39               [11] 9274 	add	hl, sp
      002DD8 7E               [ 7] 9275 	ld	a, (hl)
      002DD9 F5               [11] 9276 	push	af
      002DDA 33               [ 6] 9277 	inc	sp
      002DDB 21 00 03         [10] 9278 	ld	hl, #0x0300
      002DDE E5               [11] 9279 	push	hl
      002DDF 21 78 29         [10] 9280 	ld	hl, #0x2978
      002DE2 E5               [11] 9281 	push	hl
      002DE3 CDr00r00         [17] 9282 	call	_FILVRM
      002DE6 F1               [10] 9283 	pop	af
      002DE7 F1               [10] 9284 	pop	af
      002DE8 33               [ 6] 9285 	inc	sp
                                   9286 ;src\/Intro.h:5: }
      002DE9 C9               [10] 9287 	ret
                                   9288 ;src\/Intro.h:33: void FadeOut() {
                                   9289 ;	---------------------------------
                                   9290 ; Function FadeOut
                                   9291 ; ---------------------------------
      002DEA                       9292 _FadeOut::
      002DEA 3B               [ 6] 9293 	dec	sp
                                   9294 ;src\/Intro.h:38: ChangeFontColor(0x40);
      002DEB 3E 40            [ 7] 9295 	ld	a, #0x40
      002DED F5               [11] 9296 	push	af
      002DEE 33               [ 6] 9297 	inc	sp
      002DEF CDrD4r2D         [17] 9298 	call	_ChangeFontColor
      002DF2 33               [ 6] 9299 	inc	sp
                                   9300 ;src\/Intro.h:45: while(counter++ < 105) {
      002DF3 AF               [ 4] 9301 	xor	a, a
      002DF4 FD 21 00 00      [14] 9302 	ld	iy, #0
      002DF8 FD 39            [15] 9303 	add	iy, sp
      002DFA FD 77 00         [19] 9304 	ld	0 (iy), a
      002DFD                       9305 00121$:
      002DFD FD 21 00 00      [14] 9306 	ld	iy, #0
      002E01 FD 39            [15] 9307 	add	iy, sp
      002E03 FD 7E 00         [19] 9308 	ld	a, 0 (iy)
      002E06 D6 69            [ 7] 9309 	sub	a, #0x69
      002E08 D2rC3r2E         [10] 9310 	jp	NC, 00123$
      002E0B FD 34 00         [23] 9311 	inc	0 (iy)
                                   9312 ;src\/Intro.h:46: byte lastJiffy = JIFFY;
      002E0E 21 9E FC         [10] 9313 	ld	hl, #_JIFFY
      002E11 4E               [ 7] 9314 	ld	c, (hl)
                                   9315 ;src\/Intro.h:47: while (JIFFY == lastJiffy) {
      002E12                       9316 00101$:
      002E12 59               [ 4] 9317 	ld	e, c
      002E13 16 00            [ 7] 9318 	ld	d, #0x00
      002E15 2A 9E FC         [16] 9319 	ld	hl, (_JIFFY)
      002E18 BF               [ 4] 9320 	cp	a, a
      002E19 ED 52            [15] 9321 	sbc	hl, de
      002E1B 28 F5            [12] 9322 	jr	Z, 00101$
                                   9323 ;src\/Intro.h:50: if(counter == 90) {
      002E1D 21 00 00         [10] 9324 	ld	hl, #0
      002E20 39               [11] 9325 	add	hl, sp
      002E21 7E               [ 7] 9326 	ld	a, (hl)
      002E22 D6 5A            [ 7] 9327 	sub	a, #0x5a
      002E24 20 12            [12] 9328 	jr	NZ, 00119$
                                   9329 ;src\/Intro.h:51: ChangeFontColor(0x40);
      002E26 3E 40            [ 7] 9330 	ld	a, #0x40
      002E28 F5               [11] 9331 	push	af
      002E29 33               [ 6] 9332 	inc	sp
      002E2A CDrD4r2D         [17] 9333 	call	_ChangeFontColor
      002E2D 33               [ 6] 9334 	inc	sp
                                   9335 ;src\/Intro.h:52: Wait(5);
      002E2E 21 05 00         [10] 9336 	ld	hl, #0x0005
      002E31 E5               [11] 9337 	push	hl
      002E32 CDr00r00         [17] 9338 	call	_Wait
      002E35 F1               [10] 9339 	pop	af
      002E36 18 C5            [12] 9340 	jr	00121$
      002E38                       9341 00119$:
                                   9342 ;src\/Intro.h:54: else if(counter == 75) {
      002E38 21 00 00         [10] 9343 	ld	hl, #0
      002E3B 39               [11] 9344 	add	hl, sp
      002E3C 7E               [ 7] 9345 	ld	a, (hl)
      002E3D D6 4B            [ 7] 9346 	sub	a, #0x4b
      002E3F 20 12            [12] 9347 	jr	NZ, 00116$
                                   9348 ;src\/Intro.h:55: ChangeFontColor(0x50);
      002E41 3E 50            [ 7] 9349 	ld	a, #0x50
      002E43 F5               [11] 9350 	push	af
      002E44 33               [ 6] 9351 	inc	sp
      002E45 CDrD4r2D         [17] 9352 	call	_ChangeFontColor
      002E48 33               [ 6] 9353 	inc	sp
                                   9354 ;src\/Intro.h:56: Wait(5);
      002E49 21 05 00         [10] 9355 	ld	hl, #0x0005
      002E4C E5               [11] 9356 	push	hl
      002E4D CDr00r00         [17] 9357 	call	_Wait
      002E50 F1               [10] 9358 	pop	af
      002E51 18 AA            [12] 9359 	jr	00121$
      002E53                       9360 00116$:
                                   9361 ;src\/Intro.h:58: else if(counter == 60) {
      002E53 21 00 00         [10] 9362 	ld	hl, #0
      002E56 39               [11] 9363 	add	hl, sp
      002E57 7E               [ 7] 9364 	ld	a, (hl)
      002E58 D6 3C            [ 7] 9365 	sub	a, #0x3c
      002E5A 20 12            [12] 9366 	jr	NZ, 00113$
                                   9367 ;src\/Intro.h:59: ChangeFontColor(0xe0);
      002E5C 3E E0            [ 7] 9368 	ld	a, #0xe0
      002E5E F5               [11] 9369 	push	af
      002E5F 33               [ 6] 9370 	inc	sp
      002E60 CDrD4r2D         [17] 9371 	call	_ChangeFontColor
      002E63 33               [ 6] 9372 	inc	sp
                                   9373 ;src\/Intro.h:60: Wait(5);
      002E64 21 05 00         [10] 9374 	ld	hl, #0x0005
      002E67 E5               [11] 9375 	push	hl
      002E68 CDr00r00         [17] 9376 	call	_Wait
      002E6B F1               [10] 9377 	pop	af
      002E6C 18 8F            [12] 9378 	jr	00121$
      002E6E                       9379 00113$:
                                   9380 ;src\/Intro.h:62: else if(counter == 45) {
      002E6E 21 00 00         [10] 9381 	ld	hl, #0
      002E71 39               [11] 9382 	add	hl, sp
      002E72 7E               [ 7] 9383 	ld	a, (hl)
      002E73 D6 2D            [ 7] 9384 	sub	a, #0x2d
      002E75 20 13            [12] 9385 	jr	NZ, 00110$
                                   9386 ;src\/Intro.h:63: ChangeFontColor(0xf0);
      002E77 3E F0            [ 7] 9387 	ld	a, #0xf0
      002E79 F5               [11] 9388 	push	af
      002E7A 33               [ 6] 9389 	inc	sp
      002E7B CDrD4r2D         [17] 9390 	call	_ChangeFontColor
      002E7E 33               [ 6] 9391 	inc	sp
                                   9392 ;src\/Intro.h:64: Wait(180);
      002E7F 21 B4 00         [10] 9393 	ld	hl, #0x00b4
      002E82 E5               [11] 9394 	push	hl
      002E83 CDr00r00         [17] 9395 	call	_Wait
      002E86 F1               [10] 9396 	pop	af
      002E87 C3rFDr2D         [10] 9397 	jp	00121$
      002E8A                       9398 00110$:
                                   9399 ;src\/Intro.h:66: else if(counter == 30) {
      002E8A 21 00 00         [10] 9400 	ld	hl, #0
      002E8D 39               [11] 9401 	add	hl, sp
      002E8E 7E               [ 7] 9402 	ld	a, (hl)
      002E8F D6 1E            [ 7] 9403 	sub	a, #0x1e
      002E91 20 13            [12] 9404 	jr	NZ, 00107$
                                   9405 ;src\/Intro.h:67: ChangeFontColor(0xe0);
      002E93 3E E0            [ 7] 9406 	ld	a, #0xe0
      002E95 F5               [11] 9407 	push	af
      002E96 33               [ 6] 9408 	inc	sp
      002E97 CDrD4r2D         [17] 9409 	call	_ChangeFontColor
      002E9A 33               [ 6] 9410 	inc	sp
                                   9411 ;src\/Intro.h:68: Wait(5);
      002E9B 21 05 00         [10] 9412 	ld	hl, #0x0005
      002E9E E5               [11] 9413 	push	hl
      002E9F CDr00r00         [17] 9414 	call	_Wait
      002EA2 F1               [10] 9415 	pop	af
      002EA3 C3rFDr2D         [10] 9416 	jp	00121$
      002EA6                       9417 00107$:
                                   9418 ;src\/Intro.h:70: else if(counter == 15) {
      002EA6 21 00 00         [10] 9419 	ld	hl, #0
      002EA9 39               [11] 9420 	add	hl, sp
      002EAA 7E               [ 7] 9421 	ld	a, (hl)
      002EAB D6 0F            [ 7] 9422 	sub	a, #0x0f
      002EAD C2rFDr2D         [10] 9423 	jp	NZ,00121$
                                   9424 ;src\/Intro.h:72: ChangeFontColor(0x50);
      002EB0 3E 50            [ 7] 9425 	ld	a, #0x50
      002EB2 F5               [11] 9426 	push	af
      002EB3 33               [ 6] 9427 	inc	sp
      002EB4 CDrD4r2D         [17] 9428 	call	_ChangeFontColor
      002EB7 33               [ 6] 9429 	inc	sp
                                   9430 ;src\/Intro.h:73: Wait(5);
      002EB8 21 05 00         [10] 9431 	ld	hl, #0x0005
      002EBB E5               [11] 9432 	push	hl
      002EBC CDr00r00         [17] 9433 	call	_Wait
      002EBF F1               [10] 9434 	pop	af
      002EC0 C3rFDr2D         [10] 9435 	jp	00121$
      002EC3                       9436 00123$:
                                   9437 ;src\/Intro.h:77: ChangeFontColor(0x10); // Hide text
      002EC3 3E 10            [ 7] 9438 	ld	a, #0x10
      002EC5 F5               [11] 9439 	push	af
      002EC6 33               [ 6] 9440 	inc	sp
      002EC7 CDrD4r2D         [17] 9441 	call	_ChangeFontColor
      002ECA 33               [ 6] 9442 	inc	sp
                                   9443 ;src\/Intro.h:78: Wait(60);
      002ECB 21 3C 00         [10] 9444 	ld	hl, #0x003c
      002ECE E5               [11] 9445 	push	hl
      002ECF CDr00r00         [17] 9446 	call	_Wait
      002ED2 F1               [10] 9447 	pop	af
                                   9448 ;src\/Intro.h:80: }
      002ED3 33               [ 6] 9449 	inc	sp
      002ED4 C9               [10] 9450 	ret
                                   9451 ;src\/Intro.h:82: void Intro() {
                                   9452 ;	---------------------------------
                                   9453 ; Function Intro
                                   9454 ; ---------------------------------
      002ED5                       9455 _Intro::
                                   9456 ;src\/Intro.h:84: InitVRAM();
      002ED5 CDr66r1C         [17] 9457 	call	_InitVRAM
                                   9458 ;src\/Intro.h:86: ChangeFontColor(0x10); // Hide text
      002ED8 3E 10            [ 7] 9459 	ld	a, #0x10
      002EDA F5               [11] 9460 	push	af
      002EDB 33               [ 6] 9461 	inc	sp
      002EDC CDrD4r2D         [17] 9462 	call	_ChangeFontColor
      002EDF 33               [ 6] 9463 	inc	sp
                                   9464 ;src\/Intro.h:88: DrawString("A game by ", 11, 9);
      002EE0 11 0B 09         [10] 9465 	ld	de, #0x090b
      002EE3 D5               [11] 9466 	push	de
      002EE4 21r6Ar2F         [10] 9467 	ld	hl, #___str_8
      002EE7 E5               [11] 9468 	push	hl
      002EE8 CDrCCr12         [17] 9469 	call	_DrawString
      002EEB F1               [10] 9470 	pop	af
      002EEC F1               [10] 9471 	pop	af
                                   9472 ;src\/Intro.h:89: DrawString("ANDRE BAPTISTA  ", 9, 11);
      002EED 11 09 0B         [10] 9473 	ld	de, #0x0b09
      002EF0 D5               [11] 9474 	push	de
      002EF1 21r75r2F         [10] 9475 	ld	hl, #___str_9
      002EF4 E5               [11] 9476 	push	hl
      002EF5 CDrCCr12         [17] 9477 	call	_DrawString
      002EF8 F1               [10] 9478 	pop	af
      002EF9 F1               [10] 9479 	pop	af
                                   9480 ;src\/Intro.h:90: FadeOut();
      002EFA CDrEAr2D         [17] 9481 	call	_FadeOut
                                   9482 ;src\/Intro.h:92: ClearNamesTable();
      002EFD CDr91r12         [17] 9483 	call	_ClearNamesTable
                                   9484 ;src\/Intro.h:93: DrawString("Powered by", 11, 9);
      002F00 11 0B 09         [10] 9485 	ld	de, #0x090b
      002F03 D5               [11] 9486 	push	de
      002F04 21r86r2F         [10] 9487 	ld	hl, #___str_10
      002F07 E5               [11] 9488 	push	hl
      002F08 CDrCCr12         [17] 9489 	call	_DrawString
      002F0B F1               [10] 9490 	pop	af
      002F0C F1               [10] 9491 	pop	af
                                   9492 ;src\/Intro.h:94: DrawString("8 BIT WORKSHOP  ", 9, 11);
      002F0D 11 09 0B         [10] 9493 	ld	de, #0x0b09
      002F10 D5               [11] 9494 	push	de
      002F11 21r91r2F         [10] 9495 	ld	hl, #___str_11
      002F14 E5               [11] 9496 	push	hl
      002F15 CDrCCr12         [17] 9497 	call	_DrawString
      002F18 F1               [10] 9498 	pop	af
      002F19 F1               [10] 9499 	pop	af
                                   9500 ;src\/Intro.h:95: FadeOut();
      002F1A CDrEAr2D         [17] 9501 	call	_FadeOut
                                   9502 ;src\/Intro.h:97: ClearNamesTable();
      002F1D CDr91r12         [17] 9503 	call	_ClearNamesTable
                                   9504 ;src\/Intro.h:98: DrawString("Powered by", 11, 9);
      002F20 11 0B 09         [10] 9505 	ld	de, #0x090b
      002F23 D5               [11] 9506 	push	de
      002F24 21r86r2F         [10] 9507 	ld	hl, #___str_10
      002F27 E5               [11] 9508 	push	hl
      002F28 CDrCCr12         [17] 9509 	call	_DrawString
      002F2B F1               [10] 9510 	pop	af
      002F2C F1               [10] 9511 	pop	af
                                   9512 ;src\/Intro.h:99: DrawString(" MSX TEMPLATES  ", 9, 11);
      002F2D 11 09 0B         [10] 9513 	ld	de, #0x0b09
      002F30 D5               [11] 9514 	push	de
      002F31 21rA2r2F         [10] 9515 	ld	hl, #___str_12
      002F34 E5               [11] 9516 	push	hl
      002F35 CDrCCr12         [17] 9517 	call	_DrawString
      002F38 F1               [10] 9518 	pop	af
      002F39 F1               [10] 9519 	pop	af
                                   9520 ;src\/Intro.h:100: DrawString("by DANILO ANGELO", 8, 13);
      002F3A 11 08 0D         [10] 9521 	ld	de, #0x0d08
      002F3D D5               [11] 9522 	push	de
      002F3E 21rB3r2F         [10] 9523 	ld	hl, #___str_13
      002F41 E5               [11] 9524 	push	hl
      002F42 CDrCCr12         [17] 9525 	call	_DrawString
      002F45 F1               [10] 9526 	pop	af
      002F46 F1               [10] 9527 	pop	af
                                   9528 ;src\/Intro.h:101: FadeOut();
      002F47 CDrEAr2D         [17] 9529 	call	_FadeOut
                                   9530 ;src\/Intro.h:103: ClearNamesTable();
      002F4A CDr91r12         [17] 9531 	call	_ClearNamesTable
                                   9532 ;src\/Intro.h:104: DrawString("Beta tester", 11, 9);
      002F4D 11 0B 09         [10] 9533 	ld	de, #0x090b
      002F50 D5               [11] 9534 	push	de
      002F51 21rC4r2F         [10] 9535 	ld	hl, #___str_14
      002F54 E5               [11] 9536 	push	hl
      002F55 CDrCCr12         [17] 9537 	call	_DrawString
      002F58 F1               [10] 9538 	pop	af
      002F59 F1               [10] 9539 	pop	af
                                   9540 ;src\/Intro.h:105: DrawString("BIANCA BAPTISTA ", 9, 11);
      002F5A 11 09 0B         [10] 9541 	ld	de, #0x0b09
      002F5D D5               [11] 9542 	push	de
      002F5E 21rD0r2F         [10] 9543 	ld	hl, #___str_15
      002F61 E5               [11] 9544 	push	hl
      002F62 CDrCCr12         [17] 9545 	call	_DrawString
      002F65 F1               [10] 9546 	pop	af
      002F66 F1               [10] 9547 	pop	af
                                   9548 ;src\/Intro.h:106: FadeOut();
                                   9549 ;src\/Intro.h:108: }
      002F67 C3rEAr2D         [10] 9550 	jp	_FadeOut
      002F6A                       9551 ___str_8:
      002F6A 41 20 67 61 6D 65 20  9552 	.ascii "A game by "
             62 79 20
      002F74 00                    9553 	.db 0x00
      002F75                       9554 ___str_9:
      002F75 41 4E 44 52 45 20 42  9555 	.ascii "ANDRE BAPTISTA  "
             41 50 54 49 53 54 41
             20 20
      002F85 00                    9556 	.db 0x00
      002F86                       9557 ___str_10:
      002F86 50 6F 77 65 72 65 64  9558 	.ascii "Powered by"
             20 62 79
      002F90 00                    9559 	.db 0x00
      002F91                       9560 ___str_11:
      002F91 38 20 42 49 54 20 57  9561 	.ascii "8 BIT WORKSHOP  "
             4F 52 4B 53 48 4F 50
             20 20
      002FA1 00                    9562 	.db 0x00
      002FA2                       9563 ___str_12:
      002FA2 20 4D 53 58 20 54 45  9564 	.ascii " MSX TEMPLATES  "
             4D 50 4C 41 54 45 53
             20 20
      002FB2 00                    9565 	.db 0x00
      002FB3                       9566 ___str_13:
      002FB3 62 79 20 44 41 4E 49  9567 	.ascii "by DANILO ANGELO"
             4C 4F 20 41 4E 47 45
             4C 4F
      002FC3 00                    9568 	.db 0x00
      002FC4                       9569 ___str_14:
      002FC4 42 65 74 61 20 74 65  9570 	.ascii "Beta tester"
             73 74 65 72
      002FCF 00                    9571 	.db 0x00
      002FD0                       9572 ___str_15:
      002FD0 42 49 41 4E 43 41 20  9573 	.ascii "BIANCA BAPTISTA "
             42 41 50 54 49 53 54
             41 20
      002FE0 00                    9574 	.db 0x00
                                   9575 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   9576 ;	---------------------------------
                                   9577 ; Function SetBlock
                                   9578 ; ---------------------------------
      002FE1                       9579 _SetBlock::
      002FE1 DD E5            [15] 9580 	push	ix
      002FE3 DD 21 00 00      [14] 9581 	ld	ix,#0
      002FE7 DD 39            [15] 9582 	add	ix,sp
                                   9583 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002FE9 DD 7E 04         [19] 9584 	ld	a, 4 (ix)
      002FEC 06 00            [ 7] 9585 	ld	b, #0x00
      002FEE 4F               [ 4] 9586 	ld	c, a
      002FEF 78               [ 4] 9587 	ld	a, b
      002FF0 C6 18            [ 7] 9588 	add	a, #0x18
      002FF2 47               [ 4] 9589 	ld	b, a
      002FF3 DD 6E 05         [19] 9590 	ld	l, 5 (ix)
      002FF6 26 00            [ 7] 9591 	ld	h, #0x00
      002FF8 29               [11] 9592 	add	hl, hl
      002FF9 29               [11] 9593 	add	hl, hl
      002FFA 29               [11] 9594 	add	hl, hl
      002FFB 29               [11] 9595 	add	hl, hl
      002FFC 29               [11] 9596 	add	hl, hl
      002FFD 09               [11] 9597 	add	hl, bc
      002FFE DD 7E 06         [19] 9598 	ld	a, 6 (ix)
      003001 F5               [11] 9599 	push	af
      003002 33               [ 6] 9600 	inc	sp
      003003 E5               [11] 9601 	push	hl
      003004 CDr00r00         [17] 9602 	call	_WRTVRM
      003007 F1               [10] 9603 	pop	af
      003008 33               [ 6] 9604 	inc	sp
                                   9605 ;src\/Title.h:16: }
      003009 DD E1            [14] 9606 	pop	ix
      00300B C9               [10] 9607 	ret
                                   9608 ;src\/Title.h:18: void TitleScreen() {
                                   9609 ;	---------------------------------
                                   9610 ; Function TitleScreen
                                   9611 ; ---------------------------------
      00300C                       9612 _TitleScreen::
      00300C DD E5            [15] 9613 	push	ix
      00300E DD 21 00 00      [14] 9614 	ld	ix,#0
      003012 DD 39            [15] 9615 	add	ix,sp
      003014 21 EB FF         [10] 9616 	ld	hl, #-21
      003017 39               [11] 9617 	add	hl, sp
      003018 F9               [ 6] 9618 	ld	sp, hl
                                   9619 ;src\/Title.h:19: byte colorIndex = 0;
      003019 0E 00            [ 7] 9620 	ld	c, #0x00
                                   9621 ;src\/Title.h:34: const char blocks[] = {
      00301B 21 00 00         [10] 9622 	ld	hl, #0
      00301E 39               [11] 9623 	add	hl, sp
      00301F EB               [ 4] 9624 	ex	de, hl
      003020 3E 8E            [ 7] 9625 	ld	a, #0x8e
      003022 12               [ 7] 9626 	ld	(de), a
      003023 6B               [ 4] 9627 	ld	l, e
      003024 62               [ 4] 9628 	ld	h, d
      003025 23               [ 6] 9629 	inc	hl
      003026 36 8F            [10] 9630 	ld	(hl), #0x8f
      003028 6B               [ 4] 9631 	ld	l, e
      003029 62               [ 4] 9632 	ld	h, d
      00302A 23               [ 6] 9633 	inc	hl
      00302B 23               [ 6] 9634 	inc	hl
      00302C 36 90            [10] 9635 	ld	(hl), #0x90
      00302E 6B               [ 4] 9636 	ld	l, e
      00302F 62               [ 4] 9637 	ld	h, d
      003030 23               [ 6] 9638 	inc	hl
      003031 23               [ 6] 9639 	inc	hl
      003032 23               [ 6] 9640 	inc	hl
      003033 36 91            [10] 9641 	ld	(hl), #0x91
      003035 21 04 00         [10] 9642 	ld	hl, #0x0004
      003038 19               [11] 9643 	add	hl, de
      003039 36 92            [10] 9644 	ld	(hl), #0x92
      00303B 21 05 00         [10] 9645 	ld	hl, #0x0005
      00303E 19               [11] 9646 	add	hl, de
      00303F 36 93            [10] 9647 	ld	(hl), #0x93
      003041 21 06 00         [10] 9648 	ld	hl, #0x0006
      003044 19               [11] 9649 	add	hl, de
      003045 36 94            [10] 9650 	ld	(hl), #0x94
                                   9651 ;src\/Title.h:44: const char colors[] = { A, C, E, G }; // last item will be ignored
      003047 21 07 00         [10] 9652 	ld	hl, #7
      00304A 39               [11] 9653 	add	hl, sp
      00304B DD 75 F6         [19] 9654 	ld	-10 (ix), l
      00304E DD 74 F7         [19] 9655 	ld	-9 (ix), h
      003051 36 8E            [10] 9656 	ld	(hl), #0x8e
      003053 DD 6E F6         [19] 9657 	ld	l, -10 (ix)
      003056 DD 66 F7         [19] 9658 	ld	h, -9 (ix)
      003059 23               [ 6] 9659 	inc	hl
      00305A 36 90            [10] 9660 	ld	(hl), #0x90
      00305C DD 6E F6         [19] 9661 	ld	l, -10 (ix)
      00305F DD 66 F7         [19] 9662 	ld	h, -9 (ix)
      003062 23               [ 6] 9663 	inc	hl
      003063 23               [ 6] 9664 	inc	hl
      003064 36 92            [10] 9665 	ld	(hl), #0x92
      003066 DD 6E F6         [19] 9666 	ld	l, -10 (ix)
      003069 DD 66 F7         [19] 9667 	ld	h, -9 (ix)
      00306C 23               [ 6] 9668 	inc	hl
      00306D 23               [ 6] 9669 	inc	hl
      00306E 23               [ 6] 9670 	inc	hl
      00306F 36 94            [10] 9671 	ld	(hl), #0x94
                                   9672 ;src\/Title.h:47: InitVRAM();
      003071 C5               [11] 9673 	push	bc
      003072 D5               [11] 9674 	push	de
      003073 CDr66r1C         [17] 9675 	call	_InitVRAM
      003076 21 00 01         [10] 9676 	ld	hl, #0x0100
      003079 E5               [11] 9677 	push	hl
      00307A 21rF3r31         [10] 9678 	ld	hl, #_TitleScreen_title_65536_296
      00307D E5               [11] 9679 	push	hl
      00307E 21 00 18         [10] 9680 	ld	hl, #0x1800
      003081 E5               [11] 9681 	push	hl
      003082 CDr00r00         [17] 9682 	call	_LDIRVM
      003085 21 06 00         [10] 9683 	ld	hl, #6
      003088 39               [11] 9684 	add	hl, sp
      003089 F9               [ 6] 9685 	ld	sp, hl
      00308A 11 05 0D         [10] 9686 	ld	de, #0x0d05
      00308D D5               [11] 9687 	push	de
      00308E 21rF3r32         [10] 9688 	ld	hl, #___str_16
      003091 E5               [11] 9689 	push	hl
      003092 CDrCCr12         [17] 9690 	call	_DrawString
      003095 F1               [10] 9691 	pop	af
      003096 26 17            [ 7] 9692 	ld	h,#0x17
      003098 E3               [19] 9693 	ex	(sp),hl
      003099 33               [ 6] 9694 	inc	sp
      00309A AF               [ 4] 9695 	xor	a, a
      00309B F5               [11] 9696 	push	af
      00309C 33               [ 6] 9697 	inc	sp
      00309D 21r0Ar33         [10] 9698 	ld	hl, #___str_17
      0030A0 E5               [11] 9699 	push	hl
      0030A1 CDrCCr12         [17] 9700 	call	_DrawString
      0030A4 F1               [10] 9701 	pop	af
      0030A5 F1               [10] 9702 	pop	af
      0030A6 11 19 17         [10] 9703 	ld	de, #0x1719
      0030A9 D5               [11] 9704 	push	de
      0030AA 21r1Fr33         [10] 9705 	ld	hl, #___str_18
      0030AD E5               [11] 9706 	push	hl
      0030AE CDrCCr12         [17] 9707 	call	_DrawString
      0030B1 F1               [10] 9708 	pop	af
      0030B2 F1               [10] 9709 	pop	af
      0030B3 D1               [10] 9710 	pop	de
      0030B4 C1               [10] 9711 	pop	bc
                                   9712 ;src\/Title.h:55: while(TRUE) {
      0030B5                       9713 00120$:
                                   9714 ;src\/Title.h:56: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      0030B5 DD 36 FD 00      [19] 9715 	ld	-3 (ix), #0
                                   9716 ;src\/Title.h:60: word counter = 0;
      0030B9 AF               [ 4] 9717 	xor	a, a
      0030BA DD 77 FE         [19] 9718 	ld	-2 (ix), a
      0030BD DD 77 FF         [19] 9719 	ld	-1 (ix), a
                                   9720 ;src\/Title.h:70: do {
      0030C0                       9721 00106$:
                                   9722 ;src\/Title.h:77: col_1 = GetRandomInInterval(31, 0b00011111);
      0030C0 C5               [11] 9723 	push	bc
      0030C1 D5               [11] 9724 	push	de
      0030C2 11 1F 1F         [10] 9725 	ld	de, #0x1f1f
      0030C5 D5               [11] 9726 	push	de
      0030C6 CDrD9r00         [17] 9727 	call	_GetRandomInInterval
      0030C9 F1               [10] 9728 	pop	af
                                   9729 ;src\/Title.h:78: line_1 = GetRandomInInterval(7, 0b00000111);
      0030CA DD 75 F8         [19] 9730 	ld	-8 (ix), l
      0030CD 11 07 07         [10] 9731 	ld	de, #0x0707
      0030D0 D5               [11] 9732 	push	de
      0030D1 CDrD9r00         [17] 9733 	call	_GetRandomInInterval
      0030D4 F1               [10] 9734 	pop	af
      0030D5 D1               [10] 9735 	pop	de
      0030D6 C1               [10] 9736 	pop	bc
      0030D7 DD 75 F9         [19] 9737 	ld	-7 (ix), l
                                   9738 ;src\/Title.h:81: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      0030DA DD 6E F8         [19] 9739 	ld	l, -8 (ix)
      0030DD 3E 00            [ 7] 9740 	ld	a, #0x00
      0030DF C6 18            [ 7] 9741 	add	a, #0x18
      0030E1 67               [ 4] 9742 	ld	h, a
      0030E2 DD 7E F9         [19] 9743 	ld	a, -7 (ix)
      0030E5 06 00            [ 7] 9744 	ld	b, #0x00
      0030E7 87               [ 4] 9745 	add	a, a
      0030E8 CB 10            [ 8] 9746 	rl	b
      0030EA 87               [ 4] 9747 	add	a, a
      0030EB CB 10            [ 8] 9748 	rl	b
      0030ED 87               [ 4] 9749 	add	a, a
      0030EE CB 10            [ 8] 9750 	rl	b
      0030F0 87               [ 4] 9751 	add	a, a
      0030F1 CB 10            [ 8] 9752 	rl	b
      0030F3 87               [ 4] 9753 	add	a, a
      0030F4 CB 10            [ 8] 9754 	rl	b
      0030F6 85               [ 4] 9755 	add	a, l
      0030F7 6F               [ 4] 9756 	ld	l, a
      0030F8 78               [ 4] 9757 	ld	a, b
      0030F9 8C               [ 4] 9758 	adc	a, h
      0030FA 67               [ 4] 9759 	ld	h, a
      0030FB C5               [11] 9760 	push	bc
      0030FC D5               [11] 9761 	push	de
      0030FD CDr00r00         [17] 9762 	call	_RDVRM
      003100 D1               [10] 9763 	pop	de
      003101 C1               [10] 9764 	pop	bc
      003102 DD 75 FA         [19] 9765 	ld	-6 (ix), l
                                   9766 ;src\/Title.h:84: if(counter++ > 1000) {
      003105 DD 46 FE         [19] 9767 	ld	b, -2 (ix)
      003108 DD 6E FF         [19] 9768 	ld	l, -1 (ix)
      00310B DD 34 FE         [23] 9769 	inc	-2 (ix)
      00310E 20 03            [12] 9770 	jr	NZ, 00193$
      003110 DD 34 FF         [23] 9771 	inc	-1 (ix)
      003113                       9772 00193$:
      003113 3E E8            [ 7] 9773 	ld	a, #0xe8
      003115 B8               [ 4] 9774 	cp	a, b
      003116 3E 03            [ 7] 9775 	ld	a, #0x03
      003118 9D               [ 4] 9776 	sbc	a, l
      003119 30 0F            [12] 9777 	jr	NC, 00107$
                                   9778 ;src\/Title.h:85: colorIndex++;
      00311B 0C               [ 4] 9779 	inc	c
                                   9780 ;src\/Title.h:86: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      00311C 79               [ 4] 9781 	ld	a, c
      00311D D6 03            [ 7] 9782 	sub	a, #0x03
      00311F 38 02            [12] 9783 	jr	C, 00102$
      003121 0E 00            [ 7] 9784 	ld	c, #0x00
      003123                       9785 00102$:
                                   9786 ;src\/Title.h:101: counter = 0;
      003123 AF               [ 4] 9787 	xor	a, a
      003124 DD 77 FE         [19] 9788 	ld	-2 (ix), a
      003127 DD 77 FF         [19] 9789 	ld	-1 (ix), a
      00312A                       9790 00107$:
                                   9791 ;src\/Title.h:104: while (value == EMPTY || value == colors[colorIndex + 1]);
      00312A DD 7E FA         [19] 9792 	ld	a, -6 (ix)
      00312D B7               [ 4] 9793 	or	a, a
      00312E 28 90            [12] 9794 	jr	Z, 00106$
      003130 79               [ 4] 9795 	ld	a, c
      003131 3C               [ 4] 9796 	inc	a
      003132 F5               [11] 9797 	push	af
      003133 17               [ 4] 9798 	rla
      003134 9F               [ 4] 9799 	sbc	a, a
      003135 47               [ 4] 9800 	ld	b, a
      003136 F1               [10] 9801 	pop	af
      003137 DD 86 F6         [19] 9802 	add	a, -10 (ix)
      00313A DD 77 FB         [19] 9803 	ld	-5 (ix), a
      00313D 78               [ 4] 9804 	ld	a, b
      00313E DD 8E F7         [19] 9805 	adc	a, -9 (ix)
      003141 DD 77 FC         [19] 9806 	ld	-4 (ix), a
      003144 DD 6E FB         [19] 9807 	ld	l, -5 (ix)
      003147 DD 66 FC         [19] 9808 	ld	h, -4 (ix)
      00314A 46               [ 7] 9809 	ld	b, (hl)
      00314B DD 7E FA         [19] 9810 	ld	a, -6 (ix)
      00314E 90               [ 4] 9811 	sub	a, b
      00314F CArC0r30         [10] 9812 	jp	Z,00106$
                                   9813 ;src\/Title.h:120: for(byte i=0; i < 10 + 0; i++) {
      003152 06 00            [ 7] 9814 	ld	b, #0x00
      003154                       9815 00123$:
      003154 78               [ 4] 9816 	ld	a, b
      003155 D6 0A            [ 7] 9817 	sub	a, #0x0a
      003157 30 79            [12] 9818 	jr	NC, 00118$
                                   9819 ;src\/Title.h:122: word lastJiffy = JIFFY;
      003159 2A 9E FC         [16] 9820 	ld	hl, (_JIFFY)
      00315C DD 75 FE         [19] 9821 	ld	-2 (ix), l
      00315F DD 74 FF         [19] 9822 	ld	-1 (ix), h
                                   9823 ;src\/Title.h:123: while (JIFFY == lastJiffy) {
      003162                       9824 00109$:
      003162 FD 21 9E FC      [14] 9825 	ld	iy, #_JIFFY
      003166 FD 7E 00         [19] 9826 	ld	a, 0 (iy)
      003169 DD 96 FE         [19] 9827 	sub	a, -2 (ix)
      00316C 20 08            [12] 9828 	jr	NZ, 00195$
      00316E FD 7E 01         [19] 9829 	ld	a, 1 (iy)
      003171 DD 96 FF         [19] 9830 	sub	a, -1 (ix)
      003174 28 EC            [12] 9831 	jr	Z, 00109$
      003176                       9832 00195$:
                                   9833 ;src\/Title.h:128: SetBlock(col_1, line_1, blocks[index]);
      003176 DD 6E FD         [19] 9834 	ld	l, -3 (ix)
      003179 26 00            [ 7] 9835 	ld	h, #0x00
      00317B 19               [11] 9836 	add	hl, de
      00317C 7E               [ 7] 9837 	ld	a, (hl)
      00317D C5               [11] 9838 	push	bc
      00317E D5               [11] 9839 	push	de
      00317F F5               [11] 9840 	push	af
      003180 33               [ 6] 9841 	inc	sp
      003181 DD 66 F9         [19] 9842 	ld	h, -7 (ix)
      003184 DD 6E F8         [19] 9843 	ld	l, -8 (ix)
      003187 E5               [11] 9844 	push	hl
      003188 CDrE1r2F         [17] 9845 	call	_SetBlock
      00318B F1               [10] 9846 	pop	af
      00318C 33               [ 6] 9847 	inc	sp
      00318D D1               [10] 9848 	pop	de
      00318E C1               [10] 9849 	pop	bc
                                   9850 ;src\/Title.h:132: if(index++ >= sizeof(blocks)) index = 0;
      00318F DD 7E FD         [19] 9851 	ld	a, -3 (ix)
      003192 DD 34 FD         [23] 9852 	inc	-3 (ix)
      003195 D6 07            [ 7] 9853 	sub	a, #0x07
      003197 38 04            [12] 9854 	jr	C, 00113$
      003199 DD 36 FD 00      [19] 9855 	ld	-3 (ix), #0
      00319D                       9856 00113$:
                                   9857 ;src\/Title.h:145: spaceBar = GTTRIG(TRIG_Spacebar);
      00319D C5               [11] 9858 	push	bc
      00319E D5               [11] 9859 	push	de
      00319F 2E 00            [ 7] 9860 	ld	l, #0x00
      0031A1 CDr00r00         [17] 9861 	call	_GTTRIG
                                   9862 ;src\/Title.h:146: btn1 = GTTRIG(TRIG_Joy1_A);
      0031A4 DD 75 FF         [19] 9863 	ld	-1 (ix), l
      0031A7 2E 01            [ 7] 9864 	ld	l, #0x01
      0031A9 CDr00r00         [17] 9865 	call	_GTTRIG
      0031AC D1               [10] 9866 	pop	de
      0031AD C1               [10] 9867 	pop	bc
                                   9868 ;src\/Title.h:147: btn2 = GTTRIG(TRIG_Joy1_B);
      0031AE E5               [11] 9869 	push	hl
      0031AF C5               [11] 9870 	push	bc
      0031B0 D5               [11] 9871 	push	de
      0031B1 2E 03            [ 7] 9872 	ld	l, #0x03
      0031B3 CDr00r00         [17] 9873 	call	_GTTRIG
      0031B6 7D               [ 4] 9874 	ld	a, l
      0031B7 D1               [10] 9875 	pop	de
      0031B8 C1               [10] 9876 	pop	bc
      0031B9 E1               [10] 9877 	pop	hl
      0031BA 67               [ 4] 9878 	ld	h, a
                                   9879 ;src\/Title.h:149: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      0031BB DD 7E FF         [19] 9880 	ld	a, -1 (ix)
      0031BE 3C               [ 4] 9881 	inc	a
      0031BF 28 06            [12] 9882 	jr	Z, 00114$
      0031C1 2C               [ 4] 9883 	inc	l
      0031C2 28 03            [12] 9884 	jr	Z, 00114$
      0031C4 24               [ 4] 9885 	inc	h
      0031C5 20 08            [12] 9886 	jr	NZ, 00124$
      0031C7                       9887 00114$:
                                   9888 ;src\/Title.h:150: rndSeed = JIFFY;
      0031C7 3A 9E FC         [13] 9889 	ld	a,(#_JIFFY + 0)
      0031CA 32r08r00         [13] 9890 	ld	(#_rndSeed), a
                                   9891 ;src\/Title.h:151: return;
      0031CD 18 1F            [12] 9892 	jr	00125$
      0031CF                       9893 00124$:
                                   9894 ;src\/Title.h:120: for(byte i=0; i < 10 + 0; i++) {
      0031CF 04               [ 4] 9895 	inc	b
      0031D0 18 82            [12] 9896 	jr	00123$
      0031D2                       9897 00118$:
                                   9898 ;src\/Title.h:155: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      0031D2 DD 6E FB         [19] 9899 	ld	l, -5 (ix)
      0031D5 DD 66 FC         [19] 9900 	ld	h, -4 (ix)
      0031D8 7E               [ 7] 9901 	ld	a, (hl)
      0031D9 C5               [11] 9902 	push	bc
      0031DA D5               [11] 9903 	push	de
      0031DB F5               [11] 9904 	push	af
      0031DC 33               [ 6] 9905 	inc	sp
      0031DD DD 66 F9         [19] 9906 	ld	h, -7 (ix)
      0031E0 DD 6E F8         [19] 9907 	ld	l, -8 (ix)
      0031E3 E5               [11] 9908 	push	hl
      0031E4 CDrE1r2F         [17] 9909 	call	_SetBlock
      0031E7 F1               [10] 9910 	pop	af
      0031E8 33               [ 6] 9911 	inc	sp
      0031E9 D1               [10] 9912 	pop	de
      0031EA C1               [10] 9913 	pop	bc
      0031EB C3rB5r30         [10] 9914 	jp	00120$
      0031EE                       9915 00125$:
                                   9916 ;src\/Title.h:158: }
      0031EE DD F9            [10] 9917 	ld	sp, ix
      0031F0 DD E1            [14] 9918 	pop	ix
      0031F2 C9               [10] 9919 	ret
      0031F3                       9920 _TitleScreen_title_65536_296:
      0031F3 00                    9921 	.db #0x00	; 0
      0031F4 00                    9922 	.db #0x00	; 0
      0031F5 00                    9923 	.db #0x00	; 0
      0031F6 00                    9924 	.db #0x00	; 0
      0031F7 8E                    9925 	.db #0x8e	; 142
      0031F8 8E                    9926 	.db #0x8e	; 142
      0031F9 8E                    9927 	.db #0x8e	; 142
      0031FA 8E                    9928 	.db #0x8e	; 142
      0031FB 00                    9929 	.db #0x00	; 0
      0031FC 8E                    9930 	.db #0x8e	; 142
      0031FD 8E                    9931 	.db #0x8e	; 142
      0031FE 8E                    9932 	.db #0x8e	; 142
      0031FF 8E                    9933 	.db #0x8e	; 142
      003200 8E                    9934 	.db #0x8e	; 142
      003201 8E                    9935 	.db #0x8e	; 142
      003202 00                    9936 	.db #0x00	; 0
      003203 00                    9937 	.db #0x00	; 0
      003204 8E                    9938 	.db #0x8e	; 142
      003205 8E                    9939 	.db #0x8e	; 142
      003206 00                    9940 	.db #0x00	; 0
      003207 00                    9941 	.db #0x00	; 0
      003208 00                    9942 	.db #0x00	; 0
      003209 8E                    9943 	.db #0x8e	; 142
      00320A 8E                    9944 	.db #0x8e	; 142
      00320B 00                    9945 	.db #0x00	; 0
      00320C 00                    9946 	.db #0x00	; 0
      00320D 00                    9947 	.db #0x00	; 0
      00320E 00                    9948 	.db #0x00	; 0
      00320F 8E                    9949 	.db #0x8e	; 142
      003210 8E                    9950 	.db #0x8e	; 142
      003211 8E                    9951 	.db #0x8e	; 142
      003212 8E                    9952 	.db #0x8e	; 142
      003213 00                    9953 	.db #0x00	; 0
      003214 00                    9954 	.db #0x00	; 0
      003215 00                    9955 	.db #0x00	; 0
      003216 8E                    9956 	.db #0x8e	; 142
      003217 8E                    9957 	.db #0x8e	; 142
      003218 8E                    9958 	.db #0x8e	; 142
      003219 8E                    9959 	.db #0x8e	; 142
      00321A 8E                    9960 	.db #0x8e	; 142
      00321B 00                    9961 	.db #0x00	; 0
      00321C 8E                    9962 	.db #0x8e	; 142
      00321D 8E                    9963 	.db #0x8e	; 142
      00321E 00                    9964 	.db #0x00	; 0
      00321F 00                    9965 	.db #0x00	; 0
      003220 00                    9966 	.db #0x00	; 0
      003221 8E                    9967 	.db #0x8e	; 142
      003222 8E                    9968 	.db #0x8e	; 142
      003223 00                    9969 	.db #0x00	; 0
      003224 00                    9970 	.db #0x00	; 0
      003225 8E                    9971 	.db #0x8e	; 142
      003226 8E                    9972 	.db #0x8e	; 142
      003227 00                    9973 	.db #0x00	; 0
      003228 00                    9974 	.db #0x00	; 0
      003229 8E                    9975 	.db #0x8e	; 142
      00322A 8E                    9976 	.db #0x8e	; 142
      00322B 00                    9977 	.db #0x00	; 0
      00322C 00                    9978 	.db #0x00	; 0
      00322D 00                    9979 	.db #0x00	; 0
      00322E 8E                    9980 	.db #0x8e	; 142
      00322F 8E                    9981 	.db #0x8e	; 142
      003230 8E                    9982 	.db #0x8e	; 142
      003231 8E                    9983 	.db #0x8e	; 142
      003232 8E                    9984 	.db #0x8e	; 142
      003233 00                    9985 	.db #0x00	; 0
      003234 00                    9986 	.db #0x00	; 0
      003235 8E                    9987 	.db #0x8e	; 142
      003236 8E                    9988 	.db #0x8e	; 142
      003237 8E                    9989 	.db #0x8e	; 142
      003238 00                    9990 	.db #0x00	; 0
      003239 8E                    9991 	.db #0x8e	; 142
      00323A 8E                    9992 	.db #0x8e	; 142
      00323B 00                    9993 	.db #0x00	; 0
      00323C 8E                    9994 	.db #0x8e	; 142
      00323D 8E                    9995 	.db #0x8e	; 142
      00323E 00                    9996 	.db #0x00	; 0
      00323F 00                    9997 	.db #0x00	; 0
      003240 00                    9998 	.db #0x00	; 0
      003241 8E                    9999 	.db #0x8e	; 142
      003242 8E                   10000 	.db #0x8e	; 142
      003243 00                   10001 	.db #0x00	; 0
      003244 00                   10002 	.db #0x00	; 0
      003245 00                   10003 	.db #0x00	; 0
      003246 8E                   10004 	.db #0x8e	; 142
      003247 8E                   10005 	.db #0x8e	; 142
      003248 00                   10006 	.db #0x00	; 0
      003249 8E                   10007 	.db #0x8e	; 142
      00324A 8E                   10008 	.db #0x8e	; 142
      00324B 00                   10009 	.db #0x00	; 0
      00324C 00                   10010 	.db #0x00	; 0
      00324D 8E                   10011 	.db #0x8e	; 142
      00324E 8E                   10012 	.db #0x8e	; 142
      00324F 8E                   10013 	.db #0x8e	; 142
      003250 00                   10014 	.db #0x00	; 0
      003251 8E                   10015 	.db #0x8e	; 142
      003252 8E                   10016 	.db #0x8e	; 142
      003253 00                   10017 	.db #0x00	; 0
      003254 8E                   10018 	.db #0x8e	; 142
      003255 8E                   10019 	.db #0x8e	; 142
      003256 8E                   10020 	.db #0x8e	; 142
      003257 00                   10021 	.db #0x00	; 0
      003258 00                   10022 	.db #0x00	; 0
      003259 8E                   10023 	.db #0x8e	; 142
      00325A 8E                   10024 	.db #0x8e	; 142
      00325B 00                   10025 	.db #0x00	; 0
      00325C 8E                   10026 	.db #0x8e	; 142
      00325D 8E                   10027 	.db #0x8e	; 142
      00325E 00                   10028 	.db #0x00	; 0
      00325F 00                   10029 	.db #0x00	; 0
      003260 8E                   10030 	.db #0x8e	; 142
      003261 8E                   10031 	.db #0x8e	; 142
      003262 00                   10032 	.db #0x00	; 0
      003263 00                   10033 	.db #0x00	; 0
      003264 00                   10034 	.db #0x00	; 0
      003265 00                   10035 	.db #0x00	; 0
      003266 00                   10036 	.db #0x00	; 0
      003267 8E                   10037 	.db #0x8e	; 142
      003268 8E                   10038 	.db #0x8e	; 142
      003269 8E                   10039 	.db #0x8e	; 142
      00326A 00                   10040 	.db #0x00	; 0
      00326B 00                   10041 	.db #0x00	; 0
      00326C 8E                   10042 	.db #0x8e	; 142
      00326D 8E                   10043 	.db #0x8e	; 142
      00326E 8E                   10044 	.db #0x8e	; 142
      00326F 00                   10045 	.db #0x00	; 0
      003270 00                   10046 	.db #0x00	; 0
      003271 8E                   10047 	.db #0x8e	; 142
      003272 8E                   10048 	.db #0x8e	; 142
      003273 00                   10049 	.db #0x00	; 0
      003274 8E                   10050 	.db #0x8e	; 142
      003275 8E                   10051 	.db #0x8e	; 142
      003276 00                   10052 	.db #0x00	; 0
      003277 00                   10053 	.db #0x00	; 0
      003278 00                   10054 	.db #0x00	; 0
      003279 8E                   10055 	.db #0x8e	; 142
      00327A 8E                   10056 	.db #0x8e	; 142
      00327B 00                   10057 	.db #0x00	; 0
      00327C 8E                   10058 	.db #0x8e	; 142
      00327D 8E                   10059 	.db #0x8e	; 142
      00327E 8E                   10060 	.db #0x8e	; 142
      00327F 8E                   10061 	.db #0x8e	; 142
      003280 8E                   10062 	.db #0x8e	; 142
      003281 00                   10063 	.db #0x00	; 0
      003282 00                   10064 	.db #0x00	; 0
      003283 00                   10065 	.db #0x00	; 0
      003284 00                   10066 	.db #0x00	; 0
      003285 00                   10067 	.db #0x00	; 0
      003286 00                   10068 	.db #0x00	; 0
      003287 8E                   10069 	.db #0x8e	; 142
      003288 8E                   10070 	.db #0x8e	; 142
      003289 00                   10071 	.db #0x00	; 0
      00328A 00                   10072 	.db #0x00	; 0
      00328B 00                   10073 	.db #0x00	; 0
      00328C 8E                   10074 	.db #0x8e	; 142
      00328D 8E                   10075 	.db #0x8e	; 142
      00328E 00                   10076 	.db #0x00	; 0
      00328F 00                   10077 	.db #0x00	; 0
      003290 00                   10078 	.db #0x00	; 0
      003291 8E                   10079 	.db #0x8e	; 142
      003292 8E                   10080 	.db #0x8e	; 142
      003293 00                   10081 	.db #0x00	; 0
      003294 8E                   10082 	.db #0x8e	; 142
      003295 8E                   10083 	.db #0x8e	; 142
      003296 00                   10084 	.db #0x00	; 0
      003297 00                   10085 	.db #0x00	; 0
      003298 00                   10086 	.db #0x00	; 0
      003299 8E                   10087 	.db #0x8e	; 142
      00329A 8E                   10088 	.db #0x8e	; 142
      00329B 00                   10089 	.db #0x00	; 0
      00329C 8E                   10090 	.db #0x8e	; 142
      00329D 8E                   10091 	.db #0x8e	; 142
      00329E 8E                   10092 	.db #0x8e	; 142
      00329F 8E                   10093 	.db #0x8e	; 142
      0032A0 8E                   10094 	.db #0x8e	; 142
      0032A1 00                   10095 	.db #0x00	; 0
      0032A2 00                   10096 	.db #0x00	; 0
      0032A3 00                   10097 	.db #0x00	; 0
      0032A4 00                   10098 	.db #0x00	; 0
      0032A5 00                   10099 	.db #0x00	; 0
      0032A6 00                   10100 	.db #0x00	; 0
      0032A7 8E                   10101 	.db #0x8e	; 142
      0032A8 8E                   10102 	.db #0x8e	; 142
      0032A9 00                   10103 	.db #0x00	; 0
      0032AA 00                   10104 	.db #0x00	; 0
      0032AB 00                   10105 	.db #0x00	; 0
      0032AC 8E                   10106 	.db #0x8e	; 142
      0032AD 8E                   10107 	.db #0x8e	; 142
      0032AE 00                   10108 	.db #0x00	; 0
      0032AF 00                   10109 	.db #0x00	; 0
      0032B0 00                   10110 	.db #0x00	; 0
      0032B1 8E                   10111 	.db #0x8e	; 142
      0032B2 8E                   10112 	.db #0x8e	; 142
      0032B3 00                   10113 	.db #0x00	; 0
      0032B4 8E                   10114 	.db #0x8e	; 142
      0032B5 8E                   10115 	.db #0x8e	; 142
      0032B6 8E                   10116 	.db #0x8e	; 142
      0032B7 8E                   10117 	.db #0x8e	; 142
      0032B8 8E                   10118 	.db #0x8e	; 142
      0032B9 8E                   10119 	.db #0x8e	; 142
      0032BA 8E                   10120 	.db #0x8e	; 142
      0032BB 00                   10121 	.db #0x00	; 0
      0032BC 8E                   10122 	.db #0x8e	; 142
      0032BD 8E                   10123 	.db #0x8e	; 142
      0032BE 00                   10124 	.db #0x00	; 0
      0032BF 00                   10125 	.db #0x00	; 0
      0032C0 00                   10126 	.db #0x00	; 0
      0032C1 8E                   10127 	.db #0x8e	; 142
      0032C2 00                   10128 	.db #0x00	; 0
      0032C3 00                   10129 	.db #0x00	; 0
      0032C4 00                   10130 	.db #0x00	; 0
      0032C5 00                   10131 	.db #0x00	; 0
      0032C6 00                   10132 	.db #0x00	; 0
      0032C7 8E                   10133 	.db #0x8e	; 142
      0032C8 8E                   10134 	.db #0x8e	; 142
      0032C9 00                   10135 	.db #0x00	; 0
      0032CA 00                   10136 	.db #0x00	; 0
      0032CB 00                   10137 	.db #0x00	; 0
      0032CC 8E                   10138 	.db #0x8e	; 142
      0032CD 8E                   10139 	.db #0x8e	; 142
      0032CE 8E                   10140 	.db #0x8e	; 142
      0032CF 8E                   10141 	.db #0x8e	; 142
      0032D0 8E                   10142 	.db #0x8e	; 142
      0032D1 8E                   10143 	.db #0x8e	; 142
      0032D2 8E                   10144 	.db #0x8e	; 142
      0032D3 00                   10145 	.db #0x00	; 0
      0032D4 8E                   10146 	.db #0x8e	; 142
      0032D5 8E                   10147 	.db #0x8e	; 142
      0032D6 00                   10148 	.db #0x00	; 0
      0032D7 00                   10149 	.db #0x00	; 0
      0032D8 00                   10150 	.db #0x00	; 0
      0032D9 8E                   10151 	.db #0x8e	; 142
      0032DA 8E                   10152 	.db #0x8e	; 142
      0032DB 00                   10153 	.db #0x00	; 0
      0032DC 8E                   10154 	.db #0x8e	; 142
      0032DD 8E                   10155 	.db #0x8e	; 142
      0032DE 00                   10156 	.db #0x00	; 0
      0032DF 00                   10157 	.db #0x00	; 0
      0032E0 00                   10158 	.db #0x00	; 0
      0032E1 8E                   10159 	.db #0x8e	; 142
      0032E2 00                   10160 	.db #0x00	; 0
      0032E3 00                   10161 	.db #0x00	; 0
      0032E4 00                   10162 	.db #0x00	; 0
      0032E5 00                   10163 	.db #0x00	; 0
      0032E6 00                   10164 	.db #0x00	; 0
      0032E7 8E                   10165 	.db #0x8e	; 142
      0032E8 8E                   10166 	.db #0x8e	; 142
      0032E9 00                   10167 	.db #0x00	; 0
      0032EA 00                   10168 	.db #0x00	; 0
      0032EB 00                   10169 	.db #0x00	; 0
      0032EC 8E                   10170 	.db #0x8e	; 142
      0032ED 8E                   10171 	.db #0x8e	; 142
      0032EE 00                   10172 	.db #0x00	; 0
      0032EF 00                   10173 	.db #0x00	; 0
      0032F0 00                   10174 	.db #0x00	; 0
      0032F1 8E                   10175 	.db #0x8e	; 142
      0032F2 8E                   10176 	.db #0x8e	; 142
      0032F3                      10177 ___str_16:
      0032F3 50 52 45 53 53 20 54 10178 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      003309 00                   10179 	.db 0x00
      00330A                      10180 ___str_17:
      00330A 41 4E 44 52 45 42 41 10181 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      00331E 00                   10182 	.db 0x00
      00331F                      10183 ___str_18:
      00331F 76 2E 31 2E 30 2E 30 10184 	.ascii "v.1.0.0"
      003326 00                   10185 	.db 0x00
                                  10186 ;src\main.c:109: void main() {
                                  10187 ;	---------------------------------
                                  10188 ; Function main
                                  10189 ; ---------------------------------
      003327                      10190 _main::
                                  10191 ;src\main.c:111: Intro();
      003327 CDrD5r2E         [17]10192 	call	_Intro
                                  10193 ;src\main.c:113: while(TRUE) {
      00332A                      10194 00102$:
                                  10195 ;src\main.c:115: TitleScreen();
      00332A CDr0Cr30         [17]10196 	call	_TitleScreen
                                  10197 ;src\main.c:117: InitGame();
      00332D CDr34r2D         [17]10198 	call	_InitGame
                                  10199 ;src\main.c:120: }
      003330 18 F8            [12]10200 	jr	00102$
                                  10201 	.area _CODE
                                  10202 	.area _INITIALIZER
      000000                      10203 __xinit__gameOver:
      000000 00                   10204 	.db #0x00	; 0
      000001                      10205 __xinit__col:
      000001 00                   10206 	.db #0x00	; 0
      000002                      10207 __xinit__line:
      000002 00                   10208 	.db #0x00	; 0
      000003                      10209 __xinit__counter:
      000003 00                   10210 	.db #0x00	; 0
      000004                      10211 __xinit__blocksRemoved:
      000004 00 00                10212 	.dw #0x0000
      000006                      10213 __xinit__level:
      000006 01                   10214 	.db #0x01	; 1
      000007                      10215 __xinit__newLevel:
      000007 00                   10216 	.db #0x00	; 0
      000008                      10217 __xinit__rndSeed:
      000008 00                   10218 	.db #0x00	; 0
                                  10219 	.area _CABS (ABS)
