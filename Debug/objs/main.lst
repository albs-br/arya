                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideHitSprite
                                     36 	.globl _DrawHitSprite
                                     37 	.globl _HideArrow
                                     38 	.globl _DrawArrow
                                     39 	.globl _DrawBackground
                                     40 	.globl _DrawScore
                                     41 	.globl _DrawColumn
                                     42 	.globl _DrawNumber
                                     43 	.globl _DrawString
                                     44 	.globl _DrawChar
                                     45 	.globl _GetRandomInInterval
                                     46 	.globl _GetRandom
                                     47 	.globl _InitRnd
                                     48 	.globl _Power
                                     49 	.globl _Wait
                                     50 	.globl _SNSMAT
                                     51 	.globl _GTTRIG
                                     52 	.globl _GTSTCK
                                     53 	.globl _BEEP
                                     54 	.globl _WRTPSG
                                     55 	.globl _GICINI
                                     56 	.globl _INIGRP
                                     57 	.globl _LDIRVM
                                     58 	.globl _FILVRM
                                     59 	.globl _WRTVRM
                                     60 	.globl _RDVRM
                                     61 	.globl _WRTVDP
                                     62 	.globl _ENASCR
                                     63 	.globl _DISSCR
                                     64 	.globl _d_value
                                     65 	.globl _d_line
                                     66 	.globl _d_col
                                     67 	.globl _rndSeed
                                     68 	.globl _newLevel
                                     69 	.globl _level
                                     70 	.globl _blocksRemoved
                                     71 	.globl _counter
                                     72 	.globl _line
                                     73 	.globl _col
                                     74 	.globl _gameOver
                                     75 	.globl _Rand_x
                                     76 	.globl _Rand_c
                                     77 	.globl _Rand_b
                                     78 	.globl _Rand_a
                                     79 	.globl _speed
                                     80 	.globl _bottomPiece
                                     81 	.globl _midPiece
                                     82 	.globl _topPiece
                                     83 	.globl _playfieldTemp
                                     84 	.globl _playfield
                                     85 	.globl _GETPNT
                                     86 	.globl _PUTPNT
                                     87 	.globl _REPCNT
                                     88 	.globl _SCNCNT
                                     89 	.globl _ATRBYT
                                     90 	.globl _CMASK
                                     91 	.globl _CLOC
                                     92 	.globl _BDRCLR
                                     93 	.globl _BAKCLR
                                     94 	.globl _FORCLR
                                     95 	.globl _TRGFLG
                                     96 	.globl _STATFL
                                     97 	.globl _MSX_vdp_regs
                                     98 	.globl _CNSDFG
                                     99 	.globl _CSRX
                                    100 	.globl _CSRY
                                    101 	.globl _MSX_modedata_screen3
                                    102 	.globl _MSX_modedata_screen2
                                    103 	.globl _MSX_modedata_screen1
                                    104 	.globl _MSX_modedata_screen0
                                    105 	.globl _CLIKSW
                                    106 	.globl _JIFFY
                                    107 	.globl _CLMLST
                                    108 	.globl _CRTCNT
                                    109 	.globl _LINLEN
                                    110 	.globl _LINL32
                                    111 	.globl _LINL40
                                    112 	.globl _MSX_charset
                                    113 	.globl _FONT
                                    114 	.globl _pieces
                                    115 	.globl _MSX_version
                                    116 	.globl _MSX_vdp_port_write
                                    117 	.globl _MSX_vdp_port_read
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 ;--------------------------------------------------------
                                    122 ; ram data
                                    123 ;--------------------------------------------------------
                                    124 	.area _DATA
                           000004   125 _MSX_charset	=	0x0004
                           00F3AE   126 _LINL40	=	0xf3ae
                           00F3AF   127 _LINL32	=	0xf3af
                           00F3B0   128 _LINLEN	=	0xf3b0
                           00F3B1   129 _CRTCNT	=	0xf3b1
                           00F3B1   130 _CLMLST	=	0xf3b1
                           00FC9E   131 _JIFFY	=	0xfc9e
                           00F3DB   132 _CLIKSW	=	0xf3db
                           00F3B3   133 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   134 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   135 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   136 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   137 _CSRY	=	0xf3dc
                           00F3DD   138 _CSRX	=	0xf3dd
                           00F3DE   139 _CNSDFG	=	0xf3de
                           00F3DF   140 _MSX_vdp_regs	=	0xf3df
                           00F3E7   141 _STATFL	=	0xf3e7
                           00F3E8   142 _TRGFLG	=	0xf3e8
                           00F3E9   143 _FORCLR	=	0xf3e9
                           00F3EA   144 _BAKCLR	=	0xf3ea
                           00F3EB   145 _BDRCLR	=	0xf3eb
                           00F92A   146 _CLOC	=	0xf92a
                           00F92C   147 _CMASK	=	0xf92c
                           00F3F2   148 _ATRBYT	=	0xf3f2
                           00F3F6   149 _SCNCNT	=	0xf3f6
                           00F3F7   150 _REPCNT	=	0xf3f7
                           00F3F8   151 _PUTPNT	=	0xf3f8
                           00F3FA   152 _GETPNT	=	0xf3fa
      000000                        153 _playfield::
      000000                        154 	.ds 72
      000048                        155 _playfieldTemp::
      000048                        156 	.ds 72
      000090                        157 _topPiece::
      000090                        158 	.ds 1
      000091                        159 _midPiece::
      000091                        160 	.ds 1
      000092                        161 _bottomPiece::
      000092                        162 	.ds 1
      000093                        163 _speed::
      000093                        164 	.ds 1
      000094                        165 _Rand_a::
      000094                        166 	.ds 1
      000095                        167 _Rand_b::
      000095                        168 	.ds 1
      000096                        169 _Rand_c::
      000096                        170 	.ds 1
      000097                        171 _Rand_x::
      000097                        172 	.ds 1
                                    173 ;--------------------------------------------------------
                                    174 ; ram data
                                    175 ;--------------------------------------------------------
                                    176 	.area _INITIALIZED
      000000                        177 _gameOver::
      000000                        178 	.ds 1
      000001                        179 _col::
      000001                        180 	.ds 1
      000002                        181 _line::
      000002                        182 	.ds 1
      000003                        183 _counter::
      000003                        184 	.ds 1
      000004                        185 _blocksRemoved::
      000004                        186 	.ds 2
      000006                        187 _level::
      000006                        188 	.ds 1
      000007                        189 _newLevel::
      000007                        190 	.ds 1
      000008                        191 _rndSeed::
      000008                        192 	.ds 1
      000009                        193 _d_col::
      000009                        194 	.ds 1
      00000A                        195 _d_line::
      00000A                        196 	.ds 1
      00000B                        197 _d_value::
      00000B                        198 	.ds 1
                                    199 ;--------------------------------------------------------
                                    200 ; absolute external ram data
                                    201 ;--------------------------------------------------------
                                    202 	.area _DABS (ABS)
                                    203 ;--------------------------------------------------------
                                    204 ; global & static initialisations
                                    205 ;--------------------------------------------------------
                                    206 	.area _HOME
                                    207 	.area _GSINIT
                                    208 	.area _GSFINAL
                                    209 	.area _GSINIT
                                    210 ;--------------------------------------------------------
                                    211 ; Home
                                    212 ;--------------------------------------------------------
                                    213 	.area _HOME
                                    214 	.area _HOME
                                    215 ;--------------------------------------------------------
                                    216 ; code
                                    217 ;--------------------------------------------------------
                                    218 	.area _CODE
                                    219 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    220 ;	---------------------------------
                                    221 ; Function Wait
                                    222 ; ---------------------------------
      000000                        223 _Wait::
                                    224 ;src\/Common.h:2: do {
      000000 D1               [10]  225 	pop	de
      000001 C1               [10]  226 	pop	bc
      000002 C5               [11]  227 	push	bc
      000003 D5               [11]  228 	push	de
      000004                        229 00104$:
                                    230 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  231 	ld	de, (_JIFFY)
                                    232 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        233 00101$:
      000008 2A 9E FC         [16]  234 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  235 	cp	a, a
      00000C ED 52            [15]  236 	sbc	hl, de
      00000E 28 F8            [12]  237 	jr	Z, 00101$
                                    238 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  239 	ld	e, c
      000011 50               [ 4]  240 	ld	d, b
      000012 0B               [ 6]  241 	dec	bc
      000013 7A               [ 4]  242 	ld	a, d
      000014 B3               [ 4]  243 	or	a, e
      000015 20 ED            [12]  244 	jr	NZ, 00104$
                                    245 ;src\/Common.h:8: }
      000017 C9               [10]  246 	ret
                           000006   247 _MSX_vdp_port_read	=	0x0006
                           000007   248 _MSX_vdp_port_write	=	0x0007
                           00002D   249 _MSX_version	=	0x002d
      000018                        250 _pieces:
      000018 04                     251 	.db #0x04	; 4
      000019 08                     252 	.db #0x08	; 8
      00001A 0C                     253 	.db #0x0c	; 12
      00001B 10                     254 	.db #0x10	; 16
      00001C 14                     255 	.db #0x14	; 20
                                    256 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    257 ;	---------------------------------
                                    258 ; Function Power
                                    259 ; ---------------------------------
      00001D                        260 _Power::
      00001D DD E5            [15]  261 	push	ix
      00001F DD 21 00 00      [14]  262 	ld	ix,#0
      000023 DD 39            [15]  263 	add	ix,sp
                                    264 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  265 	ld	c, 4 (ix)
      000028 06 00            [ 7]  266 	ld	b, #0x00
      00002A 69               [ 4]  267 	ld	l, c
      00002B 60               [ 4]  268 	ld	h, b
                                    269 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  270 	ld	a, 5 (ix)
      00002F B7               [ 4]  271 	or	a, a
      000030 20 05            [12]  272 	jr	NZ, 00111$
      000032 21 01 00         [10]  273 	ld	hl, #0x0001
      000035 18 16            [12]  274 	jr	00107$
                                    275 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        276 00111$:
      000037 1E 01            [ 7]  277 	ld	e, #0x01
      000039                        278 00105$:
      000039 7B               [ 4]  279 	ld	a, e
      00003A DD 96 05         [19]  280 	sub	a, 5 (ix)
      00003D 30 0E            [12]  281 	jr	NC, 00103$
                                    282 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  283 	push	bc
      000040 D5               [11]  284 	push	de
      000041 C5               [11]  285 	push	bc
      000042 E5               [11]  286 	push	hl
      000043 CDr00r00         [17]  287 	call	__mulint
      000046 F1               [10]  288 	pop	af
      000047 F1               [10]  289 	pop	af
      000048 D1               [10]  290 	pop	de
      000049 C1               [10]  291 	pop	bc
                                    292 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  293 	inc	e
      00004B 18 EC            [12]  294 	jr	00105$
      00004D                        295 00103$:
                                    296 ;src\/Math.h:10: return power;
      00004D                        297 00107$:
                                    298 ;src\/Math.h:11: }
      00004D DD E1            [14]  299 	pop	ix
      00004F C9               [10]  300 	ret
                                    301 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    302 ;	---------------------------------
                                    303 ; Function InitRnd
                                    304 ; ---------------------------------
      000050                        305 _InitRnd::
                                    306 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  307 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  308 	ld	hl, #2
      000056 39               [11]  309 	add	hl, sp
      000057 AE               [ 7]  310 	xor	a, (hl)
      000058 32r94r00         [13]  311 	ld	(_Rand_a+0), a
                                    312 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  313 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  314 	ld	hl, #3
      000061 39               [11]  315 	add	hl, sp
      000062 AE               [ 7]  316 	xor	a, (hl)
      000063 32r95r00         [13]  317 	ld	(_Rand_b+0), a
                                    318 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  319 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  320 	ld	hl, #4
      00006C 39               [11]  321 	add	hl, sp
      00006D AE               [ 7]  322 	xor	a, (hl)
      00006E 32r96r00         [13]  323 	ld	(_Rand_c+0), a
                                    324 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  325 	ld	hl, #_Rand_x
      000074 34               [11]  326 	inc	(hl)
                                    327 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  328 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  329 	ld	hl, #_Rand_c
      00007B AE               [ 7]  330 	xor	a, (hl)
      00007C 21r97r00         [10]  331 	ld	hl, #_Rand_x
      00007F AE               [ 7]  332 	xor	a, (hl)
      000080 32r94r00         [13]  333 	ld	(_Rand_a+0), a
                                    334 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  335 	ld	hl, #_Rand_b
      000086 7E               [ 7]  336 	ld	a, (hl)
      000087 FD 21r94r00      [14]  337 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  338 	add	a, 0 (iy)
      00008E 77               [ 7]  339 	ld	(hl), a
                                    340 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  341 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  342 	srl	a
      000094 21r96r00         [10]  343 	ld	hl, #_Rand_c
      000097 86               [ 7]  344 	add	a, (hl)
      000098 FD 21r94r00      [14]  345 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  346 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  347 	ld	(_Rand_c+0), a
                                    348 ;src\/Random.h:38: }
      0000A2 C9               [10]  349 	ret
                                    350 ;src\/Random.h:40: unsigned char GetRandom() {
                                    351 ;	---------------------------------
                                    352 ; Function GetRandom
                                    353 ; ---------------------------------
      0000A3                        354 _GetRandom::
                                    355 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  356 	ld	hl, #_Rand_x
      0000A6 34               [11]  357 	inc	(hl)
                                    358 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  359 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  360 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  361 	xor	a, (hl)
      0000AE 21r97r00         [10]  362 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  363 	xor	a, (hl)
      0000B2 32r94r00         [13]  364 	ld	(_Rand_a+0), a
                                    365 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  366 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  367 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  368 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  369 	add	a, 0 (iy)
      0000C0 77               [ 7]  370 	ld	(hl), a
                                    371 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  372 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  373 	srl	a
      0000C6 21r96r00         [10]  374 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  375 	add	a, (hl)
      0000CA FD 21r94r00      [14]  376 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  377 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  378 	ld	(_Rand_c+0), a
                                    379 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  380 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  381 	ld	l, a
                                    382 ;src\/Random.h:47: }
      0000D8 C9               [10]  383 	ret
                                    384 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    385 ;	---------------------------------
                                    386 ; Function GetRandomInInterval
                                    387 ; ---------------------------------
      0000D9                        388 _GetRandomInInterval::
                                    389 ;src\/Random.h:53: do {
      0000D9                        390 00101$:
                                    391 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  392 	call	_GetRandom
      0000DC 7D               [ 4]  393 	ld	a, l
      0000DD 21 03 00         [10]  394 	ld	hl, #3
      0000E0 39               [11]  395 	add	hl, sp
      0000E1 A6               [ 7]  396 	and	a, (hl)
      0000E2 4F               [ 4]  397 	ld	c, a
                                    398 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  399 	ld	hl, #2
      0000E6 39               [11]  400 	add	hl, sp
      0000E7 7E               [ 7]  401 	ld	a, (hl)
      0000E8 91               [ 4]  402 	sub	a, c
      0000E9 38 EE            [12]  403 	jr	C, 00101$
                                    404 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  405 	ld	l, c
                                    406 ;src\/Random.h:59: }
      0000EC C9               [10]  407 	ret
                                    408 ;src\/Graphics.h:12: void DrawChar(byte character, byte col, byte line) {
                                    409 ;	---------------------------------
                                    410 ; Function DrawChar
                                    411 ; ---------------------------------
      0000ED                        412 _DrawChar::
      0000ED DD E5            [15]  413 	push	ix
      0000EF DD 21 00 00      [14]  414 	ld	ix,#0
      0000F3 DD 39            [15]  415 	add	ix,sp
                                    416 ;src\/Graphics.h:13: WRTVRM(NAMTBL + (line * 32) + col, character);
      0000F5 DD 6E 06         [19]  417 	ld	l, 6 (ix)
      0000F8 26 00            [ 7]  418 	ld	h, #0x00
      0000FA 29               [11]  419 	add	hl, hl
      0000FB 29               [11]  420 	add	hl, hl
      0000FC 29               [11]  421 	add	hl, hl
      0000FD 29               [11]  422 	add	hl, hl
      0000FE 29               [11]  423 	add	hl, hl
      0000FF 01 00 18         [10]  424 	ld	bc, #0x1800
      000102 09               [11]  425 	add	hl, bc
      000103 DD 4E 05         [19]  426 	ld	c, 5 (ix)
      000106 06 00            [ 7]  427 	ld	b, #0x00
      000108 09               [11]  428 	add	hl, bc
      000109 DD 7E 04         [19]  429 	ld	a, 4 (ix)
      00010C F5               [11]  430 	push	af
      00010D 33               [ 6]  431 	inc	sp
      00010E E5               [11]  432 	push	hl
      00010F CDr00r00         [17]  433 	call	_WRTVRM
      000112 F1               [10]  434 	pop	af
      000113 33               [ 6]  435 	inc	sp
                                    436 ;src\/Graphics.h:14: }
      000114 DD E1            [14]  437 	pop	ix
      000116 C9               [10]  438 	ret
      000117                        439 _FONT:
      000117 00                     440 	.db #0x00	; 0
      000118 00                     441 	.db #0x00	; 0
      000119 00                     442 	.db #0x00	; 0
      00011A 00                     443 	.db #0x00	; 0
      00011B 00                     444 	.db #0x00	; 0
      00011C 00                     445 	.db #0x00	; 0
      00011D 00                     446 	.db #0x00	; 0
      00011E 00                     447 	.db #0x00	; 0
      00011F 30                     448 	.db #0x30	; 48	'0'
      000120 78                     449 	.db #0x78	; 120	'x'
      000121 78                     450 	.db #0x78	; 120	'x'
      000122 30                     451 	.db #0x30	; 48	'0'
      000123 30                     452 	.db #0x30	; 48	'0'
      000124 00                     453 	.db #0x00	; 0
      000125 30                     454 	.db #0x30	; 48	'0'
      000126 00                     455 	.db #0x00	; 0
      000127 6C                     456 	.db #0x6c	; 108	'l'
      000128 6C                     457 	.db #0x6c	; 108	'l'
      000129 6C                     458 	.db #0x6c	; 108	'l'
      00012A 00                     459 	.db #0x00	; 0
      00012B 00                     460 	.db #0x00	; 0
      00012C 00                     461 	.db #0x00	; 0
      00012D 00                     462 	.db #0x00	; 0
      00012E 00                     463 	.db #0x00	; 0
      00012F 6C                     464 	.db #0x6c	; 108	'l'
      000130 6C                     465 	.db #0x6c	; 108	'l'
      000131 FE                     466 	.db #0xfe	; 254
      000132 6C                     467 	.db #0x6c	; 108	'l'
      000133 FE                     468 	.db #0xfe	; 254
      000134 6C                     469 	.db #0x6c	; 108	'l'
      000135 6C                     470 	.db #0x6c	; 108	'l'
      000136 00                     471 	.db #0x00	; 0
      000137 30                     472 	.db #0x30	; 48	'0'
      000138 7C                     473 	.db #0x7c	; 124
      000139 C0                     474 	.db #0xc0	; 192
      00013A 78                     475 	.db #0x78	; 120	'x'
      00013B 0C                     476 	.db #0x0c	; 12
      00013C F8                     477 	.db #0xf8	; 248
      00013D 30                     478 	.db #0x30	; 48	'0'
      00013E 00                     479 	.db #0x00	; 0
      00013F 00                     480 	.db #0x00	; 0
      000140 C6                     481 	.db #0xc6	; 198
      000141 CC                     482 	.db #0xcc	; 204
      000142 18                     483 	.db #0x18	; 24
      000143 30                     484 	.db #0x30	; 48	'0'
      000144 66                     485 	.db #0x66	; 102	'f'
      000145 C6                     486 	.db #0xc6	; 198
      000146 00                     487 	.db #0x00	; 0
      000147 38                     488 	.db #0x38	; 56	'8'
      000148 6C                     489 	.db #0x6c	; 108	'l'
      000149 38                     490 	.db #0x38	; 56	'8'
      00014A 76                     491 	.db #0x76	; 118	'v'
      00014B DC                     492 	.db #0xdc	; 220
      00014C CC                     493 	.db #0xcc	; 204
      00014D 76                     494 	.db #0x76	; 118	'v'
      00014E 00                     495 	.db #0x00	; 0
      00014F 60                     496 	.db #0x60	; 96
      000150 60                     497 	.db #0x60	; 96
      000151 C0                     498 	.db #0xc0	; 192
      000152 00                     499 	.db #0x00	; 0
      000153 00                     500 	.db #0x00	; 0
      000154 00                     501 	.db #0x00	; 0
      000155 00                     502 	.db #0x00	; 0
      000156 00                     503 	.db #0x00	; 0
      000157 18                     504 	.db #0x18	; 24
      000158 30                     505 	.db #0x30	; 48	'0'
      000159 60                     506 	.db #0x60	; 96
      00015A 60                     507 	.db #0x60	; 96
      00015B 60                     508 	.db #0x60	; 96
      00015C 30                     509 	.db #0x30	; 48	'0'
      00015D 18                     510 	.db #0x18	; 24
      00015E 00                     511 	.db #0x00	; 0
      00015F 60                     512 	.db #0x60	; 96
      000160 30                     513 	.db #0x30	; 48	'0'
      000161 18                     514 	.db #0x18	; 24
      000162 18                     515 	.db #0x18	; 24
      000163 18                     516 	.db #0x18	; 24
      000164 30                     517 	.db #0x30	; 48	'0'
      000165 60                     518 	.db #0x60	; 96
      000166 00                     519 	.db #0x00	; 0
      000167 00                     520 	.db #0x00	; 0
      000168 66                     521 	.db #0x66	; 102	'f'
      000169 3C                     522 	.db #0x3c	; 60
      00016A FF                     523 	.db #0xff	; 255
      00016B 3C                     524 	.db #0x3c	; 60
      00016C 66                     525 	.db #0x66	; 102	'f'
      00016D 00                     526 	.db #0x00	; 0
      00016E 00                     527 	.db #0x00	; 0
      00016F 00                     528 	.db #0x00	; 0
      000170 30                     529 	.db #0x30	; 48	'0'
      000171 30                     530 	.db #0x30	; 48	'0'
      000172 FC                     531 	.db #0xfc	; 252
      000173 30                     532 	.db #0x30	; 48	'0'
      000174 30                     533 	.db #0x30	; 48	'0'
      000175 00                     534 	.db #0x00	; 0
      000176 00                     535 	.db #0x00	; 0
      000177 00                     536 	.db #0x00	; 0
      000178 00                     537 	.db #0x00	; 0
      000179 00                     538 	.db #0x00	; 0
      00017A 00                     539 	.db #0x00	; 0
      00017B 00                     540 	.db #0x00	; 0
      00017C 30                     541 	.db #0x30	; 48	'0'
      00017D 30                     542 	.db #0x30	; 48	'0'
      00017E 60                     543 	.db #0x60	; 96
      00017F 00                     544 	.db #0x00	; 0
      000180 00                     545 	.db #0x00	; 0
      000181 00                     546 	.db #0x00	; 0
      000182 FC                     547 	.db #0xfc	; 252
      000183 00                     548 	.db #0x00	; 0
      000184 00                     549 	.db #0x00	; 0
      000185 00                     550 	.db #0x00	; 0
      000186 00                     551 	.db #0x00	; 0
      000187 00                     552 	.db #0x00	; 0
      000188 00                     553 	.db #0x00	; 0
      000189 00                     554 	.db #0x00	; 0
      00018A 00                     555 	.db #0x00	; 0
      00018B 00                     556 	.db #0x00	; 0
      00018C 30                     557 	.db #0x30	; 48	'0'
      00018D 30                     558 	.db #0x30	; 48	'0'
      00018E 00                     559 	.db #0x00	; 0
      00018F 06                     560 	.db #0x06	; 6
      000190 0C                     561 	.db #0x0c	; 12
      000191 18                     562 	.db #0x18	; 24
      000192 30                     563 	.db #0x30	; 48	'0'
      000193 60                     564 	.db #0x60	; 96
      000194 C0                     565 	.db #0xc0	; 192
      000195 80                     566 	.db #0x80	; 128
      000196 00                     567 	.db #0x00	; 0
      000197 7C                     568 	.db #0x7c	; 124
      000198 C6                     569 	.db #0xc6	; 198
      000199 CE                     570 	.db #0xce	; 206
      00019A DE                     571 	.db #0xde	; 222
      00019B F6                     572 	.db #0xf6	; 246
      00019C E6                     573 	.db #0xe6	; 230
      00019D 7C                     574 	.db #0x7c	; 124
      00019E 00                     575 	.db #0x00	; 0
      00019F 30                     576 	.db #0x30	; 48	'0'
      0001A0 70                     577 	.db #0x70	; 112	'p'
      0001A1 30                     578 	.db #0x30	; 48	'0'
      0001A2 30                     579 	.db #0x30	; 48	'0'
      0001A3 30                     580 	.db #0x30	; 48	'0'
      0001A4 30                     581 	.db #0x30	; 48	'0'
      0001A5 FC                     582 	.db #0xfc	; 252
      0001A6 00                     583 	.db #0x00	; 0
      0001A7 78                     584 	.db #0x78	; 120	'x'
      0001A8 CC                     585 	.db #0xcc	; 204
      0001A9 0C                     586 	.db #0x0c	; 12
      0001AA 38                     587 	.db #0x38	; 56	'8'
      0001AB 60                     588 	.db #0x60	; 96
      0001AC C4                     589 	.db #0xc4	; 196
      0001AD FC                     590 	.db #0xfc	; 252
      0001AE 00                     591 	.db #0x00	; 0
      0001AF 78                     592 	.db #0x78	; 120	'x'
      0001B0 CC                     593 	.db #0xcc	; 204
      0001B1 0C                     594 	.db #0x0c	; 12
      0001B2 38                     595 	.db #0x38	; 56	'8'
      0001B3 0C                     596 	.db #0x0c	; 12
      0001B4 CC                     597 	.db #0xcc	; 204
      0001B5 78                     598 	.db #0x78	; 120	'x'
      0001B6 00                     599 	.db #0x00	; 0
      0001B7 1C                     600 	.db #0x1c	; 28
      0001B8 3C                     601 	.db #0x3c	; 60
      0001B9 6C                     602 	.db #0x6c	; 108	'l'
      0001BA CC                     603 	.db #0xcc	; 204
      0001BB FE                     604 	.db #0xfe	; 254
      0001BC 0C                     605 	.db #0x0c	; 12
      0001BD 1E                     606 	.db #0x1e	; 30
      0001BE 00                     607 	.db #0x00	; 0
      0001BF FC                     608 	.db #0xfc	; 252
      0001C0 C0                     609 	.db #0xc0	; 192
      0001C1 F8                     610 	.db #0xf8	; 248
      0001C2 0C                     611 	.db #0x0c	; 12
      0001C3 0C                     612 	.db #0x0c	; 12
      0001C4 CC                     613 	.db #0xcc	; 204
      0001C5 78                     614 	.db #0x78	; 120	'x'
      0001C6 00                     615 	.db #0x00	; 0
      0001C7 38                     616 	.db #0x38	; 56	'8'
      0001C8 60                     617 	.db #0x60	; 96
      0001C9 C0                     618 	.db #0xc0	; 192
      0001CA F8                     619 	.db #0xf8	; 248
      0001CB CC                     620 	.db #0xcc	; 204
      0001CC CC                     621 	.db #0xcc	; 204
      0001CD 78                     622 	.db #0x78	; 120	'x'
      0001CE 00                     623 	.db #0x00	; 0
      0001CF FC                     624 	.db #0xfc	; 252
      0001D0 CC                     625 	.db #0xcc	; 204
      0001D1 0C                     626 	.db #0x0c	; 12
      0001D2 18                     627 	.db #0x18	; 24
      0001D3 30                     628 	.db #0x30	; 48	'0'
      0001D4 30                     629 	.db #0x30	; 48	'0'
      0001D5 30                     630 	.db #0x30	; 48	'0'
      0001D6 00                     631 	.db #0x00	; 0
      0001D7 78                     632 	.db #0x78	; 120	'x'
      0001D8 CC                     633 	.db #0xcc	; 204
      0001D9 CC                     634 	.db #0xcc	; 204
      0001DA 78                     635 	.db #0x78	; 120	'x'
      0001DB CC                     636 	.db #0xcc	; 204
      0001DC CC                     637 	.db #0xcc	; 204
      0001DD 78                     638 	.db #0x78	; 120	'x'
      0001DE 00                     639 	.db #0x00	; 0
      0001DF 78                     640 	.db #0x78	; 120	'x'
      0001E0 CC                     641 	.db #0xcc	; 204
      0001E1 CC                     642 	.db #0xcc	; 204
      0001E2 7C                     643 	.db #0x7c	; 124
      0001E3 0C                     644 	.db #0x0c	; 12
      0001E4 18                     645 	.db #0x18	; 24
      0001E5 70                     646 	.db #0x70	; 112	'p'
      0001E6 00                     647 	.db #0x00	; 0
      0001E7 00                     648 	.db #0x00	; 0
      0001E8 30                     649 	.db #0x30	; 48	'0'
      0001E9 30                     650 	.db #0x30	; 48	'0'
      0001EA 00                     651 	.db #0x00	; 0
      0001EB 00                     652 	.db #0x00	; 0
      0001EC 30                     653 	.db #0x30	; 48	'0'
      0001ED 30                     654 	.db #0x30	; 48	'0'
      0001EE 00                     655 	.db #0x00	; 0
      0001EF 00                     656 	.db #0x00	; 0
      0001F0 30                     657 	.db #0x30	; 48	'0'
      0001F1 30                     658 	.db #0x30	; 48	'0'
      0001F2 00                     659 	.db #0x00	; 0
      0001F3 30                     660 	.db #0x30	; 48	'0'
      0001F4 30                     661 	.db #0x30	; 48	'0'
      0001F5 60                     662 	.db #0x60	; 96
      0001F6 00                     663 	.db #0x00	; 0
      0001F7 18                     664 	.db #0x18	; 24
      0001F8 30                     665 	.db #0x30	; 48	'0'
      0001F9 60                     666 	.db #0x60	; 96
      0001FA C0                     667 	.db #0xc0	; 192
      0001FB 60                     668 	.db #0x60	; 96
      0001FC 30                     669 	.db #0x30	; 48	'0'
      0001FD 18                     670 	.db #0x18	; 24
      0001FE 00                     671 	.db #0x00	; 0
      0001FF 00                     672 	.db #0x00	; 0
      000200 00                     673 	.db #0x00	; 0
      000201 FC                     674 	.db #0xfc	; 252
      000202 00                     675 	.db #0x00	; 0
      000203 00                     676 	.db #0x00	; 0
      000204 FC                     677 	.db #0xfc	; 252
      000205 00                     678 	.db #0x00	; 0
      000206 00                     679 	.db #0x00	; 0
      000207 60                     680 	.db #0x60	; 96
      000208 30                     681 	.db #0x30	; 48	'0'
      000209 18                     682 	.db #0x18	; 24
      00020A 0C                     683 	.db #0x0c	; 12
      00020B 18                     684 	.db #0x18	; 24
      00020C 30                     685 	.db #0x30	; 48	'0'
      00020D 60                     686 	.db #0x60	; 96
      00020E 00                     687 	.db #0x00	; 0
      00020F 78                     688 	.db #0x78	; 120	'x'
      000210 CC                     689 	.db #0xcc	; 204
      000211 0C                     690 	.db #0x0c	; 12
      000212 18                     691 	.db #0x18	; 24
      000213 30                     692 	.db #0x30	; 48	'0'
      000214 00                     693 	.db #0x00	; 0
      000215 30                     694 	.db #0x30	; 48	'0'
      000216 00                     695 	.db #0x00	; 0
      000217 7C                     696 	.db #0x7c	; 124
      000218 C6                     697 	.db #0xc6	; 198
      000219 DE                     698 	.db #0xde	; 222
      00021A DE                     699 	.db #0xde	; 222
      00021B DE                     700 	.db #0xde	; 222
      00021C C0                     701 	.db #0xc0	; 192
      00021D 78                     702 	.db #0x78	; 120	'x'
      00021E 00                     703 	.db #0x00	; 0
      00021F 30                     704 	.db #0x30	; 48	'0'
      000220 78                     705 	.db #0x78	; 120	'x'
      000221 CC                     706 	.db #0xcc	; 204
      000222 CC                     707 	.db #0xcc	; 204
      000223 FC                     708 	.db #0xfc	; 252
      000224 CC                     709 	.db #0xcc	; 204
      000225 CC                     710 	.db #0xcc	; 204
      000226 00                     711 	.db #0x00	; 0
      000227 FC                     712 	.db #0xfc	; 252
      000228 66                     713 	.db #0x66	; 102	'f'
      000229 66                     714 	.db #0x66	; 102	'f'
      00022A 7C                     715 	.db #0x7c	; 124
      00022B 66                     716 	.db #0x66	; 102	'f'
      00022C 66                     717 	.db #0x66	; 102	'f'
      00022D FC                     718 	.db #0xfc	; 252
      00022E 00                     719 	.db #0x00	; 0
      00022F 3C                     720 	.db #0x3c	; 60
      000230 66                     721 	.db #0x66	; 102	'f'
      000231 C0                     722 	.db #0xc0	; 192
      000232 C0                     723 	.db #0xc0	; 192
      000233 C0                     724 	.db #0xc0	; 192
      000234 66                     725 	.db #0x66	; 102	'f'
      000235 3C                     726 	.db #0x3c	; 60
      000236 00                     727 	.db #0x00	; 0
      000237 F8                     728 	.db #0xf8	; 248
      000238 6C                     729 	.db #0x6c	; 108	'l'
      000239 66                     730 	.db #0x66	; 102	'f'
      00023A 66                     731 	.db #0x66	; 102	'f'
      00023B 66                     732 	.db #0x66	; 102	'f'
      00023C 6C                     733 	.db #0x6c	; 108	'l'
      00023D F8                     734 	.db #0xf8	; 248
      00023E 00                     735 	.db #0x00	; 0
      00023F FE                     736 	.db #0xfe	; 254
      000240 62                     737 	.db #0x62	; 98	'b'
      000241 68                     738 	.db #0x68	; 104	'h'
      000242 78                     739 	.db #0x78	; 120	'x'
      000243 68                     740 	.db #0x68	; 104	'h'
      000244 62                     741 	.db #0x62	; 98	'b'
      000245 FE                     742 	.db #0xfe	; 254
      000246 00                     743 	.db #0x00	; 0
      000247 FE                     744 	.db #0xfe	; 254
      000248 62                     745 	.db #0x62	; 98	'b'
      000249 68                     746 	.db #0x68	; 104	'h'
      00024A 78                     747 	.db #0x78	; 120	'x'
      00024B 68                     748 	.db #0x68	; 104	'h'
      00024C 60                     749 	.db #0x60	; 96
      00024D F0                     750 	.db #0xf0	; 240
      00024E 00                     751 	.db #0x00	; 0
      00024F 3C                     752 	.db #0x3c	; 60
      000250 66                     753 	.db #0x66	; 102	'f'
      000251 C0                     754 	.db #0xc0	; 192
      000252 C0                     755 	.db #0xc0	; 192
      000253 CE                     756 	.db #0xce	; 206
      000254 66                     757 	.db #0x66	; 102	'f'
      000255 3E                     758 	.db #0x3e	; 62
      000256 00                     759 	.db #0x00	; 0
      000257 CC                     760 	.db #0xcc	; 204
      000258 CC                     761 	.db #0xcc	; 204
      000259 CC                     762 	.db #0xcc	; 204
      00025A FC                     763 	.db #0xfc	; 252
      00025B CC                     764 	.db #0xcc	; 204
      00025C CC                     765 	.db #0xcc	; 204
      00025D CC                     766 	.db #0xcc	; 204
      00025E 00                     767 	.db #0x00	; 0
      00025F 78                     768 	.db #0x78	; 120	'x'
      000260 30                     769 	.db #0x30	; 48	'0'
      000261 30                     770 	.db #0x30	; 48	'0'
      000262 30                     771 	.db #0x30	; 48	'0'
      000263 30                     772 	.db #0x30	; 48	'0'
      000264 30                     773 	.db #0x30	; 48	'0'
      000265 78                     774 	.db #0x78	; 120	'x'
      000266 00                     775 	.db #0x00	; 0
      000267 1E                     776 	.db #0x1e	; 30
      000268 0C                     777 	.db #0x0c	; 12
      000269 0C                     778 	.db #0x0c	; 12
      00026A 0C                     779 	.db #0x0c	; 12
      00026B CC                     780 	.db #0xcc	; 204
      00026C CC                     781 	.db #0xcc	; 204
      00026D 78                     782 	.db #0x78	; 120	'x'
      00026E 00                     783 	.db #0x00	; 0
      00026F E6                     784 	.db #0xe6	; 230
      000270 66                     785 	.db #0x66	; 102	'f'
      000271 6C                     786 	.db #0x6c	; 108	'l'
      000272 78                     787 	.db #0x78	; 120	'x'
      000273 6C                     788 	.db #0x6c	; 108	'l'
      000274 66                     789 	.db #0x66	; 102	'f'
      000275 E6                     790 	.db #0xe6	; 230
      000276 00                     791 	.db #0x00	; 0
      000277 F0                     792 	.db #0xf0	; 240
      000278 60                     793 	.db #0x60	; 96
      000279 60                     794 	.db #0x60	; 96
      00027A 60                     795 	.db #0x60	; 96
      00027B 62                     796 	.db #0x62	; 98	'b'
      00027C 66                     797 	.db #0x66	; 102	'f'
      00027D FE                     798 	.db #0xfe	; 254
      00027E 00                     799 	.db #0x00	; 0
      00027F C6                     800 	.db #0xc6	; 198
      000280 EE                     801 	.db #0xee	; 238
      000281 FE                     802 	.db #0xfe	; 254
      000282 FE                     803 	.db #0xfe	; 254
      000283 D6                     804 	.db #0xd6	; 214
      000284 C6                     805 	.db #0xc6	; 198
      000285 C6                     806 	.db #0xc6	; 198
      000286 00                     807 	.db #0x00	; 0
      000287 C6                     808 	.db #0xc6	; 198
      000288 E6                     809 	.db #0xe6	; 230
      000289 F6                     810 	.db #0xf6	; 246
      00028A DE                     811 	.db #0xde	; 222
      00028B CE                     812 	.db #0xce	; 206
      00028C C6                     813 	.db #0xc6	; 198
      00028D C6                     814 	.db #0xc6	; 198
      00028E 00                     815 	.db #0x00	; 0
      00028F 38                     816 	.db #0x38	; 56	'8'
      000290 6C                     817 	.db #0x6c	; 108	'l'
      000291 C6                     818 	.db #0xc6	; 198
      000292 C6                     819 	.db #0xc6	; 198
      000293 C6                     820 	.db #0xc6	; 198
      000294 6C                     821 	.db #0x6c	; 108	'l'
      000295 38                     822 	.db #0x38	; 56	'8'
      000296 00                     823 	.db #0x00	; 0
      000297 FC                     824 	.db #0xfc	; 252
      000298 66                     825 	.db #0x66	; 102	'f'
      000299 66                     826 	.db #0x66	; 102	'f'
      00029A 7C                     827 	.db #0x7c	; 124
      00029B 60                     828 	.db #0x60	; 96
      00029C 60                     829 	.db #0x60	; 96
      00029D F0                     830 	.db #0xf0	; 240
      00029E 00                     831 	.db #0x00	; 0
      00029F 78                     832 	.db #0x78	; 120	'x'
      0002A0 CC                     833 	.db #0xcc	; 204
      0002A1 CC                     834 	.db #0xcc	; 204
      0002A2 CC                     835 	.db #0xcc	; 204
      0002A3 DC                     836 	.db #0xdc	; 220
      0002A4 78                     837 	.db #0x78	; 120	'x'
      0002A5 1C                     838 	.db #0x1c	; 28
      0002A6 00                     839 	.db #0x00	; 0
      0002A7 FC                     840 	.db #0xfc	; 252
      0002A8 66                     841 	.db #0x66	; 102	'f'
      0002A9 66                     842 	.db #0x66	; 102	'f'
      0002AA 7C                     843 	.db #0x7c	; 124
      0002AB 6C                     844 	.db #0x6c	; 108	'l'
      0002AC 66                     845 	.db #0x66	; 102	'f'
      0002AD E6                     846 	.db #0xe6	; 230
      0002AE 00                     847 	.db #0x00	; 0
      0002AF 78                     848 	.db #0x78	; 120	'x'
      0002B0 CC                     849 	.db #0xcc	; 204
      0002B1 E0                     850 	.db #0xe0	; 224
      0002B2 70                     851 	.db #0x70	; 112	'p'
      0002B3 1C                     852 	.db #0x1c	; 28
      0002B4 CC                     853 	.db #0xcc	; 204
      0002B5 78                     854 	.db #0x78	; 120	'x'
      0002B6 00                     855 	.db #0x00	; 0
      0002B7 FC                     856 	.db #0xfc	; 252
      0002B8 B4                     857 	.db #0xb4	; 180
      0002B9 30                     858 	.db #0x30	; 48	'0'
      0002BA 30                     859 	.db #0x30	; 48	'0'
      0002BB 30                     860 	.db #0x30	; 48	'0'
      0002BC 30                     861 	.db #0x30	; 48	'0'
      0002BD 78                     862 	.db #0x78	; 120	'x'
      0002BE 00                     863 	.db #0x00	; 0
      0002BF CC                     864 	.db #0xcc	; 204
      0002C0 CC                     865 	.db #0xcc	; 204
      0002C1 CC                     866 	.db #0xcc	; 204
      0002C2 CC                     867 	.db #0xcc	; 204
      0002C3 CC                     868 	.db #0xcc	; 204
      0002C4 CC                     869 	.db #0xcc	; 204
      0002C5 FC                     870 	.db #0xfc	; 252
      0002C6 00                     871 	.db #0x00	; 0
      0002C7 CC                     872 	.db #0xcc	; 204
      0002C8 CC                     873 	.db #0xcc	; 204
      0002C9 CC                     874 	.db #0xcc	; 204
      0002CA CC                     875 	.db #0xcc	; 204
      0002CB CC                     876 	.db #0xcc	; 204
      0002CC 78                     877 	.db #0x78	; 120	'x'
      0002CD 30                     878 	.db #0x30	; 48	'0'
      0002CE 00                     879 	.db #0x00	; 0
      0002CF C6                     880 	.db #0xc6	; 198
      0002D0 C6                     881 	.db #0xc6	; 198
      0002D1 C6                     882 	.db #0xc6	; 198
      0002D2 D6                     883 	.db #0xd6	; 214
      0002D3 FE                     884 	.db #0xfe	; 254
      0002D4 EE                     885 	.db #0xee	; 238
      0002D5 C6                     886 	.db #0xc6	; 198
      0002D6 00                     887 	.db #0x00	; 0
      0002D7 C6                     888 	.db #0xc6	; 198
      0002D8 C6                     889 	.db #0xc6	; 198
      0002D9 6C                     890 	.db #0x6c	; 108	'l'
      0002DA 38                     891 	.db #0x38	; 56	'8'
      0002DB 38                     892 	.db #0x38	; 56	'8'
      0002DC 6C                     893 	.db #0x6c	; 108	'l'
      0002DD C6                     894 	.db #0xc6	; 198
      0002DE 00                     895 	.db #0x00	; 0
      0002DF CC                     896 	.db #0xcc	; 204
      0002E0 CC                     897 	.db #0xcc	; 204
      0002E1 CC                     898 	.db #0xcc	; 204
      0002E2 78                     899 	.db #0x78	; 120	'x'
      0002E3 30                     900 	.db #0x30	; 48	'0'
      0002E4 30                     901 	.db #0x30	; 48	'0'
      0002E5 78                     902 	.db #0x78	; 120	'x'
      0002E6 00                     903 	.db #0x00	; 0
      0002E7 FE                     904 	.db #0xfe	; 254
      0002E8 C6                     905 	.db #0xc6	; 198
      0002E9 8C                     906 	.db #0x8c	; 140
      0002EA 18                     907 	.db #0x18	; 24
      0002EB 32                     908 	.db #0x32	; 50	'2'
      0002EC 66                     909 	.db #0x66	; 102	'f'
      0002ED FE                     910 	.db #0xfe	; 254
      0002EE 00                     911 	.db #0x00	; 0
      0002EF 78                     912 	.db #0x78	; 120	'x'
      0002F0 60                     913 	.db #0x60	; 96
      0002F1 60                     914 	.db #0x60	; 96
      0002F2 60                     915 	.db #0x60	; 96
      0002F3 60                     916 	.db #0x60	; 96
      0002F4 60                     917 	.db #0x60	; 96
      0002F5 78                     918 	.db #0x78	; 120	'x'
      0002F6 00                     919 	.db #0x00	; 0
      0002F7 C0                     920 	.db #0xc0	; 192
      0002F8 60                     921 	.db #0x60	; 96
      0002F9 30                     922 	.db #0x30	; 48	'0'
      0002FA 18                     923 	.db #0x18	; 24
      0002FB 0C                     924 	.db #0x0c	; 12
      0002FC 06                     925 	.db #0x06	; 6
      0002FD 02                     926 	.db #0x02	; 2
      0002FE 00                     927 	.db #0x00	; 0
      0002FF 78                     928 	.db #0x78	; 120	'x'
      000300 18                     929 	.db #0x18	; 24
      000301 18                     930 	.db #0x18	; 24
      000302 18                     931 	.db #0x18	; 24
      000303 18                     932 	.db #0x18	; 24
      000304 18                     933 	.db #0x18	; 24
      000305 78                     934 	.db #0x78	; 120	'x'
      000306 00                     935 	.db #0x00	; 0
      000307 10                     936 	.db #0x10	; 16
      000308 38                     937 	.db #0x38	; 56	'8'
      000309 6C                     938 	.db #0x6c	; 108	'l'
      00030A C6                     939 	.db #0xc6	; 198
      00030B 00                     940 	.db #0x00	; 0
      00030C 00                     941 	.db #0x00	; 0
      00030D 00                     942 	.db #0x00	; 0
      00030E 00                     943 	.db #0x00	; 0
      00030F 00                     944 	.db #0x00	; 0
      000310 00                     945 	.db #0x00	; 0
      000311 00                     946 	.db #0x00	; 0
      000312 00                     947 	.db #0x00	; 0
      000313 00                     948 	.db #0x00	; 0
      000314 00                     949 	.db #0x00	; 0
      000315 00                     950 	.db #0x00	; 0
      000316 FF                     951 	.db #0xff	; 255
      000317 30                     952 	.db #0x30	; 48	'0'
      000318 30                     953 	.db #0x30	; 48	'0'
      000319 18                     954 	.db #0x18	; 24
      00031A 00                     955 	.db #0x00	; 0
      00031B 00                     956 	.db #0x00	; 0
      00031C 00                     957 	.db #0x00	; 0
      00031D 00                     958 	.db #0x00	; 0
      00031E 00                     959 	.db #0x00	; 0
      00031F 00                     960 	.db #0x00	; 0
      000320 00                     961 	.db #0x00	; 0
      000321 78                     962 	.db #0x78	; 120	'x'
      000322 0C                     963 	.db #0x0c	; 12
      000323 7C                     964 	.db #0x7c	; 124
      000324 CC                     965 	.db #0xcc	; 204
      000325 76                     966 	.db #0x76	; 118	'v'
      000326 00                     967 	.db #0x00	; 0
      000327 E0                     968 	.db #0xe0	; 224
      000328 60                     969 	.db #0x60	; 96
      000329 60                     970 	.db #0x60	; 96
      00032A 7C                     971 	.db #0x7c	; 124
      00032B 66                     972 	.db #0x66	; 102	'f'
      00032C 66                     973 	.db #0x66	; 102	'f'
      00032D DC                     974 	.db #0xdc	; 220
      00032E 00                     975 	.db #0x00	; 0
      00032F 00                     976 	.db #0x00	; 0
      000330 00                     977 	.db #0x00	; 0
      000331 78                     978 	.db #0x78	; 120	'x'
      000332 CC                     979 	.db #0xcc	; 204
      000333 C0                     980 	.db #0xc0	; 192
      000334 CC                     981 	.db #0xcc	; 204
      000335 78                     982 	.db #0x78	; 120	'x'
      000336 00                     983 	.db #0x00	; 0
      000337 1C                     984 	.db #0x1c	; 28
      000338 0C                     985 	.db #0x0c	; 12
      000339 0C                     986 	.db #0x0c	; 12
      00033A 7C                     987 	.db #0x7c	; 124
      00033B CC                     988 	.db #0xcc	; 204
      00033C CC                     989 	.db #0xcc	; 204
      00033D 76                     990 	.db #0x76	; 118	'v'
      00033E 00                     991 	.db #0x00	; 0
      00033F 00                     992 	.db #0x00	; 0
      000340 00                     993 	.db #0x00	; 0
      000341 78                     994 	.db #0x78	; 120	'x'
      000342 CC                     995 	.db #0xcc	; 204
      000343 FC                     996 	.db #0xfc	; 252
      000344 C0                     997 	.db #0xc0	; 192
      000345 78                     998 	.db #0x78	; 120	'x'
      000346 00                     999 	.db #0x00	; 0
      000347 38                    1000 	.db #0x38	; 56	'8'
      000348 6C                    1001 	.db #0x6c	; 108	'l'
      000349 60                    1002 	.db #0x60	; 96
      00034A F0                    1003 	.db #0xf0	; 240
      00034B 60                    1004 	.db #0x60	; 96
      00034C 60                    1005 	.db #0x60	; 96
      00034D F0                    1006 	.db #0xf0	; 240
      00034E 00                    1007 	.db #0x00	; 0
      00034F 00                    1008 	.db #0x00	; 0
      000350 00                    1009 	.db #0x00	; 0
      000351 76                    1010 	.db #0x76	; 118	'v'
      000352 CC                    1011 	.db #0xcc	; 204
      000353 CC                    1012 	.db #0xcc	; 204
      000354 7C                    1013 	.db #0x7c	; 124
      000355 0C                    1014 	.db #0x0c	; 12
      000356 F8                    1015 	.db #0xf8	; 248
      000357 E0                    1016 	.db #0xe0	; 224
      000358 60                    1017 	.db #0x60	; 96
      000359 6C                    1018 	.db #0x6c	; 108	'l'
      00035A 76                    1019 	.db #0x76	; 118	'v'
      00035B 66                    1020 	.db #0x66	; 102	'f'
      00035C 66                    1021 	.db #0x66	; 102	'f'
      00035D E6                    1022 	.db #0xe6	; 230
      00035E 00                    1023 	.db #0x00	; 0
      00035F 30                    1024 	.db #0x30	; 48	'0'
      000360 00                    1025 	.db #0x00	; 0
      000361 70                    1026 	.db #0x70	; 112	'p'
      000362 30                    1027 	.db #0x30	; 48	'0'
      000363 30                    1028 	.db #0x30	; 48	'0'
      000364 30                    1029 	.db #0x30	; 48	'0'
      000365 78                    1030 	.db #0x78	; 120	'x'
      000366 00                    1031 	.db #0x00	; 0
      000367 0C                    1032 	.db #0x0c	; 12
      000368 00                    1033 	.db #0x00	; 0
      000369 0C                    1034 	.db #0x0c	; 12
      00036A 0C                    1035 	.db #0x0c	; 12
      00036B 0C                    1036 	.db #0x0c	; 12
      00036C CC                    1037 	.db #0xcc	; 204
      00036D CC                    1038 	.db #0xcc	; 204
      00036E 78                    1039 	.db #0x78	; 120	'x'
      00036F E0                    1040 	.db #0xe0	; 224
      000370 60                    1041 	.db #0x60	; 96
      000371 66                    1042 	.db #0x66	; 102	'f'
      000372 6C                    1043 	.db #0x6c	; 108	'l'
      000373 78                    1044 	.db #0x78	; 120	'x'
      000374 6C                    1045 	.db #0x6c	; 108	'l'
      000375 E6                    1046 	.db #0xe6	; 230
      000376 00                    1047 	.db #0x00	; 0
      000377 70                    1048 	.db #0x70	; 112	'p'
      000378 30                    1049 	.db #0x30	; 48	'0'
      000379 30                    1050 	.db #0x30	; 48	'0'
      00037A 30                    1051 	.db #0x30	; 48	'0'
      00037B 30                    1052 	.db #0x30	; 48	'0'
      00037C 30                    1053 	.db #0x30	; 48	'0'
      00037D 78                    1054 	.db #0x78	; 120	'x'
      00037E 00                    1055 	.db #0x00	; 0
      00037F 00                    1056 	.db #0x00	; 0
      000380 00                    1057 	.db #0x00	; 0
      000381 CC                    1058 	.db #0xcc	; 204
      000382 FE                    1059 	.db #0xfe	; 254
      000383 FE                    1060 	.db #0xfe	; 254
      000384 D6                    1061 	.db #0xd6	; 214
      000385 C6                    1062 	.db #0xc6	; 198
      000386 00                    1063 	.db #0x00	; 0
      000387 00                    1064 	.db #0x00	; 0
      000388 00                    1065 	.db #0x00	; 0
      000389 F8                    1066 	.db #0xf8	; 248
      00038A CC                    1067 	.db #0xcc	; 204
      00038B CC                    1068 	.db #0xcc	; 204
      00038C CC                    1069 	.db #0xcc	; 204
      00038D CC                    1070 	.db #0xcc	; 204
      00038E 00                    1071 	.db #0x00	; 0
      00038F 00                    1072 	.db #0x00	; 0
      000390 00                    1073 	.db #0x00	; 0
      000391 78                    1074 	.db #0x78	; 120	'x'
      000392 CC                    1075 	.db #0xcc	; 204
      000393 CC                    1076 	.db #0xcc	; 204
      000394 CC                    1077 	.db #0xcc	; 204
      000395 78                    1078 	.db #0x78	; 120	'x'
      000396 00                    1079 	.db #0x00	; 0
      000397 00                    1080 	.db #0x00	; 0
      000398 00                    1081 	.db #0x00	; 0
      000399 DC                    1082 	.db #0xdc	; 220
      00039A 66                    1083 	.db #0x66	; 102	'f'
      00039B 66                    1084 	.db #0x66	; 102	'f'
      00039C 7C                    1085 	.db #0x7c	; 124
      00039D 60                    1086 	.db #0x60	; 96
      00039E F0                    1087 	.db #0xf0	; 240
      00039F 00                    1088 	.db #0x00	; 0
      0003A0 00                    1089 	.db #0x00	; 0
      0003A1 76                    1090 	.db #0x76	; 118	'v'
      0003A2 CC                    1091 	.db #0xcc	; 204
      0003A3 CC                    1092 	.db #0xcc	; 204
      0003A4 7C                    1093 	.db #0x7c	; 124
      0003A5 0C                    1094 	.db #0x0c	; 12
      0003A6 1E                    1095 	.db #0x1e	; 30
      0003A7 00                    1096 	.db #0x00	; 0
      0003A8 00                    1097 	.db #0x00	; 0
      0003A9 DC                    1098 	.db #0xdc	; 220
      0003AA 76                    1099 	.db #0x76	; 118	'v'
      0003AB 66                    1100 	.db #0x66	; 102	'f'
      0003AC 60                    1101 	.db #0x60	; 96
      0003AD F0                    1102 	.db #0xf0	; 240
      0003AE 00                    1103 	.db #0x00	; 0
      0003AF 00                    1104 	.db #0x00	; 0
      0003B0 00                    1105 	.db #0x00	; 0
      0003B1 7C                    1106 	.db #0x7c	; 124
      0003B2 C0                    1107 	.db #0xc0	; 192
      0003B3 78                    1108 	.db #0x78	; 120	'x'
      0003B4 0C                    1109 	.db #0x0c	; 12
      0003B5 F8                    1110 	.db #0xf8	; 248
      0003B6 00                    1111 	.db #0x00	; 0
      0003B7 10                    1112 	.db #0x10	; 16
      0003B8 30                    1113 	.db #0x30	; 48	'0'
      0003B9 7C                    1114 	.db #0x7c	; 124
      0003BA 30                    1115 	.db #0x30	; 48	'0'
      0003BB 30                    1116 	.db #0x30	; 48	'0'
      0003BC 34                    1117 	.db #0x34	; 52	'4'
      0003BD 18                    1118 	.db #0x18	; 24
      0003BE 00                    1119 	.db #0x00	; 0
      0003BF 00                    1120 	.db #0x00	; 0
      0003C0 00                    1121 	.db #0x00	; 0
      0003C1 CC                    1122 	.db #0xcc	; 204
      0003C2 CC                    1123 	.db #0xcc	; 204
      0003C3 CC                    1124 	.db #0xcc	; 204
      0003C4 CC                    1125 	.db #0xcc	; 204
      0003C5 76                    1126 	.db #0x76	; 118	'v'
      0003C6 00                    1127 	.db #0x00	; 0
      0003C7 00                    1128 	.db #0x00	; 0
      0003C8 00                    1129 	.db #0x00	; 0
      0003C9 CC                    1130 	.db #0xcc	; 204
      0003CA CC                    1131 	.db #0xcc	; 204
      0003CB CC                    1132 	.db #0xcc	; 204
      0003CC 78                    1133 	.db #0x78	; 120	'x'
      0003CD 30                    1134 	.db #0x30	; 48	'0'
      0003CE 00                    1135 	.db #0x00	; 0
      0003CF 00                    1136 	.db #0x00	; 0
      0003D0 00                    1137 	.db #0x00	; 0
      0003D1 C6                    1138 	.db #0xc6	; 198
      0003D2 D6                    1139 	.db #0xd6	; 214
      0003D3 FE                    1140 	.db #0xfe	; 254
      0003D4 FE                    1141 	.db #0xfe	; 254
      0003D5 6C                    1142 	.db #0x6c	; 108	'l'
      0003D6 00                    1143 	.db #0x00	; 0
      0003D7 00                    1144 	.db #0x00	; 0
      0003D8 00                    1145 	.db #0x00	; 0
      0003D9 C6                    1146 	.db #0xc6	; 198
      0003DA 6C                    1147 	.db #0x6c	; 108	'l'
      0003DB 38                    1148 	.db #0x38	; 56	'8'
      0003DC 6C                    1149 	.db #0x6c	; 108	'l'
      0003DD C6                    1150 	.db #0xc6	; 198
      0003DE 00                    1151 	.db #0x00	; 0
      0003DF 00                    1152 	.db #0x00	; 0
      0003E0 00                    1153 	.db #0x00	; 0
      0003E1 CC                    1154 	.db #0xcc	; 204
      0003E2 CC                    1155 	.db #0xcc	; 204
      0003E3 CC                    1156 	.db #0xcc	; 204
      0003E4 7C                    1157 	.db #0x7c	; 124
      0003E5 0C                    1158 	.db #0x0c	; 12
      0003E6 F8                    1159 	.db #0xf8	; 248
      0003E7 00                    1160 	.db #0x00	; 0
      0003E8 00                    1161 	.db #0x00	; 0
      0003E9 FC                    1162 	.db #0xfc	; 252
      0003EA 98                    1163 	.db #0x98	; 152
      0003EB 30                    1164 	.db #0x30	; 48	'0'
      0003EC 64                    1165 	.db #0x64	; 100	'd'
      0003ED FC                    1166 	.db #0xfc	; 252
      0003EE 00                    1167 	.db #0x00	; 0
      0003EF 1C                    1168 	.db #0x1c	; 28
      0003F0 30                    1169 	.db #0x30	; 48	'0'
      0003F1 30                    1170 	.db #0x30	; 48	'0'
      0003F2 E0                    1171 	.db #0xe0	; 224
      0003F3 30                    1172 	.db #0x30	; 48	'0'
      0003F4 30                    1173 	.db #0x30	; 48	'0'
      0003F5 1C                    1174 	.db #0x1c	; 28
      0003F6 00                    1175 	.db #0x00	; 0
      0003F7 18                    1176 	.db #0x18	; 24
      0003F8 18                    1177 	.db #0x18	; 24
      0003F9 18                    1178 	.db #0x18	; 24
      0003FA 00                    1179 	.db #0x00	; 0
      0003FB 18                    1180 	.db #0x18	; 24
      0003FC 18                    1181 	.db #0x18	; 24
      0003FD 18                    1182 	.db #0x18	; 24
      0003FE 00                    1183 	.db #0x00	; 0
      0003FF E0                    1184 	.db #0xe0	; 224
      000400 30                    1185 	.db #0x30	; 48	'0'
      000401 30                    1186 	.db #0x30	; 48	'0'
      000402 1C                    1187 	.db #0x1c	; 28
      000403 30                    1188 	.db #0x30	; 48	'0'
      000404 30                    1189 	.db #0x30	; 48	'0'
      000405 E0                    1190 	.db #0xe0	; 224
      000406 00                    1191 	.db #0x00	; 0
      000407 76                    1192 	.db #0x76	; 118	'v'
      000408 DC                    1193 	.db #0xdc	; 220
      000409 00                    1194 	.db #0x00	; 0
      00040A 00                    1195 	.db #0x00	; 0
      00040B 00                    1196 	.db #0x00	; 0
      00040C 00                    1197 	.db #0x00	; 0
      00040D 00                    1198 	.db #0x00	; 0
      00040E 00                    1199 	.db #0x00	; 0
      00040F 00                    1200 	.db #0x00	; 0
      000410 10                    1201 	.db #0x10	; 16
      000411 38                    1202 	.db #0x38	; 56	'8'
      000412 6C                    1203 	.db #0x6c	; 108	'l'
      000413 C6                    1204 	.db #0xc6	; 198
      000414 C6                    1205 	.db #0xc6	; 198
      000415 FE                    1206 	.db #0xfe	; 254
      000416 00                    1207 	.db #0x00	; 0
      000417                       1208 _pattern_black_0:
      000417 FF                    1209 	.db #0xff	; 255
      000418 FF                    1210 	.db #0xff	; 255
      000419 FF                    1211 	.db #0xff	; 255
      00041A FF                    1212 	.db #0xff	; 255
      00041B FF                    1213 	.db #0xff	; 255
      00041C FF                    1214 	.db #0xff	; 255
      00041D FF                    1215 	.db #0xff	; 255
      00041E FF                    1216 	.db #0xff	; 255
      00041F                       1217 _pattern_black_1:
      00041F FE                    1218 	.db #0xfe	; 254
      000420 FF                    1219 	.db #0xff	; 255
      000421 FF                    1220 	.db #0xff	; 255
      000422 FF                    1221 	.db #0xff	; 255
      000423 FE                    1222 	.db #0xfe	; 254
      000424 FF                    1223 	.db #0xff	; 255
      000425 FF                    1224 	.db #0xff	; 255
      000426 FE                    1225 	.db #0xfe	; 254
      000427                       1226 _pattern_black_2:
      000427 FF                    1227 	.db #0xff	; 255
      000428 FF                    1228 	.db #0xff	; 255
      000429 FF                    1229 	.db #0xff	; 255
      00042A FF                    1230 	.db #0xff	; 255
      00042B FF                    1231 	.db #0xff	; 255
      00042C FB                    1232 	.db #0xfb	; 251
      00042D FF                    1233 	.db #0xff	; 255
      00042E BB                    1234 	.db #0xbb	; 187
      00042F                       1235 _pattern_black_3:
      00042F FB                    1236 	.db #0xfb	; 251
      000430 FE                    1237 	.db #0xfe	; 254
      000431 FD                    1238 	.db #0xfd	; 253
      000432 FE                    1239 	.db #0xfe	; 254
      000433 F7                    1240 	.db #0xf7	; 247
      000434 FA                    1241 	.db #0xfa	; 250
      000435 AF                    1242 	.db #0xaf	; 175
      000436 55                    1243 	.db #0x55	; 85	'U'
      000437                       1244 _pattern_0:
      000437 9F                    1245 	.db #0x9f	; 159
      000438 90                    1246 	.db #0x90	; 144
      000439 90                    1247 	.db #0x90	; 144
      00043A 93                    1248 	.db #0x93	; 147
      00043B 92                    1249 	.db #0x92	; 146
      00043C 92                    1250 	.db #0x92	; 146
      00043D 92                    1251 	.db #0x92	; 146
      00043E 92                    1252 	.db #0x92	; 146
      00043F                       1253 _pattern_1:
      00043F FF                    1254 	.db #0xff	; 255
      000440 01                    1255 	.db #0x01	; 1
      000441 01                    1256 	.db #0x01	; 1
      000442 F9                    1257 	.db #0xf9	; 249
      000443 09                    1258 	.db #0x09	; 9
      000444 09                    1259 	.db #0x09	; 9
      000445 49                    1260 	.db #0x49	; 73	'I'
      000446 49                    1261 	.db #0x49	; 73	'I'
      000447                       1262 _pattern_2:
      000447 92                    1263 	.db #0x92	; 146
      000448 93                    1264 	.db #0x93	; 147
      000449 90                    1265 	.db #0x90	; 144
      00044A 90                    1266 	.db #0x90	; 144
      00044B 9F                    1267 	.db #0x9f	; 159
      00044C 80                    1268 	.db #0x80	; 128
      00044D 80                    1269 	.db #0x80	; 128
      00044E FF                    1270 	.db #0xff	; 255
      00044F                       1271 _pattern_3:
      00044F 49                    1272 	.db #0x49	; 73	'I'
      000450 C9                    1273 	.db #0xc9	; 201
      000451 09                    1274 	.db #0x09	; 9
      000452 09                    1275 	.db #0x09	; 9
      000453 F9                    1276 	.db #0xf9	; 249
      000454 01                    1277 	.db #0x01	; 1
      000455 01                    1278 	.db #0x01	; 1
      000456 FF                    1279 	.db #0xff	; 255
      000457                       1280 _pattern_4:
      000457 7F                    1281 	.db #0x7f	; 127
      000458 81                    1282 	.db #0x81	; 129
      000459 83                    1283 	.db #0x83	; 131
      00045A 87                    1284 	.db #0x87	; 135
      00045B 8F                    1285 	.db #0x8f	; 143
      00045C 9F                    1286 	.db #0x9f	; 159
      00045D BF                    1287 	.db #0xbf	; 191
      00045E FF                    1288 	.db #0xff	; 255
      00045F                       1289 _pattern_5:
      00045F FE                    1290 	.db #0xfe	; 254
      000460 81                    1291 	.db #0x81	; 129
      000461 C1                    1292 	.db #0xc1	; 193
      000462 E1                    1293 	.db #0xe1	; 225
      000463 F1                    1294 	.db #0xf1	; 241
      000464 F9                    1295 	.db #0xf9	; 249
      000465 FD                    1296 	.db #0xfd	; 253
      000466 FF                    1297 	.db #0xff	; 255
      000467                       1298 _pattern_6:
      000467 FF                    1299 	.db #0xff	; 255
      000468 BF                    1300 	.db #0xbf	; 191
      000469 9F                    1301 	.db #0x9f	; 159
      00046A 8F                    1302 	.db #0x8f	; 143
      00046B 87                    1303 	.db #0x87	; 135
      00046C 83                    1304 	.db #0x83	; 131
      00046D 81                    1305 	.db #0x81	; 129
      00046E 7F                    1306 	.db #0x7f	; 127
      00046F                       1307 _pattern_7:
      00046F FF                    1308 	.db #0xff	; 255
      000470 FD                    1309 	.db #0xfd	; 253
      000471 F9                    1310 	.db #0xf9	; 249
      000472 F1                    1311 	.db #0xf1	; 241
      000473 E1                    1312 	.db #0xe1	; 225
      000474 C1                    1313 	.db #0xc1	; 193
      000475 81                    1314 	.db #0x81	; 129
      000476 FE                    1315 	.db #0xfe	; 254
      000477                       1316 _pattern_8:
      000477 7F                    1317 	.db #0x7f	; 127
      000478 AE                    1318 	.db #0xae	; 174
      000479 FF                    1319 	.db #0xff	; 255
      00047A 5B                    1320 	.db #0x5b	; 91
      00047B FF                    1321 	.db #0xff	; 255
      00047C AE                    1322 	.db #0xae	; 174
      00047D FF                    1323 	.db #0xff	; 255
      00047E DF                    1324 	.db #0xdf	; 223
      00047F                       1325 _pattern_9:
      00047F FE                    1326 	.db #0xfe	; 254
      000480 BD                    1327 	.db #0xbd	; 189
      000481 DF                    1328 	.db #0xdf	; 223
      000482 7F                    1329 	.db #0x7f	; 127
      000483 FB                    1330 	.db #0xfb	; 251
      000484 DF                    1331 	.db #0xdf	; 223
      000485 FE                    1332 	.db #0xfe	; 254
      000486 EF                    1333 	.db #0xef	; 239
      000487                       1334 _pattern_10:
      000487 7F                    1335 	.db #0x7f	; 127
      000488 FF                    1336 	.db #0xff	; 255
      000489 ED                    1337 	.db #0xed	; 237
      00048A FF                    1338 	.db #0xff	; 255
      00048B B6                    1339 	.db #0xb6	; 182
      00048C FE                    1340 	.db #0xfe	; 254
      00048D DB                    1341 	.db #0xdb	; 219
      00048E 7D                    1342 	.db #0x7d	; 125
      00048F                       1343 _pattern_11:
      00048F FE                    1344 	.db #0xfe	; 254
      000490 FF                    1345 	.db #0xff	; 255
      000491 FE                    1346 	.db #0xfe	; 254
      000492 77                    1347 	.db #0x77	; 119	'w'
      000493 FE                    1348 	.db #0xfe	; 254
      000494 DD                    1349 	.db #0xdd	; 221
      000495 EF                    1350 	.db #0xef	; 239
      000496 5A                    1351 	.db #0x5a	; 90	'Z'
      000497                       1352 _pattern_12:
      000497 7F                    1353 	.db #0x7f	; 127
      000498 D5                    1354 	.db #0xd5	; 213
      000499 BF                    1355 	.db #0xbf	; 191
      00049A ED                    1356 	.db #0xed	; 237
      00049B BF                    1357 	.db #0xbf	; 191
      00049C F5                    1358 	.db #0xf5	; 245
      00049D BF                    1359 	.db #0xbf	; 191
      00049E FF                    1360 	.db #0xff	; 255
      00049F                       1361 _pattern_13:
      00049F FE                    1362 	.db #0xfe	; 254
      0004A0 5F                    1363 	.db #0x5f	; 95
      0004A1 F5                    1364 	.db #0xf5	; 245
      0004A2 DF                    1365 	.db #0xdf	; 223
      0004A3 FF                    1366 	.db #0xff	; 255
      0004A4 FF                    1367 	.db #0xff	; 255
      0004A5 FF                    1368 	.db #0xff	; 255
      0004A6 FF                    1369 	.db #0xff	; 255
      0004A7                       1370 _pattern_14:
      0004A7 EF                    1371 	.db #0xef	; 239
      0004A8 BF                    1372 	.db #0xbf	; 191
      0004A9 7F                    1373 	.db #0x7f	; 127
      0004AA FF                    1374 	.db #0xff	; 255
      0004AB FF                    1375 	.db #0xff	; 255
      0004AC FF                    1376 	.db #0xff	; 255
      0004AD DB                    1377 	.db #0xdb	; 219
      0004AE 7F                    1378 	.db #0x7f	; 127
      0004AF                       1379 _pattern_15:
      0004AF FF                    1380 	.db #0xff	; 255
      0004B0 FD                    1381 	.db #0xfd	; 253
      0004B1 FF                    1382 	.db #0xff	; 255
      0004B2 DB                    1383 	.db #0xdb	; 219
      0004B3 FD                    1384 	.db #0xfd	; 253
      0004B4 7B                    1385 	.db #0x7b	; 123
      0004B5 D7                    1386 	.db #0xd7	; 215
      0004B6 FE                    1387 	.db #0xfe	; 254
      0004B7                       1388 _pattern_16:
      0004B7 7F                    1389 	.db #0x7f	; 127
      0004B8 FF                    1390 	.db #0xff	; 255
      0004B9 EA                    1391 	.db #0xea	; 234
      0004BA DF                    1392 	.db #0xdf	; 223
      0004BB FF                    1393 	.db #0xff	; 255
      0004BC DF                    1394 	.db #0xdf	; 223
      0004BD FF                    1395 	.db #0xff	; 255
      0004BE DF                    1396 	.db #0xdf	; 223
      0004BF                       1397 _pattern_17:
      0004BF FE                    1398 	.db #0xfe	; 254
      0004C0 FF                    1399 	.db #0xff	; 255
      0004C1 AF                    1400 	.db #0xaf	; 175
      0004C2 FA                    1401 	.db #0xfa	; 250
      0004C3 FF                    1402 	.db #0xff	; 255
      0004C4 FA                    1403 	.db #0xfa	; 250
      0004C5 FF                    1404 	.db #0xff	; 255
      0004C6 FA                    1405 	.db #0xfa	; 250
      0004C7                       1406 _pattern_18:
      0004C7 FF                    1407 	.db #0xff	; 255
      0004C8 DF                    1408 	.db #0xdf	; 223
      0004C9 FF                    1409 	.db #0xff	; 255
      0004CA DF                    1410 	.db #0xdf	; 223
      0004CB FF                    1411 	.db #0xff	; 255
      0004CC EA                    1412 	.db #0xea	; 234
      0004CD FF                    1413 	.db #0xff	; 255
      0004CE 55                    1414 	.db #0x55	; 85	'U'
      0004CF                       1415 _pattern_19:
      0004CF FF                    1416 	.db #0xff	; 255
      0004D0 FA                    1417 	.db #0xfa	; 250
      0004D1 FF                    1418 	.db #0xff	; 255
      0004D2 FA                    1419 	.db #0xfa	; 250
      0004D3 F7                    1420 	.db #0xf7	; 247
      0004D4 AA                    1421 	.db #0xaa	; 170
      0004D5 FF                    1422 	.db #0xff	; 255
      0004D6 56                    1423 	.db #0x56	; 86	'V'
      0004D7                       1424 _pattern_20:
      0004D7 3F                    1425 	.db #0x3f	; 63
      0004D8 7F                    1426 	.db #0x7f	; 127
      0004D9 E0                    1427 	.db #0xe0	; 224
      0004DA CE                    1428 	.db #0xce	; 206
      0004DB E6                    1429 	.db #0xe6	; 230
      0004DC 7C                    1430 	.db #0x7c	; 124
      0004DD 39                    1431 	.db #0x39	; 57	'9'
      0004DE 03                    1432 	.db #0x03	; 3
      0004DF                       1433 _pattern_21:
      0004DF FF                    1434 	.db #0xff	; 255
      0004E0 FF                    1435 	.db #0xff	; 255
      0004E1 00                    1436 	.db #0x00	; 0
      0004E2 DB                    1437 	.db #0xdb	; 219
      0004E3 DB                    1438 	.db #0xdb	; 219
      0004E4 00                    1439 	.db #0x00	; 0
      0004E5 FF                    1440 	.db #0xff	; 255
      0004E6 FF                    1441 	.db #0xff	; 255
      0004E7                       1442 _pattern_22:
      0004E7 FC                    1443 	.db #0xfc	; 252
      0004E8 FE                    1444 	.db #0xfe	; 254
      0004E9 07                    1445 	.db #0x07	; 7
      0004EA 73                    1446 	.db #0x73	; 115	's'
      0004EB 67                    1447 	.db #0x67	; 103	'g'
      0004EC 3E                    1448 	.db #0x3e	; 62
      0004ED 9C                    1449 	.db #0x9c	; 156
      0004EE C0                    1450 	.db #0xc0	; 192
      0004EF                       1451 _pattern_23:
      0004EF 06                    1452 	.db #0x06	; 6
      0004F0 00                    1453 	.db #0x00	; 0
      0004F1 03                    1454 	.db #0x03	; 3
      0004F2 04                    1455 	.db #0x04	; 4
      0004F3 05                    1456 	.db #0x05	; 5
      0004F4 05                    1457 	.db #0x05	; 5
      0004F5 05                    1458 	.db #0x05	; 5
      0004F6 05                    1459 	.db #0x05	; 5
      0004F7                       1460 _pattern_24:
      0004F7 00                    1461 	.db #0x00	; 0
      0004F8 00                    1462 	.db #0x00	; 0
      0004F9 33                    1463 	.db #0x33	; 51	'3'
      0004FA 44                    1464 	.db #0x44	; 68	'D'
      0004FB 55                    1465 	.db #0x55	; 85	'U'
      0004FC 55                    1466 	.db #0x55	; 85	'U'
      0004FD 55                    1467 	.db #0x55	; 85	'U'
      0004FE 55                    1468 	.db #0x55	; 85	'U'
      0004FF                       1469 _pattern_25:
      0004FF 60                    1470 	.db #0x60	; 96
      000500 00                    1471 	.db #0x00	; 0
      000501 40                    1472 	.db #0x40	; 64
      000502 20                    1473 	.db #0x20	; 32
      000503 20                    1474 	.db #0x20	; 32
      000504 20                    1475 	.db #0x20	; 32
      000505 20                    1476 	.db #0x20	; 32
      000506 20                    1477 	.db #0x20	; 32
      000507                       1478 _pattern_26:
      000507 05                    1479 	.db #0x05	; 5
      000508 05                    1480 	.db #0x05	; 5
      000509 05                    1481 	.db #0x05	; 5
      00050A 05                    1482 	.db #0x05	; 5
      00050B 05                    1483 	.db #0x05	; 5
      00050C 05                    1484 	.db #0x05	; 5
      00050D 05                    1485 	.db #0x05	; 5
      00050E 05                    1486 	.db #0x05	; 5
      00050F                       1487 _pattern_27:
      00050F 55                    1488 	.db #0x55	; 85	'U'
      000510 55                    1489 	.db #0x55	; 85	'U'
      000511 55                    1490 	.db #0x55	; 85	'U'
      000512 55                    1491 	.db #0x55	; 85	'U'
      000513 55                    1492 	.db #0x55	; 85	'U'
      000514 55                    1493 	.db #0x55	; 85	'U'
      000515 55                    1494 	.db #0x55	; 85	'U'
      000516 55                    1495 	.db #0x55	; 85	'U'
      000517                       1496 _pattern_28:
      000517 20                    1497 	.db #0x20	; 32
      000518 20                    1498 	.db #0x20	; 32
      000519 20                    1499 	.db #0x20	; 32
      00051A 20                    1500 	.db #0x20	; 32
      00051B 20                    1501 	.db #0x20	; 32
      00051C 20                    1502 	.db #0x20	; 32
      00051D 20                    1503 	.db #0x20	; 32
      00051E 20                    1504 	.db #0x20	; 32
      00051F                       1505 _pattern_29:
      00051F 05                    1506 	.db #0x05	; 5
      000520 05                    1507 	.db #0x05	; 5
      000521 07                    1508 	.db #0x07	; 7
      000522 07                    1509 	.db #0x07	; 7
      000523 07                    1510 	.db #0x07	; 7
      000524 05                    1511 	.db #0x05	; 5
      000525 05                    1512 	.db #0x05	; 5
      000526 05                    1513 	.db #0x05	; 5
      000527                       1514 _pattern_30:
      000527 55                    1515 	.db #0x55	; 85	'U'
      000528 55                    1516 	.db #0x55	; 85	'U'
      000529 FF                    1517 	.db #0xff	; 255
      00052A FF                    1518 	.db #0xff	; 255
      00052B FF                    1519 	.db #0xff	; 255
      00052C 55                    1520 	.db #0x55	; 85	'U'
      00052D 55                    1521 	.db #0x55	; 85	'U'
      00052E 55                    1522 	.db #0x55	; 85	'U'
      00052F                       1523 _pattern_31:
      00052F 20                    1524 	.db #0x20	; 32
      000530 20                    1525 	.db #0x20	; 32
      000531 E0                    1526 	.db #0xe0	; 224
      000532 E0                    1527 	.db #0xe0	; 224
      000533 E0                    1528 	.db #0xe0	; 224
      000534 20                    1529 	.db #0x20	; 32
      000535 20                    1530 	.db #0x20	; 32
      000536 20                    1531 	.db #0x20	; 32
      000537                       1532 _pattern_37:
      000537 05                    1533 	.db #0x05	; 5
      000538 05                    1534 	.db #0x05	; 5
      000539 05                    1535 	.db #0x05	; 5
      00053A 05                    1536 	.db #0x05	; 5
      00053B 04                    1537 	.db #0x04	; 4
      00053C 03                    1538 	.db #0x03	; 3
      00053D 00                    1539 	.db #0x00	; 0
      00053E 06                    1540 	.db #0x06	; 6
      00053F                       1541 _pattern_38:
      00053F 55                    1542 	.db #0x55	; 85	'U'
      000540 55                    1543 	.db #0x55	; 85	'U'
      000541 55                    1544 	.db #0x55	; 85	'U'
      000542 55                    1545 	.db #0x55	; 85	'U'
      000543 44                    1546 	.db #0x44	; 68	'D'
      000544 33                    1547 	.db #0x33	; 51	'3'
      000545 00                    1548 	.db #0x00	; 0
      000546 00                    1549 	.db #0x00	; 0
      000547                       1550 _pattern_39:
      000547 20                    1551 	.db #0x20	; 32
      000548 20                    1552 	.db #0x20	; 32
      000549 20                    1553 	.db #0x20	; 32
      00054A 20                    1554 	.db #0x20	; 32
      00054B 20                    1555 	.db #0x20	; 32
      00054C 40                    1556 	.db #0x40	; 64
      00054D 00                    1557 	.db #0x00	; 0
      00054E 60                    1558 	.db #0x60	; 96
      00054F                       1559 _pattern_32:
      00054F 03                    1560 	.db #0x03	; 3
      000550 39                    1561 	.db #0x39	; 57	'9'
      000551 7C                    1562 	.db #0x7c	; 124
      000552 E6                    1563 	.db #0xe6	; 230
      000553 CE                    1564 	.db #0xce	; 206
      000554 E0                    1565 	.db #0xe0	; 224
      000555 7F                    1566 	.db #0x7f	; 127
      000556 3F                    1567 	.db #0x3f	; 63
      000557                       1568 _pattern_33:
      000557 FF                    1569 	.db #0xff	; 255
      000558 FF                    1570 	.db #0xff	; 255
      000559 00                    1571 	.db #0x00	; 0
      00055A DB                    1572 	.db #0xdb	; 219
      00055B DB                    1573 	.db #0xdb	; 219
      00055C 00                    1574 	.db #0x00	; 0
      00055D FF                    1575 	.db #0xff	; 255
      00055E FF                    1576 	.db #0xff	; 255
      00055F                       1577 _pattern_34:
      00055F C0                    1578 	.db #0xc0	; 192
      000560 9C                    1579 	.db #0x9c	; 156
      000561 3E                    1580 	.db #0x3e	; 62
      000562 67                    1581 	.db #0x67	; 103	'g'
      000563 73                    1582 	.db #0x73	; 115	's'
      000564 07                    1583 	.db #0x07	; 7
      000565 FE                    1584 	.db #0xfe	; 254
      000566 FC                    1585 	.db #0xfc	; 252
      000567                       1586 _sprite_dust_0:
      000567 10                    1587 	.db #0x10	; 16
      000568 42                    1588 	.db #0x42	; 66	'B'
      000569 10                    1589 	.db #0x10	; 16
      00056A 45                    1590 	.db #0x45	; 69	'E'
      00056B 20                    1591 	.db #0x20	; 32
      00056C 89                    1592 	.db #0x89	; 137
      00056D 20                    1593 	.db #0x20	; 32
      00056E 88                    1594 	.db #0x88	; 136
      00056F                       1595 _sprite_dust_1:
      00056F 10                    1596 	.db #0x10	; 16
      000570 42                    1597 	.db #0x42	; 66	'B'
      000571 00                    1598 	.db #0x00	; 0
      000572 04                    1599 	.db #0x04	; 4
      000573 20                    1600 	.db #0x20	; 32
      000574 81                    1601 	.db #0x81	; 129
      000575 20                    1602 	.db #0x20	; 32
      000576 08                    1603 	.db #0x08	; 8
      000577                       1604 _sprite_dust_2:
      000577 10                    1605 	.db #0x10	; 16
      000578 00                    1606 	.db #0x00	; 0
      000579 00                    1607 	.db #0x00	; 0
      00057A 04                    1608 	.db #0x04	; 4
      00057B 20                    1609 	.db #0x20	; 32
      00057C 80                    1610 	.db #0x80	; 128
      00057D 20                    1611 	.db #0x20	; 32
      00057E 00                    1612 	.db #0x00	; 0
      00057F                       1613 _sprite_dust_3:
      00057F 10                    1614 	.db #0x10	; 16
      000580 00                    1615 	.db #0x00	; 0
      000581 00                    1616 	.db #0x00	; 0
      000582 04                    1617 	.db #0x04	; 4
      000583 00                    1618 	.db #0x00	; 0
      000584 00                    1619 	.db #0x00	; 0
      000585 20                    1620 	.db #0x20	; 32
      000586 00                    1621 	.db #0x00	; 0
      000587                       1622 _pattern_title:
      000587 FE                    1623 	.db #0xfe	; 254
      000588 FE                    1624 	.db #0xfe	; 254
      000589 FE                    1625 	.db #0xfe	; 254
      00058A FE                    1626 	.db #0xfe	; 254
      00058B FE                    1627 	.db #0xfe	; 254
      00058C FE                    1628 	.db #0xfe	; 254
      00058D FE                    1629 	.db #0xfe	; 254
      00058E 00                    1630 	.db #0x00	; 0
      00058F                       1631 _color_black_0:
      00058F 14                    1632 	.db #0x14	; 20
      000590 14                    1633 	.db #0x14	; 20
      000591 14                    1634 	.db #0x14	; 20
      000592 14                    1635 	.db #0x14	; 20
      000593 14                    1636 	.db #0x14	; 20
      000594 14                    1637 	.db #0x14	; 20
      000595 14                    1638 	.db #0x14	; 20
      000596 14                    1639 	.db #0x14	; 20
      000597                       1640 _color_black_1:
      000597 14                    1641 	.db #0x14	; 20
      000598 14                    1642 	.db #0x14	; 20
      000599 14                    1643 	.db #0x14	; 20
      00059A 14                    1644 	.db #0x14	; 20
      00059B 14                    1645 	.db #0x14	; 20
      00059C 14                    1646 	.db #0x14	; 20
      00059D 14                    1647 	.db #0x14	; 20
      00059E 14                    1648 	.db #0x14	; 20
      00059F                       1649 _color_black_2:
      00059F 14                    1650 	.db #0x14	; 20
      0005A0 14                    1651 	.db #0x14	; 20
      0005A1 14                    1652 	.db #0x14	; 20
      0005A2 14                    1653 	.db #0x14	; 20
      0005A3 14                    1654 	.db #0x14	; 20
      0005A4 14                    1655 	.db #0x14	; 20
      0005A5 14                    1656 	.db #0x14	; 20
      0005A6 14                    1657 	.db #0x14	; 20
      0005A7                       1658 _color_black_3:
      0005A7 14                    1659 	.db #0x14	; 20
      0005A8 14                    1660 	.db #0x14	; 20
      0005A9 14                    1661 	.db #0x14	; 20
      0005AA 14                    1662 	.db #0x14	; 20
      0005AB 14                    1663 	.db #0x14	; 20
      0005AC 14                    1664 	.db #0x14	; 20
      0005AD 14                    1665 	.db #0x14	; 20
      0005AE 14                    1666 	.db #0x14	; 20
      0005AF                       1667 _color_0:
      0005AF 13                    1668 	.db #0x13	; 19
      0005B0 13                    1669 	.db #0x13	; 19
      0005B1 13                    1670 	.db #0x13	; 19
      0005B2 13                    1671 	.db #0x13	; 19
      0005B3 13                    1672 	.db #0x13	; 19
      0005B4 13                    1673 	.db #0x13	; 19
      0005B5 13                    1674 	.db #0x13	; 19
      0005B6 13                    1675 	.db #0x13	; 19
      0005B7                       1676 _color_1:
      0005B7 12                    1677 	.db #0x12	; 18
      0005B8 12                    1678 	.db #0x12	; 18
      0005B9 12                    1679 	.db #0x12	; 18
      0005BA 12                    1680 	.db #0x12	; 18
      0005BB 12                    1681 	.db #0x12	; 18
      0005BC 12                    1682 	.db #0x12	; 18
      0005BD 12                    1683 	.db #0x12	; 18
      0005BE 12                    1684 	.db #0x12	; 18
      0005BF                       1685 _color_2:
      0005BF 12                    1686 	.db #0x12	; 18
      0005C0 12                    1687 	.db #0x12	; 18
      0005C1 12                    1688 	.db #0x12	; 18
      0005C2 12                    1689 	.db #0x12	; 18
      0005C3 12                    1690 	.db #0x12	; 18
      0005C4 12                    1691 	.db #0x12	; 18
      0005C5 12                    1692 	.db #0x12	; 18
      0005C6 12                    1693 	.db #0x12	; 18
      0005C7                       1694 _color_3:
      0005C7 1C                    1695 	.db #0x1c	; 28
      0005C8 1C                    1696 	.db #0x1c	; 28
      0005C9 1C                    1697 	.db #0x1c	; 28
      0005CA 1C                    1698 	.db #0x1c	; 28
      0005CB 1C                    1699 	.db #0x1c	; 28
      0005CC 1C                    1700 	.db #0x1c	; 28
      0005CD 1C                    1701 	.db #0x1c	; 28
      0005CE 1C                    1702 	.db #0x1c	; 28
      0005CF                       1703 _color_4:
      0005CF 96                    1704 	.db #0x96	; 150
      0005D0 96                    1705 	.db #0x96	; 150
      0005D1 96                    1706 	.db #0x96	; 150
      0005D2 96                    1707 	.db #0x96	; 150
      0005D3 96                    1708 	.db #0x96	; 150
      0005D4 96                    1709 	.db #0x96	; 150
      0005D5 96                    1710 	.db #0x96	; 150
      0005D6 96                    1711 	.db #0x96	; 150
      0005D7                       1712 _color_5:
      0005D7 98                    1713 	.db #0x98	; 152
      0005D8 68                    1714 	.db #0x68	; 104	'h'
      0005D9 68                    1715 	.db #0x68	; 104	'h'
      0005DA 68                    1716 	.db #0x68	; 104	'h'
      0005DB 68                    1717 	.db #0x68	; 104	'h'
      0005DC 68                    1718 	.db #0x68	; 104	'h'
      0005DD 68                    1719 	.db #0x68	; 104	'h'
      0005DE 68                    1720 	.db #0x68	; 104	'h'
      0005DF                       1721 _color_6:
      0005DF 68                    1722 	.db #0x68	; 104	'h'
      0005E0 68                    1723 	.db #0x68	; 104	'h'
      0005E1 68                    1724 	.db #0x68	; 104	'h'
      0005E2 68                    1725 	.db #0x68	; 104	'h'
      0005E3 68                    1726 	.db #0x68	; 104	'h'
      0005E4 68                    1727 	.db #0x68	; 104	'h'
      0005E5 68                    1728 	.db #0x68	; 104	'h'
      0005E6 68                    1729 	.db #0x68	; 104	'h'
      0005E7                       1730 _color_7:
      0005E7 89                    1731 	.db #0x89	; 137
      0005E8 89                    1732 	.db #0x89	; 137
      0005E9 89                    1733 	.db #0x89	; 137
      0005EA 89                    1734 	.db #0x89	; 137
      0005EB 89                    1735 	.db #0x89	; 137
      0005EC 89                    1736 	.db #0x89	; 137
      0005ED 89                    1737 	.db #0x89	; 137
      0005EE 86                    1738 	.db #0x86	; 134
      0005EF                       1739 _color_8:
      0005EF 41                    1740 	.db #0x41	; 65	'A'
      0005F0 47                    1741 	.db #0x47	; 71	'G'
      0005F1 47                    1742 	.db #0x47	; 71	'G'
      0005F2 47                    1743 	.db #0x47	; 71	'G'
      0005F3 47                    1744 	.db #0x47	; 71	'G'
      0005F4 47                    1745 	.db #0x47	; 71	'G'
      0005F5 47                    1746 	.db #0x47	; 71	'G'
      0005F6 47                    1747 	.db #0x47	; 71	'G'
      0005F7                       1748 _color_9:
      0005F7 41                    1749 	.db #0x41	; 65	'A'
      0005F8 45                    1750 	.db #0x45	; 69	'E'
      0005F9 47                    1751 	.db #0x47	; 71	'G'
      0005FA 47                    1752 	.db #0x47	; 71	'G'
      0005FB 45                    1753 	.db #0x45	; 69	'E'
      0005FC 45                    1754 	.db #0x45	; 69	'E'
      0005FD 41                    1755 	.db #0x41	; 65	'A'
      0005FE 45                    1756 	.db #0x45	; 69	'E'
      0005FF                       1757 _color_10:
      0005FF 47                    1758 	.db #0x47	; 71	'G'
      000600 45                    1759 	.db #0x45	; 69	'E'
      000601 45                    1760 	.db #0x45	; 69	'E'
      000602 45                    1761 	.db #0x45	; 69	'E'
      000603 45                    1762 	.db #0x45	; 69	'E'
      000604 41                    1763 	.db #0x41	; 65	'A'
      000605 45                    1764 	.db #0x45	; 69	'E'
      000606 41                    1765 	.db #0x41	; 65	'A'
      000607                       1766 _color_11:
      000607 41                    1767 	.db #0x41	; 65	'A'
      000608 41                    1768 	.db #0x41	; 65	'A'
      000609 41                    1769 	.db #0x41	; 65	'A'
      00060A 41                    1770 	.db #0x41	; 65	'A'
      00060B 41                    1771 	.db #0x41	; 65	'A'
      00060C 41                    1772 	.db #0x41	; 65	'A'
      00060D 41                    1773 	.db #0x41	; 65	'A'
      00060E 41                    1774 	.db #0x41	; 65	'A'
      00060F                       1775 _color_12:
      00060F D1                    1776 	.db #0xd1	; 209
      000610 DF                    1777 	.db #0xdf	; 223
      000611 DF                    1778 	.db #0xdf	; 223
      000612 DF                    1779 	.db #0xdf	; 223
      000613 DF                    1780 	.db #0xdf	; 223
      000614 DF                    1781 	.db #0xdf	; 223
      000615 DF                    1782 	.db #0xdf	; 223
      000616 DF                    1783 	.db #0xdf	; 223
      000617                       1784 _color_13:
      000617 D1                    1785 	.db #0xd1	; 209
      000618 DF                    1786 	.db #0xdf	; 223
      000619 DF                    1787 	.db #0xdf	; 223
      00061A DF                    1788 	.db #0xdf	; 223
      00061B DF                    1789 	.db #0xdf	; 223
      00061C DF                    1790 	.db #0xdf	; 223
      00061D DF                    1791 	.db #0xdf	; 223
      00061E DF                    1792 	.db #0xdf	; 223
      00061F                       1793 _color_14:
      00061F DF                    1794 	.db #0xdf	; 223
      000620 DF                    1795 	.db #0xdf	; 223
      000621 DF                    1796 	.db #0xdf	; 223
      000622 D1                    1797 	.db #0xd1	; 209
      000623 D1                    1798 	.db #0xd1	; 209
      000624 D1                    1799 	.db #0xd1	; 209
      000625 D1                    1800 	.db #0xd1	; 209
      000626 D1                    1801 	.db #0xd1	; 209
      000627                       1802 _color_15:
      000627 D1                    1803 	.db #0xd1	; 209
      000628 D1                    1804 	.db #0xd1	; 209
      000629 D1                    1805 	.db #0xd1	; 209
      00062A D1                    1806 	.db #0xd1	; 209
      00062B D1                    1807 	.db #0xd1	; 209
      00062C D1                    1808 	.db #0xd1	; 209
      00062D D1                    1809 	.db #0xd1	; 209
      00062E D1                    1810 	.db #0xd1	; 209
      00062F                       1811 _color_16:
      00062F A1                    1812 	.db #0xa1	; 161
      000630 BF                    1813 	.db #0xbf	; 191
      000631 BF                    1814 	.db #0xbf	; 191
      000632 BF                    1815 	.db #0xbf	; 191
      000633 BF                    1816 	.db #0xbf	; 191
      000634 BF                    1817 	.db #0xbf	; 191
      000635 BF                    1818 	.db #0xbf	; 191
      000636 BF                    1819 	.db #0xbf	; 191
      000637                       1820 _color_17:
      000637 A1                    1821 	.db #0xa1	; 161
      000638 AF                    1822 	.db #0xaf	; 175
      000639 AF                    1823 	.db #0xaf	; 175
      00063A A1                    1824 	.db #0xa1	; 161
      00063B A1                    1825 	.db #0xa1	; 161
      00063C A1                    1826 	.db #0xa1	; 161
      00063D A1                    1827 	.db #0xa1	; 161
      00063E A1                    1828 	.db #0xa1	; 161
      00063F                       1829 _color_18:
      00063F AF                    1830 	.db #0xaf	; 175
      000640 AF                    1831 	.db #0xaf	; 175
      000641 AF                    1832 	.db #0xaf	; 175
      000642 AF                    1833 	.db #0xaf	; 175
      000643 A1                    1834 	.db #0xa1	; 161
      000644 A1                    1835 	.db #0xa1	; 161
      000645 A1                    1836 	.db #0xa1	; 161
      000646 A1                    1837 	.db #0xa1	; 161
      000647                       1838 _color_19:
      000647 B1                    1839 	.db #0xb1	; 177
      000648 B1                    1840 	.db #0xb1	; 177
      000649 B1                    1841 	.db #0xb1	; 177
      00064A B1                    1842 	.db #0xb1	; 177
      00064B B1                    1843 	.db #0xb1	; 177
      00064C B1                    1844 	.db #0xb1	; 177
      00064D B1                    1845 	.db #0xb1	; 177
      00064E B1                    1846 	.db #0xb1	; 177
      00064F                       1847 _color_column_1:
      00064F F1                    1848 	.db #0xf1	; 241
      000650 E1                    1849 	.db #0xe1	; 225
      000651 E1                    1850 	.db #0xe1	; 225
      000652 E1                    1851 	.db #0xe1	; 225
      000653 E1                    1852 	.db #0xe1	; 225
      000654 E1                    1853 	.db #0xe1	; 225
      000655 E1                    1854 	.db #0xe1	; 225
      000656 E1                    1855 	.db #0xe1	; 225
      000657                       1856 _color_column_2:
      000657 F1                    1857 	.db #0xf1	; 241
      000658 E1                    1858 	.db #0xe1	; 225
      000659 E1                    1859 	.db #0xe1	; 225
      00065A E1                    1860 	.db #0xe1	; 225
      00065B E1                    1861 	.db #0xe1	; 225
      00065C E1                    1862 	.db #0xe1	; 225
      00065D E1                    1863 	.db #0xe1	; 225
      00065E E1                    1864 	.db #0xe1	; 225
      00065F                       1865 _color_column_3:
      00065F F1                    1866 	.db #0xf1	; 241
      000660 E1                    1867 	.db #0xe1	; 225
      000661 E1                    1868 	.db #0xe1	; 225
      000662 E1                    1869 	.db #0xe1	; 225
      000663 E1                    1870 	.db #0xe1	; 225
      000664 E1                    1871 	.db #0xe1	; 225
      000665 E1                    1872 	.db #0xe1	; 225
      000666 E1                    1873 	.db #0xe1	; 225
      000667                       1874 _color_column_4:
      000667 F1                    1875 	.db #0xf1	; 241
      000668 F1                    1876 	.db #0xf1	; 241
      000669 F1                    1877 	.db #0xf1	; 241
      00066A F1                    1878 	.db #0xf1	; 241
      00066B F1                    1879 	.db #0xf1	; 241
      00066C F1                    1880 	.db #0xf1	; 241
      00066D F1                    1881 	.db #0xf1	; 241
      00066E F1                    1882 	.db #0xf1	; 241
      00066F                       1883 _color_column_5:
      00066F E1                    1884 	.db #0xe1	; 225
      000670 E1                    1885 	.db #0xe1	; 225
      000671 E1                    1886 	.db #0xe1	; 225
      000672 E1                    1887 	.db #0xe1	; 225
      000673 E1                    1888 	.db #0xe1	; 225
      000674 E1                    1889 	.db #0xe1	; 225
      000675 E1                    1890 	.db #0xe1	; 225
      000676 E1                    1891 	.db #0xe1	; 225
      000677                       1892 _color_column_6:
      000677 E1                    1893 	.db #0xe1	; 225
      000678 E1                    1894 	.db #0xe1	; 225
      000679 E1                    1895 	.db #0xe1	; 225
      00067A 41                    1896 	.db #0x41	; 65	'A'
      00067B 41                    1897 	.db #0x41	; 65	'A'
      00067C 41                    1898 	.db #0x41	; 65	'A'
      00067D 41                    1899 	.db #0x41	; 65	'A'
      00067E 41                    1900 	.db #0x41	; 65	'A'
      00067F                       1901 _color_column_7:
      00067F F1                    1902 	.db #0xf1	; 241
      000680 F1                    1903 	.db #0xf1	; 241
      000681 F1                    1904 	.db #0xf1	; 241
      000682 F1                    1905 	.db #0xf1	; 241
      000683 F1                    1906 	.db #0xf1	; 241
      000684 F1                    1907 	.db #0xf1	; 241
      000685 F1                    1908 	.db #0xf1	; 241
      000686 F1                    1909 	.db #0xf1	; 241
      000687                       1910 _color_column_8:
      000687 E1                    1911 	.db #0xe1	; 225
      000688 E1                    1912 	.db #0xe1	; 225
      000689 E1                    1913 	.db #0xe1	; 225
      00068A F1                    1914 	.db #0xf1	; 241
      00068B E1                    1915 	.db #0xe1	; 225
      00068C E1                    1916 	.db #0xe1	; 225
      00068D E1                    1917 	.db #0xe1	; 225
      00068E E1                    1918 	.db #0xe1	; 225
      00068F                       1919 _color_column_9:
      00068F 41                    1920 	.db #0x41	; 65	'A'
      000690 41                    1921 	.db #0x41	; 65	'A'
      000691 41                    1922 	.db #0x41	; 65	'A'
      000692 F1                    1923 	.db #0xf1	; 241
      000693 41                    1924 	.db #0x41	; 65	'A'
      000694 41                    1925 	.db #0x41	; 65	'A'
      000695 41                    1926 	.db #0x41	; 65	'A'
      000696 41                    1927 	.db #0x41	; 65	'A'
      000697                       1928 _color_column_10:
      000697 F1                    1929 	.db #0xf1	; 241
      000698 F1                    1930 	.db #0xf1	; 241
      000699 F1                    1931 	.db #0xf1	; 241
      00069A F1                    1932 	.db #0xf1	; 241
      00069B F1                    1933 	.db #0xf1	; 241
      00069C F1                    1934 	.db #0xf1	; 241
      00069D F1                    1935 	.db #0xf1	; 241
      00069E F1                    1936 	.db #0xf1	; 241
      00069F                       1937 _color_column_11:
      00069F E1                    1938 	.db #0xe1	; 225
      0006A0 E1                    1939 	.db #0xe1	; 225
      0006A1 E1                    1940 	.db #0xe1	; 225
      0006A2 E1                    1941 	.db #0xe1	; 225
      0006A3 E1                    1942 	.db #0xe1	; 225
      0006A4 E1                    1943 	.db #0xe1	; 225
      0006A5 E1                    1944 	.db #0xe1	; 225
      0006A6 E1                    1945 	.db #0xe1	; 225
      0006A7                       1946 _color_column_12:
      0006A7 41                    1947 	.db #0x41	; 65	'A'
      0006A8 41                    1948 	.db #0x41	; 65	'A'
      0006A9 41                    1949 	.db #0x41	; 65	'A'
      0006AA 41                    1950 	.db #0x41	; 65	'A'
      0006AB 41                    1951 	.db #0x41	; 65	'A'
      0006AC 41                    1952 	.db #0x41	; 65	'A'
      0006AD 41                    1953 	.db #0x41	; 65	'A'
      0006AE 41                    1954 	.db #0x41	; 65	'A'
      0006AF                       1955 _color_column_16:
      0006AF F1                    1956 	.db #0xf1	; 241
      0006B0 F1                    1957 	.db #0xf1	; 241
      0006B1 F1                    1958 	.db #0xf1	; 241
      0006B2 F1                    1959 	.db #0xf1	; 241
      0006B3 F1                    1960 	.db #0xf1	; 241
      0006B4 F1                    1961 	.db #0xf1	; 241
      0006B5 F1                    1962 	.db #0xf1	; 241
      0006B6 F1                    1963 	.db #0xf1	; 241
      0006B7                       1964 _color_column_17:
      0006B7 E1                    1965 	.db #0xe1	; 225
      0006B8 E1                    1966 	.db #0xe1	; 225
      0006B9 E1                    1967 	.db #0xe1	; 225
      0006BA E1                    1968 	.db #0xe1	; 225
      0006BB E1                    1969 	.db #0xe1	; 225
      0006BC E1                    1970 	.db #0xe1	; 225
      0006BD E1                    1971 	.db #0xe1	; 225
      0006BE E1                    1972 	.db #0xe1	; 225
      0006BF                       1973 _color_column_18:
      0006BF 41                    1974 	.db #0x41	; 65	'A'
      0006C0 41                    1975 	.db #0x41	; 65	'A'
      0006C1 41                    1976 	.db #0x41	; 65	'A'
      0006C2 41                    1977 	.db #0x41	; 65	'A'
      0006C3 41                    1978 	.db #0x41	; 65	'A'
      0006C4 E1                    1979 	.db #0xe1	; 225
      0006C5 E1                    1980 	.db #0xe1	; 225
      0006C6 E1                    1981 	.db #0xe1	; 225
      0006C7                       1982 _color_column_13:
      0006C7 E1                    1983 	.db #0xe1	; 225
      0006C8 E1                    1984 	.db #0xe1	; 225
      0006C9 E1                    1985 	.db #0xe1	; 225
      0006CA E1                    1986 	.db #0xe1	; 225
      0006CB E1                    1987 	.db #0xe1	; 225
      0006CC E1                    1988 	.db #0xe1	; 225
      0006CD E1                    1989 	.db #0xe1	; 225
      0006CE F1                    1990 	.db #0xf1	; 241
      0006CF                       1991 _color_column_14:
      0006CF E1                    1992 	.db #0xe1	; 225
      0006D0 E1                    1993 	.db #0xe1	; 225
      0006D1 E1                    1994 	.db #0xe1	; 225
      0006D2 E1                    1995 	.db #0xe1	; 225
      0006D3 E1                    1996 	.db #0xe1	; 225
      0006D4 E1                    1997 	.db #0xe1	; 225
      0006D5 E1                    1998 	.db #0xe1	; 225
      0006D6 F1                    1999 	.db #0xf1	; 241
      0006D7                       2000 _color_column_15:
      0006D7 E1                    2001 	.db #0xe1	; 225
      0006D8 E1                    2002 	.db #0xe1	; 225
      0006D9 E1                    2003 	.db #0xe1	; 225
      0006DA E1                    2004 	.db #0xe1	; 225
      0006DB E1                    2005 	.db #0xe1	; 225
      0006DC E1                    2006 	.db #0xe1	; 225
      0006DD E1                    2007 	.db #0xe1	; 225
      0006DE F1                    2008 	.db #0xf1	; 241
      0006DF                       2009 _color_dust_0:
      0006DF F1                    2010 	.db #0xf1	; 241
      0006E0 F1                    2011 	.db #0xf1	; 241
      0006E1 F1                    2012 	.db #0xf1	; 241
      0006E2 F1                    2013 	.db #0xf1	; 241
      0006E3 F1                    2014 	.db #0xf1	; 241
      0006E4 F1                    2015 	.db #0xf1	; 241
      0006E5 F1                    2016 	.db #0xf1	; 241
      0006E6 F1                    2017 	.db #0xf1	; 241
      0006E7                       2018 _color_dust_1:
      0006E7 F1                    2019 	.db #0xf1	; 241
      0006E8 F1                    2020 	.db #0xf1	; 241
      0006E9 F1                    2021 	.db #0xf1	; 241
      0006EA F1                    2022 	.db #0xf1	; 241
      0006EB F1                    2023 	.db #0xf1	; 241
      0006EC F1                    2024 	.db #0xf1	; 241
      0006ED F1                    2025 	.db #0xf1	; 241
      0006EE F1                    2026 	.db #0xf1	; 241
      0006EF                       2027 _color_dust_2:
      0006EF F1                    2028 	.db #0xf1	; 241
      0006F0 F1                    2029 	.db #0xf1	; 241
      0006F1 F1                    2030 	.db #0xf1	; 241
      0006F2 F1                    2031 	.db #0xf1	; 241
      0006F3 F1                    2032 	.db #0xf1	; 241
      0006F4 F1                    2033 	.db #0xf1	; 241
      0006F5 F1                    2034 	.db #0xf1	; 241
      0006F6 F1                    2035 	.db #0xf1	; 241
      0006F7                       2036 _color_dust_3:
      0006F7 F1                    2037 	.db #0xf1	; 241
      0006F8 F1                    2038 	.db #0xf1	; 241
      0006F9 F1                    2039 	.db #0xf1	; 241
      0006FA F1                    2040 	.db #0xf1	; 241
      0006FB F1                    2041 	.db #0xf1	; 241
      0006FC F1                    2042 	.db #0xf1	; 241
      0006FD F1                    2043 	.db #0xf1	; 241
      0006FE F1                    2044 	.db #0xf1	; 241
      0006FF                       2045 _color_font_1:
      0006FF F1                    2046 	.db #0xf1	; 241
      000700 F1                    2047 	.db #0xf1	; 241
      000701 E1                    2048 	.db #0xe1	; 225
      000702 71                    2049 	.db #0x71	; 113	'q'
      000703 71                    2050 	.db #0x71	; 113	'q'
      000704 51                    2051 	.db #0x51	; 81	'Q'
      000705 51                    2052 	.db #0x51	; 81	'Q'
      000706 41                    2053 	.db #0x41	; 65	'A'
      000707                       2054 _color_font_2:
      000707 61                    2055 	.db #0x61	; 97	'a'
      000708 61                    2056 	.db #0x61	; 97	'a'
      000709 81                    2057 	.db #0x81	; 129
      00070A 81                    2058 	.db #0x81	; 129
      00070B 91                    2059 	.db #0x91	; 145
      00070C 91                    2060 	.db #0x91	; 145
      00070D E1                    2061 	.db #0xe1	; 225
      00070E E1                    2062 	.db #0xe1	; 225
      00070F                       2063 _color_title_1:
      00070F A1                    2064 	.db #0xa1	; 161
      000710 A1                    2065 	.db #0xa1	; 161
      000711 A1                    2066 	.db #0xa1	; 161
      000712 A1                    2067 	.db #0xa1	; 161
      000713 A1                    2068 	.db #0xa1	; 161
      000714 A1                    2069 	.db #0xa1	; 161
      000715 A1                    2070 	.db #0xa1	; 161
      000716 A1                    2071 	.db #0xa1	; 161
      000717                       2072 _color_title_2:
      000717 B1                    2073 	.db #0xb1	; 177
      000718 B1                    2074 	.db #0xb1	; 177
      000719 B1                    2075 	.db #0xb1	; 177
      00071A B1                    2076 	.db #0xb1	; 177
      00071B B1                    2077 	.db #0xb1	; 177
      00071C B1                    2078 	.db #0xb1	; 177
      00071D B1                    2079 	.db #0xb1	; 177
      00071E B1                    2080 	.db #0xb1	; 177
      00071F                       2081 _color_title_3:
      00071F D1                    2082 	.db #0xd1	; 209
      000720 D1                    2083 	.db #0xd1	; 209
      000721 D1                    2084 	.db #0xd1	; 209
      000722 D1                    2085 	.db #0xd1	; 209
      000723 D1                    2086 	.db #0xd1	; 209
      000724 D1                    2087 	.db #0xd1	; 209
      000725 D1                    2088 	.db #0xd1	; 209
      000726 D1                    2089 	.db #0xd1	; 209
      000727                       2090 _color_title_4:
      000727 F1                    2091 	.db #0xf1	; 241
      000728 F1                    2092 	.db #0xf1	; 241
      000729 F1                    2093 	.db #0xf1	; 241
      00072A F1                    2094 	.db #0xf1	; 241
      00072B F1                    2095 	.db #0xf1	; 241
      00072C F1                    2096 	.db #0xf1	; 241
      00072D F1                    2097 	.db #0xf1	; 241
      00072E F1                    2098 	.db #0xf1	; 241
      00072F                       2099 _color_title_5:
      00072F 71                    2100 	.db #0x71	; 113	'q'
      000730 71                    2101 	.db #0x71	; 113	'q'
      000731 71                    2102 	.db #0x71	; 113	'q'
      000732 71                    2103 	.db #0x71	; 113	'q'
      000733 71                    2104 	.db #0x71	; 113	'q'
      000734 71                    2105 	.db #0x71	; 113	'q'
      000735 71                    2106 	.db #0x71	; 113	'q'
      000736 71                    2107 	.db #0x71	; 113	'q'
      000737                       2108 _color_title_6:
      000737 51                    2109 	.db #0x51	; 81	'Q'
      000738 51                    2110 	.db #0x51	; 81	'Q'
      000739 51                    2111 	.db #0x51	; 81	'Q'
      00073A 51                    2112 	.db #0x51	; 81	'Q'
      00073B 51                    2113 	.db #0x51	; 81	'Q'
      00073C 51                    2114 	.db #0x51	; 81	'Q'
      00073D 51                    2115 	.db #0x51	; 81	'Q'
      00073E 51                    2116 	.db #0x51	; 81	'Q'
      00073F                       2117 _color_title_7:
      00073F 41                    2118 	.db #0x41	; 65	'A'
      000740 41                    2119 	.db #0x41	; 65	'A'
      000741 41                    2120 	.db #0x41	; 65	'A'
      000742 41                    2121 	.db #0x41	; 65	'A'
      000743 41                    2122 	.db #0x41	; 65	'A'
      000744 41                    2123 	.db #0x41	; 65	'A'
      000745 41                    2124 	.db #0x41	; 65	'A'
      000746 41                    2125 	.db #0x41	; 65	'A'
      000747                       2126 _sprite_arrow_0:
      000747 00                    2127 	.db #0x00	; 0
      000748 00                    2128 	.db #0x00	; 0
      000749 00                    2129 	.db #0x00	; 0
      00074A 00                    2130 	.db #0x00	; 0
      00074B 00                    2131 	.db #0x00	; 0
      00074C 00                    2132 	.db #0x00	; 0
      00074D 00                    2133 	.db #0x00	; 0
      00074E 00                    2134 	.db #0x00	; 0
      00074F                       2135 _sprite_arrow_1:
      00074F FF                    2136 	.db #0xff	; 255
      000750 00                    2137 	.db #0x00	; 0
      000751 3F                    2138 	.db #0x3f	; 63
      000752 00                    2139 	.db #0x00	; 0
      000753 0F                    2140 	.db #0x0f	; 15
      000754 00                    2141 	.db #0x00	; 0
      000755 03                    2142 	.db #0x03	; 3
      000756 00                    2143 	.db #0x00	; 0
      000757                       2144 _sprite_arrow_2:
      000757 00                    2145 	.db #0x00	; 0
      000758 00                    2146 	.db #0x00	; 0
      000759 00                    2147 	.db #0x00	; 0
      00075A 00                    2148 	.db #0x00	; 0
      00075B 00                    2149 	.db #0x00	; 0
      00075C 00                    2150 	.db #0x00	; 0
      00075D 00                    2151 	.db #0x00	; 0
      00075E 00                    2152 	.db #0x00	; 0
      00075F                       2153 _sprite_arrow_3:
      00075F FF                    2154 	.db #0xff	; 255
      000760 00                    2155 	.db #0x00	; 0
      000761 FC                    2156 	.db #0xfc	; 252
      000762 00                    2157 	.db #0x00	; 0
      000763 F0                    2158 	.db #0xf0	; 240
      000764 00                    2159 	.db #0x00	; 0
      000765 C0                    2160 	.db #0xc0	; 192
      000766 00                    2161 	.db #0x00	; 0
      000767                       2162 _sprite_hit_1:
      000767 00                    2163 	.db #0x00	; 0
      000768 77                    2164 	.db #0x77	; 119	'w'
      000769 22                    2165 	.db #0x22	; 34
      00076A 22                    2166 	.db #0x22	; 34
      00076B 22                    2167 	.db #0x22	; 34
      00076C 3E                    2168 	.db #0x3e	; 62
      00076D 22                    2169 	.db #0x22	; 34
      00076E 22                    2170 	.db #0x22	; 34
      00076F 22                    2171 	.db #0x22	; 34
      000770 77                    2172 	.db #0x77	; 119	'w'
      000771 00                    2173 	.db #0x00	; 0
      000772 00                    2174 	.db #0x00	; 0
      000773 00                    2175 	.db #0x00	; 0
      000774 00                    2176 	.db #0x00	; 0
      000775 00                    2177 	.db #0x00	; 0
      000776 00                    2178 	.db #0x00	; 0
      000777 00                    2179 	.db #0x00	; 0
      000778 77                    2180 	.db #0x77	; 119	'w'
      000779 25                    2181 	.db #0x25	; 37
      00077A 21                    2182 	.db #0x21	; 33
      00077B 21                    2183 	.db #0x21	; 33
      00077C 21                    2184 	.db #0x21	; 33
      00077D 21                    2185 	.db #0x21	; 33
      00077E 21                    2186 	.db #0x21	; 33
      00077F 21                    2187 	.db #0x21	; 33
      000780 73                    2188 	.db #0x73	; 115	's'
      000781 00                    2189 	.db #0x00	; 0
      000782 00                    2190 	.db #0x00	; 0
      000783 00                    2191 	.db #0x00	; 0
      000784 00                    2192 	.db #0x00	; 0
      000785 00                    2193 	.db #0x00	; 0
      000786 00                    2194 	.db #0x00	; 0
      000787                       2195 _sprite_hit_2:
      000787 00                    2196 	.db #0x00	; 0
      000788 C0                    2197 	.db #0xc0	; 192
      000789 40                    2198 	.db #0x40	; 64
      00078A 00                    2199 	.db #0x00	; 0
      00078B 00                    2200 	.db #0x00	; 0
      00078C 00                    2201 	.db #0x00	; 0
      00078D 00                    2202 	.db #0x00	; 0
      00078E 00                    2203 	.db #0x00	; 0
      00078F 00                    2204 	.db #0x00	; 0
      000790 80                    2205 	.db #0x80	; 128
      000791 00                    2206 	.db #0x00	; 0
      000792 00                    2207 	.db #0x00	; 0
      000793 00                    2208 	.db #0x00	; 0
      000794 00                    2209 	.db #0x00	; 0
      000795 00                    2210 	.db #0x00	; 0
      000796 00                    2211 	.db #0x00	; 0
      000797 00                    2212 	.db #0x00	; 0
      000798 00                    2213 	.db #0x00	; 0
      000799 00                    2214 	.db #0x00	; 0
      00079A 00                    2215 	.db #0x00	; 0
      00079B 00                    2216 	.db #0x00	; 0
      00079C 00                    2217 	.db #0x00	; 0
      00079D 00                    2218 	.db #0x00	; 0
      00079E 00                    2219 	.db #0x00	; 0
      00079F 00                    2220 	.db #0x00	; 0
      0007A0 00                    2221 	.db #0x00	; 0
      0007A1 00                    2222 	.db #0x00	; 0
      0007A2 00                    2223 	.db #0x00	; 0
      0007A3 00                    2224 	.db #0x00	; 0
      0007A4 00                    2225 	.db #0x00	; 0
      0007A5 00                    2226 	.db #0x00	; 0
      0007A6 00                    2227 	.db #0x00	; 0
      0007A7                       2228 _sprite_3x:
      0007A7 00                    2229 	.db #0x00	; 0
      0007A8 3E                    2230 	.db #0x3e	; 62
      0007A9 63                    2231 	.db #0x63	; 99	'c'
      0007AA 03                    2232 	.db #0x03	; 3
      0007AB 03                    2233 	.db #0x03	; 3
      0007AC 1E                    2234 	.db #0x1e	; 30
      0007AD 03                    2235 	.db #0x03	; 3
      0007AE 03                    2236 	.db #0x03	; 3
      0007AF 63                    2237 	.db #0x63	; 99	'c'
      0007B0 3E                    2238 	.db #0x3e	; 62
      0007B1 00                    2239 	.db #0x00	; 0
      0007B2 00                    2240 	.db #0x00	; 0
      0007B3 00                    2241 	.db #0x00	; 0
      0007B4 00                    2242 	.db #0x00	; 0
      0007B5 00                    2243 	.db #0x00	; 0
      0007B6 00                    2244 	.db #0x00	; 0
      0007B7 00                    2245 	.db #0x00	; 0
      0007B8 00                    2246 	.db #0x00	; 0
      0007B9 00                    2247 	.db #0x00	; 0
      0007BA 63                    2248 	.db #0x63	; 99	'c'
      0007BB 36                    2249 	.db #0x36	; 54	'6'
      0007BC 1C                    2250 	.db #0x1c	; 28
      0007BD 08                    2251 	.db #0x08	; 8
      0007BE 1C                    2252 	.db #0x1c	; 28
      0007BF 36                    2253 	.db #0x36	; 54	'6'
      0007C0 63                    2254 	.db #0x63	; 99	'c'
      0007C1 00                    2255 	.db #0x00	; 0
      0007C2 00                    2256 	.db #0x00	; 0
      0007C3 00                    2257 	.db #0x00	; 0
      0007C4 00                    2258 	.db #0x00	; 0
      0007C5 00                    2259 	.db #0x00	; 0
      0007C6 00                    2260 	.db #0x00	; 0
      0007C7                       2261 _sprite_4x:
      0007C7 00                    2262 	.db #0x00	; 0
      0007C8 02                    2263 	.db #0x02	; 2
      0007C9 06                    2264 	.db #0x06	; 6
      0007CA 0E                    2265 	.db #0x0e	; 14
      0007CB 16                    2266 	.db #0x16	; 22
      0007CC 26                    2267 	.db #0x26	; 38
      0007CD 7F                    2268 	.db #0x7f	; 127
      0007CE 06                    2269 	.db #0x06	; 6
      0007CF 06                    2270 	.db #0x06	; 6
      0007D0 0F                    2271 	.db #0x0f	; 15
      0007D1 00                    2272 	.db #0x00	; 0
      0007D2 00                    2273 	.db #0x00	; 0
      0007D3 00                    2274 	.db #0x00	; 0
      0007D4 00                    2275 	.db #0x00	; 0
      0007D5 00                    2276 	.db #0x00	; 0
      0007D6 00                    2277 	.db #0x00	; 0
      0007D7 00                    2278 	.db #0x00	; 0
      0007D8 00                    2279 	.db #0x00	; 0
      0007D9 00                    2280 	.db #0x00	; 0
      0007DA 63                    2281 	.db #0x63	; 99	'c'
      0007DB 36                    2282 	.db #0x36	; 54	'6'
      0007DC 1C                    2283 	.db #0x1c	; 28
      0007DD 08                    2284 	.db #0x08	; 8
      0007DE 1C                    2285 	.db #0x1c	; 28
      0007DF 36                    2286 	.db #0x36	; 54	'6'
      0007E0 63                    2287 	.db #0x63	; 99	'c'
      0007E1 00                    2288 	.db #0x00	; 0
      0007E2 00                    2289 	.db #0x00	; 0
      0007E3 00                    2290 	.db #0x00	; 0
      0007E4 00                    2291 	.db #0x00	; 0
      0007E5 00                    2292 	.db #0x00	; 0
      0007E6 00                    2293 	.db #0x00	; 0
      0007E7                       2294 _sprite_5x:
      0007E7 00                    2295 	.db #0x00	; 0
      0007E8 7E                    2296 	.db #0x7e	; 126
      0007E9 60                    2297 	.db #0x60	; 96
      0007EA 60                    2298 	.db #0x60	; 96
      0007EB 7E                    2299 	.db #0x7e	; 126
      0007EC 03                    2300 	.db #0x03	; 3
      0007ED 03                    2301 	.db #0x03	; 3
      0007EE 03                    2302 	.db #0x03	; 3
      0007EF 63                    2303 	.db #0x63	; 99	'c'
      0007F0 3E                    2304 	.db #0x3e	; 62
      0007F1 00                    2305 	.db #0x00	; 0
      0007F2 00                    2306 	.db #0x00	; 0
      0007F3 00                    2307 	.db #0x00	; 0
      0007F4 00                    2308 	.db #0x00	; 0
      0007F5 00                    2309 	.db #0x00	; 0
      0007F6 00                    2310 	.db #0x00	; 0
      0007F7 00                    2311 	.db #0x00	; 0
      0007F8 00                    2312 	.db #0x00	; 0
      0007F9 00                    2313 	.db #0x00	; 0
      0007FA 63                    2314 	.db #0x63	; 99	'c'
      0007FB 36                    2315 	.db #0x36	; 54	'6'
      0007FC 1C                    2316 	.db #0x1c	; 28
      0007FD 08                    2317 	.db #0x08	; 8
      0007FE 1C                    2318 	.db #0x1c	; 28
      0007FF 36                    2319 	.db #0x36	; 54	'6'
      000800 63                    2320 	.db #0x63	; 99	'c'
      000801 00                    2321 	.db #0x00	; 0
      000802 00                    2322 	.db #0x00	; 0
      000803 00                    2323 	.db #0x00	; 0
      000804 00                    2324 	.db #0x00	; 0
      000805 00                    2325 	.db #0x00	; 0
      000806 00                    2326 	.db #0x00	; 0
      000807                       2327 _sprite_6x:
      000807 00                    2328 	.db #0x00	; 0
      000808 3E                    2329 	.db #0x3e	; 62
      000809 61                    2330 	.db #0x61	; 97	'a'
      00080A 60                    2331 	.db #0x60	; 96
      00080B 7E                    2332 	.db #0x7e	; 126
      00080C 63                    2333 	.db #0x63	; 99	'c'
      00080D 63                    2334 	.db #0x63	; 99	'c'
      00080E 63                    2335 	.db #0x63	; 99	'c'
      00080F 63                    2336 	.db #0x63	; 99	'c'
      000810 3E                    2337 	.db #0x3e	; 62
      000811 00                    2338 	.db #0x00	; 0
      000812 00                    2339 	.db #0x00	; 0
      000813 00                    2340 	.db #0x00	; 0
      000814 00                    2341 	.db #0x00	; 0
      000815 00                    2342 	.db #0x00	; 0
      000816 00                    2343 	.db #0x00	; 0
      000817 00                    2344 	.db #0x00	; 0
      000818 00                    2345 	.db #0x00	; 0
      000819 00                    2346 	.db #0x00	; 0
      00081A 63                    2347 	.db #0x63	; 99	'c'
      00081B 36                    2348 	.db #0x36	; 54	'6'
      00081C 1C                    2349 	.db #0x1c	; 28
      00081D 08                    2350 	.db #0x08	; 8
      00081E 1C                    2351 	.db #0x1c	; 28
      00081F 36                    2352 	.db #0x36	; 54	'6'
      000820 63                    2353 	.db #0x63	; 99	'c'
      000821 00                    2354 	.db #0x00	; 0
      000822 00                    2355 	.db #0x00	; 0
      000823 00                    2356 	.db #0x00	; 0
      000824 00                    2357 	.db #0x00	; 0
      000825 00                    2358 	.db #0x00	; 0
      000826 00                    2359 	.db #0x00	; 0
      000827                       2360 _sprite_mega_hit:
      000827 8B                    2361 	.db #0x8b	; 139
      000828 DA                    2362 	.db #0xda	; 218
      000829 AB                    2363 	.db #0xab	; 171
      00082A 8A                    2364 	.db #0x8a	; 138
      00082B 8B                    2365 	.db #0x8b	; 139
      00082C 00                    2366 	.db #0x00	; 0
      00082D 72                    2367 	.db #0x72	; 114	'r'
      00082E 85                    2368 	.db #0x85	; 133
      00082F B5                    2369 	.db #0xb5	; 181
      000830 97                    2370 	.db #0x97	; 151
      000831 75                    2371 	.db #0x75	; 117	'u'
      000832 00                    2372 	.db #0x00	; 0
      000833 00                    2373 	.db #0x00	; 0
      000834 00                    2374 	.db #0x00	; 0
      000835 00                    2375 	.db #0x00	; 0
      000836 00                    2376 	.db #0x00	; 0
      000837 00                    2377 	.db #0x00	; 0
      000838 00                    2378 	.db #0x00	; 0
      000839 00                    2379 	.db #0x00	; 0
      00083A 63                    2380 	.db #0x63	; 99	'c'
      00083B 36                    2381 	.db #0x36	; 54	'6'
      00083C 1C                    2382 	.db #0x1c	; 28
      00083D 08                    2383 	.db #0x08	; 8
      00083E 1C                    2384 	.db #0x1c	; 28
      00083F 36                    2385 	.db #0x36	; 54	'6'
      000840 63                    2386 	.db #0x63	; 99	'c'
      000841 00                    2387 	.db #0x00	; 0
      000842 00                    2388 	.db #0x00	; 0
      000843 00                    2389 	.db #0x00	; 0
      000844 00                    2390 	.db #0x00	; 0
      000845 00                    2391 	.db #0x00	; 0
      000846 00                    2392 	.db #0x00	; 0
                                   2393 ;src\/Graphics.h:16: void DrawString(const char* str, byte col, byte line) {
                                   2394 ;	---------------------------------
                                   2395 ; Function DrawString
                                   2396 ; ---------------------------------
      000847                       2397 _DrawString::
      000847 DD E5            [15] 2398 	push	ix
      000849 DD 21 00 00      [14] 2399 	ld	ix,#0
      00084D DD 39            [15] 2400 	add	ix,sp
                                   2401 ;src\/Graphics.h:17: while (*str) {
      00084F DD 6E 06         [19] 2402 	ld	l, 6 (ix)
      000852 DD 4E 04         [19] 2403 	ld	c, 4 (ix)
      000855 DD 46 05         [19] 2404 	ld	b, 5 (ix)
      000858                       2405 00101$:
      000858 0A               [ 7] 2406 	ld	a, (bc)
      000859 B7               [ 4] 2407 	or	a, a
      00085A 28 1A            [12] 2408 	jr	Z, 00104$
                                   2409 ;src\/Graphics.h:18: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      00085C 55               [ 4] 2410 	ld	d, l
      00085D 2C               [ 4] 2411 	inc	l
      00085E DD 75 06         [19] 2412 	ld	6 (ix), l
      000861 03               [ 6] 2413 	inc	bc
      000862 C6 0F            [ 7] 2414 	add	a, #0x0f
      000864 E5               [11] 2415 	push	hl
      000865 C5               [11] 2416 	push	bc
      000866 DD 66 07         [19] 2417 	ld	h, 7 (ix)
      000869 6A               [ 4] 2418 	ld	l, d
      00086A E5               [11] 2419 	push	hl
      00086B F5               [11] 2420 	push	af
      00086C 33               [ 6] 2421 	inc	sp
      00086D CDrEDr00         [17] 2422 	call	_DrawChar
      000870 F1               [10] 2423 	pop	af
      000871 33               [ 6] 2424 	inc	sp
      000872 C1               [10] 2425 	pop	bc
      000873 E1               [10] 2426 	pop	hl
      000874 18 E2            [12] 2427 	jr	00101$
      000876                       2428 00104$:
                                   2429 ;src\/Graphics.h:20: }
      000876 DD E1            [14] 2430 	pop	ix
      000878 C9               [10] 2431 	ret
                                   2432 ;src\/Graphics.h:22: void DrawNumber(word number, byte col, byte line) {
                                   2433 ;	---------------------------------
                                   2434 ; Function DrawNumber
                                   2435 ; ---------------------------------
      000879                       2436 _DrawNumber::
      000879 DD E5            [15] 2437 	push	ix
      00087B DD 21 00 00      [14] 2438 	ld	ix,#0
      00087F DD 39            [15] 2439 	add	ix,sp
      000881 21 FA FF         [10] 2440 	ld	hl, #-6
      000884 39               [11] 2441 	add	hl, sp
      000885 F9               [ 6] 2442 	ld	sp, hl
                                   2443 ;src\/Graphics.h:25: bool trailingZero = TRUE;
      000886 DD 36 FA 01      [19] 2444 	ld	-6 (ix), #0x01
                                   2445 ;src\/Graphics.h:27: DrawString("      ", col, line); // Clear space for number (6 digits)
      00088A DD 66 07         [19] 2446 	ld	h, 7 (ix)
      00088D DD 6E 06         [19] 2447 	ld	l, 6 (ix)
      000890 E5               [11] 2448 	push	hl
      000891 21r2Dr09         [10] 2449 	ld	hl, #___str_0
      000894 E5               [11] 2450 	push	hl
      000895 CDr47r08         [17] 2451 	call	_DrawString
      000898 F1               [10] 2452 	pop	af
      000899 F1               [10] 2453 	pop	af
                                   2454 ;src\/Graphics.h:29: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00089A DD 7E 06         [19] 2455 	ld	a, 6 (ix)
      00089D DD 77 FF         [19] 2456 	ld	-1 (ix), a
      0008A0 1E 06            [ 7] 2457 	ld	e, #0x06
      0008A2                       2458 00109$:
      0008A2 7B               [ 4] 2459 	ld	a, e
      0008A3 B7               [ 4] 2460 	or	a, a
      0008A4 CAr28r09         [10] 2461 	jp	Z, 00111$
                                   2462 ;src\/Graphics.h:31: power = Power(10, i - 1);
      0008A7 7B               [ 4] 2463 	ld	a, e
      0008A8 3D               [ 4] 2464 	dec	a
      0008A9 D5               [11] 2465 	push	de
      0008AA 57               [ 4] 2466 	ld	d,a
      0008AB 1E 0A            [ 7] 2467 	ld	e,#0x0a
      0008AD D5               [11] 2468 	push	de
      0008AE CDr1Dr00         [17] 2469 	call	_Power
      0008B1 F1               [10] 2470 	pop	af
      0008B2 D1               [10] 2471 	pop	de
      0008B3 DD 75 FB         [19] 2472 	ld	-5 (ix), l
      0008B6 DD 74 FC         [19] 2473 	ld	-4 (ix), h
                                   2474 ;src\/Graphics.h:33: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      0008B9 D5               [11] 2475 	push	de
      0008BA DD 6E FB         [19] 2476 	ld	l, -5 (ix)
      0008BD DD 66 FC         [19] 2477 	ld	h, -4 (ix)
      0008C0 E5               [11] 2478 	push	hl
      0008C1 DD 6E 04         [19] 2479 	ld	l, 4 (ix)
      0008C4 DD 66 05         [19] 2480 	ld	h, 5 (ix)
      0008C7 E5               [11] 2481 	push	hl
      0008C8 CDr00r00         [17] 2482 	call	__divuint
      0008CB F1               [10] 2483 	pop	af
      0008CC F1               [10] 2484 	pop	af
      0008CD DD 75 FD         [19] 2485 	ld	-3 (ix), l
      0008D0 DD 74 FE         [19] 2486 	ld	-2 (ix), h
      0008D3 D1               [10] 2487 	pop	de
      0008D4 DD 7E FA         [19] 2488 	ld	a, -6 (ix)
      0008D7 B7               [ 4] 2489 	or	a, a
      0008D8 28 0C            [12] 2490 	jr	Z, 00102$
      0008DA DD 7E FE         [19] 2491 	ld	a, -2 (ix)
      0008DD DD B6 FD         [19] 2492 	or	a, -3 (ix)
      0008E0 28 04            [12] 2493 	jr	Z, 00102$
      0008E2 DD 36 FA 00      [19] 2494 	ld	-6 (ix), #0
      0008E6                       2495 00102$:
                                   2496 ;src\/Graphics.h:35: if(!trailingZero || i == 1) {
      0008E6 DD 7E FA         [19] 2497 	ld	a, -6 (ix)
      0008E9 B7               [ 4] 2498 	or	a, a
      0008EA 28 04            [12] 2499 	jr	Z, 00104$
      0008EC 7B               [ 4] 2500 	ld	a, e
      0008ED 3D               [ 4] 2501 	dec	a
      0008EE 20 31            [12] 2502 	jr	NZ, 00105$
      0008F0                       2503 00104$:
                                   2504 ;src\/Graphics.h:36: DrawChar((number / power) + CHAR_0, col, line);
      0008F0 DD 7E FD         [19] 2505 	ld	a, -3 (ix)
      0008F3 C6 3F            [ 7] 2506 	add	a, #0x3f
      0008F5 D5               [11] 2507 	push	de
      0008F6 DD 66 07         [19] 2508 	ld	h, 7 (ix)
      0008F9 E5               [11] 2509 	push	hl
      0008FA 33               [ 6] 2510 	inc	sp
      0008FB DD 66 FF         [19] 2511 	ld	h, -1 (ix)
      0008FE E5               [11] 2512 	push	hl
      0008FF 33               [ 6] 2513 	inc	sp
      000900 F5               [11] 2514 	push	af
      000901 33               [ 6] 2515 	inc	sp
      000902 CDrEDr00         [17] 2516 	call	_DrawChar
      000905 F1               [10] 2517 	pop	af
      000906 33               [ 6] 2518 	inc	sp
      000907 DD 6E FB         [19] 2519 	ld	l, -5 (ix)
      00090A DD 66 FC         [19] 2520 	ld	h, -4 (ix)
      00090D E5               [11] 2521 	push	hl
      00090E DD 6E 04         [19] 2522 	ld	l, 4 (ix)
      000911 DD 66 05         [19] 2523 	ld	h, 5 (ix)
      000914 E5               [11] 2524 	push	hl
      000915 CDr00r00         [17] 2525 	call	__moduint
      000918 F1               [10] 2526 	pop	af
      000919 F1               [10] 2527 	pop	af
      00091A D1               [10] 2528 	pop	de
      00091B DD 75 04         [19] 2529 	ld	4 (ix), l
      00091E DD 74 05         [19] 2530 	ld	5 (ix), h
      000921                       2531 00105$:
                                   2532 ;src\/Graphics.h:40: col++;
      000921 DD 34 FF         [23] 2533 	inc	-1 (ix)
                                   2534 ;src\/Graphics.h:29: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000924 1D               [ 4] 2535 	dec	e
      000925 C3rA2r08         [10] 2536 	jp	00109$
      000928                       2537 00111$:
                                   2538 ;src\/Graphics.h:45: }
      000928 DD F9            [10] 2539 	ld	sp, ix
      00092A DD E1            [14] 2540 	pop	ix
      00092C C9               [10] 2541 	ret
      00092D                       2542 ___str_0:
      00092D 20 20 20 20 20 20     2543 	.ascii "      "
      000933 00                    2544 	.db 0x00
                                   2545 ;src\/Graphics.h:47: void DrawColumn(byte col) {
                                   2546 ;	---------------------------------
                                   2547 ; Function DrawColumn
                                   2548 ; ---------------------------------
      000934                       2549 _DrawColumn::
      000934 DD E5            [15] 2550 	push	ix
      000936 DD 21 00 00      [14] 2551 	ld	ix,#0
      00093A DD 39            [15] 2552 	add	ix,sp
      00093C 21 F9 FF         [10] 2553 	ld	hl, #-7
      00093F 39               [11] 2554 	add	hl, sp
      000940 F9               [ 6] 2555 	ld	sp, hl
                                   2556 ;src\/Graphics.h:48: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000941 DD 4E 04         [19] 2557 	ld	c, 4 (ix)
      000944 06 00            [ 7] 2558 	ld	b, #0x00
      000946 21 00 18         [10] 2559 	ld	hl, #0x1800
      000949 09               [11] 2560 	add	hl, bc
      00094A C5               [11] 2561 	push	bc
      00094B 3E 18            [ 7] 2562 	ld	a, #0x18
      00094D F5               [11] 2563 	push	af
      00094E 33               [ 6] 2564 	inc	sp
      00094F E5               [11] 2565 	push	hl
      000950 CDr00r00         [17] 2566 	call	_WRTVRM
      000953 F1               [10] 2567 	pop	af
      000954 33               [ 6] 2568 	inc	sp
      000955 C1               [10] 2569 	pop	bc
                                   2570 ;src\/Graphics.h:49: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000956 21 01 18         [10] 2571 	ld	hl, #0x1801
      000959 09               [11] 2572 	add	hl, bc
      00095A C5               [11] 2573 	push	bc
      00095B 3E 19            [ 7] 2574 	ld	a, #0x19
      00095D F5               [11] 2575 	push	af
      00095E 33               [ 6] 2576 	inc	sp
      00095F E5               [11] 2577 	push	hl
      000960 CDr00r00         [17] 2578 	call	_WRTVRM
      000963 F1               [10] 2579 	pop	af
      000964 33               [ 6] 2580 	inc	sp
      000965 C1               [10] 2581 	pop	bc
                                   2582 ;src\/Graphics.h:50: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000966 21 02 18         [10] 2583 	ld	hl, #0x1802
      000969 09               [11] 2584 	add	hl, bc
      00096A C5               [11] 2585 	push	bc
      00096B 3E 1A            [ 7] 2586 	ld	a, #0x1a
      00096D F5               [11] 2587 	push	af
      00096E 33               [ 6] 2588 	inc	sp
      00096F E5               [11] 2589 	push	hl
      000970 CDr00r00         [17] 2590 	call	_WRTVRM
      000973 F1               [10] 2591 	pop	af
      000974 33               [ 6] 2592 	inc	sp
      000975 C1               [10] 2593 	pop	bc
                                   2594 ;src\/Graphics.h:51: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000976 21 20 18         [10] 2595 	ld	hl, #0x1820
      000979 09               [11] 2596 	add	hl, bc
      00097A C5               [11] 2597 	push	bc
      00097B 3E 1B            [ 7] 2598 	ld	a, #0x1b
      00097D F5               [11] 2599 	push	af
      00097E 33               [ 6] 2600 	inc	sp
      00097F E5               [11] 2601 	push	hl
      000980 CDr00r00         [17] 2602 	call	_WRTVRM
      000983 F1               [10] 2603 	pop	af
      000984 33               [ 6] 2604 	inc	sp
      000985 C1               [10] 2605 	pop	bc
                                   2606 ;src\/Graphics.h:52: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000986 21 21 18         [10] 2607 	ld	hl, #0x1821
      000989 09               [11] 2608 	add	hl, bc
      00098A C5               [11] 2609 	push	bc
      00098B 3E 1C            [ 7] 2610 	ld	a, #0x1c
      00098D F5               [11] 2611 	push	af
      00098E 33               [ 6] 2612 	inc	sp
      00098F E5               [11] 2613 	push	hl
      000990 CDr00r00         [17] 2614 	call	_WRTVRM
      000993 F1               [10] 2615 	pop	af
      000994 33               [ 6] 2616 	inc	sp
      000995 C1               [10] 2617 	pop	bc
                                   2618 ;src\/Graphics.h:53: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000996 21 22 18         [10] 2619 	ld	hl, #0x1822
      000999 09               [11] 2620 	add	hl, bc
      00099A C5               [11] 2621 	push	bc
      00099B 3E 1D            [ 7] 2622 	ld	a, #0x1d
      00099D F5               [11] 2623 	push	af
      00099E 33               [ 6] 2624 	inc	sp
      00099F E5               [11] 2625 	push	hl
      0009A0 CDr00r00         [17] 2626 	call	_WRTVRM
      0009A3 F1               [10] 2627 	pop	af
      0009A4 33               [ 6] 2628 	inc	sp
      0009A5 C1               [10] 2629 	pop	bc
                                   2630 ;src\/Graphics.h:55: for(byte i=0; i<20; i++) {
      0009A6 21 40 18         [10] 2631 	ld	hl, #0x1840
      0009A9 09               [11] 2632 	add	hl, bc
      0009AA E3               [19] 2633 	ex	(sp), hl
      0009AB 21 41 18         [10] 2634 	ld	hl, #0x1841
      0009AE 09               [11] 2635 	add	hl, bc
      0009AF DD 75 FB         [19] 2636 	ld	-5 (ix), l
      0009B2 DD 74 FC         [19] 2637 	ld	-4 (ix), h
      0009B5 21 42 18         [10] 2638 	ld	hl, #0x1842
      0009B8 09               [11] 2639 	add	hl, bc
      0009B9 DD 75 FD         [19] 2640 	ld	-3 (ix), l
      0009BC DD 74 FE         [19] 2641 	ld	-2 (ix), h
      0009BF DD 36 FF 00      [19] 2642 	ld	-1 (ix), #0
      0009C3                       2643 00103$:
      0009C3 DD 7E FF         [19] 2644 	ld	a, -1 (ix)
      0009C6 D6 14            [ 7] 2645 	sub	a, #0x14
      0009C8 30 4A            [12] 2646 	jr	NC, 00101$
                                   2647 ;src\/Graphics.h:56: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      0009CA DD 5E FF         [19] 2648 	ld	e, -1 (ix)
      0009CD 16 00            [ 7] 2649 	ld	d, #0x00
      0009CF EB               [ 4] 2650 	ex	de, hl
      0009D0 29               [11] 2651 	add	hl, hl
      0009D1 29               [11] 2652 	add	hl, hl
      0009D2 29               [11] 2653 	add	hl, hl
      0009D3 29               [11] 2654 	add	hl, hl
      0009D4 29               [11] 2655 	add	hl, hl
      0009D5 EB               [ 4] 2656 	ex	de, hl
      0009D6 E1               [10] 2657 	pop	hl
      0009D7 E5               [11] 2658 	push	hl
      0009D8 19               [11] 2659 	add	hl, de
      0009D9 C5               [11] 2660 	push	bc
      0009DA D5               [11] 2661 	push	de
      0009DB 3E 1E            [ 7] 2662 	ld	a, #0x1e
      0009DD F5               [11] 2663 	push	af
      0009DE 33               [ 6] 2664 	inc	sp
      0009DF E5               [11] 2665 	push	hl
      0009E0 CDr00r00         [17] 2666 	call	_WRTVRM
      0009E3 F1               [10] 2667 	pop	af
      0009E4 33               [ 6] 2668 	inc	sp
      0009E5 D1               [10] 2669 	pop	de
      0009E6 C1               [10] 2670 	pop	bc
                                   2671 ;src\/Graphics.h:57: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      0009E7 DD 6E FB         [19] 2672 	ld	l, -5 (ix)
      0009EA DD 66 FC         [19] 2673 	ld	h, -4 (ix)
      0009ED 19               [11] 2674 	add	hl, de
      0009EE C5               [11] 2675 	push	bc
      0009EF D5               [11] 2676 	push	de
      0009F0 3E 1F            [ 7] 2677 	ld	a, #0x1f
      0009F2 F5               [11] 2678 	push	af
      0009F3 33               [ 6] 2679 	inc	sp
      0009F4 E5               [11] 2680 	push	hl
      0009F5 CDr00r00         [17] 2681 	call	_WRTVRM
      0009F8 F1               [10] 2682 	pop	af
      0009F9 33               [ 6] 2683 	inc	sp
      0009FA D1               [10] 2684 	pop	de
      0009FB C1               [10] 2685 	pop	bc
                                   2686 ;src\/Graphics.h:58: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      0009FC DD 6E FD         [19] 2687 	ld	l, -3 (ix)
      0009FF DD 66 FE         [19] 2688 	ld	h, -2 (ix)
      000A02 19               [11] 2689 	add	hl, de
      000A03 C5               [11] 2690 	push	bc
      000A04 3E 20            [ 7] 2691 	ld	a, #0x20
      000A06 F5               [11] 2692 	push	af
      000A07 33               [ 6] 2693 	inc	sp
      000A08 E5               [11] 2694 	push	hl
      000A09 CDr00r00         [17] 2695 	call	_WRTVRM
      000A0C F1               [10] 2696 	pop	af
      000A0D 33               [ 6] 2697 	inc	sp
      000A0E C1               [10] 2698 	pop	bc
                                   2699 ;src\/Graphics.h:55: for(byte i=0; i<20; i++) {
      000A0F DD 34 FF         [23] 2700 	inc	-1 (ix)
      000A12 18 AF            [12] 2701 	jr	00103$
      000A14                       2702 00101$:
                                   2703 ;src\/Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000A14 21 00 19         [10] 2704 	ld	hl, #0x1900
      000A17 09               [11] 2705 	add	hl, bc
      000A18 C5               [11] 2706 	push	bc
      000A19 3E 21            [ 7] 2707 	ld	a, #0x21
      000A1B F5               [11] 2708 	push	af
      000A1C 33               [ 6] 2709 	inc	sp
      000A1D E5               [11] 2710 	push	hl
      000A1E CDr00r00         [17] 2711 	call	_WRTVRM
      000A21 F1               [10] 2712 	pop	af
      000A22 33               [ 6] 2713 	inc	sp
      000A23 C1               [10] 2714 	pop	bc
                                   2715 ;src\/Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000A24 21 01 19         [10] 2716 	ld	hl, #0x1901
      000A27 09               [11] 2717 	add	hl, bc
      000A28 C5               [11] 2718 	push	bc
      000A29 3E 22            [ 7] 2719 	ld	a, #0x22
      000A2B F5               [11] 2720 	push	af
      000A2C 33               [ 6] 2721 	inc	sp
      000A2D E5               [11] 2722 	push	hl
      000A2E CDr00r00         [17] 2723 	call	_WRTVRM
      000A31 F1               [10] 2724 	pop	af
      000A32 33               [ 6] 2725 	inc	sp
      000A33 C1               [10] 2726 	pop	bc
                                   2727 ;src\/Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000A34 21 02 19         [10] 2728 	ld	hl, #0x1902
      000A37 09               [11] 2729 	add	hl, bc
      000A38 C5               [11] 2730 	push	bc
      000A39 3E 23            [ 7] 2731 	ld	a, #0x23
      000A3B F5               [11] 2732 	push	af
      000A3C 33               [ 6] 2733 	inc	sp
      000A3D E5               [11] 2734 	push	hl
      000A3E CDr00r00         [17] 2735 	call	_WRTVRM
      000A41 F1               [10] 2736 	pop	af
      000A42 33               [ 6] 2737 	inc	sp
      000A43 C1               [10] 2738 	pop	bc
                                   2739 ;src\/Graphics.h:65: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000A44 21 00 1A         [10] 2740 	ld	hl, #0x1a00
      000A47 09               [11] 2741 	add	hl, bc
      000A48 C5               [11] 2742 	push	bc
      000A49 3E 21            [ 7] 2743 	ld	a, #0x21
      000A4B F5               [11] 2744 	push	af
      000A4C 33               [ 6] 2745 	inc	sp
      000A4D E5               [11] 2746 	push	hl
      000A4E CDr00r00         [17] 2747 	call	_WRTVRM
      000A51 F1               [10] 2748 	pop	af
      000A52 33               [ 6] 2749 	inc	sp
      000A53 C1               [10] 2750 	pop	bc
                                   2751 ;src\/Graphics.h:66: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000A54 21 01 1A         [10] 2752 	ld	hl, #0x1a01
      000A57 09               [11] 2753 	add	hl, bc
      000A58 C5               [11] 2754 	push	bc
      000A59 3E 22            [ 7] 2755 	ld	a, #0x22
      000A5B F5               [11] 2756 	push	af
      000A5C 33               [ 6] 2757 	inc	sp
      000A5D E5               [11] 2758 	push	hl
      000A5E CDr00r00         [17] 2759 	call	_WRTVRM
      000A61 F1               [10] 2760 	pop	af
      000A62 33               [ 6] 2761 	inc	sp
      000A63 C1               [10] 2762 	pop	bc
                                   2763 ;src\/Graphics.h:67: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      000A64 21 02 1A         [10] 2764 	ld	hl, #0x1a02
      000A67 09               [11] 2765 	add	hl, bc
      000A68 C5               [11] 2766 	push	bc
      000A69 3E 23            [ 7] 2767 	ld	a, #0x23
      000A6B F5               [11] 2768 	push	af
      000A6C 33               [ 6] 2769 	inc	sp
      000A6D E5               [11] 2770 	push	hl
      000A6E CDr00r00         [17] 2771 	call	_WRTVRM
      000A71 F1               [10] 2772 	pop	af
      000A72 33               [ 6] 2773 	inc	sp
      000A73 C1               [10] 2774 	pop	bc
                                   2775 ;src\/Graphics.h:69: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000A74 21 C0 1A         [10] 2776 	ld	hl, #0x1ac0
      000A77 09               [11] 2777 	add	hl, bc
      000A78 C5               [11] 2778 	push	bc
      000A79 3E 24            [ 7] 2779 	ld	a, #0x24
      000A7B F5               [11] 2780 	push	af
      000A7C 33               [ 6] 2781 	inc	sp
      000A7D E5               [11] 2782 	push	hl
      000A7E CDr00r00         [17] 2783 	call	_WRTVRM
      000A81 F1               [10] 2784 	pop	af
      000A82 33               [ 6] 2785 	inc	sp
      000A83 C1               [10] 2786 	pop	bc
                                   2787 ;src\/Graphics.h:70: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000A84 21 C1 1A         [10] 2788 	ld	hl, #0x1ac1
      000A87 09               [11] 2789 	add	hl, bc
      000A88 C5               [11] 2790 	push	bc
      000A89 3E 25            [ 7] 2791 	ld	a, #0x25
      000A8B F5               [11] 2792 	push	af
      000A8C 33               [ 6] 2793 	inc	sp
      000A8D E5               [11] 2794 	push	hl
      000A8E CDr00r00         [17] 2795 	call	_WRTVRM
      000A91 F1               [10] 2796 	pop	af
      000A92 33               [ 6] 2797 	inc	sp
      000A93 C1               [10] 2798 	pop	bc
                                   2799 ;src\/Graphics.h:71: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000A94 21 C2 1A         [10] 2800 	ld	hl, #0x1ac2
      000A97 09               [11] 2801 	add	hl, bc
      000A98 C5               [11] 2802 	push	bc
      000A99 3E 26            [ 7] 2803 	ld	a, #0x26
      000A9B F5               [11] 2804 	push	af
      000A9C 33               [ 6] 2805 	inc	sp
      000A9D E5               [11] 2806 	push	hl
      000A9E CDr00r00         [17] 2807 	call	_WRTVRM
      000AA1 F1               [10] 2808 	pop	af
      000AA2 33               [ 6] 2809 	inc	sp
      000AA3 C1               [10] 2810 	pop	bc
                                   2811 ;src\/Graphics.h:72: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000AA4 21 E0 1A         [10] 2812 	ld	hl, #0x1ae0
      000AA7 09               [11] 2813 	add	hl, bc
      000AA8 C5               [11] 2814 	push	bc
      000AA9 3E 27            [ 7] 2815 	ld	a, #0x27
      000AAB F5               [11] 2816 	push	af
      000AAC 33               [ 6] 2817 	inc	sp
      000AAD E5               [11] 2818 	push	hl
      000AAE CDr00r00         [17] 2819 	call	_WRTVRM
      000AB1 F1               [10] 2820 	pop	af
      000AB2 33               [ 6] 2821 	inc	sp
      000AB3 C1               [10] 2822 	pop	bc
                                   2823 ;src\/Graphics.h:73: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000AB4 21 E1 1A         [10] 2824 	ld	hl, #0x1ae1
      000AB7 09               [11] 2825 	add	hl, bc
      000AB8 C5               [11] 2826 	push	bc
      000AB9 3E 28            [ 7] 2827 	ld	a, #0x28
      000ABB F5               [11] 2828 	push	af
      000ABC 33               [ 6] 2829 	inc	sp
      000ABD E5               [11] 2830 	push	hl
      000ABE CDr00r00         [17] 2831 	call	_WRTVRM
      000AC1 F1               [10] 2832 	pop	af
      000AC2 33               [ 6] 2833 	inc	sp
      000AC3 C1               [10] 2834 	pop	bc
                                   2835 ;src\/Graphics.h:74: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000AC4 21 E2 1A         [10] 2836 	ld	hl, #0x1ae2
      000AC7 09               [11] 2837 	add	hl, bc
      000AC8 3E 29            [ 7] 2838 	ld	a, #0x29
      000ACA F5               [11] 2839 	push	af
      000ACB 33               [ 6] 2840 	inc	sp
      000ACC E5               [11] 2841 	push	hl
      000ACD CDr00r00         [17] 2842 	call	_WRTVRM
                                   2843 ;src\/Graphics.h:75: }
      000AD0 DD F9            [10] 2844 	ld	sp,ix
      000AD2 DD E1            [14] 2845 	pop	ix
      000AD4 C9               [10] 2846 	ret
                                   2847 ;src\/Graphics.h:77: void DrawScore() {
                                   2848 ;	---------------------------------
                                   2849 ; Function DrawScore
                                   2850 ; ---------------------------------
      000AD5                       2851 _DrawScore::
      000AD5 DD E5            [15] 2852 	push	ix
      000AD7 DD 21 00 00      [14] 2853 	ld	ix,#0
      000ADB DD 39            [15] 2854 	add	ix,sp
      000ADD F5               [11] 2855 	push	af
                                   2856 ;src\/Graphics.h:78: byte bgCounter = 0, bgColor;
      000ADE DD 36 FE 00      [19] 2857 	ld	-2 (ix), #0
                                   2858 ;src\/Graphics.h:82: if(newLevel) {
      000AE2 3Ar07r00         [13] 2859 	ld	a,(#_newLevel + 0)
      000AE5 B7               [ 4] 2860 	or	a, a
      000AE6 CArD2r0B         [10] 2861 	jp	Z, 00119$
                                   2862 ;src\/Graphics.h:83: for(byte i=0; i < 60; i++) {
      000AE9 DD 36 FF 00      [19] 2863 	ld	-1 (ix), #0
      000AED                       2864 00121$:
      000AED DD 7E FF         [19] 2865 	ld	a, -1 (ix)
      000AF0 D6 3C            [ 7] 2866 	sub	a, #0x3c
      000AF2 D2rD2r0B         [10] 2867 	jp	NC, 00119$
                                   2868 ;src\/Graphics.h:84: lastJiffy = JIFFY;
      000AF5 ED 4B 9E FC      [20] 2869 	ld	bc, (_JIFFY)
                                   2870 ;src\/Graphics.h:85: while(lastJiffy == JIFFY) { }
      000AF9                       2871 00101$:
      000AF9 2A 9E FC         [16] 2872 	ld	hl, (_JIFFY)
      000AFC BF               [ 4] 2873 	cp	a, a
      000AFD ED 42            [15] 2874 	sbc	hl, bc
      000AFF 28 F8            [12] 2875 	jr	Z, 00101$
                                   2876 ;src\/Graphics.h:88: if(JIFFY & 0b00000110) {
      000B01 2A 9E FC         [16] 2877 	ld	hl, (_JIFFY)
      000B04 7D               [ 4] 2878 	ld	a, l
      000B05 E6 06            [ 7] 2879 	and	a, #0x06
      000B07 CArB2r0B         [10] 2880 	jp	Z,00115$
                                   2881 ;src\/Graphics.h:89: DrawString(" LEVEL", 26, 4);
      000B0A 11 1A 04         [10] 2882 	ld	de, #0x041a
      000B0D D5               [11] 2883 	push	de
      000B0E 21r47r0C         [10] 2884 	ld	hl, #___str_1
      000B11 E5               [11] 2885 	push	hl
      000B12 CDr47r08         [17] 2886 	call	_DrawString
      000B15 F1               [10] 2887 	pop	af
      000B16 F1               [10] 2888 	pop	af
                                   2889 ;src\/Graphics.h:90: DrawNumber(level, 26, 5);
      000B17 3Ar06r00         [13] 2890 	ld	a, (#_level + 0)
      000B1A 4F               [ 4] 2891 	ld	c, a
      000B1B 06 00            [ 7] 2892 	ld	b, #0x00
      000B1D 11 1A 05         [10] 2893 	ld	de, #0x051a
      000B20 D5               [11] 2894 	push	de
      000B21 C5               [11] 2895 	push	bc
      000B22 CDr79r08         [17] 2896 	call	_DrawNumber
      000B25 F1               [10] 2897 	pop	af
      000B26 F1               [10] 2898 	pop	af
                                   2899 ;src\/Graphics.h:96: switch(bgCounter++) {
      000B27 DD 4E FE         [19] 2900 	ld	c, -2 (ix)
      000B2A DD 34 FE         [23] 2901 	inc	-2 (ix)
      000B2D 3E 07            [ 7] 2902 	ld	a, #0x07
      000B2F 91               [ 4] 2903 	sub	a, c
      000B30 38 45            [12] 2904 	jr	C, 00112$
      000B32 06 00            [ 7] 2905 	ld	b, #0x00
      000B34 21r3Br0B         [10] 2906 	ld	hl, #00163$
      000B37 09               [11] 2907 	add	hl, bc
      000B38 09               [11] 2908 	add	hl, bc
      000B39 09               [11] 2909 	add	hl, bc
      000B3A E9               [ 4] 2910 	jp	(hl)
      000B3B                       2911 00163$:
      000B3B C3r53r0B         [10] 2912 	jp	00104$
      000B3E C3r57r0B         [10] 2913 	jp	00105$
      000B41 C3r5Br0B         [10] 2914 	jp	00106$
      000B44 C3r5Fr0B         [10] 2915 	jp	00107$
      000B47 C3r63r0B         [10] 2916 	jp	00108$
      000B4A C3r67r0B         [10] 2917 	jp	00109$
      000B4D C3r6Br0B         [10] 2918 	jp	00110$
      000B50 C3r6Fr0B         [10] 2919 	jp	00111$
                                   2920 ;src\/Graphics.h:97: case 0:
      000B53                       2921 00104$:
                                   2922 ;src\/Graphics.h:98: bgColor = 0x14;
      000B53 0E 14            [ 7] 2923 	ld	c, #0x14
                                   2924 ;src\/Graphics.h:99: break;
      000B55 18 22            [12] 2925 	jr	00113$
                                   2926 ;src\/Graphics.h:100: case 1:
      000B57                       2927 00105$:
                                   2928 ;src\/Graphics.h:101: bgColor = 0x15;
      000B57 0E 15            [ 7] 2929 	ld	c, #0x15
                                   2930 ;src\/Graphics.h:102: break;
      000B59 18 1E            [12] 2931 	jr	00113$
                                   2932 ;src\/Graphics.h:103: case 2:
      000B5B                       2933 00106$:
                                   2934 ;src\/Graphics.h:104: bgColor = 0x17;
      000B5B 0E 17            [ 7] 2935 	ld	c, #0x17
                                   2936 ;src\/Graphics.h:105: break;
      000B5D 18 1A            [12] 2937 	jr	00113$
                                   2938 ;src\/Graphics.h:106: case 3:
      000B5F                       2939 00107$:
                                   2940 ;src\/Graphics.h:107: bgColor = 0x1e;
      000B5F 0E 1E            [ 7] 2941 	ld	c, #0x1e
                                   2942 ;src\/Graphics.h:108: break;
      000B61 18 16            [12] 2943 	jr	00113$
                                   2944 ;src\/Graphics.h:109: case 4:
      000B63                       2945 00108$:
                                   2946 ;src\/Graphics.h:110: bgColor = 0x1f;
      000B63 0E 1F            [ 7] 2947 	ld	c, #0x1f
                                   2948 ;src\/Graphics.h:111: break;
      000B65 18 12            [12] 2949 	jr	00113$
                                   2950 ;src\/Graphics.h:112: case 5:
      000B67                       2951 00109$:
                                   2952 ;src\/Graphics.h:113: bgColor = 0x1e;
      000B67 0E 1E            [ 7] 2953 	ld	c, #0x1e
                                   2954 ;src\/Graphics.h:114: break;
      000B69 18 0E            [12] 2955 	jr	00113$
                                   2956 ;src\/Graphics.h:115: case 6:
      000B6B                       2957 00110$:
                                   2958 ;src\/Graphics.h:116: bgColor = 0x17;
      000B6B 0E 17            [ 7] 2959 	ld	c, #0x17
                                   2960 ;src\/Graphics.h:117: break;
      000B6D 18 0A            [12] 2961 	jr	00113$
                                   2962 ;src\/Graphics.h:118: case 7:
      000B6F                       2963 00111$:
                                   2964 ;src\/Graphics.h:119: bgColor = 0x15;
      000B6F 0E 15            [ 7] 2965 	ld	c, #0x15
                                   2966 ;src\/Graphics.h:120: bgCounter = 0;
      000B71 DD 36 FE 00      [19] 2967 	ld	-2 (ix), #0
                                   2968 ;src\/Graphics.h:121: break;
      000B75 18 02            [12] 2969 	jr	00113$
                                   2970 ;src\/Graphics.h:122: default:
      000B77                       2971 00112$:
                                   2972 ;src\/Graphics.h:123: bgColor = 0x11;
      000B77 0E 11            [ 7] 2973 	ld	c, #0x11
                                   2974 ;src\/Graphics.h:125: }
      000B79                       2975 00113$:
                                   2976 ;src\/Graphics.h:126: FILVRM(CLRTBL, 8 * 4, bgColor);
      000B79 C5               [11] 2977 	push	bc
      000B7A 79               [ 4] 2978 	ld	a, c
      000B7B F5               [11] 2979 	push	af
      000B7C 33               [ 6] 2980 	inc	sp
      000B7D 21 20 00         [10] 2981 	ld	hl, #0x0020
      000B80 E5               [11] 2982 	push	hl
      000B81 21 00 20         [10] 2983 	ld	hl, #0x2000
      000B84 E5               [11] 2984 	push	hl
      000B85 CDr00r00         [17] 2985 	call	_FILVRM
      000B88 F1               [10] 2986 	pop	af
      000B89 F1               [10] 2987 	pop	af
      000B8A 33               [ 6] 2988 	inc	sp
      000B8B C1               [10] 2989 	pop	bc
                                   2990 ;src\/Graphics.h:127: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      000B8C C5               [11] 2991 	push	bc
      000B8D 79               [ 4] 2992 	ld	a, c
      000B8E F5               [11] 2993 	push	af
      000B8F 33               [ 6] 2994 	inc	sp
      000B90 21 20 00         [10] 2995 	ld	hl, #0x0020
      000B93 E5               [11] 2996 	push	hl
      000B94 21 00 28         [10] 2997 	ld	hl, #0x2800
      000B97 E5               [11] 2998 	push	hl
      000B98 CDr00r00         [17] 2999 	call	_FILVRM
      000B9B F1               [10] 3000 	pop	af
      000B9C F1               [10] 3001 	pop	af
      000B9D 33               [ 6] 3002 	inc	sp
      000B9E C1               [10] 3003 	pop	bc
                                   3004 ;src\/Graphics.h:128: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      000B9F 79               [ 4] 3005 	ld	a, c
      000BA0 F5               [11] 3006 	push	af
      000BA1 33               [ 6] 3007 	inc	sp
      000BA2 21 20 00         [10] 3008 	ld	hl, #0x0020
      000BA5 E5               [11] 3009 	push	hl
      000BA6 21 00 30         [10] 3010 	ld	hl, #0x3000
      000BA9 E5               [11] 3011 	push	hl
      000BAA CDr00r00         [17] 3012 	call	_FILVRM
      000BAD F1               [10] 3013 	pop	af
      000BAE F1               [10] 3014 	pop	af
      000BAF 33               [ 6] 3015 	inc	sp
      000BB0 18 1A            [12] 3016 	jr	00122$
      000BB2                       3017 00115$:
                                   3018 ;src\/Graphics.h:133: DrawString("      ", 26, 4);
      000BB2 11 1A 04         [10] 3019 	ld	de, #0x041a
      000BB5 D5               [11] 3020 	push	de
      000BB6 21r4Er0C         [10] 3021 	ld	hl, #___str_2
      000BB9 E5               [11] 3022 	push	hl
      000BBA CDr47r08         [17] 3023 	call	_DrawString
      000BBD F1               [10] 3024 	pop	af
      000BBE F1               [10] 3025 	pop	af
                                   3026 ;src\/Graphics.h:134: DrawString("      ", 26, 5);
      000BBF 11 1A 05         [10] 3027 	ld	de, #0x051a
      000BC2 D5               [11] 3028 	push	de
      000BC3 21r4Er0C         [10] 3029 	ld	hl, #___str_2
      000BC6 E5               [11] 3030 	push	hl
      000BC7 CDr47r08         [17] 3031 	call	_DrawString
      000BCA F1               [10] 3032 	pop	af
      000BCB F1               [10] 3033 	pop	af
      000BCC                       3034 00122$:
                                   3035 ;src\/Graphics.h:83: for(byte i=0; i < 60; i++) {
      000BCC DD 34 FF         [23] 3036 	inc	-1 (ix)
      000BCF C3rEDr0A         [10] 3037 	jp	00121$
      000BD2                       3038 00119$:
                                   3039 ;src\/Graphics.h:140: newLevel = FALSE;
      000BD2 21r07r00         [10] 3040 	ld	hl, #_newLevel
      000BD5 36 00            [10] 3041 	ld	(hl), #0x00
                                   3042 ;src\/Graphics.h:143: FILVRM(CLRTBL, 8 * 4, 0x14);
      000BD7 3E 14            [ 7] 3043 	ld	a, #0x14
      000BD9 F5               [11] 3044 	push	af
      000BDA 33               [ 6] 3045 	inc	sp
      000BDB 21 20 00         [10] 3046 	ld	hl, #0x0020
      000BDE E5               [11] 3047 	push	hl
      000BDF 21 00 20         [10] 3048 	ld	hl, #0x2000
      000BE2 E5               [11] 3049 	push	hl
      000BE3 CDr00r00         [17] 3050 	call	_FILVRM
      000BE6 F1               [10] 3051 	pop	af
      000BE7 F1               [10] 3052 	pop	af
      000BE8 33               [ 6] 3053 	inc	sp
                                   3054 ;src\/Graphics.h:144: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      000BE9 3E 14            [ 7] 3055 	ld	a, #0x14
      000BEB F5               [11] 3056 	push	af
      000BEC 33               [ 6] 3057 	inc	sp
      000BED 21 20 00         [10] 3058 	ld	hl, #0x0020
      000BF0 E5               [11] 3059 	push	hl
      000BF1 21 00 28         [10] 3060 	ld	hl, #0x2800
      000BF4 E5               [11] 3061 	push	hl
      000BF5 CDr00r00         [17] 3062 	call	_FILVRM
      000BF8 F1               [10] 3063 	pop	af
      000BF9 F1               [10] 3064 	pop	af
      000BFA 33               [ 6] 3065 	inc	sp
                                   3066 ;src\/Graphics.h:145: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      000BFB 3E 14            [ 7] 3067 	ld	a, #0x14
      000BFD F5               [11] 3068 	push	af
      000BFE 33               [ 6] 3069 	inc	sp
      000BFF 21 20 00         [10] 3070 	ld	hl, #0x0020
      000C02 E5               [11] 3071 	push	hl
      000C03 21 00 30         [10] 3072 	ld	hl, #0x3000
      000C06 E5               [11] 3073 	push	hl
      000C07 CDr00r00         [17] 3074 	call	_FILVRM
      000C0A F1               [10] 3075 	pop	af
      000C0B F1               [10] 3076 	pop	af
      000C0C 33               [ 6] 3077 	inc	sp
                                   3078 ;src\/Graphics.h:147: DrawString(" LEVEL", 26, 4);
      000C0D 11 1A 04         [10] 3079 	ld	de, #0x041a
      000C10 D5               [11] 3080 	push	de
      000C11 21r47r0C         [10] 3081 	ld	hl, #___str_1
      000C14 E5               [11] 3082 	push	hl
      000C15 CDr47r08         [17] 3083 	call	_DrawString
      000C18 F1               [10] 3084 	pop	af
      000C19 F1               [10] 3085 	pop	af
                                   3086 ;src\/Graphics.h:148: DrawString("BLOCKS", 26, 9);
      000C1A 11 1A 09         [10] 3087 	ld	de, #0x091a
      000C1D D5               [11] 3088 	push	de
      000C1E 21r55r0C         [10] 3089 	ld	hl, #___str_3
      000C21 E5               [11] 3090 	push	hl
      000C22 CDr47r08         [17] 3091 	call	_DrawString
      000C25 F1               [10] 3092 	pop	af
      000C26 F1               [10] 3093 	pop	af
                                   3094 ;src\/Graphics.h:150: DrawNumber(blocksRemoved, 26, 10);
      000C27 11 1A 0A         [10] 3095 	ld	de, #0x0a1a
      000C2A D5               [11] 3096 	push	de
      000C2B 2Ar04r00         [16] 3097 	ld	hl, (_blocksRemoved)
      000C2E E5               [11] 3098 	push	hl
      000C2F CDr79r08         [17] 3099 	call	_DrawNumber
      000C32 F1               [10] 3100 	pop	af
      000C33 F1               [10] 3101 	pop	af
                                   3102 ;src\/Graphics.h:151: DrawNumber(level, 26, 5);
      000C34 3Ar06r00         [13] 3103 	ld	a, (#_level + 0)
      000C37 4F               [ 4] 3104 	ld	c, a
      000C38 06 00            [ 7] 3105 	ld	b, #0x00
      000C3A 11 1A 05         [10] 3106 	ld	de, #0x051a
      000C3D D5               [11] 3107 	push	de
      000C3E C5               [11] 3108 	push	bc
      000C3F CDr79r08         [17] 3109 	call	_DrawNumber
                                   3110 ;src\/Graphics.h:153: }
      000C42 DD F9            [10] 3111 	ld	sp,ix
      000C44 DD E1            [14] 3112 	pop	ix
      000C46 C9               [10] 3113 	ret
      000C47                       3114 ___str_1:
      000C47 20 4C 45 56 45 4C     3115 	.ascii " LEVEL"
      000C4D 00                    3116 	.db 0x00
      000C4E                       3117 ___str_2:
      000C4E 20 20 20 20 20 20     3118 	.ascii "      "
      000C54 00                    3119 	.db 0x00
      000C55                       3120 ___str_3:
      000C55 42 4C 4F 43 4B 53     3121 	.ascii "BLOCKS"
      000C5B 00                    3122 	.db 0x00
                                   3123 ;src\/Graphics.h:155: void DrawBackground() {
                                   3124 ;	---------------------------------
                                   3125 ; Function DrawBackground
                                   3126 ; ---------------------------------
      000C5C                       3127 _DrawBackground::
                                   3128 ;src\/Graphics.h:157: for(int i = 0; i < 256 * 3; i++) {
      000C5C 01 00 00         [10] 3129 	ld	bc, #0x0000
      000C5F                       3130 00103$:
      000C5F 78               [ 4] 3131 	ld	a, b
      000C60 EE 80            [ 7] 3132 	xor	a, #0x80
      000C62 D6 83            [ 7] 3133 	sub	a, #0x83
      000C64 30 12            [12] 3134 	jr	NC, 00101$
                                   3135 ;src\/Graphics.h:158: WRTVRM(NAMTBL + i, 0); // test
      000C66 21 00 18         [10] 3136 	ld	hl, #0x1800
      000C69 09               [11] 3137 	add	hl, bc
      000C6A C5               [11] 3138 	push	bc
      000C6B AF               [ 4] 3139 	xor	a, a
      000C6C F5               [11] 3140 	push	af
      000C6D 33               [ 6] 3141 	inc	sp
      000C6E E5               [11] 3142 	push	hl
      000C6F CDr00r00         [17] 3143 	call	_WRTVRM
      000C72 F1               [10] 3144 	pop	af
      000C73 33               [ 6] 3145 	inc	sp
      000C74 C1               [10] 3146 	pop	bc
                                   3147 ;src\/Graphics.h:157: for(int i = 0; i < 256 * 3; i++) {
      000C75 03               [ 6] 3148 	inc	bc
      000C76 18 E7            [12] 3149 	jr	00103$
      000C78                       3150 00101$:
                                   3151 ;src\/Graphics.h:161: DrawColumn(7);
      000C78 3E 07            [ 7] 3152 	ld	a, #0x07
      000C7A F5               [11] 3153 	push	af
      000C7B 33               [ 6] 3154 	inc	sp
      000C7C CDr34r09         [17] 3155 	call	_DrawColumn
      000C7F 33               [ 6] 3156 	inc	sp
                                   3157 ;src\/Graphics.h:162: DrawColumn(22);
      000C80 3E 16            [ 7] 3158 	ld	a, #0x16
      000C82 F5               [11] 3159 	push	af
      000C83 33               [ 6] 3160 	inc	sp
      000C84 CDr34r09         [17] 3161 	call	_DrawColumn
      000C87 33               [ 6] 3162 	inc	sp
                                   3163 ;src\/Graphics.h:164: DrawScore();
                                   3164 ;src\/Graphics.h:200: }
      000C88 C3rD5r0A         [10] 3165 	jp	_DrawScore
                                   3166 ;src\/Graphics.h:202: void DrawArrow(byte x, byte y) {
                                   3167 ;	---------------------------------
                                   3168 ; Function DrawArrow
                                   3169 ; ---------------------------------
      000C8B                       3170 _DrawArrow::
      000C8B DD E5            [15] 3171 	push	ix
      000C8D DD 21 00 00      [14] 3172 	ld	ix,#0
      000C91 DD 39            [15] 3173 	add	ix,sp
      000C93 21 F8 FF         [10] 3174 	ld	hl, #-8
      000C96 39               [11] 3175 	add	hl, sp
      000C97 F9               [ 6] 3176 	ld	sp, hl
                                   3177 ;src\/Graphics.h:203: const byte colors[] = {
      000C98 21 00 00         [10] 3178 	ld	hl, #0
      000C9B 39               [11] 3179 	add	hl, sp
      000C9C EB               [ 4] 3180 	ex	de, hl
      000C9D 3E 0F            [ 7] 3181 	ld	a, #0x0f
      000C9F 12               [ 7] 3182 	ld	(de), a
      000CA0 6B               [ 4] 3183 	ld	l, e
      000CA1 62               [ 4] 3184 	ld	h, d
      000CA2 23               [ 6] 3185 	inc	hl
      000CA3 36 0E            [10] 3186 	ld	(hl), #0x0e
      000CA5 6B               [ 4] 3187 	ld	l, e
      000CA6 62               [ 4] 3188 	ld	h, d
      000CA7 23               [ 6] 3189 	inc	hl
      000CA8 23               [ 6] 3190 	inc	hl
      000CA9 36 05            [10] 3191 	ld	(hl), #0x05
      000CAB 6B               [ 4] 3192 	ld	l, e
      000CAC 62               [ 4] 3193 	ld	h, d
      000CAD 23               [ 6] 3194 	inc	hl
      000CAE 23               [ 6] 3195 	inc	hl
      000CAF 23               [ 6] 3196 	inc	hl
      000CB0 36 04            [10] 3197 	ld	(hl), #0x04
      000CB2 21 04 00         [10] 3198 	ld	hl, #0x0004
      000CB5 19               [11] 3199 	add	hl, de
      000CB6 36 04            [10] 3200 	ld	(hl), #0x04
      000CB8 21 05 00         [10] 3201 	ld	hl, #0x0005
      000CBB 19               [11] 3202 	add	hl, de
      000CBC 36 05            [10] 3203 	ld	(hl), #0x05
      000CBE 21 06 00         [10] 3204 	ld	hl, #0x0006
      000CC1 19               [11] 3205 	add	hl, de
      000CC2 36 0E            [10] 3206 	ld	(hl), #0x0e
      000CC4 21 07 00         [10] 3207 	ld	hl, #0x0007
      000CC7 19               [11] 3208 	add	hl, de
      000CC8 36 0F            [10] 3209 	ld	(hl), #0x0f
                                   3210 ;src\/Graphics.h:214: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000CCA 2A 9E FC         [16] 3211 	ld	hl, (_JIFFY)
      000CCD 7D               [ 4] 3212 	ld	a, l
      000CCE E6 0E            [ 7] 3213 	and	a, #0x0e
      000CD0 6F               [ 4] 3214 	ld	l, a
      000CD1 26 00            [ 7] 3215 	ld	h, #0x00
      000CD3 CB 3C            [ 8] 3216 	srl	h
      000CD5 CB 1D            [ 8] 3217 	rr	l
                                   3218 ;src\/Graphics.h:221: WRTVRM(SPRATT, 	y - 1);
      000CD7 DD 7E 05         [19] 3219 	ld	a, 5 (ix)
      000CDA 3D               [ 4] 3220 	dec	a
      000CDB E5               [11] 3221 	push	hl
      000CDC D5               [11] 3222 	push	de
      000CDD F5               [11] 3223 	push	af
      000CDE 33               [ 6] 3224 	inc	sp
      000CDF 01 00 1B         [10] 3225 	ld	bc, #0x1b00
      000CE2 C5               [11] 3226 	push	bc
      000CE3 CDr00r00         [17] 3227 	call	_WRTVRM
      000CE6 F1               [10] 3228 	pop	af
      000CE7 33               [ 6] 3229 	inc	sp
      000CE8 DD 7E 04         [19] 3230 	ld	a, 4 (ix)
      000CEB F5               [11] 3231 	push	af
      000CEC 33               [ 6] 3232 	inc	sp
      000CED 01 01 1B         [10] 3233 	ld	bc, #0x1b01
      000CF0 C5               [11] 3234 	push	bc
      000CF1 CDr00r00         [17] 3235 	call	_WRTVRM
      000CF4 F1               [10] 3236 	pop	af
      000CF5 33               [ 6] 3237 	inc	sp
      000CF6 AF               [ 4] 3238 	xor	a, a
      000CF7 F5               [11] 3239 	push	af
      000CF8 33               [ 6] 3240 	inc	sp
      000CF9 01 02 1B         [10] 3241 	ld	bc, #0x1b02
      000CFC C5               [11] 3242 	push	bc
      000CFD CDr00r00         [17] 3243 	call	_WRTVRM
      000D00 F1               [10] 3244 	pop	af
      000D01 33               [ 6] 3245 	inc	sp
      000D02 D1               [10] 3246 	pop	de
      000D03 E1               [10] 3247 	pop	hl
                                   3248 ;src\/Graphics.h:224: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000D04 26 00            [ 7] 3249 	ld	h, #0x00
      000D06 19               [11] 3250 	add	hl, de
      000D07 7E               [ 7] 3251 	ld	a, (hl)
      000D08 F5               [11] 3252 	push	af
      000D09 33               [ 6] 3253 	inc	sp
      000D0A 21 03 1B         [10] 3254 	ld	hl, #0x1b03
      000D0D E5               [11] 3255 	push	hl
      000D0E CDr00r00         [17] 3256 	call	_WRTVRM
                                   3257 ;src\/Graphics.h:233: }
      000D11 DD F9            [10] 3258 	ld	sp,ix
      000D13 DD E1            [14] 3259 	pop	ix
      000D15 C9               [10] 3260 	ret
                                   3261 ;src\/Graphics.h:235: void HideArrow() {
                                   3262 ;	---------------------------------
                                   3263 ; Function HideArrow
                                   3264 ; ---------------------------------
      000D16                       3265 _HideArrow::
                                   3266 ;src\/Graphics.h:236: WRTVRM(SPRATT, 	192);
      000D16 3E C0            [ 7] 3267 	ld	a, #0xc0
      000D18 F5               [11] 3268 	push	af
      000D19 33               [ 6] 3269 	inc	sp
      000D1A 21 00 1B         [10] 3270 	ld	hl, #0x1b00
      000D1D E5               [11] 3271 	push	hl
      000D1E CDr00r00         [17] 3272 	call	_WRTVRM
      000D21 F1               [10] 3273 	pop	af
      000D22 33               [ 6] 3274 	inc	sp
                                   3275 ;src\/Graphics.h:237: }
      000D23 C9               [10] 3276 	ret
                                   3277 ;src\/Graphics.h:239: void DrawHitSprite(byte numberHit, byte x, byte y, bool firstTime) {
                                   3278 ;	---------------------------------
                                   3279 ; Function DrawHitSprite
                                   3280 ; ---------------------------------
      000D24                       3281 _DrawHitSprite::
      000D24 DD E5            [15] 3282 	push	ix
      000D26 DD 21 00 00      [14] 3283 	ld	ix,#0
      000D2A DD 39            [15] 3284 	add	ix,sp
      000D2C 21 F7 FF         [10] 3285 	ld	hl, #-9
      000D2F 39               [11] 3286 	add	hl, sp
      000D30 F9               [ 6] 3287 	ld	sp, hl
                                   3288 ;src\/Graphics.h:241: const byte colors[] = {
      000D31 21 00 00         [10] 3289 	ld	hl, #0
      000D34 39               [11] 3290 	add	hl, sp
      000D35 EB               [ 4] 3291 	ex	de, hl
      000D36 3E 0F            [ 7] 3292 	ld	a, #0x0f
      000D38 12               [ 7] 3293 	ld	(de), a
      000D39 6B               [ 4] 3294 	ld	l, e
      000D3A 62               [ 4] 3295 	ld	h, d
      000D3B 23               [ 6] 3296 	inc	hl
      000D3C 36 0E            [10] 3297 	ld	(hl), #0x0e
      000D3E 6B               [ 4] 3298 	ld	l, e
      000D3F 62               [ 4] 3299 	ld	h, d
      000D40 23               [ 6] 3300 	inc	hl
      000D41 23               [ 6] 3301 	inc	hl
      000D42 36 09            [10] 3302 	ld	(hl), #0x09
      000D44 6B               [ 4] 3303 	ld	l, e
      000D45 62               [ 4] 3304 	ld	h, d
      000D46 23               [ 6] 3305 	inc	hl
      000D47 23               [ 6] 3306 	inc	hl
      000D48 23               [ 6] 3307 	inc	hl
      000D49 36 06            [10] 3308 	ld	(hl), #0x06
      000D4B 21 04 00         [10] 3309 	ld	hl, #0x0004
      000D4E 19               [11] 3310 	add	hl, de
      000D4F 36 06            [10] 3311 	ld	(hl), #0x06
      000D51 21 05 00         [10] 3312 	ld	hl, #0x0005
      000D54 19               [11] 3313 	add	hl, de
      000D55 36 09            [10] 3314 	ld	(hl), #0x09
      000D57 21 06 00         [10] 3315 	ld	hl, #0x0006
      000D5A 19               [11] 3316 	add	hl, de
      000D5B 36 0E            [10] 3317 	ld	(hl), #0x0e
      000D5D 21 07 00         [10] 3318 	ld	hl, #0x0007
      000D60 19               [11] 3319 	add	hl, de
      000D61 36 0F            [10] 3320 	ld	(hl), #0x0f
                                   3321 ;src\/Graphics.h:252: byte colorIndex = (JIFFY & 0b00000111);
      000D63 3A 9E FC         [13] 3322 	ld	a,(#_JIFFY + 0)
      000D66 E6 07            [ 7] 3323 	and	a, #0x07
      000D68 DD 77 FF         [19] 3324 	ld	-1 (ix), a
                                   3325 ;src\/Graphics.h:254: if(firstTime) {
      000D6B DD 7E 07         [19] 3326 	ld	a, 7 (ix)
      000D6E B7               [ 4] 3327 	or	a, a
      000D6F 28 69            [12] 3328 	jr	Z, 00102$
                                   3329 ;src\/Graphics.h:255: WRTVRM(SPRATT + 5, 	x - 8);
      000D71 DD 4E 05         [19] 3330 	ld	c, 5 (ix)
      000D74 79               [ 4] 3331 	ld	a, c
      000D75 C6 F8            [ 7] 3332 	add	a, #0xf8
      000D77 C5               [11] 3333 	push	bc
      000D78 D5               [11] 3334 	push	de
      000D79 F5               [11] 3335 	push	af
      000D7A 33               [ 6] 3336 	inc	sp
      000D7B 21 05 1B         [10] 3337 	ld	hl, #0x1b05
      000D7E E5               [11] 3338 	push	hl
      000D7F CDr00r00         [17] 3339 	call	_WRTVRM
      000D82 F1               [10] 3340 	pop	af
      000D83 33               [ 6] 3341 	inc	sp
      000D84 D1               [10] 3342 	pop	de
      000D85 C1               [10] 3343 	pop	bc
                                   3344 ;src\/Graphics.h:256: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D86 DD 7E 04         [19] 3345 	ld	a, 4 (ix)
      000D89 C6 FD            [ 7] 3346 	add	a, #0xfd
      000D8B 87               [ 4] 3347 	add	a, a
      000D8C 87               [ 4] 3348 	add	a, a
      000D8D C6 0C            [ 7] 3349 	add	a, #0x0c
      000D8F C5               [11] 3350 	push	bc
      000D90 D5               [11] 3351 	push	de
      000D91 F5               [11] 3352 	push	af
      000D92 33               [ 6] 3353 	inc	sp
      000D93 21 06 1B         [10] 3354 	ld	hl, #0x1b06
      000D96 E5               [11] 3355 	push	hl
      000D97 CDr00r00         [17] 3356 	call	_WRTVRM
      000D9A F1               [10] 3357 	pop	af
      000D9B 33               [ 6] 3358 	inc	sp
      000D9C D1               [10] 3359 	pop	de
      000D9D C1               [10] 3360 	pop	bc
                                   3361 ;src\/Graphics.h:258: WRTVRM(SPRATT + 9, 	x + 8);
      000D9E 79               [ 4] 3362 	ld	a, c
      000D9F C6 08            [ 7] 3363 	add	a, #0x08
      000DA1 C5               [11] 3364 	push	bc
      000DA2 D5               [11] 3365 	push	de
      000DA3 F5               [11] 3366 	push	af
      000DA4 33               [ 6] 3367 	inc	sp
      000DA5 21 09 1B         [10] 3368 	ld	hl, #0x1b09
      000DA8 E5               [11] 3369 	push	hl
      000DA9 CDr00r00         [17] 3370 	call	_WRTVRM
      000DAC F1               [10] 3371 	pop	af
      000DAD 33               [ 6] 3372 	inc	sp
      000DAE 3E 04            [ 7] 3373 	ld	a, #0x04
      000DB0 F5               [11] 3374 	push	af
      000DB1 33               [ 6] 3375 	inc	sp
      000DB2 21 0A 1B         [10] 3376 	ld	hl, #0x1b0a
      000DB5 E5               [11] 3377 	push	hl
      000DB6 CDr00r00         [17] 3378 	call	_WRTVRM
      000DB9 F1               [10] 3379 	pop	af
      000DBA 33               [ 6] 3380 	inc	sp
      000DBB D1               [10] 3381 	pop	de
      000DBC C1               [10] 3382 	pop	bc
                                   3383 ;src\/Graphics.h:261: WRTVRM(SPRATT + 13, 	x + 24);
      000DBD 79               [ 4] 3384 	ld	a, c
      000DBE C6 18            [ 7] 3385 	add	a, #0x18
      000DC0 D5               [11] 3386 	push	de
      000DC1 F5               [11] 3387 	push	af
      000DC2 33               [ 6] 3388 	inc	sp
      000DC3 21 0D 1B         [10] 3389 	ld	hl, #0x1b0d
      000DC6 E5               [11] 3390 	push	hl
      000DC7 CDr00r00         [17] 3391 	call	_WRTVRM
      000DCA F1               [10] 3392 	pop	af
      000DCB 33               [ 6] 3393 	inc	sp
      000DCC 3E 08            [ 7] 3394 	ld	a, #0x08
      000DCE F5               [11] 3395 	push	af
      000DCF 33               [ 6] 3396 	inc	sp
      000DD0 21 0E 1B         [10] 3397 	ld	hl, #0x1b0e
      000DD3 E5               [11] 3398 	push	hl
      000DD4 CDr00r00         [17] 3399 	call	_WRTVRM
      000DD7 F1               [10] 3400 	pop	af
      000DD8 33               [ 6] 3401 	inc	sp
      000DD9 D1               [10] 3402 	pop	de
      000DDA                       3403 00102$:
                                   3404 ;src\/Graphics.h:265: WRTVRM(SPRATT + 4, 	y);
      000DDA D5               [11] 3405 	push	de
      000DDB DD 7E 06         [19] 3406 	ld	a, 6 (ix)
      000DDE F5               [11] 3407 	push	af
      000DDF 33               [ 6] 3408 	inc	sp
      000DE0 21 04 1B         [10] 3409 	ld	hl, #0x1b04
      000DE3 E5               [11] 3410 	push	hl
      000DE4 CDr00r00         [17] 3411 	call	_WRTVRM
      000DE7 F1               [10] 3412 	pop	af
      000DE8 33               [ 6] 3413 	inc	sp
      000DE9 D1               [10] 3414 	pop	de
                                   3415 ;src\/Graphics.h:266: WRTVRM(SPRATT + 7, 	colors[colorIndex]);
      000DEA DD 6E FF         [19] 3416 	ld	l, -1 (ix)
      000DED 26 00            [ 7] 3417 	ld	h, #0x00
      000DEF 19               [11] 3418 	add	hl, de
      000DF0 7E               [ 7] 3419 	ld	a, (hl)
      000DF1 E5               [11] 3420 	push	hl
      000DF2 F5               [11] 3421 	push	af
      000DF3 33               [ 6] 3422 	inc	sp
      000DF4 11 07 1B         [10] 3423 	ld	de, #0x1b07
      000DF7 D5               [11] 3424 	push	de
      000DF8 CDr00r00         [17] 3425 	call	_WRTVRM
      000DFB F1               [10] 3426 	pop	af
      000DFC 33               [ 6] 3427 	inc	sp
      000DFD DD 7E 06         [19] 3428 	ld	a, 6 (ix)
      000E00 F5               [11] 3429 	push	af
      000E01 33               [ 6] 3430 	inc	sp
      000E02 11 08 1B         [10] 3431 	ld	de, #0x1b08
      000E05 D5               [11] 3432 	push	de
      000E06 CDr00r00         [17] 3433 	call	_WRTVRM
      000E09 F1               [10] 3434 	pop	af
      000E0A 33               [ 6] 3435 	inc	sp
      000E0B E1               [10] 3436 	pop	hl
                                   3437 ;src\/Graphics.h:269: WRTVRM(SPRATT + 11, 	colors[colorIndex]);
      000E0C 7E               [ 7] 3438 	ld	a, (hl)
      000E0D E5               [11] 3439 	push	hl
      000E0E F5               [11] 3440 	push	af
      000E0F 33               [ 6] 3441 	inc	sp
      000E10 11 0B 1B         [10] 3442 	ld	de, #0x1b0b
      000E13 D5               [11] 3443 	push	de
      000E14 CDr00r00         [17] 3444 	call	_WRTVRM
      000E17 F1               [10] 3445 	pop	af
      000E18 33               [ 6] 3446 	inc	sp
      000E19 DD 7E 06         [19] 3447 	ld	a, 6 (ix)
      000E1C F5               [11] 3448 	push	af
      000E1D 33               [ 6] 3449 	inc	sp
      000E1E 11 0C 1B         [10] 3450 	ld	de, #0x1b0c
      000E21 D5               [11] 3451 	push	de
      000E22 CDr00r00         [17] 3452 	call	_WRTVRM
      000E25 F1               [10] 3453 	pop	af
      000E26 33               [ 6] 3454 	inc	sp
      000E27 E1               [10] 3455 	pop	hl
                                   3456 ;src\/Graphics.h:272: WRTVRM(SPRATT + 15, 	colors[colorIndex]);
      000E28 7E               [ 7] 3457 	ld	a, (hl)
      000E29 F5               [11] 3458 	push	af
      000E2A 33               [ 6] 3459 	inc	sp
      000E2B 21 0F 1B         [10] 3460 	ld	hl, #0x1b0f
      000E2E E5               [11] 3461 	push	hl
      000E2F CDr00r00         [17] 3462 	call	_WRTVRM
                                   3463 ;src\/Graphics.h:273: }
      000E32 DD F9            [10] 3464 	ld	sp,ix
      000E34 DD E1            [14] 3465 	pop	ix
      000E36 C9               [10] 3466 	ret
                                   3467 ;src\/Graphics.h:275: void HideHitSprite() {
                                   3468 ;	---------------------------------
                                   3469 ; Function HideHitSprite
                                   3470 ; ---------------------------------
      000E37                       3471 _HideHitSprite::
                                   3472 ;src\/Graphics.h:276: WRTVRM(SPRATT + 4, 	192);
      000E37 3E C0            [ 7] 3473 	ld	a, #0xc0
      000E39 F5               [11] 3474 	push	af
      000E3A 33               [ 6] 3475 	inc	sp
      000E3B 21 04 1B         [10] 3476 	ld	hl, #0x1b04
      000E3E E5               [11] 3477 	push	hl
      000E3F CDr00r00         [17] 3478 	call	_WRTVRM
      000E42 F1               [10] 3479 	pop	af
      000E43 33               [ 6] 3480 	inc	sp
                                   3481 ;src\/Graphics.h:277: WRTVRM(SPRATT + 8, 	192);
      000E44 3E C0            [ 7] 3482 	ld	a, #0xc0
      000E46 F5               [11] 3483 	push	af
      000E47 33               [ 6] 3484 	inc	sp
      000E48 21 08 1B         [10] 3485 	ld	hl, #0x1b08
      000E4B E5               [11] 3486 	push	hl
      000E4C CDr00r00         [17] 3487 	call	_WRTVRM
      000E4F F1               [10] 3488 	pop	af
      000E50 33               [ 6] 3489 	inc	sp
                                   3490 ;src\/Graphics.h:278: WRTVRM(SPRATT + 12, 	192);
      000E51 3E C0            [ 7] 3491 	ld	a, #0xc0
      000E53 F5               [11] 3492 	push	af
      000E54 33               [ 6] 3493 	inc	sp
      000E55 21 0C 1B         [10] 3494 	ld	hl, #0x1b0c
      000E58 E5               [11] 3495 	push	hl
      000E59 CDr00r00         [17] 3496 	call	_WRTVRM
      000E5C F1               [10] 3497 	pop	af
      000E5D 33               [ 6] 3498 	inc	sp
                                   3499 ;src\/Graphics.h:279: }
      000E5E C9               [10] 3500 	ret
                                   3501 ;src\/Graphics.h:281: void InitVRAM() {
                                   3502 ;	---------------------------------
                                   3503 ; Function InitVRAM
                                   3504 ; ---------------------------------
      000E5F                       3505 _InitVRAM::
      000E5F DD E5            [15] 3506 	push	ix
      000E61 DD 21 00 00      [14] 3507 	ld	ix,#0
      000E65 DD 39            [15] 3508 	add	ix,sp
      000E67 3B               [ 6] 3509 	dec	sp
                                   3510 ;src\/Graphics.h:286: CLIKSW = 0;	// disable keyboard sound
      000E68 21 00 00         [10] 3511 	ld	hl, #0x0000
      000E6B 22 DB F3         [16] 3512 	ld	(_CLIKSW), hl
                                   3513 ;src\/Graphics.h:287: SCNCNT = 1; 	// set keyboard scan counter
      000E6E 21 F6 F3         [10] 3514 	ld	hl, #_SCNCNT
      000E71 36 01            [10] 3515 	ld	(hl), #0x01
                                   3516 ;src\/Graphics.h:289: FORCLR = COLOR_WHITE;
      000E73 21 E9 F3         [10] 3517 	ld	hl, #_FORCLR
      000E76 36 0F            [10] 3518 	ld	(hl), #0x0f
                                   3519 ;src\/Graphics.h:290: BAKCLR = COLOR_BLACK;
      000E78 21 EA F3         [10] 3520 	ld	hl, #_BAKCLR
      000E7B 36 01            [10] 3521 	ld	(hl), #0x01
                                   3522 ;src\/Graphics.h:291: BDRCLR = COLOR_BLACK;
      000E7D 21 EB F3         [10] 3523 	ld	hl, #_BDRCLR
      000E80 36 01            [10] 3524 	ld	(hl), #0x01
                                   3525 ;src\/Graphics.h:319: WRTVDP(0b0000000111100010);
      000E82 21 E2 01         [10] 3526 	ld	hl, #0x01e2
      000E85 CDr00r00         [17] 3527 	call	_WRTVDP
                                   3528 ;src\/Graphics.h:321: INIGRP();	// Set screen 2
      000E88 CDr00r00         [17] 3529 	call	_INIGRP
                                   3530 ;src\/Graphics.h:323: DISSCR();	// Disable screen (faster to write)
      000E8B CDr00r00         [17] 3531 	call	_DISSCR
                                   3532 ;src\/Graphics.h:327: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      000E8E AF               [ 4] 3533 	xor	a, a
      000E8F F5               [11] 3534 	push	af
      000E90 33               [ 6] 3535 	inc	sp
      000E91 21 00 40         [10] 3536 	ld	hl, #0x4000
      000E94 E5               [11] 3537 	push	hl
      000E95 65               [ 4] 3538 	ld	h, l
      000E96 E5               [11] 3539 	push	hl
      000E97 CDr00r00         [17] 3540 	call	_FILVRM
      000E9A F1               [10] 3541 	pop	af
                                   3542 ;src\/Graphics.h:336: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      000E9B 33               [ 6] 3543 	inc	sp
      000E9C 21 00 01         [10] 3544 	ld	hl,#0x0100
      000E9F E3               [19] 3545 	ex	(sp),hl
      000EA0 21r47r07         [10] 3546 	ld	hl, #_sprite_arrow_0
      000EA3 E5               [11] 3547 	push	hl
      000EA4 21 00 38         [10] 3548 	ld	hl, #0x3800
      000EA7 E5               [11] 3549 	push	hl
      000EA8 CDr00r00         [17] 3550 	call	_LDIRVM
      000EAB 21 06 00         [10] 3551 	ld	hl, #6
      000EAE 39               [11] 3552 	add	hl, sp
      000EAF F9               [ 6] 3553 	ld	sp, hl
                                   3554 ;src\/Graphics.h:342: for(byte i=0; i<32; i++) {
      000EB0 0E 00            [ 7] 3555 	ld	c, #0x00
      000EB2                       3556 00110$:
                                   3557 ;src\/Graphics.h:343: WRTVRM(SPRATT + (i * 4), 	192);
      000EB2 79               [ 4] 3558 	ld	a,c
      000EB3 FE 20            [ 7] 3559 	cp	a,#0x20
      000EB5 30 18            [12] 3560 	jr	NC, 00101$
      000EB7 26 00            [ 7] 3561 	ld	h, #0x00
      000EB9 6F               [ 4] 3562 	ld	l, a
      000EBA 29               [11] 3563 	add	hl, hl
      000EBB 29               [11] 3564 	add	hl, hl
      000EBC 7C               [ 4] 3565 	ld	a, h
      000EBD C6 1B            [ 7] 3566 	add	a, #0x1b
      000EBF 67               [ 4] 3567 	ld	h, a
      000EC0 C5               [11] 3568 	push	bc
      000EC1 3E C0            [ 7] 3569 	ld	a, #0xc0
      000EC3 F5               [11] 3570 	push	af
      000EC4 33               [ 6] 3571 	inc	sp
      000EC5 E5               [11] 3572 	push	hl
      000EC6 CDr00r00         [17] 3573 	call	_WRTVRM
      000EC9 F1               [10] 3574 	pop	af
      000ECA 33               [ 6] 3575 	inc	sp
      000ECB C1               [10] 3576 	pop	bc
                                   3577 ;src\/Graphics.h:342: for(byte i=0; i<32; i++) {
      000ECC 0C               [ 4] 3578 	inc	c
      000ECD 18 E3            [12] 3579 	jr	00110$
      000ECF                       3580 00101$:
                                   3581 ;src\/Graphics.h:352: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000ECF 21 78 01         [10] 3582 	ld	hl, #0x0178
      000ED2 E5               [11] 3583 	push	hl
      000ED3 21r17r04         [10] 3584 	ld	hl, #_pattern_black_0
      000ED6 E5               [11] 3585 	push	hl
      000ED7 21 00 00         [10] 3586 	ld	hl, #0x0000
      000EDA E5               [11] 3587 	push	hl
      000EDB CDr00r00         [17] 3588 	call	_LDIRVM
      000EDE 21 06 00         [10] 3589 	ld	hl, #6
      000EE1 39               [11] 3590 	add	hl, sp
      000EE2 F9               [ 6] 3591 	ld	sp, hl
                                   3592 ;src\/Graphics.h:355: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EE3 21 78 01         [10] 3593 	ld	hl, #0x0178
      000EE6 E5               [11] 3594 	push	hl
      000EE7 21r17r04         [10] 3595 	ld	hl, #_pattern_black_0
      000EEA E5               [11] 3596 	push	hl
      000EEB 21 00 08         [10] 3597 	ld	hl, #0x0800
      000EEE E5               [11] 3598 	push	hl
      000EEF CDr00r00         [17] 3599 	call	_LDIRVM
      000EF2 21 06 00         [10] 3600 	ld	hl, #6
      000EF5 39               [11] 3601 	add	hl, sp
      000EF6 F9               [ 6] 3602 	ld	sp, hl
                                   3603 ;src\/Graphics.h:358: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000EF7 21 78 01         [10] 3604 	ld	hl, #0x0178
      000EFA E5               [11] 3605 	push	hl
      000EFB 21r17r04         [10] 3606 	ld	hl, #_pattern_black_0
      000EFE E5               [11] 3607 	push	hl
      000EFF 21 00 10         [10] 3608 	ld	hl, #0x1000
      000F02 E5               [11] 3609 	push	hl
      000F03 CDr00r00         [17] 3610 	call	_LDIRVM
      000F06 21 06 00         [10] 3611 	ld	hl, #6
      000F09 39               [11] 3612 	add	hl, sp
      000F0A F9               [ 6] 3613 	ld	sp, hl
                                   3614 ;src\/Graphics.h:361: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F0B 21 00 03         [10] 3615 	ld	hl, #0x0300
      000F0E E5               [11] 3616 	push	hl
      000F0F 21r17r01         [10] 3617 	ld	hl, #_FONT
      000F12 E5               [11] 3618 	push	hl
      000F13 21 78 01         [10] 3619 	ld	hl, #0x0178
      000F16 E5               [11] 3620 	push	hl
      000F17 CDr00r00         [17] 3621 	call	_LDIRVM
      000F1A 21 06 00         [10] 3622 	ld	hl, #6
      000F1D 39               [11] 3623 	add	hl, sp
      000F1E F9               [ 6] 3624 	ld	sp, hl
                                   3625 ;src\/Graphics.h:364: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F1F 21 00 03         [10] 3626 	ld	hl, #0x0300
      000F22 E5               [11] 3627 	push	hl
      000F23 21r17r01         [10] 3628 	ld	hl, #_FONT
      000F26 E5               [11] 3629 	push	hl
      000F27 21 78 09         [10] 3630 	ld	hl, #0x0978
      000F2A E5               [11] 3631 	push	hl
      000F2B CDr00r00         [17] 3632 	call	_LDIRVM
      000F2E 21 06 00         [10] 3633 	ld	hl, #6
      000F31 39               [11] 3634 	add	hl, sp
      000F32 F9               [ 6] 3635 	ld	sp, hl
                                   3636 ;src\/Graphics.h:367: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000F33 21 00 03         [10] 3637 	ld	hl, #0x0300
      000F36 E5               [11] 3638 	push	hl
      000F37 21r17r01         [10] 3639 	ld	hl, #_FONT
      000F3A E5               [11] 3640 	push	hl
      000F3B 21 78 11         [10] 3641 	ld	hl, #0x1178
      000F3E E5               [11] 3642 	push	hl
      000F3F CDr00r00         [17] 3643 	call	_LDIRVM
      000F42 21 06 00         [10] 3644 	ld	hl, #6
      000F45 39               [11] 3645 	add	hl, sp
      000F46 F9               [ 6] 3646 	ld	sp, hl
                                   3647 ;src\/Graphics.h:371: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000F47 0E 00            [ 7] 3648 	ld	c, #0x00
      000F49                       3649 00113$:
                                   3650 ;src\/Graphics.h:372: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      000F49 79               [ 4] 3651 	ld	a,c
      000F4A FE 07            [ 7] 3652 	cp	a,#0x07
      000F4C 30 20            [12] 3653 	jr	NC, 00102$
      000F4E 26 00            [ 7] 3654 	ld	h, #0x00
      000F50 6F               [ 4] 3655 	ld	l, a
      000F51 29               [11] 3656 	add	hl, hl
      000F52 29               [11] 3657 	add	hl, hl
      000F53 29               [11] 3658 	add	hl, hl
      000F54 11 70 04         [10] 3659 	ld	de, #0x0470
      000F57 19               [11] 3660 	add	hl, de
      000F58 C5               [11] 3661 	push	bc
      000F59 11 38 00         [10] 3662 	ld	de, #0x0038
      000F5C D5               [11] 3663 	push	de
      000F5D 11r87r05         [10] 3664 	ld	de, #_pattern_title
      000F60 D5               [11] 3665 	push	de
      000F61 E5               [11] 3666 	push	hl
      000F62 CDr00r00         [17] 3667 	call	_LDIRVM
      000F65 21 06 00         [10] 3668 	ld	hl, #6
      000F68 39               [11] 3669 	add	hl, sp
      000F69 F9               [ 6] 3670 	ld	sp, hl
      000F6A C1               [10] 3671 	pop	bc
                                   3672 ;src\/Graphics.h:371: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000F6B 0C               [ 4] 3673 	inc	c
      000F6C 18 DB            [12] 3674 	jr	00113$
      000F6E                       3675 00102$:
                                   3676 ;src\/Graphics.h:378: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      000F6E 21 78 01         [10] 3677 	ld	hl, #0x0178
      000F71 E5               [11] 3678 	push	hl
      000F72 21r8Fr05         [10] 3679 	ld	hl, #_color_black_0
      000F75 E5               [11] 3680 	push	hl
      000F76 21 00 20         [10] 3681 	ld	hl, #0x2000
      000F79 E5               [11] 3682 	push	hl
      000F7A CDr00r00         [17] 3683 	call	_LDIRVM
      000F7D 21 06 00         [10] 3684 	ld	hl, #6
      000F80 39               [11] 3685 	add	hl, sp
      000F81 F9               [ 6] 3686 	ld	sp, hl
                                   3687 ;src\/Graphics.h:380: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000F82 21 78 01         [10] 3688 	ld	hl, #0x0178
      000F85 E5               [11] 3689 	push	hl
      000F86 21r8Fr05         [10] 3690 	ld	hl, #_color_black_0
      000F89 E5               [11] 3691 	push	hl
      000F8A 21 00 28         [10] 3692 	ld	hl, #0x2800
      000F8D E5               [11] 3693 	push	hl
      000F8E CDr00r00         [17] 3694 	call	_LDIRVM
      000F91 21 06 00         [10] 3695 	ld	hl, #6
      000F94 39               [11] 3696 	add	hl, sp
      000F95 F9               [ 6] 3697 	ld	sp, hl
                                   3698 ;src\/Graphics.h:382: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000F96 21 78 01         [10] 3699 	ld	hl, #0x0178
      000F99 E5               [11] 3700 	push	hl
      000F9A 21r8Fr05         [10] 3701 	ld	hl, #_color_black_0
      000F9D E5               [11] 3702 	push	hl
      000F9E 21 00 30         [10] 3703 	ld	hl, #0x3000
      000FA1 E5               [11] 3704 	push	hl
      000FA2 CDr00r00         [17] 3705 	call	_LDIRVM
      000FA5 21 06 00         [10] 3706 	ld	hl, #6
      000FA8 39               [11] 3707 	add	hl, sp
      000FA9 F9               [ 6] 3708 	ld	sp, hl
                                   3709 ;src\/Graphics.h:389: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FAA 0E 00            [ 7] 3710 	ld	c, #0x00
      000FAC                       3711 00116$:
                                   3712 ;src\/Graphics.h:390: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FAC 79               [ 4] 3713 	ld	a,c
      000FAD FE 60            [ 7] 3714 	cp	a,#0x60
      000FAF 30 20            [12] 3715 	jr	NC, 00103$
      000FB1 26 00            [ 7] 3716 	ld	h, #0x00
      000FB3 6F               [ 4] 3717 	ld	l, a
      000FB4 29               [11] 3718 	add	hl, hl
      000FB5 29               [11] 3719 	add	hl, hl
      000FB6 29               [11] 3720 	add	hl, hl
      000FB7 11 78 21         [10] 3721 	ld	de, #0x2178
      000FBA 19               [11] 3722 	add	hl, de
      000FBB C5               [11] 3723 	push	bc
      000FBC 11 08 00         [10] 3724 	ld	de, #0x0008
      000FBF D5               [11] 3725 	push	de
      000FC0 11r07r07         [10] 3726 	ld	de, #_color_font_2
      000FC3 D5               [11] 3727 	push	de
      000FC4 E5               [11] 3728 	push	hl
      000FC5 CDr00r00         [17] 3729 	call	_LDIRVM
      000FC8 21 06 00         [10] 3730 	ld	hl, #6
      000FCB 39               [11] 3731 	add	hl, sp
      000FCC F9               [ 6] 3732 	ld	sp, hl
      000FCD C1               [10] 3733 	pop	bc
                                   3734 ;src\/Graphics.h:389: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FCE 0C               [ 4] 3735 	inc	c
      000FCF 18 DB            [12] 3736 	jr	00116$
      000FD1                       3737 00103$:
                                   3738 ;src\/Graphics.h:393: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FD1 0E 00            [ 7] 3739 	ld	c, #0x00
      000FD3                       3740 00119$:
                                   3741 ;src\/Graphics.h:394: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FD3 79               [ 4] 3742 	ld	a,c
      000FD4 FE 60            [ 7] 3743 	cp	a,#0x60
      000FD6 30 20            [12] 3744 	jr	NC, 00104$
      000FD8 26 00            [ 7] 3745 	ld	h, #0x00
      000FDA 6F               [ 4] 3746 	ld	l, a
      000FDB 29               [11] 3747 	add	hl, hl
      000FDC 29               [11] 3748 	add	hl, hl
      000FDD 29               [11] 3749 	add	hl, hl
      000FDE 11 78 29         [10] 3750 	ld	de, #0x2978
      000FE1 19               [11] 3751 	add	hl, de
      000FE2 C5               [11] 3752 	push	bc
      000FE3 11 08 00         [10] 3753 	ld	de, #0x0008
      000FE6 D5               [11] 3754 	push	de
      000FE7 11r07r07         [10] 3755 	ld	de, #_color_font_2
      000FEA D5               [11] 3756 	push	de
      000FEB E5               [11] 3757 	push	hl
      000FEC CDr00r00         [17] 3758 	call	_LDIRVM
      000FEF 21 06 00         [10] 3759 	ld	hl, #6
      000FF2 39               [11] 3760 	add	hl, sp
      000FF3 F9               [ 6] 3761 	ld	sp, hl
      000FF4 C1               [10] 3762 	pop	bc
                                   3763 ;src\/Graphics.h:393: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FF5 0C               [ 4] 3764 	inc	c
      000FF6 18 DB            [12] 3765 	jr	00119$
      000FF8                       3766 00104$:
                                   3767 ;src\/Graphics.h:397: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000FF8 0E 00            [ 7] 3768 	ld	c, #0x00
      000FFA                       3769 00122$:
                                   3770 ;src\/Graphics.h:398: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000FFA 79               [ 4] 3771 	ld	a,c
      000FFB FE 60            [ 7] 3772 	cp	a,#0x60
      000FFD 30 20            [12] 3773 	jr	NC, 00105$
      000FFF 26 00            [ 7] 3774 	ld	h, #0x00
      001001 6F               [ 4] 3775 	ld	l, a
      001002 29               [11] 3776 	add	hl, hl
      001003 29               [11] 3777 	add	hl, hl
      001004 29               [11] 3778 	add	hl, hl
      001005 11 78 31         [10] 3779 	ld	de, #0x3178
      001008 19               [11] 3780 	add	hl, de
      001009 C5               [11] 3781 	push	bc
      00100A 11 08 00         [10] 3782 	ld	de, #0x0008
      00100D D5               [11] 3783 	push	de
      00100E 11r07r07         [10] 3784 	ld	de, #_color_font_2
      001011 D5               [11] 3785 	push	de
      001012 E5               [11] 3786 	push	hl
      001013 CDr00r00         [17] 3787 	call	_LDIRVM
      001016 21 06 00         [10] 3788 	ld	hl, #6
      001019 39               [11] 3789 	add	hl, sp
      00101A F9               [ 6] 3790 	ld	sp, hl
      00101B C1               [10] 3791 	pop	bc
                                   3792 ;src\/Graphics.h:397: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      00101C 0C               [ 4] 3793 	inc	c
      00101D 18 DB            [12] 3794 	jr	00122$
      00101F                       3795 00105$:
                                   3796 ;src\/Graphics.h:406: for(byte i = 0; i < 10; i++) {
      00101F 0E 00            [ 7] 3797 	ld	c, #0x00
      001021                       3798 00125$:
                                   3799 ;src\/Graphics.h:407: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001021 79               [ 4] 3800 	ld	a,c
      001022 FE 0A            [ 7] 3801 	cp	a,#0x0a
      001024 30 20            [12] 3802 	jr	NC, 00106$
      001026 26 00            [ 7] 3803 	ld	h, #0x00
      001028 6F               [ 4] 3804 	ld	l, a
      001029 29               [11] 3805 	add	hl, hl
      00102A 29               [11] 3806 	add	hl, hl
      00102B 29               [11] 3807 	add	hl, hl
      00102C 11 F8 21         [10] 3808 	ld	de, #0x21f8
      00102F 19               [11] 3809 	add	hl, de
      001030 C5               [11] 3810 	push	bc
      001031 11 08 00         [10] 3811 	ld	de, #0x0008
      001034 D5               [11] 3812 	push	de
      001035 11rFFr06         [10] 3813 	ld	de, #_color_font_1
      001038 D5               [11] 3814 	push	de
      001039 E5               [11] 3815 	push	hl
      00103A CDr00r00         [17] 3816 	call	_LDIRVM
      00103D 21 06 00         [10] 3817 	ld	hl, #6
      001040 39               [11] 3818 	add	hl, sp
      001041 F9               [ 6] 3819 	ld	sp, hl
      001042 C1               [10] 3820 	pop	bc
                                   3821 ;src\/Graphics.h:406: for(byte i = 0; i < 10; i++) {
      001043 0C               [ 4] 3822 	inc	c
      001044 18 DB            [12] 3823 	jr	00125$
      001046                       3824 00106$:
                                   3825 ;src\/Graphics.h:410: for(byte i = 0; i < 10; i++) {
      001046 0E 00            [ 7] 3826 	ld	c, #0x00
      001048                       3827 00128$:
                                   3828 ;src\/Graphics.h:411: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001048 79               [ 4] 3829 	ld	a,c
      001049 FE 0A            [ 7] 3830 	cp	a,#0x0a
      00104B 30 20            [12] 3831 	jr	NC, 00107$
      00104D 26 00            [ 7] 3832 	ld	h, #0x00
      00104F 6F               [ 4] 3833 	ld	l, a
      001050 29               [11] 3834 	add	hl, hl
      001051 29               [11] 3835 	add	hl, hl
      001052 29               [11] 3836 	add	hl, hl
      001053 11 F8 29         [10] 3837 	ld	de, #0x29f8
      001056 19               [11] 3838 	add	hl, de
      001057 C5               [11] 3839 	push	bc
      001058 11 08 00         [10] 3840 	ld	de, #0x0008
      00105B D5               [11] 3841 	push	de
      00105C 11rFFr06         [10] 3842 	ld	de, #_color_font_1
      00105F D5               [11] 3843 	push	de
      001060 E5               [11] 3844 	push	hl
      001061 CDr00r00         [17] 3845 	call	_LDIRVM
      001064 21 06 00         [10] 3846 	ld	hl, #6
      001067 39               [11] 3847 	add	hl, sp
      001068 F9               [ 6] 3848 	ld	sp, hl
      001069 C1               [10] 3849 	pop	bc
                                   3850 ;src\/Graphics.h:410: for(byte i = 0; i < 10; i++) {
      00106A 0C               [ 4] 3851 	inc	c
      00106B 18 DB            [12] 3852 	jr	00128$
      00106D                       3853 00107$:
                                   3854 ;src\/Graphics.h:414: for(byte i = 0; i < 10; i++) {
      00106D DD 36 FF 00      [19] 3855 	ld	-1 (ix), #0
      001071                       3856 00131$:
      001071 DD 7E FF         [19] 3857 	ld	a, -1 (ix)
      001074 D6 0A            [ 7] 3858 	sub	a, #0x0a
      001076 30 22            [12] 3859 	jr	NC, 00108$
                                   3860 ;src\/Graphics.h:415: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001078 01rFFr06         [10] 3861 	ld	bc, #_color_font_1
      00107B DD 6E FF         [19] 3862 	ld	l, -1 (ix)
      00107E 26 00            [ 7] 3863 	ld	h, #0x00
      001080 29               [11] 3864 	add	hl, hl
      001081 29               [11] 3865 	add	hl, hl
      001082 29               [11] 3866 	add	hl, hl
      001083 11 F8 31         [10] 3867 	ld	de, #0x31f8
      001086 19               [11] 3868 	add	hl, de
      001087 11 08 00         [10] 3869 	ld	de, #0x0008
      00108A D5               [11] 3870 	push	de
      00108B C5               [11] 3871 	push	bc
      00108C E5               [11] 3872 	push	hl
      00108D CDr00r00         [17] 3873 	call	_LDIRVM
      001090 21 06 00         [10] 3874 	ld	hl, #6
      001093 39               [11] 3875 	add	hl, sp
      001094 F9               [ 6] 3876 	ld	sp, hl
                                   3877 ;src\/Graphics.h:414: for(byte i = 0; i < 10; i++) {
      001095 DD 34 FF         [23] 3878 	inc	-1 (ix)
      001098 18 D7            [12] 3879 	jr	00131$
      00109A                       3880 00108$:
                                   3881 ;src\/Graphics.h:419: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      00109A 21 38 00         [10] 3882 	ld	hl, #0x0038
      00109D E5               [11] 3883 	push	hl
      00109E 21r0Fr07         [10] 3884 	ld	hl, #_color_title_1
      0010A1 E5               [11] 3885 	push	hl
      0010A2 21 70 24         [10] 3886 	ld	hl, #0x2470
      0010A5 E5               [11] 3887 	push	hl
      0010A6 CDr00r00         [17] 3888 	call	_LDIRVM
      0010A9 21 06 00         [10] 3889 	ld	hl, #6
      0010AC 39               [11] 3890 	add	hl, sp
      0010AD F9               [ 6] 3891 	ld	sp, hl
                                   3892 ;src\/Graphics.h:427: ENASCR();	// Enable screen
      0010AE CDr00r00         [17] 3893 	call	_ENASCR
                                   3894 ;src\/Graphics.h:428: }
      0010B1 33               [ 6] 3895 	inc	sp
      0010B2 DD E1            [14] 3896 	pop	ix
      0010B4 C9               [10] 3897 	ret
                                   3898 ;src\/Graphics.h:430: void DrawBlock(byte col, byte line, byte tile) {
                                   3899 ;	---------------------------------
                                   3900 ; Function DrawBlock
                                   3901 ; ---------------------------------
      0010B5                       3902 _DrawBlock::
      0010B5 DD E5            [15] 3903 	push	ix
      0010B7 DD 21 00 00      [14] 3904 	ld	ix,#0
      0010BB DD 39            [15] 3905 	add	ix,sp
                                   3906 ;src\/Graphics.h:432: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0010BD DD 6E 04         [19] 3907 	ld	l, 4 (ix)
      0010C0 26 00            [ 7] 3908 	ld	h, #0x00
      0010C2 29               [11] 3909 	add	hl, hl
      0010C3 4D               [ 4] 3910 	ld	c, l
      0010C4 44               [ 4] 3911 	ld	b, h
      0010C5 DD 6E 05         [19] 3912 	ld	l, 5 (ix)
      0010C8 26 00            [ 7] 3913 	ld	h, #0x00
      0010CA 29               [11] 3914 	add	hl, hl
      0010CB 29               [11] 3915 	add	hl, hl
      0010CC 29               [11] 3916 	add	hl, hl
      0010CD 29               [11] 3917 	add	hl, hl
      0010CE 29               [11] 3918 	add	hl, hl
      0010CF 29               [11] 3919 	add	hl, hl
      0010D0 11 0A 18         [10] 3920 	ld	de, #0x180a
      0010D3 19               [11] 3921 	add	hl, de
      0010D4 09               [11] 3922 	add	hl, bc
      0010D5 EB               [ 4] 3923 	ex	de, hl
                                   3924 ;src\/Graphics.h:434: WRTVRM(baseAddr, tile);
      0010D6 D5               [11] 3925 	push	de
      0010D7 DD 7E 06         [19] 3926 	ld	a, 6 (ix)
      0010DA F5               [11] 3927 	push	af
      0010DB 33               [ 6] 3928 	inc	sp
      0010DC D5               [11] 3929 	push	de
      0010DD CDr00r00         [17] 3930 	call	_WRTVRM
      0010E0 F1               [10] 3931 	pop	af
      0010E1 33               [ 6] 3932 	inc	sp
      0010E2 D1               [10] 3933 	pop	de
                                   3934 ;src\/Graphics.h:435: WRTVRM(baseAddr + 1, tile + 1);
      0010E3 DD 4E 06         [19] 3935 	ld	c, 6 (ix)
      0010E6 79               [ 4] 3936 	ld	a, c
      0010E7 3C               [ 4] 3937 	inc	a
      0010E8 6B               [ 4] 3938 	ld	l, e
      0010E9 62               [ 4] 3939 	ld	h, d
      0010EA 23               [ 6] 3940 	inc	hl
      0010EB C5               [11] 3941 	push	bc
      0010EC D5               [11] 3942 	push	de
      0010ED F5               [11] 3943 	push	af
      0010EE 33               [ 6] 3944 	inc	sp
      0010EF E5               [11] 3945 	push	hl
      0010F0 CDr00r00         [17] 3946 	call	_WRTVRM
      0010F3 F1               [10] 3947 	pop	af
      0010F4 33               [ 6] 3948 	inc	sp
      0010F5 D1               [10] 3949 	pop	de
      0010F6 C1               [10] 3950 	pop	bc
                                   3951 ;src\/Graphics.h:436: WRTVRM(baseAddr + 32, tile + 2);
      0010F7 41               [ 4] 3952 	ld	b, c
      0010F8 04               [ 4] 3953 	inc	b
      0010F9 04               [ 4] 3954 	inc	b
      0010FA 21 20 00         [10] 3955 	ld	hl, #0x0020
      0010FD 19               [11] 3956 	add	hl, de
      0010FE C5               [11] 3957 	push	bc
      0010FF D5               [11] 3958 	push	de
      001100 C5               [11] 3959 	push	bc
      001101 33               [ 6] 3960 	inc	sp
      001102 E5               [11] 3961 	push	hl
      001103 CDr00r00         [17] 3962 	call	_WRTVRM
      001106 F1               [10] 3963 	pop	af
      001107 33               [ 6] 3964 	inc	sp
      001108 D1               [10] 3965 	pop	de
      001109 C1               [10] 3966 	pop	bc
                                   3967 ;src\/Graphics.h:437: WRTVRM(baseAddr + 33, tile + 3);
      00110A 0C               [ 4] 3968 	inc	c
      00110B 0C               [ 4] 3969 	inc	c
      00110C 0C               [ 4] 3970 	inc	c
      00110D 21 21 00         [10] 3971 	ld	hl, #0x0021
      001110 19               [11] 3972 	add	hl, de
      001111 79               [ 4] 3973 	ld	a, c
      001112 F5               [11] 3974 	push	af
      001113 33               [ 6] 3975 	inc	sp
      001114 E5               [11] 3976 	push	hl
      001115 CDr00r00         [17] 3977 	call	_WRTVRM
      001118 F1               [10] 3978 	pop	af
      001119 33               [ 6] 3979 	inc	sp
                                   3980 ;src\/Graphics.h:438: }
      00111A DD E1            [14] 3981 	pop	ix
      00111C C9               [10] 3982 	ret
                                   3983 ;src\/Graphics.h:440: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   3984 ;	---------------------------------
                                   3985 ; Function DrawBlock_SameTile
                                   3986 ; ---------------------------------
      00111D                       3987 _DrawBlock_SameTile::
      00111D DD E5            [15] 3988 	push	ix
      00111F DD 21 00 00      [14] 3989 	ld	ix,#0
      001123 DD 39            [15] 3990 	add	ix,sp
                                   3991 ;src\/Graphics.h:442: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001125 DD 6E 04         [19] 3992 	ld	l, 4 (ix)
      001128 26 00            [ 7] 3993 	ld	h, #0x00
      00112A 29               [11] 3994 	add	hl, hl
      00112B 4D               [ 4] 3995 	ld	c, l
      00112C 44               [ 4] 3996 	ld	b, h
      00112D DD 6E 05         [19] 3997 	ld	l, 5 (ix)
      001130 26 00            [ 7] 3998 	ld	h, #0x00
      001132 29               [11] 3999 	add	hl, hl
      001133 29               [11] 4000 	add	hl, hl
      001134 29               [11] 4001 	add	hl, hl
      001135 29               [11] 4002 	add	hl, hl
      001136 29               [11] 4003 	add	hl, hl
      001137 29               [11] 4004 	add	hl, hl
      001138 11 0A 18         [10] 4005 	ld	de, #0x180a
      00113B 19               [11] 4006 	add	hl, de
      00113C 09               [11] 4007 	add	hl, bc
      00113D EB               [ 4] 4008 	ex	de, hl
                                   4009 ;src\/Graphics.h:444: WRTVRM(baseAddr, tile);
      00113E D5               [11] 4010 	push	de
      00113F DD 7E 06         [19] 4011 	ld	a, 6 (ix)
      001142 F5               [11] 4012 	push	af
      001143 33               [ 6] 4013 	inc	sp
      001144 D5               [11] 4014 	push	de
      001145 CDr00r00         [17] 4015 	call	_WRTVRM
      001148 F1               [10] 4016 	pop	af
      001149 33               [ 6] 4017 	inc	sp
      00114A D1               [10] 4018 	pop	de
                                   4019 ;src\/Graphics.h:445: WRTVRM(baseAddr + 1, tile);
      00114B 4B               [ 4] 4020 	ld	c, e
      00114C 42               [ 4] 4021 	ld	b, d
      00114D 03               [ 6] 4022 	inc	bc
      00114E D5               [11] 4023 	push	de
      00114F DD 7E 06         [19] 4024 	ld	a, 6 (ix)
      001152 F5               [11] 4025 	push	af
      001153 33               [ 6] 4026 	inc	sp
      001154 C5               [11] 4027 	push	bc
      001155 CDr00r00         [17] 4028 	call	_WRTVRM
      001158 F1               [10] 4029 	pop	af
      001159 33               [ 6] 4030 	inc	sp
      00115A D1               [10] 4031 	pop	de
                                   4032 ;src\/Graphics.h:446: WRTVRM(baseAddr + 32, tile);
      00115B 21 20 00         [10] 4033 	ld	hl, #0x0020
      00115E 19               [11] 4034 	add	hl, de
      00115F D5               [11] 4035 	push	de
      001160 DD 7E 06         [19] 4036 	ld	a, 6 (ix)
      001163 F5               [11] 4037 	push	af
      001164 33               [ 6] 4038 	inc	sp
      001165 E5               [11] 4039 	push	hl
      001166 CDr00r00         [17] 4040 	call	_WRTVRM
      001169 F1               [10] 4041 	pop	af
      00116A 33               [ 6] 4042 	inc	sp
      00116B D1               [10] 4043 	pop	de
                                   4044 ;src\/Graphics.h:447: WRTVRM(baseAddr + 33, tile);
      00116C 21 21 00         [10] 4045 	ld	hl, #0x0021
      00116F 19               [11] 4046 	add	hl, de
      001170 DD 7E 06         [19] 4047 	ld	a, 6 (ix)
      001173 F5               [11] 4048 	push	af
      001174 33               [ 6] 4049 	inc	sp
      001175 E5               [11] 4050 	push	hl
      001176 CDr00r00         [17] 4051 	call	_WRTVRM
      001179 F1               [10] 4052 	pop	af
      00117A 33               [ 6] 4053 	inc	sp
                                   4054 ;src\/Graphics.h:448: }
      00117B DD E1            [14] 4055 	pop	ix
      00117D C9               [10] 4056 	ret
                                   4057 ;src\/Graphics.h:450: void DrawLine(byte line) {
                                   4058 ;	---------------------------------
                                   4059 ; Function DrawLine
                                   4060 ; ---------------------------------
      00117E                       4061 _DrawLine::
      00117E DD E5            [15] 4062 	push	ix
      001180 DD 21 00 00      [14] 4063 	ld	ix,#0
      001184 DD 39            [15] 4064 	add	ix,sp
                                   4065 ;src\/Graphics.h:451: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001186 DD 4E 04         [19] 4066 	ld	c, 4 (ix)
      001189 06 00            [ 7] 4067 	ld	b, #0x00
      00118B                       4068 00103$:
      00118B 78               [ 4] 4069 	ld	a, b
      00118C D6 06            [ 7] 4070 	sub	a, #0x06
      00118E 30 23            [12] 4071 	jr	NC, 00105$
                                   4072 ;src\/Graphics.h:452: DrawBlock(col, line, playfield[col][line]);
      001190 58               [ 4] 4073 	ld	e, b
      001191 16 00            [ 7] 4074 	ld	d, #0x00
      001193 6B               [ 4] 4075 	ld	l, e
      001194 62               [ 4] 4076 	ld	h, d
      001195 29               [11] 4077 	add	hl, hl
      001196 19               [11] 4078 	add	hl, de
      001197 29               [11] 4079 	add	hl, hl
      001198 29               [11] 4080 	add	hl, hl
      001199 11r00r00         [10] 4081 	ld	de, #_playfield
      00119C 19               [11] 4082 	add	hl, de
      00119D 59               [ 4] 4083 	ld	e, c
      00119E 16 00            [ 7] 4084 	ld	d, #0x00
      0011A0 19               [11] 4085 	add	hl, de
      0011A1 7E               [ 7] 4086 	ld	a, (hl)
      0011A2 C5               [11] 4087 	push	bc
      0011A3 F5               [11] 4088 	push	af
      0011A4 33               [ 6] 4089 	inc	sp
      0011A5 79               [ 4] 4090 	ld	a, c
      0011A6 F5               [11] 4091 	push	af
      0011A7 33               [ 6] 4092 	inc	sp
      0011A8 C5               [11] 4093 	push	bc
      0011A9 33               [ 6] 4094 	inc	sp
      0011AA CDrB5r10         [17] 4095 	call	_DrawBlock
      0011AD F1               [10] 4096 	pop	af
      0011AE 33               [ 6] 4097 	inc	sp
      0011AF C1               [10] 4098 	pop	bc
                                   4099 ;src\/Graphics.h:451: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011B0 04               [ 4] 4100 	inc	b
      0011B1 18 D8            [12] 4101 	jr	00103$
      0011B3                       4102 00105$:
                                   4103 ;src\/Graphics.h:454: }
      0011B3 DD E1            [14] 4104 	pop	ix
      0011B5 C9               [10] 4105 	ret
                                   4106 ;src\/Graphics.h:456: void DrawPiece(byte line) {
                                   4107 ;	---------------------------------
                                   4108 ; Function DrawPiece
                                   4109 ; ---------------------------------
      0011B6                       4110 _DrawPiece::
                                   4111 ;src\/Graphics.h:457: DrawLine(line);
      0011B6 21 02 00         [10] 4112 	ld	hl, #2
      0011B9 39               [11] 4113 	add	hl, sp
      0011BA 7E               [ 7] 4114 	ld	a, (hl)
      0011BB F5               [11] 4115 	push	af
      0011BC 33               [ 6] 4116 	inc	sp
      0011BD CDr7Er11         [17] 4117 	call	_DrawLine
      0011C0 33               [ 6] 4118 	inc	sp
                                   4119 ;src\/Graphics.h:458: DrawLine(line + 1);
      0011C1 21 02 00         [10] 4120 	ld	hl, #2
      0011C4 39               [11] 4121 	add	hl, sp
      0011C5 46               [ 7] 4122 	ld	b, (hl)
      0011C6 78               [ 4] 4123 	ld	a, b
      0011C7 3C               [ 4] 4124 	inc	a
      0011C8 C5               [11] 4125 	push	bc
      0011C9 F5               [11] 4126 	push	af
      0011CA 33               [ 6] 4127 	inc	sp
      0011CB CDr7Er11         [17] 4128 	call	_DrawLine
      0011CE 33               [ 6] 4129 	inc	sp
      0011CF C1               [10] 4130 	pop	bc
                                   4131 ;src\/Graphics.h:459: DrawLine(line + 2);
      0011D0 04               [ 4] 4132 	inc	b
      0011D1 04               [ 4] 4133 	inc	b
      0011D2 C5               [11] 4134 	push	bc
      0011D3 33               [ 6] 4135 	inc	sp
      0011D4 CDr7Er11         [17] 4136 	call	_DrawLine
      0011D7 33               [ 6] 4137 	inc	sp
                                   4138 ;src\/Graphics.h:460: }
      0011D8 C9               [10] 4139 	ret
                                   4140 ;src\/Graphics.h:462: void DrawPlayfield() {
                                   4141 ;	---------------------------------
                                   4142 ; Function DrawPlayfield
                                   4143 ; ---------------------------------
      0011D9                       4144 _DrawPlayfield::
                                   4145 ;src\/Graphics.h:463: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011D9 06 00            [ 7] 4146 	ld	b, #0x00
      0011DB                       4147 00103$:
      0011DB 78               [ 4] 4148 	ld	a, b
      0011DC D6 0C            [ 7] 4149 	sub	a, #0x0c
      0011DE D0               [11] 4150 	ret	NC
                                   4151 ;src\/Graphics.h:464: DrawLine(line);
      0011DF C5               [11] 4152 	push	bc
      0011E0 C5               [11] 4153 	push	bc
      0011E1 33               [ 6] 4154 	inc	sp
      0011E2 CDr7Er11         [17] 4155 	call	_DrawLine
      0011E5 33               [ 6] 4156 	inc	sp
      0011E6 C1               [10] 4157 	pop	bc
                                   4158 ;src\/Graphics.h:463: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011E7 04               [ 4] 4159 	inc	b
                                   4160 ;src\/Graphics.h:466: }
      0011E8 18 F1            [12] 4161 	jr	00103$
                                   4162 ;src\/Sound.h:1: void SoundFx_2() {
                                   4163 ;	---------------------------------
                                   4164 ; Function SoundFx_2
                                   4165 ; ---------------------------------
      0011EA                       4166 _SoundFx_2::
                                   4167 ;src\/Sound.h:2: GICINI();
      0011EA CDr00r00         [17] 4168 	call	_GICINI
                                   4169 ;src\/Sound.h:17: WRTPSG(0x0f08);
      0011ED 21 08 0F         [10] 4170 	ld	hl, #0x0f08
      0011F0 CDr00r00         [17] 4171 	call	_WRTPSG
                                   4172 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0011F3 0E 00            [ 7] 4173 	ld	c, #0x00
      0011F5                       4174 00104$:
      0011F5 79               [ 4] 4175 	ld	a, c
      0011F6 D6 FF            [ 7] 4176 	sub	a, #0xff
      0011F8 30 11            [12] 4177 	jr	NC, 00101$
                                   4178 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0011FA C5               [11] 4179 	push	bc
      0011FB 21 00 5D         [10] 4180 	ld	hl, #0x5d00
      0011FE CDr00r00         [17] 4181 	call	_WRTPSG
      001201 21 01 00         [10] 4182 	ld	hl, #0x0001
      001204 CDr00r00         [17] 4183 	call	_WRTPSG
      001207 C1               [10] 4184 	pop	bc
                                   4185 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001208 0C               [ 4] 4186 	inc	c
      001209 18 EA            [12] 4187 	jr	00104$
      00120B                       4188 00101$:
                                   4189 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      00120B 0E 00            [ 7] 4190 	ld	c, #0x00
      00120D                       4191 00107$:
      00120D 79               [ 4] 4192 	ld	a, c
      00120E D6 FF            [ 7] 4193 	sub	a, #0xff
      001210 30 11            [12] 4194 	jr	NC, 00102$
                                   4195 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001212 C5               [11] 4196 	push	bc
      001213 21 00 2D         [10] 4197 	ld	hl, #0x2d00
      001216 CDr00r00         [17] 4198 	call	_WRTPSG
      001219 21 01 00         [10] 4199 	ld	hl, #0x0001
      00121C CDr00r00         [17] 4200 	call	_WRTPSG
      00121F C1               [10] 4201 	pop	bc
                                   4202 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001220 0C               [ 4] 4203 	inc	c
      001221 18 EA            [12] 4204 	jr	00107$
      001223                       4205 00102$:
                                   4206 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001223 21 08 00         [10] 4207 	ld	hl, #0x0008
                                   4208 ;src\/Sound.h:30: }
      001226 C3r00r00         [10] 4209 	jp	_WRTPSG
                                   4210 ;src\/Sound.h:32: void SoundFx_1() {
                                   4211 ;	---------------------------------
                                   4212 ; Function SoundFx_1
                                   4213 ; ---------------------------------
      001229                       4214 _SoundFx_1::
                                   4215 ;src\/Sound.h:34: GICINI();
      001229 CDr00r00         [17] 4216 	call	_GICINI
                                   4217 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      00122C 21 06 97         [10] 4218 	ld	hl, #0x9706
      00122F CDr00r00         [17] 4219 	call	_WRTPSG
                                   4220 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      001232 21 07 81         [10] 4221 	ld	hl, #0x8107
      001235 CDr00r00         [17] 4222 	call	_WRTPSG
                                   4223 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001238 21 08 10         [10] 4224 	ld	hl, #0x1008
      00123B CDr00r00         [17] 4225 	call	_WRTPSG
                                   4226 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      00123E 21 0C 13         [10] 4227 	ld	hl, #0x130c
      001241 CDr00r00         [17] 4228 	call	_WRTPSG
                                   4229 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001244 21 0D 01         [10] 4230 	ld	hl, #0x010d
                                   4231 ;src\/Sound.h:49: }
      001247 C3r00r00         [10] 4232 	jp	_WRTPSG
                                   4233 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   4234 ;	---------------------------------
                                   4235 ; Function CheckIfPlayfieldIsValid
                                   4236 ; ---------------------------------
      00124A                       4237 _CheckIfPlayfieldIsValid::
      00124A DD E5            [15] 4238 	push	ix
      00124C DD 21 00 00      [14] 4239 	ld	ix,#0
      001250 DD 39            [15] 4240 	add	ix,sp
      001252 F5               [11] 4241 	push	af
      001253 F5               [11] 4242 	push	af
      001254 3B               [ 6] 4243 	dec	sp
                                   4244 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      001255 DD 36 FB 00      [19] 4245 	ld	-5 (ix), #0
                                   4246 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001259 DD 36 FC 00      [19] 4247 	ld	-4 (ix), #0
      00125D DD 36 FE 00      [19] 4248 	ld	-2 (ix), #0
      001261                       4249 00119$:
      001261 DD 7E FE         [19] 4250 	ld	a, -2 (ix)
      001264 D6 0C            [ 7] 4251 	sub	a, #0x0c
      001266 D2rF9r12         [10] 4252 	jp	NC, 00121$
                                   4253 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001269 DD 36 FD 00      [19] 4254 	ld	-3 (ix), #0
      00126D DD 36 FF 00      [19] 4255 	ld	-1 (ix), #0
      001271                       4256 00116$:
      001271 DD 7E FF         [19] 4257 	ld	a, -1 (ix)
      001274 D6 06            [ 7] 4258 	sub	a, #0x06
      001276 30 75            [12] 4259 	jr	NC, 00120$
                                   4260 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001278 0E 00            [ 7] 4261 	ld	c, #0x00
      00127A                       4262 00113$:
      00127A 79               [ 4] 4263 	ld	a, c
      00127B D6 05            [ 7] 4264 	sub	a, #0x05
      00127D 30 33            [12] 4265 	jr	NC, 00104$
                                   4266 ;src\/CheckPlayfield.h:7: found = FALSE;
      00127F DD 36 FB 00      [19] 4267 	ld	-5 (ix), #0
                                   4268 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001283 DD 5E FF         [19] 4269 	ld	e, -1 (ix)
      001286 16 00            [ 7] 4270 	ld	d, #0x00
      001288 6B               [ 4] 4271 	ld	l, e
      001289 62               [ 4] 4272 	ld	h, d
      00128A 29               [11] 4273 	add	hl, hl
      00128B 19               [11] 4274 	add	hl, de
      00128C 29               [11] 4275 	add	hl, hl
      00128D 29               [11] 4276 	add	hl, hl
      00128E 11r48r00         [10] 4277 	ld	de, #_playfieldTemp
      001291 19               [11] 4278 	add	hl, de
      001292 7D               [ 4] 4279 	ld	a, l
      001293 DD 86 FE         [19] 4280 	add	a, -2 (ix)
      001296 5F               [ 4] 4281 	ld	e, a
      001297 7C               [ 4] 4282 	ld	a, h
      001298 CE 00            [ 7] 4283 	adc	a, #0x00
      00129A 57               [ 4] 4284 	ld	d, a
      00129B 21r18r00         [10] 4285 	ld	hl, #_pieces
      00129E 06 00            [ 7] 4286 	ld	b, #0x00
      0012A0 09               [11] 4287 	add	hl, bc
      0012A1 46               [ 7] 4288 	ld	b, (hl)
      0012A2 1A               [ 7] 4289 	ld	a, (de)
      0012A3 B8               [ 4] 4290 	cp	a, b
      0012A4 28 03            [12] 4291 	jr	Z, 00101$
      0012A6 B7               [ 4] 4292 	or	a, a
      0012A7 20 06            [12] 4293 	jr	NZ, 00114$
      0012A9                       4294 00101$:
                                   4295 ;src\/CheckPlayfield.h:9: found = TRUE;
      0012A9 DD 36 FB 01      [19] 4296 	ld	-5 (ix), #0x01
                                   4297 ;src\/CheckPlayfield.h:10: break;
      0012AD 18 03            [12] 4298 	jr	00104$
      0012AF                       4299 00114$:
                                   4300 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      0012AF 0C               [ 4] 4301 	inc	c
      0012B0 18 C8            [12] 4302 	jr	00113$
      0012B2                       4303 00104$:
                                   4304 ;src\/CheckPlayfield.h:13: if(!found) {
      0012B2 DD 7E FB         [19] 4305 	ld	a, -5 (ix)
      0012B5 B7               [ 4] 4306 	or	a, a
      0012B6 20 2A            [12] 4307 	jr	NZ, 00117$
                                   4308 ;src\/CheckPlayfield.h:14: d_col = col;
      0012B8 DD 7E FD         [19] 4309 	ld	a, -3 (ix)
      0012BB 32r09r00         [13] 4310 	ld	(#_d_col),a
                                   4311 ;src\/CheckPlayfield.h:15: d_line = line;
      0012BE DD 7E FC         [19] 4312 	ld	a, -4 (ix)
      0012C1 32r0Ar00         [13] 4313 	ld	(#_d_line),a
                                   4314 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      0012C4 DD 4E FD         [19] 4315 	ld	c, -3 (ix)
      0012C7 06 00            [ 7] 4316 	ld	b, #0x00
      0012C9 69               [ 4] 4317 	ld	l, c
      0012CA 60               [ 4] 4318 	ld	h, b
      0012CB 29               [11] 4319 	add	hl, hl
      0012CC 09               [11] 4320 	add	hl, bc
      0012CD 29               [11] 4321 	add	hl, hl
      0012CE 29               [11] 4322 	add	hl, hl
      0012CF 11r48r00         [10] 4323 	ld	de, #_playfieldTemp
      0012D2 19               [11] 4324 	add	hl, de
      0012D3 DD 5E FC         [19] 4325 	ld	e, -4 (ix)
      0012D6 16 00            [ 7] 4326 	ld	d, #0x00
      0012D8 19               [11] 4327 	add	hl, de
      0012D9 7E               [ 7] 4328 	ld	a, (hl)
      0012DA 32r0Br00         [13] 4329 	ld	(_d_value+0), a
                                   4330 ;src\/CheckPlayfield.h:18: while(1) { 
      0012DD                       4331 00106$:
                                   4332 ;src\/CheckPlayfield.h:19: BEEP();
      0012DD CDr00r00         [17] 4333 	call	_BEEP
      0012E0 18 FB            [12] 4334 	jr	00106$
      0012E2                       4335 00117$:
                                   4336 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0012E2 DD 34 FF         [23] 4337 	inc	-1 (ix)
      0012E5 DD 7E FF         [19] 4338 	ld	a, -1 (ix)
      0012E8 DD 77 FD         [19] 4339 	ld	-3 (ix), a
      0012EB 18 84            [12] 4340 	jr	00116$
      0012ED                       4341 00120$:
                                   4342 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0012ED DD 34 FE         [23] 4343 	inc	-2 (ix)
      0012F0 DD 7E FE         [19] 4344 	ld	a, -2 (ix)
      0012F3 DD 77 FC         [19] 4345 	ld	-4 (ix), a
      0012F6 C3r61r12         [10] 4346 	jp	00119$
      0012F9                       4347 00121$:
                                   4348 ;src\/CheckPlayfield.h:25: }
      0012F9 DD F9            [10] 4349 	ld	sp, ix
      0012FB DD E1            [14] 4350 	pop	ix
      0012FD C9               [10] 4351 	ret
                                   4352 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4353 ;	---------------------------------
                                   4354 ; Function CheckPlayfield
                                   4355 ; ---------------------------------
      0012FE                       4356 _CheckPlayfield::
      0012FE DD E5            [15] 4357 	push	ix
      001300 DD 21 00 00      [14] 4358 	ld	ix,#0
      001304 DD 39            [15] 4359 	add	ix,sp
      001306 21 EF FF         [10] 4360 	ld	hl, #-17
      001309 39               [11] 4361 	add	hl, sp
      00130A F9               [ 6] 4362 	ld	sp, hl
                                   4363 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      00130B DD 36 EF 00      [19] 4364 	ld	-17 (ix), #0
                                   4365 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00130F 0E 00            [ 7] 4366 	ld	c, #0x00
      001311                       4367 00195$:
      001311 79               [ 4] 4368 	ld	a, c
      001312 D6 0C            [ 7] 4369 	sub	a, #0x0c
      001314 30 36            [12] 4370 	jr	NC, 00102$
                                   4371 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001316 DD 36 FF 00      [19] 4372 	ld	-1 (ix), #0
      00131A                       4373 00192$:
      00131A DD 7E FF         [19] 4374 	ld	a, -1 (ix)
      00131D D6 06            [ 7] 4375 	sub	a, #0x06
      00131F 30 28            [12] 4376 	jr	NC, 00196$
                                   4377 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      001321 DD 5E FF         [19] 4378 	ld	e, -1 (ix)
      001324 16 00            [ 7] 4379 	ld	d, #0x00
      001326 6B               [ 4] 4380 	ld	l, e
      001327 62               [ 4] 4381 	ld	h, d
      001328 29               [11] 4382 	add	hl, hl
      001329 19               [11] 4383 	add	hl, de
      00132A 29               [11] 4384 	add	hl, hl
      00132B 29               [11] 4385 	add	hl, hl
      00132C EB               [ 4] 4386 	ex	de, hl
      00132D 21r48r00         [10] 4387 	ld	hl, #_playfieldTemp
      001330 19               [11] 4388 	add	hl, de
      001331 06 00            [ 7] 4389 	ld	b, #0x00
      001333 09               [11] 4390 	add	hl, bc
      001334 3Er00            [ 7] 4391 	ld	a, #<(_playfield)
      001336 83               [ 4] 4392 	add	a, e
      001337 5F               [ 4] 4393 	ld	e, a
      001338 3Es00            [ 7] 4394 	ld	a, #>(_playfield)
      00133A 8A               [ 4] 4395 	adc	a, d
      00133B 57               [ 4] 4396 	ld	d, a
      00133C 7B               [ 4] 4397 	ld	a, e
      00133D 81               [ 4] 4398 	add	a, c
      00133E 5F               [ 4] 4399 	ld	e, a
      00133F 30 01            [12] 4400 	jr	NC, 00614$
      001341 14               [ 4] 4401 	inc	d
      001342                       4402 00614$:
      001342 1A               [ 7] 4403 	ld	a, (de)
      001343 77               [ 7] 4404 	ld	(hl), a
                                   4405 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001344 DD 34 FF         [23] 4406 	inc	-1 (ix)
      001347 18 D1            [12] 4407 	jr	00192$
      001349                       4408 00196$:
                                   4409 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001349 0C               [ 4] 4410 	inc	c
      00134A 18 C5            [12] 4411 	jr	00195$
      00134C                       4412 00102$:
                                   4413 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00134C DD 36 FE 00      [19] 4414 	ld	-2 (ix), #0
      001350                       4415 00201$:
      001350 DD 7E FE         [19] 4416 	ld	a, -2 (ix)
      001353 D6 0C            [ 7] 4417 	sub	a, #0x0c
      001355 D2r54r14         [10] 4418 	jp	NC, 00108$
                                   4419 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001358 DD 36 FF 02      [19] 4420 	ld	-1 (ix), #0x02
      00135C                       4421 00198$:
      00135C DD 7E FF         [19] 4422 	ld	a, -1 (ix)
      00135F D6 06            [ 7] 4423 	sub	a, #0x06
      001361 D2r4Er14         [10] 4424 	jp	NC, 00202$
                                   4425 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      001364 DD 4E FF         [19] 4426 	ld	c, -1 (ix)
      001367 06 00            [ 7] 4427 	ld	b, #0x00
      001369 69               [ 4] 4428 	ld	l, c
      00136A 60               [ 4] 4429 	ld	h, b
      00136B 29               [11] 4430 	add	hl, hl
      00136C 09               [11] 4431 	add	hl, bc
      00136D 29               [11] 4432 	add	hl, hl
      00136E 29               [11] 4433 	add	hl, hl
      00136F DD 75 F5         [19] 4434 	ld	-11 (ix), l
      001372 DD 74 F6         [19] 4435 	ld	-10 (ix), h
      001375 3Er48            [ 7] 4436 	ld	a, #<(_playfieldTemp)
      001377 DD 86 F5         [19] 4437 	add	a, -11 (ix)
      00137A 4F               [ 4] 4438 	ld	c, a
      00137B 3Es00            [ 7] 4439 	ld	a, #>(_playfieldTemp)
      00137D DD 8E F6         [19] 4440 	adc	a, -10 (ix)
      001380 47               [ 4] 4441 	ld	b, a
      001381 79               [ 4] 4442 	ld	a, c
      001382 DD 86 FE         [19] 4443 	add	a, -2 (ix)
      001385 DD 77 F7         [19] 4444 	ld	-9 (ix), a
      001388 78               [ 4] 4445 	ld	a, b
      001389 CE 00            [ 7] 4446 	adc	a, #0x00
      00138B DD 77 F8         [19] 4447 	ld	-8 (ix), a
      00138E DD 6E F7         [19] 4448 	ld	l, -9 (ix)
      001391 DD 66 F8         [19] 4449 	ld	h, -8 (ix)
      001394 7E               [ 7] 4450 	ld	a, (hl)
      001395 DD 77 F9         [19] 4451 	ld	-7 (ix), a
      001398 B7               [ 4] 4452 	or	a, a
      001399 CAr48r14         [10] 4453 	jp	Z, 00199$
                                   4454 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      00139C DD 7E FF         [19] 4455 	ld	a, -1 (ix)
      00139F DD 77 FD         [19] 4456 	ld	-3 (ix), a
      0013A2 4F               [ 4] 4457 	ld	c, a
      0013A3 0D               [ 4] 4458 	dec	c
      0013A4 0D               [ 4] 4459 	dec	c
      0013A5 79               [ 4] 4460 	ld	a, c
      0013A6 07               [ 4] 4461 	rlca
      0013A7 9F               [ 4] 4462 	sbc	a, a
      0013A8 47               [ 4] 4463 	ld	b, a
      0013A9 69               [ 4] 4464 	ld	l, c
      0013AA 60               [ 4] 4465 	ld	h, b
      0013AB 29               [11] 4466 	add	hl, hl
      0013AC 09               [11] 4467 	add	hl, bc
      0013AD 29               [11] 4468 	add	hl, hl
      0013AE 29               [11] 4469 	add	hl, hl
      0013AF EB               [ 4] 4470 	ex	de, hl
      0013B0 21r48r00         [10] 4471 	ld	hl, #_playfieldTemp
      0013B3 19               [11] 4472 	add	hl, de
      0013B4 7D               [ 4] 4473 	ld	a, l
      0013B5 DD 86 FE         [19] 4474 	add	a, -2 (ix)
      0013B8 DD 77 FA         [19] 4475 	ld	-6 (ix), a
      0013BB 7C               [ 4] 4476 	ld	a, h
      0013BC CE 00            [ 7] 4477 	adc	a, #0x00
      0013BE DD 77 FB         [19] 4478 	ld	-5 (ix), a
      0013C1 DD 4E FD         [19] 4479 	ld	c, -3 (ix)
      0013C4 0D               [ 4] 4480 	dec	c
      0013C5 79               [ 4] 4481 	ld	a, c
      0013C6 07               [ 4] 4482 	rlca
      0013C7 9F               [ 4] 4483 	sbc	a, a
      0013C8 47               [ 4] 4484 	ld	b, a
      0013C9 69               [ 4] 4485 	ld	l, c
      0013CA 60               [ 4] 4486 	ld	h, b
      0013CB 29               [11] 4487 	add	hl, hl
      0013CC 09               [11] 4488 	add	hl, bc
      0013CD 29               [11] 4489 	add	hl, hl
      0013CE 29               [11] 4490 	add	hl, hl
      0013CF DD 75 FC         [19] 4491 	ld	-4 (ix), l
      0013D2 DD 74 FD         [19] 4492 	ld	-3 (ix), h
      0013D5 3Er48            [ 7] 4493 	ld	a, #<(_playfieldTemp)
      0013D7 DD 86 FC         [19] 4494 	add	a, -4 (ix)
      0013DA 4F               [ 4] 4495 	ld	c, a
      0013DB 3Es00            [ 7] 4496 	ld	a, #>(_playfieldTemp)
      0013DD DD 8E FD         [19] 4497 	adc	a, -3 (ix)
      0013E0 47               [ 4] 4498 	ld	b, a
      0013E1 79               [ 4] 4499 	ld	a, c
      0013E2 DD 86 FE         [19] 4500 	add	a, -2 (ix)
      0013E5 4F               [ 4] 4501 	ld	c, a
      0013E6 30 01            [12] 4502 	jr	NC, 00615$
      0013E8 04               [ 4] 4503 	inc	b
      0013E9                       4504 00615$:
      0013E9 DD 6E FA         [19] 4505 	ld	l, -6 (ix)
      0013EC DD 66 FB         [19] 4506 	ld	h, -5 (ix)
      0013EF 6E               [ 7] 4507 	ld	l, (hl)
      0013F0 0A               [ 7] 4508 	ld	a, (bc)
      0013F1 67               [ 4] 4509 	ld	h, a
      0013F2 7D               [ 4] 4510 	ld	a, l
      0013F3 94               [ 4] 4511 	sub	a, h
      0013F4 20 52            [12] 4512 	jr	NZ, 00199$
                                   4513 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      0013F6 DD 7E F9         [19] 4514 	ld	a, -7 (ix)
      0013F9 94               [ 4] 4515 	sub	a, h
      0013FA 20 4C            [12] 4516 	jr	NZ, 00199$
                                   4517 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      0013FC DD 36 EF 01      [19] 4518 	ld	-17 (ix), #0x01
                                   4519 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001400 3Er00            [ 7] 4520 	ld	a, #<(_playfield)
      001402 83               [ 4] 4521 	add	a, e
      001403 5F               [ 4] 4522 	ld	e, a
      001404 3Es00            [ 7] 4523 	ld	a, #>(_playfield)
      001406 8A               [ 4] 4524 	adc	a, d
      001407 57               [ 4] 4525 	ld	d, a
      001408 7B               [ 4] 4526 	ld	a, e
      001409 DD 86 FE         [19] 4527 	add	a, -2 (ix)
      00140C 5F               [ 4] 4528 	ld	e, a
      00140D 30 01            [12] 4529 	jr	NC, 00620$
      00140F 14               [ 4] 4530 	inc	d
      001410                       4531 00620$:
      001410 7D               [ 4] 4532 	ld	a, l
      001411 CB FF            [ 8] 4533 	set	7, a
      001413 12               [ 7] 4534 	ld	(de), a
                                   4535 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001414 3Er00            [ 7] 4536 	ld	a, #<(_playfield)
      001416 DD 86 FC         [19] 4537 	add	a, -4 (ix)
      001419 5F               [ 4] 4538 	ld	e, a
      00141A 3Es00            [ 7] 4539 	ld	a, #>(_playfield)
      00141C DD 8E FD         [19] 4540 	adc	a, -3 (ix)
      00141F 57               [ 4] 4541 	ld	d, a
      001420 DD 6E FE         [19] 4542 	ld	l, -2 (ix)
      001423 26 00            [ 7] 4543 	ld	h, #0x00
      001425 19               [11] 4544 	add	hl, de
      001426 0A               [ 7] 4545 	ld	a, (bc)
      001427 CB FF            [ 8] 4546 	set	7, a
      001429 77               [ 7] 4547 	ld	(hl), a
                                   4548 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00142A 3Er00            [ 7] 4549 	ld	a, #<(_playfield)
      00142C DD 86 F5         [19] 4550 	add	a, -11 (ix)
      00142F 4F               [ 4] 4551 	ld	c, a
      001430 3Es00            [ 7] 4552 	ld	a, #>(_playfield)
      001432 DD 8E F6         [19] 4553 	adc	a, -10 (ix)
      001435 47               [ 4] 4554 	ld	b, a
      001436 79               [ 4] 4555 	ld	a, c
      001437 DD 86 FE         [19] 4556 	add	a, -2 (ix)
      00143A 4F               [ 4] 4557 	ld	c, a
      00143B 30 01            [12] 4558 	jr	NC, 00621$
      00143D 04               [ 4] 4559 	inc	b
      00143E                       4560 00621$:
      00143E DD 6E F7         [19] 4561 	ld	l, -9 (ix)
      001441 DD 66 F8         [19] 4562 	ld	h, -8 (ix)
      001444 7E               [ 7] 4563 	ld	a, (hl)
      001445 CB FF            [ 8] 4564 	set	7, a
      001447 02               [ 7] 4565 	ld	(bc), a
      001448                       4566 00199$:
                                   4567 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001448 DD 34 FF         [23] 4568 	inc	-1 (ix)
      00144B C3r5Cr13         [10] 4569 	jp	00198$
      00144E                       4570 00202$:
                                   4571 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00144E DD 34 FE         [23] 4572 	inc	-2 (ix)
      001451 C3r50r13         [10] 4573 	jp	00201$
      001454                       4574 00108$:
                                   4575 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001454 0E 02            [ 7] 4576 	ld	c, #0x02
      001456                       4577 00207$:
      001456 79               [ 4] 4578 	ld	a, c
      001457 D6 0C            [ 7] 4579 	sub	a, #0x0c
      001459 D2r1Br15         [10] 4580 	jp	NC, 00114$
                                   4581 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00145C DD 36 FF 00      [19] 4582 	ld	-1 (ix), #0
      001460                       4583 00204$:
      001460 DD 7E FF         [19] 4584 	ld	a, -1 (ix)
      001463 D6 06            [ 7] 4585 	sub	a, #0x06
      001465 D2r17r15         [10] 4586 	jp	NC, 00208$
                                   4587 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      001468 DD 5E FF         [19] 4588 	ld	e, -1 (ix)
      00146B 16 00            [ 7] 4589 	ld	d, #0x00
      00146D 6B               [ 4] 4590 	ld	l, e
      00146E 62               [ 4] 4591 	ld	h, d
      00146F 29               [11] 4592 	add	hl, hl
      001470 19               [11] 4593 	add	hl, de
      001471 29               [11] 4594 	add	hl, hl
      001472 29               [11] 4595 	add	hl, hl
      001473 DD 75 F7         [19] 4596 	ld	-9 (ix), l
      001476 DD 74 F8         [19] 4597 	ld	-8 (ix), h
      001479 3Er48            [ 7] 4598 	ld	a, #<(_playfieldTemp)
      00147B DD 86 F7         [19] 4599 	add	a, -9 (ix)
      00147E 5F               [ 4] 4600 	ld	e, a
      00147F 3Es00            [ 7] 4601 	ld	a, #>(_playfieldTemp)
      001481 DD 8E F8         [19] 4602 	adc	a, -8 (ix)
      001484 57               [ 4] 4603 	ld	d, a
      001485 7B               [ 4] 4604 	ld	a, e
      001486 81               [ 4] 4605 	add	a, c
      001487 DD 77 F9         [19] 4606 	ld	-7 (ix), a
      00148A 7A               [ 4] 4607 	ld	a, d
      00148B CE 00            [ 7] 4608 	adc	a, #0x00
      00148D DD 77 FA         [19] 4609 	ld	-6 (ix), a
      001490 DD 6E F9         [19] 4610 	ld	l, -7 (ix)
      001493 DD 66 FA         [19] 4611 	ld	h, -6 (ix)
      001496 7E               [ 7] 4612 	ld	a, (hl)
      001497 DD 77 FE         [19] 4613 	ld	-2 (ix), a
      00149A B7               [ 4] 4614 	or	a, a
      00149B 28 74            [12] 4615 	jr	Z, 00205$
                                   4616 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      00149D DD 71 FD         [19] 4617 	ld	-3 (ix), c
      0014A0 79               [ 4] 4618 	ld	a, c
      0014A1 C6 FE            [ 7] 4619 	add	a, #0xfe
      0014A3 DD 77 FB         [19] 4620 	ld	-5 (ix), a
      0014A6 6F               [ 4] 4621 	ld	l, a
      0014A7 26 00            [ 7] 4622 	ld	h, #0x00
      0014A9 19               [11] 4623 	add	hl, de
      0014AA DD 46 FD         [19] 4624 	ld	b, -3 (ix)
      0014AD 05               [ 4] 4625 	dec	b
      0014AE 7B               [ 4] 4626 	ld	a, e
      0014AF 80               [ 4] 4627 	add	a, b
      0014B0 5F               [ 4] 4628 	ld	e, a
      0014B1 30 01            [12] 4629 	jr	NC, 00622$
      0014B3 14               [ 4] 4630 	inc	d
      0014B4                       4631 00622$:
      0014B4 7E               [ 7] 4632 	ld	a, (hl)
      0014B5 DD 77 FC         [19] 4633 	ld	-4 (ix), a
      0014B8 1A               [ 7] 4634 	ld	a, (de)
      0014B9 6F               [ 4] 4635 	ld	l, a
      0014BA DD 7E FC         [19] 4636 	ld	a, -4 (ix)
      0014BD 95               [ 4] 4637 	sub	a, l
      0014BE 20 51            [12] 4638 	jr	NZ, 00205$
                                   4639 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      0014C0 DD 7E FE         [19] 4640 	ld	a, -2 (ix)
      0014C3 95               [ 4] 4641 	sub	a, l
      0014C4 20 4B            [12] 4642 	jr	NZ, 00205$
                                   4643 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      0014C6 DD 36 EF 01      [19] 4644 	ld	-17 (ix), #0x01
                                   4645 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0014CA 3Er00            [ 7] 4646 	ld	a, #<(_playfield)
      0014CC DD 86 F7         [19] 4647 	add	a, -9 (ix)
      0014CF DD 77 FD         [19] 4648 	ld	-3 (ix), a
      0014D2 3Es00            [ 7] 4649 	ld	a, #>(_playfield)
      0014D4 DD 8E F8         [19] 4650 	adc	a, -8 (ix)
      0014D7 DD 77 FE         [19] 4651 	ld	-2 (ix), a
      0014DA DD 7E FD         [19] 4652 	ld	a, -3 (ix)
      0014DD DD 86 FB         [19] 4653 	add	a, -5 (ix)
      0014E0 6F               [ 4] 4654 	ld	l, a
      0014E1 DD 7E FE         [19] 4655 	ld	a, -2 (ix)
      0014E4 CE 00            [ 7] 4656 	adc	a, #0x00
      0014E6 67               [ 4] 4657 	ld	h, a
      0014E7 DD 7E FC         [19] 4658 	ld	a, -4 (ix)
      0014EA CB FF            [ 8] 4659 	set	7, a
      0014EC 77               [ 7] 4660 	ld	(hl), a
                                   4661 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      0014ED DD 7E FD         [19] 4662 	ld	a, -3 (ix)
      0014F0 80               [ 4] 4663 	add	a, b
      0014F1 6F               [ 4] 4664 	ld	l, a
      0014F2 DD 7E FE         [19] 4665 	ld	a, -2 (ix)
      0014F5 CE 00            [ 7] 4666 	adc	a, #0x00
      0014F7 67               [ 4] 4667 	ld	h, a
      0014F8 1A               [ 7] 4668 	ld	a, (de)
      0014F9 CB FF            [ 8] 4669 	set	7, a
      0014FB 77               [ 7] 4670 	ld	(hl), a
                                   4671 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0014FC DD 7E FD         [19] 4672 	ld	a, -3 (ix)
      0014FF 81               [ 4] 4673 	add	a, c
      001500 5F               [ 4] 4674 	ld	e, a
      001501 DD 7E FE         [19] 4675 	ld	a, -2 (ix)
      001504 CE 00            [ 7] 4676 	adc	a, #0x00
      001506 57               [ 4] 4677 	ld	d, a
      001507 DD 6E F9         [19] 4678 	ld	l, -7 (ix)
      00150A DD 66 FA         [19] 4679 	ld	h, -6 (ix)
      00150D 7E               [ 7] 4680 	ld	a, (hl)
      00150E CB FF            [ 8] 4681 	set	7, a
      001510 12               [ 7] 4682 	ld	(de), a
      001511                       4683 00205$:
                                   4684 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001511 DD 34 FF         [23] 4685 	inc	-1 (ix)
      001514 C3r60r14         [10] 4686 	jp	00204$
      001517                       4687 00208$:
                                   4688 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001517 0C               [ 4] 4689 	inc	c
      001518 C3r56r14         [10] 4690 	jp	00207$
      00151B                       4691 00114$:
                                   4692 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00151B DD 36 FE 02      [19] 4693 	ld	-2 (ix), #0x02
      00151F                       4694 00213$:
      00151F DD 7E FE         [19] 4695 	ld	a, -2 (ix)
      001522 D6 0C            [ 7] 4696 	sub	a, #0x0c
      001524 D2rC2r16         [10] 4697 	jp	NC, 00124$
                                   4698 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001527 DD 36 FF 02      [19] 4699 	ld	-1 (ix), #0x02
      00152B                       4700 00210$:
      00152B DD 7E FF         [19] 4701 	ld	a, -1 (ix)
      00152E D6 06            [ 7] 4702 	sub	a, #0x06
      001530 D2rBCr16         [10] 4703 	jp	NC, 00214$
                                   4704 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      001533 DD 4E FF         [19] 4705 	ld	c, -1 (ix)
      001536 06 00            [ 7] 4706 	ld	b, #0x00
      001538 69               [ 4] 4707 	ld	l, c
      001539 60               [ 4] 4708 	ld	h, b
      00153A 29               [11] 4709 	add	hl, hl
      00153B 09               [11] 4710 	add	hl, bc
      00153C 29               [11] 4711 	add	hl, hl
      00153D 29               [11] 4712 	add	hl, hl
      00153E DD 75 F0         [19] 4713 	ld	-16 (ix), l
      001541 DD 74 F1         [19] 4714 	ld	-15 (ix), h
      001544 3Er48            [ 7] 4715 	ld	a, #<(_playfieldTemp)
      001546 DD 86 F0         [19] 4716 	add	a, -16 (ix)
      001549 4F               [ 4] 4717 	ld	c, a
      00154A 3Es00            [ 7] 4718 	ld	a, #>(_playfieldTemp)
      00154C DD 8E F1         [19] 4719 	adc	a, -15 (ix)
      00154F 47               [ 4] 4720 	ld	b, a
      001550 79               [ 4] 4721 	ld	a, c
      001551 DD 86 FE         [19] 4722 	add	a, -2 (ix)
      001554 DD 77 F2         [19] 4723 	ld	-14 (ix), a
      001557 78               [ 4] 4724 	ld	a, b
      001558 CE 00            [ 7] 4725 	adc	a, #0x00
      00155A DD 77 F3         [19] 4726 	ld	-13 (ix), a
      00155D DD 6E F2         [19] 4727 	ld	l, -14 (ix)
      001560 DD 66 F3         [19] 4728 	ld	h, -13 (ix)
      001563 5E               [ 7] 4729 	ld	e, (hl)
                                   4730 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001564 DD 56 FF         [19] 4731 	ld	d, -1 (ix)
      001567 DD 66 FE         [19] 4732 	ld	h, -2 (ix)
      00156A 6A               [ 4] 4733 	ld	l, d
      00156B 2D               [ 4] 4734 	dec	l
      00156C 2D               [ 4] 4735 	dec	l
      00156D 7C               [ 4] 4736 	ld	a, h
      00156E C6 FE            [ 7] 4737 	add	a, #0xfe
      001570 DD 77 F4         [19] 4738 	ld	-12 (ix), a
      001573 15               [ 4] 4739 	dec	d
      001574 7C               [ 4] 4740 	ld	a, h
      001575 C6 FF            [ 7] 4741 	add	a, #0xff
      001577 DD 77 F5         [19] 4742 	ld	-11 (ix), a
      00157A D5               [11] 4743 	push	de
      00157B 5D               [ 4] 4744 	ld	e, l
      00157C 7B               [ 4] 4745 	ld	a, e
      00157D 07               [ 4] 4746 	rlca
      00157E 9F               [ 4] 4747 	sbc	a, a
      00157F 57               [ 4] 4748 	ld	d, a
      001580 6B               [ 4] 4749 	ld	l, e
      001581 62               [ 4] 4750 	ld	h, d
      001582 29               [11] 4751 	add	hl, hl
      001583 19               [11] 4752 	add	hl, de
      001584 29               [11] 4753 	add	hl, hl
      001585 29               [11] 4754 	add	hl, hl
      001586 D1               [10] 4755 	pop	de
      001587 DD 75 F6         [19] 4756 	ld	-10 (ix), l
      00158A DD 74 F7         [19] 4757 	ld	-9 (ix), h
      00158D D5               [11] 4758 	push	de
      00158E 5A               [ 4] 4759 	ld	e, d
      00158F 7B               [ 4] 4760 	ld	a, e
      001590 07               [ 4] 4761 	rlca
      001591 9F               [ 4] 4762 	sbc	a, a
      001592 57               [ 4] 4763 	ld	d, a
      001593 6B               [ 4] 4764 	ld	l, e
      001594 62               [ 4] 4765 	ld	h, d
      001595 29               [11] 4766 	add	hl, hl
      001596 19               [11] 4767 	add	hl, de
      001597 29               [11] 4768 	add	hl, hl
      001598 29               [11] 4769 	add	hl, hl
      001599 D1               [10] 4770 	pop	de
      00159A DD 75 F8         [19] 4771 	ld	-8 (ix), l
      00159D DD 74 F9         [19] 4772 	ld	-7 (ix), h
      0015A0 3Er48            [ 7] 4773 	ld	a, #<(_playfieldTemp)
      0015A2 DD 86 F6         [19] 4774 	add	a, -10 (ix)
      0015A5 DD 77 FA         [19] 4775 	ld	-6 (ix), a
      0015A8 3Es00            [ 7] 4776 	ld	a, #>(_playfieldTemp)
      0015AA DD 8E F7         [19] 4777 	adc	a, -9 (ix)
      0015AD DD 77 FB         [19] 4778 	ld	-5 (ix), a
      0015B0 3Er48            [ 7] 4779 	ld	a, #<(_playfieldTemp)
      0015B2 DD 86 F8         [19] 4780 	add	a, -8 (ix)
      0015B5 57               [ 4] 4781 	ld	d, a
      0015B6 3Es00            [ 7] 4782 	ld	a, #>(_playfieldTemp)
      0015B8 DD 8E F9         [19] 4783 	adc	a, -7 (ix)
      0015BB 6F               [ 4] 4784 	ld	l, a
      0015BC 7A               [ 4] 4785 	ld	a, d
      0015BD DD 86 F5         [19] 4786 	add	a, -11 (ix)
      0015C0 DD 77 FC         [19] 4787 	ld	-4 (ix), a
      0015C3 7D               [ 4] 4788 	ld	a, l
      0015C4 CE 00            [ 7] 4789 	adc	a, #0x00
      0015C6 DD 77 FD         [19] 4790 	ld	-3 (ix), a
                                   4791 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0015C9 7B               [ 4] 4792 	ld	a, e
      0015CA B7               [ 4] 4793 	or	a, a
      0015CB 28 74            [12] 4794 	jr	Z, 00116$
                                   4795 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0015CD DD 7E FA         [19] 4796 	ld	a, -6 (ix)
      0015D0 DD 86 F4         [19] 4797 	add	a, -12 (ix)
      0015D3 6F               [ 4] 4798 	ld	l, a
      0015D4 DD 7E FB         [19] 4799 	ld	a, -5 (ix)
      0015D7 CE 00            [ 7] 4800 	adc	a, #0x00
      0015D9 67               [ 4] 4801 	ld	h, a
      0015DA 56               [ 7] 4802 	ld	d, (hl)
      0015DB DD 6E FC         [19] 4803 	ld	l, -4 (ix)
      0015DE DD 66 FD         [19] 4804 	ld	h, -3 (ix)
      0015E1 6E               [ 7] 4805 	ld	l, (hl)
      0015E2 7A               [ 4] 4806 	ld	a, d
      0015E3 95               [ 4] 4807 	sub	a, l
      0015E4 20 5B            [12] 4808 	jr	NZ, 00116$
                                   4809 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      0015E6 7B               [ 4] 4810 	ld	a, e
      0015E7 95               [ 4] 4811 	sub	a, l
      0015E8 20 57            [12] 4812 	jr	NZ, 00116$
                                   4813 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      0015EA DD 36 EF 01      [19] 4814 	ld	-17 (ix), #0x01
                                   4815 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      0015EE 3Er00            [ 7] 4816 	ld	a, #<(_playfield)
      0015F0 DD 86 F6         [19] 4817 	add	a, -10 (ix)
      0015F3 5F               [ 4] 4818 	ld	e, a
      0015F4 3Es00            [ 7] 4819 	ld	a, #>(_playfield)
      0015F6 DD 8E F7         [19] 4820 	adc	a, -9 (ix)
      0015F9 67               [ 4] 4821 	ld	h, a
      0015FA 7B               [ 4] 4822 	ld	a, e
      0015FB DD 86 F4         [19] 4823 	add	a, -12 (ix)
      0015FE 6F               [ 4] 4824 	ld	l, a
      0015FF 30 01            [12] 4825 	jr	NC, 00631$
      001601 24               [ 4] 4826 	inc	h
      001602                       4827 00631$:
      001602 CB FA            [ 8] 4828 	set	7, d
      001604 72               [ 7] 4829 	ld	(hl), d
                                   4830 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001605 3Er00            [ 7] 4831 	ld	a, #<(_playfield)
      001607 DD 86 F8         [19] 4832 	add	a, -8 (ix)
      00160A 5F               [ 4] 4833 	ld	e, a
      00160B 3Es00            [ 7] 4834 	ld	a, #>(_playfield)
      00160D DD 8E F9         [19] 4835 	adc	a, -7 (ix)
      001610 57               [ 4] 4836 	ld	d, a
      001611 7B               [ 4] 4837 	ld	a, e
      001612 DD 86 F5         [19] 4838 	add	a, -11 (ix)
      001615 5F               [ 4] 4839 	ld	e, a
      001616 30 01            [12] 4840 	jr	NC, 00632$
      001618 14               [ 4] 4841 	inc	d
      001619                       4842 00632$:
      001619 DD 6E FC         [19] 4843 	ld	l, -4 (ix)
      00161C DD 66 FD         [19] 4844 	ld	h, -3 (ix)
      00161F 7E               [ 7] 4845 	ld	a, (hl)
      001620 CB FF            [ 8] 4846 	set	7, a
      001622 12               [ 7] 4847 	ld	(de), a
                                   4848 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001623 3Er00            [ 7] 4849 	ld	a, #<(_playfield)
      001625 DD 86 F0         [19] 4850 	add	a, -16 (ix)
      001628 5F               [ 4] 4851 	ld	e, a
      001629 3Es00            [ 7] 4852 	ld	a, #>(_playfield)
      00162B DD 8E F1         [19] 4853 	adc	a, -15 (ix)
      00162E 57               [ 4] 4854 	ld	d, a
      00162F 7B               [ 4] 4855 	ld	a, e
      001630 DD 86 FE         [19] 4856 	add	a, -2 (ix)
      001633 5F               [ 4] 4857 	ld	e, a
      001634 30 01            [12] 4858 	jr	NC, 00633$
      001636 14               [ 4] 4859 	inc	d
      001637                       4860 00633$:
      001637 DD 6E F2         [19] 4861 	ld	l, -14 (ix)
      00163A DD 66 F3         [19] 4862 	ld	h, -13 (ix)
      00163D 7E               [ 7] 4863 	ld	a, (hl)
      00163E CB FF            [ 8] 4864 	set	7, a
      001640 12               [ 7] 4865 	ld	(de), a
      001641                       4866 00116$:
                                   4867 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      001641 DD 6E F4         [19] 4868 	ld	l, -12 (ix)
      001644 26 00            [ 7] 4869 	ld	h, #0x00
      001646 09               [11] 4870 	add	hl, bc
      001647 4E               [ 7] 4871 	ld	c, (hl)
      001648 79               [ 4] 4872 	ld	a, c
      001649 B7               [ 4] 4873 	or	a, a
      00164A 28 6A            [12] 4874 	jr	Z, 00211$
                                   4875 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      00164C DD 7E FA         [19] 4876 	ld	a, -6 (ix)
      00164F DD 86 FE         [19] 4877 	add	a, -2 (ix)
      001652 5F               [ 4] 4878 	ld	e, a
      001653 DD 7E FB         [19] 4879 	ld	a, -5 (ix)
      001656 CE 00            [ 7] 4880 	adc	a, #0x00
      001658 57               [ 4] 4881 	ld	d, a
      001659 DD 6E FC         [19] 4882 	ld	l, -4 (ix)
      00165C DD 66 FD         [19] 4883 	ld	h, -3 (ix)
      00165F 46               [ 7] 4884 	ld	b, (hl)
      001660 1A               [ 7] 4885 	ld	a, (de)
      001661 B8               [ 4] 4886 	cp	a, b
      001662 20 52            [12] 4887 	jr	NZ, 00211$
                                   4888 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001664 91               [ 4] 4889 	sub	a, c
      001665 20 4F            [12] 4890 	jr	NZ, 00211$
                                   4891 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      001667 DD 36 EF 01      [19] 4892 	ld	-17 (ix), #0x01
                                   4893 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00166B 3Er00            [ 7] 4894 	ld	a, #<(_playfield)
      00166D DD 86 F0         [19] 4895 	add	a, -16 (ix)
      001670 47               [ 4] 4896 	ld	b, a
      001671 3Es00            [ 7] 4897 	ld	a, #>(_playfield)
      001673 DD 8E F1         [19] 4898 	adc	a, -15 (ix)
      001676 67               [ 4] 4899 	ld	h, a
      001677 78               [ 4] 4900 	ld	a, b
      001678 DD 86 F4         [19] 4901 	add	a, -12 (ix)
      00167B 6F               [ 4] 4902 	ld	l, a
      00167C 30 01            [12] 4903 	jr	NC, 00638$
      00167E 24               [ 4] 4904 	inc	h
      00167F                       4905 00638$:
      00167F CB F9            [ 8] 4906 	set	7, c
      001681 71               [ 7] 4907 	ld	(hl), c
                                   4908 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001682 3Er00            [ 7] 4909 	ld	a, #<(_playfield)
      001684 DD 86 F8         [19] 4910 	add	a, -8 (ix)
      001687 4F               [ 4] 4911 	ld	c, a
      001688 3Es00            [ 7] 4912 	ld	a, #>(_playfield)
      00168A DD 8E F9         [19] 4913 	adc	a, -7 (ix)
      00168D 47               [ 4] 4914 	ld	b, a
      00168E 79               [ 4] 4915 	ld	a, c
      00168F DD 86 F5         [19] 4916 	add	a, -11 (ix)
      001692 4F               [ 4] 4917 	ld	c, a
      001693 30 01            [12] 4918 	jr	NC, 00639$
      001695 04               [ 4] 4919 	inc	b
      001696                       4920 00639$:
      001696 DD 6E FC         [19] 4921 	ld	l, -4 (ix)
      001699 DD 66 FD         [19] 4922 	ld	h, -3 (ix)
      00169C 7E               [ 7] 4923 	ld	a, (hl)
      00169D CB FF            [ 8] 4924 	set	7, a
      00169F 02               [ 7] 4925 	ld	(bc), a
                                   4926 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0016A0 3Er00            [ 7] 4927 	ld	a, #<(_playfield)
      0016A2 DD 86 F6         [19] 4928 	add	a, -10 (ix)
      0016A5 4F               [ 4] 4929 	ld	c, a
      0016A6 3Es00            [ 7] 4930 	ld	a, #>(_playfield)
      0016A8 DD 8E F7         [19] 4931 	adc	a, -9 (ix)
      0016AB 47               [ 4] 4932 	ld	b, a
      0016AC DD 6E FE         [19] 4933 	ld	l, -2 (ix)
      0016AF 26 00            [ 7] 4934 	ld	h, #0x00
      0016B1 09               [11] 4935 	add	hl, bc
      0016B2 1A               [ 7] 4936 	ld	a, (de)
      0016B3 CB FF            [ 8] 4937 	set	7, a
      0016B5 77               [ 7] 4938 	ld	(hl), a
      0016B6                       4939 00211$:
                                   4940 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0016B6 DD 34 FF         [23] 4941 	inc	-1 (ix)
      0016B9 C3r2Br15         [10] 4942 	jp	00210$
      0016BC                       4943 00214$:
                                   4944 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0016BC DD 34 FE         [23] 4945 	inc	-2 (ix)
      0016BF C3r1Fr15         [10] 4946 	jp	00213$
      0016C2                       4947 00124$:
                                   4948 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      0016C2 DD 7E EF         [19] 4949 	ld	a, -17 (ix)
      0016C5 B7               [ 4] 4950 	or	a, a
      0016C6 CArCEr1A         [10] 4951 	jp	Z, 00236$
                                   4952 ;src\/CheckPlayfield.h:106: byte x = 255, y = 0;
      0016C9 DD 36 F5 FF      [19] 4953 	ld	-11 (ix), #0xff
      0016CD DD 36 F6 00      [19] 4954 	ld	-10 (ix), #0
                                   4955 ;src\/CheckPlayfield.h:108: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      0016D1 DD 36 F7 05      [19] 4956 	ld	-9 (ix), #0x05
      0016D5 DD 36 F8 00      [19] 4957 	ld	-8 (ix), #0
                                   4958 ;src\/CheckPlayfield.h:109: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      0016D9 DD 36 F9 0B      [19] 4959 	ld	-7 (ix), #0x0b
      0016DD DD 36 FA 00      [19] 4960 	ld	-6 (ix), #0
                                   4961 ;src\/CheckPlayfield.h:111: HideArrow();
      0016E1 CDr16r0D         [17] 4962 	call	_HideArrow
                                   4963 ;src\/CheckPlayfield.h:113: SoundFx_2();
      0016E4 CDrEAr11         [17] 4964 	call	_SoundFx_2
                                   4965 ;src\/CheckPlayfield.h:116: numberPiecesRemoved = 0;
      0016E7 DD 36 FB 00      [19] 4966 	ld	-5 (ix), #0
                                   4967 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016EB DD 36 FF 00      [19] 4968 	ld	-1 (ix), #0
      0016EF                       4969 00219$:
      0016EF DD 7E FF         [19] 4970 	ld	a, -1 (ix)
      0016F2 D6 0C            [ 7] 4971 	sub	a, #0x0c
      0016F4 30 5F            [12] 4972 	jr	NC, 00136$
                                   4973 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016F6 DD 5E FB         [19] 4974 	ld	e, -5 (ix)
      0016F9 06 00            [ 7] 4975 	ld	b, #0x00
      0016FB                       4976 00216$:
      0016FB 78               [ 4] 4977 	ld	a, b
      0016FC D6 06            [ 7] 4978 	sub	a, #0x06
      0016FE 30 4D            [12] 4979 	jr	NC, 00319$
                                   4980 ;src\/CheckPlayfield.h:119: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001700 D5               [11] 4981 	push	de
      001701 58               [ 4] 4982 	ld	e, b
      001702 16 00            [ 7] 4983 	ld	d, #0x00
      001704 6B               [ 4] 4984 	ld	l, e
      001705 62               [ 4] 4985 	ld	h, d
      001706 29               [11] 4986 	add	hl, hl
      001707 19               [11] 4987 	add	hl, de
      001708 29               [11] 4988 	add	hl, hl
      001709 29               [11] 4989 	add	hl, hl
      00170A 11r00r00         [10] 4990 	ld	de, #_playfield
      00170D 19               [11] 4991 	add	hl, de
      00170E D1               [10] 4992 	pop	de
      00170F 7D               [ 4] 4993 	ld	a, l
      001710 DD 86 FF         [19] 4994 	add	a, -1 (ix)
      001713 6F               [ 4] 4995 	ld	l, a
      001714 30 01            [12] 4996 	jr	NC, 00640$
      001716 24               [ 4] 4997 	inc	h
      001717                       4998 00640$:
      001717 7E               [ 7] 4999 	ld	a, (hl)
      001718 07               [ 4] 5000 	rlca
      001719 30 2F            [12] 5001 	jr	NC, 00217$
                                   5002 ;src\/CheckPlayfield.h:120: numberPiecesRemoved++;
      00171B 1C               [ 4] 5003 	inc	e
                                   5004 ;src\/CheckPlayfield.h:122: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      00171C 78               [ 4] 5005 	ld	a, b
      00171D DD 96 F7         [19] 5006 	sub	a, -9 (ix)
      001720 30 03            [12] 5007 	jr	NC, 00126$
      001722 DD 70 F7         [19] 5008 	ld	-9 (ix), b
      001725                       5009 00126$:
                                   5010 ;src\/CheckPlayfield.h:123: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001725 DD 7E F8         [19] 5011 	ld	a, -8 (ix)
      001728 90               [ 4] 5012 	sub	a, b
      001729 30 03            [12] 5013 	jr	NC, 00128$
      00172B DD 70 F8         [19] 5014 	ld	-8 (ix), b
      00172E                       5015 00128$:
                                   5016 ;src\/CheckPlayfield.h:124: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      00172E DD 7E FF         [19] 5017 	ld	a, -1 (ix)
      001731 DD 96 F9         [19] 5018 	sub	a, -7 (ix)
      001734 30 06            [12] 5019 	jr	NC, 00130$
      001736 DD 7E FF         [19] 5020 	ld	a, -1 (ix)
      001739 DD 77 F9         [19] 5021 	ld	-7 (ix), a
      00173C                       5022 00130$:
                                   5023 ;src\/CheckPlayfield.h:125: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      00173C DD 7E FA         [19] 5024 	ld	a, -6 (ix)
      00173F DD 96 FF         [19] 5025 	sub	a, -1 (ix)
      001742 30 06            [12] 5026 	jr	NC, 00217$
      001744 DD 7E FF         [19] 5027 	ld	a, -1 (ix)
      001747 DD 77 FA         [19] 5028 	ld	-6 (ix), a
      00174A                       5029 00217$:
                                   5030 ;src\/CheckPlayfield.h:118: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00174A 04               [ 4] 5031 	inc	b
      00174B 18 AE            [12] 5032 	jr	00216$
      00174D                       5033 00319$:
      00174D DD 73 FB         [19] 5034 	ld	-5 (ix), e
                                   5035 ;src\/CheckPlayfield.h:117: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001750 DD 34 FF         [23] 5036 	inc	-1 (ix)
      001753 18 9A            [12] 5037 	jr	00219$
      001755                       5038 00136$:
                                   5039 ;src\/CheckPlayfield.h:131: DrawNumber(numberPiecesRemoved, 0, 0);//test
      001755 DD 4E FB         [19] 5040 	ld	c, -5 (ix)
      001758 06 00            [ 7] 5041 	ld	b, #0x00
      00175A AF               [ 4] 5042 	xor	a, a
      00175B F5               [11] 5043 	push	af
      00175C 33               [ 6] 5044 	inc	sp
      00175D AF               [ 4] 5045 	xor	a, a
      00175E F5               [11] 5046 	push	af
      00175F 33               [ 6] 5047 	inc	sp
      001760 C5               [11] 5048 	push	bc
      001761 CDr79r08         [17] 5049 	call	_DrawNumber
      001764 F1               [10] 5050 	pop	af
      001765 F1               [10] 5051 	pop	af
                                   5052 ;src\/CheckPlayfield.h:132: DrawNumber(iteration, 0, 1);//test
      001766 DD 4E 04         [19] 5053 	ld	c, 4 (ix)
      001769 06 00            [ 7] 5054 	ld	b, #0x00
      00176B 3E 01            [ 7] 5055 	ld	a, #0x01
      00176D F5               [11] 5056 	push	af
      00176E 33               [ 6] 5057 	inc	sp
      00176F AF               [ 4] 5058 	xor	a, a
      001770 F5               [11] 5059 	push	af
      001771 33               [ 6] 5060 	inc	sp
      001772 C5               [11] 5061 	push	bc
      001773 CDr79r08         [17] 5062 	call	_DrawNumber
      001776 F1               [10] 5063 	pop	af
      001777 F1               [10] 5064 	pop	af
                                   5065 ;src\/CheckPlayfield.h:133: DrawNumber(leftmostPieceRemoved, 0, 13);//test
      001778 DD 4E F7         [19] 5066 	ld	c, -9 (ix)
      00177B 06 00            [ 7] 5067 	ld	b, #0x00
      00177D 3E 0D            [ 7] 5068 	ld	a, #0x0d
      00177F F5               [11] 5069 	push	af
      001780 33               [ 6] 5070 	inc	sp
      001781 AF               [ 4] 5071 	xor	a, a
      001782 F5               [11] 5072 	push	af
      001783 33               [ 6] 5073 	inc	sp
      001784 C5               [11] 5074 	push	bc
      001785 CDr79r08         [17] 5075 	call	_DrawNumber
      001788 F1               [10] 5076 	pop	af
      001789 F1               [10] 5077 	pop	af
                                   5078 ;src\/CheckPlayfield.h:134: DrawNumber(rightmostPieceRemoved, 0, 14);//test
      00178A DD 4E F8         [19] 5079 	ld	c, -8 (ix)
      00178D 06 00            [ 7] 5080 	ld	b, #0x00
      00178F 3E 0E            [ 7] 5081 	ld	a, #0x0e
      001791 F5               [11] 5082 	push	af
      001792 33               [ 6] 5083 	inc	sp
      001793 AF               [ 4] 5084 	xor	a, a
      001794 F5               [11] 5085 	push	af
      001795 33               [ 6] 5086 	inc	sp
      001796 C5               [11] 5087 	push	bc
      001797 CDr79r08         [17] 5088 	call	_DrawNumber
      00179A F1               [10] 5089 	pop	af
      00179B F1               [10] 5090 	pop	af
                                   5091 ;src\/CheckPlayfield.h:135: DrawNumber(lowermostPieceRemoved, 0, 16);//test
      00179C DD 4E F9         [19] 5092 	ld	c, -7 (ix)
      00179F 06 00            [ 7] 5093 	ld	b, #0x00
      0017A1 3E 10            [ 7] 5094 	ld	a, #0x10
      0017A3 F5               [11] 5095 	push	af
      0017A4 33               [ 6] 5096 	inc	sp
      0017A5 AF               [ 4] 5097 	xor	a, a
      0017A6 F5               [11] 5098 	push	af
      0017A7 33               [ 6] 5099 	inc	sp
      0017A8 C5               [11] 5100 	push	bc
      0017A9 CDr79r08         [17] 5101 	call	_DrawNumber
      0017AC F1               [10] 5102 	pop	af
      0017AD F1               [10] 5103 	pop	af
                                   5104 ;src\/CheckPlayfield.h:136: DrawNumber(upmostPieceRemoved, 0, 17);//test
      0017AE DD 4E FA         [19] 5105 	ld	c, -6 (ix)
      0017B1 06 00            [ 7] 5106 	ld	b, #0x00
      0017B3 3E 11            [ 7] 5107 	ld	a, #0x11
      0017B5 F5               [11] 5108 	push	af
      0017B6 33               [ 6] 5109 	inc	sp
      0017B7 AF               [ 4] 5110 	xor	a, a
      0017B8 F5               [11] 5111 	push	af
      0017B9 33               [ 6] 5112 	inc	sp
      0017BA C5               [11] 5113 	push	bc
      0017BB CDr79r08         [17] 5114 	call	_DrawNumber
      0017BE F1               [10] 5115 	pop	af
      0017BF F1               [10] 5116 	pop	af
                                   5117 ;src\/CheckPlayfield.h:139: while(counter-- > 0) {
      0017C0 DD 36 FF 48      [19] 5118 	ld	-1 (ix), #0x48
      0017C4                       5119 00166$:
      0017C4 DD 4E FF         [19] 5120 	ld	c, -1 (ix)
      0017C7 DD 35 FF         [23] 5121 	dec	-1 (ix)
      0017CA 79               [ 4] 5122 	ld	a, c
      0017CB B7               [ 4] 5123 	or	a, a
      0017CC CAr68r19         [10] 5124 	jp	Z, 00168$
                                   5125 ;src\/CheckPlayfield.h:141: word lastJiffy = JIFFY;
      0017CF ED 5B 9E FC      [20] 5126 	ld	de, (_JIFFY)
                                   5127 ;src\/CheckPlayfield.h:142: while (lastJiffy == JIFFY) {
      0017D3                       5128 00137$:
      0017D3 2A 9E FC         [16] 5129 	ld	hl, (_JIFFY)
      0017D6 BF               [ 4] 5130 	cp	a, a
      0017D7 ED 52            [15] 5131 	sbc	hl, de
      0017D9 28 F8            [12] 5132 	jr	Z, 00137$
                                   5133 ;src\/CheckPlayfield.h:148: if(numberPiecesRemoved >= 3) {
      0017DB DD 7E FB         [19] 5134 	ld	a, -5 (ix)
      0017DE D6 03            [ 7] 5135 	sub	a, #0x03
      0017E0 DAr86r18         [10] 5136 	jp	C, 00300$
                                   5137 ;src\/CheckPlayfield.h:150: if(numberPiecesRemoved >= 6) numberPiecesRemoved = 6;
      0017E3 DD 7E FB         [19] 5138 	ld	a, -5 (ix)
      0017E6 D6 06            [ 7] 5139 	sub	a, #0x06
      0017E8 38 04            [12] 5140 	jr	C, 00141$
      0017EA DD 36 FB 06      [19] 5141 	ld	-5 (ix), #0x06
      0017EE                       5142 00141$:
                                   5143 ;src\/CheckPlayfield.h:152: if(x == 255) { // do this expensive calculation only once
      0017EE DD 7E F5         [19] 5144 	ld	a, -11 (ix)
      0017F1 3C               [ 4] 5145 	inc	a
      0017F2 20 75            [12] 5146 	jr	NZ, 00143$
                                   5147 ;src\/CheckPlayfield.h:153: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      0017F4 DD 6E F8         [19] 5148 	ld	l, -8 (ix)
      0017F7 26 00            [ 7] 5149 	ld	h, #0x00
      0017F9 29               [11] 5150 	add	hl, hl
      0017FA 29               [11] 5151 	add	hl, hl
      0017FB 29               [11] 5152 	add	hl, hl
      0017FC 29               [11] 5153 	add	hl, hl
      0017FD DD 5E F7         [19] 5154 	ld	e, -9 (ix)
      001800 16 00            [ 7] 5155 	ld	d, #0x00
      001802 EB               [ 4] 5156 	ex	de, hl
      001803 29               [11] 5157 	add	hl, hl
      001804 29               [11] 5158 	add	hl, hl
      001805 29               [11] 5159 	add	hl, hl
      001806 29               [11] 5160 	add	hl, hl
      001807 EB               [ 4] 5161 	ex	de, hl
      001808 BF               [ 4] 5162 	cp	a, a
      001809 ED 52            [15] 5163 	sbc	hl, de
      00180B 4D               [ 4] 5164 	ld	c, l
      00180C 44               [ 4] 5165 	ld	b, h
      00180D CB 7C            [ 8] 5166 	bit	7, h
      00180F 28 03            [12] 5167 	jr	Z, 00238$
      001811 4D               [ 4] 5168 	ld	c, l
      001812 44               [ 4] 5169 	ld	b, h
      001813 03               [ 6] 5170 	inc	bc
      001814                       5171 00238$:
      001814 CB 28            [ 8] 5172 	sra	b
      001816 CB 19            [ 8] 5173 	rr	c
      001818 79               [ 4] 5174 	ld	a, c
      001819 C6 50            [ 7] 5175 	add	a, #0x50
      00181B DD 6E F7         [19] 5176 	ld	l, -9 (ix)
      00181E 29               [11] 5177 	add	hl, hl
      00181F 29               [11] 5178 	add	hl, hl
      001820 29               [11] 5179 	add	hl, hl
      001821 29               [11] 5180 	add	hl, hl
      001822 85               [ 4] 5181 	add	a, l
      001823 DD 77 F5         [19] 5182 	ld	-11 (ix), a
                                   5183 ;src\/CheckPlayfield.h:155: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001826 DD 6E F9         [19] 5184 	ld	l, -7 (ix)
      001829 26 00            [ 7] 5185 	ld	h, #0x00
      00182B 29               [11] 5186 	add	hl, hl
      00182C 29               [11] 5187 	add	hl, hl
      00182D 29               [11] 5188 	add	hl, hl
      00182E 29               [11] 5189 	add	hl, hl
      00182F DD 5E FA         [19] 5190 	ld	e, -6 (ix)
      001832 16 00            [ 7] 5191 	ld	d, #0x00
      001834 EB               [ 4] 5192 	ex	de, hl
      001835 29               [11] 5193 	add	hl, hl
      001836 29               [11] 5194 	add	hl, hl
      001837 29               [11] 5195 	add	hl, hl
      001838 29               [11] 5196 	add	hl, hl
      001839 EB               [ 4] 5197 	ex	de, hl
      00183A BF               [ 4] 5198 	cp	a, a
      00183B ED 52            [15] 5199 	sbc	hl, de
      00183D 4D               [ 4] 5200 	ld	c, l
      00183E 44               [ 4] 5201 	ld	b, h
      00183F CB 7C            [ 8] 5202 	bit	7, h
      001841 28 03            [12] 5203 	jr	Z, 00239$
      001843 23               [ 6] 5204 	inc	hl
      001844 4D               [ 4] 5205 	ld	c, l
      001845 44               [ 4] 5206 	ld	b, h
      001846                       5207 00239$:
      001846 CB 28            [ 8] 5208 	sra	b
      001848 CB 19            [ 8] 5209 	rr	c
      00184A DD 7E FA         [19] 5210 	ld	a, -6 (ix)
      00184D 87               [ 4] 5211 	add	a, a
      00184E 87               [ 4] 5212 	add	a, a
      00184F 87               [ 4] 5213 	add	a, a
      001850 87               [ 4] 5214 	add	a, a
      001851 81               [ 4] 5215 	add	a, c
      001852 DD 77 F6         [19] 5216 	ld	-10 (ix), a
                                   5217 ;src\/CheckPlayfield.h:156: DrawHitSprite(numberPiecesRemoved, x, y, TRUE);
      001855 26 01            [ 7] 5218 	ld	h, #0x01
      001857 DD 6E F6         [19] 5219 	ld	l, -10 (ix)
      00185A E5               [11] 5220 	push	hl
      00185B DD 66 F5         [19] 5221 	ld	h, -11 (ix)
      00185E DD 6E FB         [19] 5222 	ld	l, -5 (ix)
      001861 E5               [11] 5223 	push	hl
      001862 CDr24r0D         [17] 5224 	call	_DrawHitSprite
      001865 F1               [10] 5225 	pop	af
      001866 F1               [10] 5226 	pop	af
      001867 18 1D            [12] 5227 	jr	00300$
      001869                       5228 00143$:
                                   5229 ;src\/CheckPlayfield.h:162: DrawHitSprite(numberPiecesRemoved, x, y - (72 - counter), FALSE);
      001869 DD 4E FF         [19] 5230 	ld	c, -1 (ix)
      00186C 3E 48            [ 7] 5231 	ld	a, #0x48
      00186E 91               [ 4] 5232 	sub	a, c
      00186F 4F               [ 4] 5233 	ld	c, a
      001870 DD 7E F6         [19] 5234 	ld	a, -10 (ix)
      001873 91               [ 4] 5235 	sub	a, c
      001874 26 00            [ 7] 5236 	ld	h, #0x00
      001876 E5               [11] 5237 	push	hl
      001877 33               [ 6] 5238 	inc	sp
      001878 F5               [11] 5239 	push	af
      001879 33               [ 6] 5240 	inc	sp
      00187A DD 66 F5         [19] 5241 	ld	h, -11 (ix)
      00187D DD 6E FB         [19] 5242 	ld	l, -5 (ix)
      001880 E5               [11] 5243 	push	hl
      001881 CDr24r0D         [17] 5244 	call	_DrawHitSprite
      001884 F1               [10] 5245 	pop	af
      001885 F1               [10] 5246 	pop	af
                                   5247 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001886                       5248 00300$:
      001886 3E 0C            [ 7] 5249 	ld	a, #0x0c
      001888 DD 96 FF         [19] 5250 	sub	a, -1 (ix)
      00188B 3E 00            [ 7] 5251 	ld	a, #0x00
      00188D 17               [ 4] 5252 	rla
      00188E 5F               [ 4] 5253 	ld	e, a
      00188F 3E 09            [ 7] 5254 	ld	a, #0x09
      001891 DD 96 FF         [19] 5255 	sub	a, -1 (ix)
      001894 3E 00            [ 7] 5256 	ld	a, #0x00
      001896 17               [ 4] 5257 	rla
      001897 4F               [ 4] 5258 	ld	c, a
      001898 3E 06            [ 7] 5259 	ld	a, #0x06
      00189A DD 96 FF         [19] 5260 	sub	a, -1 (ix)
      00189D 3E 00            [ 7] 5261 	ld	a, #0x00
      00189F 17               [ 4] 5262 	rla
      0018A0 DD 77 FC         [19] 5263 	ld	-4 (ix), a
      0018A3 3E 03            [ 7] 5264 	ld	a, #0x03
      0018A5 DD 96 FF         [19] 5265 	sub	a, -1 (ix)
      0018A8 3E 00            [ 7] 5266 	ld	a, #0x00
      0018AA 17               [ 4] 5267 	rla
      0018AB DD 77 FD         [19] 5268 	ld	-3 (ix), a
      0018AE 06 00            [ 7] 5269 	ld	b, #0x00
      0018B0                       5270 00225$:
      0018B0 78               [ 4] 5271 	ld	a, b
      0018B1 D6 0C            [ 7] 5272 	sub	a, #0x0c
      0018B3 D2rC4r17         [10] 5273 	jp	NC, 00166$
                                   5274 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018B6 16 00            [ 7] 5275 	ld	d, #0x00
      0018B8                       5276 00222$:
      0018B8 7A               [ 4] 5277 	ld	a, d
      0018B9 D6 06            [ 7] 5278 	sub	a, #0x06
      0018BB D2r64r19         [10] 5279 	jp	NC, 00226$
                                   5280 ;src\/CheckPlayfield.h:169: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0018BE D5               [11] 5281 	push	de
      0018BF 5A               [ 4] 5282 	ld	e, d
      0018C0 16 00            [ 7] 5283 	ld	d, #0x00
      0018C2 6B               [ 4] 5284 	ld	l, e
      0018C3 62               [ 4] 5285 	ld	h, d
      0018C4 29               [11] 5286 	add	hl, hl
      0018C5 19               [11] 5287 	add	hl, de
      0018C6 29               [11] 5288 	add	hl, hl
      0018C7 29               [11] 5289 	add	hl, hl
      0018C8 11r00r00         [10] 5290 	ld	de, #_playfield
      0018CB 19               [11] 5291 	add	hl, de
      0018CC D1               [10] 5292 	pop	de
      0018CD 7D               [ 4] 5293 	ld	a, l
      0018CE 80               [ 4] 5294 	add	a, b
      0018CF 6F               [ 4] 5295 	ld	l, a
      0018D0 30 01            [12] 5296 	jr	NC, 00645$
      0018D2 24               [ 4] 5297 	inc	h
      0018D3                       5298 00645$:
      0018D3 7E               [ 7] 5299 	ld	a, (hl)
      0018D4 DD 77 FE         [19] 5300 	ld	-2 (ix), a
      0018D7 DD CB FE 7E      [20] 5301 	bit	7, -2 (ix)
      0018DB CAr60r19         [10] 5302 	jp	Z,00223$
                                   5303 ;src\/CheckPlayfield.h:172: if(counter > 12) {
      0018DE 7B               [ 4] 5304 	ld	a, e
      0018DF B7               [ 4] 5305 	or	a, a
      0018E0 28 2C            [12] 5306 	jr	Z, 00160$
                                   5307 ;src\/CheckPlayfield.h:173: if(JIFFY & 0b00000011) {
      0018E2 2A 9E FC         [16] 5308 	ld	hl, (_JIFFY)
      0018E5 7D               [ 4] 5309 	ld	a, l
      0018E6 E6 03            [ 7] 5310 	and	a, #0x03
      0018E8 28 14            [12] 5311 	jr	Z, 00148$
                                   5312 ;src\/CheckPlayfield.h:174: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0018EA DD 7E FE         [19] 5313 	ld	a, -2 (ix)
      0018ED CB BF            [ 8] 5314 	res	7, a
      0018EF C5               [11] 5315 	push	bc
      0018F0 D5               [11] 5316 	push	de
      0018F1 F5               [11] 5317 	push	af
      0018F2 33               [ 6] 5318 	inc	sp
      0018F3 4A               [ 4] 5319 	ld	c, d
      0018F4 C5               [11] 5320 	push	bc
      0018F5 CDrB5r10         [17] 5321 	call	_DrawBlock
      0018F8 F1               [10] 5322 	pop	af
      0018F9 33               [ 6] 5323 	inc	sp
      0018FA D1               [10] 5324 	pop	de
      0018FB C1               [10] 5325 	pop	bc
      0018FC 18 62            [12] 5326 	jr	00223$
      0018FE                       5327 00148$:
                                   5328 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, EMPTY);
      0018FE C5               [11] 5329 	push	bc
      0018FF D5               [11] 5330 	push	de
      001900 AF               [ 4] 5331 	xor	a, a
      001901 F5               [11] 5332 	push	af
      001902 33               [ 6] 5333 	inc	sp
      001903 4A               [ 4] 5334 	ld	c, d
      001904 C5               [11] 5335 	push	bc
      001905 CDrB5r10         [17] 5336 	call	_DrawBlock
      001908 F1               [10] 5337 	pop	af
      001909 33               [ 6] 5338 	inc	sp
      00190A D1               [10] 5339 	pop	de
      00190B C1               [10] 5340 	pop	bc
      00190C 18 52            [12] 5341 	jr	00223$
      00190E                       5342 00160$:
                                   5343 ;src\/CheckPlayfield.h:182: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      00190E 79               [ 4] 5344 	ld	a, c
      00190F B7               [ 4] 5345 	or	a, a
      001910 28 11            [12] 5346 	jr	Z, 00157$
      001912 C5               [11] 5347 	push	bc
      001913 D5               [11] 5348 	push	de
      001914 3E 2A            [ 7] 5349 	ld	a, #0x2a
      001916 F5               [11] 5350 	push	af
      001917 33               [ 6] 5351 	inc	sp
      001918 4A               [ 4] 5352 	ld	c, d
      001919 C5               [11] 5353 	push	bc
      00191A CDr1Dr11         [17] 5354 	call	_DrawBlock_SameTile
      00191D F1               [10] 5355 	pop	af
      00191E 33               [ 6] 5356 	inc	sp
      00191F D1               [10] 5357 	pop	de
      001920 C1               [10] 5358 	pop	bc
      001921 18 3D            [12] 5359 	jr	00223$
      001923                       5360 00157$:
                                   5361 ;src\/CheckPlayfield.h:183: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001923 DD 7E FC         [19] 5362 	ld	a, -4 (ix)
      001926 B7               [ 4] 5363 	or	a, a
      001927 28 11            [12] 5364 	jr	Z, 00154$
      001929 C5               [11] 5365 	push	bc
      00192A D5               [11] 5366 	push	de
      00192B 3E 2B            [ 7] 5367 	ld	a, #0x2b
      00192D F5               [11] 5368 	push	af
      00192E 33               [ 6] 5369 	inc	sp
      00192F 4A               [ 4] 5370 	ld	c, d
      001930 C5               [11] 5371 	push	bc
      001931 CDr1Dr11         [17] 5372 	call	_DrawBlock_SameTile
      001934 F1               [10] 5373 	pop	af
      001935 33               [ 6] 5374 	inc	sp
      001936 D1               [10] 5375 	pop	de
      001937 C1               [10] 5376 	pop	bc
      001938 18 26            [12] 5377 	jr	00223$
      00193A                       5378 00154$:
                                   5379 ;src\/CheckPlayfield.h:184: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00193A DD 7E FD         [19] 5380 	ld	a, -3 (ix)
      00193D B7               [ 4] 5381 	or	a, a
      00193E 28 11            [12] 5382 	jr	Z, 00151$
      001940 C5               [11] 5383 	push	bc
      001941 D5               [11] 5384 	push	de
      001942 3E 2C            [ 7] 5385 	ld	a, #0x2c
      001944 F5               [11] 5386 	push	af
      001945 33               [ 6] 5387 	inc	sp
      001946 4A               [ 4] 5388 	ld	c, d
      001947 C5               [11] 5389 	push	bc
      001948 CDr1Dr11         [17] 5390 	call	_DrawBlock_SameTile
      00194B F1               [10] 5391 	pop	af
      00194C 33               [ 6] 5392 	inc	sp
      00194D D1               [10] 5393 	pop	de
      00194E C1               [10] 5394 	pop	bc
      00194F 18 0F            [12] 5395 	jr	00223$
      001951                       5396 00151$:
                                   5397 ;src\/CheckPlayfield.h:185: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001951 C5               [11] 5398 	push	bc
      001952 D5               [11] 5399 	push	de
      001953 3E 2D            [ 7] 5400 	ld	a, #0x2d
      001955 F5               [11] 5401 	push	af
      001956 33               [ 6] 5402 	inc	sp
      001957 4A               [ 4] 5403 	ld	c, d
      001958 C5               [11] 5404 	push	bc
      001959 CDr1Dr11         [17] 5405 	call	_DrawBlock_SameTile
      00195C F1               [10] 5406 	pop	af
      00195D 33               [ 6] 5407 	inc	sp
      00195E D1               [10] 5408 	pop	de
      00195F C1               [10] 5409 	pop	bc
      001960                       5410 00223$:
                                   5411 ;src\/CheckPlayfield.h:167: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001960 14               [ 4] 5412 	inc	d
      001961 C3rB8r18         [10] 5413 	jp	00222$
      001964                       5414 00226$:
                                   5415 ;src\/CheckPlayfield.h:166: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001964 04               [ 4] 5416 	inc	b
      001965 C3rB0r18         [10] 5417 	jp	00225$
      001968                       5418 00168$:
                                   5419 ;src\/CheckPlayfield.h:193: HideHitSprite();
      001968 CDr37r0E         [17] 5420 	call	_HideHitSprite
                                   5421 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00196B DD 36 FD 00      [19] 5422 	ld	-3 (ix), #0
      00196F                       5423 00234$:
      00196F DD 7E FD         [19] 5424 	ld	a, -3 (ix)
      001972 D6 0C            [ 7] 5425 	sub	a, #0x0c
      001974 D2r52r1A         [10] 5426 	jp	NC, 00177$
                                   5427 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001977 DD 36 FE 00      [19] 5428 	ld	-2 (ix), #0
      00197B                       5429 00231$:
      00197B DD 7E FE         [19] 5430 	ld	a, -2 (ix)
      00197E D6 06            [ 7] 5431 	sub	a, #0x06
      001980 D2r4Cr1A         [10] 5432 	jp	NC, 00235$
                                   5433 ;src\/CheckPlayfield.h:201: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001983 DD 4E FE         [19] 5434 	ld	c, -2 (ix)
      001986 06 00            [ 7] 5435 	ld	b, #0x00
      001988 69               [ 4] 5436 	ld	l, c
      001989 60               [ 4] 5437 	ld	h, b
      00198A 29               [11] 5438 	add	hl, hl
      00198B 09               [11] 5439 	add	hl, bc
      00198C 29               [11] 5440 	add	hl, hl
      00198D 29               [11] 5441 	add	hl, hl
      00198E EB               [ 4] 5442 	ex	de, hl
      00198F 21r00r00         [10] 5443 	ld	hl, #_playfield
      001992 19               [11] 5444 	add	hl, de
      001993 DD 75 FB         [19] 5445 	ld	-5 (ix), l
      001996 DD 74 FC         [19] 5446 	ld	-4 (ix), h
      001999 DD 7E FB         [19] 5447 	ld	a, -5 (ix)
      00199C DD 86 FD         [19] 5448 	add	a, -3 (ix)
      00199F 4F               [ 4] 5449 	ld	c, a
      0019A0 DD 7E FC         [19] 5450 	ld	a, -4 (ix)
      0019A3 CE 00            [ 7] 5451 	adc	a, #0x00
      0019A5 47               [ 4] 5452 	ld	b, a
      0019A6 0A               [ 7] 5453 	ld	a, (bc)
      0019A7 07               [ 4] 5454 	rlca
      0019A8 D2r46r1A         [10] 5455 	jp	NC,00232$
                                   5456 ;src\/CheckPlayfield.h:203: blocksRemoved++;
      0019AB 2Ar04r00         [16] 5457 	ld	hl, (_blocksRemoved)
      0019AE 23               [ 6] 5458 	inc	hl
      0019AF 22r04r00         [16] 5459 	ld	(_blocksRemoved), hl
                                   5460 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      0019B2 DD 7E FB         [19] 5461 	ld	a, -5 (ix)
      0019B5 DD 77 F7         [19] 5462 	ld	-9 (ix), a
      0019B8 DD 7E FC         [19] 5463 	ld	a, -4 (ix)
      0019BB DD 77 F8         [19] 5464 	ld	-8 (ix), a
      0019BE DD 7E FD         [19] 5465 	ld	a, -3 (ix)
      0019C1 DD 77 FF         [19] 5466 	ld	-1 (ix), a
      0019C4                       5467 00228$:
      0019C4 DD 7E FF         [19] 5468 	ld	a, -1 (ix)
      0019C7 B7               [ 4] 5469 	or	a, a
      0019C8 28 7C            [12] 5470 	jr	Z, 00232$
                                   5471 ;src\/CheckPlayfield.h:207: byte linesToBeRemoved = 1;
      0019CA 0E 01            [ 7] 5472 	ld	c, #0x01
                                   5473 ;src\/CheckPlayfield.h:208: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0019CC DD 7E FF         [19] 5474 	ld	a, -1 (ix)
      0019CF DD 77 FC         [19] 5475 	ld	-4 (ix), a
      0019D2 3D               [ 4] 5476 	dec	a
      0019D3 DD 86 F7         [19] 5477 	add	a, -9 (ix)
      0019D6 5F               [ 4] 5478 	ld	e, a
      0019D7 3E 00            [ 7] 5479 	ld	a, #0x00
      0019D9 DD 8E F8         [19] 5480 	adc	a, -8 (ix)
      0019DC 57               [ 4] 5481 	ld	d, a
      0019DD 1A               [ 7] 5482 	ld	a, (de)
      0019DE 07               [ 4] 5483 	rlca
      0019DF 30 02            [12] 5484 	jr	NC, 00170$
      0019E1 0E 02            [ 7] 5485 	ld	c, #0x02
      0019E3                       5486 00170$:
                                   5487 ;src\/CheckPlayfield.h:209: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0019E3 DD 7E FC         [19] 5488 	ld	a, -4 (ix)
      0019E6 3D               [ 4] 5489 	dec	a
      0019E7 3D               [ 4] 5490 	dec	a
      0019E8 DD 86 F7         [19] 5491 	add	a, -9 (ix)
      0019EB 5F               [ 4] 5492 	ld	e, a
      0019EC 3E 00            [ 7] 5493 	ld	a, #0x00
      0019EE DD 8E F8         [19] 5494 	adc	a, -8 (ix)
      0019F1 57               [ 4] 5495 	ld	d, a
      0019F2 1A               [ 7] 5496 	ld	a, (de)
      0019F3 07               [ 4] 5497 	rlca
      0019F4 30 01            [12] 5498 	jr	NC, 00172$
      0019F6 0C               [ 4] 5499 	inc	c
      0019F7                       5500 00172$:
                                   5501 ;src\/CheckPlayfield.h:213: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      0019F7 DD 7E F7         [19] 5502 	ld	a, -9 (ix)
      0019FA DD 86 FF         [19] 5503 	add	a, -1 (ix)
      0019FD DD 77 F9         [19] 5504 	ld	-7 (ix), a
      001A00 DD 7E F8         [19] 5505 	ld	a, -8 (ix)
      001A03 CE 00            [ 7] 5506 	adc	a, #0x00
      001A05 DD 77 FA         [19] 5507 	ld	-6 (ix), a
      001A08 DD 6E FF         [19] 5508 	ld	l, -1 (ix)
      001A0B 26 00            [ 7] 5509 	ld	h, #0x00
      001A0D 59               [ 4] 5510 	ld	e, c
      001A0E 16 00            [ 7] 5511 	ld	d, #0x00
      001A10 BF               [ 4] 5512 	cp	a, a
      001A11 ED 52            [15] 5513 	sbc	hl, de
      001A13 CB 7C            [ 8] 5514 	bit	7, h
      001A15 20 18            [12] 5515 	jr	NZ, 00242$
      001A17 DD 7E FF         [19] 5516 	ld	a, -1 (ix)
      001A1A 91               [ 4] 5517 	sub	a, c
      001A1B DD 86 F7         [19] 5518 	add	a, -9 (ix)
      001A1E 4F               [ 4] 5519 	ld	c, a
      001A1F 3E 00            [ 7] 5520 	ld	a, #0x00
      001A21 DD 8E F8         [19] 5521 	adc	a, -8 (ix)
      001A24 47               [ 4] 5522 	ld	b, a
      001A25 0A               [ 7] 5523 	ld	a, (bc)
      001A26 DD 77 FB         [19] 5524 	ld	-5 (ix), a
      001A29 DD 36 FC 00      [19] 5525 	ld	-4 (ix), #0
      001A2D 18 07            [12] 5526 	jr	00243$
      001A2F                       5527 00242$:
      001A2F AF               [ 4] 5528 	xor	a, a
      001A30 DD 77 FB         [19] 5529 	ld	-5 (ix), a
      001A33 DD 77 FC         [19] 5530 	ld	-4 (ix), a
      001A36                       5531 00243$:
      001A36 DD 7E FB         [19] 5532 	ld	a, -5 (ix)
      001A39 DD 6E F9         [19] 5533 	ld	l, -7 (ix)
      001A3C DD 66 FA         [19] 5534 	ld	h, -6 (ix)
      001A3F 77               [ 7] 5535 	ld	(hl), a
                                   5536 ;src\/CheckPlayfield.h:206: for(byte line1 = line; line1 > 0; line1--) {
      001A40 DD 35 FF         [23] 5537 	dec	-1 (ix)
      001A43 C3rC4r19         [10] 5538 	jp	00228$
      001A46                       5539 00232$:
                                   5540 ;src\/CheckPlayfield.h:199: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001A46 DD 34 FE         [23] 5541 	inc	-2 (ix)
      001A49 C3r7Br19         [10] 5542 	jp	00231$
      001A4C                       5543 00235$:
                                   5544 ;src\/CheckPlayfield.h:198: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001A4C DD 34 FD         [23] 5545 	inc	-3 (ix)
      001A4F C3r6Fr19         [10] 5546 	jp	00234$
      001A52                       5547 00177$:
                                   5548 ;src\/CheckPlayfield.h:220: oldLevel = level;
      001A52 3Ar06r00         [13] 5549 	ld	a, (#_level + 0)
      001A55 4F               [ 4] 5550 	ld	c, a
                                   5551 ;src\/CheckPlayfield.h:221: if(blocksRemoved >= 90) {
      001A56 21r04r00         [10] 5552 	ld	hl, #_blocksRemoved
      001A59 46               [ 7] 5553 	ld	b, (hl)
      001A5A 23               [ 6] 5554 	inc	hl
      001A5B 56               [ 7] 5555 	ld	d, (hl)
      001A5C 78               [ 4] 5556 	ld	a, b
      001A5D D6 5A            [ 7] 5557 	sub	a, #0x5a
      001A5F 7A               [ 4] 5558 	ld	a, d
      001A60 DE 00            [ 7] 5559 	sbc	a, #0x00
      001A62 38 19            [12] 5560 	jr	C, 00185$
                                   5561 ;src\/CheckPlayfield.h:222: level = (blocksRemoved / 30) + 1;
      001A64 C5               [11] 5562 	push	bc
      001A65 21 1E 00         [10] 5563 	ld	hl, #0x001e
      001A68 E5               [11] 5564 	push	hl
      001A69 58               [ 4] 5565 	ld	e, b
      001A6A D5               [11] 5566 	push	de
      001A6B CDr00r00         [17] 5567 	call	__divuint
      001A6E F1               [10] 5568 	pop	af
      001A6F F1               [10] 5569 	pop	af
      001A70 C1               [10] 5570 	pop	bc
      001A71 7D               [ 4] 5571 	ld	a, l
      001A72 3C               [ 4] 5572 	inc	a
      001A73 32r06r00         [13] 5573 	ld	(_level+0), a
                                   5574 ;src\/CheckPlayfield.h:223: speed = 15;
      001A76 21r93r00         [10] 5575 	ld	hl, #_speed
      001A79 36 0F            [10] 5576 	ld	(hl), #0x0f
      001A7B 18 32            [12] 5577 	jr	00186$
      001A7D                       5578 00185$:
                                   5579 ;src\/CheckPlayfield.h:226: else if(blocksRemoved >= 60) { 
      001A7D 78               [ 4] 5580 	ld	a, b
      001A7E D6 3C            [ 7] 5581 	sub	a, #0x3c
      001A80 7A               [ 4] 5582 	ld	a, d
      001A81 DE 00            [ 7] 5583 	sbc	a, #0x00
      001A83 38 0C            [12] 5584 	jr	C, 00182$
                                   5585 ;src\/CheckPlayfield.h:227: level = 3;
      001A85 21r06r00         [10] 5586 	ld	hl, #_level
      001A88 36 03            [10] 5587 	ld	(hl), #0x03
                                   5588 ;src\/CheckPlayfield.h:228: speed = 30;
      001A8A 21r93r00         [10] 5589 	ld	hl, #_speed
      001A8D 36 1E            [10] 5590 	ld	(hl), #0x1e
      001A8F 18 1E            [12] 5591 	jr	00186$
      001A91                       5592 00182$:
                                   5593 ;src\/CheckPlayfield.h:230: else if(blocksRemoved >= 30) { 
      001A91 78               [ 4] 5594 	ld	a, b
      001A92 D6 1E            [ 7] 5595 	sub	a, #0x1e
      001A94 7A               [ 4] 5596 	ld	a, d
      001A95 DE 00            [ 7] 5597 	sbc	a, #0x00
      001A97 38 0C            [12] 5598 	jr	C, 00179$
                                   5599 ;src\/CheckPlayfield.h:231: level = 2;
      001A99 21r06r00         [10] 5600 	ld	hl, #_level
      001A9C 36 02            [10] 5601 	ld	(hl), #0x02
                                   5602 ;src\/CheckPlayfield.h:232: speed = 45;
      001A9E 21r93r00         [10] 5603 	ld	hl, #_speed
      001AA1 36 2D            [10] 5604 	ld	(hl), #0x2d
      001AA3 18 0A            [12] 5605 	jr	00186$
      001AA5                       5606 00179$:
                                   5607 ;src\/CheckPlayfield.h:235: level = 1;
      001AA5 21r06r00         [10] 5608 	ld	hl, #_level
      001AA8 36 01            [10] 5609 	ld	(hl), #0x01
                                   5610 ;src\/CheckPlayfield.h:236: speed = 60;
      001AAA 21r93r00         [10] 5611 	ld	hl, #_speed
      001AAD 36 3C            [10] 5612 	ld	(hl), #0x3c
      001AAF                       5613 00186$:
                                   5614 ;src\/CheckPlayfield.h:239: if(oldLevel != level) {
      001AAF 3Ar06r00         [13] 5615 	ld	a,(#_level + 0)
      001AB2 91               [ 4] 5616 	sub	a, c
      001AB3 28 05            [12] 5617 	jr	Z, 00188$
                                   5618 ;src\/CheckPlayfield.h:240: newLevel = TRUE;
      001AB5 21r07r00         [10] 5619 	ld	hl, #_newLevel
      001AB8 36 01            [10] 5620 	ld	(hl), #0x01
      001ABA                       5621 00188$:
                                   5622 ;src\/CheckPlayfield.h:244: DrawPlayfield();
      001ABA CDrD9r11         [17] 5623 	call	_DrawPlayfield
                                   5624 ;src\/CheckPlayfield.h:248: CheckIfPlayfieldIsValid(); // test
      001ABD CDr4Ar12         [17] 5625 	call	_CheckIfPlayfieldIsValid
                                   5626 ;src\/CheckPlayfield.h:250: DrawScore();
      001AC0 CDrD5r0A         [17] 5627 	call	_DrawScore
                                   5628 ;src\/CheckPlayfield.h:252: iteration++;
      001AC3 DD 34 04         [23] 5629 	inc	4 (ix)
                                   5630 ;src\/CheckPlayfield.h:253: CheckPlayfield(iteration);  
      001AC6 DD 7E 04         [19] 5631 	ld	a, 4 (ix)
      001AC9 F5               [11] 5632 	push	af
      001ACA 33               [ 6] 5633 	inc	sp
      001ACB CDrFEr12         [17] 5634 	call	_CheckPlayfield
      001ACE                       5635 00236$:
                                   5636 ;src\/CheckPlayfield.h:258: }
      001ACE DD F9            [10] 5637 	ld	sp, ix
      001AD0 DD E1            [14] 5638 	pop	ix
      001AD2 C9               [10] 5639 	ret
                                   5640 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5641 ;	---------------------------------
                                   5642 ; Function RandomIndex
                                   5643 ; ---------------------------------
      001AD3                       5644 _RandomIndex::
                                   5645 ;src\/GameLogic.h:5: do {
      001AD3                       5646 00101$:
                                   5647 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001AD3 CDrA3r00         [17] 5648 	call	_GetRandom
      001AD6 7D               [ 4] 5649 	ld	a, l
      001AD7 E6 07            [ 7] 5650 	and	a, #0x07
      001AD9 6F               [ 4] 5651 	ld	l, a
                                   5652 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001ADA 3E 04            [ 7] 5653 	ld	a, #0x04
      001ADC 95               [ 4] 5654 	sub	a, l
      001ADD 38 F4            [12] 5655 	jr	C, 00101$
                                   5656 ;src\/GameLogic.h:10: return random;
                                   5657 ;src\/GameLogic.h:11: }
      001ADF C9               [10] 5658 	ret
                                   5659 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5660 ;	---------------------------------
                                   5661 ; Function RandomPiece
                                   5662 ; ---------------------------------
      001AE0                       5663 _RandomPiece::
                                   5664 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001AE0 01r18r00         [10] 5665 	ld	bc, #_pieces+0
      001AE3 C5               [11] 5666 	push	bc
      001AE4 CDrD3r1A         [17] 5667 	call	_RandomIndex
      001AE7 C1               [10] 5668 	pop	bc
      001AE8 26 00            [ 7] 5669 	ld	h, #0x00
      001AEA 09               [11] 5670 	add	hl, bc
      001AEB 7E               [ 7] 5671 	ld	a, (hl)
      001AEC 32r90r00         [13] 5672 	ld	(_topPiece+0), a
                                   5673 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001AEF C5               [11] 5674 	push	bc
      001AF0 CDrD3r1A         [17] 5675 	call	_RandomIndex
      001AF3 C1               [10] 5676 	pop	bc
      001AF4 26 00            [ 7] 5677 	ld	h, #0x00
      001AF6 09               [11] 5678 	add	hl, bc
      001AF7 7E               [ 7] 5679 	ld	a, (hl)
      001AF8 32r91r00         [13] 5680 	ld	(_midPiece+0), a
                                   5681 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001AFB C5               [11] 5682 	push	bc
      001AFC CDrD3r1A         [17] 5683 	call	_RandomIndex
      001AFF C1               [10] 5684 	pop	bc
      001B00 26 00            [ 7] 5685 	ld	h, #0x00
      001B02 09               [11] 5686 	add	hl, bc
      001B03 7E               [ 7] 5687 	ld	a, (hl)
      001B04 32r92r00         [13] 5688 	ld	(_bottomPiece+0), a
                                   5689 ;src\/GameLogic.h:17: }
      001B07 C9               [10] 5690 	ret
                                   5691 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5692 ;	---------------------------------
                                   5693 ; Function UpdateAndDrawPieceStatic
                                   5694 ; ---------------------------------
      001B08                       5695 _UpdateAndDrawPieceStatic::
                                   5696 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001B08 01r00r00         [10] 5697 	ld	bc, #_playfield+0
      001B0B ED 5Br01r00      [20] 5698 	ld	de, (_col)
      001B0F 16 00            [ 7] 5699 	ld	d, #0x00
      001B11 6B               [ 4] 5700 	ld	l, e
      001B12 62               [ 4] 5701 	ld	h, d
      001B13 29               [11] 5702 	add	hl, hl
      001B14 19               [11] 5703 	add	hl, de
      001B15 29               [11] 5704 	add	hl, hl
      001B16 29               [11] 5705 	add	hl, hl
      001B17 09               [11] 5706 	add	hl, bc
      001B18 EB               [ 4] 5707 	ex	de, hl
      001B19 3Ar02r00         [13] 5708 	ld	a, (#_line + 0)
      001B1C 6F               [ 4] 5709 	ld	l, a
      001B1D 26 00            [ 7] 5710 	ld	h, #0x00
      001B1F 19               [11] 5711 	add	hl, de
      001B20 3Ar90r00         [13] 5712 	ld	a,(#_topPiece + 0)
      001B23 77               [ 7] 5713 	ld	(hl), a
                                   5714 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001B24 ED 5Br01r00      [20] 5715 	ld	de, (_col)
      001B28 16 00            [ 7] 5716 	ld	d, #0x00
      001B2A 6B               [ 4] 5717 	ld	l, e
      001B2B 62               [ 4] 5718 	ld	h, d
      001B2C 29               [11] 5719 	add	hl, hl
      001B2D 19               [11] 5720 	add	hl, de
      001B2E 29               [11] 5721 	add	hl, hl
      001B2F 29               [11] 5722 	add	hl, hl
      001B30 09               [11] 5723 	add	hl, bc
      001B31 EB               [ 4] 5724 	ex	de, hl
      001B32 3Ar02r00         [13] 5725 	ld	a, (#_line + 0)
      001B35 6F               [ 4] 5726 	ld	l, a
      001B36 2C               [ 4] 5727 	inc	l
      001B37 26 00            [ 7] 5728 	ld	h, #0x00
      001B39 19               [11] 5729 	add	hl, de
      001B3A 3Ar91r00         [13] 5730 	ld	a,(#_midPiece + 0)
      001B3D 77               [ 7] 5731 	ld	(hl), a
                                   5732 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001B3E ED 5Br01r00      [20] 5733 	ld	de, (_col)
      001B42 16 00            [ 7] 5734 	ld	d, #0x00
      001B44 6B               [ 4] 5735 	ld	l, e
      001B45 62               [ 4] 5736 	ld	h, d
      001B46 29               [11] 5737 	add	hl, hl
      001B47 19               [11] 5738 	add	hl, de
      001B48 29               [11] 5739 	add	hl, hl
      001B49 29               [11] 5740 	add	hl, hl
      001B4A 09               [11] 5741 	add	hl, bc
      001B4B EB               [ 4] 5742 	ex	de, hl
      001B4C 3Ar02r00         [13] 5743 	ld	a, (#_line + 0)
      001B4F 6F               [ 4] 5744 	ld	l, a
      001B50 2C               [ 4] 5745 	inc	l
      001B51 2C               [ 4] 5746 	inc	l
      001B52 26 00            [ 7] 5747 	ld	h, #0x00
      001B54 19               [11] 5748 	add	hl, de
      001B55 3Ar92r00         [13] 5749 	ld	a,(#_bottomPiece + 0)
      001B58 77               [ 7] 5750 	ld	(hl), a
                                   5751 ;src\/GameLogic.h:25: DrawPiece(line);
      001B59 C5               [11] 5752 	push	bc
      001B5A 3Ar02r00         [13] 5753 	ld	a,(#_line + 0)
      001B5D F5               [11] 5754 	push	af
      001B5E 33               [ 6] 5755 	inc	sp
      001B5F CDrB6r11         [17] 5756 	call	_DrawPiece
      001B62 33               [ 6] 5757 	inc	sp
      001B63 C1               [10] 5758 	pop	bc
                                   5759 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001B64 3E 02            [ 7] 5760 	ld	a, #0x02
      001B66 32r01r00         [13] 5761 	ld	(#_col), a
                                   5762 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   5763 ;src\/GameLogic.h:31: counter = 0;
      001B69 3E 00            [ 7] 5764 	ld	a,#0x00
      001B6B 32r02r00         [13] 5765 	ld	(#_line),a
      001B6E 32r03r00         [13] 5766 	ld	(#_counter), a
                                   5767 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001B71 3Ar18r00         [13] 5768 	ld	a, (#_playfield + 24)
      001B74 B7               [ 4] 5769 	or	a, a
      001B75 20 0C            [12] 5770 	jr	NZ, 00101$
                                   5771 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001B77 3Ar19r00         [13] 5772 	ld	a, (#_playfield + 25)
      001B7A B7               [ 4] 5773 	or	a, a
      001B7B 20 06            [12] 5774 	jr	NZ, 00101$
                                   5775 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001B7D 3Ar1Ar00         [13] 5776 	ld	a, (#_playfield + 26)
      001B80 B7               [ 4] 5777 	or	a, a
      001B81 28 0B            [12] 5778 	jr	Z, 00102$
      001B83                       5779 00101$:
                                   5780 ;src\/GameLogic.h:37: gameOver = TRUE;
      001B83 FD 21r00r00      [14] 5781 	ld	iy, #_gameOver
      001B87 FD 36 00 01      [19] 5782 	ld	0 (iy), #0x01
      001B8B C3rD9r11         [10] 5783 	jp	_DrawPlayfield
      001B8E                       5784 00102$:
                                   5785 ;src\/GameLogic.h:40: RandomPiece();
      001B8E CDrE0r1A         [17] 5786 	call	_RandomPiece
                                   5787 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001B91 3E 01            [ 7] 5788 	ld	a, #0x01
      001B93 F5               [11] 5789 	push	af
      001B94 33               [ 6] 5790 	inc	sp
      001B95 CDrFEr12         [17] 5791 	call	_CheckPlayfield
      001B98 33               [ 6] 5792 	inc	sp
                                   5793 ;src\/GameLogic.h:45: DrawPlayfield();
                                   5794 ;src\/GameLogic.h:46: }
      001B99 C3rD9r11         [10] 5795 	jp	_DrawPlayfield
                                   5796 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   5797 ;	---------------------------------
                                   5798 ; Function BlinkPauseText
                                   5799 ; ---------------------------------
      001B9C                       5800 _BlinkPauseText::
                                   5801 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001B9C 2A 9E FC         [16] 5802 	ld	hl, (_JIFFY)
      001B9F CB 5D            [ 8] 5803 	bit	3, l
      001BA1 28 0E            [12] 5804 	jr	Z, 00102$
                                   5805 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001BA3 11 0D 0C         [10] 5806 	ld	de, #0x0c0d
      001BA6 D5               [11] 5807 	push	de
      001BA7 21rBAr1B         [10] 5808 	ld	hl, #___str_4
      001BAA E5               [11] 5809 	push	hl
      001BAB CDr47r08         [17] 5810 	call	_DrawString
      001BAE F1               [10] 5811 	pop	af
      001BAF F1               [10] 5812 	pop	af
      001BB0 C9               [10] 5813 	ret
      001BB1                       5814 00102$:
                                   5815 ;src\/GameLogic.h:55: DrawLine(6);
      001BB1 3E 06            [ 7] 5816 	ld	a, #0x06
      001BB3 F5               [11] 5817 	push	af
      001BB4 33               [ 6] 5818 	inc	sp
      001BB5 CDr7Er11         [17] 5819 	call	_DrawLine
      001BB8 33               [ 6] 5820 	inc	sp
                                   5821 ;src\/GameLogic.h:58: }
      001BB9 C9               [10] 5822 	ret
      001BBA                       5823 ___str_4:
      001BBA 50 41 55 53 45        5824 	.ascii "PAUSE"
      001BBF 00                    5825 	.db 0x00
                                   5826 ;src\/GameLogic.h:60: void Pause() {
                                   5827 ;	---------------------------------
                                   5828 ; Function Pause
                                   5829 ; ---------------------------------
      001BC0                       5830 _Pause::
                                   5831 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001BC0 11 0D 0C         [10] 5832 	ld	de, #0x0c0d
      001BC3 D5               [11] 5833 	push	de
      001BC4 21rFAr1B         [10] 5834 	ld	hl, #___str_5
      001BC7 E5               [11] 5835 	push	hl
      001BC8 CDr47r08         [17] 5836 	call	_DrawString
      001BCB F1               [10] 5837 	pop	af
      001BCC F1               [10] 5838 	pop	af
                                   5839 ;src\/GameLogic.h:65: while(TRUE) {
      001BCD                       5840 00114$:
                                   5841 ;src\/GameLogic.h:67: BlinkPauseText();
      001BCD CDr9Cr1B         [17] 5842 	call	_BlinkPauseText
                                   5843 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001BD0 2E 07            [ 7] 5844 	ld	l, #0x07
      001BD2 CDr00r00         [17] 5845 	call	_SNSMAT
                                   5846 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001BD5 CB 55            [ 8] 5847 	bit	2, l
      001BD7 28 F4            [12] 5848 	jr	Z, 00114$
                                   5849 ;src\/GameLogic.h:73: while(TRUE) {
      001BD9                       5850 00109$:
                                   5851 ;src\/GameLogic.h:75: BlinkPauseText();
      001BD9 CDr9Cr1B         [17] 5852 	call	_BlinkPauseText
                                   5853 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001BDC 2E 07            [ 7] 5854 	ld	l, #0x07
      001BDE CDr00r00         [17] 5855 	call	_SNSMAT
                                   5856 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001BE1 CB 55            [ 8] 5857 	bit	2, l
      001BE3 20 F4            [12] 5858 	jr	NZ, 00109$
                                   5859 ;src\/GameLogic.h:81: while(TRUE) {
      001BE5                       5860 00104$:
                                   5861 ;src\/GameLogic.h:83: BlinkPauseText();
      001BE5 CDr9Cr1B         [17] 5862 	call	_BlinkPauseText
                                   5863 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001BE8 2E 07            [ 7] 5864 	ld	l, #0x07
      001BEA CDr00r00         [17] 5865 	call	_SNSMAT
                                   5866 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001BED CB 55            [ 8] 5867 	bit	2, l
      001BEF 28 F4            [12] 5868 	jr	Z, 00104$
                                   5869 ;src\/GameLogic.h:89: DrawLine(6);
      001BF1 3E 06            [ 7] 5870 	ld	a, #0x06
      001BF3 F5               [11] 5871 	push	af
      001BF4 33               [ 6] 5872 	inc	sp
      001BF5 CDr7Er11         [17] 5873 	call	_DrawLine
      001BF8 33               [ 6] 5874 	inc	sp
                                   5875 ;src\/GameLogic.h:90: return;
                                   5876 ;src\/GameLogic.h:100: }
      001BF9 C9               [10] 5877 	ret
      001BFA                       5878 ___str_5:
      001BFA 50 41 55 53 45        5879 	.ascii "PAUSE"
      001BFF 00                    5880 	.db 0x00
                                   5881 ;src\/GameLogic.h:102: void GameLoop() {
                                   5882 ;	---------------------------------
                                   5883 ; Function GameLoop
                                   5884 ; ---------------------------------
      001C00                       5885 _GameLoop::
      001C00 DD E5            [15] 5886 	push	ix
      001C02 DD 21 00 00      [14] 5887 	ld	ix,#0
      001C06 DD 39            [15] 5888 	add	ix,sp
      001C08 21 F3 FF         [10] 5889 	ld	hl, #-13
      001C0B 39               [11] 5890 	add	hl, sp
      001C0C F9               [ 6] 5891 	ld	sp, hl
                                   5892 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001C0D DD 36 FF 00      [19] 5893 	ld	-1 (ix), #0
      001C11 DD 36 F3 00      [19] 5894 	ld	-13 (ix), #0
                                   5895 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001C15 DD 36 F4 00      [19] 5896 	ld	-12 (ix), #0
      001C19 DD 36 F5 00      [19] 5897 	ld	-11 (ix), #0
                                   5898 ;src\/GameLogic.h:109: while(!gameOver) {
      001C1D                       5899 00150$:
      001C1D 3Ar00r00         [13] 5900 	ld	a,(#_gameOver + 0)
      001C20 B7               [ 4] 5901 	or	a, a
      001C21 C2rB8r1F         [10] 5902 	jp	NZ, 00152$
                                   5903 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001C24 ED 4B 9E FC      [20] 5904 	ld	bc, (_JIFFY)
                                   5905 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001C28                       5906 00101$:
      001C28 2A 9E FC         [16] 5907 	ld	hl, (_JIFFY)
      001C2B BF               [ 4] 5908 	cp	a, a
      001C2C ED 42            [15] 5909 	sbc	hl, bc
      001C2E 28 F8            [12] 5910 	jr	Z, 00101$
                                   5911 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001C30 ED 4Br01r00      [20] 5912 	ld	bc, (_col)
      001C34 06 00            [ 7] 5913 	ld	b, #0x00
      001C36 69               [ 4] 5914 	ld	l, c
      001C37 60               [ 4] 5915 	ld	h, b
      001C38 29               [11] 5916 	add	hl, hl
      001C39 09               [11] 5917 	add	hl, bc
      001C3A 29               [11] 5918 	add	hl, hl
      001C3B 29               [11] 5919 	add	hl, hl
      001C3C EB               [ 4] 5920 	ex	de, hl
      001C3D 21r00r00         [10] 5921 	ld	hl, #_playfield
      001C40 19               [11] 5922 	add	hl, de
      001C41 EB               [ 4] 5923 	ex	de, hl
      001C42 FD 21r02r00      [14] 5924 	ld	iy, #_line
      001C46 FD 6E 00         [19] 5925 	ld	l, 0 (iy)
      001C49 26 00            [ 7] 5926 	ld	h, #0x00
      001C4B 19               [11] 5927 	add	hl, de
      001C4C 36 00            [10] 5928 	ld	(hl), #0x00
                                   5929 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001C4E ED 4Br01r00      [20] 5930 	ld	bc, (_col)
      001C52 06 00            [ 7] 5931 	ld	b, #0x00
      001C54 69               [ 4] 5932 	ld	l, c
      001C55 60               [ 4] 5933 	ld	h, b
      001C56 29               [11] 5934 	add	hl, hl
      001C57 09               [11] 5935 	add	hl, bc
      001C58 29               [11] 5936 	add	hl, hl
      001C59 29               [11] 5937 	add	hl, hl
      001C5A EB               [ 4] 5938 	ex	de, hl
      001C5B 21r00r00         [10] 5939 	ld	hl, #_playfield
      001C5E 19               [11] 5940 	add	hl, de
      001C5F EB               [ 4] 5941 	ex	de, hl
      001C60 FD 6E 00         [19] 5942 	ld	l, 0 (iy)
      001C63 2C               [ 4] 5943 	inc	l
      001C64 26 00            [ 7] 5944 	ld	h, #0x00
      001C66 19               [11] 5945 	add	hl, de
      001C67 36 00            [10] 5946 	ld	(hl), #0x00
                                   5947 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001C69 ED 4Br01r00      [20] 5948 	ld	bc, (_col)
      001C6D 06 00            [ 7] 5949 	ld	b, #0x00
      001C6F 69               [ 4] 5950 	ld	l, c
      001C70 60               [ 4] 5951 	ld	h, b
      001C71 29               [11] 5952 	add	hl, hl
      001C72 09               [11] 5953 	add	hl, bc
      001C73 29               [11] 5954 	add	hl, hl
      001C74 29               [11] 5955 	add	hl, hl
      001C75 EB               [ 4] 5956 	ex	de, hl
      001C76 21r00r00         [10] 5957 	ld	hl, #_playfield
      001C79 19               [11] 5958 	add	hl, de
      001C7A EB               [ 4] 5959 	ex	de, hl
      001C7B FD 6E 00         [19] 5960 	ld	l, 0 (iy)
      001C7E 2C               [ 4] 5961 	inc	l
      001C7F 2C               [ 4] 5962 	inc	l
      001C80 26 00            [ 7] 5963 	ld	h, #0x00
      001C82 19               [11] 5964 	add	hl, de
      001C83 36 00            [10] 5965 	ld	(hl), #0x00
                                   5966 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001C85 2E 01            [ 7] 5967 	ld	l, #0x01
      001C87 CDr00r00         [17] 5968 	call	_GTSTCK
      001C8A DD 75 F6         [19] 5969 	ld	-10 (ix), l
                                   5970 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001C8D 2E 01            [ 7] 5971 	ld	l, #0x01
      001C8F CDr00r00         [17] 5972 	call	_GTTRIG
      001C92 DD 75 F7         [19] 5973 	ld	-9 (ix), l
                                   5974 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001C95 2E 03            [ 7] 5975 	ld	l, #0x03
      001C97 CDr00r00         [17] 5976 	call	_GTTRIG
      001C9A DD 75 F8         [19] 5977 	ld	-8 (ix), l
                                   5978 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001C9D DD 7E F6         [19] 5979 	ld	a, -10 (ix)
                                   5980 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001CA0 B7               [ 4] 5981 	or	a,a
      001CA1 20 07            [12] 5982 	jr	NZ, 00105$
      001CA3 6F               [ 4] 5983 	ld	l,a
      001CA4 CDr00r00         [17] 5984 	call	_GTSTCK
      001CA7 DD 75 F6         [19] 5985 	ld	-10 (ix), l
      001CAA                       5986 00105$:
                                   5987 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001CAA FD 21r02r00      [14] 5988 	ld	iy, #_line
      001CAE FD 7E 00         [19] 5989 	ld	a, 0 (iy)
      001CB1 DD 77 F9         [19] 5990 	ld	-7 (ix), a
                                   5991 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001CB4 DD 7E FF         [19] 5992 	ld	a, -1 (ix)
      001CB7 B7               [ 4] 5993 	or	a, a
      001CB8 C2rA1r1D         [10] 5994 	jp	NZ, 00118$
                                   5995 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001CBB FD 7E 00         [19] 5996 	ld	a, 0 (iy)
      001CBE DD 77 FF         [19] 5997 	ld	-1 (ix), a
                                   5998 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001CC1 FD 21r01r00      [14] 5999 	ld	iy, #_col
      001CC5 FD 7E 00         [19] 6000 	ld	a, 0 (iy)
      001CC8 DD 77 FA         [19] 6001 	ld	-6 (ix), a
                                   6002 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001CCB DD 7E FF         [19] 6003 	ld	a, -1 (ix)
      001CCE C6 02            [ 7] 6004 	add	a, #0x02
      001CD0 DD 77 FB         [19] 6005 	ld	-5 (ix), a
                                   6006 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001CD3 DD 7E F6         [19] 6007 	ld	a, -10 (ix)
      001CD6 D6 07            [ 7] 6008 	sub	a, #0x07
      001CD8 20 5F            [12] 6009 	jr	NZ, 00112$
                                   6010 ;src\/GameLogic.h:139: col > 0 && 
      001CDA FD 7E 00         [19] 6011 	ld	a, 0 (iy)
      001CDD B7               [ 4] 6012 	or	a, a
      001CDE 28 59            [12] 6013 	jr	Z, 00112$
                                   6014 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001CE0 DD 7E FA         [19] 6015 	ld	a, -6 (ix)
      001CE3 C6 FF            [ 7] 6016 	add	a, #0xff
      001CE5 DD 77 FF         [19] 6017 	ld	-1 (ix), a
      001CE8 4F               [ 4] 6018 	ld	c, a
      001CE9 07               [ 4] 6019 	rlca
      001CEA 9F               [ 4] 6020 	sbc	a, a
      001CEB 47               [ 4] 6021 	ld	b, a
      001CEC 69               [ 4] 6022 	ld	l, c
      001CED 60               [ 4] 6023 	ld	h, b
      001CEE 29               [11] 6024 	add	hl, hl
      001CEF 09               [11] 6025 	add	hl, bc
      001CF0 29               [11] 6026 	add	hl, hl
      001CF1 29               [11] 6027 	add	hl, hl
      001CF2 DD 75 FE         [19] 6028 	ld	-2 (ix), l
      001CF5 DD 74 FF         [19] 6029 	ld	-1 (ix), h
      001CF8 3Er00            [ 7] 6030 	ld	a, #<(_playfield)
      001CFA DD 86 FE         [19] 6031 	add	a, -2 (ix)
      001CFD DD 77 FC         [19] 6032 	ld	-4 (ix), a
      001D00 3Es00            [ 7] 6033 	ld	a, #>(_playfield)
      001D02 DD 8E FF         [19] 6034 	adc	a, -1 (ix)
      001D05 DD 77 FD         [19] 6035 	ld	-3 (ix), a
      001D08 DD 7E FC         [19] 6036 	ld	a, -4 (ix)
      001D0B DD 86 F9         [19] 6037 	add	a, -7 (ix)
      001D0E DD 77 FE         [19] 6038 	ld	-2 (ix), a
      001D11 DD 7E FD         [19] 6039 	ld	a, -3 (ix)
      001D14 CE 00            [ 7] 6040 	adc	a, #0x00
      001D16 DD 77 FF         [19] 6041 	ld	-1 (ix), a
      001D19 DD 6E FE         [19] 6042 	ld	l, -2 (ix)
      001D1C DD 66 FF         [19] 6043 	ld	h, -1 (ix)
      001D1F 7E               [ 7] 6044 	ld	a, (hl)
      001D20 B7               [ 4] 6045 	or	a, a
      001D21 20 16            [12] 6046 	jr	NZ, 00112$
                                   6047 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001D23 DD 7E FC         [19] 6048 	ld	a, -4 (ix)
      001D26 DD 86 FB         [19] 6049 	add	a, -5 (ix)
      001D29 4F               [ 4] 6050 	ld	c, a
      001D2A DD 7E FD         [19] 6051 	ld	a, -3 (ix)
      001D2D CE 00            [ 7] 6052 	adc	a, #0x00
      001D2F 47               [ 4] 6053 	ld	b, a
      001D30 0A               [ 7] 6054 	ld	a, (bc)
      001D31 B7               [ 4] 6055 	or	a, a
      001D32 20 05            [12] 6056 	jr	NZ, 00112$
                                   6057 ;src\/GameLogic.h:142: col--;
      001D34 FD 35 00         [23] 6058 	dec	0 (iy)
      001D37 18 68            [12] 6059 	jr	00118$
      001D39                       6060 00112$:
                                   6061 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001D39 DD 7E F6         [19] 6062 	ld	a, -10 (ix)
      001D3C D6 03            [ 7] 6063 	sub	a, #0x03
      001D3E 20 61            [12] 6064 	jr	NZ, 00118$
                                   6065 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001D40 FD 21r01r00      [14] 6066 	ld	iy, #_col
      001D44 FD 7E 00         [19] 6067 	ld	a, 0 (iy)
      001D47 D6 05            [ 7] 6068 	sub	a, #0x05
      001D49 30 56            [12] 6069 	jr	NC, 00118$
                                   6070 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001D4B DD 7E FA         [19] 6071 	ld	a, -6 (ix)
      001D4E 3C               [ 4] 6072 	inc	a
      001D4F DD 77 FF         [19] 6073 	ld	-1 (ix), a
      001D52 4F               [ 4] 6074 	ld	c, a
      001D53 07               [ 4] 6075 	rlca
      001D54 9F               [ 4] 6076 	sbc	a, a
      001D55 47               [ 4] 6077 	ld	b, a
      001D56 69               [ 4] 6078 	ld	l, c
      001D57 60               [ 4] 6079 	ld	h, b
      001D58 29               [11] 6080 	add	hl, hl
      001D59 09               [11] 6081 	add	hl, bc
      001D5A 29               [11] 6082 	add	hl, hl
      001D5B 29               [11] 6083 	add	hl, hl
      001D5C DD 75 FE         [19] 6084 	ld	-2 (ix), l
      001D5F DD 74 FF         [19] 6085 	ld	-1 (ix), h
      001D62 3Er00            [ 7] 6086 	ld	a, #<(_playfield)
      001D64 DD 86 FE         [19] 6087 	add	a, -2 (ix)
      001D67 DD 77 FC         [19] 6088 	ld	-4 (ix), a
      001D6A 3Es00            [ 7] 6089 	ld	a, #>(_playfield)
      001D6C DD 8E FF         [19] 6090 	adc	a, -1 (ix)
      001D6F DD 77 FD         [19] 6091 	ld	-3 (ix), a
      001D72 DD 7E FC         [19] 6092 	ld	a, -4 (ix)
      001D75 DD 86 F9         [19] 6093 	add	a, -7 (ix)
      001D78 DD 77 FE         [19] 6094 	ld	-2 (ix), a
      001D7B DD 7E FD         [19] 6095 	ld	a, -3 (ix)
      001D7E CE 00            [ 7] 6096 	adc	a, #0x00
      001D80 DD 77 FF         [19] 6097 	ld	-1 (ix), a
      001D83 DD 6E FE         [19] 6098 	ld	l, -2 (ix)
      001D86 DD 66 FF         [19] 6099 	ld	h, -1 (ix)
      001D89 7E               [ 7] 6100 	ld	a, (hl)
      001D8A B7               [ 4] 6101 	or	a, a
      001D8B 20 14            [12] 6102 	jr	NZ, 00118$
                                   6103 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001D8D DD 7E FC         [19] 6104 	ld	a, -4 (ix)
      001D90 DD 86 FB         [19] 6105 	add	a, -5 (ix)
      001D93 4F               [ 4] 6106 	ld	c, a
      001D94 DD 7E FD         [19] 6107 	ld	a, -3 (ix)
      001D97 CE 00            [ 7] 6108 	adc	a, #0x00
      001D99 47               [ 4] 6109 	ld	b, a
      001D9A 0A               [ 7] 6110 	ld	a, (bc)
      001D9B B7               [ 4] 6111 	or	a, a
      001D9C 20 03            [12] 6112 	jr	NZ, 00118$
                                   6113 ;src\/GameLogic.h:148: col++;
      001D9E FD 34 00         [23] 6114 	inc	0 (iy)
      001DA1                       6115 00118$:
                                   6116 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001DA1 DD 7E F3         [19] 6117 	ld	a, -13 (ix)
      001DA4 B7               [ 4] 6118 	or	a, a
      001DA5 C2r67r1E         [10] 6119 	jp	NZ, 00132$
                                   6120 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001DA8 DD 7E F6         [19] 6121 	ld	a, -10 (ix)
      001DAB 3D               [ 4] 6122 	dec	a
      001DAC 28 18            [12] 6123 	jr	Z, 00119$
      001DAE DD 7E F4         [19] 6124 	ld	a, -12 (ix)
      001DB1 B7               [ 4] 6125 	or	a, a
      001DB2 20 06            [12] 6126 	jr	NZ, 00124$
      001DB4 DD 7E F7         [19] 6127 	ld	a, -9 (ix)
      001DB7 3C               [ 4] 6128 	inc	a
      001DB8 28 0C            [12] 6129 	jr	Z, 00119$
      001DBA                       6130 00124$:
      001DBA DD 7E F5         [19] 6131 	ld	a, -11 (ix)
      001DBD B7               [ 4] 6132 	or	a, a
      001DBE 20 1A            [12] 6133 	jr	NZ, 00120$
      001DC0 DD 7E F8         [19] 6134 	ld	a, -8 (ix)
      001DC3 3C               [ 4] 6135 	inc	a
      001DC4 20 14            [12] 6136 	jr	NZ, 00120$
      001DC6                       6137 00119$:
                                   6138 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001DC6 3Ar92r00         [13] 6139 	ld	a, (#_bottomPiece + 0)
      001DC9 4F               [ 4] 6140 	ld	c, a
                                   6141 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001DCA 3Ar91r00         [13] 6142 	ld	a,(#_midPiece + 0)
      001DCD 32r92r00         [13] 6143 	ld	(#_bottomPiece),a
                                   6144 ;src\/GameLogic.h:160: midPiece = topPiece;
      001DD0 3Ar90r00         [13] 6145 	ld	a,(#_topPiece + 0)
      001DD3 32r91r00         [13] 6146 	ld	(#_midPiece),a
                                   6147 ;src\/GameLogic.h:161: topPiece = temp;
      001DD6 21r90r00         [10] 6148 	ld	hl, #_topPiece
      001DD9 71               [ 7] 6149 	ld	(hl), c
      001DDA                       6150 00120$:
                                   6151 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001DDA DD 7E F6         [19] 6152 	ld	a, -10 (ix)
      001DDD D6 05            [ 7] 6153 	sub	a, #0x05
      001DDF C2r67r1E         [10] 6154 	jp	NZ,00132$
                                   6155 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001DE2 DD 7E F9         [19] 6156 	ld	a, -7 (ix)
      001DE5 DD 77 FE         [19] 6157 	ld	-2 (ix), a
      001DE8 DD 7E F9         [19] 6158 	ld	a, -7 (ix)
      001DEB DD 77 FF         [19] 6159 	ld	-1 (ix), a
      001DEE                       6160 00154$:
      001DEE DD 7E FF         [19] 6161 	ld	a, -1 (ix)
      001DF1 D6 0C            [ 7] 6162 	sub	a, #0x0c
      001DF3 30 72            [12] 6163 	jr	NC, 00132$
                                   6164 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001DF5 DD 7E FF         [19] 6165 	ld	a, -1 (ix)
      001DF8 D6 09            [ 7] 6166 	sub	a, #0x09
      001DFA 28 4C            [12] 6167 	jr	Z, 00125$
      001DFC ED 4Br01r00      [20] 6168 	ld	bc, (_col)
      001E00 06 00            [ 7] 6169 	ld	b, #0x00
      001E02 69               [ 4] 6170 	ld	l, c
      001E03 60               [ 4] 6171 	ld	h, b
      001E04 29               [11] 6172 	add	hl, hl
      001E05 09               [11] 6173 	add	hl, bc
      001E06 29               [11] 6174 	add	hl, hl
      001E07 29               [11] 6175 	add	hl, hl
      001E08 DD 75 FC         [19] 6176 	ld	-4 (ix), l
      001E0B DD 74 FD         [19] 6177 	ld	-3 (ix), h
      001E0E 3Er00            [ 7] 6178 	ld	a, #<(_playfield)
      001E10 DD 86 FC         [19] 6179 	add	a, -4 (ix)
      001E13 DD 77 FA         [19] 6180 	ld	-6 (ix), a
      001E16 3Es00            [ 7] 6181 	ld	a, #>(_playfield)
      001E18 DD 8E FD         [19] 6182 	adc	a, -3 (ix)
      001E1B DD 77 FB         [19] 6183 	ld	-5 (ix), a
      001E1E DD 7E FF         [19] 6184 	ld	a, -1 (ix)
      001E21 DD 77 FD         [19] 6185 	ld	-3 (ix), a
      001E24 DD 34 FD         [23] 6186 	inc	-3 (ix)
      001E27 DD 34 FD         [23] 6187 	inc	-3 (ix)
      001E2A DD 34 FD         [23] 6188 	inc	-3 (ix)
      001E2D DD 7E FD         [19] 6189 	ld	a, -3 (ix)
      001E30 DD 86 FA         [19] 6190 	add	a, -6 (ix)
      001E33 DD 77 FC         [19] 6191 	ld	-4 (ix), a
      001E36 3E 00            [ 7] 6192 	ld	a, #0x00
      001E38 DD 8E FB         [19] 6193 	adc	a, -5 (ix)
      001E3B DD 77 FD         [19] 6194 	ld	-3 (ix), a
      001E3E DD 6E FC         [19] 6195 	ld	l, -4 (ix)
      001E41 DD 66 FD         [19] 6196 	ld	h, -3 (ix)
      001E44 7E               [ 7] 6197 	ld	a, (hl)
      001E45 B7               [ 4] 6198 	or	a, a
      001E46 28 14            [12] 6199 	jr	Z, 00155$
      001E48                       6200 00125$:
                                   6201 ;src\/GameLogic.h:170: DrawPiece(line);
      001E48 3Ar02r00         [13] 6202 	ld	a,(#_line + 0)
      001E4B F5               [11] 6203 	push	af
      001E4C 33               [ 6] 6204 	inc	sp
      001E4D CDrB6r11         [17] 6205 	call	_DrawPiece
      001E50 33               [ 6] 6206 	inc	sp
                                   6207 ;src\/GameLogic.h:172: line = i;
      001E51 DD 7E FE         [19] 6208 	ld	a, -2 (ix)
      001E54 32r02r00         [13] 6209 	ld	(#_line),a
                                   6210 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001E57 CDr08r1B         [17] 6211 	call	_UpdateAndDrawPieceStatic
                                   6212 ;src\/GameLogic.h:175: break;
      001E5A 18 0B            [12] 6213 	jr	00132$
      001E5C                       6214 00155$:
                                   6215 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001E5C DD 34 FF         [23] 6216 	inc	-1 (ix)
      001E5F DD 7E FF         [19] 6217 	ld	a, -1 (ix)
      001E62 DD 77 FE         [19] 6218 	ld	-2 (ix), a
      001E65 18 87            [12] 6219 	jr	00154$
      001E67                       6220 00132$:
                                   6221 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001E67 DD 7E F6         [19] 6222 	ld	a, -10 (ix)
      001E6A DD 77 FF         [19] 6223 	ld	-1 (ix), a
                                   6224 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001E6D DD 7E F6         [19] 6225 	ld	a, -10 (ix)
      001E70 DD 77 F3         [19] 6226 	ld	-13 (ix), a
                                   6227 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      001E73 DD 7E F7         [19] 6228 	ld	a, -9 (ix)
      001E76 DD 77 F4         [19] 6229 	ld	-12 (ix), a
                                   6230 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      001E79 DD 7E F8         [19] 6231 	ld	a, -8 (ix)
      001E7C DD 77 F5         [19] 6232 	ld	-11 (ix), a
                                   6233 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      001E7F 2E 07            [ 7] 6234 	ld	l, #0x07
      001E81 CDr00r00         [17] 6235 	call	_SNSMAT
                                   6236 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      001E84 CB 55            [ 8] 6237 	bit	2, l
      001E86 20 03            [12] 6238 	jr	NZ, 00134$
                                   6239 ;src\/GameLogic.h:214: Pause();
      001E88 CDrC0r1B         [17] 6240 	call	_Pause
      001E8B                       6241 00134$:
                                   6242 ;src\/GameLogic.h:219: counter++;
      001E8B FD 21r03r00      [14] 6243 	ld	iy, #_counter
      001E8F FD 34 00         [23] 6244 	inc	0 (iy)
                                   6245 ;src\/GameLogic.h:220: if(counter == speed) {
      001E92 FD 7E 00         [19] 6246 	ld	a, 0 (iy)
      001E95 21r93r00         [10] 6247 	ld	hl, #_speed
      001E98 96               [ 7] 6248 	sub	a, (hl)
      001E99 20 3F            [12] 6249 	jr	NZ, 00139$
                                   6250 ;src\/GameLogic.h:222: counter = 0;
      001E9B 21r03r00         [10] 6251 	ld	hl, #_counter
      001E9E 36 00            [10] 6252 	ld	(hl), #0x00
                                   6253 ;src\/GameLogic.h:225: DrawPiece(line);
      001EA0 3Ar02r00         [13] 6254 	ld	a,(#_line + 0)
      001EA3 F5               [11] 6255 	push	af
      001EA4 33               [ 6] 6256 	inc	sp
      001EA5 CDrB6r11         [17] 6257 	call	_DrawPiece
      001EA8 33               [ 6] 6258 	inc	sp
                                   6259 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      001EA9 FD 21r02r00      [14] 6260 	ld	iy, #_line
      001EAD FD 7E 00         [19] 6261 	ld	a, 0 (iy)
      001EB0 D6 09            [ 7] 6262 	sub	a, #0x09
      001EB2 28 1F            [12] 6263 	jr	Z, 00135$
      001EB4 ED 4Br01r00      [20] 6264 	ld	bc, (_col)
      001EB8 06 00            [ 7] 6265 	ld	b, #0x00
      001EBA 69               [ 4] 6266 	ld	l, c
      001EBB 60               [ 4] 6267 	ld	h, b
      001EBC 29               [11] 6268 	add	hl, hl
      001EBD 09               [11] 6269 	add	hl, bc
      001EBE 29               [11] 6270 	add	hl, hl
      001EBF 29               [11] 6271 	add	hl, hl
      001EC0 EB               [ 4] 6272 	ex	de, hl
      001EC1 21r00r00         [10] 6273 	ld	hl, #_playfield
      001EC4 19               [11] 6274 	add	hl, de
      001EC5 EB               [ 4] 6275 	ex	de, hl
      001EC6 FD 7E 00         [19] 6276 	ld	a, 0 (iy)
      001EC9 C6 03            [ 7] 6277 	add	a, #0x03
      001ECB 6F               [ 4] 6278 	ld	l, a
      001ECC 26 00            [ 7] 6279 	ld	h, #0x00
      001ECE 19               [11] 6280 	add	hl, de
      001ECF 7E               [ 7] 6281 	ld	a, (hl)
      001ED0 B7               [ 4] 6282 	or	a, a
      001ED1 28 03            [12] 6283 	jr	Z, 00136$
      001ED3                       6284 00135$:
                                   6285 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      001ED3 CDr08r1B         [17] 6286 	call	_UpdateAndDrawPieceStatic
      001ED6                       6287 00136$:
                                   6288 ;src\/GameLogic.h:234: line++;
      001ED6 21r02r00         [10] 6289 	ld	hl, #_line
      001ED9 34               [11] 6290 	inc	(hl)
      001EDA                       6291 00139$:
                                   6292 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      001EDA ED 4Br01r00      [20] 6293 	ld	bc, (_col)
      001EDE 06 00            [ 7] 6294 	ld	b, #0x00
      001EE0 69               [ 4] 6295 	ld	l, c
      001EE1 60               [ 4] 6296 	ld	h, b
      001EE2 29               [11] 6297 	add	hl, hl
      001EE3 09               [11] 6298 	add	hl, bc
      001EE4 29               [11] 6299 	add	hl, hl
      001EE5 29               [11] 6300 	add	hl, hl
      001EE6 EB               [ 4] 6301 	ex	de, hl
      001EE7 21r00r00         [10] 6302 	ld	hl, #_playfield
      001EEA 19               [11] 6303 	add	hl, de
      001EEB EB               [ 4] 6304 	ex	de, hl
      001EEC 3Ar02r00         [13] 6305 	ld	a, (#_line + 0)
      001EEF 6F               [ 4] 6306 	ld	l, a
      001EF0 26 00            [ 7] 6307 	ld	h, #0x00
      001EF2 19               [11] 6308 	add	hl, de
      001EF3 3Ar90r00         [13] 6309 	ld	a,(#_topPiece + 0)
      001EF6 77               [ 7] 6310 	ld	(hl), a
                                   6311 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      001EF7 ED 4Br01r00      [20] 6312 	ld	bc, (_col)
      001EFB 06 00            [ 7] 6313 	ld	b, #0x00
      001EFD 69               [ 4] 6314 	ld	l, c
      001EFE 60               [ 4] 6315 	ld	h, b
      001EFF 29               [11] 6316 	add	hl, hl
      001F00 09               [11] 6317 	add	hl, bc
      001F01 29               [11] 6318 	add	hl, hl
      001F02 29               [11] 6319 	add	hl, hl
      001F03 EB               [ 4] 6320 	ex	de, hl
      001F04 21r00r00         [10] 6321 	ld	hl, #_playfield
      001F07 19               [11] 6322 	add	hl, de
      001F08 EB               [ 4] 6323 	ex	de, hl
      001F09 3Ar02r00         [13] 6324 	ld	a, (#_line + 0)
      001F0C 6F               [ 4] 6325 	ld	l, a
      001F0D 2C               [ 4] 6326 	inc	l
      001F0E 26 00            [ 7] 6327 	ld	h, #0x00
      001F10 19               [11] 6328 	add	hl, de
      001F11 3Ar91r00         [13] 6329 	ld	a,(#_midPiece + 0)
      001F14 77               [ 7] 6330 	ld	(hl), a
                                   6331 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      001F15 ED 4Br01r00      [20] 6332 	ld	bc, (_col)
      001F19 06 00            [ 7] 6333 	ld	b, #0x00
      001F1B 69               [ 4] 6334 	ld	l, c
      001F1C 60               [ 4] 6335 	ld	h, b
      001F1D 29               [11] 6336 	add	hl, hl
      001F1E 09               [11] 6337 	add	hl, bc
      001F1F 29               [11] 6338 	add	hl, hl
      001F20 29               [11] 6339 	add	hl, hl
      001F21 EB               [ 4] 6340 	ex	de, hl
      001F22 21r00r00         [10] 6341 	ld	hl, #_playfield
      001F25 19               [11] 6342 	add	hl, de
      001F26 EB               [ 4] 6343 	ex	de, hl
      001F27 3Ar02r00         [13] 6344 	ld	a, (#_line + 0)
      001F2A 6F               [ 4] 6345 	ld	l, a
      001F2B 2C               [ 4] 6346 	inc	l
      001F2C 2C               [ 4] 6347 	inc	l
      001F2D 26 00            [ 7] 6348 	ld	h, #0x00
      001F2F 19               [11] 6349 	add	hl, de
      001F30 3Ar92r00         [13] 6350 	ld	a,(#_bottomPiece + 0)
      001F33 77               [ 7] 6351 	ld	(hl), a
                                   6352 ;src\/GameLogic.h:248: DrawPiece(line);
      001F34 3Ar02r00         [13] 6353 	ld	a,(#_line + 0)
      001F37 F5               [11] 6354 	push	af
      001F38 33               [ 6] 6355 	inc	sp
      001F39 CDrB6r11         [17] 6356 	call	_DrawPiece
      001F3C 33               [ 6] 6357 	inc	sp
                                   6358 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001F3D ED 4Br01r00      [20] 6359 	ld	bc, (_col)
      001F41 06 00            [ 7] 6360 	ld	b, #0x00
      001F43 69               [ 4] 6361 	ld	l, c
      001F44 60               [ 4] 6362 	ld	h, b
      001F45 29               [11] 6363 	add	hl, hl
      001F46 09               [11] 6364 	add	hl, bc
      001F47 29               [11] 6365 	add	hl, hl
      001F48 29               [11] 6366 	add	hl, hl
      001F49 EB               [ 4] 6367 	ex	de, hl
                                   6368 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      001F4A 21r00r00         [10] 6369 	ld	hl, #_playfield
      001F4D 19               [11] 6370 	add	hl, de
      001F4E EB               [ 4] 6371 	ex	de, hl
      001F4F 3Ar02r00         [13] 6372 	ld	a,(#_line + 0)
      001F52 C6 03            [ 7] 6373 	add	a, #0x03
      001F54 4F               [ 4] 6374 	ld	c, a
      001F55 69               [ 4] 6375 	ld	l, c
      001F56 26 00            [ 7] 6376 	ld	h, #0x00
      001F58 19               [11] 6377 	add	hl, de
      001F59 7E               [ 7] 6378 	ld	a, (hl)
      001F5A B7               [ 4] 6379 	or	a, a
      001F5B 28 06            [12] 6380 	jr	Z, 00148$
                                   6381 ;src\/GameLogic.h:254: HideArrow();
      001F5D CDr16r0D         [17] 6382 	call	_HideArrow
      001F60 C3r1Dr1C         [10] 6383 	jp	00150$
      001F63                       6384 00148$:
                                   6385 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001F63 41               [ 4] 6386 	ld	b, c
      001F64                       6387 00157$:
      001F64 78               [ 4] 6388 	ld	a, b
      001F65 D6 0C            [ 7] 6389 	sub	a, #0x0c
      001F67 D2r1Dr1C         [10] 6390 	jp	NC, 00150$
                                   6391 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F6A 3Ar01r00         [13] 6392 	ld	a,(#_col + 0)
      001F6D 87               [ 4] 6393 	add	a, a
      001F6E 87               [ 4] 6394 	add	a, a
      001F6F 87               [ 4] 6395 	add	a, a
      001F70 87               [ 4] 6396 	add	a, a
      001F71 DD 77 FE         [19] 6397 	ld	-2 (ix), a
                                   6398 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001F74 68               [ 4] 6399 	ld	l, b
      001F75 26 00            [ 7] 6400 	ld	h, #0x00
      001F77 19               [11] 6401 	add	hl, de
                                   6402 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F78 DD 7E FE         [19] 6403 	ld	a, -2 (ix)
      001F7B C6 50            [ 7] 6404 	add	a, #0x50
      001F7D DD 77 FE         [19] 6405 	ld	-2 (ix), a
                                   6406 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001F80 6E               [ 7] 6407 	ld	l, (hl)
      001F81 78               [ 4] 6408 	ld	a, b
      001F82 D6 0B            [ 7] 6409 	sub	a,#0x0b
      001F84 20 16            [12] 6410 	jr	NZ, 00143$
      001F86 B5               [ 4] 6411 	or	a,l
      001F87 20 13            [12] 6412 	jr	NZ, 00143$
                                   6413 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001F89 79               [ 4] 6414 	ld	a, c
      001F8A 87               [ 4] 6415 	add	a, a
      001F8B 87               [ 4] 6416 	add	a, a
      001F8C 87               [ 4] 6417 	add	a, a
      001F8D 87               [ 4] 6418 	add	a, a
      001F8E F5               [11] 6419 	push	af
      001F8F 33               [ 6] 6420 	inc	sp
      001F90 DD 7E FE         [19] 6421 	ld	a, -2 (ix)
      001F93 F5               [11] 6422 	push	af
      001F94 33               [ 6] 6423 	inc	sp
      001F95 CDr8Br0C         [17] 6424 	call	_DrawArrow
      001F98 F1               [10] 6425 	pop	af
                                   6426 ;src\/GameLogic.h:260: break;
      001F99 C3r1Dr1C         [10] 6427 	jp	00150$
      001F9C                       6428 00143$:
                                   6429 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      001F9C 7D               [ 4] 6430 	ld	a, l
      001F9D B7               [ 4] 6431 	or	a, a
      001F9E 28 14            [12] 6432 	jr	Z, 00158$
                                   6433 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      001FA0 79               [ 4] 6434 	ld	a, c
      001FA1 3D               [ 4] 6435 	dec	a
      001FA2 87               [ 4] 6436 	add	a, a
      001FA3 87               [ 4] 6437 	add	a, a
      001FA4 87               [ 4] 6438 	add	a, a
      001FA5 87               [ 4] 6439 	add	a, a
      001FA6 F5               [11] 6440 	push	af
      001FA7 33               [ 6] 6441 	inc	sp
      001FA8 DD 7E FE         [19] 6442 	ld	a, -2 (ix)
      001FAB F5               [11] 6443 	push	af
      001FAC 33               [ 6] 6444 	inc	sp
      001FAD CDr8Br0C         [17] 6445 	call	_DrawArrow
      001FB0 F1               [10] 6446 	pop	af
                                   6447 ;src\/GameLogic.h:264: break;
      001FB1 C3r1Dr1C         [10] 6448 	jp	00150$
      001FB4                       6449 00158$:
                                   6450 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001FB4 04               [ 4] 6451 	inc	b
      001FB5 48               [ 4] 6452 	ld	c, b
      001FB6 18 AC            [12] 6453 	jr	00157$
      001FB8                       6454 00152$:
                                   6455 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      001FB8 11 0C 0C         [10] 6456 	ld	de, #0x0c0c
      001FBB D5               [11] 6457 	push	de
      001FBC 21rD0r1F         [10] 6458 	ld	hl, #___str_6
      001FBF E5               [11] 6459 	push	hl
      001FC0 CDr47r08         [17] 6460 	call	_DrawString
      001FC3 F1               [10] 6461 	pop	af
                                   6462 ;src\/GameLogic.h:276: Wait(60 * 3);
      001FC4 21 B4 00         [10] 6463 	ld	hl, #0x00b4
      001FC7 E3               [19] 6464 	ex	(sp),hl
      001FC8 CDr00r00         [17] 6465 	call	_Wait
                                   6466 ;src\/GameLogic.h:278: }
      001FCB DD F9            [10] 6467 	ld	sp,ix
      001FCD DD E1            [14] 6468 	pop	ix
      001FCF C9               [10] 6469 	ret
      001FD0                       6470 ___str_6:
      001FD0 47 41 4D 45 20 4F 56  6471 	.ascii "GAME OVER"
             45 52
      001FD9 00                    6472 	.db 0x00
                                   6473 ;src\/GameLogic.h:280: void TestCase() {
                                   6474 ;	---------------------------------
                                   6475 ; Function TestCase
                                   6476 ; ---------------------------------
      001FDA                       6477 _TestCase::
                                   6478 ;src\/GameLogic.h:281: playfield[2][ 8] = TILE_GREEN;
      001FDA 21r20r00         [10] 6479 	ld	hl, #(_playfield + 0x0020)
      001FDD 36 04            [10] 6480 	ld	(hl), #0x04
                                   6481 ;src\/GameLogic.h:282: playfield[2][ 9] = TILE_BLUE;
      001FDF 21r21r00         [10] 6482 	ld	hl, #(_playfield + 0x0021)
      001FE2 36 0C            [10] 6483 	ld	(hl), #0x0c
                                   6484 ;src\/GameLogic.h:284: playfield[0][10] = TILE_BLUE;
      001FE4 21r0Ar00         [10] 6485 	ld	hl, #(_playfield + 0x000a)
      001FE7 36 0C            [10] 6486 	ld	(hl), #0x0c
                                   6487 ;src\/GameLogic.h:285: playfield[1][10] = TILE_BLUE;
      001FE9 21r16r00         [10] 6488 	ld	hl, #(_playfield + 0x0016)
      001FEC 36 0C            [10] 6489 	ld	(hl), #0x0c
                                   6490 ;src\/GameLogic.h:286: playfield[2][10] = TILE_RED;
      001FEE 21r22r00         [10] 6491 	ld	hl, #(_playfield + 0x0022)
      001FF1 36 08            [10] 6492 	ld	(hl), #0x08
                                   6493 ;src\/GameLogic.h:287: playfield[4][10] = TILE_RED;
      001FF3 21r3Ar00         [10] 6494 	ld	hl, #(_playfield + 0x003a)
      001FF6 36 08            [10] 6495 	ld	(hl), #0x08
                                   6496 ;src\/GameLogic.h:288: playfield[5][10] = TILE_BLUE;
      001FF8 21r46r00         [10] 6497 	ld	hl, #(_playfield + 0x0046)
      001FFB 36 0C            [10] 6498 	ld	(hl), #0x0c
                                   6499 ;src\/GameLogic.h:290: playfield[0][11] = TILE_GREEN;
      001FFD 21r0Br00         [10] 6500 	ld	hl, #(_playfield + 0x000b)
      002000 36 04            [10] 6501 	ld	(hl), #0x04
                                   6502 ;src\/GameLogic.h:291: playfield[1][11] = TILE_GREEN;
      002002 21r17r00         [10] 6503 	ld	hl, #(_playfield + 0x0017)
      002005 36 04            [10] 6504 	ld	(hl), #0x04
                                   6505 ;src\/GameLogic.h:292: playfield[2][11] = TILE_RED;
      002007 21r23r00         [10] 6506 	ld	hl, #(_playfield + 0x0023)
      00200A 36 08            [10] 6507 	ld	(hl), #0x08
                                   6508 ;src\/GameLogic.h:293: playfield[3][11] = TILE_BLUE;
      00200C 21r2Fr00         [10] 6509 	ld	hl, #(_playfield + 0x002f)
      00200F 36 0C            [10] 6510 	ld	(hl), #0x0c
                                   6511 ;src\/GameLogic.h:294: playfield[4][11] = TILE_RED;
      002011 21r3Br00         [10] 6512 	ld	hl, #(_playfield + 0x003b)
      002014 36 08            [10] 6513 	ld	(hl), #0x08
                                   6514 ;src\/GameLogic.h:295: playfield[5][11] = TILE_RED;
      002016 21r47r00         [10] 6515 	ld	hl, #(_playfield + 0x0047)
      002019 36 08            [10] 6516 	ld	(hl), #0x08
                                   6517 ;src\/GameLogic.h:297: topPiece = TILE_BLUE;
      00201B 3E 0C            [ 7] 6518 	ld	a, #0x0c
      00201D 32r90r00         [13] 6519 	ld	(#_topPiece), a
                                   6520 ;src\/GameLogic.h:298: midPiece = TILE_RED;
      002020 3E 08            [ 7] 6521 	ld	a, #0x08
      002022 32r91r00         [13] 6522 	ld	(#_midPiece), a
                                   6523 ;src\/GameLogic.h:299: bottomPiece = TILE_YELLOW;
      002025 3E 14            [ 7] 6524 	ld	a, #0x14
      002027 32r92r00         [13] 6525 	ld	(#_bottomPiece), a
                                   6526 ;src\/GameLogic.h:300: }
      00202A C9               [10] 6527 	ret
                                   6528 ;src\/GameLogic.h:302: void InitGame() {
                                   6529 ;	---------------------------------
                                   6530 ; Function InitGame
                                   6531 ; ---------------------------------
      00202B                       6532 _InitGame::
                                   6533 ;src\/GameLogic.h:304: gameOver = FALSE;
      00202B 21r00r00         [10] 6534 	ld	hl, #_gameOver
      00202E 36 00            [10] 6535 	ld	(hl), #0x00
                                   6536 ;src\/GameLogic.h:305: line = INITIAL_LINE;
      002030 21r02r00         [10] 6537 	ld	hl, #_line
      002033 36 00            [10] 6538 	ld	(hl), #0x00
                                   6539 ;src\/GameLogic.h:306: col = INITIAL_COL;
      002035 21r01r00         [10] 6540 	ld	hl, #_col
      002038 36 02            [10] 6541 	ld	(hl), #0x02
                                   6542 ;src\/GameLogic.h:307: blocksRemoved = 0;
      00203A 21 00 00         [10] 6543 	ld	hl, #0x0000
      00203D 22r04r00         [16] 6544 	ld	(_blocksRemoved), hl
                                   6545 ;src\/GameLogic.h:308: level = 1;
      002040 21r06r00         [10] 6546 	ld	hl, #_level
      002043 36 01            [10] 6547 	ld	(hl), #0x01
                                   6548 ;src\/GameLogic.h:309: newLevel = FALSE;
      002045 21r07r00         [10] 6549 	ld	hl, #_newLevel
      002048 36 00            [10] 6550 	ld	(hl), #0x00
                                   6551 ;src\/GameLogic.h:310: speed = 60;
      00204A 21r93r00         [10] 6552 	ld	hl, #_speed
      00204D 36 3C            [10] 6553 	ld	(hl), #0x3c
                                   6554 ;src\/GameLogic.h:312: InitVRAM();
      00204F CDr5Fr0E         [17] 6555 	call	_InitVRAM
                                   6556 ;src\/GameLogic.h:315: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002052 3Ar08r00         [13] 6557 	ld	a, (#_rndSeed + 0)
      002055 5F               [ 4] 6558 	ld	e, a
      002056 3A 9E FC         [13] 6559 	ld	a, (#_JIFFY + 0)
      002059 67               [ 4] 6560 	ld	h, a
      00205A 2E 00            [ 7] 6561 	ld	l, #0x00
      00205C 55               [ 4] 6562 	ld	d, l
      00205D 06 08            [ 7] 6563 	ld	b, #0x08
      00205F                       6564 00133$:
      00205F 29               [11] 6565 	add	hl, hl
      002060 30 01            [12] 6566 	jr	NC, 00134$
      002062 19               [11] 6567 	add	hl, de
      002063                       6568 00134$:
      002063 10 FA            [13] 6569 	djnz	00133$
      002065 7D               [ 4] 6570 	ld	a, l
      002066 C6 63            [ 7] 6571 	add	a, #0x63
      002068 4F               [ 4] 6572 	ld	c, a
      002069 3Ar08r00         [13] 6573 	ld	a, (#_rndSeed + 0)
      00206C 5F               [ 4] 6574 	ld	e, a
      00206D 3A 9E FC         [13] 6575 	ld	a, (#_JIFFY + 0)
      002070 67               [ 4] 6576 	ld	h, a
      002071 2E 00            [ 7] 6577 	ld	l, #0x00
      002073 55               [ 4] 6578 	ld	d, l
      002074 06 08            [ 7] 6579 	ld	b, #0x08
      002076                       6580 00135$:
      002076 29               [11] 6581 	add	hl, hl
      002077 30 01            [12] 6582 	jr	NC, 00136$
      002079 19               [11] 6583 	add	hl, de
      00207A                       6584 00136$:
      00207A 10 FA            [13] 6585 	djnz	00135$
      00207C 79               [ 4] 6586 	ld	a, c
      00207D F5               [11] 6587 	push	af
      00207E 7D               [ 4] 6588 	ld	a, l
      00207F 33               [ 6] 6589 	inc	sp
      002080 F5               [11] 6590 	push	af
      002081 33               [ 6] 6591 	inc	sp
      002082 3Ar08r00         [13] 6592 	ld	a,(#_rndSeed + 0)
      002085 F5               [11] 6593 	push	af
      002086 33               [ 6] 6594 	inc	sp
      002087 CDr50r00         [17] 6595 	call	_InitRnd
      00208A F1               [10] 6596 	pop	af
      00208B 33               [ 6] 6597 	inc	sp
                                   6598 ;src\/GameLogic.h:318: RandomPiece();
      00208C CDrE0r1A         [17] 6599 	call	_RandomPiece
                                   6600 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00208F 0E 00            [ 7] 6601 	ld	c, #0x00
      002091                       6602 00107$:
      002091 79               [ 4] 6603 	ld	a, c
      002092 D6 0C            [ 7] 6604 	sub	a, #0x0c
      002094 30 20            [12] 6605 	jr	NC, 00102$
                                   6606 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002096 06 00            [ 7] 6607 	ld	b, #0x00
      002098                       6608 00104$:
      002098 78               [ 4] 6609 	ld	a, b
      002099 D6 06            [ 7] 6610 	sub	a, #0x06
      00209B 30 16            [12] 6611 	jr	NC, 00108$
                                   6612 ;src\/GameLogic.h:323: playfield[col][line] = EMPTY;
      00209D 58               [ 4] 6613 	ld	e, b
      00209E 16 00            [ 7] 6614 	ld	d, #0x00
      0020A0 6B               [ 4] 6615 	ld	l, e
      0020A1 62               [ 4] 6616 	ld	h, d
      0020A2 29               [11] 6617 	add	hl, hl
      0020A3 19               [11] 6618 	add	hl, de
      0020A4 29               [11] 6619 	add	hl, hl
      0020A5 29               [11] 6620 	add	hl, hl
      0020A6 11r00r00         [10] 6621 	ld	de, #_playfield
      0020A9 19               [11] 6622 	add	hl, de
      0020AA 59               [ 4] 6623 	ld	e, c
      0020AB 16 00            [ 7] 6624 	ld	d, #0x00
      0020AD 19               [11] 6625 	add	hl, de
      0020AE 36 00            [10] 6626 	ld	(hl), #0x00
                                   6627 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020B0 04               [ 4] 6628 	inc	b
      0020B1 18 E5            [12] 6629 	jr	00104$
      0020B3                       6630 00108$:
                                   6631 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020B3 0C               [ 4] 6632 	inc	c
      0020B4 18 DB            [12] 6633 	jr	00107$
      0020B6                       6634 00102$:
                                   6635 ;src\/GameLogic.h:328: TestCase();
      0020B6 CDrDAr1F         [17] 6636 	call	_TestCase
                                   6637 ;src\/GameLogic.h:330: DrawBackground();
      0020B9 CDr5Cr0C         [17] 6638 	call	_DrawBackground
                                   6639 ;src\/GameLogic.h:332: DrawPlayfield();
      0020BC CDrD9r11         [17] 6640 	call	_DrawPlayfield
                                   6641 ;src\/GameLogic.h:334: DrawScore();
      0020BF CDrD5r0A         [17] 6642 	call	_DrawScore
                                   6643 ;src\/GameLogic.h:336: GameLoop();
                                   6644 ;src\/GameLogic.h:337: }
      0020C2 C3r00r1C         [10] 6645 	jp	_GameLoop
                                   6646 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6647 ;	---------------------------------
                                   6648 ; Function ChangeFontColor
                                   6649 ; ---------------------------------
      0020C5                       6650 _ChangeFontColor::
                                   6651 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0020C5 21 02 00         [10] 6652 	ld	hl, #2
      0020C8 39               [11] 6653 	add	hl, sp
      0020C9 7E               [ 7] 6654 	ld	a, (hl)
      0020CA F5               [11] 6655 	push	af
      0020CB 33               [ 6] 6656 	inc	sp
      0020CC 21 00 03         [10] 6657 	ld	hl, #0x0300
      0020CF E5               [11] 6658 	push	hl
      0020D0 21 78 21         [10] 6659 	ld	hl, #0x2178
      0020D3 E5               [11] 6660 	push	hl
      0020D4 CDr00r00         [17] 6661 	call	_FILVRM
      0020D7 F1               [10] 6662 	pop	af
      0020D8 F1               [10] 6663 	pop	af
      0020D9 33               [ 6] 6664 	inc	sp
                                   6665 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0020DA 21 02 00         [10] 6666 	ld	hl, #2
      0020DD 39               [11] 6667 	add	hl, sp
      0020DE 7E               [ 7] 6668 	ld	a, (hl)
      0020DF F5               [11] 6669 	push	af
      0020E0 33               [ 6] 6670 	inc	sp
      0020E1 21 00 03         [10] 6671 	ld	hl, #0x0300
      0020E4 E5               [11] 6672 	push	hl
      0020E5 21 78 29         [10] 6673 	ld	hl, #0x2978
      0020E8 E5               [11] 6674 	push	hl
      0020E9 CDr00r00         [17] 6675 	call	_FILVRM
      0020EC F1               [10] 6676 	pop	af
      0020ED F1               [10] 6677 	pop	af
      0020EE 33               [ 6] 6678 	inc	sp
                                   6679 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      0020EF 21 02 00         [10] 6680 	ld	hl, #2
      0020F2 39               [11] 6681 	add	hl, sp
      0020F3 7E               [ 7] 6682 	ld	a, (hl)
      0020F4 F5               [11] 6683 	push	af
      0020F5 33               [ 6] 6684 	inc	sp
      0020F6 21 00 03         [10] 6685 	ld	hl, #0x0300
      0020F9 E5               [11] 6686 	push	hl
      0020FA 21 78 31         [10] 6687 	ld	hl, #0x3178
      0020FD E5               [11] 6688 	push	hl
      0020FE CDr00r00         [17] 6689 	call	_FILVRM
      002101 F1               [10] 6690 	pop	af
      002102 F1               [10] 6691 	pop	af
      002103 33               [ 6] 6692 	inc	sp
                                   6693 ;src\/Intro.h:7: }
      002104 C9               [10] 6694 	ret
                                   6695 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6696 ;	---------------------------------
                                   6697 ; Function ScrollDownFont
                                   6698 ; ---------------------------------
      002105                       6699 _ScrollDownFont::
      002105 DD E5            [15] 6700 	push	ix
      002107 DD 21 00 00      [14] 6701 	ld	ix,#0
      00210B DD 39            [15] 6702 	add	ix,sp
      00210D F5               [11] 6703 	push	af
                                   6704 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00210E 11 78 09         [10] 6705 	ld	de, #0x0978
      002111                       6706 00107$:
      002111 7B               [ 4] 6707 	ld	a, e
      002112 D6 78            [ 7] 6708 	sub	a, #0x78
      002114 7A               [ 4] 6709 	ld	a, d
      002115 DE 0C            [ 7] 6710 	sbc	a, #0x0c
      002117 30 44            [12] 6711 	jr	NC, 00109$
                                   6712 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002119 33               [ 6] 6713 	inc	sp
      00211A 33               [ 6] 6714 	inc	sp
      00211B D5               [11] 6715 	push	de
      00211C DD 7E FE         [19] 6716 	ld	a, -2 (ix)
      00211F C6 07            [ 7] 6717 	add	a, #0x07
      002121 4F               [ 4] 6718 	ld	c, a
      002122 DD 7E FF         [19] 6719 	ld	a, -1 (ix)
      002125 CE 00            [ 7] 6720 	adc	a, #0x00
      002127 47               [ 4] 6721 	ld	b, a
      002128                       6722 00104$:
      002128 78               [ 4] 6723 	ld	a, b
      002129 B1               [ 4] 6724 	or	a, c
      00212A 28 1A            [12] 6725 	jr	Z, 00101$
                                   6726 ;src\/Intro.h:27: value = RDVRM(j-1);
      00212C 69               [ 4] 6727 	ld	l, c
      00212D 60               [ 4] 6728 	ld	h, b
      00212E 2B               [ 6] 6729 	dec	hl
      00212F C5               [11] 6730 	push	bc
      002130 D5               [11] 6731 	push	de
      002131 CDr00r00         [17] 6732 	call	_RDVRM
      002134 D1               [10] 6733 	pop	de
      002135 C1               [10] 6734 	pop	bc
                                   6735 ;src\/Intro.h:29: WRTVRM(j, 0);
      002136 C5               [11] 6736 	push	bc
      002137 D5               [11] 6737 	push	de
      002138 AF               [ 4] 6738 	xor	a, a
      002139 F5               [11] 6739 	push	af
      00213A 33               [ 6] 6740 	inc	sp
      00213B C5               [11] 6741 	push	bc
      00213C CDr00r00         [17] 6742 	call	_WRTVRM
      00213F F1               [10] 6743 	pop	af
      002140 33               [ 6] 6744 	inc	sp
      002141 D1               [10] 6745 	pop	de
      002142 C1               [10] 6746 	pop	bc
                                   6747 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002143 0B               [ 6] 6748 	dec	bc
      002144 18 E2            [12] 6749 	jr	00104$
      002146                       6750 00101$:
                                   6751 ;src\/Intro.h:31: WRTVRM(i, 0);
      002146 AF               [ 4] 6752 	xor	a, a
      002147 F5               [11] 6753 	push	af
      002148 33               [ 6] 6754 	inc	sp
      002149 D5               [11] 6755 	push	de
      00214A CDr00r00         [17] 6756 	call	_WRTVRM
      00214D F1               [10] 6757 	pop	af
      00214E 33               [ 6] 6758 	inc	sp
                                   6759 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00214F DD 7E FE         [19] 6760 	ld	a, -2 (ix)
      002152 C6 08            [ 7] 6761 	add	a, #0x08
      002154 5F               [ 4] 6762 	ld	e, a
      002155 DD 7E FF         [19] 6763 	ld	a, -1 (ix)
      002158 CE 00            [ 7] 6764 	adc	a, #0x00
      00215A 57               [ 4] 6765 	ld	d, a
      00215B 18 B4            [12] 6766 	jr	00107$
      00215D                       6767 00109$:
                                   6768 ;src\/Intro.h:35: }
      00215D DD F9            [10] 6769 	ld	sp, ix
      00215F DD E1            [14] 6770 	pop	ix
      002161 C9               [10] 6771 	ret
                                   6772 ;src\/Intro.h:37: void Intro() {
                                   6773 ;	---------------------------------
                                   6774 ; Function Intro
                                   6775 ; ---------------------------------
      002162                       6776 _Intro::
                                   6777 ;src\/Intro.h:41: InitVRAM();
      002162 CDr5Fr0E         [17] 6778 	call	_InitVRAM
                                   6779 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002165 11 0B 0B         [10] 6780 	ld	de, #0x0b0b
      002168 D5               [11] 6781 	push	de
      002169 21rD7r21         [10] 6782 	ld	hl, #___str_7
      00216C E5               [11] 6783 	push	hl
      00216D CDr47r08         [17] 6784 	call	_DrawString
      002170 F1               [10] 6785 	pop	af
      002171 F1               [10] 6786 	pop	af
                                   6787 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002172 11 09 0D         [10] 6788 	ld	de, #0x0d09
      002175 D5               [11] 6789 	push	de
      002176 21rE1r21         [10] 6790 	ld	hl, #___str_8
      002179 E5               [11] 6791 	push	hl
      00217A CDr47r08         [17] 6792 	call	_DrawString
      00217D F1               [10] 6793 	pop	af
                                   6794 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      00217E 26 F0            [ 7] 6795 	ld	h,#0xf0
      002180 E3               [19] 6796 	ex	(sp),hl
      002181 33               [ 6] 6797 	inc	sp
      002182 CDrC5r20         [17] 6798 	call	_ChangeFontColor
      002185 33               [ 6] 6799 	inc	sp
                                   6800 ;src\/Intro.h:56: Wait(2 * 60);
      002186 21 78 00         [10] 6801 	ld	hl, #0x0078
      002189 E5               [11] 6802 	push	hl
      00218A CDr00r00         [17] 6803 	call	_Wait
      00218D F1               [10] 6804 	pop	af
                                   6805 ;src\/Intro.h:58: while(counter++ < 20) {
      00218E 0E 00            [ 7] 6806 	ld	c, #0x00
      002190                       6807 00112$:
      002190 79               [ 4] 6808 	ld	a, c
      002191 D6 14            [ 7] 6809 	sub	a, #0x14
      002193 D0               [11] 6810 	ret	NC
      002194 0C               [ 4] 6811 	inc	c
                                   6812 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002195 21 9E FC         [10] 6813 	ld	hl, #_JIFFY
      002198 46               [ 7] 6814 	ld	b, (hl)
                                   6815 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002199                       6816 00101$:
      002199 58               [ 4] 6817 	ld	e, b
      00219A 16 00            [ 7] 6818 	ld	d, #0x00
      00219C 2A 9E FC         [16] 6819 	ld	hl, (_JIFFY)
      00219F BF               [ 4] 6820 	cp	a, a
      0021A0 ED 52            [15] 6821 	sbc	hl, de
      0021A2 28 F5            [12] 6822 	jr	Z, 00101$
                                   6823 ;src\/Intro.h:63: if(counter == 15) {
      0021A4 79               [ 4] 6824 	ld	a, c
      0021A5 D6 0F            [ 7] 6825 	sub	a, #0x0f
      0021A7 20 0C            [12] 6826 	jr	NZ, 00110$
                                   6827 ;src\/Intro.h:64: ChangeFontColor(0x40);
      0021A9 C5               [11] 6828 	push	bc
      0021AA 3E 40            [ 7] 6829 	ld	a, #0x40
      0021AC F5               [11] 6830 	push	af
      0021AD 33               [ 6] 6831 	inc	sp
      0021AE CDrC5r20         [17] 6832 	call	_ChangeFontColor
      0021B1 33               [ 6] 6833 	inc	sp
      0021B2 C1               [10] 6834 	pop	bc
      0021B3 18 DB            [12] 6835 	jr	00112$
      0021B5                       6836 00110$:
                                   6837 ;src\/Intro.h:66: else if(counter == 10) {
      0021B5 79               [ 4] 6838 	ld	a, c
      0021B6 D6 0A            [ 7] 6839 	sub	a, #0x0a
      0021B8 20 0C            [12] 6840 	jr	NZ, 00107$
                                   6841 ;src\/Intro.h:67: ChangeFontColor(0x50);
      0021BA C5               [11] 6842 	push	bc
      0021BB 3E 50            [ 7] 6843 	ld	a, #0x50
      0021BD F5               [11] 6844 	push	af
      0021BE 33               [ 6] 6845 	inc	sp
      0021BF CDrC5r20         [17] 6846 	call	_ChangeFontColor
      0021C2 33               [ 6] 6847 	inc	sp
      0021C3 C1               [10] 6848 	pop	bc
      0021C4 18 CA            [12] 6849 	jr	00112$
      0021C6                       6850 00107$:
                                   6851 ;src\/Intro.h:69: else if(counter == 5) {
      0021C6 79               [ 4] 6852 	ld	a, c
      0021C7 D6 05            [ 7] 6853 	sub	a, #0x05
      0021C9 20 C5            [12] 6854 	jr	NZ, 00112$
                                   6855 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      0021CB C5               [11] 6856 	push	bc
      0021CC 3E E0            [ 7] 6857 	ld	a, #0xe0
      0021CE F5               [11] 6858 	push	af
      0021CF 33               [ 6] 6859 	inc	sp
      0021D0 CDrC5r20         [17] 6860 	call	_ChangeFontColor
      0021D3 33               [ 6] 6861 	inc	sp
      0021D4 C1               [10] 6862 	pop	bc
                                   6863 ;src\/Intro.h:140: }
      0021D5 18 B9            [12] 6864 	jr	00112$
      0021D7                       6865 ___str_7:
      0021D7 41 20 47 41 4D 45 20  6866 	.ascii "A GAME BY"
             42 59
      0021E0 00                    6867 	.db 0x00
      0021E1                       6868 ___str_8:
      0021E1 41 4E 44 52 45 20 42  6869 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      0021EF 00                    6870 	.db 0x00
                                   6871 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   6872 ;	---------------------------------
                                   6873 ; Function SetBlock
                                   6874 ; ---------------------------------
      0021F0                       6875 _SetBlock::
      0021F0 DD E5            [15] 6876 	push	ix
      0021F2 DD 21 00 00      [14] 6877 	ld	ix,#0
      0021F6 DD 39            [15] 6878 	add	ix,sp
                                   6879 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      0021F8 DD 7E 04         [19] 6880 	ld	a, 4 (ix)
      0021FB 06 00            [ 7] 6881 	ld	b, #0x00
      0021FD 4F               [ 4] 6882 	ld	c, a
      0021FE 78               [ 4] 6883 	ld	a, b
      0021FF C6 18            [ 7] 6884 	add	a, #0x18
      002201 47               [ 4] 6885 	ld	b, a
      002202 DD 6E 05         [19] 6886 	ld	l, 5 (ix)
      002205 26 00            [ 7] 6887 	ld	h, #0x00
      002207 29               [11] 6888 	add	hl, hl
      002208 29               [11] 6889 	add	hl, hl
      002209 29               [11] 6890 	add	hl, hl
      00220A 29               [11] 6891 	add	hl, hl
      00220B 29               [11] 6892 	add	hl, hl
      00220C 09               [11] 6893 	add	hl, bc
      00220D DD 7E 06         [19] 6894 	ld	a, 6 (ix)
      002210 F5               [11] 6895 	push	af
      002211 33               [ 6] 6896 	inc	sp
      002212 E5               [11] 6897 	push	hl
      002213 CDr00r00         [17] 6898 	call	_WRTVRM
      002216 F1               [10] 6899 	pop	af
      002217 33               [ 6] 6900 	inc	sp
                                   6901 ;src\/Title.h:16: }
      002218 DD E1            [14] 6902 	pop	ix
      00221A C9               [10] 6903 	ret
                                   6904 ;src\/Title.h:18: void TitleScreen() {
                                   6905 ;	---------------------------------
                                   6906 ; Function TitleScreen
                                   6907 ; ---------------------------------
      00221B                       6908 _TitleScreen::
      00221B DD E5            [15] 6909 	push	ix
      00221D DD 21 00 00      [14] 6910 	ld	ix,#0
      002221 DD 39            [15] 6911 	add	ix,sp
      002223 21 EB FF         [10] 6912 	ld	hl, #-21
      002226 39               [11] 6913 	add	hl, sp
      002227 F9               [ 6] 6914 	ld	sp, hl
                                   6915 ;src\/Title.h:19: byte colorIndex = 0;
      002228 0E 00            [ 7] 6916 	ld	c, #0x00
                                   6917 ;src\/Title.h:52: const char blocks[] = {
      00222A 21 00 00         [10] 6918 	ld	hl, #0
      00222D 39               [11] 6919 	add	hl, sp
      00222E EB               [ 4] 6920 	ex	de, hl
      00222F 3E 8E            [ 7] 6921 	ld	a, #0x8e
      002231 12               [ 7] 6922 	ld	(de), a
      002232 6B               [ 4] 6923 	ld	l, e
      002233 62               [ 4] 6924 	ld	h, d
      002234 23               [ 6] 6925 	inc	hl
      002235 36 8F            [10] 6926 	ld	(hl), #0x8f
      002237 6B               [ 4] 6927 	ld	l, e
      002238 62               [ 4] 6928 	ld	h, d
      002239 23               [ 6] 6929 	inc	hl
      00223A 23               [ 6] 6930 	inc	hl
      00223B 36 90            [10] 6931 	ld	(hl), #0x90
      00223D 6B               [ 4] 6932 	ld	l, e
      00223E 62               [ 4] 6933 	ld	h, d
      00223F 23               [ 6] 6934 	inc	hl
      002240 23               [ 6] 6935 	inc	hl
      002241 23               [ 6] 6936 	inc	hl
      002242 36 91            [10] 6937 	ld	(hl), #0x91
      002244 21 04 00         [10] 6938 	ld	hl, #0x0004
      002247 19               [11] 6939 	add	hl, de
      002248 36 92            [10] 6940 	ld	(hl), #0x92
      00224A 21 05 00         [10] 6941 	ld	hl, #0x0005
      00224D 19               [11] 6942 	add	hl, de
      00224E 36 93            [10] 6943 	ld	(hl), #0x93
      002250 21 06 00         [10] 6944 	ld	hl, #0x0006
      002253 19               [11] 6945 	add	hl, de
      002254 36 94            [10] 6946 	ld	(hl), #0x94
                                   6947 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002256 21 07 00         [10] 6948 	ld	hl, #7
      002259 39               [11] 6949 	add	hl, sp
      00225A DD 75 F6         [19] 6950 	ld	-10 (ix), l
      00225D DD 74 F7         [19] 6951 	ld	-9 (ix), h
      002260 36 8E            [10] 6952 	ld	(hl), #0x8e
      002262 DD 6E F6         [19] 6953 	ld	l, -10 (ix)
      002265 DD 66 F7         [19] 6954 	ld	h, -9 (ix)
      002268 23               [ 6] 6955 	inc	hl
      002269 36 90            [10] 6956 	ld	(hl), #0x90
      00226B DD 6E F6         [19] 6957 	ld	l, -10 (ix)
      00226E DD 66 F7         [19] 6958 	ld	h, -9 (ix)
      002271 23               [ 6] 6959 	inc	hl
      002272 23               [ 6] 6960 	inc	hl
      002273 36 92            [10] 6961 	ld	(hl), #0x92
      002275 DD 6E F6         [19] 6962 	ld	l, -10 (ix)
      002278 DD 66 F7         [19] 6963 	ld	h, -9 (ix)
      00227B 23               [ 6] 6964 	inc	hl
      00227C 23               [ 6] 6965 	inc	hl
      00227D 23               [ 6] 6966 	inc	hl
      00227E 36 94            [10] 6967 	ld	(hl), #0x94
                                   6968 ;src\/Title.h:65: InitVRAM();
      002280 C5               [11] 6969 	push	bc
      002281 D5               [11] 6970 	push	de
      002282 CDr5Fr0E         [17] 6971 	call	_InitVRAM
      002285 21 00 01         [10] 6972 	ld	hl, #0x0100
      002288 E5               [11] 6973 	push	hl
      002289 21r02r24         [10] 6974 	ld	hl, #_TitleScreen_title_65536_278
      00228C E5               [11] 6975 	push	hl
      00228D 21 00 18         [10] 6976 	ld	hl, #0x1800
      002290 E5               [11] 6977 	push	hl
      002291 CDr00r00         [17] 6978 	call	_LDIRVM
      002294 21 06 00         [10] 6979 	ld	hl, #6
      002297 39               [11] 6980 	add	hl, sp
      002298 F9               [ 6] 6981 	ld	sp, hl
      002299 11 05 0D         [10] 6982 	ld	de, #0x0d05
      00229C D5               [11] 6983 	push	de
      00229D 21r02r25         [10] 6984 	ld	hl, #___str_9
      0022A0 E5               [11] 6985 	push	hl
      0022A1 CDr47r08         [17] 6986 	call	_DrawString
      0022A4 F1               [10] 6987 	pop	af
      0022A5 26 17            [ 7] 6988 	ld	h,#0x17
      0022A7 E3               [19] 6989 	ex	(sp),hl
      0022A8 33               [ 6] 6990 	inc	sp
      0022A9 AF               [ 4] 6991 	xor	a, a
      0022AA F5               [11] 6992 	push	af
      0022AB 33               [ 6] 6993 	inc	sp
      0022AC 21r19r25         [10] 6994 	ld	hl, #___str_10
      0022AF E5               [11] 6995 	push	hl
      0022B0 CDr47r08         [17] 6996 	call	_DrawString
      0022B3 F1               [10] 6997 	pop	af
      0022B4 F1               [10] 6998 	pop	af
      0022B5 11 19 17         [10] 6999 	ld	de, #0x1719
      0022B8 D5               [11] 7000 	push	de
      0022B9 21r2Er25         [10] 7001 	ld	hl, #___str_11
      0022BC E5               [11] 7002 	push	hl
      0022BD CDr47r08         [17] 7003 	call	_DrawString
      0022C0 F1               [10] 7004 	pop	af
      0022C1 F1               [10] 7005 	pop	af
      0022C2 D1               [10] 7006 	pop	de
      0022C3 C1               [10] 7007 	pop	bc
                                   7008 ;src\/Title.h:73: while(TRUE) {
      0022C4                       7009 00120$:
                                   7010 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      0022C4 DD 36 FD 00      [19] 7011 	ld	-3 (ix), #0
                                   7012 ;src\/Title.h:78: word counter = 0;
      0022C8 AF               [ 4] 7013 	xor	a, a
      0022C9 DD 77 FE         [19] 7014 	ld	-2 (ix), a
      0022CC DD 77 FF         [19] 7015 	ld	-1 (ix), a
                                   7016 ;src\/Title.h:88: do {
      0022CF                       7017 00106$:
                                   7018 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      0022CF C5               [11] 7019 	push	bc
      0022D0 D5               [11] 7020 	push	de
      0022D1 11 1F 1F         [10] 7021 	ld	de, #0x1f1f
      0022D4 D5               [11] 7022 	push	de
      0022D5 CDrD9r00         [17] 7023 	call	_GetRandomInInterval
      0022D8 F1               [10] 7024 	pop	af
                                   7025 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      0022D9 DD 75 F8         [19] 7026 	ld	-8 (ix), l
      0022DC 11 07 07         [10] 7027 	ld	de, #0x0707
      0022DF D5               [11] 7028 	push	de
      0022E0 CDrD9r00         [17] 7029 	call	_GetRandomInInterval
      0022E3 F1               [10] 7030 	pop	af
      0022E4 D1               [10] 7031 	pop	de
      0022E5 C1               [10] 7032 	pop	bc
      0022E6 DD 75 F9         [19] 7033 	ld	-7 (ix), l
                                   7034 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      0022E9 DD 6E F8         [19] 7035 	ld	l, -8 (ix)
      0022EC 3E 00            [ 7] 7036 	ld	a, #0x00
      0022EE C6 18            [ 7] 7037 	add	a, #0x18
      0022F0 67               [ 4] 7038 	ld	h, a
      0022F1 DD 7E F9         [19] 7039 	ld	a, -7 (ix)
      0022F4 06 00            [ 7] 7040 	ld	b, #0x00
      0022F6 87               [ 4] 7041 	add	a, a
      0022F7 CB 10            [ 8] 7042 	rl	b
      0022F9 87               [ 4] 7043 	add	a, a
      0022FA CB 10            [ 8] 7044 	rl	b
      0022FC 87               [ 4] 7045 	add	a, a
      0022FD CB 10            [ 8] 7046 	rl	b
      0022FF 87               [ 4] 7047 	add	a, a
      002300 CB 10            [ 8] 7048 	rl	b
      002302 87               [ 4] 7049 	add	a, a
      002303 CB 10            [ 8] 7050 	rl	b
      002305 85               [ 4] 7051 	add	a, l
      002306 6F               [ 4] 7052 	ld	l, a
      002307 78               [ 4] 7053 	ld	a, b
      002308 8C               [ 4] 7054 	adc	a, h
      002309 67               [ 4] 7055 	ld	h, a
      00230A C5               [11] 7056 	push	bc
      00230B D5               [11] 7057 	push	de
      00230C CDr00r00         [17] 7058 	call	_RDVRM
      00230F D1               [10] 7059 	pop	de
      002310 C1               [10] 7060 	pop	bc
      002311 DD 75 FA         [19] 7061 	ld	-6 (ix), l
                                   7062 ;src\/Title.h:102: if(counter++ > 1000) {
      002314 DD 46 FE         [19] 7063 	ld	b, -2 (ix)
      002317 DD 6E FF         [19] 7064 	ld	l, -1 (ix)
      00231A DD 34 FE         [23] 7065 	inc	-2 (ix)
      00231D 20 03            [12] 7066 	jr	NZ, 00193$
      00231F DD 34 FF         [23] 7067 	inc	-1 (ix)
      002322                       7068 00193$:
      002322 3E E8            [ 7] 7069 	ld	a, #0xe8
      002324 B8               [ 4] 7070 	cp	a, b
      002325 3E 03            [ 7] 7071 	ld	a, #0x03
      002327 9D               [ 4] 7072 	sbc	a, l
      002328 30 0F            [12] 7073 	jr	NC, 00107$
                                   7074 ;src\/Title.h:103: colorIndex++;
      00232A 0C               [ 4] 7075 	inc	c
                                   7076 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      00232B 79               [ 4] 7077 	ld	a, c
      00232C D6 03            [ 7] 7078 	sub	a, #0x03
      00232E 38 02            [12] 7079 	jr	C, 00102$
      002330 0E 00            [ 7] 7080 	ld	c, #0x00
      002332                       7081 00102$:
                                   7082 ;src\/Title.h:119: counter = 0;
      002332 AF               [ 4] 7083 	xor	a, a
      002333 DD 77 FE         [19] 7084 	ld	-2 (ix), a
      002336 DD 77 FF         [19] 7085 	ld	-1 (ix), a
      002339                       7086 00107$:
                                   7087 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      002339 DD 7E FA         [19] 7088 	ld	a, -6 (ix)
      00233C B7               [ 4] 7089 	or	a, a
      00233D 28 90            [12] 7090 	jr	Z, 00106$
      00233F 79               [ 4] 7091 	ld	a, c
      002340 3C               [ 4] 7092 	inc	a
      002341 F5               [11] 7093 	push	af
      002342 17               [ 4] 7094 	rla
      002343 9F               [ 4] 7095 	sbc	a, a
      002344 47               [ 4] 7096 	ld	b, a
      002345 F1               [10] 7097 	pop	af
      002346 DD 86 F6         [19] 7098 	add	a, -10 (ix)
      002349 DD 77 FB         [19] 7099 	ld	-5 (ix), a
      00234C 78               [ 4] 7100 	ld	a, b
      00234D DD 8E F7         [19] 7101 	adc	a, -9 (ix)
      002350 DD 77 FC         [19] 7102 	ld	-4 (ix), a
      002353 DD 6E FB         [19] 7103 	ld	l, -5 (ix)
      002356 DD 66 FC         [19] 7104 	ld	h, -4 (ix)
      002359 46               [ 7] 7105 	ld	b, (hl)
      00235A DD 7E FA         [19] 7106 	ld	a, -6 (ix)
      00235D 90               [ 4] 7107 	sub	a, b
      00235E CArCFr22         [10] 7108 	jp	Z,00106$
                                   7109 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002361 06 00            [ 7] 7110 	ld	b, #0x00
      002363                       7111 00123$:
      002363 78               [ 4] 7112 	ld	a, b
      002364 D6 0A            [ 7] 7113 	sub	a, #0x0a
      002366 30 79            [12] 7114 	jr	NC, 00118$
                                   7115 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002368 2A 9E FC         [16] 7116 	ld	hl, (_JIFFY)
      00236B DD 75 FE         [19] 7117 	ld	-2 (ix), l
      00236E DD 74 FF         [19] 7118 	ld	-1 (ix), h
                                   7119 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002371                       7120 00109$:
      002371 FD 21 9E FC      [14] 7121 	ld	iy, #_JIFFY
      002375 FD 7E 00         [19] 7122 	ld	a, 0 (iy)
      002378 DD 96 FE         [19] 7123 	sub	a, -2 (ix)
      00237B 20 08            [12] 7124 	jr	NZ, 00195$
      00237D FD 7E 01         [19] 7125 	ld	a, 1 (iy)
      002380 DD 96 FF         [19] 7126 	sub	a, -1 (ix)
      002383 28 EC            [12] 7127 	jr	Z, 00109$
      002385                       7128 00195$:
                                   7129 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002385 DD 6E FD         [19] 7130 	ld	l, -3 (ix)
      002388 26 00            [ 7] 7131 	ld	h, #0x00
      00238A 19               [11] 7132 	add	hl, de
      00238B 7E               [ 7] 7133 	ld	a, (hl)
      00238C C5               [11] 7134 	push	bc
      00238D D5               [11] 7135 	push	de
      00238E F5               [11] 7136 	push	af
      00238F 33               [ 6] 7137 	inc	sp
      002390 DD 66 F9         [19] 7138 	ld	h, -7 (ix)
      002393 DD 6E F8         [19] 7139 	ld	l, -8 (ix)
      002396 E5               [11] 7140 	push	hl
      002397 CDrF0r21         [17] 7141 	call	_SetBlock
      00239A F1               [10] 7142 	pop	af
      00239B 33               [ 6] 7143 	inc	sp
      00239C D1               [10] 7144 	pop	de
      00239D C1               [10] 7145 	pop	bc
                                   7146 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00239E DD 7E FD         [19] 7147 	ld	a, -3 (ix)
      0023A1 DD 34 FD         [23] 7148 	inc	-3 (ix)
      0023A4 D6 07            [ 7] 7149 	sub	a, #0x07
      0023A6 38 04            [12] 7150 	jr	C, 00113$
      0023A8 DD 36 FD 00      [19] 7151 	ld	-3 (ix), #0
      0023AC                       7152 00113$:
                                   7153 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      0023AC C5               [11] 7154 	push	bc
      0023AD D5               [11] 7155 	push	de
      0023AE 2E 00            [ 7] 7156 	ld	l, #0x00
      0023B0 CDr00r00         [17] 7157 	call	_GTTRIG
                                   7158 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      0023B3 DD 75 FF         [19] 7159 	ld	-1 (ix), l
      0023B6 2E 01            [ 7] 7160 	ld	l, #0x01
      0023B8 CDr00r00         [17] 7161 	call	_GTTRIG
      0023BB D1               [10] 7162 	pop	de
      0023BC C1               [10] 7163 	pop	bc
                                   7164 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      0023BD E5               [11] 7165 	push	hl
      0023BE C5               [11] 7166 	push	bc
      0023BF D5               [11] 7167 	push	de
      0023C0 2E 03            [ 7] 7168 	ld	l, #0x03
      0023C2 CDr00r00         [17] 7169 	call	_GTTRIG
      0023C5 7D               [ 4] 7170 	ld	a, l
      0023C6 D1               [10] 7171 	pop	de
      0023C7 C1               [10] 7172 	pop	bc
      0023C8 E1               [10] 7173 	pop	hl
      0023C9 67               [ 4] 7174 	ld	h, a
                                   7175 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      0023CA DD 7E FF         [19] 7176 	ld	a, -1 (ix)
      0023CD 3C               [ 4] 7177 	inc	a
      0023CE 28 06            [12] 7178 	jr	Z, 00114$
      0023D0 2C               [ 4] 7179 	inc	l
      0023D1 28 03            [12] 7180 	jr	Z, 00114$
      0023D3 24               [ 4] 7181 	inc	h
      0023D4 20 08            [12] 7182 	jr	NZ, 00124$
      0023D6                       7183 00114$:
                                   7184 ;src\/Title.h:168: rndSeed = JIFFY;
      0023D6 3A 9E FC         [13] 7185 	ld	a,(#_JIFFY + 0)
      0023D9 32r08r00         [13] 7186 	ld	(#_rndSeed), a
                                   7187 ;src\/Title.h:169: return;
      0023DC 18 1F            [12] 7188 	jr	00125$
      0023DE                       7189 00124$:
                                   7190 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      0023DE 04               [ 4] 7191 	inc	b
      0023DF 18 82            [12] 7192 	jr	00123$
      0023E1                       7193 00118$:
                                   7194 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      0023E1 DD 6E FB         [19] 7195 	ld	l, -5 (ix)
      0023E4 DD 66 FC         [19] 7196 	ld	h, -4 (ix)
      0023E7 7E               [ 7] 7197 	ld	a, (hl)
      0023E8 C5               [11] 7198 	push	bc
      0023E9 D5               [11] 7199 	push	de
      0023EA F5               [11] 7200 	push	af
      0023EB 33               [ 6] 7201 	inc	sp
      0023EC DD 66 F9         [19] 7202 	ld	h, -7 (ix)
      0023EF DD 6E F8         [19] 7203 	ld	l, -8 (ix)
      0023F2 E5               [11] 7204 	push	hl
      0023F3 CDrF0r21         [17] 7205 	call	_SetBlock
      0023F6 F1               [10] 7206 	pop	af
      0023F7 33               [ 6] 7207 	inc	sp
      0023F8 D1               [10] 7208 	pop	de
      0023F9 C1               [10] 7209 	pop	bc
      0023FA C3rC4r22         [10] 7210 	jp	00120$
      0023FD                       7211 00125$:
                                   7212 ;src\/Title.h:176: }
      0023FD DD F9            [10] 7213 	ld	sp, ix
      0023FF DD E1            [14] 7214 	pop	ix
      002401 C9               [10] 7215 	ret
      002402                       7216 _TitleScreen_title_65536_278:
      002402 00                    7217 	.db #0x00	; 0
      002403 00                    7218 	.db #0x00	; 0
      002404 00                    7219 	.db #0x00	; 0
      002405 00                    7220 	.db #0x00	; 0
      002406 8E                    7221 	.db #0x8e	; 142
      002407 8E                    7222 	.db #0x8e	; 142
      002408 8E                    7223 	.db #0x8e	; 142
      002409 8E                    7224 	.db #0x8e	; 142
      00240A 00                    7225 	.db #0x00	; 0
      00240B 8E                    7226 	.db #0x8e	; 142
      00240C 8E                    7227 	.db #0x8e	; 142
      00240D 8E                    7228 	.db #0x8e	; 142
      00240E 8E                    7229 	.db #0x8e	; 142
      00240F 8E                    7230 	.db #0x8e	; 142
      002410 8E                    7231 	.db #0x8e	; 142
      002411 00                    7232 	.db #0x00	; 0
      002412 00                    7233 	.db #0x00	; 0
      002413 8E                    7234 	.db #0x8e	; 142
      002414 8E                    7235 	.db #0x8e	; 142
      002415 00                    7236 	.db #0x00	; 0
      002416 00                    7237 	.db #0x00	; 0
      002417 00                    7238 	.db #0x00	; 0
      002418 8E                    7239 	.db #0x8e	; 142
      002419 8E                    7240 	.db #0x8e	; 142
      00241A 00                    7241 	.db #0x00	; 0
      00241B 00                    7242 	.db #0x00	; 0
      00241C 00                    7243 	.db #0x00	; 0
      00241D 00                    7244 	.db #0x00	; 0
      00241E 8E                    7245 	.db #0x8e	; 142
      00241F 8E                    7246 	.db #0x8e	; 142
      002420 8E                    7247 	.db #0x8e	; 142
      002421 8E                    7248 	.db #0x8e	; 142
      002422 00                    7249 	.db #0x00	; 0
      002423 00                    7250 	.db #0x00	; 0
      002424 00                    7251 	.db #0x00	; 0
      002425 8E                    7252 	.db #0x8e	; 142
      002426 8E                    7253 	.db #0x8e	; 142
      002427 8E                    7254 	.db #0x8e	; 142
      002428 8E                    7255 	.db #0x8e	; 142
      002429 8E                    7256 	.db #0x8e	; 142
      00242A 00                    7257 	.db #0x00	; 0
      00242B 8E                    7258 	.db #0x8e	; 142
      00242C 8E                    7259 	.db #0x8e	; 142
      00242D 00                    7260 	.db #0x00	; 0
      00242E 00                    7261 	.db #0x00	; 0
      00242F 00                    7262 	.db #0x00	; 0
      002430 8E                    7263 	.db #0x8e	; 142
      002431 8E                    7264 	.db #0x8e	; 142
      002432 00                    7265 	.db #0x00	; 0
      002433 00                    7266 	.db #0x00	; 0
      002434 8E                    7267 	.db #0x8e	; 142
      002435 8E                    7268 	.db #0x8e	; 142
      002436 00                    7269 	.db #0x00	; 0
      002437 00                    7270 	.db #0x00	; 0
      002438 8E                    7271 	.db #0x8e	; 142
      002439 8E                    7272 	.db #0x8e	; 142
      00243A 00                    7273 	.db #0x00	; 0
      00243B 00                    7274 	.db #0x00	; 0
      00243C 00                    7275 	.db #0x00	; 0
      00243D 8E                    7276 	.db #0x8e	; 142
      00243E 8E                    7277 	.db #0x8e	; 142
      00243F 8E                    7278 	.db #0x8e	; 142
      002440 8E                    7279 	.db #0x8e	; 142
      002441 8E                    7280 	.db #0x8e	; 142
      002442 00                    7281 	.db #0x00	; 0
      002443 00                    7282 	.db #0x00	; 0
      002444 8E                    7283 	.db #0x8e	; 142
      002445 8E                    7284 	.db #0x8e	; 142
      002446 8E                    7285 	.db #0x8e	; 142
      002447 00                    7286 	.db #0x00	; 0
      002448 8E                    7287 	.db #0x8e	; 142
      002449 8E                    7288 	.db #0x8e	; 142
      00244A 00                    7289 	.db #0x00	; 0
      00244B 8E                    7290 	.db #0x8e	; 142
      00244C 8E                    7291 	.db #0x8e	; 142
      00244D 00                    7292 	.db #0x00	; 0
      00244E 00                    7293 	.db #0x00	; 0
      00244F 00                    7294 	.db #0x00	; 0
      002450 8E                    7295 	.db #0x8e	; 142
      002451 8E                    7296 	.db #0x8e	; 142
      002452 00                    7297 	.db #0x00	; 0
      002453 00                    7298 	.db #0x00	; 0
      002454 00                    7299 	.db #0x00	; 0
      002455 8E                    7300 	.db #0x8e	; 142
      002456 8E                    7301 	.db #0x8e	; 142
      002457 00                    7302 	.db #0x00	; 0
      002458 8E                    7303 	.db #0x8e	; 142
      002459 8E                    7304 	.db #0x8e	; 142
      00245A 00                    7305 	.db #0x00	; 0
      00245B 00                    7306 	.db #0x00	; 0
      00245C 8E                    7307 	.db #0x8e	; 142
      00245D 8E                    7308 	.db #0x8e	; 142
      00245E 8E                    7309 	.db #0x8e	; 142
      00245F 00                    7310 	.db #0x00	; 0
      002460 8E                    7311 	.db #0x8e	; 142
      002461 8E                    7312 	.db #0x8e	; 142
      002462 00                    7313 	.db #0x00	; 0
      002463 8E                    7314 	.db #0x8e	; 142
      002464 8E                    7315 	.db #0x8e	; 142
      002465 8E                    7316 	.db #0x8e	; 142
      002466 00                    7317 	.db #0x00	; 0
      002467 00                    7318 	.db #0x00	; 0
      002468 8E                    7319 	.db #0x8e	; 142
      002469 8E                    7320 	.db #0x8e	; 142
      00246A 00                    7321 	.db #0x00	; 0
      00246B 8E                    7322 	.db #0x8e	; 142
      00246C 8E                    7323 	.db #0x8e	; 142
      00246D 00                    7324 	.db #0x00	; 0
      00246E 00                    7325 	.db #0x00	; 0
      00246F 8E                    7326 	.db #0x8e	; 142
      002470 8E                    7327 	.db #0x8e	; 142
      002471 00                    7328 	.db #0x00	; 0
      002472 00                    7329 	.db #0x00	; 0
      002473 00                    7330 	.db #0x00	; 0
      002474 00                    7331 	.db #0x00	; 0
      002475 00                    7332 	.db #0x00	; 0
      002476 8E                    7333 	.db #0x8e	; 142
      002477 8E                    7334 	.db #0x8e	; 142
      002478 8E                    7335 	.db #0x8e	; 142
      002479 00                    7336 	.db #0x00	; 0
      00247A 00                    7337 	.db #0x00	; 0
      00247B 8E                    7338 	.db #0x8e	; 142
      00247C 8E                    7339 	.db #0x8e	; 142
      00247D 8E                    7340 	.db #0x8e	; 142
      00247E 00                    7341 	.db #0x00	; 0
      00247F 00                    7342 	.db #0x00	; 0
      002480 8E                    7343 	.db #0x8e	; 142
      002481 8E                    7344 	.db #0x8e	; 142
      002482 00                    7345 	.db #0x00	; 0
      002483 8E                    7346 	.db #0x8e	; 142
      002484 8E                    7347 	.db #0x8e	; 142
      002485 00                    7348 	.db #0x00	; 0
      002486 00                    7349 	.db #0x00	; 0
      002487 00                    7350 	.db #0x00	; 0
      002488 8E                    7351 	.db #0x8e	; 142
      002489 8E                    7352 	.db #0x8e	; 142
      00248A 00                    7353 	.db #0x00	; 0
      00248B 8E                    7354 	.db #0x8e	; 142
      00248C 8E                    7355 	.db #0x8e	; 142
      00248D 8E                    7356 	.db #0x8e	; 142
      00248E 8E                    7357 	.db #0x8e	; 142
      00248F 8E                    7358 	.db #0x8e	; 142
      002490 00                    7359 	.db #0x00	; 0
      002491 00                    7360 	.db #0x00	; 0
      002492 00                    7361 	.db #0x00	; 0
      002493 00                    7362 	.db #0x00	; 0
      002494 00                    7363 	.db #0x00	; 0
      002495 00                    7364 	.db #0x00	; 0
      002496 8E                    7365 	.db #0x8e	; 142
      002497 8E                    7366 	.db #0x8e	; 142
      002498 00                    7367 	.db #0x00	; 0
      002499 00                    7368 	.db #0x00	; 0
      00249A 00                    7369 	.db #0x00	; 0
      00249B 8E                    7370 	.db #0x8e	; 142
      00249C 8E                    7371 	.db #0x8e	; 142
      00249D 00                    7372 	.db #0x00	; 0
      00249E 00                    7373 	.db #0x00	; 0
      00249F 00                    7374 	.db #0x00	; 0
      0024A0 8E                    7375 	.db #0x8e	; 142
      0024A1 8E                    7376 	.db #0x8e	; 142
      0024A2 00                    7377 	.db #0x00	; 0
      0024A3 8E                    7378 	.db #0x8e	; 142
      0024A4 8E                    7379 	.db #0x8e	; 142
      0024A5 00                    7380 	.db #0x00	; 0
      0024A6 00                    7381 	.db #0x00	; 0
      0024A7 00                    7382 	.db #0x00	; 0
      0024A8 8E                    7383 	.db #0x8e	; 142
      0024A9 8E                    7384 	.db #0x8e	; 142
      0024AA 00                    7385 	.db #0x00	; 0
      0024AB 8E                    7386 	.db #0x8e	; 142
      0024AC 8E                    7387 	.db #0x8e	; 142
      0024AD 8E                    7388 	.db #0x8e	; 142
      0024AE 8E                    7389 	.db #0x8e	; 142
      0024AF 8E                    7390 	.db #0x8e	; 142
      0024B0 00                    7391 	.db #0x00	; 0
      0024B1 00                    7392 	.db #0x00	; 0
      0024B2 00                    7393 	.db #0x00	; 0
      0024B3 00                    7394 	.db #0x00	; 0
      0024B4 00                    7395 	.db #0x00	; 0
      0024B5 00                    7396 	.db #0x00	; 0
      0024B6 8E                    7397 	.db #0x8e	; 142
      0024B7 8E                    7398 	.db #0x8e	; 142
      0024B8 00                    7399 	.db #0x00	; 0
      0024B9 00                    7400 	.db #0x00	; 0
      0024BA 00                    7401 	.db #0x00	; 0
      0024BB 8E                    7402 	.db #0x8e	; 142
      0024BC 8E                    7403 	.db #0x8e	; 142
      0024BD 00                    7404 	.db #0x00	; 0
      0024BE 00                    7405 	.db #0x00	; 0
      0024BF 00                    7406 	.db #0x00	; 0
      0024C0 8E                    7407 	.db #0x8e	; 142
      0024C1 8E                    7408 	.db #0x8e	; 142
      0024C2 00                    7409 	.db #0x00	; 0
      0024C3 8E                    7410 	.db #0x8e	; 142
      0024C4 8E                    7411 	.db #0x8e	; 142
      0024C5 8E                    7412 	.db #0x8e	; 142
      0024C6 8E                    7413 	.db #0x8e	; 142
      0024C7 8E                    7414 	.db #0x8e	; 142
      0024C8 8E                    7415 	.db #0x8e	; 142
      0024C9 8E                    7416 	.db #0x8e	; 142
      0024CA 00                    7417 	.db #0x00	; 0
      0024CB 8E                    7418 	.db #0x8e	; 142
      0024CC 8E                    7419 	.db #0x8e	; 142
      0024CD 00                    7420 	.db #0x00	; 0
      0024CE 00                    7421 	.db #0x00	; 0
      0024CF 00                    7422 	.db #0x00	; 0
      0024D0 8E                    7423 	.db #0x8e	; 142
      0024D1 00                    7424 	.db #0x00	; 0
      0024D2 00                    7425 	.db #0x00	; 0
      0024D3 00                    7426 	.db #0x00	; 0
      0024D4 00                    7427 	.db #0x00	; 0
      0024D5 00                    7428 	.db #0x00	; 0
      0024D6 8E                    7429 	.db #0x8e	; 142
      0024D7 8E                    7430 	.db #0x8e	; 142
      0024D8 00                    7431 	.db #0x00	; 0
      0024D9 00                    7432 	.db #0x00	; 0
      0024DA 00                    7433 	.db #0x00	; 0
      0024DB 8E                    7434 	.db #0x8e	; 142
      0024DC 8E                    7435 	.db #0x8e	; 142
      0024DD 8E                    7436 	.db #0x8e	; 142
      0024DE 8E                    7437 	.db #0x8e	; 142
      0024DF 8E                    7438 	.db #0x8e	; 142
      0024E0 8E                    7439 	.db #0x8e	; 142
      0024E1 8E                    7440 	.db #0x8e	; 142
      0024E2 00                    7441 	.db #0x00	; 0
      0024E3 8E                    7442 	.db #0x8e	; 142
      0024E4 8E                    7443 	.db #0x8e	; 142
      0024E5 00                    7444 	.db #0x00	; 0
      0024E6 00                    7445 	.db #0x00	; 0
      0024E7 00                    7446 	.db #0x00	; 0
      0024E8 8E                    7447 	.db #0x8e	; 142
      0024E9 8E                    7448 	.db #0x8e	; 142
      0024EA 00                    7449 	.db #0x00	; 0
      0024EB 8E                    7450 	.db #0x8e	; 142
      0024EC 8E                    7451 	.db #0x8e	; 142
      0024ED 00                    7452 	.db #0x00	; 0
      0024EE 00                    7453 	.db #0x00	; 0
      0024EF 00                    7454 	.db #0x00	; 0
      0024F0 8E                    7455 	.db #0x8e	; 142
      0024F1 00                    7456 	.db #0x00	; 0
      0024F2 00                    7457 	.db #0x00	; 0
      0024F3 00                    7458 	.db #0x00	; 0
      0024F4 00                    7459 	.db #0x00	; 0
      0024F5 00                    7460 	.db #0x00	; 0
      0024F6 8E                    7461 	.db #0x8e	; 142
      0024F7 8E                    7462 	.db #0x8e	; 142
      0024F8 00                    7463 	.db #0x00	; 0
      0024F9 00                    7464 	.db #0x00	; 0
      0024FA 00                    7465 	.db #0x00	; 0
      0024FB 8E                    7466 	.db #0x8e	; 142
      0024FC 8E                    7467 	.db #0x8e	; 142
      0024FD 00                    7468 	.db #0x00	; 0
      0024FE 00                    7469 	.db #0x00	; 0
      0024FF 00                    7470 	.db #0x00	; 0
      002500 8E                    7471 	.db #0x8e	; 142
      002501 8E                    7472 	.db #0x8e	; 142
      002502                       7473 ___str_9:
      002502 50 52 45 53 53 20 54  7474 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002518 00                    7475 	.db 0x00
      002519                       7476 ___str_10:
      002519 41 4E 44 52 45 42 41  7477 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      00252D 00                    7478 	.db 0x00
      00252E                       7479 ___str_11:
      00252E 76 2E 3F 2E 3F 2E 3F  7480 	.ascii "v.?.?.?"
      002535 00                    7481 	.db 0x00
                                   7482 ;src\main.c:85: void main() {
                                   7483 ;	---------------------------------
                                   7484 ; Function main
                                   7485 ; ---------------------------------
      002536                       7486 _main::
                                   7487 ;src\main.c:87: while(TRUE) {
      002536                       7488 00102$:
                                   7489 ;src\main.c:91: TitleScreen();
      002536 CDr1Br22         [17] 7490 	call	_TitleScreen
                                   7491 ;src\main.c:93: InitGame();
      002539 CDr2Br20         [17] 7492 	call	_InitGame
                                   7493 ;src\main.c:96: }
      00253C 18 F8            [12] 7494 	jr	00102$
                                   7495 	.area _CODE
                                   7496 	.area _INITIALIZER
      000000                       7497 __xinit__gameOver:
      000000 00                    7498 	.db #0x00	; 0
      000001                       7499 __xinit__col:
      000001 00                    7500 	.db #0x00	; 0
      000002                       7501 __xinit__line:
      000002 00                    7502 	.db #0x00	; 0
      000003                       7503 __xinit__counter:
      000003 00                    7504 	.db #0x00	; 0
      000004                       7505 __xinit__blocksRemoved:
      000004 00 00                 7506 	.dw #0x0000
      000006                       7507 __xinit__level:
      000006 01                    7508 	.db #0x01	; 1
      000007                       7509 __xinit__newLevel:
      000007 00                    7510 	.db #0x00	; 0
      000008                       7511 __xinit__rndSeed:
      000008 00                    7512 	.db #0x00	; 0
      000009                       7513 __xinit__d_col:
      000009 00                    7514 	.db #0x00	; 0
      00000A                       7515 __xinit__d_line:
      00000A 00                    7516 	.db #0x00	; 0
      00000B                       7517 __xinit__d_value:
      00000B 00                    7518 	.db #0x00	; 0
                                   7519 	.area _CABS (ABS)
