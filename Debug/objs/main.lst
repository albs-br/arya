                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _PosMaskSprites
                                     38 	.globl _GetNextPieceColors
                                     39 	.globl _DrawColumn
                                     40 	.globl _DrawNumber
                                     41 	.globl _DrawString
                                     42 	.globl _DrawChar
                                     43 	.globl _ShowCountdown
                                     44 	.globl _BlinkNumber
                                     45 	.globl _AnimateSprites
                                     46 	.globl _DrawExplosionSprite
                                     47 	.globl _HideExplosionSprite
                                     48 	.globl _HideHitSprite
                                     49 	.globl _DrawHitSprite
                                     50 	.globl _HideArrowSprite
                                     51 	.globl _DrawArrowSprite
                                     52 	.globl _GetRandomInInterval
                                     53 	.globl _GetRandom
                                     54 	.globl _InitRnd
                                     55 	.globl _Power
                                     56 	.globl _Wait
                                     57 	.globl _SNSMAT
                                     58 	.globl _GTTRIG
                                     59 	.globl _GTSTCK
                                     60 	.globl _WRTPSG
                                     61 	.globl _GICINI
                                     62 	.globl _INIGRP
                                     63 	.globl _LDIRVM
                                     64 	.globl _FILVRM
                                     65 	.globl _WRTVRM
                                     66 	.globl _RDVRM
                                     67 	.globl _WRTVDP
                                     68 	.globl _ENASCR
                                     69 	.globl _DISSCR
                                     70 	.globl _rndSeed
                                     71 	.globl _newLevel
                                     72 	.globl _level
                                     73 	.globl _blocksRemoved
                                     74 	.globl _counter
                                     75 	.globl _line
                                     76 	.globl _col
                                     77 	.globl _gameOver
                                     78 	.globl _nextPieceColor_Back
                                     79 	.globl _nextPieceColor_Front
                                     80 	.globl _Rand_x
                                     81 	.globl _Rand_c
                                     82 	.globl _Rand_b
                                     83 	.globl _Rand_a
                                     84 	.globl _speed
                                     85 	.globl _nextBottomPiece
                                     86 	.globl _nextMidPiece
                                     87 	.globl _nextTopPiece
                                     88 	.globl _bottomPiece
                                     89 	.globl _midPiece
                                     90 	.globl _topPiece
                                     91 	.globl _playfieldTemp
                                     92 	.globl _playfield
                                     93 	.globl _GETPNT
                                     94 	.globl _PUTPNT
                                     95 	.globl _REPCNT
                                     96 	.globl _SCNCNT
                                     97 	.globl _ATRBYT
                                     98 	.globl _CMASK
                                     99 	.globl _CLOC
                                    100 	.globl _BDRCLR
                                    101 	.globl _BAKCLR
                                    102 	.globl _FORCLR
                                    103 	.globl _TRGFLG
                                    104 	.globl _STATFL
                                    105 	.globl _MSX_vdp_regs
                                    106 	.globl _CNSDFG
                                    107 	.globl _CSRX
                                    108 	.globl _CSRY
                                    109 	.globl _MSX_modedata_screen3
                                    110 	.globl _MSX_modedata_screen2
                                    111 	.globl _MSX_modedata_screen1
                                    112 	.globl _MSX_modedata_screen0
                                    113 	.globl _CLIKSW
                                    114 	.globl _JIFFY
                                    115 	.globl _CLMLST
                                    116 	.globl _CRTCNT
                                    117 	.globl _LINLEN
                                    118 	.globl _LINL32
                                    119 	.globl _LINL40
                                    120 	.globl _MSX_charset
                                    121 	.globl _colors
                                    122 	.globl _FONT
                                    123 	.globl _pieces
                                    124 	.globl _MSX_version
                                    125 	.globl _MSX_vdp_port_write
                                    126 	.globl _MSX_vdp_port_read
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 ;--------------------------------------------------------
                                    131 ; ram data
                                    132 ;--------------------------------------------------------
                                    133 	.area _DATA
                           000004   134 _MSX_charset	=	0x0004
                           00F3AE   135 _LINL40	=	0xf3ae
                           00F3AF   136 _LINL32	=	0xf3af
                           00F3B0   137 _LINLEN	=	0xf3b0
                           00F3B1   138 _CRTCNT	=	0xf3b1
                           00F3B1   139 _CLMLST	=	0xf3b1
                           00FC9E   140 _JIFFY	=	0xfc9e
                           00F3DB   141 _CLIKSW	=	0xf3db
                           00F3B3   142 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   143 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   144 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   145 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   146 _CSRY	=	0xf3dc
                           00F3DD   147 _CSRX	=	0xf3dd
                           00F3DE   148 _CNSDFG	=	0xf3de
                           00F3DF   149 _MSX_vdp_regs	=	0xf3df
                           00F3E7   150 _STATFL	=	0xf3e7
                           00F3E8   151 _TRGFLG	=	0xf3e8
                           00F3E9   152 _FORCLR	=	0xf3e9
                           00F3EA   153 _BAKCLR	=	0xf3ea
                           00F3EB   154 _BDRCLR	=	0xf3eb
                           00F92A   155 _CLOC	=	0xf92a
                           00F92C   156 _CMASK	=	0xf92c
                           00F3F2   157 _ATRBYT	=	0xf3f2
                           00F3F6   158 _SCNCNT	=	0xf3f6
                           00F3F7   159 _REPCNT	=	0xf3f7
                           00F3F8   160 _PUTPNT	=	0xf3f8
                           00F3FA   161 _GETPNT	=	0xf3fa
      000000                        162 _playfield::
      000000                        163 	.ds 72
      000048                        164 _playfieldTemp::
      000048                        165 	.ds 72
      000090                        166 _topPiece::
      000090                        167 	.ds 1
      000091                        168 _midPiece::
      000091                        169 	.ds 1
      000092                        170 _bottomPiece::
      000092                        171 	.ds 1
      000093                        172 _nextTopPiece::
      000093                        173 	.ds 1
      000094                        174 _nextMidPiece::
      000094                        175 	.ds 1
      000095                        176 _nextBottomPiece::
      000095                        177 	.ds 1
      000096                        178 _speed::
      000096                        179 	.ds 1
      000097                        180 _Rand_a::
      000097                        181 	.ds 1
      000098                        182 _Rand_b::
      000098                        183 	.ds 1
      000099                        184 _Rand_c::
      000099                        185 	.ds 1
      00009A                        186 _Rand_x::
      00009A                        187 	.ds 1
      00009B                        188 _nextPieceColor_Front::
      00009B                        189 	.ds 1
      00009C                        190 _nextPieceColor_Back::
      00009C                        191 	.ds 1
                                    192 ;--------------------------------------------------------
                                    193 ; ram data
                                    194 ;--------------------------------------------------------
                                    195 	.area _INITIALIZED
      000000                        196 _gameOver::
      000000                        197 	.ds 1
      000001                        198 _col::
      000001                        199 	.ds 1
      000002                        200 _line::
      000002                        201 	.ds 1
      000003                        202 _counter::
      000003                        203 	.ds 1
      000004                        204 _blocksRemoved::
      000004                        205 	.ds 2
      000006                        206 _level::
      000006                        207 	.ds 1
      000007                        208 _newLevel::
      000007                        209 	.ds 1
      000008                        210 _rndSeed::
      000008                        211 	.ds 1
                                    212 ;--------------------------------------------------------
                                    213 ; absolute external ram data
                                    214 ;--------------------------------------------------------
                                    215 	.area _DABS (ABS)
                                    216 ;--------------------------------------------------------
                                    217 ; global & static initialisations
                                    218 ;--------------------------------------------------------
                                    219 	.area _HOME
                                    220 	.area _GSINIT
                                    221 	.area _GSFINAL
                                    222 	.area _GSINIT
                                    223 ;--------------------------------------------------------
                                    224 ; Home
                                    225 ;--------------------------------------------------------
                                    226 	.area _HOME
                                    227 	.area _HOME
                                    228 ;--------------------------------------------------------
                                    229 ; code
                                    230 ;--------------------------------------------------------
                                    231 	.area _CODE
                                    232 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    233 ;	---------------------------------
                                    234 ; Function Wait
                                    235 ; ---------------------------------
      000000                        236 _Wait::
                                    237 ;src\/Common.h:2: do {
      000000 D1               [10]  238 	pop	de
      000001 C1               [10]  239 	pop	bc
      000002 C5               [11]  240 	push	bc
      000003 D5               [11]  241 	push	de
      000004                        242 00104$:
                                    243 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  244 	ld	de, (_JIFFY)
                                    245 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        246 00101$:
      000008 2A 9E FC         [16]  247 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  248 	cp	a, a
      00000C ED 52            [15]  249 	sbc	hl, de
      00000E 28 F8            [12]  250 	jr	Z, 00101$
                                    251 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  252 	ld	e, c
      000011 50               [ 4]  253 	ld	d, b
      000012 0B               [ 6]  254 	dec	bc
      000013 7A               [ 4]  255 	ld	a, d
      000014 B3               [ 4]  256 	or	a, e
      000015 20 ED            [12]  257 	jr	NZ, 00104$
                                    258 ;src\/Common.h:8: }
      000017 C9               [10]  259 	ret
                           000006   260 _MSX_vdp_port_read	=	0x0006
                           000007   261 _MSX_vdp_port_write	=	0x0007
                           00002D   262 _MSX_version	=	0x002d
      000018                        263 _pieces:
      000018 04                     264 	.db #0x04	; 4
      000019 08                     265 	.db #0x08	; 8
      00001A 0C                     266 	.db #0x0c	; 12
      00001B 10                     267 	.db #0x10	; 16
      00001C 14                     268 	.db #0x14	; 20
                                    269 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    270 ;	---------------------------------
                                    271 ; Function Power
                                    272 ; ---------------------------------
      00001D                        273 _Power::
      00001D DD E5            [15]  274 	push	ix
      00001F DD 21 00 00      [14]  275 	ld	ix,#0
      000023 DD 39            [15]  276 	add	ix,sp
                                    277 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  278 	ld	c, 4 (ix)
      000028 06 00            [ 7]  279 	ld	b, #0x00
      00002A 69               [ 4]  280 	ld	l, c
      00002B 60               [ 4]  281 	ld	h, b
                                    282 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  283 	ld	a, 5 (ix)
      00002F B7               [ 4]  284 	or	a, a
      000030 20 05            [12]  285 	jr	NZ, 00111$
      000032 21 01 00         [10]  286 	ld	hl, #0x0001
      000035 18 16            [12]  287 	jr	00107$
                                    288 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        289 00111$:
      000037 1E 01            [ 7]  290 	ld	e, #0x01
      000039                        291 00105$:
      000039 7B               [ 4]  292 	ld	a, e
      00003A DD 96 05         [19]  293 	sub	a, 5 (ix)
      00003D 30 0E            [12]  294 	jr	NC, 00103$
                                    295 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  296 	push	bc
      000040 D5               [11]  297 	push	de
      000041 C5               [11]  298 	push	bc
      000042 E5               [11]  299 	push	hl
      000043 CDr00r00         [17]  300 	call	__mulint
      000046 F1               [10]  301 	pop	af
      000047 F1               [10]  302 	pop	af
      000048 D1               [10]  303 	pop	de
      000049 C1               [10]  304 	pop	bc
                                    305 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  306 	inc	e
      00004B 18 EC            [12]  307 	jr	00105$
      00004D                        308 00103$:
                                    309 ;src\/Math.h:10: return power;
      00004D                        310 00107$:
                                    311 ;src\/Math.h:11: }
      00004D DD E1            [14]  312 	pop	ix
      00004F C9               [10]  313 	ret
                                    314 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    315 ;	---------------------------------
                                    316 ; Function InitRnd
                                    317 ; ---------------------------------
      000050                        318 _InitRnd::
                                    319 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  320 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  321 	ld	hl, #2
      000056 39               [11]  322 	add	hl, sp
      000057 AE               [ 7]  323 	xor	a, (hl)
      000058 32r97r00         [13]  324 	ld	(_Rand_a+0), a
                                    325 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  326 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  327 	ld	hl, #3
      000061 39               [11]  328 	add	hl, sp
      000062 AE               [ 7]  329 	xor	a, (hl)
      000063 32r98r00         [13]  330 	ld	(_Rand_b+0), a
                                    331 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  332 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  333 	ld	hl, #4
      00006C 39               [11]  334 	add	hl, sp
      00006D AE               [ 7]  335 	xor	a, (hl)
      00006E 32r99r00         [13]  336 	ld	(_Rand_c+0), a
                                    337 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  338 	ld	hl, #_Rand_x
      000074 34               [11]  339 	inc	(hl)
                                    340 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  341 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  342 	ld	hl, #_Rand_c
      00007B AE               [ 7]  343 	xor	a, (hl)
      00007C 21r9Ar00         [10]  344 	ld	hl, #_Rand_x
      00007F AE               [ 7]  345 	xor	a, (hl)
      000080 32r97r00         [13]  346 	ld	(_Rand_a+0), a
                                    347 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  348 	ld	hl, #_Rand_b
      000086 7E               [ 7]  349 	ld	a, (hl)
      000087 FD 21r97r00      [14]  350 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  351 	add	a, 0 (iy)
      00008E 77               [ 7]  352 	ld	(hl), a
                                    353 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  354 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  355 	srl	a
      000094 21r99r00         [10]  356 	ld	hl, #_Rand_c
      000097 86               [ 7]  357 	add	a, (hl)
      000098 FD 21r97r00      [14]  358 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  359 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  360 	ld	(_Rand_c+0), a
                                    361 ;src\/Random.h:38: }
      0000A2 C9               [10]  362 	ret
                                    363 ;src\/Random.h:40: unsigned char GetRandom() {
                                    364 ;	---------------------------------
                                    365 ; Function GetRandom
                                    366 ; ---------------------------------
      0000A3                        367 _GetRandom::
                                    368 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  369 	ld	hl, #_Rand_x
      0000A6 34               [11]  370 	inc	(hl)
                                    371 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  372 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  373 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  374 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  375 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  376 	xor	a, (hl)
      0000B2 32r97r00         [13]  377 	ld	(_Rand_a+0), a
                                    378 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  379 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  380 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  381 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  382 	add	a, 0 (iy)
      0000C0 77               [ 7]  383 	ld	(hl), a
                                    384 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  385 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  386 	srl	a
      0000C6 21r99r00         [10]  387 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  388 	add	a, (hl)
      0000CA FD 21r97r00      [14]  389 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  390 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  391 	ld	(_Rand_c+0), a
                                    392 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  393 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  394 	ld	l, a
                                    395 ;src\/Random.h:47: }
      0000D8 C9               [10]  396 	ret
                                    397 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    398 ;	---------------------------------
                                    399 ; Function GetRandomInInterval
                                    400 ; ---------------------------------
      0000D9                        401 _GetRandomInInterval::
                                    402 ;src\/Random.h:53: do {
      0000D9                        403 00101$:
                                    404 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  405 	call	_GetRandom
      0000DC 7D               [ 4]  406 	ld	a, l
      0000DD 21 03 00         [10]  407 	ld	hl, #3
      0000E0 39               [11]  408 	add	hl, sp
      0000E1 A6               [ 7]  409 	and	a, (hl)
      0000E2 4F               [ 4]  410 	ld	c, a
                                    411 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  412 	ld	hl, #2
      0000E6 39               [11]  413 	add	hl, sp
      0000E7 7E               [ 7]  414 	ld	a, (hl)
      0000E8 91               [ 4]  415 	sub	a, c
      0000E9 38 EE            [12]  416 	jr	C, 00101$
                                    417 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  418 	ld	l, c
                                    419 ;src\/Random.h:59: }
      0000EC C9               [10]  420 	ret
                                    421 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    422 ;	---------------------------------
                                    423 ; Function DrawArrowSprite
                                    424 ; ---------------------------------
      0000ED                        425 _DrawArrowSprite::
      0000ED DD E5            [15]  426 	push	ix
      0000EF DD 21 00 00      [14]  427 	ld	ix,#0
      0000F3 DD 39            [15]  428 	add	ix,sp
      0000F5 21 F8 FF         [10]  429 	ld	hl, #-8
      0000F8 39               [11]  430 	add	hl, sp
      0000F9 F9               [ 6]  431 	ld	sp, hl
                                    432 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  433 	ld	hl, #0
      0000FD 39               [11]  434 	add	hl, sp
      0000FE EB               [ 4]  435 	ex	de, hl
      0000FF 3E 0F            [ 7]  436 	ld	a, #0x0f
      000101 12               [ 7]  437 	ld	(de), a
      000102 6B               [ 4]  438 	ld	l, e
      000103 62               [ 4]  439 	ld	h, d
      000104 23               [ 6]  440 	inc	hl
      000105 36 0E            [10]  441 	ld	(hl), #0x0e
      000107 6B               [ 4]  442 	ld	l, e
      000108 62               [ 4]  443 	ld	h, d
      000109 23               [ 6]  444 	inc	hl
      00010A 23               [ 6]  445 	inc	hl
      00010B 36 05            [10]  446 	ld	(hl), #0x05
      00010D 6B               [ 4]  447 	ld	l, e
      00010E 62               [ 4]  448 	ld	h, d
      00010F 23               [ 6]  449 	inc	hl
      000110 23               [ 6]  450 	inc	hl
      000111 23               [ 6]  451 	inc	hl
      000112 36 04            [10]  452 	ld	(hl), #0x04
      000114 21 04 00         [10]  453 	ld	hl, #0x0004
      000117 19               [11]  454 	add	hl, de
      000118 36 04            [10]  455 	ld	(hl), #0x04
      00011A 21 05 00         [10]  456 	ld	hl, #0x0005
      00011D 19               [11]  457 	add	hl, de
      00011E 36 05            [10]  458 	ld	(hl), #0x05
      000120 21 06 00         [10]  459 	ld	hl, #0x0006
      000123 19               [11]  460 	add	hl, de
      000124 36 0E            [10]  461 	ld	(hl), #0x0e
      000126 21 07 00         [10]  462 	ld	hl, #0x0007
      000129 19               [11]  463 	add	hl, de
      00012A 36 0F            [10]  464 	ld	(hl), #0x0f
                                    465 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  466 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  467 	ld	a, l
      000130 E6 0E            [ 7]  468 	and	a, #0x0e
      000132 6F               [ 4]  469 	ld	l, a
      000133 26 00            [ 7]  470 	ld	h, #0x00
      000135 CB 3C            [ 8]  471 	srl	h
      000137 CB 1D            [ 8]  472 	rr	l
                                    473 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  474 	ld	a, 5 (ix)
      00013C 3D               [ 4]  475 	dec	a
      00013D E5               [11]  476 	push	hl
      00013E D5               [11]  477 	push	de
      00013F F5               [11]  478 	push	af
      000140 33               [ 6]  479 	inc	sp
      000141 01 00 1B         [10]  480 	ld	bc, #0x1b00
      000144 C5               [11]  481 	push	bc
      000145 CDr00r00         [17]  482 	call	_WRTVRM
      000148 F1               [10]  483 	pop	af
      000149 33               [ 6]  484 	inc	sp
      00014A DD 7E 04         [19]  485 	ld	a, 4 (ix)
      00014D F5               [11]  486 	push	af
      00014E 33               [ 6]  487 	inc	sp
      00014F 01 01 1B         [10]  488 	ld	bc, #0x1b01
      000152 C5               [11]  489 	push	bc
      000153 CDr00r00         [17]  490 	call	_WRTVRM
      000156 F1               [10]  491 	pop	af
      000157 33               [ 6]  492 	inc	sp
      000158 AF               [ 4]  493 	xor	a, a
      000159 F5               [11]  494 	push	af
      00015A 33               [ 6]  495 	inc	sp
      00015B 01 02 1B         [10]  496 	ld	bc, #0x1b02
      00015E C5               [11]  497 	push	bc
      00015F CDr00r00         [17]  498 	call	_WRTVRM
      000162 F1               [10]  499 	pop	af
      000163 33               [ 6]  500 	inc	sp
      000164 D1               [10]  501 	pop	de
      000165 E1               [10]  502 	pop	hl
                                    503 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  504 	ld	h, #0x00
      000168 19               [11]  505 	add	hl, de
      000169 7E               [ 7]  506 	ld	a, (hl)
      00016A F5               [11]  507 	push	af
      00016B 33               [ 6]  508 	inc	sp
      00016C 21 03 1B         [10]  509 	ld	hl, #0x1b03
      00016F E5               [11]  510 	push	hl
      000170 CDr00r00         [17]  511 	call	_WRTVRM
                                    512 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  513 	ld	sp,ix
      000175 DD E1            [14]  514 	pop	ix
      000177 C9               [10]  515 	ret
      000178                        516 _FONT:
      000178 00                     517 	.db #0x00	; 0
      000179 00                     518 	.db #0x00	; 0
      00017A 00                     519 	.db #0x00	; 0
      00017B 00                     520 	.db #0x00	; 0
      00017C 00                     521 	.db #0x00	; 0
      00017D 00                     522 	.db #0x00	; 0
      00017E 00                     523 	.db #0x00	; 0
      00017F 00                     524 	.db #0x00	; 0
      000180 30                     525 	.db #0x30	; 48	'0'
      000181 78                     526 	.db #0x78	; 120	'x'
      000182 78                     527 	.db #0x78	; 120	'x'
      000183 30                     528 	.db #0x30	; 48	'0'
      000184 30                     529 	.db #0x30	; 48	'0'
      000185 00                     530 	.db #0x00	; 0
      000186 30                     531 	.db #0x30	; 48	'0'
      000187 00                     532 	.db #0x00	; 0
      000188 6C                     533 	.db #0x6c	; 108	'l'
      000189 6C                     534 	.db #0x6c	; 108	'l'
      00018A 6C                     535 	.db #0x6c	; 108	'l'
      00018B 00                     536 	.db #0x00	; 0
      00018C 00                     537 	.db #0x00	; 0
      00018D 00                     538 	.db #0x00	; 0
      00018E 00                     539 	.db #0x00	; 0
      00018F 00                     540 	.db #0x00	; 0
      000190 6C                     541 	.db #0x6c	; 108	'l'
      000191 6C                     542 	.db #0x6c	; 108	'l'
      000192 FE                     543 	.db #0xfe	; 254
      000193 6C                     544 	.db #0x6c	; 108	'l'
      000194 FE                     545 	.db #0xfe	; 254
      000195 6C                     546 	.db #0x6c	; 108	'l'
      000196 6C                     547 	.db #0x6c	; 108	'l'
      000197 00                     548 	.db #0x00	; 0
      000198 30                     549 	.db #0x30	; 48	'0'
      000199 7C                     550 	.db #0x7c	; 124
      00019A C0                     551 	.db #0xc0	; 192
      00019B 78                     552 	.db #0x78	; 120	'x'
      00019C 0C                     553 	.db #0x0c	; 12
      00019D F8                     554 	.db #0xf8	; 248
      00019E 30                     555 	.db #0x30	; 48	'0'
      00019F 00                     556 	.db #0x00	; 0
      0001A0 00                     557 	.db #0x00	; 0
      0001A1 C6                     558 	.db #0xc6	; 198
      0001A2 CC                     559 	.db #0xcc	; 204
      0001A3 18                     560 	.db #0x18	; 24
      0001A4 30                     561 	.db #0x30	; 48	'0'
      0001A5 66                     562 	.db #0x66	; 102	'f'
      0001A6 C6                     563 	.db #0xc6	; 198
      0001A7 00                     564 	.db #0x00	; 0
      0001A8 38                     565 	.db #0x38	; 56	'8'
      0001A9 6C                     566 	.db #0x6c	; 108	'l'
      0001AA 38                     567 	.db #0x38	; 56	'8'
      0001AB 76                     568 	.db #0x76	; 118	'v'
      0001AC DC                     569 	.db #0xdc	; 220
      0001AD CC                     570 	.db #0xcc	; 204
      0001AE 76                     571 	.db #0x76	; 118	'v'
      0001AF 00                     572 	.db #0x00	; 0
      0001B0 60                     573 	.db #0x60	; 96
      0001B1 60                     574 	.db #0x60	; 96
      0001B2 C0                     575 	.db #0xc0	; 192
      0001B3 00                     576 	.db #0x00	; 0
      0001B4 00                     577 	.db #0x00	; 0
      0001B5 00                     578 	.db #0x00	; 0
      0001B6 00                     579 	.db #0x00	; 0
      0001B7 00                     580 	.db #0x00	; 0
      0001B8 18                     581 	.db #0x18	; 24
      0001B9 30                     582 	.db #0x30	; 48	'0'
      0001BA 60                     583 	.db #0x60	; 96
      0001BB 60                     584 	.db #0x60	; 96
      0001BC 60                     585 	.db #0x60	; 96
      0001BD 30                     586 	.db #0x30	; 48	'0'
      0001BE 18                     587 	.db #0x18	; 24
      0001BF 00                     588 	.db #0x00	; 0
      0001C0 60                     589 	.db #0x60	; 96
      0001C1 30                     590 	.db #0x30	; 48	'0'
      0001C2 18                     591 	.db #0x18	; 24
      0001C3 18                     592 	.db #0x18	; 24
      0001C4 18                     593 	.db #0x18	; 24
      0001C5 30                     594 	.db #0x30	; 48	'0'
      0001C6 60                     595 	.db #0x60	; 96
      0001C7 00                     596 	.db #0x00	; 0
      0001C8 00                     597 	.db #0x00	; 0
      0001C9 66                     598 	.db #0x66	; 102	'f'
      0001CA 3C                     599 	.db #0x3c	; 60
      0001CB FF                     600 	.db #0xff	; 255
      0001CC 3C                     601 	.db #0x3c	; 60
      0001CD 66                     602 	.db #0x66	; 102	'f'
      0001CE 00                     603 	.db #0x00	; 0
      0001CF 00                     604 	.db #0x00	; 0
      0001D0 00                     605 	.db #0x00	; 0
      0001D1 30                     606 	.db #0x30	; 48	'0'
      0001D2 30                     607 	.db #0x30	; 48	'0'
      0001D3 FC                     608 	.db #0xfc	; 252
      0001D4 30                     609 	.db #0x30	; 48	'0'
      0001D5 30                     610 	.db #0x30	; 48	'0'
      0001D6 00                     611 	.db #0x00	; 0
      0001D7 00                     612 	.db #0x00	; 0
      0001D8 00                     613 	.db #0x00	; 0
      0001D9 00                     614 	.db #0x00	; 0
      0001DA 00                     615 	.db #0x00	; 0
      0001DB 00                     616 	.db #0x00	; 0
      0001DC 00                     617 	.db #0x00	; 0
      0001DD 30                     618 	.db #0x30	; 48	'0'
      0001DE 30                     619 	.db #0x30	; 48	'0'
      0001DF 60                     620 	.db #0x60	; 96
      0001E0 00                     621 	.db #0x00	; 0
      0001E1 00                     622 	.db #0x00	; 0
      0001E2 00                     623 	.db #0x00	; 0
      0001E3 FC                     624 	.db #0xfc	; 252
      0001E4 00                     625 	.db #0x00	; 0
      0001E5 00                     626 	.db #0x00	; 0
      0001E6 00                     627 	.db #0x00	; 0
      0001E7 00                     628 	.db #0x00	; 0
      0001E8 00                     629 	.db #0x00	; 0
      0001E9 00                     630 	.db #0x00	; 0
      0001EA 00                     631 	.db #0x00	; 0
      0001EB 00                     632 	.db #0x00	; 0
      0001EC 00                     633 	.db #0x00	; 0
      0001ED 30                     634 	.db #0x30	; 48	'0'
      0001EE 30                     635 	.db #0x30	; 48	'0'
      0001EF 00                     636 	.db #0x00	; 0
      0001F0 06                     637 	.db #0x06	; 6
      0001F1 0C                     638 	.db #0x0c	; 12
      0001F2 18                     639 	.db #0x18	; 24
      0001F3 30                     640 	.db #0x30	; 48	'0'
      0001F4 60                     641 	.db #0x60	; 96
      0001F5 C0                     642 	.db #0xc0	; 192
      0001F6 80                     643 	.db #0x80	; 128
      0001F7 00                     644 	.db #0x00	; 0
      0001F8 7C                     645 	.db #0x7c	; 124
      0001F9 C6                     646 	.db #0xc6	; 198
      0001FA CE                     647 	.db #0xce	; 206
      0001FB DE                     648 	.db #0xde	; 222
      0001FC F6                     649 	.db #0xf6	; 246
      0001FD E6                     650 	.db #0xe6	; 230
      0001FE 7C                     651 	.db #0x7c	; 124
      0001FF 00                     652 	.db #0x00	; 0
      000200 30                     653 	.db #0x30	; 48	'0'
      000201 70                     654 	.db #0x70	; 112	'p'
      000202 30                     655 	.db #0x30	; 48	'0'
      000203 30                     656 	.db #0x30	; 48	'0'
      000204 30                     657 	.db #0x30	; 48	'0'
      000205 30                     658 	.db #0x30	; 48	'0'
      000206 FC                     659 	.db #0xfc	; 252
      000207 00                     660 	.db #0x00	; 0
      000208 78                     661 	.db #0x78	; 120	'x'
      000209 CC                     662 	.db #0xcc	; 204
      00020A 0C                     663 	.db #0x0c	; 12
      00020B 38                     664 	.db #0x38	; 56	'8'
      00020C 60                     665 	.db #0x60	; 96
      00020D C4                     666 	.db #0xc4	; 196
      00020E FC                     667 	.db #0xfc	; 252
      00020F 00                     668 	.db #0x00	; 0
      000210 78                     669 	.db #0x78	; 120	'x'
      000211 CC                     670 	.db #0xcc	; 204
      000212 0C                     671 	.db #0x0c	; 12
      000213 38                     672 	.db #0x38	; 56	'8'
      000214 0C                     673 	.db #0x0c	; 12
      000215 CC                     674 	.db #0xcc	; 204
      000216 78                     675 	.db #0x78	; 120	'x'
      000217 00                     676 	.db #0x00	; 0
      000218 1C                     677 	.db #0x1c	; 28
      000219 3C                     678 	.db #0x3c	; 60
      00021A 6C                     679 	.db #0x6c	; 108	'l'
      00021B CC                     680 	.db #0xcc	; 204
      00021C FE                     681 	.db #0xfe	; 254
      00021D 0C                     682 	.db #0x0c	; 12
      00021E 1E                     683 	.db #0x1e	; 30
      00021F 00                     684 	.db #0x00	; 0
      000220 FC                     685 	.db #0xfc	; 252
      000221 C0                     686 	.db #0xc0	; 192
      000222 F8                     687 	.db #0xf8	; 248
      000223 0C                     688 	.db #0x0c	; 12
      000224 0C                     689 	.db #0x0c	; 12
      000225 CC                     690 	.db #0xcc	; 204
      000226 78                     691 	.db #0x78	; 120	'x'
      000227 00                     692 	.db #0x00	; 0
      000228 38                     693 	.db #0x38	; 56	'8'
      000229 60                     694 	.db #0x60	; 96
      00022A C0                     695 	.db #0xc0	; 192
      00022B F8                     696 	.db #0xf8	; 248
      00022C CC                     697 	.db #0xcc	; 204
      00022D CC                     698 	.db #0xcc	; 204
      00022E 78                     699 	.db #0x78	; 120	'x'
      00022F 00                     700 	.db #0x00	; 0
      000230 FC                     701 	.db #0xfc	; 252
      000231 CC                     702 	.db #0xcc	; 204
      000232 0C                     703 	.db #0x0c	; 12
      000233 18                     704 	.db #0x18	; 24
      000234 30                     705 	.db #0x30	; 48	'0'
      000235 30                     706 	.db #0x30	; 48	'0'
      000236 30                     707 	.db #0x30	; 48	'0'
      000237 00                     708 	.db #0x00	; 0
      000238 78                     709 	.db #0x78	; 120	'x'
      000239 CC                     710 	.db #0xcc	; 204
      00023A CC                     711 	.db #0xcc	; 204
      00023B 78                     712 	.db #0x78	; 120	'x'
      00023C CC                     713 	.db #0xcc	; 204
      00023D CC                     714 	.db #0xcc	; 204
      00023E 78                     715 	.db #0x78	; 120	'x'
      00023F 00                     716 	.db #0x00	; 0
      000240 78                     717 	.db #0x78	; 120	'x'
      000241 CC                     718 	.db #0xcc	; 204
      000242 CC                     719 	.db #0xcc	; 204
      000243 7C                     720 	.db #0x7c	; 124
      000244 0C                     721 	.db #0x0c	; 12
      000245 18                     722 	.db #0x18	; 24
      000246 70                     723 	.db #0x70	; 112	'p'
      000247 00                     724 	.db #0x00	; 0
      000248 00                     725 	.db #0x00	; 0
      000249 30                     726 	.db #0x30	; 48	'0'
      00024A 30                     727 	.db #0x30	; 48	'0'
      00024B 00                     728 	.db #0x00	; 0
      00024C 00                     729 	.db #0x00	; 0
      00024D 30                     730 	.db #0x30	; 48	'0'
      00024E 30                     731 	.db #0x30	; 48	'0'
      00024F 00                     732 	.db #0x00	; 0
      000250 00                     733 	.db #0x00	; 0
      000251 30                     734 	.db #0x30	; 48	'0'
      000252 30                     735 	.db #0x30	; 48	'0'
      000253 00                     736 	.db #0x00	; 0
      000254 30                     737 	.db #0x30	; 48	'0'
      000255 30                     738 	.db #0x30	; 48	'0'
      000256 60                     739 	.db #0x60	; 96
      000257 00                     740 	.db #0x00	; 0
      000258 18                     741 	.db #0x18	; 24
      000259 30                     742 	.db #0x30	; 48	'0'
      00025A 60                     743 	.db #0x60	; 96
      00025B C0                     744 	.db #0xc0	; 192
      00025C 60                     745 	.db #0x60	; 96
      00025D 30                     746 	.db #0x30	; 48	'0'
      00025E 18                     747 	.db #0x18	; 24
      00025F 00                     748 	.db #0x00	; 0
      000260 00                     749 	.db #0x00	; 0
      000261 00                     750 	.db #0x00	; 0
      000262 FC                     751 	.db #0xfc	; 252
      000263 00                     752 	.db #0x00	; 0
      000264 00                     753 	.db #0x00	; 0
      000265 FC                     754 	.db #0xfc	; 252
      000266 00                     755 	.db #0x00	; 0
      000267 00                     756 	.db #0x00	; 0
      000268 60                     757 	.db #0x60	; 96
      000269 30                     758 	.db #0x30	; 48	'0'
      00026A 18                     759 	.db #0x18	; 24
      00026B 0C                     760 	.db #0x0c	; 12
      00026C 18                     761 	.db #0x18	; 24
      00026D 30                     762 	.db #0x30	; 48	'0'
      00026E 60                     763 	.db #0x60	; 96
      00026F 00                     764 	.db #0x00	; 0
      000270 78                     765 	.db #0x78	; 120	'x'
      000271 CC                     766 	.db #0xcc	; 204
      000272 0C                     767 	.db #0x0c	; 12
      000273 18                     768 	.db #0x18	; 24
      000274 30                     769 	.db #0x30	; 48	'0'
      000275 00                     770 	.db #0x00	; 0
      000276 30                     771 	.db #0x30	; 48	'0'
      000277 00                     772 	.db #0x00	; 0
      000278 7C                     773 	.db #0x7c	; 124
      000279 C6                     774 	.db #0xc6	; 198
      00027A DE                     775 	.db #0xde	; 222
      00027B DE                     776 	.db #0xde	; 222
      00027C DE                     777 	.db #0xde	; 222
      00027D C0                     778 	.db #0xc0	; 192
      00027E 78                     779 	.db #0x78	; 120	'x'
      00027F 00                     780 	.db #0x00	; 0
      000280 30                     781 	.db #0x30	; 48	'0'
      000281 78                     782 	.db #0x78	; 120	'x'
      000282 CC                     783 	.db #0xcc	; 204
      000283 CC                     784 	.db #0xcc	; 204
      000284 FC                     785 	.db #0xfc	; 252
      000285 CC                     786 	.db #0xcc	; 204
      000286 CC                     787 	.db #0xcc	; 204
      000287 00                     788 	.db #0x00	; 0
      000288 FC                     789 	.db #0xfc	; 252
      000289 66                     790 	.db #0x66	; 102	'f'
      00028A 66                     791 	.db #0x66	; 102	'f'
      00028B 7C                     792 	.db #0x7c	; 124
      00028C 66                     793 	.db #0x66	; 102	'f'
      00028D 66                     794 	.db #0x66	; 102	'f'
      00028E FC                     795 	.db #0xfc	; 252
      00028F 00                     796 	.db #0x00	; 0
      000290 3C                     797 	.db #0x3c	; 60
      000291 66                     798 	.db #0x66	; 102	'f'
      000292 C0                     799 	.db #0xc0	; 192
      000293 C0                     800 	.db #0xc0	; 192
      000294 C0                     801 	.db #0xc0	; 192
      000295 66                     802 	.db #0x66	; 102	'f'
      000296 3C                     803 	.db #0x3c	; 60
      000297 00                     804 	.db #0x00	; 0
      000298 F8                     805 	.db #0xf8	; 248
      000299 6C                     806 	.db #0x6c	; 108	'l'
      00029A 66                     807 	.db #0x66	; 102	'f'
      00029B 66                     808 	.db #0x66	; 102	'f'
      00029C 66                     809 	.db #0x66	; 102	'f'
      00029D 6C                     810 	.db #0x6c	; 108	'l'
      00029E F8                     811 	.db #0xf8	; 248
      00029F 00                     812 	.db #0x00	; 0
      0002A0 FE                     813 	.db #0xfe	; 254
      0002A1 62                     814 	.db #0x62	; 98	'b'
      0002A2 68                     815 	.db #0x68	; 104	'h'
      0002A3 78                     816 	.db #0x78	; 120	'x'
      0002A4 68                     817 	.db #0x68	; 104	'h'
      0002A5 62                     818 	.db #0x62	; 98	'b'
      0002A6 FE                     819 	.db #0xfe	; 254
      0002A7 00                     820 	.db #0x00	; 0
      0002A8 FE                     821 	.db #0xfe	; 254
      0002A9 62                     822 	.db #0x62	; 98	'b'
      0002AA 68                     823 	.db #0x68	; 104	'h'
      0002AB 78                     824 	.db #0x78	; 120	'x'
      0002AC 68                     825 	.db #0x68	; 104	'h'
      0002AD 60                     826 	.db #0x60	; 96
      0002AE F0                     827 	.db #0xf0	; 240
      0002AF 00                     828 	.db #0x00	; 0
      0002B0 3C                     829 	.db #0x3c	; 60
      0002B1 66                     830 	.db #0x66	; 102	'f'
      0002B2 C0                     831 	.db #0xc0	; 192
      0002B3 C0                     832 	.db #0xc0	; 192
      0002B4 CE                     833 	.db #0xce	; 206
      0002B5 66                     834 	.db #0x66	; 102	'f'
      0002B6 3E                     835 	.db #0x3e	; 62
      0002B7 00                     836 	.db #0x00	; 0
      0002B8 CC                     837 	.db #0xcc	; 204
      0002B9 CC                     838 	.db #0xcc	; 204
      0002BA CC                     839 	.db #0xcc	; 204
      0002BB FC                     840 	.db #0xfc	; 252
      0002BC CC                     841 	.db #0xcc	; 204
      0002BD CC                     842 	.db #0xcc	; 204
      0002BE CC                     843 	.db #0xcc	; 204
      0002BF 00                     844 	.db #0x00	; 0
      0002C0 78                     845 	.db #0x78	; 120	'x'
      0002C1 30                     846 	.db #0x30	; 48	'0'
      0002C2 30                     847 	.db #0x30	; 48	'0'
      0002C3 30                     848 	.db #0x30	; 48	'0'
      0002C4 30                     849 	.db #0x30	; 48	'0'
      0002C5 30                     850 	.db #0x30	; 48	'0'
      0002C6 78                     851 	.db #0x78	; 120	'x'
      0002C7 00                     852 	.db #0x00	; 0
      0002C8 1E                     853 	.db #0x1e	; 30
      0002C9 0C                     854 	.db #0x0c	; 12
      0002CA 0C                     855 	.db #0x0c	; 12
      0002CB 0C                     856 	.db #0x0c	; 12
      0002CC CC                     857 	.db #0xcc	; 204
      0002CD CC                     858 	.db #0xcc	; 204
      0002CE 78                     859 	.db #0x78	; 120	'x'
      0002CF 00                     860 	.db #0x00	; 0
      0002D0 E6                     861 	.db #0xe6	; 230
      0002D1 66                     862 	.db #0x66	; 102	'f'
      0002D2 6C                     863 	.db #0x6c	; 108	'l'
      0002D3 78                     864 	.db #0x78	; 120	'x'
      0002D4 6C                     865 	.db #0x6c	; 108	'l'
      0002D5 66                     866 	.db #0x66	; 102	'f'
      0002D6 E6                     867 	.db #0xe6	; 230
      0002D7 00                     868 	.db #0x00	; 0
      0002D8 F0                     869 	.db #0xf0	; 240
      0002D9 60                     870 	.db #0x60	; 96
      0002DA 60                     871 	.db #0x60	; 96
      0002DB 60                     872 	.db #0x60	; 96
      0002DC 62                     873 	.db #0x62	; 98	'b'
      0002DD 66                     874 	.db #0x66	; 102	'f'
      0002DE FE                     875 	.db #0xfe	; 254
      0002DF 00                     876 	.db #0x00	; 0
      0002E0 C6                     877 	.db #0xc6	; 198
      0002E1 EE                     878 	.db #0xee	; 238
      0002E2 FE                     879 	.db #0xfe	; 254
      0002E3 FE                     880 	.db #0xfe	; 254
      0002E4 D6                     881 	.db #0xd6	; 214
      0002E5 C6                     882 	.db #0xc6	; 198
      0002E6 C6                     883 	.db #0xc6	; 198
      0002E7 00                     884 	.db #0x00	; 0
      0002E8 C6                     885 	.db #0xc6	; 198
      0002E9 E6                     886 	.db #0xe6	; 230
      0002EA F6                     887 	.db #0xf6	; 246
      0002EB DE                     888 	.db #0xde	; 222
      0002EC CE                     889 	.db #0xce	; 206
      0002ED C6                     890 	.db #0xc6	; 198
      0002EE C6                     891 	.db #0xc6	; 198
      0002EF 00                     892 	.db #0x00	; 0
      0002F0 38                     893 	.db #0x38	; 56	'8'
      0002F1 6C                     894 	.db #0x6c	; 108	'l'
      0002F2 C6                     895 	.db #0xc6	; 198
      0002F3 C6                     896 	.db #0xc6	; 198
      0002F4 C6                     897 	.db #0xc6	; 198
      0002F5 6C                     898 	.db #0x6c	; 108	'l'
      0002F6 38                     899 	.db #0x38	; 56	'8'
      0002F7 00                     900 	.db #0x00	; 0
      0002F8 FC                     901 	.db #0xfc	; 252
      0002F9 66                     902 	.db #0x66	; 102	'f'
      0002FA 66                     903 	.db #0x66	; 102	'f'
      0002FB 7C                     904 	.db #0x7c	; 124
      0002FC 60                     905 	.db #0x60	; 96
      0002FD 60                     906 	.db #0x60	; 96
      0002FE F0                     907 	.db #0xf0	; 240
      0002FF 00                     908 	.db #0x00	; 0
      000300 78                     909 	.db #0x78	; 120	'x'
      000301 CC                     910 	.db #0xcc	; 204
      000302 CC                     911 	.db #0xcc	; 204
      000303 CC                     912 	.db #0xcc	; 204
      000304 DC                     913 	.db #0xdc	; 220
      000305 78                     914 	.db #0x78	; 120	'x'
      000306 1C                     915 	.db #0x1c	; 28
      000307 00                     916 	.db #0x00	; 0
      000308 FC                     917 	.db #0xfc	; 252
      000309 66                     918 	.db #0x66	; 102	'f'
      00030A 66                     919 	.db #0x66	; 102	'f'
      00030B 7C                     920 	.db #0x7c	; 124
      00030C 6C                     921 	.db #0x6c	; 108	'l'
      00030D 66                     922 	.db #0x66	; 102	'f'
      00030E E6                     923 	.db #0xe6	; 230
      00030F 00                     924 	.db #0x00	; 0
      000310 78                     925 	.db #0x78	; 120	'x'
      000311 CC                     926 	.db #0xcc	; 204
      000312 E0                     927 	.db #0xe0	; 224
      000313 70                     928 	.db #0x70	; 112	'p'
      000314 1C                     929 	.db #0x1c	; 28
      000315 CC                     930 	.db #0xcc	; 204
      000316 78                     931 	.db #0x78	; 120	'x'
      000317 00                     932 	.db #0x00	; 0
      000318 FC                     933 	.db #0xfc	; 252
      000319 B4                     934 	.db #0xb4	; 180
      00031A 30                     935 	.db #0x30	; 48	'0'
      00031B 30                     936 	.db #0x30	; 48	'0'
      00031C 30                     937 	.db #0x30	; 48	'0'
      00031D 30                     938 	.db #0x30	; 48	'0'
      00031E 78                     939 	.db #0x78	; 120	'x'
      00031F 00                     940 	.db #0x00	; 0
      000320 CC                     941 	.db #0xcc	; 204
      000321 CC                     942 	.db #0xcc	; 204
      000322 CC                     943 	.db #0xcc	; 204
      000323 CC                     944 	.db #0xcc	; 204
      000324 CC                     945 	.db #0xcc	; 204
      000325 CC                     946 	.db #0xcc	; 204
      000326 FC                     947 	.db #0xfc	; 252
      000327 00                     948 	.db #0x00	; 0
      000328 CC                     949 	.db #0xcc	; 204
      000329 CC                     950 	.db #0xcc	; 204
      00032A CC                     951 	.db #0xcc	; 204
      00032B CC                     952 	.db #0xcc	; 204
      00032C CC                     953 	.db #0xcc	; 204
      00032D 78                     954 	.db #0x78	; 120	'x'
      00032E 30                     955 	.db #0x30	; 48	'0'
      00032F 00                     956 	.db #0x00	; 0
      000330 C6                     957 	.db #0xc6	; 198
      000331 C6                     958 	.db #0xc6	; 198
      000332 C6                     959 	.db #0xc6	; 198
      000333 D6                     960 	.db #0xd6	; 214
      000334 FE                     961 	.db #0xfe	; 254
      000335 EE                     962 	.db #0xee	; 238
      000336 C6                     963 	.db #0xc6	; 198
      000337 00                     964 	.db #0x00	; 0
      000338 C6                     965 	.db #0xc6	; 198
      000339 C6                     966 	.db #0xc6	; 198
      00033A 6C                     967 	.db #0x6c	; 108	'l'
      00033B 38                     968 	.db #0x38	; 56	'8'
      00033C 38                     969 	.db #0x38	; 56	'8'
      00033D 6C                     970 	.db #0x6c	; 108	'l'
      00033E C6                     971 	.db #0xc6	; 198
      00033F 00                     972 	.db #0x00	; 0
      000340 CC                     973 	.db #0xcc	; 204
      000341 CC                     974 	.db #0xcc	; 204
      000342 CC                     975 	.db #0xcc	; 204
      000343 78                     976 	.db #0x78	; 120	'x'
      000344 30                     977 	.db #0x30	; 48	'0'
      000345 30                     978 	.db #0x30	; 48	'0'
      000346 78                     979 	.db #0x78	; 120	'x'
      000347 00                     980 	.db #0x00	; 0
      000348 FE                     981 	.db #0xfe	; 254
      000349 C6                     982 	.db #0xc6	; 198
      00034A 8C                     983 	.db #0x8c	; 140
      00034B 18                     984 	.db #0x18	; 24
      00034C 32                     985 	.db #0x32	; 50	'2'
      00034D 66                     986 	.db #0x66	; 102	'f'
      00034E FE                     987 	.db #0xfe	; 254
      00034F 00                     988 	.db #0x00	; 0
      000350 78                     989 	.db #0x78	; 120	'x'
      000351 60                     990 	.db #0x60	; 96
      000352 60                     991 	.db #0x60	; 96
      000353 60                     992 	.db #0x60	; 96
      000354 60                     993 	.db #0x60	; 96
      000355 60                     994 	.db #0x60	; 96
      000356 78                     995 	.db #0x78	; 120	'x'
      000357 00                     996 	.db #0x00	; 0
      000358 C0                     997 	.db #0xc0	; 192
      000359 60                     998 	.db #0x60	; 96
      00035A 30                     999 	.db #0x30	; 48	'0'
      00035B 18                    1000 	.db #0x18	; 24
      00035C 0C                    1001 	.db #0x0c	; 12
      00035D 06                    1002 	.db #0x06	; 6
      00035E 02                    1003 	.db #0x02	; 2
      00035F 00                    1004 	.db #0x00	; 0
      000360 78                    1005 	.db #0x78	; 120	'x'
      000361 18                    1006 	.db #0x18	; 24
      000362 18                    1007 	.db #0x18	; 24
      000363 18                    1008 	.db #0x18	; 24
      000364 18                    1009 	.db #0x18	; 24
      000365 18                    1010 	.db #0x18	; 24
      000366 78                    1011 	.db #0x78	; 120	'x'
      000367 00                    1012 	.db #0x00	; 0
      000368 10                    1013 	.db #0x10	; 16
      000369 38                    1014 	.db #0x38	; 56	'8'
      00036A 6C                    1015 	.db #0x6c	; 108	'l'
      00036B C6                    1016 	.db #0xc6	; 198
      00036C 00                    1017 	.db #0x00	; 0
      00036D 00                    1018 	.db #0x00	; 0
      00036E 00                    1019 	.db #0x00	; 0
      00036F 00                    1020 	.db #0x00	; 0
      000370 00                    1021 	.db #0x00	; 0
      000371 00                    1022 	.db #0x00	; 0
      000372 00                    1023 	.db #0x00	; 0
      000373 00                    1024 	.db #0x00	; 0
      000374 00                    1025 	.db #0x00	; 0
      000375 00                    1026 	.db #0x00	; 0
      000376 00                    1027 	.db #0x00	; 0
      000377 FF                    1028 	.db #0xff	; 255
      000378 30                    1029 	.db #0x30	; 48	'0'
      000379 30                    1030 	.db #0x30	; 48	'0'
      00037A 18                    1031 	.db #0x18	; 24
      00037B 00                    1032 	.db #0x00	; 0
      00037C 00                    1033 	.db #0x00	; 0
      00037D 00                    1034 	.db #0x00	; 0
      00037E 00                    1035 	.db #0x00	; 0
      00037F 00                    1036 	.db #0x00	; 0
      000380 00                    1037 	.db #0x00	; 0
      000381 00                    1038 	.db #0x00	; 0
      000382 78                    1039 	.db #0x78	; 120	'x'
      000383 0C                    1040 	.db #0x0c	; 12
      000384 7C                    1041 	.db #0x7c	; 124
      000385 CC                    1042 	.db #0xcc	; 204
      000386 76                    1043 	.db #0x76	; 118	'v'
      000387 00                    1044 	.db #0x00	; 0
      000388 E0                    1045 	.db #0xe0	; 224
      000389 60                    1046 	.db #0x60	; 96
      00038A 60                    1047 	.db #0x60	; 96
      00038B 7C                    1048 	.db #0x7c	; 124
      00038C 66                    1049 	.db #0x66	; 102	'f'
      00038D 66                    1050 	.db #0x66	; 102	'f'
      00038E DC                    1051 	.db #0xdc	; 220
      00038F 00                    1052 	.db #0x00	; 0
      000390 00                    1053 	.db #0x00	; 0
      000391 00                    1054 	.db #0x00	; 0
      000392 78                    1055 	.db #0x78	; 120	'x'
      000393 CC                    1056 	.db #0xcc	; 204
      000394 C0                    1057 	.db #0xc0	; 192
      000395 CC                    1058 	.db #0xcc	; 204
      000396 78                    1059 	.db #0x78	; 120	'x'
      000397 00                    1060 	.db #0x00	; 0
      000398 1C                    1061 	.db #0x1c	; 28
      000399 0C                    1062 	.db #0x0c	; 12
      00039A 0C                    1063 	.db #0x0c	; 12
      00039B 7C                    1064 	.db #0x7c	; 124
      00039C CC                    1065 	.db #0xcc	; 204
      00039D CC                    1066 	.db #0xcc	; 204
      00039E 76                    1067 	.db #0x76	; 118	'v'
      00039F 00                    1068 	.db #0x00	; 0
      0003A0 00                    1069 	.db #0x00	; 0
      0003A1 00                    1070 	.db #0x00	; 0
      0003A2 78                    1071 	.db #0x78	; 120	'x'
      0003A3 CC                    1072 	.db #0xcc	; 204
      0003A4 FC                    1073 	.db #0xfc	; 252
      0003A5 C0                    1074 	.db #0xc0	; 192
      0003A6 78                    1075 	.db #0x78	; 120	'x'
      0003A7 00                    1076 	.db #0x00	; 0
      0003A8 38                    1077 	.db #0x38	; 56	'8'
      0003A9 6C                    1078 	.db #0x6c	; 108	'l'
      0003AA 60                    1079 	.db #0x60	; 96
      0003AB F0                    1080 	.db #0xf0	; 240
      0003AC 60                    1081 	.db #0x60	; 96
      0003AD 60                    1082 	.db #0x60	; 96
      0003AE F0                    1083 	.db #0xf0	; 240
      0003AF 00                    1084 	.db #0x00	; 0
      0003B0 00                    1085 	.db #0x00	; 0
      0003B1 00                    1086 	.db #0x00	; 0
      0003B2 76                    1087 	.db #0x76	; 118	'v'
      0003B3 CC                    1088 	.db #0xcc	; 204
      0003B4 CC                    1089 	.db #0xcc	; 204
      0003B5 7C                    1090 	.db #0x7c	; 124
      0003B6 0C                    1091 	.db #0x0c	; 12
      0003B7 F8                    1092 	.db #0xf8	; 248
      0003B8 E0                    1093 	.db #0xe0	; 224
      0003B9 60                    1094 	.db #0x60	; 96
      0003BA 6C                    1095 	.db #0x6c	; 108	'l'
      0003BB 76                    1096 	.db #0x76	; 118	'v'
      0003BC 66                    1097 	.db #0x66	; 102	'f'
      0003BD 66                    1098 	.db #0x66	; 102	'f'
      0003BE E6                    1099 	.db #0xe6	; 230
      0003BF 00                    1100 	.db #0x00	; 0
      0003C0 30                    1101 	.db #0x30	; 48	'0'
      0003C1 00                    1102 	.db #0x00	; 0
      0003C2 70                    1103 	.db #0x70	; 112	'p'
      0003C3 30                    1104 	.db #0x30	; 48	'0'
      0003C4 30                    1105 	.db #0x30	; 48	'0'
      0003C5 30                    1106 	.db #0x30	; 48	'0'
      0003C6 78                    1107 	.db #0x78	; 120	'x'
      0003C7 00                    1108 	.db #0x00	; 0
      0003C8 0C                    1109 	.db #0x0c	; 12
      0003C9 00                    1110 	.db #0x00	; 0
      0003CA 0C                    1111 	.db #0x0c	; 12
      0003CB 0C                    1112 	.db #0x0c	; 12
      0003CC 0C                    1113 	.db #0x0c	; 12
      0003CD CC                    1114 	.db #0xcc	; 204
      0003CE CC                    1115 	.db #0xcc	; 204
      0003CF 78                    1116 	.db #0x78	; 120	'x'
      0003D0 E0                    1117 	.db #0xe0	; 224
      0003D1 60                    1118 	.db #0x60	; 96
      0003D2 66                    1119 	.db #0x66	; 102	'f'
      0003D3 6C                    1120 	.db #0x6c	; 108	'l'
      0003D4 78                    1121 	.db #0x78	; 120	'x'
      0003D5 6C                    1122 	.db #0x6c	; 108	'l'
      0003D6 E6                    1123 	.db #0xe6	; 230
      0003D7 00                    1124 	.db #0x00	; 0
      0003D8 70                    1125 	.db #0x70	; 112	'p'
      0003D9 30                    1126 	.db #0x30	; 48	'0'
      0003DA 30                    1127 	.db #0x30	; 48	'0'
      0003DB 30                    1128 	.db #0x30	; 48	'0'
      0003DC 30                    1129 	.db #0x30	; 48	'0'
      0003DD 30                    1130 	.db #0x30	; 48	'0'
      0003DE 78                    1131 	.db #0x78	; 120	'x'
      0003DF 00                    1132 	.db #0x00	; 0
      0003E0 00                    1133 	.db #0x00	; 0
      0003E1 00                    1134 	.db #0x00	; 0
      0003E2 CC                    1135 	.db #0xcc	; 204
      0003E3 FE                    1136 	.db #0xfe	; 254
      0003E4 FE                    1137 	.db #0xfe	; 254
      0003E5 D6                    1138 	.db #0xd6	; 214
      0003E6 C6                    1139 	.db #0xc6	; 198
      0003E7 00                    1140 	.db #0x00	; 0
      0003E8 00                    1141 	.db #0x00	; 0
      0003E9 00                    1142 	.db #0x00	; 0
      0003EA F8                    1143 	.db #0xf8	; 248
      0003EB CC                    1144 	.db #0xcc	; 204
      0003EC CC                    1145 	.db #0xcc	; 204
      0003ED CC                    1146 	.db #0xcc	; 204
      0003EE CC                    1147 	.db #0xcc	; 204
      0003EF 00                    1148 	.db #0x00	; 0
      0003F0 00                    1149 	.db #0x00	; 0
      0003F1 00                    1150 	.db #0x00	; 0
      0003F2 78                    1151 	.db #0x78	; 120	'x'
      0003F3 CC                    1152 	.db #0xcc	; 204
      0003F4 CC                    1153 	.db #0xcc	; 204
      0003F5 CC                    1154 	.db #0xcc	; 204
      0003F6 78                    1155 	.db #0x78	; 120	'x'
      0003F7 00                    1156 	.db #0x00	; 0
      0003F8 00                    1157 	.db #0x00	; 0
      0003F9 00                    1158 	.db #0x00	; 0
      0003FA DC                    1159 	.db #0xdc	; 220
      0003FB 66                    1160 	.db #0x66	; 102	'f'
      0003FC 66                    1161 	.db #0x66	; 102	'f'
      0003FD 7C                    1162 	.db #0x7c	; 124
      0003FE 60                    1163 	.db #0x60	; 96
      0003FF F0                    1164 	.db #0xf0	; 240
      000400 00                    1165 	.db #0x00	; 0
      000401 00                    1166 	.db #0x00	; 0
      000402 76                    1167 	.db #0x76	; 118	'v'
      000403 CC                    1168 	.db #0xcc	; 204
      000404 CC                    1169 	.db #0xcc	; 204
      000405 7C                    1170 	.db #0x7c	; 124
      000406 0C                    1171 	.db #0x0c	; 12
      000407 1E                    1172 	.db #0x1e	; 30
      000408 00                    1173 	.db #0x00	; 0
      000409 00                    1174 	.db #0x00	; 0
      00040A DC                    1175 	.db #0xdc	; 220
      00040B 76                    1176 	.db #0x76	; 118	'v'
      00040C 66                    1177 	.db #0x66	; 102	'f'
      00040D 60                    1178 	.db #0x60	; 96
      00040E F0                    1179 	.db #0xf0	; 240
      00040F 00                    1180 	.db #0x00	; 0
      000410 00                    1181 	.db #0x00	; 0
      000411 00                    1182 	.db #0x00	; 0
      000412 7C                    1183 	.db #0x7c	; 124
      000413 C0                    1184 	.db #0xc0	; 192
      000414 78                    1185 	.db #0x78	; 120	'x'
      000415 0C                    1186 	.db #0x0c	; 12
      000416 F8                    1187 	.db #0xf8	; 248
      000417 00                    1188 	.db #0x00	; 0
      000418 10                    1189 	.db #0x10	; 16
      000419 30                    1190 	.db #0x30	; 48	'0'
      00041A 7C                    1191 	.db #0x7c	; 124
      00041B 30                    1192 	.db #0x30	; 48	'0'
      00041C 30                    1193 	.db #0x30	; 48	'0'
      00041D 34                    1194 	.db #0x34	; 52	'4'
      00041E 18                    1195 	.db #0x18	; 24
      00041F 00                    1196 	.db #0x00	; 0
      000420 00                    1197 	.db #0x00	; 0
      000421 00                    1198 	.db #0x00	; 0
      000422 CC                    1199 	.db #0xcc	; 204
      000423 CC                    1200 	.db #0xcc	; 204
      000424 CC                    1201 	.db #0xcc	; 204
      000425 CC                    1202 	.db #0xcc	; 204
      000426 76                    1203 	.db #0x76	; 118	'v'
      000427 00                    1204 	.db #0x00	; 0
      000428 00                    1205 	.db #0x00	; 0
      000429 00                    1206 	.db #0x00	; 0
      00042A CC                    1207 	.db #0xcc	; 204
      00042B CC                    1208 	.db #0xcc	; 204
      00042C CC                    1209 	.db #0xcc	; 204
      00042D 78                    1210 	.db #0x78	; 120	'x'
      00042E 30                    1211 	.db #0x30	; 48	'0'
      00042F 00                    1212 	.db #0x00	; 0
      000430 00                    1213 	.db #0x00	; 0
      000431 00                    1214 	.db #0x00	; 0
      000432 C6                    1215 	.db #0xc6	; 198
      000433 D6                    1216 	.db #0xd6	; 214
      000434 FE                    1217 	.db #0xfe	; 254
      000435 FE                    1218 	.db #0xfe	; 254
      000436 6C                    1219 	.db #0x6c	; 108	'l'
      000437 00                    1220 	.db #0x00	; 0
      000438 00                    1221 	.db #0x00	; 0
      000439 00                    1222 	.db #0x00	; 0
      00043A C6                    1223 	.db #0xc6	; 198
      00043B 6C                    1224 	.db #0x6c	; 108	'l'
      00043C 38                    1225 	.db #0x38	; 56	'8'
      00043D 6C                    1226 	.db #0x6c	; 108	'l'
      00043E C6                    1227 	.db #0xc6	; 198
      00043F 00                    1228 	.db #0x00	; 0
      000440 00                    1229 	.db #0x00	; 0
      000441 00                    1230 	.db #0x00	; 0
      000442 CC                    1231 	.db #0xcc	; 204
      000443 CC                    1232 	.db #0xcc	; 204
      000444 CC                    1233 	.db #0xcc	; 204
      000445 7C                    1234 	.db #0x7c	; 124
      000446 0C                    1235 	.db #0x0c	; 12
      000447 F8                    1236 	.db #0xf8	; 248
      000448 00                    1237 	.db #0x00	; 0
      000449 00                    1238 	.db #0x00	; 0
      00044A FC                    1239 	.db #0xfc	; 252
      00044B 98                    1240 	.db #0x98	; 152
      00044C 30                    1241 	.db #0x30	; 48	'0'
      00044D 64                    1242 	.db #0x64	; 100	'd'
      00044E FC                    1243 	.db #0xfc	; 252
      00044F 00                    1244 	.db #0x00	; 0
      000450 1C                    1245 	.db #0x1c	; 28
      000451 30                    1246 	.db #0x30	; 48	'0'
      000452 30                    1247 	.db #0x30	; 48	'0'
      000453 E0                    1248 	.db #0xe0	; 224
      000454 30                    1249 	.db #0x30	; 48	'0'
      000455 30                    1250 	.db #0x30	; 48	'0'
      000456 1C                    1251 	.db #0x1c	; 28
      000457 00                    1252 	.db #0x00	; 0
      000458 18                    1253 	.db #0x18	; 24
      000459 18                    1254 	.db #0x18	; 24
      00045A 18                    1255 	.db #0x18	; 24
      00045B 00                    1256 	.db #0x00	; 0
      00045C 18                    1257 	.db #0x18	; 24
      00045D 18                    1258 	.db #0x18	; 24
      00045E 18                    1259 	.db #0x18	; 24
      00045F 00                    1260 	.db #0x00	; 0
      000460 E0                    1261 	.db #0xe0	; 224
      000461 30                    1262 	.db #0x30	; 48	'0'
      000462 30                    1263 	.db #0x30	; 48	'0'
      000463 1C                    1264 	.db #0x1c	; 28
      000464 30                    1265 	.db #0x30	; 48	'0'
      000465 30                    1266 	.db #0x30	; 48	'0'
      000466 E0                    1267 	.db #0xe0	; 224
      000467 00                    1268 	.db #0x00	; 0
      000468 76                    1269 	.db #0x76	; 118	'v'
      000469 DC                    1270 	.db #0xdc	; 220
      00046A 00                    1271 	.db #0x00	; 0
      00046B 00                    1272 	.db #0x00	; 0
      00046C 00                    1273 	.db #0x00	; 0
      00046D 00                    1274 	.db #0x00	; 0
      00046E 00                    1275 	.db #0x00	; 0
      00046F 00                    1276 	.db #0x00	; 0
      000470 00                    1277 	.db #0x00	; 0
      000471 10                    1278 	.db #0x10	; 16
      000472 38                    1279 	.db #0x38	; 56	'8'
      000473 6C                    1280 	.db #0x6c	; 108	'l'
      000474 C6                    1281 	.db #0xc6	; 198
      000475 C6                    1282 	.db #0xc6	; 198
      000476 FE                    1283 	.db #0xfe	; 254
      000477 00                    1284 	.db #0x00	; 0
      000478                       1285 _pattern_black_0:
      000478 FF                    1286 	.db #0xff	; 255
      000479 FF                    1287 	.db #0xff	; 255
      00047A FF                    1288 	.db #0xff	; 255
      00047B FF                    1289 	.db #0xff	; 255
      00047C FF                    1290 	.db #0xff	; 255
      00047D FF                    1291 	.db #0xff	; 255
      00047E FF                    1292 	.db #0xff	; 255
      00047F FF                    1293 	.db #0xff	; 255
      000480                       1294 _pattern_black_1:
      000480 FE                    1295 	.db #0xfe	; 254
      000481 FF                    1296 	.db #0xff	; 255
      000482 FF                    1297 	.db #0xff	; 255
      000483 FF                    1298 	.db #0xff	; 255
      000484 FE                    1299 	.db #0xfe	; 254
      000485 FF                    1300 	.db #0xff	; 255
      000486 FF                    1301 	.db #0xff	; 255
      000487 FE                    1302 	.db #0xfe	; 254
      000488                       1303 _pattern_black_2:
      000488 FF                    1304 	.db #0xff	; 255
      000489 FF                    1305 	.db #0xff	; 255
      00048A FF                    1306 	.db #0xff	; 255
      00048B FF                    1307 	.db #0xff	; 255
      00048C FF                    1308 	.db #0xff	; 255
      00048D FB                    1309 	.db #0xfb	; 251
      00048E FF                    1310 	.db #0xff	; 255
      00048F BB                    1311 	.db #0xbb	; 187
      000490                       1312 _pattern_black_3:
      000490 FB                    1313 	.db #0xfb	; 251
      000491 FE                    1314 	.db #0xfe	; 254
      000492 FD                    1315 	.db #0xfd	; 253
      000493 FE                    1316 	.db #0xfe	; 254
      000494 F7                    1317 	.db #0xf7	; 247
      000495 FA                    1318 	.db #0xfa	; 250
      000496 AF                    1319 	.db #0xaf	; 175
      000497 55                    1320 	.db #0x55	; 85	'U'
      000498                       1321 _pattern_0:
      000498 9F                    1322 	.db #0x9f	; 159
      000499 90                    1323 	.db #0x90	; 144
      00049A 90                    1324 	.db #0x90	; 144
      00049B 93                    1325 	.db #0x93	; 147
      00049C 92                    1326 	.db #0x92	; 146
      00049D 92                    1327 	.db #0x92	; 146
      00049E 92                    1328 	.db #0x92	; 146
      00049F 92                    1329 	.db #0x92	; 146
      0004A0                       1330 _pattern_1:
      0004A0 FF                    1331 	.db #0xff	; 255
      0004A1 01                    1332 	.db #0x01	; 1
      0004A2 01                    1333 	.db #0x01	; 1
      0004A3 F9                    1334 	.db #0xf9	; 249
      0004A4 09                    1335 	.db #0x09	; 9
      0004A5 09                    1336 	.db #0x09	; 9
      0004A6 49                    1337 	.db #0x49	; 73	'I'
      0004A7 49                    1338 	.db #0x49	; 73	'I'
      0004A8                       1339 _pattern_2:
      0004A8 92                    1340 	.db #0x92	; 146
      0004A9 93                    1341 	.db #0x93	; 147
      0004AA 90                    1342 	.db #0x90	; 144
      0004AB 90                    1343 	.db #0x90	; 144
      0004AC 9F                    1344 	.db #0x9f	; 159
      0004AD 80                    1345 	.db #0x80	; 128
      0004AE 80                    1346 	.db #0x80	; 128
      0004AF FF                    1347 	.db #0xff	; 255
      0004B0                       1348 _pattern_3:
      0004B0 49                    1349 	.db #0x49	; 73	'I'
      0004B1 C9                    1350 	.db #0xc9	; 201
      0004B2 09                    1351 	.db #0x09	; 9
      0004B3 09                    1352 	.db #0x09	; 9
      0004B4 F9                    1353 	.db #0xf9	; 249
      0004B5 01                    1354 	.db #0x01	; 1
      0004B6 01                    1355 	.db #0x01	; 1
      0004B7 FF                    1356 	.db #0xff	; 255
      0004B8                       1357 _pattern_4:
      0004B8 7F                    1358 	.db #0x7f	; 127
      0004B9 81                    1359 	.db #0x81	; 129
      0004BA 83                    1360 	.db #0x83	; 131
      0004BB 87                    1361 	.db #0x87	; 135
      0004BC 8F                    1362 	.db #0x8f	; 143
      0004BD 9F                    1363 	.db #0x9f	; 159
      0004BE BF                    1364 	.db #0xbf	; 191
      0004BF FF                    1365 	.db #0xff	; 255
      0004C0                       1366 _pattern_5:
      0004C0 FE                    1367 	.db #0xfe	; 254
      0004C1 81                    1368 	.db #0x81	; 129
      0004C2 C1                    1369 	.db #0xc1	; 193
      0004C3 E1                    1370 	.db #0xe1	; 225
      0004C4 F1                    1371 	.db #0xf1	; 241
      0004C5 F9                    1372 	.db #0xf9	; 249
      0004C6 FD                    1373 	.db #0xfd	; 253
      0004C7 FF                    1374 	.db #0xff	; 255
      0004C8                       1375 _pattern_6:
      0004C8 FF                    1376 	.db #0xff	; 255
      0004C9 BF                    1377 	.db #0xbf	; 191
      0004CA 9F                    1378 	.db #0x9f	; 159
      0004CB 8F                    1379 	.db #0x8f	; 143
      0004CC 87                    1380 	.db #0x87	; 135
      0004CD 83                    1381 	.db #0x83	; 131
      0004CE 81                    1382 	.db #0x81	; 129
      0004CF 7F                    1383 	.db #0x7f	; 127
      0004D0                       1384 _pattern_7:
      0004D0 FF                    1385 	.db #0xff	; 255
      0004D1 FD                    1386 	.db #0xfd	; 253
      0004D2 F9                    1387 	.db #0xf9	; 249
      0004D3 F1                    1388 	.db #0xf1	; 241
      0004D4 E1                    1389 	.db #0xe1	; 225
      0004D5 C1                    1390 	.db #0xc1	; 193
      0004D6 81                    1391 	.db #0x81	; 129
      0004D7 FE                    1392 	.db #0xfe	; 254
      0004D8                       1393 _pattern_8:
      0004D8 7F                    1394 	.db #0x7f	; 127
      0004D9 AE                    1395 	.db #0xae	; 174
      0004DA FF                    1396 	.db #0xff	; 255
      0004DB 5B                    1397 	.db #0x5b	; 91
      0004DC FF                    1398 	.db #0xff	; 255
      0004DD AE                    1399 	.db #0xae	; 174
      0004DE FF                    1400 	.db #0xff	; 255
      0004DF DF                    1401 	.db #0xdf	; 223
      0004E0                       1402 _pattern_9:
      0004E0 FE                    1403 	.db #0xfe	; 254
      0004E1 BD                    1404 	.db #0xbd	; 189
      0004E2 DF                    1405 	.db #0xdf	; 223
      0004E3 7F                    1406 	.db #0x7f	; 127
      0004E4 FB                    1407 	.db #0xfb	; 251
      0004E5 DF                    1408 	.db #0xdf	; 223
      0004E6 FE                    1409 	.db #0xfe	; 254
      0004E7 EF                    1410 	.db #0xef	; 239
      0004E8                       1411 _pattern_10:
      0004E8 7F                    1412 	.db #0x7f	; 127
      0004E9 FF                    1413 	.db #0xff	; 255
      0004EA ED                    1414 	.db #0xed	; 237
      0004EB FF                    1415 	.db #0xff	; 255
      0004EC B6                    1416 	.db #0xb6	; 182
      0004ED FE                    1417 	.db #0xfe	; 254
      0004EE DB                    1418 	.db #0xdb	; 219
      0004EF 7D                    1419 	.db #0x7d	; 125
      0004F0                       1420 _pattern_11:
      0004F0 FE                    1421 	.db #0xfe	; 254
      0004F1 FF                    1422 	.db #0xff	; 255
      0004F2 FE                    1423 	.db #0xfe	; 254
      0004F3 77                    1424 	.db #0x77	; 119	'w'
      0004F4 FE                    1425 	.db #0xfe	; 254
      0004F5 DD                    1426 	.db #0xdd	; 221
      0004F6 EF                    1427 	.db #0xef	; 239
      0004F7 5A                    1428 	.db #0x5a	; 90	'Z'
      0004F8                       1429 _pattern_12:
      0004F8 7F                    1430 	.db #0x7f	; 127
      0004F9 D5                    1431 	.db #0xd5	; 213
      0004FA BF                    1432 	.db #0xbf	; 191
      0004FB ED                    1433 	.db #0xed	; 237
      0004FC BF                    1434 	.db #0xbf	; 191
      0004FD F5                    1435 	.db #0xf5	; 245
      0004FE BF                    1436 	.db #0xbf	; 191
      0004FF FF                    1437 	.db #0xff	; 255
      000500                       1438 _pattern_13:
      000500 FE                    1439 	.db #0xfe	; 254
      000501 5F                    1440 	.db #0x5f	; 95
      000502 F5                    1441 	.db #0xf5	; 245
      000503 DF                    1442 	.db #0xdf	; 223
      000504 FF                    1443 	.db #0xff	; 255
      000505 FF                    1444 	.db #0xff	; 255
      000506 FF                    1445 	.db #0xff	; 255
      000507 FF                    1446 	.db #0xff	; 255
      000508                       1447 _pattern_14:
      000508 EF                    1448 	.db #0xef	; 239
      000509 BF                    1449 	.db #0xbf	; 191
      00050A 7F                    1450 	.db #0x7f	; 127
      00050B FF                    1451 	.db #0xff	; 255
      00050C FF                    1452 	.db #0xff	; 255
      00050D FF                    1453 	.db #0xff	; 255
      00050E DB                    1454 	.db #0xdb	; 219
      00050F 7F                    1455 	.db #0x7f	; 127
      000510                       1456 _pattern_15:
      000510 FF                    1457 	.db #0xff	; 255
      000511 FD                    1458 	.db #0xfd	; 253
      000512 FF                    1459 	.db #0xff	; 255
      000513 DB                    1460 	.db #0xdb	; 219
      000514 FD                    1461 	.db #0xfd	; 253
      000515 7B                    1462 	.db #0x7b	; 123
      000516 D7                    1463 	.db #0xd7	; 215
      000517 FE                    1464 	.db #0xfe	; 254
      000518                       1465 _pattern_16:
      000518 7F                    1466 	.db #0x7f	; 127
      000519 FF                    1467 	.db #0xff	; 255
      00051A EA                    1468 	.db #0xea	; 234
      00051B DF                    1469 	.db #0xdf	; 223
      00051C FF                    1470 	.db #0xff	; 255
      00051D DF                    1471 	.db #0xdf	; 223
      00051E FF                    1472 	.db #0xff	; 255
      00051F DF                    1473 	.db #0xdf	; 223
      000520                       1474 _pattern_17:
      000520 FE                    1475 	.db #0xfe	; 254
      000521 FF                    1476 	.db #0xff	; 255
      000522 AF                    1477 	.db #0xaf	; 175
      000523 FA                    1478 	.db #0xfa	; 250
      000524 FF                    1479 	.db #0xff	; 255
      000525 FA                    1480 	.db #0xfa	; 250
      000526 FF                    1481 	.db #0xff	; 255
      000527 FA                    1482 	.db #0xfa	; 250
      000528                       1483 _pattern_18:
      000528 FF                    1484 	.db #0xff	; 255
      000529 DF                    1485 	.db #0xdf	; 223
      00052A FF                    1486 	.db #0xff	; 255
      00052B DF                    1487 	.db #0xdf	; 223
      00052C FF                    1488 	.db #0xff	; 255
      00052D EA                    1489 	.db #0xea	; 234
      00052E FF                    1490 	.db #0xff	; 255
      00052F 55                    1491 	.db #0x55	; 85	'U'
      000530                       1492 _pattern_19:
      000530 FF                    1493 	.db #0xff	; 255
      000531 FA                    1494 	.db #0xfa	; 250
      000532 FF                    1495 	.db #0xff	; 255
      000533 FA                    1496 	.db #0xfa	; 250
      000534 F7                    1497 	.db #0xf7	; 247
      000535 AA                    1498 	.db #0xaa	; 170
      000536 FF                    1499 	.db #0xff	; 255
      000537 56                    1500 	.db #0x56	; 86	'V'
      000538                       1501 _pattern_20:
      000538 3F                    1502 	.db #0x3f	; 63
      000539 7F                    1503 	.db #0x7f	; 127
      00053A E0                    1504 	.db #0xe0	; 224
      00053B CE                    1505 	.db #0xce	; 206
      00053C E6                    1506 	.db #0xe6	; 230
      00053D 7C                    1507 	.db #0x7c	; 124
      00053E 39                    1508 	.db #0x39	; 57	'9'
      00053F 03                    1509 	.db #0x03	; 3
      000540                       1510 _pattern_21:
      000540 FF                    1511 	.db #0xff	; 255
      000541 FF                    1512 	.db #0xff	; 255
      000542 00                    1513 	.db #0x00	; 0
      000543 DB                    1514 	.db #0xdb	; 219
      000544 DB                    1515 	.db #0xdb	; 219
      000545 00                    1516 	.db #0x00	; 0
      000546 FF                    1517 	.db #0xff	; 255
      000547 FF                    1518 	.db #0xff	; 255
      000548                       1519 _pattern_22:
      000548 FC                    1520 	.db #0xfc	; 252
      000549 FE                    1521 	.db #0xfe	; 254
      00054A 07                    1522 	.db #0x07	; 7
      00054B 73                    1523 	.db #0x73	; 115	's'
      00054C 67                    1524 	.db #0x67	; 103	'g'
      00054D 3E                    1525 	.db #0x3e	; 62
      00054E 9C                    1526 	.db #0x9c	; 156
      00054F C0                    1527 	.db #0xc0	; 192
      000550                       1528 _pattern_23:
      000550 06                    1529 	.db #0x06	; 6
      000551 00                    1530 	.db #0x00	; 0
      000552 03                    1531 	.db #0x03	; 3
      000553 04                    1532 	.db #0x04	; 4
      000554 05                    1533 	.db #0x05	; 5
      000555 05                    1534 	.db #0x05	; 5
      000556 05                    1535 	.db #0x05	; 5
      000557 05                    1536 	.db #0x05	; 5
      000558                       1537 _pattern_24:
      000558 00                    1538 	.db #0x00	; 0
      000559 00                    1539 	.db #0x00	; 0
      00055A 33                    1540 	.db #0x33	; 51	'3'
      00055B 44                    1541 	.db #0x44	; 68	'D'
      00055C 55                    1542 	.db #0x55	; 85	'U'
      00055D 55                    1543 	.db #0x55	; 85	'U'
      00055E 55                    1544 	.db #0x55	; 85	'U'
      00055F 55                    1545 	.db #0x55	; 85	'U'
      000560                       1546 _pattern_25:
      000560 60                    1547 	.db #0x60	; 96
      000561 00                    1548 	.db #0x00	; 0
      000562 40                    1549 	.db #0x40	; 64
      000563 20                    1550 	.db #0x20	; 32
      000564 20                    1551 	.db #0x20	; 32
      000565 20                    1552 	.db #0x20	; 32
      000566 20                    1553 	.db #0x20	; 32
      000567 20                    1554 	.db #0x20	; 32
      000568                       1555 _pattern_26:
      000568 05                    1556 	.db #0x05	; 5
      000569 05                    1557 	.db #0x05	; 5
      00056A 05                    1558 	.db #0x05	; 5
      00056B 05                    1559 	.db #0x05	; 5
      00056C 05                    1560 	.db #0x05	; 5
      00056D 05                    1561 	.db #0x05	; 5
      00056E 05                    1562 	.db #0x05	; 5
      00056F 05                    1563 	.db #0x05	; 5
      000570                       1564 _pattern_27:
      000570 55                    1565 	.db #0x55	; 85	'U'
      000571 55                    1566 	.db #0x55	; 85	'U'
      000572 55                    1567 	.db #0x55	; 85	'U'
      000573 55                    1568 	.db #0x55	; 85	'U'
      000574 55                    1569 	.db #0x55	; 85	'U'
      000575 55                    1570 	.db #0x55	; 85	'U'
      000576 55                    1571 	.db #0x55	; 85	'U'
      000577 55                    1572 	.db #0x55	; 85	'U'
      000578                       1573 _pattern_28:
      000578 20                    1574 	.db #0x20	; 32
      000579 20                    1575 	.db #0x20	; 32
      00057A 20                    1576 	.db #0x20	; 32
      00057B 20                    1577 	.db #0x20	; 32
      00057C 20                    1578 	.db #0x20	; 32
      00057D 20                    1579 	.db #0x20	; 32
      00057E 20                    1580 	.db #0x20	; 32
      00057F 20                    1581 	.db #0x20	; 32
      000580                       1582 _pattern_29:
      000580 05                    1583 	.db #0x05	; 5
      000581 05                    1584 	.db #0x05	; 5
      000582 07                    1585 	.db #0x07	; 7
      000583 07                    1586 	.db #0x07	; 7
      000584 07                    1587 	.db #0x07	; 7
      000585 05                    1588 	.db #0x05	; 5
      000586 05                    1589 	.db #0x05	; 5
      000587 05                    1590 	.db #0x05	; 5
      000588                       1591 _pattern_30:
      000588 55                    1592 	.db #0x55	; 85	'U'
      000589 55                    1593 	.db #0x55	; 85	'U'
      00058A FF                    1594 	.db #0xff	; 255
      00058B FF                    1595 	.db #0xff	; 255
      00058C FF                    1596 	.db #0xff	; 255
      00058D 55                    1597 	.db #0x55	; 85	'U'
      00058E 55                    1598 	.db #0x55	; 85	'U'
      00058F 55                    1599 	.db #0x55	; 85	'U'
      000590                       1600 _pattern_31:
      000590 20                    1601 	.db #0x20	; 32
      000591 20                    1602 	.db #0x20	; 32
      000592 E0                    1603 	.db #0xe0	; 224
      000593 E0                    1604 	.db #0xe0	; 224
      000594 E0                    1605 	.db #0xe0	; 224
      000595 20                    1606 	.db #0x20	; 32
      000596 20                    1607 	.db #0x20	; 32
      000597 20                    1608 	.db #0x20	; 32
      000598                       1609 _pattern_37:
      000598 05                    1610 	.db #0x05	; 5
      000599 05                    1611 	.db #0x05	; 5
      00059A 05                    1612 	.db #0x05	; 5
      00059B 05                    1613 	.db #0x05	; 5
      00059C 04                    1614 	.db #0x04	; 4
      00059D 03                    1615 	.db #0x03	; 3
      00059E 00                    1616 	.db #0x00	; 0
      00059F 06                    1617 	.db #0x06	; 6
      0005A0                       1618 _pattern_38:
      0005A0 55                    1619 	.db #0x55	; 85	'U'
      0005A1 55                    1620 	.db #0x55	; 85	'U'
      0005A2 55                    1621 	.db #0x55	; 85	'U'
      0005A3 55                    1622 	.db #0x55	; 85	'U'
      0005A4 44                    1623 	.db #0x44	; 68	'D'
      0005A5 33                    1624 	.db #0x33	; 51	'3'
      0005A6 00                    1625 	.db #0x00	; 0
      0005A7 00                    1626 	.db #0x00	; 0
      0005A8                       1627 _pattern_39:
      0005A8 20                    1628 	.db #0x20	; 32
      0005A9 20                    1629 	.db #0x20	; 32
      0005AA 20                    1630 	.db #0x20	; 32
      0005AB 20                    1631 	.db #0x20	; 32
      0005AC 20                    1632 	.db #0x20	; 32
      0005AD 40                    1633 	.db #0x40	; 64
      0005AE 00                    1634 	.db #0x00	; 0
      0005AF 60                    1635 	.db #0x60	; 96
      0005B0                       1636 _pattern_32:
      0005B0 03                    1637 	.db #0x03	; 3
      0005B1 39                    1638 	.db #0x39	; 57	'9'
      0005B2 7C                    1639 	.db #0x7c	; 124
      0005B3 E6                    1640 	.db #0xe6	; 230
      0005B4 CE                    1641 	.db #0xce	; 206
      0005B5 E0                    1642 	.db #0xe0	; 224
      0005B6 7F                    1643 	.db #0x7f	; 127
      0005B7 3F                    1644 	.db #0x3f	; 63
      0005B8                       1645 _pattern_33:
      0005B8 FF                    1646 	.db #0xff	; 255
      0005B9 FF                    1647 	.db #0xff	; 255
      0005BA 00                    1648 	.db #0x00	; 0
      0005BB DB                    1649 	.db #0xdb	; 219
      0005BC DB                    1650 	.db #0xdb	; 219
      0005BD 00                    1651 	.db #0x00	; 0
      0005BE FF                    1652 	.db #0xff	; 255
      0005BF FF                    1653 	.db #0xff	; 255
      0005C0                       1654 _pattern_34:
      0005C0 C0                    1655 	.db #0xc0	; 192
      0005C1 9C                    1656 	.db #0x9c	; 156
      0005C2 3E                    1657 	.db #0x3e	; 62
      0005C3 67                    1658 	.db #0x67	; 103	'g'
      0005C4 73                    1659 	.db #0x73	; 115	's'
      0005C5 07                    1660 	.db #0x07	; 7
      0005C6 FE                    1661 	.db #0xfe	; 254
      0005C7 FC                    1662 	.db #0xfc	; 252
      0005C8                       1663 _sprite_dust_0:
      0005C8 10                    1664 	.db #0x10	; 16
      0005C9 42                    1665 	.db #0x42	; 66	'B'
      0005CA 10                    1666 	.db #0x10	; 16
      0005CB 45                    1667 	.db #0x45	; 69	'E'
      0005CC 20                    1668 	.db #0x20	; 32
      0005CD 89                    1669 	.db #0x89	; 137
      0005CE 20                    1670 	.db #0x20	; 32
      0005CF 88                    1671 	.db #0x88	; 136
      0005D0                       1672 _sprite_dust_1:
      0005D0 10                    1673 	.db #0x10	; 16
      0005D1 42                    1674 	.db #0x42	; 66	'B'
      0005D2 00                    1675 	.db #0x00	; 0
      0005D3 04                    1676 	.db #0x04	; 4
      0005D4 20                    1677 	.db #0x20	; 32
      0005D5 81                    1678 	.db #0x81	; 129
      0005D6 20                    1679 	.db #0x20	; 32
      0005D7 08                    1680 	.db #0x08	; 8
      0005D8                       1681 _sprite_dust_2:
      0005D8 10                    1682 	.db #0x10	; 16
      0005D9 00                    1683 	.db #0x00	; 0
      0005DA 00                    1684 	.db #0x00	; 0
      0005DB 04                    1685 	.db #0x04	; 4
      0005DC 20                    1686 	.db #0x20	; 32
      0005DD 80                    1687 	.db #0x80	; 128
      0005DE 20                    1688 	.db #0x20	; 32
      0005DF 00                    1689 	.db #0x00	; 0
      0005E0                       1690 _sprite_dust_3:
      0005E0 10                    1691 	.db #0x10	; 16
      0005E1 00                    1692 	.db #0x00	; 0
      0005E2 00                    1693 	.db #0x00	; 0
      0005E3 04                    1694 	.db #0x04	; 4
      0005E4 00                    1695 	.db #0x00	; 0
      0005E5 00                    1696 	.db #0x00	; 0
      0005E6 20                    1697 	.db #0x20	; 32
      0005E7 00                    1698 	.db #0x00	; 0
      0005E8                       1699 _pattern_title:
      0005E8 FE                    1700 	.db #0xfe	; 254
      0005E9 FE                    1701 	.db #0xfe	; 254
      0005EA FE                    1702 	.db #0xfe	; 254
      0005EB FE                    1703 	.db #0xfe	; 254
      0005EC FE                    1704 	.db #0xfe	; 254
      0005ED FE                    1705 	.db #0xfe	; 254
      0005EE FE                    1706 	.db #0xfe	; 254
      0005EF 00                    1707 	.db #0x00	; 0
      0005F0                       1708 _color_black_0:
      0005F0 14                    1709 	.db #0x14	; 20
      0005F1 14                    1710 	.db #0x14	; 20
      0005F2 14                    1711 	.db #0x14	; 20
      0005F3 14                    1712 	.db #0x14	; 20
      0005F4 14                    1713 	.db #0x14	; 20
      0005F5 14                    1714 	.db #0x14	; 20
      0005F6 14                    1715 	.db #0x14	; 20
      0005F7 14                    1716 	.db #0x14	; 20
      0005F8                       1717 _color_black_1:
      0005F8 14                    1718 	.db #0x14	; 20
      0005F9 14                    1719 	.db #0x14	; 20
      0005FA 14                    1720 	.db #0x14	; 20
      0005FB 14                    1721 	.db #0x14	; 20
      0005FC 14                    1722 	.db #0x14	; 20
      0005FD 14                    1723 	.db #0x14	; 20
      0005FE 14                    1724 	.db #0x14	; 20
      0005FF 14                    1725 	.db #0x14	; 20
      000600                       1726 _color_black_2:
      000600 14                    1727 	.db #0x14	; 20
      000601 14                    1728 	.db #0x14	; 20
      000602 14                    1729 	.db #0x14	; 20
      000603 14                    1730 	.db #0x14	; 20
      000604 14                    1731 	.db #0x14	; 20
      000605 14                    1732 	.db #0x14	; 20
      000606 14                    1733 	.db #0x14	; 20
      000607 14                    1734 	.db #0x14	; 20
      000608                       1735 _color_black_3:
      000608 14                    1736 	.db #0x14	; 20
      000609 14                    1737 	.db #0x14	; 20
      00060A 14                    1738 	.db #0x14	; 20
      00060B 14                    1739 	.db #0x14	; 20
      00060C 14                    1740 	.db #0x14	; 20
      00060D 14                    1741 	.db #0x14	; 20
      00060E 14                    1742 	.db #0x14	; 20
      00060F 14                    1743 	.db #0x14	; 20
      000610                       1744 _color_0:
      000610 13                    1745 	.db #0x13	; 19
      000611 13                    1746 	.db #0x13	; 19
      000612 13                    1747 	.db #0x13	; 19
      000613 13                    1748 	.db #0x13	; 19
      000614 13                    1749 	.db #0x13	; 19
      000615 13                    1750 	.db #0x13	; 19
      000616 13                    1751 	.db #0x13	; 19
      000617 13                    1752 	.db #0x13	; 19
      000618                       1753 _color_1:
      000618 12                    1754 	.db #0x12	; 18
      000619 12                    1755 	.db #0x12	; 18
      00061A 12                    1756 	.db #0x12	; 18
      00061B 12                    1757 	.db #0x12	; 18
      00061C 12                    1758 	.db #0x12	; 18
      00061D 12                    1759 	.db #0x12	; 18
      00061E 12                    1760 	.db #0x12	; 18
      00061F 12                    1761 	.db #0x12	; 18
      000620                       1762 _color_2:
      000620 12                    1763 	.db #0x12	; 18
      000621 12                    1764 	.db #0x12	; 18
      000622 12                    1765 	.db #0x12	; 18
      000623 12                    1766 	.db #0x12	; 18
      000624 12                    1767 	.db #0x12	; 18
      000625 12                    1768 	.db #0x12	; 18
      000626 12                    1769 	.db #0x12	; 18
      000627 12                    1770 	.db #0x12	; 18
      000628                       1771 _color_3:
      000628 1C                    1772 	.db #0x1c	; 28
      000629 1C                    1773 	.db #0x1c	; 28
      00062A 1C                    1774 	.db #0x1c	; 28
      00062B 1C                    1775 	.db #0x1c	; 28
      00062C 1C                    1776 	.db #0x1c	; 28
      00062D 1C                    1777 	.db #0x1c	; 28
      00062E 1C                    1778 	.db #0x1c	; 28
      00062F 1C                    1779 	.db #0x1c	; 28
      000630                       1780 _color_4:
      000630 96                    1781 	.db #0x96	; 150
      000631 96                    1782 	.db #0x96	; 150
      000632 96                    1783 	.db #0x96	; 150
      000633 96                    1784 	.db #0x96	; 150
      000634 96                    1785 	.db #0x96	; 150
      000635 96                    1786 	.db #0x96	; 150
      000636 96                    1787 	.db #0x96	; 150
      000637 96                    1788 	.db #0x96	; 150
      000638                       1789 _color_5:
      000638 98                    1790 	.db #0x98	; 152
      000639 68                    1791 	.db #0x68	; 104	'h'
      00063A 68                    1792 	.db #0x68	; 104	'h'
      00063B 68                    1793 	.db #0x68	; 104	'h'
      00063C 68                    1794 	.db #0x68	; 104	'h'
      00063D 68                    1795 	.db #0x68	; 104	'h'
      00063E 68                    1796 	.db #0x68	; 104	'h'
      00063F 68                    1797 	.db #0x68	; 104	'h'
      000640                       1798 _color_6:
      000640 68                    1799 	.db #0x68	; 104	'h'
      000641 68                    1800 	.db #0x68	; 104	'h'
      000642 68                    1801 	.db #0x68	; 104	'h'
      000643 68                    1802 	.db #0x68	; 104	'h'
      000644 68                    1803 	.db #0x68	; 104	'h'
      000645 68                    1804 	.db #0x68	; 104	'h'
      000646 68                    1805 	.db #0x68	; 104	'h'
      000647 68                    1806 	.db #0x68	; 104	'h'
      000648                       1807 _color_7:
      000648 89                    1808 	.db #0x89	; 137
      000649 89                    1809 	.db #0x89	; 137
      00064A 89                    1810 	.db #0x89	; 137
      00064B 89                    1811 	.db #0x89	; 137
      00064C 89                    1812 	.db #0x89	; 137
      00064D 89                    1813 	.db #0x89	; 137
      00064E 89                    1814 	.db #0x89	; 137
      00064F 86                    1815 	.db #0x86	; 134
      000650                       1816 _color_8:
      000650 41                    1817 	.db #0x41	; 65	'A'
      000651 47                    1818 	.db #0x47	; 71	'G'
      000652 47                    1819 	.db #0x47	; 71	'G'
      000653 47                    1820 	.db #0x47	; 71	'G'
      000654 47                    1821 	.db #0x47	; 71	'G'
      000655 47                    1822 	.db #0x47	; 71	'G'
      000656 47                    1823 	.db #0x47	; 71	'G'
      000657 47                    1824 	.db #0x47	; 71	'G'
      000658                       1825 _color_9:
      000658 41                    1826 	.db #0x41	; 65	'A'
      000659 45                    1827 	.db #0x45	; 69	'E'
      00065A 47                    1828 	.db #0x47	; 71	'G'
      00065B 47                    1829 	.db #0x47	; 71	'G'
      00065C 45                    1830 	.db #0x45	; 69	'E'
      00065D 45                    1831 	.db #0x45	; 69	'E'
      00065E 41                    1832 	.db #0x41	; 65	'A'
      00065F 45                    1833 	.db #0x45	; 69	'E'
      000660                       1834 _color_10:
      000660 47                    1835 	.db #0x47	; 71	'G'
      000661 45                    1836 	.db #0x45	; 69	'E'
      000662 45                    1837 	.db #0x45	; 69	'E'
      000663 45                    1838 	.db #0x45	; 69	'E'
      000664 45                    1839 	.db #0x45	; 69	'E'
      000665 41                    1840 	.db #0x41	; 65	'A'
      000666 45                    1841 	.db #0x45	; 69	'E'
      000667 41                    1842 	.db #0x41	; 65	'A'
      000668                       1843 _color_11:
      000668 41                    1844 	.db #0x41	; 65	'A'
      000669 41                    1845 	.db #0x41	; 65	'A'
      00066A 41                    1846 	.db #0x41	; 65	'A'
      00066B 41                    1847 	.db #0x41	; 65	'A'
      00066C 41                    1848 	.db #0x41	; 65	'A'
      00066D 41                    1849 	.db #0x41	; 65	'A'
      00066E 41                    1850 	.db #0x41	; 65	'A'
      00066F 41                    1851 	.db #0x41	; 65	'A'
      000670                       1852 _color_12:
      000670 D1                    1853 	.db #0xd1	; 209
      000671 DF                    1854 	.db #0xdf	; 223
      000672 DF                    1855 	.db #0xdf	; 223
      000673 DF                    1856 	.db #0xdf	; 223
      000674 DF                    1857 	.db #0xdf	; 223
      000675 DF                    1858 	.db #0xdf	; 223
      000676 DF                    1859 	.db #0xdf	; 223
      000677 DF                    1860 	.db #0xdf	; 223
      000678                       1861 _color_13:
      000678 D1                    1862 	.db #0xd1	; 209
      000679 DF                    1863 	.db #0xdf	; 223
      00067A DF                    1864 	.db #0xdf	; 223
      00067B DF                    1865 	.db #0xdf	; 223
      00067C DF                    1866 	.db #0xdf	; 223
      00067D DF                    1867 	.db #0xdf	; 223
      00067E DF                    1868 	.db #0xdf	; 223
      00067F DF                    1869 	.db #0xdf	; 223
      000680                       1870 _color_14:
      000680 DF                    1871 	.db #0xdf	; 223
      000681 DF                    1872 	.db #0xdf	; 223
      000682 DF                    1873 	.db #0xdf	; 223
      000683 D1                    1874 	.db #0xd1	; 209
      000684 D1                    1875 	.db #0xd1	; 209
      000685 D1                    1876 	.db #0xd1	; 209
      000686 D1                    1877 	.db #0xd1	; 209
      000687 D1                    1878 	.db #0xd1	; 209
      000688                       1879 _color_15:
      000688 D1                    1880 	.db #0xd1	; 209
      000689 D1                    1881 	.db #0xd1	; 209
      00068A D1                    1882 	.db #0xd1	; 209
      00068B D1                    1883 	.db #0xd1	; 209
      00068C D1                    1884 	.db #0xd1	; 209
      00068D D1                    1885 	.db #0xd1	; 209
      00068E D1                    1886 	.db #0xd1	; 209
      00068F D1                    1887 	.db #0xd1	; 209
      000690                       1888 _color_16:
      000690 A1                    1889 	.db #0xa1	; 161
      000691 BF                    1890 	.db #0xbf	; 191
      000692 BF                    1891 	.db #0xbf	; 191
      000693 BF                    1892 	.db #0xbf	; 191
      000694 BF                    1893 	.db #0xbf	; 191
      000695 BF                    1894 	.db #0xbf	; 191
      000696 BF                    1895 	.db #0xbf	; 191
      000697 BF                    1896 	.db #0xbf	; 191
      000698                       1897 _color_17:
      000698 A1                    1898 	.db #0xa1	; 161
      000699 AF                    1899 	.db #0xaf	; 175
      00069A AF                    1900 	.db #0xaf	; 175
      00069B A1                    1901 	.db #0xa1	; 161
      00069C A1                    1902 	.db #0xa1	; 161
      00069D A1                    1903 	.db #0xa1	; 161
      00069E A1                    1904 	.db #0xa1	; 161
      00069F A1                    1905 	.db #0xa1	; 161
      0006A0                       1906 _color_18:
      0006A0 AF                    1907 	.db #0xaf	; 175
      0006A1 AF                    1908 	.db #0xaf	; 175
      0006A2 AF                    1909 	.db #0xaf	; 175
      0006A3 AF                    1910 	.db #0xaf	; 175
      0006A4 A1                    1911 	.db #0xa1	; 161
      0006A5 A1                    1912 	.db #0xa1	; 161
      0006A6 A1                    1913 	.db #0xa1	; 161
      0006A7 A1                    1914 	.db #0xa1	; 161
      0006A8                       1915 _color_19:
      0006A8 B1                    1916 	.db #0xb1	; 177
      0006A9 B1                    1917 	.db #0xb1	; 177
      0006AA B1                    1918 	.db #0xb1	; 177
      0006AB B1                    1919 	.db #0xb1	; 177
      0006AC B1                    1920 	.db #0xb1	; 177
      0006AD B1                    1921 	.db #0xb1	; 177
      0006AE B1                    1922 	.db #0xb1	; 177
      0006AF B1                    1923 	.db #0xb1	; 177
      0006B0                       1924 _color_column_1:
      0006B0 F1                    1925 	.db #0xf1	; 241
      0006B1 E1                    1926 	.db #0xe1	; 225
      0006B2 E1                    1927 	.db #0xe1	; 225
      0006B3 E1                    1928 	.db #0xe1	; 225
      0006B4 E1                    1929 	.db #0xe1	; 225
      0006B5 E1                    1930 	.db #0xe1	; 225
      0006B6 E1                    1931 	.db #0xe1	; 225
      0006B7 E1                    1932 	.db #0xe1	; 225
      0006B8                       1933 _color_column_2:
      0006B8 F1                    1934 	.db #0xf1	; 241
      0006B9 E1                    1935 	.db #0xe1	; 225
      0006BA E1                    1936 	.db #0xe1	; 225
      0006BB E1                    1937 	.db #0xe1	; 225
      0006BC E1                    1938 	.db #0xe1	; 225
      0006BD E1                    1939 	.db #0xe1	; 225
      0006BE E1                    1940 	.db #0xe1	; 225
      0006BF E1                    1941 	.db #0xe1	; 225
      0006C0                       1942 _color_column_3:
      0006C0 F1                    1943 	.db #0xf1	; 241
      0006C1 E1                    1944 	.db #0xe1	; 225
      0006C2 E1                    1945 	.db #0xe1	; 225
      0006C3 E1                    1946 	.db #0xe1	; 225
      0006C4 E1                    1947 	.db #0xe1	; 225
      0006C5 E1                    1948 	.db #0xe1	; 225
      0006C6 E1                    1949 	.db #0xe1	; 225
      0006C7 E1                    1950 	.db #0xe1	; 225
      0006C8                       1951 _color_column_4:
      0006C8 F1                    1952 	.db #0xf1	; 241
      0006C9 F1                    1953 	.db #0xf1	; 241
      0006CA F1                    1954 	.db #0xf1	; 241
      0006CB F1                    1955 	.db #0xf1	; 241
      0006CC F1                    1956 	.db #0xf1	; 241
      0006CD F1                    1957 	.db #0xf1	; 241
      0006CE F1                    1958 	.db #0xf1	; 241
      0006CF F1                    1959 	.db #0xf1	; 241
      0006D0                       1960 _color_column_5:
      0006D0 E1                    1961 	.db #0xe1	; 225
      0006D1 E1                    1962 	.db #0xe1	; 225
      0006D2 E1                    1963 	.db #0xe1	; 225
      0006D3 E1                    1964 	.db #0xe1	; 225
      0006D4 E1                    1965 	.db #0xe1	; 225
      0006D5 E1                    1966 	.db #0xe1	; 225
      0006D6 E1                    1967 	.db #0xe1	; 225
      0006D7 E1                    1968 	.db #0xe1	; 225
      0006D8                       1969 _color_column_6:
      0006D8 E1                    1970 	.db #0xe1	; 225
      0006D9 E1                    1971 	.db #0xe1	; 225
      0006DA E1                    1972 	.db #0xe1	; 225
      0006DB 41                    1973 	.db #0x41	; 65	'A'
      0006DC 41                    1974 	.db #0x41	; 65	'A'
      0006DD 41                    1975 	.db #0x41	; 65	'A'
      0006DE 41                    1976 	.db #0x41	; 65	'A'
      0006DF 41                    1977 	.db #0x41	; 65	'A'
      0006E0                       1978 _color_column_7:
      0006E0 F1                    1979 	.db #0xf1	; 241
      0006E1 F1                    1980 	.db #0xf1	; 241
      0006E2 F1                    1981 	.db #0xf1	; 241
      0006E3 F1                    1982 	.db #0xf1	; 241
      0006E4 F1                    1983 	.db #0xf1	; 241
      0006E5 F1                    1984 	.db #0xf1	; 241
      0006E6 F1                    1985 	.db #0xf1	; 241
      0006E7 F1                    1986 	.db #0xf1	; 241
      0006E8                       1987 _color_column_8:
      0006E8 E1                    1988 	.db #0xe1	; 225
      0006E9 E1                    1989 	.db #0xe1	; 225
      0006EA E1                    1990 	.db #0xe1	; 225
      0006EB F1                    1991 	.db #0xf1	; 241
      0006EC E1                    1992 	.db #0xe1	; 225
      0006ED E1                    1993 	.db #0xe1	; 225
      0006EE E1                    1994 	.db #0xe1	; 225
      0006EF E1                    1995 	.db #0xe1	; 225
      0006F0                       1996 _color_column_9:
      0006F0 41                    1997 	.db #0x41	; 65	'A'
      0006F1 41                    1998 	.db #0x41	; 65	'A'
      0006F2 41                    1999 	.db #0x41	; 65	'A'
      0006F3 F1                    2000 	.db #0xf1	; 241
      0006F4 41                    2001 	.db #0x41	; 65	'A'
      0006F5 41                    2002 	.db #0x41	; 65	'A'
      0006F6 41                    2003 	.db #0x41	; 65	'A'
      0006F7 41                    2004 	.db #0x41	; 65	'A'
      0006F8                       2005 _color_column_10:
      0006F8 F1                    2006 	.db #0xf1	; 241
      0006F9 F1                    2007 	.db #0xf1	; 241
      0006FA F1                    2008 	.db #0xf1	; 241
      0006FB F1                    2009 	.db #0xf1	; 241
      0006FC F1                    2010 	.db #0xf1	; 241
      0006FD F1                    2011 	.db #0xf1	; 241
      0006FE F1                    2012 	.db #0xf1	; 241
      0006FF F1                    2013 	.db #0xf1	; 241
      000700                       2014 _color_column_11:
      000700 E1                    2015 	.db #0xe1	; 225
      000701 E1                    2016 	.db #0xe1	; 225
      000702 E1                    2017 	.db #0xe1	; 225
      000703 E1                    2018 	.db #0xe1	; 225
      000704 E1                    2019 	.db #0xe1	; 225
      000705 E1                    2020 	.db #0xe1	; 225
      000706 E1                    2021 	.db #0xe1	; 225
      000707 E1                    2022 	.db #0xe1	; 225
      000708                       2023 _color_column_12:
      000708 41                    2024 	.db #0x41	; 65	'A'
      000709 41                    2025 	.db #0x41	; 65	'A'
      00070A 41                    2026 	.db #0x41	; 65	'A'
      00070B 41                    2027 	.db #0x41	; 65	'A'
      00070C 41                    2028 	.db #0x41	; 65	'A'
      00070D 41                    2029 	.db #0x41	; 65	'A'
      00070E 41                    2030 	.db #0x41	; 65	'A'
      00070F 41                    2031 	.db #0x41	; 65	'A'
      000710                       2032 _color_column_16:
      000710 F1                    2033 	.db #0xf1	; 241
      000711 F1                    2034 	.db #0xf1	; 241
      000712 F1                    2035 	.db #0xf1	; 241
      000713 F1                    2036 	.db #0xf1	; 241
      000714 F1                    2037 	.db #0xf1	; 241
      000715 F1                    2038 	.db #0xf1	; 241
      000716 F1                    2039 	.db #0xf1	; 241
      000717 F1                    2040 	.db #0xf1	; 241
      000718                       2041 _color_column_17:
      000718 E1                    2042 	.db #0xe1	; 225
      000719 E1                    2043 	.db #0xe1	; 225
      00071A E1                    2044 	.db #0xe1	; 225
      00071B E1                    2045 	.db #0xe1	; 225
      00071C E1                    2046 	.db #0xe1	; 225
      00071D E1                    2047 	.db #0xe1	; 225
      00071E E1                    2048 	.db #0xe1	; 225
      00071F E1                    2049 	.db #0xe1	; 225
      000720                       2050 _color_column_18:
      000720 41                    2051 	.db #0x41	; 65	'A'
      000721 41                    2052 	.db #0x41	; 65	'A'
      000722 41                    2053 	.db #0x41	; 65	'A'
      000723 41                    2054 	.db #0x41	; 65	'A'
      000724 41                    2055 	.db #0x41	; 65	'A'
      000725 E1                    2056 	.db #0xe1	; 225
      000726 E1                    2057 	.db #0xe1	; 225
      000727 E1                    2058 	.db #0xe1	; 225
      000728                       2059 _color_column_13:
      000728 E1                    2060 	.db #0xe1	; 225
      000729 E1                    2061 	.db #0xe1	; 225
      00072A E1                    2062 	.db #0xe1	; 225
      00072B E1                    2063 	.db #0xe1	; 225
      00072C E1                    2064 	.db #0xe1	; 225
      00072D E1                    2065 	.db #0xe1	; 225
      00072E E1                    2066 	.db #0xe1	; 225
      00072F F1                    2067 	.db #0xf1	; 241
      000730                       2068 _color_column_14:
      000730 E1                    2069 	.db #0xe1	; 225
      000731 E1                    2070 	.db #0xe1	; 225
      000732 E1                    2071 	.db #0xe1	; 225
      000733 E1                    2072 	.db #0xe1	; 225
      000734 E1                    2073 	.db #0xe1	; 225
      000735 E1                    2074 	.db #0xe1	; 225
      000736 E1                    2075 	.db #0xe1	; 225
      000737 F1                    2076 	.db #0xf1	; 241
      000738                       2077 _color_column_15:
      000738 E1                    2078 	.db #0xe1	; 225
      000739 E1                    2079 	.db #0xe1	; 225
      00073A E1                    2080 	.db #0xe1	; 225
      00073B E1                    2081 	.db #0xe1	; 225
      00073C E1                    2082 	.db #0xe1	; 225
      00073D E1                    2083 	.db #0xe1	; 225
      00073E E1                    2084 	.db #0xe1	; 225
      00073F F1                    2085 	.db #0xf1	; 241
      000740                       2086 _color_dust_0:
      000740 F1                    2087 	.db #0xf1	; 241
      000741 F1                    2088 	.db #0xf1	; 241
      000742 F1                    2089 	.db #0xf1	; 241
      000743 F1                    2090 	.db #0xf1	; 241
      000744 F1                    2091 	.db #0xf1	; 241
      000745 F1                    2092 	.db #0xf1	; 241
      000746 F1                    2093 	.db #0xf1	; 241
      000747 F1                    2094 	.db #0xf1	; 241
      000748                       2095 _color_dust_1:
      000748 F1                    2096 	.db #0xf1	; 241
      000749 F1                    2097 	.db #0xf1	; 241
      00074A F1                    2098 	.db #0xf1	; 241
      00074B F1                    2099 	.db #0xf1	; 241
      00074C F1                    2100 	.db #0xf1	; 241
      00074D F1                    2101 	.db #0xf1	; 241
      00074E F1                    2102 	.db #0xf1	; 241
      00074F F1                    2103 	.db #0xf1	; 241
      000750                       2104 _color_dust_2:
      000750 F1                    2105 	.db #0xf1	; 241
      000751 F1                    2106 	.db #0xf1	; 241
      000752 F1                    2107 	.db #0xf1	; 241
      000753 F1                    2108 	.db #0xf1	; 241
      000754 F1                    2109 	.db #0xf1	; 241
      000755 F1                    2110 	.db #0xf1	; 241
      000756 F1                    2111 	.db #0xf1	; 241
      000757 F1                    2112 	.db #0xf1	; 241
      000758                       2113 _color_dust_3:
      000758 F1                    2114 	.db #0xf1	; 241
      000759 F1                    2115 	.db #0xf1	; 241
      00075A F1                    2116 	.db #0xf1	; 241
      00075B F1                    2117 	.db #0xf1	; 241
      00075C F1                    2118 	.db #0xf1	; 241
      00075D F1                    2119 	.db #0xf1	; 241
      00075E F1                    2120 	.db #0xf1	; 241
      00075F F1                    2121 	.db #0xf1	; 241
      000760                       2122 _color_font_1:
      000760 F1                    2123 	.db #0xf1	; 241
      000761 F1                    2124 	.db #0xf1	; 241
      000762 E1                    2125 	.db #0xe1	; 225
      000763 71                    2126 	.db #0x71	; 113	'q'
      000764 71                    2127 	.db #0x71	; 113	'q'
      000765 51                    2128 	.db #0x51	; 81	'Q'
      000766 51                    2129 	.db #0x51	; 81	'Q'
      000767 41                    2130 	.db #0x41	; 65	'A'
      000768                       2131 _color_font_2:
      000768 61                    2132 	.db #0x61	; 97	'a'
      000769 61                    2133 	.db #0x61	; 97	'a'
      00076A 81                    2134 	.db #0x81	; 129
      00076B 81                    2135 	.db #0x81	; 129
      00076C 91                    2136 	.db #0x91	; 145
      00076D 91                    2137 	.db #0x91	; 145
      00076E E1                    2138 	.db #0xe1	; 225
      00076F E1                    2139 	.db #0xe1	; 225
      000770                       2140 _color_title_1:
      000770 A1                    2141 	.db #0xa1	; 161
      000771 A1                    2142 	.db #0xa1	; 161
      000772 A1                    2143 	.db #0xa1	; 161
      000773 A1                    2144 	.db #0xa1	; 161
      000774 A1                    2145 	.db #0xa1	; 161
      000775 A1                    2146 	.db #0xa1	; 161
      000776 A1                    2147 	.db #0xa1	; 161
      000777 A1                    2148 	.db #0xa1	; 161
      000778                       2149 _color_title_2:
      000778 B1                    2150 	.db #0xb1	; 177
      000779 B1                    2151 	.db #0xb1	; 177
      00077A B1                    2152 	.db #0xb1	; 177
      00077B B1                    2153 	.db #0xb1	; 177
      00077C B1                    2154 	.db #0xb1	; 177
      00077D B1                    2155 	.db #0xb1	; 177
      00077E B1                    2156 	.db #0xb1	; 177
      00077F B1                    2157 	.db #0xb1	; 177
      000780                       2158 _color_title_3:
      000780 D1                    2159 	.db #0xd1	; 209
      000781 D1                    2160 	.db #0xd1	; 209
      000782 D1                    2161 	.db #0xd1	; 209
      000783 D1                    2162 	.db #0xd1	; 209
      000784 D1                    2163 	.db #0xd1	; 209
      000785 D1                    2164 	.db #0xd1	; 209
      000786 D1                    2165 	.db #0xd1	; 209
      000787 D1                    2166 	.db #0xd1	; 209
      000788                       2167 _color_title_4:
      000788 F1                    2168 	.db #0xf1	; 241
      000789 F1                    2169 	.db #0xf1	; 241
      00078A F1                    2170 	.db #0xf1	; 241
      00078B F1                    2171 	.db #0xf1	; 241
      00078C F1                    2172 	.db #0xf1	; 241
      00078D F1                    2173 	.db #0xf1	; 241
      00078E F1                    2174 	.db #0xf1	; 241
      00078F F1                    2175 	.db #0xf1	; 241
      000790                       2176 _color_title_5:
      000790 71                    2177 	.db #0x71	; 113	'q'
      000791 71                    2178 	.db #0x71	; 113	'q'
      000792 71                    2179 	.db #0x71	; 113	'q'
      000793 71                    2180 	.db #0x71	; 113	'q'
      000794 71                    2181 	.db #0x71	; 113	'q'
      000795 71                    2182 	.db #0x71	; 113	'q'
      000796 71                    2183 	.db #0x71	; 113	'q'
      000797 71                    2184 	.db #0x71	; 113	'q'
      000798                       2185 _color_title_6:
      000798 51                    2186 	.db #0x51	; 81	'Q'
      000799 51                    2187 	.db #0x51	; 81	'Q'
      00079A 51                    2188 	.db #0x51	; 81	'Q'
      00079B 51                    2189 	.db #0x51	; 81	'Q'
      00079C 51                    2190 	.db #0x51	; 81	'Q'
      00079D 51                    2191 	.db #0x51	; 81	'Q'
      00079E 51                    2192 	.db #0x51	; 81	'Q'
      00079F 51                    2193 	.db #0x51	; 81	'Q'
      0007A0                       2194 _color_title_7:
      0007A0 41                    2195 	.db #0x41	; 65	'A'
      0007A1 41                    2196 	.db #0x41	; 65	'A'
      0007A2 41                    2197 	.db #0x41	; 65	'A'
      0007A3 41                    2198 	.db #0x41	; 65	'A'
      0007A4 41                    2199 	.db #0x41	; 65	'A'
      0007A5 41                    2200 	.db #0x41	; 65	'A'
      0007A6 41                    2201 	.db #0x41	; 65	'A'
      0007A7 41                    2202 	.db #0x41	; 65	'A'
      0007A8                       2203 _sprite_arrow_0:
      0007A8 00                    2204 	.db #0x00	; 0
      0007A9 00                    2205 	.db #0x00	; 0
      0007AA 00                    2206 	.db #0x00	; 0
      0007AB 00                    2207 	.db #0x00	; 0
      0007AC 00                    2208 	.db #0x00	; 0
      0007AD 00                    2209 	.db #0x00	; 0
      0007AE 00                    2210 	.db #0x00	; 0
      0007AF 00                    2211 	.db #0x00	; 0
      0007B0                       2212 _sprite_arrow_1:
      0007B0 FF                    2213 	.db #0xff	; 255
      0007B1 00                    2214 	.db #0x00	; 0
      0007B2 3F                    2215 	.db #0x3f	; 63
      0007B3 00                    2216 	.db #0x00	; 0
      0007B4 0F                    2217 	.db #0x0f	; 15
      0007B5 00                    2218 	.db #0x00	; 0
      0007B6 03                    2219 	.db #0x03	; 3
      0007B7 00                    2220 	.db #0x00	; 0
      0007B8                       2221 _sprite_arrow_2:
      0007B8 00                    2222 	.db #0x00	; 0
      0007B9 00                    2223 	.db #0x00	; 0
      0007BA 00                    2224 	.db #0x00	; 0
      0007BB 00                    2225 	.db #0x00	; 0
      0007BC 00                    2226 	.db #0x00	; 0
      0007BD 00                    2227 	.db #0x00	; 0
      0007BE 00                    2228 	.db #0x00	; 0
      0007BF 00                    2229 	.db #0x00	; 0
      0007C0                       2230 _sprite_arrow_3:
      0007C0 FF                    2231 	.db #0xff	; 255
      0007C1 00                    2232 	.db #0x00	; 0
      0007C2 FC                    2233 	.db #0xfc	; 252
      0007C3 00                    2234 	.db #0x00	; 0
      0007C4 F0                    2235 	.db #0xf0	; 240
      0007C5 00                    2236 	.db #0x00	; 0
      0007C6 C0                    2237 	.db #0xc0	; 192
      0007C7 00                    2238 	.db #0x00	; 0
      0007C8                       2239 _sprite_hit_1:
      0007C8 00                    2240 	.db #0x00	; 0
      0007C9 77                    2241 	.db #0x77	; 119	'w'
      0007CA 22                    2242 	.db #0x22	; 34
      0007CB 22                    2243 	.db #0x22	; 34
      0007CC 22                    2244 	.db #0x22	; 34
      0007CD 3E                    2245 	.db #0x3e	; 62
      0007CE 22                    2246 	.db #0x22	; 34
      0007CF 22                    2247 	.db #0x22	; 34
      0007D0 22                    2248 	.db #0x22	; 34
      0007D1 77                    2249 	.db #0x77	; 119	'w'
      0007D2 00                    2250 	.db #0x00	; 0
      0007D3 00                    2251 	.db #0x00	; 0
      0007D4 00                    2252 	.db #0x00	; 0
      0007D5 00                    2253 	.db #0x00	; 0
      0007D6 00                    2254 	.db #0x00	; 0
      0007D7 00                    2255 	.db #0x00	; 0
      0007D8 00                    2256 	.db #0x00	; 0
      0007D9 77                    2257 	.db #0x77	; 119	'w'
      0007DA 25                    2258 	.db #0x25	; 37
      0007DB 21                    2259 	.db #0x21	; 33
      0007DC 21                    2260 	.db #0x21	; 33
      0007DD 21                    2261 	.db #0x21	; 33
      0007DE 21                    2262 	.db #0x21	; 33
      0007DF 21                    2263 	.db #0x21	; 33
      0007E0 21                    2264 	.db #0x21	; 33
      0007E1 73                    2265 	.db #0x73	; 115	's'
      0007E2 00                    2266 	.db #0x00	; 0
      0007E3 00                    2267 	.db #0x00	; 0
      0007E4 00                    2268 	.db #0x00	; 0
      0007E5 00                    2269 	.db #0x00	; 0
      0007E6 00                    2270 	.db #0x00	; 0
      0007E7 00                    2271 	.db #0x00	; 0
      0007E8                       2272 _sprite_hit_2:
      0007E8 00                    2273 	.db #0x00	; 0
      0007E9 C0                    2274 	.db #0xc0	; 192
      0007EA 40                    2275 	.db #0x40	; 64
      0007EB 00                    2276 	.db #0x00	; 0
      0007EC 00                    2277 	.db #0x00	; 0
      0007ED 00                    2278 	.db #0x00	; 0
      0007EE 00                    2279 	.db #0x00	; 0
      0007EF 00                    2280 	.db #0x00	; 0
      0007F0 00                    2281 	.db #0x00	; 0
      0007F1 80                    2282 	.db #0x80	; 128
      0007F2 00                    2283 	.db #0x00	; 0
      0007F3 00                    2284 	.db #0x00	; 0
      0007F4 00                    2285 	.db #0x00	; 0
      0007F5 00                    2286 	.db #0x00	; 0
      0007F6 00                    2287 	.db #0x00	; 0
      0007F7 00                    2288 	.db #0x00	; 0
      0007F8 00                    2289 	.db #0x00	; 0
      0007F9 00                    2290 	.db #0x00	; 0
      0007FA 00                    2291 	.db #0x00	; 0
      0007FB 00                    2292 	.db #0x00	; 0
      0007FC 00                    2293 	.db #0x00	; 0
      0007FD 00                    2294 	.db #0x00	; 0
      0007FE 00                    2295 	.db #0x00	; 0
      0007FF 00                    2296 	.db #0x00	; 0
      000800 00                    2297 	.db #0x00	; 0
      000801 00                    2298 	.db #0x00	; 0
      000802 00                    2299 	.db #0x00	; 0
      000803 00                    2300 	.db #0x00	; 0
      000804 00                    2301 	.db #0x00	; 0
      000805 00                    2302 	.db #0x00	; 0
      000806 00                    2303 	.db #0x00	; 0
      000807 00                    2304 	.db #0x00	; 0
      000808                       2305 _sprite_combo_1:
      000808 00                    2306 	.db #0x00	; 0
      000809 38                    2307 	.db #0x38	; 56	'8'
      00080A 65                    2308 	.db #0x65	; 101	'e'
      00080B 61                    2309 	.db #0x61	; 97	'a'
      00080C 61                    2310 	.db #0x61	; 97	'a'
      00080D 61                    2311 	.db #0x61	; 97	'a'
      00080E 61                    2312 	.db #0x61	; 97	'a'
      00080F 61                    2313 	.db #0x61	; 97	'a'
      000810 65                    2314 	.db #0x65	; 101	'e'
      000811 38                    2315 	.db #0x38	; 56	'8'
      000812 00                    2316 	.db #0x00	; 0
      000813 00                    2317 	.db #0x00	; 0
      000814 00                    2318 	.db #0x00	; 0
      000815 00                    2319 	.db #0x00	; 0
      000816 00                    2320 	.db #0x00	; 0
      000817 00                    2321 	.db #0x00	; 0
      000818 00                    2322 	.db #0x00	; 0
      000819 E6                    2323 	.db #0xe6	; 230
      00081A 13                    2324 	.db #0x13	; 19
      00081B 12                    2325 	.db #0x12	; 18
      00081C 12                    2326 	.db #0x12	; 18
      00081D 12                    2327 	.db #0x12	; 18
      00081E 12                    2328 	.db #0x12	; 18
      00081F 12                    2329 	.db #0x12	; 18
      000820 12                    2330 	.db #0x12	; 18
      000821 E7                    2331 	.db #0xe7	; 231
      000822 00                    2332 	.db #0x00	; 0
      000823 00                    2333 	.db #0x00	; 0
      000824 00                    2334 	.db #0x00	; 0
      000825 00                    2335 	.db #0x00	; 0
      000826 00                    2336 	.db #0x00	; 0
      000827 00                    2337 	.db #0x00	; 0
      000828                       2338 _sprite_combo_2:
      000828 00                    2339 	.db #0x00	; 0
      000829 37                    2340 	.db #0x37	; 55	'7'
      00082A 62                    2341 	.db #0x62	; 98	'b'
      00082B A2                    2342 	.db #0xa2	; 162
      00082C 22                    2343 	.db #0x22	; 34
      00082D 23                    2344 	.db #0x23	; 35
      00082E 22                    2345 	.db #0x22	; 34
      00082F 22                    2346 	.db #0x22	; 34
      000830 22                    2347 	.db #0x22	; 34
      000831 77                    2348 	.db #0x77	; 119	'w'
      000832 00                    2349 	.db #0x00	; 0
      000833 00                    2350 	.db #0x00	; 0
      000834 00                    2351 	.db #0x00	; 0
      000835 00                    2352 	.db #0x00	; 0
      000836 00                    2353 	.db #0x00	; 0
      000837 00                    2354 	.db #0x00	; 0
      000838 00                    2355 	.db #0x00	; 0
      000839 8E                    2356 	.db #0x8e	; 142
      00083A 51                    2357 	.db #0x51	; 81	'Q'
      00083B 51                    2358 	.db #0x51	; 81	'Q'
      00083C 51                    2359 	.db #0x51	; 81	'Q'
      00083D 91                    2360 	.db #0x91	; 145
      00083E 51                    2361 	.db #0x51	; 81	'Q'
      00083F 51                    2362 	.db #0x51	; 81	'Q'
      000840 51                    2363 	.db #0x51	; 81	'Q'
      000841 8E                    2364 	.db #0x8e	; 142
      000842 00                    2365 	.db #0x00	; 0
      000843 00                    2366 	.db #0x00	; 0
      000844 00                    2367 	.db #0x00	; 0
      000845 00                    2368 	.db #0x00	; 0
      000846 00                    2369 	.db #0x00	; 0
      000847 00                    2370 	.db #0x00	; 0
      000848                       2371 _sprite_2x:
      000848 00                    2372 	.db #0x00	; 0
      000849 3E                    2373 	.db #0x3e	; 62
      00084A 63                    2374 	.db #0x63	; 99	'c'
      00084B 03                    2375 	.db #0x03	; 3
      00084C 03                    2376 	.db #0x03	; 3
      00084D 1E                    2377 	.db #0x1e	; 30
      00084E 30                    2378 	.db #0x30	; 48	'0'
      00084F 60                    2379 	.db #0x60	; 96
      000850 60                    2380 	.db #0x60	; 96
      000851 7F                    2381 	.db #0x7f	; 127
      000852 00                    2382 	.db #0x00	; 0
      000853 00                    2383 	.db #0x00	; 0
      000854 00                    2384 	.db #0x00	; 0
      000855 00                    2385 	.db #0x00	; 0
      000856 00                    2386 	.db #0x00	; 0
      000857 00                    2387 	.db #0x00	; 0
      000858 00                    2388 	.db #0x00	; 0
      000859 00                    2389 	.db #0x00	; 0
      00085A 00                    2390 	.db #0x00	; 0
      00085B 63                    2391 	.db #0x63	; 99	'c'
      00085C 36                    2392 	.db #0x36	; 54	'6'
      00085D 1C                    2393 	.db #0x1c	; 28
      00085E 08                    2394 	.db #0x08	; 8
      00085F 1C                    2395 	.db #0x1c	; 28
      000860 36                    2396 	.db #0x36	; 54	'6'
      000861 63                    2397 	.db #0x63	; 99	'c'
      000862 00                    2398 	.db #0x00	; 0
      000863 00                    2399 	.db #0x00	; 0
      000864 00                    2400 	.db #0x00	; 0
      000865 00                    2401 	.db #0x00	; 0
      000866 00                    2402 	.db #0x00	; 0
      000867 00                    2403 	.db #0x00	; 0
      000868                       2404 _sprite_3x:
      000868 00                    2405 	.db #0x00	; 0
      000869 3E                    2406 	.db #0x3e	; 62
      00086A 63                    2407 	.db #0x63	; 99	'c'
      00086B 03                    2408 	.db #0x03	; 3
      00086C 03                    2409 	.db #0x03	; 3
      00086D 1E                    2410 	.db #0x1e	; 30
      00086E 03                    2411 	.db #0x03	; 3
      00086F 03                    2412 	.db #0x03	; 3
      000870 63                    2413 	.db #0x63	; 99	'c'
      000871 3E                    2414 	.db #0x3e	; 62
      000872 00                    2415 	.db #0x00	; 0
      000873 00                    2416 	.db #0x00	; 0
      000874 00                    2417 	.db #0x00	; 0
      000875 00                    2418 	.db #0x00	; 0
      000876 00                    2419 	.db #0x00	; 0
      000877 00                    2420 	.db #0x00	; 0
      000878 00                    2421 	.db #0x00	; 0
      000879 00                    2422 	.db #0x00	; 0
      00087A 00                    2423 	.db #0x00	; 0
      00087B 63                    2424 	.db #0x63	; 99	'c'
      00087C 36                    2425 	.db #0x36	; 54	'6'
      00087D 1C                    2426 	.db #0x1c	; 28
      00087E 08                    2427 	.db #0x08	; 8
      00087F 1C                    2428 	.db #0x1c	; 28
      000880 36                    2429 	.db #0x36	; 54	'6'
      000881 63                    2430 	.db #0x63	; 99	'c'
      000882 00                    2431 	.db #0x00	; 0
      000883 00                    2432 	.db #0x00	; 0
      000884 00                    2433 	.db #0x00	; 0
      000885 00                    2434 	.db #0x00	; 0
      000886 00                    2435 	.db #0x00	; 0
      000887 00                    2436 	.db #0x00	; 0
      000888                       2437 _sprite_4x:
      000888 00                    2438 	.db #0x00	; 0
      000889 02                    2439 	.db #0x02	; 2
      00088A 06                    2440 	.db #0x06	; 6
      00088B 0E                    2441 	.db #0x0e	; 14
      00088C 16                    2442 	.db #0x16	; 22
      00088D 26                    2443 	.db #0x26	; 38
      00088E 7F                    2444 	.db #0x7f	; 127
      00088F 06                    2445 	.db #0x06	; 6
      000890 06                    2446 	.db #0x06	; 6
      000891 0F                    2447 	.db #0x0f	; 15
      000892 00                    2448 	.db #0x00	; 0
      000893 00                    2449 	.db #0x00	; 0
      000894 00                    2450 	.db #0x00	; 0
      000895 00                    2451 	.db #0x00	; 0
      000896 00                    2452 	.db #0x00	; 0
      000897 00                    2453 	.db #0x00	; 0
      000898 00                    2454 	.db #0x00	; 0
      000899 00                    2455 	.db #0x00	; 0
      00089A 00                    2456 	.db #0x00	; 0
      00089B 63                    2457 	.db #0x63	; 99	'c'
      00089C 36                    2458 	.db #0x36	; 54	'6'
      00089D 1C                    2459 	.db #0x1c	; 28
      00089E 08                    2460 	.db #0x08	; 8
      00089F 1C                    2461 	.db #0x1c	; 28
      0008A0 36                    2462 	.db #0x36	; 54	'6'
      0008A1 63                    2463 	.db #0x63	; 99	'c'
      0008A2 00                    2464 	.db #0x00	; 0
      0008A3 00                    2465 	.db #0x00	; 0
      0008A4 00                    2466 	.db #0x00	; 0
      0008A5 00                    2467 	.db #0x00	; 0
      0008A6 00                    2468 	.db #0x00	; 0
      0008A7 00                    2469 	.db #0x00	; 0
      0008A8                       2470 _sprite_5x:
      0008A8 00                    2471 	.db #0x00	; 0
      0008A9 7E                    2472 	.db #0x7e	; 126
      0008AA 60                    2473 	.db #0x60	; 96
      0008AB 60                    2474 	.db #0x60	; 96
      0008AC 7E                    2475 	.db #0x7e	; 126
      0008AD 03                    2476 	.db #0x03	; 3
      0008AE 03                    2477 	.db #0x03	; 3
      0008AF 03                    2478 	.db #0x03	; 3
      0008B0 63                    2479 	.db #0x63	; 99	'c'
      0008B1 3E                    2480 	.db #0x3e	; 62
      0008B2 00                    2481 	.db #0x00	; 0
      0008B3 00                    2482 	.db #0x00	; 0
      0008B4 00                    2483 	.db #0x00	; 0
      0008B5 00                    2484 	.db #0x00	; 0
      0008B6 00                    2485 	.db #0x00	; 0
      0008B7 00                    2486 	.db #0x00	; 0
      0008B8 00                    2487 	.db #0x00	; 0
      0008B9 00                    2488 	.db #0x00	; 0
      0008BA 00                    2489 	.db #0x00	; 0
      0008BB 63                    2490 	.db #0x63	; 99	'c'
      0008BC 36                    2491 	.db #0x36	; 54	'6'
      0008BD 1C                    2492 	.db #0x1c	; 28
      0008BE 08                    2493 	.db #0x08	; 8
      0008BF 1C                    2494 	.db #0x1c	; 28
      0008C0 36                    2495 	.db #0x36	; 54	'6'
      0008C1 63                    2496 	.db #0x63	; 99	'c'
      0008C2 00                    2497 	.db #0x00	; 0
      0008C3 00                    2498 	.db #0x00	; 0
      0008C4 00                    2499 	.db #0x00	; 0
      0008C5 00                    2500 	.db #0x00	; 0
      0008C6 00                    2501 	.db #0x00	; 0
      0008C7 00                    2502 	.db #0x00	; 0
      0008C8                       2503 _sprite_6x:
      0008C8 00                    2504 	.db #0x00	; 0
      0008C9 3E                    2505 	.db #0x3e	; 62
      0008CA 61                    2506 	.db #0x61	; 97	'a'
      0008CB 60                    2507 	.db #0x60	; 96
      0008CC 7E                    2508 	.db #0x7e	; 126
      0008CD 63                    2509 	.db #0x63	; 99	'c'
      0008CE 63                    2510 	.db #0x63	; 99	'c'
      0008CF 63                    2511 	.db #0x63	; 99	'c'
      0008D0 63                    2512 	.db #0x63	; 99	'c'
      0008D1 3E                    2513 	.db #0x3e	; 62
      0008D2 00                    2514 	.db #0x00	; 0
      0008D3 00                    2515 	.db #0x00	; 0
      0008D4 00                    2516 	.db #0x00	; 0
      0008D5 00                    2517 	.db #0x00	; 0
      0008D6 00                    2518 	.db #0x00	; 0
      0008D7 00                    2519 	.db #0x00	; 0
      0008D8 00                    2520 	.db #0x00	; 0
      0008D9 00                    2521 	.db #0x00	; 0
      0008DA 00                    2522 	.db #0x00	; 0
      0008DB 63                    2523 	.db #0x63	; 99	'c'
      0008DC 36                    2524 	.db #0x36	; 54	'6'
      0008DD 1C                    2525 	.db #0x1c	; 28
      0008DE 08                    2526 	.db #0x08	; 8
      0008DF 1C                    2527 	.db #0x1c	; 28
      0008E0 36                    2528 	.db #0x36	; 54	'6'
      0008E1 63                    2529 	.db #0x63	; 99	'c'
      0008E2 00                    2530 	.db #0x00	; 0
      0008E3 00                    2531 	.db #0x00	; 0
      0008E4 00                    2532 	.db #0x00	; 0
      0008E5 00                    2533 	.db #0x00	; 0
      0008E6 00                    2534 	.db #0x00	; 0
      0008E7 00                    2535 	.db #0x00	; 0
      0008E8                       2536 _sprite_mega_hit:
      0008E8 04                    2537 	.db #0x04	; 4
      0008E9 06                    2538 	.db #0x06	; 6
      0008EA 05                    2539 	.db #0x05	; 5
      0008EB 04                    2540 	.db #0x04	; 4
      0008EC 04                    2541 	.db #0x04	; 4
      0008ED 00                    2542 	.db #0x00	; 0
      0008EE 03                    2543 	.db #0x03	; 3
      0008EF 04                    2544 	.db #0x04	; 4
      0008F0 05                    2545 	.db #0x05	; 5
      0008F1 04                    2546 	.db #0x04	; 4
      0008F2 03                    2547 	.db #0x03	; 3
      0008F3 00                    2548 	.db #0x00	; 0
      0008F4 00                    2549 	.db #0x00	; 0
      0008F5 00                    2550 	.db #0x00	; 0
      0008F6 00                    2551 	.db #0x00	; 0
      0008F7 00                    2552 	.db #0x00	; 0
      0008F8 5C                    2553 	.db #0x5c	; 92
      0008F9 D0                    2554 	.db #0xd0	; 208
      0008FA 5C                    2555 	.db #0x5c	; 92
      0008FB 50                    2556 	.db #0x50	; 80	'P'
      0008FC 5C                    2557 	.db #0x5c	; 92
      0008FD 00                    2558 	.db #0x00	; 0
      0008FE 98                    2559 	.db #0x98	; 152
      0008FF 24                    2560 	.db #0x24	; 36
      000900 A4                    2561 	.db #0xa4	; 164
      000901 BC                    2562 	.db #0xbc	; 188
      000902 A4                    2563 	.db #0xa4	; 164
      000903 00                    2564 	.db #0x00	; 0
      000904 00                    2565 	.db #0x00	; 0
      000905 00                    2566 	.db #0x00	; 0
      000906 00                    2567 	.db #0x00	; 0
      000907 00                    2568 	.db #0x00	; 0
      000908                       2569 _sprite_explosion_0:
      000908 00                    2570 	.db #0x00	; 0
      000909 00                    2571 	.db #0x00	; 0
      00090A 00                    2572 	.db #0x00	; 0
      00090B 00                    2573 	.db #0x00	; 0
      00090C 00                    2574 	.db #0x00	; 0
      00090D 00                    2575 	.db #0x00	; 0
      00090E 01                    2576 	.db #0x01	; 1
      00090F 02                    2577 	.db #0x02	; 2
      000910 01                    2578 	.db #0x01	; 1
      000911 00                    2579 	.db #0x00	; 0
      000912 00                    2580 	.db #0x00	; 0
      000913 00                    2581 	.db #0x00	; 0
      000914 00                    2582 	.db #0x00	; 0
      000915 00                    2583 	.db #0x00	; 0
      000916 00                    2584 	.db #0x00	; 0
      000917 00                    2585 	.db #0x00	; 0
      000918 00                    2586 	.db #0x00	; 0
      000919 00                    2587 	.db #0x00	; 0
      00091A 00                    2588 	.db #0x00	; 0
      00091B 00                    2589 	.db #0x00	; 0
      00091C 00                    2590 	.db #0x00	; 0
      00091D 00                    2591 	.db #0x00	; 0
      00091E 00                    2592 	.db #0x00	; 0
      00091F 80                    2593 	.db #0x80	; 128
      000920 00                    2594 	.db #0x00	; 0
      000921 00                    2595 	.db #0x00	; 0
      000922 00                    2596 	.db #0x00	; 0
      000923 00                    2597 	.db #0x00	; 0
      000924 00                    2598 	.db #0x00	; 0
      000925 00                    2599 	.db #0x00	; 0
      000926 00                    2600 	.db #0x00	; 0
      000927 00                    2601 	.db #0x00	; 0
      000928                       2602 _sprite_explosion_1:
      000928 00                    2603 	.db #0x00	; 0
      000929 00                    2604 	.db #0x00	; 0
      00092A 00                    2605 	.db #0x00	; 0
      00092B 00                    2606 	.db #0x00	; 0
      00092C 00                    2607 	.db #0x00	; 0
      00092D 01                    2608 	.db #0x01	; 1
      00092E 00                    2609 	.db #0x00	; 0
      00092F 04                    2610 	.db #0x04	; 4
      000930 00                    2611 	.db #0x00	; 0
      000931 01                    2612 	.db #0x01	; 1
      000932 00                    2613 	.db #0x00	; 0
      000933 00                    2614 	.db #0x00	; 0
      000934 00                    2615 	.db #0x00	; 0
      000935 00                    2616 	.db #0x00	; 0
      000936 00                    2617 	.db #0x00	; 0
      000937 00                    2618 	.db #0x00	; 0
      000938 00                    2619 	.db #0x00	; 0
      000939 00                    2620 	.db #0x00	; 0
      00093A 00                    2621 	.db #0x00	; 0
      00093B 00                    2622 	.db #0x00	; 0
      00093C 00                    2623 	.db #0x00	; 0
      00093D 00                    2624 	.db #0x00	; 0
      00093E 00                    2625 	.db #0x00	; 0
      00093F 40                    2626 	.db #0x40	; 64
      000940 00                    2627 	.db #0x00	; 0
      000941 00                    2628 	.db #0x00	; 0
      000942 00                    2629 	.db #0x00	; 0
      000943 00                    2630 	.db #0x00	; 0
      000944 00                    2631 	.db #0x00	; 0
      000945 00                    2632 	.db #0x00	; 0
      000946 00                    2633 	.db #0x00	; 0
      000947 00                    2634 	.db #0x00	; 0
      000948                       2635 _sprite_explosion_2:
      000948 00                    2636 	.db #0x00	; 0
      000949 00                    2637 	.db #0x00	; 0
      00094A 00                    2638 	.db #0x00	; 0
      00094B 00                    2639 	.db #0x00	; 0
      00094C 01                    2640 	.db #0x01	; 1
      00094D 04                    2641 	.db #0x04	; 4
      00094E 00                    2642 	.db #0x00	; 0
      00094F 08                    2643 	.db #0x08	; 8
      000950 00                    2644 	.db #0x00	; 0
      000951 04                    2645 	.db #0x04	; 4
      000952 01                    2646 	.db #0x01	; 1
      000953 00                    2647 	.db #0x00	; 0
      000954 00                    2648 	.db #0x00	; 0
      000955 00                    2649 	.db #0x00	; 0
      000956 00                    2650 	.db #0x00	; 0
      000957 00                    2651 	.db #0x00	; 0
      000958 00                    2652 	.db #0x00	; 0
      000959 00                    2653 	.db #0x00	; 0
      00095A 00                    2654 	.db #0x00	; 0
      00095B 00                    2655 	.db #0x00	; 0
      00095C 00                    2656 	.db #0x00	; 0
      00095D 40                    2657 	.db #0x40	; 64
      00095E 00                    2658 	.db #0x00	; 0
      00095F 20                    2659 	.db #0x20	; 32
      000960 00                    2660 	.db #0x00	; 0
      000961 40                    2661 	.db #0x40	; 64
      000962 00                    2662 	.db #0x00	; 0
      000963 00                    2663 	.db #0x00	; 0
      000964 00                    2664 	.db #0x00	; 0
      000965 00                    2665 	.db #0x00	; 0
      000966 00                    2666 	.db #0x00	; 0
      000967 00                    2667 	.db #0x00	; 0
      000968                       2668 _sprite_explosion_3:
      000968 00                    2669 	.db #0x00	; 0
      000969 00                    2670 	.db #0x00	; 0
      00096A 00                    2671 	.db #0x00	; 0
      00096B 01                    2672 	.db #0x01	; 1
      00096C 08                    2673 	.db #0x08	; 8
      00096D 00                    2674 	.db #0x00	; 0
      00096E 00                    2675 	.db #0x00	; 0
      00096F 10                    2676 	.db #0x10	; 16
      000970 00                    2677 	.db #0x00	; 0
      000971 00                    2678 	.db #0x00	; 0
      000972 08                    2679 	.db #0x08	; 8
      000973 01                    2680 	.db #0x01	; 1
      000974 00                    2681 	.db #0x00	; 0
      000975 00                    2682 	.db #0x00	; 0
      000976 00                    2683 	.db #0x00	; 0
      000977 00                    2684 	.db #0x00	; 0
      000978 00                    2685 	.db #0x00	; 0
      000979 00                    2686 	.db #0x00	; 0
      00097A 00                    2687 	.db #0x00	; 0
      00097B 00                    2688 	.db #0x00	; 0
      00097C 20                    2689 	.db #0x20	; 32
      00097D 00                    2690 	.db #0x00	; 0
      00097E 00                    2691 	.db #0x00	; 0
      00097F 10                    2692 	.db #0x10	; 16
      000980 00                    2693 	.db #0x00	; 0
      000981 00                    2694 	.db #0x00	; 0
      000982 20                    2695 	.db #0x20	; 32
      000983 00                    2696 	.db #0x00	; 0
      000984 00                    2697 	.db #0x00	; 0
      000985 00                    2698 	.db #0x00	; 0
      000986 00                    2699 	.db #0x00	; 0
      000987 00                    2700 	.db #0x00	; 0
      000988                       2701 _sprite_explosion_4:
      000988 00                    2702 	.db #0x00	; 0
      000989 00                    2703 	.db #0x00	; 0
      00098A 01                    2704 	.db #0x01	; 1
      00098B 10                    2705 	.db #0x10	; 16
      00098C 00                    2706 	.db #0x00	; 0
      00098D 00                    2707 	.db #0x00	; 0
      00098E 00                    2708 	.db #0x00	; 0
      00098F 20                    2709 	.db #0x20	; 32
      000990 00                    2710 	.db #0x00	; 0
      000991 00                    2711 	.db #0x00	; 0
      000992 00                    2712 	.db #0x00	; 0
      000993 10                    2713 	.db #0x10	; 16
      000994 01                    2714 	.db #0x01	; 1
      000995 00                    2715 	.db #0x00	; 0
      000996 00                    2716 	.db #0x00	; 0
      000997 00                    2717 	.db #0x00	; 0
      000998 00                    2718 	.db #0x00	; 0
      000999 00                    2719 	.db #0x00	; 0
      00099A 00                    2720 	.db #0x00	; 0
      00099B 10                    2721 	.db #0x10	; 16
      00099C 00                    2722 	.db #0x00	; 0
      00099D 00                    2723 	.db #0x00	; 0
      00099E 00                    2724 	.db #0x00	; 0
      00099F 08                    2725 	.db #0x08	; 8
      0009A0 00                    2726 	.db #0x00	; 0
      0009A1 00                    2727 	.db #0x00	; 0
      0009A2 00                    2728 	.db #0x00	; 0
      0009A3 10                    2729 	.db #0x10	; 16
      0009A4 00                    2730 	.db #0x00	; 0
      0009A5 00                    2731 	.db #0x00	; 0
      0009A6 00                    2732 	.db #0x00	; 0
      0009A7 00                    2733 	.db #0x00	; 0
      0009A8                       2734 _sprite_explosion_5:
      0009A8 01                    2735 	.db #0x01	; 1
      0009A9 00                    2736 	.db #0x00	; 0
      0009AA 20                    2737 	.db #0x20	; 32
      0009AB 00                    2738 	.db #0x00	; 0
      0009AC 00                    2739 	.db #0x00	; 0
      0009AD 00                    2740 	.db #0x00	; 0
      0009AE 00                    2741 	.db #0x00	; 0
      0009AF 80                    2742 	.db #0x80	; 128
      0009B0 00                    2743 	.db #0x00	; 0
      0009B1 00                    2744 	.db #0x00	; 0
      0009B2 00                    2745 	.db #0x00	; 0
      0009B3 00                    2746 	.db #0x00	; 0
      0009B4 20                    2747 	.db #0x20	; 32
      0009B5 00                    2748 	.db #0x00	; 0
      0009B6 01                    2749 	.db #0x01	; 1
      0009B7 00                    2750 	.db #0x00	; 0
      0009B8 00                    2751 	.db #0x00	; 0
      0009B9 00                    2752 	.db #0x00	; 0
      0009BA 08                    2753 	.db #0x08	; 8
      0009BB 00                    2754 	.db #0x00	; 0
      0009BC 00                    2755 	.db #0x00	; 0
      0009BD 00                    2756 	.db #0x00	; 0
      0009BE 00                    2757 	.db #0x00	; 0
      0009BF 02                    2758 	.db #0x02	; 2
      0009C0 00                    2759 	.db #0x00	; 0
      0009C1 00                    2760 	.db #0x00	; 0
      0009C2 00                    2761 	.db #0x00	; 0
      0009C3 00                    2762 	.db #0x00	; 0
      0009C4 08                    2763 	.db #0x08	; 8
      0009C5 00                    2764 	.db #0x00	; 0
      0009C6 00                    2765 	.db #0x00	; 0
      0009C7 00                    2766 	.db #0x00	; 0
      0009C8                       2767 _sprite_explosion_6:
      0009C8 00                    2768 	.db #0x00	; 0
      0009C9 01                    2769 	.db #0x01	; 1
      0009CA 00                    2770 	.db #0x00	; 0
      0009CB 20                    2771 	.db #0x20	; 32
      0009CC 00                    2772 	.db #0x00	; 0
      0009CD 00                    2773 	.db #0x00	; 0
      0009CE 00                    2774 	.db #0x00	; 0
      0009CF 00                    2775 	.db #0x00	; 0
      0009D0 80                    2776 	.db #0x80	; 128
      0009D1 00                    2777 	.db #0x00	; 0
      0009D2 00                    2778 	.db #0x00	; 0
      0009D3 00                    2779 	.db #0x00	; 0
      0009D4 00                    2780 	.db #0x00	; 0
      0009D5 20                    2781 	.db #0x20	; 32
      0009D6 00                    2782 	.db #0x00	; 0
      0009D7 01                    2783 	.db #0x01	; 1
      0009D8 00                    2784 	.db #0x00	; 0
      0009D9 00                    2785 	.db #0x00	; 0
      0009DA 00                    2786 	.db #0x00	; 0
      0009DB 08                    2787 	.db #0x08	; 8
      0009DC 00                    2788 	.db #0x00	; 0
      0009DD 00                    2789 	.db #0x00	; 0
      0009DE 00                    2790 	.db #0x00	; 0
      0009DF 00                    2791 	.db #0x00	; 0
      0009E0 02                    2792 	.db #0x02	; 2
      0009E1 00                    2793 	.db #0x00	; 0
      0009E2 00                    2794 	.db #0x00	; 0
      0009E3 00                    2795 	.db #0x00	; 0
      0009E4 00                    2796 	.db #0x00	; 0
      0009E5 08                    2797 	.db #0x08	; 8
      0009E6 00                    2798 	.db #0x00	; 0
      0009E7 00                    2799 	.db #0x00	; 0
      0009E8                       2800 _sprite_explosion_7:
      0009E8 00                    2801 	.db #0x00	; 0
      0009E9 00                    2802 	.db #0x00	; 0
      0009EA 01                    2803 	.db #0x01	; 1
      0009EB 00                    2804 	.db #0x00	; 0
      0009EC 20                    2805 	.db #0x20	; 32
      0009ED 00                    2806 	.db #0x00	; 0
      0009EE 00                    2807 	.db #0x00	; 0
      0009EF 00                    2808 	.db #0x00	; 0
      0009F0 00                    2809 	.db #0x00	; 0
      0009F1 80                    2810 	.db #0x80	; 128
      0009F2 00                    2811 	.db #0x00	; 0
      0009F3 00                    2812 	.db #0x00	; 0
      0009F4 00                    2813 	.db #0x00	; 0
      0009F5 00                    2814 	.db #0x00	; 0
      0009F6 20                    2815 	.db #0x20	; 32
      0009F7 00                    2816 	.db #0x00	; 0
      0009F8 00                    2817 	.db #0x00	; 0
      0009F9 00                    2818 	.db #0x00	; 0
      0009FA 00                    2819 	.db #0x00	; 0
      0009FB 00                    2820 	.db #0x00	; 0
      0009FC 08                    2821 	.db #0x08	; 8
      0009FD 00                    2822 	.db #0x00	; 0
      0009FE 00                    2823 	.db #0x00	; 0
      0009FF 00                    2824 	.db #0x00	; 0
      000A00 00                    2825 	.db #0x00	; 0
      000A01 02                    2826 	.db #0x02	; 2
      000A02 00                    2827 	.db #0x00	; 0
      000A03 00                    2828 	.db #0x00	; 0
      000A04 00                    2829 	.db #0x00	; 0
      000A05 00                    2830 	.db #0x00	; 0
      000A06 08                    2831 	.db #0x08	; 8
      000A07 00                    2832 	.db #0x00	; 0
      000A08                       2833 _sprite_block_small_0:
      000A08 5A                    2834 	.db #0x5a	; 90	'Z'
      000A09 24                    2835 	.db #0x24	; 36
      000A0A 80                    2836 	.db #0x80	; 128
      000A0B 10                    2837 	.db #0x10	; 16
      000A0C 80                    2838 	.db #0x80	; 128
      000A0D 20                    2839 	.db #0x20	; 32
      000A0E 00                    2840 	.db #0x00	; 0
      000A0F 00                    2841 	.db #0x00	; 0
      000A10 00                    2842 	.db #0x00	; 0
      000A11 00                    2843 	.db #0x00	; 0
      000A12 00                    2844 	.db #0x00	; 0
      000A13 00                    2845 	.db #0x00	; 0
      000A14 00                    2846 	.db #0x00	; 0
      000A15 00                    2847 	.db #0x00	; 0
      000A16 00                    2848 	.db #0x00	; 0
      000A17 00                    2849 	.db #0x00	; 0
      000A18 00                    2850 	.db #0x00	; 0
      000A19 00                    2851 	.db #0x00	; 0
      000A1A 00                    2852 	.db #0x00	; 0
      000A1B 00                    2853 	.db #0x00	; 0
      000A1C 00                    2854 	.db #0x00	; 0
      000A1D 00                    2855 	.db #0x00	; 0
      000A1E 00                    2856 	.db #0x00	; 0
      000A1F 00                    2857 	.db #0x00	; 0
      000A20 00                    2858 	.db #0x00	; 0
      000A21 00                    2859 	.db #0x00	; 0
      000A22 00                    2860 	.db #0x00	; 0
      000A23 00                    2861 	.db #0x00	; 0
      000A24 00                    2862 	.db #0x00	; 0
      000A25 00                    2863 	.db #0x00	; 0
      000A26 00                    2864 	.db #0x00	; 0
      000A27 00                    2865 	.db #0x00	; 0
      000A28                       2866 _sprite_block_small_1:
      000A28 FF                    2867 	.db #0xff	; 255
      000A29 FF                    2868 	.db #0xff	; 255
      000A2A FF                    2869 	.db #0xff	; 255
      000A2B FF                    2870 	.db #0xff	; 255
      000A2C FF                    2871 	.db #0xff	; 255
      000A2D FF                    2872 	.db #0xff	; 255
      000A2E FF                    2873 	.db #0xff	; 255
      000A2F 7E                    2874 	.db #0x7e	; 126
      000A30 00                    2875 	.db #0x00	; 0
      000A31 00                    2876 	.db #0x00	; 0
      000A32 00                    2877 	.db #0x00	; 0
      000A33 00                    2878 	.db #0x00	; 0
      000A34 00                    2879 	.db #0x00	; 0
      000A35 00                    2880 	.db #0x00	; 0
      000A36 00                    2881 	.db #0x00	; 0
      000A37 00                    2882 	.db #0x00	; 0
      000A38 00                    2883 	.db #0x00	; 0
      000A39 00                    2884 	.db #0x00	; 0
      000A3A 00                    2885 	.db #0x00	; 0
      000A3B 00                    2886 	.db #0x00	; 0
      000A3C 00                    2887 	.db #0x00	; 0
      000A3D 00                    2888 	.db #0x00	; 0
      000A3E 00                    2889 	.db #0x00	; 0
      000A3F 00                    2890 	.db #0x00	; 0
      000A40 00                    2891 	.db #0x00	; 0
      000A41 00                    2892 	.db #0x00	; 0
      000A42 00                    2893 	.db #0x00	; 0
      000A43 00                    2894 	.db #0x00	; 0
      000A44 00                    2895 	.db #0x00	; 0
      000A45 00                    2896 	.db #0x00	; 0
      000A46 00                    2897 	.db #0x00	; 0
      000A47 00                    2898 	.db #0x00	; 0
      000A48                       2899 _sprite_number_3_32x32:
      000A48 00                    2900 	.db #0x00	; 0
      000A49 01                    2901 	.db #0x01	; 1
      000A4A 02                    2902 	.db #0x02	; 2
      000A4B 04                    2903 	.db #0x04	; 4
      000A4C 08                    2904 	.db #0x08	; 8
      000A4D 08                    2905 	.db #0x08	; 8
      000A4E 08                    2906 	.db #0x08	; 8
      000A4F 08                    2907 	.db #0x08	; 8
      000A50 0F                    2908 	.db #0x0f	; 15
      000A51 00                    2909 	.db #0x00	; 0
      000A52 00                    2910 	.db #0x00	; 0
      000A53 00                    2911 	.db #0x00	; 0
      000A54 00                    2912 	.db #0x00	; 0
      000A55 00                    2913 	.db #0x00	; 0
      000A56 00                    2914 	.db #0x00	; 0
      000A57 00                    2915 	.db #0x00	; 0
      000A58 FF                    2916 	.db #0xff	; 255
      000A59 00                    2917 	.db #0x00	; 0
      000A5A 00                    2918 	.db #0x00	; 0
      000A5B 00                    2919 	.db #0x00	; 0
      000A5C 00                    2920 	.db #0x00	; 0
      000A5D 00                    2921 	.db #0x00	; 0
      000A5E 1F                    2922 	.db #0x1f	; 31
      000A5F 20                    2923 	.db #0x20	; 32
      000A60 C0                    2924 	.db #0xc0	; 192
      000A61 00                    2925 	.db #0x00	; 0
      000A62 00                    2926 	.db #0x00	; 0
      000A63 00                    2927 	.db #0x00	; 0
      000A64 00                    2928 	.db #0x00	; 0
      000A65 3F                    2929 	.db #0x3f	; 63
      000A66 20                    2930 	.db #0x20	; 32
      000A67 20                    2931 	.db #0x20	; 32
      000A68 FF                    2932 	.db #0xff	; 255
      000A69 00                    2933 	.db #0x00	; 0
      000A6A 00                    2934 	.db #0x00	; 0
      000A6B 00                    2935 	.db #0x00	; 0
      000A6C 00                    2936 	.db #0x00	; 0
      000A6D 00                    2937 	.db #0x00	; 0
      000A6E F0                    2938 	.db #0xf0	; 240
      000A6F 08                    2939 	.db #0x08	; 8
      000A70 04                    2940 	.db #0x04	; 4
      000A71 04                    2941 	.db #0x04	; 4
      000A72 04                    2942 	.db #0x04	; 4
      000A73 04                    2943 	.db #0x04	; 4
      000A74 08                    2944 	.db #0x08	; 8
      000A75 F0                    2945 	.db #0xf0	; 240
      000A76 00                    2946 	.db #0x00	; 0
      000A77 00                    2947 	.db #0x00	; 0
      000A78 00                    2948 	.db #0x00	; 0
      000A79 80                    2949 	.db #0x80	; 128
      000A7A 40                    2950 	.db #0x40	; 64
      000A7B 20                    2951 	.db #0x20	; 32
      000A7C 10                    2952 	.db #0x10	; 16
      000A7D 10                    2953 	.db #0x10	; 16
      000A7E 10                    2954 	.db #0x10	; 16
      000A7F 10                    2955 	.db #0x10	; 16
      000A80 10                    2956 	.db #0x10	; 16
      000A81 10                    2957 	.db #0x10	; 16
      000A82 10                    2958 	.db #0x10	; 16
      000A83 10                    2959 	.db #0x10	; 16
      000A84 10                    2960 	.db #0x10	; 16
      000A85 20                    2961 	.db #0x20	; 32
      000A86 40                    2962 	.db #0x40	; 64
      000A87 80                    2963 	.db #0x80	; 128
      000A88 00                    2964 	.db #0x00	; 0
      000A89 00                    2965 	.db #0x00	; 0
      000A8A 00                    2966 	.db #0x00	; 0
      000A8B 00                    2967 	.db #0x00	; 0
      000A8C 00                    2968 	.db #0x00	; 0
      000A8D 00                    2969 	.db #0x00	; 0
      000A8E 00                    2970 	.db #0x00	; 0
      000A8F 0F                    2971 	.db #0x0f	; 15
      000A90 08                    2972 	.db #0x08	; 8
      000A91 08                    2973 	.db #0x08	; 8
      000A92 08                    2974 	.db #0x08	; 8
      000A93 08                    2975 	.db #0x08	; 8
      000A94 04                    2976 	.db #0x04	; 4
      000A95 02                    2977 	.db #0x02	; 2
      000A96 01                    2978 	.db #0x01	; 1
      000A97 00                    2979 	.db #0x00	; 0
      000A98 20                    2980 	.db #0x20	; 32
      000A99 20                    2981 	.db #0x20	; 32
      000A9A 3F                    2982 	.db #0x3f	; 63
      000A9B 00                    2983 	.db #0x00	; 0
      000A9C 00                    2984 	.db #0x00	; 0
      000A9D 00                    2985 	.db #0x00	; 0
      000A9E 00                    2986 	.db #0x00	; 0
      000A9F C0                    2987 	.db #0xc0	; 192
      000AA0 20                    2988 	.db #0x20	; 32
      000AA1 1F                    2989 	.db #0x1f	; 31
      000AA2 00                    2990 	.db #0x00	; 0
      000AA3 00                    2991 	.db #0x00	; 0
      000AA4 00                    2992 	.db #0x00	; 0
      000AA5 00                    2993 	.db #0x00	; 0
      000AA6 00                    2994 	.db #0x00	; 0
      000AA7 FF                    2995 	.db #0xff	; 255
      000AA8 00                    2996 	.db #0x00	; 0
      000AA9 00                    2997 	.db #0x00	; 0
      000AAA F0                    2998 	.db #0xf0	; 240
      000AAB 08                    2999 	.db #0x08	; 8
      000AAC 04                    3000 	.db #0x04	; 4
      000AAD 04                    3001 	.db #0x04	; 4
      000AAE 04                    3002 	.db #0x04	; 4
      000AAF 04                    3003 	.db #0x04	; 4
      000AB0 08                    3004 	.db #0x08	; 8
      000AB1 F0                    3005 	.db #0xf0	; 240
      000AB2 00                    3006 	.db #0x00	; 0
      000AB3 00                    3007 	.db #0x00	; 0
      000AB4 00                    3008 	.db #0x00	; 0
      000AB5 00                    3009 	.db #0x00	; 0
      000AB6 00                    3010 	.db #0x00	; 0
      000AB7 FF                    3011 	.db #0xff	; 255
      000AB8 80                    3012 	.db #0x80	; 128
      000AB9 40                    3013 	.db #0x40	; 64
      000ABA 20                    3014 	.db #0x20	; 32
      000ABB 10                    3015 	.db #0x10	; 16
      000ABC 10                    3016 	.db #0x10	; 16
      000ABD 10                    3017 	.db #0x10	; 16
      000ABE 10                    3018 	.db #0x10	; 16
      000ABF 10                    3019 	.db #0x10	; 16
      000AC0 10                    3020 	.db #0x10	; 16
      000AC1 10                    3021 	.db #0x10	; 16
      000AC2 10                    3022 	.db #0x10	; 16
      000AC3 10                    3023 	.db #0x10	; 16
      000AC4 20                    3024 	.db #0x20	; 32
      000AC5 40                    3025 	.db #0x40	; 64
      000AC6 80                    3026 	.db #0x80	; 128
      000AC7 00                    3027 	.db #0x00	; 0
      000AC8                       3028 _sprite_number_2_32x32:
      000AC8 00                    3029 	.db #0x00	; 0
      000AC9 01                    3030 	.db #0x01	; 1
      000ACA 02                    3031 	.db #0x02	; 2
      000ACB 04                    3032 	.db #0x04	; 4
      000ACC 08                    3033 	.db #0x08	; 8
      000ACD 08                    3034 	.db #0x08	; 8
      000ACE 08                    3035 	.db #0x08	; 8
      000ACF 08                    3036 	.db #0x08	; 8
      000AD0 0F                    3037 	.db #0x0f	; 15
      000AD1 00                    3038 	.db #0x00	; 0
      000AD2 00                    3039 	.db #0x00	; 0
      000AD3 00                    3040 	.db #0x00	; 0
      000AD4 00                    3041 	.db #0x00	; 0
      000AD5 00                    3042 	.db #0x00	; 0
      000AD6 00                    3043 	.db #0x00	; 0
      000AD7 00                    3044 	.db #0x00	; 0
      000AD8 FF                    3045 	.db #0xff	; 255
      000AD9 00                    3046 	.db #0x00	; 0
      000ADA 00                    3047 	.db #0x00	; 0
      000ADB 00                    3048 	.db #0x00	; 0
      000ADC 00                    3049 	.db #0x00	; 0
      000ADD 00                    3050 	.db #0x00	; 0
      000ADE 1F                    3051 	.db #0x1f	; 31
      000ADF 20                    3052 	.db #0x20	; 32
      000AE0 C0                    3053 	.db #0xc0	; 192
      000AE1 00                    3054 	.db #0x00	; 0
      000AE2 00                    3055 	.db #0x00	; 0
      000AE3 00                    3056 	.db #0x00	; 0
      000AE4 00                    3057 	.db #0x00	; 0
      000AE5 3F                    3058 	.db #0x3f	; 63
      000AE6 40                    3059 	.db #0x40	; 64
      000AE7 80                    3060 	.db #0x80	; 128
      000AE8 FF                    3061 	.db #0xff	; 255
      000AE9 00                    3062 	.db #0x00	; 0
      000AEA 00                    3063 	.db #0x00	; 0
      000AEB 00                    3064 	.db #0x00	; 0
      000AEC 00                    3065 	.db #0x00	; 0
      000AED 00                    3066 	.db #0x00	; 0
      000AEE F0                    3067 	.db #0xf0	; 240
      000AEF 08                    3068 	.db #0x08	; 8
      000AF0 04                    3069 	.db #0x04	; 4
      000AF1 04                    3070 	.db #0x04	; 4
      000AF2 04                    3071 	.db #0x04	; 4
      000AF3 04                    3072 	.db #0x04	; 4
      000AF4 08                    3073 	.db #0x08	; 8
      000AF5 F0                    3074 	.db #0xf0	; 240
      000AF6 00                    3075 	.db #0x00	; 0
      000AF7 00                    3076 	.db #0x00	; 0
      000AF8 00                    3077 	.db #0x00	; 0
      000AF9 80                    3078 	.db #0x80	; 128
      000AFA 40                    3079 	.db #0x40	; 64
      000AFB 20                    3080 	.db #0x20	; 32
      000AFC 10                    3081 	.db #0x10	; 16
      000AFD 10                    3082 	.db #0x10	; 16
      000AFE 10                    3083 	.db #0x10	; 16
      000AFF 10                    3084 	.db #0x10	; 16
      000B00 10                    3085 	.db #0x10	; 16
      000B01 10                    3086 	.db #0x10	; 16
      000B02 10                    3087 	.db #0x10	; 16
      000B03 10                    3088 	.db #0x10	; 16
      000B04 10                    3089 	.db #0x10	; 16
      000B05 10                    3090 	.db #0x10	; 16
      000B06 20                    3091 	.db #0x20	; 32
      000B07 40                    3092 	.db #0x40	; 64
      000B08 01                    3093 	.db #0x01	; 1
      000B09 02                    3094 	.db #0x02	; 2
      000B0A 04                    3095 	.db #0x04	; 4
      000B0B 08                    3096 	.db #0x08	; 8
      000B0C 08                    3097 	.db #0x08	; 8
      000B0D 08                    3098 	.db #0x08	; 8
      000B0E 08                    3099 	.db #0x08	; 8
      000B0F 08                    3100 	.db #0x08	; 8
      000B10 08                    3101 	.db #0x08	; 8
      000B11 08                    3102 	.db #0x08	; 8
      000B12 08                    3103 	.db #0x08	; 8
      000B13 08                    3104 	.db #0x08	; 8
      000B14 08                    3105 	.db #0x08	; 8
      000B15 08                    3106 	.db #0x08	; 8
      000B16 08                    3107 	.db #0x08	; 8
      000B17 0F                    3108 	.db #0x0f	; 15
      000B18 00                    3109 	.db #0x00	; 0
      000B19 00                    3110 	.db #0x00	; 0
      000B1A 07                    3111 	.db #0x07	; 7
      000B1B 08                    3112 	.db #0x08	; 8
      000B1C 10                    3113 	.db #0x10	; 16
      000B1D 20                    3114 	.db #0x20	; 32
      000B1E 20                    3115 	.db #0x20	; 32
      000B1F 20                    3116 	.db #0x20	; 32
      000B20 20                    3117 	.db #0x20	; 32
      000B21 3F                    3118 	.db #0x3f	; 63
      000B22 00                    3119 	.db #0x00	; 0
      000B23 00                    3120 	.db #0x00	; 0
      000B24 00                    3121 	.db #0x00	; 0
      000B25 00                    3122 	.db #0x00	; 0
      000B26 00                    3123 	.db #0x00	; 0
      000B27 FF                    3124 	.db #0xff	; 255
      000B28 00                    3125 	.db #0x00	; 0
      000B29 01                    3126 	.db #0x01	; 1
      000B2A FE                    3127 	.db #0xfe	; 254
      000B2B 00                    3128 	.db #0x00	; 0
      000B2C 00                    3129 	.db #0x00	; 0
      000B2D 00                    3130 	.db #0x00	; 0
      000B2E 00                    3131 	.db #0x00	; 0
      000B2F 07                    3132 	.db #0x07	; 7
      000B30 08                    3133 	.db #0x08	; 8
      000B31 F0                    3134 	.db #0xf0	; 240
      000B32 00                    3135 	.db #0x00	; 0
      000B33 00                    3136 	.db #0x00	; 0
      000B34 00                    3137 	.db #0x00	; 0
      000B35 00                    3138 	.db #0x00	; 0
      000B36 00                    3139 	.db #0x00	; 0
      000B37 FF                    3140 	.db #0xff	; 255
      000B38 80                    3141 	.db #0x80	; 128
      000B39 00                    3142 	.db #0x00	; 0
      000B3A 00                    3143 	.db #0x00	; 0
      000B3B 00                    3144 	.db #0x00	; 0
      000B3C 00                    3145 	.db #0x00	; 0
      000B3D 00                    3146 	.db #0x00	; 0
      000B3E 00                    3147 	.db #0x00	; 0
      000B3F F0                    3148 	.db #0xf0	; 240
      000B40 10                    3149 	.db #0x10	; 16
      000B41 10                    3150 	.db #0x10	; 16
      000B42 10                    3151 	.db #0x10	; 16
      000B43 10                    3152 	.db #0x10	; 16
      000B44 10                    3153 	.db #0x10	; 16
      000B45 10                    3154 	.db #0x10	; 16
      000B46 10                    3155 	.db #0x10	; 16
      000B47 F0                    3156 	.db #0xf0	; 240
      000B48                       3157 _sprite_number_1_32x32:
      000B48 00                    3158 	.db #0x00	; 0
      000B49 00                    3159 	.db #0x00	; 0
      000B4A 00                    3160 	.db #0x00	; 0
      000B4B 00                    3161 	.db #0x00	; 0
      000B4C 00                    3162 	.db #0x00	; 0
      000B4D 00                    3163 	.db #0x00	; 0
      000B4E 01                    3164 	.db #0x01	; 1
      000B4F 01                    3165 	.db #0x01	; 1
      000B50 01                    3166 	.db #0x01	; 1
      000B51 01                    3167 	.db #0x01	; 1
      000B52 00                    3168 	.db #0x00	; 0
      000B53 00                    3169 	.db #0x00	; 0
      000B54 00                    3170 	.db #0x00	; 0
      000B55 00                    3171 	.db #0x00	; 0
      000B56 00                    3172 	.db #0x00	; 0
      000B57 00                    3173 	.db #0x00	; 0
      000B58 07                    3174 	.db #0x07	; 7
      000B59 08                    3175 	.db #0x08	; 8
      000B5A 10                    3176 	.db #0x10	; 16
      000B5B 20                    3177 	.db #0x20	; 32
      000B5C 40                    3178 	.db #0x40	; 64
      000B5D 80                    3179 	.db #0x80	; 128
      000B5E 00                    3180 	.db #0x00	; 0
      000B5F 00                    3181 	.db #0x00	; 0
      000B60 00                    3182 	.db #0x00	; 0
      000B61 F8                    3183 	.db #0xf8	; 248
      000B62 08                    3184 	.db #0x08	; 8
      000B63 08                    3185 	.db #0x08	; 8
      000B64 08                    3186 	.db #0x08	; 8
      000B65 08                    3187 	.db #0x08	; 8
      000B66 08                    3188 	.db #0x08	; 8
      000B67 08                    3189 	.db #0x08	; 8
      000B68 F0                    3190 	.db #0xf0	; 240
      000B69 10                    3191 	.db #0x10	; 16
      000B6A 10                    3192 	.db #0x10	; 16
      000B6B 10                    3193 	.db #0x10	; 16
      000B6C 10                    3194 	.db #0x10	; 16
      000B6D 10                    3195 	.db #0x10	; 16
      000B6E 10                    3196 	.db #0x10	; 16
      000B6F 10                    3197 	.db #0x10	; 16
      000B70 10                    3198 	.db #0x10	; 16
      000B71 10                    3199 	.db #0x10	; 16
      000B72 10                    3200 	.db #0x10	; 16
      000B73 10                    3201 	.db #0x10	; 16
      000B74 10                    3202 	.db #0x10	; 16
      000B75 10                    3203 	.db #0x10	; 16
      000B76 10                    3204 	.db #0x10	; 16
      000B77 10                    3205 	.db #0x10	; 16
      000B78 00                    3206 	.db #0x00	; 0
      000B79 00                    3207 	.db #0x00	; 0
      000B7A 00                    3208 	.db #0x00	; 0
      000B7B 00                    3209 	.db #0x00	; 0
      000B7C 00                    3210 	.db #0x00	; 0
      000B7D 00                    3211 	.db #0x00	; 0
      000B7E 00                    3212 	.db #0x00	; 0
      000B7F 00                    3213 	.db #0x00	; 0
      000B80 00                    3214 	.db #0x00	; 0
      000B81 00                    3215 	.db #0x00	; 0
      000B82 00                    3216 	.db #0x00	; 0
      000B83 00                    3217 	.db #0x00	; 0
      000B84 00                    3218 	.db #0x00	; 0
      000B85 00                    3219 	.db #0x00	; 0
      000B86 00                    3220 	.db #0x00	; 0
      000B87 00                    3221 	.db #0x00	; 0
      000B88 00                    3222 	.db #0x00	; 0
      000B89 00                    3223 	.db #0x00	; 0
      000B8A 00                    3224 	.db #0x00	; 0
      000B8B 00                    3225 	.db #0x00	; 0
      000B8C 00                    3226 	.db #0x00	; 0
      000B8D 00                    3227 	.db #0x00	; 0
      000B8E 00                    3228 	.db #0x00	; 0
      000B8F 00                    3229 	.db #0x00	; 0
      000B90 00                    3230 	.db #0x00	; 0
      000B91 00                    3231 	.db #0x00	; 0
      000B92 00                    3232 	.db #0x00	; 0
      000B93 00                    3233 	.db #0x00	; 0
      000B94 00                    3234 	.db #0x00	; 0
      000B95 00                    3235 	.db #0x00	; 0
      000B96 00                    3236 	.db #0x00	; 0
      000B97 00                    3237 	.db #0x00	; 0
      000B98 08                    3238 	.db #0x08	; 8
      000B99 08                    3239 	.db #0x08	; 8
      000B9A 08                    3240 	.db #0x08	; 8
      000B9B 08                    3241 	.db #0x08	; 8
      000B9C 08                    3242 	.db #0x08	; 8
      000B9D 08                    3243 	.db #0x08	; 8
      000B9E 08                    3244 	.db #0x08	; 8
      000B9F 08                    3245 	.db #0x08	; 8
      000BA0 08                    3246 	.db #0x08	; 8
      000BA1 F8                    3247 	.db #0xf8	; 248
      000BA2 80                    3248 	.db #0x80	; 128
      000BA3 80                    3249 	.db #0x80	; 128
      000BA4 80                    3250 	.db #0x80	; 128
      000BA5 80                    3251 	.db #0x80	; 128
      000BA6 80                    3252 	.db #0x80	; 128
      000BA7 FF                    3253 	.db #0xff	; 255
      000BA8 10                    3254 	.db #0x10	; 16
      000BA9 10                    3255 	.db #0x10	; 16
      000BAA 10                    3256 	.db #0x10	; 16
      000BAB 10                    3257 	.db #0x10	; 16
      000BAC 10                    3258 	.db #0x10	; 16
      000BAD 10                    3259 	.db #0x10	; 16
      000BAE 10                    3260 	.db #0x10	; 16
      000BAF 10                    3261 	.db #0x10	; 16
      000BB0 10                    3262 	.db #0x10	; 16
      000BB1 1F                    3263 	.db #0x1f	; 31
      000BB2 01                    3264 	.db #0x01	; 1
      000BB3 01                    3265 	.db #0x01	; 1
      000BB4 01                    3266 	.db #0x01	; 1
      000BB5 01                    3267 	.db #0x01	; 1
      000BB6 01                    3268 	.db #0x01	; 1
      000BB7 FF                    3269 	.db #0xff	; 255
      000BB8 00                    3270 	.db #0x00	; 0
      000BB9 00                    3271 	.db #0x00	; 0
      000BBA 00                    3272 	.db #0x00	; 0
      000BBB 00                    3273 	.db #0x00	; 0
      000BBC 00                    3274 	.db #0x00	; 0
      000BBD 00                    3275 	.db #0x00	; 0
      000BBE 00                    3276 	.db #0x00	; 0
      000BBF 00                    3277 	.db #0x00	; 0
      000BC0 00                    3278 	.db #0x00	; 0
      000BC1 00                    3279 	.db #0x00	; 0
      000BC2 00                    3280 	.db #0x00	; 0
      000BC3 00                    3281 	.db #0x00	; 0
      000BC4 00                    3282 	.db #0x00	; 0
      000BC5 00                    3283 	.db #0x00	; 0
      000BC6 00                    3284 	.db #0x00	; 0
      000BC7 00                    3285 	.db #0x00	; 0
      000BC8                       3286 _sprite_go_32x32:
      000BC8 00                    3287 	.db #0x00	; 0
      000BC9 00                    3288 	.db #0x00	; 0
      000BCA 00                    3289 	.db #0x00	; 0
      000BCB 00                    3290 	.db #0x00	; 0
      000BCC 00                    3291 	.db #0x00	; 0
      000BCD 00                    3292 	.db #0x00	; 0
      000BCE 00                    3293 	.db #0x00	; 0
      000BCF 3F                    3294 	.db #0x3f	; 63
      000BD0 40                    3295 	.db #0x40	; 64
      000BD1 80                    3296 	.db #0x80	; 128
      000BD2 87                    3297 	.db #0x87	; 135
      000BD3 88                    3298 	.db #0x88	; 136
      000BD4 88                    3299 	.db #0x88	; 136
      000BD5 88                    3300 	.db #0x88	; 136
      000BD6 88                    3301 	.db #0x88	; 136
      000BD7 88                    3302 	.db #0x88	; 136
      000BD8 00                    3303 	.db #0x00	; 0
      000BD9 00                    3304 	.db #0x00	; 0
      000BDA 00                    3305 	.db #0x00	; 0
      000BDB 00                    3306 	.db #0x00	; 0
      000BDC 00                    3307 	.db #0x00	; 0
      000BDD 00                    3308 	.db #0x00	; 0
      000BDE 00                    3309 	.db #0x00	; 0
      000BDF C1                    3310 	.db #0xc1	; 193
      000BE0 22                    3311 	.db #0x22	; 34
      000BE1 14                    3312 	.db #0x14	; 20
      000BE2 14                    3313 	.db #0x14	; 20
      000BE3 94                    3314 	.db #0x94	; 148
      000BE4 F4                    3315 	.db #0xf4	; 244
      000BE5 04                    3316 	.db #0x04	; 4
      000BE6 04                    3317 	.db #0x04	; 4
      000BE7 04                    3318 	.db #0x04	; 4
      000BE8 00                    3319 	.db #0x00	; 0
      000BE9 00                    3320 	.db #0x00	; 0
      000BEA 00                    3321 	.db #0x00	; 0
      000BEB 00                    3322 	.db #0x00	; 0
      000BEC 00                    3323 	.db #0x00	; 0
      000BED 00                    3324 	.db #0x00	; 0
      000BEE 00                    3325 	.db #0x00	; 0
      000BEF FE                    3326 	.db #0xfe	; 254
      000BF0 01                    3327 	.db #0x01	; 1
      000BF1 00                    3328 	.db #0x00	; 0
      000BF2 00                    3329 	.db #0x00	; 0
      000BF3 30                    3330 	.db #0x30	; 48	'0'
      000BF4 48                    3331 	.db #0x48	; 72	'H'
      000BF5 48                    3332 	.db #0x48	; 72	'H'
      000BF6 48                    3333 	.db #0x48	; 72	'H'
      000BF7 48                    3334 	.db #0x48	; 72	'H'
      000BF8 00                    3335 	.db #0x00	; 0
      000BF9 00                    3336 	.db #0x00	; 0
      000BFA 00                    3337 	.db #0x00	; 0
      000BFB 00                    3338 	.db #0x00	; 0
      000BFC 00                    3339 	.db #0x00	; 0
      000BFD 00                    3340 	.db #0x00	; 0
      000BFE 00                    3341 	.db #0x00	; 0
      000BFF 3F                    3342 	.db #0x3f	; 63
      000C00 21                    3343 	.db #0x21	; 33
      000C01 A1                    3344 	.db #0xa1	; 161
      000C02 A1                    3345 	.db #0xa1	; 161
      000C03 A1                    3346 	.db #0xa1	; 161
      000C04 A1                    3347 	.db #0xa1	; 161
      000C05 A1                    3348 	.db #0xa1	; 161
      000C06 A1                    3349 	.db #0xa1	; 161
      000C07 A1                    3350 	.db #0xa1	; 161
      000C08 8B                    3351 	.db #0x8b	; 139
      000C09 8A                    3352 	.db #0x8a	; 138
      000C0A 8A                    3353 	.db #0x8a	; 138
      000C0B 8B                    3354 	.db #0x8b	; 139
      000C0C 89                    3355 	.db #0x89	; 137
      000C0D 86                    3356 	.db #0x86	; 134
      000C0E 80                    3357 	.db #0x80	; 128
      000C0F 40                    3358 	.db #0x40	; 64
      000C10 3F                    3359 	.db #0x3f	; 63
      000C11 00                    3360 	.db #0x00	; 0
      000C12 00                    3361 	.db #0x00	; 0
      000C13 00                    3362 	.db #0x00	; 0
      000C14 00                    3363 	.db #0x00	; 0
      000C15 00                    3364 	.db #0x00	; 0
      000C16 00                    3365 	.db #0x00	; 0
      000C17 00                    3366 	.db #0x00	; 0
      000C18 F4                    3367 	.db #0xf4	; 244
      000C19 14                    3368 	.db #0x14	; 20
      000C1A 14                    3369 	.db #0x14	; 20
      000C1B 14                    3370 	.db #0x14	; 20
      000C1C 14                    3371 	.db #0x14	; 20
      000C1D 14                    3372 	.db #0x14	; 20
      000C1E 14                    3373 	.db #0x14	; 20
      000C1F 22                    3374 	.db #0x22	; 34
      000C20 C1                    3375 	.db #0xc1	; 193
      000C21 00                    3376 	.db #0x00	; 0
      000C22 00                    3377 	.db #0x00	; 0
      000C23 00                    3378 	.db #0x00	; 0
      000C24 00                    3379 	.db #0x00	; 0
      000C25 00                    3380 	.db #0x00	; 0
      000C26 00                    3381 	.db #0x00	; 0
      000C27 00                    3382 	.db #0x00	; 0
      000C28 48                    3383 	.db #0x48	; 72	'H'
      000C29 48                    3384 	.db #0x48	; 72	'H'
      000C2A 48                    3385 	.db #0x48	; 72	'H'
      000C2B 48                    3386 	.db #0x48	; 72	'H'
      000C2C 30                    3387 	.db #0x30	; 48	'0'
      000C2D 00                    3388 	.db #0x00	; 0
      000C2E 00                    3389 	.db #0x00	; 0
      000C2F 01                    3390 	.db #0x01	; 1
      000C30 FE                    3391 	.db #0xfe	; 254
      000C31 00                    3392 	.db #0x00	; 0
      000C32 00                    3393 	.db #0x00	; 0
      000C33 00                    3394 	.db #0x00	; 0
      000C34 00                    3395 	.db #0x00	; 0
      000C35 00                    3396 	.db #0x00	; 0
      000C36 00                    3397 	.db #0x00	; 0
      000C37 00                    3398 	.db #0x00	; 0
      000C38 A1                    3399 	.db #0xa1	; 161
      000C39 A1                    3400 	.db #0xa1	; 161
      000C3A A1                    3401 	.db #0xa1	; 161
      000C3B BF                    3402 	.db #0xbf	; 191
      000C3C 80                    3403 	.db #0x80	; 128
      000C3D BF                    3404 	.db #0xbf	; 191
      000C3E A1                    3405 	.db #0xa1	; 161
      000C3F 21                    3406 	.db #0x21	; 33
      000C40 3F                    3407 	.db #0x3f	; 63
      000C41 00                    3408 	.db #0x00	; 0
      000C42 00                    3409 	.db #0x00	; 0
      000C43 00                    3410 	.db #0x00	; 0
      000C44 00                    3411 	.db #0x00	; 0
      000C45 00                    3412 	.db #0x00	; 0
      000C46 00                    3413 	.db #0x00	; 0
      000C47 00                    3414 	.db #0x00	; 0
                                   3415 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3416 ;	---------------------------------
                                   3417 ; Function HideArrowSprite
                                   3418 ; ---------------------------------
      000C48                       3419 _HideArrowSprite::
                                   3420 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3421 	ld	a, #0xc0
      000C4A F5               [11] 3422 	push	af
      000C4B 33               [ 6] 3423 	inc	sp
      000C4C 21 00 1B         [10] 3424 	ld	hl, #0x1b00
      000C4F E5               [11] 3425 	push	hl
      000C50 CDr00r00         [17] 3426 	call	_WRTVRM
      000C53 F1               [10] 3427 	pop	af
      000C54 33               [ 6] 3428 	inc	sp
                                   3429 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3430 	ret
                                   3431 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3432 ;	---------------------------------
                                   3433 ; Function DrawHitSprite
                                   3434 ; ---------------------------------
      000C56                       3435 _DrawHitSprite::
      000C56 DD E5            [15] 3436 	push	ix
      000C58 DD 21 00 00      [14] 3437 	ld	ix,#0
      000C5C DD 39            [15] 3438 	add	ix,sp
      000C5E 21 EC FF         [10] 3439 	ld	hl, #-20
      000C61 39               [11] 3440 	add	hl, sp
      000C62 F9               [ 6] 3441 	ld	sp, hl
                                   3442 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3443 	ld	hl, #0
      000C66 39               [11] 3444 	add	hl, sp
      000C67 EB               [ 4] 3445 	ex	de, hl
      000C68 3E 0F            [ 7] 3446 	ld	a, #0x0f
      000C6A 12               [ 7] 3447 	ld	(de), a
      000C6B 6B               [ 4] 3448 	ld	l, e
      000C6C 62               [ 4] 3449 	ld	h, d
      000C6D 23               [ 6] 3450 	inc	hl
      000C6E 36 0E            [10] 3451 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3452 	ld	l, e
      000C71 62               [ 4] 3453 	ld	h, d
      000C72 23               [ 6] 3454 	inc	hl
      000C73 23               [ 6] 3455 	inc	hl
      000C74 36 09            [10] 3456 	ld	(hl), #0x09
      000C76 6B               [ 4] 3457 	ld	l, e
      000C77 62               [ 4] 3458 	ld	h, d
      000C78 23               [ 6] 3459 	inc	hl
      000C79 23               [ 6] 3460 	inc	hl
      000C7A 23               [ 6] 3461 	inc	hl
      000C7B 36 06            [10] 3462 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3463 	ld	hl, #0x0004
      000C80 19               [11] 3464 	add	hl, de
      000C81 36 06            [10] 3465 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3466 	ld	hl, #0x0005
      000C86 19               [11] 3467 	add	hl, de
      000C87 36 09            [10] 3468 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3469 	ld	hl, #0x0006
      000C8C 19               [11] 3470 	add	hl, de
      000C8D 36 0E            [10] 3471 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3472 	ld	hl, #0x0007
      000C92 19               [11] 3473 	add	hl, de
      000C93 36 0F            [10] 3474 	ld	(hl), #0x0f
                                   3475 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3476 	ld	hl, #8
      000C98 39               [11] 3477 	add	hl, sp
      000C99 4D               [ 4] 3478 	ld	c, l
      000C9A 44               [ 4] 3479 	ld	b, h
      000C9B 36 0F            [10] 3480 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3481 	ld	l, c
      000C9E 60               [ 4] 3482 	ld	h, b
      000C9F 23               [ 6] 3483 	inc	hl
      000CA0 36 0E            [10] 3484 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3485 	ld	l, c
      000CA3 60               [ 4] 3486 	ld	h, b
      000CA4 23               [ 6] 3487 	inc	hl
      000CA5 23               [ 6] 3488 	inc	hl
      000CA6 36 03            [10] 3489 	ld	(hl), #0x03
      000CA8 69               [ 4] 3490 	ld	l, c
      000CA9 60               [ 4] 3491 	ld	h, b
      000CAA 23               [ 6] 3492 	inc	hl
      000CAB 23               [ 6] 3493 	inc	hl
      000CAC 23               [ 6] 3494 	inc	hl
      000CAD 36 0C            [10] 3495 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3496 	ld	hl, #0x0004
      000CB2 09               [11] 3497 	add	hl, bc
      000CB3 36 0C            [10] 3498 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3499 	ld	hl, #0x0005
      000CB8 09               [11] 3500 	add	hl, bc
      000CB9 36 03            [10] 3501 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3502 	ld	hl, #0x0006
      000CBE 09               [11] 3503 	add	hl, bc
      000CBF 36 0E            [10] 3504 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3505 	ld	hl, #0x0007
      000CC4 09               [11] 3506 	add	hl, bc
      000CC5 36 0F            [10] 3507 	ld	(hl), #0x0f
                                   3508 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3509 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3510 	and	a, #0x07
                                   3511 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3512 	ld	l, a
      000CCD 83               [ 4] 3513 	add	a,e
      000CCE 5F               [ 4] 3514 	ld	e, a
      000CCF 30 01            [12] 3515 	jr	NC, 00124$
      000CD1 14               [ 4] 3516 	inc	d
      000CD2                       3517 00124$:
      000CD2 1A               [ 7] 3518 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3519 	ld	-4 (ix), a
                                   3520 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3521 	ld	h, #0x00
      000CD8 09               [11] 3522 	add	hl, bc
      000CD9 7E               [ 7] 3523 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3524 	ld	-3 (ix), a
                                   3525 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3526 	ld	a, #0x01
      000CDF DD 96 05         [19] 3527 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3528 	ld	a, #0x00
      000CE4 17               [ 4] 3529 	rla
      000CE5 DD 77 FE         [19] 3530 	ld	-2 (ix), a
                                   3531 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3532 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3533 	or	a, a
      000CEC CArB7r0D         [10] 3534 	jp	Z, 00104$
                                   3535 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3536 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3537 	ld	a, c
      000CF3 C6 F8            [ 7] 3538 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3539 	ld	-1 (ix), a
      000CF8 C5               [11] 3540 	push	bc
      000CF9 F5               [11] 3541 	push	af
      000CFA 33               [ 6] 3542 	inc	sp
      000CFB 21 05 1B         [10] 3543 	ld	hl, #0x1b05
      000CFE E5               [11] 3544 	push	hl
      000CFF CDr00r00         [17] 3545 	call	_WRTVRM
      000D02 F1               [10] 3546 	pop	af
      000D03 33               [ 6] 3547 	inc	sp
      000D04 C1               [10] 3548 	pop	bc
                                   3549 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3550 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3551 	add	a, #0xfd
      000D0A 87               [ 4] 3552 	add	a, a
      000D0B 87               [ 4] 3553 	add	a, a
      000D0C C6 18            [ 7] 3554 	add	a, #0x18
      000D0E C5               [11] 3555 	push	bc
      000D0F F5               [11] 3556 	push	af
      000D10 33               [ 6] 3557 	inc	sp
      000D11 21 06 1B         [10] 3558 	ld	hl, #0x1b06
      000D14 E5               [11] 3559 	push	hl
      000D15 CDr00r00         [17] 3560 	call	_WRTVRM
      000D18 F1               [10] 3561 	pop	af
      000D19 33               [ 6] 3562 	inc	sp
      000D1A C1               [10] 3563 	pop	bc
                                   3564 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3565 	ld	a, c
      000D1C C6 08            [ 7] 3566 	add	a, #0x08
      000D1E 47               [ 4] 3567 	ld	b, a
      000D1F C5               [11] 3568 	push	bc
      000D20 C5               [11] 3569 	push	bc
      000D21 33               [ 6] 3570 	inc	sp
      000D22 21 09 1B         [10] 3571 	ld	hl, #0x1b09
      000D25 E5               [11] 3572 	push	hl
      000D26 CDr00r00         [17] 3573 	call	_WRTVRM
      000D29 F1               [10] 3574 	pop	af
      000D2A 33               [ 6] 3575 	inc	sp
      000D2B 3E 04            [ 7] 3576 	ld	a, #0x04
      000D2D F5               [11] 3577 	push	af
      000D2E 33               [ 6] 3578 	inc	sp
      000D2F 21 0A 1B         [10] 3579 	ld	hl, #0x1b0a
      000D32 E5               [11] 3580 	push	hl
      000D33 CDr00r00         [17] 3581 	call	_WRTVRM
      000D36 F1               [10] 3582 	pop	af
      000D37 33               [ 6] 3583 	inc	sp
      000D38 C1               [10] 3584 	pop	bc
                                   3585 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3586 	ld	a, c
      000D3A C6 18            [ 7] 3587 	add	a, #0x18
      000D3C 4F               [ 4] 3588 	ld	c, a
      000D3D C5               [11] 3589 	push	bc
      000D3E 79               [ 4] 3590 	ld	a, c
      000D3F F5               [11] 3591 	push	af
      000D40 33               [ 6] 3592 	inc	sp
      000D41 21 0D 1B         [10] 3593 	ld	hl, #0x1b0d
      000D44 E5               [11] 3594 	push	hl
      000D45 CDr00r00         [17] 3595 	call	_WRTVRM
      000D48 F1               [10] 3596 	pop	af
      000D49 33               [ 6] 3597 	inc	sp
      000D4A 3E 08            [ 7] 3598 	ld	a, #0x08
      000D4C F5               [11] 3599 	push	af
      000D4D 33               [ 6] 3600 	inc	sp
      000D4E 21 0E 1B         [10] 3601 	ld	hl, #0x1b0e
      000D51 E5               [11] 3602 	push	hl
      000D52 CDr00r00         [17] 3603 	call	_WRTVRM
      000D55 F1               [10] 3604 	pop	af
      000D56 33               [ 6] 3605 	inc	sp
      000D57 C1               [10] 3606 	pop	bc
                                   3607 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3608 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3609 	or	a, a
      000D5C 28 59            [12] 3610 	jr	Z, 00104$
                                   3611 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3612 	push	bc
      000D5F DD 7E FF         [19] 3613 	ld	a, -1 (ix)
      000D62 F5               [11] 3614 	push	af
      000D63 33               [ 6] 3615 	inc	sp
      000D64 21 11 1B         [10] 3616 	ld	hl, #0x1b11
      000D67 E5               [11] 3617 	push	hl
      000D68 CDr00r00         [17] 3618 	call	_WRTVRM
      000D6B F1               [10] 3619 	pop	af
      000D6C 33               [ 6] 3620 	inc	sp
      000D6D C1               [10] 3621 	pop	bc
                                   3622 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3623 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3624 	dec	a
      000D72 3D               [ 4] 3625 	dec	a
      000D73 87               [ 4] 3626 	add	a, a
      000D74 87               [ 4] 3627 	add	a, a
      000D75 C6 14            [ 7] 3628 	add	a, #0x14
      000D77 C5               [11] 3629 	push	bc
      000D78 F5               [11] 3630 	push	af
      000D79 33               [ 6] 3631 	inc	sp
      000D7A 21 12 1B         [10] 3632 	ld	hl, #0x1b12
      000D7D E5               [11] 3633 	push	hl
      000D7E CDr00r00         [17] 3634 	call	_WRTVRM
      000D81 F1               [10] 3635 	pop	af
      000D82 33               [ 6] 3636 	inc	sp
      000D83 C1               [10] 3637 	pop	bc
                                   3638 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3639 	push	bc
      000D85 C5               [11] 3640 	push	bc
      000D86 33               [ 6] 3641 	inc	sp
      000D87 21 15 1B         [10] 3642 	ld	hl, #0x1b15
      000D8A E5               [11] 3643 	push	hl
      000D8B CDr00r00         [17] 3644 	call	_WRTVRM
      000D8E F1               [10] 3645 	pop	af
      000D8F 33               [ 6] 3646 	inc	sp
      000D90 3E 0C            [ 7] 3647 	ld	a, #0x0c
      000D92 F5               [11] 3648 	push	af
      000D93 33               [ 6] 3649 	inc	sp
      000D94 21 16 1B         [10] 3650 	ld	hl, #0x1b16
      000D97 E5               [11] 3651 	push	hl
      000D98 CDr00r00         [17] 3652 	call	_WRTVRM
      000D9B F1               [10] 3653 	pop	af
      000D9C 33               [ 6] 3654 	inc	sp
      000D9D C1               [10] 3655 	pop	bc
                                   3656 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3657 	ld	a, c
      000D9F F5               [11] 3658 	push	af
      000DA0 33               [ 6] 3659 	inc	sp
      000DA1 21 19 1B         [10] 3660 	ld	hl, #0x1b19
      000DA4 E5               [11] 3661 	push	hl
      000DA5 CDr00r00         [17] 3662 	call	_WRTVRM
      000DA8 F1               [10] 3663 	pop	af
      000DA9 33               [ 6] 3664 	inc	sp
                                   3665 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3666 	ld	a, #0x10
      000DAC F5               [11] 3667 	push	af
      000DAD 33               [ 6] 3668 	inc	sp
      000DAE 21 1A 1B         [10] 3669 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3670 	push	hl
      000DB2 CDr00r00         [17] 3671 	call	_WRTVRM
      000DB5 F1               [10] 3672 	pop	af
      000DB6 33               [ 6] 3673 	inc	sp
      000DB7                       3674 00104$:
                                   3675 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3676 	ld	a, 7 (ix)
      000DBA F5               [11] 3677 	push	af
      000DBB 33               [ 6] 3678 	inc	sp
      000DBC 21 04 1B         [10] 3679 	ld	hl, #0x1b04
      000DBF E5               [11] 3680 	push	hl
      000DC0 CDr00r00         [17] 3681 	call	_WRTVRM
      000DC3 F1               [10] 3682 	pop	af
      000DC4 33               [ 6] 3683 	inc	sp
                                   3684 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3685 	ld	a, -4 (ix)
      000DC8 F5               [11] 3686 	push	af
      000DC9 33               [ 6] 3687 	inc	sp
      000DCA 21 07 1B         [10] 3688 	ld	hl, #0x1b07
      000DCD E5               [11] 3689 	push	hl
      000DCE CDr00r00         [17] 3690 	call	_WRTVRM
      000DD1 F1               [10] 3691 	pop	af
      000DD2 33               [ 6] 3692 	inc	sp
                                   3693 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3694 	ld	a, 7 (ix)
      000DD6 F5               [11] 3695 	push	af
      000DD7 33               [ 6] 3696 	inc	sp
      000DD8 21 08 1B         [10] 3697 	ld	hl, #0x1b08
      000DDB E5               [11] 3698 	push	hl
      000DDC CDr00r00         [17] 3699 	call	_WRTVRM
      000DDF F1               [10] 3700 	pop	af
      000DE0 33               [ 6] 3701 	inc	sp
                                   3702 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3703 	ld	a, -4 (ix)
      000DE4 F5               [11] 3704 	push	af
      000DE5 33               [ 6] 3705 	inc	sp
      000DE6 21 0B 1B         [10] 3706 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3707 	push	hl
      000DEA CDr00r00         [17] 3708 	call	_WRTVRM
      000DED F1               [10] 3709 	pop	af
      000DEE 33               [ 6] 3710 	inc	sp
                                   3711 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3712 	ld	a, 7 (ix)
      000DF2 F5               [11] 3713 	push	af
      000DF3 33               [ 6] 3714 	inc	sp
      000DF4 21 0C 1B         [10] 3715 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3716 	push	hl
      000DF8 CDr00r00         [17] 3717 	call	_WRTVRM
      000DFB F1               [10] 3718 	pop	af
      000DFC 33               [ 6] 3719 	inc	sp
                                   3720 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3721 	ld	a, -4 (ix)
      000E00 F5               [11] 3722 	push	af
      000E01 33               [ 6] 3723 	inc	sp
      000E02 21 0F 1B         [10] 3724 	ld	hl, #0x1b0f
      000E05 E5               [11] 3725 	push	hl
      000E06 CDr00r00         [17] 3726 	call	_WRTVRM
      000E09 F1               [10] 3727 	pop	af
      000E0A 33               [ 6] 3728 	inc	sp
                                   3729 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3730 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3731 	or	a, a
      000E0F 28 52            [12] 3732 	jr	Z, 00107$
                                   3733 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3734 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3735 	add	a, #0x10
      000E16 47               [ 4] 3736 	ld	b, a
      000E17 C5               [11] 3737 	push	bc
      000E18 C5               [11] 3738 	push	bc
      000E19 33               [ 6] 3739 	inc	sp
      000E1A 21 10 1B         [10] 3740 	ld	hl, #0x1b10
      000E1D E5               [11] 3741 	push	hl
      000E1E CDr00r00         [17] 3742 	call	_WRTVRM
      000E21 F1               [10] 3743 	pop	af
      000E22 33               [ 6] 3744 	inc	sp
      000E23 DD 7E FD         [19] 3745 	ld	a, -3 (ix)
      000E26 F5               [11] 3746 	push	af
      000E27 33               [ 6] 3747 	inc	sp
      000E28 21 13 1B         [10] 3748 	ld	hl, #0x1b13
      000E2B E5               [11] 3749 	push	hl
      000E2C CDr00r00         [17] 3750 	call	_WRTVRM
      000E2F F1               [10] 3751 	pop	af
      000E30 33               [ 6] 3752 	inc	sp
      000E31 C1               [10] 3753 	pop	bc
                                   3754 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3755 	push	bc
      000E33 C5               [11] 3756 	push	bc
      000E34 33               [ 6] 3757 	inc	sp
      000E35 21 14 1B         [10] 3758 	ld	hl, #0x1b14
      000E38 E5               [11] 3759 	push	hl
      000E39 CDr00r00         [17] 3760 	call	_WRTVRM
      000E3C F1               [10] 3761 	pop	af
      000E3D 33               [ 6] 3762 	inc	sp
      000E3E DD 7E FD         [19] 3763 	ld	a, -3 (ix)
      000E41 F5               [11] 3764 	push	af
      000E42 33               [ 6] 3765 	inc	sp
      000E43 21 17 1B         [10] 3766 	ld	hl, #0x1b17
      000E46 E5               [11] 3767 	push	hl
      000E47 CDr00r00         [17] 3768 	call	_WRTVRM
      000E4A F1               [10] 3769 	pop	af
      000E4B 33               [ 6] 3770 	inc	sp
      000E4C 33               [ 6] 3771 	inc	sp
      000E4D 21 18 1B         [10] 3772 	ld	hl, #0x1b18
      000E50 E5               [11] 3773 	push	hl
      000E51 CDr00r00         [17] 3774 	call	_WRTVRM
      000E54 F1               [10] 3775 	pop	af
      000E55 33               [ 6] 3776 	inc	sp
                                   3777 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3778 	ld	a, -3 (ix)
      000E59 F5               [11] 3779 	push	af
      000E5A 33               [ 6] 3780 	inc	sp
      000E5B 21 1B 1B         [10] 3781 	ld	hl, #0x1b1b
      000E5E E5               [11] 3782 	push	hl
      000E5F CDr00r00         [17] 3783 	call	_WRTVRM
      000E62 F1               [10] 3784 	pop	af
      000E63                       3785 00107$:
                                   3786 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3787 	ld	sp, ix
      000E65 DD E1            [14] 3788 	pop	ix
      000E67 C9               [10] 3789 	ret
                                   3790 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3791 ;	---------------------------------
                                   3792 ; Function HideHitSprite
                                   3793 ; ---------------------------------
      000E68                       3794 _HideHitSprite::
                                   3795 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3796 	ld	a, #0xc0
      000E6A F5               [11] 3797 	push	af
      000E6B 33               [ 6] 3798 	inc	sp
      000E6C 21 04 1B         [10] 3799 	ld	hl, #0x1b04
      000E6F E5               [11] 3800 	push	hl
      000E70 CDr00r00         [17] 3801 	call	_WRTVRM
      000E73 F1               [10] 3802 	pop	af
      000E74 33               [ 6] 3803 	inc	sp
                                   3804 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3805 	ld	a, #0xc0
      000E77 F5               [11] 3806 	push	af
      000E78 33               [ 6] 3807 	inc	sp
      000E79 21 08 1B         [10] 3808 	ld	hl, #0x1b08
      000E7C E5               [11] 3809 	push	hl
      000E7D CDr00r00         [17] 3810 	call	_WRTVRM
      000E80 F1               [10] 3811 	pop	af
      000E81 33               [ 6] 3812 	inc	sp
                                   3813 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3814 	ld	a, #0xc0
      000E84 F5               [11] 3815 	push	af
      000E85 33               [ 6] 3816 	inc	sp
      000E86 21 0C 1B         [10] 3817 	ld	hl, #0x1b0c
      000E89 E5               [11] 3818 	push	hl
      000E8A CDr00r00         [17] 3819 	call	_WRTVRM
      000E8D F1               [10] 3820 	pop	af
      000E8E 33               [ 6] 3821 	inc	sp
                                   3822 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3823 	ld	a, #0xc0
      000E91 F5               [11] 3824 	push	af
      000E92 33               [ 6] 3825 	inc	sp
      000E93 21 10 1B         [10] 3826 	ld	hl, #0x1b10
      000E96 E5               [11] 3827 	push	hl
      000E97 CDr00r00         [17] 3828 	call	_WRTVRM
      000E9A F1               [10] 3829 	pop	af
      000E9B 33               [ 6] 3830 	inc	sp
                                   3831 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3832 	ld	a, #0xc0
      000E9E F5               [11] 3833 	push	af
      000E9F 33               [ 6] 3834 	inc	sp
      000EA0 21 14 1B         [10] 3835 	ld	hl, #0x1b14
      000EA3 E5               [11] 3836 	push	hl
      000EA4 CDr00r00         [17] 3837 	call	_WRTVRM
      000EA7 F1               [10] 3838 	pop	af
      000EA8 33               [ 6] 3839 	inc	sp
                                   3840 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3841 	ld	a, #0xc0
      000EAB F5               [11] 3842 	push	af
      000EAC 33               [ 6] 3843 	inc	sp
      000EAD 21 18 1B         [10] 3844 	ld	hl, #0x1b18
      000EB0 E5               [11] 3845 	push	hl
      000EB1 CDr00r00         [17] 3846 	call	_WRTVRM
      000EB4 F1               [10] 3847 	pop	af
      000EB5 33               [ 6] 3848 	inc	sp
                                   3849 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3850 	ret
                                   3851 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3852 ;	---------------------------------
                                   3853 ; Function HideExplosionSprite
                                   3854 ; ---------------------------------
      000EB7                       3855 _HideExplosionSprite::
                                   3856 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3857 	ld	a, #0xc0
      000EB9 F5               [11] 3858 	push	af
      000EBA 33               [ 6] 3859 	inc	sp
      000EBB 21 1C 1B         [10] 3860 	ld	hl, #0x1b1c
      000EBE E5               [11] 3861 	push	hl
      000EBF CDr00r00         [17] 3862 	call	_WRTVRM
      000EC2 F1               [10] 3863 	pop	af
      000EC3 33               [ 6] 3864 	inc	sp
                                   3865 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3866 	ld	a, #0xc0
      000EC6 F5               [11] 3867 	push	af
      000EC7 33               [ 6] 3868 	inc	sp
      000EC8 21 20 1B         [10] 3869 	ld	hl, #0x1b20
      000ECB E5               [11] 3870 	push	hl
      000ECC CDr00r00         [17] 3871 	call	_WRTVRM
      000ECF F1               [10] 3872 	pop	af
      000ED0 33               [ 6] 3873 	inc	sp
                                   3874 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3875 	ld	a, #0xc0
      000ED3 F5               [11] 3876 	push	af
      000ED4 33               [ 6] 3877 	inc	sp
      000ED5 21 24 1B         [10] 3878 	ld	hl, #0x1b24
      000ED8 E5               [11] 3879 	push	hl
      000ED9 CDr00r00         [17] 3880 	call	_WRTVRM
      000EDC F1               [10] 3881 	pop	af
      000EDD 33               [ 6] 3882 	inc	sp
                                   3883 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3884 	ret
                                   3885 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3886 ;	---------------------------------
                                   3887 ; Function DrawExplosionSprite
                                   3888 ; ---------------------------------
      000EDF                       3889 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3890 	dec	sp
                                   3891 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3892 	ld	iy, #5
      000EE4 FD 39            [15] 3893 	add	iy, sp
      000EE6 FD 6E 00         [19] 3894 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3895 	srl	l
      000EEB CB 3D            [ 8] 3896 	srl	l
                                   3897 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3898 	ld	a, #0x07
      000EEF 95               [ 4] 3899 	sub	a, l
      000EF0 30 07            [12] 3900 	jr	NC, 00102$
                                   3901 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3902 	inc	sp
      000EF3 C3rB7r0E         [10] 3903 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3904 	jp	00104$
      000EF9                       3905 00102$:
                                   3906 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3907 	add	hl, hl
      000EFA 29               [11] 3908 	add	hl, hl
                                   3909 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3910 	ld	iy, #4
      000EFF FD 39            [15] 3911 	add	iy, sp
      000F01 FD 7E 00         [19] 3912 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3913 	add	a, #0xf0
      000F06 67               [ 4] 3914 	ld	h, a
      000F07 E5               [11] 3915 	push	hl
      000F08 E5               [11] 3916 	push	hl
      000F09 33               [ 6] 3917 	inc	sp
      000F0A 11 1C 1B         [10] 3918 	ld	de, #0x1b1c
      000F0D D5               [11] 3919 	push	de
      000F0E CDr00r00         [17] 3920 	call	_WRTVRM
      000F11 F1               [10] 3921 	pop	af
      000F12 33               [ 6] 3922 	inc	sp
      000F13 21 05 00         [10] 3923 	ld	hl, #5
      000F16 39               [11] 3924 	add	hl, sp
      000F17 7E               [ 7] 3925 	ld	a, (hl)
      000F18 F5               [11] 3926 	push	af
      000F19 33               [ 6] 3927 	inc	sp
      000F1A 11 1D 1B         [10] 3928 	ld	de, #0x1b1d
      000F1D D5               [11] 3929 	push	de
      000F1E CDr00r00         [17] 3930 	call	_WRTVRM
      000F21 F1               [10] 3931 	pop	af
      000F22 33               [ 6] 3932 	inc	sp
      000F23 E1               [10] 3933 	pop	hl
                                   3934 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3935 	ld	a, l
      000F25 C6 2C            [ 7] 3936 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3937 	ld	iy, #0
      000F2B FD 39            [15] 3938 	add	iy, sp
      000F2D FD 77 00         [19] 3939 	ld	0 (iy), a
      000F30 E5               [11] 3940 	push	hl
      000F31 F5               [11] 3941 	push	af
      000F32 33               [ 6] 3942 	inc	sp
      000F33 11 1E 1B         [10] 3943 	ld	de, #0x1b1e
      000F36 D5               [11] 3944 	push	de
      000F37 CDr00r00         [17] 3945 	call	_WRTVRM
      000F3A F1               [10] 3946 	pop	af
      000F3B 33               [ 6] 3947 	inc	sp
      000F3C 3E 0F            [ 7] 3948 	ld	a, #0x0f
      000F3E F5               [11] 3949 	push	af
      000F3F 33               [ 6] 3950 	inc	sp
      000F40 11 1F 1B         [10] 3951 	ld	de, #0x1b1f
      000F43 D5               [11] 3952 	push	de
      000F44 CDr00r00         [17] 3953 	call	_WRTVRM
      000F47 F1               [10] 3954 	pop	af
      000F48 33               [ 6] 3955 	inc	sp
      000F49 E1               [10] 3956 	pop	hl
                                   3957 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3958 	push	hl
      000F4B E5               [11] 3959 	push	hl
      000F4C 33               [ 6] 3960 	inc	sp
      000F4D 11 20 1B         [10] 3961 	ld	de, #0x1b20
      000F50 D5               [11] 3962 	push	de
      000F51 CDr00r00         [17] 3963 	call	_WRTVRM
      000F54 F1               [10] 3964 	pop	af
      000F55 33               [ 6] 3965 	inc	sp
      000F56 E1               [10] 3966 	pop	hl
                                   3967 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3968 	ld	iy, #3
      000F5B FD 39            [15] 3969 	add	iy, sp
      000F5D FD 6E 00         [19] 3970 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3971 	ld	a, l
      000F61 C6 10            [ 7] 3972 	add	a, #0x10
      000F63 E5               [11] 3973 	push	hl
      000F64 F5               [11] 3974 	push	af
      000F65 33               [ 6] 3975 	inc	sp
      000F66 11 21 1B         [10] 3976 	ld	de, #0x1b21
      000F69 D5               [11] 3977 	push	de
      000F6A CDr00r00         [17] 3978 	call	_WRTVRM
      000F6D F1               [10] 3979 	pop	af
      000F6E 33               [ 6] 3980 	inc	sp
      000F6F 21 02 00         [10] 3981 	ld	hl, #2
      000F72 39               [11] 3982 	add	hl, sp
      000F73 7E               [ 7] 3983 	ld	a, (hl)
      000F74 F5               [11] 3984 	push	af
      000F75 33               [ 6] 3985 	inc	sp
      000F76 11 22 1B         [10] 3986 	ld	de, #0x1b22
      000F79 D5               [11] 3987 	push	de
      000F7A CDr00r00         [17] 3988 	call	_WRTVRM
      000F7D F1               [10] 3989 	pop	af
      000F7E 33               [ 6] 3990 	inc	sp
      000F7F 3E 0A            [ 7] 3991 	ld	a, #0x0a
      000F81 F5               [11] 3992 	push	af
      000F82 33               [ 6] 3993 	inc	sp
      000F83 11 23 1B         [10] 3994 	ld	de, #0x1b23
      000F86 D5               [11] 3995 	push	de
      000F87 CDr00r00         [17] 3996 	call	_WRTVRM
      000F8A F1               [10] 3997 	pop	af
      000F8B 33               [ 6] 3998 	inc	sp
      000F8C E1               [10] 3999 	pop	hl
                                   4000 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 4001 	push	hl
      000F8E E5               [11] 4002 	push	hl
      000F8F 33               [ 6] 4003 	inc	sp
      000F90 11 24 1B         [10] 4004 	ld	de, #0x1b24
      000F93 D5               [11] 4005 	push	de
      000F94 CDr00r00         [17] 4006 	call	_WRTVRM
      000F97 F1               [10] 4007 	pop	af
      000F98 33               [ 6] 4008 	inc	sp
      000F99 E1               [10] 4009 	pop	hl
                                   4010 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4011 	ld	a, l
      000F9B C6 20            [ 7] 4012 	add	a, #0x20
      000F9D F5               [11] 4013 	push	af
      000F9E 33               [ 6] 4014 	inc	sp
      000F9F 21 25 1B         [10] 4015 	ld	hl, #0x1b25
      000FA2 E5               [11] 4016 	push	hl
      000FA3 CDr00r00         [17] 4017 	call	_WRTVRM
      000FA6 F1               [10] 4018 	pop	af
      000FA7 33               [ 6] 4019 	inc	sp
                                   4020 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4021 	ld	hl, #0
      000FAB 39               [11] 4022 	add	hl, sp
      000FAC 7E               [ 7] 4023 	ld	a, (hl)
      000FAD F5               [11] 4024 	push	af
      000FAE 33               [ 6] 4025 	inc	sp
      000FAF 21 26 1B         [10] 4026 	ld	hl, #0x1b26
      000FB2 E5               [11] 4027 	push	hl
      000FB3 CDr00r00         [17] 4028 	call	_WRTVRM
      000FB6 F1               [10] 4029 	pop	af
      000FB7 33               [ 6] 4030 	inc	sp
                                   4031 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4032 	ld	a, #0x03
      000FBA F5               [11] 4033 	push	af
      000FBB 33               [ 6] 4034 	inc	sp
      000FBC 21 27 1B         [10] 4035 	ld	hl, #0x1b27
      000FBF E5               [11] 4036 	push	hl
      000FC0 CDr00r00         [17] 4037 	call	_WRTVRM
      000FC3 F1               [10] 4038 	pop	af
      000FC4 33               [ 6] 4039 	inc	sp
      000FC5                       4040 00104$:
                                   4041 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4042 	inc	sp
      000FC6 C9               [10] 4043 	ret
                                   4044 ;src\/Graphics\Countdown.h:12: void AnimateSprites(byte x, byte y, byte pattern) {
                                   4045 ;	---------------------------------
                                   4046 ; Function AnimateSprites
                                   4047 ; ---------------------------------
      000FC7                       4048 _AnimateSprites::
      000FC7 DD E5            [15] 4049 	push	ix
      000FC9 DD 21 00 00      [14] 4050 	ld	ix,#0
      000FCD DD 39            [15] 4051 	add	ix,sp
      000FCF 3B               [ 6] 4052 	dec	sp
                                   4053 ;src\/Graphics\Countdown.h:14: WRTVRM(SPRATT, 	    y); //96-16);
      000FD0 DD 7E 05         [19] 4054 	ld	a, 5 (ix)
      000FD3 F5               [11] 4055 	push	af
      000FD4 33               [ 6] 4056 	inc	sp
      000FD5 21 00 1B         [10] 4057 	ld	hl, #0x1b00
      000FD8 E5               [11] 4058 	push	hl
      000FD9 CDr00r00         [17] 4059 	call	_WRTVRM
      000FDC F1               [10] 4060 	pop	af
      000FDD 33               [ 6] 4061 	inc	sp
                                   4062 ;src\/Graphics\Countdown.h:15: WRTVRM(SPRATT + 1, 	256-x-16); //128-16);
      000FDE DD 4E 04         [19] 4063 	ld	c, 4 (ix)
      000FE1 3E F0            [ 7] 4064 	ld	a, #0xf0
      000FE3 91               [ 4] 4065 	sub	a, c
      000FE4 DD 77 FF         [19] 4066 	ld	-1 (ix), a
      000FE7 F5               [11] 4067 	push	af
      000FE8 33               [ 6] 4068 	inc	sp
      000FE9 21 01 1B         [10] 4069 	ld	hl, #0x1b01
      000FEC E5               [11] 4070 	push	hl
      000FED CDr00r00         [17] 4071 	call	_WRTVRM
      000FF0 F1               [10] 4072 	pop	af
      000FF1 33               [ 6] 4073 	inc	sp
                                   4074 ;src\/Graphics\Countdown.h:16: WRTVRM(SPRATT + 2, 	pattern);
      000FF2 DD 7E 06         [19] 4075 	ld	a, 6 (ix)
      000FF5 F5               [11] 4076 	push	af
      000FF6 33               [ 6] 4077 	inc	sp
      000FF7 21 02 1B         [10] 4078 	ld	hl, #0x1b02
      000FFA E5               [11] 4079 	push	hl
      000FFB CDr00r00         [17] 4080 	call	_WRTVRM
      000FFE F1               [10] 4081 	pop	af
      000FFF 33               [ 6] 4082 	inc	sp
                                   4083 ;src\/Graphics\Countdown.h:17: WRTVRM(SPRATT + 3, 	10);
      001000 3E 0A            [ 7] 4084 	ld	a, #0x0a
      001002 F5               [11] 4085 	push	af
      001003 33               [ 6] 4086 	inc	sp
      001004 21 03 1B         [10] 4087 	ld	hl, #0x1b03
      001007 E5               [11] 4088 	push	hl
      001008 CDr00r00         [17] 4089 	call	_WRTVRM
      00100B F1               [10] 4090 	pop	af
      00100C 33               [ 6] 4091 	inc	sp
                                   4092 ;src\/Graphics\Countdown.h:20: WRTVRM(SPRATT + 4, 	y); //96-16);
      00100D DD 7E 05         [19] 4093 	ld	a, 5 (ix)
      001010 F5               [11] 4094 	push	af
      001011 33               [ 6] 4095 	inc	sp
      001012 21 04 1B         [10] 4096 	ld	hl, #0x1b04
      001015 E5               [11] 4097 	push	hl
      001016 CDr00r00         [17] 4098 	call	_WRTVRM
      001019 F1               [10] 4099 	pop	af
      00101A 33               [ 6] 4100 	inc	sp
                                   4101 ;src\/Graphics\Countdown.h:21: WRTVRM(SPRATT + 5, 	x);
      00101B DD 7E 04         [19] 4102 	ld	a, 4 (ix)
      00101E F5               [11] 4103 	push	af
      00101F 33               [ 6] 4104 	inc	sp
      001020 21 05 1B         [10] 4105 	ld	hl, #0x1b05
      001023 E5               [11] 4106 	push	hl
      001024 CDr00r00         [17] 4107 	call	_WRTVRM
      001027 F1               [10] 4108 	pop	af
      001028 33               [ 6] 4109 	inc	sp
                                   4110 ;src\/Graphics\Countdown.h:22: WRTVRM(SPRATT + 6,  pattern + 4);
      001029 DD 4E 06         [19] 4111 	ld	c, 6 (ix)
      00102C 79               [ 4] 4112 	ld	a, c
      00102D 3C               [ 4] 4113 	inc	a
      00102E 3C               [ 4] 4114 	inc	a
      00102F 3C               [ 4] 4115 	inc	a
      001030 3C               [ 4] 4116 	inc	a
      001031 C5               [11] 4117 	push	bc
      001032 F5               [11] 4118 	push	af
      001033 33               [ 6] 4119 	inc	sp
      001034 21 06 1B         [10] 4120 	ld	hl, #0x1b06
      001037 E5               [11] 4121 	push	hl
      001038 CDr00r00         [17] 4122 	call	_WRTVRM
      00103B F1               [10] 4123 	pop	af
      00103C 33               [ 6] 4124 	inc	sp
      00103D 3E 0A            [ 7] 4125 	ld	a, #0x0a
      00103F F5               [11] 4126 	push	af
      001040 33               [ 6] 4127 	inc	sp
      001041 21 07 1B         [10] 4128 	ld	hl, #0x1b07
      001044 E5               [11] 4129 	push	hl
      001045 CDr00r00         [17] 4130 	call	_WRTVRM
      001048 F1               [10] 4131 	pop	af
      001049 33               [ 6] 4132 	inc	sp
      00104A C1               [10] 4133 	pop	bc
                                   4134 ;src\/Graphics\Countdown.h:26: WRTVRM(SPRATT + 8, 	192-y-16); //96);
      00104B DD 46 05         [19] 4135 	ld	b, 5 (ix)
      00104E 3E B0            [ 7] 4136 	ld	a, #0xb0
      001050 90               [ 4] 4137 	sub	a, b
      001051 47               [ 4] 4138 	ld	b, a
      001052 C5               [11] 4139 	push	bc
      001053 C5               [11] 4140 	push	bc
      001054 33               [ 6] 4141 	inc	sp
      001055 21 08 1B         [10] 4142 	ld	hl, #0x1b08
      001058 E5               [11] 4143 	push	hl
      001059 CDr00r00         [17] 4144 	call	_WRTVRM
      00105C F1               [10] 4145 	pop	af
      00105D 33               [ 6] 4146 	inc	sp
      00105E DD 7E FF         [19] 4147 	ld	a, -1 (ix)
      001061 F5               [11] 4148 	push	af
      001062 33               [ 6] 4149 	inc	sp
      001063 21 09 1B         [10] 4150 	ld	hl, #0x1b09
      001066 E5               [11] 4151 	push	hl
      001067 CDr00r00         [17] 4152 	call	_WRTVRM
      00106A F1               [10] 4153 	pop	af
      00106B 33               [ 6] 4154 	inc	sp
      00106C C1               [10] 4155 	pop	bc
                                   4156 ;src\/Graphics\Countdown.h:28: WRTVRM(SPRATT + 10,	pattern + 8);
      00106D 79               [ 4] 4157 	ld	a, c
      00106E C6 08            [ 7] 4158 	add	a, #0x08
      001070 C5               [11] 4159 	push	bc
      001071 F5               [11] 4160 	push	af
      001072 33               [ 6] 4161 	inc	sp
      001073 21 0A 1B         [10] 4162 	ld	hl, #0x1b0a
      001076 E5               [11] 4163 	push	hl
      001077 CDr00r00         [17] 4164 	call	_WRTVRM
      00107A F1               [10] 4165 	pop	af
      00107B 33               [ 6] 4166 	inc	sp
      00107C 3E 0A            [ 7] 4167 	ld	a, #0x0a
      00107E F5               [11] 4168 	push	af
      00107F 33               [ 6] 4169 	inc	sp
      001080 21 0B 1B         [10] 4170 	ld	hl, #0x1b0b
      001083 E5               [11] 4171 	push	hl
      001084 CDr00r00         [17] 4172 	call	_WRTVRM
      001087 F1               [10] 4173 	pop	af
      001088 33               [ 6] 4174 	inc	sp
      001089 C1               [10] 4175 	pop	bc
                                   4176 ;src\/Graphics\Countdown.h:32: WRTVRM(SPRATT + 12,	192-y-16); //96);
      00108A C5               [11] 4177 	push	bc
      00108B C5               [11] 4178 	push	bc
      00108C 33               [ 6] 4179 	inc	sp
      00108D 21 0C 1B         [10] 4180 	ld	hl, #0x1b0c
      001090 E5               [11] 4181 	push	hl
      001091 CDr00r00         [17] 4182 	call	_WRTVRM
      001094 F1               [10] 4183 	pop	af
      001095 33               [ 6] 4184 	inc	sp
      001096 DD 7E 04         [19] 4185 	ld	a, 4 (ix)
      001099 F5               [11] 4186 	push	af
      00109A 33               [ 6] 4187 	inc	sp
      00109B 21 0D 1B         [10] 4188 	ld	hl, #0x1b0d
      00109E E5               [11] 4189 	push	hl
      00109F CDr00r00         [17] 4190 	call	_WRTVRM
      0010A2 F1               [10] 4191 	pop	af
      0010A3 33               [ 6] 4192 	inc	sp
      0010A4 C1               [10] 4193 	pop	bc
                                   4194 ;src\/Graphics\Countdown.h:34: WRTVRM(SPRATT + 14,	pattern + 12);
      0010A5 79               [ 4] 4195 	ld	a, c
      0010A6 C6 0C            [ 7] 4196 	add	a, #0x0c
      0010A8 F5               [11] 4197 	push	af
      0010A9 33               [ 6] 4198 	inc	sp
      0010AA 21 0E 1B         [10] 4199 	ld	hl, #0x1b0e
      0010AD E5               [11] 4200 	push	hl
      0010AE CDr00r00         [17] 4201 	call	_WRTVRM
      0010B1 F1               [10] 4202 	pop	af
      0010B2 33               [ 6] 4203 	inc	sp
                                   4204 ;src\/Graphics\Countdown.h:35: WRTVRM(SPRATT + 15,	10);
      0010B3 3E 0A            [ 7] 4205 	ld	a, #0x0a
      0010B5 F5               [11] 4206 	push	af
      0010B6 33               [ 6] 4207 	inc	sp
      0010B7 21 0F 1B         [10] 4208 	ld	hl, #0x1b0f
      0010BA E5               [11] 4209 	push	hl
      0010BB CDr00r00         [17] 4210 	call	_WRTVRM
      0010BE F1               [10] 4211 	pop	af
      0010BF 33               [ 6] 4212 	inc	sp
                                   4213 ;src\/Graphics\Countdown.h:36: }
      0010C0 33               [ 6] 4214 	inc	sp
      0010C1 DD E1            [14] 4215 	pop	ix
      0010C3 C9               [10] 4216 	ret
      0010C4                       4217 _colors:
      0010C4 0F                    4218 	.db #0x0f	; 15
      0010C5 0E                    4219 	.db #0x0e	; 14
      0010C6 05                    4220 	.db #0x05	; 5
      0010C7 04                    4221 	.db #0x04	; 4
      0010C8 04                    4222 	.db #0x04	; 4
      0010C9 05                    4223 	.db #0x05	; 5
      0010CA 0E                    4224 	.db #0x0e	; 14
      0010CB 0F                    4225 	.db #0x0f	; 15
                                   4226 ;src\/Graphics\Countdown.h:38: void BlinkNumber(byte colorIndex) {
                                   4227 ;	---------------------------------
                                   4228 ; Function BlinkNumber
                                   4229 ; ---------------------------------
      0010CC                       4230 _BlinkNumber::
                                   4231 ;src\/Graphics\Countdown.h:41: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      0010CC 3ErC4            [ 7] 4232 	ld	a, #<(_colors)
      0010CE 21 02 00         [10] 4233 	ld	hl, #2
      0010D1 39               [11] 4234 	add	hl, sp
      0010D2 86               [ 7] 4235 	add	a, (hl)
      0010D3 4F               [ 4] 4236 	ld	c, a
      0010D4 3Es10            [ 7] 4237 	ld	a, #>(_colors)
      0010D6 CE 00            [ 7] 4238 	adc	a, #0x00
      0010D8 47               [ 4] 4239 	ld	b, a
      0010D9 0A               [ 7] 4240 	ld	a, (bc)
      0010DA C5               [11] 4241 	push	bc
      0010DB F5               [11] 4242 	push	af
      0010DC 33               [ 6] 4243 	inc	sp
      0010DD 21 03 1B         [10] 4244 	ld	hl, #0x1b03
      0010E0 E5               [11] 4245 	push	hl
      0010E1 CDr00r00         [17] 4246 	call	_WRTVRM
      0010E4 F1               [10] 4247 	pop	af
      0010E5 33               [ 6] 4248 	inc	sp
      0010E6 C1               [10] 4249 	pop	bc
                                   4250 ;src\/Graphics\Countdown.h:42: WRTVRM(SPRATT + 7, 	colors[colorIndex]);
      0010E7 0A               [ 7] 4251 	ld	a, (bc)
      0010E8 C5               [11] 4252 	push	bc
      0010E9 F5               [11] 4253 	push	af
      0010EA 33               [ 6] 4254 	inc	sp
      0010EB 21 07 1B         [10] 4255 	ld	hl, #0x1b07
      0010EE E5               [11] 4256 	push	hl
      0010EF CDr00r00         [17] 4257 	call	_WRTVRM
      0010F2 F1               [10] 4258 	pop	af
      0010F3 33               [ 6] 4259 	inc	sp
      0010F4 C1               [10] 4260 	pop	bc
                                   4261 ;src\/Graphics\Countdown.h:43: WRTVRM(SPRATT + 11,	colors[colorIndex]);
      0010F5 0A               [ 7] 4262 	ld	a, (bc)
      0010F6 C5               [11] 4263 	push	bc
      0010F7 F5               [11] 4264 	push	af
      0010F8 33               [ 6] 4265 	inc	sp
      0010F9 21 0B 1B         [10] 4266 	ld	hl, #0x1b0b
      0010FC E5               [11] 4267 	push	hl
      0010FD CDr00r00         [17] 4268 	call	_WRTVRM
      001100 F1               [10] 4269 	pop	af
      001101 33               [ 6] 4270 	inc	sp
      001102 C1               [10] 4271 	pop	bc
                                   4272 ;src\/Graphics\Countdown.h:44: WRTVRM(SPRATT + 15, colors[colorIndex]);    
      001103 0A               [ 7] 4273 	ld	a, (bc)
      001104 F5               [11] 4274 	push	af
      001105 33               [ 6] 4275 	inc	sp
      001106 21 0F 1B         [10] 4276 	ld	hl, #0x1b0f
      001109 E5               [11] 4277 	push	hl
      00110A CDr00r00         [17] 4278 	call	_WRTVRM
      00110D F1               [10] 4279 	pop	af
      00110E 33               [ 6] 4280 	inc	sp
                                   4281 ;src\/Graphics\Countdown.h:45: }
      00110F C9               [10] 4282 	ret
                                   4283 ;src\/Graphics\Countdown.h:47: void ShowCountdown() {
                                   4284 ;	---------------------------------
                                   4285 ; Function ShowCountdown
                                   4286 ; ---------------------------------
      001110                       4287 _ShowCountdown::
      001110 DD E5            [15] 4288 	push	ix
      001112 DD 21 00 00      [14] 4289 	ld	ix,#0
      001116 DD 39            [15] 4290 	add	ix,sp
      001118 F5               [11] 4291 	push	af
      001119 F5               [11] 4292 	push	af
      00111A 3B               [ 6] 4293 	dec	sp
                                   4294 ;src\/Graphics\Countdown.h:49: byte x = 128-80, y = 0, colorIndex = 0;
      00111B 0E 30            [ 7] 4295 	ld	c, #0x30
      00111D DD 36 FB 00      [19] 4296 	ld	-5 (ix), #0
      001121 DD 36 FE 00      [19] 4297 	ld	-2 (ix), #0
                                   4298 ;src\/Graphics\Countdown.h:51: while(counter++ < 240) {
      001125 DD 36 FF 00      [19] 4299 	ld	-1 (ix), #0
      001129                       4300 00137$:
      001129 DD 7E FF         [19] 4301 	ld	a, -1 (ix)
      00112C D6 F0            [ 7] 4302 	sub	a, #0xf0
      00112E D2r5Ar12         [10] 4303 	jp	NC, 00139$
      001131 DD 34 FF         [23] 4304 	inc	-1 (ix)
                                   4305 ;src\/Graphics\Countdown.h:61: word lastJiffy = JIFFY;
      001134 ED 5B 9E FC      [20] 4306 	ld	de, (_JIFFY)
                                   4307 ;src\/Graphics\Countdown.h:62: while (lastJiffy == JIFFY) {
      001138                       4308 00101$:
      001138 2A 9E FC         [16] 4309 	ld	hl, (_JIFFY)
      00113B BF               [ 4] 4310 	cp	a, a
      00113C ED 52            [15] 4311 	sbc	hl, de
      00113E 28 F8            [12] 4312 	jr	Z, 00101$
                                   4313 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001140 79               [ 4] 4314 	ld	a, c
      001141 D6 80            [ 7] 4315 	sub	a, #0x80
      001143 3E 00            [ 7] 4316 	ld	a, #0x00
      001145 17               [ 4] 4317 	rla
      001146 47               [ 4] 4318 	ld	b, a
      001147 59               [ 4] 4319 	ld	e, c
                                   4320 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001148 DD 7E FB         [19] 4321 	ld	a, -5 (ix)
      00114B D6 50            [ 7] 4322 	sub	a, #0x50
      00114D 3E 00            [ 7] 4323 	ld	a, #0x00
      00114F 17               [ 4] 4324 	rla
      001150 DD 77 FC         [19] 4325 	ld	-4 (ix), a
      001153 DD 56 FB         [19] 4326 	ld	d, -5 (ix)
                                   4327 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001156 1C               [ 4] 4328 	inc	e
      001157 1C               [ 4] 4329 	inc	e
      001158 1C               [ 4] 4330 	inc	e
      001159 1C               [ 4] 4331 	inc	e
                                   4332 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      00115A 7A               [ 4] 4333 	ld	a, d
      00115B C6 04            [ 7] 4334 	add	a, #0x04
      00115D DD 77 FD         [19] 4335 	ld	-3 (ix), a
                                   4336 ;src\/Graphics\Countdown.h:66: if(counter < 30) {
      001160 DD 7E FF         [19] 4337 	ld	a, -1 (ix)
      001163 D6 1E            [ 7] 4338 	sub	a, #0x1e
      001165 30 28            [12] 4339 	jr	NC, 00135$
                                   4340 ;src\/Graphics\Countdown.h:67: colorIndex = 0;
      001167 DD 36 FE 00      [19] 4341 	ld	-2 (ix), #0
                                   4342 ;src\/Graphics\Countdown.h:69: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_3_32X32);
      00116B C5               [11] 4343 	push	bc
      00116C D5               [11] 4344 	push	de
      00116D 3E 54            [ 7] 4345 	ld	a, #0x54
      00116F F5               [11] 4346 	push	af
      001170 33               [ 6] 4347 	inc	sp
      001171 DD 46 FB         [19] 4348 	ld	b, -5 (ix)
      001174 C5               [11] 4349 	push	bc
      001175 CDrC7r0F         [17] 4350 	call	_AnimateSprites
      001178 F1               [10] 4351 	pop	af
      001179 33               [ 6] 4352 	inc	sp
      00117A D1               [10] 4353 	pop	de
      00117B C1               [10] 4354 	pop	bc
                                   4355 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      00117C 78               [ 4] 4356 	ld	a, b
      00117D B7               [ 4] 4357 	or	a, a
      00117E 28 01            [12] 4358 	jr	Z, 00105$
      001180 4B               [ 4] 4359 	ld	c, e
      001181                       4360 00105$:
                                   4361 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001181 DD 7E FC         [19] 4362 	ld	a, -4 (ix)
      001184 B7               [ 4] 4363 	or	a, a
      001185 28 A2            [12] 4364 	jr	Z, 00137$
      001187 DD 7E FD         [19] 4365 	ld	a, -3 (ix)
      00118A DD 77 FB         [19] 4366 	ld	-5 (ix), a
      00118D 18 9A            [12] 4367 	jr	00137$
      00118F                       4368 00135$:
                                   4369 ;src\/Graphics\Countdown.h:74: else if(counter >= 60 && counter < 90) {
      00118F DD 7E FF         [19] 4370 	ld	a, -1 (ix)
      001192 D6 3C            [ 7] 4371 	sub	a, #0x3c
      001194 38 31            [12] 4372 	jr	C, 00131$
      001196 DD 7E FF         [19] 4373 	ld	a, -1 (ix)
      001199 D6 5A            [ 7] 4374 	sub	a, #0x5a
      00119B 30 2A            [12] 4375 	jr	NC, 00131$
                                   4376 ;src\/Graphics\Countdown.h:75: colorIndex = 0;
      00119D DD 36 FE 00      [19] 4377 	ld	-2 (ix), #0
                                   4378 ;src\/Graphics\Countdown.h:77: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_2_32X32);
      0011A1 C5               [11] 4379 	push	bc
      0011A2 D5               [11] 4380 	push	de
      0011A3 3E 64            [ 7] 4381 	ld	a, #0x64
      0011A5 F5               [11] 4382 	push	af
      0011A6 33               [ 6] 4383 	inc	sp
      0011A7 DD 46 FB         [19] 4384 	ld	b, -5 (ix)
      0011AA C5               [11] 4385 	push	bc
      0011AB CDrC7r0F         [17] 4386 	call	_AnimateSprites
      0011AE F1               [10] 4387 	pop	af
      0011AF 33               [ 6] 4388 	inc	sp
      0011B0 D1               [10] 4389 	pop	de
      0011B1 C1               [10] 4390 	pop	bc
                                   4391 ;src\/Graphics\Countdown.h:79: if(x < 128) x += 4;
      0011B2 78               [ 4] 4392 	ld	a, b
      0011B3 B7               [ 4] 4393 	or	a, a
      0011B4 28 01            [12] 4394 	jr	Z, 00109$
      0011B6 4B               [ 4] 4395 	ld	c, e
      0011B7                       4396 00109$:
                                   4397 ;src\/Graphics\Countdown.h:80: if(y < 80) y += 4;
      0011B7 DD 7E FC         [19] 4398 	ld	a, -4 (ix)
      0011BA B7               [ 4] 4399 	or	a, a
      0011BB CAr29r11         [10] 4400 	jp	Z, 00137$
      0011BE DD 7E FD         [19] 4401 	ld	a, -3 (ix)
      0011C1 DD 77 FB         [19] 4402 	ld	-5 (ix), a
      0011C4 C3r29r11         [10] 4403 	jp	00137$
      0011C7                       4404 00131$:
                                   4405 ;src\/Graphics\Countdown.h:82: else if(counter >= 120 && counter < 150) {
      0011C7 DD 7E FF         [19] 4406 	ld	a, -1 (ix)
      0011CA D6 78            [ 7] 4407 	sub	a, #0x78
      0011CC 38 31            [12] 4408 	jr	C, 00127$
      0011CE DD 7E FF         [19] 4409 	ld	a, -1 (ix)
      0011D1 D6 96            [ 7] 4410 	sub	a, #0x96
      0011D3 30 2A            [12] 4411 	jr	NC, 00127$
                                   4412 ;src\/Graphics\Countdown.h:83: colorIndex = 0;
      0011D5 DD 36 FE 00      [19] 4413 	ld	-2 (ix), #0
                                   4414 ;src\/Graphics\Countdown.h:85: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_1_32X32);
      0011D9 C5               [11] 4415 	push	bc
      0011DA D5               [11] 4416 	push	de
      0011DB 3E 74            [ 7] 4417 	ld	a, #0x74
      0011DD F5               [11] 4418 	push	af
      0011DE 33               [ 6] 4419 	inc	sp
      0011DF DD 46 FB         [19] 4420 	ld	b, -5 (ix)
      0011E2 C5               [11] 4421 	push	bc
      0011E3 CDrC7r0F         [17] 4422 	call	_AnimateSprites
      0011E6 F1               [10] 4423 	pop	af
      0011E7 33               [ 6] 4424 	inc	sp
      0011E8 D1               [10] 4425 	pop	de
      0011E9 C1               [10] 4426 	pop	bc
                                   4427 ;src\/Graphics\Countdown.h:87: if(x < 128) x += 4;
      0011EA 78               [ 4] 4428 	ld	a, b
      0011EB B7               [ 4] 4429 	or	a, a
      0011EC 28 01            [12] 4430 	jr	Z, 00113$
      0011EE 4B               [ 4] 4431 	ld	c, e
      0011EF                       4432 00113$:
                                   4433 ;src\/Graphics\Countdown.h:88: if(y < 80) y += 4;
      0011EF DD 7E FC         [19] 4434 	ld	a, -4 (ix)
      0011F2 B7               [ 4] 4435 	or	a, a
      0011F3 CAr29r11         [10] 4436 	jp	Z, 00137$
      0011F6 DD 7E FD         [19] 4437 	ld	a, -3 (ix)
      0011F9 DD 77 FB         [19] 4438 	ld	-5 (ix), a
      0011FC C3r29r11         [10] 4439 	jp	00137$
      0011FF                       4440 00127$:
                                   4441 ;src\/Graphics\Countdown.h:90: else if(counter >= 180 && counter < 210) {
      0011FF DD 7E FF         [19] 4442 	ld	a, -1 (ix)
      001202 D6 B4            [ 7] 4443 	sub	a, #0xb4
      001204 38 31            [12] 4444 	jr	C, 00123$
      001206 DD 7E FF         [19] 4445 	ld	a, -1 (ix)
      001209 D6 D2            [ 7] 4446 	sub	a, #0xd2
      00120B 30 2A            [12] 4447 	jr	NC, 00123$
                                   4448 ;src\/Graphics\Countdown.h:91: colorIndex = 0;
      00120D DD 36 FE 00      [19] 4449 	ld	-2 (ix), #0
                                   4450 ;src\/Graphics\Countdown.h:93: AnimateSprites(x, y, SPRITE_PATTERN_GO_32X32);
      001211 C5               [11] 4451 	push	bc
      001212 D5               [11] 4452 	push	de
      001213 3E 84            [ 7] 4453 	ld	a, #0x84
      001215 F5               [11] 4454 	push	af
      001216 33               [ 6] 4455 	inc	sp
      001217 DD 46 FB         [19] 4456 	ld	b, -5 (ix)
      00121A C5               [11] 4457 	push	bc
      00121B CDrC7r0F         [17] 4458 	call	_AnimateSprites
      00121E F1               [10] 4459 	pop	af
      00121F 33               [ 6] 4460 	inc	sp
      001220 D1               [10] 4461 	pop	de
      001221 C1               [10] 4462 	pop	bc
                                   4463 ;src\/Graphics\Countdown.h:95: if(x < 128) x += 4;
      001222 78               [ 4] 4464 	ld	a, b
      001223 B7               [ 4] 4465 	or	a, a
      001224 28 01            [12] 4466 	jr	Z, 00117$
      001226 4B               [ 4] 4467 	ld	c, e
      001227                       4468 00117$:
                                   4469 ;src\/Graphics\Countdown.h:96: if(y < 80) y += 4;
      001227 DD 7E FC         [19] 4470 	ld	a, -4 (ix)
      00122A B7               [ 4] 4471 	or	a, a
      00122B CAr29r11         [10] 4472 	jp	Z, 00137$
      00122E DD 7E FD         [19] 4473 	ld	a, -3 (ix)
      001231 DD 77 FB         [19] 4474 	ld	-5 (ix), a
      001234 C3r29r11         [10] 4475 	jp	00137$
      001237                       4476 00123$:
                                   4477 ;src\/Graphics\Countdown.h:99: x = 128-80;
      001237 0E 30            [ 7] 4478 	ld	c, #0x30
                                   4479 ;src\/Graphics\Countdown.h:100: y = 0;
      001239 DD 36 FB 00      [19] 4480 	ld	-5 (ix), #0
                                   4481 ;src\/Graphics\Countdown.h:102: BlinkNumber(colorIndex);
      00123D C5               [11] 4482 	push	bc
      00123E DD 7E FE         [19] 4483 	ld	a, -2 (ix)
      001241 F5               [11] 4484 	push	af
      001242 33               [ 6] 4485 	inc	sp
      001243 CDrCCr10         [17] 4486 	call	_BlinkNumber
      001246 33               [ 6] 4487 	inc	sp
      001247 C1               [10] 4488 	pop	bc
                                   4489 ;src\/Graphics\Countdown.h:104: colorIndex++;
      001248 DD 34 FE         [23] 4490 	inc	-2 (ix)
                                   4491 ;src\/Graphics\Countdown.h:105: if(colorIndex >= sizeof(colors)) colorIndex = 0;
      00124B DD 7E FE         [19] 4492 	ld	a, -2 (ix)
      00124E D6 08            [ 7] 4493 	sub	a, #0x08
      001250 DAr29r11         [10] 4494 	jp	C, 00137$
      001253 DD 36 FE 00      [19] 4495 	ld	-2 (ix), #0
      001257 C3r29r11         [10] 4496 	jp	00137$
      00125A                       4497 00139$:
                                   4498 ;src\/Graphics\Countdown.h:110: WRTVRM(SPRATT, 	        192);
      00125A 3E C0            [ 7] 4499 	ld	a, #0xc0
      00125C F5               [11] 4500 	push	af
      00125D 33               [ 6] 4501 	inc	sp
      00125E 21 00 1B         [10] 4502 	ld	hl, #0x1b00
      001261 E5               [11] 4503 	push	hl
      001262 CDr00r00         [17] 4504 	call	_WRTVRM
      001265 F1               [10] 4505 	pop	af
      001266 33               [ 6] 4506 	inc	sp
                                   4507 ;src\/Graphics\Countdown.h:111: WRTVRM(SPRATT + 4, 	    192);
      001267 3E C0            [ 7] 4508 	ld	a, #0xc0
      001269 F5               [11] 4509 	push	af
      00126A 33               [ 6] 4510 	inc	sp
      00126B 21 04 1B         [10] 4511 	ld	hl, #0x1b04
      00126E E5               [11] 4512 	push	hl
      00126F CDr00r00         [17] 4513 	call	_WRTVRM
      001272 F1               [10] 4514 	pop	af
      001273 33               [ 6] 4515 	inc	sp
                                   4516 ;src\/Graphics\Countdown.h:112: WRTVRM(SPRATT + 8, 	    192);
      001274 3E C0            [ 7] 4517 	ld	a, #0xc0
      001276 F5               [11] 4518 	push	af
      001277 33               [ 6] 4519 	inc	sp
      001278 21 08 1B         [10] 4520 	ld	hl, #0x1b08
      00127B E5               [11] 4521 	push	hl
      00127C CDr00r00         [17] 4522 	call	_WRTVRM
      00127F F1               [10] 4523 	pop	af
      001280 33               [ 6] 4524 	inc	sp
                                   4525 ;src\/Graphics\Countdown.h:113: WRTVRM(SPRATT + 12,	    192);
      001281 3E C0            [ 7] 4526 	ld	a, #0xc0
      001283 F5               [11] 4527 	push	af
      001284 33               [ 6] 4528 	inc	sp
      001285 21 0C 1B         [10] 4529 	ld	hl, #0x1b0c
      001288 E5               [11] 4530 	push	hl
      001289 CDr00r00         [17] 4531 	call	_WRTVRM
                                   4532 ;src\/Graphics\Countdown.h:114: }
      00128C DD F9            [10] 4533 	ld	sp,ix
      00128E DD E1            [14] 4534 	pop	ix
      001290 C9               [10] 4535 	ret
                                   4536 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   4537 ;	---------------------------------
                                   4538 ; Function DrawChar
                                   4539 ; ---------------------------------
      001291                       4540 _DrawChar::
      001291 DD E5            [15] 4541 	push	ix
      001293 DD 21 00 00      [14] 4542 	ld	ix,#0
      001297 DD 39            [15] 4543 	add	ix,sp
                                   4544 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      001299 DD 6E 06         [19] 4545 	ld	l, 6 (ix)
      00129C 26 00            [ 7] 4546 	ld	h, #0x00
      00129E 29               [11] 4547 	add	hl, hl
      00129F 29               [11] 4548 	add	hl, hl
      0012A0 29               [11] 4549 	add	hl, hl
      0012A1 29               [11] 4550 	add	hl, hl
      0012A2 29               [11] 4551 	add	hl, hl
      0012A3 01 00 18         [10] 4552 	ld	bc, #0x1800
      0012A6 09               [11] 4553 	add	hl, bc
      0012A7 DD 4E 05         [19] 4554 	ld	c, 5 (ix)
      0012AA 06 00            [ 7] 4555 	ld	b, #0x00
      0012AC 09               [11] 4556 	add	hl, bc
      0012AD DD 7E 04         [19] 4557 	ld	a, 4 (ix)
      0012B0 F5               [11] 4558 	push	af
      0012B1 33               [ 6] 4559 	inc	sp
      0012B2 E5               [11] 4560 	push	hl
      0012B3 CDr00r00         [17] 4561 	call	_WRTVRM
      0012B6 F1               [10] 4562 	pop	af
      0012B7 33               [ 6] 4563 	inc	sp
                                   4564 ;src\/Graphics\Graphics.h:3: }
      0012B8 DD E1            [14] 4565 	pop	ix
      0012BA C9               [10] 4566 	ret
                                   4567 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   4568 ;	---------------------------------
                                   4569 ; Function DrawString
                                   4570 ; ---------------------------------
      0012BB                       4571 _DrawString::
      0012BB DD E5            [15] 4572 	push	ix
      0012BD DD 21 00 00      [14] 4573 	ld	ix,#0
      0012C1 DD 39            [15] 4574 	add	ix,sp
                                   4575 ;src\/Graphics\Graphics.h:6: while (*str) {
      0012C3 DD 6E 06         [19] 4576 	ld	l, 6 (ix)
      0012C6 DD 4E 04         [19] 4577 	ld	c, 4 (ix)
      0012C9 DD 46 05         [19] 4578 	ld	b, 5 (ix)
      0012CC                       4579 00101$:
      0012CC 0A               [ 7] 4580 	ld	a, (bc)
      0012CD B7               [ 4] 4581 	or	a, a
      0012CE 28 1A            [12] 4582 	jr	Z, 00104$
                                   4583 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0012D0 55               [ 4] 4584 	ld	d, l
      0012D1 2C               [ 4] 4585 	inc	l
      0012D2 DD 75 06         [19] 4586 	ld	6 (ix), l
      0012D5 03               [ 6] 4587 	inc	bc
      0012D6 C6 0F            [ 7] 4588 	add	a, #0x0f
      0012D8 E5               [11] 4589 	push	hl
      0012D9 C5               [11] 4590 	push	bc
      0012DA DD 66 07         [19] 4591 	ld	h, 7 (ix)
      0012DD 6A               [ 4] 4592 	ld	l, d
      0012DE E5               [11] 4593 	push	hl
      0012DF F5               [11] 4594 	push	af
      0012E0 33               [ 6] 4595 	inc	sp
      0012E1 CDr91r12         [17] 4596 	call	_DrawChar
      0012E4 F1               [10] 4597 	pop	af
      0012E5 33               [ 6] 4598 	inc	sp
      0012E6 C1               [10] 4599 	pop	bc
      0012E7 E1               [10] 4600 	pop	hl
      0012E8 18 E2            [12] 4601 	jr	00101$
      0012EA                       4602 00104$:
                                   4603 ;src\/Graphics\Graphics.h:9: }
      0012EA DD E1            [14] 4604 	pop	ix
      0012EC C9               [10] 4605 	ret
                                   4606 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   4607 ;	---------------------------------
                                   4608 ; Function DrawNumber
                                   4609 ; ---------------------------------
      0012ED                       4610 _DrawNumber::
      0012ED DD E5            [15] 4611 	push	ix
      0012EF DD 21 00 00      [14] 4612 	ld	ix,#0
      0012F3 DD 39            [15] 4613 	add	ix,sp
      0012F5 21 FA FF         [10] 4614 	ld	hl, #-6
      0012F8 39               [11] 4615 	add	hl, sp
      0012F9 F9               [ 6] 4616 	ld	sp, hl
                                   4617 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      0012FA DD 36 FA 01      [19] 4618 	ld	-6 (ix), #0x01
                                   4619 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      0012FE DD 66 07         [19] 4620 	ld	h, 7 (ix)
      001301 DD 6E 06         [19] 4621 	ld	l, 6 (ix)
      001304 E5               [11] 4622 	push	hl
      001305 21rA1r13         [10] 4623 	ld	hl, #___str_0
      001308 E5               [11] 4624 	push	hl
      001309 CDrBBr12         [17] 4625 	call	_DrawString
      00130C F1               [10] 4626 	pop	af
      00130D F1               [10] 4627 	pop	af
                                   4628 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00130E DD 7E 06         [19] 4629 	ld	a, 6 (ix)
      001311 DD 77 FF         [19] 4630 	ld	-1 (ix), a
      001314 1E 06            [ 7] 4631 	ld	e, #0x06
      001316                       4632 00109$:
      001316 7B               [ 4] 4633 	ld	a, e
      001317 B7               [ 4] 4634 	or	a, a
      001318 CAr9Cr13         [10] 4635 	jp	Z, 00111$
                                   4636 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      00131B 7B               [ 4] 4637 	ld	a, e
      00131C 3D               [ 4] 4638 	dec	a
      00131D D5               [11] 4639 	push	de
      00131E 57               [ 4] 4640 	ld	d,a
      00131F 1E 0A            [ 7] 4641 	ld	e,#0x0a
      001321 D5               [11] 4642 	push	de
      001322 CDr1Dr00         [17] 4643 	call	_Power
      001325 F1               [10] 4644 	pop	af
      001326 D1               [10] 4645 	pop	de
      001327 DD 75 FB         [19] 4646 	ld	-5 (ix), l
      00132A DD 74 FC         [19] 4647 	ld	-4 (ix), h
                                   4648 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00132D D5               [11] 4649 	push	de
      00132E DD 6E FB         [19] 4650 	ld	l, -5 (ix)
      001331 DD 66 FC         [19] 4651 	ld	h, -4 (ix)
      001334 E5               [11] 4652 	push	hl
      001335 DD 6E 04         [19] 4653 	ld	l, 4 (ix)
      001338 DD 66 05         [19] 4654 	ld	h, 5 (ix)
      00133B E5               [11] 4655 	push	hl
      00133C CDr00r00         [17] 4656 	call	__divuint
      00133F F1               [10] 4657 	pop	af
      001340 F1               [10] 4658 	pop	af
      001341 DD 75 FD         [19] 4659 	ld	-3 (ix), l
      001344 DD 74 FE         [19] 4660 	ld	-2 (ix), h
      001347 D1               [10] 4661 	pop	de
      001348 DD 7E FA         [19] 4662 	ld	a, -6 (ix)
      00134B B7               [ 4] 4663 	or	a, a
      00134C 28 0C            [12] 4664 	jr	Z, 00102$
      00134E DD 7E FE         [19] 4665 	ld	a, -2 (ix)
      001351 DD B6 FD         [19] 4666 	or	a, -3 (ix)
      001354 28 04            [12] 4667 	jr	Z, 00102$
      001356 DD 36 FA 00      [19] 4668 	ld	-6 (ix), #0
      00135A                       4669 00102$:
                                   4670 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      00135A DD 7E FA         [19] 4671 	ld	a, -6 (ix)
      00135D B7               [ 4] 4672 	or	a, a
      00135E 28 04            [12] 4673 	jr	Z, 00104$
      001360 7B               [ 4] 4674 	ld	a, e
      001361 3D               [ 4] 4675 	dec	a
      001362 20 31            [12] 4676 	jr	NZ, 00105$
      001364                       4677 00104$:
                                   4678 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      001364 DD 7E FD         [19] 4679 	ld	a, -3 (ix)
      001367 C6 3F            [ 7] 4680 	add	a, #0x3f
      001369 D5               [11] 4681 	push	de
      00136A DD 66 07         [19] 4682 	ld	h, 7 (ix)
      00136D E5               [11] 4683 	push	hl
      00136E 33               [ 6] 4684 	inc	sp
      00136F DD 66 FF         [19] 4685 	ld	h, -1 (ix)
      001372 E5               [11] 4686 	push	hl
      001373 33               [ 6] 4687 	inc	sp
      001374 F5               [11] 4688 	push	af
      001375 33               [ 6] 4689 	inc	sp
      001376 CDr91r12         [17] 4690 	call	_DrawChar
      001379 F1               [10] 4691 	pop	af
      00137A 33               [ 6] 4692 	inc	sp
      00137B DD 6E FB         [19] 4693 	ld	l, -5 (ix)
      00137E DD 66 FC         [19] 4694 	ld	h, -4 (ix)
      001381 E5               [11] 4695 	push	hl
      001382 DD 6E 04         [19] 4696 	ld	l, 4 (ix)
      001385 DD 66 05         [19] 4697 	ld	h, 5 (ix)
      001388 E5               [11] 4698 	push	hl
      001389 CDr00r00         [17] 4699 	call	__moduint
      00138C F1               [10] 4700 	pop	af
      00138D F1               [10] 4701 	pop	af
      00138E D1               [10] 4702 	pop	de
      00138F DD 75 04         [19] 4703 	ld	4 (ix), l
      001392 DD 74 05         [19] 4704 	ld	5 (ix), h
      001395                       4705 00105$:
                                   4706 ;src\/Graphics\Graphics.h:29: col++;
      001395 DD 34 FF         [23] 4707 	inc	-1 (ix)
                                   4708 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      001398 1D               [ 4] 4709 	dec	e
      001399 C3r16r13         [10] 4710 	jp	00109$
      00139C                       4711 00111$:
                                   4712 ;src\/Graphics\Graphics.h:34: }
      00139C DD F9            [10] 4713 	ld	sp, ix
      00139E DD E1            [14] 4714 	pop	ix
      0013A0 C9               [10] 4715 	ret
      0013A1                       4716 ___str_0:
      0013A1 20 20 20 20 20 20     4717 	.ascii "      "
      0013A7 00                    4718 	.db 0x00
                                   4719 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   4720 ;	---------------------------------
                                   4721 ; Function DrawColumn
                                   4722 ; ---------------------------------
      0013A8                       4723 _DrawColumn::
      0013A8 DD E5            [15] 4724 	push	ix
      0013AA DD 21 00 00      [14] 4725 	ld	ix,#0
      0013AE DD 39            [15] 4726 	add	ix,sp
      0013B0 21 F9 FF         [10] 4727 	ld	hl, #-7
      0013B3 39               [11] 4728 	add	hl, sp
      0013B4 F9               [ 6] 4729 	ld	sp, hl
                                   4730 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0013B5 DD 4E 04         [19] 4731 	ld	c, 4 (ix)
      0013B8 06 00            [ 7] 4732 	ld	b, #0x00
      0013BA 21 00 18         [10] 4733 	ld	hl, #0x1800
      0013BD 09               [11] 4734 	add	hl, bc
      0013BE C5               [11] 4735 	push	bc
      0013BF 3E 18            [ 7] 4736 	ld	a, #0x18
      0013C1 F5               [11] 4737 	push	af
      0013C2 33               [ 6] 4738 	inc	sp
      0013C3 E5               [11] 4739 	push	hl
      0013C4 CDr00r00         [17] 4740 	call	_WRTVRM
      0013C7 F1               [10] 4741 	pop	af
      0013C8 33               [ 6] 4742 	inc	sp
      0013C9 C1               [10] 4743 	pop	bc
                                   4744 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      0013CA 21 01 18         [10] 4745 	ld	hl, #0x1801
      0013CD 09               [11] 4746 	add	hl, bc
      0013CE C5               [11] 4747 	push	bc
      0013CF 3E 19            [ 7] 4748 	ld	a, #0x19
      0013D1 F5               [11] 4749 	push	af
      0013D2 33               [ 6] 4750 	inc	sp
      0013D3 E5               [11] 4751 	push	hl
      0013D4 CDr00r00         [17] 4752 	call	_WRTVRM
      0013D7 F1               [10] 4753 	pop	af
      0013D8 33               [ 6] 4754 	inc	sp
      0013D9 C1               [10] 4755 	pop	bc
                                   4756 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      0013DA 21 02 18         [10] 4757 	ld	hl, #0x1802
      0013DD 09               [11] 4758 	add	hl, bc
      0013DE C5               [11] 4759 	push	bc
      0013DF 3E 1A            [ 7] 4760 	ld	a, #0x1a
      0013E1 F5               [11] 4761 	push	af
      0013E2 33               [ 6] 4762 	inc	sp
      0013E3 E5               [11] 4763 	push	hl
      0013E4 CDr00r00         [17] 4764 	call	_WRTVRM
      0013E7 F1               [10] 4765 	pop	af
      0013E8 33               [ 6] 4766 	inc	sp
      0013E9 C1               [10] 4767 	pop	bc
                                   4768 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      0013EA 21 20 18         [10] 4769 	ld	hl, #0x1820
      0013ED 09               [11] 4770 	add	hl, bc
      0013EE C5               [11] 4771 	push	bc
      0013EF 3E 1B            [ 7] 4772 	ld	a, #0x1b
      0013F1 F5               [11] 4773 	push	af
      0013F2 33               [ 6] 4774 	inc	sp
      0013F3 E5               [11] 4775 	push	hl
      0013F4 CDr00r00         [17] 4776 	call	_WRTVRM
      0013F7 F1               [10] 4777 	pop	af
      0013F8 33               [ 6] 4778 	inc	sp
      0013F9 C1               [10] 4779 	pop	bc
                                   4780 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      0013FA 21 21 18         [10] 4781 	ld	hl, #0x1821
      0013FD 09               [11] 4782 	add	hl, bc
      0013FE C5               [11] 4783 	push	bc
      0013FF 3E 1C            [ 7] 4784 	ld	a, #0x1c
      001401 F5               [11] 4785 	push	af
      001402 33               [ 6] 4786 	inc	sp
      001403 E5               [11] 4787 	push	hl
      001404 CDr00r00         [17] 4788 	call	_WRTVRM
      001407 F1               [10] 4789 	pop	af
      001408 33               [ 6] 4790 	inc	sp
      001409 C1               [10] 4791 	pop	bc
                                   4792 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      00140A 21 22 18         [10] 4793 	ld	hl, #0x1822
      00140D 09               [11] 4794 	add	hl, bc
      00140E C5               [11] 4795 	push	bc
      00140F 3E 1D            [ 7] 4796 	ld	a, #0x1d
      001411 F5               [11] 4797 	push	af
      001412 33               [ 6] 4798 	inc	sp
      001413 E5               [11] 4799 	push	hl
      001414 CDr00r00         [17] 4800 	call	_WRTVRM
      001417 F1               [10] 4801 	pop	af
      001418 33               [ 6] 4802 	inc	sp
      001419 C1               [10] 4803 	pop	bc
                                   4804 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      00141A 21 40 18         [10] 4805 	ld	hl, #0x1840
      00141D 09               [11] 4806 	add	hl, bc
      00141E E3               [19] 4807 	ex	(sp), hl
      00141F 21 41 18         [10] 4808 	ld	hl, #0x1841
      001422 09               [11] 4809 	add	hl, bc
      001423 DD 75 FB         [19] 4810 	ld	-5 (ix), l
      001426 DD 74 FC         [19] 4811 	ld	-4 (ix), h
      001429 21 42 18         [10] 4812 	ld	hl, #0x1842
      00142C 09               [11] 4813 	add	hl, bc
      00142D DD 75 FD         [19] 4814 	ld	-3 (ix), l
      001430 DD 74 FE         [19] 4815 	ld	-2 (ix), h
      001433 DD 36 FF 00      [19] 4816 	ld	-1 (ix), #0
      001437                       4817 00103$:
      001437 DD 7E FF         [19] 4818 	ld	a, -1 (ix)
      00143A D6 14            [ 7] 4819 	sub	a, #0x14
      00143C 30 4A            [12] 4820 	jr	NC, 00101$
                                   4821 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00143E DD 5E FF         [19] 4822 	ld	e, -1 (ix)
      001441 16 00            [ 7] 4823 	ld	d, #0x00
      001443 EB               [ 4] 4824 	ex	de, hl
      001444 29               [11] 4825 	add	hl, hl
      001445 29               [11] 4826 	add	hl, hl
      001446 29               [11] 4827 	add	hl, hl
      001447 29               [11] 4828 	add	hl, hl
      001448 29               [11] 4829 	add	hl, hl
      001449 EB               [ 4] 4830 	ex	de, hl
      00144A E1               [10] 4831 	pop	hl
      00144B E5               [11] 4832 	push	hl
      00144C 19               [11] 4833 	add	hl, de
      00144D C5               [11] 4834 	push	bc
      00144E D5               [11] 4835 	push	de
      00144F 3E 1E            [ 7] 4836 	ld	a, #0x1e
      001451 F5               [11] 4837 	push	af
      001452 33               [ 6] 4838 	inc	sp
      001453 E5               [11] 4839 	push	hl
      001454 CDr00r00         [17] 4840 	call	_WRTVRM
      001457 F1               [10] 4841 	pop	af
      001458 33               [ 6] 4842 	inc	sp
      001459 D1               [10] 4843 	pop	de
      00145A C1               [10] 4844 	pop	bc
                                   4845 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      00145B DD 6E FB         [19] 4846 	ld	l, -5 (ix)
      00145E DD 66 FC         [19] 4847 	ld	h, -4 (ix)
      001461 19               [11] 4848 	add	hl, de
      001462 C5               [11] 4849 	push	bc
      001463 D5               [11] 4850 	push	de
      001464 3E 1F            [ 7] 4851 	ld	a, #0x1f
      001466 F5               [11] 4852 	push	af
      001467 33               [ 6] 4853 	inc	sp
      001468 E5               [11] 4854 	push	hl
      001469 CDr00r00         [17] 4855 	call	_WRTVRM
      00146C F1               [10] 4856 	pop	af
      00146D 33               [ 6] 4857 	inc	sp
      00146E D1               [10] 4858 	pop	de
      00146F C1               [10] 4859 	pop	bc
                                   4860 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      001470 DD 6E FD         [19] 4861 	ld	l, -3 (ix)
      001473 DD 66 FE         [19] 4862 	ld	h, -2 (ix)
      001476 19               [11] 4863 	add	hl, de
      001477 C5               [11] 4864 	push	bc
      001478 3E 20            [ 7] 4865 	ld	a, #0x20
      00147A F5               [11] 4866 	push	af
      00147B 33               [ 6] 4867 	inc	sp
      00147C E5               [11] 4868 	push	hl
      00147D CDr00r00         [17] 4869 	call	_WRTVRM
      001480 F1               [10] 4870 	pop	af
      001481 33               [ 6] 4871 	inc	sp
      001482 C1               [10] 4872 	pop	bc
                                   4873 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001483 DD 34 FF         [23] 4874 	inc	-1 (ix)
      001486 18 AF            [12] 4875 	jr	00103$
      001488                       4876 00101$:
                                   4877 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      001488 21 00 19         [10] 4878 	ld	hl, #0x1900
      00148B 09               [11] 4879 	add	hl, bc
      00148C C5               [11] 4880 	push	bc
      00148D 3E 21            [ 7] 4881 	ld	a, #0x21
      00148F F5               [11] 4882 	push	af
      001490 33               [ 6] 4883 	inc	sp
      001491 E5               [11] 4884 	push	hl
      001492 CDr00r00         [17] 4885 	call	_WRTVRM
      001495 F1               [10] 4886 	pop	af
      001496 33               [ 6] 4887 	inc	sp
      001497 C1               [10] 4888 	pop	bc
                                   4889 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      001498 21 01 19         [10] 4890 	ld	hl, #0x1901
      00149B 09               [11] 4891 	add	hl, bc
      00149C C5               [11] 4892 	push	bc
      00149D 3E 22            [ 7] 4893 	ld	a, #0x22
      00149F F5               [11] 4894 	push	af
      0014A0 33               [ 6] 4895 	inc	sp
      0014A1 E5               [11] 4896 	push	hl
      0014A2 CDr00r00         [17] 4897 	call	_WRTVRM
      0014A5 F1               [10] 4898 	pop	af
      0014A6 33               [ 6] 4899 	inc	sp
      0014A7 C1               [10] 4900 	pop	bc
                                   4901 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0014A8 21 02 19         [10] 4902 	ld	hl, #0x1902
      0014AB 09               [11] 4903 	add	hl, bc
      0014AC C5               [11] 4904 	push	bc
      0014AD 3E 23            [ 7] 4905 	ld	a, #0x23
      0014AF F5               [11] 4906 	push	af
      0014B0 33               [ 6] 4907 	inc	sp
      0014B1 E5               [11] 4908 	push	hl
      0014B2 CDr00r00         [17] 4909 	call	_WRTVRM
      0014B5 F1               [10] 4910 	pop	af
      0014B6 33               [ 6] 4911 	inc	sp
      0014B7 C1               [10] 4912 	pop	bc
                                   4913 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      0014B8 21 00 1A         [10] 4914 	ld	hl, #0x1a00
      0014BB 09               [11] 4915 	add	hl, bc
      0014BC C5               [11] 4916 	push	bc
      0014BD 3E 21            [ 7] 4917 	ld	a, #0x21
      0014BF F5               [11] 4918 	push	af
      0014C0 33               [ 6] 4919 	inc	sp
      0014C1 E5               [11] 4920 	push	hl
      0014C2 CDr00r00         [17] 4921 	call	_WRTVRM
      0014C5 F1               [10] 4922 	pop	af
      0014C6 33               [ 6] 4923 	inc	sp
      0014C7 C1               [10] 4924 	pop	bc
                                   4925 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0014C8 21 01 1A         [10] 4926 	ld	hl, #0x1a01
      0014CB 09               [11] 4927 	add	hl, bc
      0014CC C5               [11] 4928 	push	bc
      0014CD 3E 22            [ 7] 4929 	ld	a, #0x22
      0014CF F5               [11] 4930 	push	af
      0014D0 33               [ 6] 4931 	inc	sp
      0014D1 E5               [11] 4932 	push	hl
      0014D2 CDr00r00         [17] 4933 	call	_WRTVRM
      0014D5 F1               [10] 4934 	pop	af
      0014D6 33               [ 6] 4935 	inc	sp
      0014D7 C1               [10] 4936 	pop	bc
                                   4937 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0014D8 21 02 1A         [10] 4938 	ld	hl, #0x1a02
      0014DB 09               [11] 4939 	add	hl, bc
      0014DC C5               [11] 4940 	push	bc
      0014DD 3E 23            [ 7] 4941 	ld	a, #0x23
      0014DF F5               [11] 4942 	push	af
      0014E0 33               [ 6] 4943 	inc	sp
      0014E1 E5               [11] 4944 	push	hl
      0014E2 CDr00r00         [17] 4945 	call	_WRTVRM
      0014E5 F1               [10] 4946 	pop	af
      0014E6 33               [ 6] 4947 	inc	sp
      0014E7 C1               [10] 4948 	pop	bc
                                   4949 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0014E8 21 C0 1A         [10] 4950 	ld	hl, #0x1ac0
      0014EB 09               [11] 4951 	add	hl, bc
      0014EC C5               [11] 4952 	push	bc
      0014ED 3E 24            [ 7] 4953 	ld	a, #0x24
      0014EF F5               [11] 4954 	push	af
      0014F0 33               [ 6] 4955 	inc	sp
      0014F1 E5               [11] 4956 	push	hl
      0014F2 CDr00r00         [17] 4957 	call	_WRTVRM
      0014F5 F1               [10] 4958 	pop	af
      0014F6 33               [ 6] 4959 	inc	sp
      0014F7 C1               [10] 4960 	pop	bc
                                   4961 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      0014F8 21 C1 1A         [10] 4962 	ld	hl, #0x1ac1
      0014FB 09               [11] 4963 	add	hl, bc
      0014FC C5               [11] 4964 	push	bc
      0014FD 3E 25            [ 7] 4965 	ld	a, #0x25
      0014FF F5               [11] 4966 	push	af
      001500 33               [ 6] 4967 	inc	sp
      001501 E5               [11] 4968 	push	hl
      001502 CDr00r00         [17] 4969 	call	_WRTVRM
      001505 F1               [10] 4970 	pop	af
      001506 33               [ 6] 4971 	inc	sp
      001507 C1               [10] 4972 	pop	bc
                                   4973 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      001508 21 C2 1A         [10] 4974 	ld	hl, #0x1ac2
      00150B 09               [11] 4975 	add	hl, bc
      00150C C5               [11] 4976 	push	bc
      00150D 3E 26            [ 7] 4977 	ld	a, #0x26
      00150F F5               [11] 4978 	push	af
      001510 33               [ 6] 4979 	inc	sp
      001511 E5               [11] 4980 	push	hl
      001512 CDr00r00         [17] 4981 	call	_WRTVRM
      001515 F1               [10] 4982 	pop	af
      001516 33               [ 6] 4983 	inc	sp
      001517 C1               [10] 4984 	pop	bc
                                   4985 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      001518 21 E0 1A         [10] 4986 	ld	hl, #0x1ae0
      00151B 09               [11] 4987 	add	hl, bc
      00151C C5               [11] 4988 	push	bc
      00151D 3E 27            [ 7] 4989 	ld	a, #0x27
      00151F F5               [11] 4990 	push	af
      001520 33               [ 6] 4991 	inc	sp
      001521 E5               [11] 4992 	push	hl
      001522 CDr00r00         [17] 4993 	call	_WRTVRM
      001525 F1               [10] 4994 	pop	af
      001526 33               [ 6] 4995 	inc	sp
      001527 C1               [10] 4996 	pop	bc
                                   4997 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      001528 21 E1 1A         [10] 4998 	ld	hl, #0x1ae1
      00152B 09               [11] 4999 	add	hl, bc
      00152C C5               [11] 5000 	push	bc
      00152D 3E 28            [ 7] 5001 	ld	a, #0x28
      00152F F5               [11] 5002 	push	af
      001530 33               [ 6] 5003 	inc	sp
      001531 E5               [11] 5004 	push	hl
      001532 CDr00r00         [17] 5005 	call	_WRTVRM
      001535 F1               [10] 5006 	pop	af
      001536 33               [ 6] 5007 	inc	sp
      001537 C1               [10] 5008 	pop	bc
                                   5009 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      001538 21 E2 1A         [10] 5010 	ld	hl, #0x1ae2
      00153B 09               [11] 5011 	add	hl, bc
      00153C 3E 29            [ 7] 5012 	ld	a, #0x29
      00153E F5               [11] 5013 	push	af
      00153F 33               [ 6] 5014 	inc	sp
      001540 E5               [11] 5015 	push	hl
      001541 CDr00r00         [17] 5016 	call	_WRTVRM
                                   5017 ;src\/Graphics\Graphics.h:64: }
      001544 DD F9            [10] 5018 	ld	sp,ix
      001546 DD E1            [14] 5019 	pop	ix
      001548 C9               [10] 5020 	ret
                                   5021 ;src\/Graphics\Graphics.h:69: void GetNextPieceColors(byte sourcePiece) {
                                   5022 ;	---------------------------------
                                   5023 ; Function GetNextPieceColors
                                   5024 ; ---------------------------------
      001549                       5025 _GetNextPieceColors::
                                   5026 ;src\/Graphics\Graphics.h:70: switch(sourcePiece) {
      001549 FD 21 02 00      [14] 5027 	ld	iy, #2
      00154D FD 39            [15] 5028 	add	iy, sp
      00154F FD 7E 00         [19] 5029 	ld	a, 0 (iy)
      001552 D6 04            [ 7] 5030 	sub	a, #0x04
      001554 28 22            [12] 5031 	jr	Z, 00102$
      001556 FD 7E 00         [19] 5032 	ld	a, 0 (iy)
      001559 D6 08            [ 7] 5033 	sub	a, #0x08
      00155B 28 26            [12] 5034 	jr	Z, 00103$
      00155D FD 7E 00         [19] 5035 	ld	a, 0 (iy)
      001560 D6 0C            [ 7] 5036 	sub	a, #0x0c
      001562 28 09            [12] 5037 	jr	Z, 00101$
      001564 FD 7E 00         [19] 5038 	ld	a, 0 (iy)
      001567 D6 14            [ 7] 5039 	sub	a, #0x14
      001569 28 23            [12] 5040 	jr	Z, 00104$
      00156B 18 2C            [12] 5041 	jr	00105$
                                   5042 ;src\/Graphics\Graphics.h:71: case TILE_BLUE:
      00156D                       5043 00101$:
                                   5044 ;src\/Graphics\Graphics.h:72: nextPieceColor_Front = 7;
      00156D 3E 07            [ 7] 5045 	ld	a, #0x07
      00156F 32r9Br00         [13] 5046 	ld	(#_nextPieceColor_Front), a
                                   5047 ;src\/Graphics\Graphics.h:73: nextPieceColor_Back = 4;
      001572 3E 04            [ 7] 5048 	ld	a, #0x04
      001574 32r9Cr00         [13] 5049 	ld	(#_nextPieceColor_Back), a
                                   5050 ;src\/Graphics\Graphics.h:74: break;
      001577 C9               [10] 5051 	ret
                                   5052 ;src\/Graphics\Graphics.h:75: case TILE_GREEN:
      001578                       5053 00102$:
                                   5054 ;src\/Graphics\Graphics.h:76: nextPieceColor_Front = 3;
      001578 3E 03            [ 7] 5055 	ld	a, #0x03
      00157A 32r9Br00         [13] 5056 	ld	(#_nextPieceColor_Front), a
                                   5057 ;src\/Graphics\Graphics.h:77: nextPieceColor_Back = 12;
      00157D 3E 0C            [ 7] 5058 	ld	a, #0x0c
      00157F 32r9Cr00         [13] 5059 	ld	(#_nextPieceColor_Back), a
                                   5060 ;src\/Graphics\Graphics.h:78: break;
      001582 C9               [10] 5061 	ret
                                   5062 ;src\/Graphics\Graphics.h:79: case TILE_RED:
      001583                       5063 00103$:
                                   5064 ;src\/Graphics\Graphics.h:80: nextPieceColor_Front = 9;
      001583 3E 09            [ 7] 5065 	ld	a, #0x09
      001585 32r9Br00         [13] 5066 	ld	(#_nextPieceColor_Front), a
                                   5067 ;src\/Graphics\Graphics.h:81: nextPieceColor_Back = 6;
      001588 3E 06            [ 7] 5068 	ld	a, #0x06
      00158A 32r9Cr00         [13] 5069 	ld	(#_nextPieceColor_Back), a
                                   5070 ;src\/Graphics\Graphics.h:82: break;
      00158D C9               [10] 5071 	ret
                                   5072 ;src\/Graphics\Graphics.h:83: case TILE_YELLOW:
      00158E                       5073 00104$:
                                   5074 ;src\/Graphics\Graphics.h:84: nextPieceColor_Front = 11;
      00158E 3E 0B            [ 7] 5075 	ld	a, #0x0b
      001590 32r9Br00         [13] 5076 	ld	(#_nextPieceColor_Front), a
                                   5077 ;src\/Graphics\Graphics.h:85: nextPieceColor_Back = 10;
      001593 3E 0A            [ 7] 5078 	ld	a, #0x0a
      001595 32r9Cr00         [13] 5079 	ld	(#_nextPieceColor_Back), a
                                   5080 ;src\/Graphics\Graphics.h:86: break;
      001598 C9               [10] 5081 	ret
                                   5082 ;src\/Graphics\Graphics.h:87: default:
      001599                       5083 00105$:
                                   5084 ;src\/Graphics\Graphics.h:88: nextPieceColor_Front = 15;
      001599 3E 0F            [ 7] 5085 	ld	a, #0x0f
      00159B 32r9Br00         [13] 5086 	ld	(#_nextPieceColor_Front), a
                                   5087 ;src\/Graphics\Graphics.h:89: nextPieceColor_Back = 13;
      00159E 3E 0D            [ 7] 5088 	ld	a, #0x0d
      0015A0 32r9Cr00         [13] 5089 	ld	(#_nextPieceColor_Back), a
                                   5090 ;src\/Graphics\Graphics.h:90: }  
                                   5091 ;src\/Graphics\Graphics.h:91: }
      0015A3 C9               [10] 5092 	ret
                                   5093 ;src\/Graphics\Graphics.h:93: void PosMaskSprites(word VRAMaddress, byte y) {
                                   5094 ;	---------------------------------
                                   5095 ; Function PosMaskSprites
                                   5096 ; ---------------------------------
      0015A4                       5097 _PosMaskSprites::
      0015A4 DD E5            [15] 5098 	push	ix
      0015A6 DD 21 00 00      [14] 5099 	ld	ix,#0
      0015AA DD 39            [15] 5100 	add	ix,sp
                                   5101 ;src\/Graphics\Graphics.h:95: WRTVRM(VRAMaddress, 	    y);
      0015AC DD 7E 06         [19] 5102 	ld	a, 6 (ix)
      0015AF F5               [11] 5103 	push	af
      0015B0 33               [ 6] 5104 	inc	sp
      0015B1 DD 6E 04         [19] 5105 	ld	l, 4 (ix)
      0015B4 DD 66 05         [19] 5106 	ld	h, 5 (ix)
      0015B7 E5               [11] 5107 	push	hl
      0015B8 CDr00r00         [17] 5108 	call	_WRTVRM
      0015BB F1               [10] 5109 	pop	af
      0015BC 33               [ 6] 5110 	inc	sp
                                   5111 ;src\/Graphics\Graphics.h:96: WRTVRM(VRAMaddress + 1, 	0);
      0015BD DD 4E 04         [19] 5112 	ld	c, 4 (ix)
      0015C0 DD 46 05         [19] 5113 	ld	b, 5 (ix)
      0015C3 59               [ 4] 5114 	ld	e, c
      0015C4 50               [ 4] 5115 	ld	d, b
      0015C5 13               [ 6] 5116 	inc	de
      0015C6 C5               [11] 5117 	push	bc
      0015C7 AF               [ 4] 5118 	xor	a, a
      0015C8 F5               [11] 5119 	push	af
      0015C9 33               [ 6] 5120 	inc	sp
      0015CA D5               [11] 5121 	push	de
      0015CB CDr00r00         [17] 5122 	call	_WRTVRM
      0015CE F1               [10] 5123 	pop	af
      0015CF 33               [ 6] 5124 	inc	sp
      0015D0 C1               [10] 5125 	pop	bc
                                   5126 ;src\/Graphics\Graphics.h:97: WRTVRM(VRAMaddress + 2, 	0); // Pattern don't matter
      0015D1 59               [ 4] 5127 	ld	e, c
      0015D2 50               [ 4] 5128 	ld	d, b
      0015D3 13               [ 6] 5129 	inc	de
      0015D4 13               [ 6] 5130 	inc	de
      0015D5 C5               [11] 5131 	push	bc
      0015D6 AF               [ 4] 5132 	xor	a, a
      0015D7 F5               [11] 5133 	push	af
      0015D8 33               [ 6] 5134 	inc	sp
      0015D9 D5               [11] 5135 	push	de
      0015DA CDr00r00         [17] 5136 	call	_WRTVRM
      0015DD F1               [10] 5137 	pop	af
      0015DE 33               [ 6] 5138 	inc	sp
      0015DF C1               [10] 5139 	pop	bc
                                   5140 ;src\/Graphics\Graphics.h:98: WRTVRM(VRAMaddress + 3, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      0015E0 59               [ 4] 5141 	ld	e, c
      0015E1 50               [ 4] 5142 	ld	d, b
      0015E2 13               [ 6] 5143 	inc	de
      0015E3 13               [ 6] 5144 	inc	de
      0015E4 13               [ 6] 5145 	inc	de
      0015E5 C5               [11] 5146 	push	bc
      0015E6 3E 40            [ 7] 5147 	ld	a, #0x40
      0015E8 F5               [11] 5148 	push	af
      0015E9 33               [ 6] 5149 	inc	sp
      0015EA D5               [11] 5150 	push	de
      0015EB CDr00r00         [17] 5151 	call	_WRTVRM
      0015EE F1               [10] 5152 	pop	af
      0015EF 33               [ 6] 5153 	inc	sp
      0015F0 C1               [10] 5154 	pop	bc
                                   5155 ;src\/Graphics\Graphics.h:100: WRTVRM(VRAMaddress + 4,   y);
      0015F1 21 04 00         [10] 5156 	ld	hl, #0x0004
      0015F4 09               [11] 5157 	add	hl, bc
      0015F5 C5               [11] 5158 	push	bc
      0015F6 DD 7E 06         [19] 5159 	ld	a, 6 (ix)
      0015F9 F5               [11] 5160 	push	af
      0015FA 33               [ 6] 5161 	inc	sp
      0015FB E5               [11] 5162 	push	hl
      0015FC CDr00r00         [17] 5163 	call	_WRTVRM
      0015FF F1               [10] 5164 	pop	af
      001600 33               [ 6] 5165 	inc	sp
      001601 C1               [10] 5166 	pop	bc
                                   5167 ;src\/Graphics\Graphics.h:101: WRTVRM(VRAMaddress + 5, 	0);
      001602 21 05 00         [10] 5168 	ld	hl, #0x0005
      001605 09               [11] 5169 	add	hl, bc
      001606 C5               [11] 5170 	push	bc
      001607 AF               [ 4] 5171 	xor	a, a
      001608 F5               [11] 5172 	push	af
      001609 33               [ 6] 5173 	inc	sp
      00160A E5               [11] 5174 	push	hl
      00160B CDr00r00         [17] 5175 	call	_WRTVRM
      00160E F1               [10] 5176 	pop	af
      00160F 33               [ 6] 5177 	inc	sp
      001610 C1               [10] 5178 	pop	bc
                                   5179 ;src\/Graphics\Graphics.h:102: WRTVRM(VRAMaddress + 6, 	0); // Pattern don't matter
      001611 21 06 00         [10] 5180 	ld	hl, #0x0006
      001614 09               [11] 5181 	add	hl, bc
      001615 C5               [11] 5182 	push	bc
      001616 AF               [ 4] 5183 	xor	a, a
      001617 F5               [11] 5184 	push	af
      001618 33               [ 6] 5185 	inc	sp
      001619 E5               [11] 5186 	push	hl
      00161A CDr00r00         [17] 5187 	call	_WRTVRM
      00161D F1               [10] 5188 	pop	af
      00161E 33               [ 6] 5189 	inc	sp
      00161F C1               [10] 5190 	pop	bc
                                   5191 ;src\/Graphics\Graphics.h:103: WRTVRM(VRAMaddress + 7, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      001620 21 07 00         [10] 5192 	ld	hl, #0x0007
      001623 09               [11] 5193 	add	hl, bc
      001624 C5               [11] 5194 	push	bc
      001625 3E 40            [ 7] 5195 	ld	a, #0x40
      001627 F5               [11] 5196 	push	af
      001628 33               [ 6] 5197 	inc	sp
      001629 E5               [11] 5198 	push	hl
      00162A CDr00r00         [17] 5199 	call	_WRTVRM
      00162D F1               [10] 5200 	pop	af
      00162E 33               [ 6] 5201 	inc	sp
      00162F C1               [10] 5202 	pop	bc
                                   5203 ;src\/Graphics\Graphics.h:105: WRTVRM(VRAMaddress + 8,   y);
      001630 21 08 00         [10] 5204 	ld	hl, #0x0008
      001633 09               [11] 5205 	add	hl, bc
      001634 C5               [11] 5206 	push	bc
      001635 DD 7E 06         [19] 5207 	ld	a, 6 (ix)
      001638 F5               [11] 5208 	push	af
      001639 33               [ 6] 5209 	inc	sp
      00163A E5               [11] 5210 	push	hl
      00163B CDr00r00         [17] 5211 	call	_WRTVRM
      00163E F1               [10] 5212 	pop	af
      00163F 33               [ 6] 5213 	inc	sp
      001640 C1               [10] 5214 	pop	bc
                                   5215 ;src\/Graphics\Graphics.h:106: WRTVRM(VRAMaddress + 9, 	0);
      001641 21 09 00         [10] 5216 	ld	hl, #0x0009
      001644 09               [11] 5217 	add	hl, bc
      001645 C5               [11] 5218 	push	bc
      001646 AF               [ 4] 5219 	xor	a, a
      001647 F5               [11] 5220 	push	af
      001648 33               [ 6] 5221 	inc	sp
      001649 E5               [11] 5222 	push	hl
      00164A CDr00r00         [17] 5223 	call	_WRTVRM
      00164D F1               [10] 5224 	pop	af
      00164E 33               [ 6] 5225 	inc	sp
      00164F C1               [10] 5226 	pop	bc
                                   5227 ;src\/Graphics\Graphics.h:107: WRTVRM(VRAMaddress + 10,	0); // Pattern don't matter
      001650 21 0A 00         [10] 5228 	ld	hl, #0x000a
      001653 09               [11] 5229 	add	hl, bc
      001654 C5               [11] 5230 	push	bc
      001655 AF               [ 4] 5231 	xor	a, a
      001656 F5               [11] 5232 	push	af
      001657 33               [ 6] 5233 	inc	sp
      001658 E5               [11] 5234 	push	hl
      001659 CDr00r00         [17] 5235 	call	_WRTVRM
      00165C F1               [10] 5236 	pop	af
      00165D 33               [ 6] 5237 	inc	sp
      00165E C1               [10] 5238 	pop	bc
                                   5239 ;src\/Graphics\Graphics.h:108: WRTVRM(VRAMaddress + 11,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      00165F 21 0B 00         [10] 5240 	ld	hl, #0x000b
      001662 09               [11] 5241 	add	hl, bc
      001663 C5               [11] 5242 	push	bc
      001664 3E 40            [ 7] 5243 	ld	a, #0x40
      001666 F5               [11] 5244 	push	af
      001667 33               [ 6] 5245 	inc	sp
      001668 E5               [11] 5246 	push	hl
      001669 CDr00r00         [17] 5247 	call	_WRTVRM
      00166C F1               [10] 5248 	pop	af
      00166D 33               [ 6] 5249 	inc	sp
      00166E C1               [10] 5250 	pop	bc
                                   5251 ;src\/Graphics\Graphics.h:110: WRTVRM(VRAMaddress + 12,  y);
      00166F 21 0C 00         [10] 5252 	ld	hl, #0x000c
      001672 09               [11] 5253 	add	hl, bc
      001673 C5               [11] 5254 	push	bc
      001674 DD 7E 06         [19] 5255 	ld	a, 6 (ix)
      001677 F5               [11] 5256 	push	af
      001678 33               [ 6] 5257 	inc	sp
      001679 E5               [11] 5258 	push	hl
      00167A CDr00r00         [17] 5259 	call	_WRTVRM
      00167D F1               [10] 5260 	pop	af
      00167E 33               [ 6] 5261 	inc	sp
      00167F C1               [10] 5262 	pop	bc
                                   5263 ;src\/Graphics\Graphics.h:111: WRTVRM(VRAMaddress + 13,	0);
      001680 21 0D 00         [10] 5264 	ld	hl, #0x000d
      001683 09               [11] 5265 	add	hl, bc
      001684 C5               [11] 5266 	push	bc
      001685 AF               [ 4] 5267 	xor	a, a
      001686 F5               [11] 5268 	push	af
      001687 33               [ 6] 5269 	inc	sp
      001688 E5               [11] 5270 	push	hl
      001689 CDr00r00         [17] 5271 	call	_WRTVRM
      00168C F1               [10] 5272 	pop	af
      00168D 33               [ 6] 5273 	inc	sp
      00168E C1               [10] 5274 	pop	bc
                                   5275 ;src\/Graphics\Graphics.h:112: WRTVRM(VRAMaddress + 14,	0); // Pattern don't matter
      00168F 21 0E 00         [10] 5276 	ld	hl, #0x000e
      001692 09               [11] 5277 	add	hl, bc
      001693 C5               [11] 5278 	push	bc
      001694 AF               [ 4] 5279 	xor	a, a
      001695 F5               [11] 5280 	push	af
      001696 33               [ 6] 5281 	inc	sp
      001697 E5               [11] 5282 	push	hl
      001698 CDr00r00         [17] 5283 	call	_WRTVRM
      00169B F1               [10] 5284 	pop	af
      00169C 33               [ 6] 5285 	inc	sp
      00169D C1               [10] 5286 	pop	bc
                                   5287 ;src\/Graphics\Graphics.h:113: WRTVRM(VRAMaddress + 15,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)  
      00169E 21 0F 00         [10] 5288 	ld	hl, #0x000f
      0016A1 09               [11] 5289 	add	hl, bc
      0016A2 3E 40            [ 7] 5290 	ld	a, #0x40
      0016A4 F5               [11] 5291 	push	af
      0016A5 33               [ 6] 5292 	inc	sp
      0016A6 E5               [11] 5293 	push	hl
      0016A7 CDr00r00         [17] 5294 	call	_WRTVRM
      0016AA F1               [10] 5295 	pop	af
      0016AB 33               [ 6] 5296 	inc	sp
                                   5297 ;src\/Graphics\Graphics.h:114: }
      0016AC DD E1            [14] 5298 	pop	ix
      0016AE C9               [10] 5299 	ret
                                   5300 ;src\/Graphics\Graphics.h:116: void DrawNextPiece() {
                                   5301 ;	---------------------------------
                                   5302 ; Function DrawNextPiece
                                   5303 ; ---------------------------------
      0016AF                       5304 _DrawNextPiece::
      0016AF F5               [11] 5305 	push	af
      0016B0 F5               [11] 5306 	push	af
                                   5307 ;src\/Graphics\Graphics.h:120: PosMaskSprites(SPRATT, 24+24);
      0016B1 3E 30            [ 7] 5308 	ld	a, #0x30
      0016B3 F5               [11] 5309 	push	af
      0016B4 33               [ 6] 5310 	inc	sp
      0016B5 21 00 1B         [10] 5311 	ld	hl, #0x1b00
      0016B8 E5               [11] 5312 	push	hl
      0016B9 CDrA4r15         [17] 5313 	call	_PosMaskSprites
      0016BC F1               [10] 5314 	pop	af
      0016BD 33               [ 6] 5315 	inc	sp
                                   5316 ;src\/Graphics\Graphics.h:121: PosMaskSprites(SPRATT + 16, 24+24+16);
      0016BE 3E 40            [ 7] 5317 	ld	a, #0x40
      0016C0 F5               [11] 5318 	push	af
      0016C1 33               [ 6] 5319 	inc	sp
      0016C2 21 10 1B         [10] 5320 	ld	hl, #0x1b10
      0016C5 E5               [11] 5321 	push	hl
      0016C6 CDrA4r15         [17] 5322 	call	_PosMaskSprites
      0016C9 F1               [10] 5323 	pop	af
      0016CA 33               [ 6] 5324 	inc	sp
                                   5325 ;src\/Graphics\Graphics.h:124: PosMaskSprites(SPRATT + 32, 255); // first line
      0016CB 3E FF            [ 7] 5326 	ld	a, #0xff
      0016CD F5               [11] 5327 	push	af
      0016CE 33               [ 6] 5328 	inc	sp
      0016CF 21 20 1B         [10] 5329 	ld	hl, #0x1b20
      0016D2 E5               [11] 5330 	push	hl
      0016D3 CDrA4r15         [17] 5331 	call	_PosMaskSprites
      0016D6 F1               [10] 5332 	pop	af
      0016D7 33               [ 6] 5333 	inc	sp
                                   5334 ;src\/Graphics\Graphics.h:126: while(counter++ < 25) {
      0016D8 FD 21 02 00      [14] 5335 	ld	iy, #2
      0016DC FD 39            [15] 5336 	add	iy, sp
      0016DE FD 36 00 30      [19] 5337 	ld	0 (iy), #0x30
      0016E2 AF               [ 4] 5338 	xor	a, a
      0016E3 FD 23            [10] 5339 	inc	iy
      0016E5 FD 77 00         [19] 5340 	ld	0 (iy), a
      0016E8                       5341 00104$:
      0016E8 FD 21 03 00      [14] 5342 	ld	iy, #3
      0016EC FD 39            [15] 5343 	add	iy, sp
      0016EE FD 7E 00         [19] 5344 	ld	a, 0 (iy)
      0016F1 D6 19            [ 7] 5345 	sub	a, #0x19
      0016F3 D2rA6r19         [10] 5346 	jp	NC, 00107$
      0016F6 FD 34 00         [23] 5347 	inc	0 (iy)
                                   5348 ;src\/Graphics\Graphics.h:128: word lastJiffy = JIFFY;
      0016F9 ED 4B 9E FC      [20] 5349 	ld	bc, (_JIFFY)
                                   5350 ;src\/Graphics\Graphics.h:129: while (lastJiffy == JIFFY) {
      0016FD                       5351 00101$:
      0016FD 2A 9E FC         [16] 5352 	ld	hl, (_JIFFY)
      001700 BF               [ 4] 5353 	cp	a, a
      001701 ED 42            [15] 5354 	sbc	hl, bc
      001703 28 F8            [12] 5355 	jr	Z, 00101$
                                   5356 ;src\/Graphics\Graphics.h:134: GetNextPieceColors(topPiece);
      001705 3Ar90r00         [13] 5357 	ld	a,(#_topPiece + 0)
      001708 F5               [11] 5358 	push	af
      001709 33               [ 6] 5359 	inc	sp
      00170A CDr49r15         [17] 5360 	call	_GetNextPieceColors
      00170D 33               [ 6] 5361 	inc	sp
                                   5362 ;src\/Graphics\Graphics.h:135: WRTVRM(SPRATT + 64, 	y - 32);                       // Code repeated for performance reasons
      00170E FD 21 02 00      [14] 5363 	ld	iy, #2
      001712 FD 39            [15] 5364 	add	iy, sp
      001714 FD 7E 00         [19] 5365 	ld	a, 0 (iy)
      001717 FD 2B            [10] 5366 	dec	iy
      001719 FD 77 00         [19] 5367 	ld	0 (iy), a
      00171C 21 00 00         [10] 5368 	ld	hl, #0
      00171F 39               [11] 5369 	add	hl, sp
      001720 FD 7E 00         [19] 5370 	ld	a, 0 (iy)
      001723 C6 E0            [ 7] 5371 	add	a, #0xe0
      001725 77               [ 7] 5372 	ld	(hl), a
      001726 FD 7E FF         [19] 5373 	ld	a, -1 (iy)
      001729 F5               [11] 5374 	push	af
      00172A 33               [ 6] 5375 	inc	sp
      00172B 21 40 1B         [10] 5376 	ld	hl, #0x1b40
      00172E E5               [11] 5377 	push	hl
      00172F CDr00r00         [17] 5378 	call	_WRTVRM
      001732 F1               [10] 5379 	pop	af
      001733 33               [ 6] 5380 	inc	sp
                                   5381 ;src\/Graphics\Graphics.h:136: WRTVRM(SPRATT + 65, 	(4 * 8)-4);
      001734 3E 1C            [ 7] 5382 	ld	a, #0x1c
      001736 F5               [11] 5383 	push	af
      001737 33               [ 6] 5384 	inc	sp
      001738 21 41 1B         [10] 5385 	ld	hl, #0x1b41
      00173B E5               [11] 5386 	push	hl
      00173C CDr00r00         [17] 5387 	call	_WRTVRM
      00173F F1               [10] 5388 	pop	af
      001740 33               [ 6] 5389 	inc	sp
                                   5390 ;src\/Graphics\Graphics.h:137: WRTVRM(SPRATT + 66, 	SPRITE_PATTERN_SMALL_BLOCK);
      001741 3E 4C            [ 7] 5391 	ld	a, #0x4c
      001743 F5               [11] 5392 	push	af
      001744 33               [ 6] 5393 	inc	sp
      001745 21 42 1B         [10] 5394 	ld	hl, #0x1b42
      001748 E5               [11] 5395 	push	hl
      001749 CDr00r00         [17] 5396 	call	_WRTVRM
      00174C F1               [10] 5397 	pop	af
      00174D 33               [ 6] 5398 	inc	sp
                                   5399 ;src\/Graphics\Graphics.h:138: WRTVRM(SPRATT + 67, 	nextPieceColor_Front);
      00174E 3Ar9Br00         [13] 5400 	ld	a,(#_nextPieceColor_Front + 0)
      001751 F5               [11] 5401 	push	af
      001752 33               [ 6] 5402 	inc	sp
      001753 21 43 1B         [10] 5403 	ld	hl, #0x1b43
      001756 E5               [11] 5404 	push	hl
      001757 CDr00r00         [17] 5405 	call	_WRTVRM
      00175A F1               [10] 5406 	pop	af
      00175B 33               [ 6] 5407 	inc	sp
                                   5408 ;src\/Graphics\Graphics.h:139: WRTVRM(SPRATT + 68, 	y - 32);
      00175C 21 00 00         [10] 5409 	ld	hl, #0
      00175F 39               [11] 5410 	add	hl, sp
      001760 7E               [ 7] 5411 	ld	a, (hl)
      001761 F5               [11] 5412 	push	af
      001762 33               [ 6] 5413 	inc	sp
      001763 21 44 1B         [10] 5414 	ld	hl, #0x1b44
      001766 E5               [11] 5415 	push	hl
      001767 CDr00r00         [17] 5416 	call	_WRTVRM
      00176A F1               [10] 5417 	pop	af
      00176B 33               [ 6] 5418 	inc	sp
                                   5419 ;src\/Graphics\Graphics.h:140: WRTVRM(SPRATT + 69, 	(4 * 8)-4);
      00176C 3E 1C            [ 7] 5420 	ld	a, #0x1c
      00176E F5               [11] 5421 	push	af
      00176F 33               [ 6] 5422 	inc	sp
      001770 21 45 1B         [10] 5423 	ld	hl, #0x1b45
      001773 E5               [11] 5424 	push	hl
      001774 CDr00r00         [17] 5425 	call	_WRTVRM
      001777 F1               [10] 5426 	pop	af
      001778 33               [ 6] 5427 	inc	sp
                                   5428 ;src\/Graphics\Graphics.h:141: WRTVRM(SPRATT + 70, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001779 3E 50            [ 7] 5429 	ld	a, #0x50
      00177B F5               [11] 5430 	push	af
      00177C 33               [ 6] 5431 	inc	sp
      00177D 21 46 1B         [10] 5432 	ld	hl, #0x1b46
      001780 E5               [11] 5433 	push	hl
      001781 CDr00r00         [17] 5434 	call	_WRTVRM
      001784 F1               [10] 5435 	pop	af
      001785 33               [ 6] 5436 	inc	sp
                                   5437 ;src\/Graphics\Graphics.h:142: WRTVRM(SPRATT + 71, 	nextPieceColor_Back);
      001786 3Ar9Cr00         [13] 5438 	ld	a,(#_nextPieceColor_Back + 0)
      001789 F5               [11] 5439 	push	af
      00178A 33               [ 6] 5440 	inc	sp
      00178B 21 47 1B         [10] 5441 	ld	hl, #0x1b47
      00178E E5               [11] 5442 	push	hl
      00178F CDr00r00         [17] 5443 	call	_WRTVRM
      001792 F1               [10] 5444 	pop	af
      001793 33               [ 6] 5445 	inc	sp
                                   5446 ;src\/Graphics\Graphics.h:144: GetNextPieceColors(midPiece);
      001794 3Ar91r00         [13] 5447 	ld	a,(#_midPiece + 0)
      001797 F5               [11] 5448 	push	af
      001798 33               [ 6] 5449 	inc	sp
      001799 CDr49r15         [17] 5450 	call	_GetNextPieceColors
      00179C 33               [ 6] 5451 	inc	sp
                                   5452 ;src\/Graphics\Graphics.h:145: WRTVRM(SPRATT + 72, 	y - 24);
      00179D 21 00 00         [10] 5453 	ld	hl, #0
      0017A0 39               [11] 5454 	add	hl, sp
      0017A1 FD 21 01 00      [14] 5455 	ld	iy, #1
      0017A5 FD 39            [15] 5456 	add	iy, sp
      0017A7 FD 7E 00         [19] 5457 	ld	a, 0 (iy)
      0017AA C6 E8            [ 7] 5458 	add	a, #0xe8
      0017AC 77               [ 7] 5459 	ld	(hl), a
      0017AD FD 7E FF         [19] 5460 	ld	a, -1 (iy)
      0017B0 F5               [11] 5461 	push	af
      0017B1 33               [ 6] 5462 	inc	sp
      0017B2 21 48 1B         [10] 5463 	ld	hl, #0x1b48
      0017B5 E5               [11] 5464 	push	hl
      0017B6 CDr00r00         [17] 5465 	call	_WRTVRM
      0017B9 F1               [10] 5466 	pop	af
      0017BA 33               [ 6] 5467 	inc	sp
                                   5468 ;src\/Graphics\Graphics.h:146: WRTVRM(SPRATT + 73, 	(4 * 8)-4);
      0017BB 3E 1C            [ 7] 5469 	ld	a, #0x1c
      0017BD F5               [11] 5470 	push	af
      0017BE 33               [ 6] 5471 	inc	sp
      0017BF 21 49 1B         [10] 5472 	ld	hl, #0x1b49
      0017C2 E5               [11] 5473 	push	hl
      0017C3 CDr00r00         [17] 5474 	call	_WRTVRM
      0017C6 F1               [10] 5475 	pop	af
      0017C7 33               [ 6] 5476 	inc	sp
                                   5477 ;src\/Graphics\Graphics.h:147: WRTVRM(SPRATT + 74, 	SPRITE_PATTERN_SMALL_BLOCK);
      0017C8 3E 4C            [ 7] 5478 	ld	a, #0x4c
      0017CA F5               [11] 5479 	push	af
      0017CB 33               [ 6] 5480 	inc	sp
      0017CC 21 4A 1B         [10] 5481 	ld	hl, #0x1b4a
      0017CF E5               [11] 5482 	push	hl
      0017D0 CDr00r00         [17] 5483 	call	_WRTVRM
      0017D3 F1               [10] 5484 	pop	af
      0017D4 33               [ 6] 5485 	inc	sp
                                   5486 ;src\/Graphics\Graphics.h:148: WRTVRM(SPRATT + 75, 	nextPieceColor_Front);
      0017D5 3Ar9Br00         [13] 5487 	ld	a,(#_nextPieceColor_Front + 0)
      0017D8 F5               [11] 5488 	push	af
      0017D9 33               [ 6] 5489 	inc	sp
      0017DA 21 4B 1B         [10] 5490 	ld	hl, #0x1b4b
      0017DD E5               [11] 5491 	push	hl
      0017DE CDr00r00         [17] 5492 	call	_WRTVRM
      0017E1 F1               [10] 5493 	pop	af
      0017E2 33               [ 6] 5494 	inc	sp
                                   5495 ;src\/Graphics\Graphics.h:149: WRTVRM(SPRATT + 76, 	y - 24);
      0017E3 21 00 00         [10] 5496 	ld	hl, #0
      0017E6 39               [11] 5497 	add	hl, sp
      0017E7 7E               [ 7] 5498 	ld	a, (hl)
      0017E8 F5               [11] 5499 	push	af
      0017E9 33               [ 6] 5500 	inc	sp
      0017EA 21 4C 1B         [10] 5501 	ld	hl, #0x1b4c
      0017ED E5               [11] 5502 	push	hl
      0017EE CDr00r00         [17] 5503 	call	_WRTVRM
      0017F1 F1               [10] 5504 	pop	af
      0017F2 33               [ 6] 5505 	inc	sp
                                   5506 ;src\/Graphics\Graphics.h:150: WRTVRM(SPRATT + 77, 	(4 * 8)-4);
      0017F3 3E 1C            [ 7] 5507 	ld	a, #0x1c
      0017F5 F5               [11] 5508 	push	af
      0017F6 33               [ 6] 5509 	inc	sp
      0017F7 21 4D 1B         [10] 5510 	ld	hl, #0x1b4d
      0017FA E5               [11] 5511 	push	hl
      0017FB CDr00r00         [17] 5512 	call	_WRTVRM
      0017FE F1               [10] 5513 	pop	af
      0017FF 33               [ 6] 5514 	inc	sp
                                   5515 ;src\/Graphics\Graphics.h:151: WRTVRM(SPRATT + 78, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001800 3E 50            [ 7] 5516 	ld	a, #0x50
      001802 F5               [11] 5517 	push	af
      001803 33               [ 6] 5518 	inc	sp
      001804 21 4E 1B         [10] 5519 	ld	hl, #0x1b4e
      001807 E5               [11] 5520 	push	hl
      001808 CDr00r00         [17] 5521 	call	_WRTVRM
      00180B F1               [10] 5522 	pop	af
      00180C 33               [ 6] 5523 	inc	sp
                                   5524 ;src\/Graphics\Graphics.h:152: WRTVRM(SPRATT + 79, 	nextPieceColor_Back);    
      00180D 3Ar9Cr00         [13] 5525 	ld	a,(#_nextPieceColor_Back + 0)
      001810 F5               [11] 5526 	push	af
      001811 33               [ 6] 5527 	inc	sp
      001812 21 4F 1B         [10] 5528 	ld	hl, #0x1b4f
      001815 E5               [11] 5529 	push	hl
      001816 CDr00r00         [17] 5530 	call	_WRTVRM
      001819 F1               [10] 5531 	pop	af
      00181A 33               [ 6] 5532 	inc	sp
                                   5533 ;src\/Graphics\Graphics.h:155: GetNextPieceColors(nextTopPiece);
      00181B 3Ar93r00         [13] 5534 	ld	a,(#_nextTopPiece + 0)
      00181E F5               [11] 5535 	push	af
      00181F 33               [ 6] 5536 	inc	sp
      001820 CDr49r15         [17] 5537 	call	_GetNextPieceColors
      001823 33               [ 6] 5538 	inc	sp
                                   5539 ;src\/Graphics\Graphics.h:156: WRTVRM(SPRATT + 80, 	y);                       // Code repeated for performance reasons
      001824 21 02 00         [10] 5540 	ld	hl, #2
      001827 39               [11] 5541 	add	hl, sp
      001828 7E               [ 7] 5542 	ld	a, (hl)
      001829 F5               [11] 5543 	push	af
      00182A 33               [ 6] 5544 	inc	sp
      00182B 21 50 1B         [10] 5545 	ld	hl, #0x1b50
      00182E E5               [11] 5546 	push	hl
      00182F CDr00r00         [17] 5547 	call	_WRTVRM
      001832 F1               [10] 5548 	pop	af
      001833 33               [ 6] 5549 	inc	sp
                                   5550 ;src\/Graphics\Graphics.h:157: WRTVRM(SPRATT + 81, 	(4 * 8)-4);
      001834 3E 1C            [ 7] 5551 	ld	a, #0x1c
      001836 F5               [11] 5552 	push	af
      001837 33               [ 6] 5553 	inc	sp
      001838 21 51 1B         [10] 5554 	ld	hl, #0x1b51
      00183B E5               [11] 5555 	push	hl
      00183C CDr00r00         [17] 5556 	call	_WRTVRM
      00183F F1               [10] 5557 	pop	af
      001840 33               [ 6] 5558 	inc	sp
                                   5559 ;src\/Graphics\Graphics.h:158: WRTVRM(SPRATT + 82, 	SPRITE_PATTERN_SMALL_BLOCK);
      001841 3E 4C            [ 7] 5560 	ld	a, #0x4c
      001843 F5               [11] 5561 	push	af
      001844 33               [ 6] 5562 	inc	sp
      001845 21 52 1B         [10] 5563 	ld	hl, #0x1b52
      001848 E5               [11] 5564 	push	hl
      001849 CDr00r00         [17] 5565 	call	_WRTVRM
      00184C F1               [10] 5566 	pop	af
      00184D 33               [ 6] 5567 	inc	sp
                                   5568 ;src\/Graphics\Graphics.h:159: WRTVRM(SPRATT + 83, 	nextPieceColor_Front);
      00184E 3Ar9Br00         [13] 5569 	ld	a,(#_nextPieceColor_Front + 0)
      001851 F5               [11] 5570 	push	af
      001852 33               [ 6] 5571 	inc	sp
      001853 21 53 1B         [10] 5572 	ld	hl, #0x1b53
      001856 E5               [11] 5573 	push	hl
      001857 CDr00r00         [17] 5574 	call	_WRTVRM
      00185A F1               [10] 5575 	pop	af
      00185B 33               [ 6] 5576 	inc	sp
                                   5577 ;src\/Graphics\Graphics.h:160: WRTVRM(SPRATT + 84, 	y);
      00185C 21 02 00         [10] 5578 	ld	hl, #2
      00185F 39               [11] 5579 	add	hl, sp
      001860 7E               [ 7] 5580 	ld	a, (hl)
      001861 F5               [11] 5581 	push	af
      001862 33               [ 6] 5582 	inc	sp
      001863 21 54 1B         [10] 5583 	ld	hl, #0x1b54
      001866 E5               [11] 5584 	push	hl
      001867 CDr00r00         [17] 5585 	call	_WRTVRM
      00186A F1               [10] 5586 	pop	af
      00186B 33               [ 6] 5587 	inc	sp
                                   5588 ;src\/Graphics\Graphics.h:161: WRTVRM(SPRATT + 85, 	(4 * 8)-4);
      00186C 3E 1C            [ 7] 5589 	ld	a, #0x1c
      00186E F5               [11] 5590 	push	af
      00186F 33               [ 6] 5591 	inc	sp
      001870 21 55 1B         [10] 5592 	ld	hl, #0x1b55
      001873 E5               [11] 5593 	push	hl
      001874 CDr00r00         [17] 5594 	call	_WRTVRM
      001877 F1               [10] 5595 	pop	af
      001878 33               [ 6] 5596 	inc	sp
                                   5597 ;src\/Graphics\Graphics.h:162: WRTVRM(SPRATT + 86, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001879 3E 50            [ 7] 5598 	ld	a, #0x50
      00187B F5               [11] 5599 	push	af
      00187C 33               [ 6] 5600 	inc	sp
      00187D 21 56 1B         [10] 5601 	ld	hl, #0x1b56
      001880 E5               [11] 5602 	push	hl
      001881 CDr00r00         [17] 5603 	call	_WRTVRM
      001884 F1               [10] 5604 	pop	af
      001885 33               [ 6] 5605 	inc	sp
                                   5606 ;src\/Graphics\Graphics.h:163: WRTVRM(SPRATT + 87, 	nextPieceColor_Back);
      001886 3Ar9Cr00         [13] 5607 	ld	a,(#_nextPieceColor_Back + 0)
      001889 F5               [11] 5608 	push	af
      00188A 33               [ 6] 5609 	inc	sp
      00188B 21 57 1B         [10] 5610 	ld	hl, #0x1b57
      00188E E5               [11] 5611 	push	hl
      00188F CDr00r00         [17] 5612 	call	_WRTVRM
      001892 F1               [10] 5613 	pop	af
      001893 33               [ 6] 5614 	inc	sp
                                   5615 ;src\/Graphics\Graphics.h:165: GetNextPieceColors(nextMidPiece);
      001894 3Ar94r00         [13] 5616 	ld	a,(#_nextMidPiece + 0)
      001897 F5               [11] 5617 	push	af
      001898 33               [ 6] 5618 	inc	sp
      001899 CDr49r15         [17] 5619 	call	_GetNextPieceColors
      00189C 33               [ 6] 5620 	inc	sp
                                   5621 ;src\/Graphics\Graphics.h:166: WRTVRM(SPRATT + 88, 	y + 8);
      00189D FD 21 01 00      [14] 5622 	ld	iy, #1
      0018A1 FD 39            [15] 5623 	add	iy, sp
      0018A3 FD 7E 00         [19] 5624 	ld	a, 0 (iy)
      0018A6 C6 08            [ 7] 5625 	add	a, #0x08
      0018A8 FD 2B            [10] 5626 	dec	iy
      0018AA FD 77 00         [19] 5627 	ld	0 (iy), a
      0018AD F5               [11] 5628 	push	af
      0018AE 33               [ 6] 5629 	inc	sp
      0018AF 21 58 1B         [10] 5630 	ld	hl, #0x1b58
      0018B2 E5               [11] 5631 	push	hl
      0018B3 CDr00r00         [17] 5632 	call	_WRTVRM
      0018B6 F1               [10] 5633 	pop	af
      0018B7 33               [ 6] 5634 	inc	sp
                                   5635 ;src\/Graphics\Graphics.h:167: WRTVRM(SPRATT + 89, 	(4 * 8)-4);
      0018B8 3E 1C            [ 7] 5636 	ld	a, #0x1c
      0018BA F5               [11] 5637 	push	af
      0018BB 33               [ 6] 5638 	inc	sp
      0018BC 21 59 1B         [10] 5639 	ld	hl, #0x1b59
      0018BF E5               [11] 5640 	push	hl
      0018C0 CDr00r00         [17] 5641 	call	_WRTVRM
      0018C3 F1               [10] 5642 	pop	af
      0018C4 33               [ 6] 5643 	inc	sp
                                   5644 ;src\/Graphics\Graphics.h:168: WRTVRM(SPRATT + 90, 	SPRITE_PATTERN_SMALL_BLOCK);
      0018C5 3E 4C            [ 7] 5645 	ld	a, #0x4c
      0018C7 F5               [11] 5646 	push	af
      0018C8 33               [ 6] 5647 	inc	sp
      0018C9 21 5A 1B         [10] 5648 	ld	hl, #0x1b5a
      0018CC E5               [11] 5649 	push	hl
      0018CD CDr00r00         [17] 5650 	call	_WRTVRM
      0018D0 F1               [10] 5651 	pop	af
      0018D1 33               [ 6] 5652 	inc	sp
                                   5653 ;src\/Graphics\Graphics.h:169: WRTVRM(SPRATT + 91, 	nextPieceColor_Front);
      0018D2 3Ar9Br00         [13] 5654 	ld	a,(#_nextPieceColor_Front + 0)
      0018D5 F5               [11] 5655 	push	af
      0018D6 33               [ 6] 5656 	inc	sp
      0018D7 21 5B 1B         [10] 5657 	ld	hl, #0x1b5b
      0018DA E5               [11] 5658 	push	hl
      0018DB CDr00r00         [17] 5659 	call	_WRTVRM
      0018DE F1               [10] 5660 	pop	af
      0018DF 33               [ 6] 5661 	inc	sp
                                   5662 ;src\/Graphics\Graphics.h:170: WRTVRM(SPRATT + 92, 	y + 8);
      0018E0 21 00 00         [10] 5663 	ld	hl, #0
      0018E3 39               [11] 5664 	add	hl, sp
      0018E4 7E               [ 7] 5665 	ld	a, (hl)
      0018E5 F5               [11] 5666 	push	af
      0018E6 33               [ 6] 5667 	inc	sp
      0018E7 21 5C 1B         [10] 5668 	ld	hl, #0x1b5c
      0018EA E5               [11] 5669 	push	hl
      0018EB CDr00r00         [17] 5670 	call	_WRTVRM
      0018EE F1               [10] 5671 	pop	af
      0018EF 33               [ 6] 5672 	inc	sp
                                   5673 ;src\/Graphics\Graphics.h:171: WRTVRM(SPRATT + 93, 	(4 * 8)-4);
      0018F0 3E 1C            [ 7] 5674 	ld	a, #0x1c
      0018F2 F5               [11] 5675 	push	af
      0018F3 33               [ 6] 5676 	inc	sp
      0018F4 21 5D 1B         [10] 5677 	ld	hl, #0x1b5d
      0018F7 E5               [11] 5678 	push	hl
      0018F8 CDr00r00         [17] 5679 	call	_WRTVRM
      0018FB F1               [10] 5680 	pop	af
      0018FC 33               [ 6] 5681 	inc	sp
                                   5682 ;src\/Graphics\Graphics.h:172: WRTVRM(SPRATT + 94, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0018FD 3E 50            [ 7] 5683 	ld	a, #0x50
      0018FF F5               [11] 5684 	push	af
      001900 33               [ 6] 5685 	inc	sp
      001901 21 5E 1B         [10] 5686 	ld	hl, #0x1b5e
      001904 E5               [11] 5687 	push	hl
      001905 CDr00r00         [17] 5688 	call	_WRTVRM
      001908 F1               [10] 5689 	pop	af
      001909 33               [ 6] 5690 	inc	sp
                                   5691 ;src\/Graphics\Graphics.h:173: WRTVRM(SPRATT + 95, 	nextPieceColor_Back);
      00190A 3Ar9Cr00         [13] 5692 	ld	a,(#_nextPieceColor_Back + 0)
      00190D F5               [11] 5693 	push	af
      00190E 33               [ 6] 5694 	inc	sp
      00190F 21 5F 1B         [10] 5695 	ld	hl, #0x1b5f
      001912 E5               [11] 5696 	push	hl
      001913 CDr00r00         [17] 5697 	call	_WRTVRM
      001916 F1               [10] 5698 	pop	af
      001917 33               [ 6] 5699 	inc	sp
                                   5700 ;src\/Graphics\Graphics.h:175: GetNextPieceColors(nextBottomPiece);
      001918 3Ar95r00         [13] 5701 	ld	a,(#_nextBottomPiece + 0)
      00191B F5               [11] 5702 	push	af
      00191C 33               [ 6] 5703 	inc	sp
      00191D CDr49r15         [17] 5704 	call	_GetNextPieceColors
      001920 33               [ 6] 5705 	inc	sp
                                   5706 ;src\/Graphics\Graphics.h:176: WRTVRM(SPRATT + 96, 	y + 16);
      001921 FD 21 01 00      [14] 5707 	ld	iy, #1
      001925 FD 39            [15] 5708 	add	iy, sp
      001927 FD 7E 00         [19] 5709 	ld	a, 0 (iy)
      00192A C6 10            [ 7] 5710 	add	a, #0x10
      00192C FD 77 00         [19] 5711 	ld	0 (iy), a
      00192F F5               [11] 5712 	push	af
      001930 33               [ 6] 5713 	inc	sp
      001931 21 60 1B         [10] 5714 	ld	hl, #0x1b60
      001934 E5               [11] 5715 	push	hl
      001935 CDr00r00         [17] 5716 	call	_WRTVRM
      001938 F1               [10] 5717 	pop	af
      001939 33               [ 6] 5718 	inc	sp
                                   5719 ;src\/Graphics\Graphics.h:177: WRTVRM(SPRATT + 97, 	(4 * 8)-4);
      00193A 3E 1C            [ 7] 5720 	ld	a, #0x1c
      00193C F5               [11] 5721 	push	af
      00193D 33               [ 6] 5722 	inc	sp
      00193E 21 61 1B         [10] 5723 	ld	hl, #0x1b61
      001941 E5               [11] 5724 	push	hl
      001942 CDr00r00         [17] 5725 	call	_WRTVRM
      001945 F1               [10] 5726 	pop	af
      001946 33               [ 6] 5727 	inc	sp
                                   5728 ;src\/Graphics\Graphics.h:178: WRTVRM(SPRATT + 98, 	SPRITE_PATTERN_SMALL_BLOCK);
      001947 3E 4C            [ 7] 5729 	ld	a, #0x4c
      001949 F5               [11] 5730 	push	af
      00194A 33               [ 6] 5731 	inc	sp
      00194B 21 62 1B         [10] 5732 	ld	hl, #0x1b62
      00194E E5               [11] 5733 	push	hl
      00194F CDr00r00         [17] 5734 	call	_WRTVRM
      001952 F1               [10] 5735 	pop	af
      001953 33               [ 6] 5736 	inc	sp
                                   5737 ;src\/Graphics\Graphics.h:179: WRTVRM(SPRATT + 99, 	nextPieceColor_Front);
      001954 3Ar9Br00         [13] 5738 	ld	a,(#_nextPieceColor_Front + 0)
      001957 F5               [11] 5739 	push	af
      001958 33               [ 6] 5740 	inc	sp
      001959 21 63 1B         [10] 5741 	ld	hl, #0x1b63
      00195C E5               [11] 5742 	push	hl
      00195D CDr00r00         [17] 5743 	call	_WRTVRM
      001960 F1               [10] 5744 	pop	af
      001961 33               [ 6] 5745 	inc	sp
                                   5746 ;src\/Graphics\Graphics.h:180: WRTVRM(SPRATT + 100, 	y + 16);
      001962 21 01 00         [10] 5747 	ld	hl, #1
      001965 39               [11] 5748 	add	hl, sp
      001966 7E               [ 7] 5749 	ld	a, (hl)
      001967 F5               [11] 5750 	push	af
      001968 33               [ 6] 5751 	inc	sp
      001969 21 64 1B         [10] 5752 	ld	hl, #0x1b64
      00196C E5               [11] 5753 	push	hl
      00196D CDr00r00         [17] 5754 	call	_WRTVRM
      001970 F1               [10] 5755 	pop	af
      001971 33               [ 6] 5756 	inc	sp
                                   5757 ;src\/Graphics\Graphics.h:181: WRTVRM(SPRATT + 101, 	(4 * 8)-4);
      001972 3E 1C            [ 7] 5758 	ld	a, #0x1c
      001974 F5               [11] 5759 	push	af
      001975 33               [ 6] 5760 	inc	sp
      001976 21 65 1B         [10] 5761 	ld	hl, #0x1b65
      001979 E5               [11] 5762 	push	hl
      00197A CDr00r00         [17] 5763 	call	_WRTVRM
      00197D F1               [10] 5764 	pop	af
      00197E 33               [ 6] 5765 	inc	sp
                                   5766 ;src\/Graphics\Graphics.h:182: WRTVRM(SPRATT + 102, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      00197F 3E 50            [ 7] 5767 	ld	a, #0x50
      001981 F5               [11] 5768 	push	af
      001982 33               [ 6] 5769 	inc	sp
      001983 21 66 1B         [10] 5770 	ld	hl, #0x1b66
      001986 E5               [11] 5771 	push	hl
      001987 CDr00r00         [17] 5772 	call	_WRTVRM
      00198A F1               [10] 5773 	pop	af
      00198B 33               [ 6] 5774 	inc	sp
                                   5775 ;src\/Graphics\Graphics.h:183: WRTVRM(SPRATT + 103, 	nextPieceColor_Back);
      00198C 3Ar9Cr00         [13] 5776 	ld	a,(#_nextPieceColor_Back + 0)
      00198F F5               [11] 5777 	push	af
      001990 33               [ 6] 5778 	inc	sp
      001991 21 67 1B         [10] 5779 	ld	hl, #0x1b67
      001994 E5               [11] 5780 	push	hl
      001995 CDr00r00         [17] 5781 	call	_WRTVRM
      001998 F1               [10] 5782 	pop	af
      001999 33               [ 6] 5783 	inc	sp
                                   5784 ;src\/Graphics\Graphics.h:185: y--;
      00199A FD 21 02 00      [14] 5785 	ld	iy, #2
      00199E FD 39            [15] 5786 	add	iy, sp
      0019A0 FD 35 00         [23] 5787 	dec	0 (iy)
      0019A3 C3rE8r16         [10] 5788 	jp	00104$
      0019A6                       5789 00107$:
                                   5790 ;src\/Graphics\Graphics.h:187: }
      0019A6 F1               [10] 5791 	pop	af
      0019A7 F1               [10] 5792 	pop	af
      0019A8 C9               [10] 5793 	ret
                                   5794 ;src\/Graphics\Graphics.h:189: void DrawScore() {
                                   5795 ;	---------------------------------
                                   5796 ; Function DrawScore
                                   5797 ; ---------------------------------
      0019A9                       5798 _DrawScore::
      0019A9 DD E5            [15] 5799 	push	ix
      0019AB DD 21 00 00      [14] 5800 	ld	ix,#0
      0019AF DD 39            [15] 5801 	add	ix,sp
      0019B1 F5               [11] 5802 	push	af
                                   5803 ;src\/Graphics\Graphics.h:190: byte bgCounter = 0, bgColor;
      0019B2 DD 36 FE 00      [19] 5804 	ld	-2 (ix), #0
                                   5805 ;src\/Graphics\Graphics.h:194: if(newLevel) {
      0019B6 3Ar07r00         [13] 5806 	ld	a,(#_newLevel + 0)
      0019B9 B7               [ 4] 5807 	or	a, a
      0019BA CArB5r1A         [10] 5808 	jp	Z, 00119$
                                   5809 ;src\/Graphics\Graphics.h:195: for(byte i=0; i < 60; i++) {
      0019BD DD 36 FF 00      [19] 5810 	ld	-1 (ix), #0
      0019C1                       5811 00121$:
      0019C1 DD 7E FF         [19] 5812 	ld	a, -1 (ix)
      0019C4 D6 3C            [ 7] 5813 	sub	a, #0x3c
      0019C6 D2rB5r1A         [10] 5814 	jp	NC, 00119$
                                   5815 ;src\/Graphics\Graphics.h:196: lastJiffy = JIFFY;
      0019C9 ED 4B 9E FC      [20] 5816 	ld	bc, (_JIFFY)
                                   5817 ;src\/Graphics\Graphics.h:197: while(lastJiffy == JIFFY) { }
      0019CD                       5818 00101$:
      0019CD 2A 9E FC         [16] 5819 	ld	hl, (_JIFFY)
      0019D0 BF               [ 4] 5820 	cp	a, a
      0019D1 ED 42            [15] 5821 	sbc	hl, bc
      0019D3 28 F8            [12] 5822 	jr	Z, 00101$
                                   5823 ;src\/Graphics\Graphics.h:199: DrawExplosionSprite(26 * 8, 10 * 8, i);
      0019D5 DD 56 FF         [19] 5824 	ld	d, -1 (ix)
      0019D8 1E 50            [ 7] 5825 	ld	e,#0x50
      0019DA D5               [11] 5826 	push	de
      0019DB 3E D0            [ 7] 5827 	ld	a, #0xd0
      0019DD F5               [11] 5828 	push	af
      0019DE 33               [ 6] 5829 	inc	sp
      0019DF CDrDFr0E         [17] 5830 	call	_DrawExplosionSprite
      0019E2 F1               [10] 5831 	pop	af
      0019E3 33               [ 6] 5832 	inc	sp
                                   5833 ;src\/Graphics\Graphics.h:201: if(JIFFY & 0b00000110) {
      0019E4 2A 9E FC         [16] 5834 	ld	hl, (_JIFFY)
      0019E7 7D               [ 4] 5835 	ld	a, l
      0019E8 E6 06            [ 7] 5836 	and	a, #0x06
      0019EA CAr95r1A         [10] 5837 	jp	Z,00115$
                                   5838 ;src\/Graphics\Graphics.h:203: DrawString(" LEVEL", 26, 10);
      0019ED 11 1A 0A         [10] 5839 	ld	de, #0x0a1a
      0019F0 D5               [11] 5840 	push	de
      0019F1 21r37r1B         [10] 5841 	ld	hl, #___str_1
      0019F4 E5               [11] 5842 	push	hl
      0019F5 CDrBBr12         [17] 5843 	call	_DrawString
      0019F8 F1               [10] 5844 	pop	af
      0019F9 F1               [10] 5845 	pop	af
                                   5846 ;src\/Graphics\Graphics.h:204: DrawNumber(level, 26, 11);
      0019FA 3Ar06r00         [13] 5847 	ld	a, (#_level + 0)
      0019FD 4F               [ 4] 5848 	ld	c, a
      0019FE 06 00            [ 7] 5849 	ld	b, #0x00
      001A00 11 1A 0B         [10] 5850 	ld	de, #0x0b1a
      001A03 D5               [11] 5851 	push	de
      001A04 C5               [11] 5852 	push	bc
      001A05 CDrEDr12         [17] 5853 	call	_DrawNumber
      001A08 F1               [10] 5854 	pop	af
      001A09 F1               [10] 5855 	pop	af
                                   5856 ;src\/Graphics\Graphics.h:210: switch(bgCounter++) {
      001A0A DD 4E FE         [19] 5857 	ld	c, -2 (ix)
      001A0D DD 34 FE         [23] 5858 	inc	-2 (ix)
      001A10 3E 07            [ 7] 5859 	ld	a, #0x07
      001A12 91               [ 4] 5860 	sub	a, c
      001A13 38 45            [12] 5861 	jr	C, 00112$
      001A15 06 00            [ 7] 5862 	ld	b, #0x00
      001A17 21r1Er1A         [10] 5863 	ld	hl, #00163$
      001A1A 09               [11] 5864 	add	hl, bc
      001A1B 09               [11] 5865 	add	hl, bc
      001A1C 09               [11] 5866 	add	hl, bc
      001A1D E9               [ 4] 5867 	jp	(hl)
      001A1E                       5868 00163$:
      001A1E C3r36r1A         [10] 5869 	jp	00104$
      001A21 C3r3Ar1A         [10] 5870 	jp	00105$
      001A24 C3r3Er1A         [10] 5871 	jp	00106$
      001A27 C3r42r1A         [10] 5872 	jp	00107$
      001A2A C3r46r1A         [10] 5873 	jp	00108$
      001A2D C3r4Ar1A         [10] 5874 	jp	00109$
      001A30 C3r4Er1A         [10] 5875 	jp	00110$
      001A33 C3r52r1A         [10] 5876 	jp	00111$
                                   5877 ;src\/Graphics\Graphics.h:211: case 0:
      001A36                       5878 00104$:
                                   5879 ;src\/Graphics\Graphics.h:212: bgColor = 0x14;
      001A36 0E 14            [ 7] 5880 	ld	c, #0x14
                                   5881 ;src\/Graphics\Graphics.h:213: break;
      001A38 18 22            [12] 5882 	jr	00113$
                                   5883 ;src\/Graphics\Graphics.h:214: case 1:
      001A3A                       5884 00105$:
                                   5885 ;src\/Graphics\Graphics.h:215: bgColor = 0x15;
      001A3A 0E 15            [ 7] 5886 	ld	c, #0x15
                                   5887 ;src\/Graphics\Graphics.h:216: break;
      001A3C 18 1E            [12] 5888 	jr	00113$
                                   5889 ;src\/Graphics\Graphics.h:217: case 2:
      001A3E                       5890 00106$:
                                   5891 ;src\/Graphics\Graphics.h:218: bgColor = 0x17;
      001A3E 0E 17            [ 7] 5892 	ld	c, #0x17
                                   5893 ;src\/Graphics\Graphics.h:219: break;
      001A40 18 1A            [12] 5894 	jr	00113$
                                   5895 ;src\/Graphics\Graphics.h:220: case 3:
      001A42                       5896 00107$:
                                   5897 ;src\/Graphics\Graphics.h:221: bgColor = 0x1e;
      001A42 0E 1E            [ 7] 5898 	ld	c, #0x1e
                                   5899 ;src\/Graphics\Graphics.h:222: break;
      001A44 18 16            [12] 5900 	jr	00113$
                                   5901 ;src\/Graphics\Graphics.h:223: case 4:
      001A46                       5902 00108$:
                                   5903 ;src\/Graphics\Graphics.h:224: bgColor = 0x1f;
      001A46 0E 1F            [ 7] 5904 	ld	c, #0x1f
                                   5905 ;src\/Graphics\Graphics.h:225: break;
      001A48 18 12            [12] 5906 	jr	00113$
                                   5907 ;src\/Graphics\Graphics.h:226: case 5:
      001A4A                       5908 00109$:
                                   5909 ;src\/Graphics\Graphics.h:227: bgColor = 0x1e;
      001A4A 0E 1E            [ 7] 5910 	ld	c, #0x1e
                                   5911 ;src\/Graphics\Graphics.h:228: break;
      001A4C 18 0E            [12] 5912 	jr	00113$
                                   5913 ;src\/Graphics\Graphics.h:229: case 6:
      001A4E                       5914 00110$:
                                   5915 ;src\/Graphics\Graphics.h:230: bgColor = 0x17;
      001A4E 0E 17            [ 7] 5916 	ld	c, #0x17
                                   5917 ;src\/Graphics\Graphics.h:231: break;
      001A50 18 0A            [12] 5918 	jr	00113$
                                   5919 ;src\/Graphics\Graphics.h:232: case 7:
      001A52                       5920 00111$:
                                   5921 ;src\/Graphics\Graphics.h:233: bgColor = 0x15;
      001A52 0E 15            [ 7] 5922 	ld	c, #0x15
                                   5923 ;src\/Graphics\Graphics.h:234: bgCounter = 0;
      001A54 DD 36 FE 00      [19] 5924 	ld	-2 (ix), #0
                                   5925 ;src\/Graphics\Graphics.h:235: break;
      001A58 18 02            [12] 5926 	jr	00113$
                                   5927 ;src\/Graphics\Graphics.h:236: default:
      001A5A                       5928 00112$:
                                   5929 ;src\/Graphics\Graphics.h:237: bgColor = 0x11;
      001A5A 0E 11            [ 7] 5930 	ld	c, #0x11
                                   5931 ;src\/Graphics\Graphics.h:239: }
      001A5C                       5932 00113$:
                                   5933 ;src\/Graphics\Graphics.h:240: FILVRM(CLRTBL, 8 * 4, bgColor);
      001A5C C5               [11] 5934 	push	bc
      001A5D 79               [ 4] 5935 	ld	a, c
      001A5E F5               [11] 5936 	push	af
      001A5F 33               [ 6] 5937 	inc	sp
      001A60 21 20 00         [10] 5938 	ld	hl, #0x0020
      001A63 E5               [11] 5939 	push	hl
      001A64 21 00 20         [10] 5940 	ld	hl, #0x2000
      001A67 E5               [11] 5941 	push	hl
      001A68 CDr00r00         [17] 5942 	call	_FILVRM
      001A6B F1               [10] 5943 	pop	af
      001A6C F1               [10] 5944 	pop	af
      001A6D 33               [ 6] 5945 	inc	sp
      001A6E C1               [10] 5946 	pop	bc
                                   5947 ;src\/Graphics\Graphics.h:241: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001A6F C5               [11] 5948 	push	bc
      001A70 79               [ 4] 5949 	ld	a, c
      001A71 F5               [11] 5950 	push	af
      001A72 33               [ 6] 5951 	inc	sp
      001A73 21 20 00         [10] 5952 	ld	hl, #0x0020
      001A76 E5               [11] 5953 	push	hl
      001A77 21 00 28         [10] 5954 	ld	hl, #0x2800
      001A7A E5               [11] 5955 	push	hl
      001A7B CDr00r00         [17] 5956 	call	_FILVRM
      001A7E F1               [10] 5957 	pop	af
      001A7F F1               [10] 5958 	pop	af
      001A80 33               [ 6] 5959 	inc	sp
      001A81 C1               [10] 5960 	pop	bc
                                   5961 ;src\/Graphics\Graphics.h:242: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001A82 79               [ 4] 5962 	ld	a, c
      001A83 F5               [11] 5963 	push	af
      001A84 33               [ 6] 5964 	inc	sp
      001A85 21 20 00         [10] 5965 	ld	hl, #0x0020
      001A88 E5               [11] 5966 	push	hl
      001A89 21 00 30         [10] 5967 	ld	hl, #0x3000
      001A8C E5               [11] 5968 	push	hl
      001A8D CDr00r00         [17] 5969 	call	_FILVRM
      001A90 F1               [10] 5970 	pop	af
      001A91 F1               [10] 5971 	pop	af
      001A92 33               [ 6] 5972 	inc	sp
      001A93 18 1A            [12] 5973 	jr	00122$
      001A95                       5974 00115$:
                                   5975 ;src\/Graphics\Graphics.h:247: DrawString("      ", 26, 10);
      001A95 11 1A 0A         [10] 5976 	ld	de, #0x0a1a
      001A98 D5               [11] 5977 	push	de
      001A99 21r3Er1B         [10] 5978 	ld	hl, #___str_2
      001A9C E5               [11] 5979 	push	hl
      001A9D CDrBBr12         [17] 5980 	call	_DrawString
      001AA0 F1               [10] 5981 	pop	af
      001AA1 F1               [10] 5982 	pop	af
                                   5983 ;src\/Graphics\Graphics.h:248: DrawString("      ", 26, 11);
      001AA2 11 1A 0B         [10] 5984 	ld	de, #0x0b1a
      001AA5 D5               [11] 5985 	push	de
      001AA6 21r3Er1B         [10] 5986 	ld	hl, #___str_2
      001AA9 E5               [11] 5987 	push	hl
      001AAA CDrBBr12         [17] 5988 	call	_DrawString
      001AAD F1               [10] 5989 	pop	af
      001AAE F1               [10] 5990 	pop	af
      001AAF                       5991 00122$:
                                   5992 ;src\/Graphics\Graphics.h:195: for(byte i=0; i < 60; i++) {
      001AAF DD 34 FF         [23] 5993 	inc	-1 (ix)
      001AB2 C3rC1r19         [10] 5994 	jp	00121$
      001AB5                       5995 00119$:
                                   5996 ;src\/Graphics\Graphics.h:254: newLevel = FALSE;
      001AB5 21r07r00         [10] 5997 	ld	hl, #_newLevel
      001AB8 36 00            [10] 5998 	ld	(hl), #0x00
                                   5999 ;src\/Graphics\Graphics.h:257: FILVRM(CLRTBL, 8 * 4, 0x14);
      001ABA 3E 14            [ 7] 6000 	ld	a, #0x14
      001ABC F5               [11] 6001 	push	af
      001ABD 33               [ 6] 6002 	inc	sp
      001ABE 21 20 00         [10] 6003 	ld	hl, #0x0020
      001AC1 E5               [11] 6004 	push	hl
      001AC2 21 00 20         [10] 6005 	ld	hl, #0x2000
      001AC5 E5               [11] 6006 	push	hl
      001AC6 CDr00r00         [17] 6007 	call	_FILVRM
      001AC9 F1               [10] 6008 	pop	af
      001ACA F1               [10] 6009 	pop	af
      001ACB 33               [ 6] 6010 	inc	sp
                                   6011 ;src\/Graphics\Graphics.h:258: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001ACC 3E 14            [ 7] 6012 	ld	a, #0x14
      001ACE F5               [11] 6013 	push	af
      001ACF 33               [ 6] 6014 	inc	sp
      001AD0 21 20 00         [10] 6015 	ld	hl, #0x0020
      001AD3 E5               [11] 6016 	push	hl
      001AD4 21 00 28         [10] 6017 	ld	hl, #0x2800
      001AD7 E5               [11] 6018 	push	hl
      001AD8 CDr00r00         [17] 6019 	call	_FILVRM
      001ADB F1               [10] 6020 	pop	af
      001ADC F1               [10] 6021 	pop	af
      001ADD 33               [ 6] 6022 	inc	sp
                                   6023 ;src\/Graphics\Graphics.h:259: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001ADE 3E 14            [ 7] 6024 	ld	a, #0x14
      001AE0 F5               [11] 6025 	push	af
      001AE1 33               [ 6] 6026 	inc	sp
      001AE2 21 20 00         [10] 6027 	ld	hl, #0x0020
      001AE5 E5               [11] 6028 	push	hl
      001AE6 21 00 30         [10] 6029 	ld	hl, #0x3000
      001AE9 E5               [11] 6030 	push	hl
      001AEA CDr00r00         [17] 6031 	call	_FILVRM
      001AED F1               [10] 6032 	pop	af
      001AEE F1               [10] 6033 	pop	af
      001AEF 33               [ 6] 6034 	inc	sp
                                   6035 ;src\/Graphics\Graphics.h:261: DrawString("NEXT", 2, 1);
      001AF0 11 02 01         [10] 6036 	ld	de, #0x0102
      001AF3 D5               [11] 6037 	push	de
      001AF4 21r45r1B         [10] 6038 	ld	hl, #___str_3
      001AF7 E5               [11] 6039 	push	hl
      001AF8 CDrBBr12         [17] 6040 	call	_DrawString
      001AFB F1               [10] 6041 	pop	af
      001AFC F1               [10] 6042 	pop	af
                                   6043 ;src\/Graphics\Graphics.h:263: DrawString(" LEVEL", 26, 10);
      001AFD 11 1A 0A         [10] 6044 	ld	de, #0x0a1a
      001B00 D5               [11] 6045 	push	de
      001B01 21r37r1B         [10] 6046 	ld	hl, #___str_1
      001B04 E5               [11] 6047 	push	hl
      001B05 CDrBBr12         [17] 6048 	call	_DrawString
      001B08 F1               [10] 6049 	pop	af
      001B09 F1               [10] 6050 	pop	af
                                   6051 ;src\/Graphics\Graphics.h:264: DrawString("BLOCKS", 26, 18);
      001B0A 11 1A 12         [10] 6052 	ld	de, #0x121a
      001B0D D5               [11] 6053 	push	de
      001B0E 21r4Ar1B         [10] 6054 	ld	hl, #___str_4
      001B11 E5               [11] 6055 	push	hl
      001B12 CDrBBr12         [17] 6056 	call	_DrawString
      001B15 F1               [10] 6057 	pop	af
      001B16 F1               [10] 6058 	pop	af
                                   6059 ;src\/Graphics\Graphics.h:267: DrawNumber(level, 26, 11);
      001B17 3Ar06r00         [13] 6060 	ld	a, (#_level + 0)
      001B1A 4F               [ 4] 6061 	ld	c, a
      001B1B 06 00            [ 7] 6062 	ld	b, #0x00
      001B1D 11 1A 0B         [10] 6063 	ld	de, #0x0b1a
      001B20 D5               [11] 6064 	push	de
      001B21 C5               [11] 6065 	push	bc
      001B22 CDrEDr12         [17] 6066 	call	_DrawNumber
      001B25 F1               [10] 6067 	pop	af
      001B26 F1               [10] 6068 	pop	af
                                   6069 ;src\/Graphics\Graphics.h:268: DrawNumber(blocksRemoved, 26, 19);
      001B27 11 1A 13         [10] 6070 	ld	de, #0x131a
      001B2A D5               [11] 6071 	push	de
      001B2B 2Ar04r00         [16] 6072 	ld	hl, (_blocksRemoved)
      001B2E E5               [11] 6073 	push	hl
      001B2F CDrEDr12         [17] 6074 	call	_DrawNumber
                                   6075 ;src\/Graphics\Graphics.h:271: }
      001B32 DD F9            [10] 6076 	ld	sp,ix
      001B34 DD E1            [14] 6077 	pop	ix
      001B36 C9               [10] 6078 	ret
      001B37                       6079 ___str_1:
      001B37 20 4C 45 56 45 4C     6080 	.ascii " LEVEL"
      001B3D 00                    6081 	.db 0x00
      001B3E                       6082 ___str_2:
      001B3E 20 20 20 20 20 20     6083 	.ascii "      "
      001B44 00                    6084 	.db 0x00
      001B45                       6085 ___str_3:
      001B45 4E 45 58 54           6086 	.ascii "NEXT"
      001B49 00                    6087 	.db 0x00
      001B4A                       6088 ___str_4:
      001B4A 42 4C 4F 43 4B 53     6089 	.ascii "BLOCKS"
      001B50 00                    6090 	.db 0x00
                                   6091 ;src\/Graphics\Graphics.h:273: void DrawBackground() {
                                   6092 ;	---------------------------------
                                   6093 ; Function DrawBackground
                                   6094 ; ---------------------------------
      001B51                       6095 _DrawBackground::
                                   6096 ;src\/Graphics\Graphics.h:275: for(int i = 0; i < 256 * 3; i++) {
      001B51 01 00 00         [10] 6097 	ld	bc, #0x0000
      001B54                       6098 00103$:
      001B54 78               [ 4] 6099 	ld	a, b
      001B55 EE 80            [ 7] 6100 	xor	a, #0x80
      001B57 D6 83            [ 7] 6101 	sub	a, #0x83
      001B59 30 12            [12] 6102 	jr	NC, 00101$
                                   6103 ;src\/Graphics\Graphics.h:276: WRTVRM(NAMTBL + i, EMPTY); // test
      001B5B 21 00 18         [10] 6104 	ld	hl, #0x1800
      001B5E 09               [11] 6105 	add	hl, bc
      001B5F C5               [11] 6106 	push	bc
      001B60 AF               [ 4] 6107 	xor	a, a
      001B61 F5               [11] 6108 	push	af
      001B62 33               [ 6] 6109 	inc	sp
      001B63 E5               [11] 6110 	push	hl
      001B64 CDr00r00         [17] 6111 	call	_WRTVRM
      001B67 F1               [10] 6112 	pop	af
      001B68 33               [ 6] 6113 	inc	sp
      001B69 C1               [10] 6114 	pop	bc
                                   6115 ;src\/Graphics\Graphics.h:275: for(int i = 0; i < 256 * 3; i++) {
      001B6A 03               [ 6] 6116 	inc	bc
      001B6B 18 E7            [12] 6117 	jr	00103$
      001B6D                       6118 00101$:
                                   6119 ;src\/Graphics\Graphics.h:279: DrawColumn(7);
      001B6D 3E 07            [ 7] 6120 	ld	a, #0x07
      001B6F F5               [11] 6121 	push	af
      001B70 33               [ 6] 6122 	inc	sp
      001B71 CDrA8r13         [17] 6123 	call	_DrawColumn
      001B74 33               [ 6] 6124 	inc	sp
                                   6125 ;src\/Graphics\Graphics.h:280: DrawColumn(22);
      001B75 3E 16            [ 7] 6126 	ld	a, #0x16
      001B77 F5               [11] 6127 	push	af
      001B78 33               [ 6] 6128 	inc	sp
      001B79 CDrA8r13         [17] 6129 	call	_DrawColumn
      001B7C 33               [ 6] 6130 	inc	sp
                                   6131 ;src\/Graphics\Graphics.h:282: DrawScore();
                                   6132 ;src\/Graphics\Graphics.h:318: }
      001B7D C3rA9r19         [10] 6133 	jp	_DrawScore
                                   6134 ;src\/Graphics\Graphics.h:320: void InitVRAM() {
                                   6135 ;	---------------------------------
                                   6136 ; Function InitVRAM
                                   6137 ; ---------------------------------
      001B80                       6138 _InitVRAM::
      001B80 DD E5            [15] 6139 	push	ix
      001B82 DD 21 00 00      [14] 6140 	ld	ix,#0
      001B86 DD 39            [15] 6141 	add	ix,sp
      001B88 3B               [ 6] 6142 	dec	sp
                                   6143 ;src\/Graphics\Graphics.h:325: CLIKSW = 0;	// disable keyboard sound
      001B89 21 00 00         [10] 6144 	ld	hl, #0x0000
      001B8C 22 DB F3         [16] 6145 	ld	(_CLIKSW), hl
                                   6146 ;src\/Graphics\Graphics.h:326: SCNCNT = 1; 	// set keyboard scan counter
      001B8F 21 F6 F3         [10] 6147 	ld	hl, #_SCNCNT
      001B92 36 01            [10] 6148 	ld	(hl), #0x01
                                   6149 ;src\/Graphics\Graphics.h:328: FORCLR = COLOR_WHITE;
      001B94 21 E9 F3         [10] 6150 	ld	hl, #_FORCLR
      001B97 36 0F            [10] 6151 	ld	(hl), #0x0f
                                   6152 ;src\/Graphics\Graphics.h:329: BAKCLR = COLOR_BLACK;
      001B99 21 EA F3         [10] 6153 	ld	hl, #_BAKCLR
      001B9C 36 01            [10] 6154 	ld	(hl), #0x01
                                   6155 ;src\/Graphics\Graphics.h:330: BDRCLR = COLOR_BLACK;
      001B9E 21 EB F3         [10] 6156 	ld	hl, #_BDRCLR
      001BA1 36 01            [10] 6157 	ld	(hl), #0x01
                                   6158 ;src\/Graphics\Graphics.h:358: WRTVDP(0b0000000111100010);
      001BA3 21 E2 01         [10] 6159 	ld	hl, #0x01e2
      001BA6 CDr00r00         [17] 6160 	call	_WRTVDP
                                   6161 ;src\/Graphics\Graphics.h:360: INIGRP();	// Set screen 2
      001BA9 CDr00r00         [17] 6162 	call	_INIGRP
                                   6163 ;src\/Graphics\Graphics.h:362: DISSCR();	// Disable screen (faster to write)
      001BAC CDr00r00         [17] 6164 	call	_DISSCR
                                   6165 ;src\/Graphics\Graphics.h:366: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001BAF AF               [ 4] 6166 	xor	a, a
      001BB0 F5               [11] 6167 	push	af
      001BB1 33               [ 6] 6168 	inc	sp
      001BB2 21 00 40         [10] 6169 	ld	hl, #0x4000
      001BB5 E5               [11] 6170 	push	hl
      001BB6 65               [ 4] 6171 	ld	h, l
      001BB7 E5               [11] 6172 	push	hl
      001BB8 CDr00r00         [17] 6173 	call	_FILVRM
      001BBB F1               [10] 6174 	pop	af
                                   6175 ;src\/Graphics\Graphics.h:375: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001BBC 33               [ 6] 6176 	inc	sp
      001BBD 21 A0 04         [10] 6177 	ld	hl,#0x04a0
      001BC0 E3               [19] 6178 	ex	(sp),hl
      001BC1 21rA8r07         [10] 6179 	ld	hl, #_sprite_arrow_0
      001BC4 E5               [11] 6180 	push	hl
      001BC5 21 00 38         [10] 6181 	ld	hl, #0x3800
      001BC8 E5               [11] 6182 	push	hl
      001BC9 CDr00r00         [17] 6183 	call	_LDIRVM
      001BCC 21 06 00         [10] 6184 	ld	hl, #6
      001BCF 39               [11] 6185 	add	hl, sp
      001BD0 F9               [ 6] 6186 	ld	sp, hl
                                   6187 ;src\/Graphics\Graphics.h:381: for(byte i=0; i<32; i++) {
      001BD1 0E 00            [ 7] 6188 	ld	c, #0x00
      001BD3                       6189 00110$:
                                   6190 ;src\/Graphics\Graphics.h:382: WRTVRM(SPRATT + (i * 4), 	192);
      001BD3 79               [ 4] 6191 	ld	a,c
      001BD4 FE 20            [ 7] 6192 	cp	a,#0x20
      001BD6 30 18            [12] 6193 	jr	NC, 00101$
      001BD8 26 00            [ 7] 6194 	ld	h, #0x00
      001BDA 6F               [ 4] 6195 	ld	l, a
      001BDB 29               [11] 6196 	add	hl, hl
      001BDC 29               [11] 6197 	add	hl, hl
      001BDD 7C               [ 4] 6198 	ld	a, h
      001BDE C6 1B            [ 7] 6199 	add	a, #0x1b
      001BE0 67               [ 4] 6200 	ld	h, a
      001BE1 C5               [11] 6201 	push	bc
      001BE2 3E C0            [ 7] 6202 	ld	a, #0xc0
      001BE4 F5               [11] 6203 	push	af
      001BE5 33               [ 6] 6204 	inc	sp
      001BE6 E5               [11] 6205 	push	hl
      001BE7 CDr00r00         [17] 6206 	call	_WRTVRM
      001BEA F1               [10] 6207 	pop	af
      001BEB 33               [ 6] 6208 	inc	sp
      001BEC C1               [10] 6209 	pop	bc
                                   6210 ;src\/Graphics\Graphics.h:381: for(byte i=0; i<32; i++) {
      001BED 0C               [ 4] 6211 	inc	c
      001BEE 18 E3            [12] 6212 	jr	00110$
      001BF0                       6213 00101$:
                                   6214 ;src\/Graphics\Graphics.h:391: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001BF0 21 78 01         [10] 6215 	ld	hl, #0x0178
      001BF3 E5               [11] 6216 	push	hl
      001BF4 21r78r04         [10] 6217 	ld	hl, #_pattern_black_0
      001BF7 E5               [11] 6218 	push	hl
      001BF8 21 00 00         [10] 6219 	ld	hl, #0x0000
      001BFB E5               [11] 6220 	push	hl
      001BFC CDr00r00         [17] 6221 	call	_LDIRVM
      001BFF 21 06 00         [10] 6222 	ld	hl, #6
      001C02 39               [11] 6223 	add	hl, sp
      001C03 F9               [ 6] 6224 	ld	sp, hl
                                   6225 ;src\/Graphics\Graphics.h:394: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001C04 21 78 01         [10] 6226 	ld	hl, #0x0178
      001C07 E5               [11] 6227 	push	hl
      001C08 21r78r04         [10] 6228 	ld	hl, #_pattern_black_0
      001C0B E5               [11] 6229 	push	hl
      001C0C 21 00 08         [10] 6230 	ld	hl, #0x0800
      001C0F E5               [11] 6231 	push	hl
      001C10 CDr00r00         [17] 6232 	call	_LDIRVM
      001C13 21 06 00         [10] 6233 	ld	hl, #6
      001C16 39               [11] 6234 	add	hl, sp
      001C17 F9               [ 6] 6235 	ld	sp, hl
                                   6236 ;src\/Graphics\Graphics.h:397: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001C18 21 78 01         [10] 6237 	ld	hl, #0x0178
      001C1B E5               [11] 6238 	push	hl
      001C1C 21r78r04         [10] 6239 	ld	hl, #_pattern_black_0
      001C1F E5               [11] 6240 	push	hl
      001C20 21 00 10         [10] 6241 	ld	hl, #0x1000
      001C23 E5               [11] 6242 	push	hl
      001C24 CDr00r00         [17] 6243 	call	_LDIRVM
      001C27 21 06 00         [10] 6244 	ld	hl, #6
      001C2A 39               [11] 6245 	add	hl, sp
      001C2B F9               [ 6] 6246 	ld	sp, hl
                                   6247 ;src\/Graphics\Graphics.h:400: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001C2C 21 00 03         [10] 6248 	ld	hl, #0x0300
      001C2F E5               [11] 6249 	push	hl
      001C30 21r78r01         [10] 6250 	ld	hl, #_FONT
      001C33 E5               [11] 6251 	push	hl
      001C34 21 78 01         [10] 6252 	ld	hl, #0x0178
      001C37 E5               [11] 6253 	push	hl
      001C38 CDr00r00         [17] 6254 	call	_LDIRVM
      001C3B 21 06 00         [10] 6255 	ld	hl, #6
      001C3E 39               [11] 6256 	add	hl, sp
      001C3F F9               [ 6] 6257 	ld	sp, hl
                                   6258 ;src\/Graphics\Graphics.h:403: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001C40 21 00 03         [10] 6259 	ld	hl, #0x0300
      001C43 E5               [11] 6260 	push	hl
      001C44 21r78r01         [10] 6261 	ld	hl, #_FONT
      001C47 E5               [11] 6262 	push	hl
      001C48 21 78 09         [10] 6263 	ld	hl, #0x0978
      001C4B E5               [11] 6264 	push	hl
      001C4C CDr00r00         [17] 6265 	call	_LDIRVM
      001C4F 21 06 00         [10] 6266 	ld	hl, #6
      001C52 39               [11] 6267 	add	hl, sp
      001C53 F9               [ 6] 6268 	ld	sp, hl
                                   6269 ;src\/Graphics\Graphics.h:406: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001C54 21 00 03         [10] 6270 	ld	hl, #0x0300
      001C57 E5               [11] 6271 	push	hl
      001C58 21r78r01         [10] 6272 	ld	hl, #_FONT
      001C5B E5               [11] 6273 	push	hl
      001C5C 21 78 11         [10] 6274 	ld	hl, #0x1178
      001C5F E5               [11] 6275 	push	hl
      001C60 CDr00r00         [17] 6276 	call	_LDIRVM
      001C63 21 06 00         [10] 6277 	ld	hl, #6
      001C66 39               [11] 6278 	add	hl, sp
      001C67 F9               [ 6] 6279 	ld	sp, hl
                                   6280 ;src\/Graphics\Graphics.h:410: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001C68 0E 00            [ 7] 6281 	ld	c, #0x00
      001C6A                       6282 00113$:
                                   6283 ;src\/Graphics\Graphics.h:411: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      001C6A 79               [ 4] 6284 	ld	a,c
      001C6B FE 07            [ 7] 6285 	cp	a,#0x07
      001C6D 30 20            [12] 6286 	jr	NC, 00102$
      001C6F 26 00            [ 7] 6287 	ld	h, #0x00
      001C71 6F               [ 4] 6288 	ld	l, a
      001C72 29               [11] 6289 	add	hl, hl
      001C73 29               [11] 6290 	add	hl, hl
      001C74 29               [11] 6291 	add	hl, hl
      001C75 11 70 04         [10] 6292 	ld	de, #0x0470
      001C78 19               [11] 6293 	add	hl, de
      001C79 C5               [11] 6294 	push	bc
      001C7A 11 38 00         [10] 6295 	ld	de, #0x0038
      001C7D D5               [11] 6296 	push	de
      001C7E 11rE8r05         [10] 6297 	ld	de, #_pattern_title
      001C81 D5               [11] 6298 	push	de
      001C82 E5               [11] 6299 	push	hl
      001C83 CDr00r00         [17] 6300 	call	_LDIRVM
      001C86 21 06 00         [10] 6301 	ld	hl, #6
      001C89 39               [11] 6302 	add	hl, sp
      001C8A F9               [ 6] 6303 	ld	sp, hl
      001C8B C1               [10] 6304 	pop	bc
                                   6305 ;src\/Graphics\Graphics.h:410: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001C8C 0C               [ 4] 6306 	inc	c
      001C8D 18 DB            [12] 6307 	jr	00113$
      001C8F                       6308 00102$:
                                   6309 ;src\/Graphics\Graphics.h:417: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001C8F 21 78 01         [10] 6310 	ld	hl, #0x0178
      001C92 E5               [11] 6311 	push	hl
      001C93 21rF0r05         [10] 6312 	ld	hl, #_color_black_0
      001C96 E5               [11] 6313 	push	hl
      001C97 21 00 20         [10] 6314 	ld	hl, #0x2000
      001C9A E5               [11] 6315 	push	hl
      001C9B CDr00r00         [17] 6316 	call	_LDIRVM
      001C9E 21 06 00         [10] 6317 	ld	hl, #6
      001CA1 39               [11] 6318 	add	hl, sp
      001CA2 F9               [ 6] 6319 	ld	sp, hl
                                   6320 ;src\/Graphics\Graphics.h:419: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001CA3 21 78 01         [10] 6321 	ld	hl, #0x0178
      001CA6 E5               [11] 6322 	push	hl
      001CA7 21rF0r05         [10] 6323 	ld	hl, #_color_black_0
      001CAA E5               [11] 6324 	push	hl
      001CAB 21 00 28         [10] 6325 	ld	hl, #0x2800
      001CAE E5               [11] 6326 	push	hl
      001CAF CDr00r00         [17] 6327 	call	_LDIRVM
      001CB2 21 06 00         [10] 6328 	ld	hl, #6
      001CB5 39               [11] 6329 	add	hl, sp
      001CB6 F9               [ 6] 6330 	ld	sp, hl
                                   6331 ;src\/Graphics\Graphics.h:421: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001CB7 21 78 01         [10] 6332 	ld	hl, #0x0178
      001CBA E5               [11] 6333 	push	hl
      001CBB 21rF0r05         [10] 6334 	ld	hl, #_color_black_0
      001CBE E5               [11] 6335 	push	hl
      001CBF 21 00 30         [10] 6336 	ld	hl, #0x3000
      001CC2 E5               [11] 6337 	push	hl
      001CC3 CDr00r00         [17] 6338 	call	_LDIRVM
      001CC6 21 06 00         [10] 6339 	ld	hl, #6
      001CC9 39               [11] 6340 	add	hl, sp
      001CCA F9               [ 6] 6341 	ld	sp, hl
                                   6342 ;src\/Graphics\Graphics.h:428: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001CCB 0E 00            [ 7] 6343 	ld	c, #0x00
      001CCD                       6344 00116$:
                                   6345 ;src\/Graphics\Graphics.h:429: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001CCD 79               [ 4] 6346 	ld	a,c
      001CCE FE 60            [ 7] 6347 	cp	a,#0x60
      001CD0 30 20            [12] 6348 	jr	NC, 00103$
      001CD2 26 00            [ 7] 6349 	ld	h, #0x00
      001CD4 6F               [ 4] 6350 	ld	l, a
      001CD5 29               [11] 6351 	add	hl, hl
      001CD6 29               [11] 6352 	add	hl, hl
      001CD7 29               [11] 6353 	add	hl, hl
      001CD8 11 78 21         [10] 6354 	ld	de, #0x2178
      001CDB 19               [11] 6355 	add	hl, de
      001CDC C5               [11] 6356 	push	bc
      001CDD 11 08 00         [10] 6357 	ld	de, #0x0008
      001CE0 D5               [11] 6358 	push	de
      001CE1 11r68r07         [10] 6359 	ld	de, #_color_font_2
      001CE4 D5               [11] 6360 	push	de
      001CE5 E5               [11] 6361 	push	hl
      001CE6 CDr00r00         [17] 6362 	call	_LDIRVM
      001CE9 21 06 00         [10] 6363 	ld	hl, #6
      001CEC 39               [11] 6364 	add	hl, sp
      001CED F9               [ 6] 6365 	ld	sp, hl
      001CEE C1               [10] 6366 	pop	bc
                                   6367 ;src\/Graphics\Graphics.h:428: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001CEF 0C               [ 4] 6368 	inc	c
      001CF0 18 DB            [12] 6369 	jr	00116$
      001CF2                       6370 00103$:
                                   6371 ;src\/Graphics\Graphics.h:432: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001CF2 0E 00            [ 7] 6372 	ld	c, #0x00
      001CF4                       6373 00119$:
                                   6374 ;src\/Graphics\Graphics.h:433: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001CF4 79               [ 4] 6375 	ld	a,c
      001CF5 FE 60            [ 7] 6376 	cp	a,#0x60
      001CF7 30 20            [12] 6377 	jr	NC, 00104$
      001CF9 26 00            [ 7] 6378 	ld	h, #0x00
      001CFB 6F               [ 4] 6379 	ld	l, a
      001CFC 29               [11] 6380 	add	hl, hl
      001CFD 29               [11] 6381 	add	hl, hl
      001CFE 29               [11] 6382 	add	hl, hl
      001CFF 11 78 29         [10] 6383 	ld	de, #0x2978
      001D02 19               [11] 6384 	add	hl, de
      001D03 C5               [11] 6385 	push	bc
      001D04 11 08 00         [10] 6386 	ld	de, #0x0008
      001D07 D5               [11] 6387 	push	de
      001D08 11r68r07         [10] 6388 	ld	de, #_color_font_2
      001D0B D5               [11] 6389 	push	de
      001D0C E5               [11] 6390 	push	hl
      001D0D CDr00r00         [17] 6391 	call	_LDIRVM
      001D10 21 06 00         [10] 6392 	ld	hl, #6
      001D13 39               [11] 6393 	add	hl, sp
      001D14 F9               [ 6] 6394 	ld	sp, hl
      001D15 C1               [10] 6395 	pop	bc
                                   6396 ;src\/Graphics\Graphics.h:432: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001D16 0C               [ 4] 6397 	inc	c
      001D17 18 DB            [12] 6398 	jr	00119$
      001D19                       6399 00104$:
                                   6400 ;src\/Graphics\Graphics.h:436: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001D19 0E 00            [ 7] 6401 	ld	c, #0x00
      001D1B                       6402 00122$:
                                   6403 ;src\/Graphics\Graphics.h:437: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001D1B 79               [ 4] 6404 	ld	a,c
      001D1C FE 60            [ 7] 6405 	cp	a,#0x60
      001D1E 30 20            [12] 6406 	jr	NC, 00105$
      001D20 26 00            [ 7] 6407 	ld	h, #0x00
      001D22 6F               [ 4] 6408 	ld	l, a
      001D23 29               [11] 6409 	add	hl, hl
      001D24 29               [11] 6410 	add	hl, hl
      001D25 29               [11] 6411 	add	hl, hl
      001D26 11 78 31         [10] 6412 	ld	de, #0x3178
      001D29 19               [11] 6413 	add	hl, de
      001D2A C5               [11] 6414 	push	bc
      001D2B 11 08 00         [10] 6415 	ld	de, #0x0008
      001D2E D5               [11] 6416 	push	de
      001D2F 11r68r07         [10] 6417 	ld	de, #_color_font_2
      001D32 D5               [11] 6418 	push	de
      001D33 E5               [11] 6419 	push	hl
      001D34 CDr00r00         [17] 6420 	call	_LDIRVM
      001D37 21 06 00         [10] 6421 	ld	hl, #6
      001D3A 39               [11] 6422 	add	hl, sp
      001D3B F9               [ 6] 6423 	ld	sp, hl
      001D3C C1               [10] 6424 	pop	bc
                                   6425 ;src\/Graphics\Graphics.h:436: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001D3D 0C               [ 4] 6426 	inc	c
      001D3E 18 DB            [12] 6427 	jr	00122$
      001D40                       6428 00105$:
                                   6429 ;src\/Graphics\Graphics.h:445: for(byte i = 0; i < 10; i++) {
      001D40 0E 00            [ 7] 6430 	ld	c, #0x00
      001D42                       6431 00125$:
                                   6432 ;src\/Graphics\Graphics.h:446: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001D42 79               [ 4] 6433 	ld	a,c
      001D43 FE 0A            [ 7] 6434 	cp	a,#0x0a
      001D45 30 20            [12] 6435 	jr	NC, 00106$
      001D47 26 00            [ 7] 6436 	ld	h, #0x00
      001D49 6F               [ 4] 6437 	ld	l, a
      001D4A 29               [11] 6438 	add	hl, hl
      001D4B 29               [11] 6439 	add	hl, hl
      001D4C 29               [11] 6440 	add	hl, hl
      001D4D 11 F8 21         [10] 6441 	ld	de, #0x21f8
      001D50 19               [11] 6442 	add	hl, de
      001D51 C5               [11] 6443 	push	bc
      001D52 11 08 00         [10] 6444 	ld	de, #0x0008
      001D55 D5               [11] 6445 	push	de
      001D56 11r60r07         [10] 6446 	ld	de, #_color_font_1
      001D59 D5               [11] 6447 	push	de
      001D5A E5               [11] 6448 	push	hl
      001D5B CDr00r00         [17] 6449 	call	_LDIRVM
      001D5E 21 06 00         [10] 6450 	ld	hl, #6
      001D61 39               [11] 6451 	add	hl, sp
      001D62 F9               [ 6] 6452 	ld	sp, hl
      001D63 C1               [10] 6453 	pop	bc
                                   6454 ;src\/Graphics\Graphics.h:445: for(byte i = 0; i < 10; i++) {
      001D64 0C               [ 4] 6455 	inc	c
      001D65 18 DB            [12] 6456 	jr	00125$
      001D67                       6457 00106$:
                                   6458 ;src\/Graphics\Graphics.h:449: for(byte i = 0; i < 10; i++) {
      001D67 0E 00            [ 7] 6459 	ld	c, #0x00
      001D69                       6460 00128$:
                                   6461 ;src\/Graphics\Graphics.h:450: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001D69 79               [ 4] 6462 	ld	a,c
      001D6A FE 0A            [ 7] 6463 	cp	a,#0x0a
      001D6C 30 20            [12] 6464 	jr	NC, 00107$
      001D6E 26 00            [ 7] 6465 	ld	h, #0x00
      001D70 6F               [ 4] 6466 	ld	l, a
      001D71 29               [11] 6467 	add	hl, hl
      001D72 29               [11] 6468 	add	hl, hl
      001D73 29               [11] 6469 	add	hl, hl
      001D74 11 F8 29         [10] 6470 	ld	de, #0x29f8
      001D77 19               [11] 6471 	add	hl, de
      001D78 C5               [11] 6472 	push	bc
      001D79 11 08 00         [10] 6473 	ld	de, #0x0008
      001D7C D5               [11] 6474 	push	de
      001D7D 11r60r07         [10] 6475 	ld	de, #_color_font_1
      001D80 D5               [11] 6476 	push	de
      001D81 E5               [11] 6477 	push	hl
      001D82 CDr00r00         [17] 6478 	call	_LDIRVM
      001D85 21 06 00         [10] 6479 	ld	hl, #6
      001D88 39               [11] 6480 	add	hl, sp
      001D89 F9               [ 6] 6481 	ld	sp, hl
      001D8A C1               [10] 6482 	pop	bc
                                   6483 ;src\/Graphics\Graphics.h:449: for(byte i = 0; i < 10; i++) {
      001D8B 0C               [ 4] 6484 	inc	c
      001D8C 18 DB            [12] 6485 	jr	00128$
      001D8E                       6486 00107$:
                                   6487 ;src\/Graphics\Graphics.h:453: for(byte i = 0; i < 10; i++) {
      001D8E DD 36 FF 00      [19] 6488 	ld	-1 (ix), #0
      001D92                       6489 00131$:
      001D92 DD 7E FF         [19] 6490 	ld	a, -1 (ix)
      001D95 D6 0A            [ 7] 6491 	sub	a, #0x0a
      001D97 30 22            [12] 6492 	jr	NC, 00108$
                                   6493 ;src\/Graphics\Graphics.h:454: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001D99 01r60r07         [10] 6494 	ld	bc, #_color_font_1
      001D9C DD 6E FF         [19] 6495 	ld	l, -1 (ix)
      001D9F 26 00            [ 7] 6496 	ld	h, #0x00
      001DA1 29               [11] 6497 	add	hl, hl
      001DA2 29               [11] 6498 	add	hl, hl
      001DA3 29               [11] 6499 	add	hl, hl
      001DA4 11 F8 31         [10] 6500 	ld	de, #0x31f8
      001DA7 19               [11] 6501 	add	hl, de
      001DA8 11 08 00         [10] 6502 	ld	de, #0x0008
      001DAB D5               [11] 6503 	push	de
      001DAC C5               [11] 6504 	push	bc
      001DAD E5               [11] 6505 	push	hl
      001DAE CDr00r00         [17] 6506 	call	_LDIRVM
      001DB1 21 06 00         [10] 6507 	ld	hl, #6
      001DB4 39               [11] 6508 	add	hl, sp
      001DB5 F9               [ 6] 6509 	ld	sp, hl
                                   6510 ;src\/Graphics\Graphics.h:453: for(byte i = 0; i < 10; i++) {
      001DB6 DD 34 FF         [23] 6511 	inc	-1 (ix)
      001DB9 18 D7            [12] 6512 	jr	00131$
      001DBB                       6513 00108$:
                                   6514 ;src\/Graphics\Graphics.h:458: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001DBB 21 38 00         [10] 6515 	ld	hl, #0x0038
      001DBE E5               [11] 6516 	push	hl
      001DBF 21r70r07         [10] 6517 	ld	hl, #_color_title_1
      001DC2 E5               [11] 6518 	push	hl
      001DC3 21 70 24         [10] 6519 	ld	hl, #0x2470
      001DC6 E5               [11] 6520 	push	hl
      001DC7 CDr00r00         [17] 6521 	call	_LDIRVM
      001DCA 21 06 00         [10] 6522 	ld	hl, #6
      001DCD 39               [11] 6523 	add	hl, sp
      001DCE F9               [ 6] 6524 	ld	sp, hl
                                   6525 ;src\/Graphics\Graphics.h:466: ENASCR();	// Enable screen
      001DCF CDr00r00         [17] 6526 	call	_ENASCR
                                   6527 ;src\/Graphics\Graphics.h:467: }
      001DD2 33               [ 6] 6528 	inc	sp
      001DD3 DD E1            [14] 6529 	pop	ix
      001DD5 C9               [10] 6530 	ret
                                   6531 ;src\/Graphics\Graphics.h:469: void DrawBlock(byte col, byte line, byte tile) {
                                   6532 ;	---------------------------------
                                   6533 ; Function DrawBlock
                                   6534 ; ---------------------------------
      001DD6                       6535 _DrawBlock::
      001DD6 DD E5            [15] 6536 	push	ix
      001DD8 DD 21 00 00      [14] 6537 	ld	ix,#0
      001DDC DD 39            [15] 6538 	add	ix,sp
                                   6539 ;src\/Graphics\Graphics.h:471: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001DDE DD 6E 04         [19] 6540 	ld	l, 4 (ix)
      001DE1 26 00            [ 7] 6541 	ld	h, #0x00
      001DE3 29               [11] 6542 	add	hl, hl
      001DE4 4D               [ 4] 6543 	ld	c, l
      001DE5 44               [ 4] 6544 	ld	b, h
      001DE6 DD 6E 05         [19] 6545 	ld	l, 5 (ix)
      001DE9 26 00            [ 7] 6546 	ld	h, #0x00
      001DEB 29               [11] 6547 	add	hl, hl
      001DEC 29               [11] 6548 	add	hl, hl
      001DED 29               [11] 6549 	add	hl, hl
      001DEE 29               [11] 6550 	add	hl, hl
      001DEF 29               [11] 6551 	add	hl, hl
      001DF0 29               [11] 6552 	add	hl, hl
      001DF1 11 0A 18         [10] 6553 	ld	de, #0x180a
      001DF4 19               [11] 6554 	add	hl, de
      001DF5 09               [11] 6555 	add	hl, bc
      001DF6 EB               [ 4] 6556 	ex	de, hl
                                   6557 ;src\/Graphics\Graphics.h:473: WRTVRM(baseAddr, tile);
      001DF7 D5               [11] 6558 	push	de
      001DF8 DD 7E 06         [19] 6559 	ld	a, 6 (ix)
      001DFB F5               [11] 6560 	push	af
      001DFC 33               [ 6] 6561 	inc	sp
      001DFD D5               [11] 6562 	push	de
      001DFE CDr00r00         [17] 6563 	call	_WRTVRM
      001E01 F1               [10] 6564 	pop	af
      001E02 33               [ 6] 6565 	inc	sp
      001E03 D1               [10] 6566 	pop	de
                                   6567 ;src\/Graphics\Graphics.h:474: WRTVRM(baseAddr + 1, tile + 1);
      001E04 DD 4E 06         [19] 6568 	ld	c, 6 (ix)
      001E07 79               [ 4] 6569 	ld	a, c
      001E08 3C               [ 4] 6570 	inc	a
      001E09 6B               [ 4] 6571 	ld	l, e
      001E0A 62               [ 4] 6572 	ld	h, d
      001E0B 23               [ 6] 6573 	inc	hl
      001E0C C5               [11] 6574 	push	bc
      001E0D D5               [11] 6575 	push	de
      001E0E F5               [11] 6576 	push	af
      001E0F 33               [ 6] 6577 	inc	sp
      001E10 E5               [11] 6578 	push	hl
      001E11 CDr00r00         [17] 6579 	call	_WRTVRM
      001E14 F1               [10] 6580 	pop	af
      001E15 33               [ 6] 6581 	inc	sp
      001E16 D1               [10] 6582 	pop	de
      001E17 C1               [10] 6583 	pop	bc
                                   6584 ;src\/Graphics\Graphics.h:475: WRTVRM(baseAddr + 32, tile + 2);
      001E18 41               [ 4] 6585 	ld	b, c
      001E19 04               [ 4] 6586 	inc	b
      001E1A 04               [ 4] 6587 	inc	b
      001E1B 21 20 00         [10] 6588 	ld	hl, #0x0020
      001E1E 19               [11] 6589 	add	hl, de
      001E1F C5               [11] 6590 	push	bc
      001E20 D5               [11] 6591 	push	de
      001E21 C5               [11] 6592 	push	bc
      001E22 33               [ 6] 6593 	inc	sp
      001E23 E5               [11] 6594 	push	hl
      001E24 CDr00r00         [17] 6595 	call	_WRTVRM
      001E27 F1               [10] 6596 	pop	af
      001E28 33               [ 6] 6597 	inc	sp
      001E29 D1               [10] 6598 	pop	de
      001E2A C1               [10] 6599 	pop	bc
                                   6600 ;src\/Graphics\Graphics.h:476: WRTVRM(baseAddr + 33, tile + 3);
      001E2B 0C               [ 4] 6601 	inc	c
      001E2C 0C               [ 4] 6602 	inc	c
      001E2D 0C               [ 4] 6603 	inc	c
      001E2E 21 21 00         [10] 6604 	ld	hl, #0x0021
      001E31 19               [11] 6605 	add	hl, de
      001E32 79               [ 4] 6606 	ld	a, c
      001E33 F5               [11] 6607 	push	af
      001E34 33               [ 6] 6608 	inc	sp
      001E35 E5               [11] 6609 	push	hl
      001E36 CDr00r00         [17] 6610 	call	_WRTVRM
      001E39 F1               [10] 6611 	pop	af
      001E3A 33               [ 6] 6612 	inc	sp
                                   6613 ;src\/Graphics\Graphics.h:477: }
      001E3B DD E1            [14] 6614 	pop	ix
      001E3D C9               [10] 6615 	ret
                                   6616 ;src\/Graphics\Graphics.h:479: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   6617 ;	---------------------------------
                                   6618 ; Function DrawBlock_SameTile
                                   6619 ; ---------------------------------
      001E3E                       6620 _DrawBlock_SameTile::
      001E3E DD E5            [15] 6621 	push	ix
      001E40 DD 21 00 00      [14] 6622 	ld	ix,#0
      001E44 DD 39            [15] 6623 	add	ix,sp
                                   6624 ;src\/Graphics\Graphics.h:481: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001E46 DD 6E 04         [19] 6625 	ld	l, 4 (ix)
      001E49 26 00            [ 7] 6626 	ld	h, #0x00
      001E4B 29               [11] 6627 	add	hl, hl
      001E4C 4D               [ 4] 6628 	ld	c, l
      001E4D 44               [ 4] 6629 	ld	b, h
      001E4E DD 6E 05         [19] 6630 	ld	l, 5 (ix)
      001E51 26 00            [ 7] 6631 	ld	h, #0x00
      001E53 29               [11] 6632 	add	hl, hl
      001E54 29               [11] 6633 	add	hl, hl
      001E55 29               [11] 6634 	add	hl, hl
      001E56 29               [11] 6635 	add	hl, hl
      001E57 29               [11] 6636 	add	hl, hl
      001E58 29               [11] 6637 	add	hl, hl
      001E59 11 0A 18         [10] 6638 	ld	de, #0x180a
      001E5C 19               [11] 6639 	add	hl, de
      001E5D 09               [11] 6640 	add	hl, bc
      001E5E EB               [ 4] 6641 	ex	de, hl
                                   6642 ;src\/Graphics\Graphics.h:483: WRTVRM(baseAddr, tile);
      001E5F D5               [11] 6643 	push	de
      001E60 DD 7E 06         [19] 6644 	ld	a, 6 (ix)
      001E63 F5               [11] 6645 	push	af
      001E64 33               [ 6] 6646 	inc	sp
      001E65 D5               [11] 6647 	push	de
      001E66 CDr00r00         [17] 6648 	call	_WRTVRM
      001E69 F1               [10] 6649 	pop	af
      001E6A 33               [ 6] 6650 	inc	sp
      001E6B D1               [10] 6651 	pop	de
                                   6652 ;src\/Graphics\Graphics.h:484: WRTVRM(baseAddr + 1, tile);
      001E6C 4B               [ 4] 6653 	ld	c, e
      001E6D 42               [ 4] 6654 	ld	b, d
      001E6E 03               [ 6] 6655 	inc	bc
      001E6F D5               [11] 6656 	push	de
      001E70 DD 7E 06         [19] 6657 	ld	a, 6 (ix)
      001E73 F5               [11] 6658 	push	af
      001E74 33               [ 6] 6659 	inc	sp
      001E75 C5               [11] 6660 	push	bc
      001E76 CDr00r00         [17] 6661 	call	_WRTVRM
      001E79 F1               [10] 6662 	pop	af
      001E7A 33               [ 6] 6663 	inc	sp
      001E7B D1               [10] 6664 	pop	de
                                   6665 ;src\/Graphics\Graphics.h:485: WRTVRM(baseAddr + 32, tile);
      001E7C 21 20 00         [10] 6666 	ld	hl, #0x0020
      001E7F 19               [11] 6667 	add	hl, de
      001E80 D5               [11] 6668 	push	de
      001E81 DD 7E 06         [19] 6669 	ld	a, 6 (ix)
      001E84 F5               [11] 6670 	push	af
      001E85 33               [ 6] 6671 	inc	sp
      001E86 E5               [11] 6672 	push	hl
      001E87 CDr00r00         [17] 6673 	call	_WRTVRM
      001E8A F1               [10] 6674 	pop	af
      001E8B 33               [ 6] 6675 	inc	sp
      001E8C D1               [10] 6676 	pop	de
                                   6677 ;src\/Graphics\Graphics.h:486: WRTVRM(baseAddr + 33, tile);
      001E8D 21 21 00         [10] 6678 	ld	hl, #0x0021
      001E90 19               [11] 6679 	add	hl, de
      001E91 DD 7E 06         [19] 6680 	ld	a, 6 (ix)
      001E94 F5               [11] 6681 	push	af
      001E95 33               [ 6] 6682 	inc	sp
      001E96 E5               [11] 6683 	push	hl
      001E97 CDr00r00         [17] 6684 	call	_WRTVRM
      001E9A F1               [10] 6685 	pop	af
      001E9B 33               [ 6] 6686 	inc	sp
                                   6687 ;src\/Graphics\Graphics.h:487: }
      001E9C DD E1            [14] 6688 	pop	ix
      001E9E C9               [10] 6689 	ret
                                   6690 ;src\/Graphics\Graphics.h:489: void DrawLine(byte line) {
                                   6691 ;	---------------------------------
                                   6692 ; Function DrawLine
                                   6693 ; ---------------------------------
      001E9F                       6694 _DrawLine::
      001E9F DD E5            [15] 6695 	push	ix
      001EA1 DD 21 00 00      [14] 6696 	ld	ix,#0
      001EA5 DD 39            [15] 6697 	add	ix,sp
                                   6698 ;src\/Graphics\Graphics.h:490: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001EA7 DD 4E 04         [19] 6699 	ld	c, 4 (ix)
      001EAA 06 00            [ 7] 6700 	ld	b, #0x00
      001EAC                       6701 00103$:
      001EAC 78               [ 4] 6702 	ld	a, b
      001EAD D6 06            [ 7] 6703 	sub	a, #0x06
      001EAF 30 23            [12] 6704 	jr	NC, 00105$
                                   6705 ;src\/Graphics\Graphics.h:491: DrawBlock(col, line, playfield[col][line]);
      001EB1 58               [ 4] 6706 	ld	e, b
      001EB2 16 00            [ 7] 6707 	ld	d, #0x00
      001EB4 6B               [ 4] 6708 	ld	l, e
      001EB5 62               [ 4] 6709 	ld	h, d
      001EB6 29               [11] 6710 	add	hl, hl
      001EB7 19               [11] 6711 	add	hl, de
      001EB8 29               [11] 6712 	add	hl, hl
      001EB9 29               [11] 6713 	add	hl, hl
      001EBA 11r00r00         [10] 6714 	ld	de, #_playfield
      001EBD 19               [11] 6715 	add	hl, de
      001EBE 59               [ 4] 6716 	ld	e, c
      001EBF 16 00            [ 7] 6717 	ld	d, #0x00
      001EC1 19               [11] 6718 	add	hl, de
      001EC2 7E               [ 7] 6719 	ld	a, (hl)
      001EC3 C5               [11] 6720 	push	bc
      001EC4 F5               [11] 6721 	push	af
      001EC5 33               [ 6] 6722 	inc	sp
      001EC6 79               [ 4] 6723 	ld	a, c
      001EC7 F5               [11] 6724 	push	af
      001EC8 33               [ 6] 6725 	inc	sp
      001EC9 C5               [11] 6726 	push	bc
      001ECA 33               [ 6] 6727 	inc	sp
      001ECB CDrD6r1D         [17] 6728 	call	_DrawBlock
      001ECE F1               [10] 6729 	pop	af
      001ECF 33               [ 6] 6730 	inc	sp
      001ED0 C1               [10] 6731 	pop	bc
                                   6732 ;src\/Graphics\Graphics.h:490: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001ED1 04               [ 4] 6733 	inc	b
      001ED2 18 D8            [12] 6734 	jr	00103$
      001ED4                       6735 00105$:
                                   6736 ;src\/Graphics\Graphics.h:493: }
      001ED4 DD E1            [14] 6737 	pop	ix
      001ED6 C9               [10] 6738 	ret
                                   6739 ;src\/Graphics\Graphics.h:495: void DrawPiece(byte line) {
                                   6740 ;	---------------------------------
                                   6741 ; Function DrawPiece
                                   6742 ; ---------------------------------
      001ED7                       6743 _DrawPiece::
                                   6744 ;src\/Graphics\Graphics.h:496: DrawLine(line);
      001ED7 21 02 00         [10] 6745 	ld	hl, #2
      001EDA 39               [11] 6746 	add	hl, sp
      001EDB 7E               [ 7] 6747 	ld	a, (hl)
      001EDC F5               [11] 6748 	push	af
      001EDD 33               [ 6] 6749 	inc	sp
      001EDE CDr9Fr1E         [17] 6750 	call	_DrawLine
      001EE1 33               [ 6] 6751 	inc	sp
                                   6752 ;src\/Graphics\Graphics.h:497: DrawLine(line + 1);
      001EE2 21 02 00         [10] 6753 	ld	hl, #2
      001EE5 39               [11] 6754 	add	hl, sp
      001EE6 46               [ 7] 6755 	ld	b, (hl)
      001EE7 78               [ 4] 6756 	ld	a, b
      001EE8 3C               [ 4] 6757 	inc	a
      001EE9 C5               [11] 6758 	push	bc
      001EEA F5               [11] 6759 	push	af
      001EEB 33               [ 6] 6760 	inc	sp
      001EEC CDr9Fr1E         [17] 6761 	call	_DrawLine
      001EEF 33               [ 6] 6762 	inc	sp
      001EF0 C1               [10] 6763 	pop	bc
                                   6764 ;src\/Graphics\Graphics.h:498: DrawLine(line + 2);
      001EF1 04               [ 4] 6765 	inc	b
      001EF2 04               [ 4] 6766 	inc	b
      001EF3 C5               [11] 6767 	push	bc
      001EF4 33               [ 6] 6768 	inc	sp
      001EF5 CDr9Fr1E         [17] 6769 	call	_DrawLine
      001EF8 33               [ 6] 6770 	inc	sp
                                   6771 ;src\/Graphics\Graphics.h:499: }
      001EF9 C9               [10] 6772 	ret
                                   6773 ;src\/Graphics\Graphics.h:501: void DrawPlayfield() {
                                   6774 ;	---------------------------------
                                   6775 ; Function DrawPlayfield
                                   6776 ; ---------------------------------
      001EFA                       6777 _DrawPlayfield::
                                   6778 ;src\/Graphics\Graphics.h:502: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001EFA 06 00            [ 7] 6779 	ld	b, #0x00
      001EFC                       6780 00103$:
      001EFC 78               [ 4] 6781 	ld	a, b
      001EFD D6 0C            [ 7] 6782 	sub	a, #0x0c
      001EFF D0               [11] 6783 	ret	NC
                                   6784 ;src\/Graphics\Graphics.h:503: DrawLine(line);
      001F00 C5               [11] 6785 	push	bc
      001F01 C5               [11] 6786 	push	bc
      001F02 33               [ 6] 6787 	inc	sp
      001F03 CDr9Fr1E         [17] 6788 	call	_DrawLine
      001F06 33               [ 6] 6789 	inc	sp
      001F07 C1               [10] 6790 	pop	bc
                                   6791 ;src\/Graphics\Graphics.h:502: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F08 04               [ 4] 6792 	inc	b
                                   6793 ;src\/Graphics\Graphics.h:505: }
      001F09 18 F1            [12] 6794 	jr	00103$
                                   6795 ;src\/Sound.h:1: void SoundFx_2() {
                                   6796 ;	---------------------------------
                                   6797 ; Function SoundFx_2
                                   6798 ; ---------------------------------
      001F0B                       6799 _SoundFx_2::
                                   6800 ;src\/Sound.h:2: GICINI();
      001F0B CDr00r00         [17] 6801 	call	_GICINI
                                   6802 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001F0E 21 08 0F         [10] 6803 	ld	hl, #0x0f08
      001F11 CDr00r00         [17] 6804 	call	_WRTPSG
                                   6805 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001F14 0E 00            [ 7] 6806 	ld	c, #0x00
      001F16                       6807 00104$:
      001F16 79               [ 4] 6808 	ld	a, c
      001F17 D6 FF            [ 7] 6809 	sub	a, #0xff
      001F19 30 11            [12] 6810 	jr	NC, 00101$
                                   6811 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001F1B C5               [11] 6812 	push	bc
      001F1C 21 00 5D         [10] 6813 	ld	hl, #0x5d00
      001F1F CDr00r00         [17] 6814 	call	_WRTPSG
      001F22 21 01 00         [10] 6815 	ld	hl, #0x0001
      001F25 CDr00r00         [17] 6816 	call	_WRTPSG
      001F28 C1               [10] 6817 	pop	bc
                                   6818 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001F29 0C               [ 4] 6819 	inc	c
      001F2A 18 EA            [12] 6820 	jr	00104$
      001F2C                       6821 00101$:
                                   6822 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001F2C 0E 00            [ 7] 6823 	ld	c, #0x00
      001F2E                       6824 00107$:
      001F2E 79               [ 4] 6825 	ld	a, c
      001F2F D6 FF            [ 7] 6826 	sub	a, #0xff
      001F31 30 11            [12] 6827 	jr	NC, 00102$
                                   6828 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001F33 C5               [11] 6829 	push	bc
      001F34 21 00 2D         [10] 6830 	ld	hl, #0x2d00
      001F37 CDr00r00         [17] 6831 	call	_WRTPSG
      001F3A 21 01 00         [10] 6832 	ld	hl, #0x0001
      001F3D CDr00r00         [17] 6833 	call	_WRTPSG
      001F40 C1               [10] 6834 	pop	bc
                                   6835 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001F41 0C               [ 4] 6836 	inc	c
      001F42 18 EA            [12] 6837 	jr	00107$
      001F44                       6838 00102$:
                                   6839 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001F44 21 08 00         [10] 6840 	ld	hl, #0x0008
                                   6841 ;src\/Sound.h:30: }
      001F47 C3r00r00         [10] 6842 	jp	_WRTPSG
                                   6843 ;src\/Sound.h:32: void SoundFx_1() {
                                   6844 ;	---------------------------------
                                   6845 ; Function SoundFx_1
                                   6846 ; ---------------------------------
      001F4A                       6847 _SoundFx_1::
                                   6848 ;src\/Sound.h:34: GICINI();
      001F4A CDr00r00         [17] 6849 	call	_GICINI
                                   6850 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001F4D 21 06 97         [10] 6851 	ld	hl, #0x9706
      001F50 CDr00r00         [17] 6852 	call	_WRTPSG
                                   6853 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      001F53 21 07 81         [10] 6854 	ld	hl, #0x8107
      001F56 CDr00r00         [17] 6855 	call	_WRTPSG
                                   6856 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001F59 21 08 10         [10] 6857 	ld	hl, #0x1008
      001F5C CDr00r00         [17] 6858 	call	_WRTPSG
                                   6859 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001F5F 21 0C 13         [10] 6860 	ld	hl, #0x130c
      001F62 CDr00r00         [17] 6861 	call	_WRTPSG
                                   6862 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001F65 21 0D 01         [10] 6863 	ld	hl, #0x010d
                                   6864 ;src\/Sound.h:49: }
      001F68 C3r00r00         [10] 6865 	jp	_WRTPSG
                                   6866 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   6867 ;	---------------------------------
                                   6868 ; Function CheckPlayfield
                                   6869 ; ---------------------------------
      001F6B                       6870 _CheckPlayfield::
      001F6B DD E5            [15] 6871 	push	ix
      001F6D DD 21 00 00      [14] 6872 	ld	ix,#0
      001F71 DD 39            [15] 6873 	add	ix,sp
      001F73 21 EF FF         [10] 6874 	ld	hl, #-17
      001F76 39               [11] 6875 	add	hl, sp
      001F77 F9               [ 6] 6876 	ld	sp, hl
                                   6877 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001F78 DD 36 EF 00      [19] 6878 	ld	-17 (ix), #0
                                   6879 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001F7C 0E 00            [ 7] 6880 	ld	c, #0x00
      001F7E                       6881 00196$:
      001F7E 79               [ 4] 6882 	ld	a, c
      001F7F D6 0C            [ 7] 6883 	sub	a, #0x0c
      001F81 30 36            [12] 6884 	jr	NC, 00102$
                                   6885 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F83 DD 36 FF 00      [19] 6886 	ld	-1 (ix), #0
      001F87                       6887 00193$:
      001F87 DD 7E FF         [19] 6888 	ld	a, -1 (ix)
      001F8A D6 06            [ 7] 6889 	sub	a, #0x06
      001F8C 30 28            [12] 6890 	jr	NC, 00197$
                                   6891 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001F8E DD 5E FF         [19] 6892 	ld	e, -1 (ix)
      001F91 16 00            [ 7] 6893 	ld	d, #0x00
      001F93 6B               [ 4] 6894 	ld	l, e
      001F94 62               [ 4] 6895 	ld	h, d
      001F95 29               [11] 6896 	add	hl, hl
      001F96 19               [11] 6897 	add	hl, de
      001F97 29               [11] 6898 	add	hl, hl
      001F98 29               [11] 6899 	add	hl, hl
      001F99 EB               [ 4] 6900 	ex	de, hl
      001F9A 21r48r00         [10] 6901 	ld	hl, #_playfieldTemp
      001F9D 19               [11] 6902 	add	hl, de
      001F9E 06 00            [ 7] 6903 	ld	b, #0x00
      001FA0 09               [11] 6904 	add	hl, bc
      001FA1 3Er00            [ 7] 6905 	ld	a, #<(_playfield)
      001FA3 83               [ 4] 6906 	add	a, e
      001FA4 5F               [ 4] 6907 	ld	e, a
      001FA5 3Es00            [ 7] 6908 	ld	a, #>(_playfield)
      001FA7 8A               [ 4] 6909 	adc	a, d
      001FA8 57               [ 4] 6910 	ld	d, a
      001FA9 7B               [ 4] 6911 	ld	a, e
      001FAA 81               [ 4] 6912 	add	a, c
      001FAB 5F               [ 4] 6913 	ld	e, a
      001FAC 30 01            [12] 6914 	jr	NC, 00615$
      001FAE 14               [ 4] 6915 	inc	d
      001FAF                       6916 00615$:
      001FAF 1A               [ 7] 6917 	ld	a, (de)
      001FB0 77               [ 7] 6918 	ld	(hl), a
                                   6919 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001FB1 DD 34 FF         [23] 6920 	inc	-1 (ix)
      001FB4 18 D1            [12] 6921 	jr	00193$
      001FB6                       6922 00197$:
                                   6923 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FB6 0C               [ 4] 6924 	inc	c
      001FB7 18 C5            [12] 6925 	jr	00196$
      001FB9                       6926 00102$:
                                   6927 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FB9 DD 36 FE 00      [19] 6928 	ld	-2 (ix), #0
      001FBD                       6929 00202$:
      001FBD DD 7E FE         [19] 6930 	ld	a, -2 (ix)
      001FC0 D6 0C            [ 7] 6931 	sub	a, #0x0c
      001FC2 D2rC1r20         [10] 6932 	jp	NC, 00108$
                                   6933 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001FC5 DD 36 FF 02      [19] 6934 	ld	-1 (ix), #0x02
      001FC9                       6935 00199$:
      001FC9 DD 7E FF         [19] 6936 	ld	a, -1 (ix)
      001FCC D6 06            [ 7] 6937 	sub	a, #0x06
      001FCE D2rBBr20         [10] 6938 	jp	NC, 00203$
                                   6939 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      001FD1 DD 4E FF         [19] 6940 	ld	c, -1 (ix)
      001FD4 06 00            [ 7] 6941 	ld	b, #0x00
      001FD6 69               [ 4] 6942 	ld	l, c
      001FD7 60               [ 4] 6943 	ld	h, b
      001FD8 29               [11] 6944 	add	hl, hl
      001FD9 09               [11] 6945 	add	hl, bc
      001FDA 29               [11] 6946 	add	hl, hl
      001FDB 29               [11] 6947 	add	hl, hl
      001FDC DD 75 F5         [19] 6948 	ld	-11 (ix), l
      001FDF DD 74 F6         [19] 6949 	ld	-10 (ix), h
      001FE2 3Er48            [ 7] 6950 	ld	a, #<(_playfieldTemp)
      001FE4 DD 86 F5         [19] 6951 	add	a, -11 (ix)
      001FE7 4F               [ 4] 6952 	ld	c, a
      001FE8 3Es00            [ 7] 6953 	ld	a, #>(_playfieldTemp)
      001FEA DD 8E F6         [19] 6954 	adc	a, -10 (ix)
      001FED 47               [ 4] 6955 	ld	b, a
      001FEE 79               [ 4] 6956 	ld	a, c
      001FEF DD 86 FE         [19] 6957 	add	a, -2 (ix)
      001FF2 DD 77 F7         [19] 6958 	ld	-9 (ix), a
      001FF5 78               [ 4] 6959 	ld	a, b
      001FF6 CE 00            [ 7] 6960 	adc	a, #0x00
      001FF8 DD 77 F8         [19] 6961 	ld	-8 (ix), a
      001FFB DD 6E F7         [19] 6962 	ld	l, -9 (ix)
      001FFE DD 66 F8         [19] 6963 	ld	h, -8 (ix)
      002001 7E               [ 7] 6964 	ld	a, (hl)
      002002 DD 77 F9         [19] 6965 	ld	-7 (ix), a
      002005 B7               [ 4] 6966 	or	a, a
      002006 CArB5r20         [10] 6967 	jp	Z, 00200$
                                   6968 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      002009 DD 7E FF         [19] 6969 	ld	a, -1 (ix)
      00200C DD 77 FD         [19] 6970 	ld	-3 (ix), a
      00200F 4F               [ 4] 6971 	ld	c, a
      002010 0D               [ 4] 6972 	dec	c
      002011 0D               [ 4] 6973 	dec	c
      002012 79               [ 4] 6974 	ld	a, c
      002013 07               [ 4] 6975 	rlca
      002014 9F               [ 4] 6976 	sbc	a, a
      002015 47               [ 4] 6977 	ld	b, a
      002016 69               [ 4] 6978 	ld	l, c
      002017 60               [ 4] 6979 	ld	h, b
      002018 29               [11] 6980 	add	hl, hl
      002019 09               [11] 6981 	add	hl, bc
      00201A 29               [11] 6982 	add	hl, hl
      00201B 29               [11] 6983 	add	hl, hl
      00201C EB               [ 4] 6984 	ex	de, hl
      00201D 21r48r00         [10] 6985 	ld	hl, #_playfieldTemp
      002020 19               [11] 6986 	add	hl, de
      002021 7D               [ 4] 6987 	ld	a, l
      002022 DD 86 FE         [19] 6988 	add	a, -2 (ix)
      002025 DD 77 FA         [19] 6989 	ld	-6 (ix), a
      002028 7C               [ 4] 6990 	ld	a, h
      002029 CE 00            [ 7] 6991 	adc	a, #0x00
      00202B DD 77 FB         [19] 6992 	ld	-5 (ix), a
      00202E DD 4E FD         [19] 6993 	ld	c, -3 (ix)
      002031 0D               [ 4] 6994 	dec	c
      002032 79               [ 4] 6995 	ld	a, c
      002033 07               [ 4] 6996 	rlca
      002034 9F               [ 4] 6997 	sbc	a, a
      002035 47               [ 4] 6998 	ld	b, a
      002036 69               [ 4] 6999 	ld	l, c
      002037 60               [ 4] 7000 	ld	h, b
      002038 29               [11] 7001 	add	hl, hl
      002039 09               [11] 7002 	add	hl, bc
      00203A 29               [11] 7003 	add	hl, hl
      00203B 29               [11] 7004 	add	hl, hl
      00203C DD 75 FC         [19] 7005 	ld	-4 (ix), l
      00203F DD 74 FD         [19] 7006 	ld	-3 (ix), h
      002042 3Er48            [ 7] 7007 	ld	a, #<(_playfieldTemp)
      002044 DD 86 FC         [19] 7008 	add	a, -4 (ix)
      002047 4F               [ 4] 7009 	ld	c, a
      002048 3Es00            [ 7] 7010 	ld	a, #>(_playfieldTemp)
      00204A DD 8E FD         [19] 7011 	adc	a, -3 (ix)
      00204D 47               [ 4] 7012 	ld	b, a
      00204E 79               [ 4] 7013 	ld	a, c
      00204F DD 86 FE         [19] 7014 	add	a, -2 (ix)
      002052 4F               [ 4] 7015 	ld	c, a
      002053 30 01            [12] 7016 	jr	NC, 00616$
      002055 04               [ 4] 7017 	inc	b
      002056                       7018 00616$:
      002056 DD 6E FA         [19] 7019 	ld	l, -6 (ix)
      002059 DD 66 FB         [19] 7020 	ld	h, -5 (ix)
      00205C 6E               [ 7] 7021 	ld	l, (hl)
      00205D 0A               [ 7] 7022 	ld	a, (bc)
      00205E 67               [ 4] 7023 	ld	h, a
      00205F 7D               [ 4] 7024 	ld	a, l
      002060 94               [ 4] 7025 	sub	a, h
      002061 20 52            [12] 7026 	jr	NZ, 00200$
                                   7027 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      002063 DD 7E F9         [19] 7028 	ld	a, -7 (ix)
      002066 94               [ 4] 7029 	sub	a, h
      002067 20 4C            [12] 7030 	jr	NZ, 00200$
                                   7031 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      002069 DD 36 EF 01      [19] 7032 	ld	-17 (ix), #0x01
                                   7033 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      00206D 3Er00            [ 7] 7034 	ld	a, #<(_playfield)
      00206F 83               [ 4] 7035 	add	a, e
      002070 5F               [ 4] 7036 	ld	e, a
      002071 3Es00            [ 7] 7037 	ld	a, #>(_playfield)
      002073 8A               [ 4] 7038 	adc	a, d
      002074 57               [ 4] 7039 	ld	d, a
      002075 7B               [ 4] 7040 	ld	a, e
      002076 DD 86 FE         [19] 7041 	add	a, -2 (ix)
      002079 5F               [ 4] 7042 	ld	e, a
      00207A 30 01            [12] 7043 	jr	NC, 00621$
      00207C 14               [ 4] 7044 	inc	d
      00207D                       7045 00621$:
      00207D 7D               [ 4] 7046 	ld	a, l
      00207E CB FF            [ 8] 7047 	set	7, a
      002080 12               [ 7] 7048 	ld	(de), a
                                   7049 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      002081 3Er00            [ 7] 7050 	ld	a, #<(_playfield)
      002083 DD 86 FC         [19] 7051 	add	a, -4 (ix)
      002086 5F               [ 4] 7052 	ld	e, a
      002087 3Es00            [ 7] 7053 	ld	a, #>(_playfield)
      002089 DD 8E FD         [19] 7054 	adc	a, -3 (ix)
      00208C 57               [ 4] 7055 	ld	d, a
      00208D DD 6E FE         [19] 7056 	ld	l, -2 (ix)
      002090 26 00            [ 7] 7057 	ld	h, #0x00
      002092 19               [11] 7058 	add	hl, de
      002093 0A               [ 7] 7059 	ld	a, (bc)
      002094 CB FF            [ 8] 7060 	set	7, a
      002096 77               [ 7] 7061 	ld	(hl), a
                                   7062 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      002097 3Er00            [ 7] 7063 	ld	a, #<(_playfield)
      002099 DD 86 F5         [19] 7064 	add	a, -11 (ix)
      00209C 4F               [ 4] 7065 	ld	c, a
      00209D 3Es00            [ 7] 7066 	ld	a, #>(_playfield)
      00209F DD 8E F6         [19] 7067 	adc	a, -10 (ix)
      0020A2 47               [ 4] 7068 	ld	b, a
      0020A3 79               [ 4] 7069 	ld	a, c
      0020A4 DD 86 FE         [19] 7070 	add	a, -2 (ix)
      0020A7 4F               [ 4] 7071 	ld	c, a
      0020A8 30 01            [12] 7072 	jr	NC, 00622$
      0020AA 04               [ 4] 7073 	inc	b
      0020AB                       7074 00622$:
      0020AB DD 6E F7         [19] 7075 	ld	l, -9 (ix)
      0020AE DD 66 F8         [19] 7076 	ld	h, -8 (ix)
      0020B1 7E               [ 7] 7077 	ld	a, (hl)
      0020B2 CB FF            [ 8] 7078 	set	7, a
      0020B4 02               [ 7] 7079 	ld	(bc), a
      0020B5                       7080 00200$:
                                   7081 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0020B5 DD 34 FF         [23] 7082 	inc	-1 (ix)
      0020B8 C3rC9r1F         [10] 7083 	jp	00199$
      0020BB                       7084 00203$:
                                   7085 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020BB DD 34 FE         [23] 7086 	inc	-2 (ix)
      0020BE C3rBDr1F         [10] 7087 	jp	00202$
      0020C1                       7088 00108$:
                                   7089 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0020C1 0E 02            [ 7] 7090 	ld	c, #0x02
      0020C3                       7091 00208$:
      0020C3 79               [ 4] 7092 	ld	a, c
      0020C4 D6 0C            [ 7] 7093 	sub	a, #0x0c
      0020C6 D2r88r21         [10] 7094 	jp	NC, 00114$
                                   7095 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020C9 DD 36 FF 00      [19] 7096 	ld	-1 (ix), #0
      0020CD                       7097 00205$:
      0020CD DD 7E FF         [19] 7098 	ld	a, -1 (ix)
      0020D0 D6 06            [ 7] 7099 	sub	a, #0x06
      0020D2 D2r84r21         [10] 7100 	jp	NC, 00209$
                                   7101 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      0020D5 DD 5E FF         [19] 7102 	ld	e, -1 (ix)
      0020D8 16 00            [ 7] 7103 	ld	d, #0x00
      0020DA 6B               [ 4] 7104 	ld	l, e
      0020DB 62               [ 4] 7105 	ld	h, d
      0020DC 29               [11] 7106 	add	hl, hl
      0020DD 19               [11] 7107 	add	hl, de
      0020DE 29               [11] 7108 	add	hl, hl
      0020DF 29               [11] 7109 	add	hl, hl
      0020E0 DD 75 F7         [19] 7110 	ld	-9 (ix), l
      0020E3 DD 74 F8         [19] 7111 	ld	-8 (ix), h
      0020E6 3Er48            [ 7] 7112 	ld	a, #<(_playfieldTemp)
      0020E8 DD 86 F7         [19] 7113 	add	a, -9 (ix)
      0020EB 5F               [ 4] 7114 	ld	e, a
      0020EC 3Es00            [ 7] 7115 	ld	a, #>(_playfieldTemp)
      0020EE DD 8E F8         [19] 7116 	adc	a, -8 (ix)
      0020F1 57               [ 4] 7117 	ld	d, a
      0020F2 7B               [ 4] 7118 	ld	a, e
      0020F3 81               [ 4] 7119 	add	a, c
      0020F4 DD 77 F9         [19] 7120 	ld	-7 (ix), a
      0020F7 7A               [ 4] 7121 	ld	a, d
      0020F8 CE 00            [ 7] 7122 	adc	a, #0x00
      0020FA DD 77 FA         [19] 7123 	ld	-6 (ix), a
      0020FD DD 6E F9         [19] 7124 	ld	l, -7 (ix)
      002100 DD 66 FA         [19] 7125 	ld	h, -6 (ix)
      002103 7E               [ 7] 7126 	ld	a, (hl)
      002104 DD 77 FE         [19] 7127 	ld	-2 (ix), a
      002107 B7               [ 4] 7128 	or	a, a
      002108 28 74            [12] 7129 	jr	Z, 00206$
                                   7130 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      00210A DD 71 FD         [19] 7131 	ld	-3 (ix), c
      00210D 79               [ 4] 7132 	ld	a, c
      00210E C6 FE            [ 7] 7133 	add	a, #0xfe
      002110 DD 77 FB         [19] 7134 	ld	-5 (ix), a
      002113 6F               [ 4] 7135 	ld	l, a
      002114 26 00            [ 7] 7136 	ld	h, #0x00
      002116 19               [11] 7137 	add	hl, de
      002117 DD 46 FD         [19] 7138 	ld	b, -3 (ix)
      00211A 05               [ 4] 7139 	dec	b
      00211B 7B               [ 4] 7140 	ld	a, e
      00211C 80               [ 4] 7141 	add	a, b
      00211D 5F               [ 4] 7142 	ld	e, a
      00211E 30 01            [12] 7143 	jr	NC, 00623$
      002120 14               [ 4] 7144 	inc	d
      002121                       7145 00623$:
      002121 7E               [ 7] 7146 	ld	a, (hl)
      002122 DD 77 FC         [19] 7147 	ld	-4 (ix), a
      002125 1A               [ 7] 7148 	ld	a, (de)
      002126 6F               [ 4] 7149 	ld	l, a
      002127 DD 7E FC         [19] 7150 	ld	a, -4 (ix)
      00212A 95               [ 4] 7151 	sub	a, l
      00212B 20 51            [12] 7152 	jr	NZ, 00206$
                                   7153 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      00212D DD 7E FE         [19] 7154 	ld	a, -2 (ix)
      002130 95               [ 4] 7155 	sub	a, l
      002131 20 4B            [12] 7156 	jr	NZ, 00206$
                                   7157 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      002133 DD 36 EF 01      [19] 7158 	ld	-17 (ix), #0x01
                                   7159 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      002137 3Er00            [ 7] 7160 	ld	a, #<(_playfield)
      002139 DD 86 F7         [19] 7161 	add	a, -9 (ix)
      00213C DD 77 FD         [19] 7162 	ld	-3 (ix), a
      00213F 3Es00            [ 7] 7163 	ld	a, #>(_playfield)
      002141 DD 8E F8         [19] 7164 	adc	a, -8 (ix)
      002144 DD 77 FE         [19] 7165 	ld	-2 (ix), a
      002147 DD 7E FD         [19] 7166 	ld	a, -3 (ix)
      00214A DD 86 FB         [19] 7167 	add	a, -5 (ix)
      00214D 6F               [ 4] 7168 	ld	l, a
      00214E DD 7E FE         [19] 7169 	ld	a, -2 (ix)
      002151 CE 00            [ 7] 7170 	adc	a, #0x00
      002153 67               [ 4] 7171 	ld	h, a
      002154 DD 7E FC         [19] 7172 	ld	a, -4 (ix)
      002157 CB FF            [ 8] 7173 	set	7, a
      002159 77               [ 7] 7174 	ld	(hl), a
                                   7175 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      00215A DD 7E FD         [19] 7176 	ld	a, -3 (ix)
      00215D 80               [ 4] 7177 	add	a, b
      00215E 6F               [ 4] 7178 	ld	l, a
      00215F DD 7E FE         [19] 7179 	ld	a, -2 (ix)
      002162 CE 00            [ 7] 7180 	adc	a, #0x00
      002164 67               [ 4] 7181 	ld	h, a
      002165 1A               [ 7] 7182 	ld	a, (de)
      002166 CB FF            [ 8] 7183 	set	7, a
      002168 77               [ 7] 7184 	ld	(hl), a
                                   7185 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      002169 DD 7E FD         [19] 7186 	ld	a, -3 (ix)
      00216C 81               [ 4] 7187 	add	a, c
      00216D 5F               [ 4] 7188 	ld	e, a
      00216E DD 7E FE         [19] 7189 	ld	a, -2 (ix)
      002171 CE 00            [ 7] 7190 	adc	a, #0x00
      002173 57               [ 4] 7191 	ld	d, a
      002174 DD 6E F9         [19] 7192 	ld	l, -7 (ix)
      002177 DD 66 FA         [19] 7193 	ld	h, -6 (ix)
      00217A 7E               [ 7] 7194 	ld	a, (hl)
      00217B CB FF            [ 8] 7195 	set	7, a
      00217D 12               [ 7] 7196 	ld	(de), a
      00217E                       7197 00206$:
                                   7198 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00217E DD 34 FF         [23] 7199 	inc	-1 (ix)
      002181 C3rCDr20         [10] 7200 	jp	00205$
      002184                       7201 00209$:
                                   7202 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      002184 0C               [ 4] 7203 	inc	c
      002185 C3rC3r20         [10] 7204 	jp	00208$
      002188                       7205 00114$:
                                   7206 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      002188 DD 36 FE 02      [19] 7207 	ld	-2 (ix), #0x02
      00218C                       7208 00214$:
      00218C DD 7E FE         [19] 7209 	ld	a, -2 (ix)
      00218F D6 0C            [ 7] 7210 	sub	a, #0x0c
      002191 D2r2Fr23         [10] 7211 	jp	NC, 00124$
                                   7212 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      002194 DD 36 FF 02      [19] 7213 	ld	-1 (ix), #0x02
      002198                       7214 00211$:
      002198 DD 7E FF         [19] 7215 	ld	a, -1 (ix)
      00219B D6 06            [ 7] 7216 	sub	a, #0x06
      00219D D2r29r23         [10] 7217 	jp	NC, 00215$
                                   7218 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      0021A0 DD 4E FF         [19] 7219 	ld	c, -1 (ix)
      0021A3 06 00            [ 7] 7220 	ld	b, #0x00
      0021A5 69               [ 4] 7221 	ld	l, c
      0021A6 60               [ 4] 7222 	ld	h, b
      0021A7 29               [11] 7223 	add	hl, hl
      0021A8 09               [11] 7224 	add	hl, bc
      0021A9 29               [11] 7225 	add	hl, hl
      0021AA 29               [11] 7226 	add	hl, hl
      0021AB DD 75 F0         [19] 7227 	ld	-16 (ix), l
      0021AE DD 74 F1         [19] 7228 	ld	-15 (ix), h
      0021B1 3Er48            [ 7] 7229 	ld	a, #<(_playfieldTemp)
      0021B3 DD 86 F0         [19] 7230 	add	a, -16 (ix)
      0021B6 4F               [ 4] 7231 	ld	c, a
      0021B7 3Es00            [ 7] 7232 	ld	a, #>(_playfieldTemp)
      0021B9 DD 8E F1         [19] 7233 	adc	a, -15 (ix)
      0021BC 47               [ 4] 7234 	ld	b, a
      0021BD 79               [ 4] 7235 	ld	a, c
      0021BE DD 86 FE         [19] 7236 	add	a, -2 (ix)
      0021C1 DD 77 F2         [19] 7237 	ld	-14 (ix), a
      0021C4 78               [ 4] 7238 	ld	a, b
      0021C5 CE 00            [ 7] 7239 	adc	a, #0x00
      0021C7 DD 77 F3         [19] 7240 	ld	-13 (ix), a
      0021CA DD 6E F2         [19] 7241 	ld	l, -14 (ix)
      0021CD DD 66 F3         [19] 7242 	ld	h, -13 (ix)
      0021D0 5E               [ 7] 7243 	ld	e, (hl)
                                   7244 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0021D1 DD 56 FF         [19] 7245 	ld	d, -1 (ix)
      0021D4 DD 66 FE         [19] 7246 	ld	h, -2 (ix)
      0021D7 6A               [ 4] 7247 	ld	l, d
      0021D8 2D               [ 4] 7248 	dec	l
      0021D9 2D               [ 4] 7249 	dec	l
      0021DA 7C               [ 4] 7250 	ld	a, h
      0021DB C6 FE            [ 7] 7251 	add	a, #0xfe
      0021DD DD 77 F4         [19] 7252 	ld	-12 (ix), a
      0021E0 15               [ 4] 7253 	dec	d
      0021E1 7C               [ 4] 7254 	ld	a, h
      0021E2 C6 FF            [ 7] 7255 	add	a, #0xff
      0021E4 DD 77 F5         [19] 7256 	ld	-11 (ix), a
      0021E7 D5               [11] 7257 	push	de
      0021E8 5D               [ 4] 7258 	ld	e, l
      0021E9 7B               [ 4] 7259 	ld	a, e
      0021EA 07               [ 4] 7260 	rlca
      0021EB 9F               [ 4] 7261 	sbc	a, a
      0021EC 57               [ 4] 7262 	ld	d, a
      0021ED 6B               [ 4] 7263 	ld	l, e
      0021EE 62               [ 4] 7264 	ld	h, d
      0021EF 29               [11] 7265 	add	hl, hl
      0021F0 19               [11] 7266 	add	hl, de
      0021F1 29               [11] 7267 	add	hl, hl
      0021F2 29               [11] 7268 	add	hl, hl
      0021F3 D1               [10] 7269 	pop	de
      0021F4 DD 75 F6         [19] 7270 	ld	-10 (ix), l
      0021F7 DD 74 F7         [19] 7271 	ld	-9 (ix), h
      0021FA D5               [11] 7272 	push	de
      0021FB 5A               [ 4] 7273 	ld	e, d
      0021FC 7B               [ 4] 7274 	ld	a, e
      0021FD 07               [ 4] 7275 	rlca
      0021FE 9F               [ 4] 7276 	sbc	a, a
      0021FF 57               [ 4] 7277 	ld	d, a
      002200 6B               [ 4] 7278 	ld	l, e
      002201 62               [ 4] 7279 	ld	h, d
      002202 29               [11] 7280 	add	hl, hl
      002203 19               [11] 7281 	add	hl, de
      002204 29               [11] 7282 	add	hl, hl
      002205 29               [11] 7283 	add	hl, hl
      002206 D1               [10] 7284 	pop	de
      002207 DD 75 F8         [19] 7285 	ld	-8 (ix), l
      00220A DD 74 F9         [19] 7286 	ld	-7 (ix), h
      00220D 3Er48            [ 7] 7287 	ld	a, #<(_playfieldTemp)
      00220F DD 86 F6         [19] 7288 	add	a, -10 (ix)
      002212 DD 77 FA         [19] 7289 	ld	-6 (ix), a
      002215 3Es00            [ 7] 7290 	ld	a, #>(_playfieldTemp)
      002217 DD 8E F7         [19] 7291 	adc	a, -9 (ix)
      00221A DD 77 FB         [19] 7292 	ld	-5 (ix), a
      00221D 3Er48            [ 7] 7293 	ld	a, #<(_playfieldTemp)
      00221F DD 86 F8         [19] 7294 	add	a, -8 (ix)
      002222 57               [ 4] 7295 	ld	d, a
      002223 3Es00            [ 7] 7296 	ld	a, #>(_playfieldTemp)
      002225 DD 8E F9         [19] 7297 	adc	a, -7 (ix)
      002228 6F               [ 4] 7298 	ld	l, a
      002229 7A               [ 4] 7299 	ld	a, d
      00222A DD 86 F5         [19] 7300 	add	a, -11 (ix)
      00222D DD 77 FC         [19] 7301 	ld	-4 (ix), a
      002230 7D               [ 4] 7302 	ld	a, l
      002231 CE 00            [ 7] 7303 	adc	a, #0x00
      002233 DD 77 FD         [19] 7304 	ld	-3 (ix), a
                                   7305 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      002236 7B               [ 4] 7306 	ld	a, e
      002237 B7               [ 4] 7307 	or	a, a
      002238 28 74            [12] 7308 	jr	Z, 00116$
                                   7309 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      00223A DD 7E FA         [19] 7310 	ld	a, -6 (ix)
      00223D DD 86 F4         [19] 7311 	add	a, -12 (ix)
      002240 6F               [ 4] 7312 	ld	l, a
      002241 DD 7E FB         [19] 7313 	ld	a, -5 (ix)
      002244 CE 00            [ 7] 7314 	adc	a, #0x00
      002246 67               [ 4] 7315 	ld	h, a
      002247 56               [ 7] 7316 	ld	d, (hl)
      002248 DD 6E FC         [19] 7317 	ld	l, -4 (ix)
      00224B DD 66 FD         [19] 7318 	ld	h, -3 (ix)
      00224E 6E               [ 7] 7319 	ld	l, (hl)
      00224F 7A               [ 4] 7320 	ld	a, d
      002250 95               [ 4] 7321 	sub	a, l
      002251 20 5B            [12] 7322 	jr	NZ, 00116$
                                   7323 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      002253 7B               [ 4] 7324 	ld	a, e
      002254 95               [ 4] 7325 	sub	a, l
      002255 20 57            [12] 7326 	jr	NZ, 00116$
                                   7327 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      002257 DD 36 EF 01      [19] 7328 	ld	-17 (ix), #0x01
                                   7329 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      00225B 3Er00            [ 7] 7330 	ld	a, #<(_playfield)
      00225D DD 86 F6         [19] 7331 	add	a, -10 (ix)
      002260 5F               [ 4] 7332 	ld	e, a
      002261 3Es00            [ 7] 7333 	ld	a, #>(_playfield)
      002263 DD 8E F7         [19] 7334 	adc	a, -9 (ix)
      002266 67               [ 4] 7335 	ld	h, a
      002267 7B               [ 4] 7336 	ld	a, e
      002268 DD 86 F4         [19] 7337 	add	a, -12 (ix)
      00226B 6F               [ 4] 7338 	ld	l, a
      00226C 30 01            [12] 7339 	jr	NC, 00632$
      00226E 24               [ 4] 7340 	inc	h
      00226F                       7341 00632$:
      00226F CB FA            [ 8] 7342 	set	7, d
      002271 72               [ 7] 7343 	ld	(hl), d
                                   7344 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      002272 3Er00            [ 7] 7345 	ld	a, #<(_playfield)
      002274 DD 86 F8         [19] 7346 	add	a, -8 (ix)
      002277 5F               [ 4] 7347 	ld	e, a
      002278 3Es00            [ 7] 7348 	ld	a, #>(_playfield)
      00227A DD 8E F9         [19] 7349 	adc	a, -7 (ix)
      00227D 57               [ 4] 7350 	ld	d, a
      00227E 7B               [ 4] 7351 	ld	a, e
      00227F DD 86 F5         [19] 7352 	add	a, -11 (ix)
      002282 5F               [ 4] 7353 	ld	e, a
      002283 30 01            [12] 7354 	jr	NC, 00633$
      002285 14               [ 4] 7355 	inc	d
      002286                       7356 00633$:
      002286 DD 6E FC         [19] 7357 	ld	l, -4 (ix)
      002289 DD 66 FD         [19] 7358 	ld	h, -3 (ix)
      00228C 7E               [ 7] 7359 	ld	a, (hl)
      00228D CB FF            [ 8] 7360 	set	7, a
      00228F 12               [ 7] 7361 	ld	(de), a
                                   7362 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      002290 3Er00            [ 7] 7363 	ld	a, #<(_playfield)
      002292 DD 86 F0         [19] 7364 	add	a, -16 (ix)
      002295 5F               [ 4] 7365 	ld	e, a
      002296 3Es00            [ 7] 7366 	ld	a, #>(_playfield)
      002298 DD 8E F1         [19] 7367 	adc	a, -15 (ix)
      00229B 57               [ 4] 7368 	ld	d, a
      00229C 7B               [ 4] 7369 	ld	a, e
      00229D DD 86 FE         [19] 7370 	add	a, -2 (ix)
      0022A0 5F               [ 4] 7371 	ld	e, a
      0022A1 30 01            [12] 7372 	jr	NC, 00634$
      0022A3 14               [ 4] 7373 	inc	d
      0022A4                       7374 00634$:
      0022A4 DD 6E F2         [19] 7375 	ld	l, -14 (ix)
      0022A7 DD 66 F3         [19] 7376 	ld	h, -13 (ix)
      0022AA 7E               [ 7] 7377 	ld	a, (hl)
      0022AB CB FF            [ 8] 7378 	set	7, a
      0022AD 12               [ 7] 7379 	ld	(de), a
      0022AE                       7380 00116$:
                                   7381 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      0022AE DD 6E F4         [19] 7382 	ld	l, -12 (ix)
      0022B1 26 00            [ 7] 7383 	ld	h, #0x00
      0022B3 09               [11] 7384 	add	hl, bc
      0022B4 4E               [ 7] 7385 	ld	c, (hl)
      0022B5 79               [ 4] 7386 	ld	a, c
      0022B6 B7               [ 4] 7387 	or	a, a
      0022B7 28 6A            [12] 7388 	jr	Z, 00212$
                                   7389 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      0022B9 DD 7E FA         [19] 7390 	ld	a, -6 (ix)
      0022BC DD 86 FE         [19] 7391 	add	a, -2 (ix)
      0022BF 5F               [ 4] 7392 	ld	e, a
      0022C0 DD 7E FB         [19] 7393 	ld	a, -5 (ix)
      0022C3 CE 00            [ 7] 7394 	adc	a, #0x00
      0022C5 57               [ 4] 7395 	ld	d, a
      0022C6 DD 6E FC         [19] 7396 	ld	l, -4 (ix)
      0022C9 DD 66 FD         [19] 7397 	ld	h, -3 (ix)
      0022CC 46               [ 7] 7398 	ld	b, (hl)
      0022CD 1A               [ 7] 7399 	ld	a, (de)
      0022CE B8               [ 4] 7400 	cp	a, b
      0022CF 20 52            [12] 7401 	jr	NZ, 00212$
                                   7402 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0022D1 91               [ 4] 7403 	sub	a, c
      0022D2 20 4F            [12] 7404 	jr	NZ, 00212$
                                   7405 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      0022D4 DD 36 EF 01      [19] 7406 	ld	-17 (ix), #0x01
                                   7407 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0022D8 3Er00            [ 7] 7408 	ld	a, #<(_playfield)
      0022DA DD 86 F0         [19] 7409 	add	a, -16 (ix)
      0022DD 47               [ 4] 7410 	ld	b, a
      0022DE 3Es00            [ 7] 7411 	ld	a, #>(_playfield)
      0022E0 DD 8E F1         [19] 7412 	adc	a, -15 (ix)
      0022E3 67               [ 4] 7413 	ld	h, a
      0022E4 78               [ 4] 7414 	ld	a, b
      0022E5 DD 86 F4         [19] 7415 	add	a, -12 (ix)
      0022E8 6F               [ 4] 7416 	ld	l, a
      0022E9 30 01            [12] 7417 	jr	NC, 00639$
      0022EB 24               [ 4] 7418 	inc	h
      0022EC                       7419 00639$:
      0022EC CB F9            [ 8] 7420 	set	7, c
      0022EE 71               [ 7] 7421 	ld	(hl), c
                                   7422 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0022EF 3Er00            [ 7] 7423 	ld	a, #<(_playfield)
      0022F1 DD 86 F8         [19] 7424 	add	a, -8 (ix)
      0022F4 4F               [ 4] 7425 	ld	c, a
      0022F5 3Es00            [ 7] 7426 	ld	a, #>(_playfield)
      0022F7 DD 8E F9         [19] 7427 	adc	a, -7 (ix)
      0022FA 47               [ 4] 7428 	ld	b, a
      0022FB 79               [ 4] 7429 	ld	a, c
      0022FC DD 86 F5         [19] 7430 	add	a, -11 (ix)
      0022FF 4F               [ 4] 7431 	ld	c, a
      002300 30 01            [12] 7432 	jr	NC, 00640$
      002302 04               [ 4] 7433 	inc	b
      002303                       7434 00640$:
      002303 DD 6E FC         [19] 7435 	ld	l, -4 (ix)
      002306 DD 66 FD         [19] 7436 	ld	h, -3 (ix)
      002309 7E               [ 7] 7437 	ld	a, (hl)
      00230A CB FF            [ 8] 7438 	set	7, a
      00230C 02               [ 7] 7439 	ld	(bc), a
                                   7440 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      00230D 3Er00            [ 7] 7441 	ld	a, #<(_playfield)
      00230F DD 86 F6         [19] 7442 	add	a, -10 (ix)
      002312 4F               [ 4] 7443 	ld	c, a
      002313 3Es00            [ 7] 7444 	ld	a, #>(_playfield)
      002315 DD 8E F7         [19] 7445 	adc	a, -9 (ix)
      002318 47               [ 4] 7446 	ld	b, a
      002319 DD 6E FE         [19] 7447 	ld	l, -2 (ix)
      00231C 26 00            [ 7] 7448 	ld	h, #0x00
      00231E 09               [11] 7449 	add	hl, bc
      00231F 1A               [ 7] 7450 	ld	a, (de)
      002320 CB FF            [ 8] 7451 	set	7, a
      002322 77               [ 7] 7452 	ld	(hl), a
      002323                       7453 00212$:
                                   7454 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      002323 DD 34 FF         [23] 7455 	inc	-1 (ix)
      002326 C3r98r21         [10] 7456 	jp	00211$
      002329                       7457 00215$:
                                   7458 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      002329 DD 34 FE         [23] 7459 	inc	-2 (ix)
      00232C C3r8Cr21         [10] 7460 	jp	00214$
      00232F                       7461 00124$:
                                   7462 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      00232F DD 7E EF         [19] 7463 	ld	a, -17 (ix)
      002332 B7               [ 4] 7464 	or	a, a
      002333 CArDBr26         [10] 7465 	jp	Z, 00190$
                                   7466 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      002336 DD 36 F5 FF      [19] 7467 	ld	-11 (ix), #0xff
      00233A DD 36 F6 00      [19] 7468 	ld	-10 (ix), #0
                                   7469 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      00233E DD 36 F7 05      [19] 7470 	ld	-9 (ix), #0x05
      002342 DD 36 F8 00      [19] 7471 	ld	-8 (ix), #0
                                   7472 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      002346 DD 36 F9 0B      [19] 7473 	ld	-7 (ix), #0x0b
      00234A DD 36 FA 00      [19] 7474 	ld	-6 (ix), #0
                                   7475 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      00234E CDr48r0C         [17] 7476 	call	_HideArrowSprite
                                   7477 ;src\/CheckPlayfield.h:116: SoundFx_2();
      002351 CDr0Br1F         [17] 7478 	call	_SoundFx_2
                                   7479 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      002354 DD 36 FB 00      [19] 7480 	ld	-5 (ix), #0
                                   7481 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002358 DD 36 FF 00      [19] 7482 	ld	-1 (ix), #0
      00235C                       7483 00220$:
      00235C DD 7E FF         [19] 7484 	ld	a, -1 (ix)
      00235F D6 0C            [ 7] 7485 	sub	a, #0x0c
      002361 30 5F            [12] 7486 	jr	NC, 00291$
                                   7487 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002363 DD 5E FB         [19] 7488 	ld	e, -5 (ix)
      002366 06 00            [ 7] 7489 	ld	b, #0x00
      002368                       7490 00217$:
      002368 78               [ 4] 7491 	ld	a, b
      002369 D6 06            [ 7] 7492 	sub	a, #0x06
      00236B 30 4D            [12] 7493 	jr	NC, 00320$
                                   7494 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      00236D D5               [11] 7495 	push	de
      00236E 58               [ 4] 7496 	ld	e, b
      00236F 16 00            [ 7] 7497 	ld	d, #0x00
      002371 6B               [ 4] 7498 	ld	l, e
      002372 62               [ 4] 7499 	ld	h, d
      002373 29               [11] 7500 	add	hl, hl
      002374 19               [11] 7501 	add	hl, de
      002375 29               [11] 7502 	add	hl, hl
      002376 29               [11] 7503 	add	hl, hl
      002377 11r00r00         [10] 7504 	ld	de, #_playfield
      00237A 19               [11] 7505 	add	hl, de
      00237B D1               [10] 7506 	pop	de
      00237C 7D               [ 4] 7507 	ld	a, l
      00237D DD 86 FF         [19] 7508 	add	a, -1 (ix)
      002380 6F               [ 4] 7509 	ld	l, a
      002381 30 01            [12] 7510 	jr	NC, 00641$
      002383 24               [ 4] 7511 	inc	h
      002384                       7512 00641$:
      002384 7E               [ 7] 7513 	ld	a, (hl)
      002385 07               [ 4] 7514 	rlca
      002386 30 2F            [12] 7515 	jr	NC, 00218$
                                   7516 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      002388 1C               [ 4] 7517 	inc	e
                                   7518 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      002389 78               [ 4] 7519 	ld	a, b
      00238A DD 96 F7         [19] 7520 	sub	a, -9 (ix)
      00238D 30 03            [12] 7521 	jr	NC, 00126$
      00238F DD 70 F7         [19] 7522 	ld	-9 (ix), b
      002392                       7523 00126$:
                                   7524 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      002392 DD 7E F8         [19] 7525 	ld	a, -8 (ix)
      002395 90               [ 4] 7526 	sub	a, b
      002396 30 03            [12] 7527 	jr	NC, 00128$
      002398 DD 70 F8         [19] 7528 	ld	-8 (ix), b
      00239B                       7529 00128$:
                                   7530 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      00239B DD 7E FF         [19] 7531 	ld	a, -1 (ix)
      00239E DD 96 F9         [19] 7532 	sub	a, -7 (ix)
      0023A1 30 06            [12] 7533 	jr	NC, 00130$
      0023A3 DD 7E FF         [19] 7534 	ld	a, -1 (ix)
      0023A6 DD 77 F9         [19] 7535 	ld	-7 (ix), a
      0023A9                       7536 00130$:
                                   7537 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      0023A9 DD 7E FA         [19] 7538 	ld	a, -6 (ix)
      0023AC DD 96 FF         [19] 7539 	sub	a, -1 (ix)
      0023AF 30 06            [12] 7540 	jr	NC, 00218$
      0023B1 DD 7E FF         [19] 7541 	ld	a, -1 (ix)
      0023B4 DD 77 FA         [19] 7542 	ld	-6 (ix), a
      0023B7                       7543 00218$:
                                   7544 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0023B7 04               [ 4] 7545 	inc	b
      0023B8 18 AE            [12] 7546 	jr	00217$
      0023BA                       7547 00320$:
      0023BA DD 73 FB         [19] 7548 	ld	-5 (ix), e
                                   7549 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0023BD DD 34 FF         [23] 7550 	inc	-1 (ix)
      0023C0 18 9A            [12] 7551 	jr	00220$
                                   7552 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      0023C2                       7553 00291$:
      0023C2 DD 36 FF 48      [19] 7554 	ld	-1 (ix), #0x48
      0023C6                       7555 00166$:
      0023C6 DD 4E FF         [19] 7556 	ld	c, -1 (ix)
      0023C9 DD 35 FF         [23] 7557 	dec	-1 (ix)
      0023CC 79               [ 4] 7558 	ld	a, c
      0023CD B7               [ 4] 7559 	or	a, a
      0023CE CAr76r25         [10] 7560 	jp	Z, 00168$
                                   7561 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      0023D1 ED 5B 9E FC      [20] 7562 	ld	de, (_JIFFY)
                                   7563 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      0023D5                       7564 00137$:
      0023D5 2A 9E FC         [16] 7565 	ld	hl, (_JIFFY)
      0023D8 BF               [ 4] 7566 	cp	a, a
      0023D9 ED 52            [15] 7567 	sbc	hl, de
      0023DB 28 F8            [12] 7568 	jr	Z, 00137$
                                   7569 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      0023DD DD 7E FB         [19] 7570 	ld	a, -5 (ix)
      0023E0 D6 03            [ 7] 7571 	sub	a, #0x03
      0023E2 DAr94r24         [10] 7572 	jp	C, 00301$
                                   7573 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      0023E5 DD 7E FB         [19] 7574 	ld	a, -5 (ix)
      0023E8 D6 07            [ 7] 7575 	sub	a, #0x07
      0023EA 38 04            [12] 7576 	jr	C, 00141$
      0023EC DD 36 FB 07      [19] 7577 	ld	-5 (ix), #0x07
      0023F0                       7578 00141$:
                                   7579 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      0023F0 DD 7E F5         [19] 7580 	ld	a, -11 (ix)
      0023F3 3C               [ 4] 7581 	inc	a
      0023F4 20 7B            [12] 7582 	jr	NZ, 00143$
                                   7583 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      0023F6 DD 6E F8         [19] 7584 	ld	l, -8 (ix)
      0023F9 26 00            [ 7] 7585 	ld	h, #0x00
      0023FB 29               [11] 7586 	add	hl, hl
      0023FC 29               [11] 7587 	add	hl, hl
      0023FD 29               [11] 7588 	add	hl, hl
      0023FE 29               [11] 7589 	add	hl, hl
      0023FF DD 5E F7         [19] 7590 	ld	e, -9 (ix)
      002402 16 00            [ 7] 7591 	ld	d, #0x00
      002404 EB               [ 4] 7592 	ex	de, hl
      002405 29               [11] 7593 	add	hl, hl
      002406 29               [11] 7594 	add	hl, hl
      002407 29               [11] 7595 	add	hl, hl
      002408 29               [11] 7596 	add	hl, hl
      002409 EB               [ 4] 7597 	ex	de, hl
      00240A BF               [ 4] 7598 	cp	a, a
      00240B ED 52            [15] 7599 	sbc	hl, de
      00240D 4D               [ 4] 7600 	ld	c, l
      00240E 44               [ 4] 7601 	ld	b, h
      00240F CB 7C            [ 8] 7602 	bit	7, h
      002411 28 03            [12] 7603 	jr	Z, 00239$
      002413 4D               [ 4] 7604 	ld	c, l
      002414 44               [ 4] 7605 	ld	b, h
      002415 03               [ 6] 7606 	inc	bc
      002416                       7607 00239$:
      002416 CB 28            [ 8] 7608 	sra	b
      002418 CB 19            [ 8] 7609 	rr	c
      00241A 79               [ 4] 7610 	ld	a, c
      00241B C6 50            [ 7] 7611 	add	a, #0x50
      00241D DD 6E F7         [19] 7612 	ld	l, -9 (ix)
      002420 29               [11] 7613 	add	hl, hl
      002421 29               [11] 7614 	add	hl, hl
      002422 29               [11] 7615 	add	hl, hl
      002423 29               [11] 7616 	add	hl, hl
      002424 85               [ 4] 7617 	add	a, l
      002425 DD 77 F5         [19] 7618 	ld	-11 (ix), a
                                   7619 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      002428 DD 6E F9         [19] 7620 	ld	l, -7 (ix)
      00242B 26 00            [ 7] 7621 	ld	h, #0x00
      00242D 29               [11] 7622 	add	hl, hl
      00242E 29               [11] 7623 	add	hl, hl
      00242F 29               [11] 7624 	add	hl, hl
      002430 29               [11] 7625 	add	hl, hl
      002431 DD 5E FA         [19] 7626 	ld	e, -6 (ix)
      002434 16 00            [ 7] 7627 	ld	d, #0x00
      002436 EB               [ 4] 7628 	ex	de, hl
      002437 29               [11] 7629 	add	hl, hl
      002438 29               [11] 7630 	add	hl, hl
      002439 29               [11] 7631 	add	hl, hl
      00243A 29               [11] 7632 	add	hl, hl
      00243B EB               [ 4] 7633 	ex	de, hl
      00243C BF               [ 4] 7634 	cp	a, a
      00243D ED 52            [15] 7635 	sbc	hl, de
      00243F 4D               [ 4] 7636 	ld	c, l
      002440 44               [ 4] 7637 	ld	b, h
      002441 CB 7C            [ 8] 7638 	bit	7, h
      002443 28 03            [12] 7639 	jr	Z, 00240$
      002445 23               [ 6] 7640 	inc	hl
      002446 4D               [ 4] 7641 	ld	c, l
      002447 44               [ 4] 7642 	ld	b, h
      002448                       7643 00240$:
      002448 CB 28            [ 8] 7644 	sra	b
      00244A CB 19            [ 8] 7645 	rr	c
      00244C DD 7E FA         [19] 7646 	ld	a, -6 (ix)
      00244F 87               [ 4] 7647 	add	a, a
      002450 87               [ 4] 7648 	add	a, a
      002451 87               [ 4] 7649 	add	a, a
      002452 87               [ 4] 7650 	add	a, a
      002453 81               [ 4] 7651 	add	a, c
      002454 DD 77 F6         [19] 7652 	ld	-10 (ix), a
                                   7653 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      002457 26 01            [ 7] 7654 	ld	h, #0x01
      002459 DD 6E F6         [19] 7655 	ld	l, -10 (ix)
      00245C E5               [11] 7656 	push	hl
      00245D DD 66 F5         [19] 7657 	ld	h, -11 (ix)
      002460 DD 6E 04         [19] 7658 	ld	l, 4 (ix)
      002463 E5               [11] 7659 	push	hl
      002464 DD 7E FB         [19] 7660 	ld	a, -5 (ix)
      002467 F5               [11] 7661 	push	af
      002468 33               [ 6] 7662 	inc	sp
      002469 CDr56r0C         [17] 7663 	call	_DrawHitSprite
      00246C F1               [10] 7664 	pop	af
      00246D F1               [10] 7665 	pop	af
      00246E 33               [ 6] 7666 	inc	sp
      00246F 18 23            [12] 7667 	jr	00301$
      002471                       7668 00143$:
                                   7669 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      002471 DD 4E FF         [19] 7670 	ld	c, -1 (ix)
      002474 3E 48            [ 7] 7671 	ld	a, #0x48
      002476 91               [ 4] 7672 	sub	a, c
      002477 4F               [ 4] 7673 	ld	c, a
      002478 DD 7E F6         [19] 7674 	ld	a, -10 (ix)
      00247B 91               [ 4] 7675 	sub	a, c
      00247C 26 00            [ 7] 7676 	ld	h, #0x00
      00247E E5               [11] 7677 	push	hl
      00247F 33               [ 6] 7678 	inc	sp
      002480 F5               [11] 7679 	push	af
      002481 33               [ 6] 7680 	inc	sp
      002482 DD 66 F5         [19] 7681 	ld	h, -11 (ix)
      002485 DD 6E 04         [19] 7682 	ld	l, 4 (ix)
      002488 E5               [11] 7683 	push	hl
      002489 DD 7E FB         [19] 7684 	ld	a, -5 (ix)
      00248C F5               [11] 7685 	push	af
      00248D 33               [ 6] 7686 	inc	sp
      00248E CDr56r0C         [17] 7687 	call	_DrawHitSprite
      002491 F1               [10] 7688 	pop	af
      002492 F1               [10] 7689 	pop	af
      002493 33               [ 6] 7690 	inc	sp
                                   7691 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002494                       7692 00301$:
      002494 3E 0C            [ 7] 7693 	ld	a, #0x0c
      002496 DD 96 FF         [19] 7694 	sub	a, -1 (ix)
      002499 3E 00            [ 7] 7695 	ld	a, #0x00
      00249B 17               [ 4] 7696 	rla
      00249C 5F               [ 4] 7697 	ld	e, a
      00249D 3E 09            [ 7] 7698 	ld	a, #0x09
      00249F DD 96 FF         [19] 7699 	sub	a, -1 (ix)
      0024A2 3E 00            [ 7] 7700 	ld	a, #0x00
      0024A4 17               [ 4] 7701 	rla
      0024A5 4F               [ 4] 7702 	ld	c, a
      0024A6 3E 06            [ 7] 7703 	ld	a, #0x06
      0024A8 DD 96 FF         [19] 7704 	sub	a, -1 (ix)
      0024AB 3E 00            [ 7] 7705 	ld	a, #0x00
      0024AD 17               [ 4] 7706 	rla
      0024AE DD 77 FC         [19] 7707 	ld	-4 (ix), a
      0024B1 3E 03            [ 7] 7708 	ld	a, #0x03
      0024B3 DD 96 FF         [19] 7709 	sub	a, -1 (ix)
      0024B6 3E 00            [ 7] 7710 	ld	a, #0x00
      0024B8 17               [ 4] 7711 	rla
      0024B9 DD 77 FD         [19] 7712 	ld	-3 (ix), a
      0024BC 06 00            [ 7] 7713 	ld	b, #0x00
      0024BE                       7714 00226$:
      0024BE 78               [ 4] 7715 	ld	a, b
      0024BF D6 0C            [ 7] 7716 	sub	a, #0x0c
      0024C1 D2rC6r23         [10] 7717 	jp	NC, 00166$
                                   7718 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0024C4 16 00            [ 7] 7719 	ld	d, #0x00
      0024C6                       7720 00223$:
      0024C6 7A               [ 4] 7721 	ld	a, d
      0024C7 D6 06            [ 7] 7722 	sub	a, #0x06
      0024C9 D2r72r25         [10] 7723 	jp	NC, 00227$
                                   7724 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0024CC D5               [11] 7725 	push	de
      0024CD 5A               [ 4] 7726 	ld	e, d
      0024CE 16 00            [ 7] 7727 	ld	d, #0x00
      0024D0 6B               [ 4] 7728 	ld	l, e
      0024D1 62               [ 4] 7729 	ld	h, d
      0024D2 29               [11] 7730 	add	hl, hl
      0024D3 19               [11] 7731 	add	hl, de
      0024D4 29               [11] 7732 	add	hl, hl
      0024D5 29               [11] 7733 	add	hl, hl
      0024D6 11r00r00         [10] 7734 	ld	de, #_playfield
      0024D9 19               [11] 7735 	add	hl, de
      0024DA D1               [10] 7736 	pop	de
      0024DB 7D               [ 4] 7737 	ld	a, l
      0024DC 80               [ 4] 7738 	add	a, b
      0024DD 6F               [ 4] 7739 	ld	l, a
      0024DE 30 01            [12] 7740 	jr	NC, 00646$
      0024E0 24               [ 4] 7741 	inc	h
      0024E1                       7742 00646$:
      0024E1 7E               [ 7] 7743 	ld	a, (hl)
      0024E2 DD 77 FE         [19] 7744 	ld	-2 (ix), a
      0024E5 DD CB FE 7E      [20] 7745 	bit	7, -2 (ix)
      0024E9 CAr6Er25         [10] 7746 	jp	Z,00224$
                                   7747 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      0024EC 7B               [ 4] 7748 	ld	a, e
      0024ED B7               [ 4] 7749 	or	a, a
      0024EE 28 2C            [12] 7750 	jr	Z, 00160$
                                   7751 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      0024F0 2A 9E FC         [16] 7752 	ld	hl, (_JIFFY)
      0024F3 7D               [ 4] 7753 	ld	a, l
      0024F4 E6 03            [ 7] 7754 	and	a, #0x03
      0024F6 28 14            [12] 7755 	jr	Z, 00148$
                                   7756 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0024F8 DD 7E FE         [19] 7757 	ld	a, -2 (ix)
      0024FB CB BF            [ 8] 7758 	res	7, a
      0024FD C5               [11] 7759 	push	bc
      0024FE D5               [11] 7760 	push	de
      0024FF F5               [11] 7761 	push	af
      002500 33               [ 6] 7762 	inc	sp
      002501 4A               [ 4] 7763 	ld	c, d
      002502 C5               [11] 7764 	push	bc
      002503 CDrD6r1D         [17] 7765 	call	_DrawBlock
      002506 F1               [10] 7766 	pop	af
      002507 33               [ 6] 7767 	inc	sp
      002508 D1               [10] 7768 	pop	de
      002509 C1               [10] 7769 	pop	bc
      00250A 18 62            [12] 7770 	jr	00224$
      00250C                       7771 00148$:
                                   7772 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      00250C C5               [11] 7773 	push	bc
      00250D D5               [11] 7774 	push	de
      00250E AF               [ 4] 7775 	xor	a, a
      00250F F5               [11] 7776 	push	af
      002510 33               [ 6] 7777 	inc	sp
      002511 4A               [ 4] 7778 	ld	c, d
      002512 C5               [11] 7779 	push	bc
      002513 CDrD6r1D         [17] 7780 	call	_DrawBlock
      002516 F1               [10] 7781 	pop	af
      002517 33               [ 6] 7782 	inc	sp
      002518 D1               [10] 7783 	pop	de
      002519 C1               [10] 7784 	pop	bc
      00251A 18 52            [12] 7785 	jr	00224$
      00251C                       7786 00160$:
                                   7787 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      00251C 79               [ 4] 7788 	ld	a, c
      00251D B7               [ 4] 7789 	or	a, a
      00251E 28 11            [12] 7790 	jr	Z, 00157$
      002520 C5               [11] 7791 	push	bc
      002521 D5               [11] 7792 	push	de
      002522 3E 2A            [ 7] 7793 	ld	a, #0x2a
      002524 F5               [11] 7794 	push	af
      002525 33               [ 6] 7795 	inc	sp
      002526 4A               [ 4] 7796 	ld	c, d
      002527 C5               [11] 7797 	push	bc
      002528 CDr3Er1E         [17] 7798 	call	_DrawBlock_SameTile
      00252B F1               [10] 7799 	pop	af
      00252C 33               [ 6] 7800 	inc	sp
      00252D D1               [10] 7801 	pop	de
      00252E C1               [10] 7802 	pop	bc
      00252F 18 3D            [12] 7803 	jr	00224$
      002531                       7804 00157$:
                                   7805 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      002531 DD 7E FC         [19] 7806 	ld	a, -4 (ix)
      002534 B7               [ 4] 7807 	or	a, a
      002535 28 11            [12] 7808 	jr	Z, 00154$
      002537 C5               [11] 7809 	push	bc
      002538 D5               [11] 7810 	push	de
      002539 3E 2B            [ 7] 7811 	ld	a, #0x2b
      00253B F5               [11] 7812 	push	af
      00253C 33               [ 6] 7813 	inc	sp
      00253D 4A               [ 4] 7814 	ld	c, d
      00253E C5               [11] 7815 	push	bc
      00253F CDr3Er1E         [17] 7816 	call	_DrawBlock_SameTile
      002542 F1               [10] 7817 	pop	af
      002543 33               [ 6] 7818 	inc	sp
      002544 D1               [10] 7819 	pop	de
      002545 C1               [10] 7820 	pop	bc
      002546 18 26            [12] 7821 	jr	00224$
      002548                       7822 00154$:
                                   7823 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      002548 DD 7E FD         [19] 7824 	ld	a, -3 (ix)
      00254B B7               [ 4] 7825 	or	a, a
      00254C 28 11            [12] 7826 	jr	Z, 00151$
      00254E C5               [11] 7827 	push	bc
      00254F D5               [11] 7828 	push	de
      002550 3E 2C            [ 7] 7829 	ld	a, #0x2c
      002552 F5               [11] 7830 	push	af
      002553 33               [ 6] 7831 	inc	sp
      002554 4A               [ 4] 7832 	ld	c, d
      002555 C5               [11] 7833 	push	bc
      002556 CDr3Er1E         [17] 7834 	call	_DrawBlock_SameTile
      002559 F1               [10] 7835 	pop	af
      00255A 33               [ 6] 7836 	inc	sp
      00255B D1               [10] 7837 	pop	de
      00255C C1               [10] 7838 	pop	bc
      00255D 18 0F            [12] 7839 	jr	00224$
      00255F                       7840 00151$:
                                   7841 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      00255F C5               [11] 7842 	push	bc
      002560 D5               [11] 7843 	push	de
      002561 3E 2D            [ 7] 7844 	ld	a, #0x2d
      002563 F5               [11] 7845 	push	af
      002564 33               [ 6] 7846 	inc	sp
      002565 4A               [ 4] 7847 	ld	c, d
      002566 C5               [11] 7848 	push	bc
      002567 CDr3Er1E         [17] 7849 	call	_DrawBlock_SameTile
      00256A F1               [10] 7850 	pop	af
      00256B 33               [ 6] 7851 	inc	sp
      00256C D1               [10] 7852 	pop	de
      00256D C1               [10] 7853 	pop	bc
      00256E                       7854 00224$:
                                   7855 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00256E 14               [ 4] 7856 	inc	d
      00256F C3rC6r24         [10] 7857 	jp	00223$
      002572                       7858 00227$:
                                   7859 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002572 04               [ 4] 7860 	inc	b
      002573 C3rBEr24         [10] 7861 	jp	00226$
      002576                       7862 00168$:
                                   7863 ;src\/CheckPlayfield.h:196: HideHitSprite();
      002576 CDr68r0E         [17] 7864 	call	_HideHitSprite
                                   7865 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002579 DD 36 FD 00      [19] 7866 	ld	-3 (ix), #0
      00257D                       7867 00235$:
      00257D DD 7E FD         [19] 7868 	ld	a, -3 (ix)
      002580 D6 0C            [ 7] 7869 	sub	a, #0x0c
      002582 D2r60r26         [10] 7870 	jp	NC, 00177$
                                   7871 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002585 DD 36 FE 00      [19] 7872 	ld	-2 (ix), #0
      002589                       7873 00232$:
      002589 DD 7E FE         [19] 7874 	ld	a, -2 (ix)
      00258C D6 06            [ 7] 7875 	sub	a, #0x06
      00258E D2r5Ar26         [10] 7876 	jp	NC, 00236$
                                   7877 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002591 DD 4E FE         [19] 7878 	ld	c, -2 (ix)
      002594 06 00            [ 7] 7879 	ld	b, #0x00
      002596 69               [ 4] 7880 	ld	l, c
      002597 60               [ 4] 7881 	ld	h, b
      002598 29               [11] 7882 	add	hl, hl
      002599 09               [11] 7883 	add	hl, bc
      00259A 29               [11] 7884 	add	hl, hl
      00259B 29               [11] 7885 	add	hl, hl
      00259C EB               [ 4] 7886 	ex	de, hl
      00259D 21r00r00         [10] 7887 	ld	hl, #_playfield
      0025A0 19               [11] 7888 	add	hl, de
      0025A1 DD 75 FB         [19] 7889 	ld	-5 (ix), l
      0025A4 DD 74 FC         [19] 7890 	ld	-4 (ix), h
      0025A7 DD 7E FB         [19] 7891 	ld	a, -5 (ix)
      0025AA DD 86 FD         [19] 7892 	add	a, -3 (ix)
      0025AD 4F               [ 4] 7893 	ld	c, a
      0025AE DD 7E FC         [19] 7894 	ld	a, -4 (ix)
      0025B1 CE 00            [ 7] 7895 	adc	a, #0x00
      0025B3 47               [ 4] 7896 	ld	b, a
      0025B4 0A               [ 7] 7897 	ld	a, (bc)
      0025B5 07               [ 4] 7898 	rlca
      0025B6 D2r54r26         [10] 7899 	jp	NC,00233$
                                   7900 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      0025B9 2Ar04r00         [16] 7901 	ld	hl, (_blocksRemoved)
      0025BC 23               [ 6] 7902 	inc	hl
      0025BD 22r04r00         [16] 7903 	ld	(_blocksRemoved), hl
                                   7904 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      0025C0 DD 7E FB         [19] 7905 	ld	a, -5 (ix)
      0025C3 DD 77 F7         [19] 7906 	ld	-9 (ix), a
      0025C6 DD 7E FC         [19] 7907 	ld	a, -4 (ix)
      0025C9 DD 77 F8         [19] 7908 	ld	-8 (ix), a
      0025CC DD 7E FD         [19] 7909 	ld	a, -3 (ix)
      0025CF DD 77 FF         [19] 7910 	ld	-1 (ix), a
      0025D2                       7911 00229$:
      0025D2 DD 7E FF         [19] 7912 	ld	a, -1 (ix)
      0025D5 B7               [ 4] 7913 	or	a, a
      0025D6 28 7C            [12] 7914 	jr	Z, 00233$
                                   7915 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      0025D8 0E 01            [ 7] 7916 	ld	c, #0x01
                                   7917 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0025DA DD 7E FF         [19] 7918 	ld	a, -1 (ix)
      0025DD DD 77 FC         [19] 7919 	ld	-4 (ix), a
      0025E0 3D               [ 4] 7920 	dec	a
      0025E1 DD 86 F7         [19] 7921 	add	a, -9 (ix)
      0025E4 5F               [ 4] 7922 	ld	e, a
      0025E5 3E 00            [ 7] 7923 	ld	a, #0x00
      0025E7 DD 8E F8         [19] 7924 	adc	a, -8 (ix)
      0025EA 57               [ 4] 7925 	ld	d, a
      0025EB 1A               [ 7] 7926 	ld	a, (de)
      0025EC 07               [ 4] 7927 	rlca
      0025ED 30 02            [12] 7928 	jr	NC, 00170$
      0025EF 0E 02            [ 7] 7929 	ld	c, #0x02
      0025F1                       7930 00170$:
                                   7931 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0025F1 DD 7E FC         [19] 7932 	ld	a, -4 (ix)
      0025F4 3D               [ 4] 7933 	dec	a
      0025F5 3D               [ 4] 7934 	dec	a
      0025F6 DD 86 F7         [19] 7935 	add	a, -9 (ix)
      0025F9 5F               [ 4] 7936 	ld	e, a
      0025FA 3E 00            [ 7] 7937 	ld	a, #0x00
      0025FC DD 8E F8         [19] 7938 	adc	a, -8 (ix)
      0025FF 57               [ 4] 7939 	ld	d, a
      002600 1A               [ 7] 7940 	ld	a, (de)
      002601 07               [ 4] 7941 	rlca
      002602 30 01            [12] 7942 	jr	NC, 00172$
      002604 0C               [ 4] 7943 	inc	c
      002605                       7944 00172$:
                                   7945 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      002605 DD 7E F7         [19] 7946 	ld	a, -9 (ix)
      002608 DD 86 FF         [19] 7947 	add	a, -1 (ix)
      00260B DD 77 F9         [19] 7948 	ld	-7 (ix), a
      00260E DD 7E F8         [19] 7949 	ld	a, -8 (ix)
      002611 CE 00            [ 7] 7950 	adc	a, #0x00
      002613 DD 77 FA         [19] 7951 	ld	-6 (ix), a
      002616 DD 6E FF         [19] 7952 	ld	l, -1 (ix)
      002619 26 00            [ 7] 7953 	ld	h, #0x00
      00261B 59               [ 4] 7954 	ld	e, c
      00261C 16 00            [ 7] 7955 	ld	d, #0x00
      00261E BF               [ 4] 7956 	cp	a, a
      00261F ED 52            [15] 7957 	sbc	hl, de
      002621 CB 7C            [ 8] 7958 	bit	7, h
      002623 20 18            [12] 7959 	jr	NZ, 00243$
      002625 DD 7E FF         [19] 7960 	ld	a, -1 (ix)
      002628 91               [ 4] 7961 	sub	a, c
      002629 DD 86 F7         [19] 7962 	add	a, -9 (ix)
      00262C 4F               [ 4] 7963 	ld	c, a
      00262D 3E 00            [ 7] 7964 	ld	a, #0x00
      00262F DD 8E F8         [19] 7965 	adc	a, -8 (ix)
      002632 47               [ 4] 7966 	ld	b, a
      002633 0A               [ 7] 7967 	ld	a, (bc)
      002634 DD 77 FB         [19] 7968 	ld	-5 (ix), a
      002637 DD 36 FC 00      [19] 7969 	ld	-4 (ix), #0
      00263B 18 07            [12] 7970 	jr	00244$
      00263D                       7971 00243$:
      00263D AF               [ 4] 7972 	xor	a, a
      00263E DD 77 FB         [19] 7973 	ld	-5 (ix), a
      002641 DD 77 FC         [19] 7974 	ld	-4 (ix), a
      002644                       7975 00244$:
      002644 DD 7E FB         [19] 7976 	ld	a, -5 (ix)
      002647 DD 6E F9         [19] 7977 	ld	l, -7 (ix)
      00264A DD 66 FA         [19] 7978 	ld	h, -6 (ix)
      00264D 77               [ 7] 7979 	ld	(hl), a
                                   7980 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      00264E DD 35 FF         [23] 7981 	dec	-1 (ix)
      002651 C3rD2r25         [10] 7982 	jp	00229$
      002654                       7983 00233$:
                                   7984 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002654 DD 34 FE         [23] 7985 	inc	-2 (ix)
      002657 C3r89r25         [10] 7986 	jp	00232$
      00265A                       7987 00236$:
                                   7988 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00265A DD 34 FD         [23] 7989 	inc	-3 (ix)
      00265D C3r7Dr25         [10] 7990 	jp	00235$
      002660                       7991 00177$:
                                   7992 ;src\/CheckPlayfield.h:227: oldLevel = level;
      002660 3Ar06r00         [13] 7993 	ld	a, (#_level + 0)
      002663 4F               [ 4] 7994 	ld	c, a
                                   7995 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      002664 21r04r00         [10] 7996 	ld	hl, #_blocksRemoved
      002667 46               [ 7] 7997 	ld	b, (hl)
      002668 23               [ 6] 7998 	inc	hl
      002669 56               [ 7] 7999 	ld	d, (hl)
      00266A 78               [ 4] 8000 	ld	a, b
      00266B D6 5A            [ 7] 8001 	sub	a, #0x5a
      00266D 7A               [ 4] 8002 	ld	a, d
      00266E DE 00            [ 7] 8003 	sbc	a, #0x00
      002670 38 19            [12] 8004 	jr	C, 00185$
                                   8005 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      002672 C5               [11] 8006 	push	bc
      002673 21 1E 00         [10] 8007 	ld	hl, #0x001e
      002676 E5               [11] 8008 	push	hl
      002677 58               [ 4] 8009 	ld	e, b
      002678 D5               [11] 8010 	push	de
      002679 CDr00r00         [17] 8011 	call	__divuint
      00267C F1               [10] 8012 	pop	af
      00267D F1               [10] 8013 	pop	af
      00267E C1               [10] 8014 	pop	bc
      00267F 7D               [ 4] 8015 	ld	a, l
      002680 3C               [ 4] 8016 	inc	a
      002681 32r06r00         [13] 8017 	ld	(_level+0), a
                                   8018 ;src\/CheckPlayfield.h:230: speed = 15;
      002684 21r96r00         [10] 8019 	ld	hl, #_speed
      002687 36 0F            [10] 8020 	ld	(hl), #0x0f
      002689 18 32            [12] 8021 	jr	00186$
      00268B                       8022 00185$:
                                   8023 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      00268B 78               [ 4] 8024 	ld	a, b
      00268C D6 3C            [ 7] 8025 	sub	a, #0x3c
      00268E 7A               [ 4] 8026 	ld	a, d
      00268F DE 00            [ 7] 8027 	sbc	a, #0x00
      002691 38 0C            [12] 8028 	jr	C, 00182$
                                   8029 ;src\/CheckPlayfield.h:234: level = 3;
      002693 21r06r00         [10] 8030 	ld	hl, #_level
      002696 36 03            [10] 8031 	ld	(hl), #0x03
                                   8032 ;src\/CheckPlayfield.h:235: speed = 30;
      002698 21r96r00         [10] 8033 	ld	hl, #_speed
      00269B 36 1E            [10] 8034 	ld	(hl), #0x1e
      00269D 18 1E            [12] 8035 	jr	00186$
      00269F                       8036 00182$:
                                   8037 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      00269F 78               [ 4] 8038 	ld	a, b
      0026A0 D6 1E            [ 7] 8039 	sub	a, #0x1e
      0026A2 7A               [ 4] 8040 	ld	a, d
      0026A3 DE 00            [ 7] 8041 	sbc	a, #0x00
      0026A5 38 0C            [12] 8042 	jr	C, 00179$
                                   8043 ;src\/CheckPlayfield.h:238: level = 2;
      0026A7 21r06r00         [10] 8044 	ld	hl, #_level
      0026AA 36 02            [10] 8045 	ld	(hl), #0x02
                                   8046 ;src\/CheckPlayfield.h:239: speed = 45;
      0026AC 21r96r00         [10] 8047 	ld	hl, #_speed
      0026AF 36 2D            [10] 8048 	ld	(hl), #0x2d
      0026B1 18 0A            [12] 8049 	jr	00186$
      0026B3                       8050 00179$:
                                   8051 ;src\/CheckPlayfield.h:242: level = 1;
      0026B3 21r06r00         [10] 8052 	ld	hl, #_level
      0026B6 36 01            [10] 8053 	ld	(hl), #0x01
                                   8054 ;src\/CheckPlayfield.h:243: speed = 60;
      0026B8 21r96r00         [10] 8055 	ld	hl, #_speed
      0026BB 36 3C            [10] 8056 	ld	(hl), #0x3c
      0026BD                       8057 00186$:
                                   8058 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      0026BD 3Ar06r00         [13] 8059 	ld	a,(#_level + 0)
      0026C0 91               [ 4] 8060 	sub	a, c
      0026C1 28 05            [12] 8061 	jr	Z, 00188$
                                   8062 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      0026C3 21r07r00         [10] 8063 	ld	hl, #_newLevel
      0026C6 36 01            [10] 8064 	ld	(hl), #0x01
      0026C8                       8065 00188$:
                                   8066 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      0026C8 CDrFAr1E         [17] 8067 	call	_DrawPlayfield
                                   8068 ;src\/CheckPlayfield.h:257: DrawScore();
      0026CB CDrA9r19         [17] 8069 	call	_DrawScore
                                   8070 ;src\/CheckPlayfield.h:259: iteration++;
      0026CE DD 34 04         [23] 8071 	inc	4 (ix)
                                   8072 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      0026D1 DD 7E 04         [19] 8073 	ld	a, 4 (ix)
      0026D4 F5               [11] 8074 	push	af
      0026D5 33               [ 6] 8075 	inc	sp
      0026D6 CDr6Br1F         [17] 8076 	call	_CheckPlayfield
      0026D9 18 03            [12] 8077 	jr	00237$
      0026DB                       8078 00190$:
                                   8079 ;src\/CheckPlayfield.h:264: DrawScore();
      0026DB CDrA9r19         [17] 8080 	call	_DrawScore
      0026DE                       8081 00237$:
                                   8082 ;src\/CheckPlayfield.h:266: }
      0026DE DD F9            [10] 8083 	ld	sp, ix
      0026E0 DD E1            [14] 8084 	pop	ix
      0026E2 C9               [10] 8085 	ret
                                   8086 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   8087 ;	---------------------------------
                                   8088 ; Function RandomIndex
                                   8089 ; ---------------------------------
      0026E3                       8090 _RandomIndex::
                                   8091 ;src\/GameLogic.h:5: do {
      0026E3                       8092 00101$:
                                   8093 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      0026E3 CDrA3r00         [17] 8094 	call	_GetRandom
      0026E6 7D               [ 4] 8095 	ld	a, l
      0026E7 E6 07            [ 7] 8096 	and	a, #0x07
      0026E9 6F               [ 4] 8097 	ld	l, a
                                   8098 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      0026EA 3E 04            [ 7] 8099 	ld	a, #0x04
      0026EC 95               [ 4] 8100 	sub	a, l
      0026ED 38 F4            [12] 8101 	jr	C, 00101$
                                   8102 ;src\/GameLogic.h:10: return random;
                                   8103 ;src\/GameLogic.h:11: }
      0026EF C9               [10] 8104 	ret
                                   8105 ;src\/GameLogic.h:13: void RandomPiece() {
                                   8106 ;	---------------------------------
                                   8107 ; Function RandomPiece
                                   8108 ; ---------------------------------
      0026F0                       8109 _RandomPiece::
                                   8110 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      0026F0 3Ar93r00         [13] 8111 	ld	a,(#_nextTopPiece + 0)
      0026F3 32r90r00         [13] 8112 	ld	(#_topPiece),a
                                   8113 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      0026F6 3Ar94r00         [13] 8114 	ld	a,(#_nextMidPiece + 0)
      0026F9 32r91r00         [13] 8115 	ld	(#_midPiece),a
                                   8116 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      0026FC 3Ar95r00         [13] 8117 	ld	a,(#_nextBottomPiece + 0)
      0026FF 32r92r00         [13] 8118 	ld	(#_bottomPiece),a
                                   8119 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      002702 01r18r00         [10] 8120 	ld	bc, #_pieces+0
      002705 C5               [11] 8121 	push	bc
      002706 CDrE3r26         [17] 8122 	call	_RandomIndex
      002709 C1               [10] 8123 	pop	bc
      00270A 26 00            [ 7] 8124 	ld	h, #0x00
      00270C 09               [11] 8125 	add	hl, bc
      00270D 7E               [ 7] 8126 	ld	a, (hl)
      00270E 32r93r00         [13] 8127 	ld	(_nextTopPiece+0), a
                                   8128 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      002711 C5               [11] 8129 	push	bc
      002712 CDrE3r26         [17] 8130 	call	_RandomIndex
      002715 C1               [10] 8131 	pop	bc
      002716 26 00            [ 7] 8132 	ld	h, #0x00
      002718 09               [11] 8133 	add	hl, bc
      002719 7E               [ 7] 8134 	ld	a, (hl)
      00271A 32r94r00         [13] 8135 	ld	(_nextMidPiece+0), a
                                   8136 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      00271D C5               [11] 8137 	push	bc
      00271E CDrE3r26         [17] 8138 	call	_RandomIndex
      002721 C1               [10] 8139 	pop	bc
      002722 26 00            [ 7] 8140 	ld	h, #0x00
      002724 09               [11] 8141 	add	hl, bc
      002725 7E               [ 7] 8142 	ld	a, (hl)
      002726 32r95r00         [13] 8143 	ld	(_nextBottomPiece+0), a
                                   8144 ;src\/GameLogic.h:21: }
      002729 C9               [10] 8145 	ret
                                   8146 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   8147 ;	---------------------------------
                                   8148 ; Function UpdateAndDrawPieceStatic
                                   8149 ; ---------------------------------
      00272A                       8150 _UpdateAndDrawPieceStatic::
                                   8151 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      00272A 01r00r00         [10] 8152 	ld	bc, #_playfield+0
      00272D ED 5Br01r00      [20] 8153 	ld	de, (_col)
      002731 16 00            [ 7] 8154 	ld	d, #0x00
      002733 6B               [ 4] 8155 	ld	l, e
      002734 62               [ 4] 8156 	ld	h, d
      002735 29               [11] 8157 	add	hl, hl
      002736 19               [11] 8158 	add	hl, de
      002737 29               [11] 8159 	add	hl, hl
      002738 29               [11] 8160 	add	hl, hl
      002739 09               [11] 8161 	add	hl, bc
      00273A EB               [ 4] 8162 	ex	de, hl
      00273B 3Ar02r00         [13] 8163 	ld	a, (#_line + 0)
      00273E 6F               [ 4] 8164 	ld	l, a
      00273F 26 00            [ 7] 8165 	ld	h, #0x00
      002741 19               [11] 8166 	add	hl, de
      002742 3Ar90r00         [13] 8167 	ld	a,(#_topPiece + 0)
      002745 77               [ 7] 8168 	ld	(hl), a
                                   8169 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      002746 ED 5Br01r00      [20] 8170 	ld	de, (_col)
      00274A 16 00            [ 7] 8171 	ld	d, #0x00
      00274C 6B               [ 4] 8172 	ld	l, e
      00274D 62               [ 4] 8173 	ld	h, d
      00274E 29               [11] 8174 	add	hl, hl
      00274F 19               [11] 8175 	add	hl, de
      002750 29               [11] 8176 	add	hl, hl
      002751 29               [11] 8177 	add	hl, hl
      002752 09               [11] 8178 	add	hl, bc
      002753 EB               [ 4] 8179 	ex	de, hl
      002754 3Ar02r00         [13] 8180 	ld	a, (#_line + 0)
      002757 6F               [ 4] 8181 	ld	l, a
      002758 2C               [ 4] 8182 	inc	l
      002759 26 00            [ 7] 8183 	ld	h, #0x00
      00275B 19               [11] 8184 	add	hl, de
      00275C 3Ar91r00         [13] 8185 	ld	a,(#_midPiece + 0)
      00275F 77               [ 7] 8186 	ld	(hl), a
                                   8187 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      002760 ED 5Br01r00      [20] 8188 	ld	de, (_col)
      002764 16 00            [ 7] 8189 	ld	d, #0x00
      002766 6B               [ 4] 8190 	ld	l, e
      002767 62               [ 4] 8191 	ld	h, d
      002768 29               [11] 8192 	add	hl, hl
      002769 19               [11] 8193 	add	hl, de
      00276A 29               [11] 8194 	add	hl, hl
      00276B 29               [11] 8195 	add	hl, hl
      00276C 09               [11] 8196 	add	hl, bc
      00276D EB               [ 4] 8197 	ex	de, hl
      00276E 3Ar02r00         [13] 8198 	ld	a, (#_line + 0)
      002771 6F               [ 4] 8199 	ld	l, a
      002772 2C               [ 4] 8200 	inc	l
      002773 2C               [ 4] 8201 	inc	l
      002774 26 00            [ 7] 8202 	ld	h, #0x00
      002776 19               [11] 8203 	add	hl, de
      002777 3Ar92r00         [13] 8204 	ld	a,(#_bottomPiece + 0)
      00277A 77               [ 7] 8205 	ld	(hl), a
                                   8206 ;src\/GameLogic.h:29: DrawPiece(line);
      00277B C5               [11] 8207 	push	bc
      00277C 3Ar02r00         [13] 8208 	ld	a,(#_line + 0)
      00277F F5               [11] 8209 	push	af
      002780 33               [ 6] 8210 	inc	sp
      002781 CDrD7r1E         [17] 8211 	call	_DrawPiece
      002784 33               [ 6] 8212 	inc	sp
      002785 C1               [10] 8213 	pop	bc
                                   8214 ;src\/GameLogic.h:32: col = INITIAL_COL;
      002786 3E 02            [ 7] 8215 	ld	a, #0x02
      002788 32r01r00         [13] 8216 	ld	(#_col), a
                                   8217 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   8218 ;src\/GameLogic.h:35: counter = 0;
      00278B 3E 00            [ 7] 8219 	ld	a,#0x00
      00278D 32r02r00         [13] 8220 	ld	(#_line),a
      002790 32r03r00         [13] 8221 	ld	(#_counter), a
                                   8222 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      002793 3Ar18r00         [13] 8223 	ld	a, (#_playfield + 24)
      002796 B7               [ 4] 8224 	or	a, a
      002797 20 0C            [12] 8225 	jr	NZ, 00101$
                                   8226 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      002799 3Ar19r00         [13] 8227 	ld	a, (#_playfield + 25)
      00279C B7               [ 4] 8228 	or	a, a
      00279D 20 06            [12] 8229 	jr	NZ, 00101$
                                   8230 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      00279F 3Ar1Ar00         [13] 8231 	ld	a, (#_playfield + 26)
      0027A2 B7               [ 4] 8232 	or	a, a
      0027A3 28 0B            [12] 8233 	jr	Z, 00102$
      0027A5                       8234 00101$:
                                   8235 ;src\/GameLogic.h:41: gameOver = TRUE;
      0027A5 FD 21r00r00      [14] 8236 	ld	iy, #_gameOver
      0027A9 FD 36 00 01      [19] 8237 	ld	0 (iy), #0x01
      0027AD C3rFAr1E         [10] 8238 	jp	_DrawPlayfield
      0027B0                       8239 00102$:
                                   8240 ;src\/GameLogic.h:44: RandomPiece();
      0027B0 CDrF0r26         [17] 8241 	call	_RandomPiece
                                   8242 ;src\/GameLogic.h:46: CheckPlayfield(1);
      0027B3 3E 01            [ 7] 8243 	ld	a, #0x01
      0027B5 F5               [11] 8244 	push	af
      0027B6 33               [ 6] 8245 	inc	sp
      0027B7 CDr6Br1F         [17] 8246 	call	_CheckPlayfield
      0027BA 33               [ 6] 8247 	inc	sp
                                   8248 ;src\/GameLogic.h:48: DrawNextPiece();
      0027BB CDrAFr16         [17] 8249 	call	_DrawNextPiece
                                   8250 ;src\/GameLogic.h:51: DrawPlayfield();
                                   8251 ;src\/GameLogic.h:52: }
      0027BE C3rFAr1E         [10] 8252 	jp	_DrawPlayfield
                                   8253 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   8254 ;	---------------------------------
                                   8255 ; Function BlinkPauseText
                                   8256 ; ---------------------------------
      0027C1                       8257 _BlinkPauseText::
                                   8258 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      0027C1 2A 9E FC         [16] 8259 	ld	hl, (_JIFFY)
      0027C4 CB 5D            [ 8] 8260 	bit	3, l
      0027C6 28 0E            [12] 8261 	jr	Z, 00102$
                                   8262 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      0027C8 11 0D 0C         [10] 8263 	ld	de, #0x0c0d
      0027CB D5               [11] 8264 	push	de
      0027CC 21rDFr27         [10] 8265 	ld	hl, #___str_5
      0027CF E5               [11] 8266 	push	hl
      0027D0 CDrBBr12         [17] 8267 	call	_DrawString
      0027D3 F1               [10] 8268 	pop	af
      0027D4 F1               [10] 8269 	pop	af
      0027D5 C9               [10] 8270 	ret
      0027D6                       8271 00102$:
                                   8272 ;src\/GameLogic.h:61: DrawLine(6);
      0027D6 3E 06            [ 7] 8273 	ld	a, #0x06
      0027D8 F5               [11] 8274 	push	af
      0027D9 33               [ 6] 8275 	inc	sp
      0027DA CDr9Fr1E         [17] 8276 	call	_DrawLine
      0027DD 33               [ 6] 8277 	inc	sp
                                   8278 ;src\/GameLogic.h:64: }
      0027DE C9               [10] 8279 	ret
      0027DF                       8280 ___str_5:
      0027DF 50 41 55 53 45        8281 	.ascii "PAUSE"
      0027E4 00                    8282 	.db 0x00
                                   8283 ;src\/GameLogic.h:66: void Pause() {
                                   8284 ;	---------------------------------
                                   8285 ; Function Pause
                                   8286 ; ---------------------------------
      0027E5                       8287 _Pause::
                                   8288 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      0027E5 11 0D 0C         [10] 8289 	ld	de, #0x0c0d
      0027E8 D5               [11] 8290 	push	de
      0027E9 21r1Fr28         [10] 8291 	ld	hl, #___str_6
      0027EC E5               [11] 8292 	push	hl
      0027ED CDrBBr12         [17] 8293 	call	_DrawString
      0027F0 F1               [10] 8294 	pop	af
      0027F1 F1               [10] 8295 	pop	af
                                   8296 ;src\/GameLogic.h:71: while(TRUE) {
      0027F2                       8297 00114$:
                                   8298 ;src\/GameLogic.h:73: BlinkPauseText();
      0027F2 CDrC1r27         [17] 8299 	call	_BlinkPauseText
                                   8300 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      0027F5 2E 07            [ 7] 8301 	ld	l, #0x07
      0027F7 CDr00r00         [17] 8302 	call	_SNSMAT
                                   8303 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      0027FA CB 55            [ 8] 8304 	bit	2, l
      0027FC 28 F4            [12] 8305 	jr	Z, 00114$
                                   8306 ;src\/GameLogic.h:79: while(TRUE) {
      0027FE                       8307 00109$:
                                   8308 ;src\/GameLogic.h:81: BlinkPauseText();
      0027FE CDrC1r27         [17] 8309 	call	_BlinkPauseText
                                   8310 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      002801 2E 07            [ 7] 8311 	ld	l, #0x07
      002803 CDr00r00         [17] 8312 	call	_SNSMAT
                                   8313 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      002806 CB 55            [ 8] 8314 	bit	2, l
      002808 20 F4            [12] 8315 	jr	NZ, 00109$
                                   8316 ;src\/GameLogic.h:87: while(TRUE) {
      00280A                       8317 00104$:
                                   8318 ;src\/GameLogic.h:89: BlinkPauseText();
      00280A CDrC1r27         [17] 8319 	call	_BlinkPauseText
                                   8320 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      00280D 2E 07            [ 7] 8321 	ld	l, #0x07
      00280F CDr00r00         [17] 8322 	call	_SNSMAT
                                   8323 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      002812 CB 55            [ 8] 8324 	bit	2, l
      002814 28 F4            [12] 8325 	jr	Z, 00104$
                                   8326 ;src\/GameLogic.h:95: DrawLine(6);
      002816 3E 06            [ 7] 8327 	ld	a, #0x06
      002818 F5               [11] 8328 	push	af
      002819 33               [ 6] 8329 	inc	sp
      00281A CDr9Fr1E         [17] 8330 	call	_DrawLine
      00281D 33               [ 6] 8331 	inc	sp
                                   8332 ;src\/GameLogic.h:96: return;
                                   8333 ;src\/GameLogic.h:106: }
      00281E C9               [10] 8334 	ret
      00281F                       8335 ___str_6:
      00281F 50 41 55 53 45        8336 	.ascii "PAUSE"
      002824 00                    8337 	.db 0x00
                                   8338 ;src\/GameLogic.h:108: void GameLoop() {
                                   8339 ;	---------------------------------
                                   8340 ; Function GameLoop
                                   8341 ; ---------------------------------
      002825                       8342 _GameLoop::
      002825 DD E5            [15] 8343 	push	ix
      002827 DD 21 00 00      [14] 8344 	ld	ix,#0
      00282B DD 39            [15] 8345 	add	ix,sp
      00282D 21 F3 FF         [10] 8346 	ld	hl, #-13
      002830 39               [11] 8347 	add	hl, sp
      002831 F9               [ 6] 8348 	ld	sp, hl
                                   8349 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      002832 DD 36 FF 00      [19] 8350 	ld	-1 (ix), #0
      002836 DD 36 F3 00      [19] 8351 	ld	-13 (ix), #0
                                   8352 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      00283A DD 36 F4 00      [19] 8353 	ld	-12 (ix), #0
      00283E DD 36 F5 00      [19] 8354 	ld	-11 (ix), #0
                                   8355 ;src\/GameLogic.h:115: while(!gameOver) {
      002842                       8356 00150$:
      002842 3Ar00r00         [13] 8357 	ld	a,(#_gameOver + 0)
      002845 B7               [ 4] 8358 	or	a, a
      002846 C2rDDr2B         [10] 8359 	jp	NZ, 00152$
                                   8360 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      002849 ED 4B 9E FC      [20] 8361 	ld	bc, (_JIFFY)
                                   8362 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      00284D                       8363 00101$:
      00284D 2A 9E FC         [16] 8364 	ld	hl, (_JIFFY)
      002850 BF               [ 4] 8365 	cp	a, a
      002851 ED 42            [15] 8366 	sbc	hl, bc
      002853 28 F8            [12] 8367 	jr	Z, 00101$
                                   8368 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002855 ED 4Br01r00      [20] 8369 	ld	bc, (_col)
      002859 06 00            [ 7] 8370 	ld	b, #0x00
      00285B 69               [ 4] 8371 	ld	l, c
      00285C 60               [ 4] 8372 	ld	h, b
      00285D 29               [11] 8373 	add	hl, hl
      00285E 09               [11] 8374 	add	hl, bc
      00285F 29               [11] 8375 	add	hl, hl
      002860 29               [11] 8376 	add	hl, hl
      002861 EB               [ 4] 8377 	ex	de, hl
      002862 21r00r00         [10] 8378 	ld	hl, #_playfield
      002865 19               [11] 8379 	add	hl, de
      002866 EB               [ 4] 8380 	ex	de, hl
      002867 FD 21r02r00      [14] 8381 	ld	iy, #_line
      00286B FD 6E 00         [19] 8382 	ld	l, 0 (iy)
      00286E 26 00            [ 7] 8383 	ld	h, #0x00
      002870 19               [11] 8384 	add	hl, de
      002871 36 00            [10] 8385 	ld	(hl), #0x00
                                   8386 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      002873 ED 4Br01r00      [20] 8387 	ld	bc, (_col)
      002877 06 00            [ 7] 8388 	ld	b, #0x00
      002879 69               [ 4] 8389 	ld	l, c
      00287A 60               [ 4] 8390 	ld	h, b
      00287B 29               [11] 8391 	add	hl, hl
      00287C 09               [11] 8392 	add	hl, bc
      00287D 29               [11] 8393 	add	hl, hl
      00287E 29               [11] 8394 	add	hl, hl
      00287F EB               [ 4] 8395 	ex	de, hl
      002880 21r00r00         [10] 8396 	ld	hl, #_playfield
      002883 19               [11] 8397 	add	hl, de
      002884 EB               [ 4] 8398 	ex	de, hl
      002885 FD 6E 00         [19] 8399 	ld	l, 0 (iy)
      002888 2C               [ 4] 8400 	inc	l
      002889 26 00            [ 7] 8401 	ld	h, #0x00
      00288B 19               [11] 8402 	add	hl, de
      00288C 36 00            [10] 8403 	ld	(hl), #0x00
                                   8404 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      00288E ED 4Br01r00      [20] 8405 	ld	bc, (_col)
      002892 06 00            [ 7] 8406 	ld	b, #0x00
      002894 69               [ 4] 8407 	ld	l, c
      002895 60               [ 4] 8408 	ld	h, b
      002896 29               [11] 8409 	add	hl, hl
      002897 09               [11] 8410 	add	hl, bc
      002898 29               [11] 8411 	add	hl, hl
      002899 29               [11] 8412 	add	hl, hl
      00289A EB               [ 4] 8413 	ex	de, hl
      00289B 21r00r00         [10] 8414 	ld	hl, #_playfield
      00289E 19               [11] 8415 	add	hl, de
      00289F EB               [ 4] 8416 	ex	de, hl
      0028A0 FD 6E 00         [19] 8417 	ld	l, 0 (iy)
      0028A3 2C               [ 4] 8418 	inc	l
      0028A4 2C               [ 4] 8419 	inc	l
      0028A5 26 00            [ 7] 8420 	ld	h, #0x00
      0028A7 19               [11] 8421 	add	hl, de
      0028A8 36 00            [10] 8422 	ld	(hl), #0x00
                                   8423 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      0028AA 2E 01            [ 7] 8424 	ld	l, #0x01
      0028AC CDr00r00         [17] 8425 	call	_GTSTCK
      0028AF DD 75 F6         [19] 8426 	ld	-10 (ix), l
                                   8427 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      0028B2 2E 01            [ 7] 8428 	ld	l, #0x01
      0028B4 CDr00r00         [17] 8429 	call	_GTTRIG
      0028B7 DD 75 F7         [19] 8430 	ld	-9 (ix), l
                                   8431 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      0028BA 2E 03            [ 7] 8432 	ld	l, #0x03
      0028BC CDr00r00         [17] 8433 	call	_GTTRIG
      0028BF DD 75 F8         [19] 8434 	ld	-8 (ix), l
                                   8435 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      0028C2 DD 7E F6         [19] 8436 	ld	a, -10 (ix)
                                   8437 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      0028C5 B7               [ 4] 8438 	or	a,a
      0028C6 20 07            [12] 8439 	jr	NZ, 00105$
      0028C8 6F               [ 4] 8440 	ld	l,a
      0028C9 CDr00r00         [17] 8441 	call	_GTSTCK
      0028CC DD 75 F6         [19] 8442 	ld	-10 (ix), l
      0028CF                       8443 00105$:
                                   8444 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0028CF FD 21r02r00      [14] 8445 	ld	iy, #_line
      0028D3 FD 7E 00         [19] 8446 	ld	a, 0 (iy)
      0028D6 DD 77 F9         [19] 8447 	ld	-7 (ix), a
                                   8448 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      0028D9 DD 7E FF         [19] 8449 	ld	a, -1 (ix)
      0028DC B7               [ 4] 8450 	or	a, a
      0028DD C2rC6r29         [10] 8451 	jp	NZ, 00118$
                                   8452 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0028E0 FD 7E 00         [19] 8453 	ld	a, 0 (iy)
      0028E3 DD 77 FF         [19] 8454 	ld	-1 (ix), a
                                   8455 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0028E6 FD 21r01r00      [14] 8456 	ld	iy, #_col
      0028EA FD 7E 00         [19] 8457 	ld	a, 0 (iy)
      0028ED DD 77 FA         [19] 8458 	ld	-6 (ix), a
                                   8459 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0028F0 DD 7E FF         [19] 8460 	ld	a, -1 (ix)
      0028F3 C6 02            [ 7] 8461 	add	a, #0x02
      0028F5 DD 77 FB         [19] 8462 	ld	-5 (ix), a
                                   8463 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      0028F8 DD 7E F6         [19] 8464 	ld	a, -10 (ix)
      0028FB D6 07            [ 7] 8465 	sub	a, #0x07
      0028FD 20 5F            [12] 8466 	jr	NZ, 00112$
                                   8467 ;src\/GameLogic.h:145: col > 0 && 
      0028FF FD 7E 00         [19] 8468 	ld	a, 0 (iy)
      002902 B7               [ 4] 8469 	or	a, a
      002903 28 59            [12] 8470 	jr	Z, 00112$
                                   8471 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      002905 DD 7E FA         [19] 8472 	ld	a, -6 (ix)
      002908 C6 FF            [ 7] 8473 	add	a, #0xff
      00290A DD 77 FF         [19] 8474 	ld	-1 (ix), a
      00290D 4F               [ 4] 8475 	ld	c, a
      00290E 07               [ 4] 8476 	rlca
      00290F 9F               [ 4] 8477 	sbc	a, a
      002910 47               [ 4] 8478 	ld	b, a
      002911 69               [ 4] 8479 	ld	l, c
      002912 60               [ 4] 8480 	ld	h, b
      002913 29               [11] 8481 	add	hl, hl
      002914 09               [11] 8482 	add	hl, bc
      002915 29               [11] 8483 	add	hl, hl
      002916 29               [11] 8484 	add	hl, hl
      002917 DD 75 FE         [19] 8485 	ld	-2 (ix), l
      00291A DD 74 FF         [19] 8486 	ld	-1 (ix), h
      00291D 3Er00            [ 7] 8487 	ld	a, #<(_playfield)
      00291F DD 86 FE         [19] 8488 	add	a, -2 (ix)
      002922 DD 77 FC         [19] 8489 	ld	-4 (ix), a
      002925 3Es00            [ 7] 8490 	ld	a, #>(_playfield)
      002927 DD 8E FF         [19] 8491 	adc	a, -1 (ix)
      00292A DD 77 FD         [19] 8492 	ld	-3 (ix), a
      00292D DD 7E FC         [19] 8493 	ld	a, -4 (ix)
      002930 DD 86 F9         [19] 8494 	add	a, -7 (ix)
      002933 DD 77 FE         [19] 8495 	ld	-2 (ix), a
      002936 DD 7E FD         [19] 8496 	ld	a, -3 (ix)
      002939 CE 00            [ 7] 8497 	adc	a, #0x00
      00293B DD 77 FF         [19] 8498 	ld	-1 (ix), a
      00293E DD 6E FE         [19] 8499 	ld	l, -2 (ix)
      002941 DD 66 FF         [19] 8500 	ld	h, -1 (ix)
      002944 7E               [ 7] 8501 	ld	a, (hl)
      002945 B7               [ 4] 8502 	or	a, a
      002946 20 16            [12] 8503 	jr	NZ, 00112$
                                   8504 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      002948 DD 7E FC         [19] 8505 	ld	a, -4 (ix)
      00294B DD 86 FB         [19] 8506 	add	a, -5 (ix)
      00294E 4F               [ 4] 8507 	ld	c, a
      00294F DD 7E FD         [19] 8508 	ld	a, -3 (ix)
      002952 CE 00            [ 7] 8509 	adc	a, #0x00
      002954 47               [ 4] 8510 	ld	b, a
      002955 0A               [ 7] 8511 	ld	a, (bc)
      002956 B7               [ 4] 8512 	or	a, a
      002957 20 05            [12] 8513 	jr	NZ, 00112$
                                   8514 ;src\/GameLogic.h:148: col--;
      002959 FD 35 00         [23] 8515 	dec	0 (iy)
      00295C 18 68            [12] 8516 	jr	00118$
      00295E                       8517 00112$:
                                   8518 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      00295E DD 7E F6         [19] 8519 	ld	a, -10 (ix)
      002961 D6 03            [ 7] 8520 	sub	a, #0x03
      002963 20 61            [12] 8521 	jr	NZ, 00118$
                                   8522 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      002965 FD 21r01r00      [14] 8523 	ld	iy, #_col
      002969 FD 7E 00         [19] 8524 	ld	a, 0 (iy)
      00296C D6 05            [ 7] 8525 	sub	a, #0x05
      00296E 30 56            [12] 8526 	jr	NC, 00118$
                                   8527 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      002970 DD 7E FA         [19] 8528 	ld	a, -6 (ix)
      002973 3C               [ 4] 8529 	inc	a
      002974 DD 77 FF         [19] 8530 	ld	-1 (ix), a
      002977 4F               [ 4] 8531 	ld	c, a
      002978 07               [ 4] 8532 	rlca
      002979 9F               [ 4] 8533 	sbc	a, a
      00297A 47               [ 4] 8534 	ld	b, a
      00297B 69               [ 4] 8535 	ld	l, c
      00297C 60               [ 4] 8536 	ld	h, b
      00297D 29               [11] 8537 	add	hl, hl
      00297E 09               [11] 8538 	add	hl, bc
      00297F 29               [11] 8539 	add	hl, hl
      002980 29               [11] 8540 	add	hl, hl
      002981 DD 75 FE         [19] 8541 	ld	-2 (ix), l
      002984 DD 74 FF         [19] 8542 	ld	-1 (ix), h
      002987 3Er00            [ 7] 8543 	ld	a, #<(_playfield)
      002989 DD 86 FE         [19] 8544 	add	a, -2 (ix)
      00298C DD 77 FC         [19] 8545 	ld	-4 (ix), a
      00298F 3Es00            [ 7] 8546 	ld	a, #>(_playfield)
      002991 DD 8E FF         [19] 8547 	adc	a, -1 (ix)
      002994 DD 77 FD         [19] 8548 	ld	-3 (ix), a
      002997 DD 7E FC         [19] 8549 	ld	a, -4 (ix)
      00299A DD 86 F9         [19] 8550 	add	a, -7 (ix)
      00299D DD 77 FE         [19] 8551 	ld	-2 (ix), a
      0029A0 DD 7E FD         [19] 8552 	ld	a, -3 (ix)
      0029A3 CE 00            [ 7] 8553 	adc	a, #0x00
      0029A5 DD 77 FF         [19] 8554 	ld	-1 (ix), a
      0029A8 DD 6E FE         [19] 8555 	ld	l, -2 (ix)
      0029AB DD 66 FF         [19] 8556 	ld	h, -1 (ix)
      0029AE 7E               [ 7] 8557 	ld	a, (hl)
      0029AF B7               [ 4] 8558 	or	a, a
      0029B0 20 14            [12] 8559 	jr	NZ, 00118$
                                   8560 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      0029B2 DD 7E FC         [19] 8561 	ld	a, -4 (ix)
      0029B5 DD 86 FB         [19] 8562 	add	a, -5 (ix)
      0029B8 4F               [ 4] 8563 	ld	c, a
      0029B9 DD 7E FD         [19] 8564 	ld	a, -3 (ix)
      0029BC CE 00            [ 7] 8565 	adc	a, #0x00
      0029BE 47               [ 4] 8566 	ld	b, a
      0029BF 0A               [ 7] 8567 	ld	a, (bc)
      0029C0 B7               [ 4] 8568 	or	a, a
      0029C1 20 03            [12] 8569 	jr	NZ, 00118$
                                   8570 ;src\/GameLogic.h:154: col++;
      0029C3 FD 34 00         [23] 8571 	inc	0 (iy)
      0029C6                       8572 00118$:
                                   8573 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      0029C6 DD 7E F3         [19] 8574 	ld	a, -13 (ix)
      0029C9 B7               [ 4] 8575 	or	a, a
      0029CA C2r8Cr2A         [10] 8576 	jp	NZ, 00132$
                                   8577 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      0029CD DD 7E F6         [19] 8578 	ld	a, -10 (ix)
      0029D0 3D               [ 4] 8579 	dec	a
      0029D1 28 18            [12] 8580 	jr	Z, 00119$
      0029D3 DD 7E F4         [19] 8581 	ld	a, -12 (ix)
      0029D6 B7               [ 4] 8582 	or	a, a
      0029D7 20 06            [12] 8583 	jr	NZ, 00124$
      0029D9 DD 7E F7         [19] 8584 	ld	a, -9 (ix)
      0029DC 3C               [ 4] 8585 	inc	a
      0029DD 28 0C            [12] 8586 	jr	Z, 00119$
      0029DF                       8587 00124$:
      0029DF DD 7E F5         [19] 8588 	ld	a, -11 (ix)
      0029E2 B7               [ 4] 8589 	or	a, a
      0029E3 20 1A            [12] 8590 	jr	NZ, 00120$
      0029E5 DD 7E F8         [19] 8591 	ld	a, -8 (ix)
      0029E8 3C               [ 4] 8592 	inc	a
      0029E9 20 14            [12] 8593 	jr	NZ, 00120$
      0029EB                       8594 00119$:
                                   8595 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      0029EB 3Ar92r00         [13] 8596 	ld	a, (#_bottomPiece + 0)
      0029EE 4F               [ 4] 8597 	ld	c, a
                                   8598 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      0029EF 3Ar91r00         [13] 8599 	ld	a,(#_midPiece + 0)
      0029F2 32r92r00         [13] 8600 	ld	(#_bottomPiece),a
                                   8601 ;src\/GameLogic.h:166: midPiece = topPiece;
      0029F5 3Ar90r00         [13] 8602 	ld	a,(#_topPiece + 0)
      0029F8 32r91r00         [13] 8603 	ld	(#_midPiece),a
                                   8604 ;src\/GameLogic.h:167: topPiece = temp;
      0029FB 21r90r00         [10] 8605 	ld	hl, #_topPiece
      0029FE 71               [ 7] 8606 	ld	(hl), c
      0029FF                       8607 00120$:
                                   8608 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      0029FF DD 7E F6         [19] 8609 	ld	a, -10 (ix)
      002A02 D6 05            [ 7] 8610 	sub	a, #0x05
      002A04 C2r8Cr2A         [10] 8611 	jp	NZ,00132$
                                   8612 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002A07 DD 7E F9         [19] 8613 	ld	a, -7 (ix)
      002A0A DD 77 FE         [19] 8614 	ld	-2 (ix), a
      002A0D DD 7E F9         [19] 8615 	ld	a, -7 (ix)
      002A10 DD 77 FF         [19] 8616 	ld	-1 (ix), a
      002A13                       8617 00154$:
      002A13 DD 7E FF         [19] 8618 	ld	a, -1 (ix)
      002A16 D6 0C            [ 7] 8619 	sub	a, #0x0c
      002A18 30 72            [12] 8620 	jr	NC, 00132$
                                   8621 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      002A1A DD 7E FF         [19] 8622 	ld	a, -1 (ix)
      002A1D D6 09            [ 7] 8623 	sub	a, #0x09
      002A1F 28 4C            [12] 8624 	jr	Z, 00125$
      002A21 ED 4Br01r00      [20] 8625 	ld	bc, (_col)
      002A25 06 00            [ 7] 8626 	ld	b, #0x00
      002A27 69               [ 4] 8627 	ld	l, c
      002A28 60               [ 4] 8628 	ld	h, b
      002A29 29               [11] 8629 	add	hl, hl
      002A2A 09               [11] 8630 	add	hl, bc
      002A2B 29               [11] 8631 	add	hl, hl
      002A2C 29               [11] 8632 	add	hl, hl
      002A2D DD 75 FC         [19] 8633 	ld	-4 (ix), l
      002A30 DD 74 FD         [19] 8634 	ld	-3 (ix), h
      002A33 3Er00            [ 7] 8635 	ld	a, #<(_playfield)
      002A35 DD 86 FC         [19] 8636 	add	a, -4 (ix)
      002A38 DD 77 FA         [19] 8637 	ld	-6 (ix), a
      002A3B 3Es00            [ 7] 8638 	ld	a, #>(_playfield)
      002A3D DD 8E FD         [19] 8639 	adc	a, -3 (ix)
      002A40 DD 77 FB         [19] 8640 	ld	-5 (ix), a
      002A43 DD 7E FF         [19] 8641 	ld	a, -1 (ix)
      002A46 DD 77 FD         [19] 8642 	ld	-3 (ix), a
      002A49 DD 34 FD         [23] 8643 	inc	-3 (ix)
      002A4C DD 34 FD         [23] 8644 	inc	-3 (ix)
      002A4F DD 34 FD         [23] 8645 	inc	-3 (ix)
      002A52 DD 7E FD         [19] 8646 	ld	a, -3 (ix)
      002A55 DD 86 FA         [19] 8647 	add	a, -6 (ix)
      002A58 DD 77 FC         [19] 8648 	ld	-4 (ix), a
      002A5B 3E 00            [ 7] 8649 	ld	a, #0x00
      002A5D DD 8E FB         [19] 8650 	adc	a, -5 (ix)
      002A60 DD 77 FD         [19] 8651 	ld	-3 (ix), a
      002A63 DD 6E FC         [19] 8652 	ld	l, -4 (ix)
      002A66 DD 66 FD         [19] 8653 	ld	h, -3 (ix)
      002A69 7E               [ 7] 8654 	ld	a, (hl)
      002A6A B7               [ 4] 8655 	or	a, a
      002A6B 28 14            [12] 8656 	jr	Z, 00155$
      002A6D                       8657 00125$:
                                   8658 ;src\/GameLogic.h:176: DrawPiece(line);
      002A6D 3Ar02r00         [13] 8659 	ld	a,(#_line + 0)
      002A70 F5               [11] 8660 	push	af
      002A71 33               [ 6] 8661 	inc	sp
      002A72 CDrD7r1E         [17] 8662 	call	_DrawPiece
      002A75 33               [ 6] 8663 	inc	sp
                                   8664 ;src\/GameLogic.h:178: line = i;
      002A76 DD 7E FE         [19] 8665 	ld	a, -2 (ix)
      002A79 32r02r00         [13] 8666 	ld	(#_line),a
                                   8667 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002A7C CDr2Ar27         [17] 8668 	call	_UpdateAndDrawPieceStatic
                                   8669 ;src\/GameLogic.h:181: break;
      002A7F 18 0B            [12] 8670 	jr	00132$
      002A81                       8671 00155$:
                                   8672 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002A81 DD 34 FF         [23] 8673 	inc	-1 (ix)
      002A84 DD 7E FF         [19] 8674 	ld	a, -1 (ix)
      002A87 DD 77 FE         [19] 8675 	ld	-2 (ix), a
      002A8A 18 87            [12] 8676 	jr	00154$
      002A8C                       8677 00132$:
                                   8678 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002A8C DD 7E F6         [19] 8679 	ld	a, -10 (ix)
      002A8F DD 77 FF         [19] 8680 	ld	-1 (ix), a
                                   8681 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      002A92 DD 7E F6         [19] 8682 	ld	a, -10 (ix)
      002A95 DD 77 F3         [19] 8683 	ld	-13 (ix), a
                                   8684 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      002A98 DD 7E F7         [19] 8685 	ld	a, -9 (ix)
      002A9B DD 77 F4         [19] 8686 	ld	-12 (ix), a
                                   8687 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002A9E DD 7E F8         [19] 8688 	ld	a, -8 (ix)
      002AA1 DD 77 F5         [19] 8689 	ld	-11 (ix), a
                                   8690 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      002AA4 2E 07            [ 7] 8691 	ld	l, #0x07
      002AA6 CDr00r00         [17] 8692 	call	_SNSMAT
                                   8693 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      002AA9 CB 55            [ 8] 8694 	bit	2, l
      002AAB 20 03            [12] 8695 	jr	NZ, 00134$
                                   8696 ;src\/GameLogic.h:220: Pause();
      002AAD CDrE5r27         [17] 8697 	call	_Pause
      002AB0                       8698 00134$:
                                   8699 ;src\/GameLogic.h:225: counter++;
      002AB0 FD 21r03r00      [14] 8700 	ld	iy, #_counter
      002AB4 FD 34 00         [23] 8701 	inc	0 (iy)
                                   8702 ;src\/GameLogic.h:226: if(counter == speed) {
      002AB7 FD 7E 00         [19] 8703 	ld	a, 0 (iy)
      002ABA 21r96r00         [10] 8704 	ld	hl, #_speed
      002ABD 96               [ 7] 8705 	sub	a, (hl)
      002ABE 20 3F            [12] 8706 	jr	NZ, 00139$
                                   8707 ;src\/GameLogic.h:228: counter = 0;
      002AC0 21r03r00         [10] 8708 	ld	hl, #_counter
      002AC3 36 00            [10] 8709 	ld	(hl), #0x00
                                   8710 ;src\/GameLogic.h:231: DrawPiece(line);
      002AC5 3Ar02r00         [13] 8711 	ld	a,(#_line + 0)
      002AC8 F5               [11] 8712 	push	af
      002AC9 33               [ 6] 8713 	inc	sp
      002ACA CDrD7r1E         [17] 8714 	call	_DrawPiece
      002ACD 33               [ 6] 8715 	inc	sp
                                   8716 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002ACE FD 21r02r00      [14] 8717 	ld	iy, #_line
      002AD2 FD 7E 00         [19] 8718 	ld	a, 0 (iy)
      002AD5 D6 09            [ 7] 8719 	sub	a, #0x09
      002AD7 28 1F            [12] 8720 	jr	Z, 00135$
      002AD9 ED 4Br01r00      [20] 8721 	ld	bc, (_col)
      002ADD 06 00            [ 7] 8722 	ld	b, #0x00
      002ADF 69               [ 4] 8723 	ld	l, c
      002AE0 60               [ 4] 8724 	ld	h, b
      002AE1 29               [11] 8725 	add	hl, hl
      002AE2 09               [11] 8726 	add	hl, bc
      002AE3 29               [11] 8727 	add	hl, hl
      002AE4 29               [11] 8728 	add	hl, hl
      002AE5 EB               [ 4] 8729 	ex	de, hl
      002AE6 21r00r00         [10] 8730 	ld	hl, #_playfield
      002AE9 19               [11] 8731 	add	hl, de
      002AEA EB               [ 4] 8732 	ex	de, hl
      002AEB FD 7E 00         [19] 8733 	ld	a, 0 (iy)
      002AEE C6 03            [ 7] 8734 	add	a, #0x03
      002AF0 6F               [ 4] 8735 	ld	l, a
      002AF1 26 00            [ 7] 8736 	ld	h, #0x00
      002AF3 19               [11] 8737 	add	hl, de
      002AF4 7E               [ 7] 8738 	ld	a, (hl)
      002AF5 B7               [ 4] 8739 	or	a, a
      002AF6 28 03            [12] 8740 	jr	Z, 00136$
      002AF8                       8741 00135$:
                                   8742 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002AF8 CDr2Ar27         [17] 8743 	call	_UpdateAndDrawPieceStatic
      002AFB                       8744 00136$:
                                   8745 ;src\/GameLogic.h:240: line++;
      002AFB 21r02r00         [10] 8746 	ld	hl, #_line
      002AFE 34               [11] 8747 	inc	(hl)
      002AFF                       8748 00139$:
                                   8749 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      002AFF ED 4Br01r00      [20] 8750 	ld	bc, (_col)
      002B03 06 00            [ 7] 8751 	ld	b, #0x00
      002B05 69               [ 4] 8752 	ld	l, c
      002B06 60               [ 4] 8753 	ld	h, b
      002B07 29               [11] 8754 	add	hl, hl
      002B08 09               [11] 8755 	add	hl, bc
      002B09 29               [11] 8756 	add	hl, hl
      002B0A 29               [11] 8757 	add	hl, hl
      002B0B EB               [ 4] 8758 	ex	de, hl
      002B0C 21r00r00         [10] 8759 	ld	hl, #_playfield
      002B0F 19               [11] 8760 	add	hl, de
      002B10 EB               [ 4] 8761 	ex	de, hl
      002B11 3Ar02r00         [13] 8762 	ld	a, (#_line + 0)
      002B14 6F               [ 4] 8763 	ld	l, a
      002B15 26 00            [ 7] 8764 	ld	h, #0x00
      002B17 19               [11] 8765 	add	hl, de
      002B18 3Ar90r00         [13] 8766 	ld	a,(#_topPiece + 0)
      002B1B 77               [ 7] 8767 	ld	(hl), a
                                   8768 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      002B1C ED 4Br01r00      [20] 8769 	ld	bc, (_col)
      002B20 06 00            [ 7] 8770 	ld	b, #0x00
      002B22 69               [ 4] 8771 	ld	l, c
      002B23 60               [ 4] 8772 	ld	h, b
      002B24 29               [11] 8773 	add	hl, hl
      002B25 09               [11] 8774 	add	hl, bc
      002B26 29               [11] 8775 	add	hl, hl
      002B27 29               [11] 8776 	add	hl, hl
      002B28 EB               [ 4] 8777 	ex	de, hl
      002B29 21r00r00         [10] 8778 	ld	hl, #_playfield
      002B2C 19               [11] 8779 	add	hl, de
      002B2D EB               [ 4] 8780 	ex	de, hl
      002B2E 3Ar02r00         [13] 8781 	ld	a, (#_line + 0)
      002B31 6F               [ 4] 8782 	ld	l, a
      002B32 2C               [ 4] 8783 	inc	l
      002B33 26 00            [ 7] 8784 	ld	h, #0x00
      002B35 19               [11] 8785 	add	hl, de
      002B36 3Ar91r00         [13] 8786 	ld	a,(#_midPiece + 0)
      002B39 77               [ 7] 8787 	ld	(hl), a
                                   8788 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      002B3A ED 4Br01r00      [20] 8789 	ld	bc, (_col)
      002B3E 06 00            [ 7] 8790 	ld	b, #0x00
      002B40 69               [ 4] 8791 	ld	l, c
      002B41 60               [ 4] 8792 	ld	h, b
      002B42 29               [11] 8793 	add	hl, hl
      002B43 09               [11] 8794 	add	hl, bc
      002B44 29               [11] 8795 	add	hl, hl
      002B45 29               [11] 8796 	add	hl, hl
      002B46 EB               [ 4] 8797 	ex	de, hl
      002B47 21r00r00         [10] 8798 	ld	hl, #_playfield
      002B4A 19               [11] 8799 	add	hl, de
      002B4B EB               [ 4] 8800 	ex	de, hl
      002B4C 3Ar02r00         [13] 8801 	ld	a, (#_line + 0)
      002B4F 6F               [ 4] 8802 	ld	l, a
      002B50 2C               [ 4] 8803 	inc	l
      002B51 2C               [ 4] 8804 	inc	l
      002B52 26 00            [ 7] 8805 	ld	h, #0x00
      002B54 19               [11] 8806 	add	hl, de
      002B55 3Ar92r00         [13] 8807 	ld	a,(#_bottomPiece + 0)
      002B58 77               [ 7] 8808 	ld	(hl), a
                                   8809 ;src\/GameLogic.h:254: DrawPiece(line);
      002B59 3Ar02r00         [13] 8810 	ld	a,(#_line + 0)
      002B5C F5               [11] 8811 	push	af
      002B5D 33               [ 6] 8812 	inc	sp
      002B5E CDrD7r1E         [17] 8813 	call	_DrawPiece
      002B61 33               [ 6] 8814 	inc	sp
                                   8815 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002B62 ED 4Br01r00      [20] 8816 	ld	bc, (_col)
      002B66 06 00            [ 7] 8817 	ld	b, #0x00
      002B68 69               [ 4] 8818 	ld	l, c
      002B69 60               [ 4] 8819 	ld	h, b
      002B6A 29               [11] 8820 	add	hl, hl
      002B6B 09               [11] 8821 	add	hl, bc
      002B6C 29               [11] 8822 	add	hl, hl
      002B6D 29               [11] 8823 	add	hl, hl
      002B6E EB               [ 4] 8824 	ex	de, hl
                                   8825 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      002B6F 21r00r00         [10] 8826 	ld	hl, #_playfield
      002B72 19               [11] 8827 	add	hl, de
      002B73 EB               [ 4] 8828 	ex	de, hl
      002B74 3Ar02r00         [13] 8829 	ld	a,(#_line + 0)
      002B77 C6 03            [ 7] 8830 	add	a, #0x03
      002B79 4F               [ 4] 8831 	ld	c, a
      002B7A 69               [ 4] 8832 	ld	l, c
      002B7B 26 00            [ 7] 8833 	ld	h, #0x00
      002B7D 19               [11] 8834 	add	hl, de
      002B7E 7E               [ 7] 8835 	ld	a, (hl)
      002B7F B7               [ 4] 8836 	or	a, a
      002B80 28 06            [12] 8837 	jr	Z, 00148$
                                   8838 ;src\/GameLogic.h:260: HideArrowSprite();
      002B82 CDr48r0C         [17] 8839 	call	_HideArrowSprite
      002B85 C3r42r28         [10] 8840 	jp	00150$
      002B88                       8841 00148$:
                                   8842 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002B88 41               [ 4] 8843 	ld	b, c
      002B89                       8844 00157$:
      002B89 78               [ 4] 8845 	ld	a, b
      002B8A D6 0C            [ 7] 8846 	sub	a, #0x0c
      002B8C D2r42r28         [10] 8847 	jp	NC, 00150$
                                   8848 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002B8F 3Ar01r00         [13] 8849 	ld	a,(#_col + 0)
      002B92 87               [ 4] 8850 	add	a, a
      002B93 87               [ 4] 8851 	add	a, a
      002B94 87               [ 4] 8852 	add	a, a
      002B95 87               [ 4] 8853 	add	a, a
      002B96 DD 77 FE         [19] 8854 	ld	-2 (ix), a
                                   8855 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002B99 68               [ 4] 8856 	ld	l, b
      002B9A 26 00            [ 7] 8857 	ld	h, #0x00
      002B9C 19               [11] 8858 	add	hl, de
                                   8859 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002B9D DD 7E FE         [19] 8860 	ld	a, -2 (ix)
      002BA0 C6 50            [ 7] 8861 	add	a, #0x50
      002BA2 DD 77 FE         [19] 8862 	ld	-2 (ix), a
                                   8863 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002BA5 6E               [ 7] 8864 	ld	l, (hl)
      002BA6 78               [ 4] 8865 	ld	a, b
      002BA7 D6 0B            [ 7] 8866 	sub	a,#0x0b
      002BA9 20 16            [12] 8867 	jr	NZ, 00143$
      002BAB B5               [ 4] 8868 	or	a,l
      002BAC 20 13            [12] 8869 	jr	NZ, 00143$
                                   8870 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002BAE 79               [ 4] 8871 	ld	a, c
      002BAF 87               [ 4] 8872 	add	a, a
      002BB0 87               [ 4] 8873 	add	a, a
      002BB1 87               [ 4] 8874 	add	a, a
      002BB2 87               [ 4] 8875 	add	a, a
      002BB3 F5               [11] 8876 	push	af
      002BB4 33               [ 6] 8877 	inc	sp
      002BB5 DD 7E FE         [19] 8878 	ld	a, -2 (ix)
      002BB8 F5               [11] 8879 	push	af
      002BB9 33               [ 6] 8880 	inc	sp
      002BBA CDrEDr00         [17] 8881 	call	_DrawArrowSprite
      002BBD F1               [10] 8882 	pop	af
                                   8883 ;src\/GameLogic.h:266: break;
      002BBE C3r42r28         [10] 8884 	jp	00150$
      002BC1                       8885 00143$:
                                   8886 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      002BC1 7D               [ 4] 8887 	ld	a, l
      002BC2 B7               [ 4] 8888 	or	a, a
      002BC3 28 14            [12] 8889 	jr	Z, 00158$
                                   8890 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002BC5 79               [ 4] 8891 	ld	a, c
      002BC6 3D               [ 4] 8892 	dec	a
      002BC7 87               [ 4] 8893 	add	a, a
      002BC8 87               [ 4] 8894 	add	a, a
      002BC9 87               [ 4] 8895 	add	a, a
      002BCA 87               [ 4] 8896 	add	a, a
      002BCB F5               [11] 8897 	push	af
      002BCC 33               [ 6] 8898 	inc	sp
      002BCD DD 7E FE         [19] 8899 	ld	a, -2 (ix)
      002BD0 F5               [11] 8900 	push	af
      002BD1 33               [ 6] 8901 	inc	sp
      002BD2 CDrEDr00         [17] 8902 	call	_DrawArrowSprite
      002BD5 F1               [10] 8903 	pop	af
                                   8904 ;src\/GameLogic.h:270: break;
      002BD6 C3r42r28         [10] 8905 	jp	00150$
      002BD9                       8906 00158$:
                                   8907 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002BD9 04               [ 4] 8908 	inc	b
      002BDA 48               [ 4] 8909 	ld	c, b
      002BDB 18 AC            [12] 8910 	jr	00157$
      002BDD                       8911 00152$:
                                   8912 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002BDD 11 0C 0C         [10] 8913 	ld	de, #0x0c0c
      002BE0 D5               [11] 8914 	push	de
      002BE1 21rF5r2B         [10] 8915 	ld	hl, #___str_7
      002BE4 E5               [11] 8916 	push	hl
      002BE5 CDrBBr12         [17] 8917 	call	_DrawString
      002BE8 F1               [10] 8918 	pop	af
                                   8919 ;src\/GameLogic.h:282: Wait(60 * 5);
      002BE9 21 2C 01         [10] 8920 	ld	hl, #0x012c
      002BEC E3               [19] 8921 	ex	(sp),hl
      002BED CDr00r00         [17] 8922 	call	_Wait
                                   8923 ;src\/GameLogic.h:284: }
      002BF0 DD F9            [10] 8924 	ld	sp,ix
      002BF2 DD E1            [14] 8925 	pop	ix
      002BF4 C9               [10] 8926 	ret
      002BF5                       8927 ___str_7:
      002BF5 47 41 4D 45 20 4F 56  8928 	.ascii "GAME OVER"
             45 52
      002BFE 00                    8929 	.db 0x00
                                   8930 ;src\/GameLogic.h:286: void TestCase() {
                                   8931 ;	---------------------------------
                                   8932 ; Function TestCase
                                   8933 ; ---------------------------------
      002BFF                       8934 _TestCase::
                                   8935 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      002BFF 21r20r00         [10] 8936 	ld	hl, #(_playfield + 0x0020)
      002C02 36 04            [10] 8937 	ld	(hl), #0x04
                                   8938 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      002C04 21r21r00         [10] 8939 	ld	hl, #(_playfield + 0x0021)
      002C07 36 0C            [10] 8940 	ld	(hl), #0x0c
                                   8941 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002C09 21r0Ar00         [10] 8942 	ld	hl, #(_playfield + 0x000a)
      002C0C 36 0C            [10] 8943 	ld	(hl), #0x0c
                                   8944 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002C0E 21r16r00         [10] 8945 	ld	hl, #(_playfield + 0x0016)
      002C11 36 0C            [10] 8946 	ld	(hl), #0x0c
                                   8947 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      002C13 21r22r00         [10] 8948 	ld	hl, #(_playfield + 0x0022)
      002C16 36 08            [10] 8949 	ld	(hl), #0x08
                                   8950 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      002C18 21r3Ar00         [10] 8951 	ld	hl, #(_playfield + 0x003a)
      002C1B 36 08            [10] 8952 	ld	(hl), #0x08
                                   8953 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      002C1D 21r46r00         [10] 8954 	ld	hl, #(_playfield + 0x0046)
      002C20 36 0C            [10] 8955 	ld	(hl), #0x0c
                                   8956 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      002C22 21r0Br00         [10] 8957 	ld	hl, #(_playfield + 0x000b)
      002C25 36 04            [10] 8958 	ld	(hl), #0x04
                                   8959 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      002C27 21r17r00         [10] 8960 	ld	hl, #(_playfield + 0x0017)
      002C2A 36 04            [10] 8961 	ld	(hl), #0x04
                                   8962 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      002C2C 21r23r00         [10] 8963 	ld	hl, #(_playfield + 0x0023)
      002C2F 36 08            [10] 8964 	ld	(hl), #0x08
                                   8965 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      002C31 21r2Fr00         [10] 8966 	ld	hl, #(_playfield + 0x002f)
      002C34 36 00            [10] 8967 	ld	(hl), #0x00
                                   8968 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      002C36 21r3Br00         [10] 8969 	ld	hl, #(_playfield + 0x003b)
      002C39 36 08            [10] 8970 	ld	(hl), #0x08
                                   8971 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      002C3B 21r47r00         [10] 8972 	ld	hl, #(_playfield + 0x0047)
      002C3E 36 08            [10] 8973 	ld	(hl), #0x08
                                   8974 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      002C40 3E 0C            [ 7] 8975 	ld	a, #0x0c
      002C42 32r90r00         [13] 8976 	ld	(#_topPiece), a
                                   8977 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   8978 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      002C45 3E 08            [ 7] 8979 	ld	a,#0x08
      002C47 32r91r00         [13] 8980 	ld	(#_midPiece),a
      002C4A 32r92r00         [13] 8981 	ld	(#_bottomPiece), a
                                   8982 ;src\/GameLogic.h:326: }
      002C4D C9               [10] 8983 	ret
                                   8984 ;src\/GameLogic.h:328: void InitGame() {
                                   8985 ;	---------------------------------
                                   8986 ; Function InitGame
                                   8987 ; ---------------------------------
      002C4E                       8988 _InitGame::
                                   8989 ;src\/GameLogic.h:330: gameOver = FALSE;
      002C4E 21r00r00         [10] 8990 	ld	hl, #_gameOver
      002C51 36 00            [10] 8991 	ld	(hl), #0x00
                                   8992 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      002C53 21r02r00         [10] 8993 	ld	hl, #_line
      002C56 36 00            [10] 8994 	ld	(hl), #0x00
                                   8995 ;src\/GameLogic.h:332: col = INITIAL_COL;
      002C58 21r01r00         [10] 8996 	ld	hl, #_col
      002C5B 36 02            [10] 8997 	ld	(hl), #0x02
                                   8998 ;src\/GameLogic.h:334: blocksRemoved = 0;
      002C5D 21 00 00         [10] 8999 	ld	hl, #0x0000
      002C60 22r04r00         [16] 9000 	ld	(_blocksRemoved), hl
                                   9001 ;src\/GameLogic.h:335: level = 1;
      002C63 21r06r00         [10] 9002 	ld	hl, #_level
      002C66 36 01            [10] 9003 	ld	(hl), #0x01
                                   9004 ;src\/GameLogic.h:336: newLevel = FALSE;
      002C68 21r07r00         [10] 9005 	ld	hl, #_newLevel
      002C6B 36 00            [10] 9006 	ld	(hl), #0x00
                                   9007 ;src\/GameLogic.h:337: speed = 60;
      002C6D 21r96r00         [10] 9008 	ld	hl, #_speed
      002C70 36 3C            [10] 9009 	ld	(hl), #0x3c
                                   9010 ;src\/GameLogic.h:339: InitVRAM();
      002C72 CDr80r1B         [17] 9011 	call	_InitVRAM
                                   9012 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002C75 3Ar08r00         [13] 9013 	ld	a, (#_rndSeed + 0)
      002C78 5F               [ 4] 9014 	ld	e, a
      002C79 3A 9E FC         [13] 9015 	ld	a, (#_JIFFY + 0)
      002C7C 67               [ 4] 9016 	ld	h, a
      002C7D 2E 00            [ 7] 9017 	ld	l, #0x00
      002C7F 55               [ 4] 9018 	ld	d, l
      002C80 06 08            [ 7] 9019 	ld	b, #0x08
      002C82                       9020 00133$:
      002C82 29               [11] 9021 	add	hl, hl
      002C83 30 01            [12] 9022 	jr	NC, 00134$
      002C85 19               [11] 9023 	add	hl, de
      002C86                       9024 00134$:
      002C86 10 FA            [13] 9025 	djnz	00133$
      002C88 7D               [ 4] 9026 	ld	a, l
      002C89 C6 63            [ 7] 9027 	add	a, #0x63
      002C8B 4F               [ 4] 9028 	ld	c, a
      002C8C 3Ar08r00         [13] 9029 	ld	a, (#_rndSeed + 0)
      002C8F 5F               [ 4] 9030 	ld	e, a
      002C90 3A 9E FC         [13] 9031 	ld	a, (#_JIFFY + 0)
      002C93 67               [ 4] 9032 	ld	h, a
      002C94 2E 00            [ 7] 9033 	ld	l, #0x00
      002C96 55               [ 4] 9034 	ld	d, l
      002C97 06 08            [ 7] 9035 	ld	b, #0x08
      002C99                       9036 00135$:
      002C99 29               [11] 9037 	add	hl, hl
      002C9A 30 01            [12] 9038 	jr	NC, 00136$
      002C9C 19               [11] 9039 	add	hl, de
      002C9D                       9040 00136$:
      002C9D 10 FA            [13] 9041 	djnz	00135$
      002C9F 79               [ 4] 9042 	ld	a, c
      002CA0 F5               [11] 9043 	push	af
      002CA1 7D               [ 4] 9044 	ld	a, l
      002CA2 33               [ 6] 9045 	inc	sp
      002CA3 F5               [11] 9046 	push	af
      002CA4 33               [ 6] 9047 	inc	sp
      002CA5 3Ar08r00         [13] 9048 	ld	a,(#_rndSeed + 0)
      002CA8 F5               [11] 9049 	push	af
      002CA9 33               [ 6] 9050 	inc	sp
      002CAA CDr50r00         [17] 9051 	call	_InitRnd
      002CAD F1               [10] 9052 	pop	af
      002CAE 33               [ 6] 9053 	inc	sp
                                   9054 ;src\/GameLogic.h:345: RandomPiece();
      002CAF CDrF0r26         [17] 9055 	call	_RandomPiece
                                   9056 ;src\/GameLogic.h:346: RandomPiece();
      002CB2 CDrF0r26         [17] 9057 	call	_RandomPiece
                                   9058 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002CB5 0E 00            [ 7] 9059 	ld	c, #0x00
      002CB7                       9060 00107$:
      002CB7 79               [ 4] 9061 	ld	a, c
      002CB8 D6 0C            [ 7] 9062 	sub	a, #0x0c
      002CBA 30 20            [12] 9063 	jr	NC, 00102$
                                   9064 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002CBC 06 00            [ 7] 9065 	ld	b, #0x00
      002CBE                       9066 00104$:
      002CBE 78               [ 4] 9067 	ld	a, b
      002CBF D6 06            [ 7] 9068 	sub	a, #0x06
      002CC1 30 16            [12] 9069 	jr	NC, 00108$
                                   9070 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      002CC3 58               [ 4] 9071 	ld	e, b
      002CC4 16 00            [ 7] 9072 	ld	d, #0x00
      002CC6 6B               [ 4] 9073 	ld	l, e
      002CC7 62               [ 4] 9074 	ld	h, d
      002CC8 29               [11] 9075 	add	hl, hl
      002CC9 19               [11] 9076 	add	hl, de
      002CCA 29               [11] 9077 	add	hl, hl
      002CCB 29               [11] 9078 	add	hl, hl
      002CCC 11r00r00         [10] 9079 	ld	de, #_playfield
      002CCF 19               [11] 9080 	add	hl, de
      002CD0 59               [ 4] 9081 	ld	e, c
      002CD1 16 00            [ 7] 9082 	ld	d, #0x00
      002CD3 19               [11] 9083 	add	hl, de
      002CD4 36 00            [10] 9084 	ld	(hl), #0x00
                                   9085 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002CD6 04               [ 4] 9086 	inc	b
      002CD7 18 E5            [12] 9087 	jr	00104$
      002CD9                       9088 00108$:
                                   9089 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002CD9 0C               [ 4] 9090 	inc	c
      002CDA 18 DB            [12] 9091 	jr	00107$
      002CDC                       9092 00102$:
                                   9093 ;src\/GameLogic.h:356: TestCase();
      002CDC CDrFFr2B         [17] 9094 	call	_TestCase
                                   9095 ;src\/GameLogic.h:360: DrawBackground();
      002CDF CDr51r1B         [17] 9096 	call	_DrawBackground
                                   9097 ;src\/GameLogic.h:362: DrawPlayfield();
      002CE2 CDrFAr1E         [17] 9098 	call	_DrawPlayfield
                                   9099 ;src\/GameLogic.h:364: DrawScore();
      002CE5 CDrA9r19         [17] 9100 	call	_DrawScore
                                   9101 ;src\/GameLogic.h:366: ShowCountdown();
      002CE8 CDr10r11         [17] 9102 	call	_ShowCountdown
                                   9103 ;src\/GameLogic.h:368: DrawNextPiece();
      002CEB CDrAFr16         [17] 9104 	call	_DrawNextPiece
                                   9105 ;src\/GameLogic.h:370: GameLoop();
                                   9106 ;src\/GameLogic.h:371: }
      002CEE C3r25r28         [10] 9107 	jp	_GameLoop
                                   9108 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   9109 ;	---------------------------------
                                   9110 ; Function ChangeFontColor
                                   9111 ; ---------------------------------
      002CF1                       9112 _ChangeFontColor::
                                   9113 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002CF1 21 02 00         [10] 9114 	ld	hl, #2
      002CF4 39               [11] 9115 	add	hl, sp
      002CF5 7E               [ 7] 9116 	ld	a, (hl)
      002CF6 F5               [11] 9117 	push	af
      002CF7 33               [ 6] 9118 	inc	sp
      002CF8 21 00 03         [10] 9119 	ld	hl, #0x0300
      002CFB E5               [11] 9120 	push	hl
      002CFC 21 78 21         [10] 9121 	ld	hl, #0x2178
      002CFF E5               [11] 9122 	push	hl
      002D00 CDr00r00         [17] 9123 	call	_FILVRM
      002D03 F1               [10] 9124 	pop	af
      002D04 F1               [10] 9125 	pop	af
      002D05 33               [ 6] 9126 	inc	sp
                                   9127 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002D06 21 02 00         [10] 9128 	ld	hl, #2
      002D09 39               [11] 9129 	add	hl, sp
      002D0A 7E               [ 7] 9130 	ld	a, (hl)
      002D0B F5               [11] 9131 	push	af
      002D0C 33               [ 6] 9132 	inc	sp
      002D0D 21 00 03         [10] 9133 	ld	hl, #0x0300
      002D10 E5               [11] 9134 	push	hl
      002D11 21 78 29         [10] 9135 	ld	hl, #0x2978
      002D14 E5               [11] 9136 	push	hl
      002D15 CDr00r00         [17] 9137 	call	_FILVRM
      002D18 F1               [10] 9138 	pop	af
      002D19 F1               [10] 9139 	pop	af
      002D1A 33               [ 6] 9140 	inc	sp
                                   9141 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002D1B 21 02 00         [10] 9142 	ld	hl, #2
      002D1E 39               [11] 9143 	add	hl, sp
      002D1F 7E               [ 7] 9144 	ld	a, (hl)
      002D20 F5               [11] 9145 	push	af
      002D21 33               [ 6] 9146 	inc	sp
      002D22 21 00 03         [10] 9147 	ld	hl, #0x0300
      002D25 E5               [11] 9148 	push	hl
      002D26 21 78 31         [10] 9149 	ld	hl, #0x3178
      002D29 E5               [11] 9150 	push	hl
      002D2A CDr00r00         [17] 9151 	call	_FILVRM
      002D2D F1               [10] 9152 	pop	af
      002D2E F1               [10] 9153 	pop	af
      002D2F 33               [ 6] 9154 	inc	sp
                                   9155 ;src\/Intro.h:7: }
      002D30 C9               [10] 9156 	ret
                                   9157 ;src\/Intro.h:9: void ScrollDownFont() {
                                   9158 ;	---------------------------------
                                   9159 ; Function ScrollDownFont
                                   9160 ; ---------------------------------
      002D31                       9161 _ScrollDownFont::
      002D31 DD E5            [15] 9162 	push	ix
      002D33 DD 21 00 00      [14] 9163 	ld	ix,#0
      002D37 DD 39            [15] 9164 	add	ix,sp
      002D39 F5               [11] 9165 	push	af
                                   9166 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002D3A 11 78 09         [10] 9167 	ld	de, #0x0978
      002D3D                       9168 00107$:
      002D3D 7B               [ 4] 9169 	ld	a, e
      002D3E D6 78            [ 7] 9170 	sub	a, #0x78
      002D40 7A               [ 4] 9171 	ld	a, d
      002D41 DE 0C            [ 7] 9172 	sbc	a, #0x0c
      002D43 30 44            [12] 9173 	jr	NC, 00109$
                                   9174 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002D45 33               [ 6] 9175 	inc	sp
      002D46 33               [ 6] 9176 	inc	sp
      002D47 D5               [11] 9177 	push	de
      002D48 DD 7E FE         [19] 9178 	ld	a, -2 (ix)
      002D4B C6 07            [ 7] 9179 	add	a, #0x07
      002D4D 4F               [ 4] 9180 	ld	c, a
      002D4E DD 7E FF         [19] 9181 	ld	a, -1 (ix)
      002D51 CE 00            [ 7] 9182 	adc	a, #0x00
      002D53 47               [ 4] 9183 	ld	b, a
      002D54                       9184 00104$:
      002D54 78               [ 4] 9185 	ld	a, b
      002D55 B1               [ 4] 9186 	or	a, c
      002D56 28 1A            [12] 9187 	jr	Z, 00101$
                                   9188 ;src\/Intro.h:27: value = RDVRM(j-1);
      002D58 69               [ 4] 9189 	ld	l, c
      002D59 60               [ 4] 9190 	ld	h, b
      002D5A 2B               [ 6] 9191 	dec	hl
      002D5B C5               [11] 9192 	push	bc
      002D5C D5               [11] 9193 	push	de
      002D5D CDr00r00         [17] 9194 	call	_RDVRM
      002D60 D1               [10] 9195 	pop	de
      002D61 C1               [10] 9196 	pop	bc
                                   9197 ;src\/Intro.h:29: WRTVRM(j, 0);
      002D62 C5               [11] 9198 	push	bc
      002D63 D5               [11] 9199 	push	de
      002D64 AF               [ 4] 9200 	xor	a, a
      002D65 F5               [11] 9201 	push	af
      002D66 33               [ 6] 9202 	inc	sp
      002D67 C5               [11] 9203 	push	bc
      002D68 CDr00r00         [17] 9204 	call	_WRTVRM
      002D6B F1               [10] 9205 	pop	af
      002D6C 33               [ 6] 9206 	inc	sp
      002D6D D1               [10] 9207 	pop	de
      002D6E C1               [10] 9208 	pop	bc
                                   9209 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002D6F 0B               [ 6] 9210 	dec	bc
      002D70 18 E2            [12] 9211 	jr	00104$
      002D72                       9212 00101$:
                                   9213 ;src\/Intro.h:31: WRTVRM(i, 0);
      002D72 AF               [ 4] 9214 	xor	a, a
      002D73 F5               [11] 9215 	push	af
      002D74 33               [ 6] 9216 	inc	sp
      002D75 D5               [11] 9217 	push	de
      002D76 CDr00r00         [17] 9218 	call	_WRTVRM
      002D79 F1               [10] 9219 	pop	af
      002D7A 33               [ 6] 9220 	inc	sp
                                   9221 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002D7B DD 7E FE         [19] 9222 	ld	a, -2 (ix)
      002D7E C6 08            [ 7] 9223 	add	a, #0x08
      002D80 5F               [ 4] 9224 	ld	e, a
      002D81 DD 7E FF         [19] 9225 	ld	a, -1 (ix)
      002D84 CE 00            [ 7] 9226 	adc	a, #0x00
      002D86 57               [ 4] 9227 	ld	d, a
      002D87 18 B4            [12] 9228 	jr	00107$
      002D89                       9229 00109$:
                                   9230 ;src\/Intro.h:35: }
      002D89 DD F9            [10] 9231 	ld	sp, ix
      002D8B DD E1            [14] 9232 	pop	ix
      002D8D C9               [10] 9233 	ret
                                   9234 ;src\/Intro.h:37: void Intro() {
                                   9235 ;	---------------------------------
                                   9236 ; Function Intro
                                   9237 ; ---------------------------------
      002D8E                       9238 _Intro::
                                   9239 ;src\/Intro.h:41: InitVRAM();
      002D8E CDr80r1B         [17] 9240 	call	_InitVRAM
                                   9241 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002D91 11 0B 0B         [10] 9242 	ld	de, #0x0b0b
      002D94 D5               [11] 9243 	push	de
      002D95 21r03r2E         [10] 9244 	ld	hl, #___str_8
      002D98 E5               [11] 9245 	push	hl
      002D99 CDrBBr12         [17] 9246 	call	_DrawString
      002D9C F1               [10] 9247 	pop	af
      002D9D F1               [10] 9248 	pop	af
                                   9249 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002D9E 11 09 0D         [10] 9250 	ld	de, #0x0d09
      002DA1 D5               [11] 9251 	push	de
      002DA2 21r0Dr2E         [10] 9252 	ld	hl, #___str_9
      002DA5 E5               [11] 9253 	push	hl
      002DA6 CDrBBr12         [17] 9254 	call	_DrawString
      002DA9 F1               [10] 9255 	pop	af
                                   9256 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002DAA 26 F0            [ 7] 9257 	ld	h,#0xf0
      002DAC E3               [19] 9258 	ex	(sp),hl
      002DAD 33               [ 6] 9259 	inc	sp
      002DAE CDrF1r2C         [17] 9260 	call	_ChangeFontColor
      002DB1 33               [ 6] 9261 	inc	sp
                                   9262 ;src\/Intro.h:56: Wait(2 * 60);
      002DB2 21 78 00         [10] 9263 	ld	hl, #0x0078
      002DB5 E5               [11] 9264 	push	hl
      002DB6 CDr00r00         [17] 9265 	call	_Wait
      002DB9 F1               [10] 9266 	pop	af
                                   9267 ;src\/Intro.h:58: while(counter++ < 20) {
      002DBA 0E 00            [ 7] 9268 	ld	c, #0x00
      002DBC                       9269 00112$:
      002DBC 79               [ 4] 9270 	ld	a, c
      002DBD D6 14            [ 7] 9271 	sub	a, #0x14
      002DBF D0               [11] 9272 	ret	NC
      002DC0 0C               [ 4] 9273 	inc	c
                                   9274 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002DC1 21 9E FC         [10] 9275 	ld	hl, #_JIFFY
      002DC4 46               [ 7] 9276 	ld	b, (hl)
                                   9277 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002DC5                       9278 00101$:
      002DC5 58               [ 4] 9279 	ld	e, b
      002DC6 16 00            [ 7] 9280 	ld	d, #0x00
      002DC8 2A 9E FC         [16] 9281 	ld	hl, (_JIFFY)
      002DCB BF               [ 4] 9282 	cp	a, a
      002DCC ED 52            [15] 9283 	sbc	hl, de
      002DCE 28 F5            [12] 9284 	jr	Z, 00101$
                                   9285 ;src\/Intro.h:63: if(counter == 15) {
      002DD0 79               [ 4] 9286 	ld	a, c
      002DD1 D6 0F            [ 7] 9287 	sub	a, #0x0f
      002DD3 20 0C            [12] 9288 	jr	NZ, 00110$
                                   9289 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002DD5 C5               [11] 9290 	push	bc
      002DD6 3E 40            [ 7] 9291 	ld	a, #0x40
      002DD8 F5               [11] 9292 	push	af
      002DD9 33               [ 6] 9293 	inc	sp
      002DDA CDrF1r2C         [17] 9294 	call	_ChangeFontColor
      002DDD 33               [ 6] 9295 	inc	sp
      002DDE C1               [10] 9296 	pop	bc
      002DDF 18 DB            [12] 9297 	jr	00112$
      002DE1                       9298 00110$:
                                   9299 ;src\/Intro.h:66: else if(counter == 10) {
      002DE1 79               [ 4] 9300 	ld	a, c
      002DE2 D6 0A            [ 7] 9301 	sub	a, #0x0a
      002DE4 20 0C            [12] 9302 	jr	NZ, 00107$
                                   9303 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002DE6 C5               [11] 9304 	push	bc
      002DE7 3E 50            [ 7] 9305 	ld	a, #0x50
      002DE9 F5               [11] 9306 	push	af
      002DEA 33               [ 6] 9307 	inc	sp
      002DEB CDrF1r2C         [17] 9308 	call	_ChangeFontColor
      002DEE 33               [ 6] 9309 	inc	sp
      002DEF C1               [10] 9310 	pop	bc
      002DF0 18 CA            [12] 9311 	jr	00112$
      002DF2                       9312 00107$:
                                   9313 ;src\/Intro.h:69: else if(counter == 5) {
      002DF2 79               [ 4] 9314 	ld	a, c
      002DF3 D6 05            [ 7] 9315 	sub	a, #0x05
      002DF5 20 C5            [12] 9316 	jr	NZ, 00112$
                                   9317 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002DF7 C5               [11] 9318 	push	bc
      002DF8 3E E0            [ 7] 9319 	ld	a, #0xe0
      002DFA F5               [11] 9320 	push	af
      002DFB 33               [ 6] 9321 	inc	sp
      002DFC CDrF1r2C         [17] 9322 	call	_ChangeFontColor
      002DFF 33               [ 6] 9323 	inc	sp
      002E00 C1               [10] 9324 	pop	bc
                                   9325 ;src\/Intro.h:140: }
      002E01 18 B9            [12] 9326 	jr	00112$
      002E03                       9327 ___str_8:
      002E03 41 20 47 41 4D 45 20  9328 	.ascii "A GAME BY"
             42 59
      002E0C 00                    9329 	.db 0x00
      002E0D                       9330 ___str_9:
      002E0D 41 4E 44 52 45 20 42  9331 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      002E1B 00                    9332 	.db 0x00
                                   9333 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   9334 ;	---------------------------------
                                   9335 ; Function SetBlock
                                   9336 ; ---------------------------------
      002E1C                       9337 _SetBlock::
      002E1C DD E5            [15] 9338 	push	ix
      002E1E DD 21 00 00      [14] 9339 	ld	ix,#0
      002E22 DD 39            [15] 9340 	add	ix,sp
                                   9341 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002E24 DD 7E 04         [19] 9342 	ld	a, 4 (ix)
      002E27 06 00            [ 7] 9343 	ld	b, #0x00
      002E29 4F               [ 4] 9344 	ld	c, a
      002E2A 78               [ 4] 9345 	ld	a, b
      002E2B C6 18            [ 7] 9346 	add	a, #0x18
      002E2D 47               [ 4] 9347 	ld	b, a
      002E2E DD 6E 05         [19] 9348 	ld	l, 5 (ix)
      002E31 26 00            [ 7] 9349 	ld	h, #0x00
      002E33 29               [11] 9350 	add	hl, hl
      002E34 29               [11] 9351 	add	hl, hl
      002E35 29               [11] 9352 	add	hl, hl
      002E36 29               [11] 9353 	add	hl, hl
      002E37 29               [11] 9354 	add	hl, hl
      002E38 09               [11] 9355 	add	hl, bc
      002E39 DD 7E 06         [19] 9356 	ld	a, 6 (ix)
      002E3C F5               [11] 9357 	push	af
      002E3D 33               [ 6] 9358 	inc	sp
      002E3E E5               [11] 9359 	push	hl
      002E3F CDr00r00         [17] 9360 	call	_WRTVRM
      002E42 F1               [10] 9361 	pop	af
      002E43 33               [ 6] 9362 	inc	sp
                                   9363 ;src\/Title.h:16: }
      002E44 DD E1            [14] 9364 	pop	ix
      002E46 C9               [10] 9365 	ret
                                   9366 ;src\/Title.h:18: void TitleScreen() {
                                   9367 ;	---------------------------------
                                   9368 ; Function TitleScreen
                                   9369 ; ---------------------------------
      002E47                       9370 _TitleScreen::
      002E47 DD E5            [15] 9371 	push	ix
      002E49 DD 21 00 00      [14] 9372 	ld	ix,#0
      002E4D DD 39            [15] 9373 	add	ix,sp
      002E4F 21 EB FF         [10] 9374 	ld	hl, #-21
      002E52 39               [11] 9375 	add	hl, sp
      002E53 F9               [ 6] 9376 	ld	sp, hl
                                   9377 ;src\/Title.h:19: byte colorIndex = 0;
      002E54 0E 00            [ 7] 9378 	ld	c, #0x00
                                   9379 ;src\/Title.h:52: const char blocks[] = {
      002E56 21 00 00         [10] 9380 	ld	hl, #0
      002E59 39               [11] 9381 	add	hl, sp
      002E5A EB               [ 4] 9382 	ex	de, hl
      002E5B 3E 8E            [ 7] 9383 	ld	a, #0x8e
      002E5D 12               [ 7] 9384 	ld	(de), a
      002E5E 6B               [ 4] 9385 	ld	l, e
      002E5F 62               [ 4] 9386 	ld	h, d
      002E60 23               [ 6] 9387 	inc	hl
      002E61 36 8F            [10] 9388 	ld	(hl), #0x8f
      002E63 6B               [ 4] 9389 	ld	l, e
      002E64 62               [ 4] 9390 	ld	h, d
      002E65 23               [ 6] 9391 	inc	hl
      002E66 23               [ 6] 9392 	inc	hl
      002E67 36 90            [10] 9393 	ld	(hl), #0x90
      002E69 6B               [ 4] 9394 	ld	l, e
      002E6A 62               [ 4] 9395 	ld	h, d
      002E6B 23               [ 6] 9396 	inc	hl
      002E6C 23               [ 6] 9397 	inc	hl
      002E6D 23               [ 6] 9398 	inc	hl
      002E6E 36 91            [10] 9399 	ld	(hl), #0x91
      002E70 21 04 00         [10] 9400 	ld	hl, #0x0004
      002E73 19               [11] 9401 	add	hl, de
      002E74 36 92            [10] 9402 	ld	(hl), #0x92
      002E76 21 05 00         [10] 9403 	ld	hl, #0x0005
      002E79 19               [11] 9404 	add	hl, de
      002E7A 36 93            [10] 9405 	ld	(hl), #0x93
      002E7C 21 06 00         [10] 9406 	ld	hl, #0x0006
      002E7F 19               [11] 9407 	add	hl, de
      002E80 36 94            [10] 9408 	ld	(hl), #0x94
                                   9409 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002E82 21 07 00         [10] 9410 	ld	hl, #7
      002E85 39               [11] 9411 	add	hl, sp
      002E86 DD 75 F6         [19] 9412 	ld	-10 (ix), l
      002E89 DD 74 F7         [19] 9413 	ld	-9 (ix), h
      002E8C 36 8E            [10] 9414 	ld	(hl), #0x8e
      002E8E DD 6E F6         [19] 9415 	ld	l, -10 (ix)
      002E91 DD 66 F7         [19] 9416 	ld	h, -9 (ix)
      002E94 23               [ 6] 9417 	inc	hl
      002E95 36 90            [10] 9418 	ld	(hl), #0x90
      002E97 DD 6E F6         [19] 9419 	ld	l, -10 (ix)
      002E9A DD 66 F7         [19] 9420 	ld	h, -9 (ix)
      002E9D 23               [ 6] 9421 	inc	hl
      002E9E 23               [ 6] 9422 	inc	hl
      002E9F 36 92            [10] 9423 	ld	(hl), #0x92
      002EA1 DD 6E F6         [19] 9424 	ld	l, -10 (ix)
      002EA4 DD 66 F7         [19] 9425 	ld	h, -9 (ix)
      002EA7 23               [ 6] 9426 	inc	hl
      002EA8 23               [ 6] 9427 	inc	hl
      002EA9 23               [ 6] 9428 	inc	hl
      002EAA 36 94            [10] 9429 	ld	(hl), #0x94
                                   9430 ;src\/Title.h:65: InitVRAM();
      002EAC C5               [11] 9431 	push	bc
      002EAD D5               [11] 9432 	push	de
      002EAE CDr80r1B         [17] 9433 	call	_InitVRAM
      002EB1 21 00 01         [10] 9434 	ld	hl, #0x0100
      002EB4 E5               [11] 9435 	push	hl
      002EB5 21r2Er30         [10] 9436 	ld	hl, #_TitleScreen_title_65536_296
      002EB8 E5               [11] 9437 	push	hl
      002EB9 21 00 18         [10] 9438 	ld	hl, #0x1800
      002EBC E5               [11] 9439 	push	hl
      002EBD CDr00r00         [17] 9440 	call	_LDIRVM
      002EC0 21 06 00         [10] 9441 	ld	hl, #6
      002EC3 39               [11] 9442 	add	hl, sp
      002EC4 F9               [ 6] 9443 	ld	sp, hl
      002EC5 11 05 0D         [10] 9444 	ld	de, #0x0d05
      002EC8 D5               [11] 9445 	push	de
      002EC9 21r2Er31         [10] 9446 	ld	hl, #___str_10
      002ECC E5               [11] 9447 	push	hl
      002ECD CDrBBr12         [17] 9448 	call	_DrawString
      002ED0 F1               [10] 9449 	pop	af
      002ED1 26 17            [ 7] 9450 	ld	h,#0x17
      002ED3 E3               [19] 9451 	ex	(sp),hl
      002ED4 33               [ 6] 9452 	inc	sp
      002ED5 AF               [ 4] 9453 	xor	a, a
      002ED6 F5               [11] 9454 	push	af
      002ED7 33               [ 6] 9455 	inc	sp
      002ED8 21r45r31         [10] 9456 	ld	hl, #___str_11
      002EDB E5               [11] 9457 	push	hl
      002EDC CDrBBr12         [17] 9458 	call	_DrawString
      002EDF F1               [10] 9459 	pop	af
      002EE0 F1               [10] 9460 	pop	af
      002EE1 11 19 17         [10] 9461 	ld	de, #0x1719
      002EE4 D5               [11] 9462 	push	de
      002EE5 21r5Ar31         [10] 9463 	ld	hl, #___str_12
      002EE8 E5               [11] 9464 	push	hl
      002EE9 CDrBBr12         [17] 9465 	call	_DrawString
      002EEC F1               [10] 9466 	pop	af
      002EED F1               [10] 9467 	pop	af
      002EEE D1               [10] 9468 	pop	de
      002EEF C1               [10] 9469 	pop	bc
                                   9470 ;src\/Title.h:73: while(TRUE) {
      002EF0                       9471 00120$:
                                   9472 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002EF0 DD 36 FD 00      [19] 9473 	ld	-3 (ix), #0
                                   9474 ;src\/Title.h:78: word counter = 0;
      002EF4 AF               [ 4] 9475 	xor	a, a
      002EF5 DD 77 FE         [19] 9476 	ld	-2 (ix), a
      002EF8 DD 77 FF         [19] 9477 	ld	-1 (ix), a
                                   9478 ;src\/Title.h:88: do {
      002EFB                       9479 00106$:
                                   9480 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002EFB C5               [11] 9481 	push	bc
      002EFC D5               [11] 9482 	push	de
      002EFD 11 1F 1F         [10] 9483 	ld	de, #0x1f1f
      002F00 D5               [11] 9484 	push	de
      002F01 CDrD9r00         [17] 9485 	call	_GetRandomInInterval
      002F04 F1               [10] 9486 	pop	af
                                   9487 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002F05 DD 75 F8         [19] 9488 	ld	-8 (ix), l
      002F08 11 07 07         [10] 9489 	ld	de, #0x0707
      002F0B D5               [11] 9490 	push	de
      002F0C CDrD9r00         [17] 9491 	call	_GetRandomInInterval
      002F0F F1               [10] 9492 	pop	af
      002F10 D1               [10] 9493 	pop	de
      002F11 C1               [10] 9494 	pop	bc
      002F12 DD 75 F9         [19] 9495 	ld	-7 (ix), l
                                   9496 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002F15 DD 6E F8         [19] 9497 	ld	l, -8 (ix)
      002F18 3E 00            [ 7] 9498 	ld	a, #0x00
      002F1A C6 18            [ 7] 9499 	add	a, #0x18
      002F1C 67               [ 4] 9500 	ld	h, a
      002F1D DD 7E F9         [19] 9501 	ld	a, -7 (ix)
      002F20 06 00            [ 7] 9502 	ld	b, #0x00
      002F22 87               [ 4] 9503 	add	a, a
      002F23 CB 10            [ 8] 9504 	rl	b
      002F25 87               [ 4] 9505 	add	a, a
      002F26 CB 10            [ 8] 9506 	rl	b
      002F28 87               [ 4] 9507 	add	a, a
      002F29 CB 10            [ 8] 9508 	rl	b
      002F2B 87               [ 4] 9509 	add	a, a
      002F2C CB 10            [ 8] 9510 	rl	b
      002F2E 87               [ 4] 9511 	add	a, a
      002F2F CB 10            [ 8] 9512 	rl	b
      002F31 85               [ 4] 9513 	add	a, l
      002F32 6F               [ 4] 9514 	ld	l, a
      002F33 78               [ 4] 9515 	ld	a, b
      002F34 8C               [ 4] 9516 	adc	a, h
      002F35 67               [ 4] 9517 	ld	h, a
      002F36 C5               [11] 9518 	push	bc
      002F37 D5               [11] 9519 	push	de
      002F38 CDr00r00         [17] 9520 	call	_RDVRM
      002F3B D1               [10] 9521 	pop	de
      002F3C C1               [10] 9522 	pop	bc
      002F3D DD 75 FA         [19] 9523 	ld	-6 (ix), l
                                   9524 ;src\/Title.h:102: if(counter++ > 1000) {
      002F40 DD 46 FE         [19] 9525 	ld	b, -2 (ix)
      002F43 DD 6E FF         [19] 9526 	ld	l, -1 (ix)
      002F46 DD 34 FE         [23] 9527 	inc	-2 (ix)
      002F49 20 03            [12] 9528 	jr	NZ, 00193$
      002F4B DD 34 FF         [23] 9529 	inc	-1 (ix)
      002F4E                       9530 00193$:
      002F4E 3E E8            [ 7] 9531 	ld	a, #0xe8
      002F50 B8               [ 4] 9532 	cp	a, b
      002F51 3E 03            [ 7] 9533 	ld	a, #0x03
      002F53 9D               [ 4] 9534 	sbc	a, l
      002F54 30 0F            [12] 9535 	jr	NC, 00107$
                                   9536 ;src\/Title.h:103: colorIndex++;
      002F56 0C               [ 4] 9537 	inc	c
                                   9538 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002F57 79               [ 4] 9539 	ld	a, c
      002F58 D6 03            [ 7] 9540 	sub	a, #0x03
      002F5A 38 02            [12] 9541 	jr	C, 00102$
      002F5C 0E 00            [ 7] 9542 	ld	c, #0x00
      002F5E                       9543 00102$:
                                   9544 ;src\/Title.h:119: counter = 0;
      002F5E AF               [ 4] 9545 	xor	a, a
      002F5F DD 77 FE         [19] 9546 	ld	-2 (ix), a
      002F62 DD 77 FF         [19] 9547 	ld	-1 (ix), a
      002F65                       9548 00107$:
                                   9549 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      002F65 DD 7E FA         [19] 9550 	ld	a, -6 (ix)
      002F68 B7               [ 4] 9551 	or	a, a
      002F69 28 90            [12] 9552 	jr	Z, 00106$
      002F6B 79               [ 4] 9553 	ld	a, c
      002F6C 3C               [ 4] 9554 	inc	a
      002F6D F5               [11] 9555 	push	af
      002F6E 17               [ 4] 9556 	rla
      002F6F 9F               [ 4] 9557 	sbc	a, a
      002F70 47               [ 4] 9558 	ld	b, a
      002F71 F1               [10] 9559 	pop	af
      002F72 DD 86 F6         [19] 9560 	add	a, -10 (ix)
      002F75 DD 77 FB         [19] 9561 	ld	-5 (ix), a
      002F78 78               [ 4] 9562 	ld	a, b
      002F79 DD 8E F7         [19] 9563 	adc	a, -9 (ix)
      002F7C DD 77 FC         [19] 9564 	ld	-4 (ix), a
      002F7F DD 6E FB         [19] 9565 	ld	l, -5 (ix)
      002F82 DD 66 FC         [19] 9566 	ld	h, -4 (ix)
      002F85 46               [ 7] 9567 	ld	b, (hl)
      002F86 DD 7E FA         [19] 9568 	ld	a, -6 (ix)
      002F89 90               [ 4] 9569 	sub	a, b
      002F8A CArFBr2E         [10] 9570 	jp	Z,00106$
                                   9571 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002F8D 06 00            [ 7] 9572 	ld	b, #0x00
      002F8F                       9573 00123$:
      002F8F 78               [ 4] 9574 	ld	a, b
      002F90 D6 0A            [ 7] 9575 	sub	a, #0x0a
      002F92 30 79            [12] 9576 	jr	NC, 00118$
                                   9577 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002F94 2A 9E FC         [16] 9578 	ld	hl, (_JIFFY)
      002F97 DD 75 FE         [19] 9579 	ld	-2 (ix), l
      002F9A DD 74 FF         [19] 9580 	ld	-1 (ix), h
                                   9581 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002F9D                       9582 00109$:
      002F9D FD 21 9E FC      [14] 9583 	ld	iy, #_JIFFY
      002FA1 FD 7E 00         [19] 9584 	ld	a, 0 (iy)
      002FA4 DD 96 FE         [19] 9585 	sub	a, -2 (ix)
      002FA7 20 08            [12] 9586 	jr	NZ, 00195$
      002FA9 FD 7E 01         [19] 9587 	ld	a, 1 (iy)
      002FAC DD 96 FF         [19] 9588 	sub	a, -1 (ix)
      002FAF 28 EC            [12] 9589 	jr	Z, 00109$
      002FB1                       9590 00195$:
                                   9591 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002FB1 DD 6E FD         [19] 9592 	ld	l, -3 (ix)
      002FB4 26 00            [ 7] 9593 	ld	h, #0x00
      002FB6 19               [11] 9594 	add	hl, de
      002FB7 7E               [ 7] 9595 	ld	a, (hl)
      002FB8 C5               [11] 9596 	push	bc
      002FB9 D5               [11] 9597 	push	de
      002FBA F5               [11] 9598 	push	af
      002FBB 33               [ 6] 9599 	inc	sp
      002FBC DD 66 F9         [19] 9600 	ld	h, -7 (ix)
      002FBF DD 6E F8         [19] 9601 	ld	l, -8 (ix)
      002FC2 E5               [11] 9602 	push	hl
      002FC3 CDr1Cr2E         [17] 9603 	call	_SetBlock
      002FC6 F1               [10] 9604 	pop	af
      002FC7 33               [ 6] 9605 	inc	sp
      002FC8 D1               [10] 9606 	pop	de
      002FC9 C1               [10] 9607 	pop	bc
                                   9608 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002FCA DD 7E FD         [19] 9609 	ld	a, -3 (ix)
      002FCD DD 34 FD         [23] 9610 	inc	-3 (ix)
      002FD0 D6 07            [ 7] 9611 	sub	a, #0x07
      002FD2 38 04            [12] 9612 	jr	C, 00113$
      002FD4 DD 36 FD 00      [19] 9613 	ld	-3 (ix), #0
      002FD8                       9614 00113$:
                                   9615 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002FD8 C5               [11] 9616 	push	bc
      002FD9 D5               [11] 9617 	push	de
      002FDA 2E 00            [ 7] 9618 	ld	l, #0x00
      002FDC CDr00r00         [17] 9619 	call	_GTTRIG
                                   9620 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002FDF DD 75 FF         [19] 9621 	ld	-1 (ix), l
      002FE2 2E 01            [ 7] 9622 	ld	l, #0x01
      002FE4 CDr00r00         [17] 9623 	call	_GTTRIG
      002FE7 D1               [10] 9624 	pop	de
      002FE8 C1               [10] 9625 	pop	bc
                                   9626 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      002FE9 E5               [11] 9627 	push	hl
      002FEA C5               [11] 9628 	push	bc
      002FEB D5               [11] 9629 	push	de
      002FEC 2E 03            [ 7] 9630 	ld	l, #0x03
      002FEE CDr00r00         [17] 9631 	call	_GTTRIG
      002FF1 7D               [ 4] 9632 	ld	a, l
      002FF2 D1               [10] 9633 	pop	de
      002FF3 C1               [10] 9634 	pop	bc
      002FF4 E1               [10] 9635 	pop	hl
      002FF5 67               [ 4] 9636 	ld	h, a
                                   9637 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002FF6 DD 7E FF         [19] 9638 	ld	a, -1 (ix)
      002FF9 3C               [ 4] 9639 	inc	a
      002FFA 28 06            [12] 9640 	jr	Z, 00114$
      002FFC 2C               [ 4] 9641 	inc	l
      002FFD 28 03            [12] 9642 	jr	Z, 00114$
      002FFF 24               [ 4] 9643 	inc	h
      003000 20 08            [12] 9644 	jr	NZ, 00124$
      003002                       9645 00114$:
                                   9646 ;src\/Title.h:168: rndSeed = JIFFY;
      003002 3A 9E FC         [13] 9647 	ld	a,(#_JIFFY + 0)
      003005 32r08r00         [13] 9648 	ld	(#_rndSeed), a
                                   9649 ;src\/Title.h:169: return;
      003008 18 1F            [12] 9650 	jr	00125$
      00300A                       9651 00124$:
                                   9652 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00300A 04               [ 4] 9653 	inc	b
      00300B 18 82            [12] 9654 	jr	00123$
      00300D                       9655 00118$:
                                   9656 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00300D DD 6E FB         [19] 9657 	ld	l, -5 (ix)
      003010 DD 66 FC         [19] 9658 	ld	h, -4 (ix)
      003013 7E               [ 7] 9659 	ld	a, (hl)
      003014 C5               [11] 9660 	push	bc
      003015 D5               [11] 9661 	push	de
      003016 F5               [11] 9662 	push	af
      003017 33               [ 6] 9663 	inc	sp
      003018 DD 66 F9         [19] 9664 	ld	h, -7 (ix)
      00301B DD 6E F8         [19] 9665 	ld	l, -8 (ix)
      00301E E5               [11] 9666 	push	hl
      00301F CDr1Cr2E         [17] 9667 	call	_SetBlock
      003022 F1               [10] 9668 	pop	af
      003023 33               [ 6] 9669 	inc	sp
      003024 D1               [10] 9670 	pop	de
      003025 C1               [10] 9671 	pop	bc
      003026 C3rF0r2E         [10] 9672 	jp	00120$
      003029                       9673 00125$:
                                   9674 ;src\/Title.h:176: }
      003029 DD F9            [10] 9675 	ld	sp, ix
      00302B DD E1            [14] 9676 	pop	ix
      00302D C9               [10] 9677 	ret
      00302E                       9678 _TitleScreen_title_65536_296:
      00302E 00                    9679 	.db #0x00	; 0
      00302F 00                    9680 	.db #0x00	; 0
      003030 00                    9681 	.db #0x00	; 0
      003031 00                    9682 	.db #0x00	; 0
      003032 8E                    9683 	.db #0x8e	; 142
      003033 8E                    9684 	.db #0x8e	; 142
      003034 8E                    9685 	.db #0x8e	; 142
      003035 8E                    9686 	.db #0x8e	; 142
      003036 00                    9687 	.db #0x00	; 0
      003037 8E                    9688 	.db #0x8e	; 142
      003038 8E                    9689 	.db #0x8e	; 142
      003039 8E                    9690 	.db #0x8e	; 142
      00303A 8E                    9691 	.db #0x8e	; 142
      00303B 8E                    9692 	.db #0x8e	; 142
      00303C 8E                    9693 	.db #0x8e	; 142
      00303D 00                    9694 	.db #0x00	; 0
      00303E 00                    9695 	.db #0x00	; 0
      00303F 8E                    9696 	.db #0x8e	; 142
      003040 8E                    9697 	.db #0x8e	; 142
      003041 00                    9698 	.db #0x00	; 0
      003042 00                    9699 	.db #0x00	; 0
      003043 00                    9700 	.db #0x00	; 0
      003044 8E                    9701 	.db #0x8e	; 142
      003045 8E                    9702 	.db #0x8e	; 142
      003046 00                    9703 	.db #0x00	; 0
      003047 00                    9704 	.db #0x00	; 0
      003048 00                    9705 	.db #0x00	; 0
      003049 00                    9706 	.db #0x00	; 0
      00304A 8E                    9707 	.db #0x8e	; 142
      00304B 8E                    9708 	.db #0x8e	; 142
      00304C 8E                    9709 	.db #0x8e	; 142
      00304D 8E                    9710 	.db #0x8e	; 142
      00304E 00                    9711 	.db #0x00	; 0
      00304F 00                    9712 	.db #0x00	; 0
      003050 00                    9713 	.db #0x00	; 0
      003051 8E                    9714 	.db #0x8e	; 142
      003052 8E                    9715 	.db #0x8e	; 142
      003053 8E                    9716 	.db #0x8e	; 142
      003054 8E                    9717 	.db #0x8e	; 142
      003055 8E                    9718 	.db #0x8e	; 142
      003056 00                    9719 	.db #0x00	; 0
      003057 8E                    9720 	.db #0x8e	; 142
      003058 8E                    9721 	.db #0x8e	; 142
      003059 00                    9722 	.db #0x00	; 0
      00305A 00                    9723 	.db #0x00	; 0
      00305B 00                    9724 	.db #0x00	; 0
      00305C 8E                    9725 	.db #0x8e	; 142
      00305D 8E                    9726 	.db #0x8e	; 142
      00305E 00                    9727 	.db #0x00	; 0
      00305F 00                    9728 	.db #0x00	; 0
      003060 8E                    9729 	.db #0x8e	; 142
      003061 8E                    9730 	.db #0x8e	; 142
      003062 00                    9731 	.db #0x00	; 0
      003063 00                    9732 	.db #0x00	; 0
      003064 8E                    9733 	.db #0x8e	; 142
      003065 8E                    9734 	.db #0x8e	; 142
      003066 00                    9735 	.db #0x00	; 0
      003067 00                    9736 	.db #0x00	; 0
      003068 00                    9737 	.db #0x00	; 0
      003069 8E                    9738 	.db #0x8e	; 142
      00306A 8E                    9739 	.db #0x8e	; 142
      00306B 8E                    9740 	.db #0x8e	; 142
      00306C 8E                    9741 	.db #0x8e	; 142
      00306D 8E                    9742 	.db #0x8e	; 142
      00306E 00                    9743 	.db #0x00	; 0
      00306F 00                    9744 	.db #0x00	; 0
      003070 8E                    9745 	.db #0x8e	; 142
      003071 8E                    9746 	.db #0x8e	; 142
      003072 8E                    9747 	.db #0x8e	; 142
      003073 00                    9748 	.db #0x00	; 0
      003074 8E                    9749 	.db #0x8e	; 142
      003075 8E                    9750 	.db #0x8e	; 142
      003076 00                    9751 	.db #0x00	; 0
      003077 8E                    9752 	.db #0x8e	; 142
      003078 8E                    9753 	.db #0x8e	; 142
      003079 00                    9754 	.db #0x00	; 0
      00307A 00                    9755 	.db #0x00	; 0
      00307B 00                    9756 	.db #0x00	; 0
      00307C 8E                    9757 	.db #0x8e	; 142
      00307D 8E                    9758 	.db #0x8e	; 142
      00307E 00                    9759 	.db #0x00	; 0
      00307F 00                    9760 	.db #0x00	; 0
      003080 00                    9761 	.db #0x00	; 0
      003081 8E                    9762 	.db #0x8e	; 142
      003082 8E                    9763 	.db #0x8e	; 142
      003083 00                    9764 	.db #0x00	; 0
      003084 8E                    9765 	.db #0x8e	; 142
      003085 8E                    9766 	.db #0x8e	; 142
      003086 00                    9767 	.db #0x00	; 0
      003087 00                    9768 	.db #0x00	; 0
      003088 8E                    9769 	.db #0x8e	; 142
      003089 8E                    9770 	.db #0x8e	; 142
      00308A 8E                    9771 	.db #0x8e	; 142
      00308B 00                    9772 	.db #0x00	; 0
      00308C 8E                    9773 	.db #0x8e	; 142
      00308D 8E                    9774 	.db #0x8e	; 142
      00308E 00                    9775 	.db #0x00	; 0
      00308F 8E                    9776 	.db #0x8e	; 142
      003090 8E                    9777 	.db #0x8e	; 142
      003091 8E                    9778 	.db #0x8e	; 142
      003092 00                    9779 	.db #0x00	; 0
      003093 00                    9780 	.db #0x00	; 0
      003094 8E                    9781 	.db #0x8e	; 142
      003095 8E                    9782 	.db #0x8e	; 142
      003096 00                    9783 	.db #0x00	; 0
      003097 8E                    9784 	.db #0x8e	; 142
      003098 8E                    9785 	.db #0x8e	; 142
      003099 00                    9786 	.db #0x00	; 0
      00309A 00                    9787 	.db #0x00	; 0
      00309B 8E                    9788 	.db #0x8e	; 142
      00309C 8E                    9789 	.db #0x8e	; 142
      00309D 00                    9790 	.db #0x00	; 0
      00309E 00                    9791 	.db #0x00	; 0
      00309F 00                    9792 	.db #0x00	; 0
      0030A0 00                    9793 	.db #0x00	; 0
      0030A1 00                    9794 	.db #0x00	; 0
      0030A2 8E                    9795 	.db #0x8e	; 142
      0030A3 8E                    9796 	.db #0x8e	; 142
      0030A4 8E                    9797 	.db #0x8e	; 142
      0030A5 00                    9798 	.db #0x00	; 0
      0030A6 00                    9799 	.db #0x00	; 0
      0030A7 8E                    9800 	.db #0x8e	; 142
      0030A8 8E                    9801 	.db #0x8e	; 142
      0030A9 8E                    9802 	.db #0x8e	; 142
      0030AA 00                    9803 	.db #0x00	; 0
      0030AB 00                    9804 	.db #0x00	; 0
      0030AC 8E                    9805 	.db #0x8e	; 142
      0030AD 8E                    9806 	.db #0x8e	; 142
      0030AE 00                    9807 	.db #0x00	; 0
      0030AF 8E                    9808 	.db #0x8e	; 142
      0030B0 8E                    9809 	.db #0x8e	; 142
      0030B1 00                    9810 	.db #0x00	; 0
      0030B2 00                    9811 	.db #0x00	; 0
      0030B3 00                    9812 	.db #0x00	; 0
      0030B4 8E                    9813 	.db #0x8e	; 142
      0030B5 8E                    9814 	.db #0x8e	; 142
      0030B6 00                    9815 	.db #0x00	; 0
      0030B7 8E                    9816 	.db #0x8e	; 142
      0030B8 8E                    9817 	.db #0x8e	; 142
      0030B9 8E                    9818 	.db #0x8e	; 142
      0030BA 8E                    9819 	.db #0x8e	; 142
      0030BB 8E                    9820 	.db #0x8e	; 142
      0030BC 00                    9821 	.db #0x00	; 0
      0030BD 00                    9822 	.db #0x00	; 0
      0030BE 00                    9823 	.db #0x00	; 0
      0030BF 00                    9824 	.db #0x00	; 0
      0030C0 00                    9825 	.db #0x00	; 0
      0030C1 00                    9826 	.db #0x00	; 0
      0030C2 8E                    9827 	.db #0x8e	; 142
      0030C3 8E                    9828 	.db #0x8e	; 142
      0030C4 00                    9829 	.db #0x00	; 0
      0030C5 00                    9830 	.db #0x00	; 0
      0030C6 00                    9831 	.db #0x00	; 0
      0030C7 8E                    9832 	.db #0x8e	; 142
      0030C8 8E                    9833 	.db #0x8e	; 142
      0030C9 00                    9834 	.db #0x00	; 0
      0030CA 00                    9835 	.db #0x00	; 0
      0030CB 00                    9836 	.db #0x00	; 0
      0030CC 8E                    9837 	.db #0x8e	; 142
      0030CD 8E                    9838 	.db #0x8e	; 142
      0030CE 00                    9839 	.db #0x00	; 0
      0030CF 8E                    9840 	.db #0x8e	; 142
      0030D0 8E                    9841 	.db #0x8e	; 142
      0030D1 00                    9842 	.db #0x00	; 0
      0030D2 00                    9843 	.db #0x00	; 0
      0030D3 00                    9844 	.db #0x00	; 0
      0030D4 8E                    9845 	.db #0x8e	; 142
      0030D5 8E                    9846 	.db #0x8e	; 142
      0030D6 00                    9847 	.db #0x00	; 0
      0030D7 8E                    9848 	.db #0x8e	; 142
      0030D8 8E                    9849 	.db #0x8e	; 142
      0030D9 8E                    9850 	.db #0x8e	; 142
      0030DA 8E                    9851 	.db #0x8e	; 142
      0030DB 8E                    9852 	.db #0x8e	; 142
      0030DC 00                    9853 	.db #0x00	; 0
      0030DD 00                    9854 	.db #0x00	; 0
      0030DE 00                    9855 	.db #0x00	; 0
      0030DF 00                    9856 	.db #0x00	; 0
      0030E0 00                    9857 	.db #0x00	; 0
      0030E1 00                    9858 	.db #0x00	; 0
      0030E2 8E                    9859 	.db #0x8e	; 142
      0030E3 8E                    9860 	.db #0x8e	; 142
      0030E4 00                    9861 	.db #0x00	; 0
      0030E5 00                    9862 	.db #0x00	; 0
      0030E6 00                    9863 	.db #0x00	; 0
      0030E7 8E                    9864 	.db #0x8e	; 142
      0030E8 8E                    9865 	.db #0x8e	; 142
      0030E9 00                    9866 	.db #0x00	; 0
      0030EA 00                    9867 	.db #0x00	; 0
      0030EB 00                    9868 	.db #0x00	; 0
      0030EC 8E                    9869 	.db #0x8e	; 142
      0030ED 8E                    9870 	.db #0x8e	; 142
      0030EE 00                    9871 	.db #0x00	; 0
      0030EF 8E                    9872 	.db #0x8e	; 142
      0030F0 8E                    9873 	.db #0x8e	; 142
      0030F1 8E                    9874 	.db #0x8e	; 142
      0030F2 8E                    9875 	.db #0x8e	; 142
      0030F3 8E                    9876 	.db #0x8e	; 142
      0030F4 8E                    9877 	.db #0x8e	; 142
      0030F5 8E                    9878 	.db #0x8e	; 142
      0030F6 00                    9879 	.db #0x00	; 0
      0030F7 8E                    9880 	.db #0x8e	; 142
      0030F8 8E                    9881 	.db #0x8e	; 142
      0030F9 00                    9882 	.db #0x00	; 0
      0030FA 00                    9883 	.db #0x00	; 0
      0030FB 00                    9884 	.db #0x00	; 0
      0030FC 8E                    9885 	.db #0x8e	; 142
      0030FD 00                    9886 	.db #0x00	; 0
      0030FE 00                    9887 	.db #0x00	; 0
      0030FF 00                    9888 	.db #0x00	; 0
      003100 00                    9889 	.db #0x00	; 0
      003101 00                    9890 	.db #0x00	; 0
      003102 8E                    9891 	.db #0x8e	; 142
      003103 8E                    9892 	.db #0x8e	; 142
      003104 00                    9893 	.db #0x00	; 0
      003105 00                    9894 	.db #0x00	; 0
      003106 00                    9895 	.db #0x00	; 0
      003107 8E                    9896 	.db #0x8e	; 142
      003108 8E                    9897 	.db #0x8e	; 142
      003109 8E                    9898 	.db #0x8e	; 142
      00310A 8E                    9899 	.db #0x8e	; 142
      00310B 8E                    9900 	.db #0x8e	; 142
      00310C 8E                    9901 	.db #0x8e	; 142
      00310D 8E                    9902 	.db #0x8e	; 142
      00310E 00                    9903 	.db #0x00	; 0
      00310F 8E                    9904 	.db #0x8e	; 142
      003110 8E                    9905 	.db #0x8e	; 142
      003111 00                    9906 	.db #0x00	; 0
      003112 00                    9907 	.db #0x00	; 0
      003113 00                    9908 	.db #0x00	; 0
      003114 8E                    9909 	.db #0x8e	; 142
      003115 8E                    9910 	.db #0x8e	; 142
      003116 00                    9911 	.db #0x00	; 0
      003117 8E                    9912 	.db #0x8e	; 142
      003118 8E                    9913 	.db #0x8e	; 142
      003119 00                    9914 	.db #0x00	; 0
      00311A 00                    9915 	.db #0x00	; 0
      00311B 00                    9916 	.db #0x00	; 0
      00311C 8E                    9917 	.db #0x8e	; 142
      00311D 00                    9918 	.db #0x00	; 0
      00311E 00                    9919 	.db #0x00	; 0
      00311F 00                    9920 	.db #0x00	; 0
      003120 00                    9921 	.db #0x00	; 0
      003121 00                    9922 	.db #0x00	; 0
      003122 8E                    9923 	.db #0x8e	; 142
      003123 8E                    9924 	.db #0x8e	; 142
      003124 00                    9925 	.db #0x00	; 0
      003125 00                    9926 	.db #0x00	; 0
      003126 00                    9927 	.db #0x00	; 0
      003127 8E                    9928 	.db #0x8e	; 142
      003128 8E                    9929 	.db #0x8e	; 142
      003129 00                    9930 	.db #0x00	; 0
      00312A 00                    9931 	.db #0x00	; 0
      00312B 00                    9932 	.db #0x00	; 0
      00312C 8E                    9933 	.db #0x8e	; 142
      00312D 8E                    9934 	.db #0x8e	; 142
      00312E                       9935 ___str_10:
      00312E 50 52 45 53 53 20 54  9936 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      003144 00                    9937 	.db 0x00
      003145                       9938 ___str_11:
      003145 41 4E 44 52 45 42 41  9939 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      003159 00                    9940 	.db 0x00
      00315A                       9941 ___str_12:
      00315A 76 2E 3F 2E 3F 2E 3F  9942 	.ascii "v.?.?.?"
      003161 00                    9943 	.db 0x00
                                   9944 ;src\main.c:91: void main() {
                                   9945 ;	---------------------------------
                                   9946 ; Function main
                                   9947 ; ---------------------------------
      003162                       9948 _main::
                                   9949 ;src\main.c:93: while(TRUE) {
      003162                       9950 00102$:
                                   9951 ;src\main.c:99: InitGame();
      003162 CDr4Er2C         [17] 9952 	call	_InitGame
                                   9953 ;src\main.c:102: }
      003165 18 FB            [12] 9954 	jr	00102$
                                   9955 	.area _CODE
                                   9956 	.area _INITIALIZER
      000000                       9957 __xinit__gameOver:
      000000 00                    9958 	.db #0x00	; 0
      000001                       9959 __xinit__col:
      000001 00                    9960 	.db #0x00	; 0
      000002                       9961 __xinit__line:
      000002 00                    9962 	.db #0x00	; 0
      000003                       9963 __xinit__counter:
      000003 00                    9964 	.db #0x00	; 0
      000004                       9965 __xinit__blocksRemoved:
      000004 00 00                 9966 	.dw #0x0000
      000006                       9967 __xinit__level:
      000006 01                    9968 	.db #0x01	; 1
      000007                       9969 __xinit__newLevel:
      000007 00                    9970 	.db #0x00	; 0
      000008                       9971 __xinit__rndSeed:
      000008 00                    9972 	.db #0x00	; 0
                                   9973 	.area _CABS (ABS)
