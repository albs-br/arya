                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _HideArrow
                                     36 	.globl _DrawArrow
                                     37 	.globl _DrawBackground
                                     38 	.globl _DrawScore
                                     39 	.globl _DrawColumn
                                     40 	.globl _DrawNumber
                                     41 	.globl _DrawString
                                     42 	.globl _DrawChar
                                     43 	.globl _GetRandomInInterval
                                     44 	.globl _GetRandom
                                     45 	.globl _InitRnd
                                     46 	.globl _Power
                                     47 	.globl _Wait
                                     48 	.globl _SNSMAT
                                     49 	.globl _GTTRIG
                                     50 	.globl _GTSTCK
                                     51 	.globl _BEEP
                                     52 	.globl _WRTPSG
                                     53 	.globl _GICINI
                                     54 	.globl _INIGRP
                                     55 	.globl _LDIRVM
                                     56 	.globl _FILVRM
                                     57 	.globl _WRTVRM
                                     58 	.globl _RDVRM
                                     59 	.globl _WRTVDP
                                     60 	.globl _ENASCR
                                     61 	.globl _DISSCR
                                     62 	.globl _d_value
                                     63 	.globl _d_line
                                     64 	.globl _d_col
                                     65 	.globl _rndSeed
                                     66 	.globl _newLevel
                                     67 	.globl _level
                                     68 	.globl _blocksRemoved
                                     69 	.globl _counter
                                     70 	.globl _line
                                     71 	.globl _col
                                     72 	.globl _gameOver
                                     73 	.globl _Rand_x
                                     74 	.globl _Rand_c
                                     75 	.globl _Rand_b
                                     76 	.globl _Rand_a
                                     77 	.globl _speed
                                     78 	.globl _bottomPiece
                                     79 	.globl _midPiece
                                     80 	.globl _topPiece
                                     81 	.globl _playfieldTemp
                                     82 	.globl _playfield
                                     83 	.globl _GETPNT
                                     84 	.globl _PUTPNT
                                     85 	.globl _REPCNT
                                     86 	.globl _SCNCNT
                                     87 	.globl _ATRBYT
                                     88 	.globl _CMASK
                                     89 	.globl _CLOC
                                     90 	.globl _BDRCLR
                                     91 	.globl _BAKCLR
                                     92 	.globl _FORCLR
                                     93 	.globl _TRGFLG
                                     94 	.globl _STATFL
                                     95 	.globl _MSX_vdp_regs
                                     96 	.globl _CNSDFG
                                     97 	.globl _CSRX
                                     98 	.globl _CSRY
                                     99 	.globl _MSX_modedata_screen3
                                    100 	.globl _MSX_modedata_screen2
                                    101 	.globl _MSX_modedata_screen1
                                    102 	.globl _MSX_modedata_screen0
                                    103 	.globl _CLIKSW
                                    104 	.globl _JIFFY
                                    105 	.globl _CLMLST
                                    106 	.globl _CRTCNT
                                    107 	.globl _LINLEN
                                    108 	.globl _LINL32
                                    109 	.globl _LINL40
                                    110 	.globl _MSX_charset
                                    111 	.globl _FONT
                                    112 	.globl _pieces
                                    113 	.globl _MSX_version
                                    114 	.globl _MSX_vdp_port_write
                                    115 	.globl _MSX_vdp_port_read
                                    116 ;--------------------------------------------------------
                                    117 ; special function registers
                                    118 ;--------------------------------------------------------
                                    119 ;--------------------------------------------------------
                                    120 ; ram data
                                    121 ;--------------------------------------------------------
                                    122 	.area _DATA
                           000004   123 _MSX_charset	=	0x0004
                           00F3AE   124 _LINL40	=	0xf3ae
                           00F3AF   125 _LINL32	=	0xf3af
                           00F3B0   126 _LINLEN	=	0xf3b0
                           00F3B1   127 _CRTCNT	=	0xf3b1
                           00F3B1   128 _CLMLST	=	0xf3b1
                           00FC9E   129 _JIFFY	=	0xfc9e
                           00F3DB   130 _CLIKSW	=	0xf3db
                           00F3B3   131 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   132 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   133 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   134 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   135 _CSRY	=	0xf3dc
                           00F3DD   136 _CSRX	=	0xf3dd
                           00F3DE   137 _CNSDFG	=	0xf3de
                           00F3DF   138 _MSX_vdp_regs	=	0xf3df
                           00F3E7   139 _STATFL	=	0xf3e7
                           00F3E8   140 _TRGFLG	=	0xf3e8
                           00F3E9   141 _FORCLR	=	0xf3e9
                           00F3EA   142 _BAKCLR	=	0xf3ea
                           00F3EB   143 _BDRCLR	=	0xf3eb
                           00F92A   144 _CLOC	=	0xf92a
                           00F92C   145 _CMASK	=	0xf92c
                           00F3F2   146 _ATRBYT	=	0xf3f2
                           00F3F6   147 _SCNCNT	=	0xf3f6
                           00F3F7   148 _REPCNT	=	0xf3f7
                           00F3F8   149 _PUTPNT	=	0xf3f8
                           00F3FA   150 _GETPNT	=	0xf3fa
      000000                        151 _playfield::
      000000                        152 	.ds 72
      000048                        153 _playfieldTemp::
      000048                        154 	.ds 72
      000090                        155 _topPiece::
      000090                        156 	.ds 1
      000091                        157 _midPiece::
      000091                        158 	.ds 1
      000092                        159 _bottomPiece::
      000092                        160 	.ds 1
      000093                        161 _speed::
      000093                        162 	.ds 1
      000094                        163 _Rand_a::
      000094                        164 	.ds 1
      000095                        165 _Rand_b::
      000095                        166 	.ds 1
      000096                        167 _Rand_c::
      000096                        168 	.ds 1
      000097                        169 _Rand_x::
      000097                        170 	.ds 1
                                    171 ;--------------------------------------------------------
                                    172 ; ram data
                                    173 ;--------------------------------------------------------
                                    174 	.area _INITIALIZED
      000000                        175 _gameOver::
      000000                        176 	.ds 1
      000001                        177 _col::
      000001                        178 	.ds 1
      000002                        179 _line::
      000002                        180 	.ds 1
      000003                        181 _counter::
      000003                        182 	.ds 1
      000004                        183 _blocksRemoved::
      000004                        184 	.ds 2
      000006                        185 _level::
      000006                        186 	.ds 1
      000007                        187 _newLevel::
      000007                        188 	.ds 1
      000008                        189 _rndSeed::
      000008                        190 	.ds 1
      000009                        191 _d_col::
      000009                        192 	.ds 1
      00000A                        193 _d_line::
      00000A                        194 	.ds 1
      00000B                        195 _d_value::
      00000B                        196 	.ds 1
                                    197 ;--------------------------------------------------------
                                    198 ; absolute external ram data
                                    199 ;--------------------------------------------------------
                                    200 	.area _DABS (ABS)
                                    201 ;--------------------------------------------------------
                                    202 ; global & static initialisations
                                    203 ;--------------------------------------------------------
                                    204 	.area _HOME
                                    205 	.area _GSINIT
                                    206 	.area _GSFINAL
                                    207 	.area _GSINIT
                                    208 ;--------------------------------------------------------
                                    209 ; Home
                                    210 ;--------------------------------------------------------
                                    211 	.area _HOME
                                    212 	.area _HOME
                                    213 ;--------------------------------------------------------
                                    214 ; code
                                    215 ;--------------------------------------------------------
                                    216 	.area _CODE
                                    217 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    218 ;	---------------------------------
                                    219 ; Function Wait
                                    220 ; ---------------------------------
      000000                        221 _Wait::
                                    222 ;src\/Common.h:2: do {
      000000 D1               [10]  223 	pop	de
      000001 C1               [10]  224 	pop	bc
      000002 C5               [11]  225 	push	bc
      000003 D5               [11]  226 	push	de
      000004                        227 00104$:
                                    228 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  229 	ld	de, (_JIFFY)
                                    230 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        231 00101$:
      000008 2A 9E FC         [16]  232 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  233 	cp	a, a
      00000C ED 52            [15]  234 	sbc	hl, de
      00000E 28 F8            [12]  235 	jr	Z, 00101$
                                    236 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  237 	ld	e, c
      000011 50               [ 4]  238 	ld	d, b
      000012 0B               [ 6]  239 	dec	bc
      000013 7A               [ 4]  240 	ld	a, d
      000014 B3               [ 4]  241 	or	a, e
      000015 20 ED            [12]  242 	jr	NZ, 00104$
                                    243 ;src\/Common.h:8: }
      000017 C9               [10]  244 	ret
                           000006   245 _MSX_vdp_port_read	=	0x0006
                           000007   246 _MSX_vdp_port_write	=	0x0007
                           00002D   247 _MSX_version	=	0x002d
      000018                        248 _pieces:
      000018 04                     249 	.db #0x04	; 4
      000019 08                     250 	.db #0x08	; 8
      00001A 0C                     251 	.db #0x0c	; 12
      00001B 10                     252 	.db #0x10	; 16
      00001C 14                     253 	.db #0x14	; 20
                                    254 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    255 ;	---------------------------------
                                    256 ; Function Power
                                    257 ; ---------------------------------
      00001D                        258 _Power::
      00001D DD E5            [15]  259 	push	ix
      00001F DD 21 00 00      [14]  260 	ld	ix,#0
      000023 DD 39            [15]  261 	add	ix,sp
                                    262 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  263 	ld	c, 4 (ix)
      000028 06 00            [ 7]  264 	ld	b, #0x00
      00002A 69               [ 4]  265 	ld	l, c
      00002B 60               [ 4]  266 	ld	h, b
                                    267 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  268 	ld	a, 5 (ix)
      00002F B7               [ 4]  269 	or	a, a
      000030 20 05            [12]  270 	jr	NZ, 00111$
      000032 21 01 00         [10]  271 	ld	hl, #0x0001
      000035 18 16            [12]  272 	jr	00107$
                                    273 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        274 00111$:
      000037 1E 01            [ 7]  275 	ld	e, #0x01
      000039                        276 00105$:
      000039 7B               [ 4]  277 	ld	a, e
      00003A DD 96 05         [19]  278 	sub	a, 5 (ix)
      00003D 30 0E            [12]  279 	jr	NC, 00103$
                                    280 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  281 	push	bc
      000040 D5               [11]  282 	push	de
      000041 C5               [11]  283 	push	bc
      000042 E5               [11]  284 	push	hl
      000043 CDr00r00         [17]  285 	call	__mulint
      000046 F1               [10]  286 	pop	af
      000047 F1               [10]  287 	pop	af
      000048 D1               [10]  288 	pop	de
      000049 C1               [10]  289 	pop	bc
                                    290 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  291 	inc	e
      00004B 18 EC            [12]  292 	jr	00105$
      00004D                        293 00103$:
                                    294 ;src\/Math.h:10: return power;
      00004D                        295 00107$:
                                    296 ;src\/Math.h:11: }
      00004D DD E1            [14]  297 	pop	ix
      00004F C9               [10]  298 	ret
                                    299 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    300 ;	---------------------------------
                                    301 ; Function InitRnd
                                    302 ; ---------------------------------
      000050                        303 _InitRnd::
                                    304 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  305 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  306 	ld	hl, #2
      000056 39               [11]  307 	add	hl, sp
      000057 AE               [ 7]  308 	xor	a, (hl)
      000058 32r94r00         [13]  309 	ld	(_Rand_a+0), a
                                    310 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  311 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  312 	ld	hl, #3
      000061 39               [11]  313 	add	hl, sp
      000062 AE               [ 7]  314 	xor	a, (hl)
      000063 32r95r00         [13]  315 	ld	(_Rand_b+0), a
                                    316 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  317 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  318 	ld	hl, #4
      00006C 39               [11]  319 	add	hl, sp
      00006D AE               [ 7]  320 	xor	a, (hl)
      00006E 32r96r00         [13]  321 	ld	(_Rand_c+0), a
                                    322 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  323 	ld	hl, #_Rand_x
      000074 34               [11]  324 	inc	(hl)
                                    325 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  326 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  327 	ld	hl, #_Rand_c
      00007B AE               [ 7]  328 	xor	a, (hl)
      00007C 21r97r00         [10]  329 	ld	hl, #_Rand_x
      00007F AE               [ 7]  330 	xor	a, (hl)
      000080 32r94r00         [13]  331 	ld	(_Rand_a+0), a
                                    332 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  333 	ld	hl, #_Rand_b
      000086 7E               [ 7]  334 	ld	a, (hl)
      000087 FD 21r94r00      [14]  335 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  336 	add	a, 0 (iy)
      00008E 77               [ 7]  337 	ld	(hl), a
                                    338 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  339 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  340 	srl	a
      000094 21r96r00         [10]  341 	ld	hl, #_Rand_c
      000097 86               [ 7]  342 	add	a, (hl)
      000098 FD 21r94r00      [14]  343 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  344 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  345 	ld	(_Rand_c+0), a
                                    346 ;src\/Random.h:38: }
      0000A2 C9               [10]  347 	ret
                                    348 ;src\/Random.h:40: unsigned char GetRandom() {
                                    349 ;	---------------------------------
                                    350 ; Function GetRandom
                                    351 ; ---------------------------------
      0000A3                        352 _GetRandom::
                                    353 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  354 	ld	hl, #_Rand_x
      0000A6 34               [11]  355 	inc	(hl)
                                    356 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  357 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  358 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  359 	xor	a, (hl)
      0000AE 21r97r00         [10]  360 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  361 	xor	a, (hl)
      0000B2 32r94r00         [13]  362 	ld	(_Rand_a+0), a
                                    363 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  364 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  365 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  366 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  367 	add	a, 0 (iy)
      0000C0 77               [ 7]  368 	ld	(hl), a
                                    369 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  370 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  371 	srl	a
      0000C6 21r96r00         [10]  372 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  373 	add	a, (hl)
      0000CA FD 21r94r00      [14]  374 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  375 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  376 	ld	(_Rand_c+0), a
                                    377 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  378 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  379 	ld	l, a
                                    380 ;src\/Random.h:47: }
      0000D8 C9               [10]  381 	ret
                                    382 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    383 ;	---------------------------------
                                    384 ; Function GetRandomInInterval
                                    385 ; ---------------------------------
      0000D9                        386 _GetRandomInInterval::
                                    387 ;src\/Random.h:53: do {
      0000D9                        388 00101$:
                                    389 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  390 	call	_GetRandom
      0000DC 7D               [ 4]  391 	ld	a, l
      0000DD 21 03 00         [10]  392 	ld	hl, #3
      0000E0 39               [11]  393 	add	hl, sp
      0000E1 A6               [ 7]  394 	and	a, (hl)
      0000E2 4F               [ 4]  395 	ld	c, a
                                    396 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  397 	ld	hl, #2
      0000E6 39               [11]  398 	add	hl, sp
      0000E7 7E               [ 7]  399 	ld	a, (hl)
      0000E8 91               [ 4]  400 	sub	a, c
      0000E9 38 EE            [12]  401 	jr	C, 00101$
                                    402 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  403 	ld	l, c
                                    404 ;src\/Random.h:59: }
      0000EC C9               [10]  405 	ret
                                    406 ;src\/Graphics.h:4: void DrawChar(byte character, byte col, byte line) {
                                    407 ;	---------------------------------
                                    408 ; Function DrawChar
                                    409 ; ---------------------------------
      0000ED                        410 _DrawChar::
      0000ED DD E5            [15]  411 	push	ix
      0000EF DD 21 00 00      [14]  412 	ld	ix,#0
      0000F3 DD 39            [15]  413 	add	ix,sp
                                    414 ;src\/Graphics.h:5: WRTVRM(MSX_modedata_screen2.name + (line * 32) + col, character);
      0000F5 ED 4B C7 F3      [20]  415 	ld	bc, (#_MSX_modedata_screen2 + 0)
      0000F9 DD 6E 06         [19]  416 	ld	l, 6 (ix)
      0000FC 26 00            [ 7]  417 	ld	h, #0x00
      0000FE 29               [11]  418 	add	hl, hl
      0000FF 29               [11]  419 	add	hl, hl
      000100 29               [11]  420 	add	hl, hl
      000101 29               [11]  421 	add	hl, hl
      000102 29               [11]  422 	add	hl, hl
      000103 09               [11]  423 	add	hl, bc
      000104 DD 4E 05         [19]  424 	ld	c, 5 (ix)
      000107 06 00            [ 7]  425 	ld	b, #0x00
      000109 09               [11]  426 	add	hl, bc
      00010A DD 7E 04         [19]  427 	ld	a, 4 (ix)
      00010D F5               [11]  428 	push	af
      00010E 33               [ 6]  429 	inc	sp
      00010F E5               [11]  430 	push	hl
      000110 CDr00r00         [17]  431 	call	_WRTVRM
      000113 F1               [10]  432 	pop	af
      000114 33               [ 6]  433 	inc	sp
                                    434 ;src\/Graphics.h:6: }
      000115 DD E1            [14]  435 	pop	ix
      000117 C9               [10]  436 	ret
      000118                        437 _FONT:
      000118 00                     438 	.db #0x00	; 0
      000119 00                     439 	.db #0x00	; 0
      00011A 00                     440 	.db #0x00	; 0
      00011B 00                     441 	.db #0x00	; 0
      00011C 00                     442 	.db #0x00	; 0
      00011D 00                     443 	.db #0x00	; 0
      00011E 00                     444 	.db #0x00	; 0
      00011F 00                     445 	.db #0x00	; 0
      000120 30                     446 	.db #0x30	; 48	'0'
      000121 78                     447 	.db #0x78	; 120	'x'
      000122 78                     448 	.db #0x78	; 120	'x'
      000123 30                     449 	.db #0x30	; 48	'0'
      000124 30                     450 	.db #0x30	; 48	'0'
      000125 00                     451 	.db #0x00	; 0
      000126 30                     452 	.db #0x30	; 48	'0'
      000127 00                     453 	.db #0x00	; 0
      000128 6C                     454 	.db #0x6c	; 108	'l'
      000129 6C                     455 	.db #0x6c	; 108	'l'
      00012A 6C                     456 	.db #0x6c	; 108	'l'
      00012B 00                     457 	.db #0x00	; 0
      00012C 00                     458 	.db #0x00	; 0
      00012D 00                     459 	.db #0x00	; 0
      00012E 00                     460 	.db #0x00	; 0
      00012F 00                     461 	.db #0x00	; 0
      000130 6C                     462 	.db #0x6c	; 108	'l'
      000131 6C                     463 	.db #0x6c	; 108	'l'
      000132 FE                     464 	.db #0xfe	; 254
      000133 6C                     465 	.db #0x6c	; 108	'l'
      000134 FE                     466 	.db #0xfe	; 254
      000135 6C                     467 	.db #0x6c	; 108	'l'
      000136 6C                     468 	.db #0x6c	; 108	'l'
      000137 00                     469 	.db #0x00	; 0
      000138 30                     470 	.db #0x30	; 48	'0'
      000139 7C                     471 	.db #0x7c	; 124
      00013A C0                     472 	.db #0xc0	; 192
      00013B 78                     473 	.db #0x78	; 120	'x'
      00013C 0C                     474 	.db #0x0c	; 12
      00013D F8                     475 	.db #0xf8	; 248
      00013E 30                     476 	.db #0x30	; 48	'0'
      00013F 00                     477 	.db #0x00	; 0
      000140 00                     478 	.db #0x00	; 0
      000141 C6                     479 	.db #0xc6	; 198
      000142 CC                     480 	.db #0xcc	; 204
      000143 18                     481 	.db #0x18	; 24
      000144 30                     482 	.db #0x30	; 48	'0'
      000145 66                     483 	.db #0x66	; 102	'f'
      000146 C6                     484 	.db #0xc6	; 198
      000147 00                     485 	.db #0x00	; 0
      000148 38                     486 	.db #0x38	; 56	'8'
      000149 6C                     487 	.db #0x6c	; 108	'l'
      00014A 38                     488 	.db #0x38	; 56	'8'
      00014B 76                     489 	.db #0x76	; 118	'v'
      00014C DC                     490 	.db #0xdc	; 220
      00014D CC                     491 	.db #0xcc	; 204
      00014E 76                     492 	.db #0x76	; 118	'v'
      00014F 00                     493 	.db #0x00	; 0
      000150 60                     494 	.db #0x60	; 96
      000151 60                     495 	.db #0x60	; 96
      000152 C0                     496 	.db #0xc0	; 192
      000153 00                     497 	.db #0x00	; 0
      000154 00                     498 	.db #0x00	; 0
      000155 00                     499 	.db #0x00	; 0
      000156 00                     500 	.db #0x00	; 0
      000157 00                     501 	.db #0x00	; 0
      000158 18                     502 	.db #0x18	; 24
      000159 30                     503 	.db #0x30	; 48	'0'
      00015A 60                     504 	.db #0x60	; 96
      00015B 60                     505 	.db #0x60	; 96
      00015C 60                     506 	.db #0x60	; 96
      00015D 30                     507 	.db #0x30	; 48	'0'
      00015E 18                     508 	.db #0x18	; 24
      00015F 00                     509 	.db #0x00	; 0
      000160 60                     510 	.db #0x60	; 96
      000161 30                     511 	.db #0x30	; 48	'0'
      000162 18                     512 	.db #0x18	; 24
      000163 18                     513 	.db #0x18	; 24
      000164 18                     514 	.db #0x18	; 24
      000165 30                     515 	.db #0x30	; 48	'0'
      000166 60                     516 	.db #0x60	; 96
      000167 00                     517 	.db #0x00	; 0
      000168 00                     518 	.db #0x00	; 0
      000169 66                     519 	.db #0x66	; 102	'f'
      00016A 3C                     520 	.db #0x3c	; 60
      00016B FF                     521 	.db #0xff	; 255
      00016C 3C                     522 	.db #0x3c	; 60
      00016D 66                     523 	.db #0x66	; 102	'f'
      00016E 00                     524 	.db #0x00	; 0
      00016F 00                     525 	.db #0x00	; 0
      000170 00                     526 	.db #0x00	; 0
      000171 30                     527 	.db #0x30	; 48	'0'
      000172 30                     528 	.db #0x30	; 48	'0'
      000173 FC                     529 	.db #0xfc	; 252
      000174 30                     530 	.db #0x30	; 48	'0'
      000175 30                     531 	.db #0x30	; 48	'0'
      000176 00                     532 	.db #0x00	; 0
      000177 00                     533 	.db #0x00	; 0
      000178 00                     534 	.db #0x00	; 0
      000179 00                     535 	.db #0x00	; 0
      00017A 00                     536 	.db #0x00	; 0
      00017B 00                     537 	.db #0x00	; 0
      00017C 00                     538 	.db #0x00	; 0
      00017D 30                     539 	.db #0x30	; 48	'0'
      00017E 30                     540 	.db #0x30	; 48	'0'
      00017F 60                     541 	.db #0x60	; 96
      000180 00                     542 	.db #0x00	; 0
      000181 00                     543 	.db #0x00	; 0
      000182 00                     544 	.db #0x00	; 0
      000183 FC                     545 	.db #0xfc	; 252
      000184 00                     546 	.db #0x00	; 0
      000185 00                     547 	.db #0x00	; 0
      000186 00                     548 	.db #0x00	; 0
      000187 00                     549 	.db #0x00	; 0
      000188 00                     550 	.db #0x00	; 0
      000189 00                     551 	.db #0x00	; 0
      00018A 00                     552 	.db #0x00	; 0
      00018B 00                     553 	.db #0x00	; 0
      00018C 00                     554 	.db #0x00	; 0
      00018D 30                     555 	.db #0x30	; 48	'0'
      00018E 30                     556 	.db #0x30	; 48	'0'
      00018F 00                     557 	.db #0x00	; 0
      000190 06                     558 	.db #0x06	; 6
      000191 0C                     559 	.db #0x0c	; 12
      000192 18                     560 	.db #0x18	; 24
      000193 30                     561 	.db #0x30	; 48	'0'
      000194 60                     562 	.db #0x60	; 96
      000195 C0                     563 	.db #0xc0	; 192
      000196 80                     564 	.db #0x80	; 128
      000197 00                     565 	.db #0x00	; 0
      000198 7C                     566 	.db #0x7c	; 124
      000199 C6                     567 	.db #0xc6	; 198
      00019A CE                     568 	.db #0xce	; 206
      00019B DE                     569 	.db #0xde	; 222
      00019C F6                     570 	.db #0xf6	; 246
      00019D E6                     571 	.db #0xe6	; 230
      00019E 7C                     572 	.db #0x7c	; 124
      00019F 00                     573 	.db #0x00	; 0
      0001A0 30                     574 	.db #0x30	; 48	'0'
      0001A1 70                     575 	.db #0x70	; 112	'p'
      0001A2 30                     576 	.db #0x30	; 48	'0'
      0001A3 30                     577 	.db #0x30	; 48	'0'
      0001A4 30                     578 	.db #0x30	; 48	'0'
      0001A5 30                     579 	.db #0x30	; 48	'0'
      0001A6 FC                     580 	.db #0xfc	; 252
      0001A7 00                     581 	.db #0x00	; 0
      0001A8 78                     582 	.db #0x78	; 120	'x'
      0001A9 CC                     583 	.db #0xcc	; 204
      0001AA 0C                     584 	.db #0x0c	; 12
      0001AB 38                     585 	.db #0x38	; 56	'8'
      0001AC 60                     586 	.db #0x60	; 96
      0001AD C4                     587 	.db #0xc4	; 196
      0001AE FC                     588 	.db #0xfc	; 252
      0001AF 00                     589 	.db #0x00	; 0
      0001B0 78                     590 	.db #0x78	; 120	'x'
      0001B1 CC                     591 	.db #0xcc	; 204
      0001B2 0C                     592 	.db #0x0c	; 12
      0001B3 38                     593 	.db #0x38	; 56	'8'
      0001B4 0C                     594 	.db #0x0c	; 12
      0001B5 CC                     595 	.db #0xcc	; 204
      0001B6 78                     596 	.db #0x78	; 120	'x'
      0001B7 00                     597 	.db #0x00	; 0
      0001B8 1C                     598 	.db #0x1c	; 28
      0001B9 3C                     599 	.db #0x3c	; 60
      0001BA 6C                     600 	.db #0x6c	; 108	'l'
      0001BB CC                     601 	.db #0xcc	; 204
      0001BC FE                     602 	.db #0xfe	; 254
      0001BD 0C                     603 	.db #0x0c	; 12
      0001BE 1E                     604 	.db #0x1e	; 30
      0001BF 00                     605 	.db #0x00	; 0
      0001C0 FC                     606 	.db #0xfc	; 252
      0001C1 C0                     607 	.db #0xc0	; 192
      0001C2 F8                     608 	.db #0xf8	; 248
      0001C3 0C                     609 	.db #0x0c	; 12
      0001C4 0C                     610 	.db #0x0c	; 12
      0001C5 CC                     611 	.db #0xcc	; 204
      0001C6 78                     612 	.db #0x78	; 120	'x'
      0001C7 00                     613 	.db #0x00	; 0
      0001C8 38                     614 	.db #0x38	; 56	'8'
      0001C9 60                     615 	.db #0x60	; 96
      0001CA C0                     616 	.db #0xc0	; 192
      0001CB F8                     617 	.db #0xf8	; 248
      0001CC CC                     618 	.db #0xcc	; 204
      0001CD CC                     619 	.db #0xcc	; 204
      0001CE 78                     620 	.db #0x78	; 120	'x'
      0001CF 00                     621 	.db #0x00	; 0
      0001D0 FC                     622 	.db #0xfc	; 252
      0001D1 CC                     623 	.db #0xcc	; 204
      0001D2 0C                     624 	.db #0x0c	; 12
      0001D3 18                     625 	.db #0x18	; 24
      0001D4 30                     626 	.db #0x30	; 48	'0'
      0001D5 30                     627 	.db #0x30	; 48	'0'
      0001D6 30                     628 	.db #0x30	; 48	'0'
      0001D7 00                     629 	.db #0x00	; 0
      0001D8 78                     630 	.db #0x78	; 120	'x'
      0001D9 CC                     631 	.db #0xcc	; 204
      0001DA CC                     632 	.db #0xcc	; 204
      0001DB 78                     633 	.db #0x78	; 120	'x'
      0001DC CC                     634 	.db #0xcc	; 204
      0001DD CC                     635 	.db #0xcc	; 204
      0001DE 78                     636 	.db #0x78	; 120	'x'
      0001DF 00                     637 	.db #0x00	; 0
      0001E0 78                     638 	.db #0x78	; 120	'x'
      0001E1 CC                     639 	.db #0xcc	; 204
      0001E2 CC                     640 	.db #0xcc	; 204
      0001E3 7C                     641 	.db #0x7c	; 124
      0001E4 0C                     642 	.db #0x0c	; 12
      0001E5 18                     643 	.db #0x18	; 24
      0001E6 70                     644 	.db #0x70	; 112	'p'
      0001E7 00                     645 	.db #0x00	; 0
      0001E8 00                     646 	.db #0x00	; 0
      0001E9 30                     647 	.db #0x30	; 48	'0'
      0001EA 30                     648 	.db #0x30	; 48	'0'
      0001EB 00                     649 	.db #0x00	; 0
      0001EC 00                     650 	.db #0x00	; 0
      0001ED 30                     651 	.db #0x30	; 48	'0'
      0001EE 30                     652 	.db #0x30	; 48	'0'
      0001EF 00                     653 	.db #0x00	; 0
      0001F0 00                     654 	.db #0x00	; 0
      0001F1 30                     655 	.db #0x30	; 48	'0'
      0001F2 30                     656 	.db #0x30	; 48	'0'
      0001F3 00                     657 	.db #0x00	; 0
      0001F4 30                     658 	.db #0x30	; 48	'0'
      0001F5 30                     659 	.db #0x30	; 48	'0'
      0001F6 60                     660 	.db #0x60	; 96
      0001F7 00                     661 	.db #0x00	; 0
      0001F8 18                     662 	.db #0x18	; 24
      0001F9 30                     663 	.db #0x30	; 48	'0'
      0001FA 60                     664 	.db #0x60	; 96
      0001FB C0                     665 	.db #0xc0	; 192
      0001FC 60                     666 	.db #0x60	; 96
      0001FD 30                     667 	.db #0x30	; 48	'0'
      0001FE 18                     668 	.db #0x18	; 24
      0001FF 00                     669 	.db #0x00	; 0
      000200 00                     670 	.db #0x00	; 0
      000201 00                     671 	.db #0x00	; 0
      000202 FC                     672 	.db #0xfc	; 252
      000203 00                     673 	.db #0x00	; 0
      000204 00                     674 	.db #0x00	; 0
      000205 FC                     675 	.db #0xfc	; 252
      000206 00                     676 	.db #0x00	; 0
      000207 00                     677 	.db #0x00	; 0
      000208 60                     678 	.db #0x60	; 96
      000209 30                     679 	.db #0x30	; 48	'0'
      00020A 18                     680 	.db #0x18	; 24
      00020B 0C                     681 	.db #0x0c	; 12
      00020C 18                     682 	.db #0x18	; 24
      00020D 30                     683 	.db #0x30	; 48	'0'
      00020E 60                     684 	.db #0x60	; 96
      00020F 00                     685 	.db #0x00	; 0
      000210 78                     686 	.db #0x78	; 120	'x'
      000211 CC                     687 	.db #0xcc	; 204
      000212 0C                     688 	.db #0x0c	; 12
      000213 18                     689 	.db #0x18	; 24
      000214 30                     690 	.db #0x30	; 48	'0'
      000215 00                     691 	.db #0x00	; 0
      000216 30                     692 	.db #0x30	; 48	'0'
      000217 00                     693 	.db #0x00	; 0
      000218 7C                     694 	.db #0x7c	; 124
      000219 C6                     695 	.db #0xc6	; 198
      00021A DE                     696 	.db #0xde	; 222
      00021B DE                     697 	.db #0xde	; 222
      00021C DE                     698 	.db #0xde	; 222
      00021D C0                     699 	.db #0xc0	; 192
      00021E 78                     700 	.db #0x78	; 120	'x'
      00021F 00                     701 	.db #0x00	; 0
      000220 30                     702 	.db #0x30	; 48	'0'
      000221 78                     703 	.db #0x78	; 120	'x'
      000222 CC                     704 	.db #0xcc	; 204
      000223 CC                     705 	.db #0xcc	; 204
      000224 FC                     706 	.db #0xfc	; 252
      000225 CC                     707 	.db #0xcc	; 204
      000226 CC                     708 	.db #0xcc	; 204
      000227 00                     709 	.db #0x00	; 0
      000228 FC                     710 	.db #0xfc	; 252
      000229 66                     711 	.db #0x66	; 102	'f'
      00022A 66                     712 	.db #0x66	; 102	'f'
      00022B 7C                     713 	.db #0x7c	; 124
      00022C 66                     714 	.db #0x66	; 102	'f'
      00022D 66                     715 	.db #0x66	; 102	'f'
      00022E FC                     716 	.db #0xfc	; 252
      00022F 00                     717 	.db #0x00	; 0
      000230 3C                     718 	.db #0x3c	; 60
      000231 66                     719 	.db #0x66	; 102	'f'
      000232 C0                     720 	.db #0xc0	; 192
      000233 C0                     721 	.db #0xc0	; 192
      000234 C0                     722 	.db #0xc0	; 192
      000235 66                     723 	.db #0x66	; 102	'f'
      000236 3C                     724 	.db #0x3c	; 60
      000237 00                     725 	.db #0x00	; 0
      000238 F8                     726 	.db #0xf8	; 248
      000239 6C                     727 	.db #0x6c	; 108	'l'
      00023A 66                     728 	.db #0x66	; 102	'f'
      00023B 66                     729 	.db #0x66	; 102	'f'
      00023C 66                     730 	.db #0x66	; 102	'f'
      00023D 6C                     731 	.db #0x6c	; 108	'l'
      00023E F8                     732 	.db #0xf8	; 248
      00023F 00                     733 	.db #0x00	; 0
      000240 FE                     734 	.db #0xfe	; 254
      000241 62                     735 	.db #0x62	; 98	'b'
      000242 68                     736 	.db #0x68	; 104	'h'
      000243 78                     737 	.db #0x78	; 120	'x'
      000244 68                     738 	.db #0x68	; 104	'h'
      000245 62                     739 	.db #0x62	; 98	'b'
      000246 FE                     740 	.db #0xfe	; 254
      000247 00                     741 	.db #0x00	; 0
      000248 FE                     742 	.db #0xfe	; 254
      000249 62                     743 	.db #0x62	; 98	'b'
      00024A 68                     744 	.db #0x68	; 104	'h'
      00024B 78                     745 	.db #0x78	; 120	'x'
      00024C 68                     746 	.db #0x68	; 104	'h'
      00024D 60                     747 	.db #0x60	; 96
      00024E F0                     748 	.db #0xf0	; 240
      00024F 00                     749 	.db #0x00	; 0
      000250 3C                     750 	.db #0x3c	; 60
      000251 66                     751 	.db #0x66	; 102	'f'
      000252 C0                     752 	.db #0xc0	; 192
      000253 C0                     753 	.db #0xc0	; 192
      000254 CE                     754 	.db #0xce	; 206
      000255 66                     755 	.db #0x66	; 102	'f'
      000256 3E                     756 	.db #0x3e	; 62
      000257 00                     757 	.db #0x00	; 0
      000258 CC                     758 	.db #0xcc	; 204
      000259 CC                     759 	.db #0xcc	; 204
      00025A CC                     760 	.db #0xcc	; 204
      00025B FC                     761 	.db #0xfc	; 252
      00025C CC                     762 	.db #0xcc	; 204
      00025D CC                     763 	.db #0xcc	; 204
      00025E CC                     764 	.db #0xcc	; 204
      00025F 00                     765 	.db #0x00	; 0
      000260 78                     766 	.db #0x78	; 120	'x'
      000261 30                     767 	.db #0x30	; 48	'0'
      000262 30                     768 	.db #0x30	; 48	'0'
      000263 30                     769 	.db #0x30	; 48	'0'
      000264 30                     770 	.db #0x30	; 48	'0'
      000265 30                     771 	.db #0x30	; 48	'0'
      000266 78                     772 	.db #0x78	; 120	'x'
      000267 00                     773 	.db #0x00	; 0
      000268 1E                     774 	.db #0x1e	; 30
      000269 0C                     775 	.db #0x0c	; 12
      00026A 0C                     776 	.db #0x0c	; 12
      00026B 0C                     777 	.db #0x0c	; 12
      00026C CC                     778 	.db #0xcc	; 204
      00026D CC                     779 	.db #0xcc	; 204
      00026E 78                     780 	.db #0x78	; 120	'x'
      00026F 00                     781 	.db #0x00	; 0
      000270 E6                     782 	.db #0xe6	; 230
      000271 66                     783 	.db #0x66	; 102	'f'
      000272 6C                     784 	.db #0x6c	; 108	'l'
      000273 78                     785 	.db #0x78	; 120	'x'
      000274 6C                     786 	.db #0x6c	; 108	'l'
      000275 66                     787 	.db #0x66	; 102	'f'
      000276 E6                     788 	.db #0xe6	; 230
      000277 00                     789 	.db #0x00	; 0
      000278 F0                     790 	.db #0xf0	; 240
      000279 60                     791 	.db #0x60	; 96
      00027A 60                     792 	.db #0x60	; 96
      00027B 60                     793 	.db #0x60	; 96
      00027C 62                     794 	.db #0x62	; 98	'b'
      00027D 66                     795 	.db #0x66	; 102	'f'
      00027E FE                     796 	.db #0xfe	; 254
      00027F 00                     797 	.db #0x00	; 0
      000280 C6                     798 	.db #0xc6	; 198
      000281 EE                     799 	.db #0xee	; 238
      000282 FE                     800 	.db #0xfe	; 254
      000283 FE                     801 	.db #0xfe	; 254
      000284 D6                     802 	.db #0xd6	; 214
      000285 C6                     803 	.db #0xc6	; 198
      000286 C6                     804 	.db #0xc6	; 198
      000287 00                     805 	.db #0x00	; 0
      000288 C6                     806 	.db #0xc6	; 198
      000289 E6                     807 	.db #0xe6	; 230
      00028A F6                     808 	.db #0xf6	; 246
      00028B DE                     809 	.db #0xde	; 222
      00028C CE                     810 	.db #0xce	; 206
      00028D C6                     811 	.db #0xc6	; 198
      00028E C6                     812 	.db #0xc6	; 198
      00028F 00                     813 	.db #0x00	; 0
      000290 38                     814 	.db #0x38	; 56	'8'
      000291 6C                     815 	.db #0x6c	; 108	'l'
      000292 C6                     816 	.db #0xc6	; 198
      000293 C6                     817 	.db #0xc6	; 198
      000294 C6                     818 	.db #0xc6	; 198
      000295 6C                     819 	.db #0x6c	; 108	'l'
      000296 38                     820 	.db #0x38	; 56	'8'
      000297 00                     821 	.db #0x00	; 0
      000298 FC                     822 	.db #0xfc	; 252
      000299 66                     823 	.db #0x66	; 102	'f'
      00029A 66                     824 	.db #0x66	; 102	'f'
      00029B 7C                     825 	.db #0x7c	; 124
      00029C 60                     826 	.db #0x60	; 96
      00029D 60                     827 	.db #0x60	; 96
      00029E F0                     828 	.db #0xf0	; 240
      00029F 00                     829 	.db #0x00	; 0
      0002A0 78                     830 	.db #0x78	; 120	'x'
      0002A1 CC                     831 	.db #0xcc	; 204
      0002A2 CC                     832 	.db #0xcc	; 204
      0002A3 CC                     833 	.db #0xcc	; 204
      0002A4 DC                     834 	.db #0xdc	; 220
      0002A5 78                     835 	.db #0x78	; 120	'x'
      0002A6 1C                     836 	.db #0x1c	; 28
      0002A7 00                     837 	.db #0x00	; 0
      0002A8 FC                     838 	.db #0xfc	; 252
      0002A9 66                     839 	.db #0x66	; 102	'f'
      0002AA 66                     840 	.db #0x66	; 102	'f'
      0002AB 7C                     841 	.db #0x7c	; 124
      0002AC 6C                     842 	.db #0x6c	; 108	'l'
      0002AD 66                     843 	.db #0x66	; 102	'f'
      0002AE E6                     844 	.db #0xe6	; 230
      0002AF 00                     845 	.db #0x00	; 0
      0002B0 78                     846 	.db #0x78	; 120	'x'
      0002B1 CC                     847 	.db #0xcc	; 204
      0002B2 E0                     848 	.db #0xe0	; 224
      0002B3 70                     849 	.db #0x70	; 112	'p'
      0002B4 1C                     850 	.db #0x1c	; 28
      0002B5 CC                     851 	.db #0xcc	; 204
      0002B6 78                     852 	.db #0x78	; 120	'x'
      0002B7 00                     853 	.db #0x00	; 0
      0002B8 FC                     854 	.db #0xfc	; 252
      0002B9 B4                     855 	.db #0xb4	; 180
      0002BA 30                     856 	.db #0x30	; 48	'0'
      0002BB 30                     857 	.db #0x30	; 48	'0'
      0002BC 30                     858 	.db #0x30	; 48	'0'
      0002BD 30                     859 	.db #0x30	; 48	'0'
      0002BE 78                     860 	.db #0x78	; 120	'x'
      0002BF 00                     861 	.db #0x00	; 0
      0002C0 CC                     862 	.db #0xcc	; 204
      0002C1 CC                     863 	.db #0xcc	; 204
      0002C2 CC                     864 	.db #0xcc	; 204
      0002C3 CC                     865 	.db #0xcc	; 204
      0002C4 CC                     866 	.db #0xcc	; 204
      0002C5 CC                     867 	.db #0xcc	; 204
      0002C6 FC                     868 	.db #0xfc	; 252
      0002C7 00                     869 	.db #0x00	; 0
      0002C8 CC                     870 	.db #0xcc	; 204
      0002C9 CC                     871 	.db #0xcc	; 204
      0002CA CC                     872 	.db #0xcc	; 204
      0002CB CC                     873 	.db #0xcc	; 204
      0002CC CC                     874 	.db #0xcc	; 204
      0002CD 78                     875 	.db #0x78	; 120	'x'
      0002CE 30                     876 	.db #0x30	; 48	'0'
      0002CF 00                     877 	.db #0x00	; 0
      0002D0 C6                     878 	.db #0xc6	; 198
      0002D1 C6                     879 	.db #0xc6	; 198
      0002D2 C6                     880 	.db #0xc6	; 198
      0002D3 D6                     881 	.db #0xd6	; 214
      0002D4 FE                     882 	.db #0xfe	; 254
      0002D5 EE                     883 	.db #0xee	; 238
      0002D6 C6                     884 	.db #0xc6	; 198
      0002D7 00                     885 	.db #0x00	; 0
      0002D8 C6                     886 	.db #0xc6	; 198
      0002D9 C6                     887 	.db #0xc6	; 198
      0002DA 6C                     888 	.db #0x6c	; 108	'l'
      0002DB 38                     889 	.db #0x38	; 56	'8'
      0002DC 38                     890 	.db #0x38	; 56	'8'
      0002DD 6C                     891 	.db #0x6c	; 108	'l'
      0002DE C6                     892 	.db #0xc6	; 198
      0002DF 00                     893 	.db #0x00	; 0
      0002E0 CC                     894 	.db #0xcc	; 204
      0002E1 CC                     895 	.db #0xcc	; 204
      0002E2 CC                     896 	.db #0xcc	; 204
      0002E3 78                     897 	.db #0x78	; 120	'x'
      0002E4 30                     898 	.db #0x30	; 48	'0'
      0002E5 30                     899 	.db #0x30	; 48	'0'
      0002E6 78                     900 	.db #0x78	; 120	'x'
      0002E7 00                     901 	.db #0x00	; 0
      0002E8 FE                     902 	.db #0xfe	; 254
      0002E9 C6                     903 	.db #0xc6	; 198
      0002EA 8C                     904 	.db #0x8c	; 140
      0002EB 18                     905 	.db #0x18	; 24
      0002EC 32                     906 	.db #0x32	; 50	'2'
      0002ED 66                     907 	.db #0x66	; 102	'f'
      0002EE FE                     908 	.db #0xfe	; 254
      0002EF 00                     909 	.db #0x00	; 0
      0002F0 78                     910 	.db #0x78	; 120	'x'
      0002F1 60                     911 	.db #0x60	; 96
      0002F2 60                     912 	.db #0x60	; 96
      0002F3 60                     913 	.db #0x60	; 96
      0002F4 60                     914 	.db #0x60	; 96
      0002F5 60                     915 	.db #0x60	; 96
      0002F6 78                     916 	.db #0x78	; 120	'x'
      0002F7 00                     917 	.db #0x00	; 0
      0002F8 C0                     918 	.db #0xc0	; 192
      0002F9 60                     919 	.db #0x60	; 96
      0002FA 30                     920 	.db #0x30	; 48	'0'
      0002FB 18                     921 	.db #0x18	; 24
      0002FC 0C                     922 	.db #0x0c	; 12
      0002FD 06                     923 	.db #0x06	; 6
      0002FE 02                     924 	.db #0x02	; 2
      0002FF 00                     925 	.db #0x00	; 0
      000300 78                     926 	.db #0x78	; 120	'x'
      000301 18                     927 	.db #0x18	; 24
      000302 18                     928 	.db #0x18	; 24
      000303 18                     929 	.db #0x18	; 24
      000304 18                     930 	.db #0x18	; 24
      000305 18                     931 	.db #0x18	; 24
      000306 78                     932 	.db #0x78	; 120	'x'
      000307 00                     933 	.db #0x00	; 0
      000308 10                     934 	.db #0x10	; 16
      000309 38                     935 	.db #0x38	; 56	'8'
      00030A 6C                     936 	.db #0x6c	; 108	'l'
      00030B C6                     937 	.db #0xc6	; 198
      00030C 00                     938 	.db #0x00	; 0
      00030D 00                     939 	.db #0x00	; 0
      00030E 00                     940 	.db #0x00	; 0
      00030F 00                     941 	.db #0x00	; 0
      000310 00                     942 	.db #0x00	; 0
      000311 00                     943 	.db #0x00	; 0
      000312 00                     944 	.db #0x00	; 0
      000313 00                     945 	.db #0x00	; 0
      000314 00                     946 	.db #0x00	; 0
      000315 00                     947 	.db #0x00	; 0
      000316 00                     948 	.db #0x00	; 0
      000317 FF                     949 	.db #0xff	; 255
      000318 30                     950 	.db #0x30	; 48	'0'
      000319 30                     951 	.db #0x30	; 48	'0'
      00031A 18                     952 	.db #0x18	; 24
      00031B 00                     953 	.db #0x00	; 0
      00031C 00                     954 	.db #0x00	; 0
      00031D 00                     955 	.db #0x00	; 0
      00031E 00                     956 	.db #0x00	; 0
      00031F 00                     957 	.db #0x00	; 0
      000320 00                     958 	.db #0x00	; 0
      000321 00                     959 	.db #0x00	; 0
      000322 78                     960 	.db #0x78	; 120	'x'
      000323 0C                     961 	.db #0x0c	; 12
      000324 7C                     962 	.db #0x7c	; 124
      000325 CC                     963 	.db #0xcc	; 204
      000326 76                     964 	.db #0x76	; 118	'v'
      000327 00                     965 	.db #0x00	; 0
      000328 E0                     966 	.db #0xe0	; 224
      000329 60                     967 	.db #0x60	; 96
      00032A 60                     968 	.db #0x60	; 96
      00032B 7C                     969 	.db #0x7c	; 124
      00032C 66                     970 	.db #0x66	; 102	'f'
      00032D 66                     971 	.db #0x66	; 102	'f'
      00032E DC                     972 	.db #0xdc	; 220
      00032F 00                     973 	.db #0x00	; 0
      000330 00                     974 	.db #0x00	; 0
      000331 00                     975 	.db #0x00	; 0
      000332 78                     976 	.db #0x78	; 120	'x'
      000333 CC                     977 	.db #0xcc	; 204
      000334 C0                     978 	.db #0xc0	; 192
      000335 CC                     979 	.db #0xcc	; 204
      000336 78                     980 	.db #0x78	; 120	'x'
      000337 00                     981 	.db #0x00	; 0
      000338 1C                     982 	.db #0x1c	; 28
      000339 0C                     983 	.db #0x0c	; 12
      00033A 0C                     984 	.db #0x0c	; 12
      00033B 7C                     985 	.db #0x7c	; 124
      00033C CC                     986 	.db #0xcc	; 204
      00033D CC                     987 	.db #0xcc	; 204
      00033E 76                     988 	.db #0x76	; 118	'v'
      00033F 00                     989 	.db #0x00	; 0
      000340 00                     990 	.db #0x00	; 0
      000341 00                     991 	.db #0x00	; 0
      000342 78                     992 	.db #0x78	; 120	'x'
      000343 CC                     993 	.db #0xcc	; 204
      000344 FC                     994 	.db #0xfc	; 252
      000345 C0                     995 	.db #0xc0	; 192
      000346 78                     996 	.db #0x78	; 120	'x'
      000347 00                     997 	.db #0x00	; 0
      000348 38                     998 	.db #0x38	; 56	'8'
      000349 6C                     999 	.db #0x6c	; 108	'l'
      00034A 60                    1000 	.db #0x60	; 96
      00034B F0                    1001 	.db #0xf0	; 240
      00034C 60                    1002 	.db #0x60	; 96
      00034D 60                    1003 	.db #0x60	; 96
      00034E F0                    1004 	.db #0xf0	; 240
      00034F 00                    1005 	.db #0x00	; 0
      000350 00                    1006 	.db #0x00	; 0
      000351 00                    1007 	.db #0x00	; 0
      000352 76                    1008 	.db #0x76	; 118	'v'
      000353 CC                    1009 	.db #0xcc	; 204
      000354 CC                    1010 	.db #0xcc	; 204
      000355 7C                    1011 	.db #0x7c	; 124
      000356 0C                    1012 	.db #0x0c	; 12
      000357 F8                    1013 	.db #0xf8	; 248
      000358 E0                    1014 	.db #0xe0	; 224
      000359 60                    1015 	.db #0x60	; 96
      00035A 6C                    1016 	.db #0x6c	; 108	'l'
      00035B 76                    1017 	.db #0x76	; 118	'v'
      00035C 66                    1018 	.db #0x66	; 102	'f'
      00035D 66                    1019 	.db #0x66	; 102	'f'
      00035E E6                    1020 	.db #0xe6	; 230
      00035F 00                    1021 	.db #0x00	; 0
      000360 30                    1022 	.db #0x30	; 48	'0'
      000361 00                    1023 	.db #0x00	; 0
      000362 70                    1024 	.db #0x70	; 112	'p'
      000363 30                    1025 	.db #0x30	; 48	'0'
      000364 30                    1026 	.db #0x30	; 48	'0'
      000365 30                    1027 	.db #0x30	; 48	'0'
      000366 78                    1028 	.db #0x78	; 120	'x'
      000367 00                    1029 	.db #0x00	; 0
      000368 0C                    1030 	.db #0x0c	; 12
      000369 00                    1031 	.db #0x00	; 0
      00036A 0C                    1032 	.db #0x0c	; 12
      00036B 0C                    1033 	.db #0x0c	; 12
      00036C 0C                    1034 	.db #0x0c	; 12
      00036D CC                    1035 	.db #0xcc	; 204
      00036E CC                    1036 	.db #0xcc	; 204
      00036F 78                    1037 	.db #0x78	; 120	'x'
      000370 E0                    1038 	.db #0xe0	; 224
      000371 60                    1039 	.db #0x60	; 96
      000372 66                    1040 	.db #0x66	; 102	'f'
      000373 6C                    1041 	.db #0x6c	; 108	'l'
      000374 78                    1042 	.db #0x78	; 120	'x'
      000375 6C                    1043 	.db #0x6c	; 108	'l'
      000376 E6                    1044 	.db #0xe6	; 230
      000377 00                    1045 	.db #0x00	; 0
      000378 70                    1046 	.db #0x70	; 112	'p'
      000379 30                    1047 	.db #0x30	; 48	'0'
      00037A 30                    1048 	.db #0x30	; 48	'0'
      00037B 30                    1049 	.db #0x30	; 48	'0'
      00037C 30                    1050 	.db #0x30	; 48	'0'
      00037D 30                    1051 	.db #0x30	; 48	'0'
      00037E 78                    1052 	.db #0x78	; 120	'x'
      00037F 00                    1053 	.db #0x00	; 0
      000380 00                    1054 	.db #0x00	; 0
      000381 00                    1055 	.db #0x00	; 0
      000382 CC                    1056 	.db #0xcc	; 204
      000383 FE                    1057 	.db #0xfe	; 254
      000384 FE                    1058 	.db #0xfe	; 254
      000385 D6                    1059 	.db #0xd6	; 214
      000386 C6                    1060 	.db #0xc6	; 198
      000387 00                    1061 	.db #0x00	; 0
      000388 00                    1062 	.db #0x00	; 0
      000389 00                    1063 	.db #0x00	; 0
      00038A F8                    1064 	.db #0xf8	; 248
      00038B CC                    1065 	.db #0xcc	; 204
      00038C CC                    1066 	.db #0xcc	; 204
      00038D CC                    1067 	.db #0xcc	; 204
      00038E CC                    1068 	.db #0xcc	; 204
      00038F 00                    1069 	.db #0x00	; 0
      000390 00                    1070 	.db #0x00	; 0
      000391 00                    1071 	.db #0x00	; 0
      000392 78                    1072 	.db #0x78	; 120	'x'
      000393 CC                    1073 	.db #0xcc	; 204
      000394 CC                    1074 	.db #0xcc	; 204
      000395 CC                    1075 	.db #0xcc	; 204
      000396 78                    1076 	.db #0x78	; 120	'x'
      000397 00                    1077 	.db #0x00	; 0
      000398 00                    1078 	.db #0x00	; 0
      000399 00                    1079 	.db #0x00	; 0
      00039A DC                    1080 	.db #0xdc	; 220
      00039B 66                    1081 	.db #0x66	; 102	'f'
      00039C 66                    1082 	.db #0x66	; 102	'f'
      00039D 7C                    1083 	.db #0x7c	; 124
      00039E 60                    1084 	.db #0x60	; 96
      00039F F0                    1085 	.db #0xf0	; 240
      0003A0 00                    1086 	.db #0x00	; 0
      0003A1 00                    1087 	.db #0x00	; 0
      0003A2 76                    1088 	.db #0x76	; 118	'v'
      0003A3 CC                    1089 	.db #0xcc	; 204
      0003A4 CC                    1090 	.db #0xcc	; 204
      0003A5 7C                    1091 	.db #0x7c	; 124
      0003A6 0C                    1092 	.db #0x0c	; 12
      0003A7 1E                    1093 	.db #0x1e	; 30
      0003A8 00                    1094 	.db #0x00	; 0
      0003A9 00                    1095 	.db #0x00	; 0
      0003AA DC                    1096 	.db #0xdc	; 220
      0003AB 76                    1097 	.db #0x76	; 118	'v'
      0003AC 66                    1098 	.db #0x66	; 102	'f'
      0003AD 60                    1099 	.db #0x60	; 96
      0003AE F0                    1100 	.db #0xf0	; 240
      0003AF 00                    1101 	.db #0x00	; 0
      0003B0 00                    1102 	.db #0x00	; 0
      0003B1 00                    1103 	.db #0x00	; 0
      0003B2 7C                    1104 	.db #0x7c	; 124
      0003B3 C0                    1105 	.db #0xc0	; 192
      0003B4 78                    1106 	.db #0x78	; 120	'x'
      0003B5 0C                    1107 	.db #0x0c	; 12
      0003B6 F8                    1108 	.db #0xf8	; 248
      0003B7 00                    1109 	.db #0x00	; 0
      0003B8 10                    1110 	.db #0x10	; 16
      0003B9 30                    1111 	.db #0x30	; 48	'0'
      0003BA 7C                    1112 	.db #0x7c	; 124
      0003BB 30                    1113 	.db #0x30	; 48	'0'
      0003BC 30                    1114 	.db #0x30	; 48	'0'
      0003BD 34                    1115 	.db #0x34	; 52	'4'
      0003BE 18                    1116 	.db #0x18	; 24
      0003BF 00                    1117 	.db #0x00	; 0
      0003C0 00                    1118 	.db #0x00	; 0
      0003C1 00                    1119 	.db #0x00	; 0
      0003C2 CC                    1120 	.db #0xcc	; 204
      0003C3 CC                    1121 	.db #0xcc	; 204
      0003C4 CC                    1122 	.db #0xcc	; 204
      0003C5 CC                    1123 	.db #0xcc	; 204
      0003C6 76                    1124 	.db #0x76	; 118	'v'
      0003C7 00                    1125 	.db #0x00	; 0
      0003C8 00                    1126 	.db #0x00	; 0
      0003C9 00                    1127 	.db #0x00	; 0
      0003CA CC                    1128 	.db #0xcc	; 204
      0003CB CC                    1129 	.db #0xcc	; 204
      0003CC CC                    1130 	.db #0xcc	; 204
      0003CD 78                    1131 	.db #0x78	; 120	'x'
      0003CE 30                    1132 	.db #0x30	; 48	'0'
      0003CF 00                    1133 	.db #0x00	; 0
      0003D0 00                    1134 	.db #0x00	; 0
      0003D1 00                    1135 	.db #0x00	; 0
      0003D2 C6                    1136 	.db #0xc6	; 198
      0003D3 D6                    1137 	.db #0xd6	; 214
      0003D4 FE                    1138 	.db #0xfe	; 254
      0003D5 FE                    1139 	.db #0xfe	; 254
      0003D6 6C                    1140 	.db #0x6c	; 108	'l'
      0003D7 00                    1141 	.db #0x00	; 0
      0003D8 00                    1142 	.db #0x00	; 0
      0003D9 00                    1143 	.db #0x00	; 0
      0003DA C6                    1144 	.db #0xc6	; 198
      0003DB 6C                    1145 	.db #0x6c	; 108	'l'
      0003DC 38                    1146 	.db #0x38	; 56	'8'
      0003DD 6C                    1147 	.db #0x6c	; 108	'l'
      0003DE C6                    1148 	.db #0xc6	; 198
      0003DF 00                    1149 	.db #0x00	; 0
      0003E0 00                    1150 	.db #0x00	; 0
      0003E1 00                    1151 	.db #0x00	; 0
      0003E2 CC                    1152 	.db #0xcc	; 204
      0003E3 CC                    1153 	.db #0xcc	; 204
      0003E4 CC                    1154 	.db #0xcc	; 204
      0003E5 7C                    1155 	.db #0x7c	; 124
      0003E6 0C                    1156 	.db #0x0c	; 12
      0003E7 F8                    1157 	.db #0xf8	; 248
      0003E8 00                    1158 	.db #0x00	; 0
      0003E9 00                    1159 	.db #0x00	; 0
      0003EA FC                    1160 	.db #0xfc	; 252
      0003EB 98                    1161 	.db #0x98	; 152
      0003EC 30                    1162 	.db #0x30	; 48	'0'
      0003ED 64                    1163 	.db #0x64	; 100	'd'
      0003EE FC                    1164 	.db #0xfc	; 252
      0003EF 00                    1165 	.db #0x00	; 0
      0003F0 1C                    1166 	.db #0x1c	; 28
      0003F1 30                    1167 	.db #0x30	; 48	'0'
      0003F2 30                    1168 	.db #0x30	; 48	'0'
      0003F3 E0                    1169 	.db #0xe0	; 224
      0003F4 30                    1170 	.db #0x30	; 48	'0'
      0003F5 30                    1171 	.db #0x30	; 48	'0'
      0003F6 1C                    1172 	.db #0x1c	; 28
      0003F7 00                    1173 	.db #0x00	; 0
      0003F8 18                    1174 	.db #0x18	; 24
      0003F9 18                    1175 	.db #0x18	; 24
      0003FA 18                    1176 	.db #0x18	; 24
      0003FB 00                    1177 	.db #0x00	; 0
      0003FC 18                    1178 	.db #0x18	; 24
      0003FD 18                    1179 	.db #0x18	; 24
      0003FE 18                    1180 	.db #0x18	; 24
      0003FF 00                    1181 	.db #0x00	; 0
      000400 E0                    1182 	.db #0xe0	; 224
      000401 30                    1183 	.db #0x30	; 48	'0'
      000402 30                    1184 	.db #0x30	; 48	'0'
      000403 1C                    1185 	.db #0x1c	; 28
      000404 30                    1186 	.db #0x30	; 48	'0'
      000405 30                    1187 	.db #0x30	; 48	'0'
      000406 E0                    1188 	.db #0xe0	; 224
      000407 00                    1189 	.db #0x00	; 0
      000408 76                    1190 	.db #0x76	; 118	'v'
      000409 DC                    1191 	.db #0xdc	; 220
      00040A 00                    1192 	.db #0x00	; 0
      00040B 00                    1193 	.db #0x00	; 0
      00040C 00                    1194 	.db #0x00	; 0
      00040D 00                    1195 	.db #0x00	; 0
      00040E 00                    1196 	.db #0x00	; 0
      00040F 00                    1197 	.db #0x00	; 0
      000410 00                    1198 	.db #0x00	; 0
      000411 10                    1199 	.db #0x10	; 16
      000412 38                    1200 	.db #0x38	; 56	'8'
      000413 6C                    1201 	.db #0x6c	; 108	'l'
      000414 C6                    1202 	.db #0xc6	; 198
      000415 C6                    1203 	.db #0xc6	; 198
      000416 FE                    1204 	.db #0xfe	; 254
      000417 00                    1205 	.db #0x00	; 0
      000418                       1206 _pattern_black_0:
      000418 FF                    1207 	.db #0xff	; 255
      000419 FF                    1208 	.db #0xff	; 255
      00041A FF                    1209 	.db #0xff	; 255
      00041B FF                    1210 	.db #0xff	; 255
      00041C FF                    1211 	.db #0xff	; 255
      00041D FF                    1212 	.db #0xff	; 255
      00041E FF                    1213 	.db #0xff	; 255
      00041F FF                    1214 	.db #0xff	; 255
      000420                       1215 _pattern_black_1:
      000420 FE                    1216 	.db #0xfe	; 254
      000421 FF                    1217 	.db #0xff	; 255
      000422 FF                    1218 	.db #0xff	; 255
      000423 FF                    1219 	.db #0xff	; 255
      000424 FE                    1220 	.db #0xfe	; 254
      000425 FF                    1221 	.db #0xff	; 255
      000426 FF                    1222 	.db #0xff	; 255
      000427 FE                    1223 	.db #0xfe	; 254
      000428                       1224 _pattern_black_2:
      000428 FF                    1225 	.db #0xff	; 255
      000429 FF                    1226 	.db #0xff	; 255
      00042A FF                    1227 	.db #0xff	; 255
      00042B FF                    1228 	.db #0xff	; 255
      00042C FF                    1229 	.db #0xff	; 255
      00042D FB                    1230 	.db #0xfb	; 251
      00042E FF                    1231 	.db #0xff	; 255
      00042F BB                    1232 	.db #0xbb	; 187
      000430                       1233 _pattern_black_3:
      000430 FB                    1234 	.db #0xfb	; 251
      000431 FE                    1235 	.db #0xfe	; 254
      000432 FD                    1236 	.db #0xfd	; 253
      000433 FE                    1237 	.db #0xfe	; 254
      000434 F7                    1238 	.db #0xf7	; 247
      000435 FA                    1239 	.db #0xfa	; 250
      000436 AF                    1240 	.db #0xaf	; 175
      000437 55                    1241 	.db #0x55	; 85	'U'
      000438                       1242 _pattern_0:
      000438 9F                    1243 	.db #0x9f	; 159
      000439 90                    1244 	.db #0x90	; 144
      00043A 90                    1245 	.db #0x90	; 144
      00043B 93                    1246 	.db #0x93	; 147
      00043C 92                    1247 	.db #0x92	; 146
      00043D 92                    1248 	.db #0x92	; 146
      00043E 92                    1249 	.db #0x92	; 146
      00043F 92                    1250 	.db #0x92	; 146
      000440                       1251 _pattern_1:
      000440 FF                    1252 	.db #0xff	; 255
      000441 01                    1253 	.db #0x01	; 1
      000442 01                    1254 	.db #0x01	; 1
      000443 F9                    1255 	.db #0xf9	; 249
      000444 09                    1256 	.db #0x09	; 9
      000445 09                    1257 	.db #0x09	; 9
      000446 49                    1258 	.db #0x49	; 73	'I'
      000447 49                    1259 	.db #0x49	; 73	'I'
      000448                       1260 _pattern_2:
      000448 92                    1261 	.db #0x92	; 146
      000449 93                    1262 	.db #0x93	; 147
      00044A 90                    1263 	.db #0x90	; 144
      00044B 90                    1264 	.db #0x90	; 144
      00044C 9F                    1265 	.db #0x9f	; 159
      00044D 80                    1266 	.db #0x80	; 128
      00044E 80                    1267 	.db #0x80	; 128
      00044F FF                    1268 	.db #0xff	; 255
      000450                       1269 _pattern_3:
      000450 49                    1270 	.db #0x49	; 73	'I'
      000451 C9                    1271 	.db #0xc9	; 201
      000452 09                    1272 	.db #0x09	; 9
      000453 09                    1273 	.db #0x09	; 9
      000454 F9                    1274 	.db #0xf9	; 249
      000455 01                    1275 	.db #0x01	; 1
      000456 01                    1276 	.db #0x01	; 1
      000457 FF                    1277 	.db #0xff	; 255
      000458                       1278 _pattern_4:
      000458 7F                    1279 	.db #0x7f	; 127
      000459 81                    1280 	.db #0x81	; 129
      00045A 83                    1281 	.db #0x83	; 131
      00045B 87                    1282 	.db #0x87	; 135
      00045C 8F                    1283 	.db #0x8f	; 143
      00045D 9F                    1284 	.db #0x9f	; 159
      00045E BF                    1285 	.db #0xbf	; 191
      00045F FF                    1286 	.db #0xff	; 255
      000460                       1287 _pattern_5:
      000460 FE                    1288 	.db #0xfe	; 254
      000461 81                    1289 	.db #0x81	; 129
      000462 C1                    1290 	.db #0xc1	; 193
      000463 E1                    1291 	.db #0xe1	; 225
      000464 F1                    1292 	.db #0xf1	; 241
      000465 F9                    1293 	.db #0xf9	; 249
      000466 FD                    1294 	.db #0xfd	; 253
      000467 FF                    1295 	.db #0xff	; 255
      000468                       1296 _pattern_6:
      000468 FF                    1297 	.db #0xff	; 255
      000469 BF                    1298 	.db #0xbf	; 191
      00046A 9F                    1299 	.db #0x9f	; 159
      00046B 8F                    1300 	.db #0x8f	; 143
      00046C 87                    1301 	.db #0x87	; 135
      00046D 83                    1302 	.db #0x83	; 131
      00046E 81                    1303 	.db #0x81	; 129
      00046F 7F                    1304 	.db #0x7f	; 127
      000470                       1305 _pattern_7:
      000470 FF                    1306 	.db #0xff	; 255
      000471 FD                    1307 	.db #0xfd	; 253
      000472 F9                    1308 	.db #0xf9	; 249
      000473 F1                    1309 	.db #0xf1	; 241
      000474 E1                    1310 	.db #0xe1	; 225
      000475 C1                    1311 	.db #0xc1	; 193
      000476 81                    1312 	.db #0x81	; 129
      000477 FE                    1313 	.db #0xfe	; 254
      000478                       1314 _pattern_8:
      000478 7F                    1315 	.db #0x7f	; 127
      000479 AE                    1316 	.db #0xae	; 174
      00047A FF                    1317 	.db #0xff	; 255
      00047B 5B                    1318 	.db #0x5b	; 91
      00047C FF                    1319 	.db #0xff	; 255
      00047D AE                    1320 	.db #0xae	; 174
      00047E FF                    1321 	.db #0xff	; 255
      00047F DF                    1322 	.db #0xdf	; 223
      000480                       1323 _pattern_9:
      000480 FE                    1324 	.db #0xfe	; 254
      000481 BD                    1325 	.db #0xbd	; 189
      000482 DF                    1326 	.db #0xdf	; 223
      000483 7F                    1327 	.db #0x7f	; 127
      000484 FB                    1328 	.db #0xfb	; 251
      000485 DF                    1329 	.db #0xdf	; 223
      000486 FE                    1330 	.db #0xfe	; 254
      000487 EF                    1331 	.db #0xef	; 239
      000488                       1332 _pattern_10:
      000488 7F                    1333 	.db #0x7f	; 127
      000489 FF                    1334 	.db #0xff	; 255
      00048A ED                    1335 	.db #0xed	; 237
      00048B FF                    1336 	.db #0xff	; 255
      00048C B6                    1337 	.db #0xb6	; 182
      00048D FE                    1338 	.db #0xfe	; 254
      00048E DB                    1339 	.db #0xdb	; 219
      00048F 7D                    1340 	.db #0x7d	; 125
      000490                       1341 _pattern_11:
      000490 FE                    1342 	.db #0xfe	; 254
      000491 FF                    1343 	.db #0xff	; 255
      000492 FE                    1344 	.db #0xfe	; 254
      000493 77                    1345 	.db #0x77	; 119	'w'
      000494 FE                    1346 	.db #0xfe	; 254
      000495 DD                    1347 	.db #0xdd	; 221
      000496 EF                    1348 	.db #0xef	; 239
      000497 5A                    1349 	.db #0x5a	; 90	'Z'
      000498                       1350 _pattern_12:
      000498 7F                    1351 	.db #0x7f	; 127
      000499 D5                    1352 	.db #0xd5	; 213
      00049A BF                    1353 	.db #0xbf	; 191
      00049B ED                    1354 	.db #0xed	; 237
      00049C BF                    1355 	.db #0xbf	; 191
      00049D F5                    1356 	.db #0xf5	; 245
      00049E BF                    1357 	.db #0xbf	; 191
      00049F FF                    1358 	.db #0xff	; 255
      0004A0                       1359 _pattern_13:
      0004A0 FE                    1360 	.db #0xfe	; 254
      0004A1 5F                    1361 	.db #0x5f	; 95
      0004A2 F5                    1362 	.db #0xf5	; 245
      0004A3 DF                    1363 	.db #0xdf	; 223
      0004A4 FF                    1364 	.db #0xff	; 255
      0004A5 FF                    1365 	.db #0xff	; 255
      0004A6 FF                    1366 	.db #0xff	; 255
      0004A7 FF                    1367 	.db #0xff	; 255
      0004A8                       1368 _pattern_14:
      0004A8 EF                    1369 	.db #0xef	; 239
      0004A9 BF                    1370 	.db #0xbf	; 191
      0004AA 7F                    1371 	.db #0x7f	; 127
      0004AB FF                    1372 	.db #0xff	; 255
      0004AC FF                    1373 	.db #0xff	; 255
      0004AD FF                    1374 	.db #0xff	; 255
      0004AE DB                    1375 	.db #0xdb	; 219
      0004AF 7F                    1376 	.db #0x7f	; 127
      0004B0                       1377 _pattern_15:
      0004B0 FF                    1378 	.db #0xff	; 255
      0004B1 FD                    1379 	.db #0xfd	; 253
      0004B2 FF                    1380 	.db #0xff	; 255
      0004B3 DB                    1381 	.db #0xdb	; 219
      0004B4 FD                    1382 	.db #0xfd	; 253
      0004B5 7B                    1383 	.db #0x7b	; 123
      0004B6 D7                    1384 	.db #0xd7	; 215
      0004B7 FE                    1385 	.db #0xfe	; 254
      0004B8                       1386 _pattern_16:
      0004B8 7F                    1387 	.db #0x7f	; 127
      0004B9 FF                    1388 	.db #0xff	; 255
      0004BA EA                    1389 	.db #0xea	; 234
      0004BB DF                    1390 	.db #0xdf	; 223
      0004BC FF                    1391 	.db #0xff	; 255
      0004BD DF                    1392 	.db #0xdf	; 223
      0004BE FF                    1393 	.db #0xff	; 255
      0004BF DF                    1394 	.db #0xdf	; 223
      0004C0                       1395 _pattern_17:
      0004C0 FE                    1396 	.db #0xfe	; 254
      0004C1 FF                    1397 	.db #0xff	; 255
      0004C2 AF                    1398 	.db #0xaf	; 175
      0004C3 FA                    1399 	.db #0xfa	; 250
      0004C4 FF                    1400 	.db #0xff	; 255
      0004C5 FA                    1401 	.db #0xfa	; 250
      0004C6 FF                    1402 	.db #0xff	; 255
      0004C7 FA                    1403 	.db #0xfa	; 250
      0004C8                       1404 _pattern_18:
      0004C8 FF                    1405 	.db #0xff	; 255
      0004C9 DF                    1406 	.db #0xdf	; 223
      0004CA FF                    1407 	.db #0xff	; 255
      0004CB DF                    1408 	.db #0xdf	; 223
      0004CC FF                    1409 	.db #0xff	; 255
      0004CD EA                    1410 	.db #0xea	; 234
      0004CE FF                    1411 	.db #0xff	; 255
      0004CF 55                    1412 	.db #0x55	; 85	'U'
      0004D0                       1413 _pattern_19:
      0004D0 FF                    1414 	.db #0xff	; 255
      0004D1 FA                    1415 	.db #0xfa	; 250
      0004D2 FF                    1416 	.db #0xff	; 255
      0004D3 FA                    1417 	.db #0xfa	; 250
      0004D4 F7                    1418 	.db #0xf7	; 247
      0004D5 AA                    1419 	.db #0xaa	; 170
      0004D6 FF                    1420 	.db #0xff	; 255
      0004D7 56                    1421 	.db #0x56	; 86	'V'
      0004D8                       1422 _pattern_20:
      0004D8 3F                    1423 	.db #0x3f	; 63
      0004D9 7F                    1424 	.db #0x7f	; 127
      0004DA E0                    1425 	.db #0xe0	; 224
      0004DB CE                    1426 	.db #0xce	; 206
      0004DC E6                    1427 	.db #0xe6	; 230
      0004DD 7C                    1428 	.db #0x7c	; 124
      0004DE 39                    1429 	.db #0x39	; 57	'9'
      0004DF 03                    1430 	.db #0x03	; 3
      0004E0                       1431 _pattern_21:
      0004E0 FF                    1432 	.db #0xff	; 255
      0004E1 FF                    1433 	.db #0xff	; 255
      0004E2 00                    1434 	.db #0x00	; 0
      0004E3 DB                    1435 	.db #0xdb	; 219
      0004E4 DB                    1436 	.db #0xdb	; 219
      0004E5 00                    1437 	.db #0x00	; 0
      0004E6 FF                    1438 	.db #0xff	; 255
      0004E7 FF                    1439 	.db #0xff	; 255
      0004E8                       1440 _pattern_22:
      0004E8 FC                    1441 	.db #0xfc	; 252
      0004E9 FE                    1442 	.db #0xfe	; 254
      0004EA 07                    1443 	.db #0x07	; 7
      0004EB 73                    1444 	.db #0x73	; 115	's'
      0004EC 67                    1445 	.db #0x67	; 103	'g'
      0004ED 3E                    1446 	.db #0x3e	; 62
      0004EE 9C                    1447 	.db #0x9c	; 156
      0004EF C0                    1448 	.db #0xc0	; 192
      0004F0                       1449 _pattern_23:
      0004F0 06                    1450 	.db #0x06	; 6
      0004F1 00                    1451 	.db #0x00	; 0
      0004F2 03                    1452 	.db #0x03	; 3
      0004F3 04                    1453 	.db #0x04	; 4
      0004F4 05                    1454 	.db #0x05	; 5
      0004F5 05                    1455 	.db #0x05	; 5
      0004F6 05                    1456 	.db #0x05	; 5
      0004F7 05                    1457 	.db #0x05	; 5
      0004F8                       1458 _pattern_24:
      0004F8 00                    1459 	.db #0x00	; 0
      0004F9 00                    1460 	.db #0x00	; 0
      0004FA 33                    1461 	.db #0x33	; 51	'3'
      0004FB 44                    1462 	.db #0x44	; 68	'D'
      0004FC 55                    1463 	.db #0x55	; 85	'U'
      0004FD 55                    1464 	.db #0x55	; 85	'U'
      0004FE 55                    1465 	.db #0x55	; 85	'U'
      0004FF 55                    1466 	.db #0x55	; 85	'U'
      000500                       1467 _pattern_25:
      000500 60                    1468 	.db #0x60	; 96
      000501 00                    1469 	.db #0x00	; 0
      000502 40                    1470 	.db #0x40	; 64
      000503 20                    1471 	.db #0x20	; 32
      000504 20                    1472 	.db #0x20	; 32
      000505 20                    1473 	.db #0x20	; 32
      000506 20                    1474 	.db #0x20	; 32
      000507 20                    1475 	.db #0x20	; 32
      000508                       1476 _pattern_26:
      000508 05                    1477 	.db #0x05	; 5
      000509 05                    1478 	.db #0x05	; 5
      00050A 05                    1479 	.db #0x05	; 5
      00050B 05                    1480 	.db #0x05	; 5
      00050C 05                    1481 	.db #0x05	; 5
      00050D 05                    1482 	.db #0x05	; 5
      00050E 05                    1483 	.db #0x05	; 5
      00050F 05                    1484 	.db #0x05	; 5
      000510                       1485 _pattern_27:
      000510 55                    1486 	.db #0x55	; 85	'U'
      000511 55                    1487 	.db #0x55	; 85	'U'
      000512 55                    1488 	.db #0x55	; 85	'U'
      000513 55                    1489 	.db #0x55	; 85	'U'
      000514 55                    1490 	.db #0x55	; 85	'U'
      000515 55                    1491 	.db #0x55	; 85	'U'
      000516 55                    1492 	.db #0x55	; 85	'U'
      000517 55                    1493 	.db #0x55	; 85	'U'
      000518                       1494 _pattern_28:
      000518 20                    1495 	.db #0x20	; 32
      000519 20                    1496 	.db #0x20	; 32
      00051A 20                    1497 	.db #0x20	; 32
      00051B 20                    1498 	.db #0x20	; 32
      00051C 20                    1499 	.db #0x20	; 32
      00051D 20                    1500 	.db #0x20	; 32
      00051E 20                    1501 	.db #0x20	; 32
      00051F 20                    1502 	.db #0x20	; 32
      000520                       1503 _pattern_29:
      000520 05                    1504 	.db #0x05	; 5
      000521 05                    1505 	.db #0x05	; 5
      000522 07                    1506 	.db #0x07	; 7
      000523 07                    1507 	.db #0x07	; 7
      000524 07                    1508 	.db #0x07	; 7
      000525 05                    1509 	.db #0x05	; 5
      000526 05                    1510 	.db #0x05	; 5
      000527 05                    1511 	.db #0x05	; 5
      000528                       1512 _pattern_30:
      000528 55                    1513 	.db #0x55	; 85	'U'
      000529 55                    1514 	.db #0x55	; 85	'U'
      00052A FF                    1515 	.db #0xff	; 255
      00052B FF                    1516 	.db #0xff	; 255
      00052C FF                    1517 	.db #0xff	; 255
      00052D 55                    1518 	.db #0x55	; 85	'U'
      00052E 55                    1519 	.db #0x55	; 85	'U'
      00052F 55                    1520 	.db #0x55	; 85	'U'
      000530                       1521 _pattern_31:
      000530 20                    1522 	.db #0x20	; 32
      000531 20                    1523 	.db #0x20	; 32
      000532 E0                    1524 	.db #0xe0	; 224
      000533 E0                    1525 	.db #0xe0	; 224
      000534 E0                    1526 	.db #0xe0	; 224
      000535 20                    1527 	.db #0x20	; 32
      000536 20                    1528 	.db #0x20	; 32
      000537 20                    1529 	.db #0x20	; 32
      000538                       1530 _pattern_37:
      000538 05                    1531 	.db #0x05	; 5
      000539 05                    1532 	.db #0x05	; 5
      00053A 05                    1533 	.db #0x05	; 5
      00053B 05                    1534 	.db #0x05	; 5
      00053C 04                    1535 	.db #0x04	; 4
      00053D 03                    1536 	.db #0x03	; 3
      00053E 00                    1537 	.db #0x00	; 0
      00053F 06                    1538 	.db #0x06	; 6
      000540                       1539 _pattern_38:
      000540 55                    1540 	.db #0x55	; 85	'U'
      000541 55                    1541 	.db #0x55	; 85	'U'
      000542 55                    1542 	.db #0x55	; 85	'U'
      000543 55                    1543 	.db #0x55	; 85	'U'
      000544 44                    1544 	.db #0x44	; 68	'D'
      000545 33                    1545 	.db #0x33	; 51	'3'
      000546 00                    1546 	.db #0x00	; 0
      000547 00                    1547 	.db #0x00	; 0
      000548                       1548 _pattern_39:
      000548 20                    1549 	.db #0x20	; 32
      000549 20                    1550 	.db #0x20	; 32
      00054A 20                    1551 	.db #0x20	; 32
      00054B 20                    1552 	.db #0x20	; 32
      00054C 20                    1553 	.db #0x20	; 32
      00054D 40                    1554 	.db #0x40	; 64
      00054E 00                    1555 	.db #0x00	; 0
      00054F 60                    1556 	.db #0x60	; 96
      000550                       1557 _pattern_32:
      000550 03                    1558 	.db #0x03	; 3
      000551 39                    1559 	.db #0x39	; 57	'9'
      000552 7C                    1560 	.db #0x7c	; 124
      000553 E6                    1561 	.db #0xe6	; 230
      000554 CE                    1562 	.db #0xce	; 206
      000555 E0                    1563 	.db #0xe0	; 224
      000556 7F                    1564 	.db #0x7f	; 127
      000557 3F                    1565 	.db #0x3f	; 63
      000558                       1566 _pattern_33:
      000558 FF                    1567 	.db #0xff	; 255
      000559 FF                    1568 	.db #0xff	; 255
      00055A 00                    1569 	.db #0x00	; 0
      00055B DB                    1570 	.db #0xdb	; 219
      00055C DB                    1571 	.db #0xdb	; 219
      00055D 00                    1572 	.db #0x00	; 0
      00055E FF                    1573 	.db #0xff	; 255
      00055F FF                    1574 	.db #0xff	; 255
      000560                       1575 _pattern_34:
      000560 C0                    1576 	.db #0xc0	; 192
      000561 9C                    1577 	.db #0x9c	; 156
      000562 3E                    1578 	.db #0x3e	; 62
      000563 67                    1579 	.db #0x67	; 103	'g'
      000564 73                    1580 	.db #0x73	; 115	's'
      000565 07                    1581 	.db #0x07	; 7
      000566 FE                    1582 	.db #0xfe	; 254
      000567 FC                    1583 	.db #0xfc	; 252
      000568                       1584 _sprite_dust_0:
      000568 10                    1585 	.db #0x10	; 16
      000569 42                    1586 	.db #0x42	; 66	'B'
      00056A 10                    1587 	.db #0x10	; 16
      00056B 45                    1588 	.db #0x45	; 69	'E'
      00056C 20                    1589 	.db #0x20	; 32
      00056D 89                    1590 	.db #0x89	; 137
      00056E 20                    1591 	.db #0x20	; 32
      00056F 88                    1592 	.db #0x88	; 136
      000570                       1593 _sprite_dust_1:
      000570 10                    1594 	.db #0x10	; 16
      000571 42                    1595 	.db #0x42	; 66	'B'
      000572 00                    1596 	.db #0x00	; 0
      000573 04                    1597 	.db #0x04	; 4
      000574 20                    1598 	.db #0x20	; 32
      000575 81                    1599 	.db #0x81	; 129
      000576 20                    1600 	.db #0x20	; 32
      000577 08                    1601 	.db #0x08	; 8
      000578                       1602 _sprite_dust_2:
      000578 10                    1603 	.db #0x10	; 16
      000579 00                    1604 	.db #0x00	; 0
      00057A 00                    1605 	.db #0x00	; 0
      00057B 04                    1606 	.db #0x04	; 4
      00057C 20                    1607 	.db #0x20	; 32
      00057D 80                    1608 	.db #0x80	; 128
      00057E 20                    1609 	.db #0x20	; 32
      00057F 00                    1610 	.db #0x00	; 0
      000580                       1611 _sprite_dust_3:
      000580 10                    1612 	.db #0x10	; 16
      000581 00                    1613 	.db #0x00	; 0
      000582 00                    1614 	.db #0x00	; 0
      000583 04                    1615 	.db #0x04	; 4
      000584 00                    1616 	.db #0x00	; 0
      000585 00                    1617 	.db #0x00	; 0
      000586 20                    1618 	.db #0x20	; 32
      000587 00                    1619 	.db #0x00	; 0
      000588                       1620 _pattern_title:
      000588 FE                    1621 	.db #0xfe	; 254
      000589 FE                    1622 	.db #0xfe	; 254
      00058A FE                    1623 	.db #0xfe	; 254
      00058B FE                    1624 	.db #0xfe	; 254
      00058C FE                    1625 	.db #0xfe	; 254
      00058D FE                    1626 	.db #0xfe	; 254
      00058E FE                    1627 	.db #0xfe	; 254
      00058F 00                    1628 	.db #0x00	; 0
      000590                       1629 _color_black_0:
      000590 14                    1630 	.db #0x14	; 20
      000591 14                    1631 	.db #0x14	; 20
      000592 14                    1632 	.db #0x14	; 20
      000593 14                    1633 	.db #0x14	; 20
      000594 14                    1634 	.db #0x14	; 20
      000595 14                    1635 	.db #0x14	; 20
      000596 14                    1636 	.db #0x14	; 20
      000597 14                    1637 	.db #0x14	; 20
      000598                       1638 _color_black_1:
      000598 14                    1639 	.db #0x14	; 20
      000599 14                    1640 	.db #0x14	; 20
      00059A 14                    1641 	.db #0x14	; 20
      00059B 14                    1642 	.db #0x14	; 20
      00059C 14                    1643 	.db #0x14	; 20
      00059D 14                    1644 	.db #0x14	; 20
      00059E 14                    1645 	.db #0x14	; 20
      00059F 14                    1646 	.db #0x14	; 20
      0005A0                       1647 _color_black_2:
      0005A0 14                    1648 	.db #0x14	; 20
      0005A1 14                    1649 	.db #0x14	; 20
      0005A2 14                    1650 	.db #0x14	; 20
      0005A3 14                    1651 	.db #0x14	; 20
      0005A4 14                    1652 	.db #0x14	; 20
      0005A5 14                    1653 	.db #0x14	; 20
      0005A6 14                    1654 	.db #0x14	; 20
      0005A7 14                    1655 	.db #0x14	; 20
      0005A8                       1656 _color_black_3:
      0005A8 14                    1657 	.db #0x14	; 20
      0005A9 14                    1658 	.db #0x14	; 20
      0005AA 14                    1659 	.db #0x14	; 20
      0005AB 14                    1660 	.db #0x14	; 20
      0005AC 14                    1661 	.db #0x14	; 20
      0005AD 14                    1662 	.db #0x14	; 20
      0005AE 14                    1663 	.db #0x14	; 20
      0005AF 14                    1664 	.db #0x14	; 20
      0005B0                       1665 _color_0:
      0005B0 13                    1666 	.db #0x13	; 19
      0005B1 13                    1667 	.db #0x13	; 19
      0005B2 13                    1668 	.db #0x13	; 19
      0005B3 13                    1669 	.db #0x13	; 19
      0005B4 13                    1670 	.db #0x13	; 19
      0005B5 13                    1671 	.db #0x13	; 19
      0005B6 13                    1672 	.db #0x13	; 19
      0005B7 13                    1673 	.db #0x13	; 19
      0005B8                       1674 _color_1:
      0005B8 12                    1675 	.db #0x12	; 18
      0005B9 12                    1676 	.db #0x12	; 18
      0005BA 12                    1677 	.db #0x12	; 18
      0005BB 12                    1678 	.db #0x12	; 18
      0005BC 12                    1679 	.db #0x12	; 18
      0005BD 12                    1680 	.db #0x12	; 18
      0005BE 12                    1681 	.db #0x12	; 18
      0005BF 12                    1682 	.db #0x12	; 18
      0005C0                       1683 _color_2:
      0005C0 12                    1684 	.db #0x12	; 18
      0005C1 12                    1685 	.db #0x12	; 18
      0005C2 12                    1686 	.db #0x12	; 18
      0005C3 12                    1687 	.db #0x12	; 18
      0005C4 12                    1688 	.db #0x12	; 18
      0005C5 12                    1689 	.db #0x12	; 18
      0005C6 12                    1690 	.db #0x12	; 18
      0005C7 12                    1691 	.db #0x12	; 18
      0005C8                       1692 _color_3:
      0005C8 1C                    1693 	.db #0x1c	; 28
      0005C9 1C                    1694 	.db #0x1c	; 28
      0005CA 1C                    1695 	.db #0x1c	; 28
      0005CB 1C                    1696 	.db #0x1c	; 28
      0005CC 1C                    1697 	.db #0x1c	; 28
      0005CD 1C                    1698 	.db #0x1c	; 28
      0005CE 1C                    1699 	.db #0x1c	; 28
      0005CF 1C                    1700 	.db #0x1c	; 28
      0005D0                       1701 _color_4:
      0005D0 96                    1702 	.db #0x96	; 150
      0005D1 96                    1703 	.db #0x96	; 150
      0005D2 96                    1704 	.db #0x96	; 150
      0005D3 96                    1705 	.db #0x96	; 150
      0005D4 96                    1706 	.db #0x96	; 150
      0005D5 96                    1707 	.db #0x96	; 150
      0005D6 96                    1708 	.db #0x96	; 150
      0005D7 96                    1709 	.db #0x96	; 150
      0005D8                       1710 _color_5:
      0005D8 98                    1711 	.db #0x98	; 152
      0005D9 68                    1712 	.db #0x68	; 104	'h'
      0005DA 68                    1713 	.db #0x68	; 104	'h'
      0005DB 68                    1714 	.db #0x68	; 104	'h'
      0005DC 68                    1715 	.db #0x68	; 104	'h'
      0005DD 68                    1716 	.db #0x68	; 104	'h'
      0005DE 68                    1717 	.db #0x68	; 104	'h'
      0005DF 68                    1718 	.db #0x68	; 104	'h'
      0005E0                       1719 _color_6:
      0005E0 68                    1720 	.db #0x68	; 104	'h'
      0005E1 68                    1721 	.db #0x68	; 104	'h'
      0005E2 68                    1722 	.db #0x68	; 104	'h'
      0005E3 68                    1723 	.db #0x68	; 104	'h'
      0005E4 68                    1724 	.db #0x68	; 104	'h'
      0005E5 68                    1725 	.db #0x68	; 104	'h'
      0005E6 68                    1726 	.db #0x68	; 104	'h'
      0005E7 68                    1727 	.db #0x68	; 104	'h'
      0005E8                       1728 _color_7:
      0005E8 89                    1729 	.db #0x89	; 137
      0005E9 89                    1730 	.db #0x89	; 137
      0005EA 89                    1731 	.db #0x89	; 137
      0005EB 89                    1732 	.db #0x89	; 137
      0005EC 89                    1733 	.db #0x89	; 137
      0005ED 89                    1734 	.db #0x89	; 137
      0005EE 89                    1735 	.db #0x89	; 137
      0005EF 86                    1736 	.db #0x86	; 134
      0005F0                       1737 _color_8:
      0005F0 41                    1738 	.db #0x41	; 65	'A'
      0005F1 47                    1739 	.db #0x47	; 71	'G'
      0005F2 47                    1740 	.db #0x47	; 71	'G'
      0005F3 47                    1741 	.db #0x47	; 71	'G'
      0005F4 47                    1742 	.db #0x47	; 71	'G'
      0005F5 47                    1743 	.db #0x47	; 71	'G'
      0005F6 47                    1744 	.db #0x47	; 71	'G'
      0005F7 47                    1745 	.db #0x47	; 71	'G'
      0005F8                       1746 _color_9:
      0005F8 41                    1747 	.db #0x41	; 65	'A'
      0005F9 45                    1748 	.db #0x45	; 69	'E'
      0005FA 47                    1749 	.db #0x47	; 71	'G'
      0005FB 47                    1750 	.db #0x47	; 71	'G'
      0005FC 45                    1751 	.db #0x45	; 69	'E'
      0005FD 45                    1752 	.db #0x45	; 69	'E'
      0005FE 41                    1753 	.db #0x41	; 65	'A'
      0005FF 45                    1754 	.db #0x45	; 69	'E'
      000600                       1755 _color_10:
      000600 47                    1756 	.db #0x47	; 71	'G'
      000601 45                    1757 	.db #0x45	; 69	'E'
      000602 45                    1758 	.db #0x45	; 69	'E'
      000603 45                    1759 	.db #0x45	; 69	'E'
      000604 45                    1760 	.db #0x45	; 69	'E'
      000605 41                    1761 	.db #0x41	; 65	'A'
      000606 45                    1762 	.db #0x45	; 69	'E'
      000607 41                    1763 	.db #0x41	; 65	'A'
      000608                       1764 _color_11:
      000608 41                    1765 	.db #0x41	; 65	'A'
      000609 41                    1766 	.db #0x41	; 65	'A'
      00060A 41                    1767 	.db #0x41	; 65	'A'
      00060B 41                    1768 	.db #0x41	; 65	'A'
      00060C 41                    1769 	.db #0x41	; 65	'A'
      00060D 41                    1770 	.db #0x41	; 65	'A'
      00060E 41                    1771 	.db #0x41	; 65	'A'
      00060F 41                    1772 	.db #0x41	; 65	'A'
      000610                       1773 _color_12:
      000610 D1                    1774 	.db #0xd1	; 209
      000611 DF                    1775 	.db #0xdf	; 223
      000612 DF                    1776 	.db #0xdf	; 223
      000613 DF                    1777 	.db #0xdf	; 223
      000614 DF                    1778 	.db #0xdf	; 223
      000615 DF                    1779 	.db #0xdf	; 223
      000616 DF                    1780 	.db #0xdf	; 223
      000617 DF                    1781 	.db #0xdf	; 223
      000618                       1782 _color_13:
      000618 D1                    1783 	.db #0xd1	; 209
      000619 DF                    1784 	.db #0xdf	; 223
      00061A DF                    1785 	.db #0xdf	; 223
      00061B DF                    1786 	.db #0xdf	; 223
      00061C DF                    1787 	.db #0xdf	; 223
      00061D DF                    1788 	.db #0xdf	; 223
      00061E DF                    1789 	.db #0xdf	; 223
      00061F DF                    1790 	.db #0xdf	; 223
      000620                       1791 _color_14:
      000620 DF                    1792 	.db #0xdf	; 223
      000621 DF                    1793 	.db #0xdf	; 223
      000622 DF                    1794 	.db #0xdf	; 223
      000623 D1                    1795 	.db #0xd1	; 209
      000624 D1                    1796 	.db #0xd1	; 209
      000625 D1                    1797 	.db #0xd1	; 209
      000626 D1                    1798 	.db #0xd1	; 209
      000627 D1                    1799 	.db #0xd1	; 209
      000628                       1800 _color_15:
      000628 D1                    1801 	.db #0xd1	; 209
      000629 D1                    1802 	.db #0xd1	; 209
      00062A D1                    1803 	.db #0xd1	; 209
      00062B D1                    1804 	.db #0xd1	; 209
      00062C D1                    1805 	.db #0xd1	; 209
      00062D D1                    1806 	.db #0xd1	; 209
      00062E D1                    1807 	.db #0xd1	; 209
      00062F D1                    1808 	.db #0xd1	; 209
      000630                       1809 _color_16:
      000630 A1                    1810 	.db #0xa1	; 161
      000631 BF                    1811 	.db #0xbf	; 191
      000632 BF                    1812 	.db #0xbf	; 191
      000633 BF                    1813 	.db #0xbf	; 191
      000634 BF                    1814 	.db #0xbf	; 191
      000635 BF                    1815 	.db #0xbf	; 191
      000636 BF                    1816 	.db #0xbf	; 191
      000637 BF                    1817 	.db #0xbf	; 191
      000638                       1818 _color_17:
      000638 A1                    1819 	.db #0xa1	; 161
      000639 AF                    1820 	.db #0xaf	; 175
      00063A AF                    1821 	.db #0xaf	; 175
      00063B A1                    1822 	.db #0xa1	; 161
      00063C A1                    1823 	.db #0xa1	; 161
      00063D A1                    1824 	.db #0xa1	; 161
      00063E A1                    1825 	.db #0xa1	; 161
      00063F A1                    1826 	.db #0xa1	; 161
      000640                       1827 _color_18:
      000640 AF                    1828 	.db #0xaf	; 175
      000641 AF                    1829 	.db #0xaf	; 175
      000642 AF                    1830 	.db #0xaf	; 175
      000643 AF                    1831 	.db #0xaf	; 175
      000644 A1                    1832 	.db #0xa1	; 161
      000645 A1                    1833 	.db #0xa1	; 161
      000646 A1                    1834 	.db #0xa1	; 161
      000647 A1                    1835 	.db #0xa1	; 161
      000648                       1836 _color_19:
      000648 B1                    1837 	.db #0xb1	; 177
      000649 B1                    1838 	.db #0xb1	; 177
      00064A B1                    1839 	.db #0xb1	; 177
      00064B B1                    1840 	.db #0xb1	; 177
      00064C B1                    1841 	.db #0xb1	; 177
      00064D B1                    1842 	.db #0xb1	; 177
      00064E B1                    1843 	.db #0xb1	; 177
      00064F B1                    1844 	.db #0xb1	; 177
      000650                       1845 _color_column_1:
      000650 F1                    1846 	.db #0xf1	; 241
      000651 E1                    1847 	.db #0xe1	; 225
      000652 E1                    1848 	.db #0xe1	; 225
      000653 E1                    1849 	.db #0xe1	; 225
      000654 E1                    1850 	.db #0xe1	; 225
      000655 E1                    1851 	.db #0xe1	; 225
      000656 E1                    1852 	.db #0xe1	; 225
      000657 E1                    1853 	.db #0xe1	; 225
      000658                       1854 _color_column_2:
      000658 F1                    1855 	.db #0xf1	; 241
      000659 E1                    1856 	.db #0xe1	; 225
      00065A E1                    1857 	.db #0xe1	; 225
      00065B E1                    1858 	.db #0xe1	; 225
      00065C E1                    1859 	.db #0xe1	; 225
      00065D E1                    1860 	.db #0xe1	; 225
      00065E E1                    1861 	.db #0xe1	; 225
      00065F E1                    1862 	.db #0xe1	; 225
      000660                       1863 _color_column_3:
      000660 F1                    1864 	.db #0xf1	; 241
      000661 E1                    1865 	.db #0xe1	; 225
      000662 E1                    1866 	.db #0xe1	; 225
      000663 E1                    1867 	.db #0xe1	; 225
      000664 E1                    1868 	.db #0xe1	; 225
      000665 E1                    1869 	.db #0xe1	; 225
      000666 E1                    1870 	.db #0xe1	; 225
      000667 E1                    1871 	.db #0xe1	; 225
      000668                       1872 _color_column_4:
      000668 F1                    1873 	.db #0xf1	; 241
      000669 F1                    1874 	.db #0xf1	; 241
      00066A F1                    1875 	.db #0xf1	; 241
      00066B F1                    1876 	.db #0xf1	; 241
      00066C F1                    1877 	.db #0xf1	; 241
      00066D F1                    1878 	.db #0xf1	; 241
      00066E F1                    1879 	.db #0xf1	; 241
      00066F F1                    1880 	.db #0xf1	; 241
      000670                       1881 _color_column_5:
      000670 E1                    1882 	.db #0xe1	; 225
      000671 E1                    1883 	.db #0xe1	; 225
      000672 E1                    1884 	.db #0xe1	; 225
      000673 E1                    1885 	.db #0xe1	; 225
      000674 E1                    1886 	.db #0xe1	; 225
      000675 E1                    1887 	.db #0xe1	; 225
      000676 E1                    1888 	.db #0xe1	; 225
      000677 E1                    1889 	.db #0xe1	; 225
      000678                       1890 _color_column_6:
      000678 E1                    1891 	.db #0xe1	; 225
      000679 E1                    1892 	.db #0xe1	; 225
      00067A E1                    1893 	.db #0xe1	; 225
      00067B 41                    1894 	.db #0x41	; 65	'A'
      00067C 41                    1895 	.db #0x41	; 65	'A'
      00067D 41                    1896 	.db #0x41	; 65	'A'
      00067E 41                    1897 	.db #0x41	; 65	'A'
      00067F 41                    1898 	.db #0x41	; 65	'A'
      000680                       1899 _color_column_7:
      000680 F1                    1900 	.db #0xf1	; 241
      000681 F1                    1901 	.db #0xf1	; 241
      000682 F1                    1902 	.db #0xf1	; 241
      000683 F1                    1903 	.db #0xf1	; 241
      000684 F1                    1904 	.db #0xf1	; 241
      000685 F1                    1905 	.db #0xf1	; 241
      000686 F1                    1906 	.db #0xf1	; 241
      000687 F1                    1907 	.db #0xf1	; 241
      000688                       1908 _color_column_8:
      000688 E1                    1909 	.db #0xe1	; 225
      000689 E1                    1910 	.db #0xe1	; 225
      00068A E1                    1911 	.db #0xe1	; 225
      00068B F1                    1912 	.db #0xf1	; 241
      00068C E1                    1913 	.db #0xe1	; 225
      00068D E1                    1914 	.db #0xe1	; 225
      00068E E1                    1915 	.db #0xe1	; 225
      00068F E1                    1916 	.db #0xe1	; 225
      000690                       1917 _color_column_9:
      000690 41                    1918 	.db #0x41	; 65	'A'
      000691 41                    1919 	.db #0x41	; 65	'A'
      000692 41                    1920 	.db #0x41	; 65	'A'
      000693 F1                    1921 	.db #0xf1	; 241
      000694 41                    1922 	.db #0x41	; 65	'A'
      000695 41                    1923 	.db #0x41	; 65	'A'
      000696 41                    1924 	.db #0x41	; 65	'A'
      000697 41                    1925 	.db #0x41	; 65	'A'
      000698                       1926 _color_column_10:
      000698 F1                    1927 	.db #0xf1	; 241
      000699 F1                    1928 	.db #0xf1	; 241
      00069A F1                    1929 	.db #0xf1	; 241
      00069B F1                    1930 	.db #0xf1	; 241
      00069C F1                    1931 	.db #0xf1	; 241
      00069D F1                    1932 	.db #0xf1	; 241
      00069E F1                    1933 	.db #0xf1	; 241
      00069F F1                    1934 	.db #0xf1	; 241
      0006A0                       1935 _color_column_11:
      0006A0 E1                    1936 	.db #0xe1	; 225
      0006A1 E1                    1937 	.db #0xe1	; 225
      0006A2 E1                    1938 	.db #0xe1	; 225
      0006A3 E1                    1939 	.db #0xe1	; 225
      0006A4 E1                    1940 	.db #0xe1	; 225
      0006A5 E1                    1941 	.db #0xe1	; 225
      0006A6 E1                    1942 	.db #0xe1	; 225
      0006A7 E1                    1943 	.db #0xe1	; 225
      0006A8                       1944 _color_column_12:
      0006A8 41                    1945 	.db #0x41	; 65	'A'
      0006A9 41                    1946 	.db #0x41	; 65	'A'
      0006AA 41                    1947 	.db #0x41	; 65	'A'
      0006AB 41                    1948 	.db #0x41	; 65	'A'
      0006AC 41                    1949 	.db #0x41	; 65	'A'
      0006AD 41                    1950 	.db #0x41	; 65	'A'
      0006AE 41                    1951 	.db #0x41	; 65	'A'
      0006AF 41                    1952 	.db #0x41	; 65	'A'
      0006B0                       1953 _color_column_16:
      0006B0 F1                    1954 	.db #0xf1	; 241
      0006B1 F1                    1955 	.db #0xf1	; 241
      0006B2 F1                    1956 	.db #0xf1	; 241
      0006B3 F1                    1957 	.db #0xf1	; 241
      0006B4 F1                    1958 	.db #0xf1	; 241
      0006B5 F1                    1959 	.db #0xf1	; 241
      0006B6 F1                    1960 	.db #0xf1	; 241
      0006B7 F1                    1961 	.db #0xf1	; 241
      0006B8                       1962 _color_column_17:
      0006B8 E1                    1963 	.db #0xe1	; 225
      0006B9 E1                    1964 	.db #0xe1	; 225
      0006BA E1                    1965 	.db #0xe1	; 225
      0006BB E1                    1966 	.db #0xe1	; 225
      0006BC E1                    1967 	.db #0xe1	; 225
      0006BD E1                    1968 	.db #0xe1	; 225
      0006BE E1                    1969 	.db #0xe1	; 225
      0006BF E1                    1970 	.db #0xe1	; 225
      0006C0                       1971 _color_column_18:
      0006C0 41                    1972 	.db #0x41	; 65	'A'
      0006C1 41                    1973 	.db #0x41	; 65	'A'
      0006C2 41                    1974 	.db #0x41	; 65	'A'
      0006C3 41                    1975 	.db #0x41	; 65	'A'
      0006C4 41                    1976 	.db #0x41	; 65	'A'
      0006C5 E1                    1977 	.db #0xe1	; 225
      0006C6 E1                    1978 	.db #0xe1	; 225
      0006C7 E1                    1979 	.db #0xe1	; 225
      0006C8                       1980 _color_column_13:
      0006C8 E1                    1981 	.db #0xe1	; 225
      0006C9 E1                    1982 	.db #0xe1	; 225
      0006CA E1                    1983 	.db #0xe1	; 225
      0006CB E1                    1984 	.db #0xe1	; 225
      0006CC E1                    1985 	.db #0xe1	; 225
      0006CD E1                    1986 	.db #0xe1	; 225
      0006CE E1                    1987 	.db #0xe1	; 225
      0006CF F1                    1988 	.db #0xf1	; 241
      0006D0                       1989 _color_column_14:
      0006D0 E1                    1990 	.db #0xe1	; 225
      0006D1 E1                    1991 	.db #0xe1	; 225
      0006D2 E1                    1992 	.db #0xe1	; 225
      0006D3 E1                    1993 	.db #0xe1	; 225
      0006D4 E1                    1994 	.db #0xe1	; 225
      0006D5 E1                    1995 	.db #0xe1	; 225
      0006D6 E1                    1996 	.db #0xe1	; 225
      0006D7 F1                    1997 	.db #0xf1	; 241
      0006D8                       1998 _color_column_15:
      0006D8 E1                    1999 	.db #0xe1	; 225
      0006D9 E1                    2000 	.db #0xe1	; 225
      0006DA E1                    2001 	.db #0xe1	; 225
      0006DB E1                    2002 	.db #0xe1	; 225
      0006DC E1                    2003 	.db #0xe1	; 225
      0006DD E1                    2004 	.db #0xe1	; 225
      0006DE E1                    2005 	.db #0xe1	; 225
      0006DF F1                    2006 	.db #0xf1	; 241
      0006E0                       2007 _color_dust_0:
      0006E0 F1                    2008 	.db #0xf1	; 241
      0006E1 F1                    2009 	.db #0xf1	; 241
      0006E2 F1                    2010 	.db #0xf1	; 241
      0006E3 F1                    2011 	.db #0xf1	; 241
      0006E4 F1                    2012 	.db #0xf1	; 241
      0006E5 F1                    2013 	.db #0xf1	; 241
      0006E6 F1                    2014 	.db #0xf1	; 241
      0006E7 F1                    2015 	.db #0xf1	; 241
      0006E8                       2016 _color_dust_1:
      0006E8 F1                    2017 	.db #0xf1	; 241
      0006E9 F1                    2018 	.db #0xf1	; 241
      0006EA F1                    2019 	.db #0xf1	; 241
      0006EB F1                    2020 	.db #0xf1	; 241
      0006EC F1                    2021 	.db #0xf1	; 241
      0006ED F1                    2022 	.db #0xf1	; 241
      0006EE F1                    2023 	.db #0xf1	; 241
      0006EF F1                    2024 	.db #0xf1	; 241
      0006F0                       2025 _color_dust_2:
      0006F0 F1                    2026 	.db #0xf1	; 241
      0006F1 F1                    2027 	.db #0xf1	; 241
      0006F2 F1                    2028 	.db #0xf1	; 241
      0006F3 F1                    2029 	.db #0xf1	; 241
      0006F4 F1                    2030 	.db #0xf1	; 241
      0006F5 F1                    2031 	.db #0xf1	; 241
      0006F6 F1                    2032 	.db #0xf1	; 241
      0006F7 F1                    2033 	.db #0xf1	; 241
      0006F8                       2034 _color_dust_3:
      0006F8 F1                    2035 	.db #0xf1	; 241
      0006F9 F1                    2036 	.db #0xf1	; 241
      0006FA F1                    2037 	.db #0xf1	; 241
      0006FB F1                    2038 	.db #0xf1	; 241
      0006FC F1                    2039 	.db #0xf1	; 241
      0006FD F1                    2040 	.db #0xf1	; 241
      0006FE F1                    2041 	.db #0xf1	; 241
      0006FF F1                    2042 	.db #0xf1	; 241
      000700                       2043 _color_font_1:
      000700 F1                    2044 	.db #0xf1	; 241
      000701 F1                    2045 	.db #0xf1	; 241
      000702 E1                    2046 	.db #0xe1	; 225
      000703 71                    2047 	.db #0x71	; 113	'q'
      000704 71                    2048 	.db #0x71	; 113	'q'
      000705 51                    2049 	.db #0x51	; 81	'Q'
      000706 51                    2050 	.db #0x51	; 81	'Q'
      000707 41                    2051 	.db #0x41	; 65	'A'
      000708                       2052 _color_font_2:
      000708 61                    2053 	.db #0x61	; 97	'a'
      000709 61                    2054 	.db #0x61	; 97	'a'
      00070A 81                    2055 	.db #0x81	; 129
      00070B 81                    2056 	.db #0x81	; 129
      00070C 91                    2057 	.db #0x91	; 145
      00070D 91                    2058 	.db #0x91	; 145
      00070E E1                    2059 	.db #0xe1	; 225
      00070F E1                    2060 	.db #0xe1	; 225
      000710                       2061 _color_title_1:
      000710 A1                    2062 	.db #0xa1	; 161
      000711 A1                    2063 	.db #0xa1	; 161
      000712 A1                    2064 	.db #0xa1	; 161
      000713 A1                    2065 	.db #0xa1	; 161
      000714 A1                    2066 	.db #0xa1	; 161
      000715 A1                    2067 	.db #0xa1	; 161
      000716 A1                    2068 	.db #0xa1	; 161
      000717 A1                    2069 	.db #0xa1	; 161
      000718                       2070 _color_title_2:
      000718 B1                    2071 	.db #0xb1	; 177
      000719 B1                    2072 	.db #0xb1	; 177
      00071A B1                    2073 	.db #0xb1	; 177
      00071B B1                    2074 	.db #0xb1	; 177
      00071C B1                    2075 	.db #0xb1	; 177
      00071D B1                    2076 	.db #0xb1	; 177
      00071E B1                    2077 	.db #0xb1	; 177
      00071F B1                    2078 	.db #0xb1	; 177
      000720                       2079 _color_title_3:
      000720 D1                    2080 	.db #0xd1	; 209
      000721 D1                    2081 	.db #0xd1	; 209
      000722 D1                    2082 	.db #0xd1	; 209
      000723 D1                    2083 	.db #0xd1	; 209
      000724 D1                    2084 	.db #0xd1	; 209
      000725 D1                    2085 	.db #0xd1	; 209
      000726 D1                    2086 	.db #0xd1	; 209
      000727 D1                    2087 	.db #0xd1	; 209
      000728                       2088 _color_title_4:
      000728 F1                    2089 	.db #0xf1	; 241
      000729 F1                    2090 	.db #0xf1	; 241
      00072A F1                    2091 	.db #0xf1	; 241
      00072B F1                    2092 	.db #0xf1	; 241
      00072C F1                    2093 	.db #0xf1	; 241
      00072D F1                    2094 	.db #0xf1	; 241
      00072E F1                    2095 	.db #0xf1	; 241
      00072F F1                    2096 	.db #0xf1	; 241
      000730                       2097 _color_title_5:
      000730 71                    2098 	.db #0x71	; 113	'q'
      000731 71                    2099 	.db #0x71	; 113	'q'
      000732 71                    2100 	.db #0x71	; 113	'q'
      000733 71                    2101 	.db #0x71	; 113	'q'
      000734 71                    2102 	.db #0x71	; 113	'q'
      000735 71                    2103 	.db #0x71	; 113	'q'
      000736 71                    2104 	.db #0x71	; 113	'q'
      000737 71                    2105 	.db #0x71	; 113	'q'
      000738                       2106 _color_title_6:
      000738 51                    2107 	.db #0x51	; 81	'Q'
      000739 51                    2108 	.db #0x51	; 81	'Q'
      00073A 51                    2109 	.db #0x51	; 81	'Q'
      00073B 51                    2110 	.db #0x51	; 81	'Q'
      00073C 51                    2111 	.db #0x51	; 81	'Q'
      00073D 51                    2112 	.db #0x51	; 81	'Q'
      00073E 51                    2113 	.db #0x51	; 81	'Q'
      00073F 51                    2114 	.db #0x51	; 81	'Q'
      000740                       2115 _color_title_7:
      000740 41                    2116 	.db #0x41	; 65	'A'
      000741 41                    2117 	.db #0x41	; 65	'A'
      000742 41                    2118 	.db #0x41	; 65	'A'
      000743 41                    2119 	.db #0x41	; 65	'A'
      000744 41                    2120 	.db #0x41	; 65	'A'
      000745 41                    2121 	.db #0x41	; 65	'A'
      000746 41                    2122 	.db #0x41	; 65	'A'
      000747 41                    2123 	.db #0x41	; 65	'A'
      000748                       2124 _sprite_arrow_0:
      000748 00                    2125 	.db #0x00	; 0
      000749 00                    2126 	.db #0x00	; 0
      00074A 00                    2127 	.db #0x00	; 0
      00074B 00                    2128 	.db #0x00	; 0
      00074C 00                    2129 	.db #0x00	; 0
      00074D 00                    2130 	.db #0x00	; 0
      00074E 00                    2131 	.db #0x00	; 0
      00074F 00                    2132 	.db #0x00	; 0
      000750                       2133 _sprite_arrow_1:
      000750 FF                    2134 	.db #0xff	; 255
      000751 00                    2135 	.db #0x00	; 0
      000752 3F                    2136 	.db #0x3f	; 63
      000753 00                    2137 	.db #0x00	; 0
      000754 0F                    2138 	.db #0x0f	; 15
      000755 00                    2139 	.db #0x00	; 0
      000756 03                    2140 	.db #0x03	; 3
      000757 00                    2141 	.db #0x00	; 0
      000758                       2142 _sprite_arrow_2:
      000758 00                    2143 	.db #0x00	; 0
      000759 00                    2144 	.db #0x00	; 0
      00075A 00                    2145 	.db #0x00	; 0
      00075B 00                    2146 	.db #0x00	; 0
      00075C 00                    2147 	.db #0x00	; 0
      00075D 00                    2148 	.db #0x00	; 0
      00075E 00                    2149 	.db #0x00	; 0
      00075F 00                    2150 	.db #0x00	; 0
      000760                       2151 _sprite_arrow_3:
      000760 FF                    2152 	.db #0xff	; 255
      000761 00                    2153 	.db #0x00	; 0
      000762 FC                    2154 	.db #0xfc	; 252
      000763 00                    2155 	.db #0x00	; 0
      000764 F0                    2156 	.db #0xf0	; 240
      000765 00                    2157 	.db #0x00	; 0
      000766 C0                    2158 	.db #0xc0	; 192
      000767 00                    2159 	.db #0x00	; 0
      000768                       2160 _sprite_3x_hit:
      000768 0C                    2161 	.db #0x0c	; 12
      000769 02                    2162 	.db #0x02	; 2
      00076A 0C                    2163 	.db #0x0c	; 12
      00076B 02                    2164 	.db #0x02	; 2
      00076C 0C                    2165 	.db #0x0c	; 12
      00076D 00                    2166 	.db #0x00	; 0
      00076E 00                    2167 	.db #0x00	; 0
      00076F 00                    2168 	.db #0x00	; 0
      000770 15                    2169 	.db #0x15	; 21
      000771 15                    2170 	.db #0x15	; 21
      000772 1D                    2171 	.db #0x1d	; 29
      000773 15                    2172 	.db #0x15	; 21
      000774 15                    2173 	.db #0x15	; 21
      000775 00                    2174 	.db #0x00	; 0
      000776 00                    2175 	.db #0x00	; 0
      000777 00                    2176 	.db #0x00	; 0
      000778 00                    2177 	.db #0x00	; 0
      000779 00                    2178 	.db #0x00	; 0
      00077A A0                    2179 	.db #0xa0	; 160
      00077B 40                    2180 	.db #0x40	; 64
      00077C A0                    2181 	.db #0xa0	; 160
      00077D 00                    2182 	.db #0x00	; 0
      00077E 00                    2183 	.db #0x00	; 0
      00077F 00                    2184 	.db #0x00	; 0
      000780 70                    2185 	.db #0x70	; 112	'p'
      000781 20                    2186 	.db #0x20	; 32
      000782 20                    2187 	.db #0x20	; 32
      000783 20                    2188 	.db #0x20	; 32
      000784 20                    2189 	.db #0x20	; 32
      000785 00                    2190 	.db #0x00	; 0
      000786 00                    2191 	.db #0x00	; 0
      000787 00                    2192 	.db #0x00	; 0
      000788                       2193 _test:
      000788 0C                    2194 	.db #0x0c	; 12
      000789 02                    2195 	.db #0x02	; 2
      00078A 0C                    2196 	.db #0x0c	; 12
      00078B 02                    2197 	.db #0x02	; 2
      00078C 0C                    2198 	.db #0x0c	; 12
      00078D 00                    2199 	.db #0x00	; 0
      00078E 00                    2200 	.db #0x00	; 0
      00078F 00                    2201 	.db #0x00	; 0
      000790 15                    2202 	.db #0x15	; 21
      000791 15                    2203 	.db #0x15	; 21
      000792 1D                    2204 	.db #0x1d	; 29
      000793 15                    2205 	.db #0x15	; 21
      000794 15                    2206 	.db #0x15	; 21
      000795 00                    2207 	.db #0x00	; 0
      000796 00                    2208 	.db #0x00	; 0
      000797 00                    2209 	.db #0x00	; 0
      000798 00                    2210 	.db #0x00	; 0
      000799 00                    2211 	.db #0x00	; 0
      00079A A0                    2212 	.db #0xa0	; 160
      00079B 40                    2213 	.db #0x40	; 64
      00079C A0                    2214 	.db #0xa0	; 160
      00079D 00                    2215 	.db #0x00	; 0
      00079E 00                    2216 	.db #0x00	; 0
      00079F 00                    2217 	.db #0x00	; 0
      0007A0 70                    2218 	.db #0x70	; 112	'p'
      0007A1 20                    2219 	.db #0x20	; 32
      0007A2 20                    2220 	.db #0x20	; 32
      0007A3 20                    2221 	.db #0x20	; 32
      0007A4 20                    2222 	.db #0x20	; 32
      0007A5 00                    2223 	.db #0x00	; 0
      0007A6 00                    2224 	.db #0x00	; 0
      0007A7 00                    2225 	.db #0x00	; 0
                                   2226 ;src\/Graphics.h:8: void DrawString(const char* str, byte col, byte line) {
                                   2227 ;	---------------------------------
                                   2228 ; Function DrawString
                                   2229 ; ---------------------------------
      0007A8                       2230 _DrawString::
      0007A8 DD E5            [15] 2231 	push	ix
      0007AA DD 21 00 00      [14] 2232 	ld	ix,#0
      0007AE DD 39            [15] 2233 	add	ix,sp
                                   2234 ;src\/Graphics.h:9: while (*str) {
      0007B0 DD 6E 06         [19] 2235 	ld	l, 6 (ix)
      0007B3 DD 4E 04         [19] 2236 	ld	c, 4 (ix)
      0007B6 DD 46 05         [19] 2237 	ld	b, 5 (ix)
      0007B9                       2238 00101$:
      0007B9 0A               [ 7] 2239 	ld	a, (bc)
      0007BA B7               [ 4] 2240 	or	a, a
      0007BB 28 1A            [12] 2241 	jr	Z, 00104$
                                   2242 ;src\/Graphics.h:10: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0007BD 55               [ 4] 2243 	ld	d, l
      0007BE 2C               [ 4] 2244 	inc	l
      0007BF DD 75 06         [19] 2245 	ld	6 (ix), l
      0007C2 03               [ 6] 2246 	inc	bc
      0007C3 C6 0F            [ 7] 2247 	add	a, #0x0f
      0007C5 E5               [11] 2248 	push	hl
      0007C6 C5               [11] 2249 	push	bc
      0007C7 DD 66 07         [19] 2250 	ld	h, 7 (ix)
      0007CA 6A               [ 4] 2251 	ld	l, d
      0007CB E5               [11] 2252 	push	hl
      0007CC F5               [11] 2253 	push	af
      0007CD 33               [ 6] 2254 	inc	sp
      0007CE CDrEDr00         [17] 2255 	call	_DrawChar
      0007D1 F1               [10] 2256 	pop	af
      0007D2 33               [ 6] 2257 	inc	sp
      0007D3 C1               [10] 2258 	pop	bc
      0007D4 E1               [10] 2259 	pop	hl
      0007D5 18 E2            [12] 2260 	jr	00101$
      0007D7                       2261 00104$:
                                   2262 ;src\/Graphics.h:12: }
      0007D7 DD E1            [14] 2263 	pop	ix
      0007D9 C9               [10] 2264 	ret
                                   2265 ;src\/Graphics.h:14: void DrawNumber(word number, byte col, byte line) {
                                   2266 ;	---------------------------------
                                   2267 ; Function DrawNumber
                                   2268 ; ---------------------------------
      0007DA                       2269 _DrawNumber::
      0007DA DD E5            [15] 2270 	push	ix
      0007DC DD 21 00 00      [14] 2271 	ld	ix,#0
      0007E0 DD 39            [15] 2272 	add	ix,sp
      0007E2 21 FA FF         [10] 2273 	ld	hl, #-6
      0007E5 39               [11] 2274 	add	hl, sp
      0007E6 F9               [ 6] 2275 	ld	sp, hl
                                   2276 ;src\/Graphics.h:17: bool trailingZero = TRUE;
      0007E7 DD 36 FA 01      [19] 2277 	ld	-6 (ix), #0x01
                                   2278 ;src\/Graphics.h:19: DrawString("      ", col, line); // Clear space for number (6 digits)
      0007EB DD 66 07         [19] 2279 	ld	h, 7 (ix)
      0007EE DD 6E 06         [19] 2280 	ld	l, 6 (ix)
      0007F1 E5               [11] 2281 	push	hl
      0007F2 21r8Er08         [10] 2282 	ld	hl, #___str_0
      0007F5 E5               [11] 2283 	push	hl
      0007F6 CDrA8r07         [17] 2284 	call	_DrawString
      0007F9 F1               [10] 2285 	pop	af
      0007FA F1               [10] 2286 	pop	af
                                   2287 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      0007FB DD 7E 06         [19] 2288 	ld	a, 6 (ix)
      0007FE DD 77 FF         [19] 2289 	ld	-1 (ix), a
      000801 1E 06            [ 7] 2290 	ld	e, #0x06
      000803                       2291 00109$:
      000803 7B               [ 4] 2292 	ld	a, e
      000804 B7               [ 4] 2293 	or	a, a
      000805 CAr89r08         [10] 2294 	jp	Z, 00111$
                                   2295 ;src\/Graphics.h:23: power = Power(10, i - 1);
      000808 7B               [ 4] 2296 	ld	a, e
      000809 3D               [ 4] 2297 	dec	a
      00080A D5               [11] 2298 	push	de
      00080B 57               [ 4] 2299 	ld	d,a
      00080C 1E 0A            [ 7] 2300 	ld	e,#0x0a
      00080E D5               [11] 2301 	push	de
      00080F CDr1Dr00         [17] 2302 	call	_Power
      000812 F1               [10] 2303 	pop	af
      000813 D1               [10] 2304 	pop	de
      000814 DD 75 FB         [19] 2305 	ld	-5 (ix), l
      000817 DD 74 FC         [19] 2306 	ld	-4 (ix), h
                                   2307 ;src\/Graphics.h:25: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00081A D5               [11] 2308 	push	de
      00081B DD 6E FB         [19] 2309 	ld	l, -5 (ix)
      00081E DD 66 FC         [19] 2310 	ld	h, -4 (ix)
      000821 E5               [11] 2311 	push	hl
      000822 DD 6E 04         [19] 2312 	ld	l, 4 (ix)
      000825 DD 66 05         [19] 2313 	ld	h, 5 (ix)
      000828 E5               [11] 2314 	push	hl
      000829 CDr00r00         [17] 2315 	call	__divuint
      00082C F1               [10] 2316 	pop	af
      00082D F1               [10] 2317 	pop	af
      00082E DD 75 FD         [19] 2318 	ld	-3 (ix), l
      000831 DD 74 FE         [19] 2319 	ld	-2 (ix), h
      000834 D1               [10] 2320 	pop	de
      000835 DD 7E FA         [19] 2321 	ld	a, -6 (ix)
      000838 B7               [ 4] 2322 	or	a, a
      000839 28 0C            [12] 2323 	jr	Z, 00102$
      00083B DD 7E FE         [19] 2324 	ld	a, -2 (ix)
      00083E DD B6 FD         [19] 2325 	or	a, -3 (ix)
      000841 28 04            [12] 2326 	jr	Z, 00102$
      000843 DD 36 FA 00      [19] 2327 	ld	-6 (ix), #0
      000847                       2328 00102$:
                                   2329 ;src\/Graphics.h:27: if(!trailingZero || i == 1) {
      000847 DD 7E FA         [19] 2330 	ld	a, -6 (ix)
      00084A B7               [ 4] 2331 	or	a, a
      00084B 28 04            [12] 2332 	jr	Z, 00104$
      00084D 7B               [ 4] 2333 	ld	a, e
      00084E 3D               [ 4] 2334 	dec	a
      00084F 20 31            [12] 2335 	jr	NZ, 00105$
      000851                       2336 00104$:
                                   2337 ;src\/Graphics.h:28: DrawChar((number / power) + CHAR_0, col, line);
      000851 DD 7E FD         [19] 2338 	ld	a, -3 (ix)
      000854 C6 3F            [ 7] 2339 	add	a, #0x3f
      000856 D5               [11] 2340 	push	de
      000857 DD 66 07         [19] 2341 	ld	h, 7 (ix)
      00085A E5               [11] 2342 	push	hl
      00085B 33               [ 6] 2343 	inc	sp
      00085C DD 66 FF         [19] 2344 	ld	h, -1 (ix)
      00085F E5               [11] 2345 	push	hl
      000860 33               [ 6] 2346 	inc	sp
      000861 F5               [11] 2347 	push	af
      000862 33               [ 6] 2348 	inc	sp
      000863 CDrEDr00         [17] 2349 	call	_DrawChar
      000866 F1               [10] 2350 	pop	af
      000867 33               [ 6] 2351 	inc	sp
      000868 DD 6E FB         [19] 2352 	ld	l, -5 (ix)
      00086B DD 66 FC         [19] 2353 	ld	h, -4 (ix)
      00086E E5               [11] 2354 	push	hl
      00086F DD 6E 04         [19] 2355 	ld	l, 4 (ix)
      000872 DD 66 05         [19] 2356 	ld	h, 5 (ix)
      000875 E5               [11] 2357 	push	hl
      000876 CDr00r00         [17] 2358 	call	__moduint
      000879 F1               [10] 2359 	pop	af
      00087A F1               [10] 2360 	pop	af
      00087B D1               [10] 2361 	pop	de
      00087C DD 75 04         [19] 2362 	ld	4 (ix), l
      00087F DD 74 05         [19] 2363 	ld	5 (ix), h
      000882                       2364 00105$:
                                   2365 ;src\/Graphics.h:32: col++;
      000882 DD 34 FF         [23] 2366 	inc	-1 (ix)
                                   2367 ;src\/Graphics.h:21: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000885 1D               [ 4] 2368 	dec	e
      000886 C3r03r08         [10] 2369 	jp	00109$
      000889                       2370 00111$:
                                   2371 ;src\/Graphics.h:37: }
      000889 DD F9            [10] 2372 	ld	sp, ix
      00088B DD E1            [14] 2373 	pop	ix
      00088D C9               [10] 2374 	ret
      00088E                       2375 ___str_0:
      00088E 20 20 20 20 20 20     2376 	.ascii "      "
      000894 00                    2377 	.db 0x00
                                   2378 ;src\/Graphics.h:39: void DrawColumn(byte col) {
                                   2379 ;	---------------------------------
                                   2380 ; Function DrawColumn
                                   2381 ; ---------------------------------
      000895                       2382 _DrawColumn::
      000895 DD E5            [15] 2383 	push	ix
      000897 DD 21 00 00      [14] 2384 	ld	ix,#0
      00089B DD 39            [15] 2385 	add	ix,sp
      00089D 3B               [ 6] 2386 	dec	sp
                                   2387 ;src\/Graphics.h:40: WRTVRM(MSX_modedata_screen2.name + col + 0, COLUMN_TOP_1);
      00089E 2A C7 F3         [16] 2388 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008A1 DD 4E 04         [19] 2389 	ld	c, 4 (ix)
      0008A4 06 00            [ 7] 2390 	ld	b, #0x00
      0008A6 09               [11] 2391 	add	hl, bc
      0008A7 C5               [11] 2392 	push	bc
      0008A8 3E 18            [ 7] 2393 	ld	a, #0x18
      0008AA F5               [11] 2394 	push	af
      0008AB 33               [ 6] 2395 	inc	sp
      0008AC E5               [11] 2396 	push	hl
      0008AD CDr00r00         [17] 2397 	call	_WRTVRM
      0008B0 F1               [10] 2398 	pop	af
      0008B1 33               [ 6] 2399 	inc	sp
      0008B2 C1               [10] 2400 	pop	bc
                                   2401 ;src\/Graphics.h:41: WRTVRM(MSX_modedata_screen2.name + col + 1, COLUMN_TOP_1 + 1);
      0008B3 2A C7 F3         [16] 2402 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008B6 09               [11] 2403 	add	hl, bc
      0008B7 23               [ 6] 2404 	inc	hl
      0008B8 C5               [11] 2405 	push	bc
      0008B9 3E 19            [ 7] 2406 	ld	a, #0x19
      0008BB F5               [11] 2407 	push	af
      0008BC 33               [ 6] 2408 	inc	sp
      0008BD E5               [11] 2409 	push	hl
      0008BE CDr00r00         [17] 2410 	call	_WRTVRM
      0008C1 F1               [10] 2411 	pop	af
      0008C2 33               [ 6] 2412 	inc	sp
      0008C3 C1               [10] 2413 	pop	bc
                                   2414 ;src\/Graphics.h:42: WRTVRM(MSX_modedata_screen2.name + col + 2, COLUMN_TOP_1 + 2);
      0008C4 2A C7 F3         [16] 2415 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008C7 09               [11] 2416 	add	hl, bc
      0008C8 23               [ 6] 2417 	inc	hl
      0008C9 23               [ 6] 2418 	inc	hl
      0008CA C5               [11] 2419 	push	bc
      0008CB 3E 1A            [ 7] 2420 	ld	a, #0x1a
      0008CD F5               [11] 2421 	push	af
      0008CE 33               [ 6] 2422 	inc	sp
      0008CF E5               [11] 2423 	push	hl
      0008D0 CDr00r00         [17] 2424 	call	_WRTVRM
      0008D3 F1               [10] 2425 	pop	af
      0008D4 33               [ 6] 2426 	inc	sp
      0008D5 C1               [10] 2427 	pop	bc
                                   2428 ;src\/Graphics.h:43: WRTVRM(MSX_modedata_screen2.name + col + 32, COLUMN_TOP_1 + 3);
      0008D6 2A C7 F3         [16] 2429 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008D9 09               [11] 2430 	add	hl, bc
      0008DA 11 20 00         [10] 2431 	ld	de, #0x0020
      0008DD 19               [11] 2432 	add	hl, de
      0008DE C5               [11] 2433 	push	bc
      0008DF 3E 1B            [ 7] 2434 	ld	a, #0x1b
      0008E1 F5               [11] 2435 	push	af
      0008E2 33               [ 6] 2436 	inc	sp
      0008E3 E5               [11] 2437 	push	hl
      0008E4 CDr00r00         [17] 2438 	call	_WRTVRM
      0008E7 F1               [10] 2439 	pop	af
      0008E8 33               [ 6] 2440 	inc	sp
      0008E9 C1               [10] 2441 	pop	bc
                                   2442 ;src\/Graphics.h:44: WRTVRM(MSX_modedata_screen2.name + col + 33, COLUMN_TOP_1 + 4);
      0008EA 2A C7 F3         [16] 2443 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0008ED 09               [11] 2444 	add	hl, bc
      0008EE 11 21 00         [10] 2445 	ld	de, #0x0021
      0008F1 19               [11] 2446 	add	hl, de
      0008F2 C5               [11] 2447 	push	bc
      0008F3 3E 1C            [ 7] 2448 	ld	a, #0x1c
      0008F5 F5               [11] 2449 	push	af
      0008F6 33               [ 6] 2450 	inc	sp
      0008F7 E5               [11] 2451 	push	hl
      0008F8 CDr00r00         [17] 2452 	call	_WRTVRM
      0008FB F1               [10] 2453 	pop	af
      0008FC 33               [ 6] 2454 	inc	sp
      0008FD C1               [10] 2455 	pop	bc
                                   2456 ;src\/Graphics.h:45: WRTVRM(MSX_modedata_screen2.name + col + 34, COLUMN_TOP_1 + 5);
      0008FE 2A C7 F3         [16] 2457 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000901 09               [11] 2458 	add	hl, bc
      000902 11 22 00         [10] 2459 	ld	de, #0x0022
      000905 19               [11] 2460 	add	hl, de
      000906 C5               [11] 2461 	push	bc
      000907 3E 1D            [ 7] 2462 	ld	a, #0x1d
      000909 F5               [11] 2463 	push	af
      00090A 33               [ 6] 2464 	inc	sp
      00090B E5               [11] 2465 	push	hl
      00090C CDr00r00         [17] 2466 	call	_WRTVRM
      00090F F1               [10] 2467 	pop	af
                                   2468 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000910 DD 36 FF 00      [19] 2469 	ld	-1 (ix), #0
      000914 33               [ 6] 2470 	inc	sp
      000915 C1               [10] 2471 	pop	bc
      000916                       2472 00103$:
      000916 DD 7E FF         [19] 2473 	ld	a, -1 (ix)
      000919 D6 14            [ 7] 2474 	sub	a, #0x14
      00091B 30 58            [12] 2475 	jr	NC, 00101$
                                   2476 ;src\/Graphics.h:48: WRTVRM(MSX_modedata_screen2.name + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00091D 2A C7 F3         [16] 2477 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000920 09               [11] 2478 	add	hl, bc
      000921 11 40 00         [10] 2479 	ld	de, #0x0040
      000924 19               [11] 2480 	add	hl, de
      000925 DD 5E FF         [19] 2481 	ld	e, -1 (ix)
      000928 16 00            [ 7] 2482 	ld	d, #0x00
      00092A EB               [ 4] 2483 	ex	de, hl
      00092B 29               [11] 2484 	add	hl, hl
      00092C 29               [11] 2485 	add	hl, hl
      00092D 29               [11] 2486 	add	hl, hl
      00092E 29               [11] 2487 	add	hl, hl
      00092F 29               [11] 2488 	add	hl, hl
      000930 EB               [ 4] 2489 	ex	de, hl
      000931 19               [11] 2490 	add	hl, de
      000932 C5               [11] 2491 	push	bc
      000933 D5               [11] 2492 	push	de
      000934 3E 1E            [ 7] 2493 	ld	a, #0x1e
      000936 F5               [11] 2494 	push	af
      000937 33               [ 6] 2495 	inc	sp
      000938 E5               [11] 2496 	push	hl
      000939 CDr00r00         [17] 2497 	call	_WRTVRM
      00093C F1               [10] 2498 	pop	af
      00093D 33               [ 6] 2499 	inc	sp
      00093E D1               [10] 2500 	pop	de
      00093F C1               [10] 2501 	pop	bc
                                   2502 ;src\/Graphics.h:49: WRTVRM(MSX_modedata_screen2.name + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000940 2A C7 F3         [16] 2503 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000943 09               [11] 2504 	add	hl, bc
      000944 D5               [11] 2505 	push	de
      000945 11 41 00         [10] 2506 	ld	de, #0x0041
      000948 19               [11] 2507 	add	hl, de
      000949 D1               [10] 2508 	pop	de
      00094A 19               [11] 2509 	add	hl, de
      00094B C5               [11] 2510 	push	bc
      00094C D5               [11] 2511 	push	de
      00094D 3E 1F            [ 7] 2512 	ld	a, #0x1f
      00094F F5               [11] 2513 	push	af
      000950 33               [ 6] 2514 	inc	sp
      000951 E5               [11] 2515 	push	hl
      000952 CDr00r00         [17] 2516 	call	_WRTVRM
      000955 F1               [10] 2517 	pop	af
      000956 33               [ 6] 2518 	inc	sp
      000957 D1               [10] 2519 	pop	de
      000958 C1               [10] 2520 	pop	bc
                                   2521 ;src\/Graphics.h:50: WRTVRM(MSX_modedata_screen2.name + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000959 2A C7 F3         [16] 2522 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00095C 09               [11] 2523 	add	hl, bc
      00095D D5               [11] 2524 	push	de
      00095E 11 42 00         [10] 2525 	ld	de, #0x0042
      000961 19               [11] 2526 	add	hl, de
      000962 D1               [10] 2527 	pop	de
      000963 19               [11] 2528 	add	hl, de
      000964 C5               [11] 2529 	push	bc
      000965 3E 20            [ 7] 2530 	ld	a, #0x20
      000967 F5               [11] 2531 	push	af
      000968 33               [ 6] 2532 	inc	sp
      000969 E5               [11] 2533 	push	hl
      00096A CDr00r00         [17] 2534 	call	_WRTVRM
      00096D F1               [10] 2535 	pop	af
      00096E 33               [ 6] 2536 	inc	sp
      00096F C1               [10] 2537 	pop	bc
                                   2538 ;src\/Graphics.h:47: for(byte i=0; i<20; i++) {
      000970 DD 34 FF         [23] 2539 	inc	-1 (ix)
      000973 18 A1            [12] 2540 	jr	00103$
      000975                       2541 00101$:
                                   2542 ;src\/Graphics.h:53: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8), COLUMN_MIDDLE_2);
      000975 2A C7 F3         [16] 2543 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000978 09               [11] 2544 	add	hl, bc
      000979 7C               [ 4] 2545 	ld	a, h
      00097A 3C               [ 4] 2546 	inc	a
      00097B 67               [ 4] 2547 	ld	h, a
      00097C C5               [11] 2548 	push	bc
      00097D 3E 21            [ 7] 2549 	ld	a, #0x21
      00097F F5               [11] 2550 	push	af
      000980 33               [ 6] 2551 	inc	sp
      000981 E5               [11] 2552 	push	hl
      000982 CDr00r00         [17] 2553 	call	_WRTVRM
      000985 F1               [10] 2554 	pop	af
      000986 33               [ 6] 2555 	inc	sp
      000987 C1               [10] 2556 	pop	bc
                                   2557 ;src\/Graphics.h:54: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000988 2A C7 F3         [16] 2558 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00098B 09               [11] 2559 	add	hl, bc
      00098C 11 01 01         [10] 2560 	ld	de, #0x0101
      00098F 19               [11] 2561 	add	hl, de
      000990 C5               [11] 2562 	push	bc
      000991 3E 22            [ 7] 2563 	ld	a, #0x22
      000993 F5               [11] 2564 	push	af
      000994 33               [ 6] 2565 	inc	sp
      000995 E5               [11] 2566 	push	hl
      000996 CDr00r00         [17] 2567 	call	_WRTVRM
      000999 F1               [10] 2568 	pop	af
      00099A 33               [ 6] 2569 	inc	sp
      00099B C1               [10] 2570 	pop	bc
                                   2571 ;src\/Graphics.h:55: WRTVRM(MSX_modedata_screen2.name + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      00099C 2A C7 F3         [16] 2572 	ld	hl, (#_MSX_modedata_screen2 + 0)
      00099F 09               [11] 2573 	add	hl, bc
      0009A0 11 02 01         [10] 2574 	ld	de, #0x0102
      0009A3 19               [11] 2575 	add	hl, de
      0009A4 C5               [11] 2576 	push	bc
      0009A5 3E 23            [ 7] 2577 	ld	a, #0x23
      0009A7 F5               [11] 2578 	push	af
      0009A8 33               [ 6] 2579 	inc	sp
      0009A9 E5               [11] 2580 	push	hl
      0009AA CDr00r00         [17] 2581 	call	_WRTVRM
      0009AD F1               [10] 2582 	pop	af
      0009AE 33               [ 6] 2583 	inc	sp
      0009AF C1               [10] 2584 	pop	bc
                                   2585 ;src\/Graphics.h:57: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16), COLUMN_MIDDLE_2);
      0009B0 2A C7 F3         [16] 2586 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009B3 09               [11] 2587 	add	hl, bc
      0009B4 7C               [ 4] 2588 	ld	a, h
      0009B5 C6 02            [ 7] 2589 	add	a, #0x02
      0009B7 67               [ 4] 2590 	ld	h, a
      0009B8 C5               [11] 2591 	push	bc
      0009B9 3E 21            [ 7] 2592 	ld	a, #0x21
      0009BB F5               [11] 2593 	push	af
      0009BC 33               [ 6] 2594 	inc	sp
      0009BD E5               [11] 2595 	push	hl
      0009BE CDr00r00         [17] 2596 	call	_WRTVRM
      0009C1 F1               [10] 2597 	pop	af
      0009C2 33               [ 6] 2598 	inc	sp
      0009C3 C1               [10] 2599 	pop	bc
                                   2600 ;src\/Graphics.h:58: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0009C4 2A C7 F3         [16] 2601 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009C7 09               [11] 2602 	add	hl, bc
      0009C8 11 01 02         [10] 2603 	ld	de, #0x0201
      0009CB 19               [11] 2604 	add	hl, de
      0009CC C5               [11] 2605 	push	bc
      0009CD 3E 22            [ 7] 2606 	ld	a, #0x22
      0009CF F5               [11] 2607 	push	af
      0009D0 33               [ 6] 2608 	inc	sp
      0009D1 E5               [11] 2609 	push	hl
      0009D2 CDr00r00         [17] 2610 	call	_WRTVRM
      0009D5 F1               [10] 2611 	pop	af
      0009D6 33               [ 6] 2612 	inc	sp
      0009D7 C1               [10] 2613 	pop	bc
                                   2614 ;src\/Graphics.h:59: WRTVRM(MSX_modedata_screen2.name + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0009D8 2A C7 F3         [16] 2615 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009DB 09               [11] 2616 	add	hl, bc
      0009DC 11 02 02         [10] 2617 	ld	de, #0x0202
      0009DF 19               [11] 2618 	add	hl, de
      0009E0 C5               [11] 2619 	push	bc
      0009E1 3E 23            [ 7] 2620 	ld	a, #0x23
      0009E3 F5               [11] 2621 	push	af
      0009E4 33               [ 6] 2622 	inc	sp
      0009E5 E5               [11] 2623 	push	hl
      0009E6 CDr00r00         [17] 2624 	call	_WRTVRM
      0009E9 F1               [10] 2625 	pop	af
      0009EA 33               [ 6] 2626 	inc	sp
      0009EB C1               [10] 2627 	pop	bc
                                   2628 ;src\/Graphics.h:61: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0009EC 2A C7 F3         [16] 2629 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0009EF 09               [11] 2630 	add	hl, bc
      0009F0 11 C0 02         [10] 2631 	ld	de, #0x02c0
      0009F3 19               [11] 2632 	add	hl, de
      0009F4 C5               [11] 2633 	push	bc
      0009F5 3E 24            [ 7] 2634 	ld	a, #0x24
      0009F7 F5               [11] 2635 	push	af
      0009F8 33               [ 6] 2636 	inc	sp
      0009F9 E5               [11] 2637 	push	hl
      0009FA CDr00r00         [17] 2638 	call	_WRTVRM
      0009FD F1               [10] 2639 	pop	af
      0009FE 33               [ 6] 2640 	inc	sp
      0009FF C1               [10] 2641 	pop	bc
                                   2642 ;src\/Graphics.h:62: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000A00 2A C7 F3         [16] 2643 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A03 09               [11] 2644 	add	hl, bc
      000A04 11 C1 02         [10] 2645 	ld	de, #0x02c1
      000A07 19               [11] 2646 	add	hl, de
      000A08 C5               [11] 2647 	push	bc
      000A09 3E 25            [ 7] 2648 	ld	a, #0x25
      000A0B F5               [11] 2649 	push	af
      000A0C 33               [ 6] 2650 	inc	sp
      000A0D E5               [11] 2651 	push	hl
      000A0E CDr00r00         [17] 2652 	call	_WRTVRM
      000A11 F1               [10] 2653 	pop	af
      000A12 33               [ 6] 2654 	inc	sp
      000A13 C1               [10] 2655 	pop	bc
                                   2656 ;src\/Graphics.h:63: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000A14 2A C7 F3         [16] 2657 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A17 09               [11] 2658 	add	hl, bc
      000A18 11 C2 02         [10] 2659 	ld	de, #0x02c2
      000A1B 19               [11] 2660 	add	hl, de
      000A1C C5               [11] 2661 	push	bc
      000A1D 3E 26            [ 7] 2662 	ld	a, #0x26
      000A1F F5               [11] 2663 	push	af
      000A20 33               [ 6] 2664 	inc	sp
      000A21 E5               [11] 2665 	push	hl
      000A22 CDr00r00         [17] 2666 	call	_WRTVRM
      000A25 F1               [10] 2667 	pop	af
      000A26 33               [ 6] 2668 	inc	sp
      000A27 C1               [10] 2669 	pop	bc
                                   2670 ;src\/Graphics.h:64: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      000A28 2A C7 F3         [16] 2671 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A2B 09               [11] 2672 	add	hl, bc
      000A2C 11 E0 02         [10] 2673 	ld	de, #0x02e0
      000A2F 19               [11] 2674 	add	hl, de
      000A30 C5               [11] 2675 	push	bc
      000A31 3E 27            [ 7] 2676 	ld	a, #0x27
      000A33 F5               [11] 2677 	push	af
      000A34 33               [ 6] 2678 	inc	sp
      000A35 E5               [11] 2679 	push	hl
      000A36 CDr00r00         [17] 2680 	call	_WRTVRM
      000A39 F1               [10] 2681 	pop	af
      000A3A 33               [ 6] 2682 	inc	sp
      000A3B C1               [10] 2683 	pop	bc
                                   2684 ;src\/Graphics.h:65: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      000A3C 2A C7 F3         [16] 2685 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A3F 09               [11] 2686 	add	hl, bc
      000A40 11 E1 02         [10] 2687 	ld	de, #0x02e1
      000A43 19               [11] 2688 	add	hl, de
      000A44 C5               [11] 2689 	push	bc
      000A45 3E 28            [ 7] 2690 	ld	a, #0x28
      000A47 F5               [11] 2691 	push	af
      000A48 33               [ 6] 2692 	inc	sp
      000A49 E5               [11] 2693 	push	hl
      000A4A CDr00r00         [17] 2694 	call	_WRTVRM
      000A4D F1               [10] 2695 	pop	af
      000A4E 33               [ 6] 2696 	inc	sp
      000A4F C1               [10] 2697 	pop	bc
                                   2698 ;src\/Graphics.h:66: WRTVRM(MSX_modedata_screen2.name + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      000A50 2A C7 F3         [16] 2699 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000A53 09               [11] 2700 	add	hl, bc
      000A54 01 E2 02         [10] 2701 	ld	bc, #0x02e2
      000A57 09               [11] 2702 	add	hl, bc
      000A58 3E 29            [ 7] 2703 	ld	a, #0x29
      000A5A F5               [11] 2704 	push	af
      000A5B 33               [ 6] 2705 	inc	sp
      000A5C E5               [11] 2706 	push	hl
      000A5D CDr00r00         [17] 2707 	call	_WRTVRM
      000A60 F1               [10] 2708 	pop	af
      000A61 33               [ 6] 2709 	inc	sp
                                   2710 ;src\/Graphics.h:67: }
      000A62 33               [ 6] 2711 	inc	sp
      000A63 DD E1            [14] 2712 	pop	ix
      000A65 C9               [10] 2713 	ret
                                   2714 ;src\/Graphics.h:69: void DrawScore() {
                                   2715 ;	---------------------------------
                                   2716 ; Function DrawScore
                                   2717 ; ---------------------------------
      000A66                       2718 _DrawScore::
      000A66 DD E5            [15] 2719 	push	ix
      000A68 DD 21 00 00      [14] 2720 	ld	ix,#0
      000A6C DD 39            [15] 2721 	add	ix,sp
      000A6E F5               [11] 2722 	push	af
                                   2723 ;src\/Graphics.h:70: byte bgCounter = 0, bgColor;
      000A6F DD 36 FE 00      [19] 2724 	ld	-2 (ix), #0
                                   2725 ;src\/Graphics.h:74: if(newLevel) {
      000A73 3Ar07r00         [13] 2726 	ld	a,(#_newLevel + 0)
      000A76 B7               [ 4] 2727 	or	a, a
      000A77 CAr6Br0B         [10] 2728 	jp	Z, 00119$
                                   2729 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000A7A DD 36 FF 00      [19] 2730 	ld	-1 (ix), #0
      000A7E                       2731 00121$:
      000A7E DD 7E FF         [19] 2732 	ld	a, -1 (ix)
      000A81 D6 3C            [ 7] 2733 	sub	a, #0x3c
      000A83 D2r6Br0B         [10] 2734 	jp	NC, 00119$
                                   2735 ;src\/Graphics.h:76: lastJiffy = JIFFY;
      000A86 ED 4B 9E FC      [20] 2736 	ld	bc, (_JIFFY)
                                   2737 ;src\/Graphics.h:77: while(lastJiffy == JIFFY) { }
      000A8A                       2738 00101$:
      000A8A 2A 9E FC         [16] 2739 	ld	hl, (_JIFFY)
      000A8D BF               [ 4] 2740 	cp	a, a
      000A8E ED 42            [15] 2741 	sbc	hl, bc
      000A90 28 F8            [12] 2742 	jr	Z, 00101$
                                   2743 ;src\/Graphics.h:80: if(JIFFY & 0b00000110) {
      000A92 2A 9E FC         [16] 2744 	ld	hl, (_JIFFY)
      000A95 7D               [ 4] 2745 	ld	a, l
      000A96 E6 06            [ 7] 2746 	and	a, #0x06
      000A98 CAr4Br0B         [10] 2747 	jp	Z,00115$
                                   2748 ;src\/Graphics.h:81: DrawString(" LEVEL", 26, 4);
      000A9B 11 1A 04         [10] 2749 	ld	de, #0x041a
      000A9E D5               [11] 2750 	push	de
      000A9F 21rE8r0B         [10] 2751 	ld	hl, #___str_1
      000AA2 E5               [11] 2752 	push	hl
      000AA3 CDrA8r07         [17] 2753 	call	_DrawString
      000AA6 F1               [10] 2754 	pop	af
      000AA7 F1               [10] 2755 	pop	af
                                   2756 ;src\/Graphics.h:82: DrawNumber(level, 26, 5);
      000AA8 3Ar06r00         [13] 2757 	ld	a, (#_level + 0)
      000AAB 4F               [ 4] 2758 	ld	c, a
      000AAC 06 00            [ 7] 2759 	ld	b, #0x00
      000AAE 11 1A 05         [10] 2760 	ld	de, #0x051a
      000AB1 D5               [11] 2761 	push	de
      000AB2 C5               [11] 2762 	push	bc
      000AB3 CDrDAr07         [17] 2763 	call	_DrawNumber
      000AB6 F1               [10] 2764 	pop	af
      000AB7 F1               [10] 2765 	pop	af
                                   2766 ;src\/Graphics.h:88: switch(bgCounter++) {
      000AB8 DD 4E FE         [19] 2767 	ld	c, -2 (ix)
      000ABB DD 34 FE         [23] 2768 	inc	-2 (ix)
      000ABE 3E 07            [ 7] 2769 	ld	a, #0x07
      000AC0 91               [ 4] 2770 	sub	a, c
      000AC1 38 45            [12] 2771 	jr	C, 00112$
      000AC3 06 00            [ 7] 2772 	ld	b, #0x00
      000AC5 21rCCr0A         [10] 2773 	ld	hl, #00163$
      000AC8 09               [11] 2774 	add	hl, bc
      000AC9 09               [11] 2775 	add	hl, bc
      000ACA 09               [11] 2776 	add	hl, bc
      000ACB E9               [ 4] 2777 	jp	(hl)
      000ACC                       2778 00163$:
      000ACC C3rE4r0A         [10] 2779 	jp	00104$
      000ACF C3rE8r0A         [10] 2780 	jp	00105$
      000AD2 C3rECr0A         [10] 2781 	jp	00106$
      000AD5 C3rF0r0A         [10] 2782 	jp	00107$
      000AD8 C3rF4r0A         [10] 2783 	jp	00108$
      000ADB C3rF8r0A         [10] 2784 	jp	00109$
      000ADE C3rFCr0A         [10] 2785 	jp	00110$
      000AE1 C3r00r0B         [10] 2786 	jp	00111$
                                   2787 ;src\/Graphics.h:89: case 0:
      000AE4                       2788 00104$:
                                   2789 ;src\/Graphics.h:90: bgColor = 0x14;
      000AE4 0E 14            [ 7] 2790 	ld	c, #0x14
                                   2791 ;src\/Graphics.h:91: break;
      000AE6 18 22            [12] 2792 	jr	00113$
                                   2793 ;src\/Graphics.h:92: case 1:
      000AE8                       2794 00105$:
                                   2795 ;src\/Graphics.h:93: bgColor = 0x15;
      000AE8 0E 15            [ 7] 2796 	ld	c, #0x15
                                   2797 ;src\/Graphics.h:94: break;
      000AEA 18 1E            [12] 2798 	jr	00113$
                                   2799 ;src\/Graphics.h:95: case 2:
      000AEC                       2800 00106$:
                                   2801 ;src\/Graphics.h:96: bgColor = 0x17;
      000AEC 0E 17            [ 7] 2802 	ld	c, #0x17
                                   2803 ;src\/Graphics.h:97: break;
      000AEE 18 1A            [12] 2804 	jr	00113$
                                   2805 ;src\/Graphics.h:98: case 3:
      000AF0                       2806 00107$:
                                   2807 ;src\/Graphics.h:99: bgColor = 0x1e;
      000AF0 0E 1E            [ 7] 2808 	ld	c, #0x1e
                                   2809 ;src\/Graphics.h:100: break;
      000AF2 18 16            [12] 2810 	jr	00113$
                                   2811 ;src\/Graphics.h:101: case 4:
      000AF4                       2812 00108$:
                                   2813 ;src\/Graphics.h:102: bgColor = 0x1f;
      000AF4 0E 1F            [ 7] 2814 	ld	c, #0x1f
                                   2815 ;src\/Graphics.h:103: break;
      000AF6 18 12            [12] 2816 	jr	00113$
                                   2817 ;src\/Graphics.h:104: case 5:
      000AF8                       2818 00109$:
                                   2819 ;src\/Graphics.h:105: bgColor = 0x1e;
      000AF8 0E 1E            [ 7] 2820 	ld	c, #0x1e
                                   2821 ;src\/Graphics.h:106: break;
      000AFA 18 0E            [12] 2822 	jr	00113$
                                   2823 ;src\/Graphics.h:107: case 6:
      000AFC                       2824 00110$:
                                   2825 ;src\/Graphics.h:108: bgColor = 0x17;
      000AFC 0E 17            [ 7] 2826 	ld	c, #0x17
                                   2827 ;src\/Graphics.h:109: break;
      000AFE 18 0A            [12] 2828 	jr	00113$
                                   2829 ;src\/Graphics.h:110: case 7:
      000B00                       2830 00111$:
                                   2831 ;src\/Graphics.h:111: bgColor = 0x15;
      000B00 0E 15            [ 7] 2832 	ld	c, #0x15
                                   2833 ;src\/Graphics.h:112: bgCounter = 0;
      000B02 DD 36 FE 00      [19] 2834 	ld	-2 (ix), #0
                                   2835 ;src\/Graphics.h:113: break;
      000B06 18 02            [12] 2836 	jr	00113$
                                   2837 ;src\/Graphics.h:114: default:
      000B08                       2838 00112$:
                                   2839 ;src\/Graphics.h:115: bgColor = 0x11;
      000B08 0E 11            [ 7] 2840 	ld	c, #0x11
                                   2841 ;src\/Graphics.h:117: }
      000B0A                       2842 00113$:
                                   2843 ;src\/Graphics.h:118: FILVRM(MSX_modedata_screen2.color, 8 * 4, bgColor);
      000B0A 2A C9 F3         [16] 2844 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B0D C5               [11] 2845 	push	bc
      000B0E 79               [ 4] 2846 	ld	a, c
      000B0F F5               [11] 2847 	push	af
      000B10 33               [ 6] 2848 	inc	sp
      000B11 11 20 00         [10] 2849 	ld	de, #0x0020
      000B14 D5               [11] 2850 	push	de
      000B15 E5               [11] 2851 	push	hl
      000B16 CDr00r00         [17] 2852 	call	_FILVRM
      000B19 F1               [10] 2853 	pop	af
      000B1A F1               [10] 2854 	pop	af
      000B1B 33               [ 6] 2855 	inc	sp
      000B1C C1               [10] 2856 	pop	bc
                                   2857 ;src\/Graphics.h:119: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, bgColor);
      000B1D 2A C9 F3         [16] 2858 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B20 7C               [ 4] 2859 	ld	a, h
      000B21 C6 08            [ 7] 2860 	add	a, #0x08
      000B23 67               [ 4] 2861 	ld	h, a
      000B24 C5               [11] 2862 	push	bc
      000B25 79               [ 4] 2863 	ld	a, c
      000B26 F5               [11] 2864 	push	af
      000B27 33               [ 6] 2865 	inc	sp
      000B28 11 20 00         [10] 2866 	ld	de, #0x0020
      000B2B D5               [11] 2867 	push	de
      000B2C E5               [11] 2868 	push	hl
      000B2D CDr00r00         [17] 2869 	call	_FILVRM
      000B30 F1               [10] 2870 	pop	af
      000B31 F1               [10] 2871 	pop	af
      000B32 33               [ 6] 2872 	inc	sp
      000B33 C1               [10] 2873 	pop	bc
                                   2874 ;src\/Graphics.h:120: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, bgColor);
      000B34 2A C9 F3         [16] 2875 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B37 7C               [ 4] 2876 	ld	a, h
      000B38 C6 10            [ 7] 2877 	add	a, #0x10
      000B3A 67               [ 4] 2878 	ld	h, a
      000B3B 79               [ 4] 2879 	ld	a, c
      000B3C F5               [11] 2880 	push	af
      000B3D 33               [ 6] 2881 	inc	sp
      000B3E 11 20 00         [10] 2882 	ld	de, #0x0020
      000B41 D5               [11] 2883 	push	de
      000B42 E5               [11] 2884 	push	hl
      000B43 CDr00r00         [17] 2885 	call	_FILVRM
      000B46 F1               [10] 2886 	pop	af
      000B47 F1               [10] 2887 	pop	af
      000B48 33               [ 6] 2888 	inc	sp
      000B49 18 1A            [12] 2889 	jr	00122$
      000B4B                       2890 00115$:
                                   2891 ;src\/Graphics.h:125: DrawString("      ", 26, 4);
      000B4B 11 1A 04         [10] 2892 	ld	de, #0x041a
      000B4E D5               [11] 2893 	push	de
      000B4F 21rEFr0B         [10] 2894 	ld	hl, #___str_2
      000B52 E5               [11] 2895 	push	hl
      000B53 CDrA8r07         [17] 2896 	call	_DrawString
      000B56 F1               [10] 2897 	pop	af
      000B57 F1               [10] 2898 	pop	af
                                   2899 ;src\/Graphics.h:126: DrawString("      ", 26, 5);
      000B58 11 1A 05         [10] 2900 	ld	de, #0x051a
      000B5B D5               [11] 2901 	push	de
      000B5C 21rEFr0B         [10] 2902 	ld	hl, #___str_2
      000B5F E5               [11] 2903 	push	hl
      000B60 CDrA8r07         [17] 2904 	call	_DrawString
      000B63 F1               [10] 2905 	pop	af
      000B64 F1               [10] 2906 	pop	af
      000B65                       2907 00122$:
                                   2908 ;src\/Graphics.h:75: for(byte i=0; i < 60; i++) {
      000B65 DD 34 FF         [23] 2909 	inc	-1 (ix)
      000B68 C3r7Er0A         [10] 2910 	jp	00121$
      000B6B                       2911 00119$:
                                   2912 ;src\/Graphics.h:132: newLevel = FALSE;
      000B6B 21r07r00         [10] 2913 	ld	hl, #_newLevel
      000B6E 36 00            [10] 2914 	ld	(hl), #0x00
                                   2915 ;src\/Graphics.h:135: FILVRM(MSX_modedata_screen2.color, 8 * 4, 0x14);
      000B70 2A C9 F3         [16] 2916 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B73 3E 14            [ 7] 2917 	ld	a, #0x14
      000B75 F5               [11] 2918 	push	af
      000B76 33               [ 6] 2919 	inc	sp
      000B77 11 20 00         [10] 2920 	ld	de, #0x0020
      000B7A D5               [11] 2921 	push	de
      000B7B E5               [11] 2922 	push	hl
      000B7C CDr00r00         [17] 2923 	call	_FILVRM
      000B7F F1               [10] 2924 	pop	af
      000B80 F1               [10] 2925 	pop	af
      000B81 33               [ 6] 2926 	inc	sp
                                   2927 ;src\/Graphics.h:136: FILVRM(MSX_modedata_screen2.color + (256 * 8), 8 * 4, 0x14);
      000B82 2A C9 F3         [16] 2928 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B85 7C               [ 4] 2929 	ld	a, h
      000B86 C6 08            [ 7] 2930 	add	a, #0x08
      000B88 67               [ 4] 2931 	ld	h, a
      000B89 3E 14            [ 7] 2932 	ld	a, #0x14
      000B8B F5               [11] 2933 	push	af
      000B8C 33               [ 6] 2934 	inc	sp
      000B8D 11 20 00         [10] 2935 	ld	de, #0x0020
      000B90 D5               [11] 2936 	push	de
      000B91 E5               [11] 2937 	push	hl
      000B92 CDr00r00         [17] 2938 	call	_FILVRM
      000B95 F1               [10] 2939 	pop	af
      000B96 F1               [10] 2940 	pop	af
      000B97 33               [ 6] 2941 	inc	sp
                                   2942 ;src\/Graphics.h:137: FILVRM(MSX_modedata_screen2.color + (512 * 8), 8 * 4, 0x14);
      000B98 2A C9 F3         [16] 2943 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000B9B 7C               [ 4] 2944 	ld	a, h
      000B9C C6 10            [ 7] 2945 	add	a, #0x10
      000B9E 67               [ 4] 2946 	ld	h, a
      000B9F 3E 14            [ 7] 2947 	ld	a, #0x14
      000BA1 F5               [11] 2948 	push	af
      000BA2 33               [ 6] 2949 	inc	sp
      000BA3 11 20 00         [10] 2950 	ld	de, #0x0020
      000BA6 D5               [11] 2951 	push	de
      000BA7 E5               [11] 2952 	push	hl
      000BA8 CDr00r00         [17] 2953 	call	_FILVRM
      000BAB F1               [10] 2954 	pop	af
      000BAC F1               [10] 2955 	pop	af
      000BAD 33               [ 6] 2956 	inc	sp
                                   2957 ;src\/Graphics.h:139: DrawString(" LEVEL", 26, 4);
      000BAE 11 1A 04         [10] 2958 	ld	de, #0x041a
      000BB1 D5               [11] 2959 	push	de
      000BB2 21rE8r0B         [10] 2960 	ld	hl, #___str_1
      000BB5 E5               [11] 2961 	push	hl
      000BB6 CDrA8r07         [17] 2962 	call	_DrawString
      000BB9 F1               [10] 2963 	pop	af
      000BBA F1               [10] 2964 	pop	af
                                   2965 ;src\/Graphics.h:140: DrawString("BLOCKS", 26, 9);
      000BBB 11 1A 09         [10] 2966 	ld	de, #0x091a
      000BBE D5               [11] 2967 	push	de
      000BBF 21rF6r0B         [10] 2968 	ld	hl, #___str_3
      000BC2 E5               [11] 2969 	push	hl
      000BC3 CDrA8r07         [17] 2970 	call	_DrawString
      000BC6 F1               [10] 2971 	pop	af
      000BC7 F1               [10] 2972 	pop	af
                                   2973 ;src\/Graphics.h:142: DrawNumber(blocksRemoved, 26, 10);
      000BC8 11 1A 0A         [10] 2974 	ld	de, #0x0a1a
      000BCB D5               [11] 2975 	push	de
      000BCC 2Ar04r00         [16] 2976 	ld	hl, (_blocksRemoved)
      000BCF E5               [11] 2977 	push	hl
      000BD0 CDrDAr07         [17] 2978 	call	_DrawNumber
      000BD3 F1               [10] 2979 	pop	af
      000BD4 F1               [10] 2980 	pop	af
                                   2981 ;src\/Graphics.h:143: DrawNumber(level, 26, 5);
      000BD5 3Ar06r00         [13] 2982 	ld	a, (#_level + 0)
      000BD8 4F               [ 4] 2983 	ld	c, a
      000BD9 06 00            [ 7] 2984 	ld	b, #0x00
      000BDB 11 1A 05         [10] 2985 	ld	de, #0x051a
      000BDE D5               [11] 2986 	push	de
      000BDF C5               [11] 2987 	push	bc
      000BE0 CDrDAr07         [17] 2988 	call	_DrawNumber
                                   2989 ;src\/Graphics.h:145: }
      000BE3 DD F9            [10] 2990 	ld	sp,ix
      000BE5 DD E1            [14] 2991 	pop	ix
      000BE7 C9               [10] 2992 	ret
      000BE8                       2993 ___str_1:
      000BE8 20 4C 45 56 45 4C     2994 	.ascii " LEVEL"
      000BEE 00                    2995 	.db 0x00
      000BEF                       2996 ___str_2:
      000BEF 20 20 20 20 20 20     2997 	.ascii "      "
      000BF5 00                    2998 	.db 0x00
      000BF6                       2999 ___str_3:
      000BF6 42 4C 4F 43 4B 53     3000 	.ascii "BLOCKS"
      000BFC 00                    3001 	.db 0x00
                                   3002 ;src\/Graphics.h:147: void DrawBackground() {
                                   3003 ;	---------------------------------
                                   3004 ; Function DrawBackground
                                   3005 ; ---------------------------------
      000BFD                       3006 _DrawBackground::
                                   3007 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000BFD 01 00 00         [10] 3008 	ld	bc, #0x0000
      000C00                       3009 00103$:
      000C00 78               [ 4] 3010 	ld	a, b
      000C01 EE 80            [ 7] 3011 	xor	a, #0x80
      000C03 D6 83            [ 7] 3012 	sub	a, #0x83
      000C05 30 14            [12] 3013 	jr	NC, 00101$
                                   3014 ;src\/Graphics.h:150: WRTVRM(MSX_modedata_screen2.name + i, 0); // test
      000C07 2A C7 F3         [16] 3015 	ld	hl, (#_MSX_modedata_screen2 + 0)
      000C0A 59               [ 4] 3016 	ld	e, c
      000C0B 50               [ 4] 3017 	ld	d, b
      000C0C 19               [11] 3018 	add	hl, de
      000C0D C5               [11] 3019 	push	bc
      000C0E AF               [ 4] 3020 	xor	a, a
      000C0F F5               [11] 3021 	push	af
      000C10 33               [ 6] 3022 	inc	sp
      000C11 E5               [11] 3023 	push	hl
      000C12 CDr00r00         [17] 3024 	call	_WRTVRM
      000C15 F1               [10] 3025 	pop	af
      000C16 33               [ 6] 3026 	inc	sp
      000C17 C1               [10] 3027 	pop	bc
                                   3028 ;src\/Graphics.h:149: for(int i = 0; i < 256 * 3; i++) {
      000C18 03               [ 6] 3029 	inc	bc
      000C19 18 E5            [12] 3030 	jr	00103$
      000C1B                       3031 00101$:
                                   3032 ;src\/Graphics.h:153: DrawColumn(7);
      000C1B 3E 07            [ 7] 3033 	ld	a, #0x07
      000C1D F5               [11] 3034 	push	af
      000C1E 33               [ 6] 3035 	inc	sp
      000C1F CDr95r08         [17] 3036 	call	_DrawColumn
      000C22 33               [ 6] 3037 	inc	sp
                                   3038 ;src\/Graphics.h:154: DrawColumn(22);
      000C23 3E 16            [ 7] 3039 	ld	a, #0x16
      000C25 F5               [11] 3040 	push	af
      000C26 33               [ 6] 3041 	inc	sp
      000C27 CDr95r08         [17] 3042 	call	_DrawColumn
      000C2A 33               [ 6] 3043 	inc	sp
                                   3044 ;src\/Graphics.h:156: DrawScore();
                                   3045 ;src\/Graphics.h:192: }
      000C2B C3r66r0A         [10] 3046 	jp	_DrawScore
                                   3047 ;src\/Graphics.h:194: void DrawArrow(byte x, byte y) {
                                   3048 ;	---------------------------------
                                   3049 ; Function DrawArrow
                                   3050 ; ---------------------------------
      000C2E                       3051 _DrawArrow::
      000C2E DD E5            [15] 3052 	push	ix
      000C30 DD 21 00 00      [14] 3053 	ld	ix,#0
      000C34 DD 39            [15] 3054 	add	ix,sp
      000C36 21 F8 FF         [10] 3055 	ld	hl, #-8
      000C39 39               [11] 3056 	add	hl, sp
      000C3A F9               [ 6] 3057 	ld	sp, hl
                                   3058 ;src\/Graphics.h:195: const byte colors[] = {
      000C3B 21 00 00         [10] 3059 	ld	hl, #0
      000C3E 39               [11] 3060 	add	hl, sp
      000C3F EB               [ 4] 3061 	ex	de, hl
      000C40 3E 0F            [ 7] 3062 	ld	a, #0x0f
      000C42 12               [ 7] 3063 	ld	(de), a
      000C43 6B               [ 4] 3064 	ld	l, e
      000C44 62               [ 4] 3065 	ld	h, d
      000C45 23               [ 6] 3066 	inc	hl
      000C46 36 0E            [10] 3067 	ld	(hl), #0x0e
      000C48 6B               [ 4] 3068 	ld	l, e
      000C49 62               [ 4] 3069 	ld	h, d
      000C4A 23               [ 6] 3070 	inc	hl
      000C4B 23               [ 6] 3071 	inc	hl
      000C4C 36 05            [10] 3072 	ld	(hl), #0x05
      000C4E 6B               [ 4] 3073 	ld	l, e
      000C4F 62               [ 4] 3074 	ld	h, d
      000C50 23               [ 6] 3075 	inc	hl
      000C51 23               [ 6] 3076 	inc	hl
      000C52 23               [ 6] 3077 	inc	hl
      000C53 36 04            [10] 3078 	ld	(hl), #0x04
      000C55 21 04 00         [10] 3079 	ld	hl, #0x0004
      000C58 19               [11] 3080 	add	hl, de
      000C59 36 04            [10] 3081 	ld	(hl), #0x04
      000C5B 21 05 00         [10] 3082 	ld	hl, #0x0005
      000C5E 19               [11] 3083 	add	hl, de
      000C5F 36 05            [10] 3084 	ld	(hl), #0x05
      000C61 21 06 00         [10] 3085 	ld	hl, #0x0006
      000C64 19               [11] 3086 	add	hl, de
      000C65 36 0E            [10] 3087 	ld	(hl), #0x0e
      000C67 21 07 00         [10] 3088 	ld	hl, #0x0007
      000C6A 19               [11] 3089 	add	hl, de
      000C6B 36 0F            [10] 3090 	ld	(hl), #0x0f
                                   3091 ;src\/Graphics.h:206: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      000C6D 2A 9E FC         [16] 3092 	ld	hl, (_JIFFY)
      000C70 7D               [ 4] 3093 	ld	a, l
      000C71 E6 0E            [ 7] 3094 	and	a, #0x0e
      000C73 4F               [ 4] 3095 	ld	c, a
      000C74 06 00            [ 7] 3096 	ld	b, #0x00
      000C76 CB 38            [ 8] 3097 	srl	b
      000C78 CB 19            [ 8] 3098 	rr	c
                                   3099 ;src\/Graphics.h:213: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	y - 1);
      000C7A DD 46 05         [19] 3100 	ld	b, 5 (ix)
      000C7D 05               [ 4] 3101 	dec	b
      000C7E 2A CD F3         [16] 3102 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000C81 C5               [11] 3103 	push	bc
      000C82 D5               [11] 3104 	push	de
      000C83 C5               [11] 3105 	push	bc
      000C84 33               [ 6] 3106 	inc	sp
      000C85 E5               [11] 3107 	push	hl
      000C86 CDr00r00         [17] 3108 	call	_WRTVRM
      000C89 F1               [10] 3109 	pop	af
      000C8A 33               [ 6] 3110 	inc	sp
      000C8B D1               [10] 3111 	pop	de
      000C8C C1               [10] 3112 	pop	bc
                                   3113 ;src\/Graphics.h:214: WRTVRM(MSX_modedata_screen2.sprite_attribute + 1, 	x);
      000C8D 2A CD F3         [16] 3114 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000C90 23               [ 6] 3115 	inc	hl
      000C91 C5               [11] 3116 	push	bc
      000C92 D5               [11] 3117 	push	de
      000C93 DD 7E 04         [19] 3118 	ld	a, 4 (ix)
      000C96 F5               [11] 3119 	push	af
      000C97 33               [ 6] 3120 	inc	sp
      000C98 E5               [11] 3121 	push	hl
      000C99 CDr00r00         [17] 3122 	call	_WRTVRM
      000C9C F1               [10] 3123 	pop	af
      000C9D 33               [ 6] 3124 	inc	sp
      000C9E D1               [10] 3125 	pop	de
      000C9F C1               [10] 3126 	pop	bc
                                   3127 ;src\/Graphics.h:215: WRTVRM(MSX_modedata_screen2.sprite_attribute + 2, 	SPRITE_PATTERN_DOWN_ARROW);
      000CA0 2A CD F3         [16] 3128 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CA3 23               [ 6] 3129 	inc	hl
      000CA4 23               [ 6] 3130 	inc	hl
      000CA5 C5               [11] 3131 	push	bc
      000CA6 D5               [11] 3132 	push	de
      000CA7 AF               [ 4] 3133 	xor	a, a
      000CA8 F5               [11] 3134 	push	af
      000CA9 33               [ 6] 3135 	inc	sp
      000CAA E5               [11] 3136 	push	hl
      000CAB CDr00r00         [17] 3137 	call	_WRTVRM
      000CAE F1               [10] 3138 	pop	af
      000CAF 33               [ 6] 3139 	inc	sp
      000CB0 D1               [10] 3140 	pop	de
      000CB1 C1               [10] 3141 	pop	bc
                                   3142 ;src\/Graphics.h:216: WRTVRM(MSX_modedata_screen2.sprite_attribute + 3, 	colors[colorIndex]);
      000CB2 69               [ 4] 3143 	ld	l, c
      000CB3 26 00            [ 7] 3144 	ld	h, #0x00
      000CB5 19               [11] 3145 	add	hl, de
      000CB6 4E               [ 7] 3146 	ld	c, (hl)
      000CB7 2A CD F3         [16] 3147 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CBA 23               [ 6] 3148 	inc	hl
      000CBB 23               [ 6] 3149 	inc	hl
      000CBC 23               [ 6] 3150 	inc	hl
      000CBD 79               [ 4] 3151 	ld	a, c
      000CBE F5               [11] 3152 	push	af
      000CBF 33               [ 6] 3153 	inc	sp
      000CC0 E5               [11] 3154 	push	hl
      000CC1 CDr00r00         [17] 3155 	call	_WRTVRM
                                   3156 ;src\/Graphics.h:225: }
      000CC4 DD F9            [10] 3157 	ld	sp,ix
      000CC6 DD E1            [14] 3158 	pop	ix
      000CC8 C9               [10] 3159 	ret
                                   3160 ;src\/Graphics.h:227: void HideArrow() {
                                   3161 ;	---------------------------------
                                   3162 ; Function HideArrow
                                   3163 ; ---------------------------------
      000CC9                       3164 _HideArrow::
                                   3165 ;src\/Graphics.h:228: WRTVRM(MSX_modedata_screen2.sprite_attribute, 	192);
      000CC9 2A CD F3         [16] 3166 	ld	hl, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000CCC 3E C0            [ 7] 3167 	ld	a, #0xc0
      000CCE F5               [11] 3168 	push	af
      000CCF 33               [ 6] 3169 	inc	sp
      000CD0 E5               [11] 3170 	push	hl
      000CD1 CDr00r00         [17] 3171 	call	_WRTVRM
      000CD4 F1               [10] 3172 	pop	af
      000CD5 33               [ 6] 3173 	inc	sp
                                   3174 ;src\/Graphics.h:230: }
      000CD6 C9               [10] 3175 	ret
                                   3176 ;src\/Graphics.h:235: void InitVRAM() {
                                   3177 ;	---------------------------------
                                   3178 ; Function InitVRAM
                                   3179 ; ---------------------------------
      000CD7                       3180 _InitVRAM::
                                   3181 ;src\/Graphics.h:240: CLIKSW = 0;	// disable keyboard sound
      000CD7 21 00 00         [10] 3182 	ld	hl, #0x0000
      000CDA 22 DB F3         [16] 3183 	ld	(_CLIKSW), hl
                                   3184 ;src\/Graphics.h:241: SCNCNT = 1; 	// set keyboard scan counter
      000CDD 21 F6 F3         [10] 3185 	ld	hl, #_SCNCNT
      000CE0 36 01            [10] 3186 	ld	(hl), #0x01
                                   3187 ;src\/Graphics.h:243: FORCLR = COLOR_WHITE;
      000CE2 21 E9 F3         [10] 3188 	ld	hl, #_FORCLR
      000CE5 36 0F            [10] 3189 	ld	(hl), #0x0f
                                   3190 ;src\/Graphics.h:244: BAKCLR = COLOR_BLACK;
      000CE7 21 EA F3         [10] 3191 	ld	hl, #_BAKCLR
      000CEA 36 01            [10] 3192 	ld	(hl), #0x01
                                   3193 ;src\/Graphics.h:245: BDRCLR = COLOR_BLACK;
      000CEC 21 EB F3         [10] 3194 	ld	hl, #_BDRCLR
      000CEF 36 01            [10] 3195 	ld	(hl), #0x01
                                   3196 ;src\/Graphics.h:273: WRTVDP(0b0000000111100010);
      000CF1 21 E2 01         [10] 3197 	ld	hl, #0x01e2
      000CF4 CDr00r00         [17] 3198 	call	_WRTVDP
                                   3199 ;src\/Graphics.h:275: INIGRP();	// Set screen 2
      000CF7 CDr00r00         [17] 3200 	call	_INIGRP
                                   3201 ;src\/Graphics.h:277: DISSCR();	// Disable screen (faster to write)
      000CFA CDr00r00         [17] 3202 	call	_DISSCR
                                   3203 ;src\/Graphics.h:281: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      000CFD AF               [ 4] 3204 	xor	a, a
      000CFE F5               [11] 3205 	push	af
      000CFF 33               [ 6] 3206 	inc	sp
      000D00 21 00 40         [10] 3207 	ld	hl, #0x4000
      000D03 E5               [11] 3208 	push	hl
      000D04 65               [ 4] 3209 	ld	h, l
      000D05 E5               [11] 3210 	push	hl
      000D06 CDr00r00         [17] 3211 	call	_FILVRM
      000D09 F1               [10] 3212 	pop	af
      000D0A F1               [10] 3213 	pop	af
      000D0B 33               [ 6] 3214 	inc	sp
                                   3215 ;src\/Graphics.h:290: LDIRVM(MSX_modedata_screen2.sprite_pattern, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      000D0C 01r48r07         [10] 3216 	ld	bc, #_sprite_arrow_0+0
      000D0F 2A CF F3         [16] 3217 	ld	hl, (#(_MSX_modedata_screen2 + 0x0008) + 0)
      000D12 11 40 00         [10] 3218 	ld	de, #0x0040
      000D15 D5               [11] 3219 	push	de
      000D16 C5               [11] 3220 	push	bc
      000D17 E5               [11] 3221 	push	hl
      000D18 CDr00r00         [17] 3222 	call	_LDIRVM
      000D1B 21 06 00         [10] 3223 	ld	hl, #6
      000D1E 39               [11] 3224 	add	hl, sp
      000D1F F9               [ 6] 3225 	ld	sp, hl
                                   3226 ;src\/Graphics.h:296: for(byte i=0; i<32; i++) {
      000D20 0E 00            [ 7] 3227 	ld	c, #0x00
      000D22                       3228 00110$:
      000D22 79               [ 4] 3229 	ld	a, c
      000D23 D6 20            [ 7] 3230 	sub	a, #0x20
      000D25 30 1A            [12] 3231 	jr	NC, 00101$
                                   3232 ;src\/Graphics.h:297: WRTVRM(MSX_modedata_screen2.sprite_attribute + (i * 4), 	192);
      000D27 ED 5B CD F3      [20] 3233 	ld	de, (#(_MSX_modedata_screen2 + 0x0006) + 0)
      000D2B 79               [ 4] 3234 	ld	a, c
      000D2C 26 00            [ 7] 3235 	ld	h, #0x00
      000D2E 6F               [ 4] 3236 	ld	l, a
      000D2F 29               [11] 3237 	add	hl, hl
      000D30 29               [11] 3238 	add	hl, hl
      000D31 19               [11] 3239 	add	hl, de
      000D32 C5               [11] 3240 	push	bc
      000D33 3E C0            [ 7] 3241 	ld	a, #0xc0
      000D35 F5               [11] 3242 	push	af
      000D36 33               [ 6] 3243 	inc	sp
      000D37 E5               [11] 3244 	push	hl
      000D38 CDr00r00         [17] 3245 	call	_WRTVRM
      000D3B F1               [10] 3246 	pop	af
      000D3C 33               [ 6] 3247 	inc	sp
      000D3D C1               [10] 3248 	pop	bc
                                   3249 ;src\/Graphics.h:296: for(byte i=0; i<32; i++) {
      000D3E 0C               [ 4] 3250 	inc	c
      000D3F 18 E1            [12] 3251 	jr	00110$
      000D41                       3252 00101$:
                                   3253 ;src\/Graphics.h:306: LDIRVM(MSX_modedata_screen2.pattern, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000D41 01r18r04         [10] 3254 	ld	bc, #_pattern_black_0
      000D44 2A CB F3         [16] 3255 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000D47 11 78 01         [10] 3256 	ld	de, #0x0178
      000D4A D5               [11] 3257 	push	de
      000D4B C5               [11] 3258 	push	bc
      000D4C E5               [11] 3259 	push	hl
      000D4D CDr00r00         [17] 3260 	call	_LDIRVM
      000D50 21 06 00         [10] 3261 	ld	hl, #6
      000D53 39               [11] 3262 	add	hl, sp
      000D54 F9               [ 6] 3263 	ld	sp, hl
                                   3264 ;src\/Graphics.h:309: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000D55 01r18r04         [10] 3265 	ld	bc, #_pattern_black_0
      000D58 2A CB F3         [16] 3266 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000D5B 7C               [ 4] 3267 	ld	a, h
      000D5C C6 08            [ 7] 3268 	add	a, #0x08
      000D5E 67               [ 4] 3269 	ld	h, a
      000D5F 11 78 01         [10] 3270 	ld	de, #0x0178
      000D62 D5               [11] 3271 	push	de
      000D63 C5               [11] 3272 	push	bc
      000D64 E5               [11] 3273 	push	hl
      000D65 CDr00r00         [17] 3274 	call	_LDIRVM
      000D68 21 06 00         [10] 3275 	ld	hl, #6
      000D6B 39               [11] 3276 	add	hl, sp
      000D6C F9               [ 6] 3277 	ld	sp, hl
                                   3278 ;src\/Graphics.h:312: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000D6D 01r18r04         [10] 3279 	ld	bc, #_pattern_black_0
      000D70 2A CB F3         [16] 3280 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000D73 7C               [ 4] 3281 	ld	a, h
      000D74 C6 10            [ 7] 3282 	add	a, #0x10
      000D76 67               [ 4] 3283 	ld	h, a
      000D77 11 78 01         [10] 3284 	ld	de, #0x0178
      000D7A D5               [11] 3285 	push	de
      000D7B C5               [11] 3286 	push	bc
      000D7C E5               [11] 3287 	push	hl
      000D7D CDr00r00         [17] 3288 	call	_LDIRVM
      000D80 21 06 00         [10] 3289 	ld	hl, #6
      000D83 39               [11] 3290 	add	hl, sp
      000D84 F9               [ 6] 3291 	ld	sp, hl
                                   3292 ;src\/Graphics.h:315: LDIRVM(MSX_modedata_screen2.pattern + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000D85 01r18r01         [10] 3293 	ld	bc, #_FONT
      000D88 2A CB F3         [16] 3294 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000D8B 11 78 01         [10] 3295 	ld	de, #0x0178
      000D8E 19               [11] 3296 	add	hl, de
      000D8F 11 00 03         [10] 3297 	ld	de, #0x0300
      000D92 D5               [11] 3298 	push	de
      000D93 C5               [11] 3299 	push	bc
      000D94 E5               [11] 3300 	push	hl
      000D95 CDr00r00         [17] 3301 	call	_LDIRVM
      000D98 21 06 00         [10] 3302 	ld	hl, #6
      000D9B 39               [11] 3303 	add	hl, sp
      000D9C F9               [ 6] 3304 	ld	sp, hl
                                   3305 ;src\/Graphics.h:318: LDIRVM(MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000D9D 01r18r01         [10] 3306 	ld	bc, #_FONT
      000DA0 2A CB F3         [16] 3307 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000DA3 11 78 09         [10] 3308 	ld	de, #0x0978
      000DA6 19               [11] 3309 	add	hl, de
      000DA7 11 00 03         [10] 3310 	ld	de, #0x0300
      000DAA D5               [11] 3311 	push	de
      000DAB C5               [11] 3312 	push	bc
      000DAC E5               [11] 3313 	push	hl
      000DAD CDr00r00         [17] 3314 	call	_LDIRVM
      000DB0 21 06 00         [10] 3315 	ld	hl, #6
      000DB3 39               [11] 3316 	add	hl, sp
      000DB4 F9               [ 6] 3317 	ld	sp, hl
                                   3318 ;src\/Graphics.h:321: LDIRVM(MSX_modedata_screen2.pattern + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      000DB5 01r18r01         [10] 3319 	ld	bc, #_FONT
      000DB8 2A CB F3         [16] 3320 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000DBB 11 78 11         [10] 3321 	ld	de, #0x1178
      000DBE 19               [11] 3322 	add	hl, de
      000DBF 11 00 03         [10] 3323 	ld	de, #0x0300
      000DC2 D5               [11] 3324 	push	de
      000DC3 C5               [11] 3325 	push	bc
      000DC4 E5               [11] 3326 	push	hl
      000DC5 CDr00r00         [17] 3327 	call	_LDIRVM
      000DC8 21 06 00         [10] 3328 	ld	hl, #6
      000DCB 39               [11] 3329 	add	hl, sp
      000DCC F9               [ 6] 3330 	ld	sp, hl
                                   3331 ;src\/Graphics.h:325: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000DCD 0E 00            [ 7] 3332 	ld	c, #0x00
      000DCF                       3333 00113$:
      000DCF 79               [ 4] 3334 	ld	a, c
      000DD0 D6 07            [ 7] 3335 	sub	a, #0x07
      000DD2 30 27            [12] 3336 	jr	NC, 00102$
                                   3337 ;src\/Graphics.h:326: LDIRVM(MSX_modedata_screen2.pattern + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      000DD4 ED 5B CB F3      [20] 3338 	ld	de, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      000DD8 21 70 04         [10] 3339 	ld	hl, #0x0470
      000DDB 19               [11] 3340 	add	hl, de
      000DDC EB               [ 4] 3341 	ex	de, hl
      000DDD 79               [ 4] 3342 	ld	a, c
      000DDE 26 00            [ 7] 3343 	ld	h, #0x00
      000DE0 6F               [ 4] 3344 	ld	l, a
      000DE1 29               [11] 3345 	add	hl, hl
      000DE2 29               [11] 3346 	add	hl, hl
      000DE3 29               [11] 3347 	add	hl, hl
      000DE4 19               [11] 3348 	add	hl, de
      000DE5 C5               [11] 3349 	push	bc
      000DE6 11 38 00         [10] 3350 	ld	de, #0x0038
      000DE9 D5               [11] 3351 	push	de
      000DEA 11r88r05         [10] 3352 	ld	de, #_pattern_title
      000DED D5               [11] 3353 	push	de
      000DEE E5               [11] 3354 	push	hl
      000DEF CDr00r00         [17] 3355 	call	_LDIRVM
      000DF2 21 06 00         [10] 3356 	ld	hl, #6
      000DF5 39               [11] 3357 	add	hl, sp
      000DF6 F9               [ 6] 3358 	ld	sp, hl
      000DF7 C1               [10] 3359 	pop	bc
                                   3360 ;src\/Graphics.h:325: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      000DF8 0C               [ 4] 3361 	inc	c
      000DF9 18 D4            [12] 3362 	jr	00113$
      000DFB                       3363 00102$:
                                   3364 ;src\/Graphics.h:336: LDIRVM(MSX_modedata_screen2.color, color_black_0, NUMBER_OF_PATTERNS * 8);
      000DFB 01r90r05         [10] 3365 	ld	bc, #_color_black_0
      000DFE 2A C9 F3         [16] 3366 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000E01 11 78 01         [10] 3367 	ld	de, #0x0178
      000E04 D5               [11] 3368 	push	de
      000E05 C5               [11] 3369 	push	bc
      000E06 E5               [11] 3370 	push	hl
      000E07 CDr00r00         [17] 3371 	call	_LDIRVM
      000E0A 21 06 00         [10] 3372 	ld	hl, #6
      000E0D 39               [11] 3373 	add	hl, sp
      000E0E F9               [ 6] 3374 	ld	sp, hl
                                   3375 ;src\/Graphics.h:338: LDIRVM(MSX_modedata_screen2.color + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000E0F 01r90r05         [10] 3376 	ld	bc, #_color_black_0
      000E12 2A C9 F3         [16] 3377 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000E15 7C               [ 4] 3378 	ld	a, h
      000E16 C6 08            [ 7] 3379 	add	a, #0x08
      000E18 67               [ 4] 3380 	ld	h, a
      000E19 11 78 01         [10] 3381 	ld	de, #0x0178
      000E1C D5               [11] 3382 	push	de
      000E1D C5               [11] 3383 	push	bc
      000E1E E5               [11] 3384 	push	hl
      000E1F CDr00r00         [17] 3385 	call	_LDIRVM
      000E22 21 06 00         [10] 3386 	ld	hl, #6
      000E25 39               [11] 3387 	add	hl, sp
      000E26 F9               [ 6] 3388 	ld	sp, hl
                                   3389 ;src\/Graphics.h:340: LDIRVM(MSX_modedata_screen2.color + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      000E27 01r90r05         [10] 3390 	ld	bc, #_color_black_0
      000E2A 2A C9 F3         [16] 3391 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000E2D 7C               [ 4] 3392 	ld	a, h
      000E2E C6 10            [ 7] 3393 	add	a, #0x10
      000E30 67               [ 4] 3394 	ld	h, a
      000E31 11 78 01         [10] 3395 	ld	de, #0x0178
      000E34 D5               [11] 3396 	push	de
      000E35 C5               [11] 3397 	push	bc
      000E36 E5               [11] 3398 	push	hl
      000E37 CDr00r00         [17] 3399 	call	_LDIRVM
      000E3A 21 06 00         [10] 3400 	ld	hl, #6
      000E3D 39               [11] 3401 	add	hl, sp
      000E3E F9               [ 6] 3402 	ld	sp, hl
                                   3403 ;src\/Graphics.h:347: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000E3F 0E 00            [ 7] 3404 	ld	c, #0x00
      000E41                       3405 00116$:
      000E41 79               [ 4] 3406 	ld	a, c
      000E42 D6 60            [ 7] 3407 	sub	a, #0x60
      000E44 30 27            [12] 3408 	jr	NC, 00103$
                                   3409 ;src\/Graphics.h:348: LDIRVM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000E46 ED 5B C9 F3      [20] 3410 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000E4A 21 78 01         [10] 3411 	ld	hl, #0x0178
      000E4D 19               [11] 3412 	add	hl, de
      000E4E EB               [ 4] 3413 	ex	de, hl
      000E4F 79               [ 4] 3414 	ld	a, c
      000E50 26 00            [ 7] 3415 	ld	h, #0x00
      000E52 6F               [ 4] 3416 	ld	l, a
      000E53 29               [11] 3417 	add	hl, hl
      000E54 29               [11] 3418 	add	hl, hl
      000E55 29               [11] 3419 	add	hl, hl
      000E56 19               [11] 3420 	add	hl, de
      000E57 C5               [11] 3421 	push	bc
      000E58 11 08 00         [10] 3422 	ld	de, #0x0008
      000E5B D5               [11] 3423 	push	de
      000E5C 11r08r07         [10] 3424 	ld	de, #_color_font_2
      000E5F D5               [11] 3425 	push	de
      000E60 E5               [11] 3426 	push	hl
      000E61 CDr00r00         [17] 3427 	call	_LDIRVM
      000E64 21 06 00         [10] 3428 	ld	hl, #6
      000E67 39               [11] 3429 	add	hl, sp
      000E68 F9               [ 6] 3430 	ld	sp, hl
      000E69 C1               [10] 3431 	pop	bc
                                   3432 ;src\/Graphics.h:347: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000E6A 0C               [ 4] 3433 	inc	c
      000E6B 18 D4            [12] 3434 	jr	00116$
      000E6D                       3435 00103$:
                                   3436 ;src\/Graphics.h:351: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000E6D 0E 00            [ 7] 3437 	ld	c, #0x00
      000E6F                       3438 00119$:
      000E6F 79               [ 4] 3439 	ld	a, c
      000E70 D6 60            [ 7] 3440 	sub	a, #0x60
      000E72 30 27            [12] 3441 	jr	NC, 00104$
                                   3442 ;src\/Graphics.h:352: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000E74 ED 5B C9 F3      [20] 3443 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000E78 21 78 09         [10] 3444 	ld	hl, #0x0978
      000E7B 19               [11] 3445 	add	hl, de
      000E7C EB               [ 4] 3446 	ex	de, hl
      000E7D 79               [ 4] 3447 	ld	a, c
      000E7E 26 00            [ 7] 3448 	ld	h, #0x00
      000E80 6F               [ 4] 3449 	ld	l, a
      000E81 29               [11] 3450 	add	hl, hl
      000E82 29               [11] 3451 	add	hl, hl
      000E83 29               [11] 3452 	add	hl, hl
      000E84 19               [11] 3453 	add	hl, de
      000E85 C5               [11] 3454 	push	bc
      000E86 11 08 00         [10] 3455 	ld	de, #0x0008
      000E89 D5               [11] 3456 	push	de
      000E8A 11r08r07         [10] 3457 	ld	de, #_color_font_2
      000E8D D5               [11] 3458 	push	de
      000E8E E5               [11] 3459 	push	hl
      000E8F CDr00r00         [17] 3460 	call	_LDIRVM
      000E92 21 06 00         [10] 3461 	ld	hl, #6
      000E95 39               [11] 3462 	add	hl, sp
      000E96 F9               [ 6] 3463 	ld	sp, hl
      000E97 C1               [10] 3464 	pop	bc
                                   3465 ;src\/Graphics.h:351: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000E98 0C               [ 4] 3466 	inc	c
      000E99 18 D4            [12] 3467 	jr	00119$
      000E9B                       3468 00104$:
                                   3469 ;src\/Graphics.h:355: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000E9B 0E 00            [ 7] 3470 	ld	c, #0x00
      000E9D                       3471 00122$:
      000E9D 79               [ 4] 3472 	ld	a, c
      000E9E D6 60            [ 7] 3473 	sub	a, #0x60
      000EA0 30 27            [12] 3474 	jr	NC, 00105$
                                   3475 ;src\/Graphics.h:356: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      000EA2 ED 5B C9 F3      [20] 3476 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000EA6 21 78 11         [10] 3477 	ld	hl, #0x1178
      000EA9 19               [11] 3478 	add	hl, de
      000EAA EB               [ 4] 3479 	ex	de, hl
      000EAB 79               [ 4] 3480 	ld	a, c
      000EAC 26 00            [ 7] 3481 	ld	h, #0x00
      000EAE 6F               [ 4] 3482 	ld	l, a
      000EAF 29               [11] 3483 	add	hl, hl
      000EB0 29               [11] 3484 	add	hl, hl
      000EB1 29               [11] 3485 	add	hl, hl
      000EB2 19               [11] 3486 	add	hl, de
      000EB3 C5               [11] 3487 	push	bc
      000EB4 11 08 00         [10] 3488 	ld	de, #0x0008
      000EB7 D5               [11] 3489 	push	de
      000EB8 11r08r07         [10] 3490 	ld	de, #_color_font_2
      000EBB D5               [11] 3491 	push	de
      000EBC E5               [11] 3492 	push	hl
      000EBD CDr00r00         [17] 3493 	call	_LDIRVM
      000EC0 21 06 00         [10] 3494 	ld	hl, #6
      000EC3 39               [11] 3495 	add	hl, sp
      000EC4 F9               [ 6] 3496 	ld	sp, hl
      000EC5 C1               [10] 3497 	pop	bc
                                   3498 ;src\/Graphics.h:355: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      000EC6 0C               [ 4] 3499 	inc	c
      000EC7 18 D4            [12] 3500 	jr	00122$
      000EC9                       3501 00105$:
                                   3502 ;src\/Graphics.h:364: for(byte i = 0; i < 10; i++) {
      000EC9 0E 00            [ 7] 3503 	ld	c, #0x00
      000ECB                       3504 00125$:
      000ECB 79               [ 4] 3505 	ld	a, c
      000ECC D6 0A            [ 7] 3506 	sub	a, #0x0a
      000ECE 30 27            [12] 3507 	jr	NC, 00106$
                                   3508 ;src\/Graphics.h:365: LDIRVM(MSX_modedata_screen2.color + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000ED0 ED 5B C9 F3      [20] 3509 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000ED4 21 F8 01         [10] 3510 	ld	hl, #0x01f8
      000ED7 19               [11] 3511 	add	hl, de
      000ED8 EB               [ 4] 3512 	ex	de, hl
      000ED9 79               [ 4] 3513 	ld	a, c
      000EDA 26 00            [ 7] 3514 	ld	h, #0x00
      000EDC 6F               [ 4] 3515 	ld	l, a
      000EDD 29               [11] 3516 	add	hl, hl
      000EDE 29               [11] 3517 	add	hl, hl
      000EDF 29               [11] 3518 	add	hl, hl
      000EE0 19               [11] 3519 	add	hl, de
      000EE1 C5               [11] 3520 	push	bc
      000EE2 11 08 00         [10] 3521 	ld	de, #0x0008
      000EE5 D5               [11] 3522 	push	de
      000EE6 11r00r07         [10] 3523 	ld	de, #_color_font_1
      000EE9 D5               [11] 3524 	push	de
      000EEA E5               [11] 3525 	push	hl
      000EEB CDr00r00         [17] 3526 	call	_LDIRVM
      000EEE 21 06 00         [10] 3527 	ld	hl, #6
      000EF1 39               [11] 3528 	add	hl, sp
      000EF2 F9               [ 6] 3529 	ld	sp, hl
      000EF3 C1               [10] 3530 	pop	bc
                                   3531 ;src\/Graphics.h:364: for(byte i = 0; i < 10; i++) {
      000EF4 0C               [ 4] 3532 	inc	c
      000EF5 18 D4            [12] 3533 	jr	00125$
      000EF7                       3534 00106$:
                                   3535 ;src\/Graphics.h:368: for(byte i = 0; i < 10; i++) {
      000EF7 0E 00            [ 7] 3536 	ld	c, #0x00
      000EF9                       3537 00128$:
      000EF9 79               [ 4] 3538 	ld	a, c
      000EFA D6 0A            [ 7] 3539 	sub	a, #0x0a
      000EFC 30 27            [12] 3540 	jr	NC, 00107$
                                   3541 ;src\/Graphics.h:369: LDIRVM(MSX_modedata_screen2.color + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000EFE ED 5B C9 F3      [20] 3542 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F02 21 F8 09         [10] 3543 	ld	hl, #0x09f8
      000F05 19               [11] 3544 	add	hl, de
      000F06 EB               [ 4] 3545 	ex	de, hl
      000F07 79               [ 4] 3546 	ld	a, c
      000F08 26 00            [ 7] 3547 	ld	h, #0x00
      000F0A 6F               [ 4] 3548 	ld	l, a
      000F0B 29               [11] 3549 	add	hl, hl
      000F0C 29               [11] 3550 	add	hl, hl
      000F0D 29               [11] 3551 	add	hl, hl
      000F0E 19               [11] 3552 	add	hl, de
      000F0F C5               [11] 3553 	push	bc
      000F10 11 08 00         [10] 3554 	ld	de, #0x0008
      000F13 D5               [11] 3555 	push	de
      000F14 11r00r07         [10] 3556 	ld	de, #_color_font_1
      000F17 D5               [11] 3557 	push	de
      000F18 E5               [11] 3558 	push	hl
      000F19 CDr00r00         [17] 3559 	call	_LDIRVM
      000F1C 21 06 00         [10] 3560 	ld	hl, #6
      000F1F 39               [11] 3561 	add	hl, sp
      000F20 F9               [ 6] 3562 	ld	sp, hl
      000F21 C1               [10] 3563 	pop	bc
                                   3564 ;src\/Graphics.h:368: for(byte i = 0; i < 10; i++) {
      000F22 0C               [ 4] 3565 	inc	c
      000F23 18 D4            [12] 3566 	jr	00128$
      000F25                       3567 00107$:
                                   3568 ;src\/Graphics.h:372: for(byte i = 0; i < 10; i++) {
      000F25 0E 00            [ 7] 3569 	ld	c, #0x00
      000F27                       3570 00131$:
      000F27 79               [ 4] 3571 	ld	a, c
      000F28 D6 0A            [ 7] 3572 	sub	a, #0x0a
      000F2A 30 26            [12] 3573 	jr	NC, 00108$
                                   3574 ;src\/Graphics.h:373: LDIRVM(MSX_modedata_screen2.color + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      000F2C ED 5B C9 F3      [20] 3575 	ld	de, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F30 21 F8 11         [10] 3576 	ld	hl, #0x11f8
      000F33 19               [11] 3577 	add	hl, de
      000F34 EB               [ 4] 3578 	ex	de, hl
      000F35 69               [ 4] 3579 	ld	l, c
      000F36 26 00            [ 7] 3580 	ld	h, #0x00
      000F38 29               [11] 3581 	add	hl, hl
      000F39 29               [11] 3582 	add	hl, hl
      000F3A 29               [11] 3583 	add	hl, hl
      000F3B 19               [11] 3584 	add	hl, de
      000F3C C5               [11] 3585 	push	bc
      000F3D 11 08 00         [10] 3586 	ld	de, #0x0008
      000F40 D5               [11] 3587 	push	de
      000F41 11r00r07         [10] 3588 	ld	de, #_color_font_1
      000F44 D5               [11] 3589 	push	de
      000F45 E5               [11] 3590 	push	hl
      000F46 CDr00r00         [17] 3591 	call	_LDIRVM
      000F49 21 06 00         [10] 3592 	ld	hl, #6
      000F4C 39               [11] 3593 	add	hl, sp
      000F4D F9               [ 6] 3594 	ld	sp, hl
      000F4E C1               [10] 3595 	pop	bc
                                   3596 ;src\/Graphics.h:372: for(byte i = 0; i < 10; i++) {
      000F4F 0C               [ 4] 3597 	inc	c
      000F50 18 D5            [12] 3598 	jr	00131$
      000F52                       3599 00108$:
                                   3600 ;src\/Graphics.h:377: LDIRVM(MSX_modedata_screen2.color + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      000F52 2A C9 F3         [16] 3601 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      000F55 01 70 04         [10] 3602 	ld	bc, #0x0470
      000F58 09               [11] 3603 	add	hl, bc
      000F59 11 38 00         [10] 3604 	ld	de, #0x0038
      000F5C D5               [11] 3605 	push	de
      000F5D 11r10r07         [10] 3606 	ld	de, #_color_title_1
      000F60 D5               [11] 3607 	push	de
      000F61 E5               [11] 3608 	push	hl
      000F62 CDr00r00         [17] 3609 	call	_LDIRVM
      000F65 21 06 00         [10] 3610 	ld	hl, #6
      000F68 39               [11] 3611 	add	hl, sp
      000F69 F9               [ 6] 3612 	ld	sp, hl
                                   3613 ;src\/Graphics.h:385: ENASCR();	// Enable screen
                                   3614 ;src\/Graphics.h:386: }
      000F6A C3r00r00         [10] 3615 	jp	_ENASCR
                                   3616 ;src\/Graphics.h:388: void DrawBlock(byte col, byte line, byte tile) {
                                   3617 ;	---------------------------------
                                   3618 ; Function DrawBlock
                                   3619 ; ---------------------------------
      000F6D                       3620 _DrawBlock::
      000F6D DD E5            [15] 3621 	push	ix
      000F6F DD 21 00 00      [14] 3622 	ld	ix,#0
      000F73 DD 39            [15] 3623 	add	ix,sp
                                   3624 ;src\/Graphics.h:390: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      000F75 ED 4B C7 F3      [20] 3625 	ld	bc, (#_MSX_modedata_screen2 + 0)
      000F79 DD 6E 04         [19] 3626 	ld	l, 4 (ix)
      000F7C 26 00            [ 7] 3627 	ld	h, #0x00
      000F7E 29               [11] 3628 	add	hl, hl
      000F7F 09               [11] 3629 	add	hl, bc
      000F80 EB               [ 4] 3630 	ex	de, hl
      000F81 DD 6E 05         [19] 3631 	ld	l, 5 (ix)
      000F84 26 00            [ 7] 3632 	ld	h, #0x00
      000F86 29               [11] 3633 	add	hl, hl
      000F87 29               [11] 3634 	add	hl, hl
      000F88 29               [11] 3635 	add	hl, hl
      000F89 29               [11] 3636 	add	hl, hl
      000F8A 29               [11] 3637 	add	hl, hl
      000F8B 29               [11] 3638 	add	hl, hl
      000F8C 19               [11] 3639 	add	hl, de
      000F8D EB               [ 4] 3640 	ex	de, hl
      000F8E 21 0A 00         [10] 3641 	ld	hl, #0x000a
      000F91 19               [11] 3642 	add	hl, de
      000F92 EB               [ 4] 3643 	ex	de, hl
                                   3644 ;src\/Graphics.h:392: WRTVRM(baseAddr, tile);
      000F93 D5               [11] 3645 	push	de
      000F94 DD 7E 06         [19] 3646 	ld	a, 6 (ix)
      000F97 F5               [11] 3647 	push	af
      000F98 33               [ 6] 3648 	inc	sp
      000F99 D5               [11] 3649 	push	de
      000F9A CDr00r00         [17] 3650 	call	_WRTVRM
      000F9D F1               [10] 3651 	pop	af
      000F9E 33               [ 6] 3652 	inc	sp
      000F9F D1               [10] 3653 	pop	de
                                   3654 ;src\/Graphics.h:393: WRTVRM(baseAddr + 1, tile + 1);
      000FA0 DD 4E 06         [19] 3655 	ld	c, 6 (ix)
      000FA3 79               [ 4] 3656 	ld	a, c
      000FA4 3C               [ 4] 3657 	inc	a
      000FA5 6B               [ 4] 3658 	ld	l, e
      000FA6 62               [ 4] 3659 	ld	h, d
      000FA7 23               [ 6] 3660 	inc	hl
      000FA8 C5               [11] 3661 	push	bc
      000FA9 D5               [11] 3662 	push	de
      000FAA F5               [11] 3663 	push	af
      000FAB 33               [ 6] 3664 	inc	sp
      000FAC E5               [11] 3665 	push	hl
      000FAD CDr00r00         [17] 3666 	call	_WRTVRM
      000FB0 F1               [10] 3667 	pop	af
      000FB1 33               [ 6] 3668 	inc	sp
      000FB2 D1               [10] 3669 	pop	de
      000FB3 C1               [10] 3670 	pop	bc
                                   3671 ;src\/Graphics.h:394: WRTVRM(baseAddr + 32, tile + 2);
      000FB4 41               [ 4] 3672 	ld	b, c
      000FB5 04               [ 4] 3673 	inc	b
      000FB6 04               [ 4] 3674 	inc	b
      000FB7 21 20 00         [10] 3675 	ld	hl, #0x0020
      000FBA 19               [11] 3676 	add	hl, de
      000FBB C5               [11] 3677 	push	bc
      000FBC D5               [11] 3678 	push	de
      000FBD C5               [11] 3679 	push	bc
      000FBE 33               [ 6] 3680 	inc	sp
      000FBF E5               [11] 3681 	push	hl
      000FC0 CDr00r00         [17] 3682 	call	_WRTVRM
      000FC3 F1               [10] 3683 	pop	af
      000FC4 33               [ 6] 3684 	inc	sp
      000FC5 D1               [10] 3685 	pop	de
      000FC6 C1               [10] 3686 	pop	bc
                                   3687 ;src\/Graphics.h:395: WRTVRM(baseAddr + 33, tile + 3);
      000FC7 0C               [ 4] 3688 	inc	c
      000FC8 0C               [ 4] 3689 	inc	c
      000FC9 0C               [ 4] 3690 	inc	c
      000FCA 21 21 00         [10] 3691 	ld	hl, #0x0021
      000FCD 19               [11] 3692 	add	hl, de
      000FCE 79               [ 4] 3693 	ld	a, c
      000FCF F5               [11] 3694 	push	af
      000FD0 33               [ 6] 3695 	inc	sp
      000FD1 E5               [11] 3696 	push	hl
      000FD2 CDr00r00         [17] 3697 	call	_WRTVRM
      000FD5 F1               [10] 3698 	pop	af
      000FD6 33               [ 6] 3699 	inc	sp
                                   3700 ;src\/Graphics.h:396: }
      000FD7 DD E1            [14] 3701 	pop	ix
      000FD9 C9               [10] 3702 	ret
                                   3703 ;src\/Graphics.h:398: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   3704 ;	---------------------------------
                                   3705 ; Function DrawBlock_SameTile
                                   3706 ; ---------------------------------
      000FDA                       3707 _DrawBlock_SameTile::
      000FDA DD E5            [15] 3708 	push	ix
      000FDC DD 21 00 00      [14] 3709 	ld	ix,#0
      000FE0 DD 39            [15] 3710 	add	ix,sp
                                   3711 ;src\/Graphics.h:400: word baseAddr = MSX_modedata_screen2.name + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      000FE2 ED 4B C7 F3      [20] 3712 	ld	bc, (#_MSX_modedata_screen2 + 0)
      000FE6 DD 6E 04         [19] 3713 	ld	l, 4 (ix)
      000FE9 26 00            [ 7] 3714 	ld	h, #0x00
      000FEB 29               [11] 3715 	add	hl, hl
      000FEC 09               [11] 3716 	add	hl, bc
      000FED EB               [ 4] 3717 	ex	de, hl
      000FEE DD 6E 05         [19] 3718 	ld	l, 5 (ix)
      000FF1 26 00            [ 7] 3719 	ld	h, #0x00
      000FF3 29               [11] 3720 	add	hl, hl
      000FF4 29               [11] 3721 	add	hl, hl
      000FF5 29               [11] 3722 	add	hl, hl
      000FF6 29               [11] 3723 	add	hl, hl
      000FF7 29               [11] 3724 	add	hl, hl
      000FF8 29               [11] 3725 	add	hl, hl
      000FF9 19               [11] 3726 	add	hl, de
      000FFA 01 0A 00         [10] 3727 	ld	bc, #0x000a
      000FFD 09               [11] 3728 	add	hl, bc
      000FFE 4D               [ 4] 3729 	ld	c, l
      000FFF 44               [ 4] 3730 	ld	b, h
                                   3731 ;src\/Graphics.h:402: WRTVRM(baseAddr, tile);
      001000 C5               [11] 3732 	push	bc
      001001 DD 7E 06         [19] 3733 	ld	a, 6 (ix)
      001004 F5               [11] 3734 	push	af
      001005 33               [ 6] 3735 	inc	sp
      001006 C5               [11] 3736 	push	bc
      001007 CDr00r00         [17] 3737 	call	_WRTVRM
      00100A F1               [10] 3738 	pop	af
      00100B 33               [ 6] 3739 	inc	sp
      00100C C1               [10] 3740 	pop	bc
                                   3741 ;src\/Graphics.h:403: WRTVRM(baseAddr + 1, tile);
      00100D 59               [ 4] 3742 	ld	e, c
      00100E 50               [ 4] 3743 	ld	d, b
      00100F 13               [ 6] 3744 	inc	de
      001010 C5               [11] 3745 	push	bc
      001011 DD 7E 06         [19] 3746 	ld	a, 6 (ix)
      001014 F5               [11] 3747 	push	af
      001015 33               [ 6] 3748 	inc	sp
      001016 D5               [11] 3749 	push	de
      001017 CDr00r00         [17] 3750 	call	_WRTVRM
      00101A F1               [10] 3751 	pop	af
      00101B 33               [ 6] 3752 	inc	sp
      00101C C1               [10] 3753 	pop	bc
                                   3754 ;src\/Graphics.h:404: WRTVRM(baseAddr + 32, tile);
      00101D 21 20 00         [10] 3755 	ld	hl, #0x0020
      001020 09               [11] 3756 	add	hl, bc
      001021 C5               [11] 3757 	push	bc
      001022 DD 7E 06         [19] 3758 	ld	a, 6 (ix)
      001025 F5               [11] 3759 	push	af
      001026 33               [ 6] 3760 	inc	sp
      001027 E5               [11] 3761 	push	hl
      001028 CDr00r00         [17] 3762 	call	_WRTVRM
      00102B F1               [10] 3763 	pop	af
      00102C 33               [ 6] 3764 	inc	sp
      00102D C1               [10] 3765 	pop	bc
                                   3766 ;src\/Graphics.h:405: WRTVRM(baseAddr + 33, tile);
      00102E 21 21 00         [10] 3767 	ld	hl, #0x0021
      001031 09               [11] 3768 	add	hl, bc
      001032 DD 7E 06         [19] 3769 	ld	a, 6 (ix)
      001035 F5               [11] 3770 	push	af
      001036 33               [ 6] 3771 	inc	sp
      001037 E5               [11] 3772 	push	hl
      001038 CDr00r00         [17] 3773 	call	_WRTVRM
      00103B F1               [10] 3774 	pop	af
      00103C 33               [ 6] 3775 	inc	sp
                                   3776 ;src\/Graphics.h:406: }
      00103D DD E1            [14] 3777 	pop	ix
      00103F C9               [10] 3778 	ret
                                   3779 ;src\/Graphics.h:408: void DrawLine(byte line) {
                                   3780 ;	---------------------------------
                                   3781 ; Function DrawLine
                                   3782 ; ---------------------------------
      001040                       3783 _DrawLine::
      001040 DD E5            [15] 3784 	push	ix
      001042 DD 21 00 00      [14] 3785 	ld	ix,#0
      001046 DD 39            [15] 3786 	add	ix,sp
                                   3787 ;src\/Graphics.h:409: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001048 DD 4E 04         [19] 3788 	ld	c, 4 (ix)
      00104B 06 00            [ 7] 3789 	ld	b, #0x00
      00104D                       3790 00103$:
      00104D 78               [ 4] 3791 	ld	a, b
      00104E D6 06            [ 7] 3792 	sub	a, #0x06
      001050 30 23            [12] 3793 	jr	NC, 00105$
                                   3794 ;src\/Graphics.h:410: DrawBlock(col, line, playfield[col][line]);
      001052 58               [ 4] 3795 	ld	e, b
      001053 16 00            [ 7] 3796 	ld	d, #0x00
      001055 6B               [ 4] 3797 	ld	l, e
      001056 62               [ 4] 3798 	ld	h, d
      001057 29               [11] 3799 	add	hl, hl
      001058 19               [11] 3800 	add	hl, de
      001059 29               [11] 3801 	add	hl, hl
      00105A 29               [11] 3802 	add	hl, hl
      00105B 11r00r00         [10] 3803 	ld	de, #_playfield
      00105E 19               [11] 3804 	add	hl, de
      00105F 59               [ 4] 3805 	ld	e, c
      001060 16 00            [ 7] 3806 	ld	d, #0x00
      001062 19               [11] 3807 	add	hl, de
      001063 7E               [ 7] 3808 	ld	a, (hl)
      001064 C5               [11] 3809 	push	bc
      001065 F5               [11] 3810 	push	af
      001066 33               [ 6] 3811 	inc	sp
      001067 79               [ 4] 3812 	ld	a, c
      001068 F5               [11] 3813 	push	af
      001069 33               [ 6] 3814 	inc	sp
      00106A C5               [11] 3815 	push	bc
      00106B 33               [ 6] 3816 	inc	sp
      00106C CDr6Dr0F         [17] 3817 	call	_DrawBlock
      00106F F1               [10] 3818 	pop	af
      001070 33               [ 6] 3819 	inc	sp
      001071 C1               [10] 3820 	pop	bc
                                   3821 ;src\/Graphics.h:409: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001072 04               [ 4] 3822 	inc	b
      001073 18 D8            [12] 3823 	jr	00103$
      001075                       3824 00105$:
                                   3825 ;src\/Graphics.h:412: }
      001075 DD E1            [14] 3826 	pop	ix
      001077 C9               [10] 3827 	ret
                                   3828 ;src\/Graphics.h:414: void DrawPiece(byte line) {
                                   3829 ;	---------------------------------
                                   3830 ; Function DrawPiece
                                   3831 ; ---------------------------------
      001078                       3832 _DrawPiece::
                                   3833 ;src\/Graphics.h:415: DrawLine(line);
      001078 21 02 00         [10] 3834 	ld	hl, #2
      00107B 39               [11] 3835 	add	hl, sp
      00107C 7E               [ 7] 3836 	ld	a, (hl)
      00107D F5               [11] 3837 	push	af
      00107E 33               [ 6] 3838 	inc	sp
      00107F CDr40r10         [17] 3839 	call	_DrawLine
      001082 33               [ 6] 3840 	inc	sp
                                   3841 ;src\/Graphics.h:416: DrawLine(line + 1);
      001083 21 02 00         [10] 3842 	ld	hl, #2
      001086 39               [11] 3843 	add	hl, sp
      001087 46               [ 7] 3844 	ld	b, (hl)
      001088 78               [ 4] 3845 	ld	a, b
      001089 3C               [ 4] 3846 	inc	a
      00108A C5               [11] 3847 	push	bc
      00108B F5               [11] 3848 	push	af
      00108C 33               [ 6] 3849 	inc	sp
      00108D CDr40r10         [17] 3850 	call	_DrawLine
      001090 33               [ 6] 3851 	inc	sp
      001091 C1               [10] 3852 	pop	bc
                                   3853 ;src\/Graphics.h:417: DrawLine(line + 2);
      001092 04               [ 4] 3854 	inc	b
      001093 04               [ 4] 3855 	inc	b
      001094 C5               [11] 3856 	push	bc
      001095 33               [ 6] 3857 	inc	sp
      001096 CDr40r10         [17] 3858 	call	_DrawLine
      001099 33               [ 6] 3859 	inc	sp
                                   3860 ;src\/Graphics.h:418: }
      00109A C9               [10] 3861 	ret
                                   3862 ;src\/Graphics.h:420: void DrawPlayfield() {
                                   3863 ;	---------------------------------
                                   3864 ; Function DrawPlayfield
                                   3865 ; ---------------------------------
      00109B                       3866 _DrawPlayfield::
                                   3867 ;src\/Graphics.h:421: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00109B 06 00            [ 7] 3868 	ld	b, #0x00
      00109D                       3869 00103$:
      00109D 78               [ 4] 3870 	ld	a, b
      00109E D6 0C            [ 7] 3871 	sub	a, #0x0c
      0010A0 D0               [11] 3872 	ret	NC
                                   3873 ;src\/Graphics.h:422: DrawLine(line);
      0010A1 C5               [11] 3874 	push	bc
      0010A2 C5               [11] 3875 	push	bc
      0010A3 33               [ 6] 3876 	inc	sp
      0010A4 CDr40r10         [17] 3877 	call	_DrawLine
      0010A7 33               [ 6] 3878 	inc	sp
      0010A8 C1               [10] 3879 	pop	bc
                                   3880 ;src\/Graphics.h:421: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0010A9 04               [ 4] 3881 	inc	b
                                   3882 ;src\/Graphics.h:424: }
      0010AA 18 F1            [12] 3883 	jr	00103$
                                   3884 ;src\/Sound.h:1: void SoundFx_2() {
                                   3885 ;	---------------------------------
                                   3886 ; Function SoundFx_2
                                   3887 ; ---------------------------------
      0010AC                       3888 _SoundFx_2::
                                   3889 ;src\/Sound.h:2: GICINI();
      0010AC CDr00r00         [17] 3890 	call	_GICINI
                                   3891 ;src\/Sound.h:17: WRTPSG(0x0f08);
      0010AF 21 08 0F         [10] 3892 	ld	hl, #0x0f08
      0010B2 CDr00r00         [17] 3893 	call	_WRTPSG
                                   3894 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0010B5 0E 00            [ 7] 3895 	ld	c, #0x00
      0010B7                       3896 00104$:
      0010B7 79               [ 4] 3897 	ld	a, c
      0010B8 D6 FF            [ 7] 3898 	sub	a, #0xff
      0010BA 30 11            [12] 3899 	jr	NC, 00101$
                                   3900 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0010BC C5               [11] 3901 	push	bc
      0010BD 21 00 5D         [10] 3902 	ld	hl, #0x5d00
      0010C0 CDr00r00         [17] 3903 	call	_WRTPSG
      0010C3 21 01 00         [10] 3904 	ld	hl, #0x0001
      0010C6 CDr00r00         [17] 3905 	call	_WRTPSG
      0010C9 C1               [10] 3906 	pop	bc
                                   3907 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0010CA 0C               [ 4] 3908 	inc	c
      0010CB 18 EA            [12] 3909 	jr	00104$
      0010CD                       3910 00101$:
                                   3911 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0010CD 0E 00            [ 7] 3912 	ld	c, #0x00
      0010CF                       3913 00107$:
      0010CF 79               [ 4] 3914 	ld	a, c
      0010D0 D6 FF            [ 7] 3915 	sub	a, #0xff
      0010D2 30 11            [12] 3916 	jr	NC, 00102$
                                   3917 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0010D4 C5               [11] 3918 	push	bc
      0010D5 21 00 2D         [10] 3919 	ld	hl, #0x2d00
      0010D8 CDr00r00         [17] 3920 	call	_WRTPSG
      0010DB 21 01 00         [10] 3921 	ld	hl, #0x0001
      0010DE CDr00r00         [17] 3922 	call	_WRTPSG
      0010E1 C1               [10] 3923 	pop	bc
                                   3924 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0010E2 0C               [ 4] 3925 	inc	c
      0010E3 18 EA            [12] 3926 	jr	00107$
      0010E5                       3927 00102$:
                                   3928 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0010E5 21 08 00         [10] 3929 	ld	hl, #0x0008
                                   3930 ;src\/Sound.h:30: }
      0010E8 C3r00r00         [10] 3931 	jp	_WRTPSG
                                   3932 ;src\/Sound.h:32: void SoundFx_1() {
                                   3933 ;	---------------------------------
                                   3934 ; Function SoundFx_1
                                   3935 ; ---------------------------------
      0010EB                       3936 _SoundFx_1::
                                   3937 ;src\/Sound.h:34: GICINI();
      0010EB CDr00r00         [17] 3938 	call	_GICINI
                                   3939 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0010EE 21 06 97         [10] 3940 	ld	hl, #0x9706
      0010F1 CDr00r00         [17] 3941 	call	_WRTPSG
                                   3942 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0010F4 21 07 81         [10] 3943 	ld	hl, #0x8107
      0010F7 CDr00r00         [17] 3944 	call	_WRTPSG
                                   3945 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0010FA 21 08 10         [10] 3946 	ld	hl, #0x1008
      0010FD CDr00r00         [17] 3947 	call	_WRTPSG
                                   3948 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001100 21 0C 13         [10] 3949 	ld	hl, #0x130c
      001103 CDr00r00         [17] 3950 	call	_WRTPSG
                                   3951 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001106 21 0D 01         [10] 3952 	ld	hl, #0x010d
                                   3953 ;src\/Sound.h:49: }
      001109 C3r00r00         [10] 3954 	jp	_WRTPSG
                                   3955 ;src\/CheckPlayfield.h:2: void CheckIfPlayfieldIsValid() {
                                   3956 ;	---------------------------------
                                   3957 ; Function CheckIfPlayfieldIsValid
                                   3958 ; ---------------------------------
      00110C                       3959 _CheckIfPlayfieldIsValid::
      00110C DD E5            [15] 3960 	push	ix
      00110E DD 21 00 00      [14] 3961 	ld	ix,#0
      001112 DD 39            [15] 3962 	add	ix,sp
      001114 F5               [11] 3963 	push	af
      001115 F5               [11] 3964 	push	af
      001116 3B               [ 6] 3965 	dec	sp
                                   3966 ;src\/CheckPlayfield.h:3: bool found = FALSE;
      001117 DD 36 FB 00      [19] 3967 	ld	-5 (ix), #0
                                   3968 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00111B DD 36 FC 00      [19] 3969 	ld	-4 (ix), #0
      00111F DD 36 FE 00      [19] 3970 	ld	-2 (ix), #0
      001123                       3971 00119$:
      001123 DD 7E FE         [19] 3972 	ld	a, -2 (ix)
      001126 D6 0C            [ 7] 3973 	sub	a, #0x0c
      001128 D2rBBr11         [10] 3974 	jp	NC, 00121$
                                   3975 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00112B DD 36 FD 00      [19] 3976 	ld	-3 (ix), #0
      00112F DD 36 FF 00      [19] 3977 	ld	-1 (ix), #0
      001133                       3978 00116$:
      001133 DD 7E FF         [19] 3979 	ld	a, -1 (ix)
      001136 D6 06            [ 7] 3980 	sub	a, #0x06
      001138 30 75            [12] 3981 	jr	NC, 00120$
                                   3982 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      00113A 0E 00            [ 7] 3983 	ld	c, #0x00
      00113C                       3984 00113$:
      00113C 79               [ 4] 3985 	ld	a, c
      00113D D6 05            [ 7] 3986 	sub	a, #0x05
      00113F 30 33            [12] 3987 	jr	NC, 00104$
                                   3988 ;src\/CheckPlayfield.h:7: found = FALSE;
      001141 DD 36 FB 00      [19] 3989 	ld	-5 (ix), #0
                                   3990 ;src\/CheckPlayfield.h:8: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001145 DD 5E FF         [19] 3991 	ld	e, -1 (ix)
      001148 16 00            [ 7] 3992 	ld	d, #0x00
      00114A 6B               [ 4] 3993 	ld	l, e
      00114B 62               [ 4] 3994 	ld	h, d
      00114C 29               [11] 3995 	add	hl, hl
      00114D 19               [11] 3996 	add	hl, de
      00114E 29               [11] 3997 	add	hl, hl
      00114F 29               [11] 3998 	add	hl, hl
      001150 11r48r00         [10] 3999 	ld	de, #_playfieldTemp
      001153 19               [11] 4000 	add	hl, de
      001154 7D               [ 4] 4001 	ld	a, l
      001155 DD 86 FE         [19] 4002 	add	a, -2 (ix)
      001158 5F               [ 4] 4003 	ld	e, a
      001159 7C               [ 4] 4004 	ld	a, h
      00115A CE 00            [ 7] 4005 	adc	a, #0x00
      00115C 57               [ 4] 4006 	ld	d, a
      00115D 21r18r00         [10] 4007 	ld	hl, #_pieces
      001160 06 00            [ 7] 4008 	ld	b, #0x00
      001162 09               [11] 4009 	add	hl, bc
      001163 46               [ 7] 4010 	ld	b, (hl)
      001164 1A               [ 7] 4011 	ld	a, (de)
      001165 B8               [ 4] 4012 	cp	a, b
      001166 28 03            [12] 4013 	jr	Z, 00101$
      001168 B7               [ 4] 4014 	or	a, a
      001169 20 06            [12] 4015 	jr	NZ, 00114$
      00116B                       4016 00101$:
                                   4017 ;src\/CheckPlayfield.h:9: found = TRUE;
      00116B DD 36 FB 01      [19] 4018 	ld	-5 (ix), #0x01
                                   4019 ;src\/CheckPlayfield.h:10: break;
      00116F 18 03            [12] 4020 	jr	00104$
      001171                       4021 00114$:
                                   4022 ;src\/CheckPlayfield.h:6: for(byte item = 0; item < 5; item++) {
      001171 0C               [ 4] 4023 	inc	c
      001172 18 C8            [12] 4024 	jr	00113$
      001174                       4025 00104$:
                                   4026 ;src\/CheckPlayfield.h:13: if(!found) {
      001174 DD 7E FB         [19] 4027 	ld	a, -5 (ix)
      001177 B7               [ 4] 4028 	or	a, a
      001178 20 2A            [12] 4029 	jr	NZ, 00117$
                                   4030 ;src\/CheckPlayfield.h:14: d_col = col;
      00117A DD 7E FD         [19] 4031 	ld	a, -3 (ix)
      00117D 32r09r00         [13] 4032 	ld	(#_d_col),a
                                   4033 ;src\/CheckPlayfield.h:15: d_line = line;
      001180 DD 7E FC         [19] 4034 	ld	a, -4 (ix)
      001183 32r0Ar00         [13] 4035 	ld	(#_d_line),a
                                   4036 ;src\/CheckPlayfield.h:16: d_value = playfieldTemp[col][line];
      001186 DD 4E FD         [19] 4037 	ld	c, -3 (ix)
      001189 06 00            [ 7] 4038 	ld	b, #0x00
      00118B 69               [ 4] 4039 	ld	l, c
      00118C 60               [ 4] 4040 	ld	h, b
      00118D 29               [11] 4041 	add	hl, hl
      00118E 09               [11] 4042 	add	hl, bc
      00118F 29               [11] 4043 	add	hl, hl
      001190 29               [11] 4044 	add	hl, hl
      001191 11r48r00         [10] 4045 	ld	de, #_playfieldTemp
      001194 19               [11] 4046 	add	hl, de
      001195 DD 5E FC         [19] 4047 	ld	e, -4 (ix)
      001198 16 00            [ 7] 4048 	ld	d, #0x00
      00119A 19               [11] 4049 	add	hl, de
      00119B 7E               [ 7] 4050 	ld	a, (hl)
      00119C 32r0Br00         [13] 4051 	ld	(_d_value+0), a
                                   4052 ;src\/CheckPlayfield.h:18: while(1) { 
      00119F                       4053 00106$:
                                   4054 ;src\/CheckPlayfield.h:19: BEEP();
      00119F CDr00r00         [17] 4055 	call	_BEEP
      0011A2 18 FB            [12] 4056 	jr	00106$
      0011A4                       4057 00117$:
                                   4058 ;src\/CheckPlayfield.h:5: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011A4 DD 34 FF         [23] 4059 	inc	-1 (ix)
      0011A7 DD 7E FF         [19] 4060 	ld	a, -1 (ix)
      0011AA DD 77 FD         [19] 4061 	ld	-3 (ix), a
      0011AD 18 84            [12] 4062 	jr	00116$
      0011AF                       4063 00120$:
                                   4064 ;src\/CheckPlayfield.h:4: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011AF DD 34 FE         [23] 4065 	inc	-2 (ix)
      0011B2 DD 7E FE         [19] 4066 	ld	a, -2 (ix)
      0011B5 DD 77 FC         [19] 4067 	ld	-4 (ix), a
      0011B8 C3r23r11         [10] 4068 	jp	00119$
      0011BB                       4069 00121$:
                                   4070 ;src\/CheckPlayfield.h:25: }
      0011BB DD F9            [10] 4071 	ld	sp, ix
      0011BD DD E1            [14] 4072 	pop	ix
      0011BF C9               [10] 4073 	ret
                                   4074 ;src\/CheckPlayfield.h:28: void CheckPlayfield(byte iteration) {
                                   4075 ;	---------------------------------
                                   4076 ; Function CheckPlayfield
                                   4077 ; ---------------------------------
      0011C0                       4078 _CheckPlayfield::
      0011C0 DD E5            [15] 4079 	push	ix
      0011C2 DD 21 00 00      [14] 4080 	ld	ix,#0
      0011C6 DD 39            [15] 4081 	add	ix,sp
      0011C8 21 EF FF         [10] 4082 	ld	hl, #-17
      0011CB 39               [11] 4083 	add	hl, sp
      0011CC F9               [ 6] 4084 	ld	sp, hl
                                   4085 ;src\/CheckPlayfield.h:29: bool piecesRemoved = FALSE;
      0011CD DD 36 EF 00      [19] 4086 	ld	-17 (ix), #0
                                   4087 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0011D1 0E 00            [ 7] 4088 	ld	c, #0x00
      0011D3                       4089 00190$:
      0011D3 79               [ 4] 4090 	ld	a, c
      0011D4 D6 0C            [ 7] 4091 	sub	a, #0x0c
      0011D6 30 36            [12] 4092 	jr	NC, 00102$
                                   4093 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0011D8 DD 36 FF 00      [19] 4094 	ld	-1 (ix), #0
      0011DC                       4095 00187$:
      0011DC DD 7E FF         [19] 4096 	ld	a, -1 (ix)
      0011DF D6 06            [ 7] 4097 	sub	a, #0x06
      0011E1 30 28            [12] 4098 	jr	NC, 00191$
                                   4099 ;src\/CheckPlayfield.h:34: playfieldTemp[col][line] = playfield[col][line];
      0011E3 DD 5E FF         [19] 4100 	ld	e, -1 (ix)
      0011E6 16 00            [ 7] 4101 	ld	d, #0x00
      0011E8 6B               [ 4] 4102 	ld	l, e
      0011E9 62               [ 4] 4103 	ld	h, d
      0011EA 29               [11] 4104 	add	hl, hl
      0011EB 19               [11] 4105 	add	hl, de
      0011EC 29               [11] 4106 	add	hl, hl
      0011ED 29               [11] 4107 	add	hl, hl
      0011EE EB               [ 4] 4108 	ex	de, hl
      0011EF 21r48r00         [10] 4109 	ld	hl, #_playfieldTemp
      0011F2 19               [11] 4110 	add	hl, de
      0011F3 06 00            [ 7] 4111 	ld	b, #0x00
      0011F5 09               [11] 4112 	add	hl, bc
      0011F6 3Er00            [ 7] 4113 	ld	a, #<(_playfield)
      0011F8 83               [ 4] 4114 	add	a, e
      0011F9 5F               [ 4] 4115 	ld	e, a
      0011FA 3Es00            [ 7] 4116 	ld	a, #>(_playfield)
      0011FC 8A               [ 4] 4117 	adc	a, d
      0011FD 57               [ 4] 4118 	ld	d, a
      0011FE 7B               [ 4] 4119 	ld	a, e
      0011FF 81               [ 4] 4120 	add	a, c
      001200 5F               [ 4] 4121 	ld	e, a
      001201 30 01            [12] 4122 	jr	NC, 00587$
      001203 14               [ 4] 4123 	inc	d
      001204                       4124 00587$:
      001204 1A               [ 7] 4125 	ld	a, (de)
      001205 77               [ 7] 4126 	ld	(hl), a
                                   4127 ;src\/CheckPlayfield.h:33: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001206 DD 34 FF         [23] 4128 	inc	-1 (ix)
      001209 18 D1            [12] 4129 	jr	00187$
      00120B                       4130 00191$:
                                   4131 ;src\/CheckPlayfield.h:32: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00120B 0C               [ 4] 4132 	inc	c
      00120C 18 C5            [12] 4133 	jr	00190$
      00120E                       4134 00102$:
                                   4135 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00120E DD 36 FE 00      [19] 4136 	ld	-2 (ix), #0
      001212                       4137 00196$:
      001212 DD 7E FE         [19] 4138 	ld	a, -2 (ix)
      001215 D6 0C            [ 7] 4139 	sub	a, #0x0c
      001217 D2r1Cr13         [10] 4140 	jp	NC, 00108$
                                   4141 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00121A DD 36 FF 02      [19] 4142 	ld	-1 (ix), #0x02
      00121E                       4143 00193$:
      00121E DD 7E FF         [19] 4144 	ld	a, -1 (ix)
      001221 D6 06            [ 7] 4145 	sub	a, #0x06
      001223 D2r16r13         [10] 4146 	jp	NC, 00197$
                                   4147 ;src\/CheckPlayfield.h:41: if (playfieldTemp[col][line] != EMPTY &&
      001226 DD 4E FF         [19] 4148 	ld	c, -1 (ix)
      001229 06 00            [ 7] 4149 	ld	b, #0x00
      00122B 69               [ 4] 4150 	ld	l, c
      00122C 60               [ 4] 4151 	ld	h, b
      00122D 29               [11] 4152 	add	hl, hl
      00122E 09               [11] 4153 	add	hl, bc
      00122F 29               [11] 4154 	add	hl, hl
      001230 29               [11] 4155 	add	hl, hl
      001231 DD 75 F6         [19] 4156 	ld	-10 (ix), l
      001234 DD 74 F7         [19] 4157 	ld	-9 (ix), h
      001237 3Er48            [ 7] 4158 	ld	a, #<(_playfieldTemp)
      001239 DD 86 F6         [19] 4159 	add	a, -10 (ix)
      00123C 4F               [ 4] 4160 	ld	c, a
      00123D 3Es00            [ 7] 4161 	ld	a, #>(_playfieldTemp)
      00123F DD 8E F7         [19] 4162 	adc	a, -9 (ix)
      001242 47               [ 4] 4163 	ld	b, a
      001243 79               [ 4] 4164 	ld	a, c
      001244 DD 86 FE         [19] 4165 	add	a, -2 (ix)
      001247 DD 77 F8         [19] 4166 	ld	-8 (ix), a
      00124A 78               [ 4] 4167 	ld	a, b
      00124B CE 00            [ 7] 4168 	adc	a, #0x00
      00124D DD 77 F9         [19] 4169 	ld	-7 (ix), a
      001250 DD 6E F8         [19] 4170 	ld	l, -8 (ix)
      001253 DD 66 F9         [19] 4171 	ld	h, -7 (ix)
      001256 7E               [ 7] 4172 	ld	a, (hl)
      001257 DD 77 FA         [19] 4173 	ld	-6 (ix), a
      00125A B7               [ 4] 4174 	or	a, a
      00125B CAr10r13         [10] 4175 	jp	Z, 00194$
                                   4176 ;src\/CheckPlayfield.h:42: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      00125E DD 7E FF         [19] 4177 	ld	a, -1 (ix)
      001261 DD 77 FB         [19] 4178 	ld	-5 (ix), a
      001264 C6 FE            [ 7] 4179 	add	a, #0xfe
      001266 DD 77 FD         [19] 4180 	ld	-3 (ix), a
      001269 4F               [ 4] 4181 	ld	c, a
      00126A 07               [ 4] 4182 	rlca
      00126B 9F               [ 4] 4183 	sbc	a, a
      00126C 47               [ 4] 4184 	ld	b, a
      00126D 69               [ 4] 4185 	ld	l, c
      00126E 60               [ 4] 4186 	ld	h, b
      00126F 29               [11] 4187 	add	hl, hl
      001270 09               [11] 4188 	add	hl, bc
      001271 29               [11] 4189 	add	hl, hl
      001272 29               [11] 4190 	add	hl, hl
      001273 DD 75 FC         [19] 4191 	ld	-4 (ix), l
      001276 DD 74 FD         [19] 4192 	ld	-3 (ix), h
      001279 3Er48            [ 7] 4193 	ld	a, #<(_playfieldTemp)
      00127B DD 86 FC         [19] 4194 	add	a, -4 (ix)
      00127E 4F               [ 4] 4195 	ld	c, a
      00127F 3Es00            [ 7] 4196 	ld	a, #>(_playfieldTemp)
      001281 DD 8E FD         [19] 4197 	adc	a, -3 (ix)
      001284 47               [ 4] 4198 	ld	b, a
      001285 79               [ 4] 4199 	ld	a, c
      001286 DD 86 FE         [19] 4200 	add	a, -2 (ix)
      001289 4F               [ 4] 4201 	ld	c, a
      00128A 30 01            [12] 4202 	jr	NC, 00588$
      00128C 04               [ 4] 4203 	inc	b
      00128D                       4204 00588$:
      00128D DD 5E FB         [19] 4205 	ld	e, -5 (ix)
      001290 1D               [ 4] 4206 	dec	e
      001291 7B               [ 4] 4207 	ld	a, e
      001292 07               [ 4] 4208 	rlca
      001293 9F               [ 4] 4209 	sbc	a, a
      001294 57               [ 4] 4210 	ld	d, a
      001295 6B               [ 4] 4211 	ld	l, e
      001296 62               [ 4] 4212 	ld	h, d
      001297 29               [11] 4213 	add	hl, hl
      001298 19               [11] 4214 	add	hl, de
      001299 29               [11] 4215 	add	hl, hl
      00129A 29               [11] 4216 	add	hl, hl
      00129B EB               [ 4] 4217 	ex	de, hl
      00129C 21r48r00         [10] 4218 	ld	hl, #_playfieldTemp
      00129F 19               [11] 4219 	add	hl, de
      0012A0 7D               [ 4] 4220 	ld	a, l
      0012A1 DD 86 FE         [19] 4221 	add	a, -2 (ix)
      0012A4 DD 77 F4         [19] 4222 	ld	-12 (ix), a
      0012A7 7C               [ 4] 4223 	ld	a, h
      0012A8 CE 00            [ 7] 4224 	adc	a, #0x00
      0012AA DD 77 F5         [19] 4225 	ld	-11 (ix), a
      0012AD 0A               [ 7] 4226 	ld	a, (bc)
      0012AE 4F               [ 4] 4227 	ld	c, a
      0012AF DD 6E F4         [19] 4228 	ld	l, -12 (ix)
      0012B2 DD 66 F5         [19] 4229 	ld	h, -11 (ix)
      0012B5 46               [ 7] 4230 	ld	b, (hl)
      0012B6 79               [ 4] 4231 	ld	a, c
      0012B7 90               [ 4] 4232 	sub	a, b
      0012B8 20 56            [12] 4233 	jr	NZ, 00194$
                                   4234 ;src\/CheckPlayfield.h:43: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      0012BA DD 7E FA         [19] 4235 	ld	a, -6 (ix)
      0012BD 90               [ 4] 4236 	sub	a, b
      0012BE 20 50            [12] 4237 	jr	NZ, 00194$
                                   4238 ;src\/CheckPlayfield.h:45: piecesRemoved = TRUE;
      0012C0 DD 36 EF 01      [19] 4239 	ld	-17 (ix), #0x01
                                   4240 ;src\/CheckPlayfield.h:48: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0012C4 3Er00            [ 7] 4241 	ld	a, #<(_playfield)
      0012C6 DD 86 FC         [19] 4242 	add	a, -4 (ix)
      0012C9 6F               [ 4] 4243 	ld	l, a
      0012CA 3Es00            [ 7] 4244 	ld	a, #>(_playfield)
      0012CC DD 8E FD         [19] 4245 	adc	a, -3 (ix)
      0012CF 67               [ 4] 4246 	ld	h, a
      0012D0 7D               [ 4] 4247 	ld	a, l
      0012D1 DD 86 FE         [19] 4248 	add	a, -2 (ix)
      0012D4 6F               [ 4] 4249 	ld	l, a
      0012D5 30 01            [12] 4250 	jr	NC, 00593$
      0012D7 24               [ 4] 4251 	inc	h
      0012D8                       4252 00593$:
      0012D8 CB F9            [ 8] 4253 	set	7, c
      0012DA 71               [ 7] 4254 	ld	(hl), c
                                   4255 ;src\/CheckPlayfield.h:49: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      0012DB 21r00r00         [10] 4256 	ld	hl, #_playfield
      0012DE 19               [11] 4257 	add	hl, de
      0012DF 7D               [ 4] 4258 	ld	a, l
      0012E0 DD 86 FE         [19] 4259 	add	a, -2 (ix)
      0012E3 4F               [ 4] 4260 	ld	c, a
      0012E4 7C               [ 4] 4261 	ld	a, h
      0012E5 CE 00            [ 7] 4262 	adc	a, #0x00
      0012E7 47               [ 4] 4263 	ld	b, a
      0012E8 DD 6E F4         [19] 4264 	ld	l, -12 (ix)
      0012EB DD 66 F5         [19] 4265 	ld	h, -11 (ix)
      0012EE 7E               [ 7] 4266 	ld	a, (hl)
      0012EF CB FF            [ 8] 4267 	set	7, a
      0012F1 02               [ 7] 4268 	ld	(bc), a
                                   4269 ;src\/CheckPlayfield.h:50: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0012F2 3Er00            [ 7] 4270 	ld	a, #<(_playfield)
      0012F4 DD 86 F6         [19] 4271 	add	a, -10 (ix)
      0012F7 4F               [ 4] 4272 	ld	c, a
      0012F8 3Es00            [ 7] 4273 	ld	a, #>(_playfield)
      0012FA DD 8E F7         [19] 4274 	adc	a, -9 (ix)
      0012FD 47               [ 4] 4275 	ld	b, a
      0012FE 79               [ 4] 4276 	ld	a, c
      0012FF DD 86 FE         [19] 4277 	add	a, -2 (ix)
      001302 4F               [ 4] 4278 	ld	c, a
      001303 30 01            [12] 4279 	jr	NC, 00594$
      001305 04               [ 4] 4280 	inc	b
      001306                       4281 00594$:
      001306 DD 6E F8         [19] 4282 	ld	l, -8 (ix)
      001309 DD 66 F9         [19] 4283 	ld	h, -7 (ix)
      00130C 7E               [ 7] 4284 	ld	a, (hl)
      00130D CB FF            [ 8] 4285 	set	7, a
      00130F 02               [ 7] 4286 	ld	(bc), a
      001310                       4287 00194$:
                                   4288 ;src\/CheckPlayfield.h:40: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001310 DD 34 FF         [23] 4289 	inc	-1 (ix)
      001313 C3r1Er12         [10] 4290 	jp	00193$
      001316                       4291 00197$:
                                   4292 ;src\/CheckPlayfield.h:39: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001316 DD 34 FE         [23] 4293 	inc	-2 (ix)
      001319 C3r12r12         [10] 4294 	jp	00196$
      00131C                       4295 00108$:
                                   4296 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00131C 0E 02            [ 7] 4297 	ld	c, #0x02
      00131E                       4298 00202$:
      00131E 79               [ 4] 4299 	ld	a, c
      00131F D6 0C            [ 7] 4300 	sub	a, #0x0c
      001321 D2rE3r13         [10] 4301 	jp	NC, 00114$
                                   4302 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001324 DD 36 FF 00      [19] 4303 	ld	-1 (ix), #0
      001328                       4304 00199$:
      001328 DD 7E FF         [19] 4305 	ld	a, -1 (ix)
      00132B D6 06            [ 7] 4306 	sub	a, #0x06
      00132D D2rDFr13         [10] 4307 	jp	NC, 00203$
                                   4308 ;src\/CheckPlayfield.h:58: if (playfieldTemp[col][line] != EMPTY &&
      001330 DD 5E FF         [19] 4309 	ld	e, -1 (ix)
      001333 16 00            [ 7] 4310 	ld	d, #0x00
      001335 6B               [ 4] 4311 	ld	l, e
      001336 62               [ 4] 4312 	ld	h, d
      001337 29               [11] 4313 	add	hl, hl
      001338 19               [11] 4314 	add	hl, de
      001339 29               [11] 4315 	add	hl, hl
      00133A 29               [11] 4316 	add	hl, hl
      00133B DD 75 F7         [19] 4317 	ld	-9 (ix), l
      00133E DD 74 F8         [19] 4318 	ld	-8 (ix), h
      001341 3Er48            [ 7] 4319 	ld	a, #<(_playfieldTemp)
      001343 DD 86 F7         [19] 4320 	add	a, -9 (ix)
      001346 5F               [ 4] 4321 	ld	e, a
      001347 3Es00            [ 7] 4322 	ld	a, #>(_playfieldTemp)
      001349 DD 8E F8         [19] 4323 	adc	a, -8 (ix)
      00134C 57               [ 4] 4324 	ld	d, a
      00134D 7B               [ 4] 4325 	ld	a, e
      00134E 81               [ 4] 4326 	add	a, c
      00134F DD 77 F9         [19] 4327 	ld	-7 (ix), a
      001352 7A               [ 4] 4328 	ld	a, d
      001353 CE 00            [ 7] 4329 	adc	a, #0x00
      001355 DD 77 FA         [19] 4330 	ld	-6 (ix), a
      001358 DD 6E F9         [19] 4331 	ld	l, -7 (ix)
      00135B DD 66 FA         [19] 4332 	ld	h, -6 (ix)
      00135E 7E               [ 7] 4333 	ld	a, (hl)
      00135F DD 77 FE         [19] 4334 	ld	-2 (ix), a
      001362 B7               [ 4] 4335 	or	a, a
      001363 28 74            [12] 4336 	jr	Z, 00200$
                                   4337 ;src\/CheckPlayfield.h:59: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001365 DD 71 FD         [19] 4338 	ld	-3 (ix), c
      001368 79               [ 4] 4339 	ld	a, c
      001369 C6 FE            [ 7] 4340 	add	a, #0xfe
      00136B DD 77 FB         [19] 4341 	ld	-5 (ix), a
      00136E 6F               [ 4] 4342 	ld	l, a
      00136F 26 00            [ 7] 4343 	ld	h, #0x00
      001371 19               [11] 4344 	add	hl, de
      001372 DD 46 FD         [19] 4345 	ld	b, -3 (ix)
      001375 05               [ 4] 4346 	dec	b
      001376 7B               [ 4] 4347 	ld	a, e
      001377 80               [ 4] 4348 	add	a, b
      001378 5F               [ 4] 4349 	ld	e, a
      001379 30 01            [12] 4350 	jr	NC, 00595$
      00137B 14               [ 4] 4351 	inc	d
      00137C                       4352 00595$:
      00137C 7E               [ 7] 4353 	ld	a, (hl)
      00137D DD 77 FC         [19] 4354 	ld	-4 (ix), a
      001380 1A               [ 7] 4355 	ld	a, (de)
      001381 6F               [ 4] 4356 	ld	l, a
      001382 DD 7E FC         [19] 4357 	ld	a, -4 (ix)
      001385 95               [ 4] 4358 	sub	a, l
      001386 20 51            [12] 4359 	jr	NZ, 00200$
                                   4360 ;src\/CheckPlayfield.h:60: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001388 DD 7E FE         [19] 4361 	ld	a, -2 (ix)
      00138B 95               [ 4] 4362 	sub	a, l
      00138C 20 4B            [12] 4363 	jr	NZ, 00200$
                                   4364 ;src\/CheckPlayfield.h:62: piecesRemoved = TRUE;
      00138E DD 36 EF 01      [19] 4365 	ld	-17 (ix), #0x01
                                   4366 ;src\/CheckPlayfield.h:65: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001392 3Er00            [ 7] 4367 	ld	a, #<(_playfield)
      001394 DD 86 F7         [19] 4368 	add	a, -9 (ix)
      001397 DD 77 FD         [19] 4369 	ld	-3 (ix), a
      00139A 3Es00            [ 7] 4370 	ld	a, #>(_playfield)
      00139C DD 8E F8         [19] 4371 	adc	a, -8 (ix)
      00139F DD 77 FE         [19] 4372 	ld	-2 (ix), a
      0013A2 DD 7E FD         [19] 4373 	ld	a, -3 (ix)
      0013A5 DD 86 FB         [19] 4374 	add	a, -5 (ix)
      0013A8 6F               [ 4] 4375 	ld	l, a
      0013A9 DD 7E FE         [19] 4376 	ld	a, -2 (ix)
      0013AC CE 00            [ 7] 4377 	adc	a, #0x00
      0013AE 67               [ 4] 4378 	ld	h, a
      0013AF DD 7E FC         [19] 4379 	ld	a, -4 (ix)
      0013B2 CB FF            [ 8] 4380 	set	7, a
      0013B4 77               [ 7] 4381 	ld	(hl), a
                                   4382 ;src\/CheckPlayfield.h:66: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      0013B5 DD 7E FD         [19] 4383 	ld	a, -3 (ix)
      0013B8 80               [ 4] 4384 	add	a, b
      0013B9 6F               [ 4] 4385 	ld	l, a
      0013BA DD 7E FE         [19] 4386 	ld	a, -2 (ix)
      0013BD CE 00            [ 7] 4387 	adc	a, #0x00
      0013BF 67               [ 4] 4388 	ld	h, a
      0013C0 1A               [ 7] 4389 	ld	a, (de)
      0013C1 CB FF            [ 8] 4390 	set	7, a
      0013C3 77               [ 7] 4391 	ld	(hl), a
                                   4392 ;src\/CheckPlayfield.h:67: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0013C4 DD 7E FD         [19] 4393 	ld	a, -3 (ix)
      0013C7 81               [ 4] 4394 	add	a, c
      0013C8 5F               [ 4] 4395 	ld	e, a
      0013C9 DD 7E FE         [19] 4396 	ld	a, -2 (ix)
      0013CC CE 00            [ 7] 4397 	adc	a, #0x00
      0013CE 57               [ 4] 4398 	ld	d, a
      0013CF DD 6E F9         [19] 4399 	ld	l, -7 (ix)
      0013D2 DD 66 FA         [19] 4400 	ld	h, -6 (ix)
      0013D5 7E               [ 7] 4401 	ld	a, (hl)
      0013D6 CB FF            [ 8] 4402 	set	7, a
      0013D8 12               [ 7] 4403 	ld	(de), a
      0013D9                       4404 00200$:
                                   4405 ;src\/CheckPlayfield.h:57: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0013D9 DD 34 FF         [23] 4406 	inc	-1 (ix)
      0013DC C3r28r13         [10] 4407 	jp	00199$
      0013DF                       4408 00203$:
                                   4409 ;src\/CheckPlayfield.h:56: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0013DF 0C               [ 4] 4410 	inc	c
      0013E0 C3r1Er13         [10] 4411 	jp	00202$
      0013E3                       4412 00114$:
                                   4413 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0013E3 DD 36 FE 02      [19] 4414 	ld	-2 (ix), #0x02
      0013E7                       4415 00208$:
      0013E7 DD 7E FE         [19] 4416 	ld	a, -2 (ix)
      0013EA D6 0C            [ 7] 4417 	sub	a, #0x0c
      0013EC D2r8Ar15         [10] 4418 	jp	NC, 00124$
                                   4419 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0013EF DD 36 FF 02      [19] 4420 	ld	-1 (ix), #0x02
      0013F3                       4421 00205$:
      0013F3 DD 7E FF         [19] 4422 	ld	a, -1 (ix)
      0013F6 D6 06            [ 7] 4423 	sub	a, #0x06
      0013F8 D2r84r15         [10] 4424 	jp	NC, 00209$
                                   4425 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      0013FB DD 4E FF         [19] 4426 	ld	c, -1 (ix)
      0013FE 06 00            [ 7] 4427 	ld	b, #0x00
      001400 69               [ 4] 4428 	ld	l, c
      001401 60               [ 4] 4429 	ld	h, b
      001402 29               [11] 4430 	add	hl, hl
      001403 09               [11] 4431 	add	hl, bc
      001404 29               [11] 4432 	add	hl, hl
      001405 29               [11] 4433 	add	hl, hl
      001406 DD 75 F0         [19] 4434 	ld	-16 (ix), l
      001409 DD 74 F1         [19] 4435 	ld	-15 (ix), h
      00140C 3Er48            [ 7] 4436 	ld	a, #<(_playfieldTemp)
      00140E DD 86 F0         [19] 4437 	add	a, -16 (ix)
      001411 4F               [ 4] 4438 	ld	c, a
      001412 3Es00            [ 7] 4439 	ld	a, #>(_playfieldTemp)
      001414 DD 8E F1         [19] 4440 	adc	a, -15 (ix)
      001417 47               [ 4] 4441 	ld	b, a
      001418 79               [ 4] 4442 	ld	a, c
      001419 DD 86 FE         [19] 4443 	add	a, -2 (ix)
      00141C DD 77 F2         [19] 4444 	ld	-14 (ix), a
      00141F 78               [ 4] 4445 	ld	a, b
      001420 CE 00            [ 7] 4446 	adc	a, #0x00
      001422 DD 77 F3         [19] 4447 	ld	-13 (ix), a
      001425 DD 6E F2         [19] 4448 	ld	l, -14 (ix)
      001428 DD 66 F3         [19] 4449 	ld	h, -13 (ix)
      00142B 5E               [ 7] 4450 	ld	e, (hl)
                                   4451 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      00142C DD 56 FF         [19] 4452 	ld	d, -1 (ix)
      00142F DD 66 FE         [19] 4453 	ld	h, -2 (ix)
      001432 6A               [ 4] 4454 	ld	l, d
      001433 2D               [ 4] 4455 	dec	l
      001434 2D               [ 4] 4456 	dec	l
      001435 7C               [ 4] 4457 	ld	a, h
      001436 C6 FE            [ 7] 4458 	add	a, #0xfe
      001438 DD 77 F4         [19] 4459 	ld	-12 (ix), a
      00143B 15               [ 4] 4460 	dec	d
      00143C 7C               [ 4] 4461 	ld	a, h
      00143D C6 FF            [ 7] 4462 	add	a, #0xff
      00143F DD 77 F5         [19] 4463 	ld	-11 (ix), a
      001442 D5               [11] 4464 	push	de
      001443 5D               [ 4] 4465 	ld	e, l
      001444 7B               [ 4] 4466 	ld	a, e
      001445 07               [ 4] 4467 	rlca
      001446 9F               [ 4] 4468 	sbc	a, a
      001447 57               [ 4] 4469 	ld	d, a
      001448 6B               [ 4] 4470 	ld	l, e
      001449 62               [ 4] 4471 	ld	h, d
      00144A 29               [11] 4472 	add	hl, hl
      00144B 19               [11] 4473 	add	hl, de
      00144C 29               [11] 4474 	add	hl, hl
      00144D 29               [11] 4475 	add	hl, hl
      00144E D1               [10] 4476 	pop	de
      00144F DD 75 F6         [19] 4477 	ld	-10 (ix), l
      001452 DD 74 F7         [19] 4478 	ld	-9 (ix), h
      001455 D5               [11] 4479 	push	de
      001456 5A               [ 4] 4480 	ld	e, d
      001457 7B               [ 4] 4481 	ld	a, e
      001458 07               [ 4] 4482 	rlca
      001459 9F               [ 4] 4483 	sbc	a, a
      00145A 57               [ 4] 4484 	ld	d, a
      00145B 6B               [ 4] 4485 	ld	l, e
      00145C 62               [ 4] 4486 	ld	h, d
      00145D 29               [11] 4487 	add	hl, hl
      00145E 19               [11] 4488 	add	hl, de
      00145F 29               [11] 4489 	add	hl, hl
      001460 29               [11] 4490 	add	hl, hl
      001461 D1               [10] 4491 	pop	de
      001462 DD 75 F8         [19] 4492 	ld	-8 (ix), l
      001465 DD 74 F9         [19] 4493 	ld	-7 (ix), h
      001468 3Er48            [ 7] 4494 	ld	a, #<(_playfieldTemp)
      00146A DD 86 F6         [19] 4495 	add	a, -10 (ix)
      00146D DD 77 FA         [19] 4496 	ld	-6 (ix), a
      001470 3Es00            [ 7] 4497 	ld	a, #>(_playfieldTemp)
      001472 DD 8E F7         [19] 4498 	adc	a, -9 (ix)
      001475 DD 77 FB         [19] 4499 	ld	-5 (ix), a
      001478 3Er48            [ 7] 4500 	ld	a, #<(_playfieldTemp)
      00147A DD 86 F8         [19] 4501 	add	a, -8 (ix)
      00147D 57               [ 4] 4502 	ld	d, a
      00147E 3Es00            [ 7] 4503 	ld	a, #>(_playfieldTemp)
      001480 DD 8E F9         [19] 4504 	adc	a, -7 (ix)
      001483 6F               [ 4] 4505 	ld	l, a
      001484 7A               [ 4] 4506 	ld	a, d
      001485 DD 86 F5         [19] 4507 	add	a, -11 (ix)
      001488 DD 77 FC         [19] 4508 	ld	-4 (ix), a
      00148B 7D               [ 4] 4509 	ld	a, l
      00148C CE 00            [ 7] 4510 	adc	a, #0x00
      00148E DD 77 FD         [19] 4511 	ld	-3 (ix), a
                                   4512 ;src\/CheckPlayfield.h:75: if (playfieldTemp[col][line] != EMPTY &&
      001491 7B               [ 4] 4513 	ld	a, e
      001492 B7               [ 4] 4514 	or	a, a
      001493 28 74            [12] 4515 	jr	Z, 00116$
                                   4516 ;src\/CheckPlayfield.h:76: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001495 DD 7E FA         [19] 4517 	ld	a, -6 (ix)
      001498 DD 86 F4         [19] 4518 	add	a, -12 (ix)
      00149B 6F               [ 4] 4519 	ld	l, a
      00149C DD 7E FB         [19] 4520 	ld	a, -5 (ix)
      00149F CE 00            [ 7] 4521 	adc	a, #0x00
      0014A1 67               [ 4] 4522 	ld	h, a
      0014A2 56               [ 7] 4523 	ld	d, (hl)
      0014A3 DD 6E FC         [19] 4524 	ld	l, -4 (ix)
      0014A6 DD 66 FD         [19] 4525 	ld	h, -3 (ix)
      0014A9 6E               [ 7] 4526 	ld	l, (hl)
      0014AA 7A               [ 4] 4527 	ld	a, d
      0014AB 95               [ 4] 4528 	sub	a, l
      0014AC 20 5B            [12] 4529 	jr	NZ, 00116$
                                   4530 ;src\/CheckPlayfield.h:77: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      0014AE 7B               [ 4] 4531 	ld	a, e
      0014AF 95               [ 4] 4532 	sub	a, l
      0014B0 20 57            [12] 4533 	jr	NZ, 00116$
                                   4534 ;src\/CheckPlayfield.h:79: piecesRemoved = TRUE;
      0014B2 DD 36 EF 01      [19] 4535 	ld	-17 (ix), #0x01
                                   4536 ;src\/CheckPlayfield.h:82: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      0014B6 3Er00            [ 7] 4537 	ld	a, #<(_playfield)
      0014B8 DD 86 F6         [19] 4538 	add	a, -10 (ix)
      0014BB 5F               [ 4] 4539 	ld	e, a
      0014BC 3Es00            [ 7] 4540 	ld	a, #>(_playfield)
      0014BE DD 8E F7         [19] 4541 	adc	a, -9 (ix)
      0014C1 67               [ 4] 4542 	ld	h, a
      0014C2 7B               [ 4] 4543 	ld	a, e
      0014C3 DD 86 F4         [19] 4544 	add	a, -12 (ix)
      0014C6 6F               [ 4] 4545 	ld	l, a
      0014C7 30 01            [12] 4546 	jr	NC, 00604$
      0014C9 24               [ 4] 4547 	inc	h
      0014CA                       4548 00604$:
      0014CA CB FA            [ 8] 4549 	set	7, d
      0014CC 72               [ 7] 4550 	ld	(hl), d
                                   4551 ;src\/CheckPlayfield.h:83: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0014CD 3Er00            [ 7] 4552 	ld	a, #<(_playfield)
      0014CF DD 86 F8         [19] 4553 	add	a, -8 (ix)
      0014D2 5F               [ 4] 4554 	ld	e, a
      0014D3 3Es00            [ 7] 4555 	ld	a, #>(_playfield)
      0014D5 DD 8E F9         [19] 4556 	adc	a, -7 (ix)
      0014D8 57               [ 4] 4557 	ld	d, a
      0014D9 7B               [ 4] 4558 	ld	a, e
      0014DA DD 86 F5         [19] 4559 	add	a, -11 (ix)
      0014DD 5F               [ 4] 4560 	ld	e, a
      0014DE 30 01            [12] 4561 	jr	NC, 00605$
      0014E0 14               [ 4] 4562 	inc	d
      0014E1                       4563 00605$:
      0014E1 DD 6E FC         [19] 4564 	ld	l, -4 (ix)
      0014E4 DD 66 FD         [19] 4565 	ld	h, -3 (ix)
      0014E7 7E               [ 7] 4566 	ld	a, (hl)
      0014E8 CB FF            [ 8] 4567 	set	7, a
      0014EA 12               [ 7] 4568 	ld	(de), a
                                   4569 ;src\/CheckPlayfield.h:84: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      0014EB 3Er00            [ 7] 4570 	ld	a, #<(_playfield)
      0014ED DD 86 F0         [19] 4571 	add	a, -16 (ix)
      0014F0 5F               [ 4] 4572 	ld	e, a
      0014F1 3Es00            [ 7] 4573 	ld	a, #>(_playfield)
      0014F3 DD 8E F1         [19] 4574 	adc	a, -15 (ix)
      0014F6 57               [ 4] 4575 	ld	d, a
      0014F7 7B               [ 4] 4576 	ld	a, e
      0014F8 DD 86 FE         [19] 4577 	add	a, -2 (ix)
      0014FB 5F               [ 4] 4578 	ld	e, a
      0014FC 30 01            [12] 4579 	jr	NC, 00606$
      0014FE 14               [ 4] 4580 	inc	d
      0014FF                       4581 00606$:
      0014FF DD 6E F2         [19] 4582 	ld	l, -14 (ix)
      001502 DD 66 F3         [19] 4583 	ld	h, -13 (ix)
      001505 7E               [ 7] 4584 	ld	a, (hl)
      001506 CB FF            [ 8] 4585 	set	7, a
      001508 12               [ 7] 4586 	ld	(de), a
      001509                       4587 00116$:
                                   4588 ;src\/CheckPlayfield.h:86: if (playfieldTemp[col][line - 2] != EMPTY &&
      001509 DD 6E F4         [19] 4589 	ld	l, -12 (ix)
      00150C 26 00            [ 7] 4590 	ld	h, #0x00
      00150E 09               [11] 4591 	add	hl, bc
      00150F 4E               [ 7] 4592 	ld	c, (hl)
      001510 79               [ 4] 4593 	ld	a, c
      001511 B7               [ 4] 4594 	or	a, a
      001512 28 6A            [12] 4595 	jr	Z, 00206$
                                   4596 ;src\/CheckPlayfield.h:87: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001514 DD 7E FA         [19] 4597 	ld	a, -6 (ix)
      001517 DD 86 FE         [19] 4598 	add	a, -2 (ix)
      00151A 5F               [ 4] 4599 	ld	e, a
      00151B DD 7E FB         [19] 4600 	ld	a, -5 (ix)
      00151E CE 00            [ 7] 4601 	adc	a, #0x00
      001520 57               [ 4] 4602 	ld	d, a
      001521 DD 6E FC         [19] 4603 	ld	l, -4 (ix)
      001524 DD 66 FD         [19] 4604 	ld	h, -3 (ix)
      001527 46               [ 7] 4605 	ld	b, (hl)
      001528 1A               [ 7] 4606 	ld	a, (de)
      001529 B8               [ 4] 4607 	cp	a, b
      00152A 20 52            [12] 4608 	jr	NZ, 00206$
                                   4609 ;src\/CheckPlayfield.h:88: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      00152C 91               [ 4] 4610 	sub	a, c
      00152D 20 4F            [12] 4611 	jr	NZ, 00206$
                                   4612 ;src\/CheckPlayfield.h:90: piecesRemoved = TRUE;
      00152F DD 36 EF 01      [19] 4613 	ld	-17 (ix), #0x01
                                   4614 ;src\/CheckPlayfield.h:93: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001533 3Er00            [ 7] 4615 	ld	a, #<(_playfield)
      001535 DD 86 F0         [19] 4616 	add	a, -16 (ix)
      001538 47               [ 4] 4617 	ld	b, a
      001539 3Es00            [ 7] 4618 	ld	a, #>(_playfield)
      00153B DD 8E F1         [19] 4619 	adc	a, -15 (ix)
      00153E 67               [ 4] 4620 	ld	h, a
      00153F 78               [ 4] 4621 	ld	a, b
      001540 DD 86 F4         [19] 4622 	add	a, -12 (ix)
      001543 6F               [ 4] 4623 	ld	l, a
      001544 30 01            [12] 4624 	jr	NC, 00611$
      001546 24               [ 4] 4625 	inc	h
      001547                       4626 00611$:
      001547 CB F9            [ 8] 4627 	set	7, c
      001549 71               [ 7] 4628 	ld	(hl), c
                                   4629 ;src\/CheckPlayfield.h:94: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      00154A 3Er00            [ 7] 4630 	ld	a, #<(_playfield)
      00154C DD 86 F8         [19] 4631 	add	a, -8 (ix)
      00154F 4F               [ 4] 4632 	ld	c, a
      001550 3Es00            [ 7] 4633 	ld	a, #>(_playfield)
      001552 DD 8E F9         [19] 4634 	adc	a, -7 (ix)
      001555 47               [ 4] 4635 	ld	b, a
      001556 79               [ 4] 4636 	ld	a, c
      001557 DD 86 F5         [19] 4637 	add	a, -11 (ix)
      00155A 4F               [ 4] 4638 	ld	c, a
      00155B 30 01            [12] 4639 	jr	NC, 00612$
      00155D 04               [ 4] 4640 	inc	b
      00155E                       4641 00612$:
      00155E DD 6E FC         [19] 4642 	ld	l, -4 (ix)
      001561 DD 66 FD         [19] 4643 	ld	h, -3 (ix)
      001564 7E               [ 7] 4644 	ld	a, (hl)
      001565 CB FF            [ 8] 4645 	set	7, a
      001567 02               [ 7] 4646 	ld	(bc), a
                                   4647 ;src\/CheckPlayfield.h:95: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001568 3Er00            [ 7] 4648 	ld	a, #<(_playfield)
      00156A DD 86 F6         [19] 4649 	add	a, -10 (ix)
      00156D 4F               [ 4] 4650 	ld	c, a
      00156E 3Es00            [ 7] 4651 	ld	a, #>(_playfield)
      001570 DD 8E F7         [19] 4652 	adc	a, -9 (ix)
      001573 47               [ 4] 4653 	ld	b, a
      001574 DD 6E FE         [19] 4654 	ld	l, -2 (ix)
      001577 26 00            [ 7] 4655 	ld	h, #0x00
      001579 09               [11] 4656 	add	hl, bc
      00157A 1A               [ 7] 4657 	ld	a, (de)
      00157B CB FF            [ 8] 4658 	set	7, a
      00157D 77               [ 7] 4659 	ld	(hl), a
      00157E                       4660 00206$:
                                   4661 ;src\/CheckPlayfield.h:74: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00157E DD 34 FF         [23] 4662 	inc	-1 (ix)
      001581 C3rF3r13         [10] 4663 	jp	00205$
      001584                       4664 00209$:
                                   4665 ;src\/CheckPlayfield.h:73: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001584 DD 34 FE         [23] 4666 	inc	-2 (ix)
      001587 C3rE7r13         [10] 4667 	jp	00208$
      00158A                       4668 00124$:
                                   4669 ;src\/CheckPlayfield.h:100: if(piecesRemoved) {
      00158A DD 7E EF         [19] 4670 	ld	a, -17 (ix)
      00158D B7               [ 4] 4671 	or	a, a
      00158E CAr04r19         [10] 4672 	jp	Z, 00231$
                                   4673 ;src\/CheckPlayfield.h:107: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001591 DD 36 FB 05      [19] 4674 	ld	-5 (ix), #0x05
      001595 DD 36 FC 00      [19] 4675 	ld	-4 (ix), #0
                                   4676 ;src\/CheckPlayfield.h:108: byte lmostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001599 DD 36 FD 0B      [19] 4677 	ld	-3 (ix), #0x0b
      00159D DD 36 FE 00      [19] 4678 	ld	-2 (ix), #0
                                   4679 ;src\/CheckPlayfield.h:110: HideArrow();
      0015A1 CDrC9r0C         [17] 4680 	call	_HideArrow
                                   4681 ;src\/CheckPlayfield.h:112: SoundFx_2();
      0015A4 CDrACr10         [17] 4682 	call	_SoundFx_2
                                   4683 ;src\/CheckPlayfield.h:115: numberPiecesRemoved = 0;
      0015A7 0E 00            [ 7] 4684 	ld	c, #0x00
                                   4685 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0015A9 DD 36 FF 00      [19] 4686 	ld	-1 (ix), #0
      0015AD                       4687 00214$:
      0015AD DD 7E FF         [19] 4688 	ld	a, -1 (ix)
      0015B0 D6 0C            [ 7] 4689 	sub	a, #0x0c
      0015B2 30 5A            [12] 4690 	jr	NC, 00136$
                                   4691 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0015B4 41               [ 4] 4692 	ld	b, c
      0015B5 1E 00            [ 7] 4693 	ld	e, #0x00
      0015B7                       4694 00211$:
      0015B7 7B               [ 4] 4695 	ld	a, e
      0015B8 D6 06            [ 7] 4696 	sub	a, #0x06
      0015BA 30 4C            [12] 4697 	jr	NC, 00312$
                                   4698 ;src\/CheckPlayfield.h:118: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0015BC D5               [11] 4699 	push	de
      0015BD 16 00            [ 7] 4700 	ld	d, #0x00
      0015BF 6B               [ 4] 4701 	ld	l, e
      0015C0 62               [ 4] 4702 	ld	h, d
      0015C1 29               [11] 4703 	add	hl, hl
      0015C2 19               [11] 4704 	add	hl, de
      0015C3 29               [11] 4705 	add	hl, hl
      0015C4 29               [11] 4706 	add	hl, hl
      0015C5 11r00r00         [10] 4707 	ld	de, #_playfield
      0015C8 19               [11] 4708 	add	hl, de
      0015C9 D1               [10] 4709 	pop	de
      0015CA 7D               [ 4] 4710 	ld	a, l
      0015CB DD 86 FF         [19] 4711 	add	a, -1 (ix)
      0015CE 6F               [ 4] 4712 	ld	l, a
      0015CF 30 01            [12] 4713 	jr	NC, 00613$
      0015D1 24               [ 4] 4714 	inc	h
      0015D2                       4715 00613$:
      0015D2 7E               [ 7] 4716 	ld	a, (hl)
      0015D3 07               [ 4] 4717 	rlca
      0015D4 30 2F            [12] 4718 	jr	NC, 00212$
                                   4719 ;src\/CheckPlayfield.h:119: numberPiecesRemoved++;
      0015D6 04               [ 4] 4720 	inc	b
                                   4721 ;src\/CheckPlayfield.h:121: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      0015D7 7B               [ 4] 4722 	ld	a, e
      0015D8 DD 96 FB         [19] 4723 	sub	a, -5 (ix)
      0015DB 30 03            [12] 4724 	jr	NC, 00126$
      0015DD DD 73 FB         [19] 4725 	ld	-5 (ix), e
      0015E0                       4726 00126$:
                                   4727 ;src\/CheckPlayfield.h:122: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      0015E0 DD 7E FC         [19] 4728 	ld	a, -4 (ix)
      0015E3 93               [ 4] 4729 	sub	a, e
      0015E4 30 03            [12] 4730 	jr	NC, 00128$
      0015E6 DD 73 FC         [19] 4731 	ld	-4 (ix), e
      0015E9                       4732 00128$:
                                   4733 ;src\/CheckPlayfield.h:123: if(line < lmostPieceRemoved) lmostPieceRemoved = line;
      0015E9 DD 7E FF         [19] 4734 	ld	a, -1 (ix)
      0015EC DD 96 FD         [19] 4735 	sub	a, -3 (ix)
      0015EF 30 06            [12] 4736 	jr	NC, 00130$
      0015F1 DD 7E FF         [19] 4737 	ld	a, -1 (ix)
      0015F4 DD 77 FD         [19] 4738 	ld	-3 (ix), a
      0015F7                       4739 00130$:
                                   4740 ;src\/CheckPlayfield.h:124: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      0015F7 DD 7E FE         [19] 4741 	ld	a, -2 (ix)
      0015FA DD 96 FF         [19] 4742 	sub	a, -1 (ix)
      0015FD 30 06            [12] 4743 	jr	NC, 00212$
      0015FF DD 7E FF         [19] 4744 	ld	a, -1 (ix)
      001602 DD 77 FE         [19] 4745 	ld	-2 (ix), a
      001605                       4746 00212$:
                                   4747 ;src\/CheckPlayfield.h:117: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001605 1C               [ 4] 4748 	inc	e
      001606 18 AF            [12] 4749 	jr	00211$
      001608                       4750 00312$:
      001608 48               [ 4] 4751 	ld	c, b
                                   4752 ;src\/CheckPlayfield.h:116: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001609 DD 34 FF         [23] 4753 	inc	-1 (ix)
      00160C 18 9F            [12] 4754 	jr	00214$
      00160E                       4755 00136$:
                                   4756 ;src\/CheckPlayfield.h:130: DrawNumber(numberPiecesRemoved, 0, 0);//test
      00160E 06 00            [ 7] 4757 	ld	b, #0x00
      001610 AF               [ 4] 4758 	xor	a, a
      001611 F5               [11] 4759 	push	af
      001612 33               [ 6] 4760 	inc	sp
      001613 AF               [ 4] 4761 	xor	a, a
      001614 F5               [11] 4762 	push	af
      001615 33               [ 6] 4763 	inc	sp
      001616 C5               [11] 4764 	push	bc
      001617 CDrDAr07         [17] 4765 	call	_DrawNumber
      00161A F1               [10] 4766 	pop	af
      00161B F1               [10] 4767 	pop	af
                                   4768 ;src\/CheckPlayfield.h:131: DrawNumber(iteration, 0, 1);//test
      00161C DD 4E 04         [19] 4769 	ld	c, 4 (ix)
      00161F 06 00            [ 7] 4770 	ld	b, #0x00
      001621 3E 01            [ 7] 4771 	ld	a, #0x01
      001623 F5               [11] 4772 	push	af
      001624 33               [ 6] 4773 	inc	sp
      001625 AF               [ 4] 4774 	xor	a, a
      001626 F5               [11] 4775 	push	af
      001627 33               [ 6] 4776 	inc	sp
      001628 C5               [11] 4777 	push	bc
      001629 CDrDAr07         [17] 4778 	call	_DrawNumber
      00162C F1               [10] 4779 	pop	af
      00162D F1               [10] 4780 	pop	af
                                   4781 ;src\/CheckPlayfield.h:132: DrawNumber(leftmostPieceRemoved, 0, 3);//test
      00162E DD 6E FB         [19] 4782 	ld	l, -5 (ix)
      001631 26 00            [ 7] 4783 	ld	h, #0x00
      001633 3E 03            [ 7] 4784 	ld	a, #0x03
      001635 F5               [11] 4785 	push	af
      001636 33               [ 6] 4786 	inc	sp
      001637 AF               [ 4] 4787 	xor	a, a
      001638 F5               [11] 4788 	push	af
      001639 33               [ 6] 4789 	inc	sp
      00163A E5               [11] 4790 	push	hl
      00163B CDrDAr07         [17] 4791 	call	_DrawNumber
      00163E F1               [10] 4792 	pop	af
      00163F F1               [10] 4793 	pop	af
                                   4794 ;src\/CheckPlayfield.h:133: DrawNumber(rightmostPieceRemoved, 0, 4);//test
      001640 DD 4E FC         [19] 4795 	ld	c, -4 (ix)
      001643 06 00            [ 7] 4796 	ld	b, #0x00
      001645 3E 04            [ 7] 4797 	ld	a, #0x04
      001647 F5               [11] 4798 	push	af
      001648 33               [ 6] 4799 	inc	sp
      001649 AF               [ 4] 4800 	xor	a, a
      00164A F5               [11] 4801 	push	af
      00164B 33               [ 6] 4802 	inc	sp
      00164C C5               [11] 4803 	push	bc
      00164D CDrDAr07         [17] 4804 	call	_DrawNumber
      001650 F1               [10] 4805 	pop	af
      001651 F1               [10] 4806 	pop	af
                                   4807 ;src\/CheckPlayfield.h:134: DrawNumber(lmostPieceRemoved, 0, 6);//test
      001652 DD 4E FD         [19] 4808 	ld	c, -3 (ix)
      001655 06 00            [ 7] 4809 	ld	b, #0x00
      001657 3E 06            [ 7] 4810 	ld	a, #0x06
      001659 F5               [11] 4811 	push	af
      00165A 33               [ 6] 4812 	inc	sp
      00165B AF               [ 4] 4813 	xor	a, a
      00165C F5               [11] 4814 	push	af
      00165D 33               [ 6] 4815 	inc	sp
      00165E C5               [11] 4816 	push	bc
      00165F CDrDAr07         [17] 4817 	call	_DrawNumber
      001662 F1               [10] 4818 	pop	af
      001663 F1               [10] 4819 	pop	af
                                   4820 ;src\/CheckPlayfield.h:135: DrawNumber(upmostPieceRemoved, 0, 7);//test
      001664 DD 4E FE         [19] 4821 	ld	c, -2 (ix)
      001667 06 00            [ 7] 4822 	ld	b, #0x00
      001669 3E 07            [ 7] 4823 	ld	a, #0x07
      00166B F5               [11] 4824 	push	af
      00166C 33               [ 6] 4825 	inc	sp
      00166D AF               [ 4] 4826 	xor	a, a
      00166E F5               [11] 4827 	push	af
      00166F 33               [ 6] 4828 	inc	sp
      001670 C5               [11] 4829 	push	bc
      001671 CDrDAr07         [17] 4830 	call	_DrawNumber
      001674 F1               [10] 4831 	pop	af
      001675 F1               [10] 4832 	pop	af
                                   4833 ;src\/CheckPlayfield.h:138: while(counter-- > 0) {
      001676 DD 36 FD 48      [19] 4834 	ld	-3 (ix), #0x48
      00167A                       4835 00161$:
      00167A DD 4E FD         [19] 4836 	ld	c, -3 (ix)
      00167D DD 35 FD         [23] 4837 	dec	-3 (ix)
      001680 79               [ 4] 4838 	ld	a, c
      001681 B7               [ 4] 4839 	or	a, a
      001682 CArA1r17         [10] 4840 	jp	Z, 00163$
                                   4841 ;src\/CheckPlayfield.h:139: word lastJiffy = JIFFY;
      001685 ED 4B 9E FC      [20] 4842 	ld	bc, (_JIFFY)
                                   4843 ;src\/CheckPlayfield.h:140: while (lastJiffy == JIFFY) {
      001689                       4844 00137$:
      001689 2A 9E FC         [16] 4845 	ld	hl, (_JIFFY)
      00168C BF               [ 4] 4846 	cp	a, a
      00168D ED 42            [15] 4847 	sbc	hl, bc
      00168F 28 F8            [12] 4848 	jr	Z, 00137$
                                   4849 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001691 3E 0C            [ 7] 4850 	ld	a, #0x0c
      001693 DD 96 FD         [19] 4851 	sub	a, -3 (ix)
      001696 3E 00            [ 7] 4852 	ld	a, #0x00
      001698 17               [ 4] 4853 	rla
      001699 DD 77 F7         [19] 4854 	ld	-9 (ix), a
      00169C 3E 09            [ 7] 4855 	ld	a, #0x09
      00169E DD 96 FD         [19] 4856 	sub	a, -3 (ix)
      0016A1 3E 00            [ 7] 4857 	ld	a, #0x00
      0016A3 17               [ 4] 4858 	rla
      0016A4 DD 77 F8         [19] 4859 	ld	-8 (ix), a
      0016A7 3E 06            [ 7] 4860 	ld	a, #0x06
      0016A9 DD 96 FD         [19] 4861 	sub	a, -3 (ix)
      0016AC 3E 00            [ 7] 4862 	ld	a, #0x00
      0016AE 17               [ 4] 4863 	rla
      0016AF DD 77 F9         [19] 4864 	ld	-7 (ix), a
      0016B2 3E 03            [ 7] 4865 	ld	a, #0x03
      0016B4 DD 96 FD         [19] 4866 	sub	a, -3 (ix)
      0016B7 3E 00            [ 7] 4867 	ld	a, #0x00
      0016B9 17               [ 4] 4868 	rla
      0016BA DD 77 FA         [19] 4869 	ld	-6 (ix), a
      0016BD DD 36 FE 00      [19] 4870 	ld	-2 (ix), #0
      0016C1                       4871 00220$:
      0016C1 DD 7E FE         [19] 4872 	ld	a, -2 (ix)
      0016C4 D6 0C            [ 7] 4873 	sub	a, #0x0c
      0016C6 30 B2            [12] 4874 	jr	NC, 00161$
                                   4875 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016C8 DD 36 FF 00      [19] 4876 	ld	-1 (ix), #0
      0016CC                       4877 00217$:
      0016CC DD 7E FF         [19] 4878 	ld	a, -1 (ix)
      0016CF D6 06            [ 7] 4879 	sub	a, #0x06
      0016D1 D2r9Br17         [10] 4880 	jp	NC, 00221$
                                   4881 ;src\/CheckPlayfield.h:148: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0016D4 DD 4E FF         [19] 4882 	ld	c, -1 (ix)
      0016D7 06 00            [ 7] 4883 	ld	b, #0x00
      0016D9 69               [ 4] 4884 	ld	l, c
      0016DA 60               [ 4] 4885 	ld	h, b
      0016DB 29               [11] 4886 	add	hl, hl
      0016DC 09               [11] 4887 	add	hl, bc
      0016DD 29               [11] 4888 	add	hl, hl
      0016DE 29               [11] 4889 	add	hl, hl
      0016DF 11r00r00         [10] 4890 	ld	de, #_playfield
      0016E2 19               [11] 4891 	add	hl, de
      0016E3 DD 5E FE         [19] 4892 	ld	e, -2 (ix)
      0016E6 16 00            [ 7] 4893 	ld	d, #0x00
      0016E8 19               [11] 4894 	add	hl, de
      0016E9 7E               [ 7] 4895 	ld	a, (hl)
      0016EA 07               [ 4] 4896 	rlca
      0016EB D2r95r17         [10] 4897 	jp	NC,00218$
                                   4898 ;src\/CheckPlayfield.h:160: if(counter > 12) {
      0016EE DD 7E F7         [19] 4899 	ld	a, -9 (ix)
      0016F1 B7               [ 4] 4900 	or	a, a
      0016F2 28 49            [12] 4901 	jr	Z, 00155$
                                   4902 ;src\/CheckPlayfield.h:161: if(JIFFY & 0b00000011) {
      0016F4 2A 9E FC         [16] 4903 	ld	hl, (_JIFFY)
      0016F7 DD 75 FB         [19] 4904 	ld	-5 (ix), l
      0016FA DD 74 FC         [19] 4905 	ld	-4 (ix), h
      0016FD DD 7E FB         [19] 4906 	ld	a, -5 (ix)
      001700 E6 03            [ 7] 4907 	and	a, #0x03
      001702 28 28            [12] 4908 	jr	Z, 00143$
                                   4909 ;src\/CheckPlayfield.h:162: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001704 DD 4E FF         [19] 4910 	ld	c, -1 (ix)
      001707 06 00            [ 7] 4911 	ld	b, #0x00
      001709 69               [ 4] 4912 	ld	l, c
      00170A 60               [ 4] 4913 	ld	h, b
      00170B 29               [11] 4914 	add	hl, hl
      00170C 09               [11] 4915 	add	hl, bc
      00170D 29               [11] 4916 	add	hl, hl
      00170E 29               [11] 4917 	add	hl, hl
      00170F 11r00r00         [10] 4918 	ld	de, #_playfield
      001712 19               [11] 4919 	add	hl, de
      001713 DD 5E FE         [19] 4920 	ld	e, -2 (ix)
      001716 16 00            [ 7] 4921 	ld	d, #0x00
      001718 19               [11] 4922 	add	hl, de
      001719 7E               [ 7] 4923 	ld	a, (hl)
      00171A CB BF            [ 8] 4924 	res	7, a
      00171C F5               [11] 4925 	push	af
      00171D 33               [ 6] 4926 	inc	sp
      00171E DD 66 FE         [19] 4927 	ld	h, -2 (ix)
      001721 DD 6E FF         [19] 4928 	ld	l, -1 (ix)
      001724 E5               [11] 4929 	push	hl
      001725 CDr6Dr0F         [17] 4930 	call	_DrawBlock
      001728 F1               [10] 4931 	pop	af
      001729 33               [ 6] 4932 	inc	sp
      00172A 18 69            [12] 4933 	jr	00218$
      00172C                       4934 00143$:
                                   4935 ;src\/CheckPlayfield.h:165: DrawBlock(col, line, EMPTY);
      00172C AF               [ 4] 4936 	xor	a, a
      00172D F5               [11] 4937 	push	af
      00172E 33               [ 6] 4938 	inc	sp
      00172F DD 66 FE         [19] 4939 	ld	h, -2 (ix)
      001732 DD 6E FF         [19] 4940 	ld	l, -1 (ix)
      001735 E5               [11] 4941 	push	hl
      001736 CDr6Dr0F         [17] 4942 	call	_DrawBlock
      001739 F1               [10] 4943 	pop	af
      00173A 33               [ 6] 4944 	inc	sp
      00173B 18 58            [12] 4945 	jr	00218$
      00173D                       4946 00155$:
                                   4947 ;src\/CheckPlayfield.h:170: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      00173D DD 7E F8         [19] 4948 	ld	a, -8 (ix)
      001740 B7               [ 4] 4949 	or	a, a
      001741 28 12            [12] 4950 	jr	Z, 00152$
      001743 26 2A            [ 7] 4951 	ld	h, #0x2a
      001745 DD 6E FE         [19] 4952 	ld	l, -2 (ix)
      001748 E5               [11] 4953 	push	hl
      001749 DD 7E FF         [19] 4954 	ld	a, -1 (ix)
      00174C F5               [11] 4955 	push	af
      00174D 33               [ 6] 4956 	inc	sp
      00174E CDrDAr0F         [17] 4957 	call	_DrawBlock_SameTile
      001751 F1               [10] 4958 	pop	af
      001752 33               [ 6] 4959 	inc	sp
      001753 18 40            [12] 4960 	jr	00218$
      001755                       4961 00152$:
                                   4962 ;src\/CheckPlayfield.h:171: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001755 DD 7E F9         [19] 4963 	ld	a, -7 (ix)
      001758 B7               [ 4] 4964 	or	a, a
      001759 28 12            [12] 4965 	jr	Z, 00149$
      00175B 26 2B            [ 7] 4966 	ld	h, #0x2b
      00175D DD 6E FE         [19] 4967 	ld	l, -2 (ix)
      001760 E5               [11] 4968 	push	hl
      001761 DD 7E FF         [19] 4969 	ld	a, -1 (ix)
      001764 F5               [11] 4970 	push	af
      001765 33               [ 6] 4971 	inc	sp
      001766 CDrDAr0F         [17] 4972 	call	_DrawBlock_SameTile
      001769 F1               [10] 4973 	pop	af
      00176A 33               [ 6] 4974 	inc	sp
      00176B 18 28            [12] 4975 	jr	00218$
      00176D                       4976 00149$:
                                   4977 ;src\/CheckPlayfield.h:172: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00176D DD 7E FA         [19] 4978 	ld	a, -6 (ix)
      001770 B7               [ 4] 4979 	or	a, a
      001771 28 12            [12] 4980 	jr	Z, 00146$
      001773 26 2C            [ 7] 4981 	ld	h, #0x2c
      001775 DD 6E FE         [19] 4982 	ld	l, -2 (ix)
      001778 E5               [11] 4983 	push	hl
      001779 DD 7E FF         [19] 4984 	ld	a, -1 (ix)
      00177C F5               [11] 4985 	push	af
      00177D 33               [ 6] 4986 	inc	sp
      00177E CDrDAr0F         [17] 4987 	call	_DrawBlock_SameTile
      001781 F1               [10] 4988 	pop	af
      001782 33               [ 6] 4989 	inc	sp
      001783 18 10            [12] 4990 	jr	00218$
      001785                       4991 00146$:
                                   4992 ;src\/CheckPlayfield.h:173: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001785 26 2D            [ 7] 4993 	ld	h, #0x2d
      001787 DD 6E FE         [19] 4994 	ld	l, -2 (ix)
      00178A E5               [11] 4995 	push	hl
      00178B DD 7E FF         [19] 4996 	ld	a, -1 (ix)
      00178E F5               [11] 4997 	push	af
      00178F 33               [ 6] 4998 	inc	sp
      001790 CDrDAr0F         [17] 4999 	call	_DrawBlock_SameTile
      001793 F1               [10] 5000 	pop	af
      001794 33               [ 6] 5001 	inc	sp
      001795                       5002 00218$:
                                   5003 ;src\/CheckPlayfield.h:146: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001795 DD 34 FF         [23] 5004 	inc	-1 (ix)
      001798 C3rCCr16         [10] 5005 	jp	00217$
      00179B                       5006 00221$:
                                   5007 ;src\/CheckPlayfield.h:145: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00179B DD 34 FE         [23] 5008 	inc	-2 (ix)
      00179E C3rC1r16         [10] 5009 	jp	00220$
      0017A1                       5010 00163$:
                                   5011 ;src\/CheckPlayfield.h:184: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0017A1 DD 36 FD 00      [19] 5012 	ld	-3 (ix), #0
      0017A5                       5013 00229$:
      0017A5 DD 7E FD         [19] 5014 	ld	a, -3 (ix)
      0017A8 D6 0C            [ 7] 5015 	sub	a, #0x0c
      0017AA D2r88r18         [10] 5016 	jp	NC, 00172$
                                   5017 ;src\/CheckPlayfield.h:185: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0017AD DD 36 FE 00      [19] 5018 	ld	-2 (ix), #0
      0017B1                       5019 00226$:
      0017B1 DD 7E FE         [19] 5020 	ld	a, -2 (ix)
      0017B4 D6 06            [ 7] 5021 	sub	a, #0x06
      0017B6 D2r82r18         [10] 5022 	jp	NC, 00230$
                                   5023 ;src\/CheckPlayfield.h:187: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0017B9 DD 4E FE         [19] 5024 	ld	c, -2 (ix)
      0017BC 06 00            [ 7] 5025 	ld	b, #0x00
      0017BE 69               [ 4] 5026 	ld	l, c
      0017BF 60               [ 4] 5027 	ld	h, b
      0017C0 29               [11] 5028 	add	hl, hl
      0017C1 09               [11] 5029 	add	hl, bc
      0017C2 29               [11] 5030 	add	hl, hl
      0017C3 29               [11] 5031 	add	hl, hl
      0017C4 EB               [ 4] 5032 	ex	de, hl
      0017C5 21r00r00         [10] 5033 	ld	hl, #_playfield
      0017C8 19               [11] 5034 	add	hl, de
      0017C9 DD 75 FB         [19] 5035 	ld	-5 (ix), l
      0017CC DD 74 FC         [19] 5036 	ld	-4 (ix), h
      0017CF DD 7E FB         [19] 5037 	ld	a, -5 (ix)
      0017D2 DD 86 FD         [19] 5038 	add	a, -3 (ix)
      0017D5 4F               [ 4] 5039 	ld	c, a
      0017D6 DD 7E FC         [19] 5040 	ld	a, -4 (ix)
      0017D9 CE 00            [ 7] 5041 	adc	a, #0x00
      0017DB 47               [ 4] 5042 	ld	b, a
      0017DC 0A               [ 7] 5043 	ld	a, (bc)
      0017DD 07               [ 4] 5044 	rlca
      0017DE D2r7Cr18         [10] 5045 	jp	NC,00227$
                                   5046 ;src\/CheckPlayfield.h:189: blocksRemoved++;
      0017E1 2Ar04r00         [16] 5047 	ld	hl, (_blocksRemoved)
      0017E4 23               [ 6] 5048 	inc	hl
      0017E5 22r04r00         [16] 5049 	ld	(_blocksRemoved), hl
                                   5050 ;src\/CheckPlayfield.h:192: for(byte line1 = line; line1 > 0; line1--) {
      0017E8 DD 7E FB         [19] 5051 	ld	a, -5 (ix)
      0017EB DD 77 F7         [19] 5052 	ld	-9 (ix), a
      0017EE DD 7E FC         [19] 5053 	ld	a, -4 (ix)
      0017F1 DD 77 F8         [19] 5054 	ld	-8 (ix), a
      0017F4 DD 7E FD         [19] 5055 	ld	a, -3 (ix)
      0017F7 DD 77 FF         [19] 5056 	ld	-1 (ix), a
      0017FA                       5057 00223$:
      0017FA DD 7E FF         [19] 5058 	ld	a, -1 (ix)
      0017FD B7               [ 4] 5059 	or	a, a
      0017FE 28 7C            [12] 5060 	jr	Z, 00227$
                                   5061 ;src\/CheckPlayfield.h:193: byte linesToBeRemoved = 1;
      001800 0E 01            [ 7] 5062 	ld	c, #0x01
                                   5063 ;src\/CheckPlayfield.h:194: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001802 DD 7E FF         [19] 5064 	ld	a, -1 (ix)
      001805 DD 77 FC         [19] 5065 	ld	-4 (ix), a
      001808 3D               [ 4] 5066 	dec	a
      001809 DD 86 F7         [19] 5067 	add	a, -9 (ix)
      00180C 5F               [ 4] 5068 	ld	e, a
      00180D 3E 00            [ 7] 5069 	ld	a, #0x00
      00180F DD 8E F8         [19] 5070 	adc	a, -8 (ix)
      001812 57               [ 4] 5071 	ld	d, a
      001813 1A               [ 7] 5072 	ld	a, (de)
      001814 07               [ 4] 5073 	rlca
      001815 30 02            [12] 5074 	jr	NC, 00165$
      001817 0E 02            [ 7] 5075 	ld	c, #0x02
      001819                       5076 00165$:
                                   5077 ;src\/CheckPlayfield.h:195: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001819 DD 7E FC         [19] 5078 	ld	a, -4 (ix)
      00181C 3D               [ 4] 5079 	dec	a
      00181D 3D               [ 4] 5080 	dec	a
      00181E DD 86 F7         [19] 5081 	add	a, -9 (ix)
      001821 5F               [ 4] 5082 	ld	e, a
      001822 3E 00            [ 7] 5083 	ld	a, #0x00
      001824 DD 8E F8         [19] 5084 	adc	a, -8 (ix)
      001827 57               [ 4] 5085 	ld	d, a
      001828 1A               [ 7] 5086 	ld	a, (de)
      001829 07               [ 4] 5087 	rlca
      00182A 30 01            [12] 5088 	jr	NC, 00167$
      00182C 0C               [ 4] 5089 	inc	c
      00182D                       5090 00167$:
                                   5091 ;src\/CheckPlayfield.h:199: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      00182D DD 7E F7         [19] 5092 	ld	a, -9 (ix)
      001830 DD 86 FF         [19] 5093 	add	a, -1 (ix)
      001833 DD 77 F9         [19] 5094 	ld	-7 (ix), a
      001836 DD 7E F8         [19] 5095 	ld	a, -8 (ix)
      001839 CE 00            [ 7] 5096 	adc	a, #0x00
      00183B DD 77 FA         [19] 5097 	ld	-6 (ix), a
      00183E DD 6E FF         [19] 5098 	ld	l, -1 (ix)
      001841 26 00            [ 7] 5099 	ld	h, #0x00
      001843 59               [ 4] 5100 	ld	e, c
      001844 16 00            [ 7] 5101 	ld	d, #0x00
      001846 BF               [ 4] 5102 	cp	a, a
      001847 ED 52            [15] 5103 	sbc	hl, de
      001849 CB 7C            [ 8] 5104 	bit	7, h
      00184B 20 18            [12] 5105 	jr	NZ, 00237$
      00184D DD 7E FF         [19] 5106 	ld	a, -1 (ix)
      001850 91               [ 4] 5107 	sub	a, c
      001851 DD 86 F7         [19] 5108 	add	a, -9 (ix)
      001854 4F               [ 4] 5109 	ld	c, a
      001855 3E 00            [ 7] 5110 	ld	a, #0x00
      001857 DD 8E F8         [19] 5111 	adc	a, -8 (ix)
      00185A 47               [ 4] 5112 	ld	b, a
      00185B 0A               [ 7] 5113 	ld	a, (bc)
      00185C DD 77 FB         [19] 5114 	ld	-5 (ix), a
      00185F DD 36 FC 00      [19] 5115 	ld	-4 (ix), #0
      001863 18 07            [12] 5116 	jr	00238$
      001865                       5117 00237$:
      001865 AF               [ 4] 5118 	xor	a, a
      001866 DD 77 FB         [19] 5119 	ld	-5 (ix), a
      001869 DD 77 FC         [19] 5120 	ld	-4 (ix), a
      00186C                       5121 00238$:
      00186C DD 7E FB         [19] 5122 	ld	a, -5 (ix)
      00186F DD 6E F9         [19] 5123 	ld	l, -7 (ix)
      001872 DD 66 FA         [19] 5124 	ld	h, -6 (ix)
      001875 77               [ 7] 5125 	ld	(hl), a
                                   5126 ;src\/CheckPlayfield.h:192: for(byte line1 = line; line1 > 0; line1--) {
      001876 DD 35 FF         [23] 5127 	dec	-1 (ix)
      001879 C3rFAr17         [10] 5128 	jp	00223$
      00187C                       5129 00227$:
                                   5130 ;src\/CheckPlayfield.h:185: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00187C DD 34 FE         [23] 5131 	inc	-2 (ix)
      00187F C3rB1r17         [10] 5132 	jp	00226$
      001882                       5133 00230$:
                                   5134 ;src\/CheckPlayfield.h:184: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001882 DD 34 FD         [23] 5135 	inc	-3 (ix)
      001885 C3rA5r17         [10] 5136 	jp	00229$
      001888                       5137 00172$:
                                   5138 ;src\/CheckPlayfield.h:206: oldLevel = level;
      001888 3Ar06r00         [13] 5139 	ld	a, (#_level + 0)
      00188B 4F               [ 4] 5140 	ld	c, a
                                   5141 ;src\/CheckPlayfield.h:207: if(blocksRemoved >= 90) {
      00188C 21r04r00         [10] 5142 	ld	hl, #_blocksRemoved
      00188F 46               [ 7] 5143 	ld	b, (hl)
      001890 23               [ 6] 5144 	inc	hl
      001891 56               [ 7] 5145 	ld	d, (hl)
      001892 78               [ 4] 5146 	ld	a, b
      001893 D6 5A            [ 7] 5147 	sub	a, #0x5a
      001895 7A               [ 4] 5148 	ld	a, d
      001896 DE 00            [ 7] 5149 	sbc	a, #0x00
      001898 38 19            [12] 5150 	jr	C, 00180$
                                   5151 ;src\/CheckPlayfield.h:208: level = (blocksRemoved / 30) + 1;
      00189A C5               [11] 5152 	push	bc
      00189B 21 1E 00         [10] 5153 	ld	hl, #0x001e
      00189E E5               [11] 5154 	push	hl
      00189F 58               [ 4] 5155 	ld	e, b
      0018A0 D5               [11] 5156 	push	de
      0018A1 CDr00r00         [17] 5157 	call	__divuint
      0018A4 F1               [10] 5158 	pop	af
      0018A5 F1               [10] 5159 	pop	af
      0018A6 C1               [10] 5160 	pop	bc
      0018A7 7D               [ 4] 5161 	ld	a, l
      0018A8 3C               [ 4] 5162 	inc	a
      0018A9 32r06r00         [13] 5163 	ld	(_level+0), a
                                   5164 ;src\/CheckPlayfield.h:209: speed = 15;
      0018AC 21r93r00         [10] 5165 	ld	hl, #_speed
      0018AF 36 0F            [10] 5166 	ld	(hl), #0x0f
      0018B1 18 32            [12] 5167 	jr	00181$
      0018B3                       5168 00180$:
                                   5169 ;src\/CheckPlayfield.h:212: else if(blocksRemoved >= 60) { 
      0018B3 78               [ 4] 5170 	ld	a, b
      0018B4 D6 3C            [ 7] 5171 	sub	a, #0x3c
      0018B6 7A               [ 4] 5172 	ld	a, d
      0018B7 DE 00            [ 7] 5173 	sbc	a, #0x00
      0018B9 38 0C            [12] 5174 	jr	C, 00177$
                                   5175 ;src\/CheckPlayfield.h:213: level = 3;
      0018BB 21r06r00         [10] 5176 	ld	hl, #_level
      0018BE 36 03            [10] 5177 	ld	(hl), #0x03
                                   5178 ;src\/CheckPlayfield.h:214: speed = 30;
      0018C0 21r93r00         [10] 5179 	ld	hl, #_speed
      0018C3 36 1E            [10] 5180 	ld	(hl), #0x1e
      0018C5 18 1E            [12] 5181 	jr	00181$
      0018C7                       5182 00177$:
                                   5183 ;src\/CheckPlayfield.h:216: else if(blocksRemoved >= 30) { 
      0018C7 78               [ 4] 5184 	ld	a, b
      0018C8 D6 1E            [ 7] 5185 	sub	a, #0x1e
      0018CA 7A               [ 4] 5186 	ld	a, d
      0018CB DE 00            [ 7] 5187 	sbc	a, #0x00
      0018CD 38 0C            [12] 5188 	jr	C, 00174$
                                   5189 ;src\/CheckPlayfield.h:217: level = 2;
      0018CF 21r06r00         [10] 5190 	ld	hl, #_level
      0018D2 36 02            [10] 5191 	ld	(hl), #0x02
                                   5192 ;src\/CheckPlayfield.h:218: speed = 45;
      0018D4 21r93r00         [10] 5193 	ld	hl, #_speed
      0018D7 36 2D            [10] 5194 	ld	(hl), #0x2d
      0018D9 18 0A            [12] 5195 	jr	00181$
      0018DB                       5196 00174$:
                                   5197 ;src\/CheckPlayfield.h:221: level = 1;
      0018DB 21r06r00         [10] 5198 	ld	hl, #_level
      0018DE 36 01            [10] 5199 	ld	(hl), #0x01
                                   5200 ;src\/CheckPlayfield.h:222: speed = 60;
      0018E0 21r93r00         [10] 5201 	ld	hl, #_speed
      0018E3 36 3C            [10] 5202 	ld	(hl), #0x3c
      0018E5                       5203 00181$:
                                   5204 ;src\/CheckPlayfield.h:225: if(oldLevel != level) {
      0018E5 3Ar06r00         [13] 5205 	ld	a,(#_level + 0)
      0018E8 91               [ 4] 5206 	sub	a, c
      0018E9 28 05            [12] 5207 	jr	Z, 00183$
                                   5208 ;src\/CheckPlayfield.h:226: newLevel = TRUE;
      0018EB 21r07r00         [10] 5209 	ld	hl, #_newLevel
      0018EE 36 01            [10] 5210 	ld	(hl), #0x01
      0018F0                       5211 00183$:
                                   5212 ;src\/CheckPlayfield.h:230: DrawPlayfield();
      0018F0 CDr9Br10         [17] 5213 	call	_DrawPlayfield
                                   5214 ;src\/CheckPlayfield.h:234: CheckIfPlayfieldIsValid(); // test
      0018F3 CDr0Cr11         [17] 5215 	call	_CheckIfPlayfieldIsValid
                                   5216 ;src\/CheckPlayfield.h:236: DrawScore();
      0018F6 CDr66r0A         [17] 5217 	call	_DrawScore
                                   5218 ;src\/CheckPlayfield.h:238: iteration++;
      0018F9 DD 34 04         [23] 5219 	inc	4 (ix)
                                   5220 ;src\/CheckPlayfield.h:239: CheckPlayfield(iteration);  
      0018FC DD 7E 04         [19] 5221 	ld	a, 4 (ix)
      0018FF F5               [11] 5222 	push	af
      001900 33               [ 6] 5223 	inc	sp
      001901 CDrC0r11         [17] 5224 	call	_CheckPlayfield
      001904                       5225 00231$:
                                   5226 ;src\/CheckPlayfield.h:244: }
      001904 DD F9            [10] 5227 	ld	sp, ix
      001906 DD E1            [14] 5228 	pop	ix
      001908 C9               [10] 5229 	ret
                                   5230 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   5231 ;	---------------------------------
                                   5232 ; Function RandomIndex
                                   5233 ; ---------------------------------
      001909                       5234 _RandomIndex::
                                   5235 ;src\/GameLogic.h:5: do {
      001909                       5236 00101$:
                                   5237 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001909 CDrA3r00         [17] 5238 	call	_GetRandom
      00190C 7D               [ 4] 5239 	ld	a, l
      00190D E6 07            [ 7] 5240 	and	a, #0x07
      00190F 6F               [ 4] 5241 	ld	l, a
                                   5242 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001910 3E 04            [ 7] 5243 	ld	a, #0x04
      001912 95               [ 4] 5244 	sub	a, l
      001913 38 F4            [12] 5245 	jr	C, 00101$
                                   5246 ;src\/GameLogic.h:10: return random;
                                   5247 ;src\/GameLogic.h:11: }
      001915 C9               [10] 5248 	ret
                                   5249 ;src\/GameLogic.h:13: void RandomPiece() {
                                   5250 ;	---------------------------------
                                   5251 ; Function RandomPiece
                                   5252 ; ---------------------------------
      001916                       5253 _RandomPiece::
                                   5254 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001916 01r18r00         [10] 5255 	ld	bc, #_pieces+0
      001919 C5               [11] 5256 	push	bc
      00191A CDr09r19         [17] 5257 	call	_RandomIndex
      00191D C1               [10] 5258 	pop	bc
      00191E 26 00            [ 7] 5259 	ld	h, #0x00
      001920 09               [11] 5260 	add	hl, bc
      001921 7E               [ 7] 5261 	ld	a, (hl)
      001922 32r90r00         [13] 5262 	ld	(_topPiece+0), a
                                   5263 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001925 C5               [11] 5264 	push	bc
      001926 CDr09r19         [17] 5265 	call	_RandomIndex
      001929 C1               [10] 5266 	pop	bc
      00192A 26 00            [ 7] 5267 	ld	h, #0x00
      00192C 09               [11] 5268 	add	hl, bc
      00192D 7E               [ 7] 5269 	ld	a, (hl)
      00192E 32r91r00         [13] 5270 	ld	(_midPiece+0), a
                                   5271 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001931 C5               [11] 5272 	push	bc
      001932 CDr09r19         [17] 5273 	call	_RandomIndex
      001935 C1               [10] 5274 	pop	bc
      001936 26 00            [ 7] 5275 	ld	h, #0x00
      001938 09               [11] 5276 	add	hl, bc
      001939 7E               [ 7] 5277 	ld	a, (hl)
      00193A 32r92r00         [13] 5278 	ld	(_bottomPiece+0), a
                                   5279 ;src\/GameLogic.h:17: }
      00193D C9               [10] 5280 	ret
                                   5281 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   5282 ;	---------------------------------
                                   5283 ; Function UpdateAndDrawPieceStatic
                                   5284 ; ---------------------------------
      00193E                       5285 _UpdateAndDrawPieceStatic::
                                   5286 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      00193E 01r00r00         [10] 5287 	ld	bc, #_playfield+0
      001941 ED 5Br01r00      [20] 5288 	ld	de, (_col)
      001945 16 00            [ 7] 5289 	ld	d, #0x00
      001947 6B               [ 4] 5290 	ld	l, e
      001948 62               [ 4] 5291 	ld	h, d
      001949 29               [11] 5292 	add	hl, hl
      00194A 19               [11] 5293 	add	hl, de
      00194B 29               [11] 5294 	add	hl, hl
      00194C 29               [11] 5295 	add	hl, hl
      00194D 09               [11] 5296 	add	hl, bc
      00194E EB               [ 4] 5297 	ex	de, hl
      00194F 3Ar02r00         [13] 5298 	ld	a, (#_line + 0)
      001952 6F               [ 4] 5299 	ld	l, a
      001953 26 00            [ 7] 5300 	ld	h, #0x00
      001955 19               [11] 5301 	add	hl, de
      001956 3Ar90r00         [13] 5302 	ld	a,(#_topPiece + 0)
      001959 77               [ 7] 5303 	ld	(hl), a
                                   5304 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      00195A ED 5Br01r00      [20] 5305 	ld	de, (_col)
      00195E 16 00            [ 7] 5306 	ld	d, #0x00
      001960 6B               [ 4] 5307 	ld	l, e
      001961 62               [ 4] 5308 	ld	h, d
      001962 29               [11] 5309 	add	hl, hl
      001963 19               [11] 5310 	add	hl, de
      001964 29               [11] 5311 	add	hl, hl
      001965 29               [11] 5312 	add	hl, hl
      001966 09               [11] 5313 	add	hl, bc
      001967 EB               [ 4] 5314 	ex	de, hl
      001968 3Ar02r00         [13] 5315 	ld	a, (#_line + 0)
      00196B 6F               [ 4] 5316 	ld	l, a
      00196C 2C               [ 4] 5317 	inc	l
      00196D 26 00            [ 7] 5318 	ld	h, #0x00
      00196F 19               [11] 5319 	add	hl, de
      001970 3Ar91r00         [13] 5320 	ld	a,(#_midPiece + 0)
      001973 77               [ 7] 5321 	ld	(hl), a
                                   5322 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001974 ED 5Br01r00      [20] 5323 	ld	de, (_col)
      001978 16 00            [ 7] 5324 	ld	d, #0x00
      00197A 6B               [ 4] 5325 	ld	l, e
      00197B 62               [ 4] 5326 	ld	h, d
      00197C 29               [11] 5327 	add	hl, hl
      00197D 19               [11] 5328 	add	hl, de
      00197E 29               [11] 5329 	add	hl, hl
      00197F 29               [11] 5330 	add	hl, hl
      001980 09               [11] 5331 	add	hl, bc
      001981 EB               [ 4] 5332 	ex	de, hl
      001982 3Ar02r00         [13] 5333 	ld	a, (#_line + 0)
      001985 6F               [ 4] 5334 	ld	l, a
      001986 2C               [ 4] 5335 	inc	l
      001987 2C               [ 4] 5336 	inc	l
      001988 26 00            [ 7] 5337 	ld	h, #0x00
      00198A 19               [11] 5338 	add	hl, de
      00198B 3Ar92r00         [13] 5339 	ld	a,(#_bottomPiece + 0)
      00198E 77               [ 7] 5340 	ld	(hl), a
                                   5341 ;src\/GameLogic.h:25: DrawPiece(line);
      00198F C5               [11] 5342 	push	bc
      001990 3Ar02r00         [13] 5343 	ld	a,(#_line + 0)
      001993 F5               [11] 5344 	push	af
      001994 33               [ 6] 5345 	inc	sp
      001995 CDr78r10         [17] 5346 	call	_DrawPiece
      001998 33               [ 6] 5347 	inc	sp
      001999 C1               [10] 5348 	pop	bc
                                   5349 ;src\/GameLogic.h:28: col = INITIAL_COL;
      00199A 3E 02            [ 7] 5350 	ld	a, #0x02
      00199C 32r01r00         [13] 5351 	ld	(#_col), a
                                   5352 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   5353 ;src\/GameLogic.h:31: counter = 0;
      00199F 3E 00            [ 7] 5354 	ld	a,#0x00
      0019A1 32r02r00         [13] 5355 	ld	(#_line),a
      0019A4 32r03r00         [13] 5356 	ld	(#_counter), a
                                   5357 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      0019A7 3Ar18r00         [13] 5358 	ld	a, (#_playfield + 24)
      0019AA B7               [ 4] 5359 	or	a, a
      0019AB 20 0C            [12] 5360 	jr	NZ, 00101$
                                   5361 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      0019AD 3Ar19r00         [13] 5362 	ld	a, (#_playfield + 25)
      0019B0 B7               [ 4] 5363 	or	a, a
      0019B1 20 06            [12] 5364 	jr	NZ, 00101$
                                   5365 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      0019B3 3Ar1Ar00         [13] 5366 	ld	a, (#_playfield + 26)
      0019B6 B7               [ 4] 5367 	or	a, a
      0019B7 28 0B            [12] 5368 	jr	Z, 00102$
      0019B9                       5369 00101$:
                                   5370 ;src\/GameLogic.h:37: gameOver = TRUE;
      0019B9 FD 21r00r00      [14] 5371 	ld	iy, #_gameOver
      0019BD FD 36 00 01      [19] 5372 	ld	0 (iy), #0x01
      0019C1 C3r9Br10         [10] 5373 	jp	_DrawPlayfield
      0019C4                       5374 00102$:
                                   5375 ;src\/GameLogic.h:40: RandomPiece();
      0019C4 CDr16r19         [17] 5376 	call	_RandomPiece
                                   5377 ;src\/GameLogic.h:42: CheckPlayfield(1);
      0019C7 3E 01            [ 7] 5378 	ld	a, #0x01
      0019C9 F5               [11] 5379 	push	af
      0019CA 33               [ 6] 5380 	inc	sp
      0019CB CDrC0r11         [17] 5381 	call	_CheckPlayfield
      0019CE 33               [ 6] 5382 	inc	sp
                                   5383 ;src\/GameLogic.h:45: DrawPlayfield();
                                   5384 ;src\/GameLogic.h:46: }
      0019CF C3r9Br10         [10] 5385 	jp	_DrawPlayfield
                                   5386 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   5387 ;	---------------------------------
                                   5388 ; Function BlinkPauseText
                                   5389 ; ---------------------------------
      0019D2                       5390 _BlinkPauseText::
                                   5391 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      0019D2 2A 9E FC         [16] 5392 	ld	hl, (_JIFFY)
      0019D5 CB 5D            [ 8] 5393 	bit	3, l
      0019D7 28 0E            [12] 5394 	jr	Z, 00102$
                                   5395 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      0019D9 11 0D 0C         [10] 5396 	ld	de, #0x0c0d
      0019DC D5               [11] 5397 	push	de
      0019DD 21rF0r19         [10] 5398 	ld	hl, #___str_4
      0019E0 E5               [11] 5399 	push	hl
      0019E1 CDrA8r07         [17] 5400 	call	_DrawString
      0019E4 F1               [10] 5401 	pop	af
      0019E5 F1               [10] 5402 	pop	af
      0019E6 C9               [10] 5403 	ret
      0019E7                       5404 00102$:
                                   5405 ;src\/GameLogic.h:55: DrawLine(6);
      0019E7 3E 06            [ 7] 5406 	ld	a, #0x06
      0019E9 F5               [11] 5407 	push	af
      0019EA 33               [ 6] 5408 	inc	sp
      0019EB CDr40r10         [17] 5409 	call	_DrawLine
      0019EE 33               [ 6] 5410 	inc	sp
                                   5411 ;src\/GameLogic.h:58: }
      0019EF C9               [10] 5412 	ret
      0019F0                       5413 ___str_4:
      0019F0 50 41 55 53 45        5414 	.ascii "PAUSE"
      0019F5 00                    5415 	.db 0x00
                                   5416 ;src\/GameLogic.h:60: void Pause() {
                                   5417 ;	---------------------------------
                                   5418 ; Function Pause
                                   5419 ; ---------------------------------
      0019F6                       5420 _Pause::
                                   5421 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      0019F6 11 0D 0C         [10] 5422 	ld	de, #0x0c0d
      0019F9 D5               [11] 5423 	push	de
      0019FA 21r30r1A         [10] 5424 	ld	hl, #___str_5
      0019FD E5               [11] 5425 	push	hl
      0019FE CDrA8r07         [17] 5426 	call	_DrawString
      001A01 F1               [10] 5427 	pop	af
      001A02 F1               [10] 5428 	pop	af
                                   5429 ;src\/GameLogic.h:65: while(TRUE) {
      001A03                       5430 00114$:
                                   5431 ;src\/GameLogic.h:67: BlinkPauseText();
      001A03 CDrD2r19         [17] 5432 	call	_BlinkPauseText
                                   5433 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001A06 2E 07            [ 7] 5434 	ld	l, #0x07
      001A08 CDr00r00         [17] 5435 	call	_SNSMAT
                                   5436 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001A0B CB 55            [ 8] 5437 	bit	2, l
      001A0D 28 F4            [12] 5438 	jr	Z, 00114$
                                   5439 ;src\/GameLogic.h:73: while(TRUE) {
      001A0F                       5440 00109$:
                                   5441 ;src\/GameLogic.h:75: BlinkPauseText();
      001A0F CDrD2r19         [17] 5442 	call	_BlinkPauseText
                                   5443 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001A12 2E 07            [ 7] 5444 	ld	l, #0x07
      001A14 CDr00r00         [17] 5445 	call	_SNSMAT
                                   5446 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001A17 CB 55            [ 8] 5447 	bit	2, l
      001A19 20 F4            [12] 5448 	jr	NZ, 00109$
                                   5449 ;src\/GameLogic.h:81: while(TRUE) {
      001A1B                       5450 00104$:
                                   5451 ;src\/GameLogic.h:83: BlinkPauseText();
      001A1B CDrD2r19         [17] 5452 	call	_BlinkPauseText
                                   5453 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001A1E 2E 07            [ 7] 5454 	ld	l, #0x07
      001A20 CDr00r00         [17] 5455 	call	_SNSMAT
                                   5456 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001A23 CB 55            [ 8] 5457 	bit	2, l
      001A25 28 F4            [12] 5458 	jr	Z, 00104$
                                   5459 ;src\/GameLogic.h:89: DrawLine(6);
      001A27 3E 06            [ 7] 5460 	ld	a, #0x06
      001A29 F5               [11] 5461 	push	af
      001A2A 33               [ 6] 5462 	inc	sp
      001A2B CDr40r10         [17] 5463 	call	_DrawLine
      001A2E 33               [ 6] 5464 	inc	sp
                                   5465 ;src\/GameLogic.h:90: return;
                                   5466 ;src\/GameLogic.h:100: }
      001A2F C9               [10] 5467 	ret
      001A30                       5468 ___str_5:
      001A30 50 41 55 53 45        5469 	.ascii "PAUSE"
      001A35 00                    5470 	.db 0x00
                                   5471 ;src\/GameLogic.h:102: void GameLoop() {
                                   5472 ;	---------------------------------
                                   5473 ; Function GameLoop
                                   5474 ; ---------------------------------
      001A36                       5475 _GameLoop::
      001A36 DD E5            [15] 5476 	push	ix
      001A38 DD 21 00 00      [14] 5477 	ld	ix,#0
      001A3C DD 39            [15] 5478 	add	ix,sp
      001A3E 21 F3 FF         [10] 5479 	ld	hl, #-13
      001A41 39               [11] 5480 	add	hl, sp
      001A42 F9               [ 6] 5481 	ld	sp, hl
                                   5482 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001A43 DD 36 FF 00      [19] 5483 	ld	-1 (ix), #0
      001A47 DD 36 F3 00      [19] 5484 	ld	-13 (ix), #0
                                   5485 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001A4B DD 36 F4 00      [19] 5486 	ld	-12 (ix), #0
      001A4F DD 36 F5 00      [19] 5487 	ld	-11 (ix), #0
                                   5488 ;src\/GameLogic.h:109: while(!gameOver) {
      001A53                       5489 00150$:
      001A53 3Ar00r00         [13] 5490 	ld	a,(#_gameOver + 0)
      001A56 B7               [ 4] 5491 	or	a, a
      001A57 C2rEEr1D         [10] 5492 	jp	NZ, 00152$
                                   5493 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001A5A ED 4B 9E FC      [20] 5494 	ld	bc, (_JIFFY)
                                   5495 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001A5E                       5496 00101$:
      001A5E 2A 9E FC         [16] 5497 	ld	hl, (_JIFFY)
      001A61 BF               [ 4] 5498 	cp	a, a
      001A62 ED 42            [15] 5499 	sbc	hl, bc
      001A64 28 F8            [12] 5500 	jr	Z, 00101$
                                   5501 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001A66 ED 4Br01r00      [20] 5502 	ld	bc, (_col)
      001A6A 06 00            [ 7] 5503 	ld	b, #0x00
      001A6C 69               [ 4] 5504 	ld	l, c
      001A6D 60               [ 4] 5505 	ld	h, b
      001A6E 29               [11] 5506 	add	hl, hl
      001A6F 09               [11] 5507 	add	hl, bc
      001A70 29               [11] 5508 	add	hl, hl
      001A71 29               [11] 5509 	add	hl, hl
      001A72 EB               [ 4] 5510 	ex	de, hl
      001A73 21r00r00         [10] 5511 	ld	hl, #_playfield
      001A76 19               [11] 5512 	add	hl, de
      001A77 EB               [ 4] 5513 	ex	de, hl
      001A78 FD 21r02r00      [14] 5514 	ld	iy, #_line
      001A7C FD 6E 00         [19] 5515 	ld	l, 0 (iy)
      001A7F 26 00            [ 7] 5516 	ld	h, #0x00
      001A81 19               [11] 5517 	add	hl, de
      001A82 36 00            [10] 5518 	ld	(hl), #0x00
                                   5519 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001A84 ED 4Br01r00      [20] 5520 	ld	bc, (_col)
      001A88 06 00            [ 7] 5521 	ld	b, #0x00
      001A8A 69               [ 4] 5522 	ld	l, c
      001A8B 60               [ 4] 5523 	ld	h, b
      001A8C 29               [11] 5524 	add	hl, hl
      001A8D 09               [11] 5525 	add	hl, bc
      001A8E 29               [11] 5526 	add	hl, hl
      001A8F 29               [11] 5527 	add	hl, hl
      001A90 EB               [ 4] 5528 	ex	de, hl
      001A91 21r00r00         [10] 5529 	ld	hl, #_playfield
      001A94 19               [11] 5530 	add	hl, de
      001A95 EB               [ 4] 5531 	ex	de, hl
      001A96 FD 6E 00         [19] 5532 	ld	l, 0 (iy)
      001A99 2C               [ 4] 5533 	inc	l
      001A9A 26 00            [ 7] 5534 	ld	h, #0x00
      001A9C 19               [11] 5535 	add	hl, de
      001A9D 36 00            [10] 5536 	ld	(hl), #0x00
                                   5537 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001A9F ED 4Br01r00      [20] 5538 	ld	bc, (_col)
      001AA3 06 00            [ 7] 5539 	ld	b, #0x00
      001AA5 69               [ 4] 5540 	ld	l, c
      001AA6 60               [ 4] 5541 	ld	h, b
      001AA7 29               [11] 5542 	add	hl, hl
      001AA8 09               [11] 5543 	add	hl, bc
      001AA9 29               [11] 5544 	add	hl, hl
      001AAA 29               [11] 5545 	add	hl, hl
      001AAB EB               [ 4] 5546 	ex	de, hl
      001AAC 21r00r00         [10] 5547 	ld	hl, #_playfield
      001AAF 19               [11] 5548 	add	hl, de
      001AB0 EB               [ 4] 5549 	ex	de, hl
      001AB1 FD 6E 00         [19] 5550 	ld	l, 0 (iy)
      001AB4 2C               [ 4] 5551 	inc	l
      001AB5 2C               [ 4] 5552 	inc	l
      001AB6 26 00            [ 7] 5553 	ld	h, #0x00
      001AB8 19               [11] 5554 	add	hl, de
      001AB9 36 00            [10] 5555 	ld	(hl), #0x00
                                   5556 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001ABB 2E 01            [ 7] 5557 	ld	l, #0x01
      001ABD CDr00r00         [17] 5558 	call	_GTSTCK
      001AC0 DD 75 F6         [19] 5559 	ld	-10 (ix), l
                                   5560 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001AC3 2E 01            [ 7] 5561 	ld	l, #0x01
      001AC5 CDr00r00         [17] 5562 	call	_GTTRIG
      001AC8 DD 75 F7         [19] 5563 	ld	-9 (ix), l
                                   5564 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001ACB 2E 03            [ 7] 5565 	ld	l, #0x03
      001ACD CDr00r00         [17] 5566 	call	_GTTRIG
      001AD0 DD 75 F8         [19] 5567 	ld	-8 (ix), l
                                   5568 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      001AD3 DD 7E F6         [19] 5569 	ld	a, -10 (ix)
                                   5570 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      001AD6 B7               [ 4] 5571 	or	a,a
      001AD7 20 07            [12] 5572 	jr	NZ, 00105$
      001AD9 6F               [ 4] 5573 	ld	l,a
      001ADA CDr00r00         [17] 5574 	call	_GTSTCK
      001ADD DD 75 F6         [19] 5575 	ld	-10 (ix), l
      001AE0                       5576 00105$:
                                   5577 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001AE0 FD 21r02r00      [14] 5578 	ld	iy, #_line
      001AE4 FD 7E 00         [19] 5579 	ld	a, 0 (iy)
      001AE7 DD 77 F9         [19] 5580 	ld	-7 (ix), a
                                   5581 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      001AEA DD 7E FF         [19] 5582 	ld	a, -1 (ix)
      001AED B7               [ 4] 5583 	or	a, a
      001AEE C2rD7r1B         [10] 5584 	jp	NZ, 00118$
                                   5585 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001AF1 FD 7E 00         [19] 5586 	ld	a, 0 (iy)
      001AF4 DD 77 FF         [19] 5587 	ld	-1 (ix), a
                                   5588 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001AF7 FD 21r01r00      [14] 5589 	ld	iy, #_col
      001AFB FD 7E 00         [19] 5590 	ld	a, 0 (iy)
      001AFE DD 77 FA         [19] 5591 	ld	-6 (ix), a
                                   5592 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001B01 DD 7E FF         [19] 5593 	ld	a, -1 (ix)
      001B04 C6 02            [ 7] 5594 	add	a, #0x02
      001B06 DD 77 FB         [19] 5595 	ld	-5 (ix), a
                                   5596 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      001B09 DD 7E F6         [19] 5597 	ld	a, -10 (ix)
      001B0C D6 07            [ 7] 5598 	sub	a, #0x07
      001B0E 20 5F            [12] 5599 	jr	NZ, 00112$
                                   5600 ;src\/GameLogic.h:139: col > 0 && 
      001B10 FD 7E 00         [19] 5601 	ld	a, 0 (iy)
      001B13 B7               [ 4] 5602 	or	a, a
      001B14 28 59            [12] 5603 	jr	Z, 00112$
                                   5604 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      001B16 DD 7E FA         [19] 5605 	ld	a, -6 (ix)
      001B19 C6 FF            [ 7] 5606 	add	a, #0xff
      001B1B DD 77 FF         [19] 5607 	ld	-1 (ix), a
      001B1E 4F               [ 4] 5608 	ld	c, a
      001B1F 07               [ 4] 5609 	rlca
      001B20 9F               [ 4] 5610 	sbc	a, a
      001B21 47               [ 4] 5611 	ld	b, a
      001B22 69               [ 4] 5612 	ld	l, c
      001B23 60               [ 4] 5613 	ld	h, b
      001B24 29               [11] 5614 	add	hl, hl
      001B25 09               [11] 5615 	add	hl, bc
      001B26 29               [11] 5616 	add	hl, hl
      001B27 29               [11] 5617 	add	hl, hl
      001B28 DD 75 FE         [19] 5618 	ld	-2 (ix), l
      001B2B DD 74 FF         [19] 5619 	ld	-1 (ix), h
      001B2E 3Er00            [ 7] 5620 	ld	a, #<(_playfield)
      001B30 DD 86 FE         [19] 5621 	add	a, -2 (ix)
      001B33 DD 77 FC         [19] 5622 	ld	-4 (ix), a
      001B36 3Es00            [ 7] 5623 	ld	a, #>(_playfield)
      001B38 DD 8E FF         [19] 5624 	adc	a, -1 (ix)
      001B3B DD 77 FD         [19] 5625 	ld	-3 (ix), a
      001B3E DD 7E FC         [19] 5626 	ld	a, -4 (ix)
      001B41 DD 86 F9         [19] 5627 	add	a, -7 (ix)
      001B44 DD 77 FE         [19] 5628 	ld	-2 (ix), a
      001B47 DD 7E FD         [19] 5629 	ld	a, -3 (ix)
      001B4A CE 00            [ 7] 5630 	adc	a, #0x00
      001B4C DD 77 FF         [19] 5631 	ld	-1 (ix), a
      001B4F DD 6E FE         [19] 5632 	ld	l, -2 (ix)
      001B52 DD 66 FF         [19] 5633 	ld	h, -1 (ix)
      001B55 7E               [ 7] 5634 	ld	a, (hl)
      001B56 B7               [ 4] 5635 	or	a, a
      001B57 20 16            [12] 5636 	jr	NZ, 00112$
                                   5637 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      001B59 DD 7E FC         [19] 5638 	ld	a, -4 (ix)
      001B5C DD 86 FB         [19] 5639 	add	a, -5 (ix)
      001B5F 4F               [ 4] 5640 	ld	c, a
      001B60 DD 7E FD         [19] 5641 	ld	a, -3 (ix)
      001B63 CE 00            [ 7] 5642 	adc	a, #0x00
      001B65 47               [ 4] 5643 	ld	b, a
      001B66 0A               [ 7] 5644 	ld	a, (bc)
      001B67 B7               [ 4] 5645 	or	a, a
      001B68 20 05            [12] 5646 	jr	NZ, 00112$
                                   5647 ;src\/GameLogic.h:142: col--;
      001B6A FD 35 00         [23] 5648 	dec	0 (iy)
      001B6D 18 68            [12] 5649 	jr	00118$
      001B6F                       5650 00112$:
                                   5651 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      001B6F DD 7E F6         [19] 5652 	ld	a, -10 (ix)
      001B72 D6 03            [ 7] 5653 	sub	a, #0x03
      001B74 20 61            [12] 5654 	jr	NZ, 00118$
                                   5655 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      001B76 FD 21r01r00      [14] 5656 	ld	iy, #_col
      001B7A FD 7E 00         [19] 5657 	ld	a, 0 (iy)
      001B7D D6 05            [ 7] 5658 	sub	a, #0x05
      001B7F 30 56            [12] 5659 	jr	NC, 00118$
                                   5660 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      001B81 DD 7E FA         [19] 5661 	ld	a, -6 (ix)
      001B84 3C               [ 4] 5662 	inc	a
      001B85 DD 77 FF         [19] 5663 	ld	-1 (ix), a
      001B88 4F               [ 4] 5664 	ld	c, a
      001B89 07               [ 4] 5665 	rlca
      001B8A 9F               [ 4] 5666 	sbc	a, a
      001B8B 47               [ 4] 5667 	ld	b, a
      001B8C 69               [ 4] 5668 	ld	l, c
      001B8D 60               [ 4] 5669 	ld	h, b
      001B8E 29               [11] 5670 	add	hl, hl
      001B8F 09               [11] 5671 	add	hl, bc
      001B90 29               [11] 5672 	add	hl, hl
      001B91 29               [11] 5673 	add	hl, hl
      001B92 DD 75 FE         [19] 5674 	ld	-2 (ix), l
      001B95 DD 74 FF         [19] 5675 	ld	-1 (ix), h
      001B98 3Er00            [ 7] 5676 	ld	a, #<(_playfield)
      001B9A DD 86 FE         [19] 5677 	add	a, -2 (ix)
      001B9D DD 77 FC         [19] 5678 	ld	-4 (ix), a
      001BA0 3Es00            [ 7] 5679 	ld	a, #>(_playfield)
      001BA2 DD 8E FF         [19] 5680 	adc	a, -1 (ix)
      001BA5 DD 77 FD         [19] 5681 	ld	-3 (ix), a
      001BA8 DD 7E FC         [19] 5682 	ld	a, -4 (ix)
      001BAB DD 86 F9         [19] 5683 	add	a, -7 (ix)
      001BAE DD 77 FE         [19] 5684 	ld	-2 (ix), a
      001BB1 DD 7E FD         [19] 5685 	ld	a, -3 (ix)
      001BB4 CE 00            [ 7] 5686 	adc	a, #0x00
      001BB6 DD 77 FF         [19] 5687 	ld	-1 (ix), a
      001BB9 DD 6E FE         [19] 5688 	ld	l, -2 (ix)
      001BBC DD 66 FF         [19] 5689 	ld	h, -1 (ix)
      001BBF 7E               [ 7] 5690 	ld	a, (hl)
      001BC0 B7               [ 4] 5691 	or	a, a
      001BC1 20 14            [12] 5692 	jr	NZ, 00118$
                                   5693 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      001BC3 DD 7E FC         [19] 5694 	ld	a, -4 (ix)
      001BC6 DD 86 FB         [19] 5695 	add	a, -5 (ix)
      001BC9 4F               [ 4] 5696 	ld	c, a
      001BCA DD 7E FD         [19] 5697 	ld	a, -3 (ix)
      001BCD CE 00            [ 7] 5698 	adc	a, #0x00
      001BCF 47               [ 4] 5699 	ld	b, a
      001BD0 0A               [ 7] 5700 	ld	a, (bc)
      001BD1 B7               [ 4] 5701 	or	a, a
      001BD2 20 03            [12] 5702 	jr	NZ, 00118$
                                   5703 ;src\/GameLogic.h:148: col++;
      001BD4 FD 34 00         [23] 5704 	inc	0 (iy)
      001BD7                       5705 00118$:
                                   5706 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      001BD7 DD 7E F3         [19] 5707 	ld	a, -13 (ix)
      001BDA B7               [ 4] 5708 	or	a, a
      001BDB C2r9Dr1C         [10] 5709 	jp	NZ, 00132$
                                   5710 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      001BDE DD 7E F6         [19] 5711 	ld	a, -10 (ix)
      001BE1 3D               [ 4] 5712 	dec	a
      001BE2 28 18            [12] 5713 	jr	Z, 00119$
      001BE4 DD 7E F4         [19] 5714 	ld	a, -12 (ix)
      001BE7 B7               [ 4] 5715 	or	a, a
      001BE8 20 06            [12] 5716 	jr	NZ, 00124$
      001BEA DD 7E F7         [19] 5717 	ld	a, -9 (ix)
      001BED 3C               [ 4] 5718 	inc	a
      001BEE 28 0C            [12] 5719 	jr	Z, 00119$
      001BF0                       5720 00124$:
      001BF0 DD 7E F5         [19] 5721 	ld	a, -11 (ix)
      001BF3 B7               [ 4] 5722 	or	a, a
      001BF4 20 1A            [12] 5723 	jr	NZ, 00120$
      001BF6 DD 7E F8         [19] 5724 	ld	a, -8 (ix)
      001BF9 3C               [ 4] 5725 	inc	a
      001BFA 20 14            [12] 5726 	jr	NZ, 00120$
      001BFC                       5727 00119$:
                                   5728 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      001BFC 3Ar92r00         [13] 5729 	ld	a, (#_bottomPiece + 0)
      001BFF 4F               [ 4] 5730 	ld	c, a
                                   5731 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      001C00 3Ar91r00         [13] 5732 	ld	a,(#_midPiece + 0)
      001C03 32r92r00         [13] 5733 	ld	(#_bottomPiece),a
                                   5734 ;src\/GameLogic.h:160: midPiece = topPiece;
      001C06 3Ar90r00         [13] 5735 	ld	a,(#_topPiece + 0)
      001C09 32r91r00         [13] 5736 	ld	(#_midPiece),a
                                   5737 ;src\/GameLogic.h:161: topPiece = temp;
      001C0C 21r90r00         [10] 5738 	ld	hl, #_topPiece
      001C0F 71               [ 7] 5739 	ld	(hl), c
      001C10                       5740 00120$:
                                   5741 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      001C10 DD 7E F6         [19] 5742 	ld	a, -10 (ix)
      001C13 D6 05            [ 7] 5743 	sub	a, #0x05
      001C15 C2r9Dr1C         [10] 5744 	jp	NZ,00132$
                                   5745 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001C18 DD 7E F9         [19] 5746 	ld	a, -7 (ix)
      001C1B DD 77 FE         [19] 5747 	ld	-2 (ix), a
      001C1E DD 7E F9         [19] 5748 	ld	a, -7 (ix)
      001C21 DD 77 FF         [19] 5749 	ld	-1 (ix), a
      001C24                       5750 00154$:
      001C24 DD 7E FF         [19] 5751 	ld	a, -1 (ix)
      001C27 D6 0C            [ 7] 5752 	sub	a, #0x0c
      001C29 30 72            [12] 5753 	jr	NC, 00132$
                                   5754 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      001C2B DD 7E FF         [19] 5755 	ld	a, -1 (ix)
      001C2E D6 09            [ 7] 5756 	sub	a, #0x09
      001C30 28 4C            [12] 5757 	jr	Z, 00125$
      001C32 ED 4Br01r00      [20] 5758 	ld	bc, (_col)
      001C36 06 00            [ 7] 5759 	ld	b, #0x00
      001C38 69               [ 4] 5760 	ld	l, c
      001C39 60               [ 4] 5761 	ld	h, b
      001C3A 29               [11] 5762 	add	hl, hl
      001C3B 09               [11] 5763 	add	hl, bc
      001C3C 29               [11] 5764 	add	hl, hl
      001C3D 29               [11] 5765 	add	hl, hl
      001C3E DD 75 FC         [19] 5766 	ld	-4 (ix), l
      001C41 DD 74 FD         [19] 5767 	ld	-3 (ix), h
      001C44 3Er00            [ 7] 5768 	ld	a, #<(_playfield)
      001C46 DD 86 FC         [19] 5769 	add	a, -4 (ix)
      001C49 DD 77 FA         [19] 5770 	ld	-6 (ix), a
      001C4C 3Es00            [ 7] 5771 	ld	a, #>(_playfield)
      001C4E DD 8E FD         [19] 5772 	adc	a, -3 (ix)
      001C51 DD 77 FB         [19] 5773 	ld	-5 (ix), a
      001C54 DD 7E FF         [19] 5774 	ld	a, -1 (ix)
      001C57 DD 77 FD         [19] 5775 	ld	-3 (ix), a
      001C5A DD 34 FD         [23] 5776 	inc	-3 (ix)
      001C5D DD 34 FD         [23] 5777 	inc	-3 (ix)
      001C60 DD 34 FD         [23] 5778 	inc	-3 (ix)
      001C63 DD 7E FD         [19] 5779 	ld	a, -3 (ix)
      001C66 DD 86 FA         [19] 5780 	add	a, -6 (ix)
      001C69 DD 77 FC         [19] 5781 	ld	-4 (ix), a
      001C6C 3E 00            [ 7] 5782 	ld	a, #0x00
      001C6E DD 8E FB         [19] 5783 	adc	a, -5 (ix)
      001C71 DD 77 FD         [19] 5784 	ld	-3 (ix), a
      001C74 DD 6E FC         [19] 5785 	ld	l, -4 (ix)
      001C77 DD 66 FD         [19] 5786 	ld	h, -3 (ix)
      001C7A 7E               [ 7] 5787 	ld	a, (hl)
      001C7B B7               [ 4] 5788 	or	a, a
      001C7C 28 14            [12] 5789 	jr	Z, 00155$
      001C7E                       5790 00125$:
                                   5791 ;src\/GameLogic.h:170: DrawPiece(line);
      001C7E 3Ar02r00         [13] 5792 	ld	a,(#_line + 0)
      001C81 F5               [11] 5793 	push	af
      001C82 33               [ 6] 5794 	inc	sp
      001C83 CDr78r10         [17] 5795 	call	_DrawPiece
      001C86 33               [ 6] 5796 	inc	sp
                                   5797 ;src\/GameLogic.h:172: line = i;
      001C87 DD 7E FE         [19] 5798 	ld	a, -2 (ix)
      001C8A 32r02r00         [13] 5799 	ld	(#_line),a
                                   5800 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      001C8D CDr3Er19         [17] 5801 	call	_UpdateAndDrawPieceStatic
                                   5802 ;src\/GameLogic.h:175: break;
      001C90 18 0B            [12] 5803 	jr	00132$
      001C92                       5804 00155$:
                                   5805 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      001C92 DD 34 FF         [23] 5806 	inc	-1 (ix)
      001C95 DD 7E FF         [19] 5807 	ld	a, -1 (ix)
      001C98 DD 77 FE         [19] 5808 	ld	-2 (ix), a
      001C9B 18 87            [12] 5809 	jr	00154$
      001C9D                       5810 00132$:
                                   5811 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      001C9D DD 7E F6         [19] 5812 	ld	a, -10 (ix)
      001CA0 DD 77 FF         [19] 5813 	ld	-1 (ix), a
                                   5814 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      001CA3 DD 7E F6         [19] 5815 	ld	a, -10 (ix)
      001CA6 DD 77 F3         [19] 5816 	ld	-13 (ix), a
                                   5817 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      001CA9 DD 7E F7         [19] 5818 	ld	a, -9 (ix)
      001CAC DD 77 F4         [19] 5819 	ld	-12 (ix), a
                                   5820 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      001CAF DD 7E F8         [19] 5821 	ld	a, -8 (ix)
      001CB2 DD 77 F5         [19] 5822 	ld	-11 (ix), a
                                   5823 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      001CB5 2E 07            [ 7] 5824 	ld	l, #0x07
      001CB7 CDr00r00         [17] 5825 	call	_SNSMAT
                                   5826 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      001CBA CB 55            [ 8] 5827 	bit	2, l
      001CBC 20 03            [12] 5828 	jr	NZ, 00134$
                                   5829 ;src\/GameLogic.h:214: Pause();
      001CBE CDrF6r19         [17] 5830 	call	_Pause
      001CC1                       5831 00134$:
                                   5832 ;src\/GameLogic.h:219: counter++;
      001CC1 FD 21r03r00      [14] 5833 	ld	iy, #_counter
      001CC5 FD 34 00         [23] 5834 	inc	0 (iy)
                                   5835 ;src\/GameLogic.h:220: if(counter == speed) {
      001CC8 FD 7E 00         [19] 5836 	ld	a, 0 (iy)
      001CCB 21r93r00         [10] 5837 	ld	hl, #_speed
      001CCE 96               [ 7] 5838 	sub	a, (hl)
      001CCF 20 3F            [12] 5839 	jr	NZ, 00139$
                                   5840 ;src\/GameLogic.h:222: counter = 0;
      001CD1 21r03r00         [10] 5841 	ld	hl, #_counter
      001CD4 36 00            [10] 5842 	ld	(hl), #0x00
                                   5843 ;src\/GameLogic.h:225: DrawPiece(line);
      001CD6 3Ar02r00         [13] 5844 	ld	a,(#_line + 0)
      001CD9 F5               [11] 5845 	push	af
      001CDA 33               [ 6] 5846 	inc	sp
      001CDB CDr78r10         [17] 5847 	call	_DrawPiece
      001CDE 33               [ 6] 5848 	inc	sp
                                   5849 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      001CDF FD 21r02r00      [14] 5850 	ld	iy, #_line
      001CE3 FD 7E 00         [19] 5851 	ld	a, 0 (iy)
      001CE6 D6 09            [ 7] 5852 	sub	a, #0x09
      001CE8 28 1F            [12] 5853 	jr	Z, 00135$
      001CEA ED 4Br01r00      [20] 5854 	ld	bc, (_col)
      001CEE 06 00            [ 7] 5855 	ld	b, #0x00
      001CF0 69               [ 4] 5856 	ld	l, c
      001CF1 60               [ 4] 5857 	ld	h, b
      001CF2 29               [11] 5858 	add	hl, hl
      001CF3 09               [11] 5859 	add	hl, bc
      001CF4 29               [11] 5860 	add	hl, hl
      001CF5 29               [11] 5861 	add	hl, hl
      001CF6 EB               [ 4] 5862 	ex	de, hl
      001CF7 21r00r00         [10] 5863 	ld	hl, #_playfield
      001CFA 19               [11] 5864 	add	hl, de
      001CFB EB               [ 4] 5865 	ex	de, hl
      001CFC FD 7E 00         [19] 5866 	ld	a, 0 (iy)
      001CFF C6 03            [ 7] 5867 	add	a, #0x03
      001D01 6F               [ 4] 5868 	ld	l, a
      001D02 26 00            [ 7] 5869 	ld	h, #0x00
      001D04 19               [11] 5870 	add	hl, de
      001D05 7E               [ 7] 5871 	ld	a, (hl)
      001D06 B7               [ 4] 5872 	or	a, a
      001D07 28 03            [12] 5873 	jr	Z, 00136$
      001D09                       5874 00135$:
                                   5875 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      001D09 CDr3Er19         [17] 5876 	call	_UpdateAndDrawPieceStatic
      001D0C                       5877 00136$:
                                   5878 ;src\/GameLogic.h:234: line++;
      001D0C 21r02r00         [10] 5879 	ld	hl, #_line
      001D0F 34               [11] 5880 	inc	(hl)
      001D10                       5881 00139$:
                                   5882 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      001D10 ED 4Br01r00      [20] 5883 	ld	bc, (_col)
      001D14 06 00            [ 7] 5884 	ld	b, #0x00
      001D16 69               [ 4] 5885 	ld	l, c
      001D17 60               [ 4] 5886 	ld	h, b
      001D18 29               [11] 5887 	add	hl, hl
      001D19 09               [11] 5888 	add	hl, bc
      001D1A 29               [11] 5889 	add	hl, hl
      001D1B 29               [11] 5890 	add	hl, hl
      001D1C EB               [ 4] 5891 	ex	de, hl
      001D1D 21r00r00         [10] 5892 	ld	hl, #_playfield
      001D20 19               [11] 5893 	add	hl, de
      001D21 EB               [ 4] 5894 	ex	de, hl
      001D22 3Ar02r00         [13] 5895 	ld	a, (#_line + 0)
      001D25 6F               [ 4] 5896 	ld	l, a
      001D26 26 00            [ 7] 5897 	ld	h, #0x00
      001D28 19               [11] 5898 	add	hl, de
      001D29 3Ar90r00         [13] 5899 	ld	a,(#_topPiece + 0)
      001D2C 77               [ 7] 5900 	ld	(hl), a
                                   5901 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      001D2D ED 4Br01r00      [20] 5902 	ld	bc, (_col)
      001D31 06 00            [ 7] 5903 	ld	b, #0x00
      001D33 69               [ 4] 5904 	ld	l, c
      001D34 60               [ 4] 5905 	ld	h, b
      001D35 29               [11] 5906 	add	hl, hl
      001D36 09               [11] 5907 	add	hl, bc
      001D37 29               [11] 5908 	add	hl, hl
      001D38 29               [11] 5909 	add	hl, hl
      001D39 EB               [ 4] 5910 	ex	de, hl
      001D3A 21r00r00         [10] 5911 	ld	hl, #_playfield
      001D3D 19               [11] 5912 	add	hl, de
      001D3E EB               [ 4] 5913 	ex	de, hl
      001D3F 3Ar02r00         [13] 5914 	ld	a, (#_line + 0)
      001D42 6F               [ 4] 5915 	ld	l, a
      001D43 2C               [ 4] 5916 	inc	l
      001D44 26 00            [ 7] 5917 	ld	h, #0x00
      001D46 19               [11] 5918 	add	hl, de
      001D47 3Ar91r00         [13] 5919 	ld	a,(#_midPiece + 0)
      001D4A 77               [ 7] 5920 	ld	(hl), a
                                   5921 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      001D4B ED 4Br01r00      [20] 5922 	ld	bc, (_col)
      001D4F 06 00            [ 7] 5923 	ld	b, #0x00
      001D51 69               [ 4] 5924 	ld	l, c
      001D52 60               [ 4] 5925 	ld	h, b
      001D53 29               [11] 5926 	add	hl, hl
      001D54 09               [11] 5927 	add	hl, bc
      001D55 29               [11] 5928 	add	hl, hl
      001D56 29               [11] 5929 	add	hl, hl
      001D57 EB               [ 4] 5930 	ex	de, hl
      001D58 21r00r00         [10] 5931 	ld	hl, #_playfield
      001D5B 19               [11] 5932 	add	hl, de
      001D5C EB               [ 4] 5933 	ex	de, hl
      001D5D 3Ar02r00         [13] 5934 	ld	a, (#_line + 0)
      001D60 6F               [ 4] 5935 	ld	l, a
      001D61 2C               [ 4] 5936 	inc	l
      001D62 2C               [ 4] 5937 	inc	l
      001D63 26 00            [ 7] 5938 	ld	h, #0x00
      001D65 19               [11] 5939 	add	hl, de
      001D66 3Ar92r00         [13] 5940 	ld	a,(#_bottomPiece + 0)
      001D69 77               [ 7] 5941 	ld	(hl), a
                                   5942 ;src\/GameLogic.h:248: DrawPiece(line);
      001D6A 3Ar02r00         [13] 5943 	ld	a,(#_line + 0)
      001D6D F5               [11] 5944 	push	af
      001D6E 33               [ 6] 5945 	inc	sp
      001D6F CDr78r10         [17] 5946 	call	_DrawPiece
      001D72 33               [ 6] 5947 	inc	sp
                                   5948 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001D73 ED 4Br01r00      [20] 5949 	ld	bc, (_col)
      001D77 06 00            [ 7] 5950 	ld	b, #0x00
      001D79 69               [ 4] 5951 	ld	l, c
      001D7A 60               [ 4] 5952 	ld	h, b
      001D7B 29               [11] 5953 	add	hl, hl
      001D7C 09               [11] 5954 	add	hl, bc
      001D7D 29               [11] 5955 	add	hl, hl
      001D7E 29               [11] 5956 	add	hl, hl
      001D7F EB               [ 4] 5957 	ex	de, hl
                                   5958 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      001D80 21r00r00         [10] 5959 	ld	hl, #_playfield
      001D83 19               [11] 5960 	add	hl, de
      001D84 EB               [ 4] 5961 	ex	de, hl
      001D85 3Ar02r00         [13] 5962 	ld	a,(#_line + 0)
      001D88 C6 03            [ 7] 5963 	add	a, #0x03
      001D8A 4F               [ 4] 5964 	ld	c, a
      001D8B 69               [ 4] 5965 	ld	l, c
      001D8C 26 00            [ 7] 5966 	ld	h, #0x00
      001D8E 19               [11] 5967 	add	hl, de
      001D8F 7E               [ 7] 5968 	ld	a, (hl)
      001D90 B7               [ 4] 5969 	or	a, a
      001D91 28 06            [12] 5970 	jr	Z, 00148$
                                   5971 ;src\/GameLogic.h:254: HideArrow();
      001D93 CDrC9r0C         [17] 5972 	call	_HideArrow
      001D96 C3r53r1A         [10] 5973 	jp	00150$
      001D99                       5974 00148$:
                                   5975 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001D99 41               [ 4] 5976 	ld	b, c
      001D9A                       5977 00157$:
      001D9A 78               [ 4] 5978 	ld	a, b
      001D9B D6 0C            [ 7] 5979 	sub	a, #0x0c
      001D9D D2r53r1A         [10] 5980 	jp	NC, 00150$
                                   5981 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001DA0 3Ar01r00         [13] 5982 	ld	a,(#_col + 0)
      001DA3 87               [ 4] 5983 	add	a, a
      001DA4 87               [ 4] 5984 	add	a, a
      001DA5 87               [ 4] 5985 	add	a, a
      001DA6 87               [ 4] 5986 	add	a, a
      001DA7 DD 77 FE         [19] 5987 	ld	-2 (ix), a
                                   5988 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001DAA 68               [ 4] 5989 	ld	l, b
      001DAB 26 00            [ 7] 5990 	ld	h, #0x00
      001DAD 19               [11] 5991 	add	hl, de
                                   5992 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001DAE DD 7E FE         [19] 5993 	ld	a, -2 (ix)
      001DB1 C6 50            [ 7] 5994 	add	a, #0x50
      001DB3 DD 77 FE         [19] 5995 	ld	-2 (ix), a
                                   5996 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      001DB6 6E               [ 7] 5997 	ld	l, (hl)
      001DB7 78               [ 4] 5998 	ld	a, b
      001DB8 D6 0B            [ 7] 5999 	sub	a,#0x0b
      001DBA 20 16            [12] 6000 	jr	NZ, 00143$
      001DBC B5               [ 4] 6001 	or	a,l
      001DBD 20 13            [12] 6002 	jr	NZ, 00143$
                                   6003 ;src\/GameLogic.h:259: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      001DBF 79               [ 4] 6004 	ld	a, c
      001DC0 87               [ 4] 6005 	add	a, a
      001DC1 87               [ 4] 6006 	add	a, a
      001DC2 87               [ 4] 6007 	add	a, a
      001DC3 87               [ 4] 6008 	add	a, a
      001DC4 F5               [11] 6009 	push	af
      001DC5 33               [ 6] 6010 	inc	sp
      001DC6 DD 7E FE         [19] 6011 	ld	a, -2 (ix)
      001DC9 F5               [11] 6012 	push	af
      001DCA 33               [ 6] 6013 	inc	sp
      001DCB CDr2Er0C         [17] 6014 	call	_DrawArrow
      001DCE F1               [10] 6015 	pop	af
                                   6016 ;src\/GameLogic.h:260: break;
      001DCF C3r53r1A         [10] 6017 	jp	00150$
      001DD2                       6018 00143$:
                                   6019 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      001DD2 7D               [ 4] 6020 	ld	a, l
      001DD3 B7               [ 4] 6021 	or	a, a
      001DD4 28 14            [12] 6022 	jr	Z, 00158$
                                   6023 ;src\/GameLogic.h:263: DrawArrow((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      001DD6 79               [ 4] 6024 	ld	a, c
      001DD7 3D               [ 4] 6025 	dec	a
      001DD8 87               [ 4] 6026 	add	a, a
      001DD9 87               [ 4] 6027 	add	a, a
      001DDA 87               [ 4] 6028 	add	a, a
      001DDB 87               [ 4] 6029 	add	a, a
      001DDC F5               [11] 6030 	push	af
      001DDD 33               [ 6] 6031 	inc	sp
      001DDE DD 7E FE         [19] 6032 	ld	a, -2 (ix)
      001DE1 F5               [11] 6033 	push	af
      001DE2 33               [ 6] 6034 	inc	sp
      001DE3 CDr2Er0C         [17] 6035 	call	_DrawArrow
      001DE6 F1               [10] 6036 	pop	af
                                   6037 ;src\/GameLogic.h:264: break;
      001DE7 C3r53r1A         [10] 6038 	jp	00150$
      001DEA                       6039 00158$:
                                   6040 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      001DEA 04               [ 4] 6041 	inc	b
      001DEB 48               [ 4] 6042 	ld	c, b
      001DEC 18 AC            [12] 6043 	jr	00157$
      001DEE                       6044 00152$:
                                   6045 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      001DEE 11 0C 0C         [10] 6046 	ld	de, #0x0c0c
      001DF1 D5               [11] 6047 	push	de
      001DF2 21r06r1E         [10] 6048 	ld	hl, #___str_6
      001DF5 E5               [11] 6049 	push	hl
      001DF6 CDrA8r07         [17] 6050 	call	_DrawString
      001DF9 F1               [10] 6051 	pop	af
                                   6052 ;src\/GameLogic.h:276: Wait(60 * 3);
      001DFA 21 B4 00         [10] 6053 	ld	hl, #0x00b4
      001DFD E3               [19] 6054 	ex	(sp),hl
      001DFE CDr00r00         [17] 6055 	call	_Wait
                                   6056 ;src\/GameLogic.h:278: }
      001E01 DD F9            [10] 6057 	ld	sp,ix
      001E03 DD E1            [14] 6058 	pop	ix
      001E05 C9               [10] 6059 	ret
      001E06                       6060 ___str_6:
      001E06 47 41 4D 45 20 4F 56  6061 	.ascii "GAME OVER"
             45 52
      001E0F 00                    6062 	.db 0x00
                                   6063 ;src\/GameLogic.h:280: void TestCase() {
                                   6064 ;	---------------------------------
                                   6065 ; Function TestCase
                                   6066 ; ---------------------------------
      001E10                       6067 _TestCase::
                                   6068 ;src\/GameLogic.h:281: playfield[2][ 8] = TILE_GREEN;
      001E10 21r20r00         [10] 6069 	ld	hl, #(_playfield + 0x0020)
      001E13 36 04            [10] 6070 	ld	(hl), #0x04
                                   6071 ;src\/GameLogic.h:282: playfield[2][ 9] = TILE_BLUE;
      001E15 21r21r00         [10] 6072 	ld	hl, #(_playfield + 0x0021)
      001E18 36 0C            [10] 6073 	ld	(hl), #0x0c
                                   6074 ;src\/GameLogic.h:284: playfield[0][10] = TILE_BLUE;
      001E1A 21r0Ar00         [10] 6075 	ld	hl, #(_playfield + 0x000a)
      001E1D 36 0C            [10] 6076 	ld	(hl), #0x0c
                                   6077 ;src\/GameLogic.h:285: playfield[1][10] = TILE_BLUE;
      001E1F 21r16r00         [10] 6078 	ld	hl, #(_playfield + 0x0016)
      001E22 36 0C            [10] 6079 	ld	(hl), #0x0c
                                   6080 ;src\/GameLogic.h:286: playfield[2][10] = TILE_RED;
      001E24 21r22r00         [10] 6081 	ld	hl, #(_playfield + 0x0022)
      001E27 36 08            [10] 6082 	ld	(hl), #0x08
                                   6083 ;src\/GameLogic.h:287: playfield[4][10] = TILE_RED;
      001E29 21r3Ar00         [10] 6084 	ld	hl, #(_playfield + 0x003a)
      001E2C 36 08            [10] 6085 	ld	(hl), #0x08
                                   6086 ;src\/GameLogic.h:288: playfield[5][10] = TILE_BLUE;
      001E2E 21r46r00         [10] 6087 	ld	hl, #(_playfield + 0x0046)
      001E31 36 0C            [10] 6088 	ld	(hl), #0x0c
                                   6089 ;src\/GameLogic.h:290: playfield[0][11] = TILE_GREEN;
      001E33 21r0Br00         [10] 6090 	ld	hl, #(_playfield + 0x000b)
      001E36 36 04            [10] 6091 	ld	(hl), #0x04
                                   6092 ;src\/GameLogic.h:291: playfield[1][11] = TILE_GREEN;
      001E38 21r17r00         [10] 6093 	ld	hl, #(_playfield + 0x0017)
      001E3B 36 04            [10] 6094 	ld	(hl), #0x04
                                   6095 ;src\/GameLogic.h:292: playfield[2][11] = TILE_RED;
      001E3D 21r23r00         [10] 6096 	ld	hl, #(_playfield + 0x0023)
      001E40 36 08            [10] 6097 	ld	(hl), #0x08
                                   6098 ;src\/GameLogic.h:293: playfield[3][11] = TILE_BLUE;
      001E42 21r2Fr00         [10] 6099 	ld	hl, #(_playfield + 0x002f)
      001E45 36 0C            [10] 6100 	ld	(hl), #0x0c
                                   6101 ;src\/GameLogic.h:294: playfield[4][11] = TILE_RED;
      001E47 21r3Br00         [10] 6102 	ld	hl, #(_playfield + 0x003b)
      001E4A 36 08            [10] 6103 	ld	(hl), #0x08
                                   6104 ;src\/GameLogic.h:295: playfield[5][11] = TILE_RED;
      001E4C 21r47r00         [10] 6105 	ld	hl, #(_playfield + 0x0047)
      001E4F 36 08            [10] 6106 	ld	(hl), #0x08
                                   6107 ;src\/GameLogic.h:297: topPiece = TILE_BLUE;
      001E51 3E 0C            [ 7] 6108 	ld	a, #0x0c
      001E53 32r90r00         [13] 6109 	ld	(#_topPiece), a
                                   6110 ;src\/GameLogic.h:298: midPiece = TILE_RED;
      001E56 3E 08            [ 7] 6111 	ld	a, #0x08
      001E58 32r91r00         [13] 6112 	ld	(#_midPiece), a
                                   6113 ;src\/GameLogic.h:299: bottomPiece = TILE_YELLOW;
      001E5B 3E 14            [ 7] 6114 	ld	a, #0x14
      001E5D 32r92r00         [13] 6115 	ld	(#_bottomPiece), a
                                   6116 ;src\/GameLogic.h:300: }
      001E60 C9               [10] 6117 	ret
                                   6118 ;src\/GameLogic.h:302: void InitGame() {
                                   6119 ;	---------------------------------
                                   6120 ; Function InitGame
                                   6121 ; ---------------------------------
      001E61                       6122 _InitGame::
                                   6123 ;src\/GameLogic.h:304: gameOver = FALSE;
      001E61 21r00r00         [10] 6124 	ld	hl, #_gameOver
      001E64 36 00            [10] 6125 	ld	(hl), #0x00
                                   6126 ;src\/GameLogic.h:305: line = INITIAL_LINE;
      001E66 21r02r00         [10] 6127 	ld	hl, #_line
      001E69 36 00            [10] 6128 	ld	(hl), #0x00
                                   6129 ;src\/GameLogic.h:306: col = INITIAL_COL;
      001E6B 21r01r00         [10] 6130 	ld	hl, #_col
      001E6E 36 02            [10] 6131 	ld	(hl), #0x02
                                   6132 ;src\/GameLogic.h:307: blocksRemoved = 0;
      001E70 21 00 00         [10] 6133 	ld	hl, #0x0000
      001E73 22r04r00         [16] 6134 	ld	(_blocksRemoved), hl
                                   6135 ;src\/GameLogic.h:308: level = 1;
      001E76 21r06r00         [10] 6136 	ld	hl, #_level
      001E79 36 01            [10] 6137 	ld	(hl), #0x01
                                   6138 ;src\/GameLogic.h:309: newLevel = FALSE;
      001E7B 21r07r00         [10] 6139 	ld	hl, #_newLevel
      001E7E 36 00            [10] 6140 	ld	(hl), #0x00
                                   6141 ;src\/GameLogic.h:310: speed = 60;
      001E80 21r93r00         [10] 6142 	ld	hl, #_speed
      001E83 36 3C            [10] 6143 	ld	(hl), #0x3c
                                   6144 ;src\/GameLogic.h:312: InitVRAM();
      001E85 CDrD7r0C         [17] 6145 	call	_InitVRAM
                                   6146 ;src\/GameLogic.h:315: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      001E88 3Ar08r00         [13] 6147 	ld	a, (#_rndSeed + 0)
      001E8B 5F               [ 4] 6148 	ld	e, a
      001E8C 3A 9E FC         [13] 6149 	ld	a, (#_JIFFY + 0)
      001E8F 67               [ 4] 6150 	ld	h, a
      001E90 2E 00            [ 7] 6151 	ld	l, #0x00
      001E92 55               [ 4] 6152 	ld	d, l
      001E93 06 08            [ 7] 6153 	ld	b, #0x08
      001E95                       6154 00133$:
      001E95 29               [11] 6155 	add	hl, hl
      001E96 30 01            [12] 6156 	jr	NC, 00134$
      001E98 19               [11] 6157 	add	hl, de
      001E99                       6158 00134$:
      001E99 10 FA            [13] 6159 	djnz	00133$
      001E9B 7D               [ 4] 6160 	ld	a, l
      001E9C C6 63            [ 7] 6161 	add	a, #0x63
      001E9E 4F               [ 4] 6162 	ld	c, a
      001E9F 3Ar08r00         [13] 6163 	ld	a, (#_rndSeed + 0)
      001EA2 5F               [ 4] 6164 	ld	e, a
      001EA3 3A 9E FC         [13] 6165 	ld	a, (#_JIFFY + 0)
      001EA6 67               [ 4] 6166 	ld	h, a
      001EA7 2E 00            [ 7] 6167 	ld	l, #0x00
      001EA9 55               [ 4] 6168 	ld	d, l
      001EAA 06 08            [ 7] 6169 	ld	b, #0x08
      001EAC                       6170 00135$:
      001EAC 29               [11] 6171 	add	hl, hl
      001EAD 30 01            [12] 6172 	jr	NC, 00136$
      001EAF 19               [11] 6173 	add	hl, de
      001EB0                       6174 00136$:
      001EB0 10 FA            [13] 6175 	djnz	00135$
      001EB2 79               [ 4] 6176 	ld	a, c
      001EB3 F5               [11] 6177 	push	af
      001EB4 7D               [ 4] 6178 	ld	a, l
      001EB5 33               [ 6] 6179 	inc	sp
      001EB6 F5               [11] 6180 	push	af
      001EB7 33               [ 6] 6181 	inc	sp
      001EB8 3Ar08r00         [13] 6182 	ld	a,(#_rndSeed + 0)
      001EBB F5               [11] 6183 	push	af
      001EBC 33               [ 6] 6184 	inc	sp
      001EBD CDr50r00         [17] 6185 	call	_InitRnd
      001EC0 F1               [10] 6186 	pop	af
      001EC1 33               [ 6] 6187 	inc	sp
                                   6188 ;src\/GameLogic.h:318: RandomPiece();
      001EC2 CDr16r19         [17] 6189 	call	_RandomPiece
                                   6190 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001EC5 0E 00            [ 7] 6191 	ld	c, #0x00
      001EC7                       6192 00107$:
      001EC7 79               [ 4] 6193 	ld	a, c
      001EC8 D6 0C            [ 7] 6194 	sub	a, #0x0c
      001ECA 30 20            [12] 6195 	jr	NC, 00102$
                                   6196 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001ECC 06 00            [ 7] 6197 	ld	b, #0x00
      001ECE                       6198 00104$:
      001ECE 78               [ 4] 6199 	ld	a, b
      001ECF D6 06            [ 7] 6200 	sub	a, #0x06
      001ED1 30 16            [12] 6201 	jr	NC, 00108$
                                   6202 ;src\/GameLogic.h:323: playfield[col][line] = EMPTY;
      001ED3 58               [ 4] 6203 	ld	e, b
      001ED4 16 00            [ 7] 6204 	ld	d, #0x00
      001ED6 6B               [ 4] 6205 	ld	l, e
      001ED7 62               [ 4] 6206 	ld	h, d
      001ED8 29               [11] 6207 	add	hl, hl
      001ED9 19               [11] 6208 	add	hl, de
      001EDA 29               [11] 6209 	add	hl, hl
      001EDB 29               [11] 6210 	add	hl, hl
      001EDC 11r00r00         [10] 6211 	ld	de, #_playfield
      001EDF 19               [11] 6212 	add	hl, de
      001EE0 59               [ 4] 6213 	ld	e, c
      001EE1 16 00            [ 7] 6214 	ld	d, #0x00
      001EE3 19               [11] 6215 	add	hl, de
      001EE4 36 00            [10] 6216 	ld	(hl), #0x00
                                   6217 ;src\/GameLogic.h:322: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001EE6 04               [ 4] 6218 	inc	b
      001EE7 18 E5            [12] 6219 	jr	00104$
      001EE9                       6220 00108$:
                                   6221 ;src\/GameLogic.h:321: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001EE9 0C               [ 4] 6222 	inc	c
      001EEA 18 DB            [12] 6223 	jr	00107$
      001EEC                       6224 00102$:
                                   6225 ;src\/GameLogic.h:328: TestCase();
      001EEC CDr10r1E         [17] 6226 	call	_TestCase
                                   6227 ;src\/GameLogic.h:330: DrawBackground();
      001EEF CDrFDr0B         [17] 6228 	call	_DrawBackground
                                   6229 ;src\/GameLogic.h:332: DrawPlayfield();
      001EF2 CDr9Br10         [17] 6230 	call	_DrawPlayfield
                                   6231 ;src\/GameLogic.h:334: DrawScore();
      001EF5 CDr66r0A         [17] 6232 	call	_DrawScore
                                   6233 ;src\/GameLogic.h:336: GameLoop();
                                   6234 ;src\/GameLogic.h:337: }
      001EF8 C3r36r1A         [10] 6235 	jp	_GameLoop
                                   6236 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   6237 ;	---------------------------------
                                   6238 ; Function ChangeFontColor
                                   6239 ; ---------------------------------
      001EFB                       6240 _ChangeFontColor::
                                   6241 ;src\/Intro.h:4: FILVRM(MSX_modedata_screen2.color + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      001EFB 2A C9 F3         [16] 6242 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001EFE 01 78 01         [10] 6243 	ld	bc, #0x0178
      001F01 09               [11] 6244 	add	hl, bc
      001F02 FD 21 02 00      [14] 6245 	ld	iy, #2
      001F06 FD 39            [15] 6246 	add	iy, sp
      001F08 FD 7E 00         [19] 6247 	ld	a, 0 (iy)
      001F0B F5               [11] 6248 	push	af
      001F0C 33               [ 6] 6249 	inc	sp
      001F0D 11 00 03         [10] 6250 	ld	de, #0x0300
      001F10 D5               [11] 6251 	push	de
      001F11 E5               [11] 6252 	push	hl
      001F12 CDr00r00         [17] 6253 	call	_FILVRM
      001F15 F1               [10] 6254 	pop	af
      001F16 F1               [10] 6255 	pop	af
      001F17 33               [ 6] 6256 	inc	sp
                                   6257 ;src\/Intro.h:5: FILVRM(MSX_modedata_screen2.color + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      001F18 2A C9 F3         [16] 6258 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001F1B 01 78 09         [10] 6259 	ld	bc, #0x0978
      001F1E 09               [11] 6260 	add	hl, bc
      001F1F FD 21 02 00      [14] 6261 	ld	iy, #2
      001F23 FD 39            [15] 6262 	add	iy, sp
      001F25 FD 7E 00         [19] 6263 	ld	a, 0 (iy)
      001F28 F5               [11] 6264 	push	af
      001F29 33               [ 6] 6265 	inc	sp
      001F2A 11 00 03         [10] 6266 	ld	de, #0x0300
      001F2D D5               [11] 6267 	push	de
      001F2E E5               [11] 6268 	push	hl
      001F2F CDr00r00         [17] 6269 	call	_FILVRM
      001F32 F1               [10] 6270 	pop	af
      001F33 F1               [10] 6271 	pop	af
      001F34 33               [ 6] 6272 	inc	sp
                                   6273 ;src\/Intro.h:6: FILVRM(MSX_modedata_screen2.color + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      001F35 2A C9 F3         [16] 6274 	ld	hl, (#(_MSX_modedata_screen2 + 0x0002) + 0)
      001F38 01 78 11         [10] 6275 	ld	bc, #0x1178
      001F3B 09               [11] 6276 	add	hl, bc
      001F3C FD 21 02 00      [14] 6277 	ld	iy, #2
      001F40 FD 39            [15] 6278 	add	iy, sp
      001F42 FD 7E 00         [19] 6279 	ld	a, 0 (iy)
      001F45 F5               [11] 6280 	push	af
      001F46 33               [ 6] 6281 	inc	sp
      001F47 11 00 03         [10] 6282 	ld	de, #0x0300
      001F4A D5               [11] 6283 	push	de
      001F4B E5               [11] 6284 	push	hl
      001F4C CDr00r00         [17] 6285 	call	_FILVRM
      001F4F F1               [10] 6286 	pop	af
      001F50 F1               [10] 6287 	pop	af
      001F51 33               [ 6] 6288 	inc	sp
                                   6289 ;src\/Intro.h:7: }
      001F52 C9               [10] 6290 	ret
                                   6291 ;src\/Intro.h:9: void ScrollDownFont() {
                                   6292 ;	---------------------------------
                                   6293 ; Function ScrollDownFont
                                   6294 ; ---------------------------------
      001F53                       6295 _ScrollDownFont::
      001F53 DD E5            [15] 6296 	push	ix
      001F55 DD 21 00 00      [14] 6297 	ld	ix,#0
      001F59 DD 39            [15] 6298 	add	ix,sp
      001F5B F5               [11] 6299 	push	af
      001F5C F5               [11] 6300 	push	af
                                   6301 ;src\/Intro.h:10: word startVRAMAddr = MSX_modedata_screen2.pattern + (256 * 8) + (NUMBER_OF_PATTERNS * 8);
      001F5D 2A CB F3         [16] 6302 	ld	hl, (#(_MSX_modedata_screen2 + 0x0004) + 0)
      001F60 01 78 09         [10] 6303 	ld	bc, #0x0978
      001F63 09               [11] 6304 	add	hl, bc
                                   6305 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      001F64 4D               [ 4] 6306 	ld	c, l
      001F65 44               [ 4] 6307 	ld	b, h
      001F66 5D               [ 4] 6308 	ld	e, l
      001F67 7C               [ 4] 6309 	ld	a, h
      001F68 C6 03            [ 7] 6310 	add	a, #0x03
      001F6A 57               [ 4] 6311 	ld	d, a
      001F6B                       6312 00107$:
      001F6B 79               [ 4] 6313 	ld	a, c
      001F6C 93               [ 4] 6314 	sub	a, e
      001F6D 78               [ 4] 6315 	ld	a, b
      001F6E 9A               [ 4] 6316 	sbc	a, d
      001F6F 30 61            [12] 6317 	jr	NC, 00109$
                                   6318 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      001F71 33               [ 6] 6319 	inc	sp
      001F72 33               [ 6] 6320 	inc	sp
      001F73 C5               [11] 6321 	push	bc
      001F74 DD 7E FC         [19] 6322 	ld	a, -4 (ix)
      001F77 C6 07            [ 7] 6323 	add	a, #0x07
      001F79 6F               [ 4] 6324 	ld	l, a
      001F7A DD 7E FD         [19] 6325 	ld	a, -3 (ix)
      001F7D CE 00            [ 7] 6326 	adc	a, #0x00
      001F7F DD 75 FE         [19] 6327 	ld	-2 (ix), l
      001F82 DD 77 FF         [19] 6328 	ld	-1 (ix), a
      001F85                       6329 00104$:
      001F85 DD 7E FF         [19] 6330 	ld	a, -1 (ix)
      001F88 DD B6 FE         [19] 6331 	or	a, -2 (ix)
      001F8B 28 2C            [12] 6332 	jr	Z, 00101$
                                   6333 ;src\/Intro.h:27: value = RDVRM(j-1);
      001F8D DD 6E FE         [19] 6334 	ld	l, -2 (ix)
      001F90 DD 66 FF         [19] 6335 	ld	h, -1 (ix)
      001F93 2B               [ 6] 6336 	dec	hl
      001F94 C5               [11] 6337 	push	bc
      001F95 D5               [11] 6338 	push	de
      001F96 CDr00r00         [17] 6339 	call	_RDVRM
      001F99 AF               [ 4] 6340 	xor	a, a
      001F9A F5               [11] 6341 	push	af
      001F9B 33               [ 6] 6342 	inc	sp
      001F9C DD 6E FE         [19] 6343 	ld	l, -2 (ix)
      001F9F DD 66 FF         [19] 6344 	ld	h, -1 (ix)
      001FA2 E5               [11] 6345 	push	hl
      001FA3 CDr00r00         [17] 6346 	call	_WRTVRM
      001FA6 F1               [10] 6347 	pop	af
      001FA7 33               [ 6] 6348 	inc	sp
      001FA8 D1               [10] 6349 	pop	de
      001FA9 C1               [10] 6350 	pop	bc
                                   6351 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      001FAA DD 6E FE         [19] 6352 	ld	l, -2 (ix)
      001FAD DD 66 FF         [19] 6353 	ld	h, -1 (ix)
      001FB0 2B               [ 6] 6354 	dec	hl
      001FB1 DD 75 FE         [19] 6355 	ld	-2 (ix), l
      001FB4 DD 74 FF         [19] 6356 	ld	-1 (ix), h
      001FB7 18 CC            [12] 6357 	jr	00104$
      001FB9                       6358 00101$:
                                   6359 ;src\/Intro.h:31: WRTVRM(i, 0);
      001FB9 D5               [11] 6360 	push	de
      001FBA AF               [ 4] 6361 	xor	a, a
      001FBB F5               [11] 6362 	push	af
      001FBC 33               [ 6] 6363 	inc	sp
      001FBD C5               [11] 6364 	push	bc
      001FBE CDr00r00         [17] 6365 	call	_WRTVRM
      001FC1 F1               [10] 6366 	pop	af
      001FC2 33               [ 6] 6367 	inc	sp
      001FC3 D1               [10] 6368 	pop	de
                                   6369 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      001FC4 DD 7E FC         [19] 6370 	ld	a, -4 (ix)
      001FC7 C6 08            [ 7] 6371 	add	a, #0x08
      001FC9 4F               [ 4] 6372 	ld	c, a
      001FCA DD 7E FD         [19] 6373 	ld	a, -3 (ix)
      001FCD CE 00            [ 7] 6374 	adc	a, #0x00
      001FCF 47               [ 4] 6375 	ld	b, a
      001FD0 18 99            [12] 6376 	jr	00107$
      001FD2                       6377 00109$:
                                   6378 ;src\/Intro.h:35: }
      001FD2 DD F9            [10] 6379 	ld	sp, ix
      001FD4 DD E1            [14] 6380 	pop	ix
      001FD6 C9               [10] 6381 	ret
                                   6382 ;src\/Intro.h:37: void Intro() {
                                   6383 ;	---------------------------------
                                   6384 ; Function Intro
                                   6385 ; ---------------------------------
      001FD7                       6386 _Intro::
                                   6387 ;src\/Intro.h:41: InitVRAM();
      001FD7 CDrD7r0C         [17] 6388 	call	_InitVRAM
                                   6389 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      001FDA 11 0B 0B         [10] 6390 	ld	de, #0x0b0b
      001FDD D5               [11] 6391 	push	de
      001FDE 21r4Cr20         [10] 6392 	ld	hl, #___str_7
      001FE1 E5               [11] 6393 	push	hl
      001FE2 CDrA8r07         [17] 6394 	call	_DrawString
      001FE5 F1               [10] 6395 	pop	af
      001FE6 F1               [10] 6396 	pop	af
                                   6397 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      001FE7 11 09 0D         [10] 6398 	ld	de, #0x0d09
      001FEA D5               [11] 6399 	push	de
      001FEB 21r56r20         [10] 6400 	ld	hl, #___str_8
      001FEE E5               [11] 6401 	push	hl
      001FEF CDrA8r07         [17] 6402 	call	_DrawString
      001FF2 F1               [10] 6403 	pop	af
                                   6404 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      001FF3 26 F0            [ 7] 6405 	ld	h,#0xf0
      001FF5 E3               [19] 6406 	ex	(sp),hl
      001FF6 33               [ 6] 6407 	inc	sp
      001FF7 CDrFBr1E         [17] 6408 	call	_ChangeFontColor
      001FFA 33               [ 6] 6409 	inc	sp
                                   6410 ;src\/Intro.h:56: Wait(2 * 60);
      001FFB 21 78 00         [10] 6411 	ld	hl, #0x0078
      001FFE E5               [11] 6412 	push	hl
      001FFF CDr00r00         [17] 6413 	call	_Wait
      002002 F1               [10] 6414 	pop	af
                                   6415 ;src\/Intro.h:58: while(counter++ < 20) {
      002003 0E 00            [ 7] 6416 	ld	c, #0x00
      002005                       6417 00112$:
      002005 79               [ 4] 6418 	ld	a, c
      002006 D6 14            [ 7] 6419 	sub	a, #0x14
      002008 D0               [11] 6420 	ret	NC
      002009 0C               [ 4] 6421 	inc	c
                                   6422 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      00200A 21 9E FC         [10] 6423 	ld	hl, #_JIFFY
      00200D 46               [ 7] 6424 	ld	b, (hl)
                                   6425 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      00200E                       6426 00101$:
      00200E 58               [ 4] 6427 	ld	e, b
      00200F 16 00            [ 7] 6428 	ld	d, #0x00
      002011 2A 9E FC         [16] 6429 	ld	hl, (_JIFFY)
      002014 BF               [ 4] 6430 	cp	a, a
      002015 ED 52            [15] 6431 	sbc	hl, de
      002017 28 F5            [12] 6432 	jr	Z, 00101$
                                   6433 ;src\/Intro.h:63: if(counter == 15) {
      002019 79               [ 4] 6434 	ld	a, c
      00201A D6 0F            [ 7] 6435 	sub	a, #0x0f
      00201C 20 0C            [12] 6436 	jr	NZ, 00110$
                                   6437 ;src\/Intro.h:64: ChangeFontColor(0x40);
      00201E C5               [11] 6438 	push	bc
      00201F 3E 40            [ 7] 6439 	ld	a, #0x40
      002021 F5               [11] 6440 	push	af
      002022 33               [ 6] 6441 	inc	sp
      002023 CDrFBr1E         [17] 6442 	call	_ChangeFontColor
      002026 33               [ 6] 6443 	inc	sp
      002027 C1               [10] 6444 	pop	bc
      002028 18 DB            [12] 6445 	jr	00112$
      00202A                       6446 00110$:
                                   6447 ;src\/Intro.h:66: else if(counter == 10) {
      00202A 79               [ 4] 6448 	ld	a, c
      00202B D6 0A            [ 7] 6449 	sub	a, #0x0a
      00202D 20 0C            [12] 6450 	jr	NZ, 00107$
                                   6451 ;src\/Intro.h:67: ChangeFontColor(0x50);
      00202F C5               [11] 6452 	push	bc
      002030 3E 50            [ 7] 6453 	ld	a, #0x50
      002032 F5               [11] 6454 	push	af
      002033 33               [ 6] 6455 	inc	sp
      002034 CDrFBr1E         [17] 6456 	call	_ChangeFontColor
      002037 33               [ 6] 6457 	inc	sp
      002038 C1               [10] 6458 	pop	bc
      002039 18 CA            [12] 6459 	jr	00112$
      00203B                       6460 00107$:
                                   6461 ;src\/Intro.h:69: else if(counter == 5) {
      00203B 79               [ 4] 6462 	ld	a, c
      00203C D6 05            [ 7] 6463 	sub	a, #0x05
      00203E 20 C5            [12] 6464 	jr	NZ, 00112$
                                   6465 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002040 C5               [11] 6466 	push	bc
      002041 3E E0            [ 7] 6467 	ld	a, #0xe0
      002043 F5               [11] 6468 	push	af
      002044 33               [ 6] 6469 	inc	sp
      002045 CDrFBr1E         [17] 6470 	call	_ChangeFontColor
      002048 33               [ 6] 6471 	inc	sp
      002049 C1               [10] 6472 	pop	bc
                                   6473 ;src\/Intro.h:140: }
      00204A 18 B9            [12] 6474 	jr	00112$
      00204C                       6475 ___str_7:
      00204C 41 20 47 41 4D 45 20  6476 	.ascii "A GAME BY"
             42 59
      002055 00                    6477 	.db 0x00
      002056                       6478 ___str_8:
      002056 41 4E 44 52 45 20 42  6479 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      002064 00                    6480 	.db 0x00
                                   6481 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   6482 ;	---------------------------------
                                   6483 ; Function SetBlock
                                   6484 ; ---------------------------------
      002065                       6485 _SetBlock::
      002065 DD E5            [15] 6486 	push	ix
      002067 DD 21 00 00      [14] 6487 	ld	ix,#0
      00206B DD 39            [15] 6488 	add	ix,sp
                                   6489 ;src\/Title.h:15: WRTVRM(MSX_modedata_screen2.name + col + (line * 32), tileNumber);
      00206D 2A C7 F3         [16] 6490 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002070 DD 4E 04         [19] 6491 	ld	c, 4 (ix)
      002073 06 00            [ 7] 6492 	ld	b, #0x00
      002075 09               [11] 6493 	add	hl, bc
      002076 EB               [ 4] 6494 	ex	de, hl
      002077 DD 6E 05         [19] 6495 	ld	l, 5 (ix)
      00207A 26 00            [ 7] 6496 	ld	h, #0x00
      00207C 29               [11] 6497 	add	hl, hl
      00207D 29               [11] 6498 	add	hl, hl
      00207E 29               [11] 6499 	add	hl, hl
      00207F 29               [11] 6500 	add	hl, hl
      002080 29               [11] 6501 	add	hl, hl
      002081 19               [11] 6502 	add	hl, de
      002082 DD 7E 06         [19] 6503 	ld	a, 6 (ix)
      002085 F5               [11] 6504 	push	af
      002086 33               [ 6] 6505 	inc	sp
      002087 E5               [11] 6506 	push	hl
      002088 CDr00r00         [17] 6507 	call	_WRTVRM
      00208B F1               [10] 6508 	pop	af
      00208C 33               [ 6] 6509 	inc	sp
                                   6510 ;src\/Title.h:16: }
      00208D DD E1            [14] 6511 	pop	ix
      00208F C9               [10] 6512 	ret
                                   6513 ;src\/Title.h:18: void TitleScreen() {
                                   6514 ;	---------------------------------
                                   6515 ; Function TitleScreen
                                   6516 ; ---------------------------------
      002090                       6517 _TitleScreen::
      002090 DD E5            [15] 6518 	push	ix
      002092 DD 21 00 00      [14] 6519 	ld	ix,#0
      002096 DD 39            [15] 6520 	add	ix,sp
      002098 21 EB FF         [10] 6521 	ld	hl, #-21
      00209B 39               [11] 6522 	add	hl, sp
      00209C F9               [ 6] 6523 	ld	sp, hl
                                   6524 ;src\/Title.h:19: byte colorIndex = 0;
      00209D 0E 00            [ 7] 6525 	ld	c, #0x00
                                   6526 ;src\/Title.h:50: const char blocks[] = {
      00209F 21 00 00         [10] 6527 	ld	hl, #0
      0020A2 39               [11] 6528 	add	hl, sp
      0020A3 EB               [ 4] 6529 	ex	de, hl
      0020A4 3E 8E            [ 7] 6530 	ld	a, #0x8e
      0020A6 12               [ 7] 6531 	ld	(de), a
      0020A7 6B               [ 4] 6532 	ld	l, e
      0020A8 62               [ 4] 6533 	ld	h, d
      0020A9 23               [ 6] 6534 	inc	hl
      0020AA 36 8F            [10] 6535 	ld	(hl), #0x8f
      0020AC 6B               [ 4] 6536 	ld	l, e
      0020AD 62               [ 4] 6537 	ld	h, d
      0020AE 23               [ 6] 6538 	inc	hl
      0020AF 23               [ 6] 6539 	inc	hl
      0020B0 36 90            [10] 6540 	ld	(hl), #0x90
      0020B2 6B               [ 4] 6541 	ld	l, e
      0020B3 62               [ 4] 6542 	ld	h, d
      0020B4 23               [ 6] 6543 	inc	hl
      0020B5 23               [ 6] 6544 	inc	hl
      0020B6 23               [ 6] 6545 	inc	hl
      0020B7 36 91            [10] 6546 	ld	(hl), #0x91
      0020B9 21 04 00         [10] 6547 	ld	hl, #0x0004
      0020BC 19               [11] 6548 	add	hl, de
      0020BD 36 92            [10] 6549 	ld	(hl), #0x92
      0020BF 21 05 00         [10] 6550 	ld	hl, #0x0005
      0020C2 19               [11] 6551 	add	hl, de
      0020C3 36 93            [10] 6552 	ld	(hl), #0x93
      0020C5 21 06 00         [10] 6553 	ld	hl, #0x0006
      0020C8 19               [11] 6554 	add	hl, de
      0020C9 36 94            [10] 6555 	ld	(hl), #0x94
                                   6556 ;src\/Title.h:60: const char colors[] = { A, C, E, G }; // last item will be ignored
      0020CB 21 07 00         [10] 6557 	ld	hl, #7
      0020CE 39               [11] 6558 	add	hl, sp
      0020CF DD 75 F6         [19] 6559 	ld	-10 (ix), l
      0020D2 DD 74 F7         [19] 6560 	ld	-9 (ix), h
      0020D5 36 8E            [10] 6561 	ld	(hl), #0x8e
      0020D7 DD 6E F6         [19] 6562 	ld	l, -10 (ix)
      0020DA DD 66 F7         [19] 6563 	ld	h, -9 (ix)
      0020DD 23               [ 6] 6564 	inc	hl
      0020DE 36 90            [10] 6565 	ld	(hl), #0x90
      0020E0 DD 6E F6         [19] 6566 	ld	l, -10 (ix)
      0020E3 DD 66 F7         [19] 6567 	ld	h, -9 (ix)
      0020E6 23               [ 6] 6568 	inc	hl
      0020E7 23               [ 6] 6569 	inc	hl
      0020E8 36 92            [10] 6570 	ld	(hl), #0x92
      0020EA DD 6E F6         [19] 6571 	ld	l, -10 (ix)
      0020ED DD 66 F7         [19] 6572 	ld	h, -9 (ix)
      0020F0 23               [ 6] 6573 	inc	hl
      0020F1 23               [ 6] 6574 	inc	hl
      0020F2 23               [ 6] 6575 	inc	hl
      0020F3 36 94            [10] 6576 	ld	(hl), #0x94
                                   6577 ;src\/Title.h:63: InitVRAM();
      0020F5 C5               [11] 6578 	push	bc
      0020F6 D5               [11] 6579 	push	de
      0020F7 CDrD7r0C         [17] 6580 	call	_InitVRAM
      0020FA D1               [10] 6581 	pop	de
      0020FB C1               [10] 6582 	pop	bc
                                   6583 ;src\/Title.h:65: LDIRVM(MSX_modedata_screen2.name, title, 32 * 24);
      0020FC 2A C7 F3         [16] 6584 	ld	hl, (#_MSX_modedata_screen2 + 0)
      0020FF C5               [11] 6585 	push	bc
      002100 D5               [11] 6586 	push	de
      002101 11 00 03         [10] 6587 	ld	de, #0x0300
      002104 D5               [11] 6588 	push	de
      002105 11r8Br22         [10] 6589 	ld	de, #_TitleScreen_title_65536_272
      002108 D5               [11] 6590 	push	de
      002109 E5               [11] 6591 	push	hl
      00210A CDr00r00         [17] 6592 	call	_LDIRVM
      00210D 21 06 00         [10] 6593 	ld	hl, #6
      002110 39               [11] 6594 	add	hl, sp
      002111 F9               [ 6] 6595 	ld	sp, hl
      002112 11 05 0D         [10] 6596 	ld	de, #0x0d05
      002115 D5               [11] 6597 	push	de
      002116 21r8Br25         [10] 6598 	ld	hl, #___str_9
      002119 E5               [11] 6599 	push	hl
      00211A CDrA8r07         [17] 6600 	call	_DrawString
      00211D F1               [10] 6601 	pop	af
      00211E 26 17            [ 7] 6602 	ld	h,#0x17
      002120 E3               [19] 6603 	ex	(sp),hl
      002121 33               [ 6] 6604 	inc	sp
      002122 AF               [ 4] 6605 	xor	a, a
      002123 F5               [11] 6606 	push	af
      002124 33               [ 6] 6607 	inc	sp
      002125 21rA2r25         [10] 6608 	ld	hl, #___str_10
      002128 E5               [11] 6609 	push	hl
      002129 CDrA8r07         [17] 6610 	call	_DrawString
      00212C F1               [10] 6611 	pop	af
      00212D F1               [10] 6612 	pop	af
      00212E 11 19 17         [10] 6613 	ld	de, #0x1719
      002131 D5               [11] 6614 	push	de
      002132 21rB7r25         [10] 6615 	ld	hl, #___str_11
      002135 E5               [11] 6616 	push	hl
      002136 CDrA8r07         [17] 6617 	call	_DrawString
      002139 F1               [10] 6618 	pop	af
      00213A F1               [10] 6619 	pop	af
      00213B D1               [10] 6620 	pop	de
      00213C C1               [10] 6621 	pop	bc
                                   6622 ;src\/Title.h:71: while(TRUE) {
      00213D                       6623 00120$:
                                   6624 ;src\/Title.h:72: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      00213D DD 36 FD 00      [19] 6625 	ld	-3 (ix), #0
                                   6626 ;src\/Title.h:76: word counter = 0;
      002141 AF               [ 4] 6627 	xor	a, a
      002142 DD 77 FE         [19] 6628 	ld	-2 (ix), a
      002145 DD 77 FF         [19] 6629 	ld	-1 (ix), a
                                   6630 ;src\/Title.h:84: do {
      002148                       6631 00106$:
                                   6632 ;src\/Title.h:85: col_1 = GetRandomInInterval(31, 0b00011111);
      002148 C5               [11] 6633 	push	bc
      002149 D5               [11] 6634 	push	de
      00214A 11 1F 1F         [10] 6635 	ld	de, #0x1f1f
      00214D D5               [11] 6636 	push	de
      00214E CDrD9r00         [17] 6637 	call	_GetRandomInInterval
      002151 F1               [10] 6638 	pop	af
                                   6639 ;src\/Title.h:86: line_1 = GetRandomInInterval(7, 0b00000111);
      002152 DD 75 F8         [19] 6640 	ld	-8 (ix), l
      002155 11 07 07         [10] 6641 	ld	de, #0x0707
      002158 D5               [11] 6642 	push	de
      002159 CDrD9r00         [17] 6643 	call	_GetRandomInInterval
      00215C F1               [10] 6644 	pop	af
      00215D D1               [10] 6645 	pop	de
      00215E C1               [10] 6646 	pop	bc
      00215F DD 75 F9         [19] 6647 	ld	-7 (ix), l
                                   6648 ;src\/Title.h:89: value = RDVRM(MSX_modedata_screen2.name + col_1 + (line_1 * 32));
      002162 2A C7 F3         [16] 6649 	ld	hl, (#_MSX_modedata_screen2 + 0)
      002165 DD 7E F8         [19] 6650 	ld	a, -8 (ix)
      002168 06 00            [ 7] 6651 	ld	b, #0x00
      00216A 85               [ 4] 6652 	add	a, l
      00216B DD 77 FB         [19] 6653 	ld	-5 (ix), a
      00216E 78               [ 4] 6654 	ld	a, b
      00216F 8C               [ 4] 6655 	adc	a, h
      002170 DD 77 FC         [19] 6656 	ld	-4 (ix), a
      002173 DD 6E F9         [19] 6657 	ld	l, -7 (ix)
      002176 26 00            [ 7] 6658 	ld	h, #0x00
      002178 29               [11] 6659 	add	hl, hl
      002179 29               [11] 6660 	add	hl, hl
      00217A 29               [11] 6661 	add	hl, hl
      00217B 29               [11] 6662 	add	hl, hl
      00217C 29               [11] 6663 	add	hl, hl
      00217D 7D               [ 4] 6664 	ld	a, l
      00217E DD 86 FB         [19] 6665 	add	a, -5 (ix)
      002181 6F               [ 4] 6666 	ld	l, a
      002182 7C               [ 4] 6667 	ld	a, h
      002183 DD 8E FC         [19] 6668 	adc	a, -4 (ix)
      002186 67               [ 4] 6669 	ld	h, a
      002187 C5               [11] 6670 	push	bc
      002188 D5               [11] 6671 	push	de
      002189 CDr00r00         [17] 6672 	call	_RDVRM
      00218C D1               [10] 6673 	pop	de
      00218D C1               [10] 6674 	pop	bc
      00218E DD 75 FA         [19] 6675 	ld	-6 (ix), l
                                   6676 ;src\/Title.h:91: if(counter++ > 1000) {
      002191 DD 46 FE         [19] 6677 	ld	b, -2 (ix)
      002194 DD 6E FF         [19] 6678 	ld	l, -1 (ix)
      002197 DD 34 FE         [23] 6679 	inc	-2 (ix)
      00219A 20 03            [12] 6680 	jr	NZ, 00192$
      00219C DD 34 FF         [23] 6681 	inc	-1 (ix)
      00219F                       6682 00192$:
      00219F 3E E8            [ 7] 6683 	ld	a, #0xe8
      0021A1 B8               [ 4] 6684 	cp	a, b
      0021A2 3E 03            [ 7] 6685 	ld	a, #0x03
      0021A4 9D               [ 4] 6686 	sbc	a, l
      0021A5 30 0F            [12] 6687 	jr	NC, 00107$
                                   6688 ;src\/Title.h:92: colorIndex++;
      0021A7 0C               [ 4] 6689 	inc	c
                                   6690 ;src\/Title.h:93: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0021A8 79               [ 4] 6691 	ld	a, c
      0021A9 D6 03            [ 7] 6692 	sub	a, #0x03
      0021AB 38 02            [12] 6693 	jr	C, 00102$
      0021AD 0E 00            [ 7] 6694 	ld	c, #0x00
      0021AF                       6695 00102$:
                                   6696 ;src\/Title.h:95: counter = 0;
      0021AF AF               [ 4] 6697 	xor	a, a
      0021B0 DD 77 FE         [19] 6698 	ld	-2 (ix), a
      0021B3 DD 77 FF         [19] 6699 	ld	-1 (ix), a
      0021B6                       6700 00107$:
                                   6701 ;src\/Title.h:98: while (value == EMPTY || value == colors[colorIndex + 1]);
      0021B6 DD 7E FA         [19] 6702 	ld	a, -6 (ix)
      0021B9 B7               [ 4] 6703 	or	a, a
      0021BA 28 8C            [12] 6704 	jr	Z, 00106$
      0021BC 79               [ 4] 6705 	ld	a, c
      0021BD 3C               [ 4] 6706 	inc	a
      0021BE F5               [11] 6707 	push	af
      0021BF 17               [ 4] 6708 	rla
      0021C0 9F               [ 4] 6709 	sbc	a, a
      0021C1 47               [ 4] 6710 	ld	b, a
      0021C2 F1               [10] 6711 	pop	af
      0021C3 DD 86 F6         [19] 6712 	add	a, -10 (ix)
      0021C6 DD 77 FB         [19] 6713 	ld	-5 (ix), a
      0021C9 78               [ 4] 6714 	ld	a, b
      0021CA DD 8E F7         [19] 6715 	adc	a, -9 (ix)
      0021CD DD 77 FC         [19] 6716 	ld	-4 (ix), a
      0021D0 DD 6E FB         [19] 6717 	ld	l, -5 (ix)
      0021D3 DD 66 FC         [19] 6718 	ld	h, -4 (ix)
      0021D6 46               [ 7] 6719 	ld	b, (hl)
      0021D7 DD 7E FA         [19] 6720 	ld	a, -6 (ix)
      0021DA 90               [ 4] 6721 	sub	a, b
      0021DB CAr48r21         [10] 6722 	jp	Z,00106$
                                   6723 ;src\/Title.h:112: rnd = GetRandomInInterval(7, 0b00000111);
      0021DE C5               [11] 6724 	push	bc
      0021DF D5               [11] 6725 	push	de
      0021E0 11 07 07         [10] 6726 	ld	de, #0x0707
      0021E3 D5               [11] 6727 	push	de
      0021E4 CDrD9r00         [17] 6728 	call	_GetRandomInInterval
      0021E7 F1               [10] 6729 	pop	af
      0021E8 D1               [10] 6730 	pop	de
      0021E9 C1               [10] 6731 	pop	bc
                                   6732 ;src\/Title.h:114: for(byte i=0; i < 10 + 0; i++) {
      0021EA 06 00            [ 7] 6733 	ld	b, #0x00
      0021EC                       6734 00123$:
      0021EC 78               [ 4] 6735 	ld	a, b
      0021ED D6 0A            [ 7] 6736 	sub	a, #0x0a
      0021EF 30 79            [12] 6737 	jr	NC, 00118$
                                   6738 ;src\/Title.h:116: word lastJiffy = JIFFY;
      0021F1 2A 9E FC         [16] 6739 	ld	hl, (_JIFFY)
      0021F4 DD 75 FE         [19] 6740 	ld	-2 (ix), l
      0021F7 DD 74 FF         [19] 6741 	ld	-1 (ix), h
                                   6742 ;src\/Title.h:117: while (JIFFY == lastJiffy) {
      0021FA                       6743 00109$:
      0021FA FD 21 9E FC      [14] 6744 	ld	iy, #_JIFFY
      0021FE FD 7E 00         [19] 6745 	ld	a, 0 (iy)
      002201 DD 96 FE         [19] 6746 	sub	a, -2 (ix)
      002204 20 08            [12] 6747 	jr	NZ, 00194$
      002206 FD 7E 01         [19] 6748 	ld	a, 1 (iy)
      002209 DD 96 FF         [19] 6749 	sub	a, -1 (ix)
      00220C 28 EC            [12] 6750 	jr	Z, 00109$
      00220E                       6751 00194$:
                                   6752 ;src\/Title.h:122: SetBlock(col_1, line_1, blocks[index]);
      00220E DD 6E FD         [19] 6753 	ld	l, -3 (ix)
      002211 26 00            [ 7] 6754 	ld	h, #0x00
      002213 19               [11] 6755 	add	hl, de
      002214 7E               [ 7] 6756 	ld	a, (hl)
      002215 C5               [11] 6757 	push	bc
      002216 D5               [11] 6758 	push	de
      002217 F5               [11] 6759 	push	af
      002218 33               [ 6] 6760 	inc	sp
      002219 DD 66 F9         [19] 6761 	ld	h, -7 (ix)
      00221C DD 6E F8         [19] 6762 	ld	l, -8 (ix)
      00221F E5               [11] 6763 	push	hl
      002220 CDr65r20         [17] 6764 	call	_SetBlock
      002223 F1               [10] 6765 	pop	af
      002224 33               [ 6] 6766 	inc	sp
      002225 D1               [10] 6767 	pop	de
      002226 C1               [10] 6768 	pop	bc
                                   6769 ;src\/Title.h:126: if(index++ >= sizeof(blocks)) index = 0;
      002227 DD 7E FD         [19] 6770 	ld	a, -3 (ix)
      00222A DD 34 FD         [23] 6771 	inc	-3 (ix)
      00222D D6 07            [ 7] 6772 	sub	a, #0x07
      00222F 38 04            [12] 6773 	jr	C, 00113$
      002231 DD 36 FD 00      [19] 6774 	ld	-3 (ix), #0
      002235                       6775 00113$:
                                   6776 ;src\/Title.h:139: spaceBar = GTTRIG(TRIG_Spacebar);
      002235 C5               [11] 6777 	push	bc
      002236 D5               [11] 6778 	push	de
      002237 2E 00            [ 7] 6779 	ld	l, #0x00
      002239 CDr00r00         [17] 6780 	call	_GTTRIG
                                   6781 ;src\/Title.h:140: btn1 = GTTRIG(TRIG_Joy1_A);
      00223C DD 75 FF         [19] 6782 	ld	-1 (ix), l
      00223F 2E 01            [ 7] 6783 	ld	l, #0x01
      002241 CDr00r00         [17] 6784 	call	_GTTRIG
      002244 D1               [10] 6785 	pop	de
      002245 C1               [10] 6786 	pop	bc
                                   6787 ;src\/Title.h:141: btn2 = GTTRIG(TRIG_Joy1_B);
      002246 E5               [11] 6788 	push	hl
      002247 C5               [11] 6789 	push	bc
      002248 D5               [11] 6790 	push	de
      002249 2E 03            [ 7] 6791 	ld	l, #0x03
      00224B CDr00r00         [17] 6792 	call	_GTTRIG
      00224E 7D               [ 4] 6793 	ld	a, l
      00224F D1               [10] 6794 	pop	de
      002250 C1               [10] 6795 	pop	bc
      002251 E1               [10] 6796 	pop	hl
      002252 67               [ 4] 6797 	ld	h, a
                                   6798 ;src\/Title.h:143: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002253 DD 7E FF         [19] 6799 	ld	a, -1 (ix)
      002256 3C               [ 4] 6800 	inc	a
      002257 28 06            [12] 6801 	jr	Z, 00114$
      002259 2C               [ 4] 6802 	inc	l
      00225A 28 03            [12] 6803 	jr	Z, 00114$
      00225C 24               [ 4] 6804 	inc	h
      00225D 20 08            [12] 6805 	jr	NZ, 00124$
      00225F                       6806 00114$:
                                   6807 ;src\/Title.h:144: rndSeed = JIFFY;
      00225F 3A 9E FC         [13] 6808 	ld	a,(#_JIFFY + 0)
      002262 32r08r00         [13] 6809 	ld	(#_rndSeed), a
                                   6810 ;src\/Title.h:145: return;
      002265 18 1F            [12] 6811 	jr	00125$
      002267                       6812 00124$:
                                   6813 ;src\/Title.h:114: for(byte i=0; i < 10 + 0; i++) {
      002267 04               [ 4] 6814 	inc	b
      002268 18 82            [12] 6815 	jr	00123$
      00226A                       6816 00118$:
                                   6817 ;src\/Title.h:149: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00226A DD 6E FB         [19] 6818 	ld	l, -5 (ix)
      00226D DD 66 FC         [19] 6819 	ld	h, -4 (ix)
      002270 7E               [ 7] 6820 	ld	a, (hl)
      002271 C5               [11] 6821 	push	bc
      002272 D5               [11] 6822 	push	de
      002273 F5               [11] 6823 	push	af
      002274 33               [ 6] 6824 	inc	sp
      002275 DD 66 F9         [19] 6825 	ld	h, -7 (ix)
      002278 DD 6E F8         [19] 6826 	ld	l, -8 (ix)
      00227B E5               [11] 6827 	push	hl
      00227C CDr65r20         [17] 6828 	call	_SetBlock
      00227F F1               [10] 6829 	pop	af
      002280 33               [ 6] 6830 	inc	sp
      002281 D1               [10] 6831 	pop	de
      002282 C1               [10] 6832 	pop	bc
      002283 C3r3Dr21         [10] 6833 	jp	00120$
      002286                       6834 00125$:
                                   6835 ;src\/Title.h:152: }
      002286 DD F9            [10] 6836 	ld	sp, ix
      002288 DD E1            [14] 6837 	pop	ix
      00228A C9               [10] 6838 	ret
      00228B                       6839 _TitleScreen_title_65536_272:
      00228B 00                    6840 	.db #0x00	; 0
      00228C 00                    6841 	.db #0x00	; 0
      00228D 00                    6842 	.db #0x00	; 0
      00228E 00                    6843 	.db #0x00	; 0
      00228F 8E                    6844 	.db #0x8e	; 142
      002290 8E                    6845 	.db #0x8e	; 142
      002291 8E                    6846 	.db #0x8e	; 142
      002292 8E                    6847 	.db #0x8e	; 142
      002293 00                    6848 	.db #0x00	; 0
      002294 8E                    6849 	.db #0x8e	; 142
      002295 8E                    6850 	.db #0x8e	; 142
      002296 8E                    6851 	.db #0x8e	; 142
      002297 8E                    6852 	.db #0x8e	; 142
      002298 8E                    6853 	.db #0x8e	; 142
      002299 8E                    6854 	.db #0x8e	; 142
      00229A 00                    6855 	.db #0x00	; 0
      00229B 00                    6856 	.db #0x00	; 0
      00229C 8E                    6857 	.db #0x8e	; 142
      00229D 8E                    6858 	.db #0x8e	; 142
      00229E 00                    6859 	.db #0x00	; 0
      00229F 00                    6860 	.db #0x00	; 0
      0022A0 00                    6861 	.db #0x00	; 0
      0022A1 8E                    6862 	.db #0x8e	; 142
      0022A2 8E                    6863 	.db #0x8e	; 142
      0022A3 00                    6864 	.db #0x00	; 0
      0022A4 00                    6865 	.db #0x00	; 0
      0022A5 00                    6866 	.db #0x00	; 0
      0022A6 00                    6867 	.db #0x00	; 0
      0022A7 8E                    6868 	.db #0x8e	; 142
      0022A8 8E                    6869 	.db #0x8e	; 142
      0022A9 8E                    6870 	.db #0x8e	; 142
      0022AA 8E                    6871 	.db #0x8e	; 142
      0022AB 00                    6872 	.db #0x00	; 0
      0022AC 00                    6873 	.db #0x00	; 0
      0022AD 00                    6874 	.db #0x00	; 0
      0022AE 8E                    6875 	.db #0x8e	; 142
      0022AF 8E                    6876 	.db #0x8e	; 142
      0022B0 8E                    6877 	.db #0x8e	; 142
      0022B1 8E                    6878 	.db #0x8e	; 142
      0022B2 8E                    6879 	.db #0x8e	; 142
      0022B3 00                    6880 	.db #0x00	; 0
      0022B4 8E                    6881 	.db #0x8e	; 142
      0022B5 8E                    6882 	.db #0x8e	; 142
      0022B6 00                    6883 	.db #0x00	; 0
      0022B7 00                    6884 	.db #0x00	; 0
      0022B8 00                    6885 	.db #0x00	; 0
      0022B9 8E                    6886 	.db #0x8e	; 142
      0022BA 8E                    6887 	.db #0x8e	; 142
      0022BB 00                    6888 	.db #0x00	; 0
      0022BC 00                    6889 	.db #0x00	; 0
      0022BD 8E                    6890 	.db #0x8e	; 142
      0022BE 8E                    6891 	.db #0x8e	; 142
      0022BF 00                    6892 	.db #0x00	; 0
      0022C0 00                    6893 	.db #0x00	; 0
      0022C1 8E                    6894 	.db #0x8e	; 142
      0022C2 8E                    6895 	.db #0x8e	; 142
      0022C3 00                    6896 	.db #0x00	; 0
      0022C4 00                    6897 	.db #0x00	; 0
      0022C5 00                    6898 	.db #0x00	; 0
      0022C6 8E                    6899 	.db #0x8e	; 142
      0022C7 8E                    6900 	.db #0x8e	; 142
      0022C8 8E                    6901 	.db #0x8e	; 142
      0022C9 8E                    6902 	.db #0x8e	; 142
      0022CA 8E                    6903 	.db #0x8e	; 142
      0022CB 00                    6904 	.db #0x00	; 0
      0022CC 00                    6905 	.db #0x00	; 0
      0022CD 8E                    6906 	.db #0x8e	; 142
      0022CE 8E                    6907 	.db #0x8e	; 142
      0022CF 8E                    6908 	.db #0x8e	; 142
      0022D0 00                    6909 	.db #0x00	; 0
      0022D1 8E                    6910 	.db #0x8e	; 142
      0022D2 8E                    6911 	.db #0x8e	; 142
      0022D3 00                    6912 	.db #0x00	; 0
      0022D4 8E                    6913 	.db #0x8e	; 142
      0022D5 8E                    6914 	.db #0x8e	; 142
      0022D6 00                    6915 	.db #0x00	; 0
      0022D7 00                    6916 	.db #0x00	; 0
      0022D8 00                    6917 	.db #0x00	; 0
      0022D9 8E                    6918 	.db #0x8e	; 142
      0022DA 8E                    6919 	.db #0x8e	; 142
      0022DB 00                    6920 	.db #0x00	; 0
      0022DC 00                    6921 	.db #0x00	; 0
      0022DD 00                    6922 	.db #0x00	; 0
      0022DE 8E                    6923 	.db #0x8e	; 142
      0022DF 8E                    6924 	.db #0x8e	; 142
      0022E0 00                    6925 	.db #0x00	; 0
      0022E1 8E                    6926 	.db #0x8e	; 142
      0022E2 8E                    6927 	.db #0x8e	; 142
      0022E3 00                    6928 	.db #0x00	; 0
      0022E4 00                    6929 	.db #0x00	; 0
      0022E5 8E                    6930 	.db #0x8e	; 142
      0022E6 8E                    6931 	.db #0x8e	; 142
      0022E7 8E                    6932 	.db #0x8e	; 142
      0022E8 00                    6933 	.db #0x00	; 0
      0022E9 8E                    6934 	.db #0x8e	; 142
      0022EA 8E                    6935 	.db #0x8e	; 142
      0022EB 00                    6936 	.db #0x00	; 0
      0022EC 8E                    6937 	.db #0x8e	; 142
      0022ED 8E                    6938 	.db #0x8e	; 142
      0022EE 8E                    6939 	.db #0x8e	; 142
      0022EF 00                    6940 	.db #0x00	; 0
      0022F0 00                    6941 	.db #0x00	; 0
      0022F1 8E                    6942 	.db #0x8e	; 142
      0022F2 8E                    6943 	.db #0x8e	; 142
      0022F3 00                    6944 	.db #0x00	; 0
      0022F4 8E                    6945 	.db #0x8e	; 142
      0022F5 8E                    6946 	.db #0x8e	; 142
      0022F6 00                    6947 	.db #0x00	; 0
      0022F7 00                    6948 	.db #0x00	; 0
      0022F8 8E                    6949 	.db #0x8e	; 142
      0022F9 8E                    6950 	.db #0x8e	; 142
      0022FA 00                    6951 	.db #0x00	; 0
      0022FB 00                    6952 	.db #0x00	; 0
      0022FC 00                    6953 	.db #0x00	; 0
      0022FD 00                    6954 	.db #0x00	; 0
      0022FE 00                    6955 	.db #0x00	; 0
      0022FF 8E                    6956 	.db #0x8e	; 142
      002300 8E                    6957 	.db #0x8e	; 142
      002301 8E                    6958 	.db #0x8e	; 142
      002302 00                    6959 	.db #0x00	; 0
      002303 00                    6960 	.db #0x00	; 0
      002304 8E                    6961 	.db #0x8e	; 142
      002305 8E                    6962 	.db #0x8e	; 142
      002306 8E                    6963 	.db #0x8e	; 142
      002307 00                    6964 	.db #0x00	; 0
      002308 00                    6965 	.db #0x00	; 0
      002309 8E                    6966 	.db #0x8e	; 142
      00230A 8E                    6967 	.db #0x8e	; 142
      00230B 00                    6968 	.db #0x00	; 0
      00230C 8E                    6969 	.db #0x8e	; 142
      00230D 8E                    6970 	.db #0x8e	; 142
      00230E 00                    6971 	.db #0x00	; 0
      00230F 00                    6972 	.db #0x00	; 0
      002310 00                    6973 	.db #0x00	; 0
      002311 8E                    6974 	.db #0x8e	; 142
      002312 8E                    6975 	.db #0x8e	; 142
      002313 00                    6976 	.db #0x00	; 0
      002314 8E                    6977 	.db #0x8e	; 142
      002315 8E                    6978 	.db #0x8e	; 142
      002316 8E                    6979 	.db #0x8e	; 142
      002317 8E                    6980 	.db #0x8e	; 142
      002318 8E                    6981 	.db #0x8e	; 142
      002319 00                    6982 	.db #0x00	; 0
      00231A 00                    6983 	.db #0x00	; 0
      00231B 00                    6984 	.db #0x00	; 0
      00231C 00                    6985 	.db #0x00	; 0
      00231D 00                    6986 	.db #0x00	; 0
      00231E 00                    6987 	.db #0x00	; 0
      00231F 8E                    6988 	.db #0x8e	; 142
      002320 8E                    6989 	.db #0x8e	; 142
      002321 00                    6990 	.db #0x00	; 0
      002322 00                    6991 	.db #0x00	; 0
      002323 00                    6992 	.db #0x00	; 0
      002324 8E                    6993 	.db #0x8e	; 142
      002325 8E                    6994 	.db #0x8e	; 142
      002326 00                    6995 	.db #0x00	; 0
      002327 00                    6996 	.db #0x00	; 0
      002328 00                    6997 	.db #0x00	; 0
      002329 8E                    6998 	.db #0x8e	; 142
      00232A 8E                    6999 	.db #0x8e	; 142
      00232B 00                    7000 	.db #0x00	; 0
      00232C 8E                    7001 	.db #0x8e	; 142
      00232D 8E                    7002 	.db #0x8e	; 142
      00232E 00                    7003 	.db #0x00	; 0
      00232F 00                    7004 	.db #0x00	; 0
      002330 00                    7005 	.db #0x00	; 0
      002331 8E                    7006 	.db #0x8e	; 142
      002332 8E                    7007 	.db #0x8e	; 142
      002333 00                    7008 	.db #0x00	; 0
      002334 8E                    7009 	.db #0x8e	; 142
      002335 8E                    7010 	.db #0x8e	; 142
      002336 8E                    7011 	.db #0x8e	; 142
      002337 8E                    7012 	.db #0x8e	; 142
      002338 8E                    7013 	.db #0x8e	; 142
      002339 00                    7014 	.db #0x00	; 0
      00233A 00                    7015 	.db #0x00	; 0
      00233B 00                    7016 	.db #0x00	; 0
      00233C 00                    7017 	.db #0x00	; 0
      00233D 00                    7018 	.db #0x00	; 0
      00233E 00                    7019 	.db #0x00	; 0
      00233F 8E                    7020 	.db #0x8e	; 142
      002340 8E                    7021 	.db #0x8e	; 142
      002341 00                    7022 	.db #0x00	; 0
      002342 00                    7023 	.db #0x00	; 0
      002343 00                    7024 	.db #0x00	; 0
      002344 8E                    7025 	.db #0x8e	; 142
      002345 8E                    7026 	.db #0x8e	; 142
      002346 00                    7027 	.db #0x00	; 0
      002347 00                    7028 	.db #0x00	; 0
      002348 00                    7029 	.db #0x00	; 0
      002349 8E                    7030 	.db #0x8e	; 142
      00234A 8E                    7031 	.db #0x8e	; 142
      00234B 00                    7032 	.db #0x00	; 0
      00234C 8E                    7033 	.db #0x8e	; 142
      00234D 8E                    7034 	.db #0x8e	; 142
      00234E 8E                    7035 	.db #0x8e	; 142
      00234F 8E                    7036 	.db #0x8e	; 142
      002350 8E                    7037 	.db #0x8e	; 142
      002351 8E                    7038 	.db #0x8e	; 142
      002352 8E                    7039 	.db #0x8e	; 142
      002353 00                    7040 	.db #0x00	; 0
      002354 8E                    7041 	.db #0x8e	; 142
      002355 8E                    7042 	.db #0x8e	; 142
      002356 00                    7043 	.db #0x00	; 0
      002357 00                    7044 	.db #0x00	; 0
      002358 00                    7045 	.db #0x00	; 0
      002359 8E                    7046 	.db #0x8e	; 142
      00235A 00                    7047 	.db #0x00	; 0
      00235B 00                    7048 	.db #0x00	; 0
      00235C 00                    7049 	.db #0x00	; 0
      00235D 00                    7050 	.db #0x00	; 0
      00235E 00                    7051 	.db #0x00	; 0
      00235F 8E                    7052 	.db #0x8e	; 142
      002360 8E                    7053 	.db #0x8e	; 142
      002361 00                    7054 	.db #0x00	; 0
      002362 00                    7055 	.db #0x00	; 0
      002363 00                    7056 	.db #0x00	; 0
      002364 8E                    7057 	.db #0x8e	; 142
      002365 8E                    7058 	.db #0x8e	; 142
      002366 8E                    7059 	.db #0x8e	; 142
      002367 8E                    7060 	.db #0x8e	; 142
      002368 8E                    7061 	.db #0x8e	; 142
      002369 8E                    7062 	.db #0x8e	; 142
      00236A 8E                    7063 	.db #0x8e	; 142
      00236B 00                    7064 	.db #0x00	; 0
      00236C 8E                    7065 	.db #0x8e	; 142
      00236D 8E                    7066 	.db #0x8e	; 142
      00236E 00                    7067 	.db #0x00	; 0
      00236F 00                    7068 	.db #0x00	; 0
      002370 00                    7069 	.db #0x00	; 0
      002371 8E                    7070 	.db #0x8e	; 142
      002372 8E                    7071 	.db #0x8e	; 142
      002373 00                    7072 	.db #0x00	; 0
      002374 8E                    7073 	.db #0x8e	; 142
      002375 8E                    7074 	.db #0x8e	; 142
      002376 00                    7075 	.db #0x00	; 0
      002377 00                    7076 	.db #0x00	; 0
      002378 00                    7077 	.db #0x00	; 0
      002379 8E                    7078 	.db #0x8e	; 142
      00237A 00                    7079 	.db #0x00	; 0
      00237B 00                    7080 	.db #0x00	; 0
      00237C 00                    7081 	.db #0x00	; 0
      00237D 00                    7082 	.db #0x00	; 0
      00237E 00                    7083 	.db #0x00	; 0
      00237F 8E                    7084 	.db #0x8e	; 142
      002380 8E                    7085 	.db #0x8e	; 142
      002381 00                    7086 	.db #0x00	; 0
      002382 00                    7087 	.db #0x00	; 0
      002383 00                    7088 	.db #0x00	; 0
      002384 8E                    7089 	.db #0x8e	; 142
      002385 8E                    7090 	.db #0x8e	; 142
      002386 00                    7091 	.db #0x00	; 0
      002387 00                    7092 	.db #0x00	; 0
      002388 00                    7093 	.db #0x00	; 0
      002389 8E                    7094 	.db #0x8e	; 142
      00238A 8E                    7095 	.db #0x8e	; 142
      00238B 00                    7096 	.db #0x00	; 0
      00238C 00                    7097 	.db #0x00	; 0
      00238D 00                    7098 	.db #0x00	; 0
      00238E 00                    7099 	.db #0x00	; 0
      00238F 00                    7100 	.db #0x00	; 0
      002390 00                    7101 	.db #0x00	; 0
      002391 00                    7102 	.db #0x00	; 0
      002392 00                    7103 	.db #0x00	; 0
      002393 00                    7104 	.db #0x00	; 0
      002394 00                    7105 	.db #0x00	; 0
      002395 00                    7106 	.db #0x00	; 0
      002396 00                    7107 	.db #0x00	; 0
      002397 00                    7108 	.db #0x00	; 0
      002398 00                    7109 	.db #0x00	; 0
      002399 00                    7110 	.db #0x00	; 0
      00239A 00                    7111 	.db #0x00	; 0
      00239B 00                    7112 	.db #0x00	; 0
      00239C 00                    7113 	.db #0x00	; 0
      00239D 00                    7114 	.db #0x00	; 0
      00239E 00                    7115 	.db #0x00	; 0
      00239F 00                    7116 	.db #0x00	; 0
      0023A0 00                    7117 	.db #0x00	; 0
      0023A1 00                    7118 	.db #0x00	; 0
      0023A2 00                    7119 	.db #0x00	; 0
      0023A3 00                    7120 	.db #0x00	; 0
      0023A4 00                    7121 	.db #0x00	; 0
      0023A5 00                    7122 	.db #0x00	; 0
      0023A6 00                    7123 	.db #0x00	; 0
      0023A7 00                    7124 	.db #0x00	; 0
      0023A8 00                    7125 	.db #0x00	; 0
      0023A9 00                    7126 	.db #0x00	; 0
      0023AA 00                    7127 	.db #0x00	; 0
      0023AB 00                    7128 	.db #0x00	; 0
      0023AC 00                    7129 	.db #0x00	; 0
      0023AD 00                    7130 	.db #0x00	; 0
      0023AE 00                    7131 	.db #0x00	; 0
      0023AF 00                    7132 	.db #0x00	; 0
      0023B0 00                    7133 	.db #0x00	; 0
      0023B1 00                    7134 	.db #0x00	; 0
      0023B2 00                    7135 	.db #0x00	; 0
      0023B3 00                    7136 	.db #0x00	; 0
      0023B4 00                    7137 	.db #0x00	; 0
      0023B5 00                    7138 	.db #0x00	; 0
      0023B6 00                    7139 	.db #0x00	; 0
      0023B7 00                    7140 	.db #0x00	; 0
      0023B8 00                    7141 	.db #0x00	; 0
      0023B9 00                    7142 	.db #0x00	; 0
      0023BA 00                    7143 	.db #0x00	; 0
      0023BB 00                    7144 	.db #0x00	; 0
      0023BC 00                    7145 	.db #0x00	; 0
      0023BD 00                    7146 	.db #0x00	; 0
      0023BE 00                    7147 	.db #0x00	; 0
      0023BF 00                    7148 	.db #0x00	; 0
      0023C0 00                    7149 	.db #0x00	; 0
      0023C1 00                    7150 	.db #0x00	; 0
      0023C2 00                    7151 	.db #0x00	; 0
      0023C3 00                    7152 	.db #0x00	; 0
      0023C4 00                    7153 	.db #0x00	; 0
      0023C5 00                    7154 	.db #0x00	; 0
      0023C6 00                    7155 	.db #0x00	; 0
      0023C7 00                    7156 	.db #0x00	; 0
      0023C8 00                    7157 	.db #0x00	; 0
      0023C9 00                    7158 	.db #0x00	; 0
      0023CA 00                    7159 	.db #0x00	; 0
      0023CB 00                    7160 	.db #0x00	; 0
      0023CC 00                    7161 	.db #0x00	; 0
      0023CD 00                    7162 	.db #0x00	; 0
      0023CE 00                    7163 	.db #0x00	; 0
      0023CF 00                    7164 	.db #0x00	; 0
      0023D0 00                    7165 	.db #0x00	; 0
      0023D1 00                    7166 	.db #0x00	; 0
      0023D2 00                    7167 	.db #0x00	; 0
      0023D3 00                    7168 	.db #0x00	; 0
      0023D4 00                    7169 	.db #0x00	; 0
      0023D5 00                    7170 	.db #0x00	; 0
      0023D6 00                    7171 	.db #0x00	; 0
      0023D7 00                    7172 	.db #0x00	; 0
      0023D8 00                    7173 	.db #0x00	; 0
      0023D9 00                    7174 	.db #0x00	; 0
      0023DA 00                    7175 	.db #0x00	; 0
      0023DB 00                    7176 	.db #0x00	; 0
      0023DC 00                    7177 	.db #0x00	; 0
      0023DD 00                    7178 	.db #0x00	; 0
      0023DE 00                    7179 	.db #0x00	; 0
      0023DF 00                    7180 	.db #0x00	; 0
      0023E0 00                    7181 	.db #0x00	; 0
      0023E1 00                    7182 	.db #0x00	; 0
      0023E2 00                    7183 	.db #0x00	; 0
      0023E3 00                    7184 	.db #0x00	; 0
      0023E4 00                    7185 	.db #0x00	; 0
      0023E5 00                    7186 	.db #0x00	; 0
      0023E6 00                    7187 	.db #0x00	; 0
      0023E7 00                    7188 	.db #0x00	; 0
      0023E8 00                    7189 	.db #0x00	; 0
      0023E9 00                    7190 	.db #0x00	; 0
      0023EA 00                    7191 	.db #0x00	; 0
      0023EB 00                    7192 	.db #0x00	; 0
      0023EC 00                    7193 	.db #0x00	; 0
      0023ED 00                    7194 	.db #0x00	; 0
      0023EE 00                    7195 	.db #0x00	; 0
      0023EF 00                    7196 	.db #0x00	; 0
      0023F0 00                    7197 	.db #0x00	; 0
      0023F1 00                    7198 	.db #0x00	; 0
      0023F2 00                    7199 	.db #0x00	; 0
      0023F3 00                    7200 	.db #0x00	; 0
      0023F4 00                    7201 	.db #0x00	; 0
      0023F5 00                    7202 	.db #0x00	; 0
      0023F6 00                    7203 	.db #0x00	; 0
      0023F7 00                    7204 	.db #0x00	; 0
      0023F8 00                    7205 	.db #0x00	; 0
      0023F9 00                    7206 	.db #0x00	; 0
      0023FA 00                    7207 	.db #0x00	; 0
      0023FB 00                    7208 	.db #0x00	; 0
      0023FC 00                    7209 	.db #0x00	; 0
      0023FD 00                    7210 	.db #0x00	; 0
      0023FE 00                    7211 	.db #0x00	; 0
      0023FF 00                    7212 	.db #0x00	; 0
      002400 00                    7213 	.db #0x00	; 0
      002401 00                    7214 	.db #0x00	; 0
      002402 00                    7215 	.db #0x00	; 0
      002403 00                    7216 	.db #0x00	; 0
      002404 00                    7217 	.db #0x00	; 0
      002405 00                    7218 	.db #0x00	; 0
      002406 00                    7219 	.db #0x00	; 0
      002407 00                    7220 	.db #0x00	; 0
      002408 00                    7221 	.db #0x00	; 0
      002409 00                    7222 	.db #0x00	; 0
      00240A 00                    7223 	.db #0x00	; 0
      00240B 00                    7224 	.db #0x00	; 0
      00240C 00                    7225 	.db #0x00	; 0
      00240D 00                    7226 	.db #0x00	; 0
      00240E 00                    7227 	.db #0x00	; 0
      00240F 00                    7228 	.db #0x00	; 0
      002410 00                    7229 	.db #0x00	; 0
      002411 00                    7230 	.db #0x00	; 0
      002412 00                    7231 	.db #0x00	; 0
      002413 00                    7232 	.db #0x00	; 0
      002414 00                    7233 	.db #0x00	; 0
      002415 00                    7234 	.db #0x00	; 0
      002416 00                    7235 	.db #0x00	; 0
      002417 00                    7236 	.db #0x00	; 0
      002418 00                    7237 	.db #0x00	; 0
      002419 00                    7238 	.db #0x00	; 0
      00241A 00                    7239 	.db #0x00	; 0
      00241B 00                    7240 	.db #0x00	; 0
      00241C 00                    7241 	.db #0x00	; 0
      00241D 00                    7242 	.db #0x00	; 0
      00241E 00                    7243 	.db #0x00	; 0
      00241F 00                    7244 	.db #0x00	; 0
      002420 00                    7245 	.db #0x00	; 0
      002421 00                    7246 	.db #0x00	; 0
      002422 00                    7247 	.db #0x00	; 0
      002423 00                    7248 	.db #0x00	; 0
      002424 00                    7249 	.db #0x00	; 0
      002425 00                    7250 	.db #0x00	; 0
      002426 00                    7251 	.db #0x00	; 0
      002427 00                    7252 	.db #0x00	; 0
      002428 00                    7253 	.db #0x00	; 0
      002429 00                    7254 	.db #0x00	; 0
      00242A 00                    7255 	.db #0x00	; 0
      00242B 00                    7256 	.db #0x00	; 0
      00242C 00                    7257 	.db #0x00	; 0
      00242D 00                    7258 	.db #0x00	; 0
      00242E 00                    7259 	.db #0x00	; 0
      00242F 00                    7260 	.db #0x00	; 0
      002430 00                    7261 	.db #0x00	; 0
      002431 00                    7262 	.db #0x00	; 0
      002432 00                    7263 	.db #0x00	; 0
      002433 00                    7264 	.db #0x00	; 0
      002434 00                    7265 	.db #0x00	; 0
      002435 00                    7266 	.db #0x00	; 0
      002436 00                    7267 	.db #0x00	; 0
      002437 00                    7268 	.db #0x00	; 0
      002438 00                    7269 	.db #0x00	; 0
      002439 00                    7270 	.db #0x00	; 0
      00243A 00                    7271 	.db #0x00	; 0
      00243B 00                    7272 	.db #0x00	; 0
      00243C 00                    7273 	.db #0x00	; 0
      00243D 00                    7274 	.db #0x00	; 0
      00243E 00                    7275 	.db #0x00	; 0
      00243F 00                    7276 	.db #0x00	; 0
      002440 00                    7277 	.db #0x00	; 0
      002441 00                    7278 	.db #0x00	; 0
      002442 00                    7279 	.db #0x00	; 0
      002443 00                    7280 	.db #0x00	; 0
      002444 00                    7281 	.db #0x00	; 0
      002445 00                    7282 	.db #0x00	; 0
      002446 00                    7283 	.db #0x00	; 0
      002447 00                    7284 	.db #0x00	; 0
      002448 00                    7285 	.db #0x00	; 0
      002449 00                    7286 	.db #0x00	; 0
      00244A 00                    7287 	.db #0x00	; 0
      00244B 00                    7288 	.db #0x00	; 0
      00244C 00                    7289 	.db #0x00	; 0
      00244D 00                    7290 	.db #0x00	; 0
      00244E 00                    7291 	.db #0x00	; 0
      00244F 00                    7292 	.db #0x00	; 0
      002450 00                    7293 	.db #0x00	; 0
      002451 00                    7294 	.db #0x00	; 0
      002452 00                    7295 	.db #0x00	; 0
      002453 00                    7296 	.db #0x00	; 0
      002454 00                    7297 	.db #0x00	; 0
      002455 00                    7298 	.db #0x00	; 0
      002456 00                    7299 	.db #0x00	; 0
      002457 00                    7300 	.db #0x00	; 0
      002458 00                    7301 	.db #0x00	; 0
      002459 00                    7302 	.db #0x00	; 0
      00245A 00                    7303 	.db #0x00	; 0
      00245B 00                    7304 	.db #0x00	; 0
      00245C 00                    7305 	.db #0x00	; 0
      00245D 00                    7306 	.db #0x00	; 0
      00245E 00                    7307 	.db #0x00	; 0
      00245F 00                    7308 	.db #0x00	; 0
      002460 00                    7309 	.db #0x00	; 0
      002461 00                    7310 	.db #0x00	; 0
      002462 00                    7311 	.db #0x00	; 0
      002463 00                    7312 	.db #0x00	; 0
      002464 00                    7313 	.db #0x00	; 0
      002465 00                    7314 	.db #0x00	; 0
      002466 00                    7315 	.db #0x00	; 0
      002467 00                    7316 	.db #0x00	; 0
      002468 00                    7317 	.db #0x00	; 0
      002469 00                    7318 	.db #0x00	; 0
      00246A 00                    7319 	.db #0x00	; 0
      00246B 00                    7320 	.db #0x00	; 0
      00246C 00                    7321 	.db #0x00	; 0
      00246D 00                    7322 	.db #0x00	; 0
      00246E 00                    7323 	.db #0x00	; 0
      00246F 00                    7324 	.db #0x00	; 0
      002470 00                    7325 	.db #0x00	; 0
      002471 00                    7326 	.db #0x00	; 0
      002472 00                    7327 	.db #0x00	; 0
      002473 00                    7328 	.db #0x00	; 0
      002474 00                    7329 	.db #0x00	; 0
      002475 00                    7330 	.db #0x00	; 0
      002476 00                    7331 	.db #0x00	; 0
      002477 00                    7332 	.db #0x00	; 0
      002478 00                    7333 	.db #0x00	; 0
      002479 00                    7334 	.db #0x00	; 0
      00247A 00                    7335 	.db #0x00	; 0
      00247B 00                    7336 	.db #0x00	; 0
      00247C 00                    7337 	.db #0x00	; 0
      00247D 00                    7338 	.db #0x00	; 0
      00247E 00                    7339 	.db #0x00	; 0
      00247F 00                    7340 	.db #0x00	; 0
      002480 00                    7341 	.db #0x00	; 0
      002481 00                    7342 	.db #0x00	; 0
      002482 00                    7343 	.db #0x00	; 0
      002483 00                    7344 	.db #0x00	; 0
      002484 00                    7345 	.db #0x00	; 0
      002485 00                    7346 	.db #0x00	; 0
      002486 00                    7347 	.db #0x00	; 0
      002487 00                    7348 	.db #0x00	; 0
      002488 00                    7349 	.db #0x00	; 0
      002489 00                    7350 	.db #0x00	; 0
      00248A 00                    7351 	.db #0x00	; 0
      00248B 00                    7352 	.db #0x00	; 0
      00248C 00                    7353 	.db #0x00	; 0
      00248D 00                    7354 	.db #0x00	; 0
      00248E 00                    7355 	.db #0x00	; 0
      00248F 00                    7356 	.db #0x00	; 0
      002490 00                    7357 	.db #0x00	; 0
      002491 00                    7358 	.db #0x00	; 0
      002492 00                    7359 	.db #0x00	; 0
      002493 00                    7360 	.db #0x00	; 0
      002494 00                    7361 	.db #0x00	; 0
      002495 00                    7362 	.db #0x00	; 0
      002496 00                    7363 	.db #0x00	; 0
      002497 00                    7364 	.db #0x00	; 0
      002498 00                    7365 	.db #0x00	; 0
      002499 00                    7366 	.db #0x00	; 0
      00249A 00                    7367 	.db #0x00	; 0
      00249B 00                    7368 	.db #0x00	; 0
      00249C 00                    7369 	.db #0x00	; 0
      00249D 00                    7370 	.db #0x00	; 0
      00249E 00                    7371 	.db #0x00	; 0
      00249F 00                    7372 	.db #0x00	; 0
      0024A0 00                    7373 	.db #0x00	; 0
      0024A1 00                    7374 	.db #0x00	; 0
      0024A2 00                    7375 	.db #0x00	; 0
      0024A3 00                    7376 	.db #0x00	; 0
      0024A4 00                    7377 	.db #0x00	; 0
      0024A5 00                    7378 	.db #0x00	; 0
      0024A6 00                    7379 	.db #0x00	; 0
      0024A7 00                    7380 	.db #0x00	; 0
      0024A8 00                    7381 	.db #0x00	; 0
      0024A9 00                    7382 	.db #0x00	; 0
      0024AA 00                    7383 	.db #0x00	; 0
      0024AB 00                    7384 	.db #0x00	; 0
      0024AC 00                    7385 	.db #0x00	; 0
      0024AD 00                    7386 	.db #0x00	; 0
      0024AE 00                    7387 	.db #0x00	; 0
      0024AF 00                    7388 	.db #0x00	; 0
      0024B0 00                    7389 	.db #0x00	; 0
      0024B1 00                    7390 	.db #0x00	; 0
      0024B2 00                    7391 	.db #0x00	; 0
      0024B3 00                    7392 	.db #0x00	; 0
      0024B4 00                    7393 	.db #0x00	; 0
      0024B5 00                    7394 	.db #0x00	; 0
      0024B6 00                    7395 	.db #0x00	; 0
      0024B7 00                    7396 	.db #0x00	; 0
      0024B8 00                    7397 	.db #0x00	; 0
      0024B9 00                    7398 	.db #0x00	; 0
      0024BA 00                    7399 	.db #0x00	; 0
      0024BB 00                    7400 	.db #0x00	; 0
      0024BC 00                    7401 	.db #0x00	; 0
      0024BD 00                    7402 	.db #0x00	; 0
      0024BE 00                    7403 	.db #0x00	; 0
      0024BF 00                    7404 	.db #0x00	; 0
      0024C0 00                    7405 	.db #0x00	; 0
      0024C1 00                    7406 	.db #0x00	; 0
      0024C2 00                    7407 	.db #0x00	; 0
      0024C3 00                    7408 	.db #0x00	; 0
      0024C4 00                    7409 	.db #0x00	; 0
      0024C5 00                    7410 	.db #0x00	; 0
      0024C6 00                    7411 	.db #0x00	; 0
      0024C7 00                    7412 	.db #0x00	; 0
      0024C8 00                    7413 	.db #0x00	; 0
      0024C9 00                    7414 	.db #0x00	; 0
      0024CA 00                    7415 	.db #0x00	; 0
      0024CB 00                    7416 	.db #0x00	; 0
      0024CC 00                    7417 	.db #0x00	; 0
      0024CD 00                    7418 	.db #0x00	; 0
      0024CE 00                    7419 	.db #0x00	; 0
      0024CF 00                    7420 	.db #0x00	; 0
      0024D0 00                    7421 	.db #0x00	; 0
      0024D1 00                    7422 	.db #0x00	; 0
      0024D2 00                    7423 	.db #0x00	; 0
      0024D3 00                    7424 	.db #0x00	; 0
      0024D4 00                    7425 	.db #0x00	; 0
      0024D5 00                    7426 	.db #0x00	; 0
      0024D6 00                    7427 	.db #0x00	; 0
      0024D7 00                    7428 	.db #0x00	; 0
      0024D8 00                    7429 	.db #0x00	; 0
      0024D9 00                    7430 	.db #0x00	; 0
      0024DA 00                    7431 	.db #0x00	; 0
      0024DB 00                    7432 	.db #0x00	; 0
      0024DC 00                    7433 	.db #0x00	; 0
      0024DD 00                    7434 	.db #0x00	; 0
      0024DE 00                    7435 	.db #0x00	; 0
      0024DF 00                    7436 	.db #0x00	; 0
      0024E0 00                    7437 	.db #0x00	; 0
      0024E1 00                    7438 	.db #0x00	; 0
      0024E2 00                    7439 	.db #0x00	; 0
      0024E3 00                    7440 	.db #0x00	; 0
      0024E4 00                    7441 	.db #0x00	; 0
      0024E5 00                    7442 	.db #0x00	; 0
      0024E6 00                    7443 	.db #0x00	; 0
      0024E7 00                    7444 	.db #0x00	; 0
      0024E8 00                    7445 	.db #0x00	; 0
      0024E9 00                    7446 	.db #0x00	; 0
      0024EA 00                    7447 	.db #0x00	; 0
      0024EB 00                    7448 	.db #0x00	; 0
      0024EC 00                    7449 	.db #0x00	; 0
      0024ED 00                    7450 	.db #0x00	; 0
      0024EE 00                    7451 	.db #0x00	; 0
      0024EF 00                    7452 	.db #0x00	; 0
      0024F0 00                    7453 	.db #0x00	; 0
      0024F1 00                    7454 	.db #0x00	; 0
      0024F2 00                    7455 	.db #0x00	; 0
      0024F3 00                    7456 	.db #0x00	; 0
      0024F4 00                    7457 	.db #0x00	; 0
      0024F5 00                    7458 	.db #0x00	; 0
      0024F6 00                    7459 	.db #0x00	; 0
      0024F7 00                    7460 	.db #0x00	; 0
      0024F8 00                    7461 	.db #0x00	; 0
      0024F9 00                    7462 	.db #0x00	; 0
      0024FA 00                    7463 	.db #0x00	; 0
      0024FB 00                    7464 	.db #0x00	; 0
      0024FC 00                    7465 	.db #0x00	; 0
      0024FD 00                    7466 	.db #0x00	; 0
      0024FE 00                    7467 	.db #0x00	; 0
      0024FF 00                    7468 	.db #0x00	; 0
      002500 00                    7469 	.db #0x00	; 0
      002501 00                    7470 	.db #0x00	; 0
      002502 00                    7471 	.db #0x00	; 0
      002503 00                    7472 	.db #0x00	; 0
      002504 00                    7473 	.db #0x00	; 0
      002505 00                    7474 	.db #0x00	; 0
      002506 00                    7475 	.db #0x00	; 0
      002507 00                    7476 	.db #0x00	; 0
      002508 00                    7477 	.db #0x00	; 0
      002509 00                    7478 	.db #0x00	; 0
      00250A 00                    7479 	.db #0x00	; 0
      00250B 00                    7480 	.db #0x00	; 0
      00250C 00                    7481 	.db #0x00	; 0
      00250D 00                    7482 	.db #0x00	; 0
      00250E 00                    7483 	.db #0x00	; 0
      00250F 00                    7484 	.db #0x00	; 0
      002510 00                    7485 	.db #0x00	; 0
      002511 00                    7486 	.db #0x00	; 0
      002512 00                    7487 	.db #0x00	; 0
      002513 00                    7488 	.db #0x00	; 0
      002514 00                    7489 	.db #0x00	; 0
      002515 00                    7490 	.db #0x00	; 0
      002516 00                    7491 	.db #0x00	; 0
      002517 00                    7492 	.db #0x00	; 0
      002518 00                    7493 	.db #0x00	; 0
      002519 00                    7494 	.db #0x00	; 0
      00251A 00                    7495 	.db #0x00	; 0
      00251B 00                    7496 	.db #0x00	; 0
      00251C 00                    7497 	.db #0x00	; 0
      00251D 00                    7498 	.db #0x00	; 0
      00251E 00                    7499 	.db #0x00	; 0
      00251F 00                    7500 	.db #0x00	; 0
      002520 00                    7501 	.db #0x00	; 0
      002521 00                    7502 	.db #0x00	; 0
      002522 00                    7503 	.db #0x00	; 0
      002523 00                    7504 	.db #0x00	; 0
      002524 00                    7505 	.db #0x00	; 0
      002525 00                    7506 	.db #0x00	; 0
      002526 00                    7507 	.db #0x00	; 0
      002527 00                    7508 	.db #0x00	; 0
      002528 00                    7509 	.db #0x00	; 0
      002529 00                    7510 	.db #0x00	; 0
      00252A 00                    7511 	.db #0x00	; 0
      00252B 00                    7512 	.db #0x00	; 0
      00252C 00                    7513 	.db #0x00	; 0
      00252D 00                    7514 	.db #0x00	; 0
      00252E 00                    7515 	.db #0x00	; 0
      00252F 00                    7516 	.db #0x00	; 0
      002530 00                    7517 	.db #0x00	; 0
      002531 00                    7518 	.db #0x00	; 0
      002532 00                    7519 	.db #0x00	; 0
      002533 00                    7520 	.db #0x00	; 0
      002534 00                    7521 	.db #0x00	; 0
      002535 00                    7522 	.db #0x00	; 0
      002536 00                    7523 	.db #0x00	; 0
      002537 00                    7524 	.db #0x00	; 0
      002538 00                    7525 	.db #0x00	; 0
      002539 00                    7526 	.db #0x00	; 0
      00253A 00                    7527 	.db #0x00	; 0
      00253B 00                    7528 	.db #0x00	; 0
      00253C 00                    7529 	.db #0x00	; 0
      00253D 00                    7530 	.db #0x00	; 0
      00253E 00                    7531 	.db #0x00	; 0
      00253F 00                    7532 	.db #0x00	; 0
      002540 00                    7533 	.db #0x00	; 0
      002541 00                    7534 	.db #0x00	; 0
      002542 00                    7535 	.db #0x00	; 0
      002543 00                    7536 	.db #0x00	; 0
      002544 00                    7537 	.db #0x00	; 0
      002545 00                    7538 	.db #0x00	; 0
      002546 00                    7539 	.db #0x00	; 0
      002547 00                    7540 	.db #0x00	; 0
      002548 00                    7541 	.db #0x00	; 0
      002549 00                    7542 	.db #0x00	; 0
      00254A 00                    7543 	.db #0x00	; 0
      00254B 00                    7544 	.db #0x00	; 0
      00254C 00                    7545 	.db #0x00	; 0
      00254D 00                    7546 	.db #0x00	; 0
      00254E 00                    7547 	.db #0x00	; 0
      00254F 00                    7548 	.db #0x00	; 0
      002550 00                    7549 	.db #0x00	; 0
      002551 00                    7550 	.db #0x00	; 0
      002552 00                    7551 	.db #0x00	; 0
      002553 00                    7552 	.db #0x00	; 0
      002554 00                    7553 	.db #0x00	; 0
      002555 00                    7554 	.db #0x00	; 0
      002556 00                    7555 	.db #0x00	; 0
      002557 00                    7556 	.db #0x00	; 0
      002558 00                    7557 	.db #0x00	; 0
      002559 00                    7558 	.db #0x00	; 0
      00255A 00                    7559 	.db #0x00	; 0
      00255B 00                    7560 	.db #0x00	; 0
      00255C 00                    7561 	.db #0x00	; 0
      00255D 00                    7562 	.db #0x00	; 0
      00255E 00                    7563 	.db #0x00	; 0
      00255F 00                    7564 	.db #0x00	; 0
      002560 00                    7565 	.db #0x00	; 0
      002561 00                    7566 	.db #0x00	; 0
      002562 00                    7567 	.db #0x00	; 0
      002563 00                    7568 	.db #0x00	; 0
      002564 00                    7569 	.db #0x00	; 0
      002565 00                    7570 	.db #0x00	; 0
      002566 00                    7571 	.db #0x00	; 0
      002567 00                    7572 	.db #0x00	; 0
      002568 00                    7573 	.db #0x00	; 0
      002569 00                    7574 	.db #0x00	; 0
      00256A 00                    7575 	.db #0x00	; 0
      00256B 00                    7576 	.db #0x00	; 0
      00256C 00                    7577 	.db #0x00	; 0
      00256D 00                    7578 	.db #0x00	; 0
      00256E 00                    7579 	.db #0x00	; 0
      00256F 00                    7580 	.db #0x00	; 0
      002570 00                    7581 	.db #0x00	; 0
      002571 00                    7582 	.db #0x00	; 0
      002572 00                    7583 	.db #0x00	; 0
      002573 00                    7584 	.db #0x00	; 0
      002574 00                    7585 	.db #0x00	; 0
      002575 00                    7586 	.db #0x00	; 0
      002576 00                    7587 	.db #0x00	; 0
      002577 00                    7588 	.db #0x00	; 0
      002578 00                    7589 	.db #0x00	; 0
      002579 00                    7590 	.db #0x00	; 0
      00257A 00                    7591 	.db #0x00	; 0
      00257B 00                    7592 	.db #0x00	; 0
      00257C 00                    7593 	.db #0x00	; 0
      00257D 00                    7594 	.db #0x00	; 0
      00257E 00                    7595 	.db #0x00	; 0
      00257F 00                    7596 	.db #0x00	; 0
      002580 00                    7597 	.db #0x00	; 0
      002581 00                    7598 	.db #0x00	; 0
      002582 00                    7599 	.db #0x00	; 0
      002583 00                    7600 	.db #0x00	; 0
      002584 00                    7601 	.db #0x00	; 0
      002585 00                    7602 	.db #0x00	; 0
      002586 00                    7603 	.db #0x00	; 0
      002587 00                    7604 	.db #0x00	; 0
      002588 00                    7605 	.db #0x00	; 0
      002589 00                    7606 	.db #0x00	; 0
      00258A 00                    7607 	.db #0x00	; 0
      00258B                       7608 ___str_9:
      00258B 50 52 45 53 53 20 54  7609 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0025A1 00                    7610 	.db 0x00
      0025A2                       7611 ___str_10:
      0025A2 41 4E 44 52 45 42 41  7612 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0025B6 00                    7613 	.db 0x00
      0025B7                       7614 ___str_11:
      0025B7 76 2E 3F 2E 3F 2E 3F  7615 	.ascii "v.?.?.?"
      0025BE 00                    7616 	.db 0x00
                                   7617 ;src\main.c:85: void main() {
                                   7618 ;	---------------------------------
                                   7619 ; Function main
                                   7620 ; ---------------------------------
      0025BF                       7621 _main::
                                   7622 ;src\main.c:87: while(TRUE) {
      0025BF                       7623 00102$:
                                   7624 ;src\main.c:89: Intro();
      0025BF CDrD7r1F         [17] 7625 	call	_Intro
                                   7626 ;src\main.c:91: TitleScreen();
      0025C2 CDr90r20         [17] 7627 	call	_TitleScreen
                                   7628 ;src\main.c:93: InitGame();
      0025C5 CDr61r1E         [17] 7629 	call	_InitGame
                                   7630 ;src\main.c:96: }
      0025C8 18 F5            [12] 7631 	jr	00102$
                                   7632 	.area _CODE
                                   7633 	.area _INITIALIZER
      000000                       7634 __xinit__gameOver:
      000000 00                    7635 	.db #0x00	; 0
      000001                       7636 __xinit__col:
      000001 00                    7637 	.db #0x00	; 0
      000002                       7638 __xinit__line:
      000002 00                    7639 	.db #0x00	; 0
      000003                       7640 __xinit__counter:
      000003 00                    7641 	.db #0x00	; 0
      000004                       7642 __xinit__blocksRemoved:
      000004 00 00                 7643 	.dw #0x0000
      000006                       7644 __xinit__level:
      000006 01                    7645 	.db #0x01	; 1
      000007                       7646 __xinit__newLevel:
      000007 00                    7647 	.db #0x00	; 0
      000008                       7648 __xinit__rndSeed:
      000008 00                    7649 	.db #0x00	; 0
      000009                       7650 __xinit__d_col:
      000009 00                    7651 	.db #0x00	; 0
      00000A                       7652 __xinit__d_line:
      00000A 00                    7653 	.db #0x00	; 0
      00000B                       7654 __xinit__d_value:
      00000B 00                    7655 	.db #0x00	; 0
                                   7656 	.area _CABS (ABS)
