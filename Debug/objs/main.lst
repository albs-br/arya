                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _CheckIfPlayfieldIsValid
                                     27 	.globl _SoundFx_1
                                     28 	.globl _SoundFx_2
                                     29 	.globl _DrawPlayfield
                                     30 	.globl _DrawPiece
                                     31 	.globl _DrawLine
                                     32 	.globl _DrawBlock_SameTile
                                     33 	.globl _DrawBlock
                                     34 	.globl _InitVRAM
                                     35 	.globl _DrawBackground
                                     36 	.globl _DrawScore
                                     37 	.globl _DrawColumn
                                     38 	.globl _DrawNumber
                                     39 	.globl _DrawString
                                     40 	.globl _DrawChar
                                     41 	.globl _DrawExplosionSprite
                                     42 	.globl _HideExplosionSprite
                                     43 	.globl _HideHitSprite
                                     44 	.globl _DrawHitSprite
                                     45 	.globl _HideArrowSprite
                                     46 	.globl _DrawArrowSprite
                                     47 	.globl _GetRandomInInterval
                                     48 	.globl _GetRandom
                                     49 	.globl _InitRnd
                                     50 	.globl _Power
                                     51 	.globl _Wait
                                     52 	.globl _SNSMAT
                                     53 	.globl _GTTRIG
                                     54 	.globl _GTSTCK
                                     55 	.globl _BEEP
                                     56 	.globl _WRTPSG
                                     57 	.globl _GICINI
                                     58 	.globl _INIGRP
                                     59 	.globl _LDIRVM
                                     60 	.globl _FILVRM
                                     61 	.globl _WRTVRM
                                     62 	.globl _RDVRM
                                     63 	.globl _WRTVDP
                                     64 	.globl _ENASCR
                                     65 	.globl _DISSCR
                                     66 	.globl _d_value
                                     67 	.globl _d_line
                                     68 	.globl _d_col
                                     69 	.globl _rndSeed
                                     70 	.globl _newLevel
                                     71 	.globl _level
                                     72 	.globl _blocksRemoved
                                     73 	.globl _score
                                     74 	.globl _counter
                                     75 	.globl _line
                                     76 	.globl _col
                                     77 	.globl _gameOver
                                     78 	.globl _Rand_x
                                     79 	.globl _Rand_c
                                     80 	.globl _Rand_b
                                     81 	.globl _Rand_a
                                     82 	.globl _speed
                                     83 	.globl _bottomPiece
                                     84 	.globl _midPiece
                                     85 	.globl _topPiece
                                     86 	.globl _playfieldTemp
                                     87 	.globl _playfield
                                     88 	.globl _GETPNT
                                     89 	.globl _PUTPNT
                                     90 	.globl _REPCNT
                                     91 	.globl _SCNCNT
                                     92 	.globl _ATRBYT
                                     93 	.globl _CMASK
                                     94 	.globl _CLOC
                                     95 	.globl _BDRCLR
                                     96 	.globl _BAKCLR
                                     97 	.globl _FORCLR
                                     98 	.globl _TRGFLG
                                     99 	.globl _STATFL
                                    100 	.globl _MSX_vdp_regs
                                    101 	.globl _CNSDFG
                                    102 	.globl _CSRX
                                    103 	.globl _CSRY
                                    104 	.globl _MSX_modedata_screen3
                                    105 	.globl _MSX_modedata_screen2
                                    106 	.globl _MSX_modedata_screen1
                                    107 	.globl _MSX_modedata_screen0
                                    108 	.globl _CLIKSW
                                    109 	.globl _JIFFY
                                    110 	.globl _CLMLST
                                    111 	.globl _CRTCNT
                                    112 	.globl _LINLEN
                                    113 	.globl _LINL32
                                    114 	.globl _LINL40
                                    115 	.globl _MSX_charset
                                    116 	.globl _FONT
                                    117 	.globl _pieces
                                    118 	.globl _MSX_version
                                    119 	.globl _MSX_vdp_port_write
                                    120 	.globl _MSX_vdp_port_read
                                    121 ;--------------------------------------------------------
                                    122 ; special function registers
                                    123 ;--------------------------------------------------------
                                    124 ;--------------------------------------------------------
                                    125 ; ram data
                                    126 ;--------------------------------------------------------
                                    127 	.area _DATA
                           000004   128 _MSX_charset	=	0x0004
                           00F3AE   129 _LINL40	=	0xf3ae
                           00F3AF   130 _LINL32	=	0xf3af
                           00F3B0   131 _LINLEN	=	0xf3b0
                           00F3B1   132 _CRTCNT	=	0xf3b1
                           00F3B1   133 _CLMLST	=	0xf3b1
                           00FC9E   134 _JIFFY	=	0xfc9e
                           00F3DB   135 _CLIKSW	=	0xf3db
                           00F3B3   136 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   137 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   138 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   139 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   140 _CSRY	=	0xf3dc
                           00F3DD   141 _CSRX	=	0xf3dd
                           00F3DE   142 _CNSDFG	=	0xf3de
                           00F3DF   143 _MSX_vdp_regs	=	0xf3df
                           00F3E7   144 _STATFL	=	0xf3e7
                           00F3E8   145 _TRGFLG	=	0xf3e8
                           00F3E9   146 _FORCLR	=	0xf3e9
                           00F3EA   147 _BAKCLR	=	0xf3ea
                           00F3EB   148 _BDRCLR	=	0xf3eb
                           00F92A   149 _CLOC	=	0xf92a
                           00F92C   150 _CMASK	=	0xf92c
                           00F3F2   151 _ATRBYT	=	0xf3f2
                           00F3F6   152 _SCNCNT	=	0xf3f6
                           00F3F7   153 _REPCNT	=	0xf3f7
                           00F3F8   154 _PUTPNT	=	0xf3f8
                           00F3FA   155 _GETPNT	=	0xf3fa
      000000                        156 _playfield::
      000000                        157 	.ds 72
      000048                        158 _playfieldTemp::
      000048                        159 	.ds 72
      000090                        160 _topPiece::
      000090                        161 	.ds 1
      000091                        162 _midPiece::
      000091                        163 	.ds 1
      000092                        164 _bottomPiece::
      000092                        165 	.ds 1
      000093                        166 _speed::
      000093                        167 	.ds 1
      000094                        168 _Rand_a::
      000094                        169 	.ds 1
      000095                        170 _Rand_b::
      000095                        171 	.ds 1
      000096                        172 _Rand_c::
      000096                        173 	.ds 1
      000097                        174 _Rand_x::
      000097                        175 	.ds 1
                                    176 ;--------------------------------------------------------
                                    177 ; ram data
                                    178 ;--------------------------------------------------------
                                    179 	.area _INITIALIZED
      000000                        180 _gameOver::
      000000                        181 	.ds 1
      000001                        182 _col::
      000001                        183 	.ds 1
      000002                        184 _line::
      000002                        185 	.ds 1
      000003                        186 _counter::
      000003                        187 	.ds 1
      000004                        188 _score::
      000004                        189 	.ds 2
      000006                        190 _blocksRemoved::
      000006                        191 	.ds 2
      000008                        192 _level::
      000008                        193 	.ds 1
      000009                        194 _newLevel::
      000009                        195 	.ds 1
      00000A                        196 _rndSeed::
      00000A                        197 	.ds 1
      00000B                        198 _d_col::
      00000B                        199 	.ds 1
      00000C                        200 _d_line::
      00000C                        201 	.ds 1
      00000D                        202 _d_value::
      00000D                        203 	.ds 1
                                    204 ;--------------------------------------------------------
                                    205 ; absolute external ram data
                                    206 ;--------------------------------------------------------
                                    207 	.area _DABS (ABS)
                                    208 ;--------------------------------------------------------
                                    209 ; global & static initialisations
                                    210 ;--------------------------------------------------------
                                    211 	.area _HOME
                                    212 	.area _GSINIT
                                    213 	.area _GSFINAL
                                    214 	.area _GSINIT
                                    215 ;--------------------------------------------------------
                                    216 ; Home
                                    217 ;--------------------------------------------------------
                                    218 	.area _HOME
                                    219 	.area _HOME
                                    220 ;--------------------------------------------------------
                                    221 ; code
                                    222 ;--------------------------------------------------------
                                    223 	.area _CODE
                                    224 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    225 ;	---------------------------------
                                    226 ; Function Wait
                                    227 ; ---------------------------------
      000000                        228 _Wait::
                                    229 ;src\/Common.h:2: do {
      000000 D1               [10]  230 	pop	de
      000001 C1               [10]  231 	pop	bc
      000002 C5               [11]  232 	push	bc
      000003 D5               [11]  233 	push	de
      000004                        234 00104$:
                                    235 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  236 	ld	de, (_JIFFY)
                                    237 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        238 00101$:
      000008 2A 9E FC         [16]  239 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  240 	cp	a, a
      00000C ED 52            [15]  241 	sbc	hl, de
      00000E 28 F8            [12]  242 	jr	Z, 00101$
                                    243 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  244 	ld	e, c
      000011 50               [ 4]  245 	ld	d, b
      000012 0B               [ 6]  246 	dec	bc
      000013 7A               [ 4]  247 	ld	a, d
      000014 B3               [ 4]  248 	or	a, e
      000015 20 ED            [12]  249 	jr	NZ, 00104$
                                    250 ;src\/Common.h:8: }
      000017 C9               [10]  251 	ret
                           000006   252 _MSX_vdp_port_read	=	0x0006
                           000007   253 _MSX_vdp_port_write	=	0x0007
                           00002D   254 _MSX_version	=	0x002d
      000018                        255 _pieces:
      000018 04                     256 	.db #0x04	; 4
      000019 08                     257 	.db #0x08	; 8
      00001A 0C                     258 	.db #0x0c	; 12
      00001B 10                     259 	.db #0x10	; 16
      00001C 14                     260 	.db #0x14	; 20
                                    261 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    262 ;	---------------------------------
                                    263 ; Function Power
                                    264 ; ---------------------------------
      00001D                        265 _Power::
      00001D DD E5            [15]  266 	push	ix
      00001F DD 21 00 00      [14]  267 	ld	ix,#0
      000023 DD 39            [15]  268 	add	ix,sp
                                    269 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  270 	ld	c, 4 (ix)
      000028 06 00            [ 7]  271 	ld	b, #0x00
      00002A 69               [ 4]  272 	ld	l, c
      00002B 60               [ 4]  273 	ld	h, b
                                    274 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  275 	ld	a, 5 (ix)
      00002F B7               [ 4]  276 	or	a, a
      000030 20 05            [12]  277 	jr	NZ, 00111$
      000032 21 01 00         [10]  278 	ld	hl, #0x0001
      000035 18 16            [12]  279 	jr	00107$
                                    280 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        281 00111$:
      000037 1E 01            [ 7]  282 	ld	e, #0x01
      000039                        283 00105$:
      000039 7B               [ 4]  284 	ld	a, e
      00003A DD 96 05         [19]  285 	sub	a, 5 (ix)
      00003D 30 0E            [12]  286 	jr	NC, 00103$
                                    287 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  288 	push	bc
      000040 D5               [11]  289 	push	de
      000041 C5               [11]  290 	push	bc
      000042 E5               [11]  291 	push	hl
      000043 CDr00r00         [17]  292 	call	__mulint
      000046 F1               [10]  293 	pop	af
      000047 F1               [10]  294 	pop	af
      000048 D1               [10]  295 	pop	de
      000049 C1               [10]  296 	pop	bc
                                    297 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  298 	inc	e
      00004B 18 EC            [12]  299 	jr	00105$
      00004D                        300 00103$:
                                    301 ;src\/Math.h:10: return power;
      00004D                        302 00107$:
                                    303 ;src\/Math.h:11: }
      00004D DD E1            [14]  304 	pop	ix
      00004F C9               [10]  305 	ret
                                    306 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    307 ;	---------------------------------
                                    308 ; Function InitRnd
                                    309 ; ---------------------------------
      000050                        310 _InitRnd::
                                    311 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar94r00         [13]  312 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  313 	ld	hl, #2
      000056 39               [11]  314 	add	hl, sp
      000057 AE               [ 7]  315 	xor	a, (hl)
      000058 32r94r00         [13]  316 	ld	(_Rand_a+0), a
                                    317 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar95r00         [13]  318 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  319 	ld	hl, #3
      000061 39               [11]  320 	add	hl, sp
      000062 AE               [ 7]  321 	xor	a, (hl)
      000063 32r95r00         [13]  322 	ld	(_Rand_b+0), a
                                    323 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar96r00         [13]  324 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  325 	ld	hl, #4
      00006C 39               [11]  326 	add	hl, sp
      00006D AE               [ 7]  327 	xor	a, (hl)
      00006E 32r96r00         [13]  328 	ld	(_Rand_c+0), a
                                    329 ;src\/Random.h:34: Rand_x++;
      000071 21r97r00         [10]  330 	ld	hl, #_Rand_x
      000074 34               [11]  331 	inc	(hl)
                                    332 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar94r00         [13]  333 	ld	a,(#_Rand_a + 0)
      000078 21r96r00         [10]  334 	ld	hl, #_Rand_c
      00007B AE               [ 7]  335 	xor	a, (hl)
      00007C 21r97r00         [10]  336 	ld	hl, #_Rand_x
      00007F AE               [ 7]  337 	xor	a, (hl)
      000080 32r94r00         [13]  338 	ld	(_Rand_a+0), a
                                    339 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r95r00         [10]  340 	ld	hl, #_Rand_b
      000086 7E               [ 7]  341 	ld	a, (hl)
      000087 FD 21r94r00      [14]  342 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  343 	add	a, 0 (iy)
      00008E 77               [ 7]  344 	ld	(hl), a
                                    345 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar95r00         [13]  346 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  347 	srl	a
      000094 21r96r00         [10]  348 	ld	hl, #_Rand_c
      000097 86               [ 7]  349 	add	a, (hl)
      000098 FD 21r94r00      [14]  350 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  351 	xor	a, 0 (iy)
      00009F 32r96r00         [13]  352 	ld	(_Rand_c+0), a
                                    353 ;src\/Random.h:38: }
      0000A2 C9               [10]  354 	ret
                                    355 ;src\/Random.h:40: unsigned char GetRandom() {
                                    356 ;	---------------------------------
                                    357 ; Function GetRandom
                                    358 ; ---------------------------------
      0000A3                        359 _GetRandom::
                                    360 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r97r00         [10]  361 	ld	hl, #_Rand_x
      0000A6 34               [11]  362 	inc	(hl)
                                    363 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar94r00         [13]  364 	ld	a,(#_Rand_a + 0)
      0000AA 21r96r00         [10]  365 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  366 	xor	a, (hl)
      0000AE 21r97r00         [10]  367 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  368 	xor	a, (hl)
      0000B2 32r94r00         [13]  369 	ld	(_Rand_a+0), a
                                    370 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r95r00         [10]  371 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  372 	ld	a, (hl)
      0000B9 FD 21r94r00      [14]  373 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  374 	add	a, 0 (iy)
      0000C0 77               [ 7]  375 	ld	(hl), a
                                    376 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar95r00         [13]  377 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  378 	srl	a
      0000C6 21r96r00         [10]  379 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  380 	add	a, (hl)
      0000CA FD 21r94r00      [14]  381 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  382 	xor	a, 0 (iy)
      0000D1 32r96r00         [13]  383 	ld	(_Rand_c+0), a
                                    384 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar96r00         [13]  385 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  386 	ld	l, a
                                    387 ;src\/Random.h:47: }
      0000D8 C9               [10]  388 	ret
                                    389 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    390 ;	---------------------------------
                                    391 ; Function GetRandomInInterval
                                    392 ; ---------------------------------
      0000D9                        393 _GetRandomInInterval::
                                    394 ;src\/Random.h:53: do {
      0000D9                        395 00101$:
                                    396 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  397 	call	_GetRandom
      0000DC 7D               [ 4]  398 	ld	a, l
      0000DD 21 03 00         [10]  399 	ld	hl, #3
      0000E0 39               [11]  400 	add	hl, sp
      0000E1 A6               [ 7]  401 	and	a, (hl)
      0000E2 4F               [ 4]  402 	ld	c, a
                                    403 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  404 	ld	hl, #2
      0000E6 39               [11]  405 	add	hl, sp
      0000E7 7E               [ 7]  406 	ld	a, (hl)
      0000E8 91               [ 4]  407 	sub	a, c
      0000E9 38 EE            [12]  408 	jr	C, 00101$
                                    409 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  410 	ld	l, c
                                    411 ;src\/Random.h:59: }
      0000EC C9               [10]  412 	ret
                                    413 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    414 ;	---------------------------------
                                    415 ; Function DrawArrowSprite
                                    416 ; ---------------------------------
      0000ED                        417 _DrawArrowSprite::
      0000ED DD E5            [15]  418 	push	ix
      0000EF DD 21 00 00      [14]  419 	ld	ix,#0
      0000F3 DD 39            [15]  420 	add	ix,sp
      0000F5 21 F8 FF         [10]  421 	ld	hl, #-8
      0000F8 39               [11]  422 	add	hl, sp
      0000F9 F9               [ 6]  423 	ld	sp, hl
                                    424 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  425 	ld	hl, #0
      0000FD 39               [11]  426 	add	hl, sp
      0000FE EB               [ 4]  427 	ex	de, hl
      0000FF 3E 0F            [ 7]  428 	ld	a, #0x0f
      000101 12               [ 7]  429 	ld	(de), a
      000102 6B               [ 4]  430 	ld	l, e
      000103 62               [ 4]  431 	ld	h, d
      000104 23               [ 6]  432 	inc	hl
      000105 36 0E            [10]  433 	ld	(hl), #0x0e
      000107 6B               [ 4]  434 	ld	l, e
      000108 62               [ 4]  435 	ld	h, d
      000109 23               [ 6]  436 	inc	hl
      00010A 23               [ 6]  437 	inc	hl
      00010B 36 05            [10]  438 	ld	(hl), #0x05
      00010D 6B               [ 4]  439 	ld	l, e
      00010E 62               [ 4]  440 	ld	h, d
      00010F 23               [ 6]  441 	inc	hl
      000110 23               [ 6]  442 	inc	hl
      000111 23               [ 6]  443 	inc	hl
      000112 36 04            [10]  444 	ld	(hl), #0x04
      000114 21 04 00         [10]  445 	ld	hl, #0x0004
      000117 19               [11]  446 	add	hl, de
      000118 36 04            [10]  447 	ld	(hl), #0x04
      00011A 21 05 00         [10]  448 	ld	hl, #0x0005
      00011D 19               [11]  449 	add	hl, de
      00011E 36 05            [10]  450 	ld	(hl), #0x05
      000120 21 06 00         [10]  451 	ld	hl, #0x0006
      000123 19               [11]  452 	add	hl, de
      000124 36 0E            [10]  453 	ld	(hl), #0x0e
      000126 21 07 00         [10]  454 	ld	hl, #0x0007
      000129 19               [11]  455 	add	hl, de
      00012A 36 0F            [10]  456 	ld	(hl), #0x0f
                                    457 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  458 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  459 	ld	a, l
      000130 E6 0E            [ 7]  460 	and	a, #0x0e
      000132 6F               [ 4]  461 	ld	l, a
      000133 26 00            [ 7]  462 	ld	h, #0x00
      000135 CB 3C            [ 8]  463 	srl	h
      000137 CB 1D            [ 8]  464 	rr	l
                                    465 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  466 	ld	a, 5 (ix)
      00013C 3D               [ 4]  467 	dec	a
      00013D E5               [11]  468 	push	hl
      00013E D5               [11]  469 	push	de
      00013F F5               [11]  470 	push	af
      000140 33               [ 6]  471 	inc	sp
      000141 01 00 1B         [10]  472 	ld	bc, #0x1b00
      000144 C5               [11]  473 	push	bc
      000145 CDr00r00         [17]  474 	call	_WRTVRM
      000148 F1               [10]  475 	pop	af
      000149 33               [ 6]  476 	inc	sp
      00014A DD 7E 04         [19]  477 	ld	a, 4 (ix)
      00014D F5               [11]  478 	push	af
      00014E 33               [ 6]  479 	inc	sp
      00014F 01 01 1B         [10]  480 	ld	bc, #0x1b01
      000152 C5               [11]  481 	push	bc
      000153 CDr00r00         [17]  482 	call	_WRTVRM
      000156 F1               [10]  483 	pop	af
      000157 33               [ 6]  484 	inc	sp
      000158 AF               [ 4]  485 	xor	a, a
      000159 F5               [11]  486 	push	af
      00015A 33               [ 6]  487 	inc	sp
      00015B 01 02 1B         [10]  488 	ld	bc, #0x1b02
      00015E C5               [11]  489 	push	bc
      00015F CDr00r00         [17]  490 	call	_WRTVRM
      000162 F1               [10]  491 	pop	af
      000163 33               [ 6]  492 	inc	sp
      000164 D1               [10]  493 	pop	de
      000165 E1               [10]  494 	pop	hl
                                    495 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  496 	ld	h, #0x00
      000168 19               [11]  497 	add	hl, de
      000169 7E               [ 7]  498 	ld	a, (hl)
      00016A F5               [11]  499 	push	af
      00016B 33               [ 6]  500 	inc	sp
      00016C 21 03 1B         [10]  501 	ld	hl, #0x1b03
      00016F E5               [11]  502 	push	hl
      000170 CDr00r00         [17]  503 	call	_WRTVRM
                                    504 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  505 	ld	sp,ix
      000175 DD E1            [14]  506 	pop	ix
      000177 C9               [10]  507 	ret
      000178                        508 _FONT:
      000178 00                     509 	.db #0x00	; 0
      000179 00                     510 	.db #0x00	; 0
      00017A 00                     511 	.db #0x00	; 0
      00017B 00                     512 	.db #0x00	; 0
      00017C 00                     513 	.db #0x00	; 0
      00017D 00                     514 	.db #0x00	; 0
      00017E 00                     515 	.db #0x00	; 0
      00017F 00                     516 	.db #0x00	; 0
      000180 30                     517 	.db #0x30	; 48	'0'
      000181 78                     518 	.db #0x78	; 120	'x'
      000182 78                     519 	.db #0x78	; 120	'x'
      000183 30                     520 	.db #0x30	; 48	'0'
      000184 30                     521 	.db #0x30	; 48	'0'
      000185 00                     522 	.db #0x00	; 0
      000186 30                     523 	.db #0x30	; 48	'0'
      000187 00                     524 	.db #0x00	; 0
      000188 6C                     525 	.db #0x6c	; 108	'l'
      000189 6C                     526 	.db #0x6c	; 108	'l'
      00018A 6C                     527 	.db #0x6c	; 108	'l'
      00018B 00                     528 	.db #0x00	; 0
      00018C 00                     529 	.db #0x00	; 0
      00018D 00                     530 	.db #0x00	; 0
      00018E 00                     531 	.db #0x00	; 0
      00018F 00                     532 	.db #0x00	; 0
      000190 6C                     533 	.db #0x6c	; 108	'l'
      000191 6C                     534 	.db #0x6c	; 108	'l'
      000192 FE                     535 	.db #0xfe	; 254
      000193 6C                     536 	.db #0x6c	; 108	'l'
      000194 FE                     537 	.db #0xfe	; 254
      000195 6C                     538 	.db #0x6c	; 108	'l'
      000196 6C                     539 	.db #0x6c	; 108	'l'
      000197 00                     540 	.db #0x00	; 0
      000198 30                     541 	.db #0x30	; 48	'0'
      000199 7C                     542 	.db #0x7c	; 124
      00019A C0                     543 	.db #0xc0	; 192
      00019B 78                     544 	.db #0x78	; 120	'x'
      00019C 0C                     545 	.db #0x0c	; 12
      00019D F8                     546 	.db #0xf8	; 248
      00019E 30                     547 	.db #0x30	; 48	'0'
      00019F 00                     548 	.db #0x00	; 0
      0001A0 00                     549 	.db #0x00	; 0
      0001A1 C6                     550 	.db #0xc6	; 198
      0001A2 CC                     551 	.db #0xcc	; 204
      0001A3 18                     552 	.db #0x18	; 24
      0001A4 30                     553 	.db #0x30	; 48	'0'
      0001A5 66                     554 	.db #0x66	; 102	'f'
      0001A6 C6                     555 	.db #0xc6	; 198
      0001A7 00                     556 	.db #0x00	; 0
      0001A8 38                     557 	.db #0x38	; 56	'8'
      0001A9 6C                     558 	.db #0x6c	; 108	'l'
      0001AA 38                     559 	.db #0x38	; 56	'8'
      0001AB 76                     560 	.db #0x76	; 118	'v'
      0001AC DC                     561 	.db #0xdc	; 220
      0001AD CC                     562 	.db #0xcc	; 204
      0001AE 76                     563 	.db #0x76	; 118	'v'
      0001AF 00                     564 	.db #0x00	; 0
      0001B0 60                     565 	.db #0x60	; 96
      0001B1 60                     566 	.db #0x60	; 96
      0001B2 C0                     567 	.db #0xc0	; 192
      0001B3 00                     568 	.db #0x00	; 0
      0001B4 00                     569 	.db #0x00	; 0
      0001B5 00                     570 	.db #0x00	; 0
      0001B6 00                     571 	.db #0x00	; 0
      0001B7 00                     572 	.db #0x00	; 0
      0001B8 18                     573 	.db #0x18	; 24
      0001B9 30                     574 	.db #0x30	; 48	'0'
      0001BA 60                     575 	.db #0x60	; 96
      0001BB 60                     576 	.db #0x60	; 96
      0001BC 60                     577 	.db #0x60	; 96
      0001BD 30                     578 	.db #0x30	; 48	'0'
      0001BE 18                     579 	.db #0x18	; 24
      0001BF 00                     580 	.db #0x00	; 0
      0001C0 60                     581 	.db #0x60	; 96
      0001C1 30                     582 	.db #0x30	; 48	'0'
      0001C2 18                     583 	.db #0x18	; 24
      0001C3 18                     584 	.db #0x18	; 24
      0001C4 18                     585 	.db #0x18	; 24
      0001C5 30                     586 	.db #0x30	; 48	'0'
      0001C6 60                     587 	.db #0x60	; 96
      0001C7 00                     588 	.db #0x00	; 0
      0001C8 00                     589 	.db #0x00	; 0
      0001C9 66                     590 	.db #0x66	; 102	'f'
      0001CA 3C                     591 	.db #0x3c	; 60
      0001CB FF                     592 	.db #0xff	; 255
      0001CC 3C                     593 	.db #0x3c	; 60
      0001CD 66                     594 	.db #0x66	; 102	'f'
      0001CE 00                     595 	.db #0x00	; 0
      0001CF 00                     596 	.db #0x00	; 0
      0001D0 00                     597 	.db #0x00	; 0
      0001D1 30                     598 	.db #0x30	; 48	'0'
      0001D2 30                     599 	.db #0x30	; 48	'0'
      0001D3 FC                     600 	.db #0xfc	; 252
      0001D4 30                     601 	.db #0x30	; 48	'0'
      0001D5 30                     602 	.db #0x30	; 48	'0'
      0001D6 00                     603 	.db #0x00	; 0
      0001D7 00                     604 	.db #0x00	; 0
      0001D8 00                     605 	.db #0x00	; 0
      0001D9 00                     606 	.db #0x00	; 0
      0001DA 00                     607 	.db #0x00	; 0
      0001DB 00                     608 	.db #0x00	; 0
      0001DC 00                     609 	.db #0x00	; 0
      0001DD 30                     610 	.db #0x30	; 48	'0'
      0001DE 30                     611 	.db #0x30	; 48	'0'
      0001DF 60                     612 	.db #0x60	; 96
      0001E0 00                     613 	.db #0x00	; 0
      0001E1 00                     614 	.db #0x00	; 0
      0001E2 00                     615 	.db #0x00	; 0
      0001E3 FC                     616 	.db #0xfc	; 252
      0001E4 00                     617 	.db #0x00	; 0
      0001E5 00                     618 	.db #0x00	; 0
      0001E6 00                     619 	.db #0x00	; 0
      0001E7 00                     620 	.db #0x00	; 0
      0001E8 00                     621 	.db #0x00	; 0
      0001E9 00                     622 	.db #0x00	; 0
      0001EA 00                     623 	.db #0x00	; 0
      0001EB 00                     624 	.db #0x00	; 0
      0001EC 00                     625 	.db #0x00	; 0
      0001ED 30                     626 	.db #0x30	; 48	'0'
      0001EE 30                     627 	.db #0x30	; 48	'0'
      0001EF 00                     628 	.db #0x00	; 0
      0001F0 06                     629 	.db #0x06	; 6
      0001F1 0C                     630 	.db #0x0c	; 12
      0001F2 18                     631 	.db #0x18	; 24
      0001F3 30                     632 	.db #0x30	; 48	'0'
      0001F4 60                     633 	.db #0x60	; 96
      0001F5 C0                     634 	.db #0xc0	; 192
      0001F6 80                     635 	.db #0x80	; 128
      0001F7 00                     636 	.db #0x00	; 0
      0001F8 7C                     637 	.db #0x7c	; 124
      0001F9 C6                     638 	.db #0xc6	; 198
      0001FA CE                     639 	.db #0xce	; 206
      0001FB DE                     640 	.db #0xde	; 222
      0001FC F6                     641 	.db #0xf6	; 246
      0001FD E6                     642 	.db #0xe6	; 230
      0001FE 7C                     643 	.db #0x7c	; 124
      0001FF 00                     644 	.db #0x00	; 0
      000200 30                     645 	.db #0x30	; 48	'0'
      000201 70                     646 	.db #0x70	; 112	'p'
      000202 30                     647 	.db #0x30	; 48	'0'
      000203 30                     648 	.db #0x30	; 48	'0'
      000204 30                     649 	.db #0x30	; 48	'0'
      000205 30                     650 	.db #0x30	; 48	'0'
      000206 FC                     651 	.db #0xfc	; 252
      000207 00                     652 	.db #0x00	; 0
      000208 78                     653 	.db #0x78	; 120	'x'
      000209 CC                     654 	.db #0xcc	; 204
      00020A 0C                     655 	.db #0x0c	; 12
      00020B 38                     656 	.db #0x38	; 56	'8'
      00020C 60                     657 	.db #0x60	; 96
      00020D C4                     658 	.db #0xc4	; 196
      00020E FC                     659 	.db #0xfc	; 252
      00020F 00                     660 	.db #0x00	; 0
      000210 78                     661 	.db #0x78	; 120	'x'
      000211 CC                     662 	.db #0xcc	; 204
      000212 0C                     663 	.db #0x0c	; 12
      000213 38                     664 	.db #0x38	; 56	'8'
      000214 0C                     665 	.db #0x0c	; 12
      000215 CC                     666 	.db #0xcc	; 204
      000216 78                     667 	.db #0x78	; 120	'x'
      000217 00                     668 	.db #0x00	; 0
      000218 1C                     669 	.db #0x1c	; 28
      000219 3C                     670 	.db #0x3c	; 60
      00021A 6C                     671 	.db #0x6c	; 108	'l'
      00021B CC                     672 	.db #0xcc	; 204
      00021C FE                     673 	.db #0xfe	; 254
      00021D 0C                     674 	.db #0x0c	; 12
      00021E 1E                     675 	.db #0x1e	; 30
      00021F 00                     676 	.db #0x00	; 0
      000220 FC                     677 	.db #0xfc	; 252
      000221 C0                     678 	.db #0xc0	; 192
      000222 F8                     679 	.db #0xf8	; 248
      000223 0C                     680 	.db #0x0c	; 12
      000224 0C                     681 	.db #0x0c	; 12
      000225 CC                     682 	.db #0xcc	; 204
      000226 78                     683 	.db #0x78	; 120	'x'
      000227 00                     684 	.db #0x00	; 0
      000228 38                     685 	.db #0x38	; 56	'8'
      000229 60                     686 	.db #0x60	; 96
      00022A C0                     687 	.db #0xc0	; 192
      00022B F8                     688 	.db #0xf8	; 248
      00022C CC                     689 	.db #0xcc	; 204
      00022D CC                     690 	.db #0xcc	; 204
      00022E 78                     691 	.db #0x78	; 120	'x'
      00022F 00                     692 	.db #0x00	; 0
      000230 FC                     693 	.db #0xfc	; 252
      000231 CC                     694 	.db #0xcc	; 204
      000232 0C                     695 	.db #0x0c	; 12
      000233 18                     696 	.db #0x18	; 24
      000234 30                     697 	.db #0x30	; 48	'0'
      000235 30                     698 	.db #0x30	; 48	'0'
      000236 30                     699 	.db #0x30	; 48	'0'
      000237 00                     700 	.db #0x00	; 0
      000238 78                     701 	.db #0x78	; 120	'x'
      000239 CC                     702 	.db #0xcc	; 204
      00023A CC                     703 	.db #0xcc	; 204
      00023B 78                     704 	.db #0x78	; 120	'x'
      00023C CC                     705 	.db #0xcc	; 204
      00023D CC                     706 	.db #0xcc	; 204
      00023E 78                     707 	.db #0x78	; 120	'x'
      00023F 00                     708 	.db #0x00	; 0
      000240 78                     709 	.db #0x78	; 120	'x'
      000241 CC                     710 	.db #0xcc	; 204
      000242 CC                     711 	.db #0xcc	; 204
      000243 7C                     712 	.db #0x7c	; 124
      000244 0C                     713 	.db #0x0c	; 12
      000245 18                     714 	.db #0x18	; 24
      000246 70                     715 	.db #0x70	; 112	'p'
      000247 00                     716 	.db #0x00	; 0
      000248 00                     717 	.db #0x00	; 0
      000249 30                     718 	.db #0x30	; 48	'0'
      00024A 30                     719 	.db #0x30	; 48	'0'
      00024B 00                     720 	.db #0x00	; 0
      00024C 00                     721 	.db #0x00	; 0
      00024D 30                     722 	.db #0x30	; 48	'0'
      00024E 30                     723 	.db #0x30	; 48	'0'
      00024F 00                     724 	.db #0x00	; 0
      000250 00                     725 	.db #0x00	; 0
      000251 30                     726 	.db #0x30	; 48	'0'
      000252 30                     727 	.db #0x30	; 48	'0'
      000253 00                     728 	.db #0x00	; 0
      000254 30                     729 	.db #0x30	; 48	'0'
      000255 30                     730 	.db #0x30	; 48	'0'
      000256 60                     731 	.db #0x60	; 96
      000257 00                     732 	.db #0x00	; 0
      000258 18                     733 	.db #0x18	; 24
      000259 30                     734 	.db #0x30	; 48	'0'
      00025A 60                     735 	.db #0x60	; 96
      00025B C0                     736 	.db #0xc0	; 192
      00025C 60                     737 	.db #0x60	; 96
      00025D 30                     738 	.db #0x30	; 48	'0'
      00025E 18                     739 	.db #0x18	; 24
      00025F 00                     740 	.db #0x00	; 0
      000260 00                     741 	.db #0x00	; 0
      000261 00                     742 	.db #0x00	; 0
      000262 FC                     743 	.db #0xfc	; 252
      000263 00                     744 	.db #0x00	; 0
      000264 00                     745 	.db #0x00	; 0
      000265 FC                     746 	.db #0xfc	; 252
      000266 00                     747 	.db #0x00	; 0
      000267 00                     748 	.db #0x00	; 0
      000268 60                     749 	.db #0x60	; 96
      000269 30                     750 	.db #0x30	; 48	'0'
      00026A 18                     751 	.db #0x18	; 24
      00026B 0C                     752 	.db #0x0c	; 12
      00026C 18                     753 	.db #0x18	; 24
      00026D 30                     754 	.db #0x30	; 48	'0'
      00026E 60                     755 	.db #0x60	; 96
      00026F 00                     756 	.db #0x00	; 0
      000270 78                     757 	.db #0x78	; 120	'x'
      000271 CC                     758 	.db #0xcc	; 204
      000272 0C                     759 	.db #0x0c	; 12
      000273 18                     760 	.db #0x18	; 24
      000274 30                     761 	.db #0x30	; 48	'0'
      000275 00                     762 	.db #0x00	; 0
      000276 30                     763 	.db #0x30	; 48	'0'
      000277 00                     764 	.db #0x00	; 0
      000278 7C                     765 	.db #0x7c	; 124
      000279 C6                     766 	.db #0xc6	; 198
      00027A DE                     767 	.db #0xde	; 222
      00027B DE                     768 	.db #0xde	; 222
      00027C DE                     769 	.db #0xde	; 222
      00027D C0                     770 	.db #0xc0	; 192
      00027E 78                     771 	.db #0x78	; 120	'x'
      00027F 00                     772 	.db #0x00	; 0
      000280 30                     773 	.db #0x30	; 48	'0'
      000281 78                     774 	.db #0x78	; 120	'x'
      000282 CC                     775 	.db #0xcc	; 204
      000283 CC                     776 	.db #0xcc	; 204
      000284 FC                     777 	.db #0xfc	; 252
      000285 CC                     778 	.db #0xcc	; 204
      000286 CC                     779 	.db #0xcc	; 204
      000287 00                     780 	.db #0x00	; 0
      000288 FC                     781 	.db #0xfc	; 252
      000289 66                     782 	.db #0x66	; 102	'f'
      00028A 66                     783 	.db #0x66	; 102	'f'
      00028B 7C                     784 	.db #0x7c	; 124
      00028C 66                     785 	.db #0x66	; 102	'f'
      00028D 66                     786 	.db #0x66	; 102	'f'
      00028E FC                     787 	.db #0xfc	; 252
      00028F 00                     788 	.db #0x00	; 0
      000290 3C                     789 	.db #0x3c	; 60
      000291 66                     790 	.db #0x66	; 102	'f'
      000292 C0                     791 	.db #0xc0	; 192
      000293 C0                     792 	.db #0xc0	; 192
      000294 C0                     793 	.db #0xc0	; 192
      000295 66                     794 	.db #0x66	; 102	'f'
      000296 3C                     795 	.db #0x3c	; 60
      000297 00                     796 	.db #0x00	; 0
      000298 F8                     797 	.db #0xf8	; 248
      000299 6C                     798 	.db #0x6c	; 108	'l'
      00029A 66                     799 	.db #0x66	; 102	'f'
      00029B 66                     800 	.db #0x66	; 102	'f'
      00029C 66                     801 	.db #0x66	; 102	'f'
      00029D 6C                     802 	.db #0x6c	; 108	'l'
      00029E F8                     803 	.db #0xf8	; 248
      00029F 00                     804 	.db #0x00	; 0
      0002A0 FE                     805 	.db #0xfe	; 254
      0002A1 62                     806 	.db #0x62	; 98	'b'
      0002A2 68                     807 	.db #0x68	; 104	'h'
      0002A3 78                     808 	.db #0x78	; 120	'x'
      0002A4 68                     809 	.db #0x68	; 104	'h'
      0002A5 62                     810 	.db #0x62	; 98	'b'
      0002A6 FE                     811 	.db #0xfe	; 254
      0002A7 00                     812 	.db #0x00	; 0
      0002A8 FE                     813 	.db #0xfe	; 254
      0002A9 62                     814 	.db #0x62	; 98	'b'
      0002AA 68                     815 	.db #0x68	; 104	'h'
      0002AB 78                     816 	.db #0x78	; 120	'x'
      0002AC 68                     817 	.db #0x68	; 104	'h'
      0002AD 60                     818 	.db #0x60	; 96
      0002AE F0                     819 	.db #0xf0	; 240
      0002AF 00                     820 	.db #0x00	; 0
      0002B0 3C                     821 	.db #0x3c	; 60
      0002B1 66                     822 	.db #0x66	; 102	'f'
      0002B2 C0                     823 	.db #0xc0	; 192
      0002B3 C0                     824 	.db #0xc0	; 192
      0002B4 CE                     825 	.db #0xce	; 206
      0002B5 66                     826 	.db #0x66	; 102	'f'
      0002B6 3E                     827 	.db #0x3e	; 62
      0002B7 00                     828 	.db #0x00	; 0
      0002B8 CC                     829 	.db #0xcc	; 204
      0002B9 CC                     830 	.db #0xcc	; 204
      0002BA CC                     831 	.db #0xcc	; 204
      0002BB FC                     832 	.db #0xfc	; 252
      0002BC CC                     833 	.db #0xcc	; 204
      0002BD CC                     834 	.db #0xcc	; 204
      0002BE CC                     835 	.db #0xcc	; 204
      0002BF 00                     836 	.db #0x00	; 0
      0002C0 78                     837 	.db #0x78	; 120	'x'
      0002C1 30                     838 	.db #0x30	; 48	'0'
      0002C2 30                     839 	.db #0x30	; 48	'0'
      0002C3 30                     840 	.db #0x30	; 48	'0'
      0002C4 30                     841 	.db #0x30	; 48	'0'
      0002C5 30                     842 	.db #0x30	; 48	'0'
      0002C6 78                     843 	.db #0x78	; 120	'x'
      0002C7 00                     844 	.db #0x00	; 0
      0002C8 1E                     845 	.db #0x1e	; 30
      0002C9 0C                     846 	.db #0x0c	; 12
      0002CA 0C                     847 	.db #0x0c	; 12
      0002CB 0C                     848 	.db #0x0c	; 12
      0002CC CC                     849 	.db #0xcc	; 204
      0002CD CC                     850 	.db #0xcc	; 204
      0002CE 78                     851 	.db #0x78	; 120	'x'
      0002CF 00                     852 	.db #0x00	; 0
      0002D0 E6                     853 	.db #0xe6	; 230
      0002D1 66                     854 	.db #0x66	; 102	'f'
      0002D2 6C                     855 	.db #0x6c	; 108	'l'
      0002D3 78                     856 	.db #0x78	; 120	'x'
      0002D4 6C                     857 	.db #0x6c	; 108	'l'
      0002D5 66                     858 	.db #0x66	; 102	'f'
      0002D6 E6                     859 	.db #0xe6	; 230
      0002D7 00                     860 	.db #0x00	; 0
      0002D8 F0                     861 	.db #0xf0	; 240
      0002D9 60                     862 	.db #0x60	; 96
      0002DA 60                     863 	.db #0x60	; 96
      0002DB 60                     864 	.db #0x60	; 96
      0002DC 62                     865 	.db #0x62	; 98	'b'
      0002DD 66                     866 	.db #0x66	; 102	'f'
      0002DE FE                     867 	.db #0xfe	; 254
      0002DF 00                     868 	.db #0x00	; 0
      0002E0 C6                     869 	.db #0xc6	; 198
      0002E1 EE                     870 	.db #0xee	; 238
      0002E2 FE                     871 	.db #0xfe	; 254
      0002E3 FE                     872 	.db #0xfe	; 254
      0002E4 D6                     873 	.db #0xd6	; 214
      0002E5 C6                     874 	.db #0xc6	; 198
      0002E6 C6                     875 	.db #0xc6	; 198
      0002E7 00                     876 	.db #0x00	; 0
      0002E8 C6                     877 	.db #0xc6	; 198
      0002E9 E6                     878 	.db #0xe6	; 230
      0002EA F6                     879 	.db #0xf6	; 246
      0002EB DE                     880 	.db #0xde	; 222
      0002EC CE                     881 	.db #0xce	; 206
      0002ED C6                     882 	.db #0xc6	; 198
      0002EE C6                     883 	.db #0xc6	; 198
      0002EF 00                     884 	.db #0x00	; 0
      0002F0 38                     885 	.db #0x38	; 56	'8'
      0002F1 6C                     886 	.db #0x6c	; 108	'l'
      0002F2 C6                     887 	.db #0xc6	; 198
      0002F3 C6                     888 	.db #0xc6	; 198
      0002F4 C6                     889 	.db #0xc6	; 198
      0002F5 6C                     890 	.db #0x6c	; 108	'l'
      0002F6 38                     891 	.db #0x38	; 56	'8'
      0002F7 00                     892 	.db #0x00	; 0
      0002F8 FC                     893 	.db #0xfc	; 252
      0002F9 66                     894 	.db #0x66	; 102	'f'
      0002FA 66                     895 	.db #0x66	; 102	'f'
      0002FB 7C                     896 	.db #0x7c	; 124
      0002FC 60                     897 	.db #0x60	; 96
      0002FD 60                     898 	.db #0x60	; 96
      0002FE F0                     899 	.db #0xf0	; 240
      0002FF 00                     900 	.db #0x00	; 0
      000300 78                     901 	.db #0x78	; 120	'x'
      000301 CC                     902 	.db #0xcc	; 204
      000302 CC                     903 	.db #0xcc	; 204
      000303 CC                     904 	.db #0xcc	; 204
      000304 DC                     905 	.db #0xdc	; 220
      000305 78                     906 	.db #0x78	; 120	'x'
      000306 1C                     907 	.db #0x1c	; 28
      000307 00                     908 	.db #0x00	; 0
      000308 FC                     909 	.db #0xfc	; 252
      000309 66                     910 	.db #0x66	; 102	'f'
      00030A 66                     911 	.db #0x66	; 102	'f'
      00030B 7C                     912 	.db #0x7c	; 124
      00030C 6C                     913 	.db #0x6c	; 108	'l'
      00030D 66                     914 	.db #0x66	; 102	'f'
      00030E E6                     915 	.db #0xe6	; 230
      00030F 00                     916 	.db #0x00	; 0
      000310 78                     917 	.db #0x78	; 120	'x'
      000311 CC                     918 	.db #0xcc	; 204
      000312 E0                     919 	.db #0xe0	; 224
      000313 70                     920 	.db #0x70	; 112	'p'
      000314 1C                     921 	.db #0x1c	; 28
      000315 CC                     922 	.db #0xcc	; 204
      000316 78                     923 	.db #0x78	; 120	'x'
      000317 00                     924 	.db #0x00	; 0
      000318 FC                     925 	.db #0xfc	; 252
      000319 B4                     926 	.db #0xb4	; 180
      00031A 30                     927 	.db #0x30	; 48	'0'
      00031B 30                     928 	.db #0x30	; 48	'0'
      00031C 30                     929 	.db #0x30	; 48	'0'
      00031D 30                     930 	.db #0x30	; 48	'0'
      00031E 78                     931 	.db #0x78	; 120	'x'
      00031F 00                     932 	.db #0x00	; 0
      000320 CC                     933 	.db #0xcc	; 204
      000321 CC                     934 	.db #0xcc	; 204
      000322 CC                     935 	.db #0xcc	; 204
      000323 CC                     936 	.db #0xcc	; 204
      000324 CC                     937 	.db #0xcc	; 204
      000325 CC                     938 	.db #0xcc	; 204
      000326 FC                     939 	.db #0xfc	; 252
      000327 00                     940 	.db #0x00	; 0
      000328 CC                     941 	.db #0xcc	; 204
      000329 CC                     942 	.db #0xcc	; 204
      00032A CC                     943 	.db #0xcc	; 204
      00032B CC                     944 	.db #0xcc	; 204
      00032C CC                     945 	.db #0xcc	; 204
      00032D 78                     946 	.db #0x78	; 120	'x'
      00032E 30                     947 	.db #0x30	; 48	'0'
      00032F 00                     948 	.db #0x00	; 0
      000330 C6                     949 	.db #0xc6	; 198
      000331 C6                     950 	.db #0xc6	; 198
      000332 C6                     951 	.db #0xc6	; 198
      000333 D6                     952 	.db #0xd6	; 214
      000334 FE                     953 	.db #0xfe	; 254
      000335 EE                     954 	.db #0xee	; 238
      000336 C6                     955 	.db #0xc6	; 198
      000337 00                     956 	.db #0x00	; 0
      000338 C6                     957 	.db #0xc6	; 198
      000339 C6                     958 	.db #0xc6	; 198
      00033A 6C                     959 	.db #0x6c	; 108	'l'
      00033B 38                     960 	.db #0x38	; 56	'8'
      00033C 38                     961 	.db #0x38	; 56	'8'
      00033D 6C                     962 	.db #0x6c	; 108	'l'
      00033E C6                     963 	.db #0xc6	; 198
      00033F 00                     964 	.db #0x00	; 0
      000340 CC                     965 	.db #0xcc	; 204
      000341 CC                     966 	.db #0xcc	; 204
      000342 CC                     967 	.db #0xcc	; 204
      000343 78                     968 	.db #0x78	; 120	'x'
      000344 30                     969 	.db #0x30	; 48	'0'
      000345 30                     970 	.db #0x30	; 48	'0'
      000346 78                     971 	.db #0x78	; 120	'x'
      000347 00                     972 	.db #0x00	; 0
      000348 FE                     973 	.db #0xfe	; 254
      000349 C6                     974 	.db #0xc6	; 198
      00034A 8C                     975 	.db #0x8c	; 140
      00034B 18                     976 	.db #0x18	; 24
      00034C 32                     977 	.db #0x32	; 50	'2'
      00034D 66                     978 	.db #0x66	; 102	'f'
      00034E FE                     979 	.db #0xfe	; 254
      00034F 00                     980 	.db #0x00	; 0
      000350 78                     981 	.db #0x78	; 120	'x'
      000351 60                     982 	.db #0x60	; 96
      000352 60                     983 	.db #0x60	; 96
      000353 60                     984 	.db #0x60	; 96
      000354 60                     985 	.db #0x60	; 96
      000355 60                     986 	.db #0x60	; 96
      000356 78                     987 	.db #0x78	; 120	'x'
      000357 00                     988 	.db #0x00	; 0
      000358 C0                     989 	.db #0xc0	; 192
      000359 60                     990 	.db #0x60	; 96
      00035A 30                     991 	.db #0x30	; 48	'0'
      00035B 18                     992 	.db #0x18	; 24
      00035C 0C                     993 	.db #0x0c	; 12
      00035D 06                     994 	.db #0x06	; 6
      00035E 02                     995 	.db #0x02	; 2
      00035F 00                     996 	.db #0x00	; 0
      000360 78                     997 	.db #0x78	; 120	'x'
      000361 18                     998 	.db #0x18	; 24
      000362 18                     999 	.db #0x18	; 24
      000363 18                    1000 	.db #0x18	; 24
      000364 18                    1001 	.db #0x18	; 24
      000365 18                    1002 	.db #0x18	; 24
      000366 78                    1003 	.db #0x78	; 120	'x'
      000367 00                    1004 	.db #0x00	; 0
      000368 10                    1005 	.db #0x10	; 16
      000369 38                    1006 	.db #0x38	; 56	'8'
      00036A 6C                    1007 	.db #0x6c	; 108	'l'
      00036B C6                    1008 	.db #0xc6	; 198
      00036C 00                    1009 	.db #0x00	; 0
      00036D 00                    1010 	.db #0x00	; 0
      00036E 00                    1011 	.db #0x00	; 0
      00036F 00                    1012 	.db #0x00	; 0
      000370 00                    1013 	.db #0x00	; 0
      000371 00                    1014 	.db #0x00	; 0
      000372 00                    1015 	.db #0x00	; 0
      000373 00                    1016 	.db #0x00	; 0
      000374 00                    1017 	.db #0x00	; 0
      000375 00                    1018 	.db #0x00	; 0
      000376 00                    1019 	.db #0x00	; 0
      000377 FF                    1020 	.db #0xff	; 255
      000378 30                    1021 	.db #0x30	; 48	'0'
      000379 30                    1022 	.db #0x30	; 48	'0'
      00037A 18                    1023 	.db #0x18	; 24
      00037B 00                    1024 	.db #0x00	; 0
      00037C 00                    1025 	.db #0x00	; 0
      00037D 00                    1026 	.db #0x00	; 0
      00037E 00                    1027 	.db #0x00	; 0
      00037F 00                    1028 	.db #0x00	; 0
      000380 00                    1029 	.db #0x00	; 0
      000381 00                    1030 	.db #0x00	; 0
      000382 78                    1031 	.db #0x78	; 120	'x'
      000383 0C                    1032 	.db #0x0c	; 12
      000384 7C                    1033 	.db #0x7c	; 124
      000385 CC                    1034 	.db #0xcc	; 204
      000386 76                    1035 	.db #0x76	; 118	'v'
      000387 00                    1036 	.db #0x00	; 0
      000388 E0                    1037 	.db #0xe0	; 224
      000389 60                    1038 	.db #0x60	; 96
      00038A 60                    1039 	.db #0x60	; 96
      00038B 7C                    1040 	.db #0x7c	; 124
      00038C 66                    1041 	.db #0x66	; 102	'f'
      00038D 66                    1042 	.db #0x66	; 102	'f'
      00038E DC                    1043 	.db #0xdc	; 220
      00038F 00                    1044 	.db #0x00	; 0
      000390 00                    1045 	.db #0x00	; 0
      000391 00                    1046 	.db #0x00	; 0
      000392 78                    1047 	.db #0x78	; 120	'x'
      000393 CC                    1048 	.db #0xcc	; 204
      000394 C0                    1049 	.db #0xc0	; 192
      000395 CC                    1050 	.db #0xcc	; 204
      000396 78                    1051 	.db #0x78	; 120	'x'
      000397 00                    1052 	.db #0x00	; 0
      000398 1C                    1053 	.db #0x1c	; 28
      000399 0C                    1054 	.db #0x0c	; 12
      00039A 0C                    1055 	.db #0x0c	; 12
      00039B 7C                    1056 	.db #0x7c	; 124
      00039C CC                    1057 	.db #0xcc	; 204
      00039D CC                    1058 	.db #0xcc	; 204
      00039E 76                    1059 	.db #0x76	; 118	'v'
      00039F 00                    1060 	.db #0x00	; 0
      0003A0 00                    1061 	.db #0x00	; 0
      0003A1 00                    1062 	.db #0x00	; 0
      0003A2 78                    1063 	.db #0x78	; 120	'x'
      0003A3 CC                    1064 	.db #0xcc	; 204
      0003A4 FC                    1065 	.db #0xfc	; 252
      0003A5 C0                    1066 	.db #0xc0	; 192
      0003A6 78                    1067 	.db #0x78	; 120	'x'
      0003A7 00                    1068 	.db #0x00	; 0
      0003A8 38                    1069 	.db #0x38	; 56	'8'
      0003A9 6C                    1070 	.db #0x6c	; 108	'l'
      0003AA 60                    1071 	.db #0x60	; 96
      0003AB F0                    1072 	.db #0xf0	; 240
      0003AC 60                    1073 	.db #0x60	; 96
      0003AD 60                    1074 	.db #0x60	; 96
      0003AE F0                    1075 	.db #0xf0	; 240
      0003AF 00                    1076 	.db #0x00	; 0
      0003B0 00                    1077 	.db #0x00	; 0
      0003B1 00                    1078 	.db #0x00	; 0
      0003B2 76                    1079 	.db #0x76	; 118	'v'
      0003B3 CC                    1080 	.db #0xcc	; 204
      0003B4 CC                    1081 	.db #0xcc	; 204
      0003B5 7C                    1082 	.db #0x7c	; 124
      0003B6 0C                    1083 	.db #0x0c	; 12
      0003B7 F8                    1084 	.db #0xf8	; 248
      0003B8 E0                    1085 	.db #0xe0	; 224
      0003B9 60                    1086 	.db #0x60	; 96
      0003BA 6C                    1087 	.db #0x6c	; 108	'l'
      0003BB 76                    1088 	.db #0x76	; 118	'v'
      0003BC 66                    1089 	.db #0x66	; 102	'f'
      0003BD 66                    1090 	.db #0x66	; 102	'f'
      0003BE E6                    1091 	.db #0xe6	; 230
      0003BF 00                    1092 	.db #0x00	; 0
      0003C0 30                    1093 	.db #0x30	; 48	'0'
      0003C1 00                    1094 	.db #0x00	; 0
      0003C2 70                    1095 	.db #0x70	; 112	'p'
      0003C3 30                    1096 	.db #0x30	; 48	'0'
      0003C4 30                    1097 	.db #0x30	; 48	'0'
      0003C5 30                    1098 	.db #0x30	; 48	'0'
      0003C6 78                    1099 	.db #0x78	; 120	'x'
      0003C7 00                    1100 	.db #0x00	; 0
      0003C8 0C                    1101 	.db #0x0c	; 12
      0003C9 00                    1102 	.db #0x00	; 0
      0003CA 0C                    1103 	.db #0x0c	; 12
      0003CB 0C                    1104 	.db #0x0c	; 12
      0003CC 0C                    1105 	.db #0x0c	; 12
      0003CD CC                    1106 	.db #0xcc	; 204
      0003CE CC                    1107 	.db #0xcc	; 204
      0003CF 78                    1108 	.db #0x78	; 120	'x'
      0003D0 E0                    1109 	.db #0xe0	; 224
      0003D1 60                    1110 	.db #0x60	; 96
      0003D2 66                    1111 	.db #0x66	; 102	'f'
      0003D3 6C                    1112 	.db #0x6c	; 108	'l'
      0003D4 78                    1113 	.db #0x78	; 120	'x'
      0003D5 6C                    1114 	.db #0x6c	; 108	'l'
      0003D6 E6                    1115 	.db #0xe6	; 230
      0003D7 00                    1116 	.db #0x00	; 0
      0003D8 70                    1117 	.db #0x70	; 112	'p'
      0003D9 30                    1118 	.db #0x30	; 48	'0'
      0003DA 30                    1119 	.db #0x30	; 48	'0'
      0003DB 30                    1120 	.db #0x30	; 48	'0'
      0003DC 30                    1121 	.db #0x30	; 48	'0'
      0003DD 30                    1122 	.db #0x30	; 48	'0'
      0003DE 78                    1123 	.db #0x78	; 120	'x'
      0003DF 00                    1124 	.db #0x00	; 0
      0003E0 00                    1125 	.db #0x00	; 0
      0003E1 00                    1126 	.db #0x00	; 0
      0003E2 CC                    1127 	.db #0xcc	; 204
      0003E3 FE                    1128 	.db #0xfe	; 254
      0003E4 FE                    1129 	.db #0xfe	; 254
      0003E5 D6                    1130 	.db #0xd6	; 214
      0003E6 C6                    1131 	.db #0xc6	; 198
      0003E7 00                    1132 	.db #0x00	; 0
      0003E8 00                    1133 	.db #0x00	; 0
      0003E9 00                    1134 	.db #0x00	; 0
      0003EA F8                    1135 	.db #0xf8	; 248
      0003EB CC                    1136 	.db #0xcc	; 204
      0003EC CC                    1137 	.db #0xcc	; 204
      0003ED CC                    1138 	.db #0xcc	; 204
      0003EE CC                    1139 	.db #0xcc	; 204
      0003EF 00                    1140 	.db #0x00	; 0
      0003F0 00                    1141 	.db #0x00	; 0
      0003F1 00                    1142 	.db #0x00	; 0
      0003F2 78                    1143 	.db #0x78	; 120	'x'
      0003F3 CC                    1144 	.db #0xcc	; 204
      0003F4 CC                    1145 	.db #0xcc	; 204
      0003F5 CC                    1146 	.db #0xcc	; 204
      0003F6 78                    1147 	.db #0x78	; 120	'x'
      0003F7 00                    1148 	.db #0x00	; 0
      0003F8 00                    1149 	.db #0x00	; 0
      0003F9 00                    1150 	.db #0x00	; 0
      0003FA DC                    1151 	.db #0xdc	; 220
      0003FB 66                    1152 	.db #0x66	; 102	'f'
      0003FC 66                    1153 	.db #0x66	; 102	'f'
      0003FD 7C                    1154 	.db #0x7c	; 124
      0003FE 60                    1155 	.db #0x60	; 96
      0003FF F0                    1156 	.db #0xf0	; 240
      000400 00                    1157 	.db #0x00	; 0
      000401 00                    1158 	.db #0x00	; 0
      000402 76                    1159 	.db #0x76	; 118	'v'
      000403 CC                    1160 	.db #0xcc	; 204
      000404 CC                    1161 	.db #0xcc	; 204
      000405 7C                    1162 	.db #0x7c	; 124
      000406 0C                    1163 	.db #0x0c	; 12
      000407 1E                    1164 	.db #0x1e	; 30
      000408 00                    1165 	.db #0x00	; 0
      000409 00                    1166 	.db #0x00	; 0
      00040A DC                    1167 	.db #0xdc	; 220
      00040B 76                    1168 	.db #0x76	; 118	'v'
      00040C 66                    1169 	.db #0x66	; 102	'f'
      00040D 60                    1170 	.db #0x60	; 96
      00040E F0                    1171 	.db #0xf0	; 240
      00040F 00                    1172 	.db #0x00	; 0
      000410 00                    1173 	.db #0x00	; 0
      000411 00                    1174 	.db #0x00	; 0
      000412 7C                    1175 	.db #0x7c	; 124
      000413 C0                    1176 	.db #0xc0	; 192
      000414 78                    1177 	.db #0x78	; 120	'x'
      000415 0C                    1178 	.db #0x0c	; 12
      000416 F8                    1179 	.db #0xf8	; 248
      000417 00                    1180 	.db #0x00	; 0
      000418 10                    1181 	.db #0x10	; 16
      000419 30                    1182 	.db #0x30	; 48	'0'
      00041A 7C                    1183 	.db #0x7c	; 124
      00041B 30                    1184 	.db #0x30	; 48	'0'
      00041C 30                    1185 	.db #0x30	; 48	'0'
      00041D 34                    1186 	.db #0x34	; 52	'4'
      00041E 18                    1187 	.db #0x18	; 24
      00041F 00                    1188 	.db #0x00	; 0
      000420 00                    1189 	.db #0x00	; 0
      000421 00                    1190 	.db #0x00	; 0
      000422 CC                    1191 	.db #0xcc	; 204
      000423 CC                    1192 	.db #0xcc	; 204
      000424 CC                    1193 	.db #0xcc	; 204
      000425 CC                    1194 	.db #0xcc	; 204
      000426 76                    1195 	.db #0x76	; 118	'v'
      000427 00                    1196 	.db #0x00	; 0
      000428 00                    1197 	.db #0x00	; 0
      000429 00                    1198 	.db #0x00	; 0
      00042A CC                    1199 	.db #0xcc	; 204
      00042B CC                    1200 	.db #0xcc	; 204
      00042C CC                    1201 	.db #0xcc	; 204
      00042D 78                    1202 	.db #0x78	; 120	'x'
      00042E 30                    1203 	.db #0x30	; 48	'0'
      00042F 00                    1204 	.db #0x00	; 0
      000430 00                    1205 	.db #0x00	; 0
      000431 00                    1206 	.db #0x00	; 0
      000432 C6                    1207 	.db #0xc6	; 198
      000433 D6                    1208 	.db #0xd6	; 214
      000434 FE                    1209 	.db #0xfe	; 254
      000435 FE                    1210 	.db #0xfe	; 254
      000436 6C                    1211 	.db #0x6c	; 108	'l'
      000437 00                    1212 	.db #0x00	; 0
      000438 00                    1213 	.db #0x00	; 0
      000439 00                    1214 	.db #0x00	; 0
      00043A C6                    1215 	.db #0xc6	; 198
      00043B 6C                    1216 	.db #0x6c	; 108	'l'
      00043C 38                    1217 	.db #0x38	; 56	'8'
      00043D 6C                    1218 	.db #0x6c	; 108	'l'
      00043E C6                    1219 	.db #0xc6	; 198
      00043F 00                    1220 	.db #0x00	; 0
      000440 00                    1221 	.db #0x00	; 0
      000441 00                    1222 	.db #0x00	; 0
      000442 CC                    1223 	.db #0xcc	; 204
      000443 CC                    1224 	.db #0xcc	; 204
      000444 CC                    1225 	.db #0xcc	; 204
      000445 7C                    1226 	.db #0x7c	; 124
      000446 0C                    1227 	.db #0x0c	; 12
      000447 F8                    1228 	.db #0xf8	; 248
      000448 00                    1229 	.db #0x00	; 0
      000449 00                    1230 	.db #0x00	; 0
      00044A FC                    1231 	.db #0xfc	; 252
      00044B 98                    1232 	.db #0x98	; 152
      00044C 30                    1233 	.db #0x30	; 48	'0'
      00044D 64                    1234 	.db #0x64	; 100	'd'
      00044E FC                    1235 	.db #0xfc	; 252
      00044F 00                    1236 	.db #0x00	; 0
      000450 1C                    1237 	.db #0x1c	; 28
      000451 30                    1238 	.db #0x30	; 48	'0'
      000452 30                    1239 	.db #0x30	; 48	'0'
      000453 E0                    1240 	.db #0xe0	; 224
      000454 30                    1241 	.db #0x30	; 48	'0'
      000455 30                    1242 	.db #0x30	; 48	'0'
      000456 1C                    1243 	.db #0x1c	; 28
      000457 00                    1244 	.db #0x00	; 0
      000458 18                    1245 	.db #0x18	; 24
      000459 18                    1246 	.db #0x18	; 24
      00045A 18                    1247 	.db #0x18	; 24
      00045B 00                    1248 	.db #0x00	; 0
      00045C 18                    1249 	.db #0x18	; 24
      00045D 18                    1250 	.db #0x18	; 24
      00045E 18                    1251 	.db #0x18	; 24
      00045F 00                    1252 	.db #0x00	; 0
      000460 E0                    1253 	.db #0xe0	; 224
      000461 30                    1254 	.db #0x30	; 48	'0'
      000462 30                    1255 	.db #0x30	; 48	'0'
      000463 1C                    1256 	.db #0x1c	; 28
      000464 30                    1257 	.db #0x30	; 48	'0'
      000465 30                    1258 	.db #0x30	; 48	'0'
      000466 E0                    1259 	.db #0xe0	; 224
      000467 00                    1260 	.db #0x00	; 0
      000468 76                    1261 	.db #0x76	; 118	'v'
      000469 DC                    1262 	.db #0xdc	; 220
      00046A 00                    1263 	.db #0x00	; 0
      00046B 00                    1264 	.db #0x00	; 0
      00046C 00                    1265 	.db #0x00	; 0
      00046D 00                    1266 	.db #0x00	; 0
      00046E 00                    1267 	.db #0x00	; 0
      00046F 00                    1268 	.db #0x00	; 0
      000470 00                    1269 	.db #0x00	; 0
      000471 10                    1270 	.db #0x10	; 16
      000472 38                    1271 	.db #0x38	; 56	'8'
      000473 6C                    1272 	.db #0x6c	; 108	'l'
      000474 C6                    1273 	.db #0xc6	; 198
      000475 C6                    1274 	.db #0xc6	; 198
      000476 FE                    1275 	.db #0xfe	; 254
      000477 00                    1276 	.db #0x00	; 0
      000478                       1277 _pattern_black_0:
      000478 FF                    1278 	.db #0xff	; 255
      000479 FF                    1279 	.db #0xff	; 255
      00047A FF                    1280 	.db #0xff	; 255
      00047B FF                    1281 	.db #0xff	; 255
      00047C FF                    1282 	.db #0xff	; 255
      00047D FF                    1283 	.db #0xff	; 255
      00047E FF                    1284 	.db #0xff	; 255
      00047F FF                    1285 	.db #0xff	; 255
      000480                       1286 _pattern_black_1:
      000480 FE                    1287 	.db #0xfe	; 254
      000481 FF                    1288 	.db #0xff	; 255
      000482 FF                    1289 	.db #0xff	; 255
      000483 FF                    1290 	.db #0xff	; 255
      000484 FE                    1291 	.db #0xfe	; 254
      000485 FF                    1292 	.db #0xff	; 255
      000486 FF                    1293 	.db #0xff	; 255
      000487 FE                    1294 	.db #0xfe	; 254
      000488                       1295 _pattern_black_2:
      000488 FF                    1296 	.db #0xff	; 255
      000489 FF                    1297 	.db #0xff	; 255
      00048A FF                    1298 	.db #0xff	; 255
      00048B FF                    1299 	.db #0xff	; 255
      00048C FF                    1300 	.db #0xff	; 255
      00048D FB                    1301 	.db #0xfb	; 251
      00048E FF                    1302 	.db #0xff	; 255
      00048F BB                    1303 	.db #0xbb	; 187
      000490                       1304 _pattern_black_3:
      000490 FB                    1305 	.db #0xfb	; 251
      000491 FE                    1306 	.db #0xfe	; 254
      000492 FD                    1307 	.db #0xfd	; 253
      000493 FE                    1308 	.db #0xfe	; 254
      000494 F7                    1309 	.db #0xf7	; 247
      000495 FA                    1310 	.db #0xfa	; 250
      000496 AF                    1311 	.db #0xaf	; 175
      000497 55                    1312 	.db #0x55	; 85	'U'
      000498                       1313 _pattern_0:
      000498 9F                    1314 	.db #0x9f	; 159
      000499 90                    1315 	.db #0x90	; 144
      00049A 90                    1316 	.db #0x90	; 144
      00049B 93                    1317 	.db #0x93	; 147
      00049C 92                    1318 	.db #0x92	; 146
      00049D 92                    1319 	.db #0x92	; 146
      00049E 92                    1320 	.db #0x92	; 146
      00049F 92                    1321 	.db #0x92	; 146
      0004A0                       1322 _pattern_1:
      0004A0 FF                    1323 	.db #0xff	; 255
      0004A1 01                    1324 	.db #0x01	; 1
      0004A2 01                    1325 	.db #0x01	; 1
      0004A3 F9                    1326 	.db #0xf9	; 249
      0004A4 09                    1327 	.db #0x09	; 9
      0004A5 09                    1328 	.db #0x09	; 9
      0004A6 49                    1329 	.db #0x49	; 73	'I'
      0004A7 49                    1330 	.db #0x49	; 73	'I'
      0004A8                       1331 _pattern_2:
      0004A8 92                    1332 	.db #0x92	; 146
      0004A9 93                    1333 	.db #0x93	; 147
      0004AA 90                    1334 	.db #0x90	; 144
      0004AB 90                    1335 	.db #0x90	; 144
      0004AC 9F                    1336 	.db #0x9f	; 159
      0004AD 80                    1337 	.db #0x80	; 128
      0004AE 80                    1338 	.db #0x80	; 128
      0004AF FF                    1339 	.db #0xff	; 255
      0004B0                       1340 _pattern_3:
      0004B0 49                    1341 	.db #0x49	; 73	'I'
      0004B1 C9                    1342 	.db #0xc9	; 201
      0004B2 09                    1343 	.db #0x09	; 9
      0004B3 09                    1344 	.db #0x09	; 9
      0004B4 F9                    1345 	.db #0xf9	; 249
      0004B5 01                    1346 	.db #0x01	; 1
      0004B6 01                    1347 	.db #0x01	; 1
      0004B7 FF                    1348 	.db #0xff	; 255
      0004B8                       1349 _pattern_4:
      0004B8 7F                    1350 	.db #0x7f	; 127
      0004B9 81                    1351 	.db #0x81	; 129
      0004BA 83                    1352 	.db #0x83	; 131
      0004BB 87                    1353 	.db #0x87	; 135
      0004BC 8F                    1354 	.db #0x8f	; 143
      0004BD 9F                    1355 	.db #0x9f	; 159
      0004BE BF                    1356 	.db #0xbf	; 191
      0004BF FF                    1357 	.db #0xff	; 255
      0004C0                       1358 _pattern_5:
      0004C0 FE                    1359 	.db #0xfe	; 254
      0004C1 81                    1360 	.db #0x81	; 129
      0004C2 C1                    1361 	.db #0xc1	; 193
      0004C3 E1                    1362 	.db #0xe1	; 225
      0004C4 F1                    1363 	.db #0xf1	; 241
      0004C5 F9                    1364 	.db #0xf9	; 249
      0004C6 FD                    1365 	.db #0xfd	; 253
      0004C7 FF                    1366 	.db #0xff	; 255
      0004C8                       1367 _pattern_6:
      0004C8 FF                    1368 	.db #0xff	; 255
      0004C9 BF                    1369 	.db #0xbf	; 191
      0004CA 9F                    1370 	.db #0x9f	; 159
      0004CB 8F                    1371 	.db #0x8f	; 143
      0004CC 87                    1372 	.db #0x87	; 135
      0004CD 83                    1373 	.db #0x83	; 131
      0004CE 81                    1374 	.db #0x81	; 129
      0004CF 7F                    1375 	.db #0x7f	; 127
      0004D0                       1376 _pattern_7:
      0004D0 FF                    1377 	.db #0xff	; 255
      0004D1 FD                    1378 	.db #0xfd	; 253
      0004D2 F9                    1379 	.db #0xf9	; 249
      0004D3 F1                    1380 	.db #0xf1	; 241
      0004D4 E1                    1381 	.db #0xe1	; 225
      0004D5 C1                    1382 	.db #0xc1	; 193
      0004D6 81                    1383 	.db #0x81	; 129
      0004D7 FE                    1384 	.db #0xfe	; 254
      0004D8                       1385 _pattern_8:
      0004D8 7F                    1386 	.db #0x7f	; 127
      0004D9 AE                    1387 	.db #0xae	; 174
      0004DA FF                    1388 	.db #0xff	; 255
      0004DB 5B                    1389 	.db #0x5b	; 91
      0004DC FF                    1390 	.db #0xff	; 255
      0004DD AE                    1391 	.db #0xae	; 174
      0004DE FF                    1392 	.db #0xff	; 255
      0004DF DF                    1393 	.db #0xdf	; 223
      0004E0                       1394 _pattern_9:
      0004E0 FE                    1395 	.db #0xfe	; 254
      0004E1 BD                    1396 	.db #0xbd	; 189
      0004E2 DF                    1397 	.db #0xdf	; 223
      0004E3 7F                    1398 	.db #0x7f	; 127
      0004E4 FB                    1399 	.db #0xfb	; 251
      0004E5 DF                    1400 	.db #0xdf	; 223
      0004E6 FE                    1401 	.db #0xfe	; 254
      0004E7 EF                    1402 	.db #0xef	; 239
      0004E8                       1403 _pattern_10:
      0004E8 7F                    1404 	.db #0x7f	; 127
      0004E9 FF                    1405 	.db #0xff	; 255
      0004EA ED                    1406 	.db #0xed	; 237
      0004EB FF                    1407 	.db #0xff	; 255
      0004EC B6                    1408 	.db #0xb6	; 182
      0004ED FE                    1409 	.db #0xfe	; 254
      0004EE DB                    1410 	.db #0xdb	; 219
      0004EF 7D                    1411 	.db #0x7d	; 125
      0004F0                       1412 _pattern_11:
      0004F0 FE                    1413 	.db #0xfe	; 254
      0004F1 FF                    1414 	.db #0xff	; 255
      0004F2 FE                    1415 	.db #0xfe	; 254
      0004F3 77                    1416 	.db #0x77	; 119	'w'
      0004F4 FE                    1417 	.db #0xfe	; 254
      0004F5 DD                    1418 	.db #0xdd	; 221
      0004F6 EF                    1419 	.db #0xef	; 239
      0004F7 5A                    1420 	.db #0x5a	; 90	'Z'
      0004F8                       1421 _pattern_12:
      0004F8 7F                    1422 	.db #0x7f	; 127
      0004F9 D5                    1423 	.db #0xd5	; 213
      0004FA BF                    1424 	.db #0xbf	; 191
      0004FB ED                    1425 	.db #0xed	; 237
      0004FC BF                    1426 	.db #0xbf	; 191
      0004FD F5                    1427 	.db #0xf5	; 245
      0004FE BF                    1428 	.db #0xbf	; 191
      0004FF FF                    1429 	.db #0xff	; 255
      000500                       1430 _pattern_13:
      000500 FE                    1431 	.db #0xfe	; 254
      000501 5F                    1432 	.db #0x5f	; 95
      000502 F5                    1433 	.db #0xf5	; 245
      000503 DF                    1434 	.db #0xdf	; 223
      000504 FF                    1435 	.db #0xff	; 255
      000505 FF                    1436 	.db #0xff	; 255
      000506 FF                    1437 	.db #0xff	; 255
      000507 FF                    1438 	.db #0xff	; 255
      000508                       1439 _pattern_14:
      000508 EF                    1440 	.db #0xef	; 239
      000509 BF                    1441 	.db #0xbf	; 191
      00050A 7F                    1442 	.db #0x7f	; 127
      00050B FF                    1443 	.db #0xff	; 255
      00050C FF                    1444 	.db #0xff	; 255
      00050D FF                    1445 	.db #0xff	; 255
      00050E DB                    1446 	.db #0xdb	; 219
      00050F 7F                    1447 	.db #0x7f	; 127
      000510                       1448 _pattern_15:
      000510 FF                    1449 	.db #0xff	; 255
      000511 FD                    1450 	.db #0xfd	; 253
      000512 FF                    1451 	.db #0xff	; 255
      000513 DB                    1452 	.db #0xdb	; 219
      000514 FD                    1453 	.db #0xfd	; 253
      000515 7B                    1454 	.db #0x7b	; 123
      000516 D7                    1455 	.db #0xd7	; 215
      000517 FE                    1456 	.db #0xfe	; 254
      000518                       1457 _pattern_16:
      000518 7F                    1458 	.db #0x7f	; 127
      000519 FF                    1459 	.db #0xff	; 255
      00051A EA                    1460 	.db #0xea	; 234
      00051B DF                    1461 	.db #0xdf	; 223
      00051C FF                    1462 	.db #0xff	; 255
      00051D DF                    1463 	.db #0xdf	; 223
      00051E FF                    1464 	.db #0xff	; 255
      00051F DF                    1465 	.db #0xdf	; 223
      000520                       1466 _pattern_17:
      000520 FE                    1467 	.db #0xfe	; 254
      000521 FF                    1468 	.db #0xff	; 255
      000522 AF                    1469 	.db #0xaf	; 175
      000523 FA                    1470 	.db #0xfa	; 250
      000524 FF                    1471 	.db #0xff	; 255
      000525 FA                    1472 	.db #0xfa	; 250
      000526 FF                    1473 	.db #0xff	; 255
      000527 FA                    1474 	.db #0xfa	; 250
      000528                       1475 _pattern_18:
      000528 FF                    1476 	.db #0xff	; 255
      000529 DF                    1477 	.db #0xdf	; 223
      00052A FF                    1478 	.db #0xff	; 255
      00052B DF                    1479 	.db #0xdf	; 223
      00052C FF                    1480 	.db #0xff	; 255
      00052D EA                    1481 	.db #0xea	; 234
      00052E FF                    1482 	.db #0xff	; 255
      00052F 55                    1483 	.db #0x55	; 85	'U'
      000530                       1484 _pattern_19:
      000530 FF                    1485 	.db #0xff	; 255
      000531 FA                    1486 	.db #0xfa	; 250
      000532 FF                    1487 	.db #0xff	; 255
      000533 FA                    1488 	.db #0xfa	; 250
      000534 F7                    1489 	.db #0xf7	; 247
      000535 AA                    1490 	.db #0xaa	; 170
      000536 FF                    1491 	.db #0xff	; 255
      000537 56                    1492 	.db #0x56	; 86	'V'
      000538                       1493 _pattern_20:
      000538 3F                    1494 	.db #0x3f	; 63
      000539 7F                    1495 	.db #0x7f	; 127
      00053A E0                    1496 	.db #0xe0	; 224
      00053B CE                    1497 	.db #0xce	; 206
      00053C E6                    1498 	.db #0xe6	; 230
      00053D 7C                    1499 	.db #0x7c	; 124
      00053E 39                    1500 	.db #0x39	; 57	'9'
      00053F 03                    1501 	.db #0x03	; 3
      000540                       1502 _pattern_21:
      000540 FF                    1503 	.db #0xff	; 255
      000541 FF                    1504 	.db #0xff	; 255
      000542 00                    1505 	.db #0x00	; 0
      000543 DB                    1506 	.db #0xdb	; 219
      000544 DB                    1507 	.db #0xdb	; 219
      000545 00                    1508 	.db #0x00	; 0
      000546 FF                    1509 	.db #0xff	; 255
      000547 FF                    1510 	.db #0xff	; 255
      000548                       1511 _pattern_22:
      000548 FC                    1512 	.db #0xfc	; 252
      000549 FE                    1513 	.db #0xfe	; 254
      00054A 07                    1514 	.db #0x07	; 7
      00054B 73                    1515 	.db #0x73	; 115	's'
      00054C 67                    1516 	.db #0x67	; 103	'g'
      00054D 3E                    1517 	.db #0x3e	; 62
      00054E 9C                    1518 	.db #0x9c	; 156
      00054F C0                    1519 	.db #0xc0	; 192
      000550                       1520 _pattern_23:
      000550 06                    1521 	.db #0x06	; 6
      000551 00                    1522 	.db #0x00	; 0
      000552 03                    1523 	.db #0x03	; 3
      000553 04                    1524 	.db #0x04	; 4
      000554 05                    1525 	.db #0x05	; 5
      000555 05                    1526 	.db #0x05	; 5
      000556 05                    1527 	.db #0x05	; 5
      000557 05                    1528 	.db #0x05	; 5
      000558                       1529 _pattern_24:
      000558 00                    1530 	.db #0x00	; 0
      000559 00                    1531 	.db #0x00	; 0
      00055A 33                    1532 	.db #0x33	; 51	'3'
      00055B 44                    1533 	.db #0x44	; 68	'D'
      00055C 55                    1534 	.db #0x55	; 85	'U'
      00055D 55                    1535 	.db #0x55	; 85	'U'
      00055E 55                    1536 	.db #0x55	; 85	'U'
      00055F 55                    1537 	.db #0x55	; 85	'U'
      000560                       1538 _pattern_25:
      000560 60                    1539 	.db #0x60	; 96
      000561 00                    1540 	.db #0x00	; 0
      000562 40                    1541 	.db #0x40	; 64
      000563 20                    1542 	.db #0x20	; 32
      000564 20                    1543 	.db #0x20	; 32
      000565 20                    1544 	.db #0x20	; 32
      000566 20                    1545 	.db #0x20	; 32
      000567 20                    1546 	.db #0x20	; 32
      000568                       1547 _pattern_26:
      000568 05                    1548 	.db #0x05	; 5
      000569 05                    1549 	.db #0x05	; 5
      00056A 05                    1550 	.db #0x05	; 5
      00056B 05                    1551 	.db #0x05	; 5
      00056C 05                    1552 	.db #0x05	; 5
      00056D 05                    1553 	.db #0x05	; 5
      00056E 05                    1554 	.db #0x05	; 5
      00056F 05                    1555 	.db #0x05	; 5
      000570                       1556 _pattern_27:
      000570 55                    1557 	.db #0x55	; 85	'U'
      000571 55                    1558 	.db #0x55	; 85	'U'
      000572 55                    1559 	.db #0x55	; 85	'U'
      000573 55                    1560 	.db #0x55	; 85	'U'
      000574 55                    1561 	.db #0x55	; 85	'U'
      000575 55                    1562 	.db #0x55	; 85	'U'
      000576 55                    1563 	.db #0x55	; 85	'U'
      000577 55                    1564 	.db #0x55	; 85	'U'
      000578                       1565 _pattern_28:
      000578 20                    1566 	.db #0x20	; 32
      000579 20                    1567 	.db #0x20	; 32
      00057A 20                    1568 	.db #0x20	; 32
      00057B 20                    1569 	.db #0x20	; 32
      00057C 20                    1570 	.db #0x20	; 32
      00057D 20                    1571 	.db #0x20	; 32
      00057E 20                    1572 	.db #0x20	; 32
      00057F 20                    1573 	.db #0x20	; 32
      000580                       1574 _pattern_29:
      000580 05                    1575 	.db #0x05	; 5
      000581 05                    1576 	.db #0x05	; 5
      000582 07                    1577 	.db #0x07	; 7
      000583 07                    1578 	.db #0x07	; 7
      000584 07                    1579 	.db #0x07	; 7
      000585 05                    1580 	.db #0x05	; 5
      000586 05                    1581 	.db #0x05	; 5
      000587 05                    1582 	.db #0x05	; 5
      000588                       1583 _pattern_30:
      000588 55                    1584 	.db #0x55	; 85	'U'
      000589 55                    1585 	.db #0x55	; 85	'U'
      00058A FF                    1586 	.db #0xff	; 255
      00058B FF                    1587 	.db #0xff	; 255
      00058C FF                    1588 	.db #0xff	; 255
      00058D 55                    1589 	.db #0x55	; 85	'U'
      00058E 55                    1590 	.db #0x55	; 85	'U'
      00058F 55                    1591 	.db #0x55	; 85	'U'
      000590                       1592 _pattern_31:
      000590 20                    1593 	.db #0x20	; 32
      000591 20                    1594 	.db #0x20	; 32
      000592 E0                    1595 	.db #0xe0	; 224
      000593 E0                    1596 	.db #0xe0	; 224
      000594 E0                    1597 	.db #0xe0	; 224
      000595 20                    1598 	.db #0x20	; 32
      000596 20                    1599 	.db #0x20	; 32
      000597 20                    1600 	.db #0x20	; 32
      000598                       1601 _pattern_37:
      000598 05                    1602 	.db #0x05	; 5
      000599 05                    1603 	.db #0x05	; 5
      00059A 05                    1604 	.db #0x05	; 5
      00059B 05                    1605 	.db #0x05	; 5
      00059C 04                    1606 	.db #0x04	; 4
      00059D 03                    1607 	.db #0x03	; 3
      00059E 00                    1608 	.db #0x00	; 0
      00059F 06                    1609 	.db #0x06	; 6
      0005A0                       1610 _pattern_38:
      0005A0 55                    1611 	.db #0x55	; 85	'U'
      0005A1 55                    1612 	.db #0x55	; 85	'U'
      0005A2 55                    1613 	.db #0x55	; 85	'U'
      0005A3 55                    1614 	.db #0x55	; 85	'U'
      0005A4 44                    1615 	.db #0x44	; 68	'D'
      0005A5 33                    1616 	.db #0x33	; 51	'3'
      0005A6 00                    1617 	.db #0x00	; 0
      0005A7 00                    1618 	.db #0x00	; 0
      0005A8                       1619 _pattern_39:
      0005A8 20                    1620 	.db #0x20	; 32
      0005A9 20                    1621 	.db #0x20	; 32
      0005AA 20                    1622 	.db #0x20	; 32
      0005AB 20                    1623 	.db #0x20	; 32
      0005AC 20                    1624 	.db #0x20	; 32
      0005AD 40                    1625 	.db #0x40	; 64
      0005AE 00                    1626 	.db #0x00	; 0
      0005AF 60                    1627 	.db #0x60	; 96
      0005B0                       1628 _pattern_32:
      0005B0 03                    1629 	.db #0x03	; 3
      0005B1 39                    1630 	.db #0x39	; 57	'9'
      0005B2 7C                    1631 	.db #0x7c	; 124
      0005B3 E6                    1632 	.db #0xe6	; 230
      0005B4 CE                    1633 	.db #0xce	; 206
      0005B5 E0                    1634 	.db #0xe0	; 224
      0005B6 7F                    1635 	.db #0x7f	; 127
      0005B7 3F                    1636 	.db #0x3f	; 63
      0005B8                       1637 _pattern_33:
      0005B8 FF                    1638 	.db #0xff	; 255
      0005B9 FF                    1639 	.db #0xff	; 255
      0005BA 00                    1640 	.db #0x00	; 0
      0005BB DB                    1641 	.db #0xdb	; 219
      0005BC DB                    1642 	.db #0xdb	; 219
      0005BD 00                    1643 	.db #0x00	; 0
      0005BE FF                    1644 	.db #0xff	; 255
      0005BF FF                    1645 	.db #0xff	; 255
      0005C0                       1646 _pattern_34:
      0005C0 C0                    1647 	.db #0xc0	; 192
      0005C1 9C                    1648 	.db #0x9c	; 156
      0005C2 3E                    1649 	.db #0x3e	; 62
      0005C3 67                    1650 	.db #0x67	; 103	'g'
      0005C4 73                    1651 	.db #0x73	; 115	's'
      0005C5 07                    1652 	.db #0x07	; 7
      0005C6 FE                    1653 	.db #0xfe	; 254
      0005C7 FC                    1654 	.db #0xfc	; 252
      0005C8                       1655 _sprite_dust_0:
      0005C8 10                    1656 	.db #0x10	; 16
      0005C9 42                    1657 	.db #0x42	; 66	'B'
      0005CA 10                    1658 	.db #0x10	; 16
      0005CB 45                    1659 	.db #0x45	; 69	'E'
      0005CC 20                    1660 	.db #0x20	; 32
      0005CD 89                    1661 	.db #0x89	; 137
      0005CE 20                    1662 	.db #0x20	; 32
      0005CF 88                    1663 	.db #0x88	; 136
      0005D0                       1664 _sprite_dust_1:
      0005D0 10                    1665 	.db #0x10	; 16
      0005D1 42                    1666 	.db #0x42	; 66	'B'
      0005D2 00                    1667 	.db #0x00	; 0
      0005D3 04                    1668 	.db #0x04	; 4
      0005D4 20                    1669 	.db #0x20	; 32
      0005D5 81                    1670 	.db #0x81	; 129
      0005D6 20                    1671 	.db #0x20	; 32
      0005D7 08                    1672 	.db #0x08	; 8
      0005D8                       1673 _sprite_dust_2:
      0005D8 10                    1674 	.db #0x10	; 16
      0005D9 00                    1675 	.db #0x00	; 0
      0005DA 00                    1676 	.db #0x00	; 0
      0005DB 04                    1677 	.db #0x04	; 4
      0005DC 20                    1678 	.db #0x20	; 32
      0005DD 80                    1679 	.db #0x80	; 128
      0005DE 20                    1680 	.db #0x20	; 32
      0005DF 00                    1681 	.db #0x00	; 0
      0005E0                       1682 _sprite_dust_3:
      0005E0 10                    1683 	.db #0x10	; 16
      0005E1 00                    1684 	.db #0x00	; 0
      0005E2 00                    1685 	.db #0x00	; 0
      0005E3 04                    1686 	.db #0x04	; 4
      0005E4 00                    1687 	.db #0x00	; 0
      0005E5 00                    1688 	.db #0x00	; 0
      0005E6 20                    1689 	.db #0x20	; 32
      0005E7 00                    1690 	.db #0x00	; 0
      0005E8                       1691 _pattern_title:
      0005E8 FE                    1692 	.db #0xfe	; 254
      0005E9 FE                    1693 	.db #0xfe	; 254
      0005EA FE                    1694 	.db #0xfe	; 254
      0005EB FE                    1695 	.db #0xfe	; 254
      0005EC FE                    1696 	.db #0xfe	; 254
      0005ED FE                    1697 	.db #0xfe	; 254
      0005EE FE                    1698 	.db #0xfe	; 254
      0005EF 00                    1699 	.db #0x00	; 0
      0005F0                       1700 _color_black_0:
      0005F0 14                    1701 	.db #0x14	; 20
      0005F1 14                    1702 	.db #0x14	; 20
      0005F2 14                    1703 	.db #0x14	; 20
      0005F3 14                    1704 	.db #0x14	; 20
      0005F4 14                    1705 	.db #0x14	; 20
      0005F5 14                    1706 	.db #0x14	; 20
      0005F6 14                    1707 	.db #0x14	; 20
      0005F7 14                    1708 	.db #0x14	; 20
      0005F8                       1709 _color_black_1:
      0005F8 14                    1710 	.db #0x14	; 20
      0005F9 14                    1711 	.db #0x14	; 20
      0005FA 14                    1712 	.db #0x14	; 20
      0005FB 14                    1713 	.db #0x14	; 20
      0005FC 14                    1714 	.db #0x14	; 20
      0005FD 14                    1715 	.db #0x14	; 20
      0005FE 14                    1716 	.db #0x14	; 20
      0005FF 14                    1717 	.db #0x14	; 20
      000600                       1718 _color_black_2:
      000600 14                    1719 	.db #0x14	; 20
      000601 14                    1720 	.db #0x14	; 20
      000602 14                    1721 	.db #0x14	; 20
      000603 14                    1722 	.db #0x14	; 20
      000604 14                    1723 	.db #0x14	; 20
      000605 14                    1724 	.db #0x14	; 20
      000606 14                    1725 	.db #0x14	; 20
      000607 14                    1726 	.db #0x14	; 20
      000608                       1727 _color_black_3:
      000608 14                    1728 	.db #0x14	; 20
      000609 14                    1729 	.db #0x14	; 20
      00060A 14                    1730 	.db #0x14	; 20
      00060B 14                    1731 	.db #0x14	; 20
      00060C 14                    1732 	.db #0x14	; 20
      00060D 14                    1733 	.db #0x14	; 20
      00060E 14                    1734 	.db #0x14	; 20
      00060F 14                    1735 	.db #0x14	; 20
      000610                       1736 _color_0:
      000610 13                    1737 	.db #0x13	; 19
      000611 13                    1738 	.db #0x13	; 19
      000612 13                    1739 	.db #0x13	; 19
      000613 13                    1740 	.db #0x13	; 19
      000614 13                    1741 	.db #0x13	; 19
      000615 13                    1742 	.db #0x13	; 19
      000616 13                    1743 	.db #0x13	; 19
      000617 13                    1744 	.db #0x13	; 19
      000618                       1745 _color_1:
      000618 12                    1746 	.db #0x12	; 18
      000619 12                    1747 	.db #0x12	; 18
      00061A 12                    1748 	.db #0x12	; 18
      00061B 12                    1749 	.db #0x12	; 18
      00061C 12                    1750 	.db #0x12	; 18
      00061D 12                    1751 	.db #0x12	; 18
      00061E 12                    1752 	.db #0x12	; 18
      00061F 12                    1753 	.db #0x12	; 18
      000620                       1754 _color_2:
      000620 12                    1755 	.db #0x12	; 18
      000621 12                    1756 	.db #0x12	; 18
      000622 12                    1757 	.db #0x12	; 18
      000623 12                    1758 	.db #0x12	; 18
      000624 12                    1759 	.db #0x12	; 18
      000625 12                    1760 	.db #0x12	; 18
      000626 12                    1761 	.db #0x12	; 18
      000627 12                    1762 	.db #0x12	; 18
      000628                       1763 _color_3:
      000628 1C                    1764 	.db #0x1c	; 28
      000629 1C                    1765 	.db #0x1c	; 28
      00062A 1C                    1766 	.db #0x1c	; 28
      00062B 1C                    1767 	.db #0x1c	; 28
      00062C 1C                    1768 	.db #0x1c	; 28
      00062D 1C                    1769 	.db #0x1c	; 28
      00062E 1C                    1770 	.db #0x1c	; 28
      00062F 1C                    1771 	.db #0x1c	; 28
      000630                       1772 _color_4:
      000630 96                    1773 	.db #0x96	; 150
      000631 96                    1774 	.db #0x96	; 150
      000632 96                    1775 	.db #0x96	; 150
      000633 96                    1776 	.db #0x96	; 150
      000634 96                    1777 	.db #0x96	; 150
      000635 96                    1778 	.db #0x96	; 150
      000636 96                    1779 	.db #0x96	; 150
      000637 96                    1780 	.db #0x96	; 150
      000638                       1781 _color_5:
      000638 98                    1782 	.db #0x98	; 152
      000639 68                    1783 	.db #0x68	; 104	'h'
      00063A 68                    1784 	.db #0x68	; 104	'h'
      00063B 68                    1785 	.db #0x68	; 104	'h'
      00063C 68                    1786 	.db #0x68	; 104	'h'
      00063D 68                    1787 	.db #0x68	; 104	'h'
      00063E 68                    1788 	.db #0x68	; 104	'h'
      00063F 68                    1789 	.db #0x68	; 104	'h'
      000640                       1790 _color_6:
      000640 68                    1791 	.db #0x68	; 104	'h'
      000641 68                    1792 	.db #0x68	; 104	'h'
      000642 68                    1793 	.db #0x68	; 104	'h'
      000643 68                    1794 	.db #0x68	; 104	'h'
      000644 68                    1795 	.db #0x68	; 104	'h'
      000645 68                    1796 	.db #0x68	; 104	'h'
      000646 68                    1797 	.db #0x68	; 104	'h'
      000647 68                    1798 	.db #0x68	; 104	'h'
      000648                       1799 _color_7:
      000648 89                    1800 	.db #0x89	; 137
      000649 89                    1801 	.db #0x89	; 137
      00064A 89                    1802 	.db #0x89	; 137
      00064B 89                    1803 	.db #0x89	; 137
      00064C 89                    1804 	.db #0x89	; 137
      00064D 89                    1805 	.db #0x89	; 137
      00064E 89                    1806 	.db #0x89	; 137
      00064F 86                    1807 	.db #0x86	; 134
      000650                       1808 _color_8:
      000650 41                    1809 	.db #0x41	; 65	'A'
      000651 47                    1810 	.db #0x47	; 71	'G'
      000652 47                    1811 	.db #0x47	; 71	'G'
      000653 47                    1812 	.db #0x47	; 71	'G'
      000654 47                    1813 	.db #0x47	; 71	'G'
      000655 47                    1814 	.db #0x47	; 71	'G'
      000656 47                    1815 	.db #0x47	; 71	'G'
      000657 47                    1816 	.db #0x47	; 71	'G'
      000658                       1817 _color_9:
      000658 41                    1818 	.db #0x41	; 65	'A'
      000659 45                    1819 	.db #0x45	; 69	'E'
      00065A 47                    1820 	.db #0x47	; 71	'G'
      00065B 47                    1821 	.db #0x47	; 71	'G'
      00065C 45                    1822 	.db #0x45	; 69	'E'
      00065D 45                    1823 	.db #0x45	; 69	'E'
      00065E 41                    1824 	.db #0x41	; 65	'A'
      00065F 45                    1825 	.db #0x45	; 69	'E'
      000660                       1826 _color_10:
      000660 47                    1827 	.db #0x47	; 71	'G'
      000661 45                    1828 	.db #0x45	; 69	'E'
      000662 45                    1829 	.db #0x45	; 69	'E'
      000663 45                    1830 	.db #0x45	; 69	'E'
      000664 45                    1831 	.db #0x45	; 69	'E'
      000665 41                    1832 	.db #0x41	; 65	'A'
      000666 45                    1833 	.db #0x45	; 69	'E'
      000667 41                    1834 	.db #0x41	; 65	'A'
      000668                       1835 _color_11:
      000668 41                    1836 	.db #0x41	; 65	'A'
      000669 41                    1837 	.db #0x41	; 65	'A'
      00066A 41                    1838 	.db #0x41	; 65	'A'
      00066B 41                    1839 	.db #0x41	; 65	'A'
      00066C 41                    1840 	.db #0x41	; 65	'A'
      00066D 41                    1841 	.db #0x41	; 65	'A'
      00066E 41                    1842 	.db #0x41	; 65	'A'
      00066F 41                    1843 	.db #0x41	; 65	'A'
      000670                       1844 _color_12:
      000670 D1                    1845 	.db #0xd1	; 209
      000671 DF                    1846 	.db #0xdf	; 223
      000672 DF                    1847 	.db #0xdf	; 223
      000673 DF                    1848 	.db #0xdf	; 223
      000674 DF                    1849 	.db #0xdf	; 223
      000675 DF                    1850 	.db #0xdf	; 223
      000676 DF                    1851 	.db #0xdf	; 223
      000677 DF                    1852 	.db #0xdf	; 223
      000678                       1853 _color_13:
      000678 D1                    1854 	.db #0xd1	; 209
      000679 DF                    1855 	.db #0xdf	; 223
      00067A DF                    1856 	.db #0xdf	; 223
      00067B DF                    1857 	.db #0xdf	; 223
      00067C DF                    1858 	.db #0xdf	; 223
      00067D DF                    1859 	.db #0xdf	; 223
      00067E DF                    1860 	.db #0xdf	; 223
      00067F DF                    1861 	.db #0xdf	; 223
      000680                       1862 _color_14:
      000680 DF                    1863 	.db #0xdf	; 223
      000681 DF                    1864 	.db #0xdf	; 223
      000682 DF                    1865 	.db #0xdf	; 223
      000683 D1                    1866 	.db #0xd1	; 209
      000684 D1                    1867 	.db #0xd1	; 209
      000685 D1                    1868 	.db #0xd1	; 209
      000686 D1                    1869 	.db #0xd1	; 209
      000687 D1                    1870 	.db #0xd1	; 209
      000688                       1871 _color_15:
      000688 D1                    1872 	.db #0xd1	; 209
      000689 D1                    1873 	.db #0xd1	; 209
      00068A D1                    1874 	.db #0xd1	; 209
      00068B D1                    1875 	.db #0xd1	; 209
      00068C D1                    1876 	.db #0xd1	; 209
      00068D D1                    1877 	.db #0xd1	; 209
      00068E D1                    1878 	.db #0xd1	; 209
      00068F D1                    1879 	.db #0xd1	; 209
      000690                       1880 _color_16:
      000690 A1                    1881 	.db #0xa1	; 161
      000691 BF                    1882 	.db #0xbf	; 191
      000692 BF                    1883 	.db #0xbf	; 191
      000693 BF                    1884 	.db #0xbf	; 191
      000694 BF                    1885 	.db #0xbf	; 191
      000695 BF                    1886 	.db #0xbf	; 191
      000696 BF                    1887 	.db #0xbf	; 191
      000697 BF                    1888 	.db #0xbf	; 191
      000698                       1889 _color_17:
      000698 A1                    1890 	.db #0xa1	; 161
      000699 AF                    1891 	.db #0xaf	; 175
      00069A AF                    1892 	.db #0xaf	; 175
      00069B A1                    1893 	.db #0xa1	; 161
      00069C A1                    1894 	.db #0xa1	; 161
      00069D A1                    1895 	.db #0xa1	; 161
      00069E A1                    1896 	.db #0xa1	; 161
      00069F A1                    1897 	.db #0xa1	; 161
      0006A0                       1898 _color_18:
      0006A0 AF                    1899 	.db #0xaf	; 175
      0006A1 AF                    1900 	.db #0xaf	; 175
      0006A2 AF                    1901 	.db #0xaf	; 175
      0006A3 AF                    1902 	.db #0xaf	; 175
      0006A4 A1                    1903 	.db #0xa1	; 161
      0006A5 A1                    1904 	.db #0xa1	; 161
      0006A6 A1                    1905 	.db #0xa1	; 161
      0006A7 A1                    1906 	.db #0xa1	; 161
      0006A8                       1907 _color_19:
      0006A8 B1                    1908 	.db #0xb1	; 177
      0006A9 B1                    1909 	.db #0xb1	; 177
      0006AA B1                    1910 	.db #0xb1	; 177
      0006AB B1                    1911 	.db #0xb1	; 177
      0006AC B1                    1912 	.db #0xb1	; 177
      0006AD B1                    1913 	.db #0xb1	; 177
      0006AE B1                    1914 	.db #0xb1	; 177
      0006AF B1                    1915 	.db #0xb1	; 177
      0006B0                       1916 _color_column_1:
      0006B0 F1                    1917 	.db #0xf1	; 241
      0006B1 E1                    1918 	.db #0xe1	; 225
      0006B2 E1                    1919 	.db #0xe1	; 225
      0006B3 E1                    1920 	.db #0xe1	; 225
      0006B4 E1                    1921 	.db #0xe1	; 225
      0006B5 E1                    1922 	.db #0xe1	; 225
      0006B6 E1                    1923 	.db #0xe1	; 225
      0006B7 E1                    1924 	.db #0xe1	; 225
      0006B8                       1925 _color_column_2:
      0006B8 F1                    1926 	.db #0xf1	; 241
      0006B9 E1                    1927 	.db #0xe1	; 225
      0006BA E1                    1928 	.db #0xe1	; 225
      0006BB E1                    1929 	.db #0xe1	; 225
      0006BC E1                    1930 	.db #0xe1	; 225
      0006BD E1                    1931 	.db #0xe1	; 225
      0006BE E1                    1932 	.db #0xe1	; 225
      0006BF E1                    1933 	.db #0xe1	; 225
      0006C0                       1934 _color_column_3:
      0006C0 F1                    1935 	.db #0xf1	; 241
      0006C1 E1                    1936 	.db #0xe1	; 225
      0006C2 E1                    1937 	.db #0xe1	; 225
      0006C3 E1                    1938 	.db #0xe1	; 225
      0006C4 E1                    1939 	.db #0xe1	; 225
      0006C5 E1                    1940 	.db #0xe1	; 225
      0006C6 E1                    1941 	.db #0xe1	; 225
      0006C7 E1                    1942 	.db #0xe1	; 225
      0006C8                       1943 _color_column_4:
      0006C8 F1                    1944 	.db #0xf1	; 241
      0006C9 F1                    1945 	.db #0xf1	; 241
      0006CA F1                    1946 	.db #0xf1	; 241
      0006CB F1                    1947 	.db #0xf1	; 241
      0006CC F1                    1948 	.db #0xf1	; 241
      0006CD F1                    1949 	.db #0xf1	; 241
      0006CE F1                    1950 	.db #0xf1	; 241
      0006CF F1                    1951 	.db #0xf1	; 241
      0006D0                       1952 _color_column_5:
      0006D0 E1                    1953 	.db #0xe1	; 225
      0006D1 E1                    1954 	.db #0xe1	; 225
      0006D2 E1                    1955 	.db #0xe1	; 225
      0006D3 E1                    1956 	.db #0xe1	; 225
      0006D4 E1                    1957 	.db #0xe1	; 225
      0006D5 E1                    1958 	.db #0xe1	; 225
      0006D6 E1                    1959 	.db #0xe1	; 225
      0006D7 E1                    1960 	.db #0xe1	; 225
      0006D8                       1961 _color_column_6:
      0006D8 E1                    1962 	.db #0xe1	; 225
      0006D9 E1                    1963 	.db #0xe1	; 225
      0006DA E1                    1964 	.db #0xe1	; 225
      0006DB 41                    1965 	.db #0x41	; 65	'A'
      0006DC 41                    1966 	.db #0x41	; 65	'A'
      0006DD 41                    1967 	.db #0x41	; 65	'A'
      0006DE 41                    1968 	.db #0x41	; 65	'A'
      0006DF 41                    1969 	.db #0x41	; 65	'A'
      0006E0                       1970 _color_column_7:
      0006E0 F1                    1971 	.db #0xf1	; 241
      0006E1 F1                    1972 	.db #0xf1	; 241
      0006E2 F1                    1973 	.db #0xf1	; 241
      0006E3 F1                    1974 	.db #0xf1	; 241
      0006E4 F1                    1975 	.db #0xf1	; 241
      0006E5 F1                    1976 	.db #0xf1	; 241
      0006E6 F1                    1977 	.db #0xf1	; 241
      0006E7 F1                    1978 	.db #0xf1	; 241
      0006E8                       1979 _color_column_8:
      0006E8 E1                    1980 	.db #0xe1	; 225
      0006E9 E1                    1981 	.db #0xe1	; 225
      0006EA E1                    1982 	.db #0xe1	; 225
      0006EB F1                    1983 	.db #0xf1	; 241
      0006EC E1                    1984 	.db #0xe1	; 225
      0006ED E1                    1985 	.db #0xe1	; 225
      0006EE E1                    1986 	.db #0xe1	; 225
      0006EF E1                    1987 	.db #0xe1	; 225
      0006F0                       1988 _color_column_9:
      0006F0 41                    1989 	.db #0x41	; 65	'A'
      0006F1 41                    1990 	.db #0x41	; 65	'A'
      0006F2 41                    1991 	.db #0x41	; 65	'A'
      0006F3 F1                    1992 	.db #0xf1	; 241
      0006F4 41                    1993 	.db #0x41	; 65	'A'
      0006F5 41                    1994 	.db #0x41	; 65	'A'
      0006F6 41                    1995 	.db #0x41	; 65	'A'
      0006F7 41                    1996 	.db #0x41	; 65	'A'
      0006F8                       1997 _color_column_10:
      0006F8 F1                    1998 	.db #0xf1	; 241
      0006F9 F1                    1999 	.db #0xf1	; 241
      0006FA F1                    2000 	.db #0xf1	; 241
      0006FB F1                    2001 	.db #0xf1	; 241
      0006FC F1                    2002 	.db #0xf1	; 241
      0006FD F1                    2003 	.db #0xf1	; 241
      0006FE F1                    2004 	.db #0xf1	; 241
      0006FF F1                    2005 	.db #0xf1	; 241
      000700                       2006 _color_column_11:
      000700 E1                    2007 	.db #0xe1	; 225
      000701 E1                    2008 	.db #0xe1	; 225
      000702 E1                    2009 	.db #0xe1	; 225
      000703 E1                    2010 	.db #0xe1	; 225
      000704 E1                    2011 	.db #0xe1	; 225
      000705 E1                    2012 	.db #0xe1	; 225
      000706 E1                    2013 	.db #0xe1	; 225
      000707 E1                    2014 	.db #0xe1	; 225
      000708                       2015 _color_column_12:
      000708 41                    2016 	.db #0x41	; 65	'A'
      000709 41                    2017 	.db #0x41	; 65	'A'
      00070A 41                    2018 	.db #0x41	; 65	'A'
      00070B 41                    2019 	.db #0x41	; 65	'A'
      00070C 41                    2020 	.db #0x41	; 65	'A'
      00070D 41                    2021 	.db #0x41	; 65	'A'
      00070E 41                    2022 	.db #0x41	; 65	'A'
      00070F 41                    2023 	.db #0x41	; 65	'A'
      000710                       2024 _color_column_16:
      000710 F1                    2025 	.db #0xf1	; 241
      000711 F1                    2026 	.db #0xf1	; 241
      000712 F1                    2027 	.db #0xf1	; 241
      000713 F1                    2028 	.db #0xf1	; 241
      000714 F1                    2029 	.db #0xf1	; 241
      000715 F1                    2030 	.db #0xf1	; 241
      000716 F1                    2031 	.db #0xf1	; 241
      000717 F1                    2032 	.db #0xf1	; 241
      000718                       2033 _color_column_17:
      000718 E1                    2034 	.db #0xe1	; 225
      000719 E1                    2035 	.db #0xe1	; 225
      00071A E1                    2036 	.db #0xe1	; 225
      00071B E1                    2037 	.db #0xe1	; 225
      00071C E1                    2038 	.db #0xe1	; 225
      00071D E1                    2039 	.db #0xe1	; 225
      00071E E1                    2040 	.db #0xe1	; 225
      00071F E1                    2041 	.db #0xe1	; 225
      000720                       2042 _color_column_18:
      000720 41                    2043 	.db #0x41	; 65	'A'
      000721 41                    2044 	.db #0x41	; 65	'A'
      000722 41                    2045 	.db #0x41	; 65	'A'
      000723 41                    2046 	.db #0x41	; 65	'A'
      000724 41                    2047 	.db #0x41	; 65	'A'
      000725 E1                    2048 	.db #0xe1	; 225
      000726 E1                    2049 	.db #0xe1	; 225
      000727 E1                    2050 	.db #0xe1	; 225
      000728                       2051 _color_column_13:
      000728 E1                    2052 	.db #0xe1	; 225
      000729 E1                    2053 	.db #0xe1	; 225
      00072A E1                    2054 	.db #0xe1	; 225
      00072B E1                    2055 	.db #0xe1	; 225
      00072C E1                    2056 	.db #0xe1	; 225
      00072D E1                    2057 	.db #0xe1	; 225
      00072E E1                    2058 	.db #0xe1	; 225
      00072F F1                    2059 	.db #0xf1	; 241
      000730                       2060 _color_column_14:
      000730 E1                    2061 	.db #0xe1	; 225
      000731 E1                    2062 	.db #0xe1	; 225
      000732 E1                    2063 	.db #0xe1	; 225
      000733 E1                    2064 	.db #0xe1	; 225
      000734 E1                    2065 	.db #0xe1	; 225
      000735 E1                    2066 	.db #0xe1	; 225
      000736 E1                    2067 	.db #0xe1	; 225
      000737 F1                    2068 	.db #0xf1	; 241
      000738                       2069 _color_column_15:
      000738 E1                    2070 	.db #0xe1	; 225
      000739 E1                    2071 	.db #0xe1	; 225
      00073A E1                    2072 	.db #0xe1	; 225
      00073B E1                    2073 	.db #0xe1	; 225
      00073C E1                    2074 	.db #0xe1	; 225
      00073D E1                    2075 	.db #0xe1	; 225
      00073E E1                    2076 	.db #0xe1	; 225
      00073F F1                    2077 	.db #0xf1	; 241
      000740                       2078 _color_dust_0:
      000740 F1                    2079 	.db #0xf1	; 241
      000741 F1                    2080 	.db #0xf1	; 241
      000742 F1                    2081 	.db #0xf1	; 241
      000743 F1                    2082 	.db #0xf1	; 241
      000744 F1                    2083 	.db #0xf1	; 241
      000745 F1                    2084 	.db #0xf1	; 241
      000746 F1                    2085 	.db #0xf1	; 241
      000747 F1                    2086 	.db #0xf1	; 241
      000748                       2087 _color_dust_1:
      000748 F1                    2088 	.db #0xf1	; 241
      000749 F1                    2089 	.db #0xf1	; 241
      00074A F1                    2090 	.db #0xf1	; 241
      00074B F1                    2091 	.db #0xf1	; 241
      00074C F1                    2092 	.db #0xf1	; 241
      00074D F1                    2093 	.db #0xf1	; 241
      00074E F1                    2094 	.db #0xf1	; 241
      00074F F1                    2095 	.db #0xf1	; 241
      000750                       2096 _color_dust_2:
      000750 F1                    2097 	.db #0xf1	; 241
      000751 F1                    2098 	.db #0xf1	; 241
      000752 F1                    2099 	.db #0xf1	; 241
      000753 F1                    2100 	.db #0xf1	; 241
      000754 F1                    2101 	.db #0xf1	; 241
      000755 F1                    2102 	.db #0xf1	; 241
      000756 F1                    2103 	.db #0xf1	; 241
      000757 F1                    2104 	.db #0xf1	; 241
      000758                       2105 _color_dust_3:
      000758 F1                    2106 	.db #0xf1	; 241
      000759 F1                    2107 	.db #0xf1	; 241
      00075A F1                    2108 	.db #0xf1	; 241
      00075B F1                    2109 	.db #0xf1	; 241
      00075C F1                    2110 	.db #0xf1	; 241
      00075D F1                    2111 	.db #0xf1	; 241
      00075E F1                    2112 	.db #0xf1	; 241
      00075F F1                    2113 	.db #0xf1	; 241
      000760                       2114 _color_font_1:
      000760 F1                    2115 	.db #0xf1	; 241
      000761 F1                    2116 	.db #0xf1	; 241
      000762 E1                    2117 	.db #0xe1	; 225
      000763 71                    2118 	.db #0x71	; 113	'q'
      000764 71                    2119 	.db #0x71	; 113	'q'
      000765 51                    2120 	.db #0x51	; 81	'Q'
      000766 51                    2121 	.db #0x51	; 81	'Q'
      000767 41                    2122 	.db #0x41	; 65	'A'
      000768                       2123 _color_font_2:
      000768 61                    2124 	.db #0x61	; 97	'a'
      000769 61                    2125 	.db #0x61	; 97	'a'
      00076A 81                    2126 	.db #0x81	; 129
      00076B 81                    2127 	.db #0x81	; 129
      00076C 91                    2128 	.db #0x91	; 145
      00076D 91                    2129 	.db #0x91	; 145
      00076E E1                    2130 	.db #0xe1	; 225
      00076F E1                    2131 	.db #0xe1	; 225
      000770                       2132 _color_title_1:
      000770 A1                    2133 	.db #0xa1	; 161
      000771 A1                    2134 	.db #0xa1	; 161
      000772 A1                    2135 	.db #0xa1	; 161
      000773 A1                    2136 	.db #0xa1	; 161
      000774 A1                    2137 	.db #0xa1	; 161
      000775 A1                    2138 	.db #0xa1	; 161
      000776 A1                    2139 	.db #0xa1	; 161
      000777 A1                    2140 	.db #0xa1	; 161
      000778                       2141 _color_title_2:
      000778 B1                    2142 	.db #0xb1	; 177
      000779 B1                    2143 	.db #0xb1	; 177
      00077A B1                    2144 	.db #0xb1	; 177
      00077B B1                    2145 	.db #0xb1	; 177
      00077C B1                    2146 	.db #0xb1	; 177
      00077D B1                    2147 	.db #0xb1	; 177
      00077E B1                    2148 	.db #0xb1	; 177
      00077F B1                    2149 	.db #0xb1	; 177
      000780                       2150 _color_title_3:
      000780 D1                    2151 	.db #0xd1	; 209
      000781 D1                    2152 	.db #0xd1	; 209
      000782 D1                    2153 	.db #0xd1	; 209
      000783 D1                    2154 	.db #0xd1	; 209
      000784 D1                    2155 	.db #0xd1	; 209
      000785 D1                    2156 	.db #0xd1	; 209
      000786 D1                    2157 	.db #0xd1	; 209
      000787 D1                    2158 	.db #0xd1	; 209
      000788                       2159 _color_title_4:
      000788 F1                    2160 	.db #0xf1	; 241
      000789 F1                    2161 	.db #0xf1	; 241
      00078A F1                    2162 	.db #0xf1	; 241
      00078B F1                    2163 	.db #0xf1	; 241
      00078C F1                    2164 	.db #0xf1	; 241
      00078D F1                    2165 	.db #0xf1	; 241
      00078E F1                    2166 	.db #0xf1	; 241
      00078F F1                    2167 	.db #0xf1	; 241
      000790                       2168 _color_title_5:
      000790 71                    2169 	.db #0x71	; 113	'q'
      000791 71                    2170 	.db #0x71	; 113	'q'
      000792 71                    2171 	.db #0x71	; 113	'q'
      000793 71                    2172 	.db #0x71	; 113	'q'
      000794 71                    2173 	.db #0x71	; 113	'q'
      000795 71                    2174 	.db #0x71	; 113	'q'
      000796 71                    2175 	.db #0x71	; 113	'q'
      000797 71                    2176 	.db #0x71	; 113	'q'
      000798                       2177 _color_title_6:
      000798 51                    2178 	.db #0x51	; 81	'Q'
      000799 51                    2179 	.db #0x51	; 81	'Q'
      00079A 51                    2180 	.db #0x51	; 81	'Q'
      00079B 51                    2181 	.db #0x51	; 81	'Q'
      00079C 51                    2182 	.db #0x51	; 81	'Q'
      00079D 51                    2183 	.db #0x51	; 81	'Q'
      00079E 51                    2184 	.db #0x51	; 81	'Q'
      00079F 51                    2185 	.db #0x51	; 81	'Q'
      0007A0                       2186 _color_title_7:
      0007A0 41                    2187 	.db #0x41	; 65	'A'
      0007A1 41                    2188 	.db #0x41	; 65	'A'
      0007A2 41                    2189 	.db #0x41	; 65	'A'
      0007A3 41                    2190 	.db #0x41	; 65	'A'
      0007A4 41                    2191 	.db #0x41	; 65	'A'
      0007A5 41                    2192 	.db #0x41	; 65	'A'
      0007A6 41                    2193 	.db #0x41	; 65	'A'
      0007A7 41                    2194 	.db #0x41	; 65	'A'
      0007A8                       2195 _sprite_arrow_0:
      0007A8 00                    2196 	.db #0x00	; 0
      0007A9 00                    2197 	.db #0x00	; 0
      0007AA 00                    2198 	.db #0x00	; 0
      0007AB 00                    2199 	.db #0x00	; 0
      0007AC 00                    2200 	.db #0x00	; 0
      0007AD 00                    2201 	.db #0x00	; 0
      0007AE 00                    2202 	.db #0x00	; 0
      0007AF 00                    2203 	.db #0x00	; 0
      0007B0                       2204 _sprite_arrow_1:
      0007B0 FF                    2205 	.db #0xff	; 255
      0007B1 00                    2206 	.db #0x00	; 0
      0007B2 3F                    2207 	.db #0x3f	; 63
      0007B3 00                    2208 	.db #0x00	; 0
      0007B4 0F                    2209 	.db #0x0f	; 15
      0007B5 00                    2210 	.db #0x00	; 0
      0007B6 03                    2211 	.db #0x03	; 3
      0007B7 00                    2212 	.db #0x00	; 0
      0007B8                       2213 _sprite_arrow_2:
      0007B8 00                    2214 	.db #0x00	; 0
      0007B9 00                    2215 	.db #0x00	; 0
      0007BA 00                    2216 	.db #0x00	; 0
      0007BB 00                    2217 	.db #0x00	; 0
      0007BC 00                    2218 	.db #0x00	; 0
      0007BD 00                    2219 	.db #0x00	; 0
      0007BE 00                    2220 	.db #0x00	; 0
      0007BF 00                    2221 	.db #0x00	; 0
      0007C0                       2222 _sprite_arrow_3:
      0007C0 FF                    2223 	.db #0xff	; 255
      0007C1 00                    2224 	.db #0x00	; 0
      0007C2 FC                    2225 	.db #0xfc	; 252
      0007C3 00                    2226 	.db #0x00	; 0
      0007C4 F0                    2227 	.db #0xf0	; 240
      0007C5 00                    2228 	.db #0x00	; 0
      0007C6 C0                    2229 	.db #0xc0	; 192
      0007C7 00                    2230 	.db #0x00	; 0
      0007C8                       2231 _sprite_hit_1:
      0007C8 00                    2232 	.db #0x00	; 0
      0007C9 77                    2233 	.db #0x77	; 119	'w'
      0007CA 22                    2234 	.db #0x22	; 34
      0007CB 22                    2235 	.db #0x22	; 34
      0007CC 22                    2236 	.db #0x22	; 34
      0007CD 3E                    2237 	.db #0x3e	; 62
      0007CE 22                    2238 	.db #0x22	; 34
      0007CF 22                    2239 	.db #0x22	; 34
      0007D0 22                    2240 	.db #0x22	; 34
      0007D1 77                    2241 	.db #0x77	; 119	'w'
      0007D2 00                    2242 	.db #0x00	; 0
      0007D3 00                    2243 	.db #0x00	; 0
      0007D4 00                    2244 	.db #0x00	; 0
      0007D5 00                    2245 	.db #0x00	; 0
      0007D6 00                    2246 	.db #0x00	; 0
      0007D7 00                    2247 	.db #0x00	; 0
      0007D8 00                    2248 	.db #0x00	; 0
      0007D9 77                    2249 	.db #0x77	; 119	'w'
      0007DA 25                    2250 	.db #0x25	; 37
      0007DB 21                    2251 	.db #0x21	; 33
      0007DC 21                    2252 	.db #0x21	; 33
      0007DD 21                    2253 	.db #0x21	; 33
      0007DE 21                    2254 	.db #0x21	; 33
      0007DF 21                    2255 	.db #0x21	; 33
      0007E0 21                    2256 	.db #0x21	; 33
      0007E1 73                    2257 	.db #0x73	; 115	's'
      0007E2 00                    2258 	.db #0x00	; 0
      0007E3 00                    2259 	.db #0x00	; 0
      0007E4 00                    2260 	.db #0x00	; 0
      0007E5 00                    2261 	.db #0x00	; 0
      0007E6 00                    2262 	.db #0x00	; 0
      0007E7 00                    2263 	.db #0x00	; 0
      0007E8                       2264 _sprite_hit_2:
      0007E8 00                    2265 	.db #0x00	; 0
      0007E9 C0                    2266 	.db #0xc0	; 192
      0007EA 40                    2267 	.db #0x40	; 64
      0007EB 00                    2268 	.db #0x00	; 0
      0007EC 00                    2269 	.db #0x00	; 0
      0007ED 00                    2270 	.db #0x00	; 0
      0007EE 00                    2271 	.db #0x00	; 0
      0007EF 00                    2272 	.db #0x00	; 0
      0007F0 00                    2273 	.db #0x00	; 0
      0007F1 80                    2274 	.db #0x80	; 128
      0007F2 00                    2275 	.db #0x00	; 0
      0007F3 00                    2276 	.db #0x00	; 0
      0007F4 00                    2277 	.db #0x00	; 0
      0007F5 00                    2278 	.db #0x00	; 0
      0007F6 00                    2279 	.db #0x00	; 0
      0007F7 00                    2280 	.db #0x00	; 0
      0007F8 00                    2281 	.db #0x00	; 0
      0007F9 00                    2282 	.db #0x00	; 0
      0007FA 00                    2283 	.db #0x00	; 0
      0007FB 00                    2284 	.db #0x00	; 0
      0007FC 00                    2285 	.db #0x00	; 0
      0007FD 00                    2286 	.db #0x00	; 0
      0007FE 00                    2287 	.db #0x00	; 0
      0007FF 00                    2288 	.db #0x00	; 0
      000800 00                    2289 	.db #0x00	; 0
      000801 00                    2290 	.db #0x00	; 0
      000802 00                    2291 	.db #0x00	; 0
      000803 00                    2292 	.db #0x00	; 0
      000804 00                    2293 	.db #0x00	; 0
      000805 00                    2294 	.db #0x00	; 0
      000806 00                    2295 	.db #0x00	; 0
      000807 00                    2296 	.db #0x00	; 0
      000808                       2297 _sprite_combo_1:
      000808 00                    2298 	.db #0x00	; 0
      000809 38                    2299 	.db #0x38	; 56	'8'
      00080A 65                    2300 	.db #0x65	; 101	'e'
      00080B 61                    2301 	.db #0x61	; 97	'a'
      00080C 61                    2302 	.db #0x61	; 97	'a'
      00080D 61                    2303 	.db #0x61	; 97	'a'
      00080E 61                    2304 	.db #0x61	; 97	'a'
      00080F 61                    2305 	.db #0x61	; 97	'a'
      000810 65                    2306 	.db #0x65	; 101	'e'
      000811 38                    2307 	.db #0x38	; 56	'8'
      000812 00                    2308 	.db #0x00	; 0
      000813 00                    2309 	.db #0x00	; 0
      000814 00                    2310 	.db #0x00	; 0
      000815 00                    2311 	.db #0x00	; 0
      000816 00                    2312 	.db #0x00	; 0
      000817 00                    2313 	.db #0x00	; 0
      000818 00                    2314 	.db #0x00	; 0
      000819 E6                    2315 	.db #0xe6	; 230
      00081A 13                    2316 	.db #0x13	; 19
      00081B 12                    2317 	.db #0x12	; 18
      00081C 12                    2318 	.db #0x12	; 18
      00081D 12                    2319 	.db #0x12	; 18
      00081E 12                    2320 	.db #0x12	; 18
      00081F 12                    2321 	.db #0x12	; 18
      000820 12                    2322 	.db #0x12	; 18
      000821 E7                    2323 	.db #0xe7	; 231
      000822 00                    2324 	.db #0x00	; 0
      000823 00                    2325 	.db #0x00	; 0
      000824 00                    2326 	.db #0x00	; 0
      000825 00                    2327 	.db #0x00	; 0
      000826 00                    2328 	.db #0x00	; 0
      000827 00                    2329 	.db #0x00	; 0
      000828                       2330 _sprite_combo_2:
      000828 00                    2331 	.db #0x00	; 0
      000829 37                    2332 	.db #0x37	; 55	'7'
      00082A 62                    2333 	.db #0x62	; 98	'b'
      00082B A2                    2334 	.db #0xa2	; 162
      00082C 22                    2335 	.db #0x22	; 34
      00082D 23                    2336 	.db #0x23	; 35
      00082E 22                    2337 	.db #0x22	; 34
      00082F 22                    2338 	.db #0x22	; 34
      000830 22                    2339 	.db #0x22	; 34
      000831 77                    2340 	.db #0x77	; 119	'w'
      000832 00                    2341 	.db #0x00	; 0
      000833 00                    2342 	.db #0x00	; 0
      000834 00                    2343 	.db #0x00	; 0
      000835 00                    2344 	.db #0x00	; 0
      000836 00                    2345 	.db #0x00	; 0
      000837 00                    2346 	.db #0x00	; 0
      000838 00                    2347 	.db #0x00	; 0
      000839 8E                    2348 	.db #0x8e	; 142
      00083A 51                    2349 	.db #0x51	; 81	'Q'
      00083B 51                    2350 	.db #0x51	; 81	'Q'
      00083C 51                    2351 	.db #0x51	; 81	'Q'
      00083D 91                    2352 	.db #0x91	; 145
      00083E 51                    2353 	.db #0x51	; 81	'Q'
      00083F 51                    2354 	.db #0x51	; 81	'Q'
      000840 51                    2355 	.db #0x51	; 81	'Q'
      000841 8E                    2356 	.db #0x8e	; 142
      000842 00                    2357 	.db #0x00	; 0
      000843 00                    2358 	.db #0x00	; 0
      000844 00                    2359 	.db #0x00	; 0
      000845 00                    2360 	.db #0x00	; 0
      000846 00                    2361 	.db #0x00	; 0
      000847 00                    2362 	.db #0x00	; 0
      000848                       2363 _sprite_2x:
      000848 00                    2364 	.db #0x00	; 0
      000849 3E                    2365 	.db #0x3e	; 62
      00084A 63                    2366 	.db #0x63	; 99	'c'
      00084B 03                    2367 	.db #0x03	; 3
      00084C 03                    2368 	.db #0x03	; 3
      00084D 1E                    2369 	.db #0x1e	; 30
      00084E 30                    2370 	.db #0x30	; 48	'0'
      00084F 60                    2371 	.db #0x60	; 96
      000850 60                    2372 	.db #0x60	; 96
      000851 7F                    2373 	.db #0x7f	; 127
      000852 00                    2374 	.db #0x00	; 0
      000853 00                    2375 	.db #0x00	; 0
      000854 00                    2376 	.db #0x00	; 0
      000855 00                    2377 	.db #0x00	; 0
      000856 00                    2378 	.db #0x00	; 0
      000857 00                    2379 	.db #0x00	; 0
      000858 00                    2380 	.db #0x00	; 0
      000859 00                    2381 	.db #0x00	; 0
      00085A 00                    2382 	.db #0x00	; 0
      00085B 63                    2383 	.db #0x63	; 99	'c'
      00085C 36                    2384 	.db #0x36	; 54	'6'
      00085D 1C                    2385 	.db #0x1c	; 28
      00085E 08                    2386 	.db #0x08	; 8
      00085F 1C                    2387 	.db #0x1c	; 28
      000860 36                    2388 	.db #0x36	; 54	'6'
      000861 63                    2389 	.db #0x63	; 99	'c'
      000862 00                    2390 	.db #0x00	; 0
      000863 00                    2391 	.db #0x00	; 0
      000864 00                    2392 	.db #0x00	; 0
      000865 00                    2393 	.db #0x00	; 0
      000866 00                    2394 	.db #0x00	; 0
      000867 00                    2395 	.db #0x00	; 0
      000868                       2396 _sprite_3x:
      000868 00                    2397 	.db #0x00	; 0
      000869 3E                    2398 	.db #0x3e	; 62
      00086A 63                    2399 	.db #0x63	; 99	'c'
      00086B 03                    2400 	.db #0x03	; 3
      00086C 03                    2401 	.db #0x03	; 3
      00086D 1E                    2402 	.db #0x1e	; 30
      00086E 03                    2403 	.db #0x03	; 3
      00086F 03                    2404 	.db #0x03	; 3
      000870 63                    2405 	.db #0x63	; 99	'c'
      000871 3E                    2406 	.db #0x3e	; 62
      000872 00                    2407 	.db #0x00	; 0
      000873 00                    2408 	.db #0x00	; 0
      000874 00                    2409 	.db #0x00	; 0
      000875 00                    2410 	.db #0x00	; 0
      000876 00                    2411 	.db #0x00	; 0
      000877 00                    2412 	.db #0x00	; 0
      000878 00                    2413 	.db #0x00	; 0
      000879 00                    2414 	.db #0x00	; 0
      00087A 00                    2415 	.db #0x00	; 0
      00087B 63                    2416 	.db #0x63	; 99	'c'
      00087C 36                    2417 	.db #0x36	; 54	'6'
      00087D 1C                    2418 	.db #0x1c	; 28
      00087E 08                    2419 	.db #0x08	; 8
      00087F 1C                    2420 	.db #0x1c	; 28
      000880 36                    2421 	.db #0x36	; 54	'6'
      000881 63                    2422 	.db #0x63	; 99	'c'
      000882 00                    2423 	.db #0x00	; 0
      000883 00                    2424 	.db #0x00	; 0
      000884 00                    2425 	.db #0x00	; 0
      000885 00                    2426 	.db #0x00	; 0
      000886 00                    2427 	.db #0x00	; 0
      000887 00                    2428 	.db #0x00	; 0
      000888                       2429 _sprite_4x:
      000888 00                    2430 	.db #0x00	; 0
      000889 02                    2431 	.db #0x02	; 2
      00088A 06                    2432 	.db #0x06	; 6
      00088B 0E                    2433 	.db #0x0e	; 14
      00088C 16                    2434 	.db #0x16	; 22
      00088D 26                    2435 	.db #0x26	; 38
      00088E 7F                    2436 	.db #0x7f	; 127
      00088F 06                    2437 	.db #0x06	; 6
      000890 06                    2438 	.db #0x06	; 6
      000891 0F                    2439 	.db #0x0f	; 15
      000892 00                    2440 	.db #0x00	; 0
      000893 00                    2441 	.db #0x00	; 0
      000894 00                    2442 	.db #0x00	; 0
      000895 00                    2443 	.db #0x00	; 0
      000896 00                    2444 	.db #0x00	; 0
      000897 00                    2445 	.db #0x00	; 0
      000898 00                    2446 	.db #0x00	; 0
      000899 00                    2447 	.db #0x00	; 0
      00089A 00                    2448 	.db #0x00	; 0
      00089B 63                    2449 	.db #0x63	; 99	'c'
      00089C 36                    2450 	.db #0x36	; 54	'6'
      00089D 1C                    2451 	.db #0x1c	; 28
      00089E 08                    2452 	.db #0x08	; 8
      00089F 1C                    2453 	.db #0x1c	; 28
      0008A0 36                    2454 	.db #0x36	; 54	'6'
      0008A1 63                    2455 	.db #0x63	; 99	'c'
      0008A2 00                    2456 	.db #0x00	; 0
      0008A3 00                    2457 	.db #0x00	; 0
      0008A4 00                    2458 	.db #0x00	; 0
      0008A5 00                    2459 	.db #0x00	; 0
      0008A6 00                    2460 	.db #0x00	; 0
      0008A7 00                    2461 	.db #0x00	; 0
      0008A8                       2462 _sprite_5x:
      0008A8 00                    2463 	.db #0x00	; 0
      0008A9 7E                    2464 	.db #0x7e	; 126
      0008AA 60                    2465 	.db #0x60	; 96
      0008AB 60                    2466 	.db #0x60	; 96
      0008AC 7E                    2467 	.db #0x7e	; 126
      0008AD 03                    2468 	.db #0x03	; 3
      0008AE 03                    2469 	.db #0x03	; 3
      0008AF 03                    2470 	.db #0x03	; 3
      0008B0 63                    2471 	.db #0x63	; 99	'c'
      0008B1 3E                    2472 	.db #0x3e	; 62
      0008B2 00                    2473 	.db #0x00	; 0
      0008B3 00                    2474 	.db #0x00	; 0
      0008B4 00                    2475 	.db #0x00	; 0
      0008B5 00                    2476 	.db #0x00	; 0
      0008B6 00                    2477 	.db #0x00	; 0
      0008B7 00                    2478 	.db #0x00	; 0
      0008B8 00                    2479 	.db #0x00	; 0
      0008B9 00                    2480 	.db #0x00	; 0
      0008BA 00                    2481 	.db #0x00	; 0
      0008BB 63                    2482 	.db #0x63	; 99	'c'
      0008BC 36                    2483 	.db #0x36	; 54	'6'
      0008BD 1C                    2484 	.db #0x1c	; 28
      0008BE 08                    2485 	.db #0x08	; 8
      0008BF 1C                    2486 	.db #0x1c	; 28
      0008C0 36                    2487 	.db #0x36	; 54	'6'
      0008C1 63                    2488 	.db #0x63	; 99	'c'
      0008C2 00                    2489 	.db #0x00	; 0
      0008C3 00                    2490 	.db #0x00	; 0
      0008C4 00                    2491 	.db #0x00	; 0
      0008C5 00                    2492 	.db #0x00	; 0
      0008C6 00                    2493 	.db #0x00	; 0
      0008C7 00                    2494 	.db #0x00	; 0
      0008C8                       2495 _sprite_6x:
      0008C8 00                    2496 	.db #0x00	; 0
      0008C9 3E                    2497 	.db #0x3e	; 62
      0008CA 61                    2498 	.db #0x61	; 97	'a'
      0008CB 60                    2499 	.db #0x60	; 96
      0008CC 7E                    2500 	.db #0x7e	; 126
      0008CD 63                    2501 	.db #0x63	; 99	'c'
      0008CE 63                    2502 	.db #0x63	; 99	'c'
      0008CF 63                    2503 	.db #0x63	; 99	'c'
      0008D0 63                    2504 	.db #0x63	; 99	'c'
      0008D1 3E                    2505 	.db #0x3e	; 62
      0008D2 00                    2506 	.db #0x00	; 0
      0008D3 00                    2507 	.db #0x00	; 0
      0008D4 00                    2508 	.db #0x00	; 0
      0008D5 00                    2509 	.db #0x00	; 0
      0008D6 00                    2510 	.db #0x00	; 0
      0008D7 00                    2511 	.db #0x00	; 0
      0008D8 00                    2512 	.db #0x00	; 0
      0008D9 00                    2513 	.db #0x00	; 0
      0008DA 00                    2514 	.db #0x00	; 0
      0008DB 63                    2515 	.db #0x63	; 99	'c'
      0008DC 36                    2516 	.db #0x36	; 54	'6'
      0008DD 1C                    2517 	.db #0x1c	; 28
      0008DE 08                    2518 	.db #0x08	; 8
      0008DF 1C                    2519 	.db #0x1c	; 28
      0008E0 36                    2520 	.db #0x36	; 54	'6'
      0008E1 63                    2521 	.db #0x63	; 99	'c'
      0008E2 00                    2522 	.db #0x00	; 0
      0008E3 00                    2523 	.db #0x00	; 0
      0008E4 00                    2524 	.db #0x00	; 0
      0008E5 00                    2525 	.db #0x00	; 0
      0008E6 00                    2526 	.db #0x00	; 0
      0008E7 00                    2527 	.db #0x00	; 0
      0008E8                       2528 _sprite_mega_hit:
      0008E8 04                    2529 	.db #0x04	; 4
      0008E9 06                    2530 	.db #0x06	; 6
      0008EA 05                    2531 	.db #0x05	; 5
      0008EB 04                    2532 	.db #0x04	; 4
      0008EC 04                    2533 	.db #0x04	; 4
      0008ED 00                    2534 	.db #0x00	; 0
      0008EE 03                    2535 	.db #0x03	; 3
      0008EF 04                    2536 	.db #0x04	; 4
      0008F0 05                    2537 	.db #0x05	; 5
      0008F1 04                    2538 	.db #0x04	; 4
      0008F2 03                    2539 	.db #0x03	; 3
      0008F3 00                    2540 	.db #0x00	; 0
      0008F4 00                    2541 	.db #0x00	; 0
      0008F5 00                    2542 	.db #0x00	; 0
      0008F6 00                    2543 	.db #0x00	; 0
      0008F7 00                    2544 	.db #0x00	; 0
      0008F8 5C                    2545 	.db #0x5c	; 92
      0008F9 D0                    2546 	.db #0xd0	; 208
      0008FA 5C                    2547 	.db #0x5c	; 92
      0008FB 50                    2548 	.db #0x50	; 80	'P'
      0008FC 5C                    2549 	.db #0x5c	; 92
      0008FD 00                    2550 	.db #0x00	; 0
      0008FE 98                    2551 	.db #0x98	; 152
      0008FF 24                    2552 	.db #0x24	; 36
      000900 A4                    2553 	.db #0xa4	; 164
      000901 BC                    2554 	.db #0xbc	; 188
      000902 A4                    2555 	.db #0xa4	; 164
      000903 00                    2556 	.db #0x00	; 0
      000904 00                    2557 	.db #0x00	; 0
      000905 00                    2558 	.db #0x00	; 0
      000906 00                    2559 	.db #0x00	; 0
      000907 00                    2560 	.db #0x00	; 0
      000908                       2561 _sprite_explosion_0:
      000908 00                    2562 	.db #0x00	; 0
      000909 00                    2563 	.db #0x00	; 0
      00090A 00                    2564 	.db #0x00	; 0
      00090B 00                    2565 	.db #0x00	; 0
      00090C 00                    2566 	.db #0x00	; 0
      00090D 00                    2567 	.db #0x00	; 0
      00090E 01                    2568 	.db #0x01	; 1
      00090F 02                    2569 	.db #0x02	; 2
      000910 01                    2570 	.db #0x01	; 1
      000911 00                    2571 	.db #0x00	; 0
      000912 00                    2572 	.db #0x00	; 0
      000913 00                    2573 	.db #0x00	; 0
      000914 00                    2574 	.db #0x00	; 0
      000915 00                    2575 	.db #0x00	; 0
      000916 00                    2576 	.db #0x00	; 0
      000917 00                    2577 	.db #0x00	; 0
      000918 00                    2578 	.db #0x00	; 0
      000919 00                    2579 	.db #0x00	; 0
      00091A 00                    2580 	.db #0x00	; 0
      00091B 00                    2581 	.db #0x00	; 0
      00091C 00                    2582 	.db #0x00	; 0
      00091D 00                    2583 	.db #0x00	; 0
      00091E 00                    2584 	.db #0x00	; 0
      00091F 80                    2585 	.db #0x80	; 128
      000920 00                    2586 	.db #0x00	; 0
      000921 00                    2587 	.db #0x00	; 0
      000922 00                    2588 	.db #0x00	; 0
      000923 00                    2589 	.db #0x00	; 0
      000924 00                    2590 	.db #0x00	; 0
      000925 00                    2591 	.db #0x00	; 0
      000926 00                    2592 	.db #0x00	; 0
      000927 00                    2593 	.db #0x00	; 0
      000928                       2594 _sprite_explosion_1:
      000928 00                    2595 	.db #0x00	; 0
      000929 00                    2596 	.db #0x00	; 0
      00092A 00                    2597 	.db #0x00	; 0
      00092B 00                    2598 	.db #0x00	; 0
      00092C 00                    2599 	.db #0x00	; 0
      00092D 01                    2600 	.db #0x01	; 1
      00092E 00                    2601 	.db #0x00	; 0
      00092F 04                    2602 	.db #0x04	; 4
      000930 00                    2603 	.db #0x00	; 0
      000931 01                    2604 	.db #0x01	; 1
      000932 00                    2605 	.db #0x00	; 0
      000933 00                    2606 	.db #0x00	; 0
      000934 00                    2607 	.db #0x00	; 0
      000935 00                    2608 	.db #0x00	; 0
      000936 00                    2609 	.db #0x00	; 0
      000937 00                    2610 	.db #0x00	; 0
      000938 00                    2611 	.db #0x00	; 0
      000939 00                    2612 	.db #0x00	; 0
      00093A 00                    2613 	.db #0x00	; 0
      00093B 00                    2614 	.db #0x00	; 0
      00093C 00                    2615 	.db #0x00	; 0
      00093D 00                    2616 	.db #0x00	; 0
      00093E 00                    2617 	.db #0x00	; 0
      00093F 40                    2618 	.db #0x40	; 64
      000940 00                    2619 	.db #0x00	; 0
      000941 00                    2620 	.db #0x00	; 0
      000942 00                    2621 	.db #0x00	; 0
      000943 00                    2622 	.db #0x00	; 0
      000944 00                    2623 	.db #0x00	; 0
      000945 00                    2624 	.db #0x00	; 0
      000946 00                    2625 	.db #0x00	; 0
      000947 00                    2626 	.db #0x00	; 0
      000948                       2627 _sprite_explosion_2:
      000948 00                    2628 	.db #0x00	; 0
      000949 00                    2629 	.db #0x00	; 0
      00094A 00                    2630 	.db #0x00	; 0
      00094B 00                    2631 	.db #0x00	; 0
      00094C 01                    2632 	.db #0x01	; 1
      00094D 04                    2633 	.db #0x04	; 4
      00094E 00                    2634 	.db #0x00	; 0
      00094F 08                    2635 	.db #0x08	; 8
      000950 00                    2636 	.db #0x00	; 0
      000951 04                    2637 	.db #0x04	; 4
      000952 01                    2638 	.db #0x01	; 1
      000953 00                    2639 	.db #0x00	; 0
      000954 00                    2640 	.db #0x00	; 0
      000955 00                    2641 	.db #0x00	; 0
      000956 00                    2642 	.db #0x00	; 0
      000957 00                    2643 	.db #0x00	; 0
      000958 00                    2644 	.db #0x00	; 0
      000959 00                    2645 	.db #0x00	; 0
      00095A 00                    2646 	.db #0x00	; 0
      00095B 00                    2647 	.db #0x00	; 0
      00095C 00                    2648 	.db #0x00	; 0
      00095D 40                    2649 	.db #0x40	; 64
      00095E 00                    2650 	.db #0x00	; 0
      00095F 20                    2651 	.db #0x20	; 32
      000960 00                    2652 	.db #0x00	; 0
      000961 40                    2653 	.db #0x40	; 64
      000962 00                    2654 	.db #0x00	; 0
      000963 00                    2655 	.db #0x00	; 0
      000964 00                    2656 	.db #0x00	; 0
      000965 00                    2657 	.db #0x00	; 0
      000966 00                    2658 	.db #0x00	; 0
      000967 00                    2659 	.db #0x00	; 0
      000968                       2660 _sprite_explosion_3:
      000968 00                    2661 	.db #0x00	; 0
      000969 00                    2662 	.db #0x00	; 0
      00096A 00                    2663 	.db #0x00	; 0
      00096B 01                    2664 	.db #0x01	; 1
      00096C 08                    2665 	.db #0x08	; 8
      00096D 00                    2666 	.db #0x00	; 0
      00096E 00                    2667 	.db #0x00	; 0
      00096F 10                    2668 	.db #0x10	; 16
      000970 00                    2669 	.db #0x00	; 0
      000971 00                    2670 	.db #0x00	; 0
      000972 08                    2671 	.db #0x08	; 8
      000973 01                    2672 	.db #0x01	; 1
      000974 00                    2673 	.db #0x00	; 0
      000975 00                    2674 	.db #0x00	; 0
      000976 00                    2675 	.db #0x00	; 0
      000977 00                    2676 	.db #0x00	; 0
      000978 00                    2677 	.db #0x00	; 0
      000979 00                    2678 	.db #0x00	; 0
      00097A 00                    2679 	.db #0x00	; 0
      00097B 00                    2680 	.db #0x00	; 0
      00097C 20                    2681 	.db #0x20	; 32
      00097D 00                    2682 	.db #0x00	; 0
      00097E 00                    2683 	.db #0x00	; 0
      00097F 10                    2684 	.db #0x10	; 16
      000980 00                    2685 	.db #0x00	; 0
      000981 00                    2686 	.db #0x00	; 0
      000982 20                    2687 	.db #0x20	; 32
      000983 00                    2688 	.db #0x00	; 0
      000984 00                    2689 	.db #0x00	; 0
      000985 00                    2690 	.db #0x00	; 0
      000986 00                    2691 	.db #0x00	; 0
      000987 00                    2692 	.db #0x00	; 0
      000988                       2693 _sprite_explosion_4:
      000988 00                    2694 	.db #0x00	; 0
      000989 00                    2695 	.db #0x00	; 0
      00098A 01                    2696 	.db #0x01	; 1
      00098B 10                    2697 	.db #0x10	; 16
      00098C 00                    2698 	.db #0x00	; 0
      00098D 00                    2699 	.db #0x00	; 0
      00098E 00                    2700 	.db #0x00	; 0
      00098F 20                    2701 	.db #0x20	; 32
      000990 00                    2702 	.db #0x00	; 0
      000991 00                    2703 	.db #0x00	; 0
      000992 00                    2704 	.db #0x00	; 0
      000993 10                    2705 	.db #0x10	; 16
      000994 01                    2706 	.db #0x01	; 1
      000995 00                    2707 	.db #0x00	; 0
      000996 00                    2708 	.db #0x00	; 0
      000997 00                    2709 	.db #0x00	; 0
      000998 00                    2710 	.db #0x00	; 0
      000999 00                    2711 	.db #0x00	; 0
      00099A 00                    2712 	.db #0x00	; 0
      00099B 10                    2713 	.db #0x10	; 16
      00099C 00                    2714 	.db #0x00	; 0
      00099D 00                    2715 	.db #0x00	; 0
      00099E 00                    2716 	.db #0x00	; 0
      00099F 08                    2717 	.db #0x08	; 8
      0009A0 00                    2718 	.db #0x00	; 0
      0009A1 00                    2719 	.db #0x00	; 0
      0009A2 00                    2720 	.db #0x00	; 0
      0009A3 10                    2721 	.db #0x10	; 16
      0009A4 00                    2722 	.db #0x00	; 0
      0009A5 00                    2723 	.db #0x00	; 0
      0009A6 00                    2724 	.db #0x00	; 0
      0009A7 00                    2725 	.db #0x00	; 0
      0009A8                       2726 _sprite_explosion_5:
      0009A8 01                    2727 	.db #0x01	; 1
      0009A9 00                    2728 	.db #0x00	; 0
      0009AA 20                    2729 	.db #0x20	; 32
      0009AB 00                    2730 	.db #0x00	; 0
      0009AC 00                    2731 	.db #0x00	; 0
      0009AD 00                    2732 	.db #0x00	; 0
      0009AE 00                    2733 	.db #0x00	; 0
      0009AF 80                    2734 	.db #0x80	; 128
      0009B0 00                    2735 	.db #0x00	; 0
      0009B1 00                    2736 	.db #0x00	; 0
      0009B2 00                    2737 	.db #0x00	; 0
      0009B3 00                    2738 	.db #0x00	; 0
      0009B4 20                    2739 	.db #0x20	; 32
      0009B5 00                    2740 	.db #0x00	; 0
      0009B6 01                    2741 	.db #0x01	; 1
      0009B7 00                    2742 	.db #0x00	; 0
      0009B8 00                    2743 	.db #0x00	; 0
      0009B9 00                    2744 	.db #0x00	; 0
      0009BA 08                    2745 	.db #0x08	; 8
      0009BB 00                    2746 	.db #0x00	; 0
      0009BC 00                    2747 	.db #0x00	; 0
      0009BD 00                    2748 	.db #0x00	; 0
      0009BE 00                    2749 	.db #0x00	; 0
      0009BF 02                    2750 	.db #0x02	; 2
      0009C0 00                    2751 	.db #0x00	; 0
      0009C1 00                    2752 	.db #0x00	; 0
      0009C2 00                    2753 	.db #0x00	; 0
      0009C3 00                    2754 	.db #0x00	; 0
      0009C4 08                    2755 	.db #0x08	; 8
      0009C5 00                    2756 	.db #0x00	; 0
      0009C6 00                    2757 	.db #0x00	; 0
      0009C7 00                    2758 	.db #0x00	; 0
      0009C8                       2759 _sprite_explosion_6:
      0009C8 00                    2760 	.db #0x00	; 0
      0009C9 01                    2761 	.db #0x01	; 1
      0009CA 00                    2762 	.db #0x00	; 0
      0009CB 20                    2763 	.db #0x20	; 32
      0009CC 00                    2764 	.db #0x00	; 0
      0009CD 00                    2765 	.db #0x00	; 0
      0009CE 00                    2766 	.db #0x00	; 0
      0009CF 00                    2767 	.db #0x00	; 0
      0009D0 80                    2768 	.db #0x80	; 128
      0009D1 00                    2769 	.db #0x00	; 0
      0009D2 00                    2770 	.db #0x00	; 0
      0009D3 00                    2771 	.db #0x00	; 0
      0009D4 00                    2772 	.db #0x00	; 0
      0009D5 20                    2773 	.db #0x20	; 32
      0009D6 00                    2774 	.db #0x00	; 0
      0009D7 01                    2775 	.db #0x01	; 1
      0009D8 00                    2776 	.db #0x00	; 0
      0009D9 00                    2777 	.db #0x00	; 0
      0009DA 00                    2778 	.db #0x00	; 0
      0009DB 08                    2779 	.db #0x08	; 8
      0009DC 00                    2780 	.db #0x00	; 0
      0009DD 00                    2781 	.db #0x00	; 0
      0009DE 00                    2782 	.db #0x00	; 0
      0009DF 00                    2783 	.db #0x00	; 0
      0009E0 02                    2784 	.db #0x02	; 2
      0009E1 00                    2785 	.db #0x00	; 0
      0009E2 00                    2786 	.db #0x00	; 0
      0009E3 00                    2787 	.db #0x00	; 0
      0009E4 00                    2788 	.db #0x00	; 0
      0009E5 08                    2789 	.db #0x08	; 8
      0009E6 00                    2790 	.db #0x00	; 0
      0009E7 00                    2791 	.db #0x00	; 0
      0009E8                       2792 _sprite_explosion_7:
      0009E8 00                    2793 	.db #0x00	; 0
      0009E9 00                    2794 	.db #0x00	; 0
      0009EA 01                    2795 	.db #0x01	; 1
      0009EB 00                    2796 	.db #0x00	; 0
      0009EC 20                    2797 	.db #0x20	; 32
      0009ED 00                    2798 	.db #0x00	; 0
      0009EE 00                    2799 	.db #0x00	; 0
      0009EF 00                    2800 	.db #0x00	; 0
      0009F0 00                    2801 	.db #0x00	; 0
      0009F1 80                    2802 	.db #0x80	; 128
      0009F2 00                    2803 	.db #0x00	; 0
      0009F3 00                    2804 	.db #0x00	; 0
      0009F4 00                    2805 	.db #0x00	; 0
      0009F5 00                    2806 	.db #0x00	; 0
      0009F6 20                    2807 	.db #0x20	; 32
      0009F7 00                    2808 	.db #0x00	; 0
      0009F8 00                    2809 	.db #0x00	; 0
      0009F9 00                    2810 	.db #0x00	; 0
      0009FA 00                    2811 	.db #0x00	; 0
      0009FB 00                    2812 	.db #0x00	; 0
      0009FC 08                    2813 	.db #0x08	; 8
      0009FD 00                    2814 	.db #0x00	; 0
      0009FE 00                    2815 	.db #0x00	; 0
      0009FF 00                    2816 	.db #0x00	; 0
      000A00 00                    2817 	.db #0x00	; 0
      000A01 02                    2818 	.db #0x02	; 2
      000A02 00                    2819 	.db #0x00	; 0
      000A03 00                    2820 	.db #0x00	; 0
      000A04 00                    2821 	.db #0x00	; 0
      000A05 00                    2822 	.db #0x00	; 0
      000A06 08                    2823 	.db #0x08	; 8
      000A07 00                    2824 	.db #0x00	; 0
                                   2825 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   2826 ;	---------------------------------
                                   2827 ; Function HideArrowSprite
                                   2828 ; ---------------------------------
      000A08                       2829 _HideArrowSprite::
                                   2830 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000A08 3E C0            [ 7] 2831 	ld	a, #0xc0
      000A0A F5               [11] 2832 	push	af
      000A0B 33               [ 6] 2833 	inc	sp
      000A0C 21 00 1B         [10] 2834 	ld	hl, #0x1b00
      000A0F E5               [11] 2835 	push	hl
      000A10 CDr00r00         [17] 2836 	call	_WRTVRM
      000A13 F1               [10] 2837 	pop	af
      000A14 33               [ 6] 2838 	inc	sp
                                   2839 ;src\/Graphics\SpritesLogic.h:36: }
      000A15 C9               [10] 2840 	ret
                                   2841 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   2842 ;	---------------------------------
                                   2843 ; Function DrawHitSprite
                                   2844 ; ---------------------------------
      000A16                       2845 _DrawHitSprite::
      000A16 DD E5            [15] 2846 	push	ix
      000A18 DD 21 00 00      [14] 2847 	ld	ix,#0
      000A1C DD 39            [15] 2848 	add	ix,sp
      000A1E 21 EC FF         [10] 2849 	ld	hl, #-20
      000A21 39               [11] 2850 	add	hl, sp
      000A22 F9               [ 6] 2851 	ld	sp, hl
                                   2852 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000A23 21 00 00         [10] 2853 	ld	hl, #0
      000A26 39               [11] 2854 	add	hl, sp
      000A27 EB               [ 4] 2855 	ex	de, hl
      000A28 3E 0F            [ 7] 2856 	ld	a, #0x0f
      000A2A 12               [ 7] 2857 	ld	(de), a
      000A2B 6B               [ 4] 2858 	ld	l, e
      000A2C 62               [ 4] 2859 	ld	h, d
      000A2D 23               [ 6] 2860 	inc	hl
      000A2E 36 0E            [10] 2861 	ld	(hl), #0x0e
      000A30 6B               [ 4] 2862 	ld	l, e
      000A31 62               [ 4] 2863 	ld	h, d
      000A32 23               [ 6] 2864 	inc	hl
      000A33 23               [ 6] 2865 	inc	hl
      000A34 36 09            [10] 2866 	ld	(hl), #0x09
      000A36 6B               [ 4] 2867 	ld	l, e
      000A37 62               [ 4] 2868 	ld	h, d
      000A38 23               [ 6] 2869 	inc	hl
      000A39 23               [ 6] 2870 	inc	hl
      000A3A 23               [ 6] 2871 	inc	hl
      000A3B 36 06            [10] 2872 	ld	(hl), #0x06
      000A3D 21 04 00         [10] 2873 	ld	hl, #0x0004
      000A40 19               [11] 2874 	add	hl, de
      000A41 36 06            [10] 2875 	ld	(hl), #0x06
      000A43 21 05 00         [10] 2876 	ld	hl, #0x0005
      000A46 19               [11] 2877 	add	hl, de
      000A47 36 09            [10] 2878 	ld	(hl), #0x09
      000A49 21 06 00         [10] 2879 	ld	hl, #0x0006
      000A4C 19               [11] 2880 	add	hl, de
      000A4D 36 0E            [10] 2881 	ld	(hl), #0x0e
      000A4F 21 07 00         [10] 2882 	ld	hl, #0x0007
      000A52 19               [11] 2883 	add	hl, de
      000A53 36 0F            [10] 2884 	ld	(hl), #0x0f
                                   2885 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000A55 21 08 00         [10] 2886 	ld	hl, #8
      000A58 39               [11] 2887 	add	hl, sp
      000A59 4D               [ 4] 2888 	ld	c, l
      000A5A 44               [ 4] 2889 	ld	b, h
      000A5B 36 0F            [10] 2890 	ld	(hl), #0x0f
      000A5D 69               [ 4] 2891 	ld	l, c
      000A5E 60               [ 4] 2892 	ld	h, b
      000A5F 23               [ 6] 2893 	inc	hl
      000A60 36 0E            [10] 2894 	ld	(hl), #0x0e
      000A62 69               [ 4] 2895 	ld	l, c
      000A63 60               [ 4] 2896 	ld	h, b
      000A64 23               [ 6] 2897 	inc	hl
      000A65 23               [ 6] 2898 	inc	hl
      000A66 36 03            [10] 2899 	ld	(hl), #0x03
      000A68 69               [ 4] 2900 	ld	l, c
      000A69 60               [ 4] 2901 	ld	h, b
      000A6A 23               [ 6] 2902 	inc	hl
      000A6B 23               [ 6] 2903 	inc	hl
      000A6C 23               [ 6] 2904 	inc	hl
      000A6D 36 0C            [10] 2905 	ld	(hl), #0x0c
      000A6F 21 04 00         [10] 2906 	ld	hl, #0x0004
      000A72 09               [11] 2907 	add	hl, bc
      000A73 36 0C            [10] 2908 	ld	(hl), #0x0c
      000A75 21 05 00         [10] 2909 	ld	hl, #0x0005
      000A78 09               [11] 2910 	add	hl, bc
      000A79 36 03            [10] 2911 	ld	(hl), #0x03
      000A7B 21 06 00         [10] 2912 	ld	hl, #0x0006
      000A7E 09               [11] 2913 	add	hl, bc
      000A7F 36 0E            [10] 2914 	ld	(hl), #0x0e
      000A81 21 07 00         [10] 2915 	ld	hl, #0x0007
      000A84 09               [11] 2916 	add	hl, bc
      000A85 36 0F            [10] 2917 	ld	(hl), #0x0f
                                   2918 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000A87 3A 9E FC         [13] 2919 	ld	a,(#_JIFFY + 0)
      000A8A E6 07            [ 7] 2920 	and	a, #0x07
                                   2921 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000A8C 6F               [ 4] 2922 	ld	l, a
      000A8D 83               [ 4] 2923 	add	a,e
      000A8E 5F               [ 4] 2924 	ld	e, a
      000A8F 30 01            [12] 2925 	jr	NC, 00124$
      000A91 14               [ 4] 2926 	inc	d
      000A92                       2927 00124$:
      000A92 1A               [ 7] 2928 	ld	a, (de)
      000A93 DD 77 FC         [19] 2929 	ld	-4 (ix), a
                                   2930 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000A96 26 00            [ 7] 2931 	ld	h, #0x00
      000A98 09               [11] 2932 	add	hl, bc
      000A99 7E               [ 7] 2933 	ld	a, (hl)
      000A9A DD 77 FD         [19] 2934 	ld	-3 (ix), a
                                   2935 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000A9D 3E 01            [ 7] 2936 	ld	a, #0x01
      000A9F DD 96 05         [19] 2937 	sub	a, 5 (ix)
      000AA2 3E 00            [ 7] 2938 	ld	a, #0x00
      000AA4 17               [ 4] 2939 	rla
      000AA5 DD 77 FE         [19] 2940 	ld	-2 (ix), a
                                   2941 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000AA8 DD 7E 08         [19] 2942 	ld	a, 8 (ix)
      000AAB B7               [ 4] 2943 	or	a, a
      000AAC CAr77r0B         [10] 2944 	jp	Z, 00104$
                                   2945 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000AAF DD 4E 06         [19] 2946 	ld	c, 6 (ix)
      000AB2 79               [ 4] 2947 	ld	a, c
      000AB3 C6 F8            [ 7] 2948 	add	a, #0xf8
      000AB5 DD 77 FF         [19] 2949 	ld	-1 (ix), a
      000AB8 C5               [11] 2950 	push	bc
      000AB9 F5               [11] 2951 	push	af
      000ABA 33               [ 6] 2952 	inc	sp
      000ABB 21 05 1B         [10] 2953 	ld	hl, #0x1b05
      000ABE E5               [11] 2954 	push	hl
      000ABF CDr00r00         [17] 2955 	call	_WRTVRM
      000AC2 F1               [10] 2956 	pop	af
      000AC3 33               [ 6] 2957 	inc	sp
      000AC4 C1               [10] 2958 	pop	bc
                                   2959 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000AC5 DD 7E 04         [19] 2960 	ld	a, 4 (ix)
      000AC8 C6 FD            [ 7] 2961 	add	a, #0xfd
      000ACA 87               [ 4] 2962 	add	a, a
      000ACB 87               [ 4] 2963 	add	a, a
      000ACC C6 18            [ 7] 2964 	add	a, #0x18
      000ACE C5               [11] 2965 	push	bc
      000ACF F5               [11] 2966 	push	af
      000AD0 33               [ 6] 2967 	inc	sp
      000AD1 21 06 1B         [10] 2968 	ld	hl, #0x1b06
      000AD4 E5               [11] 2969 	push	hl
      000AD5 CDr00r00         [17] 2970 	call	_WRTVRM
      000AD8 F1               [10] 2971 	pop	af
      000AD9 33               [ 6] 2972 	inc	sp
      000ADA C1               [10] 2973 	pop	bc
                                   2974 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000ADB 79               [ 4] 2975 	ld	a, c
      000ADC C6 08            [ 7] 2976 	add	a, #0x08
      000ADE 47               [ 4] 2977 	ld	b, a
      000ADF C5               [11] 2978 	push	bc
      000AE0 C5               [11] 2979 	push	bc
      000AE1 33               [ 6] 2980 	inc	sp
      000AE2 21 09 1B         [10] 2981 	ld	hl, #0x1b09
      000AE5 E5               [11] 2982 	push	hl
      000AE6 CDr00r00         [17] 2983 	call	_WRTVRM
      000AE9 F1               [10] 2984 	pop	af
      000AEA 33               [ 6] 2985 	inc	sp
      000AEB 3E 04            [ 7] 2986 	ld	a, #0x04
      000AED F5               [11] 2987 	push	af
      000AEE 33               [ 6] 2988 	inc	sp
      000AEF 21 0A 1B         [10] 2989 	ld	hl, #0x1b0a
      000AF2 E5               [11] 2990 	push	hl
      000AF3 CDr00r00         [17] 2991 	call	_WRTVRM
      000AF6 F1               [10] 2992 	pop	af
      000AF7 33               [ 6] 2993 	inc	sp
      000AF8 C1               [10] 2994 	pop	bc
                                   2995 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000AF9 79               [ 4] 2996 	ld	a, c
      000AFA C6 18            [ 7] 2997 	add	a, #0x18
      000AFC 4F               [ 4] 2998 	ld	c, a
      000AFD C5               [11] 2999 	push	bc
      000AFE 79               [ 4] 3000 	ld	a, c
      000AFF F5               [11] 3001 	push	af
      000B00 33               [ 6] 3002 	inc	sp
      000B01 21 0D 1B         [10] 3003 	ld	hl, #0x1b0d
      000B04 E5               [11] 3004 	push	hl
      000B05 CDr00r00         [17] 3005 	call	_WRTVRM
      000B08 F1               [10] 3006 	pop	af
      000B09 33               [ 6] 3007 	inc	sp
      000B0A 3E 08            [ 7] 3008 	ld	a, #0x08
      000B0C F5               [11] 3009 	push	af
      000B0D 33               [ 6] 3010 	inc	sp
      000B0E 21 0E 1B         [10] 3011 	ld	hl, #0x1b0e
      000B11 E5               [11] 3012 	push	hl
      000B12 CDr00r00         [17] 3013 	call	_WRTVRM
      000B15 F1               [10] 3014 	pop	af
      000B16 33               [ 6] 3015 	inc	sp
      000B17 C1               [10] 3016 	pop	bc
                                   3017 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000B18 DD 7E FE         [19] 3018 	ld	a, -2 (ix)
      000B1B B7               [ 4] 3019 	or	a, a
      000B1C 28 59            [12] 3020 	jr	Z, 00104$
                                   3021 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000B1E C5               [11] 3022 	push	bc
      000B1F DD 7E FF         [19] 3023 	ld	a, -1 (ix)
      000B22 F5               [11] 3024 	push	af
      000B23 33               [ 6] 3025 	inc	sp
      000B24 21 11 1B         [10] 3026 	ld	hl, #0x1b11
      000B27 E5               [11] 3027 	push	hl
      000B28 CDr00r00         [17] 3028 	call	_WRTVRM
      000B2B F1               [10] 3029 	pop	af
      000B2C 33               [ 6] 3030 	inc	sp
      000B2D C1               [10] 3031 	pop	bc
                                   3032 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000B2E DD 7E 05         [19] 3033 	ld	a, 5 (ix)
      000B31 3D               [ 4] 3034 	dec	a
      000B32 3D               [ 4] 3035 	dec	a
      000B33 87               [ 4] 3036 	add	a, a
      000B34 87               [ 4] 3037 	add	a, a
      000B35 C6 14            [ 7] 3038 	add	a, #0x14
      000B37 C5               [11] 3039 	push	bc
      000B38 F5               [11] 3040 	push	af
      000B39 33               [ 6] 3041 	inc	sp
      000B3A 21 12 1B         [10] 3042 	ld	hl, #0x1b12
      000B3D E5               [11] 3043 	push	hl
      000B3E CDr00r00         [17] 3044 	call	_WRTVRM
      000B41 F1               [10] 3045 	pop	af
      000B42 33               [ 6] 3046 	inc	sp
      000B43 C1               [10] 3047 	pop	bc
                                   3048 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000B44 C5               [11] 3049 	push	bc
      000B45 C5               [11] 3050 	push	bc
      000B46 33               [ 6] 3051 	inc	sp
      000B47 21 15 1B         [10] 3052 	ld	hl, #0x1b15
      000B4A E5               [11] 3053 	push	hl
      000B4B CDr00r00         [17] 3054 	call	_WRTVRM
      000B4E F1               [10] 3055 	pop	af
      000B4F 33               [ 6] 3056 	inc	sp
      000B50 3E 0C            [ 7] 3057 	ld	a, #0x0c
      000B52 F5               [11] 3058 	push	af
      000B53 33               [ 6] 3059 	inc	sp
      000B54 21 16 1B         [10] 3060 	ld	hl, #0x1b16
      000B57 E5               [11] 3061 	push	hl
      000B58 CDr00r00         [17] 3062 	call	_WRTVRM
      000B5B F1               [10] 3063 	pop	af
      000B5C 33               [ 6] 3064 	inc	sp
      000B5D C1               [10] 3065 	pop	bc
                                   3066 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000B5E 79               [ 4] 3067 	ld	a, c
      000B5F F5               [11] 3068 	push	af
      000B60 33               [ 6] 3069 	inc	sp
      000B61 21 19 1B         [10] 3070 	ld	hl, #0x1b19
      000B64 E5               [11] 3071 	push	hl
      000B65 CDr00r00         [17] 3072 	call	_WRTVRM
      000B68 F1               [10] 3073 	pop	af
      000B69 33               [ 6] 3074 	inc	sp
                                   3075 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000B6A 3E 10            [ 7] 3076 	ld	a, #0x10
      000B6C F5               [11] 3077 	push	af
      000B6D 33               [ 6] 3078 	inc	sp
      000B6E 21 1A 1B         [10] 3079 	ld	hl, #0x1b1a
      000B71 E5               [11] 3080 	push	hl
      000B72 CDr00r00         [17] 3081 	call	_WRTVRM
      000B75 F1               [10] 3082 	pop	af
      000B76 33               [ 6] 3083 	inc	sp
      000B77                       3084 00104$:
                                   3085 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000B77 DD 7E 07         [19] 3086 	ld	a, 7 (ix)
      000B7A F5               [11] 3087 	push	af
      000B7B 33               [ 6] 3088 	inc	sp
      000B7C 21 04 1B         [10] 3089 	ld	hl, #0x1b04
      000B7F E5               [11] 3090 	push	hl
      000B80 CDr00r00         [17] 3091 	call	_WRTVRM
      000B83 F1               [10] 3092 	pop	af
      000B84 33               [ 6] 3093 	inc	sp
                                   3094 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000B85 DD 7E FC         [19] 3095 	ld	a, -4 (ix)
      000B88 F5               [11] 3096 	push	af
      000B89 33               [ 6] 3097 	inc	sp
      000B8A 21 07 1B         [10] 3098 	ld	hl, #0x1b07
      000B8D E5               [11] 3099 	push	hl
      000B8E CDr00r00         [17] 3100 	call	_WRTVRM
      000B91 F1               [10] 3101 	pop	af
      000B92 33               [ 6] 3102 	inc	sp
                                   3103 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000B93 DD 7E 07         [19] 3104 	ld	a, 7 (ix)
      000B96 F5               [11] 3105 	push	af
      000B97 33               [ 6] 3106 	inc	sp
      000B98 21 08 1B         [10] 3107 	ld	hl, #0x1b08
      000B9B E5               [11] 3108 	push	hl
      000B9C CDr00r00         [17] 3109 	call	_WRTVRM
      000B9F F1               [10] 3110 	pop	af
      000BA0 33               [ 6] 3111 	inc	sp
                                   3112 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000BA1 DD 7E FC         [19] 3113 	ld	a, -4 (ix)
      000BA4 F5               [11] 3114 	push	af
      000BA5 33               [ 6] 3115 	inc	sp
      000BA6 21 0B 1B         [10] 3116 	ld	hl, #0x1b0b
      000BA9 E5               [11] 3117 	push	hl
      000BAA CDr00r00         [17] 3118 	call	_WRTVRM
      000BAD F1               [10] 3119 	pop	af
      000BAE 33               [ 6] 3120 	inc	sp
                                   3121 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000BAF DD 7E 07         [19] 3122 	ld	a, 7 (ix)
      000BB2 F5               [11] 3123 	push	af
      000BB3 33               [ 6] 3124 	inc	sp
      000BB4 21 0C 1B         [10] 3125 	ld	hl, #0x1b0c
      000BB7 E5               [11] 3126 	push	hl
      000BB8 CDr00r00         [17] 3127 	call	_WRTVRM
      000BBB F1               [10] 3128 	pop	af
      000BBC 33               [ 6] 3129 	inc	sp
                                   3130 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000BBD DD 7E FC         [19] 3131 	ld	a, -4 (ix)
      000BC0 F5               [11] 3132 	push	af
      000BC1 33               [ 6] 3133 	inc	sp
      000BC2 21 0F 1B         [10] 3134 	ld	hl, #0x1b0f
      000BC5 E5               [11] 3135 	push	hl
      000BC6 CDr00r00         [17] 3136 	call	_WRTVRM
      000BC9 F1               [10] 3137 	pop	af
      000BCA 33               [ 6] 3138 	inc	sp
                                   3139 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000BCB DD 7E FE         [19] 3140 	ld	a, -2 (ix)
      000BCE B7               [ 4] 3141 	or	a, a
      000BCF 28 52            [12] 3142 	jr	Z, 00107$
                                   3143 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000BD1 DD 7E 07         [19] 3144 	ld	a, 7 (ix)
      000BD4 C6 10            [ 7] 3145 	add	a, #0x10
      000BD6 47               [ 4] 3146 	ld	b, a
      000BD7 C5               [11] 3147 	push	bc
      000BD8 C5               [11] 3148 	push	bc
      000BD9 33               [ 6] 3149 	inc	sp
      000BDA 21 10 1B         [10] 3150 	ld	hl, #0x1b10
      000BDD E5               [11] 3151 	push	hl
      000BDE CDr00r00         [17] 3152 	call	_WRTVRM
      000BE1 F1               [10] 3153 	pop	af
      000BE2 33               [ 6] 3154 	inc	sp
      000BE3 DD 7E FD         [19] 3155 	ld	a, -3 (ix)
      000BE6 F5               [11] 3156 	push	af
      000BE7 33               [ 6] 3157 	inc	sp
      000BE8 21 13 1B         [10] 3158 	ld	hl, #0x1b13
      000BEB E5               [11] 3159 	push	hl
      000BEC CDr00r00         [17] 3160 	call	_WRTVRM
      000BEF F1               [10] 3161 	pop	af
      000BF0 33               [ 6] 3162 	inc	sp
      000BF1 C1               [10] 3163 	pop	bc
                                   3164 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000BF2 C5               [11] 3165 	push	bc
      000BF3 C5               [11] 3166 	push	bc
      000BF4 33               [ 6] 3167 	inc	sp
      000BF5 21 14 1B         [10] 3168 	ld	hl, #0x1b14
      000BF8 E5               [11] 3169 	push	hl
      000BF9 CDr00r00         [17] 3170 	call	_WRTVRM
      000BFC F1               [10] 3171 	pop	af
      000BFD 33               [ 6] 3172 	inc	sp
      000BFE DD 7E FD         [19] 3173 	ld	a, -3 (ix)
      000C01 F5               [11] 3174 	push	af
      000C02 33               [ 6] 3175 	inc	sp
      000C03 21 17 1B         [10] 3176 	ld	hl, #0x1b17
      000C06 E5               [11] 3177 	push	hl
      000C07 CDr00r00         [17] 3178 	call	_WRTVRM
      000C0A F1               [10] 3179 	pop	af
      000C0B 33               [ 6] 3180 	inc	sp
      000C0C 33               [ 6] 3181 	inc	sp
      000C0D 21 18 1B         [10] 3182 	ld	hl, #0x1b18
      000C10 E5               [11] 3183 	push	hl
      000C11 CDr00r00         [17] 3184 	call	_WRTVRM
      000C14 F1               [10] 3185 	pop	af
      000C15 33               [ 6] 3186 	inc	sp
                                   3187 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000C16 DD 7E FD         [19] 3188 	ld	a, -3 (ix)
      000C19 F5               [11] 3189 	push	af
      000C1A 33               [ 6] 3190 	inc	sp
      000C1B 21 1B 1B         [10] 3191 	ld	hl, #0x1b1b
      000C1E E5               [11] 3192 	push	hl
      000C1F CDr00r00         [17] 3193 	call	_WRTVRM
      000C22 F1               [10] 3194 	pop	af
      000C23                       3195 00107$:
                                   3196 ;src\/Graphics\SpritesLogic.h:119: }
      000C23 DD F9            [10] 3197 	ld	sp, ix
      000C25 DD E1            [14] 3198 	pop	ix
      000C27 C9               [10] 3199 	ret
                                   3200 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3201 ;	---------------------------------
                                   3202 ; Function HideHitSprite
                                   3203 ; ---------------------------------
      000C28                       3204 _HideHitSprite::
                                   3205 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000C28 3E C0            [ 7] 3206 	ld	a, #0xc0
      000C2A F5               [11] 3207 	push	af
      000C2B 33               [ 6] 3208 	inc	sp
      000C2C 21 04 1B         [10] 3209 	ld	hl, #0x1b04
      000C2F E5               [11] 3210 	push	hl
      000C30 CDr00r00         [17] 3211 	call	_WRTVRM
      000C33 F1               [10] 3212 	pop	af
      000C34 33               [ 6] 3213 	inc	sp
                                   3214 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000C35 3E C0            [ 7] 3215 	ld	a, #0xc0
      000C37 F5               [11] 3216 	push	af
      000C38 33               [ 6] 3217 	inc	sp
      000C39 21 08 1B         [10] 3218 	ld	hl, #0x1b08
      000C3C E5               [11] 3219 	push	hl
      000C3D CDr00r00         [17] 3220 	call	_WRTVRM
      000C40 F1               [10] 3221 	pop	af
      000C41 33               [ 6] 3222 	inc	sp
                                   3223 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000C42 3E C0            [ 7] 3224 	ld	a, #0xc0
      000C44 F5               [11] 3225 	push	af
      000C45 33               [ 6] 3226 	inc	sp
      000C46 21 0C 1B         [10] 3227 	ld	hl, #0x1b0c
      000C49 E5               [11] 3228 	push	hl
      000C4A CDr00r00         [17] 3229 	call	_WRTVRM
      000C4D F1               [10] 3230 	pop	af
      000C4E 33               [ 6] 3231 	inc	sp
                                   3232 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000C4F 3E C0            [ 7] 3233 	ld	a, #0xc0
      000C51 F5               [11] 3234 	push	af
      000C52 33               [ 6] 3235 	inc	sp
      000C53 21 10 1B         [10] 3236 	ld	hl, #0x1b10
      000C56 E5               [11] 3237 	push	hl
      000C57 CDr00r00         [17] 3238 	call	_WRTVRM
      000C5A F1               [10] 3239 	pop	af
      000C5B 33               [ 6] 3240 	inc	sp
                                   3241 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000C5C 3E C0            [ 7] 3242 	ld	a, #0xc0
      000C5E F5               [11] 3243 	push	af
      000C5F 33               [ 6] 3244 	inc	sp
      000C60 21 14 1B         [10] 3245 	ld	hl, #0x1b14
      000C63 E5               [11] 3246 	push	hl
      000C64 CDr00r00         [17] 3247 	call	_WRTVRM
      000C67 F1               [10] 3248 	pop	af
      000C68 33               [ 6] 3249 	inc	sp
                                   3250 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000C69 3E C0            [ 7] 3251 	ld	a, #0xc0
      000C6B F5               [11] 3252 	push	af
      000C6C 33               [ 6] 3253 	inc	sp
      000C6D 21 18 1B         [10] 3254 	ld	hl, #0x1b18
      000C70 E5               [11] 3255 	push	hl
      000C71 CDr00r00         [17] 3256 	call	_WRTVRM
      000C74 F1               [10] 3257 	pop	af
      000C75 33               [ 6] 3258 	inc	sp
                                   3259 ;src\/Graphics\SpritesLogic.h:131: }
      000C76 C9               [10] 3260 	ret
                                   3261 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3262 ;	---------------------------------
                                   3263 ; Function HideExplosionSprite
                                   3264 ; ---------------------------------
      000C77                       3265 _HideExplosionSprite::
                                   3266 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000C77 3E C0            [ 7] 3267 	ld	a, #0xc0
      000C79 F5               [11] 3268 	push	af
      000C7A 33               [ 6] 3269 	inc	sp
      000C7B 21 1C 1B         [10] 3270 	ld	hl, #0x1b1c
      000C7E E5               [11] 3271 	push	hl
      000C7F CDr00r00         [17] 3272 	call	_WRTVRM
      000C82 F1               [10] 3273 	pop	af
      000C83 33               [ 6] 3274 	inc	sp
                                   3275 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000C84 3E C0            [ 7] 3276 	ld	a, #0xc0
      000C86 F5               [11] 3277 	push	af
      000C87 33               [ 6] 3278 	inc	sp
      000C88 21 20 1B         [10] 3279 	ld	hl, #0x1b20
      000C8B E5               [11] 3280 	push	hl
      000C8C CDr00r00         [17] 3281 	call	_WRTVRM
      000C8F F1               [10] 3282 	pop	af
      000C90 33               [ 6] 3283 	inc	sp
                                   3284 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000C91 3E C0            [ 7] 3285 	ld	a, #0xc0
      000C93 F5               [11] 3286 	push	af
      000C94 33               [ 6] 3287 	inc	sp
      000C95 21 24 1B         [10] 3288 	ld	hl, #0x1b24
      000C98 E5               [11] 3289 	push	hl
      000C99 CDr00r00         [17] 3290 	call	_WRTVRM
      000C9C F1               [10] 3291 	pop	af
      000C9D 33               [ 6] 3292 	inc	sp
                                   3293 ;src\/Graphics\SpritesLogic.h:137: }
      000C9E C9               [10] 3294 	ret
                                   3295 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3296 ;	---------------------------------
                                   3297 ; Function DrawExplosionSprite
                                   3298 ; ---------------------------------
      000C9F                       3299 _DrawExplosionSprite::
      000C9F 3B               [ 6] 3300 	dec	sp
                                   3301 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000CA0 FD 21 05 00      [14] 3302 	ld	iy, #5
      000CA4 FD 39            [15] 3303 	add	iy, sp
      000CA6 FD 6E 00         [19] 3304 	ld	l, 0 (iy)
      000CA9 CB 3D            [ 8] 3305 	srl	l
      000CAB CB 3D            [ 8] 3306 	srl	l
                                   3307 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000CAD 3E 07            [ 7] 3308 	ld	a, #0x07
      000CAF 95               [ 4] 3309 	sub	a, l
      000CB0 30 07            [12] 3310 	jr	NC, 00102$
                                   3311 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000CB2 33               [ 6] 3312 	inc	sp
      000CB3 C3r77r0C         [10] 3313 	jp	_HideExplosionSprite
      000CB6 C3r85r0D         [10] 3314 	jp	00104$
      000CB9                       3315 00102$:
                                   3316 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000CB9 29               [11] 3317 	add	hl, hl
      000CBA 29               [11] 3318 	add	hl, hl
                                   3319 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000CBB FD 21 04 00      [14] 3320 	ld	iy, #4
      000CBF FD 39            [15] 3321 	add	iy, sp
      000CC1 FD 7E 00         [19] 3322 	ld	a, 0 (iy)
      000CC4 C6 F0            [ 7] 3323 	add	a, #0xf0
      000CC6 67               [ 4] 3324 	ld	h, a
      000CC7 E5               [11] 3325 	push	hl
      000CC8 E5               [11] 3326 	push	hl
      000CC9 33               [ 6] 3327 	inc	sp
      000CCA 11 1C 1B         [10] 3328 	ld	de, #0x1b1c
      000CCD D5               [11] 3329 	push	de
      000CCE CDr00r00         [17] 3330 	call	_WRTVRM
      000CD1 F1               [10] 3331 	pop	af
      000CD2 33               [ 6] 3332 	inc	sp
      000CD3 21 05 00         [10] 3333 	ld	hl, #5
      000CD6 39               [11] 3334 	add	hl, sp
      000CD7 7E               [ 7] 3335 	ld	a, (hl)
      000CD8 F5               [11] 3336 	push	af
      000CD9 33               [ 6] 3337 	inc	sp
      000CDA 11 1D 1B         [10] 3338 	ld	de, #0x1b1d
      000CDD D5               [11] 3339 	push	de
      000CDE CDr00r00         [17] 3340 	call	_WRTVRM
      000CE1 F1               [10] 3341 	pop	af
      000CE2 33               [ 6] 3342 	inc	sp
      000CE3 E1               [10] 3343 	pop	hl
                                   3344 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000CE4 7D               [ 4] 3345 	ld	a, l
      000CE5 C6 2C            [ 7] 3346 	add	a, #0x2c
      000CE7 FD 21 00 00      [14] 3347 	ld	iy, #0
      000CEB FD 39            [15] 3348 	add	iy, sp
      000CED FD 77 00         [19] 3349 	ld	0 (iy), a
      000CF0 E5               [11] 3350 	push	hl
      000CF1 F5               [11] 3351 	push	af
      000CF2 33               [ 6] 3352 	inc	sp
      000CF3 11 1E 1B         [10] 3353 	ld	de, #0x1b1e
      000CF6 D5               [11] 3354 	push	de
      000CF7 CDr00r00         [17] 3355 	call	_WRTVRM
      000CFA F1               [10] 3356 	pop	af
      000CFB 33               [ 6] 3357 	inc	sp
      000CFC 3E 0F            [ 7] 3358 	ld	a, #0x0f
      000CFE F5               [11] 3359 	push	af
      000CFF 33               [ 6] 3360 	inc	sp
      000D00 11 1F 1B         [10] 3361 	ld	de, #0x1b1f
      000D03 D5               [11] 3362 	push	de
      000D04 CDr00r00         [17] 3363 	call	_WRTVRM
      000D07 F1               [10] 3364 	pop	af
      000D08 33               [ 6] 3365 	inc	sp
      000D09 E1               [10] 3366 	pop	hl
                                   3367 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000D0A E5               [11] 3368 	push	hl
      000D0B E5               [11] 3369 	push	hl
      000D0C 33               [ 6] 3370 	inc	sp
      000D0D 11 20 1B         [10] 3371 	ld	de, #0x1b20
      000D10 D5               [11] 3372 	push	de
      000D11 CDr00r00         [17] 3373 	call	_WRTVRM
      000D14 F1               [10] 3374 	pop	af
      000D15 33               [ 6] 3375 	inc	sp
      000D16 E1               [10] 3376 	pop	hl
                                   3377 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000D17 FD 21 03 00      [14] 3378 	ld	iy, #3
      000D1B FD 39            [15] 3379 	add	iy, sp
      000D1D FD 6E 00         [19] 3380 	ld	l, 0 (iy)
      000D20 7D               [ 4] 3381 	ld	a, l
      000D21 C6 10            [ 7] 3382 	add	a, #0x10
      000D23 E5               [11] 3383 	push	hl
      000D24 F5               [11] 3384 	push	af
      000D25 33               [ 6] 3385 	inc	sp
      000D26 11 21 1B         [10] 3386 	ld	de, #0x1b21
      000D29 D5               [11] 3387 	push	de
      000D2A CDr00r00         [17] 3388 	call	_WRTVRM
      000D2D F1               [10] 3389 	pop	af
      000D2E 33               [ 6] 3390 	inc	sp
      000D2F 21 02 00         [10] 3391 	ld	hl, #2
      000D32 39               [11] 3392 	add	hl, sp
      000D33 7E               [ 7] 3393 	ld	a, (hl)
      000D34 F5               [11] 3394 	push	af
      000D35 33               [ 6] 3395 	inc	sp
      000D36 11 22 1B         [10] 3396 	ld	de, #0x1b22
      000D39 D5               [11] 3397 	push	de
      000D3A CDr00r00         [17] 3398 	call	_WRTVRM
      000D3D F1               [10] 3399 	pop	af
      000D3E 33               [ 6] 3400 	inc	sp
      000D3F 3E 0A            [ 7] 3401 	ld	a, #0x0a
      000D41 F5               [11] 3402 	push	af
      000D42 33               [ 6] 3403 	inc	sp
      000D43 11 23 1B         [10] 3404 	ld	de, #0x1b23
      000D46 D5               [11] 3405 	push	de
      000D47 CDr00r00         [17] 3406 	call	_WRTVRM
      000D4A F1               [10] 3407 	pop	af
      000D4B 33               [ 6] 3408 	inc	sp
      000D4C E1               [10] 3409 	pop	hl
                                   3410 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000D4D E5               [11] 3411 	push	hl
      000D4E E5               [11] 3412 	push	hl
      000D4F 33               [ 6] 3413 	inc	sp
      000D50 11 24 1B         [10] 3414 	ld	de, #0x1b24
      000D53 D5               [11] 3415 	push	de
      000D54 CDr00r00         [17] 3416 	call	_WRTVRM
      000D57 F1               [10] 3417 	pop	af
      000D58 33               [ 6] 3418 	inc	sp
      000D59 E1               [10] 3419 	pop	hl
                                   3420 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000D5A 7D               [ 4] 3421 	ld	a, l
      000D5B C6 20            [ 7] 3422 	add	a, #0x20
      000D5D F5               [11] 3423 	push	af
      000D5E 33               [ 6] 3424 	inc	sp
      000D5F 21 25 1B         [10] 3425 	ld	hl, #0x1b25
      000D62 E5               [11] 3426 	push	hl
      000D63 CDr00r00         [17] 3427 	call	_WRTVRM
      000D66 F1               [10] 3428 	pop	af
      000D67 33               [ 6] 3429 	inc	sp
                                   3430 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000D68 21 00 00         [10] 3431 	ld	hl, #0
      000D6B 39               [11] 3432 	add	hl, sp
      000D6C 7E               [ 7] 3433 	ld	a, (hl)
      000D6D F5               [11] 3434 	push	af
      000D6E 33               [ 6] 3435 	inc	sp
      000D6F 21 26 1B         [10] 3436 	ld	hl, #0x1b26
      000D72 E5               [11] 3437 	push	hl
      000D73 CDr00r00         [17] 3438 	call	_WRTVRM
      000D76 F1               [10] 3439 	pop	af
      000D77 33               [ 6] 3440 	inc	sp
                                   3441 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000D78 3E 03            [ 7] 3442 	ld	a, #0x03
      000D7A F5               [11] 3443 	push	af
      000D7B 33               [ 6] 3444 	inc	sp
      000D7C 21 27 1B         [10] 3445 	ld	hl, #0x1b27
      000D7F E5               [11] 3446 	push	hl
      000D80 CDr00r00         [17] 3447 	call	_WRTVRM
      000D83 F1               [10] 3448 	pop	af
      000D84 33               [ 6] 3449 	inc	sp
      000D85                       3450 00104$:
                                   3451 ;src\/Graphics\SpritesLogic.h:164: }
      000D85 33               [ 6] 3452 	inc	sp
      000D86 C9               [10] 3453 	ret
                                   3454 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   3455 ;	---------------------------------
                                   3456 ; Function DrawChar
                                   3457 ; ---------------------------------
      000D87                       3458 _DrawChar::
      000D87 DD E5            [15] 3459 	push	ix
      000D89 DD 21 00 00      [14] 3460 	ld	ix,#0
      000D8D DD 39            [15] 3461 	add	ix,sp
                                   3462 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      000D8F DD 6E 06         [19] 3463 	ld	l, 6 (ix)
      000D92 26 00            [ 7] 3464 	ld	h, #0x00
      000D94 29               [11] 3465 	add	hl, hl
      000D95 29               [11] 3466 	add	hl, hl
      000D96 29               [11] 3467 	add	hl, hl
      000D97 29               [11] 3468 	add	hl, hl
      000D98 29               [11] 3469 	add	hl, hl
      000D99 01 00 18         [10] 3470 	ld	bc, #0x1800
      000D9C 09               [11] 3471 	add	hl, bc
      000D9D DD 4E 05         [19] 3472 	ld	c, 5 (ix)
      000DA0 06 00            [ 7] 3473 	ld	b, #0x00
      000DA2 09               [11] 3474 	add	hl, bc
      000DA3 DD 7E 04         [19] 3475 	ld	a, 4 (ix)
      000DA6 F5               [11] 3476 	push	af
      000DA7 33               [ 6] 3477 	inc	sp
      000DA8 E5               [11] 3478 	push	hl
      000DA9 CDr00r00         [17] 3479 	call	_WRTVRM
      000DAC F1               [10] 3480 	pop	af
      000DAD 33               [ 6] 3481 	inc	sp
                                   3482 ;src\/Graphics\Graphics.h:3: }
      000DAE DD E1            [14] 3483 	pop	ix
      000DB0 C9               [10] 3484 	ret
                                   3485 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   3486 ;	---------------------------------
                                   3487 ; Function DrawString
                                   3488 ; ---------------------------------
      000DB1                       3489 _DrawString::
      000DB1 DD E5            [15] 3490 	push	ix
      000DB3 DD 21 00 00      [14] 3491 	ld	ix,#0
      000DB7 DD 39            [15] 3492 	add	ix,sp
                                   3493 ;src\/Graphics\Graphics.h:6: while (*str) {
      000DB9 DD 6E 06         [19] 3494 	ld	l, 6 (ix)
      000DBC DD 4E 04         [19] 3495 	ld	c, 4 (ix)
      000DBF DD 46 05         [19] 3496 	ld	b, 5 (ix)
      000DC2                       3497 00101$:
      000DC2 0A               [ 7] 3498 	ld	a, (bc)
      000DC3 B7               [ 4] 3499 	or	a, a
      000DC4 28 1A            [12] 3500 	jr	Z, 00104$
                                   3501 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      000DC6 55               [ 4] 3502 	ld	d, l
      000DC7 2C               [ 4] 3503 	inc	l
      000DC8 DD 75 06         [19] 3504 	ld	6 (ix), l
      000DCB 03               [ 6] 3505 	inc	bc
      000DCC C6 0F            [ 7] 3506 	add	a, #0x0f
      000DCE E5               [11] 3507 	push	hl
      000DCF C5               [11] 3508 	push	bc
      000DD0 DD 66 07         [19] 3509 	ld	h, 7 (ix)
      000DD3 6A               [ 4] 3510 	ld	l, d
      000DD4 E5               [11] 3511 	push	hl
      000DD5 F5               [11] 3512 	push	af
      000DD6 33               [ 6] 3513 	inc	sp
      000DD7 CDr87r0D         [17] 3514 	call	_DrawChar
      000DDA F1               [10] 3515 	pop	af
      000DDB 33               [ 6] 3516 	inc	sp
      000DDC C1               [10] 3517 	pop	bc
      000DDD E1               [10] 3518 	pop	hl
      000DDE 18 E2            [12] 3519 	jr	00101$
      000DE0                       3520 00104$:
                                   3521 ;src\/Graphics\Graphics.h:9: }
      000DE0 DD E1            [14] 3522 	pop	ix
      000DE2 C9               [10] 3523 	ret
                                   3524 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   3525 ;	---------------------------------
                                   3526 ; Function DrawNumber
                                   3527 ; ---------------------------------
      000DE3                       3528 _DrawNumber::
      000DE3 DD E5            [15] 3529 	push	ix
      000DE5 DD 21 00 00      [14] 3530 	ld	ix,#0
      000DE9 DD 39            [15] 3531 	add	ix,sp
      000DEB 21 FA FF         [10] 3532 	ld	hl, #-6
      000DEE 39               [11] 3533 	add	hl, sp
      000DEF F9               [ 6] 3534 	ld	sp, hl
                                   3535 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      000DF0 DD 36 FA 01      [19] 3536 	ld	-6 (ix), #0x01
                                   3537 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      000DF4 DD 66 07         [19] 3538 	ld	h, 7 (ix)
      000DF7 DD 6E 06         [19] 3539 	ld	l, 6 (ix)
      000DFA E5               [11] 3540 	push	hl
      000DFB 21r97r0E         [10] 3541 	ld	hl, #___str_0
      000DFE E5               [11] 3542 	push	hl
      000DFF CDrB1r0D         [17] 3543 	call	_DrawString
      000E02 F1               [10] 3544 	pop	af
      000E03 F1               [10] 3545 	pop	af
                                   3546 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E04 DD 7E 06         [19] 3547 	ld	a, 6 (ix)
      000E07 DD 77 FF         [19] 3548 	ld	-1 (ix), a
      000E0A 1E 06            [ 7] 3549 	ld	e, #0x06
      000E0C                       3550 00109$:
      000E0C 7B               [ 4] 3551 	ld	a, e
      000E0D B7               [ 4] 3552 	or	a, a
      000E0E CAr92r0E         [10] 3553 	jp	Z, 00111$
                                   3554 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      000E11 7B               [ 4] 3555 	ld	a, e
      000E12 3D               [ 4] 3556 	dec	a
      000E13 D5               [11] 3557 	push	de
      000E14 57               [ 4] 3558 	ld	d,a
      000E15 1E 0A            [ 7] 3559 	ld	e,#0x0a
      000E17 D5               [11] 3560 	push	de
      000E18 CDr1Dr00         [17] 3561 	call	_Power
      000E1B F1               [10] 3562 	pop	af
      000E1C D1               [10] 3563 	pop	de
      000E1D DD 75 FB         [19] 3564 	ld	-5 (ix), l
      000E20 DD 74 FC         [19] 3565 	ld	-4 (ix), h
                                   3566 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      000E23 D5               [11] 3567 	push	de
      000E24 DD 6E FB         [19] 3568 	ld	l, -5 (ix)
      000E27 DD 66 FC         [19] 3569 	ld	h, -4 (ix)
      000E2A E5               [11] 3570 	push	hl
      000E2B DD 6E 04         [19] 3571 	ld	l, 4 (ix)
      000E2E DD 66 05         [19] 3572 	ld	h, 5 (ix)
      000E31 E5               [11] 3573 	push	hl
      000E32 CDr00r00         [17] 3574 	call	__divuint
      000E35 F1               [10] 3575 	pop	af
      000E36 F1               [10] 3576 	pop	af
      000E37 DD 75 FD         [19] 3577 	ld	-3 (ix), l
      000E3A DD 74 FE         [19] 3578 	ld	-2 (ix), h
      000E3D D1               [10] 3579 	pop	de
      000E3E DD 7E FA         [19] 3580 	ld	a, -6 (ix)
      000E41 B7               [ 4] 3581 	or	a, a
      000E42 28 0C            [12] 3582 	jr	Z, 00102$
      000E44 DD 7E FE         [19] 3583 	ld	a, -2 (ix)
      000E47 DD B6 FD         [19] 3584 	or	a, -3 (ix)
      000E4A 28 04            [12] 3585 	jr	Z, 00102$
      000E4C DD 36 FA 00      [19] 3586 	ld	-6 (ix), #0
      000E50                       3587 00102$:
                                   3588 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      000E50 DD 7E FA         [19] 3589 	ld	a, -6 (ix)
      000E53 B7               [ 4] 3590 	or	a, a
      000E54 28 04            [12] 3591 	jr	Z, 00104$
      000E56 7B               [ 4] 3592 	ld	a, e
      000E57 3D               [ 4] 3593 	dec	a
      000E58 20 31            [12] 3594 	jr	NZ, 00105$
      000E5A                       3595 00104$:
                                   3596 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      000E5A DD 7E FD         [19] 3597 	ld	a, -3 (ix)
      000E5D C6 3F            [ 7] 3598 	add	a, #0x3f
      000E5F D5               [11] 3599 	push	de
      000E60 DD 66 07         [19] 3600 	ld	h, 7 (ix)
      000E63 E5               [11] 3601 	push	hl
      000E64 33               [ 6] 3602 	inc	sp
      000E65 DD 66 FF         [19] 3603 	ld	h, -1 (ix)
      000E68 E5               [11] 3604 	push	hl
      000E69 33               [ 6] 3605 	inc	sp
      000E6A F5               [11] 3606 	push	af
      000E6B 33               [ 6] 3607 	inc	sp
      000E6C CDr87r0D         [17] 3608 	call	_DrawChar
      000E6F F1               [10] 3609 	pop	af
      000E70 33               [ 6] 3610 	inc	sp
      000E71 DD 6E FB         [19] 3611 	ld	l, -5 (ix)
      000E74 DD 66 FC         [19] 3612 	ld	h, -4 (ix)
      000E77 E5               [11] 3613 	push	hl
      000E78 DD 6E 04         [19] 3614 	ld	l, 4 (ix)
      000E7B DD 66 05         [19] 3615 	ld	h, 5 (ix)
      000E7E E5               [11] 3616 	push	hl
      000E7F CDr00r00         [17] 3617 	call	__moduint
      000E82 F1               [10] 3618 	pop	af
      000E83 F1               [10] 3619 	pop	af
      000E84 D1               [10] 3620 	pop	de
      000E85 DD 75 04         [19] 3621 	ld	4 (ix), l
      000E88 DD 74 05         [19] 3622 	ld	5 (ix), h
      000E8B                       3623 00105$:
                                   3624 ;src\/Graphics\Graphics.h:29: col++;
      000E8B DD 34 FF         [23] 3625 	inc	-1 (ix)
                                   3626 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      000E8E 1D               [ 4] 3627 	dec	e
      000E8F C3r0Cr0E         [10] 3628 	jp	00109$
      000E92                       3629 00111$:
                                   3630 ;src\/Graphics\Graphics.h:34: }
      000E92 DD F9            [10] 3631 	ld	sp, ix
      000E94 DD E1            [14] 3632 	pop	ix
      000E96 C9               [10] 3633 	ret
      000E97                       3634 ___str_0:
      000E97 20 20 20 20 20 20     3635 	.ascii "      "
      000E9D 00                    3636 	.db 0x00
                                   3637 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   3638 ;	---------------------------------
                                   3639 ; Function DrawColumn
                                   3640 ; ---------------------------------
      000E9E                       3641 _DrawColumn::
      000E9E DD E5            [15] 3642 	push	ix
      000EA0 DD 21 00 00      [14] 3643 	ld	ix,#0
      000EA4 DD 39            [15] 3644 	add	ix,sp
      000EA6 21 F9 FF         [10] 3645 	ld	hl, #-7
      000EA9 39               [11] 3646 	add	hl, sp
      000EAA F9               [ 6] 3647 	ld	sp, hl
                                   3648 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      000EAB DD 4E 04         [19] 3649 	ld	c, 4 (ix)
      000EAE 06 00            [ 7] 3650 	ld	b, #0x00
      000EB0 21 00 18         [10] 3651 	ld	hl, #0x1800
      000EB3 09               [11] 3652 	add	hl, bc
      000EB4 C5               [11] 3653 	push	bc
      000EB5 3E 18            [ 7] 3654 	ld	a, #0x18
      000EB7 F5               [11] 3655 	push	af
      000EB8 33               [ 6] 3656 	inc	sp
      000EB9 E5               [11] 3657 	push	hl
      000EBA CDr00r00         [17] 3658 	call	_WRTVRM
      000EBD F1               [10] 3659 	pop	af
      000EBE 33               [ 6] 3660 	inc	sp
      000EBF C1               [10] 3661 	pop	bc
                                   3662 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      000EC0 21 01 18         [10] 3663 	ld	hl, #0x1801
      000EC3 09               [11] 3664 	add	hl, bc
      000EC4 C5               [11] 3665 	push	bc
      000EC5 3E 19            [ 7] 3666 	ld	a, #0x19
      000EC7 F5               [11] 3667 	push	af
      000EC8 33               [ 6] 3668 	inc	sp
      000EC9 E5               [11] 3669 	push	hl
      000ECA CDr00r00         [17] 3670 	call	_WRTVRM
      000ECD F1               [10] 3671 	pop	af
      000ECE 33               [ 6] 3672 	inc	sp
      000ECF C1               [10] 3673 	pop	bc
                                   3674 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      000ED0 21 02 18         [10] 3675 	ld	hl, #0x1802
      000ED3 09               [11] 3676 	add	hl, bc
      000ED4 C5               [11] 3677 	push	bc
      000ED5 3E 1A            [ 7] 3678 	ld	a, #0x1a
      000ED7 F5               [11] 3679 	push	af
      000ED8 33               [ 6] 3680 	inc	sp
      000ED9 E5               [11] 3681 	push	hl
      000EDA CDr00r00         [17] 3682 	call	_WRTVRM
      000EDD F1               [10] 3683 	pop	af
      000EDE 33               [ 6] 3684 	inc	sp
      000EDF C1               [10] 3685 	pop	bc
                                   3686 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      000EE0 21 20 18         [10] 3687 	ld	hl, #0x1820
      000EE3 09               [11] 3688 	add	hl, bc
      000EE4 C5               [11] 3689 	push	bc
      000EE5 3E 1B            [ 7] 3690 	ld	a, #0x1b
      000EE7 F5               [11] 3691 	push	af
      000EE8 33               [ 6] 3692 	inc	sp
      000EE9 E5               [11] 3693 	push	hl
      000EEA CDr00r00         [17] 3694 	call	_WRTVRM
      000EED F1               [10] 3695 	pop	af
      000EEE 33               [ 6] 3696 	inc	sp
      000EEF C1               [10] 3697 	pop	bc
                                   3698 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      000EF0 21 21 18         [10] 3699 	ld	hl, #0x1821
      000EF3 09               [11] 3700 	add	hl, bc
      000EF4 C5               [11] 3701 	push	bc
      000EF5 3E 1C            [ 7] 3702 	ld	a, #0x1c
      000EF7 F5               [11] 3703 	push	af
      000EF8 33               [ 6] 3704 	inc	sp
      000EF9 E5               [11] 3705 	push	hl
      000EFA CDr00r00         [17] 3706 	call	_WRTVRM
      000EFD F1               [10] 3707 	pop	af
      000EFE 33               [ 6] 3708 	inc	sp
      000EFF C1               [10] 3709 	pop	bc
                                   3710 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      000F00 21 22 18         [10] 3711 	ld	hl, #0x1822
      000F03 09               [11] 3712 	add	hl, bc
      000F04 C5               [11] 3713 	push	bc
      000F05 3E 1D            [ 7] 3714 	ld	a, #0x1d
      000F07 F5               [11] 3715 	push	af
      000F08 33               [ 6] 3716 	inc	sp
      000F09 E5               [11] 3717 	push	hl
      000F0A CDr00r00         [17] 3718 	call	_WRTVRM
      000F0D F1               [10] 3719 	pop	af
      000F0E 33               [ 6] 3720 	inc	sp
      000F0F C1               [10] 3721 	pop	bc
                                   3722 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F10 21 40 18         [10] 3723 	ld	hl, #0x1840
      000F13 09               [11] 3724 	add	hl, bc
      000F14 E3               [19] 3725 	ex	(sp), hl
      000F15 21 41 18         [10] 3726 	ld	hl, #0x1841
      000F18 09               [11] 3727 	add	hl, bc
      000F19 DD 75 FB         [19] 3728 	ld	-5 (ix), l
      000F1C DD 74 FC         [19] 3729 	ld	-4 (ix), h
      000F1F 21 42 18         [10] 3730 	ld	hl, #0x1842
      000F22 09               [11] 3731 	add	hl, bc
      000F23 DD 75 FD         [19] 3732 	ld	-3 (ix), l
      000F26 DD 74 FE         [19] 3733 	ld	-2 (ix), h
      000F29 DD 36 FF 00      [19] 3734 	ld	-1 (ix), #0
      000F2D                       3735 00103$:
      000F2D DD 7E FF         [19] 3736 	ld	a, -1 (ix)
      000F30 D6 14            [ 7] 3737 	sub	a, #0x14
      000F32 30 4A            [12] 3738 	jr	NC, 00101$
                                   3739 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      000F34 DD 5E FF         [19] 3740 	ld	e, -1 (ix)
      000F37 16 00            [ 7] 3741 	ld	d, #0x00
      000F39 EB               [ 4] 3742 	ex	de, hl
      000F3A 29               [11] 3743 	add	hl, hl
      000F3B 29               [11] 3744 	add	hl, hl
      000F3C 29               [11] 3745 	add	hl, hl
      000F3D 29               [11] 3746 	add	hl, hl
      000F3E 29               [11] 3747 	add	hl, hl
      000F3F EB               [ 4] 3748 	ex	de, hl
      000F40 E1               [10] 3749 	pop	hl
      000F41 E5               [11] 3750 	push	hl
      000F42 19               [11] 3751 	add	hl, de
      000F43 C5               [11] 3752 	push	bc
      000F44 D5               [11] 3753 	push	de
      000F45 3E 1E            [ 7] 3754 	ld	a, #0x1e
      000F47 F5               [11] 3755 	push	af
      000F48 33               [ 6] 3756 	inc	sp
      000F49 E5               [11] 3757 	push	hl
      000F4A CDr00r00         [17] 3758 	call	_WRTVRM
      000F4D F1               [10] 3759 	pop	af
      000F4E 33               [ 6] 3760 	inc	sp
      000F4F D1               [10] 3761 	pop	de
      000F50 C1               [10] 3762 	pop	bc
                                   3763 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      000F51 DD 6E FB         [19] 3764 	ld	l, -5 (ix)
      000F54 DD 66 FC         [19] 3765 	ld	h, -4 (ix)
      000F57 19               [11] 3766 	add	hl, de
      000F58 C5               [11] 3767 	push	bc
      000F59 D5               [11] 3768 	push	de
      000F5A 3E 1F            [ 7] 3769 	ld	a, #0x1f
      000F5C F5               [11] 3770 	push	af
      000F5D 33               [ 6] 3771 	inc	sp
      000F5E E5               [11] 3772 	push	hl
      000F5F CDr00r00         [17] 3773 	call	_WRTVRM
      000F62 F1               [10] 3774 	pop	af
      000F63 33               [ 6] 3775 	inc	sp
      000F64 D1               [10] 3776 	pop	de
      000F65 C1               [10] 3777 	pop	bc
                                   3778 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      000F66 DD 6E FD         [19] 3779 	ld	l, -3 (ix)
      000F69 DD 66 FE         [19] 3780 	ld	h, -2 (ix)
      000F6C 19               [11] 3781 	add	hl, de
      000F6D C5               [11] 3782 	push	bc
      000F6E 3E 20            [ 7] 3783 	ld	a, #0x20
      000F70 F5               [11] 3784 	push	af
      000F71 33               [ 6] 3785 	inc	sp
      000F72 E5               [11] 3786 	push	hl
      000F73 CDr00r00         [17] 3787 	call	_WRTVRM
      000F76 F1               [10] 3788 	pop	af
      000F77 33               [ 6] 3789 	inc	sp
      000F78 C1               [10] 3790 	pop	bc
                                   3791 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      000F79 DD 34 FF         [23] 3792 	inc	-1 (ix)
      000F7C 18 AF            [12] 3793 	jr	00103$
      000F7E                       3794 00101$:
                                   3795 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      000F7E 21 00 19         [10] 3796 	ld	hl, #0x1900
      000F81 09               [11] 3797 	add	hl, bc
      000F82 C5               [11] 3798 	push	bc
      000F83 3E 21            [ 7] 3799 	ld	a, #0x21
      000F85 F5               [11] 3800 	push	af
      000F86 33               [ 6] 3801 	inc	sp
      000F87 E5               [11] 3802 	push	hl
      000F88 CDr00r00         [17] 3803 	call	_WRTVRM
      000F8B F1               [10] 3804 	pop	af
      000F8C 33               [ 6] 3805 	inc	sp
      000F8D C1               [10] 3806 	pop	bc
                                   3807 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      000F8E 21 01 19         [10] 3808 	ld	hl, #0x1901
      000F91 09               [11] 3809 	add	hl, bc
      000F92 C5               [11] 3810 	push	bc
      000F93 3E 22            [ 7] 3811 	ld	a, #0x22
      000F95 F5               [11] 3812 	push	af
      000F96 33               [ 6] 3813 	inc	sp
      000F97 E5               [11] 3814 	push	hl
      000F98 CDr00r00         [17] 3815 	call	_WRTVRM
      000F9B F1               [10] 3816 	pop	af
      000F9C 33               [ 6] 3817 	inc	sp
      000F9D C1               [10] 3818 	pop	bc
                                   3819 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      000F9E 21 02 19         [10] 3820 	ld	hl, #0x1902
      000FA1 09               [11] 3821 	add	hl, bc
      000FA2 C5               [11] 3822 	push	bc
      000FA3 3E 23            [ 7] 3823 	ld	a, #0x23
      000FA5 F5               [11] 3824 	push	af
      000FA6 33               [ 6] 3825 	inc	sp
      000FA7 E5               [11] 3826 	push	hl
      000FA8 CDr00r00         [17] 3827 	call	_WRTVRM
      000FAB F1               [10] 3828 	pop	af
      000FAC 33               [ 6] 3829 	inc	sp
      000FAD C1               [10] 3830 	pop	bc
                                   3831 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      000FAE 21 00 1A         [10] 3832 	ld	hl, #0x1a00
      000FB1 09               [11] 3833 	add	hl, bc
      000FB2 C5               [11] 3834 	push	bc
      000FB3 3E 21            [ 7] 3835 	ld	a, #0x21
      000FB5 F5               [11] 3836 	push	af
      000FB6 33               [ 6] 3837 	inc	sp
      000FB7 E5               [11] 3838 	push	hl
      000FB8 CDr00r00         [17] 3839 	call	_WRTVRM
      000FBB F1               [10] 3840 	pop	af
      000FBC 33               [ 6] 3841 	inc	sp
      000FBD C1               [10] 3842 	pop	bc
                                   3843 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      000FBE 21 01 1A         [10] 3844 	ld	hl, #0x1a01
      000FC1 09               [11] 3845 	add	hl, bc
      000FC2 C5               [11] 3846 	push	bc
      000FC3 3E 22            [ 7] 3847 	ld	a, #0x22
      000FC5 F5               [11] 3848 	push	af
      000FC6 33               [ 6] 3849 	inc	sp
      000FC7 E5               [11] 3850 	push	hl
      000FC8 CDr00r00         [17] 3851 	call	_WRTVRM
      000FCB F1               [10] 3852 	pop	af
      000FCC 33               [ 6] 3853 	inc	sp
      000FCD C1               [10] 3854 	pop	bc
                                   3855 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      000FCE 21 02 1A         [10] 3856 	ld	hl, #0x1a02
      000FD1 09               [11] 3857 	add	hl, bc
      000FD2 C5               [11] 3858 	push	bc
      000FD3 3E 23            [ 7] 3859 	ld	a, #0x23
      000FD5 F5               [11] 3860 	push	af
      000FD6 33               [ 6] 3861 	inc	sp
      000FD7 E5               [11] 3862 	push	hl
      000FD8 CDr00r00         [17] 3863 	call	_WRTVRM
      000FDB F1               [10] 3864 	pop	af
      000FDC 33               [ 6] 3865 	inc	sp
      000FDD C1               [10] 3866 	pop	bc
                                   3867 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      000FDE 21 C0 1A         [10] 3868 	ld	hl, #0x1ac0
      000FE1 09               [11] 3869 	add	hl, bc
      000FE2 C5               [11] 3870 	push	bc
      000FE3 3E 24            [ 7] 3871 	ld	a, #0x24
      000FE5 F5               [11] 3872 	push	af
      000FE6 33               [ 6] 3873 	inc	sp
      000FE7 E5               [11] 3874 	push	hl
      000FE8 CDr00r00         [17] 3875 	call	_WRTVRM
      000FEB F1               [10] 3876 	pop	af
      000FEC 33               [ 6] 3877 	inc	sp
      000FED C1               [10] 3878 	pop	bc
                                   3879 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      000FEE 21 C1 1A         [10] 3880 	ld	hl, #0x1ac1
      000FF1 09               [11] 3881 	add	hl, bc
      000FF2 C5               [11] 3882 	push	bc
      000FF3 3E 25            [ 7] 3883 	ld	a, #0x25
      000FF5 F5               [11] 3884 	push	af
      000FF6 33               [ 6] 3885 	inc	sp
      000FF7 E5               [11] 3886 	push	hl
      000FF8 CDr00r00         [17] 3887 	call	_WRTVRM
      000FFB F1               [10] 3888 	pop	af
      000FFC 33               [ 6] 3889 	inc	sp
      000FFD C1               [10] 3890 	pop	bc
                                   3891 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      000FFE 21 C2 1A         [10] 3892 	ld	hl, #0x1ac2
      001001 09               [11] 3893 	add	hl, bc
      001002 C5               [11] 3894 	push	bc
      001003 3E 26            [ 7] 3895 	ld	a, #0x26
      001005 F5               [11] 3896 	push	af
      001006 33               [ 6] 3897 	inc	sp
      001007 E5               [11] 3898 	push	hl
      001008 CDr00r00         [17] 3899 	call	_WRTVRM
      00100B F1               [10] 3900 	pop	af
      00100C 33               [ 6] 3901 	inc	sp
      00100D C1               [10] 3902 	pop	bc
                                   3903 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      00100E 21 E0 1A         [10] 3904 	ld	hl, #0x1ae0
      001011 09               [11] 3905 	add	hl, bc
      001012 C5               [11] 3906 	push	bc
      001013 3E 27            [ 7] 3907 	ld	a, #0x27
      001015 F5               [11] 3908 	push	af
      001016 33               [ 6] 3909 	inc	sp
      001017 E5               [11] 3910 	push	hl
      001018 CDr00r00         [17] 3911 	call	_WRTVRM
      00101B F1               [10] 3912 	pop	af
      00101C 33               [ 6] 3913 	inc	sp
      00101D C1               [10] 3914 	pop	bc
                                   3915 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      00101E 21 E1 1A         [10] 3916 	ld	hl, #0x1ae1
      001021 09               [11] 3917 	add	hl, bc
      001022 C5               [11] 3918 	push	bc
      001023 3E 28            [ 7] 3919 	ld	a, #0x28
      001025 F5               [11] 3920 	push	af
      001026 33               [ 6] 3921 	inc	sp
      001027 E5               [11] 3922 	push	hl
      001028 CDr00r00         [17] 3923 	call	_WRTVRM
      00102B F1               [10] 3924 	pop	af
      00102C 33               [ 6] 3925 	inc	sp
      00102D C1               [10] 3926 	pop	bc
                                   3927 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      00102E 21 E2 1A         [10] 3928 	ld	hl, #0x1ae2
      001031 09               [11] 3929 	add	hl, bc
      001032 3E 29            [ 7] 3930 	ld	a, #0x29
      001034 F5               [11] 3931 	push	af
      001035 33               [ 6] 3932 	inc	sp
      001036 E5               [11] 3933 	push	hl
      001037 CDr00r00         [17] 3934 	call	_WRTVRM
                                   3935 ;src\/Graphics\Graphics.h:64: }
      00103A DD F9            [10] 3936 	ld	sp,ix
      00103C DD E1            [14] 3937 	pop	ix
      00103E C9               [10] 3938 	ret
                                   3939 ;src\/Graphics\Graphics.h:66: void DrawScore() {
                                   3940 ;	---------------------------------
                                   3941 ; Function DrawScore
                                   3942 ; ---------------------------------
      00103F                       3943 _DrawScore::
      00103F DD E5            [15] 3944 	push	ix
      001041 DD 21 00 00      [14] 3945 	ld	ix,#0
      001045 DD 39            [15] 3946 	add	ix,sp
      001047 F5               [11] 3947 	push	af
                                   3948 ;src\/Graphics\Graphics.h:67: byte bgCounter = 0, bgColor;
      001048 DD 36 FE 00      [19] 3949 	ld	-2 (ix), #0
                                   3950 ;src\/Graphics\Graphics.h:71: if(newLevel) {
      00104C 3Ar09r00         [13] 3951 	ld	a,(#_newLevel + 0)
      00104F B7               [ 4] 3952 	or	a, a
      001050 CAr4Br11         [10] 3953 	jp	Z, 00119$
                                   3954 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001053 DD 36 FF 00      [19] 3955 	ld	-1 (ix), #0
      001057                       3956 00121$:
      001057 DD 7E FF         [19] 3957 	ld	a, -1 (ix)
      00105A D6 3C            [ 7] 3958 	sub	a, #0x3c
      00105C D2r4Br11         [10] 3959 	jp	NC, 00119$
                                   3960 ;src\/Graphics\Graphics.h:73: lastJiffy = JIFFY;
      00105F ED 4B 9E FC      [20] 3961 	ld	bc, (_JIFFY)
                                   3962 ;src\/Graphics\Graphics.h:74: while(lastJiffy == JIFFY) { }
      001063                       3963 00101$:
      001063 2A 9E FC         [16] 3964 	ld	hl, (_JIFFY)
      001066 BF               [ 4] 3965 	cp	a, a
      001067 ED 42            [15] 3966 	sbc	hl, bc
      001069 28 F8            [12] 3967 	jr	Z, 00101$
                                   3968 ;src\/Graphics\Graphics.h:76: DrawExplosionSprite(26 * 8, 10 * 8, i);
      00106B DD 56 FF         [19] 3969 	ld	d, -1 (ix)
      00106E 1E 50            [ 7] 3970 	ld	e,#0x50
      001070 D5               [11] 3971 	push	de
      001071 3E D0            [ 7] 3972 	ld	a, #0xd0
      001073 F5               [11] 3973 	push	af
      001074 33               [ 6] 3974 	inc	sp
      001075 CDr9Fr0C         [17] 3975 	call	_DrawExplosionSprite
      001078 F1               [10] 3976 	pop	af
      001079 33               [ 6] 3977 	inc	sp
                                   3978 ;src\/Graphics\Graphics.h:78: if(JIFFY & 0b00000110) {
      00107A 2A 9E FC         [16] 3979 	ld	hl, (_JIFFY)
      00107D 7D               [ 4] 3980 	ld	a, l
      00107E E6 06            [ 7] 3981 	and	a, #0x06
      001080 CAr2Br11         [10] 3982 	jp	Z,00115$
                                   3983 ;src\/Graphics\Graphics.h:80: DrawString(" LEVEL", 26, 10);
      001083 11 1A 0A         [10] 3984 	ld	de, #0x0a1a
      001086 D5               [11] 3985 	push	de
      001087 21rDAr11         [10] 3986 	ld	hl, #___str_1
      00108A E5               [11] 3987 	push	hl
      00108B CDrB1r0D         [17] 3988 	call	_DrawString
      00108E F1               [10] 3989 	pop	af
      00108F F1               [10] 3990 	pop	af
                                   3991 ;src\/Graphics\Graphics.h:81: DrawNumber(level, 26, 11); //TODO: fix bug (new level not blinking)
      001090 3Ar08r00         [13] 3992 	ld	a, (#_level + 0)
      001093 4F               [ 4] 3993 	ld	c, a
      001094 06 00            [ 7] 3994 	ld	b, #0x00
      001096 11 1A 0B         [10] 3995 	ld	de, #0x0b1a
      001099 D5               [11] 3996 	push	de
      00109A C5               [11] 3997 	push	bc
      00109B CDrE3r0D         [17] 3998 	call	_DrawNumber
      00109E F1               [10] 3999 	pop	af
      00109F F1               [10] 4000 	pop	af
                                   4001 ;src\/Graphics\Graphics.h:87: switch(bgCounter++) {
      0010A0 DD 4E FE         [19] 4002 	ld	c, -2 (ix)
      0010A3 DD 34 FE         [23] 4003 	inc	-2 (ix)
      0010A6 3E 07            [ 7] 4004 	ld	a, #0x07
      0010A8 91               [ 4] 4005 	sub	a, c
      0010A9 38 45            [12] 4006 	jr	C, 00112$
      0010AB 06 00            [ 7] 4007 	ld	b, #0x00
      0010AD 21rB4r10         [10] 4008 	ld	hl, #00163$
      0010B0 09               [11] 4009 	add	hl, bc
      0010B1 09               [11] 4010 	add	hl, bc
      0010B2 09               [11] 4011 	add	hl, bc
      0010B3 E9               [ 4] 4012 	jp	(hl)
      0010B4                       4013 00163$:
      0010B4 C3rCCr10         [10] 4014 	jp	00104$
      0010B7 C3rD0r10         [10] 4015 	jp	00105$
      0010BA C3rD4r10         [10] 4016 	jp	00106$
      0010BD C3rD8r10         [10] 4017 	jp	00107$
      0010C0 C3rDCr10         [10] 4018 	jp	00108$
      0010C3 C3rE0r10         [10] 4019 	jp	00109$
      0010C6 C3rE4r10         [10] 4020 	jp	00110$
      0010C9 C3rE8r10         [10] 4021 	jp	00111$
                                   4022 ;src\/Graphics\Graphics.h:88: case 0:
      0010CC                       4023 00104$:
                                   4024 ;src\/Graphics\Graphics.h:89: bgColor = 0x14;
      0010CC 0E 14            [ 7] 4025 	ld	c, #0x14
                                   4026 ;src\/Graphics\Graphics.h:90: break;
      0010CE 18 22            [12] 4027 	jr	00113$
                                   4028 ;src\/Graphics\Graphics.h:91: case 1:
      0010D0                       4029 00105$:
                                   4030 ;src\/Graphics\Graphics.h:92: bgColor = 0x15;
      0010D0 0E 15            [ 7] 4031 	ld	c, #0x15
                                   4032 ;src\/Graphics\Graphics.h:93: break;
      0010D2 18 1E            [12] 4033 	jr	00113$
                                   4034 ;src\/Graphics\Graphics.h:94: case 2:
      0010D4                       4035 00106$:
                                   4036 ;src\/Graphics\Graphics.h:95: bgColor = 0x17;
      0010D4 0E 17            [ 7] 4037 	ld	c, #0x17
                                   4038 ;src\/Graphics\Graphics.h:96: break;
      0010D6 18 1A            [12] 4039 	jr	00113$
                                   4040 ;src\/Graphics\Graphics.h:97: case 3:
      0010D8                       4041 00107$:
                                   4042 ;src\/Graphics\Graphics.h:98: bgColor = 0x1e;
      0010D8 0E 1E            [ 7] 4043 	ld	c, #0x1e
                                   4044 ;src\/Graphics\Graphics.h:99: break;
      0010DA 18 16            [12] 4045 	jr	00113$
                                   4046 ;src\/Graphics\Graphics.h:100: case 4:
      0010DC                       4047 00108$:
                                   4048 ;src\/Graphics\Graphics.h:101: bgColor = 0x1f;
      0010DC 0E 1F            [ 7] 4049 	ld	c, #0x1f
                                   4050 ;src\/Graphics\Graphics.h:102: break;
      0010DE 18 12            [12] 4051 	jr	00113$
                                   4052 ;src\/Graphics\Graphics.h:103: case 5:
      0010E0                       4053 00109$:
                                   4054 ;src\/Graphics\Graphics.h:104: bgColor = 0x1e;
      0010E0 0E 1E            [ 7] 4055 	ld	c, #0x1e
                                   4056 ;src\/Graphics\Graphics.h:105: break;
      0010E2 18 0E            [12] 4057 	jr	00113$
                                   4058 ;src\/Graphics\Graphics.h:106: case 6:
      0010E4                       4059 00110$:
                                   4060 ;src\/Graphics\Graphics.h:107: bgColor = 0x17;
      0010E4 0E 17            [ 7] 4061 	ld	c, #0x17
                                   4062 ;src\/Graphics\Graphics.h:108: break;
      0010E6 18 0A            [12] 4063 	jr	00113$
                                   4064 ;src\/Graphics\Graphics.h:109: case 7:
      0010E8                       4065 00111$:
                                   4066 ;src\/Graphics\Graphics.h:110: bgColor = 0x15;
      0010E8 0E 15            [ 7] 4067 	ld	c, #0x15
                                   4068 ;src\/Graphics\Graphics.h:111: bgCounter = 0;
      0010EA DD 36 FE 00      [19] 4069 	ld	-2 (ix), #0
                                   4070 ;src\/Graphics\Graphics.h:112: break;
      0010EE 18 02            [12] 4071 	jr	00113$
                                   4072 ;src\/Graphics\Graphics.h:113: default:
      0010F0                       4073 00112$:
                                   4074 ;src\/Graphics\Graphics.h:114: bgColor = 0x11;
      0010F0 0E 11            [ 7] 4075 	ld	c, #0x11
                                   4076 ;src\/Graphics\Graphics.h:116: }
      0010F2                       4077 00113$:
                                   4078 ;src\/Graphics\Graphics.h:117: FILVRM(CLRTBL, 8 * 4, bgColor);
      0010F2 C5               [11] 4079 	push	bc
      0010F3 79               [ 4] 4080 	ld	a, c
      0010F4 F5               [11] 4081 	push	af
      0010F5 33               [ 6] 4082 	inc	sp
      0010F6 21 20 00         [10] 4083 	ld	hl, #0x0020
      0010F9 E5               [11] 4084 	push	hl
      0010FA 21 00 20         [10] 4085 	ld	hl, #0x2000
      0010FD E5               [11] 4086 	push	hl
      0010FE CDr00r00         [17] 4087 	call	_FILVRM
      001101 F1               [10] 4088 	pop	af
      001102 F1               [10] 4089 	pop	af
      001103 33               [ 6] 4090 	inc	sp
      001104 C1               [10] 4091 	pop	bc
                                   4092 ;src\/Graphics\Graphics.h:118: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001105 C5               [11] 4093 	push	bc
      001106 79               [ 4] 4094 	ld	a, c
      001107 F5               [11] 4095 	push	af
      001108 33               [ 6] 4096 	inc	sp
      001109 21 20 00         [10] 4097 	ld	hl, #0x0020
      00110C E5               [11] 4098 	push	hl
      00110D 21 00 28         [10] 4099 	ld	hl, #0x2800
      001110 E5               [11] 4100 	push	hl
      001111 CDr00r00         [17] 4101 	call	_FILVRM
      001114 F1               [10] 4102 	pop	af
      001115 F1               [10] 4103 	pop	af
      001116 33               [ 6] 4104 	inc	sp
      001117 C1               [10] 4105 	pop	bc
                                   4106 ;src\/Graphics\Graphics.h:119: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001118 79               [ 4] 4107 	ld	a, c
      001119 F5               [11] 4108 	push	af
      00111A 33               [ 6] 4109 	inc	sp
      00111B 21 20 00         [10] 4110 	ld	hl, #0x0020
      00111E E5               [11] 4111 	push	hl
      00111F 21 00 30         [10] 4112 	ld	hl, #0x3000
      001122 E5               [11] 4113 	push	hl
      001123 CDr00r00         [17] 4114 	call	_FILVRM
      001126 F1               [10] 4115 	pop	af
      001127 F1               [10] 4116 	pop	af
      001128 33               [ 6] 4117 	inc	sp
      001129 18 1A            [12] 4118 	jr	00122$
      00112B                       4119 00115$:
                                   4120 ;src\/Graphics\Graphics.h:124: DrawString("      ", 26, 10);
      00112B 11 1A 0A         [10] 4121 	ld	de, #0x0a1a
      00112E D5               [11] 4122 	push	de
      00112F 21rE1r11         [10] 4123 	ld	hl, #___str_2
      001132 E5               [11] 4124 	push	hl
      001133 CDrB1r0D         [17] 4125 	call	_DrawString
      001136 F1               [10] 4126 	pop	af
      001137 F1               [10] 4127 	pop	af
                                   4128 ;src\/Graphics\Graphics.h:125: DrawString("      ", 26, 11);
      001138 11 1A 0B         [10] 4129 	ld	de, #0x0b1a
      00113B D5               [11] 4130 	push	de
      00113C 21rE1r11         [10] 4131 	ld	hl, #___str_2
      00113F E5               [11] 4132 	push	hl
      001140 CDrB1r0D         [17] 4133 	call	_DrawString
      001143 F1               [10] 4134 	pop	af
      001144 F1               [10] 4135 	pop	af
      001145                       4136 00122$:
                                   4137 ;src\/Graphics\Graphics.h:72: for(byte i=0; i < 60; i++) {
      001145 DD 34 FF         [23] 4138 	inc	-1 (ix)
      001148 C3r57r10         [10] 4139 	jp	00121$
      00114B                       4140 00119$:
                                   4141 ;src\/Graphics\Graphics.h:131: newLevel = FALSE;
      00114B 21r09r00         [10] 4142 	ld	hl, #_newLevel
      00114E 36 00            [10] 4143 	ld	(hl), #0x00
                                   4144 ;src\/Graphics\Graphics.h:134: FILVRM(CLRTBL, 8 * 4, 0x14);
      001150 3E 14            [ 7] 4145 	ld	a, #0x14
      001152 F5               [11] 4146 	push	af
      001153 33               [ 6] 4147 	inc	sp
      001154 21 20 00         [10] 4148 	ld	hl, #0x0020
      001157 E5               [11] 4149 	push	hl
      001158 21 00 20         [10] 4150 	ld	hl, #0x2000
      00115B E5               [11] 4151 	push	hl
      00115C CDr00r00         [17] 4152 	call	_FILVRM
      00115F F1               [10] 4153 	pop	af
      001160 F1               [10] 4154 	pop	af
      001161 33               [ 6] 4155 	inc	sp
                                   4156 ;src\/Graphics\Graphics.h:135: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001162 3E 14            [ 7] 4157 	ld	a, #0x14
      001164 F5               [11] 4158 	push	af
      001165 33               [ 6] 4159 	inc	sp
      001166 21 20 00         [10] 4160 	ld	hl, #0x0020
      001169 E5               [11] 4161 	push	hl
      00116A 21 00 28         [10] 4162 	ld	hl, #0x2800
      00116D E5               [11] 4163 	push	hl
      00116E CDr00r00         [17] 4164 	call	_FILVRM
      001171 F1               [10] 4165 	pop	af
      001172 F1               [10] 4166 	pop	af
      001173 33               [ 6] 4167 	inc	sp
                                   4168 ;src\/Graphics\Graphics.h:136: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001174 3E 14            [ 7] 4169 	ld	a, #0x14
      001176 F5               [11] 4170 	push	af
      001177 33               [ 6] 4171 	inc	sp
      001178 21 20 00         [10] 4172 	ld	hl, #0x0020
      00117B E5               [11] 4173 	push	hl
      00117C 21 00 30         [10] 4174 	ld	hl, #0x3000
      00117F E5               [11] 4175 	push	hl
      001180 CDr00r00         [17] 4176 	call	_FILVRM
      001183 F1               [10] 4177 	pop	af
      001184 F1               [10] 4178 	pop	af
      001185 33               [ 6] 4179 	inc	sp
                                   4180 ;src\/Graphics\Graphics.h:138: DrawString(" SCORE", 26, 2);
      001186 11 1A 02         [10] 4181 	ld	de, #0x021a
      001189 D5               [11] 4182 	push	de
      00118A 21rE8r11         [10] 4183 	ld	hl, #___str_3
      00118D E5               [11] 4184 	push	hl
      00118E CDrB1r0D         [17] 4185 	call	_DrawString
      001191 F1               [10] 4186 	pop	af
      001192 F1               [10] 4187 	pop	af
                                   4188 ;src\/Graphics\Graphics.h:139: DrawString(" LEVEL", 26, 10);
      001193 11 1A 0A         [10] 4189 	ld	de, #0x0a1a
      001196 D5               [11] 4190 	push	de
      001197 21rDAr11         [10] 4191 	ld	hl, #___str_1
      00119A E5               [11] 4192 	push	hl
      00119B CDrB1r0D         [17] 4193 	call	_DrawString
      00119E F1               [10] 4194 	pop	af
      00119F F1               [10] 4195 	pop	af
                                   4196 ;src\/Graphics\Graphics.h:140: DrawString("BLOCKS", 26, 18);
      0011A0 11 1A 12         [10] 4197 	ld	de, #0x121a
      0011A3 D5               [11] 4198 	push	de
      0011A4 21rEFr11         [10] 4199 	ld	hl, #___str_4
      0011A7 E5               [11] 4200 	push	hl
      0011A8 CDrB1r0D         [17] 4201 	call	_DrawString
      0011AB F1               [10] 4202 	pop	af
      0011AC F1               [10] 4203 	pop	af
                                   4204 ;src\/Graphics\Graphics.h:142: DrawNumber(score, 26, 3);
      0011AD 11 1A 03         [10] 4205 	ld	de, #0x031a
      0011B0 D5               [11] 4206 	push	de
      0011B1 2Ar04r00         [16] 4207 	ld	hl, (_score)
      0011B4 E5               [11] 4208 	push	hl
      0011B5 CDrE3r0D         [17] 4209 	call	_DrawNumber
      0011B8 F1               [10] 4210 	pop	af
      0011B9 F1               [10] 4211 	pop	af
                                   4212 ;src\/Graphics\Graphics.h:143: DrawNumber(level, 26, 11);
      0011BA 3Ar08r00         [13] 4213 	ld	a, (#_level + 0)
      0011BD 4F               [ 4] 4214 	ld	c, a
      0011BE 06 00            [ 7] 4215 	ld	b, #0x00
      0011C0 11 1A 0B         [10] 4216 	ld	de, #0x0b1a
      0011C3 D5               [11] 4217 	push	de
      0011C4 C5               [11] 4218 	push	bc
      0011C5 CDrE3r0D         [17] 4219 	call	_DrawNumber
      0011C8 F1               [10] 4220 	pop	af
      0011C9 F1               [10] 4221 	pop	af
                                   4222 ;src\/Graphics\Graphics.h:144: DrawNumber(blocksRemoved, 26, 19);
      0011CA 11 1A 13         [10] 4223 	ld	de, #0x131a
      0011CD D5               [11] 4224 	push	de
      0011CE 2Ar06r00         [16] 4225 	ld	hl, (_blocksRemoved)
      0011D1 E5               [11] 4226 	push	hl
      0011D2 CDrE3r0D         [17] 4227 	call	_DrawNumber
                                   4228 ;src\/Graphics\Graphics.h:146: }
      0011D5 DD F9            [10] 4229 	ld	sp,ix
      0011D7 DD E1            [14] 4230 	pop	ix
      0011D9 C9               [10] 4231 	ret
      0011DA                       4232 ___str_1:
      0011DA 20 4C 45 56 45 4C     4233 	.ascii " LEVEL"
      0011E0 00                    4234 	.db 0x00
      0011E1                       4235 ___str_2:
      0011E1 20 20 20 20 20 20     4236 	.ascii "      "
      0011E7 00                    4237 	.db 0x00
      0011E8                       4238 ___str_3:
      0011E8 20 53 43 4F 52 45     4239 	.ascii " SCORE"
      0011EE 00                    4240 	.db 0x00
      0011EF                       4241 ___str_4:
      0011EF 42 4C 4F 43 4B 53     4242 	.ascii "BLOCKS"
      0011F5 00                    4243 	.db 0x00
                                   4244 ;src\/Graphics\Graphics.h:148: void DrawBackground() {
                                   4245 ;	---------------------------------
                                   4246 ; Function DrawBackground
                                   4247 ; ---------------------------------
      0011F6                       4248 _DrawBackground::
                                   4249 ;src\/Graphics\Graphics.h:150: for(int i = 0; i < 256 * 3; i++) {
      0011F6 01 00 00         [10] 4250 	ld	bc, #0x0000
      0011F9                       4251 00103$:
      0011F9 78               [ 4] 4252 	ld	a, b
      0011FA EE 80            [ 7] 4253 	xor	a, #0x80
      0011FC D6 83            [ 7] 4254 	sub	a, #0x83
      0011FE 30 12            [12] 4255 	jr	NC, 00101$
                                   4256 ;src\/Graphics\Graphics.h:151: WRTVRM(NAMTBL + i, 0); // test
      001200 21 00 18         [10] 4257 	ld	hl, #0x1800
      001203 09               [11] 4258 	add	hl, bc
      001204 C5               [11] 4259 	push	bc
      001205 AF               [ 4] 4260 	xor	a, a
      001206 F5               [11] 4261 	push	af
      001207 33               [ 6] 4262 	inc	sp
      001208 E5               [11] 4263 	push	hl
      001209 CDr00r00         [17] 4264 	call	_WRTVRM
      00120C F1               [10] 4265 	pop	af
      00120D 33               [ 6] 4266 	inc	sp
      00120E C1               [10] 4267 	pop	bc
                                   4268 ;src\/Graphics\Graphics.h:150: for(int i = 0; i < 256 * 3; i++) {
      00120F 03               [ 6] 4269 	inc	bc
      001210 18 E7            [12] 4270 	jr	00103$
      001212                       4271 00101$:
                                   4272 ;src\/Graphics\Graphics.h:154: DrawColumn(7);
      001212 3E 07            [ 7] 4273 	ld	a, #0x07
      001214 F5               [11] 4274 	push	af
      001215 33               [ 6] 4275 	inc	sp
      001216 CDr9Er0E         [17] 4276 	call	_DrawColumn
      001219 33               [ 6] 4277 	inc	sp
                                   4278 ;src\/Graphics\Graphics.h:155: DrawColumn(22);
      00121A 3E 16            [ 7] 4279 	ld	a, #0x16
      00121C F5               [11] 4280 	push	af
      00121D 33               [ 6] 4281 	inc	sp
      00121E CDr9Er0E         [17] 4282 	call	_DrawColumn
      001221 33               [ 6] 4283 	inc	sp
                                   4284 ;src\/Graphics\Graphics.h:157: DrawScore();
                                   4285 ;src\/Graphics\Graphics.h:193: }
      001222 C3r3Fr10         [10] 4286 	jp	_DrawScore
                                   4287 ;src\/Graphics\Graphics.h:195: void InitVRAM() {
                                   4288 ;	---------------------------------
                                   4289 ; Function InitVRAM
                                   4290 ; ---------------------------------
      001225                       4291 _InitVRAM::
      001225 DD E5            [15] 4292 	push	ix
      001227 DD 21 00 00      [14] 4293 	ld	ix,#0
      00122B DD 39            [15] 4294 	add	ix,sp
      00122D 3B               [ 6] 4295 	dec	sp
                                   4296 ;src\/Graphics\Graphics.h:200: CLIKSW = 0;	// disable keyboard sound
      00122E 21 00 00         [10] 4297 	ld	hl, #0x0000
      001231 22 DB F3         [16] 4298 	ld	(_CLIKSW), hl
                                   4299 ;src\/Graphics\Graphics.h:201: SCNCNT = 1; 	// set keyboard scan counter
      001234 21 F6 F3         [10] 4300 	ld	hl, #_SCNCNT
      001237 36 01            [10] 4301 	ld	(hl), #0x01
                                   4302 ;src\/Graphics\Graphics.h:203: FORCLR = COLOR_WHITE;
      001239 21 E9 F3         [10] 4303 	ld	hl, #_FORCLR
      00123C 36 0F            [10] 4304 	ld	(hl), #0x0f
                                   4305 ;src\/Graphics\Graphics.h:204: BAKCLR = COLOR_BLACK;
      00123E 21 EA F3         [10] 4306 	ld	hl, #_BAKCLR
      001241 36 01            [10] 4307 	ld	(hl), #0x01
                                   4308 ;src\/Graphics\Graphics.h:205: BDRCLR = COLOR_BLACK;
      001243 21 EB F3         [10] 4309 	ld	hl, #_BDRCLR
      001246 36 01            [10] 4310 	ld	(hl), #0x01
                                   4311 ;src\/Graphics\Graphics.h:233: WRTVDP(0b0000000111100010);
      001248 21 E2 01         [10] 4312 	ld	hl, #0x01e2
      00124B CDr00r00         [17] 4313 	call	_WRTVDP
                                   4314 ;src\/Graphics\Graphics.h:235: INIGRP();	// Set screen 2
      00124E CDr00r00         [17] 4315 	call	_INIGRP
                                   4316 ;src\/Graphics\Graphics.h:237: DISSCR();	// Disable screen (faster to write)
      001251 CDr00r00         [17] 4317 	call	_DISSCR
                                   4318 ;src\/Graphics\Graphics.h:241: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001254 AF               [ 4] 4319 	xor	a, a
      001255 F5               [11] 4320 	push	af
      001256 33               [ 6] 4321 	inc	sp
      001257 21 00 40         [10] 4322 	ld	hl, #0x4000
      00125A E5               [11] 4323 	push	hl
      00125B 65               [ 4] 4324 	ld	h, l
      00125C E5               [11] 4325 	push	hl
      00125D CDr00r00         [17] 4326 	call	_FILVRM
      001260 F1               [10] 4327 	pop	af
                                   4328 ;src\/Graphics\Graphics.h:250: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001261 33               [ 6] 4329 	inc	sp
      001262 21 60 02         [10] 4330 	ld	hl,#0x0260
      001265 E3               [19] 4331 	ex	(sp),hl
      001266 21rA8r07         [10] 4332 	ld	hl, #_sprite_arrow_0
      001269 E5               [11] 4333 	push	hl
      00126A 21 00 38         [10] 4334 	ld	hl, #0x3800
      00126D E5               [11] 4335 	push	hl
      00126E CDr00r00         [17] 4336 	call	_LDIRVM
      001271 21 06 00         [10] 4337 	ld	hl, #6
      001274 39               [11] 4338 	add	hl, sp
      001275 F9               [ 6] 4339 	ld	sp, hl
                                   4340 ;src\/Graphics\Graphics.h:256: for(byte i=0; i<32; i++) {
      001276 0E 00            [ 7] 4341 	ld	c, #0x00
      001278                       4342 00110$:
                                   4343 ;src\/Graphics\Graphics.h:257: WRTVRM(SPRATT + (i * 4), 	192);
      001278 79               [ 4] 4344 	ld	a,c
      001279 FE 20            [ 7] 4345 	cp	a,#0x20
      00127B 30 18            [12] 4346 	jr	NC, 00101$
      00127D 26 00            [ 7] 4347 	ld	h, #0x00
      00127F 6F               [ 4] 4348 	ld	l, a
      001280 29               [11] 4349 	add	hl, hl
      001281 29               [11] 4350 	add	hl, hl
      001282 7C               [ 4] 4351 	ld	a, h
      001283 C6 1B            [ 7] 4352 	add	a, #0x1b
      001285 67               [ 4] 4353 	ld	h, a
      001286 C5               [11] 4354 	push	bc
      001287 3E C0            [ 7] 4355 	ld	a, #0xc0
      001289 F5               [11] 4356 	push	af
      00128A 33               [ 6] 4357 	inc	sp
      00128B E5               [11] 4358 	push	hl
      00128C CDr00r00         [17] 4359 	call	_WRTVRM
      00128F F1               [10] 4360 	pop	af
      001290 33               [ 6] 4361 	inc	sp
      001291 C1               [10] 4362 	pop	bc
                                   4363 ;src\/Graphics\Graphics.h:256: for(byte i=0; i<32; i++) {
      001292 0C               [ 4] 4364 	inc	c
      001293 18 E3            [12] 4365 	jr	00110$
      001295                       4366 00101$:
                                   4367 ;src\/Graphics\Graphics.h:266: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001295 21 78 01         [10] 4368 	ld	hl, #0x0178
      001298 E5               [11] 4369 	push	hl
      001299 21r78r04         [10] 4370 	ld	hl, #_pattern_black_0
      00129C E5               [11] 4371 	push	hl
      00129D 21 00 00         [10] 4372 	ld	hl, #0x0000
      0012A0 E5               [11] 4373 	push	hl
      0012A1 CDr00r00         [17] 4374 	call	_LDIRVM
      0012A4 21 06 00         [10] 4375 	ld	hl, #6
      0012A7 39               [11] 4376 	add	hl, sp
      0012A8 F9               [ 6] 4377 	ld	sp, hl
                                   4378 ;src\/Graphics\Graphics.h:269: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012A9 21 78 01         [10] 4379 	ld	hl, #0x0178
      0012AC E5               [11] 4380 	push	hl
      0012AD 21r78r04         [10] 4381 	ld	hl, #_pattern_black_0
      0012B0 E5               [11] 4382 	push	hl
      0012B1 21 00 08         [10] 4383 	ld	hl, #0x0800
      0012B4 E5               [11] 4384 	push	hl
      0012B5 CDr00r00         [17] 4385 	call	_LDIRVM
      0012B8 21 06 00         [10] 4386 	ld	hl, #6
      0012BB 39               [11] 4387 	add	hl, sp
      0012BC F9               [ 6] 4388 	ld	sp, hl
                                   4389 ;src\/Graphics\Graphics.h:272: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012BD 21 78 01         [10] 4390 	ld	hl, #0x0178
      0012C0 E5               [11] 4391 	push	hl
      0012C1 21r78r04         [10] 4392 	ld	hl, #_pattern_black_0
      0012C4 E5               [11] 4393 	push	hl
      0012C5 21 00 10         [10] 4394 	ld	hl, #0x1000
      0012C8 E5               [11] 4395 	push	hl
      0012C9 CDr00r00         [17] 4396 	call	_LDIRVM
      0012CC 21 06 00         [10] 4397 	ld	hl, #6
      0012CF 39               [11] 4398 	add	hl, sp
      0012D0 F9               [ 6] 4399 	ld	sp, hl
                                   4400 ;src\/Graphics\Graphics.h:275: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012D1 21 00 03         [10] 4401 	ld	hl, #0x0300
      0012D4 E5               [11] 4402 	push	hl
      0012D5 21r78r01         [10] 4403 	ld	hl, #_FONT
      0012D8 E5               [11] 4404 	push	hl
      0012D9 21 78 01         [10] 4405 	ld	hl, #0x0178
      0012DC E5               [11] 4406 	push	hl
      0012DD CDr00r00         [17] 4407 	call	_LDIRVM
      0012E0 21 06 00         [10] 4408 	ld	hl, #6
      0012E3 39               [11] 4409 	add	hl, sp
      0012E4 F9               [ 6] 4410 	ld	sp, hl
                                   4411 ;src\/Graphics\Graphics.h:278: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012E5 21 00 03         [10] 4412 	ld	hl, #0x0300
      0012E8 E5               [11] 4413 	push	hl
      0012E9 21r78r01         [10] 4414 	ld	hl, #_FONT
      0012EC E5               [11] 4415 	push	hl
      0012ED 21 78 09         [10] 4416 	ld	hl, #0x0978
      0012F0 E5               [11] 4417 	push	hl
      0012F1 CDr00r00         [17] 4418 	call	_LDIRVM
      0012F4 21 06 00         [10] 4419 	ld	hl, #6
      0012F7 39               [11] 4420 	add	hl, sp
      0012F8 F9               [ 6] 4421 	ld	sp, hl
                                   4422 ;src\/Graphics\Graphics.h:281: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0012F9 21 00 03         [10] 4423 	ld	hl, #0x0300
      0012FC E5               [11] 4424 	push	hl
      0012FD 21r78r01         [10] 4425 	ld	hl, #_FONT
      001300 E5               [11] 4426 	push	hl
      001301 21 78 11         [10] 4427 	ld	hl, #0x1178
      001304 E5               [11] 4428 	push	hl
      001305 CDr00r00         [17] 4429 	call	_LDIRVM
      001308 21 06 00         [10] 4430 	ld	hl, #6
      00130B 39               [11] 4431 	add	hl, sp
      00130C F9               [ 6] 4432 	ld	sp, hl
                                   4433 ;src\/Graphics\Graphics.h:285: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      00130D 0E 00            [ 7] 4434 	ld	c, #0x00
      00130F                       4435 00113$:
                                   4436 ;src\/Graphics\Graphics.h:286: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      00130F 79               [ 4] 4437 	ld	a,c
      001310 FE 07            [ 7] 4438 	cp	a,#0x07
      001312 30 20            [12] 4439 	jr	NC, 00102$
      001314 26 00            [ 7] 4440 	ld	h, #0x00
      001316 6F               [ 4] 4441 	ld	l, a
      001317 29               [11] 4442 	add	hl, hl
      001318 29               [11] 4443 	add	hl, hl
      001319 29               [11] 4444 	add	hl, hl
      00131A 11 70 04         [10] 4445 	ld	de, #0x0470
      00131D 19               [11] 4446 	add	hl, de
      00131E C5               [11] 4447 	push	bc
      00131F 11 38 00         [10] 4448 	ld	de, #0x0038
      001322 D5               [11] 4449 	push	de
      001323 11rE8r05         [10] 4450 	ld	de, #_pattern_title
      001326 D5               [11] 4451 	push	de
      001327 E5               [11] 4452 	push	hl
      001328 CDr00r00         [17] 4453 	call	_LDIRVM
      00132B 21 06 00         [10] 4454 	ld	hl, #6
      00132E 39               [11] 4455 	add	hl, sp
      00132F F9               [ 6] 4456 	ld	sp, hl
      001330 C1               [10] 4457 	pop	bc
                                   4458 ;src\/Graphics\Graphics.h:285: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001331 0C               [ 4] 4459 	inc	c
      001332 18 DB            [12] 4460 	jr	00113$
      001334                       4461 00102$:
                                   4462 ;src\/Graphics\Graphics.h:292: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001334 21 78 01         [10] 4463 	ld	hl, #0x0178
      001337 E5               [11] 4464 	push	hl
      001338 21rF0r05         [10] 4465 	ld	hl, #_color_black_0
      00133B E5               [11] 4466 	push	hl
      00133C 21 00 20         [10] 4467 	ld	hl, #0x2000
      00133F E5               [11] 4468 	push	hl
      001340 CDr00r00         [17] 4469 	call	_LDIRVM
      001343 21 06 00         [10] 4470 	ld	hl, #6
      001346 39               [11] 4471 	add	hl, sp
      001347 F9               [ 6] 4472 	ld	sp, hl
                                   4473 ;src\/Graphics\Graphics.h:294: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001348 21 78 01         [10] 4474 	ld	hl, #0x0178
      00134B E5               [11] 4475 	push	hl
      00134C 21rF0r05         [10] 4476 	ld	hl, #_color_black_0
      00134F E5               [11] 4477 	push	hl
      001350 21 00 28         [10] 4478 	ld	hl, #0x2800
      001353 E5               [11] 4479 	push	hl
      001354 CDr00r00         [17] 4480 	call	_LDIRVM
      001357 21 06 00         [10] 4481 	ld	hl, #6
      00135A 39               [11] 4482 	add	hl, sp
      00135B F9               [ 6] 4483 	ld	sp, hl
                                   4484 ;src\/Graphics\Graphics.h:296: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      00135C 21 78 01         [10] 4485 	ld	hl, #0x0178
      00135F E5               [11] 4486 	push	hl
      001360 21rF0r05         [10] 4487 	ld	hl, #_color_black_0
      001363 E5               [11] 4488 	push	hl
      001364 21 00 30         [10] 4489 	ld	hl, #0x3000
      001367 E5               [11] 4490 	push	hl
      001368 CDr00r00         [17] 4491 	call	_LDIRVM
      00136B 21 06 00         [10] 4492 	ld	hl, #6
      00136E 39               [11] 4493 	add	hl, sp
      00136F F9               [ 6] 4494 	ld	sp, hl
                                   4495 ;src\/Graphics\Graphics.h:303: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001370 0E 00            [ 7] 4496 	ld	c, #0x00
      001372                       4497 00116$:
                                   4498 ;src\/Graphics\Graphics.h:304: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001372 79               [ 4] 4499 	ld	a,c
      001373 FE 60            [ 7] 4500 	cp	a,#0x60
      001375 30 20            [12] 4501 	jr	NC, 00103$
      001377 26 00            [ 7] 4502 	ld	h, #0x00
      001379 6F               [ 4] 4503 	ld	l, a
      00137A 29               [11] 4504 	add	hl, hl
      00137B 29               [11] 4505 	add	hl, hl
      00137C 29               [11] 4506 	add	hl, hl
      00137D 11 78 21         [10] 4507 	ld	de, #0x2178
      001380 19               [11] 4508 	add	hl, de
      001381 C5               [11] 4509 	push	bc
      001382 11 08 00         [10] 4510 	ld	de, #0x0008
      001385 D5               [11] 4511 	push	de
      001386 11r68r07         [10] 4512 	ld	de, #_color_font_2
      001389 D5               [11] 4513 	push	de
      00138A E5               [11] 4514 	push	hl
      00138B CDr00r00         [17] 4515 	call	_LDIRVM
      00138E 21 06 00         [10] 4516 	ld	hl, #6
      001391 39               [11] 4517 	add	hl, sp
      001392 F9               [ 6] 4518 	ld	sp, hl
      001393 C1               [10] 4519 	pop	bc
                                   4520 ;src\/Graphics\Graphics.h:303: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001394 0C               [ 4] 4521 	inc	c
      001395 18 DB            [12] 4522 	jr	00116$
      001397                       4523 00103$:
                                   4524 ;src\/Graphics\Graphics.h:307: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001397 0E 00            [ 7] 4525 	ld	c, #0x00
      001399                       4526 00119$:
                                   4527 ;src\/Graphics\Graphics.h:308: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001399 79               [ 4] 4528 	ld	a,c
      00139A FE 60            [ 7] 4529 	cp	a,#0x60
      00139C 30 20            [12] 4530 	jr	NC, 00104$
      00139E 26 00            [ 7] 4531 	ld	h, #0x00
      0013A0 6F               [ 4] 4532 	ld	l, a
      0013A1 29               [11] 4533 	add	hl, hl
      0013A2 29               [11] 4534 	add	hl, hl
      0013A3 29               [11] 4535 	add	hl, hl
      0013A4 11 78 29         [10] 4536 	ld	de, #0x2978
      0013A7 19               [11] 4537 	add	hl, de
      0013A8 C5               [11] 4538 	push	bc
      0013A9 11 08 00         [10] 4539 	ld	de, #0x0008
      0013AC D5               [11] 4540 	push	de
      0013AD 11r68r07         [10] 4541 	ld	de, #_color_font_2
      0013B0 D5               [11] 4542 	push	de
      0013B1 E5               [11] 4543 	push	hl
      0013B2 CDr00r00         [17] 4544 	call	_LDIRVM
      0013B5 21 06 00         [10] 4545 	ld	hl, #6
      0013B8 39               [11] 4546 	add	hl, sp
      0013B9 F9               [ 6] 4547 	ld	sp, hl
      0013BA C1               [10] 4548 	pop	bc
                                   4549 ;src\/Graphics\Graphics.h:307: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0013BB 0C               [ 4] 4550 	inc	c
      0013BC 18 DB            [12] 4551 	jr	00119$
      0013BE                       4552 00104$:
                                   4553 ;src\/Graphics\Graphics.h:311: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0013BE 0E 00            [ 7] 4554 	ld	c, #0x00
      0013C0                       4555 00122$:
                                   4556 ;src\/Graphics\Graphics.h:312: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      0013C0 79               [ 4] 4557 	ld	a,c
      0013C1 FE 60            [ 7] 4558 	cp	a,#0x60
      0013C3 30 20            [12] 4559 	jr	NC, 00105$
      0013C5 26 00            [ 7] 4560 	ld	h, #0x00
      0013C7 6F               [ 4] 4561 	ld	l, a
      0013C8 29               [11] 4562 	add	hl, hl
      0013C9 29               [11] 4563 	add	hl, hl
      0013CA 29               [11] 4564 	add	hl, hl
      0013CB 11 78 31         [10] 4565 	ld	de, #0x3178
      0013CE 19               [11] 4566 	add	hl, de
      0013CF C5               [11] 4567 	push	bc
      0013D0 11 08 00         [10] 4568 	ld	de, #0x0008
      0013D3 D5               [11] 4569 	push	de
      0013D4 11r68r07         [10] 4570 	ld	de, #_color_font_2
      0013D7 D5               [11] 4571 	push	de
      0013D8 E5               [11] 4572 	push	hl
      0013D9 CDr00r00         [17] 4573 	call	_LDIRVM
      0013DC 21 06 00         [10] 4574 	ld	hl, #6
      0013DF 39               [11] 4575 	add	hl, sp
      0013E0 F9               [ 6] 4576 	ld	sp, hl
      0013E1 C1               [10] 4577 	pop	bc
                                   4578 ;src\/Graphics\Graphics.h:311: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      0013E2 0C               [ 4] 4579 	inc	c
      0013E3 18 DB            [12] 4580 	jr	00122$
      0013E5                       4581 00105$:
                                   4582 ;src\/Graphics\Graphics.h:320: for(byte i = 0; i < 10; i++) {
      0013E5 0E 00            [ 7] 4583 	ld	c, #0x00
      0013E7                       4584 00125$:
                                   4585 ;src\/Graphics\Graphics.h:321: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      0013E7 79               [ 4] 4586 	ld	a,c
      0013E8 FE 0A            [ 7] 4587 	cp	a,#0x0a
      0013EA 30 20            [12] 4588 	jr	NC, 00106$
      0013EC 26 00            [ 7] 4589 	ld	h, #0x00
      0013EE 6F               [ 4] 4590 	ld	l, a
      0013EF 29               [11] 4591 	add	hl, hl
      0013F0 29               [11] 4592 	add	hl, hl
      0013F1 29               [11] 4593 	add	hl, hl
      0013F2 11 F8 21         [10] 4594 	ld	de, #0x21f8
      0013F5 19               [11] 4595 	add	hl, de
      0013F6 C5               [11] 4596 	push	bc
      0013F7 11 08 00         [10] 4597 	ld	de, #0x0008
      0013FA D5               [11] 4598 	push	de
      0013FB 11r60r07         [10] 4599 	ld	de, #_color_font_1
      0013FE D5               [11] 4600 	push	de
      0013FF E5               [11] 4601 	push	hl
      001400 CDr00r00         [17] 4602 	call	_LDIRVM
      001403 21 06 00         [10] 4603 	ld	hl, #6
      001406 39               [11] 4604 	add	hl, sp
      001407 F9               [ 6] 4605 	ld	sp, hl
      001408 C1               [10] 4606 	pop	bc
                                   4607 ;src\/Graphics\Graphics.h:320: for(byte i = 0; i < 10; i++) {
      001409 0C               [ 4] 4608 	inc	c
      00140A 18 DB            [12] 4609 	jr	00125$
      00140C                       4610 00106$:
                                   4611 ;src\/Graphics\Graphics.h:324: for(byte i = 0; i < 10; i++) {
      00140C 0E 00            [ 7] 4612 	ld	c, #0x00
      00140E                       4613 00128$:
                                   4614 ;src\/Graphics\Graphics.h:325: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00140E 79               [ 4] 4615 	ld	a,c
      00140F FE 0A            [ 7] 4616 	cp	a,#0x0a
      001411 30 20            [12] 4617 	jr	NC, 00107$
      001413 26 00            [ 7] 4618 	ld	h, #0x00
      001415 6F               [ 4] 4619 	ld	l, a
      001416 29               [11] 4620 	add	hl, hl
      001417 29               [11] 4621 	add	hl, hl
      001418 29               [11] 4622 	add	hl, hl
      001419 11 F8 29         [10] 4623 	ld	de, #0x29f8
      00141C 19               [11] 4624 	add	hl, de
      00141D C5               [11] 4625 	push	bc
      00141E 11 08 00         [10] 4626 	ld	de, #0x0008
      001421 D5               [11] 4627 	push	de
      001422 11r60r07         [10] 4628 	ld	de, #_color_font_1
      001425 D5               [11] 4629 	push	de
      001426 E5               [11] 4630 	push	hl
      001427 CDr00r00         [17] 4631 	call	_LDIRVM
      00142A 21 06 00         [10] 4632 	ld	hl, #6
      00142D 39               [11] 4633 	add	hl, sp
      00142E F9               [ 6] 4634 	ld	sp, hl
      00142F C1               [10] 4635 	pop	bc
                                   4636 ;src\/Graphics\Graphics.h:324: for(byte i = 0; i < 10; i++) {
      001430 0C               [ 4] 4637 	inc	c
      001431 18 DB            [12] 4638 	jr	00128$
      001433                       4639 00107$:
                                   4640 ;src\/Graphics\Graphics.h:328: for(byte i = 0; i < 10; i++) {
      001433 DD 36 FF 00      [19] 4641 	ld	-1 (ix), #0
      001437                       4642 00131$:
      001437 DD 7E FF         [19] 4643 	ld	a, -1 (ix)
      00143A D6 0A            [ 7] 4644 	sub	a, #0x0a
      00143C 30 22            [12] 4645 	jr	NC, 00108$
                                   4646 ;src\/Graphics\Graphics.h:329: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      00143E 01r60r07         [10] 4647 	ld	bc, #_color_font_1
      001441 DD 6E FF         [19] 4648 	ld	l, -1 (ix)
      001444 26 00            [ 7] 4649 	ld	h, #0x00
      001446 29               [11] 4650 	add	hl, hl
      001447 29               [11] 4651 	add	hl, hl
      001448 29               [11] 4652 	add	hl, hl
      001449 11 F8 31         [10] 4653 	ld	de, #0x31f8
      00144C 19               [11] 4654 	add	hl, de
      00144D 11 08 00         [10] 4655 	ld	de, #0x0008
      001450 D5               [11] 4656 	push	de
      001451 C5               [11] 4657 	push	bc
      001452 E5               [11] 4658 	push	hl
      001453 CDr00r00         [17] 4659 	call	_LDIRVM
      001456 21 06 00         [10] 4660 	ld	hl, #6
      001459 39               [11] 4661 	add	hl, sp
      00145A F9               [ 6] 4662 	ld	sp, hl
                                   4663 ;src\/Graphics\Graphics.h:328: for(byte i = 0; i < 10; i++) {
      00145B DD 34 FF         [23] 4664 	inc	-1 (ix)
      00145E 18 D7            [12] 4665 	jr	00131$
      001460                       4666 00108$:
                                   4667 ;src\/Graphics\Graphics.h:333: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001460 21 38 00         [10] 4668 	ld	hl, #0x0038
      001463 E5               [11] 4669 	push	hl
      001464 21r70r07         [10] 4670 	ld	hl, #_color_title_1
      001467 E5               [11] 4671 	push	hl
      001468 21 70 24         [10] 4672 	ld	hl, #0x2470
      00146B E5               [11] 4673 	push	hl
      00146C CDr00r00         [17] 4674 	call	_LDIRVM
      00146F 21 06 00         [10] 4675 	ld	hl, #6
      001472 39               [11] 4676 	add	hl, sp
      001473 F9               [ 6] 4677 	ld	sp, hl
                                   4678 ;src\/Graphics\Graphics.h:341: ENASCR();	// Enable screen
      001474 CDr00r00         [17] 4679 	call	_ENASCR
                                   4680 ;src\/Graphics\Graphics.h:342: }
      001477 33               [ 6] 4681 	inc	sp
      001478 DD E1            [14] 4682 	pop	ix
      00147A C9               [10] 4683 	ret
                                   4684 ;src\/Graphics\Graphics.h:344: void DrawBlock(byte col, byte line, byte tile) {
                                   4685 ;	---------------------------------
                                   4686 ; Function DrawBlock
                                   4687 ; ---------------------------------
      00147B                       4688 _DrawBlock::
      00147B DD E5            [15] 4689 	push	ix
      00147D DD 21 00 00      [14] 4690 	ld	ix,#0
      001481 DD 39            [15] 4691 	add	ix,sp
                                   4692 ;src\/Graphics\Graphics.h:346: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001483 DD 6E 04         [19] 4693 	ld	l, 4 (ix)
      001486 26 00            [ 7] 4694 	ld	h, #0x00
      001488 29               [11] 4695 	add	hl, hl
      001489 4D               [ 4] 4696 	ld	c, l
      00148A 44               [ 4] 4697 	ld	b, h
      00148B DD 6E 05         [19] 4698 	ld	l, 5 (ix)
      00148E 26 00            [ 7] 4699 	ld	h, #0x00
      001490 29               [11] 4700 	add	hl, hl
      001491 29               [11] 4701 	add	hl, hl
      001492 29               [11] 4702 	add	hl, hl
      001493 29               [11] 4703 	add	hl, hl
      001494 29               [11] 4704 	add	hl, hl
      001495 29               [11] 4705 	add	hl, hl
      001496 11 0A 18         [10] 4706 	ld	de, #0x180a
      001499 19               [11] 4707 	add	hl, de
      00149A 09               [11] 4708 	add	hl, bc
      00149B EB               [ 4] 4709 	ex	de, hl
                                   4710 ;src\/Graphics\Graphics.h:348: WRTVRM(baseAddr, tile);
      00149C D5               [11] 4711 	push	de
      00149D DD 7E 06         [19] 4712 	ld	a, 6 (ix)
      0014A0 F5               [11] 4713 	push	af
      0014A1 33               [ 6] 4714 	inc	sp
      0014A2 D5               [11] 4715 	push	de
      0014A3 CDr00r00         [17] 4716 	call	_WRTVRM
      0014A6 F1               [10] 4717 	pop	af
      0014A7 33               [ 6] 4718 	inc	sp
      0014A8 D1               [10] 4719 	pop	de
                                   4720 ;src\/Graphics\Graphics.h:349: WRTVRM(baseAddr + 1, tile + 1);
      0014A9 DD 4E 06         [19] 4721 	ld	c, 6 (ix)
      0014AC 79               [ 4] 4722 	ld	a, c
      0014AD 3C               [ 4] 4723 	inc	a
      0014AE 6B               [ 4] 4724 	ld	l, e
      0014AF 62               [ 4] 4725 	ld	h, d
      0014B0 23               [ 6] 4726 	inc	hl
      0014B1 C5               [11] 4727 	push	bc
      0014B2 D5               [11] 4728 	push	de
      0014B3 F5               [11] 4729 	push	af
      0014B4 33               [ 6] 4730 	inc	sp
      0014B5 E5               [11] 4731 	push	hl
      0014B6 CDr00r00         [17] 4732 	call	_WRTVRM
      0014B9 F1               [10] 4733 	pop	af
      0014BA 33               [ 6] 4734 	inc	sp
      0014BB D1               [10] 4735 	pop	de
      0014BC C1               [10] 4736 	pop	bc
                                   4737 ;src\/Graphics\Graphics.h:350: WRTVRM(baseAddr + 32, tile + 2);
      0014BD 41               [ 4] 4738 	ld	b, c
      0014BE 04               [ 4] 4739 	inc	b
      0014BF 04               [ 4] 4740 	inc	b
      0014C0 21 20 00         [10] 4741 	ld	hl, #0x0020
      0014C3 19               [11] 4742 	add	hl, de
      0014C4 C5               [11] 4743 	push	bc
      0014C5 D5               [11] 4744 	push	de
      0014C6 C5               [11] 4745 	push	bc
      0014C7 33               [ 6] 4746 	inc	sp
      0014C8 E5               [11] 4747 	push	hl
      0014C9 CDr00r00         [17] 4748 	call	_WRTVRM
      0014CC F1               [10] 4749 	pop	af
      0014CD 33               [ 6] 4750 	inc	sp
      0014CE D1               [10] 4751 	pop	de
      0014CF C1               [10] 4752 	pop	bc
                                   4753 ;src\/Graphics\Graphics.h:351: WRTVRM(baseAddr + 33, tile + 3);
      0014D0 0C               [ 4] 4754 	inc	c
      0014D1 0C               [ 4] 4755 	inc	c
      0014D2 0C               [ 4] 4756 	inc	c
      0014D3 21 21 00         [10] 4757 	ld	hl, #0x0021
      0014D6 19               [11] 4758 	add	hl, de
      0014D7 79               [ 4] 4759 	ld	a, c
      0014D8 F5               [11] 4760 	push	af
      0014D9 33               [ 6] 4761 	inc	sp
      0014DA E5               [11] 4762 	push	hl
      0014DB CDr00r00         [17] 4763 	call	_WRTVRM
      0014DE F1               [10] 4764 	pop	af
      0014DF 33               [ 6] 4765 	inc	sp
                                   4766 ;src\/Graphics\Graphics.h:352: }
      0014E0 DD E1            [14] 4767 	pop	ix
      0014E2 C9               [10] 4768 	ret
                                   4769 ;src\/Graphics\Graphics.h:354: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   4770 ;	---------------------------------
                                   4771 ; Function DrawBlock_SameTile
                                   4772 ; ---------------------------------
      0014E3                       4773 _DrawBlock_SameTile::
      0014E3 DD E5            [15] 4774 	push	ix
      0014E5 DD 21 00 00      [14] 4775 	ld	ix,#0
      0014E9 DD 39            [15] 4776 	add	ix,sp
                                   4777 ;src\/Graphics\Graphics.h:356: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      0014EB DD 6E 04         [19] 4778 	ld	l, 4 (ix)
      0014EE 26 00            [ 7] 4779 	ld	h, #0x00
      0014F0 29               [11] 4780 	add	hl, hl
      0014F1 4D               [ 4] 4781 	ld	c, l
      0014F2 44               [ 4] 4782 	ld	b, h
      0014F3 DD 6E 05         [19] 4783 	ld	l, 5 (ix)
      0014F6 26 00            [ 7] 4784 	ld	h, #0x00
      0014F8 29               [11] 4785 	add	hl, hl
      0014F9 29               [11] 4786 	add	hl, hl
      0014FA 29               [11] 4787 	add	hl, hl
      0014FB 29               [11] 4788 	add	hl, hl
      0014FC 29               [11] 4789 	add	hl, hl
      0014FD 29               [11] 4790 	add	hl, hl
      0014FE 11 0A 18         [10] 4791 	ld	de, #0x180a
      001501 19               [11] 4792 	add	hl, de
      001502 09               [11] 4793 	add	hl, bc
      001503 EB               [ 4] 4794 	ex	de, hl
                                   4795 ;src\/Graphics\Graphics.h:358: WRTVRM(baseAddr, tile);
      001504 D5               [11] 4796 	push	de
      001505 DD 7E 06         [19] 4797 	ld	a, 6 (ix)
      001508 F5               [11] 4798 	push	af
      001509 33               [ 6] 4799 	inc	sp
      00150A D5               [11] 4800 	push	de
      00150B CDr00r00         [17] 4801 	call	_WRTVRM
      00150E F1               [10] 4802 	pop	af
      00150F 33               [ 6] 4803 	inc	sp
      001510 D1               [10] 4804 	pop	de
                                   4805 ;src\/Graphics\Graphics.h:359: WRTVRM(baseAddr + 1, tile);
      001511 4B               [ 4] 4806 	ld	c, e
      001512 42               [ 4] 4807 	ld	b, d
      001513 03               [ 6] 4808 	inc	bc
      001514 D5               [11] 4809 	push	de
      001515 DD 7E 06         [19] 4810 	ld	a, 6 (ix)
      001518 F5               [11] 4811 	push	af
      001519 33               [ 6] 4812 	inc	sp
      00151A C5               [11] 4813 	push	bc
      00151B CDr00r00         [17] 4814 	call	_WRTVRM
      00151E F1               [10] 4815 	pop	af
      00151F 33               [ 6] 4816 	inc	sp
      001520 D1               [10] 4817 	pop	de
                                   4818 ;src\/Graphics\Graphics.h:360: WRTVRM(baseAddr + 32, tile);
      001521 21 20 00         [10] 4819 	ld	hl, #0x0020
      001524 19               [11] 4820 	add	hl, de
      001525 D5               [11] 4821 	push	de
      001526 DD 7E 06         [19] 4822 	ld	a, 6 (ix)
      001529 F5               [11] 4823 	push	af
      00152A 33               [ 6] 4824 	inc	sp
      00152B E5               [11] 4825 	push	hl
      00152C CDr00r00         [17] 4826 	call	_WRTVRM
      00152F F1               [10] 4827 	pop	af
      001530 33               [ 6] 4828 	inc	sp
      001531 D1               [10] 4829 	pop	de
                                   4830 ;src\/Graphics\Graphics.h:361: WRTVRM(baseAddr + 33, tile);
      001532 21 21 00         [10] 4831 	ld	hl, #0x0021
      001535 19               [11] 4832 	add	hl, de
      001536 DD 7E 06         [19] 4833 	ld	a, 6 (ix)
      001539 F5               [11] 4834 	push	af
      00153A 33               [ 6] 4835 	inc	sp
      00153B E5               [11] 4836 	push	hl
      00153C CDr00r00         [17] 4837 	call	_WRTVRM
      00153F F1               [10] 4838 	pop	af
      001540 33               [ 6] 4839 	inc	sp
                                   4840 ;src\/Graphics\Graphics.h:362: }
      001541 DD E1            [14] 4841 	pop	ix
      001543 C9               [10] 4842 	ret
                                   4843 ;src\/Graphics\Graphics.h:364: void DrawLine(byte line) {
                                   4844 ;	---------------------------------
                                   4845 ; Function DrawLine
                                   4846 ; ---------------------------------
      001544                       4847 _DrawLine::
      001544 DD E5            [15] 4848 	push	ix
      001546 DD 21 00 00      [14] 4849 	ld	ix,#0
      00154A DD 39            [15] 4850 	add	ix,sp
                                   4851 ;src\/Graphics\Graphics.h:365: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00154C DD 4E 04         [19] 4852 	ld	c, 4 (ix)
      00154F 06 00            [ 7] 4853 	ld	b, #0x00
      001551                       4854 00103$:
      001551 78               [ 4] 4855 	ld	a, b
      001552 D6 06            [ 7] 4856 	sub	a, #0x06
      001554 30 23            [12] 4857 	jr	NC, 00105$
                                   4858 ;src\/Graphics\Graphics.h:366: DrawBlock(col, line, playfield[col][line]);
      001556 58               [ 4] 4859 	ld	e, b
      001557 16 00            [ 7] 4860 	ld	d, #0x00
      001559 6B               [ 4] 4861 	ld	l, e
      00155A 62               [ 4] 4862 	ld	h, d
      00155B 29               [11] 4863 	add	hl, hl
      00155C 19               [11] 4864 	add	hl, de
      00155D 29               [11] 4865 	add	hl, hl
      00155E 29               [11] 4866 	add	hl, hl
      00155F 11r00r00         [10] 4867 	ld	de, #_playfield
      001562 19               [11] 4868 	add	hl, de
      001563 59               [ 4] 4869 	ld	e, c
      001564 16 00            [ 7] 4870 	ld	d, #0x00
      001566 19               [11] 4871 	add	hl, de
      001567 7E               [ 7] 4872 	ld	a, (hl)
      001568 C5               [11] 4873 	push	bc
      001569 F5               [11] 4874 	push	af
      00156A 33               [ 6] 4875 	inc	sp
      00156B 79               [ 4] 4876 	ld	a, c
      00156C F5               [11] 4877 	push	af
      00156D 33               [ 6] 4878 	inc	sp
      00156E C5               [11] 4879 	push	bc
      00156F 33               [ 6] 4880 	inc	sp
      001570 CDr7Br14         [17] 4881 	call	_DrawBlock
      001573 F1               [10] 4882 	pop	af
      001574 33               [ 6] 4883 	inc	sp
      001575 C1               [10] 4884 	pop	bc
                                   4885 ;src\/Graphics\Graphics.h:365: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001576 04               [ 4] 4886 	inc	b
      001577 18 D8            [12] 4887 	jr	00103$
      001579                       4888 00105$:
                                   4889 ;src\/Graphics\Graphics.h:368: }
      001579 DD E1            [14] 4890 	pop	ix
      00157B C9               [10] 4891 	ret
                                   4892 ;src\/Graphics\Graphics.h:370: void DrawPiece(byte line) {
                                   4893 ;	---------------------------------
                                   4894 ; Function DrawPiece
                                   4895 ; ---------------------------------
      00157C                       4896 _DrawPiece::
                                   4897 ;src\/Graphics\Graphics.h:371: DrawLine(line);
      00157C 21 02 00         [10] 4898 	ld	hl, #2
      00157F 39               [11] 4899 	add	hl, sp
      001580 7E               [ 7] 4900 	ld	a, (hl)
      001581 F5               [11] 4901 	push	af
      001582 33               [ 6] 4902 	inc	sp
      001583 CDr44r15         [17] 4903 	call	_DrawLine
      001586 33               [ 6] 4904 	inc	sp
                                   4905 ;src\/Graphics\Graphics.h:372: DrawLine(line + 1);
      001587 21 02 00         [10] 4906 	ld	hl, #2
      00158A 39               [11] 4907 	add	hl, sp
      00158B 46               [ 7] 4908 	ld	b, (hl)
      00158C 78               [ 4] 4909 	ld	a, b
      00158D 3C               [ 4] 4910 	inc	a
      00158E C5               [11] 4911 	push	bc
      00158F F5               [11] 4912 	push	af
      001590 33               [ 6] 4913 	inc	sp
      001591 CDr44r15         [17] 4914 	call	_DrawLine
      001594 33               [ 6] 4915 	inc	sp
      001595 C1               [10] 4916 	pop	bc
                                   4917 ;src\/Graphics\Graphics.h:373: DrawLine(line + 2);
      001596 04               [ 4] 4918 	inc	b
      001597 04               [ 4] 4919 	inc	b
      001598 C5               [11] 4920 	push	bc
      001599 33               [ 6] 4921 	inc	sp
      00159A CDr44r15         [17] 4922 	call	_DrawLine
      00159D 33               [ 6] 4923 	inc	sp
                                   4924 ;src\/Graphics\Graphics.h:374: }
      00159E C9               [10] 4925 	ret
                                   4926 ;src\/Graphics\Graphics.h:376: void DrawPlayfield() {
                                   4927 ;	---------------------------------
                                   4928 ; Function DrawPlayfield
                                   4929 ; ---------------------------------
      00159F                       4930 _DrawPlayfield::
                                   4931 ;src\/Graphics\Graphics.h:377: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00159F 06 00            [ 7] 4932 	ld	b, #0x00
      0015A1                       4933 00103$:
      0015A1 78               [ 4] 4934 	ld	a, b
      0015A2 D6 0C            [ 7] 4935 	sub	a, #0x0c
      0015A4 D0               [11] 4936 	ret	NC
                                   4937 ;src\/Graphics\Graphics.h:378: DrawLine(line);
      0015A5 C5               [11] 4938 	push	bc
      0015A6 C5               [11] 4939 	push	bc
      0015A7 33               [ 6] 4940 	inc	sp
      0015A8 CDr44r15         [17] 4941 	call	_DrawLine
      0015AB 33               [ 6] 4942 	inc	sp
      0015AC C1               [10] 4943 	pop	bc
                                   4944 ;src\/Graphics\Graphics.h:377: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0015AD 04               [ 4] 4945 	inc	b
                                   4946 ;src\/Graphics\Graphics.h:380: }
      0015AE 18 F1            [12] 4947 	jr	00103$
                                   4948 ;src\/Sound.h:1: void SoundFx_2() {
                                   4949 ;	---------------------------------
                                   4950 ; Function SoundFx_2
                                   4951 ; ---------------------------------
      0015B0                       4952 _SoundFx_2::
                                   4953 ;src\/Sound.h:2: GICINI();
      0015B0 CDr00r00         [17] 4954 	call	_GICINI
                                   4955 ;src\/Sound.h:17: WRTPSG(0x0f08);
      0015B3 21 08 0F         [10] 4956 	ld	hl, #0x0f08
      0015B6 CDr00r00         [17] 4957 	call	_WRTPSG
                                   4958 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0015B9 0E 00            [ 7] 4959 	ld	c, #0x00
      0015BB                       4960 00104$:
      0015BB 79               [ 4] 4961 	ld	a, c
      0015BC D6 FF            [ 7] 4962 	sub	a, #0xff
      0015BE 30 11            [12] 4963 	jr	NC, 00101$
                                   4964 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      0015C0 C5               [11] 4965 	push	bc
      0015C1 21 00 5D         [10] 4966 	ld	hl, #0x5d00
      0015C4 CDr00r00         [17] 4967 	call	_WRTPSG
      0015C7 21 01 00         [10] 4968 	ld	hl, #0x0001
      0015CA CDr00r00         [17] 4969 	call	_WRTPSG
      0015CD C1               [10] 4970 	pop	bc
                                   4971 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      0015CE 0C               [ 4] 4972 	inc	c
      0015CF 18 EA            [12] 4973 	jr	00104$
      0015D1                       4974 00101$:
                                   4975 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0015D1 0E 00            [ 7] 4976 	ld	c, #0x00
      0015D3                       4977 00107$:
      0015D3 79               [ 4] 4978 	ld	a, c
      0015D4 D6 FF            [ 7] 4979 	sub	a, #0xff
      0015D6 30 11            [12] 4980 	jr	NC, 00102$
                                   4981 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      0015D8 C5               [11] 4982 	push	bc
      0015D9 21 00 2D         [10] 4983 	ld	hl, #0x2d00
      0015DC CDr00r00         [17] 4984 	call	_WRTPSG
      0015DF 21 01 00         [10] 4985 	ld	hl, #0x0001
      0015E2 CDr00r00         [17] 4986 	call	_WRTPSG
      0015E5 C1               [10] 4987 	pop	bc
                                   4988 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      0015E6 0C               [ 4] 4989 	inc	c
      0015E7 18 EA            [12] 4990 	jr	00107$
      0015E9                       4991 00102$:
                                   4992 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      0015E9 21 08 00         [10] 4993 	ld	hl, #0x0008
                                   4994 ;src\/Sound.h:30: }
      0015EC C3r00r00         [10] 4995 	jp	_WRTPSG
                                   4996 ;src\/Sound.h:32: void SoundFx_1() {
                                   4997 ;	---------------------------------
                                   4998 ; Function SoundFx_1
                                   4999 ; ---------------------------------
      0015EF                       5000 _SoundFx_1::
                                   5001 ;src\/Sound.h:34: GICINI();
      0015EF CDr00r00         [17] 5002 	call	_GICINI
                                   5003 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      0015F2 21 06 97         [10] 5004 	ld	hl, #0x9706
      0015F5 CDr00r00         [17] 5005 	call	_WRTPSG
                                   5006 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      0015F8 21 07 81         [10] 5007 	ld	hl, #0x8107
      0015FB CDr00r00         [17] 5008 	call	_WRTPSG
                                   5009 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      0015FE 21 08 10         [10] 5010 	ld	hl, #0x1008
      001601 CDr00r00         [17] 5011 	call	_WRTPSG
                                   5012 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001604 21 0C 13         [10] 5013 	ld	hl, #0x130c
      001607 CDr00r00         [17] 5014 	call	_WRTPSG
                                   5015 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      00160A 21 0D 01         [10] 5016 	ld	hl, #0x010d
                                   5017 ;src\/Sound.h:49: }
      00160D C3r00r00         [10] 5018 	jp	_WRTPSG
                                   5019 ;src\/CheckPlayfield.h:5: void CheckIfPlayfieldIsValid() {
                                   5020 ;	---------------------------------
                                   5021 ; Function CheckIfPlayfieldIsValid
                                   5022 ; ---------------------------------
      001610                       5023 _CheckIfPlayfieldIsValid::
      001610 DD E5            [15] 5024 	push	ix
      001612 DD 21 00 00      [14] 5025 	ld	ix,#0
      001616 DD 39            [15] 5026 	add	ix,sp
      001618 F5               [11] 5027 	push	af
      001619 F5               [11] 5028 	push	af
      00161A 3B               [ 6] 5029 	dec	sp
                                   5030 ;src\/CheckPlayfield.h:6: bool found = FALSE;
      00161B DD 36 FB 00      [19] 5031 	ld	-5 (ix), #0
                                   5032 ;src\/CheckPlayfield.h:7: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00161F DD 36 FC 00      [19] 5033 	ld	-4 (ix), #0
      001623 DD 36 FE 00      [19] 5034 	ld	-2 (ix), #0
      001627                       5035 00119$:
      001627 DD 7E FE         [19] 5036 	ld	a, -2 (ix)
      00162A D6 0C            [ 7] 5037 	sub	a, #0x0c
      00162C D2rBFr16         [10] 5038 	jp	NC, 00121$
                                   5039 ;src\/CheckPlayfield.h:8: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00162F DD 36 FD 00      [19] 5040 	ld	-3 (ix), #0
      001633 DD 36 FF 00      [19] 5041 	ld	-1 (ix), #0
      001637                       5042 00116$:
      001637 DD 7E FF         [19] 5043 	ld	a, -1 (ix)
      00163A D6 06            [ 7] 5044 	sub	a, #0x06
      00163C 30 75            [12] 5045 	jr	NC, 00120$
                                   5046 ;src\/CheckPlayfield.h:9: for(byte item = 0; item < 5; item++) {
      00163E 0E 00            [ 7] 5047 	ld	c, #0x00
      001640                       5048 00113$:
      001640 79               [ 4] 5049 	ld	a, c
      001641 D6 05            [ 7] 5050 	sub	a, #0x05
      001643 30 33            [12] 5051 	jr	NC, 00104$
                                   5052 ;src\/CheckPlayfield.h:10: found = FALSE;
      001645 DD 36 FB 00      [19] 5053 	ld	-5 (ix), #0
                                   5054 ;src\/CheckPlayfield.h:11: if(playfieldTemp[col][line] == pieces[item] || playfieldTemp[col][line] == EMPTY) {
      001649 DD 5E FF         [19] 5055 	ld	e, -1 (ix)
      00164C 16 00            [ 7] 5056 	ld	d, #0x00
      00164E 6B               [ 4] 5057 	ld	l, e
      00164F 62               [ 4] 5058 	ld	h, d
      001650 29               [11] 5059 	add	hl, hl
      001651 19               [11] 5060 	add	hl, de
      001652 29               [11] 5061 	add	hl, hl
      001653 29               [11] 5062 	add	hl, hl
      001654 11r48r00         [10] 5063 	ld	de, #_playfieldTemp
      001657 19               [11] 5064 	add	hl, de
      001658 7D               [ 4] 5065 	ld	a, l
      001659 DD 86 FE         [19] 5066 	add	a, -2 (ix)
      00165C 5F               [ 4] 5067 	ld	e, a
      00165D 7C               [ 4] 5068 	ld	a, h
      00165E CE 00            [ 7] 5069 	adc	a, #0x00
      001660 57               [ 4] 5070 	ld	d, a
      001661 21r18r00         [10] 5071 	ld	hl, #_pieces
      001664 06 00            [ 7] 5072 	ld	b, #0x00
      001666 09               [11] 5073 	add	hl, bc
      001667 46               [ 7] 5074 	ld	b, (hl)
      001668 1A               [ 7] 5075 	ld	a, (de)
      001669 B8               [ 4] 5076 	cp	a, b
      00166A 28 03            [12] 5077 	jr	Z, 00101$
      00166C B7               [ 4] 5078 	or	a, a
      00166D 20 06            [12] 5079 	jr	NZ, 00114$
      00166F                       5080 00101$:
                                   5081 ;src\/CheckPlayfield.h:12: found = TRUE;
      00166F DD 36 FB 01      [19] 5082 	ld	-5 (ix), #0x01
                                   5083 ;src\/CheckPlayfield.h:13: break;
      001673 18 03            [12] 5084 	jr	00104$
      001675                       5085 00114$:
                                   5086 ;src\/CheckPlayfield.h:9: for(byte item = 0; item < 5; item++) {
      001675 0C               [ 4] 5087 	inc	c
      001676 18 C8            [12] 5088 	jr	00113$
      001678                       5089 00104$:
                                   5090 ;src\/CheckPlayfield.h:16: if(!found) {
      001678 DD 7E FB         [19] 5091 	ld	a, -5 (ix)
      00167B B7               [ 4] 5092 	or	a, a
      00167C 20 2A            [12] 5093 	jr	NZ, 00117$
                                   5094 ;src\/CheckPlayfield.h:17: d_col = col;
      00167E DD 7E FD         [19] 5095 	ld	a, -3 (ix)
      001681 32r0Br00         [13] 5096 	ld	(#_d_col),a
                                   5097 ;src\/CheckPlayfield.h:18: d_line = line;
      001684 DD 7E FC         [19] 5098 	ld	a, -4 (ix)
      001687 32r0Cr00         [13] 5099 	ld	(#_d_line),a
                                   5100 ;src\/CheckPlayfield.h:19: d_value = playfieldTemp[col][line];
      00168A DD 4E FD         [19] 5101 	ld	c, -3 (ix)
      00168D 06 00            [ 7] 5102 	ld	b, #0x00
      00168F 69               [ 4] 5103 	ld	l, c
      001690 60               [ 4] 5104 	ld	h, b
      001691 29               [11] 5105 	add	hl, hl
      001692 09               [11] 5106 	add	hl, bc
      001693 29               [11] 5107 	add	hl, hl
      001694 29               [11] 5108 	add	hl, hl
      001695 11r48r00         [10] 5109 	ld	de, #_playfieldTemp
      001698 19               [11] 5110 	add	hl, de
      001699 DD 5E FC         [19] 5111 	ld	e, -4 (ix)
      00169C 16 00            [ 7] 5112 	ld	d, #0x00
      00169E 19               [11] 5113 	add	hl, de
      00169F 7E               [ 7] 5114 	ld	a, (hl)
      0016A0 32r0Dr00         [13] 5115 	ld	(_d_value+0), a
                                   5116 ;src\/CheckPlayfield.h:21: while(1) { 
      0016A3                       5117 00106$:
                                   5118 ;src\/CheckPlayfield.h:22: BEEP();
      0016A3 CDr00r00         [17] 5119 	call	_BEEP
      0016A6 18 FB            [12] 5120 	jr	00106$
      0016A8                       5121 00117$:
                                   5122 ;src\/CheckPlayfield.h:8: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016A8 DD 34 FF         [23] 5123 	inc	-1 (ix)
      0016AB DD 7E FF         [19] 5124 	ld	a, -1 (ix)
      0016AE DD 77 FD         [19] 5125 	ld	-3 (ix), a
      0016B1 18 84            [12] 5126 	jr	00116$
      0016B3                       5127 00120$:
                                   5128 ;src\/CheckPlayfield.h:7: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016B3 DD 34 FE         [23] 5129 	inc	-2 (ix)
      0016B6 DD 7E FE         [19] 5130 	ld	a, -2 (ix)
      0016B9 DD 77 FC         [19] 5131 	ld	-4 (ix), a
      0016BC C3r27r16         [10] 5132 	jp	00119$
      0016BF                       5133 00121$:
                                   5134 ;src\/CheckPlayfield.h:28: }
      0016BF DD F9            [10] 5135 	ld	sp, ix
      0016C1 DD E1            [14] 5136 	pop	ix
      0016C3 C9               [10] 5137 	ret
                                   5138 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   5139 ;	---------------------------------
                                   5140 ; Function CheckPlayfield
                                   5141 ; ---------------------------------
      0016C4                       5142 _CheckPlayfield::
      0016C4 DD E5            [15] 5143 	push	ix
      0016C6 DD 21 00 00      [14] 5144 	ld	ix,#0
      0016CA DD 39            [15] 5145 	add	ix,sp
      0016CC 21 EF FF         [10] 5146 	ld	hl, #-17
      0016CF 39               [11] 5147 	add	hl, sp
      0016D0 F9               [ 6] 5148 	ld	sp, hl
                                   5149 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      0016D1 DD 36 EF 00      [19] 5150 	ld	-17 (ix), #0
                                   5151 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0016D5 0E 00            [ 7] 5152 	ld	c, #0x00
      0016D7                       5153 00195$:
      0016D7 79               [ 4] 5154 	ld	a, c
      0016D8 D6 0C            [ 7] 5155 	sub	a, #0x0c
      0016DA 30 36            [12] 5156 	jr	NC, 00102$
                                   5157 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0016DC DD 36 FF 00      [19] 5158 	ld	-1 (ix), #0
      0016E0                       5159 00192$:
      0016E0 DD 7E FF         [19] 5160 	ld	a, -1 (ix)
      0016E3 D6 06            [ 7] 5161 	sub	a, #0x06
      0016E5 30 28            [12] 5162 	jr	NC, 00196$
                                   5163 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      0016E7 DD 5E FF         [19] 5164 	ld	e, -1 (ix)
      0016EA 16 00            [ 7] 5165 	ld	d, #0x00
      0016EC 6B               [ 4] 5166 	ld	l, e
      0016ED 62               [ 4] 5167 	ld	h, d
      0016EE 29               [11] 5168 	add	hl, hl
      0016EF 19               [11] 5169 	add	hl, de
      0016F0 29               [11] 5170 	add	hl, hl
      0016F1 29               [11] 5171 	add	hl, hl
      0016F2 EB               [ 4] 5172 	ex	de, hl
      0016F3 21r48r00         [10] 5173 	ld	hl, #_playfieldTemp
      0016F6 19               [11] 5174 	add	hl, de
      0016F7 06 00            [ 7] 5175 	ld	b, #0x00
      0016F9 09               [11] 5176 	add	hl, bc
      0016FA 3Er00            [ 7] 5177 	ld	a, #<(_playfield)
      0016FC 83               [ 4] 5178 	add	a, e
      0016FD 5F               [ 4] 5179 	ld	e, a
      0016FE 3Es00            [ 7] 5180 	ld	a, #>(_playfield)
      001700 8A               [ 4] 5181 	adc	a, d
      001701 57               [ 4] 5182 	ld	d, a
      001702 7B               [ 4] 5183 	ld	a, e
      001703 81               [ 4] 5184 	add	a, c
      001704 5F               [ 4] 5185 	ld	e, a
      001705 30 01            [12] 5186 	jr	NC, 00614$
      001707 14               [ 4] 5187 	inc	d
      001708                       5188 00614$:
      001708 1A               [ 7] 5189 	ld	a, (de)
      001709 77               [ 7] 5190 	ld	(hl), a
                                   5191 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00170A DD 34 FF         [23] 5192 	inc	-1 (ix)
      00170D 18 D1            [12] 5193 	jr	00192$
      00170F                       5194 00196$:
                                   5195 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00170F 0C               [ 4] 5196 	inc	c
      001710 18 C5            [12] 5197 	jr	00195$
      001712                       5198 00102$:
                                   5199 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001712 DD 36 FE 00      [19] 5200 	ld	-2 (ix), #0
      001716                       5201 00201$:
      001716 DD 7E FE         [19] 5202 	ld	a, -2 (ix)
      001719 D6 0C            [ 7] 5203 	sub	a, #0x0c
      00171B D2r1Ar18         [10] 5204 	jp	NC, 00108$
                                   5205 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00171E DD 36 FF 02      [19] 5206 	ld	-1 (ix), #0x02
      001722                       5207 00198$:
      001722 DD 7E FF         [19] 5208 	ld	a, -1 (ix)
      001725 D6 06            [ 7] 5209 	sub	a, #0x06
      001727 D2r14r18         [10] 5210 	jp	NC, 00202$
                                   5211 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      00172A DD 4E FF         [19] 5212 	ld	c, -1 (ix)
      00172D 06 00            [ 7] 5213 	ld	b, #0x00
      00172F 69               [ 4] 5214 	ld	l, c
      001730 60               [ 4] 5215 	ld	h, b
      001731 29               [11] 5216 	add	hl, hl
      001732 09               [11] 5217 	add	hl, bc
      001733 29               [11] 5218 	add	hl, hl
      001734 29               [11] 5219 	add	hl, hl
      001735 DD 75 F5         [19] 5220 	ld	-11 (ix), l
      001738 DD 74 F6         [19] 5221 	ld	-10 (ix), h
      00173B 3Er48            [ 7] 5222 	ld	a, #<(_playfieldTemp)
      00173D DD 86 F5         [19] 5223 	add	a, -11 (ix)
      001740 4F               [ 4] 5224 	ld	c, a
      001741 3Es00            [ 7] 5225 	ld	a, #>(_playfieldTemp)
      001743 DD 8E F6         [19] 5226 	adc	a, -10 (ix)
      001746 47               [ 4] 5227 	ld	b, a
      001747 79               [ 4] 5228 	ld	a, c
      001748 DD 86 FE         [19] 5229 	add	a, -2 (ix)
      00174B DD 77 F7         [19] 5230 	ld	-9 (ix), a
      00174E 78               [ 4] 5231 	ld	a, b
      00174F CE 00            [ 7] 5232 	adc	a, #0x00
      001751 DD 77 F8         [19] 5233 	ld	-8 (ix), a
      001754 DD 6E F7         [19] 5234 	ld	l, -9 (ix)
      001757 DD 66 F8         [19] 5235 	ld	h, -8 (ix)
      00175A 7E               [ 7] 5236 	ld	a, (hl)
      00175B DD 77 F9         [19] 5237 	ld	-7 (ix), a
      00175E B7               [ 4] 5238 	or	a, a
      00175F CAr0Er18         [10] 5239 	jp	Z, 00199$
                                   5240 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001762 DD 7E FF         [19] 5241 	ld	a, -1 (ix)
      001765 DD 77 FD         [19] 5242 	ld	-3 (ix), a
      001768 4F               [ 4] 5243 	ld	c, a
      001769 0D               [ 4] 5244 	dec	c
      00176A 0D               [ 4] 5245 	dec	c
      00176B 79               [ 4] 5246 	ld	a, c
      00176C 07               [ 4] 5247 	rlca
      00176D 9F               [ 4] 5248 	sbc	a, a
      00176E 47               [ 4] 5249 	ld	b, a
      00176F 69               [ 4] 5250 	ld	l, c
      001770 60               [ 4] 5251 	ld	h, b
      001771 29               [11] 5252 	add	hl, hl
      001772 09               [11] 5253 	add	hl, bc
      001773 29               [11] 5254 	add	hl, hl
      001774 29               [11] 5255 	add	hl, hl
      001775 EB               [ 4] 5256 	ex	de, hl
      001776 21r48r00         [10] 5257 	ld	hl, #_playfieldTemp
      001779 19               [11] 5258 	add	hl, de
      00177A 7D               [ 4] 5259 	ld	a, l
      00177B DD 86 FE         [19] 5260 	add	a, -2 (ix)
      00177E DD 77 FA         [19] 5261 	ld	-6 (ix), a
      001781 7C               [ 4] 5262 	ld	a, h
      001782 CE 00            [ 7] 5263 	adc	a, #0x00
      001784 DD 77 FB         [19] 5264 	ld	-5 (ix), a
      001787 DD 4E FD         [19] 5265 	ld	c, -3 (ix)
      00178A 0D               [ 4] 5266 	dec	c
      00178B 79               [ 4] 5267 	ld	a, c
      00178C 07               [ 4] 5268 	rlca
      00178D 9F               [ 4] 5269 	sbc	a, a
      00178E 47               [ 4] 5270 	ld	b, a
      00178F 69               [ 4] 5271 	ld	l, c
      001790 60               [ 4] 5272 	ld	h, b
      001791 29               [11] 5273 	add	hl, hl
      001792 09               [11] 5274 	add	hl, bc
      001793 29               [11] 5275 	add	hl, hl
      001794 29               [11] 5276 	add	hl, hl
      001795 DD 75 FC         [19] 5277 	ld	-4 (ix), l
      001798 DD 74 FD         [19] 5278 	ld	-3 (ix), h
      00179B 3Er48            [ 7] 5279 	ld	a, #<(_playfieldTemp)
      00179D DD 86 FC         [19] 5280 	add	a, -4 (ix)
      0017A0 4F               [ 4] 5281 	ld	c, a
      0017A1 3Es00            [ 7] 5282 	ld	a, #>(_playfieldTemp)
      0017A3 DD 8E FD         [19] 5283 	adc	a, -3 (ix)
      0017A6 47               [ 4] 5284 	ld	b, a
      0017A7 79               [ 4] 5285 	ld	a, c
      0017A8 DD 86 FE         [19] 5286 	add	a, -2 (ix)
      0017AB 4F               [ 4] 5287 	ld	c, a
      0017AC 30 01            [12] 5288 	jr	NC, 00615$
      0017AE 04               [ 4] 5289 	inc	b
      0017AF                       5290 00615$:
      0017AF DD 6E FA         [19] 5291 	ld	l, -6 (ix)
      0017B2 DD 66 FB         [19] 5292 	ld	h, -5 (ix)
      0017B5 6E               [ 7] 5293 	ld	l, (hl)
      0017B6 0A               [ 7] 5294 	ld	a, (bc)
      0017B7 67               [ 4] 5295 	ld	h, a
      0017B8 7D               [ 4] 5296 	ld	a, l
      0017B9 94               [ 4] 5297 	sub	a, h
      0017BA 20 52            [12] 5298 	jr	NZ, 00199$
                                   5299 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      0017BC DD 7E F9         [19] 5300 	ld	a, -7 (ix)
      0017BF 94               [ 4] 5301 	sub	a, h
      0017C0 20 4C            [12] 5302 	jr	NZ, 00199$
                                   5303 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      0017C2 DD 36 EF 01      [19] 5304 	ld	-17 (ix), #0x01
                                   5305 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0017C6 3Er00            [ 7] 5306 	ld	a, #<(_playfield)
      0017C8 83               [ 4] 5307 	add	a, e
      0017C9 5F               [ 4] 5308 	ld	e, a
      0017CA 3Es00            [ 7] 5309 	ld	a, #>(_playfield)
      0017CC 8A               [ 4] 5310 	adc	a, d
      0017CD 57               [ 4] 5311 	ld	d, a
      0017CE 7B               [ 4] 5312 	ld	a, e
      0017CF DD 86 FE         [19] 5313 	add	a, -2 (ix)
      0017D2 5F               [ 4] 5314 	ld	e, a
      0017D3 30 01            [12] 5315 	jr	NC, 00620$
      0017D5 14               [ 4] 5316 	inc	d
      0017D6                       5317 00620$:
      0017D6 7D               [ 4] 5318 	ld	a, l
      0017D7 CB FF            [ 8] 5319 	set	7, a
      0017D9 12               [ 7] 5320 	ld	(de), a
                                   5321 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      0017DA 3Er00            [ 7] 5322 	ld	a, #<(_playfield)
      0017DC DD 86 FC         [19] 5323 	add	a, -4 (ix)
      0017DF 5F               [ 4] 5324 	ld	e, a
      0017E0 3Es00            [ 7] 5325 	ld	a, #>(_playfield)
      0017E2 DD 8E FD         [19] 5326 	adc	a, -3 (ix)
      0017E5 57               [ 4] 5327 	ld	d, a
      0017E6 DD 6E FE         [19] 5328 	ld	l, -2 (ix)
      0017E9 26 00            [ 7] 5329 	ld	h, #0x00
      0017EB 19               [11] 5330 	add	hl, de
      0017EC 0A               [ 7] 5331 	ld	a, (bc)
      0017ED CB FF            [ 8] 5332 	set	7, a
      0017EF 77               [ 7] 5333 	ld	(hl), a
                                   5334 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0017F0 3Er00            [ 7] 5335 	ld	a, #<(_playfield)
      0017F2 DD 86 F5         [19] 5336 	add	a, -11 (ix)
      0017F5 4F               [ 4] 5337 	ld	c, a
      0017F6 3Es00            [ 7] 5338 	ld	a, #>(_playfield)
      0017F8 DD 8E F6         [19] 5339 	adc	a, -10 (ix)
      0017FB 47               [ 4] 5340 	ld	b, a
      0017FC 79               [ 4] 5341 	ld	a, c
      0017FD DD 86 FE         [19] 5342 	add	a, -2 (ix)
      001800 4F               [ 4] 5343 	ld	c, a
      001801 30 01            [12] 5344 	jr	NC, 00621$
      001803 04               [ 4] 5345 	inc	b
      001804                       5346 00621$:
      001804 DD 6E F7         [19] 5347 	ld	l, -9 (ix)
      001807 DD 66 F8         [19] 5348 	ld	h, -8 (ix)
      00180A 7E               [ 7] 5349 	ld	a, (hl)
      00180B CB FF            [ 8] 5350 	set	7, a
      00180D 02               [ 7] 5351 	ld	(bc), a
      00180E                       5352 00199$:
                                   5353 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00180E DD 34 FF         [23] 5354 	inc	-1 (ix)
      001811 C3r22r17         [10] 5355 	jp	00198$
      001814                       5356 00202$:
                                   5357 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001814 DD 34 FE         [23] 5358 	inc	-2 (ix)
      001817 C3r16r17         [10] 5359 	jp	00201$
      00181A                       5360 00108$:
                                   5361 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00181A 0E 02            [ 7] 5362 	ld	c, #0x02
      00181C                       5363 00207$:
      00181C 79               [ 4] 5364 	ld	a, c
      00181D D6 0C            [ 7] 5365 	sub	a, #0x0c
      00181F D2rE1r18         [10] 5366 	jp	NC, 00114$
                                   5367 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001822 DD 36 FF 00      [19] 5368 	ld	-1 (ix), #0
      001826                       5369 00204$:
      001826 DD 7E FF         [19] 5370 	ld	a, -1 (ix)
      001829 D6 06            [ 7] 5371 	sub	a, #0x06
      00182B D2rDDr18         [10] 5372 	jp	NC, 00208$
                                   5373 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      00182E DD 5E FF         [19] 5374 	ld	e, -1 (ix)
      001831 16 00            [ 7] 5375 	ld	d, #0x00
      001833 6B               [ 4] 5376 	ld	l, e
      001834 62               [ 4] 5377 	ld	h, d
      001835 29               [11] 5378 	add	hl, hl
      001836 19               [11] 5379 	add	hl, de
      001837 29               [11] 5380 	add	hl, hl
      001838 29               [11] 5381 	add	hl, hl
      001839 DD 75 F7         [19] 5382 	ld	-9 (ix), l
      00183C DD 74 F8         [19] 5383 	ld	-8 (ix), h
      00183F 3Er48            [ 7] 5384 	ld	a, #<(_playfieldTemp)
      001841 DD 86 F7         [19] 5385 	add	a, -9 (ix)
      001844 5F               [ 4] 5386 	ld	e, a
      001845 3Es00            [ 7] 5387 	ld	a, #>(_playfieldTemp)
      001847 DD 8E F8         [19] 5388 	adc	a, -8 (ix)
      00184A 57               [ 4] 5389 	ld	d, a
      00184B 7B               [ 4] 5390 	ld	a, e
      00184C 81               [ 4] 5391 	add	a, c
      00184D DD 77 F9         [19] 5392 	ld	-7 (ix), a
      001850 7A               [ 4] 5393 	ld	a, d
      001851 CE 00            [ 7] 5394 	adc	a, #0x00
      001853 DD 77 FA         [19] 5395 	ld	-6 (ix), a
      001856 DD 6E F9         [19] 5396 	ld	l, -7 (ix)
      001859 DD 66 FA         [19] 5397 	ld	h, -6 (ix)
      00185C 7E               [ 7] 5398 	ld	a, (hl)
      00185D DD 77 FE         [19] 5399 	ld	-2 (ix), a
      001860 B7               [ 4] 5400 	or	a, a
      001861 28 74            [12] 5401 	jr	Z, 00205$
                                   5402 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001863 DD 71 FD         [19] 5403 	ld	-3 (ix), c
      001866 79               [ 4] 5404 	ld	a, c
      001867 C6 FE            [ 7] 5405 	add	a, #0xfe
      001869 DD 77 FB         [19] 5406 	ld	-5 (ix), a
      00186C 6F               [ 4] 5407 	ld	l, a
      00186D 26 00            [ 7] 5408 	ld	h, #0x00
      00186F 19               [11] 5409 	add	hl, de
      001870 DD 46 FD         [19] 5410 	ld	b, -3 (ix)
      001873 05               [ 4] 5411 	dec	b
      001874 7B               [ 4] 5412 	ld	a, e
      001875 80               [ 4] 5413 	add	a, b
      001876 5F               [ 4] 5414 	ld	e, a
      001877 30 01            [12] 5415 	jr	NC, 00622$
      001879 14               [ 4] 5416 	inc	d
      00187A                       5417 00622$:
      00187A 7E               [ 7] 5418 	ld	a, (hl)
      00187B DD 77 FC         [19] 5419 	ld	-4 (ix), a
      00187E 1A               [ 7] 5420 	ld	a, (de)
      00187F 6F               [ 4] 5421 	ld	l, a
      001880 DD 7E FC         [19] 5422 	ld	a, -4 (ix)
      001883 95               [ 4] 5423 	sub	a, l
      001884 20 51            [12] 5424 	jr	NZ, 00205$
                                   5425 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001886 DD 7E FE         [19] 5426 	ld	a, -2 (ix)
      001889 95               [ 4] 5427 	sub	a, l
      00188A 20 4B            [12] 5428 	jr	NZ, 00205$
                                   5429 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      00188C DD 36 EF 01      [19] 5430 	ld	-17 (ix), #0x01
                                   5431 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001890 3Er00            [ 7] 5432 	ld	a, #<(_playfield)
      001892 DD 86 F7         [19] 5433 	add	a, -9 (ix)
      001895 DD 77 FD         [19] 5434 	ld	-3 (ix), a
      001898 3Es00            [ 7] 5435 	ld	a, #>(_playfield)
      00189A DD 8E F8         [19] 5436 	adc	a, -8 (ix)
      00189D DD 77 FE         [19] 5437 	ld	-2 (ix), a
      0018A0 DD 7E FD         [19] 5438 	ld	a, -3 (ix)
      0018A3 DD 86 FB         [19] 5439 	add	a, -5 (ix)
      0018A6 6F               [ 4] 5440 	ld	l, a
      0018A7 DD 7E FE         [19] 5441 	ld	a, -2 (ix)
      0018AA CE 00            [ 7] 5442 	adc	a, #0x00
      0018AC 67               [ 4] 5443 	ld	h, a
      0018AD DD 7E FC         [19] 5444 	ld	a, -4 (ix)
      0018B0 CB FF            [ 8] 5445 	set	7, a
      0018B2 77               [ 7] 5446 	ld	(hl), a
                                   5447 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      0018B3 DD 7E FD         [19] 5448 	ld	a, -3 (ix)
      0018B6 80               [ 4] 5449 	add	a, b
      0018B7 6F               [ 4] 5450 	ld	l, a
      0018B8 DD 7E FE         [19] 5451 	ld	a, -2 (ix)
      0018BB CE 00            [ 7] 5452 	adc	a, #0x00
      0018BD 67               [ 4] 5453 	ld	h, a
      0018BE 1A               [ 7] 5454 	ld	a, (de)
      0018BF CB FF            [ 8] 5455 	set	7, a
      0018C1 77               [ 7] 5456 	ld	(hl), a
                                   5457 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      0018C2 DD 7E FD         [19] 5458 	ld	a, -3 (ix)
      0018C5 81               [ 4] 5459 	add	a, c
      0018C6 5F               [ 4] 5460 	ld	e, a
      0018C7 DD 7E FE         [19] 5461 	ld	a, -2 (ix)
      0018CA CE 00            [ 7] 5462 	adc	a, #0x00
      0018CC 57               [ 4] 5463 	ld	d, a
      0018CD DD 6E F9         [19] 5464 	ld	l, -7 (ix)
      0018D0 DD 66 FA         [19] 5465 	ld	h, -6 (ix)
      0018D3 7E               [ 7] 5466 	ld	a, (hl)
      0018D4 CB FF            [ 8] 5467 	set	7, a
      0018D6 12               [ 7] 5468 	ld	(de), a
      0018D7                       5469 00205$:
                                   5470 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0018D7 DD 34 FF         [23] 5471 	inc	-1 (ix)
      0018DA C3r26r18         [10] 5472 	jp	00204$
      0018DD                       5473 00208$:
                                   5474 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0018DD 0C               [ 4] 5475 	inc	c
      0018DE C3r1Cr18         [10] 5476 	jp	00207$
      0018E1                       5477 00114$:
                                   5478 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0018E1 DD 36 FE 02      [19] 5479 	ld	-2 (ix), #0x02
      0018E5                       5480 00213$:
      0018E5 DD 7E FE         [19] 5481 	ld	a, -2 (ix)
      0018E8 D6 0C            [ 7] 5482 	sub	a, #0x0c
      0018EA D2r88r1A         [10] 5483 	jp	NC, 00124$
                                   5484 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0018ED DD 36 FF 02      [19] 5485 	ld	-1 (ix), #0x02
      0018F1                       5486 00210$:
      0018F1 DD 7E FF         [19] 5487 	ld	a, -1 (ix)
      0018F4 D6 06            [ 7] 5488 	sub	a, #0x06
      0018F6 D2r82r1A         [10] 5489 	jp	NC, 00214$
                                   5490 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      0018F9 DD 4E FF         [19] 5491 	ld	c, -1 (ix)
      0018FC 06 00            [ 7] 5492 	ld	b, #0x00
      0018FE 69               [ 4] 5493 	ld	l, c
      0018FF 60               [ 4] 5494 	ld	h, b
      001900 29               [11] 5495 	add	hl, hl
      001901 09               [11] 5496 	add	hl, bc
      001902 29               [11] 5497 	add	hl, hl
      001903 29               [11] 5498 	add	hl, hl
      001904 DD 75 F0         [19] 5499 	ld	-16 (ix), l
      001907 DD 74 F1         [19] 5500 	ld	-15 (ix), h
      00190A 3Er48            [ 7] 5501 	ld	a, #<(_playfieldTemp)
      00190C DD 86 F0         [19] 5502 	add	a, -16 (ix)
      00190F 4F               [ 4] 5503 	ld	c, a
      001910 3Es00            [ 7] 5504 	ld	a, #>(_playfieldTemp)
      001912 DD 8E F1         [19] 5505 	adc	a, -15 (ix)
      001915 47               [ 4] 5506 	ld	b, a
      001916 79               [ 4] 5507 	ld	a, c
      001917 DD 86 FE         [19] 5508 	add	a, -2 (ix)
      00191A DD 77 F2         [19] 5509 	ld	-14 (ix), a
      00191D 78               [ 4] 5510 	ld	a, b
      00191E CE 00            [ 7] 5511 	adc	a, #0x00
      001920 DD 77 F3         [19] 5512 	ld	-13 (ix), a
      001923 DD 6E F2         [19] 5513 	ld	l, -14 (ix)
      001926 DD 66 F3         [19] 5514 	ld	h, -13 (ix)
      001929 5E               [ 7] 5515 	ld	e, (hl)
                                   5516 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      00192A DD 56 FF         [19] 5517 	ld	d, -1 (ix)
      00192D DD 66 FE         [19] 5518 	ld	h, -2 (ix)
      001930 6A               [ 4] 5519 	ld	l, d
      001931 2D               [ 4] 5520 	dec	l
      001932 2D               [ 4] 5521 	dec	l
      001933 7C               [ 4] 5522 	ld	a, h
      001934 C6 FE            [ 7] 5523 	add	a, #0xfe
      001936 DD 77 F4         [19] 5524 	ld	-12 (ix), a
      001939 15               [ 4] 5525 	dec	d
      00193A 7C               [ 4] 5526 	ld	a, h
      00193B C6 FF            [ 7] 5527 	add	a, #0xff
      00193D DD 77 F5         [19] 5528 	ld	-11 (ix), a
      001940 D5               [11] 5529 	push	de
      001941 5D               [ 4] 5530 	ld	e, l
      001942 7B               [ 4] 5531 	ld	a, e
      001943 07               [ 4] 5532 	rlca
      001944 9F               [ 4] 5533 	sbc	a, a
      001945 57               [ 4] 5534 	ld	d, a
      001946 6B               [ 4] 5535 	ld	l, e
      001947 62               [ 4] 5536 	ld	h, d
      001948 29               [11] 5537 	add	hl, hl
      001949 19               [11] 5538 	add	hl, de
      00194A 29               [11] 5539 	add	hl, hl
      00194B 29               [11] 5540 	add	hl, hl
      00194C D1               [10] 5541 	pop	de
      00194D DD 75 F6         [19] 5542 	ld	-10 (ix), l
      001950 DD 74 F7         [19] 5543 	ld	-9 (ix), h
      001953 D5               [11] 5544 	push	de
      001954 5A               [ 4] 5545 	ld	e, d
      001955 7B               [ 4] 5546 	ld	a, e
      001956 07               [ 4] 5547 	rlca
      001957 9F               [ 4] 5548 	sbc	a, a
      001958 57               [ 4] 5549 	ld	d, a
      001959 6B               [ 4] 5550 	ld	l, e
      00195A 62               [ 4] 5551 	ld	h, d
      00195B 29               [11] 5552 	add	hl, hl
      00195C 19               [11] 5553 	add	hl, de
      00195D 29               [11] 5554 	add	hl, hl
      00195E 29               [11] 5555 	add	hl, hl
      00195F D1               [10] 5556 	pop	de
      001960 DD 75 F8         [19] 5557 	ld	-8 (ix), l
      001963 DD 74 F9         [19] 5558 	ld	-7 (ix), h
      001966 3Er48            [ 7] 5559 	ld	a, #<(_playfieldTemp)
      001968 DD 86 F6         [19] 5560 	add	a, -10 (ix)
      00196B DD 77 FA         [19] 5561 	ld	-6 (ix), a
      00196E 3Es00            [ 7] 5562 	ld	a, #>(_playfieldTemp)
      001970 DD 8E F7         [19] 5563 	adc	a, -9 (ix)
      001973 DD 77 FB         [19] 5564 	ld	-5 (ix), a
      001976 3Er48            [ 7] 5565 	ld	a, #<(_playfieldTemp)
      001978 DD 86 F8         [19] 5566 	add	a, -8 (ix)
      00197B 57               [ 4] 5567 	ld	d, a
      00197C 3Es00            [ 7] 5568 	ld	a, #>(_playfieldTemp)
      00197E DD 8E F9         [19] 5569 	adc	a, -7 (ix)
      001981 6F               [ 4] 5570 	ld	l, a
      001982 7A               [ 4] 5571 	ld	a, d
      001983 DD 86 F5         [19] 5572 	add	a, -11 (ix)
      001986 DD 77 FC         [19] 5573 	ld	-4 (ix), a
      001989 7D               [ 4] 5574 	ld	a, l
      00198A CE 00            [ 7] 5575 	adc	a, #0x00
      00198C DD 77 FD         [19] 5576 	ld	-3 (ix), a
                                   5577 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      00198F 7B               [ 4] 5578 	ld	a, e
      001990 B7               [ 4] 5579 	or	a, a
      001991 28 74            [12] 5580 	jr	Z, 00116$
                                   5581 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001993 DD 7E FA         [19] 5582 	ld	a, -6 (ix)
      001996 DD 86 F4         [19] 5583 	add	a, -12 (ix)
      001999 6F               [ 4] 5584 	ld	l, a
      00199A DD 7E FB         [19] 5585 	ld	a, -5 (ix)
      00199D CE 00            [ 7] 5586 	adc	a, #0x00
      00199F 67               [ 4] 5587 	ld	h, a
      0019A0 56               [ 7] 5588 	ld	d, (hl)
      0019A1 DD 6E FC         [19] 5589 	ld	l, -4 (ix)
      0019A4 DD 66 FD         [19] 5590 	ld	h, -3 (ix)
      0019A7 6E               [ 7] 5591 	ld	l, (hl)
      0019A8 7A               [ 4] 5592 	ld	a, d
      0019A9 95               [ 4] 5593 	sub	a, l
      0019AA 20 5B            [12] 5594 	jr	NZ, 00116$
                                   5595 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      0019AC 7B               [ 4] 5596 	ld	a, e
      0019AD 95               [ 4] 5597 	sub	a, l
      0019AE 20 57            [12] 5598 	jr	NZ, 00116$
                                   5599 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      0019B0 DD 36 EF 01      [19] 5600 	ld	-17 (ix), #0x01
                                   5601 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      0019B4 3Er00            [ 7] 5602 	ld	a, #<(_playfield)
      0019B6 DD 86 F6         [19] 5603 	add	a, -10 (ix)
      0019B9 5F               [ 4] 5604 	ld	e, a
      0019BA 3Es00            [ 7] 5605 	ld	a, #>(_playfield)
      0019BC DD 8E F7         [19] 5606 	adc	a, -9 (ix)
      0019BF 67               [ 4] 5607 	ld	h, a
      0019C0 7B               [ 4] 5608 	ld	a, e
      0019C1 DD 86 F4         [19] 5609 	add	a, -12 (ix)
      0019C4 6F               [ 4] 5610 	ld	l, a
      0019C5 30 01            [12] 5611 	jr	NC, 00631$
      0019C7 24               [ 4] 5612 	inc	h
      0019C8                       5613 00631$:
      0019C8 CB FA            [ 8] 5614 	set	7, d
      0019CA 72               [ 7] 5615 	ld	(hl), d
                                   5616 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0019CB 3Er00            [ 7] 5617 	ld	a, #<(_playfield)
      0019CD DD 86 F8         [19] 5618 	add	a, -8 (ix)
      0019D0 5F               [ 4] 5619 	ld	e, a
      0019D1 3Es00            [ 7] 5620 	ld	a, #>(_playfield)
      0019D3 DD 8E F9         [19] 5621 	adc	a, -7 (ix)
      0019D6 57               [ 4] 5622 	ld	d, a
      0019D7 7B               [ 4] 5623 	ld	a, e
      0019D8 DD 86 F5         [19] 5624 	add	a, -11 (ix)
      0019DB 5F               [ 4] 5625 	ld	e, a
      0019DC 30 01            [12] 5626 	jr	NC, 00632$
      0019DE 14               [ 4] 5627 	inc	d
      0019DF                       5628 00632$:
      0019DF DD 6E FC         [19] 5629 	ld	l, -4 (ix)
      0019E2 DD 66 FD         [19] 5630 	ld	h, -3 (ix)
      0019E5 7E               [ 7] 5631 	ld	a, (hl)
      0019E6 CB FF            [ 8] 5632 	set	7, a
      0019E8 12               [ 7] 5633 	ld	(de), a
                                   5634 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      0019E9 3Er00            [ 7] 5635 	ld	a, #<(_playfield)
      0019EB DD 86 F0         [19] 5636 	add	a, -16 (ix)
      0019EE 5F               [ 4] 5637 	ld	e, a
      0019EF 3Es00            [ 7] 5638 	ld	a, #>(_playfield)
      0019F1 DD 8E F1         [19] 5639 	adc	a, -15 (ix)
      0019F4 57               [ 4] 5640 	ld	d, a
      0019F5 7B               [ 4] 5641 	ld	a, e
      0019F6 DD 86 FE         [19] 5642 	add	a, -2 (ix)
      0019F9 5F               [ 4] 5643 	ld	e, a
      0019FA 30 01            [12] 5644 	jr	NC, 00633$
      0019FC 14               [ 4] 5645 	inc	d
      0019FD                       5646 00633$:
      0019FD DD 6E F2         [19] 5647 	ld	l, -14 (ix)
      001A00 DD 66 F3         [19] 5648 	ld	h, -13 (ix)
      001A03 7E               [ 7] 5649 	ld	a, (hl)
      001A04 CB FF            [ 8] 5650 	set	7, a
      001A06 12               [ 7] 5651 	ld	(de), a
      001A07                       5652 00116$:
                                   5653 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      001A07 DD 6E F4         [19] 5654 	ld	l, -12 (ix)
      001A0A 26 00            [ 7] 5655 	ld	h, #0x00
      001A0C 09               [11] 5656 	add	hl, bc
      001A0D 4E               [ 7] 5657 	ld	c, (hl)
      001A0E 79               [ 4] 5658 	ld	a, c
      001A0F B7               [ 4] 5659 	or	a, a
      001A10 28 6A            [12] 5660 	jr	Z, 00211$
                                   5661 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      001A12 DD 7E FA         [19] 5662 	ld	a, -6 (ix)
      001A15 DD 86 FE         [19] 5663 	add	a, -2 (ix)
      001A18 5F               [ 4] 5664 	ld	e, a
      001A19 DD 7E FB         [19] 5665 	ld	a, -5 (ix)
      001A1C CE 00            [ 7] 5666 	adc	a, #0x00
      001A1E 57               [ 4] 5667 	ld	d, a
      001A1F DD 6E FC         [19] 5668 	ld	l, -4 (ix)
      001A22 DD 66 FD         [19] 5669 	ld	h, -3 (ix)
      001A25 46               [ 7] 5670 	ld	b, (hl)
      001A26 1A               [ 7] 5671 	ld	a, (de)
      001A27 B8               [ 4] 5672 	cp	a, b
      001A28 20 52            [12] 5673 	jr	NZ, 00211$
                                   5674 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      001A2A 91               [ 4] 5675 	sub	a, c
      001A2B 20 4F            [12] 5676 	jr	NZ, 00211$
                                   5677 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      001A2D DD 36 EF 01      [19] 5678 	ld	-17 (ix), #0x01
                                   5679 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001A31 3Er00            [ 7] 5680 	ld	a, #<(_playfield)
      001A33 DD 86 F0         [19] 5681 	add	a, -16 (ix)
      001A36 47               [ 4] 5682 	ld	b, a
      001A37 3Es00            [ 7] 5683 	ld	a, #>(_playfield)
      001A39 DD 8E F1         [19] 5684 	adc	a, -15 (ix)
      001A3C 67               [ 4] 5685 	ld	h, a
      001A3D 78               [ 4] 5686 	ld	a, b
      001A3E DD 86 F4         [19] 5687 	add	a, -12 (ix)
      001A41 6F               [ 4] 5688 	ld	l, a
      001A42 30 01            [12] 5689 	jr	NC, 00638$
      001A44 24               [ 4] 5690 	inc	h
      001A45                       5691 00638$:
      001A45 CB F9            [ 8] 5692 	set	7, c
      001A47 71               [ 7] 5693 	ld	(hl), c
                                   5694 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001A48 3Er00            [ 7] 5695 	ld	a, #<(_playfield)
      001A4A DD 86 F8         [19] 5696 	add	a, -8 (ix)
      001A4D 4F               [ 4] 5697 	ld	c, a
      001A4E 3Es00            [ 7] 5698 	ld	a, #>(_playfield)
      001A50 DD 8E F9         [19] 5699 	adc	a, -7 (ix)
      001A53 47               [ 4] 5700 	ld	b, a
      001A54 79               [ 4] 5701 	ld	a, c
      001A55 DD 86 F5         [19] 5702 	add	a, -11 (ix)
      001A58 4F               [ 4] 5703 	ld	c, a
      001A59 30 01            [12] 5704 	jr	NC, 00639$
      001A5B 04               [ 4] 5705 	inc	b
      001A5C                       5706 00639$:
      001A5C DD 6E FC         [19] 5707 	ld	l, -4 (ix)
      001A5F DD 66 FD         [19] 5708 	ld	h, -3 (ix)
      001A62 7E               [ 7] 5709 	ld	a, (hl)
      001A63 CB FF            [ 8] 5710 	set	7, a
      001A65 02               [ 7] 5711 	ld	(bc), a
                                   5712 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001A66 3Er00            [ 7] 5713 	ld	a, #<(_playfield)
      001A68 DD 86 F6         [19] 5714 	add	a, -10 (ix)
      001A6B 4F               [ 4] 5715 	ld	c, a
      001A6C 3Es00            [ 7] 5716 	ld	a, #>(_playfield)
      001A6E DD 8E F7         [19] 5717 	adc	a, -9 (ix)
      001A71 47               [ 4] 5718 	ld	b, a
      001A72 DD 6E FE         [19] 5719 	ld	l, -2 (ix)
      001A75 26 00            [ 7] 5720 	ld	h, #0x00
      001A77 09               [11] 5721 	add	hl, bc
      001A78 1A               [ 7] 5722 	ld	a, (de)
      001A79 CB FF            [ 8] 5723 	set	7, a
      001A7B 77               [ 7] 5724 	ld	(hl), a
      001A7C                       5725 00211$:
                                   5726 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001A7C DD 34 FF         [23] 5727 	inc	-1 (ix)
      001A7F C3rF1r18         [10] 5728 	jp	00210$
      001A82                       5729 00214$:
                                   5730 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001A82 DD 34 FE         [23] 5731 	inc	-2 (ix)
      001A85 C3rE5r18         [10] 5732 	jp	00213$
      001A88                       5733 00124$:
                                   5734 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      001A88 DD 7E EF         [19] 5735 	ld	a, -17 (ix)
      001A8B B7               [ 4] 5736 	or	a, a
      001A8C CAr35r1E         [10] 5737 	jp	Z, 00236$
                                   5738 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      001A8F DD 36 F5 FF      [19] 5739 	ld	-11 (ix), #0xff
      001A93 DD 36 F6 00      [19] 5740 	ld	-10 (ix), #0
                                   5741 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      001A97 DD 36 F7 05      [19] 5742 	ld	-9 (ix), #0x05
      001A9B DD 36 F8 00      [19] 5743 	ld	-8 (ix), #0
                                   5744 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      001A9F DD 36 F9 0B      [19] 5745 	ld	-7 (ix), #0x0b
      001AA3 DD 36 FA 00      [19] 5746 	ld	-6 (ix), #0
                                   5747 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      001AA7 CDr08r0A         [17] 5748 	call	_HideArrowSprite
                                   5749 ;src\/CheckPlayfield.h:116: SoundFx_2();
      001AAA CDrB0r15         [17] 5750 	call	_SoundFx_2
                                   5751 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      001AAD DD 36 FB 00      [19] 5752 	ld	-5 (ix), #0
                                   5753 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001AB1 DD 36 FF 00      [19] 5754 	ld	-1 (ix), #0
      001AB5                       5755 00219$:
      001AB5 DD 7E FF         [19] 5756 	ld	a, -1 (ix)
      001AB8 D6 0C            [ 7] 5757 	sub	a, #0x0c
      001ABA 30 5F            [12] 5758 	jr	NC, 00290$
                                   5759 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001ABC DD 5E FB         [19] 5760 	ld	e, -5 (ix)
      001ABF 06 00            [ 7] 5761 	ld	b, #0x00
      001AC1                       5762 00216$:
      001AC1 78               [ 4] 5763 	ld	a, b
      001AC2 D6 06            [ 7] 5764 	sub	a, #0x06
      001AC4 30 4D            [12] 5765 	jr	NC, 00319$
                                   5766 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001AC6 D5               [11] 5767 	push	de
      001AC7 58               [ 4] 5768 	ld	e, b
      001AC8 16 00            [ 7] 5769 	ld	d, #0x00
      001ACA 6B               [ 4] 5770 	ld	l, e
      001ACB 62               [ 4] 5771 	ld	h, d
      001ACC 29               [11] 5772 	add	hl, hl
      001ACD 19               [11] 5773 	add	hl, de
      001ACE 29               [11] 5774 	add	hl, hl
      001ACF 29               [11] 5775 	add	hl, hl
      001AD0 11r00r00         [10] 5776 	ld	de, #_playfield
      001AD3 19               [11] 5777 	add	hl, de
      001AD4 D1               [10] 5778 	pop	de
      001AD5 7D               [ 4] 5779 	ld	a, l
      001AD6 DD 86 FF         [19] 5780 	add	a, -1 (ix)
      001AD9 6F               [ 4] 5781 	ld	l, a
      001ADA 30 01            [12] 5782 	jr	NC, 00640$
      001ADC 24               [ 4] 5783 	inc	h
      001ADD                       5784 00640$:
      001ADD 7E               [ 7] 5785 	ld	a, (hl)
      001ADE 07               [ 4] 5786 	rlca
      001ADF 30 2F            [12] 5787 	jr	NC, 00217$
                                   5788 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      001AE1 1C               [ 4] 5789 	inc	e
                                   5790 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      001AE2 78               [ 4] 5791 	ld	a, b
      001AE3 DD 96 F7         [19] 5792 	sub	a, -9 (ix)
      001AE6 30 03            [12] 5793 	jr	NC, 00126$
      001AE8 DD 70 F7         [19] 5794 	ld	-9 (ix), b
      001AEB                       5795 00126$:
                                   5796 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      001AEB DD 7E F8         [19] 5797 	ld	a, -8 (ix)
      001AEE 90               [ 4] 5798 	sub	a, b
      001AEF 30 03            [12] 5799 	jr	NC, 00128$
      001AF1 DD 70 F8         [19] 5800 	ld	-8 (ix), b
      001AF4                       5801 00128$:
                                   5802 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      001AF4 DD 7E FF         [19] 5803 	ld	a, -1 (ix)
      001AF7 DD 96 F9         [19] 5804 	sub	a, -7 (ix)
      001AFA 30 06            [12] 5805 	jr	NC, 00130$
      001AFC DD 7E FF         [19] 5806 	ld	a, -1 (ix)
      001AFF DD 77 F9         [19] 5807 	ld	-7 (ix), a
      001B02                       5808 00130$:
                                   5809 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      001B02 DD 7E FA         [19] 5810 	ld	a, -6 (ix)
      001B05 DD 96 FF         [19] 5811 	sub	a, -1 (ix)
      001B08 30 06            [12] 5812 	jr	NC, 00217$
      001B0A DD 7E FF         [19] 5813 	ld	a, -1 (ix)
      001B0D DD 77 FA         [19] 5814 	ld	-6 (ix), a
      001B10                       5815 00217$:
                                   5816 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001B10 04               [ 4] 5817 	inc	b
      001B11 18 AE            [12] 5818 	jr	00216$
      001B13                       5819 00319$:
      001B13 DD 73 FB         [19] 5820 	ld	-5 (ix), e
                                   5821 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001B16 DD 34 FF         [23] 5822 	inc	-1 (ix)
      001B19 18 9A            [12] 5823 	jr	00219$
                                   5824 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      001B1B                       5825 00290$:
      001B1B DD 36 FF 48      [19] 5826 	ld	-1 (ix), #0x48
      001B1F                       5827 00166$:
      001B1F DD 4E FF         [19] 5828 	ld	c, -1 (ix)
      001B22 DD 35 FF         [23] 5829 	dec	-1 (ix)
      001B25 79               [ 4] 5830 	ld	a, c
      001B26 B7               [ 4] 5831 	or	a, a
      001B27 CArCFr1C         [10] 5832 	jp	Z, 00168$
                                   5833 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      001B2A ED 5B 9E FC      [20] 5834 	ld	de, (_JIFFY)
                                   5835 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      001B2E                       5836 00137$:
      001B2E 2A 9E FC         [16] 5837 	ld	hl, (_JIFFY)
      001B31 BF               [ 4] 5838 	cp	a, a
      001B32 ED 52            [15] 5839 	sbc	hl, de
      001B34 28 F8            [12] 5840 	jr	Z, 00137$
                                   5841 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      001B36 DD 7E FB         [19] 5842 	ld	a, -5 (ix)
      001B39 D6 03            [ 7] 5843 	sub	a, #0x03
      001B3B DArEDr1B         [10] 5844 	jp	C, 00300$
                                   5845 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      001B3E DD 7E FB         [19] 5846 	ld	a, -5 (ix)
      001B41 D6 07            [ 7] 5847 	sub	a, #0x07
      001B43 38 04            [12] 5848 	jr	C, 00141$
      001B45 DD 36 FB 07      [19] 5849 	ld	-5 (ix), #0x07
      001B49                       5850 00141$:
                                   5851 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      001B49 DD 7E F5         [19] 5852 	ld	a, -11 (ix)
      001B4C 3C               [ 4] 5853 	inc	a
      001B4D 20 7B            [12] 5854 	jr	NZ, 00143$
                                   5855 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      001B4F DD 6E F8         [19] 5856 	ld	l, -8 (ix)
      001B52 26 00            [ 7] 5857 	ld	h, #0x00
      001B54 29               [11] 5858 	add	hl, hl
      001B55 29               [11] 5859 	add	hl, hl
      001B56 29               [11] 5860 	add	hl, hl
      001B57 29               [11] 5861 	add	hl, hl
      001B58 DD 5E F7         [19] 5862 	ld	e, -9 (ix)
      001B5B 16 00            [ 7] 5863 	ld	d, #0x00
      001B5D EB               [ 4] 5864 	ex	de, hl
      001B5E 29               [11] 5865 	add	hl, hl
      001B5F 29               [11] 5866 	add	hl, hl
      001B60 29               [11] 5867 	add	hl, hl
      001B61 29               [11] 5868 	add	hl, hl
      001B62 EB               [ 4] 5869 	ex	de, hl
      001B63 BF               [ 4] 5870 	cp	a, a
      001B64 ED 52            [15] 5871 	sbc	hl, de
      001B66 4D               [ 4] 5872 	ld	c, l
      001B67 44               [ 4] 5873 	ld	b, h
      001B68 CB 7C            [ 8] 5874 	bit	7, h
      001B6A 28 03            [12] 5875 	jr	Z, 00238$
      001B6C 4D               [ 4] 5876 	ld	c, l
      001B6D 44               [ 4] 5877 	ld	b, h
      001B6E 03               [ 6] 5878 	inc	bc
      001B6F                       5879 00238$:
      001B6F CB 28            [ 8] 5880 	sra	b
      001B71 CB 19            [ 8] 5881 	rr	c
      001B73 79               [ 4] 5882 	ld	a, c
      001B74 C6 50            [ 7] 5883 	add	a, #0x50
      001B76 DD 6E F7         [19] 5884 	ld	l, -9 (ix)
      001B79 29               [11] 5885 	add	hl, hl
      001B7A 29               [11] 5886 	add	hl, hl
      001B7B 29               [11] 5887 	add	hl, hl
      001B7C 29               [11] 5888 	add	hl, hl
      001B7D 85               [ 4] 5889 	add	a, l
      001B7E DD 77 F5         [19] 5890 	ld	-11 (ix), a
                                   5891 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      001B81 DD 6E F9         [19] 5892 	ld	l, -7 (ix)
      001B84 26 00            [ 7] 5893 	ld	h, #0x00
      001B86 29               [11] 5894 	add	hl, hl
      001B87 29               [11] 5895 	add	hl, hl
      001B88 29               [11] 5896 	add	hl, hl
      001B89 29               [11] 5897 	add	hl, hl
      001B8A DD 5E FA         [19] 5898 	ld	e, -6 (ix)
      001B8D 16 00            [ 7] 5899 	ld	d, #0x00
      001B8F EB               [ 4] 5900 	ex	de, hl
      001B90 29               [11] 5901 	add	hl, hl
      001B91 29               [11] 5902 	add	hl, hl
      001B92 29               [11] 5903 	add	hl, hl
      001B93 29               [11] 5904 	add	hl, hl
      001B94 EB               [ 4] 5905 	ex	de, hl
      001B95 BF               [ 4] 5906 	cp	a, a
      001B96 ED 52            [15] 5907 	sbc	hl, de
      001B98 4D               [ 4] 5908 	ld	c, l
      001B99 44               [ 4] 5909 	ld	b, h
      001B9A CB 7C            [ 8] 5910 	bit	7, h
      001B9C 28 03            [12] 5911 	jr	Z, 00239$
      001B9E 23               [ 6] 5912 	inc	hl
      001B9F 4D               [ 4] 5913 	ld	c, l
      001BA0 44               [ 4] 5914 	ld	b, h
      001BA1                       5915 00239$:
      001BA1 CB 28            [ 8] 5916 	sra	b
      001BA3 CB 19            [ 8] 5917 	rr	c
      001BA5 DD 7E FA         [19] 5918 	ld	a, -6 (ix)
      001BA8 87               [ 4] 5919 	add	a, a
      001BA9 87               [ 4] 5920 	add	a, a
      001BAA 87               [ 4] 5921 	add	a, a
      001BAB 87               [ 4] 5922 	add	a, a
      001BAC 81               [ 4] 5923 	add	a, c
      001BAD DD 77 F6         [19] 5924 	ld	-10 (ix), a
                                   5925 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      001BB0 26 01            [ 7] 5926 	ld	h, #0x01
      001BB2 DD 6E F6         [19] 5927 	ld	l, -10 (ix)
      001BB5 E5               [11] 5928 	push	hl
      001BB6 DD 66 F5         [19] 5929 	ld	h, -11 (ix)
      001BB9 DD 6E 04         [19] 5930 	ld	l, 4 (ix)
      001BBC E5               [11] 5931 	push	hl
      001BBD DD 7E FB         [19] 5932 	ld	a, -5 (ix)
      001BC0 F5               [11] 5933 	push	af
      001BC1 33               [ 6] 5934 	inc	sp
      001BC2 CDr16r0A         [17] 5935 	call	_DrawHitSprite
      001BC5 F1               [10] 5936 	pop	af
      001BC6 F1               [10] 5937 	pop	af
      001BC7 33               [ 6] 5938 	inc	sp
      001BC8 18 23            [12] 5939 	jr	00300$
      001BCA                       5940 00143$:
                                   5941 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      001BCA DD 4E FF         [19] 5942 	ld	c, -1 (ix)
      001BCD 3E 48            [ 7] 5943 	ld	a, #0x48
      001BCF 91               [ 4] 5944 	sub	a, c
      001BD0 4F               [ 4] 5945 	ld	c, a
      001BD1 DD 7E F6         [19] 5946 	ld	a, -10 (ix)
      001BD4 91               [ 4] 5947 	sub	a, c
      001BD5 26 00            [ 7] 5948 	ld	h, #0x00
      001BD7 E5               [11] 5949 	push	hl
      001BD8 33               [ 6] 5950 	inc	sp
      001BD9 F5               [11] 5951 	push	af
      001BDA 33               [ 6] 5952 	inc	sp
      001BDB DD 66 F5         [19] 5953 	ld	h, -11 (ix)
      001BDE DD 6E 04         [19] 5954 	ld	l, 4 (ix)
      001BE1 E5               [11] 5955 	push	hl
      001BE2 DD 7E FB         [19] 5956 	ld	a, -5 (ix)
      001BE5 F5               [11] 5957 	push	af
      001BE6 33               [ 6] 5958 	inc	sp
      001BE7 CDr16r0A         [17] 5959 	call	_DrawHitSprite
      001BEA F1               [10] 5960 	pop	af
      001BEB F1               [10] 5961 	pop	af
      001BEC 33               [ 6] 5962 	inc	sp
                                   5963 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001BED                       5964 00300$:
      001BED 3E 0C            [ 7] 5965 	ld	a, #0x0c
      001BEF DD 96 FF         [19] 5966 	sub	a, -1 (ix)
      001BF2 3E 00            [ 7] 5967 	ld	a, #0x00
      001BF4 17               [ 4] 5968 	rla
      001BF5 5F               [ 4] 5969 	ld	e, a
      001BF6 3E 09            [ 7] 5970 	ld	a, #0x09
      001BF8 DD 96 FF         [19] 5971 	sub	a, -1 (ix)
      001BFB 3E 00            [ 7] 5972 	ld	a, #0x00
      001BFD 17               [ 4] 5973 	rla
      001BFE 4F               [ 4] 5974 	ld	c, a
      001BFF 3E 06            [ 7] 5975 	ld	a, #0x06
      001C01 DD 96 FF         [19] 5976 	sub	a, -1 (ix)
      001C04 3E 00            [ 7] 5977 	ld	a, #0x00
      001C06 17               [ 4] 5978 	rla
      001C07 DD 77 FC         [19] 5979 	ld	-4 (ix), a
      001C0A 3E 03            [ 7] 5980 	ld	a, #0x03
      001C0C DD 96 FF         [19] 5981 	sub	a, -1 (ix)
      001C0F 3E 00            [ 7] 5982 	ld	a, #0x00
      001C11 17               [ 4] 5983 	rla
      001C12 DD 77 FD         [19] 5984 	ld	-3 (ix), a
      001C15 06 00            [ 7] 5985 	ld	b, #0x00
      001C17                       5986 00225$:
      001C17 78               [ 4] 5987 	ld	a, b
      001C18 D6 0C            [ 7] 5988 	sub	a, #0x0c
      001C1A D2r1Fr1B         [10] 5989 	jp	NC, 00166$
                                   5990 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C1D 16 00            [ 7] 5991 	ld	d, #0x00
      001C1F                       5992 00222$:
      001C1F 7A               [ 4] 5993 	ld	a, d
      001C20 D6 06            [ 7] 5994 	sub	a, #0x06
      001C22 D2rCBr1C         [10] 5995 	jp	NC, 00226$
                                   5996 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001C25 D5               [11] 5997 	push	de
      001C26 5A               [ 4] 5998 	ld	e, d
      001C27 16 00            [ 7] 5999 	ld	d, #0x00
      001C29 6B               [ 4] 6000 	ld	l, e
      001C2A 62               [ 4] 6001 	ld	h, d
      001C2B 29               [11] 6002 	add	hl, hl
      001C2C 19               [11] 6003 	add	hl, de
      001C2D 29               [11] 6004 	add	hl, hl
      001C2E 29               [11] 6005 	add	hl, hl
      001C2F 11r00r00         [10] 6006 	ld	de, #_playfield
      001C32 19               [11] 6007 	add	hl, de
      001C33 D1               [10] 6008 	pop	de
      001C34 7D               [ 4] 6009 	ld	a, l
      001C35 80               [ 4] 6010 	add	a, b
      001C36 6F               [ 4] 6011 	ld	l, a
      001C37 30 01            [12] 6012 	jr	NC, 00645$
      001C39 24               [ 4] 6013 	inc	h
      001C3A                       6014 00645$:
      001C3A 7E               [ 7] 6015 	ld	a, (hl)
      001C3B DD 77 FE         [19] 6016 	ld	-2 (ix), a
      001C3E DD CB FE 7E      [20] 6017 	bit	7, -2 (ix)
      001C42 CArC7r1C         [10] 6018 	jp	Z,00223$
                                   6019 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      001C45 7B               [ 4] 6020 	ld	a, e
      001C46 B7               [ 4] 6021 	or	a, a
      001C47 28 2C            [12] 6022 	jr	Z, 00160$
                                   6023 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      001C49 2A 9E FC         [16] 6024 	ld	hl, (_JIFFY)
      001C4C 7D               [ 4] 6025 	ld	a, l
      001C4D E6 03            [ 7] 6026 	and	a, #0x03
      001C4F 28 14            [12] 6027 	jr	Z, 00148$
                                   6028 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      001C51 DD 7E FE         [19] 6029 	ld	a, -2 (ix)
      001C54 CB BF            [ 8] 6030 	res	7, a
      001C56 C5               [11] 6031 	push	bc
      001C57 D5               [11] 6032 	push	de
      001C58 F5               [11] 6033 	push	af
      001C59 33               [ 6] 6034 	inc	sp
      001C5A 4A               [ 4] 6035 	ld	c, d
      001C5B C5               [11] 6036 	push	bc
      001C5C CDr7Br14         [17] 6037 	call	_DrawBlock
      001C5F F1               [10] 6038 	pop	af
      001C60 33               [ 6] 6039 	inc	sp
      001C61 D1               [10] 6040 	pop	de
      001C62 C1               [10] 6041 	pop	bc
      001C63 18 62            [12] 6042 	jr	00223$
      001C65                       6043 00148$:
                                   6044 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      001C65 C5               [11] 6045 	push	bc
      001C66 D5               [11] 6046 	push	de
      001C67 AF               [ 4] 6047 	xor	a, a
      001C68 F5               [11] 6048 	push	af
      001C69 33               [ 6] 6049 	inc	sp
      001C6A 4A               [ 4] 6050 	ld	c, d
      001C6B C5               [11] 6051 	push	bc
      001C6C CDr7Br14         [17] 6052 	call	_DrawBlock
      001C6F F1               [10] 6053 	pop	af
      001C70 33               [ 6] 6054 	inc	sp
      001C71 D1               [10] 6055 	pop	de
      001C72 C1               [10] 6056 	pop	bc
      001C73 18 52            [12] 6057 	jr	00223$
      001C75                       6058 00160$:
                                   6059 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      001C75 79               [ 4] 6060 	ld	a, c
      001C76 B7               [ 4] 6061 	or	a, a
      001C77 28 11            [12] 6062 	jr	Z, 00157$
      001C79 C5               [11] 6063 	push	bc
      001C7A D5               [11] 6064 	push	de
      001C7B 3E 2A            [ 7] 6065 	ld	a, #0x2a
      001C7D F5               [11] 6066 	push	af
      001C7E 33               [ 6] 6067 	inc	sp
      001C7F 4A               [ 4] 6068 	ld	c, d
      001C80 C5               [11] 6069 	push	bc
      001C81 CDrE3r14         [17] 6070 	call	_DrawBlock_SameTile
      001C84 F1               [10] 6071 	pop	af
      001C85 33               [ 6] 6072 	inc	sp
      001C86 D1               [10] 6073 	pop	de
      001C87 C1               [10] 6074 	pop	bc
      001C88 18 3D            [12] 6075 	jr	00223$
      001C8A                       6076 00157$:
                                   6077 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      001C8A DD 7E FC         [19] 6078 	ld	a, -4 (ix)
      001C8D B7               [ 4] 6079 	or	a, a
      001C8E 28 11            [12] 6080 	jr	Z, 00154$
      001C90 C5               [11] 6081 	push	bc
      001C91 D5               [11] 6082 	push	de
      001C92 3E 2B            [ 7] 6083 	ld	a, #0x2b
      001C94 F5               [11] 6084 	push	af
      001C95 33               [ 6] 6085 	inc	sp
      001C96 4A               [ 4] 6086 	ld	c, d
      001C97 C5               [11] 6087 	push	bc
      001C98 CDrE3r14         [17] 6088 	call	_DrawBlock_SameTile
      001C9B F1               [10] 6089 	pop	af
      001C9C 33               [ 6] 6090 	inc	sp
      001C9D D1               [10] 6091 	pop	de
      001C9E C1               [10] 6092 	pop	bc
      001C9F 18 26            [12] 6093 	jr	00223$
      001CA1                       6094 00154$:
                                   6095 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      001CA1 DD 7E FD         [19] 6096 	ld	a, -3 (ix)
      001CA4 B7               [ 4] 6097 	or	a, a
      001CA5 28 11            [12] 6098 	jr	Z, 00151$
      001CA7 C5               [11] 6099 	push	bc
      001CA8 D5               [11] 6100 	push	de
      001CA9 3E 2C            [ 7] 6101 	ld	a, #0x2c
      001CAB F5               [11] 6102 	push	af
      001CAC 33               [ 6] 6103 	inc	sp
      001CAD 4A               [ 4] 6104 	ld	c, d
      001CAE C5               [11] 6105 	push	bc
      001CAF CDrE3r14         [17] 6106 	call	_DrawBlock_SameTile
      001CB2 F1               [10] 6107 	pop	af
      001CB3 33               [ 6] 6108 	inc	sp
      001CB4 D1               [10] 6109 	pop	de
      001CB5 C1               [10] 6110 	pop	bc
      001CB6 18 0F            [12] 6111 	jr	00223$
      001CB8                       6112 00151$:
                                   6113 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      001CB8 C5               [11] 6114 	push	bc
      001CB9 D5               [11] 6115 	push	de
      001CBA 3E 2D            [ 7] 6116 	ld	a, #0x2d
      001CBC F5               [11] 6117 	push	af
      001CBD 33               [ 6] 6118 	inc	sp
      001CBE 4A               [ 4] 6119 	ld	c, d
      001CBF C5               [11] 6120 	push	bc
      001CC0 CDrE3r14         [17] 6121 	call	_DrawBlock_SameTile
      001CC3 F1               [10] 6122 	pop	af
      001CC4 33               [ 6] 6123 	inc	sp
      001CC5 D1               [10] 6124 	pop	de
      001CC6 C1               [10] 6125 	pop	bc
      001CC7                       6126 00223$:
                                   6127 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001CC7 14               [ 4] 6128 	inc	d
      001CC8 C3r1Fr1C         [10] 6129 	jp	00222$
      001CCB                       6130 00226$:
                                   6131 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001CCB 04               [ 4] 6132 	inc	b
      001CCC C3r17r1C         [10] 6133 	jp	00225$
      001CCF                       6134 00168$:
                                   6135 ;src\/CheckPlayfield.h:196: HideHitSprite();
      001CCF CDr28r0C         [17] 6136 	call	_HideHitSprite
                                   6137 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001CD2 DD 36 FD 00      [19] 6138 	ld	-3 (ix), #0
      001CD6                       6139 00234$:
      001CD6 DD 7E FD         [19] 6140 	ld	a, -3 (ix)
      001CD9 D6 0C            [ 7] 6141 	sub	a, #0x0c
      001CDB D2rB9r1D         [10] 6142 	jp	NC, 00177$
                                   6143 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001CDE DD 36 FE 00      [19] 6144 	ld	-2 (ix), #0
      001CE2                       6145 00231$:
      001CE2 DD 7E FE         [19] 6146 	ld	a, -2 (ix)
      001CE5 D6 06            [ 7] 6147 	sub	a, #0x06
      001CE7 D2rB3r1D         [10] 6148 	jp	NC, 00235$
                                   6149 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      001CEA DD 4E FE         [19] 6150 	ld	c, -2 (ix)
      001CED 06 00            [ 7] 6151 	ld	b, #0x00
      001CEF 69               [ 4] 6152 	ld	l, c
      001CF0 60               [ 4] 6153 	ld	h, b
      001CF1 29               [11] 6154 	add	hl, hl
      001CF2 09               [11] 6155 	add	hl, bc
      001CF3 29               [11] 6156 	add	hl, hl
      001CF4 29               [11] 6157 	add	hl, hl
      001CF5 EB               [ 4] 6158 	ex	de, hl
      001CF6 21r00r00         [10] 6159 	ld	hl, #_playfield
      001CF9 19               [11] 6160 	add	hl, de
      001CFA DD 75 FB         [19] 6161 	ld	-5 (ix), l
      001CFD DD 74 FC         [19] 6162 	ld	-4 (ix), h
      001D00 DD 7E FB         [19] 6163 	ld	a, -5 (ix)
      001D03 DD 86 FD         [19] 6164 	add	a, -3 (ix)
      001D06 4F               [ 4] 6165 	ld	c, a
      001D07 DD 7E FC         [19] 6166 	ld	a, -4 (ix)
      001D0A CE 00            [ 7] 6167 	adc	a, #0x00
      001D0C 47               [ 4] 6168 	ld	b, a
      001D0D 0A               [ 7] 6169 	ld	a, (bc)
      001D0E 07               [ 4] 6170 	rlca
      001D0F D2rADr1D         [10] 6171 	jp	NC,00232$
                                   6172 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      001D12 2Ar06r00         [16] 6173 	ld	hl, (_blocksRemoved)
      001D15 23               [ 6] 6174 	inc	hl
      001D16 22r06r00         [16] 6175 	ld	(_blocksRemoved), hl
                                   6176 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001D19 DD 7E FB         [19] 6177 	ld	a, -5 (ix)
      001D1C DD 77 F7         [19] 6178 	ld	-9 (ix), a
      001D1F DD 7E FC         [19] 6179 	ld	a, -4 (ix)
      001D22 DD 77 F8         [19] 6180 	ld	-8 (ix), a
      001D25 DD 7E FD         [19] 6181 	ld	a, -3 (ix)
      001D28 DD 77 FF         [19] 6182 	ld	-1 (ix), a
      001D2B                       6183 00228$:
      001D2B DD 7E FF         [19] 6184 	ld	a, -1 (ix)
      001D2E B7               [ 4] 6185 	or	a, a
      001D2F 28 7C            [12] 6186 	jr	Z, 00232$
                                   6187 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      001D31 0E 01            [ 7] 6188 	ld	c, #0x01
                                   6189 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001D33 DD 7E FF         [19] 6190 	ld	a, -1 (ix)
      001D36 DD 77 FC         [19] 6191 	ld	-4 (ix), a
      001D39 3D               [ 4] 6192 	dec	a
      001D3A DD 86 F7         [19] 6193 	add	a, -9 (ix)
      001D3D 5F               [ 4] 6194 	ld	e, a
      001D3E 3E 00            [ 7] 6195 	ld	a, #0x00
      001D40 DD 8E F8         [19] 6196 	adc	a, -8 (ix)
      001D43 57               [ 4] 6197 	ld	d, a
      001D44 1A               [ 7] 6198 	ld	a, (de)
      001D45 07               [ 4] 6199 	rlca
      001D46 30 02            [12] 6200 	jr	NC, 00170$
      001D48 0E 02            [ 7] 6201 	ld	c, #0x02
      001D4A                       6202 00170$:
                                   6203 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      001D4A DD 7E FC         [19] 6204 	ld	a, -4 (ix)
      001D4D 3D               [ 4] 6205 	dec	a
      001D4E 3D               [ 4] 6206 	dec	a
      001D4F DD 86 F7         [19] 6207 	add	a, -9 (ix)
      001D52 5F               [ 4] 6208 	ld	e, a
      001D53 3E 00            [ 7] 6209 	ld	a, #0x00
      001D55 DD 8E F8         [19] 6210 	adc	a, -8 (ix)
      001D58 57               [ 4] 6211 	ld	d, a
      001D59 1A               [ 7] 6212 	ld	a, (de)
      001D5A 07               [ 4] 6213 	rlca
      001D5B 30 01            [12] 6214 	jr	NC, 00172$
      001D5D 0C               [ 4] 6215 	inc	c
      001D5E                       6216 00172$:
                                   6217 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      001D5E DD 7E F7         [19] 6218 	ld	a, -9 (ix)
      001D61 DD 86 FF         [19] 6219 	add	a, -1 (ix)
      001D64 DD 77 F9         [19] 6220 	ld	-7 (ix), a
      001D67 DD 7E F8         [19] 6221 	ld	a, -8 (ix)
      001D6A CE 00            [ 7] 6222 	adc	a, #0x00
      001D6C DD 77 FA         [19] 6223 	ld	-6 (ix), a
      001D6F DD 6E FF         [19] 6224 	ld	l, -1 (ix)
      001D72 26 00            [ 7] 6225 	ld	h, #0x00
      001D74 59               [ 4] 6226 	ld	e, c
      001D75 16 00            [ 7] 6227 	ld	d, #0x00
      001D77 BF               [ 4] 6228 	cp	a, a
      001D78 ED 52            [15] 6229 	sbc	hl, de
      001D7A CB 7C            [ 8] 6230 	bit	7, h
      001D7C 20 18            [12] 6231 	jr	NZ, 00242$
      001D7E DD 7E FF         [19] 6232 	ld	a, -1 (ix)
      001D81 91               [ 4] 6233 	sub	a, c
      001D82 DD 86 F7         [19] 6234 	add	a, -9 (ix)
      001D85 4F               [ 4] 6235 	ld	c, a
      001D86 3E 00            [ 7] 6236 	ld	a, #0x00
      001D88 DD 8E F8         [19] 6237 	adc	a, -8 (ix)
      001D8B 47               [ 4] 6238 	ld	b, a
      001D8C 0A               [ 7] 6239 	ld	a, (bc)
      001D8D DD 77 FB         [19] 6240 	ld	-5 (ix), a
      001D90 DD 36 FC 00      [19] 6241 	ld	-4 (ix), #0
      001D94 18 07            [12] 6242 	jr	00243$
      001D96                       6243 00242$:
      001D96 AF               [ 4] 6244 	xor	a, a
      001D97 DD 77 FB         [19] 6245 	ld	-5 (ix), a
      001D9A DD 77 FC         [19] 6246 	ld	-4 (ix), a
      001D9D                       6247 00243$:
      001D9D DD 7E FB         [19] 6248 	ld	a, -5 (ix)
      001DA0 DD 6E F9         [19] 6249 	ld	l, -7 (ix)
      001DA3 DD 66 FA         [19] 6250 	ld	h, -6 (ix)
      001DA6 77               [ 7] 6251 	ld	(hl), a
                                   6252 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      001DA7 DD 35 FF         [23] 6253 	dec	-1 (ix)
      001DAA C3r2Br1D         [10] 6254 	jp	00228$
      001DAD                       6255 00232$:
                                   6256 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001DAD DD 34 FE         [23] 6257 	inc	-2 (ix)
      001DB0 C3rE2r1C         [10] 6258 	jp	00231$
      001DB3                       6259 00235$:
                                   6260 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001DB3 DD 34 FD         [23] 6261 	inc	-3 (ix)
      001DB6 C3rD6r1C         [10] 6262 	jp	00234$
      001DB9                       6263 00177$:
                                   6264 ;src\/CheckPlayfield.h:227: oldLevel = level;
      001DB9 3Ar08r00         [13] 6265 	ld	a, (#_level + 0)
      001DBC 4F               [ 4] 6266 	ld	c, a
                                   6267 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      001DBD 21r06r00         [10] 6268 	ld	hl, #_blocksRemoved
      001DC0 46               [ 7] 6269 	ld	b, (hl)
      001DC1 23               [ 6] 6270 	inc	hl
      001DC2 56               [ 7] 6271 	ld	d, (hl)
      001DC3 78               [ 4] 6272 	ld	a, b
      001DC4 D6 5A            [ 7] 6273 	sub	a, #0x5a
      001DC6 7A               [ 4] 6274 	ld	a, d
      001DC7 DE 00            [ 7] 6275 	sbc	a, #0x00
      001DC9 38 19            [12] 6276 	jr	C, 00185$
                                   6277 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      001DCB C5               [11] 6278 	push	bc
      001DCC 21 1E 00         [10] 6279 	ld	hl, #0x001e
      001DCF E5               [11] 6280 	push	hl
      001DD0 58               [ 4] 6281 	ld	e, b
      001DD1 D5               [11] 6282 	push	de
      001DD2 CDr00r00         [17] 6283 	call	__divuint
      001DD5 F1               [10] 6284 	pop	af
      001DD6 F1               [10] 6285 	pop	af
      001DD7 C1               [10] 6286 	pop	bc
      001DD8 7D               [ 4] 6287 	ld	a, l
      001DD9 3C               [ 4] 6288 	inc	a
      001DDA 32r08r00         [13] 6289 	ld	(_level+0), a
                                   6290 ;src\/CheckPlayfield.h:230: speed = 15;
      001DDD 21r93r00         [10] 6291 	ld	hl, #_speed
      001DE0 36 0F            [10] 6292 	ld	(hl), #0x0f
      001DE2 18 32            [12] 6293 	jr	00186$
      001DE4                       6294 00185$:
                                   6295 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      001DE4 78               [ 4] 6296 	ld	a, b
      001DE5 D6 3C            [ 7] 6297 	sub	a, #0x3c
      001DE7 7A               [ 4] 6298 	ld	a, d
      001DE8 DE 00            [ 7] 6299 	sbc	a, #0x00
      001DEA 38 0C            [12] 6300 	jr	C, 00182$
                                   6301 ;src\/CheckPlayfield.h:234: level = 3;
      001DEC 21r08r00         [10] 6302 	ld	hl, #_level
      001DEF 36 03            [10] 6303 	ld	(hl), #0x03
                                   6304 ;src\/CheckPlayfield.h:235: speed = 30;
      001DF1 21r93r00         [10] 6305 	ld	hl, #_speed
      001DF4 36 1E            [10] 6306 	ld	(hl), #0x1e
      001DF6 18 1E            [12] 6307 	jr	00186$
      001DF8                       6308 00182$:
                                   6309 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      001DF8 78               [ 4] 6310 	ld	a, b
      001DF9 D6 1E            [ 7] 6311 	sub	a, #0x1e
      001DFB 7A               [ 4] 6312 	ld	a, d
      001DFC DE 00            [ 7] 6313 	sbc	a, #0x00
      001DFE 38 0C            [12] 6314 	jr	C, 00179$
                                   6315 ;src\/CheckPlayfield.h:238: level = 2;
      001E00 21r08r00         [10] 6316 	ld	hl, #_level
      001E03 36 02            [10] 6317 	ld	(hl), #0x02
                                   6318 ;src\/CheckPlayfield.h:239: speed = 45;
      001E05 21r93r00         [10] 6319 	ld	hl, #_speed
      001E08 36 2D            [10] 6320 	ld	(hl), #0x2d
      001E0A 18 0A            [12] 6321 	jr	00186$
      001E0C                       6322 00179$:
                                   6323 ;src\/CheckPlayfield.h:242: level = 1;
      001E0C 21r08r00         [10] 6324 	ld	hl, #_level
      001E0F 36 01            [10] 6325 	ld	(hl), #0x01
                                   6326 ;src\/CheckPlayfield.h:243: speed = 60;
      001E11 21r93r00         [10] 6327 	ld	hl, #_speed
      001E14 36 3C            [10] 6328 	ld	(hl), #0x3c
      001E16                       6329 00186$:
                                   6330 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      001E16 3Ar08r00         [13] 6331 	ld	a,(#_level + 0)
      001E19 91               [ 4] 6332 	sub	a, c
      001E1A 28 05            [12] 6333 	jr	Z, 00188$
                                   6334 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      001E1C 21r09r00         [10] 6335 	ld	hl, #_newLevel
      001E1F 36 01            [10] 6336 	ld	(hl), #0x01
      001E21                       6337 00188$:
                                   6338 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      001E21 CDr9Fr15         [17] 6339 	call	_DrawPlayfield
                                   6340 ;src\/CheckPlayfield.h:255: CheckIfPlayfieldIsValid(); // test
      001E24 CDr10r16         [17] 6341 	call	_CheckIfPlayfieldIsValid
                                   6342 ;src\/CheckPlayfield.h:257: DrawScore();
      001E27 CDr3Fr10         [17] 6343 	call	_DrawScore
                                   6344 ;src\/CheckPlayfield.h:259: iteration++;
      001E2A DD 34 04         [23] 6345 	inc	4 (ix)
                                   6346 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      001E2D DD 7E 04         [19] 6347 	ld	a, 4 (ix)
      001E30 F5               [11] 6348 	push	af
      001E31 33               [ 6] 6349 	inc	sp
      001E32 CDrC4r16         [17] 6350 	call	_CheckPlayfield
      001E35                       6351 00236$:
                                   6352 ;src\/CheckPlayfield.h:265: }
      001E35 DD F9            [10] 6353 	ld	sp, ix
      001E37 DD E1            [14] 6354 	pop	ix
      001E39 C9               [10] 6355 	ret
                                   6356 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   6357 ;	---------------------------------
                                   6358 ; Function RandomIndex
                                   6359 ; ---------------------------------
      001E3A                       6360 _RandomIndex::
                                   6361 ;src\/GameLogic.h:5: do {
      001E3A                       6362 00101$:
                                   6363 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      001E3A CDrA3r00         [17] 6364 	call	_GetRandom
      001E3D 7D               [ 4] 6365 	ld	a, l
      001E3E E6 07            [ 7] 6366 	and	a, #0x07
      001E40 6F               [ 4] 6367 	ld	l, a
                                   6368 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      001E41 3E 04            [ 7] 6369 	ld	a, #0x04
      001E43 95               [ 4] 6370 	sub	a, l
      001E44 38 F4            [12] 6371 	jr	C, 00101$
                                   6372 ;src\/GameLogic.h:10: return random;
                                   6373 ;src\/GameLogic.h:11: }
      001E46 C9               [10] 6374 	ret
                                   6375 ;src\/GameLogic.h:13: void RandomPiece() {
                                   6376 ;	---------------------------------
                                   6377 ; Function RandomPiece
                                   6378 ; ---------------------------------
      001E47                       6379 _RandomPiece::
                                   6380 ;src\/GameLogic.h:14: topPiece = pieces[RandomIndex()];
      001E47 01r18r00         [10] 6381 	ld	bc, #_pieces+0
      001E4A C5               [11] 6382 	push	bc
      001E4B CDr3Ar1E         [17] 6383 	call	_RandomIndex
      001E4E C1               [10] 6384 	pop	bc
      001E4F 26 00            [ 7] 6385 	ld	h, #0x00
      001E51 09               [11] 6386 	add	hl, bc
      001E52 7E               [ 7] 6387 	ld	a, (hl)
      001E53 32r90r00         [13] 6388 	ld	(_topPiece+0), a
                                   6389 ;src\/GameLogic.h:15: midPiece = pieces[RandomIndex()];
      001E56 C5               [11] 6390 	push	bc
      001E57 CDr3Ar1E         [17] 6391 	call	_RandomIndex
      001E5A C1               [10] 6392 	pop	bc
      001E5B 26 00            [ 7] 6393 	ld	h, #0x00
      001E5D 09               [11] 6394 	add	hl, bc
      001E5E 7E               [ 7] 6395 	ld	a, (hl)
      001E5F 32r91r00         [13] 6396 	ld	(_midPiece+0), a
                                   6397 ;src\/GameLogic.h:16: bottomPiece = pieces[RandomIndex()];
      001E62 C5               [11] 6398 	push	bc
      001E63 CDr3Ar1E         [17] 6399 	call	_RandomIndex
      001E66 C1               [10] 6400 	pop	bc
      001E67 26 00            [ 7] 6401 	ld	h, #0x00
      001E69 09               [11] 6402 	add	hl, bc
      001E6A 7E               [ 7] 6403 	ld	a, (hl)
      001E6B 32r92r00         [13] 6404 	ld	(_bottomPiece+0), a
                                   6405 ;src\/GameLogic.h:17: }
      001E6E C9               [10] 6406 	ret
                                   6407 ;src\/GameLogic.h:19: void UpdateAndDrawPieceStatic() {
                                   6408 ;	---------------------------------
                                   6409 ; Function UpdateAndDrawPieceStatic
                                   6410 ; ---------------------------------
      001E6F                       6411 _UpdateAndDrawPieceStatic::
                                   6412 ;src\/GameLogic.h:22: playfield[col][line] = topPiece;
      001E6F 01r00r00         [10] 6413 	ld	bc, #_playfield+0
      001E72 ED 5Br01r00      [20] 6414 	ld	de, (_col)
      001E76 16 00            [ 7] 6415 	ld	d, #0x00
      001E78 6B               [ 4] 6416 	ld	l, e
      001E79 62               [ 4] 6417 	ld	h, d
      001E7A 29               [11] 6418 	add	hl, hl
      001E7B 19               [11] 6419 	add	hl, de
      001E7C 29               [11] 6420 	add	hl, hl
      001E7D 29               [11] 6421 	add	hl, hl
      001E7E 09               [11] 6422 	add	hl, bc
      001E7F EB               [ 4] 6423 	ex	de, hl
      001E80 3Ar02r00         [13] 6424 	ld	a, (#_line + 0)
      001E83 6F               [ 4] 6425 	ld	l, a
      001E84 26 00            [ 7] 6426 	ld	h, #0x00
      001E86 19               [11] 6427 	add	hl, de
      001E87 3Ar90r00         [13] 6428 	ld	a,(#_topPiece + 0)
      001E8A 77               [ 7] 6429 	ld	(hl), a
                                   6430 ;src\/GameLogic.h:23: playfield[col][line + 1] = midPiece;
      001E8B ED 5Br01r00      [20] 6431 	ld	de, (_col)
      001E8F 16 00            [ 7] 6432 	ld	d, #0x00
      001E91 6B               [ 4] 6433 	ld	l, e
      001E92 62               [ 4] 6434 	ld	h, d
      001E93 29               [11] 6435 	add	hl, hl
      001E94 19               [11] 6436 	add	hl, de
      001E95 29               [11] 6437 	add	hl, hl
      001E96 29               [11] 6438 	add	hl, hl
      001E97 09               [11] 6439 	add	hl, bc
      001E98 EB               [ 4] 6440 	ex	de, hl
      001E99 3Ar02r00         [13] 6441 	ld	a, (#_line + 0)
      001E9C 6F               [ 4] 6442 	ld	l, a
      001E9D 2C               [ 4] 6443 	inc	l
      001E9E 26 00            [ 7] 6444 	ld	h, #0x00
      001EA0 19               [11] 6445 	add	hl, de
      001EA1 3Ar91r00         [13] 6446 	ld	a,(#_midPiece + 0)
      001EA4 77               [ 7] 6447 	ld	(hl), a
                                   6448 ;src\/GameLogic.h:24: playfield[col][line + 2] = bottomPiece;
      001EA5 ED 5Br01r00      [20] 6449 	ld	de, (_col)
      001EA9 16 00            [ 7] 6450 	ld	d, #0x00
      001EAB 6B               [ 4] 6451 	ld	l, e
      001EAC 62               [ 4] 6452 	ld	h, d
      001EAD 29               [11] 6453 	add	hl, hl
      001EAE 19               [11] 6454 	add	hl, de
      001EAF 29               [11] 6455 	add	hl, hl
      001EB0 29               [11] 6456 	add	hl, hl
      001EB1 09               [11] 6457 	add	hl, bc
      001EB2 EB               [ 4] 6458 	ex	de, hl
      001EB3 3Ar02r00         [13] 6459 	ld	a, (#_line + 0)
      001EB6 6F               [ 4] 6460 	ld	l, a
      001EB7 2C               [ 4] 6461 	inc	l
      001EB8 2C               [ 4] 6462 	inc	l
      001EB9 26 00            [ 7] 6463 	ld	h, #0x00
      001EBB 19               [11] 6464 	add	hl, de
      001EBC 3Ar92r00         [13] 6465 	ld	a,(#_bottomPiece + 0)
      001EBF 77               [ 7] 6466 	ld	(hl), a
                                   6467 ;src\/GameLogic.h:25: DrawPiece(line);
      001EC0 C5               [11] 6468 	push	bc
      001EC1 3Ar02r00         [13] 6469 	ld	a,(#_line + 0)
      001EC4 F5               [11] 6470 	push	af
      001EC5 33               [ 6] 6471 	inc	sp
      001EC6 CDr7Cr15         [17] 6472 	call	_DrawPiece
      001EC9 33               [ 6] 6473 	inc	sp
      001ECA C1               [10] 6474 	pop	bc
                                   6475 ;src\/GameLogic.h:28: col = INITIAL_COL;
      001ECB 3E 02            [ 7] 6476 	ld	a, #0x02
      001ECD 32r01r00         [13] 6477 	ld	(#_col), a
                                   6478 ;src\/GameLogic.h:29: line = INITIAL_LINE;
                                   6479 ;src\/GameLogic.h:31: counter = 0;
      001ED0 3E 00            [ 7] 6480 	ld	a,#0x00
      001ED2 32r02r00         [13] 6481 	ld	(#_line),a
      001ED5 32r03r00         [13] 6482 	ld	(#_counter), a
                                   6483 ;src\/GameLogic.h:34: if(playfield[col][line] != EMPTY ||
      001ED8 3Ar18r00         [13] 6484 	ld	a, (#_playfield + 24)
      001EDB B7               [ 4] 6485 	or	a, a
      001EDC 20 0C            [12] 6486 	jr	NZ, 00101$
                                   6487 ;src\/GameLogic.h:35: playfield[col][line + 1] != EMPTY ||
      001EDE 3Ar19r00         [13] 6488 	ld	a, (#_playfield + 25)
      001EE1 B7               [ 4] 6489 	or	a, a
      001EE2 20 06            [12] 6490 	jr	NZ, 00101$
                                   6491 ;src\/GameLogic.h:36: playfield[col][line + 2] != EMPTY) {
      001EE4 3Ar1Ar00         [13] 6492 	ld	a, (#_playfield + 26)
      001EE7 B7               [ 4] 6493 	or	a, a
      001EE8 28 0B            [12] 6494 	jr	Z, 00102$
      001EEA                       6495 00101$:
                                   6496 ;src\/GameLogic.h:37: gameOver = TRUE;
      001EEA FD 21r00r00      [14] 6497 	ld	iy, #_gameOver
      001EEE FD 36 00 01      [19] 6498 	ld	0 (iy), #0x01
      001EF2 C3r9Fr15         [10] 6499 	jp	_DrawPlayfield
      001EF5                       6500 00102$:
                                   6501 ;src\/GameLogic.h:40: RandomPiece();
      001EF5 CDr47r1E         [17] 6502 	call	_RandomPiece
                                   6503 ;src\/GameLogic.h:42: CheckPlayfield(1);
      001EF8 3E 01            [ 7] 6504 	ld	a, #0x01
      001EFA F5               [11] 6505 	push	af
      001EFB 33               [ 6] 6506 	inc	sp
      001EFC CDrC4r16         [17] 6507 	call	_CheckPlayfield
      001EFF 33               [ 6] 6508 	inc	sp
                                   6509 ;src\/GameLogic.h:45: DrawPlayfield();
                                   6510 ;src\/GameLogic.h:46: }
      001F00 C3r9Fr15         [10] 6511 	jp	_DrawPlayfield
                                   6512 ;src\/GameLogic.h:48: void BlinkPauseText() {
                                   6513 ;	---------------------------------
                                   6514 ; Function BlinkPauseText
                                   6515 ; ---------------------------------
      001F03                       6516 _BlinkPauseText::
                                   6517 ;src\/GameLogic.h:49: if(JIFFY & 0b00001000) {
      001F03 2A 9E FC         [16] 6518 	ld	hl, (_JIFFY)
      001F06 CB 5D            [ 8] 6519 	bit	3, l
      001F08 28 0E            [12] 6520 	jr	Z, 00102$
                                   6521 ;src\/GameLogic.h:50: DrawString("PAUSE", 13, 12);
      001F0A 11 0D 0C         [10] 6522 	ld	de, #0x0c0d
      001F0D D5               [11] 6523 	push	de
      001F0E 21r21r1F         [10] 6524 	ld	hl, #___str_5
      001F11 E5               [11] 6525 	push	hl
      001F12 CDrB1r0D         [17] 6526 	call	_DrawString
      001F15 F1               [10] 6527 	pop	af
      001F16 F1               [10] 6528 	pop	af
      001F17 C9               [10] 6529 	ret
      001F18                       6530 00102$:
                                   6531 ;src\/GameLogic.h:55: DrawLine(6);
      001F18 3E 06            [ 7] 6532 	ld	a, #0x06
      001F1A F5               [11] 6533 	push	af
      001F1B 33               [ 6] 6534 	inc	sp
      001F1C CDr44r15         [17] 6535 	call	_DrawLine
      001F1F 33               [ 6] 6536 	inc	sp
                                   6537 ;src\/GameLogic.h:58: }
      001F20 C9               [10] 6538 	ret
      001F21                       6539 ___str_5:
      001F21 50 41 55 53 45        6540 	.ascii "PAUSE"
      001F26 00                    6541 	.db 0x00
                                   6542 ;src\/GameLogic.h:60: void Pause() {
                                   6543 ;	---------------------------------
                                   6544 ; Function Pause
                                   6545 ; ---------------------------------
      001F27                       6546 _Pause::
                                   6547 ;src\/GameLogic.h:63: DrawString("PAUSE", 13, 12);
      001F27 11 0D 0C         [10] 6548 	ld	de, #0x0c0d
      001F2A D5               [11] 6549 	push	de
      001F2B 21r61r1F         [10] 6550 	ld	hl, #___str_6
      001F2E E5               [11] 6551 	push	hl
      001F2F CDrB1r0D         [17] 6552 	call	_DrawString
      001F32 F1               [10] 6553 	pop	af
      001F33 F1               [10] 6554 	pop	af
                                   6555 ;src\/GameLogic.h:65: while(TRUE) {
      001F34                       6556 00114$:
                                   6557 ;src\/GameLogic.h:67: BlinkPauseText();
      001F34 CDr03r1F         [17] 6558 	call	_BlinkPauseText
                                   6559 ;src\/GameLogic.h:70: keyboard = SNSMAT(7);
      001F37 2E 07            [ 7] 6560 	ld	l, #0x07
      001F39 CDr00r00         [17] 6561 	call	_SNSMAT
                                   6562 ;src\/GameLogic.h:71: if((keyboard & 0b00000100) != 0) {
      001F3C CB 55            [ 8] 6563 	bit	2, l
      001F3E 28 F4            [12] 6564 	jr	Z, 00114$
                                   6565 ;src\/GameLogic.h:73: while(TRUE) {
      001F40                       6566 00109$:
                                   6567 ;src\/GameLogic.h:75: BlinkPauseText();
      001F40 CDr03r1F         [17] 6568 	call	_BlinkPauseText
                                   6569 ;src\/GameLogic.h:78: keyboard = SNSMAT(7);
      001F43 2E 07            [ 7] 6570 	ld	l, #0x07
      001F45 CDr00r00         [17] 6571 	call	_SNSMAT
                                   6572 ;src\/GameLogic.h:79: if((keyboard & 0b00000100) == 0) {
      001F48 CB 55            [ 8] 6573 	bit	2, l
      001F4A 20 F4            [12] 6574 	jr	NZ, 00109$
                                   6575 ;src\/GameLogic.h:81: while(TRUE) {
      001F4C                       6576 00104$:
                                   6577 ;src\/GameLogic.h:83: BlinkPauseText();
      001F4C CDr03r1F         [17] 6578 	call	_BlinkPauseText
                                   6579 ;src\/GameLogic.h:86: keyboard = SNSMAT(7);
      001F4F 2E 07            [ 7] 6580 	ld	l, #0x07
      001F51 CDr00r00         [17] 6581 	call	_SNSMAT
                                   6582 ;src\/GameLogic.h:87: if((keyboard & 0b00000100) != 0) {
      001F54 CB 55            [ 8] 6583 	bit	2, l
      001F56 28 F4            [12] 6584 	jr	Z, 00104$
                                   6585 ;src\/GameLogic.h:89: DrawLine(6);
      001F58 3E 06            [ 7] 6586 	ld	a, #0x06
      001F5A F5               [11] 6587 	push	af
      001F5B 33               [ 6] 6588 	inc	sp
      001F5C CDr44r15         [17] 6589 	call	_DrawLine
      001F5F 33               [ 6] 6590 	inc	sp
                                   6591 ;src\/GameLogic.h:90: return;
                                   6592 ;src\/GameLogic.h:100: }
      001F60 C9               [10] 6593 	ret
      001F61                       6594 ___str_6:
      001F61 50 41 55 53 45        6595 	.ascii "PAUSE"
      001F66 00                    6596 	.db 0x00
                                   6597 ;src\/GameLogic.h:102: void GameLoop() {
                                   6598 ;	---------------------------------
                                   6599 ; Function GameLoop
                                   6600 ; ---------------------------------
      001F67                       6601 _GameLoop::
      001F67 DD E5            [15] 6602 	push	ix
      001F69 DD 21 00 00      [14] 6603 	ld	ix,#0
      001F6D DD 39            [15] 6604 	add	ix,sp
      001F6F 21 F3 FF         [10] 6605 	ld	hl, #-13
      001F72 39               [11] 6606 	add	hl, sp
      001F73 F9               [ 6] 6607 	ld	sp, hl
                                   6608 ;src\/GameLogic.h:105: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      001F74 DD 36 FF 00      [19] 6609 	ld	-1 (ix), #0
      001F78 DD 36 F3 00      [19] 6610 	ld	-13 (ix), #0
                                   6611 ;src\/GameLogic.h:106: byte lastBtn1 = 0, lastBtn2 = 0;
      001F7C DD 36 F4 00      [19] 6612 	ld	-12 (ix), #0
      001F80 DD 36 F5 00      [19] 6613 	ld	-11 (ix), #0
                                   6614 ;src\/GameLogic.h:109: while(!gameOver) {
      001F84                       6615 00150$:
      001F84 3Ar00r00         [13] 6616 	ld	a,(#_gameOver + 0)
      001F87 B7               [ 4] 6617 	or	a, a
      001F88 C2r1Fr23         [10] 6618 	jp	NZ, 00152$
                                   6619 ;src\/GameLogic.h:111: word lastJiffy = JIFFY;
      001F8B ED 4B 9E FC      [20] 6620 	ld	bc, (_JIFFY)
                                   6621 ;src\/GameLogic.h:113: while (lastJiffy == JIFFY) {
      001F8F                       6622 00101$:
      001F8F 2A 9E FC         [16] 6623 	ld	hl, (_JIFFY)
      001F92 BF               [ 4] 6624 	cp	a, a
      001F93 ED 42            [15] 6625 	sbc	hl, bc
      001F95 28 F8            [12] 6626 	jr	Z, 00101$
                                   6627 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      001F97 ED 4Br01r00      [20] 6628 	ld	bc, (_col)
      001F9B 06 00            [ 7] 6629 	ld	b, #0x00
      001F9D 69               [ 4] 6630 	ld	l, c
      001F9E 60               [ 4] 6631 	ld	h, b
      001F9F 29               [11] 6632 	add	hl, hl
      001FA0 09               [11] 6633 	add	hl, bc
      001FA1 29               [11] 6634 	add	hl, hl
      001FA2 29               [11] 6635 	add	hl, hl
      001FA3 EB               [ 4] 6636 	ex	de, hl
      001FA4 21r00r00         [10] 6637 	ld	hl, #_playfield
      001FA7 19               [11] 6638 	add	hl, de
      001FA8 EB               [ 4] 6639 	ex	de, hl
      001FA9 FD 21r02r00      [14] 6640 	ld	iy, #_line
      001FAD FD 6E 00         [19] 6641 	ld	l, 0 (iy)
      001FB0 26 00            [ 7] 6642 	ld	h, #0x00
      001FB2 19               [11] 6643 	add	hl, de
      001FB3 36 00            [10] 6644 	ld	(hl), #0x00
                                   6645 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      001FB5 ED 4Br01r00      [20] 6646 	ld	bc, (_col)
      001FB9 06 00            [ 7] 6647 	ld	b, #0x00
      001FBB 69               [ 4] 6648 	ld	l, c
      001FBC 60               [ 4] 6649 	ld	h, b
      001FBD 29               [11] 6650 	add	hl, hl
      001FBE 09               [11] 6651 	add	hl, bc
      001FBF 29               [11] 6652 	add	hl, hl
      001FC0 29               [11] 6653 	add	hl, hl
      001FC1 EB               [ 4] 6654 	ex	de, hl
      001FC2 21r00r00         [10] 6655 	ld	hl, #_playfield
      001FC5 19               [11] 6656 	add	hl, de
      001FC6 EB               [ 4] 6657 	ex	de, hl
      001FC7 FD 6E 00         [19] 6658 	ld	l, 0 (iy)
      001FCA 2C               [ 4] 6659 	inc	l
      001FCB 26 00            [ 7] 6660 	ld	h, #0x00
      001FCD 19               [11] 6661 	add	hl, de
      001FCE 36 00            [10] 6662 	ld	(hl), #0x00
                                   6663 ;src\/GameLogic.h:124: playfield[col][line + 2] = EMPTY;
      001FD0 ED 4Br01r00      [20] 6664 	ld	bc, (_col)
      001FD4 06 00            [ 7] 6665 	ld	b, #0x00
      001FD6 69               [ 4] 6666 	ld	l, c
      001FD7 60               [ 4] 6667 	ld	h, b
      001FD8 29               [11] 6668 	add	hl, hl
      001FD9 09               [11] 6669 	add	hl, bc
      001FDA 29               [11] 6670 	add	hl, hl
      001FDB 29               [11] 6671 	add	hl, hl
      001FDC EB               [ 4] 6672 	ex	de, hl
      001FDD 21r00r00         [10] 6673 	ld	hl, #_playfield
      001FE0 19               [11] 6674 	add	hl, de
      001FE1 EB               [ 4] 6675 	ex	de, hl
      001FE2 FD 6E 00         [19] 6676 	ld	l, 0 (iy)
      001FE5 2C               [ 4] 6677 	inc	l
      001FE6 2C               [ 4] 6678 	inc	l
      001FE7 26 00            [ 7] 6679 	ld	h, #0x00
      001FE9 19               [11] 6680 	add	hl, de
      001FEA 36 00            [10] 6681 	ld	(hl), #0x00
                                   6682 ;src\/GameLogic.h:127: joystick = GTSTCK(STCK_Joy1);
      001FEC 2E 01            [ 7] 6683 	ld	l, #0x01
      001FEE CDr00r00         [17] 6684 	call	_GTSTCK
      001FF1 DD 75 F6         [19] 6685 	ld	-10 (ix), l
                                   6686 ;src\/GameLogic.h:128: btn1 = GTTRIG(TRIG_Joy1_A);
      001FF4 2E 01            [ 7] 6687 	ld	l, #0x01
      001FF6 CDr00r00         [17] 6688 	call	_GTTRIG
      001FF9 DD 75 F7         [19] 6689 	ld	-9 (ix), l
                                   6690 ;src\/GameLogic.h:129: btn2 = GTTRIG(TRIG_Joy1_B);
      001FFC 2E 03            [ 7] 6691 	ld	l, #0x03
      001FFE CDr00r00         [17] 6692 	call	_GTTRIG
      002001 DD 75 F8         [19] 6693 	ld	-8 (ix), l
                                   6694 ;src\/GameLogic.h:131: if(joystick == STCK_none) {
      002004 DD 7E F6         [19] 6695 	ld	a, -10 (ix)
                                   6696 ;src\/GameLogic.h:132: joystick = GTSTCK(STCK_Cursors);
      002007 B7               [ 4] 6697 	or	a,a
      002008 20 07            [12] 6698 	jr	NZ, 00105$
      00200A 6F               [ 4] 6699 	ld	l,a
      00200B CDr00r00         [17] 6700 	call	_GTSTCK
      00200E DD 75 F6         [19] 6701 	ld	-10 (ix), l
      002011                       6702 00105$:
                                   6703 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      002011 FD 21r02r00      [14] 6704 	ld	iy, #_line
      002015 FD 7E 00         [19] 6705 	ld	a, 0 (iy)
      002018 DD 77 F9         [19] 6706 	ld	-7 (ix), a
                                   6707 ;src\/GameLogic.h:135: if(lastJoystick_LeftRight == STCK_none) {
      00201B DD 7E FF         [19] 6708 	ld	a, -1 (ix)
      00201E B7               [ 4] 6709 	or	a, a
      00201F C2r08r21         [10] 6710 	jp	NZ, 00118$
                                   6711 ;src\/GameLogic.h:123: playfield[col][line + 1] = EMPTY;
      002022 FD 7E 00         [19] 6712 	ld	a, 0 (iy)
      002025 DD 77 FF         [19] 6713 	ld	-1 (ix), a
                                   6714 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      002028 FD 21r01r00      [14] 6715 	ld	iy, #_col
      00202C FD 7E 00         [19] 6716 	ld	a, 0 (iy)
      00202F DD 77 FA         [19] 6717 	ld	-6 (ix), a
                                   6718 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      002032 DD 7E FF         [19] 6719 	ld	a, -1 (ix)
      002035 C6 02            [ 7] 6720 	add	a, #0x02
      002037 DD 77 FB         [19] 6721 	ld	-5 (ix), a
                                   6722 ;src\/GameLogic.h:138: if (joystick == STCK_W && 
      00203A DD 7E F6         [19] 6723 	ld	a, -10 (ix)
      00203D D6 07            [ 7] 6724 	sub	a, #0x07
      00203F 20 5F            [12] 6725 	jr	NZ, 00112$
                                   6726 ;src\/GameLogic.h:139: col > 0 && 
      002041 FD 7E 00         [19] 6727 	ld	a, 0 (iy)
      002044 B7               [ 4] 6728 	or	a, a
      002045 28 59            [12] 6729 	jr	Z, 00112$
                                   6730 ;src\/GameLogic.h:140: playfield[col - 1][line] == EMPTY && 
      002047 DD 7E FA         [19] 6731 	ld	a, -6 (ix)
      00204A C6 FF            [ 7] 6732 	add	a, #0xff
      00204C DD 77 FF         [19] 6733 	ld	-1 (ix), a
      00204F 4F               [ 4] 6734 	ld	c, a
      002050 07               [ 4] 6735 	rlca
      002051 9F               [ 4] 6736 	sbc	a, a
      002052 47               [ 4] 6737 	ld	b, a
      002053 69               [ 4] 6738 	ld	l, c
      002054 60               [ 4] 6739 	ld	h, b
      002055 29               [11] 6740 	add	hl, hl
      002056 09               [11] 6741 	add	hl, bc
      002057 29               [11] 6742 	add	hl, hl
      002058 29               [11] 6743 	add	hl, hl
      002059 DD 75 FE         [19] 6744 	ld	-2 (ix), l
      00205C DD 74 FF         [19] 6745 	ld	-1 (ix), h
      00205F 3Er00            [ 7] 6746 	ld	a, #<(_playfield)
      002061 DD 86 FE         [19] 6747 	add	a, -2 (ix)
      002064 DD 77 FC         [19] 6748 	ld	-4 (ix), a
      002067 3Es00            [ 7] 6749 	ld	a, #>(_playfield)
      002069 DD 8E FF         [19] 6750 	adc	a, -1 (ix)
      00206C DD 77 FD         [19] 6751 	ld	-3 (ix), a
      00206F DD 7E FC         [19] 6752 	ld	a, -4 (ix)
      002072 DD 86 F9         [19] 6753 	add	a, -7 (ix)
      002075 DD 77 FE         [19] 6754 	ld	-2 (ix), a
      002078 DD 7E FD         [19] 6755 	ld	a, -3 (ix)
      00207B CE 00            [ 7] 6756 	adc	a, #0x00
      00207D DD 77 FF         [19] 6757 	ld	-1 (ix), a
      002080 DD 6E FE         [19] 6758 	ld	l, -2 (ix)
      002083 DD 66 FF         [19] 6759 	ld	h, -1 (ix)
      002086 7E               [ 7] 6760 	ld	a, (hl)
      002087 B7               [ 4] 6761 	or	a, a
      002088 20 16            [12] 6762 	jr	NZ, 00112$
                                   6763 ;src\/GameLogic.h:141: playfield[col - 1][line + 2] == EMPTY) {
      00208A DD 7E FC         [19] 6764 	ld	a, -4 (ix)
      00208D DD 86 FB         [19] 6765 	add	a, -5 (ix)
      002090 4F               [ 4] 6766 	ld	c, a
      002091 DD 7E FD         [19] 6767 	ld	a, -3 (ix)
      002094 CE 00            [ 7] 6768 	adc	a, #0x00
      002096 47               [ 4] 6769 	ld	b, a
      002097 0A               [ 7] 6770 	ld	a, (bc)
      002098 B7               [ 4] 6771 	or	a, a
      002099 20 05            [12] 6772 	jr	NZ, 00112$
                                   6773 ;src\/GameLogic.h:142: col--;
      00209B FD 35 00         [23] 6774 	dec	0 (iy)
      00209E 18 68            [12] 6775 	jr	00118$
      0020A0                       6776 00112$:
                                   6777 ;src\/GameLogic.h:144: else if (joystick == STCK_E && 
      0020A0 DD 7E F6         [19] 6778 	ld	a, -10 (ix)
      0020A3 D6 03            [ 7] 6779 	sub	a, #0x03
      0020A5 20 61            [12] 6780 	jr	NZ, 00118$
                                   6781 ;src\/GameLogic.h:145: col < COLS_PLAYFIELD - 1 &&
      0020A7 FD 21r01r00      [14] 6782 	ld	iy, #_col
      0020AB FD 7E 00         [19] 6783 	ld	a, 0 (iy)
      0020AE D6 05            [ 7] 6784 	sub	a, #0x05
      0020B0 30 56            [12] 6785 	jr	NC, 00118$
                                   6786 ;src\/GameLogic.h:146: playfield[col + 1][line] == EMPTY &&
      0020B2 DD 7E FA         [19] 6787 	ld	a, -6 (ix)
      0020B5 3C               [ 4] 6788 	inc	a
      0020B6 DD 77 FF         [19] 6789 	ld	-1 (ix), a
      0020B9 4F               [ 4] 6790 	ld	c, a
      0020BA 07               [ 4] 6791 	rlca
      0020BB 9F               [ 4] 6792 	sbc	a, a
      0020BC 47               [ 4] 6793 	ld	b, a
      0020BD 69               [ 4] 6794 	ld	l, c
      0020BE 60               [ 4] 6795 	ld	h, b
      0020BF 29               [11] 6796 	add	hl, hl
      0020C0 09               [11] 6797 	add	hl, bc
      0020C1 29               [11] 6798 	add	hl, hl
      0020C2 29               [11] 6799 	add	hl, hl
      0020C3 DD 75 FE         [19] 6800 	ld	-2 (ix), l
      0020C6 DD 74 FF         [19] 6801 	ld	-1 (ix), h
      0020C9 3Er00            [ 7] 6802 	ld	a, #<(_playfield)
      0020CB DD 86 FE         [19] 6803 	add	a, -2 (ix)
      0020CE DD 77 FC         [19] 6804 	ld	-4 (ix), a
      0020D1 3Es00            [ 7] 6805 	ld	a, #>(_playfield)
      0020D3 DD 8E FF         [19] 6806 	adc	a, -1 (ix)
      0020D6 DD 77 FD         [19] 6807 	ld	-3 (ix), a
      0020D9 DD 7E FC         [19] 6808 	ld	a, -4 (ix)
      0020DC DD 86 F9         [19] 6809 	add	a, -7 (ix)
      0020DF DD 77 FE         [19] 6810 	ld	-2 (ix), a
      0020E2 DD 7E FD         [19] 6811 	ld	a, -3 (ix)
      0020E5 CE 00            [ 7] 6812 	adc	a, #0x00
      0020E7 DD 77 FF         [19] 6813 	ld	-1 (ix), a
      0020EA DD 6E FE         [19] 6814 	ld	l, -2 (ix)
      0020ED DD 66 FF         [19] 6815 	ld	h, -1 (ix)
      0020F0 7E               [ 7] 6816 	ld	a, (hl)
      0020F1 B7               [ 4] 6817 	or	a, a
      0020F2 20 14            [12] 6818 	jr	NZ, 00118$
                                   6819 ;src\/GameLogic.h:147: playfield[col + 1][line + 2] == EMPTY) {
      0020F4 DD 7E FC         [19] 6820 	ld	a, -4 (ix)
      0020F7 DD 86 FB         [19] 6821 	add	a, -5 (ix)
      0020FA 4F               [ 4] 6822 	ld	c, a
      0020FB DD 7E FD         [19] 6823 	ld	a, -3 (ix)
      0020FE CE 00            [ 7] 6824 	adc	a, #0x00
      002100 47               [ 4] 6825 	ld	b, a
      002101 0A               [ 7] 6826 	ld	a, (bc)
      002102 B7               [ 4] 6827 	or	a, a
      002103 20 03            [12] 6828 	jr	NZ, 00118$
                                   6829 ;src\/GameLogic.h:148: col++;
      002105 FD 34 00         [23] 6830 	inc	0 (iy)
      002108                       6831 00118$:
                                   6832 ;src\/GameLogic.h:152: if(lastJoystick_UpDown == STCK_none) {
      002108 DD 7E F3         [19] 6833 	ld	a, -13 (ix)
      00210B B7               [ 4] 6834 	or	a, a
      00210C C2rCEr21         [10] 6835 	jp	NZ, 00132$
                                   6836 ;src\/GameLogic.h:156: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      00210F DD 7E F6         [19] 6837 	ld	a, -10 (ix)
      002112 3D               [ 4] 6838 	dec	a
      002113 28 18            [12] 6839 	jr	Z, 00119$
      002115 DD 7E F4         [19] 6840 	ld	a, -12 (ix)
      002118 B7               [ 4] 6841 	or	a, a
      002119 20 06            [12] 6842 	jr	NZ, 00124$
      00211B DD 7E F7         [19] 6843 	ld	a, -9 (ix)
      00211E 3C               [ 4] 6844 	inc	a
      00211F 28 0C            [12] 6845 	jr	Z, 00119$
      002121                       6846 00124$:
      002121 DD 7E F5         [19] 6847 	ld	a, -11 (ix)
      002124 B7               [ 4] 6848 	or	a, a
      002125 20 1A            [12] 6849 	jr	NZ, 00120$
      002127 DD 7E F8         [19] 6850 	ld	a, -8 (ix)
      00212A 3C               [ 4] 6851 	inc	a
      00212B 20 14            [12] 6852 	jr	NZ, 00120$
      00212D                       6853 00119$:
                                   6854 ;src\/GameLogic.h:157: byte temp = bottomPiece;
      00212D 3Ar92r00         [13] 6855 	ld	a, (#_bottomPiece + 0)
      002130 4F               [ 4] 6856 	ld	c, a
                                   6857 ;src\/GameLogic.h:159: bottomPiece = midPiece;
      002131 3Ar91r00         [13] 6858 	ld	a,(#_midPiece + 0)
      002134 32r92r00         [13] 6859 	ld	(#_bottomPiece),a
                                   6860 ;src\/GameLogic.h:160: midPiece = topPiece;
      002137 3Ar90r00         [13] 6861 	ld	a,(#_topPiece + 0)
      00213A 32r91r00         [13] 6862 	ld	(#_midPiece),a
                                   6863 ;src\/GameLogic.h:161: topPiece = temp;
      00213D 21r90r00         [10] 6864 	ld	hl, #_topPiece
      002140 71               [ 7] 6865 	ld	(hl), c
      002141                       6866 00120$:
                                   6867 ;src\/GameLogic.h:165: if (joystick == STCK_S) {
      002141 DD 7E F6         [19] 6868 	ld	a, -10 (ix)
      002144 D6 05            [ 7] 6869 	sub	a, #0x05
      002146 C2rCEr21         [10] 6870 	jp	NZ,00132$
                                   6871 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002149 DD 7E F9         [19] 6872 	ld	a, -7 (ix)
      00214C DD 77 FE         [19] 6873 	ld	-2 (ix), a
      00214F DD 7E F9         [19] 6874 	ld	a, -7 (ix)
      002152 DD 77 FF         [19] 6875 	ld	-1 (ix), a
      002155                       6876 00154$:
      002155 DD 7E FF         [19] 6877 	ld	a, -1 (ix)
      002158 D6 0C            [ 7] 6878 	sub	a, #0x0c
      00215A 30 72            [12] 6879 	jr	NC, 00132$
                                   6880 ;src\/GameLogic.h:167: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      00215C DD 7E FF         [19] 6881 	ld	a, -1 (ix)
      00215F D6 09            [ 7] 6882 	sub	a, #0x09
      002161 28 4C            [12] 6883 	jr	Z, 00125$
      002163 ED 4Br01r00      [20] 6884 	ld	bc, (_col)
      002167 06 00            [ 7] 6885 	ld	b, #0x00
      002169 69               [ 4] 6886 	ld	l, c
      00216A 60               [ 4] 6887 	ld	h, b
      00216B 29               [11] 6888 	add	hl, hl
      00216C 09               [11] 6889 	add	hl, bc
      00216D 29               [11] 6890 	add	hl, hl
      00216E 29               [11] 6891 	add	hl, hl
      00216F DD 75 FC         [19] 6892 	ld	-4 (ix), l
      002172 DD 74 FD         [19] 6893 	ld	-3 (ix), h
      002175 3Er00            [ 7] 6894 	ld	a, #<(_playfield)
      002177 DD 86 FC         [19] 6895 	add	a, -4 (ix)
      00217A DD 77 FA         [19] 6896 	ld	-6 (ix), a
      00217D 3Es00            [ 7] 6897 	ld	a, #>(_playfield)
      00217F DD 8E FD         [19] 6898 	adc	a, -3 (ix)
      002182 DD 77 FB         [19] 6899 	ld	-5 (ix), a
      002185 DD 7E FF         [19] 6900 	ld	a, -1 (ix)
      002188 DD 77 FD         [19] 6901 	ld	-3 (ix), a
      00218B DD 34 FD         [23] 6902 	inc	-3 (ix)
      00218E DD 34 FD         [23] 6903 	inc	-3 (ix)
      002191 DD 34 FD         [23] 6904 	inc	-3 (ix)
      002194 DD 7E FD         [19] 6905 	ld	a, -3 (ix)
      002197 DD 86 FA         [19] 6906 	add	a, -6 (ix)
      00219A DD 77 FC         [19] 6907 	ld	-4 (ix), a
      00219D 3E 00            [ 7] 6908 	ld	a, #0x00
      00219F DD 8E FB         [19] 6909 	adc	a, -5 (ix)
      0021A2 DD 77 FD         [19] 6910 	ld	-3 (ix), a
      0021A5 DD 6E FC         [19] 6911 	ld	l, -4 (ix)
      0021A8 DD 66 FD         [19] 6912 	ld	h, -3 (ix)
      0021AB 7E               [ 7] 6913 	ld	a, (hl)
      0021AC B7               [ 4] 6914 	or	a, a
      0021AD 28 14            [12] 6915 	jr	Z, 00155$
      0021AF                       6916 00125$:
                                   6917 ;src\/GameLogic.h:170: DrawPiece(line);
      0021AF 3Ar02r00         [13] 6918 	ld	a,(#_line + 0)
      0021B2 F5               [11] 6919 	push	af
      0021B3 33               [ 6] 6920 	inc	sp
      0021B4 CDr7Cr15         [17] 6921 	call	_DrawPiece
      0021B7 33               [ 6] 6922 	inc	sp
                                   6923 ;src\/GameLogic.h:172: line = i;
      0021B8 DD 7E FE         [19] 6924 	ld	a, -2 (ix)
      0021BB 32r02r00         [13] 6925 	ld	(#_line),a
                                   6926 ;src\/GameLogic.h:174: UpdateAndDrawPieceStatic();
      0021BE CDr6Fr1E         [17] 6927 	call	_UpdateAndDrawPieceStatic
                                   6928 ;src\/GameLogic.h:175: break;
      0021C1 18 0B            [12] 6929 	jr	00132$
      0021C3                       6930 00155$:
                                   6931 ;src\/GameLogic.h:166: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      0021C3 DD 34 FF         [23] 6932 	inc	-1 (ix)
      0021C6 DD 7E FF         [19] 6933 	ld	a, -1 (ix)
      0021C9 DD 77 FE         [19] 6934 	ld	-2 (ix), a
      0021CC 18 87            [12] 6935 	jr	00154$
      0021CE                       6936 00132$:
                                   6937 ;src\/GameLogic.h:184: lastJoystick_LeftRight = joystick;
      0021CE DD 7E F6         [19] 6938 	ld	a, -10 (ix)
      0021D1 DD 77 FF         [19] 6939 	ld	-1 (ix), a
                                   6940 ;src\/GameLogic.h:185: lastJoystick_UpDown = joystick;
      0021D4 DD 7E F6         [19] 6941 	ld	a, -10 (ix)
      0021D7 DD 77 F3         [19] 6942 	ld	-13 (ix), a
                                   6943 ;src\/GameLogic.h:186: lastBtn1 = btn1;
      0021DA DD 7E F7         [19] 6944 	ld	a, -9 (ix)
      0021DD DD 77 F4         [19] 6945 	ld	-12 (ix), a
                                   6946 ;src\/GameLogic.h:187: lastBtn2 = btn2;
      0021E0 DD 7E F8         [19] 6947 	ld	a, -8 (ix)
      0021E3 DD 77 F5         [19] 6948 	ld	-11 (ix), a
                                   6949 ;src\/GameLogic.h:211: keyboard = SNSMAT(7);
      0021E6 2E 07            [ 7] 6950 	ld	l, #0x07
      0021E8 CDr00r00         [17] 6951 	call	_SNSMAT
                                   6952 ;src\/GameLogic.h:213: if((keyboard & 0b00000100) == 0) {
      0021EB CB 55            [ 8] 6953 	bit	2, l
      0021ED 20 03            [12] 6954 	jr	NZ, 00134$
                                   6955 ;src\/GameLogic.h:214: Pause();
      0021EF CDr27r1F         [17] 6956 	call	_Pause
      0021F2                       6957 00134$:
                                   6958 ;src\/GameLogic.h:219: counter++;
      0021F2 FD 21r03r00      [14] 6959 	ld	iy, #_counter
      0021F6 FD 34 00         [23] 6960 	inc	0 (iy)
                                   6961 ;src\/GameLogic.h:220: if(counter == speed) {
      0021F9 FD 7E 00         [19] 6962 	ld	a, 0 (iy)
      0021FC 21r93r00         [10] 6963 	ld	hl, #_speed
      0021FF 96               [ 7] 6964 	sub	a, (hl)
      002200 20 3F            [12] 6965 	jr	NZ, 00139$
                                   6966 ;src\/GameLogic.h:222: counter = 0;
      002202 21r03r00         [10] 6967 	ld	hl, #_counter
      002205 36 00            [10] 6968 	ld	(hl), #0x00
                                   6969 ;src\/GameLogic.h:225: DrawPiece(line);
      002207 3Ar02r00         [13] 6970 	ld	a,(#_line + 0)
      00220A F5               [11] 6971 	push	af
      00220B 33               [ 6] 6972 	inc	sp
      00220C CDr7Cr15         [17] 6973 	call	_DrawPiece
      00220F 33               [ 6] 6974 	inc	sp
                                   6975 ;src\/GameLogic.h:229: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002210 FD 21r02r00      [14] 6976 	ld	iy, #_line
      002214 FD 7E 00         [19] 6977 	ld	a, 0 (iy)
      002217 D6 09            [ 7] 6978 	sub	a, #0x09
      002219 28 1F            [12] 6979 	jr	Z, 00135$
      00221B ED 4Br01r00      [20] 6980 	ld	bc, (_col)
      00221F 06 00            [ 7] 6981 	ld	b, #0x00
      002221 69               [ 4] 6982 	ld	l, c
      002222 60               [ 4] 6983 	ld	h, b
      002223 29               [11] 6984 	add	hl, hl
      002224 09               [11] 6985 	add	hl, bc
      002225 29               [11] 6986 	add	hl, hl
      002226 29               [11] 6987 	add	hl, hl
      002227 EB               [ 4] 6988 	ex	de, hl
      002228 21r00r00         [10] 6989 	ld	hl, #_playfield
      00222B 19               [11] 6990 	add	hl, de
      00222C EB               [ 4] 6991 	ex	de, hl
      00222D FD 7E 00         [19] 6992 	ld	a, 0 (iy)
      002230 C6 03            [ 7] 6993 	add	a, #0x03
      002232 6F               [ 4] 6994 	ld	l, a
      002233 26 00            [ 7] 6995 	ld	h, #0x00
      002235 19               [11] 6996 	add	hl, de
      002236 7E               [ 7] 6997 	ld	a, (hl)
      002237 B7               [ 4] 6998 	or	a, a
      002238 28 03            [12] 6999 	jr	Z, 00136$
      00223A                       7000 00135$:
                                   7001 ;src\/GameLogic.h:231: UpdateAndDrawPieceStatic();
      00223A CDr6Fr1E         [17] 7002 	call	_UpdateAndDrawPieceStatic
      00223D                       7003 00136$:
                                   7004 ;src\/GameLogic.h:234: line++;
      00223D 21r02r00         [10] 7005 	ld	hl, #_line
      002240 34               [11] 7006 	inc	(hl)
      002241                       7007 00139$:
                                   7008 ;src\/GameLogic.h:241: playfield[col][line] = topPiece;
      002241 ED 4Br01r00      [20] 7009 	ld	bc, (_col)
      002245 06 00            [ 7] 7010 	ld	b, #0x00
      002247 69               [ 4] 7011 	ld	l, c
      002248 60               [ 4] 7012 	ld	h, b
      002249 29               [11] 7013 	add	hl, hl
      00224A 09               [11] 7014 	add	hl, bc
      00224B 29               [11] 7015 	add	hl, hl
      00224C 29               [11] 7016 	add	hl, hl
      00224D EB               [ 4] 7017 	ex	de, hl
      00224E 21r00r00         [10] 7018 	ld	hl, #_playfield
      002251 19               [11] 7019 	add	hl, de
      002252 EB               [ 4] 7020 	ex	de, hl
      002253 3Ar02r00         [13] 7021 	ld	a, (#_line + 0)
      002256 6F               [ 4] 7022 	ld	l, a
      002257 26 00            [ 7] 7023 	ld	h, #0x00
      002259 19               [11] 7024 	add	hl, de
      00225A 3Ar90r00         [13] 7025 	ld	a,(#_topPiece + 0)
      00225D 77               [ 7] 7026 	ld	(hl), a
                                   7027 ;src\/GameLogic.h:242: playfield[col][line + 1] = midPiece;
      00225E ED 4Br01r00      [20] 7028 	ld	bc, (_col)
      002262 06 00            [ 7] 7029 	ld	b, #0x00
      002264 69               [ 4] 7030 	ld	l, c
      002265 60               [ 4] 7031 	ld	h, b
      002266 29               [11] 7032 	add	hl, hl
      002267 09               [11] 7033 	add	hl, bc
      002268 29               [11] 7034 	add	hl, hl
      002269 29               [11] 7035 	add	hl, hl
      00226A EB               [ 4] 7036 	ex	de, hl
      00226B 21r00r00         [10] 7037 	ld	hl, #_playfield
      00226E 19               [11] 7038 	add	hl, de
      00226F EB               [ 4] 7039 	ex	de, hl
      002270 3Ar02r00         [13] 7040 	ld	a, (#_line + 0)
      002273 6F               [ 4] 7041 	ld	l, a
      002274 2C               [ 4] 7042 	inc	l
      002275 26 00            [ 7] 7043 	ld	h, #0x00
      002277 19               [11] 7044 	add	hl, de
      002278 3Ar91r00         [13] 7045 	ld	a,(#_midPiece + 0)
      00227B 77               [ 7] 7046 	ld	(hl), a
                                   7047 ;src\/GameLogic.h:243: playfield[col][line + 2] = bottomPiece;
      00227C ED 4Br01r00      [20] 7048 	ld	bc, (_col)
      002280 06 00            [ 7] 7049 	ld	b, #0x00
      002282 69               [ 4] 7050 	ld	l, c
      002283 60               [ 4] 7051 	ld	h, b
      002284 29               [11] 7052 	add	hl, hl
      002285 09               [11] 7053 	add	hl, bc
      002286 29               [11] 7054 	add	hl, hl
      002287 29               [11] 7055 	add	hl, hl
      002288 EB               [ 4] 7056 	ex	de, hl
      002289 21r00r00         [10] 7057 	ld	hl, #_playfield
      00228C 19               [11] 7058 	add	hl, de
      00228D EB               [ 4] 7059 	ex	de, hl
      00228E 3Ar02r00         [13] 7060 	ld	a, (#_line + 0)
      002291 6F               [ 4] 7061 	ld	l, a
      002292 2C               [ 4] 7062 	inc	l
      002293 2C               [ 4] 7063 	inc	l
      002294 26 00            [ 7] 7064 	ld	h, #0x00
      002296 19               [11] 7065 	add	hl, de
      002297 3Ar92r00         [13] 7066 	ld	a,(#_bottomPiece + 0)
      00229A 77               [ 7] 7067 	ld	(hl), a
                                   7068 ;src\/GameLogic.h:248: DrawPiece(line);
      00229B 3Ar02r00         [13] 7069 	ld	a,(#_line + 0)
      00229E F5               [11] 7070 	push	af
      00229F 33               [ 6] 7071 	inc	sp
      0022A0 CDr7Cr15         [17] 7072 	call	_DrawPiece
      0022A3 33               [ 6] 7073 	inc	sp
                                   7074 ;src\/GameLogic.h:122: playfield[col][line] = EMPTY;
      0022A4 ED 4Br01r00      [20] 7075 	ld	bc, (_col)
      0022A8 06 00            [ 7] 7076 	ld	b, #0x00
      0022AA 69               [ 4] 7077 	ld	l, c
      0022AB 60               [ 4] 7078 	ld	h, b
      0022AC 29               [11] 7079 	add	hl, hl
      0022AD 09               [11] 7080 	add	hl, bc
      0022AE 29               [11] 7081 	add	hl, hl
      0022AF 29               [11] 7082 	add	hl, hl
      0022B0 EB               [ 4] 7083 	ex	de, hl
                                   7084 ;src\/GameLogic.h:253: if(playfield[col][line + 3] != EMPTY) {
      0022B1 21r00r00         [10] 7085 	ld	hl, #_playfield
      0022B4 19               [11] 7086 	add	hl, de
      0022B5 EB               [ 4] 7087 	ex	de, hl
      0022B6 3Ar02r00         [13] 7088 	ld	a,(#_line + 0)
      0022B9 C6 03            [ 7] 7089 	add	a, #0x03
      0022BB 4F               [ 4] 7090 	ld	c, a
      0022BC 69               [ 4] 7091 	ld	l, c
      0022BD 26 00            [ 7] 7092 	ld	h, #0x00
      0022BF 19               [11] 7093 	add	hl, de
      0022C0 7E               [ 7] 7094 	ld	a, (hl)
      0022C1 B7               [ 4] 7095 	or	a, a
      0022C2 28 06            [12] 7096 	jr	Z, 00148$
                                   7097 ;src\/GameLogic.h:254: HideArrowSprite();
      0022C4 CDr08r0A         [17] 7098 	call	_HideArrowSprite
      0022C7 C3r84r1F         [10] 7099 	jp	00150$
      0022CA                       7100 00148$:
                                   7101 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0022CA 41               [ 4] 7102 	ld	b, c
      0022CB                       7103 00157$:
      0022CB 78               [ 4] 7104 	ld	a, b
      0022CC D6 0C            [ 7] 7105 	sub	a, #0x0c
      0022CE D2r84r1F         [10] 7106 	jp	NC, 00150$
                                   7107 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0022D1 3Ar01r00         [13] 7108 	ld	a,(#_col + 0)
      0022D4 87               [ 4] 7109 	add	a, a
      0022D5 87               [ 4] 7110 	add	a, a
      0022D6 87               [ 4] 7111 	add	a, a
      0022D7 87               [ 4] 7112 	add	a, a
      0022D8 DD 77 FE         [19] 7113 	ld	-2 (ix), a
                                   7114 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0022DB 68               [ 4] 7115 	ld	l, b
      0022DC 26 00            [ 7] 7116 	ld	h, #0x00
      0022DE 19               [11] 7117 	add	hl, de
                                   7118 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0022DF DD 7E FE         [19] 7119 	ld	a, -2 (ix)
      0022E2 C6 50            [ 7] 7120 	add	a, #0x50
      0022E4 DD 77 FE         [19] 7121 	ld	-2 (ix), a
                                   7122 ;src\/GameLogic.h:258: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0022E7 6E               [ 7] 7123 	ld	l, (hl)
      0022E8 78               [ 4] 7124 	ld	a, b
      0022E9 D6 0B            [ 7] 7125 	sub	a,#0x0b
      0022EB 20 16            [12] 7126 	jr	NZ, 00143$
      0022ED B5               [ 4] 7127 	or	a,l
      0022EE 20 13            [12] 7128 	jr	NZ, 00143$
                                   7129 ;src\/GameLogic.h:259: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0022F0 79               [ 4] 7130 	ld	a, c
      0022F1 87               [ 4] 7131 	add	a, a
      0022F2 87               [ 4] 7132 	add	a, a
      0022F3 87               [ 4] 7133 	add	a, a
      0022F4 87               [ 4] 7134 	add	a, a
      0022F5 F5               [11] 7135 	push	af
      0022F6 33               [ 6] 7136 	inc	sp
      0022F7 DD 7E FE         [19] 7137 	ld	a, -2 (ix)
      0022FA F5               [11] 7138 	push	af
      0022FB 33               [ 6] 7139 	inc	sp
      0022FC CDrEDr00         [17] 7140 	call	_DrawArrowSprite
      0022FF F1               [10] 7141 	pop	af
                                   7142 ;src\/GameLogic.h:260: break;
      002300 C3r84r1F         [10] 7143 	jp	00150$
      002303                       7144 00143$:
                                   7145 ;src\/GameLogic.h:262: else if(playfield[col][i] != EMPTY) {
      002303 7D               [ 4] 7146 	ld	a, l
      002304 B7               [ 4] 7147 	or	a, a
      002305 28 14            [12] 7148 	jr	Z, 00158$
                                   7149 ;src\/GameLogic.h:263: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002307 79               [ 4] 7150 	ld	a, c
      002308 3D               [ 4] 7151 	dec	a
      002309 87               [ 4] 7152 	add	a, a
      00230A 87               [ 4] 7153 	add	a, a
      00230B 87               [ 4] 7154 	add	a, a
      00230C 87               [ 4] 7155 	add	a, a
      00230D F5               [11] 7156 	push	af
      00230E 33               [ 6] 7157 	inc	sp
      00230F DD 7E FE         [19] 7158 	ld	a, -2 (ix)
      002312 F5               [11] 7159 	push	af
      002313 33               [ 6] 7160 	inc	sp
      002314 CDrEDr00         [17] 7161 	call	_DrawArrowSprite
      002317 F1               [10] 7162 	pop	af
                                   7163 ;src\/GameLogic.h:264: break;
      002318 C3r84r1F         [10] 7164 	jp	00150$
      00231B                       7165 00158$:
                                   7166 ;src\/GameLogic.h:257: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      00231B 04               [ 4] 7167 	inc	b
      00231C 48               [ 4] 7168 	ld	c, b
      00231D 18 AC            [12] 7169 	jr	00157$
      00231F                       7170 00152$:
                                   7171 ;src\/GameLogic.h:271: DrawString("GAME OVER", 12, 12);
      00231F 11 0C 0C         [10] 7172 	ld	de, #0x0c0c
      002322 D5               [11] 7173 	push	de
      002323 21r37r23         [10] 7174 	ld	hl, #___str_7
      002326 E5               [11] 7175 	push	hl
      002327 CDrB1r0D         [17] 7176 	call	_DrawString
      00232A F1               [10] 7177 	pop	af
                                   7178 ;src\/GameLogic.h:276: Wait(60 * 3);
      00232B 21 B4 00         [10] 7179 	ld	hl, #0x00b4
      00232E E3               [19] 7180 	ex	(sp),hl
      00232F CDr00r00         [17] 7181 	call	_Wait
                                   7182 ;src\/GameLogic.h:278: }
      002332 DD F9            [10] 7183 	ld	sp,ix
      002334 DD E1            [14] 7184 	pop	ix
      002336 C9               [10] 7185 	ret
      002337                       7186 ___str_7:
      002337 47 41 4D 45 20 4F 56  7187 	.ascii "GAME OVER"
             45 52
      002340 00                    7188 	.db 0x00
                                   7189 ;src\/GameLogic.h:280: void TestCase() {
                                   7190 ;	---------------------------------
                                   7191 ; Function TestCase
                                   7192 ; ---------------------------------
      002341                       7193 _TestCase::
                                   7194 ;src\/GameLogic.h:301: playfield[2][ 8] = TILE_GREEN;
      002341 21r20r00         [10] 7195 	ld	hl, #(_playfield + 0x0020)
      002344 36 04            [10] 7196 	ld	(hl), #0x04
                                   7197 ;src\/GameLogic.h:302: playfield[2][ 9] = TILE_BLUE;
      002346 21r21r00         [10] 7198 	ld	hl, #(_playfield + 0x0021)
      002349 36 0C            [10] 7199 	ld	(hl), #0x0c
                                   7200 ;src\/GameLogic.h:304: playfield[0][10] = TILE_BLUE;
      00234B 21r0Ar00         [10] 7201 	ld	hl, #(_playfield + 0x000a)
      00234E 36 0C            [10] 7202 	ld	(hl), #0x0c
                                   7203 ;src\/GameLogic.h:305: playfield[1][10] = TILE_BLUE;
      002350 21r16r00         [10] 7204 	ld	hl, #(_playfield + 0x0016)
      002353 36 0C            [10] 7205 	ld	(hl), #0x0c
                                   7206 ;src\/GameLogic.h:306: playfield[2][10] = TILE_RED;
      002355 21r22r00         [10] 7207 	ld	hl, #(_playfield + 0x0022)
      002358 36 08            [10] 7208 	ld	(hl), #0x08
                                   7209 ;src\/GameLogic.h:307: playfield[4][10] = TILE_RED;
      00235A 21r3Ar00         [10] 7210 	ld	hl, #(_playfield + 0x003a)
      00235D 36 08            [10] 7211 	ld	(hl), #0x08
                                   7212 ;src\/GameLogic.h:308: playfield[5][10] = TILE_BLUE;
      00235F 21r46r00         [10] 7213 	ld	hl, #(_playfield + 0x0046)
      002362 36 0C            [10] 7214 	ld	(hl), #0x0c
                                   7215 ;src\/GameLogic.h:310: playfield[0][11] = TILE_GREEN;
      002364 21r0Br00         [10] 7216 	ld	hl, #(_playfield + 0x000b)
      002367 36 04            [10] 7217 	ld	(hl), #0x04
                                   7218 ;src\/GameLogic.h:311: playfield[1][11] = TILE_GREEN;
      002369 21r17r00         [10] 7219 	ld	hl, #(_playfield + 0x0017)
      00236C 36 04            [10] 7220 	ld	(hl), #0x04
                                   7221 ;src\/GameLogic.h:312: playfield[2][11] = TILE_RED;
      00236E 21r23r00         [10] 7222 	ld	hl, #(_playfield + 0x0023)
      002371 36 08            [10] 7223 	ld	(hl), #0x08
                                   7224 ;src\/GameLogic.h:313: playfield[3][11] = EMPTY;
      002373 21r2Fr00         [10] 7225 	ld	hl, #(_playfield + 0x002f)
      002376 36 00            [10] 7226 	ld	(hl), #0x00
                                   7227 ;src\/GameLogic.h:314: playfield[4][11] = TILE_RED;
      002378 21r3Br00         [10] 7228 	ld	hl, #(_playfield + 0x003b)
      00237B 36 08            [10] 7229 	ld	(hl), #0x08
                                   7230 ;src\/GameLogic.h:315: playfield[5][11] = TILE_RED;
      00237D 21r47r00         [10] 7231 	ld	hl, #(_playfield + 0x0047)
      002380 36 08            [10] 7232 	ld	(hl), #0x08
                                   7233 ;src\/GameLogic.h:317: topPiece = TILE_BLUE;
      002382 3E 0C            [ 7] 7234 	ld	a, #0x0c
      002384 32r90r00         [13] 7235 	ld	(#_topPiece), a
                                   7236 ;src\/GameLogic.h:318: midPiece = TILE_RED;
                                   7237 ;src\/GameLogic.h:319: bottomPiece = TILE_RED;
      002387 3E 08            [ 7] 7238 	ld	a,#0x08
      002389 32r91r00         [13] 7239 	ld	(#_midPiece),a
      00238C 32r92r00         [13] 7240 	ld	(#_bottomPiece), a
                                   7241 ;src\/GameLogic.h:320: }
      00238F C9               [10] 7242 	ret
                                   7243 ;src\/GameLogic.h:322: void InitGame() {
                                   7244 ;	---------------------------------
                                   7245 ; Function InitGame
                                   7246 ; ---------------------------------
      002390                       7247 _InitGame::
                                   7248 ;src\/GameLogic.h:324: gameOver = FALSE;
      002390 21r00r00         [10] 7249 	ld	hl, #_gameOver
      002393 36 00            [10] 7250 	ld	(hl), #0x00
                                   7251 ;src\/GameLogic.h:325: line = INITIAL_LINE;
      002395 21r02r00         [10] 7252 	ld	hl, #_line
      002398 36 00            [10] 7253 	ld	(hl), #0x00
                                   7254 ;src\/GameLogic.h:326: col = INITIAL_COL;
      00239A 21r01r00         [10] 7255 	ld	hl, #_col
      00239D 36 02            [10] 7256 	ld	(hl), #0x02
                                   7257 ;src\/GameLogic.h:327: score = 0;
      00239F 21 00 00         [10] 7258 	ld	hl, #0x0000
      0023A2 22r04r00         [16] 7259 	ld	(_score), hl
                                   7260 ;src\/GameLogic.h:328: blocksRemoved = 0;
      0023A5 6C               [ 4] 7261 	ld	l, h
      0023A6 22r06r00         [16] 7262 	ld	(_blocksRemoved), hl
                                   7263 ;src\/GameLogic.h:329: level = 1;
      0023A9 21r08r00         [10] 7264 	ld	hl, #_level
      0023AC 36 01            [10] 7265 	ld	(hl), #0x01
                                   7266 ;src\/GameLogic.h:330: newLevel = FALSE;
      0023AE 21r09r00         [10] 7267 	ld	hl, #_newLevel
      0023B1 36 00            [10] 7268 	ld	(hl), #0x00
                                   7269 ;src\/GameLogic.h:331: speed = 60;
      0023B3 21r93r00         [10] 7270 	ld	hl, #_speed
      0023B6 36 3C            [10] 7271 	ld	(hl), #0x3c
                                   7272 ;src\/GameLogic.h:333: InitVRAM();
      0023B8 CDr25r12         [17] 7273 	call	_InitVRAM
                                   7274 ;src\/GameLogic.h:336: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      0023BB 3Ar0Ar00         [13] 7275 	ld	a, (#_rndSeed + 0)
      0023BE 5F               [ 4] 7276 	ld	e, a
      0023BF 3A 9E FC         [13] 7277 	ld	a, (#_JIFFY + 0)
      0023C2 67               [ 4] 7278 	ld	h, a
      0023C3 2E 00            [ 7] 7279 	ld	l, #0x00
      0023C5 55               [ 4] 7280 	ld	d, l
      0023C6 06 08            [ 7] 7281 	ld	b, #0x08
      0023C8                       7282 00133$:
      0023C8 29               [11] 7283 	add	hl, hl
      0023C9 30 01            [12] 7284 	jr	NC, 00134$
      0023CB 19               [11] 7285 	add	hl, de
      0023CC                       7286 00134$:
      0023CC 10 FA            [13] 7287 	djnz	00133$
      0023CE 7D               [ 4] 7288 	ld	a, l
      0023CF C6 63            [ 7] 7289 	add	a, #0x63
      0023D1 4F               [ 4] 7290 	ld	c, a
      0023D2 3Ar0Ar00         [13] 7291 	ld	a, (#_rndSeed + 0)
      0023D5 5F               [ 4] 7292 	ld	e, a
      0023D6 3A 9E FC         [13] 7293 	ld	a, (#_JIFFY + 0)
      0023D9 67               [ 4] 7294 	ld	h, a
      0023DA 2E 00            [ 7] 7295 	ld	l, #0x00
      0023DC 55               [ 4] 7296 	ld	d, l
      0023DD 06 08            [ 7] 7297 	ld	b, #0x08
      0023DF                       7298 00135$:
      0023DF 29               [11] 7299 	add	hl, hl
      0023E0 30 01            [12] 7300 	jr	NC, 00136$
      0023E2 19               [11] 7301 	add	hl, de
      0023E3                       7302 00136$:
      0023E3 10 FA            [13] 7303 	djnz	00135$
      0023E5 79               [ 4] 7304 	ld	a, c
      0023E6 F5               [11] 7305 	push	af
      0023E7 7D               [ 4] 7306 	ld	a, l
      0023E8 33               [ 6] 7307 	inc	sp
      0023E9 F5               [11] 7308 	push	af
      0023EA 33               [ 6] 7309 	inc	sp
      0023EB 3Ar0Ar00         [13] 7310 	ld	a,(#_rndSeed + 0)
      0023EE F5               [11] 7311 	push	af
      0023EF 33               [ 6] 7312 	inc	sp
      0023F0 CDr50r00         [17] 7313 	call	_InitRnd
      0023F3 F1               [10] 7314 	pop	af
      0023F4 33               [ 6] 7315 	inc	sp
                                   7316 ;src\/GameLogic.h:339: RandomPiece();
      0023F5 CDr47r1E         [17] 7317 	call	_RandomPiece
                                   7318 ;src\/GameLogic.h:342: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0023F8 0E 00            [ 7] 7319 	ld	c, #0x00
      0023FA                       7320 00107$:
      0023FA 79               [ 4] 7321 	ld	a, c
      0023FB D6 0C            [ 7] 7322 	sub	a, #0x0c
      0023FD 30 20            [12] 7323 	jr	NC, 00102$
                                   7324 ;src\/GameLogic.h:343: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0023FF 06 00            [ 7] 7325 	ld	b, #0x00
      002401                       7326 00104$:
      002401 78               [ 4] 7327 	ld	a, b
      002402 D6 06            [ 7] 7328 	sub	a, #0x06
      002404 30 16            [12] 7329 	jr	NC, 00108$
                                   7330 ;src\/GameLogic.h:344: playfield[col][line] = EMPTY;
      002406 58               [ 4] 7331 	ld	e, b
      002407 16 00            [ 7] 7332 	ld	d, #0x00
      002409 6B               [ 4] 7333 	ld	l, e
      00240A 62               [ 4] 7334 	ld	h, d
      00240B 29               [11] 7335 	add	hl, hl
      00240C 19               [11] 7336 	add	hl, de
      00240D 29               [11] 7337 	add	hl, hl
      00240E 29               [11] 7338 	add	hl, hl
      00240F 11r00r00         [10] 7339 	ld	de, #_playfield
      002412 19               [11] 7340 	add	hl, de
      002413 59               [ 4] 7341 	ld	e, c
      002414 16 00            [ 7] 7342 	ld	d, #0x00
      002416 19               [11] 7343 	add	hl, de
      002417 36 00            [10] 7344 	ld	(hl), #0x00
                                   7345 ;src\/GameLogic.h:343: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002419 04               [ 4] 7346 	inc	b
      00241A 18 E5            [12] 7347 	jr	00104$
      00241C                       7348 00108$:
                                   7349 ;src\/GameLogic.h:342: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00241C 0C               [ 4] 7350 	inc	c
      00241D 18 DB            [12] 7351 	jr	00107$
      00241F                       7352 00102$:
                                   7353 ;src\/GameLogic.h:349: TestCase();
      00241F CDr41r23         [17] 7354 	call	_TestCase
                                   7355 ;src\/GameLogic.h:351: newLevel = TRUE;  //test
      002422 21r09r00         [10] 7356 	ld	hl, #_newLevel
      002425 36 01            [10] 7357 	ld	(hl), #0x01
                                   7358 ;src\/GameLogic.h:353: DrawBackground();
      002427 CDrF6r11         [17] 7359 	call	_DrawBackground
                                   7360 ;src\/GameLogic.h:355: DrawPlayfield();
      00242A CDr9Fr15         [17] 7361 	call	_DrawPlayfield
                                   7362 ;src\/GameLogic.h:357: DrawScore();
      00242D CDr3Fr10         [17] 7363 	call	_DrawScore
                                   7364 ;src\/GameLogic.h:359: GameLoop();
                                   7365 ;src\/GameLogic.h:360: }
      002430 C3r67r1F         [10] 7366 	jp	_GameLoop
                                   7367 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   7368 ;	---------------------------------
                                   7369 ; Function ChangeFontColor
                                   7370 ; ---------------------------------
      002433                       7371 _ChangeFontColor::
                                   7372 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002433 21 02 00         [10] 7373 	ld	hl, #2
      002436 39               [11] 7374 	add	hl, sp
      002437 7E               [ 7] 7375 	ld	a, (hl)
      002438 F5               [11] 7376 	push	af
      002439 33               [ 6] 7377 	inc	sp
      00243A 21 00 03         [10] 7378 	ld	hl, #0x0300
      00243D E5               [11] 7379 	push	hl
      00243E 21 78 21         [10] 7380 	ld	hl, #0x2178
      002441 E5               [11] 7381 	push	hl
      002442 CDr00r00         [17] 7382 	call	_FILVRM
      002445 F1               [10] 7383 	pop	af
      002446 F1               [10] 7384 	pop	af
      002447 33               [ 6] 7385 	inc	sp
                                   7386 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002448 21 02 00         [10] 7387 	ld	hl, #2
      00244B 39               [11] 7388 	add	hl, sp
      00244C 7E               [ 7] 7389 	ld	a, (hl)
      00244D F5               [11] 7390 	push	af
      00244E 33               [ 6] 7391 	inc	sp
      00244F 21 00 03         [10] 7392 	ld	hl, #0x0300
      002452 E5               [11] 7393 	push	hl
      002453 21 78 29         [10] 7394 	ld	hl, #0x2978
      002456 E5               [11] 7395 	push	hl
      002457 CDr00r00         [17] 7396 	call	_FILVRM
      00245A F1               [10] 7397 	pop	af
      00245B F1               [10] 7398 	pop	af
      00245C 33               [ 6] 7399 	inc	sp
                                   7400 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      00245D 21 02 00         [10] 7401 	ld	hl, #2
      002460 39               [11] 7402 	add	hl, sp
      002461 7E               [ 7] 7403 	ld	a, (hl)
      002462 F5               [11] 7404 	push	af
      002463 33               [ 6] 7405 	inc	sp
      002464 21 00 03         [10] 7406 	ld	hl, #0x0300
      002467 E5               [11] 7407 	push	hl
      002468 21 78 31         [10] 7408 	ld	hl, #0x3178
      00246B E5               [11] 7409 	push	hl
      00246C CDr00r00         [17] 7410 	call	_FILVRM
      00246F F1               [10] 7411 	pop	af
      002470 F1               [10] 7412 	pop	af
      002471 33               [ 6] 7413 	inc	sp
                                   7414 ;src\/Intro.h:7: }
      002472 C9               [10] 7415 	ret
                                   7416 ;src\/Intro.h:9: void ScrollDownFont() {
                                   7417 ;	---------------------------------
                                   7418 ; Function ScrollDownFont
                                   7419 ; ---------------------------------
      002473                       7420 _ScrollDownFont::
      002473 DD E5            [15] 7421 	push	ix
      002475 DD 21 00 00      [14] 7422 	ld	ix,#0
      002479 DD 39            [15] 7423 	add	ix,sp
      00247B F5               [11] 7424 	push	af
                                   7425 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      00247C 11 78 09         [10] 7426 	ld	de, #0x0978
      00247F                       7427 00107$:
      00247F 7B               [ 4] 7428 	ld	a, e
      002480 D6 78            [ 7] 7429 	sub	a, #0x78
      002482 7A               [ 4] 7430 	ld	a, d
      002483 DE 0C            [ 7] 7431 	sbc	a, #0x0c
      002485 30 44            [12] 7432 	jr	NC, 00109$
                                   7433 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002487 33               [ 6] 7434 	inc	sp
      002488 33               [ 6] 7435 	inc	sp
      002489 D5               [11] 7436 	push	de
      00248A DD 7E FE         [19] 7437 	ld	a, -2 (ix)
      00248D C6 07            [ 7] 7438 	add	a, #0x07
      00248F 4F               [ 4] 7439 	ld	c, a
      002490 DD 7E FF         [19] 7440 	ld	a, -1 (ix)
      002493 CE 00            [ 7] 7441 	adc	a, #0x00
      002495 47               [ 4] 7442 	ld	b, a
      002496                       7443 00104$:
      002496 78               [ 4] 7444 	ld	a, b
      002497 B1               [ 4] 7445 	or	a, c
      002498 28 1A            [12] 7446 	jr	Z, 00101$
                                   7447 ;src\/Intro.h:27: value = RDVRM(j-1);
      00249A 69               [ 4] 7448 	ld	l, c
      00249B 60               [ 4] 7449 	ld	h, b
      00249C 2B               [ 6] 7450 	dec	hl
      00249D C5               [11] 7451 	push	bc
      00249E D5               [11] 7452 	push	de
      00249F CDr00r00         [17] 7453 	call	_RDVRM
      0024A2 D1               [10] 7454 	pop	de
      0024A3 C1               [10] 7455 	pop	bc
                                   7456 ;src\/Intro.h:29: WRTVRM(j, 0);
      0024A4 C5               [11] 7457 	push	bc
      0024A5 D5               [11] 7458 	push	de
      0024A6 AF               [ 4] 7459 	xor	a, a
      0024A7 F5               [11] 7460 	push	af
      0024A8 33               [ 6] 7461 	inc	sp
      0024A9 C5               [11] 7462 	push	bc
      0024AA CDr00r00         [17] 7463 	call	_WRTVRM
      0024AD F1               [10] 7464 	pop	af
      0024AE 33               [ 6] 7465 	inc	sp
      0024AF D1               [10] 7466 	pop	de
      0024B0 C1               [10] 7467 	pop	bc
                                   7468 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      0024B1 0B               [ 6] 7469 	dec	bc
      0024B2 18 E2            [12] 7470 	jr	00104$
      0024B4                       7471 00101$:
                                   7472 ;src\/Intro.h:31: WRTVRM(i, 0);
      0024B4 AF               [ 4] 7473 	xor	a, a
      0024B5 F5               [11] 7474 	push	af
      0024B6 33               [ 6] 7475 	inc	sp
      0024B7 D5               [11] 7476 	push	de
      0024B8 CDr00r00         [17] 7477 	call	_WRTVRM
      0024BB F1               [10] 7478 	pop	af
      0024BC 33               [ 6] 7479 	inc	sp
                                   7480 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      0024BD DD 7E FE         [19] 7481 	ld	a, -2 (ix)
      0024C0 C6 08            [ 7] 7482 	add	a, #0x08
      0024C2 5F               [ 4] 7483 	ld	e, a
      0024C3 DD 7E FF         [19] 7484 	ld	a, -1 (ix)
      0024C6 CE 00            [ 7] 7485 	adc	a, #0x00
      0024C8 57               [ 4] 7486 	ld	d, a
      0024C9 18 B4            [12] 7487 	jr	00107$
      0024CB                       7488 00109$:
                                   7489 ;src\/Intro.h:35: }
      0024CB DD F9            [10] 7490 	ld	sp, ix
      0024CD DD E1            [14] 7491 	pop	ix
      0024CF C9               [10] 7492 	ret
                                   7493 ;src\/Intro.h:37: void Intro() {
                                   7494 ;	---------------------------------
                                   7495 ; Function Intro
                                   7496 ; ---------------------------------
      0024D0                       7497 _Intro::
                                   7498 ;src\/Intro.h:41: InitVRAM();
      0024D0 CDr25r12         [17] 7499 	call	_InitVRAM
                                   7500 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      0024D3 11 0B 0B         [10] 7501 	ld	de, #0x0b0b
      0024D6 D5               [11] 7502 	push	de
      0024D7 21r45r25         [10] 7503 	ld	hl, #___str_8
      0024DA E5               [11] 7504 	push	hl
      0024DB CDrB1r0D         [17] 7505 	call	_DrawString
      0024DE F1               [10] 7506 	pop	af
      0024DF F1               [10] 7507 	pop	af
                                   7508 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      0024E0 11 09 0D         [10] 7509 	ld	de, #0x0d09
      0024E3 D5               [11] 7510 	push	de
      0024E4 21r4Fr25         [10] 7511 	ld	hl, #___str_9
      0024E7 E5               [11] 7512 	push	hl
      0024E8 CDrB1r0D         [17] 7513 	call	_DrawString
      0024EB F1               [10] 7514 	pop	af
                                   7515 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      0024EC 26 F0            [ 7] 7516 	ld	h,#0xf0
      0024EE E3               [19] 7517 	ex	(sp),hl
      0024EF 33               [ 6] 7518 	inc	sp
      0024F0 CDr33r24         [17] 7519 	call	_ChangeFontColor
      0024F3 33               [ 6] 7520 	inc	sp
                                   7521 ;src\/Intro.h:56: Wait(2 * 60);
      0024F4 21 78 00         [10] 7522 	ld	hl, #0x0078
      0024F7 E5               [11] 7523 	push	hl
      0024F8 CDr00r00         [17] 7524 	call	_Wait
      0024FB F1               [10] 7525 	pop	af
                                   7526 ;src\/Intro.h:58: while(counter++ < 20) {
      0024FC 0E 00            [ 7] 7527 	ld	c, #0x00
      0024FE                       7528 00112$:
      0024FE 79               [ 4] 7529 	ld	a, c
      0024FF D6 14            [ 7] 7530 	sub	a, #0x14
      002501 D0               [11] 7531 	ret	NC
      002502 0C               [ 4] 7532 	inc	c
                                   7533 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002503 21 9E FC         [10] 7534 	ld	hl, #_JIFFY
      002506 46               [ 7] 7535 	ld	b, (hl)
                                   7536 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002507                       7537 00101$:
      002507 58               [ 4] 7538 	ld	e, b
      002508 16 00            [ 7] 7539 	ld	d, #0x00
      00250A 2A 9E FC         [16] 7540 	ld	hl, (_JIFFY)
      00250D BF               [ 4] 7541 	cp	a, a
      00250E ED 52            [15] 7542 	sbc	hl, de
      002510 28 F5            [12] 7543 	jr	Z, 00101$
                                   7544 ;src\/Intro.h:63: if(counter == 15) {
      002512 79               [ 4] 7545 	ld	a, c
      002513 D6 0F            [ 7] 7546 	sub	a, #0x0f
      002515 20 0C            [12] 7547 	jr	NZ, 00110$
                                   7548 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002517 C5               [11] 7549 	push	bc
      002518 3E 40            [ 7] 7550 	ld	a, #0x40
      00251A F5               [11] 7551 	push	af
      00251B 33               [ 6] 7552 	inc	sp
      00251C CDr33r24         [17] 7553 	call	_ChangeFontColor
      00251F 33               [ 6] 7554 	inc	sp
      002520 C1               [10] 7555 	pop	bc
      002521 18 DB            [12] 7556 	jr	00112$
      002523                       7557 00110$:
                                   7558 ;src\/Intro.h:66: else if(counter == 10) {
      002523 79               [ 4] 7559 	ld	a, c
      002524 D6 0A            [ 7] 7560 	sub	a, #0x0a
      002526 20 0C            [12] 7561 	jr	NZ, 00107$
                                   7562 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002528 C5               [11] 7563 	push	bc
      002529 3E 50            [ 7] 7564 	ld	a, #0x50
      00252B F5               [11] 7565 	push	af
      00252C 33               [ 6] 7566 	inc	sp
      00252D CDr33r24         [17] 7567 	call	_ChangeFontColor
      002530 33               [ 6] 7568 	inc	sp
      002531 C1               [10] 7569 	pop	bc
      002532 18 CA            [12] 7570 	jr	00112$
      002534                       7571 00107$:
                                   7572 ;src\/Intro.h:69: else if(counter == 5) {
      002534 79               [ 4] 7573 	ld	a, c
      002535 D6 05            [ 7] 7574 	sub	a, #0x05
      002537 20 C5            [12] 7575 	jr	NZ, 00112$
                                   7576 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002539 C5               [11] 7577 	push	bc
      00253A 3E E0            [ 7] 7578 	ld	a, #0xe0
      00253C F5               [11] 7579 	push	af
      00253D 33               [ 6] 7580 	inc	sp
      00253E CDr33r24         [17] 7581 	call	_ChangeFontColor
      002541 33               [ 6] 7582 	inc	sp
      002542 C1               [10] 7583 	pop	bc
                                   7584 ;src\/Intro.h:140: }
      002543 18 B9            [12] 7585 	jr	00112$
      002545                       7586 ___str_8:
      002545 41 20 47 41 4D 45 20  7587 	.ascii "A GAME BY"
             42 59
      00254E 00                    7588 	.db 0x00
      00254F                       7589 ___str_9:
      00254F 41 4E 44 52 45 20 42  7590 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      00255D 00                    7591 	.db 0x00
                                   7592 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   7593 ;	---------------------------------
                                   7594 ; Function SetBlock
                                   7595 ; ---------------------------------
      00255E                       7596 _SetBlock::
      00255E DD E5            [15] 7597 	push	ix
      002560 DD 21 00 00      [14] 7598 	ld	ix,#0
      002564 DD 39            [15] 7599 	add	ix,sp
                                   7600 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002566 DD 7E 04         [19] 7601 	ld	a, 4 (ix)
      002569 06 00            [ 7] 7602 	ld	b, #0x00
      00256B 4F               [ 4] 7603 	ld	c, a
      00256C 78               [ 4] 7604 	ld	a, b
      00256D C6 18            [ 7] 7605 	add	a, #0x18
      00256F 47               [ 4] 7606 	ld	b, a
      002570 DD 6E 05         [19] 7607 	ld	l, 5 (ix)
      002573 26 00            [ 7] 7608 	ld	h, #0x00
      002575 29               [11] 7609 	add	hl, hl
      002576 29               [11] 7610 	add	hl, hl
      002577 29               [11] 7611 	add	hl, hl
      002578 29               [11] 7612 	add	hl, hl
      002579 29               [11] 7613 	add	hl, hl
      00257A 09               [11] 7614 	add	hl, bc
      00257B DD 7E 06         [19] 7615 	ld	a, 6 (ix)
      00257E F5               [11] 7616 	push	af
      00257F 33               [ 6] 7617 	inc	sp
      002580 E5               [11] 7618 	push	hl
      002581 CDr00r00         [17] 7619 	call	_WRTVRM
      002584 F1               [10] 7620 	pop	af
      002585 33               [ 6] 7621 	inc	sp
                                   7622 ;src\/Title.h:16: }
      002586 DD E1            [14] 7623 	pop	ix
      002588 C9               [10] 7624 	ret
                                   7625 ;src\/Title.h:18: void TitleScreen() {
                                   7626 ;	---------------------------------
                                   7627 ; Function TitleScreen
                                   7628 ; ---------------------------------
      002589                       7629 _TitleScreen::
      002589 DD E5            [15] 7630 	push	ix
      00258B DD 21 00 00      [14] 7631 	ld	ix,#0
      00258F DD 39            [15] 7632 	add	ix,sp
      002591 21 EB FF         [10] 7633 	ld	hl, #-21
      002594 39               [11] 7634 	add	hl, sp
      002595 F9               [ 6] 7635 	ld	sp, hl
                                   7636 ;src\/Title.h:19: byte colorIndex = 0;
      002596 0E 00            [ 7] 7637 	ld	c, #0x00
                                   7638 ;src\/Title.h:52: const char blocks[] = {
      002598 21 00 00         [10] 7639 	ld	hl, #0
      00259B 39               [11] 7640 	add	hl, sp
      00259C EB               [ 4] 7641 	ex	de, hl
      00259D 3E 8E            [ 7] 7642 	ld	a, #0x8e
      00259F 12               [ 7] 7643 	ld	(de), a
      0025A0 6B               [ 4] 7644 	ld	l, e
      0025A1 62               [ 4] 7645 	ld	h, d
      0025A2 23               [ 6] 7646 	inc	hl
      0025A3 36 8F            [10] 7647 	ld	(hl), #0x8f
      0025A5 6B               [ 4] 7648 	ld	l, e
      0025A6 62               [ 4] 7649 	ld	h, d
      0025A7 23               [ 6] 7650 	inc	hl
      0025A8 23               [ 6] 7651 	inc	hl
      0025A9 36 90            [10] 7652 	ld	(hl), #0x90
      0025AB 6B               [ 4] 7653 	ld	l, e
      0025AC 62               [ 4] 7654 	ld	h, d
      0025AD 23               [ 6] 7655 	inc	hl
      0025AE 23               [ 6] 7656 	inc	hl
      0025AF 23               [ 6] 7657 	inc	hl
      0025B0 36 91            [10] 7658 	ld	(hl), #0x91
      0025B2 21 04 00         [10] 7659 	ld	hl, #0x0004
      0025B5 19               [11] 7660 	add	hl, de
      0025B6 36 92            [10] 7661 	ld	(hl), #0x92
      0025B8 21 05 00         [10] 7662 	ld	hl, #0x0005
      0025BB 19               [11] 7663 	add	hl, de
      0025BC 36 93            [10] 7664 	ld	(hl), #0x93
      0025BE 21 06 00         [10] 7665 	ld	hl, #0x0006
      0025C1 19               [11] 7666 	add	hl, de
      0025C2 36 94            [10] 7667 	ld	(hl), #0x94
                                   7668 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      0025C4 21 07 00         [10] 7669 	ld	hl, #7
      0025C7 39               [11] 7670 	add	hl, sp
      0025C8 DD 75 F6         [19] 7671 	ld	-10 (ix), l
      0025CB DD 74 F7         [19] 7672 	ld	-9 (ix), h
      0025CE 36 8E            [10] 7673 	ld	(hl), #0x8e
      0025D0 DD 6E F6         [19] 7674 	ld	l, -10 (ix)
      0025D3 DD 66 F7         [19] 7675 	ld	h, -9 (ix)
      0025D6 23               [ 6] 7676 	inc	hl
      0025D7 36 90            [10] 7677 	ld	(hl), #0x90
      0025D9 DD 6E F6         [19] 7678 	ld	l, -10 (ix)
      0025DC DD 66 F7         [19] 7679 	ld	h, -9 (ix)
      0025DF 23               [ 6] 7680 	inc	hl
      0025E0 23               [ 6] 7681 	inc	hl
      0025E1 36 92            [10] 7682 	ld	(hl), #0x92
      0025E3 DD 6E F6         [19] 7683 	ld	l, -10 (ix)
      0025E6 DD 66 F7         [19] 7684 	ld	h, -9 (ix)
      0025E9 23               [ 6] 7685 	inc	hl
      0025EA 23               [ 6] 7686 	inc	hl
      0025EB 23               [ 6] 7687 	inc	hl
      0025EC 36 94            [10] 7688 	ld	(hl), #0x94
                                   7689 ;src\/Title.h:65: InitVRAM();
      0025EE C5               [11] 7690 	push	bc
      0025EF D5               [11] 7691 	push	de
      0025F0 CDr25r12         [17] 7692 	call	_InitVRAM
      0025F3 21 00 01         [10] 7693 	ld	hl, #0x0100
      0025F6 E5               [11] 7694 	push	hl
      0025F7 21r70r27         [10] 7695 	ld	hl, #_TitleScreen_title_65536_285
      0025FA E5               [11] 7696 	push	hl
      0025FB 21 00 18         [10] 7697 	ld	hl, #0x1800
      0025FE E5               [11] 7698 	push	hl
      0025FF CDr00r00         [17] 7699 	call	_LDIRVM
      002602 21 06 00         [10] 7700 	ld	hl, #6
      002605 39               [11] 7701 	add	hl, sp
      002606 F9               [ 6] 7702 	ld	sp, hl
      002607 11 05 0D         [10] 7703 	ld	de, #0x0d05
      00260A D5               [11] 7704 	push	de
      00260B 21r70r28         [10] 7705 	ld	hl, #___str_10
      00260E E5               [11] 7706 	push	hl
      00260F CDrB1r0D         [17] 7707 	call	_DrawString
      002612 F1               [10] 7708 	pop	af
      002613 26 17            [ 7] 7709 	ld	h,#0x17
      002615 E3               [19] 7710 	ex	(sp),hl
      002616 33               [ 6] 7711 	inc	sp
      002617 AF               [ 4] 7712 	xor	a, a
      002618 F5               [11] 7713 	push	af
      002619 33               [ 6] 7714 	inc	sp
      00261A 21r87r28         [10] 7715 	ld	hl, #___str_11
      00261D E5               [11] 7716 	push	hl
      00261E CDrB1r0D         [17] 7717 	call	_DrawString
      002621 F1               [10] 7718 	pop	af
      002622 F1               [10] 7719 	pop	af
      002623 11 19 17         [10] 7720 	ld	de, #0x1719
      002626 D5               [11] 7721 	push	de
      002627 21r9Cr28         [10] 7722 	ld	hl, #___str_12
      00262A E5               [11] 7723 	push	hl
      00262B CDrB1r0D         [17] 7724 	call	_DrawString
      00262E F1               [10] 7725 	pop	af
      00262F F1               [10] 7726 	pop	af
      002630 D1               [10] 7727 	pop	de
      002631 C1               [10] 7728 	pop	bc
                                   7729 ;src\/Title.h:73: while(TRUE) {
      002632                       7730 00120$:
                                   7731 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002632 DD 36 FD 00      [19] 7732 	ld	-3 (ix), #0
                                   7733 ;src\/Title.h:78: word counter = 0;
      002636 AF               [ 4] 7734 	xor	a, a
      002637 DD 77 FE         [19] 7735 	ld	-2 (ix), a
      00263A DD 77 FF         [19] 7736 	ld	-1 (ix), a
                                   7737 ;src\/Title.h:88: do {
      00263D                       7738 00106$:
                                   7739 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      00263D C5               [11] 7740 	push	bc
      00263E D5               [11] 7741 	push	de
      00263F 11 1F 1F         [10] 7742 	ld	de, #0x1f1f
      002642 D5               [11] 7743 	push	de
      002643 CDrD9r00         [17] 7744 	call	_GetRandomInInterval
      002646 F1               [10] 7745 	pop	af
                                   7746 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002647 DD 75 F8         [19] 7747 	ld	-8 (ix), l
      00264A 11 07 07         [10] 7748 	ld	de, #0x0707
      00264D D5               [11] 7749 	push	de
      00264E CDrD9r00         [17] 7750 	call	_GetRandomInInterval
      002651 F1               [10] 7751 	pop	af
      002652 D1               [10] 7752 	pop	de
      002653 C1               [10] 7753 	pop	bc
      002654 DD 75 F9         [19] 7754 	ld	-7 (ix), l
                                   7755 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002657 DD 6E F8         [19] 7756 	ld	l, -8 (ix)
      00265A 3E 00            [ 7] 7757 	ld	a, #0x00
      00265C C6 18            [ 7] 7758 	add	a, #0x18
      00265E 67               [ 4] 7759 	ld	h, a
      00265F DD 7E F9         [19] 7760 	ld	a, -7 (ix)
      002662 06 00            [ 7] 7761 	ld	b, #0x00
      002664 87               [ 4] 7762 	add	a, a
      002665 CB 10            [ 8] 7763 	rl	b
      002667 87               [ 4] 7764 	add	a, a
      002668 CB 10            [ 8] 7765 	rl	b
      00266A 87               [ 4] 7766 	add	a, a
      00266B CB 10            [ 8] 7767 	rl	b
      00266D 87               [ 4] 7768 	add	a, a
      00266E CB 10            [ 8] 7769 	rl	b
      002670 87               [ 4] 7770 	add	a, a
      002671 CB 10            [ 8] 7771 	rl	b
      002673 85               [ 4] 7772 	add	a, l
      002674 6F               [ 4] 7773 	ld	l, a
      002675 78               [ 4] 7774 	ld	a, b
      002676 8C               [ 4] 7775 	adc	a, h
      002677 67               [ 4] 7776 	ld	h, a
      002678 C5               [11] 7777 	push	bc
      002679 D5               [11] 7778 	push	de
      00267A CDr00r00         [17] 7779 	call	_RDVRM
      00267D D1               [10] 7780 	pop	de
      00267E C1               [10] 7781 	pop	bc
      00267F DD 75 FA         [19] 7782 	ld	-6 (ix), l
                                   7783 ;src\/Title.h:102: if(counter++ > 1000) {
      002682 DD 46 FE         [19] 7784 	ld	b, -2 (ix)
      002685 DD 6E FF         [19] 7785 	ld	l, -1 (ix)
      002688 DD 34 FE         [23] 7786 	inc	-2 (ix)
      00268B 20 03            [12] 7787 	jr	NZ, 00193$
      00268D DD 34 FF         [23] 7788 	inc	-1 (ix)
      002690                       7789 00193$:
      002690 3E E8            [ 7] 7790 	ld	a, #0xe8
      002692 B8               [ 4] 7791 	cp	a, b
      002693 3E 03            [ 7] 7792 	ld	a, #0x03
      002695 9D               [ 4] 7793 	sbc	a, l
      002696 30 0F            [12] 7794 	jr	NC, 00107$
                                   7795 ;src\/Title.h:103: colorIndex++;
      002698 0C               [ 4] 7796 	inc	c
                                   7797 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002699 79               [ 4] 7798 	ld	a, c
      00269A D6 03            [ 7] 7799 	sub	a, #0x03
      00269C 38 02            [12] 7800 	jr	C, 00102$
      00269E 0E 00            [ 7] 7801 	ld	c, #0x00
      0026A0                       7802 00102$:
                                   7803 ;src\/Title.h:119: counter = 0;
      0026A0 AF               [ 4] 7804 	xor	a, a
      0026A1 DD 77 FE         [19] 7805 	ld	-2 (ix), a
      0026A4 DD 77 FF         [19] 7806 	ld	-1 (ix), a
      0026A7                       7807 00107$:
                                   7808 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      0026A7 DD 7E FA         [19] 7809 	ld	a, -6 (ix)
      0026AA B7               [ 4] 7810 	or	a, a
      0026AB 28 90            [12] 7811 	jr	Z, 00106$
      0026AD 79               [ 4] 7812 	ld	a, c
      0026AE 3C               [ 4] 7813 	inc	a
      0026AF F5               [11] 7814 	push	af
      0026B0 17               [ 4] 7815 	rla
      0026B1 9F               [ 4] 7816 	sbc	a, a
      0026B2 47               [ 4] 7817 	ld	b, a
      0026B3 F1               [10] 7818 	pop	af
      0026B4 DD 86 F6         [19] 7819 	add	a, -10 (ix)
      0026B7 DD 77 FB         [19] 7820 	ld	-5 (ix), a
      0026BA 78               [ 4] 7821 	ld	a, b
      0026BB DD 8E F7         [19] 7822 	adc	a, -9 (ix)
      0026BE DD 77 FC         [19] 7823 	ld	-4 (ix), a
      0026C1 DD 6E FB         [19] 7824 	ld	l, -5 (ix)
      0026C4 DD 66 FC         [19] 7825 	ld	h, -4 (ix)
      0026C7 46               [ 7] 7826 	ld	b, (hl)
      0026C8 DD 7E FA         [19] 7827 	ld	a, -6 (ix)
      0026CB 90               [ 4] 7828 	sub	a, b
      0026CC CAr3Dr26         [10] 7829 	jp	Z,00106$
                                   7830 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      0026CF 06 00            [ 7] 7831 	ld	b, #0x00
      0026D1                       7832 00123$:
      0026D1 78               [ 4] 7833 	ld	a, b
      0026D2 D6 0A            [ 7] 7834 	sub	a, #0x0a
      0026D4 30 79            [12] 7835 	jr	NC, 00118$
                                   7836 ;src\/Title.h:140: word lastJiffy = JIFFY;
      0026D6 2A 9E FC         [16] 7837 	ld	hl, (_JIFFY)
      0026D9 DD 75 FE         [19] 7838 	ld	-2 (ix), l
      0026DC DD 74 FF         [19] 7839 	ld	-1 (ix), h
                                   7840 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      0026DF                       7841 00109$:
      0026DF FD 21 9E FC      [14] 7842 	ld	iy, #_JIFFY
      0026E3 FD 7E 00         [19] 7843 	ld	a, 0 (iy)
      0026E6 DD 96 FE         [19] 7844 	sub	a, -2 (ix)
      0026E9 20 08            [12] 7845 	jr	NZ, 00195$
      0026EB FD 7E 01         [19] 7846 	ld	a, 1 (iy)
      0026EE DD 96 FF         [19] 7847 	sub	a, -1 (ix)
      0026F1 28 EC            [12] 7848 	jr	Z, 00109$
      0026F3                       7849 00195$:
                                   7850 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      0026F3 DD 6E FD         [19] 7851 	ld	l, -3 (ix)
      0026F6 26 00            [ 7] 7852 	ld	h, #0x00
      0026F8 19               [11] 7853 	add	hl, de
      0026F9 7E               [ 7] 7854 	ld	a, (hl)
      0026FA C5               [11] 7855 	push	bc
      0026FB D5               [11] 7856 	push	de
      0026FC F5               [11] 7857 	push	af
      0026FD 33               [ 6] 7858 	inc	sp
      0026FE DD 66 F9         [19] 7859 	ld	h, -7 (ix)
      002701 DD 6E F8         [19] 7860 	ld	l, -8 (ix)
      002704 E5               [11] 7861 	push	hl
      002705 CDr5Er25         [17] 7862 	call	_SetBlock
      002708 F1               [10] 7863 	pop	af
      002709 33               [ 6] 7864 	inc	sp
      00270A D1               [10] 7865 	pop	de
      00270B C1               [10] 7866 	pop	bc
                                   7867 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      00270C DD 7E FD         [19] 7868 	ld	a, -3 (ix)
      00270F DD 34 FD         [23] 7869 	inc	-3 (ix)
      002712 D6 07            [ 7] 7870 	sub	a, #0x07
      002714 38 04            [12] 7871 	jr	C, 00113$
      002716 DD 36 FD 00      [19] 7872 	ld	-3 (ix), #0
      00271A                       7873 00113$:
                                   7874 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      00271A C5               [11] 7875 	push	bc
      00271B D5               [11] 7876 	push	de
      00271C 2E 00            [ 7] 7877 	ld	l, #0x00
      00271E CDr00r00         [17] 7878 	call	_GTTRIG
                                   7879 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002721 DD 75 FF         [19] 7880 	ld	-1 (ix), l
      002724 2E 01            [ 7] 7881 	ld	l, #0x01
      002726 CDr00r00         [17] 7882 	call	_GTTRIG
      002729 D1               [10] 7883 	pop	de
      00272A C1               [10] 7884 	pop	bc
                                   7885 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      00272B E5               [11] 7886 	push	hl
      00272C C5               [11] 7887 	push	bc
      00272D D5               [11] 7888 	push	de
      00272E 2E 03            [ 7] 7889 	ld	l, #0x03
      002730 CDr00r00         [17] 7890 	call	_GTTRIG
      002733 7D               [ 4] 7891 	ld	a, l
      002734 D1               [10] 7892 	pop	de
      002735 C1               [10] 7893 	pop	bc
      002736 E1               [10] 7894 	pop	hl
      002737 67               [ 4] 7895 	ld	h, a
                                   7896 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002738 DD 7E FF         [19] 7897 	ld	a, -1 (ix)
      00273B 3C               [ 4] 7898 	inc	a
      00273C 28 06            [12] 7899 	jr	Z, 00114$
      00273E 2C               [ 4] 7900 	inc	l
      00273F 28 03            [12] 7901 	jr	Z, 00114$
      002741 24               [ 4] 7902 	inc	h
      002742 20 08            [12] 7903 	jr	NZ, 00124$
      002744                       7904 00114$:
                                   7905 ;src\/Title.h:168: rndSeed = JIFFY;
      002744 3A 9E FC         [13] 7906 	ld	a,(#_JIFFY + 0)
      002747 32r0Ar00         [13] 7907 	ld	(#_rndSeed), a
                                   7908 ;src\/Title.h:169: return;
      00274A 18 1F            [12] 7909 	jr	00125$
      00274C                       7910 00124$:
                                   7911 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      00274C 04               [ 4] 7912 	inc	b
      00274D 18 82            [12] 7913 	jr	00123$
      00274F                       7914 00118$:
                                   7915 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00274F DD 6E FB         [19] 7916 	ld	l, -5 (ix)
      002752 DD 66 FC         [19] 7917 	ld	h, -4 (ix)
      002755 7E               [ 7] 7918 	ld	a, (hl)
      002756 C5               [11] 7919 	push	bc
      002757 D5               [11] 7920 	push	de
      002758 F5               [11] 7921 	push	af
      002759 33               [ 6] 7922 	inc	sp
      00275A DD 66 F9         [19] 7923 	ld	h, -7 (ix)
      00275D DD 6E F8         [19] 7924 	ld	l, -8 (ix)
      002760 E5               [11] 7925 	push	hl
      002761 CDr5Er25         [17] 7926 	call	_SetBlock
      002764 F1               [10] 7927 	pop	af
      002765 33               [ 6] 7928 	inc	sp
      002766 D1               [10] 7929 	pop	de
      002767 C1               [10] 7930 	pop	bc
      002768 C3r32r26         [10] 7931 	jp	00120$
      00276B                       7932 00125$:
                                   7933 ;src\/Title.h:176: }
      00276B DD F9            [10] 7934 	ld	sp, ix
      00276D DD E1            [14] 7935 	pop	ix
      00276F C9               [10] 7936 	ret
      002770                       7937 _TitleScreen_title_65536_285:
      002770 00                    7938 	.db #0x00	; 0
      002771 00                    7939 	.db #0x00	; 0
      002772 00                    7940 	.db #0x00	; 0
      002773 00                    7941 	.db #0x00	; 0
      002774 8E                    7942 	.db #0x8e	; 142
      002775 8E                    7943 	.db #0x8e	; 142
      002776 8E                    7944 	.db #0x8e	; 142
      002777 8E                    7945 	.db #0x8e	; 142
      002778 00                    7946 	.db #0x00	; 0
      002779 8E                    7947 	.db #0x8e	; 142
      00277A 8E                    7948 	.db #0x8e	; 142
      00277B 8E                    7949 	.db #0x8e	; 142
      00277C 8E                    7950 	.db #0x8e	; 142
      00277D 8E                    7951 	.db #0x8e	; 142
      00277E 8E                    7952 	.db #0x8e	; 142
      00277F 00                    7953 	.db #0x00	; 0
      002780 00                    7954 	.db #0x00	; 0
      002781 8E                    7955 	.db #0x8e	; 142
      002782 8E                    7956 	.db #0x8e	; 142
      002783 00                    7957 	.db #0x00	; 0
      002784 00                    7958 	.db #0x00	; 0
      002785 00                    7959 	.db #0x00	; 0
      002786 8E                    7960 	.db #0x8e	; 142
      002787 8E                    7961 	.db #0x8e	; 142
      002788 00                    7962 	.db #0x00	; 0
      002789 00                    7963 	.db #0x00	; 0
      00278A 00                    7964 	.db #0x00	; 0
      00278B 00                    7965 	.db #0x00	; 0
      00278C 8E                    7966 	.db #0x8e	; 142
      00278D 8E                    7967 	.db #0x8e	; 142
      00278E 8E                    7968 	.db #0x8e	; 142
      00278F 8E                    7969 	.db #0x8e	; 142
      002790 00                    7970 	.db #0x00	; 0
      002791 00                    7971 	.db #0x00	; 0
      002792 00                    7972 	.db #0x00	; 0
      002793 8E                    7973 	.db #0x8e	; 142
      002794 8E                    7974 	.db #0x8e	; 142
      002795 8E                    7975 	.db #0x8e	; 142
      002796 8E                    7976 	.db #0x8e	; 142
      002797 8E                    7977 	.db #0x8e	; 142
      002798 00                    7978 	.db #0x00	; 0
      002799 8E                    7979 	.db #0x8e	; 142
      00279A 8E                    7980 	.db #0x8e	; 142
      00279B 00                    7981 	.db #0x00	; 0
      00279C 00                    7982 	.db #0x00	; 0
      00279D 00                    7983 	.db #0x00	; 0
      00279E 8E                    7984 	.db #0x8e	; 142
      00279F 8E                    7985 	.db #0x8e	; 142
      0027A0 00                    7986 	.db #0x00	; 0
      0027A1 00                    7987 	.db #0x00	; 0
      0027A2 8E                    7988 	.db #0x8e	; 142
      0027A3 8E                    7989 	.db #0x8e	; 142
      0027A4 00                    7990 	.db #0x00	; 0
      0027A5 00                    7991 	.db #0x00	; 0
      0027A6 8E                    7992 	.db #0x8e	; 142
      0027A7 8E                    7993 	.db #0x8e	; 142
      0027A8 00                    7994 	.db #0x00	; 0
      0027A9 00                    7995 	.db #0x00	; 0
      0027AA 00                    7996 	.db #0x00	; 0
      0027AB 8E                    7997 	.db #0x8e	; 142
      0027AC 8E                    7998 	.db #0x8e	; 142
      0027AD 8E                    7999 	.db #0x8e	; 142
      0027AE 8E                    8000 	.db #0x8e	; 142
      0027AF 8E                    8001 	.db #0x8e	; 142
      0027B0 00                    8002 	.db #0x00	; 0
      0027B1 00                    8003 	.db #0x00	; 0
      0027B2 8E                    8004 	.db #0x8e	; 142
      0027B3 8E                    8005 	.db #0x8e	; 142
      0027B4 8E                    8006 	.db #0x8e	; 142
      0027B5 00                    8007 	.db #0x00	; 0
      0027B6 8E                    8008 	.db #0x8e	; 142
      0027B7 8E                    8009 	.db #0x8e	; 142
      0027B8 00                    8010 	.db #0x00	; 0
      0027B9 8E                    8011 	.db #0x8e	; 142
      0027BA 8E                    8012 	.db #0x8e	; 142
      0027BB 00                    8013 	.db #0x00	; 0
      0027BC 00                    8014 	.db #0x00	; 0
      0027BD 00                    8015 	.db #0x00	; 0
      0027BE 8E                    8016 	.db #0x8e	; 142
      0027BF 8E                    8017 	.db #0x8e	; 142
      0027C0 00                    8018 	.db #0x00	; 0
      0027C1 00                    8019 	.db #0x00	; 0
      0027C2 00                    8020 	.db #0x00	; 0
      0027C3 8E                    8021 	.db #0x8e	; 142
      0027C4 8E                    8022 	.db #0x8e	; 142
      0027C5 00                    8023 	.db #0x00	; 0
      0027C6 8E                    8024 	.db #0x8e	; 142
      0027C7 8E                    8025 	.db #0x8e	; 142
      0027C8 00                    8026 	.db #0x00	; 0
      0027C9 00                    8027 	.db #0x00	; 0
      0027CA 8E                    8028 	.db #0x8e	; 142
      0027CB 8E                    8029 	.db #0x8e	; 142
      0027CC 8E                    8030 	.db #0x8e	; 142
      0027CD 00                    8031 	.db #0x00	; 0
      0027CE 8E                    8032 	.db #0x8e	; 142
      0027CF 8E                    8033 	.db #0x8e	; 142
      0027D0 00                    8034 	.db #0x00	; 0
      0027D1 8E                    8035 	.db #0x8e	; 142
      0027D2 8E                    8036 	.db #0x8e	; 142
      0027D3 8E                    8037 	.db #0x8e	; 142
      0027D4 00                    8038 	.db #0x00	; 0
      0027D5 00                    8039 	.db #0x00	; 0
      0027D6 8E                    8040 	.db #0x8e	; 142
      0027D7 8E                    8041 	.db #0x8e	; 142
      0027D8 00                    8042 	.db #0x00	; 0
      0027D9 8E                    8043 	.db #0x8e	; 142
      0027DA 8E                    8044 	.db #0x8e	; 142
      0027DB 00                    8045 	.db #0x00	; 0
      0027DC 00                    8046 	.db #0x00	; 0
      0027DD 8E                    8047 	.db #0x8e	; 142
      0027DE 8E                    8048 	.db #0x8e	; 142
      0027DF 00                    8049 	.db #0x00	; 0
      0027E0 00                    8050 	.db #0x00	; 0
      0027E1 00                    8051 	.db #0x00	; 0
      0027E2 00                    8052 	.db #0x00	; 0
      0027E3 00                    8053 	.db #0x00	; 0
      0027E4 8E                    8054 	.db #0x8e	; 142
      0027E5 8E                    8055 	.db #0x8e	; 142
      0027E6 8E                    8056 	.db #0x8e	; 142
      0027E7 00                    8057 	.db #0x00	; 0
      0027E8 00                    8058 	.db #0x00	; 0
      0027E9 8E                    8059 	.db #0x8e	; 142
      0027EA 8E                    8060 	.db #0x8e	; 142
      0027EB 8E                    8061 	.db #0x8e	; 142
      0027EC 00                    8062 	.db #0x00	; 0
      0027ED 00                    8063 	.db #0x00	; 0
      0027EE 8E                    8064 	.db #0x8e	; 142
      0027EF 8E                    8065 	.db #0x8e	; 142
      0027F0 00                    8066 	.db #0x00	; 0
      0027F1 8E                    8067 	.db #0x8e	; 142
      0027F2 8E                    8068 	.db #0x8e	; 142
      0027F3 00                    8069 	.db #0x00	; 0
      0027F4 00                    8070 	.db #0x00	; 0
      0027F5 00                    8071 	.db #0x00	; 0
      0027F6 8E                    8072 	.db #0x8e	; 142
      0027F7 8E                    8073 	.db #0x8e	; 142
      0027F8 00                    8074 	.db #0x00	; 0
      0027F9 8E                    8075 	.db #0x8e	; 142
      0027FA 8E                    8076 	.db #0x8e	; 142
      0027FB 8E                    8077 	.db #0x8e	; 142
      0027FC 8E                    8078 	.db #0x8e	; 142
      0027FD 8E                    8079 	.db #0x8e	; 142
      0027FE 00                    8080 	.db #0x00	; 0
      0027FF 00                    8081 	.db #0x00	; 0
      002800 00                    8082 	.db #0x00	; 0
      002801 00                    8083 	.db #0x00	; 0
      002802 00                    8084 	.db #0x00	; 0
      002803 00                    8085 	.db #0x00	; 0
      002804 8E                    8086 	.db #0x8e	; 142
      002805 8E                    8087 	.db #0x8e	; 142
      002806 00                    8088 	.db #0x00	; 0
      002807 00                    8089 	.db #0x00	; 0
      002808 00                    8090 	.db #0x00	; 0
      002809 8E                    8091 	.db #0x8e	; 142
      00280A 8E                    8092 	.db #0x8e	; 142
      00280B 00                    8093 	.db #0x00	; 0
      00280C 00                    8094 	.db #0x00	; 0
      00280D 00                    8095 	.db #0x00	; 0
      00280E 8E                    8096 	.db #0x8e	; 142
      00280F 8E                    8097 	.db #0x8e	; 142
      002810 00                    8098 	.db #0x00	; 0
      002811 8E                    8099 	.db #0x8e	; 142
      002812 8E                    8100 	.db #0x8e	; 142
      002813 00                    8101 	.db #0x00	; 0
      002814 00                    8102 	.db #0x00	; 0
      002815 00                    8103 	.db #0x00	; 0
      002816 8E                    8104 	.db #0x8e	; 142
      002817 8E                    8105 	.db #0x8e	; 142
      002818 00                    8106 	.db #0x00	; 0
      002819 8E                    8107 	.db #0x8e	; 142
      00281A 8E                    8108 	.db #0x8e	; 142
      00281B 8E                    8109 	.db #0x8e	; 142
      00281C 8E                    8110 	.db #0x8e	; 142
      00281D 8E                    8111 	.db #0x8e	; 142
      00281E 00                    8112 	.db #0x00	; 0
      00281F 00                    8113 	.db #0x00	; 0
      002820 00                    8114 	.db #0x00	; 0
      002821 00                    8115 	.db #0x00	; 0
      002822 00                    8116 	.db #0x00	; 0
      002823 00                    8117 	.db #0x00	; 0
      002824 8E                    8118 	.db #0x8e	; 142
      002825 8E                    8119 	.db #0x8e	; 142
      002826 00                    8120 	.db #0x00	; 0
      002827 00                    8121 	.db #0x00	; 0
      002828 00                    8122 	.db #0x00	; 0
      002829 8E                    8123 	.db #0x8e	; 142
      00282A 8E                    8124 	.db #0x8e	; 142
      00282B 00                    8125 	.db #0x00	; 0
      00282C 00                    8126 	.db #0x00	; 0
      00282D 00                    8127 	.db #0x00	; 0
      00282E 8E                    8128 	.db #0x8e	; 142
      00282F 8E                    8129 	.db #0x8e	; 142
      002830 00                    8130 	.db #0x00	; 0
      002831 8E                    8131 	.db #0x8e	; 142
      002832 8E                    8132 	.db #0x8e	; 142
      002833 8E                    8133 	.db #0x8e	; 142
      002834 8E                    8134 	.db #0x8e	; 142
      002835 8E                    8135 	.db #0x8e	; 142
      002836 8E                    8136 	.db #0x8e	; 142
      002837 8E                    8137 	.db #0x8e	; 142
      002838 00                    8138 	.db #0x00	; 0
      002839 8E                    8139 	.db #0x8e	; 142
      00283A 8E                    8140 	.db #0x8e	; 142
      00283B 00                    8141 	.db #0x00	; 0
      00283C 00                    8142 	.db #0x00	; 0
      00283D 00                    8143 	.db #0x00	; 0
      00283E 8E                    8144 	.db #0x8e	; 142
      00283F 00                    8145 	.db #0x00	; 0
      002840 00                    8146 	.db #0x00	; 0
      002841 00                    8147 	.db #0x00	; 0
      002842 00                    8148 	.db #0x00	; 0
      002843 00                    8149 	.db #0x00	; 0
      002844 8E                    8150 	.db #0x8e	; 142
      002845 8E                    8151 	.db #0x8e	; 142
      002846 00                    8152 	.db #0x00	; 0
      002847 00                    8153 	.db #0x00	; 0
      002848 00                    8154 	.db #0x00	; 0
      002849 8E                    8155 	.db #0x8e	; 142
      00284A 8E                    8156 	.db #0x8e	; 142
      00284B 8E                    8157 	.db #0x8e	; 142
      00284C 8E                    8158 	.db #0x8e	; 142
      00284D 8E                    8159 	.db #0x8e	; 142
      00284E 8E                    8160 	.db #0x8e	; 142
      00284F 8E                    8161 	.db #0x8e	; 142
      002850 00                    8162 	.db #0x00	; 0
      002851 8E                    8163 	.db #0x8e	; 142
      002852 8E                    8164 	.db #0x8e	; 142
      002853 00                    8165 	.db #0x00	; 0
      002854 00                    8166 	.db #0x00	; 0
      002855 00                    8167 	.db #0x00	; 0
      002856 8E                    8168 	.db #0x8e	; 142
      002857 8E                    8169 	.db #0x8e	; 142
      002858 00                    8170 	.db #0x00	; 0
      002859 8E                    8171 	.db #0x8e	; 142
      00285A 8E                    8172 	.db #0x8e	; 142
      00285B 00                    8173 	.db #0x00	; 0
      00285C 00                    8174 	.db #0x00	; 0
      00285D 00                    8175 	.db #0x00	; 0
      00285E 8E                    8176 	.db #0x8e	; 142
      00285F 00                    8177 	.db #0x00	; 0
      002860 00                    8178 	.db #0x00	; 0
      002861 00                    8179 	.db #0x00	; 0
      002862 00                    8180 	.db #0x00	; 0
      002863 00                    8181 	.db #0x00	; 0
      002864 8E                    8182 	.db #0x8e	; 142
      002865 8E                    8183 	.db #0x8e	; 142
      002866 00                    8184 	.db #0x00	; 0
      002867 00                    8185 	.db #0x00	; 0
      002868 00                    8186 	.db #0x00	; 0
      002869 8E                    8187 	.db #0x8e	; 142
      00286A 8E                    8188 	.db #0x8e	; 142
      00286B 00                    8189 	.db #0x00	; 0
      00286C 00                    8190 	.db #0x00	; 0
      00286D 00                    8191 	.db #0x00	; 0
      00286E 8E                    8192 	.db #0x8e	; 142
      00286F 8E                    8193 	.db #0x8e	; 142
      002870                       8194 ___str_10:
      002870 50 52 45 53 53 20 54  8195 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002886 00                    8196 	.db 0x00
      002887                       8197 ___str_11:
      002887 41 4E 44 52 45 42 41  8198 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      00289B 00                    8199 	.db 0x00
      00289C                       8200 ___str_12:
      00289C 76 2E 3F 2E 3F 2E 3F  8201 	.ascii "v.?.?.?"
      0028A3 00                    8202 	.db 0x00
                                   8203 ;src\main.c:89: void main() {
                                   8204 ;	---------------------------------
                                   8205 ; Function main
                                   8206 ; ---------------------------------
      0028A4                       8207 _main::
                                   8208 ;src\main.c:91: while(TRUE) {
      0028A4                       8209 00102$:
                                   8210 ;src\main.c:93: Intro();
      0028A4 CDrD0r24         [17] 8211 	call	_Intro
                                   8212 ;src\main.c:95: TitleScreen();
      0028A7 CDr89r25         [17] 8213 	call	_TitleScreen
                                   8214 ;src\main.c:97: InitGame();
      0028AA CDr90r23         [17] 8215 	call	_InitGame
                                   8216 ;src\main.c:100: }
      0028AD 18 F5            [12] 8217 	jr	00102$
                                   8218 	.area _CODE
                                   8219 	.area _INITIALIZER
      000000                       8220 __xinit__gameOver:
      000000 00                    8221 	.db #0x00	; 0
      000001                       8222 __xinit__col:
      000001 00                    8223 	.db #0x00	; 0
      000002                       8224 __xinit__line:
      000002 00                    8225 	.db #0x00	; 0
      000003                       8226 __xinit__counter:
      000003 00                    8227 	.db #0x00	; 0
      000004                       8228 __xinit__score:
      000004 00 00                 8229 	.dw #0x0000
      000006                       8230 __xinit__blocksRemoved:
      000006 00 00                 8231 	.dw #0x0000
      000008                       8232 __xinit__level:
      000008 01                    8233 	.db #0x01	; 1
      000009                       8234 __xinit__newLevel:
      000009 00                    8235 	.db #0x00	; 0
      00000A                       8236 __xinit__rndSeed:
      00000A 00                    8237 	.db #0x00	; 0
      00000B                       8238 __xinit__d_col:
      00000B 00                    8239 	.db #0x00	; 0
      00000C                       8240 __xinit__d_line:
      00000C 00                    8241 	.db #0x00	; 0
      00000D                       8242 __xinit__d_value:
      00000D 00                    8243 	.db #0x00	; 0
                                   8244 	.area _CABS (ABS)
