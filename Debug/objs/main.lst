                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _ScrollDownFont
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _GetNextPieceColors
                                     38 	.globl _DrawColumn
                                     39 	.globl _DrawNumber
                                     40 	.globl _DrawString
                                     41 	.globl _DrawChar
                                     42 	.globl _ShowCountdown
                                     43 	.globl _BlinkNumber
                                     44 	.globl _AnimateSprites
                                     45 	.globl _DrawExplosionSprite
                                     46 	.globl _HideExplosionSprite
                                     47 	.globl _HideHitSprite
                                     48 	.globl _DrawHitSprite
                                     49 	.globl _HideArrowSprite
                                     50 	.globl _DrawArrowSprite
                                     51 	.globl _GetRandomInInterval
                                     52 	.globl _GetRandom
                                     53 	.globl _InitRnd
                                     54 	.globl _Power
                                     55 	.globl _Wait
                                     56 	.globl _SNSMAT
                                     57 	.globl _GTTRIG
                                     58 	.globl _GTSTCK
                                     59 	.globl _WRTPSG
                                     60 	.globl _GICINI
                                     61 	.globl _INIGRP
                                     62 	.globl _LDIRVM
                                     63 	.globl _FILVRM
                                     64 	.globl _WRTVRM
                                     65 	.globl _RDVRM
                                     66 	.globl _WRTVDP
                                     67 	.globl _ENASCR
                                     68 	.globl _DISSCR
                                     69 	.globl _rndSeed
                                     70 	.globl _newLevel
                                     71 	.globl _level
                                     72 	.globl _blocksRemoved
                                     73 	.globl _counter
                                     74 	.globl _line
                                     75 	.globl _col
                                     76 	.globl _gameOver
                                     77 	.globl _nextPieceColor_Back
                                     78 	.globl _nextPieceColor_Front
                                     79 	.globl _Rand_x
                                     80 	.globl _Rand_c
                                     81 	.globl _Rand_b
                                     82 	.globl _Rand_a
                                     83 	.globl _speed
                                     84 	.globl _nextBottomPiece
                                     85 	.globl _nextMidPiece
                                     86 	.globl _nextTopPiece
                                     87 	.globl _bottomPiece
                                     88 	.globl _midPiece
                                     89 	.globl _topPiece
                                     90 	.globl _playfieldTemp
                                     91 	.globl _playfield
                                     92 	.globl _GETPNT
                                     93 	.globl _PUTPNT
                                     94 	.globl _REPCNT
                                     95 	.globl _SCNCNT
                                     96 	.globl _ATRBYT
                                     97 	.globl _CMASK
                                     98 	.globl _CLOC
                                     99 	.globl _BDRCLR
                                    100 	.globl _BAKCLR
                                    101 	.globl _FORCLR
                                    102 	.globl _TRGFLG
                                    103 	.globl _STATFL
                                    104 	.globl _MSX_vdp_regs
                                    105 	.globl _CNSDFG
                                    106 	.globl _CSRX
                                    107 	.globl _CSRY
                                    108 	.globl _MSX_modedata_screen3
                                    109 	.globl _MSX_modedata_screen2
                                    110 	.globl _MSX_modedata_screen1
                                    111 	.globl _MSX_modedata_screen0
                                    112 	.globl _CLIKSW
                                    113 	.globl _JIFFY
                                    114 	.globl _CLMLST
                                    115 	.globl _CRTCNT
                                    116 	.globl _LINLEN
                                    117 	.globl _LINL32
                                    118 	.globl _LINL40
                                    119 	.globl _MSX_charset
                                    120 	.globl _colors
                                    121 	.globl _FONT
                                    122 	.globl _pieces
                                    123 	.globl _MSX_version
                                    124 	.globl _MSX_vdp_port_write
                                    125 	.globl _MSX_vdp_port_read
                                    126 ;--------------------------------------------------------
                                    127 ; special function registers
                                    128 ;--------------------------------------------------------
                                    129 ;--------------------------------------------------------
                                    130 ; ram data
                                    131 ;--------------------------------------------------------
                                    132 	.area _DATA
                           000004   133 _MSX_charset	=	0x0004
                           00F3AE   134 _LINL40	=	0xf3ae
                           00F3AF   135 _LINL32	=	0xf3af
                           00F3B0   136 _LINLEN	=	0xf3b0
                           00F3B1   137 _CRTCNT	=	0xf3b1
                           00F3B1   138 _CLMLST	=	0xf3b1
                           00FC9E   139 _JIFFY	=	0xfc9e
                           00F3DB   140 _CLIKSW	=	0xf3db
                           00F3B3   141 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   142 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   143 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   144 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   145 _CSRY	=	0xf3dc
                           00F3DD   146 _CSRX	=	0xf3dd
                           00F3DE   147 _CNSDFG	=	0xf3de
                           00F3DF   148 _MSX_vdp_regs	=	0xf3df
                           00F3E7   149 _STATFL	=	0xf3e7
                           00F3E8   150 _TRGFLG	=	0xf3e8
                           00F3E9   151 _FORCLR	=	0xf3e9
                           00F3EA   152 _BAKCLR	=	0xf3ea
                           00F3EB   153 _BDRCLR	=	0xf3eb
                           00F92A   154 _CLOC	=	0xf92a
                           00F92C   155 _CMASK	=	0xf92c
                           00F3F2   156 _ATRBYT	=	0xf3f2
                           00F3F6   157 _SCNCNT	=	0xf3f6
                           00F3F7   158 _REPCNT	=	0xf3f7
                           00F3F8   159 _PUTPNT	=	0xf3f8
                           00F3FA   160 _GETPNT	=	0xf3fa
      000000                        161 _playfield::
      000000                        162 	.ds 72
      000048                        163 _playfieldTemp::
      000048                        164 	.ds 72
      000090                        165 _topPiece::
      000090                        166 	.ds 1
      000091                        167 _midPiece::
      000091                        168 	.ds 1
      000092                        169 _bottomPiece::
      000092                        170 	.ds 1
      000093                        171 _nextTopPiece::
      000093                        172 	.ds 1
      000094                        173 _nextMidPiece::
      000094                        174 	.ds 1
      000095                        175 _nextBottomPiece::
      000095                        176 	.ds 1
      000096                        177 _speed::
      000096                        178 	.ds 1
      000097                        179 _Rand_a::
      000097                        180 	.ds 1
      000098                        181 _Rand_b::
      000098                        182 	.ds 1
      000099                        183 _Rand_c::
      000099                        184 	.ds 1
      00009A                        185 _Rand_x::
      00009A                        186 	.ds 1
      00009B                        187 _nextPieceColor_Front::
      00009B                        188 	.ds 1
      00009C                        189 _nextPieceColor_Back::
      00009C                        190 	.ds 1
                                    191 ;--------------------------------------------------------
                                    192 ; ram data
                                    193 ;--------------------------------------------------------
                                    194 	.area _INITIALIZED
      000000                        195 _gameOver::
      000000                        196 	.ds 1
      000001                        197 _col::
      000001                        198 	.ds 1
      000002                        199 _line::
      000002                        200 	.ds 1
      000003                        201 _counter::
      000003                        202 	.ds 1
      000004                        203 _blocksRemoved::
      000004                        204 	.ds 2
      000006                        205 _level::
      000006                        206 	.ds 1
      000007                        207 _newLevel::
      000007                        208 	.ds 1
      000008                        209 _rndSeed::
      000008                        210 	.ds 1
                                    211 ;--------------------------------------------------------
                                    212 ; absolute external ram data
                                    213 ;--------------------------------------------------------
                                    214 	.area _DABS (ABS)
                                    215 ;--------------------------------------------------------
                                    216 ; global & static initialisations
                                    217 ;--------------------------------------------------------
                                    218 	.area _HOME
                                    219 	.area _GSINIT
                                    220 	.area _GSFINAL
                                    221 	.area _GSINIT
                                    222 ;--------------------------------------------------------
                                    223 ; Home
                                    224 ;--------------------------------------------------------
                                    225 	.area _HOME
                                    226 	.area _HOME
                                    227 ;--------------------------------------------------------
                                    228 ; code
                                    229 ;--------------------------------------------------------
                                    230 	.area _CODE
                                    231 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    232 ;	---------------------------------
                                    233 ; Function Wait
                                    234 ; ---------------------------------
      000000                        235 _Wait::
                                    236 ;src\/Common.h:2: do {
      000000 D1               [10]  237 	pop	de
      000001 C1               [10]  238 	pop	bc
      000002 C5               [11]  239 	push	bc
      000003 D5               [11]  240 	push	de
      000004                        241 00104$:
                                    242 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  243 	ld	de, (_JIFFY)
                                    244 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        245 00101$:
      000008 2A 9E FC         [16]  246 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  247 	cp	a, a
      00000C ED 52            [15]  248 	sbc	hl, de
      00000E 28 F8            [12]  249 	jr	Z, 00101$
                                    250 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  251 	ld	e, c
      000011 50               [ 4]  252 	ld	d, b
      000012 0B               [ 6]  253 	dec	bc
      000013 7A               [ 4]  254 	ld	a, d
      000014 B3               [ 4]  255 	or	a, e
      000015 20 ED            [12]  256 	jr	NZ, 00104$
                                    257 ;src\/Common.h:8: }
      000017 C9               [10]  258 	ret
                           000006   259 _MSX_vdp_port_read	=	0x0006
                           000007   260 _MSX_vdp_port_write	=	0x0007
                           00002D   261 _MSX_version	=	0x002d
      000018                        262 _pieces:
      000018 04                     263 	.db #0x04	; 4
      000019 08                     264 	.db #0x08	; 8
      00001A 0C                     265 	.db #0x0c	; 12
      00001B 10                     266 	.db #0x10	; 16
      00001C 14                     267 	.db #0x14	; 20
                                    268 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    269 ;	---------------------------------
                                    270 ; Function Power
                                    271 ; ---------------------------------
      00001D                        272 _Power::
      00001D DD E5            [15]  273 	push	ix
      00001F DD 21 00 00      [14]  274 	ld	ix,#0
      000023 DD 39            [15]  275 	add	ix,sp
                                    276 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  277 	ld	c, 4 (ix)
      000028 06 00            [ 7]  278 	ld	b, #0x00
      00002A 69               [ 4]  279 	ld	l, c
      00002B 60               [ 4]  280 	ld	h, b
                                    281 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  282 	ld	a, 5 (ix)
      00002F B7               [ 4]  283 	or	a, a
      000030 20 05            [12]  284 	jr	NZ, 00111$
      000032 21 01 00         [10]  285 	ld	hl, #0x0001
      000035 18 16            [12]  286 	jr	00107$
                                    287 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        288 00111$:
      000037 1E 01            [ 7]  289 	ld	e, #0x01
      000039                        290 00105$:
      000039 7B               [ 4]  291 	ld	a, e
      00003A DD 96 05         [19]  292 	sub	a, 5 (ix)
      00003D 30 0E            [12]  293 	jr	NC, 00103$
                                    294 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  295 	push	bc
      000040 D5               [11]  296 	push	de
      000041 C5               [11]  297 	push	bc
      000042 E5               [11]  298 	push	hl
      000043 CDr00r00         [17]  299 	call	__mulint
      000046 F1               [10]  300 	pop	af
      000047 F1               [10]  301 	pop	af
      000048 D1               [10]  302 	pop	de
      000049 C1               [10]  303 	pop	bc
                                    304 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  305 	inc	e
      00004B 18 EC            [12]  306 	jr	00105$
      00004D                        307 00103$:
                                    308 ;src\/Math.h:10: return power;
      00004D                        309 00107$:
                                    310 ;src\/Math.h:11: }
      00004D DD E1            [14]  311 	pop	ix
      00004F C9               [10]  312 	ret
                                    313 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    314 ;	---------------------------------
                                    315 ; Function InitRnd
                                    316 ; ---------------------------------
      000050                        317 _InitRnd::
                                    318 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  319 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  320 	ld	hl, #2
      000056 39               [11]  321 	add	hl, sp
      000057 AE               [ 7]  322 	xor	a, (hl)
      000058 32r97r00         [13]  323 	ld	(_Rand_a+0), a
                                    324 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  325 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  326 	ld	hl, #3
      000061 39               [11]  327 	add	hl, sp
      000062 AE               [ 7]  328 	xor	a, (hl)
      000063 32r98r00         [13]  329 	ld	(_Rand_b+0), a
                                    330 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  331 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  332 	ld	hl, #4
      00006C 39               [11]  333 	add	hl, sp
      00006D AE               [ 7]  334 	xor	a, (hl)
      00006E 32r99r00         [13]  335 	ld	(_Rand_c+0), a
                                    336 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  337 	ld	hl, #_Rand_x
      000074 34               [11]  338 	inc	(hl)
                                    339 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  340 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  341 	ld	hl, #_Rand_c
      00007B AE               [ 7]  342 	xor	a, (hl)
      00007C 21r9Ar00         [10]  343 	ld	hl, #_Rand_x
      00007F AE               [ 7]  344 	xor	a, (hl)
      000080 32r97r00         [13]  345 	ld	(_Rand_a+0), a
                                    346 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  347 	ld	hl, #_Rand_b
      000086 7E               [ 7]  348 	ld	a, (hl)
      000087 FD 21r97r00      [14]  349 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  350 	add	a, 0 (iy)
      00008E 77               [ 7]  351 	ld	(hl), a
                                    352 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  353 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  354 	srl	a
      000094 21r99r00         [10]  355 	ld	hl, #_Rand_c
      000097 86               [ 7]  356 	add	a, (hl)
      000098 FD 21r97r00      [14]  357 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  358 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  359 	ld	(_Rand_c+0), a
                                    360 ;src\/Random.h:38: }
      0000A2 C9               [10]  361 	ret
                                    362 ;src\/Random.h:40: unsigned char GetRandom() {
                                    363 ;	---------------------------------
                                    364 ; Function GetRandom
                                    365 ; ---------------------------------
      0000A3                        366 _GetRandom::
                                    367 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  368 	ld	hl, #_Rand_x
      0000A6 34               [11]  369 	inc	(hl)
                                    370 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  371 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  372 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  373 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  374 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  375 	xor	a, (hl)
      0000B2 32r97r00         [13]  376 	ld	(_Rand_a+0), a
                                    377 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  378 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  379 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  380 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  381 	add	a, 0 (iy)
      0000C0 77               [ 7]  382 	ld	(hl), a
                                    383 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  384 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  385 	srl	a
      0000C6 21r99r00         [10]  386 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  387 	add	a, (hl)
      0000CA FD 21r97r00      [14]  388 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  389 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  390 	ld	(_Rand_c+0), a
                                    391 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  392 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  393 	ld	l, a
                                    394 ;src\/Random.h:47: }
      0000D8 C9               [10]  395 	ret
                                    396 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    397 ;	---------------------------------
                                    398 ; Function GetRandomInInterval
                                    399 ; ---------------------------------
      0000D9                        400 _GetRandomInInterval::
                                    401 ;src\/Random.h:53: do {
      0000D9                        402 00101$:
                                    403 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  404 	call	_GetRandom
      0000DC 7D               [ 4]  405 	ld	a, l
      0000DD 21 03 00         [10]  406 	ld	hl, #3
      0000E0 39               [11]  407 	add	hl, sp
      0000E1 A6               [ 7]  408 	and	a, (hl)
      0000E2 4F               [ 4]  409 	ld	c, a
                                    410 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  411 	ld	hl, #2
      0000E6 39               [11]  412 	add	hl, sp
      0000E7 7E               [ 7]  413 	ld	a, (hl)
      0000E8 91               [ 4]  414 	sub	a, c
      0000E9 38 EE            [12]  415 	jr	C, 00101$
                                    416 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  417 	ld	l, c
                                    418 ;src\/Random.h:59: }
      0000EC C9               [10]  419 	ret
                                    420 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    421 ;	---------------------------------
                                    422 ; Function DrawArrowSprite
                                    423 ; ---------------------------------
      0000ED                        424 _DrawArrowSprite::
      0000ED DD E5            [15]  425 	push	ix
      0000EF DD 21 00 00      [14]  426 	ld	ix,#0
      0000F3 DD 39            [15]  427 	add	ix,sp
      0000F5 21 F8 FF         [10]  428 	ld	hl, #-8
      0000F8 39               [11]  429 	add	hl, sp
      0000F9 F9               [ 6]  430 	ld	sp, hl
                                    431 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  432 	ld	hl, #0
      0000FD 39               [11]  433 	add	hl, sp
      0000FE EB               [ 4]  434 	ex	de, hl
      0000FF 3E 0F            [ 7]  435 	ld	a, #0x0f
      000101 12               [ 7]  436 	ld	(de), a
      000102 6B               [ 4]  437 	ld	l, e
      000103 62               [ 4]  438 	ld	h, d
      000104 23               [ 6]  439 	inc	hl
      000105 36 0E            [10]  440 	ld	(hl), #0x0e
      000107 6B               [ 4]  441 	ld	l, e
      000108 62               [ 4]  442 	ld	h, d
      000109 23               [ 6]  443 	inc	hl
      00010A 23               [ 6]  444 	inc	hl
      00010B 36 05            [10]  445 	ld	(hl), #0x05
      00010D 6B               [ 4]  446 	ld	l, e
      00010E 62               [ 4]  447 	ld	h, d
      00010F 23               [ 6]  448 	inc	hl
      000110 23               [ 6]  449 	inc	hl
      000111 23               [ 6]  450 	inc	hl
      000112 36 04            [10]  451 	ld	(hl), #0x04
      000114 21 04 00         [10]  452 	ld	hl, #0x0004
      000117 19               [11]  453 	add	hl, de
      000118 36 04            [10]  454 	ld	(hl), #0x04
      00011A 21 05 00         [10]  455 	ld	hl, #0x0005
      00011D 19               [11]  456 	add	hl, de
      00011E 36 05            [10]  457 	ld	(hl), #0x05
      000120 21 06 00         [10]  458 	ld	hl, #0x0006
      000123 19               [11]  459 	add	hl, de
      000124 36 0E            [10]  460 	ld	(hl), #0x0e
      000126 21 07 00         [10]  461 	ld	hl, #0x0007
      000129 19               [11]  462 	add	hl, de
      00012A 36 0F            [10]  463 	ld	(hl), #0x0f
                                    464 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  465 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  466 	ld	a, l
      000130 E6 0E            [ 7]  467 	and	a, #0x0e
      000132 6F               [ 4]  468 	ld	l, a
      000133 26 00            [ 7]  469 	ld	h, #0x00
      000135 CB 3C            [ 8]  470 	srl	h
      000137 CB 1D            [ 8]  471 	rr	l
                                    472 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  473 	ld	a, 5 (ix)
      00013C 3D               [ 4]  474 	dec	a
      00013D E5               [11]  475 	push	hl
      00013E D5               [11]  476 	push	de
      00013F F5               [11]  477 	push	af
      000140 33               [ 6]  478 	inc	sp
      000141 01 00 1B         [10]  479 	ld	bc, #0x1b00
      000144 C5               [11]  480 	push	bc
      000145 CDr00r00         [17]  481 	call	_WRTVRM
      000148 F1               [10]  482 	pop	af
      000149 33               [ 6]  483 	inc	sp
      00014A DD 7E 04         [19]  484 	ld	a, 4 (ix)
      00014D F5               [11]  485 	push	af
      00014E 33               [ 6]  486 	inc	sp
      00014F 01 01 1B         [10]  487 	ld	bc, #0x1b01
      000152 C5               [11]  488 	push	bc
      000153 CDr00r00         [17]  489 	call	_WRTVRM
      000156 F1               [10]  490 	pop	af
      000157 33               [ 6]  491 	inc	sp
      000158 AF               [ 4]  492 	xor	a, a
      000159 F5               [11]  493 	push	af
      00015A 33               [ 6]  494 	inc	sp
      00015B 01 02 1B         [10]  495 	ld	bc, #0x1b02
      00015E C5               [11]  496 	push	bc
      00015F CDr00r00         [17]  497 	call	_WRTVRM
      000162 F1               [10]  498 	pop	af
      000163 33               [ 6]  499 	inc	sp
      000164 D1               [10]  500 	pop	de
      000165 E1               [10]  501 	pop	hl
                                    502 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  503 	ld	h, #0x00
      000168 19               [11]  504 	add	hl, de
      000169 7E               [ 7]  505 	ld	a, (hl)
      00016A F5               [11]  506 	push	af
      00016B 33               [ 6]  507 	inc	sp
      00016C 21 03 1B         [10]  508 	ld	hl, #0x1b03
      00016F E5               [11]  509 	push	hl
      000170 CDr00r00         [17]  510 	call	_WRTVRM
                                    511 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  512 	ld	sp,ix
      000175 DD E1            [14]  513 	pop	ix
      000177 C9               [10]  514 	ret
      000178                        515 _FONT:
      000178 00                     516 	.db #0x00	; 0
      000179 00                     517 	.db #0x00	; 0
      00017A 00                     518 	.db #0x00	; 0
      00017B 00                     519 	.db #0x00	; 0
      00017C 00                     520 	.db #0x00	; 0
      00017D 00                     521 	.db #0x00	; 0
      00017E 00                     522 	.db #0x00	; 0
      00017F 00                     523 	.db #0x00	; 0
      000180 30                     524 	.db #0x30	; 48	'0'
      000181 78                     525 	.db #0x78	; 120	'x'
      000182 78                     526 	.db #0x78	; 120	'x'
      000183 30                     527 	.db #0x30	; 48	'0'
      000184 30                     528 	.db #0x30	; 48	'0'
      000185 00                     529 	.db #0x00	; 0
      000186 30                     530 	.db #0x30	; 48	'0'
      000187 00                     531 	.db #0x00	; 0
      000188 6C                     532 	.db #0x6c	; 108	'l'
      000189 6C                     533 	.db #0x6c	; 108	'l'
      00018A 6C                     534 	.db #0x6c	; 108	'l'
      00018B 00                     535 	.db #0x00	; 0
      00018C 00                     536 	.db #0x00	; 0
      00018D 00                     537 	.db #0x00	; 0
      00018E 00                     538 	.db #0x00	; 0
      00018F 00                     539 	.db #0x00	; 0
      000190 6C                     540 	.db #0x6c	; 108	'l'
      000191 6C                     541 	.db #0x6c	; 108	'l'
      000192 FE                     542 	.db #0xfe	; 254
      000193 6C                     543 	.db #0x6c	; 108	'l'
      000194 FE                     544 	.db #0xfe	; 254
      000195 6C                     545 	.db #0x6c	; 108	'l'
      000196 6C                     546 	.db #0x6c	; 108	'l'
      000197 00                     547 	.db #0x00	; 0
      000198 30                     548 	.db #0x30	; 48	'0'
      000199 7C                     549 	.db #0x7c	; 124
      00019A C0                     550 	.db #0xc0	; 192
      00019B 78                     551 	.db #0x78	; 120	'x'
      00019C 0C                     552 	.db #0x0c	; 12
      00019D F8                     553 	.db #0xf8	; 248
      00019E 30                     554 	.db #0x30	; 48	'0'
      00019F 00                     555 	.db #0x00	; 0
      0001A0 00                     556 	.db #0x00	; 0
      0001A1 C6                     557 	.db #0xc6	; 198
      0001A2 CC                     558 	.db #0xcc	; 204
      0001A3 18                     559 	.db #0x18	; 24
      0001A4 30                     560 	.db #0x30	; 48	'0'
      0001A5 66                     561 	.db #0x66	; 102	'f'
      0001A6 C6                     562 	.db #0xc6	; 198
      0001A7 00                     563 	.db #0x00	; 0
      0001A8 38                     564 	.db #0x38	; 56	'8'
      0001A9 6C                     565 	.db #0x6c	; 108	'l'
      0001AA 38                     566 	.db #0x38	; 56	'8'
      0001AB 76                     567 	.db #0x76	; 118	'v'
      0001AC DC                     568 	.db #0xdc	; 220
      0001AD CC                     569 	.db #0xcc	; 204
      0001AE 76                     570 	.db #0x76	; 118	'v'
      0001AF 00                     571 	.db #0x00	; 0
      0001B0 60                     572 	.db #0x60	; 96
      0001B1 60                     573 	.db #0x60	; 96
      0001B2 C0                     574 	.db #0xc0	; 192
      0001B3 00                     575 	.db #0x00	; 0
      0001B4 00                     576 	.db #0x00	; 0
      0001B5 00                     577 	.db #0x00	; 0
      0001B6 00                     578 	.db #0x00	; 0
      0001B7 00                     579 	.db #0x00	; 0
      0001B8 18                     580 	.db #0x18	; 24
      0001B9 30                     581 	.db #0x30	; 48	'0'
      0001BA 60                     582 	.db #0x60	; 96
      0001BB 60                     583 	.db #0x60	; 96
      0001BC 60                     584 	.db #0x60	; 96
      0001BD 30                     585 	.db #0x30	; 48	'0'
      0001BE 18                     586 	.db #0x18	; 24
      0001BF 00                     587 	.db #0x00	; 0
      0001C0 60                     588 	.db #0x60	; 96
      0001C1 30                     589 	.db #0x30	; 48	'0'
      0001C2 18                     590 	.db #0x18	; 24
      0001C3 18                     591 	.db #0x18	; 24
      0001C4 18                     592 	.db #0x18	; 24
      0001C5 30                     593 	.db #0x30	; 48	'0'
      0001C6 60                     594 	.db #0x60	; 96
      0001C7 00                     595 	.db #0x00	; 0
      0001C8 00                     596 	.db #0x00	; 0
      0001C9 66                     597 	.db #0x66	; 102	'f'
      0001CA 3C                     598 	.db #0x3c	; 60
      0001CB FF                     599 	.db #0xff	; 255
      0001CC 3C                     600 	.db #0x3c	; 60
      0001CD 66                     601 	.db #0x66	; 102	'f'
      0001CE 00                     602 	.db #0x00	; 0
      0001CF 00                     603 	.db #0x00	; 0
      0001D0 00                     604 	.db #0x00	; 0
      0001D1 30                     605 	.db #0x30	; 48	'0'
      0001D2 30                     606 	.db #0x30	; 48	'0'
      0001D3 FC                     607 	.db #0xfc	; 252
      0001D4 30                     608 	.db #0x30	; 48	'0'
      0001D5 30                     609 	.db #0x30	; 48	'0'
      0001D6 00                     610 	.db #0x00	; 0
      0001D7 00                     611 	.db #0x00	; 0
      0001D8 00                     612 	.db #0x00	; 0
      0001D9 00                     613 	.db #0x00	; 0
      0001DA 00                     614 	.db #0x00	; 0
      0001DB 00                     615 	.db #0x00	; 0
      0001DC 00                     616 	.db #0x00	; 0
      0001DD 30                     617 	.db #0x30	; 48	'0'
      0001DE 30                     618 	.db #0x30	; 48	'0'
      0001DF 60                     619 	.db #0x60	; 96
      0001E0 00                     620 	.db #0x00	; 0
      0001E1 00                     621 	.db #0x00	; 0
      0001E2 00                     622 	.db #0x00	; 0
      0001E3 FC                     623 	.db #0xfc	; 252
      0001E4 00                     624 	.db #0x00	; 0
      0001E5 00                     625 	.db #0x00	; 0
      0001E6 00                     626 	.db #0x00	; 0
      0001E7 00                     627 	.db #0x00	; 0
      0001E8 00                     628 	.db #0x00	; 0
      0001E9 00                     629 	.db #0x00	; 0
      0001EA 00                     630 	.db #0x00	; 0
      0001EB 00                     631 	.db #0x00	; 0
      0001EC 00                     632 	.db #0x00	; 0
      0001ED 30                     633 	.db #0x30	; 48	'0'
      0001EE 30                     634 	.db #0x30	; 48	'0'
      0001EF 00                     635 	.db #0x00	; 0
      0001F0 06                     636 	.db #0x06	; 6
      0001F1 0C                     637 	.db #0x0c	; 12
      0001F2 18                     638 	.db #0x18	; 24
      0001F3 30                     639 	.db #0x30	; 48	'0'
      0001F4 60                     640 	.db #0x60	; 96
      0001F5 C0                     641 	.db #0xc0	; 192
      0001F6 80                     642 	.db #0x80	; 128
      0001F7 00                     643 	.db #0x00	; 0
      0001F8 7C                     644 	.db #0x7c	; 124
      0001F9 C6                     645 	.db #0xc6	; 198
      0001FA CE                     646 	.db #0xce	; 206
      0001FB DE                     647 	.db #0xde	; 222
      0001FC F6                     648 	.db #0xf6	; 246
      0001FD E6                     649 	.db #0xe6	; 230
      0001FE 7C                     650 	.db #0x7c	; 124
      0001FF 00                     651 	.db #0x00	; 0
      000200 30                     652 	.db #0x30	; 48	'0'
      000201 70                     653 	.db #0x70	; 112	'p'
      000202 30                     654 	.db #0x30	; 48	'0'
      000203 30                     655 	.db #0x30	; 48	'0'
      000204 30                     656 	.db #0x30	; 48	'0'
      000205 30                     657 	.db #0x30	; 48	'0'
      000206 FC                     658 	.db #0xfc	; 252
      000207 00                     659 	.db #0x00	; 0
      000208 78                     660 	.db #0x78	; 120	'x'
      000209 CC                     661 	.db #0xcc	; 204
      00020A 0C                     662 	.db #0x0c	; 12
      00020B 38                     663 	.db #0x38	; 56	'8'
      00020C 60                     664 	.db #0x60	; 96
      00020D C4                     665 	.db #0xc4	; 196
      00020E FC                     666 	.db #0xfc	; 252
      00020F 00                     667 	.db #0x00	; 0
      000210 78                     668 	.db #0x78	; 120	'x'
      000211 CC                     669 	.db #0xcc	; 204
      000212 0C                     670 	.db #0x0c	; 12
      000213 38                     671 	.db #0x38	; 56	'8'
      000214 0C                     672 	.db #0x0c	; 12
      000215 CC                     673 	.db #0xcc	; 204
      000216 78                     674 	.db #0x78	; 120	'x'
      000217 00                     675 	.db #0x00	; 0
      000218 1C                     676 	.db #0x1c	; 28
      000219 3C                     677 	.db #0x3c	; 60
      00021A 6C                     678 	.db #0x6c	; 108	'l'
      00021B CC                     679 	.db #0xcc	; 204
      00021C FE                     680 	.db #0xfe	; 254
      00021D 0C                     681 	.db #0x0c	; 12
      00021E 1E                     682 	.db #0x1e	; 30
      00021F 00                     683 	.db #0x00	; 0
      000220 FC                     684 	.db #0xfc	; 252
      000221 C0                     685 	.db #0xc0	; 192
      000222 F8                     686 	.db #0xf8	; 248
      000223 0C                     687 	.db #0x0c	; 12
      000224 0C                     688 	.db #0x0c	; 12
      000225 CC                     689 	.db #0xcc	; 204
      000226 78                     690 	.db #0x78	; 120	'x'
      000227 00                     691 	.db #0x00	; 0
      000228 38                     692 	.db #0x38	; 56	'8'
      000229 60                     693 	.db #0x60	; 96
      00022A C0                     694 	.db #0xc0	; 192
      00022B F8                     695 	.db #0xf8	; 248
      00022C CC                     696 	.db #0xcc	; 204
      00022D CC                     697 	.db #0xcc	; 204
      00022E 78                     698 	.db #0x78	; 120	'x'
      00022F 00                     699 	.db #0x00	; 0
      000230 FC                     700 	.db #0xfc	; 252
      000231 CC                     701 	.db #0xcc	; 204
      000232 0C                     702 	.db #0x0c	; 12
      000233 18                     703 	.db #0x18	; 24
      000234 30                     704 	.db #0x30	; 48	'0'
      000235 30                     705 	.db #0x30	; 48	'0'
      000236 30                     706 	.db #0x30	; 48	'0'
      000237 00                     707 	.db #0x00	; 0
      000238 78                     708 	.db #0x78	; 120	'x'
      000239 CC                     709 	.db #0xcc	; 204
      00023A CC                     710 	.db #0xcc	; 204
      00023B 78                     711 	.db #0x78	; 120	'x'
      00023C CC                     712 	.db #0xcc	; 204
      00023D CC                     713 	.db #0xcc	; 204
      00023E 78                     714 	.db #0x78	; 120	'x'
      00023F 00                     715 	.db #0x00	; 0
      000240 78                     716 	.db #0x78	; 120	'x'
      000241 CC                     717 	.db #0xcc	; 204
      000242 CC                     718 	.db #0xcc	; 204
      000243 7C                     719 	.db #0x7c	; 124
      000244 0C                     720 	.db #0x0c	; 12
      000245 18                     721 	.db #0x18	; 24
      000246 70                     722 	.db #0x70	; 112	'p'
      000247 00                     723 	.db #0x00	; 0
      000248 00                     724 	.db #0x00	; 0
      000249 30                     725 	.db #0x30	; 48	'0'
      00024A 30                     726 	.db #0x30	; 48	'0'
      00024B 00                     727 	.db #0x00	; 0
      00024C 00                     728 	.db #0x00	; 0
      00024D 30                     729 	.db #0x30	; 48	'0'
      00024E 30                     730 	.db #0x30	; 48	'0'
      00024F 00                     731 	.db #0x00	; 0
      000250 00                     732 	.db #0x00	; 0
      000251 30                     733 	.db #0x30	; 48	'0'
      000252 30                     734 	.db #0x30	; 48	'0'
      000253 00                     735 	.db #0x00	; 0
      000254 30                     736 	.db #0x30	; 48	'0'
      000255 30                     737 	.db #0x30	; 48	'0'
      000256 60                     738 	.db #0x60	; 96
      000257 00                     739 	.db #0x00	; 0
      000258 18                     740 	.db #0x18	; 24
      000259 30                     741 	.db #0x30	; 48	'0'
      00025A 60                     742 	.db #0x60	; 96
      00025B C0                     743 	.db #0xc0	; 192
      00025C 60                     744 	.db #0x60	; 96
      00025D 30                     745 	.db #0x30	; 48	'0'
      00025E 18                     746 	.db #0x18	; 24
      00025F 00                     747 	.db #0x00	; 0
      000260 00                     748 	.db #0x00	; 0
      000261 00                     749 	.db #0x00	; 0
      000262 FC                     750 	.db #0xfc	; 252
      000263 00                     751 	.db #0x00	; 0
      000264 00                     752 	.db #0x00	; 0
      000265 FC                     753 	.db #0xfc	; 252
      000266 00                     754 	.db #0x00	; 0
      000267 00                     755 	.db #0x00	; 0
      000268 60                     756 	.db #0x60	; 96
      000269 30                     757 	.db #0x30	; 48	'0'
      00026A 18                     758 	.db #0x18	; 24
      00026B 0C                     759 	.db #0x0c	; 12
      00026C 18                     760 	.db #0x18	; 24
      00026D 30                     761 	.db #0x30	; 48	'0'
      00026E 60                     762 	.db #0x60	; 96
      00026F 00                     763 	.db #0x00	; 0
      000270 78                     764 	.db #0x78	; 120	'x'
      000271 CC                     765 	.db #0xcc	; 204
      000272 0C                     766 	.db #0x0c	; 12
      000273 18                     767 	.db #0x18	; 24
      000274 30                     768 	.db #0x30	; 48	'0'
      000275 00                     769 	.db #0x00	; 0
      000276 30                     770 	.db #0x30	; 48	'0'
      000277 00                     771 	.db #0x00	; 0
      000278 7C                     772 	.db #0x7c	; 124
      000279 C6                     773 	.db #0xc6	; 198
      00027A DE                     774 	.db #0xde	; 222
      00027B DE                     775 	.db #0xde	; 222
      00027C DE                     776 	.db #0xde	; 222
      00027D C0                     777 	.db #0xc0	; 192
      00027E 78                     778 	.db #0x78	; 120	'x'
      00027F 00                     779 	.db #0x00	; 0
      000280 30                     780 	.db #0x30	; 48	'0'
      000281 78                     781 	.db #0x78	; 120	'x'
      000282 CC                     782 	.db #0xcc	; 204
      000283 CC                     783 	.db #0xcc	; 204
      000284 FC                     784 	.db #0xfc	; 252
      000285 CC                     785 	.db #0xcc	; 204
      000286 CC                     786 	.db #0xcc	; 204
      000287 00                     787 	.db #0x00	; 0
      000288 FC                     788 	.db #0xfc	; 252
      000289 66                     789 	.db #0x66	; 102	'f'
      00028A 66                     790 	.db #0x66	; 102	'f'
      00028B 7C                     791 	.db #0x7c	; 124
      00028C 66                     792 	.db #0x66	; 102	'f'
      00028D 66                     793 	.db #0x66	; 102	'f'
      00028E FC                     794 	.db #0xfc	; 252
      00028F 00                     795 	.db #0x00	; 0
      000290 3C                     796 	.db #0x3c	; 60
      000291 66                     797 	.db #0x66	; 102	'f'
      000292 C0                     798 	.db #0xc0	; 192
      000293 C0                     799 	.db #0xc0	; 192
      000294 C0                     800 	.db #0xc0	; 192
      000295 66                     801 	.db #0x66	; 102	'f'
      000296 3C                     802 	.db #0x3c	; 60
      000297 00                     803 	.db #0x00	; 0
      000298 F8                     804 	.db #0xf8	; 248
      000299 6C                     805 	.db #0x6c	; 108	'l'
      00029A 66                     806 	.db #0x66	; 102	'f'
      00029B 66                     807 	.db #0x66	; 102	'f'
      00029C 66                     808 	.db #0x66	; 102	'f'
      00029D 6C                     809 	.db #0x6c	; 108	'l'
      00029E F8                     810 	.db #0xf8	; 248
      00029F 00                     811 	.db #0x00	; 0
      0002A0 FE                     812 	.db #0xfe	; 254
      0002A1 62                     813 	.db #0x62	; 98	'b'
      0002A2 68                     814 	.db #0x68	; 104	'h'
      0002A3 78                     815 	.db #0x78	; 120	'x'
      0002A4 68                     816 	.db #0x68	; 104	'h'
      0002A5 62                     817 	.db #0x62	; 98	'b'
      0002A6 FE                     818 	.db #0xfe	; 254
      0002A7 00                     819 	.db #0x00	; 0
      0002A8 FE                     820 	.db #0xfe	; 254
      0002A9 62                     821 	.db #0x62	; 98	'b'
      0002AA 68                     822 	.db #0x68	; 104	'h'
      0002AB 78                     823 	.db #0x78	; 120	'x'
      0002AC 68                     824 	.db #0x68	; 104	'h'
      0002AD 60                     825 	.db #0x60	; 96
      0002AE F0                     826 	.db #0xf0	; 240
      0002AF 00                     827 	.db #0x00	; 0
      0002B0 3C                     828 	.db #0x3c	; 60
      0002B1 66                     829 	.db #0x66	; 102	'f'
      0002B2 C0                     830 	.db #0xc0	; 192
      0002B3 C0                     831 	.db #0xc0	; 192
      0002B4 CE                     832 	.db #0xce	; 206
      0002B5 66                     833 	.db #0x66	; 102	'f'
      0002B6 3E                     834 	.db #0x3e	; 62
      0002B7 00                     835 	.db #0x00	; 0
      0002B8 CC                     836 	.db #0xcc	; 204
      0002B9 CC                     837 	.db #0xcc	; 204
      0002BA CC                     838 	.db #0xcc	; 204
      0002BB FC                     839 	.db #0xfc	; 252
      0002BC CC                     840 	.db #0xcc	; 204
      0002BD CC                     841 	.db #0xcc	; 204
      0002BE CC                     842 	.db #0xcc	; 204
      0002BF 00                     843 	.db #0x00	; 0
      0002C0 78                     844 	.db #0x78	; 120	'x'
      0002C1 30                     845 	.db #0x30	; 48	'0'
      0002C2 30                     846 	.db #0x30	; 48	'0'
      0002C3 30                     847 	.db #0x30	; 48	'0'
      0002C4 30                     848 	.db #0x30	; 48	'0'
      0002C5 30                     849 	.db #0x30	; 48	'0'
      0002C6 78                     850 	.db #0x78	; 120	'x'
      0002C7 00                     851 	.db #0x00	; 0
      0002C8 1E                     852 	.db #0x1e	; 30
      0002C9 0C                     853 	.db #0x0c	; 12
      0002CA 0C                     854 	.db #0x0c	; 12
      0002CB 0C                     855 	.db #0x0c	; 12
      0002CC CC                     856 	.db #0xcc	; 204
      0002CD CC                     857 	.db #0xcc	; 204
      0002CE 78                     858 	.db #0x78	; 120	'x'
      0002CF 00                     859 	.db #0x00	; 0
      0002D0 E6                     860 	.db #0xe6	; 230
      0002D1 66                     861 	.db #0x66	; 102	'f'
      0002D2 6C                     862 	.db #0x6c	; 108	'l'
      0002D3 78                     863 	.db #0x78	; 120	'x'
      0002D4 6C                     864 	.db #0x6c	; 108	'l'
      0002D5 66                     865 	.db #0x66	; 102	'f'
      0002D6 E6                     866 	.db #0xe6	; 230
      0002D7 00                     867 	.db #0x00	; 0
      0002D8 F0                     868 	.db #0xf0	; 240
      0002D9 60                     869 	.db #0x60	; 96
      0002DA 60                     870 	.db #0x60	; 96
      0002DB 60                     871 	.db #0x60	; 96
      0002DC 62                     872 	.db #0x62	; 98	'b'
      0002DD 66                     873 	.db #0x66	; 102	'f'
      0002DE FE                     874 	.db #0xfe	; 254
      0002DF 00                     875 	.db #0x00	; 0
      0002E0 C6                     876 	.db #0xc6	; 198
      0002E1 EE                     877 	.db #0xee	; 238
      0002E2 FE                     878 	.db #0xfe	; 254
      0002E3 FE                     879 	.db #0xfe	; 254
      0002E4 D6                     880 	.db #0xd6	; 214
      0002E5 C6                     881 	.db #0xc6	; 198
      0002E6 C6                     882 	.db #0xc6	; 198
      0002E7 00                     883 	.db #0x00	; 0
      0002E8 C6                     884 	.db #0xc6	; 198
      0002E9 E6                     885 	.db #0xe6	; 230
      0002EA F6                     886 	.db #0xf6	; 246
      0002EB DE                     887 	.db #0xde	; 222
      0002EC CE                     888 	.db #0xce	; 206
      0002ED C6                     889 	.db #0xc6	; 198
      0002EE C6                     890 	.db #0xc6	; 198
      0002EF 00                     891 	.db #0x00	; 0
      0002F0 38                     892 	.db #0x38	; 56	'8'
      0002F1 6C                     893 	.db #0x6c	; 108	'l'
      0002F2 C6                     894 	.db #0xc6	; 198
      0002F3 C6                     895 	.db #0xc6	; 198
      0002F4 C6                     896 	.db #0xc6	; 198
      0002F5 6C                     897 	.db #0x6c	; 108	'l'
      0002F6 38                     898 	.db #0x38	; 56	'8'
      0002F7 00                     899 	.db #0x00	; 0
      0002F8 FC                     900 	.db #0xfc	; 252
      0002F9 66                     901 	.db #0x66	; 102	'f'
      0002FA 66                     902 	.db #0x66	; 102	'f'
      0002FB 7C                     903 	.db #0x7c	; 124
      0002FC 60                     904 	.db #0x60	; 96
      0002FD 60                     905 	.db #0x60	; 96
      0002FE F0                     906 	.db #0xf0	; 240
      0002FF 00                     907 	.db #0x00	; 0
      000300 78                     908 	.db #0x78	; 120	'x'
      000301 CC                     909 	.db #0xcc	; 204
      000302 CC                     910 	.db #0xcc	; 204
      000303 CC                     911 	.db #0xcc	; 204
      000304 DC                     912 	.db #0xdc	; 220
      000305 78                     913 	.db #0x78	; 120	'x'
      000306 1C                     914 	.db #0x1c	; 28
      000307 00                     915 	.db #0x00	; 0
      000308 FC                     916 	.db #0xfc	; 252
      000309 66                     917 	.db #0x66	; 102	'f'
      00030A 66                     918 	.db #0x66	; 102	'f'
      00030B 7C                     919 	.db #0x7c	; 124
      00030C 6C                     920 	.db #0x6c	; 108	'l'
      00030D 66                     921 	.db #0x66	; 102	'f'
      00030E E6                     922 	.db #0xe6	; 230
      00030F 00                     923 	.db #0x00	; 0
      000310 78                     924 	.db #0x78	; 120	'x'
      000311 CC                     925 	.db #0xcc	; 204
      000312 E0                     926 	.db #0xe0	; 224
      000313 70                     927 	.db #0x70	; 112	'p'
      000314 1C                     928 	.db #0x1c	; 28
      000315 CC                     929 	.db #0xcc	; 204
      000316 78                     930 	.db #0x78	; 120	'x'
      000317 00                     931 	.db #0x00	; 0
      000318 FC                     932 	.db #0xfc	; 252
      000319 B4                     933 	.db #0xb4	; 180
      00031A 30                     934 	.db #0x30	; 48	'0'
      00031B 30                     935 	.db #0x30	; 48	'0'
      00031C 30                     936 	.db #0x30	; 48	'0'
      00031D 30                     937 	.db #0x30	; 48	'0'
      00031E 78                     938 	.db #0x78	; 120	'x'
      00031F 00                     939 	.db #0x00	; 0
      000320 CC                     940 	.db #0xcc	; 204
      000321 CC                     941 	.db #0xcc	; 204
      000322 CC                     942 	.db #0xcc	; 204
      000323 CC                     943 	.db #0xcc	; 204
      000324 CC                     944 	.db #0xcc	; 204
      000325 CC                     945 	.db #0xcc	; 204
      000326 FC                     946 	.db #0xfc	; 252
      000327 00                     947 	.db #0x00	; 0
      000328 CC                     948 	.db #0xcc	; 204
      000329 CC                     949 	.db #0xcc	; 204
      00032A CC                     950 	.db #0xcc	; 204
      00032B CC                     951 	.db #0xcc	; 204
      00032C CC                     952 	.db #0xcc	; 204
      00032D 78                     953 	.db #0x78	; 120	'x'
      00032E 30                     954 	.db #0x30	; 48	'0'
      00032F 00                     955 	.db #0x00	; 0
      000330 C6                     956 	.db #0xc6	; 198
      000331 C6                     957 	.db #0xc6	; 198
      000332 C6                     958 	.db #0xc6	; 198
      000333 D6                     959 	.db #0xd6	; 214
      000334 FE                     960 	.db #0xfe	; 254
      000335 EE                     961 	.db #0xee	; 238
      000336 C6                     962 	.db #0xc6	; 198
      000337 00                     963 	.db #0x00	; 0
      000338 C6                     964 	.db #0xc6	; 198
      000339 C6                     965 	.db #0xc6	; 198
      00033A 6C                     966 	.db #0x6c	; 108	'l'
      00033B 38                     967 	.db #0x38	; 56	'8'
      00033C 38                     968 	.db #0x38	; 56	'8'
      00033D 6C                     969 	.db #0x6c	; 108	'l'
      00033E C6                     970 	.db #0xc6	; 198
      00033F 00                     971 	.db #0x00	; 0
      000340 CC                     972 	.db #0xcc	; 204
      000341 CC                     973 	.db #0xcc	; 204
      000342 CC                     974 	.db #0xcc	; 204
      000343 78                     975 	.db #0x78	; 120	'x'
      000344 30                     976 	.db #0x30	; 48	'0'
      000345 30                     977 	.db #0x30	; 48	'0'
      000346 78                     978 	.db #0x78	; 120	'x'
      000347 00                     979 	.db #0x00	; 0
      000348 FE                     980 	.db #0xfe	; 254
      000349 C6                     981 	.db #0xc6	; 198
      00034A 8C                     982 	.db #0x8c	; 140
      00034B 18                     983 	.db #0x18	; 24
      00034C 32                     984 	.db #0x32	; 50	'2'
      00034D 66                     985 	.db #0x66	; 102	'f'
      00034E FE                     986 	.db #0xfe	; 254
      00034F 00                     987 	.db #0x00	; 0
      000350 78                     988 	.db #0x78	; 120	'x'
      000351 60                     989 	.db #0x60	; 96
      000352 60                     990 	.db #0x60	; 96
      000353 60                     991 	.db #0x60	; 96
      000354 60                     992 	.db #0x60	; 96
      000355 60                     993 	.db #0x60	; 96
      000356 78                     994 	.db #0x78	; 120	'x'
      000357 00                     995 	.db #0x00	; 0
      000358 C0                     996 	.db #0xc0	; 192
      000359 60                     997 	.db #0x60	; 96
      00035A 30                     998 	.db #0x30	; 48	'0'
      00035B 18                     999 	.db #0x18	; 24
      00035C 0C                    1000 	.db #0x0c	; 12
      00035D 06                    1001 	.db #0x06	; 6
      00035E 02                    1002 	.db #0x02	; 2
      00035F 00                    1003 	.db #0x00	; 0
      000360 78                    1004 	.db #0x78	; 120	'x'
      000361 18                    1005 	.db #0x18	; 24
      000362 18                    1006 	.db #0x18	; 24
      000363 18                    1007 	.db #0x18	; 24
      000364 18                    1008 	.db #0x18	; 24
      000365 18                    1009 	.db #0x18	; 24
      000366 78                    1010 	.db #0x78	; 120	'x'
      000367 00                    1011 	.db #0x00	; 0
      000368 10                    1012 	.db #0x10	; 16
      000369 38                    1013 	.db #0x38	; 56	'8'
      00036A 6C                    1014 	.db #0x6c	; 108	'l'
      00036B C6                    1015 	.db #0xc6	; 198
      00036C 00                    1016 	.db #0x00	; 0
      00036D 00                    1017 	.db #0x00	; 0
      00036E 00                    1018 	.db #0x00	; 0
      00036F 00                    1019 	.db #0x00	; 0
      000370 00                    1020 	.db #0x00	; 0
      000371 00                    1021 	.db #0x00	; 0
      000372 00                    1022 	.db #0x00	; 0
      000373 00                    1023 	.db #0x00	; 0
      000374 00                    1024 	.db #0x00	; 0
      000375 00                    1025 	.db #0x00	; 0
      000376 00                    1026 	.db #0x00	; 0
      000377 FF                    1027 	.db #0xff	; 255
      000378 30                    1028 	.db #0x30	; 48	'0'
      000379 30                    1029 	.db #0x30	; 48	'0'
      00037A 18                    1030 	.db #0x18	; 24
      00037B 00                    1031 	.db #0x00	; 0
      00037C 00                    1032 	.db #0x00	; 0
      00037D 00                    1033 	.db #0x00	; 0
      00037E 00                    1034 	.db #0x00	; 0
      00037F 00                    1035 	.db #0x00	; 0
      000380 00                    1036 	.db #0x00	; 0
      000381 00                    1037 	.db #0x00	; 0
      000382 78                    1038 	.db #0x78	; 120	'x'
      000383 0C                    1039 	.db #0x0c	; 12
      000384 7C                    1040 	.db #0x7c	; 124
      000385 CC                    1041 	.db #0xcc	; 204
      000386 76                    1042 	.db #0x76	; 118	'v'
      000387 00                    1043 	.db #0x00	; 0
      000388 E0                    1044 	.db #0xe0	; 224
      000389 60                    1045 	.db #0x60	; 96
      00038A 60                    1046 	.db #0x60	; 96
      00038B 7C                    1047 	.db #0x7c	; 124
      00038C 66                    1048 	.db #0x66	; 102	'f'
      00038D 66                    1049 	.db #0x66	; 102	'f'
      00038E DC                    1050 	.db #0xdc	; 220
      00038F 00                    1051 	.db #0x00	; 0
      000390 00                    1052 	.db #0x00	; 0
      000391 00                    1053 	.db #0x00	; 0
      000392 78                    1054 	.db #0x78	; 120	'x'
      000393 CC                    1055 	.db #0xcc	; 204
      000394 C0                    1056 	.db #0xc0	; 192
      000395 CC                    1057 	.db #0xcc	; 204
      000396 78                    1058 	.db #0x78	; 120	'x'
      000397 00                    1059 	.db #0x00	; 0
      000398 1C                    1060 	.db #0x1c	; 28
      000399 0C                    1061 	.db #0x0c	; 12
      00039A 0C                    1062 	.db #0x0c	; 12
      00039B 7C                    1063 	.db #0x7c	; 124
      00039C CC                    1064 	.db #0xcc	; 204
      00039D CC                    1065 	.db #0xcc	; 204
      00039E 76                    1066 	.db #0x76	; 118	'v'
      00039F 00                    1067 	.db #0x00	; 0
      0003A0 00                    1068 	.db #0x00	; 0
      0003A1 00                    1069 	.db #0x00	; 0
      0003A2 78                    1070 	.db #0x78	; 120	'x'
      0003A3 CC                    1071 	.db #0xcc	; 204
      0003A4 FC                    1072 	.db #0xfc	; 252
      0003A5 C0                    1073 	.db #0xc0	; 192
      0003A6 78                    1074 	.db #0x78	; 120	'x'
      0003A7 00                    1075 	.db #0x00	; 0
      0003A8 38                    1076 	.db #0x38	; 56	'8'
      0003A9 6C                    1077 	.db #0x6c	; 108	'l'
      0003AA 60                    1078 	.db #0x60	; 96
      0003AB F0                    1079 	.db #0xf0	; 240
      0003AC 60                    1080 	.db #0x60	; 96
      0003AD 60                    1081 	.db #0x60	; 96
      0003AE F0                    1082 	.db #0xf0	; 240
      0003AF 00                    1083 	.db #0x00	; 0
      0003B0 00                    1084 	.db #0x00	; 0
      0003B1 00                    1085 	.db #0x00	; 0
      0003B2 76                    1086 	.db #0x76	; 118	'v'
      0003B3 CC                    1087 	.db #0xcc	; 204
      0003B4 CC                    1088 	.db #0xcc	; 204
      0003B5 7C                    1089 	.db #0x7c	; 124
      0003B6 0C                    1090 	.db #0x0c	; 12
      0003B7 F8                    1091 	.db #0xf8	; 248
      0003B8 E0                    1092 	.db #0xe0	; 224
      0003B9 60                    1093 	.db #0x60	; 96
      0003BA 6C                    1094 	.db #0x6c	; 108	'l'
      0003BB 76                    1095 	.db #0x76	; 118	'v'
      0003BC 66                    1096 	.db #0x66	; 102	'f'
      0003BD 66                    1097 	.db #0x66	; 102	'f'
      0003BE E6                    1098 	.db #0xe6	; 230
      0003BF 00                    1099 	.db #0x00	; 0
      0003C0 30                    1100 	.db #0x30	; 48	'0'
      0003C1 00                    1101 	.db #0x00	; 0
      0003C2 70                    1102 	.db #0x70	; 112	'p'
      0003C3 30                    1103 	.db #0x30	; 48	'0'
      0003C4 30                    1104 	.db #0x30	; 48	'0'
      0003C5 30                    1105 	.db #0x30	; 48	'0'
      0003C6 78                    1106 	.db #0x78	; 120	'x'
      0003C7 00                    1107 	.db #0x00	; 0
      0003C8 0C                    1108 	.db #0x0c	; 12
      0003C9 00                    1109 	.db #0x00	; 0
      0003CA 0C                    1110 	.db #0x0c	; 12
      0003CB 0C                    1111 	.db #0x0c	; 12
      0003CC 0C                    1112 	.db #0x0c	; 12
      0003CD CC                    1113 	.db #0xcc	; 204
      0003CE CC                    1114 	.db #0xcc	; 204
      0003CF 78                    1115 	.db #0x78	; 120	'x'
      0003D0 E0                    1116 	.db #0xe0	; 224
      0003D1 60                    1117 	.db #0x60	; 96
      0003D2 66                    1118 	.db #0x66	; 102	'f'
      0003D3 6C                    1119 	.db #0x6c	; 108	'l'
      0003D4 78                    1120 	.db #0x78	; 120	'x'
      0003D5 6C                    1121 	.db #0x6c	; 108	'l'
      0003D6 E6                    1122 	.db #0xe6	; 230
      0003D7 00                    1123 	.db #0x00	; 0
      0003D8 70                    1124 	.db #0x70	; 112	'p'
      0003D9 30                    1125 	.db #0x30	; 48	'0'
      0003DA 30                    1126 	.db #0x30	; 48	'0'
      0003DB 30                    1127 	.db #0x30	; 48	'0'
      0003DC 30                    1128 	.db #0x30	; 48	'0'
      0003DD 30                    1129 	.db #0x30	; 48	'0'
      0003DE 78                    1130 	.db #0x78	; 120	'x'
      0003DF 00                    1131 	.db #0x00	; 0
      0003E0 00                    1132 	.db #0x00	; 0
      0003E1 00                    1133 	.db #0x00	; 0
      0003E2 CC                    1134 	.db #0xcc	; 204
      0003E3 FE                    1135 	.db #0xfe	; 254
      0003E4 FE                    1136 	.db #0xfe	; 254
      0003E5 D6                    1137 	.db #0xd6	; 214
      0003E6 C6                    1138 	.db #0xc6	; 198
      0003E7 00                    1139 	.db #0x00	; 0
      0003E8 00                    1140 	.db #0x00	; 0
      0003E9 00                    1141 	.db #0x00	; 0
      0003EA F8                    1142 	.db #0xf8	; 248
      0003EB CC                    1143 	.db #0xcc	; 204
      0003EC CC                    1144 	.db #0xcc	; 204
      0003ED CC                    1145 	.db #0xcc	; 204
      0003EE CC                    1146 	.db #0xcc	; 204
      0003EF 00                    1147 	.db #0x00	; 0
      0003F0 00                    1148 	.db #0x00	; 0
      0003F1 00                    1149 	.db #0x00	; 0
      0003F2 78                    1150 	.db #0x78	; 120	'x'
      0003F3 CC                    1151 	.db #0xcc	; 204
      0003F4 CC                    1152 	.db #0xcc	; 204
      0003F5 CC                    1153 	.db #0xcc	; 204
      0003F6 78                    1154 	.db #0x78	; 120	'x'
      0003F7 00                    1155 	.db #0x00	; 0
      0003F8 00                    1156 	.db #0x00	; 0
      0003F9 00                    1157 	.db #0x00	; 0
      0003FA DC                    1158 	.db #0xdc	; 220
      0003FB 66                    1159 	.db #0x66	; 102	'f'
      0003FC 66                    1160 	.db #0x66	; 102	'f'
      0003FD 7C                    1161 	.db #0x7c	; 124
      0003FE 60                    1162 	.db #0x60	; 96
      0003FF F0                    1163 	.db #0xf0	; 240
      000400 00                    1164 	.db #0x00	; 0
      000401 00                    1165 	.db #0x00	; 0
      000402 76                    1166 	.db #0x76	; 118	'v'
      000403 CC                    1167 	.db #0xcc	; 204
      000404 CC                    1168 	.db #0xcc	; 204
      000405 7C                    1169 	.db #0x7c	; 124
      000406 0C                    1170 	.db #0x0c	; 12
      000407 1E                    1171 	.db #0x1e	; 30
      000408 00                    1172 	.db #0x00	; 0
      000409 00                    1173 	.db #0x00	; 0
      00040A DC                    1174 	.db #0xdc	; 220
      00040B 76                    1175 	.db #0x76	; 118	'v'
      00040C 66                    1176 	.db #0x66	; 102	'f'
      00040D 60                    1177 	.db #0x60	; 96
      00040E F0                    1178 	.db #0xf0	; 240
      00040F 00                    1179 	.db #0x00	; 0
      000410 00                    1180 	.db #0x00	; 0
      000411 00                    1181 	.db #0x00	; 0
      000412 7C                    1182 	.db #0x7c	; 124
      000413 C0                    1183 	.db #0xc0	; 192
      000414 78                    1184 	.db #0x78	; 120	'x'
      000415 0C                    1185 	.db #0x0c	; 12
      000416 F8                    1186 	.db #0xf8	; 248
      000417 00                    1187 	.db #0x00	; 0
      000418 10                    1188 	.db #0x10	; 16
      000419 30                    1189 	.db #0x30	; 48	'0'
      00041A 7C                    1190 	.db #0x7c	; 124
      00041B 30                    1191 	.db #0x30	; 48	'0'
      00041C 30                    1192 	.db #0x30	; 48	'0'
      00041D 34                    1193 	.db #0x34	; 52	'4'
      00041E 18                    1194 	.db #0x18	; 24
      00041F 00                    1195 	.db #0x00	; 0
      000420 00                    1196 	.db #0x00	; 0
      000421 00                    1197 	.db #0x00	; 0
      000422 CC                    1198 	.db #0xcc	; 204
      000423 CC                    1199 	.db #0xcc	; 204
      000424 CC                    1200 	.db #0xcc	; 204
      000425 CC                    1201 	.db #0xcc	; 204
      000426 76                    1202 	.db #0x76	; 118	'v'
      000427 00                    1203 	.db #0x00	; 0
      000428 00                    1204 	.db #0x00	; 0
      000429 00                    1205 	.db #0x00	; 0
      00042A CC                    1206 	.db #0xcc	; 204
      00042B CC                    1207 	.db #0xcc	; 204
      00042C CC                    1208 	.db #0xcc	; 204
      00042D 78                    1209 	.db #0x78	; 120	'x'
      00042E 30                    1210 	.db #0x30	; 48	'0'
      00042F 00                    1211 	.db #0x00	; 0
      000430 00                    1212 	.db #0x00	; 0
      000431 00                    1213 	.db #0x00	; 0
      000432 C6                    1214 	.db #0xc6	; 198
      000433 D6                    1215 	.db #0xd6	; 214
      000434 FE                    1216 	.db #0xfe	; 254
      000435 FE                    1217 	.db #0xfe	; 254
      000436 6C                    1218 	.db #0x6c	; 108	'l'
      000437 00                    1219 	.db #0x00	; 0
      000438 00                    1220 	.db #0x00	; 0
      000439 00                    1221 	.db #0x00	; 0
      00043A C6                    1222 	.db #0xc6	; 198
      00043B 6C                    1223 	.db #0x6c	; 108	'l'
      00043C 38                    1224 	.db #0x38	; 56	'8'
      00043D 6C                    1225 	.db #0x6c	; 108	'l'
      00043E C6                    1226 	.db #0xc6	; 198
      00043F 00                    1227 	.db #0x00	; 0
      000440 00                    1228 	.db #0x00	; 0
      000441 00                    1229 	.db #0x00	; 0
      000442 CC                    1230 	.db #0xcc	; 204
      000443 CC                    1231 	.db #0xcc	; 204
      000444 CC                    1232 	.db #0xcc	; 204
      000445 7C                    1233 	.db #0x7c	; 124
      000446 0C                    1234 	.db #0x0c	; 12
      000447 F8                    1235 	.db #0xf8	; 248
      000448 00                    1236 	.db #0x00	; 0
      000449 00                    1237 	.db #0x00	; 0
      00044A FC                    1238 	.db #0xfc	; 252
      00044B 98                    1239 	.db #0x98	; 152
      00044C 30                    1240 	.db #0x30	; 48	'0'
      00044D 64                    1241 	.db #0x64	; 100	'd'
      00044E FC                    1242 	.db #0xfc	; 252
      00044F 00                    1243 	.db #0x00	; 0
      000450 1C                    1244 	.db #0x1c	; 28
      000451 30                    1245 	.db #0x30	; 48	'0'
      000452 30                    1246 	.db #0x30	; 48	'0'
      000453 E0                    1247 	.db #0xe0	; 224
      000454 30                    1248 	.db #0x30	; 48	'0'
      000455 30                    1249 	.db #0x30	; 48	'0'
      000456 1C                    1250 	.db #0x1c	; 28
      000457 00                    1251 	.db #0x00	; 0
      000458 18                    1252 	.db #0x18	; 24
      000459 18                    1253 	.db #0x18	; 24
      00045A 18                    1254 	.db #0x18	; 24
      00045B 00                    1255 	.db #0x00	; 0
      00045C 18                    1256 	.db #0x18	; 24
      00045D 18                    1257 	.db #0x18	; 24
      00045E 18                    1258 	.db #0x18	; 24
      00045F 00                    1259 	.db #0x00	; 0
      000460 E0                    1260 	.db #0xe0	; 224
      000461 30                    1261 	.db #0x30	; 48	'0'
      000462 30                    1262 	.db #0x30	; 48	'0'
      000463 1C                    1263 	.db #0x1c	; 28
      000464 30                    1264 	.db #0x30	; 48	'0'
      000465 30                    1265 	.db #0x30	; 48	'0'
      000466 E0                    1266 	.db #0xe0	; 224
      000467 00                    1267 	.db #0x00	; 0
      000468 76                    1268 	.db #0x76	; 118	'v'
      000469 DC                    1269 	.db #0xdc	; 220
      00046A 00                    1270 	.db #0x00	; 0
      00046B 00                    1271 	.db #0x00	; 0
      00046C 00                    1272 	.db #0x00	; 0
      00046D 00                    1273 	.db #0x00	; 0
      00046E 00                    1274 	.db #0x00	; 0
      00046F 00                    1275 	.db #0x00	; 0
      000470 00                    1276 	.db #0x00	; 0
      000471 10                    1277 	.db #0x10	; 16
      000472 38                    1278 	.db #0x38	; 56	'8'
      000473 6C                    1279 	.db #0x6c	; 108	'l'
      000474 C6                    1280 	.db #0xc6	; 198
      000475 C6                    1281 	.db #0xc6	; 198
      000476 FE                    1282 	.db #0xfe	; 254
      000477 00                    1283 	.db #0x00	; 0
      000478                       1284 _pattern_black_0:
      000478 FF                    1285 	.db #0xff	; 255
      000479 FF                    1286 	.db #0xff	; 255
      00047A FF                    1287 	.db #0xff	; 255
      00047B FF                    1288 	.db #0xff	; 255
      00047C FF                    1289 	.db #0xff	; 255
      00047D FF                    1290 	.db #0xff	; 255
      00047E FF                    1291 	.db #0xff	; 255
      00047F FF                    1292 	.db #0xff	; 255
      000480                       1293 _pattern_black_1:
      000480 FE                    1294 	.db #0xfe	; 254
      000481 FF                    1295 	.db #0xff	; 255
      000482 FF                    1296 	.db #0xff	; 255
      000483 FF                    1297 	.db #0xff	; 255
      000484 FE                    1298 	.db #0xfe	; 254
      000485 FF                    1299 	.db #0xff	; 255
      000486 FF                    1300 	.db #0xff	; 255
      000487 FE                    1301 	.db #0xfe	; 254
      000488                       1302 _pattern_black_2:
      000488 FF                    1303 	.db #0xff	; 255
      000489 FF                    1304 	.db #0xff	; 255
      00048A FF                    1305 	.db #0xff	; 255
      00048B FF                    1306 	.db #0xff	; 255
      00048C FF                    1307 	.db #0xff	; 255
      00048D FB                    1308 	.db #0xfb	; 251
      00048E FF                    1309 	.db #0xff	; 255
      00048F BB                    1310 	.db #0xbb	; 187
      000490                       1311 _pattern_black_3:
      000490 FB                    1312 	.db #0xfb	; 251
      000491 FE                    1313 	.db #0xfe	; 254
      000492 FD                    1314 	.db #0xfd	; 253
      000493 FE                    1315 	.db #0xfe	; 254
      000494 F7                    1316 	.db #0xf7	; 247
      000495 FA                    1317 	.db #0xfa	; 250
      000496 AF                    1318 	.db #0xaf	; 175
      000497 55                    1319 	.db #0x55	; 85	'U'
      000498                       1320 _pattern_0:
      000498 9F                    1321 	.db #0x9f	; 159
      000499 90                    1322 	.db #0x90	; 144
      00049A 90                    1323 	.db #0x90	; 144
      00049B 93                    1324 	.db #0x93	; 147
      00049C 92                    1325 	.db #0x92	; 146
      00049D 92                    1326 	.db #0x92	; 146
      00049E 92                    1327 	.db #0x92	; 146
      00049F 92                    1328 	.db #0x92	; 146
      0004A0                       1329 _pattern_1:
      0004A0 FF                    1330 	.db #0xff	; 255
      0004A1 01                    1331 	.db #0x01	; 1
      0004A2 01                    1332 	.db #0x01	; 1
      0004A3 F9                    1333 	.db #0xf9	; 249
      0004A4 09                    1334 	.db #0x09	; 9
      0004A5 09                    1335 	.db #0x09	; 9
      0004A6 49                    1336 	.db #0x49	; 73	'I'
      0004A7 49                    1337 	.db #0x49	; 73	'I'
      0004A8                       1338 _pattern_2:
      0004A8 92                    1339 	.db #0x92	; 146
      0004A9 93                    1340 	.db #0x93	; 147
      0004AA 90                    1341 	.db #0x90	; 144
      0004AB 90                    1342 	.db #0x90	; 144
      0004AC 9F                    1343 	.db #0x9f	; 159
      0004AD 80                    1344 	.db #0x80	; 128
      0004AE 80                    1345 	.db #0x80	; 128
      0004AF FF                    1346 	.db #0xff	; 255
      0004B0                       1347 _pattern_3:
      0004B0 49                    1348 	.db #0x49	; 73	'I'
      0004B1 C9                    1349 	.db #0xc9	; 201
      0004B2 09                    1350 	.db #0x09	; 9
      0004B3 09                    1351 	.db #0x09	; 9
      0004B4 F9                    1352 	.db #0xf9	; 249
      0004B5 01                    1353 	.db #0x01	; 1
      0004B6 01                    1354 	.db #0x01	; 1
      0004B7 FF                    1355 	.db #0xff	; 255
      0004B8                       1356 _pattern_4:
      0004B8 7F                    1357 	.db #0x7f	; 127
      0004B9 81                    1358 	.db #0x81	; 129
      0004BA 83                    1359 	.db #0x83	; 131
      0004BB 87                    1360 	.db #0x87	; 135
      0004BC 8F                    1361 	.db #0x8f	; 143
      0004BD 9F                    1362 	.db #0x9f	; 159
      0004BE BF                    1363 	.db #0xbf	; 191
      0004BF FF                    1364 	.db #0xff	; 255
      0004C0                       1365 _pattern_5:
      0004C0 FE                    1366 	.db #0xfe	; 254
      0004C1 81                    1367 	.db #0x81	; 129
      0004C2 C1                    1368 	.db #0xc1	; 193
      0004C3 E1                    1369 	.db #0xe1	; 225
      0004C4 F1                    1370 	.db #0xf1	; 241
      0004C5 F9                    1371 	.db #0xf9	; 249
      0004C6 FD                    1372 	.db #0xfd	; 253
      0004C7 FF                    1373 	.db #0xff	; 255
      0004C8                       1374 _pattern_6:
      0004C8 FF                    1375 	.db #0xff	; 255
      0004C9 BF                    1376 	.db #0xbf	; 191
      0004CA 9F                    1377 	.db #0x9f	; 159
      0004CB 8F                    1378 	.db #0x8f	; 143
      0004CC 87                    1379 	.db #0x87	; 135
      0004CD 83                    1380 	.db #0x83	; 131
      0004CE 81                    1381 	.db #0x81	; 129
      0004CF 7F                    1382 	.db #0x7f	; 127
      0004D0                       1383 _pattern_7:
      0004D0 FF                    1384 	.db #0xff	; 255
      0004D1 FD                    1385 	.db #0xfd	; 253
      0004D2 F9                    1386 	.db #0xf9	; 249
      0004D3 F1                    1387 	.db #0xf1	; 241
      0004D4 E1                    1388 	.db #0xe1	; 225
      0004D5 C1                    1389 	.db #0xc1	; 193
      0004D6 81                    1390 	.db #0x81	; 129
      0004D7 FE                    1391 	.db #0xfe	; 254
      0004D8                       1392 _pattern_8:
      0004D8 7F                    1393 	.db #0x7f	; 127
      0004D9 AE                    1394 	.db #0xae	; 174
      0004DA FF                    1395 	.db #0xff	; 255
      0004DB 5B                    1396 	.db #0x5b	; 91
      0004DC FF                    1397 	.db #0xff	; 255
      0004DD AE                    1398 	.db #0xae	; 174
      0004DE FF                    1399 	.db #0xff	; 255
      0004DF DF                    1400 	.db #0xdf	; 223
      0004E0                       1401 _pattern_9:
      0004E0 FE                    1402 	.db #0xfe	; 254
      0004E1 BD                    1403 	.db #0xbd	; 189
      0004E2 DF                    1404 	.db #0xdf	; 223
      0004E3 7F                    1405 	.db #0x7f	; 127
      0004E4 FB                    1406 	.db #0xfb	; 251
      0004E5 DF                    1407 	.db #0xdf	; 223
      0004E6 FE                    1408 	.db #0xfe	; 254
      0004E7 EF                    1409 	.db #0xef	; 239
      0004E8                       1410 _pattern_10:
      0004E8 7F                    1411 	.db #0x7f	; 127
      0004E9 FF                    1412 	.db #0xff	; 255
      0004EA ED                    1413 	.db #0xed	; 237
      0004EB FF                    1414 	.db #0xff	; 255
      0004EC B6                    1415 	.db #0xb6	; 182
      0004ED FE                    1416 	.db #0xfe	; 254
      0004EE DB                    1417 	.db #0xdb	; 219
      0004EF 7D                    1418 	.db #0x7d	; 125
      0004F0                       1419 _pattern_11:
      0004F0 FE                    1420 	.db #0xfe	; 254
      0004F1 FF                    1421 	.db #0xff	; 255
      0004F2 FE                    1422 	.db #0xfe	; 254
      0004F3 77                    1423 	.db #0x77	; 119	'w'
      0004F4 FE                    1424 	.db #0xfe	; 254
      0004F5 DD                    1425 	.db #0xdd	; 221
      0004F6 EF                    1426 	.db #0xef	; 239
      0004F7 5A                    1427 	.db #0x5a	; 90	'Z'
      0004F8                       1428 _pattern_12:
      0004F8 7F                    1429 	.db #0x7f	; 127
      0004F9 D5                    1430 	.db #0xd5	; 213
      0004FA BF                    1431 	.db #0xbf	; 191
      0004FB ED                    1432 	.db #0xed	; 237
      0004FC BF                    1433 	.db #0xbf	; 191
      0004FD F5                    1434 	.db #0xf5	; 245
      0004FE BF                    1435 	.db #0xbf	; 191
      0004FF FF                    1436 	.db #0xff	; 255
      000500                       1437 _pattern_13:
      000500 FE                    1438 	.db #0xfe	; 254
      000501 5F                    1439 	.db #0x5f	; 95
      000502 F5                    1440 	.db #0xf5	; 245
      000503 DF                    1441 	.db #0xdf	; 223
      000504 FF                    1442 	.db #0xff	; 255
      000505 FF                    1443 	.db #0xff	; 255
      000506 FF                    1444 	.db #0xff	; 255
      000507 FF                    1445 	.db #0xff	; 255
      000508                       1446 _pattern_14:
      000508 EF                    1447 	.db #0xef	; 239
      000509 BF                    1448 	.db #0xbf	; 191
      00050A 7F                    1449 	.db #0x7f	; 127
      00050B FF                    1450 	.db #0xff	; 255
      00050C FF                    1451 	.db #0xff	; 255
      00050D FF                    1452 	.db #0xff	; 255
      00050E DB                    1453 	.db #0xdb	; 219
      00050F 7F                    1454 	.db #0x7f	; 127
      000510                       1455 _pattern_15:
      000510 FF                    1456 	.db #0xff	; 255
      000511 FD                    1457 	.db #0xfd	; 253
      000512 FF                    1458 	.db #0xff	; 255
      000513 DB                    1459 	.db #0xdb	; 219
      000514 FD                    1460 	.db #0xfd	; 253
      000515 7B                    1461 	.db #0x7b	; 123
      000516 D7                    1462 	.db #0xd7	; 215
      000517 FE                    1463 	.db #0xfe	; 254
      000518                       1464 _pattern_16:
      000518 7F                    1465 	.db #0x7f	; 127
      000519 FF                    1466 	.db #0xff	; 255
      00051A EA                    1467 	.db #0xea	; 234
      00051B DF                    1468 	.db #0xdf	; 223
      00051C FF                    1469 	.db #0xff	; 255
      00051D DF                    1470 	.db #0xdf	; 223
      00051E FF                    1471 	.db #0xff	; 255
      00051F DF                    1472 	.db #0xdf	; 223
      000520                       1473 _pattern_17:
      000520 FE                    1474 	.db #0xfe	; 254
      000521 FF                    1475 	.db #0xff	; 255
      000522 AF                    1476 	.db #0xaf	; 175
      000523 FA                    1477 	.db #0xfa	; 250
      000524 FF                    1478 	.db #0xff	; 255
      000525 FA                    1479 	.db #0xfa	; 250
      000526 FF                    1480 	.db #0xff	; 255
      000527 FA                    1481 	.db #0xfa	; 250
      000528                       1482 _pattern_18:
      000528 FF                    1483 	.db #0xff	; 255
      000529 DF                    1484 	.db #0xdf	; 223
      00052A FF                    1485 	.db #0xff	; 255
      00052B DF                    1486 	.db #0xdf	; 223
      00052C FF                    1487 	.db #0xff	; 255
      00052D EA                    1488 	.db #0xea	; 234
      00052E FF                    1489 	.db #0xff	; 255
      00052F 55                    1490 	.db #0x55	; 85	'U'
      000530                       1491 _pattern_19:
      000530 FF                    1492 	.db #0xff	; 255
      000531 FA                    1493 	.db #0xfa	; 250
      000532 FF                    1494 	.db #0xff	; 255
      000533 FA                    1495 	.db #0xfa	; 250
      000534 F7                    1496 	.db #0xf7	; 247
      000535 AA                    1497 	.db #0xaa	; 170
      000536 FF                    1498 	.db #0xff	; 255
      000537 56                    1499 	.db #0x56	; 86	'V'
      000538                       1500 _pattern_20:
      000538 3F                    1501 	.db #0x3f	; 63
      000539 7F                    1502 	.db #0x7f	; 127
      00053A E0                    1503 	.db #0xe0	; 224
      00053B CE                    1504 	.db #0xce	; 206
      00053C E6                    1505 	.db #0xe6	; 230
      00053D 7C                    1506 	.db #0x7c	; 124
      00053E 39                    1507 	.db #0x39	; 57	'9'
      00053F 03                    1508 	.db #0x03	; 3
      000540                       1509 _pattern_21:
      000540 FF                    1510 	.db #0xff	; 255
      000541 FF                    1511 	.db #0xff	; 255
      000542 00                    1512 	.db #0x00	; 0
      000543 DB                    1513 	.db #0xdb	; 219
      000544 DB                    1514 	.db #0xdb	; 219
      000545 00                    1515 	.db #0x00	; 0
      000546 FF                    1516 	.db #0xff	; 255
      000547 FF                    1517 	.db #0xff	; 255
      000548                       1518 _pattern_22:
      000548 FC                    1519 	.db #0xfc	; 252
      000549 FE                    1520 	.db #0xfe	; 254
      00054A 07                    1521 	.db #0x07	; 7
      00054B 73                    1522 	.db #0x73	; 115	's'
      00054C 67                    1523 	.db #0x67	; 103	'g'
      00054D 3E                    1524 	.db #0x3e	; 62
      00054E 9C                    1525 	.db #0x9c	; 156
      00054F C0                    1526 	.db #0xc0	; 192
      000550                       1527 _pattern_23:
      000550 06                    1528 	.db #0x06	; 6
      000551 00                    1529 	.db #0x00	; 0
      000552 03                    1530 	.db #0x03	; 3
      000553 04                    1531 	.db #0x04	; 4
      000554 05                    1532 	.db #0x05	; 5
      000555 05                    1533 	.db #0x05	; 5
      000556 05                    1534 	.db #0x05	; 5
      000557 05                    1535 	.db #0x05	; 5
      000558                       1536 _pattern_24:
      000558 00                    1537 	.db #0x00	; 0
      000559 00                    1538 	.db #0x00	; 0
      00055A 33                    1539 	.db #0x33	; 51	'3'
      00055B 44                    1540 	.db #0x44	; 68	'D'
      00055C 55                    1541 	.db #0x55	; 85	'U'
      00055D 55                    1542 	.db #0x55	; 85	'U'
      00055E 55                    1543 	.db #0x55	; 85	'U'
      00055F 55                    1544 	.db #0x55	; 85	'U'
      000560                       1545 _pattern_25:
      000560 60                    1546 	.db #0x60	; 96
      000561 00                    1547 	.db #0x00	; 0
      000562 40                    1548 	.db #0x40	; 64
      000563 20                    1549 	.db #0x20	; 32
      000564 20                    1550 	.db #0x20	; 32
      000565 20                    1551 	.db #0x20	; 32
      000566 20                    1552 	.db #0x20	; 32
      000567 20                    1553 	.db #0x20	; 32
      000568                       1554 _pattern_26:
      000568 05                    1555 	.db #0x05	; 5
      000569 05                    1556 	.db #0x05	; 5
      00056A 05                    1557 	.db #0x05	; 5
      00056B 05                    1558 	.db #0x05	; 5
      00056C 05                    1559 	.db #0x05	; 5
      00056D 05                    1560 	.db #0x05	; 5
      00056E 05                    1561 	.db #0x05	; 5
      00056F 05                    1562 	.db #0x05	; 5
      000570                       1563 _pattern_27:
      000570 55                    1564 	.db #0x55	; 85	'U'
      000571 55                    1565 	.db #0x55	; 85	'U'
      000572 55                    1566 	.db #0x55	; 85	'U'
      000573 55                    1567 	.db #0x55	; 85	'U'
      000574 55                    1568 	.db #0x55	; 85	'U'
      000575 55                    1569 	.db #0x55	; 85	'U'
      000576 55                    1570 	.db #0x55	; 85	'U'
      000577 55                    1571 	.db #0x55	; 85	'U'
      000578                       1572 _pattern_28:
      000578 20                    1573 	.db #0x20	; 32
      000579 20                    1574 	.db #0x20	; 32
      00057A 20                    1575 	.db #0x20	; 32
      00057B 20                    1576 	.db #0x20	; 32
      00057C 20                    1577 	.db #0x20	; 32
      00057D 20                    1578 	.db #0x20	; 32
      00057E 20                    1579 	.db #0x20	; 32
      00057F 20                    1580 	.db #0x20	; 32
      000580                       1581 _pattern_29:
      000580 05                    1582 	.db #0x05	; 5
      000581 05                    1583 	.db #0x05	; 5
      000582 07                    1584 	.db #0x07	; 7
      000583 07                    1585 	.db #0x07	; 7
      000584 07                    1586 	.db #0x07	; 7
      000585 05                    1587 	.db #0x05	; 5
      000586 05                    1588 	.db #0x05	; 5
      000587 05                    1589 	.db #0x05	; 5
      000588                       1590 _pattern_30:
      000588 55                    1591 	.db #0x55	; 85	'U'
      000589 55                    1592 	.db #0x55	; 85	'U'
      00058A FF                    1593 	.db #0xff	; 255
      00058B FF                    1594 	.db #0xff	; 255
      00058C FF                    1595 	.db #0xff	; 255
      00058D 55                    1596 	.db #0x55	; 85	'U'
      00058E 55                    1597 	.db #0x55	; 85	'U'
      00058F 55                    1598 	.db #0x55	; 85	'U'
      000590                       1599 _pattern_31:
      000590 20                    1600 	.db #0x20	; 32
      000591 20                    1601 	.db #0x20	; 32
      000592 E0                    1602 	.db #0xe0	; 224
      000593 E0                    1603 	.db #0xe0	; 224
      000594 E0                    1604 	.db #0xe0	; 224
      000595 20                    1605 	.db #0x20	; 32
      000596 20                    1606 	.db #0x20	; 32
      000597 20                    1607 	.db #0x20	; 32
      000598                       1608 _pattern_37:
      000598 05                    1609 	.db #0x05	; 5
      000599 05                    1610 	.db #0x05	; 5
      00059A 05                    1611 	.db #0x05	; 5
      00059B 05                    1612 	.db #0x05	; 5
      00059C 04                    1613 	.db #0x04	; 4
      00059D 03                    1614 	.db #0x03	; 3
      00059E 00                    1615 	.db #0x00	; 0
      00059F 06                    1616 	.db #0x06	; 6
      0005A0                       1617 _pattern_38:
      0005A0 55                    1618 	.db #0x55	; 85	'U'
      0005A1 55                    1619 	.db #0x55	; 85	'U'
      0005A2 55                    1620 	.db #0x55	; 85	'U'
      0005A3 55                    1621 	.db #0x55	; 85	'U'
      0005A4 44                    1622 	.db #0x44	; 68	'D'
      0005A5 33                    1623 	.db #0x33	; 51	'3'
      0005A6 00                    1624 	.db #0x00	; 0
      0005A7 00                    1625 	.db #0x00	; 0
      0005A8                       1626 _pattern_39:
      0005A8 20                    1627 	.db #0x20	; 32
      0005A9 20                    1628 	.db #0x20	; 32
      0005AA 20                    1629 	.db #0x20	; 32
      0005AB 20                    1630 	.db #0x20	; 32
      0005AC 20                    1631 	.db #0x20	; 32
      0005AD 40                    1632 	.db #0x40	; 64
      0005AE 00                    1633 	.db #0x00	; 0
      0005AF 60                    1634 	.db #0x60	; 96
      0005B0                       1635 _pattern_32:
      0005B0 03                    1636 	.db #0x03	; 3
      0005B1 39                    1637 	.db #0x39	; 57	'9'
      0005B2 7C                    1638 	.db #0x7c	; 124
      0005B3 E6                    1639 	.db #0xe6	; 230
      0005B4 CE                    1640 	.db #0xce	; 206
      0005B5 E0                    1641 	.db #0xe0	; 224
      0005B6 7F                    1642 	.db #0x7f	; 127
      0005B7 3F                    1643 	.db #0x3f	; 63
      0005B8                       1644 _pattern_33:
      0005B8 FF                    1645 	.db #0xff	; 255
      0005B9 FF                    1646 	.db #0xff	; 255
      0005BA 00                    1647 	.db #0x00	; 0
      0005BB DB                    1648 	.db #0xdb	; 219
      0005BC DB                    1649 	.db #0xdb	; 219
      0005BD 00                    1650 	.db #0x00	; 0
      0005BE FF                    1651 	.db #0xff	; 255
      0005BF FF                    1652 	.db #0xff	; 255
      0005C0                       1653 _pattern_34:
      0005C0 C0                    1654 	.db #0xc0	; 192
      0005C1 9C                    1655 	.db #0x9c	; 156
      0005C2 3E                    1656 	.db #0x3e	; 62
      0005C3 67                    1657 	.db #0x67	; 103	'g'
      0005C4 73                    1658 	.db #0x73	; 115	's'
      0005C5 07                    1659 	.db #0x07	; 7
      0005C6 FE                    1660 	.db #0xfe	; 254
      0005C7 FC                    1661 	.db #0xfc	; 252
      0005C8                       1662 _sprite_dust_0:
      0005C8 10                    1663 	.db #0x10	; 16
      0005C9 42                    1664 	.db #0x42	; 66	'B'
      0005CA 10                    1665 	.db #0x10	; 16
      0005CB 45                    1666 	.db #0x45	; 69	'E'
      0005CC 20                    1667 	.db #0x20	; 32
      0005CD 89                    1668 	.db #0x89	; 137
      0005CE 20                    1669 	.db #0x20	; 32
      0005CF 88                    1670 	.db #0x88	; 136
      0005D0                       1671 _sprite_dust_1:
      0005D0 10                    1672 	.db #0x10	; 16
      0005D1 42                    1673 	.db #0x42	; 66	'B'
      0005D2 00                    1674 	.db #0x00	; 0
      0005D3 04                    1675 	.db #0x04	; 4
      0005D4 20                    1676 	.db #0x20	; 32
      0005D5 81                    1677 	.db #0x81	; 129
      0005D6 20                    1678 	.db #0x20	; 32
      0005D7 08                    1679 	.db #0x08	; 8
      0005D8                       1680 _sprite_dust_2:
      0005D8 10                    1681 	.db #0x10	; 16
      0005D9 00                    1682 	.db #0x00	; 0
      0005DA 00                    1683 	.db #0x00	; 0
      0005DB 04                    1684 	.db #0x04	; 4
      0005DC 20                    1685 	.db #0x20	; 32
      0005DD 80                    1686 	.db #0x80	; 128
      0005DE 20                    1687 	.db #0x20	; 32
      0005DF 00                    1688 	.db #0x00	; 0
      0005E0                       1689 _sprite_dust_3:
      0005E0 10                    1690 	.db #0x10	; 16
      0005E1 00                    1691 	.db #0x00	; 0
      0005E2 00                    1692 	.db #0x00	; 0
      0005E3 04                    1693 	.db #0x04	; 4
      0005E4 00                    1694 	.db #0x00	; 0
      0005E5 00                    1695 	.db #0x00	; 0
      0005E6 20                    1696 	.db #0x20	; 32
      0005E7 00                    1697 	.db #0x00	; 0
      0005E8                       1698 _pattern_title:
      0005E8 FE                    1699 	.db #0xfe	; 254
      0005E9 FE                    1700 	.db #0xfe	; 254
      0005EA FE                    1701 	.db #0xfe	; 254
      0005EB FE                    1702 	.db #0xfe	; 254
      0005EC FE                    1703 	.db #0xfe	; 254
      0005ED FE                    1704 	.db #0xfe	; 254
      0005EE FE                    1705 	.db #0xfe	; 254
      0005EF 00                    1706 	.db #0x00	; 0
      0005F0                       1707 _color_black_0:
      0005F0 14                    1708 	.db #0x14	; 20
      0005F1 14                    1709 	.db #0x14	; 20
      0005F2 14                    1710 	.db #0x14	; 20
      0005F3 14                    1711 	.db #0x14	; 20
      0005F4 14                    1712 	.db #0x14	; 20
      0005F5 14                    1713 	.db #0x14	; 20
      0005F6 14                    1714 	.db #0x14	; 20
      0005F7 14                    1715 	.db #0x14	; 20
      0005F8                       1716 _color_black_1:
      0005F8 14                    1717 	.db #0x14	; 20
      0005F9 14                    1718 	.db #0x14	; 20
      0005FA 14                    1719 	.db #0x14	; 20
      0005FB 14                    1720 	.db #0x14	; 20
      0005FC 14                    1721 	.db #0x14	; 20
      0005FD 14                    1722 	.db #0x14	; 20
      0005FE 14                    1723 	.db #0x14	; 20
      0005FF 14                    1724 	.db #0x14	; 20
      000600                       1725 _color_black_2:
      000600 14                    1726 	.db #0x14	; 20
      000601 14                    1727 	.db #0x14	; 20
      000602 14                    1728 	.db #0x14	; 20
      000603 14                    1729 	.db #0x14	; 20
      000604 14                    1730 	.db #0x14	; 20
      000605 14                    1731 	.db #0x14	; 20
      000606 14                    1732 	.db #0x14	; 20
      000607 14                    1733 	.db #0x14	; 20
      000608                       1734 _color_black_3:
      000608 14                    1735 	.db #0x14	; 20
      000609 14                    1736 	.db #0x14	; 20
      00060A 14                    1737 	.db #0x14	; 20
      00060B 14                    1738 	.db #0x14	; 20
      00060C 14                    1739 	.db #0x14	; 20
      00060D 14                    1740 	.db #0x14	; 20
      00060E 14                    1741 	.db #0x14	; 20
      00060F 14                    1742 	.db #0x14	; 20
      000610                       1743 _color_0:
      000610 13                    1744 	.db #0x13	; 19
      000611 13                    1745 	.db #0x13	; 19
      000612 13                    1746 	.db #0x13	; 19
      000613 13                    1747 	.db #0x13	; 19
      000614 13                    1748 	.db #0x13	; 19
      000615 13                    1749 	.db #0x13	; 19
      000616 13                    1750 	.db #0x13	; 19
      000617 13                    1751 	.db #0x13	; 19
      000618                       1752 _color_1:
      000618 12                    1753 	.db #0x12	; 18
      000619 12                    1754 	.db #0x12	; 18
      00061A 12                    1755 	.db #0x12	; 18
      00061B 12                    1756 	.db #0x12	; 18
      00061C 12                    1757 	.db #0x12	; 18
      00061D 12                    1758 	.db #0x12	; 18
      00061E 12                    1759 	.db #0x12	; 18
      00061F 12                    1760 	.db #0x12	; 18
      000620                       1761 _color_2:
      000620 12                    1762 	.db #0x12	; 18
      000621 12                    1763 	.db #0x12	; 18
      000622 12                    1764 	.db #0x12	; 18
      000623 12                    1765 	.db #0x12	; 18
      000624 12                    1766 	.db #0x12	; 18
      000625 12                    1767 	.db #0x12	; 18
      000626 12                    1768 	.db #0x12	; 18
      000627 12                    1769 	.db #0x12	; 18
      000628                       1770 _color_3:
      000628 1C                    1771 	.db #0x1c	; 28
      000629 1C                    1772 	.db #0x1c	; 28
      00062A 1C                    1773 	.db #0x1c	; 28
      00062B 1C                    1774 	.db #0x1c	; 28
      00062C 1C                    1775 	.db #0x1c	; 28
      00062D 1C                    1776 	.db #0x1c	; 28
      00062E 1C                    1777 	.db #0x1c	; 28
      00062F 1C                    1778 	.db #0x1c	; 28
      000630                       1779 _color_4:
      000630 96                    1780 	.db #0x96	; 150
      000631 96                    1781 	.db #0x96	; 150
      000632 96                    1782 	.db #0x96	; 150
      000633 96                    1783 	.db #0x96	; 150
      000634 96                    1784 	.db #0x96	; 150
      000635 96                    1785 	.db #0x96	; 150
      000636 96                    1786 	.db #0x96	; 150
      000637 96                    1787 	.db #0x96	; 150
      000638                       1788 _color_5:
      000638 98                    1789 	.db #0x98	; 152
      000639 68                    1790 	.db #0x68	; 104	'h'
      00063A 68                    1791 	.db #0x68	; 104	'h'
      00063B 68                    1792 	.db #0x68	; 104	'h'
      00063C 68                    1793 	.db #0x68	; 104	'h'
      00063D 68                    1794 	.db #0x68	; 104	'h'
      00063E 68                    1795 	.db #0x68	; 104	'h'
      00063F 68                    1796 	.db #0x68	; 104	'h'
      000640                       1797 _color_6:
      000640 68                    1798 	.db #0x68	; 104	'h'
      000641 68                    1799 	.db #0x68	; 104	'h'
      000642 68                    1800 	.db #0x68	; 104	'h'
      000643 68                    1801 	.db #0x68	; 104	'h'
      000644 68                    1802 	.db #0x68	; 104	'h'
      000645 68                    1803 	.db #0x68	; 104	'h'
      000646 68                    1804 	.db #0x68	; 104	'h'
      000647 68                    1805 	.db #0x68	; 104	'h'
      000648                       1806 _color_7:
      000648 89                    1807 	.db #0x89	; 137
      000649 89                    1808 	.db #0x89	; 137
      00064A 89                    1809 	.db #0x89	; 137
      00064B 89                    1810 	.db #0x89	; 137
      00064C 89                    1811 	.db #0x89	; 137
      00064D 89                    1812 	.db #0x89	; 137
      00064E 89                    1813 	.db #0x89	; 137
      00064F 86                    1814 	.db #0x86	; 134
      000650                       1815 _color_8:
      000650 41                    1816 	.db #0x41	; 65	'A'
      000651 47                    1817 	.db #0x47	; 71	'G'
      000652 47                    1818 	.db #0x47	; 71	'G'
      000653 47                    1819 	.db #0x47	; 71	'G'
      000654 47                    1820 	.db #0x47	; 71	'G'
      000655 47                    1821 	.db #0x47	; 71	'G'
      000656 47                    1822 	.db #0x47	; 71	'G'
      000657 47                    1823 	.db #0x47	; 71	'G'
      000658                       1824 _color_9:
      000658 41                    1825 	.db #0x41	; 65	'A'
      000659 45                    1826 	.db #0x45	; 69	'E'
      00065A 47                    1827 	.db #0x47	; 71	'G'
      00065B 47                    1828 	.db #0x47	; 71	'G'
      00065C 45                    1829 	.db #0x45	; 69	'E'
      00065D 45                    1830 	.db #0x45	; 69	'E'
      00065E 41                    1831 	.db #0x41	; 65	'A'
      00065F 45                    1832 	.db #0x45	; 69	'E'
      000660                       1833 _color_10:
      000660 47                    1834 	.db #0x47	; 71	'G'
      000661 45                    1835 	.db #0x45	; 69	'E'
      000662 45                    1836 	.db #0x45	; 69	'E'
      000663 45                    1837 	.db #0x45	; 69	'E'
      000664 45                    1838 	.db #0x45	; 69	'E'
      000665 41                    1839 	.db #0x41	; 65	'A'
      000666 45                    1840 	.db #0x45	; 69	'E'
      000667 41                    1841 	.db #0x41	; 65	'A'
      000668                       1842 _color_11:
      000668 41                    1843 	.db #0x41	; 65	'A'
      000669 41                    1844 	.db #0x41	; 65	'A'
      00066A 41                    1845 	.db #0x41	; 65	'A'
      00066B 41                    1846 	.db #0x41	; 65	'A'
      00066C 41                    1847 	.db #0x41	; 65	'A'
      00066D 41                    1848 	.db #0x41	; 65	'A'
      00066E 41                    1849 	.db #0x41	; 65	'A'
      00066F 41                    1850 	.db #0x41	; 65	'A'
      000670                       1851 _color_12:
      000670 D1                    1852 	.db #0xd1	; 209
      000671 DF                    1853 	.db #0xdf	; 223
      000672 DF                    1854 	.db #0xdf	; 223
      000673 DF                    1855 	.db #0xdf	; 223
      000674 DF                    1856 	.db #0xdf	; 223
      000675 DF                    1857 	.db #0xdf	; 223
      000676 DF                    1858 	.db #0xdf	; 223
      000677 DF                    1859 	.db #0xdf	; 223
      000678                       1860 _color_13:
      000678 D1                    1861 	.db #0xd1	; 209
      000679 DF                    1862 	.db #0xdf	; 223
      00067A DF                    1863 	.db #0xdf	; 223
      00067B DF                    1864 	.db #0xdf	; 223
      00067C DF                    1865 	.db #0xdf	; 223
      00067D DF                    1866 	.db #0xdf	; 223
      00067E DF                    1867 	.db #0xdf	; 223
      00067F DF                    1868 	.db #0xdf	; 223
      000680                       1869 _color_14:
      000680 DF                    1870 	.db #0xdf	; 223
      000681 DF                    1871 	.db #0xdf	; 223
      000682 DF                    1872 	.db #0xdf	; 223
      000683 D1                    1873 	.db #0xd1	; 209
      000684 D1                    1874 	.db #0xd1	; 209
      000685 D1                    1875 	.db #0xd1	; 209
      000686 D1                    1876 	.db #0xd1	; 209
      000687 D1                    1877 	.db #0xd1	; 209
      000688                       1878 _color_15:
      000688 D1                    1879 	.db #0xd1	; 209
      000689 D1                    1880 	.db #0xd1	; 209
      00068A D1                    1881 	.db #0xd1	; 209
      00068B D1                    1882 	.db #0xd1	; 209
      00068C D1                    1883 	.db #0xd1	; 209
      00068D D1                    1884 	.db #0xd1	; 209
      00068E D1                    1885 	.db #0xd1	; 209
      00068F D1                    1886 	.db #0xd1	; 209
      000690                       1887 _color_16:
      000690 A1                    1888 	.db #0xa1	; 161
      000691 BF                    1889 	.db #0xbf	; 191
      000692 BF                    1890 	.db #0xbf	; 191
      000693 BF                    1891 	.db #0xbf	; 191
      000694 BF                    1892 	.db #0xbf	; 191
      000695 BF                    1893 	.db #0xbf	; 191
      000696 BF                    1894 	.db #0xbf	; 191
      000697 BF                    1895 	.db #0xbf	; 191
      000698                       1896 _color_17:
      000698 A1                    1897 	.db #0xa1	; 161
      000699 AF                    1898 	.db #0xaf	; 175
      00069A AF                    1899 	.db #0xaf	; 175
      00069B A1                    1900 	.db #0xa1	; 161
      00069C A1                    1901 	.db #0xa1	; 161
      00069D A1                    1902 	.db #0xa1	; 161
      00069E A1                    1903 	.db #0xa1	; 161
      00069F A1                    1904 	.db #0xa1	; 161
      0006A0                       1905 _color_18:
      0006A0 AF                    1906 	.db #0xaf	; 175
      0006A1 AF                    1907 	.db #0xaf	; 175
      0006A2 AF                    1908 	.db #0xaf	; 175
      0006A3 AF                    1909 	.db #0xaf	; 175
      0006A4 A1                    1910 	.db #0xa1	; 161
      0006A5 A1                    1911 	.db #0xa1	; 161
      0006A6 A1                    1912 	.db #0xa1	; 161
      0006A7 A1                    1913 	.db #0xa1	; 161
      0006A8                       1914 _color_19:
      0006A8 B1                    1915 	.db #0xb1	; 177
      0006A9 B1                    1916 	.db #0xb1	; 177
      0006AA B1                    1917 	.db #0xb1	; 177
      0006AB B1                    1918 	.db #0xb1	; 177
      0006AC B1                    1919 	.db #0xb1	; 177
      0006AD B1                    1920 	.db #0xb1	; 177
      0006AE B1                    1921 	.db #0xb1	; 177
      0006AF B1                    1922 	.db #0xb1	; 177
      0006B0                       1923 _color_column_1:
      0006B0 F1                    1924 	.db #0xf1	; 241
      0006B1 E1                    1925 	.db #0xe1	; 225
      0006B2 E1                    1926 	.db #0xe1	; 225
      0006B3 E1                    1927 	.db #0xe1	; 225
      0006B4 E1                    1928 	.db #0xe1	; 225
      0006B5 E1                    1929 	.db #0xe1	; 225
      0006B6 E1                    1930 	.db #0xe1	; 225
      0006B7 E1                    1931 	.db #0xe1	; 225
      0006B8                       1932 _color_column_2:
      0006B8 F1                    1933 	.db #0xf1	; 241
      0006B9 E1                    1934 	.db #0xe1	; 225
      0006BA E1                    1935 	.db #0xe1	; 225
      0006BB E1                    1936 	.db #0xe1	; 225
      0006BC E1                    1937 	.db #0xe1	; 225
      0006BD E1                    1938 	.db #0xe1	; 225
      0006BE E1                    1939 	.db #0xe1	; 225
      0006BF E1                    1940 	.db #0xe1	; 225
      0006C0                       1941 _color_column_3:
      0006C0 F1                    1942 	.db #0xf1	; 241
      0006C1 E1                    1943 	.db #0xe1	; 225
      0006C2 E1                    1944 	.db #0xe1	; 225
      0006C3 E1                    1945 	.db #0xe1	; 225
      0006C4 E1                    1946 	.db #0xe1	; 225
      0006C5 E1                    1947 	.db #0xe1	; 225
      0006C6 E1                    1948 	.db #0xe1	; 225
      0006C7 E1                    1949 	.db #0xe1	; 225
      0006C8                       1950 _color_column_4:
      0006C8 F1                    1951 	.db #0xf1	; 241
      0006C9 F1                    1952 	.db #0xf1	; 241
      0006CA F1                    1953 	.db #0xf1	; 241
      0006CB F1                    1954 	.db #0xf1	; 241
      0006CC F1                    1955 	.db #0xf1	; 241
      0006CD F1                    1956 	.db #0xf1	; 241
      0006CE F1                    1957 	.db #0xf1	; 241
      0006CF F1                    1958 	.db #0xf1	; 241
      0006D0                       1959 _color_column_5:
      0006D0 E1                    1960 	.db #0xe1	; 225
      0006D1 E1                    1961 	.db #0xe1	; 225
      0006D2 E1                    1962 	.db #0xe1	; 225
      0006D3 E1                    1963 	.db #0xe1	; 225
      0006D4 E1                    1964 	.db #0xe1	; 225
      0006D5 E1                    1965 	.db #0xe1	; 225
      0006D6 E1                    1966 	.db #0xe1	; 225
      0006D7 E1                    1967 	.db #0xe1	; 225
      0006D8                       1968 _color_column_6:
      0006D8 E1                    1969 	.db #0xe1	; 225
      0006D9 E1                    1970 	.db #0xe1	; 225
      0006DA E1                    1971 	.db #0xe1	; 225
      0006DB 41                    1972 	.db #0x41	; 65	'A'
      0006DC 41                    1973 	.db #0x41	; 65	'A'
      0006DD 41                    1974 	.db #0x41	; 65	'A'
      0006DE 41                    1975 	.db #0x41	; 65	'A'
      0006DF 41                    1976 	.db #0x41	; 65	'A'
      0006E0                       1977 _color_column_7:
      0006E0 F1                    1978 	.db #0xf1	; 241
      0006E1 F1                    1979 	.db #0xf1	; 241
      0006E2 F1                    1980 	.db #0xf1	; 241
      0006E3 F1                    1981 	.db #0xf1	; 241
      0006E4 F1                    1982 	.db #0xf1	; 241
      0006E5 F1                    1983 	.db #0xf1	; 241
      0006E6 F1                    1984 	.db #0xf1	; 241
      0006E7 F1                    1985 	.db #0xf1	; 241
      0006E8                       1986 _color_column_8:
      0006E8 E1                    1987 	.db #0xe1	; 225
      0006E9 E1                    1988 	.db #0xe1	; 225
      0006EA E1                    1989 	.db #0xe1	; 225
      0006EB F1                    1990 	.db #0xf1	; 241
      0006EC E1                    1991 	.db #0xe1	; 225
      0006ED E1                    1992 	.db #0xe1	; 225
      0006EE E1                    1993 	.db #0xe1	; 225
      0006EF E1                    1994 	.db #0xe1	; 225
      0006F0                       1995 _color_column_9:
      0006F0 41                    1996 	.db #0x41	; 65	'A'
      0006F1 41                    1997 	.db #0x41	; 65	'A'
      0006F2 41                    1998 	.db #0x41	; 65	'A'
      0006F3 F1                    1999 	.db #0xf1	; 241
      0006F4 41                    2000 	.db #0x41	; 65	'A'
      0006F5 41                    2001 	.db #0x41	; 65	'A'
      0006F6 41                    2002 	.db #0x41	; 65	'A'
      0006F7 41                    2003 	.db #0x41	; 65	'A'
      0006F8                       2004 _color_column_10:
      0006F8 F1                    2005 	.db #0xf1	; 241
      0006F9 F1                    2006 	.db #0xf1	; 241
      0006FA F1                    2007 	.db #0xf1	; 241
      0006FB F1                    2008 	.db #0xf1	; 241
      0006FC F1                    2009 	.db #0xf1	; 241
      0006FD F1                    2010 	.db #0xf1	; 241
      0006FE F1                    2011 	.db #0xf1	; 241
      0006FF F1                    2012 	.db #0xf1	; 241
      000700                       2013 _color_column_11:
      000700 E1                    2014 	.db #0xe1	; 225
      000701 E1                    2015 	.db #0xe1	; 225
      000702 E1                    2016 	.db #0xe1	; 225
      000703 E1                    2017 	.db #0xe1	; 225
      000704 E1                    2018 	.db #0xe1	; 225
      000705 E1                    2019 	.db #0xe1	; 225
      000706 E1                    2020 	.db #0xe1	; 225
      000707 E1                    2021 	.db #0xe1	; 225
      000708                       2022 _color_column_12:
      000708 41                    2023 	.db #0x41	; 65	'A'
      000709 41                    2024 	.db #0x41	; 65	'A'
      00070A 41                    2025 	.db #0x41	; 65	'A'
      00070B 41                    2026 	.db #0x41	; 65	'A'
      00070C 41                    2027 	.db #0x41	; 65	'A'
      00070D 41                    2028 	.db #0x41	; 65	'A'
      00070E 41                    2029 	.db #0x41	; 65	'A'
      00070F 41                    2030 	.db #0x41	; 65	'A'
      000710                       2031 _color_column_16:
      000710 F1                    2032 	.db #0xf1	; 241
      000711 F1                    2033 	.db #0xf1	; 241
      000712 F1                    2034 	.db #0xf1	; 241
      000713 F1                    2035 	.db #0xf1	; 241
      000714 F1                    2036 	.db #0xf1	; 241
      000715 F1                    2037 	.db #0xf1	; 241
      000716 F1                    2038 	.db #0xf1	; 241
      000717 F1                    2039 	.db #0xf1	; 241
      000718                       2040 _color_column_17:
      000718 E1                    2041 	.db #0xe1	; 225
      000719 E1                    2042 	.db #0xe1	; 225
      00071A E1                    2043 	.db #0xe1	; 225
      00071B E1                    2044 	.db #0xe1	; 225
      00071C E1                    2045 	.db #0xe1	; 225
      00071D E1                    2046 	.db #0xe1	; 225
      00071E E1                    2047 	.db #0xe1	; 225
      00071F E1                    2048 	.db #0xe1	; 225
      000720                       2049 _color_column_18:
      000720 41                    2050 	.db #0x41	; 65	'A'
      000721 41                    2051 	.db #0x41	; 65	'A'
      000722 41                    2052 	.db #0x41	; 65	'A'
      000723 41                    2053 	.db #0x41	; 65	'A'
      000724 41                    2054 	.db #0x41	; 65	'A'
      000725 E1                    2055 	.db #0xe1	; 225
      000726 E1                    2056 	.db #0xe1	; 225
      000727 E1                    2057 	.db #0xe1	; 225
      000728                       2058 _color_column_13:
      000728 E1                    2059 	.db #0xe1	; 225
      000729 E1                    2060 	.db #0xe1	; 225
      00072A E1                    2061 	.db #0xe1	; 225
      00072B E1                    2062 	.db #0xe1	; 225
      00072C E1                    2063 	.db #0xe1	; 225
      00072D E1                    2064 	.db #0xe1	; 225
      00072E E1                    2065 	.db #0xe1	; 225
      00072F F1                    2066 	.db #0xf1	; 241
      000730                       2067 _color_column_14:
      000730 E1                    2068 	.db #0xe1	; 225
      000731 E1                    2069 	.db #0xe1	; 225
      000732 E1                    2070 	.db #0xe1	; 225
      000733 E1                    2071 	.db #0xe1	; 225
      000734 E1                    2072 	.db #0xe1	; 225
      000735 E1                    2073 	.db #0xe1	; 225
      000736 E1                    2074 	.db #0xe1	; 225
      000737 F1                    2075 	.db #0xf1	; 241
      000738                       2076 _color_column_15:
      000738 E1                    2077 	.db #0xe1	; 225
      000739 E1                    2078 	.db #0xe1	; 225
      00073A E1                    2079 	.db #0xe1	; 225
      00073B E1                    2080 	.db #0xe1	; 225
      00073C E1                    2081 	.db #0xe1	; 225
      00073D E1                    2082 	.db #0xe1	; 225
      00073E E1                    2083 	.db #0xe1	; 225
      00073F F1                    2084 	.db #0xf1	; 241
      000740                       2085 _color_dust_0:
      000740 F1                    2086 	.db #0xf1	; 241
      000741 F1                    2087 	.db #0xf1	; 241
      000742 F1                    2088 	.db #0xf1	; 241
      000743 F1                    2089 	.db #0xf1	; 241
      000744 F1                    2090 	.db #0xf1	; 241
      000745 F1                    2091 	.db #0xf1	; 241
      000746 F1                    2092 	.db #0xf1	; 241
      000747 F1                    2093 	.db #0xf1	; 241
      000748                       2094 _color_dust_1:
      000748 F1                    2095 	.db #0xf1	; 241
      000749 F1                    2096 	.db #0xf1	; 241
      00074A F1                    2097 	.db #0xf1	; 241
      00074B F1                    2098 	.db #0xf1	; 241
      00074C F1                    2099 	.db #0xf1	; 241
      00074D F1                    2100 	.db #0xf1	; 241
      00074E F1                    2101 	.db #0xf1	; 241
      00074F F1                    2102 	.db #0xf1	; 241
      000750                       2103 _color_dust_2:
      000750 F1                    2104 	.db #0xf1	; 241
      000751 F1                    2105 	.db #0xf1	; 241
      000752 F1                    2106 	.db #0xf1	; 241
      000753 F1                    2107 	.db #0xf1	; 241
      000754 F1                    2108 	.db #0xf1	; 241
      000755 F1                    2109 	.db #0xf1	; 241
      000756 F1                    2110 	.db #0xf1	; 241
      000757 F1                    2111 	.db #0xf1	; 241
      000758                       2112 _color_dust_3:
      000758 F1                    2113 	.db #0xf1	; 241
      000759 F1                    2114 	.db #0xf1	; 241
      00075A F1                    2115 	.db #0xf1	; 241
      00075B F1                    2116 	.db #0xf1	; 241
      00075C F1                    2117 	.db #0xf1	; 241
      00075D F1                    2118 	.db #0xf1	; 241
      00075E F1                    2119 	.db #0xf1	; 241
      00075F F1                    2120 	.db #0xf1	; 241
      000760                       2121 _color_font_1:
      000760 F1                    2122 	.db #0xf1	; 241
      000761 F1                    2123 	.db #0xf1	; 241
      000762 E1                    2124 	.db #0xe1	; 225
      000763 71                    2125 	.db #0x71	; 113	'q'
      000764 71                    2126 	.db #0x71	; 113	'q'
      000765 51                    2127 	.db #0x51	; 81	'Q'
      000766 51                    2128 	.db #0x51	; 81	'Q'
      000767 41                    2129 	.db #0x41	; 65	'A'
      000768                       2130 _color_font_2:
      000768 61                    2131 	.db #0x61	; 97	'a'
      000769 61                    2132 	.db #0x61	; 97	'a'
      00076A 81                    2133 	.db #0x81	; 129
      00076B 81                    2134 	.db #0x81	; 129
      00076C 91                    2135 	.db #0x91	; 145
      00076D 91                    2136 	.db #0x91	; 145
      00076E E1                    2137 	.db #0xe1	; 225
      00076F E1                    2138 	.db #0xe1	; 225
      000770                       2139 _color_title_1:
      000770 A1                    2140 	.db #0xa1	; 161
      000771 A1                    2141 	.db #0xa1	; 161
      000772 A1                    2142 	.db #0xa1	; 161
      000773 A1                    2143 	.db #0xa1	; 161
      000774 A1                    2144 	.db #0xa1	; 161
      000775 A1                    2145 	.db #0xa1	; 161
      000776 A1                    2146 	.db #0xa1	; 161
      000777 A1                    2147 	.db #0xa1	; 161
      000778                       2148 _color_title_2:
      000778 B1                    2149 	.db #0xb1	; 177
      000779 B1                    2150 	.db #0xb1	; 177
      00077A B1                    2151 	.db #0xb1	; 177
      00077B B1                    2152 	.db #0xb1	; 177
      00077C B1                    2153 	.db #0xb1	; 177
      00077D B1                    2154 	.db #0xb1	; 177
      00077E B1                    2155 	.db #0xb1	; 177
      00077F B1                    2156 	.db #0xb1	; 177
      000780                       2157 _color_title_3:
      000780 D1                    2158 	.db #0xd1	; 209
      000781 D1                    2159 	.db #0xd1	; 209
      000782 D1                    2160 	.db #0xd1	; 209
      000783 D1                    2161 	.db #0xd1	; 209
      000784 D1                    2162 	.db #0xd1	; 209
      000785 D1                    2163 	.db #0xd1	; 209
      000786 D1                    2164 	.db #0xd1	; 209
      000787 D1                    2165 	.db #0xd1	; 209
      000788                       2166 _color_title_4:
      000788 F1                    2167 	.db #0xf1	; 241
      000789 F1                    2168 	.db #0xf1	; 241
      00078A F1                    2169 	.db #0xf1	; 241
      00078B F1                    2170 	.db #0xf1	; 241
      00078C F1                    2171 	.db #0xf1	; 241
      00078D F1                    2172 	.db #0xf1	; 241
      00078E F1                    2173 	.db #0xf1	; 241
      00078F F1                    2174 	.db #0xf1	; 241
      000790                       2175 _color_title_5:
      000790 71                    2176 	.db #0x71	; 113	'q'
      000791 71                    2177 	.db #0x71	; 113	'q'
      000792 71                    2178 	.db #0x71	; 113	'q'
      000793 71                    2179 	.db #0x71	; 113	'q'
      000794 71                    2180 	.db #0x71	; 113	'q'
      000795 71                    2181 	.db #0x71	; 113	'q'
      000796 71                    2182 	.db #0x71	; 113	'q'
      000797 71                    2183 	.db #0x71	; 113	'q'
      000798                       2184 _color_title_6:
      000798 51                    2185 	.db #0x51	; 81	'Q'
      000799 51                    2186 	.db #0x51	; 81	'Q'
      00079A 51                    2187 	.db #0x51	; 81	'Q'
      00079B 51                    2188 	.db #0x51	; 81	'Q'
      00079C 51                    2189 	.db #0x51	; 81	'Q'
      00079D 51                    2190 	.db #0x51	; 81	'Q'
      00079E 51                    2191 	.db #0x51	; 81	'Q'
      00079F 51                    2192 	.db #0x51	; 81	'Q'
      0007A0                       2193 _color_title_7:
      0007A0 41                    2194 	.db #0x41	; 65	'A'
      0007A1 41                    2195 	.db #0x41	; 65	'A'
      0007A2 41                    2196 	.db #0x41	; 65	'A'
      0007A3 41                    2197 	.db #0x41	; 65	'A'
      0007A4 41                    2198 	.db #0x41	; 65	'A'
      0007A5 41                    2199 	.db #0x41	; 65	'A'
      0007A6 41                    2200 	.db #0x41	; 65	'A'
      0007A7 41                    2201 	.db #0x41	; 65	'A'
      0007A8                       2202 _sprite_arrow_0:
      0007A8 00                    2203 	.db #0x00	; 0
      0007A9 00                    2204 	.db #0x00	; 0
      0007AA 00                    2205 	.db #0x00	; 0
      0007AB 00                    2206 	.db #0x00	; 0
      0007AC 00                    2207 	.db #0x00	; 0
      0007AD 00                    2208 	.db #0x00	; 0
      0007AE 00                    2209 	.db #0x00	; 0
      0007AF 00                    2210 	.db #0x00	; 0
      0007B0                       2211 _sprite_arrow_1:
      0007B0 FF                    2212 	.db #0xff	; 255
      0007B1 00                    2213 	.db #0x00	; 0
      0007B2 3F                    2214 	.db #0x3f	; 63
      0007B3 00                    2215 	.db #0x00	; 0
      0007B4 0F                    2216 	.db #0x0f	; 15
      0007B5 00                    2217 	.db #0x00	; 0
      0007B6 03                    2218 	.db #0x03	; 3
      0007B7 00                    2219 	.db #0x00	; 0
      0007B8                       2220 _sprite_arrow_2:
      0007B8 00                    2221 	.db #0x00	; 0
      0007B9 00                    2222 	.db #0x00	; 0
      0007BA 00                    2223 	.db #0x00	; 0
      0007BB 00                    2224 	.db #0x00	; 0
      0007BC 00                    2225 	.db #0x00	; 0
      0007BD 00                    2226 	.db #0x00	; 0
      0007BE 00                    2227 	.db #0x00	; 0
      0007BF 00                    2228 	.db #0x00	; 0
      0007C0                       2229 _sprite_arrow_3:
      0007C0 FF                    2230 	.db #0xff	; 255
      0007C1 00                    2231 	.db #0x00	; 0
      0007C2 FC                    2232 	.db #0xfc	; 252
      0007C3 00                    2233 	.db #0x00	; 0
      0007C4 F0                    2234 	.db #0xf0	; 240
      0007C5 00                    2235 	.db #0x00	; 0
      0007C6 C0                    2236 	.db #0xc0	; 192
      0007C7 00                    2237 	.db #0x00	; 0
      0007C8                       2238 _sprite_hit_1:
      0007C8 00                    2239 	.db #0x00	; 0
      0007C9 77                    2240 	.db #0x77	; 119	'w'
      0007CA 22                    2241 	.db #0x22	; 34
      0007CB 22                    2242 	.db #0x22	; 34
      0007CC 22                    2243 	.db #0x22	; 34
      0007CD 3E                    2244 	.db #0x3e	; 62
      0007CE 22                    2245 	.db #0x22	; 34
      0007CF 22                    2246 	.db #0x22	; 34
      0007D0 22                    2247 	.db #0x22	; 34
      0007D1 77                    2248 	.db #0x77	; 119	'w'
      0007D2 00                    2249 	.db #0x00	; 0
      0007D3 00                    2250 	.db #0x00	; 0
      0007D4 00                    2251 	.db #0x00	; 0
      0007D5 00                    2252 	.db #0x00	; 0
      0007D6 00                    2253 	.db #0x00	; 0
      0007D7 00                    2254 	.db #0x00	; 0
      0007D8 00                    2255 	.db #0x00	; 0
      0007D9 77                    2256 	.db #0x77	; 119	'w'
      0007DA 25                    2257 	.db #0x25	; 37
      0007DB 21                    2258 	.db #0x21	; 33
      0007DC 21                    2259 	.db #0x21	; 33
      0007DD 21                    2260 	.db #0x21	; 33
      0007DE 21                    2261 	.db #0x21	; 33
      0007DF 21                    2262 	.db #0x21	; 33
      0007E0 21                    2263 	.db #0x21	; 33
      0007E1 73                    2264 	.db #0x73	; 115	's'
      0007E2 00                    2265 	.db #0x00	; 0
      0007E3 00                    2266 	.db #0x00	; 0
      0007E4 00                    2267 	.db #0x00	; 0
      0007E5 00                    2268 	.db #0x00	; 0
      0007E6 00                    2269 	.db #0x00	; 0
      0007E7 00                    2270 	.db #0x00	; 0
      0007E8                       2271 _sprite_hit_2:
      0007E8 00                    2272 	.db #0x00	; 0
      0007E9 C0                    2273 	.db #0xc0	; 192
      0007EA 40                    2274 	.db #0x40	; 64
      0007EB 00                    2275 	.db #0x00	; 0
      0007EC 00                    2276 	.db #0x00	; 0
      0007ED 00                    2277 	.db #0x00	; 0
      0007EE 00                    2278 	.db #0x00	; 0
      0007EF 00                    2279 	.db #0x00	; 0
      0007F0 00                    2280 	.db #0x00	; 0
      0007F1 80                    2281 	.db #0x80	; 128
      0007F2 00                    2282 	.db #0x00	; 0
      0007F3 00                    2283 	.db #0x00	; 0
      0007F4 00                    2284 	.db #0x00	; 0
      0007F5 00                    2285 	.db #0x00	; 0
      0007F6 00                    2286 	.db #0x00	; 0
      0007F7 00                    2287 	.db #0x00	; 0
      0007F8 00                    2288 	.db #0x00	; 0
      0007F9 00                    2289 	.db #0x00	; 0
      0007FA 00                    2290 	.db #0x00	; 0
      0007FB 00                    2291 	.db #0x00	; 0
      0007FC 00                    2292 	.db #0x00	; 0
      0007FD 00                    2293 	.db #0x00	; 0
      0007FE 00                    2294 	.db #0x00	; 0
      0007FF 00                    2295 	.db #0x00	; 0
      000800 00                    2296 	.db #0x00	; 0
      000801 00                    2297 	.db #0x00	; 0
      000802 00                    2298 	.db #0x00	; 0
      000803 00                    2299 	.db #0x00	; 0
      000804 00                    2300 	.db #0x00	; 0
      000805 00                    2301 	.db #0x00	; 0
      000806 00                    2302 	.db #0x00	; 0
      000807 00                    2303 	.db #0x00	; 0
      000808                       2304 _sprite_combo_1:
      000808 00                    2305 	.db #0x00	; 0
      000809 38                    2306 	.db #0x38	; 56	'8'
      00080A 65                    2307 	.db #0x65	; 101	'e'
      00080B 61                    2308 	.db #0x61	; 97	'a'
      00080C 61                    2309 	.db #0x61	; 97	'a'
      00080D 61                    2310 	.db #0x61	; 97	'a'
      00080E 61                    2311 	.db #0x61	; 97	'a'
      00080F 61                    2312 	.db #0x61	; 97	'a'
      000810 65                    2313 	.db #0x65	; 101	'e'
      000811 38                    2314 	.db #0x38	; 56	'8'
      000812 00                    2315 	.db #0x00	; 0
      000813 00                    2316 	.db #0x00	; 0
      000814 00                    2317 	.db #0x00	; 0
      000815 00                    2318 	.db #0x00	; 0
      000816 00                    2319 	.db #0x00	; 0
      000817 00                    2320 	.db #0x00	; 0
      000818 00                    2321 	.db #0x00	; 0
      000819 E6                    2322 	.db #0xe6	; 230
      00081A 13                    2323 	.db #0x13	; 19
      00081B 12                    2324 	.db #0x12	; 18
      00081C 12                    2325 	.db #0x12	; 18
      00081D 12                    2326 	.db #0x12	; 18
      00081E 12                    2327 	.db #0x12	; 18
      00081F 12                    2328 	.db #0x12	; 18
      000820 12                    2329 	.db #0x12	; 18
      000821 E7                    2330 	.db #0xe7	; 231
      000822 00                    2331 	.db #0x00	; 0
      000823 00                    2332 	.db #0x00	; 0
      000824 00                    2333 	.db #0x00	; 0
      000825 00                    2334 	.db #0x00	; 0
      000826 00                    2335 	.db #0x00	; 0
      000827 00                    2336 	.db #0x00	; 0
      000828                       2337 _sprite_combo_2:
      000828 00                    2338 	.db #0x00	; 0
      000829 37                    2339 	.db #0x37	; 55	'7'
      00082A 62                    2340 	.db #0x62	; 98	'b'
      00082B A2                    2341 	.db #0xa2	; 162
      00082C 22                    2342 	.db #0x22	; 34
      00082D 23                    2343 	.db #0x23	; 35
      00082E 22                    2344 	.db #0x22	; 34
      00082F 22                    2345 	.db #0x22	; 34
      000830 22                    2346 	.db #0x22	; 34
      000831 77                    2347 	.db #0x77	; 119	'w'
      000832 00                    2348 	.db #0x00	; 0
      000833 00                    2349 	.db #0x00	; 0
      000834 00                    2350 	.db #0x00	; 0
      000835 00                    2351 	.db #0x00	; 0
      000836 00                    2352 	.db #0x00	; 0
      000837 00                    2353 	.db #0x00	; 0
      000838 00                    2354 	.db #0x00	; 0
      000839 8E                    2355 	.db #0x8e	; 142
      00083A 51                    2356 	.db #0x51	; 81	'Q'
      00083B 51                    2357 	.db #0x51	; 81	'Q'
      00083C 51                    2358 	.db #0x51	; 81	'Q'
      00083D 91                    2359 	.db #0x91	; 145
      00083E 51                    2360 	.db #0x51	; 81	'Q'
      00083F 51                    2361 	.db #0x51	; 81	'Q'
      000840 51                    2362 	.db #0x51	; 81	'Q'
      000841 8E                    2363 	.db #0x8e	; 142
      000842 00                    2364 	.db #0x00	; 0
      000843 00                    2365 	.db #0x00	; 0
      000844 00                    2366 	.db #0x00	; 0
      000845 00                    2367 	.db #0x00	; 0
      000846 00                    2368 	.db #0x00	; 0
      000847 00                    2369 	.db #0x00	; 0
      000848                       2370 _sprite_2x:
      000848 00                    2371 	.db #0x00	; 0
      000849 3E                    2372 	.db #0x3e	; 62
      00084A 63                    2373 	.db #0x63	; 99	'c'
      00084B 03                    2374 	.db #0x03	; 3
      00084C 03                    2375 	.db #0x03	; 3
      00084D 1E                    2376 	.db #0x1e	; 30
      00084E 30                    2377 	.db #0x30	; 48	'0'
      00084F 60                    2378 	.db #0x60	; 96
      000850 60                    2379 	.db #0x60	; 96
      000851 7F                    2380 	.db #0x7f	; 127
      000852 00                    2381 	.db #0x00	; 0
      000853 00                    2382 	.db #0x00	; 0
      000854 00                    2383 	.db #0x00	; 0
      000855 00                    2384 	.db #0x00	; 0
      000856 00                    2385 	.db #0x00	; 0
      000857 00                    2386 	.db #0x00	; 0
      000858 00                    2387 	.db #0x00	; 0
      000859 00                    2388 	.db #0x00	; 0
      00085A 00                    2389 	.db #0x00	; 0
      00085B 63                    2390 	.db #0x63	; 99	'c'
      00085C 36                    2391 	.db #0x36	; 54	'6'
      00085D 1C                    2392 	.db #0x1c	; 28
      00085E 08                    2393 	.db #0x08	; 8
      00085F 1C                    2394 	.db #0x1c	; 28
      000860 36                    2395 	.db #0x36	; 54	'6'
      000861 63                    2396 	.db #0x63	; 99	'c'
      000862 00                    2397 	.db #0x00	; 0
      000863 00                    2398 	.db #0x00	; 0
      000864 00                    2399 	.db #0x00	; 0
      000865 00                    2400 	.db #0x00	; 0
      000866 00                    2401 	.db #0x00	; 0
      000867 00                    2402 	.db #0x00	; 0
      000868                       2403 _sprite_3x:
      000868 00                    2404 	.db #0x00	; 0
      000869 3E                    2405 	.db #0x3e	; 62
      00086A 63                    2406 	.db #0x63	; 99	'c'
      00086B 03                    2407 	.db #0x03	; 3
      00086C 03                    2408 	.db #0x03	; 3
      00086D 1E                    2409 	.db #0x1e	; 30
      00086E 03                    2410 	.db #0x03	; 3
      00086F 03                    2411 	.db #0x03	; 3
      000870 63                    2412 	.db #0x63	; 99	'c'
      000871 3E                    2413 	.db #0x3e	; 62
      000872 00                    2414 	.db #0x00	; 0
      000873 00                    2415 	.db #0x00	; 0
      000874 00                    2416 	.db #0x00	; 0
      000875 00                    2417 	.db #0x00	; 0
      000876 00                    2418 	.db #0x00	; 0
      000877 00                    2419 	.db #0x00	; 0
      000878 00                    2420 	.db #0x00	; 0
      000879 00                    2421 	.db #0x00	; 0
      00087A 00                    2422 	.db #0x00	; 0
      00087B 63                    2423 	.db #0x63	; 99	'c'
      00087C 36                    2424 	.db #0x36	; 54	'6'
      00087D 1C                    2425 	.db #0x1c	; 28
      00087E 08                    2426 	.db #0x08	; 8
      00087F 1C                    2427 	.db #0x1c	; 28
      000880 36                    2428 	.db #0x36	; 54	'6'
      000881 63                    2429 	.db #0x63	; 99	'c'
      000882 00                    2430 	.db #0x00	; 0
      000883 00                    2431 	.db #0x00	; 0
      000884 00                    2432 	.db #0x00	; 0
      000885 00                    2433 	.db #0x00	; 0
      000886 00                    2434 	.db #0x00	; 0
      000887 00                    2435 	.db #0x00	; 0
      000888                       2436 _sprite_4x:
      000888 00                    2437 	.db #0x00	; 0
      000889 02                    2438 	.db #0x02	; 2
      00088A 06                    2439 	.db #0x06	; 6
      00088B 0E                    2440 	.db #0x0e	; 14
      00088C 16                    2441 	.db #0x16	; 22
      00088D 26                    2442 	.db #0x26	; 38
      00088E 7F                    2443 	.db #0x7f	; 127
      00088F 06                    2444 	.db #0x06	; 6
      000890 06                    2445 	.db #0x06	; 6
      000891 0F                    2446 	.db #0x0f	; 15
      000892 00                    2447 	.db #0x00	; 0
      000893 00                    2448 	.db #0x00	; 0
      000894 00                    2449 	.db #0x00	; 0
      000895 00                    2450 	.db #0x00	; 0
      000896 00                    2451 	.db #0x00	; 0
      000897 00                    2452 	.db #0x00	; 0
      000898 00                    2453 	.db #0x00	; 0
      000899 00                    2454 	.db #0x00	; 0
      00089A 00                    2455 	.db #0x00	; 0
      00089B 63                    2456 	.db #0x63	; 99	'c'
      00089C 36                    2457 	.db #0x36	; 54	'6'
      00089D 1C                    2458 	.db #0x1c	; 28
      00089E 08                    2459 	.db #0x08	; 8
      00089F 1C                    2460 	.db #0x1c	; 28
      0008A0 36                    2461 	.db #0x36	; 54	'6'
      0008A1 63                    2462 	.db #0x63	; 99	'c'
      0008A2 00                    2463 	.db #0x00	; 0
      0008A3 00                    2464 	.db #0x00	; 0
      0008A4 00                    2465 	.db #0x00	; 0
      0008A5 00                    2466 	.db #0x00	; 0
      0008A6 00                    2467 	.db #0x00	; 0
      0008A7 00                    2468 	.db #0x00	; 0
      0008A8                       2469 _sprite_5x:
      0008A8 00                    2470 	.db #0x00	; 0
      0008A9 7E                    2471 	.db #0x7e	; 126
      0008AA 60                    2472 	.db #0x60	; 96
      0008AB 60                    2473 	.db #0x60	; 96
      0008AC 7E                    2474 	.db #0x7e	; 126
      0008AD 03                    2475 	.db #0x03	; 3
      0008AE 03                    2476 	.db #0x03	; 3
      0008AF 03                    2477 	.db #0x03	; 3
      0008B0 63                    2478 	.db #0x63	; 99	'c'
      0008B1 3E                    2479 	.db #0x3e	; 62
      0008B2 00                    2480 	.db #0x00	; 0
      0008B3 00                    2481 	.db #0x00	; 0
      0008B4 00                    2482 	.db #0x00	; 0
      0008B5 00                    2483 	.db #0x00	; 0
      0008B6 00                    2484 	.db #0x00	; 0
      0008B7 00                    2485 	.db #0x00	; 0
      0008B8 00                    2486 	.db #0x00	; 0
      0008B9 00                    2487 	.db #0x00	; 0
      0008BA 00                    2488 	.db #0x00	; 0
      0008BB 63                    2489 	.db #0x63	; 99	'c'
      0008BC 36                    2490 	.db #0x36	; 54	'6'
      0008BD 1C                    2491 	.db #0x1c	; 28
      0008BE 08                    2492 	.db #0x08	; 8
      0008BF 1C                    2493 	.db #0x1c	; 28
      0008C0 36                    2494 	.db #0x36	; 54	'6'
      0008C1 63                    2495 	.db #0x63	; 99	'c'
      0008C2 00                    2496 	.db #0x00	; 0
      0008C3 00                    2497 	.db #0x00	; 0
      0008C4 00                    2498 	.db #0x00	; 0
      0008C5 00                    2499 	.db #0x00	; 0
      0008C6 00                    2500 	.db #0x00	; 0
      0008C7 00                    2501 	.db #0x00	; 0
      0008C8                       2502 _sprite_6x:
      0008C8 00                    2503 	.db #0x00	; 0
      0008C9 3E                    2504 	.db #0x3e	; 62
      0008CA 61                    2505 	.db #0x61	; 97	'a'
      0008CB 60                    2506 	.db #0x60	; 96
      0008CC 7E                    2507 	.db #0x7e	; 126
      0008CD 63                    2508 	.db #0x63	; 99	'c'
      0008CE 63                    2509 	.db #0x63	; 99	'c'
      0008CF 63                    2510 	.db #0x63	; 99	'c'
      0008D0 63                    2511 	.db #0x63	; 99	'c'
      0008D1 3E                    2512 	.db #0x3e	; 62
      0008D2 00                    2513 	.db #0x00	; 0
      0008D3 00                    2514 	.db #0x00	; 0
      0008D4 00                    2515 	.db #0x00	; 0
      0008D5 00                    2516 	.db #0x00	; 0
      0008D6 00                    2517 	.db #0x00	; 0
      0008D7 00                    2518 	.db #0x00	; 0
      0008D8 00                    2519 	.db #0x00	; 0
      0008D9 00                    2520 	.db #0x00	; 0
      0008DA 00                    2521 	.db #0x00	; 0
      0008DB 63                    2522 	.db #0x63	; 99	'c'
      0008DC 36                    2523 	.db #0x36	; 54	'6'
      0008DD 1C                    2524 	.db #0x1c	; 28
      0008DE 08                    2525 	.db #0x08	; 8
      0008DF 1C                    2526 	.db #0x1c	; 28
      0008E0 36                    2527 	.db #0x36	; 54	'6'
      0008E1 63                    2528 	.db #0x63	; 99	'c'
      0008E2 00                    2529 	.db #0x00	; 0
      0008E3 00                    2530 	.db #0x00	; 0
      0008E4 00                    2531 	.db #0x00	; 0
      0008E5 00                    2532 	.db #0x00	; 0
      0008E6 00                    2533 	.db #0x00	; 0
      0008E7 00                    2534 	.db #0x00	; 0
      0008E8                       2535 _sprite_mega_hit:
      0008E8 04                    2536 	.db #0x04	; 4
      0008E9 06                    2537 	.db #0x06	; 6
      0008EA 05                    2538 	.db #0x05	; 5
      0008EB 04                    2539 	.db #0x04	; 4
      0008EC 04                    2540 	.db #0x04	; 4
      0008ED 00                    2541 	.db #0x00	; 0
      0008EE 03                    2542 	.db #0x03	; 3
      0008EF 04                    2543 	.db #0x04	; 4
      0008F0 05                    2544 	.db #0x05	; 5
      0008F1 04                    2545 	.db #0x04	; 4
      0008F2 03                    2546 	.db #0x03	; 3
      0008F3 00                    2547 	.db #0x00	; 0
      0008F4 00                    2548 	.db #0x00	; 0
      0008F5 00                    2549 	.db #0x00	; 0
      0008F6 00                    2550 	.db #0x00	; 0
      0008F7 00                    2551 	.db #0x00	; 0
      0008F8 5C                    2552 	.db #0x5c	; 92
      0008F9 D0                    2553 	.db #0xd0	; 208
      0008FA 5C                    2554 	.db #0x5c	; 92
      0008FB 50                    2555 	.db #0x50	; 80	'P'
      0008FC 5C                    2556 	.db #0x5c	; 92
      0008FD 00                    2557 	.db #0x00	; 0
      0008FE 98                    2558 	.db #0x98	; 152
      0008FF 24                    2559 	.db #0x24	; 36
      000900 A4                    2560 	.db #0xa4	; 164
      000901 BC                    2561 	.db #0xbc	; 188
      000902 A4                    2562 	.db #0xa4	; 164
      000903 00                    2563 	.db #0x00	; 0
      000904 00                    2564 	.db #0x00	; 0
      000905 00                    2565 	.db #0x00	; 0
      000906 00                    2566 	.db #0x00	; 0
      000907 00                    2567 	.db #0x00	; 0
      000908                       2568 _sprite_explosion_0:
      000908 00                    2569 	.db #0x00	; 0
      000909 00                    2570 	.db #0x00	; 0
      00090A 00                    2571 	.db #0x00	; 0
      00090B 00                    2572 	.db #0x00	; 0
      00090C 00                    2573 	.db #0x00	; 0
      00090D 00                    2574 	.db #0x00	; 0
      00090E 01                    2575 	.db #0x01	; 1
      00090F 02                    2576 	.db #0x02	; 2
      000910 01                    2577 	.db #0x01	; 1
      000911 00                    2578 	.db #0x00	; 0
      000912 00                    2579 	.db #0x00	; 0
      000913 00                    2580 	.db #0x00	; 0
      000914 00                    2581 	.db #0x00	; 0
      000915 00                    2582 	.db #0x00	; 0
      000916 00                    2583 	.db #0x00	; 0
      000917 00                    2584 	.db #0x00	; 0
      000918 00                    2585 	.db #0x00	; 0
      000919 00                    2586 	.db #0x00	; 0
      00091A 00                    2587 	.db #0x00	; 0
      00091B 00                    2588 	.db #0x00	; 0
      00091C 00                    2589 	.db #0x00	; 0
      00091D 00                    2590 	.db #0x00	; 0
      00091E 00                    2591 	.db #0x00	; 0
      00091F 80                    2592 	.db #0x80	; 128
      000920 00                    2593 	.db #0x00	; 0
      000921 00                    2594 	.db #0x00	; 0
      000922 00                    2595 	.db #0x00	; 0
      000923 00                    2596 	.db #0x00	; 0
      000924 00                    2597 	.db #0x00	; 0
      000925 00                    2598 	.db #0x00	; 0
      000926 00                    2599 	.db #0x00	; 0
      000927 00                    2600 	.db #0x00	; 0
      000928                       2601 _sprite_explosion_1:
      000928 00                    2602 	.db #0x00	; 0
      000929 00                    2603 	.db #0x00	; 0
      00092A 00                    2604 	.db #0x00	; 0
      00092B 00                    2605 	.db #0x00	; 0
      00092C 00                    2606 	.db #0x00	; 0
      00092D 01                    2607 	.db #0x01	; 1
      00092E 00                    2608 	.db #0x00	; 0
      00092F 04                    2609 	.db #0x04	; 4
      000930 00                    2610 	.db #0x00	; 0
      000931 01                    2611 	.db #0x01	; 1
      000932 00                    2612 	.db #0x00	; 0
      000933 00                    2613 	.db #0x00	; 0
      000934 00                    2614 	.db #0x00	; 0
      000935 00                    2615 	.db #0x00	; 0
      000936 00                    2616 	.db #0x00	; 0
      000937 00                    2617 	.db #0x00	; 0
      000938 00                    2618 	.db #0x00	; 0
      000939 00                    2619 	.db #0x00	; 0
      00093A 00                    2620 	.db #0x00	; 0
      00093B 00                    2621 	.db #0x00	; 0
      00093C 00                    2622 	.db #0x00	; 0
      00093D 00                    2623 	.db #0x00	; 0
      00093E 00                    2624 	.db #0x00	; 0
      00093F 40                    2625 	.db #0x40	; 64
      000940 00                    2626 	.db #0x00	; 0
      000941 00                    2627 	.db #0x00	; 0
      000942 00                    2628 	.db #0x00	; 0
      000943 00                    2629 	.db #0x00	; 0
      000944 00                    2630 	.db #0x00	; 0
      000945 00                    2631 	.db #0x00	; 0
      000946 00                    2632 	.db #0x00	; 0
      000947 00                    2633 	.db #0x00	; 0
      000948                       2634 _sprite_explosion_2:
      000948 00                    2635 	.db #0x00	; 0
      000949 00                    2636 	.db #0x00	; 0
      00094A 00                    2637 	.db #0x00	; 0
      00094B 00                    2638 	.db #0x00	; 0
      00094C 01                    2639 	.db #0x01	; 1
      00094D 04                    2640 	.db #0x04	; 4
      00094E 00                    2641 	.db #0x00	; 0
      00094F 08                    2642 	.db #0x08	; 8
      000950 00                    2643 	.db #0x00	; 0
      000951 04                    2644 	.db #0x04	; 4
      000952 01                    2645 	.db #0x01	; 1
      000953 00                    2646 	.db #0x00	; 0
      000954 00                    2647 	.db #0x00	; 0
      000955 00                    2648 	.db #0x00	; 0
      000956 00                    2649 	.db #0x00	; 0
      000957 00                    2650 	.db #0x00	; 0
      000958 00                    2651 	.db #0x00	; 0
      000959 00                    2652 	.db #0x00	; 0
      00095A 00                    2653 	.db #0x00	; 0
      00095B 00                    2654 	.db #0x00	; 0
      00095C 00                    2655 	.db #0x00	; 0
      00095D 40                    2656 	.db #0x40	; 64
      00095E 00                    2657 	.db #0x00	; 0
      00095F 20                    2658 	.db #0x20	; 32
      000960 00                    2659 	.db #0x00	; 0
      000961 40                    2660 	.db #0x40	; 64
      000962 00                    2661 	.db #0x00	; 0
      000963 00                    2662 	.db #0x00	; 0
      000964 00                    2663 	.db #0x00	; 0
      000965 00                    2664 	.db #0x00	; 0
      000966 00                    2665 	.db #0x00	; 0
      000967 00                    2666 	.db #0x00	; 0
      000968                       2667 _sprite_explosion_3:
      000968 00                    2668 	.db #0x00	; 0
      000969 00                    2669 	.db #0x00	; 0
      00096A 00                    2670 	.db #0x00	; 0
      00096B 01                    2671 	.db #0x01	; 1
      00096C 08                    2672 	.db #0x08	; 8
      00096D 00                    2673 	.db #0x00	; 0
      00096E 00                    2674 	.db #0x00	; 0
      00096F 10                    2675 	.db #0x10	; 16
      000970 00                    2676 	.db #0x00	; 0
      000971 00                    2677 	.db #0x00	; 0
      000972 08                    2678 	.db #0x08	; 8
      000973 01                    2679 	.db #0x01	; 1
      000974 00                    2680 	.db #0x00	; 0
      000975 00                    2681 	.db #0x00	; 0
      000976 00                    2682 	.db #0x00	; 0
      000977 00                    2683 	.db #0x00	; 0
      000978 00                    2684 	.db #0x00	; 0
      000979 00                    2685 	.db #0x00	; 0
      00097A 00                    2686 	.db #0x00	; 0
      00097B 00                    2687 	.db #0x00	; 0
      00097C 20                    2688 	.db #0x20	; 32
      00097D 00                    2689 	.db #0x00	; 0
      00097E 00                    2690 	.db #0x00	; 0
      00097F 10                    2691 	.db #0x10	; 16
      000980 00                    2692 	.db #0x00	; 0
      000981 00                    2693 	.db #0x00	; 0
      000982 20                    2694 	.db #0x20	; 32
      000983 00                    2695 	.db #0x00	; 0
      000984 00                    2696 	.db #0x00	; 0
      000985 00                    2697 	.db #0x00	; 0
      000986 00                    2698 	.db #0x00	; 0
      000987 00                    2699 	.db #0x00	; 0
      000988                       2700 _sprite_explosion_4:
      000988 00                    2701 	.db #0x00	; 0
      000989 00                    2702 	.db #0x00	; 0
      00098A 01                    2703 	.db #0x01	; 1
      00098B 10                    2704 	.db #0x10	; 16
      00098C 00                    2705 	.db #0x00	; 0
      00098D 00                    2706 	.db #0x00	; 0
      00098E 00                    2707 	.db #0x00	; 0
      00098F 20                    2708 	.db #0x20	; 32
      000990 00                    2709 	.db #0x00	; 0
      000991 00                    2710 	.db #0x00	; 0
      000992 00                    2711 	.db #0x00	; 0
      000993 10                    2712 	.db #0x10	; 16
      000994 01                    2713 	.db #0x01	; 1
      000995 00                    2714 	.db #0x00	; 0
      000996 00                    2715 	.db #0x00	; 0
      000997 00                    2716 	.db #0x00	; 0
      000998 00                    2717 	.db #0x00	; 0
      000999 00                    2718 	.db #0x00	; 0
      00099A 00                    2719 	.db #0x00	; 0
      00099B 10                    2720 	.db #0x10	; 16
      00099C 00                    2721 	.db #0x00	; 0
      00099D 00                    2722 	.db #0x00	; 0
      00099E 00                    2723 	.db #0x00	; 0
      00099F 08                    2724 	.db #0x08	; 8
      0009A0 00                    2725 	.db #0x00	; 0
      0009A1 00                    2726 	.db #0x00	; 0
      0009A2 00                    2727 	.db #0x00	; 0
      0009A3 10                    2728 	.db #0x10	; 16
      0009A4 00                    2729 	.db #0x00	; 0
      0009A5 00                    2730 	.db #0x00	; 0
      0009A6 00                    2731 	.db #0x00	; 0
      0009A7 00                    2732 	.db #0x00	; 0
      0009A8                       2733 _sprite_explosion_5:
      0009A8 01                    2734 	.db #0x01	; 1
      0009A9 00                    2735 	.db #0x00	; 0
      0009AA 20                    2736 	.db #0x20	; 32
      0009AB 00                    2737 	.db #0x00	; 0
      0009AC 00                    2738 	.db #0x00	; 0
      0009AD 00                    2739 	.db #0x00	; 0
      0009AE 00                    2740 	.db #0x00	; 0
      0009AF 80                    2741 	.db #0x80	; 128
      0009B0 00                    2742 	.db #0x00	; 0
      0009B1 00                    2743 	.db #0x00	; 0
      0009B2 00                    2744 	.db #0x00	; 0
      0009B3 00                    2745 	.db #0x00	; 0
      0009B4 20                    2746 	.db #0x20	; 32
      0009B5 00                    2747 	.db #0x00	; 0
      0009B6 01                    2748 	.db #0x01	; 1
      0009B7 00                    2749 	.db #0x00	; 0
      0009B8 00                    2750 	.db #0x00	; 0
      0009B9 00                    2751 	.db #0x00	; 0
      0009BA 08                    2752 	.db #0x08	; 8
      0009BB 00                    2753 	.db #0x00	; 0
      0009BC 00                    2754 	.db #0x00	; 0
      0009BD 00                    2755 	.db #0x00	; 0
      0009BE 00                    2756 	.db #0x00	; 0
      0009BF 02                    2757 	.db #0x02	; 2
      0009C0 00                    2758 	.db #0x00	; 0
      0009C1 00                    2759 	.db #0x00	; 0
      0009C2 00                    2760 	.db #0x00	; 0
      0009C3 00                    2761 	.db #0x00	; 0
      0009C4 08                    2762 	.db #0x08	; 8
      0009C5 00                    2763 	.db #0x00	; 0
      0009C6 00                    2764 	.db #0x00	; 0
      0009C7 00                    2765 	.db #0x00	; 0
      0009C8                       2766 _sprite_explosion_6:
      0009C8 00                    2767 	.db #0x00	; 0
      0009C9 01                    2768 	.db #0x01	; 1
      0009CA 00                    2769 	.db #0x00	; 0
      0009CB 20                    2770 	.db #0x20	; 32
      0009CC 00                    2771 	.db #0x00	; 0
      0009CD 00                    2772 	.db #0x00	; 0
      0009CE 00                    2773 	.db #0x00	; 0
      0009CF 00                    2774 	.db #0x00	; 0
      0009D0 80                    2775 	.db #0x80	; 128
      0009D1 00                    2776 	.db #0x00	; 0
      0009D2 00                    2777 	.db #0x00	; 0
      0009D3 00                    2778 	.db #0x00	; 0
      0009D4 00                    2779 	.db #0x00	; 0
      0009D5 20                    2780 	.db #0x20	; 32
      0009D6 00                    2781 	.db #0x00	; 0
      0009D7 01                    2782 	.db #0x01	; 1
      0009D8 00                    2783 	.db #0x00	; 0
      0009D9 00                    2784 	.db #0x00	; 0
      0009DA 00                    2785 	.db #0x00	; 0
      0009DB 08                    2786 	.db #0x08	; 8
      0009DC 00                    2787 	.db #0x00	; 0
      0009DD 00                    2788 	.db #0x00	; 0
      0009DE 00                    2789 	.db #0x00	; 0
      0009DF 00                    2790 	.db #0x00	; 0
      0009E0 02                    2791 	.db #0x02	; 2
      0009E1 00                    2792 	.db #0x00	; 0
      0009E2 00                    2793 	.db #0x00	; 0
      0009E3 00                    2794 	.db #0x00	; 0
      0009E4 00                    2795 	.db #0x00	; 0
      0009E5 08                    2796 	.db #0x08	; 8
      0009E6 00                    2797 	.db #0x00	; 0
      0009E7 00                    2798 	.db #0x00	; 0
      0009E8                       2799 _sprite_explosion_7:
      0009E8 00                    2800 	.db #0x00	; 0
      0009E9 00                    2801 	.db #0x00	; 0
      0009EA 01                    2802 	.db #0x01	; 1
      0009EB 00                    2803 	.db #0x00	; 0
      0009EC 20                    2804 	.db #0x20	; 32
      0009ED 00                    2805 	.db #0x00	; 0
      0009EE 00                    2806 	.db #0x00	; 0
      0009EF 00                    2807 	.db #0x00	; 0
      0009F0 00                    2808 	.db #0x00	; 0
      0009F1 80                    2809 	.db #0x80	; 128
      0009F2 00                    2810 	.db #0x00	; 0
      0009F3 00                    2811 	.db #0x00	; 0
      0009F4 00                    2812 	.db #0x00	; 0
      0009F5 00                    2813 	.db #0x00	; 0
      0009F6 20                    2814 	.db #0x20	; 32
      0009F7 00                    2815 	.db #0x00	; 0
      0009F8 00                    2816 	.db #0x00	; 0
      0009F9 00                    2817 	.db #0x00	; 0
      0009FA 00                    2818 	.db #0x00	; 0
      0009FB 00                    2819 	.db #0x00	; 0
      0009FC 08                    2820 	.db #0x08	; 8
      0009FD 00                    2821 	.db #0x00	; 0
      0009FE 00                    2822 	.db #0x00	; 0
      0009FF 00                    2823 	.db #0x00	; 0
      000A00 00                    2824 	.db #0x00	; 0
      000A01 02                    2825 	.db #0x02	; 2
      000A02 00                    2826 	.db #0x00	; 0
      000A03 00                    2827 	.db #0x00	; 0
      000A04 00                    2828 	.db #0x00	; 0
      000A05 00                    2829 	.db #0x00	; 0
      000A06 08                    2830 	.db #0x08	; 8
      000A07 00                    2831 	.db #0x00	; 0
      000A08                       2832 _sprite_block_small_0:
      000A08 5A                    2833 	.db #0x5a	; 90	'Z'
      000A09 24                    2834 	.db #0x24	; 36
      000A0A 80                    2835 	.db #0x80	; 128
      000A0B 10                    2836 	.db #0x10	; 16
      000A0C 80                    2837 	.db #0x80	; 128
      000A0D 20                    2838 	.db #0x20	; 32
      000A0E 00                    2839 	.db #0x00	; 0
      000A0F 00                    2840 	.db #0x00	; 0
      000A10 00                    2841 	.db #0x00	; 0
      000A11 00                    2842 	.db #0x00	; 0
      000A12 00                    2843 	.db #0x00	; 0
      000A13 00                    2844 	.db #0x00	; 0
      000A14 00                    2845 	.db #0x00	; 0
      000A15 00                    2846 	.db #0x00	; 0
      000A16 00                    2847 	.db #0x00	; 0
      000A17 00                    2848 	.db #0x00	; 0
      000A18 00                    2849 	.db #0x00	; 0
      000A19 00                    2850 	.db #0x00	; 0
      000A1A 00                    2851 	.db #0x00	; 0
      000A1B 00                    2852 	.db #0x00	; 0
      000A1C 00                    2853 	.db #0x00	; 0
      000A1D 00                    2854 	.db #0x00	; 0
      000A1E 00                    2855 	.db #0x00	; 0
      000A1F 00                    2856 	.db #0x00	; 0
      000A20 00                    2857 	.db #0x00	; 0
      000A21 00                    2858 	.db #0x00	; 0
      000A22 00                    2859 	.db #0x00	; 0
      000A23 00                    2860 	.db #0x00	; 0
      000A24 00                    2861 	.db #0x00	; 0
      000A25 00                    2862 	.db #0x00	; 0
      000A26 00                    2863 	.db #0x00	; 0
      000A27 00                    2864 	.db #0x00	; 0
      000A28                       2865 _sprite_block_small_1:
      000A28 FF                    2866 	.db #0xff	; 255
      000A29 FF                    2867 	.db #0xff	; 255
      000A2A FF                    2868 	.db #0xff	; 255
      000A2B FF                    2869 	.db #0xff	; 255
      000A2C FF                    2870 	.db #0xff	; 255
      000A2D FF                    2871 	.db #0xff	; 255
      000A2E FF                    2872 	.db #0xff	; 255
      000A2F 7E                    2873 	.db #0x7e	; 126
      000A30 00                    2874 	.db #0x00	; 0
      000A31 00                    2875 	.db #0x00	; 0
      000A32 00                    2876 	.db #0x00	; 0
      000A33 00                    2877 	.db #0x00	; 0
      000A34 00                    2878 	.db #0x00	; 0
      000A35 00                    2879 	.db #0x00	; 0
      000A36 00                    2880 	.db #0x00	; 0
      000A37 00                    2881 	.db #0x00	; 0
      000A38 00                    2882 	.db #0x00	; 0
      000A39 00                    2883 	.db #0x00	; 0
      000A3A 00                    2884 	.db #0x00	; 0
      000A3B 00                    2885 	.db #0x00	; 0
      000A3C 00                    2886 	.db #0x00	; 0
      000A3D 00                    2887 	.db #0x00	; 0
      000A3E 00                    2888 	.db #0x00	; 0
      000A3F 00                    2889 	.db #0x00	; 0
      000A40 00                    2890 	.db #0x00	; 0
      000A41 00                    2891 	.db #0x00	; 0
      000A42 00                    2892 	.db #0x00	; 0
      000A43 00                    2893 	.db #0x00	; 0
      000A44 00                    2894 	.db #0x00	; 0
      000A45 00                    2895 	.db #0x00	; 0
      000A46 00                    2896 	.db #0x00	; 0
      000A47 00                    2897 	.db #0x00	; 0
      000A48                       2898 _sprite_number_3_32x32:
      000A48 00                    2899 	.db #0x00	; 0
      000A49 01                    2900 	.db #0x01	; 1
      000A4A 02                    2901 	.db #0x02	; 2
      000A4B 04                    2902 	.db #0x04	; 4
      000A4C 08                    2903 	.db #0x08	; 8
      000A4D 08                    2904 	.db #0x08	; 8
      000A4E 08                    2905 	.db #0x08	; 8
      000A4F 08                    2906 	.db #0x08	; 8
      000A50 0F                    2907 	.db #0x0f	; 15
      000A51 00                    2908 	.db #0x00	; 0
      000A52 00                    2909 	.db #0x00	; 0
      000A53 00                    2910 	.db #0x00	; 0
      000A54 00                    2911 	.db #0x00	; 0
      000A55 00                    2912 	.db #0x00	; 0
      000A56 00                    2913 	.db #0x00	; 0
      000A57 00                    2914 	.db #0x00	; 0
      000A58 FF                    2915 	.db #0xff	; 255
      000A59 00                    2916 	.db #0x00	; 0
      000A5A 00                    2917 	.db #0x00	; 0
      000A5B 00                    2918 	.db #0x00	; 0
      000A5C 00                    2919 	.db #0x00	; 0
      000A5D 00                    2920 	.db #0x00	; 0
      000A5E 1F                    2921 	.db #0x1f	; 31
      000A5F 20                    2922 	.db #0x20	; 32
      000A60 C0                    2923 	.db #0xc0	; 192
      000A61 00                    2924 	.db #0x00	; 0
      000A62 00                    2925 	.db #0x00	; 0
      000A63 00                    2926 	.db #0x00	; 0
      000A64 00                    2927 	.db #0x00	; 0
      000A65 3F                    2928 	.db #0x3f	; 63
      000A66 20                    2929 	.db #0x20	; 32
      000A67 20                    2930 	.db #0x20	; 32
      000A68 FF                    2931 	.db #0xff	; 255
      000A69 00                    2932 	.db #0x00	; 0
      000A6A 00                    2933 	.db #0x00	; 0
      000A6B 00                    2934 	.db #0x00	; 0
      000A6C 00                    2935 	.db #0x00	; 0
      000A6D 00                    2936 	.db #0x00	; 0
      000A6E F0                    2937 	.db #0xf0	; 240
      000A6F 08                    2938 	.db #0x08	; 8
      000A70 04                    2939 	.db #0x04	; 4
      000A71 04                    2940 	.db #0x04	; 4
      000A72 04                    2941 	.db #0x04	; 4
      000A73 04                    2942 	.db #0x04	; 4
      000A74 08                    2943 	.db #0x08	; 8
      000A75 F0                    2944 	.db #0xf0	; 240
      000A76 00                    2945 	.db #0x00	; 0
      000A77 00                    2946 	.db #0x00	; 0
      000A78 00                    2947 	.db #0x00	; 0
      000A79 80                    2948 	.db #0x80	; 128
      000A7A 40                    2949 	.db #0x40	; 64
      000A7B 20                    2950 	.db #0x20	; 32
      000A7C 10                    2951 	.db #0x10	; 16
      000A7D 10                    2952 	.db #0x10	; 16
      000A7E 10                    2953 	.db #0x10	; 16
      000A7F 10                    2954 	.db #0x10	; 16
      000A80 10                    2955 	.db #0x10	; 16
      000A81 10                    2956 	.db #0x10	; 16
      000A82 10                    2957 	.db #0x10	; 16
      000A83 10                    2958 	.db #0x10	; 16
      000A84 10                    2959 	.db #0x10	; 16
      000A85 20                    2960 	.db #0x20	; 32
      000A86 40                    2961 	.db #0x40	; 64
      000A87 80                    2962 	.db #0x80	; 128
      000A88 00                    2963 	.db #0x00	; 0
      000A89 00                    2964 	.db #0x00	; 0
      000A8A 00                    2965 	.db #0x00	; 0
      000A8B 00                    2966 	.db #0x00	; 0
      000A8C 00                    2967 	.db #0x00	; 0
      000A8D 00                    2968 	.db #0x00	; 0
      000A8E 00                    2969 	.db #0x00	; 0
      000A8F 0F                    2970 	.db #0x0f	; 15
      000A90 08                    2971 	.db #0x08	; 8
      000A91 08                    2972 	.db #0x08	; 8
      000A92 08                    2973 	.db #0x08	; 8
      000A93 08                    2974 	.db #0x08	; 8
      000A94 04                    2975 	.db #0x04	; 4
      000A95 02                    2976 	.db #0x02	; 2
      000A96 01                    2977 	.db #0x01	; 1
      000A97 00                    2978 	.db #0x00	; 0
      000A98 20                    2979 	.db #0x20	; 32
      000A99 20                    2980 	.db #0x20	; 32
      000A9A 3F                    2981 	.db #0x3f	; 63
      000A9B 00                    2982 	.db #0x00	; 0
      000A9C 00                    2983 	.db #0x00	; 0
      000A9D 00                    2984 	.db #0x00	; 0
      000A9E 00                    2985 	.db #0x00	; 0
      000A9F C0                    2986 	.db #0xc0	; 192
      000AA0 20                    2987 	.db #0x20	; 32
      000AA1 1F                    2988 	.db #0x1f	; 31
      000AA2 00                    2989 	.db #0x00	; 0
      000AA3 00                    2990 	.db #0x00	; 0
      000AA4 00                    2991 	.db #0x00	; 0
      000AA5 00                    2992 	.db #0x00	; 0
      000AA6 00                    2993 	.db #0x00	; 0
      000AA7 FF                    2994 	.db #0xff	; 255
      000AA8 00                    2995 	.db #0x00	; 0
      000AA9 00                    2996 	.db #0x00	; 0
      000AAA F0                    2997 	.db #0xf0	; 240
      000AAB 08                    2998 	.db #0x08	; 8
      000AAC 04                    2999 	.db #0x04	; 4
      000AAD 04                    3000 	.db #0x04	; 4
      000AAE 04                    3001 	.db #0x04	; 4
      000AAF 04                    3002 	.db #0x04	; 4
      000AB0 08                    3003 	.db #0x08	; 8
      000AB1 F0                    3004 	.db #0xf0	; 240
      000AB2 00                    3005 	.db #0x00	; 0
      000AB3 00                    3006 	.db #0x00	; 0
      000AB4 00                    3007 	.db #0x00	; 0
      000AB5 00                    3008 	.db #0x00	; 0
      000AB6 00                    3009 	.db #0x00	; 0
      000AB7 FF                    3010 	.db #0xff	; 255
      000AB8 80                    3011 	.db #0x80	; 128
      000AB9 40                    3012 	.db #0x40	; 64
      000ABA 20                    3013 	.db #0x20	; 32
      000ABB 10                    3014 	.db #0x10	; 16
      000ABC 10                    3015 	.db #0x10	; 16
      000ABD 10                    3016 	.db #0x10	; 16
      000ABE 10                    3017 	.db #0x10	; 16
      000ABF 10                    3018 	.db #0x10	; 16
      000AC0 10                    3019 	.db #0x10	; 16
      000AC1 10                    3020 	.db #0x10	; 16
      000AC2 10                    3021 	.db #0x10	; 16
      000AC3 10                    3022 	.db #0x10	; 16
      000AC4 20                    3023 	.db #0x20	; 32
      000AC5 40                    3024 	.db #0x40	; 64
      000AC6 80                    3025 	.db #0x80	; 128
      000AC7 00                    3026 	.db #0x00	; 0
      000AC8                       3027 _sprite_number_2_32x32:
      000AC8 00                    3028 	.db #0x00	; 0
      000AC9 01                    3029 	.db #0x01	; 1
      000ACA 02                    3030 	.db #0x02	; 2
      000ACB 04                    3031 	.db #0x04	; 4
      000ACC 08                    3032 	.db #0x08	; 8
      000ACD 08                    3033 	.db #0x08	; 8
      000ACE 08                    3034 	.db #0x08	; 8
      000ACF 08                    3035 	.db #0x08	; 8
      000AD0 0F                    3036 	.db #0x0f	; 15
      000AD1 00                    3037 	.db #0x00	; 0
      000AD2 00                    3038 	.db #0x00	; 0
      000AD3 00                    3039 	.db #0x00	; 0
      000AD4 00                    3040 	.db #0x00	; 0
      000AD5 00                    3041 	.db #0x00	; 0
      000AD6 00                    3042 	.db #0x00	; 0
      000AD7 00                    3043 	.db #0x00	; 0
      000AD8 FF                    3044 	.db #0xff	; 255
      000AD9 00                    3045 	.db #0x00	; 0
      000ADA 00                    3046 	.db #0x00	; 0
      000ADB 00                    3047 	.db #0x00	; 0
      000ADC 00                    3048 	.db #0x00	; 0
      000ADD 00                    3049 	.db #0x00	; 0
      000ADE 1F                    3050 	.db #0x1f	; 31
      000ADF 20                    3051 	.db #0x20	; 32
      000AE0 C0                    3052 	.db #0xc0	; 192
      000AE1 00                    3053 	.db #0x00	; 0
      000AE2 00                    3054 	.db #0x00	; 0
      000AE3 00                    3055 	.db #0x00	; 0
      000AE4 00                    3056 	.db #0x00	; 0
      000AE5 3F                    3057 	.db #0x3f	; 63
      000AE6 40                    3058 	.db #0x40	; 64
      000AE7 80                    3059 	.db #0x80	; 128
      000AE8 FF                    3060 	.db #0xff	; 255
      000AE9 00                    3061 	.db #0x00	; 0
      000AEA 00                    3062 	.db #0x00	; 0
      000AEB 00                    3063 	.db #0x00	; 0
      000AEC 00                    3064 	.db #0x00	; 0
      000AED 00                    3065 	.db #0x00	; 0
      000AEE F0                    3066 	.db #0xf0	; 240
      000AEF 08                    3067 	.db #0x08	; 8
      000AF0 04                    3068 	.db #0x04	; 4
      000AF1 04                    3069 	.db #0x04	; 4
      000AF2 04                    3070 	.db #0x04	; 4
      000AF3 04                    3071 	.db #0x04	; 4
      000AF4 08                    3072 	.db #0x08	; 8
      000AF5 F0                    3073 	.db #0xf0	; 240
      000AF6 00                    3074 	.db #0x00	; 0
      000AF7 00                    3075 	.db #0x00	; 0
      000AF8 00                    3076 	.db #0x00	; 0
      000AF9 80                    3077 	.db #0x80	; 128
      000AFA 40                    3078 	.db #0x40	; 64
      000AFB 20                    3079 	.db #0x20	; 32
      000AFC 10                    3080 	.db #0x10	; 16
      000AFD 10                    3081 	.db #0x10	; 16
      000AFE 10                    3082 	.db #0x10	; 16
      000AFF 10                    3083 	.db #0x10	; 16
      000B00 10                    3084 	.db #0x10	; 16
      000B01 10                    3085 	.db #0x10	; 16
      000B02 10                    3086 	.db #0x10	; 16
      000B03 10                    3087 	.db #0x10	; 16
      000B04 10                    3088 	.db #0x10	; 16
      000B05 10                    3089 	.db #0x10	; 16
      000B06 20                    3090 	.db #0x20	; 32
      000B07 40                    3091 	.db #0x40	; 64
      000B08 01                    3092 	.db #0x01	; 1
      000B09 02                    3093 	.db #0x02	; 2
      000B0A 04                    3094 	.db #0x04	; 4
      000B0B 08                    3095 	.db #0x08	; 8
      000B0C 08                    3096 	.db #0x08	; 8
      000B0D 08                    3097 	.db #0x08	; 8
      000B0E 08                    3098 	.db #0x08	; 8
      000B0F 08                    3099 	.db #0x08	; 8
      000B10 08                    3100 	.db #0x08	; 8
      000B11 08                    3101 	.db #0x08	; 8
      000B12 08                    3102 	.db #0x08	; 8
      000B13 08                    3103 	.db #0x08	; 8
      000B14 08                    3104 	.db #0x08	; 8
      000B15 08                    3105 	.db #0x08	; 8
      000B16 08                    3106 	.db #0x08	; 8
      000B17 0F                    3107 	.db #0x0f	; 15
      000B18 00                    3108 	.db #0x00	; 0
      000B19 00                    3109 	.db #0x00	; 0
      000B1A 07                    3110 	.db #0x07	; 7
      000B1B 08                    3111 	.db #0x08	; 8
      000B1C 10                    3112 	.db #0x10	; 16
      000B1D 20                    3113 	.db #0x20	; 32
      000B1E 20                    3114 	.db #0x20	; 32
      000B1F 20                    3115 	.db #0x20	; 32
      000B20 20                    3116 	.db #0x20	; 32
      000B21 3F                    3117 	.db #0x3f	; 63
      000B22 00                    3118 	.db #0x00	; 0
      000B23 00                    3119 	.db #0x00	; 0
      000B24 00                    3120 	.db #0x00	; 0
      000B25 00                    3121 	.db #0x00	; 0
      000B26 00                    3122 	.db #0x00	; 0
      000B27 FF                    3123 	.db #0xff	; 255
      000B28 00                    3124 	.db #0x00	; 0
      000B29 01                    3125 	.db #0x01	; 1
      000B2A FE                    3126 	.db #0xfe	; 254
      000B2B 00                    3127 	.db #0x00	; 0
      000B2C 00                    3128 	.db #0x00	; 0
      000B2D 00                    3129 	.db #0x00	; 0
      000B2E 00                    3130 	.db #0x00	; 0
      000B2F 07                    3131 	.db #0x07	; 7
      000B30 08                    3132 	.db #0x08	; 8
      000B31 F0                    3133 	.db #0xf0	; 240
      000B32 00                    3134 	.db #0x00	; 0
      000B33 00                    3135 	.db #0x00	; 0
      000B34 00                    3136 	.db #0x00	; 0
      000B35 00                    3137 	.db #0x00	; 0
      000B36 00                    3138 	.db #0x00	; 0
      000B37 FF                    3139 	.db #0xff	; 255
      000B38 80                    3140 	.db #0x80	; 128
      000B39 00                    3141 	.db #0x00	; 0
      000B3A 00                    3142 	.db #0x00	; 0
      000B3B 00                    3143 	.db #0x00	; 0
      000B3C 00                    3144 	.db #0x00	; 0
      000B3D 00                    3145 	.db #0x00	; 0
      000B3E 00                    3146 	.db #0x00	; 0
      000B3F F0                    3147 	.db #0xf0	; 240
      000B40 10                    3148 	.db #0x10	; 16
      000B41 10                    3149 	.db #0x10	; 16
      000B42 10                    3150 	.db #0x10	; 16
      000B43 10                    3151 	.db #0x10	; 16
      000B44 10                    3152 	.db #0x10	; 16
      000B45 10                    3153 	.db #0x10	; 16
      000B46 10                    3154 	.db #0x10	; 16
      000B47 F0                    3155 	.db #0xf0	; 240
      000B48                       3156 _sprite_number_1_32x32:
      000B48 00                    3157 	.db #0x00	; 0
      000B49 00                    3158 	.db #0x00	; 0
      000B4A 00                    3159 	.db #0x00	; 0
      000B4B 00                    3160 	.db #0x00	; 0
      000B4C 00                    3161 	.db #0x00	; 0
      000B4D 00                    3162 	.db #0x00	; 0
      000B4E 01                    3163 	.db #0x01	; 1
      000B4F 01                    3164 	.db #0x01	; 1
      000B50 01                    3165 	.db #0x01	; 1
      000B51 01                    3166 	.db #0x01	; 1
      000B52 00                    3167 	.db #0x00	; 0
      000B53 00                    3168 	.db #0x00	; 0
      000B54 00                    3169 	.db #0x00	; 0
      000B55 00                    3170 	.db #0x00	; 0
      000B56 00                    3171 	.db #0x00	; 0
      000B57 00                    3172 	.db #0x00	; 0
      000B58 07                    3173 	.db #0x07	; 7
      000B59 08                    3174 	.db #0x08	; 8
      000B5A 10                    3175 	.db #0x10	; 16
      000B5B 20                    3176 	.db #0x20	; 32
      000B5C 40                    3177 	.db #0x40	; 64
      000B5D 80                    3178 	.db #0x80	; 128
      000B5E 00                    3179 	.db #0x00	; 0
      000B5F 00                    3180 	.db #0x00	; 0
      000B60 00                    3181 	.db #0x00	; 0
      000B61 F8                    3182 	.db #0xf8	; 248
      000B62 08                    3183 	.db #0x08	; 8
      000B63 08                    3184 	.db #0x08	; 8
      000B64 08                    3185 	.db #0x08	; 8
      000B65 08                    3186 	.db #0x08	; 8
      000B66 08                    3187 	.db #0x08	; 8
      000B67 08                    3188 	.db #0x08	; 8
      000B68 F0                    3189 	.db #0xf0	; 240
      000B69 10                    3190 	.db #0x10	; 16
      000B6A 10                    3191 	.db #0x10	; 16
      000B6B 10                    3192 	.db #0x10	; 16
      000B6C 10                    3193 	.db #0x10	; 16
      000B6D 10                    3194 	.db #0x10	; 16
      000B6E 10                    3195 	.db #0x10	; 16
      000B6F 10                    3196 	.db #0x10	; 16
      000B70 10                    3197 	.db #0x10	; 16
      000B71 10                    3198 	.db #0x10	; 16
      000B72 10                    3199 	.db #0x10	; 16
      000B73 10                    3200 	.db #0x10	; 16
      000B74 10                    3201 	.db #0x10	; 16
      000B75 10                    3202 	.db #0x10	; 16
      000B76 10                    3203 	.db #0x10	; 16
      000B77 10                    3204 	.db #0x10	; 16
      000B78 00                    3205 	.db #0x00	; 0
      000B79 00                    3206 	.db #0x00	; 0
      000B7A 00                    3207 	.db #0x00	; 0
      000B7B 00                    3208 	.db #0x00	; 0
      000B7C 00                    3209 	.db #0x00	; 0
      000B7D 00                    3210 	.db #0x00	; 0
      000B7E 00                    3211 	.db #0x00	; 0
      000B7F 00                    3212 	.db #0x00	; 0
      000B80 00                    3213 	.db #0x00	; 0
      000B81 00                    3214 	.db #0x00	; 0
      000B82 00                    3215 	.db #0x00	; 0
      000B83 00                    3216 	.db #0x00	; 0
      000B84 00                    3217 	.db #0x00	; 0
      000B85 00                    3218 	.db #0x00	; 0
      000B86 00                    3219 	.db #0x00	; 0
      000B87 00                    3220 	.db #0x00	; 0
      000B88 00                    3221 	.db #0x00	; 0
      000B89 00                    3222 	.db #0x00	; 0
      000B8A 00                    3223 	.db #0x00	; 0
      000B8B 00                    3224 	.db #0x00	; 0
      000B8C 00                    3225 	.db #0x00	; 0
      000B8D 00                    3226 	.db #0x00	; 0
      000B8E 00                    3227 	.db #0x00	; 0
      000B8F 00                    3228 	.db #0x00	; 0
      000B90 00                    3229 	.db #0x00	; 0
      000B91 00                    3230 	.db #0x00	; 0
      000B92 00                    3231 	.db #0x00	; 0
      000B93 00                    3232 	.db #0x00	; 0
      000B94 00                    3233 	.db #0x00	; 0
      000B95 00                    3234 	.db #0x00	; 0
      000B96 00                    3235 	.db #0x00	; 0
      000B97 00                    3236 	.db #0x00	; 0
      000B98 08                    3237 	.db #0x08	; 8
      000B99 08                    3238 	.db #0x08	; 8
      000B9A 08                    3239 	.db #0x08	; 8
      000B9B 08                    3240 	.db #0x08	; 8
      000B9C 08                    3241 	.db #0x08	; 8
      000B9D 08                    3242 	.db #0x08	; 8
      000B9E 08                    3243 	.db #0x08	; 8
      000B9F 08                    3244 	.db #0x08	; 8
      000BA0 08                    3245 	.db #0x08	; 8
      000BA1 F8                    3246 	.db #0xf8	; 248
      000BA2 80                    3247 	.db #0x80	; 128
      000BA3 80                    3248 	.db #0x80	; 128
      000BA4 80                    3249 	.db #0x80	; 128
      000BA5 80                    3250 	.db #0x80	; 128
      000BA6 80                    3251 	.db #0x80	; 128
      000BA7 FF                    3252 	.db #0xff	; 255
      000BA8 10                    3253 	.db #0x10	; 16
      000BA9 10                    3254 	.db #0x10	; 16
      000BAA 10                    3255 	.db #0x10	; 16
      000BAB 10                    3256 	.db #0x10	; 16
      000BAC 10                    3257 	.db #0x10	; 16
      000BAD 10                    3258 	.db #0x10	; 16
      000BAE 10                    3259 	.db #0x10	; 16
      000BAF 10                    3260 	.db #0x10	; 16
      000BB0 10                    3261 	.db #0x10	; 16
      000BB1 1F                    3262 	.db #0x1f	; 31
      000BB2 01                    3263 	.db #0x01	; 1
      000BB3 01                    3264 	.db #0x01	; 1
      000BB4 01                    3265 	.db #0x01	; 1
      000BB5 01                    3266 	.db #0x01	; 1
      000BB6 01                    3267 	.db #0x01	; 1
      000BB7 FF                    3268 	.db #0xff	; 255
      000BB8 00                    3269 	.db #0x00	; 0
      000BB9 00                    3270 	.db #0x00	; 0
      000BBA 00                    3271 	.db #0x00	; 0
      000BBB 00                    3272 	.db #0x00	; 0
      000BBC 00                    3273 	.db #0x00	; 0
      000BBD 00                    3274 	.db #0x00	; 0
      000BBE 00                    3275 	.db #0x00	; 0
      000BBF 00                    3276 	.db #0x00	; 0
      000BC0 00                    3277 	.db #0x00	; 0
      000BC1 00                    3278 	.db #0x00	; 0
      000BC2 00                    3279 	.db #0x00	; 0
      000BC3 00                    3280 	.db #0x00	; 0
      000BC4 00                    3281 	.db #0x00	; 0
      000BC5 00                    3282 	.db #0x00	; 0
      000BC6 00                    3283 	.db #0x00	; 0
      000BC7 00                    3284 	.db #0x00	; 0
      000BC8                       3285 _sprite_go_32x32:
      000BC8 00                    3286 	.db #0x00	; 0
      000BC9 00                    3287 	.db #0x00	; 0
      000BCA 00                    3288 	.db #0x00	; 0
      000BCB 00                    3289 	.db #0x00	; 0
      000BCC 00                    3290 	.db #0x00	; 0
      000BCD 00                    3291 	.db #0x00	; 0
      000BCE 00                    3292 	.db #0x00	; 0
      000BCF 3F                    3293 	.db #0x3f	; 63
      000BD0 40                    3294 	.db #0x40	; 64
      000BD1 80                    3295 	.db #0x80	; 128
      000BD2 87                    3296 	.db #0x87	; 135
      000BD3 88                    3297 	.db #0x88	; 136
      000BD4 88                    3298 	.db #0x88	; 136
      000BD5 88                    3299 	.db #0x88	; 136
      000BD6 88                    3300 	.db #0x88	; 136
      000BD7 88                    3301 	.db #0x88	; 136
      000BD8 00                    3302 	.db #0x00	; 0
      000BD9 00                    3303 	.db #0x00	; 0
      000BDA 00                    3304 	.db #0x00	; 0
      000BDB 00                    3305 	.db #0x00	; 0
      000BDC 00                    3306 	.db #0x00	; 0
      000BDD 00                    3307 	.db #0x00	; 0
      000BDE 00                    3308 	.db #0x00	; 0
      000BDF C1                    3309 	.db #0xc1	; 193
      000BE0 22                    3310 	.db #0x22	; 34
      000BE1 14                    3311 	.db #0x14	; 20
      000BE2 14                    3312 	.db #0x14	; 20
      000BE3 94                    3313 	.db #0x94	; 148
      000BE4 F4                    3314 	.db #0xf4	; 244
      000BE5 04                    3315 	.db #0x04	; 4
      000BE6 04                    3316 	.db #0x04	; 4
      000BE7 04                    3317 	.db #0x04	; 4
      000BE8 00                    3318 	.db #0x00	; 0
      000BE9 00                    3319 	.db #0x00	; 0
      000BEA 00                    3320 	.db #0x00	; 0
      000BEB 00                    3321 	.db #0x00	; 0
      000BEC 00                    3322 	.db #0x00	; 0
      000BED 00                    3323 	.db #0x00	; 0
      000BEE 00                    3324 	.db #0x00	; 0
      000BEF FE                    3325 	.db #0xfe	; 254
      000BF0 01                    3326 	.db #0x01	; 1
      000BF1 00                    3327 	.db #0x00	; 0
      000BF2 00                    3328 	.db #0x00	; 0
      000BF3 30                    3329 	.db #0x30	; 48	'0'
      000BF4 48                    3330 	.db #0x48	; 72	'H'
      000BF5 48                    3331 	.db #0x48	; 72	'H'
      000BF6 48                    3332 	.db #0x48	; 72	'H'
      000BF7 48                    3333 	.db #0x48	; 72	'H'
      000BF8 00                    3334 	.db #0x00	; 0
      000BF9 00                    3335 	.db #0x00	; 0
      000BFA 00                    3336 	.db #0x00	; 0
      000BFB 00                    3337 	.db #0x00	; 0
      000BFC 00                    3338 	.db #0x00	; 0
      000BFD 00                    3339 	.db #0x00	; 0
      000BFE 00                    3340 	.db #0x00	; 0
      000BFF 3F                    3341 	.db #0x3f	; 63
      000C00 21                    3342 	.db #0x21	; 33
      000C01 A1                    3343 	.db #0xa1	; 161
      000C02 A1                    3344 	.db #0xa1	; 161
      000C03 A1                    3345 	.db #0xa1	; 161
      000C04 A1                    3346 	.db #0xa1	; 161
      000C05 A1                    3347 	.db #0xa1	; 161
      000C06 A1                    3348 	.db #0xa1	; 161
      000C07 A1                    3349 	.db #0xa1	; 161
      000C08 8B                    3350 	.db #0x8b	; 139
      000C09 8A                    3351 	.db #0x8a	; 138
      000C0A 8A                    3352 	.db #0x8a	; 138
      000C0B 8B                    3353 	.db #0x8b	; 139
      000C0C 89                    3354 	.db #0x89	; 137
      000C0D 86                    3355 	.db #0x86	; 134
      000C0E 80                    3356 	.db #0x80	; 128
      000C0F 40                    3357 	.db #0x40	; 64
      000C10 3F                    3358 	.db #0x3f	; 63
      000C11 00                    3359 	.db #0x00	; 0
      000C12 00                    3360 	.db #0x00	; 0
      000C13 00                    3361 	.db #0x00	; 0
      000C14 00                    3362 	.db #0x00	; 0
      000C15 00                    3363 	.db #0x00	; 0
      000C16 00                    3364 	.db #0x00	; 0
      000C17 00                    3365 	.db #0x00	; 0
      000C18 F4                    3366 	.db #0xf4	; 244
      000C19 14                    3367 	.db #0x14	; 20
      000C1A 14                    3368 	.db #0x14	; 20
      000C1B 14                    3369 	.db #0x14	; 20
      000C1C 14                    3370 	.db #0x14	; 20
      000C1D 14                    3371 	.db #0x14	; 20
      000C1E 14                    3372 	.db #0x14	; 20
      000C1F 22                    3373 	.db #0x22	; 34
      000C20 C1                    3374 	.db #0xc1	; 193
      000C21 00                    3375 	.db #0x00	; 0
      000C22 00                    3376 	.db #0x00	; 0
      000C23 00                    3377 	.db #0x00	; 0
      000C24 00                    3378 	.db #0x00	; 0
      000C25 00                    3379 	.db #0x00	; 0
      000C26 00                    3380 	.db #0x00	; 0
      000C27 00                    3381 	.db #0x00	; 0
      000C28 48                    3382 	.db #0x48	; 72	'H'
      000C29 48                    3383 	.db #0x48	; 72	'H'
      000C2A 48                    3384 	.db #0x48	; 72	'H'
      000C2B 48                    3385 	.db #0x48	; 72	'H'
      000C2C 30                    3386 	.db #0x30	; 48	'0'
      000C2D 00                    3387 	.db #0x00	; 0
      000C2E 00                    3388 	.db #0x00	; 0
      000C2F 01                    3389 	.db #0x01	; 1
      000C30 FE                    3390 	.db #0xfe	; 254
      000C31 00                    3391 	.db #0x00	; 0
      000C32 00                    3392 	.db #0x00	; 0
      000C33 00                    3393 	.db #0x00	; 0
      000C34 00                    3394 	.db #0x00	; 0
      000C35 00                    3395 	.db #0x00	; 0
      000C36 00                    3396 	.db #0x00	; 0
      000C37 00                    3397 	.db #0x00	; 0
      000C38 A1                    3398 	.db #0xa1	; 161
      000C39 A1                    3399 	.db #0xa1	; 161
      000C3A A1                    3400 	.db #0xa1	; 161
      000C3B BF                    3401 	.db #0xbf	; 191
      000C3C 80                    3402 	.db #0x80	; 128
      000C3D BF                    3403 	.db #0xbf	; 191
      000C3E A1                    3404 	.db #0xa1	; 161
      000C3F 21                    3405 	.db #0x21	; 33
      000C40 3F                    3406 	.db #0x3f	; 63
      000C41 00                    3407 	.db #0x00	; 0
      000C42 00                    3408 	.db #0x00	; 0
      000C43 00                    3409 	.db #0x00	; 0
      000C44 00                    3410 	.db #0x00	; 0
      000C45 00                    3411 	.db #0x00	; 0
      000C46 00                    3412 	.db #0x00	; 0
      000C47 00                    3413 	.db #0x00	; 0
                                   3414 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3415 ;	---------------------------------
                                   3416 ; Function HideArrowSprite
                                   3417 ; ---------------------------------
      000C48                       3418 _HideArrowSprite::
                                   3419 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3420 	ld	a, #0xc0
      000C4A F5               [11] 3421 	push	af
      000C4B 33               [ 6] 3422 	inc	sp
      000C4C 21 00 1B         [10] 3423 	ld	hl, #0x1b00
      000C4F E5               [11] 3424 	push	hl
      000C50 CDr00r00         [17] 3425 	call	_WRTVRM
      000C53 F1               [10] 3426 	pop	af
      000C54 33               [ 6] 3427 	inc	sp
                                   3428 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3429 	ret
                                   3430 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3431 ;	---------------------------------
                                   3432 ; Function DrawHitSprite
                                   3433 ; ---------------------------------
      000C56                       3434 _DrawHitSprite::
      000C56 DD E5            [15] 3435 	push	ix
      000C58 DD 21 00 00      [14] 3436 	ld	ix,#0
      000C5C DD 39            [15] 3437 	add	ix,sp
      000C5E 21 EC FF         [10] 3438 	ld	hl, #-20
      000C61 39               [11] 3439 	add	hl, sp
      000C62 F9               [ 6] 3440 	ld	sp, hl
                                   3441 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3442 	ld	hl, #0
      000C66 39               [11] 3443 	add	hl, sp
      000C67 EB               [ 4] 3444 	ex	de, hl
      000C68 3E 0F            [ 7] 3445 	ld	a, #0x0f
      000C6A 12               [ 7] 3446 	ld	(de), a
      000C6B 6B               [ 4] 3447 	ld	l, e
      000C6C 62               [ 4] 3448 	ld	h, d
      000C6D 23               [ 6] 3449 	inc	hl
      000C6E 36 0E            [10] 3450 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3451 	ld	l, e
      000C71 62               [ 4] 3452 	ld	h, d
      000C72 23               [ 6] 3453 	inc	hl
      000C73 23               [ 6] 3454 	inc	hl
      000C74 36 09            [10] 3455 	ld	(hl), #0x09
      000C76 6B               [ 4] 3456 	ld	l, e
      000C77 62               [ 4] 3457 	ld	h, d
      000C78 23               [ 6] 3458 	inc	hl
      000C79 23               [ 6] 3459 	inc	hl
      000C7A 23               [ 6] 3460 	inc	hl
      000C7B 36 06            [10] 3461 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3462 	ld	hl, #0x0004
      000C80 19               [11] 3463 	add	hl, de
      000C81 36 06            [10] 3464 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3465 	ld	hl, #0x0005
      000C86 19               [11] 3466 	add	hl, de
      000C87 36 09            [10] 3467 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3468 	ld	hl, #0x0006
      000C8C 19               [11] 3469 	add	hl, de
      000C8D 36 0E            [10] 3470 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3471 	ld	hl, #0x0007
      000C92 19               [11] 3472 	add	hl, de
      000C93 36 0F            [10] 3473 	ld	(hl), #0x0f
                                   3474 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3475 	ld	hl, #8
      000C98 39               [11] 3476 	add	hl, sp
      000C99 4D               [ 4] 3477 	ld	c, l
      000C9A 44               [ 4] 3478 	ld	b, h
      000C9B 36 0F            [10] 3479 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3480 	ld	l, c
      000C9E 60               [ 4] 3481 	ld	h, b
      000C9F 23               [ 6] 3482 	inc	hl
      000CA0 36 0E            [10] 3483 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3484 	ld	l, c
      000CA3 60               [ 4] 3485 	ld	h, b
      000CA4 23               [ 6] 3486 	inc	hl
      000CA5 23               [ 6] 3487 	inc	hl
      000CA6 36 03            [10] 3488 	ld	(hl), #0x03
      000CA8 69               [ 4] 3489 	ld	l, c
      000CA9 60               [ 4] 3490 	ld	h, b
      000CAA 23               [ 6] 3491 	inc	hl
      000CAB 23               [ 6] 3492 	inc	hl
      000CAC 23               [ 6] 3493 	inc	hl
      000CAD 36 0C            [10] 3494 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3495 	ld	hl, #0x0004
      000CB2 09               [11] 3496 	add	hl, bc
      000CB3 36 0C            [10] 3497 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3498 	ld	hl, #0x0005
      000CB8 09               [11] 3499 	add	hl, bc
      000CB9 36 03            [10] 3500 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3501 	ld	hl, #0x0006
      000CBE 09               [11] 3502 	add	hl, bc
      000CBF 36 0E            [10] 3503 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3504 	ld	hl, #0x0007
      000CC4 09               [11] 3505 	add	hl, bc
      000CC5 36 0F            [10] 3506 	ld	(hl), #0x0f
                                   3507 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3508 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3509 	and	a, #0x07
                                   3510 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3511 	ld	l, a
      000CCD 83               [ 4] 3512 	add	a,e
      000CCE 5F               [ 4] 3513 	ld	e, a
      000CCF 30 01            [12] 3514 	jr	NC, 00124$
      000CD1 14               [ 4] 3515 	inc	d
      000CD2                       3516 00124$:
      000CD2 1A               [ 7] 3517 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3518 	ld	-4 (ix), a
                                   3519 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3520 	ld	h, #0x00
      000CD8 09               [11] 3521 	add	hl, bc
      000CD9 7E               [ 7] 3522 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3523 	ld	-3 (ix), a
                                   3524 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3525 	ld	a, #0x01
      000CDF DD 96 05         [19] 3526 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3527 	ld	a, #0x00
      000CE4 17               [ 4] 3528 	rla
      000CE5 DD 77 FE         [19] 3529 	ld	-2 (ix), a
                                   3530 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3531 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3532 	or	a, a
      000CEC CArB7r0D         [10] 3533 	jp	Z, 00104$
                                   3534 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3535 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3536 	ld	a, c
      000CF3 C6 F8            [ 7] 3537 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3538 	ld	-1 (ix), a
      000CF8 C5               [11] 3539 	push	bc
      000CF9 F5               [11] 3540 	push	af
      000CFA 33               [ 6] 3541 	inc	sp
      000CFB 21 05 1B         [10] 3542 	ld	hl, #0x1b05
      000CFE E5               [11] 3543 	push	hl
      000CFF CDr00r00         [17] 3544 	call	_WRTVRM
      000D02 F1               [10] 3545 	pop	af
      000D03 33               [ 6] 3546 	inc	sp
      000D04 C1               [10] 3547 	pop	bc
                                   3548 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3549 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3550 	add	a, #0xfd
      000D0A 87               [ 4] 3551 	add	a, a
      000D0B 87               [ 4] 3552 	add	a, a
      000D0C C6 18            [ 7] 3553 	add	a, #0x18
      000D0E C5               [11] 3554 	push	bc
      000D0F F5               [11] 3555 	push	af
      000D10 33               [ 6] 3556 	inc	sp
      000D11 21 06 1B         [10] 3557 	ld	hl, #0x1b06
      000D14 E5               [11] 3558 	push	hl
      000D15 CDr00r00         [17] 3559 	call	_WRTVRM
      000D18 F1               [10] 3560 	pop	af
      000D19 33               [ 6] 3561 	inc	sp
      000D1A C1               [10] 3562 	pop	bc
                                   3563 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3564 	ld	a, c
      000D1C C6 08            [ 7] 3565 	add	a, #0x08
      000D1E 47               [ 4] 3566 	ld	b, a
      000D1F C5               [11] 3567 	push	bc
      000D20 C5               [11] 3568 	push	bc
      000D21 33               [ 6] 3569 	inc	sp
      000D22 21 09 1B         [10] 3570 	ld	hl, #0x1b09
      000D25 E5               [11] 3571 	push	hl
      000D26 CDr00r00         [17] 3572 	call	_WRTVRM
      000D29 F1               [10] 3573 	pop	af
      000D2A 33               [ 6] 3574 	inc	sp
      000D2B 3E 04            [ 7] 3575 	ld	a, #0x04
      000D2D F5               [11] 3576 	push	af
      000D2E 33               [ 6] 3577 	inc	sp
      000D2F 21 0A 1B         [10] 3578 	ld	hl, #0x1b0a
      000D32 E5               [11] 3579 	push	hl
      000D33 CDr00r00         [17] 3580 	call	_WRTVRM
      000D36 F1               [10] 3581 	pop	af
      000D37 33               [ 6] 3582 	inc	sp
      000D38 C1               [10] 3583 	pop	bc
                                   3584 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3585 	ld	a, c
      000D3A C6 18            [ 7] 3586 	add	a, #0x18
      000D3C 4F               [ 4] 3587 	ld	c, a
      000D3D C5               [11] 3588 	push	bc
      000D3E 79               [ 4] 3589 	ld	a, c
      000D3F F5               [11] 3590 	push	af
      000D40 33               [ 6] 3591 	inc	sp
      000D41 21 0D 1B         [10] 3592 	ld	hl, #0x1b0d
      000D44 E5               [11] 3593 	push	hl
      000D45 CDr00r00         [17] 3594 	call	_WRTVRM
      000D48 F1               [10] 3595 	pop	af
      000D49 33               [ 6] 3596 	inc	sp
      000D4A 3E 08            [ 7] 3597 	ld	a, #0x08
      000D4C F5               [11] 3598 	push	af
      000D4D 33               [ 6] 3599 	inc	sp
      000D4E 21 0E 1B         [10] 3600 	ld	hl, #0x1b0e
      000D51 E5               [11] 3601 	push	hl
      000D52 CDr00r00         [17] 3602 	call	_WRTVRM
      000D55 F1               [10] 3603 	pop	af
      000D56 33               [ 6] 3604 	inc	sp
      000D57 C1               [10] 3605 	pop	bc
                                   3606 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3607 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3608 	or	a, a
      000D5C 28 59            [12] 3609 	jr	Z, 00104$
                                   3610 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3611 	push	bc
      000D5F DD 7E FF         [19] 3612 	ld	a, -1 (ix)
      000D62 F5               [11] 3613 	push	af
      000D63 33               [ 6] 3614 	inc	sp
      000D64 21 11 1B         [10] 3615 	ld	hl, #0x1b11
      000D67 E5               [11] 3616 	push	hl
      000D68 CDr00r00         [17] 3617 	call	_WRTVRM
      000D6B F1               [10] 3618 	pop	af
      000D6C 33               [ 6] 3619 	inc	sp
      000D6D C1               [10] 3620 	pop	bc
                                   3621 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3622 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3623 	dec	a
      000D72 3D               [ 4] 3624 	dec	a
      000D73 87               [ 4] 3625 	add	a, a
      000D74 87               [ 4] 3626 	add	a, a
      000D75 C6 14            [ 7] 3627 	add	a, #0x14
      000D77 C5               [11] 3628 	push	bc
      000D78 F5               [11] 3629 	push	af
      000D79 33               [ 6] 3630 	inc	sp
      000D7A 21 12 1B         [10] 3631 	ld	hl, #0x1b12
      000D7D E5               [11] 3632 	push	hl
      000D7E CDr00r00         [17] 3633 	call	_WRTVRM
      000D81 F1               [10] 3634 	pop	af
      000D82 33               [ 6] 3635 	inc	sp
      000D83 C1               [10] 3636 	pop	bc
                                   3637 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3638 	push	bc
      000D85 C5               [11] 3639 	push	bc
      000D86 33               [ 6] 3640 	inc	sp
      000D87 21 15 1B         [10] 3641 	ld	hl, #0x1b15
      000D8A E5               [11] 3642 	push	hl
      000D8B CDr00r00         [17] 3643 	call	_WRTVRM
      000D8E F1               [10] 3644 	pop	af
      000D8F 33               [ 6] 3645 	inc	sp
      000D90 3E 0C            [ 7] 3646 	ld	a, #0x0c
      000D92 F5               [11] 3647 	push	af
      000D93 33               [ 6] 3648 	inc	sp
      000D94 21 16 1B         [10] 3649 	ld	hl, #0x1b16
      000D97 E5               [11] 3650 	push	hl
      000D98 CDr00r00         [17] 3651 	call	_WRTVRM
      000D9B F1               [10] 3652 	pop	af
      000D9C 33               [ 6] 3653 	inc	sp
      000D9D C1               [10] 3654 	pop	bc
                                   3655 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3656 	ld	a, c
      000D9F F5               [11] 3657 	push	af
      000DA0 33               [ 6] 3658 	inc	sp
      000DA1 21 19 1B         [10] 3659 	ld	hl, #0x1b19
      000DA4 E5               [11] 3660 	push	hl
      000DA5 CDr00r00         [17] 3661 	call	_WRTVRM
      000DA8 F1               [10] 3662 	pop	af
      000DA9 33               [ 6] 3663 	inc	sp
                                   3664 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3665 	ld	a, #0x10
      000DAC F5               [11] 3666 	push	af
      000DAD 33               [ 6] 3667 	inc	sp
      000DAE 21 1A 1B         [10] 3668 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3669 	push	hl
      000DB2 CDr00r00         [17] 3670 	call	_WRTVRM
      000DB5 F1               [10] 3671 	pop	af
      000DB6 33               [ 6] 3672 	inc	sp
      000DB7                       3673 00104$:
                                   3674 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3675 	ld	a, 7 (ix)
      000DBA F5               [11] 3676 	push	af
      000DBB 33               [ 6] 3677 	inc	sp
      000DBC 21 04 1B         [10] 3678 	ld	hl, #0x1b04
      000DBF E5               [11] 3679 	push	hl
      000DC0 CDr00r00         [17] 3680 	call	_WRTVRM
      000DC3 F1               [10] 3681 	pop	af
      000DC4 33               [ 6] 3682 	inc	sp
                                   3683 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3684 	ld	a, -4 (ix)
      000DC8 F5               [11] 3685 	push	af
      000DC9 33               [ 6] 3686 	inc	sp
      000DCA 21 07 1B         [10] 3687 	ld	hl, #0x1b07
      000DCD E5               [11] 3688 	push	hl
      000DCE CDr00r00         [17] 3689 	call	_WRTVRM
      000DD1 F1               [10] 3690 	pop	af
      000DD2 33               [ 6] 3691 	inc	sp
                                   3692 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3693 	ld	a, 7 (ix)
      000DD6 F5               [11] 3694 	push	af
      000DD7 33               [ 6] 3695 	inc	sp
      000DD8 21 08 1B         [10] 3696 	ld	hl, #0x1b08
      000DDB E5               [11] 3697 	push	hl
      000DDC CDr00r00         [17] 3698 	call	_WRTVRM
      000DDF F1               [10] 3699 	pop	af
      000DE0 33               [ 6] 3700 	inc	sp
                                   3701 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3702 	ld	a, -4 (ix)
      000DE4 F5               [11] 3703 	push	af
      000DE5 33               [ 6] 3704 	inc	sp
      000DE6 21 0B 1B         [10] 3705 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3706 	push	hl
      000DEA CDr00r00         [17] 3707 	call	_WRTVRM
      000DED F1               [10] 3708 	pop	af
      000DEE 33               [ 6] 3709 	inc	sp
                                   3710 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3711 	ld	a, 7 (ix)
      000DF2 F5               [11] 3712 	push	af
      000DF3 33               [ 6] 3713 	inc	sp
      000DF4 21 0C 1B         [10] 3714 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3715 	push	hl
      000DF8 CDr00r00         [17] 3716 	call	_WRTVRM
      000DFB F1               [10] 3717 	pop	af
      000DFC 33               [ 6] 3718 	inc	sp
                                   3719 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3720 	ld	a, -4 (ix)
      000E00 F5               [11] 3721 	push	af
      000E01 33               [ 6] 3722 	inc	sp
      000E02 21 0F 1B         [10] 3723 	ld	hl, #0x1b0f
      000E05 E5               [11] 3724 	push	hl
      000E06 CDr00r00         [17] 3725 	call	_WRTVRM
      000E09 F1               [10] 3726 	pop	af
      000E0A 33               [ 6] 3727 	inc	sp
                                   3728 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3729 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3730 	or	a, a
      000E0F 28 52            [12] 3731 	jr	Z, 00107$
                                   3732 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3733 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3734 	add	a, #0x10
      000E16 47               [ 4] 3735 	ld	b, a
      000E17 C5               [11] 3736 	push	bc
      000E18 C5               [11] 3737 	push	bc
      000E19 33               [ 6] 3738 	inc	sp
      000E1A 21 10 1B         [10] 3739 	ld	hl, #0x1b10
      000E1D E5               [11] 3740 	push	hl
      000E1E CDr00r00         [17] 3741 	call	_WRTVRM
      000E21 F1               [10] 3742 	pop	af
      000E22 33               [ 6] 3743 	inc	sp
      000E23 DD 7E FD         [19] 3744 	ld	a, -3 (ix)
      000E26 F5               [11] 3745 	push	af
      000E27 33               [ 6] 3746 	inc	sp
      000E28 21 13 1B         [10] 3747 	ld	hl, #0x1b13
      000E2B E5               [11] 3748 	push	hl
      000E2C CDr00r00         [17] 3749 	call	_WRTVRM
      000E2F F1               [10] 3750 	pop	af
      000E30 33               [ 6] 3751 	inc	sp
      000E31 C1               [10] 3752 	pop	bc
                                   3753 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3754 	push	bc
      000E33 C5               [11] 3755 	push	bc
      000E34 33               [ 6] 3756 	inc	sp
      000E35 21 14 1B         [10] 3757 	ld	hl, #0x1b14
      000E38 E5               [11] 3758 	push	hl
      000E39 CDr00r00         [17] 3759 	call	_WRTVRM
      000E3C F1               [10] 3760 	pop	af
      000E3D 33               [ 6] 3761 	inc	sp
      000E3E DD 7E FD         [19] 3762 	ld	a, -3 (ix)
      000E41 F5               [11] 3763 	push	af
      000E42 33               [ 6] 3764 	inc	sp
      000E43 21 17 1B         [10] 3765 	ld	hl, #0x1b17
      000E46 E5               [11] 3766 	push	hl
      000E47 CDr00r00         [17] 3767 	call	_WRTVRM
      000E4A F1               [10] 3768 	pop	af
      000E4B 33               [ 6] 3769 	inc	sp
      000E4C 33               [ 6] 3770 	inc	sp
      000E4D 21 18 1B         [10] 3771 	ld	hl, #0x1b18
      000E50 E5               [11] 3772 	push	hl
      000E51 CDr00r00         [17] 3773 	call	_WRTVRM
      000E54 F1               [10] 3774 	pop	af
      000E55 33               [ 6] 3775 	inc	sp
                                   3776 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3777 	ld	a, -3 (ix)
      000E59 F5               [11] 3778 	push	af
      000E5A 33               [ 6] 3779 	inc	sp
      000E5B 21 1B 1B         [10] 3780 	ld	hl, #0x1b1b
      000E5E E5               [11] 3781 	push	hl
      000E5F CDr00r00         [17] 3782 	call	_WRTVRM
      000E62 F1               [10] 3783 	pop	af
      000E63                       3784 00107$:
                                   3785 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3786 	ld	sp, ix
      000E65 DD E1            [14] 3787 	pop	ix
      000E67 C9               [10] 3788 	ret
                                   3789 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3790 ;	---------------------------------
                                   3791 ; Function HideHitSprite
                                   3792 ; ---------------------------------
      000E68                       3793 _HideHitSprite::
                                   3794 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3795 	ld	a, #0xc0
      000E6A F5               [11] 3796 	push	af
      000E6B 33               [ 6] 3797 	inc	sp
      000E6C 21 04 1B         [10] 3798 	ld	hl, #0x1b04
      000E6F E5               [11] 3799 	push	hl
      000E70 CDr00r00         [17] 3800 	call	_WRTVRM
      000E73 F1               [10] 3801 	pop	af
      000E74 33               [ 6] 3802 	inc	sp
                                   3803 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3804 	ld	a, #0xc0
      000E77 F5               [11] 3805 	push	af
      000E78 33               [ 6] 3806 	inc	sp
      000E79 21 08 1B         [10] 3807 	ld	hl, #0x1b08
      000E7C E5               [11] 3808 	push	hl
      000E7D CDr00r00         [17] 3809 	call	_WRTVRM
      000E80 F1               [10] 3810 	pop	af
      000E81 33               [ 6] 3811 	inc	sp
                                   3812 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3813 	ld	a, #0xc0
      000E84 F5               [11] 3814 	push	af
      000E85 33               [ 6] 3815 	inc	sp
      000E86 21 0C 1B         [10] 3816 	ld	hl, #0x1b0c
      000E89 E5               [11] 3817 	push	hl
      000E8A CDr00r00         [17] 3818 	call	_WRTVRM
      000E8D F1               [10] 3819 	pop	af
      000E8E 33               [ 6] 3820 	inc	sp
                                   3821 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3822 	ld	a, #0xc0
      000E91 F5               [11] 3823 	push	af
      000E92 33               [ 6] 3824 	inc	sp
      000E93 21 10 1B         [10] 3825 	ld	hl, #0x1b10
      000E96 E5               [11] 3826 	push	hl
      000E97 CDr00r00         [17] 3827 	call	_WRTVRM
      000E9A F1               [10] 3828 	pop	af
      000E9B 33               [ 6] 3829 	inc	sp
                                   3830 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3831 	ld	a, #0xc0
      000E9E F5               [11] 3832 	push	af
      000E9F 33               [ 6] 3833 	inc	sp
      000EA0 21 14 1B         [10] 3834 	ld	hl, #0x1b14
      000EA3 E5               [11] 3835 	push	hl
      000EA4 CDr00r00         [17] 3836 	call	_WRTVRM
      000EA7 F1               [10] 3837 	pop	af
      000EA8 33               [ 6] 3838 	inc	sp
                                   3839 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3840 	ld	a, #0xc0
      000EAB F5               [11] 3841 	push	af
      000EAC 33               [ 6] 3842 	inc	sp
      000EAD 21 18 1B         [10] 3843 	ld	hl, #0x1b18
      000EB0 E5               [11] 3844 	push	hl
      000EB1 CDr00r00         [17] 3845 	call	_WRTVRM
      000EB4 F1               [10] 3846 	pop	af
      000EB5 33               [ 6] 3847 	inc	sp
                                   3848 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3849 	ret
                                   3850 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3851 ;	---------------------------------
                                   3852 ; Function HideExplosionSprite
                                   3853 ; ---------------------------------
      000EB7                       3854 _HideExplosionSprite::
                                   3855 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3856 	ld	a, #0xc0
      000EB9 F5               [11] 3857 	push	af
      000EBA 33               [ 6] 3858 	inc	sp
      000EBB 21 1C 1B         [10] 3859 	ld	hl, #0x1b1c
      000EBE E5               [11] 3860 	push	hl
      000EBF CDr00r00         [17] 3861 	call	_WRTVRM
      000EC2 F1               [10] 3862 	pop	af
      000EC3 33               [ 6] 3863 	inc	sp
                                   3864 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3865 	ld	a, #0xc0
      000EC6 F5               [11] 3866 	push	af
      000EC7 33               [ 6] 3867 	inc	sp
      000EC8 21 20 1B         [10] 3868 	ld	hl, #0x1b20
      000ECB E5               [11] 3869 	push	hl
      000ECC CDr00r00         [17] 3870 	call	_WRTVRM
      000ECF F1               [10] 3871 	pop	af
      000ED0 33               [ 6] 3872 	inc	sp
                                   3873 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3874 	ld	a, #0xc0
      000ED3 F5               [11] 3875 	push	af
      000ED4 33               [ 6] 3876 	inc	sp
      000ED5 21 24 1B         [10] 3877 	ld	hl, #0x1b24
      000ED8 E5               [11] 3878 	push	hl
      000ED9 CDr00r00         [17] 3879 	call	_WRTVRM
      000EDC F1               [10] 3880 	pop	af
      000EDD 33               [ 6] 3881 	inc	sp
                                   3882 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3883 	ret
                                   3884 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3885 ;	---------------------------------
                                   3886 ; Function DrawExplosionSprite
                                   3887 ; ---------------------------------
      000EDF                       3888 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3889 	dec	sp
                                   3890 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3891 	ld	iy, #5
      000EE4 FD 39            [15] 3892 	add	iy, sp
      000EE6 FD 6E 00         [19] 3893 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3894 	srl	l
      000EEB CB 3D            [ 8] 3895 	srl	l
                                   3896 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3897 	ld	a, #0x07
      000EEF 95               [ 4] 3898 	sub	a, l
      000EF0 30 07            [12] 3899 	jr	NC, 00102$
                                   3900 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3901 	inc	sp
      000EF3 C3rB7r0E         [10] 3902 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3903 	jp	00104$
      000EF9                       3904 00102$:
                                   3905 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3906 	add	hl, hl
      000EFA 29               [11] 3907 	add	hl, hl
                                   3908 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3909 	ld	iy, #4
      000EFF FD 39            [15] 3910 	add	iy, sp
      000F01 FD 7E 00         [19] 3911 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3912 	add	a, #0xf0
      000F06 67               [ 4] 3913 	ld	h, a
      000F07 E5               [11] 3914 	push	hl
      000F08 E5               [11] 3915 	push	hl
      000F09 33               [ 6] 3916 	inc	sp
      000F0A 11 1C 1B         [10] 3917 	ld	de, #0x1b1c
      000F0D D5               [11] 3918 	push	de
      000F0E CDr00r00         [17] 3919 	call	_WRTVRM
      000F11 F1               [10] 3920 	pop	af
      000F12 33               [ 6] 3921 	inc	sp
      000F13 21 05 00         [10] 3922 	ld	hl, #5
      000F16 39               [11] 3923 	add	hl, sp
      000F17 7E               [ 7] 3924 	ld	a, (hl)
      000F18 F5               [11] 3925 	push	af
      000F19 33               [ 6] 3926 	inc	sp
      000F1A 11 1D 1B         [10] 3927 	ld	de, #0x1b1d
      000F1D D5               [11] 3928 	push	de
      000F1E CDr00r00         [17] 3929 	call	_WRTVRM
      000F21 F1               [10] 3930 	pop	af
      000F22 33               [ 6] 3931 	inc	sp
      000F23 E1               [10] 3932 	pop	hl
                                   3933 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3934 	ld	a, l
      000F25 C6 2C            [ 7] 3935 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3936 	ld	iy, #0
      000F2B FD 39            [15] 3937 	add	iy, sp
      000F2D FD 77 00         [19] 3938 	ld	0 (iy), a
      000F30 E5               [11] 3939 	push	hl
      000F31 F5               [11] 3940 	push	af
      000F32 33               [ 6] 3941 	inc	sp
      000F33 11 1E 1B         [10] 3942 	ld	de, #0x1b1e
      000F36 D5               [11] 3943 	push	de
      000F37 CDr00r00         [17] 3944 	call	_WRTVRM
      000F3A F1               [10] 3945 	pop	af
      000F3B 33               [ 6] 3946 	inc	sp
      000F3C 3E 0F            [ 7] 3947 	ld	a, #0x0f
      000F3E F5               [11] 3948 	push	af
      000F3F 33               [ 6] 3949 	inc	sp
      000F40 11 1F 1B         [10] 3950 	ld	de, #0x1b1f
      000F43 D5               [11] 3951 	push	de
      000F44 CDr00r00         [17] 3952 	call	_WRTVRM
      000F47 F1               [10] 3953 	pop	af
      000F48 33               [ 6] 3954 	inc	sp
      000F49 E1               [10] 3955 	pop	hl
                                   3956 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3957 	push	hl
      000F4B E5               [11] 3958 	push	hl
      000F4C 33               [ 6] 3959 	inc	sp
      000F4D 11 20 1B         [10] 3960 	ld	de, #0x1b20
      000F50 D5               [11] 3961 	push	de
      000F51 CDr00r00         [17] 3962 	call	_WRTVRM
      000F54 F1               [10] 3963 	pop	af
      000F55 33               [ 6] 3964 	inc	sp
      000F56 E1               [10] 3965 	pop	hl
                                   3966 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3967 	ld	iy, #3
      000F5B FD 39            [15] 3968 	add	iy, sp
      000F5D FD 6E 00         [19] 3969 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3970 	ld	a, l
      000F61 C6 10            [ 7] 3971 	add	a, #0x10
      000F63 E5               [11] 3972 	push	hl
      000F64 F5               [11] 3973 	push	af
      000F65 33               [ 6] 3974 	inc	sp
      000F66 11 21 1B         [10] 3975 	ld	de, #0x1b21
      000F69 D5               [11] 3976 	push	de
      000F6A CDr00r00         [17] 3977 	call	_WRTVRM
      000F6D F1               [10] 3978 	pop	af
      000F6E 33               [ 6] 3979 	inc	sp
      000F6F 21 02 00         [10] 3980 	ld	hl, #2
      000F72 39               [11] 3981 	add	hl, sp
      000F73 7E               [ 7] 3982 	ld	a, (hl)
      000F74 F5               [11] 3983 	push	af
      000F75 33               [ 6] 3984 	inc	sp
      000F76 11 22 1B         [10] 3985 	ld	de, #0x1b22
      000F79 D5               [11] 3986 	push	de
      000F7A CDr00r00         [17] 3987 	call	_WRTVRM
      000F7D F1               [10] 3988 	pop	af
      000F7E 33               [ 6] 3989 	inc	sp
      000F7F 3E 0A            [ 7] 3990 	ld	a, #0x0a
      000F81 F5               [11] 3991 	push	af
      000F82 33               [ 6] 3992 	inc	sp
      000F83 11 23 1B         [10] 3993 	ld	de, #0x1b23
      000F86 D5               [11] 3994 	push	de
      000F87 CDr00r00         [17] 3995 	call	_WRTVRM
      000F8A F1               [10] 3996 	pop	af
      000F8B 33               [ 6] 3997 	inc	sp
      000F8C E1               [10] 3998 	pop	hl
                                   3999 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 4000 	push	hl
      000F8E E5               [11] 4001 	push	hl
      000F8F 33               [ 6] 4002 	inc	sp
      000F90 11 24 1B         [10] 4003 	ld	de, #0x1b24
      000F93 D5               [11] 4004 	push	de
      000F94 CDr00r00         [17] 4005 	call	_WRTVRM
      000F97 F1               [10] 4006 	pop	af
      000F98 33               [ 6] 4007 	inc	sp
      000F99 E1               [10] 4008 	pop	hl
                                   4009 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4010 	ld	a, l
      000F9B C6 20            [ 7] 4011 	add	a, #0x20
      000F9D F5               [11] 4012 	push	af
      000F9E 33               [ 6] 4013 	inc	sp
      000F9F 21 25 1B         [10] 4014 	ld	hl, #0x1b25
      000FA2 E5               [11] 4015 	push	hl
      000FA3 CDr00r00         [17] 4016 	call	_WRTVRM
      000FA6 F1               [10] 4017 	pop	af
      000FA7 33               [ 6] 4018 	inc	sp
                                   4019 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4020 	ld	hl, #0
      000FAB 39               [11] 4021 	add	hl, sp
      000FAC 7E               [ 7] 4022 	ld	a, (hl)
      000FAD F5               [11] 4023 	push	af
      000FAE 33               [ 6] 4024 	inc	sp
      000FAF 21 26 1B         [10] 4025 	ld	hl, #0x1b26
      000FB2 E5               [11] 4026 	push	hl
      000FB3 CDr00r00         [17] 4027 	call	_WRTVRM
      000FB6 F1               [10] 4028 	pop	af
      000FB7 33               [ 6] 4029 	inc	sp
                                   4030 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4031 	ld	a, #0x03
      000FBA F5               [11] 4032 	push	af
      000FBB 33               [ 6] 4033 	inc	sp
      000FBC 21 27 1B         [10] 4034 	ld	hl, #0x1b27
      000FBF E5               [11] 4035 	push	hl
      000FC0 CDr00r00         [17] 4036 	call	_WRTVRM
      000FC3 F1               [10] 4037 	pop	af
      000FC4 33               [ 6] 4038 	inc	sp
      000FC5                       4039 00104$:
                                   4040 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4041 	inc	sp
      000FC6 C9               [10] 4042 	ret
                                   4043 ;src\/Graphics\Countdown.h:12: void AnimateSprites(byte x, byte y, byte pattern) {
                                   4044 ;	---------------------------------
                                   4045 ; Function AnimateSprites
                                   4046 ; ---------------------------------
      000FC7                       4047 _AnimateSprites::
      000FC7 DD E5            [15] 4048 	push	ix
      000FC9 DD 21 00 00      [14] 4049 	ld	ix,#0
      000FCD DD 39            [15] 4050 	add	ix,sp
      000FCF 3B               [ 6] 4051 	dec	sp
                                   4052 ;src\/Graphics\Countdown.h:14: WRTVRM(SPRATT, 	    y); //96-16);
      000FD0 DD 7E 05         [19] 4053 	ld	a, 5 (ix)
      000FD3 F5               [11] 4054 	push	af
      000FD4 33               [ 6] 4055 	inc	sp
      000FD5 21 00 1B         [10] 4056 	ld	hl, #0x1b00
      000FD8 E5               [11] 4057 	push	hl
      000FD9 CDr00r00         [17] 4058 	call	_WRTVRM
      000FDC F1               [10] 4059 	pop	af
      000FDD 33               [ 6] 4060 	inc	sp
                                   4061 ;src\/Graphics\Countdown.h:15: WRTVRM(SPRATT + 1, 	256-x-16); //128-16);
      000FDE DD 4E 04         [19] 4062 	ld	c, 4 (ix)
      000FE1 3E F0            [ 7] 4063 	ld	a, #0xf0
      000FE3 91               [ 4] 4064 	sub	a, c
      000FE4 DD 77 FF         [19] 4065 	ld	-1 (ix), a
      000FE7 F5               [11] 4066 	push	af
      000FE8 33               [ 6] 4067 	inc	sp
      000FE9 21 01 1B         [10] 4068 	ld	hl, #0x1b01
      000FEC E5               [11] 4069 	push	hl
      000FED CDr00r00         [17] 4070 	call	_WRTVRM
      000FF0 F1               [10] 4071 	pop	af
      000FF1 33               [ 6] 4072 	inc	sp
                                   4073 ;src\/Graphics\Countdown.h:16: WRTVRM(SPRATT + 2, 	pattern);
      000FF2 DD 7E 06         [19] 4074 	ld	a, 6 (ix)
      000FF5 F5               [11] 4075 	push	af
      000FF6 33               [ 6] 4076 	inc	sp
      000FF7 21 02 1B         [10] 4077 	ld	hl, #0x1b02
      000FFA E5               [11] 4078 	push	hl
      000FFB CDr00r00         [17] 4079 	call	_WRTVRM
      000FFE F1               [10] 4080 	pop	af
      000FFF 33               [ 6] 4081 	inc	sp
                                   4082 ;src\/Graphics\Countdown.h:17: WRTVRM(SPRATT + 3, 	10);
      001000 3E 0A            [ 7] 4083 	ld	a, #0x0a
      001002 F5               [11] 4084 	push	af
      001003 33               [ 6] 4085 	inc	sp
      001004 21 03 1B         [10] 4086 	ld	hl, #0x1b03
      001007 E5               [11] 4087 	push	hl
      001008 CDr00r00         [17] 4088 	call	_WRTVRM
      00100B F1               [10] 4089 	pop	af
      00100C 33               [ 6] 4090 	inc	sp
                                   4091 ;src\/Graphics\Countdown.h:20: WRTVRM(SPRATT + 4, 	y); //96-16);
      00100D DD 7E 05         [19] 4092 	ld	a, 5 (ix)
      001010 F5               [11] 4093 	push	af
      001011 33               [ 6] 4094 	inc	sp
      001012 21 04 1B         [10] 4095 	ld	hl, #0x1b04
      001015 E5               [11] 4096 	push	hl
      001016 CDr00r00         [17] 4097 	call	_WRTVRM
      001019 F1               [10] 4098 	pop	af
      00101A 33               [ 6] 4099 	inc	sp
                                   4100 ;src\/Graphics\Countdown.h:21: WRTVRM(SPRATT + 5, 	x);
      00101B DD 7E 04         [19] 4101 	ld	a, 4 (ix)
      00101E F5               [11] 4102 	push	af
      00101F 33               [ 6] 4103 	inc	sp
      001020 21 05 1B         [10] 4104 	ld	hl, #0x1b05
      001023 E5               [11] 4105 	push	hl
      001024 CDr00r00         [17] 4106 	call	_WRTVRM
      001027 F1               [10] 4107 	pop	af
      001028 33               [ 6] 4108 	inc	sp
                                   4109 ;src\/Graphics\Countdown.h:22: WRTVRM(SPRATT + 6,  pattern + 4);
      001029 DD 4E 06         [19] 4110 	ld	c, 6 (ix)
      00102C 79               [ 4] 4111 	ld	a, c
      00102D 3C               [ 4] 4112 	inc	a
      00102E 3C               [ 4] 4113 	inc	a
      00102F 3C               [ 4] 4114 	inc	a
      001030 3C               [ 4] 4115 	inc	a
      001031 C5               [11] 4116 	push	bc
      001032 F5               [11] 4117 	push	af
      001033 33               [ 6] 4118 	inc	sp
      001034 21 06 1B         [10] 4119 	ld	hl, #0x1b06
      001037 E5               [11] 4120 	push	hl
      001038 CDr00r00         [17] 4121 	call	_WRTVRM
      00103B F1               [10] 4122 	pop	af
      00103C 33               [ 6] 4123 	inc	sp
      00103D 3E 0A            [ 7] 4124 	ld	a, #0x0a
      00103F F5               [11] 4125 	push	af
      001040 33               [ 6] 4126 	inc	sp
      001041 21 07 1B         [10] 4127 	ld	hl, #0x1b07
      001044 E5               [11] 4128 	push	hl
      001045 CDr00r00         [17] 4129 	call	_WRTVRM
      001048 F1               [10] 4130 	pop	af
      001049 33               [ 6] 4131 	inc	sp
      00104A C1               [10] 4132 	pop	bc
                                   4133 ;src\/Graphics\Countdown.h:26: WRTVRM(SPRATT + 8, 	192-y-16); //96);
      00104B DD 46 05         [19] 4134 	ld	b, 5 (ix)
      00104E 3E B0            [ 7] 4135 	ld	a, #0xb0
      001050 90               [ 4] 4136 	sub	a, b
      001051 47               [ 4] 4137 	ld	b, a
      001052 C5               [11] 4138 	push	bc
      001053 C5               [11] 4139 	push	bc
      001054 33               [ 6] 4140 	inc	sp
      001055 21 08 1B         [10] 4141 	ld	hl, #0x1b08
      001058 E5               [11] 4142 	push	hl
      001059 CDr00r00         [17] 4143 	call	_WRTVRM
      00105C F1               [10] 4144 	pop	af
      00105D 33               [ 6] 4145 	inc	sp
      00105E DD 7E FF         [19] 4146 	ld	a, -1 (ix)
      001061 F5               [11] 4147 	push	af
      001062 33               [ 6] 4148 	inc	sp
      001063 21 09 1B         [10] 4149 	ld	hl, #0x1b09
      001066 E5               [11] 4150 	push	hl
      001067 CDr00r00         [17] 4151 	call	_WRTVRM
      00106A F1               [10] 4152 	pop	af
      00106B 33               [ 6] 4153 	inc	sp
      00106C C1               [10] 4154 	pop	bc
                                   4155 ;src\/Graphics\Countdown.h:28: WRTVRM(SPRATT + 10,	pattern + 8);
      00106D 79               [ 4] 4156 	ld	a, c
      00106E C6 08            [ 7] 4157 	add	a, #0x08
      001070 C5               [11] 4158 	push	bc
      001071 F5               [11] 4159 	push	af
      001072 33               [ 6] 4160 	inc	sp
      001073 21 0A 1B         [10] 4161 	ld	hl, #0x1b0a
      001076 E5               [11] 4162 	push	hl
      001077 CDr00r00         [17] 4163 	call	_WRTVRM
      00107A F1               [10] 4164 	pop	af
      00107B 33               [ 6] 4165 	inc	sp
      00107C 3E 0A            [ 7] 4166 	ld	a, #0x0a
      00107E F5               [11] 4167 	push	af
      00107F 33               [ 6] 4168 	inc	sp
      001080 21 0B 1B         [10] 4169 	ld	hl, #0x1b0b
      001083 E5               [11] 4170 	push	hl
      001084 CDr00r00         [17] 4171 	call	_WRTVRM
      001087 F1               [10] 4172 	pop	af
      001088 33               [ 6] 4173 	inc	sp
      001089 C1               [10] 4174 	pop	bc
                                   4175 ;src\/Graphics\Countdown.h:32: WRTVRM(SPRATT + 12,	192-y-16); //96);
      00108A C5               [11] 4176 	push	bc
      00108B C5               [11] 4177 	push	bc
      00108C 33               [ 6] 4178 	inc	sp
      00108D 21 0C 1B         [10] 4179 	ld	hl, #0x1b0c
      001090 E5               [11] 4180 	push	hl
      001091 CDr00r00         [17] 4181 	call	_WRTVRM
      001094 F1               [10] 4182 	pop	af
      001095 33               [ 6] 4183 	inc	sp
      001096 DD 7E 04         [19] 4184 	ld	a, 4 (ix)
      001099 F5               [11] 4185 	push	af
      00109A 33               [ 6] 4186 	inc	sp
      00109B 21 0D 1B         [10] 4187 	ld	hl, #0x1b0d
      00109E E5               [11] 4188 	push	hl
      00109F CDr00r00         [17] 4189 	call	_WRTVRM
      0010A2 F1               [10] 4190 	pop	af
      0010A3 33               [ 6] 4191 	inc	sp
      0010A4 C1               [10] 4192 	pop	bc
                                   4193 ;src\/Graphics\Countdown.h:34: WRTVRM(SPRATT + 14,	pattern + 12);
      0010A5 79               [ 4] 4194 	ld	a, c
      0010A6 C6 0C            [ 7] 4195 	add	a, #0x0c
      0010A8 F5               [11] 4196 	push	af
      0010A9 33               [ 6] 4197 	inc	sp
      0010AA 21 0E 1B         [10] 4198 	ld	hl, #0x1b0e
      0010AD E5               [11] 4199 	push	hl
      0010AE CDr00r00         [17] 4200 	call	_WRTVRM
      0010B1 F1               [10] 4201 	pop	af
      0010B2 33               [ 6] 4202 	inc	sp
                                   4203 ;src\/Graphics\Countdown.h:35: WRTVRM(SPRATT + 15,	10);
      0010B3 3E 0A            [ 7] 4204 	ld	a, #0x0a
      0010B5 F5               [11] 4205 	push	af
      0010B6 33               [ 6] 4206 	inc	sp
      0010B7 21 0F 1B         [10] 4207 	ld	hl, #0x1b0f
      0010BA E5               [11] 4208 	push	hl
      0010BB CDr00r00         [17] 4209 	call	_WRTVRM
      0010BE F1               [10] 4210 	pop	af
      0010BF 33               [ 6] 4211 	inc	sp
                                   4212 ;src\/Graphics\Countdown.h:36: }
      0010C0 33               [ 6] 4213 	inc	sp
      0010C1 DD E1            [14] 4214 	pop	ix
      0010C3 C9               [10] 4215 	ret
      0010C4                       4216 _colors:
      0010C4 0F                    4217 	.db #0x0f	; 15
      0010C5 0E                    4218 	.db #0x0e	; 14
      0010C6 05                    4219 	.db #0x05	; 5
      0010C7 04                    4220 	.db #0x04	; 4
      0010C8 04                    4221 	.db #0x04	; 4
      0010C9 05                    4222 	.db #0x05	; 5
      0010CA 0E                    4223 	.db #0x0e	; 14
      0010CB 0F                    4224 	.db #0x0f	; 15
                                   4225 ;src\/Graphics\Countdown.h:38: void BlinkNumber(byte colorIndex) {
                                   4226 ;	---------------------------------
                                   4227 ; Function BlinkNumber
                                   4228 ; ---------------------------------
      0010CC                       4229 _BlinkNumber::
                                   4230 ;src\/Graphics\Countdown.h:41: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      0010CC 3ErC4            [ 7] 4231 	ld	a, #<(_colors)
      0010CE 21 02 00         [10] 4232 	ld	hl, #2
      0010D1 39               [11] 4233 	add	hl, sp
      0010D2 86               [ 7] 4234 	add	a, (hl)
      0010D3 4F               [ 4] 4235 	ld	c, a
      0010D4 3Es10            [ 7] 4236 	ld	a, #>(_colors)
      0010D6 CE 00            [ 7] 4237 	adc	a, #0x00
      0010D8 47               [ 4] 4238 	ld	b, a
      0010D9 0A               [ 7] 4239 	ld	a, (bc)
      0010DA C5               [11] 4240 	push	bc
      0010DB F5               [11] 4241 	push	af
      0010DC 33               [ 6] 4242 	inc	sp
      0010DD 21 03 1B         [10] 4243 	ld	hl, #0x1b03
      0010E0 E5               [11] 4244 	push	hl
      0010E1 CDr00r00         [17] 4245 	call	_WRTVRM
      0010E4 F1               [10] 4246 	pop	af
      0010E5 33               [ 6] 4247 	inc	sp
      0010E6 C1               [10] 4248 	pop	bc
                                   4249 ;src\/Graphics\Countdown.h:42: WRTVRM(SPRATT + 7, 	colors[colorIndex]);
      0010E7 0A               [ 7] 4250 	ld	a, (bc)
      0010E8 C5               [11] 4251 	push	bc
      0010E9 F5               [11] 4252 	push	af
      0010EA 33               [ 6] 4253 	inc	sp
      0010EB 21 07 1B         [10] 4254 	ld	hl, #0x1b07
      0010EE E5               [11] 4255 	push	hl
      0010EF CDr00r00         [17] 4256 	call	_WRTVRM
      0010F2 F1               [10] 4257 	pop	af
      0010F3 33               [ 6] 4258 	inc	sp
      0010F4 C1               [10] 4259 	pop	bc
                                   4260 ;src\/Graphics\Countdown.h:43: WRTVRM(SPRATT + 11,	colors[colorIndex]);
      0010F5 0A               [ 7] 4261 	ld	a, (bc)
      0010F6 C5               [11] 4262 	push	bc
      0010F7 F5               [11] 4263 	push	af
      0010F8 33               [ 6] 4264 	inc	sp
      0010F9 21 0B 1B         [10] 4265 	ld	hl, #0x1b0b
      0010FC E5               [11] 4266 	push	hl
      0010FD CDr00r00         [17] 4267 	call	_WRTVRM
      001100 F1               [10] 4268 	pop	af
      001101 33               [ 6] 4269 	inc	sp
      001102 C1               [10] 4270 	pop	bc
                                   4271 ;src\/Graphics\Countdown.h:44: WRTVRM(SPRATT + 15, colors[colorIndex]);    
      001103 0A               [ 7] 4272 	ld	a, (bc)
      001104 F5               [11] 4273 	push	af
      001105 33               [ 6] 4274 	inc	sp
      001106 21 0F 1B         [10] 4275 	ld	hl, #0x1b0f
      001109 E5               [11] 4276 	push	hl
      00110A CDr00r00         [17] 4277 	call	_WRTVRM
      00110D F1               [10] 4278 	pop	af
      00110E 33               [ 6] 4279 	inc	sp
                                   4280 ;src\/Graphics\Countdown.h:45: }
      00110F C9               [10] 4281 	ret
                                   4282 ;src\/Graphics\Countdown.h:47: void ShowCountdown() {
                                   4283 ;	---------------------------------
                                   4284 ; Function ShowCountdown
                                   4285 ; ---------------------------------
      001110                       4286 _ShowCountdown::
      001110 DD E5            [15] 4287 	push	ix
      001112 DD 21 00 00      [14] 4288 	ld	ix,#0
      001116 DD 39            [15] 4289 	add	ix,sp
      001118 F5               [11] 4290 	push	af
      001119 F5               [11] 4291 	push	af
      00111A 3B               [ 6] 4292 	dec	sp
                                   4293 ;src\/Graphics\Countdown.h:49: byte x = 128-80, y = 0, colorIndex = 0;
      00111B 0E 30            [ 7] 4294 	ld	c, #0x30
      00111D DD 36 FB 00      [19] 4295 	ld	-5 (ix), #0
      001121 DD 36 FE 00      [19] 4296 	ld	-2 (ix), #0
                                   4297 ;src\/Graphics\Countdown.h:51: while(counter++ < 240) {
      001125 DD 36 FF 00      [19] 4298 	ld	-1 (ix), #0
      001129                       4299 00137$:
      001129 DD 7E FF         [19] 4300 	ld	a, -1 (ix)
      00112C D6 F0            [ 7] 4301 	sub	a, #0xf0
      00112E D2r5Ar12         [10] 4302 	jp	NC, 00139$
      001131 DD 34 FF         [23] 4303 	inc	-1 (ix)
                                   4304 ;src\/Graphics\Countdown.h:61: word lastJiffy = JIFFY;
      001134 ED 5B 9E FC      [20] 4305 	ld	de, (_JIFFY)
                                   4306 ;src\/Graphics\Countdown.h:62: while (lastJiffy == JIFFY) {
      001138                       4307 00101$:
      001138 2A 9E FC         [16] 4308 	ld	hl, (_JIFFY)
      00113B BF               [ 4] 4309 	cp	a, a
      00113C ED 52            [15] 4310 	sbc	hl, de
      00113E 28 F8            [12] 4311 	jr	Z, 00101$
                                   4312 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001140 79               [ 4] 4313 	ld	a, c
      001141 D6 80            [ 7] 4314 	sub	a, #0x80
      001143 3E 00            [ 7] 4315 	ld	a, #0x00
      001145 17               [ 4] 4316 	rla
      001146 47               [ 4] 4317 	ld	b, a
      001147 59               [ 4] 4318 	ld	e, c
                                   4319 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001148 DD 7E FB         [19] 4320 	ld	a, -5 (ix)
      00114B D6 50            [ 7] 4321 	sub	a, #0x50
      00114D 3E 00            [ 7] 4322 	ld	a, #0x00
      00114F 17               [ 4] 4323 	rla
      001150 DD 77 FC         [19] 4324 	ld	-4 (ix), a
      001153 DD 56 FB         [19] 4325 	ld	d, -5 (ix)
                                   4326 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001156 1C               [ 4] 4327 	inc	e
      001157 1C               [ 4] 4328 	inc	e
      001158 1C               [ 4] 4329 	inc	e
      001159 1C               [ 4] 4330 	inc	e
                                   4331 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      00115A 7A               [ 4] 4332 	ld	a, d
      00115B C6 04            [ 7] 4333 	add	a, #0x04
      00115D DD 77 FD         [19] 4334 	ld	-3 (ix), a
                                   4335 ;src\/Graphics\Countdown.h:66: if(counter < 30) {
      001160 DD 7E FF         [19] 4336 	ld	a, -1 (ix)
      001163 D6 1E            [ 7] 4337 	sub	a, #0x1e
      001165 30 28            [12] 4338 	jr	NC, 00135$
                                   4339 ;src\/Graphics\Countdown.h:67: colorIndex = 0;
      001167 DD 36 FE 00      [19] 4340 	ld	-2 (ix), #0
                                   4341 ;src\/Graphics\Countdown.h:69: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_3_32X32);
      00116B C5               [11] 4342 	push	bc
      00116C D5               [11] 4343 	push	de
      00116D 3E 54            [ 7] 4344 	ld	a, #0x54
      00116F F5               [11] 4345 	push	af
      001170 33               [ 6] 4346 	inc	sp
      001171 DD 46 FB         [19] 4347 	ld	b, -5 (ix)
      001174 C5               [11] 4348 	push	bc
      001175 CDrC7r0F         [17] 4349 	call	_AnimateSprites
      001178 F1               [10] 4350 	pop	af
      001179 33               [ 6] 4351 	inc	sp
      00117A D1               [10] 4352 	pop	de
      00117B C1               [10] 4353 	pop	bc
                                   4354 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      00117C 78               [ 4] 4355 	ld	a, b
      00117D B7               [ 4] 4356 	or	a, a
      00117E 28 01            [12] 4357 	jr	Z, 00105$
      001180 4B               [ 4] 4358 	ld	c, e
      001181                       4359 00105$:
                                   4360 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001181 DD 7E FC         [19] 4361 	ld	a, -4 (ix)
      001184 B7               [ 4] 4362 	or	a, a
      001185 28 A2            [12] 4363 	jr	Z, 00137$
      001187 DD 7E FD         [19] 4364 	ld	a, -3 (ix)
      00118A DD 77 FB         [19] 4365 	ld	-5 (ix), a
      00118D 18 9A            [12] 4366 	jr	00137$
      00118F                       4367 00135$:
                                   4368 ;src\/Graphics\Countdown.h:74: else if(counter >= 60 && counter < 90) {
      00118F DD 7E FF         [19] 4369 	ld	a, -1 (ix)
      001192 D6 3C            [ 7] 4370 	sub	a, #0x3c
      001194 38 31            [12] 4371 	jr	C, 00131$
      001196 DD 7E FF         [19] 4372 	ld	a, -1 (ix)
      001199 D6 5A            [ 7] 4373 	sub	a, #0x5a
      00119B 30 2A            [12] 4374 	jr	NC, 00131$
                                   4375 ;src\/Graphics\Countdown.h:75: colorIndex = 0;
      00119D DD 36 FE 00      [19] 4376 	ld	-2 (ix), #0
                                   4377 ;src\/Graphics\Countdown.h:77: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_2_32X32);
      0011A1 C5               [11] 4378 	push	bc
      0011A2 D5               [11] 4379 	push	de
      0011A3 3E 64            [ 7] 4380 	ld	a, #0x64
      0011A5 F5               [11] 4381 	push	af
      0011A6 33               [ 6] 4382 	inc	sp
      0011A7 DD 46 FB         [19] 4383 	ld	b, -5 (ix)
      0011AA C5               [11] 4384 	push	bc
      0011AB CDrC7r0F         [17] 4385 	call	_AnimateSprites
      0011AE F1               [10] 4386 	pop	af
      0011AF 33               [ 6] 4387 	inc	sp
      0011B0 D1               [10] 4388 	pop	de
      0011B1 C1               [10] 4389 	pop	bc
                                   4390 ;src\/Graphics\Countdown.h:79: if(x < 128) x += 4;
      0011B2 78               [ 4] 4391 	ld	a, b
      0011B3 B7               [ 4] 4392 	or	a, a
      0011B4 28 01            [12] 4393 	jr	Z, 00109$
      0011B6 4B               [ 4] 4394 	ld	c, e
      0011B7                       4395 00109$:
                                   4396 ;src\/Graphics\Countdown.h:80: if(y < 80) y += 4;
      0011B7 DD 7E FC         [19] 4397 	ld	a, -4 (ix)
      0011BA B7               [ 4] 4398 	or	a, a
      0011BB CAr29r11         [10] 4399 	jp	Z, 00137$
      0011BE DD 7E FD         [19] 4400 	ld	a, -3 (ix)
      0011C1 DD 77 FB         [19] 4401 	ld	-5 (ix), a
      0011C4 C3r29r11         [10] 4402 	jp	00137$
      0011C7                       4403 00131$:
                                   4404 ;src\/Graphics\Countdown.h:82: else if(counter >= 120 && counter < 150) {
      0011C7 DD 7E FF         [19] 4405 	ld	a, -1 (ix)
      0011CA D6 78            [ 7] 4406 	sub	a, #0x78
      0011CC 38 31            [12] 4407 	jr	C, 00127$
      0011CE DD 7E FF         [19] 4408 	ld	a, -1 (ix)
      0011D1 D6 96            [ 7] 4409 	sub	a, #0x96
      0011D3 30 2A            [12] 4410 	jr	NC, 00127$
                                   4411 ;src\/Graphics\Countdown.h:83: colorIndex = 0;
      0011D5 DD 36 FE 00      [19] 4412 	ld	-2 (ix), #0
                                   4413 ;src\/Graphics\Countdown.h:85: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_1_32X32);
      0011D9 C5               [11] 4414 	push	bc
      0011DA D5               [11] 4415 	push	de
      0011DB 3E 74            [ 7] 4416 	ld	a, #0x74
      0011DD F5               [11] 4417 	push	af
      0011DE 33               [ 6] 4418 	inc	sp
      0011DF DD 46 FB         [19] 4419 	ld	b, -5 (ix)
      0011E2 C5               [11] 4420 	push	bc
      0011E3 CDrC7r0F         [17] 4421 	call	_AnimateSprites
      0011E6 F1               [10] 4422 	pop	af
      0011E7 33               [ 6] 4423 	inc	sp
      0011E8 D1               [10] 4424 	pop	de
      0011E9 C1               [10] 4425 	pop	bc
                                   4426 ;src\/Graphics\Countdown.h:87: if(x < 128) x += 4;
      0011EA 78               [ 4] 4427 	ld	a, b
      0011EB B7               [ 4] 4428 	or	a, a
      0011EC 28 01            [12] 4429 	jr	Z, 00113$
      0011EE 4B               [ 4] 4430 	ld	c, e
      0011EF                       4431 00113$:
                                   4432 ;src\/Graphics\Countdown.h:88: if(y < 80) y += 4;
      0011EF DD 7E FC         [19] 4433 	ld	a, -4 (ix)
      0011F2 B7               [ 4] 4434 	or	a, a
      0011F3 CAr29r11         [10] 4435 	jp	Z, 00137$
      0011F6 DD 7E FD         [19] 4436 	ld	a, -3 (ix)
      0011F9 DD 77 FB         [19] 4437 	ld	-5 (ix), a
      0011FC C3r29r11         [10] 4438 	jp	00137$
      0011FF                       4439 00127$:
                                   4440 ;src\/Graphics\Countdown.h:90: else if(counter >= 180 && counter < 210) {
      0011FF DD 7E FF         [19] 4441 	ld	a, -1 (ix)
      001202 D6 B4            [ 7] 4442 	sub	a, #0xb4
      001204 38 31            [12] 4443 	jr	C, 00123$
      001206 DD 7E FF         [19] 4444 	ld	a, -1 (ix)
      001209 D6 D2            [ 7] 4445 	sub	a, #0xd2
      00120B 30 2A            [12] 4446 	jr	NC, 00123$
                                   4447 ;src\/Graphics\Countdown.h:91: colorIndex = 0;
      00120D DD 36 FE 00      [19] 4448 	ld	-2 (ix), #0
                                   4449 ;src\/Graphics\Countdown.h:93: AnimateSprites(x, y, SPRITE_PATTERN_GO_32X32);
      001211 C5               [11] 4450 	push	bc
      001212 D5               [11] 4451 	push	de
      001213 3E 84            [ 7] 4452 	ld	a, #0x84
      001215 F5               [11] 4453 	push	af
      001216 33               [ 6] 4454 	inc	sp
      001217 DD 46 FB         [19] 4455 	ld	b, -5 (ix)
      00121A C5               [11] 4456 	push	bc
      00121B CDrC7r0F         [17] 4457 	call	_AnimateSprites
      00121E F1               [10] 4458 	pop	af
      00121F 33               [ 6] 4459 	inc	sp
      001220 D1               [10] 4460 	pop	de
      001221 C1               [10] 4461 	pop	bc
                                   4462 ;src\/Graphics\Countdown.h:95: if(x < 128) x += 4;
      001222 78               [ 4] 4463 	ld	a, b
      001223 B7               [ 4] 4464 	or	a, a
      001224 28 01            [12] 4465 	jr	Z, 00117$
      001226 4B               [ 4] 4466 	ld	c, e
      001227                       4467 00117$:
                                   4468 ;src\/Graphics\Countdown.h:96: if(y < 80) y += 4;
      001227 DD 7E FC         [19] 4469 	ld	a, -4 (ix)
      00122A B7               [ 4] 4470 	or	a, a
      00122B CAr29r11         [10] 4471 	jp	Z, 00137$
      00122E DD 7E FD         [19] 4472 	ld	a, -3 (ix)
      001231 DD 77 FB         [19] 4473 	ld	-5 (ix), a
      001234 C3r29r11         [10] 4474 	jp	00137$
      001237                       4475 00123$:
                                   4476 ;src\/Graphics\Countdown.h:99: x = 128-80;
      001237 0E 30            [ 7] 4477 	ld	c, #0x30
                                   4478 ;src\/Graphics\Countdown.h:100: y = 0;
      001239 DD 36 FB 00      [19] 4479 	ld	-5 (ix), #0
                                   4480 ;src\/Graphics\Countdown.h:102: BlinkNumber(colorIndex);
      00123D C5               [11] 4481 	push	bc
      00123E DD 7E FE         [19] 4482 	ld	a, -2 (ix)
      001241 F5               [11] 4483 	push	af
      001242 33               [ 6] 4484 	inc	sp
      001243 CDrCCr10         [17] 4485 	call	_BlinkNumber
      001246 33               [ 6] 4486 	inc	sp
      001247 C1               [10] 4487 	pop	bc
                                   4488 ;src\/Graphics\Countdown.h:104: colorIndex++;
      001248 DD 34 FE         [23] 4489 	inc	-2 (ix)
                                   4490 ;src\/Graphics\Countdown.h:105: if(colorIndex >= sizeof(colors)) colorIndex = 0;
      00124B DD 7E FE         [19] 4491 	ld	a, -2 (ix)
      00124E D6 08            [ 7] 4492 	sub	a, #0x08
      001250 DAr29r11         [10] 4493 	jp	C, 00137$
      001253 DD 36 FE 00      [19] 4494 	ld	-2 (ix), #0
      001257 C3r29r11         [10] 4495 	jp	00137$
      00125A                       4496 00139$:
                                   4497 ;src\/Graphics\Countdown.h:110: WRTVRM(SPRATT, 	        192);
      00125A 3E C0            [ 7] 4498 	ld	a, #0xc0
      00125C F5               [11] 4499 	push	af
      00125D 33               [ 6] 4500 	inc	sp
      00125E 21 00 1B         [10] 4501 	ld	hl, #0x1b00
      001261 E5               [11] 4502 	push	hl
      001262 CDr00r00         [17] 4503 	call	_WRTVRM
      001265 F1               [10] 4504 	pop	af
      001266 33               [ 6] 4505 	inc	sp
                                   4506 ;src\/Graphics\Countdown.h:111: WRTVRM(SPRATT + 4, 	    192);
      001267 3E C0            [ 7] 4507 	ld	a, #0xc0
      001269 F5               [11] 4508 	push	af
      00126A 33               [ 6] 4509 	inc	sp
      00126B 21 04 1B         [10] 4510 	ld	hl, #0x1b04
      00126E E5               [11] 4511 	push	hl
      00126F CDr00r00         [17] 4512 	call	_WRTVRM
      001272 F1               [10] 4513 	pop	af
      001273 33               [ 6] 4514 	inc	sp
                                   4515 ;src\/Graphics\Countdown.h:112: WRTVRM(SPRATT + 8, 	    192);
      001274 3E C0            [ 7] 4516 	ld	a, #0xc0
      001276 F5               [11] 4517 	push	af
      001277 33               [ 6] 4518 	inc	sp
      001278 21 08 1B         [10] 4519 	ld	hl, #0x1b08
      00127B E5               [11] 4520 	push	hl
      00127C CDr00r00         [17] 4521 	call	_WRTVRM
      00127F F1               [10] 4522 	pop	af
      001280 33               [ 6] 4523 	inc	sp
                                   4524 ;src\/Graphics\Countdown.h:113: WRTVRM(SPRATT + 12,	    192);
      001281 3E C0            [ 7] 4525 	ld	a, #0xc0
      001283 F5               [11] 4526 	push	af
      001284 33               [ 6] 4527 	inc	sp
      001285 21 0C 1B         [10] 4528 	ld	hl, #0x1b0c
      001288 E5               [11] 4529 	push	hl
      001289 CDr00r00         [17] 4530 	call	_WRTVRM
                                   4531 ;src\/Graphics\Countdown.h:114: }
      00128C DD F9            [10] 4532 	ld	sp,ix
      00128E DD E1            [14] 4533 	pop	ix
      001290 C9               [10] 4534 	ret
                                   4535 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   4536 ;	---------------------------------
                                   4537 ; Function DrawChar
                                   4538 ; ---------------------------------
      001291                       4539 _DrawChar::
      001291 DD E5            [15] 4540 	push	ix
      001293 DD 21 00 00      [14] 4541 	ld	ix,#0
      001297 DD 39            [15] 4542 	add	ix,sp
                                   4543 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      001299 DD 6E 06         [19] 4544 	ld	l, 6 (ix)
      00129C 26 00            [ 7] 4545 	ld	h, #0x00
      00129E 29               [11] 4546 	add	hl, hl
      00129F 29               [11] 4547 	add	hl, hl
      0012A0 29               [11] 4548 	add	hl, hl
      0012A1 29               [11] 4549 	add	hl, hl
      0012A2 29               [11] 4550 	add	hl, hl
      0012A3 01 00 18         [10] 4551 	ld	bc, #0x1800
      0012A6 09               [11] 4552 	add	hl, bc
      0012A7 DD 4E 05         [19] 4553 	ld	c, 5 (ix)
      0012AA 06 00            [ 7] 4554 	ld	b, #0x00
      0012AC 09               [11] 4555 	add	hl, bc
      0012AD DD 7E 04         [19] 4556 	ld	a, 4 (ix)
      0012B0 F5               [11] 4557 	push	af
      0012B1 33               [ 6] 4558 	inc	sp
      0012B2 E5               [11] 4559 	push	hl
      0012B3 CDr00r00         [17] 4560 	call	_WRTVRM
      0012B6 F1               [10] 4561 	pop	af
      0012B7 33               [ 6] 4562 	inc	sp
                                   4563 ;src\/Graphics\Graphics.h:3: }
      0012B8 DD E1            [14] 4564 	pop	ix
      0012BA C9               [10] 4565 	ret
                                   4566 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   4567 ;	---------------------------------
                                   4568 ; Function DrawString
                                   4569 ; ---------------------------------
      0012BB                       4570 _DrawString::
      0012BB DD E5            [15] 4571 	push	ix
      0012BD DD 21 00 00      [14] 4572 	ld	ix,#0
      0012C1 DD 39            [15] 4573 	add	ix,sp
                                   4574 ;src\/Graphics\Graphics.h:6: while (*str) {
      0012C3 DD 6E 06         [19] 4575 	ld	l, 6 (ix)
      0012C6 DD 4E 04         [19] 4576 	ld	c, 4 (ix)
      0012C9 DD 46 05         [19] 4577 	ld	b, 5 (ix)
      0012CC                       4578 00101$:
      0012CC 0A               [ 7] 4579 	ld	a, (bc)
      0012CD B7               [ 4] 4580 	or	a, a
      0012CE 28 1A            [12] 4581 	jr	Z, 00104$
                                   4582 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0012D0 55               [ 4] 4583 	ld	d, l
      0012D1 2C               [ 4] 4584 	inc	l
      0012D2 DD 75 06         [19] 4585 	ld	6 (ix), l
      0012D5 03               [ 6] 4586 	inc	bc
      0012D6 C6 0F            [ 7] 4587 	add	a, #0x0f
      0012D8 E5               [11] 4588 	push	hl
      0012D9 C5               [11] 4589 	push	bc
      0012DA DD 66 07         [19] 4590 	ld	h, 7 (ix)
      0012DD 6A               [ 4] 4591 	ld	l, d
      0012DE E5               [11] 4592 	push	hl
      0012DF F5               [11] 4593 	push	af
      0012E0 33               [ 6] 4594 	inc	sp
      0012E1 CDr91r12         [17] 4595 	call	_DrawChar
      0012E4 F1               [10] 4596 	pop	af
      0012E5 33               [ 6] 4597 	inc	sp
      0012E6 C1               [10] 4598 	pop	bc
      0012E7 E1               [10] 4599 	pop	hl
      0012E8 18 E2            [12] 4600 	jr	00101$
      0012EA                       4601 00104$:
                                   4602 ;src\/Graphics\Graphics.h:9: }
      0012EA DD E1            [14] 4603 	pop	ix
      0012EC C9               [10] 4604 	ret
                                   4605 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   4606 ;	---------------------------------
                                   4607 ; Function DrawNumber
                                   4608 ; ---------------------------------
      0012ED                       4609 _DrawNumber::
      0012ED DD E5            [15] 4610 	push	ix
      0012EF DD 21 00 00      [14] 4611 	ld	ix,#0
      0012F3 DD 39            [15] 4612 	add	ix,sp
      0012F5 21 FA FF         [10] 4613 	ld	hl, #-6
      0012F8 39               [11] 4614 	add	hl, sp
      0012F9 F9               [ 6] 4615 	ld	sp, hl
                                   4616 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      0012FA DD 36 FA 01      [19] 4617 	ld	-6 (ix), #0x01
                                   4618 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      0012FE DD 66 07         [19] 4619 	ld	h, 7 (ix)
      001301 DD 6E 06         [19] 4620 	ld	l, 6 (ix)
      001304 E5               [11] 4621 	push	hl
      001305 21rA1r13         [10] 4622 	ld	hl, #___str_0
      001308 E5               [11] 4623 	push	hl
      001309 CDrBBr12         [17] 4624 	call	_DrawString
      00130C F1               [10] 4625 	pop	af
      00130D F1               [10] 4626 	pop	af
                                   4627 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00130E DD 7E 06         [19] 4628 	ld	a, 6 (ix)
      001311 DD 77 FF         [19] 4629 	ld	-1 (ix), a
      001314 1E 06            [ 7] 4630 	ld	e, #0x06
      001316                       4631 00109$:
      001316 7B               [ 4] 4632 	ld	a, e
      001317 B7               [ 4] 4633 	or	a, a
      001318 CAr9Cr13         [10] 4634 	jp	Z, 00111$
                                   4635 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      00131B 7B               [ 4] 4636 	ld	a, e
      00131C 3D               [ 4] 4637 	dec	a
      00131D D5               [11] 4638 	push	de
      00131E 57               [ 4] 4639 	ld	d,a
      00131F 1E 0A            [ 7] 4640 	ld	e,#0x0a
      001321 D5               [11] 4641 	push	de
      001322 CDr1Dr00         [17] 4642 	call	_Power
      001325 F1               [10] 4643 	pop	af
      001326 D1               [10] 4644 	pop	de
      001327 DD 75 FB         [19] 4645 	ld	-5 (ix), l
      00132A DD 74 FC         [19] 4646 	ld	-4 (ix), h
                                   4647 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00132D D5               [11] 4648 	push	de
      00132E DD 6E FB         [19] 4649 	ld	l, -5 (ix)
      001331 DD 66 FC         [19] 4650 	ld	h, -4 (ix)
      001334 E5               [11] 4651 	push	hl
      001335 DD 6E 04         [19] 4652 	ld	l, 4 (ix)
      001338 DD 66 05         [19] 4653 	ld	h, 5 (ix)
      00133B E5               [11] 4654 	push	hl
      00133C CDr00r00         [17] 4655 	call	__divuint
      00133F F1               [10] 4656 	pop	af
      001340 F1               [10] 4657 	pop	af
      001341 DD 75 FD         [19] 4658 	ld	-3 (ix), l
      001344 DD 74 FE         [19] 4659 	ld	-2 (ix), h
      001347 D1               [10] 4660 	pop	de
      001348 DD 7E FA         [19] 4661 	ld	a, -6 (ix)
      00134B B7               [ 4] 4662 	or	a, a
      00134C 28 0C            [12] 4663 	jr	Z, 00102$
      00134E DD 7E FE         [19] 4664 	ld	a, -2 (ix)
      001351 DD B6 FD         [19] 4665 	or	a, -3 (ix)
      001354 28 04            [12] 4666 	jr	Z, 00102$
      001356 DD 36 FA 00      [19] 4667 	ld	-6 (ix), #0
      00135A                       4668 00102$:
                                   4669 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      00135A DD 7E FA         [19] 4670 	ld	a, -6 (ix)
      00135D B7               [ 4] 4671 	or	a, a
      00135E 28 04            [12] 4672 	jr	Z, 00104$
      001360 7B               [ 4] 4673 	ld	a, e
      001361 3D               [ 4] 4674 	dec	a
      001362 20 31            [12] 4675 	jr	NZ, 00105$
      001364                       4676 00104$:
                                   4677 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      001364 DD 7E FD         [19] 4678 	ld	a, -3 (ix)
      001367 C6 3F            [ 7] 4679 	add	a, #0x3f
      001369 D5               [11] 4680 	push	de
      00136A DD 66 07         [19] 4681 	ld	h, 7 (ix)
      00136D E5               [11] 4682 	push	hl
      00136E 33               [ 6] 4683 	inc	sp
      00136F DD 66 FF         [19] 4684 	ld	h, -1 (ix)
      001372 E5               [11] 4685 	push	hl
      001373 33               [ 6] 4686 	inc	sp
      001374 F5               [11] 4687 	push	af
      001375 33               [ 6] 4688 	inc	sp
      001376 CDr91r12         [17] 4689 	call	_DrawChar
      001379 F1               [10] 4690 	pop	af
      00137A 33               [ 6] 4691 	inc	sp
      00137B DD 6E FB         [19] 4692 	ld	l, -5 (ix)
      00137E DD 66 FC         [19] 4693 	ld	h, -4 (ix)
      001381 E5               [11] 4694 	push	hl
      001382 DD 6E 04         [19] 4695 	ld	l, 4 (ix)
      001385 DD 66 05         [19] 4696 	ld	h, 5 (ix)
      001388 E5               [11] 4697 	push	hl
      001389 CDr00r00         [17] 4698 	call	__moduint
      00138C F1               [10] 4699 	pop	af
      00138D F1               [10] 4700 	pop	af
      00138E D1               [10] 4701 	pop	de
      00138F DD 75 04         [19] 4702 	ld	4 (ix), l
      001392 DD 74 05         [19] 4703 	ld	5 (ix), h
      001395                       4704 00105$:
                                   4705 ;src\/Graphics\Graphics.h:29: col++;
      001395 DD 34 FF         [23] 4706 	inc	-1 (ix)
                                   4707 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      001398 1D               [ 4] 4708 	dec	e
      001399 C3r16r13         [10] 4709 	jp	00109$
      00139C                       4710 00111$:
                                   4711 ;src\/Graphics\Graphics.h:34: }
      00139C DD F9            [10] 4712 	ld	sp, ix
      00139E DD E1            [14] 4713 	pop	ix
      0013A0 C9               [10] 4714 	ret
      0013A1                       4715 ___str_0:
      0013A1 20 20 20 20 20 20     4716 	.ascii "      "
      0013A7 00                    4717 	.db 0x00
                                   4718 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   4719 ;	---------------------------------
                                   4720 ; Function DrawColumn
                                   4721 ; ---------------------------------
      0013A8                       4722 _DrawColumn::
      0013A8 DD E5            [15] 4723 	push	ix
      0013AA DD 21 00 00      [14] 4724 	ld	ix,#0
      0013AE DD 39            [15] 4725 	add	ix,sp
      0013B0 21 F9 FF         [10] 4726 	ld	hl, #-7
      0013B3 39               [11] 4727 	add	hl, sp
      0013B4 F9               [ 6] 4728 	ld	sp, hl
                                   4729 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0013B5 DD 4E 04         [19] 4730 	ld	c, 4 (ix)
      0013B8 06 00            [ 7] 4731 	ld	b, #0x00
      0013BA 21 00 18         [10] 4732 	ld	hl, #0x1800
      0013BD 09               [11] 4733 	add	hl, bc
      0013BE C5               [11] 4734 	push	bc
      0013BF 3E 18            [ 7] 4735 	ld	a, #0x18
      0013C1 F5               [11] 4736 	push	af
      0013C2 33               [ 6] 4737 	inc	sp
      0013C3 E5               [11] 4738 	push	hl
      0013C4 CDr00r00         [17] 4739 	call	_WRTVRM
      0013C7 F1               [10] 4740 	pop	af
      0013C8 33               [ 6] 4741 	inc	sp
      0013C9 C1               [10] 4742 	pop	bc
                                   4743 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      0013CA 21 01 18         [10] 4744 	ld	hl, #0x1801
      0013CD 09               [11] 4745 	add	hl, bc
      0013CE C5               [11] 4746 	push	bc
      0013CF 3E 19            [ 7] 4747 	ld	a, #0x19
      0013D1 F5               [11] 4748 	push	af
      0013D2 33               [ 6] 4749 	inc	sp
      0013D3 E5               [11] 4750 	push	hl
      0013D4 CDr00r00         [17] 4751 	call	_WRTVRM
      0013D7 F1               [10] 4752 	pop	af
      0013D8 33               [ 6] 4753 	inc	sp
      0013D9 C1               [10] 4754 	pop	bc
                                   4755 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      0013DA 21 02 18         [10] 4756 	ld	hl, #0x1802
      0013DD 09               [11] 4757 	add	hl, bc
      0013DE C5               [11] 4758 	push	bc
      0013DF 3E 1A            [ 7] 4759 	ld	a, #0x1a
      0013E1 F5               [11] 4760 	push	af
      0013E2 33               [ 6] 4761 	inc	sp
      0013E3 E5               [11] 4762 	push	hl
      0013E4 CDr00r00         [17] 4763 	call	_WRTVRM
      0013E7 F1               [10] 4764 	pop	af
      0013E8 33               [ 6] 4765 	inc	sp
      0013E9 C1               [10] 4766 	pop	bc
                                   4767 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      0013EA 21 20 18         [10] 4768 	ld	hl, #0x1820
      0013ED 09               [11] 4769 	add	hl, bc
      0013EE C5               [11] 4770 	push	bc
      0013EF 3E 1B            [ 7] 4771 	ld	a, #0x1b
      0013F1 F5               [11] 4772 	push	af
      0013F2 33               [ 6] 4773 	inc	sp
      0013F3 E5               [11] 4774 	push	hl
      0013F4 CDr00r00         [17] 4775 	call	_WRTVRM
      0013F7 F1               [10] 4776 	pop	af
      0013F8 33               [ 6] 4777 	inc	sp
      0013F9 C1               [10] 4778 	pop	bc
                                   4779 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      0013FA 21 21 18         [10] 4780 	ld	hl, #0x1821
      0013FD 09               [11] 4781 	add	hl, bc
      0013FE C5               [11] 4782 	push	bc
      0013FF 3E 1C            [ 7] 4783 	ld	a, #0x1c
      001401 F5               [11] 4784 	push	af
      001402 33               [ 6] 4785 	inc	sp
      001403 E5               [11] 4786 	push	hl
      001404 CDr00r00         [17] 4787 	call	_WRTVRM
      001407 F1               [10] 4788 	pop	af
      001408 33               [ 6] 4789 	inc	sp
      001409 C1               [10] 4790 	pop	bc
                                   4791 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      00140A 21 22 18         [10] 4792 	ld	hl, #0x1822
      00140D 09               [11] 4793 	add	hl, bc
      00140E C5               [11] 4794 	push	bc
      00140F 3E 1D            [ 7] 4795 	ld	a, #0x1d
      001411 F5               [11] 4796 	push	af
      001412 33               [ 6] 4797 	inc	sp
      001413 E5               [11] 4798 	push	hl
      001414 CDr00r00         [17] 4799 	call	_WRTVRM
      001417 F1               [10] 4800 	pop	af
      001418 33               [ 6] 4801 	inc	sp
      001419 C1               [10] 4802 	pop	bc
                                   4803 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      00141A 21 40 18         [10] 4804 	ld	hl, #0x1840
      00141D 09               [11] 4805 	add	hl, bc
      00141E E3               [19] 4806 	ex	(sp), hl
      00141F 21 41 18         [10] 4807 	ld	hl, #0x1841
      001422 09               [11] 4808 	add	hl, bc
      001423 DD 75 FB         [19] 4809 	ld	-5 (ix), l
      001426 DD 74 FC         [19] 4810 	ld	-4 (ix), h
      001429 21 42 18         [10] 4811 	ld	hl, #0x1842
      00142C 09               [11] 4812 	add	hl, bc
      00142D DD 75 FD         [19] 4813 	ld	-3 (ix), l
      001430 DD 74 FE         [19] 4814 	ld	-2 (ix), h
      001433 DD 36 FF 00      [19] 4815 	ld	-1 (ix), #0
      001437                       4816 00103$:
      001437 DD 7E FF         [19] 4817 	ld	a, -1 (ix)
      00143A D6 14            [ 7] 4818 	sub	a, #0x14
      00143C 30 4A            [12] 4819 	jr	NC, 00101$
                                   4820 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00143E DD 5E FF         [19] 4821 	ld	e, -1 (ix)
      001441 16 00            [ 7] 4822 	ld	d, #0x00
      001443 EB               [ 4] 4823 	ex	de, hl
      001444 29               [11] 4824 	add	hl, hl
      001445 29               [11] 4825 	add	hl, hl
      001446 29               [11] 4826 	add	hl, hl
      001447 29               [11] 4827 	add	hl, hl
      001448 29               [11] 4828 	add	hl, hl
      001449 EB               [ 4] 4829 	ex	de, hl
      00144A E1               [10] 4830 	pop	hl
      00144B E5               [11] 4831 	push	hl
      00144C 19               [11] 4832 	add	hl, de
      00144D C5               [11] 4833 	push	bc
      00144E D5               [11] 4834 	push	de
      00144F 3E 1E            [ 7] 4835 	ld	a, #0x1e
      001451 F5               [11] 4836 	push	af
      001452 33               [ 6] 4837 	inc	sp
      001453 E5               [11] 4838 	push	hl
      001454 CDr00r00         [17] 4839 	call	_WRTVRM
      001457 F1               [10] 4840 	pop	af
      001458 33               [ 6] 4841 	inc	sp
      001459 D1               [10] 4842 	pop	de
      00145A C1               [10] 4843 	pop	bc
                                   4844 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      00145B DD 6E FB         [19] 4845 	ld	l, -5 (ix)
      00145E DD 66 FC         [19] 4846 	ld	h, -4 (ix)
      001461 19               [11] 4847 	add	hl, de
      001462 C5               [11] 4848 	push	bc
      001463 D5               [11] 4849 	push	de
      001464 3E 1F            [ 7] 4850 	ld	a, #0x1f
      001466 F5               [11] 4851 	push	af
      001467 33               [ 6] 4852 	inc	sp
      001468 E5               [11] 4853 	push	hl
      001469 CDr00r00         [17] 4854 	call	_WRTVRM
      00146C F1               [10] 4855 	pop	af
      00146D 33               [ 6] 4856 	inc	sp
      00146E D1               [10] 4857 	pop	de
      00146F C1               [10] 4858 	pop	bc
                                   4859 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      001470 DD 6E FD         [19] 4860 	ld	l, -3 (ix)
      001473 DD 66 FE         [19] 4861 	ld	h, -2 (ix)
      001476 19               [11] 4862 	add	hl, de
      001477 C5               [11] 4863 	push	bc
      001478 3E 20            [ 7] 4864 	ld	a, #0x20
      00147A F5               [11] 4865 	push	af
      00147B 33               [ 6] 4866 	inc	sp
      00147C E5               [11] 4867 	push	hl
      00147D CDr00r00         [17] 4868 	call	_WRTVRM
      001480 F1               [10] 4869 	pop	af
      001481 33               [ 6] 4870 	inc	sp
      001482 C1               [10] 4871 	pop	bc
                                   4872 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001483 DD 34 FF         [23] 4873 	inc	-1 (ix)
      001486 18 AF            [12] 4874 	jr	00103$
      001488                       4875 00101$:
                                   4876 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      001488 21 00 19         [10] 4877 	ld	hl, #0x1900
      00148B 09               [11] 4878 	add	hl, bc
      00148C C5               [11] 4879 	push	bc
      00148D 3E 21            [ 7] 4880 	ld	a, #0x21
      00148F F5               [11] 4881 	push	af
      001490 33               [ 6] 4882 	inc	sp
      001491 E5               [11] 4883 	push	hl
      001492 CDr00r00         [17] 4884 	call	_WRTVRM
      001495 F1               [10] 4885 	pop	af
      001496 33               [ 6] 4886 	inc	sp
      001497 C1               [10] 4887 	pop	bc
                                   4888 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      001498 21 01 19         [10] 4889 	ld	hl, #0x1901
      00149B 09               [11] 4890 	add	hl, bc
      00149C C5               [11] 4891 	push	bc
      00149D 3E 22            [ 7] 4892 	ld	a, #0x22
      00149F F5               [11] 4893 	push	af
      0014A0 33               [ 6] 4894 	inc	sp
      0014A1 E5               [11] 4895 	push	hl
      0014A2 CDr00r00         [17] 4896 	call	_WRTVRM
      0014A5 F1               [10] 4897 	pop	af
      0014A6 33               [ 6] 4898 	inc	sp
      0014A7 C1               [10] 4899 	pop	bc
                                   4900 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0014A8 21 02 19         [10] 4901 	ld	hl, #0x1902
      0014AB 09               [11] 4902 	add	hl, bc
      0014AC C5               [11] 4903 	push	bc
      0014AD 3E 23            [ 7] 4904 	ld	a, #0x23
      0014AF F5               [11] 4905 	push	af
      0014B0 33               [ 6] 4906 	inc	sp
      0014B1 E5               [11] 4907 	push	hl
      0014B2 CDr00r00         [17] 4908 	call	_WRTVRM
      0014B5 F1               [10] 4909 	pop	af
      0014B6 33               [ 6] 4910 	inc	sp
      0014B7 C1               [10] 4911 	pop	bc
                                   4912 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      0014B8 21 00 1A         [10] 4913 	ld	hl, #0x1a00
      0014BB 09               [11] 4914 	add	hl, bc
      0014BC C5               [11] 4915 	push	bc
      0014BD 3E 21            [ 7] 4916 	ld	a, #0x21
      0014BF F5               [11] 4917 	push	af
      0014C0 33               [ 6] 4918 	inc	sp
      0014C1 E5               [11] 4919 	push	hl
      0014C2 CDr00r00         [17] 4920 	call	_WRTVRM
      0014C5 F1               [10] 4921 	pop	af
      0014C6 33               [ 6] 4922 	inc	sp
      0014C7 C1               [10] 4923 	pop	bc
                                   4924 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0014C8 21 01 1A         [10] 4925 	ld	hl, #0x1a01
      0014CB 09               [11] 4926 	add	hl, bc
      0014CC C5               [11] 4927 	push	bc
      0014CD 3E 22            [ 7] 4928 	ld	a, #0x22
      0014CF F5               [11] 4929 	push	af
      0014D0 33               [ 6] 4930 	inc	sp
      0014D1 E5               [11] 4931 	push	hl
      0014D2 CDr00r00         [17] 4932 	call	_WRTVRM
      0014D5 F1               [10] 4933 	pop	af
      0014D6 33               [ 6] 4934 	inc	sp
      0014D7 C1               [10] 4935 	pop	bc
                                   4936 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0014D8 21 02 1A         [10] 4937 	ld	hl, #0x1a02
      0014DB 09               [11] 4938 	add	hl, bc
      0014DC C5               [11] 4939 	push	bc
      0014DD 3E 23            [ 7] 4940 	ld	a, #0x23
      0014DF F5               [11] 4941 	push	af
      0014E0 33               [ 6] 4942 	inc	sp
      0014E1 E5               [11] 4943 	push	hl
      0014E2 CDr00r00         [17] 4944 	call	_WRTVRM
      0014E5 F1               [10] 4945 	pop	af
      0014E6 33               [ 6] 4946 	inc	sp
      0014E7 C1               [10] 4947 	pop	bc
                                   4948 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0014E8 21 C0 1A         [10] 4949 	ld	hl, #0x1ac0
      0014EB 09               [11] 4950 	add	hl, bc
      0014EC C5               [11] 4951 	push	bc
      0014ED 3E 24            [ 7] 4952 	ld	a, #0x24
      0014EF F5               [11] 4953 	push	af
      0014F0 33               [ 6] 4954 	inc	sp
      0014F1 E5               [11] 4955 	push	hl
      0014F2 CDr00r00         [17] 4956 	call	_WRTVRM
      0014F5 F1               [10] 4957 	pop	af
      0014F6 33               [ 6] 4958 	inc	sp
      0014F7 C1               [10] 4959 	pop	bc
                                   4960 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      0014F8 21 C1 1A         [10] 4961 	ld	hl, #0x1ac1
      0014FB 09               [11] 4962 	add	hl, bc
      0014FC C5               [11] 4963 	push	bc
      0014FD 3E 25            [ 7] 4964 	ld	a, #0x25
      0014FF F5               [11] 4965 	push	af
      001500 33               [ 6] 4966 	inc	sp
      001501 E5               [11] 4967 	push	hl
      001502 CDr00r00         [17] 4968 	call	_WRTVRM
      001505 F1               [10] 4969 	pop	af
      001506 33               [ 6] 4970 	inc	sp
      001507 C1               [10] 4971 	pop	bc
                                   4972 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      001508 21 C2 1A         [10] 4973 	ld	hl, #0x1ac2
      00150B 09               [11] 4974 	add	hl, bc
      00150C C5               [11] 4975 	push	bc
      00150D 3E 26            [ 7] 4976 	ld	a, #0x26
      00150F F5               [11] 4977 	push	af
      001510 33               [ 6] 4978 	inc	sp
      001511 E5               [11] 4979 	push	hl
      001512 CDr00r00         [17] 4980 	call	_WRTVRM
      001515 F1               [10] 4981 	pop	af
      001516 33               [ 6] 4982 	inc	sp
      001517 C1               [10] 4983 	pop	bc
                                   4984 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      001518 21 E0 1A         [10] 4985 	ld	hl, #0x1ae0
      00151B 09               [11] 4986 	add	hl, bc
      00151C C5               [11] 4987 	push	bc
      00151D 3E 27            [ 7] 4988 	ld	a, #0x27
      00151F F5               [11] 4989 	push	af
      001520 33               [ 6] 4990 	inc	sp
      001521 E5               [11] 4991 	push	hl
      001522 CDr00r00         [17] 4992 	call	_WRTVRM
      001525 F1               [10] 4993 	pop	af
      001526 33               [ 6] 4994 	inc	sp
      001527 C1               [10] 4995 	pop	bc
                                   4996 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      001528 21 E1 1A         [10] 4997 	ld	hl, #0x1ae1
      00152B 09               [11] 4998 	add	hl, bc
      00152C C5               [11] 4999 	push	bc
      00152D 3E 28            [ 7] 5000 	ld	a, #0x28
      00152F F5               [11] 5001 	push	af
      001530 33               [ 6] 5002 	inc	sp
      001531 E5               [11] 5003 	push	hl
      001532 CDr00r00         [17] 5004 	call	_WRTVRM
      001535 F1               [10] 5005 	pop	af
      001536 33               [ 6] 5006 	inc	sp
      001537 C1               [10] 5007 	pop	bc
                                   5008 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      001538 21 E2 1A         [10] 5009 	ld	hl, #0x1ae2
      00153B 09               [11] 5010 	add	hl, bc
      00153C 3E 29            [ 7] 5011 	ld	a, #0x29
      00153E F5               [11] 5012 	push	af
      00153F 33               [ 6] 5013 	inc	sp
      001540 E5               [11] 5014 	push	hl
      001541 CDr00r00         [17] 5015 	call	_WRTVRM
                                   5016 ;src\/Graphics\Graphics.h:64: }
      001544 DD F9            [10] 5017 	ld	sp,ix
      001546 DD E1            [14] 5018 	pop	ix
      001548 C9               [10] 5019 	ret
                                   5020 ;src\/Graphics\Graphics.h:68: void GetNextPieceColors(byte sourcePiece) {
                                   5021 ;	---------------------------------
                                   5022 ; Function GetNextPieceColors
                                   5023 ; ---------------------------------
      001549                       5024 _GetNextPieceColors::
                                   5025 ;src\/Graphics\Graphics.h:69: switch(sourcePiece) {
      001549 FD 21 02 00      [14] 5026 	ld	iy, #2
      00154D FD 39            [15] 5027 	add	iy, sp
      00154F FD 7E 00         [19] 5028 	ld	a, 0 (iy)
      001552 D6 04            [ 7] 5029 	sub	a, #0x04
      001554 28 22            [12] 5030 	jr	Z, 00102$
      001556 FD 7E 00         [19] 5031 	ld	a, 0 (iy)
      001559 D6 08            [ 7] 5032 	sub	a, #0x08
      00155B 28 26            [12] 5033 	jr	Z, 00103$
      00155D FD 7E 00         [19] 5034 	ld	a, 0 (iy)
      001560 D6 0C            [ 7] 5035 	sub	a, #0x0c
      001562 28 09            [12] 5036 	jr	Z, 00101$
      001564 FD 7E 00         [19] 5037 	ld	a, 0 (iy)
      001567 D6 14            [ 7] 5038 	sub	a, #0x14
      001569 28 23            [12] 5039 	jr	Z, 00104$
      00156B 18 2C            [12] 5040 	jr	00105$
                                   5041 ;src\/Graphics\Graphics.h:70: case TILE_BLUE:
      00156D                       5042 00101$:
                                   5043 ;src\/Graphics\Graphics.h:71: nextPieceColor_Front = 7;
      00156D 3E 07            [ 7] 5044 	ld	a, #0x07
      00156F 32r9Br00         [13] 5045 	ld	(#_nextPieceColor_Front), a
                                   5046 ;src\/Graphics\Graphics.h:72: nextPieceColor_Back = 4;
      001572 3E 04            [ 7] 5047 	ld	a, #0x04
      001574 32r9Cr00         [13] 5048 	ld	(#_nextPieceColor_Back), a
                                   5049 ;src\/Graphics\Graphics.h:73: break;
      001577 C9               [10] 5050 	ret
                                   5051 ;src\/Graphics\Graphics.h:74: case TILE_GREEN:
      001578                       5052 00102$:
                                   5053 ;src\/Graphics\Graphics.h:75: nextPieceColor_Front = 3;
      001578 3E 03            [ 7] 5054 	ld	a, #0x03
      00157A 32r9Br00         [13] 5055 	ld	(#_nextPieceColor_Front), a
                                   5056 ;src\/Graphics\Graphics.h:76: nextPieceColor_Back = 12;
      00157D 3E 0C            [ 7] 5057 	ld	a, #0x0c
      00157F 32r9Cr00         [13] 5058 	ld	(#_nextPieceColor_Back), a
                                   5059 ;src\/Graphics\Graphics.h:77: break;
      001582 C9               [10] 5060 	ret
                                   5061 ;src\/Graphics\Graphics.h:78: case TILE_RED:
      001583                       5062 00103$:
                                   5063 ;src\/Graphics\Graphics.h:79: nextPieceColor_Front = 9;
      001583 3E 09            [ 7] 5064 	ld	a, #0x09
      001585 32r9Br00         [13] 5065 	ld	(#_nextPieceColor_Front), a
                                   5066 ;src\/Graphics\Graphics.h:80: nextPieceColor_Back = 6;
      001588 3E 06            [ 7] 5067 	ld	a, #0x06
      00158A 32r9Cr00         [13] 5068 	ld	(#_nextPieceColor_Back), a
                                   5069 ;src\/Graphics\Graphics.h:81: break;
      00158D C9               [10] 5070 	ret
                                   5071 ;src\/Graphics\Graphics.h:82: case TILE_YELLOW:
      00158E                       5072 00104$:
                                   5073 ;src\/Graphics\Graphics.h:83: nextPieceColor_Front = 11;
      00158E 3E 0B            [ 7] 5074 	ld	a, #0x0b
      001590 32r9Br00         [13] 5075 	ld	(#_nextPieceColor_Front), a
                                   5076 ;src\/Graphics\Graphics.h:84: nextPieceColor_Back = 10;
      001593 3E 0A            [ 7] 5077 	ld	a, #0x0a
      001595 32r9Cr00         [13] 5078 	ld	(#_nextPieceColor_Back), a
                                   5079 ;src\/Graphics\Graphics.h:85: break;
      001598 C9               [10] 5080 	ret
                                   5081 ;src\/Graphics\Graphics.h:86: default:
      001599                       5082 00105$:
                                   5083 ;src\/Graphics\Graphics.h:87: nextPieceColor_Front = 15;
      001599 3E 0F            [ 7] 5084 	ld	a, #0x0f
      00159B 32r9Br00         [13] 5085 	ld	(#_nextPieceColor_Front), a
                                   5086 ;src\/Graphics\Graphics.h:88: nextPieceColor_Back = 13;
      00159E 3E 0D            [ 7] 5087 	ld	a, #0x0d
      0015A0 32r9Cr00         [13] 5088 	ld	(#_nextPieceColor_Back), a
                                   5089 ;src\/Graphics\Graphics.h:89: }  
                                   5090 ;src\/Graphics\Graphics.h:90: }
      0015A3 C9               [10] 5091 	ret
                                   5092 ;src\/Graphics\Graphics.h:92: void DrawNextPiece() {
                                   5093 ;	---------------------------------
                                   5094 ; Function DrawNextPiece
                                   5095 ; ---------------------------------
      0015A4                       5096 _DrawNextPiece::
                                   5097 ;src\/Graphics\Graphics.h:94: GetNextPieceColors(nextTopPiece);
      0015A4 3Ar93r00         [13] 5098 	ld	a,(#_nextTopPiece + 0)
      0015A7 F5               [11] 5099 	push	af
      0015A8 33               [ 6] 5100 	inc	sp
      0015A9 CDr49r15         [17] 5101 	call	_GetNextPieceColors
      0015AC 33               [ 6] 5102 	inc	sp
                                   5103 ;src\/Graphics\Graphics.h:95: WRTVRM(SPRATT + 40, 	(4 * 8));                       // Code repeated for performance reasons
      0015AD 3E 20            [ 7] 5104 	ld	a, #0x20
      0015AF F5               [11] 5105 	push	af
      0015B0 33               [ 6] 5106 	inc	sp
      0015B1 21 28 1B         [10] 5107 	ld	hl, #0x1b28
      0015B4 E5               [11] 5108 	push	hl
      0015B5 CDr00r00         [17] 5109 	call	_WRTVRM
      0015B8 F1               [10] 5110 	pop	af
      0015B9 33               [ 6] 5111 	inc	sp
                                   5112 ;src\/Graphics\Graphics.h:96: WRTVRM(SPRATT + 41, 	(4 * 8)-4);
      0015BA 3E 1C            [ 7] 5113 	ld	a, #0x1c
      0015BC F5               [11] 5114 	push	af
      0015BD 33               [ 6] 5115 	inc	sp
      0015BE 21 29 1B         [10] 5116 	ld	hl, #0x1b29
      0015C1 E5               [11] 5117 	push	hl
      0015C2 CDr00r00         [17] 5118 	call	_WRTVRM
      0015C5 F1               [10] 5119 	pop	af
      0015C6 33               [ 6] 5120 	inc	sp
                                   5121 ;src\/Graphics\Graphics.h:97: WRTVRM(SPRATT + 42, 	SPRITE_PATTERN_SMALL_BLOCK);
      0015C7 3E 4C            [ 7] 5122 	ld	a, #0x4c
      0015C9 F5               [11] 5123 	push	af
      0015CA 33               [ 6] 5124 	inc	sp
      0015CB 21 2A 1B         [10] 5125 	ld	hl, #0x1b2a
      0015CE E5               [11] 5126 	push	hl
      0015CF CDr00r00         [17] 5127 	call	_WRTVRM
      0015D2 F1               [10] 5128 	pop	af
      0015D3 33               [ 6] 5129 	inc	sp
                                   5130 ;src\/Graphics\Graphics.h:98: WRTVRM(SPRATT + 43, 	nextPieceColor_Front);
      0015D4 3Ar9Br00         [13] 5131 	ld	a,(#_nextPieceColor_Front + 0)
      0015D7 F5               [11] 5132 	push	af
      0015D8 33               [ 6] 5133 	inc	sp
      0015D9 21 2B 1B         [10] 5134 	ld	hl, #0x1b2b
      0015DC E5               [11] 5135 	push	hl
      0015DD CDr00r00         [17] 5136 	call	_WRTVRM
      0015E0 F1               [10] 5137 	pop	af
      0015E1 33               [ 6] 5138 	inc	sp
                                   5139 ;src\/Graphics\Graphics.h:99: WRTVRM(SPRATT + 44, 	(4 * 8));
      0015E2 3E 20            [ 7] 5140 	ld	a, #0x20
      0015E4 F5               [11] 5141 	push	af
      0015E5 33               [ 6] 5142 	inc	sp
      0015E6 21 2C 1B         [10] 5143 	ld	hl, #0x1b2c
      0015E9 E5               [11] 5144 	push	hl
      0015EA CDr00r00         [17] 5145 	call	_WRTVRM
      0015ED F1               [10] 5146 	pop	af
      0015EE 33               [ 6] 5147 	inc	sp
                                   5148 ;src\/Graphics\Graphics.h:100: WRTVRM(SPRATT + 45, 	(4 * 8)-4);
      0015EF 3E 1C            [ 7] 5149 	ld	a, #0x1c
      0015F1 F5               [11] 5150 	push	af
      0015F2 33               [ 6] 5151 	inc	sp
      0015F3 21 2D 1B         [10] 5152 	ld	hl, #0x1b2d
      0015F6 E5               [11] 5153 	push	hl
      0015F7 CDr00r00         [17] 5154 	call	_WRTVRM
      0015FA F1               [10] 5155 	pop	af
      0015FB 33               [ 6] 5156 	inc	sp
                                   5157 ;src\/Graphics\Graphics.h:101: WRTVRM(SPRATT + 46, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0015FC 3E 50            [ 7] 5158 	ld	a, #0x50
      0015FE F5               [11] 5159 	push	af
      0015FF 33               [ 6] 5160 	inc	sp
      001600 21 2E 1B         [10] 5161 	ld	hl, #0x1b2e
      001603 E5               [11] 5162 	push	hl
      001604 CDr00r00         [17] 5163 	call	_WRTVRM
      001607 F1               [10] 5164 	pop	af
      001608 33               [ 6] 5165 	inc	sp
                                   5166 ;src\/Graphics\Graphics.h:102: WRTVRM(SPRATT + 47, 	nextPieceColor_Back);
      001609 3Ar9Cr00         [13] 5167 	ld	a,(#_nextPieceColor_Back + 0)
      00160C F5               [11] 5168 	push	af
      00160D 33               [ 6] 5169 	inc	sp
      00160E 21 2F 1B         [10] 5170 	ld	hl, #0x1b2f
      001611 E5               [11] 5171 	push	hl
      001612 CDr00r00         [17] 5172 	call	_WRTVRM
      001615 F1               [10] 5173 	pop	af
      001616 33               [ 6] 5174 	inc	sp
                                   5175 ;src\/Graphics\Graphics.h:104: GetNextPieceColors(nextMidPiece);
      001617 3Ar94r00         [13] 5176 	ld	a,(#_nextMidPiece + 0)
      00161A F5               [11] 5177 	push	af
      00161B 33               [ 6] 5178 	inc	sp
      00161C CDr49r15         [17] 5179 	call	_GetNextPieceColors
      00161F 33               [ 6] 5180 	inc	sp
                                   5181 ;src\/Graphics\Graphics.h:105: WRTVRM(SPRATT + 48, 	(5 * 8));
      001620 3E 28            [ 7] 5182 	ld	a, #0x28
      001622 F5               [11] 5183 	push	af
      001623 33               [ 6] 5184 	inc	sp
      001624 21 30 1B         [10] 5185 	ld	hl, #0x1b30
      001627 E5               [11] 5186 	push	hl
      001628 CDr00r00         [17] 5187 	call	_WRTVRM
      00162B F1               [10] 5188 	pop	af
      00162C 33               [ 6] 5189 	inc	sp
                                   5190 ;src\/Graphics\Graphics.h:106: WRTVRM(SPRATT + 49, 	(4 * 8)-4);
      00162D 3E 1C            [ 7] 5191 	ld	a, #0x1c
      00162F F5               [11] 5192 	push	af
      001630 33               [ 6] 5193 	inc	sp
      001631 21 31 1B         [10] 5194 	ld	hl, #0x1b31
      001634 E5               [11] 5195 	push	hl
      001635 CDr00r00         [17] 5196 	call	_WRTVRM
      001638 F1               [10] 5197 	pop	af
      001639 33               [ 6] 5198 	inc	sp
                                   5199 ;src\/Graphics\Graphics.h:107: WRTVRM(SPRATT + 50, 	SPRITE_PATTERN_SMALL_BLOCK);
      00163A 3E 4C            [ 7] 5200 	ld	a, #0x4c
      00163C F5               [11] 5201 	push	af
      00163D 33               [ 6] 5202 	inc	sp
      00163E 21 32 1B         [10] 5203 	ld	hl, #0x1b32
      001641 E5               [11] 5204 	push	hl
      001642 CDr00r00         [17] 5205 	call	_WRTVRM
      001645 F1               [10] 5206 	pop	af
      001646 33               [ 6] 5207 	inc	sp
                                   5208 ;src\/Graphics\Graphics.h:108: WRTVRM(SPRATT + 51, 	nextPieceColor_Front);
      001647 3Ar9Br00         [13] 5209 	ld	a,(#_nextPieceColor_Front + 0)
      00164A F5               [11] 5210 	push	af
      00164B 33               [ 6] 5211 	inc	sp
      00164C 21 33 1B         [10] 5212 	ld	hl, #0x1b33
      00164F E5               [11] 5213 	push	hl
      001650 CDr00r00         [17] 5214 	call	_WRTVRM
      001653 F1               [10] 5215 	pop	af
      001654 33               [ 6] 5216 	inc	sp
                                   5217 ;src\/Graphics\Graphics.h:109: WRTVRM(SPRATT + 52, 	(5 * 8));
      001655 3E 28            [ 7] 5218 	ld	a, #0x28
      001657 F5               [11] 5219 	push	af
      001658 33               [ 6] 5220 	inc	sp
      001659 21 34 1B         [10] 5221 	ld	hl, #0x1b34
      00165C E5               [11] 5222 	push	hl
      00165D CDr00r00         [17] 5223 	call	_WRTVRM
      001660 F1               [10] 5224 	pop	af
      001661 33               [ 6] 5225 	inc	sp
                                   5226 ;src\/Graphics\Graphics.h:110: WRTVRM(SPRATT + 53, 	(4 * 8)-4);
      001662 3E 1C            [ 7] 5227 	ld	a, #0x1c
      001664 F5               [11] 5228 	push	af
      001665 33               [ 6] 5229 	inc	sp
      001666 21 35 1B         [10] 5230 	ld	hl, #0x1b35
      001669 E5               [11] 5231 	push	hl
      00166A CDr00r00         [17] 5232 	call	_WRTVRM
      00166D F1               [10] 5233 	pop	af
      00166E 33               [ 6] 5234 	inc	sp
                                   5235 ;src\/Graphics\Graphics.h:111: WRTVRM(SPRATT + 54, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      00166F 3E 50            [ 7] 5236 	ld	a, #0x50
      001671 F5               [11] 5237 	push	af
      001672 33               [ 6] 5238 	inc	sp
      001673 21 36 1B         [10] 5239 	ld	hl, #0x1b36
      001676 E5               [11] 5240 	push	hl
      001677 CDr00r00         [17] 5241 	call	_WRTVRM
      00167A F1               [10] 5242 	pop	af
      00167B 33               [ 6] 5243 	inc	sp
                                   5244 ;src\/Graphics\Graphics.h:112: WRTVRM(SPRATT + 55, 	nextPieceColor_Back);
      00167C 3Ar9Cr00         [13] 5245 	ld	a,(#_nextPieceColor_Back + 0)
      00167F F5               [11] 5246 	push	af
      001680 33               [ 6] 5247 	inc	sp
      001681 21 37 1B         [10] 5248 	ld	hl, #0x1b37
      001684 E5               [11] 5249 	push	hl
      001685 CDr00r00         [17] 5250 	call	_WRTVRM
      001688 F1               [10] 5251 	pop	af
      001689 33               [ 6] 5252 	inc	sp
                                   5253 ;src\/Graphics\Graphics.h:114: GetNextPieceColors(nextBottomPiece);
      00168A 3Ar95r00         [13] 5254 	ld	a,(#_nextBottomPiece + 0)
      00168D F5               [11] 5255 	push	af
      00168E 33               [ 6] 5256 	inc	sp
      00168F CDr49r15         [17] 5257 	call	_GetNextPieceColors
      001692 33               [ 6] 5258 	inc	sp
                                   5259 ;src\/Graphics\Graphics.h:115: WRTVRM(SPRATT + 56, 	(6 * 8));
      001693 3E 30            [ 7] 5260 	ld	a, #0x30
      001695 F5               [11] 5261 	push	af
      001696 33               [ 6] 5262 	inc	sp
      001697 21 38 1B         [10] 5263 	ld	hl, #0x1b38
      00169A E5               [11] 5264 	push	hl
      00169B CDr00r00         [17] 5265 	call	_WRTVRM
      00169E F1               [10] 5266 	pop	af
      00169F 33               [ 6] 5267 	inc	sp
                                   5268 ;src\/Graphics\Graphics.h:116: WRTVRM(SPRATT + 57, 	(4 * 8)-4);
      0016A0 3E 1C            [ 7] 5269 	ld	a, #0x1c
      0016A2 F5               [11] 5270 	push	af
      0016A3 33               [ 6] 5271 	inc	sp
      0016A4 21 39 1B         [10] 5272 	ld	hl, #0x1b39
      0016A7 E5               [11] 5273 	push	hl
      0016A8 CDr00r00         [17] 5274 	call	_WRTVRM
      0016AB F1               [10] 5275 	pop	af
      0016AC 33               [ 6] 5276 	inc	sp
                                   5277 ;src\/Graphics\Graphics.h:117: WRTVRM(SPRATT + 58, 	SPRITE_PATTERN_SMALL_BLOCK);
      0016AD 3E 4C            [ 7] 5278 	ld	a, #0x4c
      0016AF F5               [11] 5279 	push	af
      0016B0 33               [ 6] 5280 	inc	sp
      0016B1 21 3A 1B         [10] 5281 	ld	hl, #0x1b3a
      0016B4 E5               [11] 5282 	push	hl
      0016B5 CDr00r00         [17] 5283 	call	_WRTVRM
      0016B8 F1               [10] 5284 	pop	af
      0016B9 33               [ 6] 5285 	inc	sp
                                   5286 ;src\/Graphics\Graphics.h:118: WRTVRM(SPRATT + 59, 	nextPieceColor_Front);
      0016BA 3Ar9Br00         [13] 5287 	ld	a,(#_nextPieceColor_Front + 0)
      0016BD F5               [11] 5288 	push	af
      0016BE 33               [ 6] 5289 	inc	sp
      0016BF 21 3B 1B         [10] 5290 	ld	hl, #0x1b3b
      0016C2 E5               [11] 5291 	push	hl
      0016C3 CDr00r00         [17] 5292 	call	_WRTVRM
      0016C6 F1               [10] 5293 	pop	af
      0016C7 33               [ 6] 5294 	inc	sp
                                   5295 ;src\/Graphics\Graphics.h:119: WRTVRM(SPRATT + 60, 	(6 * 8));
      0016C8 3E 30            [ 7] 5296 	ld	a, #0x30
      0016CA F5               [11] 5297 	push	af
      0016CB 33               [ 6] 5298 	inc	sp
      0016CC 21 3C 1B         [10] 5299 	ld	hl, #0x1b3c
      0016CF E5               [11] 5300 	push	hl
      0016D0 CDr00r00         [17] 5301 	call	_WRTVRM
      0016D3 F1               [10] 5302 	pop	af
      0016D4 33               [ 6] 5303 	inc	sp
                                   5304 ;src\/Graphics\Graphics.h:120: WRTVRM(SPRATT + 61, 	(4 * 8)-4);
      0016D5 3E 1C            [ 7] 5305 	ld	a, #0x1c
      0016D7 F5               [11] 5306 	push	af
      0016D8 33               [ 6] 5307 	inc	sp
      0016D9 21 3D 1B         [10] 5308 	ld	hl, #0x1b3d
      0016DC E5               [11] 5309 	push	hl
      0016DD CDr00r00         [17] 5310 	call	_WRTVRM
      0016E0 F1               [10] 5311 	pop	af
      0016E1 33               [ 6] 5312 	inc	sp
                                   5313 ;src\/Graphics\Graphics.h:121: WRTVRM(SPRATT + 62, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      0016E2 3E 50            [ 7] 5314 	ld	a, #0x50
      0016E4 F5               [11] 5315 	push	af
      0016E5 33               [ 6] 5316 	inc	sp
      0016E6 21 3E 1B         [10] 5317 	ld	hl, #0x1b3e
      0016E9 E5               [11] 5318 	push	hl
      0016EA CDr00r00         [17] 5319 	call	_WRTVRM
      0016ED F1               [10] 5320 	pop	af
      0016EE 33               [ 6] 5321 	inc	sp
                                   5322 ;src\/Graphics\Graphics.h:122: WRTVRM(SPRATT + 63, 	nextPieceColor_Back);
      0016EF 3Ar9Cr00         [13] 5323 	ld	a,(#_nextPieceColor_Back + 0)
      0016F2 F5               [11] 5324 	push	af
      0016F3 33               [ 6] 5325 	inc	sp
      0016F4 21 3F 1B         [10] 5326 	ld	hl, #0x1b3f
      0016F7 E5               [11] 5327 	push	hl
      0016F8 CDr00r00         [17] 5328 	call	_WRTVRM
      0016FB F1               [10] 5329 	pop	af
      0016FC 33               [ 6] 5330 	inc	sp
                                   5331 ;src\/Graphics\Graphics.h:133: }
      0016FD C9               [10] 5332 	ret
                                   5333 ;src\/Graphics\Graphics.h:135: void DrawScore() {
                                   5334 ;	---------------------------------
                                   5335 ; Function DrawScore
                                   5336 ; ---------------------------------
      0016FE                       5337 _DrawScore::
      0016FE DD E5            [15] 5338 	push	ix
      001700 DD 21 00 00      [14] 5339 	ld	ix,#0
      001704 DD 39            [15] 5340 	add	ix,sp
      001706 F5               [11] 5341 	push	af
                                   5342 ;src\/Graphics\Graphics.h:136: byte bgCounter = 0, bgColor;
      001707 DD 36 FE 00      [19] 5343 	ld	-2 (ix), #0
                                   5344 ;src\/Graphics\Graphics.h:140: if(newLevel) {
      00170B 3Ar07r00         [13] 5345 	ld	a,(#_newLevel + 0)
      00170E B7               [ 4] 5346 	or	a, a
      00170F CAr0Ar18         [10] 5347 	jp	Z, 00119$
                                   5348 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      001712 DD 36 FF 00      [19] 5349 	ld	-1 (ix), #0
      001716                       5350 00121$:
      001716 DD 7E FF         [19] 5351 	ld	a, -1 (ix)
      001719 D6 3C            [ 7] 5352 	sub	a, #0x3c
      00171B D2r0Ar18         [10] 5353 	jp	NC, 00119$
                                   5354 ;src\/Graphics\Graphics.h:142: lastJiffy = JIFFY;
      00171E ED 4B 9E FC      [20] 5355 	ld	bc, (_JIFFY)
                                   5356 ;src\/Graphics\Graphics.h:143: while(lastJiffy == JIFFY) { }
      001722                       5357 00101$:
      001722 2A 9E FC         [16] 5358 	ld	hl, (_JIFFY)
      001725 BF               [ 4] 5359 	cp	a, a
      001726 ED 42            [15] 5360 	sbc	hl, bc
      001728 28 F8            [12] 5361 	jr	Z, 00101$
                                   5362 ;src\/Graphics\Graphics.h:145: DrawExplosionSprite(26 * 8, 10 * 8, i);
      00172A DD 56 FF         [19] 5363 	ld	d, -1 (ix)
      00172D 1E 50            [ 7] 5364 	ld	e,#0x50
      00172F D5               [11] 5365 	push	de
      001730 3E D0            [ 7] 5366 	ld	a, #0xd0
      001732 F5               [11] 5367 	push	af
      001733 33               [ 6] 5368 	inc	sp
      001734 CDrDFr0E         [17] 5369 	call	_DrawExplosionSprite
      001737 F1               [10] 5370 	pop	af
      001738 33               [ 6] 5371 	inc	sp
                                   5372 ;src\/Graphics\Graphics.h:147: if(JIFFY & 0b00000110) {
      001739 2A 9E FC         [16] 5373 	ld	hl, (_JIFFY)
      00173C 7D               [ 4] 5374 	ld	a, l
      00173D E6 06            [ 7] 5375 	and	a, #0x06
      00173F CArEAr17         [10] 5376 	jp	Z,00115$
                                   5377 ;src\/Graphics\Graphics.h:149: DrawString(" LEVEL", 26, 10);
      001742 11 1A 0A         [10] 5378 	ld	de, #0x0a1a
      001745 D5               [11] 5379 	push	de
      001746 21r8Cr18         [10] 5380 	ld	hl, #___str_1
      001749 E5               [11] 5381 	push	hl
      00174A CDrBBr12         [17] 5382 	call	_DrawString
      00174D F1               [10] 5383 	pop	af
      00174E F1               [10] 5384 	pop	af
                                   5385 ;src\/Graphics\Graphics.h:150: DrawNumber(level, 26, 11);
      00174F 3Ar06r00         [13] 5386 	ld	a, (#_level + 0)
      001752 4F               [ 4] 5387 	ld	c, a
      001753 06 00            [ 7] 5388 	ld	b, #0x00
      001755 11 1A 0B         [10] 5389 	ld	de, #0x0b1a
      001758 D5               [11] 5390 	push	de
      001759 C5               [11] 5391 	push	bc
      00175A CDrEDr12         [17] 5392 	call	_DrawNumber
      00175D F1               [10] 5393 	pop	af
      00175E F1               [10] 5394 	pop	af
                                   5395 ;src\/Graphics\Graphics.h:156: switch(bgCounter++) {
      00175F DD 4E FE         [19] 5396 	ld	c, -2 (ix)
      001762 DD 34 FE         [23] 5397 	inc	-2 (ix)
      001765 3E 07            [ 7] 5398 	ld	a, #0x07
      001767 91               [ 4] 5399 	sub	a, c
      001768 38 45            [12] 5400 	jr	C, 00112$
      00176A 06 00            [ 7] 5401 	ld	b, #0x00
      00176C 21r73r17         [10] 5402 	ld	hl, #00163$
      00176F 09               [11] 5403 	add	hl, bc
      001770 09               [11] 5404 	add	hl, bc
      001771 09               [11] 5405 	add	hl, bc
      001772 E9               [ 4] 5406 	jp	(hl)
      001773                       5407 00163$:
      001773 C3r8Br17         [10] 5408 	jp	00104$
      001776 C3r8Fr17         [10] 5409 	jp	00105$
      001779 C3r93r17         [10] 5410 	jp	00106$
      00177C C3r97r17         [10] 5411 	jp	00107$
      00177F C3r9Br17         [10] 5412 	jp	00108$
      001782 C3r9Fr17         [10] 5413 	jp	00109$
      001785 C3rA3r17         [10] 5414 	jp	00110$
      001788 C3rA7r17         [10] 5415 	jp	00111$
                                   5416 ;src\/Graphics\Graphics.h:157: case 0:
      00178B                       5417 00104$:
                                   5418 ;src\/Graphics\Graphics.h:158: bgColor = 0x14;
      00178B 0E 14            [ 7] 5419 	ld	c, #0x14
                                   5420 ;src\/Graphics\Graphics.h:159: break;
      00178D 18 22            [12] 5421 	jr	00113$
                                   5422 ;src\/Graphics\Graphics.h:160: case 1:
      00178F                       5423 00105$:
                                   5424 ;src\/Graphics\Graphics.h:161: bgColor = 0x15;
      00178F 0E 15            [ 7] 5425 	ld	c, #0x15
                                   5426 ;src\/Graphics\Graphics.h:162: break;
      001791 18 1E            [12] 5427 	jr	00113$
                                   5428 ;src\/Graphics\Graphics.h:163: case 2:
      001793                       5429 00106$:
                                   5430 ;src\/Graphics\Graphics.h:164: bgColor = 0x17;
      001793 0E 17            [ 7] 5431 	ld	c, #0x17
                                   5432 ;src\/Graphics\Graphics.h:165: break;
      001795 18 1A            [12] 5433 	jr	00113$
                                   5434 ;src\/Graphics\Graphics.h:166: case 3:
      001797                       5435 00107$:
                                   5436 ;src\/Graphics\Graphics.h:167: bgColor = 0x1e;
      001797 0E 1E            [ 7] 5437 	ld	c, #0x1e
                                   5438 ;src\/Graphics\Graphics.h:168: break;
      001799 18 16            [12] 5439 	jr	00113$
                                   5440 ;src\/Graphics\Graphics.h:169: case 4:
      00179B                       5441 00108$:
                                   5442 ;src\/Graphics\Graphics.h:170: bgColor = 0x1f;
      00179B 0E 1F            [ 7] 5443 	ld	c, #0x1f
                                   5444 ;src\/Graphics\Graphics.h:171: break;
      00179D 18 12            [12] 5445 	jr	00113$
                                   5446 ;src\/Graphics\Graphics.h:172: case 5:
      00179F                       5447 00109$:
                                   5448 ;src\/Graphics\Graphics.h:173: bgColor = 0x1e;
      00179F 0E 1E            [ 7] 5449 	ld	c, #0x1e
                                   5450 ;src\/Graphics\Graphics.h:174: break;
      0017A1 18 0E            [12] 5451 	jr	00113$
                                   5452 ;src\/Graphics\Graphics.h:175: case 6:
      0017A3                       5453 00110$:
                                   5454 ;src\/Graphics\Graphics.h:176: bgColor = 0x17;
      0017A3 0E 17            [ 7] 5455 	ld	c, #0x17
                                   5456 ;src\/Graphics\Graphics.h:177: break;
      0017A5 18 0A            [12] 5457 	jr	00113$
                                   5458 ;src\/Graphics\Graphics.h:178: case 7:
      0017A7                       5459 00111$:
                                   5460 ;src\/Graphics\Graphics.h:179: bgColor = 0x15;
      0017A7 0E 15            [ 7] 5461 	ld	c, #0x15
                                   5462 ;src\/Graphics\Graphics.h:180: bgCounter = 0;
      0017A9 DD 36 FE 00      [19] 5463 	ld	-2 (ix), #0
                                   5464 ;src\/Graphics\Graphics.h:181: break;
      0017AD 18 02            [12] 5465 	jr	00113$
                                   5466 ;src\/Graphics\Graphics.h:182: default:
      0017AF                       5467 00112$:
                                   5468 ;src\/Graphics\Graphics.h:183: bgColor = 0x11;
      0017AF 0E 11            [ 7] 5469 	ld	c, #0x11
                                   5470 ;src\/Graphics\Graphics.h:185: }
      0017B1                       5471 00113$:
                                   5472 ;src\/Graphics\Graphics.h:186: FILVRM(CLRTBL, 8 * 4, bgColor);
      0017B1 C5               [11] 5473 	push	bc
      0017B2 79               [ 4] 5474 	ld	a, c
      0017B3 F5               [11] 5475 	push	af
      0017B4 33               [ 6] 5476 	inc	sp
      0017B5 21 20 00         [10] 5477 	ld	hl, #0x0020
      0017B8 E5               [11] 5478 	push	hl
      0017B9 21 00 20         [10] 5479 	ld	hl, #0x2000
      0017BC E5               [11] 5480 	push	hl
      0017BD CDr00r00         [17] 5481 	call	_FILVRM
      0017C0 F1               [10] 5482 	pop	af
      0017C1 F1               [10] 5483 	pop	af
      0017C2 33               [ 6] 5484 	inc	sp
      0017C3 C1               [10] 5485 	pop	bc
                                   5486 ;src\/Graphics\Graphics.h:187: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      0017C4 C5               [11] 5487 	push	bc
      0017C5 79               [ 4] 5488 	ld	a, c
      0017C6 F5               [11] 5489 	push	af
      0017C7 33               [ 6] 5490 	inc	sp
      0017C8 21 20 00         [10] 5491 	ld	hl, #0x0020
      0017CB E5               [11] 5492 	push	hl
      0017CC 21 00 28         [10] 5493 	ld	hl, #0x2800
      0017CF E5               [11] 5494 	push	hl
      0017D0 CDr00r00         [17] 5495 	call	_FILVRM
      0017D3 F1               [10] 5496 	pop	af
      0017D4 F1               [10] 5497 	pop	af
      0017D5 33               [ 6] 5498 	inc	sp
      0017D6 C1               [10] 5499 	pop	bc
                                   5500 ;src\/Graphics\Graphics.h:188: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      0017D7 79               [ 4] 5501 	ld	a, c
      0017D8 F5               [11] 5502 	push	af
      0017D9 33               [ 6] 5503 	inc	sp
      0017DA 21 20 00         [10] 5504 	ld	hl, #0x0020
      0017DD E5               [11] 5505 	push	hl
      0017DE 21 00 30         [10] 5506 	ld	hl, #0x3000
      0017E1 E5               [11] 5507 	push	hl
      0017E2 CDr00r00         [17] 5508 	call	_FILVRM
      0017E5 F1               [10] 5509 	pop	af
      0017E6 F1               [10] 5510 	pop	af
      0017E7 33               [ 6] 5511 	inc	sp
      0017E8 18 1A            [12] 5512 	jr	00122$
      0017EA                       5513 00115$:
                                   5514 ;src\/Graphics\Graphics.h:193: DrawString("      ", 26, 10);
      0017EA 11 1A 0A         [10] 5515 	ld	de, #0x0a1a
      0017ED D5               [11] 5516 	push	de
      0017EE 21r93r18         [10] 5517 	ld	hl, #___str_2
      0017F1 E5               [11] 5518 	push	hl
      0017F2 CDrBBr12         [17] 5519 	call	_DrawString
      0017F5 F1               [10] 5520 	pop	af
      0017F6 F1               [10] 5521 	pop	af
                                   5522 ;src\/Graphics\Graphics.h:194: DrawString("      ", 26, 11);
      0017F7 11 1A 0B         [10] 5523 	ld	de, #0x0b1a
      0017FA D5               [11] 5524 	push	de
      0017FB 21r93r18         [10] 5525 	ld	hl, #___str_2
      0017FE E5               [11] 5526 	push	hl
      0017FF CDrBBr12         [17] 5527 	call	_DrawString
      001802 F1               [10] 5528 	pop	af
      001803 F1               [10] 5529 	pop	af
      001804                       5530 00122$:
                                   5531 ;src\/Graphics\Graphics.h:141: for(byte i=0; i < 60; i++) {
      001804 DD 34 FF         [23] 5532 	inc	-1 (ix)
      001807 C3r16r17         [10] 5533 	jp	00121$
      00180A                       5534 00119$:
                                   5535 ;src\/Graphics\Graphics.h:200: newLevel = FALSE;
      00180A 21r07r00         [10] 5536 	ld	hl, #_newLevel
      00180D 36 00            [10] 5537 	ld	(hl), #0x00
                                   5538 ;src\/Graphics\Graphics.h:203: FILVRM(CLRTBL, 8 * 4, 0x14);
      00180F 3E 14            [ 7] 5539 	ld	a, #0x14
      001811 F5               [11] 5540 	push	af
      001812 33               [ 6] 5541 	inc	sp
      001813 21 20 00         [10] 5542 	ld	hl, #0x0020
      001816 E5               [11] 5543 	push	hl
      001817 21 00 20         [10] 5544 	ld	hl, #0x2000
      00181A E5               [11] 5545 	push	hl
      00181B CDr00r00         [17] 5546 	call	_FILVRM
      00181E F1               [10] 5547 	pop	af
      00181F F1               [10] 5548 	pop	af
      001820 33               [ 6] 5549 	inc	sp
                                   5550 ;src\/Graphics\Graphics.h:204: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001821 3E 14            [ 7] 5551 	ld	a, #0x14
      001823 F5               [11] 5552 	push	af
      001824 33               [ 6] 5553 	inc	sp
      001825 21 20 00         [10] 5554 	ld	hl, #0x0020
      001828 E5               [11] 5555 	push	hl
      001829 21 00 28         [10] 5556 	ld	hl, #0x2800
      00182C E5               [11] 5557 	push	hl
      00182D CDr00r00         [17] 5558 	call	_FILVRM
      001830 F1               [10] 5559 	pop	af
      001831 F1               [10] 5560 	pop	af
      001832 33               [ 6] 5561 	inc	sp
                                   5562 ;src\/Graphics\Graphics.h:205: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001833 3E 14            [ 7] 5563 	ld	a, #0x14
      001835 F5               [11] 5564 	push	af
      001836 33               [ 6] 5565 	inc	sp
      001837 21 20 00         [10] 5566 	ld	hl, #0x0020
      00183A E5               [11] 5567 	push	hl
      00183B 21 00 30         [10] 5568 	ld	hl, #0x3000
      00183E E5               [11] 5569 	push	hl
      00183F CDr00r00         [17] 5570 	call	_FILVRM
      001842 F1               [10] 5571 	pop	af
      001843 F1               [10] 5572 	pop	af
      001844 33               [ 6] 5573 	inc	sp
                                   5574 ;src\/Graphics\Graphics.h:207: DrawString("NEXT", 2, 2);
      001845 11 02 02         [10] 5575 	ld	de, #0x0202
      001848 D5               [11] 5576 	push	de
      001849 21r9Ar18         [10] 5577 	ld	hl, #___str_3
      00184C E5               [11] 5578 	push	hl
      00184D CDrBBr12         [17] 5579 	call	_DrawString
      001850 F1               [10] 5580 	pop	af
      001851 F1               [10] 5581 	pop	af
                                   5582 ;src\/Graphics\Graphics.h:209: DrawString(" LEVEL", 26, 10);
      001852 11 1A 0A         [10] 5583 	ld	de, #0x0a1a
      001855 D5               [11] 5584 	push	de
      001856 21r8Cr18         [10] 5585 	ld	hl, #___str_1
      001859 E5               [11] 5586 	push	hl
      00185A CDrBBr12         [17] 5587 	call	_DrawString
      00185D F1               [10] 5588 	pop	af
      00185E F1               [10] 5589 	pop	af
                                   5590 ;src\/Graphics\Graphics.h:210: DrawString("BLOCKS", 26, 18);
      00185F 11 1A 12         [10] 5591 	ld	de, #0x121a
      001862 D5               [11] 5592 	push	de
      001863 21r9Fr18         [10] 5593 	ld	hl, #___str_4
      001866 E5               [11] 5594 	push	hl
      001867 CDrBBr12         [17] 5595 	call	_DrawString
      00186A F1               [10] 5596 	pop	af
      00186B F1               [10] 5597 	pop	af
                                   5598 ;src\/Graphics\Graphics.h:213: DrawNumber(level, 26, 11);
      00186C 3Ar06r00         [13] 5599 	ld	a, (#_level + 0)
      00186F 4F               [ 4] 5600 	ld	c, a
      001870 06 00            [ 7] 5601 	ld	b, #0x00
      001872 11 1A 0B         [10] 5602 	ld	de, #0x0b1a
      001875 D5               [11] 5603 	push	de
      001876 C5               [11] 5604 	push	bc
      001877 CDrEDr12         [17] 5605 	call	_DrawNumber
      00187A F1               [10] 5606 	pop	af
      00187B F1               [10] 5607 	pop	af
                                   5608 ;src\/Graphics\Graphics.h:214: DrawNumber(blocksRemoved, 26, 19);
      00187C 11 1A 13         [10] 5609 	ld	de, #0x131a
      00187F D5               [11] 5610 	push	de
      001880 2Ar04r00         [16] 5611 	ld	hl, (_blocksRemoved)
      001883 E5               [11] 5612 	push	hl
      001884 CDrEDr12         [17] 5613 	call	_DrawNumber
                                   5614 ;src\/Graphics\Graphics.h:217: }
      001887 DD F9            [10] 5615 	ld	sp,ix
      001889 DD E1            [14] 5616 	pop	ix
      00188B C9               [10] 5617 	ret
      00188C                       5618 ___str_1:
      00188C 20 4C 45 56 45 4C     5619 	.ascii " LEVEL"
      001892 00                    5620 	.db 0x00
      001893                       5621 ___str_2:
      001893 20 20 20 20 20 20     5622 	.ascii "      "
      001899 00                    5623 	.db 0x00
      00189A                       5624 ___str_3:
      00189A 4E 45 58 54           5625 	.ascii "NEXT"
      00189E 00                    5626 	.db 0x00
      00189F                       5627 ___str_4:
      00189F 42 4C 4F 43 4B 53     5628 	.ascii "BLOCKS"
      0018A5 00                    5629 	.db 0x00
                                   5630 ;src\/Graphics\Graphics.h:219: void DrawBackground() {
                                   5631 ;	---------------------------------
                                   5632 ; Function DrawBackground
                                   5633 ; ---------------------------------
      0018A6                       5634 _DrawBackground::
                                   5635 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0018A6 01 00 00         [10] 5636 	ld	bc, #0x0000
      0018A9                       5637 00103$:
      0018A9 78               [ 4] 5638 	ld	a, b
      0018AA EE 80            [ 7] 5639 	xor	a, #0x80
      0018AC D6 83            [ 7] 5640 	sub	a, #0x83
      0018AE 30 12            [12] 5641 	jr	NC, 00101$
                                   5642 ;src\/Graphics\Graphics.h:222: WRTVRM(NAMTBL + i, EMPTY); // test
      0018B0 21 00 18         [10] 5643 	ld	hl, #0x1800
      0018B3 09               [11] 5644 	add	hl, bc
      0018B4 C5               [11] 5645 	push	bc
      0018B5 AF               [ 4] 5646 	xor	a, a
      0018B6 F5               [11] 5647 	push	af
      0018B7 33               [ 6] 5648 	inc	sp
      0018B8 E5               [11] 5649 	push	hl
      0018B9 CDr00r00         [17] 5650 	call	_WRTVRM
      0018BC F1               [10] 5651 	pop	af
      0018BD 33               [ 6] 5652 	inc	sp
      0018BE C1               [10] 5653 	pop	bc
                                   5654 ;src\/Graphics\Graphics.h:221: for(int i = 0; i < 256 * 3; i++) {
      0018BF 03               [ 6] 5655 	inc	bc
      0018C0 18 E7            [12] 5656 	jr	00103$
      0018C2                       5657 00101$:
                                   5658 ;src\/Graphics\Graphics.h:225: DrawColumn(7);
      0018C2 3E 07            [ 7] 5659 	ld	a, #0x07
      0018C4 F5               [11] 5660 	push	af
      0018C5 33               [ 6] 5661 	inc	sp
      0018C6 CDrA8r13         [17] 5662 	call	_DrawColumn
      0018C9 33               [ 6] 5663 	inc	sp
                                   5664 ;src\/Graphics\Graphics.h:226: DrawColumn(22);
      0018CA 3E 16            [ 7] 5665 	ld	a, #0x16
      0018CC F5               [11] 5666 	push	af
      0018CD 33               [ 6] 5667 	inc	sp
      0018CE CDrA8r13         [17] 5668 	call	_DrawColumn
      0018D1 33               [ 6] 5669 	inc	sp
                                   5670 ;src\/Graphics\Graphics.h:228: DrawScore();
                                   5671 ;src\/Graphics\Graphics.h:264: }
      0018D2 C3rFEr16         [10] 5672 	jp	_DrawScore
                                   5673 ;src\/Graphics\Graphics.h:266: void InitVRAM() {
                                   5674 ;	---------------------------------
                                   5675 ; Function InitVRAM
                                   5676 ; ---------------------------------
      0018D5                       5677 _InitVRAM::
      0018D5 DD E5            [15] 5678 	push	ix
      0018D7 DD 21 00 00      [14] 5679 	ld	ix,#0
      0018DB DD 39            [15] 5680 	add	ix,sp
      0018DD 3B               [ 6] 5681 	dec	sp
                                   5682 ;src\/Graphics\Graphics.h:271: CLIKSW = 0;	// disable keyboard sound
      0018DE 21 00 00         [10] 5683 	ld	hl, #0x0000
      0018E1 22 DB F3         [16] 5684 	ld	(_CLIKSW), hl
                                   5685 ;src\/Graphics\Graphics.h:272: SCNCNT = 1; 	// set keyboard scan counter
      0018E4 21 F6 F3         [10] 5686 	ld	hl, #_SCNCNT
      0018E7 36 01            [10] 5687 	ld	(hl), #0x01
                                   5688 ;src\/Graphics\Graphics.h:274: FORCLR = COLOR_WHITE;
      0018E9 21 E9 F3         [10] 5689 	ld	hl, #_FORCLR
      0018EC 36 0F            [10] 5690 	ld	(hl), #0x0f
                                   5691 ;src\/Graphics\Graphics.h:275: BAKCLR = COLOR_BLACK;
      0018EE 21 EA F3         [10] 5692 	ld	hl, #_BAKCLR
      0018F1 36 01            [10] 5693 	ld	(hl), #0x01
                                   5694 ;src\/Graphics\Graphics.h:276: BDRCLR = COLOR_BLACK;
      0018F3 21 EB F3         [10] 5695 	ld	hl, #_BDRCLR
      0018F6 36 01            [10] 5696 	ld	(hl), #0x01
                                   5697 ;src\/Graphics\Graphics.h:304: WRTVDP(0b0000000111100010);
      0018F8 21 E2 01         [10] 5698 	ld	hl, #0x01e2
      0018FB CDr00r00         [17] 5699 	call	_WRTVDP
                                   5700 ;src\/Graphics\Graphics.h:306: INIGRP();	// Set screen 2
      0018FE CDr00r00         [17] 5701 	call	_INIGRP
                                   5702 ;src\/Graphics\Graphics.h:308: DISSCR();	// Disable screen (faster to write)
      001901 CDr00r00         [17] 5703 	call	_DISSCR
                                   5704 ;src\/Graphics\Graphics.h:312: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001904 AF               [ 4] 5705 	xor	a, a
      001905 F5               [11] 5706 	push	af
      001906 33               [ 6] 5707 	inc	sp
      001907 21 00 40         [10] 5708 	ld	hl, #0x4000
      00190A E5               [11] 5709 	push	hl
      00190B 65               [ 4] 5710 	ld	h, l
      00190C E5               [11] 5711 	push	hl
      00190D CDr00r00         [17] 5712 	call	_FILVRM
      001910 F1               [10] 5713 	pop	af
                                   5714 ;src\/Graphics\Graphics.h:321: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001911 33               [ 6] 5715 	inc	sp
      001912 21 A0 04         [10] 5716 	ld	hl,#0x04a0
      001915 E3               [19] 5717 	ex	(sp),hl
      001916 21rA8r07         [10] 5718 	ld	hl, #_sprite_arrow_0
      001919 E5               [11] 5719 	push	hl
      00191A 21 00 38         [10] 5720 	ld	hl, #0x3800
      00191D E5               [11] 5721 	push	hl
      00191E CDr00r00         [17] 5722 	call	_LDIRVM
      001921 21 06 00         [10] 5723 	ld	hl, #6
      001924 39               [11] 5724 	add	hl, sp
      001925 F9               [ 6] 5725 	ld	sp, hl
                                   5726 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      001926 0E 00            [ 7] 5727 	ld	c, #0x00
      001928                       5728 00110$:
                                   5729 ;src\/Graphics\Graphics.h:328: WRTVRM(SPRATT + (i * 4), 	192);
      001928 79               [ 4] 5730 	ld	a,c
      001929 FE 20            [ 7] 5731 	cp	a,#0x20
      00192B 30 18            [12] 5732 	jr	NC, 00101$
      00192D 26 00            [ 7] 5733 	ld	h, #0x00
      00192F 6F               [ 4] 5734 	ld	l, a
      001930 29               [11] 5735 	add	hl, hl
      001931 29               [11] 5736 	add	hl, hl
      001932 7C               [ 4] 5737 	ld	a, h
      001933 C6 1B            [ 7] 5738 	add	a, #0x1b
      001935 67               [ 4] 5739 	ld	h, a
      001936 C5               [11] 5740 	push	bc
      001937 3E C0            [ 7] 5741 	ld	a, #0xc0
      001939 F5               [11] 5742 	push	af
      00193A 33               [ 6] 5743 	inc	sp
      00193B E5               [11] 5744 	push	hl
      00193C CDr00r00         [17] 5745 	call	_WRTVRM
      00193F F1               [10] 5746 	pop	af
      001940 33               [ 6] 5747 	inc	sp
      001941 C1               [10] 5748 	pop	bc
                                   5749 ;src\/Graphics\Graphics.h:327: for(byte i=0; i<32; i++) {
      001942 0C               [ 4] 5750 	inc	c
      001943 18 E3            [12] 5751 	jr	00110$
      001945                       5752 00101$:
                                   5753 ;src\/Graphics\Graphics.h:337: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001945 21 78 01         [10] 5754 	ld	hl, #0x0178
      001948 E5               [11] 5755 	push	hl
      001949 21r78r04         [10] 5756 	ld	hl, #_pattern_black_0
      00194C E5               [11] 5757 	push	hl
      00194D 21 00 00         [10] 5758 	ld	hl, #0x0000
      001950 E5               [11] 5759 	push	hl
      001951 CDr00r00         [17] 5760 	call	_LDIRVM
      001954 21 06 00         [10] 5761 	ld	hl, #6
      001957 39               [11] 5762 	add	hl, sp
      001958 F9               [ 6] 5763 	ld	sp, hl
                                   5764 ;src\/Graphics\Graphics.h:340: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001959 21 78 01         [10] 5765 	ld	hl, #0x0178
      00195C E5               [11] 5766 	push	hl
      00195D 21r78r04         [10] 5767 	ld	hl, #_pattern_black_0
      001960 E5               [11] 5768 	push	hl
      001961 21 00 08         [10] 5769 	ld	hl, #0x0800
      001964 E5               [11] 5770 	push	hl
      001965 CDr00r00         [17] 5771 	call	_LDIRVM
      001968 21 06 00         [10] 5772 	ld	hl, #6
      00196B 39               [11] 5773 	add	hl, sp
      00196C F9               [ 6] 5774 	ld	sp, hl
                                   5775 ;src\/Graphics\Graphics.h:343: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      00196D 21 78 01         [10] 5776 	ld	hl, #0x0178
      001970 E5               [11] 5777 	push	hl
      001971 21r78r04         [10] 5778 	ld	hl, #_pattern_black_0
      001974 E5               [11] 5779 	push	hl
      001975 21 00 10         [10] 5780 	ld	hl, #0x1000
      001978 E5               [11] 5781 	push	hl
      001979 CDr00r00         [17] 5782 	call	_LDIRVM
      00197C 21 06 00         [10] 5783 	ld	hl, #6
      00197F 39               [11] 5784 	add	hl, sp
      001980 F9               [ 6] 5785 	ld	sp, hl
                                   5786 ;src\/Graphics\Graphics.h:346: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001981 21 00 03         [10] 5787 	ld	hl, #0x0300
      001984 E5               [11] 5788 	push	hl
      001985 21r78r01         [10] 5789 	ld	hl, #_FONT
      001988 E5               [11] 5790 	push	hl
      001989 21 78 01         [10] 5791 	ld	hl, #0x0178
      00198C E5               [11] 5792 	push	hl
      00198D CDr00r00         [17] 5793 	call	_LDIRVM
      001990 21 06 00         [10] 5794 	ld	hl, #6
      001993 39               [11] 5795 	add	hl, sp
      001994 F9               [ 6] 5796 	ld	sp, hl
                                   5797 ;src\/Graphics\Graphics.h:349: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001995 21 00 03         [10] 5798 	ld	hl, #0x0300
      001998 E5               [11] 5799 	push	hl
      001999 21r78r01         [10] 5800 	ld	hl, #_FONT
      00199C E5               [11] 5801 	push	hl
      00199D 21 78 09         [10] 5802 	ld	hl, #0x0978
      0019A0 E5               [11] 5803 	push	hl
      0019A1 CDr00r00         [17] 5804 	call	_LDIRVM
      0019A4 21 06 00         [10] 5805 	ld	hl, #6
      0019A7 39               [11] 5806 	add	hl, sp
      0019A8 F9               [ 6] 5807 	ld	sp, hl
                                   5808 ;src\/Graphics\Graphics.h:352: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      0019A9 21 00 03         [10] 5809 	ld	hl, #0x0300
      0019AC E5               [11] 5810 	push	hl
      0019AD 21r78r01         [10] 5811 	ld	hl, #_FONT
      0019B0 E5               [11] 5812 	push	hl
      0019B1 21 78 11         [10] 5813 	ld	hl, #0x1178
      0019B4 E5               [11] 5814 	push	hl
      0019B5 CDr00r00         [17] 5815 	call	_LDIRVM
      0019B8 21 06 00         [10] 5816 	ld	hl, #6
      0019BB 39               [11] 5817 	add	hl, sp
      0019BC F9               [ 6] 5818 	ld	sp, hl
                                   5819 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0019BD 0E 00            [ 7] 5820 	ld	c, #0x00
      0019BF                       5821 00113$:
                                   5822 ;src\/Graphics\Graphics.h:357: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      0019BF 79               [ 4] 5823 	ld	a,c
      0019C0 FE 07            [ 7] 5824 	cp	a,#0x07
      0019C2 30 20            [12] 5825 	jr	NC, 00102$
      0019C4 26 00            [ 7] 5826 	ld	h, #0x00
      0019C6 6F               [ 4] 5827 	ld	l, a
      0019C7 29               [11] 5828 	add	hl, hl
      0019C8 29               [11] 5829 	add	hl, hl
      0019C9 29               [11] 5830 	add	hl, hl
      0019CA 11 70 04         [10] 5831 	ld	de, #0x0470
      0019CD 19               [11] 5832 	add	hl, de
      0019CE C5               [11] 5833 	push	bc
      0019CF 11 38 00         [10] 5834 	ld	de, #0x0038
      0019D2 D5               [11] 5835 	push	de
      0019D3 11rE8r05         [10] 5836 	ld	de, #_pattern_title
      0019D6 D5               [11] 5837 	push	de
      0019D7 E5               [11] 5838 	push	hl
      0019D8 CDr00r00         [17] 5839 	call	_LDIRVM
      0019DB 21 06 00         [10] 5840 	ld	hl, #6
      0019DE 39               [11] 5841 	add	hl, sp
      0019DF F9               [ 6] 5842 	ld	sp, hl
      0019E0 C1               [10] 5843 	pop	bc
                                   5844 ;src\/Graphics\Graphics.h:356: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      0019E1 0C               [ 4] 5845 	inc	c
      0019E2 18 DB            [12] 5846 	jr	00113$
      0019E4                       5847 00102$:
                                   5848 ;src\/Graphics\Graphics.h:363: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      0019E4 21 78 01         [10] 5849 	ld	hl, #0x0178
      0019E7 E5               [11] 5850 	push	hl
      0019E8 21rF0r05         [10] 5851 	ld	hl, #_color_black_0
      0019EB E5               [11] 5852 	push	hl
      0019EC 21 00 20         [10] 5853 	ld	hl, #0x2000
      0019EF E5               [11] 5854 	push	hl
      0019F0 CDr00r00         [17] 5855 	call	_LDIRVM
      0019F3 21 06 00         [10] 5856 	ld	hl, #6
      0019F6 39               [11] 5857 	add	hl, sp
      0019F7 F9               [ 6] 5858 	ld	sp, hl
                                   5859 ;src\/Graphics\Graphics.h:365: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      0019F8 21 78 01         [10] 5860 	ld	hl, #0x0178
      0019FB E5               [11] 5861 	push	hl
      0019FC 21rF0r05         [10] 5862 	ld	hl, #_color_black_0
      0019FF E5               [11] 5863 	push	hl
      001A00 21 00 28         [10] 5864 	ld	hl, #0x2800
      001A03 E5               [11] 5865 	push	hl
      001A04 CDr00r00         [17] 5866 	call	_LDIRVM
      001A07 21 06 00         [10] 5867 	ld	hl, #6
      001A0A 39               [11] 5868 	add	hl, sp
      001A0B F9               [ 6] 5869 	ld	sp, hl
                                   5870 ;src\/Graphics\Graphics.h:367: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001A0C 21 78 01         [10] 5871 	ld	hl, #0x0178
      001A0F E5               [11] 5872 	push	hl
      001A10 21rF0r05         [10] 5873 	ld	hl, #_color_black_0
      001A13 E5               [11] 5874 	push	hl
      001A14 21 00 30         [10] 5875 	ld	hl, #0x3000
      001A17 E5               [11] 5876 	push	hl
      001A18 CDr00r00         [17] 5877 	call	_LDIRVM
      001A1B 21 06 00         [10] 5878 	ld	hl, #6
      001A1E 39               [11] 5879 	add	hl, sp
      001A1F F9               [ 6] 5880 	ld	sp, hl
                                   5881 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A20 0E 00            [ 7] 5882 	ld	c, #0x00
      001A22                       5883 00116$:
                                   5884 ;src\/Graphics\Graphics.h:375: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001A22 79               [ 4] 5885 	ld	a,c
      001A23 FE 60            [ 7] 5886 	cp	a,#0x60
      001A25 30 20            [12] 5887 	jr	NC, 00103$
      001A27 26 00            [ 7] 5888 	ld	h, #0x00
      001A29 6F               [ 4] 5889 	ld	l, a
      001A2A 29               [11] 5890 	add	hl, hl
      001A2B 29               [11] 5891 	add	hl, hl
      001A2C 29               [11] 5892 	add	hl, hl
      001A2D 11 78 21         [10] 5893 	ld	de, #0x2178
      001A30 19               [11] 5894 	add	hl, de
      001A31 C5               [11] 5895 	push	bc
      001A32 11 08 00         [10] 5896 	ld	de, #0x0008
      001A35 D5               [11] 5897 	push	de
      001A36 11r68r07         [10] 5898 	ld	de, #_color_font_2
      001A39 D5               [11] 5899 	push	de
      001A3A E5               [11] 5900 	push	hl
      001A3B CDr00r00         [17] 5901 	call	_LDIRVM
      001A3E 21 06 00         [10] 5902 	ld	hl, #6
      001A41 39               [11] 5903 	add	hl, sp
      001A42 F9               [ 6] 5904 	ld	sp, hl
      001A43 C1               [10] 5905 	pop	bc
                                   5906 ;src\/Graphics\Graphics.h:374: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A44 0C               [ 4] 5907 	inc	c
      001A45 18 DB            [12] 5908 	jr	00116$
      001A47                       5909 00103$:
                                   5910 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A47 0E 00            [ 7] 5911 	ld	c, #0x00
      001A49                       5912 00119$:
                                   5913 ;src\/Graphics\Graphics.h:379: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001A49 79               [ 4] 5914 	ld	a,c
      001A4A FE 60            [ 7] 5915 	cp	a,#0x60
      001A4C 30 20            [12] 5916 	jr	NC, 00104$
      001A4E 26 00            [ 7] 5917 	ld	h, #0x00
      001A50 6F               [ 4] 5918 	ld	l, a
      001A51 29               [11] 5919 	add	hl, hl
      001A52 29               [11] 5920 	add	hl, hl
      001A53 29               [11] 5921 	add	hl, hl
      001A54 11 78 29         [10] 5922 	ld	de, #0x2978
      001A57 19               [11] 5923 	add	hl, de
      001A58 C5               [11] 5924 	push	bc
      001A59 11 08 00         [10] 5925 	ld	de, #0x0008
      001A5C D5               [11] 5926 	push	de
      001A5D 11r68r07         [10] 5927 	ld	de, #_color_font_2
      001A60 D5               [11] 5928 	push	de
      001A61 E5               [11] 5929 	push	hl
      001A62 CDr00r00         [17] 5930 	call	_LDIRVM
      001A65 21 06 00         [10] 5931 	ld	hl, #6
      001A68 39               [11] 5932 	add	hl, sp
      001A69 F9               [ 6] 5933 	ld	sp, hl
      001A6A C1               [10] 5934 	pop	bc
                                   5935 ;src\/Graphics\Graphics.h:378: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A6B 0C               [ 4] 5936 	inc	c
      001A6C 18 DB            [12] 5937 	jr	00119$
      001A6E                       5938 00104$:
                                   5939 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A6E 0E 00            [ 7] 5940 	ld	c, #0x00
      001A70                       5941 00122$:
                                   5942 ;src\/Graphics\Graphics.h:383: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001A70 79               [ 4] 5943 	ld	a,c
      001A71 FE 60            [ 7] 5944 	cp	a,#0x60
      001A73 30 20            [12] 5945 	jr	NC, 00105$
      001A75 26 00            [ 7] 5946 	ld	h, #0x00
      001A77 6F               [ 4] 5947 	ld	l, a
      001A78 29               [11] 5948 	add	hl, hl
      001A79 29               [11] 5949 	add	hl, hl
      001A7A 29               [11] 5950 	add	hl, hl
      001A7B 11 78 31         [10] 5951 	ld	de, #0x3178
      001A7E 19               [11] 5952 	add	hl, de
      001A7F C5               [11] 5953 	push	bc
      001A80 11 08 00         [10] 5954 	ld	de, #0x0008
      001A83 D5               [11] 5955 	push	de
      001A84 11r68r07         [10] 5956 	ld	de, #_color_font_2
      001A87 D5               [11] 5957 	push	de
      001A88 E5               [11] 5958 	push	hl
      001A89 CDr00r00         [17] 5959 	call	_LDIRVM
      001A8C 21 06 00         [10] 5960 	ld	hl, #6
      001A8F 39               [11] 5961 	add	hl, sp
      001A90 F9               [ 6] 5962 	ld	sp, hl
      001A91 C1               [10] 5963 	pop	bc
                                   5964 ;src\/Graphics\Graphics.h:382: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001A92 0C               [ 4] 5965 	inc	c
      001A93 18 DB            [12] 5966 	jr	00122$
      001A95                       5967 00105$:
                                   5968 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      001A95 0E 00            [ 7] 5969 	ld	c, #0x00
      001A97                       5970 00125$:
                                   5971 ;src\/Graphics\Graphics.h:392: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001A97 79               [ 4] 5972 	ld	a,c
      001A98 FE 0A            [ 7] 5973 	cp	a,#0x0a
      001A9A 30 20            [12] 5974 	jr	NC, 00106$
      001A9C 26 00            [ 7] 5975 	ld	h, #0x00
      001A9E 6F               [ 4] 5976 	ld	l, a
      001A9F 29               [11] 5977 	add	hl, hl
      001AA0 29               [11] 5978 	add	hl, hl
      001AA1 29               [11] 5979 	add	hl, hl
      001AA2 11 F8 21         [10] 5980 	ld	de, #0x21f8
      001AA5 19               [11] 5981 	add	hl, de
      001AA6 C5               [11] 5982 	push	bc
      001AA7 11 08 00         [10] 5983 	ld	de, #0x0008
      001AAA D5               [11] 5984 	push	de
      001AAB 11r60r07         [10] 5985 	ld	de, #_color_font_1
      001AAE D5               [11] 5986 	push	de
      001AAF E5               [11] 5987 	push	hl
      001AB0 CDr00r00         [17] 5988 	call	_LDIRVM
      001AB3 21 06 00         [10] 5989 	ld	hl, #6
      001AB6 39               [11] 5990 	add	hl, sp
      001AB7 F9               [ 6] 5991 	ld	sp, hl
      001AB8 C1               [10] 5992 	pop	bc
                                   5993 ;src\/Graphics\Graphics.h:391: for(byte i = 0; i < 10; i++) {
      001AB9 0C               [ 4] 5994 	inc	c
      001ABA 18 DB            [12] 5995 	jr	00125$
      001ABC                       5996 00106$:
                                   5997 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001ABC 0E 00            [ 7] 5998 	ld	c, #0x00
      001ABE                       5999 00128$:
                                   6000 ;src\/Graphics\Graphics.h:396: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001ABE 79               [ 4] 6001 	ld	a,c
      001ABF FE 0A            [ 7] 6002 	cp	a,#0x0a
      001AC1 30 20            [12] 6003 	jr	NC, 00107$
      001AC3 26 00            [ 7] 6004 	ld	h, #0x00
      001AC5 6F               [ 4] 6005 	ld	l, a
      001AC6 29               [11] 6006 	add	hl, hl
      001AC7 29               [11] 6007 	add	hl, hl
      001AC8 29               [11] 6008 	add	hl, hl
      001AC9 11 F8 29         [10] 6009 	ld	de, #0x29f8
      001ACC 19               [11] 6010 	add	hl, de
      001ACD C5               [11] 6011 	push	bc
      001ACE 11 08 00         [10] 6012 	ld	de, #0x0008
      001AD1 D5               [11] 6013 	push	de
      001AD2 11r60r07         [10] 6014 	ld	de, #_color_font_1
      001AD5 D5               [11] 6015 	push	de
      001AD6 E5               [11] 6016 	push	hl
      001AD7 CDr00r00         [17] 6017 	call	_LDIRVM
      001ADA 21 06 00         [10] 6018 	ld	hl, #6
      001ADD 39               [11] 6019 	add	hl, sp
      001ADE F9               [ 6] 6020 	ld	sp, hl
      001ADF C1               [10] 6021 	pop	bc
                                   6022 ;src\/Graphics\Graphics.h:395: for(byte i = 0; i < 10; i++) {
      001AE0 0C               [ 4] 6023 	inc	c
      001AE1 18 DB            [12] 6024 	jr	00128$
      001AE3                       6025 00107$:
                                   6026 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001AE3 DD 36 FF 00      [19] 6027 	ld	-1 (ix), #0
      001AE7                       6028 00131$:
      001AE7 DD 7E FF         [19] 6029 	ld	a, -1 (ix)
      001AEA D6 0A            [ 7] 6030 	sub	a, #0x0a
      001AEC 30 22            [12] 6031 	jr	NC, 00108$
                                   6032 ;src\/Graphics\Graphics.h:400: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001AEE 01r60r07         [10] 6033 	ld	bc, #_color_font_1
      001AF1 DD 6E FF         [19] 6034 	ld	l, -1 (ix)
      001AF4 26 00            [ 7] 6035 	ld	h, #0x00
      001AF6 29               [11] 6036 	add	hl, hl
      001AF7 29               [11] 6037 	add	hl, hl
      001AF8 29               [11] 6038 	add	hl, hl
      001AF9 11 F8 31         [10] 6039 	ld	de, #0x31f8
      001AFC 19               [11] 6040 	add	hl, de
      001AFD 11 08 00         [10] 6041 	ld	de, #0x0008
      001B00 D5               [11] 6042 	push	de
      001B01 C5               [11] 6043 	push	bc
      001B02 E5               [11] 6044 	push	hl
      001B03 CDr00r00         [17] 6045 	call	_LDIRVM
      001B06 21 06 00         [10] 6046 	ld	hl, #6
      001B09 39               [11] 6047 	add	hl, sp
      001B0A F9               [ 6] 6048 	ld	sp, hl
                                   6049 ;src\/Graphics\Graphics.h:399: for(byte i = 0; i < 10; i++) {
      001B0B DD 34 FF         [23] 6050 	inc	-1 (ix)
      001B0E 18 D7            [12] 6051 	jr	00131$
      001B10                       6052 00108$:
                                   6053 ;src\/Graphics\Graphics.h:404: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001B10 21 38 00         [10] 6054 	ld	hl, #0x0038
      001B13 E5               [11] 6055 	push	hl
      001B14 21r70r07         [10] 6056 	ld	hl, #_color_title_1
      001B17 E5               [11] 6057 	push	hl
      001B18 21 70 24         [10] 6058 	ld	hl, #0x2470
      001B1B E5               [11] 6059 	push	hl
      001B1C CDr00r00         [17] 6060 	call	_LDIRVM
      001B1F 21 06 00         [10] 6061 	ld	hl, #6
      001B22 39               [11] 6062 	add	hl, sp
      001B23 F9               [ 6] 6063 	ld	sp, hl
                                   6064 ;src\/Graphics\Graphics.h:412: ENASCR();	// Enable screen
      001B24 CDr00r00         [17] 6065 	call	_ENASCR
                                   6066 ;src\/Graphics\Graphics.h:413: }
      001B27 33               [ 6] 6067 	inc	sp
      001B28 DD E1            [14] 6068 	pop	ix
      001B2A C9               [10] 6069 	ret
                                   6070 ;src\/Graphics\Graphics.h:415: void DrawBlock(byte col, byte line, byte tile) {
                                   6071 ;	---------------------------------
                                   6072 ; Function DrawBlock
                                   6073 ; ---------------------------------
      001B2B                       6074 _DrawBlock::
      001B2B DD E5            [15] 6075 	push	ix
      001B2D DD 21 00 00      [14] 6076 	ld	ix,#0
      001B31 DD 39            [15] 6077 	add	ix,sp
                                   6078 ;src\/Graphics\Graphics.h:417: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001B33 DD 6E 04         [19] 6079 	ld	l, 4 (ix)
      001B36 26 00            [ 7] 6080 	ld	h, #0x00
      001B38 29               [11] 6081 	add	hl, hl
      001B39 4D               [ 4] 6082 	ld	c, l
      001B3A 44               [ 4] 6083 	ld	b, h
      001B3B DD 6E 05         [19] 6084 	ld	l, 5 (ix)
      001B3E 26 00            [ 7] 6085 	ld	h, #0x00
      001B40 29               [11] 6086 	add	hl, hl
      001B41 29               [11] 6087 	add	hl, hl
      001B42 29               [11] 6088 	add	hl, hl
      001B43 29               [11] 6089 	add	hl, hl
      001B44 29               [11] 6090 	add	hl, hl
      001B45 29               [11] 6091 	add	hl, hl
      001B46 11 0A 18         [10] 6092 	ld	de, #0x180a
      001B49 19               [11] 6093 	add	hl, de
      001B4A 09               [11] 6094 	add	hl, bc
      001B4B EB               [ 4] 6095 	ex	de, hl
                                   6096 ;src\/Graphics\Graphics.h:419: WRTVRM(baseAddr, tile);
      001B4C D5               [11] 6097 	push	de
      001B4D DD 7E 06         [19] 6098 	ld	a, 6 (ix)
      001B50 F5               [11] 6099 	push	af
      001B51 33               [ 6] 6100 	inc	sp
      001B52 D5               [11] 6101 	push	de
      001B53 CDr00r00         [17] 6102 	call	_WRTVRM
      001B56 F1               [10] 6103 	pop	af
      001B57 33               [ 6] 6104 	inc	sp
      001B58 D1               [10] 6105 	pop	de
                                   6106 ;src\/Graphics\Graphics.h:420: WRTVRM(baseAddr + 1, tile + 1);
      001B59 DD 4E 06         [19] 6107 	ld	c, 6 (ix)
      001B5C 79               [ 4] 6108 	ld	a, c
      001B5D 3C               [ 4] 6109 	inc	a
      001B5E 6B               [ 4] 6110 	ld	l, e
      001B5F 62               [ 4] 6111 	ld	h, d
      001B60 23               [ 6] 6112 	inc	hl
      001B61 C5               [11] 6113 	push	bc
      001B62 D5               [11] 6114 	push	de
      001B63 F5               [11] 6115 	push	af
      001B64 33               [ 6] 6116 	inc	sp
      001B65 E5               [11] 6117 	push	hl
      001B66 CDr00r00         [17] 6118 	call	_WRTVRM
      001B69 F1               [10] 6119 	pop	af
      001B6A 33               [ 6] 6120 	inc	sp
      001B6B D1               [10] 6121 	pop	de
      001B6C C1               [10] 6122 	pop	bc
                                   6123 ;src\/Graphics\Graphics.h:421: WRTVRM(baseAddr + 32, tile + 2);
      001B6D 41               [ 4] 6124 	ld	b, c
      001B6E 04               [ 4] 6125 	inc	b
      001B6F 04               [ 4] 6126 	inc	b
      001B70 21 20 00         [10] 6127 	ld	hl, #0x0020
      001B73 19               [11] 6128 	add	hl, de
      001B74 C5               [11] 6129 	push	bc
      001B75 D5               [11] 6130 	push	de
      001B76 C5               [11] 6131 	push	bc
      001B77 33               [ 6] 6132 	inc	sp
      001B78 E5               [11] 6133 	push	hl
      001B79 CDr00r00         [17] 6134 	call	_WRTVRM
      001B7C F1               [10] 6135 	pop	af
      001B7D 33               [ 6] 6136 	inc	sp
      001B7E D1               [10] 6137 	pop	de
      001B7F C1               [10] 6138 	pop	bc
                                   6139 ;src\/Graphics\Graphics.h:422: WRTVRM(baseAddr + 33, tile + 3);
      001B80 0C               [ 4] 6140 	inc	c
      001B81 0C               [ 4] 6141 	inc	c
      001B82 0C               [ 4] 6142 	inc	c
      001B83 21 21 00         [10] 6143 	ld	hl, #0x0021
      001B86 19               [11] 6144 	add	hl, de
      001B87 79               [ 4] 6145 	ld	a, c
      001B88 F5               [11] 6146 	push	af
      001B89 33               [ 6] 6147 	inc	sp
      001B8A E5               [11] 6148 	push	hl
      001B8B CDr00r00         [17] 6149 	call	_WRTVRM
      001B8E F1               [10] 6150 	pop	af
      001B8F 33               [ 6] 6151 	inc	sp
                                   6152 ;src\/Graphics\Graphics.h:423: }
      001B90 DD E1            [14] 6153 	pop	ix
      001B92 C9               [10] 6154 	ret
                                   6155 ;src\/Graphics\Graphics.h:425: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   6156 ;	---------------------------------
                                   6157 ; Function DrawBlock_SameTile
                                   6158 ; ---------------------------------
      001B93                       6159 _DrawBlock_SameTile::
      001B93 DD E5            [15] 6160 	push	ix
      001B95 DD 21 00 00      [14] 6161 	ld	ix,#0
      001B99 DD 39            [15] 6162 	add	ix,sp
                                   6163 ;src\/Graphics\Graphics.h:427: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001B9B DD 6E 04         [19] 6164 	ld	l, 4 (ix)
      001B9E 26 00            [ 7] 6165 	ld	h, #0x00
      001BA0 29               [11] 6166 	add	hl, hl
      001BA1 4D               [ 4] 6167 	ld	c, l
      001BA2 44               [ 4] 6168 	ld	b, h
      001BA3 DD 6E 05         [19] 6169 	ld	l, 5 (ix)
      001BA6 26 00            [ 7] 6170 	ld	h, #0x00
      001BA8 29               [11] 6171 	add	hl, hl
      001BA9 29               [11] 6172 	add	hl, hl
      001BAA 29               [11] 6173 	add	hl, hl
      001BAB 29               [11] 6174 	add	hl, hl
      001BAC 29               [11] 6175 	add	hl, hl
      001BAD 29               [11] 6176 	add	hl, hl
      001BAE 11 0A 18         [10] 6177 	ld	de, #0x180a
      001BB1 19               [11] 6178 	add	hl, de
      001BB2 09               [11] 6179 	add	hl, bc
      001BB3 EB               [ 4] 6180 	ex	de, hl
                                   6181 ;src\/Graphics\Graphics.h:429: WRTVRM(baseAddr, tile);
      001BB4 D5               [11] 6182 	push	de
      001BB5 DD 7E 06         [19] 6183 	ld	a, 6 (ix)
      001BB8 F5               [11] 6184 	push	af
      001BB9 33               [ 6] 6185 	inc	sp
      001BBA D5               [11] 6186 	push	de
      001BBB CDr00r00         [17] 6187 	call	_WRTVRM
      001BBE F1               [10] 6188 	pop	af
      001BBF 33               [ 6] 6189 	inc	sp
      001BC0 D1               [10] 6190 	pop	de
                                   6191 ;src\/Graphics\Graphics.h:430: WRTVRM(baseAddr + 1, tile);
      001BC1 4B               [ 4] 6192 	ld	c, e
      001BC2 42               [ 4] 6193 	ld	b, d
      001BC3 03               [ 6] 6194 	inc	bc
      001BC4 D5               [11] 6195 	push	de
      001BC5 DD 7E 06         [19] 6196 	ld	a, 6 (ix)
      001BC8 F5               [11] 6197 	push	af
      001BC9 33               [ 6] 6198 	inc	sp
      001BCA C5               [11] 6199 	push	bc
      001BCB CDr00r00         [17] 6200 	call	_WRTVRM
      001BCE F1               [10] 6201 	pop	af
      001BCF 33               [ 6] 6202 	inc	sp
      001BD0 D1               [10] 6203 	pop	de
                                   6204 ;src\/Graphics\Graphics.h:431: WRTVRM(baseAddr + 32, tile);
      001BD1 21 20 00         [10] 6205 	ld	hl, #0x0020
      001BD4 19               [11] 6206 	add	hl, de
      001BD5 D5               [11] 6207 	push	de
      001BD6 DD 7E 06         [19] 6208 	ld	a, 6 (ix)
      001BD9 F5               [11] 6209 	push	af
      001BDA 33               [ 6] 6210 	inc	sp
      001BDB E5               [11] 6211 	push	hl
      001BDC CDr00r00         [17] 6212 	call	_WRTVRM
      001BDF F1               [10] 6213 	pop	af
      001BE0 33               [ 6] 6214 	inc	sp
      001BE1 D1               [10] 6215 	pop	de
                                   6216 ;src\/Graphics\Graphics.h:432: WRTVRM(baseAddr + 33, tile);
      001BE2 21 21 00         [10] 6217 	ld	hl, #0x0021
      001BE5 19               [11] 6218 	add	hl, de
      001BE6 DD 7E 06         [19] 6219 	ld	a, 6 (ix)
      001BE9 F5               [11] 6220 	push	af
      001BEA 33               [ 6] 6221 	inc	sp
      001BEB E5               [11] 6222 	push	hl
      001BEC CDr00r00         [17] 6223 	call	_WRTVRM
      001BEF F1               [10] 6224 	pop	af
      001BF0 33               [ 6] 6225 	inc	sp
                                   6226 ;src\/Graphics\Graphics.h:433: }
      001BF1 DD E1            [14] 6227 	pop	ix
      001BF3 C9               [10] 6228 	ret
                                   6229 ;src\/Graphics\Graphics.h:435: void DrawLine(byte line) {
                                   6230 ;	---------------------------------
                                   6231 ; Function DrawLine
                                   6232 ; ---------------------------------
      001BF4                       6233 _DrawLine::
      001BF4 DD E5            [15] 6234 	push	ix
      001BF6 DD 21 00 00      [14] 6235 	ld	ix,#0
      001BFA DD 39            [15] 6236 	add	ix,sp
                                   6237 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001BFC DD 4E 04         [19] 6238 	ld	c, 4 (ix)
      001BFF 06 00            [ 7] 6239 	ld	b, #0x00
      001C01                       6240 00103$:
      001C01 78               [ 4] 6241 	ld	a, b
      001C02 D6 06            [ 7] 6242 	sub	a, #0x06
      001C04 30 23            [12] 6243 	jr	NC, 00105$
                                   6244 ;src\/Graphics\Graphics.h:437: DrawBlock(col, line, playfield[col][line]);
      001C06 58               [ 4] 6245 	ld	e, b
      001C07 16 00            [ 7] 6246 	ld	d, #0x00
      001C09 6B               [ 4] 6247 	ld	l, e
      001C0A 62               [ 4] 6248 	ld	h, d
      001C0B 29               [11] 6249 	add	hl, hl
      001C0C 19               [11] 6250 	add	hl, de
      001C0D 29               [11] 6251 	add	hl, hl
      001C0E 29               [11] 6252 	add	hl, hl
      001C0F 11r00r00         [10] 6253 	ld	de, #_playfield
      001C12 19               [11] 6254 	add	hl, de
      001C13 59               [ 4] 6255 	ld	e, c
      001C14 16 00            [ 7] 6256 	ld	d, #0x00
      001C16 19               [11] 6257 	add	hl, de
      001C17 7E               [ 7] 6258 	ld	a, (hl)
      001C18 C5               [11] 6259 	push	bc
      001C19 F5               [11] 6260 	push	af
      001C1A 33               [ 6] 6261 	inc	sp
      001C1B 79               [ 4] 6262 	ld	a, c
      001C1C F5               [11] 6263 	push	af
      001C1D 33               [ 6] 6264 	inc	sp
      001C1E C5               [11] 6265 	push	bc
      001C1F 33               [ 6] 6266 	inc	sp
      001C20 CDr2Br1B         [17] 6267 	call	_DrawBlock
      001C23 F1               [10] 6268 	pop	af
      001C24 33               [ 6] 6269 	inc	sp
      001C25 C1               [10] 6270 	pop	bc
                                   6271 ;src\/Graphics\Graphics.h:436: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001C26 04               [ 4] 6272 	inc	b
      001C27 18 D8            [12] 6273 	jr	00103$
      001C29                       6274 00105$:
                                   6275 ;src\/Graphics\Graphics.h:439: }
      001C29 DD E1            [14] 6276 	pop	ix
      001C2B C9               [10] 6277 	ret
                                   6278 ;src\/Graphics\Graphics.h:441: void DrawPiece(byte line) {
                                   6279 ;	---------------------------------
                                   6280 ; Function DrawPiece
                                   6281 ; ---------------------------------
      001C2C                       6282 _DrawPiece::
                                   6283 ;src\/Graphics\Graphics.h:442: DrawLine(line);
      001C2C 21 02 00         [10] 6284 	ld	hl, #2
      001C2F 39               [11] 6285 	add	hl, sp
      001C30 7E               [ 7] 6286 	ld	a, (hl)
      001C31 F5               [11] 6287 	push	af
      001C32 33               [ 6] 6288 	inc	sp
      001C33 CDrF4r1B         [17] 6289 	call	_DrawLine
      001C36 33               [ 6] 6290 	inc	sp
                                   6291 ;src\/Graphics\Graphics.h:443: DrawLine(line + 1);
      001C37 21 02 00         [10] 6292 	ld	hl, #2
      001C3A 39               [11] 6293 	add	hl, sp
      001C3B 46               [ 7] 6294 	ld	b, (hl)
      001C3C 78               [ 4] 6295 	ld	a, b
      001C3D 3C               [ 4] 6296 	inc	a
      001C3E C5               [11] 6297 	push	bc
      001C3F F5               [11] 6298 	push	af
      001C40 33               [ 6] 6299 	inc	sp
      001C41 CDrF4r1B         [17] 6300 	call	_DrawLine
      001C44 33               [ 6] 6301 	inc	sp
      001C45 C1               [10] 6302 	pop	bc
                                   6303 ;src\/Graphics\Graphics.h:444: DrawLine(line + 2);
      001C46 04               [ 4] 6304 	inc	b
      001C47 04               [ 4] 6305 	inc	b
      001C48 C5               [11] 6306 	push	bc
      001C49 33               [ 6] 6307 	inc	sp
      001C4A CDrF4r1B         [17] 6308 	call	_DrawLine
      001C4D 33               [ 6] 6309 	inc	sp
                                   6310 ;src\/Graphics\Graphics.h:445: }
      001C4E C9               [10] 6311 	ret
                                   6312 ;src\/Graphics\Graphics.h:447: void DrawPlayfield() {
                                   6313 ;	---------------------------------
                                   6314 ; Function DrawPlayfield
                                   6315 ; ---------------------------------
      001C4F                       6316 _DrawPlayfield::
                                   6317 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C4F 06 00            [ 7] 6318 	ld	b, #0x00
      001C51                       6319 00103$:
      001C51 78               [ 4] 6320 	ld	a, b
      001C52 D6 0C            [ 7] 6321 	sub	a, #0x0c
      001C54 D0               [11] 6322 	ret	NC
                                   6323 ;src\/Graphics\Graphics.h:449: DrawLine(line);
      001C55 C5               [11] 6324 	push	bc
      001C56 C5               [11] 6325 	push	bc
      001C57 33               [ 6] 6326 	inc	sp
      001C58 CDrF4r1B         [17] 6327 	call	_DrawLine
      001C5B 33               [ 6] 6328 	inc	sp
      001C5C C1               [10] 6329 	pop	bc
                                   6330 ;src\/Graphics\Graphics.h:448: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001C5D 04               [ 4] 6331 	inc	b
                                   6332 ;src\/Graphics\Graphics.h:451: }
      001C5E 18 F1            [12] 6333 	jr	00103$
                                   6334 ;src\/Sound.h:1: void SoundFx_2() {
                                   6335 ;	---------------------------------
                                   6336 ; Function SoundFx_2
                                   6337 ; ---------------------------------
      001C60                       6338 _SoundFx_2::
                                   6339 ;src\/Sound.h:2: GICINI();
      001C60 CDr00r00         [17] 6340 	call	_GICINI
                                   6341 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001C63 21 08 0F         [10] 6342 	ld	hl, #0x0f08
      001C66 CDr00r00         [17] 6343 	call	_WRTPSG
                                   6344 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001C69 0E 00            [ 7] 6345 	ld	c, #0x00
      001C6B                       6346 00104$:
      001C6B 79               [ 4] 6347 	ld	a, c
      001C6C D6 FF            [ 7] 6348 	sub	a, #0xff
      001C6E 30 11            [12] 6349 	jr	NC, 00101$
                                   6350 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001C70 C5               [11] 6351 	push	bc
      001C71 21 00 5D         [10] 6352 	ld	hl, #0x5d00
      001C74 CDr00r00         [17] 6353 	call	_WRTPSG
      001C77 21 01 00         [10] 6354 	ld	hl, #0x0001
      001C7A CDr00r00         [17] 6355 	call	_WRTPSG
      001C7D C1               [10] 6356 	pop	bc
                                   6357 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001C7E 0C               [ 4] 6358 	inc	c
      001C7F 18 EA            [12] 6359 	jr	00104$
      001C81                       6360 00101$:
                                   6361 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001C81 0E 00            [ 7] 6362 	ld	c, #0x00
      001C83                       6363 00107$:
      001C83 79               [ 4] 6364 	ld	a, c
      001C84 D6 FF            [ 7] 6365 	sub	a, #0xff
      001C86 30 11            [12] 6366 	jr	NC, 00102$
                                   6367 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      001C88 C5               [11] 6368 	push	bc
      001C89 21 00 2D         [10] 6369 	ld	hl, #0x2d00
      001C8C CDr00r00         [17] 6370 	call	_WRTPSG
      001C8F 21 01 00         [10] 6371 	ld	hl, #0x0001
      001C92 CDr00r00         [17] 6372 	call	_WRTPSG
      001C95 C1               [10] 6373 	pop	bc
                                   6374 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      001C96 0C               [ 4] 6375 	inc	c
      001C97 18 EA            [12] 6376 	jr	00107$
      001C99                       6377 00102$:
                                   6378 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      001C99 21 08 00         [10] 6379 	ld	hl, #0x0008
                                   6380 ;src\/Sound.h:30: }
      001C9C C3r00r00         [10] 6381 	jp	_WRTPSG
                                   6382 ;src\/Sound.h:32: void SoundFx_1() {
                                   6383 ;	---------------------------------
                                   6384 ; Function SoundFx_1
                                   6385 ; ---------------------------------
      001C9F                       6386 _SoundFx_1::
                                   6387 ;src\/Sound.h:34: GICINI();
      001C9F CDr00r00         [17] 6388 	call	_GICINI
                                   6389 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      001CA2 21 06 97         [10] 6390 	ld	hl, #0x9706
      001CA5 CDr00r00         [17] 6391 	call	_WRTPSG
                                   6392 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      001CA8 21 07 81         [10] 6393 	ld	hl, #0x8107
      001CAB CDr00r00         [17] 6394 	call	_WRTPSG
                                   6395 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      001CAE 21 08 10         [10] 6396 	ld	hl, #0x1008
      001CB1 CDr00r00         [17] 6397 	call	_WRTPSG
                                   6398 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      001CB4 21 0C 13         [10] 6399 	ld	hl, #0x130c
      001CB7 CDr00r00         [17] 6400 	call	_WRTPSG
                                   6401 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      001CBA 21 0D 01         [10] 6402 	ld	hl, #0x010d
                                   6403 ;src\/Sound.h:49: }
      001CBD C3r00r00         [10] 6404 	jp	_WRTPSG
                                   6405 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   6406 ;	---------------------------------
                                   6407 ; Function CheckPlayfield
                                   6408 ; ---------------------------------
      001CC0                       6409 _CheckPlayfield::
      001CC0 DD E5            [15] 6410 	push	ix
      001CC2 DD 21 00 00      [14] 6411 	ld	ix,#0
      001CC6 DD 39            [15] 6412 	add	ix,sp
      001CC8 21 EF FF         [10] 6413 	ld	hl, #-17
      001CCB 39               [11] 6414 	add	hl, sp
      001CCC F9               [ 6] 6415 	ld	sp, hl
                                   6416 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      001CCD DD 36 EF 00      [19] 6417 	ld	-17 (ix), #0
                                   6418 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001CD1 0E 00            [ 7] 6419 	ld	c, #0x00
      001CD3                       6420 00196$:
      001CD3 79               [ 4] 6421 	ld	a, c
      001CD4 D6 0C            [ 7] 6422 	sub	a, #0x0c
      001CD6 30 36            [12] 6423 	jr	NC, 00102$
                                   6424 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001CD8 DD 36 FF 00      [19] 6425 	ld	-1 (ix), #0
      001CDC                       6426 00193$:
      001CDC DD 7E FF         [19] 6427 	ld	a, -1 (ix)
      001CDF D6 06            [ 7] 6428 	sub	a, #0x06
      001CE1 30 28            [12] 6429 	jr	NC, 00197$
                                   6430 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      001CE3 DD 5E FF         [19] 6431 	ld	e, -1 (ix)
      001CE6 16 00            [ 7] 6432 	ld	d, #0x00
      001CE8 6B               [ 4] 6433 	ld	l, e
      001CE9 62               [ 4] 6434 	ld	h, d
      001CEA 29               [11] 6435 	add	hl, hl
      001CEB 19               [11] 6436 	add	hl, de
      001CEC 29               [11] 6437 	add	hl, hl
      001CED 29               [11] 6438 	add	hl, hl
      001CEE EB               [ 4] 6439 	ex	de, hl
      001CEF 21r48r00         [10] 6440 	ld	hl, #_playfieldTemp
      001CF2 19               [11] 6441 	add	hl, de
      001CF3 06 00            [ 7] 6442 	ld	b, #0x00
      001CF5 09               [11] 6443 	add	hl, bc
      001CF6 3Er00            [ 7] 6444 	ld	a, #<(_playfield)
      001CF8 83               [ 4] 6445 	add	a, e
      001CF9 5F               [ 4] 6446 	ld	e, a
      001CFA 3Es00            [ 7] 6447 	ld	a, #>(_playfield)
      001CFC 8A               [ 4] 6448 	adc	a, d
      001CFD 57               [ 4] 6449 	ld	d, a
      001CFE 7B               [ 4] 6450 	ld	a, e
      001CFF 81               [ 4] 6451 	add	a, c
      001D00 5F               [ 4] 6452 	ld	e, a
      001D01 30 01            [12] 6453 	jr	NC, 00615$
      001D03 14               [ 4] 6454 	inc	d
      001D04                       6455 00615$:
      001D04 1A               [ 7] 6456 	ld	a, (de)
      001D05 77               [ 7] 6457 	ld	(hl), a
                                   6458 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001D06 DD 34 FF         [23] 6459 	inc	-1 (ix)
      001D09 18 D1            [12] 6460 	jr	00193$
      001D0B                       6461 00197$:
                                   6462 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D0B 0C               [ 4] 6463 	inc	c
      001D0C 18 C5            [12] 6464 	jr	00196$
      001D0E                       6465 00102$:
                                   6466 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001D0E DD 36 FE 00      [19] 6467 	ld	-2 (ix), #0
      001D12                       6468 00202$:
      001D12 DD 7E FE         [19] 6469 	ld	a, -2 (ix)
      001D15 D6 0C            [ 7] 6470 	sub	a, #0x0c
      001D17 D2r16r1E         [10] 6471 	jp	NC, 00108$
                                   6472 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001D1A DD 36 FF 02      [19] 6473 	ld	-1 (ix), #0x02
      001D1E                       6474 00199$:
      001D1E DD 7E FF         [19] 6475 	ld	a, -1 (ix)
      001D21 D6 06            [ 7] 6476 	sub	a, #0x06
      001D23 D2r10r1E         [10] 6477 	jp	NC, 00203$
                                   6478 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      001D26 DD 4E FF         [19] 6479 	ld	c, -1 (ix)
      001D29 06 00            [ 7] 6480 	ld	b, #0x00
      001D2B 69               [ 4] 6481 	ld	l, c
      001D2C 60               [ 4] 6482 	ld	h, b
      001D2D 29               [11] 6483 	add	hl, hl
      001D2E 09               [11] 6484 	add	hl, bc
      001D2F 29               [11] 6485 	add	hl, hl
      001D30 29               [11] 6486 	add	hl, hl
      001D31 DD 75 F5         [19] 6487 	ld	-11 (ix), l
      001D34 DD 74 F6         [19] 6488 	ld	-10 (ix), h
      001D37 3Er48            [ 7] 6489 	ld	a, #<(_playfieldTemp)
      001D39 DD 86 F5         [19] 6490 	add	a, -11 (ix)
      001D3C 4F               [ 4] 6491 	ld	c, a
      001D3D 3Es00            [ 7] 6492 	ld	a, #>(_playfieldTemp)
      001D3F DD 8E F6         [19] 6493 	adc	a, -10 (ix)
      001D42 47               [ 4] 6494 	ld	b, a
      001D43 79               [ 4] 6495 	ld	a, c
      001D44 DD 86 FE         [19] 6496 	add	a, -2 (ix)
      001D47 DD 77 F7         [19] 6497 	ld	-9 (ix), a
      001D4A 78               [ 4] 6498 	ld	a, b
      001D4B CE 00            [ 7] 6499 	adc	a, #0x00
      001D4D DD 77 F8         [19] 6500 	ld	-8 (ix), a
      001D50 DD 6E F7         [19] 6501 	ld	l, -9 (ix)
      001D53 DD 66 F8         [19] 6502 	ld	h, -8 (ix)
      001D56 7E               [ 7] 6503 	ld	a, (hl)
      001D57 DD 77 F9         [19] 6504 	ld	-7 (ix), a
      001D5A B7               [ 4] 6505 	or	a, a
      001D5B CAr0Ar1E         [10] 6506 	jp	Z, 00200$
                                   6507 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      001D5E DD 7E FF         [19] 6508 	ld	a, -1 (ix)
      001D61 DD 77 FD         [19] 6509 	ld	-3 (ix), a
      001D64 4F               [ 4] 6510 	ld	c, a
      001D65 0D               [ 4] 6511 	dec	c
      001D66 0D               [ 4] 6512 	dec	c
      001D67 79               [ 4] 6513 	ld	a, c
      001D68 07               [ 4] 6514 	rlca
      001D69 9F               [ 4] 6515 	sbc	a, a
      001D6A 47               [ 4] 6516 	ld	b, a
      001D6B 69               [ 4] 6517 	ld	l, c
      001D6C 60               [ 4] 6518 	ld	h, b
      001D6D 29               [11] 6519 	add	hl, hl
      001D6E 09               [11] 6520 	add	hl, bc
      001D6F 29               [11] 6521 	add	hl, hl
      001D70 29               [11] 6522 	add	hl, hl
      001D71 EB               [ 4] 6523 	ex	de, hl
      001D72 21r48r00         [10] 6524 	ld	hl, #_playfieldTemp
      001D75 19               [11] 6525 	add	hl, de
      001D76 7D               [ 4] 6526 	ld	a, l
      001D77 DD 86 FE         [19] 6527 	add	a, -2 (ix)
      001D7A DD 77 FA         [19] 6528 	ld	-6 (ix), a
      001D7D 7C               [ 4] 6529 	ld	a, h
      001D7E CE 00            [ 7] 6530 	adc	a, #0x00
      001D80 DD 77 FB         [19] 6531 	ld	-5 (ix), a
      001D83 DD 4E FD         [19] 6532 	ld	c, -3 (ix)
      001D86 0D               [ 4] 6533 	dec	c
      001D87 79               [ 4] 6534 	ld	a, c
      001D88 07               [ 4] 6535 	rlca
      001D89 9F               [ 4] 6536 	sbc	a, a
      001D8A 47               [ 4] 6537 	ld	b, a
      001D8B 69               [ 4] 6538 	ld	l, c
      001D8C 60               [ 4] 6539 	ld	h, b
      001D8D 29               [11] 6540 	add	hl, hl
      001D8E 09               [11] 6541 	add	hl, bc
      001D8F 29               [11] 6542 	add	hl, hl
      001D90 29               [11] 6543 	add	hl, hl
      001D91 DD 75 FC         [19] 6544 	ld	-4 (ix), l
      001D94 DD 74 FD         [19] 6545 	ld	-3 (ix), h
      001D97 3Er48            [ 7] 6546 	ld	a, #<(_playfieldTemp)
      001D99 DD 86 FC         [19] 6547 	add	a, -4 (ix)
      001D9C 4F               [ 4] 6548 	ld	c, a
      001D9D 3Es00            [ 7] 6549 	ld	a, #>(_playfieldTemp)
      001D9F DD 8E FD         [19] 6550 	adc	a, -3 (ix)
      001DA2 47               [ 4] 6551 	ld	b, a
      001DA3 79               [ 4] 6552 	ld	a, c
      001DA4 DD 86 FE         [19] 6553 	add	a, -2 (ix)
      001DA7 4F               [ 4] 6554 	ld	c, a
      001DA8 30 01            [12] 6555 	jr	NC, 00616$
      001DAA 04               [ 4] 6556 	inc	b
      001DAB                       6557 00616$:
      001DAB DD 6E FA         [19] 6558 	ld	l, -6 (ix)
      001DAE DD 66 FB         [19] 6559 	ld	h, -5 (ix)
      001DB1 6E               [ 7] 6560 	ld	l, (hl)
      001DB2 0A               [ 7] 6561 	ld	a, (bc)
      001DB3 67               [ 4] 6562 	ld	h, a
      001DB4 7D               [ 4] 6563 	ld	a, l
      001DB5 94               [ 4] 6564 	sub	a, h
      001DB6 20 52            [12] 6565 	jr	NZ, 00200$
                                   6566 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      001DB8 DD 7E F9         [19] 6567 	ld	a, -7 (ix)
      001DBB 94               [ 4] 6568 	sub	a, h
      001DBC 20 4C            [12] 6569 	jr	NZ, 00200$
                                   6570 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      001DBE DD 36 EF 01      [19] 6571 	ld	-17 (ix), #0x01
                                   6572 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      001DC2 3Er00            [ 7] 6573 	ld	a, #<(_playfield)
      001DC4 83               [ 4] 6574 	add	a, e
      001DC5 5F               [ 4] 6575 	ld	e, a
      001DC6 3Es00            [ 7] 6576 	ld	a, #>(_playfield)
      001DC8 8A               [ 4] 6577 	adc	a, d
      001DC9 57               [ 4] 6578 	ld	d, a
      001DCA 7B               [ 4] 6579 	ld	a, e
      001DCB DD 86 FE         [19] 6580 	add	a, -2 (ix)
      001DCE 5F               [ 4] 6581 	ld	e, a
      001DCF 30 01            [12] 6582 	jr	NC, 00621$
      001DD1 14               [ 4] 6583 	inc	d
      001DD2                       6584 00621$:
      001DD2 7D               [ 4] 6585 	ld	a, l
      001DD3 CB FF            [ 8] 6586 	set	7, a
      001DD5 12               [ 7] 6587 	ld	(de), a
                                   6588 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      001DD6 3Er00            [ 7] 6589 	ld	a, #<(_playfield)
      001DD8 DD 86 FC         [19] 6590 	add	a, -4 (ix)
      001DDB 5F               [ 4] 6591 	ld	e, a
      001DDC 3Es00            [ 7] 6592 	ld	a, #>(_playfield)
      001DDE DD 8E FD         [19] 6593 	adc	a, -3 (ix)
      001DE1 57               [ 4] 6594 	ld	d, a
      001DE2 DD 6E FE         [19] 6595 	ld	l, -2 (ix)
      001DE5 26 00            [ 7] 6596 	ld	h, #0x00
      001DE7 19               [11] 6597 	add	hl, de
      001DE8 0A               [ 7] 6598 	ld	a, (bc)
      001DE9 CB FF            [ 8] 6599 	set	7, a
      001DEB 77               [ 7] 6600 	ld	(hl), a
                                   6601 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001DEC 3Er00            [ 7] 6602 	ld	a, #<(_playfield)
      001DEE DD 86 F5         [19] 6603 	add	a, -11 (ix)
      001DF1 4F               [ 4] 6604 	ld	c, a
      001DF2 3Es00            [ 7] 6605 	ld	a, #>(_playfield)
      001DF4 DD 8E F6         [19] 6606 	adc	a, -10 (ix)
      001DF7 47               [ 4] 6607 	ld	b, a
      001DF8 79               [ 4] 6608 	ld	a, c
      001DF9 DD 86 FE         [19] 6609 	add	a, -2 (ix)
      001DFC 4F               [ 4] 6610 	ld	c, a
      001DFD 30 01            [12] 6611 	jr	NC, 00622$
      001DFF 04               [ 4] 6612 	inc	b
      001E00                       6613 00622$:
      001E00 DD 6E F7         [19] 6614 	ld	l, -9 (ix)
      001E03 DD 66 F8         [19] 6615 	ld	h, -8 (ix)
      001E06 7E               [ 7] 6616 	ld	a, (hl)
      001E07 CB FF            [ 8] 6617 	set	7, a
      001E09 02               [ 7] 6618 	ld	(bc), a
      001E0A                       6619 00200$:
                                   6620 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001E0A DD 34 FF         [23] 6621 	inc	-1 (ix)
      001E0D C3r1Er1D         [10] 6622 	jp	00199$
      001E10                       6623 00203$:
                                   6624 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001E10 DD 34 FE         [23] 6625 	inc	-2 (ix)
      001E13 C3r12r1D         [10] 6626 	jp	00202$
      001E16                       6627 00108$:
                                   6628 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001E16 0E 02            [ 7] 6629 	ld	c, #0x02
      001E18                       6630 00208$:
      001E18 79               [ 4] 6631 	ld	a, c
      001E19 D6 0C            [ 7] 6632 	sub	a, #0x0c
      001E1B D2rDDr1E         [10] 6633 	jp	NC, 00114$
                                   6634 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001E1E DD 36 FF 00      [19] 6635 	ld	-1 (ix), #0
      001E22                       6636 00205$:
      001E22 DD 7E FF         [19] 6637 	ld	a, -1 (ix)
      001E25 D6 06            [ 7] 6638 	sub	a, #0x06
      001E27 D2rD9r1E         [10] 6639 	jp	NC, 00209$
                                   6640 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      001E2A DD 5E FF         [19] 6641 	ld	e, -1 (ix)
      001E2D 16 00            [ 7] 6642 	ld	d, #0x00
      001E2F 6B               [ 4] 6643 	ld	l, e
      001E30 62               [ 4] 6644 	ld	h, d
      001E31 29               [11] 6645 	add	hl, hl
      001E32 19               [11] 6646 	add	hl, de
      001E33 29               [11] 6647 	add	hl, hl
      001E34 29               [11] 6648 	add	hl, hl
      001E35 DD 75 F7         [19] 6649 	ld	-9 (ix), l
      001E38 DD 74 F8         [19] 6650 	ld	-8 (ix), h
      001E3B 3Er48            [ 7] 6651 	ld	a, #<(_playfieldTemp)
      001E3D DD 86 F7         [19] 6652 	add	a, -9 (ix)
      001E40 5F               [ 4] 6653 	ld	e, a
      001E41 3Es00            [ 7] 6654 	ld	a, #>(_playfieldTemp)
      001E43 DD 8E F8         [19] 6655 	adc	a, -8 (ix)
      001E46 57               [ 4] 6656 	ld	d, a
      001E47 7B               [ 4] 6657 	ld	a, e
      001E48 81               [ 4] 6658 	add	a, c
      001E49 DD 77 F9         [19] 6659 	ld	-7 (ix), a
      001E4C 7A               [ 4] 6660 	ld	a, d
      001E4D CE 00            [ 7] 6661 	adc	a, #0x00
      001E4F DD 77 FA         [19] 6662 	ld	-6 (ix), a
      001E52 DD 6E F9         [19] 6663 	ld	l, -7 (ix)
      001E55 DD 66 FA         [19] 6664 	ld	h, -6 (ix)
      001E58 7E               [ 7] 6665 	ld	a, (hl)
      001E59 DD 77 FE         [19] 6666 	ld	-2 (ix), a
      001E5C B7               [ 4] 6667 	or	a, a
      001E5D 28 74            [12] 6668 	jr	Z, 00206$
                                   6669 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      001E5F DD 71 FD         [19] 6670 	ld	-3 (ix), c
      001E62 79               [ 4] 6671 	ld	a, c
      001E63 C6 FE            [ 7] 6672 	add	a, #0xfe
      001E65 DD 77 FB         [19] 6673 	ld	-5 (ix), a
      001E68 6F               [ 4] 6674 	ld	l, a
      001E69 26 00            [ 7] 6675 	ld	h, #0x00
      001E6B 19               [11] 6676 	add	hl, de
      001E6C DD 46 FD         [19] 6677 	ld	b, -3 (ix)
      001E6F 05               [ 4] 6678 	dec	b
      001E70 7B               [ 4] 6679 	ld	a, e
      001E71 80               [ 4] 6680 	add	a, b
      001E72 5F               [ 4] 6681 	ld	e, a
      001E73 30 01            [12] 6682 	jr	NC, 00623$
      001E75 14               [ 4] 6683 	inc	d
      001E76                       6684 00623$:
      001E76 7E               [ 7] 6685 	ld	a, (hl)
      001E77 DD 77 FC         [19] 6686 	ld	-4 (ix), a
      001E7A 1A               [ 7] 6687 	ld	a, (de)
      001E7B 6F               [ 4] 6688 	ld	l, a
      001E7C DD 7E FC         [19] 6689 	ld	a, -4 (ix)
      001E7F 95               [ 4] 6690 	sub	a, l
      001E80 20 51            [12] 6691 	jr	NZ, 00206$
                                   6692 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      001E82 DD 7E FE         [19] 6693 	ld	a, -2 (ix)
      001E85 95               [ 4] 6694 	sub	a, l
      001E86 20 4B            [12] 6695 	jr	NZ, 00206$
                                   6696 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      001E88 DD 36 EF 01      [19] 6697 	ld	-17 (ix), #0x01
                                   6698 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      001E8C 3Er00            [ 7] 6699 	ld	a, #<(_playfield)
      001E8E DD 86 F7         [19] 6700 	add	a, -9 (ix)
      001E91 DD 77 FD         [19] 6701 	ld	-3 (ix), a
      001E94 3Es00            [ 7] 6702 	ld	a, #>(_playfield)
      001E96 DD 8E F8         [19] 6703 	adc	a, -8 (ix)
      001E99 DD 77 FE         [19] 6704 	ld	-2 (ix), a
      001E9C DD 7E FD         [19] 6705 	ld	a, -3 (ix)
      001E9F DD 86 FB         [19] 6706 	add	a, -5 (ix)
      001EA2 6F               [ 4] 6707 	ld	l, a
      001EA3 DD 7E FE         [19] 6708 	ld	a, -2 (ix)
      001EA6 CE 00            [ 7] 6709 	adc	a, #0x00
      001EA8 67               [ 4] 6710 	ld	h, a
      001EA9 DD 7E FC         [19] 6711 	ld	a, -4 (ix)
      001EAC CB FF            [ 8] 6712 	set	7, a
      001EAE 77               [ 7] 6713 	ld	(hl), a
                                   6714 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      001EAF DD 7E FD         [19] 6715 	ld	a, -3 (ix)
      001EB2 80               [ 4] 6716 	add	a, b
      001EB3 6F               [ 4] 6717 	ld	l, a
      001EB4 DD 7E FE         [19] 6718 	ld	a, -2 (ix)
      001EB7 CE 00            [ 7] 6719 	adc	a, #0x00
      001EB9 67               [ 4] 6720 	ld	h, a
      001EBA 1A               [ 7] 6721 	ld	a, (de)
      001EBB CB FF            [ 8] 6722 	set	7, a
      001EBD 77               [ 7] 6723 	ld	(hl), a
                                   6724 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      001EBE DD 7E FD         [19] 6725 	ld	a, -3 (ix)
      001EC1 81               [ 4] 6726 	add	a, c
      001EC2 5F               [ 4] 6727 	ld	e, a
      001EC3 DD 7E FE         [19] 6728 	ld	a, -2 (ix)
      001EC6 CE 00            [ 7] 6729 	adc	a, #0x00
      001EC8 57               [ 4] 6730 	ld	d, a
      001EC9 DD 6E F9         [19] 6731 	ld	l, -7 (ix)
      001ECC DD 66 FA         [19] 6732 	ld	h, -6 (ix)
      001ECF 7E               [ 7] 6733 	ld	a, (hl)
      001ED0 CB FF            [ 8] 6734 	set	7, a
      001ED2 12               [ 7] 6735 	ld	(de), a
      001ED3                       6736 00206$:
                                   6737 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001ED3 DD 34 FF         [23] 6738 	inc	-1 (ix)
      001ED6 C3r22r1E         [10] 6739 	jp	00205$
      001ED9                       6740 00209$:
                                   6741 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001ED9 0C               [ 4] 6742 	inc	c
      001EDA C3r18r1E         [10] 6743 	jp	00208$
      001EDD                       6744 00114$:
                                   6745 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      001EDD DD 36 FE 02      [19] 6746 	ld	-2 (ix), #0x02
      001EE1                       6747 00214$:
      001EE1 DD 7E FE         [19] 6748 	ld	a, -2 (ix)
      001EE4 D6 0C            [ 7] 6749 	sub	a, #0x0c
      001EE6 D2r84r20         [10] 6750 	jp	NC, 00124$
                                   6751 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      001EE9 DD 36 FF 02      [19] 6752 	ld	-1 (ix), #0x02
      001EED                       6753 00211$:
      001EED DD 7E FF         [19] 6754 	ld	a, -1 (ix)
      001EF0 D6 06            [ 7] 6755 	sub	a, #0x06
      001EF2 D2r7Er20         [10] 6756 	jp	NC, 00215$
                                   6757 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001EF5 DD 4E FF         [19] 6758 	ld	c, -1 (ix)
      001EF8 06 00            [ 7] 6759 	ld	b, #0x00
      001EFA 69               [ 4] 6760 	ld	l, c
      001EFB 60               [ 4] 6761 	ld	h, b
      001EFC 29               [11] 6762 	add	hl, hl
      001EFD 09               [11] 6763 	add	hl, bc
      001EFE 29               [11] 6764 	add	hl, hl
      001EFF 29               [11] 6765 	add	hl, hl
      001F00 DD 75 F0         [19] 6766 	ld	-16 (ix), l
      001F03 DD 74 F1         [19] 6767 	ld	-15 (ix), h
      001F06 3Er48            [ 7] 6768 	ld	a, #<(_playfieldTemp)
      001F08 DD 86 F0         [19] 6769 	add	a, -16 (ix)
      001F0B 4F               [ 4] 6770 	ld	c, a
      001F0C 3Es00            [ 7] 6771 	ld	a, #>(_playfieldTemp)
      001F0E DD 8E F1         [19] 6772 	adc	a, -15 (ix)
      001F11 47               [ 4] 6773 	ld	b, a
      001F12 79               [ 4] 6774 	ld	a, c
      001F13 DD 86 FE         [19] 6775 	add	a, -2 (ix)
      001F16 DD 77 F2         [19] 6776 	ld	-14 (ix), a
      001F19 78               [ 4] 6777 	ld	a, b
      001F1A CE 00            [ 7] 6778 	adc	a, #0x00
      001F1C DD 77 F3         [19] 6779 	ld	-13 (ix), a
      001F1F DD 6E F2         [19] 6780 	ld	l, -14 (ix)
      001F22 DD 66 F3         [19] 6781 	ld	h, -13 (ix)
      001F25 5E               [ 7] 6782 	ld	e, (hl)
                                   6783 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001F26 DD 56 FF         [19] 6784 	ld	d, -1 (ix)
      001F29 DD 66 FE         [19] 6785 	ld	h, -2 (ix)
      001F2C 6A               [ 4] 6786 	ld	l, d
      001F2D 2D               [ 4] 6787 	dec	l
      001F2E 2D               [ 4] 6788 	dec	l
      001F2F 7C               [ 4] 6789 	ld	a, h
      001F30 C6 FE            [ 7] 6790 	add	a, #0xfe
      001F32 DD 77 F4         [19] 6791 	ld	-12 (ix), a
      001F35 15               [ 4] 6792 	dec	d
      001F36 7C               [ 4] 6793 	ld	a, h
      001F37 C6 FF            [ 7] 6794 	add	a, #0xff
      001F39 DD 77 F5         [19] 6795 	ld	-11 (ix), a
      001F3C D5               [11] 6796 	push	de
      001F3D 5D               [ 4] 6797 	ld	e, l
      001F3E 7B               [ 4] 6798 	ld	a, e
      001F3F 07               [ 4] 6799 	rlca
      001F40 9F               [ 4] 6800 	sbc	a, a
      001F41 57               [ 4] 6801 	ld	d, a
      001F42 6B               [ 4] 6802 	ld	l, e
      001F43 62               [ 4] 6803 	ld	h, d
      001F44 29               [11] 6804 	add	hl, hl
      001F45 19               [11] 6805 	add	hl, de
      001F46 29               [11] 6806 	add	hl, hl
      001F47 29               [11] 6807 	add	hl, hl
      001F48 D1               [10] 6808 	pop	de
      001F49 DD 75 F6         [19] 6809 	ld	-10 (ix), l
      001F4C DD 74 F7         [19] 6810 	ld	-9 (ix), h
      001F4F D5               [11] 6811 	push	de
      001F50 5A               [ 4] 6812 	ld	e, d
      001F51 7B               [ 4] 6813 	ld	a, e
      001F52 07               [ 4] 6814 	rlca
      001F53 9F               [ 4] 6815 	sbc	a, a
      001F54 57               [ 4] 6816 	ld	d, a
      001F55 6B               [ 4] 6817 	ld	l, e
      001F56 62               [ 4] 6818 	ld	h, d
      001F57 29               [11] 6819 	add	hl, hl
      001F58 19               [11] 6820 	add	hl, de
      001F59 29               [11] 6821 	add	hl, hl
      001F5A 29               [11] 6822 	add	hl, hl
      001F5B D1               [10] 6823 	pop	de
      001F5C DD 75 F8         [19] 6824 	ld	-8 (ix), l
      001F5F DD 74 F9         [19] 6825 	ld	-7 (ix), h
      001F62 3Er48            [ 7] 6826 	ld	a, #<(_playfieldTemp)
      001F64 DD 86 F6         [19] 6827 	add	a, -10 (ix)
      001F67 DD 77 FA         [19] 6828 	ld	-6 (ix), a
      001F6A 3Es00            [ 7] 6829 	ld	a, #>(_playfieldTemp)
      001F6C DD 8E F7         [19] 6830 	adc	a, -9 (ix)
      001F6F DD 77 FB         [19] 6831 	ld	-5 (ix), a
      001F72 3Er48            [ 7] 6832 	ld	a, #<(_playfieldTemp)
      001F74 DD 86 F8         [19] 6833 	add	a, -8 (ix)
      001F77 57               [ 4] 6834 	ld	d, a
      001F78 3Es00            [ 7] 6835 	ld	a, #>(_playfieldTemp)
      001F7A DD 8E F9         [19] 6836 	adc	a, -7 (ix)
      001F7D 6F               [ 4] 6837 	ld	l, a
      001F7E 7A               [ 4] 6838 	ld	a, d
      001F7F DD 86 F5         [19] 6839 	add	a, -11 (ix)
      001F82 DD 77 FC         [19] 6840 	ld	-4 (ix), a
      001F85 7D               [ 4] 6841 	ld	a, l
      001F86 CE 00            [ 7] 6842 	adc	a, #0x00
      001F88 DD 77 FD         [19] 6843 	ld	-3 (ix), a
                                   6844 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      001F8B 7B               [ 4] 6845 	ld	a, e
      001F8C B7               [ 4] 6846 	or	a, a
      001F8D 28 74            [12] 6847 	jr	Z, 00116$
                                   6848 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      001F8F DD 7E FA         [19] 6849 	ld	a, -6 (ix)
      001F92 DD 86 F4         [19] 6850 	add	a, -12 (ix)
      001F95 6F               [ 4] 6851 	ld	l, a
      001F96 DD 7E FB         [19] 6852 	ld	a, -5 (ix)
      001F99 CE 00            [ 7] 6853 	adc	a, #0x00
      001F9B 67               [ 4] 6854 	ld	h, a
      001F9C 56               [ 7] 6855 	ld	d, (hl)
      001F9D DD 6E FC         [19] 6856 	ld	l, -4 (ix)
      001FA0 DD 66 FD         [19] 6857 	ld	h, -3 (ix)
      001FA3 6E               [ 7] 6858 	ld	l, (hl)
      001FA4 7A               [ 4] 6859 	ld	a, d
      001FA5 95               [ 4] 6860 	sub	a, l
      001FA6 20 5B            [12] 6861 	jr	NZ, 00116$
                                   6862 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      001FA8 7B               [ 4] 6863 	ld	a, e
      001FA9 95               [ 4] 6864 	sub	a, l
      001FAA 20 57            [12] 6865 	jr	NZ, 00116$
                                   6866 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      001FAC DD 36 EF 01      [19] 6867 	ld	-17 (ix), #0x01
                                   6868 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      001FB0 3Er00            [ 7] 6869 	ld	a, #<(_playfield)
      001FB2 DD 86 F6         [19] 6870 	add	a, -10 (ix)
      001FB5 5F               [ 4] 6871 	ld	e, a
      001FB6 3Es00            [ 7] 6872 	ld	a, #>(_playfield)
      001FB8 DD 8E F7         [19] 6873 	adc	a, -9 (ix)
      001FBB 67               [ 4] 6874 	ld	h, a
      001FBC 7B               [ 4] 6875 	ld	a, e
      001FBD DD 86 F4         [19] 6876 	add	a, -12 (ix)
      001FC0 6F               [ 4] 6877 	ld	l, a
      001FC1 30 01            [12] 6878 	jr	NC, 00632$
      001FC3 24               [ 4] 6879 	inc	h
      001FC4                       6880 00632$:
      001FC4 CB FA            [ 8] 6881 	set	7, d
      001FC6 72               [ 7] 6882 	ld	(hl), d
                                   6883 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      001FC7 3Er00            [ 7] 6884 	ld	a, #<(_playfield)
      001FC9 DD 86 F8         [19] 6885 	add	a, -8 (ix)
      001FCC 5F               [ 4] 6886 	ld	e, a
      001FCD 3Es00            [ 7] 6887 	ld	a, #>(_playfield)
      001FCF DD 8E F9         [19] 6888 	adc	a, -7 (ix)
      001FD2 57               [ 4] 6889 	ld	d, a
      001FD3 7B               [ 4] 6890 	ld	a, e
      001FD4 DD 86 F5         [19] 6891 	add	a, -11 (ix)
      001FD7 5F               [ 4] 6892 	ld	e, a
      001FD8 30 01            [12] 6893 	jr	NC, 00633$
      001FDA 14               [ 4] 6894 	inc	d
      001FDB                       6895 00633$:
      001FDB DD 6E FC         [19] 6896 	ld	l, -4 (ix)
      001FDE DD 66 FD         [19] 6897 	ld	h, -3 (ix)
      001FE1 7E               [ 7] 6898 	ld	a, (hl)
      001FE2 CB FF            [ 8] 6899 	set	7, a
      001FE4 12               [ 7] 6900 	ld	(de), a
                                   6901 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      001FE5 3Er00            [ 7] 6902 	ld	a, #<(_playfield)
      001FE7 DD 86 F0         [19] 6903 	add	a, -16 (ix)
      001FEA 5F               [ 4] 6904 	ld	e, a
      001FEB 3Es00            [ 7] 6905 	ld	a, #>(_playfield)
      001FED DD 8E F1         [19] 6906 	adc	a, -15 (ix)
      001FF0 57               [ 4] 6907 	ld	d, a
      001FF1 7B               [ 4] 6908 	ld	a, e
      001FF2 DD 86 FE         [19] 6909 	add	a, -2 (ix)
      001FF5 5F               [ 4] 6910 	ld	e, a
      001FF6 30 01            [12] 6911 	jr	NC, 00634$
      001FF8 14               [ 4] 6912 	inc	d
      001FF9                       6913 00634$:
      001FF9 DD 6E F2         [19] 6914 	ld	l, -14 (ix)
      001FFC DD 66 F3         [19] 6915 	ld	h, -13 (ix)
      001FFF 7E               [ 7] 6916 	ld	a, (hl)
      002000 CB FF            [ 8] 6917 	set	7, a
      002002 12               [ 7] 6918 	ld	(de), a
      002003                       6919 00116$:
                                   6920 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      002003 DD 6E F4         [19] 6921 	ld	l, -12 (ix)
      002006 26 00            [ 7] 6922 	ld	h, #0x00
      002008 09               [11] 6923 	add	hl, bc
      002009 4E               [ 7] 6924 	ld	c, (hl)
      00200A 79               [ 4] 6925 	ld	a, c
      00200B B7               [ 4] 6926 	or	a, a
      00200C 28 6A            [12] 6927 	jr	Z, 00212$
                                   6928 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      00200E DD 7E FA         [19] 6929 	ld	a, -6 (ix)
      002011 DD 86 FE         [19] 6930 	add	a, -2 (ix)
      002014 5F               [ 4] 6931 	ld	e, a
      002015 DD 7E FB         [19] 6932 	ld	a, -5 (ix)
      002018 CE 00            [ 7] 6933 	adc	a, #0x00
      00201A 57               [ 4] 6934 	ld	d, a
      00201B DD 6E FC         [19] 6935 	ld	l, -4 (ix)
      00201E DD 66 FD         [19] 6936 	ld	h, -3 (ix)
      002021 46               [ 7] 6937 	ld	b, (hl)
      002022 1A               [ 7] 6938 	ld	a, (de)
      002023 B8               [ 4] 6939 	cp	a, b
      002024 20 52            [12] 6940 	jr	NZ, 00212$
                                   6941 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      002026 91               [ 4] 6942 	sub	a, c
      002027 20 4F            [12] 6943 	jr	NZ, 00212$
                                   6944 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      002029 DD 36 EF 01      [19] 6945 	ld	-17 (ix), #0x01
                                   6946 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00202D 3Er00            [ 7] 6947 	ld	a, #<(_playfield)
      00202F DD 86 F0         [19] 6948 	add	a, -16 (ix)
      002032 47               [ 4] 6949 	ld	b, a
      002033 3Es00            [ 7] 6950 	ld	a, #>(_playfield)
      002035 DD 8E F1         [19] 6951 	adc	a, -15 (ix)
      002038 67               [ 4] 6952 	ld	h, a
      002039 78               [ 4] 6953 	ld	a, b
      00203A DD 86 F4         [19] 6954 	add	a, -12 (ix)
      00203D 6F               [ 4] 6955 	ld	l, a
      00203E 30 01            [12] 6956 	jr	NC, 00639$
      002040 24               [ 4] 6957 	inc	h
      002041                       6958 00639$:
      002041 CB F9            [ 8] 6959 	set	7, c
      002043 71               [ 7] 6960 	ld	(hl), c
                                   6961 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      002044 3Er00            [ 7] 6962 	ld	a, #<(_playfield)
      002046 DD 86 F8         [19] 6963 	add	a, -8 (ix)
      002049 4F               [ 4] 6964 	ld	c, a
      00204A 3Es00            [ 7] 6965 	ld	a, #>(_playfield)
      00204C DD 8E F9         [19] 6966 	adc	a, -7 (ix)
      00204F 47               [ 4] 6967 	ld	b, a
      002050 79               [ 4] 6968 	ld	a, c
      002051 DD 86 F5         [19] 6969 	add	a, -11 (ix)
      002054 4F               [ 4] 6970 	ld	c, a
      002055 30 01            [12] 6971 	jr	NC, 00640$
      002057 04               [ 4] 6972 	inc	b
      002058                       6973 00640$:
      002058 DD 6E FC         [19] 6974 	ld	l, -4 (ix)
      00205B DD 66 FD         [19] 6975 	ld	h, -3 (ix)
      00205E 7E               [ 7] 6976 	ld	a, (hl)
      00205F CB FF            [ 8] 6977 	set	7, a
      002061 02               [ 7] 6978 	ld	(bc), a
                                   6979 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      002062 3Er00            [ 7] 6980 	ld	a, #<(_playfield)
      002064 DD 86 F6         [19] 6981 	add	a, -10 (ix)
      002067 4F               [ 4] 6982 	ld	c, a
      002068 3Es00            [ 7] 6983 	ld	a, #>(_playfield)
      00206A DD 8E F7         [19] 6984 	adc	a, -9 (ix)
      00206D 47               [ 4] 6985 	ld	b, a
      00206E DD 6E FE         [19] 6986 	ld	l, -2 (ix)
      002071 26 00            [ 7] 6987 	ld	h, #0x00
      002073 09               [11] 6988 	add	hl, bc
      002074 1A               [ 7] 6989 	ld	a, (de)
      002075 CB FF            [ 8] 6990 	set	7, a
      002077 77               [ 7] 6991 	ld	(hl), a
      002078                       6992 00212$:
                                   6993 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      002078 DD 34 FF         [23] 6994 	inc	-1 (ix)
      00207B C3rEDr1E         [10] 6995 	jp	00211$
      00207E                       6996 00215$:
                                   6997 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00207E DD 34 FE         [23] 6998 	inc	-2 (ix)
      002081 C3rE1r1E         [10] 6999 	jp	00214$
      002084                       7000 00124$:
                                   7001 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      002084 DD 7E EF         [19] 7002 	ld	a, -17 (ix)
      002087 B7               [ 4] 7003 	or	a, a
      002088 CAr30r24         [10] 7004 	jp	Z, 00190$
                                   7005 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      00208B DD 36 F5 FF      [19] 7006 	ld	-11 (ix), #0xff
      00208F DD 36 F6 00      [19] 7007 	ld	-10 (ix), #0
                                   7008 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      002093 DD 36 F7 05      [19] 7009 	ld	-9 (ix), #0x05
      002097 DD 36 F8 00      [19] 7010 	ld	-8 (ix), #0
                                   7011 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      00209B DD 36 F9 0B      [19] 7012 	ld	-7 (ix), #0x0b
      00209F DD 36 FA 00      [19] 7013 	ld	-6 (ix), #0
                                   7014 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      0020A3 CDr48r0C         [17] 7015 	call	_HideArrowSprite
                                   7016 ;src\/CheckPlayfield.h:116: SoundFx_2();
      0020A6 CDr60r1C         [17] 7017 	call	_SoundFx_2
                                   7018 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      0020A9 DD 36 FB 00      [19] 7019 	ld	-5 (ix), #0
                                   7020 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0020AD DD 36 FF 00      [19] 7021 	ld	-1 (ix), #0
      0020B1                       7022 00220$:
      0020B1 DD 7E FF         [19] 7023 	ld	a, -1 (ix)
      0020B4 D6 0C            [ 7] 7024 	sub	a, #0x0c
      0020B6 30 5F            [12] 7025 	jr	NC, 00291$
                                   7026 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0020B8 DD 5E FB         [19] 7027 	ld	e, -5 (ix)
      0020BB 06 00            [ 7] 7028 	ld	b, #0x00
      0020BD                       7029 00217$:
      0020BD 78               [ 4] 7030 	ld	a, b
      0020BE D6 06            [ 7] 7031 	sub	a, #0x06
      0020C0 30 4D            [12] 7032 	jr	NC, 00320$
                                   7033 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0020C2 D5               [11] 7034 	push	de
      0020C3 58               [ 4] 7035 	ld	e, b
      0020C4 16 00            [ 7] 7036 	ld	d, #0x00
      0020C6 6B               [ 4] 7037 	ld	l, e
      0020C7 62               [ 4] 7038 	ld	h, d
      0020C8 29               [11] 7039 	add	hl, hl
      0020C9 19               [11] 7040 	add	hl, de
      0020CA 29               [11] 7041 	add	hl, hl
      0020CB 29               [11] 7042 	add	hl, hl
      0020CC 11r00r00         [10] 7043 	ld	de, #_playfield
      0020CF 19               [11] 7044 	add	hl, de
      0020D0 D1               [10] 7045 	pop	de
      0020D1 7D               [ 4] 7046 	ld	a, l
      0020D2 DD 86 FF         [19] 7047 	add	a, -1 (ix)
      0020D5 6F               [ 4] 7048 	ld	l, a
      0020D6 30 01            [12] 7049 	jr	NC, 00641$
      0020D8 24               [ 4] 7050 	inc	h
      0020D9                       7051 00641$:
      0020D9 7E               [ 7] 7052 	ld	a, (hl)
      0020DA 07               [ 4] 7053 	rlca
      0020DB 30 2F            [12] 7054 	jr	NC, 00218$
                                   7055 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      0020DD 1C               [ 4] 7056 	inc	e
                                   7057 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      0020DE 78               [ 4] 7058 	ld	a, b
      0020DF DD 96 F7         [19] 7059 	sub	a, -9 (ix)
      0020E2 30 03            [12] 7060 	jr	NC, 00126$
      0020E4 DD 70 F7         [19] 7061 	ld	-9 (ix), b
      0020E7                       7062 00126$:
                                   7063 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      0020E7 DD 7E F8         [19] 7064 	ld	a, -8 (ix)
      0020EA 90               [ 4] 7065 	sub	a, b
      0020EB 30 03            [12] 7066 	jr	NC, 00128$
      0020ED DD 70 F8         [19] 7067 	ld	-8 (ix), b
      0020F0                       7068 00128$:
                                   7069 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      0020F0 DD 7E FF         [19] 7070 	ld	a, -1 (ix)
      0020F3 DD 96 F9         [19] 7071 	sub	a, -7 (ix)
      0020F6 30 06            [12] 7072 	jr	NC, 00130$
      0020F8 DD 7E FF         [19] 7073 	ld	a, -1 (ix)
      0020FB DD 77 F9         [19] 7074 	ld	-7 (ix), a
      0020FE                       7075 00130$:
                                   7076 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      0020FE DD 7E FA         [19] 7077 	ld	a, -6 (ix)
      002101 DD 96 FF         [19] 7078 	sub	a, -1 (ix)
      002104 30 06            [12] 7079 	jr	NC, 00218$
      002106 DD 7E FF         [19] 7080 	ld	a, -1 (ix)
      002109 DD 77 FA         [19] 7081 	ld	-6 (ix), a
      00210C                       7082 00218$:
                                   7083 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00210C 04               [ 4] 7084 	inc	b
      00210D 18 AE            [12] 7085 	jr	00217$
      00210F                       7086 00320$:
      00210F DD 73 FB         [19] 7087 	ld	-5 (ix), e
                                   7088 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002112 DD 34 FF         [23] 7089 	inc	-1 (ix)
      002115 18 9A            [12] 7090 	jr	00220$
                                   7091 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      002117                       7092 00291$:
      002117 DD 36 FF 48      [19] 7093 	ld	-1 (ix), #0x48
      00211B                       7094 00166$:
      00211B DD 4E FF         [19] 7095 	ld	c, -1 (ix)
      00211E DD 35 FF         [23] 7096 	dec	-1 (ix)
      002121 79               [ 4] 7097 	ld	a, c
      002122 B7               [ 4] 7098 	or	a, a
      002123 CArCBr22         [10] 7099 	jp	Z, 00168$
                                   7100 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      002126 ED 5B 9E FC      [20] 7101 	ld	de, (_JIFFY)
                                   7102 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      00212A                       7103 00137$:
      00212A 2A 9E FC         [16] 7104 	ld	hl, (_JIFFY)
      00212D BF               [ 4] 7105 	cp	a, a
      00212E ED 52            [15] 7106 	sbc	hl, de
      002130 28 F8            [12] 7107 	jr	Z, 00137$
                                   7108 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      002132 DD 7E FB         [19] 7109 	ld	a, -5 (ix)
      002135 D6 03            [ 7] 7110 	sub	a, #0x03
      002137 DArE9r21         [10] 7111 	jp	C, 00301$
                                   7112 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      00213A DD 7E FB         [19] 7113 	ld	a, -5 (ix)
      00213D D6 07            [ 7] 7114 	sub	a, #0x07
      00213F 38 04            [12] 7115 	jr	C, 00141$
      002141 DD 36 FB 07      [19] 7116 	ld	-5 (ix), #0x07
      002145                       7117 00141$:
                                   7118 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      002145 DD 7E F5         [19] 7119 	ld	a, -11 (ix)
      002148 3C               [ 4] 7120 	inc	a
      002149 20 7B            [12] 7121 	jr	NZ, 00143$
                                   7122 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      00214B DD 6E F8         [19] 7123 	ld	l, -8 (ix)
      00214E 26 00            [ 7] 7124 	ld	h, #0x00
      002150 29               [11] 7125 	add	hl, hl
      002151 29               [11] 7126 	add	hl, hl
      002152 29               [11] 7127 	add	hl, hl
      002153 29               [11] 7128 	add	hl, hl
      002154 DD 5E F7         [19] 7129 	ld	e, -9 (ix)
      002157 16 00            [ 7] 7130 	ld	d, #0x00
      002159 EB               [ 4] 7131 	ex	de, hl
      00215A 29               [11] 7132 	add	hl, hl
      00215B 29               [11] 7133 	add	hl, hl
      00215C 29               [11] 7134 	add	hl, hl
      00215D 29               [11] 7135 	add	hl, hl
      00215E EB               [ 4] 7136 	ex	de, hl
      00215F BF               [ 4] 7137 	cp	a, a
      002160 ED 52            [15] 7138 	sbc	hl, de
      002162 4D               [ 4] 7139 	ld	c, l
      002163 44               [ 4] 7140 	ld	b, h
      002164 CB 7C            [ 8] 7141 	bit	7, h
      002166 28 03            [12] 7142 	jr	Z, 00239$
      002168 4D               [ 4] 7143 	ld	c, l
      002169 44               [ 4] 7144 	ld	b, h
      00216A 03               [ 6] 7145 	inc	bc
      00216B                       7146 00239$:
      00216B CB 28            [ 8] 7147 	sra	b
      00216D CB 19            [ 8] 7148 	rr	c
      00216F 79               [ 4] 7149 	ld	a, c
      002170 C6 50            [ 7] 7150 	add	a, #0x50
      002172 DD 6E F7         [19] 7151 	ld	l, -9 (ix)
      002175 29               [11] 7152 	add	hl, hl
      002176 29               [11] 7153 	add	hl, hl
      002177 29               [11] 7154 	add	hl, hl
      002178 29               [11] 7155 	add	hl, hl
      002179 85               [ 4] 7156 	add	a, l
      00217A DD 77 F5         [19] 7157 	ld	-11 (ix), a
                                   7158 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      00217D DD 6E F9         [19] 7159 	ld	l, -7 (ix)
      002180 26 00            [ 7] 7160 	ld	h, #0x00
      002182 29               [11] 7161 	add	hl, hl
      002183 29               [11] 7162 	add	hl, hl
      002184 29               [11] 7163 	add	hl, hl
      002185 29               [11] 7164 	add	hl, hl
      002186 DD 5E FA         [19] 7165 	ld	e, -6 (ix)
      002189 16 00            [ 7] 7166 	ld	d, #0x00
      00218B EB               [ 4] 7167 	ex	de, hl
      00218C 29               [11] 7168 	add	hl, hl
      00218D 29               [11] 7169 	add	hl, hl
      00218E 29               [11] 7170 	add	hl, hl
      00218F 29               [11] 7171 	add	hl, hl
      002190 EB               [ 4] 7172 	ex	de, hl
      002191 BF               [ 4] 7173 	cp	a, a
      002192 ED 52            [15] 7174 	sbc	hl, de
      002194 4D               [ 4] 7175 	ld	c, l
      002195 44               [ 4] 7176 	ld	b, h
      002196 CB 7C            [ 8] 7177 	bit	7, h
      002198 28 03            [12] 7178 	jr	Z, 00240$
      00219A 23               [ 6] 7179 	inc	hl
      00219B 4D               [ 4] 7180 	ld	c, l
      00219C 44               [ 4] 7181 	ld	b, h
      00219D                       7182 00240$:
      00219D CB 28            [ 8] 7183 	sra	b
      00219F CB 19            [ 8] 7184 	rr	c
      0021A1 DD 7E FA         [19] 7185 	ld	a, -6 (ix)
      0021A4 87               [ 4] 7186 	add	a, a
      0021A5 87               [ 4] 7187 	add	a, a
      0021A6 87               [ 4] 7188 	add	a, a
      0021A7 87               [ 4] 7189 	add	a, a
      0021A8 81               [ 4] 7190 	add	a, c
      0021A9 DD 77 F6         [19] 7191 	ld	-10 (ix), a
                                   7192 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      0021AC 26 01            [ 7] 7193 	ld	h, #0x01
      0021AE DD 6E F6         [19] 7194 	ld	l, -10 (ix)
      0021B1 E5               [11] 7195 	push	hl
      0021B2 DD 66 F5         [19] 7196 	ld	h, -11 (ix)
      0021B5 DD 6E 04         [19] 7197 	ld	l, 4 (ix)
      0021B8 E5               [11] 7198 	push	hl
      0021B9 DD 7E FB         [19] 7199 	ld	a, -5 (ix)
      0021BC F5               [11] 7200 	push	af
      0021BD 33               [ 6] 7201 	inc	sp
      0021BE CDr56r0C         [17] 7202 	call	_DrawHitSprite
      0021C1 F1               [10] 7203 	pop	af
      0021C2 F1               [10] 7204 	pop	af
      0021C3 33               [ 6] 7205 	inc	sp
      0021C4 18 23            [12] 7206 	jr	00301$
      0021C6                       7207 00143$:
                                   7208 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      0021C6 DD 4E FF         [19] 7209 	ld	c, -1 (ix)
      0021C9 3E 48            [ 7] 7210 	ld	a, #0x48
      0021CB 91               [ 4] 7211 	sub	a, c
      0021CC 4F               [ 4] 7212 	ld	c, a
      0021CD DD 7E F6         [19] 7213 	ld	a, -10 (ix)
      0021D0 91               [ 4] 7214 	sub	a, c
      0021D1 26 00            [ 7] 7215 	ld	h, #0x00
      0021D3 E5               [11] 7216 	push	hl
      0021D4 33               [ 6] 7217 	inc	sp
      0021D5 F5               [11] 7218 	push	af
      0021D6 33               [ 6] 7219 	inc	sp
      0021D7 DD 66 F5         [19] 7220 	ld	h, -11 (ix)
      0021DA DD 6E 04         [19] 7221 	ld	l, 4 (ix)
      0021DD E5               [11] 7222 	push	hl
      0021DE DD 7E FB         [19] 7223 	ld	a, -5 (ix)
      0021E1 F5               [11] 7224 	push	af
      0021E2 33               [ 6] 7225 	inc	sp
      0021E3 CDr56r0C         [17] 7226 	call	_DrawHitSprite
      0021E6 F1               [10] 7227 	pop	af
      0021E7 F1               [10] 7228 	pop	af
      0021E8 33               [ 6] 7229 	inc	sp
                                   7230 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0021E9                       7231 00301$:
      0021E9 3E 0C            [ 7] 7232 	ld	a, #0x0c
      0021EB DD 96 FF         [19] 7233 	sub	a, -1 (ix)
      0021EE 3E 00            [ 7] 7234 	ld	a, #0x00
      0021F0 17               [ 4] 7235 	rla
      0021F1 5F               [ 4] 7236 	ld	e, a
      0021F2 3E 09            [ 7] 7237 	ld	a, #0x09
      0021F4 DD 96 FF         [19] 7238 	sub	a, -1 (ix)
      0021F7 3E 00            [ 7] 7239 	ld	a, #0x00
      0021F9 17               [ 4] 7240 	rla
      0021FA 4F               [ 4] 7241 	ld	c, a
      0021FB 3E 06            [ 7] 7242 	ld	a, #0x06
      0021FD DD 96 FF         [19] 7243 	sub	a, -1 (ix)
      002200 3E 00            [ 7] 7244 	ld	a, #0x00
      002202 17               [ 4] 7245 	rla
      002203 DD 77 FC         [19] 7246 	ld	-4 (ix), a
      002206 3E 03            [ 7] 7247 	ld	a, #0x03
      002208 DD 96 FF         [19] 7248 	sub	a, -1 (ix)
      00220B 3E 00            [ 7] 7249 	ld	a, #0x00
      00220D 17               [ 4] 7250 	rla
      00220E DD 77 FD         [19] 7251 	ld	-3 (ix), a
      002211 06 00            [ 7] 7252 	ld	b, #0x00
      002213                       7253 00226$:
      002213 78               [ 4] 7254 	ld	a, b
      002214 D6 0C            [ 7] 7255 	sub	a, #0x0c
      002216 D2r1Br21         [10] 7256 	jp	NC, 00166$
                                   7257 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002219 16 00            [ 7] 7258 	ld	d, #0x00
      00221B                       7259 00223$:
      00221B 7A               [ 4] 7260 	ld	a, d
      00221C D6 06            [ 7] 7261 	sub	a, #0x06
      00221E D2rC7r22         [10] 7262 	jp	NC, 00227$
                                   7263 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002221 D5               [11] 7264 	push	de
      002222 5A               [ 4] 7265 	ld	e, d
      002223 16 00            [ 7] 7266 	ld	d, #0x00
      002225 6B               [ 4] 7267 	ld	l, e
      002226 62               [ 4] 7268 	ld	h, d
      002227 29               [11] 7269 	add	hl, hl
      002228 19               [11] 7270 	add	hl, de
      002229 29               [11] 7271 	add	hl, hl
      00222A 29               [11] 7272 	add	hl, hl
      00222B 11r00r00         [10] 7273 	ld	de, #_playfield
      00222E 19               [11] 7274 	add	hl, de
      00222F D1               [10] 7275 	pop	de
      002230 7D               [ 4] 7276 	ld	a, l
      002231 80               [ 4] 7277 	add	a, b
      002232 6F               [ 4] 7278 	ld	l, a
      002233 30 01            [12] 7279 	jr	NC, 00646$
      002235 24               [ 4] 7280 	inc	h
      002236                       7281 00646$:
      002236 7E               [ 7] 7282 	ld	a, (hl)
      002237 DD 77 FE         [19] 7283 	ld	-2 (ix), a
      00223A DD CB FE 7E      [20] 7284 	bit	7, -2 (ix)
      00223E CArC3r22         [10] 7285 	jp	Z,00224$
                                   7286 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      002241 7B               [ 4] 7287 	ld	a, e
      002242 B7               [ 4] 7288 	or	a, a
      002243 28 2C            [12] 7289 	jr	Z, 00160$
                                   7290 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      002245 2A 9E FC         [16] 7291 	ld	hl, (_JIFFY)
      002248 7D               [ 4] 7292 	ld	a, l
      002249 E6 03            [ 7] 7293 	and	a, #0x03
      00224B 28 14            [12] 7294 	jr	Z, 00148$
                                   7295 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      00224D DD 7E FE         [19] 7296 	ld	a, -2 (ix)
      002250 CB BF            [ 8] 7297 	res	7, a
      002252 C5               [11] 7298 	push	bc
      002253 D5               [11] 7299 	push	de
      002254 F5               [11] 7300 	push	af
      002255 33               [ 6] 7301 	inc	sp
      002256 4A               [ 4] 7302 	ld	c, d
      002257 C5               [11] 7303 	push	bc
      002258 CDr2Br1B         [17] 7304 	call	_DrawBlock
      00225B F1               [10] 7305 	pop	af
      00225C 33               [ 6] 7306 	inc	sp
      00225D D1               [10] 7307 	pop	de
      00225E C1               [10] 7308 	pop	bc
      00225F 18 62            [12] 7309 	jr	00224$
      002261                       7310 00148$:
                                   7311 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      002261 C5               [11] 7312 	push	bc
      002262 D5               [11] 7313 	push	de
      002263 AF               [ 4] 7314 	xor	a, a
      002264 F5               [11] 7315 	push	af
      002265 33               [ 6] 7316 	inc	sp
      002266 4A               [ 4] 7317 	ld	c, d
      002267 C5               [11] 7318 	push	bc
      002268 CDr2Br1B         [17] 7319 	call	_DrawBlock
      00226B F1               [10] 7320 	pop	af
      00226C 33               [ 6] 7321 	inc	sp
      00226D D1               [10] 7322 	pop	de
      00226E C1               [10] 7323 	pop	bc
      00226F 18 52            [12] 7324 	jr	00224$
      002271                       7325 00160$:
                                   7326 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      002271 79               [ 4] 7327 	ld	a, c
      002272 B7               [ 4] 7328 	or	a, a
      002273 28 11            [12] 7329 	jr	Z, 00157$
      002275 C5               [11] 7330 	push	bc
      002276 D5               [11] 7331 	push	de
      002277 3E 2A            [ 7] 7332 	ld	a, #0x2a
      002279 F5               [11] 7333 	push	af
      00227A 33               [ 6] 7334 	inc	sp
      00227B 4A               [ 4] 7335 	ld	c, d
      00227C C5               [11] 7336 	push	bc
      00227D CDr93r1B         [17] 7337 	call	_DrawBlock_SameTile
      002280 F1               [10] 7338 	pop	af
      002281 33               [ 6] 7339 	inc	sp
      002282 D1               [10] 7340 	pop	de
      002283 C1               [10] 7341 	pop	bc
      002284 18 3D            [12] 7342 	jr	00224$
      002286                       7343 00157$:
                                   7344 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      002286 DD 7E FC         [19] 7345 	ld	a, -4 (ix)
      002289 B7               [ 4] 7346 	or	a, a
      00228A 28 11            [12] 7347 	jr	Z, 00154$
      00228C C5               [11] 7348 	push	bc
      00228D D5               [11] 7349 	push	de
      00228E 3E 2B            [ 7] 7350 	ld	a, #0x2b
      002290 F5               [11] 7351 	push	af
      002291 33               [ 6] 7352 	inc	sp
      002292 4A               [ 4] 7353 	ld	c, d
      002293 C5               [11] 7354 	push	bc
      002294 CDr93r1B         [17] 7355 	call	_DrawBlock_SameTile
      002297 F1               [10] 7356 	pop	af
      002298 33               [ 6] 7357 	inc	sp
      002299 D1               [10] 7358 	pop	de
      00229A C1               [10] 7359 	pop	bc
      00229B 18 26            [12] 7360 	jr	00224$
      00229D                       7361 00154$:
                                   7362 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00229D DD 7E FD         [19] 7363 	ld	a, -3 (ix)
      0022A0 B7               [ 4] 7364 	or	a, a
      0022A1 28 11            [12] 7365 	jr	Z, 00151$
      0022A3 C5               [11] 7366 	push	bc
      0022A4 D5               [11] 7367 	push	de
      0022A5 3E 2C            [ 7] 7368 	ld	a, #0x2c
      0022A7 F5               [11] 7369 	push	af
      0022A8 33               [ 6] 7370 	inc	sp
      0022A9 4A               [ 4] 7371 	ld	c, d
      0022AA C5               [11] 7372 	push	bc
      0022AB CDr93r1B         [17] 7373 	call	_DrawBlock_SameTile
      0022AE F1               [10] 7374 	pop	af
      0022AF 33               [ 6] 7375 	inc	sp
      0022B0 D1               [10] 7376 	pop	de
      0022B1 C1               [10] 7377 	pop	bc
      0022B2 18 0F            [12] 7378 	jr	00224$
      0022B4                       7379 00151$:
                                   7380 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      0022B4 C5               [11] 7381 	push	bc
      0022B5 D5               [11] 7382 	push	de
      0022B6 3E 2D            [ 7] 7383 	ld	a, #0x2d
      0022B8 F5               [11] 7384 	push	af
      0022B9 33               [ 6] 7385 	inc	sp
      0022BA 4A               [ 4] 7386 	ld	c, d
      0022BB C5               [11] 7387 	push	bc
      0022BC CDr93r1B         [17] 7388 	call	_DrawBlock_SameTile
      0022BF F1               [10] 7389 	pop	af
      0022C0 33               [ 6] 7390 	inc	sp
      0022C1 D1               [10] 7391 	pop	de
      0022C2 C1               [10] 7392 	pop	bc
      0022C3                       7393 00224$:
                                   7394 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0022C3 14               [ 4] 7395 	inc	d
      0022C4 C3r1Br22         [10] 7396 	jp	00223$
      0022C7                       7397 00227$:
                                   7398 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0022C7 04               [ 4] 7399 	inc	b
      0022C8 C3r13r22         [10] 7400 	jp	00226$
      0022CB                       7401 00168$:
                                   7402 ;src\/CheckPlayfield.h:196: HideHitSprite();
      0022CB CDr68r0E         [17] 7403 	call	_HideHitSprite
                                   7404 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0022CE DD 36 FD 00      [19] 7405 	ld	-3 (ix), #0
      0022D2                       7406 00235$:
      0022D2 DD 7E FD         [19] 7407 	ld	a, -3 (ix)
      0022D5 D6 0C            [ 7] 7408 	sub	a, #0x0c
      0022D7 D2rB5r23         [10] 7409 	jp	NC, 00177$
                                   7410 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0022DA DD 36 FE 00      [19] 7411 	ld	-2 (ix), #0
      0022DE                       7412 00232$:
      0022DE DD 7E FE         [19] 7413 	ld	a, -2 (ix)
      0022E1 D6 06            [ 7] 7414 	sub	a, #0x06
      0022E3 D2rAFr23         [10] 7415 	jp	NC, 00236$
                                   7416 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0022E6 DD 4E FE         [19] 7417 	ld	c, -2 (ix)
      0022E9 06 00            [ 7] 7418 	ld	b, #0x00
      0022EB 69               [ 4] 7419 	ld	l, c
      0022EC 60               [ 4] 7420 	ld	h, b
      0022ED 29               [11] 7421 	add	hl, hl
      0022EE 09               [11] 7422 	add	hl, bc
      0022EF 29               [11] 7423 	add	hl, hl
      0022F0 29               [11] 7424 	add	hl, hl
      0022F1 EB               [ 4] 7425 	ex	de, hl
      0022F2 21r00r00         [10] 7426 	ld	hl, #_playfield
      0022F5 19               [11] 7427 	add	hl, de
      0022F6 DD 75 FB         [19] 7428 	ld	-5 (ix), l
      0022F9 DD 74 FC         [19] 7429 	ld	-4 (ix), h
      0022FC DD 7E FB         [19] 7430 	ld	a, -5 (ix)
      0022FF DD 86 FD         [19] 7431 	add	a, -3 (ix)
      002302 4F               [ 4] 7432 	ld	c, a
      002303 DD 7E FC         [19] 7433 	ld	a, -4 (ix)
      002306 CE 00            [ 7] 7434 	adc	a, #0x00
      002308 47               [ 4] 7435 	ld	b, a
      002309 0A               [ 7] 7436 	ld	a, (bc)
      00230A 07               [ 4] 7437 	rlca
      00230B D2rA9r23         [10] 7438 	jp	NC,00233$
                                   7439 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      00230E 2Ar04r00         [16] 7440 	ld	hl, (_blocksRemoved)
      002311 23               [ 6] 7441 	inc	hl
      002312 22r04r00         [16] 7442 	ld	(_blocksRemoved), hl
                                   7443 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002315 DD 7E FB         [19] 7444 	ld	a, -5 (ix)
      002318 DD 77 F7         [19] 7445 	ld	-9 (ix), a
      00231B DD 7E FC         [19] 7446 	ld	a, -4 (ix)
      00231E DD 77 F8         [19] 7447 	ld	-8 (ix), a
      002321 DD 7E FD         [19] 7448 	ld	a, -3 (ix)
      002324 DD 77 FF         [19] 7449 	ld	-1 (ix), a
      002327                       7450 00229$:
      002327 DD 7E FF         [19] 7451 	ld	a, -1 (ix)
      00232A B7               [ 4] 7452 	or	a, a
      00232B 28 7C            [12] 7453 	jr	Z, 00233$
                                   7454 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      00232D 0E 01            [ 7] 7455 	ld	c, #0x01
                                   7456 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      00232F DD 7E FF         [19] 7457 	ld	a, -1 (ix)
      002332 DD 77 FC         [19] 7458 	ld	-4 (ix), a
      002335 3D               [ 4] 7459 	dec	a
      002336 DD 86 F7         [19] 7460 	add	a, -9 (ix)
      002339 5F               [ 4] 7461 	ld	e, a
      00233A 3E 00            [ 7] 7462 	ld	a, #0x00
      00233C DD 8E F8         [19] 7463 	adc	a, -8 (ix)
      00233F 57               [ 4] 7464 	ld	d, a
      002340 1A               [ 7] 7465 	ld	a, (de)
      002341 07               [ 4] 7466 	rlca
      002342 30 02            [12] 7467 	jr	NC, 00170$
      002344 0E 02            [ 7] 7468 	ld	c, #0x02
      002346                       7469 00170$:
                                   7470 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      002346 DD 7E FC         [19] 7471 	ld	a, -4 (ix)
      002349 3D               [ 4] 7472 	dec	a
      00234A 3D               [ 4] 7473 	dec	a
      00234B DD 86 F7         [19] 7474 	add	a, -9 (ix)
      00234E 5F               [ 4] 7475 	ld	e, a
      00234F 3E 00            [ 7] 7476 	ld	a, #0x00
      002351 DD 8E F8         [19] 7477 	adc	a, -8 (ix)
      002354 57               [ 4] 7478 	ld	d, a
      002355 1A               [ 7] 7479 	ld	a, (de)
      002356 07               [ 4] 7480 	rlca
      002357 30 01            [12] 7481 	jr	NC, 00172$
      002359 0C               [ 4] 7482 	inc	c
      00235A                       7483 00172$:
                                   7484 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      00235A DD 7E F7         [19] 7485 	ld	a, -9 (ix)
      00235D DD 86 FF         [19] 7486 	add	a, -1 (ix)
      002360 DD 77 F9         [19] 7487 	ld	-7 (ix), a
      002363 DD 7E F8         [19] 7488 	ld	a, -8 (ix)
      002366 CE 00            [ 7] 7489 	adc	a, #0x00
      002368 DD 77 FA         [19] 7490 	ld	-6 (ix), a
      00236B DD 6E FF         [19] 7491 	ld	l, -1 (ix)
      00236E 26 00            [ 7] 7492 	ld	h, #0x00
      002370 59               [ 4] 7493 	ld	e, c
      002371 16 00            [ 7] 7494 	ld	d, #0x00
      002373 BF               [ 4] 7495 	cp	a, a
      002374 ED 52            [15] 7496 	sbc	hl, de
      002376 CB 7C            [ 8] 7497 	bit	7, h
      002378 20 18            [12] 7498 	jr	NZ, 00243$
      00237A DD 7E FF         [19] 7499 	ld	a, -1 (ix)
      00237D 91               [ 4] 7500 	sub	a, c
      00237E DD 86 F7         [19] 7501 	add	a, -9 (ix)
      002381 4F               [ 4] 7502 	ld	c, a
      002382 3E 00            [ 7] 7503 	ld	a, #0x00
      002384 DD 8E F8         [19] 7504 	adc	a, -8 (ix)
      002387 47               [ 4] 7505 	ld	b, a
      002388 0A               [ 7] 7506 	ld	a, (bc)
      002389 DD 77 FB         [19] 7507 	ld	-5 (ix), a
      00238C DD 36 FC 00      [19] 7508 	ld	-4 (ix), #0
      002390 18 07            [12] 7509 	jr	00244$
      002392                       7510 00243$:
      002392 AF               [ 4] 7511 	xor	a, a
      002393 DD 77 FB         [19] 7512 	ld	-5 (ix), a
      002396 DD 77 FC         [19] 7513 	ld	-4 (ix), a
      002399                       7514 00244$:
      002399 DD 7E FB         [19] 7515 	ld	a, -5 (ix)
      00239C DD 6E F9         [19] 7516 	ld	l, -7 (ix)
      00239F DD 66 FA         [19] 7517 	ld	h, -6 (ix)
      0023A2 77               [ 7] 7518 	ld	(hl), a
                                   7519 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      0023A3 DD 35 FF         [23] 7520 	dec	-1 (ix)
      0023A6 C3r27r23         [10] 7521 	jp	00229$
      0023A9                       7522 00233$:
                                   7523 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      0023A9 DD 34 FE         [23] 7524 	inc	-2 (ix)
      0023AC C3rDEr22         [10] 7525 	jp	00232$
      0023AF                       7526 00236$:
                                   7527 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      0023AF DD 34 FD         [23] 7528 	inc	-3 (ix)
      0023B2 C3rD2r22         [10] 7529 	jp	00235$
      0023B5                       7530 00177$:
                                   7531 ;src\/CheckPlayfield.h:227: oldLevel = level;
      0023B5 3Ar06r00         [13] 7532 	ld	a, (#_level + 0)
      0023B8 4F               [ 4] 7533 	ld	c, a
                                   7534 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      0023B9 21r04r00         [10] 7535 	ld	hl, #_blocksRemoved
      0023BC 46               [ 7] 7536 	ld	b, (hl)
      0023BD 23               [ 6] 7537 	inc	hl
      0023BE 56               [ 7] 7538 	ld	d, (hl)
      0023BF 78               [ 4] 7539 	ld	a, b
      0023C0 D6 5A            [ 7] 7540 	sub	a, #0x5a
      0023C2 7A               [ 4] 7541 	ld	a, d
      0023C3 DE 00            [ 7] 7542 	sbc	a, #0x00
      0023C5 38 19            [12] 7543 	jr	C, 00185$
                                   7544 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      0023C7 C5               [11] 7545 	push	bc
      0023C8 21 1E 00         [10] 7546 	ld	hl, #0x001e
      0023CB E5               [11] 7547 	push	hl
      0023CC 58               [ 4] 7548 	ld	e, b
      0023CD D5               [11] 7549 	push	de
      0023CE CDr00r00         [17] 7550 	call	__divuint
      0023D1 F1               [10] 7551 	pop	af
      0023D2 F1               [10] 7552 	pop	af
      0023D3 C1               [10] 7553 	pop	bc
      0023D4 7D               [ 4] 7554 	ld	a, l
      0023D5 3C               [ 4] 7555 	inc	a
      0023D6 32r06r00         [13] 7556 	ld	(_level+0), a
                                   7557 ;src\/CheckPlayfield.h:230: speed = 15;
      0023D9 21r96r00         [10] 7558 	ld	hl, #_speed
      0023DC 36 0F            [10] 7559 	ld	(hl), #0x0f
      0023DE 18 32            [12] 7560 	jr	00186$
      0023E0                       7561 00185$:
                                   7562 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      0023E0 78               [ 4] 7563 	ld	a, b
      0023E1 D6 3C            [ 7] 7564 	sub	a, #0x3c
      0023E3 7A               [ 4] 7565 	ld	a, d
      0023E4 DE 00            [ 7] 7566 	sbc	a, #0x00
      0023E6 38 0C            [12] 7567 	jr	C, 00182$
                                   7568 ;src\/CheckPlayfield.h:234: level = 3;
      0023E8 21r06r00         [10] 7569 	ld	hl, #_level
      0023EB 36 03            [10] 7570 	ld	(hl), #0x03
                                   7571 ;src\/CheckPlayfield.h:235: speed = 30;
      0023ED 21r96r00         [10] 7572 	ld	hl, #_speed
      0023F0 36 1E            [10] 7573 	ld	(hl), #0x1e
      0023F2 18 1E            [12] 7574 	jr	00186$
      0023F4                       7575 00182$:
                                   7576 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      0023F4 78               [ 4] 7577 	ld	a, b
      0023F5 D6 1E            [ 7] 7578 	sub	a, #0x1e
      0023F7 7A               [ 4] 7579 	ld	a, d
      0023F8 DE 00            [ 7] 7580 	sbc	a, #0x00
      0023FA 38 0C            [12] 7581 	jr	C, 00179$
                                   7582 ;src\/CheckPlayfield.h:238: level = 2;
      0023FC 21r06r00         [10] 7583 	ld	hl, #_level
      0023FF 36 02            [10] 7584 	ld	(hl), #0x02
                                   7585 ;src\/CheckPlayfield.h:239: speed = 45;
      002401 21r96r00         [10] 7586 	ld	hl, #_speed
      002404 36 2D            [10] 7587 	ld	(hl), #0x2d
      002406 18 0A            [12] 7588 	jr	00186$
      002408                       7589 00179$:
                                   7590 ;src\/CheckPlayfield.h:242: level = 1;
      002408 21r06r00         [10] 7591 	ld	hl, #_level
      00240B 36 01            [10] 7592 	ld	(hl), #0x01
                                   7593 ;src\/CheckPlayfield.h:243: speed = 60;
      00240D 21r96r00         [10] 7594 	ld	hl, #_speed
      002410 36 3C            [10] 7595 	ld	(hl), #0x3c
      002412                       7596 00186$:
                                   7597 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      002412 3Ar06r00         [13] 7598 	ld	a,(#_level + 0)
      002415 91               [ 4] 7599 	sub	a, c
      002416 28 05            [12] 7600 	jr	Z, 00188$
                                   7601 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      002418 21r07r00         [10] 7602 	ld	hl, #_newLevel
      00241B 36 01            [10] 7603 	ld	(hl), #0x01
      00241D                       7604 00188$:
                                   7605 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      00241D CDr4Fr1C         [17] 7606 	call	_DrawPlayfield
                                   7607 ;src\/CheckPlayfield.h:257: DrawScore();
      002420 CDrFEr16         [17] 7608 	call	_DrawScore
                                   7609 ;src\/CheckPlayfield.h:259: iteration++;
      002423 DD 34 04         [23] 7610 	inc	4 (ix)
                                   7611 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      002426 DD 7E 04         [19] 7612 	ld	a, 4 (ix)
      002429 F5               [11] 7613 	push	af
      00242A 33               [ 6] 7614 	inc	sp
      00242B CDrC0r1C         [17] 7615 	call	_CheckPlayfield
      00242E 18 03            [12] 7616 	jr	00237$
      002430                       7617 00190$:
                                   7618 ;src\/CheckPlayfield.h:264: DrawScore();
      002430 CDrFEr16         [17] 7619 	call	_DrawScore
      002433                       7620 00237$:
                                   7621 ;src\/CheckPlayfield.h:266: }
      002433 DD F9            [10] 7622 	ld	sp, ix
      002435 DD E1            [14] 7623 	pop	ix
      002437 C9               [10] 7624 	ret
                                   7625 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   7626 ;	---------------------------------
                                   7627 ; Function RandomIndex
                                   7628 ; ---------------------------------
      002438                       7629 _RandomIndex::
                                   7630 ;src\/GameLogic.h:5: do {
      002438                       7631 00101$:
                                   7632 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      002438 CDrA3r00         [17] 7633 	call	_GetRandom
      00243B 7D               [ 4] 7634 	ld	a, l
      00243C E6 07            [ 7] 7635 	and	a, #0x07
      00243E 6F               [ 4] 7636 	ld	l, a
                                   7637 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      00243F 3E 04            [ 7] 7638 	ld	a, #0x04
      002441 95               [ 4] 7639 	sub	a, l
      002442 38 F4            [12] 7640 	jr	C, 00101$
                                   7641 ;src\/GameLogic.h:10: return random;
                                   7642 ;src\/GameLogic.h:11: }
      002444 C9               [10] 7643 	ret
                                   7644 ;src\/GameLogic.h:13: void RandomPiece() {
                                   7645 ;	---------------------------------
                                   7646 ; Function RandomPiece
                                   7647 ; ---------------------------------
      002445                       7648 _RandomPiece::
                                   7649 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      002445 3Ar93r00         [13] 7650 	ld	a,(#_nextTopPiece + 0)
      002448 32r90r00         [13] 7651 	ld	(#_topPiece),a
                                   7652 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      00244B 3Ar94r00         [13] 7653 	ld	a,(#_nextMidPiece + 0)
      00244E 32r91r00         [13] 7654 	ld	(#_midPiece),a
                                   7655 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      002451 3Ar95r00         [13] 7656 	ld	a,(#_nextBottomPiece + 0)
      002454 32r92r00         [13] 7657 	ld	(#_bottomPiece),a
                                   7658 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      002457 01r18r00         [10] 7659 	ld	bc, #_pieces+0
      00245A C5               [11] 7660 	push	bc
      00245B CDr38r24         [17] 7661 	call	_RandomIndex
      00245E C1               [10] 7662 	pop	bc
      00245F 26 00            [ 7] 7663 	ld	h, #0x00
      002461 09               [11] 7664 	add	hl, bc
      002462 7E               [ 7] 7665 	ld	a, (hl)
      002463 32r93r00         [13] 7666 	ld	(_nextTopPiece+0), a
                                   7667 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      002466 C5               [11] 7668 	push	bc
      002467 CDr38r24         [17] 7669 	call	_RandomIndex
      00246A C1               [10] 7670 	pop	bc
      00246B 26 00            [ 7] 7671 	ld	h, #0x00
      00246D 09               [11] 7672 	add	hl, bc
      00246E 7E               [ 7] 7673 	ld	a, (hl)
      00246F 32r94r00         [13] 7674 	ld	(_nextMidPiece+0), a
                                   7675 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      002472 C5               [11] 7676 	push	bc
      002473 CDr38r24         [17] 7677 	call	_RandomIndex
      002476 C1               [10] 7678 	pop	bc
      002477 26 00            [ 7] 7679 	ld	h, #0x00
      002479 09               [11] 7680 	add	hl, bc
      00247A 7E               [ 7] 7681 	ld	a, (hl)
      00247B 32r95r00         [13] 7682 	ld	(_nextBottomPiece+0), a
                                   7683 ;src\/GameLogic.h:21: }
      00247E C9               [10] 7684 	ret
                                   7685 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   7686 ;	---------------------------------
                                   7687 ; Function UpdateAndDrawPieceStatic
                                   7688 ; ---------------------------------
      00247F                       7689 _UpdateAndDrawPieceStatic::
                                   7690 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      00247F 01r00r00         [10] 7691 	ld	bc, #_playfield+0
      002482 ED 5Br01r00      [20] 7692 	ld	de, (_col)
      002486 16 00            [ 7] 7693 	ld	d, #0x00
      002488 6B               [ 4] 7694 	ld	l, e
      002489 62               [ 4] 7695 	ld	h, d
      00248A 29               [11] 7696 	add	hl, hl
      00248B 19               [11] 7697 	add	hl, de
      00248C 29               [11] 7698 	add	hl, hl
      00248D 29               [11] 7699 	add	hl, hl
      00248E 09               [11] 7700 	add	hl, bc
      00248F EB               [ 4] 7701 	ex	de, hl
      002490 3Ar02r00         [13] 7702 	ld	a, (#_line + 0)
      002493 6F               [ 4] 7703 	ld	l, a
      002494 26 00            [ 7] 7704 	ld	h, #0x00
      002496 19               [11] 7705 	add	hl, de
      002497 3Ar90r00         [13] 7706 	ld	a,(#_topPiece + 0)
      00249A 77               [ 7] 7707 	ld	(hl), a
                                   7708 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      00249B ED 5Br01r00      [20] 7709 	ld	de, (_col)
      00249F 16 00            [ 7] 7710 	ld	d, #0x00
      0024A1 6B               [ 4] 7711 	ld	l, e
      0024A2 62               [ 4] 7712 	ld	h, d
      0024A3 29               [11] 7713 	add	hl, hl
      0024A4 19               [11] 7714 	add	hl, de
      0024A5 29               [11] 7715 	add	hl, hl
      0024A6 29               [11] 7716 	add	hl, hl
      0024A7 09               [11] 7717 	add	hl, bc
      0024A8 EB               [ 4] 7718 	ex	de, hl
      0024A9 3Ar02r00         [13] 7719 	ld	a, (#_line + 0)
      0024AC 6F               [ 4] 7720 	ld	l, a
      0024AD 2C               [ 4] 7721 	inc	l
      0024AE 26 00            [ 7] 7722 	ld	h, #0x00
      0024B0 19               [11] 7723 	add	hl, de
      0024B1 3Ar91r00         [13] 7724 	ld	a,(#_midPiece + 0)
      0024B4 77               [ 7] 7725 	ld	(hl), a
                                   7726 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      0024B5 ED 5Br01r00      [20] 7727 	ld	de, (_col)
      0024B9 16 00            [ 7] 7728 	ld	d, #0x00
      0024BB 6B               [ 4] 7729 	ld	l, e
      0024BC 62               [ 4] 7730 	ld	h, d
      0024BD 29               [11] 7731 	add	hl, hl
      0024BE 19               [11] 7732 	add	hl, de
      0024BF 29               [11] 7733 	add	hl, hl
      0024C0 29               [11] 7734 	add	hl, hl
      0024C1 09               [11] 7735 	add	hl, bc
      0024C2 EB               [ 4] 7736 	ex	de, hl
      0024C3 3Ar02r00         [13] 7737 	ld	a, (#_line + 0)
      0024C6 6F               [ 4] 7738 	ld	l, a
      0024C7 2C               [ 4] 7739 	inc	l
      0024C8 2C               [ 4] 7740 	inc	l
      0024C9 26 00            [ 7] 7741 	ld	h, #0x00
      0024CB 19               [11] 7742 	add	hl, de
      0024CC 3Ar92r00         [13] 7743 	ld	a,(#_bottomPiece + 0)
      0024CF 77               [ 7] 7744 	ld	(hl), a
                                   7745 ;src\/GameLogic.h:29: DrawPiece(line);
      0024D0 C5               [11] 7746 	push	bc
      0024D1 3Ar02r00         [13] 7747 	ld	a,(#_line + 0)
      0024D4 F5               [11] 7748 	push	af
      0024D5 33               [ 6] 7749 	inc	sp
      0024D6 CDr2Cr1C         [17] 7750 	call	_DrawPiece
      0024D9 33               [ 6] 7751 	inc	sp
      0024DA C1               [10] 7752 	pop	bc
                                   7753 ;src\/GameLogic.h:32: col = INITIAL_COL;
      0024DB 3E 02            [ 7] 7754 	ld	a, #0x02
      0024DD 32r01r00         [13] 7755 	ld	(#_col), a
                                   7756 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   7757 ;src\/GameLogic.h:35: counter = 0;
      0024E0 3E 00            [ 7] 7758 	ld	a,#0x00
      0024E2 32r02r00         [13] 7759 	ld	(#_line),a
      0024E5 32r03r00         [13] 7760 	ld	(#_counter), a
                                   7761 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      0024E8 3Ar18r00         [13] 7762 	ld	a, (#_playfield + 24)
      0024EB B7               [ 4] 7763 	or	a, a
      0024EC 20 0C            [12] 7764 	jr	NZ, 00101$
                                   7765 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      0024EE 3Ar19r00         [13] 7766 	ld	a, (#_playfield + 25)
      0024F1 B7               [ 4] 7767 	or	a, a
      0024F2 20 06            [12] 7768 	jr	NZ, 00101$
                                   7769 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      0024F4 3Ar1Ar00         [13] 7770 	ld	a, (#_playfield + 26)
      0024F7 B7               [ 4] 7771 	or	a, a
      0024F8 28 0B            [12] 7772 	jr	Z, 00102$
      0024FA                       7773 00101$:
                                   7774 ;src\/GameLogic.h:41: gameOver = TRUE;
      0024FA FD 21r00r00      [14] 7775 	ld	iy, #_gameOver
      0024FE FD 36 00 01      [19] 7776 	ld	0 (iy), #0x01
      002502 C3r4Fr1C         [10] 7777 	jp	_DrawPlayfield
      002505                       7778 00102$:
                                   7779 ;src\/GameLogic.h:44: RandomPiece();
      002505 CDr45r24         [17] 7780 	call	_RandomPiece
                                   7781 ;src\/GameLogic.h:46: CheckPlayfield(1);
      002508 3E 01            [ 7] 7782 	ld	a, #0x01
      00250A F5               [11] 7783 	push	af
      00250B 33               [ 6] 7784 	inc	sp
      00250C CDrC0r1C         [17] 7785 	call	_CheckPlayfield
      00250F 33               [ 6] 7786 	inc	sp
                                   7787 ;src\/GameLogic.h:48: DrawNextPiece();
      002510 CDrA4r15         [17] 7788 	call	_DrawNextPiece
                                   7789 ;src\/GameLogic.h:51: DrawPlayfield();
                                   7790 ;src\/GameLogic.h:52: }
      002513 C3r4Fr1C         [10] 7791 	jp	_DrawPlayfield
                                   7792 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   7793 ;	---------------------------------
                                   7794 ; Function BlinkPauseText
                                   7795 ; ---------------------------------
      002516                       7796 _BlinkPauseText::
                                   7797 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      002516 2A 9E FC         [16] 7798 	ld	hl, (_JIFFY)
      002519 CB 5D            [ 8] 7799 	bit	3, l
      00251B 28 0E            [12] 7800 	jr	Z, 00102$
                                   7801 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      00251D 11 0D 0C         [10] 7802 	ld	de, #0x0c0d
      002520 D5               [11] 7803 	push	de
      002521 21r34r25         [10] 7804 	ld	hl, #___str_5
      002524 E5               [11] 7805 	push	hl
      002525 CDrBBr12         [17] 7806 	call	_DrawString
      002528 F1               [10] 7807 	pop	af
      002529 F1               [10] 7808 	pop	af
      00252A C9               [10] 7809 	ret
      00252B                       7810 00102$:
                                   7811 ;src\/GameLogic.h:61: DrawLine(6);
      00252B 3E 06            [ 7] 7812 	ld	a, #0x06
      00252D F5               [11] 7813 	push	af
      00252E 33               [ 6] 7814 	inc	sp
      00252F CDrF4r1B         [17] 7815 	call	_DrawLine
      002532 33               [ 6] 7816 	inc	sp
                                   7817 ;src\/GameLogic.h:64: }
      002533 C9               [10] 7818 	ret
      002534                       7819 ___str_5:
      002534 50 41 55 53 45        7820 	.ascii "PAUSE"
      002539 00                    7821 	.db 0x00
                                   7822 ;src\/GameLogic.h:66: void Pause() {
                                   7823 ;	---------------------------------
                                   7824 ; Function Pause
                                   7825 ; ---------------------------------
      00253A                       7826 _Pause::
                                   7827 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      00253A 11 0D 0C         [10] 7828 	ld	de, #0x0c0d
      00253D D5               [11] 7829 	push	de
      00253E 21r74r25         [10] 7830 	ld	hl, #___str_6
      002541 E5               [11] 7831 	push	hl
      002542 CDrBBr12         [17] 7832 	call	_DrawString
      002545 F1               [10] 7833 	pop	af
      002546 F1               [10] 7834 	pop	af
                                   7835 ;src\/GameLogic.h:71: while(TRUE) {
      002547                       7836 00114$:
                                   7837 ;src\/GameLogic.h:73: BlinkPauseText();
      002547 CDr16r25         [17] 7838 	call	_BlinkPauseText
                                   7839 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      00254A 2E 07            [ 7] 7840 	ld	l, #0x07
      00254C CDr00r00         [17] 7841 	call	_SNSMAT
                                   7842 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      00254F CB 55            [ 8] 7843 	bit	2, l
      002551 28 F4            [12] 7844 	jr	Z, 00114$
                                   7845 ;src\/GameLogic.h:79: while(TRUE) {
      002553                       7846 00109$:
                                   7847 ;src\/GameLogic.h:81: BlinkPauseText();
      002553 CDr16r25         [17] 7848 	call	_BlinkPauseText
                                   7849 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      002556 2E 07            [ 7] 7850 	ld	l, #0x07
      002558 CDr00r00         [17] 7851 	call	_SNSMAT
                                   7852 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      00255B CB 55            [ 8] 7853 	bit	2, l
      00255D 20 F4            [12] 7854 	jr	NZ, 00109$
                                   7855 ;src\/GameLogic.h:87: while(TRUE) {
      00255F                       7856 00104$:
                                   7857 ;src\/GameLogic.h:89: BlinkPauseText();
      00255F CDr16r25         [17] 7858 	call	_BlinkPauseText
                                   7859 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      002562 2E 07            [ 7] 7860 	ld	l, #0x07
      002564 CDr00r00         [17] 7861 	call	_SNSMAT
                                   7862 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      002567 CB 55            [ 8] 7863 	bit	2, l
      002569 28 F4            [12] 7864 	jr	Z, 00104$
                                   7865 ;src\/GameLogic.h:95: DrawLine(6);
      00256B 3E 06            [ 7] 7866 	ld	a, #0x06
      00256D F5               [11] 7867 	push	af
      00256E 33               [ 6] 7868 	inc	sp
      00256F CDrF4r1B         [17] 7869 	call	_DrawLine
      002572 33               [ 6] 7870 	inc	sp
                                   7871 ;src\/GameLogic.h:96: return;
                                   7872 ;src\/GameLogic.h:106: }
      002573 C9               [10] 7873 	ret
      002574                       7874 ___str_6:
      002574 50 41 55 53 45        7875 	.ascii "PAUSE"
      002579 00                    7876 	.db 0x00
                                   7877 ;src\/GameLogic.h:108: void GameLoop() {
                                   7878 ;	---------------------------------
                                   7879 ; Function GameLoop
                                   7880 ; ---------------------------------
      00257A                       7881 _GameLoop::
      00257A DD E5            [15] 7882 	push	ix
      00257C DD 21 00 00      [14] 7883 	ld	ix,#0
      002580 DD 39            [15] 7884 	add	ix,sp
      002582 21 F3 FF         [10] 7885 	ld	hl, #-13
      002585 39               [11] 7886 	add	hl, sp
      002586 F9               [ 6] 7887 	ld	sp, hl
                                   7888 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      002587 DD 36 FF 00      [19] 7889 	ld	-1 (ix), #0
      00258B DD 36 F3 00      [19] 7890 	ld	-13 (ix), #0
                                   7891 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      00258F DD 36 F4 00      [19] 7892 	ld	-12 (ix), #0
      002593 DD 36 F5 00      [19] 7893 	ld	-11 (ix), #0
                                   7894 ;src\/GameLogic.h:115: while(!gameOver) {
      002597                       7895 00150$:
      002597 3Ar00r00         [13] 7896 	ld	a,(#_gameOver + 0)
      00259A B7               [ 4] 7897 	or	a, a
      00259B C2r32r29         [10] 7898 	jp	NZ, 00152$
                                   7899 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      00259E ED 4B 9E FC      [20] 7900 	ld	bc, (_JIFFY)
                                   7901 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      0025A2                       7902 00101$:
      0025A2 2A 9E FC         [16] 7903 	ld	hl, (_JIFFY)
      0025A5 BF               [ 4] 7904 	cp	a, a
      0025A6 ED 42            [15] 7905 	sbc	hl, bc
      0025A8 28 F8            [12] 7906 	jr	Z, 00101$
                                   7907 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0025AA ED 4Br01r00      [20] 7908 	ld	bc, (_col)
      0025AE 06 00            [ 7] 7909 	ld	b, #0x00
      0025B0 69               [ 4] 7910 	ld	l, c
      0025B1 60               [ 4] 7911 	ld	h, b
      0025B2 29               [11] 7912 	add	hl, hl
      0025B3 09               [11] 7913 	add	hl, bc
      0025B4 29               [11] 7914 	add	hl, hl
      0025B5 29               [11] 7915 	add	hl, hl
      0025B6 EB               [ 4] 7916 	ex	de, hl
      0025B7 21r00r00         [10] 7917 	ld	hl, #_playfield
      0025BA 19               [11] 7918 	add	hl, de
      0025BB EB               [ 4] 7919 	ex	de, hl
      0025BC FD 21r02r00      [14] 7920 	ld	iy, #_line
      0025C0 FD 6E 00         [19] 7921 	ld	l, 0 (iy)
      0025C3 26 00            [ 7] 7922 	ld	h, #0x00
      0025C5 19               [11] 7923 	add	hl, de
      0025C6 36 00            [10] 7924 	ld	(hl), #0x00
                                   7925 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0025C8 ED 4Br01r00      [20] 7926 	ld	bc, (_col)
      0025CC 06 00            [ 7] 7927 	ld	b, #0x00
      0025CE 69               [ 4] 7928 	ld	l, c
      0025CF 60               [ 4] 7929 	ld	h, b
      0025D0 29               [11] 7930 	add	hl, hl
      0025D1 09               [11] 7931 	add	hl, bc
      0025D2 29               [11] 7932 	add	hl, hl
      0025D3 29               [11] 7933 	add	hl, hl
      0025D4 EB               [ 4] 7934 	ex	de, hl
      0025D5 21r00r00         [10] 7935 	ld	hl, #_playfield
      0025D8 19               [11] 7936 	add	hl, de
      0025D9 EB               [ 4] 7937 	ex	de, hl
      0025DA FD 6E 00         [19] 7938 	ld	l, 0 (iy)
      0025DD 2C               [ 4] 7939 	inc	l
      0025DE 26 00            [ 7] 7940 	ld	h, #0x00
      0025E0 19               [11] 7941 	add	hl, de
      0025E1 36 00            [10] 7942 	ld	(hl), #0x00
                                   7943 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      0025E3 ED 4Br01r00      [20] 7944 	ld	bc, (_col)
      0025E7 06 00            [ 7] 7945 	ld	b, #0x00
      0025E9 69               [ 4] 7946 	ld	l, c
      0025EA 60               [ 4] 7947 	ld	h, b
      0025EB 29               [11] 7948 	add	hl, hl
      0025EC 09               [11] 7949 	add	hl, bc
      0025ED 29               [11] 7950 	add	hl, hl
      0025EE 29               [11] 7951 	add	hl, hl
      0025EF EB               [ 4] 7952 	ex	de, hl
      0025F0 21r00r00         [10] 7953 	ld	hl, #_playfield
      0025F3 19               [11] 7954 	add	hl, de
      0025F4 EB               [ 4] 7955 	ex	de, hl
      0025F5 FD 6E 00         [19] 7956 	ld	l, 0 (iy)
      0025F8 2C               [ 4] 7957 	inc	l
      0025F9 2C               [ 4] 7958 	inc	l
      0025FA 26 00            [ 7] 7959 	ld	h, #0x00
      0025FC 19               [11] 7960 	add	hl, de
      0025FD 36 00            [10] 7961 	ld	(hl), #0x00
                                   7962 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      0025FF 2E 01            [ 7] 7963 	ld	l, #0x01
      002601 CDr00r00         [17] 7964 	call	_GTSTCK
      002604 DD 75 F6         [19] 7965 	ld	-10 (ix), l
                                   7966 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      002607 2E 01            [ 7] 7967 	ld	l, #0x01
      002609 CDr00r00         [17] 7968 	call	_GTTRIG
      00260C DD 75 F7         [19] 7969 	ld	-9 (ix), l
                                   7970 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      00260F 2E 03            [ 7] 7971 	ld	l, #0x03
      002611 CDr00r00         [17] 7972 	call	_GTTRIG
      002614 DD 75 F8         [19] 7973 	ld	-8 (ix), l
                                   7974 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      002617 DD 7E F6         [19] 7975 	ld	a, -10 (ix)
                                   7976 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      00261A B7               [ 4] 7977 	or	a,a
      00261B 20 07            [12] 7978 	jr	NZ, 00105$
      00261D 6F               [ 4] 7979 	ld	l,a
      00261E CDr00r00         [17] 7980 	call	_GTSTCK
      002621 DD 75 F6         [19] 7981 	ld	-10 (ix), l
      002624                       7982 00105$:
                                   7983 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002624 FD 21r02r00      [14] 7984 	ld	iy, #_line
      002628 FD 7E 00         [19] 7985 	ld	a, 0 (iy)
      00262B DD 77 F9         [19] 7986 	ld	-7 (ix), a
                                   7987 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      00262E DD 7E FF         [19] 7988 	ld	a, -1 (ix)
      002631 B7               [ 4] 7989 	or	a, a
      002632 C2r1Br27         [10] 7990 	jp	NZ, 00118$
                                   7991 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      002635 FD 7E 00         [19] 7992 	ld	a, 0 (iy)
      002638 DD 77 FF         [19] 7993 	ld	-1 (ix), a
                                   7994 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      00263B FD 21r01r00      [14] 7995 	ld	iy, #_col
      00263F FD 7E 00         [19] 7996 	ld	a, 0 (iy)
      002642 DD 77 FA         [19] 7997 	ld	-6 (ix), a
                                   7998 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      002645 DD 7E FF         [19] 7999 	ld	a, -1 (ix)
      002648 C6 02            [ 7] 8000 	add	a, #0x02
      00264A DD 77 FB         [19] 8001 	ld	-5 (ix), a
                                   8002 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      00264D DD 7E F6         [19] 8003 	ld	a, -10 (ix)
      002650 D6 07            [ 7] 8004 	sub	a, #0x07
      002652 20 5F            [12] 8005 	jr	NZ, 00112$
                                   8006 ;src\/GameLogic.h:145: col > 0 && 
      002654 FD 7E 00         [19] 8007 	ld	a, 0 (iy)
      002657 B7               [ 4] 8008 	or	a, a
      002658 28 59            [12] 8009 	jr	Z, 00112$
                                   8010 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      00265A DD 7E FA         [19] 8011 	ld	a, -6 (ix)
      00265D C6 FF            [ 7] 8012 	add	a, #0xff
      00265F DD 77 FF         [19] 8013 	ld	-1 (ix), a
      002662 4F               [ 4] 8014 	ld	c, a
      002663 07               [ 4] 8015 	rlca
      002664 9F               [ 4] 8016 	sbc	a, a
      002665 47               [ 4] 8017 	ld	b, a
      002666 69               [ 4] 8018 	ld	l, c
      002667 60               [ 4] 8019 	ld	h, b
      002668 29               [11] 8020 	add	hl, hl
      002669 09               [11] 8021 	add	hl, bc
      00266A 29               [11] 8022 	add	hl, hl
      00266B 29               [11] 8023 	add	hl, hl
      00266C DD 75 FE         [19] 8024 	ld	-2 (ix), l
      00266F DD 74 FF         [19] 8025 	ld	-1 (ix), h
      002672 3Er00            [ 7] 8026 	ld	a, #<(_playfield)
      002674 DD 86 FE         [19] 8027 	add	a, -2 (ix)
      002677 DD 77 FC         [19] 8028 	ld	-4 (ix), a
      00267A 3Es00            [ 7] 8029 	ld	a, #>(_playfield)
      00267C DD 8E FF         [19] 8030 	adc	a, -1 (ix)
      00267F DD 77 FD         [19] 8031 	ld	-3 (ix), a
      002682 DD 7E FC         [19] 8032 	ld	a, -4 (ix)
      002685 DD 86 F9         [19] 8033 	add	a, -7 (ix)
      002688 DD 77 FE         [19] 8034 	ld	-2 (ix), a
      00268B DD 7E FD         [19] 8035 	ld	a, -3 (ix)
      00268E CE 00            [ 7] 8036 	adc	a, #0x00
      002690 DD 77 FF         [19] 8037 	ld	-1 (ix), a
      002693 DD 6E FE         [19] 8038 	ld	l, -2 (ix)
      002696 DD 66 FF         [19] 8039 	ld	h, -1 (ix)
      002699 7E               [ 7] 8040 	ld	a, (hl)
      00269A B7               [ 4] 8041 	or	a, a
      00269B 20 16            [12] 8042 	jr	NZ, 00112$
                                   8043 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      00269D DD 7E FC         [19] 8044 	ld	a, -4 (ix)
      0026A0 DD 86 FB         [19] 8045 	add	a, -5 (ix)
      0026A3 4F               [ 4] 8046 	ld	c, a
      0026A4 DD 7E FD         [19] 8047 	ld	a, -3 (ix)
      0026A7 CE 00            [ 7] 8048 	adc	a, #0x00
      0026A9 47               [ 4] 8049 	ld	b, a
      0026AA 0A               [ 7] 8050 	ld	a, (bc)
      0026AB B7               [ 4] 8051 	or	a, a
      0026AC 20 05            [12] 8052 	jr	NZ, 00112$
                                   8053 ;src\/GameLogic.h:148: col--;
      0026AE FD 35 00         [23] 8054 	dec	0 (iy)
      0026B1 18 68            [12] 8055 	jr	00118$
      0026B3                       8056 00112$:
                                   8057 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      0026B3 DD 7E F6         [19] 8058 	ld	a, -10 (ix)
      0026B6 D6 03            [ 7] 8059 	sub	a, #0x03
      0026B8 20 61            [12] 8060 	jr	NZ, 00118$
                                   8061 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      0026BA FD 21r01r00      [14] 8062 	ld	iy, #_col
      0026BE FD 7E 00         [19] 8063 	ld	a, 0 (iy)
      0026C1 D6 05            [ 7] 8064 	sub	a, #0x05
      0026C3 30 56            [12] 8065 	jr	NC, 00118$
                                   8066 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      0026C5 DD 7E FA         [19] 8067 	ld	a, -6 (ix)
      0026C8 3C               [ 4] 8068 	inc	a
      0026C9 DD 77 FF         [19] 8069 	ld	-1 (ix), a
      0026CC 4F               [ 4] 8070 	ld	c, a
      0026CD 07               [ 4] 8071 	rlca
      0026CE 9F               [ 4] 8072 	sbc	a, a
      0026CF 47               [ 4] 8073 	ld	b, a
      0026D0 69               [ 4] 8074 	ld	l, c
      0026D1 60               [ 4] 8075 	ld	h, b
      0026D2 29               [11] 8076 	add	hl, hl
      0026D3 09               [11] 8077 	add	hl, bc
      0026D4 29               [11] 8078 	add	hl, hl
      0026D5 29               [11] 8079 	add	hl, hl
      0026D6 DD 75 FE         [19] 8080 	ld	-2 (ix), l
      0026D9 DD 74 FF         [19] 8081 	ld	-1 (ix), h
      0026DC 3Er00            [ 7] 8082 	ld	a, #<(_playfield)
      0026DE DD 86 FE         [19] 8083 	add	a, -2 (ix)
      0026E1 DD 77 FC         [19] 8084 	ld	-4 (ix), a
      0026E4 3Es00            [ 7] 8085 	ld	a, #>(_playfield)
      0026E6 DD 8E FF         [19] 8086 	adc	a, -1 (ix)
      0026E9 DD 77 FD         [19] 8087 	ld	-3 (ix), a
      0026EC DD 7E FC         [19] 8088 	ld	a, -4 (ix)
      0026EF DD 86 F9         [19] 8089 	add	a, -7 (ix)
      0026F2 DD 77 FE         [19] 8090 	ld	-2 (ix), a
      0026F5 DD 7E FD         [19] 8091 	ld	a, -3 (ix)
      0026F8 CE 00            [ 7] 8092 	adc	a, #0x00
      0026FA DD 77 FF         [19] 8093 	ld	-1 (ix), a
      0026FD DD 6E FE         [19] 8094 	ld	l, -2 (ix)
      002700 DD 66 FF         [19] 8095 	ld	h, -1 (ix)
      002703 7E               [ 7] 8096 	ld	a, (hl)
      002704 B7               [ 4] 8097 	or	a, a
      002705 20 14            [12] 8098 	jr	NZ, 00118$
                                   8099 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      002707 DD 7E FC         [19] 8100 	ld	a, -4 (ix)
      00270A DD 86 FB         [19] 8101 	add	a, -5 (ix)
      00270D 4F               [ 4] 8102 	ld	c, a
      00270E DD 7E FD         [19] 8103 	ld	a, -3 (ix)
      002711 CE 00            [ 7] 8104 	adc	a, #0x00
      002713 47               [ 4] 8105 	ld	b, a
      002714 0A               [ 7] 8106 	ld	a, (bc)
      002715 B7               [ 4] 8107 	or	a, a
      002716 20 03            [12] 8108 	jr	NZ, 00118$
                                   8109 ;src\/GameLogic.h:154: col++;
      002718 FD 34 00         [23] 8110 	inc	0 (iy)
      00271B                       8111 00118$:
                                   8112 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      00271B DD 7E F3         [19] 8113 	ld	a, -13 (ix)
      00271E B7               [ 4] 8114 	or	a, a
      00271F C2rE1r27         [10] 8115 	jp	NZ, 00132$
                                   8116 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002722 DD 7E F6         [19] 8117 	ld	a, -10 (ix)
      002725 3D               [ 4] 8118 	dec	a
      002726 28 18            [12] 8119 	jr	Z, 00119$
      002728 DD 7E F4         [19] 8120 	ld	a, -12 (ix)
      00272B B7               [ 4] 8121 	or	a, a
      00272C 20 06            [12] 8122 	jr	NZ, 00124$
      00272E DD 7E F7         [19] 8123 	ld	a, -9 (ix)
      002731 3C               [ 4] 8124 	inc	a
      002732 28 0C            [12] 8125 	jr	Z, 00119$
      002734                       8126 00124$:
      002734 DD 7E F5         [19] 8127 	ld	a, -11 (ix)
      002737 B7               [ 4] 8128 	or	a, a
      002738 20 1A            [12] 8129 	jr	NZ, 00120$
      00273A DD 7E F8         [19] 8130 	ld	a, -8 (ix)
      00273D 3C               [ 4] 8131 	inc	a
      00273E 20 14            [12] 8132 	jr	NZ, 00120$
      002740                       8133 00119$:
                                   8134 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      002740 3Ar92r00         [13] 8135 	ld	a, (#_bottomPiece + 0)
      002743 4F               [ 4] 8136 	ld	c, a
                                   8137 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      002744 3Ar91r00         [13] 8138 	ld	a,(#_midPiece + 0)
      002747 32r92r00         [13] 8139 	ld	(#_bottomPiece),a
                                   8140 ;src\/GameLogic.h:166: midPiece = topPiece;
      00274A 3Ar90r00         [13] 8141 	ld	a,(#_topPiece + 0)
      00274D 32r91r00         [13] 8142 	ld	(#_midPiece),a
                                   8143 ;src\/GameLogic.h:167: topPiece = temp;
      002750 21r90r00         [10] 8144 	ld	hl, #_topPiece
      002753 71               [ 7] 8145 	ld	(hl), c
      002754                       8146 00120$:
                                   8147 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      002754 DD 7E F6         [19] 8148 	ld	a, -10 (ix)
      002757 D6 05            [ 7] 8149 	sub	a, #0x05
      002759 C2rE1r27         [10] 8150 	jp	NZ,00132$
                                   8151 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      00275C DD 7E F9         [19] 8152 	ld	a, -7 (ix)
      00275F DD 77 FE         [19] 8153 	ld	-2 (ix), a
      002762 DD 7E F9         [19] 8154 	ld	a, -7 (ix)
      002765 DD 77 FF         [19] 8155 	ld	-1 (ix), a
      002768                       8156 00154$:
      002768 DD 7E FF         [19] 8157 	ld	a, -1 (ix)
      00276B D6 0C            [ 7] 8158 	sub	a, #0x0c
      00276D 30 72            [12] 8159 	jr	NC, 00132$
                                   8160 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      00276F DD 7E FF         [19] 8161 	ld	a, -1 (ix)
      002772 D6 09            [ 7] 8162 	sub	a, #0x09
      002774 28 4C            [12] 8163 	jr	Z, 00125$
      002776 ED 4Br01r00      [20] 8164 	ld	bc, (_col)
      00277A 06 00            [ 7] 8165 	ld	b, #0x00
      00277C 69               [ 4] 8166 	ld	l, c
      00277D 60               [ 4] 8167 	ld	h, b
      00277E 29               [11] 8168 	add	hl, hl
      00277F 09               [11] 8169 	add	hl, bc
      002780 29               [11] 8170 	add	hl, hl
      002781 29               [11] 8171 	add	hl, hl
      002782 DD 75 FC         [19] 8172 	ld	-4 (ix), l
      002785 DD 74 FD         [19] 8173 	ld	-3 (ix), h
      002788 3Er00            [ 7] 8174 	ld	a, #<(_playfield)
      00278A DD 86 FC         [19] 8175 	add	a, -4 (ix)
      00278D DD 77 FA         [19] 8176 	ld	-6 (ix), a
      002790 3Es00            [ 7] 8177 	ld	a, #>(_playfield)
      002792 DD 8E FD         [19] 8178 	adc	a, -3 (ix)
      002795 DD 77 FB         [19] 8179 	ld	-5 (ix), a
      002798 DD 7E FF         [19] 8180 	ld	a, -1 (ix)
      00279B DD 77 FD         [19] 8181 	ld	-3 (ix), a
      00279E DD 34 FD         [23] 8182 	inc	-3 (ix)
      0027A1 DD 34 FD         [23] 8183 	inc	-3 (ix)
      0027A4 DD 34 FD         [23] 8184 	inc	-3 (ix)
      0027A7 DD 7E FD         [19] 8185 	ld	a, -3 (ix)
      0027AA DD 86 FA         [19] 8186 	add	a, -6 (ix)
      0027AD DD 77 FC         [19] 8187 	ld	-4 (ix), a
      0027B0 3E 00            [ 7] 8188 	ld	a, #0x00
      0027B2 DD 8E FB         [19] 8189 	adc	a, -5 (ix)
      0027B5 DD 77 FD         [19] 8190 	ld	-3 (ix), a
      0027B8 DD 6E FC         [19] 8191 	ld	l, -4 (ix)
      0027BB DD 66 FD         [19] 8192 	ld	h, -3 (ix)
      0027BE 7E               [ 7] 8193 	ld	a, (hl)
      0027BF B7               [ 4] 8194 	or	a, a
      0027C0 28 14            [12] 8195 	jr	Z, 00155$
      0027C2                       8196 00125$:
                                   8197 ;src\/GameLogic.h:176: DrawPiece(line);
      0027C2 3Ar02r00         [13] 8198 	ld	a,(#_line + 0)
      0027C5 F5               [11] 8199 	push	af
      0027C6 33               [ 6] 8200 	inc	sp
      0027C7 CDr2Cr1C         [17] 8201 	call	_DrawPiece
      0027CA 33               [ 6] 8202 	inc	sp
                                   8203 ;src\/GameLogic.h:178: line = i;
      0027CB DD 7E FE         [19] 8204 	ld	a, -2 (ix)
      0027CE 32r02r00         [13] 8205 	ld	(#_line),a
                                   8206 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      0027D1 CDr7Fr24         [17] 8207 	call	_UpdateAndDrawPieceStatic
                                   8208 ;src\/GameLogic.h:181: break;
      0027D4 18 0B            [12] 8209 	jr	00132$
      0027D6                       8210 00155$:
                                   8211 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      0027D6 DD 34 FF         [23] 8212 	inc	-1 (ix)
      0027D9 DD 7E FF         [19] 8213 	ld	a, -1 (ix)
      0027DC DD 77 FE         [19] 8214 	ld	-2 (ix), a
      0027DF 18 87            [12] 8215 	jr	00154$
      0027E1                       8216 00132$:
                                   8217 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      0027E1 DD 7E F6         [19] 8218 	ld	a, -10 (ix)
      0027E4 DD 77 FF         [19] 8219 	ld	-1 (ix), a
                                   8220 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      0027E7 DD 7E F6         [19] 8221 	ld	a, -10 (ix)
      0027EA DD 77 F3         [19] 8222 	ld	-13 (ix), a
                                   8223 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      0027ED DD 7E F7         [19] 8224 	ld	a, -9 (ix)
      0027F0 DD 77 F4         [19] 8225 	ld	-12 (ix), a
                                   8226 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      0027F3 DD 7E F8         [19] 8227 	ld	a, -8 (ix)
      0027F6 DD 77 F5         [19] 8228 	ld	-11 (ix), a
                                   8229 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      0027F9 2E 07            [ 7] 8230 	ld	l, #0x07
      0027FB CDr00r00         [17] 8231 	call	_SNSMAT
                                   8232 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      0027FE CB 55            [ 8] 8233 	bit	2, l
      002800 20 03            [12] 8234 	jr	NZ, 00134$
                                   8235 ;src\/GameLogic.h:220: Pause();
      002802 CDr3Ar25         [17] 8236 	call	_Pause
      002805                       8237 00134$:
                                   8238 ;src\/GameLogic.h:225: counter++;
      002805 FD 21r03r00      [14] 8239 	ld	iy, #_counter
      002809 FD 34 00         [23] 8240 	inc	0 (iy)
                                   8241 ;src\/GameLogic.h:226: if(counter == speed) {
      00280C FD 7E 00         [19] 8242 	ld	a, 0 (iy)
      00280F 21r96r00         [10] 8243 	ld	hl, #_speed
      002812 96               [ 7] 8244 	sub	a, (hl)
      002813 20 3F            [12] 8245 	jr	NZ, 00139$
                                   8246 ;src\/GameLogic.h:228: counter = 0;
      002815 21r03r00         [10] 8247 	ld	hl, #_counter
      002818 36 00            [10] 8248 	ld	(hl), #0x00
                                   8249 ;src\/GameLogic.h:231: DrawPiece(line);
      00281A 3Ar02r00         [13] 8250 	ld	a,(#_line + 0)
      00281D F5               [11] 8251 	push	af
      00281E 33               [ 6] 8252 	inc	sp
      00281F CDr2Cr1C         [17] 8253 	call	_DrawPiece
      002822 33               [ 6] 8254 	inc	sp
                                   8255 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002823 FD 21r02r00      [14] 8256 	ld	iy, #_line
      002827 FD 7E 00         [19] 8257 	ld	a, 0 (iy)
      00282A D6 09            [ 7] 8258 	sub	a, #0x09
      00282C 28 1F            [12] 8259 	jr	Z, 00135$
      00282E ED 4Br01r00      [20] 8260 	ld	bc, (_col)
      002832 06 00            [ 7] 8261 	ld	b, #0x00
      002834 69               [ 4] 8262 	ld	l, c
      002835 60               [ 4] 8263 	ld	h, b
      002836 29               [11] 8264 	add	hl, hl
      002837 09               [11] 8265 	add	hl, bc
      002838 29               [11] 8266 	add	hl, hl
      002839 29               [11] 8267 	add	hl, hl
      00283A EB               [ 4] 8268 	ex	de, hl
      00283B 21r00r00         [10] 8269 	ld	hl, #_playfield
      00283E 19               [11] 8270 	add	hl, de
      00283F EB               [ 4] 8271 	ex	de, hl
      002840 FD 7E 00         [19] 8272 	ld	a, 0 (iy)
      002843 C6 03            [ 7] 8273 	add	a, #0x03
      002845 6F               [ 4] 8274 	ld	l, a
      002846 26 00            [ 7] 8275 	ld	h, #0x00
      002848 19               [11] 8276 	add	hl, de
      002849 7E               [ 7] 8277 	ld	a, (hl)
      00284A B7               [ 4] 8278 	or	a, a
      00284B 28 03            [12] 8279 	jr	Z, 00136$
      00284D                       8280 00135$:
                                   8281 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      00284D CDr7Fr24         [17] 8282 	call	_UpdateAndDrawPieceStatic
      002850                       8283 00136$:
                                   8284 ;src\/GameLogic.h:240: line++;
      002850 21r02r00         [10] 8285 	ld	hl, #_line
      002853 34               [11] 8286 	inc	(hl)
      002854                       8287 00139$:
                                   8288 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      002854 ED 4Br01r00      [20] 8289 	ld	bc, (_col)
      002858 06 00            [ 7] 8290 	ld	b, #0x00
      00285A 69               [ 4] 8291 	ld	l, c
      00285B 60               [ 4] 8292 	ld	h, b
      00285C 29               [11] 8293 	add	hl, hl
      00285D 09               [11] 8294 	add	hl, bc
      00285E 29               [11] 8295 	add	hl, hl
      00285F 29               [11] 8296 	add	hl, hl
      002860 EB               [ 4] 8297 	ex	de, hl
      002861 21r00r00         [10] 8298 	ld	hl, #_playfield
      002864 19               [11] 8299 	add	hl, de
      002865 EB               [ 4] 8300 	ex	de, hl
      002866 3Ar02r00         [13] 8301 	ld	a, (#_line + 0)
      002869 6F               [ 4] 8302 	ld	l, a
      00286A 26 00            [ 7] 8303 	ld	h, #0x00
      00286C 19               [11] 8304 	add	hl, de
      00286D 3Ar90r00         [13] 8305 	ld	a,(#_topPiece + 0)
      002870 77               [ 7] 8306 	ld	(hl), a
                                   8307 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      002871 ED 4Br01r00      [20] 8308 	ld	bc, (_col)
      002875 06 00            [ 7] 8309 	ld	b, #0x00
      002877 69               [ 4] 8310 	ld	l, c
      002878 60               [ 4] 8311 	ld	h, b
      002879 29               [11] 8312 	add	hl, hl
      00287A 09               [11] 8313 	add	hl, bc
      00287B 29               [11] 8314 	add	hl, hl
      00287C 29               [11] 8315 	add	hl, hl
      00287D EB               [ 4] 8316 	ex	de, hl
      00287E 21r00r00         [10] 8317 	ld	hl, #_playfield
      002881 19               [11] 8318 	add	hl, de
      002882 EB               [ 4] 8319 	ex	de, hl
      002883 3Ar02r00         [13] 8320 	ld	a, (#_line + 0)
      002886 6F               [ 4] 8321 	ld	l, a
      002887 2C               [ 4] 8322 	inc	l
      002888 26 00            [ 7] 8323 	ld	h, #0x00
      00288A 19               [11] 8324 	add	hl, de
      00288B 3Ar91r00         [13] 8325 	ld	a,(#_midPiece + 0)
      00288E 77               [ 7] 8326 	ld	(hl), a
                                   8327 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      00288F ED 4Br01r00      [20] 8328 	ld	bc, (_col)
      002893 06 00            [ 7] 8329 	ld	b, #0x00
      002895 69               [ 4] 8330 	ld	l, c
      002896 60               [ 4] 8331 	ld	h, b
      002897 29               [11] 8332 	add	hl, hl
      002898 09               [11] 8333 	add	hl, bc
      002899 29               [11] 8334 	add	hl, hl
      00289A 29               [11] 8335 	add	hl, hl
      00289B EB               [ 4] 8336 	ex	de, hl
      00289C 21r00r00         [10] 8337 	ld	hl, #_playfield
      00289F 19               [11] 8338 	add	hl, de
      0028A0 EB               [ 4] 8339 	ex	de, hl
      0028A1 3Ar02r00         [13] 8340 	ld	a, (#_line + 0)
      0028A4 6F               [ 4] 8341 	ld	l, a
      0028A5 2C               [ 4] 8342 	inc	l
      0028A6 2C               [ 4] 8343 	inc	l
      0028A7 26 00            [ 7] 8344 	ld	h, #0x00
      0028A9 19               [11] 8345 	add	hl, de
      0028AA 3Ar92r00         [13] 8346 	ld	a,(#_bottomPiece + 0)
      0028AD 77               [ 7] 8347 	ld	(hl), a
                                   8348 ;src\/GameLogic.h:254: DrawPiece(line);
      0028AE 3Ar02r00         [13] 8349 	ld	a,(#_line + 0)
      0028B1 F5               [11] 8350 	push	af
      0028B2 33               [ 6] 8351 	inc	sp
      0028B3 CDr2Cr1C         [17] 8352 	call	_DrawPiece
      0028B6 33               [ 6] 8353 	inc	sp
                                   8354 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0028B7 ED 4Br01r00      [20] 8355 	ld	bc, (_col)
      0028BB 06 00            [ 7] 8356 	ld	b, #0x00
      0028BD 69               [ 4] 8357 	ld	l, c
      0028BE 60               [ 4] 8358 	ld	h, b
      0028BF 29               [11] 8359 	add	hl, hl
      0028C0 09               [11] 8360 	add	hl, bc
      0028C1 29               [11] 8361 	add	hl, hl
      0028C2 29               [11] 8362 	add	hl, hl
      0028C3 EB               [ 4] 8363 	ex	de, hl
                                   8364 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      0028C4 21r00r00         [10] 8365 	ld	hl, #_playfield
      0028C7 19               [11] 8366 	add	hl, de
      0028C8 EB               [ 4] 8367 	ex	de, hl
      0028C9 3Ar02r00         [13] 8368 	ld	a,(#_line + 0)
      0028CC C6 03            [ 7] 8369 	add	a, #0x03
      0028CE 4F               [ 4] 8370 	ld	c, a
      0028CF 69               [ 4] 8371 	ld	l, c
      0028D0 26 00            [ 7] 8372 	ld	h, #0x00
      0028D2 19               [11] 8373 	add	hl, de
      0028D3 7E               [ 7] 8374 	ld	a, (hl)
      0028D4 B7               [ 4] 8375 	or	a, a
      0028D5 28 06            [12] 8376 	jr	Z, 00148$
                                   8377 ;src\/GameLogic.h:260: HideArrowSprite();
      0028D7 CDr48r0C         [17] 8378 	call	_HideArrowSprite
      0028DA C3r97r25         [10] 8379 	jp	00150$
      0028DD                       8380 00148$:
                                   8381 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      0028DD 41               [ 4] 8382 	ld	b, c
      0028DE                       8383 00157$:
      0028DE 78               [ 4] 8384 	ld	a, b
      0028DF D6 0C            [ 7] 8385 	sub	a, #0x0c
      0028E1 D2r97r25         [10] 8386 	jp	NC, 00150$
                                   8387 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0028E4 3Ar01r00         [13] 8388 	ld	a,(#_col + 0)
      0028E7 87               [ 4] 8389 	add	a, a
      0028E8 87               [ 4] 8390 	add	a, a
      0028E9 87               [ 4] 8391 	add	a, a
      0028EA 87               [ 4] 8392 	add	a, a
      0028EB DD 77 FE         [19] 8393 	ld	-2 (ix), a
                                   8394 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0028EE 68               [ 4] 8395 	ld	l, b
      0028EF 26 00            [ 7] 8396 	ld	h, #0x00
      0028F1 19               [11] 8397 	add	hl, de
                                   8398 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      0028F2 DD 7E FE         [19] 8399 	ld	a, -2 (ix)
      0028F5 C6 50            [ 7] 8400 	add	a, #0x50
      0028F7 DD 77 FE         [19] 8401 	ld	-2 (ix), a
                                   8402 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      0028FA 6E               [ 7] 8403 	ld	l, (hl)
      0028FB 78               [ 4] 8404 	ld	a, b
      0028FC D6 0B            [ 7] 8405 	sub	a,#0x0b
      0028FE 20 16            [12] 8406 	jr	NZ, 00143$
      002900 B5               [ 4] 8407 	or	a,l
      002901 20 13            [12] 8408 	jr	NZ, 00143$
                                   8409 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002903 79               [ 4] 8410 	ld	a, c
      002904 87               [ 4] 8411 	add	a, a
      002905 87               [ 4] 8412 	add	a, a
      002906 87               [ 4] 8413 	add	a, a
      002907 87               [ 4] 8414 	add	a, a
      002908 F5               [11] 8415 	push	af
      002909 33               [ 6] 8416 	inc	sp
      00290A DD 7E FE         [19] 8417 	ld	a, -2 (ix)
      00290D F5               [11] 8418 	push	af
      00290E 33               [ 6] 8419 	inc	sp
      00290F CDrEDr00         [17] 8420 	call	_DrawArrowSprite
      002912 F1               [10] 8421 	pop	af
                                   8422 ;src\/GameLogic.h:266: break;
      002913 C3r97r25         [10] 8423 	jp	00150$
      002916                       8424 00143$:
                                   8425 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      002916 7D               [ 4] 8426 	ld	a, l
      002917 B7               [ 4] 8427 	or	a, a
      002918 28 14            [12] 8428 	jr	Z, 00158$
                                   8429 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      00291A 79               [ 4] 8430 	ld	a, c
      00291B 3D               [ 4] 8431 	dec	a
      00291C 87               [ 4] 8432 	add	a, a
      00291D 87               [ 4] 8433 	add	a, a
      00291E 87               [ 4] 8434 	add	a, a
      00291F 87               [ 4] 8435 	add	a, a
      002920 F5               [11] 8436 	push	af
      002921 33               [ 6] 8437 	inc	sp
      002922 DD 7E FE         [19] 8438 	ld	a, -2 (ix)
      002925 F5               [11] 8439 	push	af
      002926 33               [ 6] 8440 	inc	sp
      002927 CDrEDr00         [17] 8441 	call	_DrawArrowSprite
      00292A F1               [10] 8442 	pop	af
                                   8443 ;src\/GameLogic.h:270: break;
      00292B C3r97r25         [10] 8444 	jp	00150$
      00292E                       8445 00158$:
                                   8446 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      00292E 04               [ 4] 8447 	inc	b
      00292F 48               [ 4] 8448 	ld	c, b
      002930 18 AC            [12] 8449 	jr	00157$
      002932                       8450 00152$:
                                   8451 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002932 11 0C 0C         [10] 8452 	ld	de, #0x0c0c
      002935 D5               [11] 8453 	push	de
      002936 21r4Ar29         [10] 8454 	ld	hl, #___str_7
      002939 E5               [11] 8455 	push	hl
      00293A CDrBBr12         [17] 8456 	call	_DrawString
      00293D F1               [10] 8457 	pop	af
                                   8458 ;src\/GameLogic.h:282: Wait(60 * 5);
      00293E 21 2C 01         [10] 8459 	ld	hl, #0x012c
      002941 E3               [19] 8460 	ex	(sp),hl
      002942 CDr00r00         [17] 8461 	call	_Wait
                                   8462 ;src\/GameLogic.h:284: }
      002945 DD F9            [10] 8463 	ld	sp,ix
      002947 DD E1            [14] 8464 	pop	ix
      002949 C9               [10] 8465 	ret
      00294A                       8466 ___str_7:
      00294A 47 41 4D 45 20 4F 56  8467 	.ascii "GAME OVER"
             45 52
      002953 00                    8468 	.db 0x00
                                   8469 ;src\/GameLogic.h:286: void TestCase() {
                                   8470 ;	---------------------------------
                                   8471 ; Function TestCase
                                   8472 ; ---------------------------------
      002954                       8473 _TestCase::
                                   8474 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      002954 21r20r00         [10] 8475 	ld	hl, #(_playfield + 0x0020)
      002957 36 04            [10] 8476 	ld	(hl), #0x04
                                   8477 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      002959 21r21r00         [10] 8478 	ld	hl, #(_playfield + 0x0021)
      00295C 36 0C            [10] 8479 	ld	(hl), #0x0c
                                   8480 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      00295E 21r0Ar00         [10] 8481 	ld	hl, #(_playfield + 0x000a)
      002961 36 0C            [10] 8482 	ld	(hl), #0x0c
                                   8483 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002963 21r16r00         [10] 8484 	ld	hl, #(_playfield + 0x0016)
      002966 36 0C            [10] 8485 	ld	(hl), #0x0c
                                   8486 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      002968 21r22r00         [10] 8487 	ld	hl, #(_playfield + 0x0022)
      00296B 36 08            [10] 8488 	ld	(hl), #0x08
                                   8489 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      00296D 21r3Ar00         [10] 8490 	ld	hl, #(_playfield + 0x003a)
      002970 36 08            [10] 8491 	ld	(hl), #0x08
                                   8492 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      002972 21r46r00         [10] 8493 	ld	hl, #(_playfield + 0x0046)
      002975 36 0C            [10] 8494 	ld	(hl), #0x0c
                                   8495 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      002977 21r0Br00         [10] 8496 	ld	hl, #(_playfield + 0x000b)
      00297A 36 04            [10] 8497 	ld	(hl), #0x04
                                   8498 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      00297C 21r17r00         [10] 8499 	ld	hl, #(_playfield + 0x0017)
      00297F 36 04            [10] 8500 	ld	(hl), #0x04
                                   8501 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      002981 21r23r00         [10] 8502 	ld	hl, #(_playfield + 0x0023)
      002984 36 08            [10] 8503 	ld	(hl), #0x08
                                   8504 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      002986 21r2Fr00         [10] 8505 	ld	hl, #(_playfield + 0x002f)
      002989 36 00            [10] 8506 	ld	(hl), #0x00
                                   8507 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      00298B 21r3Br00         [10] 8508 	ld	hl, #(_playfield + 0x003b)
      00298E 36 08            [10] 8509 	ld	(hl), #0x08
                                   8510 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      002990 21r47r00         [10] 8511 	ld	hl, #(_playfield + 0x0047)
      002993 36 08            [10] 8512 	ld	(hl), #0x08
                                   8513 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      002995 3E 0C            [ 7] 8514 	ld	a, #0x0c
      002997 32r90r00         [13] 8515 	ld	(#_topPiece), a
                                   8516 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   8517 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      00299A 3E 08            [ 7] 8518 	ld	a,#0x08
      00299C 32r91r00         [13] 8519 	ld	(#_midPiece),a
      00299F 32r92r00         [13] 8520 	ld	(#_bottomPiece), a
                                   8521 ;src\/GameLogic.h:326: }
      0029A2 C9               [10] 8522 	ret
                                   8523 ;src\/GameLogic.h:328: void InitGame() {
                                   8524 ;	---------------------------------
                                   8525 ; Function InitGame
                                   8526 ; ---------------------------------
      0029A3                       8527 _InitGame::
                                   8528 ;src\/GameLogic.h:330: gameOver = FALSE;
      0029A3 21r00r00         [10] 8529 	ld	hl, #_gameOver
      0029A6 36 00            [10] 8530 	ld	(hl), #0x00
                                   8531 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      0029A8 21r02r00         [10] 8532 	ld	hl, #_line
      0029AB 36 00            [10] 8533 	ld	(hl), #0x00
                                   8534 ;src\/GameLogic.h:332: col = INITIAL_COL;
      0029AD 21r01r00         [10] 8535 	ld	hl, #_col
      0029B0 36 02            [10] 8536 	ld	(hl), #0x02
                                   8537 ;src\/GameLogic.h:334: blocksRemoved = 0;
      0029B2 21 00 00         [10] 8538 	ld	hl, #0x0000
      0029B5 22r04r00         [16] 8539 	ld	(_blocksRemoved), hl
                                   8540 ;src\/GameLogic.h:335: level = 1;
      0029B8 21r06r00         [10] 8541 	ld	hl, #_level
      0029BB 36 01            [10] 8542 	ld	(hl), #0x01
                                   8543 ;src\/GameLogic.h:336: newLevel = FALSE;
      0029BD 21r07r00         [10] 8544 	ld	hl, #_newLevel
      0029C0 36 00            [10] 8545 	ld	(hl), #0x00
                                   8546 ;src\/GameLogic.h:337: speed = 60;
      0029C2 21r96r00         [10] 8547 	ld	hl, #_speed
      0029C5 36 3C            [10] 8548 	ld	(hl), #0x3c
                                   8549 ;src\/GameLogic.h:339: InitVRAM();
      0029C7 CDrD5r18         [17] 8550 	call	_InitVRAM
                                   8551 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      0029CA 3Ar08r00         [13] 8552 	ld	a, (#_rndSeed + 0)
      0029CD 5F               [ 4] 8553 	ld	e, a
      0029CE 3A 9E FC         [13] 8554 	ld	a, (#_JIFFY + 0)
      0029D1 67               [ 4] 8555 	ld	h, a
      0029D2 2E 00            [ 7] 8556 	ld	l, #0x00
      0029D4 55               [ 4] 8557 	ld	d, l
      0029D5 06 08            [ 7] 8558 	ld	b, #0x08
      0029D7                       8559 00133$:
      0029D7 29               [11] 8560 	add	hl, hl
      0029D8 30 01            [12] 8561 	jr	NC, 00134$
      0029DA 19               [11] 8562 	add	hl, de
      0029DB                       8563 00134$:
      0029DB 10 FA            [13] 8564 	djnz	00133$
      0029DD 7D               [ 4] 8565 	ld	a, l
      0029DE C6 63            [ 7] 8566 	add	a, #0x63
      0029E0 4F               [ 4] 8567 	ld	c, a
      0029E1 3Ar08r00         [13] 8568 	ld	a, (#_rndSeed + 0)
      0029E4 5F               [ 4] 8569 	ld	e, a
      0029E5 3A 9E FC         [13] 8570 	ld	a, (#_JIFFY + 0)
      0029E8 67               [ 4] 8571 	ld	h, a
      0029E9 2E 00            [ 7] 8572 	ld	l, #0x00
      0029EB 55               [ 4] 8573 	ld	d, l
      0029EC 06 08            [ 7] 8574 	ld	b, #0x08
      0029EE                       8575 00135$:
      0029EE 29               [11] 8576 	add	hl, hl
      0029EF 30 01            [12] 8577 	jr	NC, 00136$
      0029F1 19               [11] 8578 	add	hl, de
      0029F2                       8579 00136$:
      0029F2 10 FA            [13] 8580 	djnz	00135$
      0029F4 79               [ 4] 8581 	ld	a, c
      0029F5 F5               [11] 8582 	push	af
      0029F6 7D               [ 4] 8583 	ld	a, l
      0029F7 33               [ 6] 8584 	inc	sp
      0029F8 F5               [11] 8585 	push	af
      0029F9 33               [ 6] 8586 	inc	sp
      0029FA 3Ar08r00         [13] 8587 	ld	a,(#_rndSeed + 0)
      0029FD F5               [11] 8588 	push	af
      0029FE 33               [ 6] 8589 	inc	sp
      0029FF CDr50r00         [17] 8590 	call	_InitRnd
      002A02 F1               [10] 8591 	pop	af
      002A03 33               [ 6] 8592 	inc	sp
                                   8593 ;src\/GameLogic.h:345: RandomPiece();
      002A04 CDr45r24         [17] 8594 	call	_RandomPiece
                                   8595 ;src\/GameLogic.h:346: RandomPiece();
      002A07 CDr45r24         [17] 8596 	call	_RandomPiece
                                   8597 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002A0A 0E 00            [ 7] 8598 	ld	c, #0x00
      002A0C                       8599 00107$:
      002A0C 79               [ 4] 8600 	ld	a, c
      002A0D D6 0C            [ 7] 8601 	sub	a, #0x0c
      002A0F 30 20            [12] 8602 	jr	NC, 00102$
                                   8603 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002A11 06 00            [ 7] 8604 	ld	b, #0x00
      002A13                       8605 00104$:
      002A13 78               [ 4] 8606 	ld	a, b
      002A14 D6 06            [ 7] 8607 	sub	a, #0x06
      002A16 30 16            [12] 8608 	jr	NC, 00108$
                                   8609 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      002A18 58               [ 4] 8610 	ld	e, b
      002A19 16 00            [ 7] 8611 	ld	d, #0x00
      002A1B 6B               [ 4] 8612 	ld	l, e
      002A1C 62               [ 4] 8613 	ld	h, d
      002A1D 29               [11] 8614 	add	hl, hl
      002A1E 19               [11] 8615 	add	hl, de
      002A1F 29               [11] 8616 	add	hl, hl
      002A20 29               [11] 8617 	add	hl, hl
      002A21 11r00r00         [10] 8618 	ld	de, #_playfield
      002A24 19               [11] 8619 	add	hl, de
      002A25 59               [ 4] 8620 	ld	e, c
      002A26 16 00            [ 7] 8621 	ld	d, #0x00
      002A28 19               [11] 8622 	add	hl, de
      002A29 36 00            [10] 8623 	ld	(hl), #0x00
                                   8624 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002A2B 04               [ 4] 8625 	inc	b
      002A2C 18 E5            [12] 8626 	jr	00104$
      002A2E                       8627 00108$:
                                   8628 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002A2E 0C               [ 4] 8629 	inc	c
      002A2F 18 DB            [12] 8630 	jr	00107$
      002A31                       8631 00102$:
                                   8632 ;src\/GameLogic.h:356: TestCase();
      002A31 CDr54r29         [17] 8633 	call	_TestCase
                                   8634 ;src\/GameLogic.h:360: DrawBackground();
      002A34 CDrA6r18         [17] 8635 	call	_DrawBackground
                                   8636 ;src\/GameLogic.h:362: DrawPlayfield();
      002A37 CDr4Fr1C         [17] 8637 	call	_DrawPlayfield
                                   8638 ;src\/GameLogic.h:364: DrawScore();
      002A3A CDrFEr16         [17] 8639 	call	_DrawScore
                                   8640 ;src\/GameLogic.h:366: ShowCountdown();
      002A3D CDr10r11         [17] 8641 	call	_ShowCountdown
                                   8642 ;src\/GameLogic.h:368: DrawNextPiece();
      002A40 CDrA4r15         [17] 8643 	call	_DrawNextPiece
                                   8644 ;src\/GameLogic.h:370: GameLoop();
                                   8645 ;src\/GameLogic.h:371: }
      002A43 C3r7Ar25         [10] 8646 	jp	_GameLoop
                                   8647 ;src\/Intro.h:3: void ChangeFontColor(byte color) {
                                   8648 ;	---------------------------------
                                   8649 ; Function ChangeFontColor
                                   8650 ; ---------------------------------
      002A46                       8651 _ChangeFontColor::
                                   8652 ;src\/Intro.h:4: FILVRM(CLRTBL + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002A46 21 02 00         [10] 8653 	ld	hl, #2
      002A49 39               [11] 8654 	add	hl, sp
      002A4A 7E               [ 7] 8655 	ld	a, (hl)
      002A4B F5               [11] 8656 	push	af
      002A4C 33               [ 6] 8657 	inc	sp
      002A4D 21 00 03         [10] 8658 	ld	hl, #0x0300
      002A50 E5               [11] 8659 	push	hl
      002A51 21 78 21         [10] 8660 	ld	hl, #0x2178
      002A54 E5               [11] 8661 	push	hl
      002A55 CDr00r00         [17] 8662 	call	_FILVRM
      002A58 F1               [10] 8663 	pop	af
      002A59 F1               [10] 8664 	pop	af
      002A5A 33               [ 6] 8665 	inc	sp
                                   8666 ;src\/Intro.h:5: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002A5B 21 02 00         [10] 8667 	ld	hl, #2
      002A5E 39               [11] 8668 	add	hl, sp
      002A5F 7E               [ 7] 8669 	ld	a, (hl)
      002A60 F5               [11] 8670 	push	af
      002A61 33               [ 6] 8671 	inc	sp
      002A62 21 00 03         [10] 8672 	ld	hl, #0x0300
      002A65 E5               [11] 8673 	push	hl
      002A66 21 78 29         [10] 8674 	ld	hl, #0x2978
      002A69 E5               [11] 8675 	push	hl
      002A6A CDr00r00         [17] 8676 	call	_FILVRM
      002A6D F1               [10] 8677 	pop	af
      002A6E F1               [10] 8678 	pop	af
      002A6F 33               [ 6] 8679 	inc	sp
                                   8680 ;src\/Intro.h:6: FILVRM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002A70 21 02 00         [10] 8681 	ld	hl, #2
      002A73 39               [11] 8682 	add	hl, sp
      002A74 7E               [ 7] 8683 	ld	a, (hl)
      002A75 F5               [11] 8684 	push	af
      002A76 33               [ 6] 8685 	inc	sp
      002A77 21 00 03         [10] 8686 	ld	hl, #0x0300
      002A7A E5               [11] 8687 	push	hl
      002A7B 21 78 31         [10] 8688 	ld	hl, #0x3178
      002A7E E5               [11] 8689 	push	hl
      002A7F CDr00r00         [17] 8690 	call	_FILVRM
      002A82 F1               [10] 8691 	pop	af
      002A83 F1               [10] 8692 	pop	af
      002A84 33               [ 6] 8693 	inc	sp
                                   8694 ;src\/Intro.h:7: }
      002A85 C9               [10] 8695 	ret
                                   8696 ;src\/Intro.h:9: void ScrollDownFont() {
                                   8697 ;	---------------------------------
                                   8698 ; Function ScrollDownFont
                                   8699 ; ---------------------------------
      002A86                       8700 _ScrollDownFont::
      002A86 DD E5            [15] 8701 	push	ix
      002A88 DD 21 00 00      [14] 8702 	ld	ix,#0
      002A8C DD 39            [15] 8703 	add	ix,sp
      002A8E F5               [11] 8704 	push	af
                                   8705 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002A8F 11 78 09         [10] 8706 	ld	de, #0x0978
      002A92                       8707 00107$:
      002A92 7B               [ 4] 8708 	ld	a, e
      002A93 D6 78            [ 7] 8709 	sub	a, #0x78
      002A95 7A               [ 4] 8710 	ld	a, d
      002A96 DE 0C            [ 7] 8711 	sbc	a, #0x0c
      002A98 30 44            [12] 8712 	jr	NC, 00109$
                                   8713 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002A9A 33               [ 6] 8714 	inc	sp
      002A9B 33               [ 6] 8715 	inc	sp
      002A9C D5               [11] 8716 	push	de
      002A9D DD 7E FE         [19] 8717 	ld	a, -2 (ix)
      002AA0 C6 07            [ 7] 8718 	add	a, #0x07
      002AA2 4F               [ 4] 8719 	ld	c, a
      002AA3 DD 7E FF         [19] 8720 	ld	a, -1 (ix)
      002AA6 CE 00            [ 7] 8721 	adc	a, #0x00
      002AA8 47               [ 4] 8722 	ld	b, a
      002AA9                       8723 00104$:
      002AA9 78               [ 4] 8724 	ld	a, b
      002AAA B1               [ 4] 8725 	or	a, c
      002AAB 28 1A            [12] 8726 	jr	Z, 00101$
                                   8727 ;src\/Intro.h:27: value = RDVRM(j-1);
      002AAD 69               [ 4] 8728 	ld	l, c
      002AAE 60               [ 4] 8729 	ld	h, b
      002AAF 2B               [ 6] 8730 	dec	hl
      002AB0 C5               [11] 8731 	push	bc
      002AB1 D5               [11] 8732 	push	de
      002AB2 CDr00r00         [17] 8733 	call	_RDVRM
      002AB5 D1               [10] 8734 	pop	de
      002AB6 C1               [10] 8735 	pop	bc
                                   8736 ;src\/Intro.h:29: WRTVRM(j, 0);
      002AB7 C5               [11] 8737 	push	bc
      002AB8 D5               [11] 8738 	push	de
      002AB9 AF               [ 4] 8739 	xor	a, a
      002ABA F5               [11] 8740 	push	af
      002ABB 33               [ 6] 8741 	inc	sp
      002ABC C5               [11] 8742 	push	bc
      002ABD CDr00r00         [17] 8743 	call	_WRTVRM
      002AC0 F1               [10] 8744 	pop	af
      002AC1 33               [ 6] 8745 	inc	sp
      002AC2 D1               [10] 8746 	pop	de
      002AC3 C1               [10] 8747 	pop	bc
                                   8748 ;src\/Intro.h:26: for(word j=i+7; j>0; j--) {
      002AC4 0B               [ 6] 8749 	dec	bc
      002AC5 18 E2            [12] 8750 	jr	00104$
      002AC7                       8751 00101$:
                                   8752 ;src\/Intro.h:31: WRTVRM(i, 0);
      002AC7 AF               [ 4] 8753 	xor	a, a
      002AC8 F5               [11] 8754 	push	af
      002AC9 33               [ 6] 8755 	inc	sp
      002ACA D5               [11] 8756 	push	de
      002ACB CDr00r00         [17] 8757 	call	_WRTVRM
      002ACE F1               [10] 8758 	pop	af
      002ACF 33               [ 6] 8759 	inc	sp
                                   8760 ;src\/Intro.h:25: for(word i=startVRAMAddr; i < (startVRAMAddr + size); i+=8) {
      002AD0 DD 7E FE         [19] 8761 	ld	a, -2 (ix)
      002AD3 C6 08            [ 7] 8762 	add	a, #0x08
      002AD5 5F               [ 4] 8763 	ld	e, a
      002AD6 DD 7E FF         [19] 8764 	ld	a, -1 (ix)
      002AD9 CE 00            [ 7] 8765 	adc	a, #0x00
      002ADB 57               [ 4] 8766 	ld	d, a
      002ADC 18 B4            [12] 8767 	jr	00107$
      002ADE                       8768 00109$:
                                   8769 ;src\/Intro.h:35: }
      002ADE DD F9            [10] 8770 	ld	sp, ix
      002AE0 DD E1            [14] 8771 	pop	ix
      002AE2 C9               [10] 8772 	ret
                                   8773 ;src\/Intro.h:37: void Intro() {
                                   8774 ;	---------------------------------
                                   8775 ; Function Intro
                                   8776 ; ---------------------------------
      002AE3                       8777 _Intro::
                                   8778 ;src\/Intro.h:41: InitVRAM();
      002AE3 CDrD5r18         [17] 8779 	call	_InitVRAM
                                   8780 ;src\/Intro.h:43: DrawString("A GAME BY", 11, 11);
      002AE6 11 0B 0B         [10] 8781 	ld	de, #0x0b0b
      002AE9 D5               [11] 8782 	push	de
      002AEA 21r58r2B         [10] 8783 	ld	hl, #___str_8
      002AED E5               [11] 8784 	push	hl
      002AEE CDrBBr12         [17] 8785 	call	_DrawString
      002AF1 F1               [10] 8786 	pop	af
      002AF2 F1               [10] 8787 	pop	af
                                   8788 ;src\/Intro.h:44: DrawString("ANDRE BAPTISTA", 9, 13);
      002AF3 11 09 0D         [10] 8789 	ld	de, #0x0d09
      002AF6 D5               [11] 8790 	push	de
      002AF7 21r62r2B         [10] 8791 	ld	hl, #___str_9
      002AFA E5               [11] 8792 	push	hl
      002AFB CDrBBr12         [17] 8793 	call	_DrawString
      002AFE F1               [10] 8794 	pop	af
                                   8795 ;src\/Intro.h:51: ChangeFontColor(0xf0);
      002AFF 26 F0            [ 7] 8796 	ld	h,#0xf0
      002B01 E3               [19] 8797 	ex	(sp),hl
      002B02 33               [ 6] 8798 	inc	sp
      002B03 CDr46r2A         [17] 8799 	call	_ChangeFontColor
      002B06 33               [ 6] 8800 	inc	sp
                                   8801 ;src\/Intro.h:56: Wait(2 * 60);
      002B07 21 78 00         [10] 8802 	ld	hl, #0x0078
      002B0A E5               [11] 8803 	push	hl
      002B0B CDr00r00         [17] 8804 	call	_Wait
      002B0E F1               [10] 8805 	pop	af
                                   8806 ;src\/Intro.h:58: while(counter++ < 20) {
      002B0F 0E 00            [ 7] 8807 	ld	c, #0x00
      002B11                       8808 00112$:
      002B11 79               [ 4] 8809 	ld	a, c
      002B12 D6 14            [ 7] 8810 	sub	a, #0x14
      002B14 D0               [11] 8811 	ret	NC
      002B15 0C               [ 4] 8812 	inc	c
                                   8813 ;src\/Intro.h:59: byte lastJiffy = JIFFY;
      002B16 21 9E FC         [10] 8814 	ld	hl, #_JIFFY
      002B19 46               [ 7] 8815 	ld	b, (hl)
                                   8816 ;src\/Intro.h:60: while (JIFFY == lastJiffy) {
      002B1A                       8817 00101$:
      002B1A 58               [ 4] 8818 	ld	e, b
      002B1B 16 00            [ 7] 8819 	ld	d, #0x00
      002B1D 2A 9E FC         [16] 8820 	ld	hl, (_JIFFY)
      002B20 BF               [ 4] 8821 	cp	a, a
      002B21 ED 52            [15] 8822 	sbc	hl, de
      002B23 28 F5            [12] 8823 	jr	Z, 00101$
                                   8824 ;src\/Intro.h:63: if(counter == 15) {
      002B25 79               [ 4] 8825 	ld	a, c
      002B26 D6 0F            [ 7] 8826 	sub	a, #0x0f
      002B28 20 0C            [12] 8827 	jr	NZ, 00110$
                                   8828 ;src\/Intro.h:64: ChangeFontColor(0x40);
      002B2A C5               [11] 8829 	push	bc
      002B2B 3E 40            [ 7] 8830 	ld	a, #0x40
      002B2D F5               [11] 8831 	push	af
      002B2E 33               [ 6] 8832 	inc	sp
      002B2F CDr46r2A         [17] 8833 	call	_ChangeFontColor
      002B32 33               [ 6] 8834 	inc	sp
      002B33 C1               [10] 8835 	pop	bc
      002B34 18 DB            [12] 8836 	jr	00112$
      002B36                       8837 00110$:
                                   8838 ;src\/Intro.h:66: else if(counter == 10) {
      002B36 79               [ 4] 8839 	ld	a, c
      002B37 D6 0A            [ 7] 8840 	sub	a, #0x0a
      002B39 20 0C            [12] 8841 	jr	NZ, 00107$
                                   8842 ;src\/Intro.h:67: ChangeFontColor(0x50);
      002B3B C5               [11] 8843 	push	bc
      002B3C 3E 50            [ 7] 8844 	ld	a, #0x50
      002B3E F5               [11] 8845 	push	af
      002B3F 33               [ 6] 8846 	inc	sp
      002B40 CDr46r2A         [17] 8847 	call	_ChangeFontColor
      002B43 33               [ 6] 8848 	inc	sp
      002B44 C1               [10] 8849 	pop	bc
      002B45 18 CA            [12] 8850 	jr	00112$
      002B47                       8851 00107$:
                                   8852 ;src\/Intro.h:69: else if(counter == 5) {
      002B47 79               [ 4] 8853 	ld	a, c
      002B48 D6 05            [ 7] 8854 	sub	a, #0x05
      002B4A 20 C5            [12] 8855 	jr	NZ, 00112$
                                   8856 ;src\/Intro.h:71: ChangeFontColor(0xe0);
      002B4C C5               [11] 8857 	push	bc
      002B4D 3E E0            [ 7] 8858 	ld	a, #0xe0
      002B4F F5               [11] 8859 	push	af
      002B50 33               [ 6] 8860 	inc	sp
      002B51 CDr46r2A         [17] 8861 	call	_ChangeFontColor
      002B54 33               [ 6] 8862 	inc	sp
      002B55 C1               [10] 8863 	pop	bc
                                   8864 ;src\/Intro.h:140: }
      002B56 18 B9            [12] 8865 	jr	00112$
      002B58                       8866 ___str_8:
      002B58 41 20 47 41 4D 45 20  8867 	.ascii "A GAME BY"
             42 59
      002B61 00                    8868 	.db 0x00
      002B62                       8869 ___str_9:
      002B62 41 4E 44 52 45 20 42  8870 	.ascii "ANDRE BAPTISTA"
             41 50 54 49 53 54 41
      002B70 00                    8871 	.db 0x00
                                   8872 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   8873 ;	---------------------------------
                                   8874 ; Function SetBlock
                                   8875 ; ---------------------------------
      002B71                       8876 _SetBlock::
      002B71 DD E5            [15] 8877 	push	ix
      002B73 DD 21 00 00      [14] 8878 	ld	ix,#0
      002B77 DD 39            [15] 8879 	add	ix,sp
                                   8880 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002B79 DD 7E 04         [19] 8881 	ld	a, 4 (ix)
      002B7C 06 00            [ 7] 8882 	ld	b, #0x00
      002B7E 4F               [ 4] 8883 	ld	c, a
      002B7F 78               [ 4] 8884 	ld	a, b
      002B80 C6 18            [ 7] 8885 	add	a, #0x18
      002B82 47               [ 4] 8886 	ld	b, a
      002B83 DD 6E 05         [19] 8887 	ld	l, 5 (ix)
      002B86 26 00            [ 7] 8888 	ld	h, #0x00
      002B88 29               [11] 8889 	add	hl, hl
      002B89 29               [11] 8890 	add	hl, hl
      002B8A 29               [11] 8891 	add	hl, hl
      002B8B 29               [11] 8892 	add	hl, hl
      002B8C 29               [11] 8893 	add	hl, hl
      002B8D 09               [11] 8894 	add	hl, bc
      002B8E DD 7E 06         [19] 8895 	ld	a, 6 (ix)
      002B91 F5               [11] 8896 	push	af
      002B92 33               [ 6] 8897 	inc	sp
      002B93 E5               [11] 8898 	push	hl
      002B94 CDr00r00         [17] 8899 	call	_WRTVRM
      002B97 F1               [10] 8900 	pop	af
      002B98 33               [ 6] 8901 	inc	sp
                                   8902 ;src\/Title.h:16: }
      002B99 DD E1            [14] 8903 	pop	ix
      002B9B C9               [10] 8904 	ret
                                   8905 ;src\/Title.h:18: void TitleScreen() {
                                   8906 ;	---------------------------------
                                   8907 ; Function TitleScreen
                                   8908 ; ---------------------------------
      002B9C                       8909 _TitleScreen::
      002B9C DD E5            [15] 8910 	push	ix
      002B9E DD 21 00 00      [14] 8911 	ld	ix,#0
      002BA2 DD 39            [15] 8912 	add	ix,sp
      002BA4 21 EB FF         [10] 8913 	ld	hl, #-21
      002BA7 39               [11] 8914 	add	hl, sp
      002BA8 F9               [ 6] 8915 	ld	sp, hl
                                   8916 ;src\/Title.h:19: byte colorIndex = 0;
      002BA9 0E 00            [ 7] 8917 	ld	c, #0x00
                                   8918 ;src\/Title.h:52: const char blocks[] = {
      002BAB 21 00 00         [10] 8919 	ld	hl, #0
      002BAE 39               [11] 8920 	add	hl, sp
      002BAF EB               [ 4] 8921 	ex	de, hl
      002BB0 3E 8E            [ 7] 8922 	ld	a, #0x8e
      002BB2 12               [ 7] 8923 	ld	(de), a
      002BB3 6B               [ 4] 8924 	ld	l, e
      002BB4 62               [ 4] 8925 	ld	h, d
      002BB5 23               [ 6] 8926 	inc	hl
      002BB6 36 8F            [10] 8927 	ld	(hl), #0x8f
      002BB8 6B               [ 4] 8928 	ld	l, e
      002BB9 62               [ 4] 8929 	ld	h, d
      002BBA 23               [ 6] 8930 	inc	hl
      002BBB 23               [ 6] 8931 	inc	hl
      002BBC 36 90            [10] 8932 	ld	(hl), #0x90
      002BBE 6B               [ 4] 8933 	ld	l, e
      002BBF 62               [ 4] 8934 	ld	h, d
      002BC0 23               [ 6] 8935 	inc	hl
      002BC1 23               [ 6] 8936 	inc	hl
      002BC2 23               [ 6] 8937 	inc	hl
      002BC3 36 91            [10] 8938 	ld	(hl), #0x91
      002BC5 21 04 00         [10] 8939 	ld	hl, #0x0004
      002BC8 19               [11] 8940 	add	hl, de
      002BC9 36 92            [10] 8941 	ld	(hl), #0x92
      002BCB 21 05 00         [10] 8942 	ld	hl, #0x0005
      002BCE 19               [11] 8943 	add	hl, de
      002BCF 36 93            [10] 8944 	ld	(hl), #0x93
      002BD1 21 06 00         [10] 8945 	ld	hl, #0x0006
      002BD4 19               [11] 8946 	add	hl, de
      002BD5 36 94            [10] 8947 	ld	(hl), #0x94
                                   8948 ;src\/Title.h:62: const char colors[] = { A, C, E, G }; // last item will be ignored
      002BD7 21 07 00         [10] 8949 	ld	hl, #7
      002BDA 39               [11] 8950 	add	hl, sp
      002BDB DD 75 F6         [19] 8951 	ld	-10 (ix), l
      002BDE DD 74 F7         [19] 8952 	ld	-9 (ix), h
      002BE1 36 8E            [10] 8953 	ld	(hl), #0x8e
      002BE3 DD 6E F6         [19] 8954 	ld	l, -10 (ix)
      002BE6 DD 66 F7         [19] 8955 	ld	h, -9 (ix)
      002BE9 23               [ 6] 8956 	inc	hl
      002BEA 36 90            [10] 8957 	ld	(hl), #0x90
      002BEC DD 6E F6         [19] 8958 	ld	l, -10 (ix)
      002BEF DD 66 F7         [19] 8959 	ld	h, -9 (ix)
      002BF2 23               [ 6] 8960 	inc	hl
      002BF3 23               [ 6] 8961 	inc	hl
      002BF4 36 92            [10] 8962 	ld	(hl), #0x92
      002BF6 DD 6E F6         [19] 8963 	ld	l, -10 (ix)
      002BF9 DD 66 F7         [19] 8964 	ld	h, -9 (ix)
      002BFC 23               [ 6] 8965 	inc	hl
      002BFD 23               [ 6] 8966 	inc	hl
      002BFE 23               [ 6] 8967 	inc	hl
      002BFF 36 94            [10] 8968 	ld	(hl), #0x94
                                   8969 ;src\/Title.h:65: InitVRAM();
      002C01 C5               [11] 8970 	push	bc
      002C02 D5               [11] 8971 	push	de
      002C03 CDrD5r18         [17] 8972 	call	_InitVRAM
      002C06 21 00 01         [10] 8973 	ld	hl, #0x0100
      002C09 E5               [11] 8974 	push	hl
      002C0A 21r83r2D         [10] 8975 	ld	hl, #_TitleScreen_title_65536_292
      002C0D E5               [11] 8976 	push	hl
      002C0E 21 00 18         [10] 8977 	ld	hl, #0x1800
      002C11 E5               [11] 8978 	push	hl
      002C12 CDr00r00         [17] 8979 	call	_LDIRVM
      002C15 21 06 00         [10] 8980 	ld	hl, #6
      002C18 39               [11] 8981 	add	hl, sp
      002C19 F9               [ 6] 8982 	ld	sp, hl
      002C1A 11 05 0D         [10] 8983 	ld	de, #0x0d05
      002C1D D5               [11] 8984 	push	de
      002C1E 21r83r2E         [10] 8985 	ld	hl, #___str_10
      002C21 E5               [11] 8986 	push	hl
      002C22 CDrBBr12         [17] 8987 	call	_DrawString
      002C25 F1               [10] 8988 	pop	af
      002C26 26 17            [ 7] 8989 	ld	h,#0x17
      002C28 E3               [19] 8990 	ex	(sp),hl
      002C29 33               [ 6] 8991 	inc	sp
      002C2A AF               [ 4] 8992 	xor	a, a
      002C2B F5               [11] 8993 	push	af
      002C2C 33               [ 6] 8994 	inc	sp
      002C2D 21r9Ar2E         [10] 8995 	ld	hl, #___str_11
      002C30 E5               [11] 8996 	push	hl
      002C31 CDrBBr12         [17] 8997 	call	_DrawString
      002C34 F1               [10] 8998 	pop	af
      002C35 F1               [10] 8999 	pop	af
      002C36 11 19 17         [10] 9000 	ld	de, #0x1719
      002C39 D5               [11] 9001 	push	de
      002C3A 21rAFr2E         [10] 9002 	ld	hl, #___str_12
      002C3D E5               [11] 9003 	push	hl
      002C3E CDrBBr12         [17] 9004 	call	_DrawString
      002C41 F1               [10] 9005 	pop	af
      002C42 F1               [10] 9006 	pop	af
      002C43 D1               [10] 9007 	pop	de
      002C44 C1               [10] 9008 	pop	bc
                                   9009 ;src\/Title.h:73: while(TRUE) {
      002C45                       9010 00120$:
                                   9011 ;src\/Title.h:74: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      002C45 DD 36 FD 00      [19] 9012 	ld	-3 (ix), #0
                                   9013 ;src\/Title.h:78: word counter = 0;
      002C49 AF               [ 4] 9014 	xor	a, a
      002C4A DD 77 FE         [19] 9015 	ld	-2 (ix), a
      002C4D DD 77 FF         [19] 9016 	ld	-1 (ix), a
                                   9017 ;src\/Title.h:88: do {
      002C50                       9018 00106$:
                                   9019 ;src\/Title.h:95: col_1 = GetRandomInInterval(31, 0b00011111);
      002C50 C5               [11] 9020 	push	bc
      002C51 D5               [11] 9021 	push	de
      002C52 11 1F 1F         [10] 9022 	ld	de, #0x1f1f
      002C55 D5               [11] 9023 	push	de
      002C56 CDrD9r00         [17] 9024 	call	_GetRandomInInterval
      002C59 F1               [10] 9025 	pop	af
                                   9026 ;src\/Title.h:96: line_1 = GetRandomInInterval(7, 0b00000111);
      002C5A DD 75 F8         [19] 9027 	ld	-8 (ix), l
      002C5D 11 07 07         [10] 9028 	ld	de, #0x0707
      002C60 D5               [11] 9029 	push	de
      002C61 CDrD9r00         [17] 9030 	call	_GetRandomInInterval
      002C64 F1               [10] 9031 	pop	af
      002C65 D1               [10] 9032 	pop	de
      002C66 C1               [10] 9033 	pop	bc
      002C67 DD 75 F9         [19] 9034 	ld	-7 (ix), l
                                   9035 ;src\/Title.h:99: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      002C6A DD 6E F8         [19] 9036 	ld	l, -8 (ix)
      002C6D 3E 00            [ 7] 9037 	ld	a, #0x00
      002C6F C6 18            [ 7] 9038 	add	a, #0x18
      002C71 67               [ 4] 9039 	ld	h, a
      002C72 DD 7E F9         [19] 9040 	ld	a, -7 (ix)
      002C75 06 00            [ 7] 9041 	ld	b, #0x00
      002C77 87               [ 4] 9042 	add	a, a
      002C78 CB 10            [ 8] 9043 	rl	b
      002C7A 87               [ 4] 9044 	add	a, a
      002C7B CB 10            [ 8] 9045 	rl	b
      002C7D 87               [ 4] 9046 	add	a, a
      002C7E CB 10            [ 8] 9047 	rl	b
      002C80 87               [ 4] 9048 	add	a, a
      002C81 CB 10            [ 8] 9049 	rl	b
      002C83 87               [ 4] 9050 	add	a, a
      002C84 CB 10            [ 8] 9051 	rl	b
      002C86 85               [ 4] 9052 	add	a, l
      002C87 6F               [ 4] 9053 	ld	l, a
      002C88 78               [ 4] 9054 	ld	a, b
      002C89 8C               [ 4] 9055 	adc	a, h
      002C8A 67               [ 4] 9056 	ld	h, a
      002C8B C5               [11] 9057 	push	bc
      002C8C D5               [11] 9058 	push	de
      002C8D CDr00r00         [17] 9059 	call	_RDVRM
      002C90 D1               [10] 9060 	pop	de
      002C91 C1               [10] 9061 	pop	bc
      002C92 DD 75 FA         [19] 9062 	ld	-6 (ix), l
                                   9063 ;src\/Title.h:102: if(counter++ > 1000) {
      002C95 DD 46 FE         [19] 9064 	ld	b, -2 (ix)
      002C98 DD 6E FF         [19] 9065 	ld	l, -1 (ix)
      002C9B DD 34 FE         [23] 9066 	inc	-2 (ix)
      002C9E 20 03            [12] 9067 	jr	NZ, 00193$
      002CA0 DD 34 FF         [23] 9068 	inc	-1 (ix)
      002CA3                       9069 00193$:
      002CA3 3E E8            [ 7] 9070 	ld	a, #0xe8
      002CA5 B8               [ 4] 9071 	cp	a, b
      002CA6 3E 03            [ 7] 9072 	ld	a, #0x03
      002CA8 9D               [ 4] 9073 	sbc	a, l
      002CA9 30 0F            [12] 9074 	jr	NC, 00107$
                                   9075 ;src\/Title.h:103: colorIndex++;
      002CAB 0C               [ 4] 9076 	inc	c
                                   9077 ;src\/Title.h:104: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      002CAC 79               [ 4] 9078 	ld	a, c
      002CAD D6 03            [ 7] 9079 	sub	a, #0x03
      002CAF 38 02            [12] 9080 	jr	C, 00102$
      002CB1 0E 00            [ 7] 9081 	ld	c, #0x00
      002CB3                       9082 00102$:
                                   9083 ;src\/Title.h:119: counter = 0;
      002CB3 AF               [ 4] 9084 	xor	a, a
      002CB4 DD 77 FE         [19] 9085 	ld	-2 (ix), a
      002CB7 DD 77 FF         [19] 9086 	ld	-1 (ix), a
      002CBA                       9087 00107$:
                                   9088 ;src\/Title.h:122: while (value == EMPTY || value == colors[colorIndex + 1]);
      002CBA DD 7E FA         [19] 9089 	ld	a, -6 (ix)
      002CBD B7               [ 4] 9090 	or	a, a
      002CBE 28 90            [12] 9091 	jr	Z, 00106$
      002CC0 79               [ 4] 9092 	ld	a, c
      002CC1 3C               [ 4] 9093 	inc	a
      002CC2 F5               [11] 9094 	push	af
      002CC3 17               [ 4] 9095 	rla
      002CC4 9F               [ 4] 9096 	sbc	a, a
      002CC5 47               [ 4] 9097 	ld	b, a
      002CC6 F1               [10] 9098 	pop	af
      002CC7 DD 86 F6         [19] 9099 	add	a, -10 (ix)
      002CCA DD 77 FB         [19] 9100 	ld	-5 (ix), a
      002CCD 78               [ 4] 9101 	ld	a, b
      002CCE DD 8E F7         [19] 9102 	adc	a, -9 (ix)
      002CD1 DD 77 FC         [19] 9103 	ld	-4 (ix), a
      002CD4 DD 6E FB         [19] 9104 	ld	l, -5 (ix)
      002CD7 DD 66 FC         [19] 9105 	ld	h, -4 (ix)
      002CDA 46               [ 7] 9106 	ld	b, (hl)
      002CDB DD 7E FA         [19] 9107 	ld	a, -6 (ix)
      002CDE 90               [ 4] 9108 	sub	a, b
      002CDF CAr50r2C         [10] 9109 	jp	Z,00106$
                                   9110 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002CE2 06 00            [ 7] 9111 	ld	b, #0x00
      002CE4                       9112 00123$:
      002CE4 78               [ 4] 9113 	ld	a, b
      002CE5 D6 0A            [ 7] 9114 	sub	a, #0x0a
      002CE7 30 79            [12] 9115 	jr	NC, 00118$
                                   9116 ;src\/Title.h:140: word lastJiffy = JIFFY;
      002CE9 2A 9E FC         [16] 9117 	ld	hl, (_JIFFY)
      002CEC DD 75 FE         [19] 9118 	ld	-2 (ix), l
      002CEF DD 74 FF         [19] 9119 	ld	-1 (ix), h
                                   9120 ;src\/Title.h:141: while (JIFFY == lastJiffy) {
      002CF2                       9121 00109$:
      002CF2 FD 21 9E FC      [14] 9122 	ld	iy, #_JIFFY
      002CF6 FD 7E 00         [19] 9123 	ld	a, 0 (iy)
      002CF9 DD 96 FE         [19] 9124 	sub	a, -2 (ix)
      002CFC 20 08            [12] 9125 	jr	NZ, 00195$
      002CFE FD 7E 01         [19] 9126 	ld	a, 1 (iy)
      002D01 DD 96 FF         [19] 9127 	sub	a, -1 (ix)
      002D04 28 EC            [12] 9128 	jr	Z, 00109$
      002D06                       9129 00195$:
                                   9130 ;src\/Title.h:146: SetBlock(col_1, line_1, blocks[index]);
      002D06 DD 6E FD         [19] 9131 	ld	l, -3 (ix)
      002D09 26 00            [ 7] 9132 	ld	h, #0x00
      002D0B 19               [11] 9133 	add	hl, de
      002D0C 7E               [ 7] 9134 	ld	a, (hl)
      002D0D C5               [11] 9135 	push	bc
      002D0E D5               [11] 9136 	push	de
      002D0F F5               [11] 9137 	push	af
      002D10 33               [ 6] 9138 	inc	sp
      002D11 DD 66 F9         [19] 9139 	ld	h, -7 (ix)
      002D14 DD 6E F8         [19] 9140 	ld	l, -8 (ix)
      002D17 E5               [11] 9141 	push	hl
      002D18 CDr71r2B         [17] 9142 	call	_SetBlock
      002D1B F1               [10] 9143 	pop	af
      002D1C 33               [ 6] 9144 	inc	sp
      002D1D D1               [10] 9145 	pop	de
      002D1E C1               [10] 9146 	pop	bc
                                   9147 ;src\/Title.h:150: if(index++ >= sizeof(blocks)) index = 0;
      002D1F DD 7E FD         [19] 9148 	ld	a, -3 (ix)
      002D22 DD 34 FD         [23] 9149 	inc	-3 (ix)
      002D25 D6 07            [ 7] 9150 	sub	a, #0x07
      002D27 38 04            [12] 9151 	jr	C, 00113$
      002D29 DD 36 FD 00      [19] 9152 	ld	-3 (ix), #0
      002D2D                       9153 00113$:
                                   9154 ;src\/Title.h:163: spaceBar = GTTRIG(TRIG_Spacebar);
      002D2D C5               [11] 9155 	push	bc
      002D2E D5               [11] 9156 	push	de
      002D2F 2E 00            [ 7] 9157 	ld	l, #0x00
      002D31 CDr00r00         [17] 9158 	call	_GTTRIG
                                   9159 ;src\/Title.h:164: btn1 = GTTRIG(TRIG_Joy1_A);
      002D34 DD 75 FF         [19] 9160 	ld	-1 (ix), l
      002D37 2E 01            [ 7] 9161 	ld	l, #0x01
      002D39 CDr00r00         [17] 9162 	call	_GTTRIG
      002D3C D1               [10] 9163 	pop	de
      002D3D C1               [10] 9164 	pop	bc
                                   9165 ;src\/Title.h:165: btn2 = GTTRIG(TRIG_Joy1_B);
      002D3E E5               [11] 9166 	push	hl
      002D3F C5               [11] 9167 	push	bc
      002D40 D5               [11] 9168 	push	de
      002D41 2E 03            [ 7] 9169 	ld	l, #0x03
      002D43 CDr00r00         [17] 9170 	call	_GTTRIG
      002D46 7D               [ 4] 9171 	ld	a, l
      002D47 D1               [10] 9172 	pop	de
      002D48 C1               [10] 9173 	pop	bc
      002D49 E1               [10] 9174 	pop	hl
      002D4A 67               [ 4] 9175 	ld	h, a
                                   9176 ;src\/Title.h:167: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      002D4B DD 7E FF         [19] 9177 	ld	a, -1 (ix)
      002D4E 3C               [ 4] 9178 	inc	a
      002D4F 28 06            [12] 9179 	jr	Z, 00114$
      002D51 2C               [ 4] 9180 	inc	l
      002D52 28 03            [12] 9181 	jr	Z, 00114$
      002D54 24               [ 4] 9182 	inc	h
      002D55 20 08            [12] 9183 	jr	NZ, 00124$
      002D57                       9184 00114$:
                                   9185 ;src\/Title.h:168: rndSeed = JIFFY;
      002D57 3A 9E FC         [13] 9186 	ld	a,(#_JIFFY + 0)
      002D5A 32r08r00         [13] 9187 	ld	(#_rndSeed), a
                                   9188 ;src\/Title.h:169: return;
      002D5D 18 1F            [12] 9189 	jr	00125$
      002D5F                       9190 00124$:
                                   9191 ;src\/Title.h:138: for(byte i=0; i < 10 + 0; i++) {
      002D5F 04               [ 4] 9192 	inc	b
      002D60 18 82            [12] 9193 	jr	00123$
      002D62                       9194 00118$:
                                   9195 ;src\/Title.h:173: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      002D62 DD 6E FB         [19] 9196 	ld	l, -5 (ix)
      002D65 DD 66 FC         [19] 9197 	ld	h, -4 (ix)
      002D68 7E               [ 7] 9198 	ld	a, (hl)
      002D69 C5               [11] 9199 	push	bc
      002D6A D5               [11] 9200 	push	de
      002D6B F5               [11] 9201 	push	af
      002D6C 33               [ 6] 9202 	inc	sp
      002D6D DD 66 F9         [19] 9203 	ld	h, -7 (ix)
      002D70 DD 6E F8         [19] 9204 	ld	l, -8 (ix)
      002D73 E5               [11] 9205 	push	hl
      002D74 CDr71r2B         [17] 9206 	call	_SetBlock
      002D77 F1               [10] 9207 	pop	af
      002D78 33               [ 6] 9208 	inc	sp
      002D79 D1               [10] 9209 	pop	de
      002D7A C1               [10] 9210 	pop	bc
      002D7B C3r45r2C         [10] 9211 	jp	00120$
      002D7E                       9212 00125$:
                                   9213 ;src\/Title.h:176: }
      002D7E DD F9            [10] 9214 	ld	sp, ix
      002D80 DD E1            [14] 9215 	pop	ix
      002D82 C9               [10] 9216 	ret
      002D83                       9217 _TitleScreen_title_65536_292:
      002D83 00                    9218 	.db #0x00	; 0
      002D84 00                    9219 	.db #0x00	; 0
      002D85 00                    9220 	.db #0x00	; 0
      002D86 00                    9221 	.db #0x00	; 0
      002D87 8E                    9222 	.db #0x8e	; 142
      002D88 8E                    9223 	.db #0x8e	; 142
      002D89 8E                    9224 	.db #0x8e	; 142
      002D8A 8E                    9225 	.db #0x8e	; 142
      002D8B 00                    9226 	.db #0x00	; 0
      002D8C 8E                    9227 	.db #0x8e	; 142
      002D8D 8E                    9228 	.db #0x8e	; 142
      002D8E 8E                    9229 	.db #0x8e	; 142
      002D8F 8E                    9230 	.db #0x8e	; 142
      002D90 8E                    9231 	.db #0x8e	; 142
      002D91 8E                    9232 	.db #0x8e	; 142
      002D92 00                    9233 	.db #0x00	; 0
      002D93 00                    9234 	.db #0x00	; 0
      002D94 8E                    9235 	.db #0x8e	; 142
      002D95 8E                    9236 	.db #0x8e	; 142
      002D96 00                    9237 	.db #0x00	; 0
      002D97 00                    9238 	.db #0x00	; 0
      002D98 00                    9239 	.db #0x00	; 0
      002D99 8E                    9240 	.db #0x8e	; 142
      002D9A 8E                    9241 	.db #0x8e	; 142
      002D9B 00                    9242 	.db #0x00	; 0
      002D9C 00                    9243 	.db #0x00	; 0
      002D9D 00                    9244 	.db #0x00	; 0
      002D9E 00                    9245 	.db #0x00	; 0
      002D9F 8E                    9246 	.db #0x8e	; 142
      002DA0 8E                    9247 	.db #0x8e	; 142
      002DA1 8E                    9248 	.db #0x8e	; 142
      002DA2 8E                    9249 	.db #0x8e	; 142
      002DA3 00                    9250 	.db #0x00	; 0
      002DA4 00                    9251 	.db #0x00	; 0
      002DA5 00                    9252 	.db #0x00	; 0
      002DA6 8E                    9253 	.db #0x8e	; 142
      002DA7 8E                    9254 	.db #0x8e	; 142
      002DA8 8E                    9255 	.db #0x8e	; 142
      002DA9 8E                    9256 	.db #0x8e	; 142
      002DAA 8E                    9257 	.db #0x8e	; 142
      002DAB 00                    9258 	.db #0x00	; 0
      002DAC 8E                    9259 	.db #0x8e	; 142
      002DAD 8E                    9260 	.db #0x8e	; 142
      002DAE 00                    9261 	.db #0x00	; 0
      002DAF 00                    9262 	.db #0x00	; 0
      002DB0 00                    9263 	.db #0x00	; 0
      002DB1 8E                    9264 	.db #0x8e	; 142
      002DB2 8E                    9265 	.db #0x8e	; 142
      002DB3 00                    9266 	.db #0x00	; 0
      002DB4 00                    9267 	.db #0x00	; 0
      002DB5 8E                    9268 	.db #0x8e	; 142
      002DB6 8E                    9269 	.db #0x8e	; 142
      002DB7 00                    9270 	.db #0x00	; 0
      002DB8 00                    9271 	.db #0x00	; 0
      002DB9 8E                    9272 	.db #0x8e	; 142
      002DBA 8E                    9273 	.db #0x8e	; 142
      002DBB 00                    9274 	.db #0x00	; 0
      002DBC 00                    9275 	.db #0x00	; 0
      002DBD 00                    9276 	.db #0x00	; 0
      002DBE 8E                    9277 	.db #0x8e	; 142
      002DBF 8E                    9278 	.db #0x8e	; 142
      002DC0 8E                    9279 	.db #0x8e	; 142
      002DC1 8E                    9280 	.db #0x8e	; 142
      002DC2 8E                    9281 	.db #0x8e	; 142
      002DC3 00                    9282 	.db #0x00	; 0
      002DC4 00                    9283 	.db #0x00	; 0
      002DC5 8E                    9284 	.db #0x8e	; 142
      002DC6 8E                    9285 	.db #0x8e	; 142
      002DC7 8E                    9286 	.db #0x8e	; 142
      002DC8 00                    9287 	.db #0x00	; 0
      002DC9 8E                    9288 	.db #0x8e	; 142
      002DCA 8E                    9289 	.db #0x8e	; 142
      002DCB 00                    9290 	.db #0x00	; 0
      002DCC 8E                    9291 	.db #0x8e	; 142
      002DCD 8E                    9292 	.db #0x8e	; 142
      002DCE 00                    9293 	.db #0x00	; 0
      002DCF 00                    9294 	.db #0x00	; 0
      002DD0 00                    9295 	.db #0x00	; 0
      002DD1 8E                    9296 	.db #0x8e	; 142
      002DD2 8E                    9297 	.db #0x8e	; 142
      002DD3 00                    9298 	.db #0x00	; 0
      002DD4 00                    9299 	.db #0x00	; 0
      002DD5 00                    9300 	.db #0x00	; 0
      002DD6 8E                    9301 	.db #0x8e	; 142
      002DD7 8E                    9302 	.db #0x8e	; 142
      002DD8 00                    9303 	.db #0x00	; 0
      002DD9 8E                    9304 	.db #0x8e	; 142
      002DDA 8E                    9305 	.db #0x8e	; 142
      002DDB 00                    9306 	.db #0x00	; 0
      002DDC 00                    9307 	.db #0x00	; 0
      002DDD 8E                    9308 	.db #0x8e	; 142
      002DDE 8E                    9309 	.db #0x8e	; 142
      002DDF 8E                    9310 	.db #0x8e	; 142
      002DE0 00                    9311 	.db #0x00	; 0
      002DE1 8E                    9312 	.db #0x8e	; 142
      002DE2 8E                    9313 	.db #0x8e	; 142
      002DE3 00                    9314 	.db #0x00	; 0
      002DE4 8E                    9315 	.db #0x8e	; 142
      002DE5 8E                    9316 	.db #0x8e	; 142
      002DE6 8E                    9317 	.db #0x8e	; 142
      002DE7 00                    9318 	.db #0x00	; 0
      002DE8 00                    9319 	.db #0x00	; 0
      002DE9 8E                    9320 	.db #0x8e	; 142
      002DEA 8E                    9321 	.db #0x8e	; 142
      002DEB 00                    9322 	.db #0x00	; 0
      002DEC 8E                    9323 	.db #0x8e	; 142
      002DED 8E                    9324 	.db #0x8e	; 142
      002DEE 00                    9325 	.db #0x00	; 0
      002DEF 00                    9326 	.db #0x00	; 0
      002DF0 8E                    9327 	.db #0x8e	; 142
      002DF1 8E                    9328 	.db #0x8e	; 142
      002DF2 00                    9329 	.db #0x00	; 0
      002DF3 00                    9330 	.db #0x00	; 0
      002DF4 00                    9331 	.db #0x00	; 0
      002DF5 00                    9332 	.db #0x00	; 0
      002DF6 00                    9333 	.db #0x00	; 0
      002DF7 8E                    9334 	.db #0x8e	; 142
      002DF8 8E                    9335 	.db #0x8e	; 142
      002DF9 8E                    9336 	.db #0x8e	; 142
      002DFA 00                    9337 	.db #0x00	; 0
      002DFB 00                    9338 	.db #0x00	; 0
      002DFC 8E                    9339 	.db #0x8e	; 142
      002DFD 8E                    9340 	.db #0x8e	; 142
      002DFE 8E                    9341 	.db #0x8e	; 142
      002DFF 00                    9342 	.db #0x00	; 0
      002E00 00                    9343 	.db #0x00	; 0
      002E01 8E                    9344 	.db #0x8e	; 142
      002E02 8E                    9345 	.db #0x8e	; 142
      002E03 00                    9346 	.db #0x00	; 0
      002E04 8E                    9347 	.db #0x8e	; 142
      002E05 8E                    9348 	.db #0x8e	; 142
      002E06 00                    9349 	.db #0x00	; 0
      002E07 00                    9350 	.db #0x00	; 0
      002E08 00                    9351 	.db #0x00	; 0
      002E09 8E                    9352 	.db #0x8e	; 142
      002E0A 8E                    9353 	.db #0x8e	; 142
      002E0B 00                    9354 	.db #0x00	; 0
      002E0C 8E                    9355 	.db #0x8e	; 142
      002E0D 8E                    9356 	.db #0x8e	; 142
      002E0E 8E                    9357 	.db #0x8e	; 142
      002E0F 8E                    9358 	.db #0x8e	; 142
      002E10 8E                    9359 	.db #0x8e	; 142
      002E11 00                    9360 	.db #0x00	; 0
      002E12 00                    9361 	.db #0x00	; 0
      002E13 00                    9362 	.db #0x00	; 0
      002E14 00                    9363 	.db #0x00	; 0
      002E15 00                    9364 	.db #0x00	; 0
      002E16 00                    9365 	.db #0x00	; 0
      002E17 8E                    9366 	.db #0x8e	; 142
      002E18 8E                    9367 	.db #0x8e	; 142
      002E19 00                    9368 	.db #0x00	; 0
      002E1A 00                    9369 	.db #0x00	; 0
      002E1B 00                    9370 	.db #0x00	; 0
      002E1C 8E                    9371 	.db #0x8e	; 142
      002E1D 8E                    9372 	.db #0x8e	; 142
      002E1E 00                    9373 	.db #0x00	; 0
      002E1F 00                    9374 	.db #0x00	; 0
      002E20 00                    9375 	.db #0x00	; 0
      002E21 8E                    9376 	.db #0x8e	; 142
      002E22 8E                    9377 	.db #0x8e	; 142
      002E23 00                    9378 	.db #0x00	; 0
      002E24 8E                    9379 	.db #0x8e	; 142
      002E25 8E                    9380 	.db #0x8e	; 142
      002E26 00                    9381 	.db #0x00	; 0
      002E27 00                    9382 	.db #0x00	; 0
      002E28 00                    9383 	.db #0x00	; 0
      002E29 8E                    9384 	.db #0x8e	; 142
      002E2A 8E                    9385 	.db #0x8e	; 142
      002E2B 00                    9386 	.db #0x00	; 0
      002E2C 8E                    9387 	.db #0x8e	; 142
      002E2D 8E                    9388 	.db #0x8e	; 142
      002E2E 8E                    9389 	.db #0x8e	; 142
      002E2F 8E                    9390 	.db #0x8e	; 142
      002E30 8E                    9391 	.db #0x8e	; 142
      002E31 00                    9392 	.db #0x00	; 0
      002E32 00                    9393 	.db #0x00	; 0
      002E33 00                    9394 	.db #0x00	; 0
      002E34 00                    9395 	.db #0x00	; 0
      002E35 00                    9396 	.db #0x00	; 0
      002E36 00                    9397 	.db #0x00	; 0
      002E37 8E                    9398 	.db #0x8e	; 142
      002E38 8E                    9399 	.db #0x8e	; 142
      002E39 00                    9400 	.db #0x00	; 0
      002E3A 00                    9401 	.db #0x00	; 0
      002E3B 00                    9402 	.db #0x00	; 0
      002E3C 8E                    9403 	.db #0x8e	; 142
      002E3D 8E                    9404 	.db #0x8e	; 142
      002E3E 00                    9405 	.db #0x00	; 0
      002E3F 00                    9406 	.db #0x00	; 0
      002E40 00                    9407 	.db #0x00	; 0
      002E41 8E                    9408 	.db #0x8e	; 142
      002E42 8E                    9409 	.db #0x8e	; 142
      002E43 00                    9410 	.db #0x00	; 0
      002E44 8E                    9411 	.db #0x8e	; 142
      002E45 8E                    9412 	.db #0x8e	; 142
      002E46 8E                    9413 	.db #0x8e	; 142
      002E47 8E                    9414 	.db #0x8e	; 142
      002E48 8E                    9415 	.db #0x8e	; 142
      002E49 8E                    9416 	.db #0x8e	; 142
      002E4A 8E                    9417 	.db #0x8e	; 142
      002E4B 00                    9418 	.db #0x00	; 0
      002E4C 8E                    9419 	.db #0x8e	; 142
      002E4D 8E                    9420 	.db #0x8e	; 142
      002E4E 00                    9421 	.db #0x00	; 0
      002E4F 00                    9422 	.db #0x00	; 0
      002E50 00                    9423 	.db #0x00	; 0
      002E51 8E                    9424 	.db #0x8e	; 142
      002E52 00                    9425 	.db #0x00	; 0
      002E53 00                    9426 	.db #0x00	; 0
      002E54 00                    9427 	.db #0x00	; 0
      002E55 00                    9428 	.db #0x00	; 0
      002E56 00                    9429 	.db #0x00	; 0
      002E57 8E                    9430 	.db #0x8e	; 142
      002E58 8E                    9431 	.db #0x8e	; 142
      002E59 00                    9432 	.db #0x00	; 0
      002E5A 00                    9433 	.db #0x00	; 0
      002E5B 00                    9434 	.db #0x00	; 0
      002E5C 8E                    9435 	.db #0x8e	; 142
      002E5D 8E                    9436 	.db #0x8e	; 142
      002E5E 8E                    9437 	.db #0x8e	; 142
      002E5F 8E                    9438 	.db #0x8e	; 142
      002E60 8E                    9439 	.db #0x8e	; 142
      002E61 8E                    9440 	.db #0x8e	; 142
      002E62 8E                    9441 	.db #0x8e	; 142
      002E63 00                    9442 	.db #0x00	; 0
      002E64 8E                    9443 	.db #0x8e	; 142
      002E65 8E                    9444 	.db #0x8e	; 142
      002E66 00                    9445 	.db #0x00	; 0
      002E67 00                    9446 	.db #0x00	; 0
      002E68 00                    9447 	.db #0x00	; 0
      002E69 8E                    9448 	.db #0x8e	; 142
      002E6A 8E                    9449 	.db #0x8e	; 142
      002E6B 00                    9450 	.db #0x00	; 0
      002E6C 8E                    9451 	.db #0x8e	; 142
      002E6D 8E                    9452 	.db #0x8e	; 142
      002E6E 00                    9453 	.db #0x00	; 0
      002E6F 00                    9454 	.db #0x00	; 0
      002E70 00                    9455 	.db #0x00	; 0
      002E71 8E                    9456 	.db #0x8e	; 142
      002E72 00                    9457 	.db #0x00	; 0
      002E73 00                    9458 	.db #0x00	; 0
      002E74 00                    9459 	.db #0x00	; 0
      002E75 00                    9460 	.db #0x00	; 0
      002E76 00                    9461 	.db #0x00	; 0
      002E77 8E                    9462 	.db #0x8e	; 142
      002E78 8E                    9463 	.db #0x8e	; 142
      002E79 00                    9464 	.db #0x00	; 0
      002E7A 00                    9465 	.db #0x00	; 0
      002E7B 00                    9466 	.db #0x00	; 0
      002E7C 8E                    9467 	.db #0x8e	; 142
      002E7D 8E                    9468 	.db #0x8e	; 142
      002E7E 00                    9469 	.db #0x00	; 0
      002E7F 00                    9470 	.db #0x00	; 0
      002E80 00                    9471 	.db #0x00	; 0
      002E81 8E                    9472 	.db #0x8e	; 142
      002E82 8E                    9473 	.db #0x8e	; 142
      002E83                       9474 ___str_10:
      002E83 50 52 45 53 53 20 54  9475 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      002E99 00                    9476 	.db 0x00
      002E9A                       9477 ___str_11:
      002E9A 41 4E 44 52 45 42 41  9478 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      002EAE 00                    9479 	.db 0x00
      002EAF                       9480 ___str_12:
      002EAF 76 2E 3F 2E 3F 2E 3F  9481 	.ascii "v.?.?.?"
      002EB6 00                    9482 	.db 0x00
                                   9483 ;src\main.c:91: void main() {
                                   9484 ;	---------------------------------
                                   9485 ; Function main
                                   9486 ; ---------------------------------
      002EB7                       9487 _main::
                                   9488 ;src\main.c:93: while(TRUE) {
      002EB7                       9489 00102$:
                                   9490 ;src\main.c:99: InitGame();
      002EB7 CDrA3r29         [17] 9491 	call	_InitGame
                                   9492 ;src\main.c:102: }
      002EBA 18 FB            [12] 9493 	jr	00102$
                                   9494 	.area _CODE
                                   9495 	.area _INITIALIZER
      000000                       9496 __xinit__gameOver:
      000000 00                    9497 	.db #0x00	; 0
      000001                       9498 __xinit__col:
      000001 00                    9499 	.db #0x00	; 0
      000002                       9500 __xinit__line:
      000002 00                    9501 	.db #0x00	; 0
      000003                       9502 __xinit__counter:
      000003 00                    9503 	.db #0x00	; 0
      000004                       9504 __xinit__blocksRemoved:
      000004 00 00                 9505 	.dw #0x0000
      000006                       9506 __xinit__level:
      000006 01                    9507 	.db #0x01	; 1
      000007                       9508 __xinit__newLevel:
      000007 00                    9509 	.db #0x00	; 0
      000008                       9510 __xinit__rndSeed:
      000008 00                    9511 	.db #0x00	; 0
                                   9512 	.area _CABS (ABS)
