                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TitleScreen
                                     13 	.globl _SetBlock
                                     14 	.globl _Intro
                                     15 	.globl _FadeOut
                                     16 	.globl _ChangeFontColor
                                     17 	.globl _InitGame
                                     18 	.globl _TestCase
                                     19 	.globl _GameLoop
                                     20 	.globl _Pause
                                     21 	.globl _BlinkPauseText
                                     22 	.globl _UpdateAndDrawPieceStatic
                                     23 	.globl _RandomPiece
                                     24 	.globl _RandomIndex
                                     25 	.globl _CheckPlayfield
                                     26 	.globl _SoundFx_1
                                     27 	.globl _SoundFx_2
                                     28 	.globl _DrawPlayfield
                                     29 	.globl _DrawPiece
                                     30 	.globl _DrawLine
                                     31 	.globl _DrawBlock_SameTile
                                     32 	.globl _DrawBlock
                                     33 	.globl _InitVRAM
                                     34 	.globl _DrawBackground
                                     35 	.globl _DrawScore
                                     36 	.globl _DrawNextPiece
                                     37 	.globl _PosMaskSprites
                                     38 	.globl _GetNextPieceColors
                                     39 	.globl _DrawColumn
                                     40 	.globl _DrawNumber
                                     41 	.globl _DrawString
                                     42 	.globl _DrawChar
                                     43 	.globl _ShowCountdown
                                     44 	.globl _BlinkNumber
                                     45 	.globl _AnimateSprites
                                     46 	.globl _DrawExplosionSprite
                                     47 	.globl _HideExplosionSprite
                                     48 	.globl _HideHitSprite
                                     49 	.globl _DrawHitSprite
                                     50 	.globl _HideArrowSprite
                                     51 	.globl _DrawArrowSprite
                                     52 	.globl _GetRandomInInterval
                                     53 	.globl _GetRandom
                                     54 	.globl _InitRnd
                                     55 	.globl _Power
                                     56 	.globl _Wait
                                     57 	.globl _SNSMAT
                                     58 	.globl _GTTRIG
                                     59 	.globl _GTSTCK
                                     60 	.globl _WRTPSG
                                     61 	.globl _GICINI
                                     62 	.globl _INIGRP
                                     63 	.globl _LDIRVM
                                     64 	.globl _FILVRM
                                     65 	.globl _WRTVRM
                                     66 	.globl _RDVRM
                                     67 	.globl _WRTVDP
                                     68 	.globl _ENASCR
                                     69 	.globl _DISSCR
                                     70 	.globl _rndSeed
                                     71 	.globl _newLevel
                                     72 	.globl _level
                                     73 	.globl _blocksRemoved
                                     74 	.globl _counter
                                     75 	.globl _line
                                     76 	.globl _col
                                     77 	.globl _gameOver
                                     78 	.globl _nextPieceColor_Back
                                     79 	.globl _nextPieceColor_Front
                                     80 	.globl _Rand_x
                                     81 	.globl _Rand_c
                                     82 	.globl _Rand_b
                                     83 	.globl _Rand_a
                                     84 	.globl _speed
                                     85 	.globl _nextBottomPiece
                                     86 	.globl _nextMidPiece
                                     87 	.globl _nextTopPiece
                                     88 	.globl _bottomPiece
                                     89 	.globl _midPiece
                                     90 	.globl _topPiece
                                     91 	.globl _playfieldTemp
                                     92 	.globl _playfield
                                     93 	.globl _GETPNT
                                     94 	.globl _PUTPNT
                                     95 	.globl _REPCNT
                                     96 	.globl _SCNCNT
                                     97 	.globl _ATRBYT
                                     98 	.globl _CMASK
                                     99 	.globl _CLOC
                                    100 	.globl _BDRCLR
                                    101 	.globl _BAKCLR
                                    102 	.globl _FORCLR
                                    103 	.globl _TRGFLG
                                    104 	.globl _STATFL
                                    105 	.globl _MSX_vdp_regs
                                    106 	.globl _CNSDFG
                                    107 	.globl _CSRX
                                    108 	.globl _CSRY
                                    109 	.globl _MSX_modedata_screen3
                                    110 	.globl _MSX_modedata_screen2
                                    111 	.globl _MSX_modedata_screen1
                                    112 	.globl _MSX_modedata_screen0
                                    113 	.globl _CLIKSW
                                    114 	.globl _JIFFY
                                    115 	.globl _CLMLST
                                    116 	.globl _CRTCNT
                                    117 	.globl _LINLEN
                                    118 	.globl _LINL32
                                    119 	.globl _LINL40
                                    120 	.globl _MSX_charset
                                    121 	.globl _colors
                                    122 	.globl _FONT
                                    123 	.globl _pieces
                                    124 	.globl _MSX_version
                                    125 	.globl _MSX_vdp_port_write
                                    126 	.globl _MSX_vdp_port_read
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 ;--------------------------------------------------------
                                    131 ; ram data
                                    132 ;--------------------------------------------------------
                                    133 	.area _DATA
                           000004   134 _MSX_charset	=	0x0004
                           00F3AE   135 _LINL40	=	0xf3ae
                           00F3AF   136 _LINL32	=	0xf3af
                           00F3B0   137 _LINLEN	=	0xf3b0
                           00F3B1   138 _CRTCNT	=	0xf3b1
                           00F3B1   139 _CLMLST	=	0xf3b1
                           00FC9E   140 _JIFFY	=	0xfc9e
                           00F3DB   141 _CLIKSW	=	0xf3db
                           00F3B3   142 _MSX_modedata_screen0	=	0xf3b3
                           00F3BD   143 _MSX_modedata_screen1	=	0xf3bd
                           00F3C7   144 _MSX_modedata_screen2	=	0xf3c7
                           00F3D1   145 _MSX_modedata_screen3	=	0xf3d1
                           00F3DC   146 _CSRY	=	0xf3dc
                           00F3DD   147 _CSRX	=	0xf3dd
                           00F3DE   148 _CNSDFG	=	0xf3de
                           00F3DF   149 _MSX_vdp_regs	=	0xf3df
                           00F3E7   150 _STATFL	=	0xf3e7
                           00F3E8   151 _TRGFLG	=	0xf3e8
                           00F3E9   152 _FORCLR	=	0xf3e9
                           00F3EA   153 _BAKCLR	=	0xf3ea
                           00F3EB   154 _BDRCLR	=	0xf3eb
                           00F92A   155 _CLOC	=	0xf92a
                           00F92C   156 _CMASK	=	0xf92c
                           00F3F2   157 _ATRBYT	=	0xf3f2
                           00F3F6   158 _SCNCNT	=	0xf3f6
                           00F3F7   159 _REPCNT	=	0xf3f7
                           00F3F8   160 _PUTPNT	=	0xf3f8
                           00F3FA   161 _GETPNT	=	0xf3fa
      000000                        162 _playfield::
      000000                        163 	.ds 72
      000048                        164 _playfieldTemp::
      000048                        165 	.ds 72
      000090                        166 _topPiece::
      000090                        167 	.ds 1
      000091                        168 _midPiece::
      000091                        169 	.ds 1
      000092                        170 _bottomPiece::
      000092                        171 	.ds 1
      000093                        172 _nextTopPiece::
      000093                        173 	.ds 1
      000094                        174 _nextMidPiece::
      000094                        175 	.ds 1
      000095                        176 _nextBottomPiece::
      000095                        177 	.ds 1
      000096                        178 _speed::
      000096                        179 	.ds 1
      000097                        180 _Rand_a::
      000097                        181 	.ds 1
      000098                        182 _Rand_b::
      000098                        183 	.ds 1
      000099                        184 _Rand_c::
      000099                        185 	.ds 1
      00009A                        186 _Rand_x::
      00009A                        187 	.ds 1
      00009B                        188 _nextPieceColor_Front::
      00009B                        189 	.ds 1
      00009C                        190 _nextPieceColor_Back::
      00009C                        191 	.ds 1
                                    192 ;--------------------------------------------------------
                                    193 ; ram data
                                    194 ;--------------------------------------------------------
                                    195 	.area _INITIALIZED
      000000                        196 _gameOver::
      000000                        197 	.ds 1
      000001                        198 _col::
      000001                        199 	.ds 1
      000002                        200 _line::
      000002                        201 	.ds 1
      000003                        202 _counter::
      000003                        203 	.ds 1
      000004                        204 _blocksRemoved::
      000004                        205 	.ds 2
      000006                        206 _level::
      000006                        207 	.ds 1
      000007                        208 _newLevel::
      000007                        209 	.ds 1
      000008                        210 _rndSeed::
      000008                        211 	.ds 1
                                    212 ;--------------------------------------------------------
                                    213 ; absolute external ram data
                                    214 ;--------------------------------------------------------
                                    215 	.area _DABS (ABS)
                                    216 ;--------------------------------------------------------
                                    217 ; global & static initialisations
                                    218 ;--------------------------------------------------------
                                    219 	.area _HOME
                                    220 	.area _GSINIT
                                    221 	.area _GSFINAL
                                    222 	.area _GSINIT
                                    223 ;--------------------------------------------------------
                                    224 ; Home
                                    225 ;--------------------------------------------------------
                                    226 	.area _HOME
                                    227 	.area _HOME
                                    228 ;--------------------------------------------------------
                                    229 ; code
                                    230 ;--------------------------------------------------------
                                    231 	.area _CODE
                                    232 ;src\/Common.h:1: void Wait(word numberOfFrames) {
                                    233 ;	---------------------------------
                                    234 ; Function Wait
                                    235 ; ---------------------------------
      000000                        236 _Wait::
                                    237 ;src\/Common.h:2: do {
      000000 D1               [10]  238 	pop	de
      000001 C1               [10]  239 	pop	bc
      000002 C5               [11]  240 	push	bc
      000003 D5               [11]  241 	push	de
      000004                        242 00104$:
                                    243 ;src\/Common.h:3: word lastJiffy = JIFFY;
      000004 ED 5B 9E FC      [20]  244 	ld	de, (_JIFFY)
                                    245 ;src\/Common.h:4: while (lastJiffy == JIFFY) {
      000008                        246 00101$:
      000008 2A 9E FC         [16]  247 	ld	hl, (_JIFFY)
      00000B BF               [ 4]  248 	cp	a, a
      00000C ED 52            [15]  249 	sbc	hl, de
      00000E 28 F8            [12]  250 	jr	Z, 00101$
                                    251 ;src\/Common.h:7: while (numberOfFrames-- > 0);
      000010 59               [ 4]  252 	ld	e, c
      000011 50               [ 4]  253 	ld	d, b
      000012 0B               [ 6]  254 	dec	bc
      000013 7A               [ 4]  255 	ld	a, d
      000014 B3               [ 4]  256 	or	a, e
      000015 20 ED            [12]  257 	jr	NZ, 00104$
                                    258 ;src\/Common.h:8: }
      000017 C9               [10]  259 	ret
                           000006   260 _MSX_vdp_port_read	=	0x0006
                           000007   261 _MSX_vdp_port_write	=	0x0007
                           00002D   262 _MSX_version	=	0x002d
      000018                        263 _pieces:
      000018 04                     264 	.db #0x04	; 4
      000019 08                     265 	.db #0x08	; 8
      00001A 0C                     266 	.db #0x0c	; 12
      00001B 10                     267 	.db #0x10	; 16
      00001C 14                     268 	.db #0x14	; 20
                                    269 ;src\/Math.h:1: word Power(byte base, byte expoent) {
                                    270 ;	---------------------------------
                                    271 ; Function Power
                                    272 ; ---------------------------------
      00001D                        273 _Power::
      00001D DD E5            [15]  274 	push	ix
      00001F DD 21 00 00      [14]  275 	ld	ix,#0
      000023 DD 39            [15]  276 	add	ix,sp
                                    277 ;src\/Math.h:2: word power = base;
      000025 DD 4E 04         [19]  278 	ld	c, 4 (ix)
      000028 06 00            [ 7]  279 	ld	b, #0x00
      00002A 69               [ 4]  280 	ld	l, c
      00002B 60               [ 4]  281 	ld	h, b
                                    282 ;src\/Math.h:4: if (expoent == 0) return 1;
      00002C DD 7E 05         [19]  283 	ld	a, 5 (ix)
      00002F B7               [ 4]  284 	or	a, a
      000030 20 05            [12]  285 	jr	NZ, 00111$
      000032 21 01 00         [10]  286 	ld	hl, #0x0001
      000035 18 16            [12]  287 	jr	00107$
                                    288 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      000037                        289 00111$:
      000037 1E 01            [ 7]  290 	ld	e, #0x01
      000039                        291 00105$:
      000039 7B               [ 4]  292 	ld	a, e
      00003A DD 96 05         [19]  293 	sub	a, 5 (ix)
      00003D 30 0E            [12]  294 	jr	NC, 00103$
                                    295 ;src\/Math.h:7: power = power * base;
      00003F C5               [11]  296 	push	bc
      000040 D5               [11]  297 	push	de
      000041 C5               [11]  298 	push	bc
      000042 E5               [11]  299 	push	hl
      000043 CDr00r00         [17]  300 	call	__mulint
      000046 F1               [10]  301 	pop	af
      000047 F1               [10]  302 	pop	af
      000048 D1               [10]  303 	pop	de
      000049 C1               [10]  304 	pop	bc
                                    305 ;src\/Math.h:6: for(byte j = 1; j < expoent; j++) {
      00004A 1C               [ 4]  306 	inc	e
      00004B 18 EC            [12]  307 	jr	00105$
      00004D                        308 00103$:
                                    309 ;src\/Math.h:10: return power;
      00004D                        310 00107$:
                                    311 ;src\/Math.h:11: }
      00004D DD E1            [14]  312 	pop	ix
      00004F C9               [10]  313 	ret
                                    314 ;src\/Random.h:28: void InitRnd(char s1, char s2, char s3) {
                                    315 ;	---------------------------------
                                    316 ; Function InitRnd
                                    317 ; ---------------------------------
      000050                        318 _InitRnd::
                                    319 ;src\/Random.h:30: Rand_a ^= s1;
      000050 3Ar97r00         [13]  320 	ld	a,(#_Rand_a + 0)
      000053 21 02 00         [10]  321 	ld	hl, #2
      000056 39               [11]  322 	add	hl, sp
      000057 AE               [ 7]  323 	xor	a, (hl)
      000058 32r97r00         [13]  324 	ld	(_Rand_a+0), a
                                    325 ;src\/Random.h:31: Rand_b ^= s2;
      00005B 3Ar98r00         [13]  326 	ld	a,(#_Rand_b + 0)
      00005E 21 03 00         [10]  327 	ld	hl, #3
      000061 39               [11]  328 	add	hl, sp
      000062 AE               [ 7]  329 	xor	a, (hl)
      000063 32r98r00         [13]  330 	ld	(_Rand_b+0), a
                                    331 ;src\/Random.h:32: Rand_c ^= s3;
      000066 3Ar99r00         [13]  332 	ld	a,(#_Rand_c + 0)
      000069 21 04 00         [10]  333 	ld	hl, #4
      00006C 39               [11]  334 	add	hl, sp
      00006D AE               [ 7]  335 	xor	a, (hl)
      00006E 32r99r00         [13]  336 	ld	(_Rand_c+0), a
                                    337 ;src\/Random.h:34: Rand_x++;
      000071 21r9Ar00         [10]  338 	ld	hl, #_Rand_x
      000074 34               [11]  339 	inc	(hl)
                                    340 ;src\/Random.h:35: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);
      000075 3Ar97r00         [13]  341 	ld	a,(#_Rand_a + 0)
      000078 21r99r00         [10]  342 	ld	hl, #_Rand_c
      00007B AE               [ 7]  343 	xor	a, (hl)
      00007C 21r9Ar00         [10]  344 	ld	hl, #_Rand_x
      00007F AE               [ 7]  345 	xor	a, (hl)
      000080 32r97r00         [13]  346 	ld	(_Rand_a+0), a
                                    347 ;src\/Random.h:36: Rand_b = (Rand_b + Rand_a);
      000083 21r98r00         [10]  348 	ld	hl, #_Rand_b
      000086 7E               [ 7]  349 	ld	a, (hl)
      000087 FD 21r97r00      [14]  350 	ld	iy, #_Rand_a
      00008B FD 86 00         [19]  351 	add	a, 0 (iy)
      00008E 77               [ 7]  352 	ld	(hl), a
                                    353 ;src\/Random.h:37: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);
      00008F 3Ar98r00         [13]  354 	ld	a,(#_Rand_b + 0)
      000092 CB 3F            [ 8]  355 	srl	a
      000094 21r99r00         [10]  356 	ld	hl, #_Rand_c
      000097 86               [ 7]  357 	add	a, (hl)
      000098 FD 21r97r00      [14]  358 	ld	iy, #_Rand_a
      00009C FD AE 00         [19]  359 	xor	a, 0 (iy)
      00009F 32r99r00         [13]  360 	ld	(_Rand_c+0), a
                                    361 ;src\/Random.h:38: }
      0000A2 C9               [10]  362 	ret
                                    363 ;src\/Random.h:40: unsigned char GetRandom() {
                                    364 ;	---------------------------------
                                    365 ; Function GetRandom
                                    366 ; ---------------------------------
      0000A3                        367 _GetRandom::
                                    368 ;src\/Random.h:41: Rand_x++;               			//x is incremented every round and is not affected by any other variable
      0000A3 21r9Ar00         [10]  369 	ld	hl, #_Rand_x
      0000A6 34               [11]  370 	inc	(hl)
                                    371 ;src\/Random.h:42: Rand_a = (Rand_a ^ Rand_c ^ Rand_x);       	//note the mix of addition and XOR
      0000A7 3Ar97r00         [13]  372 	ld	a,(#_Rand_a + 0)
      0000AA 21r99r00         [10]  373 	ld	hl, #_Rand_c
      0000AD AE               [ 7]  374 	xor	a, (hl)
      0000AE 21r9Ar00         [10]  375 	ld	hl, #_Rand_x
      0000B1 AE               [ 7]  376 	xor	a, (hl)
      0000B2 32r97r00         [13]  377 	ld	(_Rand_a+0), a
                                    378 ;src\/Random.h:43: Rand_b = (Rand_b + Rand_a);         		//And the use of very few instructions
      0000B5 21r98r00         [10]  379 	ld	hl, #_Rand_b
      0000B8 7E               [ 7]  380 	ld	a, (hl)
      0000B9 FD 21r97r00      [14]  381 	ld	iy, #_Rand_a
      0000BD FD 86 00         [19]  382 	add	a, 0 (iy)
      0000C0 77               [ 7]  383 	ld	(hl), a
                                    384 ;src\/Random.h:44: Rand_c = (Rand_c + (Rand_b >> 1) ^ Rand_a);  	//the right shift is to ensure that high-order bits from b can affect  
      0000C1 3Ar98r00         [13]  385 	ld	a,(#_Rand_b + 0)
      0000C4 CB 3F            [ 8]  386 	srl	a
      0000C6 21r99r00         [10]  387 	ld	hl, #_Rand_c
      0000C9 86               [ 7]  388 	add	a, (hl)
      0000CA FD 21r97r00      [14]  389 	ld	iy, #_Rand_a
      0000CE FD AE 00         [19]  390 	xor	a, 0 (iy)
      0000D1 32r99r00         [13]  391 	ld	(_Rand_c+0), a
                                    392 ;src\/Random.h:46: return (Rand_c);          //low order bits of other variables
      0000D4 3Ar99r00         [13]  393 	ld	a, (#_Rand_c + 0)
      0000D7 6F               [ 4]  394 	ld	l, a
                                    395 ;src\/Random.h:47: }
      0000D8 C9               [10]  396 	ret
                                    397 ;src\/Random.h:51: byte GetRandomInInterval(byte max, byte mask) {
                                    398 ;	---------------------------------
                                    399 ; Function GetRandomInInterval
                                    400 ; ---------------------------------
      0000D9                        401 _GetRandomInInterval::
                                    402 ;src\/Random.h:53: do {
      0000D9                        403 00101$:
                                    404 ;src\/Random.h:54: random = GetRandom() & mask; // AND mask to get a value in the range passed by mask. E.g. 0b00000011, range 0-3
      0000D9 CDrA3r00         [17]  405 	call	_GetRandom
      0000DC 7D               [ 4]  406 	ld	a, l
      0000DD 21 03 00         [10]  407 	ld	hl, #3
      0000E0 39               [11]  408 	add	hl, sp
      0000E1 A6               [ 7]  409 	and	a, (hl)
      0000E2 4F               [ 4]  410 	ld	c, a
                                    411 ;src\/Random.h:56: while(random > max); // Get a number between 0 and max
      0000E3 21 02 00         [10]  412 	ld	hl, #2
      0000E6 39               [11]  413 	add	hl, sp
      0000E7 7E               [ 7]  414 	ld	a, (hl)
      0000E8 91               [ 4]  415 	sub	a, c
      0000E9 38 EE            [12]  416 	jr	C, 00101$
                                    417 ;src\/Random.h:58: return random;
      0000EB 69               [ 4]  418 	ld	l, c
                                    419 ;src\/Random.h:59: }
      0000EC C9               [10]  420 	ret
                                    421 ;src\/Graphics\SpritesLogic.h:1: void DrawArrowSprite(byte x, byte y) {
                                    422 ;	---------------------------------
                                    423 ; Function DrawArrowSprite
                                    424 ; ---------------------------------
      0000ED                        425 _DrawArrowSprite::
      0000ED DD E5            [15]  426 	push	ix
      0000EF DD 21 00 00      [14]  427 	ld	ix,#0
      0000F3 DD 39            [15]  428 	add	ix,sp
      0000F5 21 F8 FF         [10]  429 	ld	hl, #-8
      0000F8 39               [11]  430 	add	hl, sp
      0000F9 F9               [ 6]  431 	ld	sp, hl
                                    432 ;src\/Graphics\SpritesLogic.h:2: const byte colors[] = {
      0000FA 21 00 00         [10]  433 	ld	hl, #0
      0000FD 39               [11]  434 	add	hl, sp
      0000FE EB               [ 4]  435 	ex	de, hl
      0000FF 3E 0F            [ 7]  436 	ld	a, #0x0f
      000101 12               [ 7]  437 	ld	(de), a
      000102 6B               [ 4]  438 	ld	l, e
      000103 62               [ 4]  439 	ld	h, d
      000104 23               [ 6]  440 	inc	hl
      000105 36 0E            [10]  441 	ld	(hl), #0x0e
      000107 6B               [ 4]  442 	ld	l, e
      000108 62               [ 4]  443 	ld	h, d
      000109 23               [ 6]  444 	inc	hl
      00010A 23               [ 6]  445 	inc	hl
      00010B 36 05            [10]  446 	ld	(hl), #0x05
      00010D 6B               [ 4]  447 	ld	l, e
      00010E 62               [ 4]  448 	ld	h, d
      00010F 23               [ 6]  449 	inc	hl
      000110 23               [ 6]  450 	inc	hl
      000111 23               [ 6]  451 	inc	hl
      000112 36 04            [10]  452 	ld	(hl), #0x04
      000114 21 04 00         [10]  453 	ld	hl, #0x0004
      000117 19               [11]  454 	add	hl, de
      000118 36 04            [10]  455 	ld	(hl), #0x04
      00011A 21 05 00         [10]  456 	ld	hl, #0x0005
      00011D 19               [11]  457 	add	hl, de
      00011E 36 05            [10]  458 	ld	(hl), #0x05
      000120 21 06 00         [10]  459 	ld	hl, #0x0006
      000123 19               [11]  460 	add	hl, de
      000124 36 0E            [10]  461 	ld	(hl), #0x0e
      000126 21 07 00         [10]  462 	ld	hl, #0x0007
      000129 19               [11]  463 	add	hl, de
      00012A 36 0F            [10]  464 	ld	(hl), #0x0f
                                    465 ;src\/Graphics\SpritesLogic.h:13: byte colorIndex = (JIFFY & 0b00001110) >> 1;
      00012C 2A 9E FC         [16]  466 	ld	hl, (_JIFFY)
      00012F 7D               [ 4]  467 	ld	a, l
      000130 E6 0E            [ 7]  468 	and	a, #0x0e
      000132 6F               [ 4]  469 	ld	l, a
      000133 26 00            [ 7]  470 	ld	h, #0x00
      000135 CB 3C            [ 8]  471 	srl	h
      000137 CB 1D            [ 8]  472 	rr	l
                                    473 ;src\/Graphics\SpritesLogic.h:20: WRTVRM(SPRATT, 	y - 1);
      000139 DD 7E 05         [19]  474 	ld	a, 5 (ix)
      00013C 3D               [ 4]  475 	dec	a
      00013D E5               [11]  476 	push	hl
      00013E D5               [11]  477 	push	de
      00013F F5               [11]  478 	push	af
      000140 33               [ 6]  479 	inc	sp
      000141 01 00 1B         [10]  480 	ld	bc, #0x1b00
      000144 C5               [11]  481 	push	bc
      000145 CDr00r00         [17]  482 	call	_WRTVRM
      000148 F1               [10]  483 	pop	af
      000149 33               [ 6]  484 	inc	sp
      00014A DD 7E 04         [19]  485 	ld	a, 4 (ix)
      00014D F5               [11]  486 	push	af
      00014E 33               [ 6]  487 	inc	sp
      00014F 01 01 1B         [10]  488 	ld	bc, #0x1b01
      000152 C5               [11]  489 	push	bc
      000153 CDr00r00         [17]  490 	call	_WRTVRM
      000156 F1               [10]  491 	pop	af
      000157 33               [ 6]  492 	inc	sp
      000158 AF               [ 4]  493 	xor	a, a
      000159 F5               [11]  494 	push	af
      00015A 33               [ 6]  495 	inc	sp
      00015B 01 02 1B         [10]  496 	ld	bc, #0x1b02
      00015E C5               [11]  497 	push	bc
      00015F CDr00r00         [17]  498 	call	_WRTVRM
      000162 F1               [10]  499 	pop	af
      000163 33               [ 6]  500 	inc	sp
      000164 D1               [10]  501 	pop	de
      000165 E1               [10]  502 	pop	hl
                                    503 ;src\/Graphics\SpritesLogic.h:23: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      000166 26 00            [ 7]  504 	ld	h, #0x00
      000168 19               [11]  505 	add	hl, de
      000169 7E               [ 7]  506 	ld	a, (hl)
      00016A F5               [11]  507 	push	af
      00016B 33               [ 6]  508 	inc	sp
      00016C 21 03 1B         [10]  509 	ld	hl, #0x1b03
      00016F E5               [11]  510 	push	hl
      000170 CDr00r00         [17]  511 	call	_WRTVRM
                                    512 ;src\/Graphics\SpritesLogic.h:32: }
      000173 DD F9            [10]  513 	ld	sp,ix
      000175 DD E1            [14]  514 	pop	ix
      000177 C9               [10]  515 	ret
      000178                        516 _FONT:
      000178 00                     517 	.db #0x00	; 0
      000179 00                     518 	.db #0x00	; 0
      00017A 00                     519 	.db #0x00	; 0
      00017B 00                     520 	.db #0x00	; 0
      00017C 00                     521 	.db #0x00	; 0
      00017D 00                     522 	.db #0x00	; 0
      00017E 00                     523 	.db #0x00	; 0
      00017F 00                     524 	.db #0x00	; 0
      000180 30                     525 	.db #0x30	; 48	'0'
      000181 78                     526 	.db #0x78	; 120	'x'
      000182 78                     527 	.db #0x78	; 120	'x'
      000183 30                     528 	.db #0x30	; 48	'0'
      000184 30                     529 	.db #0x30	; 48	'0'
      000185 00                     530 	.db #0x00	; 0
      000186 30                     531 	.db #0x30	; 48	'0'
      000187 00                     532 	.db #0x00	; 0
      000188 6C                     533 	.db #0x6c	; 108	'l'
      000189 6C                     534 	.db #0x6c	; 108	'l'
      00018A 6C                     535 	.db #0x6c	; 108	'l'
      00018B 00                     536 	.db #0x00	; 0
      00018C 00                     537 	.db #0x00	; 0
      00018D 00                     538 	.db #0x00	; 0
      00018E 00                     539 	.db #0x00	; 0
      00018F 00                     540 	.db #0x00	; 0
      000190 6C                     541 	.db #0x6c	; 108	'l'
      000191 6C                     542 	.db #0x6c	; 108	'l'
      000192 FE                     543 	.db #0xfe	; 254
      000193 6C                     544 	.db #0x6c	; 108	'l'
      000194 FE                     545 	.db #0xfe	; 254
      000195 6C                     546 	.db #0x6c	; 108	'l'
      000196 6C                     547 	.db #0x6c	; 108	'l'
      000197 00                     548 	.db #0x00	; 0
      000198 30                     549 	.db #0x30	; 48	'0'
      000199 7C                     550 	.db #0x7c	; 124
      00019A C0                     551 	.db #0xc0	; 192
      00019B 78                     552 	.db #0x78	; 120	'x'
      00019C 0C                     553 	.db #0x0c	; 12
      00019D F8                     554 	.db #0xf8	; 248
      00019E 30                     555 	.db #0x30	; 48	'0'
      00019F 00                     556 	.db #0x00	; 0
      0001A0 00                     557 	.db #0x00	; 0
      0001A1 C6                     558 	.db #0xc6	; 198
      0001A2 CC                     559 	.db #0xcc	; 204
      0001A3 18                     560 	.db #0x18	; 24
      0001A4 30                     561 	.db #0x30	; 48	'0'
      0001A5 66                     562 	.db #0x66	; 102	'f'
      0001A6 C6                     563 	.db #0xc6	; 198
      0001A7 00                     564 	.db #0x00	; 0
      0001A8 38                     565 	.db #0x38	; 56	'8'
      0001A9 6C                     566 	.db #0x6c	; 108	'l'
      0001AA 38                     567 	.db #0x38	; 56	'8'
      0001AB 76                     568 	.db #0x76	; 118	'v'
      0001AC DC                     569 	.db #0xdc	; 220
      0001AD CC                     570 	.db #0xcc	; 204
      0001AE 76                     571 	.db #0x76	; 118	'v'
      0001AF 00                     572 	.db #0x00	; 0
      0001B0 60                     573 	.db #0x60	; 96
      0001B1 60                     574 	.db #0x60	; 96
      0001B2 C0                     575 	.db #0xc0	; 192
      0001B3 00                     576 	.db #0x00	; 0
      0001B4 00                     577 	.db #0x00	; 0
      0001B5 00                     578 	.db #0x00	; 0
      0001B6 00                     579 	.db #0x00	; 0
      0001B7 00                     580 	.db #0x00	; 0
      0001B8 18                     581 	.db #0x18	; 24
      0001B9 30                     582 	.db #0x30	; 48	'0'
      0001BA 60                     583 	.db #0x60	; 96
      0001BB 60                     584 	.db #0x60	; 96
      0001BC 60                     585 	.db #0x60	; 96
      0001BD 30                     586 	.db #0x30	; 48	'0'
      0001BE 18                     587 	.db #0x18	; 24
      0001BF 00                     588 	.db #0x00	; 0
      0001C0 60                     589 	.db #0x60	; 96
      0001C1 30                     590 	.db #0x30	; 48	'0'
      0001C2 18                     591 	.db #0x18	; 24
      0001C3 18                     592 	.db #0x18	; 24
      0001C4 18                     593 	.db #0x18	; 24
      0001C5 30                     594 	.db #0x30	; 48	'0'
      0001C6 60                     595 	.db #0x60	; 96
      0001C7 00                     596 	.db #0x00	; 0
      0001C8 00                     597 	.db #0x00	; 0
      0001C9 66                     598 	.db #0x66	; 102	'f'
      0001CA 3C                     599 	.db #0x3c	; 60
      0001CB FF                     600 	.db #0xff	; 255
      0001CC 3C                     601 	.db #0x3c	; 60
      0001CD 66                     602 	.db #0x66	; 102	'f'
      0001CE 00                     603 	.db #0x00	; 0
      0001CF 00                     604 	.db #0x00	; 0
      0001D0 00                     605 	.db #0x00	; 0
      0001D1 30                     606 	.db #0x30	; 48	'0'
      0001D2 30                     607 	.db #0x30	; 48	'0'
      0001D3 FC                     608 	.db #0xfc	; 252
      0001D4 30                     609 	.db #0x30	; 48	'0'
      0001D5 30                     610 	.db #0x30	; 48	'0'
      0001D6 00                     611 	.db #0x00	; 0
      0001D7 00                     612 	.db #0x00	; 0
      0001D8 00                     613 	.db #0x00	; 0
      0001D9 00                     614 	.db #0x00	; 0
      0001DA 00                     615 	.db #0x00	; 0
      0001DB 00                     616 	.db #0x00	; 0
      0001DC 00                     617 	.db #0x00	; 0
      0001DD 30                     618 	.db #0x30	; 48	'0'
      0001DE 30                     619 	.db #0x30	; 48	'0'
      0001DF 60                     620 	.db #0x60	; 96
      0001E0 00                     621 	.db #0x00	; 0
      0001E1 00                     622 	.db #0x00	; 0
      0001E2 00                     623 	.db #0x00	; 0
      0001E3 FC                     624 	.db #0xfc	; 252
      0001E4 00                     625 	.db #0x00	; 0
      0001E5 00                     626 	.db #0x00	; 0
      0001E6 00                     627 	.db #0x00	; 0
      0001E7 00                     628 	.db #0x00	; 0
      0001E8 00                     629 	.db #0x00	; 0
      0001E9 00                     630 	.db #0x00	; 0
      0001EA 00                     631 	.db #0x00	; 0
      0001EB 00                     632 	.db #0x00	; 0
      0001EC 00                     633 	.db #0x00	; 0
      0001ED 30                     634 	.db #0x30	; 48	'0'
      0001EE 30                     635 	.db #0x30	; 48	'0'
      0001EF 00                     636 	.db #0x00	; 0
      0001F0 06                     637 	.db #0x06	; 6
      0001F1 0C                     638 	.db #0x0c	; 12
      0001F2 18                     639 	.db #0x18	; 24
      0001F3 30                     640 	.db #0x30	; 48	'0'
      0001F4 60                     641 	.db #0x60	; 96
      0001F5 C0                     642 	.db #0xc0	; 192
      0001F6 80                     643 	.db #0x80	; 128
      0001F7 00                     644 	.db #0x00	; 0
      0001F8 7C                     645 	.db #0x7c	; 124
      0001F9 C6                     646 	.db #0xc6	; 198
      0001FA CE                     647 	.db #0xce	; 206
      0001FB DE                     648 	.db #0xde	; 222
      0001FC F6                     649 	.db #0xf6	; 246
      0001FD E6                     650 	.db #0xe6	; 230
      0001FE 7C                     651 	.db #0x7c	; 124
      0001FF 00                     652 	.db #0x00	; 0
      000200 30                     653 	.db #0x30	; 48	'0'
      000201 70                     654 	.db #0x70	; 112	'p'
      000202 30                     655 	.db #0x30	; 48	'0'
      000203 30                     656 	.db #0x30	; 48	'0'
      000204 30                     657 	.db #0x30	; 48	'0'
      000205 30                     658 	.db #0x30	; 48	'0'
      000206 FC                     659 	.db #0xfc	; 252
      000207 00                     660 	.db #0x00	; 0
      000208 78                     661 	.db #0x78	; 120	'x'
      000209 CC                     662 	.db #0xcc	; 204
      00020A 0C                     663 	.db #0x0c	; 12
      00020B 38                     664 	.db #0x38	; 56	'8'
      00020C 60                     665 	.db #0x60	; 96
      00020D C4                     666 	.db #0xc4	; 196
      00020E FC                     667 	.db #0xfc	; 252
      00020F 00                     668 	.db #0x00	; 0
      000210 78                     669 	.db #0x78	; 120	'x'
      000211 CC                     670 	.db #0xcc	; 204
      000212 0C                     671 	.db #0x0c	; 12
      000213 38                     672 	.db #0x38	; 56	'8'
      000214 0C                     673 	.db #0x0c	; 12
      000215 CC                     674 	.db #0xcc	; 204
      000216 78                     675 	.db #0x78	; 120	'x'
      000217 00                     676 	.db #0x00	; 0
      000218 1C                     677 	.db #0x1c	; 28
      000219 3C                     678 	.db #0x3c	; 60
      00021A 6C                     679 	.db #0x6c	; 108	'l'
      00021B CC                     680 	.db #0xcc	; 204
      00021C FE                     681 	.db #0xfe	; 254
      00021D 0C                     682 	.db #0x0c	; 12
      00021E 1E                     683 	.db #0x1e	; 30
      00021F 00                     684 	.db #0x00	; 0
      000220 FC                     685 	.db #0xfc	; 252
      000221 C0                     686 	.db #0xc0	; 192
      000222 F8                     687 	.db #0xf8	; 248
      000223 0C                     688 	.db #0x0c	; 12
      000224 0C                     689 	.db #0x0c	; 12
      000225 CC                     690 	.db #0xcc	; 204
      000226 78                     691 	.db #0x78	; 120	'x'
      000227 00                     692 	.db #0x00	; 0
      000228 38                     693 	.db #0x38	; 56	'8'
      000229 60                     694 	.db #0x60	; 96
      00022A C0                     695 	.db #0xc0	; 192
      00022B F8                     696 	.db #0xf8	; 248
      00022C CC                     697 	.db #0xcc	; 204
      00022D CC                     698 	.db #0xcc	; 204
      00022E 78                     699 	.db #0x78	; 120	'x'
      00022F 00                     700 	.db #0x00	; 0
      000230 FC                     701 	.db #0xfc	; 252
      000231 CC                     702 	.db #0xcc	; 204
      000232 0C                     703 	.db #0x0c	; 12
      000233 18                     704 	.db #0x18	; 24
      000234 30                     705 	.db #0x30	; 48	'0'
      000235 30                     706 	.db #0x30	; 48	'0'
      000236 30                     707 	.db #0x30	; 48	'0'
      000237 00                     708 	.db #0x00	; 0
      000238 78                     709 	.db #0x78	; 120	'x'
      000239 CC                     710 	.db #0xcc	; 204
      00023A CC                     711 	.db #0xcc	; 204
      00023B 78                     712 	.db #0x78	; 120	'x'
      00023C CC                     713 	.db #0xcc	; 204
      00023D CC                     714 	.db #0xcc	; 204
      00023E 78                     715 	.db #0x78	; 120	'x'
      00023F 00                     716 	.db #0x00	; 0
      000240 78                     717 	.db #0x78	; 120	'x'
      000241 CC                     718 	.db #0xcc	; 204
      000242 CC                     719 	.db #0xcc	; 204
      000243 7C                     720 	.db #0x7c	; 124
      000244 0C                     721 	.db #0x0c	; 12
      000245 18                     722 	.db #0x18	; 24
      000246 70                     723 	.db #0x70	; 112	'p'
      000247 00                     724 	.db #0x00	; 0
      000248 00                     725 	.db #0x00	; 0
      000249 30                     726 	.db #0x30	; 48	'0'
      00024A 30                     727 	.db #0x30	; 48	'0'
      00024B 00                     728 	.db #0x00	; 0
      00024C 00                     729 	.db #0x00	; 0
      00024D 30                     730 	.db #0x30	; 48	'0'
      00024E 30                     731 	.db #0x30	; 48	'0'
      00024F 00                     732 	.db #0x00	; 0
      000250 00                     733 	.db #0x00	; 0
      000251 30                     734 	.db #0x30	; 48	'0'
      000252 30                     735 	.db #0x30	; 48	'0'
      000253 00                     736 	.db #0x00	; 0
      000254 30                     737 	.db #0x30	; 48	'0'
      000255 30                     738 	.db #0x30	; 48	'0'
      000256 60                     739 	.db #0x60	; 96
      000257 00                     740 	.db #0x00	; 0
      000258 18                     741 	.db #0x18	; 24
      000259 30                     742 	.db #0x30	; 48	'0'
      00025A 60                     743 	.db #0x60	; 96
      00025B C0                     744 	.db #0xc0	; 192
      00025C 60                     745 	.db #0x60	; 96
      00025D 30                     746 	.db #0x30	; 48	'0'
      00025E 18                     747 	.db #0x18	; 24
      00025F 00                     748 	.db #0x00	; 0
      000260 00                     749 	.db #0x00	; 0
      000261 00                     750 	.db #0x00	; 0
      000262 FC                     751 	.db #0xfc	; 252
      000263 00                     752 	.db #0x00	; 0
      000264 00                     753 	.db #0x00	; 0
      000265 FC                     754 	.db #0xfc	; 252
      000266 00                     755 	.db #0x00	; 0
      000267 00                     756 	.db #0x00	; 0
      000268 60                     757 	.db #0x60	; 96
      000269 30                     758 	.db #0x30	; 48	'0'
      00026A 18                     759 	.db #0x18	; 24
      00026B 0C                     760 	.db #0x0c	; 12
      00026C 18                     761 	.db #0x18	; 24
      00026D 30                     762 	.db #0x30	; 48	'0'
      00026E 60                     763 	.db #0x60	; 96
      00026F 00                     764 	.db #0x00	; 0
      000270 78                     765 	.db #0x78	; 120	'x'
      000271 CC                     766 	.db #0xcc	; 204
      000272 0C                     767 	.db #0x0c	; 12
      000273 18                     768 	.db #0x18	; 24
      000274 30                     769 	.db #0x30	; 48	'0'
      000275 00                     770 	.db #0x00	; 0
      000276 30                     771 	.db #0x30	; 48	'0'
      000277 00                     772 	.db #0x00	; 0
      000278 7C                     773 	.db #0x7c	; 124
      000279 C6                     774 	.db #0xc6	; 198
      00027A DE                     775 	.db #0xde	; 222
      00027B DE                     776 	.db #0xde	; 222
      00027C DE                     777 	.db #0xde	; 222
      00027D C0                     778 	.db #0xc0	; 192
      00027E 78                     779 	.db #0x78	; 120	'x'
      00027F 00                     780 	.db #0x00	; 0
      000280 30                     781 	.db #0x30	; 48	'0'
      000281 78                     782 	.db #0x78	; 120	'x'
      000282 CC                     783 	.db #0xcc	; 204
      000283 CC                     784 	.db #0xcc	; 204
      000284 FC                     785 	.db #0xfc	; 252
      000285 CC                     786 	.db #0xcc	; 204
      000286 CC                     787 	.db #0xcc	; 204
      000287 00                     788 	.db #0x00	; 0
      000288 FC                     789 	.db #0xfc	; 252
      000289 66                     790 	.db #0x66	; 102	'f'
      00028A 66                     791 	.db #0x66	; 102	'f'
      00028B 7C                     792 	.db #0x7c	; 124
      00028C 66                     793 	.db #0x66	; 102	'f'
      00028D 66                     794 	.db #0x66	; 102	'f'
      00028E FC                     795 	.db #0xfc	; 252
      00028F 00                     796 	.db #0x00	; 0
      000290 3C                     797 	.db #0x3c	; 60
      000291 66                     798 	.db #0x66	; 102	'f'
      000292 C0                     799 	.db #0xc0	; 192
      000293 C0                     800 	.db #0xc0	; 192
      000294 C0                     801 	.db #0xc0	; 192
      000295 66                     802 	.db #0x66	; 102	'f'
      000296 3C                     803 	.db #0x3c	; 60
      000297 00                     804 	.db #0x00	; 0
      000298 F8                     805 	.db #0xf8	; 248
      000299 6C                     806 	.db #0x6c	; 108	'l'
      00029A 66                     807 	.db #0x66	; 102	'f'
      00029B 66                     808 	.db #0x66	; 102	'f'
      00029C 66                     809 	.db #0x66	; 102	'f'
      00029D 6C                     810 	.db #0x6c	; 108	'l'
      00029E F8                     811 	.db #0xf8	; 248
      00029F 00                     812 	.db #0x00	; 0
      0002A0 FE                     813 	.db #0xfe	; 254
      0002A1 62                     814 	.db #0x62	; 98	'b'
      0002A2 68                     815 	.db #0x68	; 104	'h'
      0002A3 78                     816 	.db #0x78	; 120	'x'
      0002A4 68                     817 	.db #0x68	; 104	'h'
      0002A5 62                     818 	.db #0x62	; 98	'b'
      0002A6 FE                     819 	.db #0xfe	; 254
      0002A7 00                     820 	.db #0x00	; 0
      0002A8 FE                     821 	.db #0xfe	; 254
      0002A9 62                     822 	.db #0x62	; 98	'b'
      0002AA 68                     823 	.db #0x68	; 104	'h'
      0002AB 78                     824 	.db #0x78	; 120	'x'
      0002AC 68                     825 	.db #0x68	; 104	'h'
      0002AD 60                     826 	.db #0x60	; 96
      0002AE F0                     827 	.db #0xf0	; 240
      0002AF 00                     828 	.db #0x00	; 0
      0002B0 3C                     829 	.db #0x3c	; 60
      0002B1 66                     830 	.db #0x66	; 102	'f'
      0002B2 C0                     831 	.db #0xc0	; 192
      0002B3 C0                     832 	.db #0xc0	; 192
      0002B4 CE                     833 	.db #0xce	; 206
      0002B5 66                     834 	.db #0x66	; 102	'f'
      0002B6 3E                     835 	.db #0x3e	; 62
      0002B7 00                     836 	.db #0x00	; 0
      0002B8 CC                     837 	.db #0xcc	; 204
      0002B9 CC                     838 	.db #0xcc	; 204
      0002BA CC                     839 	.db #0xcc	; 204
      0002BB FC                     840 	.db #0xfc	; 252
      0002BC CC                     841 	.db #0xcc	; 204
      0002BD CC                     842 	.db #0xcc	; 204
      0002BE CC                     843 	.db #0xcc	; 204
      0002BF 00                     844 	.db #0x00	; 0
      0002C0 78                     845 	.db #0x78	; 120	'x'
      0002C1 30                     846 	.db #0x30	; 48	'0'
      0002C2 30                     847 	.db #0x30	; 48	'0'
      0002C3 30                     848 	.db #0x30	; 48	'0'
      0002C4 30                     849 	.db #0x30	; 48	'0'
      0002C5 30                     850 	.db #0x30	; 48	'0'
      0002C6 78                     851 	.db #0x78	; 120	'x'
      0002C7 00                     852 	.db #0x00	; 0
      0002C8 1E                     853 	.db #0x1e	; 30
      0002C9 0C                     854 	.db #0x0c	; 12
      0002CA 0C                     855 	.db #0x0c	; 12
      0002CB 0C                     856 	.db #0x0c	; 12
      0002CC CC                     857 	.db #0xcc	; 204
      0002CD CC                     858 	.db #0xcc	; 204
      0002CE 78                     859 	.db #0x78	; 120	'x'
      0002CF 00                     860 	.db #0x00	; 0
      0002D0 E6                     861 	.db #0xe6	; 230
      0002D1 66                     862 	.db #0x66	; 102	'f'
      0002D2 6C                     863 	.db #0x6c	; 108	'l'
      0002D3 78                     864 	.db #0x78	; 120	'x'
      0002D4 6C                     865 	.db #0x6c	; 108	'l'
      0002D5 66                     866 	.db #0x66	; 102	'f'
      0002D6 E6                     867 	.db #0xe6	; 230
      0002D7 00                     868 	.db #0x00	; 0
      0002D8 F0                     869 	.db #0xf0	; 240
      0002D9 60                     870 	.db #0x60	; 96
      0002DA 60                     871 	.db #0x60	; 96
      0002DB 60                     872 	.db #0x60	; 96
      0002DC 62                     873 	.db #0x62	; 98	'b'
      0002DD 66                     874 	.db #0x66	; 102	'f'
      0002DE FE                     875 	.db #0xfe	; 254
      0002DF 00                     876 	.db #0x00	; 0
      0002E0 C6                     877 	.db #0xc6	; 198
      0002E1 EE                     878 	.db #0xee	; 238
      0002E2 FE                     879 	.db #0xfe	; 254
      0002E3 FE                     880 	.db #0xfe	; 254
      0002E4 D6                     881 	.db #0xd6	; 214
      0002E5 C6                     882 	.db #0xc6	; 198
      0002E6 C6                     883 	.db #0xc6	; 198
      0002E7 00                     884 	.db #0x00	; 0
      0002E8 C6                     885 	.db #0xc6	; 198
      0002E9 E6                     886 	.db #0xe6	; 230
      0002EA F6                     887 	.db #0xf6	; 246
      0002EB DE                     888 	.db #0xde	; 222
      0002EC CE                     889 	.db #0xce	; 206
      0002ED C6                     890 	.db #0xc6	; 198
      0002EE C6                     891 	.db #0xc6	; 198
      0002EF 00                     892 	.db #0x00	; 0
      0002F0 38                     893 	.db #0x38	; 56	'8'
      0002F1 6C                     894 	.db #0x6c	; 108	'l'
      0002F2 C6                     895 	.db #0xc6	; 198
      0002F3 C6                     896 	.db #0xc6	; 198
      0002F4 C6                     897 	.db #0xc6	; 198
      0002F5 6C                     898 	.db #0x6c	; 108	'l'
      0002F6 38                     899 	.db #0x38	; 56	'8'
      0002F7 00                     900 	.db #0x00	; 0
      0002F8 FC                     901 	.db #0xfc	; 252
      0002F9 66                     902 	.db #0x66	; 102	'f'
      0002FA 66                     903 	.db #0x66	; 102	'f'
      0002FB 7C                     904 	.db #0x7c	; 124
      0002FC 60                     905 	.db #0x60	; 96
      0002FD 60                     906 	.db #0x60	; 96
      0002FE F0                     907 	.db #0xf0	; 240
      0002FF 00                     908 	.db #0x00	; 0
      000300 78                     909 	.db #0x78	; 120	'x'
      000301 CC                     910 	.db #0xcc	; 204
      000302 CC                     911 	.db #0xcc	; 204
      000303 CC                     912 	.db #0xcc	; 204
      000304 DC                     913 	.db #0xdc	; 220
      000305 78                     914 	.db #0x78	; 120	'x'
      000306 1C                     915 	.db #0x1c	; 28
      000307 00                     916 	.db #0x00	; 0
      000308 FC                     917 	.db #0xfc	; 252
      000309 66                     918 	.db #0x66	; 102	'f'
      00030A 66                     919 	.db #0x66	; 102	'f'
      00030B 7C                     920 	.db #0x7c	; 124
      00030C 6C                     921 	.db #0x6c	; 108	'l'
      00030D 66                     922 	.db #0x66	; 102	'f'
      00030E E6                     923 	.db #0xe6	; 230
      00030F 00                     924 	.db #0x00	; 0
      000310 78                     925 	.db #0x78	; 120	'x'
      000311 CC                     926 	.db #0xcc	; 204
      000312 E0                     927 	.db #0xe0	; 224
      000313 70                     928 	.db #0x70	; 112	'p'
      000314 1C                     929 	.db #0x1c	; 28
      000315 CC                     930 	.db #0xcc	; 204
      000316 78                     931 	.db #0x78	; 120	'x'
      000317 00                     932 	.db #0x00	; 0
      000318 FC                     933 	.db #0xfc	; 252
      000319 B4                     934 	.db #0xb4	; 180
      00031A 30                     935 	.db #0x30	; 48	'0'
      00031B 30                     936 	.db #0x30	; 48	'0'
      00031C 30                     937 	.db #0x30	; 48	'0'
      00031D 30                     938 	.db #0x30	; 48	'0'
      00031E 78                     939 	.db #0x78	; 120	'x'
      00031F 00                     940 	.db #0x00	; 0
      000320 CC                     941 	.db #0xcc	; 204
      000321 CC                     942 	.db #0xcc	; 204
      000322 CC                     943 	.db #0xcc	; 204
      000323 CC                     944 	.db #0xcc	; 204
      000324 CC                     945 	.db #0xcc	; 204
      000325 CC                     946 	.db #0xcc	; 204
      000326 FC                     947 	.db #0xfc	; 252
      000327 00                     948 	.db #0x00	; 0
      000328 CC                     949 	.db #0xcc	; 204
      000329 CC                     950 	.db #0xcc	; 204
      00032A CC                     951 	.db #0xcc	; 204
      00032B CC                     952 	.db #0xcc	; 204
      00032C CC                     953 	.db #0xcc	; 204
      00032D 78                     954 	.db #0x78	; 120	'x'
      00032E 30                     955 	.db #0x30	; 48	'0'
      00032F 00                     956 	.db #0x00	; 0
      000330 C6                     957 	.db #0xc6	; 198
      000331 C6                     958 	.db #0xc6	; 198
      000332 C6                     959 	.db #0xc6	; 198
      000333 D6                     960 	.db #0xd6	; 214
      000334 FE                     961 	.db #0xfe	; 254
      000335 EE                     962 	.db #0xee	; 238
      000336 C6                     963 	.db #0xc6	; 198
      000337 00                     964 	.db #0x00	; 0
      000338 C6                     965 	.db #0xc6	; 198
      000339 C6                     966 	.db #0xc6	; 198
      00033A 6C                     967 	.db #0x6c	; 108	'l'
      00033B 38                     968 	.db #0x38	; 56	'8'
      00033C 38                     969 	.db #0x38	; 56	'8'
      00033D 6C                     970 	.db #0x6c	; 108	'l'
      00033E C6                     971 	.db #0xc6	; 198
      00033F 00                     972 	.db #0x00	; 0
      000340 CC                     973 	.db #0xcc	; 204
      000341 CC                     974 	.db #0xcc	; 204
      000342 CC                     975 	.db #0xcc	; 204
      000343 78                     976 	.db #0x78	; 120	'x'
      000344 30                     977 	.db #0x30	; 48	'0'
      000345 30                     978 	.db #0x30	; 48	'0'
      000346 78                     979 	.db #0x78	; 120	'x'
      000347 00                     980 	.db #0x00	; 0
      000348 FE                     981 	.db #0xfe	; 254
      000349 C6                     982 	.db #0xc6	; 198
      00034A 8C                     983 	.db #0x8c	; 140
      00034B 18                     984 	.db #0x18	; 24
      00034C 32                     985 	.db #0x32	; 50	'2'
      00034D 66                     986 	.db #0x66	; 102	'f'
      00034E FE                     987 	.db #0xfe	; 254
      00034F 00                     988 	.db #0x00	; 0
      000350 78                     989 	.db #0x78	; 120	'x'
      000351 60                     990 	.db #0x60	; 96
      000352 60                     991 	.db #0x60	; 96
      000353 60                     992 	.db #0x60	; 96
      000354 60                     993 	.db #0x60	; 96
      000355 60                     994 	.db #0x60	; 96
      000356 78                     995 	.db #0x78	; 120	'x'
      000357 00                     996 	.db #0x00	; 0
      000358 C0                     997 	.db #0xc0	; 192
      000359 60                     998 	.db #0x60	; 96
      00035A 30                     999 	.db #0x30	; 48	'0'
      00035B 18                    1000 	.db #0x18	; 24
      00035C 0C                    1001 	.db #0x0c	; 12
      00035D 06                    1002 	.db #0x06	; 6
      00035E 02                    1003 	.db #0x02	; 2
      00035F 00                    1004 	.db #0x00	; 0
      000360 78                    1005 	.db #0x78	; 120	'x'
      000361 18                    1006 	.db #0x18	; 24
      000362 18                    1007 	.db #0x18	; 24
      000363 18                    1008 	.db #0x18	; 24
      000364 18                    1009 	.db #0x18	; 24
      000365 18                    1010 	.db #0x18	; 24
      000366 78                    1011 	.db #0x78	; 120	'x'
      000367 00                    1012 	.db #0x00	; 0
      000368 10                    1013 	.db #0x10	; 16
      000369 38                    1014 	.db #0x38	; 56	'8'
      00036A 6C                    1015 	.db #0x6c	; 108	'l'
      00036B C6                    1016 	.db #0xc6	; 198
      00036C 00                    1017 	.db #0x00	; 0
      00036D 00                    1018 	.db #0x00	; 0
      00036E 00                    1019 	.db #0x00	; 0
      00036F 00                    1020 	.db #0x00	; 0
      000370 00                    1021 	.db #0x00	; 0
      000371 00                    1022 	.db #0x00	; 0
      000372 00                    1023 	.db #0x00	; 0
      000373 00                    1024 	.db #0x00	; 0
      000374 00                    1025 	.db #0x00	; 0
      000375 00                    1026 	.db #0x00	; 0
      000376 00                    1027 	.db #0x00	; 0
      000377 FF                    1028 	.db #0xff	; 255
      000378 30                    1029 	.db #0x30	; 48	'0'
      000379 30                    1030 	.db #0x30	; 48	'0'
      00037A 18                    1031 	.db #0x18	; 24
      00037B 00                    1032 	.db #0x00	; 0
      00037C 00                    1033 	.db #0x00	; 0
      00037D 00                    1034 	.db #0x00	; 0
      00037E 00                    1035 	.db #0x00	; 0
      00037F 00                    1036 	.db #0x00	; 0
      000380 00                    1037 	.db #0x00	; 0
      000381 00                    1038 	.db #0x00	; 0
      000382 78                    1039 	.db #0x78	; 120	'x'
      000383 0C                    1040 	.db #0x0c	; 12
      000384 7C                    1041 	.db #0x7c	; 124
      000385 CC                    1042 	.db #0xcc	; 204
      000386 76                    1043 	.db #0x76	; 118	'v'
      000387 00                    1044 	.db #0x00	; 0
      000388 E0                    1045 	.db #0xe0	; 224
      000389 60                    1046 	.db #0x60	; 96
      00038A 60                    1047 	.db #0x60	; 96
      00038B 7C                    1048 	.db #0x7c	; 124
      00038C 66                    1049 	.db #0x66	; 102	'f'
      00038D 66                    1050 	.db #0x66	; 102	'f'
      00038E DC                    1051 	.db #0xdc	; 220
      00038F 00                    1052 	.db #0x00	; 0
      000390 00                    1053 	.db #0x00	; 0
      000391 00                    1054 	.db #0x00	; 0
      000392 78                    1055 	.db #0x78	; 120	'x'
      000393 CC                    1056 	.db #0xcc	; 204
      000394 C0                    1057 	.db #0xc0	; 192
      000395 CC                    1058 	.db #0xcc	; 204
      000396 78                    1059 	.db #0x78	; 120	'x'
      000397 00                    1060 	.db #0x00	; 0
      000398 1C                    1061 	.db #0x1c	; 28
      000399 0C                    1062 	.db #0x0c	; 12
      00039A 0C                    1063 	.db #0x0c	; 12
      00039B 7C                    1064 	.db #0x7c	; 124
      00039C CC                    1065 	.db #0xcc	; 204
      00039D CC                    1066 	.db #0xcc	; 204
      00039E 76                    1067 	.db #0x76	; 118	'v'
      00039F 00                    1068 	.db #0x00	; 0
      0003A0 00                    1069 	.db #0x00	; 0
      0003A1 00                    1070 	.db #0x00	; 0
      0003A2 78                    1071 	.db #0x78	; 120	'x'
      0003A3 CC                    1072 	.db #0xcc	; 204
      0003A4 FC                    1073 	.db #0xfc	; 252
      0003A5 C0                    1074 	.db #0xc0	; 192
      0003A6 78                    1075 	.db #0x78	; 120	'x'
      0003A7 00                    1076 	.db #0x00	; 0
      0003A8 38                    1077 	.db #0x38	; 56	'8'
      0003A9 6C                    1078 	.db #0x6c	; 108	'l'
      0003AA 60                    1079 	.db #0x60	; 96
      0003AB F0                    1080 	.db #0xf0	; 240
      0003AC 60                    1081 	.db #0x60	; 96
      0003AD 60                    1082 	.db #0x60	; 96
      0003AE F0                    1083 	.db #0xf0	; 240
      0003AF 00                    1084 	.db #0x00	; 0
      0003B0 00                    1085 	.db #0x00	; 0
      0003B1 00                    1086 	.db #0x00	; 0
      0003B2 76                    1087 	.db #0x76	; 118	'v'
      0003B3 CC                    1088 	.db #0xcc	; 204
      0003B4 CC                    1089 	.db #0xcc	; 204
      0003B5 7C                    1090 	.db #0x7c	; 124
      0003B6 0C                    1091 	.db #0x0c	; 12
      0003B7 F8                    1092 	.db #0xf8	; 248
      0003B8 E0                    1093 	.db #0xe0	; 224
      0003B9 60                    1094 	.db #0x60	; 96
      0003BA 6C                    1095 	.db #0x6c	; 108	'l'
      0003BB 76                    1096 	.db #0x76	; 118	'v'
      0003BC 66                    1097 	.db #0x66	; 102	'f'
      0003BD 66                    1098 	.db #0x66	; 102	'f'
      0003BE E6                    1099 	.db #0xe6	; 230
      0003BF 00                    1100 	.db #0x00	; 0
      0003C0 30                    1101 	.db #0x30	; 48	'0'
      0003C1 00                    1102 	.db #0x00	; 0
      0003C2 70                    1103 	.db #0x70	; 112	'p'
      0003C3 30                    1104 	.db #0x30	; 48	'0'
      0003C4 30                    1105 	.db #0x30	; 48	'0'
      0003C5 30                    1106 	.db #0x30	; 48	'0'
      0003C6 78                    1107 	.db #0x78	; 120	'x'
      0003C7 00                    1108 	.db #0x00	; 0
      0003C8 0C                    1109 	.db #0x0c	; 12
      0003C9 00                    1110 	.db #0x00	; 0
      0003CA 0C                    1111 	.db #0x0c	; 12
      0003CB 0C                    1112 	.db #0x0c	; 12
      0003CC 0C                    1113 	.db #0x0c	; 12
      0003CD CC                    1114 	.db #0xcc	; 204
      0003CE CC                    1115 	.db #0xcc	; 204
      0003CF 78                    1116 	.db #0x78	; 120	'x'
      0003D0 E0                    1117 	.db #0xe0	; 224
      0003D1 60                    1118 	.db #0x60	; 96
      0003D2 66                    1119 	.db #0x66	; 102	'f'
      0003D3 6C                    1120 	.db #0x6c	; 108	'l'
      0003D4 78                    1121 	.db #0x78	; 120	'x'
      0003D5 6C                    1122 	.db #0x6c	; 108	'l'
      0003D6 E6                    1123 	.db #0xe6	; 230
      0003D7 00                    1124 	.db #0x00	; 0
      0003D8 70                    1125 	.db #0x70	; 112	'p'
      0003D9 30                    1126 	.db #0x30	; 48	'0'
      0003DA 30                    1127 	.db #0x30	; 48	'0'
      0003DB 30                    1128 	.db #0x30	; 48	'0'
      0003DC 30                    1129 	.db #0x30	; 48	'0'
      0003DD 30                    1130 	.db #0x30	; 48	'0'
      0003DE 78                    1131 	.db #0x78	; 120	'x'
      0003DF 00                    1132 	.db #0x00	; 0
      0003E0 00                    1133 	.db #0x00	; 0
      0003E1 00                    1134 	.db #0x00	; 0
      0003E2 CC                    1135 	.db #0xcc	; 204
      0003E3 FE                    1136 	.db #0xfe	; 254
      0003E4 FE                    1137 	.db #0xfe	; 254
      0003E5 D6                    1138 	.db #0xd6	; 214
      0003E6 C6                    1139 	.db #0xc6	; 198
      0003E7 00                    1140 	.db #0x00	; 0
      0003E8 00                    1141 	.db #0x00	; 0
      0003E9 00                    1142 	.db #0x00	; 0
      0003EA F8                    1143 	.db #0xf8	; 248
      0003EB CC                    1144 	.db #0xcc	; 204
      0003EC CC                    1145 	.db #0xcc	; 204
      0003ED CC                    1146 	.db #0xcc	; 204
      0003EE CC                    1147 	.db #0xcc	; 204
      0003EF 00                    1148 	.db #0x00	; 0
      0003F0 00                    1149 	.db #0x00	; 0
      0003F1 00                    1150 	.db #0x00	; 0
      0003F2 78                    1151 	.db #0x78	; 120	'x'
      0003F3 CC                    1152 	.db #0xcc	; 204
      0003F4 CC                    1153 	.db #0xcc	; 204
      0003F5 CC                    1154 	.db #0xcc	; 204
      0003F6 78                    1155 	.db #0x78	; 120	'x'
      0003F7 00                    1156 	.db #0x00	; 0
      0003F8 00                    1157 	.db #0x00	; 0
      0003F9 00                    1158 	.db #0x00	; 0
      0003FA DC                    1159 	.db #0xdc	; 220
      0003FB 66                    1160 	.db #0x66	; 102	'f'
      0003FC 66                    1161 	.db #0x66	; 102	'f'
      0003FD 7C                    1162 	.db #0x7c	; 124
      0003FE 60                    1163 	.db #0x60	; 96
      0003FF F0                    1164 	.db #0xf0	; 240
      000400 00                    1165 	.db #0x00	; 0
      000401 00                    1166 	.db #0x00	; 0
      000402 76                    1167 	.db #0x76	; 118	'v'
      000403 CC                    1168 	.db #0xcc	; 204
      000404 CC                    1169 	.db #0xcc	; 204
      000405 7C                    1170 	.db #0x7c	; 124
      000406 0C                    1171 	.db #0x0c	; 12
      000407 1E                    1172 	.db #0x1e	; 30
      000408 00                    1173 	.db #0x00	; 0
      000409 00                    1174 	.db #0x00	; 0
      00040A DC                    1175 	.db #0xdc	; 220
      00040B 76                    1176 	.db #0x76	; 118	'v'
      00040C 66                    1177 	.db #0x66	; 102	'f'
      00040D 60                    1178 	.db #0x60	; 96
      00040E F0                    1179 	.db #0xf0	; 240
      00040F 00                    1180 	.db #0x00	; 0
      000410 00                    1181 	.db #0x00	; 0
      000411 00                    1182 	.db #0x00	; 0
      000412 7C                    1183 	.db #0x7c	; 124
      000413 C0                    1184 	.db #0xc0	; 192
      000414 78                    1185 	.db #0x78	; 120	'x'
      000415 0C                    1186 	.db #0x0c	; 12
      000416 F8                    1187 	.db #0xf8	; 248
      000417 00                    1188 	.db #0x00	; 0
      000418 10                    1189 	.db #0x10	; 16
      000419 30                    1190 	.db #0x30	; 48	'0'
      00041A 7C                    1191 	.db #0x7c	; 124
      00041B 30                    1192 	.db #0x30	; 48	'0'
      00041C 30                    1193 	.db #0x30	; 48	'0'
      00041D 34                    1194 	.db #0x34	; 52	'4'
      00041E 18                    1195 	.db #0x18	; 24
      00041F 00                    1196 	.db #0x00	; 0
      000420 00                    1197 	.db #0x00	; 0
      000421 00                    1198 	.db #0x00	; 0
      000422 CC                    1199 	.db #0xcc	; 204
      000423 CC                    1200 	.db #0xcc	; 204
      000424 CC                    1201 	.db #0xcc	; 204
      000425 CC                    1202 	.db #0xcc	; 204
      000426 76                    1203 	.db #0x76	; 118	'v'
      000427 00                    1204 	.db #0x00	; 0
      000428 00                    1205 	.db #0x00	; 0
      000429 00                    1206 	.db #0x00	; 0
      00042A CC                    1207 	.db #0xcc	; 204
      00042B CC                    1208 	.db #0xcc	; 204
      00042C CC                    1209 	.db #0xcc	; 204
      00042D 78                    1210 	.db #0x78	; 120	'x'
      00042E 30                    1211 	.db #0x30	; 48	'0'
      00042F 00                    1212 	.db #0x00	; 0
      000430 00                    1213 	.db #0x00	; 0
      000431 00                    1214 	.db #0x00	; 0
      000432 C6                    1215 	.db #0xc6	; 198
      000433 D6                    1216 	.db #0xd6	; 214
      000434 FE                    1217 	.db #0xfe	; 254
      000435 FE                    1218 	.db #0xfe	; 254
      000436 6C                    1219 	.db #0x6c	; 108	'l'
      000437 00                    1220 	.db #0x00	; 0
      000438 00                    1221 	.db #0x00	; 0
      000439 00                    1222 	.db #0x00	; 0
      00043A C6                    1223 	.db #0xc6	; 198
      00043B 6C                    1224 	.db #0x6c	; 108	'l'
      00043C 38                    1225 	.db #0x38	; 56	'8'
      00043D 6C                    1226 	.db #0x6c	; 108	'l'
      00043E C6                    1227 	.db #0xc6	; 198
      00043F 00                    1228 	.db #0x00	; 0
      000440 00                    1229 	.db #0x00	; 0
      000441 00                    1230 	.db #0x00	; 0
      000442 CC                    1231 	.db #0xcc	; 204
      000443 CC                    1232 	.db #0xcc	; 204
      000444 CC                    1233 	.db #0xcc	; 204
      000445 7C                    1234 	.db #0x7c	; 124
      000446 0C                    1235 	.db #0x0c	; 12
      000447 F8                    1236 	.db #0xf8	; 248
      000448 00                    1237 	.db #0x00	; 0
      000449 00                    1238 	.db #0x00	; 0
      00044A FC                    1239 	.db #0xfc	; 252
      00044B 98                    1240 	.db #0x98	; 152
      00044C 30                    1241 	.db #0x30	; 48	'0'
      00044D 64                    1242 	.db #0x64	; 100	'd'
      00044E FC                    1243 	.db #0xfc	; 252
      00044F 00                    1244 	.db #0x00	; 0
      000450 1C                    1245 	.db #0x1c	; 28
      000451 30                    1246 	.db #0x30	; 48	'0'
      000452 30                    1247 	.db #0x30	; 48	'0'
      000453 E0                    1248 	.db #0xe0	; 224
      000454 30                    1249 	.db #0x30	; 48	'0'
      000455 30                    1250 	.db #0x30	; 48	'0'
      000456 1C                    1251 	.db #0x1c	; 28
      000457 00                    1252 	.db #0x00	; 0
      000458 18                    1253 	.db #0x18	; 24
      000459 18                    1254 	.db #0x18	; 24
      00045A 18                    1255 	.db #0x18	; 24
      00045B 00                    1256 	.db #0x00	; 0
      00045C 18                    1257 	.db #0x18	; 24
      00045D 18                    1258 	.db #0x18	; 24
      00045E 18                    1259 	.db #0x18	; 24
      00045F 00                    1260 	.db #0x00	; 0
      000460 E0                    1261 	.db #0xe0	; 224
      000461 30                    1262 	.db #0x30	; 48	'0'
      000462 30                    1263 	.db #0x30	; 48	'0'
      000463 1C                    1264 	.db #0x1c	; 28
      000464 30                    1265 	.db #0x30	; 48	'0'
      000465 30                    1266 	.db #0x30	; 48	'0'
      000466 E0                    1267 	.db #0xe0	; 224
      000467 00                    1268 	.db #0x00	; 0
      000468 76                    1269 	.db #0x76	; 118	'v'
      000469 DC                    1270 	.db #0xdc	; 220
      00046A 00                    1271 	.db #0x00	; 0
      00046B 00                    1272 	.db #0x00	; 0
      00046C 00                    1273 	.db #0x00	; 0
      00046D 00                    1274 	.db #0x00	; 0
      00046E 00                    1275 	.db #0x00	; 0
      00046F 00                    1276 	.db #0x00	; 0
      000470 00                    1277 	.db #0x00	; 0
      000471 10                    1278 	.db #0x10	; 16
      000472 38                    1279 	.db #0x38	; 56	'8'
      000473 6C                    1280 	.db #0x6c	; 108	'l'
      000474 C6                    1281 	.db #0xc6	; 198
      000475 C6                    1282 	.db #0xc6	; 198
      000476 FE                    1283 	.db #0xfe	; 254
      000477 00                    1284 	.db #0x00	; 0
      000478                       1285 _pattern_black_0:
      000478 FF                    1286 	.db #0xff	; 255
      000479 FF                    1287 	.db #0xff	; 255
      00047A FF                    1288 	.db #0xff	; 255
      00047B FF                    1289 	.db #0xff	; 255
      00047C FF                    1290 	.db #0xff	; 255
      00047D FF                    1291 	.db #0xff	; 255
      00047E FF                    1292 	.db #0xff	; 255
      00047F FF                    1293 	.db #0xff	; 255
      000480                       1294 _pattern_black_1:
      000480 FE                    1295 	.db #0xfe	; 254
      000481 FF                    1296 	.db #0xff	; 255
      000482 FF                    1297 	.db #0xff	; 255
      000483 FF                    1298 	.db #0xff	; 255
      000484 FE                    1299 	.db #0xfe	; 254
      000485 FF                    1300 	.db #0xff	; 255
      000486 FF                    1301 	.db #0xff	; 255
      000487 FE                    1302 	.db #0xfe	; 254
      000488                       1303 _pattern_black_2:
      000488 FF                    1304 	.db #0xff	; 255
      000489 FF                    1305 	.db #0xff	; 255
      00048A FF                    1306 	.db #0xff	; 255
      00048B FF                    1307 	.db #0xff	; 255
      00048C FF                    1308 	.db #0xff	; 255
      00048D FB                    1309 	.db #0xfb	; 251
      00048E FF                    1310 	.db #0xff	; 255
      00048F BB                    1311 	.db #0xbb	; 187
      000490                       1312 _pattern_black_3:
      000490 FB                    1313 	.db #0xfb	; 251
      000491 FE                    1314 	.db #0xfe	; 254
      000492 FD                    1315 	.db #0xfd	; 253
      000493 FE                    1316 	.db #0xfe	; 254
      000494 F7                    1317 	.db #0xf7	; 247
      000495 FA                    1318 	.db #0xfa	; 250
      000496 AF                    1319 	.db #0xaf	; 175
      000497 55                    1320 	.db #0x55	; 85	'U'
      000498                       1321 _pattern_0:
      000498 9F                    1322 	.db #0x9f	; 159
      000499 90                    1323 	.db #0x90	; 144
      00049A 90                    1324 	.db #0x90	; 144
      00049B 93                    1325 	.db #0x93	; 147
      00049C 92                    1326 	.db #0x92	; 146
      00049D 92                    1327 	.db #0x92	; 146
      00049E 92                    1328 	.db #0x92	; 146
      00049F 92                    1329 	.db #0x92	; 146
      0004A0                       1330 _pattern_1:
      0004A0 FF                    1331 	.db #0xff	; 255
      0004A1 01                    1332 	.db #0x01	; 1
      0004A2 01                    1333 	.db #0x01	; 1
      0004A3 F9                    1334 	.db #0xf9	; 249
      0004A4 09                    1335 	.db #0x09	; 9
      0004A5 09                    1336 	.db #0x09	; 9
      0004A6 49                    1337 	.db #0x49	; 73	'I'
      0004A7 49                    1338 	.db #0x49	; 73	'I'
      0004A8                       1339 _pattern_2:
      0004A8 92                    1340 	.db #0x92	; 146
      0004A9 93                    1341 	.db #0x93	; 147
      0004AA 90                    1342 	.db #0x90	; 144
      0004AB 90                    1343 	.db #0x90	; 144
      0004AC 9F                    1344 	.db #0x9f	; 159
      0004AD 80                    1345 	.db #0x80	; 128
      0004AE 80                    1346 	.db #0x80	; 128
      0004AF FF                    1347 	.db #0xff	; 255
      0004B0                       1348 _pattern_3:
      0004B0 49                    1349 	.db #0x49	; 73	'I'
      0004B1 C9                    1350 	.db #0xc9	; 201
      0004B2 09                    1351 	.db #0x09	; 9
      0004B3 09                    1352 	.db #0x09	; 9
      0004B4 F9                    1353 	.db #0xf9	; 249
      0004B5 01                    1354 	.db #0x01	; 1
      0004B6 01                    1355 	.db #0x01	; 1
      0004B7 FF                    1356 	.db #0xff	; 255
      0004B8                       1357 _pattern_4:
      0004B8 7F                    1358 	.db #0x7f	; 127
      0004B9 81                    1359 	.db #0x81	; 129
      0004BA 83                    1360 	.db #0x83	; 131
      0004BB 87                    1361 	.db #0x87	; 135
      0004BC 8F                    1362 	.db #0x8f	; 143
      0004BD 9F                    1363 	.db #0x9f	; 159
      0004BE BF                    1364 	.db #0xbf	; 191
      0004BF FF                    1365 	.db #0xff	; 255
      0004C0                       1366 _pattern_5:
      0004C0 FE                    1367 	.db #0xfe	; 254
      0004C1 81                    1368 	.db #0x81	; 129
      0004C2 C1                    1369 	.db #0xc1	; 193
      0004C3 E1                    1370 	.db #0xe1	; 225
      0004C4 F1                    1371 	.db #0xf1	; 241
      0004C5 F9                    1372 	.db #0xf9	; 249
      0004C6 FD                    1373 	.db #0xfd	; 253
      0004C7 FF                    1374 	.db #0xff	; 255
      0004C8                       1375 _pattern_6:
      0004C8 FF                    1376 	.db #0xff	; 255
      0004C9 BF                    1377 	.db #0xbf	; 191
      0004CA 9F                    1378 	.db #0x9f	; 159
      0004CB 8F                    1379 	.db #0x8f	; 143
      0004CC 87                    1380 	.db #0x87	; 135
      0004CD 83                    1381 	.db #0x83	; 131
      0004CE 81                    1382 	.db #0x81	; 129
      0004CF 7F                    1383 	.db #0x7f	; 127
      0004D0                       1384 _pattern_7:
      0004D0 FF                    1385 	.db #0xff	; 255
      0004D1 FD                    1386 	.db #0xfd	; 253
      0004D2 F9                    1387 	.db #0xf9	; 249
      0004D3 F1                    1388 	.db #0xf1	; 241
      0004D4 E1                    1389 	.db #0xe1	; 225
      0004D5 C1                    1390 	.db #0xc1	; 193
      0004D6 81                    1391 	.db #0x81	; 129
      0004D7 FE                    1392 	.db #0xfe	; 254
      0004D8                       1393 _pattern_8:
      0004D8 7F                    1394 	.db #0x7f	; 127
      0004D9 AE                    1395 	.db #0xae	; 174
      0004DA FF                    1396 	.db #0xff	; 255
      0004DB 5B                    1397 	.db #0x5b	; 91
      0004DC FF                    1398 	.db #0xff	; 255
      0004DD AE                    1399 	.db #0xae	; 174
      0004DE FF                    1400 	.db #0xff	; 255
      0004DF DF                    1401 	.db #0xdf	; 223
      0004E0                       1402 _pattern_9:
      0004E0 FE                    1403 	.db #0xfe	; 254
      0004E1 BD                    1404 	.db #0xbd	; 189
      0004E2 DF                    1405 	.db #0xdf	; 223
      0004E3 7F                    1406 	.db #0x7f	; 127
      0004E4 FB                    1407 	.db #0xfb	; 251
      0004E5 DF                    1408 	.db #0xdf	; 223
      0004E6 FE                    1409 	.db #0xfe	; 254
      0004E7 EF                    1410 	.db #0xef	; 239
      0004E8                       1411 _pattern_10:
      0004E8 7F                    1412 	.db #0x7f	; 127
      0004E9 FF                    1413 	.db #0xff	; 255
      0004EA ED                    1414 	.db #0xed	; 237
      0004EB FF                    1415 	.db #0xff	; 255
      0004EC B6                    1416 	.db #0xb6	; 182
      0004ED FE                    1417 	.db #0xfe	; 254
      0004EE DB                    1418 	.db #0xdb	; 219
      0004EF 7D                    1419 	.db #0x7d	; 125
      0004F0                       1420 _pattern_11:
      0004F0 FE                    1421 	.db #0xfe	; 254
      0004F1 FF                    1422 	.db #0xff	; 255
      0004F2 FE                    1423 	.db #0xfe	; 254
      0004F3 77                    1424 	.db #0x77	; 119	'w'
      0004F4 FE                    1425 	.db #0xfe	; 254
      0004F5 DD                    1426 	.db #0xdd	; 221
      0004F6 EF                    1427 	.db #0xef	; 239
      0004F7 5A                    1428 	.db #0x5a	; 90	'Z'
      0004F8                       1429 _pattern_12:
      0004F8 7F                    1430 	.db #0x7f	; 127
      0004F9 D5                    1431 	.db #0xd5	; 213
      0004FA BF                    1432 	.db #0xbf	; 191
      0004FB ED                    1433 	.db #0xed	; 237
      0004FC BF                    1434 	.db #0xbf	; 191
      0004FD F5                    1435 	.db #0xf5	; 245
      0004FE BF                    1436 	.db #0xbf	; 191
      0004FF FF                    1437 	.db #0xff	; 255
      000500                       1438 _pattern_13:
      000500 FE                    1439 	.db #0xfe	; 254
      000501 5F                    1440 	.db #0x5f	; 95
      000502 F5                    1441 	.db #0xf5	; 245
      000503 DF                    1442 	.db #0xdf	; 223
      000504 FF                    1443 	.db #0xff	; 255
      000505 FF                    1444 	.db #0xff	; 255
      000506 FF                    1445 	.db #0xff	; 255
      000507 FF                    1446 	.db #0xff	; 255
      000508                       1447 _pattern_14:
      000508 EF                    1448 	.db #0xef	; 239
      000509 BF                    1449 	.db #0xbf	; 191
      00050A 7F                    1450 	.db #0x7f	; 127
      00050B FF                    1451 	.db #0xff	; 255
      00050C FF                    1452 	.db #0xff	; 255
      00050D FF                    1453 	.db #0xff	; 255
      00050E DB                    1454 	.db #0xdb	; 219
      00050F 7F                    1455 	.db #0x7f	; 127
      000510                       1456 _pattern_15:
      000510 FF                    1457 	.db #0xff	; 255
      000511 FD                    1458 	.db #0xfd	; 253
      000512 FF                    1459 	.db #0xff	; 255
      000513 DB                    1460 	.db #0xdb	; 219
      000514 FD                    1461 	.db #0xfd	; 253
      000515 7B                    1462 	.db #0x7b	; 123
      000516 D7                    1463 	.db #0xd7	; 215
      000517 FE                    1464 	.db #0xfe	; 254
      000518                       1465 _pattern_16:
      000518 7F                    1466 	.db #0x7f	; 127
      000519 FF                    1467 	.db #0xff	; 255
      00051A EA                    1468 	.db #0xea	; 234
      00051B DF                    1469 	.db #0xdf	; 223
      00051C FF                    1470 	.db #0xff	; 255
      00051D DF                    1471 	.db #0xdf	; 223
      00051E FF                    1472 	.db #0xff	; 255
      00051F DF                    1473 	.db #0xdf	; 223
      000520                       1474 _pattern_17:
      000520 FE                    1475 	.db #0xfe	; 254
      000521 FF                    1476 	.db #0xff	; 255
      000522 AF                    1477 	.db #0xaf	; 175
      000523 FA                    1478 	.db #0xfa	; 250
      000524 FF                    1479 	.db #0xff	; 255
      000525 FA                    1480 	.db #0xfa	; 250
      000526 FF                    1481 	.db #0xff	; 255
      000527 FA                    1482 	.db #0xfa	; 250
      000528                       1483 _pattern_18:
      000528 FF                    1484 	.db #0xff	; 255
      000529 DF                    1485 	.db #0xdf	; 223
      00052A FF                    1486 	.db #0xff	; 255
      00052B DF                    1487 	.db #0xdf	; 223
      00052C FF                    1488 	.db #0xff	; 255
      00052D EA                    1489 	.db #0xea	; 234
      00052E FF                    1490 	.db #0xff	; 255
      00052F 55                    1491 	.db #0x55	; 85	'U'
      000530                       1492 _pattern_19:
      000530 FF                    1493 	.db #0xff	; 255
      000531 FA                    1494 	.db #0xfa	; 250
      000532 FF                    1495 	.db #0xff	; 255
      000533 FA                    1496 	.db #0xfa	; 250
      000534 F7                    1497 	.db #0xf7	; 247
      000535 AA                    1498 	.db #0xaa	; 170
      000536 FF                    1499 	.db #0xff	; 255
      000537 56                    1500 	.db #0x56	; 86	'V'
      000538                       1501 _pattern_20:
      000538 3F                    1502 	.db #0x3f	; 63
      000539 7F                    1503 	.db #0x7f	; 127
      00053A E0                    1504 	.db #0xe0	; 224
      00053B CE                    1505 	.db #0xce	; 206
      00053C E6                    1506 	.db #0xe6	; 230
      00053D 7C                    1507 	.db #0x7c	; 124
      00053E 39                    1508 	.db #0x39	; 57	'9'
      00053F 03                    1509 	.db #0x03	; 3
      000540                       1510 _pattern_21:
      000540 FF                    1511 	.db #0xff	; 255
      000541 FF                    1512 	.db #0xff	; 255
      000542 00                    1513 	.db #0x00	; 0
      000543 DB                    1514 	.db #0xdb	; 219
      000544 DB                    1515 	.db #0xdb	; 219
      000545 00                    1516 	.db #0x00	; 0
      000546 FF                    1517 	.db #0xff	; 255
      000547 FF                    1518 	.db #0xff	; 255
      000548                       1519 _pattern_22:
      000548 FC                    1520 	.db #0xfc	; 252
      000549 FE                    1521 	.db #0xfe	; 254
      00054A 07                    1522 	.db #0x07	; 7
      00054B 73                    1523 	.db #0x73	; 115	's'
      00054C 67                    1524 	.db #0x67	; 103	'g'
      00054D 3E                    1525 	.db #0x3e	; 62
      00054E 9C                    1526 	.db #0x9c	; 156
      00054F C0                    1527 	.db #0xc0	; 192
      000550                       1528 _pattern_23:
      000550 06                    1529 	.db #0x06	; 6
      000551 00                    1530 	.db #0x00	; 0
      000552 03                    1531 	.db #0x03	; 3
      000553 04                    1532 	.db #0x04	; 4
      000554 05                    1533 	.db #0x05	; 5
      000555 05                    1534 	.db #0x05	; 5
      000556 05                    1535 	.db #0x05	; 5
      000557 05                    1536 	.db #0x05	; 5
      000558                       1537 _pattern_24:
      000558 00                    1538 	.db #0x00	; 0
      000559 00                    1539 	.db #0x00	; 0
      00055A 33                    1540 	.db #0x33	; 51	'3'
      00055B 44                    1541 	.db #0x44	; 68	'D'
      00055C 55                    1542 	.db #0x55	; 85	'U'
      00055D 55                    1543 	.db #0x55	; 85	'U'
      00055E 55                    1544 	.db #0x55	; 85	'U'
      00055F 55                    1545 	.db #0x55	; 85	'U'
      000560                       1546 _pattern_25:
      000560 60                    1547 	.db #0x60	; 96
      000561 00                    1548 	.db #0x00	; 0
      000562 40                    1549 	.db #0x40	; 64
      000563 20                    1550 	.db #0x20	; 32
      000564 20                    1551 	.db #0x20	; 32
      000565 20                    1552 	.db #0x20	; 32
      000566 20                    1553 	.db #0x20	; 32
      000567 20                    1554 	.db #0x20	; 32
      000568                       1555 _pattern_26:
      000568 05                    1556 	.db #0x05	; 5
      000569 05                    1557 	.db #0x05	; 5
      00056A 05                    1558 	.db #0x05	; 5
      00056B 05                    1559 	.db #0x05	; 5
      00056C 05                    1560 	.db #0x05	; 5
      00056D 05                    1561 	.db #0x05	; 5
      00056E 05                    1562 	.db #0x05	; 5
      00056F 05                    1563 	.db #0x05	; 5
      000570                       1564 _pattern_27:
      000570 55                    1565 	.db #0x55	; 85	'U'
      000571 55                    1566 	.db #0x55	; 85	'U'
      000572 55                    1567 	.db #0x55	; 85	'U'
      000573 55                    1568 	.db #0x55	; 85	'U'
      000574 55                    1569 	.db #0x55	; 85	'U'
      000575 55                    1570 	.db #0x55	; 85	'U'
      000576 55                    1571 	.db #0x55	; 85	'U'
      000577 55                    1572 	.db #0x55	; 85	'U'
      000578                       1573 _pattern_28:
      000578 20                    1574 	.db #0x20	; 32
      000579 20                    1575 	.db #0x20	; 32
      00057A 20                    1576 	.db #0x20	; 32
      00057B 20                    1577 	.db #0x20	; 32
      00057C 20                    1578 	.db #0x20	; 32
      00057D 20                    1579 	.db #0x20	; 32
      00057E 20                    1580 	.db #0x20	; 32
      00057F 20                    1581 	.db #0x20	; 32
      000580                       1582 _pattern_29:
      000580 05                    1583 	.db #0x05	; 5
      000581 05                    1584 	.db #0x05	; 5
      000582 07                    1585 	.db #0x07	; 7
      000583 07                    1586 	.db #0x07	; 7
      000584 07                    1587 	.db #0x07	; 7
      000585 05                    1588 	.db #0x05	; 5
      000586 05                    1589 	.db #0x05	; 5
      000587 05                    1590 	.db #0x05	; 5
      000588                       1591 _pattern_30:
      000588 55                    1592 	.db #0x55	; 85	'U'
      000589 55                    1593 	.db #0x55	; 85	'U'
      00058A FF                    1594 	.db #0xff	; 255
      00058B FF                    1595 	.db #0xff	; 255
      00058C FF                    1596 	.db #0xff	; 255
      00058D 55                    1597 	.db #0x55	; 85	'U'
      00058E 55                    1598 	.db #0x55	; 85	'U'
      00058F 55                    1599 	.db #0x55	; 85	'U'
      000590                       1600 _pattern_31:
      000590 20                    1601 	.db #0x20	; 32
      000591 20                    1602 	.db #0x20	; 32
      000592 E0                    1603 	.db #0xe0	; 224
      000593 E0                    1604 	.db #0xe0	; 224
      000594 E0                    1605 	.db #0xe0	; 224
      000595 20                    1606 	.db #0x20	; 32
      000596 20                    1607 	.db #0x20	; 32
      000597 20                    1608 	.db #0x20	; 32
      000598                       1609 _pattern_37:
      000598 05                    1610 	.db #0x05	; 5
      000599 05                    1611 	.db #0x05	; 5
      00059A 05                    1612 	.db #0x05	; 5
      00059B 05                    1613 	.db #0x05	; 5
      00059C 04                    1614 	.db #0x04	; 4
      00059D 03                    1615 	.db #0x03	; 3
      00059E 00                    1616 	.db #0x00	; 0
      00059F 06                    1617 	.db #0x06	; 6
      0005A0                       1618 _pattern_38:
      0005A0 55                    1619 	.db #0x55	; 85	'U'
      0005A1 55                    1620 	.db #0x55	; 85	'U'
      0005A2 55                    1621 	.db #0x55	; 85	'U'
      0005A3 55                    1622 	.db #0x55	; 85	'U'
      0005A4 44                    1623 	.db #0x44	; 68	'D'
      0005A5 33                    1624 	.db #0x33	; 51	'3'
      0005A6 00                    1625 	.db #0x00	; 0
      0005A7 00                    1626 	.db #0x00	; 0
      0005A8                       1627 _pattern_39:
      0005A8 20                    1628 	.db #0x20	; 32
      0005A9 20                    1629 	.db #0x20	; 32
      0005AA 20                    1630 	.db #0x20	; 32
      0005AB 20                    1631 	.db #0x20	; 32
      0005AC 20                    1632 	.db #0x20	; 32
      0005AD 40                    1633 	.db #0x40	; 64
      0005AE 00                    1634 	.db #0x00	; 0
      0005AF 60                    1635 	.db #0x60	; 96
      0005B0                       1636 _pattern_32:
      0005B0 03                    1637 	.db #0x03	; 3
      0005B1 39                    1638 	.db #0x39	; 57	'9'
      0005B2 7C                    1639 	.db #0x7c	; 124
      0005B3 E6                    1640 	.db #0xe6	; 230
      0005B4 CE                    1641 	.db #0xce	; 206
      0005B5 E0                    1642 	.db #0xe0	; 224
      0005B6 7F                    1643 	.db #0x7f	; 127
      0005B7 3F                    1644 	.db #0x3f	; 63
      0005B8                       1645 _pattern_33:
      0005B8 FF                    1646 	.db #0xff	; 255
      0005B9 FF                    1647 	.db #0xff	; 255
      0005BA 00                    1648 	.db #0x00	; 0
      0005BB DB                    1649 	.db #0xdb	; 219
      0005BC DB                    1650 	.db #0xdb	; 219
      0005BD 00                    1651 	.db #0x00	; 0
      0005BE FF                    1652 	.db #0xff	; 255
      0005BF FF                    1653 	.db #0xff	; 255
      0005C0                       1654 _pattern_34:
      0005C0 C0                    1655 	.db #0xc0	; 192
      0005C1 9C                    1656 	.db #0x9c	; 156
      0005C2 3E                    1657 	.db #0x3e	; 62
      0005C3 67                    1658 	.db #0x67	; 103	'g'
      0005C4 73                    1659 	.db #0x73	; 115	's'
      0005C5 07                    1660 	.db #0x07	; 7
      0005C6 FE                    1661 	.db #0xfe	; 254
      0005C7 FC                    1662 	.db #0xfc	; 252
      0005C8                       1663 _sprite_dust_0:
      0005C8 10                    1664 	.db #0x10	; 16
      0005C9 42                    1665 	.db #0x42	; 66	'B'
      0005CA 10                    1666 	.db #0x10	; 16
      0005CB 45                    1667 	.db #0x45	; 69	'E'
      0005CC 20                    1668 	.db #0x20	; 32
      0005CD 89                    1669 	.db #0x89	; 137
      0005CE 20                    1670 	.db #0x20	; 32
      0005CF 88                    1671 	.db #0x88	; 136
      0005D0                       1672 _sprite_dust_1:
      0005D0 10                    1673 	.db #0x10	; 16
      0005D1 42                    1674 	.db #0x42	; 66	'B'
      0005D2 00                    1675 	.db #0x00	; 0
      0005D3 04                    1676 	.db #0x04	; 4
      0005D4 20                    1677 	.db #0x20	; 32
      0005D5 81                    1678 	.db #0x81	; 129
      0005D6 20                    1679 	.db #0x20	; 32
      0005D7 08                    1680 	.db #0x08	; 8
      0005D8                       1681 _sprite_dust_2:
      0005D8 10                    1682 	.db #0x10	; 16
      0005D9 00                    1683 	.db #0x00	; 0
      0005DA 00                    1684 	.db #0x00	; 0
      0005DB 04                    1685 	.db #0x04	; 4
      0005DC 20                    1686 	.db #0x20	; 32
      0005DD 80                    1687 	.db #0x80	; 128
      0005DE 20                    1688 	.db #0x20	; 32
      0005DF 00                    1689 	.db #0x00	; 0
      0005E0                       1690 _sprite_dust_3:
      0005E0 10                    1691 	.db #0x10	; 16
      0005E1 00                    1692 	.db #0x00	; 0
      0005E2 00                    1693 	.db #0x00	; 0
      0005E3 04                    1694 	.db #0x04	; 4
      0005E4 00                    1695 	.db #0x00	; 0
      0005E5 00                    1696 	.db #0x00	; 0
      0005E6 20                    1697 	.db #0x20	; 32
      0005E7 00                    1698 	.db #0x00	; 0
      0005E8                       1699 _pattern_title:
      0005E8 FE                    1700 	.db #0xfe	; 254
      0005E9 FE                    1701 	.db #0xfe	; 254
      0005EA FE                    1702 	.db #0xfe	; 254
      0005EB FE                    1703 	.db #0xfe	; 254
      0005EC FE                    1704 	.db #0xfe	; 254
      0005ED FE                    1705 	.db #0xfe	; 254
      0005EE FE                    1706 	.db #0xfe	; 254
      0005EF 00                    1707 	.db #0x00	; 0
      0005F0                       1708 _color_black_0:
      0005F0 14                    1709 	.db #0x14	; 20
      0005F1 14                    1710 	.db #0x14	; 20
      0005F2 14                    1711 	.db #0x14	; 20
      0005F3 14                    1712 	.db #0x14	; 20
      0005F4 14                    1713 	.db #0x14	; 20
      0005F5 14                    1714 	.db #0x14	; 20
      0005F6 14                    1715 	.db #0x14	; 20
      0005F7 14                    1716 	.db #0x14	; 20
      0005F8                       1717 _color_black_1:
      0005F8 14                    1718 	.db #0x14	; 20
      0005F9 14                    1719 	.db #0x14	; 20
      0005FA 14                    1720 	.db #0x14	; 20
      0005FB 14                    1721 	.db #0x14	; 20
      0005FC 14                    1722 	.db #0x14	; 20
      0005FD 14                    1723 	.db #0x14	; 20
      0005FE 14                    1724 	.db #0x14	; 20
      0005FF 14                    1725 	.db #0x14	; 20
      000600                       1726 _color_black_2:
      000600 14                    1727 	.db #0x14	; 20
      000601 14                    1728 	.db #0x14	; 20
      000602 14                    1729 	.db #0x14	; 20
      000603 14                    1730 	.db #0x14	; 20
      000604 14                    1731 	.db #0x14	; 20
      000605 14                    1732 	.db #0x14	; 20
      000606 14                    1733 	.db #0x14	; 20
      000607 14                    1734 	.db #0x14	; 20
      000608                       1735 _color_black_3:
      000608 14                    1736 	.db #0x14	; 20
      000609 14                    1737 	.db #0x14	; 20
      00060A 14                    1738 	.db #0x14	; 20
      00060B 14                    1739 	.db #0x14	; 20
      00060C 14                    1740 	.db #0x14	; 20
      00060D 14                    1741 	.db #0x14	; 20
      00060E 14                    1742 	.db #0x14	; 20
      00060F 14                    1743 	.db #0x14	; 20
      000610                       1744 _color_0:
      000610 13                    1745 	.db #0x13	; 19
      000611 13                    1746 	.db #0x13	; 19
      000612 13                    1747 	.db #0x13	; 19
      000613 13                    1748 	.db #0x13	; 19
      000614 13                    1749 	.db #0x13	; 19
      000615 13                    1750 	.db #0x13	; 19
      000616 13                    1751 	.db #0x13	; 19
      000617 13                    1752 	.db #0x13	; 19
      000618                       1753 _color_1:
      000618 12                    1754 	.db #0x12	; 18
      000619 12                    1755 	.db #0x12	; 18
      00061A 12                    1756 	.db #0x12	; 18
      00061B 12                    1757 	.db #0x12	; 18
      00061C 12                    1758 	.db #0x12	; 18
      00061D 12                    1759 	.db #0x12	; 18
      00061E 12                    1760 	.db #0x12	; 18
      00061F 12                    1761 	.db #0x12	; 18
      000620                       1762 _color_2:
      000620 12                    1763 	.db #0x12	; 18
      000621 12                    1764 	.db #0x12	; 18
      000622 12                    1765 	.db #0x12	; 18
      000623 12                    1766 	.db #0x12	; 18
      000624 12                    1767 	.db #0x12	; 18
      000625 12                    1768 	.db #0x12	; 18
      000626 12                    1769 	.db #0x12	; 18
      000627 12                    1770 	.db #0x12	; 18
      000628                       1771 _color_3:
      000628 1C                    1772 	.db #0x1c	; 28
      000629 1C                    1773 	.db #0x1c	; 28
      00062A 1C                    1774 	.db #0x1c	; 28
      00062B 1C                    1775 	.db #0x1c	; 28
      00062C 1C                    1776 	.db #0x1c	; 28
      00062D 1C                    1777 	.db #0x1c	; 28
      00062E 1C                    1778 	.db #0x1c	; 28
      00062F 1C                    1779 	.db #0x1c	; 28
      000630                       1780 _color_4:
      000630 96                    1781 	.db #0x96	; 150
      000631 96                    1782 	.db #0x96	; 150
      000632 96                    1783 	.db #0x96	; 150
      000633 96                    1784 	.db #0x96	; 150
      000634 96                    1785 	.db #0x96	; 150
      000635 96                    1786 	.db #0x96	; 150
      000636 96                    1787 	.db #0x96	; 150
      000637 96                    1788 	.db #0x96	; 150
      000638                       1789 _color_5:
      000638 98                    1790 	.db #0x98	; 152
      000639 68                    1791 	.db #0x68	; 104	'h'
      00063A 68                    1792 	.db #0x68	; 104	'h'
      00063B 68                    1793 	.db #0x68	; 104	'h'
      00063C 68                    1794 	.db #0x68	; 104	'h'
      00063D 68                    1795 	.db #0x68	; 104	'h'
      00063E 68                    1796 	.db #0x68	; 104	'h'
      00063F 68                    1797 	.db #0x68	; 104	'h'
      000640                       1798 _color_6:
      000640 68                    1799 	.db #0x68	; 104	'h'
      000641 68                    1800 	.db #0x68	; 104	'h'
      000642 68                    1801 	.db #0x68	; 104	'h'
      000643 68                    1802 	.db #0x68	; 104	'h'
      000644 68                    1803 	.db #0x68	; 104	'h'
      000645 68                    1804 	.db #0x68	; 104	'h'
      000646 68                    1805 	.db #0x68	; 104	'h'
      000647 68                    1806 	.db #0x68	; 104	'h'
      000648                       1807 _color_7:
      000648 89                    1808 	.db #0x89	; 137
      000649 89                    1809 	.db #0x89	; 137
      00064A 89                    1810 	.db #0x89	; 137
      00064B 89                    1811 	.db #0x89	; 137
      00064C 89                    1812 	.db #0x89	; 137
      00064D 89                    1813 	.db #0x89	; 137
      00064E 89                    1814 	.db #0x89	; 137
      00064F 86                    1815 	.db #0x86	; 134
      000650                       1816 _color_8:
      000650 41                    1817 	.db #0x41	; 65	'A'
      000651 47                    1818 	.db #0x47	; 71	'G'
      000652 47                    1819 	.db #0x47	; 71	'G'
      000653 47                    1820 	.db #0x47	; 71	'G'
      000654 47                    1821 	.db #0x47	; 71	'G'
      000655 47                    1822 	.db #0x47	; 71	'G'
      000656 47                    1823 	.db #0x47	; 71	'G'
      000657 47                    1824 	.db #0x47	; 71	'G'
      000658                       1825 _color_9:
      000658 41                    1826 	.db #0x41	; 65	'A'
      000659 45                    1827 	.db #0x45	; 69	'E'
      00065A 47                    1828 	.db #0x47	; 71	'G'
      00065B 47                    1829 	.db #0x47	; 71	'G'
      00065C 45                    1830 	.db #0x45	; 69	'E'
      00065D 45                    1831 	.db #0x45	; 69	'E'
      00065E 41                    1832 	.db #0x41	; 65	'A'
      00065F 45                    1833 	.db #0x45	; 69	'E'
      000660                       1834 _color_10:
      000660 47                    1835 	.db #0x47	; 71	'G'
      000661 45                    1836 	.db #0x45	; 69	'E'
      000662 45                    1837 	.db #0x45	; 69	'E'
      000663 45                    1838 	.db #0x45	; 69	'E'
      000664 45                    1839 	.db #0x45	; 69	'E'
      000665 41                    1840 	.db #0x41	; 65	'A'
      000666 45                    1841 	.db #0x45	; 69	'E'
      000667 41                    1842 	.db #0x41	; 65	'A'
      000668                       1843 _color_11:
      000668 41                    1844 	.db #0x41	; 65	'A'
      000669 41                    1845 	.db #0x41	; 65	'A'
      00066A 41                    1846 	.db #0x41	; 65	'A'
      00066B 41                    1847 	.db #0x41	; 65	'A'
      00066C 41                    1848 	.db #0x41	; 65	'A'
      00066D 41                    1849 	.db #0x41	; 65	'A'
      00066E 41                    1850 	.db #0x41	; 65	'A'
      00066F 41                    1851 	.db #0x41	; 65	'A'
      000670                       1852 _color_12:
      000670 D1                    1853 	.db #0xd1	; 209
      000671 DF                    1854 	.db #0xdf	; 223
      000672 DF                    1855 	.db #0xdf	; 223
      000673 DF                    1856 	.db #0xdf	; 223
      000674 DF                    1857 	.db #0xdf	; 223
      000675 DF                    1858 	.db #0xdf	; 223
      000676 DF                    1859 	.db #0xdf	; 223
      000677 DF                    1860 	.db #0xdf	; 223
      000678                       1861 _color_13:
      000678 D1                    1862 	.db #0xd1	; 209
      000679 DF                    1863 	.db #0xdf	; 223
      00067A DF                    1864 	.db #0xdf	; 223
      00067B DF                    1865 	.db #0xdf	; 223
      00067C DF                    1866 	.db #0xdf	; 223
      00067D DF                    1867 	.db #0xdf	; 223
      00067E DF                    1868 	.db #0xdf	; 223
      00067F DF                    1869 	.db #0xdf	; 223
      000680                       1870 _color_14:
      000680 DF                    1871 	.db #0xdf	; 223
      000681 DF                    1872 	.db #0xdf	; 223
      000682 DF                    1873 	.db #0xdf	; 223
      000683 D1                    1874 	.db #0xd1	; 209
      000684 D1                    1875 	.db #0xd1	; 209
      000685 D1                    1876 	.db #0xd1	; 209
      000686 D1                    1877 	.db #0xd1	; 209
      000687 D1                    1878 	.db #0xd1	; 209
      000688                       1879 _color_15:
      000688 D1                    1880 	.db #0xd1	; 209
      000689 D1                    1881 	.db #0xd1	; 209
      00068A D1                    1882 	.db #0xd1	; 209
      00068B D1                    1883 	.db #0xd1	; 209
      00068C D1                    1884 	.db #0xd1	; 209
      00068D D1                    1885 	.db #0xd1	; 209
      00068E D1                    1886 	.db #0xd1	; 209
      00068F D1                    1887 	.db #0xd1	; 209
      000690                       1888 _color_16:
      000690 A1                    1889 	.db #0xa1	; 161
      000691 BF                    1890 	.db #0xbf	; 191
      000692 BF                    1891 	.db #0xbf	; 191
      000693 BF                    1892 	.db #0xbf	; 191
      000694 BF                    1893 	.db #0xbf	; 191
      000695 BF                    1894 	.db #0xbf	; 191
      000696 BF                    1895 	.db #0xbf	; 191
      000697 BF                    1896 	.db #0xbf	; 191
      000698                       1897 _color_17:
      000698 A1                    1898 	.db #0xa1	; 161
      000699 AF                    1899 	.db #0xaf	; 175
      00069A AF                    1900 	.db #0xaf	; 175
      00069B A1                    1901 	.db #0xa1	; 161
      00069C A1                    1902 	.db #0xa1	; 161
      00069D A1                    1903 	.db #0xa1	; 161
      00069E A1                    1904 	.db #0xa1	; 161
      00069F A1                    1905 	.db #0xa1	; 161
      0006A0                       1906 _color_18:
      0006A0 AF                    1907 	.db #0xaf	; 175
      0006A1 AF                    1908 	.db #0xaf	; 175
      0006A2 AF                    1909 	.db #0xaf	; 175
      0006A3 AF                    1910 	.db #0xaf	; 175
      0006A4 A1                    1911 	.db #0xa1	; 161
      0006A5 A1                    1912 	.db #0xa1	; 161
      0006A6 A1                    1913 	.db #0xa1	; 161
      0006A7 A1                    1914 	.db #0xa1	; 161
      0006A8                       1915 _color_19:
      0006A8 B1                    1916 	.db #0xb1	; 177
      0006A9 B1                    1917 	.db #0xb1	; 177
      0006AA B1                    1918 	.db #0xb1	; 177
      0006AB B1                    1919 	.db #0xb1	; 177
      0006AC B1                    1920 	.db #0xb1	; 177
      0006AD B1                    1921 	.db #0xb1	; 177
      0006AE B1                    1922 	.db #0xb1	; 177
      0006AF B1                    1923 	.db #0xb1	; 177
      0006B0                       1924 _color_column_1:
      0006B0 F1                    1925 	.db #0xf1	; 241
      0006B1 E1                    1926 	.db #0xe1	; 225
      0006B2 E1                    1927 	.db #0xe1	; 225
      0006B3 E1                    1928 	.db #0xe1	; 225
      0006B4 E1                    1929 	.db #0xe1	; 225
      0006B5 E1                    1930 	.db #0xe1	; 225
      0006B6 E1                    1931 	.db #0xe1	; 225
      0006B7 E1                    1932 	.db #0xe1	; 225
      0006B8                       1933 _color_column_2:
      0006B8 F1                    1934 	.db #0xf1	; 241
      0006B9 E1                    1935 	.db #0xe1	; 225
      0006BA E1                    1936 	.db #0xe1	; 225
      0006BB E1                    1937 	.db #0xe1	; 225
      0006BC E1                    1938 	.db #0xe1	; 225
      0006BD E1                    1939 	.db #0xe1	; 225
      0006BE E1                    1940 	.db #0xe1	; 225
      0006BF E1                    1941 	.db #0xe1	; 225
      0006C0                       1942 _color_column_3:
      0006C0 F1                    1943 	.db #0xf1	; 241
      0006C1 E1                    1944 	.db #0xe1	; 225
      0006C2 E1                    1945 	.db #0xe1	; 225
      0006C3 E1                    1946 	.db #0xe1	; 225
      0006C4 E1                    1947 	.db #0xe1	; 225
      0006C5 E1                    1948 	.db #0xe1	; 225
      0006C6 E1                    1949 	.db #0xe1	; 225
      0006C7 E1                    1950 	.db #0xe1	; 225
      0006C8                       1951 _color_column_4:
      0006C8 F1                    1952 	.db #0xf1	; 241
      0006C9 F1                    1953 	.db #0xf1	; 241
      0006CA F1                    1954 	.db #0xf1	; 241
      0006CB F1                    1955 	.db #0xf1	; 241
      0006CC F1                    1956 	.db #0xf1	; 241
      0006CD F1                    1957 	.db #0xf1	; 241
      0006CE F1                    1958 	.db #0xf1	; 241
      0006CF F1                    1959 	.db #0xf1	; 241
      0006D0                       1960 _color_column_5:
      0006D0 E1                    1961 	.db #0xe1	; 225
      0006D1 E1                    1962 	.db #0xe1	; 225
      0006D2 E1                    1963 	.db #0xe1	; 225
      0006D3 E1                    1964 	.db #0xe1	; 225
      0006D4 E1                    1965 	.db #0xe1	; 225
      0006D5 E1                    1966 	.db #0xe1	; 225
      0006D6 E1                    1967 	.db #0xe1	; 225
      0006D7 E1                    1968 	.db #0xe1	; 225
      0006D8                       1969 _color_column_6:
      0006D8 E1                    1970 	.db #0xe1	; 225
      0006D9 E1                    1971 	.db #0xe1	; 225
      0006DA E1                    1972 	.db #0xe1	; 225
      0006DB 41                    1973 	.db #0x41	; 65	'A'
      0006DC 41                    1974 	.db #0x41	; 65	'A'
      0006DD 41                    1975 	.db #0x41	; 65	'A'
      0006DE 41                    1976 	.db #0x41	; 65	'A'
      0006DF 41                    1977 	.db #0x41	; 65	'A'
      0006E0                       1978 _color_column_7:
      0006E0 F1                    1979 	.db #0xf1	; 241
      0006E1 F1                    1980 	.db #0xf1	; 241
      0006E2 F1                    1981 	.db #0xf1	; 241
      0006E3 F1                    1982 	.db #0xf1	; 241
      0006E4 F1                    1983 	.db #0xf1	; 241
      0006E5 F1                    1984 	.db #0xf1	; 241
      0006E6 F1                    1985 	.db #0xf1	; 241
      0006E7 F1                    1986 	.db #0xf1	; 241
      0006E8                       1987 _color_column_8:
      0006E8 E1                    1988 	.db #0xe1	; 225
      0006E9 E1                    1989 	.db #0xe1	; 225
      0006EA E1                    1990 	.db #0xe1	; 225
      0006EB F1                    1991 	.db #0xf1	; 241
      0006EC E1                    1992 	.db #0xe1	; 225
      0006ED E1                    1993 	.db #0xe1	; 225
      0006EE E1                    1994 	.db #0xe1	; 225
      0006EF E1                    1995 	.db #0xe1	; 225
      0006F0                       1996 _color_column_9:
      0006F0 41                    1997 	.db #0x41	; 65	'A'
      0006F1 41                    1998 	.db #0x41	; 65	'A'
      0006F2 41                    1999 	.db #0x41	; 65	'A'
      0006F3 F1                    2000 	.db #0xf1	; 241
      0006F4 41                    2001 	.db #0x41	; 65	'A'
      0006F5 41                    2002 	.db #0x41	; 65	'A'
      0006F6 41                    2003 	.db #0x41	; 65	'A'
      0006F7 41                    2004 	.db #0x41	; 65	'A'
      0006F8                       2005 _color_column_10:
      0006F8 F1                    2006 	.db #0xf1	; 241
      0006F9 F1                    2007 	.db #0xf1	; 241
      0006FA F1                    2008 	.db #0xf1	; 241
      0006FB F1                    2009 	.db #0xf1	; 241
      0006FC F1                    2010 	.db #0xf1	; 241
      0006FD F1                    2011 	.db #0xf1	; 241
      0006FE F1                    2012 	.db #0xf1	; 241
      0006FF F1                    2013 	.db #0xf1	; 241
      000700                       2014 _color_column_11:
      000700 E1                    2015 	.db #0xe1	; 225
      000701 E1                    2016 	.db #0xe1	; 225
      000702 E1                    2017 	.db #0xe1	; 225
      000703 E1                    2018 	.db #0xe1	; 225
      000704 E1                    2019 	.db #0xe1	; 225
      000705 E1                    2020 	.db #0xe1	; 225
      000706 E1                    2021 	.db #0xe1	; 225
      000707 E1                    2022 	.db #0xe1	; 225
      000708                       2023 _color_column_12:
      000708 41                    2024 	.db #0x41	; 65	'A'
      000709 41                    2025 	.db #0x41	; 65	'A'
      00070A 41                    2026 	.db #0x41	; 65	'A'
      00070B 41                    2027 	.db #0x41	; 65	'A'
      00070C 41                    2028 	.db #0x41	; 65	'A'
      00070D 41                    2029 	.db #0x41	; 65	'A'
      00070E 41                    2030 	.db #0x41	; 65	'A'
      00070F 41                    2031 	.db #0x41	; 65	'A'
      000710                       2032 _color_column_16:
      000710 F1                    2033 	.db #0xf1	; 241
      000711 F1                    2034 	.db #0xf1	; 241
      000712 F1                    2035 	.db #0xf1	; 241
      000713 F1                    2036 	.db #0xf1	; 241
      000714 F1                    2037 	.db #0xf1	; 241
      000715 F1                    2038 	.db #0xf1	; 241
      000716 F1                    2039 	.db #0xf1	; 241
      000717 F1                    2040 	.db #0xf1	; 241
      000718                       2041 _color_column_17:
      000718 E1                    2042 	.db #0xe1	; 225
      000719 E1                    2043 	.db #0xe1	; 225
      00071A E1                    2044 	.db #0xe1	; 225
      00071B E1                    2045 	.db #0xe1	; 225
      00071C E1                    2046 	.db #0xe1	; 225
      00071D E1                    2047 	.db #0xe1	; 225
      00071E E1                    2048 	.db #0xe1	; 225
      00071F E1                    2049 	.db #0xe1	; 225
      000720                       2050 _color_column_18:
      000720 41                    2051 	.db #0x41	; 65	'A'
      000721 41                    2052 	.db #0x41	; 65	'A'
      000722 41                    2053 	.db #0x41	; 65	'A'
      000723 41                    2054 	.db #0x41	; 65	'A'
      000724 41                    2055 	.db #0x41	; 65	'A'
      000725 E1                    2056 	.db #0xe1	; 225
      000726 E1                    2057 	.db #0xe1	; 225
      000727 E1                    2058 	.db #0xe1	; 225
      000728                       2059 _color_column_13:
      000728 E1                    2060 	.db #0xe1	; 225
      000729 E1                    2061 	.db #0xe1	; 225
      00072A E1                    2062 	.db #0xe1	; 225
      00072B E1                    2063 	.db #0xe1	; 225
      00072C E1                    2064 	.db #0xe1	; 225
      00072D E1                    2065 	.db #0xe1	; 225
      00072E E1                    2066 	.db #0xe1	; 225
      00072F F1                    2067 	.db #0xf1	; 241
      000730                       2068 _color_column_14:
      000730 E1                    2069 	.db #0xe1	; 225
      000731 E1                    2070 	.db #0xe1	; 225
      000732 E1                    2071 	.db #0xe1	; 225
      000733 E1                    2072 	.db #0xe1	; 225
      000734 E1                    2073 	.db #0xe1	; 225
      000735 E1                    2074 	.db #0xe1	; 225
      000736 E1                    2075 	.db #0xe1	; 225
      000737 F1                    2076 	.db #0xf1	; 241
      000738                       2077 _color_column_15:
      000738 E1                    2078 	.db #0xe1	; 225
      000739 E1                    2079 	.db #0xe1	; 225
      00073A E1                    2080 	.db #0xe1	; 225
      00073B E1                    2081 	.db #0xe1	; 225
      00073C E1                    2082 	.db #0xe1	; 225
      00073D E1                    2083 	.db #0xe1	; 225
      00073E E1                    2084 	.db #0xe1	; 225
      00073F F1                    2085 	.db #0xf1	; 241
      000740                       2086 _color_dust_0:
      000740 F1                    2087 	.db #0xf1	; 241
      000741 F1                    2088 	.db #0xf1	; 241
      000742 F1                    2089 	.db #0xf1	; 241
      000743 F1                    2090 	.db #0xf1	; 241
      000744 F1                    2091 	.db #0xf1	; 241
      000745 F1                    2092 	.db #0xf1	; 241
      000746 F1                    2093 	.db #0xf1	; 241
      000747 F1                    2094 	.db #0xf1	; 241
      000748                       2095 _color_dust_1:
      000748 F1                    2096 	.db #0xf1	; 241
      000749 F1                    2097 	.db #0xf1	; 241
      00074A F1                    2098 	.db #0xf1	; 241
      00074B F1                    2099 	.db #0xf1	; 241
      00074C F1                    2100 	.db #0xf1	; 241
      00074D F1                    2101 	.db #0xf1	; 241
      00074E F1                    2102 	.db #0xf1	; 241
      00074F F1                    2103 	.db #0xf1	; 241
      000750                       2104 _color_dust_2:
      000750 F1                    2105 	.db #0xf1	; 241
      000751 F1                    2106 	.db #0xf1	; 241
      000752 F1                    2107 	.db #0xf1	; 241
      000753 F1                    2108 	.db #0xf1	; 241
      000754 F1                    2109 	.db #0xf1	; 241
      000755 F1                    2110 	.db #0xf1	; 241
      000756 F1                    2111 	.db #0xf1	; 241
      000757 F1                    2112 	.db #0xf1	; 241
      000758                       2113 _color_dust_3:
      000758 F1                    2114 	.db #0xf1	; 241
      000759 F1                    2115 	.db #0xf1	; 241
      00075A F1                    2116 	.db #0xf1	; 241
      00075B F1                    2117 	.db #0xf1	; 241
      00075C F1                    2118 	.db #0xf1	; 241
      00075D F1                    2119 	.db #0xf1	; 241
      00075E F1                    2120 	.db #0xf1	; 241
      00075F F1                    2121 	.db #0xf1	; 241
      000760                       2122 _color_font_1:
      000760 F1                    2123 	.db #0xf1	; 241
      000761 F1                    2124 	.db #0xf1	; 241
      000762 E1                    2125 	.db #0xe1	; 225
      000763 71                    2126 	.db #0x71	; 113	'q'
      000764 71                    2127 	.db #0x71	; 113	'q'
      000765 51                    2128 	.db #0x51	; 81	'Q'
      000766 51                    2129 	.db #0x51	; 81	'Q'
      000767 41                    2130 	.db #0x41	; 65	'A'
      000768                       2131 _color_font_2:
      000768 61                    2132 	.db #0x61	; 97	'a'
      000769 61                    2133 	.db #0x61	; 97	'a'
      00076A 81                    2134 	.db #0x81	; 129
      00076B 81                    2135 	.db #0x81	; 129
      00076C 91                    2136 	.db #0x91	; 145
      00076D 91                    2137 	.db #0x91	; 145
      00076E E1                    2138 	.db #0xe1	; 225
      00076F E1                    2139 	.db #0xe1	; 225
      000770                       2140 _color_title_1:
      000770 A1                    2141 	.db #0xa1	; 161
      000771 A1                    2142 	.db #0xa1	; 161
      000772 A1                    2143 	.db #0xa1	; 161
      000773 A1                    2144 	.db #0xa1	; 161
      000774 A1                    2145 	.db #0xa1	; 161
      000775 A1                    2146 	.db #0xa1	; 161
      000776 A1                    2147 	.db #0xa1	; 161
      000777 A1                    2148 	.db #0xa1	; 161
      000778                       2149 _color_title_2:
      000778 B1                    2150 	.db #0xb1	; 177
      000779 B1                    2151 	.db #0xb1	; 177
      00077A B1                    2152 	.db #0xb1	; 177
      00077B B1                    2153 	.db #0xb1	; 177
      00077C B1                    2154 	.db #0xb1	; 177
      00077D B1                    2155 	.db #0xb1	; 177
      00077E B1                    2156 	.db #0xb1	; 177
      00077F B1                    2157 	.db #0xb1	; 177
      000780                       2158 _color_title_3:
      000780 D1                    2159 	.db #0xd1	; 209
      000781 D1                    2160 	.db #0xd1	; 209
      000782 D1                    2161 	.db #0xd1	; 209
      000783 D1                    2162 	.db #0xd1	; 209
      000784 D1                    2163 	.db #0xd1	; 209
      000785 D1                    2164 	.db #0xd1	; 209
      000786 D1                    2165 	.db #0xd1	; 209
      000787 D1                    2166 	.db #0xd1	; 209
      000788                       2167 _color_title_4:
      000788 F1                    2168 	.db #0xf1	; 241
      000789 F1                    2169 	.db #0xf1	; 241
      00078A F1                    2170 	.db #0xf1	; 241
      00078B F1                    2171 	.db #0xf1	; 241
      00078C F1                    2172 	.db #0xf1	; 241
      00078D F1                    2173 	.db #0xf1	; 241
      00078E F1                    2174 	.db #0xf1	; 241
      00078F F1                    2175 	.db #0xf1	; 241
      000790                       2176 _color_title_5:
      000790 71                    2177 	.db #0x71	; 113	'q'
      000791 71                    2178 	.db #0x71	; 113	'q'
      000792 71                    2179 	.db #0x71	; 113	'q'
      000793 71                    2180 	.db #0x71	; 113	'q'
      000794 71                    2181 	.db #0x71	; 113	'q'
      000795 71                    2182 	.db #0x71	; 113	'q'
      000796 71                    2183 	.db #0x71	; 113	'q'
      000797 71                    2184 	.db #0x71	; 113	'q'
      000798                       2185 _color_title_6:
      000798 51                    2186 	.db #0x51	; 81	'Q'
      000799 51                    2187 	.db #0x51	; 81	'Q'
      00079A 51                    2188 	.db #0x51	; 81	'Q'
      00079B 51                    2189 	.db #0x51	; 81	'Q'
      00079C 51                    2190 	.db #0x51	; 81	'Q'
      00079D 51                    2191 	.db #0x51	; 81	'Q'
      00079E 51                    2192 	.db #0x51	; 81	'Q'
      00079F 51                    2193 	.db #0x51	; 81	'Q'
      0007A0                       2194 _color_title_7:
      0007A0 41                    2195 	.db #0x41	; 65	'A'
      0007A1 41                    2196 	.db #0x41	; 65	'A'
      0007A2 41                    2197 	.db #0x41	; 65	'A'
      0007A3 41                    2198 	.db #0x41	; 65	'A'
      0007A4 41                    2199 	.db #0x41	; 65	'A'
      0007A5 41                    2200 	.db #0x41	; 65	'A'
      0007A6 41                    2201 	.db #0x41	; 65	'A'
      0007A7 41                    2202 	.db #0x41	; 65	'A'
      0007A8                       2203 _sprite_arrow_0:
      0007A8 00                    2204 	.db #0x00	; 0
      0007A9 00                    2205 	.db #0x00	; 0
      0007AA 00                    2206 	.db #0x00	; 0
      0007AB 00                    2207 	.db #0x00	; 0
      0007AC 00                    2208 	.db #0x00	; 0
      0007AD 00                    2209 	.db #0x00	; 0
      0007AE 00                    2210 	.db #0x00	; 0
      0007AF 00                    2211 	.db #0x00	; 0
      0007B0                       2212 _sprite_arrow_1:
      0007B0 FF                    2213 	.db #0xff	; 255
      0007B1 00                    2214 	.db #0x00	; 0
      0007B2 3F                    2215 	.db #0x3f	; 63
      0007B3 00                    2216 	.db #0x00	; 0
      0007B4 0F                    2217 	.db #0x0f	; 15
      0007B5 00                    2218 	.db #0x00	; 0
      0007B6 03                    2219 	.db #0x03	; 3
      0007B7 00                    2220 	.db #0x00	; 0
      0007B8                       2221 _sprite_arrow_2:
      0007B8 00                    2222 	.db #0x00	; 0
      0007B9 00                    2223 	.db #0x00	; 0
      0007BA 00                    2224 	.db #0x00	; 0
      0007BB 00                    2225 	.db #0x00	; 0
      0007BC 00                    2226 	.db #0x00	; 0
      0007BD 00                    2227 	.db #0x00	; 0
      0007BE 00                    2228 	.db #0x00	; 0
      0007BF 00                    2229 	.db #0x00	; 0
      0007C0                       2230 _sprite_arrow_3:
      0007C0 FF                    2231 	.db #0xff	; 255
      0007C1 00                    2232 	.db #0x00	; 0
      0007C2 FC                    2233 	.db #0xfc	; 252
      0007C3 00                    2234 	.db #0x00	; 0
      0007C4 F0                    2235 	.db #0xf0	; 240
      0007C5 00                    2236 	.db #0x00	; 0
      0007C6 C0                    2237 	.db #0xc0	; 192
      0007C7 00                    2238 	.db #0x00	; 0
      0007C8                       2239 _sprite_hit_1:
      0007C8 00                    2240 	.db #0x00	; 0
      0007C9 77                    2241 	.db #0x77	; 119	'w'
      0007CA 22                    2242 	.db #0x22	; 34
      0007CB 22                    2243 	.db #0x22	; 34
      0007CC 22                    2244 	.db #0x22	; 34
      0007CD 3E                    2245 	.db #0x3e	; 62
      0007CE 22                    2246 	.db #0x22	; 34
      0007CF 22                    2247 	.db #0x22	; 34
      0007D0 22                    2248 	.db #0x22	; 34
      0007D1 77                    2249 	.db #0x77	; 119	'w'
      0007D2 00                    2250 	.db #0x00	; 0
      0007D3 00                    2251 	.db #0x00	; 0
      0007D4 00                    2252 	.db #0x00	; 0
      0007D5 00                    2253 	.db #0x00	; 0
      0007D6 00                    2254 	.db #0x00	; 0
      0007D7 00                    2255 	.db #0x00	; 0
      0007D8 00                    2256 	.db #0x00	; 0
      0007D9 77                    2257 	.db #0x77	; 119	'w'
      0007DA 25                    2258 	.db #0x25	; 37
      0007DB 21                    2259 	.db #0x21	; 33
      0007DC 21                    2260 	.db #0x21	; 33
      0007DD 21                    2261 	.db #0x21	; 33
      0007DE 21                    2262 	.db #0x21	; 33
      0007DF 21                    2263 	.db #0x21	; 33
      0007E0 21                    2264 	.db #0x21	; 33
      0007E1 73                    2265 	.db #0x73	; 115	's'
      0007E2 00                    2266 	.db #0x00	; 0
      0007E3 00                    2267 	.db #0x00	; 0
      0007E4 00                    2268 	.db #0x00	; 0
      0007E5 00                    2269 	.db #0x00	; 0
      0007E6 00                    2270 	.db #0x00	; 0
      0007E7 00                    2271 	.db #0x00	; 0
      0007E8                       2272 _sprite_hit_2:
      0007E8 00                    2273 	.db #0x00	; 0
      0007E9 C0                    2274 	.db #0xc0	; 192
      0007EA 40                    2275 	.db #0x40	; 64
      0007EB 00                    2276 	.db #0x00	; 0
      0007EC 00                    2277 	.db #0x00	; 0
      0007ED 00                    2278 	.db #0x00	; 0
      0007EE 00                    2279 	.db #0x00	; 0
      0007EF 00                    2280 	.db #0x00	; 0
      0007F0 00                    2281 	.db #0x00	; 0
      0007F1 80                    2282 	.db #0x80	; 128
      0007F2 00                    2283 	.db #0x00	; 0
      0007F3 00                    2284 	.db #0x00	; 0
      0007F4 00                    2285 	.db #0x00	; 0
      0007F5 00                    2286 	.db #0x00	; 0
      0007F6 00                    2287 	.db #0x00	; 0
      0007F7 00                    2288 	.db #0x00	; 0
      0007F8 00                    2289 	.db #0x00	; 0
      0007F9 00                    2290 	.db #0x00	; 0
      0007FA 00                    2291 	.db #0x00	; 0
      0007FB 00                    2292 	.db #0x00	; 0
      0007FC 00                    2293 	.db #0x00	; 0
      0007FD 00                    2294 	.db #0x00	; 0
      0007FE 00                    2295 	.db #0x00	; 0
      0007FF 00                    2296 	.db #0x00	; 0
      000800 00                    2297 	.db #0x00	; 0
      000801 00                    2298 	.db #0x00	; 0
      000802 00                    2299 	.db #0x00	; 0
      000803 00                    2300 	.db #0x00	; 0
      000804 00                    2301 	.db #0x00	; 0
      000805 00                    2302 	.db #0x00	; 0
      000806 00                    2303 	.db #0x00	; 0
      000807 00                    2304 	.db #0x00	; 0
      000808                       2305 _sprite_combo_1:
      000808 00                    2306 	.db #0x00	; 0
      000809 38                    2307 	.db #0x38	; 56	'8'
      00080A 65                    2308 	.db #0x65	; 101	'e'
      00080B 61                    2309 	.db #0x61	; 97	'a'
      00080C 61                    2310 	.db #0x61	; 97	'a'
      00080D 61                    2311 	.db #0x61	; 97	'a'
      00080E 61                    2312 	.db #0x61	; 97	'a'
      00080F 61                    2313 	.db #0x61	; 97	'a'
      000810 65                    2314 	.db #0x65	; 101	'e'
      000811 38                    2315 	.db #0x38	; 56	'8'
      000812 00                    2316 	.db #0x00	; 0
      000813 00                    2317 	.db #0x00	; 0
      000814 00                    2318 	.db #0x00	; 0
      000815 00                    2319 	.db #0x00	; 0
      000816 00                    2320 	.db #0x00	; 0
      000817 00                    2321 	.db #0x00	; 0
      000818 00                    2322 	.db #0x00	; 0
      000819 E6                    2323 	.db #0xe6	; 230
      00081A 13                    2324 	.db #0x13	; 19
      00081B 12                    2325 	.db #0x12	; 18
      00081C 12                    2326 	.db #0x12	; 18
      00081D 12                    2327 	.db #0x12	; 18
      00081E 12                    2328 	.db #0x12	; 18
      00081F 12                    2329 	.db #0x12	; 18
      000820 12                    2330 	.db #0x12	; 18
      000821 E7                    2331 	.db #0xe7	; 231
      000822 00                    2332 	.db #0x00	; 0
      000823 00                    2333 	.db #0x00	; 0
      000824 00                    2334 	.db #0x00	; 0
      000825 00                    2335 	.db #0x00	; 0
      000826 00                    2336 	.db #0x00	; 0
      000827 00                    2337 	.db #0x00	; 0
      000828                       2338 _sprite_combo_2:
      000828 00                    2339 	.db #0x00	; 0
      000829 37                    2340 	.db #0x37	; 55	'7'
      00082A 62                    2341 	.db #0x62	; 98	'b'
      00082B A2                    2342 	.db #0xa2	; 162
      00082C 22                    2343 	.db #0x22	; 34
      00082D 23                    2344 	.db #0x23	; 35
      00082E 22                    2345 	.db #0x22	; 34
      00082F 22                    2346 	.db #0x22	; 34
      000830 22                    2347 	.db #0x22	; 34
      000831 77                    2348 	.db #0x77	; 119	'w'
      000832 00                    2349 	.db #0x00	; 0
      000833 00                    2350 	.db #0x00	; 0
      000834 00                    2351 	.db #0x00	; 0
      000835 00                    2352 	.db #0x00	; 0
      000836 00                    2353 	.db #0x00	; 0
      000837 00                    2354 	.db #0x00	; 0
      000838 00                    2355 	.db #0x00	; 0
      000839 8E                    2356 	.db #0x8e	; 142
      00083A 51                    2357 	.db #0x51	; 81	'Q'
      00083B 51                    2358 	.db #0x51	; 81	'Q'
      00083C 51                    2359 	.db #0x51	; 81	'Q'
      00083D 91                    2360 	.db #0x91	; 145
      00083E 51                    2361 	.db #0x51	; 81	'Q'
      00083F 51                    2362 	.db #0x51	; 81	'Q'
      000840 51                    2363 	.db #0x51	; 81	'Q'
      000841 8E                    2364 	.db #0x8e	; 142
      000842 00                    2365 	.db #0x00	; 0
      000843 00                    2366 	.db #0x00	; 0
      000844 00                    2367 	.db #0x00	; 0
      000845 00                    2368 	.db #0x00	; 0
      000846 00                    2369 	.db #0x00	; 0
      000847 00                    2370 	.db #0x00	; 0
      000848                       2371 _sprite_2x:
      000848 00                    2372 	.db #0x00	; 0
      000849 3E                    2373 	.db #0x3e	; 62
      00084A 63                    2374 	.db #0x63	; 99	'c'
      00084B 03                    2375 	.db #0x03	; 3
      00084C 03                    2376 	.db #0x03	; 3
      00084D 1E                    2377 	.db #0x1e	; 30
      00084E 30                    2378 	.db #0x30	; 48	'0'
      00084F 60                    2379 	.db #0x60	; 96
      000850 60                    2380 	.db #0x60	; 96
      000851 7F                    2381 	.db #0x7f	; 127
      000852 00                    2382 	.db #0x00	; 0
      000853 00                    2383 	.db #0x00	; 0
      000854 00                    2384 	.db #0x00	; 0
      000855 00                    2385 	.db #0x00	; 0
      000856 00                    2386 	.db #0x00	; 0
      000857 00                    2387 	.db #0x00	; 0
      000858 00                    2388 	.db #0x00	; 0
      000859 00                    2389 	.db #0x00	; 0
      00085A 00                    2390 	.db #0x00	; 0
      00085B 63                    2391 	.db #0x63	; 99	'c'
      00085C 36                    2392 	.db #0x36	; 54	'6'
      00085D 1C                    2393 	.db #0x1c	; 28
      00085E 08                    2394 	.db #0x08	; 8
      00085F 1C                    2395 	.db #0x1c	; 28
      000860 36                    2396 	.db #0x36	; 54	'6'
      000861 63                    2397 	.db #0x63	; 99	'c'
      000862 00                    2398 	.db #0x00	; 0
      000863 00                    2399 	.db #0x00	; 0
      000864 00                    2400 	.db #0x00	; 0
      000865 00                    2401 	.db #0x00	; 0
      000866 00                    2402 	.db #0x00	; 0
      000867 00                    2403 	.db #0x00	; 0
      000868                       2404 _sprite_3x:
      000868 00                    2405 	.db #0x00	; 0
      000869 3E                    2406 	.db #0x3e	; 62
      00086A 63                    2407 	.db #0x63	; 99	'c'
      00086B 03                    2408 	.db #0x03	; 3
      00086C 03                    2409 	.db #0x03	; 3
      00086D 1E                    2410 	.db #0x1e	; 30
      00086E 03                    2411 	.db #0x03	; 3
      00086F 03                    2412 	.db #0x03	; 3
      000870 63                    2413 	.db #0x63	; 99	'c'
      000871 3E                    2414 	.db #0x3e	; 62
      000872 00                    2415 	.db #0x00	; 0
      000873 00                    2416 	.db #0x00	; 0
      000874 00                    2417 	.db #0x00	; 0
      000875 00                    2418 	.db #0x00	; 0
      000876 00                    2419 	.db #0x00	; 0
      000877 00                    2420 	.db #0x00	; 0
      000878 00                    2421 	.db #0x00	; 0
      000879 00                    2422 	.db #0x00	; 0
      00087A 00                    2423 	.db #0x00	; 0
      00087B 63                    2424 	.db #0x63	; 99	'c'
      00087C 36                    2425 	.db #0x36	; 54	'6'
      00087D 1C                    2426 	.db #0x1c	; 28
      00087E 08                    2427 	.db #0x08	; 8
      00087F 1C                    2428 	.db #0x1c	; 28
      000880 36                    2429 	.db #0x36	; 54	'6'
      000881 63                    2430 	.db #0x63	; 99	'c'
      000882 00                    2431 	.db #0x00	; 0
      000883 00                    2432 	.db #0x00	; 0
      000884 00                    2433 	.db #0x00	; 0
      000885 00                    2434 	.db #0x00	; 0
      000886 00                    2435 	.db #0x00	; 0
      000887 00                    2436 	.db #0x00	; 0
      000888                       2437 _sprite_4x:
      000888 00                    2438 	.db #0x00	; 0
      000889 02                    2439 	.db #0x02	; 2
      00088A 06                    2440 	.db #0x06	; 6
      00088B 0E                    2441 	.db #0x0e	; 14
      00088C 16                    2442 	.db #0x16	; 22
      00088D 26                    2443 	.db #0x26	; 38
      00088E 7F                    2444 	.db #0x7f	; 127
      00088F 06                    2445 	.db #0x06	; 6
      000890 06                    2446 	.db #0x06	; 6
      000891 0F                    2447 	.db #0x0f	; 15
      000892 00                    2448 	.db #0x00	; 0
      000893 00                    2449 	.db #0x00	; 0
      000894 00                    2450 	.db #0x00	; 0
      000895 00                    2451 	.db #0x00	; 0
      000896 00                    2452 	.db #0x00	; 0
      000897 00                    2453 	.db #0x00	; 0
      000898 00                    2454 	.db #0x00	; 0
      000899 00                    2455 	.db #0x00	; 0
      00089A 00                    2456 	.db #0x00	; 0
      00089B 63                    2457 	.db #0x63	; 99	'c'
      00089C 36                    2458 	.db #0x36	; 54	'6'
      00089D 1C                    2459 	.db #0x1c	; 28
      00089E 08                    2460 	.db #0x08	; 8
      00089F 1C                    2461 	.db #0x1c	; 28
      0008A0 36                    2462 	.db #0x36	; 54	'6'
      0008A1 63                    2463 	.db #0x63	; 99	'c'
      0008A2 00                    2464 	.db #0x00	; 0
      0008A3 00                    2465 	.db #0x00	; 0
      0008A4 00                    2466 	.db #0x00	; 0
      0008A5 00                    2467 	.db #0x00	; 0
      0008A6 00                    2468 	.db #0x00	; 0
      0008A7 00                    2469 	.db #0x00	; 0
      0008A8                       2470 _sprite_5x:
      0008A8 00                    2471 	.db #0x00	; 0
      0008A9 7E                    2472 	.db #0x7e	; 126
      0008AA 60                    2473 	.db #0x60	; 96
      0008AB 60                    2474 	.db #0x60	; 96
      0008AC 7E                    2475 	.db #0x7e	; 126
      0008AD 03                    2476 	.db #0x03	; 3
      0008AE 03                    2477 	.db #0x03	; 3
      0008AF 03                    2478 	.db #0x03	; 3
      0008B0 63                    2479 	.db #0x63	; 99	'c'
      0008B1 3E                    2480 	.db #0x3e	; 62
      0008B2 00                    2481 	.db #0x00	; 0
      0008B3 00                    2482 	.db #0x00	; 0
      0008B4 00                    2483 	.db #0x00	; 0
      0008B5 00                    2484 	.db #0x00	; 0
      0008B6 00                    2485 	.db #0x00	; 0
      0008B7 00                    2486 	.db #0x00	; 0
      0008B8 00                    2487 	.db #0x00	; 0
      0008B9 00                    2488 	.db #0x00	; 0
      0008BA 00                    2489 	.db #0x00	; 0
      0008BB 63                    2490 	.db #0x63	; 99	'c'
      0008BC 36                    2491 	.db #0x36	; 54	'6'
      0008BD 1C                    2492 	.db #0x1c	; 28
      0008BE 08                    2493 	.db #0x08	; 8
      0008BF 1C                    2494 	.db #0x1c	; 28
      0008C0 36                    2495 	.db #0x36	; 54	'6'
      0008C1 63                    2496 	.db #0x63	; 99	'c'
      0008C2 00                    2497 	.db #0x00	; 0
      0008C3 00                    2498 	.db #0x00	; 0
      0008C4 00                    2499 	.db #0x00	; 0
      0008C5 00                    2500 	.db #0x00	; 0
      0008C6 00                    2501 	.db #0x00	; 0
      0008C7 00                    2502 	.db #0x00	; 0
      0008C8                       2503 _sprite_6x:
      0008C8 00                    2504 	.db #0x00	; 0
      0008C9 3E                    2505 	.db #0x3e	; 62
      0008CA 61                    2506 	.db #0x61	; 97	'a'
      0008CB 60                    2507 	.db #0x60	; 96
      0008CC 7E                    2508 	.db #0x7e	; 126
      0008CD 63                    2509 	.db #0x63	; 99	'c'
      0008CE 63                    2510 	.db #0x63	; 99	'c'
      0008CF 63                    2511 	.db #0x63	; 99	'c'
      0008D0 63                    2512 	.db #0x63	; 99	'c'
      0008D1 3E                    2513 	.db #0x3e	; 62
      0008D2 00                    2514 	.db #0x00	; 0
      0008D3 00                    2515 	.db #0x00	; 0
      0008D4 00                    2516 	.db #0x00	; 0
      0008D5 00                    2517 	.db #0x00	; 0
      0008D6 00                    2518 	.db #0x00	; 0
      0008D7 00                    2519 	.db #0x00	; 0
      0008D8 00                    2520 	.db #0x00	; 0
      0008D9 00                    2521 	.db #0x00	; 0
      0008DA 00                    2522 	.db #0x00	; 0
      0008DB 63                    2523 	.db #0x63	; 99	'c'
      0008DC 36                    2524 	.db #0x36	; 54	'6'
      0008DD 1C                    2525 	.db #0x1c	; 28
      0008DE 08                    2526 	.db #0x08	; 8
      0008DF 1C                    2527 	.db #0x1c	; 28
      0008E0 36                    2528 	.db #0x36	; 54	'6'
      0008E1 63                    2529 	.db #0x63	; 99	'c'
      0008E2 00                    2530 	.db #0x00	; 0
      0008E3 00                    2531 	.db #0x00	; 0
      0008E4 00                    2532 	.db #0x00	; 0
      0008E5 00                    2533 	.db #0x00	; 0
      0008E6 00                    2534 	.db #0x00	; 0
      0008E7 00                    2535 	.db #0x00	; 0
      0008E8                       2536 _sprite_mega_hit:
      0008E8 04                    2537 	.db #0x04	; 4
      0008E9 06                    2538 	.db #0x06	; 6
      0008EA 05                    2539 	.db #0x05	; 5
      0008EB 04                    2540 	.db #0x04	; 4
      0008EC 04                    2541 	.db #0x04	; 4
      0008ED 00                    2542 	.db #0x00	; 0
      0008EE 03                    2543 	.db #0x03	; 3
      0008EF 04                    2544 	.db #0x04	; 4
      0008F0 05                    2545 	.db #0x05	; 5
      0008F1 04                    2546 	.db #0x04	; 4
      0008F2 03                    2547 	.db #0x03	; 3
      0008F3 00                    2548 	.db #0x00	; 0
      0008F4 00                    2549 	.db #0x00	; 0
      0008F5 00                    2550 	.db #0x00	; 0
      0008F6 00                    2551 	.db #0x00	; 0
      0008F7 00                    2552 	.db #0x00	; 0
      0008F8 5C                    2553 	.db #0x5c	; 92
      0008F9 D0                    2554 	.db #0xd0	; 208
      0008FA 5C                    2555 	.db #0x5c	; 92
      0008FB 50                    2556 	.db #0x50	; 80	'P'
      0008FC 5C                    2557 	.db #0x5c	; 92
      0008FD 00                    2558 	.db #0x00	; 0
      0008FE 98                    2559 	.db #0x98	; 152
      0008FF 24                    2560 	.db #0x24	; 36
      000900 A4                    2561 	.db #0xa4	; 164
      000901 BC                    2562 	.db #0xbc	; 188
      000902 A4                    2563 	.db #0xa4	; 164
      000903 00                    2564 	.db #0x00	; 0
      000904 00                    2565 	.db #0x00	; 0
      000905 00                    2566 	.db #0x00	; 0
      000906 00                    2567 	.db #0x00	; 0
      000907 00                    2568 	.db #0x00	; 0
      000908                       2569 _sprite_explosion_0:
      000908 00                    2570 	.db #0x00	; 0
      000909 00                    2571 	.db #0x00	; 0
      00090A 00                    2572 	.db #0x00	; 0
      00090B 00                    2573 	.db #0x00	; 0
      00090C 00                    2574 	.db #0x00	; 0
      00090D 00                    2575 	.db #0x00	; 0
      00090E 01                    2576 	.db #0x01	; 1
      00090F 02                    2577 	.db #0x02	; 2
      000910 01                    2578 	.db #0x01	; 1
      000911 00                    2579 	.db #0x00	; 0
      000912 00                    2580 	.db #0x00	; 0
      000913 00                    2581 	.db #0x00	; 0
      000914 00                    2582 	.db #0x00	; 0
      000915 00                    2583 	.db #0x00	; 0
      000916 00                    2584 	.db #0x00	; 0
      000917 00                    2585 	.db #0x00	; 0
      000918 00                    2586 	.db #0x00	; 0
      000919 00                    2587 	.db #0x00	; 0
      00091A 00                    2588 	.db #0x00	; 0
      00091B 00                    2589 	.db #0x00	; 0
      00091C 00                    2590 	.db #0x00	; 0
      00091D 00                    2591 	.db #0x00	; 0
      00091E 00                    2592 	.db #0x00	; 0
      00091F 80                    2593 	.db #0x80	; 128
      000920 00                    2594 	.db #0x00	; 0
      000921 00                    2595 	.db #0x00	; 0
      000922 00                    2596 	.db #0x00	; 0
      000923 00                    2597 	.db #0x00	; 0
      000924 00                    2598 	.db #0x00	; 0
      000925 00                    2599 	.db #0x00	; 0
      000926 00                    2600 	.db #0x00	; 0
      000927 00                    2601 	.db #0x00	; 0
      000928                       2602 _sprite_explosion_1:
      000928 00                    2603 	.db #0x00	; 0
      000929 00                    2604 	.db #0x00	; 0
      00092A 00                    2605 	.db #0x00	; 0
      00092B 00                    2606 	.db #0x00	; 0
      00092C 00                    2607 	.db #0x00	; 0
      00092D 01                    2608 	.db #0x01	; 1
      00092E 00                    2609 	.db #0x00	; 0
      00092F 04                    2610 	.db #0x04	; 4
      000930 00                    2611 	.db #0x00	; 0
      000931 01                    2612 	.db #0x01	; 1
      000932 00                    2613 	.db #0x00	; 0
      000933 00                    2614 	.db #0x00	; 0
      000934 00                    2615 	.db #0x00	; 0
      000935 00                    2616 	.db #0x00	; 0
      000936 00                    2617 	.db #0x00	; 0
      000937 00                    2618 	.db #0x00	; 0
      000938 00                    2619 	.db #0x00	; 0
      000939 00                    2620 	.db #0x00	; 0
      00093A 00                    2621 	.db #0x00	; 0
      00093B 00                    2622 	.db #0x00	; 0
      00093C 00                    2623 	.db #0x00	; 0
      00093D 00                    2624 	.db #0x00	; 0
      00093E 00                    2625 	.db #0x00	; 0
      00093F 40                    2626 	.db #0x40	; 64
      000940 00                    2627 	.db #0x00	; 0
      000941 00                    2628 	.db #0x00	; 0
      000942 00                    2629 	.db #0x00	; 0
      000943 00                    2630 	.db #0x00	; 0
      000944 00                    2631 	.db #0x00	; 0
      000945 00                    2632 	.db #0x00	; 0
      000946 00                    2633 	.db #0x00	; 0
      000947 00                    2634 	.db #0x00	; 0
      000948                       2635 _sprite_explosion_2:
      000948 00                    2636 	.db #0x00	; 0
      000949 00                    2637 	.db #0x00	; 0
      00094A 00                    2638 	.db #0x00	; 0
      00094B 00                    2639 	.db #0x00	; 0
      00094C 01                    2640 	.db #0x01	; 1
      00094D 04                    2641 	.db #0x04	; 4
      00094E 00                    2642 	.db #0x00	; 0
      00094F 08                    2643 	.db #0x08	; 8
      000950 00                    2644 	.db #0x00	; 0
      000951 04                    2645 	.db #0x04	; 4
      000952 01                    2646 	.db #0x01	; 1
      000953 00                    2647 	.db #0x00	; 0
      000954 00                    2648 	.db #0x00	; 0
      000955 00                    2649 	.db #0x00	; 0
      000956 00                    2650 	.db #0x00	; 0
      000957 00                    2651 	.db #0x00	; 0
      000958 00                    2652 	.db #0x00	; 0
      000959 00                    2653 	.db #0x00	; 0
      00095A 00                    2654 	.db #0x00	; 0
      00095B 00                    2655 	.db #0x00	; 0
      00095C 00                    2656 	.db #0x00	; 0
      00095D 40                    2657 	.db #0x40	; 64
      00095E 00                    2658 	.db #0x00	; 0
      00095F 20                    2659 	.db #0x20	; 32
      000960 00                    2660 	.db #0x00	; 0
      000961 40                    2661 	.db #0x40	; 64
      000962 00                    2662 	.db #0x00	; 0
      000963 00                    2663 	.db #0x00	; 0
      000964 00                    2664 	.db #0x00	; 0
      000965 00                    2665 	.db #0x00	; 0
      000966 00                    2666 	.db #0x00	; 0
      000967 00                    2667 	.db #0x00	; 0
      000968                       2668 _sprite_explosion_3:
      000968 00                    2669 	.db #0x00	; 0
      000969 00                    2670 	.db #0x00	; 0
      00096A 00                    2671 	.db #0x00	; 0
      00096B 01                    2672 	.db #0x01	; 1
      00096C 08                    2673 	.db #0x08	; 8
      00096D 00                    2674 	.db #0x00	; 0
      00096E 00                    2675 	.db #0x00	; 0
      00096F 10                    2676 	.db #0x10	; 16
      000970 00                    2677 	.db #0x00	; 0
      000971 00                    2678 	.db #0x00	; 0
      000972 08                    2679 	.db #0x08	; 8
      000973 01                    2680 	.db #0x01	; 1
      000974 00                    2681 	.db #0x00	; 0
      000975 00                    2682 	.db #0x00	; 0
      000976 00                    2683 	.db #0x00	; 0
      000977 00                    2684 	.db #0x00	; 0
      000978 00                    2685 	.db #0x00	; 0
      000979 00                    2686 	.db #0x00	; 0
      00097A 00                    2687 	.db #0x00	; 0
      00097B 00                    2688 	.db #0x00	; 0
      00097C 20                    2689 	.db #0x20	; 32
      00097D 00                    2690 	.db #0x00	; 0
      00097E 00                    2691 	.db #0x00	; 0
      00097F 10                    2692 	.db #0x10	; 16
      000980 00                    2693 	.db #0x00	; 0
      000981 00                    2694 	.db #0x00	; 0
      000982 20                    2695 	.db #0x20	; 32
      000983 00                    2696 	.db #0x00	; 0
      000984 00                    2697 	.db #0x00	; 0
      000985 00                    2698 	.db #0x00	; 0
      000986 00                    2699 	.db #0x00	; 0
      000987 00                    2700 	.db #0x00	; 0
      000988                       2701 _sprite_explosion_4:
      000988 00                    2702 	.db #0x00	; 0
      000989 00                    2703 	.db #0x00	; 0
      00098A 01                    2704 	.db #0x01	; 1
      00098B 10                    2705 	.db #0x10	; 16
      00098C 00                    2706 	.db #0x00	; 0
      00098D 00                    2707 	.db #0x00	; 0
      00098E 00                    2708 	.db #0x00	; 0
      00098F 20                    2709 	.db #0x20	; 32
      000990 00                    2710 	.db #0x00	; 0
      000991 00                    2711 	.db #0x00	; 0
      000992 00                    2712 	.db #0x00	; 0
      000993 10                    2713 	.db #0x10	; 16
      000994 01                    2714 	.db #0x01	; 1
      000995 00                    2715 	.db #0x00	; 0
      000996 00                    2716 	.db #0x00	; 0
      000997 00                    2717 	.db #0x00	; 0
      000998 00                    2718 	.db #0x00	; 0
      000999 00                    2719 	.db #0x00	; 0
      00099A 00                    2720 	.db #0x00	; 0
      00099B 10                    2721 	.db #0x10	; 16
      00099C 00                    2722 	.db #0x00	; 0
      00099D 00                    2723 	.db #0x00	; 0
      00099E 00                    2724 	.db #0x00	; 0
      00099F 08                    2725 	.db #0x08	; 8
      0009A0 00                    2726 	.db #0x00	; 0
      0009A1 00                    2727 	.db #0x00	; 0
      0009A2 00                    2728 	.db #0x00	; 0
      0009A3 10                    2729 	.db #0x10	; 16
      0009A4 00                    2730 	.db #0x00	; 0
      0009A5 00                    2731 	.db #0x00	; 0
      0009A6 00                    2732 	.db #0x00	; 0
      0009A7 00                    2733 	.db #0x00	; 0
      0009A8                       2734 _sprite_explosion_5:
      0009A8 01                    2735 	.db #0x01	; 1
      0009A9 00                    2736 	.db #0x00	; 0
      0009AA 20                    2737 	.db #0x20	; 32
      0009AB 00                    2738 	.db #0x00	; 0
      0009AC 00                    2739 	.db #0x00	; 0
      0009AD 00                    2740 	.db #0x00	; 0
      0009AE 00                    2741 	.db #0x00	; 0
      0009AF 80                    2742 	.db #0x80	; 128
      0009B0 00                    2743 	.db #0x00	; 0
      0009B1 00                    2744 	.db #0x00	; 0
      0009B2 00                    2745 	.db #0x00	; 0
      0009B3 00                    2746 	.db #0x00	; 0
      0009B4 20                    2747 	.db #0x20	; 32
      0009B5 00                    2748 	.db #0x00	; 0
      0009B6 01                    2749 	.db #0x01	; 1
      0009B7 00                    2750 	.db #0x00	; 0
      0009B8 00                    2751 	.db #0x00	; 0
      0009B9 00                    2752 	.db #0x00	; 0
      0009BA 08                    2753 	.db #0x08	; 8
      0009BB 00                    2754 	.db #0x00	; 0
      0009BC 00                    2755 	.db #0x00	; 0
      0009BD 00                    2756 	.db #0x00	; 0
      0009BE 00                    2757 	.db #0x00	; 0
      0009BF 02                    2758 	.db #0x02	; 2
      0009C0 00                    2759 	.db #0x00	; 0
      0009C1 00                    2760 	.db #0x00	; 0
      0009C2 00                    2761 	.db #0x00	; 0
      0009C3 00                    2762 	.db #0x00	; 0
      0009C4 08                    2763 	.db #0x08	; 8
      0009C5 00                    2764 	.db #0x00	; 0
      0009C6 00                    2765 	.db #0x00	; 0
      0009C7 00                    2766 	.db #0x00	; 0
      0009C8                       2767 _sprite_explosion_6:
      0009C8 00                    2768 	.db #0x00	; 0
      0009C9 01                    2769 	.db #0x01	; 1
      0009CA 00                    2770 	.db #0x00	; 0
      0009CB 20                    2771 	.db #0x20	; 32
      0009CC 00                    2772 	.db #0x00	; 0
      0009CD 00                    2773 	.db #0x00	; 0
      0009CE 00                    2774 	.db #0x00	; 0
      0009CF 00                    2775 	.db #0x00	; 0
      0009D0 80                    2776 	.db #0x80	; 128
      0009D1 00                    2777 	.db #0x00	; 0
      0009D2 00                    2778 	.db #0x00	; 0
      0009D3 00                    2779 	.db #0x00	; 0
      0009D4 00                    2780 	.db #0x00	; 0
      0009D5 20                    2781 	.db #0x20	; 32
      0009D6 00                    2782 	.db #0x00	; 0
      0009D7 01                    2783 	.db #0x01	; 1
      0009D8 00                    2784 	.db #0x00	; 0
      0009D9 00                    2785 	.db #0x00	; 0
      0009DA 00                    2786 	.db #0x00	; 0
      0009DB 08                    2787 	.db #0x08	; 8
      0009DC 00                    2788 	.db #0x00	; 0
      0009DD 00                    2789 	.db #0x00	; 0
      0009DE 00                    2790 	.db #0x00	; 0
      0009DF 00                    2791 	.db #0x00	; 0
      0009E0 02                    2792 	.db #0x02	; 2
      0009E1 00                    2793 	.db #0x00	; 0
      0009E2 00                    2794 	.db #0x00	; 0
      0009E3 00                    2795 	.db #0x00	; 0
      0009E4 00                    2796 	.db #0x00	; 0
      0009E5 08                    2797 	.db #0x08	; 8
      0009E6 00                    2798 	.db #0x00	; 0
      0009E7 00                    2799 	.db #0x00	; 0
      0009E8                       2800 _sprite_explosion_7:
      0009E8 00                    2801 	.db #0x00	; 0
      0009E9 00                    2802 	.db #0x00	; 0
      0009EA 01                    2803 	.db #0x01	; 1
      0009EB 00                    2804 	.db #0x00	; 0
      0009EC 20                    2805 	.db #0x20	; 32
      0009ED 00                    2806 	.db #0x00	; 0
      0009EE 00                    2807 	.db #0x00	; 0
      0009EF 00                    2808 	.db #0x00	; 0
      0009F0 00                    2809 	.db #0x00	; 0
      0009F1 80                    2810 	.db #0x80	; 128
      0009F2 00                    2811 	.db #0x00	; 0
      0009F3 00                    2812 	.db #0x00	; 0
      0009F4 00                    2813 	.db #0x00	; 0
      0009F5 00                    2814 	.db #0x00	; 0
      0009F6 20                    2815 	.db #0x20	; 32
      0009F7 00                    2816 	.db #0x00	; 0
      0009F8 00                    2817 	.db #0x00	; 0
      0009F9 00                    2818 	.db #0x00	; 0
      0009FA 00                    2819 	.db #0x00	; 0
      0009FB 00                    2820 	.db #0x00	; 0
      0009FC 08                    2821 	.db #0x08	; 8
      0009FD 00                    2822 	.db #0x00	; 0
      0009FE 00                    2823 	.db #0x00	; 0
      0009FF 00                    2824 	.db #0x00	; 0
      000A00 00                    2825 	.db #0x00	; 0
      000A01 02                    2826 	.db #0x02	; 2
      000A02 00                    2827 	.db #0x00	; 0
      000A03 00                    2828 	.db #0x00	; 0
      000A04 00                    2829 	.db #0x00	; 0
      000A05 00                    2830 	.db #0x00	; 0
      000A06 08                    2831 	.db #0x08	; 8
      000A07 00                    2832 	.db #0x00	; 0
      000A08                       2833 _sprite_block_small_0:
      000A08 5A                    2834 	.db #0x5a	; 90	'Z'
      000A09 24                    2835 	.db #0x24	; 36
      000A0A 80                    2836 	.db #0x80	; 128
      000A0B 10                    2837 	.db #0x10	; 16
      000A0C 80                    2838 	.db #0x80	; 128
      000A0D 20                    2839 	.db #0x20	; 32
      000A0E 00                    2840 	.db #0x00	; 0
      000A0F 00                    2841 	.db #0x00	; 0
      000A10 00                    2842 	.db #0x00	; 0
      000A11 00                    2843 	.db #0x00	; 0
      000A12 00                    2844 	.db #0x00	; 0
      000A13 00                    2845 	.db #0x00	; 0
      000A14 00                    2846 	.db #0x00	; 0
      000A15 00                    2847 	.db #0x00	; 0
      000A16 00                    2848 	.db #0x00	; 0
      000A17 00                    2849 	.db #0x00	; 0
      000A18 00                    2850 	.db #0x00	; 0
      000A19 00                    2851 	.db #0x00	; 0
      000A1A 00                    2852 	.db #0x00	; 0
      000A1B 00                    2853 	.db #0x00	; 0
      000A1C 00                    2854 	.db #0x00	; 0
      000A1D 00                    2855 	.db #0x00	; 0
      000A1E 00                    2856 	.db #0x00	; 0
      000A1F 00                    2857 	.db #0x00	; 0
      000A20 00                    2858 	.db #0x00	; 0
      000A21 00                    2859 	.db #0x00	; 0
      000A22 00                    2860 	.db #0x00	; 0
      000A23 00                    2861 	.db #0x00	; 0
      000A24 00                    2862 	.db #0x00	; 0
      000A25 00                    2863 	.db #0x00	; 0
      000A26 00                    2864 	.db #0x00	; 0
      000A27 00                    2865 	.db #0x00	; 0
      000A28                       2866 _sprite_block_small_1:
      000A28 FF                    2867 	.db #0xff	; 255
      000A29 FF                    2868 	.db #0xff	; 255
      000A2A FF                    2869 	.db #0xff	; 255
      000A2B FF                    2870 	.db #0xff	; 255
      000A2C FF                    2871 	.db #0xff	; 255
      000A2D FF                    2872 	.db #0xff	; 255
      000A2E FF                    2873 	.db #0xff	; 255
      000A2F 7E                    2874 	.db #0x7e	; 126
      000A30 00                    2875 	.db #0x00	; 0
      000A31 00                    2876 	.db #0x00	; 0
      000A32 00                    2877 	.db #0x00	; 0
      000A33 00                    2878 	.db #0x00	; 0
      000A34 00                    2879 	.db #0x00	; 0
      000A35 00                    2880 	.db #0x00	; 0
      000A36 00                    2881 	.db #0x00	; 0
      000A37 00                    2882 	.db #0x00	; 0
      000A38 00                    2883 	.db #0x00	; 0
      000A39 00                    2884 	.db #0x00	; 0
      000A3A 00                    2885 	.db #0x00	; 0
      000A3B 00                    2886 	.db #0x00	; 0
      000A3C 00                    2887 	.db #0x00	; 0
      000A3D 00                    2888 	.db #0x00	; 0
      000A3E 00                    2889 	.db #0x00	; 0
      000A3F 00                    2890 	.db #0x00	; 0
      000A40 00                    2891 	.db #0x00	; 0
      000A41 00                    2892 	.db #0x00	; 0
      000A42 00                    2893 	.db #0x00	; 0
      000A43 00                    2894 	.db #0x00	; 0
      000A44 00                    2895 	.db #0x00	; 0
      000A45 00                    2896 	.db #0x00	; 0
      000A46 00                    2897 	.db #0x00	; 0
      000A47 00                    2898 	.db #0x00	; 0
      000A48                       2899 _sprite_number_3_32x32:
      000A48 00                    2900 	.db #0x00	; 0
      000A49 01                    2901 	.db #0x01	; 1
      000A4A 02                    2902 	.db #0x02	; 2
      000A4B 04                    2903 	.db #0x04	; 4
      000A4C 08                    2904 	.db #0x08	; 8
      000A4D 08                    2905 	.db #0x08	; 8
      000A4E 08                    2906 	.db #0x08	; 8
      000A4F 08                    2907 	.db #0x08	; 8
      000A50 0F                    2908 	.db #0x0f	; 15
      000A51 00                    2909 	.db #0x00	; 0
      000A52 00                    2910 	.db #0x00	; 0
      000A53 00                    2911 	.db #0x00	; 0
      000A54 00                    2912 	.db #0x00	; 0
      000A55 00                    2913 	.db #0x00	; 0
      000A56 00                    2914 	.db #0x00	; 0
      000A57 00                    2915 	.db #0x00	; 0
      000A58 FF                    2916 	.db #0xff	; 255
      000A59 00                    2917 	.db #0x00	; 0
      000A5A 00                    2918 	.db #0x00	; 0
      000A5B 00                    2919 	.db #0x00	; 0
      000A5C 00                    2920 	.db #0x00	; 0
      000A5D 00                    2921 	.db #0x00	; 0
      000A5E 1F                    2922 	.db #0x1f	; 31
      000A5F 20                    2923 	.db #0x20	; 32
      000A60 C0                    2924 	.db #0xc0	; 192
      000A61 00                    2925 	.db #0x00	; 0
      000A62 00                    2926 	.db #0x00	; 0
      000A63 00                    2927 	.db #0x00	; 0
      000A64 00                    2928 	.db #0x00	; 0
      000A65 3F                    2929 	.db #0x3f	; 63
      000A66 20                    2930 	.db #0x20	; 32
      000A67 20                    2931 	.db #0x20	; 32
      000A68 FF                    2932 	.db #0xff	; 255
      000A69 00                    2933 	.db #0x00	; 0
      000A6A 00                    2934 	.db #0x00	; 0
      000A6B 00                    2935 	.db #0x00	; 0
      000A6C 00                    2936 	.db #0x00	; 0
      000A6D 00                    2937 	.db #0x00	; 0
      000A6E F0                    2938 	.db #0xf0	; 240
      000A6F 08                    2939 	.db #0x08	; 8
      000A70 04                    2940 	.db #0x04	; 4
      000A71 04                    2941 	.db #0x04	; 4
      000A72 04                    2942 	.db #0x04	; 4
      000A73 04                    2943 	.db #0x04	; 4
      000A74 08                    2944 	.db #0x08	; 8
      000A75 F0                    2945 	.db #0xf0	; 240
      000A76 00                    2946 	.db #0x00	; 0
      000A77 00                    2947 	.db #0x00	; 0
      000A78 00                    2948 	.db #0x00	; 0
      000A79 80                    2949 	.db #0x80	; 128
      000A7A 40                    2950 	.db #0x40	; 64
      000A7B 20                    2951 	.db #0x20	; 32
      000A7C 10                    2952 	.db #0x10	; 16
      000A7D 10                    2953 	.db #0x10	; 16
      000A7E 10                    2954 	.db #0x10	; 16
      000A7F 10                    2955 	.db #0x10	; 16
      000A80 10                    2956 	.db #0x10	; 16
      000A81 10                    2957 	.db #0x10	; 16
      000A82 10                    2958 	.db #0x10	; 16
      000A83 10                    2959 	.db #0x10	; 16
      000A84 10                    2960 	.db #0x10	; 16
      000A85 20                    2961 	.db #0x20	; 32
      000A86 40                    2962 	.db #0x40	; 64
      000A87 80                    2963 	.db #0x80	; 128
      000A88 00                    2964 	.db #0x00	; 0
      000A89 00                    2965 	.db #0x00	; 0
      000A8A 00                    2966 	.db #0x00	; 0
      000A8B 00                    2967 	.db #0x00	; 0
      000A8C 00                    2968 	.db #0x00	; 0
      000A8D 00                    2969 	.db #0x00	; 0
      000A8E 00                    2970 	.db #0x00	; 0
      000A8F 0F                    2971 	.db #0x0f	; 15
      000A90 08                    2972 	.db #0x08	; 8
      000A91 08                    2973 	.db #0x08	; 8
      000A92 08                    2974 	.db #0x08	; 8
      000A93 08                    2975 	.db #0x08	; 8
      000A94 04                    2976 	.db #0x04	; 4
      000A95 02                    2977 	.db #0x02	; 2
      000A96 01                    2978 	.db #0x01	; 1
      000A97 00                    2979 	.db #0x00	; 0
      000A98 20                    2980 	.db #0x20	; 32
      000A99 20                    2981 	.db #0x20	; 32
      000A9A 3F                    2982 	.db #0x3f	; 63
      000A9B 00                    2983 	.db #0x00	; 0
      000A9C 00                    2984 	.db #0x00	; 0
      000A9D 00                    2985 	.db #0x00	; 0
      000A9E 00                    2986 	.db #0x00	; 0
      000A9F C0                    2987 	.db #0xc0	; 192
      000AA0 20                    2988 	.db #0x20	; 32
      000AA1 1F                    2989 	.db #0x1f	; 31
      000AA2 00                    2990 	.db #0x00	; 0
      000AA3 00                    2991 	.db #0x00	; 0
      000AA4 00                    2992 	.db #0x00	; 0
      000AA5 00                    2993 	.db #0x00	; 0
      000AA6 00                    2994 	.db #0x00	; 0
      000AA7 FF                    2995 	.db #0xff	; 255
      000AA8 00                    2996 	.db #0x00	; 0
      000AA9 00                    2997 	.db #0x00	; 0
      000AAA F0                    2998 	.db #0xf0	; 240
      000AAB 08                    2999 	.db #0x08	; 8
      000AAC 04                    3000 	.db #0x04	; 4
      000AAD 04                    3001 	.db #0x04	; 4
      000AAE 04                    3002 	.db #0x04	; 4
      000AAF 04                    3003 	.db #0x04	; 4
      000AB0 08                    3004 	.db #0x08	; 8
      000AB1 F0                    3005 	.db #0xf0	; 240
      000AB2 00                    3006 	.db #0x00	; 0
      000AB3 00                    3007 	.db #0x00	; 0
      000AB4 00                    3008 	.db #0x00	; 0
      000AB5 00                    3009 	.db #0x00	; 0
      000AB6 00                    3010 	.db #0x00	; 0
      000AB7 FF                    3011 	.db #0xff	; 255
      000AB8 80                    3012 	.db #0x80	; 128
      000AB9 40                    3013 	.db #0x40	; 64
      000ABA 20                    3014 	.db #0x20	; 32
      000ABB 10                    3015 	.db #0x10	; 16
      000ABC 10                    3016 	.db #0x10	; 16
      000ABD 10                    3017 	.db #0x10	; 16
      000ABE 10                    3018 	.db #0x10	; 16
      000ABF 10                    3019 	.db #0x10	; 16
      000AC0 10                    3020 	.db #0x10	; 16
      000AC1 10                    3021 	.db #0x10	; 16
      000AC2 10                    3022 	.db #0x10	; 16
      000AC3 10                    3023 	.db #0x10	; 16
      000AC4 20                    3024 	.db #0x20	; 32
      000AC5 40                    3025 	.db #0x40	; 64
      000AC6 80                    3026 	.db #0x80	; 128
      000AC7 00                    3027 	.db #0x00	; 0
      000AC8                       3028 _sprite_number_2_32x32:
      000AC8 00                    3029 	.db #0x00	; 0
      000AC9 01                    3030 	.db #0x01	; 1
      000ACA 02                    3031 	.db #0x02	; 2
      000ACB 04                    3032 	.db #0x04	; 4
      000ACC 08                    3033 	.db #0x08	; 8
      000ACD 08                    3034 	.db #0x08	; 8
      000ACE 08                    3035 	.db #0x08	; 8
      000ACF 08                    3036 	.db #0x08	; 8
      000AD0 0F                    3037 	.db #0x0f	; 15
      000AD1 00                    3038 	.db #0x00	; 0
      000AD2 00                    3039 	.db #0x00	; 0
      000AD3 00                    3040 	.db #0x00	; 0
      000AD4 00                    3041 	.db #0x00	; 0
      000AD5 00                    3042 	.db #0x00	; 0
      000AD6 00                    3043 	.db #0x00	; 0
      000AD7 00                    3044 	.db #0x00	; 0
      000AD8 FF                    3045 	.db #0xff	; 255
      000AD9 00                    3046 	.db #0x00	; 0
      000ADA 00                    3047 	.db #0x00	; 0
      000ADB 00                    3048 	.db #0x00	; 0
      000ADC 00                    3049 	.db #0x00	; 0
      000ADD 00                    3050 	.db #0x00	; 0
      000ADE 1F                    3051 	.db #0x1f	; 31
      000ADF 20                    3052 	.db #0x20	; 32
      000AE0 C0                    3053 	.db #0xc0	; 192
      000AE1 00                    3054 	.db #0x00	; 0
      000AE2 00                    3055 	.db #0x00	; 0
      000AE3 00                    3056 	.db #0x00	; 0
      000AE4 00                    3057 	.db #0x00	; 0
      000AE5 3F                    3058 	.db #0x3f	; 63
      000AE6 40                    3059 	.db #0x40	; 64
      000AE7 80                    3060 	.db #0x80	; 128
      000AE8 FF                    3061 	.db #0xff	; 255
      000AE9 00                    3062 	.db #0x00	; 0
      000AEA 00                    3063 	.db #0x00	; 0
      000AEB 00                    3064 	.db #0x00	; 0
      000AEC 00                    3065 	.db #0x00	; 0
      000AED 00                    3066 	.db #0x00	; 0
      000AEE F0                    3067 	.db #0xf0	; 240
      000AEF 08                    3068 	.db #0x08	; 8
      000AF0 04                    3069 	.db #0x04	; 4
      000AF1 04                    3070 	.db #0x04	; 4
      000AF2 04                    3071 	.db #0x04	; 4
      000AF3 04                    3072 	.db #0x04	; 4
      000AF4 08                    3073 	.db #0x08	; 8
      000AF5 F0                    3074 	.db #0xf0	; 240
      000AF6 00                    3075 	.db #0x00	; 0
      000AF7 00                    3076 	.db #0x00	; 0
      000AF8 00                    3077 	.db #0x00	; 0
      000AF9 80                    3078 	.db #0x80	; 128
      000AFA 40                    3079 	.db #0x40	; 64
      000AFB 20                    3080 	.db #0x20	; 32
      000AFC 10                    3081 	.db #0x10	; 16
      000AFD 10                    3082 	.db #0x10	; 16
      000AFE 10                    3083 	.db #0x10	; 16
      000AFF 10                    3084 	.db #0x10	; 16
      000B00 10                    3085 	.db #0x10	; 16
      000B01 10                    3086 	.db #0x10	; 16
      000B02 10                    3087 	.db #0x10	; 16
      000B03 10                    3088 	.db #0x10	; 16
      000B04 10                    3089 	.db #0x10	; 16
      000B05 10                    3090 	.db #0x10	; 16
      000B06 20                    3091 	.db #0x20	; 32
      000B07 40                    3092 	.db #0x40	; 64
      000B08 01                    3093 	.db #0x01	; 1
      000B09 02                    3094 	.db #0x02	; 2
      000B0A 04                    3095 	.db #0x04	; 4
      000B0B 08                    3096 	.db #0x08	; 8
      000B0C 08                    3097 	.db #0x08	; 8
      000B0D 08                    3098 	.db #0x08	; 8
      000B0E 08                    3099 	.db #0x08	; 8
      000B0F 08                    3100 	.db #0x08	; 8
      000B10 08                    3101 	.db #0x08	; 8
      000B11 08                    3102 	.db #0x08	; 8
      000B12 08                    3103 	.db #0x08	; 8
      000B13 08                    3104 	.db #0x08	; 8
      000B14 08                    3105 	.db #0x08	; 8
      000B15 08                    3106 	.db #0x08	; 8
      000B16 08                    3107 	.db #0x08	; 8
      000B17 0F                    3108 	.db #0x0f	; 15
      000B18 00                    3109 	.db #0x00	; 0
      000B19 00                    3110 	.db #0x00	; 0
      000B1A 07                    3111 	.db #0x07	; 7
      000B1B 08                    3112 	.db #0x08	; 8
      000B1C 10                    3113 	.db #0x10	; 16
      000B1D 20                    3114 	.db #0x20	; 32
      000B1E 20                    3115 	.db #0x20	; 32
      000B1F 20                    3116 	.db #0x20	; 32
      000B20 20                    3117 	.db #0x20	; 32
      000B21 3F                    3118 	.db #0x3f	; 63
      000B22 00                    3119 	.db #0x00	; 0
      000B23 00                    3120 	.db #0x00	; 0
      000B24 00                    3121 	.db #0x00	; 0
      000B25 00                    3122 	.db #0x00	; 0
      000B26 00                    3123 	.db #0x00	; 0
      000B27 FF                    3124 	.db #0xff	; 255
      000B28 00                    3125 	.db #0x00	; 0
      000B29 01                    3126 	.db #0x01	; 1
      000B2A FE                    3127 	.db #0xfe	; 254
      000B2B 00                    3128 	.db #0x00	; 0
      000B2C 00                    3129 	.db #0x00	; 0
      000B2D 00                    3130 	.db #0x00	; 0
      000B2E 00                    3131 	.db #0x00	; 0
      000B2F 07                    3132 	.db #0x07	; 7
      000B30 08                    3133 	.db #0x08	; 8
      000B31 F0                    3134 	.db #0xf0	; 240
      000B32 00                    3135 	.db #0x00	; 0
      000B33 00                    3136 	.db #0x00	; 0
      000B34 00                    3137 	.db #0x00	; 0
      000B35 00                    3138 	.db #0x00	; 0
      000B36 00                    3139 	.db #0x00	; 0
      000B37 FF                    3140 	.db #0xff	; 255
      000B38 80                    3141 	.db #0x80	; 128
      000B39 00                    3142 	.db #0x00	; 0
      000B3A 00                    3143 	.db #0x00	; 0
      000B3B 00                    3144 	.db #0x00	; 0
      000B3C 00                    3145 	.db #0x00	; 0
      000B3D 00                    3146 	.db #0x00	; 0
      000B3E 00                    3147 	.db #0x00	; 0
      000B3F F0                    3148 	.db #0xf0	; 240
      000B40 10                    3149 	.db #0x10	; 16
      000B41 10                    3150 	.db #0x10	; 16
      000B42 10                    3151 	.db #0x10	; 16
      000B43 10                    3152 	.db #0x10	; 16
      000B44 10                    3153 	.db #0x10	; 16
      000B45 10                    3154 	.db #0x10	; 16
      000B46 10                    3155 	.db #0x10	; 16
      000B47 F0                    3156 	.db #0xf0	; 240
      000B48                       3157 _sprite_number_1_32x32:
      000B48 00                    3158 	.db #0x00	; 0
      000B49 00                    3159 	.db #0x00	; 0
      000B4A 00                    3160 	.db #0x00	; 0
      000B4B 00                    3161 	.db #0x00	; 0
      000B4C 00                    3162 	.db #0x00	; 0
      000B4D 00                    3163 	.db #0x00	; 0
      000B4E 01                    3164 	.db #0x01	; 1
      000B4F 01                    3165 	.db #0x01	; 1
      000B50 01                    3166 	.db #0x01	; 1
      000B51 01                    3167 	.db #0x01	; 1
      000B52 00                    3168 	.db #0x00	; 0
      000B53 00                    3169 	.db #0x00	; 0
      000B54 00                    3170 	.db #0x00	; 0
      000B55 00                    3171 	.db #0x00	; 0
      000B56 00                    3172 	.db #0x00	; 0
      000B57 00                    3173 	.db #0x00	; 0
      000B58 07                    3174 	.db #0x07	; 7
      000B59 08                    3175 	.db #0x08	; 8
      000B5A 10                    3176 	.db #0x10	; 16
      000B5B 20                    3177 	.db #0x20	; 32
      000B5C 40                    3178 	.db #0x40	; 64
      000B5D 80                    3179 	.db #0x80	; 128
      000B5E 00                    3180 	.db #0x00	; 0
      000B5F 00                    3181 	.db #0x00	; 0
      000B60 00                    3182 	.db #0x00	; 0
      000B61 F8                    3183 	.db #0xf8	; 248
      000B62 08                    3184 	.db #0x08	; 8
      000B63 08                    3185 	.db #0x08	; 8
      000B64 08                    3186 	.db #0x08	; 8
      000B65 08                    3187 	.db #0x08	; 8
      000B66 08                    3188 	.db #0x08	; 8
      000B67 08                    3189 	.db #0x08	; 8
      000B68 F0                    3190 	.db #0xf0	; 240
      000B69 10                    3191 	.db #0x10	; 16
      000B6A 10                    3192 	.db #0x10	; 16
      000B6B 10                    3193 	.db #0x10	; 16
      000B6C 10                    3194 	.db #0x10	; 16
      000B6D 10                    3195 	.db #0x10	; 16
      000B6E 10                    3196 	.db #0x10	; 16
      000B6F 10                    3197 	.db #0x10	; 16
      000B70 10                    3198 	.db #0x10	; 16
      000B71 10                    3199 	.db #0x10	; 16
      000B72 10                    3200 	.db #0x10	; 16
      000B73 10                    3201 	.db #0x10	; 16
      000B74 10                    3202 	.db #0x10	; 16
      000B75 10                    3203 	.db #0x10	; 16
      000B76 10                    3204 	.db #0x10	; 16
      000B77 10                    3205 	.db #0x10	; 16
      000B78 00                    3206 	.db #0x00	; 0
      000B79 00                    3207 	.db #0x00	; 0
      000B7A 00                    3208 	.db #0x00	; 0
      000B7B 00                    3209 	.db #0x00	; 0
      000B7C 00                    3210 	.db #0x00	; 0
      000B7D 00                    3211 	.db #0x00	; 0
      000B7E 00                    3212 	.db #0x00	; 0
      000B7F 00                    3213 	.db #0x00	; 0
      000B80 00                    3214 	.db #0x00	; 0
      000B81 00                    3215 	.db #0x00	; 0
      000B82 00                    3216 	.db #0x00	; 0
      000B83 00                    3217 	.db #0x00	; 0
      000B84 00                    3218 	.db #0x00	; 0
      000B85 00                    3219 	.db #0x00	; 0
      000B86 00                    3220 	.db #0x00	; 0
      000B87 00                    3221 	.db #0x00	; 0
      000B88 00                    3222 	.db #0x00	; 0
      000B89 00                    3223 	.db #0x00	; 0
      000B8A 00                    3224 	.db #0x00	; 0
      000B8B 00                    3225 	.db #0x00	; 0
      000B8C 00                    3226 	.db #0x00	; 0
      000B8D 00                    3227 	.db #0x00	; 0
      000B8E 00                    3228 	.db #0x00	; 0
      000B8F 00                    3229 	.db #0x00	; 0
      000B90 00                    3230 	.db #0x00	; 0
      000B91 00                    3231 	.db #0x00	; 0
      000B92 00                    3232 	.db #0x00	; 0
      000B93 00                    3233 	.db #0x00	; 0
      000B94 00                    3234 	.db #0x00	; 0
      000B95 00                    3235 	.db #0x00	; 0
      000B96 00                    3236 	.db #0x00	; 0
      000B97 00                    3237 	.db #0x00	; 0
      000B98 08                    3238 	.db #0x08	; 8
      000B99 08                    3239 	.db #0x08	; 8
      000B9A 08                    3240 	.db #0x08	; 8
      000B9B 08                    3241 	.db #0x08	; 8
      000B9C 08                    3242 	.db #0x08	; 8
      000B9D 08                    3243 	.db #0x08	; 8
      000B9E 08                    3244 	.db #0x08	; 8
      000B9F 08                    3245 	.db #0x08	; 8
      000BA0 08                    3246 	.db #0x08	; 8
      000BA1 F8                    3247 	.db #0xf8	; 248
      000BA2 80                    3248 	.db #0x80	; 128
      000BA3 80                    3249 	.db #0x80	; 128
      000BA4 80                    3250 	.db #0x80	; 128
      000BA5 80                    3251 	.db #0x80	; 128
      000BA6 80                    3252 	.db #0x80	; 128
      000BA7 FF                    3253 	.db #0xff	; 255
      000BA8 10                    3254 	.db #0x10	; 16
      000BA9 10                    3255 	.db #0x10	; 16
      000BAA 10                    3256 	.db #0x10	; 16
      000BAB 10                    3257 	.db #0x10	; 16
      000BAC 10                    3258 	.db #0x10	; 16
      000BAD 10                    3259 	.db #0x10	; 16
      000BAE 10                    3260 	.db #0x10	; 16
      000BAF 10                    3261 	.db #0x10	; 16
      000BB0 10                    3262 	.db #0x10	; 16
      000BB1 1F                    3263 	.db #0x1f	; 31
      000BB2 01                    3264 	.db #0x01	; 1
      000BB3 01                    3265 	.db #0x01	; 1
      000BB4 01                    3266 	.db #0x01	; 1
      000BB5 01                    3267 	.db #0x01	; 1
      000BB6 01                    3268 	.db #0x01	; 1
      000BB7 FF                    3269 	.db #0xff	; 255
      000BB8 00                    3270 	.db #0x00	; 0
      000BB9 00                    3271 	.db #0x00	; 0
      000BBA 00                    3272 	.db #0x00	; 0
      000BBB 00                    3273 	.db #0x00	; 0
      000BBC 00                    3274 	.db #0x00	; 0
      000BBD 00                    3275 	.db #0x00	; 0
      000BBE 00                    3276 	.db #0x00	; 0
      000BBF 00                    3277 	.db #0x00	; 0
      000BC0 00                    3278 	.db #0x00	; 0
      000BC1 00                    3279 	.db #0x00	; 0
      000BC2 00                    3280 	.db #0x00	; 0
      000BC3 00                    3281 	.db #0x00	; 0
      000BC4 00                    3282 	.db #0x00	; 0
      000BC5 00                    3283 	.db #0x00	; 0
      000BC6 00                    3284 	.db #0x00	; 0
      000BC7 00                    3285 	.db #0x00	; 0
      000BC8                       3286 _sprite_go_32x32:
      000BC8 00                    3287 	.db #0x00	; 0
      000BC9 00                    3288 	.db #0x00	; 0
      000BCA 00                    3289 	.db #0x00	; 0
      000BCB 00                    3290 	.db #0x00	; 0
      000BCC 00                    3291 	.db #0x00	; 0
      000BCD 00                    3292 	.db #0x00	; 0
      000BCE 00                    3293 	.db #0x00	; 0
      000BCF 3F                    3294 	.db #0x3f	; 63
      000BD0 40                    3295 	.db #0x40	; 64
      000BD1 80                    3296 	.db #0x80	; 128
      000BD2 87                    3297 	.db #0x87	; 135
      000BD3 88                    3298 	.db #0x88	; 136
      000BD4 88                    3299 	.db #0x88	; 136
      000BD5 88                    3300 	.db #0x88	; 136
      000BD6 88                    3301 	.db #0x88	; 136
      000BD7 88                    3302 	.db #0x88	; 136
      000BD8 00                    3303 	.db #0x00	; 0
      000BD9 00                    3304 	.db #0x00	; 0
      000BDA 00                    3305 	.db #0x00	; 0
      000BDB 00                    3306 	.db #0x00	; 0
      000BDC 00                    3307 	.db #0x00	; 0
      000BDD 00                    3308 	.db #0x00	; 0
      000BDE 00                    3309 	.db #0x00	; 0
      000BDF C1                    3310 	.db #0xc1	; 193
      000BE0 22                    3311 	.db #0x22	; 34
      000BE1 14                    3312 	.db #0x14	; 20
      000BE2 14                    3313 	.db #0x14	; 20
      000BE3 94                    3314 	.db #0x94	; 148
      000BE4 F4                    3315 	.db #0xf4	; 244
      000BE5 04                    3316 	.db #0x04	; 4
      000BE6 04                    3317 	.db #0x04	; 4
      000BE7 04                    3318 	.db #0x04	; 4
      000BE8 00                    3319 	.db #0x00	; 0
      000BE9 00                    3320 	.db #0x00	; 0
      000BEA 00                    3321 	.db #0x00	; 0
      000BEB 00                    3322 	.db #0x00	; 0
      000BEC 00                    3323 	.db #0x00	; 0
      000BED 00                    3324 	.db #0x00	; 0
      000BEE 00                    3325 	.db #0x00	; 0
      000BEF FE                    3326 	.db #0xfe	; 254
      000BF0 01                    3327 	.db #0x01	; 1
      000BF1 00                    3328 	.db #0x00	; 0
      000BF2 00                    3329 	.db #0x00	; 0
      000BF3 30                    3330 	.db #0x30	; 48	'0'
      000BF4 48                    3331 	.db #0x48	; 72	'H'
      000BF5 48                    3332 	.db #0x48	; 72	'H'
      000BF6 48                    3333 	.db #0x48	; 72	'H'
      000BF7 48                    3334 	.db #0x48	; 72	'H'
      000BF8 00                    3335 	.db #0x00	; 0
      000BF9 00                    3336 	.db #0x00	; 0
      000BFA 00                    3337 	.db #0x00	; 0
      000BFB 00                    3338 	.db #0x00	; 0
      000BFC 00                    3339 	.db #0x00	; 0
      000BFD 00                    3340 	.db #0x00	; 0
      000BFE 00                    3341 	.db #0x00	; 0
      000BFF 3F                    3342 	.db #0x3f	; 63
      000C00 21                    3343 	.db #0x21	; 33
      000C01 A1                    3344 	.db #0xa1	; 161
      000C02 A1                    3345 	.db #0xa1	; 161
      000C03 A1                    3346 	.db #0xa1	; 161
      000C04 A1                    3347 	.db #0xa1	; 161
      000C05 A1                    3348 	.db #0xa1	; 161
      000C06 A1                    3349 	.db #0xa1	; 161
      000C07 A1                    3350 	.db #0xa1	; 161
      000C08 8B                    3351 	.db #0x8b	; 139
      000C09 8A                    3352 	.db #0x8a	; 138
      000C0A 8A                    3353 	.db #0x8a	; 138
      000C0B 8B                    3354 	.db #0x8b	; 139
      000C0C 89                    3355 	.db #0x89	; 137
      000C0D 86                    3356 	.db #0x86	; 134
      000C0E 80                    3357 	.db #0x80	; 128
      000C0F 40                    3358 	.db #0x40	; 64
      000C10 3F                    3359 	.db #0x3f	; 63
      000C11 00                    3360 	.db #0x00	; 0
      000C12 00                    3361 	.db #0x00	; 0
      000C13 00                    3362 	.db #0x00	; 0
      000C14 00                    3363 	.db #0x00	; 0
      000C15 00                    3364 	.db #0x00	; 0
      000C16 00                    3365 	.db #0x00	; 0
      000C17 00                    3366 	.db #0x00	; 0
      000C18 F4                    3367 	.db #0xf4	; 244
      000C19 14                    3368 	.db #0x14	; 20
      000C1A 14                    3369 	.db #0x14	; 20
      000C1B 14                    3370 	.db #0x14	; 20
      000C1C 14                    3371 	.db #0x14	; 20
      000C1D 14                    3372 	.db #0x14	; 20
      000C1E 14                    3373 	.db #0x14	; 20
      000C1F 22                    3374 	.db #0x22	; 34
      000C20 C1                    3375 	.db #0xc1	; 193
      000C21 00                    3376 	.db #0x00	; 0
      000C22 00                    3377 	.db #0x00	; 0
      000C23 00                    3378 	.db #0x00	; 0
      000C24 00                    3379 	.db #0x00	; 0
      000C25 00                    3380 	.db #0x00	; 0
      000C26 00                    3381 	.db #0x00	; 0
      000C27 00                    3382 	.db #0x00	; 0
      000C28 48                    3383 	.db #0x48	; 72	'H'
      000C29 48                    3384 	.db #0x48	; 72	'H'
      000C2A 48                    3385 	.db #0x48	; 72	'H'
      000C2B 48                    3386 	.db #0x48	; 72	'H'
      000C2C 30                    3387 	.db #0x30	; 48	'0'
      000C2D 00                    3388 	.db #0x00	; 0
      000C2E 00                    3389 	.db #0x00	; 0
      000C2F 01                    3390 	.db #0x01	; 1
      000C30 FE                    3391 	.db #0xfe	; 254
      000C31 00                    3392 	.db #0x00	; 0
      000C32 00                    3393 	.db #0x00	; 0
      000C33 00                    3394 	.db #0x00	; 0
      000C34 00                    3395 	.db #0x00	; 0
      000C35 00                    3396 	.db #0x00	; 0
      000C36 00                    3397 	.db #0x00	; 0
      000C37 00                    3398 	.db #0x00	; 0
      000C38 A1                    3399 	.db #0xa1	; 161
      000C39 A1                    3400 	.db #0xa1	; 161
      000C3A A1                    3401 	.db #0xa1	; 161
      000C3B BF                    3402 	.db #0xbf	; 191
      000C3C 80                    3403 	.db #0x80	; 128
      000C3D BF                    3404 	.db #0xbf	; 191
      000C3E A1                    3405 	.db #0xa1	; 161
      000C3F 21                    3406 	.db #0x21	; 33
      000C40 3F                    3407 	.db #0x3f	; 63
      000C41 00                    3408 	.db #0x00	; 0
      000C42 00                    3409 	.db #0x00	; 0
      000C43 00                    3410 	.db #0x00	; 0
      000C44 00                    3411 	.db #0x00	; 0
      000C45 00                    3412 	.db #0x00	; 0
      000C46 00                    3413 	.db #0x00	; 0
      000C47 00                    3414 	.db #0x00	; 0
                                   3415 ;src\/Graphics\SpritesLogic.h:34: void HideArrowSprite() {
                                   3416 ;	---------------------------------
                                   3417 ; Function HideArrowSprite
                                   3418 ; ---------------------------------
      000C48                       3419 _HideArrowSprite::
                                   3420 ;src\/Graphics\SpritesLogic.h:35: WRTVRM(SPRATT, 	192);
      000C48 3E C0            [ 7] 3421 	ld	a, #0xc0
      000C4A F5               [11] 3422 	push	af
      000C4B 33               [ 6] 3423 	inc	sp
      000C4C 21 00 1B         [10] 3424 	ld	hl, #0x1b00
      000C4F E5               [11] 3425 	push	hl
      000C50 CDr00r00         [17] 3426 	call	_WRTVRM
      000C53 F1               [10] 3427 	pop	af
      000C54 33               [ 6] 3428 	inc	sp
                                   3429 ;src\/Graphics\SpritesLogic.h:36: }
      000C55 C9               [10] 3430 	ret
                                   3431 ;src\/Graphics\SpritesLogic.h:38: void DrawHitSprite(byte numberHit, byte numberCombo, byte x, byte y, bool firstTime) {
                                   3432 ;	---------------------------------
                                   3433 ; Function DrawHitSprite
                                   3434 ; ---------------------------------
      000C56                       3435 _DrawHitSprite::
      000C56 DD E5            [15] 3436 	push	ix
      000C58 DD 21 00 00      [14] 3437 	ld	ix,#0
      000C5C DD 39            [15] 3438 	add	ix,sp
      000C5E 21 EC FF         [10] 3439 	ld	hl, #-20
      000C61 39               [11] 3440 	add	hl, sp
      000C62 F9               [ 6] 3441 	ld	sp, hl
                                   3442 ;src\/Graphics\SpritesLogic.h:39: const byte redColorRamp[] = {
      000C63 21 00 00         [10] 3443 	ld	hl, #0
      000C66 39               [11] 3444 	add	hl, sp
      000C67 EB               [ 4] 3445 	ex	de, hl
      000C68 3E 0F            [ 7] 3446 	ld	a, #0x0f
      000C6A 12               [ 7] 3447 	ld	(de), a
      000C6B 6B               [ 4] 3448 	ld	l, e
      000C6C 62               [ 4] 3449 	ld	h, d
      000C6D 23               [ 6] 3450 	inc	hl
      000C6E 36 0E            [10] 3451 	ld	(hl), #0x0e
      000C70 6B               [ 4] 3452 	ld	l, e
      000C71 62               [ 4] 3453 	ld	h, d
      000C72 23               [ 6] 3454 	inc	hl
      000C73 23               [ 6] 3455 	inc	hl
      000C74 36 09            [10] 3456 	ld	(hl), #0x09
      000C76 6B               [ 4] 3457 	ld	l, e
      000C77 62               [ 4] 3458 	ld	h, d
      000C78 23               [ 6] 3459 	inc	hl
      000C79 23               [ 6] 3460 	inc	hl
      000C7A 23               [ 6] 3461 	inc	hl
      000C7B 36 06            [10] 3462 	ld	(hl), #0x06
      000C7D 21 04 00         [10] 3463 	ld	hl, #0x0004
      000C80 19               [11] 3464 	add	hl, de
      000C81 36 06            [10] 3465 	ld	(hl), #0x06
      000C83 21 05 00         [10] 3466 	ld	hl, #0x0005
      000C86 19               [11] 3467 	add	hl, de
      000C87 36 09            [10] 3468 	ld	(hl), #0x09
      000C89 21 06 00         [10] 3469 	ld	hl, #0x0006
      000C8C 19               [11] 3470 	add	hl, de
      000C8D 36 0E            [10] 3471 	ld	(hl), #0x0e
      000C8F 21 07 00         [10] 3472 	ld	hl, #0x0007
      000C92 19               [11] 3473 	add	hl, de
      000C93 36 0F            [10] 3474 	ld	(hl), #0x0f
                                   3475 ;src\/Graphics\SpritesLogic.h:61: const byte greenColorRamp[] = {
      000C95 21 08 00         [10] 3476 	ld	hl, #8
      000C98 39               [11] 3477 	add	hl, sp
      000C99 4D               [ 4] 3478 	ld	c, l
      000C9A 44               [ 4] 3479 	ld	b, h
      000C9B 36 0F            [10] 3480 	ld	(hl), #0x0f
      000C9D 69               [ 4] 3481 	ld	l, c
      000C9E 60               [ 4] 3482 	ld	h, b
      000C9F 23               [ 6] 3483 	inc	hl
      000CA0 36 0E            [10] 3484 	ld	(hl), #0x0e
      000CA2 69               [ 4] 3485 	ld	l, c
      000CA3 60               [ 4] 3486 	ld	h, b
      000CA4 23               [ 6] 3487 	inc	hl
      000CA5 23               [ 6] 3488 	inc	hl
      000CA6 36 03            [10] 3489 	ld	(hl), #0x03
      000CA8 69               [ 4] 3490 	ld	l, c
      000CA9 60               [ 4] 3491 	ld	h, b
      000CAA 23               [ 6] 3492 	inc	hl
      000CAB 23               [ 6] 3493 	inc	hl
      000CAC 23               [ 6] 3494 	inc	hl
      000CAD 36 0C            [10] 3495 	ld	(hl), #0x0c
      000CAF 21 04 00         [10] 3496 	ld	hl, #0x0004
      000CB2 09               [11] 3497 	add	hl, bc
      000CB3 36 0C            [10] 3498 	ld	(hl), #0x0c
      000CB5 21 05 00         [10] 3499 	ld	hl, #0x0005
      000CB8 09               [11] 3500 	add	hl, bc
      000CB9 36 03            [10] 3501 	ld	(hl), #0x03
      000CBB 21 06 00         [10] 3502 	ld	hl, #0x0006
      000CBE 09               [11] 3503 	add	hl, bc
      000CBF 36 0E            [10] 3504 	ld	(hl), #0x0e
      000CC1 21 07 00         [10] 3505 	ld	hl, #0x0007
      000CC4 09               [11] 3506 	add	hl, bc
      000CC5 36 0F            [10] 3507 	ld	(hl), #0x0f
                                   3508 ;src\/Graphics\SpritesLogic.h:72: byte colorIndex = (JIFFY & 0b00000111);
      000CC7 3A 9E FC         [13] 3509 	ld	a,(#_JIFFY + 0)
      000CCA E6 07            [ 7] 3510 	and	a, #0x07
                                   3511 ;src\/Graphics\SpritesLogic.h:73: byte currentColor_1 = redColorRamp[colorIndex];
      000CCC 6F               [ 4] 3512 	ld	l, a
      000CCD 83               [ 4] 3513 	add	a,e
      000CCE 5F               [ 4] 3514 	ld	e, a
      000CCF 30 01            [12] 3515 	jr	NC, 00124$
      000CD1 14               [ 4] 3516 	inc	d
      000CD2                       3517 00124$:
      000CD2 1A               [ 7] 3518 	ld	a, (de)
      000CD3 DD 77 FC         [19] 3519 	ld	-4 (ix), a
                                   3520 ;src\/Graphics\SpritesLogic.h:74: byte currentColor_2 = greenColorRamp[colorIndex];
      000CD6 26 00            [ 7] 3521 	ld	h, #0x00
      000CD8 09               [11] 3522 	add	hl, bc
      000CD9 7E               [ 7] 3523 	ld	a, (hl)
      000CDA DD 77 FD         [19] 3524 	ld	-3 (ix), a
                                   3525 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000CDD 3E 01            [ 7] 3526 	ld	a, #0x01
      000CDF DD 96 05         [19] 3527 	sub	a, 5 (ix)
      000CE2 3E 00            [ 7] 3528 	ld	a, #0x00
      000CE4 17               [ 4] 3529 	rla
      000CE5 DD 77 FE         [19] 3530 	ld	-2 (ix), a
                                   3531 ;src\/Graphics\SpritesLogic.h:76: if(firstTime) {
      000CE8 DD 7E 08         [19] 3532 	ld	a, 8 (ix)
      000CEB B7               [ 4] 3533 	or	a, a
      000CEC CArB7r0D         [10] 3534 	jp	Z, 00104$
                                   3535 ;src\/Graphics\SpritesLogic.h:77: WRTVRM(SPRATT + 5, 	x - 8);
      000CEF DD 4E 06         [19] 3536 	ld	c, 6 (ix)
      000CF2 79               [ 4] 3537 	ld	a, c
      000CF3 C6 F8            [ 7] 3538 	add	a, #0xf8
      000CF5 DD 77 FF         [19] 3539 	ld	-1 (ix), a
      000CF8 C5               [11] 3540 	push	bc
      000CF9 F5               [11] 3541 	push	af
      000CFA 33               [ 6] 3542 	inc	sp
      000CFB 21 05 1B         [10] 3543 	ld	hl, #0x1b05
      000CFE E5               [11] 3544 	push	hl
      000CFF CDr00r00         [17] 3545 	call	_WRTVRM
      000D02 F1               [10] 3546 	pop	af
      000D03 33               [ 6] 3547 	inc	sp
      000D04 C1               [10] 3548 	pop	bc
                                   3549 ;src\/Graphics\SpritesLogic.h:78: WRTVRM(SPRATT + 6, 	SPRITE_PATTERN_3X + ((numberHit - 3) * 4));
      000D05 DD 7E 04         [19] 3550 	ld	a, 4 (ix)
      000D08 C6 FD            [ 7] 3551 	add	a, #0xfd
      000D0A 87               [ 4] 3552 	add	a, a
      000D0B 87               [ 4] 3553 	add	a, a
      000D0C C6 18            [ 7] 3554 	add	a, #0x18
      000D0E C5               [11] 3555 	push	bc
      000D0F F5               [11] 3556 	push	af
      000D10 33               [ 6] 3557 	inc	sp
      000D11 21 06 1B         [10] 3558 	ld	hl, #0x1b06
      000D14 E5               [11] 3559 	push	hl
      000D15 CDr00r00         [17] 3560 	call	_WRTVRM
      000D18 F1               [10] 3561 	pop	af
      000D19 33               [ 6] 3562 	inc	sp
      000D1A C1               [10] 3563 	pop	bc
                                   3564 ;src\/Graphics\SpritesLogic.h:80: WRTVRM(SPRATT + 9, 	x + 8);
      000D1B 79               [ 4] 3565 	ld	a, c
      000D1C C6 08            [ 7] 3566 	add	a, #0x08
      000D1E 47               [ 4] 3567 	ld	b, a
      000D1F C5               [11] 3568 	push	bc
      000D20 C5               [11] 3569 	push	bc
      000D21 33               [ 6] 3570 	inc	sp
      000D22 21 09 1B         [10] 3571 	ld	hl, #0x1b09
      000D25 E5               [11] 3572 	push	hl
      000D26 CDr00r00         [17] 3573 	call	_WRTVRM
      000D29 F1               [10] 3574 	pop	af
      000D2A 33               [ 6] 3575 	inc	sp
      000D2B 3E 04            [ 7] 3576 	ld	a, #0x04
      000D2D F5               [11] 3577 	push	af
      000D2E 33               [ 6] 3578 	inc	sp
      000D2F 21 0A 1B         [10] 3579 	ld	hl, #0x1b0a
      000D32 E5               [11] 3580 	push	hl
      000D33 CDr00r00         [17] 3581 	call	_WRTVRM
      000D36 F1               [10] 3582 	pop	af
      000D37 33               [ 6] 3583 	inc	sp
      000D38 C1               [10] 3584 	pop	bc
                                   3585 ;src\/Graphics\SpritesLogic.h:83: WRTVRM(SPRATT + 13, 	x + 24);
      000D39 79               [ 4] 3586 	ld	a, c
      000D3A C6 18            [ 7] 3587 	add	a, #0x18
      000D3C 4F               [ 4] 3588 	ld	c, a
      000D3D C5               [11] 3589 	push	bc
      000D3E 79               [ 4] 3590 	ld	a, c
      000D3F F5               [11] 3591 	push	af
      000D40 33               [ 6] 3592 	inc	sp
      000D41 21 0D 1B         [10] 3593 	ld	hl, #0x1b0d
      000D44 E5               [11] 3594 	push	hl
      000D45 CDr00r00         [17] 3595 	call	_WRTVRM
      000D48 F1               [10] 3596 	pop	af
      000D49 33               [ 6] 3597 	inc	sp
      000D4A 3E 08            [ 7] 3598 	ld	a, #0x08
      000D4C F5               [11] 3599 	push	af
      000D4D 33               [ 6] 3600 	inc	sp
      000D4E 21 0E 1B         [10] 3601 	ld	hl, #0x1b0e
      000D51 E5               [11] 3602 	push	hl
      000D52 CDr00r00         [17] 3603 	call	_WRTVRM
      000D55 F1               [10] 3604 	pop	af
      000D56 33               [ 6] 3605 	inc	sp
      000D57 C1               [10] 3606 	pop	bc
                                   3607 ;src\/Graphics\SpritesLogic.h:86: if(numberCombo > 1) {
      000D58 DD 7E FE         [19] 3608 	ld	a, -2 (ix)
      000D5B B7               [ 4] 3609 	or	a, a
      000D5C 28 59            [12] 3610 	jr	Z, 00104$
                                   3611 ;src\/Graphics\SpritesLogic.h:87: WRTVRM(SPRATT + 17, 	x - 8);
      000D5E C5               [11] 3612 	push	bc
      000D5F DD 7E FF         [19] 3613 	ld	a, -1 (ix)
      000D62 F5               [11] 3614 	push	af
      000D63 33               [ 6] 3615 	inc	sp
      000D64 21 11 1B         [10] 3616 	ld	hl, #0x1b11
      000D67 E5               [11] 3617 	push	hl
      000D68 CDr00r00         [17] 3618 	call	_WRTVRM
      000D6B F1               [10] 3619 	pop	af
      000D6C 33               [ 6] 3620 	inc	sp
      000D6D C1               [10] 3621 	pop	bc
                                   3622 ;src\/Graphics\SpritesLogic.h:88: WRTVRM(SPRATT + 18, 	SPRITE_PATTERN_2X + ((numberCombo - 2) * 4));
      000D6E DD 7E 05         [19] 3623 	ld	a, 5 (ix)
      000D71 3D               [ 4] 3624 	dec	a
      000D72 3D               [ 4] 3625 	dec	a
      000D73 87               [ 4] 3626 	add	a, a
      000D74 87               [ 4] 3627 	add	a, a
      000D75 C6 14            [ 7] 3628 	add	a, #0x14
      000D77 C5               [11] 3629 	push	bc
      000D78 F5               [11] 3630 	push	af
      000D79 33               [ 6] 3631 	inc	sp
      000D7A 21 12 1B         [10] 3632 	ld	hl, #0x1b12
      000D7D E5               [11] 3633 	push	hl
      000D7E CDr00r00         [17] 3634 	call	_WRTVRM
      000D81 F1               [10] 3635 	pop	af
      000D82 33               [ 6] 3636 	inc	sp
      000D83 C1               [10] 3637 	pop	bc
                                   3638 ;src\/Graphics\SpritesLogic.h:90: WRTVRM(SPRATT + 21, 	x + 8);
      000D84 C5               [11] 3639 	push	bc
      000D85 C5               [11] 3640 	push	bc
      000D86 33               [ 6] 3641 	inc	sp
      000D87 21 15 1B         [10] 3642 	ld	hl, #0x1b15
      000D8A E5               [11] 3643 	push	hl
      000D8B CDr00r00         [17] 3644 	call	_WRTVRM
      000D8E F1               [10] 3645 	pop	af
      000D8F 33               [ 6] 3646 	inc	sp
      000D90 3E 0C            [ 7] 3647 	ld	a, #0x0c
      000D92 F5               [11] 3648 	push	af
      000D93 33               [ 6] 3649 	inc	sp
      000D94 21 16 1B         [10] 3650 	ld	hl, #0x1b16
      000D97 E5               [11] 3651 	push	hl
      000D98 CDr00r00         [17] 3652 	call	_WRTVRM
      000D9B F1               [10] 3653 	pop	af
      000D9C 33               [ 6] 3654 	inc	sp
      000D9D C1               [10] 3655 	pop	bc
                                   3656 ;src\/Graphics\SpritesLogic.h:93: WRTVRM(SPRATT + 25, 	x + 24);
      000D9E 79               [ 4] 3657 	ld	a, c
      000D9F F5               [11] 3658 	push	af
      000DA0 33               [ 6] 3659 	inc	sp
      000DA1 21 19 1B         [10] 3660 	ld	hl, #0x1b19
      000DA4 E5               [11] 3661 	push	hl
      000DA5 CDr00r00         [17] 3662 	call	_WRTVRM
      000DA8 F1               [10] 3663 	pop	af
      000DA9 33               [ 6] 3664 	inc	sp
                                   3665 ;src\/Graphics\SpritesLogic.h:94: WRTVRM(SPRATT + 26, 	SPRITE_PATTERN_COMBO + 4);
      000DAA 3E 10            [ 7] 3666 	ld	a, #0x10
      000DAC F5               [11] 3667 	push	af
      000DAD 33               [ 6] 3668 	inc	sp
      000DAE 21 1A 1B         [10] 3669 	ld	hl, #0x1b1a
      000DB1 E5               [11] 3670 	push	hl
      000DB2 CDr00r00         [17] 3671 	call	_WRTVRM
      000DB5 F1               [10] 3672 	pop	af
      000DB6 33               [ 6] 3673 	inc	sp
      000DB7                       3674 00104$:
                                   3675 ;src\/Graphics\SpritesLogic.h:99: WRTVRM(SPRATT + 4, 	y);
      000DB7 DD 7E 07         [19] 3676 	ld	a, 7 (ix)
      000DBA F5               [11] 3677 	push	af
      000DBB 33               [ 6] 3678 	inc	sp
      000DBC 21 04 1B         [10] 3679 	ld	hl, #0x1b04
      000DBF E5               [11] 3680 	push	hl
      000DC0 CDr00r00         [17] 3681 	call	_WRTVRM
      000DC3 F1               [10] 3682 	pop	af
      000DC4 33               [ 6] 3683 	inc	sp
                                   3684 ;src\/Graphics\SpritesLogic.h:100: WRTVRM(SPRATT + 7, 	currentColor_1);
      000DC5 DD 7E FC         [19] 3685 	ld	a, -4 (ix)
      000DC8 F5               [11] 3686 	push	af
      000DC9 33               [ 6] 3687 	inc	sp
      000DCA 21 07 1B         [10] 3688 	ld	hl, #0x1b07
      000DCD E5               [11] 3689 	push	hl
      000DCE CDr00r00         [17] 3690 	call	_WRTVRM
      000DD1 F1               [10] 3691 	pop	af
      000DD2 33               [ 6] 3692 	inc	sp
                                   3693 ;src\/Graphics\SpritesLogic.h:102: WRTVRM(SPRATT + 8, 	y);
      000DD3 DD 7E 07         [19] 3694 	ld	a, 7 (ix)
      000DD6 F5               [11] 3695 	push	af
      000DD7 33               [ 6] 3696 	inc	sp
      000DD8 21 08 1B         [10] 3697 	ld	hl, #0x1b08
      000DDB E5               [11] 3698 	push	hl
      000DDC CDr00r00         [17] 3699 	call	_WRTVRM
      000DDF F1               [10] 3700 	pop	af
      000DE0 33               [ 6] 3701 	inc	sp
                                   3702 ;src\/Graphics\SpritesLogic.h:103: WRTVRM(SPRATT + 11, 	currentColor_1);
      000DE1 DD 7E FC         [19] 3703 	ld	a, -4 (ix)
      000DE4 F5               [11] 3704 	push	af
      000DE5 33               [ 6] 3705 	inc	sp
      000DE6 21 0B 1B         [10] 3706 	ld	hl, #0x1b0b
      000DE9 E5               [11] 3707 	push	hl
      000DEA CDr00r00         [17] 3708 	call	_WRTVRM
      000DED F1               [10] 3709 	pop	af
      000DEE 33               [ 6] 3710 	inc	sp
                                   3711 ;src\/Graphics\SpritesLogic.h:105: WRTVRM(SPRATT + 12, 	y);
      000DEF DD 7E 07         [19] 3712 	ld	a, 7 (ix)
      000DF2 F5               [11] 3713 	push	af
      000DF3 33               [ 6] 3714 	inc	sp
      000DF4 21 0C 1B         [10] 3715 	ld	hl, #0x1b0c
      000DF7 E5               [11] 3716 	push	hl
      000DF8 CDr00r00         [17] 3717 	call	_WRTVRM
      000DFB F1               [10] 3718 	pop	af
      000DFC 33               [ 6] 3719 	inc	sp
                                   3720 ;src\/Graphics\SpritesLogic.h:106: WRTVRM(SPRATT + 15, 	currentColor_1);
      000DFD DD 7E FC         [19] 3721 	ld	a, -4 (ix)
      000E00 F5               [11] 3722 	push	af
      000E01 33               [ 6] 3723 	inc	sp
      000E02 21 0F 1B         [10] 3724 	ld	hl, #0x1b0f
      000E05 E5               [11] 3725 	push	hl
      000E06 CDr00r00         [17] 3726 	call	_WRTVRM
      000E09 F1               [10] 3727 	pop	af
      000E0A 33               [ 6] 3728 	inc	sp
                                   3729 ;src\/Graphics\SpritesLogic.h:108: if(numberCombo > 1) {
      000E0B DD 7E FE         [19] 3730 	ld	a, -2 (ix)
      000E0E B7               [ 4] 3731 	or	a, a
      000E0F 28 52            [12] 3732 	jr	Z, 00107$
                                   3733 ;src\/Graphics\SpritesLogic.h:110: WRTVRM(SPRATT + 16, 	y + 16);
      000E11 DD 7E 07         [19] 3734 	ld	a, 7 (ix)
      000E14 C6 10            [ 7] 3735 	add	a, #0x10
      000E16 47               [ 4] 3736 	ld	b, a
      000E17 C5               [11] 3737 	push	bc
      000E18 C5               [11] 3738 	push	bc
      000E19 33               [ 6] 3739 	inc	sp
      000E1A 21 10 1B         [10] 3740 	ld	hl, #0x1b10
      000E1D E5               [11] 3741 	push	hl
      000E1E CDr00r00         [17] 3742 	call	_WRTVRM
      000E21 F1               [10] 3743 	pop	af
      000E22 33               [ 6] 3744 	inc	sp
      000E23 DD 7E FD         [19] 3745 	ld	a, -3 (ix)
      000E26 F5               [11] 3746 	push	af
      000E27 33               [ 6] 3747 	inc	sp
      000E28 21 13 1B         [10] 3748 	ld	hl, #0x1b13
      000E2B E5               [11] 3749 	push	hl
      000E2C CDr00r00         [17] 3750 	call	_WRTVRM
      000E2F F1               [10] 3751 	pop	af
      000E30 33               [ 6] 3752 	inc	sp
      000E31 C1               [10] 3753 	pop	bc
                                   3754 ;src\/Graphics\SpritesLogic.h:113: WRTVRM(SPRATT + 20, 	y + 16);
      000E32 C5               [11] 3755 	push	bc
      000E33 C5               [11] 3756 	push	bc
      000E34 33               [ 6] 3757 	inc	sp
      000E35 21 14 1B         [10] 3758 	ld	hl, #0x1b14
      000E38 E5               [11] 3759 	push	hl
      000E39 CDr00r00         [17] 3760 	call	_WRTVRM
      000E3C F1               [10] 3761 	pop	af
      000E3D 33               [ 6] 3762 	inc	sp
      000E3E DD 7E FD         [19] 3763 	ld	a, -3 (ix)
      000E41 F5               [11] 3764 	push	af
      000E42 33               [ 6] 3765 	inc	sp
      000E43 21 17 1B         [10] 3766 	ld	hl, #0x1b17
      000E46 E5               [11] 3767 	push	hl
      000E47 CDr00r00         [17] 3768 	call	_WRTVRM
      000E4A F1               [10] 3769 	pop	af
      000E4B 33               [ 6] 3770 	inc	sp
      000E4C 33               [ 6] 3771 	inc	sp
      000E4D 21 18 1B         [10] 3772 	ld	hl, #0x1b18
      000E50 E5               [11] 3773 	push	hl
      000E51 CDr00r00         [17] 3774 	call	_WRTVRM
      000E54 F1               [10] 3775 	pop	af
      000E55 33               [ 6] 3776 	inc	sp
                                   3777 ;src\/Graphics\SpritesLogic.h:117: WRTVRM(SPRATT + 27, 	currentColor_2);
      000E56 DD 7E FD         [19] 3778 	ld	a, -3 (ix)
      000E59 F5               [11] 3779 	push	af
      000E5A 33               [ 6] 3780 	inc	sp
      000E5B 21 1B 1B         [10] 3781 	ld	hl, #0x1b1b
      000E5E E5               [11] 3782 	push	hl
      000E5F CDr00r00         [17] 3783 	call	_WRTVRM
      000E62 F1               [10] 3784 	pop	af
      000E63                       3785 00107$:
                                   3786 ;src\/Graphics\SpritesLogic.h:119: }
      000E63 DD F9            [10] 3787 	ld	sp, ix
      000E65 DD E1            [14] 3788 	pop	ix
      000E67 C9               [10] 3789 	ret
                                   3790 ;src\/Graphics\SpritesLogic.h:121: void HideHitSprite() {
                                   3791 ;	---------------------------------
                                   3792 ; Function HideHitSprite
                                   3793 ; ---------------------------------
      000E68                       3794 _HideHitSprite::
                                   3795 ;src\/Graphics\SpritesLogic.h:123: WRTVRM(SPRATT + 4, 	192);
      000E68 3E C0            [ 7] 3796 	ld	a, #0xc0
      000E6A F5               [11] 3797 	push	af
      000E6B 33               [ 6] 3798 	inc	sp
      000E6C 21 04 1B         [10] 3799 	ld	hl, #0x1b04
      000E6F E5               [11] 3800 	push	hl
      000E70 CDr00r00         [17] 3801 	call	_WRTVRM
      000E73 F1               [10] 3802 	pop	af
      000E74 33               [ 6] 3803 	inc	sp
                                   3804 ;src\/Graphics\SpritesLogic.h:124: WRTVRM(SPRATT + 8, 	192);
      000E75 3E C0            [ 7] 3805 	ld	a, #0xc0
      000E77 F5               [11] 3806 	push	af
      000E78 33               [ 6] 3807 	inc	sp
      000E79 21 08 1B         [10] 3808 	ld	hl, #0x1b08
      000E7C E5               [11] 3809 	push	hl
      000E7D CDr00r00         [17] 3810 	call	_WRTVRM
      000E80 F1               [10] 3811 	pop	af
      000E81 33               [ 6] 3812 	inc	sp
                                   3813 ;src\/Graphics\SpritesLogic.h:125: WRTVRM(SPRATT + 12, 	192);
      000E82 3E C0            [ 7] 3814 	ld	a, #0xc0
      000E84 F5               [11] 3815 	push	af
      000E85 33               [ 6] 3816 	inc	sp
      000E86 21 0C 1B         [10] 3817 	ld	hl, #0x1b0c
      000E89 E5               [11] 3818 	push	hl
      000E8A CDr00r00         [17] 3819 	call	_WRTVRM
      000E8D F1               [10] 3820 	pop	af
      000E8E 33               [ 6] 3821 	inc	sp
                                   3822 ;src\/Graphics\SpritesLogic.h:128: WRTVRM(SPRATT + 16, 	192);
      000E8F 3E C0            [ 7] 3823 	ld	a, #0xc0
      000E91 F5               [11] 3824 	push	af
      000E92 33               [ 6] 3825 	inc	sp
      000E93 21 10 1B         [10] 3826 	ld	hl, #0x1b10
      000E96 E5               [11] 3827 	push	hl
      000E97 CDr00r00         [17] 3828 	call	_WRTVRM
      000E9A F1               [10] 3829 	pop	af
      000E9B 33               [ 6] 3830 	inc	sp
                                   3831 ;src\/Graphics\SpritesLogic.h:129: WRTVRM(SPRATT + 20, 	192);
      000E9C 3E C0            [ 7] 3832 	ld	a, #0xc0
      000E9E F5               [11] 3833 	push	af
      000E9F 33               [ 6] 3834 	inc	sp
      000EA0 21 14 1B         [10] 3835 	ld	hl, #0x1b14
      000EA3 E5               [11] 3836 	push	hl
      000EA4 CDr00r00         [17] 3837 	call	_WRTVRM
      000EA7 F1               [10] 3838 	pop	af
      000EA8 33               [ 6] 3839 	inc	sp
                                   3840 ;src\/Graphics\SpritesLogic.h:130: WRTVRM(SPRATT + 24, 	192);
      000EA9 3E C0            [ 7] 3841 	ld	a, #0xc0
      000EAB F5               [11] 3842 	push	af
      000EAC 33               [ 6] 3843 	inc	sp
      000EAD 21 18 1B         [10] 3844 	ld	hl, #0x1b18
      000EB0 E5               [11] 3845 	push	hl
      000EB1 CDr00r00         [17] 3846 	call	_WRTVRM
      000EB4 F1               [10] 3847 	pop	af
      000EB5 33               [ 6] 3848 	inc	sp
                                   3849 ;src\/Graphics\SpritesLogic.h:131: }
      000EB6 C9               [10] 3850 	ret
                                   3851 ;src\/Graphics\SpritesLogic.h:133: void HideExplosionSprite() {
                                   3852 ;	---------------------------------
                                   3853 ; Function HideExplosionSprite
                                   3854 ; ---------------------------------
      000EB7                       3855 _HideExplosionSprite::
                                   3856 ;src\/Graphics\SpritesLogic.h:134: WRTVRM(SPRATT + 28, 	192);
      000EB7 3E C0            [ 7] 3857 	ld	a, #0xc0
      000EB9 F5               [11] 3858 	push	af
      000EBA 33               [ 6] 3859 	inc	sp
      000EBB 21 1C 1B         [10] 3860 	ld	hl, #0x1b1c
      000EBE E5               [11] 3861 	push	hl
      000EBF CDr00r00         [17] 3862 	call	_WRTVRM
      000EC2 F1               [10] 3863 	pop	af
      000EC3 33               [ 6] 3864 	inc	sp
                                   3865 ;src\/Graphics\SpritesLogic.h:135: WRTVRM(SPRATT + 32, 	192);
      000EC4 3E C0            [ 7] 3866 	ld	a, #0xc0
      000EC6 F5               [11] 3867 	push	af
      000EC7 33               [ 6] 3868 	inc	sp
      000EC8 21 20 1B         [10] 3869 	ld	hl, #0x1b20
      000ECB E5               [11] 3870 	push	hl
      000ECC CDr00r00         [17] 3871 	call	_WRTVRM
      000ECF F1               [10] 3872 	pop	af
      000ED0 33               [ 6] 3873 	inc	sp
                                   3874 ;src\/Graphics\SpritesLogic.h:136: WRTVRM(SPRATT + 36, 	192);
      000ED1 3E C0            [ 7] 3875 	ld	a, #0xc0
      000ED3 F5               [11] 3876 	push	af
      000ED4 33               [ 6] 3877 	inc	sp
      000ED5 21 24 1B         [10] 3878 	ld	hl, #0x1b24
      000ED8 E5               [11] 3879 	push	hl
      000ED9 CDr00r00         [17] 3880 	call	_WRTVRM
      000EDC F1               [10] 3881 	pop	af
      000EDD 33               [ 6] 3882 	inc	sp
                                   3883 ;src\/Graphics\SpritesLogic.h:137: }
      000EDE C9               [10] 3884 	ret
                                   3885 ;src\/Graphics\SpritesLogic.h:139: void DrawExplosionSprite(byte x, byte y, byte counter) {
                                   3886 ;	---------------------------------
                                   3887 ; Function DrawExplosionSprite
                                   3888 ; ---------------------------------
      000EDF                       3889 _DrawExplosionSprite::
      000EDF 3B               [ 6] 3890 	dec	sp
                                   3891 ;src\/Graphics\SpritesLogic.h:141: byte spriteNumber = (counter >> 2); // sprite number between 0 and 7
      000EE0 FD 21 05 00      [14] 3892 	ld	iy, #5
      000EE4 FD 39            [15] 3893 	add	iy, sp
      000EE6 FD 6E 00         [19] 3894 	ld	l, 0 (iy)
      000EE9 CB 3D            [ 8] 3895 	srl	l
      000EEB CB 3D            [ 8] 3896 	srl	l
                                   3897 ;src\/Graphics\SpritesLogic.h:143: if(spriteNumber > 7) {
      000EED 3E 07            [ 7] 3898 	ld	a, #0x07
      000EEF 95               [ 4] 3899 	sub	a, l
      000EF0 30 07            [12] 3900 	jr	NC, 00102$
                                   3901 ;src\/Graphics\SpritesLogic.h:144: HideExplosionSprite();
      000EF2 33               [ 6] 3902 	inc	sp
      000EF3 C3rB7r0E         [10] 3903 	jp	_HideExplosionSprite
      000EF6 C3rC5r0F         [10] 3904 	jp	00104$
      000EF9                       3905 00102$:
                                   3906 ;src\/Graphics\SpritesLogic.h:147: spriteNumber = spriteNumber * 4;
      000EF9 29               [11] 3907 	add	hl, hl
      000EFA 29               [11] 3908 	add	hl, hl
                                   3909 ;src\/Graphics\SpritesLogic.h:149: WRTVRM(SPRATT + 28, 	y - 16);
      000EFB FD 21 04 00      [14] 3910 	ld	iy, #4
      000EFF FD 39            [15] 3911 	add	iy, sp
      000F01 FD 7E 00         [19] 3912 	ld	a, 0 (iy)
      000F04 C6 F0            [ 7] 3913 	add	a, #0xf0
      000F06 67               [ 4] 3914 	ld	h, a
      000F07 E5               [11] 3915 	push	hl
      000F08 E5               [11] 3916 	push	hl
      000F09 33               [ 6] 3917 	inc	sp
      000F0A 11 1C 1B         [10] 3918 	ld	de, #0x1b1c
      000F0D D5               [11] 3919 	push	de
      000F0E CDr00r00         [17] 3920 	call	_WRTVRM
      000F11 F1               [10] 3921 	pop	af
      000F12 33               [ 6] 3922 	inc	sp
      000F13 21 05 00         [10] 3923 	ld	hl, #5
      000F16 39               [11] 3924 	add	hl, sp
      000F17 7E               [ 7] 3925 	ld	a, (hl)
      000F18 F5               [11] 3926 	push	af
      000F19 33               [ 6] 3927 	inc	sp
      000F1A 11 1D 1B         [10] 3928 	ld	de, #0x1b1d
      000F1D D5               [11] 3929 	push	de
      000F1E CDr00r00         [17] 3930 	call	_WRTVRM
      000F21 F1               [10] 3931 	pop	af
      000F22 33               [ 6] 3932 	inc	sp
      000F23 E1               [10] 3933 	pop	hl
                                   3934 ;src\/Graphics\SpritesLogic.h:151: WRTVRM(SPRATT + 30, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000F24 7D               [ 4] 3935 	ld	a, l
      000F25 C6 2C            [ 7] 3936 	add	a, #0x2c
      000F27 FD 21 00 00      [14] 3937 	ld	iy, #0
      000F2B FD 39            [15] 3938 	add	iy, sp
      000F2D FD 77 00         [19] 3939 	ld	0 (iy), a
      000F30 E5               [11] 3940 	push	hl
      000F31 F5               [11] 3941 	push	af
      000F32 33               [ 6] 3942 	inc	sp
      000F33 11 1E 1B         [10] 3943 	ld	de, #0x1b1e
      000F36 D5               [11] 3944 	push	de
      000F37 CDr00r00         [17] 3945 	call	_WRTVRM
      000F3A F1               [10] 3946 	pop	af
      000F3B 33               [ 6] 3947 	inc	sp
      000F3C 3E 0F            [ 7] 3948 	ld	a, #0x0f
      000F3E F5               [11] 3949 	push	af
      000F3F 33               [ 6] 3950 	inc	sp
      000F40 11 1F 1B         [10] 3951 	ld	de, #0x1b1f
      000F43 D5               [11] 3952 	push	de
      000F44 CDr00r00         [17] 3953 	call	_WRTVRM
      000F47 F1               [10] 3954 	pop	af
      000F48 33               [ 6] 3955 	inc	sp
      000F49 E1               [10] 3956 	pop	hl
                                   3957 ;src\/Graphics\SpritesLogic.h:154: WRTVRM(SPRATT + 32, 	y - 16);
      000F4A E5               [11] 3958 	push	hl
      000F4B E5               [11] 3959 	push	hl
      000F4C 33               [ 6] 3960 	inc	sp
      000F4D 11 20 1B         [10] 3961 	ld	de, #0x1b20
      000F50 D5               [11] 3962 	push	de
      000F51 CDr00r00         [17] 3963 	call	_WRTVRM
      000F54 F1               [10] 3964 	pop	af
      000F55 33               [ 6] 3965 	inc	sp
      000F56 E1               [10] 3966 	pop	hl
                                   3967 ;src\/Graphics\SpritesLogic.h:155: WRTVRM(SPRATT + 33, 	x + 16);
      000F57 FD 21 03 00      [14] 3968 	ld	iy, #3
      000F5B FD 39            [15] 3969 	add	iy, sp
      000F5D FD 6E 00         [19] 3970 	ld	l, 0 (iy)
      000F60 7D               [ 4] 3971 	ld	a, l
      000F61 C6 10            [ 7] 3972 	add	a, #0x10
      000F63 E5               [11] 3973 	push	hl
      000F64 F5               [11] 3974 	push	af
      000F65 33               [ 6] 3975 	inc	sp
      000F66 11 21 1B         [10] 3976 	ld	de, #0x1b21
      000F69 D5               [11] 3977 	push	de
      000F6A CDr00r00         [17] 3978 	call	_WRTVRM
      000F6D F1               [10] 3979 	pop	af
      000F6E 33               [ 6] 3980 	inc	sp
      000F6F 21 02 00         [10] 3981 	ld	hl, #2
      000F72 39               [11] 3982 	add	hl, sp
      000F73 7E               [ 7] 3983 	ld	a, (hl)
      000F74 F5               [11] 3984 	push	af
      000F75 33               [ 6] 3985 	inc	sp
      000F76 11 22 1B         [10] 3986 	ld	de, #0x1b22
      000F79 D5               [11] 3987 	push	de
      000F7A CDr00r00         [17] 3988 	call	_WRTVRM
      000F7D F1               [10] 3989 	pop	af
      000F7E 33               [ 6] 3990 	inc	sp
      000F7F 3E 0A            [ 7] 3991 	ld	a, #0x0a
      000F81 F5               [11] 3992 	push	af
      000F82 33               [ 6] 3993 	inc	sp
      000F83 11 23 1B         [10] 3994 	ld	de, #0x1b23
      000F86 D5               [11] 3995 	push	de
      000F87 CDr00r00         [17] 3996 	call	_WRTVRM
      000F8A F1               [10] 3997 	pop	af
      000F8B 33               [ 6] 3998 	inc	sp
      000F8C E1               [10] 3999 	pop	hl
                                   4000 ;src\/Graphics\SpritesLogic.h:159: WRTVRM(SPRATT + 36, 	y - 16);
      000F8D E5               [11] 4001 	push	hl
      000F8E E5               [11] 4002 	push	hl
      000F8F 33               [ 6] 4003 	inc	sp
      000F90 11 24 1B         [10] 4004 	ld	de, #0x1b24
      000F93 D5               [11] 4005 	push	de
      000F94 CDr00r00         [17] 4006 	call	_WRTVRM
      000F97 F1               [10] 4007 	pop	af
      000F98 33               [ 6] 4008 	inc	sp
      000F99 E1               [10] 4009 	pop	hl
                                   4010 ;src\/Graphics\SpritesLogic.h:160: WRTVRM(SPRATT + 37, 	x + 32);
      000F9A 7D               [ 4] 4011 	ld	a, l
      000F9B C6 20            [ 7] 4012 	add	a, #0x20
      000F9D F5               [11] 4013 	push	af
      000F9E 33               [ 6] 4014 	inc	sp
      000F9F 21 25 1B         [10] 4015 	ld	hl, #0x1b25
      000FA2 E5               [11] 4016 	push	hl
      000FA3 CDr00r00         [17] 4017 	call	_WRTVRM
      000FA6 F1               [10] 4018 	pop	af
      000FA7 33               [ 6] 4019 	inc	sp
                                   4020 ;src\/Graphics\SpritesLogic.h:161: WRTVRM(SPRATT + 38, 	SPRITE_PATTERN_EXPLOSION + spriteNumber);
      000FA8 21 00 00         [10] 4021 	ld	hl, #0
      000FAB 39               [11] 4022 	add	hl, sp
      000FAC 7E               [ 7] 4023 	ld	a, (hl)
      000FAD F5               [11] 4024 	push	af
      000FAE 33               [ 6] 4025 	inc	sp
      000FAF 21 26 1B         [10] 4026 	ld	hl, #0x1b26
      000FB2 E5               [11] 4027 	push	hl
      000FB3 CDr00r00         [17] 4028 	call	_WRTVRM
      000FB6 F1               [10] 4029 	pop	af
      000FB7 33               [ 6] 4030 	inc	sp
                                   4031 ;src\/Graphics\SpritesLogic.h:162: WRTVRM(SPRATT + 39, 	3);
      000FB8 3E 03            [ 7] 4032 	ld	a, #0x03
      000FBA F5               [11] 4033 	push	af
      000FBB 33               [ 6] 4034 	inc	sp
      000FBC 21 27 1B         [10] 4035 	ld	hl, #0x1b27
      000FBF E5               [11] 4036 	push	hl
      000FC0 CDr00r00         [17] 4037 	call	_WRTVRM
      000FC3 F1               [10] 4038 	pop	af
      000FC4 33               [ 6] 4039 	inc	sp
      000FC5                       4040 00104$:
                                   4041 ;src\/Graphics\SpritesLogic.h:164: }
      000FC5 33               [ 6] 4042 	inc	sp
      000FC6 C9               [10] 4043 	ret
                                   4044 ;src\/Graphics\Countdown.h:12: void AnimateSprites(byte x, byte y, byte pattern) {
                                   4045 ;	---------------------------------
                                   4046 ; Function AnimateSprites
                                   4047 ; ---------------------------------
      000FC7                       4048 _AnimateSprites::
      000FC7 DD E5            [15] 4049 	push	ix
      000FC9 DD 21 00 00      [14] 4050 	ld	ix,#0
      000FCD DD 39            [15] 4051 	add	ix,sp
      000FCF 3B               [ 6] 4052 	dec	sp
                                   4053 ;src\/Graphics\Countdown.h:14: WRTVRM(SPRATT, 	    y); //96-16);
      000FD0 DD 7E 05         [19] 4054 	ld	a, 5 (ix)
      000FD3 F5               [11] 4055 	push	af
      000FD4 33               [ 6] 4056 	inc	sp
      000FD5 21 00 1B         [10] 4057 	ld	hl, #0x1b00
      000FD8 E5               [11] 4058 	push	hl
      000FD9 CDr00r00         [17] 4059 	call	_WRTVRM
      000FDC F1               [10] 4060 	pop	af
      000FDD 33               [ 6] 4061 	inc	sp
                                   4062 ;src\/Graphics\Countdown.h:15: WRTVRM(SPRATT + 1, 	256-x-16); //128-16);
      000FDE DD 4E 04         [19] 4063 	ld	c, 4 (ix)
      000FE1 3E F0            [ 7] 4064 	ld	a, #0xf0
      000FE3 91               [ 4] 4065 	sub	a, c
      000FE4 DD 77 FF         [19] 4066 	ld	-1 (ix), a
      000FE7 F5               [11] 4067 	push	af
      000FE8 33               [ 6] 4068 	inc	sp
      000FE9 21 01 1B         [10] 4069 	ld	hl, #0x1b01
      000FEC E5               [11] 4070 	push	hl
      000FED CDr00r00         [17] 4071 	call	_WRTVRM
      000FF0 F1               [10] 4072 	pop	af
      000FF1 33               [ 6] 4073 	inc	sp
                                   4074 ;src\/Graphics\Countdown.h:16: WRTVRM(SPRATT + 2, 	pattern);
      000FF2 DD 7E 06         [19] 4075 	ld	a, 6 (ix)
      000FF5 F5               [11] 4076 	push	af
      000FF6 33               [ 6] 4077 	inc	sp
      000FF7 21 02 1B         [10] 4078 	ld	hl, #0x1b02
      000FFA E5               [11] 4079 	push	hl
      000FFB CDr00r00         [17] 4080 	call	_WRTVRM
      000FFE F1               [10] 4081 	pop	af
      000FFF 33               [ 6] 4082 	inc	sp
                                   4083 ;src\/Graphics\Countdown.h:17: WRTVRM(SPRATT + 3, 	10);
      001000 3E 0A            [ 7] 4084 	ld	a, #0x0a
      001002 F5               [11] 4085 	push	af
      001003 33               [ 6] 4086 	inc	sp
      001004 21 03 1B         [10] 4087 	ld	hl, #0x1b03
      001007 E5               [11] 4088 	push	hl
      001008 CDr00r00         [17] 4089 	call	_WRTVRM
      00100B F1               [10] 4090 	pop	af
      00100C 33               [ 6] 4091 	inc	sp
                                   4092 ;src\/Graphics\Countdown.h:20: WRTVRM(SPRATT + 4, 	y); //96-16);
      00100D DD 7E 05         [19] 4093 	ld	a, 5 (ix)
      001010 F5               [11] 4094 	push	af
      001011 33               [ 6] 4095 	inc	sp
      001012 21 04 1B         [10] 4096 	ld	hl, #0x1b04
      001015 E5               [11] 4097 	push	hl
      001016 CDr00r00         [17] 4098 	call	_WRTVRM
      001019 F1               [10] 4099 	pop	af
      00101A 33               [ 6] 4100 	inc	sp
                                   4101 ;src\/Graphics\Countdown.h:21: WRTVRM(SPRATT + 5, 	x);
      00101B DD 7E 04         [19] 4102 	ld	a, 4 (ix)
      00101E F5               [11] 4103 	push	af
      00101F 33               [ 6] 4104 	inc	sp
      001020 21 05 1B         [10] 4105 	ld	hl, #0x1b05
      001023 E5               [11] 4106 	push	hl
      001024 CDr00r00         [17] 4107 	call	_WRTVRM
      001027 F1               [10] 4108 	pop	af
      001028 33               [ 6] 4109 	inc	sp
                                   4110 ;src\/Graphics\Countdown.h:22: WRTVRM(SPRATT + 6,  pattern + 4);
      001029 DD 4E 06         [19] 4111 	ld	c, 6 (ix)
      00102C 79               [ 4] 4112 	ld	a, c
      00102D 3C               [ 4] 4113 	inc	a
      00102E 3C               [ 4] 4114 	inc	a
      00102F 3C               [ 4] 4115 	inc	a
      001030 3C               [ 4] 4116 	inc	a
      001031 C5               [11] 4117 	push	bc
      001032 F5               [11] 4118 	push	af
      001033 33               [ 6] 4119 	inc	sp
      001034 21 06 1B         [10] 4120 	ld	hl, #0x1b06
      001037 E5               [11] 4121 	push	hl
      001038 CDr00r00         [17] 4122 	call	_WRTVRM
      00103B F1               [10] 4123 	pop	af
      00103C 33               [ 6] 4124 	inc	sp
      00103D 3E 0A            [ 7] 4125 	ld	a, #0x0a
      00103F F5               [11] 4126 	push	af
      001040 33               [ 6] 4127 	inc	sp
      001041 21 07 1B         [10] 4128 	ld	hl, #0x1b07
      001044 E5               [11] 4129 	push	hl
      001045 CDr00r00         [17] 4130 	call	_WRTVRM
      001048 F1               [10] 4131 	pop	af
      001049 33               [ 6] 4132 	inc	sp
      00104A C1               [10] 4133 	pop	bc
                                   4134 ;src\/Graphics\Countdown.h:26: WRTVRM(SPRATT + 8, 	192-y-16); //96);
      00104B DD 46 05         [19] 4135 	ld	b, 5 (ix)
      00104E 3E B0            [ 7] 4136 	ld	a, #0xb0
      001050 90               [ 4] 4137 	sub	a, b
      001051 47               [ 4] 4138 	ld	b, a
      001052 C5               [11] 4139 	push	bc
      001053 C5               [11] 4140 	push	bc
      001054 33               [ 6] 4141 	inc	sp
      001055 21 08 1B         [10] 4142 	ld	hl, #0x1b08
      001058 E5               [11] 4143 	push	hl
      001059 CDr00r00         [17] 4144 	call	_WRTVRM
      00105C F1               [10] 4145 	pop	af
      00105D 33               [ 6] 4146 	inc	sp
      00105E DD 7E FF         [19] 4147 	ld	a, -1 (ix)
      001061 F5               [11] 4148 	push	af
      001062 33               [ 6] 4149 	inc	sp
      001063 21 09 1B         [10] 4150 	ld	hl, #0x1b09
      001066 E5               [11] 4151 	push	hl
      001067 CDr00r00         [17] 4152 	call	_WRTVRM
      00106A F1               [10] 4153 	pop	af
      00106B 33               [ 6] 4154 	inc	sp
      00106C C1               [10] 4155 	pop	bc
                                   4156 ;src\/Graphics\Countdown.h:28: WRTVRM(SPRATT + 10,	pattern + 8);
      00106D 79               [ 4] 4157 	ld	a, c
      00106E C6 08            [ 7] 4158 	add	a, #0x08
      001070 C5               [11] 4159 	push	bc
      001071 F5               [11] 4160 	push	af
      001072 33               [ 6] 4161 	inc	sp
      001073 21 0A 1B         [10] 4162 	ld	hl, #0x1b0a
      001076 E5               [11] 4163 	push	hl
      001077 CDr00r00         [17] 4164 	call	_WRTVRM
      00107A F1               [10] 4165 	pop	af
      00107B 33               [ 6] 4166 	inc	sp
      00107C 3E 0A            [ 7] 4167 	ld	a, #0x0a
      00107E F5               [11] 4168 	push	af
      00107F 33               [ 6] 4169 	inc	sp
      001080 21 0B 1B         [10] 4170 	ld	hl, #0x1b0b
      001083 E5               [11] 4171 	push	hl
      001084 CDr00r00         [17] 4172 	call	_WRTVRM
      001087 F1               [10] 4173 	pop	af
      001088 33               [ 6] 4174 	inc	sp
      001089 C1               [10] 4175 	pop	bc
                                   4176 ;src\/Graphics\Countdown.h:32: WRTVRM(SPRATT + 12,	192-y-16); //96);
      00108A C5               [11] 4177 	push	bc
      00108B C5               [11] 4178 	push	bc
      00108C 33               [ 6] 4179 	inc	sp
      00108D 21 0C 1B         [10] 4180 	ld	hl, #0x1b0c
      001090 E5               [11] 4181 	push	hl
      001091 CDr00r00         [17] 4182 	call	_WRTVRM
      001094 F1               [10] 4183 	pop	af
      001095 33               [ 6] 4184 	inc	sp
      001096 DD 7E 04         [19] 4185 	ld	a, 4 (ix)
      001099 F5               [11] 4186 	push	af
      00109A 33               [ 6] 4187 	inc	sp
      00109B 21 0D 1B         [10] 4188 	ld	hl, #0x1b0d
      00109E E5               [11] 4189 	push	hl
      00109F CDr00r00         [17] 4190 	call	_WRTVRM
      0010A2 F1               [10] 4191 	pop	af
      0010A3 33               [ 6] 4192 	inc	sp
      0010A4 C1               [10] 4193 	pop	bc
                                   4194 ;src\/Graphics\Countdown.h:34: WRTVRM(SPRATT + 14,	pattern + 12);
      0010A5 79               [ 4] 4195 	ld	a, c
      0010A6 C6 0C            [ 7] 4196 	add	a, #0x0c
      0010A8 F5               [11] 4197 	push	af
      0010A9 33               [ 6] 4198 	inc	sp
      0010AA 21 0E 1B         [10] 4199 	ld	hl, #0x1b0e
      0010AD E5               [11] 4200 	push	hl
      0010AE CDr00r00         [17] 4201 	call	_WRTVRM
      0010B1 F1               [10] 4202 	pop	af
      0010B2 33               [ 6] 4203 	inc	sp
                                   4204 ;src\/Graphics\Countdown.h:35: WRTVRM(SPRATT + 15,	10);
      0010B3 3E 0A            [ 7] 4205 	ld	a, #0x0a
      0010B5 F5               [11] 4206 	push	af
      0010B6 33               [ 6] 4207 	inc	sp
      0010B7 21 0F 1B         [10] 4208 	ld	hl, #0x1b0f
      0010BA E5               [11] 4209 	push	hl
      0010BB CDr00r00         [17] 4210 	call	_WRTVRM
      0010BE F1               [10] 4211 	pop	af
      0010BF 33               [ 6] 4212 	inc	sp
                                   4213 ;src\/Graphics\Countdown.h:36: }
      0010C0 33               [ 6] 4214 	inc	sp
      0010C1 DD E1            [14] 4215 	pop	ix
      0010C3 C9               [10] 4216 	ret
      0010C4                       4217 _colors:
      0010C4 0F                    4218 	.db #0x0f	; 15
      0010C5 0E                    4219 	.db #0x0e	; 14
      0010C6 05                    4220 	.db #0x05	; 5
      0010C7 04                    4221 	.db #0x04	; 4
      0010C8 04                    4222 	.db #0x04	; 4
      0010C9 05                    4223 	.db #0x05	; 5
      0010CA 0E                    4224 	.db #0x0e	; 14
      0010CB 0F                    4225 	.db #0x0f	; 15
                                   4226 ;src\/Graphics\Countdown.h:38: void BlinkNumber(byte colorIndex) {
                                   4227 ;	---------------------------------
                                   4228 ; Function BlinkNumber
                                   4229 ; ---------------------------------
      0010CC                       4230 _BlinkNumber::
                                   4231 ;src\/Graphics\Countdown.h:41: WRTVRM(SPRATT + 3, 	colors[colorIndex]);
      0010CC 3ErC4            [ 7] 4232 	ld	a, #<(_colors)
      0010CE 21 02 00         [10] 4233 	ld	hl, #2
      0010D1 39               [11] 4234 	add	hl, sp
      0010D2 86               [ 7] 4235 	add	a, (hl)
      0010D3 4F               [ 4] 4236 	ld	c, a
      0010D4 3Es10            [ 7] 4237 	ld	a, #>(_colors)
      0010D6 CE 00            [ 7] 4238 	adc	a, #0x00
      0010D8 47               [ 4] 4239 	ld	b, a
      0010D9 0A               [ 7] 4240 	ld	a, (bc)
      0010DA C5               [11] 4241 	push	bc
      0010DB F5               [11] 4242 	push	af
      0010DC 33               [ 6] 4243 	inc	sp
      0010DD 21 03 1B         [10] 4244 	ld	hl, #0x1b03
      0010E0 E5               [11] 4245 	push	hl
      0010E1 CDr00r00         [17] 4246 	call	_WRTVRM
      0010E4 F1               [10] 4247 	pop	af
      0010E5 33               [ 6] 4248 	inc	sp
      0010E6 C1               [10] 4249 	pop	bc
                                   4250 ;src\/Graphics\Countdown.h:42: WRTVRM(SPRATT + 7, 	colors[colorIndex]);
      0010E7 0A               [ 7] 4251 	ld	a, (bc)
      0010E8 C5               [11] 4252 	push	bc
      0010E9 F5               [11] 4253 	push	af
      0010EA 33               [ 6] 4254 	inc	sp
      0010EB 21 07 1B         [10] 4255 	ld	hl, #0x1b07
      0010EE E5               [11] 4256 	push	hl
      0010EF CDr00r00         [17] 4257 	call	_WRTVRM
      0010F2 F1               [10] 4258 	pop	af
      0010F3 33               [ 6] 4259 	inc	sp
      0010F4 C1               [10] 4260 	pop	bc
                                   4261 ;src\/Graphics\Countdown.h:43: WRTVRM(SPRATT + 11,	colors[colorIndex]);
      0010F5 0A               [ 7] 4262 	ld	a, (bc)
      0010F6 C5               [11] 4263 	push	bc
      0010F7 F5               [11] 4264 	push	af
      0010F8 33               [ 6] 4265 	inc	sp
      0010F9 21 0B 1B         [10] 4266 	ld	hl, #0x1b0b
      0010FC E5               [11] 4267 	push	hl
      0010FD CDr00r00         [17] 4268 	call	_WRTVRM
      001100 F1               [10] 4269 	pop	af
      001101 33               [ 6] 4270 	inc	sp
      001102 C1               [10] 4271 	pop	bc
                                   4272 ;src\/Graphics\Countdown.h:44: WRTVRM(SPRATT + 15, colors[colorIndex]);    
      001103 0A               [ 7] 4273 	ld	a, (bc)
      001104 F5               [11] 4274 	push	af
      001105 33               [ 6] 4275 	inc	sp
      001106 21 0F 1B         [10] 4276 	ld	hl, #0x1b0f
      001109 E5               [11] 4277 	push	hl
      00110A CDr00r00         [17] 4278 	call	_WRTVRM
      00110D F1               [10] 4279 	pop	af
      00110E 33               [ 6] 4280 	inc	sp
                                   4281 ;src\/Graphics\Countdown.h:45: }
      00110F C9               [10] 4282 	ret
                                   4283 ;src\/Graphics\Countdown.h:47: void ShowCountdown() {
                                   4284 ;	---------------------------------
                                   4285 ; Function ShowCountdown
                                   4286 ; ---------------------------------
      001110                       4287 _ShowCountdown::
      001110 DD E5            [15] 4288 	push	ix
      001112 DD 21 00 00      [14] 4289 	ld	ix,#0
      001116 DD 39            [15] 4290 	add	ix,sp
      001118 F5               [11] 4291 	push	af
      001119 F5               [11] 4292 	push	af
      00111A 3B               [ 6] 4293 	dec	sp
                                   4294 ;src\/Graphics\Countdown.h:49: byte x = 128-80, y = 0, colorIndex = 0;
      00111B 0E 30            [ 7] 4295 	ld	c, #0x30
      00111D DD 36 FB 00      [19] 4296 	ld	-5 (ix), #0
      001121 DD 36 FE 00      [19] 4297 	ld	-2 (ix), #0
                                   4298 ;src\/Graphics\Countdown.h:51: while(counter++ < 240) {
      001125 DD 36 FF 00      [19] 4299 	ld	-1 (ix), #0
      001129                       4300 00137$:
      001129 DD 7E FF         [19] 4301 	ld	a, -1 (ix)
      00112C D6 F0            [ 7] 4302 	sub	a, #0xf0
      00112E D2r5Ar12         [10] 4303 	jp	NC, 00139$
      001131 DD 34 FF         [23] 4304 	inc	-1 (ix)
                                   4305 ;src\/Graphics\Countdown.h:61: word lastJiffy = JIFFY;
      001134 ED 5B 9E FC      [20] 4306 	ld	de, (_JIFFY)
                                   4307 ;src\/Graphics\Countdown.h:62: while (lastJiffy == JIFFY) {
      001138                       4308 00101$:
      001138 2A 9E FC         [16] 4309 	ld	hl, (_JIFFY)
      00113B BF               [ 4] 4310 	cp	a, a
      00113C ED 52            [15] 4311 	sbc	hl, de
      00113E 28 F8            [12] 4312 	jr	Z, 00101$
                                   4313 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001140 79               [ 4] 4314 	ld	a, c
      001141 D6 80            [ 7] 4315 	sub	a, #0x80
      001143 3E 00            [ 7] 4316 	ld	a, #0x00
      001145 17               [ 4] 4317 	rla
      001146 47               [ 4] 4318 	ld	b, a
      001147 59               [ 4] 4319 	ld	e, c
                                   4320 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001148 DD 7E FB         [19] 4321 	ld	a, -5 (ix)
      00114B D6 50            [ 7] 4322 	sub	a, #0x50
      00114D 3E 00            [ 7] 4323 	ld	a, #0x00
      00114F 17               [ 4] 4324 	rla
      001150 DD 77 FC         [19] 4325 	ld	-4 (ix), a
      001153 DD 56 FB         [19] 4326 	ld	d, -5 (ix)
                                   4327 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      001156 1C               [ 4] 4328 	inc	e
      001157 1C               [ 4] 4329 	inc	e
      001158 1C               [ 4] 4330 	inc	e
      001159 1C               [ 4] 4331 	inc	e
                                   4332 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      00115A 7A               [ 4] 4333 	ld	a, d
      00115B C6 04            [ 7] 4334 	add	a, #0x04
      00115D DD 77 FD         [19] 4335 	ld	-3 (ix), a
                                   4336 ;src\/Graphics\Countdown.h:66: if(counter < 30) {
      001160 DD 7E FF         [19] 4337 	ld	a, -1 (ix)
      001163 D6 1E            [ 7] 4338 	sub	a, #0x1e
      001165 30 28            [12] 4339 	jr	NC, 00135$
                                   4340 ;src\/Graphics\Countdown.h:67: colorIndex = 0;
      001167 DD 36 FE 00      [19] 4341 	ld	-2 (ix), #0
                                   4342 ;src\/Graphics\Countdown.h:69: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_3_32X32);
      00116B C5               [11] 4343 	push	bc
      00116C D5               [11] 4344 	push	de
      00116D 3E 54            [ 7] 4345 	ld	a, #0x54
      00116F F5               [11] 4346 	push	af
      001170 33               [ 6] 4347 	inc	sp
      001171 DD 46 FB         [19] 4348 	ld	b, -5 (ix)
      001174 C5               [11] 4349 	push	bc
      001175 CDrC7r0F         [17] 4350 	call	_AnimateSprites
      001178 F1               [10] 4351 	pop	af
      001179 33               [ 6] 4352 	inc	sp
      00117A D1               [10] 4353 	pop	de
      00117B C1               [10] 4354 	pop	bc
                                   4355 ;src\/Graphics\Countdown.h:71: if(x < 128) x += 4;
      00117C 78               [ 4] 4356 	ld	a, b
      00117D B7               [ 4] 4357 	or	a, a
      00117E 28 01            [12] 4358 	jr	Z, 00105$
      001180 4B               [ 4] 4359 	ld	c, e
      001181                       4360 00105$:
                                   4361 ;src\/Graphics\Countdown.h:72: if(y < 80) y += 4;
      001181 DD 7E FC         [19] 4362 	ld	a, -4 (ix)
      001184 B7               [ 4] 4363 	or	a, a
      001185 28 A2            [12] 4364 	jr	Z, 00137$
      001187 DD 7E FD         [19] 4365 	ld	a, -3 (ix)
      00118A DD 77 FB         [19] 4366 	ld	-5 (ix), a
      00118D 18 9A            [12] 4367 	jr	00137$
      00118F                       4368 00135$:
                                   4369 ;src\/Graphics\Countdown.h:74: else if(counter >= 60 && counter < 90) {
      00118F DD 7E FF         [19] 4370 	ld	a, -1 (ix)
      001192 D6 3C            [ 7] 4371 	sub	a, #0x3c
      001194 38 31            [12] 4372 	jr	C, 00131$
      001196 DD 7E FF         [19] 4373 	ld	a, -1 (ix)
      001199 D6 5A            [ 7] 4374 	sub	a, #0x5a
      00119B 30 2A            [12] 4375 	jr	NC, 00131$
                                   4376 ;src\/Graphics\Countdown.h:75: colorIndex = 0;
      00119D DD 36 FE 00      [19] 4377 	ld	-2 (ix), #0
                                   4378 ;src\/Graphics\Countdown.h:77: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_2_32X32);
      0011A1 C5               [11] 4379 	push	bc
      0011A2 D5               [11] 4380 	push	de
      0011A3 3E 64            [ 7] 4381 	ld	a, #0x64
      0011A5 F5               [11] 4382 	push	af
      0011A6 33               [ 6] 4383 	inc	sp
      0011A7 DD 46 FB         [19] 4384 	ld	b, -5 (ix)
      0011AA C5               [11] 4385 	push	bc
      0011AB CDrC7r0F         [17] 4386 	call	_AnimateSprites
      0011AE F1               [10] 4387 	pop	af
      0011AF 33               [ 6] 4388 	inc	sp
      0011B0 D1               [10] 4389 	pop	de
      0011B1 C1               [10] 4390 	pop	bc
                                   4391 ;src\/Graphics\Countdown.h:79: if(x < 128) x += 4;
      0011B2 78               [ 4] 4392 	ld	a, b
      0011B3 B7               [ 4] 4393 	or	a, a
      0011B4 28 01            [12] 4394 	jr	Z, 00109$
      0011B6 4B               [ 4] 4395 	ld	c, e
      0011B7                       4396 00109$:
                                   4397 ;src\/Graphics\Countdown.h:80: if(y < 80) y += 4;
      0011B7 DD 7E FC         [19] 4398 	ld	a, -4 (ix)
      0011BA B7               [ 4] 4399 	or	a, a
      0011BB CAr29r11         [10] 4400 	jp	Z, 00137$
      0011BE DD 7E FD         [19] 4401 	ld	a, -3 (ix)
      0011C1 DD 77 FB         [19] 4402 	ld	-5 (ix), a
      0011C4 C3r29r11         [10] 4403 	jp	00137$
      0011C7                       4404 00131$:
                                   4405 ;src\/Graphics\Countdown.h:82: else if(counter >= 120 && counter < 150) {
      0011C7 DD 7E FF         [19] 4406 	ld	a, -1 (ix)
      0011CA D6 78            [ 7] 4407 	sub	a, #0x78
      0011CC 38 31            [12] 4408 	jr	C, 00127$
      0011CE DD 7E FF         [19] 4409 	ld	a, -1 (ix)
      0011D1 D6 96            [ 7] 4410 	sub	a, #0x96
      0011D3 30 2A            [12] 4411 	jr	NC, 00127$
                                   4412 ;src\/Graphics\Countdown.h:83: colorIndex = 0;
      0011D5 DD 36 FE 00      [19] 4413 	ld	-2 (ix), #0
                                   4414 ;src\/Graphics\Countdown.h:85: AnimateSprites(x, y, SPRITE_PATTERN_NUMBER_1_32X32);
      0011D9 C5               [11] 4415 	push	bc
      0011DA D5               [11] 4416 	push	de
      0011DB 3E 74            [ 7] 4417 	ld	a, #0x74
      0011DD F5               [11] 4418 	push	af
      0011DE 33               [ 6] 4419 	inc	sp
      0011DF DD 46 FB         [19] 4420 	ld	b, -5 (ix)
      0011E2 C5               [11] 4421 	push	bc
      0011E3 CDrC7r0F         [17] 4422 	call	_AnimateSprites
      0011E6 F1               [10] 4423 	pop	af
      0011E7 33               [ 6] 4424 	inc	sp
      0011E8 D1               [10] 4425 	pop	de
      0011E9 C1               [10] 4426 	pop	bc
                                   4427 ;src\/Graphics\Countdown.h:87: if(x < 128) x += 4;
      0011EA 78               [ 4] 4428 	ld	a, b
      0011EB B7               [ 4] 4429 	or	a, a
      0011EC 28 01            [12] 4430 	jr	Z, 00113$
      0011EE 4B               [ 4] 4431 	ld	c, e
      0011EF                       4432 00113$:
                                   4433 ;src\/Graphics\Countdown.h:88: if(y < 80) y += 4;
      0011EF DD 7E FC         [19] 4434 	ld	a, -4 (ix)
      0011F2 B7               [ 4] 4435 	or	a, a
      0011F3 CAr29r11         [10] 4436 	jp	Z, 00137$
      0011F6 DD 7E FD         [19] 4437 	ld	a, -3 (ix)
      0011F9 DD 77 FB         [19] 4438 	ld	-5 (ix), a
      0011FC C3r29r11         [10] 4439 	jp	00137$
      0011FF                       4440 00127$:
                                   4441 ;src\/Graphics\Countdown.h:90: else if(counter >= 180 && counter < 210) {
      0011FF DD 7E FF         [19] 4442 	ld	a, -1 (ix)
      001202 D6 B4            [ 7] 4443 	sub	a, #0xb4
      001204 38 31            [12] 4444 	jr	C, 00123$
      001206 DD 7E FF         [19] 4445 	ld	a, -1 (ix)
      001209 D6 D2            [ 7] 4446 	sub	a, #0xd2
      00120B 30 2A            [12] 4447 	jr	NC, 00123$
                                   4448 ;src\/Graphics\Countdown.h:91: colorIndex = 0;
      00120D DD 36 FE 00      [19] 4449 	ld	-2 (ix), #0
                                   4450 ;src\/Graphics\Countdown.h:93: AnimateSprites(x, y, SPRITE_PATTERN_GO_32X32);
      001211 C5               [11] 4451 	push	bc
      001212 D5               [11] 4452 	push	de
      001213 3E 84            [ 7] 4453 	ld	a, #0x84
      001215 F5               [11] 4454 	push	af
      001216 33               [ 6] 4455 	inc	sp
      001217 DD 46 FB         [19] 4456 	ld	b, -5 (ix)
      00121A C5               [11] 4457 	push	bc
      00121B CDrC7r0F         [17] 4458 	call	_AnimateSprites
      00121E F1               [10] 4459 	pop	af
      00121F 33               [ 6] 4460 	inc	sp
      001220 D1               [10] 4461 	pop	de
      001221 C1               [10] 4462 	pop	bc
                                   4463 ;src\/Graphics\Countdown.h:95: if(x < 128) x += 4;
      001222 78               [ 4] 4464 	ld	a, b
      001223 B7               [ 4] 4465 	or	a, a
      001224 28 01            [12] 4466 	jr	Z, 00117$
      001226 4B               [ 4] 4467 	ld	c, e
      001227                       4468 00117$:
                                   4469 ;src\/Graphics\Countdown.h:96: if(y < 80) y += 4;
      001227 DD 7E FC         [19] 4470 	ld	a, -4 (ix)
      00122A B7               [ 4] 4471 	or	a, a
      00122B CAr29r11         [10] 4472 	jp	Z, 00137$
      00122E DD 7E FD         [19] 4473 	ld	a, -3 (ix)
      001231 DD 77 FB         [19] 4474 	ld	-5 (ix), a
      001234 C3r29r11         [10] 4475 	jp	00137$
      001237                       4476 00123$:
                                   4477 ;src\/Graphics\Countdown.h:99: x = 128-80;
      001237 0E 30            [ 7] 4478 	ld	c, #0x30
                                   4479 ;src\/Graphics\Countdown.h:100: y = 0;
      001239 DD 36 FB 00      [19] 4480 	ld	-5 (ix), #0
                                   4481 ;src\/Graphics\Countdown.h:102: BlinkNumber(colorIndex);
      00123D C5               [11] 4482 	push	bc
      00123E DD 7E FE         [19] 4483 	ld	a, -2 (ix)
      001241 F5               [11] 4484 	push	af
      001242 33               [ 6] 4485 	inc	sp
      001243 CDrCCr10         [17] 4486 	call	_BlinkNumber
      001246 33               [ 6] 4487 	inc	sp
      001247 C1               [10] 4488 	pop	bc
                                   4489 ;src\/Graphics\Countdown.h:104: colorIndex++;
      001248 DD 34 FE         [23] 4490 	inc	-2 (ix)
                                   4491 ;src\/Graphics\Countdown.h:105: if(colorIndex >= sizeof(colors)) colorIndex = 0;
      00124B DD 7E FE         [19] 4492 	ld	a, -2 (ix)
      00124E D6 08            [ 7] 4493 	sub	a, #0x08
      001250 DAr29r11         [10] 4494 	jp	C, 00137$
      001253 DD 36 FE 00      [19] 4495 	ld	-2 (ix), #0
      001257 C3r29r11         [10] 4496 	jp	00137$
      00125A                       4497 00139$:
                                   4498 ;src\/Graphics\Countdown.h:110: WRTVRM(SPRATT, 	        192);
      00125A 3E C0            [ 7] 4499 	ld	a, #0xc0
      00125C F5               [11] 4500 	push	af
      00125D 33               [ 6] 4501 	inc	sp
      00125E 21 00 1B         [10] 4502 	ld	hl, #0x1b00
      001261 E5               [11] 4503 	push	hl
      001262 CDr00r00         [17] 4504 	call	_WRTVRM
      001265 F1               [10] 4505 	pop	af
      001266 33               [ 6] 4506 	inc	sp
                                   4507 ;src\/Graphics\Countdown.h:111: WRTVRM(SPRATT + 4, 	    192);
      001267 3E C0            [ 7] 4508 	ld	a, #0xc0
      001269 F5               [11] 4509 	push	af
      00126A 33               [ 6] 4510 	inc	sp
      00126B 21 04 1B         [10] 4511 	ld	hl, #0x1b04
      00126E E5               [11] 4512 	push	hl
      00126F CDr00r00         [17] 4513 	call	_WRTVRM
      001272 F1               [10] 4514 	pop	af
      001273 33               [ 6] 4515 	inc	sp
                                   4516 ;src\/Graphics\Countdown.h:112: WRTVRM(SPRATT + 8, 	    192);
      001274 3E C0            [ 7] 4517 	ld	a, #0xc0
      001276 F5               [11] 4518 	push	af
      001277 33               [ 6] 4519 	inc	sp
      001278 21 08 1B         [10] 4520 	ld	hl, #0x1b08
      00127B E5               [11] 4521 	push	hl
      00127C CDr00r00         [17] 4522 	call	_WRTVRM
      00127F F1               [10] 4523 	pop	af
      001280 33               [ 6] 4524 	inc	sp
                                   4525 ;src\/Graphics\Countdown.h:113: WRTVRM(SPRATT + 12,	    192);
      001281 3E C0            [ 7] 4526 	ld	a, #0xc0
      001283 F5               [11] 4527 	push	af
      001284 33               [ 6] 4528 	inc	sp
      001285 21 0C 1B         [10] 4529 	ld	hl, #0x1b0c
      001288 E5               [11] 4530 	push	hl
      001289 CDr00r00         [17] 4531 	call	_WRTVRM
                                   4532 ;src\/Graphics\Countdown.h:114: }
      00128C DD F9            [10] 4533 	ld	sp,ix
      00128E DD E1            [14] 4534 	pop	ix
      001290 C9               [10] 4535 	ret
                                   4536 ;src\/Graphics\Graphics.h:1: void DrawChar(byte character, byte col, byte line) {
                                   4537 ;	---------------------------------
                                   4538 ; Function DrawChar
                                   4539 ; ---------------------------------
      001291                       4540 _DrawChar::
      001291 DD E5            [15] 4541 	push	ix
      001293 DD 21 00 00      [14] 4542 	ld	ix,#0
      001297 DD 39            [15] 4543 	add	ix,sp
                                   4544 ;src\/Graphics\Graphics.h:2: WRTVRM(NAMTBL + (line * 32) + col, character);
      001299 DD 6E 06         [19] 4545 	ld	l, 6 (ix)
      00129C 26 00            [ 7] 4546 	ld	h, #0x00
      00129E 29               [11] 4547 	add	hl, hl
      00129F 29               [11] 4548 	add	hl, hl
      0012A0 29               [11] 4549 	add	hl, hl
      0012A1 29               [11] 4550 	add	hl, hl
      0012A2 29               [11] 4551 	add	hl, hl
      0012A3 01 00 18         [10] 4552 	ld	bc, #0x1800
      0012A6 09               [11] 4553 	add	hl, bc
      0012A7 DD 4E 05         [19] 4554 	ld	c, 5 (ix)
      0012AA 06 00            [ 7] 4555 	ld	b, #0x00
      0012AC 09               [11] 4556 	add	hl, bc
      0012AD DD 7E 04         [19] 4557 	ld	a, 4 (ix)
      0012B0 F5               [11] 4558 	push	af
      0012B1 33               [ 6] 4559 	inc	sp
      0012B2 E5               [11] 4560 	push	hl
      0012B3 CDr00r00         [17] 4561 	call	_WRTVRM
      0012B6 F1               [10] 4562 	pop	af
      0012B7 33               [ 6] 4563 	inc	sp
                                   4564 ;src\/Graphics\Graphics.h:3: }
      0012B8 DD E1            [14] 4565 	pop	ix
      0012BA C9               [10] 4566 	ret
                                   4567 ;src\/Graphics\Graphics.h:5: void DrawString(const char* str, byte col, byte line) {
                                   4568 ;	---------------------------------
                                   4569 ; Function DrawString
                                   4570 ; ---------------------------------
      0012BB                       4571 _DrawString::
      0012BB DD E5            [15] 4572 	push	ix
      0012BD DD 21 00 00      [14] 4573 	ld	ix,#0
      0012C1 DD 39            [15] 4574 	add	ix,sp
                                   4575 ;src\/Graphics\Graphics.h:6: while (*str) {
      0012C3 DD 6E 06         [19] 4576 	ld	l, 6 (ix)
      0012C6 DD 4E 04         [19] 4577 	ld	c, 4 (ix)
      0012C9 DD 46 05         [19] 4578 	ld	b, 5 (ix)
      0012CC                       4579 00101$:
      0012CC 0A               [ 7] 4580 	ld	a, (bc)
      0012CD B7               [ 4] 4581 	or	a, a
      0012CE 28 1A            [12] 4582 	jr	Z, 00104$
                                   4583 ;src\/Graphics\Graphics.h:7: DrawChar((*str++) - (65 - CHAR_A), col++, line);
      0012D0 55               [ 4] 4584 	ld	d, l
      0012D1 2C               [ 4] 4585 	inc	l
      0012D2 DD 75 06         [19] 4586 	ld	6 (ix), l
      0012D5 03               [ 6] 4587 	inc	bc
      0012D6 C6 0F            [ 7] 4588 	add	a, #0x0f
      0012D8 E5               [11] 4589 	push	hl
      0012D9 C5               [11] 4590 	push	bc
      0012DA DD 66 07         [19] 4591 	ld	h, 7 (ix)
      0012DD 6A               [ 4] 4592 	ld	l, d
      0012DE E5               [11] 4593 	push	hl
      0012DF F5               [11] 4594 	push	af
      0012E0 33               [ 6] 4595 	inc	sp
      0012E1 CDr91r12         [17] 4596 	call	_DrawChar
      0012E4 F1               [10] 4597 	pop	af
      0012E5 33               [ 6] 4598 	inc	sp
      0012E6 C1               [10] 4599 	pop	bc
      0012E7 E1               [10] 4600 	pop	hl
      0012E8 18 E2            [12] 4601 	jr	00101$
      0012EA                       4602 00104$:
                                   4603 ;src\/Graphics\Graphics.h:9: }
      0012EA DD E1            [14] 4604 	pop	ix
      0012EC C9               [10] 4605 	ret
                                   4606 ;src\/Graphics\Graphics.h:11: void DrawNumber(word number, byte col, byte line) {
                                   4607 ;	---------------------------------
                                   4608 ; Function DrawNumber
                                   4609 ; ---------------------------------
      0012ED                       4610 _DrawNumber::
      0012ED DD E5            [15] 4611 	push	ix
      0012EF DD 21 00 00      [14] 4612 	ld	ix,#0
      0012F3 DD 39            [15] 4613 	add	ix,sp
      0012F5 21 FA FF         [10] 4614 	ld	hl, #-6
      0012F8 39               [11] 4615 	add	hl, sp
      0012F9 F9               [ 6] 4616 	ld	sp, hl
                                   4617 ;src\/Graphics\Graphics.h:14: bool trailingZero = TRUE;
      0012FA DD 36 FA 01      [19] 4618 	ld	-6 (ix), #0x01
                                   4619 ;src\/Graphics\Graphics.h:16: DrawString("      ", col, line); // Clear space for number (6 digits)
      0012FE DD 66 07         [19] 4620 	ld	h, 7 (ix)
      001301 DD 6E 06         [19] 4621 	ld	l, 6 (ix)
      001304 E5               [11] 4622 	push	hl
      001305 21rA1r13         [10] 4623 	ld	hl, #___str_0
      001308 E5               [11] 4624 	push	hl
      001309 CDrBBr12         [17] 4625 	call	_DrawString
      00130C F1               [10] 4626 	pop	af
      00130D F1               [10] 4627 	pop	af
                                   4628 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      00130E DD 7E 06         [19] 4629 	ld	a, 6 (ix)
      001311 DD 77 FF         [19] 4630 	ld	-1 (ix), a
      001314 1E 06            [ 7] 4631 	ld	e, #0x06
      001316                       4632 00109$:
      001316 7B               [ 4] 4633 	ld	a, e
      001317 B7               [ 4] 4634 	or	a, a
      001318 CAr9Cr13         [10] 4635 	jp	Z, 00111$
                                   4636 ;src\/Graphics\Graphics.h:20: power = Power(10, i - 1);
      00131B 7B               [ 4] 4637 	ld	a, e
      00131C 3D               [ 4] 4638 	dec	a
      00131D D5               [11] 4639 	push	de
      00131E 57               [ 4] 4640 	ld	d,a
      00131F 1E 0A            [ 7] 4641 	ld	e,#0x0a
      001321 D5               [11] 4642 	push	de
      001322 CDr1Dr00         [17] 4643 	call	_Power
      001325 F1               [10] 4644 	pop	af
      001326 D1               [10] 4645 	pop	de
      001327 DD 75 FB         [19] 4646 	ld	-5 (ix), l
      00132A DD 74 FC         [19] 4647 	ld	-4 (ix), h
                                   4648 ;src\/Graphics\Graphics.h:22: if(trailingZero && (number / power) != 0) trailingZero = FALSE;
      00132D D5               [11] 4649 	push	de
      00132E DD 6E FB         [19] 4650 	ld	l, -5 (ix)
      001331 DD 66 FC         [19] 4651 	ld	h, -4 (ix)
      001334 E5               [11] 4652 	push	hl
      001335 DD 6E 04         [19] 4653 	ld	l, 4 (ix)
      001338 DD 66 05         [19] 4654 	ld	h, 5 (ix)
      00133B E5               [11] 4655 	push	hl
      00133C CDr00r00         [17] 4656 	call	__divuint
      00133F F1               [10] 4657 	pop	af
      001340 F1               [10] 4658 	pop	af
      001341 DD 75 FD         [19] 4659 	ld	-3 (ix), l
      001344 DD 74 FE         [19] 4660 	ld	-2 (ix), h
      001347 D1               [10] 4661 	pop	de
      001348 DD 7E FA         [19] 4662 	ld	a, -6 (ix)
      00134B B7               [ 4] 4663 	or	a, a
      00134C 28 0C            [12] 4664 	jr	Z, 00102$
      00134E DD 7E FE         [19] 4665 	ld	a, -2 (ix)
      001351 DD B6 FD         [19] 4666 	or	a, -3 (ix)
      001354 28 04            [12] 4667 	jr	Z, 00102$
      001356 DD 36 FA 00      [19] 4668 	ld	-6 (ix), #0
      00135A                       4669 00102$:
                                   4670 ;src\/Graphics\Graphics.h:24: if(!trailingZero || i == 1) {
      00135A DD 7E FA         [19] 4671 	ld	a, -6 (ix)
      00135D B7               [ 4] 4672 	or	a, a
      00135E 28 04            [12] 4673 	jr	Z, 00104$
      001360 7B               [ 4] 4674 	ld	a, e
      001361 3D               [ 4] 4675 	dec	a
      001362 20 31            [12] 4676 	jr	NZ, 00105$
      001364                       4677 00104$:
                                   4678 ;src\/Graphics\Graphics.h:25: DrawChar((number / power) + CHAR_0, col, line);
      001364 DD 7E FD         [19] 4679 	ld	a, -3 (ix)
      001367 C6 3F            [ 7] 4680 	add	a, #0x3f
      001369 D5               [11] 4681 	push	de
      00136A DD 66 07         [19] 4682 	ld	h, 7 (ix)
      00136D E5               [11] 4683 	push	hl
      00136E 33               [ 6] 4684 	inc	sp
      00136F DD 66 FF         [19] 4685 	ld	h, -1 (ix)
      001372 E5               [11] 4686 	push	hl
      001373 33               [ 6] 4687 	inc	sp
      001374 F5               [11] 4688 	push	af
      001375 33               [ 6] 4689 	inc	sp
      001376 CDr91r12         [17] 4690 	call	_DrawChar
      001379 F1               [10] 4691 	pop	af
      00137A 33               [ 6] 4692 	inc	sp
      00137B DD 6E FB         [19] 4693 	ld	l, -5 (ix)
      00137E DD 66 FC         [19] 4694 	ld	h, -4 (ix)
      001381 E5               [11] 4695 	push	hl
      001382 DD 6E 04         [19] 4696 	ld	l, 4 (ix)
      001385 DD 66 05         [19] 4697 	ld	h, 5 (ix)
      001388 E5               [11] 4698 	push	hl
      001389 CDr00r00         [17] 4699 	call	__moduint
      00138C F1               [10] 4700 	pop	af
      00138D F1               [10] 4701 	pop	af
      00138E D1               [10] 4702 	pop	de
      00138F DD 75 04         [19] 4703 	ld	4 (ix), l
      001392 DD 74 05         [19] 4704 	ld	5 (ix), h
      001395                       4705 00105$:
                                   4706 ;src\/Graphics\Graphics.h:29: col++;
      001395 DD 34 FF         [23] 4707 	inc	-1 (ix)
                                   4708 ;src\/Graphics\Graphics.h:18: for(byte i = 6; i > 0; i--) { //  (6 digits)
      001398 1D               [ 4] 4709 	dec	e
      001399 C3r16r13         [10] 4710 	jp	00109$
      00139C                       4711 00111$:
                                   4712 ;src\/Graphics\Graphics.h:34: }
      00139C DD F9            [10] 4713 	ld	sp, ix
      00139E DD E1            [14] 4714 	pop	ix
      0013A0 C9               [10] 4715 	ret
      0013A1                       4716 ___str_0:
      0013A1 20 20 20 20 20 20     4717 	.ascii "      "
      0013A7 00                    4718 	.db 0x00
                                   4719 ;src\/Graphics\Graphics.h:36: void DrawColumn(byte col) {
                                   4720 ;	---------------------------------
                                   4721 ; Function DrawColumn
                                   4722 ; ---------------------------------
      0013A8                       4723 _DrawColumn::
      0013A8 DD E5            [15] 4724 	push	ix
      0013AA DD 21 00 00      [14] 4725 	ld	ix,#0
      0013AE DD 39            [15] 4726 	add	ix,sp
      0013B0 21 F9 FF         [10] 4727 	ld	hl, #-7
      0013B3 39               [11] 4728 	add	hl, sp
      0013B4 F9               [ 6] 4729 	ld	sp, hl
                                   4730 ;src\/Graphics\Graphics.h:37: WRTVRM(NAMTBL + col + 0, COLUMN_TOP_1);
      0013B5 DD 4E 04         [19] 4731 	ld	c, 4 (ix)
      0013B8 06 00            [ 7] 4732 	ld	b, #0x00
      0013BA 21 00 18         [10] 4733 	ld	hl, #0x1800
      0013BD 09               [11] 4734 	add	hl, bc
      0013BE C5               [11] 4735 	push	bc
      0013BF 3E 18            [ 7] 4736 	ld	a, #0x18
      0013C1 F5               [11] 4737 	push	af
      0013C2 33               [ 6] 4738 	inc	sp
      0013C3 E5               [11] 4739 	push	hl
      0013C4 CDr00r00         [17] 4740 	call	_WRTVRM
      0013C7 F1               [10] 4741 	pop	af
      0013C8 33               [ 6] 4742 	inc	sp
      0013C9 C1               [10] 4743 	pop	bc
                                   4744 ;src\/Graphics\Graphics.h:38: WRTVRM(NAMTBL + col + 1, COLUMN_TOP_1 + 1);
      0013CA 21 01 18         [10] 4745 	ld	hl, #0x1801
      0013CD 09               [11] 4746 	add	hl, bc
      0013CE C5               [11] 4747 	push	bc
      0013CF 3E 19            [ 7] 4748 	ld	a, #0x19
      0013D1 F5               [11] 4749 	push	af
      0013D2 33               [ 6] 4750 	inc	sp
      0013D3 E5               [11] 4751 	push	hl
      0013D4 CDr00r00         [17] 4752 	call	_WRTVRM
      0013D7 F1               [10] 4753 	pop	af
      0013D8 33               [ 6] 4754 	inc	sp
      0013D9 C1               [10] 4755 	pop	bc
                                   4756 ;src\/Graphics\Graphics.h:39: WRTVRM(NAMTBL + col + 2, COLUMN_TOP_1 + 2);
      0013DA 21 02 18         [10] 4757 	ld	hl, #0x1802
      0013DD 09               [11] 4758 	add	hl, bc
      0013DE C5               [11] 4759 	push	bc
      0013DF 3E 1A            [ 7] 4760 	ld	a, #0x1a
      0013E1 F5               [11] 4761 	push	af
      0013E2 33               [ 6] 4762 	inc	sp
      0013E3 E5               [11] 4763 	push	hl
      0013E4 CDr00r00         [17] 4764 	call	_WRTVRM
      0013E7 F1               [10] 4765 	pop	af
      0013E8 33               [ 6] 4766 	inc	sp
      0013E9 C1               [10] 4767 	pop	bc
                                   4768 ;src\/Graphics\Graphics.h:40: WRTVRM(NAMTBL + col + 32, COLUMN_TOP_1 + 3);
      0013EA 21 20 18         [10] 4769 	ld	hl, #0x1820
      0013ED 09               [11] 4770 	add	hl, bc
      0013EE C5               [11] 4771 	push	bc
      0013EF 3E 1B            [ 7] 4772 	ld	a, #0x1b
      0013F1 F5               [11] 4773 	push	af
      0013F2 33               [ 6] 4774 	inc	sp
      0013F3 E5               [11] 4775 	push	hl
      0013F4 CDr00r00         [17] 4776 	call	_WRTVRM
      0013F7 F1               [10] 4777 	pop	af
      0013F8 33               [ 6] 4778 	inc	sp
      0013F9 C1               [10] 4779 	pop	bc
                                   4780 ;src\/Graphics\Graphics.h:41: WRTVRM(NAMTBL + col + 33, COLUMN_TOP_1 + 4);
      0013FA 21 21 18         [10] 4781 	ld	hl, #0x1821
      0013FD 09               [11] 4782 	add	hl, bc
      0013FE C5               [11] 4783 	push	bc
      0013FF 3E 1C            [ 7] 4784 	ld	a, #0x1c
      001401 F5               [11] 4785 	push	af
      001402 33               [ 6] 4786 	inc	sp
      001403 E5               [11] 4787 	push	hl
      001404 CDr00r00         [17] 4788 	call	_WRTVRM
      001407 F1               [10] 4789 	pop	af
      001408 33               [ 6] 4790 	inc	sp
      001409 C1               [10] 4791 	pop	bc
                                   4792 ;src\/Graphics\Graphics.h:42: WRTVRM(NAMTBL + col + 34, COLUMN_TOP_1 + 5);
      00140A 21 22 18         [10] 4793 	ld	hl, #0x1822
      00140D 09               [11] 4794 	add	hl, bc
      00140E C5               [11] 4795 	push	bc
      00140F 3E 1D            [ 7] 4796 	ld	a, #0x1d
      001411 F5               [11] 4797 	push	af
      001412 33               [ 6] 4798 	inc	sp
      001413 E5               [11] 4799 	push	hl
      001414 CDr00r00         [17] 4800 	call	_WRTVRM
      001417 F1               [10] 4801 	pop	af
      001418 33               [ 6] 4802 	inc	sp
      001419 C1               [10] 4803 	pop	bc
                                   4804 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      00141A 21 40 18         [10] 4805 	ld	hl, #0x1840
      00141D 09               [11] 4806 	add	hl, bc
      00141E E3               [19] 4807 	ex	(sp), hl
      00141F 21 41 18         [10] 4808 	ld	hl, #0x1841
      001422 09               [11] 4809 	add	hl, bc
      001423 DD 75 FB         [19] 4810 	ld	-5 (ix), l
      001426 DD 74 FC         [19] 4811 	ld	-4 (ix), h
      001429 21 42 18         [10] 4812 	ld	hl, #0x1842
      00142C 09               [11] 4813 	add	hl, bc
      00142D DD 75 FD         [19] 4814 	ld	-3 (ix), l
      001430 DD 74 FE         [19] 4815 	ld	-2 (ix), h
      001433 DD 36 FF 00      [19] 4816 	ld	-1 (ix), #0
      001437                       4817 00103$:
      001437 DD 7E FF         [19] 4818 	ld	a, -1 (ix)
      00143A D6 14            [ 7] 4819 	sub	a, #0x14
      00143C 30 4A            [12] 4820 	jr	NC, 00101$
                                   4821 ;src\/Graphics\Graphics.h:45: WRTVRM(NAMTBL + col + 64 + (i*32), COLUMN_MIDDLE_1);
      00143E DD 5E FF         [19] 4822 	ld	e, -1 (ix)
      001441 16 00            [ 7] 4823 	ld	d, #0x00
      001443 EB               [ 4] 4824 	ex	de, hl
      001444 29               [11] 4825 	add	hl, hl
      001445 29               [11] 4826 	add	hl, hl
      001446 29               [11] 4827 	add	hl, hl
      001447 29               [11] 4828 	add	hl, hl
      001448 29               [11] 4829 	add	hl, hl
      001449 EB               [ 4] 4830 	ex	de, hl
      00144A E1               [10] 4831 	pop	hl
      00144B E5               [11] 4832 	push	hl
      00144C 19               [11] 4833 	add	hl, de
      00144D C5               [11] 4834 	push	bc
      00144E D5               [11] 4835 	push	de
      00144F 3E 1E            [ 7] 4836 	ld	a, #0x1e
      001451 F5               [11] 4837 	push	af
      001452 33               [ 6] 4838 	inc	sp
      001453 E5               [11] 4839 	push	hl
      001454 CDr00r00         [17] 4840 	call	_WRTVRM
      001457 F1               [10] 4841 	pop	af
      001458 33               [ 6] 4842 	inc	sp
      001459 D1               [10] 4843 	pop	de
      00145A C1               [10] 4844 	pop	bc
                                   4845 ;src\/Graphics\Graphics.h:46: WRTVRM(NAMTBL + col + 65 + (i*32), COLUMN_MIDDLE_1 + 1);
      00145B DD 6E FB         [19] 4846 	ld	l, -5 (ix)
      00145E DD 66 FC         [19] 4847 	ld	h, -4 (ix)
      001461 19               [11] 4848 	add	hl, de
      001462 C5               [11] 4849 	push	bc
      001463 D5               [11] 4850 	push	de
      001464 3E 1F            [ 7] 4851 	ld	a, #0x1f
      001466 F5               [11] 4852 	push	af
      001467 33               [ 6] 4853 	inc	sp
      001468 E5               [11] 4854 	push	hl
      001469 CDr00r00         [17] 4855 	call	_WRTVRM
      00146C F1               [10] 4856 	pop	af
      00146D 33               [ 6] 4857 	inc	sp
      00146E D1               [10] 4858 	pop	de
      00146F C1               [10] 4859 	pop	bc
                                   4860 ;src\/Graphics\Graphics.h:47: WRTVRM(NAMTBL + col + 66 + (i*32), COLUMN_MIDDLE_1 + 2);
      001470 DD 6E FD         [19] 4861 	ld	l, -3 (ix)
      001473 DD 66 FE         [19] 4862 	ld	h, -2 (ix)
      001476 19               [11] 4863 	add	hl, de
      001477 C5               [11] 4864 	push	bc
      001478 3E 20            [ 7] 4865 	ld	a, #0x20
      00147A F5               [11] 4866 	push	af
      00147B 33               [ 6] 4867 	inc	sp
      00147C E5               [11] 4868 	push	hl
      00147D CDr00r00         [17] 4869 	call	_WRTVRM
      001480 F1               [10] 4870 	pop	af
      001481 33               [ 6] 4871 	inc	sp
      001482 C1               [10] 4872 	pop	bc
                                   4873 ;src\/Graphics\Graphics.h:44: for(byte i=0; i<20; i++) {
      001483 DD 34 FF         [23] 4874 	inc	-1 (ix)
      001486 18 AF            [12] 4875 	jr	00103$
      001488                       4876 00101$:
                                   4877 ;src\/Graphics\Graphics.h:50: WRTVRM(NAMTBL + col + (32 * 8), COLUMN_MIDDLE_2);
      001488 21 00 19         [10] 4878 	ld	hl, #0x1900
      00148B 09               [11] 4879 	add	hl, bc
      00148C C5               [11] 4880 	push	bc
      00148D 3E 21            [ 7] 4881 	ld	a, #0x21
      00148F F5               [11] 4882 	push	af
      001490 33               [ 6] 4883 	inc	sp
      001491 E5               [11] 4884 	push	hl
      001492 CDr00r00         [17] 4885 	call	_WRTVRM
      001495 F1               [10] 4886 	pop	af
      001496 33               [ 6] 4887 	inc	sp
      001497 C1               [10] 4888 	pop	bc
                                   4889 ;src\/Graphics\Graphics.h:51: WRTVRM(NAMTBL + col + (32 * 8) + 1, COLUMN_MIDDLE_2 + 1);
      001498 21 01 19         [10] 4890 	ld	hl, #0x1901
      00149B 09               [11] 4891 	add	hl, bc
      00149C C5               [11] 4892 	push	bc
      00149D 3E 22            [ 7] 4893 	ld	a, #0x22
      00149F F5               [11] 4894 	push	af
      0014A0 33               [ 6] 4895 	inc	sp
      0014A1 E5               [11] 4896 	push	hl
      0014A2 CDr00r00         [17] 4897 	call	_WRTVRM
      0014A5 F1               [10] 4898 	pop	af
      0014A6 33               [ 6] 4899 	inc	sp
      0014A7 C1               [10] 4900 	pop	bc
                                   4901 ;src\/Graphics\Graphics.h:52: WRTVRM(NAMTBL + col + (32 * 8) + 2, COLUMN_MIDDLE_2 + 2);
      0014A8 21 02 19         [10] 4902 	ld	hl, #0x1902
      0014AB 09               [11] 4903 	add	hl, bc
      0014AC C5               [11] 4904 	push	bc
      0014AD 3E 23            [ 7] 4905 	ld	a, #0x23
      0014AF F5               [11] 4906 	push	af
      0014B0 33               [ 6] 4907 	inc	sp
      0014B1 E5               [11] 4908 	push	hl
      0014B2 CDr00r00         [17] 4909 	call	_WRTVRM
      0014B5 F1               [10] 4910 	pop	af
      0014B6 33               [ 6] 4911 	inc	sp
      0014B7 C1               [10] 4912 	pop	bc
                                   4913 ;src\/Graphics\Graphics.h:54: WRTVRM(NAMTBL + col + (32 * 16), COLUMN_MIDDLE_2);
      0014B8 21 00 1A         [10] 4914 	ld	hl, #0x1a00
      0014BB 09               [11] 4915 	add	hl, bc
      0014BC C5               [11] 4916 	push	bc
      0014BD 3E 21            [ 7] 4917 	ld	a, #0x21
      0014BF F5               [11] 4918 	push	af
      0014C0 33               [ 6] 4919 	inc	sp
      0014C1 E5               [11] 4920 	push	hl
      0014C2 CDr00r00         [17] 4921 	call	_WRTVRM
      0014C5 F1               [10] 4922 	pop	af
      0014C6 33               [ 6] 4923 	inc	sp
      0014C7 C1               [10] 4924 	pop	bc
                                   4925 ;src\/Graphics\Graphics.h:55: WRTVRM(NAMTBL + col + (32 * 16) + 1, COLUMN_MIDDLE_2 + 1);
      0014C8 21 01 1A         [10] 4926 	ld	hl, #0x1a01
      0014CB 09               [11] 4927 	add	hl, bc
      0014CC C5               [11] 4928 	push	bc
      0014CD 3E 22            [ 7] 4929 	ld	a, #0x22
      0014CF F5               [11] 4930 	push	af
      0014D0 33               [ 6] 4931 	inc	sp
      0014D1 E5               [11] 4932 	push	hl
      0014D2 CDr00r00         [17] 4933 	call	_WRTVRM
      0014D5 F1               [10] 4934 	pop	af
      0014D6 33               [ 6] 4935 	inc	sp
      0014D7 C1               [10] 4936 	pop	bc
                                   4937 ;src\/Graphics\Graphics.h:56: WRTVRM(NAMTBL + col + (32 * 16) + 2, COLUMN_MIDDLE_2 + 2);
      0014D8 21 02 1A         [10] 4938 	ld	hl, #0x1a02
      0014DB 09               [11] 4939 	add	hl, bc
      0014DC C5               [11] 4940 	push	bc
      0014DD 3E 23            [ 7] 4941 	ld	a, #0x23
      0014DF F5               [11] 4942 	push	af
      0014E0 33               [ 6] 4943 	inc	sp
      0014E1 E5               [11] 4944 	push	hl
      0014E2 CDr00r00         [17] 4945 	call	_WRTVRM
      0014E5 F1               [10] 4946 	pop	af
      0014E6 33               [ 6] 4947 	inc	sp
      0014E7 C1               [10] 4948 	pop	bc
                                   4949 ;src\/Graphics\Graphics.h:58: WRTVRM(NAMTBL + col + (32 * 22) + 0, COLUMN_BOTTOM_1);
      0014E8 21 C0 1A         [10] 4950 	ld	hl, #0x1ac0
      0014EB 09               [11] 4951 	add	hl, bc
      0014EC C5               [11] 4952 	push	bc
      0014ED 3E 24            [ 7] 4953 	ld	a, #0x24
      0014EF F5               [11] 4954 	push	af
      0014F0 33               [ 6] 4955 	inc	sp
      0014F1 E5               [11] 4956 	push	hl
      0014F2 CDr00r00         [17] 4957 	call	_WRTVRM
      0014F5 F1               [10] 4958 	pop	af
      0014F6 33               [ 6] 4959 	inc	sp
      0014F7 C1               [10] 4960 	pop	bc
                                   4961 ;src\/Graphics\Graphics.h:59: WRTVRM(NAMTBL + col + (32 * 22) + 1, COLUMN_BOTTOM_1 + 1);
      0014F8 21 C1 1A         [10] 4962 	ld	hl, #0x1ac1
      0014FB 09               [11] 4963 	add	hl, bc
      0014FC C5               [11] 4964 	push	bc
      0014FD 3E 25            [ 7] 4965 	ld	a, #0x25
      0014FF F5               [11] 4966 	push	af
      001500 33               [ 6] 4967 	inc	sp
      001501 E5               [11] 4968 	push	hl
      001502 CDr00r00         [17] 4969 	call	_WRTVRM
      001505 F1               [10] 4970 	pop	af
      001506 33               [ 6] 4971 	inc	sp
      001507 C1               [10] 4972 	pop	bc
                                   4973 ;src\/Graphics\Graphics.h:60: WRTVRM(NAMTBL + col + (32 * 22) + 2, COLUMN_BOTTOM_1 + 2);
      001508 21 C2 1A         [10] 4974 	ld	hl, #0x1ac2
      00150B 09               [11] 4975 	add	hl, bc
      00150C C5               [11] 4976 	push	bc
      00150D 3E 26            [ 7] 4977 	ld	a, #0x26
      00150F F5               [11] 4978 	push	af
      001510 33               [ 6] 4979 	inc	sp
      001511 E5               [11] 4980 	push	hl
      001512 CDr00r00         [17] 4981 	call	_WRTVRM
      001515 F1               [10] 4982 	pop	af
      001516 33               [ 6] 4983 	inc	sp
      001517 C1               [10] 4984 	pop	bc
                                   4985 ;src\/Graphics\Graphics.h:61: WRTVRM(NAMTBL + col + (32 * 22) + 32, COLUMN_BOTTOM_1 + 3);
      001518 21 E0 1A         [10] 4986 	ld	hl, #0x1ae0
      00151B 09               [11] 4987 	add	hl, bc
      00151C C5               [11] 4988 	push	bc
      00151D 3E 27            [ 7] 4989 	ld	a, #0x27
      00151F F5               [11] 4990 	push	af
      001520 33               [ 6] 4991 	inc	sp
      001521 E5               [11] 4992 	push	hl
      001522 CDr00r00         [17] 4993 	call	_WRTVRM
      001525 F1               [10] 4994 	pop	af
      001526 33               [ 6] 4995 	inc	sp
      001527 C1               [10] 4996 	pop	bc
                                   4997 ;src\/Graphics\Graphics.h:62: WRTVRM(NAMTBL + col + (32 * 22) + 33, COLUMN_BOTTOM_1 + 4);
      001528 21 E1 1A         [10] 4998 	ld	hl, #0x1ae1
      00152B 09               [11] 4999 	add	hl, bc
      00152C C5               [11] 5000 	push	bc
      00152D 3E 28            [ 7] 5001 	ld	a, #0x28
      00152F F5               [11] 5002 	push	af
      001530 33               [ 6] 5003 	inc	sp
      001531 E5               [11] 5004 	push	hl
      001532 CDr00r00         [17] 5005 	call	_WRTVRM
      001535 F1               [10] 5006 	pop	af
      001536 33               [ 6] 5007 	inc	sp
      001537 C1               [10] 5008 	pop	bc
                                   5009 ;src\/Graphics\Graphics.h:63: WRTVRM(NAMTBL + col + (32 * 22) + 34, COLUMN_BOTTOM_1 + 5);
      001538 21 E2 1A         [10] 5010 	ld	hl, #0x1ae2
      00153B 09               [11] 5011 	add	hl, bc
      00153C 3E 29            [ 7] 5012 	ld	a, #0x29
      00153E F5               [11] 5013 	push	af
      00153F 33               [ 6] 5014 	inc	sp
      001540 E5               [11] 5015 	push	hl
      001541 CDr00r00         [17] 5016 	call	_WRTVRM
                                   5017 ;src\/Graphics\Graphics.h:64: }
      001544 DD F9            [10] 5018 	ld	sp,ix
      001546 DD E1            [14] 5019 	pop	ix
      001548 C9               [10] 5020 	ret
                                   5021 ;src\/Graphics\Graphics.h:69: void GetNextPieceColors(byte sourcePiece) {
                                   5022 ;	---------------------------------
                                   5023 ; Function GetNextPieceColors
                                   5024 ; ---------------------------------
      001549                       5025 _GetNextPieceColors::
                                   5026 ;src\/Graphics\Graphics.h:70: switch(sourcePiece) {
      001549 FD 21 02 00      [14] 5027 	ld	iy, #2
      00154D FD 39            [15] 5028 	add	iy, sp
      00154F FD 7E 00         [19] 5029 	ld	a, 0 (iy)
      001552 D6 04            [ 7] 5030 	sub	a, #0x04
      001554 28 22            [12] 5031 	jr	Z, 00102$
      001556 FD 7E 00         [19] 5032 	ld	a, 0 (iy)
      001559 D6 08            [ 7] 5033 	sub	a, #0x08
      00155B 28 26            [12] 5034 	jr	Z, 00103$
      00155D FD 7E 00         [19] 5035 	ld	a, 0 (iy)
      001560 D6 0C            [ 7] 5036 	sub	a, #0x0c
      001562 28 09            [12] 5037 	jr	Z, 00101$
      001564 FD 7E 00         [19] 5038 	ld	a, 0 (iy)
      001567 D6 14            [ 7] 5039 	sub	a, #0x14
      001569 28 23            [12] 5040 	jr	Z, 00104$
      00156B 18 2C            [12] 5041 	jr	00105$
                                   5042 ;src\/Graphics\Graphics.h:71: case TILE_BLUE:
      00156D                       5043 00101$:
                                   5044 ;src\/Graphics\Graphics.h:72: nextPieceColor_Front = 7;
      00156D 3E 07            [ 7] 5045 	ld	a, #0x07
      00156F 32r9Br00         [13] 5046 	ld	(#_nextPieceColor_Front), a
                                   5047 ;src\/Graphics\Graphics.h:73: nextPieceColor_Back = 4;
      001572 3E 04            [ 7] 5048 	ld	a, #0x04
      001574 32r9Cr00         [13] 5049 	ld	(#_nextPieceColor_Back), a
                                   5050 ;src\/Graphics\Graphics.h:74: break;
      001577 C9               [10] 5051 	ret
                                   5052 ;src\/Graphics\Graphics.h:75: case TILE_GREEN:
      001578                       5053 00102$:
                                   5054 ;src\/Graphics\Graphics.h:76: nextPieceColor_Front = 3;
      001578 3E 03            [ 7] 5055 	ld	a, #0x03
      00157A 32r9Br00         [13] 5056 	ld	(#_nextPieceColor_Front), a
                                   5057 ;src\/Graphics\Graphics.h:77: nextPieceColor_Back = 12;
      00157D 3E 0C            [ 7] 5058 	ld	a, #0x0c
      00157F 32r9Cr00         [13] 5059 	ld	(#_nextPieceColor_Back), a
                                   5060 ;src\/Graphics\Graphics.h:78: break;
      001582 C9               [10] 5061 	ret
                                   5062 ;src\/Graphics\Graphics.h:79: case TILE_RED:
      001583                       5063 00103$:
                                   5064 ;src\/Graphics\Graphics.h:80: nextPieceColor_Front = 9;
      001583 3E 09            [ 7] 5065 	ld	a, #0x09
      001585 32r9Br00         [13] 5066 	ld	(#_nextPieceColor_Front), a
                                   5067 ;src\/Graphics\Graphics.h:81: nextPieceColor_Back = 6;
      001588 3E 06            [ 7] 5068 	ld	a, #0x06
      00158A 32r9Cr00         [13] 5069 	ld	(#_nextPieceColor_Back), a
                                   5070 ;src\/Graphics\Graphics.h:82: break;
      00158D C9               [10] 5071 	ret
                                   5072 ;src\/Graphics\Graphics.h:83: case TILE_YELLOW:
      00158E                       5073 00104$:
                                   5074 ;src\/Graphics\Graphics.h:84: nextPieceColor_Front = 11;
      00158E 3E 0B            [ 7] 5075 	ld	a, #0x0b
      001590 32r9Br00         [13] 5076 	ld	(#_nextPieceColor_Front), a
                                   5077 ;src\/Graphics\Graphics.h:85: nextPieceColor_Back = 10;
      001593 3E 0A            [ 7] 5078 	ld	a, #0x0a
      001595 32r9Cr00         [13] 5079 	ld	(#_nextPieceColor_Back), a
                                   5080 ;src\/Graphics\Graphics.h:86: break;
      001598 C9               [10] 5081 	ret
                                   5082 ;src\/Graphics\Graphics.h:87: default:
      001599                       5083 00105$:
                                   5084 ;src\/Graphics\Graphics.h:88: nextPieceColor_Front = 15;
      001599 3E 0F            [ 7] 5085 	ld	a, #0x0f
      00159B 32r9Br00         [13] 5086 	ld	(#_nextPieceColor_Front), a
                                   5087 ;src\/Graphics\Graphics.h:89: nextPieceColor_Back = 13;
      00159E 3E 0D            [ 7] 5088 	ld	a, #0x0d
      0015A0 32r9Cr00         [13] 5089 	ld	(#_nextPieceColor_Back), a
                                   5090 ;src\/Graphics\Graphics.h:90: }  
                                   5091 ;src\/Graphics\Graphics.h:91: }
      0015A3 C9               [10] 5092 	ret
                                   5093 ;src\/Graphics\Graphics.h:93: void PosMaskSprites(word VRAMaddress, byte y) {
                                   5094 ;	---------------------------------
                                   5095 ; Function PosMaskSprites
                                   5096 ; ---------------------------------
      0015A4                       5097 _PosMaskSprites::
      0015A4 DD E5            [15] 5098 	push	ix
      0015A6 DD 21 00 00      [14] 5099 	ld	ix,#0
      0015AA DD 39            [15] 5100 	add	ix,sp
                                   5101 ;src\/Graphics\Graphics.h:95: WRTVRM(VRAMaddress, 	    y);
      0015AC DD 7E 06         [19] 5102 	ld	a, 6 (ix)
      0015AF F5               [11] 5103 	push	af
      0015B0 33               [ 6] 5104 	inc	sp
      0015B1 DD 6E 04         [19] 5105 	ld	l, 4 (ix)
      0015B4 DD 66 05         [19] 5106 	ld	h, 5 (ix)
      0015B7 E5               [11] 5107 	push	hl
      0015B8 CDr00r00         [17] 5108 	call	_WRTVRM
      0015BB F1               [10] 5109 	pop	af
      0015BC 33               [ 6] 5110 	inc	sp
                                   5111 ;src\/Graphics\Graphics.h:96: WRTVRM(VRAMaddress + 1, 	0);
      0015BD DD 4E 04         [19] 5112 	ld	c, 4 (ix)
      0015C0 DD 46 05         [19] 5113 	ld	b, 5 (ix)
      0015C3 59               [ 4] 5114 	ld	e, c
      0015C4 50               [ 4] 5115 	ld	d, b
      0015C5 13               [ 6] 5116 	inc	de
      0015C6 C5               [11] 5117 	push	bc
      0015C7 AF               [ 4] 5118 	xor	a, a
      0015C8 F5               [11] 5119 	push	af
      0015C9 33               [ 6] 5120 	inc	sp
      0015CA D5               [11] 5121 	push	de
      0015CB CDr00r00         [17] 5122 	call	_WRTVRM
      0015CE F1               [10] 5123 	pop	af
      0015CF 33               [ 6] 5124 	inc	sp
      0015D0 C1               [10] 5125 	pop	bc
                                   5126 ;src\/Graphics\Graphics.h:97: WRTVRM(VRAMaddress + 2, 	0); // Pattern don't matter
      0015D1 59               [ 4] 5127 	ld	e, c
      0015D2 50               [ 4] 5128 	ld	d, b
      0015D3 13               [ 6] 5129 	inc	de
      0015D4 13               [ 6] 5130 	inc	de
      0015D5 C5               [11] 5131 	push	bc
      0015D6 AF               [ 4] 5132 	xor	a, a
      0015D7 F5               [11] 5133 	push	af
      0015D8 33               [ 6] 5134 	inc	sp
      0015D9 D5               [11] 5135 	push	de
      0015DA CDr00r00         [17] 5136 	call	_WRTVRM
      0015DD F1               [10] 5137 	pop	af
      0015DE 33               [ 6] 5138 	inc	sp
      0015DF C1               [10] 5139 	pop	bc
                                   5140 ;src\/Graphics\Graphics.h:98: WRTVRM(VRAMaddress + 3, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      0015E0 59               [ 4] 5141 	ld	e, c
      0015E1 50               [ 4] 5142 	ld	d, b
      0015E2 13               [ 6] 5143 	inc	de
      0015E3 13               [ 6] 5144 	inc	de
      0015E4 13               [ 6] 5145 	inc	de
      0015E5 C5               [11] 5146 	push	bc
      0015E6 3E 40            [ 7] 5147 	ld	a, #0x40
      0015E8 F5               [11] 5148 	push	af
      0015E9 33               [ 6] 5149 	inc	sp
      0015EA D5               [11] 5150 	push	de
      0015EB CDr00r00         [17] 5151 	call	_WRTVRM
      0015EE F1               [10] 5152 	pop	af
      0015EF 33               [ 6] 5153 	inc	sp
      0015F0 C1               [10] 5154 	pop	bc
                                   5155 ;src\/Graphics\Graphics.h:100: WRTVRM(VRAMaddress + 4,   y);
      0015F1 21 04 00         [10] 5156 	ld	hl, #0x0004
      0015F4 09               [11] 5157 	add	hl, bc
      0015F5 C5               [11] 5158 	push	bc
      0015F6 DD 7E 06         [19] 5159 	ld	a, 6 (ix)
      0015F9 F5               [11] 5160 	push	af
      0015FA 33               [ 6] 5161 	inc	sp
      0015FB E5               [11] 5162 	push	hl
      0015FC CDr00r00         [17] 5163 	call	_WRTVRM
      0015FF F1               [10] 5164 	pop	af
      001600 33               [ 6] 5165 	inc	sp
      001601 C1               [10] 5166 	pop	bc
                                   5167 ;src\/Graphics\Graphics.h:101: WRTVRM(VRAMaddress + 5, 	0);
      001602 21 05 00         [10] 5168 	ld	hl, #0x0005
      001605 09               [11] 5169 	add	hl, bc
      001606 C5               [11] 5170 	push	bc
      001607 AF               [ 4] 5171 	xor	a, a
      001608 F5               [11] 5172 	push	af
      001609 33               [ 6] 5173 	inc	sp
      00160A E5               [11] 5174 	push	hl
      00160B CDr00r00         [17] 5175 	call	_WRTVRM
      00160E F1               [10] 5176 	pop	af
      00160F 33               [ 6] 5177 	inc	sp
      001610 C1               [10] 5178 	pop	bc
                                   5179 ;src\/Graphics\Graphics.h:102: WRTVRM(VRAMaddress + 6, 	0); // Pattern don't matter
      001611 21 06 00         [10] 5180 	ld	hl, #0x0006
      001614 09               [11] 5181 	add	hl, bc
      001615 C5               [11] 5182 	push	bc
      001616 AF               [ 4] 5183 	xor	a, a
      001617 F5               [11] 5184 	push	af
      001618 33               [ 6] 5185 	inc	sp
      001619 E5               [11] 5186 	push	hl
      00161A CDr00r00         [17] 5187 	call	_WRTVRM
      00161D F1               [10] 5188 	pop	af
      00161E 33               [ 6] 5189 	inc	sp
      00161F C1               [10] 5190 	pop	bc
                                   5191 ;src\/Graphics\Graphics.h:103: WRTVRM(VRAMaddress + 7, 	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      001620 21 07 00         [10] 5192 	ld	hl, #0x0007
      001623 09               [11] 5193 	add	hl, bc
      001624 C5               [11] 5194 	push	bc
      001625 3E 40            [ 7] 5195 	ld	a, #0x40
      001627 F5               [11] 5196 	push	af
      001628 33               [ 6] 5197 	inc	sp
      001629 E5               [11] 5198 	push	hl
      00162A CDr00r00         [17] 5199 	call	_WRTVRM
      00162D F1               [10] 5200 	pop	af
      00162E 33               [ 6] 5201 	inc	sp
      00162F C1               [10] 5202 	pop	bc
                                   5203 ;src\/Graphics\Graphics.h:105: WRTVRM(VRAMaddress + 8,   y);
      001630 21 08 00         [10] 5204 	ld	hl, #0x0008
      001633 09               [11] 5205 	add	hl, bc
      001634 C5               [11] 5206 	push	bc
      001635 DD 7E 06         [19] 5207 	ld	a, 6 (ix)
      001638 F5               [11] 5208 	push	af
      001639 33               [ 6] 5209 	inc	sp
      00163A E5               [11] 5210 	push	hl
      00163B CDr00r00         [17] 5211 	call	_WRTVRM
      00163E F1               [10] 5212 	pop	af
      00163F 33               [ 6] 5213 	inc	sp
      001640 C1               [10] 5214 	pop	bc
                                   5215 ;src\/Graphics\Graphics.h:106: WRTVRM(VRAMaddress + 9, 	0);
      001641 21 09 00         [10] 5216 	ld	hl, #0x0009
      001644 09               [11] 5217 	add	hl, bc
      001645 C5               [11] 5218 	push	bc
      001646 AF               [ 4] 5219 	xor	a, a
      001647 F5               [11] 5220 	push	af
      001648 33               [ 6] 5221 	inc	sp
      001649 E5               [11] 5222 	push	hl
      00164A CDr00r00         [17] 5223 	call	_WRTVRM
      00164D F1               [10] 5224 	pop	af
      00164E 33               [ 6] 5225 	inc	sp
      00164F C1               [10] 5226 	pop	bc
                                   5227 ;src\/Graphics\Graphics.h:107: WRTVRM(VRAMaddress + 10,	0); // Pattern don't matter
      001650 21 0A 00         [10] 5228 	ld	hl, #0x000a
      001653 09               [11] 5229 	add	hl, bc
      001654 C5               [11] 5230 	push	bc
      001655 AF               [ 4] 5231 	xor	a, a
      001656 F5               [11] 5232 	push	af
      001657 33               [ 6] 5233 	inc	sp
      001658 E5               [11] 5234 	push	hl
      001659 CDr00r00         [17] 5235 	call	_WRTVRM
      00165C F1               [10] 5236 	pop	af
      00165D 33               [ 6] 5237 	inc	sp
      00165E C1               [10] 5238 	pop	bc
                                   5239 ;src\/Graphics\Graphics.h:108: WRTVRM(VRAMaddress + 11,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)
      00165F 21 0B 00         [10] 5240 	ld	hl, #0x000b
      001662 09               [11] 5241 	add	hl, bc
      001663 C5               [11] 5242 	push	bc
      001664 3E 40            [ 7] 5243 	ld	a, #0x40
      001666 F5               [11] 5244 	push	af
      001667 33               [ 6] 5245 	inc	sp
      001668 E5               [11] 5246 	push	hl
      001669 CDr00r00         [17] 5247 	call	_WRTVRM
      00166C F1               [10] 5248 	pop	af
      00166D 33               [ 6] 5249 	inc	sp
      00166E C1               [10] 5250 	pop	bc
                                   5251 ;src\/Graphics\Graphics.h:110: WRTVRM(VRAMaddress + 12,  y);
      00166F 21 0C 00         [10] 5252 	ld	hl, #0x000c
      001672 09               [11] 5253 	add	hl, bc
      001673 C5               [11] 5254 	push	bc
      001674 DD 7E 06         [19] 5255 	ld	a, 6 (ix)
      001677 F5               [11] 5256 	push	af
      001678 33               [ 6] 5257 	inc	sp
      001679 E5               [11] 5258 	push	hl
      00167A CDr00r00         [17] 5259 	call	_WRTVRM
      00167D F1               [10] 5260 	pop	af
      00167E 33               [ 6] 5261 	inc	sp
      00167F C1               [10] 5262 	pop	bc
                                   5263 ;src\/Graphics\Graphics.h:111: WRTVRM(VRAMaddress + 13,	0);
      001680 21 0D 00         [10] 5264 	ld	hl, #0x000d
      001683 09               [11] 5265 	add	hl, bc
      001684 C5               [11] 5266 	push	bc
      001685 AF               [ 4] 5267 	xor	a, a
      001686 F5               [11] 5268 	push	af
      001687 33               [ 6] 5269 	inc	sp
      001688 E5               [11] 5270 	push	hl
      001689 CDr00r00         [17] 5271 	call	_WRTVRM
      00168C F1               [10] 5272 	pop	af
      00168D 33               [ 6] 5273 	inc	sp
      00168E C1               [10] 5274 	pop	bc
                                   5275 ;src\/Graphics\Graphics.h:112: WRTVRM(VRAMaddress + 14,	0); // Pattern don't matter
      00168F 21 0E 00         [10] 5276 	ld	hl, #0x000e
      001692 09               [11] 5277 	add	hl, bc
      001693 C5               [11] 5278 	push	bc
      001694 AF               [ 4] 5279 	xor	a, a
      001695 F5               [11] 5280 	push	af
      001696 33               [ 6] 5281 	inc	sp
      001697 E5               [11] 5282 	push	hl
      001698 CDr00r00         [17] 5283 	call	_WRTVRM
      00169B F1               [10] 5284 	pop	af
      00169C 33               [ 6] 5285 	inc	sp
      00169D C1               [10] 5286 	pop	bc
                                   5287 ;src\/Graphics\Graphics.h:113: WRTVRM(VRAMaddress + 15,	0b1000000); // Early Clock bit makes x = -32 (out of the screen)  
      00169E 21 0F 00         [10] 5288 	ld	hl, #0x000f
      0016A1 09               [11] 5289 	add	hl, bc
      0016A2 3E 40            [ 7] 5290 	ld	a, #0x40
      0016A4 F5               [11] 5291 	push	af
      0016A5 33               [ 6] 5292 	inc	sp
      0016A6 E5               [11] 5293 	push	hl
      0016A7 CDr00r00         [17] 5294 	call	_WRTVRM
      0016AA F1               [10] 5295 	pop	af
      0016AB 33               [ 6] 5296 	inc	sp
                                   5297 ;src\/Graphics\Graphics.h:114: }
      0016AC DD E1            [14] 5298 	pop	ix
      0016AE C9               [10] 5299 	ret
                                   5300 ;src\/Graphics\Graphics.h:116: void DrawNextPiece() {
                                   5301 ;	---------------------------------
                                   5302 ; Function DrawNextPiece
                                   5303 ; ---------------------------------
      0016AF                       5304 _DrawNextPiece::
      0016AF F5               [11] 5305 	push	af
      0016B0 F5               [11] 5306 	push	af
                                   5307 ;src\/Graphics\Graphics.h:120: PosMaskSprites(SPRATT, 24+24);
      0016B1 3E 30            [ 7] 5308 	ld	a, #0x30
      0016B3 F5               [11] 5309 	push	af
      0016B4 33               [ 6] 5310 	inc	sp
      0016B5 21 00 1B         [10] 5311 	ld	hl, #0x1b00
      0016B8 E5               [11] 5312 	push	hl
      0016B9 CDrA4r15         [17] 5313 	call	_PosMaskSprites
      0016BC F1               [10] 5314 	pop	af
      0016BD 33               [ 6] 5315 	inc	sp
                                   5316 ;src\/Graphics\Graphics.h:121: PosMaskSprites(SPRATT + 16, 24+24+16);
      0016BE 3E 40            [ 7] 5317 	ld	a, #0x40
      0016C0 F5               [11] 5318 	push	af
      0016C1 33               [ 6] 5319 	inc	sp
      0016C2 21 10 1B         [10] 5320 	ld	hl, #0x1b10
      0016C5 E5               [11] 5321 	push	hl
      0016C6 CDrA4r15         [17] 5322 	call	_PosMaskSprites
      0016C9 F1               [10] 5323 	pop	af
      0016CA 33               [ 6] 5324 	inc	sp
                                   5325 ;src\/Graphics\Graphics.h:124: PosMaskSprites(SPRATT + 32, 255); // first line
      0016CB 3E FF            [ 7] 5326 	ld	a, #0xff
      0016CD F5               [11] 5327 	push	af
      0016CE 33               [ 6] 5328 	inc	sp
      0016CF 21 20 1B         [10] 5329 	ld	hl, #0x1b20
      0016D2 E5               [11] 5330 	push	hl
      0016D3 CDrA4r15         [17] 5331 	call	_PosMaskSprites
      0016D6 F1               [10] 5332 	pop	af
      0016D7 33               [ 6] 5333 	inc	sp
                                   5334 ;src\/Graphics\Graphics.h:126: while(counter++ < 25) {
      0016D8 FD 21 02 00      [14] 5335 	ld	iy, #2
      0016DC FD 39            [15] 5336 	add	iy, sp
      0016DE FD 36 00 30      [19] 5337 	ld	0 (iy), #0x30
      0016E2 AF               [ 4] 5338 	xor	a, a
      0016E3 FD 23            [10] 5339 	inc	iy
      0016E5 FD 77 00         [19] 5340 	ld	0 (iy), a
      0016E8                       5341 00104$:
      0016E8 FD 21 03 00      [14] 5342 	ld	iy, #3
      0016EC FD 39            [15] 5343 	add	iy, sp
      0016EE FD 7E 00         [19] 5344 	ld	a, 0 (iy)
      0016F1 D6 19            [ 7] 5345 	sub	a, #0x19
      0016F3 D2r2Dr1A         [10] 5346 	jp	NC, 00106$
      0016F6 FD 34 00         [23] 5347 	inc	0 (iy)
                                   5348 ;src\/Graphics\Graphics.h:128: word lastJiffy = JIFFY;
      0016F9 ED 4B 9E FC      [20] 5349 	ld	bc, (_JIFFY)
                                   5350 ;src\/Graphics\Graphics.h:129: while (lastJiffy == JIFFY) {
      0016FD                       5351 00101$:
      0016FD 2A 9E FC         [16] 5352 	ld	hl, (_JIFFY)
      001700 BF               [ 4] 5353 	cp	a, a
      001701 ED 42            [15] 5354 	sbc	hl, bc
      001703 28 F8            [12] 5355 	jr	Z, 00101$
                                   5356 ;src\/Graphics\Graphics.h:134: GetNextPieceColors(topPiece);
      001705 3Ar90r00         [13] 5357 	ld	a,(#_topPiece + 0)
      001708 F5               [11] 5358 	push	af
      001709 33               [ 6] 5359 	inc	sp
      00170A CDr49r15         [17] 5360 	call	_GetNextPieceColors
      00170D 33               [ 6] 5361 	inc	sp
                                   5362 ;src\/Graphics\Graphics.h:135: WRTVRM(SPRATT + 64, 	y - 32);                       // Code repeated for performance reasons
      00170E FD 21 02 00      [14] 5363 	ld	iy, #2
      001712 FD 39            [15] 5364 	add	iy, sp
      001714 FD 7E 00         [19] 5365 	ld	a, 0 (iy)
      001717 FD 2B            [10] 5366 	dec	iy
      001719 FD 77 00         [19] 5367 	ld	0 (iy), a
      00171C 21 00 00         [10] 5368 	ld	hl, #0
      00171F 39               [11] 5369 	add	hl, sp
      001720 FD 7E 00         [19] 5370 	ld	a, 0 (iy)
      001723 C6 E0            [ 7] 5371 	add	a, #0xe0
      001725 77               [ 7] 5372 	ld	(hl), a
      001726 FD 7E FF         [19] 5373 	ld	a, -1 (iy)
      001729 F5               [11] 5374 	push	af
      00172A 33               [ 6] 5375 	inc	sp
      00172B 21 40 1B         [10] 5376 	ld	hl, #0x1b40
      00172E E5               [11] 5377 	push	hl
      00172F CDr00r00         [17] 5378 	call	_WRTVRM
      001732 F1               [10] 5379 	pop	af
      001733 33               [ 6] 5380 	inc	sp
                                   5381 ;src\/Graphics\Graphics.h:136: WRTVRM(SPRATT + 65, 	(4 * 8)-4);
      001734 3E 1C            [ 7] 5382 	ld	a, #0x1c
      001736 F5               [11] 5383 	push	af
      001737 33               [ 6] 5384 	inc	sp
      001738 21 41 1B         [10] 5385 	ld	hl, #0x1b41
      00173B E5               [11] 5386 	push	hl
      00173C CDr00r00         [17] 5387 	call	_WRTVRM
      00173F F1               [10] 5388 	pop	af
      001740 33               [ 6] 5389 	inc	sp
                                   5390 ;src\/Graphics\Graphics.h:137: WRTVRM(SPRATT + 66, 	SPRITE_PATTERN_SMALL_BLOCK);
      001741 3E 4C            [ 7] 5391 	ld	a, #0x4c
      001743 F5               [11] 5392 	push	af
      001744 33               [ 6] 5393 	inc	sp
      001745 21 42 1B         [10] 5394 	ld	hl, #0x1b42
      001748 E5               [11] 5395 	push	hl
      001749 CDr00r00         [17] 5396 	call	_WRTVRM
      00174C F1               [10] 5397 	pop	af
      00174D 33               [ 6] 5398 	inc	sp
                                   5399 ;src\/Graphics\Graphics.h:138: WRTVRM(SPRATT + 67, 	nextPieceColor_Front);
      00174E 3Ar9Br00         [13] 5400 	ld	a,(#_nextPieceColor_Front + 0)
      001751 F5               [11] 5401 	push	af
      001752 33               [ 6] 5402 	inc	sp
      001753 21 43 1B         [10] 5403 	ld	hl, #0x1b43
      001756 E5               [11] 5404 	push	hl
      001757 CDr00r00         [17] 5405 	call	_WRTVRM
      00175A F1               [10] 5406 	pop	af
      00175B 33               [ 6] 5407 	inc	sp
                                   5408 ;src\/Graphics\Graphics.h:139: WRTVRM(SPRATT + 68, 	y - 32);
      00175C 21 00 00         [10] 5409 	ld	hl, #0
      00175F 39               [11] 5410 	add	hl, sp
      001760 7E               [ 7] 5411 	ld	a, (hl)
      001761 F5               [11] 5412 	push	af
      001762 33               [ 6] 5413 	inc	sp
      001763 21 44 1B         [10] 5414 	ld	hl, #0x1b44
      001766 E5               [11] 5415 	push	hl
      001767 CDr00r00         [17] 5416 	call	_WRTVRM
      00176A F1               [10] 5417 	pop	af
      00176B 33               [ 6] 5418 	inc	sp
                                   5419 ;src\/Graphics\Graphics.h:140: WRTVRM(SPRATT + 69, 	(4 * 8)-4);
      00176C 3E 1C            [ 7] 5420 	ld	a, #0x1c
      00176E F5               [11] 5421 	push	af
      00176F 33               [ 6] 5422 	inc	sp
      001770 21 45 1B         [10] 5423 	ld	hl, #0x1b45
      001773 E5               [11] 5424 	push	hl
      001774 CDr00r00         [17] 5425 	call	_WRTVRM
      001777 F1               [10] 5426 	pop	af
      001778 33               [ 6] 5427 	inc	sp
                                   5428 ;src\/Graphics\Graphics.h:141: WRTVRM(SPRATT + 70, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001779 3E 50            [ 7] 5429 	ld	a, #0x50
      00177B F5               [11] 5430 	push	af
      00177C 33               [ 6] 5431 	inc	sp
      00177D 21 46 1B         [10] 5432 	ld	hl, #0x1b46
      001780 E5               [11] 5433 	push	hl
      001781 CDr00r00         [17] 5434 	call	_WRTVRM
      001784 F1               [10] 5435 	pop	af
      001785 33               [ 6] 5436 	inc	sp
                                   5437 ;src\/Graphics\Graphics.h:142: WRTVRM(SPRATT + 71, 	nextPieceColor_Back);
      001786 3Ar9Cr00         [13] 5438 	ld	a,(#_nextPieceColor_Back + 0)
      001789 F5               [11] 5439 	push	af
      00178A 33               [ 6] 5440 	inc	sp
      00178B 21 47 1B         [10] 5441 	ld	hl, #0x1b47
      00178E E5               [11] 5442 	push	hl
      00178F CDr00r00         [17] 5443 	call	_WRTVRM
      001792 F1               [10] 5444 	pop	af
      001793 33               [ 6] 5445 	inc	sp
                                   5446 ;src\/Graphics\Graphics.h:144: GetNextPieceColors(midPiece);
      001794 3Ar91r00         [13] 5447 	ld	a,(#_midPiece + 0)
      001797 F5               [11] 5448 	push	af
      001798 33               [ 6] 5449 	inc	sp
      001799 CDr49r15         [17] 5450 	call	_GetNextPieceColors
      00179C 33               [ 6] 5451 	inc	sp
                                   5452 ;src\/Graphics\Graphics.h:145: WRTVRM(SPRATT + 72, 	y - 24);
      00179D 21 00 00         [10] 5453 	ld	hl, #0
      0017A0 39               [11] 5454 	add	hl, sp
      0017A1 FD 21 01 00      [14] 5455 	ld	iy, #1
      0017A5 FD 39            [15] 5456 	add	iy, sp
      0017A7 FD 7E 00         [19] 5457 	ld	a, 0 (iy)
      0017AA C6 E8            [ 7] 5458 	add	a, #0xe8
      0017AC 77               [ 7] 5459 	ld	(hl), a
      0017AD FD 7E FF         [19] 5460 	ld	a, -1 (iy)
      0017B0 F5               [11] 5461 	push	af
      0017B1 33               [ 6] 5462 	inc	sp
      0017B2 21 48 1B         [10] 5463 	ld	hl, #0x1b48
      0017B5 E5               [11] 5464 	push	hl
      0017B6 CDr00r00         [17] 5465 	call	_WRTVRM
      0017B9 F1               [10] 5466 	pop	af
      0017BA 33               [ 6] 5467 	inc	sp
                                   5468 ;src\/Graphics\Graphics.h:146: WRTVRM(SPRATT + 73, 	(4 * 8)-4);
      0017BB 3E 1C            [ 7] 5469 	ld	a, #0x1c
      0017BD F5               [11] 5470 	push	af
      0017BE 33               [ 6] 5471 	inc	sp
      0017BF 21 49 1B         [10] 5472 	ld	hl, #0x1b49
      0017C2 E5               [11] 5473 	push	hl
      0017C3 CDr00r00         [17] 5474 	call	_WRTVRM
      0017C6 F1               [10] 5475 	pop	af
      0017C7 33               [ 6] 5476 	inc	sp
                                   5477 ;src\/Graphics\Graphics.h:147: WRTVRM(SPRATT + 74, 	SPRITE_PATTERN_SMALL_BLOCK);
      0017C8 3E 4C            [ 7] 5478 	ld	a, #0x4c
      0017CA F5               [11] 5479 	push	af
      0017CB 33               [ 6] 5480 	inc	sp
      0017CC 21 4A 1B         [10] 5481 	ld	hl, #0x1b4a
      0017CF E5               [11] 5482 	push	hl
      0017D0 CDr00r00         [17] 5483 	call	_WRTVRM
      0017D3 F1               [10] 5484 	pop	af
      0017D4 33               [ 6] 5485 	inc	sp
                                   5486 ;src\/Graphics\Graphics.h:148: WRTVRM(SPRATT + 75, 	nextPieceColor_Front);
      0017D5 3Ar9Br00         [13] 5487 	ld	a,(#_nextPieceColor_Front + 0)
      0017D8 F5               [11] 5488 	push	af
      0017D9 33               [ 6] 5489 	inc	sp
      0017DA 21 4B 1B         [10] 5490 	ld	hl, #0x1b4b
      0017DD E5               [11] 5491 	push	hl
      0017DE CDr00r00         [17] 5492 	call	_WRTVRM
      0017E1 F1               [10] 5493 	pop	af
      0017E2 33               [ 6] 5494 	inc	sp
                                   5495 ;src\/Graphics\Graphics.h:149: WRTVRM(SPRATT + 76, 	y - 24);
      0017E3 21 00 00         [10] 5496 	ld	hl, #0
      0017E6 39               [11] 5497 	add	hl, sp
      0017E7 7E               [ 7] 5498 	ld	a, (hl)
      0017E8 F5               [11] 5499 	push	af
      0017E9 33               [ 6] 5500 	inc	sp
      0017EA 21 4C 1B         [10] 5501 	ld	hl, #0x1b4c
      0017ED E5               [11] 5502 	push	hl
      0017EE CDr00r00         [17] 5503 	call	_WRTVRM
      0017F1 F1               [10] 5504 	pop	af
      0017F2 33               [ 6] 5505 	inc	sp
                                   5506 ;src\/Graphics\Graphics.h:150: WRTVRM(SPRATT + 77, 	(4 * 8)-4);
      0017F3 3E 1C            [ 7] 5507 	ld	a, #0x1c
      0017F5 F5               [11] 5508 	push	af
      0017F6 33               [ 6] 5509 	inc	sp
      0017F7 21 4D 1B         [10] 5510 	ld	hl, #0x1b4d
      0017FA E5               [11] 5511 	push	hl
      0017FB CDr00r00         [17] 5512 	call	_WRTVRM
      0017FE F1               [10] 5513 	pop	af
      0017FF 33               [ 6] 5514 	inc	sp
                                   5515 ;src\/Graphics\Graphics.h:151: WRTVRM(SPRATT + 78, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001800 3E 50            [ 7] 5516 	ld	a, #0x50
      001802 F5               [11] 5517 	push	af
      001803 33               [ 6] 5518 	inc	sp
      001804 21 4E 1B         [10] 5519 	ld	hl, #0x1b4e
      001807 E5               [11] 5520 	push	hl
      001808 CDr00r00         [17] 5521 	call	_WRTVRM
      00180B F1               [10] 5522 	pop	af
      00180C 33               [ 6] 5523 	inc	sp
                                   5524 ;src\/Graphics\Graphics.h:152: WRTVRM(SPRATT + 79, 	nextPieceColor_Back);    
      00180D 3Ar9Cr00         [13] 5525 	ld	a,(#_nextPieceColor_Back + 0)
      001810 F5               [11] 5526 	push	af
      001811 33               [ 6] 5527 	inc	sp
      001812 21 4F 1B         [10] 5528 	ld	hl, #0x1b4f
      001815 E5               [11] 5529 	push	hl
      001816 CDr00r00         [17] 5530 	call	_WRTVRM
      001819 F1               [10] 5531 	pop	af
      00181A 33               [ 6] 5532 	inc	sp
                                   5533 ;src\/Graphics\Graphics.h:154: GetNextPieceColors(bottomPiece);
      00181B 3Ar92r00         [13] 5534 	ld	a,(#_bottomPiece + 0)
      00181E F5               [11] 5535 	push	af
      00181F 33               [ 6] 5536 	inc	sp
      001820 CDr49r15         [17] 5537 	call	_GetNextPieceColors
      001823 33               [ 6] 5538 	inc	sp
                                   5539 ;src\/Graphics\Graphics.h:155: WRTVRM(SPRATT + 80, 	y - 16);
      001824 21 00 00         [10] 5540 	ld	hl, #0
      001827 39               [11] 5541 	add	hl, sp
      001828 FD 21 01 00      [14] 5542 	ld	iy, #1
      00182C FD 39            [15] 5543 	add	iy, sp
      00182E FD 7E 00         [19] 5544 	ld	a, 0 (iy)
      001831 C6 F0            [ 7] 5545 	add	a, #0xf0
      001833 77               [ 7] 5546 	ld	(hl), a
      001834 FD 7E FF         [19] 5547 	ld	a, -1 (iy)
      001837 F5               [11] 5548 	push	af
      001838 33               [ 6] 5549 	inc	sp
      001839 21 50 1B         [10] 5550 	ld	hl, #0x1b50
      00183C E5               [11] 5551 	push	hl
      00183D CDr00r00         [17] 5552 	call	_WRTVRM
      001840 F1               [10] 5553 	pop	af
      001841 33               [ 6] 5554 	inc	sp
                                   5555 ;src\/Graphics\Graphics.h:156: WRTVRM(SPRATT + 81, 	(4 * 8)-4);
      001842 3E 1C            [ 7] 5556 	ld	a, #0x1c
      001844 F5               [11] 5557 	push	af
      001845 33               [ 6] 5558 	inc	sp
      001846 21 51 1B         [10] 5559 	ld	hl, #0x1b51
      001849 E5               [11] 5560 	push	hl
      00184A CDr00r00         [17] 5561 	call	_WRTVRM
      00184D F1               [10] 5562 	pop	af
      00184E 33               [ 6] 5563 	inc	sp
                                   5564 ;src\/Graphics\Graphics.h:157: WRTVRM(SPRATT + 82, 	SPRITE_PATTERN_SMALL_BLOCK);
      00184F 3E 4C            [ 7] 5565 	ld	a, #0x4c
      001851 F5               [11] 5566 	push	af
      001852 33               [ 6] 5567 	inc	sp
      001853 21 52 1B         [10] 5568 	ld	hl, #0x1b52
      001856 E5               [11] 5569 	push	hl
      001857 CDr00r00         [17] 5570 	call	_WRTVRM
      00185A F1               [10] 5571 	pop	af
      00185B 33               [ 6] 5572 	inc	sp
                                   5573 ;src\/Graphics\Graphics.h:158: WRTVRM(SPRATT + 83, 	nextPieceColor_Front);
      00185C 3Ar9Br00         [13] 5574 	ld	a,(#_nextPieceColor_Front + 0)
      00185F F5               [11] 5575 	push	af
      001860 33               [ 6] 5576 	inc	sp
      001861 21 53 1B         [10] 5577 	ld	hl, #0x1b53
      001864 E5               [11] 5578 	push	hl
      001865 CDr00r00         [17] 5579 	call	_WRTVRM
      001868 F1               [10] 5580 	pop	af
      001869 33               [ 6] 5581 	inc	sp
                                   5582 ;src\/Graphics\Graphics.h:159: WRTVRM(SPRATT + 84, 	y - 16);
      00186A 21 00 00         [10] 5583 	ld	hl, #0
      00186D 39               [11] 5584 	add	hl, sp
      00186E 7E               [ 7] 5585 	ld	a, (hl)
      00186F F5               [11] 5586 	push	af
      001870 33               [ 6] 5587 	inc	sp
      001871 21 54 1B         [10] 5588 	ld	hl, #0x1b54
      001874 E5               [11] 5589 	push	hl
      001875 CDr00r00         [17] 5590 	call	_WRTVRM
      001878 F1               [10] 5591 	pop	af
      001879 33               [ 6] 5592 	inc	sp
                                   5593 ;src\/Graphics\Graphics.h:160: WRTVRM(SPRATT + 85, 	(4 * 8)-4);
      00187A 3E 1C            [ 7] 5594 	ld	a, #0x1c
      00187C F5               [11] 5595 	push	af
      00187D 33               [ 6] 5596 	inc	sp
      00187E 21 55 1B         [10] 5597 	ld	hl, #0x1b55
      001881 E5               [11] 5598 	push	hl
      001882 CDr00r00         [17] 5599 	call	_WRTVRM
      001885 F1               [10] 5600 	pop	af
      001886 33               [ 6] 5601 	inc	sp
                                   5602 ;src\/Graphics\Graphics.h:161: WRTVRM(SPRATT + 86, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001887 3E 50            [ 7] 5603 	ld	a, #0x50
      001889 F5               [11] 5604 	push	af
      00188A 33               [ 6] 5605 	inc	sp
      00188B 21 56 1B         [10] 5606 	ld	hl, #0x1b56
      00188E E5               [11] 5607 	push	hl
      00188F CDr00r00         [17] 5608 	call	_WRTVRM
      001892 F1               [10] 5609 	pop	af
      001893 33               [ 6] 5610 	inc	sp
                                   5611 ;src\/Graphics\Graphics.h:162: WRTVRM(SPRATT + 87, 	nextPieceColor_Back);    
      001894 3Ar9Cr00         [13] 5612 	ld	a,(#_nextPieceColor_Back + 0)
      001897 F5               [11] 5613 	push	af
      001898 33               [ 6] 5614 	inc	sp
      001899 21 57 1B         [10] 5615 	ld	hl, #0x1b57
      00189C E5               [11] 5616 	push	hl
      00189D CDr00r00         [17] 5617 	call	_WRTVRM
      0018A0 F1               [10] 5618 	pop	af
      0018A1 33               [ 6] 5619 	inc	sp
                                   5620 ;src\/Graphics\Graphics.h:165: GetNextPieceColors(nextTopPiece);
      0018A2 3Ar93r00         [13] 5621 	ld	a,(#_nextTopPiece + 0)
      0018A5 F5               [11] 5622 	push	af
      0018A6 33               [ 6] 5623 	inc	sp
      0018A7 CDr49r15         [17] 5624 	call	_GetNextPieceColors
      0018AA 33               [ 6] 5625 	inc	sp
                                   5626 ;src\/Graphics\Graphics.h:166: WRTVRM(SPRATT + 88, 	y);                       // Code repeated for performance reasons
      0018AB 21 02 00         [10] 5627 	ld	hl, #2
      0018AE 39               [11] 5628 	add	hl, sp
      0018AF 7E               [ 7] 5629 	ld	a, (hl)
      0018B0 F5               [11] 5630 	push	af
      0018B1 33               [ 6] 5631 	inc	sp
      0018B2 21 58 1B         [10] 5632 	ld	hl, #0x1b58
      0018B5 E5               [11] 5633 	push	hl
      0018B6 CDr00r00         [17] 5634 	call	_WRTVRM
      0018B9 F1               [10] 5635 	pop	af
      0018BA 33               [ 6] 5636 	inc	sp
                                   5637 ;src\/Graphics\Graphics.h:167: WRTVRM(SPRATT + 89, 	(4 * 8)-4);
      0018BB 3E 1C            [ 7] 5638 	ld	a, #0x1c
      0018BD F5               [11] 5639 	push	af
      0018BE 33               [ 6] 5640 	inc	sp
      0018BF 21 59 1B         [10] 5641 	ld	hl, #0x1b59
      0018C2 E5               [11] 5642 	push	hl
      0018C3 CDr00r00         [17] 5643 	call	_WRTVRM
      0018C6 F1               [10] 5644 	pop	af
      0018C7 33               [ 6] 5645 	inc	sp
                                   5646 ;src\/Graphics\Graphics.h:168: WRTVRM(SPRATT + 90, 	SPRITE_PATTERN_SMALL_BLOCK);
      0018C8 3E 4C            [ 7] 5647 	ld	a, #0x4c
      0018CA F5               [11] 5648 	push	af
      0018CB 33               [ 6] 5649 	inc	sp
      0018CC 21 5A 1B         [10] 5650 	ld	hl, #0x1b5a
      0018CF E5               [11] 5651 	push	hl
      0018D0 CDr00r00         [17] 5652 	call	_WRTVRM
      0018D3 F1               [10] 5653 	pop	af
      0018D4 33               [ 6] 5654 	inc	sp
                                   5655 ;src\/Graphics\Graphics.h:169: WRTVRM(SPRATT + 91, 	nextPieceColor_Front);
      0018D5 3Ar9Br00         [13] 5656 	ld	a,(#_nextPieceColor_Front + 0)
      0018D8 F5               [11] 5657 	push	af
      0018D9 33               [ 6] 5658 	inc	sp
      0018DA 21 5B 1B         [10] 5659 	ld	hl, #0x1b5b
      0018DD E5               [11] 5660 	push	hl
      0018DE CDr00r00         [17] 5661 	call	_WRTVRM
      0018E1 F1               [10] 5662 	pop	af
      0018E2 33               [ 6] 5663 	inc	sp
                                   5664 ;src\/Graphics\Graphics.h:170: WRTVRM(SPRATT + 92, 	y);
      0018E3 21 02 00         [10] 5665 	ld	hl, #2
      0018E6 39               [11] 5666 	add	hl, sp
      0018E7 7E               [ 7] 5667 	ld	a, (hl)
      0018E8 F5               [11] 5668 	push	af
      0018E9 33               [ 6] 5669 	inc	sp
      0018EA 21 5C 1B         [10] 5670 	ld	hl, #0x1b5c
      0018ED E5               [11] 5671 	push	hl
      0018EE CDr00r00         [17] 5672 	call	_WRTVRM
      0018F1 F1               [10] 5673 	pop	af
      0018F2 33               [ 6] 5674 	inc	sp
                                   5675 ;src\/Graphics\Graphics.h:171: WRTVRM(SPRATT + 93, 	(4 * 8)-4);
      0018F3 3E 1C            [ 7] 5676 	ld	a, #0x1c
      0018F5 F5               [11] 5677 	push	af
      0018F6 33               [ 6] 5678 	inc	sp
      0018F7 21 5D 1B         [10] 5679 	ld	hl, #0x1b5d
      0018FA E5               [11] 5680 	push	hl
      0018FB CDr00r00         [17] 5681 	call	_WRTVRM
      0018FE F1               [10] 5682 	pop	af
      0018FF 33               [ 6] 5683 	inc	sp
                                   5684 ;src\/Graphics\Graphics.h:172: WRTVRM(SPRATT + 94, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001900 3E 50            [ 7] 5685 	ld	a, #0x50
      001902 F5               [11] 5686 	push	af
      001903 33               [ 6] 5687 	inc	sp
      001904 21 5E 1B         [10] 5688 	ld	hl, #0x1b5e
      001907 E5               [11] 5689 	push	hl
      001908 CDr00r00         [17] 5690 	call	_WRTVRM
      00190B F1               [10] 5691 	pop	af
      00190C 33               [ 6] 5692 	inc	sp
                                   5693 ;src\/Graphics\Graphics.h:173: WRTVRM(SPRATT + 95, 	nextPieceColor_Back);
      00190D 3Ar9Cr00         [13] 5694 	ld	a,(#_nextPieceColor_Back + 0)
      001910 F5               [11] 5695 	push	af
      001911 33               [ 6] 5696 	inc	sp
      001912 21 5F 1B         [10] 5697 	ld	hl, #0x1b5f
      001915 E5               [11] 5698 	push	hl
      001916 CDr00r00         [17] 5699 	call	_WRTVRM
      001919 F1               [10] 5700 	pop	af
      00191A 33               [ 6] 5701 	inc	sp
                                   5702 ;src\/Graphics\Graphics.h:175: GetNextPieceColors(nextMidPiece);
      00191B 3Ar94r00         [13] 5703 	ld	a,(#_nextMidPiece + 0)
      00191E F5               [11] 5704 	push	af
      00191F 33               [ 6] 5705 	inc	sp
      001920 CDr49r15         [17] 5706 	call	_GetNextPieceColors
      001923 33               [ 6] 5707 	inc	sp
                                   5708 ;src\/Graphics\Graphics.h:176: WRTVRM(SPRATT + 96, 	y + 8);
      001924 FD 21 01 00      [14] 5709 	ld	iy, #1
      001928 FD 39            [15] 5710 	add	iy, sp
      00192A FD 7E 00         [19] 5711 	ld	a, 0 (iy)
      00192D C6 08            [ 7] 5712 	add	a, #0x08
      00192F FD 2B            [10] 5713 	dec	iy
      001931 FD 77 00         [19] 5714 	ld	0 (iy), a
      001934 F5               [11] 5715 	push	af
      001935 33               [ 6] 5716 	inc	sp
      001936 21 60 1B         [10] 5717 	ld	hl, #0x1b60
      001939 E5               [11] 5718 	push	hl
      00193A CDr00r00         [17] 5719 	call	_WRTVRM
      00193D F1               [10] 5720 	pop	af
      00193E 33               [ 6] 5721 	inc	sp
                                   5722 ;src\/Graphics\Graphics.h:177: WRTVRM(SPRATT + 97, 	(4 * 8)-4);
      00193F 3E 1C            [ 7] 5723 	ld	a, #0x1c
      001941 F5               [11] 5724 	push	af
      001942 33               [ 6] 5725 	inc	sp
      001943 21 61 1B         [10] 5726 	ld	hl, #0x1b61
      001946 E5               [11] 5727 	push	hl
      001947 CDr00r00         [17] 5728 	call	_WRTVRM
      00194A F1               [10] 5729 	pop	af
      00194B 33               [ 6] 5730 	inc	sp
                                   5731 ;src\/Graphics\Graphics.h:178: WRTVRM(SPRATT + 98, 	SPRITE_PATTERN_SMALL_BLOCK);
      00194C 3E 4C            [ 7] 5732 	ld	a, #0x4c
      00194E F5               [11] 5733 	push	af
      00194F 33               [ 6] 5734 	inc	sp
      001950 21 62 1B         [10] 5735 	ld	hl, #0x1b62
      001953 E5               [11] 5736 	push	hl
      001954 CDr00r00         [17] 5737 	call	_WRTVRM
      001957 F1               [10] 5738 	pop	af
      001958 33               [ 6] 5739 	inc	sp
                                   5740 ;src\/Graphics\Graphics.h:179: WRTVRM(SPRATT + 99, 	nextPieceColor_Front);
      001959 3Ar9Br00         [13] 5741 	ld	a,(#_nextPieceColor_Front + 0)
      00195C F5               [11] 5742 	push	af
      00195D 33               [ 6] 5743 	inc	sp
      00195E 21 63 1B         [10] 5744 	ld	hl, #0x1b63
      001961 E5               [11] 5745 	push	hl
      001962 CDr00r00         [17] 5746 	call	_WRTVRM
      001965 F1               [10] 5747 	pop	af
      001966 33               [ 6] 5748 	inc	sp
                                   5749 ;src\/Graphics\Graphics.h:180: WRTVRM(SPRATT + 100, 	y + 8);
      001967 21 00 00         [10] 5750 	ld	hl, #0
      00196A 39               [11] 5751 	add	hl, sp
      00196B 7E               [ 7] 5752 	ld	a, (hl)
      00196C F5               [11] 5753 	push	af
      00196D 33               [ 6] 5754 	inc	sp
      00196E 21 64 1B         [10] 5755 	ld	hl, #0x1b64
      001971 E5               [11] 5756 	push	hl
      001972 CDr00r00         [17] 5757 	call	_WRTVRM
      001975 F1               [10] 5758 	pop	af
      001976 33               [ 6] 5759 	inc	sp
                                   5760 ;src\/Graphics\Graphics.h:181: WRTVRM(SPRATT + 101, 	(4 * 8)-4);
      001977 3E 1C            [ 7] 5761 	ld	a, #0x1c
      001979 F5               [11] 5762 	push	af
      00197A 33               [ 6] 5763 	inc	sp
      00197B 21 65 1B         [10] 5764 	ld	hl, #0x1b65
      00197E E5               [11] 5765 	push	hl
      00197F CDr00r00         [17] 5766 	call	_WRTVRM
      001982 F1               [10] 5767 	pop	af
      001983 33               [ 6] 5768 	inc	sp
                                   5769 ;src\/Graphics\Graphics.h:182: WRTVRM(SPRATT + 102, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001984 3E 50            [ 7] 5770 	ld	a, #0x50
      001986 F5               [11] 5771 	push	af
      001987 33               [ 6] 5772 	inc	sp
      001988 21 66 1B         [10] 5773 	ld	hl, #0x1b66
      00198B E5               [11] 5774 	push	hl
      00198C CDr00r00         [17] 5775 	call	_WRTVRM
      00198F F1               [10] 5776 	pop	af
      001990 33               [ 6] 5777 	inc	sp
                                   5778 ;src\/Graphics\Graphics.h:183: WRTVRM(SPRATT + 103, 	nextPieceColor_Back);
      001991 3Ar9Cr00         [13] 5779 	ld	a,(#_nextPieceColor_Back + 0)
      001994 F5               [11] 5780 	push	af
      001995 33               [ 6] 5781 	inc	sp
      001996 21 67 1B         [10] 5782 	ld	hl, #0x1b67
      001999 E5               [11] 5783 	push	hl
      00199A CDr00r00         [17] 5784 	call	_WRTVRM
      00199D F1               [10] 5785 	pop	af
      00199E 33               [ 6] 5786 	inc	sp
                                   5787 ;src\/Graphics\Graphics.h:185: GetNextPieceColors(nextBottomPiece);
      00199F 3Ar95r00         [13] 5788 	ld	a,(#_nextBottomPiece + 0)
      0019A2 F5               [11] 5789 	push	af
      0019A3 33               [ 6] 5790 	inc	sp
      0019A4 CDr49r15         [17] 5791 	call	_GetNextPieceColors
      0019A7 33               [ 6] 5792 	inc	sp
                                   5793 ;src\/Graphics\Graphics.h:186: WRTVRM(SPRATT + 104, 	y + 16);
      0019A8 FD 21 01 00      [14] 5794 	ld	iy, #1
      0019AC FD 39            [15] 5795 	add	iy, sp
      0019AE FD 7E 00         [19] 5796 	ld	a, 0 (iy)
      0019B1 C6 10            [ 7] 5797 	add	a, #0x10
      0019B3 FD 77 00         [19] 5798 	ld	0 (iy), a
      0019B6 F5               [11] 5799 	push	af
      0019B7 33               [ 6] 5800 	inc	sp
      0019B8 21 68 1B         [10] 5801 	ld	hl, #0x1b68
      0019BB E5               [11] 5802 	push	hl
      0019BC CDr00r00         [17] 5803 	call	_WRTVRM
      0019BF F1               [10] 5804 	pop	af
      0019C0 33               [ 6] 5805 	inc	sp
                                   5806 ;src\/Graphics\Graphics.h:187: WRTVRM(SPRATT + 105, 	(4 * 8)-4);
      0019C1 3E 1C            [ 7] 5807 	ld	a, #0x1c
      0019C3 F5               [11] 5808 	push	af
      0019C4 33               [ 6] 5809 	inc	sp
      0019C5 21 69 1B         [10] 5810 	ld	hl, #0x1b69
      0019C8 E5               [11] 5811 	push	hl
      0019C9 CDr00r00         [17] 5812 	call	_WRTVRM
      0019CC F1               [10] 5813 	pop	af
      0019CD 33               [ 6] 5814 	inc	sp
                                   5815 ;src\/Graphics\Graphics.h:188: WRTVRM(SPRATT + 106, 	SPRITE_PATTERN_SMALL_BLOCK);
      0019CE 3E 4C            [ 7] 5816 	ld	a, #0x4c
      0019D0 F5               [11] 5817 	push	af
      0019D1 33               [ 6] 5818 	inc	sp
      0019D2 21 6A 1B         [10] 5819 	ld	hl, #0x1b6a
      0019D5 E5               [11] 5820 	push	hl
      0019D6 CDr00r00         [17] 5821 	call	_WRTVRM
      0019D9 F1               [10] 5822 	pop	af
      0019DA 33               [ 6] 5823 	inc	sp
                                   5824 ;src\/Graphics\Graphics.h:189: WRTVRM(SPRATT + 107, 	nextPieceColor_Front);
      0019DB 3Ar9Br00         [13] 5825 	ld	a,(#_nextPieceColor_Front + 0)
      0019DE F5               [11] 5826 	push	af
      0019DF 33               [ 6] 5827 	inc	sp
      0019E0 21 6B 1B         [10] 5828 	ld	hl, #0x1b6b
      0019E3 E5               [11] 5829 	push	hl
      0019E4 CDr00r00         [17] 5830 	call	_WRTVRM
      0019E7 F1               [10] 5831 	pop	af
      0019E8 33               [ 6] 5832 	inc	sp
                                   5833 ;src\/Graphics\Graphics.h:190: WRTVRM(SPRATT + 108, 	y + 16);
      0019E9 21 01 00         [10] 5834 	ld	hl, #1
      0019EC 39               [11] 5835 	add	hl, sp
      0019ED 7E               [ 7] 5836 	ld	a, (hl)
      0019EE F5               [11] 5837 	push	af
      0019EF 33               [ 6] 5838 	inc	sp
      0019F0 21 6C 1B         [10] 5839 	ld	hl, #0x1b6c
      0019F3 E5               [11] 5840 	push	hl
      0019F4 CDr00r00         [17] 5841 	call	_WRTVRM
      0019F7 F1               [10] 5842 	pop	af
      0019F8 33               [ 6] 5843 	inc	sp
                                   5844 ;src\/Graphics\Graphics.h:191: WRTVRM(SPRATT + 109, 	(4 * 8)-4);
      0019F9 3E 1C            [ 7] 5845 	ld	a, #0x1c
      0019FB F5               [11] 5846 	push	af
      0019FC 33               [ 6] 5847 	inc	sp
      0019FD 21 6D 1B         [10] 5848 	ld	hl, #0x1b6d
      001A00 E5               [11] 5849 	push	hl
      001A01 CDr00r00         [17] 5850 	call	_WRTVRM
      001A04 F1               [10] 5851 	pop	af
      001A05 33               [ 6] 5852 	inc	sp
                                   5853 ;src\/Graphics\Graphics.h:192: WRTVRM(SPRATT + 110, 	SPRITE_PATTERN_SMALL_BLOCK + 4);
      001A06 3E 50            [ 7] 5854 	ld	a, #0x50
      001A08 F5               [11] 5855 	push	af
      001A09 33               [ 6] 5856 	inc	sp
      001A0A 21 6E 1B         [10] 5857 	ld	hl, #0x1b6e
      001A0D E5               [11] 5858 	push	hl
      001A0E CDr00r00         [17] 5859 	call	_WRTVRM
      001A11 F1               [10] 5860 	pop	af
      001A12 33               [ 6] 5861 	inc	sp
                                   5862 ;src\/Graphics\Graphics.h:193: WRTVRM(SPRATT + 111, 	nextPieceColor_Back);
      001A13 3Ar9Cr00         [13] 5863 	ld	a,(#_nextPieceColor_Back + 0)
      001A16 F5               [11] 5864 	push	af
      001A17 33               [ 6] 5865 	inc	sp
      001A18 21 6F 1B         [10] 5866 	ld	hl, #0x1b6f
      001A1B E5               [11] 5867 	push	hl
      001A1C CDr00r00         [17] 5868 	call	_WRTVRM
      001A1F F1               [10] 5869 	pop	af
      001A20 33               [ 6] 5870 	inc	sp
                                   5871 ;src\/Graphics\Graphics.h:195: y--;
      001A21 FD 21 02 00      [14] 5872 	ld	iy, #2
      001A25 FD 39            [15] 5873 	add	iy, sp
      001A27 FD 35 00         [23] 5874 	dec	0 (iy)
      001A2A C3rE8r16         [10] 5875 	jp	00104$
      001A2D                       5876 00106$:
                                   5877 ;src\/Graphics\Graphics.h:199: WRTVRM(SPRATT + 64, 	192);
      001A2D 3E C0            [ 7] 5878 	ld	a, #0xc0
      001A2F F5               [11] 5879 	push	af
      001A30 33               [ 6] 5880 	inc	sp
      001A31 21 40 1B         [10] 5881 	ld	hl, #0x1b40
      001A34 E5               [11] 5882 	push	hl
      001A35 CDr00r00         [17] 5883 	call	_WRTVRM
      001A38 F1               [10] 5884 	pop	af
      001A39 33               [ 6] 5885 	inc	sp
                                   5886 ;src\/Graphics\Graphics.h:200: WRTVRM(SPRATT + 68, 	192);
      001A3A 3E C0            [ 7] 5887 	ld	a, #0xc0
      001A3C F5               [11] 5888 	push	af
      001A3D 33               [ 6] 5889 	inc	sp
      001A3E 21 44 1B         [10] 5890 	ld	hl, #0x1b44
      001A41 E5               [11] 5891 	push	hl
      001A42 CDr00r00         [17] 5892 	call	_WRTVRM
      001A45 F1               [10] 5893 	pop	af
      001A46 33               [ 6] 5894 	inc	sp
                                   5895 ;src\/Graphics\Graphics.h:201: WRTVRM(SPRATT + 72, 	192);
      001A47 3E C0            [ 7] 5896 	ld	a, #0xc0
      001A49 F5               [11] 5897 	push	af
      001A4A 33               [ 6] 5898 	inc	sp
      001A4B 21 48 1B         [10] 5899 	ld	hl, #0x1b48
      001A4E E5               [11] 5900 	push	hl
      001A4F CDr00r00         [17] 5901 	call	_WRTVRM
      001A52 F1               [10] 5902 	pop	af
      001A53 33               [ 6] 5903 	inc	sp
                                   5904 ;src\/Graphics\Graphics.h:202: WRTVRM(SPRATT + 76, 	192);
      001A54 3E C0            [ 7] 5905 	ld	a, #0xc0
      001A56 F5               [11] 5906 	push	af
      001A57 33               [ 6] 5907 	inc	sp
      001A58 21 4C 1B         [10] 5908 	ld	hl, #0x1b4c
      001A5B E5               [11] 5909 	push	hl
      001A5C CDr00r00         [17] 5910 	call	_WRTVRM
      001A5F F1               [10] 5911 	pop	af
      001A60 33               [ 6] 5912 	inc	sp
                                   5913 ;src\/Graphics\Graphics.h:203: WRTVRM(SPRATT + 80, 	192);
      001A61 3E C0            [ 7] 5914 	ld	a, #0xc0
      001A63 F5               [11] 5915 	push	af
      001A64 33               [ 6] 5916 	inc	sp
      001A65 21 50 1B         [10] 5917 	ld	hl, #0x1b50
      001A68 E5               [11] 5918 	push	hl
      001A69 CDr00r00         [17] 5919 	call	_WRTVRM
      001A6C F1               [10] 5920 	pop	af
      001A6D 33               [ 6] 5921 	inc	sp
                                   5922 ;src\/Graphics\Graphics.h:204: WRTVRM(SPRATT + 84, 	192);
      001A6E 3E C0            [ 7] 5923 	ld	a, #0xc0
      001A70 F5               [11] 5924 	push	af
      001A71 33               [ 6] 5925 	inc	sp
      001A72 21 54 1B         [10] 5926 	ld	hl, #0x1b54
      001A75 E5               [11] 5927 	push	hl
      001A76 CDr00r00         [17] 5928 	call	_WRTVRM
      001A79 F1               [10] 5929 	pop	af
      001A7A 33               [ 6] 5930 	inc	sp
                                   5931 ;src\/Graphics\Graphics.h:205: }
      001A7B F1               [10] 5932 	pop	af
      001A7C F1               [10] 5933 	pop	af
      001A7D C9               [10] 5934 	ret
                                   5935 ;src\/Graphics\Graphics.h:207: void DrawScore() {
                                   5936 ;	---------------------------------
                                   5937 ; Function DrawScore
                                   5938 ; ---------------------------------
      001A7E                       5939 _DrawScore::
      001A7E DD E5            [15] 5940 	push	ix
      001A80 DD 21 00 00      [14] 5941 	ld	ix,#0
      001A84 DD 39            [15] 5942 	add	ix,sp
      001A86 F5               [11] 5943 	push	af
                                   5944 ;src\/Graphics\Graphics.h:208: byte bgCounter = 0, bgColor;
      001A87 DD 36 FE 00      [19] 5945 	ld	-2 (ix), #0
                                   5946 ;src\/Graphics\Graphics.h:212: if(newLevel) {
      001A8B 3Ar07r00         [13] 5947 	ld	a,(#_newLevel + 0)
      001A8E B7               [ 4] 5948 	or	a, a
      001A8F CAr8Ar1B         [10] 5949 	jp	Z, 00119$
                                   5950 ;src\/Graphics\Graphics.h:213: for(byte i=0; i < 60; i++) {
      001A92 DD 36 FF 00      [19] 5951 	ld	-1 (ix), #0
      001A96                       5952 00121$:
      001A96 DD 7E FF         [19] 5953 	ld	a, -1 (ix)
      001A99 D6 3C            [ 7] 5954 	sub	a, #0x3c
      001A9B D2r8Ar1B         [10] 5955 	jp	NC, 00119$
                                   5956 ;src\/Graphics\Graphics.h:214: lastJiffy = JIFFY;
      001A9E ED 4B 9E FC      [20] 5957 	ld	bc, (_JIFFY)
                                   5958 ;src\/Graphics\Graphics.h:215: while(lastJiffy == JIFFY) { }
      001AA2                       5959 00101$:
      001AA2 2A 9E FC         [16] 5960 	ld	hl, (_JIFFY)
      001AA5 BF               [ 4] 5961 	cp	a, a
      001AA6 ED 42            [15] 5962 	sbc	hl, bc
      001AA8 28 F8            [12] 5963 	jr	Z, 00101$
                                   5964 ;src\/Graphics\Graphics.h:217: DrawExplosionSprite(26 * 8, 10 * 8, i);
      001AAA DD 56 FF         [19] 5965 	ld	d, -1 (ix)
      001AAD 1E 50            [ 7] 5966 	ld	e,#0x50
      001AAF D5               [11] 5967 	push	de
      001AB0 3E D0            [ 7] 5968 	ld	a, #0xd0
      001AB2 F5               [11] 5969 	push	af
      001AB3 33               [ 6] 5970 	inc	sp
      001AB4 CDrDFr0E         [17] 5971 	call	_DrawExplosionSprite
      001AB7 F1               [10] 5972 	pop	af
      001AB8 33               [ 6] 5973 	inc	sp
                                   5974 ;src\/Graphics\Graphics.h:219: if(JIFFY & 0b00000110) {
      001AB9 2A 9E FC         [16] 5975 	ld	hl, (_JIFFY)
      001ABC 7D               [ 4] 5976 	ld	a, l
      001ABD E6 06            [ 7] 5977 	and	a, #0x06
      001ABF CAr6Ar1B         [10] 5978 	jp	Z,00115$
                                   5979 ;src\/Graphics\Graphics.h:221: DrawString(" LEVEL", 26, 10);
      001AC2 11 1A 0A         [10] 5980 	ld	de, #0x0a1a
      001AC5 D5               [11] 5981 	push	de
      001AC6 21r0Cr1C         [10] 5982 	ld	hl, #___str_1
      001AC9 E5               [11] 5983 	push	hl
      001ACA CDrBBr12         [17] 5984 	call	_DrawString
      001ACD F1               [10] 5985 	pop	af
      001ACE F1               [10] 5986 	pop	af
                                   5987 ;src\/Graphics\Graphics.h:222: DrawNumber(level, 26, 11);
      001ACF 3Ar06r00         [13] 5988 	ld	a, (#_level + 0)
      001AD2 4F               [ 4] 5989 	ld	c, a
      001AD3 06 00            [ 7] 5990 	ld	b, #0x00
      001AD5 11 1A 0B         [10] 5991 	ld	de, #0x0b1a
      001AD8 D5               [11] 5992 	push	de
      001AD9 C5               [11] 5993 	push	bc
      001ADA CDrEDr12         [17] 5994 	call	_DrawNumber
      001ADD F1               [10] 5995 	pop	af
      001ADE F1               [10] 5996 	pop	af
                                   5997 ;src\/Graphics\Graphics.h:228: switch(bgCounter++) {
      001ADF DD 4E FE         [19] 5998 	ld	c, -2 (ix)
      001AE2 DD 34 FE         [23] 5999 	inc	-2 (ix)
      001AE5 3E 07            [ 7] 6000 	ld	a, #0x07
      001AE7 91               [ 4] 6001 	sub	a, c
      001AE8 38 45            [12] 6002 	jr	C, 00112$
      001AEA 06 00            [ 7] 6003 	ld	b, #0x00
      001AEC 21rF3r1A         [10] 6004 	ld	hl, #00163$
      001AEF 09               [11] 6005 	add	hl, bc
      001AF0 09               [11] 6006 	add	hl, bc
      001AF1 09               [11] 6007 	add	hl, bc
      001AF2 E9               [ 4] 6008 	jp	(hl)
      001AF3                       6009 00163$:
      001AF3 C3r0Br1B         [10] 6010 	jp	00104$
      001AF6 C3r0Fr1B         [10] 6011 	jp	00105$
      001AF9 C3r13r1B         [10] 6012 	jp	00106$
      001AFC C3r17r1B         [10] 6013 	jp	00107$
      001AFF C3r1Br1B         [10] 6014 	jp	00108$
      001B02 C3r1Fr1B         [10] 6015 	jp	00109$
      001B05 C3r23r1B         [10] 6016 	jp	00110$
      001B08 C3r27r1B         [10] 6017 	jp	00111$
                                   6018 ;src\/Graphics\Graphics.h:229: case 0:
      001B0B                       6019 00104$:
                                   6020 ;src\/Graphics\Graphics.h:230: bgColor = 0x14;
      001B0B 0E 14            [ 7] 6021 	ld	c, #0x14
                                   6022 ;src\/Graphics\Graphics.h:231: break;
      001B0D 18 22            [12] 6023 	jr	00113$
                                   6024 ;src\/Graphics\Graphics.h:232: case 1:
      001B0F                       6025 00105$:
                                   6026 ;src\/Graphics\Graphics.h:233: bgColor = 0x15;
      001B0F 0E 15            [ 7] 6027 	ld	c, #0x15
                                   6028 ;src\/Graphics\Graphics.h:234: break;
      001B11 18 1E            [12] 6029 	jr	00113$
                                   6030 ;src\/Graphics\Graphics.h:235: case 2:
      001B13                       6031 00106$:
                                   6032 ;src\/Graphics\Graphics.h:236: bgColor = 0x17;
      001B13 0E 17            [ 7] 6033 	ld	c, #0x17
                                   6034 ;src\/Graphics\Graphics.h:237: break;
      001B15 18 1A            [12] 6035 	jr	00113$
                                   6036 ;src\/Graphics\Graphics.h:238: case 3:
      001B17                       6037 00107$:
                                   6038 ;src\/Graphics\Graphics.h:239: bgColor = 0x1e;
      001B17 0E 1E            [ 7] 6039 	ld	c, #0x1e
                                   6040 ;src\/Graphics\Graphics.h:240: break;
      001B19 18 16            [12] 6041 	jr	00113$
                                   6042 ;src\/Graphics\Graphics.h:241: case 4:
      001B1B                       6043 00108$:
                                   6044 ;src\/Graphics\Graphics.h:242: bgColor = 0x1f;
      001B1B 0E 1F            [ 7] 6045 	ld	c, #0x1f
                                   6046 ;src\/Graphics\Graphics.h:243: break;
      001B1D 18 12            [12] 6047 	jr	00113$
                                   6048 ;src\/Graphics\Graphics.h:244: case 5:
      001B1F                       6049 00109$:
                                   6050 ;src\/Graphics\Graphics.h:245: bgColor = 0x1e;
      001B1F 0E 1E            [ 7] 6051 	ld	c, #0x1e
                                   6052 ;src\/Graphics\Graphics.h:246: break;
      001B21 18 0E            [12] 6053 	jr	00113$
                                   6054 ;src\/Graphics\Graphics.h:247: case 6:
      001B23                       6055 00110$:
                                   6056 ;src\/Graphics\Graphics.h:248: bgColor = 0x17;
      001B23 0E 17            [ 7] 6057 	ld	c, #0x17
                                   6058 ;src\/Graphics\Graphics.h:249: break;
      001B25 18 0A            [12] 6059 	jr	00113$
                                   6060 ;src\/Graphics\Graphics.h:250: case 7:
      001B27                       6061 00111$:
                                   6062 ;src\/Graphics\Graphics.h:251: bgColor = 0x15;
      001B27 0E 15            [ 7] 6063 	ld	c, #0x15
                                   6064 ;src\/Graphics\Graphics.h:252: bgCounter = 0;
      001B29 DD 36 FE 00      [19] 6065 	ld	-2 (ix), #0
                                   6066 ;src\/Graphics\Graphics.h:253: break;
      001B2D 18 02            [12] 6067 	jr	00113$
                                   6068 ;src\/Graphics\Graphics.h:254: default:
      001B2F                       6069 00112$:
                                   6070 ;src\/Graphics\Graphics.h:255: bgColor = 0x11;
      001B2F 0E 11            [ 7] 6071 	ld	c, #0x11
                                   6072 ;src\/Graphics\Graphics.h:257: }
      001B31                       6073 00113$:
                                   6074 ;src\/Graphics\Graphics.h:258: FILVRM(CLRTBL, 8 * 4, bgColor);
      001B31 C5               [11] 6075 	push	bc
      001B32 79               [ 4] 6076 	ld	a, c
      001B33 F5               [11] 6077 	push	af
      001B34 33               [ 6] 6078 	inc	sp
      001B35 21 20 00         [10] 6079 	ld	hl, #0x0020
      001B38 E5               [11] 6080 	push	hl
      001B39 21 00 20         [10] 6081 	ld	hl, #0x2000
      001B3C E5               [11] 6082 	push	hl
      001B3D CDr00r00         [17] 6083 	call	_FILVRM
      001B40 F1               [10] 6084 	pop	af
      001B41 F1               [10] 6085 	pop	af
      001B42 33               [ 6] 6086 	inc	sp
      001B43 C1               [10] 6087 	pop	bc
                                   6088 ;src\/Graphics\Graphics.h:259: FILVRM(CLRTBL + (256 * 8), 8 * 4, bgColor);
      001B44 C5               [11] 6089 	push	bc
      001B45 79               [ 4] 6090 	ld	a, c
      001B46 F5               [11] 6091 	push	af
      001B47 33               [ 6] 6092 	inc	sp
      001B48 21 20 00         [10] 6093 	ld	hl, #0x0020
      001B4B E5               [11] 6094 	push	hl
      001B4C 21 00 28         [10] 6095 	ld	hl, #0x2800
      001B4F E5               [11] 6096 	push	hl
      001B50 CDr00r00         [17] 6097 	call	_FILVRM
      001B53 F1               [10] 6098 	pop	af
      001B54 F1               [10] 6099 	pop	af
      001B55 33               [ 6] 6100 	inc	sp
      001B56 C1               [10] 6101 	pop	bc
                                   6102 ;src\/Graphics\Graphics.h:260: FILVRM(CLRTBL + (512 * 8), 8 * 4, bgColor);
      001B57 79               [ 4] 6103 	ld	a, c
      001B58 F5               [11] 6104 	push	af
      001B59 33               [ 6] 6105 	inc	sp
      001B5A 21 20 00         [10] 6106 	ld	hl, #0x0020
      001B5D E5               [11] 6107 	push	hl
      001B5E 21 00 30         [10] 6108 	ld	hl, #0x3000
      001B61 E5               [11] 6109 	push	hl
      001B62 CDr00r00         [17] 6110 	call	_FILVRM
      001B65 F1               [10] 6111 	pop	af
      001B66 F1               [10] 6112 	pop	af
      001B67 33               [ 6] 6113 	inc	sp
      001B68 18 1A            [12] 6114 	jr	00122$
      001B6A                       6115 00115$:
                                   6116 ;src\/Graphics\Graphics.h:265: DrawString("      ", 26, 10);
      001B6A 11 1A 0A         [10] 6117 	ld	de, #0x0a1a
      001B6D D5               [11] 6118 	push	de
      001B6E 21r13r1C         [10] 6119 	ld	hl, #___str_2
      001B71 E5               [11] 6120 	push	hl
      001B72 CDrBBr12         [17] 6121 	call	_DrawString
      001B75 F1               [10] 6122 	pop	af
      001B76 F1               [10] 6123 	pop	af
                                   6124 ;src\/Graphics\Graphics.h:266: DrawString("      ", 26, 11);
      001B77 11 1A 0B         [10] 6125 	ld	de, #0x0b1a
      001B7A D5               [11] 6126 	push	de
      001B7B 21r13r1C         [10] 6127 	ld	hl, #___str_2
      001B7E E5               [11] 6128 	push	hl
      001B7F CDrBBr12         [17] 6129 	call	_DrawString
      001B82 F1               [10] 6130 	pop	af
      001B83 F1               [10] 6131 	pop	af
      001B84                       6132 00122$:
                                   6133 ;src\/Graphics\Graphics.h:213: for(byte i=0; i < 60; i++) {
      001B84 DD 34 FF         [23] 6134 	inc	-1 (ix)
      001B87 C3r96r1A         [10] 6135 	jp	00121$
      001B8A                       6136 00119$:
                                   6137 ;src\/Graphics\Graphics.h:272: newLevel = FALSE;
      001B8A 21r07r00         [10] 6138 	ld	hl, #_newLevel
      001B8D 36 00            [10] 6139 	ld	(hl), #0x00
                                   6140 ;src\/Graphics\Graphics.h:275: FILVRM(CLRTBL, 8 * 4, 0x14);
      001B8F 3E 14            [ 7] 6141 	ld	a, #0x14
      001B91 F5               [11] 6142 	push	af
      001B92 33               [ 6] 6143 	inc	sp
      001B93 21 20 00         [10] 6144 	ld	hl, #0x0020
      001B96 E5               [11] 6145 	push	hl
      001B97 21 00 20         [10] 6146 	ld	hl, #0x2000
      001B9A E5               [11] 6147 	push	hl
      001B9B CDr00r00         [17] 6148 	call	_FILVRM
      001B9E F1               [10] 6149 	pop	af
      001B9F F1               [10] 6150 	pop	af
      001BA0 33               [ 6] 6151 	inc	sp
                                   6152 ;src\/Graphics\Graphics.h:276: FILVRM(CLRTBL + (256 * 8), 8 * 4, 0x14);
      001BA1 3E 14            [ 7] 6153 	ld	a, #0x14
      001BA3 F5               [11] 6154 	push	af
      001BA4 33               [ 6] 6155 	inc	sp
      001BA5 21 20 00         [10] 6156 	ld	hl, #0x0020
      001BA8 E5               [11] 6157 	push	hl
      001BA9 21 00 28         [10] 6158 	ld	hl, #0x2800
      001BAC E5               [11] 6159 	push	hl
      001BAD CDr00r00         [17] 6160 	call	_FILVRM
      001BB0 F1               [10] 6161 	pop	af
      001BB1 F1               [10] 6162 	pop	af
      001BB2 33               [ 6] 6163 	inc	sp
                                   6164 ;src\/Graphics\Graphics.h:277: FILVRM(CLRTBL + (512 * 8), 8 * 4, 0x14);
      001BB3 3E 14            [ 7] 6165 	ld	a, #0x14
      001BB5 F5               [11] 6166 	push	af
      001BB6 33               [ 6] 6167 	inc	sp
      001BB7 21 20 00         [10] 6168 	ld	hl, #0x0020
      001BBA E5               [11] 6169 	push	hl
      001BBB 21 00 30         [10] 6170 	ld	hl, #0x3000
      001BBE E5               [11] 6171 	push	hl
      001BBF CDr00r00         [17] 6172 	call	_FILVRM
      001BC2 F1               [10] 6173 	pop	af
      001BC3 F1               [10] 6174 	pop	af
      001BC4 33               [ 6] 6175 	inc	sp
                                   6176 ;src\/Graphics\Graphics.h:279: DrawString("NEXT", 2, 1);
      001BC5 11 02 01         [10] 6177 	ld	de, #0x0102
      001BC8 D5               [11] 6178 	push	de
      001BC9 21r1Ar1C         [10] 6179 	ld	hl, #___str_3
      001BCC E5               [11] 6180 	push	hl
      001BCD CDrBBr12         [17] 6181 	call	_DrawString
      001BD0 F1               [10] 6182 	pop	af
      001BD1 F1               [10] 6183 	pop	af
                                   6184 ;src\/Graphics\Graphics.h:281: DrawString(" LEVEL", 26, 10);
      001BD2 11 1A 0A         [10] 6185 	ld	de, #0x0a1a
      001BD5 D5               [11] 6186 	push	de
      001BD6 21r0Cr1C         [10] 6187 	ld	hl, #___str_1
      001BD9 E5               [11] 6188 	push	hl
      001BDA CDrBBr12         [17] 6189 	call	_DrawString
      001BDD F1               [10] 6190 	pop	af
      001BDE F1               [10] 6191 	pop	af
                                   6192 ;src\/Graphics\Graphics.h:282: DrawString("BLOCKS", 26, 18);
      001BDF 11 1A 12         [10] 6193 	ld	de, #0x121a
      001BE2 D5               [11] 6194 	push	de
      001BE3 21r1Fr1C         [10] 6195 	ld	hl, #___str_4
      001BE6 E5               [11] 6196 	push	hl
      001BE7 CDrBBr12         [17] 6197 	call	_DrawString
      001BEA F1               [10] 6198 	pop	af
      001BEB F1               [10] 6199 	pop	af
                                   6200 ;src\/Graphics\Graphics.h:285: DrawNumber(level, 26, 11);
      001BEC 3Ar06r00         [13] 6201 	ld	a, (#_level + 0)
      001BEF 4F               [ 4] 6202 	ld	c, a
      001BF0 06 00            [ 7] 6203 	ld	b, #0x00
      001BF2 11 1A 0B         [10] 6204 	ld	de, #0x0b1a
      001BF5 D5               [11] 6205 	push	de
      001BF6 C5               [11] 6206 	push	bc
      001BF7 CDrEDr12         [17] 6207 	call	_DrawNumber
      001BFA F1               [10] 6208 	pop	af
      001BFB F1               [10] 6209 	pop	af
                                   6210 ;src\/Graphics\Graphics.h:286: DrawNumber(blocksRemoved, 26, 19);
      001BFC 11 1A 13         [10] 6211 	ld	de, #0x131a
      001BFF D5               [11] 6212 	push	de
      001C00 2Ar04r00         [16] 6213 	ld	hl, (_blocksRemoved)
      001C03 E5               [11] 6214 	push	hl
      001C04 CDrEDr12         [17] 6215 	call	_DrawNumber
                                   6216 ;src\/Graphics\Graphics.h:289: }
      001C07 DD F9            [10] 6217 	ld	sp,ix
      001C09 DD E1            [14] 6218 	pop	ix
      001C0B C9               [10] 6219 	ret
      001C0C                       6220 ___str_1:
      001C0C 20 4C 45 56 45 4C     6221 	.ascii " LEVEL"
      001C12 00                    6222 	.db 0x00
      001C13                       6223 ___str_2:
      001C13 20 20 20 20 20 20     6224 	.ascii "      "
      001C19 00                    6225 	.db 0x00
      001C1A                       6226 ___str_3:
      001C1A 4E 45 58 54           6227 	.ascii "NEXT"
      001C1E 00                    6228 	.db 0x00
      001C1F                       6229 ___str_4:
      001C1F 42 4C 4F 43 4B 53     6230 	.ascii "BLOCKS"
      001C25 00                    6231 	.db 0x00
                                   6232 ;src\/Graphics\Graphics.h:291: void DrawBackground() {
                                   6233 ;	---------------------------------
                                   6234 ; Function DrawBackground
                                   6235 ; ---------------------------------
      001C26                       6236 _DrawBackground::
                                   6237 ;src\/Graphics\Graphics.h:293: for(int i = 0; i < 256 * 3; i++) {
      001C26 01 00 00         [10] 6238 	ld	bc, #0x0000
      001C29                       6239 00103$:
      001C29 78               [ 4] 6240 	ld	a, b
      001C2A EE 80            [ 7] 6241 	xor	a, #0x80
      001C2C D6 83            [ 7] 6242 	sub	a, #0x83
      001C2E 30 12            [12] 6243 	jr	NC, 00101$
                                   6244 ;src\/Graphics\Graphics.h:294: WRTVRM(NAMTBL + i, EMPTY); // test
      001C30 21 00 18         [10] 6245 	ld	hl, #0x1800
      001C33 09               [11] 6246 	add	hl, bc
      001C34 C5               [11] 6247 	push	bc
      001C35 AF               [ 4] 6248 	xor	a, a
      001C36 F5               [11] 6249 	push	af
      001C37 33               [ 6] 6250 	inc	sp
      001C38 E5               [11] 6251 	push	hl
      001C39 CDr00r00         [17] 6252 	call	_WRTVRM
      001C3C F1               [10] 6253 	pop	af
      001C3D 33               [ 6] 6254 	inc	sp
      001C3E C1               [10] 6255 	pop	bc
                                   6256 ;src\/Graphics\Graphics.h:293: for(int i = 0; i < 256 * 3; i++) {
      001C3F 03               [ 6] 6257 	inc	bc
      001C40 18 E7            [12] 6258 	jr	00103$
      001C42                       6259 00101$:
                                   6260 ;src\/Graphics\Graphics.h:297: DrawColumn(7);
      001C42 3E 07            [ 7] 6261 	ld	a, #0x07
      001C44 F5               [11] 6262 	push	af
      001C45 33               [ 6] 6263 	inc	sp
      001C46 CDrA8r13         [17] 6264 	call	_DrawColumn
      001C49 33               [ 6] 6265 	inc	sp
                                   6266 ;src\/Graphics\Graphics.h:298: DrawColumn(22);
      001C4A 3E 16            [ 7] 6267 	ld	a, #0x16
      001C4C F5               [11] 6268 	push	af
      001C4D 33               [ 6] 6269 	inc	sp
      001C4E CDrA8r13         [17] 6270 	call	_DrawColumn
      001C51 33               [ 6] 6271 	inc	sp
                                   6272 ;src\/Graphics\Graphics.h:300: DrawScore();
                                   6273 ;src\/Graphics\Graphics.h:336: }
      001C52 C3r7Er1A         [10] 6274 	jp	_DrawScore
                                   6275 ;src\/Graphics\Graphics.h:338: void InitVRAM() {
                                   6276 ;	---------------------------------
                                   6277 ; Function InitVRAM
                                   6278 ; ---------------------------------
      001C55                       6279 _InitVRAM::
      001C55 DD E5            [15] 6280 	push	ix
      001C57 DD 21 00 00      [14] 6281 	ld	ix,#0
      001C5B DD 39            [15] 6282 	add	ix,sp
      001C5D 3B               [ 6] 6283 	dec	sp
                                   6284 ;src\/Graphics\Graphics.h:343: CLIKSW = 0;	// disable keyboard sound
      001C5E 21 00 00         [10] 6285 	ld	hl, #0x0000
      001C61 22 DB F3         [16] 6286 	ld	(_CLIKSW), hl
                                   6287 ;src\/Graphics\Graphics.h:344: SCNCNT = 1; 	// set keyboard scan counter
      001C64 21 F6 F3         [10] 6288 	ld	hl, #_SCNCNT
      001C67 36 01            [10] 6289 	ld	(hl), #0x01
                                   6290 ;src\/Graphics\Graphics.h:346: FORCLR = COLOR_WHITE;
      001C69 21 E9 F3         [10] 6291 	ld	hl, #_FORCLR
      001C6C 36 0F            [10] 6292 	ld	(hl), #0x0f
                                   6293 ;src\/Graphics\Graphics.h:347: BAKCLR = COLOR_BLACK;
      001C6E 21 EA F3         [10] 6294 	ld	hl, #_BAKCLR
      001C71 36 01            [10] 6295 	ld	(hl), #0x01
                                   6296 ;src\/Graphics\Graphics.h:348: BDRCLR = COLOR_BLACK;
      001C73 21 EB F3         [10] 6297 	ld	hl, #_BDRCLR
      001C76 36 01            [10] 6298 	ld	(hl), #0x01
                                   6299 ;src\/Graphics\Graphics.h:376: WRTVDP(0b0000000111100010);
      001C78 21 E2 01         [10] 6300 	ld	hl, #0x01e2
      001C7B CDr00r00         [17] 6301 	call	_WRTVDP
                                   6302 ;src\/Graphics\Graphics.h:378: INIGRP();	// Set screen 2
      001C7E CDr00r00         [17] 6303 	call	_INIGRP
                                   6304 ;src\/Graphics\Graphics.h:380: DISSCR();	// Disable screen (faster to write)
      001C81 CDr00r00         [17] 6305 	call	_DISSCR
                                   6306 ;src\/Graphics\Graphics.h:384: FILVRM(0x0000, 0x4000, 0x00); //void FILVRM(uint16_t start, uint16_t len, uint8_t data);
      001C84 AF               [ 4] 6307 	xor	a, a
      001C85 F5               [11] 6308 	push	af
      001C86 33               [ 6] 6309 	inc	sp
      001C87 21 00 40         [10] 6310 	ld	hl, #0x4000
      001C8A E5               [11] 6311 	push	hl
      001C8B 65               [ 4] 6312 	ld	h, l
      001C8C E5               [11] 6313 	push	hl
      001C8D CDr00r00         [17] 6314 	call	_FILVRM
      001C90 F1               [10] 6315 	pop	af
                                   6316 ;src\/Graphics\Graphics.h:393: LDIRVM(SPRPAT, sprite_arrow_0, NUMBER_OF_SPRITES * 32);
      001C91 33               [ 6] 6317 	inc	sp
      001C92 21 A0 04         [10] 6318 	ld	hl,#0x04a0
      001C95 E3               [19] 6319 	ex	(sp),hl
      001C96 21rA8r07         [10] 6320 	ld	hl, #_sprite_arrow_0
      001C99 E5               [11] 6321 	push	hl
      001C9A 21 00 38         [10] 6322 	ld	hl, #0x3800
      001C9D E5               [11] 6323 	push	hl
      001C9E CDr00r00         [17] 6324 	call	_LDIRVM
      001CA1 21 06 00         [10] 6325 	ld	hl, #6
      001CA4 39               [11] 6326 	add	hl, sp
      001CA5 F9               [ 6] 6327 	ld	sp, hl
                                   6328 ;src\/Graphics\Graphics.h:399: for(byte i=0; i<32; i++) {
      001CA6 0E 00            [ 7] 6329 	ld	c, #0x00
      001CA8                       6330 00110$:
                                   6331 ;src\/Graphics\Graphics.h:400: WRTVRM(SPRATT + (i * 4), 	192);
      001CA8 79               [ 4] 6332 	ld	a,c
      001CA9 FE 20            [ 7] 6333 	cp	a,#0x20
      001CAB 30 18            [12] 6334 	jr	NC, 00101$
      001CAD 26 00            [ 7] 6335 	ld	h, #0x00
      001CAF 6F               [ 4] 6336 	ld	l, a
      001CB0 29               [11] 6337 	add	hl, hl
      001CB1 29               [11] 6338 	add	hl, hl
      001CB2 7C               [ 4] 6339 	ld	a, h
      001CB3 C6 1B            [ 7] 6340 	add	a, #0x1b
      001CB5 67               [ 4] 6341 	ld	h, a
      001CB6 C5               [11] 6342 	push	bc
      001CB7 3E C0            [ 7] 6343 	ld	a, #0xc0
      001CB9 F5               [11] 6344 	push	af
      001CBA 33               [ 6] 6345 	inc	sp
      001CBB E5               [11] 6346 	push	hl
      001CBC CDr00r00         [17] 6347 	call	_WRTVRM
      001CBF F1               [10] 6348 	pop	af
      001CC0 33               [ 6] 6349 	inc	sp
      001CC1 C1               [10] 6350 	pop	bc
                                   6351 ;src\/Graphics\Graphics.h:399: for(byte i=0; i<32; i++) {
      001CC2 0C               [ 4] 6352 	inc	c
      001CC3 18 E3            [12] 6353 	jr	00110$
      001CC5                       6354 00101$:
                                   6355 ;src\/Graphics\Graphics.h:409: LDIRVM(PATTBL, pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CC5 21 78 01         [10] 6356 	ld	hl, #0x0178
      001CC8 E5               [11] 6357 	push	hl
      001CC9 21r78r04         [10] 6358 	ld	hl, #_pattern_black_0
      001CCC E5               [11] 6359 	push	hl
      001CCD 21 00 00         [10] 6360 	ld	hl, #0x0000
      001CD0 E5               [11] 6361 	push	hl
      001CD1 CDr00r00         [17] 6362 	call	_LDIRVM
      001CD4 21 06 00         [10] 6363 	ld	hl, #6
      001CD7 39               [11] 6364 	add	hl, sp
      001CD8 F9               [ 6] 6365 	ld	sp, hl
                                   6366 ;src\/Graphics\Graphics.h:412: LDIRVM(PATTBL + (256 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CD9 21 78 01         [10] 6367 	ld	hl, #0x0178
      001CDC E5               [11] 6368 	push	hl
      001CDD 21r78r04         [10] 6369 	ld	hl, #_pattern_black_0
      001CE0 E5               [11] 6370 	push	hl
      001CE1 21 00 08         [10] 6371 	ld	hl, #0x0800
      001CE4 E5               [11] 6372 	push	hl
      001CE5 CDr00r00         [17] 6373 	call	_LDIRVM
      001CE8 21 06 00         [10] 6374 	ld	hl, #6
      001CEB 39               [11] 6375 	add	hl, sp
      001CEC F9               [ 6] 6376 	ld	sp, hl
                                   6377 ;src\/Graphics\Graphics.h:415: LDIRVM(PATTBL + (512 * 8), pattern_black_0, NUMBER_OF_PATTERNS * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001CED 21 78 01         [10] 6378 	ld	hl, #0x0178
      001CF0 E5               [11] 6379 	push	hl
      001CF1 21r78r04         [10] 6380 	ld	hl, #_pattern_black_0
      001CF4 E5               [11] 6381 	push	hl
      001CF5 21 00 10         [10] 6382 	ld	hl, #0x1000
      001CF8 E5               [11] 6383 	push	hl
      001CF9 CDr00r00         [17] 6384 	call	_LDIRVM
      001CFC 21 06 00         [10] 6385 	ld	hl, #6
      001CFF 39               [11] 6386 	add	hl, sp
      001D00 F9               [ 6] 6387 	ld	sp, hl
                                   6388 ;src\/Graphics\Graphics.h:418: LDIRVM(PATTBL + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D01 21 00 03         [10] 6389 	ld	hl, #0x0300
      001D04 E5               [11] 6390 	push	hl
      001D05 21r78r01         [10] 6391 	ld	hl, #_FONT
      001D08 E5               [11] 6392 	push	hl
      001D09 21 78 01         [10] 6393 	ld	hl, #0x0178
      001D0C E5               [11] 6394 	push	hl
      001D0D CDr00r00         [17] 6395 	call	_LDIRVM
      001D10 21 06 00         [10] 6396 	ld	hl, #6
      001D13 39               [11] 6397 	add	hl, sp
      001D14 F9               [ 6] 6398 	ld	sp, hl
                                   6399 ;src\/Graphics\Graphics.h:421: LDIRVM(PATTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D15 21 00 03         [10] 6400 	ld	hl, #0x0300
      001D18 E5               [11] 6401 	push	hl
      001D19 21r78r01         [10] 6402 	ld	hl, #_FONT
      001D1C E5               [11] 6403 	push	hl
      001D1D 21 78 09         [10] 6404 	ld	hl, #0x0978
      001D20 E5               [11] 6405 	push	hl
      001D21 CDr00r00         [17] 6406 	call	_LDIRVM
      001D24 21 06 00         [10] 6407 	ld	hl, #6
      001D27 39               [11] 6408 	add	hl, sp
      001D28 F9               [ 6] 6409 	ld	sp, hl
                                   6410 ;src\/Graphics\Graphics.h:424: LDIRVM(PATTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8), FONT, (HICHAR-LOCHAR+1) * 8);	//void LDIRVM(uint16_t vdest, const uint8_t* msrc, uint16_t count);
      001D29 21 00 03         [10] 6411 	ld	hl, #0x0300
      001D2C E5               [11] 6412 	push	hl
      001D2D 21r78r01         [10] 6413 	ld	hl, #_FONT
      001D30 E5               [11] 6414 	push	hl
      001D31 21 78 11         [10] 6415 	ld	hl, #0x1178
      001D34 E5               [11] 6416 	push	hl
      001D35 CDr00r00         [17] 6417 	call	_LDIRVM
      001D38 21 06 00         [10] 6418 	ld	hl, #6
      001D3B 39               [11] 6419 	add	hl, sp
      001D3C F9               [ 6] 6420 	ld	sp, hl
                                   6421 ;src\/Graphics\Graphics.h:428: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001D3D 0E 00            [ 7] 6422 	ld	c, #0x00
      001D3F                       6423 00113$:
                                   6424 ;src\/Graphics\Graphics.h:429: LDIRVM(PATTBL + (TITLE_1 * 8) + (i * 8), pattern_title, NUMBER_OF_TITLE_BLOCKS * 8);
      001D3F 79               [ 4] 6425 	ld	a,c
      001D40 FE 07            [ 7] 6426 	cp	a,#0x07
      001D42 30 20            [12] 6427 	jr	NC, 00102$
      001D44 26 00            [ 7] 6428 	ld	h, #0x00
      001D46 6F               [ 4] 6429 	ld	l, a
      001D47 29               [11] 6430 	add	hl, hl
      001D48 29               [11] 6431 	add	hl, hl
      001D49 29               [11] 6432 	add	hl, hl
      001D4A 11 70 04         [10] 6433 	ld	de, #0x0470
      001D4D 19               [11] 6434 	add	hl, de
      001D4E C5               [11] 6435 	push	bc
      001D4F 11 38 00         [10] 6436 	ld	de, #0x0038
      001D52 D5               [11] 6437 	push	de
      001D53 11rE8r05         [10] 6438 	ld	de, #_pattern_title
      001D56 D5               [11] 6439 	push	de
      001D57 E5               [11] 6440 	push	hl
      001D58 CDr00r00         [17] 6441 	call	_LDIRVM
      001D5B 21 06 00         [10] 6442 	ld	hl, #6
      001D5E 39               [11] 6443 	add	hl, sp
      001D5F F9               [ 6] 6444 	ld	sp, hl
      001D60 C1               [10] 6445 	pop	bc
                                   6446 ;src\/Graphics\Graphics.h:428: for(byte i=0; i < NUMBER_OF_TITLE_BLOCKS; i++) {
      001D61 0C               [ 4] 6447 	inc	c
      001D62 18 DB            [12] 6448 	jr	00113$
      001D64                       6449 00102$:
                                   6450 ;src\/Graphics\Graphics.h:435: LDIRVM(CLRTBL, color_black_0, NUMBER_OF_PATTERNS * 8);
      001D64 21 78 01         [10] 6451 	ld	hl, #0x0178
      001D67 E5               [11] 6452 	push	hl
      001D68 21rF0r05         [10] 6453 	ld	hl, #_color_black_0
      001D6B E5               [11] 6454 	push	hl
      001D6C 21 00 20         [10] 6455 	ld	hl, #0x2000
      001D6F E5               [11] 6456 	push	hl
      001D70 CDr00r00         [17] 6457 	call	_LDIRVM
      001D73 21 06 00         [10] 6458 	ld	hl, #6
      001D76 39               [11] 6459 	add	hl, sp
      001D77 F9               [ 6] 6460 	ld	sp, hl
                                   6461 ;src\/Graphics\Graphics.h:437: LDIRVM(CLRTBL + (256 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001D78 21 78 01         [10] 6462 	ld	hl, #0x0178
      001D7B E5               [11] 6463 	push	hl
      001D7C 21rF0r05         [10] 6464 	ld	hl, #_color_black_0
      001D7F E5               [11] 6465 	push	hl
      001D80 21 00 28         [10] 6466 	ld	hl, #0x2800
      001D83 E5               [11] 6467 	push	hl
      001D84 CDr00r00         [17] 6468 	call	_LDIRVM
      001D87 21 06 00         [10] 6469 	ld	hl, #6
      001D8A 39               [11] 6470 	add	hl, sp
      001D8B F9               [ 6] 6471 	ld	sp, hl
                                   6472 ;src\/Graphics\Graphics.h:439: LDIRVM(CLRTBL + (512 * 8), color_black_0, NUMBER_OF_PATTERNS * 8);
      001D8C 21 78 01         [10] 6473 	ld	hl, #0x0178
      001D8F E5               [11] 6474 	push	hl
      001D90 21rF0r05         [10] 6475 	ld	hl, #_color_black_0
      001D93 E5               [11] 6476 	push	hl
      001D94 21 00 30         [10] 6477 	ld	hl, #0x3000
      001D97 E5               [11] 6478 	push	hl
      001D98 CDr00r00         [17] 6479 	call	_LDIRVM
      001D9B 21 06 00         [10] 6480 	ld	hl, #6
      001D9E 39               [11] 6481 	add	hl, sp
      001D9F F9               [ 6] 6482 	ld	sp, hl
                                   6483 ;src\/Graphics\Graphics.h:446: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DA0 0E 00            [ 7] 6484 	ld	c, #0x00
      001DA2                       6485 00116$:
                                   6486 ;src\/Graphics\Graphics.h:447: LDIRVM(CLRTBL + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001DA2 79               [ 4] 6487 	ld	a,c
      001DA3 FE 60            [ 7] 6488 	cp	a,#0x60
      001DA5 30 20            [12] 6489 	jr	NC, 00103$
      001DA7 26 00            [ 7] 6490 	ld	h, #0x00
      001DA9 6F               [ 4] 6491 	ld	l, a
      001DAA 29               [11] 6492 	add	hl, hl
      001DAB 29               [11] 6493 	add	hl, hl
      001DAC 29               [11] 6494 	add	hl, hl
      001DAD 11 78 21         [10] 6495 	ld	de, #0x2178
      001DB0 19               [11] 6496 	add	hl, de
      001DB1 C5               [11] 6497 	push	bc
      001DB2 11 08 00         [10] 6498 	ld	de, #0x0008
      001DB5 D5               [11] 6499 	push	de
      001DB6 11r68r07         [10] 6500 	ld	de, #_color_font_2
      001DB9 D5               [11] 6501 	push	de
      001DBA E5               [11] 6502 	push	hl
      001DBB CDr00r00         [17] 6503 	call	_LDIRVM
      001DBE 21 06 00         [10] 6504 	ld	hl, #6
      001DC1 39               [11] 6505 	add	hl, sp
      001DC2 F9               [ 6] 6506 	ld	sp, hl
      001DC3 C1               [10] 6507 	pop	bc
                                   6508 ;src\/Graphics\Graphics.h:446: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DC4 0C               [ 4] 6509 	inc	c
      001DC5 18 DB            [12] 6510 	jr	00116$
      001DC7                       6511 00103$:
                                   6512 ;src\/Graphics\Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DC7 0E 00            [ 7] 6513 	ld	c, #0x00
      001DC9                       6514 00119$:
                                   6515 ;src\/Graphics\Graphics.h:451: LDIRVM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001DC9 79               [ 4] 6516 	ld	a,c
      001DCA FE 60            [ 7] 6517 	cp	a,#0x60
      001DCC 30 20            [12] 6518 	jr	NC, 00104$
      001DCE 26 00            [ 7] 6519 	ld	h, #0x00
      001DD0 6F               [ 4] 6520 	ld	l, a
      001DD1 29               [11] 6521 	add	hl, hl
      001DD2 29               [11] 6522 	add	hl, hl
      001DD3 29               [11] 6523 	add	hl, hl
      001DD4 11 78 29         [10] 6524 	ld	de, #0x2978
      001DD7 19               [11] 6525 	add	hl, de
      001DD8 C5               [11] 6526 	push	bc
      001DD9 11 08 00         [10] 6527 	ld	de, #0x0008
      001DDC D5               [11] 6528 	push	de
      001DDD 11r68r07         [10] 6529 	ld	de, #_color_font_2
      001DE0 D5               [11] 6530 	push	de
      001DE1 E5               [11] 6531 	push	hl
      001DE2 CDr00r00         [17] 6532 	call	_LDIRVM
      001DE5 21 06 00         [10] 6533 	ld	hl, #6
      001DE8 39               [11] 6534 	add	hl, sp
      001DE9 F9               [ 6] 6535 	ld	sp, hl
      001DEA C1               [10] 6536 	pop	bc
                                   6537 ;src\/Graphics\Graphics.h:450: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DEB 0C               [ 4] 6538 	inc	c
      001DEC 18 DB            [12] 6539 	jr	00119$
      001DEE                       6540 00104$:
                                   6541 ;src\/Graphics\Graphics.h:454: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001DEE 0E 00            [ 7] 6542 	ld	c, #0x00
      001DF0                       6543 00122$:
                                   6544 ;src\/Graphics\Graphics.h:455: LDIRVM(CLRTBL + (512 * 8) + (NUMBER_OF_PATTERNS * 8) + (i * 8), color_font_2, 8);
      001DF0 79               [ 4] 6545 	ld	a,c
      001DF1 FE 60            [ 7] 6546 	cp	a,#0x60
      001DF3 30 20            [12] 6547 	jr	NC, 00105$
      001DF5 26 00            [ 7] 6548 	ld	h, #0x00
      001DF7 6F               [ 4] 6549 	ld	l, a
      001DF8 29               [11] 6550 	add	hl, hl
      001DF9 29               [11] 6551 	add	hl, hl
      001DFA 29               [11] 6552 	add	hl, hl
      001DFB 11 78 31         [10] 6553 	ld	de, #0x3178
      001DFE 19               [11] 6554 	add	hl, de
      001DFF C5               [11] 6555 	push	bc
      001E00 11 08 00         [10] 6556 	ld	de, #0x0008
      001E03 D5               [11] 6557 	push	de
      001E04 11r68r07         [10] 6558 	ld	de, #_color_font_2
      001E07 D5               [11] 6559 	push	de
      001E08 E5               [11] 6560 	push	hl
      001E09 CDr00r00         [17] 6561 	call	_LDIRVM
      001E0C 21 06 00         [10] 6562 	ld	hl, #6
      001E0F 39               [11] 6563 	add	hl, sp
      001E10 F9               [ 6] 6564 	ld	sp, hl
      001E11 C1               [10] 6565 	pop	bc
                                   6566 ;src\/Graphics\Graphics.h:454: for(byte i = 0; i < (HICHAR - LOCHAR + 1); i++) {
      001E12 0C               [ 4] 6567 	inc	c
      001E13 18 DB            [12] 6568 	jr	00122$
      001E15                       6569 00105$:
                                   6570 ;src\/Graphics\Graphics.h:463: for(byte i = 0; i < 10; i++) {
      001E15 0E 00            [ 7] 6571 	ld	c, #0x00
      001E17                       6572 00125$:
                                   6573 ;src\/Graphics\Graphics.h:464: LDIRVM(CLRTBL + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E17 79               [ 4] 6574 	ld	a,c
      001E18 FE 0A            [ 7] 6575 	cp	a,#0x0a
      001E1A 30 20            [12] 6576 	jr	NC, 00106$
      001E1C 26 00            [ 7] 6577 	ld	h, #0x00
      001E1E 6F               [ 4] 6578 	ld	l, a
      001E1F 29               [11] 6579 	add	hl, hl
      001E20 29               [11] 6580 	add	hl, hl
      001E21 29               [11] 6581 	add	hl, hl
      001E22 11 F8 21         [10] 6582 	ld	de, #0x21f8
      001E25 19               [11] 6583 	add	hl, de
      001E26 C5               [11] 6584 	push	bc
      001E27 11 08 00         [10] 6585 	ld	de, #0x0008
      001E2A D5               [11] 6586 	push	de
      001E2B 11r60r07         [10] 6587 	ld	de, #_color_font_1
      001E2E D5               [11] 6588 	push	de
      001E2F E5               [11] 6589 	push	hl
      001E30 CDr00r00         [17] 6590 	call	_LDIRVM
      001E33 21 06 00         [10] 6591 	ld	hl, #6
      001E36 39               [11] 6592 	add	hl, sp
      001E37 F9               [ 6] 6593 	ld	sp, hl
      001E38 C1               [10] 6594 	pop	bc
                                   6595 ;src\/Graphics\Graphics.h:463: for(byte i = 0; i < 10; i++) {
      001E39 0C               [ 4] 6596 	inc	c
      001E3A 18 DB            [12] 6597 	jr	00125$
      001E3C                       6598 00106$:
                                   6599 ;src\/Graphics\Graphics.h:467: for(byte i = 0; i < 10; i++) {
      001E3C 0E 00            [ 7] 6600 	ld	c, #0x00
      001E3E                       6601 00128$:
                                   6602 ;src\/Graphics\Graphics.h:468: LDIRVM(CLRTBL + (256 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E3E 79               [ 4] 6603 	ld	a,c
      001E3F FE 0A            [ 7] 6604 	cp	a,#0x0a
      001E41 30 20            [12] 6605 	jr	NC, 00107$
      001E43 26 00            [ 7] 6606 	ld	h, #0x00
      001E45 6F               [ 4] 6607 	ld	l, a
      001E46 29               [11] 6608 	add	hl, hl
      001E47 29               [11] 6609 	add	hl, hl
      001E48 29               [11] 6610 	add	hl, hl
      001E49 11 F8 29         [10] 6611 	ld	de, #0x29f8
      001E4C 19               [11] 6612 	add	hl, de
      001E4D C5               [11] 6613 	push	bc
      001E4E 11 08 00         [10] 6614 	ld	de, #0x0008
      001E51 D5               [11] 6615 	push	de
      001E52 11r60r07         [10] 6616 	ld	de, #_color_font_1
      001E55 D5               [11] 6617 	push	de
      001E56 E5               [11] 6618 	push	hl
      001E57 CDr00r00         [17] 6619 	call	_LDIRVM
      001E5A 21 06 00         [10] 6620 	ld	hl, #6
      001E5D 39               [11] 6621 	add	hl, sp
      001E5E F9               [ 6] 6622 	ld	sp, hl
      001E5F C1               [10] 6623 	pop	bc
                                   6624 ;src\/Graphics\Graphics.h:467: for(byte i = 0; i < 10; i++) {
      001E60 0C               [ 4] 6625 	inc	c
      001E61 18 DB            [12] 6626 	jr	00128$
      001E63                       6627 00107$:
                                   6628 ;src\/Graphics\Graphics.h:471: for(byte i = 0; i < 10; i++) {
      001E63 DD 36 FF 00      [19] 6629 	ld	-1 (ix), #0
      001E67                       6630 00131$:
      001E67 DD 7E FF         [19] 6631 	ld	a, -1 (ix)
      001E6A D6 0A            [ 7] 6632 	sub	a, #0x0a
      001E6C 30 22            [12] 6633 	jr	NC, 00108$
                                   6634 ;src\/Graphics\Graphics.h:472: LDIRVM(CLRTBL + (512 * 8) + (CHAR_0 * 8) + (i * 8), color_font_1, 8);
      001E6E 01r60r07         [10] 6635 	ld	bc, #_color_font_1
      001E71 DD 6E FF         [19] 6636 	ld	l, -1 (ix)
      001E74 26 00            [ 7] 6637 	ld	h, #0x00
      001E76 29               [11] 6638 	add	hl, hl
      001E77 29               [11] 6639 	add	hl, hl
      001E78 29               [11] 6640 	add	hl, hl
      001E79 11 F8 31         [10] 6641 	ld	de, #0x31f8
      001E7C 19               [11] 6642 	add	hl, de
      001E7D 11 08 00         [10] 6643 	ld	de, #0x0008
      001E80 D5               [11] 6644 	push	de
      001E81 C5               [11] 6645 	push	bc
      001E82 E5               [11] 6646 	push	hl
      001E83 CDr00r00         [17] 6647 	call	_LDIRVM
      001E86 21 06 00         [10] 6648 	ld	hl, #6
      001E89 39               [11] 6649 	add	hl, sp
      001E8A F9               [ 6] 6650 	ld	sp, hl
                                   6651 ;src\/Graphics\Graphics.h:471: for(byte i = 0; i < 10; i++) {
      001E8B DD 34 FF         [23] 6652 	inc	-1 (ix)
      001E8E 18 D7            [12] 6653 	jr	00131$
      001E90                       6654 00108$:
                                   6655 ;src\/Graphics\Graphics.h:476: LDIRVM(CLRTBL + (TITLE_1 * 8), color_title_1, NUMBER_OF_TITLE_BLOCKS * 8);
      001E90 21 38 00         [10] 6656 	ld	hl, #0x0038
      001E93 E5               [11] 6657 	push	hl
      001E94 21r70r07         [10] 6658 	ld	hl, #_color_title_1
      001E97 E5               [11] 6659 	push	hl
      001E98 21 70 24         [10] 6660 	ld	hl, #0x2470
      001E9B E5               [11] 6661 	push	hl
      001E9C CDr00r00         [17] 6662 	call	_LDIRVM
      001E9F 21 06 00         [10] 6663 	ld	hl, #6
      001EA2 39               [11] 6664 	add	hl, sp
      001EA3 F9               [ 6] 6665 	ld	sp, hl
                                   6666 ;src\/Graphics\Graphics.h:484: ENASCR();	// Enable screen
      001EA4 CDr00r00         [17] 6667 	call	_ENASCR
                                   6668 ;src\/Graphics\Graphics.h:485: }
      001EA7 33               [ 6] 6669 	inc	sp
      001EA8 DD E1            [14] 6670 	pop	ix
      001EAA C9               [10] 6671 	ret
                                   6672 ;src\/Graphics\Graphics.h:487: void DrawBlock(byte col, byte line, byte tile) {
                                   6673 ;	---------------------------------
                                   6674 ; Function DrawBlock
                                   6675 ; ---------------------------------
      001EAB                       6676 _DrawBlock::
      001EAB DD E5            [15] 6677 	push	ix
      001EAD DD 21 00 00      [14] 6678 	ld	ix,#0
      001EB1 DD 39            [15] 6679 	add	ix,sp
                                   6680 ;src\/Graphics\Graphics.h:489: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001EB3 DD 6E 04         [19] 6681 	ld	l, 4 (ix)
      001EB6 26 00            [ 7] 6682 	ld	h, #0x00
      001EB8 29               [11] 6683 	add	hl, hl
      001EB9 4D               [ 4] 6684 	ld	c, l
      001EBA 44               [ 4] 6685 	ld	b, h
      001EBB DD 6E 05         [19] 6686 	ld	l, 5 (ix)
      001EBE 26 00            [ 7] 6687 	ld	h, #0x00
      001EC0 29               [11] 6688 	add	hl, hl
      001EC1 29               [11] 6689 	add	hl, hl
      001EC2 29               [11] 6690 	add	hl, hl
      001EC3 29               [11] 6691 	add	hl, hl
      001EC4 29               [11] 6692 	add	hl, hl
      001EC5 29               [11] 6693 	add	hl, hl
      001EC6 11 0A 18         [10] 6694 	ld	de, #0x180a
      001EC9 19               [11] 6695 	add	hl, de
      001ECA 09               [11] 6696 	add	hl, bc
      001ECB EB               [ 4] 6697 	ex	de, hl
                                   6698 ;src\/Graphics\Graphics.h:491: WRTVRM(baseAddr, tile);
      001ECC D5               [11] 6699 	push	de
      001ECD DD 7E 06         [19] 6700 	ld	a, 6 (ix)
      001ED0 F5               [11] 6701 	push	af
      001ED1 33               [ 6] 6702 	inc	sp
      001ED2 D5               [11] 6703 	push	de
      001ED3 CDr00r00         [17] 6704 	call	_WRTVRM
      001ED6 F1               [10] 6705 	pop	af
      001ED7 33               [ 6] 6706 	inc	sp
      001ED8 D1               [10] 6707 	pop	de
                                   6708 ;src\/Graphics\Graphics.h:492: WRTVRM(baseAddr + 1, tile + 1);
      001ED9 DD 4E 06         [19] 6709 	ld	c, 6 (ix)
      001EDC 79               [ 4] 6710 	ld	a, c
      001EDD 3C               [ 4] 6711 	inc	a
      001EDE 6B               [ 4] 6712 	ld	l, e
      001EDF 62               [ 4] 6713 	ld	h, d
      001EE0 23               [ 6] 6714 	inc	hl
      001EE1 C5               [11] 6715 	push	bc
      001EE2 D5               [11] 6716 	push	de
      001EE3 F5               [11] 6717 	push	af
      001EE4 33               [ 6] 6718 	inc	sp
      001EE5 E5               [11] 6719 	push	hl
      001EE6 CDr00r00         [17] 6720 	call	_WRTVRM
      001EE9 F1               [10] 6721 	pop	af
      001EEA 33               [ 6] 6722 	inc	sp
      001EEB D1               [10] 6723 	pop	de
      001EEC C1               [10] 6724 	pop	bc
                                   6725 ;src\/Graphics\Graphics.h:493: WRTVRM(baseAddr + 32, tile + 2);
      001EED 41               [ 4] 6726 	ld	b, c
      001EEE 04               [ 4] 6727 	inc	b
      001EEF 04               [ 4] 6728 	inc	b
      001EF0 21 20 00         [10] 6729 	ld	hl, #0x0020
      001EF3 19               [11] 6730 	add	hl, de
      001EF4 C5               [11] 6731 	push	bc
      001EF5 D5               [11] 6732 	push	de
      001EF6 C5               [11] 6733 	push	bc
      001EF7 33               [ 6] 6734 	inc	sp
      001EF8 E5               [11] 6735 	push	hl
      001EF9 CDr00r00         [17] 6736 	call	_WRTVRM
      001EFC F1               [10] 6737 	pop	af
      001EFD 33               [ 6] 6738 	inc	sp
      001EFE D1               [10] 6739 	pop	de
      001EFF C1               [10] 6740 	pop	bc
                                   6741 ;src\/Graphics\Graphics.h:494: WRTVRM(baseAddr + 33, tile + 3);
      001F00 0C               [ 4] 6742 	inc	c
      001F01 0C               [ 4] 6743 	inc	c
      001F02 0C               [ 4] 6744 	inc	c
      001F03 21 21 00         [10] 6745 	ld	hl, #0x0021
      001F06 19               [11] 6746 	add	hl, de
      001F07 79               [ 4] 6747 	ld	a, c
      001F08 F5               [11] 6748 	push	af
      001F09 33               [ 6] 6749 	inc	sp
      001F0A E5               [11] 6750 	push	hl
      001F0B CDr00r00         [17] 6751 	call	_WRTVRM
      001F0E F1               [10] 6752 	pop	af
      001F0F 33               [ 6] 6753 	inc	sp
                                   6754 ;src\/Graphics\Graphics.h:495: }
      001F10 DD E1            [14] 6755 	pop	ix
      001F12 C9               [10] 6756 	ret
                                   6757 ;src\/Graphics\Graphics.h:497: void DrawBlock_SameTile(byte col, byte line, byte tile) {
                                   6758 ;	---------------------------------
                                   6759 ; Function DrawBlock_SameTile
                                   6760 ; ---------------------------------
      001F13                       6761 _DrawBlock_SameTile::
      001F13 DD E5            [15] 6762 	push	ix
      001F15 DD 21 00 00      [14] 6763 	ld	ix,#0
      001F19 DD 39            [15] 6764 	add	ix,sp
                                   6765 ;src\/Graphics\Graphics.h:499: word baseAddr = NAMTBL + (col * 2) + (line * 2 * 32) + PLAYFIELD_HORIZ_OFFSET;
      001F1B DD 6E 04         [19] 6766 	ld	l, 4 (ix)
      001F1E 26 00            [ 7] 6767 	ld	h, #0x00
      001F20 29               [11] 6768 	add	hl, hl
      001F21 4D               [ 4] 6769 	ld	c, l
      001F22 44               [ 4] 6770 	ld	b, h
      001F23 DD 6E 05         [19] 6771 	ld	l, 5 (ix)
      001F26 26 00            [ 7] 6772 	ld	h, #0x00
      001F28 29               [11] 6773 	add	hl, hl
      001F29 29               [11] 6774 	add	hl, hl
      001F2A 29               [11] 6775 	add	hl, hl
      001F2B 29               [11] 6776 	add	hl, hl
      001F2C 29               [11] 6777 	add	hl, hl
      001F2D 29               [11] 6778 	add	hl, hl
      001F2E 11 0A 18         [10] 6779 	ld	de, #0x180a
      001F31 19               [11] 6780 	add	hl, de
      001F32 09               [11] 6781 	add	hl, bc
      001F33 EB               [ 4] 6782 	ex	de, hl
                                   6783 ;src\/Graphics\Graphics.h:501: WRTVRM(baseAddr, tile);
      001F34 D5               [11] 6784 	push	de
      001F35 DD 7E 06         [19] 6785 	ld	a, 6 (ix)
      001F38 F5               [11] 6786 	push	af
      001F39 33               [ 6] 6787 	inc	sp
      001F3A D5               [11] 6788 	push	de
      001F3B CDr00r00         [17] 6789 	call	_WRTVRM
      001F3E F1               [10] 6790 	pop	af
      001F3F 33               [ 6] 6791 	inc	sp
      001F40 D1               [10] 6792 	pop	de
                                   6793 ;src\/Graphics\Graphics.h:502: WRTVRM(baseAddr + 1, tile);
      001F41 4B               [ 4] 6794 	ld	c, e
      001F42 42               [ 4] 6795 	ld	b, d
      001F43 03               [ 6] 6796 	inc	bc
      001F44 D5               [11] 6797 	push	de
      001F45 DD 7E 06         [19] 6798 	ld	a, 6 (ix)
      001F48 F5               [11] 6799 	push	af
      001F49 33               [ 6] 6800 	inc	sp
      001F4A C5               [11] 6801 	push	bc
      001F4B CDr00r00         [17] 6802 	call	_WRTVRM
      001F4E F1               [10] 6803 	pop	af
      001F4F 33               [ 6] 6804 	inc	sp
      001F50 D1               [10] 6805 	pop	de
                                   6806 ;src\/Graphics\Graphics.h:503: WRTVRM(baseAddr + 32, tile);
      001F51 21 20 00         [10] 6807 	ld	hl, #0x0020
      001F54 19               [11] 6808 	add	hl, de
      001F55 D5               [11] 6809 	push	de
      001F56 DD 7E 06         [19] 6810 	ld	a, 6 (ix)
      001F59 F5               [11] 6811 	push	af
      001F5A 33               [ 6] 6812 	inc	sp
      001F5B E5               [11] 6813 	push	hl
      001F5C CDr00r00         [17] 6814 	call	_WRTVRM
      001F5F F1               [10] 6815 	pop	af
      001F60 33               [ 6] 6816 	inc	sp
      001F61 D1               [10] 6817 	pop	de
                                   6818 ;src\/Graphics\Graphics.h:504: WRTVRM(baseAddr + 33, tile);
      001F62 21 21 00         [10] 6819 	ld	hl, #0x0021
      001F65 19               [11] 6820 	add	hl, de
      001F66 DD 7E 06         [19] 6821 	ld	a, 6 (ix)
      001F69 F5               [11] 6822 	push	af
      001F6A 33               [ 6] 6823 	inc	sp
      001F6B E5               [11] 6824 	push	hl
      001F6C CDr00r00         [17] 6825 	call	_WRTVRM
      001F6F F1               [10] 6826 	pop	af
      001F70 33               [ 6] 6827 	inc	sp
                                   6828 ;src\/Graphics\Graphics.h:505: }
      001F71 DD E1            [14] 6829 	pop	ix
      001F73 C9               [10] 6830 	ret
                                   6831 ;src\/Graphics\Graphics.h:507: void DrawLine(byte line) {
                                   6832 ;	---------------------------------
                                   6833 ; Function DrawLine
                                   6834 ; ---------------------------------
      001F74                       6835 _DrawLine::
      001F74 DD E5            [15] 6836 	push	ix
      001F76 DD 21 00 00      [14] 6837 	ld	ix,#0
      001F7A DD 39            [15] 6838 	add	ix,sp
                                   6839 ;src\/Graphics\Graphics.h:508: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001F7C DD 4E 04         [19] 6840 	ld	c, 4 (ix)
      001F7F 06 00            [ 7] 6841 	ld	b, #0x00
      001F81                       6842 00103$:
      001F81 78               [ 4] 6843 	ld	a, b
      001F82 D6 06            [ 7] 6844 	sub	a, #0x06
      001F84 30 23            [12] 6845 	jr	NC, 00105$
                                   6846 ;src\/Graphics\Graphics.h:509: DrawBlock(col, line, playfield[col][line]);
      001F86 58               [ 4] 6847 	ld	e, b
      001F87 16 00            [ 7] 6848 	ld	d, #0x00
      001F89 6B               [ 4] 6849 	ld	l, e
      001F8A 62               [ 4] 6850 	ld	h, d
      001F8B 29               [11] 6851 	add	hl, hl
      001F8C 19               [11] 6852 	add	hl, de
      001F8D 29               [11] 6853 	add	hl, hl
      001F8E 29               [11] 6854 	add	hl, hl
      001F8F 11r00r00         [10] 6855 	ld	de, #_playfield
      001F92 19               [11] 6856 	add	hl, de
      001F93 59               [ 4] 6857 	ld	e, c
      001F94 16 00            [ 7] 6858 	ld	d, #0x00
      001F96 19               [11] 6859 	add	hl, de
      001F97 7E               [ 7] 6860 	ld	a, (hl)
      001F98 C5               [11] 6861 	push	bc
      001F99 F5               [11] 6862 	push	af
      001F9A 33               [ 6] 6863 	inc	sp
      001F9B 79               [ 4] 6864 	ld	a, c
      001F9C F5               [11] 6865 	push	af
      001F9D 33               [ 6] 6866 	inc	sp
      001F9E C5               [11] 6867 	push	bc
      001F9F 33               [ 6] 6868 	inc	sp
      001FA0 CDrABr1E         [17] 6869 	call	_DrawBlock
      001FA3 F1               [10] 6870 	pop	af
      001FA4 33               [ 6] 6871 	inc	sp
      001FA5 C1               [10] 6872 	pop	bc
                                   6873 ;src\/Graphics\Graphics.h:508: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      001FA6 04               [ 4] 6874 	inc	b
      001FA7 18 D8            [12] 6875 	jr	00103$
      001FA9                       6876 00105$:
                                   6877 ;src\/Graphics\Graphics.h:511: }
      001FA9 DD E1            [14] 6878 	pop	ix
      001FAB C9               [10] 6879 	ret
                                   6880 ;src\/Graphics\Graphics.h:513: void DrawPiece(byte line) {
                                   6881 ;	---------------------------------
                                   6882 ; Function DrawPiece
                                   6883 ; ---------------------------------
      001FAC                       6884 _DrawPiece::
                                   6885 ;src\/Graphics\Graphics.h:514: DrawLine(line);
      001FAC 21 02 00         [10] 6886 	ld	hl, #2
      001FAF 39               [11] 6887 	add	hl, sp
      001FB0 7E               [ 7] 6888 	ld	a, (hl)
      001FB1 F5               [11] 6889 	push	af
      001FB2 33               [ 6] 6890 	inc	sp
      001FB3 CDr74r1F         [17] 6891 	call	_DrawLine
      001FB6 33               [ 6] 6892 	inc	sp
                                   6893 ;src\/Graphics\Graphics.h:515: DrawLine(line + 1);
      001FB7 21 02 00         [10] 6894 	ld	hl, #2
      001FBA 39               [11] 6895 	add	hl, sp
      001FBB 46               [ 7] 6896 	ld	b, (hl)
      001FBC 78               [ 4] 6897 	ld	a, b
      001FBD 3C               [ 4] 6898 	inc	a
      001FBE C5               [11] 6899 	push	bc
      001FBF F5               [11] 6900 	push	af
      001FC0 33               [ 6] 6901 	inc	sp
      001FC1 CDr74r1F         [17] 6902 	call	_DrawLine
      001FC4 33               [ 6] 6903 	inc	sp
      001FC5 C1               [10] 6904 	pop	bc
                                   6905 ;src\/Graphics\Graphics.h:516: DrawLine(line + 2);
      001FC6 04               [ 4] 6906 	inc	b
      001FC7 04               [ 4] 6907 	inc	b
      001FC8 C5               [11] 6908 	push	bc
      001FC9 33               [ 6] 6909 	inc	sp
      001FCA CDr74r1F         [17] 6910 	call	_DrawLine
      001FCD 33               [ 6] 6911 	inc	sp
                                   6912 ;src\/Graphics\Graphics.h:517: }
      001FCE C9               [10] 6913 	ret
                                   6914 ;src\/Graphics\Graphics.h:519: void DrawPlayfield() {
                                   6915 ;	---------------------------------
                                   6916 ; Function DrawPlayfield
                                   6917 ; ---------------------------------
      001FCF                       6918 _DrawPlayfield::
                                   6919 ;src\/Graphics\Graphics.h:520: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FCF 06 00            [ 7] 6920 	ld	b, #0x00
      001FD1                       6921 00103$:
      001FD1 78               [ 4] 6922 	ld	a, b
      001FD2 D6 0C            [ 7] 6923 	sub	a, #0x0c
      001FD4 D0               [11] 6924 	ret	NC
                                   6925 ;src\/Graphics\Graphics.h:521: DrawLine(line);
      001FD5 C5               [11] 6926 	push	bc
      001FD6 C5               [11] 6927 	push	bc
      001FD7 33               [ 6] 6928 	inc	sp
      001FD8 CDr74r1F         [17] 6929 	call	_DrawLine
      001FDB 33               [ 6] 6930 	inc	sp
      001FDC C1               [10] 6931 	pop	bc
                                   6932 ;src\/Graphics\Graphics.h:520: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      001FDD 04               [ 4] 6933 	inc	b
                                   6934 ;src\/Graphics\Graphics.h:523: }
      001FDE 18 F1            [12] 6935 	jr	00103$
                                   6936 ;src\/Sound.h:1: void SoundFx_2() {
                                   6937 ;	---------------------------------
                                   6938 ; Function SoundFx_2
                                   6939 ; ---------------------------------
      001FE0                       6940 _SoundFx_2::
                                   6941 ;src\/Sound.h:2: GICINI();
      001FE0 CDr00r00         [17] 6942 	call	_GICINI
                                   6943 ;src\/Sound.h:17: WRTPSG(0x0f08);
      001FE3 21 08 0F         [10] 6944 	ld	hl, #0x0f08
      001FE6 CDr00r00         [17] 6945 	call	_WRTPSG
                                   6946 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001FE9 0E 00            [ 7] 6947 	ld	c, #0x00
      001FEB                       6948 00104$:
      001FEB 79               [ 4] 6949 	ld	a, c
      001FEC D6 FF            [ 7] 6950 	sub	a, #0xff
      001FEE 30 11            [12] 6951 	jr	NC, 00101$
                                   6952 ;src\/Sound.h:20: WRTPSG((93 * 256) + 0);
      001FF0 C5               [11] 6953 	push	bc
      001FF1 21 00 5D         [10] 6954 	ld	hl, #0x5d00
      001FF4 CDr00r00         [17] 6955 	call	_WRTPSG
      001FF7 21 01 00         [10] 6956 	ld	hl, #0x0001
      001FFA CDr00r00         [17] 6957 	call	_WRTPSG
      001FFD C1               [10] 6958 	pop	bc
                                   6959 ;src\/Sound.h:19: for(byte i=0; i<255; i++) {
      001FFE 0C               [ 4] 6960 	inc	c
      001FFF 18 EA            [12] 6961 	jr	00104$
      002001                       6962 00101$:
                                   6963 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      002001 0E 00            [ 7] 6964 	ld	c, #0x00
      002003                       6965 00107$:
      002003 79               [ 4] 6966 	ld	a, c
      002004 D6 FF            [ 7] 6967 	sub	a, #0xff
      002006 30 11            [12] 6968 	jr	NC, 00102$
                                   6969 ;src\/Sound.h:25: WRTPSG((45 * 256) + 0);
      002008 C5               [11] 6970 	push	bc
      002009 21 00 2D         [10] 6971 	ld	hl, #0x2d00
      00200C CDr00r00         [17] 6972 	call	_WRTPSG
      00200F 21 01 00         [10] 6973 	ld	hl, #0x0001
      002012 CDr00r00         [17] 6974 	call	_WRTPSG
      002015 C1               [10] 6975 	pop	bc
                                   6976 ;src\/Sound.h:24: for(byte i=0; i<255; i++) {
      002016 0C               [ 4] 6977 	inc	c
      002017 18 EA            [12] 6978 	jr	00107$
      002019                       6979 00102$:
                                   6980 ;src\/Sound.h:29: WRTPSG((0 * 256) + 8);	// register 8, value 0
      002019 21 08 00         [10] 6981 	ld	hl, #0x0008
                                   6982 ;src\/Sound.h:30: }
      00201C C3r00r00         [10] 6983 	jp	_WRTPSG
                                   6984 ;src\/Sound.h:32: void SoundFx_1() {
                                   6985 ;	---------------------------------
                                   6986 ; Function SoundFx_1
                                   6987 ; ---------------------------------
      00201F                       6988 _SoundFx_1::
                                   6989 ;src\/Sound.h:34: GICINI();
      00201F CDr00r00         [17] 6990 	call	_GICINI
                                   6991 ;src\/Sound.h:36: WRTPSG((151 * 256) + 6);
      002022 21 06 97         [10] 6992 	ld	hl, #0x9706
      002025 CDr00r00         [17] 6993 	call	_WRTPSG
                                   6994 ;src\/Sound.h:40: WRTPSG((0b10000001 * 256) + 7);
      002028 21 07 81         [10] 6995 	ld	hl, #0x8107
      00202B CDr00r00         [17] 6996 	call	_WRTPSG
                                   6997 ;src\/Sound.h:42: WRTPSG((16 * 256) + 8);
      00202E 21 08 10         [10] 6998 	ld	hl, #0x1008
      002031 CDr00r00         [17] 6999 	call	_WRTPSG
                                   7000 ;src\/Sound.h:43: WRTPSG((19 * 256) + 12);
      002034 21 0C 13         [10] 7001 	ld	hl, #0x130c
      002037 CDr00r00         [17] 7002 	call	_WRTPSG
                                   7003 ;src\/Sound.h:44: WRTPSG((1 * 256) + 13);
      00203A 21 0D 01         [10] 7004 	ld	hl, #0x010d
                                   7005 ;src\/Sound.h:49: }
      00203D C3r00r00         [10] 7006 	jp	_WRTPSG
                                   7007 ;src\/CheckPlayfield.h:31: void CheckPlayfield(byte iteration) {
                                   7008 ;	---------------------------------
                                   7009 ; Function CheckPlayfield
                                   7010 ; ---------------------------------
      002040                       7011 _CheckPlayfield::
      002040 DD E5            [15] 7012 	push	ix
      002042 DD 21 00 00      [14] 7013 	ld	ix,#0
      002046 DD 39            [15] 7014 	add	ix,sp
      002048 21 EF FF         [10] 7015 	ld	hl, #-17
      00204B 39               [11] 7016 	add	hl, sp
      00204C F9               [ 6] 7017 	ld	sp, hl
                                   7018 ;src\/CheckPlayfield.h:32: bool piecesRemoved = FALSE;
      00204D DD 36 EF 00      [19] 7019 	ld	-17 (ix), #0
                                   7020 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002051 0E 00            [ 7] 7021 	ld	c, #0x00
      002053                       7022 00196$:
      002053 79               [ 4] 7023 	ld	a, c
      002054 D6 0C            [ 7] 7024 	sub	a, #0x0c
      002056 30 36            [12] 7025 	jr	NC, 00102$
                                   7026 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002058 DD 36 FF 00      [19] 7027 	ld	-1 (ix), #0
      00205C                       7028 00193$:
      00205C DD 7E FF         [19] 7029 	ld	a, -1 (ix)
      00205F D6 06            [ 7] 7030 	sub	a, #0x06
      002061 30 28            [12] 7031 	jr	NC, 00197$
                                   7032 ;src\/CheckPlayfield.h:37: playfieldTemp[col][line] = playfield[col][line];
      002063 DD 5E FF         [19] 7033 	ld	e, -1 (ix)
      002066 16 00            [ 7] 7034 	ld	d, #0x00
      002068 6B               [ 4] 7035 	ld	l, e
      002069 62               [ 4] 7036 	ld	h, d
      00206A 29               [11] 7037 	add	hl, hl
      00206B 19               [11] 7038 	add	hl, de
      00206C 29               [11] 7039 	add	hl, hl
      00206D 29               [11] 7040 	add	hl, hl
      00206E EB               [ 4] 7041 	ex	de, hl
      00206F 21r48r00         [10] 7042 	ld	hl, #_playfieldTemp
      002072 19               [11] 7043 	add	hl, de
      002073 06 00            [ 7] 7044 	ld	b, #0x00
      002075 09               [11] 7045 	add	hl, bc
      002076 3Er00            [ 7] 7046 	ld	a, #<(_playfield)
      002078 83               [ 4] 7047 	add	a, e
      002079 5F               [ 4] 7048 	ld	e, a
      00207A 3Es00            [ 7] 7049 	ld	a, #>(_playfield)
      00207C 8A               [ 4] 7050 	adc	a, d
      00207D 57               [ 4] 7051 	ld	d, a
      00207E 7B               [ 4] 7052 	ld	a, e
      00207F 81               [ 4] 7053 	add	a, c
      002080 5F               [ 4] 7054 	ld	e, a
      002081 30 01            [12] 7055 	jr	NC, 00615$
      002083 14               [ 4] 7056 	inc	d
      002084                       7057 00615$:
      002084 1A               [ 7] 7058 	ld	a, (de)
      002085 77               [ 7] 7059 	ld	(hl), a
                                   7060 ;src\/CheckPlayfield.h:36: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002086 DD 34 FF         [23] 7061 	inc	-1 (ix)
      002089 18 D1            [12] 7062 	jr	00193$
      00208B                       7063 00197$:
                                   7064 ;src\/CheckPlayfield.h:35: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00208B 0C               [ 4] 7065 	inc	c
      00208C 18 C5            [12] 7066 	jr	00196$
      00208E                       7067 00102$:
                                   7068 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00208E DD 36 FE 00      [19] 7069 	ld	-2 (ix), #0
      002092                       7070 00202$:
      002092 DD 7E FE         [19] 7071 	ld	a, -2 (ix)
      002095 D6 0C            [ 7] 7072 	sub	a, #0x0c
      002097 D2r96r21         [10] 7073 	jp	NC, 00108$
                                   7074 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00209A DD 36 FF 02      [19] 7075 	ld	-1 (ix), #0x02
      00209E                       7076 00199$:
      00209E DD 7E FF         [19] 7077 	ld	a, -1 (ix)
      0020A1 D6 06            [ 7] 7078 	sub	a, #0x06
      0020A3 D2r90r21         [10] 7079 	jp	NC, 00203$
                                   7080 ;src\/CheckPlayfield.h:44: if (playfieldTemp[col][line] != EMPTY &&
      0020A6 DD 4E FF         [19] 7081 	ld	c, -1 (ix)
      0020A9 06 00            [ 7] 7082 	ld	b, #0x00
      0020AB 69               [ 4] 7083 	ld	l, c
      0020AC 60               [ 4] 7084 	ld	h, b
      0020AD 29               [11] 7085 	add	hl, hl
      0020AE 09               [11] 7086 	add	hl, bc
      0020AF 29               [11] 7087 	add	hl, hl
      0020B0 29               [11] 7088 	add	hl, hl
      0020B1 DD 75 F5         [19] 7089 	ld	-11 (ix), l
      0020B4 DD 74 F6         [19] 7090 	ld	-10 (ix), h
      0020B7 3Er48            [ 7] 7091 	ld	a, #<(_playfieldTemp)
      0020B9 DD 86 F5         [19] 7092 	add	a, -11 (ix)
      0020BC 4F               [ 4] 7093 	ld	c, a
      0020BD 3Es00            [ 7] 7094 	ld	a, #>(_playfieldTemp)
      0020BF DD 8E F6         [19] 7095 	adc	a, -10 (ix)
      0020C2 47               [ 4] 7096 	ld	b, a
      0020C3 79               [ 4] 7097 	ld	a, c
      0020C4 DD 86 FE         [19] 7098 	add	a, -2 (ix)
      0020C7 DD 77 F7         [19] 7099 	ld	-9 (ix), a
      0020CA 78               [ 4] 7100 	ld	a, b
      0020CB CE 00            [ 7] 7101 	adc	a, #0x00
      0020CD DD 77 F8         [19] 7102 	ld	-8 (ix), a
      0020D0 DD 6E F7         [19] 7103 	ld	l, -9 (ix)
      0020D3 DD 66 F8         [19] 7104 	ld	h, -8 (ix)
      0020D6 7E               [ 7] 7105 	ld	a, (hl)
      0020D7 DD 77 F9         [19] 7106 	ld	-7 (ix), a
      0020DA B7               [ 4] 7107 	or	a, a
      0020DB CAr8Ar21         [10] 7108 	jp	Z, 00200$
                                   7109 ;src\/CheckPlayfield.h:45: playfieldTemp[col - 2][line] == playfieldTemp[col - 1][line] && 
      0020DE DD 7E FF         [19] 7110 	ld	a, -1 (ix)
      0020E1 DD 77 FD         [19] 7111 	ld	-3 (ix), a
      0020E4 4F               [ 4] 7112 	ld	c, a
      0020E5 0D               [ 4] 7113 	dec	c
      0020E6 0D               [ 4] 7114 	dec	c
      0020E7 79               [ 4] 7115 	ld	a, c
      0020E8 07               [ 4] 7116 	rlca
      0020E9 9F               [ 4] 7117 	sbc	a, a
      0020EA 47               [ 4] 7118 	ld	b, a
      0020EB 69               [ 4] 7119 	ld	l, c
      0020EC 60               [ 4] 7120 	ld	h, b
      0020ED 29               [11] 7121 	add	hl, hl
      0020EE 09               [11] 7122 	add	hl, bc
      0020EF 29               [11] 7123 	add	hl, hl
      0020F0 29               [11] 7124 	add	hl, hl
      0020F1 EB               [ 4] 7125 	ex	de, hl
      0020F2 21r48r00         [10] 7126 	ld	hl, #_playfieldTemp
      0020F5 19               [11] 7127 	add	hl, de
      0020F6 7D               [ 4] 7128 	ld	a, l
      0020F7 DD 86 FE         [19] 7129 	add	a, -2 (ix)
      0020FA DD 77 FA         [19] 7130 	ld	-6 (ix), a
      0020FD 7C               [ 4] 7131 	ld	a, h
      0020FE CE 00            [ 7] 7132 	adc	a, #0x00
      002100 DD 77 FB         [19] 7133 	ld	-5 (ix), a
      002103 DD 4E FD         [19] 7134 	ld	c, -3 (ix)
      002106 0D               [ 4] 7135 	dec	c
      002107 79               [ 4] 7136 	ld	a, c
      002108 07               [ 4] 7137 	rlca
      002109 9F               [ 4] 7138 	sbc	a, a
      00210A 47               [ 4] 7139 	ld	b, a
      00210B 69               [ 4] 7140 	ld	l, c
      00210C 60               [ 4] 7141 	ld	h, b
      00210D 29               [11] 7142 	add	hl, hl
      00210E 09               [11] 7143 	add	hl, bc
      00210F 29               [11] 7144 	add	hl, hl
      002110 29               [11] 7145 	add	hl, hl
      002111 DD 75 FC         [19] 7146 	ld	-4 (ix), l
      002114 DD 74 FD         [19] 7147 	ld	-3 (ix), h
      002117 3Er48            [ 7] 7148 	ld	a, #<(_playfieldTemp)
      002119 DD 86 FC         [19] 7149 	add	a, -4 (ix)
      00211C 4F               [ 4] 7150 	ld	c, a
      00211D 3Es00            [ 7] 7151 	ld	a, #>(_playfieldTemp)
      00211F DD 8E FD         [19] 7152 	adc	a, -3 (ix)
      002122 47               [ 4] 7153 	ld	b, a
      002123 79               [ 4] 7154 	ld	a, c
      002124 DD 86 FE         [19] 7155 	add	a, -2 (ix)
      002127 4F               [ 4] 7156 	ld	c, a
      002128 30 01            [12] 7157 	jr	NC, 00616$
      00212A 04               [ 4] 7158 	inc	b
      00212B                       7159 00616$:
      00212B DD 6E FA         [19] 7160 	ld	l, -6 (ix)
      00212E DD 66 FB         [19] 7161 	ld	h, -5 (ix)
      002131 6E               [ 7] 7162 	ld	l, (hl)
      002132 0A               [ 7] 7163 	ld	a, (bc)
      002133 67               [ 4] 7164 	ld	h, a
      002134 7D               [ 4] 7165 	ld	a, l
      002135 94               [ 4] 7166 	sub	a, h
      002136 20 52            [12] 7167 	jr	NZ, 00200$
                                   7168 ;src\/CheckPlayfield.h:46: playfieldTemp[col - 1][line] == playfieldTemp[col][line]) {
      002138 DD 7E F9         [19] 7169 	ld	a, -7 (ix)
      00213B 94               [ 4] 7170 	sub	a, h
      00213C 20 4C            [12] 7171 	jr	NZ, 00200$
                                   7172 ;src\/CheckPlayfield.h:48: piecesRemoved = TRUE;
      00213E DD 36 EF 01      [19] 7173 	ld	-17 (ix), #0x01
                                   7174 ;src\/CheckPlayfield.h:51: playfield[col - 2][line] = playfieldTemp[col - 2][line] | REMOVING_FLAG;
      002142 3Er00            [ 7] 7175 	ld	a, #<(_playfield)
      002144 83               [ 4] 7176 	add	a, e
      002145 5F               [ 4] 7177 	ld	e, a
      002146 3Es00            [ 7] 7178 	ld	a, #>(_playfield)
      002148 8A               [ 4] 7179 	adc	a, d
      002149 57               [ 4] 7180 	ld	d, a
      00214A 7B               [ 4] 7181 	ld	a, e
      00214B DD 86 FE         [19] 7182 	add	a, -2 (ix)
      00214E 5F               [ 4] 7183 	ld	e, a
      00214F 30 01            [12] 7184 	jr	NC, 00621$
      002151 14               [ 4] 7185 	inc	d
      002152                       7186 00621$:
      002152 7D               [ 4] 7187 	ld	a, l
      002153 CB FF            [ 8] 7188 	set	7, a
      002155 12               [ 7] 7189 	ld	(de), a
                                   7190 ;src\/CheckPlayfield.h:52: playfield[col - 1][line] = playfieldTemp[col - 1][line] | REMOVING_FLAG;
      002156 3Er00            [ 7] 7191 	ld	a, #<(_playfield)
      002158 DD 86 FC         [19] 7192 	add	a, -4 (ix)
      00215B 5F               [ 4] 7193 	ld	e, a
      00215C 3Es00            [ 7] 7194 	ld	a, #>(_playfield)
      00215E DD 8E FD         [19] 7195 	adc	a, -3 (ix)
      002161 57               [ 4] 7196 	ld	d, a
      002162 DD 6E FE         [19] 7197 	ld	l, -2 (ix)
      002165 26 00            [ 7] 7198 	ld	h, #0x00
      002167 19               [11] 7199 	add	hl, de
      002168 0A               [ 7] 7200 	ld	a, (bc)
      002169 CB FF            [ 8] 7201 	set	7, a
      00216B 77               [ 7] 7202 	ld	(hl), a
                                   7203 ;src\/CheckPlayfield.h:53: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00216C 3Er00            [ 7] 7204 	ld	a, #<(_playfield)
      00216E DD 86 F5         [19] 7205 	add	a, -11 (ix)
      002171 4F               [ 4] 7206 	ld	c, a
      002172 3Es00            [ 7] 7207 	ld	a, #>(_playfield)
      002174 DD 8E F6         [19] 7208 	adc	a, -10 (ix)
      002177 47               [ 4] 7209 	ld	b, a
      002178 79               [ 4] 7210 	ld	a, c
      002179 DD 86 FE         [19] 7211 	add	a, -2 (ix)
      00217C 4F               [ 4] 7212 	ld	c, a
      00217D 30 01            [12] 7213 	jr	NC, 00622$
      00217F 04               [ 4] 7214 	inc	b
      002180                       7215 00622$:
      002180 DD 6E F7         [19] 7216 	ld	l, -9 (ix)
      002183 DD 66 F8         [19] 7217 	ld	h, -8 (ix)
      002186 7E               [ 7] 7218 	ld	a, (hl)
      002187 CB FF            [ 8] 7219 	set	7, a
      002189 02               [ 7] 7220 	ld	(bc), a
      00218A                       7221 00200$:
                                   7222 ;src\/CheckPlayfield.h:43: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      00218A DD 34 FF         [23] 7223 	inc	-1 (ix)
      00218D C3r9Er20         [10] 7224 	jp	00199$
      002190                       7225 00203$:
                                   7226 ;src\/CheckPlayfield.h:42: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002190 DD 34 FE         [23] 7227 	inc	-2 (ix)
      002193 C3r92r20         [10] 7228 	jp	00202$
      002196                       7229 00108$:
                                   7230 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      002196 0E 02            [ 7] 7231 	ld	c, #0x02
      002198                       7232 00208$:
      002198 79               [ 4] 7233 	ld	a, c
      002199 D6 0C            [ 7] 7234 	sub	a, #0x0c
      00219B D2r5Dr22         [10] 7235 	jp	NC, 00114$
                                   7236 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00219E DD 36 FF 00      [19] 7237 	ld	-1 (ix), #0
      0021A2                       7238 00205$:
      0021A2 DD 7E FF         [19] 7239 	ld	a, -1 (ix)
      0021A5 D6 06            [ 7] 7240 	sub	a, #0x06
      0021A7 D2r59r22         [10] 7241 	jp	NC, 00209$
                                   7242 ;src\/CheckPlayfield.h:61: if (playfieldTemp[col][line] != EMPTY &&
      0021AA DD 5E FF         [19] 7243 	ld	e, -1 (ix)
      0021AD 16 00            [ 7] 7244 	ld	d, #0x00
      0021AF 6B               [ 4] 7245 	ld	l, e
      0021B0 62               [ 4] 7246 	ld	h, d
      0021B1 29               [11] 7247 	add	hl, hl
      0021B2 19               [11] 7248 	add	hl, de
      0021B3 29               [11] 7249 	add	hl, hl
      0021B4 29               [11] 7250 	add	hl, hl
      0021B5 DD 75 F7         [19] 7251 	ld	-9 (ix), l
      0021B8 DD 74 F8         [19] 7252 	ld	-8 (ix), h
      0021BB 3Er48            [ 7] 7253 	ld	a, #<(_playfieldTemp)
      0021BD DD 86 F7         [19] 7254 	add	a, -9 (ix)
      0021C0 5F               [ 4] 7255 	ld	e, a
      0021C1 3Es00            [ 7] 7256 	ld	a, #>(_playfieldTemp)
      0021C3 DD 8E F8         [19] 7257 	adc	a, -8 (ix)
      0021C6 57               [ 4] 7258 	ld	d, a
      0021C7 7B               [ 4] 7259 	ld	a, e
      0021C8 81               [ 4] 7260 	add	a, c
      0021C9 DD 77 F9         [19] 7261 	ld	-7 (ix), a
      0021CC 7A               [ 4] 7262 	ld	a, d
      0021CD CE 00            [ 7] 7263 	adc	a, #0x00
      0021CF DD 77 FA         [19] 7264 	ld	-6 (ix), a
      0021D2 DD 6E F9         [19] 7265 	ld	l, -7 (ix)
      0021D5 DD 66 FA         [19] 7266 	ld	h, -6 (ix)
      0021D8 7E               [ 7] 7267 	ld	a, (hl)
      0021D9 DD 77 FE         [19] 7268 	ld	-2 (ix), a
      0021DC B7               [ 4] 7269 	or	a, a
      0021DD 28 74            [12] 7270 	jr	Z, 00206$
                                   7271 ;src\/CheckPlayfield.h:62: playfieldTemp[col][line - 2] == playfieldTemp[col][line - 1] && 
      0021DF DD 71 FD         [19] 7272 	ld	-3 (ix), c
      0021E2 79               [ 4] 7273 	ld	a, c
      0021E3 C6 FE            [ 7] 7274 	add	a, #0xfe
      0021E5 DD 77 FB         [19] 7275 	ld	-5 (ix), a
      0021E8 6F               [ 4] 7276 	ld	l, a
      0021E9 26 00            [ 7] 7277 	ld	h, #0x00
      0021EB 19               [11] 7278 	add	hl, de
      0021EC DD 46 FD         [19] 7279 	ld	b, -3 (ix)
      0021EF 05               [ 4] 7280 	dec	b
      0021F0 7B               [ 4] 7281 	ld	a, e
      0021F1 80               [ 4] 7282 	add	a, b
      0021F2 5F               [ 4] 7283 	ld	e, a
      0021F3 30 01            [12] 7284 	jr	NC, 00623$
      0021F5 14               [ 4] 7285 	inc	d
      0021F6                       7286 00623$:
      0021F6 7E               [ 7] 7287 	ld	a, (hl)
      0021F7 DD 77 FC         [19] 7288 	ld	-4 (ix), a
      0021FA 1A               [ 7] 7289 	ld	a, (de)
      0021FB 6F               [ 4] 7290 	ld	l, a
      0021FC DD 7E FC         [19] 7291 	ld	a, -4 (ix)
      0021FF 95               [ 4] 7292 	sub	a, l
      002200 20 51            [12] 7293 	jr	NZ, 00206$
                                   7294 ;src\/CheckPlayfield.h:63: playfieldTemp[col][line - 1] == playfieldTemp[col][line]) {
      002202 DD 7E FE         [19] 7295 	ld	a, -2 (ix)
      002205 95               [ 4] 7296 	sub	a, l
      002206 20 4B            [12] 7297 	jr	NZ, 00206$
                                   7298 ;src\/CheckPlayfield.h:65: piecesRemoved = TRUE;
      002208 DD 36 EF 01      [19] 7299 	ld	-17 (ix), #0x01
                                   7300 ;src\/CheckPlayfield.h:68: playfield[col][line - 2] = playfieldTemp[col][line - 2] | REMOVING_FLAG;
      00220C 3Er00            [ 7] 7301 	ld	a, #<(_playfield)
      00220E DD 86 F7         [19] 7302 	add	a, -9 (ix)
      002211 DD 77 FD         [19] 7303 	ld	-3 (ix), a
      002214 3Es00            [ 7] 7304 	ld	a, #>(_playfield)
      002216 DD 8E F8         [19] 7305 	adc	a, -8 (ix)
      002219 DD 77 FE         [19] 7306 	ld	-2 (ix), a
      00221C DD 7E FD         [19] 7307 	ld	a, -3 (ix)
      00221F DD 86 FB         [19] 7308 	add	a, -5 (ix)
      002222 6F               [ 4] 7309 	ld	l, a
      002223 DD 7E FE         [19] 7310 	ld	a, -2 (ix)
      002226 CE 00            [ 7] 7311 	adc	a, #0x00
      002228 67               [ 4] 7312 	ld	h, a
      002229 DD 7E FC         [19] 7313 	ld	a, -4 (ix)
      00222C CB FF            [ 8] 7314 	set	7, a
      00222E 77               [ 7] 7315 	ld	(hl), a
                                   7316 ;src\/CheckPlayfield.h:69: playfield[col][line - 1] = playfieldTemp[col][line - 1] | REMOVING_FLAG;
      00222F DD 7E FD         [19] 7317 	ld	a, -3 (ix)
      002232 80               [ 4] 7318 	add	a, b
      002233 6F               [ 4] 7319 	ld	l, a
      002234 DD 7E FE         [19] 7320 	ld	a, -2 (ix)
      002237 CE 00            [ 7] 7321 	adc	a, #0x00
      002239 67               [ 4] 7322 	ld	h, a
      00223A 1A               [ 7] 7323 	ld	a, (de)
      00223B CB FF            [ 8] 7324 	set	7, a
      00223D 77               [ 7] 7325 	ld	(hl), a
                                   7326 ;src\/CheckPlayfield.h:70: playfield[col][line] = 	   playfieldTemp[col][line] | REMOVING_FLAG;
      00223E DD 7E FD         [19] 7327 	ld	a, -3 (ix)
      002241 81               [ 4] 7328 	add	a, c
      002242 5F               [ 4] 7329 	ld	e, a
      002243 DD 7E FE         [19] 7330 	ld	a, -2 (ix)
      002246 CE 00            [ 7] 7331 	adc	a, #0x00
      002248 57               [ 4] 7332 	ld	d, a
      002249 DD 6E F9         [19] 7333 	ld	l, -7 (ix)
      00224C DD 66 FA         [19] 7334 	ld	h, -6 (ix)
      00224F 7E               [ 7] 7335 	ld	a, (hl)
      002250 CB FF            [ 8] 7336 	set	7, a
      002252 12               [ 7] 7337 	ld	(de), a
      002253                       7338 00206$:
                                   7339 ;src\/CheckPlayfield.h:60: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002253 DD 34 FF         [23] 7340 	inc	-1 (ix)
      002256 C3rA2r21         [10] 7341 	jp	00205$
      002259                       7342 00209$:
                                   7343 ;src\/CheckPlayfield.h:59: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      002259 0C               [ 4] 7344 	inc	c
      00225A C3r98r21         [10] 7345 	jp	00208$
      00225D                       7346 00114$:
                                   7347 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      00225D DD 36 FE 02      [19] 7348 	ld	-2 (ix), #0x02
      002261                       7349 00214$:
      002261 DD 7E FE         [19] 7350 	ld	a, -2 (ix)
      002264 D6 0C            [ 7] 7351 	sub	a, #0x0c
      002266 D2r04r24         [10] 7352 	jp	NC, 00124$
                                   7353 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      002269 DD 36 FF 02      [19] 7354 	ld	-1 (ix), #0x02
      00226D                       7355 00211$:
      00226D DD 7E FF         [19] 7356 	ld	a, -1 (ix)
      002270 D6 06            [ 7] 7357 	sub	a, #0x06
      002272 D2rFEr23         [10] 7358 	jp	NC, 00215$
                                   7359 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      002275 DD 4E FF         [19] 7360 	ld	c, -1 (ix)
      002278 06 00            [ 7] 7361 	ld	b, #0x00
      00227A 69               [ 4] 7362 	ld	l, c
      00227B 60               [ 4] 7363 	ld	h, b
      00227C 29               [11] 7364 	add	hl, hl
      00227D 09               [11] 7365 	add	hl, bc
      00227E 29               [11] 7366 	add	hl, hl
      00227F 29               [11] 7367 	add	hl, hl
      002280 DD 75 F0         [19] 7368 	ld	-16 (ix), l
      002283 DD 74 F1         [19] 7369 	ld	-15 (ix), h
      002286 3Er48            [ 7] 7370 	ld	a, #<(_playfieldTemp)
      002288 DD 86 F0         [19] 7371 	add	a, -16 (ix)
      00228B 4F               [ 4] 7372 	ld	c, a
      00228C 3Es00            [ 7] 7373 	ld	a, #>(_playfieldTemp)
      00228E DD 8E F1         [19] 7374 	adc	a, -15 (ix)
      002291 47               [ 4] 7375 	ld	b, a
      002292 79               [ 4] 7376 	ld	a, c
      002293 DD 86 FE         [19] 7377 	add	a, -2 (ix)
      002296 DD 77 F2         [19] 7378 	ld	-14 (ix), a
      002299 78               [ 4] 7379 	ld	a, b
      00229A CE 00            [ 7] 7380 	adc	a, #0x00
      00229C DD 77 F3         [19] 7381 	ld	-13 (ix), a
      00229F DD 6E F2         [19] 7382 	ld	l, -14 (ix)
      0022A2 DD 66 F3         [19] 7383 	ld	h, -13 (ix)
      0022A5 5E               [ 7] 7384 	ld	e, (hl)
                                   7385 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      0022A6 DD 56 FF         [19] 7386 	ld	d, -1 (ix)
      0022A9 DD 66 FE         [19] 7387 	ld	h, -2 (ix)
      0022AC 6A               [ 4] 7388 	ld	l, d
      0022AD 2D               [ 4] 7389 	dec	l
      0022AE 2D               [ 4] 7390 	dec	l
      0022AF 7C               [ 4] 7391 	ld	a, h
      0022B0 C6 FE            [ 7] 7392 	add	a, #0xfe
      0022B2 DD 77 F4         [19] 7393 	ld	-12 (ix), a
      0022B5 15               [ 4] 7394 	dec	d
      0022B6 7C               [ 4] 7395 	ld	a, h
      0022B7 C6 FF            [ 7] 7396 	add	a, #0xff
      0022B9 DD 77 F5         [19] 7397 	ld	-11 (ix), a
      0022BC D5               [11] 7398 	push	de
      0022BD 5D               [ 4] 7399 	ld	e, l
      0022BE 7B               [ 4] 7400 	ld	a, e
      0022BF 07               [ 4] 7401 	rlca
      0022C0 9F               [ 4] 7402 	sbc	a, a
      0022C1 57               [ 4] 7403 	ld	d, a
      0022C2 6B               [ 4] 7404 	ld	l, e
      0022C3 62               [ 4] 7405 	ld	h, d
      0022C4 29               [11] 7406 	add	hl, hl
      0022C5 19               [11] 7407 	add	hl, de
      0022C6 29               [11] 7408 	add	hl, hl
      0022C7 29               [11] 7409 	add	hl, hl
      0022C8 D1               [10] 7410 	pop	de
      0022C9 DD 75 F6         [19] 7411 	ld	-10 (ix), l
      0022CC DD 74 F7         [19] 7412 	ld	-9 (ix), h
      0022CF D5               [11] 7413 	push	de
      0022D0 5A               [ 4] 7414 	ld	e, d
      0022D1 7B               [ 4] 7415 	ld	a, e
      0022D2 07               [ 4] 7416 	rlca
      0022D3 9F               [ 4] 7417 	sbc	a, a
      0022D4 57               [ 4] 7418 	ld	d, a
      0022D5 6B               [ 4] 7419 	ld	l, e
      0022D6 62               [ 4] 7420 	ld	h, d
      0022D7 29               [11] 7421 	add	hl, hl
      0022D8 19               [11] 7422 	add	hl, de
      0022D9 29               [11] 7423 	add	hl, hl
      0022DA 29               [11] 7424 	add	hl, hl
      0022DB D1               [10] 7425 	pop	de
      0022DC DD 75 F8         [19] 7426 	ld	-8 (ix), l
      0022DF DD 74 F9         [19] 7427 	ld	-7 (ix), h
      0022E2 3Er48            [ 7] 7428 	ld	a, #<(_playfieldTemp)
      0022E4 DD 86 F6         [19] 7429 	add	a, -10 (ix)
      0022E7 DD 77 FA         [19] 7430 	ld	-6 (ix), a
      0022EA 3Es00            [ 7] 7431 	ld	a, #>(_playfieldTemp)
      0022EC DD 8E F7         [19] 7432 	adc	a, -9 (ix)
      0022EF DD 77 FB         [19] 7433 	ld	-5 (ix), a
      0022F2 3Er48            [ 7] 7434 	ld	a, #<(_playfieldTemp)
      0022F4 DD 86 F8         [19] 7435 	add	a, -8 (ix)
      0022F7 57               [ 4] 7436 	ld	d, a
      0022F8 3Es00            [ 7] 7437 	ld	a, #>(_playfieldTemp)
      0022FA DD 8E F9         [19] 7438 	adc	a, -7 (ix)
      0022FD 6F               [ 4] 7439 	ld	l, a
      0022FE 7A               [ 4] 7440 	ld	a, d
      0022FF DD 86 F5         [19] 7441 	add	a, -11 (ix)
      002302 DD 77 FC         [19] 7442 	ld	-4 (ix), a
      002305 7D               [ 4] 7443 	ld	a, l
      002306 CE 00            [ 7] 7444 	adc	a, #0x00
      002308 DD 77 FD         [19] 7445 	ld	-3 (ix), a
                                   7446 ;src\/CheckPlayfield.h:78: if (playfieldTemp[col][line] != EMPTY &&
      00230B 7B               [ 4] 7447 	ld	a, e
      00230C B7               [ 4] 7448 	or	a, a
      00230D 28 74            [12] 7449 	jr	Z, 00116$
                                   7450 ;src\/CheckPlayfield.h:79: playfieldTemp[col - 2][line - 2] == playfieldTemp[col - 1][line - 1] && 
      00230F DD 7E FA         [19] 7451 	ld	a, -6 (ix)
      002312 DD 86 F4         [19] 7452 	add	a, -12 (ix)
      002315 6F               [ 4] 7453 	ld	l, a
      002316 DD 7E FB         [19] 7454 	ld	a, -5 (ix)
      002319 CE 00            [ 7] 7455 	adc	a, #0x00
      00231B 67               [ 4] 7456 	ld	h, a
      00231C 56               [ 7] 7457 	ld	d, (hl)
      00231D DD 6E FC         [19] 7458 	ld	l, -4 (ix)
      002320 DD 66 FD         [19] 7459 	ld	h, -3 (ix)
      002323 6E               [ 7] 7460 	ld	l, (hl)
      002324 7A               [ 4] 7461 	ld	a, d
      002325 95               [ 4] 7462 	sub	a, l
      002326 20 5B            [12] 7463 	jr	NZ, 00116$
                                   7464 ;src\/CheckPlayfield.h:80: playfieldTemp[col - 1][line - 1] == playfieldTemp[col][line]) {
      002328 7B               [ 4] 7465 	ld	a, e
      002329 95               [ 4] 7466 	sub	a, l
      00232A 20 57            [12] 7467 	jr	NZ, 00116$
                                   7468 ;src\/CheckPlayfield.h:82: piecesRemoved = TRUE;
      00232C DD 36 EF 01      [19] 7469 	ld	-17 (ix), #0x01
                                   7470 ;src\/CheckPlayfield.h:85: playfield[col - 2][line - 2] = playfieldTemp[col - 2][line - 2] | REMOVING_FLAG;
      002330 3Er00            [ 7] 7471 	ld	a, #<(_playfield)
      002332 DD 86 F6         [19] 7472 	add	a, -10 (ix)
      002335 5F               [ 4] 7473 	ld	e, a
      002336 3Es00            [ 7] 7474 	ld	a, #>(_playfield)
      002338 DD 8E F7         [19] 7475 	adc	a, -9 (ix)
      00233B 67               [ 4] 7476 	ld	h, a
      00233C 7B               [ 4] 7477 	ld	a, e
      00233D DD 86 F4         [19] 7478 	add	a, -12 (ix)
      002340 6F               [ 4] 7479 	ld	l, a
      002341 30 01            [12] 7480 	jr	NC, 00632$
      002343 24               [ 4] 7481 	inc	h
      002344                       7482 00632$:
      002344 CB FA            [ 8] 7483 	set	7, d
      002346 72               [ 7] 7484 	ld	(hl), d
                                   7485 ;src\/CheckPlayfield.h:86: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      002347 3Er00            [ 7] 7486 	ld	a, #<(_playfield)
      002349 DD 86 F8         [19] 7487 	add	a, -8 (ix)
      00234C 5F               [ 4] 7488 	ld	e, a
      00234D 3Es00            [ 7] 7489 	ld	a, #>(_playfield)
      00234F DD 8E F9         [19] 7490 	adc	a, -7 (ix)
      002352 57               [ 4] 7491 	ld	d, a
      002353 7B               [ 4] 7492 	ld	a, e
      002354 DD 86 F5         [19] 7493 	add	a, -11 (ix)
      002357 5F               [ 4] 7494 	ld	e, a
      002358 30 01            [12] 7495 	jr	NC, 00633$
      00235A 14               [ 4] 7496 	inc	d
      00235B                       7497 00633$:
      00235B DD 6E FC         [19] 7498 	ld	l, -4 (ix)
      00235E DD 66 FD         [19] 7499 	ld	h, -3 (ix)
      002361 7E               [ 7] 7500 	ld	a, (hl)
      002362 CB FF            [ 8] 7501 	set	7, a
      002364 12               [ 7] 7502 	ld	(de), a
                                   7503 ;src\/CheckPlayfield.h:87: playfield[col][line] = 	       playfieldTemp[col][line] | REMOVING_FLAG;
      002365 3Er00            [ 7] 7504 	ld	a, #<(_playfield)
      002367 DD 86 F0         [19] 7505 	add	a, -16 (ix)
      00236A 5F               [ 4] 7506 	ld	e, a
      00236B 3Es00            [ 7] 7507 	ld	a, #>(_playfield)
      00236D DD 8E F1         [19] 7508 	adc	a, -15 (ix)
      002370 57               [ 4] 7509 	ld	d, a
      002371 7B               [ 4] 7510 	ld	a, e
      002372 DD 86 FE         [19] 7511 	add	a, -2 (ix)
      002375 5F               [ 4] 7512 	ld	e, a
      002376 30 01            [12] 7513 	jr	NC, 00634$
      002378 14               [ 4] 7514 	inc	d
      002379                       7515 00634$:
      002379 DD 6E F2         [19] 7516 	ld	l, -14 (ix)
      00237C DD 66 F3         [19] 7517 	ld	h, -13 (ix)
      00237F 7E               [ 7] 7518 	ld	a, (hl)
      002380 CB FF            [ 8] 7519 	set	7, a
      002382 12               [ 7] 7520 	ld	(de), a
      002383                       7521 00116$:
                                   7522 ;src\/CheckPlayfield.h:89: if (playfieldTemp[col][line - 2] != EMPTY &&
      002383 DD 6E F4         [19] 7523 	ld	l, -12 (ix)
      002386 26 00            [ 7] 7524 	ld	h, #0x00
      002388 09               [11] 7525 	add	hl, bc
      002389 4E               [ 7] 7526 	ld	c, (hl)
      00238A 79               [ 4] 7527 	ld	a, c
      00238B B7               [ 4] 7528 	or	a, a
      00238C 28 6A            [12] 7529 	jr	Z, 00212$
                                   7530 ;src\/CheckPlayfield.h:90: playfieldTemp[col - 1][line - 1] == playfieldTemp[col - 2][line] && 
      00238E DD 7E FA         [19] 7531 	ld	a, -6 (ix)
      002391 DD 86 FE         [19] 7532 	add	a, -2 (ix)
      002394 5F               [ 4] 7533 	ld	e, a
      002395 DD 7E FB         [19] 7534 	ld	a, -5 (ix)
      002398 CE 00            [ 7] 7535 	adc	a, #0x00
      00239A 57               [ 4] 7536 	ld	d, a
      00239B DD 6E FC         [19] 7537 	ld	l, -4 (ix)
      00239E DD 66 FD         [19] 7538 	ld	h, -3 (ix)
      0023A1 46               [ 7] 7539 	ld	b, (hl)
      0023A2 1A               [ 7] 7540 	ld	a, (de)
      0023A3 B8               [ 4] 7541 	cp	a, b
      0023A4 20 52            [12] 7542 	jr	NZ, 00212$
                                   7543 ;src\/CheckPlayfield.h:91: playfieldTemp[col - 2][line] == playfieldTemp[col][line - 2]) {
      0023A6 91               [ 4] 7544 	sub	a, c
      0023A7 20 4F            [12] 7545 	jr	NZ, 00212$
                                   7546 ;src\/CheckPlayfield.h:93: piecesRemoved = TRUE;
      0023A9 DD 36 EF 01      [19] 7547 	ld	-17 (ix), #0x01
                                   7548 ;src\/CheckPlayfield.h:96: playfield[col][line - 2] =     playfieldTemp[col][line - 2] | REMOVING_FLAG;
      0023AD 3Er00            [ 7] 7549 	ld	a, #<(_playfield)
      0023AF DD 86 F0         [19] 7550 	add	a, -16 (ix)
      0023B2 47               [ 4] 7551 	ld	b, a
      0023B3 3Es00            [ 7] 7552 	ld	a, #>(_playfield)
      0023B5 DD 8E F1         [19] 7553 	adc	a, -15 (ix)
      0023B8 67               [ 4] 7554 	ld	h, a
      0023B9 78               [ 4] 7555 	ld	a, b
      0023BA DD 86 F4         [19] 7556 	add	a, -12 (ix)
      0023BD 6F               [ 4] 7557 	ld	l, a
      0023BE 30 01            [12] 7558 	jr	NC, 00639$
      0023C0 24               [ 4] 7559 	inc	h
      0023C1                       7560 00639$:
      0023C1 CB F9            [ 8] 7561 	set	7, c
      0023C3 71               [ 7] 7562 	ld	(hl), c
                                   7563 ;src\/CheckPlayfield.h:97: playfield[col - 1][line - 1] = playfieldTemp[col - 1][line - 1] | REMOVING_FLAG;
      0023C4 3Er00            [ 7] 7564 	ld	a, #<(_playfield)
      0023C6 DD 86 F8         [19] 7565 	add	a, -8 (ix)
      0023C9 4F               [ 4] 7566 	ld	c, a
      0023CA 3Es00            [ 7] 7567 	ld	a, #>(_playfield)
      0023CC DD 8E F9         [19] 7568 	adc	a, -7 (ix)
      0023CF 47               [ 4] 7569 	ld	b, a
      0023D0 79               [ 4] 7570 	ld	a, c
      0023D1 DD 86 F5         [19] 7571 	add	a, -11 (ix)
      0023D4 4F               [ 4] 7572 	ld	c, a
      0023D5 30 01            [12] 7573 	jr	NC, 00640$
      0023D7 04               [ 4] 7574 	inc	b
      0023D8                       7575 00640$:
      0023D8 DD 6E FC         [19] 7576 	ld	l, -4 (ix)
      0023DB DD 66 FD         [19] 7577 	ld	h, -3 (ix)
      0023DE 7E               [ 7] 7578 	ld	a, (hl)
      0023DF CB FF            [ 8] 7579 	set	7, a
      0023E1 02               [ 7] 7580 	ld	(bc), a
                                   7581 ;src\/CheckPlayfield.h:98: playfield[col - 2][line] =     playfieldTemp[col - 2][line] | REMOVING_FLAG;
      0023E2 3Er00            [ 7] 7582 	ld	a, #<(_playfield)
      0023E4 DD 86 F6         [19] 7583 	add	a, -10 (ix)
      0023E7 4F               [ 4] 7584 	ld	c, a
      0023E8 3Es00            [ 7] 7585 	ld	a, #>(_playfield)
      0023EA DD 8E F7         [19] 7586 	adc	a, -9 (ix)
      0023ED 47               [ 4] 7587 	ld	b, a
      0023EE DD 6E FE         [19] 7588 	ld	l, -2 (ix)
      0023F1 26 00            [ 7] 7589 	ld	h, #0x00
      0023F3 09               [11] 7590 	add	hl, bc
      0023F4 1A               [ 7] 7591 	ld	a, (de)
      0023F5 CB FF            [ 8] 7592 	set	7, a
      0023F7 77               [ 7] 7593 	ld	(hl), a
      0023F8                       7594 00212$:
                                   7595 ;src\/CheckPlayfield.h:77: for(byte col = 2; col < COLS_PLAYFIELD; col++) {
      0023F8 DD 34 FF         [23] 7596 	inc	-1 (ix)
      0023FB C3r6Dr22         [10] 7597 	jp	00211$
      0023FE                       7598 00215$:
                                   7599 ;src\/CheckPlayfield.h:76: for(byte line = 2; line < LINES_PLAYFIELD; line++) {
      0023FE DD 34 FE         [23] 7600 	inc	-2 (ix)
      002401 C3r61r22         [10] 7601 	jp	00214$
      002404                       7602 00124$:
                                   7603 ;src\/CheckPlayfield.h:103: if(piecesRemoved) {
      002404 DD 7E EF         [19] 7604 	ld	a, -17 (ix)
      002407 B7               [ 4] 7605 	or	a, a
      002408 CArB0r27         [10] 7606 	jp	Z, 00190$
                                   7607 ;src\/CheckPlayfield.h:109: byte x = 255, y = 0;
      00240B DD 36 F5 FF      [19] 7608 	ld	-11 (ix), #0xff
      00240F DD 36 F6 00      [19] 7609 	ld	-10 (ix), #0
                                   7610 ;src\/CheckPlayfield.h:111: byte leftmostPieceRemoved = 5, rightmostPieceRemoved = 0;
      002413 DD 36 F7 05      [19] 7611 	ld	-9 (ix), #0x05
      002417 DD 36 F8 00      [19] 7612 	ld	-8 (ix), #0
                                   7613 ;src\/CheckPlayfield.h:112: byte lowermostPieceRemoved = 11,   upmostPieceRemoved = 0;
      00241B DD 36 F9 0B      [19] 7614 	ld	-7 (ix), #0x0b
      00241F DD 36 FA 00      [19] 7615 	ld	-6 (ix), #0
                                   7616 ;src\/CheckPlayfield.h:114: HideArrowSprite();
      002423 CDr48r0C         [17] 7617 	call	_HideArrowSprite
                                   7618 ;src\/CheckPlayfield.h:116: SoundFx_2();
      002426 CDrE0r1F         [17] 7619 	call	_SoundFx_2
                                   7620 ;src\/CheckPlayfield.h:119: numberPiecesRemoved = 0;
      002429 DD 36 FB 00      [19] 7621 	ld	-5 (ix), #0
                                   7622 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00242D DD 36 FF 00      [19] 7623 	ld	-1 (ix), #0
      002431                       7624 00220$:
      002431 DD 7E FF         [19] 7625 	ld	a, -1 (ix)
      002434 D6 0C            [ 7] 7626 	sub	a, #0x0c
      002436 30 5F            [12] 7627 	jr	NC, 00291$
                                   7628 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002438 DD 5E FB         [19] 7629 	ld	e, -5 (ix)
      00243B 06 00            [ 7] 7630 	ld	b, #0x00
      00243D                       7631 00217$:
      00243D 78               [ 4] 7632 	ld	a, b
      00243E D6 06            [ 7] 7633 	sub	a, #0x06
      002440 30 4D            [12] 7634 	jr	NC, 00320$
                                   7635 ;src\/CheckPlayfield.h:122: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002442 D5               [11] 7636 	push	de
      002443 58               [ 4] 7637 	ld	e, b
      002444 16 00            [ 7] 7638 	ld	d, #0x00
      002446 6B               [ 4] 7639 	ld	l, e
      002447 62               [ 4] 7640 	ld	h, d
      002448 29               [11] 7641 	add	hl, hl
      002449 19               [11] 7642 	add	hl, de
      00244A 29               [11] 7643 	add	hl, hl
      00244B 29               [11] 7644 	add	hl, hl
      00244C 11r00r00         [10] 7645 	ld	de, #_playfield
      00244F 19               [11] 7646 	add	hl, de
      002450 D1               [10] 7647 	pop	de
      002451 7D               [ 4] 7648 	ld	a, l
      002452 DD 86 FF         [19] 7649 	add	a, -1 (ix)
      002455 6F               [ 4] 7650 	ld	l, a
      002456 30 01            [12] 7651 	jr	NC, 00641$
      002458 24               [ 4] 7652 	inc	h
      002459                       7653 00641$:
      002459 7E               [ 7] 7654 	ld	a, (hl)
      00245A 07               [ 4] 7655 	rlca
      00245B 30 2F            [12] 7656 	jr	NC, 00218$
                                   7657 ;src\/CheckPlayfield.h:123: numberPiecesRemoved++;
      00245D 1C               [ 4] 7658 	inc	e
                                   7659 ;src\/CheckPlayfield.h:125: if(col < leftmostPieceRemoved) leftmostPieceRemoved = col;
      00245E 78               [ 4] 7660 	ld	a, b
      00245F DD 96 F7         [19] 7661 	sub	a, -9 (ix)
      002462 30 03            [12] 7662 	jr	NC, 00126$
      002464 DD 70 F7         [19] 7663 	ld	-9 (ix), b
      002467                       7664 00126$:
                                   7665 ;src\/CheckPlayfield.h:126: if(col > rightmostPieceRemoved) rightmostPieceRemoved = col;
      002467 DD 7E F8         [19] 7666 	ld	a, -8 (ix)
      00246A 90               [ 4] 7667 	sub	a, b
      00246B 30 03            [12] 7668 	jr	NC, 00128$
      00246D DD 70 F8         [19] 7669 	ld	-8 (ix), b
      002470                       7670 00128$:
                                   7671 ;src\/CheckPlayfield.h:127: if(line < lowermostPieceRemoved) lowermostPieceRemoved = line;
      002470 DD 7E FF         [19] 7672 	ld	a, -1 (ix)
      002473 DD 96 F9         [19] 7673 	sub	a, -7 (ix)
      002476 30 06            [12] 7674 	jr	NC, 00130$
      002478 DD 7E FF         [19] 7675 	ld	a, -1 (ix)
      00247B DD 77 F9         [19] 7676 	ld	-7 (ix), a
      00247E                       7677 00130$:
                                   7678 ;src\/CheckPlayfield.h:128: if(line > upmostPieceRemoved) upmostPieceRemoved = line;
      00247E DD 7E FA         [19] 7679 	ld	a, -6 (ix)
      002481 DD 96 FF         [19] 7680 	sub	a, -1 (ix)
      002484 30 06            [12] 7681 	jr	NC, 00218$
      002486 DD 7E FF         [19] 7682 	ld	a, -1 (ix)
      002489 DD 77 FA         [19] 7683 	ld	-6 (ix), a
      00248C                       7684 00218$:
                                   7685 ;src\/CheckPlayfield.h:121: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00248C 04               [ 4] 7686 	inc	b
      00248D 18 AE            [12] 7687 	jr	00217$
      00248F                       7688 00320$:
      00248F DD 73 FB         [19] 7689 	ld	-5 (ix), e
                                   7690 ;src\/CheckPlayfield.h:120: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002492 DD 34 FF         [23] 7691 	inc	-1 (ix)
      002495 18 9A            [12] 7692 	jr	00220$
                                   7693 ;src\/CheckPlayfield.h:142: while(counter-- > 0) {
      002497                       7694 00291$:
      002497 DD 36 FF 48      [19] 7695 	ld	-1 (ix), #0x48
      00249B                       7696 00166$:
      00249B DD 4E FF         [19] 7697 	ld	c, -1 (ix)
      00249E DD 35 FF         [23] 7698 	dec	-1 (ix)
      0024A1 79               [ 4] 7699 	ld	a, c
      0024A2 B7               [ 4] 7700 	or	a, a
      0024A3 CAr4Br26         [10] 7701 	jp	Z, 00168$
                                   7702 ;src\/CheckPlayfield.h:144: word lastJiffy = JIFFY;
      0024A6 ED 5B 9E FC      [20] 7703 	ld	de, (_JIFFY)
                                   7704 ;src\/CheckPlayfield.h:145: while (lastJiffy == JIFFY) {
      0024AA                       7705 00137$:
      0024AA 2A 9E FC         [16] 7706 	ld	hl, (_JIFFY)
      0024AD BF               [ 4] 7707 	cp	a, a
      0024AE ED 52            [15] 7708 	sbc	hl, de
      0024B0 28 F8            [12] 7709 	jr	Z, 00137$
                                   7710 ;src\/CheckPlayfield.h:151: if(numberPiecesRemoved >= 3) {
      0024B2 DD 7E FB         [19] 7711 	ld	a, -5 (ix)
      0024B5 D6 03            [ 7] 7712 	sub	a, #0x03
      0024B7 DAr69r25         [10] 7713 	jp	C, 00301$
                                   7714 ;src\/CheckPlayfield.h:153: if(numberPiecesRemoved >= 7) numberPiecesRemoved = 7;
      0024BA DD 7E FB         [19] 7715 	ld	a, -5 (ix)
      0024BD D6 07            [ 7] 7716 	sub	a, #0x07
      0024BF 38 04            [12] 7717 	jr	C, 00141$
      0024C1 DD 36 FB 07      [19] 7718 	ld	-5 (ix), #0x07
      0024C5                       7719 00141$:
                                   7720 ;src\/CheckPlayfield.h:155: if(x == 255) { // do this expensive calculation only once
      0024C5 DD 7E F5         [19] 7721 	ld	a, -11 (ix)
      0024C8 3C               [ 4] 7722 	inc	a
      0024C9 20 7B            [12] 7723 	jr	NZ, 00143$
                                   7724 ;src\/CheckPlayfield.h:156: x = (PLAYFIELD_HORIZ_OFFSET * 8) + (((rightmostPieceRemoved * 16) - (leftmostPieceRemoved * 16)) / 2) + (leftmostPieceRemoved * 16);
      0024CB DD 6E F8         [19] 7725 	ld	l, -8 (ix)
      0024CE 26 00            [ 7] 7726 	ld	h, #0x00
      0024D0 29               [11] 7727 	add	hl, hl
      0024D1 29               [11] 7728 	add	hl, hl
      0024D2 29               [11] 7729 	add	hl, hl
      0024D3 29               [11] 7730 	add	hl, hl
      0024D4 DD 5E F7         [19] 7731 	ld	e, -9 (ix)
      0024D7 16 00            [ 7] 7732 	ld	d, #0x00
      0024D9 EB               [ 4] 7733 	ex	de, hl
      0024DA 29               [11] 7734 	add	hl, hl
      0024DB 29               [11] 7735 	add	hl, hl
      0024DC 29               [11] 7736 	add	hl, hl
      0024DD 29               [11] 7737 	add	hl, hl
      0024DE EB               [ 4] 7738 	ex	de, hl
      0024DF BF               [ 4] 7739 	cp	a, a
      0024E0 ED 52            [15] 7740 	sbc	hl, de
      0024E2 4D               [ 4] 7741 	ld	c, l
      0024E3 44               [ 4] 7742 	ld	b, h
      0024E4 CB 7C            [ 8] 7743 	bit	7, h
      0024E6 28 03            [12] 7744 	jr	Z, 00239$
      0024E8 4D               [ 4] 7745 	ld	c, l
      0024E9 44               [ 4] 7746 	ld	b, h
      0024EA 03               [ 6] 7747 	inc	bc
      0024EB                       7748 00239$:
      0024EB CB 28            [ 8] 7749 	sra	b
      0024ED CB 19            [ 8] 7750 	rr	c
      0024EF 79               [ 4] 7751 	ld	a, c
      0024F0 C6 50            [ 7] 7752 	add	a, #0x50
      0024F2 DD 6E F7         [19] 7753 	ld	l, -9 (ix)
      0024F5 29               [11] 7754 	add	hl, hl
      0024F6 29               [11] 7755 	add	hl, hl
      0024F7 29               [11] 7756 	add	hl, hl
      0024F8 29               [11] 7757 	add	hl, hl
      0024F9 85               [ 4] 7758 	add	a, l
      0024FA DD 77 F5         [19] 7759 	ld	-11 (ix), a
                                   7760 ;src\/CheckPlayfield.h:158: y = (((lowermostPieceRemoved * 16) - (upmostPieceRemoved * 16)) / 2) + (upmostPieceRemoved * 16);
      0024FD DD 6E F9         [19] 7761 	ld	l, -7 (ix)
      002500 26 00            [ 7] 7762 	ld	h, #0x00
      002502 29               [11] 7763 	add	hl, hl
      002503 29               [11] 7764 	add	hl, hl
      002504 29               [11] 7765 	add	hl, hl
      002505 29               [11] 7766 	add	hl, hl
      002506 DD 5E FA         [19] 7767 	ld	e, -6 (ix)
      002509 16 00            [ 7] 7768 	ld	d, #0x00
      00250B EB               [ 4] 7769 	ex	de, hl
      00250C 29               [11] 7770 	add	hl, hl
      00250D 29               [11] 7771 	add	hl, hl
      00250E 29               [11] 7772 	add	hl, hl
      00250F 29               [11] 7773 	add	hl, hl
      002510 EB               [ 4] 7774 	ex	de, hl
      002511 BF               [ 4] 7775 	cp	a, a
      002512 ED 52            [15] 7776 	sbc	hl, de
      002514 4D               [ 4] 7777 	ld	c, l
      002515 44               [ 4] 7778 	ld	b, h
      002516 CB 7C            [ 8] 7779 	bit	7, h
      002518 28 03            [12] 7780 	jr	Z, 00240$
      00251A 23               [ 6] 7781 	inc	hl
      00251B 4D               [ 4] 7782 	ld	c, l
      00251C 44               [ 4] 7783 	ld	b, h
      00251D                       7784 00240$:
      00251D CB 28            [ 8] 7785 	sra	b
      00251F CB 19            [ 8] 7786 	rr	c
      002521 DD 7E FA         [19] 7787 	ld	a, -6 (ix)
      002524 87               [ 4] 7788 	add	a, a
      002525 87               [ 4] 7789 	add	a, a
      002526 87               [ 4] 7790 	add	a, a
      002527 87               [ 4] 7791 	add	a, a
      002528 81               [ 4] 7792 	add	a, c
      002529 DD 77 F6         [19] 7793 	ld	-10 (ix), a
                                   7794 ;src\/CheckPlayfield.h:159: DrawHitSprite(numberPiecesRemoved, iteration, x, y, TRUE);
      00252C 26 01            [ 7] 7795 	ld	h, #0x01
      00252E DD 6E F6         [19] 7796 	ld	l, -10 (ix)
      002531 E5               [11] 7797 	push	hl
      002532 DD 66 F5         [19] 7798 	ld	h, -11 (ix)
      002535 DD 6E 04         [19] 7799 	ld	l, 4 (ix)
      002538 E5               [11] 7800 	push	hl
      002539 DD 7E FB         [19] 7801 	ld	a, -5 (ix)
      00253C F5               [11] 7802 	push	af
      00253D 33               [ 6] 7803 	inc	sp
      00253E CDr56r0C         [17] 7804 	call	_DrawHitSprite
      002541 F1               [10] 7805 	pop	af
      002542 F1               [10] 7806 	pop	af
      002543 33               [ 6] 7807 	inc	sp
      002544 18 23            [12] 7808 	jr	00301$
      002546                       7809 00143$:
                                   7810 ;src\/CheckPlayfield.h:165: DrawHitSprite(numberPiecesRemoved, iteration, x, y - (72 - counter), FALSE);
      002546 DD 4E FF         [19] 7811 	ld	c, -1 (ix)
      002549 3E 48            [ 7] 7812 	ld	a, #0x48
      00254B 91               [ 4] 7813 	sub	a, c
      00254C 4F               [ 4] 7814 	ld	c, a
      00254D DD 7E F6         [19] 7815 	ld	a, -10 (ix)
      002550 91               [ 4] 7816 	sub	a, c
      002551 26 00            [ 7] 7817 	ld	h, #0x00
      002553 E5               [11] 7818 	push	hl
      002554 33               [ 6] 7819 	inc	sp
      002555 F5               [11] 7820 	push	af
      002556 33               [ 6] 7821 	inc	sp
      002557 DD 66 F5         [19] 7822 	ld	h, -11 (ix)
      00255A DD 6E 04         [19] 7823 	ld	l, 4 (ix)
      00255D E5               [11] 7824 	push	hl
      00255E DD 7E FB         [19] 7825 	ld	a, -5 (ix)
      002561 F5               [11] 7826 	push	af
      002562 33               [ 6] 7827 	inc	sp
      002563 CDr56r0C         [17] 7828 	call	_DrawHitSprite
      002566 F1               [10] 7829 	pop	af
      002567 F1               [10] 7830 	pop	af
      002568 33               [ 6] 7831 	inc	sp
                                   7832 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002569                       7833 00301$:
      002569 3E 0C            [ 7] 7834 	ld	a, #0x0c
      00256B DD 96 FF         [19] 7835 	sub	a, -1 (ix)
      00256E 3E 00            [ 7] 7836 	ld	a, #0x00
      002570 17               [ 4] 7837 	rla
      002571 5F               [ 4] 7838 	ld	e, a
      002572 3E 09            [ 7] 7839 	ld	a, #0x09
      002574 DD 96 FF         [19] 7840 	sub	a, -1 (ix)
      002577 3E 00            [ 7] 7841 	ld	a, #0x00
      002579 17               [ 4] 7842 	rla
      00257A 4F               [ 4] 7843 	ld	c, a
      00257B 3E 06            [ 7] 7844 	ld	a, #0x06
      00257D DD 96 FF         [19] 7845 	sub	a, -1 (ix)
      002580 3E 00            [ 7] 7846 	ld	a, #0x00
      002582 17               [ 4] 7847 	rla
      002583 DD 77 FC         [19] 7848 	ld	-4 (ix), a
      002586 3E 03            [ 7] 7849 	ld	a, #0x03
      002588 DD 96 FF         [19] 7850 	sub	a, -1 (ix)
      00258B 3E 00            [ 7] 7851 	ld	a, #0x00
      00258D 17               [ 4] 7852 	rla
      00258E DD 77 FD         [19] 7853 	ld	-3 (ix), a
      002591 06 00            [ 7] 7854 	ld	b, #0x00
      002593                       7855 00226$:
      002593 78               [ 4] 7856 	ld	a, b
      002594 D6 0C            [ 7] 7857 	sub	a, #0x0c
      002596 D2r9Br24         [10] 7858 	jp	NC, 00166$
                                   7859 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002599 16 00            [ 7] 7860 	ld	d, #0x00
      00259B                       7861 00223$:
      00259B 7A               [ 4] 7862 	ld	a, d
      00259C D6 06            [ 7] 7863 	sub	a, #0x06
      00259E D2r47r26         [10] 7864 	jp	NC, 00227$
                                   7865 ;src\/CheckPlayfield.h:172: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      0025A1 D5               [11] 7866 	push	de
      0025A2 5A               [ 4] 7867 	ld	e, d
      0025A3 16 00            [ 7] 7868 	ld	d, #0x00
      0025A5 6B               [ 4] 7869 	ld	l, e
      0025A6 62               [ 4] 7870 	ld	h, d
      0025A7 29               [11] 7871 	add	hl, hl
      0025A8 19               [11] 7872 	add	hl, de
      0025A9 29               [11] 7873 	add	hl, hl
      0025AA 29               [11] 7874 	add	hl, hl
      0025AB 11r00r00         [10] 7875 	ld	de, #_playfield
      0025AE 19               [11] 7876 	add	hl, de
      0025AF D1               [10] 7877 	pop	de
      0025B0 7D               [ 4] 7878 	ld	a, l
      0025B1 80               [ 4] 7879 	add	a, b
      0025B2 6F               [ 4] 7880 	ld	l, a
      0025B3 30 01            [12] 7881 	jr	NC, 00646$
      0025B5 24               [ 4] 7882 	inc	h
      0025B6                       7883 00646$:
      0025B6 7E               [ 7] 7884 	ld	a, (hl)
      0025B7 DD 77 FE         [19] 7885 	ld	-2 (ix), a
      0025BA DD CB FE 7E      [20] 7886 	bit	7, -2 (ix)
      0025BE CAr43r26         [10] 7887 	jp	Z,00224$
                                   7888 ;src\/CheckPlayfield.h:175: if(counter > 12) {
      0025C1 7B               [ 4] 7889 	ld	a, e
      0025C2 B7               [ 4] 7890 	or	a, a
      0025C3 28 2C            [12] 7891 	jr	Z, 00160$
                                   7892 ;src\/CheckPlayfield.h:176: if(JIFFY & 0b00000011) {
      0025C5 2A 9E FC         [16] 7893 	ld	hl, (_JIFFY)
      0025C8 7D               [ 4] 7894 	ld	a, l
      0025C9 E6 03            [ 7] 7895 	and	a, #0x03
      0025CB 28 14            [12] 7896 	jr	Z, 00148$
                                   7897 ;src\/CheckPlayfield.h:177: DrawBlock(col, line, playfield[col][line] & 0b01111111);
      0025CD DD 7E FE         [19] 7898 	ld	a, -2 (ix)
      0025D0 CB BF            [ 8] 7899 	res	7, a
      0025D2 C5               [11] 7900 	push	bc
      0025D3 D5               [11] 7901 	push	de
      0025D4 F5               [11] 7902 	push	af
      0025D5 33               [ 6] 7903 	inc	sp
      0025D6 4A               [ 4] 7904 	ld	c, d
      0025D7 C5               [11] 7905 	push	bc
      0025D8 CDrABr1E         [17] 7906 	call	_DrawBlock
      0025DB F1               [10] 7907 	pop	af
      0025DC 33               [ 6] 7908 	inc	sp
      0025DD D1               [10] 7909 	pop	de
      0025DE C1               [10] 7910 	pop	bc
      0025DF 18 62            [12] 7911 	jr	00224$
      0025E1                       7912 00148$:
                                   7913 ;src\/CheckPlayfield.h:180: DrawBlock(col, line, EMPTY);
      0025E1 C5               [11] 7914 	push	bc
      0025E2 D5               [11] 7915 	push	de
      0025E3 AF               [ 4] 7916 	xor	a, a
      0025E4 F5               [11] 7917 	push	af
      0025E5 33               [ 6] 7918 	inc	sp
      0025E6 4A               [ 4] 7919 	ld	c, d
      0025E7 C5               [11] 7920 	push	bc
      0025E8 CDrABr1E         [17] 7921 	call	_DrawBlock
      0025EB F1               [10] 7922 	pop	af
      0025EC 33               [ 6] 7923 	inc	sp
      0025ED D1               [10] 7924 	pop	de
      0025EE C1               [10] 7925 	pop	bc
      0025EF 18 52            [12] 7926 	jr	00224$
      0025F1                       7927 00160$:
                                   7928 ;src\/CheckPlayfield.h:185: if(counter > 9) DrawBlock_SameTile(col, line, DUST_1);
      0025F1 79               [ 4] 7929 	ld	a, c
      0025F2 B7               [ 4] 7930 	or	a, a
      0025F3 28 11            [12] 7931 	jr	Z, 00157$
      0025F5 C5               [11] 7932 	push	bc
      0025F6 D5               [11] 7933 	push	de
      0025F7 3E 2A            [ 7] 7934 	ld	a, #0x2a
      0025F9 F5               [11] 7935 	push	af
      0025FA 33               [ 6] 7936 	inc	sp
      0025FB 4A               [ 4] 7937 	ld	c, d
      0025FC C5               [11] 7938 	push	bc
      0025FD CDr13r1F         [17] 7939 	call	_DrawBlock_SameTile
      002600 F1               [10] 7940 	pop	af
      002601 33               [ 6] 7941 	inc	sp
      002602 D1               [10] 7942 	pop	de
      002603 C1               [10] 7943 	pop	bc
      002604 18 3D            [12] 7944 	jr	00224$
      002606                       7945 00157$:
                                   7946 ;src\/CheckPlayfield.h:186: else if(counter > 6) DrawBlock_SameTile(col, line, DUST_1 + 1);
      002606 DD 7E FC         [19] 7947 	ld	a, -4 (ix)
      002609 B7               [ 4] 7948 	or	a, a
      00260A 28 11            [12] 7949 	jr	Z, 00154$
      00260C C5               [11] 7950 	push	bc
      00260D D5               [11] 7951 	push	de
      00260E 3E 2B            [ 7] 7952 	ld	a, #0x2b
      002610 F5               [11] 7953 	push	af
      002611 33               [ 6] 7954 	inc	sp
      002612 4A               [ 4] 7955 	ld	c, d
      002613 C5               [11] 7956 	push	bc
      002614 CDr13r1F         [17] 7957 	call	_DrawBlock_SameTile
      002617 F1               [10] 7958 	pop	af
      002618 33               [ 6] 7959 	inc	sp
      002619 D1               [10] 7960 	pop	de
      00261A C1               [10] 7961 	pop	bc
      00261B 18 26            [12] 7962 	jr	00224$
      00261D                       7963 00154$:
                                   7964 ;src\/CheckPlayfield.h:187: else if(counter > 3) DrawBlock_SameTile(col, line, DUST_1 + 2);
      00261D DD 7E FD         [19] 7965 	ld	a, -3 (ix)
      002620 B7               [ 4] 7966 	or	a, a
      002621 28 11            [12] 7967 	jr	Z, 00151$
      002623 C5               [11] 7968 	push	bc
      002624 D5               [11] 7969 	push	de
      002625 3E 2C            [ 7] 7970 	ld	a, #0x2c
      002627 F5               [11] 7971 	push	af
      002628 33               [ 6] 7972 	inc	sp
      002629 4A               [ 4] 7973 	ld	c, d
      00262A C5               [11] 7974 	push	bc
      00262B CDr13r1F         [17] 7975 	call	_DrawBlock_SameTile
      00262E F1               [10] 7976 	pop	af
      00262F 33               [ 6] 7977 	inc	sp
      002630 D1               [10] 7978 	pop	de
      002631 C1               [10] 7979 	pop	bc
      002632 18 0F            [12] 7980 	jr	00224$
      002634                       7981 00151$:
                                   7982 ;src\/CheckPlayfield.h:188: else DrawBlock_SameTile(col, line, DUST_1 + 3);
      002634 C5               [11] 7983 	push	bc
      002635 D5               [11] 7984 	push	de
      002636 3E 2D            [ 7] 7985 	ld	a, #0x2d
      002638 F5               [11] 7986 	push	af
      002639 33               [ 6] 7987 	inc	sp
      00263A 4A               [ 4] 7988 	ld	c, d
      00263B C5               [11] 7989 	push	bc
      00263C CDr13r1F         [17] 7990 	call	_DrawBlock_SameTile
      00263F F1               [10] 7991 	pop	af
      002640 33               [ 6] 7992 	inc	sp
      002641 D1               [10] 7993 	pop	de
      002642 C1               [10] 7994 	pop	bc
      002643                       7995 00224$:
                                   7996 ;src\/CheckPlayfield.h:170: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002643 14               [ 4] 7997 	inc	d
      002644 C3r9Br25         [10] 7998 	jp	00223$
      002647                       7999 00227$:
                                   8000 ;src\/CheckPlayfield.h:169: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002647 04               [ 4] 8001 	inc	b
      002648 C3r93r25         [10] 8002 	jp	00226$
      00264B                       8003 00168$:
                                   8004 ;src\/CheckPlayfield.h:196: HideHitSprite();
      00264B CDr68r0E         [17] 8005 	call	_HideHitSprite
                                   8006 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00264E DD 36 FD 00      [19] 8007 	ld	-3 (ix), #0
      002652                       8008 00235$:
      002652 DD 7E FD         [19] 8009 	ld	a, -3 (ix)
      002655 D6 0C            [ 7] 8010 	sub	a, #0x0c
      002657 D2r35r27         [10] 8011 	jp	NC, 00177$
                                   8012 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      00265A DD 36 FE 00      [19] 8013 	ld	-2 (ix), #0
      00265E                       8014 00232$:
      00265E DD 7E FE         [19] 8015 	ld	a, -2 (ix)
      002661 D6 06            [ 7] 8016 	sub	a, #0x06
      002663 D2r2Fr27         [10] 8017 	jp	NC, 00236$
                                   8018 ;src\/CheckPlayfield.h:204: if((playfield[col][line] & REMOVING_FLAG) != 0) {
      002666 DD 4E FE         [19] 8019 	ld	c, -2 (ix)
      002669 06 00            [ 7] 8020 	ld	b, #0x00
      00266B 69               [ 4] 8021 	ld	l, c
      00266C 60               [ 4] 8022 	ld	h, b
      00266D 29               [11] 8023 	add	hl, hl
      00266E 09               [11] 8024 	add	hl, bc
      00266F 29               [11] 8025 	add	hl, hl
      002670 29               [11] 8026 	add	hl, hl
      002671 EB               [ 4] 8027 	ex	de, hl
      002672 21r00r00         [10] 8028 	ld	hl, #_playfield
      002675 19               [11] 8029 	add	hl, de
      002676 DD 75 FB         [19] 8030 	ld	-5 (ix), l
      002679 DD 74 FC         [19] 8031 	ld	-4 (ix), h
      00267C DD 7E FB         [19] 8032 	ld	a, -5 (ix)
      00267F DD 86 FD         [19] 8033 	add	a, -3 (ix)
      002682 4F               [ 4] 8034 	ld	c, a
      002683 DD 7E FC         [19] 8035 	ld	a, -4 (ix)
      002686 CE 00            [ 7] 8036 	adc	a, #0x00
      002688 47               [ 4] 8037 	ld	b, a
      002689 0A               [ 7] 8038 	ld	a, (bc)
      00268A 07               [ 4] 8039 	rlca
      00268B D2r29r27         [10] 8040 	jp	NC,00233$
                                   8041 ;src\/CheckPlayfield.h:206: blocksRemoved++;
      00268E 2Ar04r00         [16] 8042 	ld	hl, (_blocksRemoved)
      002691 23               [ 6] 8043 	inc	hl
      002692 22r04r00         [16] 8044 	ld	(_blocksRemoved), hl
                                   8045 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002695 DD 7E FB         [19] 8046 	ld	a, -5 (ix)
      002698 DD 77 F7         [19] 8047 	ld	-9 (ix), a
      00269B DD 7E FC         [19] 8048 	ld	a, -4 (ix)
      00269E DD 77 F8         [19] 8049 	ld	-8 (ix), a
      0026A1 DD 7E FD         [19] 8050 	ld	a, -3 (ix)
      0026A4 DD 77 FF         [19] 8051 	ld	-1 (ix), a
      0026A7                       8052 00229$:
      0026A7 DD 7E FF         [19] 8053 	ld	a, -1 (ix)
      0026AA B7               [ 4] 8054 	or	a, a
      0026AB 28 7C            [12] 8055 	jr	Z, 00233$
                                   8056 ;src\/CheckPlayfield.h:210: byte linesToBeRemoved = 1;
      0026AD 0E 01            [ 7] 8057 	ld	c, #0x01
                                   8058 ;src\/CheckPlayfield.h:211: if((playfield[col][line1 - 1] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0026AF DD 7E FF         [19] 8059 	ld	a, -1 (ix)
      0026B2 DD 77 FC         [19] 8060 	ld	-4 (ix), a
      0026B5 3D               [ 4] 8061 	dec	a
      0026B6 DD 86 F7         [19] 8062 	add	a, -9 (ix)
      0026B9 5F               [ 4] 8063 	ld	e, a
      0026BA 3E 00            [ 7] 8064 	ld	a, #0x00
      0026BC DD 8E F8         [19] 8065 	adc	a, -8 (ix)
      0026BF 57               [ 4] 8066 	ld	d, a
      0026C0 1A               [ 7] 8067 	ld	a, (de)
      0026C1 07               [ 4] 8068 	rlca
      0026C2 30 02            [12] 8069 	jr	NC, 00170$
      0026C4 0E 02            [ 7] 8070 	ld	c, #0x02
      0026C6                       8071 00170$:
                                   8072 ;src\/CheckPlayfield.h:212: if((playfield[col][line1 - 2] & REMOVING_FLAG) != 0) linesToBeRemoved++;
      0026C6 DD 7E FC         [19] 8073 	ld	a, -4 (ix)
      0026C9 3D               [ 4] 8074 	dec	a
      0026CA 3D               [ 4] 8075 	dec	a
      0026CB DD 86 F7         [19] 8076 	add	a, -9 (ix)
      0026CE 5F               [ 4] 8077 	ld	e, a
      0026CF 3E 00            [ 7] 8078 	ld	a, #0x00
      0026D1 DD 8E F8         [19] 8079 	adc	a, -8 (ix)
      0026D4 57               [ 4] 8080 	ld	d, a
      0026D5 1A               [ 7] 8081 	ld	a, (de)
      0026D6 07               [ 4] 8082 	rlca
      0026D7 30 01            [12] 8083 	jr	NC, 00172$
      0026D9 0C               [ 4] 8084 	inc	c
      0026DA                       8085 00172$:
                                   8086 ;src\/CheckPlayfield.h:216: playfield[col][line1] = (line1 - linesToBeRemoved >= 0) ? playfield[col][line1 - linesToBeRemoved] : EMPTY;
      0026DA DD 7E F7         [19] 8087 	ld	a, -9 (ix)
      0026DD DD 86 FF         [19] 8088 	add	a, -1 (ix)
      0026E0 DD 77 F9         [19] 8089 	ld	-7 (ix), a
      0026E3 DD 7E F8         [19] 8090 	ld	a, -8 (ix)
      0026E6 CE 00            [ 7] 8091 	adc	a, #0x00
      0026E8 DD 77 FA         [19] 8092 	ld	-6 (ix), a
      0026EB DD 6E FF         [19] 8093 	ld	l, -1 (ix)
      0026EE 26 00            [ 7] 8094 	ld	h, #0x00
      0026F0 59               [ 4] 8095 	ld	e, c
      0026F1 16 00            [ 7] 8096 	ld	d, #0x00
      0026F3 BF               [ 4] 8097 	cp	a, a
      0026F4 ED 52            [15] 8098 	sbc	hl, de
      0026F6 CB 7C            [ 8] 8099 	bit	7, h
      0026F8 20 18            [12] 8100 	jr	NZ, 00243$
      0026FA DD 7E FF         [19] 8101 	ld	a, -1 (ix)
      0026FD 91               [ 4] 8102 	sub	a, c
      0026FE DD 86 F7         [19] 8103 	add	a, -9 (ix)
      002701 4F               [ 4] 8104 	ld	c, a
      002702 3E 00            [ 7] 8105 	ld	a, #0x00
      002704 DD 8E F8         [19] 8106 	adc	a, -8 (ix)
      002707 47               [ 4] 8107 	ld	b, a
      002708 0A               [ 7] 8108 	ld	a, (bc)
      002709 DD 77 FB         [19] 8109 	ld	-5 (ix), a
      00270C DD 36 FC 00      [19] 8110 	ld	-4 (ix), #0
      002710 18 07            [12] 8111 	jr	00244$
      002712                       8112 00243$:
      002712 AF               [ 4] 8113 	xor	a, a
      002713 DD 77 FB         [19] 8114 	ld	-5 (ix), a
      002716 DD 77 FC         [19] 8115 	ld	-4 (ix), a
      002719                       8116 00244$:
      002719 DD 7E FB         [19] 8117 	ld	a, -5 (ix)
      00271C DD 6E F9         [19] 8118 	ld	l, -7 (ix)
      00271F DD 66 FA         [19] 8119 	ld	h, -6 (ix)
      002722 77               [ 7] 8120 	ld	(hl), a
                                   8121 ;src\/CheckPlayfield.h:209: for(byte line1 = line; line1 > 0; line1--) {
      002723 DD 35 FF         [23] 8122 	dec	-1 (ix)
      002726 C3rA7r26         [10] 8123 	jp	00229$
      002729                       8124 00233$:
                                   8125 ;src\/CheckPlayfield.h:202: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002729 DD 34 FE         [23] 8126 	inc	-2 (ix)
      00272C C3r5Er26         [10] 8127 	jp	00232$
      00272F                       8128 00236$:
                                   8129 ;src\/CheckPlayfield.h:201: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      00272F DD 34 FD         [23] 8130 	inc	-3 (ix)
      002732 C3r52r26         [10] 8131 	jp	00235$
      002735                       8132 00177$:
                                   8133 ;src\/CheckPlayfield.h:227: oldLevel = level;
      002735 3Ar06r00         [13] 8134 	ld	a, (#_level + 0)
      002738 4F               [ 4] 8135 	ld	c, a
                                   8136 ;src\/CheckPlayfield.h:228: if(blocksRemoved >= 90) {
      002739 21r04r00         [10] 8137 	ld	hl, #_blocksRemoved
      00273C 46               [ 7] 8138 	ld	b, (hl)
      00273D 23               [ 6] 8139 	inc	hl
      00273E 56               [ 7] 8140 	ld	d, (hl)
      00273F 78               [ 4] 8141 	ld	a, b
      002740 D6 5A            [ 7] 8142 	sub	a, #0x5a
      002742 7A               [ 4] 8143 	ld	a, d
      002743 DE 00            [ 7] 8144 	sbc	a, #0x00
      002745 38 19            [12] 8145 	jr	C, 00185$
                                   8146 ;src\/CheckPlayfield.h:229: level = (blocksRemoved / 30) + 1;
      002747 C5               [11] 8147 	push	bc
      002748 21 1E 00         [10] 8148 	ld	hl, #0x001e
      00274B E5               [11] 8149 	push	hl
      00274C 58               [ 4] 8150 	ld	e, b
      00274D D5               [11] 8151 	push	de
      00274E CDr00r00         [17] 8152 	call	__divuint
      002751 F1               [10] 8153 	pop	af
      002752 F1               [10] 8154 	pop	af
      002753 C1               [10] 8155 	pop	bc
      002754 7D               [ 4] 8156 	ld	a, l
      002755 3C               [ 4] 8157 	inc	a
      002756 32r06r00         [13] 8158 	ld	(_level+0), a
                                   8159 ;src\/CheckPlayfield.h:230: speed = 15;
      002759 21r96r00         [10] 8160 	ld	hl, #_speed
      00275C 36 0F            [10] 8161 	ld	(hl), #0x0f
      00275E 18 32            [12] 8162 	jr	00186$
      002760                       8163 00185$:
                                   8164 ;src\/CheckPlayfield.h:233: else if(blocksRemoved >= 60) { 
      002760 78               [ 4] 8165 	ld	a, b
      002761 D6 3C            [ 7] 8166 	sub	a, #0x3c
      002763 7A               [ 4] 8167 	ld	a, d
      002764 DE 00            [ 7] 8168 	sbc	a, #0x00
      002766 38 0C            [12] 8169 	jr	C, 00182$
                                   8170 ;src\/CheckPlayfield.h:234: level = 3;
      002768 21r06r00         [10] 8171 	ld	hl, #_level
      00276B 36 03            [10] 8172 	ld	(hl), #0x03
                                   8173 ;src\/CheckPlayfield.h:235: speed = 30;
      00276D 21r96r00         [10] 8174 	ld	hl, #_speed
      002770 36 1E            [10] 8175 	ld	(hl), #0x1e
      002772 18 1E            [12] 8176 	jr	00186$
      002774                       8177 00182$:
                                   8178 ;src\/CheckPlayfield.h:237: else if(blocksRemoved >= 30) { 
      002774 78               [ 4] 8179 	ld	a, b
      002775 D6 1E            [ 7] 8180 	sub	a, #0x1e
      002777 7A               [ 4] 8181 	ld	a, d
      002778 DE 00            [ 7] 8182 	sbc	a, #0x00
      00277A 38 0C            [12] 8183 	jr	C, 00179$
                                   8184 ;src\/CheckPlayfield.h:238: level = 2;
      00277C 21r06r00         [10] 8185 	ld	hl, #_level
      00277F 36 02            [10] 8186 	ld	(hl), #0x02
                                   8187 ;src\/CheckPlayfield.h:239: speed = 45;
      002781 21r96r00         [10] 8188 	ld	hl, #_speed
      002784 36 2D            [10] 8189 	ld	(hl), #0x2d
      002786 18 0A            [12] 8190 	jr	00186$
      002788                       8191 00179$:
                                   8192 ;src\/CheckPlayfield.h:242: level = 1;
      002788 21r06r00         [10] 8193 	ld	hl, #_level
      00278B 36 01            [10] 8194 	ld	(hl), #0x01
                                   8195 ;src\/CheckPlayfield.h:243: speed = 60;
      00278D 21r96r00         [10] 8196 	ld	hl, #_speed
      002790 36 3C            [10] 8197 	ld	(hl), #0x3c
      002792                       8198 00186$:
                                   8199 ;src\/CheckPlayfield.h:246: if(oldLevel != level) {
      002792 3Ar06r00         [13] 8200 	ld	a,(#_level + 0)
      002795 91               [ 4] 8201 	sub	a, c
      002796 28 05            [12] 8202 	jr	Z, 00188$
                                   8203 ;src\/CheckPlayfield.h:247: newLevel = TRUE;
      002798 21r07r00         [10] 8204 	ld	hl, #_newLevel
      00279B 36 01            [10] 8205 	ld	(hl), #0x01
      00279D                       8206 00188$:
                                   8207 ;src\/CheckPlayfield.h:251: DrawPlayfield();
      00279D CDrCFr1F         [17] 8208 	call	_DrawPlayfield
                                   8209 ;src\/CheckPlayfield.h:257: DrawScore();
      0027A0 CDr7Er1A         [17] 8210 	call	_DrawScore
                                   8211 ;src\/CheckPlayfield.h:259: iteration++;
      0027A3 DD 34 04         [23] 8212 	inc	4 (ix)
                                   8213 ;src\/CheckPlayfield.h:260: CheckPlayfield(iteration);  
      0027A6 DD 7E 04         [19] 8214 	ld	a, 4 (ix)
      0027A9 F5               [11] 8215 	push	af
      0027AA 33               [ 6] 8216 	inc	sp
      0027AB CDr40r20         [17] 8217 	call	_CheckPlayfield
      0027AE 18 03            [12] 8218 	jr	00237$
      0027B0                       8219 00190$:
                                   8220 ;src\/CheckPlayfield.h:264: DrawScore();
      0027B0 CDr7Er1A         [17] 8221 	call	_DrawScore
      0027B3                       8222 00237$:
                                   8223 ;src\/CheckPlayfield.h:266: }
      0027B3 DD F9            [10] 8224 	ld	sp, ix
      0027B5 DD E1            [14] 8225 	pop	ix
      0027B7 C9               [10] 8226 	ret
                                   8227 ;src\/GameLogic.h:3: byte RandomIndex() {
                                   8228 ;	---------------------------------
                                   8229 ; Function RandomIndex
                                   8230 ; ---------------------------------
      0027B8                       8231 _RandomIndex::
                                   8232 ;src\/GameLogic.h:5: do {
      0027B8                       8233 00101$:
                                   8234 ;src\/GameLogic.h:6: random = GetRandom() & 0b00000111; // AND mask to get a value in the 0-7 range
      0027B8 CDrA3r00         [17] 8235 	call	_GetRandom
      0027BB 7D               [ 4] 8236 	ld	a, l
      0027BC E6 07            [ 7] 8237 	and	a, #0x07
      0027BE 6F               [ 4] 8238 	ld	l, a
                                   8239 ;src\/GameLogic.h:8: while(random > 4); // Get a number between 0 and 4
      0027BF 3E 04            [ 7] 8240 	ld	a, #0x04
      0027C1 95               [ 4] 8241 	sub	a, l
      0027C2 38 F4            [12] 8242 	jr	C, 00101$
                                   8243 ;src\/GameLogic.h:10: return random;
                                   8244 ;src\/GameLogic.h:11: }
      0027C4 C9               [10] 8245 	ret
                                   8246 ;src\/GameLogic.h:13: void RandomPiece() {
                                   8247 ;	---------------------------------
                                   8248 ; Function RandomPiece
                                   8249 ; ---------------------------------
      0027C5                       8250 _RandomPiece::
                                   8251 ;src\/GameLogic.h:14: topPiece = nextTopPiece;
      0027C5 3Ar93r00         [13] 8252 	ld	a,(#_nextTopPiece + 0)
      0027C8 32r90r00         [13] 8253 	ld	(#_topPiece),a
                                   8254 ;src\/GameLogic.h:15: midPiece = nextMidPiece;
      0027CB 3Ar94r00         [13] 8255 	ld	a,(#_nextMidPiece + 0)
      0027CE 32r91r00         [13] 8256 	ld	(#_midPiece),a
                                   8257 ;src\/GameLogic.h:16: bottomPiece = nextBottomPiece;
      0027D1 3Ar95r00         [13] 8258 	ld	a,(#_nextBottomPiece + 0)
      0027D4 32r92r00         [13] 8259 	ld	(#_bottomPiece),a
                                   8260 ;src\/GameLogic.h:18: nextTopPiece = pieces[RandomIndex()];
      0027D7 01r18r00         [10] 8261 	ld	bc, #_pieces+0
      0027DA C5               [11] 8262 	push	bc
      0027DB CDrB8r27         [17] 8263 	call	_RandomIndex
      0027DE C1               [10] 8264 	pop	bc
      0027DF 26 00            [ 7] 8265 	ld	h, #0x00
      0027E1 09               [11] 8266 	add	hl, bc
      0027E2 7E               [ 7] 8267 	ld	a, (hl)
      0027E3 32r93r00         [13] 8268 	ld	(_nextTopPiece+0), a
                                   8269 ;src\/GameLogic.h:19: nextMidPiece = pieces[RandomIndex()];
      0027E6 C5               [11] 8270 	push	bc
      0027E7 CDrB8r27         [17] 8271 	call	_RandomIndex
      0027EA C1               [10] 8272 	pop	bc
      0027EB 26 00            [ 7] 8273 	ld	h, #0x00
      0027ED 09               [11] 8274 	add	hl, bc
      0027EE 7E               [ 7] 8275 	ld	a, (hl)
      0027EF 32r94r00         [13] 8276 	ld	(_nextMidPiece+0), a
                                   8277 ;src\/GameLogic.h:20: nextBottomPiece = pieces[RandomIndex()];
      0027F2 C5               [11] 8278 	push	bc
      0027F3 CDrB8r27         [17] 8279 	call	_RandomIndex
      0027F6 C1               [10] 8280 	pop	bc
      0027F7 26 00            [ 7] 8281 	ld	h, #0x00
      0027F9 09               [11] 8282 	add	hl, bc
      0027FA 7E               [ 7] 8283 	ld	a, (hl)
      0027FB 32r95r00         [13] 8284 	ld	(_nextBottomPiece+0), a
                                   8285 ;src\/GameLogic.h:21: }
      0027FE C9               [10] 8286 	ret
                                   8287 ;src\/GameLogic.h:23: void UpdateAndDrawPieceStatic() {
                                   8288 ;	---------------------------------
                                   8289 ; Function UpdateAndDrawPieceStatic
                                   8290 ; ---------------------------------
      0027FF                       8291 _UpdateAndDrawPieceStatic::
                                   8292 ;src\/GameLogic.h:26: playfield[col][line] = topPiece;
      0027FF 01r00r00         [10] 8293 	ld	bc, #_playfield+0
      002802 ED 5Br01r00      [20] 8294 	ld	de, (_col)
      002806 16 00            [ 7] 8295 	ld	d, #0x00
      002808 6B               [ 4] 8296 	ld	l, e
      002809 62               [ 4] 8297 	ld	h, d
      00280A 29               [11] 8298 	add	hl, hl
      00280B 19               [11] 8299 	add	hl, de
      00280C 29               [11] 8300 	add	hl, hl
      00280D 29               [11] 8301 	add	hl, hl
      00280E 09               [11] 8302 	add	hl, bc
      00280F EB               [ 4] 8303 	ex	de, hl
      002810 3Ar02r00         [13] 8304 	ld	a, (#_line + 0)
      002813 6F               [ 4] 8305 	ld	l, a
      002814 26 00            [ 7] 8306 	ld	h, #0x00
      002816 19               [11] 8307 	add	hl, de
      002817 3Ar90r00         [13] 8308 	ld	a,(#_topPiece + 0)
      00281A 77               [ 7] 8309 	ld	(hl), a
                                   8310 ;src\/GameLogic.h:27: playfield[col][line + 1] = midPiece;
      00281B ED 5Br01r00      [20] 8311 	ld	de, (_col)
      00281F 16 00            [ 7] 8312 	ld	d, #0x00
      002821 6B               [ 4] 8313 	ld	l, e
      002822 62               [ 4] 8314 	ld	h, d
      002823 29               [11] 8315 	add	hl, hl
      002824 19               [11] 8316 	add	hl, de
      002825 29               [11] 8317 	add	hl, hl
      002826 29               [11] 8318 	add	hl, hl
      002827 09               [11] 8319 	add	hl, bc
      002828 EB               [ 4] 8320 	ex	de, hl
      002829 3Ar02r00         [13] 8321 	ld	a, (#_line + 0)
      00282C 6F               [ 4] 8322 	ld	l, a
      00282D 2C               [ 4] 8323 	inc	l
      00282E 26 00            [ 7] 8324 	ld	h, #0x00
      002830 19               [11] 8325 	add	hl, de
      002831 3Ar91r00         [13] 8326 	ld	a,(#_midPiece + 0)
      002834 77               [ 7] 8327 	ld	(hl), a
                                   8328 ;src\/GameLogic.h:28: playfield[col][line + 2] = bottomPiece;
      002835 ED 5Br01r00      [20] 8329 	ld	de, (_col)
      002839 16 00            [ 7] 8330 	ld	d, #0x00
      00283B 6B               [ 4] 8331 	ld	l, e
      00283C 62               [ 4] 8332 	ld	h, d
      00283D 29               [11] 8333 	add	hl, hl
      00283E 19               [11] 8334 	add	hl, de
      00283F 29               [11] 8335 	add	hl, hl
      002840 29               [11] 8336 	add	hl, hl
      002841 09               [11] 8337 	add	hl, bc
      002842 EB               [ 4] 8338 	ex	de, hl
      002843 3Ar02r00         [13] 8339 	ld	a, (#_line + 0)
      002846 6F               [ 4] 8340 	ld	l, a
      002847 2C               [ 4] 8341 	inc	l
      002848 2C               [ 4] 8342 	inc	l
      002849 26 00            [ 7] 8343 	ld	h, #0x00
      00284B 19               [11] 8344 	add	hl, de
      00284C 3Ar92r00         [13] 8345 	ld	a,(#_bottomPiece + 0)
      00284F 77               [ 7] 8346 	ld	(hl), a
                                   8347 ;src\/GameLogic.h:29: DrawPiece(line);
      002850 C5               [11] 8348 	push	bc
      002851 3Ar02r00         [13] 8349 	ld	a,(#_line + 0)
      002854 F5               [11] 8350 	push	af
      002855 33               [ 6] 8351 	inc	sp
      002856 CDrACr1F         [17] 8352 	call	_DrawPiece
      002859 33               [ 6] 8353 	inc	sp
      00285A C1               [10] 8354 	pop	bc
                                   8355 ;src\/GameLogic.h:32: col = INITIAL_COL;
      00285B 3E 02            [ 7] 8356 	ld	a, #0x02
      00285D 32r01r00         [13] 8357 	ld	(#_col), a
                                   8358 ;src\/GameLogic.h:33: line = INITIAL_LINE;
                                   8359 ;src\/GameLogic.h:35: counter = 0;
      002860 3E 00            [ 7] 8360 	ld	a,#0x00
      002862 32r02r00         [13] 8361 	ld	(#_line),a
      002865 32r03r00         [13] 8362 	ld	(#_counter), a
                                   8363 ;src\/GameLogic.h:38: if(playfield[col][line] != EMPTY ||
      002868 3Ar18r00         [13] 8364 	ld	a, (#_playfield + 24)
      00286B B7               [ 4] 8365 	or	a, a
      00286C 20 0C            [12] 8366 	jr	NZ, 00101$
                                   8367 ;src\/GameLogic.h:39: playfield[col][line + 1] != EMPTY ||
      00286E 3Ar19r00         [13] 8368 	ld	a, (#_playfield + 25)
      002871 B7               [ 4] 8369 	or	a, a
      002872 20 06            [12] 8370 	jr	NZ, 00101$
                                   8371 ;src\/GameLogic.h:40: playfield[col][line + 2] != EMPTY) {
      002874 3Ar1Ar00         [13] 8372 	ld	a, (#_playfield + 26)
      002877 B7               [ 4] 8373 	or	a, a
      002878 28 0B            [12] 8374 	jr	Z, 00102$
      00287A                       8375 00101$:
                                   8376 ;src\/GameLogic.h:41: gameOver = TRUE;
      00287A FD 21r00r00      [14] 8377 	ld	iy, #_gameOver
      00287E FD 36 00 01      [19] 8378 	ld	0 (iy), #0x01
      002882 C3rCFr1F         [10] 8379 	jp	_DrawPlayfield
      002885                       8380 00102$:
                                   8381 ;src\/GameLogic.h:44: RandomPiece();
      002885 CDrC5r27         [17] 8382 	call	_RandomPiece
                                   8383 ;src\/GameLogic.h:46: CheckPlayfield(1);
      002888 3E 01            [ 7] 8384 	ld	a, #0x01
      00288A F5               [11] 8385 	push	af
      00288B 33               [ 6] 8386 	inc	sp
      00288C CDr40r20         [17] 8387 	call	_CheckPlayfield
      00288F 33               [ 6] 8388 	inc	sp
                                   8389 ;src\/GameLogic.h:48: DrawNextPiece();
      002890 CDrAFr16         [17] 8390 	call	_DrawNextPiece
                                   8391 ;src\/GameLogic.h:51: DrawPlayfield();
                                   8392 ;src\/GameLogic.h:52: }
      002893 C3rCFr1F         [10] 8393 	jp	_DrawPlayfield
                                   8394 ;src\/GameLogic.h:54: void BlinkPauseText() {
                                   8395 ;	---------------------------------
                                   8396 ; Function BlinkPauseText
                                   8397 ; ---------------------------------
      002896                       8398 _BlinkPauseText::
                                   8399 ;src\/GameLogic.h:55: if(JIFFY & 0b00001000) {
      002896 2A 9E FC         [16] 8400 	ld	hl, (_JIFFY)
      002899 CB 5D            [ 8] 8401 	bit	3, l
      00289B 28 0E            [12] 8402 	jr	Z, 00102$
                                   8403 ;src\/GameLogic.h:56: DrawString("PAUSE", 13, 12);
      00289D 11 0D 0C         [10] 8404 	ld	de, #0x0c0d
      0028A0 D5               [11] 8405 	push	de
      0028A1 21rB4r28         [10] 8406 	ld	hl, #___str_5
      0028A4 E5               [11] 8407 	push	hl
      0028A5 CDrBBr12         [17] 8408 	call	_DrawString
      0028A8 F1               [10] 8409 	pop	af
      0028A9 F1               [10] 8410 	pop	af
      0028AA C9               [10] 8411 	ret
      0028AB                       8412 00102$:
                                   8413 ;src\/GameLogic.h:61: DrawLine(6);
      0028AB 3E 06            [ 7] 8414 	ld	a, #0x06
      0028AD F5               [11] 8415 	push	af
      0028AE 33               [ 6] 8416 	inc	sp
      0028AF CDr74r1F         [17] 8417 	call	_DrawLine
      0028B2 33               [ 6] 8418 	inc	sp
                                   8419 ;src\/GameLogic.h:64: }
      0028B3 C9               [10] 8420 	ret
      0028B4                       8421 ___str_5:
      0028B4 50 41 55 53 45        8422 	.ascii "PAUSE"
      0028B9 00                    8423 	.db 0x00
                                   8424 ;src\/GameLogic.h:66: void Pause() {
                                   8425 ;	---------------------------------
                                   8426 ; Function Pause
                                   8427 ; ---------------------------------
      0028BA                       8428 _Pause::
                                   8429 ;src\/GameLogic.h:69: DrawString("PAUSE", 13, 12);
      0028BA 11 0D 0C         [10] 8430 	ld	de, #0x0c0d
      0028BD D5               [11] 8431 	push	de
      0028BE 21rF4r28         [10] 8432 	ld	hl, #___str_6
      0028C1 E5               [11] 8433 	push	hl
      0028C2 CDrBBr12         [17] 8434 	call	_DrawString
      0028C5 F1               [10] 8435 	pop	af
      0028C6 F1               [10] 8436 	pop	af
                                   8437 ;src\/GameLogic.h:71: while(TRUE) {
      0028C7                       8438 00114$:
                                   8439 ;src\/GameLogic.h:73: BlinkPauseText();
      0028C7 CDr96r28         [17] 8440 	call	_BlinkPauseText
                                   8441 ;src\/GameLogic.h:76: keyboard = SNSMAT(7);
      0028CA 2E 07            [ 7] 8442 	ld	l, #0x07
      0028CC CDr00r00         [17] 8443 	call	_SNSMAT
                                   8444 ;src\/GameLogic.h:77: if((keyboard & 0b00000100) != 0) {
      0028CF CB 55            [ 8] 8445 	bit	2, l
      0028D1 28 F4            [12] 8446 	jr	Z, 00114$
                                   8447 ;src\/GameLogic.h:79: while(TRUE) {
      0028D3                       8448 00109$:
                                   8449 ;src\/GameLogic.h:81: BlinkPauseText();
      0028D3 CDr96r28         [17] 8450 	call	_BlinkPauseText
                                   8451 ;src\/GameLogic.h:84: keyboard = SNSMAT(7);
      0028D6 2E 07            [ 7] 8452 	ld	l, #0x07
      0028D8 CDr00r00         [17] 8453 	call	_SNSMAT
                                   8454 ;src\/GameLogic.h:85: if((keyboard & 0b00000100) == 0) {
      0028DB CB 55            [ 8] 8455 	bit	2, l
      0028DD 20 F4            [12] 8456 	jr	NZ, 00109$
                                   8457 ;src\/GameLogic.h:87: while(TRUE) {
      0028DF                       8458 00104$:
                                   8459 ;src\/GameLogic.h:89: BlinkPauseText();
      0028DF CDr96r28         [17] 8460 	call	_BlinkPauseText
                                   8461 ;src\/GameLogic.h:92: keyboard = SNSMAT(7);
      0028E2 2E 07            [ 7] 8462 	ld	l, #0x07
      0028E4 CDr00r00         [17] 8463 	call	_SNSMAT
                                   8464 ;src\/GameLogic.h:93: if((keyboard & 0b00000100) != 0) {
      0028E7 CB 55            [ 8] 8465 	bit	2, l
      0028E9 28 F4            [12] 8466 	jr	Z, 00104$
                                   8467 ;src\/GameLogic.h:95: DrawLine(6);
      0028EB 3E 06            [ 7] 8468 	ld	a, #0x06
      0028ED F5               [11] 8469 	push	af
      0028EE 33               [ 6] 8470 	inc	sp
      0028EF CDr74r1F         [17] 8471 	call	_DrawLine
      0028F2 33               [ 6] 8472 	inc	sp
                                   8473 ;src\/GameLogic.h:96: return;
                                   8474 ;src\/GameLogic.h:106: }
      0028F3 C9               [10] 8475 	ret
      0028F4                       8476 ___str_6:
      0028F4 50 41 55 53 45        8477 	.ascii "PAUSE"
      0028F9 00                    8478 	.db 0x00
                                   8479 ;src\/GameLogic.h:108: void GameLoop() {
                                   8480 ;	---------------------------------
                                   8481 ; Function GameLoop
                                   8482 ; ---------------------------------
      0028FA                       8483 _GameLoop::
      0028FA DD E5            [15] 8484 	push	ix
      0028FC DD 21 00 00      [14] 8485 	ld	ix,#0
      002900 DD 39            [15] 8486 	add	ix,sp
      002902 21 F3 FF         [10] 8487 	ld	hl, #-13
      002905 39               [11] 8488 	add	hl, sp
      002906 F9               [ 6] 8489 	ld	sp, hl
                                   8490 ;src\/GameLogic.h:111: byte lastJoystick_LeftRight = STCK_none, lastJoystick_UpDown = STCK_none;
      002907 DD 36 FF 00      [19] 8491 	ld	-1 (ix), #0
      00290B DD 36 F3 00      [19] 8492 	ld	-13 (ix), #0
                                   8493 ;src\/GameLogic.h:112: byte lastBtn1 = 0, lastBtn2 = 0;
      00290F DD 36 F4 00      [19] 8494 	ld	-12 (ix), #0
      002913 DD 36 F5 00      [19] 8495 	ld	-11 (ix), #0
                                   8496 ;src\/GameLogic.h:115: while(!gameOver) {
      002917                       8497 00150$:
      002917 3Ar00r00         [13] 8498 	ld	a,(#_gameOver + 0)
      00291A B7               [ 4] 8499 	or	a, a
      00291B C2rB2r2C         [10] 8500 	jp	NZ, 00152$
                                   8501 ;src\/GameLogic.h:117: word lastJiffy = JIFFY;
      00291E ED 4B 9E FC      [20] 8502 	ld	bc, (_JIFFY)
                                   8503 ;src\/GameLogic.h:119: while (lastJiffy == JIFFY) {
      002922                       8504 00101$:
      002922 2A 9E FC         [16] 8505 	ld	hl, (_JIFFY)
      002925 BF               [ 4] 8506 	cp	a, a
      002926 ED 42            [15] 8507 	sbc	hl, bc
      002928 28 F8            [12] 8508 	jr	Z, 00101$
                                   8509 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      00292A ED 4Br01r00      [20] 8510 	ld	bc, (_col)
      00292E 06 00            [ 7] 8511 	ld	b, #0x00
      002930 69               [ 4] 8512 	ld	l, c
      002931 60               [ 4] 8513 	ld	h, b
      002932 29               [11] 8514 	add	hl, hl
      002933 09               [11] 8515 	add	hl, bc
      002934 29               [11] 8516 	add	hl, hl
      002935 29               [11] 8517 	add	hl, hl
      002936 EB               [ 4] 8518 	ex	de, hl
      002937 21r00r00         [10] 8519 	ld	hl, #_playfield
      00293A 19               [11] 8520 	add	hl, de
      00293B EB               [ 4] 8521 	ex	de, hl
      00293C FD 21r02r00      [14] 8522 	ld	iy, #_line
      002940 FD 6E 00         [19] 8523 	ld	l, 0 (iy)
      002943 26 00            [ 7] 8524 	ld	h, #0x00
      002945 19               [11] 8525 	add	hl, de
      002946 36 00            [10] 8526 	ld	(hl), #0x00
                                   8527 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      002948 ED 4Br01r00      [20] 8528 	ld	bc, (_col)
      00294C 06 00            [ 7] 8529 	ld	b, #0x00
      00294E 69               [ 4] 8530 	ld	l, c
      00294F 60               [ 4] 8531 	ld	h, b
      002950 29               [11] 8532 	add	hl, hl
      002951 09               [11] 8533 	add	hl, bc
      002952 29               [11] 8534 	add	hl, hl
      002953 29               [11] 8535 	add	hl, hl
      002954 EB               [ 4] 8536 	ex	de, hl
      002955 21r00r00         [10] 8537 	ld	hl, #_playfield
      002958 19               [11] 8538 	add	hl, de
      002959 EB               [ 4] 8539 	ex	de, hl
      00295A FD 6E 00         [19] 8540 	ld	l, 0 (iy)
      00295D 2C               [ 4] 8541 	inc	l
      00295E 26 00            [ 7] 8542 	ld	h, #0x00
      002960 19               [11] 8543 	add	hl, de
      002961 36 00            [10] 8544 	ld	(hl), #0x00
                                   8545 ;src\/GameLogic.h:130: playfield[col][line + 2] = EMPTY;
      002963 ED 4Br01r00      [20] 8546 	ld	bc, (_col)
      002967 06 00            [ 7] 8547 	ld	b, #0x00
      002969 69               [ 4] 8548 	ld	l, c
      00296A 60               [ 4] 8549 	ld	h, b
      00296B 29               [11] 8550 	add	hl, hl
      00296C 09               [11] 8551 	add	hl, bc
      00296D 29               [11] 8552 	add	hl, hl
      00296E 29               [11] 8553 	add	hl, hl
      00296F EB               [ 4] 8554 	ex	de, hl
      002970 21r00r00         [10] 8555 	ld	hl, #_playfield
      002973 19               [11] 8556 	add	hl, de
      002974 EB               [ 4] 8557 	ex	de, hl
      002975 FD 6E 00         [19] 8558 	ld	l, 0 (iy)
      002978 2C               [ 4] 8559 	inc	l
      002979 2C               [ 4] 8560 	inc	l
      00297A 26 00            [ 7] 8561 	ld	h, #0x00
      00297C 19               [11] 8562 	add	hl, de
      00297D 36 00            [10] 8563 	ld	(hl), #0x00
                                   8564 ;src\/GameLogic.h:133: joystick = GTSTCK(STCK_Joy1);
      00297F 2E 01            [ 7] 8565 	ld	l, #0x01
      002981 CDr00r00         [17] 8566 	call	_GTSTCK
      002984 DD 75 F6         [19] 8567 	ld	-10 (ix), l
                                   8568 ;src\/GameLogic.h:134: btn1 = GTTRIG(TRIG_Joy1_A);
      002987 2E 01            [ 7] 8569 	ld	l, #0x01
      002989 CDr00r00         [17] 8570 	call	_GTTRIG
      00298C DD 75 F7         [19] 8571 	ld	-9 (ix), l
                                   8572 ;src\/GameLogic.h:135: btn2 = GTTRIG(TRIG_Joy1_B);
      00298F 2E 03            [ 7] 8573 	ld	l, #0x03
      002991 CDr00r00         [17] 8574 	call	_GTTRIG
      002994 DD 75 F8         [19] 8575 	ld	-8 (ix), l
                                   8576 ;src\/GameLogic.h:137: if(joystick == STCK_none) {
      002997 DD 7E F6         [19] 8577 	ld	a, -10 (ix)
                                   8578 ;src\/GameLogic.h:138: joystick = GTSTCK(STCK_Cursors);
      00299A B7               [ 4] 8579 	or	a,a
      00299B 20 07            [12] 8580 	jr	NZ, 00105$
      00299D 6F               [ 4] 8581 	ld	l,a
      00299E CDr00r00         [17] 8582 	call	_GTSTCK
      0029A1 DD 75 F6         [19] 8583 	ld	-10 (ix), l
      0029A4                       8584 00105$:
                                   8585 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      0029A4 FD 21r02r00      [14] 8586 	ld	iy, #_line
      0029A8 FD 7E 00         [19] 8587 	ld	a, 0 (iy)
      0029AB DD 77 F9         [19] 8588 	ld	-7 (ix), a
                                   8589 ;src\/GameLogic.h:141: if(lastJoystick_LeftRight == STCK_none) {
      0029AE DD 7E FF         [19] 8590 	ld	a, -1 (ix)
      0029B1 B7               [ 4] 8591 	or	a, a
      0029B2 C2r9Br2A         [10] 8592 	jp	NZ, 00118$
                                   8593 ;src\/GameLogic.h:129: playfield[col][line + 1] = EMPTY;
      0029B5 FD 7E 00         [19] 8594 	ld	a, 0 (iy)
      0029B8 DD 77 FF         [19] 8595 	ld	-1 (ix), a
                                   8596 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0029BB FD 21r01r00      [14] 8597 	ld	iy, #_col
      0029BF FD 7E 00         [19] 8598 	ld	a, 0 (iy)
      0029C2 DD 77 FA         [19] 8599 	ld	-6 (ix), a
                                   8600 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      0029C5 DD 7E FF         [19] 8601 	ld	a, -1 (ix)
      0029C8 C6 02            [ 7] 8602 	add	a, #0x02
      0029CA DD 77 FB         [19] 8603 	ld	-5 (ix), a
                                   8604 ;src\/GameLogic.h:144: if (joystick == STCK_W && 
      0029CD DD 7E F6         [19] 8605 	ld	a, -10 (ix)
      0029D0 D6 07            [ 7] 8606 	sub	a, #0x07
      0029D2 20 5F            [12] 8607 	jr	NZ, 00112$
                                   8608 ;src\/GameLogic.h:145: col > 0 && 
      0029D4 FD 7E 00         [19] 8609 	ld	a, 0 (iy)
      0029D7 B7               [ 4] 8610 	or	a, a
      0029D8 28 59            [12] 8611 	jr	Z, 00112$
                                   8612 ;src\/GameLogic.h:146: playfield[col - 1][line] == EMPTY && 
      0029DA DD 7E FA         [19] 8613 	ld	a, -6 (ix)
      0029DD C6 FF            [ 7] 8614 	add	a, #0xff
      0029DF DD 77 FF         [19] 8615 	ld	-1 (ix), a
      0029E2 4F               [ 4] 8616 	ld	c, a
      0029E3 07               [ 4] 8617 	rlca
      0029E4 9F               [ 4] 8618 	sbc	a, a
      0029E5 47               [ 4] 8619 	ld	b, a
      0029E6 69               [ 4] 8620 	ld	l, c
      0029E7 60               [ 4] 8621 	ld	h, b
      0029E8 29               [11] 8622 	add	hl, hl
      0029E9 09               [11] 8623 	add	hl, bc
      0029EA 29               [11] 8624 	add	hl, hl
      0029EB 29               [11] 8625 	add	hl, hl
      0029EC DD 75 FE         [19] 8626 	ld	-2 (ix), l
      0029EF DD 74 FF         [19] 8627 	ld	-1 (ix), h
      0029F2 3Er00            [ 7] 8628 	ld	a, #<(_playfield)
      0029F4 DD 86 FE         [19] 8629 	add	a, -2 (ix)
      0029F7 DD 77 FC         [19] 8630 	ld	-4 (ix), a
      0029FA 3Es00            [ 7] 8631 	ld	a, #>(_playfield)
      0029FC DD 8E FF         [19] 8632 	adc	a, -1 (ix)
      0029FF DD 77 FD         [19] 8633 	ld	-3 (ix), a
      002A02 DD 7E FC         [19] 8634 	ld	a, -4 (ix)
      002A05 DD 86 F9         [19] 8635 	add	a, -7 (ix)
      002A08 DD 77 FE         [19] 8636 	ld	-2 (ix), a
      002A0B DD 7E FD         [19] 8637 	ld	a, -3 (ix)
      002A0E CE 00            [ 7] 8638 	adc	a, #0x00
      002A10 DD 77 FF         [19] 8639 	ld	-1 (ix), a
      002A13 DD 6E FE         [19] 8640 	ld	l, -2 (ix)
      002A16 DD 66 FF         [19] 8641 	ld	h, -1 (ix)
      002A19 7E               [ 7] 8642 	ld	a, (hl)
      002A1A B7               [ 4] 8643 	or	a, a
      002A1B 20 16            [12] 8644 	jr	NZ, 00112$
                                   8645 ;src\/GameLogic.h:147: playfield[col - 1][line + 2] == EMPTY) {
      002A1D DD 7E FC         [19] 8646 	ld	a, -4 (ix)
      002A20 DD 86 FB         [19] 8647 	add	a, -5 (ix)
      002A23 4F               [ 4] 8648 	ld	c, a
      002A24 DD 7E FD         [19] 8649 	ld	a, -3 (ix)
      002A27 CE 00            [ 7] 8650 	adc	a, #0x00
      002A29 47               [ 4] 8651 	ld	b, a
      002A2A 0A               [ 7] 8652 	ld	a, (bc)
      002A2B B7               [ 4] 8653 	or	a, a
      002A2C 20 05            [12] 8654 	jr	NZ, 00112$
                                   8655 ;src\/GameLogic.h:148: col--;
      002A2E FD 35 00         [23] 8656 	dec	0 (iy)
      002A31 18 68            [12] 8657 	jr	00118$
      002A33                       8658 00112$:
                                   8659 ;src\/GameLogic.h:150: else if (joystick == STCK_E && 
      002A33 DD 7E F6         [19] 8660 	ld	a, -10 (ix)
      002A36 D6 03            [ 7] 8661 	sub	a, #0x03
      002A38 20 61            [12] 8662 	jr	NZ, 00118$
                                   8663 ;src\/GameLogic.h:151: col < COLS_PLAYFIELD - 1 &&
      002A3A FD 21r01r00      [14] 8664 	ld	iy, #_col
      002A3E FD 7E 00         [19] 8665 	ld	a, 0 (iy)
      002A41 D6 05            [ 7] 8666 	sub	a, #0x05
      002A43 30 56            [12] 8667 	jr	NC, 00118$
                                   8668 ;src\/GameLogic.h:152: playfield[col + 1][line] == EMPTY &&
      002A45 DD 7E FA         [19] 8669 	ld	a, -6 (ix)
      002A48 3C               [ 4] 8670 	inc	a
      002A49 DD 77 FF         [19] 8671 	ld	-1 (ix), a
      002A4C 4F               [ 4] 8672 	ld	c, a
      002A4D 07               [ 4] 8673 	rlca
      002A4E 9F               [ 4] 8674 	sbc	a, a
      002A4F 47               [ 4] 8675 	ld	b, a
      002A50 69               [ 4] 8676 	ld	l, c
      002A51 60               [ 4] 8677 	ld	h, b
      002A52 29               [11] 8678 	add	hl, hl
      002A53 09               [11] 8679 	add	hl, bc
      002A54 29               [11] 8680 	add	hl, hl
      002A55 29               [11] 8681 	add	hl, hl
      002A56 DD 75 FE         [19] 8682 	ld	-2 (ix), l
      002A59 DD 74 FF         [19] 8683 	ld	-1 (ix), h
      002A5C 3Er00            [ 7] 8684 	ld	a, #<(_playfield)
      002A5E DD 86 FE         [19] 8685 	add	a, -2 (ix)
      002A61 DD 77 FC         [19] 8686 	ld	-4 (ix), a
      002A64 3Es00            [ 7] 8687 	ld	a, #>(_playfield)
      002A66 DD 8E FF         [19] 8688 	adc	a, -1 (ix)
      002A69 DD 77 FD         [19] 8689 	ld	-3 (ix), a
      002A6C DD 7E FC         [19] 8690 	ld	a, -4 (ix)
      002A6F DD 86 F9         [19] 8691 	add	a, -7 (ix)
      002A72 DD 77 FE         [19] 8692 	ld	-2 (ix), a
      002A75 DD 7E FD         [19] 8693 	ld	a, -3 (ix)
      002A78 CE 00            [ 7] 8694 	adc	a, #0x00
      002A7A DD 77 FF         [19] 8695 	ld	-1 (ix), a
      002A7D DD 6E FE         [19] 8696 	ld	l, -2 (ix)
      002A80 DD 66 FF         [19] 8697 	ld	h, -1 (ix)
      002A83 7E               [ 7] 8698 	ld	a, (hl)
      002A84 B7               [ 4] 8699 	or	a, a
      002A85 20 14            [12] 8700 	jr	NZ, 00118$
                                   8701 ;src\/GameLogic.h:153: playfield[col + 1][line + 2] == EMPTY) {
      002A87 DD 7E FC         [19] 8702 	ld	a, -4 (ix)
      002A8A DD 86 FB         [19] 8703 	add	a, -5 (ix)
      002A8D 4F               [ 4] 8704 	ld	c, a
      002A8E DD 7E FD         [19] 8705 	ld	a, -3 (ix)
      002A91 CE 00            [ 7] 8706 	adc	a, #0x00
      002A93 47               [ 4] 8707 	ld	b, a
      002A94 0A               [ 7] 8708 	ld	a, (bc)
      002A95 B7               [ 4] 8709 	or	a, a
      002A96 20 03            [12] 8710 	jr	NZ, 00118$
                                   8711 ;src\/GameLogic.h:154: col++;
      002A98 FD 34 00         [23] 8712 	inc	0 (iy)
      002A9B                       8713 00118$:
                                   8714 ;src\/GameLogic.h:158: if(lastJoystick_UpDown == STCK_none) {
      002A9B DD 7E F3         [19] 8715 	ld	a, -13 (ix)
      002A9E B7               [ 4] 8716 	or	a, a
      002A9F C2r61r2B         [10] 8717 	jp	NZ, 00132$
                                   8718 ;src\/GameLogic.h:162: if (joystick == STCK_N || (lastBtn1 == 0 && btn1 == 0xff) || (lastBtn2 == 0 && btn2 == 0xff)) {
      002AA2 DD 7E F6         [19] 8719 	ld	a, -10 (ix)
      002AA5 3D               [ 4] 8720 	dec	a
      002AA6 28 18            [12] 8721 	jr	Z, 00119$
      002AA8 DD 7E F4         [19] 8722 	ld	a, -12 (ix)
      002AAB B7               [ 4] 8723 	or	a, a
      002AAC 20 06            [12] 8724 	jr	NZ, 00124$
      002AAE DD 7E F7         [19] 8725 	ld	a, -9 (ix)
      002AB1 3C               [ 4] 8726 	inc	a
      002AB2 28 0C            [12] 8727 	jr	Z, 00119$
      002AB4                       8728 00124$:
      002AB4 DD 7E F5         [19] 8729 	ld	a, -11 (ix)
      002AB7 B7               [ 4] 8730 	or	a, a
      002AB8 20 1A            [12] 8731 	jr	NZ, 00120$
      002ABA DD 7E F8         [19] 8732 	ld	a, -8 (ix)
      002ABD 3C               [ 4] 8733 	inc	a
      002ABE 20 14            [12] 8734 	jr	NZ, 00120$
      002AC0                       8735 00119$:
                                   8736 ;src\/GameLogic.h:163: byte temp = bottomPiece;
      002AC0 3Ar92r00         [13] 8737 	ld	a, (#_bottomPiece + 0)
      002AC3 4F               [ 4] 8738 	ld	c, a
                                   8739 ;src\/GameLogic.h:165: bottomPiece = midPiece;
      002AC4 3Ar91r00         [13] 8740 	ld	a,(#_midPiece + 0)
      002AC7 32r92r00         [13] 8741 	ld	(#_bottomPiece),a
                                   8742 ;src\/GameLogic.h:166: midPiece = topPiece;
      002ACA 3Ar90r00         [13] 8743 	ld	a,(#_topPiece + 0)
      002ACD 32r91r00         [13] 8744 	ld	(#_midPiece),a
                                   8745 ;src\/GameLogic.h:167: topPiece = temp;
      002AD0 21r90r00         [10] 8746 	ld	hl, #_topPiece
      002AD3 71               [ 7] 8747 	ld	(hl), c
      002AD4                       8748 00120$:
                                   8749 ;src\/GameLogic.h:171: if (joystick == STCK_S) {
      002AD4 DD 7E F6         [19] 8750 	ld	a, -10 (ix)
      002AD7 D6 05            [ 7] 8751 	sub	a, #0x05
      002AD9 C2r61r2B         [10] 8752 	jp	NZ,00132$
                                   8753 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002ADC DD 7E F9         [19] 8754 	ld	a, -7 (ix)
      002ADF DD 77 FE         [19] 8755 	ld	-2 (ix), a
      002AE2 DD 7E F9         [19] 8756 	ld	a, -7 (ix)
      002AE5 DD 77 FF         [19] 8757 	ld	-1 (ix), a
      002AE8                       8758 00154$:
      002AE8 DD 7E FF         [19] 8759 	ld	a, -1 (ix)
      002AEB D6 0C            [ 7] 8760 	sub	a, #0x0c
      002AED 30 72            [12] 8761 	jr	NC, 00132$
                                   8762 ;src\/GameLogic.h:173: if(i == LINES_PLAYFIELD - 3 || playfield[col][i + 3] != EMPTY) {
      002AEF DD 7E FF         [19] 8763 	ld	a, -1 (ix)
      002AF2 D6 09            [ 7] 8764 	sub	a, #0x09
      002AF4 28 4C            [12] 8765 	jr	Z, 00125$
      002AF6 ED 4Br01r00      [20] 8766 	ld	bc, (_col)
      002AFA 06 00            [ 7] 8767 	ld	b, #0x00
      002AFC 69               [ 4] 8768 	ld	l, c
      002AFD 60               [ 4] 8769 	ld	h, b
      002AFE 29               [11] 8770 	add	hl, hl
      002AFF 09               [11] 8771 	add	hl, bc
      002B00 29               [11] 8772 	add	hl, hl
      002B01 29               [11] 8773 	add	hl, hl
      002B02 DD 75 FC         [19] 8774 	ld	-4 (ix), l
      002B05 DD 74 FD         [19] 8775 	ld	-3 (ix), h
      002B08 3Er00            [ 7] 8776 	ld	a, #<(_playfield)
      002B0A DD 86 FC         [19] 8777 	add	a, -4 (ix)
      002B0D DD 77 FA         [19] 8778 	ld	-6 (ix), a
      002B10 3Es00            [ 7] 8779 	ld	a, #>(_playfield)
      002B12 DD 8E FD         [19] 8780 	adc	a, -3 (ix)
      002B15 DD 77 FB         [19] 8781 	ld	-5 (ix), a
      002B18 DD 7E FF         [19] 8782 	ld	a, -1 (ix)
      002B1B DD 77 FD         [19] 8783 	ld	-3 (ix), a
      002B1E DD 34 FD         [23] 8784 	inc	-3 (ix)
      002B21 DD 34 FD         [23] 8785 	inc	-3 (ix)
      002B24 DD 34 FD         [23] 8786 	inc	-3 (ix)
      002B27 DD 7E FD         [19] 8787 	ld	a, -3 (ix)
      002B2A DD 86 FA         [19] 8788 	add	a, -6 (ix)
      002B2D DD 77 FC         [19] 8789 	ld	-4 (ix), a
      002B30 3E 00            [ 7] 8790 	ld	a, #0x00
      002B32 DD 8E FB         [19] 8791 	adc	a, -5 (ix)
      002B35 DD 77 FD         [19] 8792 	ld	-3 (ix), a
      002B38 DD 6E FC         [19] 8793 	ld	l, -4 (ix)
      002B3B DD 66 FD         [19] 8794 	ld	h, -3 (ix)
      002B3E 7E               [ 7] 8795 	ld	a, (hl)
      002B3F B7               [ 4] 8796 	or	a, a
      002B40 28 14            [12] 8797 	jr	Z, 00155$
      002B42                       8798 00125$:
                                   8799 ;src\/GameLogic.h:176: DrawPiece(line);
      002B42 3Ar02r00         [13] 8800 	ld	a,(#_line + 0)
      002B45 F5               [11] 8801 	push	af
      002B46 33               [ 6] 8802 	inc	sp
      002B47 CDrACr1F         [17] 8803 	call	_DrawPiece
      002B4A 33               [ 6] 8804 	inc	sp
                                   8805 ;src\/GameLogic.h:178: line = i;
      002B4B DD 7E FE         [19] 8806 	ld	a, -2 (ix)
      002B4E 32r02r00         [13] 8807 	ld	(#_line),a
                                   8808 ;src\/GameLogic.h:180: UpdateAndDrawPieceStatic();
      002B51 CDrFFr27         [17] 8809 	call	_UpdateAndDrawPieceStatic
                                   8810 ;src\/GameLogic.h:181: break;
      002B54 18 0B            [12] 8811 	jr	00132$
      002B56                       8812 00155$:
                                   8813 ;src\/GameLogic.h:172: for(byte i = line; i < LINES_PLAYFIELD; i++) {
      002B56 DD 34 FF         [23] 8814 	inc	-1 (ix)
      002B59 DD 7E FF         [19] 8815 	ld	a, -1 (ix)
      002B5C DD 77 FE         [19] 8816 	ld	-2 (ix), a
      002B5F 18 87            [12] 8817 	jr	00154$
      002B61                       8818 00132$:
                                   8819 ;src\/GameLogic.h:190: lastJoystick_LeftRight = joystick;
      002B61 DD 7E F6         [19] 8820 	ld	a, -10 (ix)
      002B64 DD 77 FF         [19] 8821 	ld	-1 (ix), a
                                   8822 ;src\/GameLogic.h:191: lastJoystick_UpDown = joystick;
      002B67 DD 7E F6         [19] 8823 	ld	a, -10 (ix)
      002B6A DD 77 F3         [19] 8824 	ld	-13 (ix), a
                                   8825 ;src\/GameLogic.h:192: lastBtn1 = btn1;
      002B6D DD 7E F7         [19] 8826 	ld	a, -9 (ix)
      002B70 DD 77 F4         [19] 8827 	ld	-12 (ix), a
                                   8828 ;src\/GameLogic.h:193: lastBtn2 = btn2;
      002B73 DD 7E F8         [19] 8829 	ld	a, -8 (ix)
      002B76 DD 77 F5         [19] 8830 	ld	-11 (ix), a
                                   8831 ;src\/GameLogic.h:217: keyboard = SNSMAT(7);
      002B79 2E 07            [ 7] 8832 	ld	l, #0x07
      002B7B CDr00r00         [17] 8833 	call	_SNSMAT
                                   8834 ;src\/GameLogic.h:219: if((keyboard & 0b00000100) == 0) {
      002B7E CB 55            [ 8] 8835 	bit	2, l
      002B80 20 03            [12] 8836 	jr	NZ, 00134$
                                   8837 ;src\/GameLogic.h:220: Pause();
      002B82 CDrBAr28         [17] 8838 	call	_Pause
      002B85                       8839 00134$:
                                   8840 ;src\/GameLogic.h:225: counter++;
      002B85 FD 21r03r00      [14] 8841 	ld	iy, #_counter
      002B89 FD 34 00         [23] 8842 	inc	0 (iy)
                                   8843 ;src\/GameLogic.h:226: if(counter == speed) {
      002B8C FD 7E 00         [19] 8844 	ld	a, 0 (iy)
      002B8F 21r96r00         [10] 8845 	ld	hl, #_speed
      002B92 96               [ 7] 8846 	sub	a, (hl)
      002B93 20 3F            [12] 8847 	jr	NZ, 00139$
                                   8848 ;src\/GameLogic.h:228: counter = 0;
      002B95 21r03r00         [10] 8849 	ld	hl, #_counter
      002B98 36 00            [10] 8850 	ld	(hl), #0x00
                                   8851 ;src\/GameLogic.h:231: DrawPiece(line);
      002B9A 3Ar02r00         [13] 8852 	ld	a,(#_line + 0)
      002B9D F5               [11] 8853 	push	af
      002B9E 33               [ 6] 8854 	inc	sp
      002B9F CDrACr1F         [17] 8855 	call	_DrawPiece
      002BA2 33               [ 6] 8856 	inc	sp
                                   8857 ;src\/GameLogic.h:235: if(line == LINES_PLAYFIELD - 3 || playfield[col][line + 3] != EMPTY) {
      002BA3 FD 21r02r00      [14] 8858 	ld	iy, #_line
      002BA7 FD 7E 00         [19] 8859 	ld	a, 0 (iy)
      002BAA D6 09            [ 7] 8860 	sub	a, #0x09
      002BAC 28 1F            [12] 8861 	jr	Z, 00135$
      002BAE ED 4Br01r00      [20] 8862 	ld	bc, (_col)
      002BB2 06 00            [ 7] 8863 	ld	b, #0x00
      002BB4 69               [ 4] 8864 	ld	l, c
      002BB5 60               [ 4] 8865 	ld	h, b
      002BB6 29               [11] 8866 	add	hl, hl
      002BB7 09               [11] 8867 	add	hl, bc
      002BB8 29               [11] 8868 	add	hl, hl
      002BB9 29               [11] 8869 	add	hl, hl
      002BBA EB               [ 4] 8870 	ex	de, hl
      002BBB 21r00r00         [10] 8871 	ld	hl, #_playfield
      002BBE 19               [11] 8872 	add	hl, de
      002BBF EB               [ 4] 8873 	ex	de, hl
      002BC0 FD 7E 00         [19] 8874 	ld	a, 0 (iy)
      002BC3 C6 03            [ 7] 8875 	add	a, #0x03
      002BC5 6F               [ 4] 8876 	ld	l, a
      002BC6 26 00            [ 7] 8877 	ld	h, #0x00
      002BC8 19               [11] 8878 	add	hl, de
      002BC9 7E               [ 7] 8879 	ld	a, (hl)
      002BCA B7               [ 4] 8880 	or	a, a
      002BCB 28 03            [12] 8881 	jr	Z, 00136$
      002BCD                       8882 00135$:
                                   8883 ;src\/GameLogic.h:237: UpdateAndDrawPieceStatic();
      002BCD CDrFFr27         [17] 8884 	call	_UpdateAndDrawPieceStatic
      002BD0                       8885 00136$:
                                   8886 ;src\/GameLogic.h:240: line++;
      002BD0 21r02r00         [10] 8887 	ld	hl, #_line
      002BD3 34               [11] 8888 	inc	(hl)
      002BD4                       8889 00139$:
                                   8890 ;src\/GameLogic.h:247: playfield[col][line] = topPiece;
      002BD4 ED 4Br01r00      [20] 8891 	ld	bc, (_col)
      002BD8 06 00            [ 7] 8892 	ld	b, #0x00
      002BDA 69               [ 4] 8893 	ld	l, c
      002BDB 60               [ 4] 8894 	ld	h, b
      002BDC 29               [11] 8895 	add	hl, hl
      002BDD 09               [11] 8896 	add	hl, bc
      002BDE 29               [11] 8897 	add	hl, hl
      002BDF 29               [11] 8898 	add	hl, hl
      002BE0 EB               [ 4] 8899 	ex	de, hl
      002BE1 21r00r00         [10] 8900 	ld	hl, #_playfield
      002BE4 19               [11] 8901 	add	hl, de
      002BE5 EB               [ 4] 8902 	ex	de, hl
      002BE6 3Ar02r00         [13] 8903 	ld	a, (#_line + 0)
      002BE9 6F               [ 4] 8904 	ld	l, a
      002BEA 26 00            [ 7] 8905 	ld	h, #0x00
      002BEC 19               [11] 8906 	add	hl, de
      002BED 3Ar90r00         [13] 8907 	ld	a,(#_topPiece + 0)
      002BF0 77               [ 7] 8908 	ld	(hl), a
                                   8909 ;src\/GameLogic.h:248: playfield[col][line + 1] = midPiece;
      002BF1 ED 4Br01r00      [20] 8910 	ld	bc, (_col)
      002BF5 06 00            [ 7] 8911 	ld	b, #0x00
      002BF7 69               [ 4] 8912 	ld	l, c
      002BF8 60               [ 4] 8913 	ld	h, b
      002BF9 29               [11] 8914 	add	hl, hl
      002BFA 09               [11] 8915 	add	hl, bc
      002BFB 29               [11] 8916 	add	hl, hl
      002BFC 29               [11] 8917 	add	hl, hl
      002BFD EB               [ 4] 8918 	ex	de, hl
      002BFE 21r00r00         [10] 8919 	ld	hl, #_playfield
      002C01 19               [11] 8920 	add	hl, de
      002C02 EB               [ 4] 8921 	ex	de, hl
      002C03 3Ar02r00         [13] 8922 	ld	a, (#_line + 0)
      002C06 6F               [ 4] 8923 	ld	l, a
      002C07 2C               [ 4] 8924 	inc	l
      002C08 26 00            [ 7] 8925 	ld	h, #0x00
      002C0A 19               [11] 8926 	add	hl, de
      002C0B 3Ar91r00         [13] 8927 	ld	a,(#_midPiece + 0)
      002C0E 77               [ 7] 8928 	ld	(hl), a
                                   8929 ;src\/GameLogic.h:249: playfield[col][line + 2] = bottomPiece;
      002C0F ED 4Br01r00      [20] 8930 	ld	bc, (_col)
      002C13 06 00            [ 7] 8931 	ld	b, #0x00
      002C15 69               [ 4] 8932 	ld	l, c
      002C16 60               [ 4] 8933 	ld	h, b
      002C17 29               [11] 8934 	add	hl, hl
      002C18 09               [11] 8935 	add	hl, bc
      002C19 29               [11] 8936 	add	hl, hl
      002C1A 29               [11] 8937 	add	hl, hl
      002C1B EB               [ 4] 8938 	ex	de, hl
      002C1C 21r00r00         [10] 8939 	ld	hl, #_playfield
      002C1F 19               [11] 8940 	add	hl, de
      002C20 EB               [ 4] 8941 	ex	de, hl
      002C21 3Ar02r00         [13] 8942 	ld	a, (#_line + 0)
      002C24 6F               [ 4] 8943 	ld	l, a
      002C25 2C               [ 4] 8944 	inc	l
      002C26 2C               [ 4] 8945 	inc	l
      002C27 26 00            [ 7] 8946 	ld	h, #0x00
      002C29 19               [11] 8947 	add	hl, de
      002C2A 3Ar92r00         [13] 8948 	ld	a,(#_bottomPiece + 0)
      002C2D 77               [ 7] 8949 	ld	(hl), a
                                   8950 ;src\/GameLogic.h:254: DrawPiece(line);
      002C2E 3Ar02r00         [13] 8951 	ld	a,(#_line + 0)
      002C31 F5               [11] 8952 	push	af
      002C32 33               [ 6] 8953 	inc	sp
      002C33 CDrACr1F         [17] 8954 	call	_DrawPiece
      002C36 33               [ 6] 8955 	inc	sp
                                   8956 ;src\/GameLogic.h:128: playfield[col][line] = EMPTY;
      002C37 ED 4Br01r00      [20] 8957 	ld	bc, (_col)
      002C3B 06 00            [ 7] 8958 	ld	b, #0x00
      002C3D 69               [ 4] 8959 	ld	l, c
      002C3E 60               [ 4] 8960 	ld	h, b
      002C3F 29               [11] 8961 	add	hl, hl
      002C40 09               [11] 8962 	add	hl, bc
      002C41 29               [11] 8963 	add	hl, hl
      002C42 29               [11] 8964 	add	hl, hl
      002C43 EB               [ 4] 8965 	ex	de, hl
                                   8966 ;src\/GameLogic.h:259: if(playfield[col][line + 3] != EMPTY) {
      002C44 21r00r00         [10] 8967 	ld	hl, #_playfield
      002C47 19               [11] 8968 	add	hl, de
      002C48 EB               [ 4] 8969 	ex	de, hl
      002C49 3Ar02r00         [13] 8970 	ld	a,(#_line + 0)
      002C4C C6 03            [ 7] 8971 	add	a, #0x03
      002C4E 4F               [ 4] 8972 	ld	c, a
      002C4F 69               [ 4] 8973 	ld	l, c
      002C50 26 00            [ 7] 8974 	ld	h, #0x00
      002C52 19               [11] 8975 	add	hl, de
      002C53 7E               [ 7] 8976 	ld	a, (hl)
      002C54 B7               [ 4] 8977 	or	a, a
      002C55 28 06            [12] 8978 	jr	Z, 00148$
                                   8979 ;src\/GameLogic.h:260: HideArrowSprite();
      002C57 CDr48r0C         [17] 8980 	call	_HideArrowSprite
      002C5A C3r17r29         [10] 8981 	jp	00150$
      002C5D                       8982 00148$:
                                   8983 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002C5D 41               [ 4] 8984 	ld	b, c
      002C5E                       8985 00157$:
      002C5E 78               [ 4] 8986 	ld	a, b
      002C5F D6 0C            [ 7] 8987 	sub	a, #0x0c
      002C61 D2r17r29         [10] 8988 	jp	NC, 00150$
                                   8989 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C64 3Ar01r00         [13] 8990 	ld	a,(#_col + 0)
      002C67 87               [ 4] 8991 	add	a, a
      002C68 87               [ 4] 8992 	add	a, a
      002C69 87               [ 4] 8993 	add	a, a
      002C6A 87               [ 4] 8994 	add	a, a
      002C6B DD 77 FE         [19] 8995 	ld	-2 (ix), a
                                   8996 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002C6E 68               [ 4] 8997 	ld	l, b
      002C6F 26 00            [ 7] 8998 	ld	h, #0x00
      002C71 19               [11] 8999 	add	hl, de
                                   9000 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C72 DD 7E FE         [19] 9001 	ld	a, -2 (ix)
      002C75 C6 50            [ 7] 9002 	add	a, #0x50
      002C77 DD 77 FE         [19] 9003 	ld	-2 (ix), a
                                   9004 ;src\/GameLogic.h:264: if(i == LINES_PLAYFIELD - 1 && playfield[col][i] == EMPTY) {
      002C7A 6E               [ 7] 9005 	ld	l, (hl)
      002C7B 78               [ 4] 9006 	ld	a, b
      002C7C D6 0B            [ 7] 9007 	sub	a,#0x0b
      002C7E 20 16            [12] 9008 	jr	NZ, 00143$
      002C80 B5               [ 4] 9009 	or	a,l
      002C81 20 13            [12] 9010 	jr	NZ, 00143$
                                   9011 ;src\/GameLogic.h:265: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i) * 16);
      002C83 79               [ 4] 9012 	ld	a, c
      002C84 87               [ 4] 9013 	add	a, a
      002C85 87               [ 4] 9014 	add	a, a
      002C86 87               [ 4] 9015 	add	a, a
      002C87 87               [ 4] 9016 	add	a, a
      002C88 F5               [11] 9017 	push	af
      002C89 33               [ 6] 9018 	inc	sp
      002C8A DD 7E FE         [19] 9019 	ld	a, -2 (ix)
      002C8D F5               [11] 9020 	push	af
      002C8E 33               [ 6] 9021 	inc	sp
      002C8F CDrEDr00         [17] 9022 	call	_DrawArrowSprite
      002C92 F1               [10] 9023 	pop	af
                                   9024 ;src\/GameLogic.h:266: break;
      002C93 C3r17r29         [10] 9025 	jp	00150$
      002C96                       9026 00143$:
                                   9027 ;src\/GameLogic.h:268: else if(playfield[col][i] != EMPTY) {
      002C96 7D               [ 4] 9028 	ld	a, l
      002C97 B7               [ 4] 9029 	or	a, a
      002C98 28 14            [12] 9030 	jr	Z, 00158$
                                   9031 ;src\/GameLogic.h:269: DrawArrowSprite((col * 16) + (PLAYFIELD_HORIZ_OFFSET * 8), (i - 1) * 16);
      002C9A 79               [ 4] 9032 	ld	a, c
      002C9B 3D               [ 4] 9033 	dec	a
      002C9C 87               [ 4] 9034 	add	a, a
      002C9D 87               [ 4] 9035 	add	a, a
      002C9E 87               [ 4] 9036 	add	a, a
      002C9F 87               [ 4] 9037 	add	a, a
      002CA0 F5               [11] 9038 	push	af
      002CA1 33               [ 6] 9039 	inc	sp
      002CA2 DD 7E FE         [19] 9040 	ld	a, -2 (ix)
      002CA5 F5               [11] 9041 	push	af
      002CA6 33               [ 6] 9042 	inc	sp
      002CA7 CDrEDr00         [17] 9043 	call	_DrawArrowSprite
      002CAA F1               [10] 9044 	pop	af
                                   9045 ;src\/GameLogic.h:270: break;
      002CAB C3r17r29         [10] 9046 	jp	00150$
      002CAE                       9047 00158$:
                                   9048 ;src\/GameLogic.h:263: for(byte i = line + 3; i < LINES_PLAYFIELD; i++) {
      002CAE 04               [ 4] 9049 	inc	b
      002CAF 48               [ 4] 9050 	ld	c, b
      002CB0 18 AC            [12] 9051 	jr	00157$
      002CB2                       9052 00152$:
                                   9053 ;src\/GameLogic.h:277: DrawString("GAME OVER", 12, 12);
      002CB2 11 0C 0C         [10] 9054 	ld	de, #0x0c0c
      002CB5 D5               [11] 9055 	push	de
      002CB6 21rCAr2C         [10] 9056 	ld	hl, #___str_7
      002CB9 E5               [11] 9057 	push	hl
      002CBA CDrBBr12         [17] 9058 	call	_DrawString
      002CBD F1               [10] 9059 	pop	af
                                   9060 ;src\/GameLogic.h:282: Wait(60 * 5);
      002CBE 21 2C 01         [10] 9061 	ld	hl, #0x012c
      002CC1 E3               [19] 9062 	ex	(sp),hl
      002CC2 CDr00r00         [17] 9063 	call	_Wait
                                   9064 ;src\/GameLogic.h:284: }
      002CC5 DD F9            [10] 9065 	ld	sp,ix
      002CC7 DD E1            [14] 9066 	pop	ix
      002CC9 C9               [10] 9067 	ret
      002CCA                       9068 ___str_7:
      002CCA 47 41 4D 45 20 4F 56  9069 	.ascii "GAME OVER"
             45 52
      002CD3 00                    9070 	.db 0x00
                                   9071 ;src\/GameLogic.h:286: void TestCase() {
                                   9072 ;	---------------------------------
                                   9073 ; Function TestCase
                                   9074 ; ---------------------------------
      002CD4                       9075 _TestCase::
                                   9076 ;src\/GameLogic.h:307: playfield[2][ 8] = TILE_GREEN;
      002CD4 21r20r00         [10] 9077 	ld	hl, #(_playfield + 0x0020)
      002CD7 36 04            [10] 9078 	ld	(hl), #0x04
                                   9079 ;src\/GameLogic.h:308: playfield[2][ 9] = TILE_BLUE;
      002CD9 21r21r00         [10] 9080 	ld	hl, #(_playfield + 0x0021)
      002CDC 36 0C            [10] 9081 	ld	(hl), #0x0c
                                   9082 ;src\/GameLogic.h:310: playfield[0][10] = TILE_BLUE;
      002CDE 21r0Ar00         [10] 9083 	ld	hl, #(_playfield + 0x000a)
      002CE1 36 0C            [10] 9084 	ld	(hl), #0x0c
                                   9085 ;src\/GameLogic.h:311: playfield[1][10] = TILE_BLUE;
      002CE3 21r16r00         [10] 9086 	ld	hl, #(_playfield + 0x0016)
      002CE6 36 0C            [10] 9087 	ld	(hl), #0x0c
                                   9088 ;src\/GameLogic.h:312: playfield[2][10] = TILE_RED;
      002CE8 21r22r00         [10] 9089 	ld	hl, #(_playfield + 0x0022)
      002CEB 36 08            [10] 9090 	ld	(hl), #0x08
                                   9091 ;src\/GameLogic.h:313: playfield[4][10] = TILE_RED;
      002CED 21r3Ar00         [10] 9092 	ld	hl, #(_playfield + 0x003a)
      002CF0 36 08            [10] 9093 	ld	(hl), #0x08
                                   9094 ;src\/GameLogic.h:314: playfield[5][10] = TILE_BLUE;
      002CF2 21r46r00         [10] 9095 	ld	hl, #(_playfield + 0x0046)
      002CF5 36 0C            [10] 9096 	ld	(hl), #0x0c
                                   9097 ;src\/GameLogic.h:316: playfield[0][11] = TILE_GREEN;
      002CF7 21r0Br00         [10] 9098 	ld	hl, #(_playfield + 0x000b)
      002CFA 36 04            [10] 9099 	ld	(hl), #0x04
                                   9100 ;src\/GameLogic.h:317: playfield[1][11] = TILE_GREEN;
      002CFC 21r17r00         [10] 9101 	ld	hl, #(_playfield + 0x0017)
      002CFF 36 04            [10] 9102 	ld	(hl), #0x04
                                   9103 ;src\/GameLogic.h:318: playfield[2][11] = TILE_RED;
      002D01 21r23r00         [10] 9104 	ld	hl, #(_playfield + 0x0023)
      002D04 36 08            [10] 9105 	ld	(hl), #0x08
                                   9106 ;src\/GameLogic.h:319: playfield[3][11] = EMPTY;
      002D06 21r2Fr00         [10] 9107 	ld	hl, #(_playfield + 0x002f)
      002D09 36 00            [10] 9108 	ld	(hl), #0x00
                                   9109 ;src\/GameLogic.h:320: playfield[4][11] = TILE_RED;
      002D0B 21r3Br00         [10] 9110 	ld	hl, #(_playfield + 0x003b)
      002D0E 36 08            [10] 9111 	ld	(hl), #0x08
                                   9112 ;src\/GameLogic.h:321: playfield[5][11] = TILE_RED;
      002D10 21r47r00         [10] 9113 	ld	hl, #(_playfield + 0x0047)
      002D13 36 08            [10] 9114 	ld	(hl), #0x08
                                   9115 ;src\/GameLogic.h:323: topPiece = TILE_BLUE;
      002D15 3E 0C            [ 7] 9116 	ld	a, #0x0c
      002D17 32r90r00         [13] 9117 	ld	(#_topPiece), a
                                   9118 ;src\/GameLogic.h:324: midPiece = TILE_RED;
                                   9119 ;src\/GameLogic.h:325: bottomPiece = TILE_RED;
      002D1A 3E 08            [ 7] 9120 	ld	a,#0x08
      002D1C 32r91r00         [13] 9121 	ld	(#_midPiece),a
      002D1F 32r92r00         [13] 9122 	ld	(#_bottomPiece), a
                                   9123 ;src\/GameLogic.h:326: }
      002D22 C9               [10] 9124 	ret
                                   9125 ;src\/GameLogic.h:328: void InitGame() {
                                   9126 ;	---------------------------------
                                   9127 ; Function InitGame
                                   9128 ; ---------------------------------
      002D23                       9129 _InitGame::
                                   9130 ;src\/GameLogic.h:330: gameOver = FALSE;
      002D23 21r00r00         [10] 9131 	ld	hl, #_gameOver
      002D26 36 00            [10] 9132 	ld	(hl), #0x00
                                   9133 ;src\/GameLogic.h:331: line = INITIAL_LINE;
      002D28 21r02r00         [10] 9134 	ld	hl, #_line
      002D2B 36 00            [10] 9135 	ld	(hl), #0x00
                                   9136 ;src\/GameLogic.h:332: col = INITIAL_COL;
      002D2D 21r01r00         [10] 9137 	ld	hl, #_col
      002D30 36 02            [10] 9138 	ld	(hl), #0x02
                                   9139 ;src\/GameLogic.h:334: blocksRemoved = 0;
      002D32 21 00 00         [10] 9140 	ld	hl, #0x0000
      002D35 22r04r00         [16] 9141 	ld	(_blocksRemoved), hl
                                   9142 ;src\/GameLogic.h:335: level = 1;
      002D38 21r06r00         [10] 9143 	ld	hl, #_level
      002D3B 36 01            [10] 9144 	ld	(hl), #0x01
                                   9145 ;src\/GameLogic.h:336: newLevel = FALSE;
      002D3D 21r07r00         [10] 9146 	ld	hl, #_newLevel
      002D40 36 00            [10] 9147 	ld	(hl), #0x00
                                   9148 ;src\/GameLogic.h:337: speed = 60;
      002D42 21r96r00         [10] 9149 	ld	hl, #_speed
      002D45 36 3C            [10] 9150 	ld	(hl), #0x3c
                                   9151 ;src\/GameLogic.h:339: InitVRAM();
      002D47 CDr55r1C         [17] 9152 	call	_InitVRAM
                                   9153 ;src\/GameLogic.h:342: InitRnd(rndSeed, JIFFY * rndSeed, JIFFY * rndSeed + 99);
      002D4A 3Ar08r00         [13] 9154 	ld	a, (#_rndSeed + 0)
      002D4D 5F               [ 4] 9155 	ld	e, a
      002D4E 3A 9E FC         [13] 9156 	ld	a, (#_JIFFY + 0)
      002D51 67               [ 4] 9157 	ld	h, a
      002D52 2E 00            [ 7] 9158 	ld	l, #0x00
      002D54 55               [ 4] 9159 	ld	d, l
      002D55 06 08            [ 7] 9160 	ld	b, #0x08
      002D57                       9161 00133$:
      002D57 29               [11] 9162 	add	hl, hl
      002D58 30 01            [12] 9163 	jr	NC, 00134$
      002D5A 19               [11] 9164 	add	hl, de
      002D5B                       9165 00134$:
      002D5B 10 FA            [13] 9166 	djnz	00133$
      002D5D 7D               [ 4] 9167 	ld	a, l
      002D5E C6 63            [ 7] 9168 	add	a, #0x63
      002D60 4F               [ 4] 9169 	ld	c, a
      002D61 3Ar08r00         [13] 9170 	ld	a, (#_rndSeed + 0)
      002D64 5F               [ 4] 9171 	ld	e, a
      002D65 3A 9E FC         [13] 9172 	ld	a, (#_JIFFY + 0)
      002D68 67               [ 4] 9173 	ld	h, a
      002D69 2E 00            [ 7] 9174 	ld	l, #0x00
      002D6B 55               [ 4] 9175 	ld	d, l
      002D6C 06 08            [ 7] 9176 	ld	b, #0x08
      002D6E                       9177 00135$:
      002D6E 29               [11] 9178 	add	hl, hl
      002D6F 30 01            [12] 9179 	jr	NC, 00136$
      002D71 19               [11] 9180 	add	hl, de
      002D72                       9181 00136$:
      002D72 10 FA            [13] 9182 	djnz	00135$
      002D74 79               [ 4] 9183 	ld	a, c
      002D75 F5               [11] 9184 	push	af
      002D76 7D               [ 4] 9185 	ld	a, l
      002D77 33               [ 6] 9186 	inc	sp
      002D78 F5               [11] 9187 	push	af
      002D79 33               [ 6] 9188 	inc	sp
      002D7A 3Ar08r00         [13] 9189 	ld	a,(#_rndSeed + 0)
      002D7D F5               [11] 9190 	push	af
      002D7E 33               [ 6] 9191 	inc	sp
      002D7F CDr50r00         [17] 9192 	call	_InitRnd
      002D82 F1               [10] 9193 	pop	af
      002D83 33               [ 6] 9194 	inc	sp
                                   9195 ;src\/GameLogic.h:345: RandomPiece();
      002D84 CDrC5r27         [17] 9196 	call	_RandomPiece
                                   9197 ;src\/GameLogic.h:346: RandomPiece();
      002D87 CDrC5r27         [17] 9198 	call	_RandomPiece
                                   9199 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002D8A 0E 00            [ 7] 9200 	ld	c, #0x00
      002D8C                       9201 00107$:
      002D8C 79               [ 4] 9202 	ld	a, c
      002D8D D6 0C            [ 7] 9203 	sub	a, #0x0c
      002D8F 30 20            [12] 9204 	jr	NC, 00102$
                                   9205 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002D91 06 00            [ 7] 9206 	ld	b, #0x00
      002D93                       9207 00104$:
      002D93 78               [ 4] 9208 	ld	a, b
      002D94 D6 06            [ 7] 9209 	sub	a, #0x06
      002D96 30 16            [12] 9210 	jr	NC, 00108$
                                   9211 ;src\/GameLogic.h:351: playfield[col][line] = EMPTY;
      002D98 58               [ 4] 9212 	ld	e, b
      002D99 16 00            [ 7] 9213 	ld	d, #0x00
      002D9B 6B               [ 4] 9214 	ld	l, e
      002D9C 62               [ 4] 9215 	ld	h, d
      002D9D 29               [11] 9216 	add	hl, hl
      002D9E 19               [11] 9217 	add	hl, de
      002D9F 29               [11] 9218 	add	hl, hl
      002DA0 29               [11] 9219 	add	hl, hl
      002DA1 11r00r00         [10] 9220 	ld	de, #_playfield
      002DA4 19               [11] 9221 	add	hl, de
      002DA5 59               [ 4] 9222 	ld	e, c
      002DA6 16 00            [ 7] 9223 	ld	d, #0x00
      002DA8 19               [11] 9224 	add	hl, de
      002DA9 36 00            [10] 9225 	ld	(hl), #0x00
                                   9226 ;src\/GameLogic.h:350: for(byte col = 0; col < COLS_PLAYFIELD; col++) {
      002DAB 04               [ 4] 9227 	inc	b
      002DAC 18 E5            [12] 9228 	jr	00104$
      002DAE                       9229 00108$:
                                   9230 ;src\/GameLogic.h:349: for(byte line = 0; line < LINES_PLAYFIELD; line++) {
      002DAE 0C               [ 4] 9231 	inc	c
      002DAF 18 DB            [12] 9232 	jr	00107$
      002DB1                       9233 00102$:
                                   9234 ;src\/GameLogic.h:360: DrawBackground();
      002DB1 CDr26r1C         [17] 9235 	call	_DrawBackground
                                   9236 ;src\/GameLogic.h:362: DrawPlayfield();
      002DB4 CDrCFr1F         [17] 9237 	call	_DrawPlayfield
                                   9238 ;src\/GameLogic.h:364: DrawScore();
      002DB7 CDr7Er1A         [17] 9239 	call	_DrawScore
                                   9240 ;src\/GameLogic.h:366: ShowCountdown();
      002DBA CDr10r11         [17] 9241 	call	_ShowCountdown
                                   9242 ;src\/GameLogic.h:368: DrawNextPiece();
      002DBD CDrAFr16         [17] 9243 	call	_DrawNextPiece
                                   9244 ;src\/GameLogic.h:370: GameLoop();
                                   9245 ;src\/GameLogic.h:371: }
      002DC0 C3rFAr28         [10] 9246 	jp	_GameLoop
                                   9247 ;src\/Intro.h:1: void ChangeFontColor(byte color) {
                                   9248 ;	---------------------------------
                                   9249 ; Function ChangeFontColor
                                   9250 ; ---------------------------------
      002DC3                       9251 _ChangeFontColor::
                                   9252 ;src\/Intro.h:3: FILVRM(CLRTBL + (256 * 8) + (NUMBER_OF_PATTERNS * 8), (HICHAR - LOCHAR + 1) * 8, color);
      002DC3 21 02 00         [10] 9253 	ld	hl, #2
      002DC6 39               [11] 9254 	add	hl, sp
      002DC7 7E               [ 7] 9255 	ld	a, (hl)
      002DC8 F5               [11] 9256 	push	af
      002DC9 33               [ 6] 9257 	inc	sp
      002DCA 21 00 03         [10] 9258 	ld	hl, #0x0300
      002DCD E5               [11] 9259 	push	hl
      002DCE 21 78 29         [10] 9260 	ld	hl, #0x2978
      002DD1 E5               [11] 9261 	push	hl
      002DD2 CDr00r00         [17] 9262 	call	_FILVRM
      002DD5 F1               [10] 9263 	pop	af
      002DD6 F1               [10] 9264 	pop	af
      002DD7 33               [ 6] 9265 	inc	sp
                                   9266 ;src\/Intro.h:5: }
      002DD8 C9               [10] 9267 	ret
                                   9268 ;src\/Intro.h:33: void FadeOut() {
                                   9269 ;	---------------------------------
                                   9270 ; Function FadeOut
                                   9271 ; ---------------------------------
      002DD9                       9272 _FadeOut::
      002DD9 3B               [ 6] 9273 	dec	sp
                                   9274 ;src\/Intro.h:38: ChangeFontColor(0x40);
      002DDA 3E 40            [ 7] 9275 	ld	a, #0x40
      002DDC F5               [11] 9276 	push	af
      002DDD 33               [ 6] 9277 	inc	sp
      002DDE CDrC3r2D         [17] 9278 	call	_ChangeFontColor
      002DE1 33               [ 6] 9279 	inc	sp
                                   9280 ;src\/Intro.h:45: while(counter++ < 105) {
      002DE2 AF               [ 4] 9281 	xor	a, a
      002DE3 FD 21 00 00      [14] 9282 	ld	iy, #0
      002DE7 FD 39            [15] 9283 	add	iy, sp
      002DE9 FD 77 00         [19] 9284 	ld	0 (iy), a
      002DEC                       9285 00121$:
      002DEC FD 21 00 00      [14] 9286 	ld	iy, #0
      002DF0 FD 39            [15] 9287 	add	iy, sp
      002DF2 FD 7E 00         [19] 9288 	ld	a, 0 (iy)
      002DF5 D6 69            [ 7] 9289 	sub	a, #0x69
      002DF7 D2rB2r2E         [10] 9290 	jp	NC, 00123$
      002DFA FD 34 00         [23] 9291 	inc	0 (iy)
                                   9292 ;src\/Intro.h:46: byte lastJiffy = JIFFY;
      002DFD 21 9E FC         [10] 9293 	ld	hl, #_JIFFY
      002E00 4E               [ 7] 9294 	ld	c, (hl)
                                   9295 ;src\/Intro.h:47: while (JIFFY == lastJiffy) {
      002E01                       9296 00101$:
      002E01 59               [ 4] 9297 	ld	e, c
      002E02 16 00            [ 7] 9298 	ld	d, #0x00
      002E04 2A 9E FC         [16] 9299 	ld	hl, (_JIFFY)
      002E07 BF               [ 4] 9300 	cp	a, a
      002E08 ED 52            [15] 9301 	sbc	hl, de
      002E0A 28 F5            [12] 9302 	jr	Z, 00101$
                                   9303 ;src\/Intro.h:50: if(counter == 90) {
      002E0C 21 00 00         [10] 9304 	ld	hl, #0
      002E0F 39               [11] 9305 	add	hl, sp
      002E10 7E               [ 7] 9306 	ld	a, (hl)
      002E11 D6 5A            [ 7] 9307 	sub	a, #0x5a
      002E13 20 12            [12] 9308 	jr	NZ, 00119$
                                   9309 ;src\/Intro.h:51: ChangeFontColor(0x40);
      002E15 3E 40            [ 7] 9310 	ld	a, #0x40
      002E17 F5               [11] 9311 	push	af
      002E18 33               [ 6] 9312 	inc	sp
      002E19 CDrC3r2D         [17] 9313 	call	_ChangeFontColor
      002E1C 33               [ 6] 9314 	inc	sp
                                   9315 ;src\/Intro.h:52: Wait(5);
      002E1D 21 05 00         [10] 9316 	ld	hl, #0x0005
      002E20 E5               [11] 9317 	push	hl
      002E21 CDr00r00         [17] 9318 	call	_Wait
      002E24 F1               [10] 9319 	pop	af
      002E25 18 C5            [12] 9320 	jr	00121$
      002E27                       9321 00119$:
                                   9322 ;src\/Intro.h:54: else if(counter == 75) {
      002E27 21 00 00         [10] 9323 	ld	hl, #0
      002E2A 39               [11] 9324 	add	hl, sp
      002E2B 7E               [ 7] 9325 	ld	a, (hl)
      002E2C D6 4B            [ 7] 9326 	sub	a, #0x4b
      002E2E 20 12            [12] 9327 	jr	NZ, 00116$
                                   9328 ;src\/Intro.h:55: ChangeFontColor(0x50);
      002E30 3E 50            [ 7] 9329 	ld	a, #0x50
      002E32 F5               [11] 9330 	push	af
      002E33 33               [ 6] 9331 	inc	sp
      002E34 CDrC3r2D         [17] 9332 	call	_ChangeFontColor
      002E37 33               [ 6] 9333 	inc	sp
                                   9334 ;src\/Intro.h:56: Wait(5);
      002E38 21 05 00         [10] 9335 	ld	hl, #0x0005
      002E3B E5               [11] 9336 	push	hl
      002E3C CDr00r00         [17] 9337 	call	_Wait
      002E3F F1               [10] 9338 	pop	af
      002E40 18 AA            [12] 9339 	jr	00121$
      002E42                       9340 00116$:
                                   9341 ;src\/Intro.h:58: else if(counter == 60) {
      002E42 21 00 00         [10] 9342 	ld	hl, #0
      002E45 39               [11] 9343 	add	hl, sp
      002E46 7E               [ 7] 9344 	ld	a, (hl)
      002E47 D6 3C            [ 7] 9345 	sub	a, #0x3c
      002E49 20 12            [12] 9346 	jr	NZ, 00113$
                                   9347 ;src\/Intro.h:59: ChangeFontColor(0xe0);
      002E4B 3E E0            [ 7] 9348 	ld	a, #0xe0
      002E4D F5               [11] 9349 	push	af
      002E4E 33               [ 6] 9350 	inc	sp
      002E4F CDrC3r2D         [17] 9351 	call	_ChangeFontColor
      002E52 33               [ 6] 9352 	inc	sp
                                   9353 ;src\/Intro.h:60: Wait(5);
      002E53 21 05 00         [10] 9354 	ld	hl, #0x0005
      002E56 E5               [11] 9355 	push	hl
      002E57 CDr00r00         [17] 9356 	call	_Wait
      002E5A F1               [10] 9357 	pop	af
      002E5B 18 8F            [12] 9358 	jr	00121$
      002E5D                       9359 00113$:
                                   9360 ;src\/Intro.h:62: else if(counter == 45) {
      002E5D 21 00 00         [10] 9361 	ld	hl, #0
      002E60 39               [11] 9362 	add	hl, sp
      002E61 7E               [ 7] 9363 	ld	a, (hl)
      002E62 D6 2D            [ 7] 9364 	sub	a, #0x2d
      002E64 20 13            [12] 9365 	jr	NZ, 00110$
                                   9366 ;src\/Intro.h:63: ChangeFontColor(0xf0);
      002E66 3E F0            [ 7] 9367 	ld	a, #0xf0
      002E68 F5               [11] 9368 	push	af
      002E69 33               [ 6] 9369 	inc	sp
      002E6A CDrC3r2D         [17] 9370 	call	_ChangeFontColor
      002E6D 33               [ 6] 9371 	inc	sp
                                   9372 ;src\/Intro.h:64: Wait(180);
      002E6E 21 B4 00         [10] 9373 	ld	hl, #0x00b4
      002E71 E5               [11] 9374 	push	hl
      002E72 CDr00r00         [17] 9375 	call	_Wait
      002E75 F1               [10] 9376 	pop	af
      002E76 C3rECr2D         [10] 9377 	jp	00121$
      002E79                       9378 00110$:
                                   9379 ;src\/Intro.h:66: else if(counter == 30) {
      002E79 21 00 00         [10] 9380 	ld	hl, #0
      002E7C 39               [11] 9381 	add	hl, sp
      002E7D 7E               [ 7] 9382 	ld	a, (hl)
      002E7E D6 1E            [ 7] 9383 	sub	a, #0x1e
      002E80 20 13            [12] 9384 	jr	NZ, 00107$
                                   9385 ;src\/Intro.h:67: ChangeFontColor(0xe0);
      002E82 3E E0            [ 7] 9386 	ld	a, #0xe0
      002E84 F5               [11] 9387 	push	af
      002E85 33               [ 6] 9388 	inc	sp
      002E86 CDrC3r2D         [17] 9389 	call	_ChangeFontColor
      002E89 33               [ 6] 9390 	inc	sp
                                   9391 ;src\/Intro.h:68: Wait(5);
      002E8A 21 05 00         [10] 9392 	ld	hl, #0x0005
      002E8D E5               [11] 9393 	push	hl
      002E8E CDr00r00         [17] 9394 	call	_Wait
      002E91 F1               [10] 9395 	pop	af
      002E92 C3rECr2D         [10] 9396 	jp	00121$
      002E95                       9397 00107$:
                                   9398 ;src\/Intro.h:70: else if(counter == 15) {
      002E95 21 00 00         [10] 9399 	ld	hl, #0
      002E98 39               [11] 9400 	add	hl, sp
      002E99 7E               [ 7] 9401 	ld	a, (hl)
      002E9A D6 0F            [ 7] 9402 	sub	a, #0x0f
      002E9C C2rECr2D         [10] 9403 	jp	NZ,00121$
                                   9404 ;src\/Intro.h:72: ChangeFontColor(0x50);
      002E9F 3E 50            [ 7] 9405 	ld	a, #0x50
      002EA1 F5               [11] 9406 	push	af
      002EA2 33               [ 6] 9407 	inc	sp
      002EA3 CDrC3r2D         [17] 9408 	call	_ChangeFontColor
      002EA6 33               [ 6] 9409 	inc	sp
                                   9410 ;src\/Intro.h:73: Wait(5);
      002EA7 21 05 00         [10] 9411 	ld	hl, #0x0005
      002EAA E5               [11] 9412 	push	hl
      002EAB CDr00r00         [17] 9413 	call	_Wait
      002EAE F1               [10] 9414 	pop	af
      002EAF C3rECr2D         [10] 9415 	jp	00121$
      002EB2                       9416 00123$:
                                   9417 ;src\/Intro.h:77: ChangeFontColor(0x10); // Hide text
      002EB2 3E 10            [ 7] 9418 	ld	a, #0x10
      002EB4 F5               [11] 9419 	push	af
      002EB5 33               [ 6] 9420 	inc	sp
      002EB6 CDrC3r2D         [17] 9421 	call	_ChangeFontColor
      002EB9 33               [ 6] 9422 	inc	sp
                                   9423 ;src\/Intro.h:78: Wait(60);
      002EBA 21 3C 00         [10] 9424 	ld	hl, #0x003c
      002EBD E5               [11] 9425 	push	hl
      002EBE CDr00r00         [17] 9426 	call	_Wait
      002EC1 F1               [10] 9427 	pop	af
                                   9428 ;src\/Intro.h:80: }
      002EC2 33               [ 6] 9429 	inc	sp
      002EC3 C9               [10] 9430 	ret
                                   9431 ;src\/Intro.h:82: void Intro() {
                                   9432 ;	---------------------------------
                                   9433 ; Function Intro
                                   9434 ; ---------------------------------
      002EC4                       9435 _Intro::
                                   9436 ;src\/Intro.h:84: InitVRAM();
      002EC4 CDr55r1C         [17] 9437 	call	_InitVRAM
                                   9438 ;src\/Intro.h:86: ChangeFontColor(0x10); // Hide text
      002EC7 3E 10            [ 7] 9439 	ld	a, #0x10
      002EC9 F5               [11] 9440 	push	af
      002ECA 33               [ 6] 9441 	inc	sp
      002ECB CDrC3r2D         [17] 9442 	call	_ChangeFontColor
      002ECE 33               [ 6] 9443 	inc	sp
                                   9444 ;src\/Intro.h:88: DrawString("A game by ", 11, 11);
      002ECF 11 0B 0B         [10] 9445 	ld	de, #0x0b0b
      002ED2 D5               [11] 9446 	push	de
      002ED3 21r33r2F         [10] 9447 	ld	hl, #___str_8
      002ED6 E5               [11] 9448 	push	hl
      002ED7 CDrBBr12         [17] 9449 	call	_DrawString
      002EDA F1               [10] 9450 	pop	af
      002EDB F1               [10] 9451 	pop	af
                                   9452 ;src\/Intro.h:89: DrawString("ANDRE BAPTISTA  ", 9, 13);
      002EDC 11 09 0D         [10] 9453 	ld	de, #0x0d09
      002EDF D5               [11] 9454 	push	de
      002EE0 21r3Er2F         [10] 9455 	ld	hl, #___str_9
      002EE3 E5               [11] 9456 	push	hl
      002EE4 CDrBBr12         [17] 9457 	call	_DrawString
      002EE7 F1               [10] 9458 	pop	af
      002EE8 F1               [10] 9459 	pop	af
                                   9460 ;src\/Intro.h:90: FadeOut();
      002EE9 CDrD9r2D         [17] 9461 	call	_FadeOut
                                   9462 ;src\/Intro.h:92: DrawString("Powered by", 11, 11);
      002EEC 11 0B 0B         [10] 9463 	ld	de, #0x0b0b
      002EEF D5               [11] 9464 	push	de
      002EF0 21r4Fr2F         [10] 9465 	ld	hl, #___str_10
      002EF3 E5               [11] 9466 	push	hl
      002EF4 CDrBBr12         [17] 9467 	call	_DrawString
      002EF7 F1               [10] 9468 	pop	af
      002EF8 F1               [10] 9469 	pop	af
                                   9470 ;src\/Intro.h:93: DrawString("8 BIT WORKSHOP  ", 9, 13);
      002EF9 11 09 0D         [10] 9471 	ld	de, #0x0d09
      002EFC D5               [11] 9472 	push	de
      002EFD 21r5Ar2F         [10] 9473 	ld	hl, #___str_11
      002F00 E5               [11] 9474 	push	hl
      002F01 CDrBBr12         [17] 9475 	call	_DrawString
      002F04 F1               [10] 9476 	pop	af
      002F05 F1               [10] 9477 	pop	af
                                   9478 ;src\/Intro.h:94: FadeOut();
      002F06 CDrD9r2D         [17] 9479 	call	_FadeOut
                                   9480 ;src\/Intro.h:96: DrawString("Powered by", 11, 11);
      002F09 11 0B 0B         [10] 9481 	ld	de, #0x0b0b
      002F0C D5               [11] 9482 	push	de
      002F0D 21r4Fr2F         [10] 9483 	ld	hl, #___str_10
      002F10 E5               [11] 9484 	push	hl
      002F11 CDrBBr12         [17] 9485 	call	_DrawString
      002F14 F1               [10] 9486 	pop	af
      002F15 F1               [10] 9487 	pop	af
                                   9488 ;src\/Intro.h:97: DrawString(" MSX TEMPLATES  ", 9, 13);
      002F16 11 09 0D         [10] 9489 	ld	de, #0x0d09
      002F19 D5               [11] 9490 	push	de
      002F1A 21r6Br2F         [10] 9491 	ld	hl, #___str_12
      002F1D E5               [11] 9492 	push	hl
      002F1E CDrBBr12         [17] 9493 	call	_DrawString
      002F21 F1               [10] 9494 	pop	af
      002F22 F1               [10] 9495 	pop	af
                                   9496 ;src\/Intro.h:98: DrawString("by DANILO ANGELO", 8, 15);
      002F23 11 08 0F         [10] 9497 	ld	de, #0x0f08
      002F26 D5               [11] 9498 	push	de
      002F27 21r7Cr2F         [10] 9499 	ld	hl, #___str_13
      002F2A E5               [11] 9500 	push	hl
      002F2B CDrBBr12         [17] 9501 	call	_DrawString
      002F2E F1               [10] 9502 	pop	af
      002F2F F1               [10] 9503 	pop	af
                                   9504 ;src\/Intro.h:99: FadeOut();
                                   9505 ;src\/Intro.h:105: }
      002F30 C3rD9r2D         [10] 9506 	jp	_FadeOut
      002F33                       9507 ___str_8:
      002F33 41 20 67 61 6D 65 20  9508 	.ascii "A game by "
             62 79 20
      002F3D 00                    9509 	.db 0x00
      002F3E                       9510 ___str_9:
      002F3E 41 4E 44 52 45 20 42  9511 	.ascii "ANDRE BAPTISTA  "
             41 50 54 49 53 54 41
             20 20
      002F4E 00                    9512 	.db 0x00
      002F4F                       9513 ___str_10:
      002F4F 50 6F 77 65 72 65 64  9514 	.ascii "Powered by"
             20 62 79
      002F59 00                    9515 	.db 0x00
      002F5A                       9516 ___str_11:
      002F5A 38 20 42 49 54 20 57  9517 	.ascii "8 BIT WORKSHOP  "
             4F 52 4B 53 48 4F 50
             20 20
      002F6A 00                    9518 	.db 0x00
      002F6B                       9519 ___str_12:
      002F6B 20 4D 53 58 20 54 45  9520 	.ascii " MSX TEMPLATES  "
             4D 50 4C 41 54 45 53
             20 20
      002F7B 00                    9521 	.db 0x00
      002F7C                       9522 ___str_13:
      002F7C 62 79 20 44 41 4E 49  9523 	.ascii "by DANILO ANGELO"
             4C 4F 20 41 4E 47 45
             4C 4F
      002F8C 00                    9524 	.db 0x00
                                   9525 ;src\/Title.h:14: void SetBlock(byte col, byte line, byte tileNumber) {
                                   9526 ;	---------------------------------
                                   9527 ; Function SetBlock
                                   9528 ; ---------------------------------
      002F8D                       9529 _SetBlock::
      002F8D DD E5            [15] 9530 	push	ix
      002F8F DD 21 00 00      [14] 9531 	ld	ix,#0
      002F93 DD 39            [15] 9532 	add	ix,sp
                                   9533 ;src\/Title.h:15: WRTVRM(NAMTBL + col + (line * 32), tileNumber);
      002F95 DD 7E 04         [19] 9534 	ld	a, 4 (ix)
      002F98 06 00            [ 7] 9535 	ld	b, #0x00
      002F9A 4F               [ 4] 9536 	ld	c, a
      002F9B 78               [ 4] 9537 	ld	a, b
      002F9C C6 18            [ 7] 9538 	add	a, #0x18
      002F9E 47               [ 4] 9539 	ld	b, a
      002F9F DD 6E 05         [19] 9540 	ld	l, 5 (ix)
      002FA2 26 00            [ 7] 9541 	ld	h, #0x00
      002FA4 29               [11] 9542 	add	hl, hl
      002FA5 29               [11] 9543 	add	hl, hl
      002FA6 29               [11] 9544 	add	hl, hl
      002FA7 29               [11] 9545 	add	hl, hl
      002FA8 29               [11] 9546 	add	hl, hl
      002FA9 09               [11] 9547 	add	hl, bc
      002FAA DD 7E 06         [19] 9548 	ld	a, 6 (ix)
      002FAD F5               [11] 9549 	push	af
      002FAE 33               [ 6] 9550 	inc	sp
      002FAF E5               [11] 9551 	push	hl
      002FB0 CDr00r00         [17] 9552 	call	_WRTVRM
      002FB3 F1               [10] 9553 	pop	af
      002FB4 33               [ 6] 9554 	inc	sp
                                   9555 ;src\/Title.h:16: }
      002FB5 DD E1            [14] 9556 	pop	ix
      002FB7 C9               [10] 9557 	ret
                                   9558 ;src\/Title.h:18: void TitleScreen() {
                                   9559 ;	---------------------------------
                                   9560 ; Function TitleScreen
                                   9561 ; ---------------------------------
      002FB8                       9562 _TitleScreen::
      002FB8 DD E5            [15] 9563 	push	ix
      002FBA DD 21 00 00      [14] 9564 	ld	ix,#0
      002FBE DD 39            [15] 9565 	add	ix,sp
      002FC0 21 EB FF         [10] 9566 	ld	hl, #-21
      002FC3 39               [11] 9567 	add	hl, sp
      002FC4 F9               [ 6] 9568 	ld	sp, hl
                                   9569 ;src\/Title.h:19: byte colorIndex = 0;
      002FC5 0E 00            [ 7] 9570 	ld	c, #0x00
                                   9571 ;src\/Title.h:34: const char blocks[] = {
      002FC7 21 00 00         [10] 9572 	ld	hl, #0
      002FCA 39               [11] 9573 	add	hl, sp
      002FCB EB               [ 4] 9574 	ex	de, hl
      002FCC 3E 8E            [ 7] 9575 	ld	a, #0x8e
      002FCE 12               [ 7] 9576 	ld	(de), a
      002FCF 6B               [ 4] 9577 	ld	l, e
      002FD0 62               [ 4] 9578 	ld	h, d
      002FD1 23               [ 6] 9579 	inc	hl
      002FD2 36 8F            [10] 9580 	ld	(hl), #0x8f
      002FD4 6B               [ 4] 9581 	ld	l, e
      002FD5 62               [ 4] 9582 	ld	h, d
      002FD6 23               [ 6] 9583 	inc	hl
      002FD7 23               [ 6] 9584 	inc	hl
      002FD8 36 90            [10] 9585 	ld	(hl), #0x90
      002FDA 6B               [ 4] 9586 	ld	l, e
      002FDB 62               [ 4] 9587 	ld	h, d
      002FDC 23               [ 6] 9588 	inc	hl
      002FDD 23               [ 6] 9589 	inc	hl
      002FDE 23               [ 6] 9590 	inc	hl
      002FDF 36 91            [10] 9591 	ld	(hl), #0x91
      002FE1 21 04 00         [10] 9592 	ld	hl, #0x0004
      002FE4 19               [11] 9593 	add	hl, de
      002FE5 36 92            [10] 9594 	ld	(hl), #0x92
      002FE7 21 05 00         [10] 9595 	ld	hl, #0x0005
      002FEA 19               [11] 9596 	add	hl, de
      002FEB 36 93            [10] 9597 	ld	(hl), #0x93
      002FED 21 06 00         [10] 9598 	ld	hl, #0x0006
      002FF0 19               [11] 9599 	add	hl, de
      002FF1 36 94            [10] 9600 	ld	(hl), #0x94
                                   9601 ;src\/Title.h:44: const char colors[] = { A, C, E, G }; // last item will be ignored
      002FF3 21 07 00         [10] 9602 	ld	hl, #7
      002FF6 39               [11] 9603 	add	hl, sp
      002FF7 DD 75 F6         [19] 9604 	ld	-10 (ix), l
      002FFA DD 74 F7         [19] 9605 	ld	-9 (ix), h
      002FFD 36 8E            [10] 9606 	ld	(hl), #0x8e
      002FFF DD 6E F6         [19] 9607 	ld	l, -10 (ix)
      003002 DD 66 F7         [19] 9608 	ld	h, -9 (ix)
      003005 23               [ 6] 9609 	inc	hl
      003006 36 90            [10] 9610 	ld	(hl), #0x90
      003008 DD 6E F6         [19] 9611 	ld	l, -10 (ix)
      00300B DD 66 F7         [19] 9612 	ld	h, -9 (ix)
      00300E 23               [ 6] 9613 	inc	hl
      00300F 23               [ 6] 9614 	inc	hl
      003010 36 92            [10] 9615 	ld	(hl), #0x92
      003012 DD 6E F6         [19] 9616 	ld	l, -10 (ix)
      003015 DD 66 F7         [19] 9617 	ld	h, -9 (ix)
      003018 23               [ 6] 9618 	inc	hl
      003019 23               [ 6] 9619 	inc	hl
      00301A 23               [ 6] 9620 	inc	hl
      00301B 36 94            [10] 9621 	ld	(hl), #0x94
                                   9622 ;src\/Title.h:47: InitVRAM();
      00301D C5               [11] 9623 	push	bc
      00301E D5               [11] 9624 	push	de
      00301F CDr55r1C         [17] 9625 	call	_InitVRAM
      003022 21 00 01         [10] 9626 	ld	hl, #0x0100
      003025 E5               [11] 9627 	push	hl
      003026 21r9Fr31         [10] 9628 	ld	hl, #_TitleScreen_title_65536_295
      003029 E5               [11] 9629 	push	hl
      00302A 21 00 18         [10] 9630 	ld	hl, #0x1800
      00302D E5               [11] 9631 	push	hl
      00302E CDr00r00         [17] 9632 	call	_LDIRVM
      003031 21 06 00         [10] 9633 	ld	hl, #6
      003034 39               [11] 9634 	add	hl, sp
      003035 F9               [ 6] 9635 	ld	sp, hl
      003036 11 05 0D         [10] 9636 	ld	de, #0x0d05
      003039 D5               [11] 9637 	push	de
      00303A 21r9Fr32         [10] 9638 	ld	hl, #___str_14
      00303D E5               [11] 9639 	push	hl
      00303E CDrBBr12         [17] 9640 	call	_DrawString
      003041 F1               [10] 9641 	pop	af
      003042 26 17            [ 7] 9642 	ld	h,#0x17
      003044 E3               [19] 9643 	ex	(sp),hl
      003045 33               [ 6] 9644 	inc	sp
      003046 AF               [ 4] 9645 	xor	a, a
      003047 F5               [11] 9646 	push	af
      003048 33               [ 6] 9647 	inc	sp
      003049 21rB6r32         [10] 9648 	ld	hl, #___str_15
      00304C E5               [11] 9649 	push	hl
      00304D CDrBBr12         [17] 9650 	call	_DrawString
      003050 F1               [10] 9651 	pop	af
      003051 F1               [10] 9652 	pop	af
      003052 11 19 17         [10] 9653 	ld	de, #0x1719
      003055 D5               [11] 9654 	push	de
      003056 21rCBr32         [10] 9655 	ld	hl, #___str_16
      003059 E5               [11] 9656 	push	hl
      00305A CDrBBr12         [17] 9657 	call	_DrawString
      00305D F1               [10] 9658 	pop	af
      00305E F1               [10] 9659 	pop	af
      00305F D1               [10] 9660 	pop	de
      003060 C1               [10] 9661 	pop	bc
                                   9662 ;src\/Title.h:55: while(TRUE) {
      003061                       9663 00120$:
                                   9664 ;src\/Title.h:56: byte index = 0, col_1, line_1; //, col_2, line_2, col_3, line_3;
      003061 DD 36 FD 00      [19] 9665 	ld	-3 (ix), #0
                                   9666 ;src\/Title.h:60: word counter = 0;
      003065 AF               [ 4] 9667 	xor	a, a
      003066 DD 77 FE         [19] 9668 	ld	-2 (ix), a
      003069 DD 77 FF         [19] 9669 	ld	-1 (ix), a
                                   9670 ;src\/Title.h:70: do {
      00306C                       9671 00106$:
                                   9672 ;src\/Title.h:77: col_1 = GetRandomInInterval(31, 0b00011111);
      00306C C5               [11] 9673 	push	bc
      00306D D5               [11] 9674 	push	de
      00306E 11 1F 1F         [10] 9675 	ld	de, #0x1f1f
      003071 D5               [11] 9676 	push	de
      003072 CDrD9r00         [17] 9677 	call	_GetRandomInInterval
      003075 F1               [10] 9678 	pop	af
                                   9679 ;src\/Title.h:78: line_1 = GetRandomInInterval(7, 0b00000111);
      003076 DD 75 F8         [19] 9680 	ld	-8 (ix), l
      003079 11 07 07         [10] 9681 	ld	de, #0x0707
      00307C D5               [11] 9682 	push	de
      00307D CDrD9r00         [17] 9683 	call	_GetRandomInInterval
      003080 F1               [10] 9684 	pop	af
      003081 D1               [10] 9685 	pop	de
      003082 C1               [10] 9686 	pop	bc
      003083 DD 75 F9         [19] 9687 	ld	-7 (ix), l
                                   9688 ;src\/Title.h:81: value = RDVRM(NAMTBL + col_1 + (line_1 * 32));
      003086 DD 6E F8         [19] 9689 	ld	l, -8 (ix)
      003089 3E 00            [ 7] 9690 	ld	a, #0x00
      00308B C6 18            [ 7] 9691 	add	a, #0x18
      00308D 67               [ 4] 9692 	ld	h, a
      00308E DD 7E F9         [19] 9693 	ld	a, -7 (ix)
      003091 06 00            [ 7] 9694 	ld	b, #0x00
      003093 87               [ 4] 9695 	add	a, a
      003094 CB 10            [ 8] 9696 	rl	b
      003096 87               [ 4] 9697 	add	a, a
      003097 CB 10            [ 8] 9698 	rl	b
      003099 87               [ 4] 9699 	add	a, a
      00309A CB 10            [ 8] 9700 	rl	b
      00309C 87               [ 4] 9701 	add	a, a
      00309D CB 10            [ 8] 9702 	rl	b
      00309F 87               [ 4] 9703 	add	a, a
      0030A0 CB 10            [ 8] 9704 	rl	b
      0030A2 85               [ 4] 9705 	add	a, l
      0030A3 6F               [ 4] 9706 	ld	l, a
      0030A4 78               [ 4] 9707 	ld	a, b
      0030A5 8C               [ 4] 9708 	adc	a, h
      0030A6 67               [ 4] 9709 	ld	h, a
      0030A7 C5               [11] 9710 	push	bc
      0030A8 D5               [11] 9711 	push	de
      0030A9 CDr00r00         [17] 9712 	call	_RDVRM
      0030AC D1               [10] 9713 	pop	de
      0030AD C1               [10] 9714 	pop	bc
      0030AE DD 75 FA         [19] 9715 	ld	-6 (ix), l
                                   9716 ;src\/Title.h:84: if(counter++ > 1000) {
      0030B1 DD 46 FE         [19] 9717 	ld	b, -2 (ix)
      0030B4 DD 6E FF         [19] 9718 	ld	l, -1 (ix)
      0030B7 DD 34 FE         [23] 9719 	inc	-2 (ix)
      0030BA 20 03            [12] 9720 	jr	NZ, 00193$
      0030BC DD 34 FF         [23] 9721 	inc	-1 (ix)
      0030BF                       9722 00193$:
      0030BF 3E E8            [ 7] 9723 	ld	a, #0xe8
      0030C1 B8               [ 4] 9724 	cp	a, b
      0030C2 3E 03            [ 7] 9725 	ld	a, #0x03
      0030C4 9D               [ 4] 9726 	sbc	a, l
      0030C5 30 0F            [12] 9727 	jr	NC, 00107$
                                   9728 ;src\/Title.h:85: colorIndex++;
      0030C7 0C               [ 4] 9729 	inc	c
                                   9730 ;src\/Title.h:86: if(colorIndex >= sizeof(colors) - 1) colorIndex = 0;
      0030C8 79               [ 4] 9731 	ld	a, c
      0030C9 D6 03            [ 7] 9732 	sub	a, #0x03
      0030CB 38 02            [12] 9733 	jr	C, 00102$
      0030CD 0E 00            [ 7] 9734 	ld	c, #0x00
      0030CF                       9735 00102$:
                                   9736 ;src\/Title.h:101: counter = 0;
      0030CF AF               [ 4] 9737 	xor	a, a
      0030D0 DD 77 FE         [19] 9738 	ld	-2 (ix), a
      0030D3 DD 77 FF         [19] 9739 	ld	-1 (ix), a
      0030D6                       9740 00107$:
                                   9741 ;src\/Title.h:104: while (value == EMPTY || value == colors[colorIndex + 1]);
      0030D6 DD 7E FA         [19] 9742 	ld	a, -6 (ix)
      0030D9 B7               [ 4] 9743 	or	a, a
      0030DA 28 90            [12] 9744 	jr	Z, 00106$
      0030DC 79               [ 4] 9745 	ld	a, c
      0030DD 3C               [ 4] 9746 	inc	a
      0030DE F5               [11] 9747 	push	af
      0030DF 17               [ 4] 9748 	rla
      0030E0 9F               [ 4] 9749 	sbc	a, a
      0030E1 47               [ 4] 9750 	ld	b, a
      0030E2 F1               [10] 9751 	pop	af
      0030E3 DD 86 F6         [19] 9752 	add	a, -10 (ix)
      0030E6 DD 77 FB         [19] 9753 	ld	-5 (ix), a
      0030E9 78               [ 4] 9754 	ld	a, b
      0030EA DD 8E F7         [19] 9755 	adc	a, -9 (ix)
      0030ED DD 77 FC         [19] 9756 	ld	-4 (ix), a
      0030F0 DD 6E FB         [19] 9757 	ld	l, -5 (ix)
      0030F3 DD 66 FC         [19] 9758 	ld	h, -4 (ix)
      0030F6 46               [ 7] 9759 	ld	b, (hl)
      0030F7 DD 7E FA         [19] 9760 	ld	a, -6 (ix)
      0030FA 90               [ 4] 9761 	sub	a, b
      0030FB CAr6Cr30         [10] 9762 	jp	Z,00106$
                                   9763 ;src\/Title.h:120: for(byte i=0; i < 10 + 0; i++) {
      0030FE 06 00            [ 7] 9764 	ld	b, #0x00
      003100                       9765 00123$:
      003100 78               [ 4] 9766 	ld	a, b
      003101 D6 0A            [ 7] 9767 	sub	a, #0x0a
      003103 30 79            [12] 9768 	jr	NC, 00118$
                                   9769 ;src\/Title.h:122: word lastJiffy = JIFFY;
      003105 2A 9E FC         [16] 9770 	ld	hl, (_JIFFY)
      003108 DD 75 FE         [19] 9771 	ld	-2 (ix), l
      00310B DD 74 FF         [19] 9772 	ld	-1 (ix), h
                                   9773 ;src\/Title.h:123: while (JIFFY == lastJiffy) {
      00310E                       9774 00109$:
      00310E FD 21 9E FC      [14] 9775 	ld	iy, #_JIFFY
      003112 FD 7E 00         [19] 9776 	ld	a, 0 (iy)
      003115 DD 96 FE         [19] 9777 	sub	a, -2 (ix)
      003118 20 08            [12] 9778 	jr	NZ, 00195$
      00311A FD 7E 01         [19] 9779 	ld	a, 1 (iy)
      00311D DD 96 FF         [19] 9780 	sub	a, -1 (ix)
      003120 28 EC            [12] 9781 	jr	Z, 00109$
      003122                       9782 00195$:
                                   9783 ;src\/Title.h:128: SetBlock(col_1, line_1, blocks[index]);
      003122 DD 6E FD         [19] 9784 	ld	l, -3 (ix)
      003125 26 00            [ 7] 9785 	ld	h, #0x00
      003127 19               [11] 9786 	add	hl, de
      003128 7E               [ 7] 9787 	ld	a, (hl)
      003129 C5               [11] 9788 	push	bc
      00312A D5               [11] 9789 	push	de
      00312B F5               [11] 9790 	push	af
      00312C 33               [ 6] 9791 	inc	sp
      00312D DD 66 F9         [19] 9792 	ld	h, -7 (ix)
      003130 DD 6E F8         [19] 9793 	ld	l, -8 (ix)
      003133 E5               [11] 9794 	push	hl
      003134 CDr8Dr2F         [17] 9795 	call	_SetBlock
      003137 F1               [10] 9796 	pop	af
      003138 33               [ 6] 9797 	inc	sp
      003139 D1               [10] 9798 	pop	de
      00313A C1               [10] 9799 	pop	bc
                                   9800 ;src\/Title.h:132: if(index++ >= sizeof(blocks)) index = 0;
      00313B DD 7E FD         [19] 9801 	ld	a, -3 (ix)
      00313E DD 34 FD         [23] 9802 	inc	-3 (ix)
      003141 D6 07            [ 7] 9803 	sub	a, #0x07
      003143 38 04            [12] 9804 	jr	C, 00113$
      003145 DD 36 FD 00      [19] 9805 	ld	-3 (ix), #0
      003149                       9806 00113$:
                                   9807 ;src\/Title.h:145: spaceBar = GTTRIG(TRIG_Spacebar);
      003149 C5               [11] 9808 	push	bc
      00314A D5               [11] 9809 	push	de
      00314B 2E 00            [ 7] 9810 	ld	l, #0x00
      00314D CDr00r00         [17] 9811 	call	_GTTRIG
                                   9812 ;src\/Title.h:146: btn1 = GTTRIG(TRIG_Joy1_A);
      003150 DD 75 FF         [19] 9813 	ld	-1 (ix), l
      003153 2E 01            [ 7] 9814 	ld	l, #0x01
      003155 CDr00r00         [17] 9815 	call	_GTTRIG
      003158 D1               [10] 9816 	pop	de
      003159 C1               [10] 9817 	pop	bc
                                   9818 ;src\/Title.h:147: btn2 = GTTRIG(TRIG_Joy1_B);
      00315A E5               [11] 9819 	push	hl
      00315B C5               [11] 9820 	push	bc
      00315C D5               [11] 9821 	push	de
      00315D 2E 03            [ 7] 9822 	ld	l, #0x03
      00315F CDr00r00         [17] 9823 	call	_GTTRIG
      003162 7D               [ 4] 9824 	ld	a, l
      003163 D1               [10] 9825 	pop	de
      003164 C1               [10] 9826 	pop	bc
      003165 E1               [10] 9827 	pop	hl
      003166 67               [ 4] 9828 	ld	h, a
                                   9829 ;src\/Title.h:149: if(spaceBar == 0xff || btn1 == 0xff || btn2 == 0xff) { 
      003167 DD 7E FF         [19] 9830 	ld	a, -1 (ix)
      00316A 3C               [ 4] 9831 	inc	a
      00316B 28 06            [12] 9832 	jr	Z, 00114$
      00316D 2C               [ 4] 9833 	inc	l
      00316E 28 03            [12] 9834 	jr	Z, 00114$
      003170 24               [ 4] 9835 	inc	h
      003171 20 08            [12] 9836 	jr	NZ, 00124$
      003173                       9837 00114$:
                                   9838 ;src\/Title.h:150: rndSeed = JIFFY;
      003173 3A 9E FC         [13] 9839 	ld	a,(#_JIFFY + 0)
      003176 32r08r00         [13] 9840 	ld	(#_rndSeed), a
                                   9841 ;src\/Title.h:151: return;
      003179 18 1F            [12] 9842 	jr	00125$
      00317B                       9843 00124$:
                                   9844 ;src\/Title.h:120: for(byte i=0; i < 10 + 0; i++) {
      00317B 04               [ 4] 9845 	inc	b
      00317C 18 82            [12] 9846 	jr	00123$
      00317E                       9847 00118$:
                                   9848 ;src\/Title.h:155: SetBlock(col_1, line_1, colors[colorIndex + 1]);
      00317E DD 6E FB         [19] 9849 	ld	l, -5 (ix)
      003181 DD 66 FC         [19] 9850 	ld	h, -4 (ix)
      003184 7E               [ 7] 9851 	ld	a, (hl)
      003185 C5               [11] 9852 	push	bc
      003186 D5               [11] 9853 	push	de
      003187 F5               [11] 9854 	push	af
      003188 33               [ 6] 9855 	inc	sp
      003189 DD 66 F9         [19] 9856 	ld	h, -7 (ix)
      00318C DD 6E F8         [19] 9857 	ld	l, -8 (ix)
      00318F E5               [11] 9858 	push	hl
      003190 CDr8Dr2F         [17] 9859 	call	_SetBlock
      003193 F1               [10] 9860 	pop	af
      003194 33               [ 6] 9861 	inc	sp
      003195 D1               [10] 9862 	pop	de
      003196 C1               [10] 9863 	pop	bc
      003197 C3r61r30         [10] 9864 	jp	00120$
      00319A                       9865 00125$:
                                   9866 ;src\/Title.h:158: }
      00319A DD F9            [10] 9867 	ld	sp, ix
      00319C DD E1            [14] 9868 	pop	ix
      00319E C9               [10] 9869 	ret
      00319F                       9870 _TitleScreen_title_65536_295:
      00319F 00                    9871 	.db #0x00	; 0
      0031A0 00                    9872 	.db #0x00	; 0
      0031A1 00                    9873 	.db #0x00	; 0
      0031A2 00                    9874 	.db #0x00	; 0
      0031A3 8E                    9875 	.db #0x8e	; 142
      0031A4 8E                    9876 	.db #0x8e	; 142
      0031A5 8E                    9877 	.db #0x8e	; 142
      0031A6 8E                    9878 	.db #0x8e	; 142
      0031A7 00                    9879 	.db #0x00	; 0
      0031A8 8E                    9880 	.db #0x8e	; 142
      0031A9 8E                    9881 	.db #0x8e	; 142
      0031AA 8E                    9882 	.db #0x8e	; 142
      0031AB 8E                    9883 	.db #0x8e	; 142
      0031AC 8E                    9884 	.db #0x8e	; 142
      0031AD 8E                    9885 	.db #0x8e	; 142
      0031AE 00                    9886 	.db #0x00	; 0
      0031AF 00                    9887 	.db #0x00	; 0
      0031B0 8E                    9888 	.db #0x8e	; 142
      0031B1 8E                    9889 	.db #0x8e	; 142
      0031B2 00                    9890 	.db #0x00	; 0
      0031B3 00                    9891 	.db #0x00	; 0
      0031B4 00                    9892 	.db #0x00	; 0
      0031B5 8E                    9893 	.db #0x8e	; 142
      0031B6 8E                    9894 	.db #0x8e	; 142
      0031B7 00                    9895 	.db #0x00	; 0
      0031B8 00                    9896 	.db #0x00	; 0
      0031B9 00                    9897 	.db #0x00	; 0
      0031BA 00                    9898 	.db #0x00	; 0
      0031BB 8E                    9899 	.db #0x8e	; 142
      0031BC 8E                    9900 	.db #0x8e	; 142
      0031BD 8E                    9901 	.db #0x8e	; 142
      0031BE 8E                    9902 	.db #0x8e	; 142
      0031BF 00                    9903 	.db #0x00	; 0
      0031C0 00                    9904 	.db #0x00	; 0
      0031C1 00                    9905 	.db #0x00	; 0
      0031C2 8E                    9906 	.db #0x8e	; 142
      0031C3 8E                    9907 	.db #0x8e	; 142
      0031C4 8E                    9908 	.db #0x8e	; 142
      0031C5 8E                    9909 	.db #0x8e	; 142
      0031C6 8E                    9910 	.db #0x8e	; 142
      0031C7 00                    9911 	.db #0x00	; 0
      0031C8 8E                    9912 	.db #0x8e	; 142
      0031C9 8E                    9913 	.db #0x8e	; 142
      0031CA 00                    9914 	.db #0x00	; 0
      0031CB 00                    9915 	.db #0x00	; 0
      0031CC 00                    9916 	.db #0x00	; 0
      0031CD 8E                    9917 	.db #0x8e	; 142
      0031CE 8E                    9918 	.db #0x8e	; 142
      0031CF 00                    9919 	.db #0x00	; 0
      0031D0 00                    9920 	.db #0x00	; 0
      0031D1 8E                    9921 	.db #0x8e	; 142
      0031D2 8E                    9922 	.db #0x8e	; 142
      0031D3 00                    9923 	.db #0x00	; 0
      0031D4 00                    9924 	.db #0x00	; 0
      0031D5 8E                    9925 	.db #0x8e	; 142
      0031D6 8E                    9926 	.db #0x8e	; 142
      0031D7 00                    9927 	.db #0x00	; 0
      0031D8 00                    9928 	.db #0x00	; 0
      0031D9 00                    9929 	.db #0x00	; 0
      0031DA 8E                    9930 	.db #0x8e	; 142
      0031DB 8E                    9931 	.db #0x8e	; 142
      0031DC 8E                    9932 	.db #0x8e	; 142
      0031DD 8E                    9933 	.db #0x8e	; 142
      0031DE 8E                    9934 	.db #0x8e	; 142
      0031DF 00                    9935 	.db #0x00	; 0
      0031E0 00                    9936 	.db #0x00	; 0
      0031E1 8E                    9937 	.db #0x8e	; 142
      0031E2 8E                    9938 	.db #0x8e	; 142
      0031E3 8E                    9939 	.db #0x8e	; 142
      0031E4 00                    9940 	.db #0x00	; 0
      0031E5 8E                    9941 	.db #0x8e	; 142
      0031E6 8E                    9942 	.db #0x8e	; 142
      0031E7 00                    9943 	.db #0x00	; 0
      0031E8 8E                    9944 	.db #0x8e	; 142
      0031E9 8E                    9945 	.db #0x8e	; 142
      0031EA 00                    9946 	.db #0x00	; 0
      0031EB 00                    9947 	.db #0x00	; 0
      0031EC 00                    9948 	.db #0x00	; 0
      0031ED 8E                    9949 	.db #0x8e	; 142
      0031EE 8E                    9950 	.db #0x8e	; 142
      0031EF 00                    9951 	.db #0x00	; 0
      0031F0 00                    9952 	.db #0x00	; 0
      0031F1 00                    9953 	.db #0x00	; 0
      0031F2 8E                    9954 	.db #0x8e	; 142
      0031F3 8E                    9955 	.db #0x8e	; 142
      0031F4 00                    9956 	.db #0x00	; 0
      0031F5 8E                    9957 	.db #0x8e	; 142
      0031F6 8E                    9958 	.db #0x8e	; 142
      0031F7 00                    9959 	.db #0x00	; 0
      0031F8 00                    9960 	.db #0x00	; 0
      0031F9 8E                    9961 	.db #0x8e	; 142
      0031FA 8E                    9962 	.db #0x8e	; 142
      0031FB 8E                    9963 	.db #0x8e	; 142
      0031FC 00                    9964 	.db #0x00	; 0
      0031FD 8E                    9965 	.db #0x8e	; 142
      0031FE 8E                    9966 	.db #0x8e	; 142
      0031FF 00                    9967 	.db #0x00	; 0
      003200 8E                    9968 	.db #0x8e	; 142
      003201 8E                    9969 	.db #0x8e	; 142
      003202 8E                    9970 	.db #0x8e	; 142
      003203 00                    9971 	.db #0x00	; 0
      003204 00                    9972 	.db #0x00	; 0
      003205 8E                    9973 	.db #0x8e	; 142
      003206 8E                    9974 	.db #0x8e	; 142
      003207 00                    9975 	.db #0x00	; 0
      003208 8E                    9976 	.db #0x8e	; 142
      003209 8E                    9977 	.db #0x8e	; 142
      00320A 00                    9978 	.db #0x00	; 0
      00320B 00                    9979 	.db #0x00	; 0
      00320C 8E                    9980 	.db #0x8e	; 142
      00320D 8E                    9981 	.db #0x8e	; 142
      00320E 00                    9982 	.db #0x00	; 0
      00320F 00                    9983 	.db #0x00	; 0
      003210 00                    9984 	.db #0x00	; 0
      003211 00                    9985 	.db #0x00	; 0
      003212 00                    9986 	.db #0x00	; 0
      003213 8E                    9987 	.db #0x8e	; 142
      003214 8E                    9988 	.db #0x8e	; 142
      003215 8E                    9989 	.db #0x8e	; 142
      003216 00                    9990 	.db #0x00	; 0
      003217 00                    9991 	.db #0x00	; 0
      003218 8E                    9992 	.db #0x8e	; 142
      003219 8E                    9993 	.db #0x8e	; 142
      00321A 8E                    9994 	.db #0x8e	; 142
      00321B 00                    9995 	.db #0x00	; 0
      00321C 00                    9996 	.db #0x00	; 0
      00321D 8E                    9997 	.db #0x8e	; 142
      00321E 8E                    9998 	.db #0x8e	; 142
      00321F 00                    9999 	.db #0x00	; 0
      003220 8E                   10000 	.db #0x8e	; 142
      003221 8E                   10001 	.db #0x8e	; 142
      003222 00                   10002 	.db #0x00	; 0
      003223 00                   10003 	.db #0x00	; 0
      003224 00                   10004 	.db #0x00	; 0
      003225 8E                   10005 	.db #0x8e	; 142
      003226 8E                   10006 	.db #0x8e	; 142
      003227 00                   10007 	.db #0x00	; 0
      003228 8E                   10008 	.db #0x8e	; 142
      003229 8E                   10009 	.db #0x8e	; 142
      00322A 8E                   10010 	.db #0x8e	; 142
      00322B 8E                   10011 	.db #0x8e	; 142
      00322C 8E                   10012 	.db #0x8e	; 142
      00322D 00                   10013 	.db #0x00	; 0
      00322E 00                   10014 	.db #0x00	; 0
      00322F 00                   10015 	.db #0x00	; 0
      003230 00                   10016 	.db #0x00	; 0
      003231 00                   10017 	.db #0x00	; 0
      003232 00                   10018 	.db #0x00	; 0
      003233 8E                   10019 	.db #0x8e	; 142
      003234 8E                   10020 	.db #0x8e	; 142
      003235 00                   10021 	.db #0x00	; 0
      003236 00                   10022 	.db #0x00	; 0
      003237 00                   10023 	.db #0x00	; 0
      003238 8E                   10024 	.db #0x8e	; 142
      003239 8E                   10025 	.db #0x8e	; 142
      00323A 00                   10026 	.db #0x00	; 0
      00323B 00                   10027 	.db #0x00	; 0
      00323C 00                   10028 	.db #0x00	; 0
      00323D 8E                   10029 	.db #0x8e	; 142
      00323E 8E                   10030 	.db #0x8e	; 142
      00323F 00                   10031 	.db #0x00	; 0
      003240 8E                   10032 	.db #0x8e	; 142
      003241 8E                   10033 	.db #0x8e	; 142
      003242 00                   10034 	.db #0x00	; 0
      003243 00                   10035 	.db #0x00	; 0
      003244 00                   10036 	.db #0x00	; 0
      003245 8E                   10037 	.db #0x8e	; 142
      003246 8E                   10038 	.db #0x8e	; 142
      003247 00                   10039 	.db #0x00	; 0
      003248 8E                   10040 	.db #0x8e	; 142
      003249 8E                   10041 	.db #0x8e	; 142
      00324A 8E                   10042 	.db #0x8e	; 142
      00324B 8E                   10043 	.db #0x8e	; 142
      00324C 8E                   10044 	.db #0x8e	; 142
      00324D 00                   10045 	.db #0x00	; 0
      00324E 00                   10046 	.db #0x00	; 0
      00324F 00                   10047 	.db #0x00	; 0
      003250 00                   10048 	.db #0x00	; 0
      003251 00                   10049 	.db #0x00	; 0
      003252 00                   10050 	.db #0x00	; 0
      003253 8E                   10051 	.db #0x8e	; 142
      003254 8E                   10052 	.db #0x8e	; 142
      003255 00                   10053 	.db #0x00	; 0
      003256 00                   10054 	.db #0x00	; 0
      003257 00                   10055 	.db #0x00	; 0
      003258 8E                   10056 	.db #0x8e	; 142
      003259 8E                   10057 	.db #0x8e	; 142
      00325A 00                   10058 	.db #0x00	; 0
      00325B 00                   10059 	.db #0x00	; 0
      00325C 00                   10060 	.db #0x00	; 0
      00325D 8E                   10061 	.db #0x8e	; 142
      00325E 8E                   10062 	.db #0x8e	; 142
      00325F 00                   10063 	.db #0x00	; 0
      003260 8E                   10064 	.db #0x8e	; 142
      003261 8E                   10065 	.db #0x8e	; 142
      003262 8E                   10066 	.db #0x8e	; 142
      003263 8E                   10067 	.db #0x8e	; 142
      003264 8E                   10068 	.db #0x8e	; 142
      003265 8E                   10069 	.db #0x8e	; 142
      003266 8E                   10070 	.db #0x8e	; 142
      003267 00                   10071 	.db #0x00	; 0
      003268 8E                   10072 	.db #0x8e	; 142
      003269 8E                   10073 	.db #0x8e	; 142
      00326A 00                   10074 	.db #0x00	; 0
      00326B 00                   10075 	.db #0x00	; 0
      00326C 00                   10076 	.db #0x00	; 0
      00326D 8E                   10077 	.db #0x8e	; 142
      00326E 00                   10078 	.db #0x00	; 0
      00326F 00                   10079 	.db #0x00	; 0
      003270 00                   10080 	.db #0x00	; 0
      003271 00                   10081 	.db #0x00	; 0
      003272 00                   10082 	.db #0x00	; 0
      003273 8E                   10083 	.db #0x8e	; 142
      003274 8E                   10084 	.db #0x8e	; 142
      003275 00                   10085 	.db #0x00	; 0
      003276 00                   10086 	.db #0x00	; 0
      003277 00                   10087 	.db #0x00	; 0
      003278 8E                   10088 	.db #0x8e	; 142
      003279 8E                   10089 	.db #0x8e	; 142
      00327A 8E                   10090 	.db #0x8e	; 142
      00327B 8E                   10091 	.db #0x8e	; 142
      00327C 8E                   10092 	.db #0x8e	; 142
      00327D 8E                   10093 	.db #0x8e	; 142
      00327E 8E                   10094 	.db #0x8e	; 142
      00327F 00                   10095 	.db #0x00	; 0
      003280 8E                   10096 	.db #0x8e	; 142
      003281 8E                   10097 	.db #0x8e	; 142
      003282 00                   10098 	.db #0x00	; 0
      003283 00                   10099 	.db #0x00	; 0
      003284 00                   10100 	.db #0x00	; 0
      003285 8E                   10101 	.db #0x8e	; 142
      003286 8E                   10102 	.db #0x8e	; 142
      003287 00                   10103 	.db #0x00	; 0
      003288 8E                   10104 	.db #0x8e	; 142
      003289 8E                   10105 	.db #0x8e	; 142
      00328A 00                   10106 	.db #0x00	; 0
      00328B 00                   10107 	.db #0x00	; 0
      00328C 00                   10108 	.db #0x00	; 0
      00328D 8E                   10109 	.db #0x8e	; 142
      00328E 00                   10110 	.db #0x00	; 0
      00328F 00                   10111 	.db #0x00	; 0
      003290 00                   10112 	.db #0x00	; 0
      003291 00                   10113 	.db #0x00	; 0
      003292 00                   10114 	.db #0x00	; 0
      003293 8E                   10115 	.db #0x8e	; 142
      003294 8E                   10116 	.db #0x8e	; 142
      003295 00                   10117 	.db #0x00	; 0
      003296 00                   10118 	.db #0x00	; 0
      003297 00                   10119 	.db #0x00	; 0
      003298 8E                   10120 	.db #0x8e	; 142
      003299 8E                   10121 	.db #0x8e	; 142
      00329A 00                   10122 	.db #0x00	; 0
      00329B 00                   10123 	.db #0x00	; 0
      00329C 00                   10124 	.db #0x00	; 0
      00329D 8E                   10125 	.db #0x8e	; 142
      00329E 8E                   10126 	.db #0x8e	; 142
      00329F                      10127 ___str_14:
      00329F 50 52 45 53 53 20 54 10128 	.ascii "PRESS TRIGGER TO START"
             52 49 47 47 45 52 20
             54 4F 20 53 54 41 52
             54
      0032B5 00                   10129 	.db 0x00
      0032B6                      10130 ___str_15:
      0032B6 41 4E 44 52 45 42 41 10131 	.ascii "ANDREBAPTISTA.COM.BR"
             50 54 49 53 54 41 2E
             43 4F 4D 2E 42 52
      0032CA 00                   10132 	.db 0x00
      0032CB                      10133 ___str_16:
      0032CB 76 2E 31 2E 30 2E 30 10134 	.ascii "v.1.0.0"
      0032D2 00                   10135 	.db 0x00
                                  10136 ;src\main.c:106: void main() {
                                  10137 ;	---------------------------------
                                  10138 ; Function main
                                  10139 ; ---------------------------------
      0032D3                      10140 _main::
                                  10141 ;src\main.c:108: while(TRUE) {
      0032D3                      10142 00102$:
                                  10143 ;src\main.c:110: Intro();
      0032D3 CDrC4r2E         [17]10144 	call	_Intro
                                  10145 ;src\main.c:112: TitleScreen();
      0032D6 CDrB8r2F         [17]10146 	call	_TitleScreen
                                  10147 ;src\main.c:114: InitGame();
      0032D9 CDr23r2D         [17]10148 	call	_InitGame
                                  10149 ;src\main.c:117: }
      0032DC 18 F5            [12]10150 	jr	00102$
                                  10151 	.area _CODE
                                  10152 	.area _INITIALIZER
      000000                      10153 __xinit__gameOver:
      000000 00                   10154 	.db #0x00	; 0
      000001                      10155 __xinit__col:
      000001 00                   10156 	.db #0x00	; 0
      000002                      10157 __xinit__line:
      000002 00                   10158 	.db #0x00	; 0
      000003                      10159 __xinit__counter:
      000003 00                   10160 	.db #0x00	; 0
      000004                      10161 __xinit__blocksRemoved:
      000004 00 00                10162 	.dw #0x0000
      000006                      10163 __xinit__level:
      000006 01                   10164 	.db #0x01	; 1
      000007                      10165 __xinit__newLevel:
      000007 00                   10166 	.db #0x00	; 0
      000008                      10167 __xinit__rndSeed:
      000008 00                   10168 	.db #0x00	; 0
                                  10169 	.area _CABS (ABS)
